- en: Web Workers, Shared Memory, and Atomics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Performing work on separate threads with Web Workers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending messages to and from Web Workers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending data to Web Workers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stopping workers with terminate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating SharedArrayBuffer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending SharedArrayBuffer to a Web Worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading SharedArray from multiple Web Workers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Atomics to coordinate use of shared memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using promises to provide a simple interface for a worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The capabilities and expectations of JavaScript and web applications are expanding
    every day. One of the most exciting areas this expansion has led to is parallel
    programming, which is related to, but not synonymous with, asynchronous and concurrent
    programming. Parallel programming allows for multiple operations to take place
    simultaneously rather than interleaving them.
  prefs: []
  type: TYPE_NORMAL
- en: This distinction may seem small, but it is quite significant. In this chapter,
    we will see how to use the facilities available on the web platform to create
    programs that execute in parallel. Web Workers will be used to create parallel
    jobs, `SharedMemoryBuffer` to share information, and the Atomic API to coordinate
    between them.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling SharedArrayBuffers in Firefox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In early 2018, the Spectre and Meltdown vulnerabilities were discovered. In
    response, browser manufacturers disabled `SharedArrayBuffer` by default. Some
    of the recipes in this chapter require this feature. This recipe demonstrates
    how to enable them in Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you have an up to date version of Firefox installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Firefox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `about:config`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click I accept the risk!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for shared.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click javascript.options.shared_memory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This option should now have the value true:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b8f71782-f2eb-4927-a140-519e6c163ff4.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, shared memory is disabled in Firefox, but the options let developers
    activate these (potentially insecure) features without exposing normal users to
    them. You can read more about Meltdown and Spectre at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://meltdownattack.com/](https://meltdownattack.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: You should not leave this feature enabled after you finish experimenting with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling SharedArrayBuffers in Chrome
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In early 2018, the Spectre and Meltdown vulnerabilities were discovered. In
    response, browser manufacturers disabled `SharedArrayBuffer` by default. Some
    of the recipes in this chapter require this feature. This recipe demonstrates
    how to enable them in Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you have an up to date version of Chrome installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `chrome://flags/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click I accept the risk!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for shared.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Enabled for the option Experimental enabled SharedArrayBuffer support
    in JavaScript.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click RELAUNCH NOW:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c9d967a4-cd36-4049-ac03-e780b791fca2.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, shared memory is disabled in Firefox, but the options let developers
    activate these (potentially insecure) features without exposing normal users to
    them. You can read more about Meltdown and Spectre at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://meltdownattack.com/](https://meltdownattack.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: You should not leave this feature enabled after you finish experimenting with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Performing work on separate threads with Web Workers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web Workers allow browser operations to take place outside the main thread.
    Once created, communication between threads is made by passing messages. In this
    recipe, we'll see how to create a very simple worker, and send it a message from
    the main thread.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `05-01-performing-work-with-web-workers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file with a `main` function that creates a worker from a
    file named `worker.js`. Then post a message of type `hello-message` to the `worker`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file named `worker.js` that logs a `Hello` message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `worker.js` file, set the `onmessage` callback on the global scope.
    This function should log out the type of the message received:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3eef9de1-eb38-4516-8757-36b0d926476f.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Constructing the worker with the name of the worker file creates a worker on
    a new thread. By setting the `onmessage` event listener on the global context
    of the worker, we are able to receive messages from the main thread.
  prefs: []
  type: TYPE_NORMAL
- en: After creating the worker, the `main` function can use that reference to post
    messages to the new worker. The argument of the `postMessage` method is passed
    to the worker as the `data` attribute of the `message` property that is received.
  prefs: []
  type: TYPE_NORMAL
- en: Sending messages to and from Web Workers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we saw how to create and send a message to a worker
    on a background thread. That's pretty great! Before Web Workers were introduced,
    it wasn't possible for JavaScript to work with anything but the main thread. However,
    it isn't very useful if we can't get any information back.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to wait for, and send responses back from, a Web
    Worker.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `05-02-send-messages-to-and-from-web-workers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` with a function named `onMessage` that takes an argument
    `message` and logs out the `type` and `index` properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Set a  `WORKER_COUNT` constant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates `WORKER_COUNT` workers, sets the `onMessage`
    property, and posts the `index` to the worker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `worker.js` file that assigns the current context as a `global` constant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `onmessage` event listener on `global` to the global context. The function
    should take a message argument and log out the `index` and `type` properties.
    Then it should call `global.postMessage` with another message, passing back its
    `index`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c1fadc84-d802-4c07-99bc-d3a61c8aa365.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen how the `onmessage` listener can be used to listen for messages posted
    from the main thread. Now we can see that the same evenlistener, when binding
    on the worker reference in the `main` function, can listen to messages from the
    worker. We also can see that this listener is isolated from the individual worker
    being referenced. Each worker has a unique event listener; this is useful for
    organizing communication between workers.
  prefs: []
  type: TYPE_NORMAL
- en: Sending data to a Web Worker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've seen how to send messages back and forth, we can start to actually
    put these Web Workers to work. In this recipe, we'll see that you can send data
    to and from a Web Worker.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `05-03-send-data-to-and-from-web-workers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` with a function named `onMessage` that takes an argument
    `message` and logs out the `type` and `index` properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates a worker, sets the `onMessage` property,
    creates an array of random numbers, and posts two messages to the worker, one
    to sum some of the numbers and another to average them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `worker.js` file that assigns the current context as a `global` constant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `onmessage` event listener on `global` to the context. The function
    should take a message argument and perform either a sum or average operation on
    the numbers property of `message.data`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser: `http://localhost:8000/`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d0174fd0-836d-47be-bc70-c9838d951be4.png)x'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen a simple string posted to and from workers. Now we can see that more
    complex objects can be sent as well. In fact, a sizable number of types can be
    passed via `postMessage`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see a full list of valid types, visit the link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm)[.](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm)'
  prefs: []
  type: TYPE_NORMAL
- en: By using `postMessage`, we have copied the data to the worker. This operation
    is costly, because whenever the message is posted to a new thread, the data must
    be duplicated in order to be available. For small datasets, this isn't a problem,
    but for larger sets it can be slow and memory-intensive. For future recipes in
    this chapter, we'll be using shared memory to avoid this copying.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping workers with terminate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not all problems are cumulative. Some have a desired goal state; once it is
    found, then the program can exit. We've seen that workers communicate their results
    by posting messages. Now our program is completed, it would be nice to prevent
    future messages from being received, possibly polluting our results.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use `Worker.terminate` to immediately stop
    a `Worker`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `05-04-stop-workers-with-terminate`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` with a function named `onMessage` that takes a `message`
    and `workers` argument**,** logs out the `type` and `timeout` properties of `message.data`,
    and calls `terminate` on all the `workers`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates multiple workers, sets the `onMessage`
    property with a function that passes all the `workers` as the second argument,
    then posts a message to each with the `index`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `worker.js` file that assigns the current context as a `global` constant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Set a `timeout` constant to some random number between *0* and *10,000*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `onmessage` event listener on `global` to the context. The function
    should take a `message` argument and post a response message with the `index`
    and `timeout` of this worker, after the given timeout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d0a30777-8e34-498f-813f-e64cf0daaf5f.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All 10 workers are instructed to post a message after their given timeout but,
    as you can see, only a single worker actually posts a message back to the main
    thread. This is because, after this first worker posts, we call `terminate` on
    all of the workers. This means that they will stop immediately, and unless another
    worker has already posted, it never will. So, we will almost always see a single
    message posted. It is possible that one or two other workers will post before
    being terminated.
  prefs: []
  type: TYPE_NORMAL
- en: Creating SharedArrayBuffer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've see how to send data between the main thread and workers. The
    downside of how we've done this so far is that the data is copied. This means
    that as the amount of data and number of workers increase, so does the amount
    of copying that has to be done. Luckily, there is a way to share data between
    threads with less overhead.
  prefs: []
  type: TYPE_NORMAL
- en: '`SharedArrayBuffer` can be shared between arrays without copying data. In this
    recipe, we''ll see how to create, as well as read and write, data from a `SharedArrayBuffer`.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `05-05-creating-shared-array-buffer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file with a main method that defines constants for `NUM_COUNT`,
    `BYTES_FOR_32_BIT`, `ARRAY_SIZE`, and `MAX_NUMBER`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a `SharedArrayBuffer` that is of size `ARRAY_SIZE`, and create
    an `Int32Array` casting of it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Fill the `intBuffer` with random numbers between *0* and `MAX_NUMBER`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate and print the sum of the values in the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/412ee83c-da6d-4432-89ba-faa8b60dd894.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It feels a little unnatural to be thinking about byte size when working in JavaScript,
    but it's necessary for working with `SharedArrayBuffer`. The preceding example
    creates an array of 2,048 32-bit integers. So in order to create a `SharedArray`
    buffer we have to calculate how much memory 2,048 32-bit integers will take up.
    This is done with simple multiplication. Once we have `ARRAY_SIZE` we can allocate
    the memory.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the array, we need to cast it as some type in order to read
    and write from it. We're using `Int32Array`, so when we perform array access operations
    the values will be cast as 32-bit integers.
  prefs: []
  type: TYPE_NORMAL
- en: When filling the array, we simply loop over each number and multiply a random
    number by the `MAX_NUMBER`; the resulting value is cast as a 32-bit integer (the
    decimal value is lost). Next, summing is done with the array's `reduce` function,
    and we log out the results.
  prefs: []
  type: TYPE_NORMAL
- en: A nice feature of the `Int32Array` is that it has all of the Array methods as
    well. So we can perform map, join, index, includes, and so on with the new data
    type.
  prefs: []
  type: TYPE_NORMAL
- en: Sending SharedArrayBuffer to a Web Worker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to create and use a `SharedArrayBuffer`, we can use one
    to share data between the main thread and workers. As mentioned previously, this
    has an advantage over posting JavaScript objects, in that the data doesn't need
    to be copied; it is shared.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to share a `SharedArrayBuffer` with a worker,
    and post the result back to the main thread.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
    It also assumes that you have enabled shared memory in your browser. If you haven't
    please see the recipes at the beginning of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `05-06-sending-shared-array-to-worker`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file with an `onMessage` function that logs out the `result`
    and `type` members of the received message data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main.js` file with a main method that defines constants for `NUM_COUNT`,
    `BYTES_FOR_32_BIT`, `ARRAY_SIZE`, and `MAX_NUMBER`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a `SharedArrayBuffer` that is of size `ARRAY_SIZE`, and create
    a worker with the source in `worker.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the worker on the message event listener to the `onMessage` function, and
    post a message to the worker with the array buffer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Fill the array buffer with 32-bit integers with random values between *0* and
    `MAX_NUMBER`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Post messages to the worker, requesting calculations of `sum` and `average`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `worker.js` file, assign the current context to a variable `global`,
    declare a variable named `sharedIntArray`, and assign a function to the `onmessage`
    event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onmessage` listener get the data component of the `message` argument,
    and `switch` on the `type` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a case for `''load-array''`, where we assign the array property of data
    to `sharedIntArray` after casting it as an `Int32Array`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a case for `''calculate-sum''` that sums all the numbers in the array and
    posts the result back to the main thread:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a case for `''calculate-average''` that averages all the numbers in the
    array and posts the result back to the main thread:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser: `http://localhost:8000/`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9e09739c-db02-4442-af58-8437c5b2b86c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned previously, `SharedArrayBuffer` is not copied between threads.
    It is shared. So, when we create the shared array buffer and pass that reference
    to a worker, the values inserted into the array by the main thread are available
    in the worker.
  prefs: []
  type: TYPE_NORMAL
- en: After the worker receives messages to perform calculations, the values can be
    accumulated as they were in any other array, and the value sent back is a simple
    message.
  prefs: []
  type: TYPE_NORMAL
- en: Reading SharedArray from multiple Web Workers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we saw how data can be shared between the main thread
    and a single worker. This is helpful for move long-running operations on the main
    thread, which helps keep the UI responsive. However, it isn't taking full advantage
    of parallel processing. With very large datasets, breaking up the computation
    between many workers can be advantageous.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use multiple workers to produce portions of
    a result.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `05-07-reading-shared-buffer-from-multiple-workers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file with an `onMessage` function that logs out the following
    members of the message data: `workenIndex`, `type`, `result`, `workerIndex`, `startIndex`,
    `endIndex`, and `windowSize`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main.js` file with a main method that defines constants for `NUM_COUNT`,
    `BYTES_FOR_32_BIT`, `ARRAY_SIZE`, `WORKER_COUNT`, and `MAX_NUMBER`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create an array of workers of size `WORKER_COUNT`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a `SharedArrayBuffer` that is of size `ARRAY_SIZE`, and fill it
    with random integers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Post these messages to each of the workers: `''load-array''`, `''load-indices''`,
    `''calculate-sum''`, and `''calculate-average''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `worker.js` file, assign the current context to a variable `global`,
    and declare variables named: `sharedIntArray`, `sharedInArraySlice`, `workerIndex`,
    `workerCount`, `startIndex`, and `endIndex`. Also, assign a function to the `onmessage`
    event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onmessage` listener, get the data component of the `message` argument
    and switch on the `type` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a case for `''load-array''` where we assign the array property of data
    to `sharedIntArray` after casting it as an `Int32Array`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a case for `''load-indices''` that calculates the window of values that
    the current worker should work with, based on the current index and total number
    of workers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a case for `''calculate-sum''` that sums all the numbers in the array and
    posts the result back to the main thread:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a case for `''calculate-average''` that averages all the numbers in the
    array and posts the result back to the main thread:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `sendResult` function that posts a `result`, a result type, and information
    about the current thread to the main thread:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d5dc6810-c15a-4488-b3d3-d1421b9f2838.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Shared array buffers can be shared across any number of worker threads. In order
    to calculate portions of the result, we need to divide the results equitably between
    the threads. That's what the `'load-indices'` case of the worker `onMessage` listener
    does.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the size of the array and the total worker count to get the window
    size. We take the floor so that we don''t go beyond the index of the array. This
    is also because you can''t have a partial index: they are integers.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we use the current worker index to get the `startIndex` (basically picking
    up where the previous worker left off). To get the end index, we need to know
    if this is the last worker. If not, we use the window size. If it is, we need
    to take all of the remaining values.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have our array slice, each worker calculates the sums and averages of
    those portions as they would with the entire array. Then the results and the worker
    info are posted to the main thread.
  prefs: []
  type: TYPE_NORMAL
- en: Using Atomics to coordinate the use of shared memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we used multiple workers to produce portions of a result.
    We could merge these results in the main thread. While valid, this approach doesn't
    take full advantage of parallel processing. It would be preferable if the workers
    could accumulate the results themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Mutating shared memory in multiple parallel threads exposes the possibility
    of race conditions. This is when several operations need to occur in a specific
    order that is not enforced. Luckily, we can use the Atomics API to coordinate
    these operations.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use the Atomics API to accumulate results while
    avoiding race conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `05-08-use-atomics-to-coordinate`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file. Create three shared array buffers: an input buffer
    and two output buffers (one `safe`, the other `unsafe`). The output buffers should
    be 32 bits in size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare a variable `workersFinishedCount` and set it to `0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a function named `onMessage`. This function increments `workersFinished`.
    If all the workers are finished, log the output of the two output arrays and log
    out a sum calculated locally:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a main function that declares a `MAX_NUMBER`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create an array of workers of size `WORKER_COUNT`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, fill the input shared array buffer with random integers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Post these messages to each of the workers: `''load-shared-input''`, `''load-shared-output''`,
    `''load-indices''`, and `''calculate-sum''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `worker.js` file, assign the current context to a `global` variable,
    declare variables named `sharedIntArray`, `resultArray`, `unsafeResultArray`,
    and `sharedInArraySlice`, and assign a function to the `onmessage` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onmessage` listener, get the data component of the `message` argument
    and `switch` on the `type` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a case for `''load-shared-input''`, where we assign the `input` property
    of data to `sharedIntArray` after casting it as an `Int32Array`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a case for `''load-shared-output''`, where we assign the `safe` and `unsafe`
    properties of data to the corresponding result arrays after casting them as a
    `Int32Array`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a case for `''load-indices''` that calculates the window of values that
    the current worker should work with based on the current index and total number
    of workers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a case for `''calculate-sum''` that sums all the numbers in the array,
    updates `unsafeResultArray` directly, uses `Atomics.add` to update `resultArray`,
    and posts the result back to the main thread:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6403a2c9-a347-4da1-aaf1-975c8c46aa50.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we can see from the results, the value of `unsafeResultArray` has been corrupted
    by a race condition. It looks as if some of the values are missing. However, looking
    at the worker it appears as if we are adding the result as a single operation.
  prefs: []
  type: TYPE_NORMAL
- en: This isn't precisely true. The `*+**=*` operator is actually three separate
    operations, a read, an addition, and a write operation. If you imagine that multiple
    workers reach this segment at the same time (we have 256 operating at once), then
    you can imagine how a race condition can occur.
  prefs: []
  type: TYPE_NORMAL
- en: Atomics prevent these errors from happening. `Atomic.add`, for example, operates
    as if *+*, *=* were a single operation. When a worker uses `Atomics.add` or any
    other method in the API, they can be sure that the values will not be written
    or read by another thread until the operation has been completed. That's why the
    safe sum always matches the sum calculated on the main thread, and the unsafe
    sum may be less.
  prefs: []
  type: TYPE_NORMAL
- en: Because race conditions are non-deterministic, you may have to run this recipe
    several times in order to see a discrepancy between the safe and unsafe sums.
  prefs: []
  type: TYPE_NORMAL
- en: Using promises to provide a simple interface for a worker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've see how to use workers to perform a variety of tasks, but we've
    also seen that they can be cumbersome to use. This is unavoidable to some extent.
    However, we can provide nice interfaces to operations that are using workers with
    the tools we've already seen in in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use promises to create more familiar interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `05-09-using-promise-for-simple-interfaces`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file, with an `async` function named `sumOnWorker`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside `sumOnWorker`, return a new promise, wherein you create a new worker
    and bind the `onmessage` event listener, and post a message to the worker to calculate
    the sum:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `onmessage` listener, log out the `type` and `result` properties
    of the message data, and resolve the `result`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `async` main function that creates three arrays of random numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Call `sumOnWorker` with each of the arrays, and log out the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `worker.js` file, assign the current context to a variable `global`,
    and assign a function to the `onmessage` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onmessage` listener, get the data component of the `message` argument
    and `switch` on the `type` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a case for `''calculate-sum''`, where you calculate the sum of a posted
    array. Respond with the type or operation, and the resulting value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bf22cdc4-ab6b-4506-aafc-ea6c5aa407e0.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen in previous chapters how flexible composing promises and `async`
    functions can be. Doing so with workers is a natural extension. Consider an asynchronous
    AJAX request. This could be thought of as taking place in a worker. After all,
    it is being performed in a different thread of execution, but managed by the browser.
  prefs: []
  type: TYPE_NORMAL
- en: As long as success error conditions are handled properly, promises and `async`
    functions can be used to provide familiar interfaces to Web Workers. Having familiar
    and simple interfaces is crucial when integrating new technology with an existing
    code base.
  prefs: []
  type: TYPE_NORMAL
