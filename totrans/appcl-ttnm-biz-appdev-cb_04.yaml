- en: Chapter 4. Interacting with Web Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 与Web服务交互
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Consuming RSS feeds
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消费RSS源
- en: Creating a business location map using Yahoo Local
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Yahoo Local创建业务位置地图
- en: Using Google Analytics in your app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的应用中使用Google Analytics
- en: Making SOAP service calls using SUDS.js
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SUDS.js进行SOAP服务调用
- en: Using the LinkedIn Contacts API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LinkedIn联系人API
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Mobile devices have been one of the driving forces behind the growth in variety
    and number of web service offerings in both Enterprise and Consumer spaces. As
    the ultimate disconnected client, mobile apps have revived the interest in **Service-Oriented
    Architecture** (**SOA**) as organizations look to extend their existing systems
    and functionalities to their mobile customers. As a result, you will rarely find
    an Enterprise app that does not use internal or third-party remote services.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备一直是企业空间和消费者空间中Web服务种类和数量增长的主要推动力。作为最终的断开连接客户端，移动应用重新激发了组织对**面向服务架构**（**SOA**）的兴趣，因为它们希望将现有的系统和功能扩展到移动客户。因此，您很少会找到一个不使用内部或第三方远程服务的企业应用。
- en: This chapter demonstrates how to use SOAP and REST calls to interface with popular
    third-party platforms while building your Enterprise apps.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章演示了如何在构建企业应用时使用SOAP和REST调用与流行的第三方平台进行接口。
- en: Consuming RSS feeds
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消费RSS源
- en: The use of RSS and ATOM feeds is common among Enterprise apps that update content
    periodically. You can use the techniques demonstrated in this recipe to publish
    content from your organization or a third party. Many companies use this approach
    to provide their employees with current news and updates regarding their organization
    or industry.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在定期更新内容的企业应用中，使用RSS和ATOM源是很常见的。您可以使用本食谱中展示的技术来发布您组织或第三方的内容。许多公司使用这种方法为员工提供有关其组织或行业的最新新闻和更新。
- en: In this recipe, an RSS feed from [fastcompany.com](http://fastcompany.com) is
    consumed and displayed in a `Ti.UI.TableView` for the user to review and launch
    their browser to read the details.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们消费了来自[fastcompany.com](http://fastcompany.com)的RSS源，并在`Ti.UI.TableView`中显示，供用户查看并启动浏览器阅读详细信息。
- en: '![Consuming RSS feeds](img/5343OT_04_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![消费RSS源](img/5343OT_04_01.jpg)'
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe uses the `rss2Objects` CommonJS module. This module and other code
    assets can be downloaded from the source code provided by the book. Installing
    this module into your project is straightforward. Simply copy the `rss2objects.js`
    file into your project, as shown in the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱使用`rss2Objects` CommonJS模块。此模块和其他代码资源可以从本书提供的源代码中下载。将此模块安装到您的项目中很简单。只需将`rss2objects.js`文件复制到您的项目中，如下面的截图所示：
- en: '![Getting ready](img/5343OT_04_02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/5343OT_04_02.jpg)'
- en: How to do it…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once you''ve added the `rss2objects.js` file to your project, you need to create
    your application namespaces in the `app.js` file and use `require` to import the
    module into your code, as demonstrated in the following code block:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将`rss2objects.js`文件添加到您的项目中，您需要在`app.js`文件中创建您的应用程序命名空间，并使用`require`将模块导入到您的代码中，如下面的代码块所示：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating a UI for the sample app
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为示例应用创建用户界面
- en: The demonstration app for this recipe provides two `Ti.UI.Button` controls to
    illustrate different techniques for fetching RSS results, and a `Ti.UI.TableView`
    to display the articles.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的演示应用提供了两个`Ti.UI.Button`控件来展示获取RSS结果的不同技术，以及一个`Ti.UI.TableView`来显示文章。
- en: 'First we create our `Ti.UI.Window` to attach all UI elements onto:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建我们的`Ti.UI.Window`来附加所有UI元素：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, a button is created to demonstrate how to use YQL to load an RSS feed:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个按钮来演示如何使用YQL加载RSS源：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A button is then added to demonstrate how to load an RSS feed using XML Parsing:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后添加一个按钮来演示如何使用XML解析加载RSS源：
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, a `Ti.TableView` is added to display the RSS articles:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加一个`Ti.TableView`来显示RSS文章：
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Reading an RSS feed with YQL
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用YQL读取RSS源
- en: Using Yahoo's YQL platform is a convenient way to read an RSS feed. YQL has
    two additional benefits over conventional XML parsing. The first benefit is YQL
    normalizes the feed output for you. The second benefit is Yahoo will convert the
    RSS stream to JSON. The downside to YQL is it will reduce download speeds due
    to the need to proxy the feed through Yahoo's servers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Yahoo 的 YQL 平台是读取 RSS 流的便捷方式。YQL 相比传统的 XML 解析有两个额外的好处。第一个好处是 YQL 会为您规范化输出。第二个好处是
    Yahoo 会将 RSS 流转换为 JSON。YQL 的缺点是它需要通过 Yahoo 的服务器代理流，这会降低下载速度。
- en: 'This snippet demonstrates how to call the `yqlQuery` method of the `rss2Objects`
    module. The `yqlQuery` method takes two arguments: the first is the URL of the
    RSS feed you wish to read, and the second is a callback used to provide the feed
    item results.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段演示了如何调用 `rss2Objects` 模块的 `yqlQuery` 方法。`yqlQuery` 方法接受两个参数：第一个是要读取的 RSS
    流的 URL，第二个是用于提供流项目结果的回调。
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Reading an RSS feed with XML parsing
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 XML 解析读取 RSS 流
- en: The `rss2Objects` module also provides the ability to directly parse the RSS
    feed with XML. This option provides the best download performance for larger feeds.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`rss2Objects` 模块还提供了直接使用 XML 解析 RSS 流的能力。此选项为较大 RSS 流提供了最佳的下载性能。'
- en: 'To use the XML feed directly, simply call the `query` method on the `rss2Objects`
    module. The `query` method takes three arguments:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要直接使用 XML 流，只需在 `rss2Objects` 模块上调用 `query` 方法。`query` 方法接受三个参数：
- en: The URL for the RSS feed you wish to read.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您想读取的 RSS 流的 URL。
- en: An optional dot query syntax that allows you to provide the path of the nodes
    you want returned. In the next example, `channel.item` is provided. This tells
    the `query` method to only return nodes from the `channel item` element list.
    If you want all objects returned, simply pass a null value as an argument.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可选的点查询语法，允许您提供您想要返回的节点路径。在下一个示例中，提供了 `channel.item`。这告诉 `query` 方法只从 `channel
    item` 元素列表返回节点。如果您想返回所有对象，只需将一个 null 值作为参数传递。
- en: The third argument is the callback method where the module will send the results
    once processing has been completed.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数是回调方法，模块将在处理完成后发送结果。
- en: '[PRE6]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Displaying the articles
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示文章
- en: 'Both YQL and XML parsing demonstrations use the callback method shown next.
    This function takes the object dictionary provided by the `rss2objects` module
    and creates `TableView` rows for display:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: YQL 和 XML 解析演示都使用下面展示的回调方法。这个函数接收由 `rss2objects` 模块提供的对象字典，并为显示创建 `TableView`
    行：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The parameter `e` in this function provides the result returned from the `rss2Objects`
    module. The first step is to check if the feed was returned successfully. This
    is done by checking the `e.success` property, as the following code block shows:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此函数中的参数 `e` 提供了来自 `rss2Objects` 模块的结果。第一步是检查是否成功返回了源。这通过检查 `e.success` 属性来完成，如下面的代码块所示：
- en: '[PRE8]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, all of the RSS items are looped through and a `Ti.UI.TableViewRow` definition
    is built for each item:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，所有 RSS 项目都会被循环遍历，并为每个项目构建一个 `Ti.UI.TableViewRow` 定义：
- en: '[PRE9]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, the article rows built in the previous step are added to the `Ti.TableView`
    for display:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在前面步骤中构建的文章行被添加到 `Ti.TableView` 以供显示：
- en: '[PRE10]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `rss2objects` module provides a straightforward API for reading RSS feeds.
    The two primary methods provided by the `rss2object.js` module are detailed in
    the following sections.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`rss2objects` 模块提供了一个简单的 API 用于读取 RSS 流。`rss2object.js` 模块提供的两个主要方法将在以下章节中详细介绍。'
- en: Using the yqlQuery function
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 yqlQuery 函数
- en: 'The `yqlQuery` method uses Titanium''s built-in YQL provider to parse the provided
    RSS feed URL into a dictionary of objects:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`yqlQuery` 方法使用 Titanium 的内置 YQL 提供者将提供的 RSS 流 URL 解析为对象的字典：'
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `onComplete` method is used as a callback to the `Ti.Yahoo.yql` function.
    This method will process the YQL results into a standard format for consumption.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`onComplete` 方法用作回调到 `Ti.Yahoo.yql` 函数。此方法将处理 YQL 结果，以供消费的标准格式。'
- en: '[PRE12]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The argument `e` is a dictionary (with the results of the RSS feed query) provided
    by YQL.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参数 `e` 是由 YQL 提供的字典（包含 RSS 流查询的结果）。
- en: '[PRE13]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `e.success` property is checked to determine if the YQL statement generated
    an error. On Android, you must check the `e.data` property for `null` instead
    of using the `e.success` property.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `e.success` 属性以确定 YQL 语句是否生成了错误。在 Android 上，您必须检查 `e.data` 属性是否为 `null`，而不是使用
    `e.success` 属性。
- en: '[PRE14]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If successful, the `e.data.items` is added to the `results.rssDetails.items`
    array that will later be the callback method:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果成功，将 `e.data.items` 添加到 `results.rssDetails.items` 数组中，该数组将作为后续的回调方法：
- en: '[PRE15]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The results of our YQL-parsed RSS feed are provided to the initially used `callback`
    method, when calling the `yqlQuery` module method:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当调用 `yqlQuery` 模块方法时，将我们的 YQL 解析的 RSS 源的结果提供给最初使用的 `callback` 方法：
- en: '[PRE16]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following snippet demonstrates a YQL select query that will return a title,
    link, description, and other listed columns from the RSS feed (of the URL argument
    provided):'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段演示了一个 YQL 选择查询，该查询将从提供的 URL 参数的 RSS 源返回标题、链接、描述和其他列出的列：
- en: '[PRE17]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The next code block demonstrates using the `Ti.Yahoo.yql` method to run the
    query and send the results to the provided `onComplete` callback function:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下面的代码块演示了使用 `Ti.Yahoo.yql` 方法运行查询并将结果发送到提供的 `onComplete` 回调函数：
- en: '[PRE18]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Using the query function
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用查询函数
- en: 'The `q` `uery` method uses Titanium''s `HTTPClient` and XML modules to read
    the provided RSS URL and to confirm the provided XML into a dictionary of objects:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`q` `uery` 方法使用 Titanium 的 `HTTPClient` 和 XML 模块来读取提供的 RSS URL，并将提供的 XML 转换为对象的字典：'
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `whenComplete` function is invoked when the `query` method has completed
    processing or resulted in an error. The `whenComplete` method is used to wrap
    the `callback` argument and provide the query results.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 `query` 方法完成处理或出现错误时，将调用 `whenComplete` 函数。`whenComplete` 方法用于包装 `callback`
    参数并提供查询结果。
- en: '[PRE20]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Action taken by this part of the recipe is to create an HTTP client:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此部分菜谱采取的操作是创建一个 HTTP 客户端：
- en: '[PRE21]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'An `onload` callback is created to retrieve the HTTP response provided by the
    RSS feed:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `onload` 回调来检索 RSS 源提供的 HTTP 响应：
- en: '[PRE22]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'When the request is returned, the `responseXML` property is used to gather
    the XML results from the RSS feed:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当请求返回时，使用 `responseXML` 属性从 RSS 源中收集 XML 结果：
- en: '[PRE23]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The XML results are then converted to objects using our helper method:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后使用我们的辅助方法将 XML 结果转换为对象：
- en: '[PRE24]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If the converted XML object is `null`, use the callback method to notify the
    user that the module failed to read the provided RSS feed:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果转换的 XML 对象为 `null`，则使用回调方法通知用户该模块无法读取提供的 RSS 源：
- en: '[PRE25]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If the XML was successfully able to be converted into objects, populate the
    query results with the full XML results and create a flag indicating the query
    was successfully executed.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 XML 成功转换为对象，则使用完整的 XML 结果填充查询结果，并创建一个标志表示查询成功执行。
- en: '[PRE26]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If a `pathQuery` string was provided, run the query and update the `results`
    object with the output from the `queryByPath` method.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提供了 `pathQuery` 字符串，则运行查询并使用 `queryByPath` 方法的输出更新 `results` 对象。
- en: '[PRE27]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Provide an `onerror` callback to handle an error generated during the `HTTPClient`
    request.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一个 `onerror` 回调来处理 `HTTPClient` 请求期间生成的错误。
- en: '[PRE28]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Open the HTTP client and send a `GET` request to the RSS URL provided.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 HTTP 客户端并向提供的 RSS URL 发送一个 `GET` 请求。
- en: '[PRE29]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Tip
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The order in which the functions are called is important. The `open` method
    must be called before calling the `send` method, as shown in the previous code
    section.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数调用的顺序很重要。必须先调用 `open` 方法，然后再调用 `send` 方法，如前一个代码部分所示。
- en: See also
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: To learn more about YQL, visit the Yahoo developer site at [http://developer.yahoo.com/yql](http://developer.yahoo.com/yql)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于 YQL 的信息，请访问 Yahoo 开发者网站 [http://developer.yahoo.com/yql](http://developer.yahoo.com/yql)
- en: For YQL usage guidelines and rate information, visit [http://developer.yahoo.com/yql/guide/usage_info_limits.html](http://developer.yahoo.com/yql/guide/usage_info_limits.html)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 YQL 使用指南和速率信息，请访问 [http://developer.yahoo.com/yql/guide/usage_info_limits.html](http://developer.yahoo.com/yql/guide/usage_info_limits.html)
- en: Creating a business location map using Yahoo Local
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Yahoo Local 创建商业位置地图
- en: 'Providing a store, client, or other location-listing feature is a common requirement
    for many Enterprise apps. In this recipe, we will show how to use the Yahoo Local
    Search API and `Ti.Map.View` to provide a store locator. For demonstration purposes,
    the recipe uses the Yahoo API to provide location search results for the popular
    American coffee chain, Starbucks. The search results for each location are then
    displayed on a `Ti.Map.View`, as shown in the following screenshots:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为企业应用提供商店、客户或其他位置列表功能是许多应用的一个常见需求。在这个菜谱中，我们将展示如何使用 Yahoo Local 搜索 API 和 `Ti.Map.View`
    来提供商店定位器。为了演示目的，这个菜谱使用 Yahoo API 提供了美国流行咖啡连锁店星巴克的定位搜索结果。每个位置的搜索结果随后显示在 `Ti.Map.View`
    上，如下面的截图所示：
- en: '![Creating a business location map using Yahoo Local](img/5343OT_04_03.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Yahoo Local 创建商业位置地图](img/5343OT_04_03.jpg)'
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe uses the Yahoo Search CommonJS module. This module and other code
    assets can be downloaded from the source code provided by the book. Installing
    this module into your project is straightforward. Simply add the `yahoo_search.js`
    file into your project, as shown in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用 Yahoo Search CommonJS 模块。此模块和其他代码资产可以从本书提供的源代码中下载。将此模块安装到您的项目中很简单。只需将
    `yahoo_search.js` 文件添加到您的项目中，如下面的截图所示：
- en: '![Getting ready](img/5343OT_04_04.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/5343OT_04_04.jpg)'
- en: How to do it…
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once you''ve added the `yahoo_search.js` file to your project, you need to
    create your application namespaces in the `app.js` file and use `require` to import
    the module into your code, as shown in the following code block:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将 `yahoo_search.js` 文件添加到您的项目中，您需要在 `app.js` 文件中创建您的应用程序命名空间，并使用 `require`
    将模块导入到您的代码中，如下面的代码块所示：
- en: '[PRE30]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Adding your API key
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加您的 API 密钥
- en: 'The next step in our recipe is to add your Yahoo developer API key. The following
    snippet shows how to register your API key with the module:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们配方中的下一步是添加您的 Yahoo 开发者 API 密钥。以下代码片段显示了如何将 API 密钥注册到模块中：
- en: '[PRE31]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Creating a UI for the sample app
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建示例应用程序的 UI
- en: This recipe uses a simple UI containing `Ti.UI.TextField`, `Ti.Map.View`, and
    a `Ti.UI.Button` to search. Here we demonstrate the creation of these UI elements.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用一个简单的用户界面，包含 `Ti.UI.TextField`、`Ti.Map.View` 和 `Ti.UI.Button` 来搜索。在这里，我们展示了这些
    UI 元素的创建。
- en: First, we create a `Ti.UI.Window` to attach our visual elements.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建一个 `Ti.UI.Window` 来附加我们的视觉元素。
- en: '[PRE32]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Next, we attach a text field to allow the user to enter a business for which
    to search.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们添加一个文本字段，允许用户输入要搜索的业务名称。
- en: '[PRE33]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Next, a button is added to allow the user to search for the business name entered
    in the text field.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加一个按钮，允许用户搜索在文本字段中输入的业务名称。
- en: '[PRE34]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Finally, a map view is attached to display our search results.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，附加一个地图视图来显示我们的搜索结果。
- en: '[PRE35]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Updating the map
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新地图
- en: The `updateMap` function is the callback method to the search module. `updateMap`
    provides the search results and then it transforms them to display to the user.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateMap` 函数是搜索模块的回调方法。`updateMap` 提供搜索结果，并将其转换为用户显示。'
- en: '[PRE36]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The search results are provided as the `e` parameter to the method. The first
    step in the process is to check if the search was successful, by checking the
    `e.success` property.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索结果作为方法的 `e` 参数提供。过程的第一步是检查搜索是否成功，通过检查 `e.success` 属性。
- en: '[PRE37]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: After verifying that the search was successful, a loop is used to create map
    annotations for each `e.item` provided in the results.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在验证搜索成功后，使用循环为结果中提供的每个 `e.item` 创建地图标注。
- en: '[PRE38]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The new region object is created using the search coordinates and applied to
    set the viewing point of the map. This allows the user to see all of the pins
    added.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用搜索坐标创建新的区域对象，并将其应用于设置地图的查看点。这使用户能够看到添加的所有标记。
- en: '[PRE39]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Finally, the points array containing all of our annotations is added to the
    `mapView`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将包含所有标注的 points 数组添加到 `mapView`。
- en: '[PRE40]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Searching
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 搜索
- en: When the `searchButton` button is pressed, the following snippet is used to
    perform a location search using the device's coordinates.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当按下 `searchButton` 按钮时，以下代码片段用于使用设备的坐标执行位置搜索。
- en: '[PRE41]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: First, any existing map pins are removed
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，删除任何现有的地图标记
- en: '[PRE42]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: If the text field's keyboard is open, the `blur` method is called to close it.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果文本字段的键盘是打开的，则调用 `blur` 方法来关闭它。
- en: '[PRE43]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: To avoid an empty search, the text field is checked to make sure it contains
    a value.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了避免空搜索，检查文本字段以确保它包含一个值。
- en: '[PRE44]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The module's `currentLocationQuery` method is then called, providing the business
    name entered in the text field and the `updateMap` function to be used as a callback.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后调用模块的 `currentLocationQuery` 方法，提供在文本字段中输入的业务名称和用作回调的 `updateMap` 函数。
- en: '[PRE45]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How it works…
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The Yahoo Search CommonJS module (`yahoo_search.js`) provides the following
    public functions, detailed in the following sections.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Yahoo Search CommonJS 模块 (`yahoo_search.js`) 提供以下公共函数，详细说明如下。
- en: Using addAPIKey to your Yahoo service key
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 addAPIKey 为您的 Yahoo 服务密钥
- en: The Yahoo Local Search API requires a developer key. Before using any of the
    query methods, you must first use `addAPIKey` to associate your developer key
    with the module.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Yahoo Local 搜索 API 需要一个开发者密钥。在使用任何查询方法之前，您必须首先使用 `addAPIKey` 将您的开发者密钥与模块关联。
- en: '[PRE46]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Tip
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can obtain a Yahoo API key by visiting [developer.yahoo.com](http://developer.yahoo.com)
    and creating a project within their developer portal.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问 [developer.yahoo.com](http://developer.yahoo.com) 并在他们的开发者门户中创建一个项目来获取
    Yahoo API 密钥。
- en: Using the geoQuery method
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 geoQuery 方法
- en: The `geoQuery` function performs a Yahoo Local search using the latitude, longitude,
    and topic provided. The next example demonstrates how to search for Starbucks
    locations near Times Square in New York City. When the search has been completed,
    the results are provided to the `callback` function.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`geoQuery`函数使用提供的纬度、经度和主题执行 Yahoo Local 搜索。下一个示例演示了如何在纽约市的时代广场附近搜索星巴克的位置。当搜索完成后，结果将提供给`callback`函数。'
- en: '[PRE47]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Using the currentLocationQuery method
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 currentLocationQuery 方法
- en: The `currentLocationQuery` method uses your device's location services to determine
    your current latitude and longitude. It then provides the `geoQuery` function
    with the required search details. The next code line demonstrates how to search
    for Starbucks outlets near your current position. Once the search has been completed,
    the results are provided to the `callback` function.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`currentLocationQuery`方法使用您的设备的位置服务来确定您的当前纬度和经度。然后，它为`geoQuery`函数提供所需的搜索详细信息。下一行代码演示了如何搜索您当前位置附近的星巴克分店。一旦搜索完成，结果将提供给`callback`函数。'
- en: '[PRE48]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Using Google Analytics in your app
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在您的应用中使用 Google Analytics
- en: Google Analytics is a popular service used to measure and record website traffic
    and activities. Most likely, your organization uses Google Analytics, or a similar
    service, to gather analytics about visitors to your site. Using a Titanium module,
    you can use the same Google Analytics platform within your app. This approach
    allows you to view both your mobile and web traffic in one easy-to-use dashboard.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Google Analytics 是一种流行的服务，用于衡量和记录网站流量和活动。很可能会使用 Google Analytics 或类似的服务来收集您网站访问者的分析数据。通过钛模块，您可以在您的应用中使用相同的
    Google Analytics 平台。这种方法允许您在一个易于使用的仪表板中查看您的移动和网页流量。
- en: In this recipe, we will demonstrate how to submit both "page view" and "action"
    events to your Google Analytics dashboard.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将演示如何将“页面查看”和“操作”事件提交到您的 Google Analytics 仪表板。
- en: '![Using Google Analytics in your app](img/5343OT_04_05.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![在您的应用中使用 Google Analytics](img/5343OT_04_05.jpg)'
- en: Getting ready
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe uses the `Ti.Google.Analytics` CommonJS module. This module and
    other code assets can be downloaded from the source code provided by the book,
    or individually through the links provided in the *See also* section at the end
    of this recipe. Installing this module into your project is straightforward. Simply
    copy the `Ti.Google.Analytics.js` file into your project, as shown in the following
    screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱使用`Ti.Google.Analytics` CommonJS模块。此模块和其他代码资源可以从本书提供的源代码中下载，或者通过本菜谱末尾的“另请参阅”部分提供的链接单独下载。将此模块安装到您的项目中很简单。只需将`Ti.Google.Analytics.js`文件复制到您的项目中，如下面的截图所示：
- en: '![Getting ready](img/5343OT_04_06.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/5343OT_04_06.jpg)'
- en: How to do it…
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Once you''ve added the `Ti.Google.Analytics.js` file to your project, you need
    to create your application namespaces in the `app.js` file and use `require` to
    import the module into your code, as shown in the following code block:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将`Ti.Google.Analytics.js`文件添加到您的项目中，您需要在`app.js`文件中创建您的应用程序命名空间，并使用`require`将模块导入到您的代码中，如下面的代码块所示：
- en: '[PRE49]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Creating an instance of the module
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建模块的实例
- en: 'The next step in the recipe requires you to have a Google Analytics key. To
    obtain a key, please register your app at [www.google.com/analytics](http://www.google.com/analytics).
    Once you have a key, you will need to create a new instance of the `Analytics`
    module and provide your analytics key, as shown here:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 菜谱的下一步需要您拥有一个 Google Analytics 密钥。要获取密钥，请注册您的应用至 [www.google.com/analytics](http://www.google.com/analytics)。一旦您有了密钥，您需要创建`Analytics`模块的新实例，并提供您的分析密钥，如下所示：
- en: '[PRE50]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Helper functions
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 辅助函数
- en: Helper functions help to provide more meaningful information about the user's
    device. These functions are used throughout the recipe whenever a `PageView` action
    is fired.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助函数有助于提供有关用户设备更有意义的信息。这些函数在每次触发`PageView`操作时都会在整个菜谱中使用。
- en: The following snippet demonstrates how the `isTablet` property is attached to
    the application namespace on starting an app. This property is used by other functions
    to indicate if the app is running on a phone or tablet.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下面的代码片段演示了如何在启动应用程序时将`isTablet`属性附加到应用程序命名空间。该属性被其他函数用来指示应用程序是在手机还是平板电脑上运行。
- en: '[PRE51]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The `basePage` property works in a way similar to website routing, and sets
    the first part of the URL (that is sent to Google) as a device indicator. In Google
    Analytics, this will allow you to better segment usage patterns by device.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`basePage`属性以类似于网站路由的方式工作，并将URL的第一部分（发送到Google）设置为设备指示器。在Google Analytics中，这将允许您通过设备更好地细分使用模式。'
- en: '[PRE52]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Start recording events
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开始记录事件
- en: The next step is to call the `start` method. This will enable the module to
    start collecting analytics requests. The `start` method takes an integer value
    with the number of seconds on how often you wish the module to send queued analytics
    to Google. This is handled internally by the module using an interval timer.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是调用`start`方法。这将使模块开始收集分析请求。`start`方法接受一个整数值，表示您希望模块多久发送一次排队到Google的分析请求。这由模块内部使用间隔计时器处理。
- en: '[PRE53]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Creating our sample UI
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建我们的示例UI
- en: This section of the recipe outlines the sample UI used to trigger and submit
    Google Analytics requests.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 本节概述了用于触发和提交Google Analytics请求的示例UI。
- en: First, a `Ti.UI.Window` is created to anchor all UI controls.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个`Ti.UI.Window`来锚定所有UI控件。
- en: '[PRE54]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: After creating our window, two `Ti.UI.Button` controls are added. These buttons
    will be used later in the recipe to demonstrate how to create a `trackEvent` or
    `Pageview` event.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建我们的窗口后，添加了两个`Ti.UI.Button`控件。这些按钮将在后面的菜谱中用于演示如何创建`trackEvent`或`Pageview`事件。
- en: '[PRE55]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Recording an action
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录一个动作
- en: 'The `trackEvent` function allows you to publish granular event tracking to
    Google Analytics. This method requires the following parameters that will be used
    to publish actions to your Google Analytics dashboard:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`trackEvent`函数允许您向Google Analytics发布细粒度的事件跟踪。此方法需要以下参数，这些参数将用于将操作发布到您的Google
    Analytics仪表板：'
- en: '**Category**: Typically, the object that was interacted with (for example,
    a button)'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类别**：通常是与之交互的对象（例如，按钮）'
- en: '**Action**: The type of interaction (for example, a click)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作**：交互类型（例如，点击）'
- en: '**Label**: Useful for categorizing events (for example, nav buttons)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签**：用于对事件进行分类（例如，导航按钮）'
- en: '**Value**: Values must be non-negative. Useful to pass counts (for example,
    four times)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值**：值必须是非负数。用于传递计数（例如，四次）'
- en: The next snippet demonstrates how to call the `trackEvent` method when `button1`
    is pressed. On firing of the button's click event, the `trackEvent` method is
    called with a category of `button`, an action of `click`, a label of `recipe_button`,
    and a value of `trigger_event`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个片段演示了在按下`button1`时如何调用`trackEvent`方法。当按钮的点击事件触发时，`trackEvent`方法会以`button`类别、`click`动作、`recipe_button`标签和`trigger_event`值被调用。
- en: '[PRE56]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The Pageview function on opening a window
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打开窗口时的Pageview函数
- en: 'The `trackPageview` function is used to mimic the page traffic or views displayed
    in your Google Analytics dashboard. Using the `basePage` properties created earlier,
    you can create device-specific window tracking by using the convention shown in
    the following code block:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`trackPageview`函数来模拟在您的Google Analytics仪表板中显示的页面流量或查看次数。使用之前创建的`basePage`属性，您可以通过以下代码块中显示的约定创建特定于设备的窗口跟踪：
- en: '[PRE57]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The Pageview function on a child window
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 子窗口上的Pageview函数
- en: The following section of the recipe demonstrates how to use the `trackPageview`
    and `trackEvent` methods to record when and how a child window or view is opened.
    When the user presses `button2` and the click event is fired, the Google Analytics
    module is used to log each step of the navigation process.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱的以下部分演示了如何使用`trackPageview`和`trackEvent`方法记录何时以及如何打开子窗口或视图。当用户按下`button2`并触发点击事件时，Google
    Analytics模块用于记录导航过程的每个步骤。
- en: '[PRE58]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Use the `trackEvent` method to record that the button to open a child window
    has been pressed:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`trackEvent`方法记录按下打开子窗口的按钮：
- en: '[PRE59]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'You need to provide the following parameters to the `trackEvent` method:'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您需要向`trackEvent`方法提供以下参数：
- en: '**Category**: A category value of `button` is provided in this sample'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类别**：本示例中提供了`button`类别值'
- en: '**Action**: An action value of `click` is provided in this sample'
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作**：本示例中提供了`click`动作值'
- en: '**Label**: A label value of `win_button` is provided in this sample'
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签**：本示例中提供了`win_button`标签值'
- en: '**Value**: A value of `open_win2` is provided in this sample'
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值**：本示例中提供了`open_win2`值'
- en: Create a new window to demonstrate the `trackPageview` functionality on a child
    window.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的窗口来演示在子窗口上`trackPageview`功能。
- en: '[PRE60]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: On loading of the `win2` window, the `trackPageview` method is called, recording
    that the individual has viewed the page. The `my.basePage` is used to create a
    route showing which type of device accessed the `/win2` window.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`win2`窗口加载时，会调用`trackPageview`方法，记录个人已查看该页面。`my.basePage`用于创建一个路由，显示哪种类型的设备访问了`/win2`窗口。
- en: '[PRE61]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: See also
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: This recipe uses a modified version of Roger Chapman's Titanium Mobile Google
    Analytics module. To learn more about this module, please visit [http:// github.com/rogchap/Titanium-Google-Analytics](http://%20github.com/rogchap/Titanium-Google-Analytics).
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个配方使用Roger Chapman的Titanium Mobile Google Analytics模块的修改版本。要了解更多关于这个模块的信息，请访问[http://github.com/rogchap/Titanium-Google-Analytics](http://github.com/rogchap/Titanium-Google-Analytics)。
- en: For more information on detecting different device characteristics, see the
    *Using platform indicators* recipe in [Chapter 1](ch01.html "Chapter 1. Patterns
    and Platform Tools"), *Patterns and Platform Tools*.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于检测不同设备特性的更多信息，请参阅[第1章](ch01.html "第1章。模式和平台工具")中的*使用平台指示器*配方，*模式和平台工具*。
- en: Making SOAP service calls using SUDS.js
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SUDS.js调用SOAP服务
- en: In many Enterprise market segments, SOAP services remain the dominant web service
    protocol. Since SOAP is generally implemented over HTTP, most network clients
    including Titanium's `Ti.Network` can interact effectively with this protocol.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多企业市场细分领域，SOAP服务仍然是主导的Web服务协议。由于SOAP通常通过HTTP实现，大多数网络客户端，包括Titanium的`Ti.Network`，都可以有效地与该协议交互。
- en: Even with Titanium's `Ti.Network` module working with SOAP, envelopes and XML
    results can be challenging, and often requires creating a SOAP envelope and a
    huge amount of XML manipulation. This recipe demonstrates how a few open-source
    modules can increase your productivity when interacting with SOAP services and
    their XML results.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 即使使用Titanium的`Ti.Network`模块与SOAP一起工作，信封和XML结果也可能具有挑战性，通常需要创建一个SOAP信封和大量的XML操作。这个配方演示了几个开源模块如何提高你与SOAP服务和它们的XML结果交互时的生产力。
- en: 'To help illustrate how to interact with SOAP services, the recipe uses the
    [www.webserviceX.NET](http://www.webserviceX.NET) weather SOAP service to return
    weather results for a city entered in the **City:** field, as shown in the following
    screenshots:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助说明如何与SOAP服务交互，这个配方使用[www.webserviceX.NET](http://www.webserviceX.NET)天气SOAP服务来返回在**城市：**字段中输入的城市天气结果，如下面的截图所示：
- en: '![Making SOAP service calls using SUDS.js](img/5343OT_04_07.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![使用SUDS.js调用SOAP服务](img/5343OT_04_07.jpg)'
- en: Getting ready
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'This recipe uses the `SUDS` and `XMLTools` CommonJS modules. These modules
    and other code assets can be downloaded from the source code provided by the book,
    or individually through the links provided in the *See also* section at the end
    of this recipe. Installing these modules is straightforward and simply requires
    copying the `suds2.js` and `XMLTools.js` files into your Titanium project, as
    highlighted in the following screenshot:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方使用`SUDS`和`XMLTools`CommonJS模块。这些模块和其他代码资产可以从本书提供的源代码中下载，或者通过此配方末尾的*参见*部分提供的链接单独下载。安装这些模块很简单，只需将`suds2.js`和`XMLTools.js`文件复制到你的Titanium项目中，如下面的截图所示：
- en: '![Getting ready](img/5343OT_04_08.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/5343OT_04_08.jpg)'
- en: How to do it…
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Once you''ve added the `suds2.js` and `XMLTools.js` modules to your project,
    you need to create your application namespaces in the `app.js` file and use `require`
    to import the module into your code, as shown in the following snippet:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将`suds2.js`和`XMLTools.js`模块添加到你的项目中，你需要在`app.js`文件中创建你的应用程序命名空间，并使用`require`将模块导入到你的代码中，如下面的代码片段所示：
- en: '[PRE62]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: SOAP helper methods
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SOAP辅助方法
- en: In addition to the two CommonJS modules imported earlier, this recipe uses the
    `soapHelper` object to handle formatting and configuration activities.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 除了之前导入的两个CommonJS模块之外，这个配方还使用`soapHelper`对象来处理格式化和配置活动。
- en: '[PRE63]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The configuration object contains all the configuration details that `suds.js`
    needs to return an XML result:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置对象包含`suds.js`返回XML结果所需的所有配置细节：
- en: '[PRE64]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The `resultParser` object is used to format the returned XML result into JavaScript
    objects:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`resultParser`对象用于将返回的XML结果格式化为JavaScript对象：'
- en: '[PRE65]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The `removeHeader` object is used to remove the XML header node. Android requires
    the header to be removed before the `parseString` function will correctly create
    an XML document object.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`removeHeader`对象用于删除XML头节点。Android要求在`parseString`函数正确创建XML文档对象之前删除头。'
- en: '[PRE66]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: The `xmlToObject` function converts a `Ti.XML.Document` object into JavaScript
    objects.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`xmlToObject` 函数将 `Ti.XML.Document` 对象转换为 JavaScript 对象。'
- en: '[PRE67]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The first step is to get a `Ti.XML.Nodelist` for the tag `GetWeatherResponse`.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是获取 `GetWeatherResponse` 标签的 `Ti.XML.Nodelist`。
- en: '[PRE68]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Android and iOS handle the conversion process differently. Use the `my.isAndroid`
    property to branch the conversion logic.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android 和 iOS 处理转换过程的方式不同。使用 `my.isAndroid` 属性来分支转换逻辑。
- en: '[PRE69]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The weather service result contains a nested XML document. The following example
    demonstrates how to read the embedded XML document from the `GetWeatherResponse`
    node into a new `Ti.XML.Document`. The `removeHeader` function is used to fix
    the `textContent` value, to be compliant with Android's `XML Documen`t format.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 天气服务结果包含一个嵌套的 XML 文档。以下示例演示了如何从 `GetWeatherResponse` 节点读取嵌入的 XML 文档到新的 `Ti.XML.Document`。使用
    `removeHeader` 函数来修复 `textContent` 值，以符合 Android 的 `XML Document` 格式。
- en: '[PRE70]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Next, the `Ti.XML.Document` object is provided to the `XMLTools` module''s
    constructor and then converted into JavaScript objects using the `toObject` method,
    as demonstrated in the following snippet:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将 `Ti.XML.Document` 对象提供给 `XMLTools` 模块的构造函数，然后使用 `toObject` 方法将其转换为 JavaScript
    对象，如下面的代码片段所示：
- en: '[PRE71]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'On iOS, we use the `getChildNodes` function to obtain the weather child node:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 iOS 上，我们使用 `getChildNodes` 函数来获取天气子节点：
- en: '[PRE72]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The XML string from the weather node is then loaded into the `XMLTools` module''s
    constructor, and then converted into JavaScript objects using the `toObject` method,
    as demonstrated in the following code block:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将天气节点的 XML 字符串加载到 `XMLTools` 模块的构造函数中，然后使用 `toObject` 方法将其转换为 JavaScript 对象，如下面的代码块所示：
- en: '[PRE73]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Creating the UI
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 UI
- en: This section of the recipe outlines the sample UI used to call and display results
    from the weather SOAP service.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 本节概述了用于调用和显示天气 SOAP 服务结果的示例 UI。
- en: A new `Ti.UI.Window` is created for all UI elements to be attached.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为所有 UI 元素创建一个新的 `Ti.UI.Window`。
- en: '[PRE74]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The text field `txtCity` is to allow the user to enter the city whose weather
    they wish to be displayed.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文本字段 `txtCity` 允许用户输入他们希望显示天气的城市。
- en: '[PRE75]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The text field `txtCountry` is to allow the user to input the name of the country
    to which the city belongs.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文本字段 `txtCountry` 允许用户输入城市所属的国家名称。
- en: '[PRE76]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: The `goButton` is a `Ti.UI.Button` used to call the weather SOAP service.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`goButton` 是一个 `Ti.UI.Button`，用于调用天气 SOAP 服务。'
- en: '[PRE77]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The `tableView` is a `Ti.UI.TableView` used to display the results of the SOAP
    service.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`tableView` 是一个 `Ti.UI.TableView`，用于显示 SOAP 服务的输出结果。'
- en: '[PRE78]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: The uiHelpers object
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`uiHelpers` 对象'
- en: The `uiHelpers` object is used to update the UI objects with different states
    of the app as well as load the `tableView` with the SOAP service result.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`uiHelpers` 对象用于根据应用的不同状态更新 UI 对象，以及使用 SOAP 服务的结果加载 `tableView`。'
- en: '[PRE79]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: The `updateUI` is used to format the object results from the SOAP service for
    display.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateUI` 用于格式化 SOAP 服务返回的对象结果以进行显示。'
- en: '[PRE80]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: The `resetUI` method is used to hide the `tableView` from the user when `SUDS`
    is calling the web service. This method is also used to hide the `tableView` when
    the a `SUDS` call results in an error.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`resetUI` 方法用于在 `SUDS` 调用 web 服务时隐藏 `tableView` 对用户可见。此方法还用于在 `SUDS` 调用导致错误时隐藏
    `tableView`。'
- en: '[PRE81]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Calling the SOAP service
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用 SOAP 服务
- en: The click event on the `goButton` is used to perform the weather SOAP service
    call.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `goButton` 上的点击事件用于执行天气 SOAP 服务调用。
- en: '[PRE82]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: The `resetUI` method is first called to hide the `tableView` while the service
    is being called.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先调用 `resetUI` 方法来隐藏 `tableView`，在调用服务的过程中。
- en: '[PRE83]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: A new instance of `sudsClient` is created with the configuration information
    defined earlier in the `soapHelper.config` object.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用之前在 `soapHelper.config` 对象中定义的配置信息创建一个新的 `sudsClient` 实例。
- en: '[PRE84]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: The `invoke` method is then called on `sudsClient`. The first argument provided
    is the SOAP method that `suds` should call.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在 `sudsClient` 上调用 `invoke` 方法。提供的第一个参数是 `suds` 应该调用的 SOAP 方法。
- en: '[PRE85]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: The second argument provided to `sudsClient` is the name of the city and country
    that the user has requested, to retrieve weather information.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供给 `sudsClient` 的第二个参数是用户请求的城市和国家名称，以检索天气信息。
- en: '[PRE86]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'The final argument of the `invoke` method is the callback method `SUDS`. This
    callback method will be provided will to provide a `Ti.XML.Document` with the
    service''s results. The following example demonstrates using an inline function
    as a callback method:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`invoke` 方法的最后一个参数是回调方法 `SUDS`。此回调方法将提供一个包含服务结果的 `Ti.XML.Document`。以下示例演示了使用内联函数作为回调方法：'
- en: '[PRE87]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: The inline callback method will receive a `Ti.XML.Document` once the service
    has completed. Once received, the result is parsed into JavaScript objects using
    the `resultParser` object, as detailed earlier in the recipe.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内联回调方法将在服务完成后接收一个`Ti.XML.Document`。一旦接收，结果将使用前面在菜谱中详细说明的`resultParser`对象解析为JavaScript对象。
- en: '[PRE88]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: The `Status` property is changed on the parsed object to determine if the weather
    objects have successfully been created.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Status`属性更改在解析的对象上，以确定是否已成功创建了天气对象。
- en: '[PRE89]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: If the service results have successfully been converted into objects, they are
    provided to the `updateUI` method, to be displayed to the user.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果服务结果已成功转换为对象，它们将被提供给`updateUI`方法，以向用户显示。
- en: '[PRE90]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: If an error occurred in calling the service or processing the results, we alert
    the user and then hide the `tableView` display object.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在调用服务或处理结果时发生错误，我们将向用户发出警报，然后隐藏`tableView`显示对象。
- en: '[PRE91]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: See also
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: 'Please review the following links to learn more about the open source projects
    used in this recipe:'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请查看以下链接，以了解更多关于本菜谱中使用的开源项目的信息：
- en: '**SUDS.js**: For additional information on SUDS.js, please visit [http://github.com/kwhinnery/Suds](http://github.com/kwhinnery/Suds).'
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SUDS.js**：有关SUDS.js的更多信息，请访问[http://github.com/kwhinnery/Suds](http://github.com/kwhinnery/Suds)。'
- en: '**SUDS2.js**: For more information about the version of SUDS.js used in this
    recipe, please visit [http://github.com/benbahrenburg/Suds2](http://github.com/benbahrenburg/Suds2).'
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SUDS2.js**：有关本菜谱中使用的SUDS.js版本的更多信息，请访问[http://github.com/benbahrenburg/Suds2](http://github.com/benbahrenburg/Suds2)。'
- en: '**XMLTools**: This recipe uses the XMLTools module created by David Bankier.
    For more information about this module, please visit [http://github.com/dbankier/XMLTools-For-Appcelerator-Titanium](http://github.com/dbankier/XMLTools-For-Appcelerator-Titanium).'
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XMLTools**：本菜谱使用了David Bankier创建的XMLTools模块。有关此模块的更多信息，请访问[http://github.com/dbankier/XMLTools-For-Appcelerator-Titanium](http://github.com/dbankier/XMLTools-For-Appcelerator-Titanium)。'
- en: Using the LinkedIn Contacts API
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LinkedIn联系人API
- en: LinkedIn is a popular social-networking site for professionals. The LinkedIn
    API provides a rich set of integration services for use within your app. For Enterprise-focused
    apps, LinkedIn features such as Messaging and Contacts can be critical. Common
    examples of this would be providing a sales agent with access to their contacts
    within your app.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: LinkedIn是一个流行的专业社交网络网站。LinkedIn API为你的应用程序提供了丰富的集成服务。对于面向企业的应用程序，LinkedIn的某些功能，如消息和联系人，可能至关重要。常见的例子包括为销售代表提供访问应用程序内联系人的权限。
- en: This recipe demonstrates how to integrate the LinkedIn Contacts API into your
    Titanium app, in a searchable fashion.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱演示了如何以可搜索的方式将LinkedIn联系人API集成到你的Titanium应用程序中。
- en: '![Using the LinkedIn Contacts API](img/5343OT_04_09.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![使用LinkedIn联系人API](img/5343OT_04_09.jpg)'
- en: Getting ready
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe uses several modules, including the innovative LinkedIn module,
    `linkedin_module-min.js`. This module and other code assets can be downloaded
    from the source code provided by the book, or individually through the links provided
    in the *See also* section at the end of this recipe. Setting up the dependencies
    for this recipe is straightforward. First, copy the `lib` folder to the `Resources`
    folder of your Titanium project, and then, the `copy formatters.js` and `linkedin_module-min.js`
    files into the `Resources` folder, as shown highlighted in the following screenshot:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱使用了几个模块，包括创新的LinkedIn模块`linkedin_module-min.js`。此模块和其他代码资产可以从本书提供的源代码中下载，或者通过本菜谱末尾的“参考信息”部分提供的链接单独下载。设置本菜谱的依赖项很简单。首先，将`lib`文件夹复制到你的Titanium项目的`Resources`文件夹中，然后，将`copy
    formatters.js`和`linkedin_module-min.js`文件复制到`Resources`文件夹中，如下面的截图所示：
- en: '![Getting ready](img/5343OT_04_10.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/5343OT_04_10.jpg)'
- en: How to do it…
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'After you have set up the recipe''s dependencies, the next step is to create
    your application namespaces in the `app.js` file and use `require` to import the
    module into your code, as shown in the following snippet:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好菜谱的依赖项之后，下一步是在`app.js`文件中创建你的应用程序命名空间，并使用`require`将模块导入到你的代码中，如下面的代码片段所示：
- en: '[PRE92]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Adding your API key and secret key
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加你的API密钥和密钥
- en: 'The first step in using the LinkedIn module is to create a LinkedIn application
    at [https://www.linkedin.com/secure/developer](https://www.linkedin.com/secure/developer).
    Once you have registered your application, LinkedIn will provide you with the
    API and authentication keys needed to interact with their APIs. All of the APIs
    used in this recipe need `OAuth 1.0a` authentication to connect. The LinkedIn
    module will handle this for you by using the `init` method to register your secret
    and API keys, as shown in the following example:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 LinkedIn 模块的第一步是在 [https://www.linkedin.com/secure/developer](https://www.linkedin.com/secure/developer)
    创建 LinkedIn 应用程序。一旦注册了您的应用程序，LinkedIn 将为您提供与他们的 API 交互所需的 API 和认证密钥。本食谱中使用的所有
    API 都需要 `OAuth 1.0a` 认证来连接。LinkedIn 模块将通过使用 `init` 方法注册您的密钥和 API 密钥来为您处理此操作，如下面的示例所示：
- en: '[PRE93]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Tip
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You must use the `init` method to set your secret and API keys, before using
    any of the module's functionality.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用模块的任何功能之前，您必须使用 `init` 方法设置您的密钥和 API 密钥。
- en: Adding permissions
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加权限
- en: 'By default, if no permissions are specified, your app will only have rights
    to read basic "digital business card" information about the current user. Since
    this recipe needs access to the user''s contacts, we must call the `addPermission`
    method to request for the `r_network` privilege, as shown in the following snippet:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果没有指定权限，您的应用程序将只有读取当前用户基本“数字名片”信息的权利。由于本食谱需要访问用户的联系人信息，我们必须调用 `addPermission`
    方法来请求 `r_network` 权限，如下面的代码片段所示：
- en: '[PRE94]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'To add multiple permissions, simply call the `addPermission` method several
    times. The following snippet shows how to add the full profile access right to
    the app:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加多个权限，只需多次调用 `addPermission` 方法。以下代码片段显示了如何将完整配置文件访问权限添加到应用程序中：
- en: '[PRE95]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Tip
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: For a full list of all the permissions, please visit [https://developer.linkedin.com/documents/authentication](https://developer.linkedin.com/documents/authentication).
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看所有权限的完整列表，请访问 [https://developer.linkedin.com/documents/authentication](https://developer.linkedin.com/documents/authentication)。
- en: Creating the UI
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 UI
- en: This section of the recipe outlines how to create the UI that is used to display
    and search LinkedIn contacts.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的这一部分概述了如何创建用于显示和搜索 LinkedIn 联系人的 UI。
- en: First, a `Ti.UI.Window` is created. This will be used to attach all of our visual
    elements and will also trigger a call to the LinkedIn API when the open event
    is fired.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个 `Ti.UI.Window`。这将用于附加所有我们的视觉元素，并在打开事件触发时调用 LinkedIn API。
- en: '[PRE96]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: A `Ti.UI.SearchBar` is then created. The search-bar control provides a search
    box that filters the contents of `Ti.UI.TableView`. In this recipe, we use the
    search-bar control to filter the user's LinkedIn contacts by last name.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后创建一个 `Ti.UI.SearchBar`。搜索栏控件提供了一个搜索框，可以过滤 `Ti.UI.TableView` 的内容。在本食谱中，我们使用搜索栏控件按姓氏过滤用户的
    LinkedIn 联系人。
- en: '[PRE97]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: The final UI component added to `Ti.UI.Window` is `Ti.UI.TableView` that will
    be used to display the user's LinkedIn contacts.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后添加到 `Ti.UI.Window` 的 UI 组件是 `Ti.UI.TableView`，它将用于显示用户的 LinkedIn 联系人。
- en: '[PRE98]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Loading your LinkedIn contacts
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载您的 LinkedIn 联系人
- en: The next snippet demonstrates how the LinkedIn module can be used to load a
    list of your contacts as the `Ti.UI.Window` window is loaded.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个代码片段演示了如何使用 LinkedIn 模块在 `Ti.UI.Window` 窗口加载时加载联系人列表。
- en: '[PRE99]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Use the `uiHelper.createWaitMsg` method to display a loading message to the
    user.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `uiHelper.createWaitMsg` 方法向用户显示加载信息。
- en: '[PRE100]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Use the module's `getConnections` method to query the user's contacts from the
    LinkedIn API. In the next example, an inline function is used as a callback returning
    the user's contacts as the `_e` variable.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用模块的 `getConnections` 方法从 LinkedIn API 中查询用户的联系人。在下一个示例中，使用内联函数作为回调，将用户联系人作为
    `_e` 变量返回。
- en: '[PRE101]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: The `uiHelpers.displayContacts` method is used to format and apply returned
    contacts for display.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `uiHelpers.displayContacts` 方法来格式化和应用返回的联系人以进行显示。
- en: '[PRE102]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Using the uiHelpers object to format results
  id: totrans-328
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 uiHelpers 对象格式化结果
- en: The `uiHelpers` object is used to format the results of the LinkedIn Contacts
    API for display.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`uiHelpers` 对象用于格式化 LinkedIn 联系人 API 的结果以进行显示。'
- en: '[PRE103]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: The `createWaitMsg` function is used to display a waiting message in the `tableView`
    while the LinkedIn API is being called.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`createWaitMsg` 函数用于在调用 LinkedIn API 时在 `tableView` 中显示等待信息。'
- en: '[PRE104]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: The `displayContacts` method is the primary method used to convert and display
    the API results.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`displayContacts` 方法是用于转换和显示 API 结果的主要方法。'
- en: '[PRE105]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Update the `tableView` to alert the user that we are now loading their contacts.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `tableView` 以提醒用户我们现在正在加载他们的联系人。
- en: '[PRE106]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: The `convertToObject` method is called to convert the LinkedIn XML results into
    more manageable JavaScript objects.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`convertToObject`方法将LinkedIn XML结果转换为更易于管理的JavaScript对象。
- en: '[PRE107]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: If the conversion result is `null`, display an error message to the user.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果转换结果为`null`，向用户显示错误消息。
- en: '[PRE108]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Using the `formatter.createContactTableRows` function, format the JavaScript
    objects into the `Ti.UI.TableViewRow` layout shown earlier in this recipe's screenshots.
    The `tableView` is then updated with the formatted rows.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`formatter.createContactTableRows`函数，将JavaScript对象格式化为本食谱截图 earlier 中显示的`Ti.UI.TableViewRow`布局。然后，使用格式化后的行更新`tableView`。
- en: '[PRE109]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Parsing the LinkedIn API results
  id: totrans-343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解析LinkedIn API结果
- en: The `resultParser` object is used to parse the XML provided by the LinkedIn
    API, into more manageable JavaScript objects.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`resultParser`对象将LinkedIn API提供的XML解析为更易于管理的JavaScript对象。
- en: '[PRE110]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: The `getText` function is used to return a specific key from a provided `Ti.XML.Element`.
    If no key is found, a null value is returned.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`getText`函数从提供的`Ti.XML.Element`返回一个特定键。如果没有找到键，则返回一个null值。
- en: '[PRE111]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: The `getQueryParams` function is used to return an object with all query string
    parameters for a provided URL.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`getQueryParams`函数来返回一个包含提供URL的所有查询字符串参数的对象。
- en: '[PRE112]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: The `formatUrl` function returns a URL to the contact's profile. If no URL can
    be determined, a link to [linkedin.com](http://linkedin.com) is provided.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`formatUrl`函数返回联系人的个人资料URL。如果无法确定URL，则提供一个到[linkedin.com](http://linkedin.com)的链接。'
- en: '[PRE113]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'The `getProfileUrl` function is used to return a URL to the contact''s profile.
    Since the LinkedIn API does not provide this information, a URL is generated by
    parsing the `site-standard-profile-request` node for key details. The construction
    of this URL is demonstrated in the following snippet:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`getProfileUrl`函数来返回联系人的个人资料URL。由于LinkedIn API不提供此信息，通过解析`site-standard-profile-request`节点以获取关键细节来生成一个URL。以下代码片段展示了如何构建此URL：
- en: '[PRE114]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: The `isPublic` function is used to determine if a contact's information is public.
    If the profile is not public, we will not add it to the displayed contact list.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`isPublic`函数来确定联系人的信息是否公开。如果个人资料不是公开的，我们不会将其添加到显示的联系人列表中。
- en: '[PRE115]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: The `convertToObjects` is the primary method responsible for converting the
    LinkedIn contacts' XML into JavaScript objects.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`convertToObjects`是负责将LinkedIn联系人XML转换为JavaScript对象的主要方法。'
- en: '[PRE116]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: First, the string of XML provided by the API is loaded into a `Ti.XML.Document`.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将API提供的XML字符串加载到`Ti.XML.Document`中。
- en: '[PRE117]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Retrieve all of the XML nodes under the `person` tag.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取所有在`person`标签下的XML节点。
- en: '[PRE118]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Start looping through each of the nodes under the `person` tag.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始遍历`person`标签下的每个节点。
- en: '[PRE119]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Check that the profile is public.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查个人资料是否公开。
- en: '[PRE120]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: If the profile is public, create a JavaScript object with properties from the
    `Ti.XML.Node`.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果个人资料是公开的，则使用来自`Ti.XML.Node`的属性创建一个JavaScript对象。
- en: '[PRE121]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: For individuals with a large number of contacts, this conversion process can
    be memory intensive. To help reduce the size of variables in memory, we set all
    temporary objects to `null` before returning the converted results.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于拥有大量联系人的个人来说，这个转换过程可能会消耗大量内存。为了帮助减少内存中变量的数量，我们在返回转换后的结果之前将所有临时对象设置为`null`。
- en: '[PRE122]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: See also
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: This recipe uses the `clearlyinnovative.linkedIn` module created by Aaron Saunders,
    of [clearlyinnovative.com](http://clearlyinnovative.com). For additional documentation,
    samples, and guidance with the module, please visit [http://www.clearlyinnovative.com/blog/post/12521419647/titanium-appcelerator-quickie-linkedin-api-integration](http://www.clearlyinnovative.com/blog/post/12521419647/titanium-appcelerator-quickie-linkedin-api-integration).
    To download the source of the module, please visit the project on Github, at [http://github.com/aaronksaunders/clearlyinnovative.linkedIn](http://github.com/aaronksaunders/clearlyinnovative.linkedIn).
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本食谱使用由Aaron Saunders在[clearlyinnovative.com](http://clearlyinnovative.com)创建的`clearlyinnovative.linkedIn`模块。有关模块的附加文档、示例和指导，请访问[http://www.clearlyinnovative.com/blog/post/12521419647/titanium-appcelerator-quickie-linkedin-api-integration](http://www.clearlyinnovative.com/blog/post/12521419647/titanium-appcelerator-quickie-linkedin-api-integration)。要下载模块的源代码，请访问GitHub上的项目，在[http://github.com/aaronksaunders/clearlyinnovative.linkedIn](http://github.com/aaronksaunders/clearlyinnovative.linkedIn)。
