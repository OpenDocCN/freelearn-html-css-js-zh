- en: Chapter 4. Interacting with Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Consuming RSS feeds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a business location map using Yahoo Local
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Google Analytics in your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making SOAP service calls using SUDS.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the LinkedIn Contacts API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile devices have been one of the driving forces behind the growth in variety
    and number of web service offerings in both Enterprise and Consumer spaces. As
    the ultimate disconnected client, mobile apps have revived the interest in **Service-Oriented
    Architecture** (**SOA**) as organizations look to extend their existing systems
    and functionalities to their mobile customers. As a result, you will rarely find
    an Enterprise app that does not use internal or third-party remote services.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter demonstrates how to use SOAP and REST calls to interface with popular
    third-party platforms while building your Enterprise apps.
  prefs: []
  type: TYPE_NORMAL
- en: Consuming RSS feeds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The use of RSS and ATOM feeds is common among Enterprise apps that update content
    periodically. You can use the techniques demonstrated in this recipe to publish
    content from your organization or a third party. Many companies use this approach
    to provide their employees with current news and updates regarding their organization
    or industry.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, an RSS feed from [fastcompany.com](http://fastcompany.com) is
    consumed and displayed in a `Ti.UI.TableView` for the user to review and launch
    their browser to read the details.
  prefs: []
  type: TYPE_NORMAL
- en: '![Consuming RSS feeds](img/5343OT_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses the `rss2Objects` CommonJS module. This module and other code
    assets can be downloaded from the source code provided by the book. Installing
    this module into your project is straightforward. Simply copy the `rss2objects.js`
    file into your project, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you''ve added the `rss2objects.js` file to your project, you need to create
    your application namespaces in the `app.js` file and use `require` to import the
    module into your code, as demonstrated in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating a UI for the sample app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The demonstration app for this recipe provides two `Ti.UI.Button` controls to
    illustrate different techniques for fetching RSS results, and a `Ti.UI.TableView`
    to display the articles.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we create our `Ti.UI.Window` to attach all UI elements onto:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, a button is created to demonstrate how to use YQL to load an RSS feed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A button is then added to demonstrate how to load an RSS feed using XML Parsing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, a `Ti.TableView` is added to display the RSS articles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reading an RSS feed with YQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using Yahoo's YQL platform is a convenient way to read an RSS feed. YQL has
    two additional benefits over conventional XML parsing. The first benefit is YQL
    normalizes the feed output for you. The second benefit is Yahoo will convert the
    RSS stream to JSON. The downside to YQL is it will reduce download speeds due
    to the need to proxy the feed through Yahoo's servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'This snippet demonstrates how to call the `yqlQuery` method of the `rss2Objects`
    module. The `yqlQuery` method takes two arguments: the first is the URL of the
    RSS feed you wish to read, and the second is a callback used to provide the feed
    item results.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Reading an RSS feed with XML parsing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `rss2Objects` module also provides the ability to directly parse the RSS
    feed with XML. This option provides the best download performance for larger feeds.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the XML feed directly, simply call the `query` method on the `rss2Objects`
    module. The `query` method takes three arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: The URL for the RSS feed you wish to read.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional dot query syntax that allows you to provide the path of the nodes
    you want returned. In the next example, `channel.item` is provided. This tells
    the `query` method to only return nodes from the `channel item` element list.
    If you want all objects returned, simply pass a null value as an argument.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third argument is the callback method where the module will send the results
    once processing has been completed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Displaying the articles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Both YQL and XML parsing demonstrations use the callback method shown next.
    This function takes the object dictionary provided by the `rss2objects` module
    and creates `TableView` rows for display:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The parameter `e` in this function provides the result returned from the `rss2Objects`
    module. The first step is to check if the feed was returned successfully. This
    is done by checking the `e.success` property, as the following code block shows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, all of the RSS items are looped through and a `Ti.UI.TableViewRow` definition
    is built for each item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, the article rows built in the previous step are added to the `Ti.TableView`
    for display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `rss2objects` module provides a straightforward API for reading RSS feeds.
    The two primary methods provided by the `rss2object.js` module are detailed in
    the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Using the yqlQuery function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `yqlQuery` method uses Titanium''s built-in YQL provider to parse the provided
    RSS feed URL into a dictionary of objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `onComplete` method is used as a callback to the `Ti.Yahoo.yql` function.
    This method will process the YQL results into a standard format for consumption.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The argument `e` is a dictionary (with the results of the RSS feed query) provided
    by YQL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `e.success` property is checked to determine if the YQL statement generated
    an error. On Android, you must check the `e.data` property for `null` instead
    of using the `e.success` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If successful, the `e.data.items` is added to the `results.rssDetails.items`
    array that will later be the callback method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The results of our YQL-parsed RSS feed are provided to the initially used `callback`
    method, when calling the `yqlQuery` module method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following snippet demonstrates a YQL select query that will return a title,
    link, description, and other listed columns from the RSS feed (of the URL argument
    provided):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next code block demonstrates using the `Ti.Yahoo.yql` method to run the
    query and send the results to the provided `onComplete` callback function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the query function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `q` `uery` method uses Titanium''s `HTTPClient` and XML modules to read
    the provided RSS URL and to confirm the provided XML into a dictionary of objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `whenComplete` function is invoked when the `query` method has completed
    processing or resulted in an error. The `whenComplete` method is used to wrap
    the `callback` argument and provide the query results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Action taken by this part of the recipe is to create an HTTP client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An `onload` callback is created to retrieve the HTTP response provided by the
    RSS feed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the request is returned, the `responseXML` property is used to gather
    the XML results from the RSS feed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The XML results are then converted to objects using our helper method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the converted XML object is `null`, use the callback method to notify the
    user that the module failed to read the provided RSS feed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the XML was successfully able to be converted into objects, populate the
    query results with the full XML results and create a flag indicating the query
    was successfully executed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If a `pathQuery` string was provided, run the query and update the `results`
    object with the output from the `queryByPath` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Provide an `onerror` callback to handle an error generated during the `HTTPClient`
    request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the HTTP client and send a `GET` request to the RSS URL provided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The order in which the functions are called is important. The `open` method
    must be called before calling the `send` method, as shown in the previous code
    section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn more about YQL, visit the Yahoo developer site at [http://developer.yahoo.com/yql](http://developer.yahoo.com/yql)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For YQL usage guidelines and rate information, visit [http://developer.yahoo.com/yql/guide/usage_info_limits.html](http://developer.yahoo.com/yql/guide/usage_info_limits.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a business location map using Yahoo Local
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Providing a store, client, or other location-listing feature is a common requirement
    for many Enterprise apps. In this recipe, we will show how to use the Yahoo Local
    Search API and `Ti.Map.View` to provide a store locator. For demonstration purposes,
    the recipe uses the Yahoo API to provide location search results for the popular
    American coffee chain, Starbucks. The search results for each location are then
    displayed on a `Ti.Map.View`, as shown in the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a business location map using Yahoo Local](img/5343OT_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses the Yahoo Search CommonJS module. This module and other code
    assets can be downloaded from the source code provided by the book. Installing
    this module into your project is straightforward. Simply add the `yahoo_search.js`
    file into your project, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you''ve added the `yahoo_search.js` file to your project, you need to
    create your application namespaces in the `app.js` file and use `require` to import
    the module into your code, as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Adding your API key
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next step in our recipe is to add your Yahoo developer API key. The following
    snippet shows how to register your API key with the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Creating a UI for the sample app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe uses a simple UI containing `Ti.UI.TextField`, `Ti.Map.View`, and
    a `Ti.UI.Button` to search. Here we demonstrate the creation of these UI elements.
  prefs: []
  type: TYPE_NORMAL
- en: First, we create a `Ti.UI.Window` to attach our visual elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we attach a text field to allow the user to enter a business for which
    to search.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, a button is added to allow the user to search for the business name entered
    in the text field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, a map view is attached to display our search results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Updating the map
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `updateMap` function is the callback method to the search module. `updateMap`
    provides the search results and then it transforms them to display to the user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The search results are provided as the `e` parameter to the method. The first
    step in the process is to check if the search was successful, by checking the
    `e.success` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After verifying that the search was successful, a loop is used to create map
    annotations for each `e.item` provided in the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The new region object is created using the search coordinates and applied to
    set the viewing point of the map. This allows the user to see all of the pins
    added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, the points array containing all of our annotations is added to the
    `mapView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Searching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the `searchButton` button is pressed, the following snippet is used to
    perform a location search using the device's coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: First, any existing map pins are removed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the text field's keyboard is open, the `blur` method is called to close it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To avoid an empty search, the text field is checked to make sure it contains
    a value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The module's `currentLocationQuery` method is then called, providing the business
    name entered in the text field and the `updateMap` function to be used as a callback.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Yahoo Search CommonJS module (`yahoo_search.js`) provides the following
    public functions, detailed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Using addAPIKey to your Yahoo service key
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Yahoo Local Search API requires a developer key. Before using any of the
    query methods, you must first use `addAPIKey` to associate your developer key
    with the module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can obtain a Yahoo API key by visiting [developer.yahoo.com](http://developer.yahoo.com)
    and creating a project within their developer portal.
  prefs: []
  type: TYPE_NORMAL
- en: Using the geoQuery method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `geoQuery` function performs a Yahoo Local search using the latitude, longitude,
    and topic provided. The next example demonstrates how to search for Starbucks
    locations near Times Square in New York City. When the search has been completed,
    the results are provided to the `callback` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Using the currentLocationQuery method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `currentLocationQuery` method uses your device's location services to determine
    your current latitude and longitude. It then provides the `geoQuery` function
    with the required search details. The next code line demonstrates how to search
    for Starbucks outlets near your current position. Once the search has been completed,
    the results are provided to the `callback` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Using Google Analytics in your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Analytics is a popular service used to measure and record website traffic
    and activities. Most likely, your organization uses Google Analytics, or a similar
    service, to gather analytics about visitors to your site. Using a Titanium module,
    you can use the same Google Analytics platform within your app. This approach
    allows you to view both your mobile and web traffic in one easy-to-use dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will demonstrate how to submit both "page view" and "action"
    events to your Google Analytics dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Google Analytics in your app](img/5343OT_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses the `Ti.Google.Analytics` CommonJS module. This module and
    other code assets can be downloaded from the source code provided by the book,
    or individually through the links provided in the *See also* section at the end
    of this recipe. Installing this module into your project is straightforward. Simply
    copy the `Ti.Google.Analytics.js` file into your project, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you''ve added the `Ti.Google.Analytics.js` file to your project, you need
    to create your application namespaces in the `app.js` file and use `require` to
    import the module into your code, as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Creating an instance of the module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next step in the recipe requires you to have a Google Analytics key. To
    obtain a key, please register your app at [www.google.com/analytics](http://www.google.com/analytics).
    Once you have a key, you will need to create a new instance of the `Analytics`
    module and provide your analytics key, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Helper functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Helper functions help to provide more meaningful information about the user's
    device. These functions are used throughout the recipe whenever a `PageView` action
    is fired.
  prefs: []
  type: TYPE_NORMAL
- en: The following snippet demonstrates how the `isTablet` property is attached to
    the application namespace on starting an app. This property is used by other functions
    to indicate if the app is running on a phone or tablet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `basePage` property works in a way similar to website routing, and sets
    the first part of the URL (that is sent to Google) as a device indicator. In Google
    Analytics, this will allow you to better segment usage patterns by device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start recording events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next step is to call the `start` method. This will enable the module to
    start collecting analytics requests. The `start` method takes an integer value
    with the number of seconds on how often you wish the module to send queued analytics
    to Google. This is handled internally by the module using an interval timer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Creating our sample UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section of the recipe outlines the sample UI used to trigger and submit
    Google Analytics requests.
  prefs: []
  type: TYPE_NORMAL
- en: First, a `Ti.UI.Window` is created to anchor all UI controls.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After creating our window, two `Ti.UI.Button` controls are added. These buttons
    will be used later in the recipe to demonstrate how to create a `trackEvent` or
    `Pageview` event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Recording an action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `trackEvent` function allows you to publish granular event tracking to
    Google Analytics. This method requires the following parameters that will be used
    to publish actions to your Google Analytics dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Category**: Typically, the object that was interacted with (for example,
    a button)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Action**: The type of interaction (for example, a click)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Label**: Useful for categorizing events (for example, nav buttons)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value**: Values must be non-negative. Useful to pass counts (for example,
    four times)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next snippet demonstrates how to call the `trackEvent` method when `button1`
    is pressed. On firing of the button's click event, the `trackEvent` method is
    called with a category of `button`, an action of `click`, a label of `recipe_button`,
    and a value of `trigger_event`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The Pageview function on opening a window
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `trackPageview` function is used to mimic the page traffic or views displayed
    in your Google Analytics dashboard. Using the `basePage` properties created earlier,
    you can create device-specific window tracking by using the convention shown in
    the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The Pageview function on a child window
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following section of the recipe demonstrates how to use the `trackPageview`
    and `trackEvent` methods to record when and how a child window or view is opened.
    When the user presses `button2` and the click event is fired, the Google Analytics
    module is used to log each step of the navigation process.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `trackEvent` method to record that the button to open a child window
    has been pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You need to provide the following parameters to the `trackEvent` method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Category**: A category value of `button` is provided in this sample'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Action**: An action value of `click` is provided in this sample'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Label**: A label value of `win_button` is provided in this sample'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value**: A value of `open_win2` is provided in this sample'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new window to demonstrate the `trackPageview` functionality on a child
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On loading of the `win2` window, the `trackPageview` method is called, recording
    that the individual has viewed the page. The `my.basePage` is used to create a
    route showing which type of device accessed the `/win2` window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses a modified version of Roger Chapman's Titanium Mobile Google
    Analytics module. To learn more about this module, please visit [http:// github.com/rogchap/Titanium-Google-Analytics](http://%20github.com/rogchap/Titanium-Google-Analytics).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on detecting different device characteristics, see the
    *Using platform indicators* recipe in [Chapter 1](ch01.html "Chapter 1. Patterns
    and Platform Tools"), *Patterns and Platform Tools*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making SOAP service calls using SUDS.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many Enterprise market segments, SOAP services remain the dominant web service
    protocol. Since SOAP is generally implemented over HTTP, most network clients
    including Titanium's `Ti.Network` can interact effectively with this protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Even with Titanium's `Ti.Network` module working with SOAP, envelopes and XML
    results can be challenging, and often requires creating a SOAP envelope and a
    huge amount of XML manipulation. This recipe demonstrates how a few open-source
    modules can increase your productivity when interacting with SOAP services and
    their XML results.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help illustrate how to interact with SOAP services, the recipe uses the
    [www.webserviceX.NET](http://www.webserviceX.NET) weather SOAP service to return
    weather results for a city entered in the **City:** field, as shown in the following
    screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making SOAP service calls using SUDS.js](img/5343OT_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses the `SUDS` and `XMLTools` CommonJS modules. These modules
    and other code assets can be downloaded from the source code provided by the book,
    or individually through the links provided in the *See also* section at the end
    of this recipe. Installing these modules is straightforward and simply requires
    copying the `suds2.js` and `XMLTools.js` files into your Titanium project, as
    highlighted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you''ve added the `suds2.js` and `XMLTools.js` modules to your project,
    you need to create your application namespaces in the `app.js` file and use `require`
    to import the module into your code, as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: SOAP helper methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to the two CommonJS modules imported earlier, this recipe uses the
    `soapHelper` object to handle formatting and configuration activities.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration object contains all the configuration details that `suds.js`
    needs to return an XML result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `resultParser` object is used to format the returned XML result into JavaScript
    objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `removeHeader` object is used to remove the XML header node. Android requires
    the header to be removed before the `parseString` function will correctly create
    an XML document object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `xmlToObject` function converts a `Ti.XML.Document` object into JavaScript
    objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first step is to get a `Ti.XML.Nodelist` for the tag `GetWeatherResponse`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Android and iOS handle the conversion process differently. Use the `my.isAndroid`
    property to branch the conversion logic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The weather service result contains a nested XML document. The following example
    demonstrates how to read the embedded XML document from the `GetWeatherResponse`
    node into a new `Ti.XML.Document`. The `removeHeader` function is used to fix
    the `textContent` value, to be compliant with Android's `XML Documen`t format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, the `Ti.XML.Document` object is provided to the `XMLTools` module''s
    constructor and then converted into JavaScript objects using the `toObject` method,
    as demonstrated in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On iOS, we use the `getChildNodes` function to obtain the weather child node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The XML string from the weather node is then loaded into the `XMLTools` module''s
    constructor, and then converted into JavaScript objects using the `toObject` method,
    as demonstrated in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating the UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section of the recipe outlines the sample UI used to call and display results
    from the weather SOAP service.
  prefs: []
  type: TYPE_NORMAL
- en: A new `Ti.UI.Window` is created for all UI elements to be attached.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The text field `txtCity` is to allow the user to enter the city whose weather
    they wish to be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The text field `txtCountry` is to allow the user to input the name of the country
    to which the city belongs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `goButton` is a `Ti.UI.Button` used to call the weather SOAP service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `tableView` is a `Ti.UI.TableView` used to display the results of the SOAP
    service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The uiHelpers object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `uiHelpers` object is used to update the UI objects with different states
    of the app as well as load the `tableView` with the SOAP service result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: The `updateUI` is used to format the object results from the SOAP service for
    display.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: The `resetUI` method is used to hide the `tableView` from the user when `SUDS`
    is calling the web service. This method is also used to hide the `tableView` when
    the a `SUDS` call results in an error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Calling the SOAP service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The click event on the `goButton` is used to perform the weather SOAP service
    call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: The `resetUI` method is first called to hide the `tableView` while the service
    is being called.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A new instance of `sudsClient` is created with the configuration information
    defined earlier in the `soapHelper.config` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `invoke` method is then called on `sudsClient`. The first argument provided
    is the SOAP method that `suds` should call.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The second argument provided to `sudsClient` is the name of the city and country
    that the user has requested, to retrieve weather information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final argument of the `invoke` method is the callback method `SUDS`. This
    callback method will be provided will to provide a `Ti.XML.Document` with the
    service''s results. The following example demonstrates using an inline function
    as a callback method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The inline callback method will receive a `Ti.XML.Document` once the service
    has completed. Once received, the result is parsed into JavaScript objects using
    the `resultParser` object, as detailed earlier in the recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Status` property is changed on the parsed object to determine if the weather
    objects have successfully been created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the service results have successfully been converted into objects, they are
    provided to the `updateUI` method, to be displayed to the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If an error occurred in calling the service or processing the results, we alert
    the user and then hide the `tableView` display object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please review the following links to learn more about the open source projects
    used in this recipe:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SUDS.js**: For additional information on SUDS.js, please visit [http://github.com/kwhinnery/Suds](http://github.com/kwhinnery/Suds).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SUDS2.js**: For more information about the version of SUDS.js used in this
    recipe, please visit [http://github.com/benbahrenburg/Suds2](http://github.com/benbahrenburg/Suds2).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XMLTools**: This recipe uses the XMLTools module created by David Bankier.
    For more information about this module, please visit [http://github.com/dbankier/XMLTools-For-Appcelerator-Titanium](http://github.com/dbankier/XMLTools-For-Appcelerator-Titanium).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the LinkedIn Contacts API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LinkedIn is a popular social-networking site for professionals. The LinkedIn
    API provides a rich set of integration services for use within your app. For Enterprise-focused
    apps, LinkedIn features such as Messaging and Contacts can be critical. Common
    examples of this would be providing a sales agent with access to their contacts
    within your app.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates how to integrate the LinkedIn Contacts API into your
    Titanium app, in a searchable fashion.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the LinkedIn Contacts API](img/5343OT_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses several modules, including the innovative LinkedIn module,
    `linkedin_module-min.js`. This module and other code assets can be downloaded
    from the source code provided by the book, or individually through the links provided
    in the *See also* section at the end of this recipe. Setting up the dependencies
    for this recipe is straightforward. First, copy the `lib` folder to the `Resources`
    folder of your Titanium project, and then, the `copy formatters.js` and `linkedin_module-min.js`
    files into the `Resources` folder, as shown highlighted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After you have set up the recipe''s dependencies, the next step is to create
    your application namespaces in the `app.js` file and use `require` to import the
    module into your code, as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Adding your API key and secret key
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first step in using the LinkedIn module is to create a LinkedIn application
    at [https://www.linkedin.com/secure/developer](https://www.linkedin.com/secure/developer).
    Once you have registered your application, LinkedIn will provide you with the
    API and authentication keys needed to interact with their APIs. All of the APIs
    used in this recipe need `OAuth 1.0a` authentication to connect. The LinkedIn
    module will handle this for you by using the `init` method to register your secret
    and API keys, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You must use the `init` method to set your secret and API keys, before using
    any of the module's functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Adding permissions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, if no permissions are specified, your app will only have rights
    to read basic "digital business card" information about the current user. Since
    this recipe needs access to the user''s contacts, we must call the `addPermission`
    method to request for the `r_network` privilege, as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'To add multiple permissions, simply call the `addPermission` method several
    times. The following snippet shows how to add the full profile access right to
    the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a full list of all the permissions, please visit [https://developer.linkedin.com/documents/authentication](https://developer.linkedin.com/documents/authentication).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section of the recipe outlines how to create the UI that is used to display
    and search LinkedIn contacts.
  prefs: []
  type: TYPE_NORMAL
- en: First, a `Ti.UI.Window` is created. This will be used to attach all of our visual
    elements and will also trigger a call to the LinkedIn API when the open event
    is fired.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A `Ti.UI.SearchBar` is then created. The search-bar control provides a search
    box that filters the contents of `Ti.UI.TableView`. In this recipe, we use the
    search-bar control to filter the user's LinkedIn contacts by last name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The final UI component added to `Ti.UI.Window` is `Ti.UI.TableView` that will
    be used to display the user's LinkedIn contacts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Loading your LinkedIn contacts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next snippet demonstrates how the LinkedIn module can be used to load a
    list of your contacts as the `Ti.UI.Window` window is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Use the `uiHelper.createWaitMsg` method to display a loading message to the
    user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the module's `getConnections` method to query the user's contacts from the
    LinkedIn API. In the next example, an inline function is used as a callback returning
    the user's contacts as the `_e` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `uiHelpers.displayContacts` method is used to format and apply returned
    contacts for display.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the uiHelpers object to format results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `uiHelpers` object is used to format the results of the LinkedIn Contacts
    API for display.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: The `createWaitMsg` function is used to display a waiting message in the `tableView`
    while the LinkedIn API is being called.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `displayContacts` method is the primary method used to convert and display
    the API results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Update the `tableView` to alert the user that we are now loading their contacts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `convertToObject` method is called to convert the LinkedIn XML results into
    more manageable JavaScript objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the conversion result is `null`, display an error message to the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the `formatter.createContactTableRows` function, format the JavaScript
    objects into the `Ti.UI.TableViewRow` layout shown earlier in this recipe's screenshots.
    The `tableView` is then updated with the formatted rows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Parsing the LinkedIn API results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `resultParser` object is used to parse the XML provided by the LinkedIn
    API, into more manageable JavaScript objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: The `getText` function is used to return a specific key from a provided `Ti.XML.Element`.
    If no key is found, a null value is returned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `getQueryParams` function is used to return an object with all query string
    parameters for a provided URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `formatUrl` function returns a URL to the contact's profile. If no URL can
    be determined, a link to [linkedin.com](http://linkedin.com) is provided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `getProfileUrl` function is used to return a URL to the contact''s profile.
    Since the LinkedIn API does not provide this information, a URL is generated by
    parsing the `site-standard-profile-request` node for key details. The construction
    of this URL is demonstrated in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `isPublic` function is used to determine if a contact's information is public.
    If the profile is not public, we will not add it to the displayed contact list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `convertToObjects` is the primary method responsible for converting the
    LinkedIn contacts' XML into JavaScript objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: First, the string of XML provided by the API is loaded into a `Ti.XML.Document`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Retrieve all of the XML nodes under the `person` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start looping through each of the nodes under the `person` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check that the profile is public.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the profile is public, create a JavaScript object with properties from the
    `Ti.XML.Node`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For individuals with a large number of contacts, this conversion process can
    be memory intensive. To help reduce the size of variables in memory, we set all
    temporary objects to `null` before returning the converted results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the `clearlyinnovative.linkedIn` module created by Aaron Saunders,
    of [clearlyinnovative.com](http://clearlyinnovative.com). For additional documentation,
    samples, and guidance with the module, please visit [http://www.clearlyinnovative.com/blog/post/12521419647/titanium-appcelerator-quickie-linkedin-api-integration](http://www.clearlyinnovative.com/blog/post/12521419647/titanium-appcelerator-quickie-linkedin-api-integration).
    To download the source of the module, please visit the project on Github, at [http://github.com/aaronksaunders/clearlyinnovative.linkedIn](http://github.com/aaronksaunders/clearlyinnovative.linkedIn).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
