["```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n} \n```", "```js\n// main.js \nclass InactiveRocket extends Rocket {} \n```", "```js\n// main.js \nexport function main() { \n  const saturnV = new InactiveRocket('Saturn V'); \n  const falconHeavy = new Rocket('Falcon Heavy'); \n\n  console.log(saturnV.name, ' is a rocket.'); \n  console.log(falconHeavy.name, ' is also a rocket.'); \n} \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n} \n```", "```js\n// main.js \nclass InactiveRocket extends Rocket { \n  constructor(name, lastFlown) { \n    super(name); \n    this.lastFlown = lastFlown; \n  } \n} \n```", "```js\n// main.js \nexport function main() { \n  const saturnV = new InactiveRocket('Saturn V', new Date('May \n  14,1973')); \n  const falconHeavy = new Rocket('Falcon Heavy'); \n\n  console.log(falconHeavy.name + ' is a Rocket'); \n  console.log(saturnV.name + ' is an inactive rocket'); \n  console.log(`${saturnV.name} was last flown:\n  ${rocket.lastFlown}`); \n} \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n\n  print() { \n    console.log(this.name + ' is a Rocket'); \n  } \n}  \n```", "```js\n// main.js \nclass InactiveRocket extends Rocket { \n  constructor(name, lastFlown) { \n    super(name); \n    this.lastFlown = lastFlown; \n  } \n\n  print() { \n    console.log(this.name + ' is an inactive rocket'); \n    console.log(`${this.name} was last flown: \n    ${this.lastFlown}`); \n  } \n} \n```", "```js\n// main.js \nexport function main() { \n  const saturnV = new InactiveRocket('Saturn V', new Date('May \n  14,1973')); \n  const falconHeavy = new Rocket('Falcon Heavy'); \n\n  [saturnV, falconHeavy].forEach((r) => r.print()); \n}  \n```", "```js\n// main.js \nlet rocketMap = {};  \nlet inactiveRocketMap = {}; \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n    rocketMap[name] = this; \n     } \n  print() { \n    console.log(this.name + ' is a rocket'); \n  } \n}  \n```", "```js\n// main.js \nclass Rocket { \n  static find (name) { \n    return rocketMap[name]; \n  } \n} \n```", "```js\n// main.js \nclass InactiveRocket extends Rocket { \n constructor(name, lastFlown) { \n    super(name); \n    this.lastFlown = lastFlown; \n    inactiveRocketMap[name] = this; \n  } \n\n  print() { \n    console.log(this.name + ' is an inactive rocket'); \n    console.log(`${this.name} was last flown: \n    ${this.lastFlown}`); \n  } \n} \n```", "```js\n// main.js \nclass InactiveRocket { \n  static find (name) { \n    return inactiveRocketMap[name]; \n  } \n} \n```", "```js\n// main.js \nexport function main() { \n  const saturnV = new InactiveRocket('Saturn V'); \n  const falconHeavy = new Rocket('Falcon Heavy'); \n\n  // print rocket for saturn V and falcon heavy \n  console.log('All Rockets:'); \n  Rocket.find('Saturn V').print(); \n  Rocket.find('Falcon Heavy').print(); \n\n  // print inactive entry for saturn v and attempt falcon \n  console.log('Inactive Rockets:'); \n  InactiveRocket.find('Saturn V').print(); \n  // throws an error \n  InactiveRocket.find('Falcon Heavy').print(); \n} \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n\n  print() { \n    console.log(this.name + ' is a Rocket'); \n  } \n} \n```", "```js\n// main.js \nclass InactiveRocket extends Rocket { \n  constructor(name, lastFlown) { \n    super(name); \n    this.lastFlown = lastFlown; \n  } \n\n  print() { \n    super.print(); \n    console.log(`${this.name} was last flown: \n    ${this.lastFlown}`); \n  } \n} \n```", "```js\n// main.js \nexport function main() { \n  const saturnV = new InactiveRocket('Saturn V', new Date('May \n  14, 1973')); \n  const falconHeavy = new Rocket('Falcon Heavy'); \n\n  falconHeavy.print(); \n  saturnV.print(); \n} \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n\n  print() { \n    console.log(this.name + ' is a Rocket'); \n  } \n}  \n```", "```js\n// main.js \nclass InactiveRocket extends Rocket { \n constructor(name, lastFlown) { \n    super(name); \n    this.lastFlown = lastFlown; \n  } \n\n  print() { \n    console.log(this.name + ' is an inactive rocket'); \n    console.log(`${this.name} was last flown: \n    ${this.lastFlown}`); \n  } \n} \n```", "```js\n// main.js \nclass Launcher { \n  constructor (rocket) { \n    this.rocket = rocket; \n  } \n\n  prepareForLaunch () { \n    const { rocket } = this; \n\n    if (rocket instanceof InactiveRocket) { \n      console.error(`Unable to launch, rocket ${rocket.name} has \n      been inactive since ${rocket.lastFlown}`); \n    } else { \n      console.log(`${rocket.name} is ready to launch.`); \n    } \n  } \n}  \n```", "```js\n// main.js \nexport function main() { \n  const saturnV = new InactiveRocket('Saturn V', new Date('May \n  14,1973')); \n  const falconHeavy = new Rocket('Falcon Heavy'); \n\n  const saturnVLauncher = new Launcher(saturnV); \n  const falconHeavyLauncher = new Launcher(falconHeavy); \n\n  saturnVLauncher.prepareForLaunch(); \n  falconHeavyLauncher.prepareForLaunch(); \n} \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    Object.assign(this, Launcher); \n    this.name = name; \n  } \n\n  print() { \n    console.log(this.name + ' is a rocket'); \n  } \n}  \n```", "```js\n// main.js \nclass InactiveRocket extends Rocket { \n constructor(name, lastFlown) { \n    super(name); \n    this.lastFlown = lastFlown; \n  } \n\n  print() { \n    console.log(this.name + ' is an inactive rocket'); \n    console.log(`${this.name} was last flown: \n    ${this.lastFlown}`); \n  } \n} \n```", "```js\n// main.js \nconst Launcher = { \n  prepareForLaunch () { \n    if (this instanceof InactiveRocket) { \n      console.error(`Unable to launch, rocket ${this.name} has \n      been inactive since ${this.lastFlown}`); \n    } else { \n      console.log(`${this.name} is ready to launch.`); \n    } \n  } \n}  \n```", "```js\n// main.js \n\nexport function main() { \n  const saturnV = new InactiveRocket('Saturn V', new Date('May \n  14,1973')); \n  const falconHeavy = new Rocket('Falcon Heavy'); \n\n  saturnV.prepareForLaunch(); \n  falconHeavy.prepareForLaunch(); \n} \n```", "```js\n// main.js \nclass Rocket {\n  constructor(name) { \n    this.name = name; \n  }\n}\n```", "```js\n// main.js \nclass InactiveRocket extends Rocket { \n constructor(name, lastFlown) { \n    super(); \n    this.lastFlown = lastFlown; \n } \n} \n```", "```js\n// main.js \nfunction isA(instance, klass) { \n  return instance.constructor === klass; \n} \n```", "```js\n// main.js \nexport function main() { \n  const saturnV = new InactiveRocket('Saturn V', new Date('May \n  14,1973')); \n\n  console.log(saturnV.name + ' instance of Rocket: ' + \n  isA(saturnV,Rocket)); \n  console.log(saturnV.name + ' instance of InactiveRocket: ' + \n  isA(saturnV, InactiveRocket)); \n} \n```", "```js\n// main.js \nclass Rocket {} \nclass ActiveRocket extends Rocket {} \nclass OrbitingRocket extends ActiveRocket {}  \n```", "```js\n// main.js \nfunction listInheritance (instance) { \n  const hierarchy = []; \n  let currClass = instance.constructor; \n\n  while (currClass.name) { \n    hierarchy.push(currClass.name); \n    currClass = Object.getPrototypeOf(currClass) \n  } \n\n  console.log(hierarchy.join(' -> ')); \n} \n```", "```js\n// main.js \nexport function main() { \n  const orbitingRocket = new OrbitingRocket(); \n  listInheritance(orbitingRocket); \n} \n```", "```js\n// main.js \nclass Rocket { \n  constructor (name) { \n    this.name = name; \n    if (this.constructor === Rocket) { \n      throw new Error('Abstract Class Should not be \n      instantiated'); \n    } \n  } \n}  \n```", "```js\n// main.js \nclass ActiveRocket extends Rocket {} \nclass InactiveRocket extends Rocket {} \n```", "```js\n// main.js \nexport function main() { \n  const saturnV = new InactiveRocket('Saturn V'); \n  console.log(saturnV.name, ' is a Rocket ', saturnV instanceof \n  Rocket); \n\n  const falconHeavy = new ActiveRocket('Falcon Heavy'); \n  console.log(falconHeavy.name, ' is a Rocket ', falconHeavy \n  instanceof Rocket); \n\n  // throws an error; \n  new Rocket('Not going to make it!'); \n} \n```"]