["```js\n//Module Starts \n\n(function(window){ \nconst sum =(x, y) => x + y;\nconst sub = (x,y) => x - y;\nconst math = { \n  findSum(a, b) { return sum(a, b) }, \n  findSub(a,b) { return sub(a, b) }\n} \nwindow.math = math; \n})(window) \n\n//Module Ends \n\nconsole.log(math.findSum(1, 2)); //Output \"3\" \nconsole.log(math.findSub(1, 2)); //Output \"-1\"\n```", "```js\ndefine(function(){ \n  const sum = (x, y) => x + y\n  const sub = (x, y) => x - y\n  const math = { \n    findSum(a, b) { return sum(a,b) }, \n    findSub(a, b){ return sub(a, b); } \n  } \n  return math; \n});\n```", "```js\nrequire([\"math\"], function(math){ \n  console.log(math.findSum(1, 2)); //Output \"3\" \n  console.log(math.findSub(1, 2)); //Output \"-1\" \n}) \n```", "```js\nconst sum =(x, y) => x + y;\nconst sub = (x, y) => x - y;\nconst math = { \n  findSum(a, b) { \n    return sum(a,b); \n  }, \n  findSub(a, b){ \n    return sub(a, b); \n  } \n} \n\nexports.math = math; // or module.exports.math = math\n```", "```js\nconst math = require(\"./math\").math; \nconsole.log(math.findSum(1, 2)); //Output \"3\" \nconsole.log(math.findSub(1, 2)); //Output \"-1\" \n```", "```js\nexports = module.exports = { }\n```", "```js\n// string1.js\nmodule.exports = () => \"Amazing string\" // correct export of function\n```", "```js\n// string2.js\nexports = () => \"Amazing string\" // this fails to export this function\n```", "```js\n// index.js\nconsole.log(require('string1.js')()); // <-- we're executing the imported function\nconsole.log(require('string2.js')());\n```", "```js\n(function (root, factory) { \n  //Environment Detection \n  if (typeof define === 'function' && define.amd) { \n    define([], factory); \n  } else if (typeof exports === 'object') { \n    module.exports = factory(); \n  } else { \n    root.returnExports = factory(); \n  } \n}(this, function () { \n//Module Definition \n  const sum = (x, y) => x + y;\n  const sub = (x, y) => x - y;\n  const math = { \n    findSum(a, b) { \n        return sum(a,b); \n    }, \n    findSub(a, b) { \n        return sub(a, b); \n    } \n  } \nreturn math; \n})\n);\n```", "```js\n// module.js\n\nconst takeSquareAndAdd2 = num => {\n    return num*num + 2;\n}\n\nexport { takeSquareAndAdd2 }; // #1\nexport const someVariable = 100; // #2\nexport function yourName(name) {\n    return `Your name ${name} is a nice name` \n}; // #3\nexport default \"Holy moly this is interesting!\" // #4\n```", "```js\n// index.js\nimport myString, { takeSquareAndAdd2 } from './module.js'\nconsole.log(myString) // \"Holy moly this is interesting\"\nconsole.log(takeSquareAndAdd2(2)) // 6\n```", "```js\n// index.js\nimport string from './module.js'\nconsole.log(string)\n```", "```js\nimport { takeSquareAndAdd2 } from './module.js';\nconsole.log(takeSquareAndAdd2(3))\n```", "```js\nimport { takeSquareAndAdd2 as myFunc } from './module.js';\nconsole.log(myFunc(3))\n```", "```js\nimport { takeSquareAndAdd2 as myFunc, yourName } from './module.js';\nconsole.log(myFunc(3)) // 11\nconsole.log(yourName(\"Mehul\")) // Your name Mehul is a nice name\n```", "```js\n// module.js\nexport const PI = 3.14\nexport const sqrt3 = 1.73\nexport function returnWhatYouSay(text) { return text; }\n```", "```js\n// index.js\nimport * as myModule from './module.js'\nconsole.log(myModule.PI) // 3.14\nconsole.log(myModule.returnWhatYouSay(\"This is cool!\"))\n```", "```js\nimport x from \"module-relative-path\"; \nimport {x} from \"module-relative-path\"; \nimport {x1 as x2} from \"module-relative-path\"; \nimport {x1, x2} from \"module-relative-path\"; \nimport {x1, x2 as x3} from \"module-relative-path\"; \nimport x, {x1, x2} from \"module-relative-path\"; \nimport \"module-relative-path\"; \nimport * as x from \"module-relative-path\"; \nimport x1, * as x2 from \"module-relative-path\";\n```", "```js\n// index.html\n<!doctype HTML>\n<html>\n    <head>\n        <script src=\"img/index.js\" type=\"module\"></script>\n    </head>\n    <body>\n        <div id=\"text\"></div>\n    </body>\n</html>\n\n```", "```js\n// index.js\nimport { writeText2Div as write2Div } from './module.js';\nwrite2Div('Hello world!')\n```", "```js\n// module.js\nconst writeText2Div = text => document.getElementByID('text').innerText = text;\nexport { writeText2Div };\n```"]