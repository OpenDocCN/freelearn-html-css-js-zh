- en: '*Chapter 12*: Optimizing Bootstrap 5 CSS and JavaScript Code'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第12章*：优化Bootstrap 5 CSS和JavaScript代码'
- en: In this chapter, we’re not going to use Bootstrap 5 to create any new user interfaces
    or customize any existing ones. We won’t even look at any of the source code contained
    in the Bootstrap 5 files. Instead, we will see how we can optimize our compiled
    Bootstrap 5 CSS and JavaScript code after we have finished creating our website.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们不会使用Bootstrap 5创建任何新的用户界面或自定义现有的界面。我们甚至不会查看Bootstrap 5文件中包含的任何源代码。相反，我们将看到在完成我们的网站创建后，我们如何优化我们的编译Bootstrap
    5 CSS和JavaScript代码。
- en: We will first concentrate on optimizing our stylesheet by only including the
    Bootstrap 5 Sass partials we actually use and removing all the helpers and utilities
    that we don’t use. Then we will use Node.js, NPM, and Laravel Mix to set up a
    build process to automate some tasks that will help us bundle only the JavaScript
    that our components actually use and minify both our compiled CSS and bundled
    JavaScript.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将专注于通过仅包含我们实际使用的Bootstrap 5 Sass部分来优化我们的样式表，并移除所有我们不使用的辅助工具和实用工具。然后我们将使用Node.js、NPM和Laravel
    Mix来设置一个构建过程来自动化一些任务，这将帮助我们捆绑我们组件实际使用的JavaScript，并压缩我们的编译CSS和捆绑的JavaScript。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Including the Sass partials for the used components only
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅包含使用组件的Sass部分
- en: Removing unused helpers and utilities
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除未使用的辅助工具和实用工具
- en: Setting up a build process using Node.js, npm, and Laravel Mix
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js、npm和Laravel Mix设置构建过程
- en: Using a module bundler to optimize JavaScript
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模块打包器优化JavaScript
- en: Minifying our compiled CSS and bundled JavaScript
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩我们的编译CSS和捆绑的JavaScript
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To preview the examples, you will need a code editor and a browser. The source
    code for all code examples can be found here: [https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide](https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要预览示例，您需要一个代码编辑器和浏览器。所有代码示例的源代码都可以在这里找到：[https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide](https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide)。
- en: 'To compile Sass to CSS, you will need either of the following:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要编译Sass到CSS，您需要以下任何一个：
- en: '**Node.js**, if you prefer a **command-line interface** (**CLI**) using Terminal
    (Mac) or Command Prompt (Windows)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js**，如果您更喜欢使用终端（Mac）或命令提示符（Windows）的**命令行界面**（**CLI**）'
- en: '**Scout-App**, if you prefer a **graphical user interface** (**GUI**)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Scout-App**，如果您更喜欢**图形用户界面**（**GUI**）'
- en: '**Visual Studio Code**, if you prefer to use an extension from the Visual Studio
    Code Marketplace'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**，如果您更喜欢使用Visual Studio Code Marketplace中的扩展'
- en: All these approaches are explained in [*Chapter 2*](B17143_02_epub.xhtml#_idTextAnchor033),
    *Using and Compiling Sass*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些方法都在[*第2章*](B17143_02_epub.xhtml#_idTextAnchor033)中解释，*使用和编译Sass*。
- en: To use Laravel Mix, you will need **Node.js** installed on your computer and
    then follow the instructions to download the required packages from npm.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Laravel Mix，您需要在您的计算机上安装**Node.js**，然后按照说明从npm下载所需的包。
- en: Including the Sass partials for the used components only
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仅包含使用组件的Sass部分
- en: 'In this section, we will see how we can optimize our compiled CSS by only including
    the Bootstrap 5 Sass partials that are actually used by the components in our
    HTML code. On the website that we created earlier in this book, we have used all
    of the Bootstrap 5 components except for the Placeholder, Popover, and Scrollspy
    components. Scrollspy is a JavaScript-only component, so we will remove the Sass
    partials belonging to the Placeholder and Popover components. In our `styles.scss`
    file, we have a long list of `// Optional Bootstrap CSS`, which among other things
    contains the Sass partials for all components. So, this is where we want to carefully
    consider which partial files we can remove. In the following code snippet, you
    will see the long list of `// Optional Bootstrap CSS` where the lines that import
    the Sass partials for the Placeholder and Popover components have been commented
    out. You could also choose to delete those lines, but by keeping them commented
    out it’s easy to uncomment them if you add any of these components to the website
    at a later stage, and they will anyway be removed automatically when the Sass
    is compiled:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何通过仅包含我们HTML代码中实际使用的Bootstrap 5 Sass部分来优化我们的编译CSS。在我们这本书中早期创建的网站上，我们使用了Bootstrap
    5的所有组件，除了Placeholder、Popover和Scrollspy组件。Scrollspy是一个仅使用JavaScript的组件，因此我们将移除Placeholder和Popover组件的Sass部分。在我们的`styles.scss`文件中，有一个长长的`//
    Optional Bootstrap CSS`列表，其中包含所有组件的Sass部分。所以，这就是我们需要仔细考虑可以移除哪些部分文件的地方。在下面的代码片段中，您将看到长长的`//
    Optional Bootstrap CSS`列表，其中导入Placeholder和Popover组件Sass部分的行已被注释掉。您也可以选择删除这些行，但通过将它们注释掉，如果稍后添加这些组件到网站上，很容易取消注释它们，并且当Sass编译时，它们将自动被移除：
- en: part-3/chapter-12/website/scss/style.scss
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-12/website/scss/style.scss
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: When we compile our Sass code, the compiled CSS stylesheet will now be slightly
    smaller since the CSS for the Popover and Placeholder components have been removed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编译Sass代码时，编译后的CSS样式表现在会稍微小一些，因为Popover和Placeholder组件的CSS已经被移除。
- en: Dependencies across Sass partials
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Sass部分之间的依赖关系
- en: There are some dependencies across the various Sass partial files, so it might
    not be easy to simply remove a file for a specific component. Make sure that you
    test your website carefully.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在各种Sass部分文件之间存在一些依赖关系，因此简单地移除特定组件的文件可能并不容易。请确保仔细测试您的网站。
- en: Removing unused helpers and utilities
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除未使用的辅助器和实用工具
- en: The helpers and utilities of Bootstrap 5 are something that we use in addition
    to components, sometimes on specific code inside of a component, and sometimes
    as part of our own HTML code. Therefore, it can also be considered which of these
    we actually use, and make sure to not include the ones that we don’t use.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 5的辅助器和实用工具是我们除了组件之外使用的，有时是在组件的特定代码中，有时是我们自己的HTML代码的一部分。因此，也可以考虑我们实际使用了哪些，并确保不包含我们未使用的那些。
- en: Removing unused helpers
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移除未使用的辅助器
- en: 'In our code for the website, we have used the following helpers: Ratio, Position,
    Visually hidden, and Stretched link. The Bootstrap 5 code for these helpers is
    imported in our `style.scss` file using the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们为网站编写的代码中，我们使用了以下辅助器：比例、位置、视觉隐藏和拉伸链接。这些辅助器的Bootstrap 5代码通过以下代码导入到我们的`style.scss`文件中：
- en: part-3/chapter-12/website/scss/style.scss
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-12/website/scss/style.scss
- en: '[PRE31]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This will import the `_helpers.scss` file containing `@import` statements for
    the individual helpers. The content of that file is as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导入包含对单个辅助器`@import`语句的`_helpers.scss`文件。该文件的内容如下：
- en: part-3/chapter-12/website/bootstrap/scss/_helpers.scss
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-12/website/bootstrap/scss/_helpers.scss
- en: '[PRE33]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We might now think that we simply need to uncomment the `@import` statements
    for the helpers that we don’t use, just as we did with the components in the previous
    section. This will work here and now, but if we choose to update Bootstrap 5 at
    a later point, our changes will be gone, since the `_helpers.scss` file will be
    replaced. This is because this file is part of the Bootstrap 5 source code that
    is replaced when you update Bootstrap 5\. If you know you won’t update Bootstrap
    5 at a later point or know that you will remember to make the same edits to the
    `_helpers.scss` file again after updating, you can do it like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-12/website/bootstrap/scss/_helpers.scss
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: But to do it in a better and more maintainable way, we can change our `@import`
    statement in the `styles.scss` file and import only the individual helper partial
    files that we need instead of importing the `_helpers.scss` file. So, we will
    ignore that file (even though it’s part of the Bootstrap 5 source code) and instead
    implement our own way of importing the helpers.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'The code will then look like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-12/website/scss/style.scss
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: I have chosen to keep the unused imports in our file but have them commented
    out. Then, it’s easier to uncomment them in the future if the need arises, and
    it will anyway be removed when compiling the Sass and hence not take up any space.
    Just like the way we did with the imports of the component partial files.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Removing unused utilities
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To remove unused utilities, we will need to take a different approach than
    what we have seen with components and helpers. We now need to use the utility
    API, which we learned about in [*Chapter 6*](B17143_06_epub.xhtml#_idTextAnchor130),
    *Understanding and Using the Bootstrap 5 Utility API*. In the `_utilities.scss`
    file of Bootstrap 5, we see a total of 80 defined utility classes that have different
    settings and values. For each of them, we can see what the class or class prefix
    will be, and we can use that to search through our code to see which ones we actually
    use. If we do this, we will see that we roughly use half of them. To be precise,
    we need to remove the following 37 utility classes that are not being used:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The negative margin utilities (`negative-margin`, `negative-margin-x`, `negative-margin-y`,
    `negative-margin-top`, `negative-margin-end`, `negative-margin-bottom`, and `negative-margin-start`)
    are not included in the list, since they are disabled by default, and we haven’t
    enabled them through the `$enable-negative-margins` option in our own Sass code.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'To remove all of the unused utilities so that they are not generated through
    the utility API, we use the following code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-12/website/scss/_utilities.scss
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: After compiling the Sass code, the resulting CSS file (in the expanded Sass
    output format) will now be 1,513 lines smaller, which is equal to 25,485 bytes
    saved.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Specifying used utilities
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another way to optimize the usage of utilities is to specify the utilities
    that are *being used* instead. There are a total of 39 utilities being used in
    our project, and we can generate just these by using the `map-get-multiple()`
    Sass function provided by Bootstrap 5 in the `_functions.scss` file. With this
    function, we can get multiple keys from a Sass map and thus overwrite the `$utilities`
    variable as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 优化工具使用的一种另一种方法是指定正在使用的工具。在我们的项目中总共使用了 39 个工具，我们可以通过使用 Bootstrap 5 在 `_functions.scss`
    文件中提供的 `map-get-multiple()` Sass 函数来生成这些工具。使用此函数，我们可以从 Sass 映射中获取多个键，从而按照以下方式覆盖
    `$utilities` 变量：
- en: SCSS
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: SCSS
- en: '[PRE105]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: No matter whether you choose to specify which utilities to remove or which are
    being used, the result will be the same.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择指定要删除的工具还是正在使用的工具，结果都将相同。
- en: Trimming used utilities
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 剪切使用中的工具
- en: If you want to go that extra mile, it’s also possible to trim any used utilities.
    By that, I mean that we remove any variations of a utility that we are not using
    by editing the values of that utility.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要走得更远，也可以剪切任何使用中的工具。我的意思是，通过编辑该工具的值来删除我们不使用的工具的任何变体。
- en: 'Say that we want to edit the `text-align` utility since we are only using the
    `.text-center` class in our project. So, we want to remove the `.text-start` and
    `.text-end` variations as well as disable the responsive variations of this utility.
    To accomplish this, we can use the following code:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要编辑 `text-align` 工具，因为我们项目中只使用了 `.text-center` 类。所以，我们想要移除 `.text-start`
    和 `.text-end` 变体，以及禁用此工具的响应式变体。为了实现这一点，我们可以使用以下代码：
- en: SCSS
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: SCSS
- en: '[PRE149]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: Now, we will only generate the `.text-center` class, which is the only one we
    use for text alignment.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只生成 `.text-center` 类，这是我们用于文本对齐的唯一一个类。
- en: 'Alternatively, this can also be done by using the following code, where we
    overwrite the code for the text alignment utility and, therefore, must also specify
    `property` and `class`:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，这也可以通过以下代码来完成，其中我们覆盖了文本对齐工具的代码，因此还必须指定 `property` 和 `class`：
- en: SCSS
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: SCSS
- en: '[PRE162]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: This was just an example. I have not used this method of trimming used utilities
    for the project, since it’s a rather big task. But if you go that extra mile,
    it will be possible to save some lines and bytes of code.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个例子。我没有在项目中使用这种方法来剪切使用中的工具，因为这是一项相当大的任务。但如果你走得更远，就有可能节省一些代码行和字节。
- en: In the next section, we will set up a build tool using Node.js, npm, and Laravel
    Mix. We will do that to be able to optimize our usage of JavaScript and automate
    tasks for Sass compiling and general minifying.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用 Node.js、npm 和 Laravel Mix 设置构建工具。我们将这样做是为了能够优化我们的 JavaScript 使用，并自动化
    Sass 编译和一般压缩的任务。
- en: Setting up a build process using Node.js, npm, and Laravel Mix
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Node.js、npm 和 Laravel Mix 设置构建过程
- en: In [*Chapter 2*](B17143_02_epub.xhtml#_idTextAnchor033)*,* *Using and Compiling
    Sass*, we already learned how to use Node.js and npm to set up a script that would
    compile our Sass to CSS. In this setup, we will use Laravel Mix, which is a wrapper
    around Webpack. In short, Webpack is a module bundler that prepares JavaScript
    and assets for the browser. By using Laravel Mix, we get a simple API for setting
    the Webpack configuration without any prior experience with Webpack.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 2 章*](B17143_02_epub.xhtml#_idTextAnchor033)*，*使用和编译 Sass*中，我们已经学习了如何使用
    Node.js 和 npm 设置一个脚本，该脚本将编译我们的 Sass 为 CSS。在这个设置中，我们将使用 Laravel Mix，它是围绕 Webpack
    的包装器。简而言之，Webpack 是一个模块打包器，它为浏览器准备 JavaScript 和资源。通过使用 Laravel Mix，我们得到了一个简单的
    API 来设置 Webpack 配置，而不需要任何先前的 Webpack 经验。
- en: If you haven’t already installed Node.js, then please go back and take a look
    at [*Chapter 2*](B17143_02_epub.xhtml#_idTextAnchor033) and the *Compiling Sass*
    section. Now, here’s a step-by-step guide on how to set up Laravel Mix using Node.js
    and npm. This will, in the end, generate a `package.json` file, a Laravel Mix
    configuration file, as well as a folder, and some empty files.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装 Node.js，那么请返回并查看[*第 2 章*](B17143_02_epub.xhtml#_idTextAnchor033)和*编译
    Sass*部分。现在，这里有一个使用 Node.js 和 npm 设置 Laravel Mix 的逐步指南。这将最终生成一个 `package.json`
    文件、一个 Laravel Mix 配置文件、一个文件夹和一些空文件。
- en: Skip setting up Laravel Mix
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 跳过设置 Laravel Mix
- en: If you want, you can choose to skip the manual setup of Laravel Mix and simply
    use the Laravel Mix template provided with this book in the code related to this
    chapter. Then, simply go to the next section.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想，你可以选择跳过 Laravel Mix 的手动设置，直接使用本书提供的 Laravel Mix 模板中的相关代码。然后，简单地进入下一节。
- en: 'Before we start setting up Laravel Mix, we must open the Terminal (Mac) or
    Command Prompt (Windows) and navigate to our project folder. Then, we can follow
    these eight steps:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始设置 Laravel Mix 之前，我们必须打开终端（Mac）或命令提示符（Windows）并导航到我们的项目文件夹。然后，我们可以按照以下八个步骤进行操作：
- en: 'Generate an empty npm project with the default settings:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用默认设置生成一个空的 npm 项目：
- en: '[PRE175]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'Install the latest version of Bootstrap 5:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Bootstrap 5 的最新版本：
- en: '[PRE176]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '`--save-dev` is used to specify that it is a development dependency. Change
    the version number if you want another version.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `--save-dev` 来指定这是一个开发依赖项。如果你想安装其他版本，请更改版本号。
- en: 'Install Popper, which is a dependency for the Dropdown, Popover, and Tooltip
    components:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Popper，它是 Dropdown、Popover 和 Tooltip 组件的依赖项：
- en: '[PRE177]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'Install Laravel Mix:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Laravel Mix：
- en: '[PRE178]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Create the `webpack.mix.js` file in the root folder of the project. This is
    a configuration file for Laravel Mix.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录中创建 `webpack.mix.js` 文件。这是 Laravel Mix 的配置文件。
- en: 'In the root folder of the project, create the `src` folder with the empty `js`
    and `scss` folders inside. Create the `script.js` file in the `js` folder and
    the `style.scss` file in the `scss` folder. The file and folder structure should
    look like this:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录中，创建一个包含空 `js` 和 `scss` 文件夹的 `src` 文件夹。在 `js` 文件夹中创建 `script.js` 文件，在
    `scss` 文件夹中创建 `style.scss` 文件。文件和文件夹结构应如下所示：
- en: '[PRE179]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: We will put some code in those files in just a moment.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这些文件中稍后添加一些代码。
- en: 'Add the following code to the configuration file (`webpack.mix.js`) to import
    `mix` and define our build:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到配置文件（`webpack.mix.js`）中，以导入 `mix` 并定义我们的构建：
- en: '[PRE180]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'Laravel Mix has now been instructed to do the following:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel Mix 现在已被指示执行以下操作：
- en: Bundle the JavaScript in `src/js/script.js` and output it to the `js` folder.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `src/js/script.js` 中的 JavaScript 打包并输出到 `js` 文件夹。
- en: Compile the Sass in `src/scss/style.scss` and output it to the `css` folder.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译 `src/scss/style.scss` 中的 Sass 并将其输出到 `css` 文件夹。
- en: 'Run the following command to install additional dependencies:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来安装额外的依赖项：
- en: '[PRE181]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: This command should only be necessary to run once.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令通常只需运行一次。
- en: Using the Laravel Mix template
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Laravel Mix 模板
- en: 'If you haven’t followed the manual steps to set up Laravel Mix, you can also
    grab the Laravel Mix template from the `part-3/chapter-12/laravel-mix/template`
    folder. In this case, you should simply place the content of that template folder
    inside your project folder and run the following command:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有按照手动步骤设置 Laravel Mix，您也可以从 `part-3/chapter-12/laravel-mix/template` 文件夹中获取
    Laravel Mix 模板。在这种情况下，您只需将模板文件夹的内容放置到您的项目文件夹中，并运行以下命令：
- en: '[PRE182]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: This will install Bootstrap 5, Popper, and Laravel Mix, as well as all dependencies.
    You don’t have to run the `npx mix` command to install additional dependencies.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装 Bootstrap 5、Popper 和 Laravel Mix，以及所有依赖项。您不需要运行 `npx mix` 命令来安装额外的依赖项。
- en: Using Laravel Mix
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Laravel Mix
- en: 'The code in our project should now look like this:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们项目中的代码现在应该看起来像这样：
- en: '[PRE183]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: Be aware that we haven’t put any code inside the `script.js` and `style.scss`
    files just yet, and neither have we added any HTML files or other assets to the
    project. We will do that in just a moment. First, let’s take a look at two of
    the most useful commands.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还没有在 `script.js` 和 `style.scss` 文件中放入任何代码，也没有向项目中添加任何 HTML 文件或其他资源。我们将在稍后进行。首先，让我们看看两个最有用的命令。
- en: 'To trigger the Webpack build, which we defined in the `webpack.mix.js` file,
    we simply run the following command:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 触发 Webpack 构建，我们在 `webpack.mix.js` 文件中定义了它，我们只需运行以下命令：
- en: '[PRE191]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: This will now compile the files and build the bundle.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这将现在编译文件并构建包。
- en: 'To watch the filesystem for changes and automatically recompile the files and
    rebuild the bundle, we can use the following command:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 要监视文件系统中的更改并自动重新编译文件和重新构建包，我们可以使用以下命令：
- en: '[PRE192]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Webpack will now run every time we save changes to a JavaScript or Sass file
    in our project folder.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们在项目文件夹中的 JavaScript 或 Sass 文件保存更改时，Webpack 都会运行。
- en: No code was added to `script.js` and `style.scss` yet
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`script.js` 和 `style.scss` 文件中还没有添加任何代码'
- en: The Laravel Mix commands currently don’t produce any results, since we haven’t
    added any code to our `script.js` and `style.scss` files in the `src` folder.
    We will do that now.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还没有在 `src` 文件夹中的 `script.js` 和 `style.scss` 文件中添加任何代码，Laravel Mix 的命令目前不会产生任何结果。我们现在将这样做。
- en: Adding the website code to the build process
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将网站代码添加到构建过程中
- en: We have to make some changes to our project, since it's not compatible with
    the way we want to use Laravel Mix. Because of this, we won’t make changes to
    the existing project in `part-3/chapter-12/website`, but instead, make a copy
    to `part-3/chapter-12/laravel-mix/setup` and make our changes there. . Please
    note that all the changes described in this section has already been applied to
    the code on GitHub.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的项目与 Laravel Mix 的使用方式不兼容，我们必须对其进行一些更改。因此，我们不会在 `part-3/chapter-12/website`
    中的现有项目中做出更改，而是将其复制到 `part-3/chapter-12/laravel-mix/setup` 并在那里进行更改。请注意，本节中描述的所有更改已应用于
    GitHub 上的代码。
- en: 'Here are the steps we need to make in order to restructure and update our project:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 为了重构和更新我们的项目，我们需要采取以下步骤：
- en: '`src` **folder**:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`src` **文件夹**:'
- en: First, we have to move our `js` and `scss` folder into the new `src` folder
    and delete the `bootstrap.bundle.min.js` file. The Bootstrap 5 JavaScript code
    will be compiled and bundled by Laravel Mix and then placed in another folder.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须将我们的 `js` 和 `scss` 文件夹移动到新的 `src` 文件夹中，并删除 `bootstrap.bundle.min.js`
    文件。Bootstrap 5 JavaScript 代码将由 Laravel Mix 编译和打包，然后放置在另一个文件夹中。
- en: '**Update HTML**:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更新 HTML**:'
- en: 'Since we have now deleted the `bootstrap.bundle.min.js` file in the previous
    step, we can now delete the following line of code from all HTML files:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在上一步中已删除 `bootstrap.bundle.min.js` 文件，我们现在可以从所有 HTML 文件中删除以下代码行：
- en: HTML
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: HTML
- en: '[PRE193]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: 'Then, in the files that previously had only the `bootstrap.bundle.min.js` file
    and not the `script.js` file, we must add this file, so that all HTML pages, in
    the end, have only the following `script` tag:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在之前仅包含 `bootstrap.bundle.min.js` 文件而没有 `script.js` 文件的文件中，我们必须添加此文件，以便最终所有
    HTML 页面都只包含以下 `script` 标签：
- en: '[PRE194]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: 'So, the bottom part of each HTML file should look like this with few exceptions:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每个 HTML 文件的底部部分应该看起来像这样，但有少数例外：
- en: '[PRE195]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '**Update Sass**:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更新 Sass**:'
- en: Now, we need to update the file path of the imports of the Bootstrap 5 Sass
    partials in the `style.scss` file. We need to replace `../bootstrap/scss/` with
    `~bootstrap/scss/` (or simply `../` with `~`) to make sure we get the source code
    directly from the `node_modules` folder. The tilde character, `~`, is a reference
    to that folder.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要更新 `style.scss` 文件中 Bootstrap 5 Sass 部分的导入文件路径。我们需要将 `../bootstrap/scss/`
    替换为 `~bootstrap/scss/`（或简单地用 `../` 替换 `~`），以确保直接从 `node_modules` 文件夹获取源代码。波浪字符
    `~` 是对该文件夹的引用。
- en: 'Our top part of the `style.scss` file should now look like this:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们 `style.scss` 文件的上部现在应该看起来像这样：
- en: part-3/chapter-12/laravel-mix/website/src/scss/style.scss
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-12/laravel-mix/website/src/scss/style.scss
- en: '[PRE196]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: We will keep the rest of our Sass files untouche4.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将保持其余的 Sass 文件不变。
- en: '**Update JavaScript**:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更新 JavaScript**:'
- en: 'When we load Bootstrap 5 via a `<script>` tag, we use the `bootstrap` namespace
    when initializing JavaScript components as follows:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过 `<script>` 标签加载 Bootstrap 5 时，我们在初始化 JavaScript 组件时使用 `bootstrap` 命名空间，如下所示：
- en: JavaScript
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript
- en: '[PRE197]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: 'To import the Bootstrap 5 JavaScript source code to make it work with our own
    current JavaScript code, we must do it in the following way at the top of our
    `script.js` file:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将 Bootstrap 5 JavaScript 源代码导入以使其与我们的当前 JavaScript 代码兼容，我们必须在 `script.js`
    文件的顶部以以下方式执行：
- en: part-3/chapter-12/laravel-mix/setup/src/js/script.js
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-12/laravel-mix/setup/src/js/script.js
- en: '[PRE198]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: This will import all Bootstrap 5 JavaScript source files, which is similar to
    what we had before when we used the `bootstrap.bundle.min.js` file in a `<script>` tag.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导入所有 Bootstrap 5 JavaScript 源文件，这与我们之前在 `<script>` 标签中使用 `bootstrap.bundle.min.js`
    文件时的情况类似。
- en: 'Now, to actually trigger the Webpack build, compile the Sass, and bundle the
    JavaScript, we can use the Laravel Mix commands from before to run it once:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了实际触发 Webpack 构建、编译 Sass 和打包 JavaScript，我们可以使用之前的 Laravel Mix 命令运行一次：
- en: '[PRE199]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'Or we can use the following command to run it every time we save changes to
    a JavaScript or Sass file in our project folder:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用以下命令在每次保存项目文件夹中 JavaScript 或 Sass 文件更改时运行它：
- en: '[PRE200]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: We have now learned how to set up a build process using Node.js, npm, and Laravel
    Mix. However, we are importing all of the JavaScript code even though we don’t
    use it all. Next up, we will see how we can optimize the JavaScript import.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学会了如何使用 Node.js、npm 和 Laravel Mix 设置构建过程。然而，尽管我们没有使用所有 JavaScript 代码，但我们仍然导入了所有
    JavaScript 代码。接下来，我们将看到如何优化 JavaScript 导入。
- en: Using a module bundler to optimize JavaScript
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模块打包器优化 JavaScript
- en: We can optimize our usage of JavaScript files when using a module bundler. Instead
    of importing all the Bootstrap 5 JavaScript source files like we just did before,
    we can import only the ones we need.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用模块打包器时，我们可以优化我们对 JavaScript 文件的使用。我们不必像之前那样导入所有 Bootstrap 5 的 JavaScript
    源文件，而只需导入我们需要的文件。
- en: In the source code of Bootstrap 5, we have the `bootstrap/js/dist` folder, which
    contains the source code for the individual JavaScript components, as well as
    the `base-component.js` file and the `dom` folder, with some more general code
    related to working with the DOM (the Document Object Model of the page).
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Bootstrap 5 的源代码中，我们有一个 `bootstrap/js/dist` 文件夹，其中包含单个 JavaScript 组件的源代码，以及
    `base-component.js` 文件和 `dom` 文件夹，其中包含一些与操作 DOM（页面文档对象模型）相关的一般代码。
- en: 'We might imagine that we can just add one of these files in a `<script>` tag
    in our HTML as follows:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会想象，我们只需在我们的 HTML 中的 `<script>` 标签中添加这些文件之一，如下所示：
- en: HTML
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: HTML
- en: '[PRE201]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: However, this won’t work. We’ll get an error in the browser console. We have
    to reference these files in our `script.js` file and use a module bundler.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这不会起作用。我们将在浏览器控制台中收到错误。我们必须在我们的 `script.js` 文件中引用这些文件并使用模块打包器。
- en: As an example, if we only import the `bootstrap/js/dist/modal.js` file, it will
    also import the `bootstrap/js/dist/base-component.js` file and all the DOM-related
    files in the `bootstrap/js/dist/dom` folder.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们只导入 `bootstrap/js/dist/modal.js` 文件，它也将导入 `bootstrap/js/dist/base-component.js`
    文件以及 `bootstrap/js/dist/dom` 文件夹中所有与 DOM 相关的文件。
- en: If we instead only import the `bootstrap/js/dist/tooltip.js` file, it will also
    import the `bootstrap/js/dist/base-component.js` file, all the DOM-related files
    in the `bootstrap/js/dist/dom` folder, and all the necessary files from the Popper
    npm package, since the tooltip component relies on this library for positioning.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只导入 `bootstrap/js/dist/tooltip.js` 文件，它也将导入 `bootstrap/js/dist/base-component.js`
    文件，`bootstrap/js/dist/dom` 文件夹中所有与 DOM 相关的文件，以及 Popper npm 包的所有必要文件，因为工具提示组件依赖于这个库进行定位。
- en: Before we proceed, please note that we won’t make more changes to the code in
    `part-3/chapter-12/laravel-mix/setup`, but instead, make a copy of that code to
    `part-3/chapter-12/laravel-mix/optimize-js` and make our changes there. Please
    note that all the changes described in this section has already been applied to
    the code on GitHub.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，请注意，我们不会对 `part-3/chapter-12/laravel-mix/setup` 中的代码进行更多修改，而是将其复制到 `part-3/chapter-12/laravel-mix/optimize-js`
    并在那里进行修改。请注意，本节中描述的所有更改已应用于 GitHub 上的代码。
- en: 'On our website, we use all of the JavaScript components, except for Button,
    Popover, and Scrollspy (however, we still use Button as a regular component using
    HTML and CSS). Now, to optimize the usage of JavaScript files, we will add the
    following lines of code to our `script.js` file to only include the components
    we actually use:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的网站上，我们使用所有 JavaScript 组件，除了按钮、弹出框和滚动位置（然而，我们仍然使用按钮作为使用 HTML 和 CSS 的常规组件）。现在，为了优化
    JavaScript 文件的使用，我们将向我们的 `script.js` 文件添加以下代码行，仅包括我们实际使用的组件：
- en: part-3/chapter-12/laravel-mix/optimize-js/src/js/script.js
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-12/laravel-mix/optimize-js/src/js/script.js
- en: '[PRE202]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: 'As mentioned in the previous section, when we load Bootstrap 5 via a `<script>` tag,
    we use the `bootstrap` namespace when initializing JavaScript components, as follows:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，当我们通过 `<script>` 标签加载 Bootstrap 5 时，我们在初始化 JavaScript 组件时使用 `bootstrap`
    命名空间，如下所示：
- en: JavaScript
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript
- en: '[PRE211]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'Since we’re now using a bundler, the window object will not be defined, so
    we must initialize components in the following way:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在正在使用打包器，window 对象将不会被定义，因此我们必须以以下方式初始化组件：
- en: JavaScript
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript
- en: '[PRE212]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: 'Because of this, we need to make some changes to our `script.js` file. We need
    to replace the `new bootstrap.[component]` code with `new [component]` everywhere
    we’re using it. As an example, in the code where we initialize all tooltips, we
    must make the following change:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要对我们的 `script.js` 文件进行一些修改。我们需要将所有使用的地方的 `new bootstrap.[component]` 代码替换为
    `new [component]`。例如，在初始化所有工具提示的代码中，我们必须进行以下更改：
- en: part-3/chapter-12/laravel-mix/optimize-js/src/js/script.js
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-12/laravel-mix/optimize-js/src/js/script.js
- en: '[PRE213]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: Now, we can run the same Laravel Mix commands as mentioned before again.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以再次运行之前提到的相同的 Laravel Mix 命令。
- en: 'Please note, that we must also run the command:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还必须运行以下命令：
- en: '[PRE218]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: if it hasn't been run already. This command will create the `node_modules` folder
    and download all necessary dependencies (including the source code for Bootstrap
    5) to that.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它还没有运行过。此命令将创建 `node_modules` 文件夹并下载所有必要的依赖项（包括 Bootstrap 5 的源代码）到那里。
- en: Minifying our compiled CSS and bundled JavaScript
  id: totrans-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 压缩我们的编译 CSS 和打包 JavaScript
- en: 'To optimize our code even further, we want to minify the compiled CSS and bundled
    JavaScript. We can do this with Laravel Mix simply by running the following command:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步优化我们的代码，我们希望压缩编译后的 CSS 和打包的 JavaScript。我们可以通过运行以下命令使用 Laravel Mix 来实现：
- en: '[PRE219]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: The `--production` flag is used to indicate that we want to minify the compiled
    and bundled files.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`--production` 标志用于指示我们想要压缩编译和打包的文件。'
- en: Summary
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have now learned how we can optimize the compiled Bootstrap 5 CSS and JavaScript
    code. First, we learned how to optimize our stylesheet by only including the Bootstrap
    5 Sass partials we actually used and removing all the helpers and utilities that
    we didn’t use. Then, we learned how to use Node.js, npm, and Laravel Mix to set
    up a build process to automate some tasks, which helped us bundle only the JavaScript
    that our components actually used and minify both our compiled CSS and bundled
    JavaScript.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学会了如何优化编译后的 Bootstrap 5 CSS 和 JavaScript 代码。首先，我们学习了如何通过仅包含我们实际使用的 Bootstrap
    5 Sass 部分并移除所有未使用的辅助工具和实用工具来优化我们的样式表。然后，我们学习了如何使用 Node.js、npm 和 Laravel Mix 设置构建过程来自动化一些任务，这有助于我们仅打包我们的组件实际使用的
    JavaScript，并压缩我们的编译 CSS 和打包 JavaScript。
- en: Even though the methods and techniques described in this chapter don’t alter
    the look and feel of the website, they will optimize your final code and thus
    provide better performance and a faster load time for the user.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本章中描述的方法和技术不会改变网站的外观和感觉，但它们将优化您的最终代码，从而为用户提供更好的性能和更快的加载时间。
- en: Throughout this book, we have learned how to work with Bootstrap 5 in various
    new ways. From only knowing about the HTML structure and class names for the various
    Bootstrap 5 components with the default style, we have learned how to change the
    global options and the color palette, how to understand and navigate the Sass
    source code, how to customize various Bootstrap 5 elements with the use of Sass
    variables, and how to use the powerful utility API. On top of that, we have learned
    how to use Bootstrap 5 with more advanced Sass, CSS, and JavaScript features,
    and finally, how to optimize the compiled CSS and JavaScript (including using
    a module bundler). We are now well equipped as Bootstrap 5 developers to solve
    more advanced tasks and be more creative with the usage of the Bootstrap 5 source
    code.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们学习了以各种新的方式使用 Bootstrap 5。从只知道关于默认样式下各种 Bootstrap 5 组件的 HTML 结构和类名，我们学习了如何更改全局选项和调色板，如何理解并导航
    Sass 源代码，如何使用 Sass 变量自定义各种 Bootstrap 5 元素，以及如何使用强大的实用 API。在此基础上，我们还学习了如何使用更高级的
    Sass、CSS 和 JavaScript 功能与 Bootstrap 5 结合，最后学习了如何优化编译后的 CSS 和 JavaScript（包括使用模块打包器）。现在，作为
    Bootstrap 5 开发者，我们已经具备了解决更高级任务和更富有创意地使用 Bootstrap 5 源代码的能力。
- en: Thanks for reading!
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
