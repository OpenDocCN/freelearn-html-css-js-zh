- en: '*Chapter 12*: Optimizing Bootstrap 5 CSS and JavaScript Code'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’re not going to use Bootstrap 5 to create any new user interfaces
    or customize any existing ones. We won’t even look at any of the source code contained
    in the Bootstrap 5 files. Instead, we will see how we can optimize our compiled
    Bootstrap 5 CSS and JavaScript code after we have finished creating our website.
  prefs: []
  type: TYPE_NORMAL
- en: We will first concentrate on optimizing our stylesheet by only including the
    Bootstrap 5 Sass partials we actually use and removing all the helpers and utilities
    that we don’t use. Then we will use Node.js, NPM, and Laravel Mix to set up a
    build process to automate some tasks that will help us bundle only the JavaScript
    that our components actually use and minify both our compiled CSS and bundled
    JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Including the Sass partials for the used components only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing unused helpers and utilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a build process using Node.js, npm, and Laravel Mix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a module bundler to optimize JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minifying our compiled CSS and bundled JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To preview the examples, you will need a code editor and a browser. The source
    code for all code examples can be found here: [https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide](https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To compile Sass to CSS, you will need either of the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js**, if you prefer a **command-line interface** (**CLI**) using Terminal
    (Mac) or Command Prompt (Windows)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scout-App**, if you prefer a **graphical user interface** (**GUI**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code**, if you prefer to use an extension from the Visual Studio
    Code Marketplace'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All these approaches are explained in [*Chapter 2*](B17143_02_epub.xhtml#_idTextAnchor033),
    *Using and Compiling Sass*.
  prefs: []
  type: TYPE_NORMAL
- en: To use Laravel Mix, you will need **Node.js** installed on your computer and
    then follow the instructions to download the required packages from npm.
  prefs: []
  type: TYPE_NORMAL
- en: Including the Sass partials for the used components only
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will see how we can optimize our compiled CSS by only including
    the Bootstrap 5 Sass partials that are actually used by the components in our
    HTML code. On the website that we created earlier in this book, we have used all
    of the Bootstrap 5 components except for the Placeholder, Popover, and Scrollspy
    components. Scrollspy is a JavaScript-only component, so we will remove the Sass
    partials belonging to the Placeholder and Popover components. In our `styles.scss`
    file, we have a long list of `// Optional Bootstrap CSS`, which among other things
    contains the Sass partials for all components. So, this is where we want to carefully
    consider which partial files we can remove. In the following code snippet, you
    will see the long list of `// Optional Bootstrap CSS` where the lines that import
    the Sass partials for the Placeholder and Popover components have been commented
    out. You could also choose to delete those lines, but by keeping them commented
    out it’s easy to uncomment them if you add any of these components to the website
    at a later stage, and they will anyway be removed automatically when the Sass
    is compiled:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-12/website/scss/style.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: When we compile our Sass code, the compiled CSS stylesheet will now be slightly
    smaller since the CSS for the Popover and Placeholder components have been removed.
  prefs: []
  type: TYPE_NORMAL
- en: Dependencies across Sass partials
  prefs: []
  type: TYPE_NORMAL
- en: There are some dependencies across the various Sass partial files, so it might
    not be easy to simply remove a file for a specific component. Make sure that you
    test your website carefully.
  prefs: []
  type: TYPE_NORMAL
- en: Removing unused helpers and utilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The helpers and utilities of Bootstrap 5 are something that we use in addition
    to components, sometimes on specific code inside of a component, and sometimes
    as part of our own HTML code. Therefore, it can also be considered which of these
    we actually use, and make sure to not include the ones that we don’t use.
  prefs: []
  type: TYPE_NORMAL
- en: Removing unused helpers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our code for the website, we have used the following helpers: Ratio, Position,
    Visually hidden, and Stretched link. The Bootstrap 5 code for these helpers is
    imported in our `style.scss` file using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-12/website/scss/style.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This will import the `_helpers.scss` file containing `@import` statements for
    the individual helpers. The content of that file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-12/website/bootstrap/scss/_helpers.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We might now think that we simply need to uncomment the `@import` statements
    for the helpers that we don’t use, just as we did with the components in the previous
    section. This will work here and now, but if we choose to update Bootstrap 5 at
    a later point, our changes will be gone, since the `_helpers.scss` file will be
    replaced. This is because this file is part of the Bootstrap 5 source code that
    is replaced when you update Bootstrap 5\. If you know you won’t update Bootstrap
    5 at a later point or know that you will remember to make the same edits to the
    `_helpers.scss` file again after updating, you can do it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-12/website/bootstrap/scss/_helpers.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: But to do it in a better and more maintainable way, we can change our `@import`
    statement in the `styles.scss` file and import only the individual helper partial
    files that we need instead of importing the `_helpers.scss` file. So, we will
    ignore that file (even though it’s part of the Bootstrap 5 source code) and instead
    implement our own way of importing the helpers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code will then look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-12/website/scss/style.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: I have chosen to keep the unused imports in our file but have them commented
    out. Then, it’s easier to uncomment them in the future if the need arises, and
    it will anyway be removed when compiling the Sass and hence not take up any space.
    Just like the way we did with the imports of the component partial files.
  prefs: []
  type: TYPE_NORMAL
- en: Removing unused utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To remove unused utilities, we will need to take a different approach than
    what we have seen with components and helpers. We now need to use the utility
    API, which we learned about in [*Chapter 6*](B17143_06_epub.xhtml#_idTextAnchor130),
    *Understanding and Using the Bootstrap 5 Utility API*. In the `_utilities.scss`
    file of Bootstrap 5, we see a total of 80 defined utility classes that have different
    settings and values. For each of them, we can see what the class or class prefix
    will be, and we can use that to search through our code to see which ones we actually
    use. If we do this, we will see that we roughly use half of them. To be precise,
    we need to remove the following 37 utility classes that are not being used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The negative margin utilities (`negative-margin`, `negative-margin-x`, `negative-margin-y`,
    `negative-margin-top`, `negative-margin-end`, `negative-margin-bottom`, and `negative-margin-start`)
    are not included in the list, since they are disabled by default, and we haven’t
    enabled them through the `$enable-negative-margins` option in our own Sass code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To remove all of the unused utilities so that they are not generated through
    the utility API, we use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-12/website/scss/_utilities.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: After compiling the Sass code, the resulting CSS file (in the expanded Sass
    output format) will now be 1,513 lines smaller, which is equal to 25,485 bytes
    saved.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying used utilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another way to optimize the usage of utilities is to specify the utilities
    that are *being used* instead. There are a total of 39 utilities being used in
    our project, and we can generate just these by using the `map-get-multiple()`
    Sass function provided by Bootstrap 5 in the `_functions.scss` file. With this
    function, we can get multiple keys from a Sass map and thus overwrite the `$utilities`
    variable as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: SCSS
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: No matter whether you choose to specify which utilities to remove or which are
    being used, the result will be the same.
  prefs: []
  type: TYPE_NORMAL
- en: Trimming used utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to go that extra mile, it’s also possible to trim any used utilities.
    By that, I mean that we remove any variations of a utility that we are not using
    by editing the values of that utility.
  prefs: []
  type: TYPE_NORMAL
- en: 'Say that we want to edit the `text-align` utility since we are only using the
    `.text-center` class in our project. So, we want to remove the `.text-start` and
    `.text-end` variations as well as disable the responsive variations of this utility.
    To accomplish this, we can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: SCSS
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will only generate the `.text-center` class, which is the only one we
    use for text alignment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, this can also be done by using the following code, where we
    overwrite the code for the text alignment utility and, therefore, must also specify
    `property` and `class`:'
  prefs: []
  type: TYPE_NORMAL
- en: SCSS
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: This was just an example. I have not used this method of trimming used utilities
    for the project, since it’s a rather big task. But if you go that extra mile,
    it will be possible to save some lines and bytes of code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will set up a build tool using Node.js, npm, and Laravel
    Mix. We will do that to be able to optimize our usage of JavaScript and automate
    tasks for Sass compiling and general minifying.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a build process using Node.js, npm, and Laravel Mix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B17143_02_epub.xhtml#_idTextAnchor033)*,* *Using and Compiling
    Sass*, we already learned how to use Node.js and npm to set up a script that would
    compile our Sass to CSS. In this setup, we will use Laravel Mix, which is a wrapper
    around Webpack. In short, Webpack is a module bundler that prepares JavaScript
    and assets for the browser. By using Laravel Mix, we get a simple API for setting
    the Webpack configuration without any prior experience with Webpack.
  prefs: []
  type: TYPE_NORMAL
- en: If you haven’t already installed Node.js, then please go back and take a look
    at [*Chapter 2*](B17143_02_epub.xhtml#_idTextAnchor033) and the *Compiling Sass*
    section. Now, here’s a step-by-step guide on how to set up Laravel Mix using Node.js
    and npm. This will, in the end, generate a `package.json` file, a Laravel Mix
    configuration file, as well as a folder, and some empty files.
  prefs: []
  type: TYPE_NORMAL
- en: Skip setting up Laravel Mix
  prefs: []
  type: TYPE_NORMAL
- en: If you want, you can choose to skip the manual setup of Laravel Mix and simply
    use the Laravel Mix template provided with this book in the code related to this
    chapter. Then, simply go to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start setting up Laravel Mix, we must open the Terminal (Mac) or
    Command Prompt (Windows) and navigate to our project folder. Then, we can follow
    these eight steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate an empty npm project with the default settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the latest version of Bootstrap 5:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--save-dev` is used to specify that it is a development dependency. Change
    the version number if you want another version.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Popper, which is a dependency for the Dropdown, Popover, and Tooltip
    components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install Laravel Mix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the `webpack.mix.js` file in the root folder of the project. This is
    a configuration file for Laravel Mix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the root folder of the project, create the `src` folder with the empty `js`
    and `scss` folders inside. Create the `script.js` file in the `js` folder and
    the `style.scss` file in the `scss` folder. The file and folder structure should
    look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will put some code in those files in just a moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the configuration file (`webpack.mix.js`) to import
    `mix` and define our build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Laravel Mix has now been instructed to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Bundle the JavaScript in `src/js/script.js` and output it to the `js` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile the Sass in `src/scss/style.scss` and output it to the `css` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to install additional dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command should only be necessary to run once.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Laravel Mix template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you haven’t followed the manual steps to set up Laravel Mix, you can also
    grab the Laravel Mix template from the `part-3/chapter-12/laravel-mix/template`
    folder. In this case, you should simply place the content of that template folder
    inside your project folder and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: This will install Bootstrap 5, Popper, and Laravel Mix, as well as all dependencies.
    You don’t have to run the `npx mix` command to install additional dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Using Laravel Mix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The code in our project should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: Be aware that we haven’t put any code inside the `script.js` and `style.scss`
    files just yet, and neither have we added any HTML files or other assets to the
    project. We will do that in just a moment. First, let’s take a look at two of
    the most useful commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'To trigger the Webpack build, which we defined in the `webpack.mix.js` file,
    we simply run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: This will now compile the files and build the bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'To watch the filesystem for changes and automatically recompile the files and
    rebuild the bundle, we can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Webpack will now run every time we save changes to a JavaScript or Sass file
    in our project folder.
  prefs: []
  type: TYPE_NORMAL
- en: No code was added to `script.js` and `style.scss` yet
  prefs: []
  type: TYPE_NORMAL
- en: The Laravel Mix commands currently don’t produce any results, since we haven’t
    added any code to our `script.js` and `style.scss` files in the `src` folder.
    We will do that now.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the website code to the build process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have to make some changes to our project, since it's not compatible with
    the way we want to use Laravel Mix. Because of this, we won’t make changes to
    the existing project in `part-3/chapter-12/website`, but instead, make a copy
    to `part-3/chapter-12/laravel-mix/setup` and make our changes there. . Please
    note that all the changes described in this section has already been applied to
    the code on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps we need to make in order to restructure and update our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src` **folder**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, we have to move our `js` and `scss` folder into the new `src` folder
    and delete the `bootstrap.bundle.min.js` file. The Bootstrap 5 JavaScript code
    will be compiled and bundled by Laravel Mix and then placed in another folder.
  prefs: []
  type: TYPE_NORMAL
- en: '**Update HTML**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since we have now deleted the `bootstrap.bundle.min.js` file in the previous
    step, we can now delete the following line of code from all HTML files:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the files that previously had only the `bootstrap.bundle.min.js` file
    and not the `script.js` file, we must add this file, so that all HTML pages, in
    the end, have only the following `script` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: 'So, the bottom part of each HTML file should look like this with few exceptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '**Update Sass**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to update the file path of the imports of the Bootstrap 5 Sass
    partials in the `style.scss` file. We need to replace `../bootstrap/scss/` with
    `~bootstrap/scss/` (or simply `../` with `~`) to make sure we get the source code
    directly from the `node_modules` folder. The tilde character, `~`, is a reference
    to that folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our top part of the `style.scss` file should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-12/laravel-mix/website/src/scss/style.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: We will keep the rest of our Sass files untouche4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Update JavaScript**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we load Bootstrap 5 via a `<script>` tag, we use the `bootstrap` namespace
    when initializing JavaScript components as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: 'To import the Bootstrap 5 JavaScript source code to make it work with our own
    current JavaScript code, we must do it in the following way at the top of our
    `script.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-12/laravel-mix/setup/src/js/script.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: This will import all Bootstrap 5 JavaScript source files, which is similar to
    what we had before when we used the `bootstrap.bundle.min.js` file in a `<script>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to actually trigger the Webpack build, compile the Sass, and bundle the
    JavaScript, we can use the Laravel Mix commands from before to run it once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we can use the following command to run it every time we save changes to
    a JavaScript or Sass file in our project folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: We have now learned how to set up a build process using Node.js, npm, and Laravel
    Mix. However, we are importing all of the JavaScript code even though we don’t
    use it all. Next up, we will see how we can optimize the JavaScript import.
  prefs: []
  type: TYPE_NORMAL
- en: Using a module bundler to optimize JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can optimize our usage of JavaScript files when using a module bundler. Instead
    of importing all the Bootstrap 5 JavaScript source files like we just did before,
    we can import only the ones we need.
  prefs: []
  type: TYPE_NORMAL
- en: In the source code of Bootstrap 5, we have the `bootstrap/js/dist` folder, which
    contains the source code for the individual JavaScript components, as well as
    the `base-component.js` file and the `dom` folder, with some more general code
    related to working with the DOM (the Document Object Model of the page).
  prefs: []
  type: TYPE_NORMAL
- en: 'We might imagine that we can just add one of these files in a `<script>` tag
    in our HTML as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: However, this won’t work. We’ll get an error in the browser console. We have
    to reference these files in our `script.js` file and use a module bundler.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, if we only import the `bootstrap/js/dist/modal.js` file, it will
    also import the `bootstrap/js/dist/base-component.js` file and all the DOM-related
    files in the `bootstrap/js/dist/dom` folder.
  prefs: []
  type: TYPE_NORMAL
- en: If we instead only import the `bootstrap/js/dist/tooltip.js` file, it will also
    import the `bootstrap/js/dist/base-component.js` file, all the DOM-related files
    in the `bootstrap/js/dist/dom` folder, and all the necessary files from the Popper
    npm package, since the tooltip component relies on this library for positioning.
  prefs: []
  type: TYPE_NORMAL
- en: Before we proceed, please note that we won’t make more changes to the code in
    `part-3/chapter-12/laravel-mix/setup`, but instead, make a copy of that code to
    `part-3/chapter-12/laravel-mix/optimize-js` and make our changes there. Please
    note that all the changes described in this section has already been applied to
    the code on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'On our website, we use all of the JavaScript components, except for Button,
    Popover, and Scrollspy (however, we still use Button as a regular component using
    HTML and CSS). Now, to optimize the usage of JavaScript files, we will add the
    following lines of code to our `script.js` file to only include the components
    we actually use:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-12/laravel-mix/optimize-js/src/js/script.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: 'As mentioned in the previous section, when we load Bootstrap 5 via a `<script>` tag,
    we use the `bootstrap` namespace when initializing JavaScript components, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we’re now using a bundler, the window object will not be defined, so
    we must initialize components in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: 'Because of this, we need to make some changes to our `script.js` file. We need
    to replace the `new bootstrap.[component]` code with `new [component]` everywhere
    we’re using it. As an example, in the code where we initialize all tooltips, we
    must make the following change:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-12/laravel-mix/optimize-js/src/js/script.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can run the same Laravel Mix commands as mentioned before again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note, that we must also run the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: if it hasn't been run already. This command will create the `node_modules` folder
    and download all necessary dependencies (including the source code for Bootstrap
    5) to that.
  prefs: []
  type: TYPE_NORMAL
- en: Minifying our compiled CSS and bundled JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To optimize our code even further, we want to minify the compiled CSS and bundled
    JavaScript. We can do this with Laravel Mix simply by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: The `--production` flag is used to indicate that we want to minify the compiled
    and bundled files.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have now learned how we can optimize the compiled Bootstrap 5 CSS and JavaScript
    code. First, we learned how to optimize our stylesheet by only including the Bootstrap
    5 Sass partials we actually used and removing all the helpers and utilities that
    we didn’t use. Then, we learned how to use Node.js, npm, and Laravel Mix to set
    up a build process to automate some tasks, which helped us bundle only the JavaScript
    that our components actually used and minify both our compiled CSS and bundled
    JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Even though the methods and techniques described in this chapter don’t alter
    the look and feel of the website, they will optimize your final code and thus
    provide better performance and a faster load time for the user.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, we have learned how to work with Bootstrap 5 in various
    new ways. From only knowing about the HTML structure and class names for the various
    Bootstrap 5 components with the default style, we have learned how to change the
    global options and the color palette, how to understand and navigate the Sass
    source code, how to customize various Bootstrap 5 elements with the use of Sass
    variables, and how to use the powerful utility API. On top of that, we have learned
    how to use Bootstrap 5 with more advanced Sass, CSS, and JavaScript features,
    and finally, how to optimize the compiled CSS and JavaScript (including using
    a module bundler). We are now well equipped as Bootstrap 5 developers to solve
    more advanced tasks and be more creative with the usage of the Bootstrap 5 source
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading!
  prefs: []
  type: TYPE_NORMAL
