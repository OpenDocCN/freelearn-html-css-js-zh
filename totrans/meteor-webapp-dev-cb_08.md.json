["```js\n$ meteor create npmdirect\n$ cd npmdirect\n$ rm npmdirect.*\n$ mkdir {client,server,private,both}\n\n```", "```js\n$ meteor add meteorhacks:npm\n$ meteor\n\n```", "```js\n    {\n     \"highlight.js\" : \"8.4.0\"\n    }\n    ```", "```js\n    npm-container: updating npm dependencies -- highlight.js...\n    => Meteor server restarted\n\n    ```", "```js\n    Meteor.methods({\n      highlight : function(){\n        return setC();\n      }\n    });\n\n    var setC = function(){\n      var hLight = Meteor.npmRequire('highlight.js');\n      var code = Assets.getText('code.txt');\n      code = hLight.highlight('javascript',code,true);\n      return code.value;\n    };\n    ```", "```js\n    <body>\n    {{> code}}\n    </body>\n    <template name=\"code\">\n      <pre class=\"hljs\">{{{highlighted}}}</pre>\n    </template>\n    ```", "```js\n    Template.code.helpers({\n      highlighted : function(){\n        return Session.get('code');\n      }\n    });\n\n    Meteor.startup(function(){\n      Meteor.call('highlight', function(e,d){\n        if (e) return;\n          Session.set('code',d);\n      });\n    });\n    ```", "```js\nvar hLight = Meteor.npmRequire('highlight.js');\n```", "```js\nvar code = Assets.getText('code.txt');\ncode = hLight.highlight('javascript',code,true);\nreturn code.value;\n```", "```js\n$ meteor create d3sample\n$ cd d3sample\n$ rm d3sample.*\n$ mkdir {client,server,both}\n$ meteor add d3js:d3\n$ meteor\n\n```", "```js\n    Letters = new Mongo.Collection('letters');\n    ```", "```js\n    Meteor.startup(function(){\n      if (!Letters.find().fetch().length){\n        Letters.insert({letter:'A',frequency:.08167});\n        Letters.insert({letter:'B',frequency:.01492});\n        Letters.insert({letter:'C',frequency:.02782});\n        Letters.insert({letter:'D',frequency:.04253});\n        Letters.insert({letter:'E',frequency:.12702});\n        Letters.insert({letter:'F',frequency:.02288});\n        Letters.insert({letter:'G',frequency:.02015});\n        Letters.insert({letter:'H',frequency:.06094});\n        Letters.insert({letter:'I',frequency:.06966});\n        Letters.insert({letter:'J',frequency:.00153});\n        Letters.insert({letter:'K',frequency:.00772});\n        Letters.insert({letter:'L',frequency:.04025});\n        Letters.insert({letter:'M',frequency:.02406});\n        Letters.insert({letter:'N',frequency:.06749});\n        Letters.insert({letter:'O',frequency:.07507});\n        Letters.insert({letter:'P',frequency:.01929});\n        Letters.insert({letter:'Q',frequency:.00095});\n        Letters.insert({letter:'R',frequency:.05987});\n        Letters.insert({letter:'S',frequency:.06327});\n        Letters.insert({letter:'T',frequency:.09056});\n        Letters.insert({letter:'U',frequency:.02758});\n        Letters.insert({letter:'V',frequency:.00978});\n        Letters.insert({letter:'W',frequency:.02360});\n        Letters.insert({letter:'X',frequency:.00150});\n        Letters.insert({letter:'Y',frequency:.01974});\n        Letters.insert({letter:'Z',frequency:.00074});\n      }\n    });\n    ```", "```js\n    Meteor.methods({\n      updateFrequency : function(letter,frequency){\n        Letters.update({letter:letter},\n          {$set:{frequency:frequency}});\n      }\n    });\n    ```", "```js\n    <body>\n      {{> diagram}}\n    </body>\n\n    <template name=\"diagram\">\n      <svg class=\"chart\"></svg>\n    </template>\n    ```", "```js\n    .bar {\n      fill: steelblue;\n    }\n    .bar:hover {\n      fill: brown;\n    }\n    .axis {\n      font: 10px sans-serif;\n    }\n    .axis path,\n    .axis line {\n      fill: none;\n      stroke: #000;\n      shape-rendering: crispEdges;\n    }\n    .x.axis path {\n      display: none;\n    }\n    ```", "```js\n    Template.diagram.rendered = function(){\n     //we wrap everything in the Template.rendered() callback,\n     // so that we don't interfere with Blaze\n      var margin = {top: 20, right: 20, bottom: 30, left: 40},\n        width = 960 - margin.left - margin.right,\n        height = 500 - margin.top - margin.bottom;\n\n     //We are going to set the domains for x an y immediately\n     //(assuming the alphabet isn't going to change)\n     x = d3.scale.ordinal()\n      .domain('ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split(''))\n      .rangeRoundBands([0, width], .1);\n\n     //ALSO: note that we *removed* the 'var' declarations,\n     //so that x and y are global / accessible\n     y = d3.scale.linear()\n      .domain([0,0.15])\n      .range([height, 0]);\n\n      var xAxis = d3.svg.axis()\n      .scale(x)\n      .orient(\"bottom\");\n\n      var yAxis = d3.svg.axis()\n      .scale(y)\n      .orient(\"left\")\n      .ticks(10, \"%\");\n\n     // We are moving the axes creation (and SVG init)\n     // to be *outside* our autorun()\n      var svg = d3.select(\"body\").append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(xAxis);\n\n      svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .call(yAxis)\n      .append(\"text\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"y\", 6)\n      .attr(\"dy\", \".71em\")\n      .style(\"text-anchor\", \"end\")\n      .text(\"Frequency\");\n\n      //We move D3.js rendering inside Tracker.autorun()\n      this.autorun(function(){\n        // Instead of reading data from a static file,\n        // we access the Letters collection\n        var data = Letters.find().fetch();\n        if (!data.length) return;\n\n        // To use D3.js's built-in update tracking,\n        // we need access to our d3.selectAll() object..\n        var bars = svg\n        .selectAll(\".bar\")\n        .data(data, function(d){return d._id;});\n\n        // On new (when initializing), we append and animate\n        bars.enter()\n        .append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", function(d) { return x(d.letter); })\n        .attr(\"width\", x.rangeBand())\n     .attr(\"height\",0)\n     .attr(\"y\", height)\n     .transition()\n        .attr(\"y\", function(d) { return y(d.frequency); })\n        .attr(\"height\", function(d) { return height - y(d.frequency); });\n\n        // On change, we just animate to the new position\n        bars\n        .transition()\n        .duration(200)\n        .ease(\"sin-out\")\n        .attr(\"y\", function(d) { return y(d.frequency); })\n        .attr(\"height\", function(d) { return height -       y(d.frequency); });\n\n      });\n    };\n    ```", "```js\n    });//<--- end of autorun()\n\n    // everything's set! let's randomize 5 times / second...\n     Meteor.setInterval(randomize,200);\n\n    };//<-- end of rendered()\n    ```", "```js\n    // Our randomize function\n    randomize = function(){\n      // get a random position between 0-25\n      var ranLetter = ~~(Math.random()*26),\n      // and a random frequency between 0-15%\n        ranFreq = (Math.random()*0.15);\n\n      // get the actual character\n      ranLetter = x.domain()[ranLetter];\n\n    // update the frequency using a server call,\n    // because it's easier than tracking down the _id\n      Meteor.call('updateFrequency',ranLetter,ranFreq);\n    };\n    ```", "```js\n$ meteor create polymersample\n$ cd polymersample\n$ rm polymersample.*\n$ mkdir -p client/templates/init\n$ mkdir {both,server}\n$ mkdir -p public/components\n\n```", "```js\n$ touch .bowerrc\n$ touch client/imports.html\n$ touch client/main.html\n$ touch client/styles.css\n$ touch client/templates/tmpl-authors.html\n$ touch client/templates/tmpl-authors.js\n$ touch client/templates/tmpl-search.html\n$ touch client/templates/tmpl-search.js\n$ touch client/templates/init/head.html\n$ touch both/model.js\n$ touch server/server.js\n\n```", "```js\n$ npm install -g bower\n\n```", "```js\nsudo npm install -g bower.\n\n```", "```js\n{\"directory\":\"public/components/\"}\n```", "```js\n$ bower init\n\n```", "```js\n? name: Polymer Sample\n? version: 0.0.1\n? description: \n? main file: \n? what types of modules does this package expose?: \n? keywords: \n? authors: \n? license: none\n? homepage: \n? set currently installed components as dependencies?: No\n? add commonly ignored files to ignore list?: Yes\n? would you like to mark this package as private which prevents it from being accidentally published to the registry?: Yes\n\n```", "```js\n$ bower install polymer --save\n$ bower install polymer/core-elements --save\n$ bower install polymer/paper-elements --save\n$ bower install polymer-github-card --save\n\n```", "```js\n$ meteor add voodoohop:masonrify\n$ meteor add meteorhacks:inject-initial\n$ meteor add differential:vulcanize\n\n```", "```js\nMeteor.startup(function(){\n  Inject.rawModHtml('addUnresolved',function(html){\n    return html = html.replace('<body>', '<body unresolved>');\n  })\n});\n```", "```js\n<head>\n  <script src=\"img/webcomponents.js\"></script>\n  <title>github authors</title>\n</head>\n```", "```js\n<!-- Components -->\n<link rel=\"import\" href=\"/components/polymer/polymer.html\">\n\n<!-- Styles -->\n<link rel=\"import\" href=\"/components/font-roboto/roboto.html\">\n```", "```js\n    html,body {\n      height: 100%;\n      margin: 0;\n      font-family: 'RobotoDraft', sans-serif;\n    }\n    .container {\n      width: 80%;\n      margin: 50px auto;\n    }\n    div.sText {\n      display:inline-block;\n      width: 20rem;\n    }\n    div.sBtn {\n      display: inline-block;\n      width: 5rem;\n      vertical-align: text-top;\n    }\n    paper-button.colored {\n      color: white);\n    }\n    paper-button[raised].colored {\n      background: rgb(66, 133, 244);\n      color: white;\n    }\n    ```", "```js\n    <link rel=\"import\" \n    href=\"/components/polymer-github-card/dist/polymer-github-card.html\">\n    ```", "```js\n    <body>\n      <div class=\"container\">\n        <polymer-github-card user=\"meteor\"></polymer-github-card>\n      </div>\n    </body>\n    ```", "```js\n    Authors = new Mongo.Collection('authors');\n    ```", "```js\n    <template name=\"authors\">\n      {{#masonryContainer columnWidth=265 gutter=5 transitionDuration=\"0.2s\" id=\"MasonryContainer\" }}\n        {{#each authors}}\n          {{> authorCard}}\n        {{/each}}\n      {{/masonryContainer}}\n    </template>\n\n    <template name=\"authorCard\">\n      {{#masonryElement \"masonryContainer\"}}\n        <div>\n          <polymer-github-card user=\"{{userid}}\">\n          </polymer-github-card>\n        </div>\n      {{/masonryElement}}\n    </template>\n    ```", "```js\n    Template.authors.helpers({\n      authors: function(){\n        return Authors.find().fetch();\n      }\n    });\n    ```", "```js\n    Template.authors.events({\n      'dblclick polymer-github-card': function(e){\n        Authors.remove({_id:this._id});\n      }\n    });\n    ```", "```js\n    <body>\n     <div class=\"container\">\n     {{> authors}}\n     </div>\n    </body>\n    ```", "```js\n    > Authors.insert({userid:'meteor'})\n    > Authors.insert({userid:'glasser'})\n\n    ```", "```js\n    <!-- Components -->\n    <link rel=\"import\" href=\"/components/polymer/polymer.html\">\n    <link rel=\"import\" href=\"/components/paper-ripple/paper-ripple.html\">\n    <link rel=\"import\" href=\"/components/paper-shadow/paper-shadow.html\">\n    <link rel=\"import\" href=\"/components/paper-input/paper-input.html\">\n    <link rel=\"import\" href=\"/components/paper-button/paper-button.html\">\n    <link rel=\"import\" href=\"/components/polymer-github-card/dist/polymer-github- card.html\">\n\n    <!-- Styles -->\n    <link rel=\"import\" href=\"/components/font-roboto/roboto.html\">\n    ```", "```js\n    <template name=\"search\">\n      <div class=\"sText\">\n        <paper-input-decorator id=\"searchText\"\n          floatingLabel\n          label=\"find an author\">\n          <input is=\"core-input\" id=\"sInput\">\n        </paper-input-decorator>\n      </div>\n      <div class=\"sBtn\">\n        <paper-button raised class=\"colored\" role=\"button\" tabindex=\"0\">\n          search\n          </paper-button>\n      </div>\n    </template>\n    ```", "```js\n    Template.search.events({\n      'keypress #sInput' : function(e){\n        if (e.keyCode!=13) return;\n        addAuthor();\n      },\n      'click paper-button': function(e){\n        addAuthor();\n      }\n    });\n\n    function addAuthor(){\n      var sInput = $('#sInput'),\n          sVal = sInput.val();\n      sInput.blur();\n      if (!sVal || (Authors.findOne({userid:sVal}))) return;\n      sInput.val('');\n      Authors.insert({userid:sVal});\n    }\n    ```", "```js\n    <body>\n     <div class=\"container\">\n     {{> search}}\n     </div>\n      <div class=\"container\">\n        {{> authors}}\n      </div>\n    </body>\n    ```", "```js\n<template name=\"authors\">\n  ...\n {{#each authors}}\n    {{> authorCard}}\n {{/each}}\n  ...\n</template>\n\n<template name=\"authorCard\">\n  ...\n    <polymer-github-card user=\"{{userid}}\">\n    </polymer-github-card>\n  ...\n</template>\n```", "```js\nTemplate.authors.events({\n  'dblclick polymer-github-card': function(e){\n    Authors.remove({_id:this._id});\n  }\n});\n```"]