["```js\nimport crypto from 'crypto';\nconst hash = crypto.createHash('sha256');\nhash.update('Hello World');\nconsole.log(hash.digest('hex'));\n// a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e\n```", "```js\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n f76a47616ceb47b9766cb7182ec6b53100192349de6a8aebb11f3abce045748f  node-v20.11.0-aix-ppc64.tar.gz\n...\n dce7cd4b62a721d783ce961e9f70416ac63cf9cdc87b01f6be46540201333b1e  win-x86/node_pdb.zip\n-----BEGIN PGP SIGNATURE-----\niQGzBAEBCA...aig9KO/s=\n=B/OP\n-----END PGP SIGNATURE-----\n```", "```js\n    MONGODB_URI=mongodb://localhost:27017/whispering-database\n    PORT=3000\n    SALT_ROUNDS=10\n    JWT_SECRET=Tu1fo3mO0PcAvjq^q3wQ24BXNI8$9R\n    Run npm run infra:stop && npm run infra:start.\n    ```", "```js\nfetch('/login', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        username,\n        password\n    })\n})\n.then(response => {\n    if(response.status !== 200) {\n        throw new Error(\"Invalid credentials\")\n    }\n    return response.json()\n})\n.then(({accessToken}) => {\n    localStorage.setItem('accessToken', accessToken);\n    window.location.href = '/';\n})\n```", "```js\nconst fetchAllWhispers = () => fetch('http://localhost:3000/api/v1/whisper', {\n    headers: {Authentication: `Bearer ${accessToken}`}\n}).then((response) => response.json())\n```", "```js\n`<article data-id=\"${whisper.id}\">\n    <div class=\"actions\" ${controlEdition(whisper, user)}>\n        <button data-action=\"edit\"></button>\n        <button data-action=\"delete\"></button>\n    </div>\n</article>`\n```", "```js\nconst controlEdition = (whisper, user) => {\n    if(whisper.author.id === user.id) {\n        return ''\n    } else {\n        return 'style=\"display:none;\"'\n    }\n}\n```", "```js\nconst userSchema = new mongoose.Schema({\n  //...\n  password: {\n    type: String,\n    required: [true, 'Password is required'],\n    minlength: [8, 'Password must be at least 8 characters long'],\n    validate: {\n      validator: checkPasswordStrength\n    }\n  }\n  //...\n})\n```", "```js\nexport function checkPasswordStrength(password) {\n   const strengthRegex = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/\n   return strengthRegex.test(password)\n}\n```", "```js\nconst whisperSchema = new mongoose.Schema({\n  author: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  message: String,\n  updatedDate: {\n    type: Date,\n    default: Date.now\n  },\n  creationDate: {\n    type: Date,\n    default: Date.now\n  }\n})\n```", "```js\nconst getAll = () => Whisper.find().populate('author', 'username')\nconst getById = id => Whisper.findById({ _id: id }).populate('author', 'username')\nconst create = async (message, authorId ) => {\n  const whisper = new Whisper({ message, author: authorId })\n  await whisper.save()\n  return whisper\n}\n```", "```js\nuserSchema.pre('save', async function (next) {\n  const user = this\n  if (user.isModified('password')) {\n    const salt = await bcrypt.genSalt()\n    user.password = await bcrypt.hash(user.password, salt)\n  }\n  next()\n})\n```", "```js\nuserSchema.methods.comparePassword = async function (candidatePassword) {\n  const user = this\n  return await bcrypt.compare(candidatePassword, user.password)\n}\n```", "```js\nexport function generateToken (data) {\n   return jwt.sign({\n      data: data\n    }, process.env.JWT_SECRET, { expiresIn: '1h' })\n}\n```", "```js\nexport function requireAuthentication (req, res, next) {\n   const token = req.headers.authentication\n   if (!token) {\n      res.status(401).json({ error: 'No token provided' })\n      return\n   }\n   try {\n      const accessToken = token.split(' ')[1]\n      const decoded = jwt.verify(accessToken, process.env.JWT_SECRET)\n      req.user = decoded.data\n      next()\n   } catch (err) {\n      res.status(401).json({ error: 'Invalid token' })\n   }\n}\n```", "```js\n    app.get('/login', (req, res) => {\n      res.render('login')\n    })\n    ```", "```js\n    app.post('/login', async (req, res) => {\n      try {\n        const { username, password } = req.body\n        const foundUser = await user.getUserByCredentials(username, password)\n        const accessToken = generateToken({ username, id: foundUser._id})\n        res.json({ accessToken})\n      } catch ( err ){\n        res.status(400).json({ error: err.message })\n      }\n    })\n    ```", "```js\n    app.get('/signup', (req, res) => {\n      res.render('signup')\n    })\n    ```", "```js\n    app.post('/signup', async (req, res) => {\n      try {\n        const { username, password, email } = req.body\n        const newUser = await user.create(username, password, email)\n        const accessToken = generateToken({ username, id: newUser._id})\n        res.json({ accessToken})\n      } catch ( err ){\n        res.status(400).json({ error: err.message })\n      }\n    })\n    ```", "```js\n    app.put('/api/v1/whisper/:id', requireAuthentication, async (req, res) => {\n      const { message } = req.body\n      const id = req.params.id\n      if (!message) {\n        res.sendStatus(400)\n        return\n      }\n      const storedWhisper = await whisper.getById(id)\n      if (!storedWhisper) {\n        res.sendStatus(404)\n        return\n      }\n      if(storedWhisper.author.id !== req.user.id) {\n        res.sendStatus(403)\n        return\n      }\n      await whisper.updateById(id, message)\n      res.sendStatus(200)\n    })\n    ```", "```js\nit('Should return a 401 when the user is not authenticated', async () => {\n  const response = await supertest(app)\n  .delete(`/api/v1/whisper/${existingId}`)\n  expect(response.status).toBe(401)\n  expect(response.body.error).toBe('No token provided')\n})\n```", "```js\nit('Should return a 403 when the user is not the author', async () => {\n  const response = await supertest(app)\n  .delete(`/api/v1/whisper/${existingId}`)\n  .set('Authentication', `Bearer ${secondUser.token}`)\n  expect(response.status).toBe(403)\n})\n```"]