- en: Extending Ionic with Angular Building Blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following tasks related to creating custom
    components, directives, and filters with Angular:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom pizza ordering component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom username input directive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom pipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a shared service to provide data to multiple pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reusing an existing page as an HTML element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of Ionic's out-of-the-box features are actually prebuilt components. In
    this section, you will learn how to create your own custom component using the
    HTML template, which contains Ionic components as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Components actually define Angular. A component is no more than just a class
    with self-describing features. For example, `<ul>` is a component that you are
    already familiar with. Previously, you used various Ionic components, such as
    `<ion-list>` and `<ion-item>`. A component is a decorator (that is, `@Component`)
    to add metadata to a class to describe the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**selector**: This is the name that is to be used in the DOM (for example,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<my-component>`)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**template or templateUrl**: This refers to the way the component is rendered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**directives**: This refers to a list of directive dependencies you plan to
    use inside'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the component
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**providers**: This is a list of providers (that is, services) you plan to
    use inside'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the component
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Of course, there are many other options, but the preceding four options are
    the most common ones.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom pizza ordering component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will build an app to demonstrate a custom component with
    its private variables and template. Observe the following screenshot of a pizza
    ordering component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75111aef-b788-40a9-b6c3-b46b086ab9ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The user will not notice which area is part of the page, as opposed to being
    a self-contained component. Your custom component here is the only area where
    the list is *listening* to the Vegetarian check box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04de2bf0-8597-40cb-9e71-f79f091c1646.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This app example could work either in a browser or on a physical device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `MyComponent` app using the `blank` template, as shown, and go
    into the `MyComponent` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `./src/pages/home/home.html` file and replace the content with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is your root page containing `<my-component>`, which will be defined later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./app/pages/home/home.ts` for editing globally with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You simply have to declare `MyComponent` as a dependency. A component is basically
    just a directive with a template, (assuming you are familiar with the directive
    concept of Angular 1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create the component by first creating a directive, as illustrated
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `foo.ts` file in the `components` directory that you just created,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `foo.html` in the `./src/components` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify `./src/app/app.module.ts`, as illustrated, so that you can declare `MyComponent`.
    Observe the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to your Terminal and run the app using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may wonder why it''s necessary to create a component just to toggle a list
    of pizza topping options. The answer is that this is just a demonstration of how
    you can compartmentalize your app using a component. The key things that you have
    done are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You created a custom component, called `<my-component>`, which can be used anywhere,
    including outside your app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data within your component is completely private. This means that nobody
    else can access it without calling a method within your component's class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can add or change behaviors within your component without impacting on other
    areas outside the component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create a component, you need to ensure that you import the `@Component`
    decorator, as shown, from Angular itself (and not from Ionic):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In your `component` template, everything is local to what is inside the `component`
    class. So, you can bind the click event using `click`, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Just as in Angular 1, you need to use `[(ngModel)]` to declare that you want
    `data.myToggle` to be your model. The `[(..)]` part is to tell Angular 2 that
    this is a two-way binding.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two lists of pizza toppings. The first one is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The second list of pizza toppings is as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: To toggle the visibility of each list based on the `data.myToggle` model, you
    can use `*ngIf`, which is very similar to `ng-if` from Angular 1.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To see more information about components in the Angular documentation, you can
    visit [https://angular.io/docs/ts/latest/guide/architecture.html#!#component](https://angular.io/docs/ts/latest/guide/architecture).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom username input directive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since you have gone through the process of creating a component in the preceding
    section, you may wonder what the difference is between a component and a directive.
    If you have some experience with Angular 1, you may notice that it had no definition
    of a component. Starting in Angular 2, there are the following three kinds of
    directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Kind** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Components | They have a template and a class associated with the component
    (that is, `ion-input`) |'
  prefs: []
  type: TYPE_TB
- en: '| Structural directives | They change the DOM structure within the scope of
    where it is (that is, `*ngIf` or `*ngFor`) |'
  prefs: []
  type: TYPE_TB
- en: '| Attribute directives | They change the appearance of the current DOM by intercepting
    its display or events |'
  prefs: []
  type: TYPE_TB
- en: 'You may have a mix of both structural and attribute characteristics in the
    same directive. In this section, you will learn how to create an attribute directive
    that can prevent certain characters from being input in the Username, as well
    as showing another DOM node (where it says You are typing username) by toggling
    its visibility. Observe the following screenshot of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d07ca37a-84fa-43ec-adaf-ca62673defe4.png)'
  prefs: []
  type: TYPE_IMG
- en: The GO button is there just for cosmetic purposes, and you will not need to
    write any code for it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This app example could work either in a browser or on a physical device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Observe the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `MyIonicInputDirective` app using the `blank` template, as shown,
    and go into the `MyIonicInputDirective` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `./src/app/pages/home/home.html` file and replace the content with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned earlier, the GO button is just an example of the new floating button
    feature from Ionic. All you need to do is include `bottom` and `center` in order
    to position it. These are actually good examples of attribute directives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `home.ts`, in the same folder as in the preceding step, to edit and insert
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `./src/directives` folder, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `my-ionic-input.ts` file in the `directives` folder and copy in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Open and edit `./src/app/app.module.ts` to declare your new directive, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to your Terminal and run the app, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `homepage` template (`home.html`) is very typical with `ion-list` and `ion-item`,
    which contain your input elements. However, there are two important things to
    take note of. Firstly, there is an attribute, called `myIonicInput`, in the `ion-input`
    component. Observe the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Secondly, the `myStyles` object is now used to toggle the visibility of the
    `<p>` element,
  prefs: []
  type: TYPE_NORMAL
- en: 'as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This `myStyles` object is actually a `private` variable in your `HomePage`
    class in the `home.ts` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: With TypeScript, you could assign a type (that is, an object) to a variable
    with a default value. You may also note that `MyIonicInputDirective` should be
    declared for a dependency to be injected into the template directives.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a basic directive, you must import at least `Directive` and `ElementRef`
    in order to manipulate the DOM. However, since this `Directive` has input (that
    is, `myStyles`), you should also import `Input` in your `my-ionic-input.ts`, as
    illustrated in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You have `selector` and `host` metadata in your directive, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `myIonicInput` selector will be queried from the DOM and will trigger *actions*
    on that DOM node. For event detection on the DOM, you have to map the event name
    to the `class` method. For example, the `mouseenter` event will trigger a call
    to the `onMouseEnter()` method in the directive's class, which is `MyIonicInputDirective`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look more closely at the directive''s class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `@Input` decorator is used to declare that you will bring in a variable
    from the template. This is the reason why you must have the square brackets `[myIonicInput]="myStyles"`.
    Otherwise, `myStyles` would just be a string instead of an expression referring
    to the `myStyles` object from the `HomePage` class.
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting thing to note here is the code inside `constructor`. `ElementRef`
    is pointing to the same DOM at which you placed your attribute directive. You
    want to modify the behavior of the keyboard using `el.nativeElement.onkeypress`
    so that special characters won't be allowed. If the user enters a special character,
    it will trigger `e.preventDefault()` and nothing will happen. The keyboard event
    is basically discarded. You may wonder why we cannot just use the `keypress` event
    and map it to `onKeyPress`, which was intentionally commented out. The reason
    is that you are placing the `myIonicInput` directive on top of `ion-input`. But
    the actual `<input>` DOM is just a child of `ion-input`. Therefore, if you listen
    to the `keypress` event on the parent `ion-input`, you won't be able to bind it.
  prefs: []
  type: TYPE_NORMAL
- en: The `onMouseEnter` and `onMouseLeave` methods are self-explanatory because they
    just toggle the `myStyles.showUsername` variable. Again, this `myStyles` object
    is just a reference back to the `myStyles` of `HomePage`. So, if you change the
    variable here, it will change at the home page's level as well.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information about Angular 2 directives, you can refer to the official
    documentation at [https://angular.io/docs/ts/latest/guide/attribute-directives.html](https://angular.io/docs/ts/latest/guide/attribute-directives.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since this is the first section in which TypeScript appears, it might be helpful
    to go through the handbook for more details: [http://www.typescriptlang.org/docs/tutorial.html](http://www.typescriptlang.org/docs/tutorial.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom pipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pipes are also a feature of Angular and are not specific to Ionic. If you are
    familiar with Angular 1, a *pipe* is exactly the same thing as a *filter*. The
    main reason you might want to use pipes is to display data in a different format
    in the view. You don''t want to change the actual value in the component. This
    makes things very convenient because you don''t have to decide on the specific
    format within the code while leaving flexibility in the view layer. Here is a
    list of some useful built-in pipes (from [https://angular.io/docs/ts/latest/api/#!?apiFilter=pipe](https://angular.io/docs/ts/latest/api/#!?apiFilter=pipe)):'
  prefs: []
  type: TYPE_NORMAL
- en: '`AsyncPipe`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DatePipe`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NumberPipe`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SlicePipe`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DecimalPipe`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JsonPipe`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PercentPipe`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UpperCasePipe`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LowerCasePipe`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CurrencyPipe`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ReplacePipe`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to create a custom pipe using the `@Pipe`
    decorator. The following is a screenshot of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f483db6-c39e-43eb-a644-964fd124a5e7.png)'
  prefs: []
  type: TYPE_IMG
- en: While the app interface is very simple, the purpose of this example is to show
    you how to create a pipe to extract object data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is no need to test on a physical device because the Angular pipe will
    work just fine in the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Observe the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `CustomPipe` app using the `blank` template, as shown, and go
    to the `CustomPipe` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `./src/pages/home/home.html` file and modify the content with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: You can quickly see that the template uses the `userExtract` pipe to render
    the correct information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, replace the content of `./src/pages/home/home.ts` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You don't have the `custom-pipe.ts` file yet, so you need to create it next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `./src/utils` folder by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: You can call this folder anything. However, since pipes are sometimes considered
    *utility* functions, let's call it `utils`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `custom-pipe.ts` file in the `utils` folder and copy the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Add `UserExtractPipe` to `./src/app/app.module.ts` by replacing it with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to your Terminal and run the app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use an Angular pipe in the view to simply convert or transform any
    value to a desired value. There are no limitations to how you structure the pipe.
    Angular automatically detects the `|` sign in the template and turns the value
    in front of it to an input. To create a pipe, you must import the decorator and
    provide a name (see `custom-pipe.ts`), as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The input from the template is the following `value` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The value returned by the `transform` method will be the output to the view,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, you are taking a parameter for the pipe to process, as illustrated
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, this is what you had in the `home.html` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Each parameter is placed after a colon (`:`). Then, within your `@Pipe` class,
    you can refer to it using `arg`. The rest of the code is very simple, as already
    shown in the preceding section. Observe the following:'
  prefs: []
  type: TYPE_NORMAL
- en: If it's `firstname`, take the first word
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it's `lastname`, take the last word
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it's `age`, subtract the current year from the birth year
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, you could have more complicated scenarios with pipes. However, the
    overall recommendation is to keep things simple in the view to ensure rendering
    performance. If you need to do heavy processing, it's best to handle it as a separate
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand more about Angular pipes, you can check out the official documentation
    at [https://angular.io/docs/ts/latest/guide/pipes.html](https://angular.io/docs/ts/latest/guide/pipes.html)
  prefs: []
  type: TYPE_NORMAL
- en: Creating a shared service to provide data to multiple pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you develop an app that involves a lot of pages and communication to the
    backend, you will need to have a way to communicate across pages and components.
    For example, you may have a service to request user data from the backend and
    store it in a common local service. Then, you will need to provide a way for the
    user to update their user data and see the update in real time. When the user
    navigates to different pages, the same information will be pulled and rendered
    too, without making multiple trips to the backend. This is a very common scenario
    that requires the use of the `@Injectable` decorator in Angular.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the following screenshot of the app you will build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b95ec01e-4ca2-4557-9efb-41d738d9f986.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The user can fill out the form and see updates on it in real time. Then, they
    can move to the next page (Go to Page 2) and see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41b98302-4932-4fb6-8351-4027cd93f30f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This page uses the same service as the preceding page and references the same
    date with the name and age. You will learn the following topics in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a service using `@Injectable`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing a service across multiple pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting changes using getters and setters inside the service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This app example could work either in a browser or on a physical device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Observe the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `SharedService` app using the `blank` template as shown and go
    to the `SharedService` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'You will need to make several changes in the directory because you have two
    pages and a common service for both. Let''s start by modifying the `./src/app/app.component.ts`
    file so that the `rootPage` is pointing to `Page1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `./src/pages/page1`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Create your first template, `page1.html`, in the `page1` folder with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `page1.ts` in the `page1` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The file extension is `.ts`, and not `.js`, because you are going to use some
    TypeScript-specific features, such as getters and setters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, create the `page2` folder using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `page2.html` template in the `page2` folder as well, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This is your second page with the same `name` and `age` information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `page2.ts` in the `page2` folder with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `services` folder with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Put `UserService` in the `user.ts` file, in the `services` folder, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Open and edit `./src/app/app.module.ts` so that you can inject `UserService`
    as a global provider and declare `Page1` and `Page2` :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that your folder structure looks like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f8aceb7-1d72-4fbd-8414-e2e9eeee4085.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to your Terminal and run the app with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: You can move from `page 1` to `page 2` and then back, and the data will persist
    across the pages.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In general, if you want to use a common service across multiple pages, you
    must inject it at the highest level. In this example, you put `UserService` as
    a dependency at the start of `app.module.ts`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: After that, other pages within the app can start using this common service without
    having to reinject it. The main reason is that, whenever you inject a service
    or class, it will instantiate a new object, which ends up erasing all of the existing
    data in the memory. If you want the data to persist across the pages, it should
    be in the parent app to avoid reinjection.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the `UserService` on each page, you just need to import it, as illustrated
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The way to bring in the service is to put the referencing in the constructor
    (`page1.ts`),
  prefs: []
  type: TYPE_NORMAL
- en: 'as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This will pass down `UserService` reference to a local private variable of the
    page (in this case, `this.user`).
  prefs: []
  type: TYPE_NORMAL
- en: From a template standpoint, there is no difference between using `{{ user.name
    }}` and `{{ user.age }}` to inject data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at `UserService`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Actually, there are several things going on here. Firstly, you need to import
    `Injectable` from
  prefs: []
  type: TYPE_NORMAL
- en: '`@angular/core`.'
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget the parentheses in `@Injectable()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Secondly, if you want to use getters and setters, you need to make separate
    variables, called `_name` and `_age`, to store the data. Then, you can use the
    get/set method to do additional processing when other pages access or set the
    variables in this common class. If you change the `name` or `age` from `Page 1`,
    you can see the following logs in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df096e79-51e9-48ce-8e06-88e438b0a834.png)'
  prefs: []
  type: TYPE_IMG
- en: This feature is very beneficial since you can use this as a replacement for
    `watch` or `observable`. If you recall from Angular 1, you have to use `$scope.$watch`
    for a similar approach.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information about Angular 2 services, visit the official documentation
    at [https://angular.io/docs/ts/latest/tutorial/toh-pt4.html](https://angular.io/docs/ts/latest/tutorial/toh-pt4.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can get great instructions on many techniques for component communication
    at [https://angular.io/docs/ts/latest/cookbook/component-communication.html](https://angular.io/docs/ts/latest/cookbook/component-communication.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reusing an existing page as an HTML element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have used Ionic pages using Ionic''s navigation system. In this
    recipe, we''re going to extend the existing page so that we can use it as an HTML
    element/component in the application. The following is the first page of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f6e4ee7-b5d9-4dcc-bcf8-9162bf3bfc13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on SHOW CONTACT PAGE, it shows the contact page with the information
    from the previous page as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81a446c6-f7b5-4400-a18d-0957a86b242d.png)'
  prefs: []
  type: TYPE_IMG
- en: We will reutilize this contact page as an HTML element in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are using web functionalities, so we only need a web browser
    to run the application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new app named `PageComponent` using the `blank` template, as shown
    in the following code block and go to the `PageComponent` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `./src/app/pages/home/home.html` file and replace the content with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `./src/pages/home/home.ts` file and replace the content with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create a folder, `./src/pages/contact`, and in the folder, create `contact.html`
    and add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same folder, create a file named `contact.ts` and add the following
    content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open`./src/app/app.modules.ts` and add `ContactPage` in `NgModule`''s `declarations`
    and the `entryComponents` list, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Now go to the Terminal and run the app using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We already used multiple Ionic pages in the navigation, so we know that push/pop
    navigation works. Let''s take a closer look at how we define an Ionic Page as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that an Ionic page is actually an Angular component, and we already
    know that we can use components as an HTML element using their `selector.` In
    the preceding example, selector of the page is `page-contact`. So technically
    we can use the selector in HTML. But it becomes a problem if our page is getting
    data from the previous page using `NavParams`. Let''s take a look at the constructor
    of `ContactPage`, shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: In the code, we are getting the user's information from the previous page using
    Ionic's navigation. So, if we want to use this component as an HTML element, we
    need to pass this data to the component somehow.
  prefs: []
  type: TYPE_NORMAL
- en: This is where `@Input` decorator is particularly useful. The `@Input` decorator
    allows us to pass data to the `component` as an input. So, we have `@Input() userInput`
    as an input to the component. This `userInput` has the same value as the user
    from `NavParams` shown in the preceding code. The only difference is `userInput`
    will have a value when we use the page component as an HTML element and `params.get('user')`
    will have a value when we use this component via Navigation Controlller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the first page of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/422c70e6-e631-4490-9a2f-91e495fbea7f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user enters information in the input fields and then clicks on SHOW
    CONTACT PAGE, it opens the `ContactPage`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c738cbb1-65c9-4f42-8c28-4a9b490cb2aa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is important to note that we might not want to show the header bar of the
    Ionic page when we are using it as an HTML component in other pages. If you take
    a look at `contact.html`**,** you will see that we hide the page''s header when
    we use it as an HTML component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'So, what we are saying is, only show the header when `userInput` is empty.
    This `userInput` is given as input via `@Input`, as described in the chapter.
    So, if you take a look at the `home.html` file, you will add the following code
    to show `ContactPage` inside `HomePage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'When we click on the TOGGLE CONTACT COMPONENT, it shows the same `Contact Page`
    inside `HomePage`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed03fb62-cf6b-4ff8-9ba8-18e5ea2013b1.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read more about Angular components at [https://angular.io/api/core/Component](https://angular.io/api/core/Component).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular components have a life cycle and events related to it. We can hook up
    to any life cycle events such as destroy or initialize. Read more about life cycle
    hooks at [https://angular.io/guide/lifecycle-hooks](https://angular.io/guide/lifecycle-hooks).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
