- en: Chapter 9. Blending In
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS, HTML, and JavaScript can take us a long way to building an app that feels
    99 percent native. That is, it almost feels native, it looks nearly native, and
    it acts mostly native. But if you take a closer look, you can see the small differences
    that tell any user with a lot of experience with their device that things really
    aren't native. To help overcome this, we can *blend in* to our environment using
    plugins that use real, true-blue native components.
  prefs: []
  type: TYPE_NORMAL
- en: What do we build?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to revisit the `Socializer` app from [Project 2](ch02.html "Chapter 2. Let's
    Get Social!"), *Lets Get Social!* It's a good fit for blending in, and we can
    easily add our native components on to it without worrying too much about changing
    a lot of the app itself. There are some minor changes, of course, but in general,
    it works much the same, and even gains a little functionality in the process!
  prefs: []
  type: TYPE_NORMAL
- en: What does it do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although, we will add a couple of features to the app, the primary goal here
    is to use native components. For this, we'll be taking advantage of several great
    plugins in the PhoneGap Plugins repository ([http://github.com/phonegap/phonegap-plugins/tree/master/iOS](http://github.com/phonegap/phonegap-plugins/tree/master/iOS)).
    As the URL implies, we'll be doing this for iOS only. Unfortunately there aren't
    a lot of native plugins in this repository for Android. You can search around
    a bit and find some here and there (and some really great ones), but for now,
    we'll focus on iOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, we''ll be using quite a few native components: the navigation bar,
    the tab bar, the ActionSheet, the message box, the picker, and the e-mail composer.
    Oh, and let''s not forget ChildBrowser either!'
  prefs: []
  type: TYPE_NORMAL
- en: Why is it great?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This project will give us a much better understanding of interacting with multiple
    plugins, and we will also get much closer to a native look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: How are we going to do it?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps we''ll be following:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the navigation bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the tab bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the ActionSheet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the message box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the picker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the e-mail composer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What do I need to get started?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you've downloaded the code for this project so that you can follow
    along.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've already had to deal with plugins a little bit, from ChildBrowser to even
    our own plugins. But this time, we'll be adding a lot of them. To install the
    plugins, go ahead and open up (or create) your Xcode project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting on with it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you''ve downloaded the PhoneGap plugin repository, you should be able
    to extract it and navigate to the `iOS` folder inside. Go ahead and install the
    ChildBrowser plugin, as described in [Project 2](ch02.html "Chapter 2. Let''s
    Get Social!"), *Let''s Get Social!* in the *Configuring the plugins* section.
    Once done, you need to go into each of the following directories and install each
    plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ActionSheet`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `ActionSheet.h` and `ActionSheet.m` files into Xcode into the `Plugins`
    directory.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `ActionSheet.js` file to the `www/plugins/iOS` directory using Finder.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EmailComposer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `EmailComposer.h` and `EmailComposer.m` files into Xcode into the `Plugins`
    directory.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `EmailComposer.js` file to the `www/plugins/iOS` directory using Finder.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MessageBox`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `MessageBox.h` and `MessageBox.m` files into Xcode into the `Plugins`
    directory.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `MessageBox.js` file to the `www/plugins/iOS` directory using Finder.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NavigationBar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `CDVNavigationBar.xib`, `CDVNavigationBarController.h`, `CDVNavigationBarController.m`,
    `NavigationBar.h`, and `NavigationBar.m` files into Xcode into the `Plugins` directory.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `NavigationBar.js` file to the `www/plugins/iOS` directory using Finder.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PickerView`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `PickerView.h` and `PickerView.m` files into Xcode into the `Plugins`
    directory.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `PickerView.js` file to the `www/plugins/iOS` directory using Finder.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TabBar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `TabBar.h` and `TabBar.m` files into Xcode into the `Plugins` directory.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `TabBar.js` file to the `www/plugins/iOS` directory using Finder.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When done, you should have something that looks like this in Xcode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting on with it](img/9403_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, navigate to `Cordova.plist` in the `Resources` directory, and add the
    following key/value pairs to the `Plugins` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ActionSheet`, `String`, `ActionSheet`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NavigationBar`, `String`, `NavigationBar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MessageBox`, `String`, `MessageBox`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TabBar`, `String`, `TabBar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PickerView`, `String`, `PickerView`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EmailComposer`, `String`, `EmailComposer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The result should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting on with it](img/9403_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, add the `script` tags to our `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: What did we do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you added all the plugins our project will use to Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: What else do I need to know?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a couple files that may give you problems when compiling—`ActionSheet.h`
    and `PickerView.h`. In particular, the error references an inability to find `CDVPlugin.h`
    Just change the code at the top until it looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Adding the navigation bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re already pretty familiar with the concept of the navigation bar. We''ve
    been using one at the top of our HTML views for several projects now. This time,
    however, we''re going to take that out and replace it with a native navigation
    bar. Here''s how it will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the navigation bar](img/9403_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This will require minor surgery on all three views—`startView.html`, `socialView.html`,
    and `tweetView.html` in the `www/views` directory. Go ahead and open those files
    so you can follow along. You might also want to open the versions from [Project
    2](ch02.html "Chapter 2. Let's Get Social!"), *Let's Get Social!* as well, so
    you can see what has changed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting on with it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, our HTML views are going to change, since we need to remove our own navigation
    bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `startView.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For `socialView.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For `tweetView.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''re comparing each view to that of [Project 2](ch02.html "Chapter 2. Let''s
    Get Social!"), *Let''s Get Social!* the navigation bar and tool bars have been
    removed in each view. We''ve also added native iOS scrolling to each view using
    `-webkit-overflow-scrolling: touch`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By doing this, we''ve also removed several buttons: buttons that we''ll need
    to replace in the navigation bar. But we will also need to remove the old references
    to them, typically in each view''s `initializeView()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For `startView.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For `socialView.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For `tweetView.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You may be wondering, then, if we aren't going to initialize our buttons or
    the navigation bar in `intializeView()`, when and where are we going to do it?
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the initialization part actually needs to happen in `app.js`. The navigation
    bar is going to persist across all of our views, and we can only have one of them.
    Therefore, we need to initialize it at the very start of our app. So in `app.js`
    in the `APP.init()` method (after `PKUI.CORE.initializeApplication`), we add the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This initializes and creates the navigation bar, hides its two buttons, and
    then sets its title. Finally, we display it on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Once we've done that, we can do some work in our views to tweak the navigation
    bar to our needs in each view.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `startView.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: First, we hide the buttons (just in case there are buttons visible we don't
    want seen), and then we set the title to the app's title—`Socializer2`. Then,
    we give the right button a title of `Start`, and link it to the `startApp()` method.
    At the end, we also show the right button.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When the view is about to hide, we essentially clear the entire navigation bar
    so that the buttons don't hang around for the next view.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `socialView.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we set the title of the view to the currently selected Twitter
    account, which by default will be the first one. We've added `currentTitle` to
    `socialView`, and are setting it in `loadStreamFor()` so that we can keep track
    of it.
  prefs: []
  type: TYPE_NORMAL
- en: We also add a `Back` button, on the left, and then we add a `#` button on the
    right. The `Back` button is just like every back button we've done in the past,
    so it will return us back to the starting view. The `#` button—this one's going
    to be interesting, but we'll save it for later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Again, like good citizens, we clean up after ourselves!
  prefs: []
  type: TYPE_NORMAL
- en: 'In `tweetView.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, this is a little different. Notice anything missing? That''s right, we
    aren''t setting the title. That''s because we''ll actually set it in `loadTweet()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Because we load the tweet immediately upon loading the tweet view, this has
    the effect of setting the navigation bar's title to the tweet's text.
  prefs: []
  type: TYPE_NORMAL
- en: But what if the tweet's text is too long? In fact, the chances of it being too
    long are really good. The native navigation bar will happily truncate it and append
    a "…" at the end, so we never have to worry if it will actually end up overflowing
    its bounds.
  prefs: []
  type: TYPE_NORMAL
- en: And of course, we'll clean up after ourselves, but there's no sense in printing
    the same code again.
  prefs: []
  type: TYPE_NORMAL
- en: What did we do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this task, we added the navigation bar and modified its title and interacted
    with the buttons on the navigation bar.
  prefs: []
  type: TYPE_NORMAL
- en: What else do I need to know?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The iOS-native navigation bar can do a lot of cool things, but the plugin doesn't
    expose all of those cool features (such as changing the tint color). So, for the
    time being, we're left with a rather plain-looking navigation bar—certainly not
    the color we used in [Project 2](ch02.html "Chapter 2. Let's Get Social!"), *Let's
    Get Social!* You can get around this by using some native Objective-C code, but
    the plugin itself doesn't offer us any other option but the black gloss navigation
    bar.
  prefs: []
  type: TYPE_NORMAL
- en: For a long time, iOS navigation bars were limited to two buttons—one on the
    left, and one on the right. And for the iPhone and iPod Touch, this is still a
    pretty good idea. For the iPad, one can add quite a few buttons to the bar without
    getting in the way of any text. Again, however, the plugin doesn't expose this
    functionality, so we can only have one button on the left and one button on the
    right.
  prefs: []
  type: TYPE_NORMAL
- en: Usually the button on the left is a **Back** button. This is typically given
    a left-pointing arrow, but the only way to do this is to create an image and pass
    it to the plugin. For our purposes, we decided to use a regular button without
    the left-pointing arrow. The plugin does have instructions on how to create the
    image and add it to the project if you want it, though.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the tab bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the social view and tweet view we've had something similar to an iOS-native
    tab bar – something we called a toolbar. This is where the **Share** button in
    the tweet view lived. Unfortunately there's no native plugin for an actual toolbar,
    so we moved the **Share** button to the navigation bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the social view, however, we''re using the toolbar just like a real tab
    bar—namely a method to switch the contents of the view. We have five icons that
    represent Twitter accounts, and pressing any one of them will load recent posts
    from that stream. This works perfectly for a tab bar. Here''s how it will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the tab bar](img/9403_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There's only one hitch. While we were able to display full-color, pretty avatars
    in our HTML tab bar, the iOS-native tab bar doesn't support that. In fact, it
    requires the images to be masks. iOS will then create the non-selected and selected
    images it uses on the tab bar from that mask. Essentially whatever is *white*
    (realistically, whatever has a value other than transparent) is painted on to
    the tab bar, and whatever is *transparent* isn't painted on to the tab bar.
  prefs: []
  type: TYPE_NORMAL
- en: This means we can't use the images we get from Twitter. We'd end up with five
    rectangle-shaped icons with no similarity to the original avatars. So we need
    to create our own versions in Photoshop or your preferred editor.
  prefs: []
  type: TYPE_NORMAL
- en: For tab bars, the best size to aim it is 30 x 30 for non-retina displays and
    60 x 60 for retina displays. Then each image is saved as `tab#.png` and `tab#@2x.png`.
    The `@2x` version is for the retina displays. You can see each one in our code
    download in the `www/images` directory. All we did was to take the avatar from
    Twitter and color it white and then strip out all the background stuff and make
    it transparent.
  prefs: []
  type: TYPE_NORMAL
- en: Getting on with it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll be doing most of our work in our social view this time, since it''s
    really the only view that did anything close to what a real tab bar does. Even
    so, we do need to add some code to `app.js` again (in the same spot as the previous
    task):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Notice the two commands to initialize and create the tab bar. This has to be
    done here as the tab bar must always follow the initialization and creation of
    the navigation bar; otherwise the size of the web view (sandwiched in between)
    will be incorrectly set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s go to our social view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: First, we create a tab bar item for each Twitter account. We give it the name
    of `tab#`—so `tab0`, `tab1`, and so on. We give the Twitter account name as the
    text of the tab bar, and then we use the images we created earlier as the icons
    for each tab bar instead of using the avatars Twitter gives us. Notice that we
    don't ever specify `@2x`; iOS just knows to use it when on a retina display. (Magic!
    It's also worth noting that the same thing happens when writing native code; rarely
    does one have to worry about appending `@2x` programmatically.)
  prefs: []
  type: TYPE_NORMAL
- en: We also add an `onSelect` handler to each tab item. We'll take the last character
    of the name of the tab item, which will be a number from `0` to `4`, and then
    load the stream for that index. This means tapping on the first tab bar (named
    `tab0`) will load the stream for the first Twitter account.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now we've added the code to show the tab bar. We've also added the code to show
    each tab bar item. Since we know we'll always have five items, we just hardcode
    these values for now, but it would be equally possible to create lots of tab bar
    items and only show a few at a time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we clean up after ourselves and hide the tab bar whenever the view
    hides. This keeps the tab bar from being visible on any other view.
  prefs: []
  type: TYPE_NORMAL
- en: What did we do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this task, we created the tab bar and then assigned tab bar items to it.
    We also assigned callback functions to each tab bar item.
  prefs: []
  type: TYPE_NORMAL
- en: What else do I need to know?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Apple is pretty strict when it comes to how a tab bar works. For one, on anything
    other than an iPad, it should never have more than five icons. (The reasons are
    pretty obvious: there''s not a lot of space!)'
  prefs: []
  type: TYPE_NORMAL
- en: So, what to do if you need more than five tabs? The accepted method would be
    to show four of those icons, add a *more* icon (consisting of three dots as the
    image), and then when the user taps that tab, show the remaining tabs in a table
    list. You can see this behavior in the *Music* app on the iPhone and iPod Touch,
    and if we were writing native code, we'd get this behavior nearly for free.
  prefs: []
  type: TYPE_NORMAL
- en: 'But we aren''t writing native code, and so we have to do this manually. This
    means, if you want more than five tabs, you''ll need to manually create the *more*
    tab and display the list of remaining tabs in a list on your own. One more catch:
    on an iPad, you should display all the tabs—displaying a *more* button is valid
    only for the iPhone and iPod Touch.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Apple highly suggests that one use no more than seven tabs on an iPad,
    but this is not as rigorously enforced.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the ActionSheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ActionSheets are great ways to present a few limited choices to the user, and
    so far we''ve been doing the equivalent by using pop-up message boxes with several
    buttons in them. For this project, we''re going to display an ActionSheet when
    the user taps the **Share** button in the tweet view. Here''s how it will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the ActionSheet](img/9403_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting on with it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In `TweetView.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: First off, we create the ActionSheet using `actionSheet.create()`. We give the
    sheet a title (`Share`), and then specify the buttons that can appear (`Twitter`,
    `Facebook`, `Email`, and `Cancel`). We then specify the handler for the ActionSheet,
    which will share the tweet to Twitter if the **Twitter** button is tapped. It
    won't do anything yet for the other buttons. Finally, we indicate that the **Cancel**
    button is the last button. This is so that iOS will know to color the **Cancel**
    button a different color to make it obvious that it is different. (Remember that
    indexes are zero-based.)
  prefs: []
  type: TYPE_NORMAL
- en: 'When our callback is invoked, we get two values: `buttonIndex` and `buttonValue`.
    While `buttonValue` could be useful, chances are good this could be anything,
    especially when we consider localization. Instead it''s better to use `buttonIndex`.
    The first button will be `buttonIndex` `zero`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: What did we do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this task, we added an ActionSheet when the user taps on the **Share** button
    for a specific tweet.
  prefs: []
  type: TYPE_NORMAL
- en: What else do I need to know?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ActionSheet is a pretty nifty thing, and it works really well on an iPhone
    or iPod Touch. On the iPad, it will appear in the center of the screen as a popover,
    not the best user interface, but something we can deal with. There are native
    methods you can use to position it correctly and add an arrow, but Apple seems
    to take apps using centered ActionSheets too, so we're not worrying about that
    now.
  prefs: []
  type: TYPE_NORMAL
- en: Something else that we need to know is that it's a good idea to keep the number
    of items to a small number, or the list will start to get really long. While the
    ActionSheet is supposed to condense these into a scrollable list view when this
    happens, there are bugs as to when it happens. This means that you can get a really
    long list that has some buttons cut off or missing entirely. (This is usually
    most visible on the iPad.)
  prefs: []
  type: TYPE_NORMAL
- en: Long story-short, keep the number of items to a reasonable value. Five or less
    is probably a good idea on a small device, and ten or less on an iPad.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the message box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we've done pretty good with our own message box. It's not quite like
    an iOS-native message box, but it's pretty close. In this case, though, we want
    to go all the way.
  prefs: []
  type: TYPE_NORMAL
- en: Getting on with it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Working with the Message Box plugin is really easy. Let''s go back to the `share()`
    method in our Tweet View:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ve highlighted the preceding code that displays a native message box. In
    this case, we use it for the second button on our ActionSheet: `FaceBook`. Since
    we''ve not implemented it yet, we display a nice notice to the user. Here''s what
    it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting on with it](img/9403_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Just like the ActionSheet and tab bar, we can respond (if we like) to any pressed
    buttons. In this case, we just log it to the console, but there are confirmation
    message boxes that one could use to make different things happen depending on
    what button was pressed.
  prefs: []
  type: TYPE_NORMAL
- en: What did we do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We displayed a native message box and handled the callback when a button is
    pressed.
  prefs: []
  type: TYPE_NORMAL
- en: What else do I need to know?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Never, ever do this in a real application*. I don''t mean never use a message
    box; no, I mean never tell a user a feature isn''t implemented in the first place.
    In fact, never show them that the feature was intended to be implemented but wasn''t.
    Users don''t appreciate it very much, and Apple will certainly reject the app
    if you leave it in.'
  prefs: []
  type: TYPE_NORMAL
- en: The message box plugin describes other uses, including confirmation boxes, input
    boxes, and password input boxes. Read the plugin's readme for more information
    about how to use these additional features.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the picker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pickers are all over the place in iOS, and we really don''t have a good analogue
    for them in our own framework yet. These things look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the picker](img/9403_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: They're great at showing several choices at once and letting the user select
    one. They are often used to pick calendar dates, times, or even just a specific
    number out of a large range. They are good for this because they allow the user
    to scroll over a large range quickly.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we're just going to give a few options, but we could have had
    two hundred items in here with no real loss of functionality (but really, the
    user wouldn't need all of those in our case).
  prefs: []
  type: TYPE_NORMAL
- en: Getting on with it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to go back to the social view for a moment and revisit something
    we said we'd come back to. Remember that **#** button? Yeah, now's the time we
    handle it.
  prefs: []
  type: TYPE_NORMAL
- en: Essentially, we're going to give the user the option to pick how many tweets
    they want to be loaded at once. Cool, right? This could be done in an ActionSheet,
    but the number of items is more than would really fit well, and so we'll use a
    picker instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'First off, we''ve added a new property to the view: the number of tweets to
    load; and we''ve defaulted this to `100`. Then we modified `loadStreamFor()` to
    use this value instead of the hard coded value in [Project 2](ch02.html "Chapter 2. Let''s
    Get Social!"), *Let''s Get Social!*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Next, we create the values that we want to display in our picker. The *name*
    isn't displayed anywhere; it's just used when we get told what the user selected.
    The first *value* is the currently selected value. This means the picker will
    show the user which item is currently selected. The remaining items define the
    value and the display text for each item. So the user will see `Twenty-Five`,
    but we'll get back `25`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Next, we actually create the picker. We give it the title of `Number of Tweets`,
    so the user knows what they are setting. We pass in the values to display (slots),
    and then pass in a callback handler. This handler will set the value to the selected
    value and reload the Twitter stream, but only if the user taps on **OK**. Finally,
    we set the style (black), and pass in the names of the two buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Pickers aren't limited to single-value lists. You can get multiple columns going,
    which is useful when setting a date, for example. You could have a Year column,
    a Month column, and a Date column. See the Plugin's readme file for more information
    on how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: What did we do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a picker, filled it with data, and reacted to the user picking a
    specific result.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the e-mail composer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sharing via e-mail is built in to nearly every app, and yet it's difficult to
    actually accomplish without using a plugin. Since this app is intended to share
    things easily, let's add sharing via e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: Getting on with it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Back in our tweet view, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Again, we're in the `share()` method, and I've highlighted the code that's changed.
    Here we're responding to the **Email** button, which is index `2`. We call the
    plugin using `cordova.exec()`, giving it the plugin name and the method we want
    to use (`showEmailComposer`). Then we pass the body and subject to the plugin.
    The body will be the tweet, plus who it was from, and the subject will be "*Thought
    this was interesting…"*. We could pass in more information, such as who the message
    should be sent to, but in our case, we don't know that information, so we don't
    send it on to the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Once done, we let go of control entirely, though it is possible to determine
    if the user actually did share via e-mail or not. In our case, we don't really
    care if they did, just that we offer the option to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting on with it](img/9403_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What did we do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this task, we created an e-mail composer with the subject and body set to
    data we specified.
  prefs: []
  type: TYPE_NORMAL
- en: Game Over..... Wrapping it up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've accomplished quite a bit—we used seven plugins in total, and our app looks
    and feels pretty native now. It's not perfect; for example, navigation bars have
    a cool animation on native apps and in our app, it *blanks out* during view changes,
    but other than that, things look and feel pretty close to what a user would expect.
  prefs: []
  type: TYPE_NORMAL
- en: Can you take the HEAT? The Hotshot Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Of course, there are always things that can be added and changed. Why don''t
    you try a few of these challenges:'
  prefs: []
  type: TYPE_NORMAL
- en: Add Facebook sharing to the app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store the number of tweets to load so that it is a persistent setting.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change up the way the navigation bar is cleared at the end of each view; try
    to achieve a more *native* feel. To truly achieve a native feel, you may need
    to delve into native code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Want a really complicated challenge? Download the avatars from Twitter and then
    figure out how to mask them programmatically. Then save them to the user's temporary
    storage and use them as the icons on the tab bar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
