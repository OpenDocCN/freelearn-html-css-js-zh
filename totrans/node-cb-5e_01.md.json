["```js\n    $ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n    ```", "```js\n    $ nvm --version\n    0.40.1\n    ```", "```js\n    $ nvm install 22\n    Downloading and installing node v22.9.0...\n    Downloading https://nodejs.org/dist/v22.9.0/node-v22.9.0-darwin-arm64.tar.xz...\n    ######################################################################### 100.0%\n    Computing checksum with sha256sum\n    Checksums matched!\n    Now using node v22.9.0 (npm v10.8.3)\n    ```", "```js\n    $ node --version\n    v22.9.0\n    ```", "```js\n    $ npm --version\n    10.8.3\n    ```", "```js\n    $ nvm install 20\n    Downloading and installing node v20.17.0...\n    Downloading https://nodejs.org/dist/v20.17.0/node-v20.17.0-darwin-arm64.tar.xz...\n    ############################################################################################################################################### 100.0%\n    Computing checksum with sha256sum\n    Checksums matched!\n    Now using node v20.17.0 (npm v10.8.2)\n    ```", "```js\n    $ nvm use 22\n    Now using node v22.9.0 (npm v10.8.3)\n    ```", "```js\nexport NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n```", "```js\n    $ node\n    ```", "```js\n    > process.versions.v8\n    '12.4.254.21-node.19'\n    ```", "```js\n    > \"006E006F00640065\".isWellFormed()\n    true\n    ```", "```js\n    > const number = 123456.789;\n    undefined\n    ```", "```js\n    > new Intl.NumberFormat('en-UK', { style: 'currency', currency: 'GBP' }).format(number);\n    '£123,456.79'\n    ```", "```js\n    > const oddNumbers = new Set([1, 3, 5, 7]), primeNumbers = new Set([2, 3, 5, 7]);\n    undefined\n    > console.log('All Numbers:', [...(oddNumbers.union(primeNumbers))].toString());\n    All Numbers: 1,3,5,7,2\n    undefined\n    > console.log('Common Numbers:', [...(oddNumbers.intersection(primeNumbers))].toString());\n    Common Numbers: 3,5,7\n    undefined\n    > console.log('Exclusive Primes:', [...(primeNumbers.difference(oddNumbers))].toString());\n    Exclusive Primes: 2\n    ```", "```js\n    // Blocking function\n    function blockingOperation() {\n      console.log('Start blocking operation');\n      // Simulate a time-consuming synchronous operation (e.g., reading a large file)\n      for (let i = 0; i < 1000000000; i++) {\n        // This loop will keep the CPU busy for a while, blocking other operations\n      }\n      console.log('End blocking operation');\n    }\n    console.log('Before blocking operation');\n    // Call the blocking function\n    blockingOperation();\n    console.log('After blocking operation');\n    ```", "```js\n    $ node blocking.js\n    Before blocking operation\n    Start blocking operation\n    End blocking operation\n    After blocking operation\n    ```", "```js\n    console.log('Before non-blocking operation');\n    // Non-blocking operation (setTimeout)\n    setTimeout(() => {\n      console.log('Non-blocking operation completed');\n    }, 2000); // Simulate a non-blocking operation that takes 2 seconds\n    console.log('After non-blocking operation');\n    ```", "```js\n    $ node non-blocking.js\n    Before non-blocking operation\n    After non-blocking operation\n    Non-blocking operation completed\n    ```", "```js\n    console.log('Start');\n    process.nextTick(() => {\n      console.log('Callback scheduled with\n        process.nextTick #1');\n    });\n    setTimeout(() => {\n      console.log('setTimeout #1 callback');\n    }, 0);\n    process.nextTick(() => {\n      console.log('Callback scheduled with\n        process.nextTick #2');\n    });\n    console.log('End');\n    ```", "```js\n    $ node next-tick.js\n    Start\n    End\n    Callback scheduled with process.nextTick #1\n    Callback scheduled with process.nextTick #2\n    setTimeout #1 callback\n    ```"]