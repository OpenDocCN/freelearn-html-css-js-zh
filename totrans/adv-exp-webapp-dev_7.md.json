["```js\nvar cluster = require('cluster')\n, http = require('http')\n, numCPUs = require('os').cpus().length\n, logger = require('../logger')\n, domain = require('domain');\n\nfunction Cluster() {}\n\nCluster.prototype.run = function(module) {\n  if (cluster.isMaster) {\n    for (var i = 0; i < numCPUs; i++) {\n      cluster.fork();\n    }\n\n    cluster.on('exit', function(worker, code, signal) {\n      logger.info('Worker ' + worker.process.pid + ' died');\n      cluster.fork();\n    });\n  } else {\n    var d = domain.create();\n\n    d.on('error', function(err) {\n      logger.info('Error ', err);\n      process.exit(1);\n    });\n\n    d.run(function() {\n      require(module);\n    });\n  }\n}\n\nmodule.exports = Cluster;\n```", "```js\ncd vision-core\nnpm install hiredis redis --save\n\n```", "```js\ngit clone http://github.com/bumptech/stud.git\n\n```", "```js\ncd stud\nmake\nsudo make install\n\n```", "```js\ncd vision-web\nstud --default-config > stud.conf\n\n```", "```js\n# stud(8), The Scalable TLS Unwrapping Daemon's configuration\n\n# Listening address. REQUIRED.\n# type: string\n# syntax: [HOST]:PORT\nfrontend = \"[127.0.0.1]:8443\"\n\n# Upstream server address. REQUIRED.\n# type: string\n# syntax: [HOST]:PORT.\nbackend = \"[127.0.0.1]:3003\"\n\n# SSL x509 certificate file. REQUIRED.\n# List multiple certs to use SNI. Certs are used in the order they\n# are listed; the last cert listed will be used if none of the others match\n# type: string\npem-file = \"lib/secure/vision.pem\"\n\n# EOF\n```", "```js\n{\n\"server\": {\n    \"accessLog\": \"hipache_access.log\",\n    \"port\": 3000,\n    \"workers\": 5,\n    \"maxSockets\": 100,\n    \"deadBackendTTL\": 30,\n    \"address\": [\"127.0.0.1\"],\n    \"address6\": [\"::1\"]\n  },\n  \"redisHost\": \"127.0.0.1\",\n  \"redisPort\": 6379,\n  \"redisDatabase\": 0\n}\n```", "```js\ncd vision-web\nstud --config=stud.conf\n\n```", "```js\n/vision-web/hipache --config ./config/server-no-ssl.json\n/vision-api/hipache --config ./config/server.json\n\nredis-cli (these may already exist in redis)\nrpush frontend:web.vision.net web.vision\nrpush frontend:web.vision.net http://127.0.0.1:3003\nrpush frontend:api.vision.net api.vision\nrpush frontend:api.vision.net http://127.0.0.1:3005\n\n/vision-web/NODE_ENV=production PORT=3003 npm start\n/vision-api/NODE_ENV=production PORT=3005 npm start\n/vision-worker/npm start\n\n```", "```js\napp.use(express.static('public',\n  { maxAge: config.get('express:staticCache') }));\napp.use(express.static('public/components',\n  { maxAge: config.get('express:staticCache') }));\napp.use('/bootstrap',express.static('public/components/bootstrap/docs/assets/css',\n  { maxAge: config.get('express:staticCache') }));\napp.use('/sockets',\n  express.static('public/components/socket.io-client/dist/', { maxAge: config.get('express:staticCache') }));\n```", "```js\n  \"express\": {\n    \"port\": 8443,\n    \"staticCache\" : 6048000000\n  },\n```", "```js\nCache-Control:public, max-age = 86400\n\n```", "```js\napp.set('views', 'views');\napp.use(express.favicon('public/components/vision/favicon.ico'), { maxAge: config.get('express:staticCache') });\n```", "```js\nnpm install grunt-contrib-uglify --save-dev\n\n```", "```js\nnpm install grunt-contrib-cssmin --save-dev\n\n```", "```js\ngrunt.loadNpmTasks('grunt-contrib-uglify');\ngrunt.loadNpmTasks('grunt-contrib-cssmin');\n\nuglify: {\n  dist: {\n    files: {\n      'public/components/vision/templates.min.js':\n      'public/components/vision/templates.js',\n      'public/components/vision/vision.min.js':\n      'public/components/vision/vision.js',\n      'public/components/json2/json2.min.js':\n      'public/components/json2/json2.js',\n      'public/components/handlebars/handlebars.runtime.min.js':\n      'public/components/handlebars/handlebars.runtime.js'\n   }\n }\n  },\n  cssmin: {\n    minify: {\n      expand: true,\n      src: ['public/components/vision/vision.css'],\n      ext: '.min.css'\n    }\n  }\n```", "```js\ngrunt uglify\ngrunt cssmin\n\n```", "```js\napp.set('views', 'views');\napp.use(express.logger({ immediate: true, format: 'dev' }));\napp.use(express.compress());\n```", "```js\nContent-Encoding: gzip\n\n```", "```js\nif (process.env['NODE_ENV'] !== \"production\")\n app.use(express.logger({ immediate: true, format: 'dev' }));\n```"]