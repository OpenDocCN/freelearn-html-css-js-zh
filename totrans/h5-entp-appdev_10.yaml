- en: 'Chapter 10. The App: Consuming Tweets Via Web Workers'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until now, JavaScript has been single-threaded. With a slow-running or lengthy
    process, everything on your page could come to a screeching halt waiting for something
    to finish. So far you could use AJAX or even `setTimeout` to delegate your tasks;
    however, neither of these solutions allows for real parallel execution and handling
    state gets pretty messy.
  prefs: []
  type: TYPE_NORMAL
- en: To make up for this deficiency, the HTML5 specification introduces Web Workers.
    Web Workers allow you to create non-user oriented background threads that can
    run simultaneously. They are typically meant for computationally heavy tasks.
    However, for our MovieNow enterprise application, we will use Web Workers to find
    tweets near a theater and display them. Although not necessarily computationally
    heavy, Web Workers can be useful to update the state of multiple elements on a
    page without interrupting the overall user experience (notice that there is still
    generally only a single UI-rendering thread).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing geocodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anatomy of a Web Worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Web Workers to get nearby tweets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the event listener
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling the tweets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start us out, let us create an endpoint for querying the Twitter REST API
    and returning tweets near a specified geocode. At the root of the application,
    create a PHP file called `nearbytweets.php`. Open it and paste in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a simple page that takes two parameters: latitude and longitude. It
    then queries the Twitter REST API 1.1 as defined in [https://dev.twitter.com/docs/api/1.1](https://dev.twitter.com/docs/api/1.1).
    It returns JSON data containing tweets originating from within 0.25 miles from
    the specified latitude and longitude.'
  prefs: []
  type: TYPE_NORMAL
- en: Capturing geocodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a place to get data, we will need to capture the latitude and
    longitude of each theater to send to our new endpoint. In `movienow.geolocation.js`,
    we will make a minor modification. In the `displayShowtimes` method, we will need
    to adjust where the theater name is displayed. Specifically, we will need to input
    the latitude and longitude and add them to a new `data` attribute. This allows
    us to use this data later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create a new JavaScript file called `movienow.nearbytweets.js`
    in the `js` folder. In `index.php`, we will add a reference to the new JavaScript
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In `movienow.nearbytweets.js`, we will start with some boilerplate code. Add
    the following to set up the `nearbytweets` namespace within `movienow`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Anatomy of a Web Worker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To really understand Web Workers, imagine a work-at-home business where households
    are sent packages of promotions and envelopes. Each household is to stuff the
    envelopes with the promotional literature, seal the envelopes, and send them as
    a parcel back to the originating business. The work-at-home households know nothing
    about the internals of the business. They merely know they are given a parcel,
    they must do something with the parcel, and they must return the parcel.
  prefs: []
  type: TYPE_NORMAL
- en: Web Workers run in an isolated thread wherein they know nothing about the state
    of the page that invokes them. They are simply sent a message, they do something
    with that message, and then return a message. The calling procedure specifies
    an event listener that responds when a message is returned by a Web Worker.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of Web Workers. They are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dedicated Web Workers**: They are sometimes referred to as just Web Workers.
    They are only reachable by the script that created them, although message ports
    can be used to communicate with other contexts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shared Web Workers**: They are named and share a global scope, so any script
    running in the same origin can obtain a reference of this kind of worker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this case, we will use Dedicated Web Workers. Web Workers are typically
    defined in a separate JavaScript file. To create a Web Worker, you simply need
    to instantiate it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once created, you can communicate with a Web Worker by using the `postMessage`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To receive communications back from the Web Worker, simply define an event
    listener that triggers based on the `onmessage` event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The Web Worker can then be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: It basically has an event listener defined for incoming messages. As messages
    arrive, it executes the function attached to the message event and returns it
    by using the `postMessage` method in much the same way it was invoked. The event
    listener on the client side is invoked and everyone goes on their merry way.
  prefs: []
  type: TYPE_NORMAL
- en: 'If an error does occur in a Web Worker, the exception can be handled by listening
    to the error event on the Web Worker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: It is important to note that the Web Worker exists in a sandbox. It is not accessing
    the state of the page at all. Instead, anything it receives will always be a copy
    of what was sent. Event referenced JavaScript libraries are not available. In
    fact, the DOM, the `window`, the `document`, and the `parent` objects are unavailable,
    so you cannot do any manipulation of or reading from the DOM or make use of the
    `window` object in a Web Worker. You are a completely separate household.
  prefs: []
  type: TYPE_NORMAL
- en: You can however use the `navigator` object, make use of the `XMLHttpRequest`
    object, and spawn other Web Workers.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nested workers must be hosted within the same origin as the parent document.
    Moreover, the URIs for nested workers are resolved relative to the parent worker's
    location rather than the owning document.
  prefs: []
  type: TYPE_NORMAL
- en: You can also import scripts using the `importScripts` method as well as use
    `setTimeout` and `setInterval`.
  prefs: []
  type: TYPE_NORMAL
- en: Using Web Workers to get nearby tweets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In `movienow.nearbytweets.js`, we are going to define a couple of methods.
    First of all, let us define an entry point method for getting tweets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have added this, we can invoke it from `movienow.geolocation.js` at
    the very end of the `displayShowtimes` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, so good, but we are not doing anything yet. Let us add a new method
    to `movienow.nearbytweets.js` called `getTweetsByTheater`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The new `getTweetsByTheater` method will take a "theater" element and get tweets
    for it. What we mean by a "theater" element in this case is a `div` tag of the
    `theater` class as defined in `movienow.geolocation.js`. We will then invoke it
    from the `getTweets` method using a simple jQuery call. Augment `getTweets` as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now onto the meat of our script. We will instantiate our Web Worker. Let us
    start by adding a skeleton of the Web Worker mechanism. Add the following to the
    `getTweetsByTheater` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To finish out the skeleton, we will add a new JavaScript file called `movienow.worker.js`
    to the `js` folder. Add the following code snippet to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our initial skeleton of the Web Worker set, let us extract
    the geocode from the theater object passed into `getTweetsByTheater` and pass
    it along to the Web Worker. We will take the `data-location` attribute we added
    earlier in `movienow.geolocation.js` and parse out the latitude and longitude.
    Replace the skeleton `worker.postMessage()` invocation with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we are passing the latitude and longitude to the Web Worker, let us
    update it to invoke the service we implemented at the beginning of this chapter.
    Add the following to the body of the event listener in `movienow.worker.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we are using `XMLHttpRequest`. Normally, we would use the jQuery
    `ajax` method to make such a call. However, since jQuery has dependencies on the
    DOM and—as you may recall—the DOM is not available in this context, we cannot
    use it here. Instead, we will have to invoke the object directly and make the
    request. Once the AJAX request is made and the `onreadystatechange` event is triggered,
    the payload is passed back to the client via `self.postMessage()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete `movienow.worker.js` code should look similar to the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is possible to implement Web Workers without creating a separate worker
    file. You can check out a tutorial on implementing this technique at the following
    location: [http://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers](http://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers)'
  prefs: []
  type: TYPE_NORMAL
- en: Updating the event listener
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Going back to `movienow.nearbytweets.js`, we can update the event listener
    to take the JSON object returned from the Web Worker. If you look at the following
    code that we will add to the event listener body, you will see that we get the
    returned data and loop through the result set to capture the text of each tweet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that we defined the `objectifyJSON` function in previous chapters inside
    `movienow.geolocation.js`. It returns the same input if the parameter passed is
    an object and parses the content and returns an object if it is a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we are doing two things. First, we are appending a tweet count to the
    theater name (notice that we verify the number of tweets to add a singular **tweet**
    or plural **tweets** label). Secondly, we are adding a `section` element containing
    an unordered list of tweets. The target behavior is that we click on the tweet
    count and display the tweets. In addition, we will need to add two more methods
    to the `nearbytweets` object to show and hide the tweets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete `movienow.nearbytweets.js` code should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Before we go on, we need to make one more modification to `movienow.geolocation.js`.
    Because we are mimicking the same behavior as the info and ratings buttons, we
    will need to make sure we are hiding and showing these in conjunction with the
    nearby tweets section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the `showCharts` method by changing the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We will change it to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the `showDetails` method by changing the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Styling the tweets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the mechanics are set up for retrieving and loading nearby tweets,
    we will need to add some styles to make everything look complete. First, we will
    need to add the same treatment for the new nearby-tweets section as we have for
    the description and charting sections. We will do this by modifying the following
    lines in `styles.css`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look for the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it by adding a selector for `nearby-tweets`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Likewise, look for the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it by adding a selector for `nearby-tweets`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the following code to `styles.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'With the styles in place, we can test out our behavior by previewing our changes.
    You should see the following when the data loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the tweets](img/5689_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice **(18 tweets)** next to the theater name. It is the result of the Web
    Worker''s efforts. If you click on it, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the tweets](img/5689_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If all goes well, the nearby tweets section should open, revealing the latest
    tweets that were posted near the theater's location.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We walked through the anatomy of a Web Worker, how to set one up, and how it
    can be used to solve problems without disaffecting the user experience. Although
    a contrived example, we stepped through how to use Web Workers to get tweets near
    a theater based on its geocode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some real world use cases for Web Workers include:'
  prefs: []
  type: TYPE_NORMAL
- en: Processor-intensive calculations that should not block the general enterprise
    application flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auto-correction and syntax highlighting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting images to a message queue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consuming data in parallel using concurrent AJAX requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will walk through debugging applications. We will cover
    tools available at our disposal to get under the hood and figure out what is happening
    in our enterprise applications. We will also cover some powerful techniques using
    proxies to sniff out problems as they occur.
  prefs: []
  type: TYPE_NORMAL
