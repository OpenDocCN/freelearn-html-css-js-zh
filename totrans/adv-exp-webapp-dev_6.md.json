["```js\nNODE_ENV=production npm start\n\nWarning: connection.session() MemoryStore is not\ndesigned for a production environment, as it will leak\nmemory, and obviously only work within a single process.\n\n```", "```js\nnpm install connect-redis ––save\n\n```", "```js\n, Redis = require('../cache/redis')\n, redis = new Redis()\n, RedisStore = require('connect-redis')(express);\n```", "```js\nvar sessionStore = new express.session.MemoryStore();\n```", "```js\nvar sessionStore = new RedisStore({client: redis.client});\n```", "```js\nredis-cli\nmonitor\n\n```", "```js\nvar config = require('../configuration')\n, RedisStore = require('socket.io/lib/stores/redis')\n, redis  = require('socket.io/node_modules/redis')\n, Redis = require('../cache/redis')\n, pub    = new Redis().client\n, sub    = new Redis().client\n, client = new Redis().client;\n\nfunction Socket(server) {\n    /....\n\n socketio.set('store', new RedisStore({\n redis    : redis\n , redisPub : pub\n , redisSub : sub\n , redisClient : client\n }));\n\n    return socketio;\n};\n```", "```js\nmodule.exports.redis = require('./lib/cache/redis');\nmodule.exports.publisher = require('./lib/cache/publisher');\nmodule.exports.subscriber = require('./lib/cache/subscriber');\nmodule.exports.configuration = require('./lib/configuration');\nmodule.exports.db = require('./lib/db');\nmodule.exports.github = require('./lib/github');\nmodule.exports.project = require('./lib/project');\nmodule.exports.logger = require('./lib/logger');\nmodule.exports.models = require('./lib/models');\n```", "```js\n  \"dependencies\": {\n    \"vision-core\": \"git+ssh://git@github.com:AndrewKeig/vision-core.git#master\",\n```", "```js\nnpm install passport-http ––save\n\n```", "```js\n  \"api\": {\n    \"username\": \"airasoul\",\n    \"password\": \"1234567890\"\n  }\n```", "```js\nvar config = require('vision-core').configuration;\n\nfunction ApiAuth() {\n  this.passport = require('passport');\n  var BasicStrategy = require('passport-http').BasicStrategy;\n\n  this.passport.use(new BasicStrategy({\n  },\n    function(username, password, done) {\n      findUser(username, password, function(err, status) {\n        return done(null, status);\n      })\n    }  \n  ));\n\n  var findUser = function(username, password, callback){\n    var usernameOk = config.get('api:username') === username;\n    var passwordOk = config.get('api:password') === password;\n    callback(null, usernameOk === passwordOk);\n  }\n};\nmodule.exports = new ApiAuth();\n```", "```js\nvar express = require('express')\n  , http = require('http')\n  , config = require('vision-core').configuration\n  , db = require('vision-core').db\n  , apiAuth = require('../auth')\n  , middleware = require('../middleware')\n  , routes = require('../routes')\n  , app = express();\n\napp.set('port', config.get('express:port'));\napp.use(express.logger({ immediate: true, format: 'dev' }));\napp.use(express.bodyParser());\napp.use(apiAuth.passport.initialize());\napp.use(app.router);\n\napp.all('*', apiAuth.passport.\n  authenticate('basic', { session: false }));\napp.param('id', middleware.id.validate);\napp.get('/heartbeat', routes.heartbeat.index);\napp.get('/project/:id', routes.project.get);\napp.get('/project', routes.project.all);\napp.post('/project', routes.project.post);\napp.put('/project/:id', routes.project.put);\napp.del('/project/:id', routes.project.del);\napp.get('/project/:id/repos', routes.github.repos);\napp.get('/project/:id/commits', routes.github.commits);\napp.get('/project/:id/issues', routes.github.issues);\napp.use(middleware.notFound.index);\n\nhttp.createServer(app).listen(app.get('port'));\nmodule.exports = app;\n```", "```js\n \"express\": {\n    \"port\": 3001\n  }\n```", "```js\n  \"api\": {\n    \"url\":  \"http://airasoul:1234567890@127.0.0.1:3001\"\n  }\n```", "```js\nnpm install request --save\n\n```", "```js\nvar logger = require('vision-core').logger\n, S = require('string')\n, config = require('vision-core').configuration\n, request = require('request')\n, api = config.get('api:url');\n\nexports.all = function(req, res){\n  logger.info('Request.' + req.url);\n\n  var userId = req.query.user || req.user.id;\n  var url = api + '/project?user=' + userId ;\n\n  request.get(url, function (error, response, body) {\n    return res.json(response.statusCode, JSON.parse(body));\n  });\n};\nexports.get = function(req, res){\n  logger.info('Request.' + req.url);\n\n  var url = api + '/project/' + req.params.id;\n\n  request.get(url, function (error, response, body) {\n    return res.json(response.statusCode, JSON.parse(body));\n  });\n};\n\nexports.put = function(req, res){\n  logger.info('Put.' + req.params.id);\n\n  if (S(req.body.name).isEmpty() )\n  return res.json(400, 'Bad Request');\n\n  var url = api + '/project/' + req.params.id;\n\n  request.put(url, { form: req.body },\n  function (error, response, body) {\n    return res.json(response.statusCode, body);\n  });\n};\n\nexports.post = function(req, res){\n  logger.info('Post.' + req.body.name);\n\n  if (S(req.body.name).isEmpty() )\n  return res.json(400, 'Bad Request');\n\n  var url = api + '/project/';\n\n  request.post(url, { form: req.body },\n  function (error, response, body) {   \n    var parsed = JSON.parse(body);\n    res.location('/project/' +  parsed._id);\n    return res.json(response.statusCode, parsed);\n  });\n};\n\nexports.del = function(req, res){\n  logger.info('Delete.' + req.params.id);\n\n  var url = api + '/project/' + req.params.id;\n\n  request.del(url, function (error, response, body) {\n    return res.json(response.statusCode, body);\n  });\n};\n```", "```js\nvar logger = require('vision-core').logger\n, config = require('vision-core').configuration\n, request = require('request')\n, api = config.get('api:url');\n\nexports.repos = function(req, res){\n  logger.info('Request.' + req.url);\n\n  var url = api + '/project/' + req.params.id + \"/repos\";\n\n  request.get(url, function (error, response, body) {\n    return res.json(response.statusCode, JSON.parse(body));\n  });\n};\n\nexports.commits = function(req, res){\n  logger.info('Request.' + req.url);\n\n  var url = api + '/project/' + req.params.id + \"/commits\";\n\n  request.get(url, function (error, response, body) {\n    return res.json(response.statusCode, JSON.parse(body));\n  });\n};\n\nexports.issues = function(req, res){\n  logger.info('Request.' + req.url);\n\n  var url = api + '/project/' + req.params.id + \"/issues\";\n\n  request.get(url, function (error, response, body) {\n    return res.json(response.statusCode, JSON.parse(body));\n  });\n};\n```", "```js\nbeforeEach(function(done){\n  var proj = {\n    name: \"test name\"\n    , user: login.user  \n    , token: login.token\n    , image: \"/img/\"\n    , repositories    : [ \"node-plates\" ]\n  };\n  var url = api + '/project';\n\n  req.post(url, { form: proj },\n    function (error, response, body) {\n      id = JSON.parse(body)._id;\n      done()\n  });    \n});\n\nafterEach(function(done){\n  var url = api + '/project/' + id;\n\n  req.del(url, function (error, response, body) {   \n    done()\n  });    \n});\n```", "```js\nvar cluster = require('cluster')\n, http = require('http')\n, numCPUs = require('os').cpus().length\n, logger = require('../logger');\n\nfunction Cluster() {}\n\nCluster.prototype.run = function(module){\n  if (cluster.isMaster) {\n    for (var i = 0; i < numCPUs; i++) {\n      cluster.fork();\n    }\n\n    cluster.on('exit', function(worker, code, signal) {\n      logger.info('Worker ' + worker.process.pid + ' died');\n    });\n  } else {\n   require(module);\n  }\n}\n\nmodule.exports = Cluster;\n```", "```js\nmodule.exports.cluster = require('./lib/cluster');  \n```", "```js\nswitch (process.env['NODE_ENV']) {\n  case 'COVERAGE':\n    module.exports = require('./lib-cov/express');\n    break;\n  case 'TEST':\n    module.exports = require('./lib/express');\n    break;\n  default:\n var Cluster = require('vision-core').cluster\n , cluster = new Cluster();\n cluster.run(__dirname + '/lib/express');\n    break;\n}\n```", "```js\nnpm install hipache -g\n\n```", "```js\nsudo nano /private/etc/hosts\n\n```", "```js\n127.0.0.1  web.vision.net\n127.0.0.1  api.vision.net\n\n```", "```js\ndscacheutil -flushcache\n\n```", "```js\n{\n    \"server\": {\n        \"accessLog\": \"hipache_access.log\",\n        \"port\": 8443,\n        \"workers\": 5,\n        \"maxSockets\": 100,\n        \"deadBackendTTL\": 30,\n        \"address\": [\"127.0.0.1\"],\n        \"address6\": [\"::1\"],\n        \"https\": {\n            \"port\": 8443,\n            \"key\": \"lib/secure/key.pem\",\n            \"cert\": \"lib/secure/cert.pem\"\n        }\n    },\n    \"redisHost\": \"127.0.0.1\",\n    \"redisPort\": 6379,\n    \"redisDatabase\": 0\n}\n```", "```js\nfunction Server(app){\n if (process.env['NODE_ENV'] === \"PRODUCTION\")\n return http.createServer(app).listen(app.get('port'));\n\n  var httpsOptions = {\n    key: fs.readFileSync('./lib/secure/key.pem'),\n    cert: fs.readFileSync('./lib/secure/cert.pem')\n  };\n\n  return https.createServer(httpsOptions,app).listen(app.get('port'));\n}\n```", "```js\n{\n    \"server\": {\n        \"accessLog\": \"hipache_access.log\",\n        \"port\": 3001,\n        \"workers\": 5, \n        \"maxSockets\": 100,\n        \"deadBackendTTL\": 30,\n        \"address\": [\"127.0.0.1\"],\n        \"address6\": [\"::1\"]\n    },\n    \"redisHost\": \"127.0.0.1\",\n    \"redisPort\": 6379,\n    \"redisDatabase\": 0\n}\n```", "```js\n  \"auth\": {\n    \"homepage\": \"https://web.vision.net:8443\"\n  , \"callback\": \"https://web.vision.net:8443/auth/github/callback\"\n  , \"clientId\": \"5bb691b4ebb5417f4ab9\"\n  , \"clientSecret\": \"44c16f4d81c99e1ff5f694a532833298cae10473\"\n  }\n```", "```js\n  \"api\": {\n    \"url\":  \"http://airasoul:1234567890@api.vision.net:3001\"\n  }\n```", "```js\napp.set('port', process.env.PORT || config.get('express:port'));\n```", "```js\ncd vision-web\nhipache --config ./config/server.json\n\n```", "```js\ncd vision-api\nhipache --config ./config/server.json\n\n```", "```js\nredis-cli\n\n```", "```js\nrpush frontend:web.vision.net web.vision\nrpush frontend:web.vision.net http://127.0.0.1:3003\n\n```", "```js\nlrange frontend:web.vision.net 0 -1\n\n```", "```js\nrpush frontend:api.vision.net api.vision\nrpush frontend:api.vision.net http://127.0.0.1:3005\n\n```", "```js\nlrange frontend:api.vision.net 0 -1\n\n```", "```js\n/vision-web/NODE_ENV=production PORT=3003 npm start\n/vision-api/NODE_ENV=production PORT=3005 npm start\n/vision-worker/npm start\n\n```", "```js\n/vision-web/NODE_ENV=production PORT=3004 npm start\n/vision-api/NODE_ENV=production PORT=3006 npm start\n\n```", "```js\nrpush frontend:web.vision.net http://127.0.0.1:3004\nrpush frontend:api.vision.net http://127.0.0.1:3006\n\n```"]