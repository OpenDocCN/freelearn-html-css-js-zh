["```js\n//Create our application namespace\nvar my = {\n  isAndroid : Ti.Platform.osname === 'android',\n  dbfileext : require('dbfileext')\n};\n```", "```js\nVar myDbFile = my.dbfileext.dbFile('testdb');\n```", "```js\nmy.dbfileext.dbDirectory();\n```", "```js\nmy.dbfileext.dbExists('testdb');\n```", "```js\nmy.dbfileext.dbRemoteBackup('testdb',true);\n```", "```js\nmy.dbfileext.dbRename('current name','new name');\n```", "```js\nvar installedDatabase = my.dbfileext.dbList();\n```", "```js\nmy.dbfileext.dbRemove('newtest');\n```", "```js\n//Create our application namespace\nvar my = {\n    isAndroid : Ti.Platform.osname === 'android',dbfileext : require('dbfileext')\n};\n\nvar testDb = Ti.Database.open('testdb');\n\n```", "```js\nvar testFileReference = (function(){\n  if(my.isAndroid){\n    return Ti.Filesystem.getFile(\n  }else{\n    return testDb.file;\n  }\n})();\n```", "```js\nTi.API.info(\"Does the module return the same as our test?\");\nTi.API.info((testFileReference.nativePath === my.dbfileext.dbFile('testdb').nativePath) ?\n\"Test Pass\" : \"Test Failed\");\n```", "```js\nTi.API.info(\"Your database directory is \" + my.dbfileext.dbDirectory());\n```", "```js\nTi.API.info(\"Does the exists test work?\");\nTi.API.info((testFileReference.exists() === my.dbfileext.dbExists('testdb')) ? \"Both Exist\" : \"Test Failed\");\n```", "```js\nmy.dbfileext.dbRename('testdb','oldtestdb');\nTi.API.info(\"Does the test db exist?  \" + my.dbfileext.dbExists('testdb'));\nTi.API.info(\"How about the oldtest one? Does that exist?  \" + my.dbfileext.dbExists('oldtest'));\n```", "```js\nTi.Database.open('test1');\nTi.Database.open('test2');\nTi.Database.open('test3');\n```", "```js\nvar installedDb =  my.dbfileext.dbList();\n```", "```js\ninstalledDb.forEach(function(db) {\n  Ti.API.info(\"Db Name = \" + db.dbName);\n  Ti.API.info(\"nativePath = \" + db.nativePath);\n});\n```", "```js\nmy.dbfileext.dbRemove('oldtest');\nTi.API.info(\"db still exists?  \" + my.dbfileext.dbExists('oldtest'));\n```", "```js\nexports.tableExists = function (dbName, tableName){\n  var conn = Ti.Database.open(dbName);\n  var selectSQL ='SELECT name FROM sqlite_master 'selectSQL +=' WHERE type=\"table\" AND name=?';\n\n  var getReader = conn.execute(selectSQL,tableName);\n  var doesExist = (getReader.getRowCount() > 0 );\n\n  //Clean-up\n  getReader.close();\n  conn.close();\n  getReader = null;\n  conn = null;\n\n  return doesExist;\n};\n```", "```js\n//Create our application namespace\nvar my = {\n  dbTableChecker : require('dbtablechecker')\n};\n```", "```js\nvar win = Ti.UI.createWindow({\n  backgroundColor:'#fff',layout:'vertical'\n});\n```", "```js\nvar tableExistsBtn = Ti.UI.createButton({\n    title:'Does Table Exist?', height:50, right:5, left:5, top: 20\n});\nwin.add(tableExistsBtn);\n```", "```js\ntableExistsBtn.addEventListener('click',function(e){\n  //Check if our table exists in our database\n  var doesExist = my.dbTableChecker.\ntableExists('myDatabase','myTable');\n  //Alert the user if the table exists or not\n  alert('Table \"myTable\" ' + (doesExist ? ' exists' : \"does not exist\"));\n});\n```", "```js\nvar makeTestBtn = Ti.UI.createButton({\n  title:'Create Test Table', height:50, right:5, left:5, top: 20\n});\nwin.add(makeTestBtn);\n```", "```js\nmakeTestBtn.addEventListener('click',function(e){\n  //Create a sample table\n my.testers.makeTable('myDatabase','myTable');\n\n  //Alert the user a test table has been created\n  alert('Table \"myTable\" was created.');\n});\n```", "```js\nvar removeTestBtn = Ti.UI.createButton({\n  title:'Remove Test Table', height:50, right:5, left:5, top: 20\n});\nwin.add(removeTestBtn);\n```", "```js\nremoveTestBtn.addEventListener('click',function(e){\n  //Create a sample table\n  my.testers.removeTable('myDatabase','myTable');\n  //Alert the user a test table has been removed\n  alert('Table \"myTable\" was removed');\n});\n```", "```js\nmy.testers = {\n```", "```js\n      makeTable : function(dbName,tableName){\n        var conn = Ti.Database.open(dbName);\n        var createSql = 'CREATE TABLE IF NOT EXISTS ' \n        createSql += tableName ;\n        createSql += '(id INTEGER PRIMARY KEY AUTOINCREMENT,';\n        createSql += ' my_column TEXT)';\n\n        conn.execute(createSql);\n\n        //Clean-up\n        conn.close();\n        conn = null;\n      },\n    ```", "```js\n      removeTable : function(dbName,tableName){\n        var conn = Ti.Database.open(dbName);\n        var dropSql = 'DROP TABLE IF EXISTS ' + tableName;\n\n        conn.execute(dropSql);\n\n        Conn.close();\n        conn = null;\n      }\n    };\n    ```", "```js\nexports.tableExists = function (dbName, tableName){\n  var conn = Ti.Database.open(dbName);\n```", "```js\n      var selectSQL ='SELECT name FROM sqlite_master; selectSQL +=' WHERE type=\"table\" AND name=?';\n    ```", "```js\n      var getReader = conn.execute(selectSQL,tableName);\n    ```", "```js\n      var doesExist = (getReader.getRowCount() > 0 );\n    ```", "```js\n      getReader.close();\n      conn.close();\n      getReader = null;\n      conn = null;\n    ```", "```js\n      return doesExist;\n    };\n    ```", "```js\n//Create our application namespace\nvar my = {\n  dossier : require('dossier');\n};\n```", "```js\nvar sourceDir = Ti.Filesystem.getFile(Ti.Filesystem.resourcesDirectory, 'SampleData');\n\nvar targetDir = Ti.Filesystem.getFile(\n  Ti.Filesystem.applicationDataDirectory\n  + '/NewSampleData');\n```", "```js\nvar listTargetContents = my.dossier.listContents(sourceDir.nativePath);\n```", "```js\nmy.dossier.copy(sourceDir.nativePath,targetDir.nativePath);\n```", "```js\nmy.dossier.move(sourceDir.nativePath,targetDir.nativePath); \n```", "```js\n//Create our application namespace\nvar my = {\n  timer : require('timelogger')\n};\n```", "```js\nvar win = Ti.UI.createWindow({\n  backgroundColor:'#fff',layout:'vertical'\n});\n```", "```js\n    var noTransactionLabel = Ti.UI.createLabel({\n        text: \"No Transactions: NA\",height:20, right:5, left:5, top: 40, textAlign:'left',color:'#000', font:{fontWeight:'bold',fontSize:14}\n    });\n    win.add(noTransactionLabel);\n    ```", "```js\n    var withTransactionLabel = Ti.UI.createLabel({\n      text: \"With Transactions: NA\",\n      height:20, right:5, left:5, \n      top: 10, textAlign:'left',\n      color:'#000', font:{fontWeight:'bold',fontSize:14}\n    });\n    win.add(withTransactionLabel);\n    ```", "```js\n    var runTestButton = Ti.UI.createButton({\n        title:'Start Performance Test', height:50, right:5, left:5, top: 40\n    });\n    win.add(runTestButton);\n    ```", "```js\n    runTestButton.addEventListener('click',function(e){\n    ```", "```js\n    var noTransactions = performanceTest.run(false);\n    noTransactionLabel.text = \"No Transactions: \" + noTransactions + ' ms';\n    ```", "```js\n    var withTransactions = performanceTest.run(true);\n    withTransactionLabel.text = \"With Transactions: \" + withTransactions + ' ms';\n    });\n    ```", "```js\nvar dbTestHelpers = {\n```", "```js\n      maxIterations : 100001,\n    ```", "```js\n      createOrResetDb : function(){\n        return Ti.Database.open(\"perf_test\");\n      },\n    ```", "```js\n      resetTestTable : function(db){\n        var dropSql = 'DROP TABLE IF EXISTS TEST_INSERT';\n        var createSql = 'CREATE TABLE IF NOT EXISTS ';\n        createSql += 'TEST_INSERT ';\n        createSql += '(TEST_ID INTEGER, TEST_NAME TEXT, ';\n        createSql += 'TEST_DATE DATE)';\n        db.execute(dropSql); \n        db.execute(createSql);\n      },\n    ```", "```js\n      createSQLStatement : function(){\n        var sql = 'INSERT INTO TEST_INSERT ';\n        sql += '(TEST_ID, TEST_NAME, TEST_DATE) ';\n        sql += 'VALUES(?,?,?)';\n        return sql;\n      },\n    ```", "```js\n      createDummyObject : function(iterator){\n        var dummy = {\n          id:iterator, name : 'test record ' + iterator, date : new Date()\n        };â€©\n        return dummy;\n      }\n    };\n    ```", "```js\nvar performanceTest = {\n  run : function(useTransaction){\n```", "```js\n        var db = dbTestHelpers.createOrResetDb();\n        dbTestHelpers.resetTestTable(db);\n    ```", "```js\n        var dummyObject = null;\n        var insertSQL = dbTestHelpers.createSQLStatement();\n        var insertTimer = new my.timer(\"Insert Timer\");\n    ```", "```js\n        if(useTransaction){\n          db.execute('BEGIN;');\n        }\n    ```", "```js\n        for (var iLoop = 0; iLoop < dbTestHelpers.maxIterations; iLoop++){\n          dummyObject = dbTestHelpers.createDummyObject(iLoop);\n          db.execute(insertSQL,dummyObject.id,dummyObject.name,dummyObject.date);\n        }\n      }\n    ```", "```js\n      if(useTransaction){\n        db.execute('COMMIT;');\n      }\n    ```", "```js\n      var totalInsertTime = insertTimer.getResults().msElapsed;\n      db.close();\n      //Return total ms elapsed\n      return totalInsertTime;\n      }\n    };\n    ```", "```js\n//Create our application namespace\nvar my = {\n  dbProvider : require('dblazyprovider')\n};\n```", "```js\nvar dbSetup = new my.dbProvider(\"myDb\");\nvar createSql = 'CREATE TABLE IF NOT EXISTS ';\ncreateSql += 'MY_TEST (TEST_ID INTEGER, ';\ncreateSql += 'TEST_NAME TEXT)';\ndbSetup.connect().execute(createSql);\ndbSetup.connect().execute('DELETE FROM MY_TEST');\ndbSetup.close();\n```", "```js\nvar win = Ti.UI.createWindow({\n  backgroundColor:'#fff',layout:'vertical'\n});\n```", "```js\nvar insertDemoBtn = Ti.UI.createButton({\n  title:'Run Inserts', height:50, right:5, left:5, top: 20;\n});\nwin.add(insertDemoBtn);\n```", "```js\n    insertDemoBtn.addEventListener('click',function(e){\n      var maxIteration = 1000;\n      var sql = 'INSERT INTO MY_TEST ';\n      sql+='(TEST_ID, TEST_NAME) VALUES(?,?)';\n      var db = new my.dbProvider(\"myDb\");\n      for (var iLoop = 0; iLoop < maxIteration; iLoop++){\n    ```", "```js\n       db.connect(true).execute(sql,iLoop,'test ' + iLoop);\n    ```", "```js\n     db.close();\n        alert('Test done ' + maxIteration + ' rows inserted');\n      });\n    ```", "```js\n  var selectDemoBtn = Ti.UI.createButton({\n    title:'Run Select', height:50, right:5, left:5, top: 20\n  });\n  win.add(selectDemoBtn);\n```", "```js\n      selectDemoBtn.addEventListener('click',function(e){\n        var db = new my.dbProvider(\"myDb\");\n        var selectSQL = 'SELECT * FROM MY_TEST ';\n    ```", "```js\n     var getReader = db.connect().execute(selectSQL);\n        var rowCount = getReader.getRowCount();\n    ```", "```js\n        db.close();\n        alert('Rows available ' + rowCount);\n      });\n    ```", "```js\n//Create our application namespace\nvar my = {\n  dbProvider : require('dblazyprovider')\n};\n//Create a new dbLazy object\nvar db = new my.dbProvider(\"myDb\");\n\n```", "```js\ndb.connect().execute('Your SQL goes here');\n```", "```js\ndb.connect(true).execute('Your SQL goes here');\n```", "```js\ndb.beginTransaction();\n```", "```js\ndb.commit();\n```", "```js\ndb.open();\n```", "```js\ndb.close();\n```", "```js\n//Create our application namespace\nvar my = {\n  monglo : require('./Monglo/monglodb').Monglo\n};\n```", "```js\nmy.db = my.monglo('myDb');\n```", "```js\nvar tistore = require('./Monglo/index');\n```", "```js\nmy.db.use('store', tistore);\n```", "```js\nmy.db.someCollection = my.db.collection('foo');\n```", "```js\nmy.db.someCollection.on('insert', function(){\n  Ti.API.info(\"Document Inserted\") ;\n});\nmy.db.someCollection.on('update', function(){ \n  Ti.API.info(\"Document Updated\");\n});\nmy.db.someCollection.on('remove', function(){\n  Ti.API.info(\"Document Removed\");\n});\nmy.db.someCollection.on('find', function(){ \n  Ti.API.info(\"Find Used\");\n});\nmy.db.someCollection.on('createCollection', function(){ \n  Ti.API.info(\"Collection Created\");\n});\nmy.db.someCollection.on('removeCollection', function(){\n  Ti.API.info(\"Collection Removed\");\n});\n```", "```js\nmy.db.someCollection.insert({text: \"record 1\", \nbatchId:'sample_test'}, function ( error, doc )\n\n```", "```js\n  Ti.API.info('Error: ' + JSON.stringify(error));\n  Ti.API.info('doc: ' + JSON.stringify(doc));\n});\n//Create second record\nmy.db.someCollection.insert({text: \"record 2\", batchId:'sample_test'}, function ( error, doc ){ });\n//Create third record\nmy.db.someCollection.insert({text: \"record 3\", batchId:'sample_test'}, function ( error, doc ){ });\n```", "```js\nmy.db.someCollection.find({batchId:'sample_test'}, \nfunction ( error, cursor ){\n```", "```js\n  cursor.forEach(function(doc){ \n    Ti.API.info('doc: ' + JSON.stringify(doc));\n  });\n});\n```", "```js\nmy.db.someCollection.update({text: \"record 1\"}, {$set: {text: 'updated record 1'}}, function ( error, doc ){ \n  Ti.API.info('Error: ' + JSON.stringify(error));\n  Ti.API.info('doc: ' + JSON.stringify(doc));\n});\n```", "```js\nmy.db.someCollection.findOne({text: 'updated record 1'}, function ( error, doc ){ \n  Ti.API.info('Error: ' + JSON.stringify(error));\n  Ti.API.info('doc: ' + JSON.stringify(doc));\n});\n```", "```js\nmy.db.someCollection.remove({batchId:'sample_test'}, function (error) { \n  Ti.API.info('Error: ' + JSON.stringify(error));\n});\n```"]