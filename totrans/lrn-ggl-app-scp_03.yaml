- en: Chapter 3. Parsing and Sending E-mails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to create basic GAS elements such as
    custom menu, dialog, and toast. You also learned how to debug your script codes.
    In this chapter, you will learn many real-world Gmail and Contacts applications
    including a mail merger application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, if you go through left and right square brackets inside code
    like `[[ value ]]`, then replace `value` with the actual value including the brackets.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the e-mail ID is `example@emample.com` and you go through `My
    email id [[emailid]] \n`, then replace it with `My email id example@example.com
    \n`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Gmail Contacts by script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can create Gmail Contacts by script using the `createContact` method of
    the `ContactsApp` class. For example, if the name is Anika Sumi and the e-mail
    ID is `<[anika@example.com](mailto:anika@example.com)>`, then the `ContactsApp.createContact("Anika",
    "Sumi", "anika@example.com")` code will create the expected contact.
  prefs: []
  type: TYPE_NORMAL
- en: 'To know more available methods of the `ContactsApp` class, in the code editor,
    type `ContactsApp` and `.` (a dot) next to it. Then, you can view all the available
    methods with parameter details in code hint as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Gmail Contacts by script](img/B05010_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see deprecated methods struck out in the preceding screenshot; you are
    advised not to use those methods.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Sheet, cell, range, and offset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Google Sheet's spreadsheet has one or more Sheets or tabs in it. Sheets are
    indexed from left to right starting from 0\. For example, the left-most Sheet
    is referred to by the index 0, the next one by 1, and so on. In GAS, we can refer
    to a Sheet by its index or by its name.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: The `getSheets()` method returns an array of Sheet objects. From the array,
    we can refer to an individual Sheet by its index.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `getSheetByName("Contacts")` function returns a Sheet object with the name
    `Contacts`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Google Sheets, column label starts from the letter *A*, and is counted in
    a programmatic point of view, from left to right starting with the number 1\.
    For example, column *A* is 1, *B* is 2, and so on. Rows are identified by their
    respective label numbers. In GAS, we can reference a cell or a range of cells
    by *A1* notation or by separate row and column numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: The `getRange('D1:F10')` method returns a `Range` object referencing the cells
    from *D1* to *F10*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `getRange(1,4,10,3)` method returns a `Range` object referencing the same
    range *D1:F10*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offset is an indirect referencing method to refer to a cell/range from a base
    cell reference. An offset reference is determined by how many rows and columns
    it shifted from the base cell.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the base cell is *D1*, then the `offset(10,3)` method returns
    the range *D1:F10*.
  prefs: []
  type: TYPE_NORMAL
- en: Reading and writing the Sheet data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often you need to read and/or write data to/from the Sheet. Usually, use the
    `getValue` method to read a value from a cell and the `getValues` method to read
    values from a range. The `getValue` method returns a single value and the `getValues`
    method returns a 2-dimensional array of values. To write single value and 2-dimensional
    array of values, use `setValue` and `setValues` methods respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Gmail Contact search application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will create an application to search existing contacts. This application
    is able to search and list your Gmail Contacts in Sheets. Create a new Sheet and
    rename `Sheet1` to `Contacts` and set it up as shown in the following screenshot.
    Create a button and assign the function name `searchContacts` to it, as you learned
    in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a Gmail Contact search application](img/B05010_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create the `searchContacts` function as listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, `clear` is the `Range` object's method to clear everything including format
    and formula, in a range of cells. You can use the `clear` method of the `Sheet`
    object to clear the entire Sheet. Alternatively, you can use the `clearContent`
    method to clear content only.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not copy paste the preceding code, but edit it yourself. By doing so, you'll
    be aware of available method signatures (method names and parameters) of classes
    such as `SpreadsheetApp`, `ContactApp`, and `Contact` with the help of the script
    editor's code hint feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have edited and saved code without error, turn to the spreadsheet
    window. If you enter a search term in the *A3* cell (search box) and click on
    **Search**, then the first 10 contacts will be listed as shown in the following
    screenshot (the listed contacts details vary as per your Gmail username and contacts):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a Gmail Contact search application](img/B05010_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'What if you want to update the listed contacts by the `searchContacts` function?
    For example, you may want to update the phone number and/or address of a contact.
    To update contact fields, we will create another function called `updateContacts`.
    Before creating that, in the `Contacts` Sheet, add a button next to **Search**
    named **Update** and assign function name `updateContacts` as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a Gmail Contact search application](img/B05010_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Update those field values you would like to update. Now create the function
    listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding function retrieves contacts by the given e-mail ID; and, for each
    contact, it also retrieves field values and updates/adds those field values with
    the Sheet values. This function can update/add full name, phone, and address fields
    but not the e-mail ID.
  prefs: []
  type: TYPE_NORMAL
- en: Building the Gmail parser application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `parseEmail` function is able to check 10 latest inbox threads, extract
    the **from** field and body text from unread messages, and put the gathered data
    in the left-most tab of the Sheet. Create the `parseEmail` function as listed
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can use `RegExp` to extract only the required data from the message body
    text.
  prefs: []
  type: TYPE_NORMAL
- en: Properties service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GAS provides the properties service to store and/or to retrieve project-related
    data. The data organized as key/value pairs, can be set manually or by script
    codes. The following screenshot shows how you can set properties manually. To
    see this dialog, click on the **File** menu and select **Project properties**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Properties service](img/B05010_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use manually created project properties in script codes, but the properties
    created by code sometimes may not be visible in the **Project properties** dialog.
    You can create, update, or delete project properties in codes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next task, we are going to use project properties.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Gmail attachments to Drive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `saveEmailAttachmentsToDrive` function can download Gmail attachments to
    Drive. In this function `PropertiesService` is used to avoid repeated downloading
    of the same attachment. The `createFolder_` function is used to create folders,
    if not already exist, with the given name in Drive.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If any function name is appended with `_`, then it will not be listed under
    the **Run** menu. You cannot run these functions directly, but they can be called
    from the other functions. These are called **private functions**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create the `createFolder_` function in the same script file along with
    the `saveEmailAttachmentsToDrive` function or in a separate script file such as
    `Library.gs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding function calls the following `createFolder_` function with the
    folder name as an argument. The function `createFolder_` looks for the given folder,
    creates if it does not exist, and returns its unique ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding function the `getFolders` method is an iterator method. An
    iterator does not return all the data in one go, but only the current data. To
    get successive data, you should call next method repeatedly until `hasNext` became
    `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Sending e-mails using the MailApp service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `sendEmail` function is able to send e-mails with prefixed messages. Remember
    to replace e-mail ID and message text. This service is mainly used to send e-mails
    with limited methods (only `sendEmail` and `getRemainingDailyQuota`), and it cannot
    access your Gmail account. You can use the `GmailApp` class for more methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Sending an e-mail notification on Form submission
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine if you created a Form and presented it to many users. It would be tedious
    to open the response Sheet every time to verify whether any user has submitted
    the Form or not. The problem would be worse if you created many Forms and sent
    them to many users. It will be helpful receiving a notification e-mail whenever
    there is a Form submission.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this task, create a Form with three fields as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending an e-mail notification on Form submission](img/B05010_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Submit the test data from a live form. Your submitted data will be saved in
    a response Sheet named something like `Form Responses 1`. The column headers will
    be as per your Form fields as shown in the following screenshot. Data may vary
    as per your input.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending an e-mail notification on Form submission](img/B05010_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the script file, you need to make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter the `sendEmail` function mentioned from the following code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the receiver's e-mail ID. If you run this function, then it will send
    an e-mail with the last submitted data (bottom-most row) in the response Sheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the Sheet's actual name and the name used in the code; they should be
    exactly the same. If you are not sure, right-click on the Sheet name and select
    **Rename...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the Sheet name from the **Rename** dialog and paste it in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You created a Form and a function to send response data to an e-mail ID. Creating
    a trigger so as to run the `sendEmail` function as soon as a Form is submitted
    will complete this task.
  prefs: []
  type: TYPE_NORMAL
- en: Creating triggers manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a trigger, in the code editor click on **Resources** and select **Current
    project''s triggers** then the **Current project''s triggers** dialog will open.
    Already created triggers will be listed in this dialog, otherwise a link to create
    a new trigger will appear. Click on the **No triggers set up. Click here to add
    one now** link. Select the options from the dropdowns as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating triggers manually](img/B05010_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Under the **Run** heading, select the `sendEmail` function for which you want
    to create the trigger. Select **From spreadsheet** and **On form submit** under
    the **Events** heading as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: If a Form user submits data to the spreadsheet, the trigger will run the `sendEmail`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: For more info on triggers, please go to [https://developers.google.com/apps-script/guides/triggers/](https://developers.google.com/apps-script/guides/triggers/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating and deleting triggers by script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create or delete triggers programmatically as shown in the following
    sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the `deleteTriggers` function, the `Utilities` service's `sleep` method is
    used to pause the script temporarily for the specified milliseconds. Otherwise,
    you may experience the `Too many service invocation…` error.
  prefs: []
  type: TYPE_NORMAL
- en: Forwarding e-mails if the specific keyword is found in the message body
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `forwardEmails` function is able to forward e-mail messages, if a specific
    keyword is found in the body text to a prefixed e-mail ID. Be cautious about the
    number of iterations of the `for` loop while testing your code so that you can
    avoid lot of messages forwarded in error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Sending e-mail with attachments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can attach any type of file to your e-mail message by setting options as
    shown in the following code. The following code attaches the active spreadsheet's
    left-most Sheet content as PDF.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Embedding inline images in an e-mail message
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To embed images such as a logo in your e-mail message, you may use HTML code
    instead of plain text. Upload your image to Google Drive, retrieve, and use that
    file ID in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Building an e-mail merger application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sending personalized e-mails to hundreds of recipients at a time might be a
    time consuming task. Composing the draft and entering the subject and recipient's
    e-mail ID for each message might be tedious too. Using this mail merger application,
    you can send the same kind of information to all recipients, but customized to
    some extent. For example, greeting an individual.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is creating a draft in your Gmail as shown in the following
    screenshot. The draft is used as a template. You can use any special character
    to enclose the text to be replaced. In the draft, the code shown in the following
    screenshot uses left (`<<`) and right (`>>`) angled brackets to replace the first
    name with the **First Name** column data in an `EmailList` Sheet. You can include
    any other placeholder or field as per your requirement. Set up the draft, but
    don''t send it now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building an e-mail merger application](img/B05010_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a Sheet with the name as `EmailList` in a new Sheet or existing Sheet.
    Create the column headers as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building an e-mail merger application](img/B05010_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create functions as shown in the following code, in the script editor. Replace
    the draft and sender name with actual values. Set `maxEmails` (this code uses
    `50`) by considering your daily e-mail sending quota:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Populate data in the `EmailList` Sheet. To send e-mails, run the `sendEmails`
    function. The `<<FirstName>>` field in your draft will be replaced as per your
    **First Name** column data in the `EmailList` Sheet. That's it!
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have created a working e-mail merger application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about `ContactsApp`, `MailApp`, and `GmailApp`
    classes and their methods. Using these classes, you created many useful real-world
    applications including an e-mail merger application. In the next chapter, you
    will learn how to create Forms programmatically using `FormApp` and `HtmlService`
    classes. Also you will learn about `doGet` and `doPost` simple trigger functions.
  prefs: []
  type: TYPE_NORMAL
