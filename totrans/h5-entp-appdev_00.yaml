- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5, apart from being the latest buzzword in the Internet era, is quickly
    becoming the *lingua franca* for the web. In fact, HTML5 is the first version
    of HTML to get its own logo ([http://www.w3.org/html/logo](http://www.w3.org/html/logo)).
    To understand the significance of that, one must first know a little history.
  prefs: []
  type: TYPE_NORMAL
- en: '![Preface](img/5869_00_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A brief history of time (client-server edition)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enterprise application development over the decades has been a pendulum swinging
    back and forth between terminal and mainframe, between client and server. In the
    1980s, business logic was largely pushed to the server by "dumb terminals" or
    "thin clients" which did very little except act as a middleman between the user
    and the server. Beginning in the 1990s, logic started to swing to the client with
    "fat clients" bearing the processing burden. With the introduction of the World
    Wide Web in 1991, a new breed of thin client emerged. The pendulum swung once
    again. Or did it?
  prefs: []
  type: TYPE_NORMAL
- en: The shift between client and server has largely been driven by cost and power.
    Early on, investment was made in powerful, costly servers. As PCs became more
    powerful in terms of memory and processing ability, as well as lower in cost,
    it became possible to build applications that could be distributed more easily,
    allow for offline capabilities, and best of all require less powerful (and less
    costly) server infrastructures. However, maintaining, upgrading, and deploying
    "fat clients" created a new burden.
  prefs: []
  type: TYPE_NORMAL
- en: 'Web-based applications eventually emerged to solve the problems of cost, power,
    and maintainability. At first, they appeared to be much like their "thin client"
    predecessors: merely middlemen between users and servers but without the deployment
    overhead. However, with the introduction of technologies such as Java and JavaScript,
    the "thin client" began to put on a little weight. Before long, the processing
    burden began to bleed to the client as applets, scripts, and plugins became more
    commonplace and with them the maintainability problem reappeared. Rather than
    managing distributions of applications, the problem shifted to managing distributions
    of applets, scripts, and plugins.'
  prefs: []
  type: TYPE_NORMAL
- en: The situation was bifurcated by the introduction of "rich clients". Business
    logic became tiered. A separation of concerns became the norm. Let the server
    deal with server stuff. Let the client deal with client stuff. The problem with
    this, however, is that the client took some time to be able to handle the client
    stuff the world needed of it.
  prefs: []
  type: TYPE_NORMAL
- en: A brief history of time (web browser edition)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Tim Berners-Lee introduced his World Wide Web browser to his CERN colleagues
    in 1990, only a glimmer could be seen of what it would one day become. Marc Andreessen
    would introduce Mosaic and graphical browsing in 1993 and Netscape would soon
    follow in 1994\. After that, Microsoft jumped in with Internet Explorer in 1995\.
    Pretty soon, the first browser wars would come and go with Internet Explorer emerging
    as the victor and the remnants of Netscape coalescing around Mozilla and Firefox,
    which was released in 2002\. In the 2000s, Apple released Safari and Google released
    Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: Web browsers however have seldom held parity with one another. The existence
    of web standards and a governing body called the W3C notwithstanding, browser
    makers have nevertheless played to their own tunes. In the beginning, implementations
    of HTML varied widely and the trend continued through HTML 4.0, XHTML, CSS, and
    JavaScript. The variance in implementations and behavior made web development
    difficult and time consuming.
  prefs: []
  type: TYPE_NORMAL
- en: To combat the limitations and inconsistencies of the web browser, technologies
    based on plugins such as Adobe Flash began to flourish continuing where browser-based
    technologies such as HTML, CSS, and JavaScript left off. For years, many websites
    consisted mostly—and sometimes entirely—of technologies such as Flash; such plugins
    even afforded better performance. The notion of **Rich Internet Applications**
    (**RIAs**) prevailed as the pendulum swung back to fatter clients.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See Google's "The Evolution of the Web" for an interactive graphic on web browsers
    and their implementation of modern browser features at [http://evolutionofweb.appspot.com](http://evolutionofweb.appspot.com).
  prefs: []
  type: TYPE_NORMAL
- en: The inclusion of plugin-based technologies became a red herring for the promise
    of the World Wide Web. While connectivity of content was a hallmark of the original
    principles of HTML, content was represented by tags such as `embed`, `object`,
    and `applet` where application modules are embedded onto a web page constituted
    black boxes that hid content from the semantic web.
  prefs: []
  type: TYPE_NORMAL
- en: Web browsers nevertheless evolved. JavaScript frameworks such as jQuery emerged
    to abstract browser differences and offer up richer interactivity. CSS techniques
    emerged to overcome the limitations and inconsistencies between the browsers.
    Newer browsers emerged with better support for web standards.
  prefs: []
  type: TYPE_NORMAL
- en: However, something was missing. Even though applications were being developed
    using browser-based technologies, many application features were left out of the
    browser. Consistent mechanisms to add video/audio playback, offline capabilities,
    and even browser history management were missing. Flash was still looked upon
    as filling in the missing pieces of the web.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, browser development coalesced around HTML5 in 2009 when XHTML 2.0
    was abandoned in lieu of something more backward compatible with earlier versions
    of HTML. HTML5 sought to address two major areas in the browser: the need for
    a more consistent, semantic markup language and the demand for more natively-supported
    browser features. When it was introduced in 2004, it heralded a set of APIs to
    make the browser into a true application development platform and thus more semantically
    amenable.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Features of HTML5**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Media API**: This embeds, plays, and pauses multimedia content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text Track API**: This reads properties of the text tracks of multimedia
    content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drag and drop API**: This natively makes elements draggable by setting an
    attribute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Offline Application Cache**: This saves data locally for offline use'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**History API**: This asserts more control of the back button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Canvas API**: This literally draws all over the web in 2D and 3D'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross Document Messaging**: This overcomes cross-site scripting limitations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microdata**: This adds more semantic content for search engines to find'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MIME Type and Protocol Handler Registration**: This extends applications
    with handlers for additional protocols'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web Workers**: This spawns threads independent of user interaction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web Storage**: This stores data on the client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web Sockets**: This sends two-way messages between server and client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With modern browsers' increasing support for HTML5, reliance on plugin-based
    technologies is starting to give way to browser-based implementations. With the
    APIs that allow for better control of the experience, the client is finally beginning
    to catch up to its promise. Mobile web browsers have especially become a catalyst
    for this. Since Adobe Flash is not supported on devices such as the iPhone and
    iPad, and since implementation of HTML5 features on Safari have grown, HTML5 is
    quickly becoming a standard for mobile web application development. However, if
    this trend is to continue, browser makers and application developers must adhere
    to the developing standards for HTML5, which brings us back to the logo. To right
    the wrongs of the past, HTML5 must have collective agreement on implementation.
    In order to inculcate this, there is a burgeoning movement to enforce standards
    in web browsers and applications, and speed up implementation as adoption looms.
    The HTML5 logo is emblematic of that effort.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Web Hypertext Application Technology Working Group** (**WHATWG**) formed
    in 2004, evolved HTML and conceived of HTML5 as the next step in the evolution
    of the HTML standard. At that time, the W3C was working on the XHTML 2.0 standard;
    however, in 2009, the W3C decided to halt this effort and join the WHATWG in its
    effort to develop HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: In January 2011, it announced that the HTML5 standard would be referred to as
    "HTML" and that the specification would henceforth be a living document.
  prefs: []
  type: TYPE_NORMAL
- en: In December 2012, the **World Wide Web Consortium** (**W3C**), the international
    web standards body, announced that HTML5 is feature complete. Although not a standard
    yet, it finally gives browser makers a stable target upon which to develop HTML5
    features.
  prefs: []
  type: TYPE_NORMAL
- en: It's all about semantics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 makes an attempt to codify information on the web in a more cohesive way
    than before. With previous versions of HTML, content is structured based on how
    it should be displayed rather than its inherent meaning. The `div` tag is often
    used, but what does a `div` tag really mean? To get around this, application developers
    have broken up their content using `id` attributes based on standards and best
    practices of web presentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, application developers use tags such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The obvious problem is that what gets used for the `id` attribute need not follow
    a standard. One application developer could use `id="header"` while another uses
    `id="head"`. In order to standardize structure based on semantics, HTML5 introduces
    a set of new tags that takes the vagaries out of the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML5 introduces a set of new top-level tags, which can be broken down into
    the following categories: content, language, layout, and format.'
  prefs: []
  type: TYPE_NORMAL
- en: Content tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The content tags introduced in HTML5 define how new types of content can be
    embedded into a web page. Content such as sound, video, and graphics are surfaced
    in much the same way text and images have been for so many years.
  prefs: []
  type: TYPE_NORMAL
- en: '`audio`: This tag is used for embedding sound content. Before HTML5, either
    some browsers implemented support for audio inconsistently or a special player
    typically developed using Adobe Flash would have been required to play sound.
    HTML5 removes that dependency and makes the audio player a consistent function
    of the web browser itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`video`: This tag is used for embedding video content. Like with audio, there
    was inconsistent support or a special player was required to play video content.
    Web browsers that support the `video` tag have a built-in video player.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`canvas`: This tag allows for basic 2D to be drawn via JavaScript. 3D graphics
    are not consistently supported, however, and are optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Language tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With internationalization taking on more and more precedence, localization has
    been a special challenge for web developers. HTML5 introduces a set of new tags
    to help make content more accessible to larger audiences.
  prefs: []
  type: TYPE_NORMAL
- en: '`bdi`: This tag defines the directionality of text. This is typically used
    to support languages that are read right-to-left.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ruby`: The `ruby` tag in conjunction with the `rt` and `rp` tags defines the
    Ruby annotation for East Asian typography.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layout tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'HTML5 comes with a set of first-class tags that not only help with laying out
    the page, but also allows for the page to be broken up altogether. With HTML5,
    web developers have the ability to share sections of content in a more standard
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '`header`: This tag defines the header of the page or of a section or article.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`footer`: This tag defines the footer of the page or of a section or article.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nav`: This tag defines the menu structure of the website. These are the navigational
    links used to semantically break up the website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`section`: This tag defines sections of a page. The `article` and `aside` tags
    are in a way specialized section tags.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aside`: This tag defines the sidebar content for a page. Often, a web page
    is broken up with ancillary content pushed to the side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`article`: This tag defines the main content for a page. While tags such as
    `section`, `aside`, `header`, and `footer` define ancillary content to the page,
    the `article` tag identifies the portion of content that is considered to be the
    focal point. Typically, this content is unique to the URI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Format tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTML5 introduces a new set of special tags, which define how areas of content
    can be identified and formatted appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: '`figure`: This tag identifies non-contiguous content that is layered into a
    body of text. For example, it can be used to wrap diagrams, charts, and graphs
    that are referenced by a body of text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`details`: This tag defines content that can be toggled as visible or hidden.
    It is geared towards showing and hiding content based on a user action such as
    help-related content. Web developers have built a variety of solutions to do this
    and, with HTML5, the web browser takes care of it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hgroup`: This tag wraps the well-known `h1`-`h6` tags into a cohesive structure.
    When headings are related, `hgroup` shows that they are related. For example,
    for an article with a title and subtitle, the title would be wrapped in an `h1`
    tag while the subtitle would be wrapped in an `h2` tag. The `hgroup` tag around
    them signifies that the `h2` tag is associated with the `h1` tag and not part
    of the document outline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wbr`: This tag defines a word break opportunity. Typically, lines of text
    are broken up by spaces. The `wbr` tag allows for the web developer to specify
    where in a set of contiguous non-space characters line breaks can be introduced
    when there is no room to display it all on one line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`progress`: This tag indicates the progress of a task and can be used in conjunction
    with JavaScript to display a progress bar to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time`: This tag is a microformat tag that allows one to specify semantically
    that something is a date or time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meter`: This tag is a format tag to define a scalar measurement with a known
    range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mark`: This tag indicates text that is relevant to the user. Typically, this
    would be used for highlighting specific words within a passage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forms get an upgrade
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Forms in HTML5 get a whole new set of functionality to allow for better validation
    of content and ease of use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following tags are new with HTML5:'
  prefs: []
  type: TYPE_NORMAL
- en: '`datalist`: This tag works similarly to a `select` tag with the added feature
    of being able to type ahead to select items in the list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keygen`: This tag generates a key pair for use in forms. This is typically
    used for client authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output`: This tag indicates the result of a calculation. It is associated
    with a `form` tag to display simple calculations to the user especially when used
    in conjunction with the new form input types. In addition, the `input` tag gets
    a new set of types. The following input types are new with HTML5:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color`: This type displays a color picker, which submits a hex code for that
    color.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date`: This type displays a date picker, which submits a date.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datetime`: This type displays a date and time picker, which submits a date
    and time including time zone.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datetime-local`: This type displays a date and time picker, which submits
    a date and time without time zone.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`email`: This type displays a field for entering e-mail addresses.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`month`: This type displays a month-year picker, which submits a month and
    year.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`number`: This type displays a field constrained for entering numeric values.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`range`: This type constrains the user to select numbers within a range. Typically,
    this will display as a slider.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`search`: This type displays a search field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tel`: This type displays a field that constrains the user to typing in a valid
    telephone number.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time`: This type displays a time picker.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url`: This type displays a field that constrains the user to typing in a valid
    URL.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`week`: This type displays a control for picking a week within a year.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter microdata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'HTML5 adds the ability to define custom semantics for your content. Similar
    to microformats in previous versions of HTML, in which a set of predetermined
    attributes would allow you to ascribe the semantic meaning of content, microdata
    allows you to create your own semantic language to ascribe to your content. While
    microformats rely on generic attributes such as `class` and `rel`, microdata introduces
    `itemscope`, `itemtype`, and `itemprop` to describe content. The `itemscope` and
    `itemtype` attributes allow you to define a custom type and indicate where it
    is defined. The `itemprop` attribute points to a specific property within the
    definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: An anatomy lesson
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know many of the new tools for building a page in HTML5, let us
    dive into what a page looks like.
  prefs: []
  type: TYPE_NORMAL
- en: A word about DOCTYPE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `DOCTYPE` declaration in HTML documents has always been a signal to the
    browser of the standards to which the document adheres. If a web browser knows
    the standards used for the document, it can more efficiently process and render
    that document. SGML-based markup languages require this.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to simplify the `DOCTYPE` tag, HTML5 has only one type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Unlike previous versions of HTML, which required references to the specific
    DTD being followed, HTML5 is not based on SGML and thus the DTD reference is not
    required.
  prefs: []
  type: TYPE_NORMAL
- en: The lang attribute
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTML5 introduces a simplified `lang` attribute for specifying the language of
    a page. In XHTML, an `xmlns` attribute was required, but HTML5 does not require
    this.
  prefs: []
  type: TYPE_NORMAL
- en: Metatags are important too
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTML5 adds a new metatag called `charset`. This specifies the specific character
    encoding of the document. It otherwise uses all the metatags from HTML 4.01.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 includes support for the `viewport` metatag. This metatag defines how
    the web page should be viewed and includes parameters such as width and height.
    It also allows you to define zoom settings such as initial scale, and minimum
    and maximum scale. It even allows for the ability to target a specific density
    DPI in case you want to change how your page looks based on different screen resolutions.
  prefs: []
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A basic HTML5 page will look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We will of course add more to this as we go on.
  prefs: []
  type: TYPE_NORMAL
- en: The application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For much of this book, we will be building a mobile web application that illustrates
    many of the features of HTML5\. The application is called MovieNow, and will be
    a one-stop shop for finding, reviewing, and booking movies near you. The features
    we will develop in this book are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Find movies near you using geolocation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display movie data to the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View trailers using the `video` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display reviews using the `canvas` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select movies using the drag and drop API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration with external APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display tweets near you via Web Workers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following chapters, we will build a variety of features of HTML5 into
    our MoveNow enterprise application.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. HTML5 Starter Kit: Compatibility"), *HTML5
    Starter Kit: Compatibility*, discusses support of HTML5 features across multiple
    web browsers and devices as well as ways to skirt the deficiencies of these browsers.
    The main driver for supporting multiple browsers is ensuring access to enterprise
    web applications across multiple devices while maintaining a consistent user experience.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. HTML5 Starter Kit: Useful Tools"), *HTML5
    Starter Kit: Useful Tools*, provides a guide to getting started with HTML5 enterprise
    application development including available tools, their installation, and their
    use. A comprehensive evaluation of the business drivers for selecting tools will
    be discussed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. The App: Structure and Semantics"), *The
    App: Structure and Semantics*, walks you through setting up the boilerplate for
    the MovieNow enterprise application. We will set up the overall page structure,
    discuss semantic tags in depth, and talk about microdata.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. The App: Getting Movies Via Geolocation"),
    *The App: Getting Movies via Geolocation*, begins the MovieNow enterprise application
    by introducing geolocation. We will walk you through the geolocation API and how
    to use it to implement useful features.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. The App: Displaying Movie Data via CSS3"),
    *The App: Displaying Movie Data via CSS3*, covers layout and features of CSS3
    including some interesting CSS3 effects. We will also cover best practices in
    defining standard styles across web applications and devices including media queries
    and compatibility considerations for CSS3.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. The App: Trailers via HTML5 Video"), *The
    App: Trailers via HTML5 Video*, introduces the video and audio tags and their
    use within an HTML5 enterprise application. We will talk about manipulating the
    playback of multimedia content via JavaScript as well as backward compatibility
    with browsers that do not support the HTML5 video and audio tags.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. The App: Showing Ratings via Canvas"), *The
    App: Showing Ratings via Canvas*, walks through HTML5 canvas and using the drawing
    API to display graphics in your enterprise applications. We will use the drawing
    API to create ratings charts for our MovieNow application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. The App: Selection UI via Drag-and-Drop"),
    *The App: Selection UI via Drag-and-Drop*, covers the drag-and-drop API. We will
    implement the drag-and-drop functionality in the MovieNow enterprise application
    demonstrating event delegation and the publish-subscribe pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. The App: Getting the Word Out via Twitter"),
    *The App: Getting the Word Out via Twitter*, discusses forms and form validation
    in HTML5 by integrating with the Twitter API. We will implement posting of tweets
    from within the MovieNow application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. The App: Consuming Tweets Via Web Workers"),
    *The App: Consuming Tweets via Web Workers*, demonstrates Web Workers and the
    power of external APIs to bring social elements to enterprise application. We
    will integrate tweets near you into the MovieNow application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.html "Chapter 11. Finishing Up: Debugging Your App"), *Finishing
    Up: Debugging Your App*, talks about ways of debugging HTML5 enterprise applications.
    We will discuss the browser console and HTTP proxies.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](ch12.html "Chapter 12. Finishing Up: Testing Your App"), *Finishing
    Up: Testing Your App*, covers tools for testing HTML5 enterprise applications.
    We will cover functional test suites and automated tools.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](ch13.html "Chapter 13. Finishing Up: Performance"), *Finishing
    Up: Performance*, discusses performance, which is a crucial topic for any HTML5
    enterprise application. We will talk about strategies and tools and walk through
    profiling your HTML5 application.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need prior knowledge of web application development as this book introduces
    developers already familiar with the basics of the web including HTML, CSS, and
    JavsScript to the advantages of HTML5 and CSS3.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is primarily aimed at application developers who have some experience
    developing applications for the web, and want to extend their knowledge to the
    latest developments in HTML5 and CSS3\. Upon completion of this book, readers
    will have a thorough understanding of the toolset that HTML5 provides to develop
    enterprise applications.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text are shown as follows: "Copy `html5shiv.js` from the `dist`
    folder to your JavaScript folder".'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "Click on the **GENERATE!** button".'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or may have disliked. Reader feedback is important for
    us to develop titles that you really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply send an e-mail to `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book title via the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a book that you need and would like to see us publish, please send
    us a note in the **SUGGEST A TITLE** form on [www.packtpub.com](http://www.packtpub.com)
    or e-mail `<[suggest@packtpub.com](mailto:suggest@packtpub.com)>`.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide on [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the color images of this book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We also provide you a PDF file that has color images of the screenshots/diagrams
    used in this book. The color images will help you better understand the changes
    in the output. You can download this file from [http://www.packtpub.com/sites/default/files/downloads/5689_graphics.pdf](http://www.packtpub.com/sites/default/files/downloads/5689_graphics.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you would report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/support](http://www.packtpub.com/support),
    selecting your book, clicking on the **errata** **submission** **form** link,
    and entering the details of your errata. Once your errata are verified, your submission
    will be accepted and the errata will be uploaded on our website, or added to any
    list of existing errata, under the Errata section of that title. Any existing
    errata can be viewed by selecting your title from [http://www.packtpub.com/support](http://www.packtpub.com/support).
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Piracy of copyright material on the Internet is an ongoing problem across all
    media. At Packt, we take the protection of our copyright and licenses very seriously.
    If you come across any illegal copies of our works, in any form, on the Internet,
    please provide us with the location address or website name immediately so that
    we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors, and our ability to bring
    you valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`
    if you are having a problem with any aspect of the book, and we will do our best
    to address it.
  prefs: []
  type: TYPE_NORMAL
