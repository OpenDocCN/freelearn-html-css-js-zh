- en: Chapter 2. Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we are going to dive into the Sencha Ext JS 5 world and explore
    real-world examples. We will also build a complete application from scratch, from
    the wireframe phase until the deployment in production.
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout this book, we are going to develop an application to manage a *DVD
    rental store*. In this chapter, we will introduce the application and describe
    its capabilities. You will also learn how to organize the files of the application,
    which is going to be built throughout the chapters of this book. This chapter
    will also present the mockup (wireframe) of the application and how to start organizing
    the screens (which is a very important step and some developers forget to do it).
    In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the development environment by installing the required software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presenting the application and its capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating mockups/wireframes of each screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the structure of the app using Sencha Cmd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the loading page (splash screen)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The application that we are going to develop has a very simple architecture.
    We are going to use Ext JS 5 on the frontend, which is going to communicate with
    a server-side module using Ajax/JSON, which will then communicate with a database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram encapsulates the preceding paragraph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the development environment](img/0457OT_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The server-side module will be developed using PHP. You need not worry if you
    don't know PHP. We are going to use very basic code (no frameworks), and we are
    going to focus on the programming logic that needs to be implemented on the server
    side. This way, you can apply the same logic using any other programming language,
    such as Java, ASP.NET, Ruby, Python, or any other (that supports the exchange
    of data in JSON or XML format as this is the communication format used by Ext
    JS). For the database, we will use MySQL. We will also use the Sakila sample schema
    ([http://dev.mysql.com/doc/sakila/en/](http://dev.mysql.com/doc/sakila/en/)),
    a free MySQL sample database, which is perfect to demonstrate how to work with
    **Create, Read, Update, and Delete/Destroy** (**CRUD**) operations on a database
    table and also use more complex operations, such as views and stored procedures
    (we will learn how to handle all this information with Ext JS).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are a Java developer, you can find some sample code on how to integrate
    Java with Ext JS at [http://goo.gl/rv76E2](http://goo.gl/rv76E2) and [http://goo.gl/nNIRuQ](http://goo.gl/nNIRuQ).
  prefs: []
  type: TYPE_NORMAL
- en: Also, we will need to have Sencha Cmd installed (we have already installed Sencha
    Cmd during [Chapter 1](ch01.html "Chapter 1. Sencha Ext JS Overview"), *Sencha
    Ext JS Overview*). However, we still need to execute some extra steps to have
    it configured. Once configured, we will be able to create the application structure,
    customize the theme, and also make the production build. Sencha Cmd requires having
    Ruby compatible with versions 1.8 or 1.9 (version 2.x will not work). We also
    need to have Apache Ant installed (and because Apache Ant is built with Java,
    we also need to have Java installed and configured in our computer).
  prefs: []
  type: TYPE_NORMAL
- en: After we have finished implementing the application, we will customize the theme,
    and because of this, we will need to install Ruby (1.8 or 1.9) and the Sass and
    Compass gems.
  prefs: []
  type: TYPE_NORMAL
- en: To deploy the application, we need a web server. If you do not have any web
    server installed on your computer yet, do not worry. In this book, we will use
    Xampp as the default web server.
  prefs: []
  type: TYPE_NORMAL
- en: We will also need a browser to run our application in. The recommended ones
    are Firefox (with Firebug) or Google Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not have any of the software or technologies mentioned previously
    installed on your computer, don''t worry. To summarize all the tools and software
    we need to have installed prior to starting the fun, here is a list with the links
    where you can download them and find installation instructions (all items are
    available for Windows, Linux, and Mac OS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'A browser with a debugger tool:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Firefox with Firebug: [https://www.mozilla.org/firefox/](https://www.mozilla.org/firefox/)
    and [http://getfirebug.com/](http://getfirebug.com/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Chrome: [www.google.com/chrome](http://www.google.com/chrome)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Web server:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Xampp: [http://www.apachefriends.org/en/xampp.html](http://www.apachefriends.org/en/xampp.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Database:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MySQL: [http://dev.mysql.com/downloads/mysql/](http://dev.mysql.com/downloads/mysql/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MySQL Workbench: [http://dev.mysql.com/downloads/tools/workbench/](http://dev.mysql.com/downloads/tools/workbench/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MySQL Sakila sample database: [http://dev.mysql.com/doc/index-other.html](http://dev.mysql.com/doc/index-other.html)
    and [http://dev.mysql.com/doc/sakila/en/index.html](http://dev.mysql.com/doc/sakila/en/index.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sencha Command required tools:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ruby: [http://www.ruby-lang.org/en/downloads/](http://www.ruby-lang.org/en/downloads/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sass: [http://sass-lang.com/](http://sass-lang.com/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Compass: [http://compass-style.org/](http://compass-style.org/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Java JDK (Java 7 or later): [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Java environment variables: [http://docs.oracle.com/javase/tutorial/essential/environment/paths.html](http://docs.oracle.com/javase/tutorial/essential/environment/paths.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apache Ant: [http://ant.apache.org/bindownload.cgi](http://ant.apache.org/bindownload.cgi)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, we also need Ext JS SDK and Sencha Cmd, which we downloaded and installed
    in [Chapter 1](ch01.html "Chapter 1. Sencha Ext JS Overview"), *Sencha Ext JS
    Overview*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To help you configure the required development environment in order to be able
    to create the application from this book, here is a video that demonstrates it
    step by step (step by step done for Windows environment—the Linux and Mac OS setup
    is very similar): [http://youtu.be/B43bEnFBRRc](http://youtu.be/B43bEnFBRRc).'
  prefs: []
  type: TYPE_NORMAL
- en: Presenting the application and its capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The application we are going to develop throughout this book is very common
    to other web systems you are probably used to implementing. We will implement
    a DVD Rental Store management application (that is why the use of the Sakila sample
    database). Some of the features of the application are the security management
    (able to manage users and their permissions within the application), which manage
    actors, films, inventory, and rental information.
  prefs: []
  type: TYPE_NORMAL
- en: Ext JS will help you to achieve your goal. It provides beautiful components,
    a complete architecture, the possibility to reuse components (and decreases our
    work), and a very complete data package (that makes it easier to make connections
    to the server side and send and retrieve information).
  prefs: []
  type: TYPE_NORMAL
- en: We will divide the application into modules, and each module will be responsible
    for some features of the application. In each chapter of this book, we will implement
    one of the modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application is composed of:'
  prefs: []
  type: TYPE_NORMAL
- en: A splash screen (so the user does not need to see a blank screen while the application
    is still launching)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A main screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A login screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User administration screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL tables management (for categories, and combobox values—static data)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content management control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each of the modules and screens mentioned in the preceding list, we will
    create mockups, so we can plan how the application will work. Here, you will learn
    more about each one of them.
  prefs: []
  type: TYPE_NORMAL
- en: The splash screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our application will have a splash screen, so the user does not need to see
    a blank page while the application is still loading the required files and classes
    prior to its initialization. Here''s a screenshot that illustrates a splash screen
    aptly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The splash screen](img/0457OT_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will cover the implementation of this screen later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The login screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After the application is fully loaded, the first screen the user will see is
    the login screen. The user will be able to enter the **User Name** and **Password**.
    There is also a multilingual combobox, where the user can choose the language
    of the system (multilingual capability). Then, we have the **Cancel** and **Submit**
    buttons, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The login screen](img/0457OT_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Cancel** button resets the **Login** form and the **Submit** button will
    trigger an event that will create an Ajax request and send the user credentials
    to the server for authentication. If the user is successfully authenticated, then
    we display the main screen; otherwise, we display an error message.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover the implementation of the login screen in [Chapter 3](ch03.html
    "Chapter 3. The Login Page"), *The Login Page*.
  prefs: []
  type: TYPE_NORMAL
- en: The main screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The general idea of the application is to have a main screen that will be organized
    using border layout. Border Layout is divided into five regions: north, south,
    east, west, and center, of which all but the east region are demonstrated in the
    following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The main screen](img/0457OT_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the **Center Region**, we will have a tab panel, and each tab represents
    a screen of the application (each screen will have its own layout)—only the first
    tab can not be closed (**Home**) tab. In the **North Region** we will have a header
    with the name of the application (**DVD Rental Store Manager**), the multilingual
    combobox (if the user wants to change the current language of the application)
    and a **Logout** button. In the **South Region**, we will have the footer with
    a copyright message (or it can be the name of the company or developer that implemented
    the project). And in the **West Region**, we will have a dynamic menu (we will
    implement user control management). The menu will be dynamic and will be rendered
    based on the permissions that the user has in the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main screen will look somewhat like the following mockup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The main screen](img/0457OT_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will cover the implementation of the main screen and the multilingual and
    logout capabilities in [Chapter 4](ch04.html "Chapter 4. The Logout and Multilingual
    Capabilities"), *The Logout and Multilingual Capabilities*. And in [Chapter 5](ch05.html
    "Chapter 5. Advanced Dynamic Menu"), *Advanced Dynamic Menu*, we will cover how
    to generate a dynamic menu.
  prefs: []
  type: TYPE_NORMAL
- en: User administration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the user control management, the user will have access to create new users
    and new groups and assign new roles to users. The user will be able to control
    the system permissions (which user can see which modules in the system). This
    is how the **Create/Edit User** page looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![User administration](img/0457OT_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will cover the implementation of user administration in [Chapter 6](ch06.html
    "Chapter 6. User Management"), *User Management*.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL table management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every system has information that is considered static data, such as film categories,
    film language, combobox options, and so on. For these tables, we need to provide
    all CRUD options and also filter options. The screens from this module will be
    very similar to the **Edit Table Data** option from **MySQL Workbench**., as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MySQL table management](img/0457OT_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The user will be able to edit the data in the rows of the grid, similar to
    what can be done in MS Excel. Once the user is done making the changes, they can
    click on the **Save Changes** button to save all modified data to the server and
    database. The following is how the **Browser Window** view looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MySQL table management](img/0457OT_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will cover the implementation of this module in [Chapter 7](ch07.html "Chapter 7. Static
    Data Management"), *Static Data Management*.
  prefs: []
  type: TYPE_NORMAL
- en: Content management control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this module, the user will be able to see and edit the core information from
    the system. As most of the database tables we will be handling in this module
    have a relationship with other tables, the editing of the information will be
    more complex, involving the master-detail relationship. Usually, we will present
    the information to the user in a data grid (a list or a table), and the addition
    of the information will be made in such a form that it will be displayed inside
    a pop-up window.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also very important to remember that most of the screens from a module
    will have similar capabilities, and since we are going to build an application
    with a lot of screens, it is important to design the system to be able to reuse
    as much code as possible, making the system easy to maintain and easy to add new
    features and capabilities to. The following screen depicts the capabilities we
    have discussed in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content management control](img/0457OT_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When clicking on **Add** or **Edit**, a new pop-up window will open to edit
    the information, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content management control](img/0457OT_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will cover the implementation of this module in [Chapter 8](ch08.html "Chapter 8. Content
    Management"), *Content Management*, and [Chapter 9](ch09.html "Chapter 9. Adding
    Extra Capabilities"), *Adding Extra Capabilities*.
  prefs: []
  type: TYPE_NORMAL
- en: Charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the charts module, we will create a chart in Ext JS. For the same chart
    information, the user will be able to generate different types of charts. The
    user will also be able to export the chart to an image, SVG, or PDF, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Charts](img/0457OT_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will cover the implementation of this module in [Chapter 9](ch09.html "Chapter 9. Adding
    Extra Capabilities"), *Adding Extra Capabilities*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the application with Sencha Cmd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get started and get our hands on the code. The first thing we are going
    to do is create the application using the MVC structure. Sencha Command (referred
    to as Sencha Cmd from now on) provides the capability of creating the application
    structure automatically for us. Utilizing Sencha Cmd is helpful not only because
    it creates the structure according to the MVC architecture for our application,
    but also because it provides all the files we need later on when going live with
    the software and to customize its theme—we'll learn more about this in a later
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: A quick word about MVC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**MVC** stands for **Model-View-Controller**. It is a software architecture
    pattern that separates the representation of the information from the user''s
    interaction with it. The Model represents the application data, the View represents
    the output of the representation of the data (form, grid, chart), and the Controller
    mediates the input, converting it into commands for the Model or View.'
  prefs: []
  type: TYPE_NORMAL
- en: Ext JS supports MVC**,** which is a Model-View-Controller pattern (as one of
    the architecture options, it also provides a **Model-View-View-Model** (**MVVM**),
    which we will discuss later). The Model is a representation of the data we want
    to manipulate in our application, a representation of a table from the database.
    The View is all the components and screens we create to manage the information
    of a Model. As Ext JS is event-driven, all the View instances fire events when
    the user interacts with them, the Controller can be configured to listen to events
    raised from the View, and the developer can implement custom handlers to respond
    to these events. The Controller can also redirect the command to the Model (or
    Store) or the View. And the Store in Ext JS is very similar to the **Data Access
    Object** (**DAO**) pattern used on server-side technologies (with more capabilities
    such as sorting and filtering, introduced in [Chapter 1](ch01.html "Chapter 1. Sencha
    Ext JS Overview"), *Sencha Ext JS Overview*).
  prefs: []
  type: TYPE_NORMAL
- en: 'For a quick example, let''s say we have **WidgetA**, which is a GridPanel that
    displays all the records from a table. This table is represented by **ModelA**.
    **StoreA** is responsible for retrieving the information (collection of **ModelA**
    from the server). When the user clicks on a record from **WidgetA**, a window
    will be opened (called **WidgetB**) displaying information from a table (represented
    by **ModelB**). And of course, **StoreB** will be responsible for retrieving the
    collection of **ModelB** from server. In this case, we will have **ControllerA**
    to capture the `itemclick` event from **WidgetA**, do all the required logic to
    display **WidgetB**, and load all the **ModelB** information. If we try to put
    this into a quick reference diagram, it would be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A quick word about MVC](img/0457OT_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to create the application inside the `htdocs` folder of our Xampp
    directory. Our application will be named `masteringextjs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start, let''s take a look how the `htdocs` folder looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the application](img/0457OT_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We still have the original Xampp files in there, and the Ext JS 5 SDK folder,
    along with the Ext JS 5 documentation folder.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to use Sencha Cmd to create the application for us. To do so,
    we need to open the terminal application that comes with the operating system
    we 're using. For Linux and Mac OS users, this would be the terminal application.
    For Windows users, it's the Command Prompt application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps that we are going to execute:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to change the current directory to the Ext JS directory (`htdocs/ext-5.0.0`
    in this case).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we will use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `sencha generate app` command will create the `masteringextjs` directory
    inside the `htdocs` folder with the necessary file structure required by the MVC
    architecture as used by ExtJS. `Packt` is the name of the namespace of our application,
    which means that every class we create is going to start with `Packt`, for example,
    `Packt.model.Actor`, `Pack.view.Login`, and so on. And the last argument passed
    to the command is the directory where the application will be created. In this
    case, it is inside a folder named `masteringextjs`, which is located inside the
    `htdocs` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Namespaces are used for scoping variables and classes so that they are not global,
    defining deeply their nested structures. Sencha has a good article about namespaces
    at [http://goo.gl/2iLxcn](http://goo.gl/2iLxcn).
  prefs: []
  type: TYPE_NORMAL
- en: 'After the command finishes its execution, we will have something like what
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the application](img/0457OT_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The source code presented in this book was written with Ext JS 5.0 (so you will
    see the screenshots with version 5.0) and upgraded to 5.1 once it was released.
    So once you download its source code, it will be compatible with version 5.1\.
    Upgrading the source code from 5.0 to 5.1 does not have any impact.
  prefs: []
  type: TYPE_NORMAL
- en: 'But why do we need to create a project structure like this one? The following
    is the structure used by Ext JS applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the application](img/0457OT_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about the `Sencha generate app` command, please consult
    [http://docs.sencha.com/cmd/5.x/extjs/cmd_app.html](http://docs.sencha.com/cmd/5.x/extjs/cmd_app.html).
  prefs: []
  type: TYPE_NORMAL
- en: Let's see what each folder does.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we have the `app` folder. This is where we will create all the code for
    our application. Inside the `app` folder, we can find the following folders as
    well: `controller`, `model`, `store`, and `view`. We can also find the `Application.js`
    file. Let''s have a detailed look at them. In the `model` folder, we will create
    all files that represent a Model, which is an Ext JS class that represents a set
    of fields, which means that an object that our application manages (actor, country,
    film, and so on). It is similar to a class on the server side with only the attributes
    of the class plus the getter and setter methods used to represent a table from
    the database.'
  prefs: []
  type: TYPE_NORMAL
- en: On the `store` folder, we will create all the `Store` classes, which are caches
    of collections of Model instances. The `store` folder also has capabilities similar
    to DAO**—**classes used on server-side languages to perform CRUD operations on
    the database. As Ext JS does not communicate directly with databases, the `Store`
    classes are used to communicate with the server side or a local storage—used with
    a Proxy. Proxies are used by Store or Model instances to handle the loading and
    saving of Model data, and it is the place where we are going to configure how
    we want to communicate with the server (using Ajax and using JSON or XML, formatting
    the data so that the client and the backend understand each other).
  prefs: []
  type: TYPE_NORMAL
- en: On the `view` folder, we will create all `view` classes, also known as the **User
    Interface Components** (**UI Components**), such as grids, trees, menus, forms,
    windows, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: And finally, in the `controller` folder, we can create classes that will handle
    the events fired by the components (events fired because of the life cycle of
    the component or because of some *interaction* of the user with a component).
    We always need to remember that Ext JS is *event-driven*, and on the `Controller`
    classes, we will control these events and update any Model, View, or Store (if
    required). Some examples of events fired would be a click or mouseover of a button,
    an `itemclick` event of a row of a grid, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can also have `ViewController` classes inside the `view` folder. This is
    applied when we use the MVVM pattern, which we will discuss more in detail in
    the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The MVC `app` folder structure has been created. Now, we will copy the Ext JS
    SDK (`extjs` folder) into the `masteringExtjs` folder, and we will also create
    a file named `app.js`. We will edit this file later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We also have the `Application.js` file. This is the entry point of our application.
    We'll come back to this later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `masteringextjs` directory contains a few more files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app.js`: This file inherits the code from the `Application.js` file. It is
    the point of entry of the application. This is the file that is called by Ext
    JS to initialize the application. We should avoid changing this file `app.json`:
    this is a configuration file for the application. In this file, we can add extra
    CSS and JS files, which should be loaded with the application, such as charts
    and locale-specific configurations. We will make some changes in this file throughout
    the book.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bootstrap.css`, `bootstrap.json`, and `bootstrap.js`: Created by Sencha Cmd,
    these files *should not be edited*. The CSS file contains the import of the theme
    used by the application (which is the so-called **Neptune theme** by default).
    After we make a build, the content of these files is updated with CSS definitions,
    and the JavaScript files will contain dependencies that need to be loaded prior
    to execution, custom `xtypes`, and other class system features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build.xml`: Sencha Cmd uses Apache Ant ([http://ant.apache.org/](http://ant.apache.org/)),
    which is a Java tool used to build Java projects. Ant uses a configuration file
    named `build.xml`, which contains all the required configurations and commands
    to build a project. Sencha Cmd uses Ant as the engine to build an Ext JS application
    on the background (while we simply need to use a command). This is the reason
    why we need to have the Java SDK installed to use some of the Sencha Cmd features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html`: This is the index file of our project. This is the file that
    will be rendered by the browser when we execute our application. Inside this file,
    we will find the import of the `bootstrap.js` file. We should avoid making changes
    in this file as well because when we build the application, Sencha Cmd will generate
    a new `index.html` file in the `build` folder, discarding all the changes we might
    have made to the `index.html` file. If we need to include a JS or CSS file, we
    should define this within the `app.json` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ext`: Inside this folder, we can find all the Ext JS framework files (`ext-all`,
    `ext-all-debug`, and `ext-dev`), its source code, and also the `packages` folder,
    containing the locale definitions for our application and theme-related packages,
    among others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overrides`: When we create the application, this folder is empty. We can add
    any class overrides and customizations we will need for our project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`packages`: Inside this folder, we can create our own packages. A package can
    be a new theme, for example. Its concept is similar to *gems* in Ruby or custom
    APIs in Java and .NET (for example, to use Apache Ant in a Java project, we need
    to include the Apache Ant `jar` file).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources`: Inside this folder, we will place all the images of our application.
    We can also place other CSS files and font files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sass`: Inside this folder, we can find some Sass files used to create themes.
    Any custom CSS for our application will be created inside this folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's gain firsthand knowledge now! We will now explore some of the concepts
    described previously during the development of our application to understand them
    better.
  prefs: []
  type: TYPE_NORMAL
- en: Looking out for changes with the watch command
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sencha Cmd has another command that is very useful while developing Ext JS applications.
    It is the `watch` command. We will use this command all the time while developing
    the application in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s execute this command and see what it does. First, we need to change
    the directory to the `masteringextjs` folder (which is our application folder
    generated with Sencha Cmd). Then, we can execute the `sencha app watch` command.
    The following screenshot exemplifies the output of this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Looking out for changes with the watch command](img/0457OT_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This command looks for any changes made inside the Ext JS application folder.
    If we create a new file or change any file, this command will know that a change
    has been made and will make an application build.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can minimize the terminal application and let the command be executed in
    the background. If we close the terminal, the command will no longer be alive,
    and we have to execute it again.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also going to start a web server at `http://locahost:1841`, where we
    can access our application as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Looking out for changes with the watch command](img/0457OT_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So this is how an application created with Sencha Cmd looks. Sencha Cmd also
    creates some files inside the `app` folder that we can change according to our
    needs. We will go through the files in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also execute the application from the Xampp `localhost` URL by accessing
    `http://localhost/masteringextjs`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Looking out for changes with the watch command](img/0457OT_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The output from `http://localhost/masteringextjs` is exactly the same as accessing
    `http://locahost:1841`. You can use any of them. But be aware that `http://locahost:1841`
    will be alive only when we use the `sencha app watch` command. As we will use
    PHP and apply some other configurations, we will use `http://localhost/masteringextjs`
    throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: Applying the first changes in our app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We know that Sencha Cmd has created some files for us, but we do not want that
    screen to be the first one the user will see. We want the user to see the login
    screen and then go the main screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make it happen, we need to make some changes inside the `app.js` file. If
    we open the file, we will see the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We are going to change the preceding code that was highlighted to the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is the only change we will make in this file, because we should avoid changing
    it.
  prefs: []
  type: TYPE_NORMAL
- en: What this line does is create the `Packt.view.main.Main` component automatically
    after the application is initialized, but we do not want that happening. We want
    to display the splash screen first and then the login screen. That is why we are
    asking the application not to auto-render the viewport.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the terminal where we have the `sencha app watch` command running
    will output a few lines, which means the application will be refreshed and the
    development build updated. This will happen every time we make a change and save
    it.
  prefs: []
  type: TYPE_NORMAL
- en: If we refresh the browser, we should see an empty page. This means we can start
    the development of our DVD Rental Store application.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Application.js file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we open the `app/Application.js` file, this is how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `app.js` file inherits all the behavior of the application from the `Application.js`
    file. This file is used as the entry point of the app.
  prefs: []
  type: TYPE_NORMAL
- en: On the first line of the preceding code, we have the `Ext.application` declaration
    (`#1`). This means that our application will have a single page ([http://en.wikipedia.org/wiki/Single-page_application](http://en.wikipedia.org/wiki/Single-page_application)),
    and the parent container of the app will be the viewport. The viewport is a specialized
    container representing the viewable application area that is rendered inside the
    `<body>` tag of the HTML page (`<body></body>`).
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `Ext.application`, we can also declare `views` (`#3`), `controllers`
    (`#4`), and `stores` (`#5`) used by the application. We will add this information
    in this file as we create new classes for our project.
  prefs: []
  type: TYPE_NORMAL
- en: We need to declare the `name` attribute of the application, which will be the
    namespace (`#2`) of the application. In this case, Sencha Cmd used the namespace
    we used in the `sencha generate app` command.
  prefs: []
  type: TYPE_NORMAL
- en: We can also create a `launch` function inside `Ext.application` (`#6`). This
    function will be called after all the application's controllers are initialized,
    and this means that the application is completely loaded. So this function is
    a good place to instantiate our main view, which in our case will be the login
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do we need to use `Ext.onReady` when using `Ext.application`?
  prefs: []
  type: TYPE_NORMAL
- en: The answer is no. We only need to use one of the options. According to the Ext
    JS API documentation, `Ext.application` *loads Ext.app.Application class and starts
    it up with given configuration after the page is ready* and `Ext.onReady` *adds
    a new listener to be executed when all required scripts are fully loaded*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a look at the source code for `Ext.application`, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This means that `Ext.application` is already calling `Ext.onReady`, so we do
    not need to do it twice.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, use `Ext.onReady` when you have a few components to be displayed, which
    are not in the MVC architecture (similar to the jQuery `$(document).ready()` function),
    and use `Ext.application` when you are developing an Ext JS MVC application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram exemplifies all the high-level steps performed during
    the Ext JS application startup. Once the steps are executed, the application is
    completely loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the Application.js file](img/0457OT_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we know how an Ext JS application is initialized, we can start building
    our app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the loading page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with large Ext JS applications, it is normal to have a short delay
    when loading the application. This happens because Ext JS is loading all the required
    classes to have the application up and running, and meanwhile, all the users see
    is a blank screen, which can be annoying for them. A very common solution to this
    problem is to have a loading page, also known as a splash screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s add a splash screen to our application that looks like what is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the loading page](img/0457OT_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: First, we need to understand how this splash screen will work. After the user
    loads the application, the splash screen will be displayed. The application will
    show the splash screen while it loads all the required classes and code so that
    the application can be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'We already know that the application calls the `launch` function when it is
    ready to be used. So we know that we will need to remove the splash screen on
    the `launch` method. The question now is: where inside `Ext.application` can we
    call the splash screen? The answer is inside the `init` function. The `init` function
    is called when the application boots, so it gives some time to all required code
    to be loaded, and after that, the `launch` function is called.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how the splash screen will work, let's implement it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside `Ext.application`, we will implement a function called `init` after
    the `launch` function declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: All we need to do is to apply a `mask` method (`#2`) into the HTML body of the
    application (`Ext.getBody()`). That is why we are calling the `mask` method passing
    the loading message (`Loading Application`) and applying a CSS style that will
    be a loading `GIF` file, and it is already part of the Ext JS CSS (`splashscreen`).
    The `mask` method will return an `Ext.dom.Element` class, which we will need to
    manipulate later (remove the `mask` method from the HTML body), and for this reason,
    we need to keep a reference to this `Ext.dom.Element` class, and we will store
    this reference as a variable part of `Ext.application` (`me.splashscreen`). The
    `me` variable is a reference to `this` (`#1`), which makes a reference to `Ext.application`
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the code of the `init` method only, we will have a loading screen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the loading page](img/0457OT_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If this is all you need, that is OK. But let's go a little bit further and customize
    the loading screen, adding a logo image so that it can look like the first image
    of this topic, which is our final output.
  prefs: []
  type: TYPE_NORMAL
- en: To add the image to our splash screen, we need to create a CSS style. We could
    create a CSS file and then include it in our `index.html` file, but we will follow
    the best practices and create a `Sass` file inside the `sass` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Ext JS has a better way to deal with custom CSS styles. When we are done implementing
    our application, we want to customize the theme, and we want to make a production
    build. The production build contains only the essential Ext JS SDK source code,
    which is required to execute the application, along with our application source
    code. This code will be obfuscated and optimized so that the user can download
    a file with minimal size. The production build will do the same with the CSS file
    as well; it will optimize and add only the required CSS from Ext JS components
    that are needed to execute the application. As of course, we want any custom CSS
    that we create to be optimized as well.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, we are going to create our custom CSS inside the `sass/etc` folder
    using Sass ([http://sass-lang.com/](http://sass-lang.com/)). So let's go ahead
    and create a file named `all.scss` inside the `sass/etc` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the resources, we will also create an `images/app` folder with the Packt
    logo image (you can copy the Packt logo image from this book's source code).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how our application structure will look after creating these files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the loading page](img/0457OT_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And the `all.scss` file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: It is plain CSS code, except for lines `#1`, `#2`, and `#3`, which is Sass code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are not familiar with Sass, it is a new way of writing CSS code. Sass
    uses the **don't repeat yourself** (**DRY**) principle, which means that you can
    use variables and nested syntax (as the one we used in `#1`) and import other
    Sass files (allowing you to create modular CSS), among other features. The Ext
    JS engine theme uses Sass and Compass (a Sass framework). Sass is an alternative
    to Less. To learn more about Sass, please visit [http://sass-lang.com/](http://sass-lang.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Lines `#1`, `#2`, and `#3` would be the same thing as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is the CSS code generated after compiling the Sass file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When Sencha Cmd makes a build, the code from our `all.scss` file will be added
    to the single CSS file generated for our application, which contains the Ext JS
    CSS code and our code as well.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go back to the `Application.js` file and continue to add some code
    to the `init` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'We add the following code after the code we already have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We will add a new CSS style to the loading `<div>` tag. Note that the following
    styles from `app.css` will be applied: `.x-mask.splashscreen` and `.x-mask-msg.splashscreen
    div`. This will make the background white instead of gray, and it is also going
    to change the font of the "`Loading application`" message.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the generated HTML will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the loading page](img/0457OT_02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will add the following code in the `init` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will search for the first `<div>` tag that contains the `.x-mask-msg`
    class (`Ext.query('.x-mask-msg')[0]`) and will add a new `<div>` tag as a child
    with the class `x-splash-icon` that will be responsible for adding the logo image
    above the loading message.
  prefs: []
  type: TYPE_NORMAL
- en: 'And this is how the generated HTML will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the loading page](img/0457OT_02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After we execute the preceding code, we will have the output shown in the screenshot
    at the beginning of this topic.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have the splash screen being displayed. We need to work on the `launch`
    function to remove the splash screen after all the code the application needs
    is loaded; otherwise, the loading message will be there indefinitely!
  prefs: []
  type: TYPE_NORMAL
- en: 'To remove the splash screen, the only code we need to add to the `launch` function
    is the following, which is about removing the mask from the HTML body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'However, removing the mask abruptly is not nice because the user cannot even
    see the loading message. Instead of only removing the mask, let''s give the user
    2 seconds to see the loading message after the application is ready:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: To do so, we use the `DelayedTask` class (`#1`), which is a class that provides
    the chance of a function to be executed after the given timeout in milliseconds
    (`#3`). So, in the case of the following task, we remove the mask from the HTML
    body (`#2`) after 2 seconds of timeout (2,000 milliseconds).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we test the output right now, it works, but it is still not nice for the
    user. It would be even better if we could add an animation to the masking. So,
    we will add a fade out animation (which animates the opacity of an element—from
    opaque to transparent), and after the animation, we will remove the masking (inside
    the `Ext.util.DelayedTask` function). The following code is a demonstration of
    the explanation provided in this paragraph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After we execute this code, notice that the loading message is still being displayed.
    We need to analyze the generated HTML to find out why.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we call the `fadeOut` function, this is the HTML of the loading message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the loading page](img/0457OT_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After we call the `fadeout` function, the HTML will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the loading page](img/0457OT_02_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Only the first `<div>` tag with the `splashscreen` class was faded out. We
    need to also fade out the `<div>` tag with the `x-mask-msg splashscreen` class,
    which contains the logo and the loading message. To do so, we can use the next
    method, which will get the next sibling of the `splashscreen` node, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be a pleasant animation that is shown to the user. Also note
    that the `splashscreen` `<div>` tag was removed from the generated HTML, which
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the loading page](img/0457OT_02_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The complete code for the `launch` function will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: To make our splash screen even nicer, we will listen (`#1`) to the `afteranimate`
    event (`#2`) of the `fadeOut` method so that we can display the initial component
    of our application. We will show a login screen that we will implement in the
    next chapter. For now, we will add a console message (`#3`) just to know where
    we need to call the initial component. In Internet Explorer, `console.log` will
    not work; instead, you can use `window.console.log`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that all the code we used to display the loading message mask and remove
    it is part of the `Ext.dom.Element` class. This class encapsulates a **Document
    Object Model** (**DOM**) element, where we can manage it using the class's methods.
    This class is a part of the `Ext Core` library, which is a part of the foundation
    of the Ext JS framework.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the application we will implement throughout the
    chapters of this book in a lot of depth. We also covered all the requirements
    to create the development environment for this application. You learned how to
    create the initial structure of an Ext JS MVC application.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned, through examples, how to create a splash screen (also known
    as the loading screen), manipulating the DOM using the `Ext.dom.Element` class.
    You learned the steps how to start up an Ext JS application and also learned the
    difference between the `init` and `launch` methods from `Ext.application`. We
    left `Application.js` ready to display its first screen, which will be a login
    screen, and which you will learn how to implement in the next chapter.
  prefs: []
  type: TYPE_NORMAL
