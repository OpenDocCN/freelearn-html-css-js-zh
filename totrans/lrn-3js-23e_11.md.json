["```js\n<script type=\"text/javascript\" src=\"img/EffectComposer.js\"></script>\n<script type=\"text/javascript\" src=\"img/MaskPass.js\"></script>\n<script type=\"text/javascript\" src=\"img/RenderPass.js\"></script>\n<script type=\"text/javascript\" src=\"img/CopyShader.js\"></script>\n<script type=\"text/javascript\" src=\"img/ShaderPass.js\"></script>\n```", "```js\n<script type=\"text/javascript\" src=\"img/FilmPass.js\"></script>\n<script type=\"text/javascript\" src=\"img/FilmShader.js\"></script>\n```", "```js\nvar webGLRenderer = new THREE.WebGLRenderer();\nvar composer = new THREE.EffectComposer(webGLRenderer);\n```", "```js\nvar renderPass = new THREE.RenderPass(scene, camera);\ncomposer.addPass(renderPass);\n```", "```js\nvar renderPass = new THREE.RenderPass(scene,camera);\nvar effectFilm = new THREE.FilmPass(0.8, 0.325, 256, false);\neffectFilm.renderToScreen = true;\n\nvar composer = new THREE.EffectComposer(webGLRenderer);\ncomposer.addPass(renderPass);\ncomposer.addPass(effectFilm);\n```", "```js\nvar clock = new THREE.Clock();\nfunction render() {\n  stats.update();\n\n  var delta = clock.getDelta();\n  orbitControls.update(delta);\n\n  sphere.rotation.y += 0.002;\n\n  requestAnimationFrame(render);\n  composer.render(delta);\n}\n```", "```js\nvar renderPass = new THREE.RenderPass(scene, camera);\nvar effectCopy = new THREE.ShaderPass(THREE.CopyShader);\neffectCopy.renderToScreen = true;\n\nvar composer = new THREE.EffectComposer(webGLRenderer);\ncomposer.addPass(renderPass);\ncomposer.addPass(effectCopy);\n\nvar renderScene = new THREE.TexturePass(composer.renderTarget2);\n```", "```js\nvar effectFilm = new THREE.FilmPass(0.8, 0.325, 256, false);\neffectFilm.renderToScreen = true;\n\nvar composer4 = new THREE.EffectComposer(webGLRenderer);\ncomposer4.addPass(renderScene);\ncomposer4.addPass(effectFilm);\n```", "```js\neffectFilm.uniforms.grayscale.value = controls.grayscale;\neffectFilm.uniforms.nIntensity.value = controls.noiseIntensity;\neffectFilm.uniforms.sIntensity.value = controls.scanlinesIntensity;\neffectFilm.uniforms.sCount.value = controls.scanlinesCount;\n```", "```js\nvar effectCopy = new THREE.ShaderPass(THREE.CopyShader);\neffectCopy.renderToScreen = true;\n...\nvar bloomPass = new THREE.BloomPass(3, 25, 5, 256);\nvar composer3 = new THREE.EffectComposer(webGLRenderer);\ncomposer3.addPass(renderScene);\ncomposer3.addPass(bloomPass);\ncomposer3.addPass(effectCopy);\n```", "```js\nvar dotScreenPass = new THREE.DotScreenPass();\nvar composer1 = new THREE.EffectComposer(webGLRenderer);\ncomposer1.addPass(renderScene);\ncomposer1.addPass(dotScreenPass);\ncomposer1.addPass(effectCopy);\n```", "```js\nfunction render() {\n  stats.update();\n\n  var delta = clock.getDelta();\n  orbitControls.update(delta);\n\n  sphere.rotation.y += 0.002;\n\n  requestAnimationFrame(render);\n\n  webGLRenderer.autoClear = false;\n  webGLRenderer.clear();\n\n  webGLRenderer.setViewport(0, 0, 2 * halfWidth, 2 * halfHeight);\n  composer.render(delta);\n\n  webGLRenderer.setViewport(0, 0, halfWidth, halfHeight);\n  composer1.render(delta);\n\n  webGLRenderer.setViewport(halfWidth, 0, halfWidth, halfHeight);\n  composer2.render(delta);\n\n  webGLRenderer.setViewport(0, halfHeight, halfWidth, halfHeight);\n  composer3.render(delta);\n\n  webGLRenderer.setViewport(halfWidth, halfHeight, halfWidth, halfHeight);\n  composer4.render(delta);\n}\n```", "```js\n<script type=\"text/javascript\" src=\"img/GlitchPass.js\"></script>\n<script type=\"text/javascript\" src=\"img/DigitalGlitch.js\"></script>\n```", "```js\nvar effectGlitch = new THREE.GlitchPass(64);\neffectGlitch.renderToScreen = true;\n```", "```js\nvar sceneEarth = new THREE.Scene();\nvar sceneMars = new THREE.Scene();\nvar sceneBG = new THREE.Scene();\n```", "```js\nvar sphere = createEarthMesh(new THREE.SphereGeometry(10, 40, 40));\nsphere.position.x = -10;\nvar sphere2 = createMarshMesh(new THREE.SphereGeometry(5, 40, 40));\nsphere2.position.x = 10;\nsceneEarth.add(sphere);\nsceneMars.add(sphere2);\n```", "```js\nvar cameraBG = new THREE.OrthographicCamera(-window.innerWidth, window.innerWidth, window.innerHeight, -window.innerHeight, -10000, 10000);\ncameraBG.position.z = 50;\n\nvar materialColor = new THREE.MeshBasicMaterial({ map: THREE.ImageUtils.loadTexture(\"../assets/textures/starry-deep-outer-space-galaxy.jpg\"), depthTest: false });\nvar bgPlane = new THREE.Mesh(new THREE.PlaneGeometry(1, 1), materialColor);\nbgPlane.position.z = -100;\nbgPlane.scale.set(window.innerWidth * 2, window.innerHeight * 2, 1);\nsceneBG.add(bgPlane);\n```", "```js\nvar composer = new THREE.EffectComposer(webGLRenderer);\ncomposer.renderTarget1.stencilBuffer = true;\ncomposer.renderTarget2.stencilBuffer = true;\n\ncomposer.addPass(bgPass);\ncomposer.addPass(renderPass);\ncomposer.addPass(renderPass2);\n\ncomposer.addPass(marsMask);\ncomposer.addPass(effectColorify1);\ncomposer.addPass(clearMask);\n\ncomposer.addPass(earthMask);\ncomposer.addPass(effectSepia);\ncomposer.addPass(clearMask);\n\ncomposer.addPass(effectCopy);\n```", "```js\nvar bgPass = new THREE.RenderPass(sceneBG, cameraBG);\nvar renderPass = new THREE.RenderPass(sceneEarth, camera);\nrenderPass.clear = false;\nvar renderPass2 = new THREE.RenderPass(sceneMars, camera);\nrenderPass2.clear = false;\n```", "```js\nvar marsMask = new THREE.MaskPass(sceneMars, camera );\nvar clearMask = new THREE.ClearMaskPass();\nvar effectColorify = new THREE.ShaderPass(THREE.ColorifyShader );\neffectColorify.uniforms['color'].value.setRGB(0.5, 0.5, 1);\n```", "```js\nthis.changeRGBShifter = function() {\n  rgbShift.uniforms.amount.value = controls.rgbAmount;\n  rgbShift.uniforms.angle.value = controls.angle;\n}\n```", "```js\nTHREE.CustomGrayScaleShader = {\n\n  uniforms: {\n\n    \"tDiffuse\": { type: \"t\", value: null },\n    \"rPower\":  { type: \"f\", value: 0.2126 },\n    \"gPower\":  { type: \"f\", value: 0.7152 },\n    \"bPower\":  { type: \"f\", value: 0.0722 }\n\n  },\n\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n      \"vUv = uv;\",\n      \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n\n  fragmentShader: [\n\n    \"uniform float rPower;\",\n    \"uniform float gPower;\",\n    \"uniform float bPower;\",\n    \"uniform sampler2D tDiffuse;\",\n\n    \"varying vec2 vUv;\",\n\n    \"void main() {\",\n      \"vec4 texel = texture2D( tDiffuse, vUv );\",\n      \"float gray = texel.r*rPower + texel.g*gPower+ texel.b*bPower;\",\n      \"gl_FragColor = vec4( vec3(gray), texel.w );\",\n    \"}\"\n  ].join(\"\\n\")\n};\n```", "```js\n\"varying vec2 vUv;\",\"void main() {\",\n  \"vUv = uv;\",\n  \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n  \"}\"\n```", "```js\n\"uniform float rPower;\",\n\"uniform float gPower;\",\n\"uniform float bPower;\",\n\"uniform sampler2D tDiffuse;\",\n\n\"varying vec2 vUv;\",\n```", "```js\nuniforms: {\n\n  \"tDiffuse\": { type: \"t\", value: null },\n  \"rPower\":  { type: \"f\", value: 0.2126 },\n  \"gPower\":  { type: \"f\", value: 0.7152 },\n  \"bPower\":  { type: \"f\", value: 0.0722 }\n\n},\n```", "```js\n\"void main() {\",\n  \"vec4 texel = texture2D( tDiffuse, vUv );\",\n  \"float gray = texel.r*rPower + texel.g*gPower + texel.b*bPower;\",\n  \"gl_FragColor = vec4( vec3(gray), texel.w );\"\n```", "```js\nvar renderPass = new THREE.RenderPass(scene, camera);\n\nvar effectCopy = new THREE.ShaderPass(THREE.CopyShader);\neffectCopy.renderToScreen = true;\n\nvar shaderPass = new THREE.ShaderPass(THREE.CustomGrayScaleShader);\n\nvar composer = new THREE.EffectComposer(webGLRenderer);\ncomposer.addPass(renderPass);\ncomposer.addPass(shaderPass);\ncomposer.addPass(effectCopy);\n```", "```js\nshaderPass.enabled = controls.grayScale;\nshaderPass.uniforms.rPower.value = controls.rPower;\nshaderPass.uniforms.gPower.value = controls.gPower;\nshaderPass.uniforms.bPower.value = controls.bPower;\n```", "```js\nuniforms: {\n\n  \"tDiffuse\": { type: \"t\", value: null },\n  \"bitSize\":  { type: \"i\", value: 4 }\n\n}\n```", "```js\nfragmentShader: [\n\n  \"uniform int bitSize;\",\n\n  \"uniform sampler2D tDiffuse;\",\n\n  \"varying vec2 vUv;\",\n\n  \"void main() {\",\n\n    \"vec4 texel = texture2D( tDiffuse, vUv );\",\n    \"float n = pow(float(bitSize),2.0);\",\n    \"float newR = floor(texel.r*n)/n;\",\n    \"float newG = floor(texel.g*n)/n;\",\n    \"float newB = floor(texel.b*n)/n;\",\n\n    \"gl_FragColor = vec4(newR, newG, newB, texel.w );\",\n\n  \"}\"\n\n].join(\"\\n\")\n```"]