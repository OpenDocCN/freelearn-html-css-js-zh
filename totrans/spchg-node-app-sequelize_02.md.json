["```js\nsequelize model:generate --name Airplane --attributes planeModel:string,totalSeats:integer\nsequelize model:generate --name Customer --attributes name:string,email:string\nsequelize model:generate --name FlightSchedule --attributes originAirport:string,destinationAirport:string,departureTime:date\nsequelize model:generate --name BoardingTicket --attributes seat:string\n```", "```js\n'use strict';\nconst {\n  Model\n} = require('@sequelize/core');\nmodule.exports = (sequelize, DataTypes) => {\n  class FlightSchedule extends Model {\n    /**\n     * Helper method for defining associations.\n     * This method is not a part of Sequelize lifecycle.\n     * The `models/index` file will call this method\n       automatically.\n     */\n    static associate(models) {\n      // define association here\n    }\n  };\n  FlightSchedule.init({\n    originAirport: DataTypes.STRING,\n    destinationAirport: DataTypes.STRING,\n    departureTime: DataTypes.DATE\n  }, {\n    sequelize,\n    modelName: 'FlightSchedule',\n  });\n  return FlightSchedule;\n};\n```", "```js\nmodule.exports = (sequelize, DataTypes) => {\n    return sequelize.define('FlightSchedule', {\n        originAirport: DataTypes.STRING,\n        destinationAirport: DataTypes.STRING,\n        departureTime: DataTypes.DATE\n    }, {\n        sequelize,\n    });\n};\n```", "```js\n// INT(4)\nvar unsignedInteger = DataTypes.NUMBER({\n    length: 4,\n    zerofill: false,\n    unsigned: true,\n});\n// FLOAT(5,4)\nvar specificFloat = DataTypes.NUMBER({\n    length: 5,\n    zerofill: false,\n    unsigned: false,\n    decimals: 4\n});\n// DECIMAL(6,4)\nvar specificPrecision = DataTypes.NUMBER({\n    zerofill: false,\n    unsigned: false,\n    precision: 6,\n    scale: 4\n});\n```", "```js\nDataTypes.INTEGER(21).UNSIGNED\n```", "```js\nDataTypes.INTEGER(21).UNSIGNED.ZEROFILL\n```", "```js\nDataTypes.FLOAT.UNSIGNED.ZEROFILL\n```", "```js\nDataTypes.DATE(6)\n```", "```js\nReceipt.init({\n    total: DataTypes.DECIMAL(10,2),\n    tax: DataTypes.DECIMAL(10,2),\n    dateOfPurchase: {\n        type: DataTypes.DATE,\n        defaultValue: DataTypes.NOW\n    }\n}, {\n    sequelize,\n    modelName: 'Receipt'\n});\n```", "```js\nnpm install --save sequelize pg pg-hstore\n```", "```js\nMyModel.find({\n  where: {\n    myHstoreColumn: {\n      someFieldKey: 'value',\n    }\n  }\n});\n```", "```js\n{\n    \"someKey\": {\n        \"deeply\": {\n            \"nested\": true\n        }\n    }\n}\n```", "```js\nMyModel.find({\n    where: {\n        myJsonColumn: {\n            someKey: { deeply: { nested: true } }\n        }\n    }\n});\n```", "```js\nsequelize.define('MyModel', {\n    myJsonColumn: {\n        type: DataTypes.TEXT,\n        get: function () {\n            return JSON.parse(this.getDataValue('value'));\n        },\n        set: function (val) {\n            this.setDataValue('value',JSON.stringify(val));\n        }\n    }\n});\n```", "```js\n// String matching\nMyModel.find({\n  where: {\n    \"someKey.deeply.nested\": {\n      [Op.eq]: true\n    }\n  }\n});\n// Using the Op.contains operator\nMyModel.find({\n  where: {\n    someKey: {\n      [Op.contains]: {\n        deeply: {\n          nested: true\n        }\n      }\n    }\n  }\n});\n```", "```js\nDataTypes.BLOB // BLOB\nDataTypes.BLOB('tiny') // TINYBLOB\nDataTypes.BLOB('medium') // MEDIUMBLOB\nDataTypes.BLOB('long') // LONGBLOB\n```", "```js\nvar MyModel = sequelize.define('MyModel', {\n    myRangeColumn: DataTypes.RANGE(DataTypes.INTEGER)\n});\n```", "```js\n// inclusive boundaries are the default for Sequelize\n   var inclusiveRange = [10, 20];\nMyModel.create({ myRangeColumn: inclusiveRange });\n// inclusion may be toggled with a parameter\n   var range = [\n    { value: 10, inclusive: false },\n    { value: 20, inclusive: true }\n];\nMyModel.create({ myRangeColumn: range });\n```", "```js\nsequelize.define('MyModel', {\n    id: {\n        type: DataTypes.UUID,\n        defaultValue: DataTypes.UUIDV4,\n        allowNull: false,\n        primaryKey: true\n    }\n});\n```", "```js\nsequelize.define('MyModel', {\n    envelope: DataTypes.STRING,\n    message: {\n        type: DataTypes.VIRTUAL,\n        set: function(val) {\n            // the following line is optional\n            // but required if you wish to use the\n               validation associated with the attribute\n            this.setDataValue('message', val);\n            this.setDataValue('envelope', \n                               encryptTheMessage(val));\n        },\n        validate: {\n            noDadJokes: function(val) {\n                if (val === \"knock knock\") {\n                    throw new Error(\"Who is there? Not this \n                                     message\")\n                }\n            }\n        }\n    }\n});\n```", "```js\nsequelize.define('MyModel', {\n    envelope: DataTypes.STRING,\n    message: {\n        type: DataTypes.VIRTUAL(DataTypes.STRING, ['en\n        velope']),\n        get: function() {\n            return decryptTheMessage(this.get('envelope'));\n        },\n        set: function(val) {\n            this.setDataValue('envelope', \n                               encryptTheMessage(val));\n        }\n    }\n});\n```", "```js\n// Defining enums with function arguments\nDataTypes.ENUM('a', 'b')\n// Defining enums with an array argument\nDataTypes.ENUM(['a', 'b'])\n// Defining enums with an object argument\nDataTypes.ENUM({\n    values: ['a', 'b']\n})\n```", "```js\nDataTypes.ARRAY(DataTypes.STRING) // text[]\nDataTypes.ARRAY(DataTypes.DECIMAL) // double precision[]\n```", "```js\nvar MyModel = sequelize.define('MyModel', {\n    point: DataTypes.GEOMETRY('POINT'),\n    polygon: DataTypes.GEOMETRY('POLYGON')\n});\nvar point = {\n    type: 'Point',\n    coordinates: [44.386815, -82.755759]\n}\nvar polygon = { type: 'Polygon', coordinates: [\n    [\n        [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n        [100.0, 1.0], [100.0, 0.0]\n    ]\n]};\nawait MyModel.create({ point, polygon });\n```", "```js\nvar MyModel = sequelize.define('MyModel', {\n    col: DataTypes.TSVECTOR\n});\nMyModel.create({\n    col: 'The quick brown fox jumps over the lazy dog'\n});\n```", "```js\nMyModel.find({\n    where: { col: 'fox' }\n});\n```", "```js\nSELECT * FROM MyModel WHERE col = 'fox';\n```", "```js\nMyModel.find({\n    where: {\n        col: {\n            [Op.match]: sequelize.fn('to_tsvector', 'fox')\n        }\n    }\n});\n```", "```js\nSELECT * FROM MyModel WHERE col @@ to_tsvector('fox');\n```", "```js\n'use strict';\nmodule.exports = {\n  up: async (queryInterface, Sequelize) => {\n    await queryInterface.createTable('Airplanes', {\n      id: {\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n        type: Sequelize.INTEGER\n      },\n      planeModel: {\n        type: Sequelize.STRING\n      },\n      totalSeats: {\n        type: Sequelize.INTEGER\n      },\n      createdAt: {\n        allowNull: false,\n        type: Sequelize.DATE\n      },\n      updatedAt: {\n        allowNull: false,\n        type: Sequelize.DATE\n      }\n    });\n  },\n  down: async (queryInterface, Sequelize) => {\n    await queryInterface.dropTable('Airplanes');\n  }\n};\n```", "```js\nsequelize db:migrate\n```", "```js\nsequelize db:migrate:undo\n```", "```js\nsequelize db:migrate:undo:all\n```", "```js\nsequelize db:migrate:undo:all --to XXXXXXXXXXXXXX-airlines.js\n```", "```js\n$ mysql -uroot airline\nmysql> show tables;\n```", "```js\nsequelize seed:generate --name initial-airplanes\n```", "```js\n'use strict';\nmodule.exports = {\n  up: async (queryInterface, Sequelize) => {\n    await queryInterface.bulkInsert('Airplanes', [{\n      planeModel: 'Airbus A220-100',\n      totalSeats: 110,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }, {\n      planeModel: 'Airbus A220-300',\n      totalSeats: 110,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }, {\n      planeModel: 'Airbus A 318',\n      totalSeats: 115,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }, {\n      planeModel: 'Boeing 707-100',\n      totalSeats: 100,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }, {\n      planeModel: 'Boeing 737-100',\n      totalSeats: 85,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }], {});\n  },\n  down: async (queryInterface, Sequelize) => {\n    await queryInterface.bulkDelete('Airplanes', null, {});\n  }\n};\n```", "```js\nsequelize db:seed:all\n```", "```js\nSELECT * FROM airplanes;\n```", "```js\nsequelize db:seed:undo\nsequelize db:seed:undo:all\nsequelize db:seed:undo --seed <the name of your seed file>\n```", "```js\napp.get('/', async function (req, res) {\n    const airplanes = await models.Airplane.findAll();\n    res.send(\"<pre>\" + JSON.stringify(airplanes, undefined, \n              4) + \"</pre>\");\n});\n```", "```js\nnpm run start\n```", "```js\napp.get('/airplanes/:id', async function (req, res) {\n    var airplane = await models.Airplane.findByPk\n                   (req.params.id);\n    if (!airplane) {\n        return res.sendStatus(404);\n    }\n    res.send(\"<pre>\" + JSON.stringify(airplane, undefined, \n              4) + \"</pre>\");\n});\n```", "```js\nconst { Op } = require(\"sequelize\");\nMyModel.findAll({\n    where: {\n        [Op.or]: [\n            { status: 'active' },\n            sequelize.where(sequelize.fn('lower', se\n            quelize.col('name')), {\n                [Op.eq]: 'bob'\n            },\n            {\n                [Op.and]: {\n                    age: {\n                        [Op.gte]: 40\n                    },\n                    name: {\n                        [Op.like]: 'mary%'\n                    }\n                }\n            }\n        }]\n    }\n});\n```", "```js\nSELECT\n    ...\nFROM \"MyModel\"\nWHERE (\n    status = 'active'\n    OR\n    lower(name) = 'bob'\n    OR (\n        age >= 40\n        AND\n        name LIKE 'mary%'\n    )\n)\n```", "```js\nvar record = MyModel.findOne({ where: { /* ... */ } });\nawait record.destroy();\n```", "```js\nMyModel.destroy({ where: { name: 'Bob' }});\n```", "```js\nawait MyModel.destroy({ truncate: true });\n// or\nawait MyModel.truncate();\n```", "```js\nawait MyModel.update({ name: \"John\" }, {\n  where: { name: null }\n});\n```", "```js\nvar record = MyModel.findOne();\nrecord.name = \"John\";\nawait record.save();\n```", "```js\nvar record = MyModel.findOne({ where: { name: 'John' } });\nrecord.name = \"Bob\";\nrecord.reload();\n// the record.name attribute's value is now back to John\n```", "```js\nawait MyModel.create({ firstName: 'Bob' }, { ... });\n```", "```js\nawait MyModel.bulkCreate([\n    { firstName: 'Bob' },\n    { firstName: 'William' }\n], {...});\n```", "```js\nMyModel.findAll({\n    where: { name: 'Bob' },\n    order: [\n        ['name', 'DESC']\n    ]\n});\n```", "```js\nMyModel.findAll({ group: 'name' });\n```", "```js\nMyModel.findAll({ offset: 5, limit: 10 });\n```", "```js\nawait Post.destroy({\n  where: {\n    id: 1\n  }\n});\n```", "```js\nawait Post.destroy({\n  where: {\n    id: 1\n  },\n  force: true\n});\n```", "```js\nclass User extends Model { }\nUser.init({\n    name: DataTypes.STRING,\n}, {\n    sequelize,\n    modelName: 'User',\n    omitNull: true,\n    // renames deletedAt to removedAt\n    deletedAt: 'removedAt',\n    // start with ID 1000\n    initialAutoIncrement: 1000,\n    validate: {\n        isNotBob() {\n            if (this.name === 'bob') {\n                throw new Error(\"Bob is not allowed to be a \n                                 user.\");\n            }\n        }\n    },\n    indexes: [\n        { unique: true, fields: ['name'] }\n    ],\n});\n```"]