["```js\n bower installing \n         npm install \n\n```", "```js\n- Shoes \n- Clothing \n- Accessories \n- Women \n- Men \n- Kids \n- All Departments \n\n```", "```js\n  <ul class=\"nav navbar-nav navbar-toggleable-sm collapse\"\n  id=\"collapsiblecontent\"> \n  {{#each productgroups}} \n    <li class=\"nav-item dropdown {{#ifCond this 'Shoes'}}active{{/ifCond}}\"> \n      <a class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\"\n      role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"> \n      {{ this }} \n      </a> \n        <div class=\"dropdown-menu\"> \n          <a class=\"dropdown-item\" href=\"#\">Action</a> \n          <a class=\"dropdown-item\" href=\"#\">Another action</a> \n          <a class=\"dropdown-item\" href=\"#\">Something else here</a> \n          <div class=\"dropdown-divider\"></div> \n          <a class=\"dropdown-item\" href=\"#\">Separated link</a> \n        </div> \n    </li> \n  {{/each}} \n  </ul> \n\n```", "```js\nheader[role=\"banner\"] { \n  border-bottom: 4px solid $gray-lighter; \n}   \n\n```", "```js\nbower install holderjs --save-dev\n\n```", "```js\ngulp.task('compile-js', function() { \n  return gulp.src([ \n        bowerpath+ 'jquery/dist/jquery.min.js', \n        bowerpath+ 'tether/dist/js/tether.min.js', \n        bowerpath+ 'bootstrap/dist/js/bootstrap.min.js', \n        bowerpath+ 'holderjs/holder.min.js', // Holder.js for project\n        development only \n        'js/main.js']) \n    .pipe(concat('app.js')) \n    .pipe(gulp.dest('./_site/js/')); \n}); \n\n```", "```js\n<!-- Holder.js for project development only --> \n<script src=\"img/holder.js\"></script> \n\n```", "```js\n<img src=\"img/textmode:literal\"    alt=\"Holder Image\"> \n\n```", "```js\n            <header role=\"banner\"> \n            <div class=\"container\"> \n            <button class=\"navbar-toggler hidden-md-up\" type=\"button\"\n            data-toggle=\"collapse\" data-target=\"#collapsiblecontent\"> \n            ? \n            </button> \n            <a class=\"navbar-brand\" href=\"/\"><img src=\"img/logo.png\"\n            alt=\"Bootstrappin'\"></a> \n            </div>      \n            <nav class=\"navbar navbar-full\" role=\"navigation\"> \n            <div class=  \"container navbar-toggleable-sm collapse\"\n            id=\"collapsiblecontent\"> \n            <ul class=\"nav navbar-nav\"> \n            ... \n            </ul> \n            </div> \n            </nav> \n            </header> \n\n    ```", "```js\n        header[role=\"banner\"] { \n          .navbar-brand { \n          > img { \n              width: 120px; \n              padding-left: $spacer-x; \n              @include media-breakpoint-up(md) { \n                padding-left: 0; \n                width: 180px; \n              } \n            }\n          } \n        } \n\n```", "```js\n<li class=\"nav-item dropdown\"> \n  <a class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\"\n  role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"> \n    Shoes \n  </a> \n  <div class=\"dropdown-menu\"> \n    <a class=\"dropdown-item\" href=\"#\">Action</a> \n    <a class=\"dropdown-item\" href=\"#\">Another action</a> \n    <a class=\"dropdown-item\" href=\"#\">Something else here</a> \n    <div class=\"dropdown-divider\"></div> \n    <a class=\"dropdown-item\" href=\"#\">Separated link</a> \n  </div> \n</li> \n\n```", "```js\n.dropdown-toggle { \n  // Generate the caret automatically \n  &::after { \n    display: inline-block; \n    width: 0; \n    height: 0; \n    margin-right: .25rem; \n    margin-left: .25rem; \n    vertical-align: middle; \n    content: \"\"; \n    border-top: $caret-width solid; \n    border-right: $caret-width solid transparent; \n    border-left: $caret-width solid transparent; \n  } \n\n  // Prevent the focus on the dropdown toggle when closing dropdowns \n  &:focus { \n    outline: 0; \n  } \n} \n\n```", "```js\n\n```", "```js\n\n![Reviewing and checking navbar drop-down items](img/00161.jpeg)Instead of modifying your HTML code, you can also use the following SCSS code to accomplish the same thing:\n\n```", "```js\n\nSo far so good! Now, let's add our utility navigation.\n```", "```js\nheader[role=\"banner\"] { \n  .navbar-brand { \n    > img { \n      width: 120px; \n      padding-left: $spacer-x; \n      @include media-breakpoint-up(md) { \n        padding-top: $spacer-y * 3; \n        padding-left: 0; \n        width: 180px; \n      } \n    } \n  } \n\nNote a few things about this markup:\n\n*   The `utility-nav` class is simply created for our use. It is not a Bootstrap-specific class and has no specific styles attached.\n*   I've included Font Awesome's user and shopping cart icons and added the class of `fa-lg` to increase their size by 33 percent. See Font Awesome's documentation on this at [http://fontawesome.io/examples/#larger](http://fontawesome.io/examples/#larger).\n\nSave the changes and inspect the results in your browser, and you should see our new `utility-nav` class appear on the right-hand side `of the` logo, as follows:![Adding utility navigation](img/00164.jpeg)Now, to complete the layout and related adjustments, we need to apply some custom styles. We need a new file to manage styles for our banner area.We need to set the position of `.utility-nav` to absolute, at the top right. We'll specify `header[role=\"banner\"]` as the context for these styles. Add the following SCSS code to the `scss/includes/_header.scss` file:\n\n```", "```js\n\nNow, let's refine the details as follows:\n\n1.  Remove bullets from the unordered list.\n2.  Float the list items on the left.\n3.  Add padding to the link.\n4.  Remove underlines from the hover effect.\n\nThe following lines will accomplish these goals:\n\n```", "```js\n\nSave the changes and ensure that it compiles. In the preceding code, we've set the padding for the anchors to `padding: 0 $spacer-x;`. We could accomplish this by adding Bootstrap's utility classes for spacing into the HTML code.\n\nThe following HTML code also sets a padding of `$spacer-x` on the left- and right-hand sides of the `<a>` element:\n\n```", "```js\n\nThen make sure your browser window is at desktop width. You should see your `utility-nav` class take its place at the top right of the banner:\n\n![Adding utility navigation](img/00165.jpeg)\n\nThat takes care of medium viewports and larger. Now, let's address the needs of the collapsed responsive navbar.\n\n# Making responsive adjustments\n\nOn small screens, the elements of our page header may overlap:\n\n![Making responsive adjustments](img/00166.jpeg)\n\nWe need to move the toggle to the left-hand side of our navbar. This can be done as follows:\n\n1.  Open the `scss/includes/_header.scss` file in your editor and add the following SCSS code to it:\n\n    ```", "```js\n\n2.  Save and compile these changes, and you'll see the navbar toggle shift to the left end of the collapsed navbar, as shown in the following screenshot:\n\n![Making responsive adjustments](img/00167.jpeg)\n\nSo far so good.\n\nNow to address the problem of crowding by hiding the text for all devices except for screen readers on the collapsed navbar. In an uncluttered collapsed navbar, the icons will be enough to communicate the point, especially if we make the icons larger. Let's do that:\n\n1.  In the `html/includes/_header.html` file, place `span` tags around the text within each link of our `utility-nav` class, as follows:\n\n    ```", "```js\n\n2.  This will give us a handle for our upcoming style adjustment.\n3.  Now, in `_headers.scss`, we'll add a media query to target these `span` tags. Thanks to the power of Sass, we can nest the media query precisely where we want it to do its work. We'll use Bootstrap's `@media-breakpoint-down(sm)` mixin, setting a `max-width` query to the small breakpoint value minus one, since at this point our navbar makes the transition from collapsed to expanded. Within this media query, we'll use the `sr-only` utility class as a mixin to hide text from all devices except screen readers. (See the documentation on this class at [http://getbootstrap.com/components/utilities/#screen-readers-and-keyboard-users](http://getbootstrap.com/components/utilities/#screen-readers-and-keyboard-users).)\n4.  Instead of the sr-only mixin, you can also add the `sr-only` class to your HTML. The `sr-only-focusable` mixin and `sr-only-focusable` CSS class are available to make content hidden by the the `sr-only` class visible on focus, which is useful for keyboard-only users.\n5.  Here is the code snippet:\n\n    ```", "```js\n\n6.  This will hide the text between our `span` tags, leaving us only with the icons!\n7.  Now, we will increase the size of the icons and add some line height to position them vertically. We'll do this within the same media query:\n\n```", "```js\n\nSave your changes, run the `bootstrap watch` command if you haven't already done so, and you should see the following result:\n\n![Making responsive adjustments](img/00168.jpeg)\n\nTake a minute to resize your browser window back and forth across the breakpoint. You should see the entire banner and navbar adjust seamlessly across the breakpoint.\n\nIf you're like me, it's hard not to be pleased with a framework that enables us to be this efficient at building such an adept and responsive interface.\n\nNext up, we need to begin implementing the color scheme.\n\n# Implementing the color scheme\n\nWe've been provided with a business-friendly palette of blue, red, and gray. Let's work these colors into our color variables:\n\n1.  Open `scss/includes_variables.scss` in your editor. We'll be working at the beginning of the file, in the color variables.\n2.  Let's review the range of grays we have available. If you've begun with the `chapter5/finish` files, you'll see we've carried these variables over from [Lesson 8](part0088_split_000.html#2JTHG1-d17423bd3b664255b5fd09e37e25e334 \"Chapter 8. Bootstrapping Your Portfolio\"), *Bootstrapping Your Portfolio*. They served us well there, and we'll make use of them again here:\n\n    ```", "```js\n\n3.  Now, below the grays, let's fold in our new brand colors. We'll modify the value for `@brand-primary` and create a `@brand-feature` variable for red:\n\n    ```", "```js\n\n4.  Now, let's adjust our link-hover color so that it will lighten (rather than darken) the `@brand-primary` color, which is already dark:\n\n    ```", "```js\n\n5.  Finally, let's define the colors for our navbar. We'll create two sets of variables the `-xs-` variables for the small screens and the `-md-` variables for the larger screens:\n\n```", "```js\n\nHaving set up these fundamental color variables, we're ready to work on our navbar.\n\n# Styling the collapsed navbar\n\nWhile still in `_navbar.less`, search for `// Navbar`, which will take you to the navbar variables. Note that most of the standard values specified here will affect both the collapsed responsive navbar for small viewports and the expanded navbar for wider viewports.\n\nWe want the background, text, and link colors for the collapsed responsive navbar to remain largely consistent with the default values but then change to our blue background and a light text color for medium and larger viewports.\n\nWe'll develop a responsive color scheme to accomplish the preceding color changes based on the viewport.\n\nOpen the `scss/includes/_navbar.scss` file and edit the default values for the small viewport as follows:\n\n```", "```js\n\nAs you can see, we'll use the `-xs-` variables now. For medium and large viewports—where our navbar stretches out horizontally below the logo—we want our navbar to take on the blue color. Using Bootstrap's media query mixins again, we can change the colors for the larger viewports, as follows:\n\n```", "```js\n\n## Customizing the drop-down menus\n\nWe will use the power of Sass again to customize the drop-down menus for smaller screens. Edit the following code in the `scss/includes/_navbar.scss` file:\n\n```", "```js\n\nIn the preceding code, we've used Bootstrap's media query mixins to reset the styles for screens smaller than 768 pixels. The initial value the initial value of a property to an element. So the preceding code sets the position to again and removes the float, border, and border-radius, and the drop-down menu will look like a \"normal\" list now:\n\n![Customizing the drop-down menus](img/00169.jpeg)\n\nFantastic! Now we can address the horizontal navbar.\n\n# Styling the horizontal navbar\n\nWhen you move your mouse over the navbar links, you'll find that the hover background color of the link is smaller than the height of the navbar:\n\n![Styling the horizontal navbar](img/00170.jpeg)\n\nYou can solve this issue by applying padding on the links instead of the navbar. Use the following SCSS code in the file to change the padding:\n\n```", "```js\n\nNow your navbar links should look like the following screenshot:\n\n![Styling the horizontal navbar](img/00171.jpeg)\n\nAnd finally, let's transform the text to upper case, reduce its size a bit, and make it bold. In `_navbar.scss`, add these highlighted lines:\n\n```", "```js\n\nThis will yield the following result:\n\n![Styling the horizontal navbar](img/00172.jpeg)\n\nOur banner and navbar are complete!\n\n# Enabling Flexbox support\n\nBootstrap 4 comes with optional flexbox support. You can simply enable flexbox support by declaring `$enable-flex: true;` in the `scss/includes/_variables` file. If you do so, you'll have clear the floats of the container of the navbar because of we've implement flexbox support for it. You can clear the floats by adding the following SCSS code to the file:\n\n```", "```js\n\nNow it's time to move on to the main content of our page.\n\n# Designing a complex responsive layout\n\nLet's imagine we've emerged from client meetings with a plan to organize the home page content in three tiers, ranked by importance.\n\nIn medium and wide viewports, this content will be laid out in three columns, as shown in the following screenshot:\n\n![Designing a complex responsive layout](img/00173.jpeg)\n\nIn a narrow viewport, these will be laid out one after another, in a single vertical column:\n\n![Designing a complex responsive layout](img/00174.jpeg)\n\nAnd in a small and medium `tablet-width` viewport, we'll arrange the content in two side-by-side columns, with the third tier of content laid out beneath it as a horizontal row, as shown in the following screenshot:\n\n![Designing a complex responsive layout](img/00175.jpeg)\n\nTo get us started, I've provided the basic markup for three equal columns. Let's review what we have and then adapt it to the needs of this design. We'll begin with the three-column layout for medium and wide viewports.\n\n## Adjusting the large and extra-large layout\n\nCurrently, in large and extra-large viewports, our three columns are equal in width, font size, button size, and color. As a result, the presentation lacks visual hierarchy, as seen in the following screenshot:\n\n![Adjusting the large and extra-large layout](img/00176.jpeg)\n\nWe can take significant strides by adjusting column width, font size, button size, and color to establish a clearer hierarchy between these tiers of content. Let's do that. We'll start by adjusting column widths:\n\n1.  In `html/pages/index.html`, search for the `section` tag for the primary content:\n\n    ```", "```js\n\n2.  Note that the `col-md-4` class sets the width of this column to one-third of the width of the parent element, beginning at the small viewport width (768 pixels and up).\n3.  We want to save the three-column layout for the large and extra-large viewports (992 pixels and up), and we want this first column to be wider than the others.\n4.  Edit the `col-md-4` class to read `col-lg-5`, as follows:\n\n    ```", "```js\n\n5.  This will set this column to 5/12 width with the medium viewport and larger.\n6.  Now search and find the opening `section` tags for the next two columns and adjust the column classes to `col-lg-4` and `col-lg-3` respectively:\n\n```", "```js\n\nSave, refresh, and you'll see the desired visual hierarchy in the width of our columns:\n\n![Adjusting the large and extra-large layout](img/00177.jpeg)\n\nYou might have noticed that the headings in the middle of the secondary and tertiary columns are not clearing the buttons above them. Let's adjust these, as well as our buttons and font sizes after adjusting the medium layout.\n\n## Adjusting the medium layout for tablet-width viewports\n\nFirst notice that the navbar is too small for the number of items on the medium layout. The items render into two rows, as follows:\n\n![Adjusting the medium layout for tablet-width viewports](img/00178.jpeg)\n\nTo get the items on a single row again, you may reduce the margin and padding of the navbar items or change the collapsing point of the navbar.\n\nFirst, try the margin and padding solution; you can use the power of Sass again. Open the file in your editor and add the following SCSS code:\n\n```", "```js\n\nNotice that I've wrapped the code in the `media-breakpoint-only()` mixin. The `media-breakpoint-only()` mixin works just like the media-breakpoint-up and media-breakpoint-down mixins you've seen before, but only targets a single grid by setting both the min-width and max-width for the media query.\n\nConsider the following SCSS code, for example:\n\n```", "```js\n\nThe preceding SCSS code compiles into CSS code similar to the following:\n\n```", "```js\n\nA `media-breakpoint-between()` mixin is available too. The `media-breakpoint-between()` mixin enables you to target a range of grids between two breakpoints. The `@include media-breakpoint-only(sm,md){}` call targets both small and medium grids.\n\n### Note\n\nYou may have noticed that your file contains a lot of media queries now. Sass does not merge media queries, so the compiled CSS code contains a lot of media queries too. Merging the same CSS media query rules into one media query rule may be a performance improvement for your CSS code. The css-mqpacker node package can process your CSS code pack's same CSS media query rules into one media query rule.\n\nYou can run the package with the gulp-postcss package just like the autoprefixer plugin. More information about css-mqpacker and how to integrate it in your Gulp build process can be found at the following URL: [https://www.npmjs.com/package/css-mqpacker](https://www.npmjs.com/package/css-mqpacker)\n\nA `media-breakpoint-between()` mixin is available too. The `media-breakpoint-between()` mixin enables you to target a range of grids between two breakpoints. The `@include media-breakpoint-only(sm,md){}` call targets both the small and medium grids.\n\nAlternatively, you may change the collapsing point of the navbar. First, open the html/includes/header.html file and change the appearance of the navbar toggler as follows:\n\n```", "```js\n\nNow you'll find a collapsed navbar on the medium grid too. Notice that we've made some changes to the navbar items and the submenus for the collapsed navbar before. You should change the media queries for these changes too. You can change the media queries in the `scss/includes/_navbar.sccs` file:\n\n```", "```js\n\nAlso change the breakpoint for the navbar class in the `scss/includes/_header.scss` file:\n\n```", "```js\n<section class=\"content-primary col-md-6 col-lg-5\"> \n  ... \n</section> \n<section class=\"content-secondary col-md-6 col-lg-4\"> \n  ... \n</section> \n<section class=\"content-tertiary col-md-12 col-lg-3\"> \n  ... \n</section> \n\n```", "```js\n<article class=\"col-md-4 col-lg-12\">...</article>\n```", "```js\n<section class=\"content-tertiary col-md-12 col-lg-3\">\n<div class=\"row\">\n<article class=\"col-md-4 col-lg-12\">\n<h4>Don't Miss!</h4>\n<p>Suspendisse et arcu felis, ac gravida turpis. Suspendisse potenti.\n    Ut porta rhoncus ligula, sed fringilla felis feugiat eget. In non purus\n    quis elit iaculis tincidunt. Donec at ultrices est.</p>\n\t<p><a class=\"btn btn-primary pull-right\" href=\"#\">Read more\n    <span class=\"icon fa fa-arrow-circle-right\">\n\t</span></a></p>\n\t</article>\n\t<article class=\"col-md-4 col-lg-12\">                    <h4>Check it out</h4>\n\t<p>Suspendisse et arcu felis, ac gravida turpis. Suspendisse potenti.\n    Ut porta rhoncus ligula, sed fringilla felis feugiat eget. In non purus\n    quis elit iaculis tincidunt. Donec at ultrices est.</p>\n\t<p><a class=\"btn btn-primary pull-right\" href=\"#\">Read more\n    <span class=\"icon fa fa-arrow-circle-right\">\n\t</span></a></p>\n\t</article>\n\t<article class=\"col-md-4 col-lg-12\">                   <h4>Finally</h4><p>Suspendisse et arcu felis, ac gravida turpis. Suspendisse potenti.\n    Ut porta rhoncus ligula, sed fringilla felis feugiat eget. In non purus\n    quis elit iaculis tincidunt. Donec at ultrices est.</p><p><a class=\"btn btn-primary pull-right\" href=\"#\">Read more\n    <span class=\"icon fa fa-arrow-circle-right\"></span></a></p></article></div>  </section>\n```", "```js\n\n## Adjusting headings, font sizes, and buttons\n\nLet's begin by adjusting our headings so that they consistently clear the buttons above them, which have been floated to the right. For this purpose, we'll use the file we previously created to manage the details of the page contents, `_page-contents.scss`.\n\nHere's how to do it:\n\n1.  In `_page-contents.scss`, let's write a selector to select headings `h1` through `h4` when they're nested inside a Bootstrap column class. We'll use the CSS2 attribute selector and cover our bases by targeting any element whose classes include the `col-` string.\n\n    ### Tip\n\n    Later in this chapter, we will equip our footer with its own set of responsive columns. Thus, we need to make sure we nest these rules within the selector for the main element.\n\n2.  Within this context, we'll select all heading tags we might potentially use and set them to clear floated elements, with some added padding for separation:\n\n    ```", "```js\n\n3.  This gives the necessary separation between our headings and floated buttons. But it also creates unneeded padding at the top of the secondary and tertiary columns.\n4.  In the following screenshot, the lower arrows highlight the improvement accomplished now that our headings clear the floated buttons. Also, the ragged top edge of our columns, where padding causes a problem:![Adjusting headings, font sizes, and buttons](img/00180.jpeg)\n5.  Let's remove the margin and padding from the uppermost heading in each column. We'll use the `:first-child` selector for these headings, nesting these lines within our heading selectors. We'll use the `&` combinator, which in this formulation allows us to select any first-child instance of these headings:\n\n    ```", "```js\n\n6.  This removes the extra margin and padding and evens up the top edge of the second:![Adjusting headings, font sizes, and buttons](img/00181.jpeg)\n7.  But now there is a problem with the third column. The `:first-child` selector matches each `h4` element in the third column due to the nesting we added before. You can solve this issue by creating a new `h4` selector in your Sass code, as follows:\n\n    ```", "```js\n\n8.  However, we only want to remove this top margin and padding in medium, large, or extra-large viewports, which accommodate multiple columns. Thus, we need to nest this rule within a media query corresponding with the breakpoint at which our layout expands from a narrow single-column layout to a wider multi-column layout.\n9.  Thus, we need to nest what we've just done within a media query for medium viewports and larger:\n\n```", "```js\n\nWith the preceding media query, we've retained the padding we need between elements in the single-column layout for narrow viewports, as seen in the following screenshot:\n\n![Adjusting headings, font sizes, and buttons](img/00182.jpeg)\n\nWith this accomplished, we can move on to adjust buttons and font sizes to reflect the informational hierarchy of our content. Let's begin by enlarging the font size, button size, and color in our primary content area.\n\n## Enhancing the primary column\n\nFirst, let's increase the font size of our primary column content:\n\n1.  In Bootstrap's `_variables.scss` file, the `$font-size-large` variable is set to the following by default:\n\n    ```", "```js\n\n2.  Now, in the `scss/includes/_page-contents.scss` file, add these lines to use this font size for our primary content:\n\n```", "```js\n\nSave these changes, compile the file, and refresh your browser. You should see the font size increase accordingly!\n\nNow, let's adjust the color of our button to utilize the red `$brand-feature` color. We'll utilize the `$brand-feature` variable we set up in the local `scss/includes/_variables.scss` file.\n\n```", "```js\n\nWe'll also utilize an excellent `button-variant()` mixin provided in the Bootstrap `mixins/_buttons.scss` file. You may want to take a moment to check it out. Open the `mixins/_buttons.scss` in the Bootstrap's source code in the `bower_components` directory and search for `// Button` variants. You'll find a mixin that begins as follows:\n\n```", "```js\n\nThe mixin does the following:\n\n*   Specifies the button font, background, and border colors (in other words, the three parameters that the mixin accepts)\n*   Generates hover, focus, active, and disabled states for the button, adjusting font color, background color, and border\n\nIf you'd like to, you can see how Bootstrap uses this mixin in `bootstrap/_buttons.scss` under the `// Alternate buttons` comment. Here are the lines generating styles for the default and primary buttons:\n\n```", "```js\n\n### Tip\n\nYou will find the variables beginning `with $btn-primary-` and `$btn-secondary-` in the `bower_components/bootstrap/scss/_variables.scss` file.\n\nFollowing this pattern, we can generate our custom feature button in four simple steps:\n\n1.  First, we'll set up a new set of button variables. In the `_scss/includes/_variables.scss` file, under `// Buttons`, make a copy of the three `$btn-primary-` variables, and customize them, replacing `-primary-` with `-feature-` and using `$brand-feature` as the background color:\n\n    ```", "```js\n\n2.  Next, we can make a file to keep our custom buttons. Create `scss/includes/_buttons.scss` and write a mixin based on the `.btn-primary` mixin from `bootstrap/_buttons.scss`, as follows:\n\n    ```", "```js\n\n3.  Save this file and add it to the import sequence in `scss/app.scss` as follows:\n\n    ```", "```js\n\n4.  Now, in the `html/pages/index.html` file, change the button class from `btn-primary` to `btn-feature`. While we're at it, we want to make the button large, so add the `btn-lg` class:\n\n```", "```js\n\nSave your work. Run the `bootstrap watch` command, and you should see the following result. The primary column to the left now has a larger font size and a large button with our `brand-feature` color:\n\n![Enhancing the primary column](img/00183.jpeg)\n\nMeanwhile, the font size and button colors of the secondary (center) column are exactly what we want. What needs to happen next is this: we need to de-emphasize the tertiary column content so that it takes its appropriate place in the informational hierarchy.\n\n## Adjusting the tertiary column\n\nOur task for the tertiary content is fairly straightforward. We have to reduce the font size and de-emphasize the buttons. This can be accomplished as follows:\n\n1.  First, we'll adjust the `font-size`. In Bootstrap's `_variables.scss file`, the `$font-size-sm` variable is set as follows:\n\n    ```", "```js\n\n2.  Now we need only add these lines to the `_scss/includes/_page-contents.scss` file:\n\n    ```", "```js\n\n3.  If you have run the `bootstrap watch` command already, you should see the font size reduce, after saving your changes.\n4.  Next, in the `html/pages/index.html` file, we need to edit our button classes. We'll change them from `btn-primary` to `btn-secondary`, and we'll reduce their size using the `btn-sm` class:\n\n    ```", "```js\n\n5.  This will reduce the button size and turn the button's background white.\n6.  Let's adjust the background to a light gray and adjust the font color and border as well. In the `_variables.scss` file, adjust the values for the three `$btn-secondary-` variables as follows:\n\n```", "```js\n\nSave the changes, compile the file, and refresh your browser.\n\nWe now have a clear visual hierarchy, from the primary content (on the left), to the secondary (center), and tertiary (right):\n\n![Adjusting the tertiary column](img/00184.jpeg)\n\nNow, take a moment to notice that our adjustments work reasonably well in the narrow single-column layout as well:\n\n![Adjusting the tertiary column](img/00185.jpeg)\n\nIn narrow viewports, our three columns stretch out vertically, one after the other, with primary content first, followed by secondary and tertiary.\n\nAll that remains is some fine-tuning to make our content even more user friendly across devices and viewports.\n\n## Fine touches for multiple viewports\n\nIt's always good to give our content—and our viewers' eyes—some room to breathe. Visual indicators of section boundaries are good as well. Let's fold these in:\n\n1.  First, we'll add padding above and below our content. Add a bit of top padding to the `main` element itself. This padding will serve us well in all viewports, so we won't need a media query:\n\n```", "```js\n\nThat's it. Our main content layout is ready. Now for the complex footer area.\n\n# Laying out a complex footer\n\nIn the following steps, we'll create a complex footer built to manage multiple goals, including three lists of links to key sections of our website, a bit of **About Us** text, social icons, and our logo.\n\n# Setting up the markup\n\nWe will start by creating the footer markup. We want this footer to be as functional and useful for the user as possible. We'll build the markup as follows:\n\n1.  Start with the footer of the Portfolio project from [Lesson 8](part0088_split_000.html#2JTHG1-d17423bd3b664255b5fd09e37e25e334 \"Chapter 8. Bootstrapping Your Portfolio\"), *Bootstrapping Your Portfolio*. You'll find the HTML Markup code of the footer in the `html/includes/footer.html` file.\n2.  Move HTML code for the logo and add it directly under the social links and create a new include for the additional footer content as follows:\n\n    ```", "```js\n\n3.  Now create a new HTML partial called `html/includes/footercolumns.html`. You can pass the additional footer content into this file.\n4.  Before pasting the content, let's prepare to utilize the Bootstrap grid system. To do this, we'll wrap the area within `div class=\"row\"`, as follows:\n\n    ```", "```js\n\n5.  Now, paste the new content in place.\n6.  Next, we'll wrap each of the three lists of links, along with their headings, in a `col-lg-2` class `div` . This way, each list will take one-sixth of the available width in medium and larger viewports. Together, these three lists will take half the available viewport width.\n7.  Now, to complete our row, wrap the **About Us** heading and its paragraph in `col-lg-6` class `div` so that it takes up the remaining half of the available width:\n\n    ```", "```js\n\n    ### Tip\n\n    Be sure to add the necessary closing tags for each new `div` element.\n\n8.  Save, run the `bootstrap watch` or `gulp` command, and check your results.\n\nAfter performing the preceding steps, you should end up with the following HTML code:\n\n```", "```js\n\nDue to the Bootstrap grid classes we've added in our HTML in a viewport of 980 pixels and larger, our columns should organize themselves as follows:\n\n![Setting up the markup](img/00186.jpeg)\n\nThis is the layout we want in large and extra-large viewports. Extra-small screen sizes are served just fine by the single-column layout. However, for tablet-width screen sizes that fall within the range of 768 to 980 pixels, our layout can benefit from some adjustments. Let's address that.\n\n## Adjusting for tablet-width viewports\n\nTest the layout in a viewport that falls between 768 and 980 pixels. Bootstrap refers to this as the medium breakpoint and `col-md-` grid classes. At this width, the single-column layout leaves unnecessary white space. Here is what you'll see:\n\n![Adjusting for tablet-width viewports](img/00187.jpeg)\n\nWe can improve this layout by allowing our three lists of links to float next to each other. Using the Bootstrap `col-md-*` column classes for Bootstrap's grid, let's set the three lists of links to be one-third width, or `col-sm-4`, and the **About Us** column to be full width, or `col-sm-12`:\n\n```", "```js\n\nSave this and try it out in the medium viewport range. You will see the following result:\n\n![Adjusting for tablet-width viewports](img/00188.jpeg)\n\nMuch improved! But we're not quite finished. Try clicking on the links in the upper three columns. Chances are that you won't be able to. Inspect the element and you'll find that the fourth `div` element contains the code for the **About Us** column. This code does not clear the floated columns above it. Though the **About Us** heading and its paragraph will appear below the three floating columns, the `div` element itself will overlap them.\n\n## Adding a targeted responsive clearfix\n\nIn a standard Bootstrap layout situation, we would use a `div` element with the `row` class to clear the floating columns. Here, we need a different solution, as we want this block of content to clear floats only within this specific breakpoint.\n\nTo accomplish this, we could write custom styles in our Sass files. But we can also use a Bootstrap responsive utility class to provide a targeted `clearfix` directly in the markup. Since we've already specified grid classes in our markup, let's use the second option in this context.\n\nYou can find the approach we'll use mentioned in Bootstrap's documentation at [http://getbootstrap.com/layout/grid/#example-responsive-column-resets](http://getbootstrap.com/layout/grid/#example-responsive-column-resets). Following that method, we'll create a `div` element with the `clearfix` class, and add a Bootstrap responsive utility class to make it visible only on small screens. We'll place this new div element immediately prior to the **About Us** column:\n\n```", "```js\n\nThe `clearfix` class will force this element to clear the floats above it. The `hidden-sm-down` and hidden-lg-up classes will allow this `div` to display only within our targeted breakpoint. At other breakpoints, it will be as if this `div` does not exist.\n\nSave this, and you should find that the **About Us** column now clears the floats above it and that the links are clickable.\n\nTask complete. Now for a few finishing touches.\n\n## Refining the details\n\nWe have a few final touches we want to implement as we finish our footer. These include the following:\n\n*   Refining the presentation of our three lists of links\n*   Adjusting margins and padding\n*   Reversing the color scheme to match our navbar colors\n\nTo accomplish these refinements, we'll write some custom styles. Let's tackle this in cascading fashion, starting with general rules for the footer and moving to the specific rules:\n\n1.  Open `_footer.scss`, the file for custom footer styles, in your editor.\n2.  Here, you'll find some initial rules that includes some initial padding for the footer, as well as styles for the social icons and the footer version of the logo.\n3.  Now to add the refinements we need for our new complex footer. Let's start by reducing the footer font size and inverting the color scheme to correspond with the inverted navbar—a blue background with light text. I'll begin with those colors and then darken them slightly. To do this, I'll make use of appropriate variables from Bootstrap's `_variables.scss and the local scss/includes/_variables.scss` files, including `$font-size-sm`, `$navbar-md-bg`, and `$navbar-md-color`:\n\n    ```", "```js\n\n    ### Tip\n\n    In this and all that follows, we need to nest our new rules within `footer[role=\"contentinfo\"]`.\n\n4.  Next, we need to adjust our links and buttons to fit the new color scheme. Still nesting rules within `footer[role=\"contentinfo\"]`, I've done this as follows:\n\n    ```", "```js\n\n5.  Now to address the four `h3` headings. I'll adjust font size, trim the bottom margin, and convert the text to uppercase:\n\n    ```", "```js\n\n6.  Having done this, we can next remove bullets from our list of links, and adjust their padding and margin:\n\n    ```", "```js\n\n7.  And we can center the logo and social icons:\n\n    ```", "```js\n\n8.  Finally, let's adjust our social icons. We'll add a bit of top padding and then adjust their colors to work better with the new color scheme. Since these are Font Awesome icons, we can do this simply by adjusting the `color` and `background-color` values, as follows:\n\n```", "```js\n\nThat's it. Save, run the `bootstrap watch` command, and enjoy! Here is our result in the large and extra-large viewports:\n\n![Refining the details](img/00189.jpeg)\n\nHere is the result for the medium viewport:\n\n![Refining the details](img/00190.jpeg)\n\nAnd this is for extra-small and small viewports:\n\n![Refining the details](img/00191.jpeg)\n\nNot bad! We have built a footer capable of managing a complex array of content across the full spectrum of extra-small, small, medium, large, and extra-large viewports.\n\n# Summary\n\nThis project has enabled us to beef up our Bootstrappin' skills in a number of ways. We've designed a responsive layout for the main content of our page, providing an appropriate visual hierarchy for three tiers of information. At the top of our page we've built a complex responsive navbar, so that it appears below the logo and banner area in medium, large, and extra-large viewports and yet collapses into a mobile-friendly navbar on smaller screens. The footer part of the project effectively manages multiple blocks of links and text across viewports.\n\nCongratulations! In the next chapter, we'll build on these skills by designing a products page suitable for an e-commerce section for this website.\n\n# Assessments\n\n1.  In which of the three categories is the website broken down into?\n\n    1.  Banner/ masthead\n    2.  Footer\n    3.  Header \n    4.  Both i & ii\n\n2.  Which of the following code is correct to `right align` the `last-child`?\n\n    1.  `.nav-item:last-child {float:right;}` \n    2.  `.nav-item:last-child {align:right;}`\n    3.  `.nav-item:child-last {float:right;}`\n    4.  None of the above\n\n3.  What is the main purpose of adding utility navigation?\n\n    1.  To display icons at the far right of the collapsed navbar \n    2.  To allow users to log in or register and to view their carts \n    3.  Both i & ii\n    4.  None of the above\n\n4.  What is the output of the following snippet?![Assessments](img/00192.jpeg)\n\n    1.  Sets a padding of `$spacer-x` on the right-hand side of the `<a>` element\n    2.  Sets a padding of `$spacer-x` on the left hand side of the `<a>` element\n    3.  Sets a padding of `$spacer-x` on the left- and right-hand sides of the `<a>` element\n    4.  None of the above\n\n5.  After completion of footer, which of the following final touches need to be implemented?\n\n    1.  Refining the presentation of our three lists of links\n    2.  Adjusting margins and padding\n    3.  Reversing the color scheme to match our navbar colors\n    4.  All of the above\n\n```"]