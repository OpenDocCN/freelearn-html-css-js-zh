["```js\n    {\n      \"name\": \"accountmicroservice\",\n      \"version\": \"1.0.0\",\n      \"description\": \"simple account microservice with crud functionalities\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n      },\n      \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/PacktPublishing/Hands-on-\n                 Microservices-with-JavaScript.git\"\n      },\n      \"author\": \"Suleymani Tural\",\n      \"license\": \"ISC\",\n      \"bugs\": {\n        \"url\": \"https://github.com/PacktPublishing/Hands-on-\n                 Microservices-with-JavaScript/issues\"\n      },\n      \"homepage\": \"https://github.com/PacktPublishing/Hands-on-\n                    Microservices-with-JavaScript#readme\"\n    }\n    ```", "```js\n\"dependencies\": {\n    \"dotenv\": \"^16.4.5\",\n    \"express\": \"^4.19.2\",\n    \"joi\": \"^17.12.3\",\n    \"mongoose\": \"^8.3.2\"\n  }\n```", "```js\n    const db = require('mongoose');\n    let mongoUrl;\n    async function connect({ mongo: { url } }) {\n        mongoUrl = url;\n        try {\n            await db.connect(mongoUrl);\n        } catch (err) {\n            setTimeout(connect, 8000);\n        }\n    }\n    const dbConnection = db.connection;\n    function disconnect() {\n        dbConnection.removeAllListeners();\n        return db.disconnect();\n    }\n    module.exports = {\n        connect,\n        disconnect,\n    };\n    ```", "```js\nconst mongoose = require('mongoose');\nconst { Schema } = mongoose;\nconst AccountSchema = new Schema(\n    {\n        name: {\n            type: String,\n            required: true,\n        },\n        number: {\n            type: String,\n            required: true,\n        },\n        type: {\n            type: String,\n            enum: ['root', 'sub'],\n            default: 'root',\n        },\n        status: {\n            type: String,\n            enum: ['new', 'active', 'inactive', 'blocked'],\n            default: 'new',\n        },\n        createdAt: {\n            type: Date,\n            default: Date.now,\n        },\n        updatedAt: Date,\n    },\n    { optimisticConcurrency: true },\n);\nmodule.exports = mongoose.model('account', AccountSchema);\n```", "```js\nPORT=3001\nMONGODB_URL=mongodb://localhost:27017/account-microservice\n```", "```js\nconst dotenv = require('dotenv');\nconst Joi = require('joi');\nconst envVarsSchema = Joi.object()\n    .keys({\n        PORT: Joi.number().default(3000),\n        MONGODB_URL: Joi.string().required().description('Mongo DB url')\n    })\n    .unknown();\nfunction createConfig(configPath) {\n    dotenv.config({ path: configPath });\n    const { value: envVars, error } = envVarsSchema\n        .prefs({ errors: { label: 'key' } })\n        .validate(process.env);\n    if (error) {\n        throw new Error(`Config validation error: ${error.message}`);\n    }\n    return {\n        port: envVars.PORT,\n        mongo: {\n            url: envVars.MONGODB_URL,\n        }\n    };\n}\nmodule.exports = {\n    createConfig,\n};\n```", "```js\nconst Account = require('../models/account');\n//get account info by id\nfunction getAccountById(id) {\n    return Account.findById(id);\n}\n//get all account information\nfunction getAllAccounts() {\n    return Account.find({});\n}\n//create account based on name,number,type and status\nfunction createAccount(name, number, type, status) {\n    return Account.create({ number, name, type, status });\n}\n//delete account by account id\nasync function deleteAccountById(id) {\n    const deletedAccount = await Account.findByIdAndDelete(id);\n    if(deletedAccount)\n     return true;\n     else\n     return false;\n }\n```", "```js\n//'new', 'active', 'inactive', 'blocked'\nconst availableAccountStatusesForUpdate = {\n    new: ['active', 'blocked'],\n    active: ['inactive', 'blocked'],\n    inactive: ['active'],\n    blocked: ['active'],\n};\n//'root', 'sub'\nconst availableAccountTypesForUpdate = {\n    root: ['sub'],\n    sub: ['root'],\n};\nconst NO_VALID_DATA_TO_UPDATE = 0;\nconst INVALID_STATUS_CODE = 1;\nconst INVALID_TYPE_CODE = 2;\nconst INVALID_ACCOUNT = 3;\nconst INVALID_STATE_TRANSITION = 4;\nconst INVALID_TYPE_TRANSITION = 5;\nasync function updateAccountById(id, { name, number, type, status }) {\n    if (!name && !number && !type && !status) {\n        return { error: 'provide at least one valid data to be \n          updated', code: NO_VALID_DATA_TO_UPDATE };\n    }\n    if (status && !(status in availableAccountStatusesForUpdate)) {\n        return { error: 'invalid status for account', code: INVALID_\n          STATUS_CODE };\n    }\n    if (type && !(type in availableAccountTypesForUpdate)) {\n        return { error: 'invalid type for account', code: INVALID_\n          TYPE_CODE };\n    }\n    const account = await Account.findById(id);\n    if (!account) {\n        return { error: 'account not found', code: INVALID_ACCOUNT };\n    }\n    //check for available status and transition\n    if (status) {\n    const allowedStatuses = \n        availableAccountStatusesForUpdate[\n            account.status];\n        if (!allowedStatuses.includes(status)) {\n            return {\n                error: `cannot update status from '${account.status}' \n                  to '${status}'`,\n                code: INVALID_STATE_TRANSITION,\n            };\n        }\n    }\n    //check for available type and transition\n    if (type) {\n        const allowedTypes = availableAccountTypesForUpdate[account\n          .type];\n        if (!allowedTypes.includes(type)) {\n            return {\n                error: `cannot update type from '${account.type}' to \n                  '${type}'`,\n                code: INVALID_TYPE_TRANSITION,\n            };\n        }\n    }\n    account.status = status ?? account.status;\n    account.type = type ?? account.type;\n    account.name = name ?? account.name;\n    account.number = number ?? account.number;\n    account.updatedAt = Date.now();\n    await account.save();\n    return account;\n}\n```", "```js\nmodule.exports = {\n    getAccountById,\n    getAllAccounts,\n    createAccount,\n    updateAccountById,\n    deleteAccountById,\n    errorCodes: {\n        NO_VALID_DATA_TO_UPDATE,\n        INVALID_STATUS_CODE,\n        INVALID_TYPE_CODE,\n        INVALID_ACCOUNT,\n        INVALID_STATE_TRANSITION,\n        INVALID_TYPE_TRANSITION,\n    },\n};\n```", "```js\nconst accountService = require('../services/account');\nconst getAccounts = async (req, res) => {\n    const result = await accountService.getAllAccounts();\n    res.status(200).json({ success: true, account: result.map(x => \n      mapToResponse(x)) });\n};\nconst createAccount = async (req, res) => {\n    const { name, number, type, status } = req.body;\n    const result = await accountService.createAccount(name, number, \n      type, status);\n    res.status(201).json({\n        success: true,\n        Account: mapToResponse(result),\n    });\n};\nconst deleteAccountById = async (req, res) => {\n    const isDeleted = await accountService.deleteAccountById(req\n      .params.id);\n    if(isDeleted)\n     res.status(204).json({\n         success: true\n     });\n     else\n     res.status(400).json({ success: false, message: 'No valid data to \n       delete' });\n };\n```", "```js\nconst updateAccountById = async (req, res) => {\n    const result = await accountService.updateAccountById(\n      req.params.id, req.body);\n    if (result.error) {\n        switch (result.code) {\n            case accountService.errorCodes.NO_VALID_DATA_TO_UPDATE:\n                res.status(400).json({ success: false, message: \n                  result.error });\n                return;\n            case accountService.errorCodes.INVALID_STATUS_CODE:\n                res.status(400).json({ success: false, message: \n                  'invalid status' });\n                return;\n            case accountService.errorCodes.INVALID_TYPE_CODE:\n                res.status(400).json({ success: false, message: \n                  'invalid type' });\n                return;\n            case accountService.errorCodes.INVALID_ACCOUNT:\n                res.status(404).json({ success: false, message: \n                  'Account not found' });\n                return;\n            case accountService.errorCodes.INVALID_STATE_TRANSITION:\n                res.status(400).json({ success: false, message: \n                  result.error });\n                return;\n            case accountService.errorCodes.INVALID_TYPE_TRANSITION:\n                res.status(400).json({ success: false, message: \n                  result.error });\n                return;\n            default:\n                res.status(500).json({ success: false, message: \n                  'internal server error' });\n                return;\n        }\n    }\n    res.status(200).json({\n        success: true,\n        Account: mapToResponse(result),\n    });\n};\n```", "```js\nfunction mapToResponse(account) {\n    const {\n        id, name, number, type, status,\n    } = account;\n    return {\n        id,\n        name,\n        number,\n        type,\n        status\n    };\n}\nmodule.exports = {\n    getAccountById,\n    getAccounts,\n    createAccount,\n    deleteAccountById,\n    updateAccountById,\n};\n```", "```js\nconst accountService = require('../services/account');\nconst getAccountById = async (req, res) => {\n    const result = await accountService.getAccountById(req.params.id);\n    if (result) {\n        res.status(200).json({ success: true, account:\n          mapToResponse(result) });\n    } else {\n        res.status(404).json({ success: false, message: 'Account not \n          found' });\n    }\n};\n```", "```js\nconst Joi = require('joi');\nconst objectId = Joi.string().regex(/^[0-9a-fA-F]{24}$/);\nconst getAccountById = {\n  params: Joi.object().keys({\n    id: objectId.required(),\n  }),\n};\nconst deleteAccountById = {\n  params: Joi.object().keys({\n    id: objectId.required(),\n  }),\n};\nconst createAccount = {\n  body: Joi.object().keys({\n    name: Joi.string().required(),\n    number: Joi.string().required(),\n    status: Joi.string().valid('new', 'active', 'completed', \n      'cancelled').optional(),\n    type: Joi.string().valid('root', 'sub').optional(),\n  }),\n};\n```", "```js\nconst updateAccountById = {\n  params: Joi.object().keys({\n    id: objectId.required(),\n  }),\n  body: Joi.object().keys({\n    name: Joi.string().required(),\n    number: Joi.string().required(),\n    status: Joi.string().valid('new', 'active', 'completed', \n      'cancelled').optional(),\n    type: Joi.string().valid('root', 'sub').optional(),\n  }),\n};\nmodule.exports = {\n  getAccountById,\n  createAccount,\n  deleteAccountById,\n  updateAccountById,\n};\n```", "```js\nconst Joi = require('joi');\nfunction take(object, keys) {\n    return Object.assign({}, ...keys\n        .filter(key => object.hasOwnProperty(key))\n        .map(key => ({ [key]: object[key] })));\n}\nfunction validate(schema) {\n    return (req, res, next) => {\n        // Extract relevant parts of the schema based on request type\n        const selectedSchema = take(schema, ['params', 'query', \n          'body']);\n        const objectToValidate = take(req, \n          Object.keys(selectedSchema));\n        // Perform Joi validation with improved error handling\n        const { error, value } = Joi.compile(selectedSchema)\n            .prefs({ errors: { label: 'key' }, abortEarly: false })\n            .validate(objectToValidate);\n        if (error) {\n            const errorMsg = error.details.map(d => d.message).join(', \n              ');\n            return res.status(400).json({ success: false, message: \n              errorMsg });\n        }\n        // Attach validated data to the request object\n        Object.assign(req, value);\n        next();\n    };\n}\n```", "```js\nconst { Router } = require('express');\nconst accountController = require('../../../controllers/account');\nconst accountValidation = require('../../../validation/account');\nconst validate = require('../../../middlewares/validate');\nconst router = Router();\nrouter.get('/', accountController.getAccounts);\nrouter.get('/:id',\n  validate(accountValidation.getAccountById),\n  accountController.getAccountById);\nrouter.post('/',\n  validate(accountValidation.createAccount),\n  accountController.createAccount);\nrouter.put('/:id',\n  validate(accountValidation.updateAccountById),\n  accountController.updateAccountById);\nrouter.delete('/:id',\n  validate(accountValidation.deleteAccountById),\n  accountController.deleteAccountById);\nmodule.exports = router;\n```", "```js\nconst { Router } = require('express');\nconst accountRouter = require('./accounts');\nconst router = Router();\nrouter.use('/accounts', accountRouter);\nmodule.exports = router;\nmodule.exports = router;\n```", "```js\nconst express = require('express');\nconst v1 = require('./routes/v1');\nconst app = express();\n// service\napp.use(express.json());\n// V1 API\napp.use('/v1', v1);\nmodule.exports = app;\n```", "```js\nconst path = require('path');\nconst db = require('./db');\nconst app = require('./app');\nconst { createConfig } = require('./config/config');\nasync function execute() {\n    const configPath = path.join(__dirname, '../configs/.env');\n    const appConfig = createConfig(configPath);\n    await db.connect(appConfig);\n    const server = app.listen(appConfig.port, () => {\n        console.log('account service started', { port: appConfig.port \n          });\n    });\n    const closeServer = () => {\n        if (server) {\n            server.close(() => {\n                console.log('server closed');\n                process.exit(1);\n            });\n        } else {\n            process.exit(1);\n        }\n    };\n    const unexpectedError = (error) => {\n        console.log('unhandled error', { error });\n        closeServer();\n    };\n    process.on('uncaughtException', unexpectedError);\n    process.on('unhandledRejection', unexpectedError);\n}\nexecute();\n```", "```js\n    {\n        \"name\":\"AccName1\",\n        \"number\":\"Ac21345\",\n        \"type\":\"root\",\n        \"status\":\"new\"\n    }\n    ```", "```js\n    {\n        \"success\": true,\n        \"Account\": {\n            \"id\": \"662c081370bd2ba6b5f04e94\",\n            \"name\": \"AccName1\",\n            \"number\": \"Ac21345\",\n            \"type\": \"root\",\n            \"status\": \"new\"\n        }\n    }\n    ```", "```js\n    {\n        \"success\": true,\n        \"account\": {\n            \"id\": \"662c081370bd2ba6b5f04e94\",\n            \"name\": \"AccName1\",\n            \"number\": \"Ac21345\",\n            \"type\": \"root\",\n            \"status\": \"new\"\n        }\n    }\n    ```", "```js\n    {\n        \"name\":\"updated account\",\n        \"number\":\"AE33333\"\n    }\n    ```", "```js\n    {\n        \"success\": true,\n        \"Account\": {\n            \"id\": \"662c081370bd2ba6b5f04e94\",\n            \"name\": \"updated account\",\n            \"number\": \"AE33333\",\n            \"type\": \"root\",\n            \"status\": \"new\"\n        }\n    }\n    ```", "```js\n    {\n        \"success\": true,\n        \"account\": [\n            {\n                \"id\": \"662c081370bd2ba6b5f04e94\",\n                \"name\": \"updated account\",\n                \"number\": \"AE33333\",\n                \"type\": \"root\",\n                \"status\": \"new\"\n            }\n        ]\n    }\n    ```"]