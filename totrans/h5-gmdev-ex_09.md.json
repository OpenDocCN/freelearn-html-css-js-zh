["```js\n    <canvas id=\"game\" width=\"1300\" height=\"600\"></canvas>\n    ```", "```js\n    // Box2D alias\n    var b2Vec2 = Box2D.Common.Math.b2Vec2\n      , b2BodyDef = Box2D.Dynamics.b2BodyDef\n      , b2Body = Box2D.Dynamics.b2Body\n      , b2FixtureDef = Box2D.Dynamics.b2FixtureDef\n      , b2World = Box2D.Dynamics.b2World\n      , b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape\n      , b2CircleShape = Box2D.Collision.Shapes.b2CircleShape\n      , b2DebugDraw = Box2D.Dynamics.b2DebugDraw\n      , b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef;\n    ```", "```js\n    var carGame = {\n    }\n\n    var canvas;\n    var ctx;\n    var canvasWidth;\n    var canvasHeight;\n\n    function initGame() {\n\n      carGame.world = createWorld();\n\n      console.log(\"The world is created. \",carGame.world);\n\n      // get the reference of the context\n      canvas = document.getElementById('game');\n      ctx = canvas.getContext('2d');\n      canvasWidth = parseInt(canvas.width);\n      canvasHeight = parseInt(canvas.height);\n    };\n\n    // Create and return the Box2D world.\n    function createWorld() {\n      // Define the gravity\n      var gravity = new b2Vec2(0, 10);\n\n      // set to allow sleeping object\n      var allowSleep = true;\n\n      // finally create the world with \n      // gravity and sleep object parameter.\n      var world = new b2World(gravity, allowSleep);\n      return world;\n    }\n\n    // After all the definition, we init the game.\n    initGame();\n    ```", "```js\nvar world = new b2World(gravity, doSleep);\n```", "```js\nvar gravity = new b2Vec2(0, 10);\n```", "```js\n    var pxPerMeter = 30; // 30 pixels = 1 meter\n    ```", "```js\n    function createGround() {\n      var bodyDef = new b2BodyDef;\n      var fixDef = new b2FixtureDef;\n\n      bodyDef.type = b2Body.b2_staticBody;\n      bodyDef.position.x = 250/pxPerMeter;\n      bodyDef.position.y = 370 /pxPerMeter;\n\n      fixDef.shape = new b2PolygonShape();\n      fixDef.shape.SetAsBox(250/pxPerMeter, 25/pxPerMeter);\n      fixDef.restitution = 0.4;\n\n      // create the body from the definition.\n      var body = carGame.world.CreateBody(bodyDef);\n      body.CreateFixture(fixDef);\n\n      return body;\n    }\n    ```", "```js\n    createGround();\n    ```", "```js\nfixDef.shape = new b2PolygonShape();\nfixDef.shape.SetAsBox(250/pxPerMeter, 25/pxPerMeter);\nfixDef.restitution = 0.4;\n```", "```js\nbodyDef.type = b2Body.b2_staticBody;\nbodyDef.position.x = 250/pxPerMeter;\nbodyDef.position.y = 370 /pxPerMeter;\n\n// create the body from the definition.\nvar body = carGame.world.CreateBody(bodyDef);\nbody.CreateFixture(fixDef);\n```", "```js\n    var shouldDrawDebug = false;\n    ```", "```js\n    function showDebugDraw() {\n      shouldDrawDebug = true;\n\n      //setup debug draw\n      var debugDraw = new b2DebugDraw();\n      debugDraw.SetSprite(document.getElementById('game').getContext('2d'));\n      debugDraw.SetDrawScale(pxPerMeter);\n      debugDraw.SetFillAlpha(0.3);\n      debugDraw.SetLineThickness(1.0);\n      debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);\n\n      carGame.world.SetDebugDraw(debugDraw);\n\n      carGame.world.DrawDebugData();\n    }\n    ```", "```js\n    showDebugDraw();\n    ```", "```js\ndebugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);\n```", "```js\n    // temporary function\n    function createBox() {\n      var bodyDef = new b2BodyDef;\n      var fixDef = new b2FixtureDef;\n\n      bodyDef.type = b2Body.b2_dynamicBody;\n      bodyDef.position.x = 50/pxPerMeter;\n      bodyDef.position.y = 210/pxPerMeter;\n\n      fixDef.shape = new b2PolygonShape();\n      fixDef.shape.SetAsBox(20/pxPerMeter, 20/pxPerMeter);\n\n      var body = carGame.world.CreateBody(bodyDef);\n      body.CreateFixture(fixDef);\n\n      return body;\n    }\n    ```", "```js\n    function updateWorld() {\n      // Move the physics world 1 step forward.\n      carGame.world.Step(1/60, 10, 10);\n\n      // display the build-in debug drawing.\n      if (shouldDrawDebug) {\n        carGame.world.DrawDebugData();\n      }\n    }\n    ```", "```js\n    setInterval(updateWorld, 1/60);\n    ```", "```js\n    // create two wheels in the world\n    createWheel(25, 230);\n    createWheel(75, 230);\n    ```", "```js\n    function createWheel(x, y) {\n      var bodyDef = new b2BodyDef;\n      var fixDef = new b2FixtureDef;\n\n      bodyDef.type = b2Body.b2_dynamicBody;\n      bodyDef.position.x = x/pxPerMeter;\n      bodyDef.position.y = y/pxPerMeter;\n\n      fixDef.shape = new b2CircleShape();\n      fixDef.shape.SetRadius(10/pxPerMeter);\n\n      fixDef.density = 1.0;\n      fixDef.restitution = 0.1;\n      fixDef.friction = 4.3;\n\n      var body = carGame.world.CreateBody(bodyDef);\n      body.CreateFixture(fixDef);\n\n      return body;\n    }\n    ```", "```js\n    function createCarAt(x, y) {\n      var bodyDef = new b2BodyDef;\n      var fixDef = new b2FixtureDef;\n\n      // car body\n      bodyDef.type = b2Body.b2_dynamicBody;\n      bodyDef.position.x = 50/pxPerMeter;\n      bodyDef.position.y = 210/pxPerMeter;\n\n      fixDef.shape = new b2PolygonShape();\n      fixDef.density = 1.0;\n      fixDef.friction = 1.5;\n      fixDef.restitution = .4;\n      fixDef.shape.SetAsBox(40/pxPerMeter, 20/pxPerMeter);\n\n      carBody = carGame.world.CreateBody(bodyDef);\n\n      carBody.CreateFixture(fixDef);\n\n      // creating the wheels\n      var wheelBody1 = createWheel(x-25, y+20);\n      var wheelBody2 = createWheel(x+25, y+20);\n\n      // create a joint to connect left wheel with the car body\n      var jointDef = new b2RevoluteJointDef();\n      jointDef.Initialize(carBody, wheelBody1, new b2Vec2( (x-25)/pxPerMeter ,  (y+20)/pxPerMeter ));\n      carGame.world.CreateJoint(jointDef);\n\n      // create a joint to connect right wheel with the car body\n      var jointDef = new b2RevoluteJointDef();\n      jointDef.Initialize(carBody, wheelBody2, new b2Vec2( (x+25)/pxPerMeter ,  (y+20)/pxPerMeter ));\n      carGame.world.CreateJoint(jointDef);\n\n      return carBody;\n\n    }\n    ```", "```js\n    carGame.car = createCarAt(50, 210);\n    ```", "```js\n    $(document).keydown(function(e){\n      switch(e.keyCode) {\n        case 39: // right arrow key to apply force towards right\n          var force = new b2Vec2(100, 0);\n          carGame.car.ApplyForce(force, carGame.car.GetWorldCenter());\n          return false;\n          break;\n        case 37: // left arrow key to apply force towards left\n          var force = new b2Vec2(-100, 0);\n          carGame.car.ApplyForce(force, carGame.car.GetWorldCenter());\n          return false;\n          break;\n      }\n    });\n    ```", "```js\n    function updateWorld() {\n      // existing code goes here.\n      // Clear previous applied force.\n      carGame.world.ClearForces();\n    }\n    ```", "```js\nbody.ApplyForce(force, point);\n```", "```js\n    function createGround(x, y, width, height, rotation) {\n      var bodyDef = new b2BodyDef;\n      var fixDef = new b2FixtureDef;\n\n      bodyDef.type = b2Body.b2_staticBody;\n      bodyDef.position.x = x /pxPerMeter;\n      bodyDef.position.y = y /pxPerMeter;\n      bodyDef.angle = rotation * Math.PI / 180;\n\n      fixDef.shape = new b2PolygonShape();\n      fixDef.shape.SetAsBox(width/pxPerMeter, height/pxPerMeter);\n      fixDef.restitution = 0.4;\n      fixDef.friction = 3.5;\n\n      // create the body from the definition.\n      var body = carGame.world.CreateBody(bodyDef);\n      body.CreateFixture(fixDef);\n\n      return body;\n    }\n    ```", "```js\n    // create the ground\n    createGround(250, 270, 250, 25, 0);\n    // create a ramp\n    createGround(500, 250, 65, 15, -10);\n    createGround(600, 225, 80, 15, -20);\n    createGround(1100, 250, 100, 15, 0);\n    ```", "```js\n    carGame.gamewinWall = createGround(1200, 215, 15, 25, 0);\n    ```", "```js\n    function checkCollision() {\n      // loop all contact list \n      // to check if the car hits the winning wall.\n      for (var cn = carGame.world.GetContactList(); cn != null; cn = cn.GetNext()) {\n        var body1 = cn.GetFixtureA().GetBody();\n        var body2 = cn.GetFixtureB().GetBody();\n        if ((body1 === carGame.car && body2 === carGame.gamewinWall) || (body2 === carGame.car && body1 === carGame.gamewinWall))\n        {\n          if (cn.IsTouching()) {\n            console.log(\"Level Passed!\");\n          }\n        }\n      }\n    }\n    ```", "```js\n    checkCollision();\n    ```", "```js\nfor (var cn = carGame.world.GetContactList(); cn != null; cn = cn.GetNext()) {\n   // We have fixture 1 and fixture 2 of each contact node.\n   var body1 = cn.GetFixtureA().GetBody();\n   var body2 = cn.GetFixtureB().GetBody();\n}\n```", "```js\nif ((body1 === carGame.car && body2 === carGame.gamewinWall) ||\n   (body2 === carGame.car && body1 === carGame.gamewinWall))\n{\n  if (cn.IsTouching()) {\n    console.log(\"Level Passed!\");\n  }\n}\n```", "```js\n    function removeAllBodies() {\n      // loop all body list to destroy them\n      for (var body = carGame.world.GetBodyList(); body != null; body = body.GetNext()) {\n        carGame.world.DestroyBody(body);\n      }\n    }\n    ```", "```js\n    function restartGame() {\n      removeAllBodies();\n\n      // create the ground\n      createGround(250, 270, 250, 25, 0);\n\n      // create a ramp\n      createGround(500, 250, 65, 15, -10);\n      createGround(600, 225, 80, 15, -20);\n      createGround(1100, 250, 100, 15, 0);\n\n      // create a destination ground\n      carGame.gamewinWall = createGround(1200, 215, 15, 25, 0);\n\n      // create a car\n      carGame.car = createCarAt(50, 210);\n    }\n    ```", "```js\n    restartGame();\n    ```", "```js\n    $(document).keydown(function(e){\n      switch(e.keyCode) {\n        case 39: // right arrow key to apply force towards right\n          var force = new b2Vec2(300, 0);\n          carGame.car.ApplyForce(force, carGame.car.GetWorldCenter());\n          break;\n        case 37: // left arrow key to apply force towards left\n          var force = new b2Vec2(-300, 0);\n          carGame.car.ApplyForce(force, carGame.car.GetWorldCenter());\n          break;\n     case 82: // r key to restart the game\n     restartGame();\n     break;\n      }\n    });\n    ```", "```js\n    console.log(\"Level Passed!\");\n    restartGame();\n\n    ```", "```js\ncarGame.world = createWorld();\n```", "```js\n    var carGame = {\n       currentLevel: 0\n    }\n    carGame.levels = new Array();\n    carGame.levels[0] = [{\"type\":\"car\",\"x\":50,\"y\":210,\"fuel\":20},\n    {\"type\":\"box\",\"x\":250, \"y\":270, \"width\":250, \"height\":25, \"rotation\":0},\n    {\"type\":\"box\",\"x\":500,\"y\":250,\"width\":65,\"height\":15, \"rotation\":-10},\n    {\"type\":\"box\",\"x\":600,\"y\":225,\"width\":80,\"height\":15, \"rotation\":-20},\n    {\"type\":\"box\",\"x\":950,\"y\":225,\"width\":80,\"height\":15, \"rotation\":20},\n    {\"type\":\"box\",\"x\":1100,\"y\":250,\"width\":100,\"height\":15, \"rotation\":0},\n    {\"type\":\"win\",\"x\":1200,\"y\":215,\"width\":15,\"height\":25, \"rotation\":0}];\n\n    carGame.levels[1] = [{\"type\":\"car\",\"x\":50,\"y\":210,\"fuel\":20},\n    {\"type\":\"box\",\"x\":100, \"y\":270, \"width\":190, \"height\":15, \"rotation\":20},\n    {\"type\":\"box\",\"x\":380, \"y\":320, \"width\":100, \"height\":15, \"rotation\":-10},\n    {\"type\":\"box\",\"x\":666,\"y\":285,\"width\":80,\"height\":15, \"rotation\":-32},\n    {\"type\":\"box\",\"x\":950,\"y\":295,\"width\":80,\"height\":15, \"rotation\":20},\n    {\"type\":\"box\",\"x\":1100,\"y\":310,\"width\":100,\"height\":15, \"rotation\":0},\n    {\"type\":\"win\",\"x\":1200,\"y\":275,\"width\":15,\"height\":25, \"rotation\":0}];\n\n    carGame.levels[2] = [{\"type\":\"car\",\"x\":50,\"y\":210,\"fuel\":20},\n    {\"type\":\"box\",\"x\":100, \"y\":270, \"width\":190, \"height\":15, \"rotation\":20},\n    {\"type\":\"box\",\"x\":380, \"y\":320, \"width\":100, \"height\":15, \"rotation\":-10},\n    {\"type\":\"box\",\"x\":686,\"y\":285,\"width\":80,\"height\":15, \"rotation\":-32},\n    {\"type\":\"box\",\"x\":250,\"y\":495,\"width\":80,\"height\":15, \"rotation\":40},\n    {\"type\":\"box\",\"x\":500,\"y\":540,\"width\":200,\"height\":15, \"rotation\":0},\n    {\"type\":\"win\",\"x\":220,\"y\":425,\"width\":15,\"height\":25, \"rotation\":23}];\n    ```", "```js\n    function restartGame(level) {\n       carGame.currentLevel = level;\n\n       // destroy existing bodies.\n       removeAllBodies();// create the world \n\n       // create a ground in our newly created world\n       // load the ground info from level data\n       for(var i=0;i<carGame.levels[level].length;i++) {\n          var obj = carGame.levels[level][i];\n\n          // create car\n          if (obj.type === \"car\") {\n             carGame.car = createCarAt(obj.x, obj.y);\n             continue;\n          }\n\n          var groundBody = createGround(obj.x, obj.y, obj.width, obj.height, obj.rotation);\n\n          if (obj.type === \"win\") {\n             carGame.gamewinWall = groundBody;\n          }   \n       }\n    }\n    ```", "```js\n    restartGame(carGame.currentLevel);\n    ```", "```js\n    case 82: // r key to restart the game\n       restartGame(carGame.currentLevel);\n       break;\n    ```", "```js\n    if ((body1 === carGame.car && body2 === carGame.gamewinWall) ||\n       (body2 === carGame.car && body1 === carGame.gamewinWall))\n    {\n      if (cn.IsTouching()) {\n        console.log(\"Level Passed!\");\n     restartGame(carGame.currentLevel+1);\n      }\n    }\n    ```", "```js\ncarGame.levels[0] = [{\"type\":\"car\",\"x\":50,\"y\":210,\"fuel\":20},\n{\"type\":\"box\",\"x\":250, \"y\":270, \"width\":250, \"height\":25, \"rotation\":0},\n{\"type\":\"box\",\"x\":500,\"y\":250,\"width\":65,\"height\":15,\"rotation\":-10},\n{\"type\":\"box\",\"x\":600,\"y\":225,\"width\":80,\"height\":15,\"rotation\":-20},\n{\"type\":\"box\",\"x\":950,\"y\":225,\"width\":80,\"height\":15,\"rotation\":20},\n{\"type\":\"box\",\"x\":1100,\"y\":250,\"width\":100,\"height\":15,\"rotation\":0},\n{\"type\":\"win\",\"x\":1200,\"y\":215,\"width\":15,\"height\":25,\"rotation\":0}];\n```", "```js\nfor(var i=0;i<carGame.levels[level].length;i++) {\n  var obj = carGame.levels[level][i];\n\n  // create car\n  if (obj.type === \"car\") {\n    carGame.car = createCarAt(obj.x,obj.y);\n    continue;\n  }\n\n  var groundBody = createGround(obj.x, obj.y, obj.width, obj.height, obj.rotation);\n\n  if (obj.type === \"win\") {\n    carGame.gamewinWall = groundBody;\n  }   \n}\n```", "```js\n    <div id=\"asset\">\n      <img id=\"flag\" src='images/flag.png'>\n      <img id=\"bus\" src=\"img/bus.png\">\n      <img id=\"wheel\" src=\"img/wheel.png\">\n    </div>\n    ```", "```js\n    #asset {\n      position: absolute;\n      top: -9999px;\n    }\n    ```", "```js\n    if (obj.type === \"win\") {\n      carGame.gamewinWall = groundBody;\n     groundBody.SetUserData( document.getElementById('flag') );\n    }\n    ```", "```js\n    function createCarAt(x, y) {\n      var bodyDef = new b2BodyDef;\n      var fixDef = new b2FixtureDef;\n\n      // car body\n      bodyDef.type = b2Body.b2_dynamicBody;  \n      bodyDef.userData = document.getElementById('bus');\n\n      // existing code goes here.\n    }\n    ```", "```js\n    function createWheel(x, y) {\n      var bodyDef = new b2BodyDef;\n      var fixDef = new b2FixtureDef;\n\n      bodyDef.type = b2Body.b2_dynamicBody;\n      bodyDef.userData = document.getElementById('wheel');\n\n      // existing code goes here\n    }\n    ```", "```js\n    // drawing functions\n    function drawWorld(world, context) {\n      for (var body = carGame.world.GetBodyList(); body != null; body = body.GetNext()) {\n        if (body.GetUserData() !== null && body.GetUserData() !== undefined) {\n          // the user data contains the reference to the image\n          var img = body.GetUserData();\n\n          // the x and y of the image. We have to subtract the half width/height\n          var x = body.GetPosition().x;\n          var y = body.GetPosition().y;\n          var topleftX = - $(img).width()/2;\n          var topleftY = - $(img).height()/2;\n\n          context.save();\n          context.translate(x * pxPerMeter,y * pxPerMeter);\n          context.rotate(body.GetAngle());\n          context.drawImage(img, topleftX, topleftY);\n          context.restore();\n        }\n      }\n    }\n    ```", "```js\n    function updateWorld() { \n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n      // existing code goes here.  \n\n      // render graphics\n      drawWorld(carGame.world, ctx);\n    } \n    ```", "```js\n#asset {\n   position: absolute;\n   top: -9999px;\n}\n```", "```js\nif (body.GetUserData() !== null && body.GetUserData() !== undefined) {\n   // the user data contains the reference to the image\n   var img = body.GetUserData();\n\n   // the x and y of the image.\n   // We have to subtract the half width/height\n   var x = body.GetPosition().x;\n   var y = body.GetPosition().y;\n   var topleftX = - $(img).width()/2;\n   var topleftY = - $(img).height()/2;\n\n   context.save();\n   context.translate(x,y);\n   context.rotate(s.GetBody().GetRotation());\n   context.drawImage(img, topleftX, topleftY);\n   context.restore();\n}\n```", "```js\ncontext.save();\ncontext.translate(x,y);\ncontext.rotate(s.GetBody().GetRotation());\ncontext.drawImage(img, topleftX, topleftY);\ncontext.restore();\n```", "```js\n    <section id=\"game-container\">\n        <canvas id=\"game\" width='1300' height='600' class=\"startscreen\"></canvas>\n\n       <div id=\"fuel\" class=\"progressbar\">\n          <div class=\"fuel-value\" style=\"width: 100%;\"></div>\n       </div>\n\n       <div id=\"level\"></div>\n    </section>\n    ```", "```js\n    var carGame = {\n       // game state constant\n       STATE_STARTING_SCREEN : 1,\n       STATE_PLAYING : 2,\n       STATE_GAMEOVER_SCREEN : 3,\n\n       state : 0,\n\n       fuel: 0,\n       fuelMax: 0,\n\n       currentLevel: 0\n    }\n    ```", "```js\n    // set the game state as \"starting screen\"\n    carGame.state = carGame.STATE_STARTING_SCREEN;\n\n    // start the game when clicking anywhere in starting screen\n    $('#game').click(function(){\n       if (carGame.state === carGame.STATE_STARTING_SCREEN) {\n          // change the state to playing.\n          carGame.state = carGame.STATE_PLAYING;\n\n          // start new game\n          restartGame(carGame.currentLevel);\n       }\n    });\n    ```", "```js\n    if (cn.IsTouching()) {\n      console.log(\"Level Passed!\");\n\n      if (carGame.currentLevel < carGame.levels.length - 1) {\n        restartGame(carGame.currentLevel+1);\n      } else {\n        // show game over screen\n        $('#game').removeClass().addClass('gamebg_won');\n\n        // clear the physics world\n        carGame.world = createWorld();\n      }\n    }\n    ```", "```js\n    $(\"#level\").html(\"Level \" + (level+1));\n\n    // change the background image to fit the level\n    $('#game').removeClass().addClass('gamebg-level'+level);\n    ```", "```js\n    var shouldDrawDebug = false;\n    ```", "```js\n    switch(e.keyCode) {\n      case 39: // right arrow key to apply force towards right\n        if (carGame.fuel > 0) {\n          var force = new b2Vec2(300, 0);\n          carGame.car.ApplyForce(force, carGame.car.GetWorldCenter());\n          carGame.fuel -= 1;\n          $(\".fuel-value\").width(carGame.fuel/carGame.fuelMax * 100 +'%');\n        }\n        return false;\n        break;\n      case 37: // left arrow key to apply force towards left\n        if (carGame.fuel > 0) {\n          var force = new b2Vec2(-300, 0);\n          carGame.car.ApplyForce(force, carGame.car.GetWorldCenter());\n          carGame.fuel -= 1;\n          $(\".fuel-value\").width(carGame.fuel/carGame.fuelMax * 100 +'%');\n        }\n        return false;\n        break;\n      case 82: // r key to restart the game\n        restartGame(carGame.currentLevel);\n        break;\n    }\n    ```", "```js\n    // create car\n    if (obj.type === \"car\") {\n       carGame.car = createCarAt(obj.x,obj.y);\n     carGame.fuel = obj.fuel;\n     carGame.fuelMax = obj.fuel;\n     $(\".fuel-value\").width('100%');\n       continue;\n    }\n    ```", "```js\n$('#game').removeClass().addClassddClass('gamebg-level'+level);\n```", "```js\ncase 39: \n  if (carGame.fuel > 0) {\n    var force = new b2Vec2(300, 0);\n    carGame.car.ApplyForce(force, carGame.car.GetCenterPosition());\n    carGame.fuel -= 1;\n    $(\".fuel-value\").width(carGame.fuel/carGame.fuelMax * 100 +'%');\n  }\n```", "```js\n<div id=\"fuel\" class=\"progressbar\">\n   <div class=\"fuel-value\" style=\"width: 100%;\"></div>\n</div>\n```", "```js\n$(\".fuel-value\").width(carGame.fuel/carGame.fuelMax * 100 +'%');\n```", "```js\n    <div id=\"left-button\" class=\"touch-control\"></div>\n    <div id=\"right-button\" class=\"touch-control\"></div>\n    <div id=\"restart-button\" class=\"touch-control\">Restart</div>\n    ```", "```js\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=0.78, minimum-scale=0.78, maximum-scale=0.78\">\n    ```", "```js\n    .touch-control {\n      position: absolute;\n    }\n    #left-button {\n      top: 0;\n      left: 0;\n      width: 50%;\n      height: 100%;\n    }\n    #right-button {\n      top: 0;\n      right: 0;\n      width: 50%;\n      height: 100%;\n    }\n    #restart-button {\n      top: 0;\n      left: 50%;\n      left: calc( 50% - 50px );\n      width: 100px;\n      height: 50px;\n      text-align: center;\n      line-height: 50px;\n    }\n    ```", "```js\n    function handleTouchInputs() {\n      // Touch support\n      if (!window.Touch) {\n        $('.touch-control').hide();\n      } else {\n        $('#right-button').bind('touchstart', function(){\n          if (carGame.state === carGame.STATE_STARTING_SCREEN) {\n            // change the state to playing.\n            carGame.state = carGame.STATE_PLAYING;\n\n            // start new game\n            restartGame(carGame.currentLevel);\n          } else {\n            carGame.isRightButtonActive = true;\n          }\n        });\n        $('#left-button').bind('touchstart', function(){\n          if (carGame.state === carGame.STATE_STARTING_SCREEN) {\n            // change the state to playing.\n            carGame.state = carGame.STATE_PLAYING;\n\n            // start new game\n            restartGame(carGame.currentLevel);\n          } else {\n            carGame.isLeftButtonActive = true;\n          }\n        });\n        $('#right-button').bind('touchend', function() {\n          carGame.isRightButtonActive = false;\n        });\n        $('#left-button').bind('touchend', function() {\n          carGame.isLeftButtonActive = false;\n        });\n        $('#restart-button').bind('touchstart', function(){\n          restartGame(carGame.currentLevel);\n        })\n      }\n    }\n    ```", "```js\n    handleTouchInputs();\n    ```", "```js\n    // apply force based on the touch event\n    if (carGame.isRightButtonActive) {\n      if (carGame.fuel > 0) {\n        var force = new b2Vec2(50, 0);\n        carGame.car.ApplyForce(force, carGame.car.GetWorldCenter());\n        carGame.fuel -= 0.1;\n        $(\".fuel-value\").width(carGame.fuel/carGame.fuelMax * 100 +'%');\n      }\n    } else if (carGame.isLeftButtonActive) {\n      if (carGame.fuel > 0) {\n        var force = new b2Vec2(-50, 0);\n        carGame.car.ApplyForce(force, carGame.car.GetWorldCenter());\n        carGame.fuel -= 0.1;\n        $(\".fuel-value\").width(carGame.fuel/carGame.fuelMax * 100 +'%');\n      }\n    }\n    ```", "```js\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```", "```js\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=0.78, minimum-scale=0.78, maximum-scale=0.78\">\n```", "```js\nif (!window.Touch) {\n  $('.touch-control').hide();\n}\n```"]