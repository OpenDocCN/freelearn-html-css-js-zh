["```js\ntrue == 1\n```", "```js\ntrue === 1\n```", "```js\n!false;\n!undefined;\n!0;\n```", "```js\nfunction hello(name) {\n    if (_.isString(name)) {\n        return 'hello, ' + name;\n    }   \n}   \n\nhello('world');\n// → \"hello, world\"\n\nhello();\n// → undefined\n```", "```js\nfunction hello(greeting, person) {\n    if (_.isPlainObject(greeting)) {\n        person = greeting;\n        greeting = 'hi, ';\n    }   \n    return greeting + person.name;\n}\n\nhello('hello, ', { name: 'Dillan' });\n// → \"hello, Dillan\"\n\nhello({ name: 'Danielle' });\n// → \"hi, Danielle\"\n```", "```js\n1/0; // Infinity\n1+'one'; // NaN\n```", "```js\nvar operand1 = 1/0,\n    operand2 = NaN,\n    results = [];\n\n_.forEach([ operand1, operand2 ], function(op) {\n    if (_.isFinite(op)) {\n        results.push('operand 1 is finite');\n    } else {\n        if (!_.isNumber(op) || _.isNaN(op)) {\n            results.push(op.toString() + ' is not a number');\n        } else {\n            results.push('Infinity cannot be used here');\n        }\n    }\n});\n\nreturn results;\n// → \n// [\n//   \"Infinity cannot be used here\",\n//   \"NaN is not a number\"\n// ]\n```", "```js\nvar object = {\n    a: function() { return 'ret'; },\n    b: []\n};\n\n_.isFunction(object.a) && object.a();\n// → \"ret\" \n\n_.isFunction(object.b) && object.b();\n// → false\n```", "```js\nvar object = { \n    name: 'Jeremy',\n    age: 42\n};\n\n_.assign(object, {\n    occupation: 'Programmer'\n});\n\n// →\n// {\n//   name: \"Jeremy\",\n//   age: 42,\n//   occupation: \"Programmer\"\n// }\n```", "```js\nvar object1 = { \n        name: 'Jenny',\n        age: 27\n    },  \n    object2 = { \n        age: 31\n    },  \n    object3 = { \n        occupation: 'Neurologist'\n    };\n\n_.assign(object1, object2, object3);\n// →\n// {\n//   name: \"Jenny\",\n//   age\": 31,\n//   occupation: \"Neurologist\"\n// }\n```", "```js\nvar object1 = { \n        states: { running: 'poweroff' },\n        names: [ 'CentOS', 'REHL' ]\n    },  \n    object2 = { \n        states: { off: 'poweron' },\n        names: [ 'Ubuntu', 'Debian' ]\n    };\n\n_.merge(object1, object2, function(dest, src) {\n    if (_.isArray(dest) && _.isArray(src)) {\n        return dest.concat(src);\n    }   \n});\n// →\n// {\n//   states: {\n//     running: \"poweroff\",\n//     off: \"poweron\"\n//   },\n//   names: [\n//     \"CentOS\",\n//     \"REHL\",\n//     \"Ubuntu\",\n//     \"Debian\"\n//   ]\n// }\n```", "```js\nvar object = { \n    name: 'George'\n};\n\n_.defaults(object, {\n    name: '', \n    age: 0,\n    occupation: ''\n});\n// →\n// {\n//   name: \"George\",\n//   age\": 0,\n//   occupation\": \"\"\n// }\n```", "```js\nvar object = { \n    name: 'Gene',\n    age: 43, \n    occupation: 'System Administrator'\n};\n\n_.findKey(object, function(value) {\n    return value === 'Gene';\n});\n// → \"name\"\n```", "```js\nvar object = { \n    programmers: {\n        Keith: 'C',\n        Marilyn: 'JavaScript'\n    },  \n    designers: {\n        Lori: 'CSS',\n        Marilyn: 'HTML'\n    }   \n};\n\n_.findKey(object, { Marilyn: 'JavaScript' });\n// → \"programmers\"\n```", "```js\nvar object = { \n    Maria: [\n        'Python',\n        'Lisp',\n        'Go'\n    ],  \n    Douglas: [\n        'CSS',\n        'Clojure',\n        'Haskell'\n    ]   \n}; \n\nvar lang = 'Lisp';\n\n_.findKey(object, function(value) {\n    if (_.isArray(value)) {\n        return _.contains(value, lang);\n    } else {\n        return value === lang;\n    }   \n});\n// → \"Maria\"\n```", "```js\nvar object = {\n    8490: {\n        first: 'Arthur',\n        last: 'Evans',\n        enabled: false\n    },  \n    7035: {\n        first: 'Shirley',\n        last: 'Rivera',\n        enabled: false\n    },  \n    4818: {\n        first: 'William',\n        last: 'Howard',\n        enabled: true\n    }   \n};\n\n_.find(object, 'enabled');\n// → \n// {\n//   first: \"William\",\n//   last: \"Howard\",\n//   enabled: true\n// }\n\n_.where(object, { last: 'Rivera' });\n// → \n// [\n//   {\n//     first: \"Shirley\",\n//     last: \"Rivera\",\n//     enabled: false\n//   }\n// ]\n```", "```js\nvar object = { \n    name: 'Vince',\n    age: 42, \n    occupation: 'Architect'\n}, result = [];\n\n_.forOwn(object, function(value, key) {\n    result.push(key + ': ' + value);\n});\n// → \n// [\n//   \"name: Vince\",\n//   \"age: 42\",\n//   \"occupation: Architect\"\n// ]\n```", "```js\nfunction Person() {\n    this.full = function() {\n        return this.first + ' ' + this.last;\n    };  \n}   \n\nfunction Employee(first, last, occupation) {\n    this.first = first;\n    this.last = last;\n    this.occupation = occupation;\n}   \n\nEmployee.prototype = new Person();\n\nvar employee = new Employee('Theo', 'Cruz', 'Programmer'),\n    resultOwn = [], \n    resultIn = [];\n\n_.forOwn(employee, function(value, key) {\n    resultOwn.push(key);\n});\n// → [ \"first\", \"last\", \"occupation\" ]\n\n_.forIn(employee, function(value, key) {\n    resultIn.push(key);)\n});\n// → [ \"first\", \"last\", \"occupation\", \"full\" ]\n```", "```js\nvar object = { \n    occupation: 'Optometrist',\n    last: 'Lynch',\n    first: 'Shari'\n};\n\n_.sortBy(_.keys(object));\n;\n// → [ \"first\", \"last\", \"occupation\" ]\n```", "```js\nvar object = { \n    occupation: 'Optometrist',\n    last: 'Lynch',\n    first: 'Shari'\n};\n\nreturn _.at(object, _.sortBy(_.keys(object)));\n// → [ \"Shari\", \"Lynch\", \"Optometrist\" ]\n```", "```js\nvar object = { \n    first: 'Hue',\n    last: 'Burton',\n    occupation: 'Horticulturalist'\n};\n\n_.values(object);\n// → [ \"Hue\", \"Burton\", \"Horticulturalist\" ]\n```", "```js\nvar object = { \n    Angular: { name: 'Patrick' },\n    Ember: { name: 'Jane' },\n    Backbone: { name: 'George' }\n};\n\n_.sortBy(_.values(object), 'name');\n// → \n// [\n//   { name: \"George\" },\n//   { name: \"Jane\" },\n//   { name: \"Patrick\" }\n// ]\n```", "```js\nvar object1 = { \n        name: 'Brian'\n    },  \n    object2 = { \n        name: function() {\n            return 'Brian';\n        }   \n    },  \n    object3 = {};\n\n_.result(object1, 'name', 'Brian');\n// → \"Brian\" \n\n_.result(object2, 'name', 'Brian');\n// → \"Brian\" \n\n_.result(object3, 'name', 'Brian');\n// → \"Brian\" \n```", "```js\nfunction Person(first, last) {\n    this.first = first;\n    this.last = last;\n}\n\nPerson.prototype.name = function() {\n    return this.first + ' ' + this.last;\n};\n\n_.functions(new Person('Teresa', 'Collins'));\n// → [ \"name\" ]\n```", "```js\nfunction format(label, value) {\n    return label + ': ' + value;    \n}   \nvar object = { \n    first: 'Katherine',\n    last: 'Bailey',\n    age: 33\n}, result = '';\n\n_.forEach(_.pairs(object), function(pair) {\n    result += format.apply(null, pair) + '\\n';\n});\n// → \"first: Katherine\\nlast: Bailey\\nage: 33\\n\" \n```", "```js\nvar object1 = { \n        name: 'Kevin Moore',\n        occupation: 'Programmer'\n    },  \n    object2 = { \n        specialty: 'Python',\n        employer: 'Acme'\n    };\n\n_.assign(object1, _.pick(object2, 'specialty'));\n// →\n// {\n//   name: \"Kevin Moore\",\n//   occupation: \"Programmer\",\n//   specialty: \"Python\"\n// }\n```", "```js\nvar object1 = { \n        name: 'Kevin Moore',\n        occupation: 'Programmer'\n    },  \n    object2 = { \n        specialty: 'Python',\n        employer: 'Acme'\n    };\n\n_.assign(object1, _.omit(object2, 'employer'));\n// →\n// {\n//   name: \"Kevin Moore\",\n//   occupation: \"Programmer\",\n//   specialty: \"Python\"\n// }\n```", "```js\nvar object = { \n    name: 'Lois Long',\n    age: 0,\n    occupation: null\n};\n\n_.omit(object, function(value) {\n    return !(!_.isBoolean(value) && value);\n});\n// → { name: \"Lois Long\" }\n```", "```js\nfunction sortValues(object) {\n    return _.values(object).sort();\n}   \n\nvar object1 = { \n        first: 'Mathew',\n        last: 'Johnson'\n    },  \n    object2 = { \n        first: 'Melissa',\n        last: 'Willians'\n    };\n\nsortValues(object1);\n// → [ \"Johnson\", \"Mathew\" ]\n\nsortValues(_.invert(object2));\n// → [ \"first\", \"last\" ]\n```", "```js\nfunction Person() {}\nPerson.prototype.name = function() {\n    return this.first + ' ' + this.last;\n};  \n\nvar collection = [ \n        { first: 'Jean', last: 'Flores' },\n        { first: 'Edward', last: 'Baker' },\n        { first: 'Jennifer', last: 'Walker' }\n    ],  \n    people = []; \n\n_.forEach(collection, function(item) {\n    people.push(_.create(Person.prototype, item));\n}); \n\n_.invoke(people, 'name');\n// → [ \"Jean Flores\", \"Edward Baker\", \"Jennifer Walker\" ]\n```", "```js\nfunction Person(first, last) {\n    this.first = first;\n    this.last = last;\n}\n\nvar object1 = { \n        first: 'Laura',\n        last: 'Gray'\n    },  \n    object2 = new Person('Bruce', 'Price'),\n    clone1 = _.clone(object1),\n    clone2 = _.clone(object2);\n\nclone1.first === 'Laura';\n// → true\n\nclone2.first === 'Bruce' && clone2 instanceof Person;\n// → false\n```"]