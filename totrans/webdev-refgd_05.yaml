- en: Chapter 5. CSS Properties – Part 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ok, we're through Part 1 of the CSS properties. Indeed, there are many, many
    more properties to talk about.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now move on to Part 2.
  prefs: []
  type: TYPE_NORMAL
- en: Fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the world of design, fonts are one of the most powerful assets we have, and
    at the same time, they are one of the most underappreciated ones.
  prefs: []
  type: TYPE_NORMAL
- en: Typography is so powerful that when we use it correctly, we may even get away
    with not using a single image in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the CSS font properties, shall we?
  prefs: []
  type: TYPE_NORMAL
- en: font-family
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `font-family` CSS property defines the font we want an element to use,
    and looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property can hold one or multiple font names in its declaration. There
    is no limit as to how many font names it can hold; however, it is not only very
    unlikely to list more than four or five fonts, but it's also unnecessary.
  prefs: []
  type: TYPE_NORMAL
- en: The font family names are separated by commas. We call this the *font stack*.
    The browser will read the font stack and use the first one in the stack, if it
    can't find it or download it, it will move on to the next font family name and
    so on until it's able to use one from the stack.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of font family names: family name and generic family name.'
  prefs: []
  type: TYPE_NORMAL
- en: Family name
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Family names are actually names that represent real fonts, such as `Times`,
    `Arial`, `Verdana`, `Monaco`, and so on. They should always be listed before generic
    family names in the font stack.
  prefs: []
  type: TYPE_NORMAL
- en: Generic family names
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: These are the only keywords that represent a system font. They are called **fallback**
    fonts. They should always be listed after the family names in the font stack.
    Generic family names can be `monospace`, `san-serif`, `serif`, `cursive`, and
    `fantasy`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is not mandatory to use quotes (single or double) when a font family name
    has multiple words. For example, writing `font-family: "Times New Roman", serif;`
    is the same as writing `font-family: Times New Roman, serif;`. Note that `Times
    New Roman` is not quoted in the second example.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: font-feature-settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `font-feature-settings` CSS property provides control over typographic
    properties in OpenType fonts, and looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The font-feature-settings CSS property allows us to control and use other alternative
    glyphs that come included in some font files.
  prefs: []
  type: TYPE_NORMAL
- en: An example of an alternate glyph is for example when we type the fractions 1/2
    or 1/4 the font actually includes the "small superscript" version like ½ and ¼.
    Or if we type H[2]O it turns into H[2]O.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, not all fonts contain special glyphs (font features).
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out what font features a font file has, you can use any of these two
    tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Fontdeck.com (text has link [http://fontdeck.com/](http://fontdeck.com/)) -
    Find the font you want and on the About this typeface, look for the OPENTYPE line,
    there all the font features will be listed for that specific font.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test OpenType features (text has link [http://www.impallari.com/testing/index.php](http://www.impallari.com/testing/index.php))
    - Just drag and drop your font file(s) and click on the OpenType Features link
    on the top left, a large panel will slide where you can select which features
    to see.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here are some of the most common feature tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dlig`: Discretionary ligatures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kern`: Kerning'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`liga`: Standard ligatures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lnum`: Lining figures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onum`: Old style figures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tnum`: Tabular figures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`smcp`: Small capitals'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ss01, ss02, ss03, ss04… ss20`: Stylistic sets (font-dependent)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`swsh`: Swash'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information, check out the MDN website: [http://tiny.cc/mdn-font-feature-settings](http://tiny.cc/mdn-font-feature-settings)'
  prefs: []
  type: TYPE_NORMAL
- en: For a complete list of all font features, check the Microsoft site at [http://tiny.cc/msn-font-features-list](http://tiny.cc/msn-font-features-list)
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: font-size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `font-size` CSS property defines the size of the text of an element, and
    it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property can also be used to change the size of other elements since we
    can compute the value of `em`, `rem`, and `ex` length units as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few different value types that we can use with the `font-size`
    CSS property: absolute keywords/size, relative size, length, and percentage.'
  prefs: []
  type: TYPE_NORMAL
- en: Absolute keywords/size
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The sizes defined relate directly to specific font sizes. They can also be
    used to set a font size of an element based on the parent element''s font size.
    Values are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`xx-small`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x-small`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`small`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`medium` (default value)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`large`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x-large`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xx-large`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relative size keywords
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'These sizes increase or reduce the font size of an element based on the font
    size of its parent container. The values are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`smaller`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`larger`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Length
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Negative values are invalid. When using `px`, the font size is absolute; it's
    not relative to the font size of the parent container. When using `em`, `ex`,
    and `ch`, the font size is relative to the font size of the element's parent container.
    When using `rem`, the font size is relative to the root element, that is, the
    `<html>` element. When using `vw`, `vh`, `vmax`, and `vmin` the font size is relative
    to the viewport.
  prefs: []
  type: TYPE_NORMAL
- en: To see all the available values of this attribute, refer to the *Absolute Length
    Units* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most popular units are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`px`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`em`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rem`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Percentage
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `percentage` attribute refers to the percentage of the parent element's
    font size. Its unit is `%`.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: font-size-adjust
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `font-size-adjust` CSS property helps us define the aspect ratio of the
    fonts based on the size difference of the lowercase letter *x* and upper case
    letter *X*, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the font stack, the font sizes can be different from one font to the other,
    thus the styling of the text can considerably vary from the intended design. With
    the `font-size-adjust` CSS property, we can solidly predict that the font sizes
    are consistent when the browser uses any font from the font stack.
  prefs: []
  type: TYPE_NORMAL
- en: This property accepts a *numeric* value without a unit. It can also accept decimal
    values.
  prefs: []
  type: TYPE_NORMAL
- en: 'A great online tool that can do this for us is Fontdeck''s font-size-adjust
    web app: [http://fontdeck.com/support/fontsizeadjust](http://fontdeck.com/support/fontsizeadjust).'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although Firefox is the only one that supports the `font-size-adjust` property
    at the time of writing this section, I decided to still include it because it
    will be of great value once other browsers start supporting it.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: font-stretch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `font-stretch` CSS property allows us to select a `condensed`, `normal`,
    or `expanded` face from the font family in question, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `font-stretch` property doesn't just *stretch* the font to whatever we tell
    it to. It looks for an actual face inside the font file that matches the declared
    style; or at that is as close as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property supports the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ultra-condensed`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`extra-condensed`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`condensed`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`semi-condensed`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`normal`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`semi-expanded`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expanded`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`extra-expanded`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ultra-expanded`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: font-style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `font-style` CSS property specifies the font style of an element, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `font-style` property accepts the following values: `normal`, `italic`,
    and `oblique`.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's clear up the difference between `italic` and `oblique`.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the spec:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Italic forms are generally cursive in nature, while oblique faces are typically
    sloped versions of the regular face."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This means that when we declare the font style `italic`, the browser will look
    for the italic face of the font and use that face. A good example of this is the
    typeface *Georgia*; when we use the `italic` property, we can clearly see that
    it's an actual italicized face rather than making the normal face oblique.
  prefs: []
  type: TYPE_NORMAL
- en: Oblique makes the Normal face slanted or inclined in order to *simulate* italics.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: font-variant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `font-variant` CSS property turns the targeted text into small caps and
    it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `font-variant` property is considered a shorthand in CSS3 and has been extended
    with new values, which developers rarely use.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to note is that if the text is already in all caps and we apply the
    `small-caps` property to it, the text will not change; it will continue to be
    in all caps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most used values are: `normal` and `small-caps`. Some of the additional
    values in CSS3 are `small-caps`, `all-small-caps`, `petite-caps`, `all-petite-caps`,
    `unicase`, and `titling-caps`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information, check out the MDN website: [http://tiny.cc/mdn-font-variant](http://tiny.cc/mdn-font-variant)'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: font-variant-ligatures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `font-variant-ligatures` CSS property defines ligatures in text, which
    specify how glyphs are combined in order to produce a more harmonic text, and
    it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `font-variant-ligatures` are common in OpenType fonts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `font-variant-ligatures` property uses the following values: `common-ligatures`,
    `no-common-ligatures`, `discretionary-ligatures`, `no-discretionary-ligatures`,
    `historical-ligatures`, `no-historical-ligatures`, `contextual`, `no-contextual`,
    and `contextual`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information, check out the MDN website: [http://tiny.cc/mdnfont-variant-ligatures](http://tiny.cc/mdnfont-variant-ligatures)'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: font-weight
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `font-weight` CSS property defines the thickness (weight) of the font,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property accepts two types of values: a *numeric* value and a *keyword*
    value.'
  prefs: []
  type: TYPE_NORMAL
- en: Numeric values
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This property accepts numeric values such as `100`, `200`, `300`, `400`, `500`,
    `600`, `700`, `800` and `900`.
  prefs: []
  type: TYPE_NORMAL
- en: Keyword values
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This property also accepts keyword values such as `normal`, `bold`, `bolder`,
    and `lighter`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `normal` keyword is the same as `400` numeric value and the `bold` keyword
    is the same as `700`.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to note is that the keywords `bolder` and `lighter` are dependent
    on the parent element's font weight.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: font
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `font` CSS property is the shorthand for the `font-style`, `font-variant`,
    `font-weight`, `font-size`, `line-height`, and `font-family` properties, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a few things to consider when using the `font` shorthand in order
    for it to work:'
  prefs: []
  type: TYPE_NORMAL
- en: At least the `font-size` and `font-family` properties need to be declared
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If any of the preceding two properties are omitted, the declaration will be
    ignored
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If any more than these two properties are going to be declared, it''s mandatory
    to adhere to the following order:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font-style`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font-variant`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font-weight`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font-size`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`line-height`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font-family`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When declaring the `line-height` value in the shorthand, it always has to go
    after the `font-size` property separated with a slash "`/`" character, for example,
    `.element { font: 12px/1.6 Arial; }`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Transform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS transforms have gained such popularity that it's rare not to see some sort
    of transformation in a website nowadays—from button shapes and animations to layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Let's dig in.
  prefs: []
  type: TYPE_NORMAL
- en: transform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `transform` CSS property allows us to scale, rotate, skew, and translate
    elements in 2D and 3D spaces, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property supports the following values: `scale()`, `skewX()` and `skewY()`,
    `translate()`, `rotate()`, `matrix()`, and `perspective()`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that X-axis equals *horizontal* and Y-axis equals *vertical*.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An easy way to remember which axis is which is by saying this: "*x is a cross
    so the x-axis is across*". [http://tiny.cc/xy-axis](http://tiny.cc/xy-axis)'
  prefs: []
  type: TYPE_NORMAL
- en: scale()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `scale()` function scales an element. It's also the shorthand for `scaleX()`
    and `scaleY()` functions. It accepts a *numeric* value without a unit. The *numeric*
    value represents the proportion in which the element will be scaled. For example,
    `2` means that the element will be scaled to twice its size. Negative values are
    valid.
  prefs: []
  type: TYPE_NORMAL
- en: skew()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `skew()` function tilts the element. If a single value is declared, then
    it will only tilt the element on the *x* axis. If two values are declared, then
    the element is tilted on both the *x* and *y* axes. The `skew()` function accepts
    a *numeric* value followed by the `deg`, `grad`, `rad`, or `turn` units. However,
    the `deg` unit is the most commonly used unit. Negative values are valid.
  prefs: []
  type: TYPE_NORMAL
- en: skewX() and skewY()
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The `skewX()` and `skewY()` functions tilts the element only horizontally or
    vertically.
  prefs: []
  type: TYPE_NORMAL
- en: translate()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `translate()` function alters the location of an element. If a single value
    is declared, then it will only translate the element on the X-axis. If two values
    are declared, then the element is translated in both the X and Y-axis. Negative
    values are valid.
  prefs: []
  type: TYPE_NORMAL
- en: translateX() and translateY()
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The `translateX()` and `translateY()` functions alters the location either horizontally
    or vertically.
  prefs: []
  type: TYPE_NORMAL
- en: rotate()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `rotate()` function rotates an element around a fixed point in a 2D space.
    It accepts a *numeric* value followed by the `deg`, `grad`, `rad`, or `turn` units.
    The `deg` unit is the most common though. Negative values are valid.
  prefs: []
  type: TYPE_NORMAL
- en: matrix()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `matrix()` function is shorthand for all transformation values since they
    can be combined here. Granted the complexity of the `matrix()` function, this
    requires a solid understanding of math.
  prefs: []
  type: TYPE_NORMAL
- en: perspective()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This value gives a 3D perspective to the element; once the perspective is set,
    we can then use any of the other values. The element in question will react in
    a 3D plane. It accepts a *numeric* value with a *length* unit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The explanation of the advanced mathematics of the `matrix()` function are
    out of scope of this book. However, for very detailed explanations, you can refer
    to either of these two articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding the CSS Transforms Matrix* by Tiffany Brown at [http://tiny.cc/css-matrix-1](http://tiny.cc/css-matrix-1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The CSS3 matrix() Transform for the Mathematically Challenged* by Zoltan Hawryluk
    at [http://tiny.cc/css-matrix-2](http://tiny.cc/css-matrix-2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: transform-origin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `transform-origin` CSS property allows us to change the point of origin
    of the transformed element, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `transform-origin` property only works if the `transform` property is declared.
  prefs: []
  type: TYPE_NORMAL
- en: 2D transformations can affect the *x* and *y* axes. 3D transformations can change
    these two as well as the *z* axis.
  prefs: []
  type: TYPE_NORMAL
- en: For a 2D transformation, up to two values can be declared; the first one is
    the X axis (horizontal) and the second the Y axis (vertical).
  prefs: []
  type: TYPE_NORMAL
- en: 3D transformations can take up to three values that represent the X, Y, and
    Z axes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The keywords that are accepted in this property are: `top`, `right`, `bottom`,
    `left`, and `center`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: transform-style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `transform-style` CSS property defines whether an element is positioned
    in a 3D space or 2D space (flat), and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property takes only two values: `flat` and `preserve-3d`.'
  prefs: []
  type: TYPE_NORMAL
- en: When the `preserve-3d` property is applied, the elements' stack on the *z* axis
    can be altered via the `translate()` function, thus the elements can appear in
    different planes regardless of the order in which they appear in the source HTML.
  prefs: []
  type: TYPE_NORMAL
- en: When the `flat` property is applied, the elements obey the order in which they
    appear in the source HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this property is applied to the parent element, not the child elements.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Transition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS transitions allow us to have very granular control over our animations.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at these properties.
  prefs: []
  type: TYPE_NORMAL
- en: transition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `transition` CSS property is the shorthand for all transition properties:
    `transition-delay`, `transition-duration`, `transition-property`, and `transition-timing-function`.
    It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This property lets us define the transition between two states of an element
    via the `:hover` or `:active` pseudo-classes.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to consider is that the order in which these properties appear doesn't
    matter. However, since `transition-delay` and `transition-duration` use the same
    value unit, `transition-delay` will always be considered first, followed by `transition-duration`.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: transition-delay
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `transition-delay` CSS property allows us to set a *timer*. When the timer
    reaches zero, the transition begins. It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This property accepts a *numeric* value followed by either `s` or `ms`, which
    stand for *seconds* and *milliseconds*, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: transition-duration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `transition-duration` CSS property allows us to define how long a transition
    should take from start to end. This is also called a **cycle,** and it looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `transition-duration` property accepts a *numeric* value followed by either
    `s` or `ms`, which stand for seconds and milliseconds, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: transition-property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `transition-property` CSS property specifies which CSS property or properties
    will be transitioned.
  prefs: []
  type: TYPE_NORMAL
- en: Not all properties are animatable though. The W3C has a nice list of animatable
    CSS properties, which can be found at [http://tiny.cc/w3c-animatable-css-props](http://tiny.cc/w3c-animatable-css-props)
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `transition-property` CSS property accepts the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`none`: This means that no transitions will take place'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`all`: This means that all properties will be transitioned'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Property name`: This means that the specified property or properties will
    be transitioned'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: transition-timing-function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `transition-timing-function` CSS property defines how an animation's speed
    should progress throughout its cycles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both the `transition-timing-function` and `animation-timing-function` properties
    accept the same five predefined values, which are also known as easing functions
    for the **Bézier** curve: `ease`, `ease-in`, `ease-out`, `ease-in-out`, and `linear`.'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *animation-timing-function* section for a detailed explanation
    of all the values.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Positioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Positioning elements is something we spend a lot of our time on when building
    sites and applications, so having a good understanding of how to place an element
    on a layout is crucial, especially when an element can have different positions
    depending on the available space.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see what positioning is all about.
  prefs: []
  type: TYPE_NORMAL
- en: position
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `position` CSS property defines the location of an element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are five keyword values for the `position` property: `static`, `absolute`,
    `relative`, `fixed`, and `sticky`.'
  prefs: []
  type: TYPE_NORMAL
- en: static
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the default value of the `position` property. The element stays in the
    flow of the document and appears in the actual location where it's located in
    the markup.
  prefs: []
  type: TYPE_NORMAL
- en: absolute
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The element is removed from the document flow and it's positioned in relation
    to its closest relative positioned ancestor element.
  prefs: []
  type: TYPE_NORMAL
- en: relative
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The element does not change positions unless one or several properties of `top`,
    `right`, `bottom`, or `left` are declared. It also creates a *reference position*
    for `absolute` positioned child elements.
  prefs: []
  type: TYPE_NORMAL
- en: fixed
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The element is removed from the document flow just like the `absolute` positioned
    elements. However, unlike the `absolute` positioned elements, which are relative
    to an ancestor element, the `fixed` elements are always relative to the document.
  prefs: []
  type: TYPE_NORMAL
- en: sticky
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This value is a mix between the `relative` and `fixed` positions. The element
    is treated as `relative` until a specific point or threshold is met, at which
    point the element is then treated as `fixed`. At the time of writing this, only
    Firefox supports this property.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: top
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `top` CSS property is closely tied to the `position` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property specifies the distance of an element from the top of its current
    location if the element has `position: relative;` declared or from the top of
    its nearest ancestor when the ancestor has `position: relative;` and the element
    has `position: absolute;` declared.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If none of the ancestors have `position: relative;` declared, the absolute
    positioned element will traverse the DOM until it reaches the `<body>` tag, at
    which point it will position itself at the top of the page regardless of its location
    in the source HTML.'
  prefs: []
  type: TYPE_NORMAL
- en: Negative values are valid.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It supports the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`auto`: The `auto` keyword is the default value. The browser calculates the
    top position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Length value`: For the length value, we use one of the following units: `px`,
    `em`, `in`, `mm`, `cm`, `vw`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Percentage value`: For the percentage value, we use percentages like `50%`,
    `85%`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: bottom
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `bottom` CSS property is closely tied to the `position` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property specifies the distance of an element from the bottom of its current
    location if the element itself has `position: relative;` declared or from the
    bottom of its nearest ancestor when the ancestor has `position: relative;` and
    the element has `position: absolute;` declared.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If none of the ancestors have `position: relative;` declared, the absolute
    positioned element will traverse the DOM until it reaches the `<body>` tag, at
    which point it will position itself at the bottom of the page regardless of its
    location in the source HTML.'
  prefs: []
  type: TYPE_NORMAL
- en: Negative values are valid.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It supports the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`auto`: The auto keyword is the default value for the `bottom` property. The
    browser calculates the top position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Length value`: For the length value, we use one of the following units: `px`,
    `em`, `in`, `mm`, `cm`, `vw`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Percentage value`: For the percentage value, we use percentages like `50%`,
    `85%`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: left
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `left` CSS property is closely tied to the `position` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property specifies the distance of an element from the left of its current
    location if the element has `position: relative;` declared or from the left of
    its nearest ancestor when the ancestor has `position: relative;` and the element
    has `position: absolute;` declared.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If none of the ancestors have `position: relative;` declared, the absolute
    positioned element will traverse the DOM until it reaches the `<body>` tag, at
    which point it will position itself at the left of the page regardless of its
    location in the source HTML.'
  prefs: []
  type: TYPE_NORMAL
- en: Negative values are valid.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `left` property supports the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`auto`: The `auto` keyword is the default value for the `left` property. The
    browser calculates the top position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Length value`: For the length value, we use one of the following units: `px`,
    `em`, `in`, `mm`, `cm`, `vw`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Percentage value`: For the percentage value, we use percentages like `50%`,
    `85%`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: right
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `right` CSS property is closely tied to the `position` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property specifies the distance of an element from the right of its current
    location if the element has `position: relative;` declared or from the right of
    its nearest ancestor when the ancestor has `position: relative;` and the element
    has `position: absolute;` declared.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If none of the ancestors have `position: relative;` declared, the absolute
    positioned element will traverse the DOM until it reaches the `<body>` tag, at
    which point it will position itself at the right of the page regardless of its
    location in the source HTML.'
  prefs: []
  type: TYPE_NORMAL
- en: Negative values are valid.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It supports the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`auto`: The `auto` keyword is the default value for the `right` property. The
    browser calculates the top position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Length value`: For the length value, we use one of the following units: `px`,
    `em`, `in`, `mm`, `cm`, `vw`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Percentage value`: For the percentage value, we use percentages like `50%`,
    `85%`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: vertical-align
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `vertical-align` CSS property controls the vertical positioning of an element
    in order to align it to another element(s) next to it.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It accepts the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`baseline`: This is the default value. It aligns the elements to the bottom,
    exactly at the last line of text regardless of the elements'' line height. In
    other words, it aligns the last line of text to baselines of the elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bottom`: This aligns the elements'' containers to the bottom. The text and
    line height of the elements are not considered, only the elements'' containers
    to the bottom.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Length value`: For the length value, we use one of the following units: `px`,
    `em`, `in`, `mm`, `cm`, `vw`, and so on. Negative values are valid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`middle`: This aligns the elements to their horizontal center based on their
    vertical midpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Percentage value`: For the percentage value, we use percentages like `50%`,
    `85%`, and so on. Negative values are valid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sub`: This aligns the element to the subscript baseline of the parent container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`super`: This aligns the element to the superscript baseline of the parent
    container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`top`: This aligns the elements'' containers to the top. The text and line
    height of the elements are not considered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text-bottom`: This aligns the elements to the bottom based on the parent''s
    text baseline. The line height of the elements is not considered, only the bottom
    of their containers is considered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text-top`: This aligns the elements to the top based on the parent''s text
    baseline. The line height of the elements is not considered, but the top of their
    containers is.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Typography is an incredibly powerful design feature and, in reality, styling
    text with CSS is actually simple.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how.
  prefs: []
  type: TYPE_NORMAL
- en: color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `color` CSS property defines the color of the text and looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, it can look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `color` property supports all color modes, `HEX`, `RGB`, `RGBa`, `HSL`,
    `HSLs`, and *color name*.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: text-align
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `text-align` CSS property defines the alignment of the text, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The text can be centered, left-aligned, right-aligned, and fully-justified.
  prefs: []
  type: TYPE_NORMAL
- en: The `text-align` property only works on inline elements. If this property is
    applied to a block-level element, it will not work on the element itself, but
    it will work on its content.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: text-decoration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `text-decoration` CSS property defines several formatting features for
    the text, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `text-decoration` property accepts the following keyword values: `underline`,
    `overline`, `line-through`, `none`, and `blink`.'
  prefs: []
  type: TYPE_NORMAL
- en: This property is also the shorthand for the `text-decoration-line`, `text-decoration-color`,
    and `text-decoration-style` properties.
  prefs: []
  type: TYPE_NORMAL
- en: It can accept one, two, or three values in the same declaration if used as a
    shorthand.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: text-decoration-line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `text-decoration-line` CSS property defines the type of decoration line
    that a text can have, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `text-decoration-line` property accepts one, two, or three values in a
    single declaration. The keyword values are the same as in the `text-decoration`
    property: `underline`, `overline`, `line-through`, `none,` and `blink`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: text-decoration-color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `text-decoration-color` CSS property defines the type of color the `text-decoration`
    property can have, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It supports all color modes: `HEX`, `RGB`, `RGBa`, `HSL`, `HSLs`, and *color
    name*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: text-decoration-style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `text-decoration-style` CSS property defines the type of line the `text-decoration`
    property can have, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `text-decoration-style` property supports the following keyword values:
    `dashed`, `dotted`, `double`, `solid`, and `wavy`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: text-indent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `text-indent` CSS property defines the space to the left (indentation)
    of the first line of text in an element, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It accepts `length` and `percentage` values. Negative values are valid.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: text-overflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `text-overflow` CSS property defines how text that is *bleeding* outside
    of a container should be clipped, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this property to work, two other properties should have to be declared:
    `overflow: hidden;` and `white-space: nowrap;`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two keyword values: `clip` and `ellipsis`.'
  prefs: []
  type: TYPE_NORMAL
- en: clip
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This cuts the text exactly at the edge of its parent container. This may cause
    the last character to be clipped at any point showing only a portion of it.
  prefs: []
  type: TYPE_NORMAL
- en: ellipsis
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This adds an ellipsis character "…" at the end of the line of text.
  prefs: []
  type: TYPE_NORMAL
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: text-rendering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `text-rendering` CSS property allows us to define the quality of the text
    over speed/performance and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on the font, when this property is applied, we can see benefits like
    better kerning and better ligatures.
  prefs: []
  type: TYPE_NORMAL
- en: However, since this CSS property is actually an SVG property and is not part
    of any CSS standard, browsers and operating systems apply this property at their
    own discretion, which in turn may not yield the desired improvements from one
    browser and/or platform to another.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, some small screen devices have serious performance issues
    when they encounter the `text-rendering` CSS property, especially older iOS and
    Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use the `text-rendering` CSS property with extreme caution and make sure you
    run all pertinent tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property supports four values: `auto`, `optimizeSpeed`, `optimizeLegibility`,
    and `geometricPrecision`.'
  prefs: []
  type: TYPE_NORMAL
- en: auto
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the default value. The browser tries to make the best educated guess
    as to how to render the text in order to optimize for speed, legibility, and geometric
    precision.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, each browser interprets this property differently.
  prefs: []
  type: TYPE_NORMAL
- en: optimizeSpeed
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The browser favors rendering speed over legibility and geometric detail. It
    disables kerning and ligatures.
  prefs: []
  type: TYPE_NORMAL
- en: optimizeLegibility
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The browser favors legibility over rendering speed and geometric detail. It
    enables kerning and some optional ligatures. Keep in mind that if the browser
    tries to use any kerning and ligatures, this information needs to be contained
    in the font file, otherwise we won't see the effects of such features.
  prefs: []
  type: TYPE_NORMAL
- en: geometricPrecision
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The browser favors geometric detail over legibility and rendering speed. This
    property helps when scaling fonts.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the kerning in some fonts does not scale correctly, so when we
    apply this value, the browser is capable of keeping the text looking nice.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: text-shadow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `text-shadow` CSS property applies a drop shadow to the text, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property can accept two, three, or four values in the same declaration.
    The first length value in the declaration will always be for the `x-offset` value
    and the second length value for the `y-offset` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the four values it supports: `x-offset`, `y-offset`, `color`, and
    `blur`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`x-offset`: This sets the horizontal distance of the shadow from the text.
    It''s declared as a length value (`px`, `em`, `in`, `mm`, `cm`, `vw`, and so on).
    Negative values are valid. This value is mandatory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y-offset`: This sets the vertical distance of the shadow from the text. It''s
    declared as a length value (`px`, `em`, `in`, `mm`, `cm`, `vw`, and so on). Negative
    values are valid. This value is mandatory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color`: This is the color of the text shadow. It supports all color modes:
    `HEX`, `RGB`, `RGBa`, `HSL`, `HSLs`, and *color name*. This value is optional.
    If it is not specified, the default color will be the same color as the text itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`blur`: This is the **smudge** effect. It''s declared as a length value (`px`,
    `em`, `in`, `mm`, `cm`, `vw`, and so on). It supports all color modes: `HEX`,
    `RGB`, `RGBa`, `HSL`, `HSLs`, and *color name*. This value is optional. If it
    is not specified, the default value is zero (`0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: text-transform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `text-transform` CSS property controls the capitalization of text, and
    it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `text-transform` property supports the following four keyword values: `none`,
    `capitalize`, `uppercase`, and `lowercase`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`none`: This is the default value. No capitalization should be applied to the
    element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`capitalize`: This capitalizes the first letter of each word. This property
    is smart enough to ignore any special characters or symbols at the beginning of
    the line and capitalize the first letter of the first word.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uppercase`: This changes all the text to upper case/capitals. This property
    can also ignore special characters or symbols at the beginning of the line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lowercase`: This makes all the text lowercase. This property can also ignore
    special characters or symbols at the beginning of the line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: text-underline-position
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `text-underline-position` CSS property defines the location of the underline
    on elements that have the `text-decoration` property declared, and it looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `text-underline-position` property supports four keyword values: `auto`,
    `left`, `right`, and `under`.'
  prefs: []
  type: TYPE_NORMAL
- en: auto
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the default value. This property allows the browser to decide where
    to place the underline, whether at the base line of the text or below it.
  prefs: []
  type: TYPE_NORMAL
- en: left
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is only for vertical writing modes. It places the underline to the left
    of the text.
  prefs: []
  type: TYPE_NORMAL
- en: right
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is only for vertical writing modes. It places the underline to the right
    of the text.
  prefs: []
  type: TYPE_NORMAL
- en: under
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This value places the underline below the base line of the text, so it won't
    cross any descender (it supports values like `q`, `p`, `y`, and so on). This is
    helpful in text that has mathematical and chemical formulas that use a lot of
    subscripts, so the underline doesn't interfere with certain characters and make
    such formulas confusing or difficult to read.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: direction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `direction` CSS property sets the direction of the text. Left to right
    for western languages and other similar languages and right to left for languages
    like Arabic or Hebrew. It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The text direction is typically defined in the HTML via the `dir` attribute
    rather than via CSS.
  prefs: []
  type: TYPE_NORMAL
- en: The `direction` CSS property is not inherited by table cells. So, in addition
    to this, it's recommended to set the direction of the text via the `dir` attribute
    in the HTML document to maintain complete cascading support if the CSS files do
    not load.
  prefs: []
  type: TYPE_NORMAL
- en: This property accepts two keyword values, `ltr` and `rtl`, which mean *left
    to right* and *right to left*.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tables, tables, tables! Together with images, HTML tables are the black sheep
    of web design.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of being the black sheep, the power of tables is amazing. And if
    there's an HTML element that does its job well, very well, it's tables.
  prefs: []
  type: TYPE_NORMAL
- en: Let's dig in.
  prefs: []
  type: TYPE_NORMAL
- en: table-layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `table-layout` CSS property allows us to define the how HTML tables are
    laid out on the document, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two keyword values: `auto` and `fixed`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`auto`: This is the default value. Tables are automatically laid out by the
    browser this way without declaring anything in the CSS. The table cells adapt
    to the content inside of them; the behavior of table can sometimes be unpredictable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fixed`: By declaring the width of the table cells from the first row, the
    rendering of the entire table can be actually faster; anything we do to improve
    performance is big win for everyone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since the table cells have a fixed width, depending on the data in the cells,
    some information can overflow the cells. Using a combination of the `overflow`
    properties and `text-overflow: ellipsis;` we can fix the issue.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: border-collapse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `border-collapse` CSS property tells the table cells to stay separated
    or get close together (collapse), and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property supports two keyword values: `separate` and `collapse`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`separate`: This is the default value. There is a space between the table cells,
    and each cell has its own border.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`collapse`: This value brings the cells together, thus the space is lost and
    the cells share borders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: border-spacing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `border-spacing` CSS property creates a space between the table cells,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `border-spacing` property only works when the `border-collapse: separate;`
    declaration is present.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: empty-cells
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `empty-cells` CSS property allows us to define how browsers should render
    borders and backgrounds on cells that have no content in them, and it looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `empty-cells` property supports two keyword values: `show` and `hide`,
    which determine whether the borders and background should, or should not, be rendered.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: caption-side
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `caption-side` CSS property defines the location of the table caption,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It supports two keyword values: `top` and `bottom`.'
  prefs: []
  type: TYPE_NORMAL
- en: In CSS 2, other keyword values, such as `left` and `right`, were supported,
    but they were dropped in CSS 2.1.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Words and paragraphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuing with typography features, we now enter the `word` and `paragraph`
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get going.
  prefs: []
  type: TYPE_NORMAL
- en: hyphens
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `hyphens` CSS property tells the browser how to handle hyphenation when
    text lines wrap, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can control when to hyphenate and whether to allow it or let it happen under
    certain conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Hyphenation is language dependent. The language in a document is defined by
    the `lang` attribute; browsers will hyphenate if they support the language and
    a proper hyphenation dictionary is available. Each browser supports hyphenation
    differently.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ensure that the `lang` attribute is declared either globally on the `<html>`
    tag or on the specific element whose content should be hyphenated.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property supports three keyword values: `none`, `manual`, and `auto`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`none`: Text lines are not broken at line breaks even if there are characters
    suggesting where a line break should be introduced. Lines will only break on whitespace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`manual`: Text lines are broken at line breaks where there are characters that
    suggest a line break.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auto`: The browser makes the decision to introduce line breaks as it seem
    necessary. It bases its decisions on either the presence of hyphenation characters
    or by language-specific information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unicode characters to suggest line break opportunities
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are two Unicode characters that we can use to manually set a potential
    line break in the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: This character is called a **hard** hyphen. It's an actual hyphen "-" and it's
    visible in the text. The browser may or may not break the line on that specific
    character.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: This character is called a **soft** hyphen. Although it is present in the markup,
    it is not rendered in the text. However, the browser *sees* this character and,
    if it can use it to create a line break, it will. To insert a soft hyphen, we
    use `&shy;`.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: word-break
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `word-break` CSS property is used to specify whether line breaks should
    happen within words instead of breaking the lines on a hyphen or a space between
    words, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `word-break` property is very helpful in situations where a long string,
    such as a URL, is wider than its parent container, thus disrupting the layout
    or bleeding off the side. Applying the `word-break` property makes the URL break
    somewhere along the string.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property supports three keyword values: `normal`, `break-all`, and `keep-all`.'
  prefs: []
  type: TYPE_NORMAL
- en: normal
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the default value. Line breaks will happen based on default line breaking
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: break-all
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This allows line breaks to happen anywhere, including between two letters.
  prefs: []
  type: TYPE_NORMAL
- en: keep-all
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This affects CJK (Chinese, Japanese, and Korean) text only. Here, text words
    are not broken.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: word-spacing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `word-spacing` CSS property controls the space between words, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It supports the following values: a `normal` value, a `length` value and a
    `percentage` value.'
  prefs: []
  type: TYPE_NORMAL
- en: normal
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the default value. It's defined by the current font or the browser itself,
    and it resets to the default spacing.
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We use one of the following units when we use a length value: `px`, `em`, `in`,
    `mm`, `cm`, `vw`, and so on'
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For a percentage value, we use percentages like `50%`, `85%`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: word-wrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `word-wrap` CSS property allows long words to break at an arbitrary point
    if there are no suggested break points in the long word in question, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property supports two keyword values: `normal` and `break-word`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`normal`: It makes long words break at normal break points'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`break-word`: It indicates that otherwise unbreakable words can now break at
    an arbitrary point'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: line-height
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `line-height` CSS property defines the distance between lines of text. In
    typography, the line height is called **leading**.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It supports the following values: a `normal` value, a `number` value, a `length`
    value, and a `percentage` value.'
  prefs: []
  type: TYPE_NORMAL
- en: '`normal`: This is the default value. The line height is defined by the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Number value`: This is a number without any unit. This is the recommended
    method. The reason a unitless value is recommended is because this value can cascade
    into child elements. Child elements can then scale their line height based on
    their font size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Length value`: We use one of the following units when we use the length value:
    `px`, `em`, `in`, `mm`, `cm`, `vw`, and so on. We can use decimals as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Percentage value`: For the percentage value, we use percentages like `50%`,
    `85%`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: orphans
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's understand the term **orphans** first. Orphans are the lines of a paragraph
    left in the previous page when a block of text is split over two pages. In the
    Web world, this is seen in text that spans several columns, where the first line
    of a paragraph is left on the previous column.
  prefs: []
  type: TYPE_NORMAL
- en: From an editorial standpoint, this is very bad. The recommended treatment of
    orphans is to leave at least three lines on the previous page or column. The more
    lines, the better.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `orphans` CSS property controls the number of lines left on the previous
    page, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property is very useful in print stylesheets, but it can also work when
    using CSS columns.
  prefs: []
  type: TYPE_NORMAL
- en: It supports a *numeric* value without a unit. This numeric value defines the
    number of lines left on the previous page or column.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: quotes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `quotes` CSS property controls the types of quotation marks to use, and
    it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Quotation marks are added via the `:before` and `:after` pseudo-elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest way to add quotation marks is to let the browser do it using the
    `content` property and the `open-quote` and `close-quote` values: `content: open-quote;`
    and `content: close-quote;`.'
  prefs: []
  type: TYPE_NORMAL
- en: We can also declare the types of quotes we want to use and not let the browser
    decide. We'll see this in the following CSS example.
  prefs: []
  type: TYPE_NORMAL
- en: Quotes always start and end with a double-character symbol, either `" "` or,
    for example, `« »` in French. But, if there's a nested quote, this nested quote
    uses a single-character symbol, either `' '` or, for example, `‹ ›` in French.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property supports two values: `none` and a `[string string]` value.'
  prefs: []
  type: TYPE_NORMAL
- en: none
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: No quotation marks are generated when using the `content` property.
  prefs: []
  type: TYPE_NORMAL
- en: '[string string +] value'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Each `string` represents a pair of quotes. The first `string` represents the
    outer level quotation marks and the second `string` represents the nested level
    quotation marks.
  prefs: []
  type: TYPE_NORMAL
- en: The `+` sign means that we can add deeper levels of nested quotation marks,
    but it's not really necessary, two levels should work for most cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking into account these considerations, we can then create the following
    quotation marks with the `quotes` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: widows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's clarify the term **widows** first. Widows are the lines of a paragraph
    that appear on the next page when a block of text is split over two pages. In
    the Web world, this is seen in text that spans several columns, where the last
    line of a paragraph appears on the next column.
  prefs: []
  type: TYPE_NORMAL
- en: From an editorial standpoint, this is very bad. The recommended treatment of
    widows is to leave at least three lines on the next page or column. The more lines,
    the better.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `widows` CSS property controls the number of lines that will appear on
    the next page, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `widows` property is very useful in print stylesheets, but it can also work
    when using CSS columns.
  prefs: []
  type: TYPE_NORMAL
- en: It supports a *numeric* value without a unit. This numeric value defines the
    amount of lines that will appear on the next page or column.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: writing-mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `writing-mode` CSS property defines the direction in which lines of text
    or even block-level elements are laid out, either vertically or horizontally,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property supports three keyword values: `horizontal-tb`, `vertical-rl`,
    and `vertical-lr`.'
  prefs: []
  type: TYPE_NORMAL
- en: horizontal-tb
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This means *horizontal*, *from top to bottom*. The content flows from left to
    right, top to bottom.
  prefs: []
  type: TYPE_NORMAL
- en: vertical-rl
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This means *vertical*, *from right to left*. The content is turned 90 degrees
    and flows vertically.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand this better, think of this: tilt your head to the right shoulder,
    at this point, you will be able to read the text flow from top (which was to the
    right before tilting your head) to bottom (which was to the left before tilting
    your head).'
  prefs: []
  type: TYPE_NORMAL
- en: vertical-lr
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This means *vertical*, *from left to right*. The content is turned 90 degrees
    and flows vertically.
  prefs: []
  type: TYPE_NORMAL
- en: However, unlike `vertical-rl`, when you tilt your head over your right shoulder,
    the content flows from bottom (which was to the left before tilting your head)
    to top (which was to the right before tilting your head), and the text lines are
    inverted.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: letter-spacing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `letter-spacing` CSS property defines the space between the characters
    in a line of text, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `letter-spacing` property supports the keyword values: `normal` and `length`.'
  prefs: []
  type: TYPE_NORMAL
- en: Negative values are valid.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unless you understand the legibility and design implications, the default letter
    spacing in most fonts is ideal and should rarely be changed.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: white-space
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `white-space` CSS property defines how the whitespace inside an element
    is going to be treated, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property supports five keyword values: `normal`, `nowrap`, `pre`, `pre-wrap`,
    and `pre-line`.'
  prefs: []
  type: TYPE_NORMAL
- en: normal
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the default value. If we have two or more spaces together, they will
    collapse into a single space. This is the normal behavior of HTML documents. It
    will wrap the text where necessary.
  prefs: []
  type: TYPE_NORMAL
- en: nowrap
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Multiple spaces will collapse into a single space, and the line will never wrap
    except if there's a `<br>` tag in the markup.
  prefs: []
  type: TYPE_NORMAL
- en: pre
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It's the same as the HTML element `<pre>`, which means **preformatted**. This
    value will honor all spaces in the text, but will not wrap it unless there's a
    `<br>` tag in the markup, just like `nowrap` does. This value is great to display
    short chunks of code.
  prefs: []
  type: TYPE_NORMAL
- en: pre-wrap
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This value honors all the spaces and will wrap the text where necessary. This
    value is great to display long chunks of code.
  prefs: []
  type: TYPE_NORMAL
- en: pre-line
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This value collapses multiple spaces into a single space and will wrap the text
    where necessary.
  prefs: []
  type: TYPE_NORMAL
- en: tab-size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `tab-size` CSS property allows us to define the number of spaces the tab
    character can have.
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in the prior `white-space` property description, multiple spaces are
    collapsed into a single space by default. Therefore, this property will only work
    on elements that are inside a `<pre>` tag or, have one of the `white-space` properties
    that honor multiple spaces, `pre` and `pre-wrap`.
  prefs: []
  type: TYPE_NORMAL
- en: This property is great for displaying code.
  prefs: []
  type: TYPE_NORMAL
- en: The default number of spaces the tab character has is 8\. But we, web designers
    and developers, are picky and like either four spaces or sometimes two. With the
    `tab-size` property, we can modify that default value to anything we want.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `tab-size` property supports two values: A `numeric` value and a `length`
    value.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Numeric value**: It''s just a number without a unit. Negative values are
    not valid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Length value**: We use one of the following units when we use the length
    value: `px`, `em`, `in`, `mm`, `cm`, `vw`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Paging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we build sites and applications for the Web, sometimes what we make
    is also printed.
  prefs: []
  type: TYPE_NORMAL
- en: The following properties will help us make our content more presentable and
    better handled across pages when printed.
  prefs: []
  type: TYPE_NORMAL
- en: Let's check out these paging properties.
  prefs: []
  type: TYPE_NORMAL
- en: page-break-after
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `page-break-after` CSS property defines where the page breaks after a specific
    element, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What this means is that when a new page break is created, a new page will be
    printed.
  prefs: []
  type: TYPE_NORMAL
- en: It works only on block-level elements. Also, since this property is used for
    printing, it's common to see it inside an `@print` media query.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property supports five keyword values: `always`, `auto`, `avoid`, `left`,
    and `right`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`always`: This value will force a page break after the element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auto`: This is the default value. It creates automatic page breaks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`avoid`: This will not allow any page breaks after the element, if possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`left`: This will force one or two page breaks after the element in order to
    make the following page a left-side page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`right`: This will force one or two page breaks after the element in order
    to make the following page a right-side page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: page-break-before
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `page-break-before` CSS property works similar to the `page-break-after`
    CSS property. However, it defines where the page breaks before a specific element,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a new page break is created, a new page will be printed.
  prefs: []
  type: TYPE_NORMAL
- en: It works only on block-level elements. Also, since this property is used for
    printing, it's common to see it inside an `@print` media query.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property supports the same five keyword values as the `page-break-before`
    property: `always`, `auto`, `avoid`, `left`, and `right`.'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the `page-break-before` CSS property section for the description of
    each keyword value.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: page-break-inside
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `page-break-inside` CSS property also works similar to the `page-break-before`
    and `page-break-after` properties. However, it defines where the page breaks inside
    a specific element, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What this means is that when a new page break is created, a new page will be
    printed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property supports only two keyword values, though: `auto` and `avoid`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`auto`: This is the default value. It creates automatic page breaks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`avoid`: This will not allow any page breaks inside the element, if possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
