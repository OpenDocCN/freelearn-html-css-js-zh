["```js\n// search.ts\nconst search = <A>(arr: A[], key: A): boolean => {\n  if (arr.length === 0) {\n    return false;\n  } else if (arr[0] === key) {\n    return true;\n  } else {\n    return search(arr.slice(1), key);\n  }\n};\n```", "```js\n// continued...\nconst search2 = <A>(arr: A[], key: A): boolean =>\n  arr.length === 0\n    ? false\n    : arr[0] === key || search2(arr.slice(1), key);\n```", "```js\n// continued...\nconst search3 = <A>(arr: A[], key: A): boolean =>\n  !!arr.length &&\n  (arr[0] === key || search3(arr.slice(1), key));\n```", "```js\n// power.ts\nconst powerN = (base: number, power: number): number => {\n  if (power === 0) {\n    return 1;\n  } else if (power % 2) {\n    // odd power?\n    return base * powerN(base, power - 1);\n  } else {\n    // even power?\n    return powerN(base * base, power / 2);\n  }\n};\n```", "```js\n// hanoi.ts\nconst hanoi = (\n  disks: number,\n  from: Post,\n  to: Post,\n  extra: Post\n) => {\n  if (disks === 1) {\n    console.log(\n      `Move disk 1 from post ${from} to post ${to}`\n    );\n  } else {\n    hanoi(disks - 1, from, extra, to);\n    console.log(\n      `Move disk ${disks} from post ${from} to post ${to}`\n    );\n    hanoi(disks - 1, extra, to, from);\n  }\n};\n```", "```js\nhanoi (4, \"A\", \"B\", \"C\");\n// move all disks from A to B\nMove disk 1 from post A to post C\nMove disk 2 from post A to post B\nMove disk 1 from post C to post B\nMove disk 3 from post A to post C\nMove disk 1 from post B to post A\nMove disk 2 from post B to post C\nMove disk 1 from post A to post C\nMove disk 4 from post A to post B\nMove disk 1 from post C to post B\nMove disk 2 from post C to post A\nMove disk 1 from post B to post A\nMove disk 3 from post C to post B\nMove disk 1 from post A to post C\nMove disk 2 from post A to post B\nMove disk 1 from post C to post B\n```", "```js\n// continued...\nconst hanoi2 = (\n  disks: number,\n  from: Post,\n  to: Post,\n  extra: Post\n) => {\n  if (disks > 0) {\n    hanoi(disks - 1, from, extra, to);\n    console.log(\n      `Move disk ${disks} from post ${from} to post ${to}`\n    );\n    hanoi(disks - 1, extra, to, from);\n  }\n};\n```", "```js\n// quicksort.ts\nconst quicksort = <A>(arr: A[]): A[] => {\n  if (arr.length < 2) {\n    return arr;\n  } else {\n    const pivot = arr[0];\n    const smaller = arr.slice(1).filter((x) => x < pivot);\n    const greaterEqual = arr\n      .slice(1)\n      .filter((x) => x >= pivot);\n    return [\n      ...quicksort(smaller),\n      pivot,\n      ...quicksort(greaterEqual),\n    ];\n  }\n};\nconsole.log(quicksort([22, 9, 60, 12, 4, 56]));\n// [4, 9, 12, 22, 56, 60]\n```", "```js\n// makeChange.ts\nconst makeChange = (n: number, bills: number[]): number => {\n  if (n < 0) {\n    return 0; // no way of paying negative amounts\n  } else if (n == 0) {\n    return 1; // one single way of paying $0: with no bills\n  } else if (bills.length == 0) {\n    // here, n>0\n    return 0; // no bills? no way of paying\n  } else {\n    return (\n      makeChange(n, bills.slice(1)) +\n      makeChange(n - bills[0], bills)\n    );\n  }\n};\nconsole.log(makeChange(64, [100, 50, 20, 10, 5, 2, 1]));\n// 969 ways of paying $64\n```", "```js\n// continued...\nconst memoize4 = <T extends (...x: any[]) => any>(\n  fn: T\n): ((...x: Parameters<T>) => ReturnType<T>) => {\n  const cache = {} as Record<string, ReturnType<T>>;\n  return (...args) => {\n    const strX = JSON.stringify(args);\n    return strX in cache\n      ? cache[strX]\n      : (cache[strX] = fn(...args));\n  };\n};\nconst makeChange = memoize4((n, bills) => {\n// ...same as above\n});\n```", "```js\n// map.ts\nconst mapR = <A, B>(arr: A[], cb: (x: A) => B): B[] =>\n  arr.length === 0\n    ? []\n    : [cb(arr[0])].concat(mapR(arr.slice(1), cb));\n```", "```js\nconst aaa = [1, 2, 4, 5, 7];\nconst timesTen = (x: number): number => x * 10;\nconsole.log(aaa.map(timesTen));   // [10, 20, 40, 50, 70]\nconsole.log(mapR(aaa, timesTen)); // [10, 20, 40, 50, 70]\n```", "```js\nconst timesTenPlusI = (v: number, i: number) => 10 * v + i;\nconsole.log(aaa.map(timesTenPlusI)); // [10, 21, 42, 53,\n  74]\nconsole.log(mapR(aaa, timesTenPlusI));\n```", "```js\nArgument of type '(v: number, i: number) => number' is not assignable to parameter of type '(x: number) => number'.\n```", "```js\n// continued...\nconst mapR2 = <A, B>(\n  arr: A[],\n  cb: (x: A, i: number, arr: A[]) => B,\n  i = 0,\n  orig = arr\n): B[] =>\n  arr.length == 0\n    ? []\n    : [cb(arr[0], i, orig)].concat(\n        mapR2(arr.slice(1), cb, i + 1, orig)\n      );\nconst senseless = (\n  x: number,\n  i: number,\n  a: number[]\n): number => x * 10 + i + a[i] / 10;\nconsole.log(aaa.map(senseless));\n// [10.1, 21.2, 42.4, 53.5, 74.7]\nconsole.log(mapR2(aaa, senseless));\n// [10.1, 21.2, 42.4, 53.5, 74.7]\n```", "```js\n// continued...\nconst mapR3 = <A, B>(\n  orig: A[],\n  cb: (x: A, i: number, a: A[]) => B\n): B[] => {\n  const mapLoop = (arr: A[], i: number): B[] =>\n    arr.length == 0\n      ? []\n      : [cb(arr[0], i, orig)].concat(\n          mapLoop(arr.slice(1), i + 1)\n        );\n  return mapLoop(orig, 0);\n};\nconsole.log(mapR3(aaa, senseless));\n// [10.1, 21.2, 42.4, 53.5, 74.7], again\n```", "```js\n[1, 2, , , 5].map(tenTimes)\n// [10, 20, undefined × 2, 50]\n```", "```js\n// continued...\ntype Opt<X> = X | undefined;\nconst mapR4 = <A, B>(\n  orig: Opt<A>[],\n  cb: (x: A, i: number, a: Opt<A>[]) => B\n): Opt<B>[] => {\n  const mapLoop = (arr: Opt<A>[], i: number): Opt<B>[] =>\n    arr.length == 0\n      ? []\n      : !(0 in arr) || arr[0] === undefined\n      ? ([,] as Opt<B>[]).concat(\n          mapLoop(arr.slice(1), i + 1)\n        )\n      : ([cb(arr[0] as A, i, orig)] as Opt<B>[]).concat(\n          mapLoop(arr.slice(1), i + 1)\n        );\n  return mapLoop(orig, 0);\n};\n```", "```js\n// filter.ts\ntype Opt<X> = X | undefined;\nconst filterR = <A>(\n  orig: Opt<A>[],\n  cb: (x: A, i: number, a: Opt<A>[]) => boolean\n): A[] => {\n  const filterLoop = (arr: Opt<A>[], i: number): A[] =>\n    arr.length == 0\n      ? []\n      : !(0 in arr) ||\n        arr[0] === undefined ||\n        !cb(arr[0] as A, i, orig)\n      ? filterLoop(arr.slice(1), i + 1)\n      : ([arr[0]] as A[]).concat(\n          filterLoop(arr.slice(1), i + 1) as A[]\n        );\n  return filterLoop(orig, 0);\n};\n```", "```js\n// reduce.ts\nconst reduceR = <A, B>(\n  orig: A[],\n  cb: (acc: B, x: A, i: number, a: A[]) => B,\n  accum: B\n) => {\n  const reduceLoop = (arr: A[], accum: B, i: number): B =>\n    arr.length == 0\n      ? accum\n      : !(0 in arr) || arr[0] === undefined\n      ? reduceLoop(arr.slice(1), accum, i + 1)\n      : reduceLoop(\n          arr.slice(1),\n          cb(accum, arr[0], i, orig),\n          i + 1\n        );\n  return reduceLoop(orig, accum, 0);\n};\nlet bbb = [1, 2, , 5, 7, 8, 10, 21, 40];\nconsole.log(bbb.reduce((x, y) => x + y, 0));   // 94\nconsole.log(reduce2(bbb, (x, y) => x + y, 0)); // 94\n```", "```js\n// find.ts\nconst findR = <A>(\n  arr: A[],\n  cb: (x: A) => boolean\n): Opt<A> =>\n  arr.length === 0\n    ? undefined\n    : cb(arr[0])\n    ? arr[0]\n    : findR(arr.slice(1), cb);\n```", "```js\nlet aaa = [1, 12, , , 5, 22, 9, 60];\nconst isTwentySomething = x => 20 <= x && x <= 29; console.log(findR(aaa, isTwentySomething)); // 22\nconst isThirtySomething = x => 30 <= x && x <= 39; console.log(findR(aaa, isThirtySomething)); // undefined\n```", "```js\nfunction pipelineR<FNS extends FN[]>(\n  ...fns: FNS\n): Pipeline<FNS>;\nfunction pipelineR<FNS extends FN[]>(...fns: FNS): FN {\n  return fns.length === 1\n    ? fns[0]\n    : (...args) =>\n        pipelineR(...fns.slice(1))(fns[0](...args));\n}\n```", "```js\nconst plus1 = (x: number): number => x + 1;\nconst by10 = (x: number): number => x * 10;\npipelineR(\n  by10,\n  plus1,\n  plus1,\n  plus1,\n  by10,\n  plus1,\n  by10,\n  by10,\n  plus1,\n  plus1,\n  plus1\n)(2);\n// 23103\n```", "```js\n// continued...\nfunction pipelineR2<FNS extends FN[]>(\n  ...fns: FNS\n): Pipeline<FNS>;\nfunction pipelineR2<FNS extends FN[]>(...fns: FNS): FN {\n  return fns.length === 0\n    ? (...args) => args[0]\n    : (...args) =>\n        pipelineR2(...fns.slice(1))(fns[0](...args));\n}\n```", "```js\n// queens.ts\nconst SIZE = 8;\nconst places = Array(SIZE);\nlet solutions = 0;\nfinder();\nconsole.log(`Solutions found: ${solutions}`);\n```", "```js\n// continued...\nconst checkPlace = (column: number, row: number): boolean =>\n  places\n    .slice(0, column)\n    .every(\n      (v, i) =>\n        v !== row && Math.abs(v - row) !== column - i\n    );\n```", "```js\n// continued...\nconst checkR = (column: number, row: number): boolean => {\n  const checkColumn = (i: number): boolean => {\n    if (i == column) {\n      return true;\n    } else if (\n      places[i] == row ||\n      Math.abs(places[i] - row) == column - i\n    ) {\n      return false;\n    } else {\n      return checkColumn(i + 1);\n    }\n  };\n  return checkColumn(0);\n};\n```", "```js\n// continued...\nconst finder = (column = 0) => {\n  if (column === SIZE) {\n    // all columns tried out?\n    // if so, print and count solution\n    console.log(JSON.stringify(places.map((x) => x + 1)));\n    solutions++;\n  } else {\n    const testRowsInColumn = (j: number) => {\n      if (j < SIZE) {\n        if (checkR(column, j)) {\n          places[column] = j;\n          finder(column + 1);\n        }\n        testRowsInColumn(j + 1);\n      }\n    };\n    testRowsInColumn(0);\n  }\n};\n```", "```js\n[1,5,8,6,3,7,2,4]\n[1,6,8,3,7,4,2,5]\n[1,7,4,6,8,2,5,3]\n[1,7,5,8,2,4,6,3]\n[2,4,6,8,3,1,7,5]\n[2,5,7,1,3,8,6,4]\n[2,5,7,4,1,8,6,3]\n[2,6,1,7,4,8,3,5]\n   ...\n   ... 70 lines snipped out\n   ...\n[8,2,4,1,7,5,3,6]\n[8,2,5,3,1,7,4,6]\n[8,3,1,6,2,5,7,4]\n[8,4,1,3,6,2,7,5]\nSolutions found: 92\n```", "```js\n// directory.ts\nimport * as fs from \"fs\";\nconst recursiveDir = (path: string) => {\n  console.log(path);\n  fs.readdirSync(path).forEach((entry) => {\n    if (entry.startsWith(\".\")) {\n      // skip it!\n    } else {\n      const full = path + \"/\" + entry;\n      const stats = fs.lstatSync(full);\n      if (stats.isSymbolicLink()) {\n        console.log(\"L \", full); // symlink, don't follow\n      } else if (stats.isDirectory()) {\n        console.log(\"D \", full);\n        recursiveDir(full);\n      } else {\n        console.log(\"  \", full);\n      }\n    }\n  });\n};\n```", "```js\nrecursiveDir(\"/boot\");\n/boot\n/boot/System.map-4.11.8-1-default\n/boot/boot.readme\n/boot/config-4.11.8-1-default D  /boot/efi\nD    /boot/efi/EFI\nD    /boot/efi/EFI/boot\n/boot/efi/EFI/boot/bootx64.efi\n/boot/efi/EFI/boot/fallback.efi\n...\n... many omitted lines\n...\nL    /boot/initrd\n/boot/initrd-4.11.8-1-default\n/boot/message\n/boot/symtypes-4.11.8-1-default.gz\n/boot/symvers-4.11.8-1-default.gz\n/boot/sysctl.conf-4.11.8-1-default\n/boot/vmlinux-4.11.8-1-default.gz  L  /boot/vmlinuz\n/boot/vmlinuz-4.11.8-1-default\n```", "```js\n// dom.ts\nconst traverseDom = (node: Element, depth = 0) => {\n  console.log(\n    `${\"| \".repeat(depth)}<${node.nodeName.toLowerCase()}>`\n  );\n  for (let i = 0; i < node.children.length; i++) {\n    traverseDom(node.children[i], depth + 1);\n  }\n};\n```", "```js\ntraverseDom(document.body);\n<body>\n| <script>\n| <div>\n| | <div>\n| | | <a>\n| | | <div>\n| | | | <ul>\n| | | | | <li>\n| | | | | | <a>\n| | | | | | | <div>\n| | | | | | | | <div>\n| | | | | | | <div>\n| | | | | | | | <br>\n| | | | | | | <div>\n| | | | | | <ul>\n| | | | | | | <li>\n| | | | | | | | <a>\n| | | | | | | <li>\n...etc.!\n```", "```js\n// continued...\nconst traverseDom2 = (node: Element, depth = 0) => {\n  console.log(\n    `${\"| \".repeat(depth)}<${node.nodeName.toLowerCase()}>`\n  );\n  Array.from(node.children).forEach((child) =>\n    traverseDom2(child, depth + 1)\n  );\n};\n```", "```js\nfunction isEven(n: number): boolean {\n  if (n === 0) {\n    return true;\n  } else {\n    return isOdd(n - 1);\n  }\n}\nfunction isOdd(n: number): boolean {\n  return !isEven(n);\n}\nconsole.log(\"22.. isEven?\", isEven(22));\nconsole.log(\"9... isOdd?\", isOdd(5));\nconsole.log(\"60... isOdd?\", isOdd(10));\n```", "```js\nis 9 odd?\nIs 9 not even?\nIs 8 odd?\nIs 8 not even?\nIs 7 odd?\nIs 7 not even?\n   ...\n   ... several lines skipped\n   ...\nIs 1 odd?\nIs 1 not even?\nIs 0 odd?\nIs 0 not even?\n```", "```js\n// continued…\nfunction isEven2(n: number): boolean {\n  if (n === 0) {\n    return true;\n  } else {\n    return !isEven2(n - 1);\n  }\n}\nfunction isOdd2(n: number): boolean {\n  return !isEven2(n);\n}\n```", "```js\n// continued...\nfunction isEven3(n: number): boolean {\n  if (n === 0) {\n    return true;\n  } else {\n    return isOdd3(n - 1);\n  }\n}\nfunction isOdd3(n: number): boolean {\n  if (n === 0) {\n    return false;\n  } else {\n    return isEven3(n - 1);\n  }\n}\n```", "```js\nfunction evaluate(str: string) {\n  const PLUS = \"+\";\n  const MINUS = \"-\";\n  const TIMES = \"*\";\n  const DIVIDES = \"/\";\n  const MODULUS = \"%\";\n  const LPARENS = \"(\";\n  const RPARENS = \")\";\n  let curr = 0;\n  const tokens = str\n    .split(\"\")\n    .map((x) => (Number.isNaN(Number(x)) ? x : Number(x)));\n  return expression();\n  function expression(): number { ... }\n  function term(): number { ... }\n  function factor(): number { ... }\n}\n```", "```js\n  function expression(): number {\n  let accum = term();\n  while (\n    tokens[curr] === PLUS ||\n    tokens[curr] === MINUS\n  ) {\n    if (tokens[curr] === PLUS) {\n      curr++;\n      accum += term();\n    } else if (tokens[curr] === MINUS) {\n      curr++;\n      accum -= term();\n    }\n  }\n  return accum;\n}\n```", "```js\nfunction term(): number {\n  let accum = factor();\n  while (\n    tokens[curr] === TIMES ||\n    tokens[curr] === DIVIDES ||\n    tokens[curr] === MODULUS\n  ) {\n    if (tokens[curr] === TIMES) {\n      curr++;\n      accum *= factor();\n    } else if (tokens[curr] === DIVIDES) {\n      curr++;\n      accum /= factor();\n    } else if (tokens[curr] === MODULUS) {\n      curr++;\n      accum %= factor();\n    }\n  }\n  return accum;\n}\n```", "```js\nfunction factor(): number {\n  let mult = 1;\n  if (tokens[curr] === MINUS) {\n    mult = -1;\n    curr++; // skip MINUS\n  }\n  let result = 0;\n  if (tokens[curr] === LPARENS) {\n    curr++; // skip LPARENS\n    result = expression();\n    curr++; // skip RPARENS\n  } else {\n    result = tokens[curr] as number;\n    curr++;\n  }\n  return mult * result;\n}\n```", "```js\n// tailRecursion.ts\nfunction detectTCO() {\n  const outerStackLen = new Error().stack!.length;\n  return (function inner() {\n    const innerStackLen = new Error().stack!.length;\n    return innerStackLen <= outerStackLen;\n  })();\n}\n```", "```js\nError\nat inner (<anonymous>:6:13)\nat detectTCO (<anonymous>:9:6) at <anonymous>:1:1\n```", "```js\n// continued...\nfunction justLoop(n: number): void {\n  n && justLoop(n - 1); // until n is zero\n}\n```", "```js\nfunction fact(n: number): number {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * fact(n - 1);\n  }\n}\n```", "```js\nfunction fact2(n: number): number {\n  if (n === 0) {\n    return 1;\n  } else {\n    const aux = fact2(n - 1);\n    return n * aux;\n  }\n}\n```", "```js\nfunction getTime(): string {\n  return new Date().toTimeString();\n}\nconsole.log(getTime()); // \"21:00:24 GMT+0530 (IST)\"\n```", "```js\nfunction getTime2(cont: FN) {\n  return cont(new Date().toTimeString());\n}\ngetTime2(console.log); // similar result as above\n```", "```js\nfunction fact2(n: number): number {\n  if (n === 0) {\n    return 1;\n  } else {\n    const aux = fact2(n - 1);\n    return n * aux;\n  }\n}\n```", "```js\n// continued...\nfunction factC(\n  n: number,\n  cont: (x: number) => number\n): number {\n  if (n === 0) {\n    return cont(1);\n  } else {\n    return factC(n - 1, (x) => cont(n * x));\n  }\n}\n```", "```js\nconsole.log(factC(7, x => x)); // 5040, correctly\nfactC(7, console.log);         // same result\n```", "```js\n// continued...\nconst fibC = (n: number, cont: FN): number => {\n  if (n <= 1) {\n    return cont(n);\n  } else {\n    return fibC(n - 2, (p) =>\n      fibC(n - 1, (q) => cont(p + q))\n    );\n  }\n};\n```", "```js\n<body>\n| <script>\n| <div>\n| | <div>\n| | | <a>\n| | | <div>\n| | | | <ul>\n| | | | | <li>\n| | | | | | <a>\n| | | | | | | <div>\n| | | | | | | | <div>\n| | | | | | | <div>\n| | | | | | | | <br>\n| | | | | | | <div>\n| | | | | | <ul>\n| | | | | | | <li>\n| | | | | | | | <a>\n| | | | | | | <li>\n...etc.!\n```", "```js\n// dom.ts\nconst traverseDom2 = (node: Element, depth = 0) => {\n  console.log(\n    `${\"| \".repeat(depth)}<${node.nodeName.toLowerCase()}>`\n  );\n  Array.from(node.children).forEach((child) =>\n    traverseDom2(child, depth + 1)\n  );\n};\n```", "```js\n// continued...\nconst traverseDom3 = (node: Element, depth = 0): void => {\n  console.log(\n    `${\"| \".repeat(depth)}<${node.nodeName.toLowerCase()}>`\n  );\n  const traverseChildren = (\n    children: Element[],\n    i = 0\n  ): void => {\n    if (i < children.length) {\n      traverseDom3(children[i], depth + 1);\n      return traverseChildren(children, i + 1); // loop\n    }\n    return;\n  };\n  return traverseChildren(Array.from(node.children));\n};\n```", "```js\n// continued...\nconst traverseDom3C = (\n  node: Element,\n  depth = 0,\n  cont: FN = () => {\n    /*  nothing */\n  }\n): void => {\n  console.log(\n    `${\"| \".repeat(depth)}<${node.nodeName.toLowerCase()}>`\n  );\n  const traverseChildren = (\n    children: Element[],\n    i = 0\n  ): void => {\n    if (i < children.length) {\n      return traverseDom3C(children[i], depth + 1, () =>\n        traverseChildren(children, i + 1)\n      );\n    }\n    return cont();\n  };\n  return traverseChildren(Array.from(node.children));\n};\n```", "```js\n// trampoline.ts\nconst getIsoDT = () => new Date().toISOString(); // a thunk\nconst isoDT = getIsoDT(); // getting the thunk's value\n```", "```js\n// continued...\nconst trampoline = (fn: FN): any => {\n  while (typeof fn === \"function\") {\n    fn = fn();\n  }\n  return fn;\n};\n```", "```js\n// continued...\nconst sumAll = (n: number): number =>\n  n == 0 ? 0 : n + sumAll(n - 1);\n```", "```js\nconsole.log(sumAll(10));\nconsole.log(sumAll(100));\nconsole.log(sumAll(1_000));\nconsole.log(sumAll(10_000));\nconsole.log(sumAll(100_000));\n// Output:\n55\n5050\n500500\n50005000\nRangeError: Maximum call stack size exceeded\n```", "```js\n// continued...\nconst sumAllC = (n: number, cont: FN): number =>\n  n === 0 ? cont(0) : sumAllC(n - 1, (v) => cont(v + n));\n```", "```js\n// continued...\nconst sumAllT = (n: number, cont: FN): (() => number) =>\n  n === 0\n    ? () => cont(0)\n    : () => sumAllT(n - 1, (v) => () => cont(v + n));\n```", "```js\n// continued...\nconst sumAll2 = n => trampoline(sumAllT(n, x => x));\nconsole.log(sumAll2(1_000_000)); // no problem now!\n```", "```js\nconst sumAll3 = (n: number): number => {\n  const sumAllT = (n: number, cont: FN) =>\n    n === 0\n      ? () => cont(0)\n      : () => sumAllT(n - 1, (v) => () => cont(v + n));\n  return trampoline(sumAllT(n, (x) => x));\n};\nconsole.log(sumAll3(1_000_000)); // no stack crash\n```", "```js\n// continued...\nclass Thunk {\n  fn: FN;\n  constructor(fn: FN) {\n    this.fn = fn;\n  }\n}\nconst trampoline2 = (thk: Thunk) => {\n  while (\n    typeof thk === \"object\" &&\n    thk.constructor.name === \"Thunk\"\n  ) {\n    thk = thk.fn();\n  }\n  return thk;\n};\n```", "```js\nconst quicksort = <A>(arr: A[]): A[] => {\n  if (arr.length < 2) {\n    return arr;\n  } else {\n    const pivot = arr[0];\n    const smaller = arr.filter((x) => x < pivot);\n    const greaterEqual = arr.filter((x) => x >= pivot);\n    return [\n      ...quicksort(smaller),\n      ...quicksort(greaterEqual),\n    ];\n  }\n};\n```", "```js\nconst partition = <A>(\n  arr: A[],\n  fn: (x: A) => boolean\n): [A[], A[]] => { … };\nconst quicksort = <A>(arr: A[]): A[] => {\n  if (arr.length < 2) {\n    return arr;\n  } else {\n    const pivot = arr[0];\n    const [smaller, greaterEqual] = partition(\n      arr.slice(1),\n      (x) => x < pivot\n    );\n    return [\n      ...quicksort(smaller),\n      pivot,\n      ...quicksort(greaterEqual),\n    ];\n  }\n};\n```", "```js\nfunction isEven(n: number): boolean {\n  if (n === 0) {\n    return true;\n  } else {\n    return isOdd(n - 1);\n  }\n}\nfunction isOdd(n: number): boolean {\n  if (n === 1) {\n    return true;\n  } else {\n    return isEven(n - 1);\n  }\n}\n```", "```js\nfunction expression(): number {\n  for (let accum = term(); ; ) {\n    if (tokens[curr] === PLUS) {\n      curr++; // skip PLUS\n      accum += term();\n    } else if (tokens[curr] === MINUS) {\n      curr++; // skip MINUS\n      accum -= term();\n    } else {\n      return accum;\n    }\n  }\n}\nfunction term(): number {\n  for (let accum = factor(); ; ) {\n    if (tokens[curr] === TIMES) {\n      curr++; // skip TIMES\n      accum *= factor();\n    } else if (tokens[curr] === DIVIDES) {\n      curr++; // skip DIVIDES\n      accum /= factor();\n    } else if (tokens[curr] === MODULUS) {\n      curr++; // skip MODULUS\n      accum %= factor();\n    } else {\n      return accum;\n    }\n  }\n}\n```"]