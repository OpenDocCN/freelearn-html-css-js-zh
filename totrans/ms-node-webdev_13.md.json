["```js\ndocument.addEventListener('DOMContentLoaded', () => {\n    // do nothing\n}); \n```", "```js\nimport { createServer } from \"http\";\nimport express, {Express } from \"express\";\nimport httpProxy from \"http-proxy\";\nimport helmet from \"helmet\";\nimport { engine } from \"express-handlebars\";\nimport { registerFormMiddleware, registerFormRoutes } from \"./forms\";\nconst port = 5000;\nconst expressApp: Express = express();\nconst proxy = httpProxy.createProxyServer({\n    target: \"http://localhost:5100\", ws: true\n});\nexpressApp.set(\"views\", \"templates/server\");\nexpressApp.engine(\"handlebars\", engine());\nexpressApp.set(\"view engine\", \"handlebars\");\nexpressApp.use(helmet());\nexpressApp.use(express.json());\nregisterFormMiddleware(expressApp);\nregisterFormRoutes(expressApp);\nexpressApp.use(\"^/$\", (req, resp) => resp.redirect(\"/form\"));\nexpressApp.use(express.static(\"static\"));\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\nexpressApp.use((req, resp) => proxy.web(req, resp));\nconst server = createServer(expressApp);\nserver.on('upgrade', (req, socket, head) => proxy.ws(req, socket, head));\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\n...\nexpressApp.use(**\"^/$\"**, (req, resp) => resp.redirect(\"/form\"));\n... \n```", "```js\n<div class=\"container fluid\">\n    <div class=\"row\">\n        <div class=\"col-7\">\n            {{#if name}}\n                <div class=\"m-2\">\n                    <h4>Hello {{ name }}. You will be {{ nextage }}\n                        in {{ years }} years.</h4>\n                </div>\n            {{/if}}\n            <div>\n                <form id=\"age_form\" action=\"/form\" method=\"post\">\n                    <div class=\"m-2\">\n                        <label class=\"form-label\">Name</label>\n                        <input name=\"name\" class=\"form-control\"\n                            value=\"{{ name }}\"/>\n                    </div>\n                    <div class=\"m-2\">\n                        <label class=\"form-label\">Current Age</label>\n                        <input name=\"age\" class=\"form-control\"\n                            value=\"{{ age }}\" />\n                    </div>                  \n                    <div class=\"m-2\">\n                        <label class=\"form-label\">Number of Years</label>\n                        <input name=\"years\" class=\"form-control\"\n                            value=\"{{ years }}\" />         \n                    </div>                          \n                    <div class=\"m-2\">\n                        <button class=\"btn btn-primary\">Submit</button>                               \n                    </div>\n                </form>\n            </div>\n        </div>\n        <div class=\"col-5\">\n            {{> history }}\n        </div>\n    </div>\n</div> \n```", "```js\n<h4>Recent Queries</h4>\n<table class=\"table table-sm table-striped my-2\">\n    <thead>\n        <tr>\n            <th>Name</th><th>Age</th><th>Years</th><th>Result</th>\n        </tr>\n    </thead>\n    <tbody>\n        {{#unless history }}\n            <tr><td colspan=\"4\">No data available</td></tr>\n        {{/unless }}\n    </tbody>\n</table> \n```", "```js\nimport express, { Express } from \"express\";\nexport const registerFormMiddleware = (app: Express) => {\n    app.use(express.urlencoded({extended: true}))\n}\nexport const registerFormRoutes = (app: Express) => {\n    app.get(\"/form\", (req, resp) => {\n        resp.render(\"age\");\n    });\n    app.post(\"/form\", (req, resp) => {\n        const nextage = Number.parseInt(req.body.age)\n            + Number.parseInt(req.body.years);\n        const context = {\n            ...req.body, nextage\n        };\n        resp.render(\"age\", context);  \n    });\n} \n```", "```js\nnpm start \n```", "```js\nnpm install sqlite3@5.1.6 \n```", "```js\nDROP TABLE IF EXISTS Results;\nDROP TABLE IF EXISTS Calculations;\nDROP TABLE IF EXISTS People;\nCREATE TABLE IF NOT EXISTS `Calculations` (\n    id INTEGER PRIMARY KEY AUTOINCREMENT, `age` INTEGER,\n    years INTEGER, `nextage` INTEGER);\nCREATE TABLE IF NOT EXISTS `People` (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name VARCHAR(255));\nCREATE TABLE IF NOT EXISTS `Results` (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    calculationId INTEGER REFERENCES `Calculations` (`id`)\n        ON DELETE CASCADE ON UPDATE CASCADE,\n    personId INTEGER REFERENCES `People` (`id`)\n        ON DELETE CASCADE ON UPDATE CASCADE);\nINSERT INTO Calculations (id, age, years, nextage) VALUES\n    (1, 35, 5, 40), (2, 35, 10, 45);\nINSERT INTO People (id, name) VALUES\n    (1, 'Alice'), (2, \"Bob\");\n\nINSERT INTO Results (calculationId, personId) VALUES\n    (1, 1), (2, 2), (2, 1); \n```", "```js\nexport interface Result {\n    id: number,\n    name: string,\n    age: number,\n    years: number,\n    nextage: number\n}\nexport interface Repository {\n    saveResult(r: Result):  Promise<number>;\n    getAllResults(limit: number) : Promise<Result[]>;\n    getResultsByName(name: string, limit: number): Promise<Result[]>;\n} \n```", "```js\nimport { readFileSync } from \"fs\";\nimport { Database } from \"sqlite3\";\nimport { Repository, Result } from \"./repository\";\nexport class SqlRepository implements Repository {\n    db: Database;\n    constructor() {\n        this.db = new Database(\"age.db\");\n        this.db.exec(readFileSync(\"age.sql\").toString(), err => {\n            if (err != undefined) throw err;\n        });\n    }\n    saveResult(r: Result): Promise<number> {\n        throw new Error(\"Method not implemented.\");\n    }\n    getAllResults($limit: number): Promise<Result[]> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getResultsByName($name: string, $limit: number): Promise<Result[]> {\n        throw new Error(\"Method not implemented.\");\n    }\n} \n```", "```js\nimport { Repository } from \"./repository\";\nimport { SqlRepository } from \"./sql_repository\";\nconst repository: Repository = new SqlRepository();\nexport default repository; \n```", "```js\nconst baseSql = `\n    SELECT Results.*, name, age, years, nextage FROM Results\n    INNER JOIN People ON personId = People.id\n    INNER JOIN Calculations ON calculationId = Calculations.id`;\nconst endSql = `ORDER BY id DESC LIMIT $limit`;\nexport const queryAllSql = `${baseSql} ${endSql}`;\nexport const queryByNameSql = `${baseSql} WHERE name = $name ${endSql}`; \n```", "```js\n...\nSELECT Results.*, name, age, years, nextage FROM Results\n    INNER JOIN People ON personId = People.id\n    INNER JOIN Calculations ON calculationId = Calculations.id\n    WHERE name = $name\n    ORDER BY id DESC LIMIT $limit\n... \n```", "```js\n...\n{\n    id: 1,\n    calculationId: 1,\n    personId: 1,\n    name: \"Alice\",\n    age: 35,\n    years: 5,\n    nextage: 40\n}\n... \n```", "```js\nimport { readFileSync } from \"fs\";\nimport { Database } from \"sqlite3\";\nimport { Repository, Result } from \"./repository\";\n**import { queryAllSql, queryByNameSql } from** **\"./sql_queries\";**\nexport class SqlRepository implements Repository {\n    db: Database;\n    constructor() {\n        this.db = new Database(\"age.db\");\n        this.db.exec(readFileSync(\"age.sql\").toString(), err => {\n            if (err != undefined) throw err;\n        });\n    }\n    saveResult(r: Result): Promise<number> {\n        throw new Error(\"Method not implemented.\");\n    }\n    getAllResults($limit: number): Promise<Result[]> {\n       ** return this.executeQuery(queryAllSql, { $limit });**\n    }\n\n    getResultsByName($name: string, $limit: number): Promise<Result[]> {\n       ** return this.executeQuery(queryByNameSql, { $name, $limit });**\n    }\n   **executeQuery(sql: string, params: any) : Promise<Result[]> {**\n **return new Promise<Result[]>((resolve, reject****) => {**\n **this.db.all<Result>(sql, params, (err, rows) => {**\n **if (err == undefined) {**\n **resolve(rows);**\n **}** **else {**\n **reject(err);**\n **}**\n **})**\n **});**\n **}**\n} \n```", "```js\n`run(sql, params, cb)` \n```", "```js\n`get<T>(sql, params, cb)` \n```", "```js\n`all<T>(sql, params, cb)` \n```", "```js\n`prepare(sql)` \n```", "```js\nimport express, { Express } from \"express\";\n**import repository  from \"./data\";**\n**const** **rowLimit = 10;**\nexport const registerFormMiddleware = (app: Express) => {\n    app.use(express.urlencoded({extended: true}))\n}\nexport const registerFormRoutes = (app: Express) => {\n    **app.get(\"/form\", async (req, resp) => {**\n        resp.render(\"age\", {\n           ** history: await repository.getAllResults(rowLimit)**\n        });\n    });\n    **app.post(\"/form\", async (req, resp) => {**\n        const nextage = Number.parseInt(req.body.age)\n            + Number.parseInt(req.body.years);\n        const context = {\n            ...req.body, nextage,\n         **   history****: await repository.getResultsByName(**\n **req.body.name, rowLimit)**\n        };\n        resp.render(\"age\", context);  \n    });\n} \n```", "```js\n<h4>Recent Queries</h4>\n<table class=\"table table-sm table-striped my-2\">\n    <thead>\n        <tr>\n            <th>Name</th><th>Age</th><th>Years</th><th>Result</th>\n        </tr>\n    </thead>\n    <tbody>\n        {{#unless history }}\n            <tr><td colspan=\"4\">No data available</td></tr>\n        {{/unless }}\n        **{{#each history }}**\n**<tr>**\n **<td>{{ this.name }} </td>**\n **<td>{{ this.age }} </td>**\n**<td>{{ this.years }} </td>**\n **<td>{{ this.nextage }} </td>**\n **</tr>**\n **{{/each }}**\n    </tbody>\n</table> \n```", "```js\n...\ngetResultsByName($name: string, $limit: number): Promise<Result[]> {\n    **return this.executeQuery****(`**\n **SELECT Results.*, name, age, years, nextage FROM Results**\n **INNER JOIN People ON personId = People.id**\n **INNER JOIN Calculations ON calculationId = Calculations.id**\n **WHERE name = \"${$name}\"`, {});**\n}\n... \n```", "```js\n...\nSELECT Results.*, name, age, years, nextage FROM Results\n        INNER JOIN People ON personId = People.id\n        INNER JOIN Calculations ON calculationId = Calculations.id\n        WHERE name = \"Alice\"\n... \n```", "```js\n...\nSELECT Results.*, name, age, years, nextage FROM Results\n        INNER JOIN People ON personId = People.id\n        INNER JOIN Calculations ON calculationId = Calculations.id\n        WHERE name = \"Alice\" OR name = \"Bob\"\n... \n```", "```js\n...\nexport const queryByNameSql = `${baseSql} WHERE name = **$name** ${endSql}`;\n... \n```", "```js\n...\nSELECT Results.*, name, age, years, nextage FROM Results\n    INNER JOIN People ON personId = People.id\n    INNER JOIN Calculations ON calculationId = Calculations.id\n    WHERE name = **$name** ORDER BY id DESC LIMIT **$limit**\n... \n```", "```js\n...\nexecuteQuery(sql: string, **params**: any) : Promise<Result[]> {\n    return new Promise<Result[]>((resolve, reject) => {\n        this.db.all<RowResult>(sql, **params**, (err, rows) => {\n            if (err == undefined) {\n                resolve(rowsToObjects(rows));\n            } else {\n                reject(err);\n            }\n        })\n    });\n}\n... \n```", "```js\n...\ngetResultsByName($name: string, $limit: number): Promise<Result[]> {\n    **return this.executeQuery(queryByNameSql, { $name, $limit });**\n}\n... \n```", "```js\n...\nconst context = {\n    ...req.body, nextage,\n    history: await repository.getResultsByName(**req.body.name**, rowLimit)\n};\n... \n```", "```js\nconst baseSql = `\n    SELECT Results.*, name, age, years, nextage FROM Results\n    INNER JOIN People ON personId = People.id\n    INNER JOIN Calculations ON calculationId = Calculations.id`;\nconst endSql = `ORDER BY id DESC LIMIT $limit`;\nexport const queryAllSql = `${baseSql} ${endSql}`;\nexport const queryByNameSql = `${baseSql} WHERE name = $name ${endSql}`;\n**export const insertPerson = `**\n **INSERT INTO People (name)**\n **SELECT $name**\n **WHERE NOT EXISTS (SELECT name FROM People WHERE name = $name)`;**\n**export const insertCalculation = `**\n **INSERT INTO Calculations (age, years, nextage)**\n **SELECT $age, $years, $nextage**\n **WHERE NOT EXISTS**\n **(SELECT age, years, nextage FROM Calculations**\n **WHERE age = $age AND years = $years AND nextage = $nextage)`;**\n**export const** **insertResult = `**\n **INSERT INTO Results (personId, calculationId)**\n **SELECT People.id as personId, Calculations.id as calculationId from People**\n **CROSS JOIN Calculations**\n **WHERE People.name = $name**\n **AND Calculations.age = $age**\n **AND Calculations.years = $years**\n **AND Calculations.nextage = $nextage`;** \n```", "```js\nimport { Database } from \"sqlite3\";\nexport class TransactionHelper {\n    steps: [sql: string, params: any][] = [];\n    add(sql: string, params: any): TransactionHelper {\n        this.steps.push([sql, params]);\n        return this;\n    }\n    run(db: Database): Promise<number> {\n        return new Promise((resolve, reject) => {\n            let index = 0;\n            let lastRow: number = NaN;\n            const cb = (err: any, rowID?: number) => {\n                if (err) {\n                    db.run(\"ROLLBACK\", () => reject());\n                } else {\n                    lastRow = rowID ? rowID : lastRow;\n                    if (++index === this.steps.length) {\n                        db.run(\"COMMIT\", () => resolve(lastRow));\n                    } else {\n                        this.runStep(index, db, cb);\n                    }\n                }\n            }\n            db.run(\"BEGIN\", () => this.runStep(0, db, cb));\n        }); \n    }\n    runStep(idx: number, db: Database, cb: (err: any, row: number) => void) {\n        const [sql, params] = this.steps[idx];\n        db.run(sql, params, function (err: any) {\n            cb(err, this.lastID)\n        });\n    }\n} \n```", "```js\nimport { readFileSync } from \"fs\";\nimport { Database } from \"sqlite3\";\nimport { Repository, Result } from \"./repository\";\n**import { queryAllSql, queryByNameSql,**\n **insertPerson, insertCalculation, insertResult } from \"./sql_queries\";**\n**import { TransactionHelper } from \"./sql_helpers\";**\nexport class SqlRepository implements Repository {\n    db: Database;\n    constructor() {\n        this.db = new Database(\"age.db\");\n        this.db.exec(readFileSync(\"age.sql\").toString(), err => {\n            if (err != undefined) throw err;\n        });\n    }\n    async saveResult(r: Result): Promise<number> {\n       ** return await new** **TransactionHelper()**\n **.add(insertPerson, { $name: r.name })**\n **.add(insertCalculation, {**\n **$age: r.age, $years: r.years, $nextage****: r.nextage**\n **})**\n **.add(insertResult, {**\n **$name: r.name,**\n **$age: r.age, $years: r.years, $nextage: r.nextage**\n **})**\n **.run(this.db);** \n    }\n    getAllResults($limit: number): Promise<Result[]> {\n        return this.executeQuery(queryAllSql, { $limit });\n    }\n\n    getResultsByName($name: string, $limit: number): Promise<Result[]> {\n        return this.executeQuery(queryByNameSql, { $name, $limit });\n    }\n    executeQuery(sql: string, params: any) : Promise<Result[]> {\n        return new Promise<Result[]>((resolve, reject) => {\n            this.db.all<Result>(sql, params, (err, rows) => {\n                if (err == undefined) {\n                    resolve(rows);\n                } else {\n                    reject(err);\n                }\n            })\n        });\n    }\n} \n```", "```js\nimport express, { Express } from \"express\";\nimport repository  from \"./data\";\nconst rowLimit = 10;\nexport const registerFormMiddleware = (app: Express) => {\n    app.use(express.urlencoded({extended: true}))\n}\nexport const registerFormRoutes = (app: Express) => {\n    app.get(\"/form\", async (req, resp) => {\n        resp.render(\"age\", {\n            history: await repository.getAllResults(rowLimit)\n        });\n    });\n    app.post(\"/form\", async (req, resp) => {\n        const nextage = Number.parseInt(req.body.age)\n            + Number.parseInt(req.body.years);\n **await repository.saveResult({...req.body, nextage });**\n        const context = {\n            ...req.body, nextage,\n            history: await repository.getResultsByName(\n                req.body.name, rowLimit)\n        };\n        resp.render(\"age\", context);  \n    });\n} \n```", "```js\nnpm install sequelize@6.35.1 \n```", "```js\n**import { Model, CreationOptional, ForeignKey, InferAttributes,**\n **InferCreationAttributes  }** **from \"sequelize\";**\n**export class Person extends Model<InferAttributes<Person>,**\n **InferCreationAttributes<****Person>> {**\n **declare id?: CreationOptional<number>;**\n **declare name: string**\n**}**\n**export class Calculation extends Model<InferAttributes<Calculation>,**\n**InferCreationAttributes<Calculation>> {**\n **declare id?: CreationOptional<number>;** \n **declare age: number;**\n **declare years: number;**\n **declare nextage: number;**\n**}**\n**export class ResultModel extends** **Model<InferAttributes<ResultModel>,**\n **InferCreationAttributes<ResultModel>> {**\n **declare id: CreationOptional<number>;** \n **declare personId: ForeignKey<Person[\"****id\"]>;**\n **declare calculationId: ForeignKey<Calculation[\"id\"]>;**\n **declare Person?: InferAttributes<Person>;**\n **declare Calculation?: InferAttributes<****Calculation>;**\n**}** \n```", "```js\n...\nexport class Person extends Model<InferAttributes<Person>,\n        InferCreationAttributes<Person>> {\n    declare id?: CreationOptional<number>;\n    **declare name: string**\n}\n... \n```", "```js\n...\n**export class Person extends Model****<InferAttributes<Person>,**\n **InferCreationAttributes<Person>> {**\ndeclare id?: CreationOptional<number>;\n    declare name: string\n}\n... \n```", "```js\n...\n**export class Person extends Model<InferAttributes<Person****>,**\n **InferCreationAttributes<Person>> {**\n    declare id?: CreationOptional<number>;\n    declare name: string\n}\n... \n```", "```js\n...\nexport class ResultModel extends Model<InferAttributes<ResultModel>,\n        InferCreationAttributes<ResultModel>> {\n    declare id: CreationOptional<number>;          \n **declare personId: ForeignKey<Person[\"id\"]>;**\n **declare calculationId: ForeignKey<Calculation[\"id\"]>;**\n **declare Person?: InferAttributes<Person>;**\n **declare Calculation?: InferAttributes<Calculation>;**\n}\n... \n```", "```js\nimport { DataTypes, Sequelize } from \"sequelize\";\nimport { Calculation, Person, ResultModel } from \"./orm_models\";\nconst primaryKey = {\n    id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n    }       \n};\nexport const initializeModels = (sequelize: Sequelize) => {\n    Person.init({\n        ...primaryKey,\n        name: { type: DataTypes.STRING }\n    }, { sequelize });\n    Calculation.init({\n        ...primaryKey,\n        age: { type: DataTypes.INTEGER},\n        years: { type: DataTypes.INTEGER},\n        nextage: { type: DataTypes.INTEGER},\n    }, { sequelize });\n    ResultModel.init({\n        ...primaryKey,\n    }, { sequelize });\n} \n```", "```js\nimport { DataTypes, Sequelize } from \"sequelize\";\nimport { Calculation, Person, ResultModel } from \"./orm_models\";\nconst primaryKey = {\n    id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n    }       \n};\nexport const initializeModels = (sequelize: Sequelize) => {\n    // ...statements omitted for brevity...\n}\n**export const defineRelationships = () => {**\n **ResultModel.belongsTo(Person, { foreignKey: \"personId\" });**\n **ResultModel.belongsTo****(Calculation, { foreignKey: \"calculationId\"});**\n**}** \n```", "```js\n`hasOne(T, options)` \n```", "```js\n`belongsTo(T, options)` \n```", "```js\n`hasMany(T, options)` \n```", "```js\n`belongsToMany(T, options)` \n```", "```js\nimport { DataTypes, Sequelize } from \"sequelize\";\nimport { Calculation, Person, ResultModel } from \"./orm_models\";\nimport { Result } from \"./repository\";\nconst primaryKey = {\n    id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n    }       \n};\n// ...statements omitted for brevity...\nexport const defineRelationships = () => {\n    ResultModel.belongsTo(Person, { foreignKey: \"personId\" });\n    ResultModel.belongsTo(Calculation, { foreignKey: \"calculationId\"});\n}\n**export const addSeedData = async (sequelize: Sequelize****) => {**\n **await sequelize.query(`**\n **INSERT INTO Calculations**\n **(id, age, years, nextage, createdAt, updatedAt) VALUES**\n **(1, 35, 5, 40, date(), date()),**\n **(2, 35, 10, 45, date(), date())`);**\n **await sequelize.query(`**\n **INSERT INTO People (id, name, createdAt, updatedAt) VALUES**\n **(1, 'Alice', date(), date()), (2, \"Bob\", date(), date())`);**\n **await sequelize.query****(`**\n **INSERT INTO ResultModels**\n **(calculationId, personId, createdAt, updatedAt) VALUES**\n **(1, 1, date(), date()), (2, 2, date(), date()),**\n **(2, 1, date(), date());`);**\n**}** \n```", "```js\nimport { DataTypes, Sequelize } from \"sequelize\";\nimport { Calculation, Person, ResultModel } from \"./orm_models\";\n**import { Result } from \"./repository\";**\nconst primaryKey = {\n    id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n    }       \n};\n// ...functions omitted for brevity...\n**export const fromOrmModel = (model: ResultModel | null) : Result => {**\n **return {**\n **id: model?.id || 0****,**\n **name: model?.Person?.name || \"\",**\n **age: model?.Calculation?.age || 0,**\n **years: model?.Calculation****?.years || 0,**\n **nextage: model?.Calculation?.nextage || 0**\n **}**\n**}** \n```", "```js\n**import { Sequelize } from \"sequelize\";**\n**import { Repository, Result } from** **\"./repository\";**\n**import { addSeedData, defineRelationships,**\n **fromOrmModel, initializeModels } from \"./orm_helpers\";**\n**import { Calculation, Person, ResultModel } from \"./orm_models\"****;**\n**export class OrmRepository implements Repository {**\n **sequelize: Sequelize;**\n **constructor() {**\n **this.sequelize = new** **Sequelize({**\n **dialect: \"sqlite\",**\n **storage: \"orm_age.db\",**\n **logging: console.log,**\n **logQueryParameters: true**\n **});**\n **this.initModelAndDatabase();**\n **}**\n **async initModelAndDatabase() : Promise<void> {**\n **initializeModels(this.sequelize);**\n **defineRelationships****();**\n **await this.sequelize.drop();** \n **await this.sequelize.sync();**\n **await addSeedData****(this.sequelize);**\n **}**\n **async saveResult(r: Result): Promise<number> {**\n **throw new Error****(\"Method not implemented.\");**\n **}**\n **async getAllResults(limit: number): Promise<Result[]> {**\n **throw new Error(\"Method not implemented.\"****);** \n **}**\n **async getResultsByName(name: string, limit: number): Promise<Result[]> {**\n **throw new Error(\"Method not implemented.\"****);** \n **}**\n**}** \n```", "```js\n...\nawait this.sequelize.drop();       \nawait this.sequelize.sync();\n... \n```", "```js\n`findAll` \n```", "```js\n`findOne` \n```", "```js\n`findByPk` \n```", "```js\n`findOrCreate` \n```", "```js\n`create` \n```", "```js\n`update` \n```", "```js\n`upsert` \n```", "```js\n`include` \n```", "```js\n`where` \n```", "```js\n`order` \n```", "```js\n`group` \n```", "```js\n`limit` \n```", "```js\n`transaction` \n```", "```js\n`attributes` \n```", "```js\n...\nasync getAllResults(limit: number): Promise<Result[]> {\n    **return (await ResultModel****.findAll({**\n **include: [Person, Calculation],**\n **limit,**\n **order: [[\"id\", \"DESC\"]]**\n **})).map(row =>** **fromOrmModel(row));**\n}\n... \n```", "```js\n...\nasync getResultsByName(name: string, limit: number): Promise<Result[]> {\n **return** **(await ResultModel.findAll({**\n **include: [Person, Calculation],**\n **where: {**\n **\"$Person.name$\": name**\n **},**\n **limit, order: [[\"id\"****, \"DESC\"]]**\n **})).map(row => fromOrmModel(row));**\n}\n... \n```", "```js\n...\nasync saveResult(r: Result): Promise<number> {\n   ** return await this.sequelize.transaction(async (tx) => {**\n **const [person] = await Person.****findOrCreate({**\n **where: { name : r.name},**\n **transaction: tx**\n **});**\n\n **const [calculation] = await Calculation.findOrCreate({**\n **where: {**\n **age: r.****age, years: r.years, nextage: r.nextage**\n **},**\n **transaction: tx**\n **});**\n **return (await ResultModel.create({**\n**personId: person.id, calculationId: calculation.id},**\n **{transaction: tx})).id;**\n **});** \n}\n... \n```", "```js\nimport { Repository } from \"./repository\";\n**//import { SqlRepository } from \"./sql_repository\";**\n**import { OrmRepository } from \"./orm_repository\";**\n**const repository: Repository =** **new OrmRepository();**\nexport default repository; \n```"]