["```js\n<div class=\"control-group\"> \n    <button onclick=\"renderAll(d3.axisBottom)\"> \n        horizontal bottom \n    </button> \n    <button onclick=\"renderAll(d3.axisTop)\"> \n        horizontal top \n    </button> \n    <button onclick=\"renderAll(d3.axisLeft)\"> \n        vertical left \n    </button> \n    <button onclick=\"renderAll(d3.axisRight)\"> \n        vertical right \n    </button> \n</div> \n\n<script type=\"text/javascript\"> \n    var height = 500,  \n        width = 500,  \n        margin = 25, \n        offset = 50, \n        axisWidth = width - 2 * margin, \n        svg; \n\n    function createSvg(){ // <-A \n         svg = d3.select(\"body\").append(\"svg\") // <-B \n            .attr(\"class\", \"axis\") // <-C \n            .attr(\"width\", width) \n            .attr(\"height\", height); \n    } \n\n    function renderAxis(fn, scale, i){ \n        var axis = fn() // <-D \n            .scale(scale) // <-E \n            .ticks(5); // <-G \n\n        svg.append(\"g\")         \n            .attr(\"transform\", function(){ // <-H \n                if([d3.axisTop, d3.axisBottom].indexOf(fn) >= 0) \n                    return \"translate(\" + margin + \",\" +  \n                                              i * offset + \")\"; \n                else \n                    return \"translate(\" + i * offset + \", \" +  \n                                              margin + \")\"; \n            }) \n            .call(axis); // <-I \n    } \n\n    function renderAll(fn){ \n        if(svg) svg.remove(); \n\n        createSvg(); \n\n        renderAxis(fn, d3.scaleLinear() \n                    .domain([0, 1000]) \n                    .range([0, axisWidth]), 1); \n        renderAxis(fn, d3.scalePow() \n                    .exponent(2) \n                    .domain([0, 1000]) \n                    .range([0, axisWidth]), 2); \n        renderAxis(fn, d3.scaleTime() \n                    .domain([new Date(2016, 0, 1),  \n                             new Date(2017, 0, 1)]) \n                    .range([0, axisWidth]), 3); \n    } \n</script> \n\n```", "```js\nvar height = 500,  \n  width = 500,  \n  margin = 25, \n  offset = 50, \n  axisWidth = width - 2 * margin, \n  svg; \n\nfunction createSvg(){ // <-A \n     svg = d3.select(\"body\").append(\"svg\") // <-B \n        .attr(\"class\", \"axis\") // <-C \n        .attr(\"width\", width) \n        .attr(\"height\", height); \n}  \n\n```", "```js\n<div class=\"control-group\"> \n    <button onclick=\"renderAll(d3.axisBottom)\"> \n        horizontal bottom \n    </button> \n    <button onclick=\"renderAll(d3.axisTop)\"> \n        horizontal top \n    </button> \n    <button onclick=\"renderAll(d3.axisLeft)\"> \n        vertical left \n    </button> \n    <button onclick=\"renderAll(d3.axisRight)\"> \n        vertical right \n    </button> \n</div> \n... \nfunction renderAxis(fn, scale, i){ \n        var axis = fn() // <-D \n            .scale(scale) // <-E \n            .ticks(5); // <-G \n... \n\n```", "```js\nd3.scaleLinear().domain([0, 1000]).range([0, axisWidth]) \nd3.scalePow().exponent(2).domain([0, 1000]).range([0, axisWidth]) \nd3.scaleTime() \n  .domain([new Date(2016, 0, 1), new Date()]) \n  .range([0, axisWidth]) \n\n```", "```js\nsvg.append(\"g\")         \n  .attr(\"transform\", function(){ // <-H \n    if([\"top\", \"bottom\"].indexOf(orient) >= 0) \n      return \"translate(\" + margin + \",\"+ i * offset + \")\"; \n    else \n      return \"translate(\" + i * offset + \", \" + margin + \")\"; \n    }) \n    .call(axis); // <-I \n\n```", "```js\nfunction foo(selection) { \n  ... \n} \n\n```", "```js\n<script type=\"text/javascript\"> \n    var height = 500,  \n        width = 500,  \n        margin = 25, \n        axisWidth = width - 2 * margin; \n\n    var svg = d3.select(\"body\").append(\"svg\") \n            .attr(\"class\", \"axis\") \n            .attr(\"width\", width) \n            .attr(\"height\", height); \n\n    var scale = d3.scaleLinear() \n            .domain([0, 1]).range([0, axisWidth]); \n\n    var axis = d3.axisBottom() \n            .scale(scale) \n            .ticks(10) \n            .tickSize(12) // <-A \n            .tickPadding(10) // <-B \n            .tickFormat(d3.format(\".0%\")); // <-C \n\n    svg.append(\"g\")         \n        .attr(\"transform\", function(){ \n            return \"translate(\" + margin + \n                    \",\" + margin + \")\"; \n        }) \n        .call(axis); \n</script> \n\n```", "```js\n.tickFormat(function(v){ // <-C \n    return Math.floor(v * 100) + \"%\"; \n}); \n\n```", "```js\n<script type=\"text/javascript\"> \n    var height = 500,  \n        width = 500,  \n        margin = 25;        \n\n    var svg = d3.select(\"body\").append(\"svg\") \n            .attr(\"class\", \"axis\") \n            .attr(\"width\", width) \n            .attr(\"height\", height); \n\n    function renderXAxis(){ \n        var axisLength = width - 2 * margin; \n\n        var scale = d3.scaleLinear() \n                        .domain([0, 100]) \n                        .range([0, axisLength]); \n\n        var xAxis = d3.axisBottom() \n                .scale(scale); \n\n        svg.append(\"g\")        \n            .attr(\"class\", \"x-axis\") \n            .attr(\"transform\", function(){ // <-A \n                return \"translate(\" + margin + \",\" +  \n                                 (height - margin) + \")\"; \n            }) \n            .call(xAxis); \n\n        d3.selectAll(\"g.x-axis g.tick\") // <-B \n            .append(\"line\") // <-C \n                .classed(\"grid-line\", true) \n                .attr(\"x1\", 0) // <-D \n                .attr(\"y1\", 0) \n                .attr(\"x2\", 0) \n                .attr(\"y2\", - (height - 2 * margin));  // <-E \n    } \n\n    function renderYAxis(){         \n        var axisLength = height - 2 * margin; \n\n        var scale = d3.scaleLinear() \n                        .domain([100, 0]) \n                        .range([0, axisLength]); \n\n        var yAxis = d3.axisLeft() \n                .scale(scale); \n\n        svg.append(\"g\")        \n            .attr(\"class\", \"y-axis\") \n            .attr(\"transform\", function(){ \n                return \"translate(\" + margin + \",\" +  \n                                              margin + \")\"; \n            }) \n            .call(yAxis); \n\n        d3.selectAll(\"g.y-axis g.tick\") \n            .append(\"line\") \n                .classed(\"grid-line\", true) \n                .attr(\"x1\", 0) \n                .attr(\"y1\", 0) \n                .attr(\"x2\", axisLength) // <-F \n                .attr(\"y2\", 0); \n    }    \n\n    renderYAxis(); \n    renderXAxis(); \n</script> \n\n```", "```js\n.attr(\"transform\", function(){ // <-A \n  return \"translate(\" + margin + \",\" + (height - margin) + \")\"; \n}) \n\n```", "```js\nd3.selectAll(\"g.x-axis g.tick\") // <-B \n            .append(\"line\") // <-C \n                .classed(\"grid-line\", true) \n                .attr(\"x1\", 0) // <-D \n                .attr(\"y1\", 0) \n                .attr(\"x2\", 0) \n                .attr(\"y2\", - (height - 2 * margin));  // <-E \n\n```", "```js\nd3.selectAll(\"g.y-axis g.tick\") \n            .append(\"line\") \n                .classed(\"grid-line\", true) \n                .attr(\"x1\", 0) \n                .attr(\"y1\", 0) \n                .attr(\"x2\", axisLength) // <-F \n                .attr(\"y2\", 0); \n\n```", "```js\n<script type=\"text/javascript\"> \n    var height = 500,  \n        width = 500,  \n        margin = 25, \n        xAxis, yAxis, xAxisLength, yAxisLength; \n\n    var svg = d3.select(\"body\").append(\"svg\")      \n            .attr(\"class\", \"axis\")     \n            .attr(\"width\", width) \n            .attr(\"height\", height); \n\n    function renderXAxis(){ \n        xAxisLength = width - 2 * margin; \n            var scale = d3.scaleLinear() \n                        .domain([0, 100]) \n                        .range([0, xAxisLength]); \n\n        xAxis = d3.axisBottom() \n                .scale(scale); \n\n        svg.append(\"g\")        \n            .attr(\"class\", \"x-axis\") \n            .attr(\"transform\", function(){  \n                return \"translate(\" + margin + \",\" +  \n                                  (height - margin) + \")\"; \n            }) \n            .call(xAxis); \n    } \n\n    ... \n\n    function rescale(){ // <-A \n        var max = Math.round(Math.random() * 100); \n\n        xAxis.scale().domain([0, max]); // <-B \n        svg.select(\"g.x-axis\") \n            .transition() \n            .call(xAxis); // <-C \n\n        yAxis.scale().domain([max, 0]); \n        svg.select(\"g.y-axis\") \n            .transition() \n            .call(yAxis); \n\n        renderXGridlines(); \n        renderYGridlines(); \n    }        \n\n    function renderXGridlines(){ \n        d3.selectAll(\"g.x-axis g.tick\") \n                .select(\"line.grid-line\") \n                .remove(); // <-D \n\n        d3.selectAll(\"g.x-axis g.tick\") \n                .append(\"line\") \n                    .classed(\"grid-line\", true) \n                    .attr(\"x1\", 0) \n                    .attr(\"y1\", 0) \n                    .attr(\"x2\", 0) \n                    .attr(\"y2\", - yAxisLength); \n    } \n\n    ... \n\n    renderXAxis(); \nrenderXGridlines(); \n... \n</script> \n\n```", "```js\nfunction rescale(){ // <-A \n  var max = Math.round(Math.random() * 100); \n\n  xAxis.scale().domain([0, max]); // <-B \n  svg.select(\"g.x-axis\") \n    .transition() \n    .call(xAxis); // <-C \n\n  renderXGridlines(); \n}    \n\n```", "```js\nfunction renderXGridlines(){ \n        d3.selectAll(\"g.x-axis g.tick\") \n                .select(\"line.grid-line\") \n                .remove(); // <-D \n\n        d3.selectAll(\"g.x-axis g.tick\") \n                .append(\"line\") \n                    .classed(\"grid-line\", true) \n                    .attr(\"x1\", 0) \n                    .attr(\"y1\", 0) \n                    .attr(\"x2\", 0) \n                    .attr(\"y2\", - yAxisLength); \n} \n\n```"]