- en: Chapter 12. Connecting the App to Social Media
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many web applications use third-party authentication for registering and logging
    in. In particular, using popular social media sites such as Facebook and Twitter
    to authenticate users has become very popular. Since these sites have already
    done some work to validate users, sites using them to authenticate users save
    a some time.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to set up Passport strategies to sign up and authenticate
    users using their Facebook and Twitter accounts. We're going to be using a popular
    protocol called OAuth 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, we''re going to finish building out the functionality for users
    to create and share gift lists. In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating users with Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating users with Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling gift list creation in the dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding share buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to begin integration with social media by allowing users to create
    accounts and log in using their Facebook accounts. The first things we need to
    do are to set up a Facebook developer account and build a Facebook app.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your Facebook developer account and app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to authenticate users using Facebook, you have to have a Facebook app.
    Fortunately, Facebook makes setting this up really easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not have a Facebook developer account, head over to [https://developers.facebook.com/](https://developers.facebook.com/)
    right now and sign up for a developer account. Just follow the instructions and
    agree to the terms of service. Next, we need to set up an app. From the developers''
    dashboard, select **Add** **New App** from the **My Apps** dropdown. You''ll get
    a modal window that looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your Facebook developer account and app](img/image_12_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select **Website**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your Facebook developer account and app](img/image_12_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Give your new app a name and select **Create New Facebook App ID**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your Facebook developer account and app](img/image_12_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose a category for your new app (any one will do, really). Make sure to
    leave off the selection for **Is this a test version of another app?** Then click
    **Create App ID**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your Facebook developer account and app](img/image_12_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From here, I suggest you select **Skip Quick Start** and we''ll set up your
    application manually. On the next screen, select **Settings**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your Facebook developer account and app](img/image_12_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll need to enter your e-mail address here and click **Save Changes**.
    Next, click on **App Review**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your Facebook developer account and app](img/image_12_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select **Yes** for **Do you want to make this app and all its live features
    available to the general public?** Next, go back to your dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your Facebook developer account and app](img/image_12_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You're going to need your App ID and App Secret values. Facebook will force
    you to enter your password to show your App Secret.
  prefs: []
  type: TYPE_NORMAL
- en: '**App Secret** is exactly that - secret. You should protect it and not do anything
    like check it into public source control.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Passport strategy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next thing we need to do is to set up the strategy in Passport. Open up
    your terminal and navigate to your `giftapp` root directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, we've installed the Passport Facebook module, which allows us to log in
    with Facebook using OAuth 2.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OAuth is an open protocol to allow secure authorization in a simple and standard
    method from web, mobile and desktop applications. You can find more information
    about OAuth 2, the latest version of the protocol, at [http://oauth.net/2/](http://oauth.net/2/).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring for Facebook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we need to set up our strategy. Inside your giftapp directory, make a new
    directory called `config`, and add a new file called `authorization.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We just stash an object with a few values we're going to need later. The `clientID`
    is our App ID. The `clientSecret` is our App Secret (no, that isn't my real secret).
    The last value is our `callBackURL`. This is a URL that Facebook will redirect
    to on authorization.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a Git repository to store your source code, it would be a good
    idea to add this `config` file to your `.gitignore` file.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the routes for Facebook authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next thing we need to do is to set up a couple of routes. In your `routes`
    directory, open up your routes file, `login.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The first new route is going to be used to log in using Facebook. The callback
    URL is used after authentication. On failure, the user is redirected to login.
    On success, the user is sent to the dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the second argument to the call to `passport.authenticate` on the
    `facebook` route. This object contains a scope property, which takes an array.
    That array consists of strings for data fields for which Facebook requires extra
    permissions to access. Facebook requires extra permissions to access a user's
    e-mail address.
  prefs: []
  type: TYPE_NORMAL
- en: Finishing setting up the Passport strategy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we have a few more steps to set up the strategy. In your Passport directory,
    create a new file called `facebook.js:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We begin by requiring our dependencies, including the Strategy object provided
    by the `passport-facebook` module, our User model, and our authorization configuration
    file containing our Facebook credentials.
  prefs: []
  type: TYPE_NORMAL
- en: We then create a module that defines our Facebook authentication strategy. It
    receives a configuration object as its first argument, which we define using the
    `facebook` authorization values from our configuration file. The final property,
    `profileFields`, sets the fields we're expecting to receive in the profile object
    we get back from Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: The second argument is a function that gets called when the authorization strategy
    is used. It receives an `accessToken`, `refreshToken`, `profile`, and `callback`
    as arguments from Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: We use the User's `findOne` function to see if the user already exists based
    on the `profile.id` returned from Facebook. We first check to see if there's an
    error. If there is, we return it to the callback. If there's no error and the
    user exists, the user object is passed back to the callback with a null in the
    error field. Finally, if the user doesn't already exist, we create a new user,
    save that user to the database, then pass the new user object back to the callback.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we will not always get e-mails back from Facebook, so we need to test
    to see if we get that property back on profile before we try to access it.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that if you want to delete your `users` collection you can use the
    Mongo console. Enter `use giftapp` to select the database, then `db.users.drop()`
    to drop the collection.
  prefs: []
  type: TYPE_NORMAL
- en: Altering the User model for Facebook data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s make some changes to our `User` model. Our Facebook authorization will
    give us some data that we weren''t getting before, and there''s some stuff we
    need to store. Open up your `user.js` file in your models directory and edit the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, we're going to use the `mongoose.Schema` function to start to build out
    our schema. We've added a `Facebook` object to the user which stores an ID, and
    a token. Note that this new ID is provided by Facebook and is different from the
    ID at the top level of the `User` object.
  prefs: []
  type: TYPE_NORMAL
- en: The token is a unique `id` that Facebook provides on an application-by-application
    basis. We need to store this for authentication to work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Finishing the connection to Facebook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are almost good to go. We have just a couple more steps to do to complete
    the work for authenticating and signing up with Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: Recreating our home page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s make life a little easier on ourselves and rewrite our `index.ejs` file
    inside our views directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we''ve created a simple welcome page using the Bootstrap `jumbotron`.
    We have three buttons, which are actually links styled as buttons: one for login,
    one for signup, and one for Facebook signup/login.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The page, at `http://localhost:3000`, will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Recreating our home page](img/image_12_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can test out the buttons. Unfortunately, clicking on our Facebook button
    gets you an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Recreating our home page](img/image_12_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is because we have to specifically enable URLs inside our Facebook app.
    Facebook enforces this security measure. Not a problem for us. Go back to **Settings**
    on your Facebook app dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Recreating our home page](img/image_12_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once in here, click on **+ Add Platform** and select **Website**. Enter `http://localhost`
    in the URL field. Now you should be able to register and authenticate with Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: One thing you may want to implement on your own is checking to see if a user
    already exists in the database by checking any e-mail address returned by Facebook
    against user e-mails already in the database. This will help to avoid duplicate
    accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to Twitter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the great things about Passport, and OAuth 2, is that there are a ton
    of different strategies we can use to authenticate with third parties. Let's set
    up Twitter authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Twitter app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to Facebook, we need to set up an app on Twitter for our application
    to communicate with. Head on over to [https://apps.twitter.com](https://apps.twitter.com)
    and create a new app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a Twitter app](img/image_12_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Fill in a name, description, and the two URLs. At the time of writing, Twitter
    does not allow `http://localhost` as a URL, so you have to use `http://127.0.0.1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now click over to **Keys and Access Tokens** and grab your Consumer Key and
    Consumer Secret. We''re going to add these to our `authorization.js` configuration
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We add a `twitterAuth` section to our authorization `config` file that contains
    the keys we need as well as the callback. This all is very similar to Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our Twitter strategy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we need to take the steps to build our Twitter strategy.
  prefs: []
  type: TYPE_NORMAL
- en: 'First things first, we need to install the Passport Twitter strategy module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create a `twitter.js` file inside your Passport directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This strategy is very similar to our Facebook strategy. We set up our keys and
    callback using our authorization config. We then check if a user with the same
    Twitter ID is already in the database. If not, we create a new user with the data
    Twitter sends us and save the record to the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Speaking of databases, we now need to make a change to our `User` model to
    handle our Twitter data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Just like with the Facebook section, we add a Twitter property to store the
    data that we get back from Twitter separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to add the routes for Twitter authentication to our `routes/login.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Again, the Twitter routes are very similar to the routes we use for Facebook
    authentication. We have the main authorization route and the route we use for
    callback.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we just need to make a couple of edits to our `passport/init.js` file to
    include the Twitter strategy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The only changes we need here are to import the Twitter strategy and initialize
    it. At this point, our Twitter strategy should work. Let's just make it a little
    easier for our users.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Twitter authorization to our home page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As with our Facebook strategy, let''s add a Twitter login button to our `index.ejs`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We've added a Twitter login button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that to test this, start at `http://127.0.0.1:3000/` and not `http://localhost:3000`.
    The reason for this is that you need the domain for the session cookies to match
    in the callback URL. When you do, you''ll see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Twitter authorization to our home page](img/image_12_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Twitter login button will redirect you to Twitter, which will
    ask you to log in or authorize for your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Twitter authorization to our home page](img/image_12_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on **Sign in** should bring you to your dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have logged in with both Facebook and Twitter, let''s look at our
    `users` collection on our `giftapp` database. Fire up your MongoDB client by typing
    mongo on your command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: So, we have two users in our `users` collection, one with a set of Facebook
    credentials, and one with Twitter credentials. You'll notice that the Twitter
    profile does not include e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing giftlists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, our giftlist functionality doesn't really work. We want users to
    be able to create giftlists which they can then share.
  prefs: []
  type: TYPE_NORMAL
- en: Fleshing out the giftlist model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since we''re using Mongoose to model data for our users, let''s also put it
    to use to model our `giftlists`. Inside your `models` folder, create a new file
    called `giftlist.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This model is pretty straightforward. A giftlist has an ID, a name, a list of
    `gift` objects, and a `user_id` field. We will populate the `user_id` with the
    ID of the user who owns the giftlist. In a relational database, this would be
    a foreign key, defining a one-to-many relationship between users and giftlists.
  prefs: []
  type: TYPE_NORMAL
- en: The gifts field is an array of objects expecting only a name property. We also
    have a list of users with whom we have shared the giftlist. We will leave the
    sharing functionality for later.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next thing we want to do is to allow users to create new giftlists from
    our SPA dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we''re going to be POSTing data back via Ajax, we need to do a little
    work to make the CSRF token available to our Angular application. There are two
    steps to do this; first, we want to pass the token in our `dashboard.js` route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We pass the token to the render function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add something to our `dashboard.ejs` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We create a new Angular module inside our page and add a value to it. A value
    is basically an injectable name value pair we can use in our application. We do
    this in the dashboard template, because we need the server to provide the `csrfToken`
    to the UI.
  prefs: []
  type: TYPE_NORMAL
- en: We've also added a script tag to load a new controller script file that we will
    use to handle processing and submitting the form.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we need to connect the giftlist form to the controller and have the controller
    talk to the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the controller
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a new file in your `javascripts/controllers` directory called `giftappFormController.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We add a new controller into our `giftappControllers` module. We inject a number
    of things into the controller, including our List resource, and $state. We're
    also injecting `csrfToken`. We don't have access to that quite yet, but we'll
    inject its module into our module in a bit.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the controller, we set up an object on `$scope` called `formData`. This
    will hold the data entered by a user on our form. We also add a function to scope,
    called `create`, which will be invoked when a user submits the form. We create
    a new instance of our List resource, add our data to it, and save it to the backend.
    After saving, we trigger a state change to return to the dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since our module is actually defined `insidedashMainController`.`js`, this
    is where we want to inject the module containing our `csrfToken` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Simply by adding the name of the module to our module's dependencies, we get
    access to the value service inside our module.
  prefs: []
  type: TYPE_NORMAL
- en: Angularizing the form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next thing we need to do is to add some AngularJS directives to our template
    at `public/templates/dash-add.tpl.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The first change is adding the `ng-submit` directive to the form. On submitting
    the form, the controller's `$scope.create()` function will be invoked.
  prefs: []
  type: TYPE_NORMAL
- en: We then connect the inputs to the `$scope.formdata` using `ng-model` directives.
    This creates two-way data binding. To demonstrate this, we add `{{formData}}`
    into the template. This will show you all the data held by `$scope.formdata` and
    is a great way to troubleshoot your form. Obviously it's not something you'd leave
    in the template in production.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the backend controller
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that our form is connected to our controller, we need to connect our controller
    to our backend to store and retrieve our data from the database. Open your `controllers/giftlist_controller.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We require in our `giftlist` model, and we've edited the index, show, and create
    routes to take advantage of the Mongoose database functions. Because we want to
    be able to share lists easily with people who aren't logged into our dashboard,
    non-JSON requests to show are going to render in a separate page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside your views directory, create a new `giftlist` directory and create a
    template called `show.ejs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This is a pretty straightforward template that renders the list name and the
    gifts on the list.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the ability to share lists on social media
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we want to allow users to easily share their lists. We need to make a
    minor adjustment to the `dash-main` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The URL we've added to the link will trigger the show route in our controller,
    passing it the ID of the list we want to show.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll add sharing buttons to our `giftlist/show.ejs` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We add some open graph tags, and some code to enable Twitter and Facebook sharing.
  prefs: []
  type: TYPE_NORMAL
- en: Twitter has a neat form-based wizard to set up Twitter sharing buttons. You
    can find it at [https://about.twitter.com/resources/buttons#tweet](https://about.twitter.com/resources/buttons#tweet).
    You'll want to configure the Facebook button specifically for your app ID. Facebook
    also has a form-based configuration tool, at [https://developers.facebook.com/docs/plugins/like-button](https://developers.facebook.com/docs/plugins/like-button).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We began this chapter by setting up Passport strategies for authenticating with
    Facebook and Twitter. Setting up developer accounts with each social media site
    is a straightforward, but necessary, step.
  prefs: []
  type: TYPE_NORMAL
- en: We then utilized our `Mongoose Giftlist` model, as well as our resourceful controller,
    to enable creating gift lists from within the SPA. We enabled the frontend code
    and AJAX functionality by building a new AngularJS controller. To be able to post
    data to the backend, we added an injectable value service to carry the CSRF token.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few things we leave to you to round out the application. This includes
    a way to add more gift inputs dynamically, and share lists with other registered
    users.
  prefs: []
  type: TYPE_NORMAL
