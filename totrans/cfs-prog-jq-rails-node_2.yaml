- en: Chapter 2. Running CoffeeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll talk about getting CoffeeScript installed and running
    on your development environment.
  prefs: []
  type: TYPE_NORMAL
- en: CoffeeScript can easily be installed on a Mac, Windows, or Linux. There are
    a variety of ways by which you can get it running, depending on if you just want
    the install to be simple and straightforward or if you want to be on the bleeding
    edge. Before we start on the details though, it's good to know that CoffeeScript
    usually doesn't live on its own, and uses some great JavaScript tools and frameworks
    to do its magic. Let's briefly discuss the typical CoffeeScript stack.
  prefs: []
  type: TYPE_NORMAL
- en: The CoffeeScript stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Early on in CoffeeScript's history, its compiler was written in Ruby. Later
    on, it became self-hosting; the language compiler was written in itself. This
    means that the compiler for CoffeeScript was written in CoffeeScript code which
    could then be compiled to JavaScript, which could then be run to compile CoffeeScript
    again. Confusing, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Without going any further into what a feat this is, this also means that in
    order to run CoffeeScript, we need to be able to execute JavaScript standalone
    on your computer, without a browser.
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js**, or just **Node**, is a JavaScript framework designed for writing
    network-server applications. It''s built using Google''s V8, an engine that can
    run JavaScript without a web browser—a perfect fit for CoffeeScript. It has become
    the preferred way to install CoffeeScript.'
  prefs: []
  type: TYPE_NORMAL
- en: Pairing CoffeeScript with Node.js has a lot of benefits. Not only does this
    mean that you can compile JavaScript that can be run in a browser, but you also
    get a full-fledged JavaScript network application server framework with hundreds
    of useful libraries that have been written for it.
  prefs: []
  type: TYPE_NORMAL
- en: As with JavaScript in Node.js, you can write and execute CoffeeScript on the
    server, use it to write web server applications and even use it as a normal, everyday
    systems scripting language.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The core CoffeeScript compiler has no dependencies to Node and can technically
    be executed on any JavaScript environment. However, the coffee command-line utility
    that uses the compiler is a Node.js package.
  prefs: []
  type: TYPE_NORMAL
- en: 'The working of the CoffeeScript compiler is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The CoffeeScript stack](img/9588OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Node.js and npm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Node.js has its own package management system, called **npm** . It's used to
    install and manage packages, libraries, and their dependencies that run in the
    Node.js ecosystem. It is also the most common way of installing CoffeeScript,
    which itself is available as an npm package. Thus, it's actually very easy to
    install CoffeeScript after you have set up Node.js and npm.
  prefs: []
  type: TYPE_NORMAL
- en: There are different ways of installing Node.js and npm, depending on your Operating
    System and if you need to compile the source or not. Each of the subsequent sections
    will cover the instructions for your OS.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Node.js wiki contains a ton of information on installing and running Node
    on a plethora of platforms. If you run into any trouble during this chapter, you
    can look at it, since it has a lot of tips on troubleshooting issues and is updated
    often; the link is [https://github.com/joyent/node/wiki/Installation](https://github.com/joyent/node/wiki/Installation).
  prefs: []
  type: TYPE_NORMAL
- en: Node.js, npm, and CoffeeScript on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There has been a great drive within the Node.js community for good native Windows
    support and it is very easy to install.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, first head on over to the Node.js website ([nodejs.org](http://nodejs.org))
    and then click on the **Downloads** button. You''ll see a couple of options available,
    but choose the **Windows Installer** option, which is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Node.js, npm, and CoffeeScript on Windows](img/9588OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will download an `.msi` file. Once you have downloaded it, running the
    install couldn''t be much easier; just accept the terms and click on **Continue**.
    If you see the following screen, then you have successfully installed Node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Node.js, npm, and CoffeeScript on Windows](img/9588OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At this point, you might need to log out of Windows or restart so that changes
    to your `$PATH` variables can take effect. After you have done this, you should
    be able to open the DOS command prompt and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This should spit out a version, which means you''re good to go. Let''s also
    check if npm is working fine. Also in the command-line tool, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Node.js, npm, and CoffeeScript on Windows](img/9588OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in order to go ahead and install CoffeeScript, just enter the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If all went well, you should see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Node.js, npm, and CoffeeScript on Windows](img/9588OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, I used the **-g** flag, which installs the npm package for all users.
    Once you have installed CoffeeScript, we can test it using the **coffee** command,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Node.js, npm, and CoffeeScript on Windows](img/9588OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is the CoffeeScript interpreter, and as you can see, you can use it to
    run CoffeeScript code on the fly. To exit, just use *Ctrl* + *C*.
  prefs: []
  type: TYPE_NORMAL
- en: And that's it! Installing Node.js on Windows is really quick and easy.
  prefs: []
  type: TYPE_NORMAL
- en: Installing CoffeeScript on a Mac
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two ways of installing Node.js on a Mac, either by downloading the
    `.pkg` file from the Node.js website and installing it using Apple's installer
    application, or by using the **Homebrew** command-line package manager.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way of getting up and running is by just installing the `.pkg` file,
    so let's go over that first. Installing Homebrew might involve more work, but
    it is worth it if you prefer working on the command-line tool and would build
    CoffeeScript from source.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Apple installer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Head on over to the Node.js website ([nodejs.org](http://nodejs.org)) and then
    click on the **Downloads** button. You''ll see a couple of options available,
    but choose the **Macintosh Installer** option, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Apple installer](img/9588OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will download a `.pkg` file. Once you have downloaded it, running the
    install couldn''t be much easier; just choose your destination, accept the license,
    and click **Continue**. You should choose to install it for all users by using
    the **Install for all users of this computer** option, which is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Apple installer](img/9588OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you see the following screen, then you have successfully installed Node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Apple installer](img/9588OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will also have npm installed, which we'll use to install CoffeeScript. Skip
    to the *Installing CoffeeScript with npm* section.
  prefs: []
  type: TYPE_NORMAL
- en: Using Homebrew
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A lot of developers prefer working on the command-line tool on a Mac, and the
    Homebrew package manager has become quite popular. It aims to let you easily install
    Unix tools that don't come with Mac OS X.
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer installing Node.js using Homebrew, you need to have Homebrew on
    your system. You might also need to have XCode command-line tools to build the
    Node.js source code. The Homebrew wiki contains instructions on how to get it
    up and running at [https://github.com/mxcl/homebrew/wiki/installation](https://github.com/mxcl/homebrew/wiki/installation).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do have Homebrew installed, you can then install Node.js using the **brew**
    command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Homebrew](img/9588OS_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see from the output, Homebrew has not installed npm, without which
    we cannot install CoffeeScript. To install npm, you can just copy and paste the
    following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After npm is installed, you should see something similar to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Homebrew](img/9588OS_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing CoffeeScript with npm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have npm installed, we should be able to install CoffeeScript.
    Just enter the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The **-g** flag lets npm install CoffeeScript globally; once this is done,
    you can now test if CoffeeScript is working by using the **coffee** command, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing CoffeeScript with npm](img/9588OS_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And that's it! Installing CoffeeScript on a Mac is quite easy.
  prefs: []
  type: TYPE_NORMAL
- en: Installing CoffeeScript on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ways of installing Node.js with CoffeeScript on Linux vary depending on
    which distribution you have installed. There are packages for most of the popular
    distros, and if not, you can also try building CoffeeScript from a source, as
    described in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: I only have experience with package managers for Debian-based distros and have
    installed CoffeeScript with Node.js successfully using the **apt-get** package
    manager. However, you should be able to follow the instructions for the other
    distros as described.
  prefs: []
  type: TYPE_NORMAL
- en: There are apt-get packages for Node.js on Ubuntu, MintOS, and Debian, but you
    need to add sources for them before you can install. The instructions for installing
    each of them will be explored in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu and MintOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following on the command-line utility (you might need to have sufficient
    permissions to use `sudo`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Debian
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On Debian, you would normally log in to a root terminal to install packages.
    Once logged in, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Other distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Node.js wiki page at [https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager)
    contains instructions for installing on a variety of Linux and Unix distributions,
    including Fedora, openSUSE, Arch Linux, and FreeDSB.
  prefs: []
  type: TYPE_NORMAL
- en: Installing CoffeeScript with npm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After your package manager has done its thing, you should now have Node.js
    and npm installed. You can verify this by using the npm **-v** command. You can
    now install CoffeeScript using npm by entering the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `-g` flag tells npm to install the package globally.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how the **-v** command is used to install CoffeeScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing CoffeeScript with npm](img/9588OS_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And that's it! Installing CoffeeScript on Linux is quite easy.
  prefs: []
  type: TYPE_NORMAL
- en: Building Node.js from source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you prefer not to use a package manager or installer, or don't have one available
    for your OS, or you would like to get the very latest version of Node.js, then
    you can also build Node.js from its source. Be warned though, this process is
    often fraught with danger, since the source often needs some dependencies on the
    system to build.
  prefs: []
  type: TYPE_NORMAL
- en: Building on Linux or Unix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To build on a Linux or Unix environment, you need to make sure that you have
    the following source dependencies installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Python–Version 2.6 or Version 2.7**: You can check if you have Python installed
    and also check which version is installed by entering `python --version` in the
    command prompt.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**libssl-dev**: This can usually be installed with the built-in package manager.
    It''s already installed on OS X.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I''m going to show you how to build Node.js using its latest source. The source
    is managed using the popular Git version control system and hosted in a repository
    on [github.com](http://github.com). To pull the latest source from your github,
    you''ll need to make sure you have Git installed. By using `apt-get`, you can
    install it as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have these prerequisites, you should be able to build the node. Enter
    the following command on the command-line tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Phew! If everything went well, you should be able to install CoffeeScript using
    npm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Building on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although it''s possible to build Node.js on Windows, I would highly recommend
    that you just run the installer instead. Out of all the ways of installing that
    I have mentioned in this book, this is the only one I didn''t do myself. This
    example comes straight from the Node wiki ([https://github.com/joyent/node/wiki/Installation](https://github.com/joyent/node/wiki/Installation)).
    Apparently, the build can take a very long time. In the command prompt, enter
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Using CoffeeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: And there you have it. Having to install Node.js and npm just to get CoffeeScript
    might seem like a lot of effort, but you'll get to experience the power of having
    a wonderful server-side JavaScript framework and good command-line tools to write
    CoffeeScript with.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have CoffeeScript installed, how do we go about using it? Your
    main entry point into the language is the `coffee` command.
  prefs: []
  type: TYPE_NORMAL
- en: The coffee command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This command-line utility is like a Swiss army knife of CoffeeScript. You can
    use it to run CoffeeScript in an interactive fashion, compile CoffeeScript files
    into JavaScript files, execute `.coffee` files, watch files or directories, and
    compile if any of the files change, as well as a few other useful things. Executing
    the command is easy, just enter `coffee` along with some options and arguments
    for them.
  prefs: []
  type: TYPE_NORMAL
- en: 'For help on all the available options, run `coffee` with the **-h** or **--help**
    options. A list of useful options are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The coffee command](img/9588OS_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have already seen the **-v** option, which will print out the current version
    of CoffeeScript.
  prefs: []
  type: TYPE_NORMAL
- en: The REPL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Executing `coffee` with no arguments or the **-i** option will drop you into
    the CoffeeScript **Read Eval Print Loop** (**REPL**). From here, you can type
    in CoffeeScript code that will be executed on the fly and display its output right
    in the console. This is very useful for playing with the language, exploring some
    of the core JavaScript and Node.js libraries, or even pulling in another external
    library or API and being able to explore it interactively.
  prefs: []
  type: TYPE_NORMAL
- en: I urge you to run the coffee REPL and try some of the code examples that we
    discussed in the previous chapter. Notice how the output of each expression is
    displayed after it is entered. The interpreter is also clever enough to handle
    multiline and nested expressions, such as function definitions.
  prefs: []
  type: TYPE_NORMAL
- en: '![The REPL](img/9588OS_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the previous screenshot, the interpreter is shown handling a function definition.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To exit from the REPL, use *Ctrl* + *D* or *Ctrl* + *C*.
  prefs: []
  type: TYPE_NORMAL
- en: Running .coffee files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After typing enough code into the REPL, you will come to a point when you will
    want to start storing and organizing your CoffeeScript in source files. CoffeeScript
    files use the `.coffee` extension. You can run a `.coffee` file by passing it
    as an argument to the `coffee` command. The CoffeeScript in the file will be compiled
    to JavaScript and then executed, using Node.js as its environment.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use any text editor to write your CoffeeScript. A lot of popular editors
    have plugins or have added support for CoffeeScript, with features such as syntax
    highlighting, code completion, or even allowing you to run your code right from
    the editor. There is a comprehensive list of text editors and plugins that support
    CoffeeScript at [https://github.com/jashkenas/coffee-script/wiki/Text-editor-plugins](https://github.com/jashkenas/coffee-script/wiki/Text-editor-plugins).
  prefs: []
  type: TYPE_NORMAL
- en: Compiling to JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To compile a CoffeeScript to JavaScript, we pass the **-c** or **--compile**
    option. It takes either a single argument with a filename or a folder name, or
    multiple files and folder names. If you specify a folder, it will compile all
    the files in that folder. By default, the JavaScript output files will have the
    same name as the source file, so `foo.coffee` will compile to `foo.js`.
  prefs: []
  type: TYPE_NORMAL
- en: If we wanted to control where the outputted JavaScript will be written, then
    we can use the **-o** or **--output** option with a folder name. If you're specifying
    multiple files or folders, then you can also pass the **-j** or **--join** option
    with a filename. This will join the output into a single JavaScript file.
  prefs: []
  type: TYPE_NORMAL
- en: Watching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're developing a CoffeeScript application, it can become tedious to keep
    running **--compile**. Another useful option is **-w** or **--watch**. This tells
    the CoffeeScript compiler to keep running and watch a certain file or folder for
    any changes to the files. This works well when combined with **--compile**, which
    will compile files every time they change.
  prefs: []
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The cool thing about the `coffee` command is that the flags can be combined
    to create a very useful build and development environment. Let's say, I have a
    bunch of CoffeeScript files in a source folder that I want to compile to a single
    `output.js` file in the `js` folder every time a file changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be able to use something similar to the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This will watch for any changes to the `.coffee` files in the source folder
    and compile and join them into a single file called **output.js** inside the **js**
    folder, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Putting it all together](img/9588OS_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have hopefully learned how to get CoffeeScript running
    on the development environment of your choice. You have also learned how to use
    the `coffee` command to run and compile CoffeeScript. Now that you have the tools,
    we'll move to writing some code and get to know CoffeeScript "in the wild", so
    to speak. Let's start from where JavaScript started, and look at programming CoffeeScript
    in the browser.
  prefs: []
  type: TYPE_NORMAL
