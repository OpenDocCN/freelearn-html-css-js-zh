["```js\nvar CACHE_NAME = cache-only';\n```", "```js\nvar cacheFetchStartTime;\n```", "```js\nvar SOURCE_URL = 'https://cdn.rawgit.com/szaranger/szaranger.github.io/master/service-workers/10/01/events';\n```", "```js\nfunction clear() {\n  outlet.textContent = '';\n  cacheStatus.textContent = '';\n}\n\nfunction disableEdit(enable) {\n  fetchButton.disabled = enable;\n  cacheDelayText.disabled = enable;\n  cacheDisabledCheckbox.disabled = enable;\n\n  if(!enable) {\n    clear();\n  }\n}\n```", "```js\nfunction displayEvents(events) {\n\n  events.forEach(function(event) {\n    var tickets = event.ticket ?\n      '<a href=\"' + event.ticket + '\" class=\"tickets\">Tickets</a>' : '';\n\n    outlet.innerHTML = outlet.innerHTML +\n      '<article>' +\n      '<span class=\"date\">' + formatDate(event.date) + '</span>' +\n      ' <span class=\"title\">' + event.title + '</span>' +\n      ' <span class=\"venue\"> - ' + event.venue + '</span> ' +\n      tickets +\n      '</article>';\n  });\n\n}\n```", "```js\ncloned = response.clone();\n```", "```js\ncaches.open(CACHE_NAME).then(function(cache) {\n   cache.put(SOURCE_URL, cloned); // cache.put(URL, response)\n});\n```", "```js\nresponse.json().then(function(data) {\n    displayEvents(data);\n});\n```", "```js\nfetchButton.addEventListener('click', function handleClick() {\n...\n}\n```", "```js\nreturn new Promise(function(resolve, reject) {\n        setTimeout(function() {\n          try {\n            handleCacheFetchComplete(response);\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        }, cacheDelay);\n});\n```", "```js\nfunction formatDate(date) {\n  var d = new Date(date),\n      month = (d.getMonth() + 1).toString(),\n      day = d.getDate().toString(),\n      year = d.getFullYear();\n  if (month.length < 2) month = '0' + month;\n  if (day.length < 2) day = '0' + day;\n\n  return [month, day, year].join('-');\n}\n```", "```js\nvar CACHE_NAME = 'network-only';\n```", "```js\nvar networkFetchStartTime;\n```", "```js\nvar SOURCE_URL = 'https://cdn.rawgit.com/szaranger/szaranger.github.io/master/service-workers/10/02/events';\n```", "```js\nfunction clear() {\n  outlet.textContent = '';\n  networkStatus.textContent = '';\n  networkDataReceived = false;\n}\n\nfunction disableEdit(enable) {\n  fetchButton.disabled = enable;\n  networkDelayText.disabled = enable;\n  networkDisabledCheckbox.disabled = enable;\n\n  if(!enable) {\n    clear();\n  }\n}\n```", "```js\nfunction displayEvents(events) {\n\n  events.forEach(function(event) {\n    var tickets = event.ticket ?\n      '<a href=\"' + event.ticket + '\" class=\"tickets\">Tickets</a>' : '';\n\n    outlet.innerHTML = outlet.innerHTML +\n      '<article>' +\n      '<span class=\"date\">' + formatDate(event.date) + '</span>' +\n      ' <span class=\"title\">' + event.title + '</span>' +\n      ' <span class=\"venue\"> - ' + event.venue + '</span> ' +\n      tickets +\n      '</article>';\n  });\n\n}\n```", "```js\nvar shouldNetworkError = networkDisabledCheckbox.checked,\n    cloned;\n\n  if (shouldNetworkError) {\n    throw new Error('Network error');\n  }\n```", "```js\ncloned = response.clone();\n```", "```js\nresponse.json().then(function(data) {\n    displayEvents(data);\n    networkDataReceived = true;\n});\n```", "```js\nfetchButton.addEventListener('click', function handleClick() {\n...\n}\n```", "```js\ndisableEdit(true);\n\nnetworkStatus.textContent = 'Fetching events...';\nnetworkFetchStartTime = Date.now();\n```", "```js\nnetworkFetch = fetch(SOURCE_URL + '?cacheBuster=' + now, {\n   mode: 'cors',\n   cache: 'no-cache',\n   headers: headers\n})\n```", "```js\nreturn new Promise(function(resolve, reject) {\n      setTimeout(function() {\n        try {\n          handleFetchComplete(response);\n          resolve();\n        } catch (err) {\n          reject(err);\n        }\n      }, networkDelay);\n});\n```", "```js\nfunction formatDate(date) {\n  var d = new Date(date),\n      month = (d.getMonth() + 1).toString(),\n      day = d.getDate().toString(),\n      year = d.getFullYear();\n\n  if (month.length < 2) month = '0' + month;\n  if (day.length < 2) day = '0' + day;\n\n  return [month, day, year].join('-');\n}\n```", "```js\ncaches.open(currentCache.offline)\n.then(function(cache) {\n        return cache.addAll([\n              'offline.html',\n              '/assets/css/style.css',\n              '/assets/js/index.js'\n            ]);\n        })\n);\n```", "```js\nnavigator.serviceWorker.register(\n      'service-worker.js',\n      { scope: './' }\n   ).then(function(serviceWorker) {\n      document.getElementById('status').innerHTML = \n          'successful';\n   }).catch(function(error) {\n      document.getElementById('status').innerHTML = error;\n});\n```", "```js\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(currentCache.offline)\n    .then(function(cache) {\n         return cache.addAll([\n        offlineUrl\n          ]);\n          })\n    );\n});\n```", "```js\nself.addEventListener('fetch', function(event) {\n  var request = event.request,\n    isRequestMethodGET = request.method === 'GET';\n\n  if (request.mode === 'navigate' || isRequestMethodGET) {\n    event.respondWith(\n      fetch(createRequestWithCacheBusting(request.url)).catch(function(error) {\n        console.log('OFFLINE: Returning offline page.', error);\n        return caches.match(offlineUrl);\n      })\n    );\n  } else {\n    event.respondWith(caches.match(request)\n        .then(function (response) {\n        return response || fetch(request);\n      })\n    );\n  }\n});\n```", "```js\n  <section>\n    <p>Registration status: <strong id=\"status\"></strong></p>\n    <button id=\"register\">Register Background Sync</button>\n    <div id=\"console\"></div>\n  </section>\n```", "```js\ndocument.getElementById('register').addEventListener('click', function(event) {\n      event.preventDefault();\n\n      new Promise(function(resolve, reject) {\n        Notification.requestPermission(function(result) {\n          if (result !== 'granted') {\n            return reject(Error('Notification permission denied'));\n          }\n          resolve();\n        })\n      }).then(function() {\n        return navigator.serviceWorker.ready;\n      }).then(function(reg) {\n        return reg.sync.register('syncTest');\n      }).then(function() {\n        print('Sync registered');\n      }).catch(function(err) {\n        print('It broke');\n        print(err.message);\n      });\n});\n```", "```js\nself.addEventListener('sync', function(event) {\n  self.registration.showNotification('Sync\\'d');\n});\n```", "```js\n<section>\n     <div id=\"console\"></div>\n</section>\n```", "```js\nself.addEventListener('activate', _ => {\n  clients.claim();\n});\n\nself.addEventListener('fetch', event => {\n  console.log(event.request);\n  event.respondWith(fetch(event.request));\n});\n```", "```js\nvar consoleEl = document.getElementById('console');\n\nfunction print(message) {\n  var p = document.createElement('p');\n\n  p.textContent = message;\n  consoleEl.appendChild(p);\n  console.log(message);\n}\n```", "```js\nvar proxy = 'https://crossorigin.me/';\nvar pokedex = proxy + 'http://pokeapi.co/api/v1/pokedex/1/';\nâ€¦\n```", "```js\nfunction fetchPokemonList() {\n  fetch(pokedex)\n    .then(function(response) {\n      return response.json();\n    })\n    .then(function(info) {\n      populatePokemonList(info.pokemon);\n\n      if (window.parent !== window) {\n        window.parent.document.body\n          .dispatchEvent(new CustomEvent('iframeresize'));\n      }\n    });\n}\n```", "```js\nfunction populatePokemonList(pokemonList) {\n  var el = document.querySelector('#pokemon');\n  var buffer = pokemonList.map(function(pokemon) {\n    var tokens = pokemon.resource_uri.split('/');\n    var id = tokens[tokens.length - 2];\n    return '<li><a href=\"pokemon.html?id=' + id + '\">' + pokemon.name +\n           '</a></li>';\n  });\n  el.innerHTML = buffer.join('\\n');\n} \n```", "```js\nfunction getResponse(request) {\n  return self.caches.open('render-store').then(function(cache) {\n    return cache.match(request).then(function(match) {\n      return match || fetch(request);\n    });\n  });\n}\n```", "```js\nfunction cacheResponseInRenderStore(request) {\n  return request.text().then(function(contents) {\n    var headers = { 'Content-Type': 'text/html' };\n    var response = new Response(contents, { headers: headers });\n\n    return self.caches.open('render-store').then(function(cache) {\n      return cache.put(request.referrer, response);\n    });\n  });\n}\n```", "```js\nvar startTime = performance.now();\nvar interpolationTime = 0;\nvar fetchingModelTime = 0;\n```", "```js\nif (document.documentElement.dataset.cached) {\n  logTime();\n} else {\n  var pokemonId = window.location.search.split('=')[1];\n\n  getPokemon(pokemonId).then(fillCharSheet).then(logTime).then(cache);\n}\n\nfunction getPokemon(id) {\n  var fetchingModelStart = getStartTime();\n\n  return fetch(getURL(id)).then(function(response) {\n    fetchingModelTime = getStartTime() - fetchingModelStart;\n    return response.json();\n  });\n}\n```", "```js\nfunction interpolateTemplate(template, pokemon) {\n  var interpolationStart = performance.now();\n  var result = template.replace(/{{(\\w+)}}/g, function(match, field) {\n    return pokemon[field];\n  });\n  interpolationTime = performance.now() - interpolationStart;\n  return result;\n}\n```"]