- en: Chapter 8. Bootstrapping Your Portfolio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From this chapter onwards, the learning experience would be dynamic as you will
    go through interactive real world, hands-on project which will provide you complete
    exposure to Bootstrap 4 and Sass and thereby raising your confidence in Bootstrap
    to a tremendous level.
  prefs: []
  type: TYPE_NORMAL
- en: Let's imagine we're ready for a fresh design of our online portfolio. As always,
    time is scarce. We need to be efficient, but the portfolio has to look great.
    And of course, it has to be responsive. It should work across devices of various
    form factors, since this is a key selling point for our prospective clients. This
    project will enable us to leverage a number of Bootstrap's built-in features,
    even as we customize Bootstrap to suit our needs.
  prefs: []
  type: TYPE_NORMAL
- en: What we'll build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've thrown together a couple of home page mock-ups. Though we have in mind
    what we want for large screens, we've begun with a handheld screen size to force
    ourselves to focus on the essentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll notice the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: A collapsed responsive navbar with logo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A sliding carousel with four images of featured portfolio items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A single-column layout with three blocks of content, each with a heading, a
    short paragraph, and a nice big button with an invitation to read further
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A footer with social media links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the design mock-up as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What we''ll build](img/00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Altogether, this should provide a good introduction to our work. The carousel
    is tall enough to give a good amount of visual space to our portfolio images.
    It is not difficult to navigate quickly to the content below, where a user can
    efficiently scan key options for taking the next step inside. By presenting key
    links as nice big buttons, we will establish a helpful visual hierarchy for the
    key action items, and we will ensure that visitors do not have problems because
    of fat fingers.
  prefs: []
  type: TYPE_NORMAL
- en: 'For ease of maintenance, we''ve elected to have only two major breakpoints
    in this design. We''ll use the single-column layout for screen sizes narrower
    than 768 px. Then, we''ll shift to a three-column layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What we''ll build](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll note the following features in the mock-up for tablets and higher versions:'
  prefs: []
  type: TYPE_NORMAL
- en: A navigation bar at the top, which is enhanced with icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A widescreen version of the home page carousel, with images stretching to fill
    the full width of the browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A three-column layout for our textual content blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A footer with content at the center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The color scheme is fairly simple: Shades of gray, plus a golden-green color
    for links and highlights.'
  prefs: []
  type: TYPE_NORMAL
- en: With these design goals in mind, we'll can move on and get our content in place.
  prefs: []
  type: TYPE_NORMAL
- en: Surveying the exercise files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's look at the first few files for this exercise. Create a new project by
    using Bootstrap CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install Bootstrap CLI by running the following command in your console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can set up your project by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, choose a new empty Bootstrap project. When prompted, select Panini,
    Sass, and Gulp option.:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Surveying the exercise files](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are a few additions you will have to make now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new assets/images folder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Copy the files of the img folder to the new assets/images folder. It contains
    five images:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One logo image, named logo.png
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Four portfolio item images
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add a new task to the `Gulpfile.js` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, add the preceding task to the default task at the end of the file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `html` folder that contains your Panini HTML templates should have the
    following file and folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Surveying the exercise files](img/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can read more about Panini at [https://github.com/zurb/panini](https://github.com/zurb/panini).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the details of the files shown in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `html/pages/index.html` file contains the following HTML and template code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `{{> carousel}}` snippet which includes the carousel (`includes/carousel.html`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Content blocks, like that shown beneath:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `includes/header.html` file, included in `layouts/default.html`, contains
    our navbar and has the following new touches:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Navbar items have been updated to reflect our new site architecture:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `includes/footer.html` file, included in `layouts/default.html`, contains
    the following items:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A logo in the footer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Social links:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Other than the navbar, no Bootstrap classes have been added to style the carousel,
    columns, or icons yet.
  prefs: []
  type: TYPE_NORMAL
- en: Further on, we'll discuss how to use Sass to customize your project. Now you
    can see that the `app.scss` file imports the `includes/_navbar.scss` file.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of the preceding modifications, you can also start with the files found
    in the `Lesson 8/start` folder. In this folder, run the `npm install and bower
    install` commands first. After running `npm` and bower commands, you can run the
    `bootstrap` *watch* or `gulp` command to view the results in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll see the navbar, followed by the portfolio images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Surveying the exercise files](img/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The blocks of text and the footer, with a list of social links, follow after
    the images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Surveying the exercise files](img/00129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It's not much to speak of yet. Let the transformation begin.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by applying the Bootstrap classes, allowing us to quickly and efficiently
    establish the fundamentals for our interface elements using Bootstrap's default
    CSS styles and JavaScript behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: Marking up the carousel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get started with our carousel, which will rotate between four featured
    images from our portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap's carousel markup structure can be found in its documentation pages
    at [http://getbootstrap.com/components/carousel/](http://getbootstrap.com/components/carousel/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the pattern used in the example, we''ll begin with this structure
    to set up the fundamental element. This will contain all parts of the carousel,
    followed by the progress indicators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that I've used a `div` tag with an ID (`id=`"`carousel-feature")` to establish
    the fundamental context of `carousel`. The `carousel` class applies the Bootstrap's
    carousel CSS to the carousel elements, adding appropriate styles to the carousel
    indicators, the carousel items, and the next and previous controls.
  prefs: []
  type: TYPE_NORMAL
- en: The `carousel-feature` ID must be used in the `data-target` attributes of the
    progress indicators. This signals the JavaScript plugin to update the indicator
    for the active carousel item with the `active` class. We've provided that class
    for the first indicator to get things started. From there, the JavaScript takes
    over. It removes the class, and adds it to the appropriate indicator as the carousel
    cycles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, note that the `data-slide-to` values begin counting from 0\. This is
    the standard behavior for JavaScript and other programming languages. Just remember:
    Start counting at zero, not one.'
  prefs: []
  type: TYPE_NORMAL
- en: After the indicators, the element of the class `carousel-inner` follows. This
    serves as the wrapper to contain all of the carousel items—in this case, our images.
  prefs: []
  type: TYPE_NORMAL
- en: The carousel items come within `carousel-inner`. They are a group of `div` tags,
    each with `class="item"`. Modify the first item to have both the classes `item`
    and `active`, to make it visible from the outset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, the markup structure works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After the carousel items, we need to add the carousel controls. These will
    provide the next and previous buttons at the left and right edges of the carousel.
    After the controls, we''ll close up our entire markup structure with the closing
    `div` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The carousel controls need to have the ID of the fundamental carousel element
    (`#carousel-feature`) for their `href` value. The code, then, looks like this:
    `<a class="left carousel-control" href="#carousel-feature" role="button" data-slide="prev">`'
  prefs: []
  type: TYPE_NORMAL
- en: Now you can write down the complete code for the carousel in the file. Once
    this code is in place, run the `gulp` command if you didn't run the `bootstrap
    watch` already. Bootstrap's styles and JavaScript should start working. Your images
    should now work as a sliding carousel!
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the carousel component requires both jQuery and the JavaScript plugin.
    The Gulp build process merges jQuery and all plugin code into a single `app.js`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the carousel will slide every 5 seconds. Let''s set the interval
    to 2 seconds to give our users time to appreciate the full beauty of our work:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `js/main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines. We''ll begin with the jQuery method of checking to
    ensure page elements are ready, and then initialize the carousel with an interval
    of 2,000 milliseconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice that you should automatically copy the `js/main.js` file from the assets
    folder and link it in the file, or add it to the `compile-js` task in your `Gulpfile.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You should also consider adding the js/main.js file to the Gulp watch task.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save and restart your application. You will see that the interval has increased
    to 2 seconds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Instead of passing the options via JavaScript as we did just now, you can also
    pass them via data attributes. The interval of the carousel can be set via the
    `data-interval` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: For this and other options, see the Bootstrap carousel documentation at [http://getbootstrap.com/javascript/#carousel](http://getbootstrap.com/javascript/#carousel).
  prefs: []
  type: TYPE_NORMAL
- en: We'll return to customize the styling of the carousel, its indicators, and its
    icons later in the chapter. In the next section, you will learn how to use both
    JavaScript and CSS (SCSS) to modify the working of the carousel.
  prefs: []
  type: TYPE_NORMAL
- en: How does the carousel work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The jQuery plugin changes the CSS classes of the items of the carousel. When
    the page loads, the first item already has the `active` class; when the interval
    has passed, the plugin moves the `active` class to the next item, and so on. The
    plugin not only changes the position of the `active` class, but also temporally
    adds the `next` and `left` classes. Together with the CSS3 animations on these
    classes, the sliding effect is created. You can read more about CSS3 animations
    at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `transition` is set on the `carousel-inner` class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this declaration, the `ease-in-out` value sets the transition-timing-function
    of the animation (transition effect); for more information, see [https://developer.mozilla.org/en/docs/Web/CSS/transition-timing-function](https://developer.mozilla.org/en/docs/Web/CSS/transition-timing-function).
    In essence, it lets you establish an acceleration curve, so that the speed of
    the transition can vary over its duration. Later on, we'll see that you can also
    use keyframes to describe the different states of the transition.
  prefs: []
  type: TYPE_NORMAL
- en: 'The transformations performed are **translate3ds**. The `translate3d()` CSS
    function moves the position of the element in the 3D space. More information can
    be found at [https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate3d](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate3d).
    The carousel moves the carousel items over the *X*-axis as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Changing the carousel by adding new animations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we replace the CSS animation as described in the previous section with
    another animation, the carousel's slider effect changes.
  prefs: []
  type: TYPE_NORMAL
- en: The `Animate.css` project by Daniel Ede contains a lot of CSS animations for
    you to use in your projects. You can use these animations for our carousel too.
    You can find the library at [http://daneden.github.io/animate.css/](http://daneden.github.io/animate.css/).
  prefs: []
  type: TYPE_NORMAL
- en: We can create the new animation with SCSS code. Because our build process already
    runs the `autoprefixer`, you don't need to take the vendor prefixes into account.
    In our example, we'll use the `flipInX` animation of the `Animate.css` library,
    which rotates the images over the x axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the following SCSS code at the end of the `scss/includes/_carousel.scss`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If ran the `bootstrap watch` or `gulp` command already, you can inspect the
    results in the browser. You'll find that the images rotate over the *x*-axis now.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript events of the Carousel plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bootstrap provides custom events for most plugins'' unique actions. The Carousel
    plugin fires the `slide.bs.carousel` (at the beginning of the slide transition)
    and `slid.bs.carousel` (at the end of the slide transition) events. You can use
    these events to add custom JavaScript code. You can, for instance, change the
    background color of the body on the events by adding the following JavaScript
    into the `js/main.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `gulp watch` task is not set for the `js/main.js` file, so you
    have to run the `gulp` or `bootstrap watch` command manually after you are done
    with the changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more advanced changes to the plugin''s behavior, you can overwrite its
    methods by using, for instance, the following JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This code sets the `transform` CSS property without vendor prefixes. The autoprefixer
    only prefixes your static CSS code. For full browser compatibility, you should
    add the vendor prefixes in the JavaScript code yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bootstrap exclusively uses CSS3 for its animations, but Internet Explorer 9
    doesn't support the necessary CSS properties.
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue leveraging the power of Bootstrap's default styles and set up
    a responsive grid for the content below the carousel.
  prefs: []
  type: TYPE_NORMAL
- en: Creating responsive columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have three blocks of text, each with a heading, a short paragraph, and a
    link. In screen sizes of approximately tablet width or more, we would like this
    content to be laid out in three columns. In narrower screen widths, the content
    will organize itself in one full-width column.
  prefs: []
  type: TYPE_NORMAL
- en: Take a moment to visit and read the documentation for Bootstrap's mobile-first
    responsive grid. You can find it at [http://getbootstrap.com/css/#grid](http://getbootstrap.com/css/#grid).
  prefs: []
  type: TYPE_NORMAL
- en: In short, the grid is based on a 12-column system. The basic class structure
    allows us to use a class of `col-12` for full width, `col-6` for half width, `col-4`
    for one-third width, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to the creative use of media queries, Bootstrap's grid can be very adept
    at responding to different screen sizes. Recall that we want our welcome message
    to have a single-column layout up for screens to tablet-size, and then adapt a
    three-column layout at approximately 768 px for larger screens. Conveniently,
    Bootstrap has a built-in breakpoint at 768 px, which is the default value defined
    in the `$grid-breakpoints` Sass variable. Above 768 px is the large range, beginning
    at 992 px, also defined in the `$grid-breakpoints` Sass variable, then the extra-large
    screen, measured at 1,200 px and higher. I'll refer to these as Bootstrap's extra-small,
    small, medium, large, and extra-large breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the medium breakpoint, there is a special column class that uses the formulation
    `col-md-`. Because we want three columns after the small breakpoint, we''ll use
    `class="col-md-4"`. Below the medium breakpoint, the elements will remain full-width.
    Above it, they will shift to one-third width and line up side by side. Notice
    that the navbar also collapses at 768 px. The full structure is given here, with
    paragraph contents abbreviated for clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should edit the preceding code in the `html/pages/index.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re unfamiliar with the `container` and `row` classes, here is what
    they do:'
  prefs: []
  type: TYPE_NORMAL
- en: The `container` class constrains the width of the content and keeps it centered
    within the page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `row` class provides the wrapper for our columns, allowing extra left and
    right margins for the column gutters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both the `container` class and the `row` class are `clearfixed` so that they
    contain floating elements and clear any previous floating elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, save the file and run the `bootstrap watch` or `gulp` command if you have
    not already done so. With your browser width above 768 px, you should see the
    following three-column layout take shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating responsive columns](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Resize your browser window below 768 px, and you''ll see it revert to a single
    column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating responsive columns](img/00131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With our responsive grid in place, let's turn those links into clearly visible
    calls to action by utilizing Bootstrap's button styles.
  prefs: []
  type: TYPE_NORMAL
- en: Turning links into buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Turning our key content links into visually effective buttons is straightforward.
    The key classes we''ll employ are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `btn` class will style a link as a button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `btn-primary` class will assign a button the color of our primary brand
    color.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pull-xs-right` class will float the link to the right, moving it into wider
    space to make it a more appealing target. The `xs` part of the class name means
    that it should be applied on every viewport wider than the extra-small breakpoint
    of 0 pixels. The `pull-md-right` class only floats the elements on viewports wider
    than 768 px.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add these classes to the link at the end of each of our three content blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Save. You should see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Turning links into buttons](img/00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We've made great progress. Our key elements are taking shape.
  prefs: []
  type: TYPE_NORMAL
- en: With our fundamental markup structure in place, we can start working on the
    finer details. Getting there will require some custom CSS. We're going to approach
    this by leveraging the power of Bootstrap's Sass files. If you're new to Sass,
    no worries! I'll walk you through it step by step.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the power of Sass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following sections, we will be organizing, editing, customizing, and
    creating SCSS files in order to generate the desired CSS for our designs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are unfamiliar with Sass and would like to learn more about it, I would
    recommend reading my *Sass and Compass Designer's Cookbook* book ([https://www.packtpub.com/web-development/sass-and-compass-designers-cookbook](https://www.packtpub.com/web-development/sass-and-compass-designers-cookbook))
    or the documentation at [https://www.sass-lang.com/](https://www.sass-lang.com/).
  prefs: []
  type: TYPE_NORMAL
- en: In a nutshell, we may say that generating CSS using the Sass preprocessor is
    an exciting and freeing experience. The key benefits of working with Sass are
    discussed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing Bootstrap's Sass according to our needs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we work with Bootstrap''s Sass files, we''ll exert considerable control
    over them by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Organizing our `scss` folder to give us the flexibility and freedom to accomplish
    what we need while making future maintenance easier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing Bootstrap's Sass variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a few custom Sass files of our own
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporating a set of font-based icons in our site assets, providing the icons
    that we need for our social media links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In other words, we'll be doing more than merely learning and applying Bootstrap's
    conventions. We'll be bending them to our will.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter''s exercise files, open the `scss` directory. Inside, you should
    see the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing Bootstrap''s Sass according to our needs](img/00133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To prepare for what's ahead, I've given you a head start by explaining the new
    layer of organization. All of Bootstrap's Sass files are saved in the `bower_components/bootstrap/scss/`
    folder. You should not modify these files; you can (re)use them as described in
    the next sections. Keeping the original files untouched enables you to update
    Bootstrap without undoing your modifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the `app.scss` file imports two partial files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The file `includes/_bootstrap.scss` is a modified copy of the original `bootstrap.scss`
    file. This file imports all other original Bootstrap files, and it is used in
    the compiling process to create one unified style sheet from all of our imported
    Sass files. The `includes/_variables.scss` file is a modified copy of the original
    `_variables.scss` file. This file contains the declaration of all Bootstrap's
    Sass variables. Because the `includes/_variables.scss` file is imported before
    the original `_variables.scss` file, the variables in it can be used to overwrite
    Bootstrap's default settings.
  prefs: []
  type: TYPE_NORMAL
- en: Why go through this trouble? Because we'll soon be modifying Bootstrap's default
    settings and creating custom Sass files of our own. When we do that, we can leave
    the `Bootstrap` folder and its files as they are while making adjustments in the
    custom files that we will create.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin the customization! We'll start by customizing Bootstrap's variables
    and adding a few new variables of our own.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we''ll create a copy of Bootstrap''s variables file and customize it
    to our needs:'
  prefs: []
  type: TYPE_NORMAL
- en: Find the `includes/_variables.scss` file in the `scss` folder and open it in
    your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scanning through the lines of this file, you'll see the variables used to set
    the CSS values for everything from basic colors to the body background, font-families,
    navbar height and background, and so on. It's beautiful to behold. It's even more
    fun to meddle with. Before we meddle, let's create our own copy of this file,
    allowing us to leave Bootstrap's default variables intact in case we ever want
    to revert back to them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, let''s implement our new color scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the topmost section of our new `includes/_variables.scss` file, you''ll
    see the default Bootstrap variables for grays and brand colors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have the specific values that we''re after. So, let''s simply substitute
    our desired values (feel free to do the math if you prefer!). Then, we''ll add
    an additional two variables to encompass the full range that we need. The result
    is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll update the `$brand-primary` variable under `Brand colors`. We''ll
    adjust this to our golden hue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you run the bootstrap watch (or gulp) command already, your browser automatically
    reloads after saving the `includes/_variables.scss file`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If this is successful, the most noticeable changes will be in the link color
    and buttons with the `btn-primary` class, which will both take the new `$brand-primary`
    color.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the navbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's edit the variables that set the navbar height, colors, and hover
    effects.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by changing the height. The navbar has a padding of `$spacer / 2`
    by default, and the total height is set by the font size and the vertical padding.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the local `includes/_variables.scss` file, search for the `$navbar-padding-vertical`
    variable and update it as follows. This will expand the navbar height:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Now we can set the background color of the navbar. The original HTML code in
    the `html/includes/headers.html` file had a `bg-faded` class. Because we want
    a white background color for our navbar, we can simply remove this class; the
    body already has a white background, and not setting the background property for
    the navbar will color the navbar white too.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use Sass and Bootstrap''s mixins to generate a new `bg-white`
    class. Create a new file `scss/includes/_backgrounds.scss` and edit the following
    SCSS into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the `bg-variant` mixin declares the `background-color` and `color`
    properties with `!important`. Because the `color` property is set to `#fff` (white)
    by default, using the `bg-variant` mixin does not seem to be the most flexible
    solution. Setting the `background-color` property for the navbar selector in the
    `scss/includes/_navbar.scss` file is a better solution. You can set the `background-color`
    property as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The color of the navbar links is set by the `.navbar-light` or `.navbar-dark`
    classes. You should use the `.navbar-dark` class for navbars with a dark background
    and `.navbar-light` for light background. Our navbar in the `html/includes/header.html`
    file has got the `.navbar-light` class, so in order to change the link colors,
    you''ll have to modify the `$navbar-light-*` variables in the `includes_variables.scss`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Note that we've already changed the `$gray` and `$gray-lighter` variables before,
    and the `$link-hover-color` variable has got the same value as the `$brand-primary`
    variable which we have set to the `#c1ba62;` color value.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you like having a different background color for the hovered and active
    links, you can open the `scss/includes/_navbar.scss` file with your favorite text
    editor and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, remove the vertical padding with the following SCSS code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now apply the padding on the `.nav-link` selectors and set the background color
    for the hover and active states:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Because the `.navbar-brand` has a larger font size, you will have to correct
    the padding for this selector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you did not run the `bootstrap watch` command already, run it now and you
    should see the following new features in your navbar:'
  prefs: []
  type: TYPE_NORMAL
- en: It should grow about 16px (2 x 1em) taller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its background color should turn white
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The nav item backgrounds change on hover and active states
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Link text should activate our brand-primary color on hover and when active,
    as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Customizing the navbar](img/00134.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's put our logo image in place.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the logo image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Find the `logo.png` file in the assets/images folder. You may notice that its
    dimensions are large, 900 px wide. In our final design, it will be only 120 px
    wide. Because the pixels will be compressed into a smaller space, this is a relatively
    easy way to ensure that the image will look good on all devices, including retina
    displays. Meanwhile, the file size of the image, which has already been optimized
    for the Web, is only 19 KB.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s put it in place and constrain its width:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `html/includes/header.html` file in your text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search for this line within the navbar markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the HTML from the previous step with the following image tag, including
    its `alt` and `width` attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Be sure to include the width attribute, setting its width to 120 px. Otherwise,
    it will appear very large on the page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you didn''t run the bootstrap watch command already, run it now. You should
    see the logo in place:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the logo image](img/00135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You may notice that the navbar height has expanded, and that its bottom edge
    no longer lines up with the bottom edge of the active nav item. This is due to
    the padding placed around the `bar-brand` class earlier. We need to adjust the
    appropriate padding values. We can do that in a few quick steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your text editor to open the `scss/includes/_navbar.scss` file again. Change
    the padding of the `bar-brand` class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When resizing the width of the image to 120 px, its height becomes around 34.51
    pixels, 34.51 / 16 = 2.16 rem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The powers of Sass continue to impress. Of course, we should also take care
    of the collapsed responsive navigation, so resize your browser to a viewport smaller
    than 768 px.
  prefs: []
  type: TYPE_NORMAL
- en: 'The navigation should now look like that shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the logo image](img/00136.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see that there is not enough padding around the logo and that the
    toggle button is not in line with the logo. We will use Sass again to correct
    these issues. Again, open the **s**`css/includes/_navbar.scss`file. Remember that
    we set the vertical padding of the navbar to 0 before. Now wrap this declaration
    into a CSS media query as follows to only apply it for the larger viewports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'As already explained, the `media-breakpoint-up` mixin is part of Bootstrap''s
    Sass mixin and can be used to hide or show elements according to Bootstrap''s
    media query ranges. The SCSS preceding code compiles into CSS as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the logo in line with the toggle button, you will have to change the
    `display` property of the logo image from `block` to `inline-block`. You can establish
    that by editing the following SCSS code in the `scss/includes/_navbar.scss` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, inspect the latest version of your `scss/includes/_navbar.scss` file.
    In your browser, the results should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the logo image](img/00137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's add icon powers.
  prefs: []
  type: TYPE_NORMAL
- en: Adding icons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to add icons to our navigation. **Glyphicons** that come with Bootstrap
    3 are dropped in Bootstrap 4\. Here, we'll use the large library of icons offered
    by **Font Awesome**. Other icon font sets can be found around the Web.
  prefs: []
  type: TYPE_NORMAL
- en: Font Awesome is a font icon set that offers 628 icons at the time of writing
    this book. Font Awesome icons are free, open source, and built to play nice with
    Bootstrap. You can see the Font Awesome home page at [http://fortawesome.github.io/Font-Awesome/](http://fortawesome.github.io/Font-Awesome/).
  prefs: []
  type: TYPE_NORMAL
- en: Let's fold Font Awesome into our workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we compile the CSS code of Font Awesome into our main `app.css` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install Font Awesome in your project folder by running the following
    command in your console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After that, you can import Font Awesome''s main SCSS file into your `scss/app.scss`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Last but not least, copy the font files to your assets folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Font Awesome `scss` files include a variable specifying the path to the
    Font Awesome web fonts. We need to check to make sure that this variable matches
    our folder structure. Ensure that the `$fa-font-path` variable is set to `../fonts`
    as follows in `our scss/includes/_variables.scss` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This path is relative to the compiled CSS file, which is in our `css` directory
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, in the `html/includes/header.html` file, let''s update the icon for the
    Team navbar item to use the Font Awesome icon named `fa-group`. We also need the
    standalone `fa` class: `<i class="fa fa-group"></i> Team`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this change to the `html/includes/header.html` file, and refresh your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If all works as it should, you should see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding icons](img/00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you see a strange symbol or nothing, that's a sign that the web fonts are
    not coming through. Double-check that your icon classes are correct (including
    the `fa` class), your Font Awesome web font files are in your fonts directory,
    and the path is set correctly in the `scss/includes/_variables.scss` file.
  prefs: []
  type: TYPE_NORMAL
- en: Now update your icon markup in the `html/includes/header.html` file to make
    use of the desired Font Awesome icons.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Font Awesome icon page [http://fortawesome.github.io/Font-Awesome/icons/](http://fortawesome.github.io/Font-Awesome/icons/)
    allows you to scan your options. Our mock-up calls for these icons in the navbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This has the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding icons](img/00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This completes our nav, or almost completes it. We've inadvertently created
    a small problem that we need to fix before moving on.
  prefs: []
  type: TYPE_NORMAL
- en: It's time to move on to the carousel.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the carousel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to take Bootstrap's default carousel styles and apply some significant
    customization. Let's create a new `_scss/includes/carousel.scss` file and import
    it into our `scss/app.scss` file.
  prefs: []
  type: TYPE_NORMAL
- en: Now to begin customizing and making aesthetic enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: Adding top and bottom padding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s add some top and bottom padding to the `.carousel` element itself and
    add our `@gray-lighter` color for a background color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: After saving and reloading (run the `bootstrap watch` or `gulp` command), you'll
    see the light gray background appears in our newly created space above and below
    the carousel images. This provides a bit of framing to set them off from the other
    elements above and below. In a bit, we'll take advantage of the extra bottom padding
    to position our carousel indicators in a way that allows them to stand out much
    more clearly.
  prefs: []
  type: TYPE_NORMAL
- en: Now to style the carousel indicators.
  prefs: []
  type: TYPE_NORMAL
- en: Repositioning the carousel indicators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The carousel indicators serve to inform the user how many slides are in our
    carousel, and highlight the current spot in the rotation. At present, these indicators
    are barely visible, languishing near the bottom center edge of our portfolio images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Repositioning the carousel indicators](img/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that I have temporarily set the border color to white to make the preceding
    picture as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s move these indicators into their own space, just below the image:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to move the indicators down even closer to the bottom edge, into our
    light gray area created by the padding we added previously. So, let''s adjust
    the bottom positioning. In addition, we need to remove the default bottom margin
    by zeroing it out. Write down the following SCSS in the `_scss/includes/carousel.scss`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file; if you have run the `bootstrap watch` command already, your browser
    automatically reloads.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This brings our desired result. The indicators now stay positioned in the desired
    space across all screen dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Repositioning the carousel indicators](img/00141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now let's update their appearance to make them larger and easier to see.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the indicators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll make our carousel indicators more visible by using our gray variables.
    We''ll also increase their size a bit. We can get a start in our `scss/includes/_variables.scss`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `scss/includes/_variables.scss`, just after the $`carousel-control` variables,
    you''ll find two variables beginning with `$carousel-indicator`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These are used to provide a white border around the default indicators, and
    then fill the active indicator with the background color.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s add a default background color variable here, so that we may fill the
    default indicators with our `$gray-light` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we''ll update the active background color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we''ll make the border color transparent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save, compile, and refresh.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At present, this has the effect of making all but the active item invisible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the indicators](img/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now for some work in the `_scss/includes/_carousel.scss` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `_scss/includes/_carousel.scss` file, move to the first set of rules
    for `.carousel-indicator` where we were previously working:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Look for the `li` selector nested under it. Here, let''s edit several values.
    Specifically, we''ll perform the following actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase the width and height to 16px
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the margin
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add background color using our newly created variable `$carousel-indicator-bg`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the border line altogether (the transparent value we set for the border
    variable is now merely a failsafe)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I''ve implemented these changes in the following code snippet:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In Bootstrap''s default CSS, the active indicators are a little larger (12
    px) than normal indicators (10 px); because of that, you have to set the new size
    (16 px) for both the normal and active indicators. You can accomplish that by
    using the Sass and parent reference as in the preceding code snippet. Consider
    the following snippet of SCSS code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This SCSS code compiles in CSS code like the one shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save, and check out the result!
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the indicators](img/00143.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Carousel adjustments accomplished! We've learned a lot in the process—a lot
    about Bootstrap and perhaps a little about Sass as well.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the next section. What remains is considerably simpler.
  prefs: []
  type: TYPE_NORMAL
- en: Tweaking the columns and their content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s fine-tune the blocks of content under the three headings **Welcome!**,
    **Recent Updates**, and **Our Team**:'
  prefs: []
  type: TYPE_NORMAL
- en: First, let's add the arrow-circle icon to the button in each of these three
    blocks. Recall that we're using Font Awesome for our icon selection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the Font Awesome documentation at [http://fortawesome.github.io/Font-Awesome/icons/](http://fortawesome.github.io/Font-Awesome/icons/).
    You'll find the icon that we're after:![Tweaking the columns and their content](img/00144.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `html/pages/index.html` file, add an `i` tag with the appropriate classes
    inside each link. Here is the first one, which I''ve spaced out by adding an extra
    carriage return between elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Repeat for each link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now have the desired icon in each of the three buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tweaking the columns and their content](img/00145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: While we're at it, let's add a bit of vertical padding between the carousel
    and this section of text. Right now, it's pretty tight.
  prefs: []
  type: TYPE_NORMAL
- en: 'The question that comes up at this point is where best to compose the styles
    that we''ll need for this; adding extra padding around page content sections will
    likely be a pretty normal practice for us now and in the future. Let''s create
    a Sass file to hold these and other tweaks to the ordinary contents of pages (as
    it happens, we''ll need this file for an additional and more important responsive
    adjustment, so it seems well justified):'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named `scss/includes/_page-contents.scss`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save it in your `scss` folder alongside your other custom Sass files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Comment the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s create a sensible class for this purpose and add our desired padding,
    including some padding for the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `scss/includes/_page-contents.scss` file to the imports in the `scss/main.scss`
    file. I''ll add mine in a new section near the bottom of the file and include
    a helpful comment for orientation purposes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let''s add the necessary class to our markup. Open the `html/pages/index.html
    file` and add the class `page-contents` to the `div` with the class container,
    which follows just after the carousel including:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save, and you should see the padding added.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to tidy up the narrow-screen view of these blocks. Note that,
    when viewed in single-column layout, the headings do not clear the floated buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tweaking the columns and their content](img/00146.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Fixing this is just a little tricky. We might want to add a clear fix to the
    `div` containing each of these three blocks. However, that won't work because
    we need these blocks to float side by side once the viewport width is 768 px or
    higher.
  prefs: []
  type: TYPE_NORMAL
- en: This calls for a media query. Knowing that our three-column view begins at the
    medium breakpoint, or 768 px, let's set a rule to clear floats when the window
    is 1 pixel below this breakpoint. As seen before, we can use Bootstrap's Sass
    media query mixin to do this.
  prefs: []
  type: TYPE_NORMAL
- en: While we're at it, let's also add some bottom padding to our columns so that
    they have a bit of extra vertical breathing room when stacked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the media query mixin, we''ll add a CSS2 attribute selector to select
    all elements with a class that contains `col-`, so that the same rules will apply
    to a column of any size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Save. The result is much improved!
  prefs: []
  type: TYPE_NORMAL
- en: '![Tweaking the columns and their content](img/00147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Much better! Now let's move on to the footer!
  prefs: []
  type: TYPE_NORMAL
- en: Styling the footer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The biggest feature of the footer is our social icons. Font Awesome to the rescue!
  prefs: []
  type: TYPE_NORMAL
- en: Consulting the Font Awesome documentation, we find a slew of available icons
    under the category of **Brand Icons**. Here is the direct link:[http://fortawesome.github.io/Font-Awesome/icons/#brand](http://fortawesome.github.io/Font-Awesome/icons/#brand)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we only need to replace the text for each social link in our footer, in
    the `html/includes/footer.html` file, with `i` elements, using the appropriate
    classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'This updated markup puts our icons in place:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the footer](img/00148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, perform the following steps to lay them out horizontally and align them
    to the center:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file, `scss/includes/_footer.scss`, to manage these styles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file to the `scss` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an import variable for this file in `__main.less`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we''ll write the styles we need. Let me simply lay them out, and then list
    what they do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Because Bootstrap tries to avoid both element and child selectors in Sass,
    you can consider rewriting the preceding SCSS code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: // Sizing shortcuts
  prefs: []
  type: TYPE_NORMAL
- en: '@mixin size($width, $height) {'
  prefs: []
  type: TYPE_NORMAL
- en: 'width: $width;'
  prefs: []
  type: TYPE_NORMAL
- en: 'height: $height;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '@mixin square($size) {'
  prefs: []
  type: TYPE_NORMAL
- en: '@include size($size, $size);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: footer[role="contentinfo"] {
  prefs: []
  type: TYPE_NORMAL
- en: 'padding-top: 24px;'
  prefs: []
  type: TYPE_NORMAL
- en: 'padding-bottom: 36px;'
  prefs: []
  type: TYPE_NORMAL
- en: 'text-align: center;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Recommended next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let me strongly recommend at least one additional step you''ll need to take
    before taking a project like this to production. It''s imperative that you take
    time to optimize your images, CSS, and JavaScript. These steps are not difficult:'
  prefs: []
  type: TYPE_NORMAL
- en: Compressing images takes just a bit of time, and it addresses the single largest
    cause for large page footprints. I've already used the save to web process option
    of Photoshop, but chances are you can squeeze a few more bytes out. In the code
    folder (`Build Process Manual`), you can see how to add an image compress task
    to your gulp build process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, we badly need to remove unneeded Bootstrap Sass files from the
    import sequence in the `scss/includes/_bootstrap.scss file`, and then compress
    the resulting `main.css` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, we need to slim down our `plugins.js` file by replacing Bootstrap''s
    all-inclusive `bootstrap.min.js` file with compressed versions of only the three
    plugins that we''re actually using: `carousel.js`, `collapse.js`, and `transitions.js`.
    We then compress the final `plugins.js` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combined, these steps can cut the footprint of this website by roughly half.
    In an age where speed matters—both for user retention and for SEO ranking—that's
    a big deal.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, there is one other very sensible step you may want to take: We
    know that users of touch-enabled devices appreciate the ability to swipe their
    way forward and back through a carousel.'
  prefs: []
  type: TYPE_NORMAL
- en: But, for the present moment, let's stop and celebrate.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take stock of what we've accomplished in this chapter. We started a new
    Bootstrap project, powered by Panini, Sass, and Gulp, by using Bootstrap CLI.
    After that, we leveraged Bootstrap's responsive navbar, carousel, and grid system,
    and customized several of Bootstrap's Sass codes and mixins. You also learned
    how to create your own Sass files and folded them seamlessly into the project.
    Last but not least, you folded the Font Awesome icons into our workflow. At the
    end, you improved future maintenance of the site by implementing a thoughtful
    file organization scheme—all without creating code bloat.
  prefs: []
  type: TYPE_NORMAL
- en: With this experience under your belt, you're equipped to bend Bootstrap to your
    will, using its power to speed website development, and then customizing the design
    to your heart's content. In future chapters, we'll expand your experience further.
    First, however, let's take this design to create a complex business home page.
  prefs: []
  type: TYPE_NORMAL
- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following classes will assign the color of our primary brand color
    to a button?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`btn-primary`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`button-primary`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`btn`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`bttn-primary`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is the right code for a `media breakup` point?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.include media-breakpoint-up(md) {padding-top: 0,padding-down: 0;}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@include media-breakpoint-up(md) {padding-top: 0;padding-bottom: 0;}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$include media-breakpoint-up(md) {padding-up: 0,padding-bottom: 0;}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`&includes media-breakpoint-up(md) {padding-top: 0,padding-bottom: 0,}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which class will float the link to the right, moving it into wider space to
    make it a more appealing target?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pull-xs-right`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pulls-xs-right`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pull-right`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pulls-xl-right`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following statement is right for using the grey color to style
    elements across bootstrap?![Assessments](img/00150.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both a and c
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Only c
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Only d
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Only a
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What should be in the place of `'?'` in the following syntax:![Assessments](img/00151.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`#`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
