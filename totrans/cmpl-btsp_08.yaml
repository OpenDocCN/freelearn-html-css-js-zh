- en: Chapter 8. Bootstrapping Your Portfolio
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 启动你的作品集
- en: From this chapter onwards, the learning experience would be dynamic as you will
    go through interactive real world, hands-on project which will provide you complete
    exposure to Bootstrap 4 and Sass and thereby raising your confidence in Bootstrap
    to a tremendous level.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一章开始，学习体验将变得动态，因为你将经历互动的实战项目，这将让你全面了解Bootstrap 4和Sass，从而大大提高你对Bootstrap的信心。
- en: Let's imagine we're ready for a fresh design of our online portfolio. As always,
    time is scarce. We need to be efficient, but the portfolio has to look great.
    And of course, it has to be responsive. It should work across devices of various
    form factors, since this is a key selling point for our prospective clients. This
    project will enable us to leverage a number of Bootstrap's built-in features,
    even as we customize Bootstrap to suit our needs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象我们已经准备好为我们的在线作品集进行一次全新的设计。一如既往，时间很紧张。我们需要高效，但作品集必须看起来很棒。当然，它必须是响应式的。它应该在各种形态的设备上工作，因为这是我们潜在客户的关键卖点。这个项目将使我们能够利用Bootstrap内置的许多功能，同时我们根据需要定制Bootstrap。
- en: What we'll build
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们将构建的内容
- en: We've thrown together a couple of home page mock-ups. Though we have in mind
    what we want for large screens, we've begun with a handheld screen size to force
    ourselves to focus on the essentials.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们草拟了一些主页模拟图。虽然我们已经在大型屏幕上有了想法，但我们从手持屏幕尺寸开始，强迫自己关注重点。
- en: 'You''ll notice the following features:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到以下功能：
- en: A collapsed responsive navbar with logo
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有标志的折叠响应式导航栏
- en: A sliding carousel with four images of featured portfolio items
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有四个特色作品集项目图片的滑动轮播图
- en: A single-column layout with three blocks of content, each with a heading, a
    short paragraph, and a nice big button with an invitation to read further
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个单列布局，包含三个内容块，每个内容块都有一个标题、一段简短的文字和一个邀请进一步阅读的漂亮大按钮
- en: A footer with social media links
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有社交媒体链接的页脚
- en: 'Here is the design mock-up as shown in the following screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，这是设计模拟图：
- en: '![What we''ll build](img/00124.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![我们将构建的内容](img/00124.jpeg)'
- en: Altogether, this should provide a good introduction to our work. The carousel
    is tall enough to give a good amount of visual space to our portfolio images.
    It is not difficult to navigate quickly to the content below, where a user can
    efficiently scan key options for taking the next step inside. By presenting key
    links as nice big buttons, we will establish a helpful visual hierarchy for the
    key action items, and we will ensure that visitors do not have problems because
    of fat fingers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，这应该为我们的工作提供了一个良好的介绍。轮播图足够高，可以为我们的作品集图片提供足够的视觉空间。快速导航到下面的内容并不困难，用户可以高效地扫描关键选项，以便在内部采取下一步行动。通过将关键链接呈现为漂亮的按钮，我们将为关键操作项建立有用的视觉层次，并确保访客不会因为手指粗大而遇到问题。
- en: 'For ease of maintenance, we''ve elected to have only two major breakpoints
    in this design. We''ll use the single-column layout for screen sizes narrower
    than 768 px. Then, we''ll shift to a three-column layout:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于维护，我们选择在这个设计中只有两个主要断点。我们将使用单列布局来适应小于768像素的屏幕尺寸。然后，我们将切换到三列布局：
- en: '![What we''ll build](img/00125.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![我们将构建的内容](img/00125.jpeg)'
- en: 'You''ll note the following features in the mock-up for tablets and higher versions:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在平板电脑和更高版本的模拟图中注意到以下功能：
- en: A navigation bar at the top, which is enhanced with icons
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部的一个带有图标的导航栏
- en: A widescreen version of the home page carousel, with images stretching to fill
    the full width of the browser
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个全屏版本的主页轮播图，图片拉伸以填充浏览器全宽
- en: A three-column layout for our textual content blocks
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们文本内容块的三列布局
- en: A footer with content at the center
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个内容居中的页脚
- en: 'The color scheme is fairly simple: Shades of gray, plus a golden-green color
    for links and highlights.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 色彩方案相当简单：灰色调，加上金色绿色用于链接和突出显示。
- en: With these design goals in mind, we'll can move on and get our content in place.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些设计目标下，我们可以继续前进，将内容放置到位。
- en: Surveying the exercise files
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查练习文件
- en: Let's look at the first few files for this exercise. Create a new project by
    using Bootstrap CLI.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个练习的前几个文件。通过使用Bootstrap CLI创建一个新项目。
- en: 'You can install Bootstrap CLI by running the following command in your console:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在控制台中运行以下命令来安装Bootstrap CLI：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then you can set up your project by running the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以通过运行以下命令来设置你的项目：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Again, choose a new empty Bootstrap project. When prompted, select Panini,
    Sass, and Gulp option.:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，选择一个新的空 Bootstrap 项目。当提示时，选择 Panini、Sass 和 Gulp 选项：
- en: '![Surveying the exercise files](img/00126.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![查看练习文件](img/00126.jpeg)'
- en: 'There are a few additions you will have to make now:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要做一些添加：
- en: Create a new assets/images folder.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的 assets/images 文件夹。
- en: 'Copy the files of the img folder to the new assets/images folder. It contains
    five images:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 img 文件夹的文件复制到新的 assets/images 文件夹。它包含五张图像：
- en: One logo image, named logo.png
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为 logo.png 的标志图像
- en: Four portfolio item images
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个作品集项目图像
- en: 'Add a new task to the `Gulpfile.js` file:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 `Gulpfile.js` 文件中添加一个新任务：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And finally, add the preceding task to the default task at the end of the file:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，将前面的任务添加到文件末尾的默认任务中：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `html` folder that contains your Panini HTML templates should have the
    following file and folder structure:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 包含你的 Panini HTML 模板的 `html` 文件夹应该具有以下文件和文件夹结构：
- en: '![Surveying the exercise files](img/00127.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![查看练习文件](img/00127.jpeg)'
- en: You can read more about Panini at [https://github.com/zurb/panini](https://github.com/zurb/panini).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/zurb/panini](https://github.com/zurb/panini) 上了解更多关于
    Panini 的信息。
- en: 'Here are some of the details of the files shown in the preceding screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在前一个屏幕截图中显示的文件的一些详细信息：
- en: 'The `html/pages/index.html` file contains the following HTML and template code:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`html/pages/index.html` 文件包含以下 HTML 和模板代码：'
- en: The `{{> carousel}}` snippet which includes the carousel (`includes/carousel.html`)
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含轮播图 (`includes/carousel.html`) 的 `{{> carousel}}` 片段
- en: 'Content blocks, like that shown beneath:'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容块，如下所示：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `includes/header.html` file, included in `layouts/default.html`, contains
    our navbar and has the following new touches:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含在 `layouts/default.html` 中的 `includes/header.html` 文件包含我们的导航栏，并具有以下新的修改：
- en: 'Navbar items have been updated to reflect our new site architecture:'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航栏项已更新，以反映我们新的网站结构：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `includes/footer.html` file, included in `layouts/default.html`, contains
    the following items:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含在 `layouts/default.html` 中的 `includes/footer.html` 文件包含以下项目：
- en: A logo in the footer
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页脚中的标志
- en: 'Social links:'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交链接：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Other than the navbar, no Bootstrap classes have been added to style the carousel,
    columns, or icons yet.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 除了导航栏外，还没有添加任何 Bootstrap 类来样式化轮播图、列或图标。
- en: Further on, we'll discuss how to use Sass to customize your project. Now you
    can see that the `app.scss` file imports the `includes/_navbar.scss` file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论如何使用 Sass 来自定义你的项目。现在你可以看到 `app.scss` 文件导入了 `includes/_navbar.scss`
    文件。
- en: Instead of the preceding modifications, you can also start with the files found
    in the `Lesson 8/start` folder. In this folder, run the `npm install and bower
    install` commands first. After running `npm` and bower commands, you can run the
    `bootstrap` *watch* or `gulp` command to view the results in your browser.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面的修改，你也可以从 `Lesson 8/start` 文件夹中找到的文件开始。在这个文件夹中，首先运行 `npm install` 和 `bower
    install` 命令。运行 `npm` 和 bower 命令后，你可以运行 `bootstrap watch` 或 `gulp` 命令来在浏览器中查看结果。
- en: 'You''ll see the navbar, followed by the portfolio images:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到导航栏，然后是作品集图像：
- en: '![Surveying the exercise files](img/00128.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![查看练习文件](img/00128.jpeg)'
- en: 'The blocks of text and the footer, with a list of social links, follow after
    the images:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 文本块和页脚，包含社交链接，在图像之后：
- en: '![Surveying the exercise files](img/00129.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![查看练习文件](img/00129.jpeg)'
- en: It's not much to speak of yet. Let the transformation begin.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 目前还没有太多可说的。让我们开始转换。
- en: We'll start by applying the Bootstrap classes, allowing us to quickly and efficiently
    establish the fundamentals for our interface elements using Bootstrap's default
    CSS styles and JavaScript behaviors.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先应用 Bootstrap 类，这样我们就可以快速高效地使用 Bootstrap 的默认 CSS 样式和 JavaScript 行为来建立我们界面元素的基础。
- en: Marking up the carousel
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标记轮播图
- en: Let's get started with our carousel, which will rotate between four featured
    images from our portfolio.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始制作我们的轮播图，它将在我们的作品集中旋转四张特色图像。
- en: Bootstrap's carousel markup structure can be found in its documentation pages
    at [http://getbootstrap.com/components/carousel/](http://getbootstrap.com/components/carousel/).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 的轮播图标记结构可以在其文档页面 [http://getbootstrap.com/components/carousel/](http://getbootstrap.com/components/carousel/)
    中找到。
- en: 'Following the pattern used in the example, we''ll begin with this structure
    to set up the fundamental element. This will contain all parts of the carousel,
    followed by the progress indicators:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 按照示例中使用的模式，我们将从这个结构开始设置基本元素。这将包含轮播图的全部部分，然后是进度指示器：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that I've used a `div` tag with an ID (`id=`"`carousel-feature")` to establish
    the fundamental context of `carousel`. The `carousel` class applies the Bootstrap's
    carousel CSS to the carousel elements, adding appropriate styles to the carousel
    indicators, the carousel items, and the next and previous controls.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我使用了一个带有 ID (`id="carousel-feature"`) 的 `div` 标签来建立 `carousel` 的基本上下文。`carousel`
    类将 Bootstrap 的轮播 CSS 应用到轮播元素上，为轮播指示符、轮播项以及下一页和上一页控制添加适当的样式。
- en: The `carousel-feature` ID must be used in the `data-target` attributes of the
    progress indicators. This signals the JavaScript plugin to update the indicator
    for the active carousel item with the `active` class. We've provided that class
    for the first indicator to get things started. From there, the JavaScript takes
    over. It removes the class, and adds it to the appropriate indicator as the carousel
    cycles.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`carousel-feature` ID 必须用于进度指示器的 `data-target` 属性中。这表示 JavaScript 插件将更新具有 `active`
    类的当前活动轮播项的指示器。我们已经为第一个指示器提供了该类以开始操作。从那里开始，JavaScript 接管一切。它移除该类，并在轮播循环时将其添加到适当的指示器上。'
- en: 'Also, note that the `data-slide-to` values begin counting from 0\. This is
    the standard behavior for JavaScript and other programming languages. Just remember:
    Start counting at zero, not one.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意，`data-slide-to` 的值从 0 开始计数。这是 JavaScript 和其他编程语言的常规行为。只需记住：从零开始计数，而不是从一。
- en: After the indicators, the element of the class `carousel-inner` follows. This
    serves as the wrapper to contain all of the carousel items—in this case, our images.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在指示符之后，`carousel-inner` 类的元素紧随其后。这作为包装器来包含所有的轮播项——在这种情况下，是我们的图片。
- en: The carousel items come within `carousel-inner`. They are a group of `div` tags,
    each with `class="item"`. Modify the first item to have both the classes `item`
    and `active`, to make it visible from the outset.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 轮播项位于 `carousel-inner` 内。它们是一组 `div` 标签，每个标签都有 `class="item"`。修改第一个项，使其同时具有
    `item` 和 `active` 类，以便一开始就可见。
- en: 'Thus, the markup structure works as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，标记结构如下所示：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After the carousel items, we need to add the carousel controls. These will
    provide the next and previous buttons at the left and right edges of the carousel.
    After the controls, we''ll close up our entire markup structure with the closing
    `div` tag:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在轮播项之后，我们需要添加轮播控制。这些将在轮播的左右边缘提供下一页和上一页按钮。在控制之后，我们将使用关闭的 `div` 标签关闭整个标记结构：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The carousel controls need to have the ID of the fundamental carousel element
    (`#carousel-feature`) for their `href` value. The code, then, looks like this:
    `<a class="left carousel-control" href="#carousel-feature" role="button" data-slide="prev">`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 轮播控制需要使用基本轮播元素的 ID (`#carousel-feature`) 作为它们的 `href` 值。然后，代码看起来是这样的：`<a class="left
    carousel-control" href="#carousel-feature" role="button" data-slide="prev">`
- en: Now you can write down the complete code for the carousel in the file. Once
    this code is in place, run the `gulp` command if you didn't run the `bootstrap
    watch` already. Bootstrap's styles and JavaScript should start working. Your images
    should now work as a sliding carousel!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在文件中写下轮播的完整代码。一旦这段代码就位，如果没有运行 `bootstrap watch`，就运行 `gulp` 命令。Bootstrap
    的样式和 JavaScript 应该开始工作。你的图片现在应该作为一个滑动轮播工作！
- en: Notice that the carousel component requires both jQuery and the JavaScript plugin.
    The Gulp build process merges jQuery and all plugin code into a single `app.js`
    file.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，轮播组件需要 jQuery 和 JavaScript 插件。Gulp 构建过程将 jQuery 和所有插件代码合并到单个 `app.js` 文件中。
- en: 'By default, the carousel will slide every 5 seconds. Let''s set the interval
    to 2 seconds to give our users time to appreciate the full beauty of our work:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，轮播每 5 秒滑动一次。让我们将间隔设置为 2 秒，以便我们的用户有时间欣赏我们工作的全部美丽：
- en: Create a new file called `js/main.js`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `js/main.js` 的新文件。
- en: 'Add the following lines. We''ll begin with the jQuery method of checking to
    ensure page elements are ready, and then initialize the carousel with an interval
    of 2,000 milliseconds:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下行。我们将从检查页面元素是否就绪的 jQuery 方法开始，然后以 2,000 毫秒的间隔初始化轮播：
- en: '[PRE10]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Notice that you should automatically copy the `js/main.js` file from the assets
    folder and link it in the file, or add it to the `compile-js` task in your `Gulpfile.js`
    file:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，你应该自动从 assets 文件夹复制 `js/main.js` 文件并将其链接到文件中，或者将其添加到 `Gulpfile.js` 文件中的 `compile-js`
    任务中：
- en: '[PRE11]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You should also consider adding the js/main.js file to the Gulp watch task.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你还应该考虑将 js/main.js 文件添加到 Gulp 监视任务中。
- en: Save and restart your application. You will see that the interval has increased
    to 2 seconds.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并重新启动您的应用程序。您将看到间隔已增加到 2 秒。
- en: 'Instead of passing the options via JavaScript as we did just now, you can also
    pass them via data attributes. The interval of the carousel can be set via the
    `data-interval` attribute:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们刚才通过 JavaScript 传递选项不同，您也可以通过数据属性传递它们。轮播图的间隔可以通过 `data-interval` 属性设置：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For this and other options, see the Bootstrap carousel documentation at [http://getbootstrap.com/javascript/#carousel](http://getbootstrap.com/javascript/#carousel).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此和其他选项，请参阅 Bootstrap 轮播图文档，链接为 [http://getbootstrap.com/javascript/#carousel](http://getbootstrap.com/javascript/#carousel)。
- en: We'll return to customize the styling of the carousel, its indicators, and its
    icons later in the chapter. In the next section, you will learn how to use both
    JavaScript and CSS (SCSS) to modify the working of the carousel.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面部分返回来定制轮播图、其指示器和其图标的样式。在下一节中，您将学习如何使用 JavaScript 和 CSS (SCSS) 来修改轮播图的工作方式。
- en: How does the carousel work?
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轮播图是如何工作的？
- en: 'The jQuery plugin changes the CSS classes of the items of the carousel. When
    the page loads, the first item already has the `active` class; when the interval
    has passed, the plugin moves the `active` class to the next item, and so on. The
    plugin not only changes the position of the `active` class, but also temporally
    adds the `next` and `left` classes. Together with the CSS3 animations on these
    classes, the sliding effect is created. You can read more about CSS3 animations
    at the following URL:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 插件更改轮播图项的 CSS 类。当页面加载时，第一个项已经具有 `active` 类；当间隔过去后，插件将 `active` 类移动到下一个项，依此类推。该插件不仅更改
    `active` 类的位置，还暂时添加 `next` 和 `left` 类。与这些类上的 CSS3 动画一起，创建了滑动效果。您可以在以下 URL 上了解更多关于
    CSS3 动画的信息：
- en: '[https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations).'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations)。'
- en: 'The `transition` is set on the `carousel-inner` class as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition` 被设置为 `carousel-inner` 类，如下所示：'
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this declaration, the `ease-in-out` value sets the transition-timing-function
    of the animation (transition effect); for more information, see [https://developer.mozilla.org/en/docs/Web/CSS/transition-timing-function](https://developer.mozilla.org/en/docs/Web/CSS/transition-timing-function).
    In essence, it lets you establish an acceleration curve, so that the speed of
    the transition can vary over its duration. Later on, we'll see that you can also
    use keyframes to describe the different states of the transition.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个声明中，`ease-in-out` 值设置了动画的过渡时间函数（过渡效果）；有关更多信息，请参阅 [https://developer.mozilla.org/en/docs/Web/CSS/transition-timing-function](https://developer.mozilla.org/en/docs/Web/CSS/transition-timing-function)。本质上，它允许您建立一个加速度曲线，这样过渡的速度可以在其持续时间中变化。稍后，我们将看到您还可以使用关键帧来描述过渡的不同状态。
- en: 'The transformations performed are **translate3ds**. The `translate3d()` CSS
    function moves the position of the element in the 3D space. More information can
    be found at [https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate3d](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate3d).
    The carousel moves the carousel items over the *X*-axis as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的转换是 **translate3ds**。`translate3d()` CSS 函数将元素的位置移动到 3D 空间中。更多信息可以在 [https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate3d](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate3d)
    找到。轮播图按照以下方式在 *X*-轴上移动轮播图项：
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Changing the carousel by adding new animations
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过添加新的动画来更改轮播图
- en: When we replace the CSS animation as described in the previous section with
    another animation, the carousel's slider effect changes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们用上一节中描述的另一个动画替换 CSS 动画时，轮播图的滑动效果会改变。
- en: The `Animate.css` project by Daniel Ede contains a lot of CSS animations for
    you to use in your projects. You can use these animations for our carousel too.
    You can find the library at [http://daneden.github.io/animate.css/](http://daneden.github.io/animate.css/).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Daniel Ede 的 `Animate.css` 项目包含了许多您可以在项目中使用的 CSS 动画。您也可以将这些动画用于我们的轮播图。您可以在 [http://daneden.github.io/animate.css/](http://daneden.github.io/animate.css/)
    找到这个库。
- en: We can create the new animation with SCSS code. Because our build process already
    runs the `autoprefixer`, you don't need to take the vendor prefixes into account.
    In our example, we'll use the `flipInX` animation of the `Animate.css` library,
    which rotates the images over the x axis.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 SCSS 代码创建新的动画。因为我们的构建过程已经运行了 `autoprefixer`，所以你不需要考虑供应商前缀。在我们的示例中，我们将使用
    `Animate.css` 库中的 `flipInX` 动画，该动画会在 x 轴上旋转图像。
- en: 'Now add the following SCSS code at the end of the `scss/includes/_carousel.scss`
    file:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将以下 SCSS 代码添加到 `scss/includes/_carousel.scss` 文件的末尾：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If ran the `bootstrap watch` or `gulp` command already, you can inspect the
    results in the browser. You'll find that the images rotate over the *x*-axis now.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已经运行了 `bootstrap watch` 或 `gulp` 命令，你可以在浏览器中检查结果。你会发现图像现在在 *x*-轴上旋转。
- en: JavaScript events of the Carousel plugin
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Carousel 插件的 JavaScript 事件
- en: 'Bootstrap provides custom events for most plugins'' unique actions. The Carousel
    plugin fires the `slide.bs.carousel` (at the beginning of the slide transition)
    and `slid.bs.carousel` (at the end of the slide transition) events. You can use
    these events to add custom JavaScript code. You can, for instance, change the
    background color of the body on the events by adding the following JavaScript
    into the `js/main.js` file:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 为大多数插件的独特操作提供了自定义事件。Carousel 插件触发 `slide.bs.carousel`（在滑动过渡开始时）和 `slid.bs.carousel`（在滑动过渡结束时）事件。你可以使用这些事件来添加自定义
    JavaScript 代码。例如，你可以在事件中通过将以下 JavaScript 添加到 `js/main.js` 文件中来更改页面的背景颜色：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note that the `gulp watch` task is not set for the `js/main.js` file, so you
    have to run the `gulp` or `bootstrap watch` command manually after you are done
    with the changes.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`gulp watch` 任务没有设置为 `js/main.js` 文件，所以你必须在完成更改后手动运行 `gulp` 或 `bootstrap
    watch` 命令。
- en: 'For more advanced changes to the plugin''s behavior, you can overwrite its
    methods by using, for instance, the following JavaScript code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于对插件行为的更高级更改，你可以通过使用例如以下 JavaScript 代码来覆盖其方法：
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This code sets the `transform` CSS property without vendor prefixes. The autoprefixer
    only prefixes your static CSS code. For full browser compatibility, you should
    add the vendor prefixes in the JavaScript code yourself.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码设置了没有供应商前缀的 `transform` CSS 属性。autoprefixer 只为你的静态 CSS 代码添加前缀。为了实现全浏览器兼容性，你应该在
    JavaScript 代码中自己添加供应商前缀。
- en: Tip
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Bootstrap exclusively uses CSS3 for its animations, but Internet Explorer 9
    doesn't support the necessary CSS properties.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 专门使用 CSS3 进行动画，但 Internet Explorer 9 不支持必要的 CSS 属性。
- en: Let's continue leveraging the power of Bootstrap's default styles and set up
    a responsive grid for the content below the carousel.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续利用 Bootstrap 的默认样式，并为轮播图下方的内联内容设置一个响应式网格。
- en: Creating responsive columns
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建响应式列
- en: We have three blocks of text, each with a heading, a short paragraph, and a
    link. In screen sizes of approximately tablet width or more, we would like this
    content to be laid out in three columns. In narrower screen widths, the content
    will organize itself in one full-width column.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有三个文本块，每个块都有一个标题、一个简短的段落和一个链接。在约平板宽度或更宽的屏幕尺寸下，我们希望这些内容以三列的形式布局。在较窄的屏幕宽度下，内容将组织在一个全宽度列中。
- en: Take a moment to visit and read the documentation for Bootstrap's mobile-first
    responsive grid. You can find it at [http://getbootstrap.com/css/#grid](http://getbootstrap.com/css/#grid).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请花点时间访问并阅读 Bootstrap 移动优先响应式网格的文档。您可以在 [http://getbootstrap.com/css/#grid](http://getbootstrap.com/css/#grid)
    找到它。
- en: In short, the grid is based on a 12-column system. The basic class structure
    allows us to use a class of `col-12` for full width, `col-6` for half width, `col-4`
    for one-third width, and so on.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，网格基于一个 12 列系统。基本的类结构允许我们使用 `col-12` 类实现全宽度，`col-6` 类实现半宽度，`col-4` 类实现三分之一宽度，依此类推。
- en: Thanks to the creative use of media queries, Bootstrap's grid can be very adept
    at responding to different screen sizes. Recall that we want our welcome message
    to have a single-column layout up for screens to tablet-size, and then adapt a
    three-column layout at approximately 768 px for larger screens. Conveniently,
    Bootstrap has a built-in breakpoint at 768 px, which is the default value defined
    in the `$grid-breakpoints` Sass variable. Above 768 px is the large range, beginning
    at 992 px, also defined in the `$grid-breakpoints` Sass variable, then the extra-large
    screen, measured at 1,200 px and higher. I'll refer to these as Bootstrap's extra-small,
    small, medium, large, and extra-large breakpoints.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了媒体查询的创造性使用，Bootstrap 的网格可以非常擅长响应不同的屏幕尺寸。回想一下，我们希望我们的欢迎信息在屏幕尺寸为平板电脑时采用单列布局，然后在约
    768 像素的大屏幕上适应三列布局。方便的是，Bootstrap 在 768 像素处有一个内置的断点，这是在 `$grid-breakpoints` Sass
    变量中定义的默认值。超过 768 像素是大型范围，从 992 像素开始，也在 `$grid-breakpoints` Sass 变量中定义，然后是超大型屏幕，测量值为
    1,200 像素及以上。我将把这些称为 Bootstrap 的超小、小、中、大和超大断点。
- en: 'With the medium breakpoint, there is a special column class that uses the formulation
    `col-md-`. Because we want three columns after the small breakpoint, we''ll use
    `class="col-md-4"`. Below the medium breakpoint, the elements will remain full-width.
    Above it, they will shift to one-third width and line up side by side. Notice
    that the navbar also collapses at 768 px. The full structure is given here, with
    paragraph contents abbreviated for clarity:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 使用中等断点，有一个特殊的列类，使用公式 `col-md-`。因为我们希望在小型断点之后有三个列，所以我们将使用 `class="col-md-4"`。在中等断点以下，元素将保持全宽。在其上方，它们将变为三分之一的宽度并并排排列。注意，导航栏在
    768 像素处也会折叠。完整的结构如下，其中段落内容被省略以清晰起见：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You should edit the preceding code in the `html/pages/index.html` file.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在 `html/pages/index.html` 文件中编辑前面的代码。
- en: 'If you''re unfamiliar with the `container` and `row` classes, here is what
    they do:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉 `container` 和 `row` 类，以下是它们的作用：
- en: The `container` class constrains the width of the content and keeps it centered
    within the page
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container` 类限制了内容的宽度，并使其在页面中居中'
- en: The `row` class provides the wrapper for our columns, allowing extra left and
    right margins for the column gutters
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`row` 类为我们的列提供包装，允许额外的左右边距用于列间隙'
- en: Both the `container` class and the `row` class are `clearfixed` so that they
    contain floating elements and clear any previous floating elements
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container` 类和 `row` 类都是 `clearfixed`，这样它们可以包含浮动元素并清除任何之前的浮动元素'
- en: 'Now, save the file and run the `bootstrap watch` or `gulp` command if you have
    not already done so. With your browser width above 768 px, you should see the
    following three-column layout take shape:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，保存文件，如果你还没有这样做，运行 `bootstrap watch` 或 `gulp` 命令。当你的浏览器宽度超过 768 像素时，你应该会看到以下三列布局形成：
- en: '![Creating responsive columns](img/00130.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![创建响应式列](img/00130.jpeg)'
- en: 'Resize your browser window below 768 px, and you''ll see it revert to a single
    column:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 调整浏览器窗口大小至 768 像素以下，你会看到它恢复为单列布局：
- en: '![Creating responsive columns](img/00131.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![创建响应式列](img/00131.jpeg)'
- en: With our responsive grid in place, let's turn those links into clearly visible
    calls to action by utilizing Bootstrap's button styles.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的响应式网格就位后，让我们利用 Bootstrap 的按钮样式将这些链接转换为清晰的行动号召。
- en: Turning links into buttons
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将链接转换为按钮
- en: 'Turning our key content links into visually effective buttons is straightforward.
    The key classes we''ll employ are as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的关键内容链接转换为视觉上有效的按钮是直接的。我们将使用的键类如下：
- en: The `btn` class will style a link as a button.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`btn` 类将链接样式化为按钮。'
- en: The `btn-primary` class will assign a button the color of our primary brand
    color.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`btn-primary` 类将按钮的颜色设置为我们的主要品牌颜色。'
- en: The `pull-xs-right` class will float the link to the right, moving it into wider
    space to make it a more appealing target. The `xs` part of the class name means
    that it should be applied on every viewport wider than the extra-small breakpoint
    of 0 pixels. The `pull-md-right` class only floats the elements on viewports wider
    than 768 px.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pull-xs-right` 类将链接浮动到右边，将其移动到更宽的空间，使其成为一个更有吸引力的目标。类名中的 `xs` 部分表示它应该应用于每个比超小断点
    0 像素更宽的视口。`pull-md-right` 类仅在视口宽度超过 768 像素时浮动元素。'
- en: 'Add these classes to the link at the end of each of our three content blocks:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些类添加到我们三个内容块的末尾的链接中：
- en: '[PRE19]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Save. You should see the following result:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 保存。你应该会看到以下结果：
- en: '![Turning links into buttons](img/00132.jpeg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![将链接转换为按钮](img/00132.jpeg)'
- en: We've made great progress. Our key elements are taking shape.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经取得了很大的进步。我们的关键元素正在成形。
- en: With our fundamental markup structure in place, we can start working on the
    finer details. Getting there will require some custom CSS. We're going to approach
    this by leveraging the power of Bootstrap's Sass files. If you're new to Sass,
    no worries! I'll walk you through it step by step.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的基本标记结构就绪后，我们可以开始处理更细致的细节。达到这个目标将需要一些自定义 CSS。我们将通过利用 Bootstrap 的 Sass 文件的力量来处理这个问题。如果你对
    Sass 不熟悉，不用担心！我会一步步带你了解。
- en: Understanding the power of Sass
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Sass 的强大功能
- en: In the following sections, we will be organizing, editing, customizing, and
    creating SCSS files in order to generate the desired CSS for our designs.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将组织、编辑、自定义和创建 SCSS 文件，以生成我们设计所需的 CSS。
- en: Note
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are unfamiliar with Sass and would like to learn more about it, I would
    recommend reading my *Sass and Compass Designer's Cookbook* book ([https://www.packtpub.com/web-development/sass-and-compass-designers-cookbook](https://www.packtpub.com/web-development/sass-and-compass-designers-cookbook))
    or the documentation at [https://www.sass-lang.com/](https://www.sass-lang.com/).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉 Sass 并且想了解更多关于 Sass 的信息，我建议阅读我的 *Sass and Compass Designer's Cookbook*
    书籍 ([https://www.packtpub.com/web-development/sass-and-compass-designers-cookbook](https://www.packtpub.com/web-development/sass-and-compass-designers-cookbook))
    或 [https://www.sass-lang.com/](https://www.sass-lang.com/) 的文档。
- en: In a nutshell, we may say that generating CSS using the Sass preprocessor is
    an exciting and freeing experience. The key benefits of working with Sass are
    discussed in the following sections.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我们可以这样说，使用 Sass 预处理器生成 CSS 是一种令人兴奋和自由的体验。Sass 的工作优势将在下一节中讨论。
- en: Customizing Bootstrap's Sass according to our needs
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据我们的需求自定义 Bootstrap 的 Sass
- en: 'As we work with Bootstrap''s Sass files, we''ll exert considerable control
    over them by doing the following:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们与 Bootstrap 的 Sass 文件一起工作时，我们将通过以下方式对它们施加相当大的控制：
- en: Organizing our `scss` folder to give us the flexibility and freedom to accomplish
    what we need while making future maintenance easier
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织我们的 `scss` 文件夹，以便我们能够灵活自由地完成所需的工作，同时使未来的维护更加容易
- en: Customizing Bootstrap's Sass variables
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义 Bootstrap 的 Sass 变量
- en: Creating a few custom Sass files of our own
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们自己的几个自定义 Sass 文件
- en: Incorporating a set of font-based icons in our site assets, providing the icons
    that we need for our social media links
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的网站资源中整合一组基于字体的图标，提供我们社交媒体链接所需的图标
- en: In other words, we'll be doing more than merely learning and applying Bootstrap's
    conventions. We'll be bending them to our will.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们将做的不仅仅是学习和应用 Bootstrap 的约定。我们将使它们按照我们的意愿弯曲。
- en: 'In this chapter''s exercise files, open the `scss` directory. Inside, you should
    see the following structure:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的练习文件中，打开 `scss` 目录。在里面，你应该看到以下结构：
- en: '![Customizing Bootstrap''s Sass according to our needs](img/00133.jpeg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![根据我们的需求自定义 Bootstrap 的 Sass](img/00133.jpeg)'
- en: To prepare for what's ahead, I've given you a head start by explaining the new
    layer of organization. All of Bootstrap's Sass files are saved in the `bower_components/bootstrap/scss/`
    folder. You should not modify these files; you can (re)use them as described in
    the next sections. Keeping the original files untouched enables you to update
    Bootstrap without undoing your modifications.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为接下来的内容做准备，我已经通过解释新的组织层来给你一个先发优势。所有的 Bootstrap Sass 文件都保存在 `bower_components/bootstrap/scss/`
    文件夹中。你不应该修改这些文件；你可以（重新）使用它们，如下一节所述。保持原始文件不变，使你能够在不撤销修改的情况下更新 Bootstrap。
- en: 'First, the `app.scss` file imports two partial files:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`app.scss` 文件导入两个部分文件：
- en: '[PRE20]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The file `includes/_bootstrap.scss` is a modified copy of the original `bootstrap.scss`
    file. This file imports all other original Bootstrap files, and it is used in
    the compiling process to create one unified style sheet from all of our imported
    Sass files. The `includes/_variables.scss` file is a modified copy of the original
    `_variables.scss` file. This file contains the declaration of all Bootstrap's
    Sass variables. Because the `includes/_variables.scss` file is imported before
    the original `_variables.scss` file, the variables in it can be used to overwrite
    Bootstrap's default settings.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 `includes/_bootstrap.scss` 是原始 `bootstrap.scss` 文件的修改版。此文件导入所有其他原始 Bootstrap
    文件，并在编译过程中使用，以从所有导入的 Sass 文件中创建一个统一的样式表。文件 `includes/_variables.scss` 是原始 `_variables.scss`
    文件的修改版。此文件包含所有 Bootstrap 的 Sass 变量的声明。因为 `includes/_variables.scss` 文件在原始 `_variables.scss`
    文件之前导入，所以其中的变量可以用来覆盖 Bootstrap 的默认设置。
- en: Why go through this trouble? Because we'll soon be modifying Bootstrap's default
    settings and creating custom Sass files of our own. When we do that, we can leave
    the `Bootstrap` folder and its files as they are while making adjustments in the
    custom files that we will create.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要费这个劲？因为我们很快就会修改Bootstrap的默认设置，并创建我们自己的自定义Sass文件。当我们这样做时，我们可以保持`Bootstrap`文件夹及其文件不变，同时在我们将要创建的自定义文件中进行调整。
- en: Let's begin the customization! We'll start by customizing Bootstrap's variables
    and adding a few new variables of our own.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始定制！我们将从定制Bootstrap的变量并添加一些我们自己的新变量开始。
- en: Customizing variables
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定制变量
- en: 'Next, we''ll create a copy of Bootstrap''s variables file and customize it
    to our needs:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建Bootstrap变量文件的副本，并根据自己的需求进行定制：
- en: Find the `includes/_variables.scss` file in the `scss` folder and open it in
    your editor.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`scss`文件夹中找到`includes/_variables.scss`文件，并在你的编辑器中打开它。
- en: Scanning through the lines of this file, you'll see the variables used to set
    the CSS values for everything from basic colors to the body background, font-families,
    navbar height and background, and so on. It's beautiful to behold. It's even more
    fun to meddle with. Before we meddle, let's create our own copy of this file,
    allowing us to leave Bootstrap's default variables intact in case we ever want
    to revert back to them.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览这个文件的每一行时，你会看到用于设置CSS值的变量，从基本的颜色到主体背景、字体族、导航栏高度和背景等，应有尽有。这看起来非常美观。而且，玩弄这些变量更有趣。在我们开始玩弄之前，让我们创建这个文件的副本，这样我们就可以保留Bootstrap的默认变量，以防我们以后想恢复到它们。
- en: 'Next, let''s implement our new color scheme:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们实现我们的新配色方案：
- en: 'In the topmost section of our new `includes/_variables.scss` file, you''ll
    see the default Bootstrap variables for grays and brand colors:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们新的`includes/_variables.scss`文件的最顶部部分，你会看到Bootstrap的默认灰度和品牌颜色变量：
- en: '[PRE21]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We have the specific values that we''re after. So, let''s simply substitute
    our desired values (feel free to do the math if you prefer!). Then, we''ll add
    an additional two variables to encompass the full range that we need. The result
    is as follows:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有我们想要的特定值。所以，让我们简单地替换我们想要的值（如果你喜欢，可以自由地进行计算！）然后，我们将添加两个额外的变量来涵盖我们需要的完整范围。结果如下：
- en: '[PRE22]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we''ll update the `$brand-primary` variable under `Brand colors`. We''ll
    adjust this to our golden hue:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将更新`Brand colors`下的`$brand-primary`变量。我们将将其调整为我们的金色色调：
- en: '[PRE23]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When you run the bootstrap watch (or gulp) command already, your browser automatically
    reloads after saving the `includes/_variables.scss file`.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你运行bootstrap watch（或gulp）命令时，浏览器会在保存`includes/_variables.scss`文件后自动重新加载。
- en: If this is successful, the most noticeable changes will be in the link color
    and buttons with the `btn-primary` class, which will both take the new `$brand-primary`
    color.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这样做成功，最明显的改变将是链接颜色和具有`btn-primary`类的按钮，它们都将采用新的`$brand-primary`颜色。
- en: Customizing the navbar
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定制导航栏
- en: Now, let's edit the variables that set the navbar height, colors, and hover
    effects.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们编辑设置导航栏高度、颜色和悬停效果的变量。
- en: Let's start by changing the height. The navbar has a padding of `$spacer / 2`
    by default, and the total height is set by the font size and the vertical padding.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从更改高度开始。默认情况下，导航栏的填充是`$spacer / 2`，总高度由字体大小和垂直填充决定。
- en: 'In the local `includes/_variables.scss` file, search for the `$navbar-padding-vertical`
    variable and update it as follows. This will expand the navbar height:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地的`includes/_variables.scss`文件中，搜索`$navbar-padding-vertical`变量，并按以下方式更新它。这将扩展导航栏的高度：
- en: '[PRE24]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now we can set the background color of the navbar. The original HTML code in
    the `html/includes/headers.html` file had a `bg-faded` class. Because we want
    a white background color for our navbar, we can simply remove this class; the
    body already has a white background, and not setting the background property for
    the navbar will color the navbar white too.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以设置导航栏的背景颜色。原始的`html/includes/headers.html`文件中的HTML代码有一个`bg-faded`类。因为我们想让导航栏有白色背景，所以我们可以简单地删除这个类；主体已经有白色背景，不设置导航栏的背景属性也会使导航栏变成白色。
- en: 'You can also use Sass and Bootstrap''s mixins to generate a new `bg-white`
    class. Create a new file `scss/includes/_backgrounds.scss` and edit the following
    SCSS into it:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用Sass和Bootstrap的混入来生成一个新的`bg-white`类。创建一个新的文件`scss/includes/_backgrounds.scss`，并将以下SCSS代码编辑到其中：
- en: '[PRE25]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Note that the `bg-variant` mixin declares the `background-color` and `color`
    properties with `!important`. Because the `color` property is set to `#fff` (white)
    by default, using the `bg-variant` mixin does not seem to be the most flexible
    solution. Setting the `background-color` property for the navbar selector in the
    `scss/includes/_navbar.scss` file is a better solution. You can set the `background-color`
    property as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`bg-variant` 混合器使用 `!important` 声明了 `background-color` 和 `color` 属性。因为 `color`
    属性默认设置为 `#fff`（白色），所以使用 `bg-variant` 混合器似乎不是最灵活的解决方案。在 `scss/includes/_navbar.scss`
    文件中为导航栏选择器设置 `background-color` 属性是一个更好的解决方案。你可以按照以下方式设置 `background-color` 属性：
- en: '[PRE26]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The color of the navbar links is set by the `.navbar-light` or `.navbar-dark`
    classes. You should use the `.navbar-dark` class for navbars with a dark background
    and `.navbar-light` for light background. Our navbar in the `html/includes/header.html`
    file has got the `.navbar-light` class, so in order to change the link colors,
    you''ll have to modify the `$navbar-light-*` variables in the `includes_variables.scss`
    file as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 导航栏链接的颜色由 `.navbar-light` 或 `.navbar-dark` 类设置。你应该为具有深色背景的导航栏使用 `.navbar-dark`
    类，为浅色背景使用 `.navbar-light` 类。我们 `html/includes/header.html` 文件中的导航栏已经具有 `.navbar-light`
    类，因此为了更改链接颜色，你将不得不修改 `includes_variables.scss` 文件中的 `$navbar-light-*` 变量，如下所示：
- en: '[PRE27]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note that we've already changed the `$gray` and `$gray-lighter` variables before,
    and the `$link-hover-color` variable has got the same value as the `$brand-primary`
    variable which we have set to the `#c1ba62;` color value.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们之前已经更改了 `$gray` 和 `$gray-lighter` 变量，并且 `$link-hover-color` 变量的值与 `$brand-primary`
    变量相同，我们将其设置为 `#c1ba62;` 颜色值。
- en: 'If you like having a different background color for the hovered and active
    links, you can open the `scss/includes/_navbar.scss` file with your favorite text
    editor and perform the following steps:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢为悬停和活动链接使用不同的背景颜色，你可以使用你喜欢的文本编辑器打开 `scss/includes/_navbar.scss` 文件并执行以下步骤：
- en: 'First, remove the vertical padding with the following SCSS code:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用以下 SCSS 代码删除垂直填充：
- en: '[PRE28]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now apply the padding on the `.nav-link` selectors and set the background color
    for the hover and active states:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在应用 `.nav-link` 选择器的填充，并设置悬停和活动状态下的背景颜色：
- en: '[PRE29]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Because the `.navbar-brand` has a larger font size, you will have to correct
    the padding for this selector:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为 `.navbar-brand` 有更大的字体大小，所以你必须为这个选择器调整填充：
- en: '[PRE30]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If you did not run the `bootstrap watch` command already, run it now and you
    should see the following new features in your navbar:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有运行 `bootstrap watch` 命令，现在运行它，你应该在你的导航栏中看到以下新功能：
- en: It should grow about 16px (2 x 1em) taller
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该增加大约 16 像素（2 x 1em）的高度
- en: Its background color should turn white
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其背景颜色应变为白色
- en: The nav item backgrounds change on hover and active states
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航项背景在悬停和活动状态下会改变
- en: 'Link text should activate our brand-primary color on hover and when active,
    as shown in the following screenshot:'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接文本应在悬停和活动时激活我们的品牌主色，如下面的截图所示：
- en: '![Customizing the navbar](img/00134.jpeg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![自定义导航栏](img/00134.jpeg)'
- en: Now, let's put our logo image in place.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将我们的标志图像放置到位。
- en: Adding the logo image
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加标志图像
- en: Find the `logo.png` file in the assets/images folder. You may notice that its
    dimensions are large, 900 px wide. In our final design, it will be only 120 px
    wide. Because the pixels will be compressed into a smaller space, this is a relatively
    easy way to ensure that the image will look good on all devices, including retina
    displays. Meanwhile, the file size of the image, which has already been optimized
    for the Web, is only 19 KB.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `assets/images` 文件夹中找到 `logo.png` 文件。你可能注意到其尺寸很大，宽度为 900 像素。在我们的最终设计中，它将只有
    120 像素宽。因为像素将被压缩到更小的空间中，这是确保图像在所有设备上看起来都很好的一种相对简单的方法，包括视网膜显示屏。同时，该图像的文件大小已经为网络优化，仅为
    19 KB。
- en: 'So, let''s put it in place and constrain its width:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们将其放置到位并限制其宽度：
- en: Open the `html/includes/header.html` file in your text editor.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的文本编辑器中打开 `html/includes/header.html` 文件。
- en: 'Search for this line within the navbar markup:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航栏标记中搜索此行：
- en: '[PRE31]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Replace the HTML from the previous step with the following image tag, including
    its `alt` and `width` attributes:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将上一步的 HTML 替换为以下图像标签，包括其 `alt` 和 `width` 属性：
- en: '[PRE32]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Tip
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Be sure to include the width attribute, setting its width to 120 px. Otherwise,
    it will appear very large on the page.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一定要包含宽度属性，将其宽度设置为 120 像素。否则，它将在页面上显得非常大。
- en: 'If you didn''t run the bootstrap watch command already, run it now. You should
    see the logo in place:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有运行 `bootstrap watch` 命令，现在运行它。你应该看到标志已经放置到位：
- en: '![Adding the logo image](img/00135.jpeg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![添加标志图像](img/00135.jpeg)'
- en: 'You may notice that the navbar height has expanded, and that its bottom edge
    no longer lines up with the bottom edge of the active nav item. This is due to
    the padding placed around the `bar-brand` class earlier. We need to adjust the
    appropriate padding values. We can do that in a few quick steps:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到导航栏的高度已经增加，并且其底部边缘不再与活动导航项的底部边缘对齐。这是由于之前围绕`bar-brand`类放置的填充造成的。我们需要调整适当的填充值。我们可以在几个快速步骤中做到这一点：
- en: 'Use your text editor to open the `scss/includes/_navbar.scss` file again. Change
    the padding of the `bar-brand` class as follows:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的文本编辑器再次打开`scss/includes/_navbar.scss`文件。按照以下方式更改`bar-brand`类的填充：
- en: '[PRE33]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: When resizing the width of the image to 120 px, its height becomes around 34.51
    pixels, 34.51 / 16 = 2.16 rem.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当将图像宽度调整为120像素时，其高度变为大约34.51像素，34.51 / 16 = 2.16 rem。
- en: The powers of Sass continue to impress. Of course, we should also take care
    of the collapsed responsive navigation, so resize your browser to a viewport smaller
    than 768 px.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Sass的力量继续给人留下深刻印象。当然，我们也应该注意折叠的响应式导航，所以将浏览器窗口调整到小于768像素的视口大小。
- en: 'The navigation should now look like that shown in the following screenshot:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 导航现在应该看起来如下截图所示：
- en: '![Adding the logo image](img/00136.jpeg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![添加标志图像](img/00136.jpeg)'
- en: 'You will see that there is not enough padding around the logo and that the
    toggle button is not in line with the logo. We will use Sass again to correct
    these issues. Again, open the **s**`css/includes/_navbar.scss`file. Remember that
    we set the vertical padding of the navbar to 0 before. Now wrap this declaration
    into a CSS media query as follows to only apply it for the larger viewports:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 您会看到标志周围的填充不足，切换按钮也没有与标志对齐。我们将再次使用Sass来纠正这些问题。再次打开**s**`css/includes/_navbar.scss`文件。请记住，我们之前将导航栏的垂直填充设置为0。现在将此声明包裹在一个CSS媒体查询中，如下所示，以仅适用于较大的视口：
- en: '[PRE34]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'As already explained, the `media-breakpoint-up` mixin is part of Bootstrap''s
    Sass mixin and can be used to hide or show elements according to Bootstrap''s
    media query ranges. The SCSS preceding code compiles into CSS as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`media-breakpoint-up`混合是Bootstrap Sass混合的一部分，可以根据Bootstrap的媒体查询范围隐藏或显示元素。前面的SCSS代码编译成CSS如下：
- en: '[PRE35]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To get the logo in line with the toggle button, you will have to change the
    `display` property of the logo image from `block` to `inline-block`. You can establish
    that by editing the following SCSS code in the `scss/includes/_navbar.scss` file:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 要使标志与切换按钮对齐，您必须将标志图像的`display`属性从`block`更改为`inline-block`。您可以通过编辑`scss/includes/_navbar.scss`文件中的以下SCSS代码来实现这一点：
- en: '[PRE36]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finally, inspect the latest version of your `scss/includes/_navbar.scss` file.
    In your browser, the results should look like the following screenshot:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，检查您最新的`scss/includes/_navbar.scss`文件。在您的浏览器中，结果应该如下截图所示：
- en: '![Adding the logo image](img/00137.jpeg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![添加标志图像](img/00137.jpeg)'
- en: Now, let's add icon powers.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加图标功能。
- en: Adding icons
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加图标
- en: It's time to add icons to our navigation. **Glyphicons** that come with Bootstrap
    3 are dropped in Bootstrap 4\. Here, we'll use the large library of icons offered
    by **Font Awesome**. Other icon font sets can be found around the Web.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候给我们的导航添加图标了。Bootstrap 3附带的一些**Glyphicons**在Bootstrap 4中被删除了。在这里，我们将使用由**Font
    Awesome**提供的庞大图标库。其他图标字体集可以在网上找到。
- en: Font Awesome is a font icon set that offers 628 icons at the time of writing
    this book. Font Awesome icons are free, open source, and built to play nice with
    Bootstrap. You can see the Font Awesome home page at [http://fortawesome.github.io/Font-Awesome/](http://fortawesome.github.io/Font-Awesome/).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Font Awesome是在编写本书时提供628个图标的字体图标集。Font Awesome图标是免费、开源的，并且旨在与Bootstrap良好协作。您可以在[http://fortawesome.github.io/Font-Awesome/](http://fortawesome.github.io/Font-Awesome/)查看Font
    Awesome的主页。
- en: Let's fold Font Awesome into our workflow.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将Font Awesome整合到我们的工作流程中。
- en: 'Here, we compile the CSS code of Font Awesome into our main `app.css` file:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将Font Awesome的CSS代码编译到我们的主`app.css`文件中：
- en: 'First, install Font Awesome in your project folder by running the following
    command in your console:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过在控制台中运行以下命令，在您的项目文件夹中安装Font Awesome：
- en: '[PRE37]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'After that, you can import Font Awesome''s main SCSS file into your `scss/app.scss`
    file:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，您可以将Font Awesome的主SCSS文件导入到您的`scss/app.scss`文件中：
- en: '[PRE38]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Last but not least, copy the font files to your assets folder:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，将字体文件复制到您的资产文件夹中：
- en: '[PRE39]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The Font Awesome `scss` files include a variable specifying the path to the
    Font Awesome web fonts. We need to check to make sure that this variable matches
    our folder structure. Ensure that the `$fa-font-path` variable is set to `../fonts`
    as follows in `our scss/includes/_variables.scss` file:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Font Awesome的`scss`文件包括一个变量，指定了Font Awesome网络字体的路径。我们需要检查以确保此变量与我们的文件夹结构匹配。确保在`our
    scss/includes/_variables.scss`文件中将`$fa-font-path`变量设置为`../fonts`，如下所示：
- en: '[PRE40]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Note
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This path is relative to the compiled CSS file, which is in our `css` directory
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此路径相对于编译后的CSS文件，该文件位于我们的`css`目录中
- en: 'Now, in the `html/includes/header.html` file, let''s update the icon for the
    Team navbar item to use the Font Awesome icon named `fa-group`. We also need the
    standalone `fa` class: `<i class="fa fa-group"></i> Team`'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，在`html/includes/header.html`文件中，让我们更新团队导航项的图标，使用名为`fa-group`的Font Awesome图标。我们还需要独立的`fa`类：`<i
    class="fa fa-group"></i> 团队`
- en: Save this change to the `html/includes/header.html` file, and refresh your browser.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此更改保存到`html/includes/header.html`文件中，并刷新你的浏览器。
- en: 'If all works as it should, you should see the following result:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按预期工作，你应该会看到以下结果：
- en: '![Adding icons](img/00138.jpeg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![添加图标](img/00138.jpeg)'
- en: Tip
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you see a strange symbol or nothing, that's a sign that the web fonts are
    not coming through. Double-check that your icon classes are correct (including
    the `fa` class), your Font Awesome web font files are in your fonts directory,
    and the path is set correctly in the `scss/includes/_variables.scss` file.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到一个奇怪的符号或什么都没有，那是一个迹象，表明网络字体没有通过。请确保你的图标类是正确的（包括`fa`类），Font Awesome网络字体文件位于你的字体目录中，并且路径在`scss/includes/_variables.scss`文件中设置正确。
- en: Now update your icon markup in the `html/includes/header.html` file to make
    use of the desired Font Awesome icons.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在更新`html/includes/header.html`文件中的图标标记，以便使用所需的Font Awesome图标。
- en: 'The Font Awesome icon page [http://fortawesome.github.io/Font-Awesome/icons/](http://fortawesome.github.io/Font-Awesome/icons/)
    allows you to scan your options. Our mock-up calls for these icons in the navbar:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: Font Awesome图标页面[http://fortawesome.github.io/Font-Awesome/icons/](http://fortawesome.github.io/Font-Awesome/icons/)允许你扫描你的选项。我们的原型在导航栏中需要这些图标：
- en: '[PRE41]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This has the following result:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生以下结果：
- en: '![Adding icons](img/00139.jpeg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![添加图标](img/00139.jpeg)'
- en: This completes our nav, or almost completes it. We've inadvertently created
    a small problem that we need to fix before moving on.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们的导航，或者几乎完成了。我们无意中创建了一个小问题，在继续之前我们需要修复它。
- en: It's time to move on to the carousel.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候转向轮播了。
- en: Styling the carousel
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式化轮播
- en: We're going to take Bootstrap's default carousel styles and apply some significant
    customization. Let's create a new `_scss/includes/carousel.scss` file and import
    it into our `scss/app.scss` file.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将采用Bootstrap的默认轮播样式，并应用一些重要的自定义。让我们创建一个新的`_scss/includes/carousel.scss`文件，并将其导入到我们的`scss/app.scss`文件中。
- en: Now to begin customizing and making aesthetic enhancements.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在开始定制和美化。
- en: Adding top and bottom padding
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加顶部和底部填充
- en: 'Let''s add some top and bottom padding to the `.carousel` element itself and
    add our `@gray-lighter` color for a background color:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`.carousel`元素本身添加一些顶部和底部填充，并使用我们的`@gray-lighter`颜色作为背景色：
- en: '[PRE42]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: After saving and reloading (run the `bootstrap watch` or `gulp` command), you'll
    see the light gray background appears in our newly created space above and below
    the carousel images. This provides a bit of framing to set them off from the other
    elements above and below. In a bit, we'll take advantage of the extra bottom padding
    to position our carousel indicators in a way that allows them to stand out much
    more clearly.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 保存更改并重新加载（运行`bootstrap watch`或`gulp`命令），你会在我们新创建的空间中看到浅灰色背景出现在轮播图像的上方和下方。这为它们提供了些许框架，使它们从上方和下方的其他元素中脱颖而出。稍后，我们将利用额外的底部填充将轮播指示器定位，以便它们能够更加清晰地突出显示。
- en: Now to style the carousel indicators.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来样式化轮播指示器。
- en: Repositioning the carousel indicators
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新定位轮播指示器
- en: 'The carousel indicators serve to inform the user how many slides are in our
    carousel, and highlight the current spot in the rotation. At present, these indicators
    are barely visible, languishing near the bottom center edge of our portfolio images:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 轮播指示器用于告知用户轮播中有多少张幻灯片，并突出显示当前旋转的位置。目前，这些指示器几乎看不见，位于我们投资组合图像的底部中心边缘附近：
- en: '![Repositioning the carousel indicators](img/00140.jpeg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![重新定位轮播指示器](img/00140.jpeg)'
- en: 'Note that I have temporarily set the border color to white to make the preceding
    picture as follows:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我已经临时将边框颜色设置为白色，以便前面的图片如下所示：
- en: '[PRE43]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Let''s move these indicators into their own space, just below the image:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这些指示器移动到它们自己的空间，就在图像下方：
- en: 'We want to move the indicators down even closer to the bottom edge, into our
    light gray area created by the padding we added previously. So, let''s adjust
    the bottom positioning. In addition, we need to remove the default bottom margin
    by zeroing it out. Write down the following SCSS in the `_scss/includes/carousel.scss`
    file:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望将指示器向下移动，使其更靠近底部边缘，进入我们之前添加填充所创建的浅灰色区域。因此，让我们调整底部定位。此外，我们需要通过将其设置为0来移除默认的底部边距。在
    `_scss/includes/carousel.scss` 文件中写下以下 SCSS 代码：
- en: '[PRE44]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Save the file; if you have run the `bootstrap watch` command already, your browser
    automatically reloads.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件；如果你已经运行了 `bootstrap watch` 命令，你的浏览器将自动重新加载。
- en: 'This brings our desired result. The indicators now stay positioned in the desired
    space across all screen dimensions:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这就得到了我们想要的结果。指示器现在在所有屏幕尺寸上都保持在期望的空间中：
- en: '![Repositioning the carousel indicators](img/00141.jpeg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![重新定位轮播指示器](img/00141.jpeg)'
- en: Now let's update their appearance to make them larger and easier to see.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将更新它们的外观，使它们更大，更容易看到。
- en: Styling the indicators
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整指示器的样式
- en: 'We''ll make our carousel indicators more visible by using our gray variables.
    We''ll also increase their size a bit. We can get a start in our `scss/includes/_variables.scss`
    file:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过使用我们的灰色变量来使我们的轮播指示器更明显。我们还将稍微增加它们的大小。我们可以在 `scss/includes/_variables.scss`
    文件中开始这样做：
- en: 'In `scss/includes/_variables.scss`, just after the $`carousel-control` variables,
    you''ll find two variables beginning with `$carousel-indicator`:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `scss/includes/_variables.scss` 中，在 `$carousel-control` 变量之后，你会找到两个以 `$carousel-indicator`
    开头的变量：
- en: '[PRE45]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: These are used to provide a white border around the default indicators, and
    then fill the active indicator with the background color.
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些用于在默认指示器周围提供白色边框，并填充活动指示器的背景颜色。
- en: 'Let''s add a default background color variable here, so that we may fill the
    default indicators with our `$gray-light` value:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里添加一个默认背景颜色变量，这样我们就可以用我们的 `$gray-light` 值填充默认指示器：
- en: '[PRE46]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Then, we''ll update the active background color:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将更新活动背景颜色：
- en: '[PRE47]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Finally, we''ll make the border color transparent:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将使边框颜色透明：
- en: '[PRE48]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Save, compile, and refresh.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存，编译，并刷新。
- en: 'At present, this has the effect of making all but the active item invisible:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，这会使除了活动项之外的所有项都不可见：
- en: '![Styling the indicators](img/00142.jpeg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![调整指示器的样式](img/00142.jpeg)'
- en: 'Now for some work in the `_scss/includes/_carousel.scss` file:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在 `_scss/includes/_carousel.scss` 文件中做一些工作：
- en: 'In the `_scss/includes/_carousel.scss` file, move to the first set of rules
    for `.carousel-indicator` where we were previously working:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `_scss/includes/_carousel.scss` 文件中，移动到之前工作的 `.carousel-indicator` 规则的第一组：
- en: '[PRE49]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Look for the `li` selector nested under it. Here, let''s edit several values.
    Specifically, we''ll perform the following actions:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在它下面寻找嵌套的 `li` 选择器。在这里，我们将编辑几个值。具体来说，我们将执行以下操作：
- en: Increase the width and height to 16px
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将宽度和高度增加到 16px
- en: Remove the margin
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除边距
- en: Add background color using our newly created variable `$carousel-indicator-bg`
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用我们新创建的变量 `$carousel-indicator-bg` 添加背景颜色
- en: Remove the border line altogether (the transparent value we set for the border
    variable is now merely a failsafe)
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全移除边框线（我们为边框变量设置的透明值现在只是一个安全措施）
- en: 'I''ve implemented these changes in the following code snippet:'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我已经在以下代码片段中实现了这些更改：
- en: '[PRE50]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In Bootstrap''s default CSS, the active indicators are a little larger (12
    px) than normal indicators (10 px); because of that, you have to set the new size
    (16 px) for both the normal and active indicators. You can accomplish that by
    using the Sass and parent reference as in the preceding code snippet. Consider
    the following snippet of SCSS code:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Bootstrap 的默认 CSS 中，活动指示器比普通指示器（12 px）略大；因此，你必须为普通和活动指示器设置新的尺寸（16 px）。你可以通过使用
    Sass 和父引用，如前面的代码片段中所做的那样来完成这个任务。考虑以下 SCSS 代码片段：
- en: '[PRE51]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'This SCSS code compiles in CSS code like the one shown here:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这段 SCSS 代码编译成如下所示的 CSS 代码：
- en: '[PRE52]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Save, and check out the result!
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并查看结果！
- en: '![Styling the indicators](img/00143.jpeg)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![调整指示器的样式](img/00143.jpeg)'
- en: Carousel adjustments accomplished! We've learned a lot in the process—a lot
    about Bootstrap and perhaps a little about Sass as well.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 轮播调整完成！在这个过程中，我们学到了很多——关于 Bootstrap 的很多，也许还有一点关于 Sass。
- en: Let's move on to the next section. What remains is considerably simpler.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到下一部分。剩下的部分相当简单。
- en: Tweaking the columns and their content
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整列及其内容
- en: 'Let''s fine-tune the blocks of content under the three headings **Welcome!**,
    **Recent Updates**, and **Our Team**:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步调整三个标题**欢迎**！、**最新更新**和**我们的团队**下的内容块：
- en: First, let's add the arrow-circle icon to the button in each of these three
    blocks. Recall that we're using Font Awesome for our icon selection.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们将这些三个块中的按钮添加上箭头圆圈图标。回想一下，我们正在使用Font Awesome来选择图标。
- en: Visit the Font Awesome documentation at [http://fortawesome.github.io/Font-Awesome/icons/](http://fortawesome.github.io/Font-Awesome/icons/).
    You'll find the icon that we're after:![Tweaking the columns and their content](img/00144.jpeg)
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问Font Awesome文档，[http://fortawesome.github.io/Font-Awesome/icons/](http://fortawesome.github.io/Font-Awesome/icons/)。您将找到我们需要的图标：![调整列及其内容](img/00144.jpeg)
- en: 'In the `html/pages/index.html` file, add an `i` tag with the appropriate classes
    inside each link. Here is the first one, which I''ve spaced out by adding an extra
    carriage return between elements:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`html/pages/index.html`文件中，为每个链接内部添加一个带有适当类别的`i`标签。这是第一个例子，我已经通过在元素之间添加额外的换行符来使其间隔更开：
- en: '[PRE53]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Repeat for each link.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对每个链接重复此操作。
- en: 'You should now have the desired icon in each of the three buttons:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该在三个按钮中看到所需的图标：
- en: '![Tweaking the columns and their content](img/00145.jpeg)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![调整列及其内容](img/00145.jpeg)'
- en: While we're at it, let's add a bit of vertical padding between the carousel
    and this section of text. Right now, it's pretty tight.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在此同时，让我们在轮播和这段文字部分之间添加一点垂直填充。目前，它们之间的间隔相当紧凑。
- en: 'The question that comes up at this point is where best to compose the styles
    that we''ll need for this; adding extra padding around page content sections will
    likely be a pretty normal practice for us now and in the future. Let''s create
    a Sass file to hold these and other tweaks to the ordinary contents of pages (as
    it happens, we''ll need this file for an additional and more important responsive
    adjustment, so it seems well justified):'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 此时出现的问题是，在哪里最好地编写我们将需要的样式；在页面内容部分添加额外的填充可能现在和将来都会成为我们的常规做法。让我们创建一个Sass文件来保存这些以及其他对页面普通内容的调整（实际上，我们还需要这个文件来进行一个额外的、更重要的响应式调整，所以这样做似乎是合理的）：
- en: Create a file named `scss/includes/_page-contents.scss`.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`scss/includes/_page-contents.scss`的文件。
- en: 'Save it in your `scss` folder alongside your other custom Sass files:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存在您的`scss`文件夹中，与您的其他自定义Sass文件放在一起：
- en: '[PRE54]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Comment the file:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注释文件：
- en: '[PRE55]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, let''s create a sensible class for this purpose and add our desired padding,
    including some padding for the bottom:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为这个目的创建一个合理的类，并添加我们想要的填充，包括底部的一些填充：
- en: '[PRE56]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Save the file.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: 'Add the `scss/includes/_page-contents.scss` file to the imports in the `scss/main.scss`
    file. I''ll add mine in a new section near the bottom of the file and include
    a helpful comment for orientation purposes:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`scss/includes/_page-contents.scss`文件添加到`scss/main.scss`文件中的导入部分。我将在文件底部附近添加一个新的部分，并添加一个有用的注释以供定位：
- en: '[PRE57]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now let''s add the necessary class to our markup. Open the `html/pages/index.html
    file` and add the class `page-contents` to the `div` with the class container,
    which follows just after the carousel including:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们将必要的类添加到我们的标记中。打开`html/pages/index.html`文件，并将类`page-contents`添加到紧跟在轮播之后的具有`container`类的`div`中：
- en: '[PRE58]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Save, and you should see the padding added.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 保存，您应该看到添加的填充。
- en: 'Next, we need to tidy up the narrow-screen view of these blocks. Note that,
    when viewed in single-column layout, the headings do not clear the floated buttons:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要整理这些块在窄屏幕视图中的外观。注意，当以单列布局查看时，标题没有清除浮动的按钮：
- en: '![Tweaking the columns and their content](img/00146.jpeg)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![调整列及其内容](img/00146.jpeg)'
- en: Fixing this is just a little tricky. We might want to add a clear fix to the
    `div` containing each of these three blocks. However, that won't work because
    we need these blocks to float side by side once the viewport width is 768 px or
    higher.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题有点棘手。我们可能想在包含这三个块的`div`中添加一个清除浮动的样式。然而，这不会起作用，因为我们需要这些块在视窗宽度达到768像素或更高时并排浮动。
- en: This calls for a media query. Knowing that our three-column view begins at the
    medium breakpoint, or 768 px, let's set a rule to clear floats when the window
    is 1 pixel below this breakpoint. As seen before, we can use Bootstrap's Sass
    media query mixin to do this.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要使用媒体查询。知道我们的三列视图从中等断点开始，即768像素，让我们设置一个规则，当窗口宽度低于此断点1像素时清除浮动。如前所述，我们可以使用Bootstrap的Sass媒体查询混合来实现这一点。
- en: While we're at it, let's also add some bottom padding to our columns so that
    they have a bit of extra vertical breathing room when stacked.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我们还可以给我们的列添加一些底部填充，以便在堆叠时有更多的垂直空间。
- en: 'Inside the media query mixin, we''ll add a CSS2 attribute selector to select
    all elements with a class that contains `col-`, so that the same rules will apply
    to a column of any size:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在媒体查询混合中，我们将添加一个CSS2属性选择器来选择所有包含`col-`类的元素，以便相同的规则适用于任何大小的列：
- en: '[PRE59]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Save. The result is much improved!
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 保存。结果是大幅改进！
- en: '![Tweaking the columns and their content](img/00147.jpeg)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![调整列及其内容](img/00147.jpeg)'
- en: Much better! Now let's move on to the footer!
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 现在好多了！现在让我们继续处理页脚！
- en: Styling the footer
  id: totrans-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置页脚样式
- en: The biggest feature of the footer is our social icons. Font Awesome to the rescue!
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 页脚最大的特点是我们的社交图标。Font Awesome来帮忙！
- en: Consulting the Font Awesome documentation, we find a slew of available icons
    under the category of **Brand Icons**. Here is the direct link:[http://fortawesome.github.io/Font-Awesome/icons/#brand](http://fortawesome.github.io/Font-Awesome/icons/#brand)
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 咨询Font Awesome文档，我们发现**品牌图标**类别下有一系列可用的图标。这里是直接链接：[http://fortawesome.github.io/Font-Awesome/icons/#brand](http://fortawesome.github.io/Font-Awesome/icons/#brand)
- en: 'Now we only need to replace the text for each social link in our footer, in
    the `html/includes/footer.html` file, with `i` elements, using the appropriate
    classes:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要将页脚中每个社交链接的文本在`html/includes/footer.html`文件中替换为`i`元素，并使用适当的类：
- en: '[PRE60]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'This updated markup puts our icons in place:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 这个更新的标记将我们的图标放置到位：
- en: '![Styling the footer](img/00148.jpeg)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![设置页脚样式](img/00148.jpeg)'
- en: 'Now, perform the following steps to lay them out horizontally and align them
    to the center:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，执行以下步骤以水平排列它们并将它们居中对齐：
- en: Create a new file, `scss/includes/_footer.scss`, to manage these styles.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件`scss/includes/_footer.scss`来管理这些样式。
- en: Save the file to the `scss` directory.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存到`scss`目录。
- en: 'Add an import variable for this file in `__main.less`:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`__main.less`文件中为该文件添加一个导入变量：
- en: '[PRE61]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Now we''ll write the styles we need. Let me simply lay them out, and then list
    what they do:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将编写所需的样式。让我简单列出它们，然后说明它们的作用：
- en: '[PRE62]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Because Bootstrap tries to avoid both element and child selectors in Sass,
    you can consider rewriting the preceding SCSS code as follows:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Bootstrap试图在Sass中避免元素和子选择器，你可以考虑将前面的SCSS代码重写如下：
- en: '[PRE63]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: // Sizing shortcuts
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: // 尺寸快捷方式
- en: '@mixin size($width, $height) {'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '@mixin size($width, $height) {'
- en: 'width: $width;'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 宽度：$width;
- en: 'height: $height;'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 高度：$height;
- en: '}'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@mixin square($size) {'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '@mixin square($size) {'
- en: '@include size($size, $size);'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '@include size($size, $size);'
- en: '}'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE64]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: footer[role="contentinfo"] {
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: footer[role="contentinfo"] {
- en: 'padding-top: 24px;'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部填充：24px;
- en: 'padding-bottom: 36px;'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 底部填充：36px;
- en: 'text-align: center;'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 文本居中；
- en: '}'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE65]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Recommended next steps
  id: totrans-381
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐的下一步
- en: 'Let me strongly recommend at least one additional step you''ll need to take
    before taking a project like this to production. It''s imperative that you take
    time to optimize your images, CSS, and JavaScript. These steps are not difficult:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议在将此类项目投入生产之前，至少采取一个额外的步骤。你必须花时间优化你的图片、CSS和JavaScript。这些步骤并不困难：
- en: Compressing images takes just a bit of time, and it addresses the single largest
    cause for large page footprints. I've already used the save to web process option
    of Photoshop, but chances are you can squeeze a few more bytes out. In the code
    folder (`Build Process Manual`), you can see how to add an image compress task
    to your gulp build process.
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩图片只需一点时间，并且它解决了页面脚部占用空间最大的单一原因。我已经使用了Photoshop的“保存到网页”进程选项，但很可能你还能挤出更多字节。在代码文件夹（`Build
    Process Manual`）中，你可以看到如何将图像压缩任务添加到你的gulp构建过程中。
- en: In addition, we badly need to remove unneeded Bootstrap Sass files from the
    import sequence in the `scss/includes/_bootstrap.scss file`, and then compress
    the resulting `main.css` file.
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，我们迫切需要从`scss/includes/_bootstrap.scss`文件中的导入序列中删除不必要的Bootstrap Sass文件，然后压缩生成的`main.css`文件。
- en: 'Finally, we need to slim down our `plugins.js` file by replacing Bootstrap''s
    all-inclusive `bootstrap.min.js` file with compressed versions of only the three
    plugins that we''re actually using: `carousel.js`, `collapse.js`, and `transitions.js`.
    We then compress the final `plugins.js` file.'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们需要通过用仅使用我们实际使用的三个插件的压缩版本替换Bootstrap的全面`bootstrap.min.js`文件来精简我们的`plugins.js`文件：`carousel.js`、`collapse.js`和`transitions.js`。然后我们压缩最终的`plugins.js`文件。
- en: Combined, these steps can cut the footprint of this website by roughly half.
    In an age where speed matters—both for user retention and for SEO ranking—that's
    a big deal.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 结合这些步骤，可以将这个网站的足迹减少大约一半。在速度至上的时代——无论是为了用户保留还是为了SEO排名——这都意义重大。
- en: 'In addition, there is one other very sensible step you may want to take: We
    know that users of touch-enabled devices appreciate the ability to swipe their
    way forward and back through a carousel.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有另一个非常合理的步骤你可能想要采取：我们知道触控设备用户欣赏能够通过滑动来前进和后退通过轮播的功能。
- en: But, for the present moment, let's stop and celebrate.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，对于当前的时刻，让我们停下来庆祝一下。
- en: Summary
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Let's take stock of what we've accomplished in this chapter. We started a new
    Bootstrap project, powered by Panini, Sass, and Gulp, by using Bootstrap CLI.
    After that, we leveraged Bootstrap's responsive navbar, carousel, and grid system,
    and customized several of Bootstrap's Sass codes and mixins. You also learned
    how to create your own Sass files and folded them seamlessly into the project.
    Last but not least, you folded the Font Awesome icons into our workflow. At the
    end, you improved future maintenance of the site by implementing a thoughtful
    file organization scheme—all without creating code bloat.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下在本章中我们取得了哪些成果。我们通过使用Bootstrap CLI启动了一个新的Bootstrap项目，该项目由Panini、Sass和Gulp提供支持。之后，我们利用了Bootstrap的响应式导航栏、轮播和网格系统，并自定义了Bootstrap的一些Sass代码和混入。你还学会了如何创建自己的Sass文件，并将它们无缝地整合到项目中。最后但同样重要的是，你将Font
    Awesome图标整合到我们的工作流程中。最终，通过实施一个深思熟虑的文件组织方案，我们改进了网站的后期维护——这一切都没有产生代码冗余。
- en: With this experience under your belt, you're equipped to bend Bootstrap to your
    will, using its power to speed website development, and then customizing the design
    to your heart's content. In future chapters, we'll expand your experience further.
    First, however, let's take this design to create a complex business home page.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 在积累了这些经验之后，你将能够按照自己的意愿弯曲Bootstrap，利用其力量加速网站开发，并随心所欲地定制设计。在未来的章节中，我们将进一步扩展你的经验。然而，首先，让我们将这个设计应用到创建一个复杂的商业主页。
- en: Assessments
  id: totrans-392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Which of the following classes will assign the color of our primary brand color
    to a button?
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个类将把我们的主要品牌颜色应用到按钮上？
- en: '`btn-primary`'
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`btn-primary`'
- en: '`button-primary`'
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`button-primary`'
- en: '`btn`'
  id: totrans-396
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`btn`'
- en: '`bttn-primary`'
  id: totrans-397
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bttn-primary`'
- en: Which of the following is the right code for a `media breakup` point?
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个是`media breakup`点的正确代码？
- en: '`.include media-breakpoint-up(md) {padding-top: 0,padding-down: 0;}`'
  id: totrans-399
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.include media-breakpoint-up(md) {padding-top: 0,padding-down: 0;}`'
- en: '`@include media-breakpoint-up(md) {padding-top: 0;padding-bottom: 0;}`'
  id: totrans-400
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@include media-breakpoint-up(md) {padding-top: 0;padding-bottom: 0;}`'
- en: '`$include media-breakpoint-up(md) {padding-up: 0,padding-bottom: 0;}`'
  id: totrans-401
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$include media-breakpoint-up(md) {padding-up: 0,padding-bottom: 0;}`'
- en: '`&includes media-breakpoint-up(md) {padding-top: 0,padding-bottom: 0,}`'
  id: totrans-402
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`&includes media-breakpoint-up(md) {padding-top: 0,padding-bottom: 0,}`'
- en: Which class will float the link to the right, moving it into wider space to
    make it a more appealing target?
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个类会将链接浮动到右边，使其移动到更宽的空间，从而使其成为一个更具吸引力的目标？
- en: '`pull-xs-right`'
  id: totrans-404
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pull-xs-right`'
- en: '`pulls-xs-right`'
  id: totrans-405
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pulls-xs-right`'
- en: '`pull-right`'
  id: totrans-406
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pull-right`'
- en: '`pulls-xl-right`'
  id: totrans-407
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pulls-xl-right`'
- en: Which of the following statement is right for using the grey color to style
    elements across bootstrap?![Assessments](img/00150.jpeg)
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个陈述是关于使用灰色颜色在Bootstrap中样式化元素的正确说法？![评估](img/00150.jpeg)
- en: Both a and c
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: a 和 c
- en: Only c
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有 c
- en: Only d
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有 d
- en: Only a
  id: totrans-412
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有 a
- en: What should be in the place of `'?'` in the following syntax:![Assessments](img/00151.jpeg)
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下语法中，`'?'`的位置应该是什么：![评估](img/00151.jpeg)
- en: '`.`'
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.`'
- en: '`#`'
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`#`'
- en: '`@`'
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@`'
- en: '`$`'
  id: totrans-417
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$`'
