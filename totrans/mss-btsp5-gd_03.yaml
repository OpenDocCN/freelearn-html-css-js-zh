- en: '*Chapter 2*: Using and Compiling Sass'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第二章*: 使用和编译 Sass'
- en: This chapter is an introduction to **Sass**. If you’re new to Sass, you should
    definitely go through this chapter to learn the basics of Sass, which is the language
    the Bootstrap styles are written in. If you’re already familiar with Sass, you
    can skip this chapter, but I will still suggest you take a look at the *Sass features
    used by Bootstrap* and *Most important Sass features for Bootstrap developers*
    sections. This will prepare you before starting the next chapter about customizing
    Bootstrap.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是 Sass 的介绍。如果你是 Sass 的初学者，你绝对应该阅读这一章来学习 Sass 的基础知识，Bootstrap 样式就是用 Sass 编写的。如果你已经熟悉
    Sass，你可以跳过这一章，但我仍然建议你查看 *Bootstrap 使用的 Sass 功能* 和 *Bootstrap 开发者最重要的 Sass 功能*
    部分。这将为你开始下一章关于自定义 Bootstrap 做好准备。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: What is Sass?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sass 是什么？
- en: Sass syntax
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sass 语法
- en: Sass features
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sass 功能
- en: Sass features used by Bootstrap
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap 使用的 Sass 功能
- en: Most important Sass features for Bootstrap developers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap 开发者最重要的 Sass 功能
- en: Compiling Sass
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译 Sass
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To preview the examples, you will need a code editor
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要预览示例，你需要一个代码编辑器
- en: 'To compile Sass to CSS, you will need either of the following:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将 Sass 编译成 CSS，你需要以下任何一个：
- en: '**Node.js**, if you prefer a **command-line interface** (**CLI**) using Terminal
    (Mac) or Command Prompt (Windows)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js**，如果你更喜欢使用终端（Mac）或命令提示符（Windows）的**命令行界面**（**CLI**）'
- en: '**Scout-App**, if you prefer a **graphical user interface** (**GUI**)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Scout-App**，如果你更喜欢**图形用户界面**（**GUI**）'
- en: '**Visual Studio Code**, if you prefer to use an extension from the Visual Studio
    Code Marketplace'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**，如果你更喜欢使用 Visual Studio Code 市场上的扩展'
- en: I will explain all these approaches in this chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在本章中解释所有这些方法。
- en: You can find the code files of the chapter on GitHub at [https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide](https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 上找到本章的代码文件，链接为 [https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide](https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide)。
- en: What is Sass?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sass 是什么？
- en: Sass is an abbreviation of **Syntactically Awesome Style Sheets**. It is a special
    kind of stylesheet language known as a preprocessor scripting language that extends
    the default capabilities of CSS. This enables you to use JavaScript-like logic
    and features in the code, such as **variables**, **nesting**, **mixins**, **inheritance**,
    **partials**, **functions**, **mathematical operations**, and more. All of this
    helps you write more robust and maintainable code by automating repetitive tasks,
    reducing the number of errors, creating reusable code snippets, and more. Sass
    has a syntax similar to CSS, but the Sass files need to be compiled to regular
    CSS before they can be rendered in browsers. This can be done using different
    tools, which we will learn more about later in this chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Sass 是 **Syntactically Awesome Style Sheets** 的缩写。它是一种特殊的样式表语言，称为预处理器脚本语言，它扩展了
    CSS 的默认功能。这使得你可以在代码中使用类似 JavaScript 的逻辑和功能，例如 **变量**、**嵌套**、**混入**、**继承**、**部分**、**函数**、**数学运算**等。所有这些都有助于你通过自动化重复性任务、减少错误数量、创建可重用代码片段等方式编写更健壮、更易于维护的代码。Sass
    的语法类似于 CSS，但 Sass 文件在浏览器中渲染之前需要编译成常规 CSS。这可以通过不同的工具完成，我们将在本章后面了解更多关于这些工具的信息。
- en: Sass was first released in 2006 and is still being actively supported and developed
    by a large community. It is by far the most popular and used CSS preprocessor,
    with **Less** and **Stylus** being two other established CSS preprocessors in
    the market.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Sass 首次发布于 2006 年，并且仍然由一个庞大的社区积极支持和开发。它是目前最受欢迎和使用的 CSS 预处理器，**Less** 和 **Stylus**
    是市场上另外两个成熟的 CSS 预处理器。
- en: In the following section, we will take a look at the Sass syntax.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将查看 Sass 语法。
- en: Sass syntax
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sass 语法
- en: 'Sass supports two different syntaxes: the original indented Sass syntax and
    the **SCSS** syntax, which is basically a superset of regular **CSS**. The SCSS
    syntax is the easiest one for beginners, the most popular one, and the one used
    for the Bootstrap styles. It’s also the one that I will be using throughout this
    book. However, both of these different syntaxes support the same features of Sass.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Sass 支持两种不同的语法：原始缩进 Sass 语法和 **SCSS** 语法，它基本上是常规 **CSS** 的超集。SCSS 语法对于初学者来说是最简单的，最受欢迎的，也是
    Bootstrap 样式所使用的。它也是我将在整本书中使用的语法。然而，这两种不同的语法都支持 Sass 的相同功能。
- en: Comparison between the original Sass syntax and the modern Sass syntax
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原始Sass语法与现代Sass语法的比较
- en: The original syntax uses the `.sass` file extension. It uses indentation instead
    of curly braces to separate code blocks, and *newline* characters (every time
    you hit the *Enter* key) to separate rules within a code block.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 原始语法使用`.sass`文件扩展名。它使用缩进来代替花括号来分隔代码块，使用*换行符*（每次按*Enter*键时）来分隔代码块内的规则。
- en: 'The indented syntax looks like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 缩进语法看起来是这样的：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The modern syntax uses the `.scss` file extension. **SCSS** is an abbreviation
    for **Sassy CSS**. It uses curly braces to separate code blocks, and semicolons
    to separate rules within a code block.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现代语法使用`.scss`文件扩展名。**SCSS**是**Sassy CSS**的缩写。它使用花括号来分隔代码块，使用分号来分隔代码块内的规则。
- en: 'The SCSS syntax looks like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: SCSS语法看起来是这样的：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Both types of syntaxes will output the following CSS:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 两种语法都会输出以下CSS：
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As you can see, they’re similar. But SCSS allows you more options to format
    your code as long as you use semicolons and curly braces in the same way as in
    CSS, while the original Sass syntax requires stricter formatting because of its
    reliance on indentation and line breaks.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它们很相似。但SCSS允许你使用分号和花括号以与CSS相同的方式格式化代码，而原始Sass语法由于依赖于缩进和换行符，因此需要更严格的格式化。
- en: Parent selector
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 父选择器
- en: With Sass, you can use a parent selector with the ampersand symbol, `&`. This
    special selector is invented by Sass and used in nested selectors to refer to
    the parent selector. The ampersand will be replaced by the parent selector, no
    matter how many levels you are nesting (nesting will be described later in this
    section). You can use this in different ways, and we will now go through some
    examples.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Sass，你可以使用带有井号符号的父选择器，`&`。这个特殊选择器是由Sass发明的，用于嵌套选择器中引用父选择器。无论你嵌套了多少层（嵌套将在本节后面描述），井号都会被父选择器替换。你可以用不同的方式使用它，现在我们将通过一些示例来展示。
- en: Adding an extra class
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个额外的类
- en: 'If you want to create a more specific selector with two classes, you can use
    the ampersand as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要创建一个更具体的带有两个类的选择器，你可以像下面这样使用井号：
- en: '[PRE22]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This will generate the following output:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下输出：
- en: '[PRE27]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Adding pseudo-classes
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加伪类
- en: 'To write common pseudo-classes for a certain selector, you can do the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要为某个选择器编写常见的伪类，你可以这样做：
- en: '[PRE30]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This compiles to the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这会编译成以下内容：
- en: '[PRE35]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Qualifying based on another selector
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于另一个选择器进行限定
- en: 'You can qualify a selector by using the ampersand after another selector. So,
    if you, for example, want to change the styling of an element when it’s being
    used inside of another element, you can do it like so:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在另一个选择器后面使用井号来限定选择器。所以，例如，如果你想改变一个元素在另一个元素内部使用时的样式，你可以这样做：
- en: '[PRE38]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This compiles to the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这会编译成以下内容：
- en: '[PRE41]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This style rule will only apply to a `.heading` class when it’s a child of a
    `.alert` class.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这条样式规则仅适用于`.heading`类，当它是`.alert`类的子类时。
- en: Modifying the ampersand
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改井号
- en: 'The ampersand can be modified by adding a string of text right after it. Consider
    the following example for different button styles:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在另一个选择器后面添加一个字符串来修改井号。以下是一个不同按钮样式的示例：
- en: '[PRE42]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'This will compile to the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译成以下内容：
- en: '[PRE47]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This is very helpful when using a naming methodology that, instead of combined
    selectors, uses dashes and underscores to create child selectors or modifier selectors.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这在采用命名方法时非常有用，该方法不是使用组合选择器，而是使用破折号和下划线来创建子选择器或修饰选择器。
- en: Now that we have learned about the two different syntaxes for Sass and the special
    parent selector, we can move on to learn about the different Sass features.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Sass的两种不同语法和特殊父选择器，我们可以继续学习Sass的不同特性。
- en: Sass features
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sass特性
- en: In this section, we will take a look at some of the most used features of Sass.
    This will just be a brief introduction to get familiar with Sass code and not
    a detailed guide, as we’re not going to write much Sass code during the course
    of this book.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨Sass的一些最常用特性。这只是一个简要的介绍，让你熟悉Sass代码，而不是一个详细的指南，因为我们不会在本书的整个过程中写很多Sass代码。
- en: Variables
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: 'Sass variables can be used to store any kind of CSS value that you want to
    reuse. Variables are, for example, helpful to use for colors when you need to
    implement a consistent color scheme across many components and potentially need
    to change one or more of the colors later in the process. This can then be done
    simply by updating the value of the variable. To create a variable, you simply
    assign a value to a name that begins with the `$` symbol. Here is an example of
    creating and using a variable:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Sass变量可以用来存储任何你想要复用的CSS值。例如，当需要在一个组件中实现一致的配色方案，并且可能需要在后续过程中更改一个或多个颜色时，变量非常有用。这可以通过简单地更新变量的值来完成。要创建一个变量，你只需将一个值分配给以`$`符号开头的名称。以下是一个创建和使用变量的示例：
- en: '[PRE50]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'When the Sass file is processed, it takes the values of the variables and places
    them in the regular CSS. The generated CSS will look like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当Sass文件被处理时，它会取变量的值并将它们放在常规CSS中。生成的CSS将看起来像这样：
- en: '[PRE54]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Default values
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认值
- en: If you assign a value to a variable that already has a value, it will be overwritten.
    But it is also possible to use the `!default` flag to only assign a new value
    to a variable if that variable is not already defined or the value is null. This
    is useful when creating Sass libraries such as Bootstrap, where you want to allow
    the users to configure the variables before generating the CSS. If the user does
    not configure any variables, the default value set by the library will be used.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你给一个已经赋值的变量赋值，它将被覆盖。但也可以使用`!default`标志，仅在变量尚未定义或值为null时才给变量赋新值。这在创建Sass库（如Bootstrap）时非常有用，你希望用户在生成CSS之前配置变量。如果用户没有配置任何变量，库设置的默认值将被使用。
- en: 'Here’s an example with the normal use of variables that will be overridden:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用变量正常使用且将被覆盖的示例：
- en: '[PRE57]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'This compiles to the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译成以下内容：
- en: '[PRE62]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The background color of the button becomes red since the value of the `$color-primary`
    variable has been overridden.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮的背景颜色变成了红色，因为`$color-primary`变量的值已被覆盖。
- en: 'If you instead use the `!default` flag, it will work like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用`!default`标志，它将像这样工作：
- en: '[PRE65]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'This compiles to the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译成以下内容：
- en: '[PRE70]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: As we can see, the background color of the button will now remain blue, since
    the `!default` flag won’t change the value of the `$color-primary` variable.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，按钮的背景颜色现在将保持蓝色，因为`!default`标志不会改变`$color-primary`变量的值。
- en: Nesting
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌套
- en: With Sass, you can nest your CSS selectors and achieve the same visual hierarchy
    as your HTML. While nesting CSS selectors, having many levels is generally considered
    a bad practice; using carefully nested CSS selectors is a good way to make your
    code more readable.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Sass，你可以嵌套你的CSS选择器，并实现与HTML相同的视觉层次结构。在嵌套CSS选择器时，有很多层级通常被认为是一种不好的做法；使用精心嵌套的CSS选择器是使你的代码更易读的好方法。
- en: 'Take, for example, this navigation component created with an unordered list
    of links:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以例如这个使用无序列表链接创建的导航组件为例：
- en: '[PRE73]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'To get a better overview in our code, we can nest the CSS selectors in the
    following way to reflect the structure of our HTML:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的代码中获得更好的概览，我们可以以下面的方式嵌套CSS选择器，以反映我们的HTML结构：
- en: '[PRE85]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'This compiles to the following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译成以下内容：
- en: '[PRE98]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Partials and import
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Partials和导入
- en: Partials are small files with Sass code that you can import into other Sass
    files. This is useful for organizing your code into different parts and modules
    for a better overview of your project. A Sass partial file begins with the underscore
    character (`_`), which will prevent it from being generated into its own CSS file.
    To import a Sass partial into another file, you should use the `@import` rule.
    You don’t need to include the file extension and you can omit the leading underscore
    character.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Partials是包含Sass代码的小型文件，你可以将其导入到其他Sass文件中。这对于将代码组织成不同的部分和模块，以便更好地了解项目非常有用。Sass
    partial文件以下划线字符（`_`）开头，这将防止它生成自己的CSS文件。要将Sass partial导入到另一个文件中，你应该使用`@import`规则。你不需要包含文件扩展名，并且可以省略开头的下划线字符。
- en: Since the Sass `@import` rule is handled during compilation – unlike the regular
    CSS `@import` rule, which requires multiple HTTP requests – you get access to
    mixins, functions, and variables.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Sass的`@import`规则在编译期间处理——与需要多个HTTP请求的常规CSS `@import`规则不同——你可以访问mixins、函数和变量。
- en: 'In the following example, we will have two Sass partials, `_button.scss` and
    `_link.scss`, and one main file, `styles.scss`, that imports them:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将有两个Sass部分，`_button.scss`和`_link.scss`，以及一个主文件`styles.scss`，它将导入它们：
- en: 'First partial’s filename: `_button.scss`'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个部分文件的名称：`_button.scss`
- en: '[PRE109]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Second partial’s filename: `_link.scss`'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个部分文件的名称：`_link.scss`
- en: '[PRE113]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Main file: `styles.scss`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 主文件：`styles.scss`
- en: '[PRE117]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'This will compile to the following:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译成以下内容：
- en: '[PRE120]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Import is being deprecated
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`@import`正在被弃用'
- en: The use of the `@import` rule is discouraged by the Sass team. It will be phased
    out during the following years and eventually removed completely. Instead, the
    `@use` rule should be used. Bootstrap uses the `@import` rule in their Sass code,
    and that is why I’m using it here instead of `@use`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Sass团队不鼓励使用`@import`规则。在未来几年内，它将被逐步淘汰，并最终完全移除。相反，应该使用`@use`规则。Bootstrap在其Sass代码中使用`@import`规则，这就是为什么我在这里使用它而不是`@use`。
- en: Mixins
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mixins
- en: With mixins, you can group together CSS declarations that you want to reuse
    across your project. Mixins can also receive arguments allowing them to be customized
    for each time they are being used. They are defined using the `@mixin` rule and
    are included in the code using the `@include` rule. Mixins copy the styles into
    the place they are being used.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 使用mixin，你可以将你想要在整个项目中重复使用的CSS声明组合在一起。mixin还可以接收参数，允许它们在每次使用时进行自定义。它们使用`@mixin`规则定义，并使用`@include`规则在代码中包含。mixin将样式复制到它们被使用的地方。
- en: Simple mixin
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简单mixin
- en: 'Here’s an example of a simple mixin with no arguments. It’s a so-called `clearfix`
    mixin, which is taken directly from the Bootstrap 5 Sass code and also used for
    its `clearfix` helper utility:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个没有参数的简单mixin示例。这是一个所谓的`clearfix` mixin，它直接来自Bootstrap 5 Sass代码，并且也用于其`clearfix`辅助工具：
- en: '[PRE127]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'This compiles to the following:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这会编译成以下内容：
- en: '[PRE137]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: Mixin with argument
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带参数的mixin
- en: 'In this example, we see a mixin for a simple grid. It has the `$grid` argument
    with the `true` default value. After the definition of the mixin, we include it
    for two elements. The first one will use the default argument to get the `display`
    value (`grid`) and the other will use `false` as an argument to get the `display`
    value (`flex`):'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们看到一个简单的网格mixin。它有一个默认值为`true`的`$grid`参数。在mixin的定义之后，我们将其包含在两个元素中。第一个将使用默认参数来获取`display`值（`grid`），而另一个将使用`false`作为参数来获取`display`值（`flex`）：
- en: '[PRE142]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'This will compile to the following:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译成以下内容：
- en: '[PRE155]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Extend
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展
- en: '**Extends** are another method of reusing CSS declarations in Sass. With this
    method, you can share the styles of one selector in another selector. When you
    extend a class selector to another selector, the result is equal to adding that
    class to the HTML element. Extending a selector does not copy any styles as mixins
    do, but instead, updates the style rule of the *extended* selector to also contain
    the *extending* selector.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**扩展**是Sass中重复使用CSS声明的另一种方法。使用这种方法，你可以在另一个选择器中共享一个选择器的样式。当你将一个类选择器扩展到另一个选择器时，结果是等于将那个类添加到HTML元素中。扩展选择器不会像mixin那样复制任何样式，而是更新扩展选择器的样式规则，使其也包含扩展选择器的样式。'
- en: 'Here’s an example of a simple `.alert` class with border and padding. Nested
    inside this is a modified parent selector that generates the `.alert-success`
    class, which will extend the `.alert` class plus add a background color:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个带有边框和内边的简单`.alert`类的示例。在这个示例内部嵌套了一个修改过的父选择器，它生成`.alert-success`类，这个类将扩展`.alert`类并添加背景颜色：
- en: '[PRE161]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'This compiles to the following:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这会编译成以下内容：
- en: '[PRE169]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: As you can see, the `.alert-success` class is now added to the style declaration
    for the `.alert` class. So, to clarify, when one class selector extends another,
    the styles belonging to the extended selector will now also be available for the
    extending selector.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`.alert-success`类现在被添加到`.alert`类的样式声明中。因此，为了澄清，当一个类选择器扩展另一个选择器时，扩展选择器所属的样式现在也将对扩展选择器可用。
- en: Operators
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运算符
- en: With **operators**, you can do basic mathematical calculations with different
    values in your CSS. Besides the basic mathematical calculations such as addition,
    subtraction, multiplication, and division, you can check for relation and equality
    for various values, and more.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**运算符**，你可以在CSS中对不同值进行基本的数学计算。除了基本的数学计算，如加法、减法、乘法和除法之外，你还可以检查各种值之间的关系和相等性，还有更多。
- en: 'Here are some examples of basic mathematical calculations for both numbers
    and strings:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些基本的数学计算示例，适用于数字和字符串：
- en: '[PRE176]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'This compiles to the following:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这会编译成以下内容：
- en: '[PRE189]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: Division with / is deprecated
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`/`进行除法已被弃用
- en: 'Division with */* in Sass is deprecated since it’s being used as a separator
    in CSS. Instead, a division should be done using the built-in `math.div()` math
    module function of Sass like so: `math.div(30, 2)`, which equals `15`.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: Sass中的除法使用`/*`已被弃用，因为它在CSS中用作分隔符。相反，应该使用Sass内建的`math.div()`数学模块函数来进行除法，如下所示：`math.div(30,
    2)`，结果为`15`。
- en: Functions
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: You can create your own functions for specific operations that you need to reuse
    in your project. They are created with the `@function` rule and return a value
    using the `@return` rule. They are called using the normal CSS function syntax.
    Just like mixins, functions can receive arguments, allowing the behavior to be
    customized for each time they are called. The arguments are available within the
    function as variables.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建自己的函数来执行特定的操作，这些操作需要在项目中重复使用。它们通过`@function`规则创建，并使用`@return`规则返回一个值。它们使用正常的CSS函数语法调用。就像混入一样，函数可以接收参数，允许每次调用时自定义行为。参数在函数内部作为变量可用。
- en: 'Here’s a simple function that adds two values together and returns the result.
    It can be either numbers or strings, but in this example, it will be two numbers:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的函数，它将两个值相加并返回结果。这些值可以是数字或字符串，但在这个例子中，它们将是两个数字：
- en: '[PRE202]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: 'This compiles to the following:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这会编译成以下内容：
- en: '[PRE208]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: You must specify the correct number of arguments when calling the function unless
    you make any of them optional by defining a default value for it.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 调用函数时必须指定正确的参数数量，除非你通过为其中一个参数定义默认值来使其变为可选。
- en: 'Here’s how to make the second argument optional by giving it the default value
    of `2`:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 如此即可通过将其默认值设为`2`来使第二个参数变为可选：
- en: '[PRE211]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: 'This compiles to the following:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 这会编译成以下内容：
- en: '[PRE217]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: Special values
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊值
- en: Sass supports many kinds of values. Most of them come from CSS, while some of
    them are specific to Sass. Maps are an example of a special Sass value and are
    used to associate keys and values in a list. Maps are not valid CSS values, so
    they can’t be used on their own. However, Sass provides various functions to work
    with maps.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: Sass支持许多种类的值。其中大部分来自CSS，而一些则是Sass特有的。映射是Sass的特殊值之一，用于在列表中关联键和值。映射不是有效的CSS值，因此不能单独使用。然而，Sass提供了各种函数来处理映射。
- en: 'Here’s a simple example that first defines a `$font-size` map with three key/value
    pairs, and then gets the value of the third key by using the `map-get()` function
    with the name of the map and the key for the requested value as arguments:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的例子，首先定义了一个包含三个键值对的`$font-size`映射，然后通过使用`map-get()`函数，并传入映射名称和请求值的键作为参数来获取第三个键的值：
- en: '[PRE220]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: 'This compiles to the following:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 这会编译成以下内容：
- en: '[PRE228]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: Built-in modules
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内建模块
- en: Sass provides built-in modules containing various functions and mixins. These
    functions were originally globally available, but should now be loaded via the
    `@use` rule (with few exceptions). Among the more useful functions are functions
    for manipulating color values and working with list- and map-based values.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: Sass提供了包含各种函数和混入的内建模块。这些函数最初是全局可用的，但现在应该通过`@use`规则（少数例外）来加载。其中一些更有用的函数是用于操作颜色值和与基于列表和映射的值一起工作的函数。
- en: 'Here’s an example of how to fluidly scale a color property using the `color.scale()`
    function from the built-in color module. In this example, the function is used
    to increase the lightness of the color by 25%, and you can see that this even
    works when using a named color as the argument:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何使用内建颜色模块中的`color.scale()`函数流畅地缩放颜色属性的示例。在这个例子中，该函数用于将颜色的亮度增加25%，你可以看到即使使用命名颜色作为参数，这也同样有效：
- en: '[PRE231]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: 'This compiles to the following:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 这会编译成以下内容：
- en: '[PRE238]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: Now that we have had a look at some of the features of Sass, let’s take a look
    at which features are being used by Bootstrap.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经查看了一些Sass的特性，让我们看看Bootstrap使用了哪些特性。
- en: Sass features used by Bootstrap
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bootstrap使用的Sass特性
- en: This is just a quick overview of the Sass features used by Bootstrap. We will
    dive deeper into how Bootstrap is built in the next chapter.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是对Bootstrap使用的Sass特性的快速概述。我们将在下一章深入探讨Bootstrap是如何构建的。
- en: Syntax
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语法
- en: As already mentioned, the Bootstrap Sass code is written using the SCSS syntax.
    It also uses the `&` parent selector for pseudo-classes and states, together with
    attribute selectors.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Bootstrap Sass代码使用SCSS语法编写。它还使用`&`父选择器来处理伪类和状态，以及属性选择器。
- en: Partials
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部分文件
- en: The Sass code for Bootstrap 5 is divided into 81 partials and five folders.
    These partials are then imported through other partials or regular SCSS files.
    This creates a good overview of all the various parts making up Bootstrap.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 5 的 Sass 代码分为 81 个部分和五个文件夹。这些部分随后通过其他部分或常规 SCSS 文件导入。这为 Bootstrap
    的所有各个部分提供了一个良好的概览。
- en: Variables
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: Variables are used extensively by Bootstrap. They are used to maintain visual
    consistency across components regarding colors, spacing, and more, but they are
    also used in such a way that they can easily be configured by a user before the
    generation of the CSS.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 变量在 Bootstrap 中被广泛使用。它们用于在组件之间保持视觉一致性，例如颜色、间距等，但它们也以这种方式使用，使得用户在生成 CSS 之前可以轻松地进行配置。
- en: Maps
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地图
- en: Maps are often used in Sass libraries and design systems. In Bootstrap, they
    are used primarily for configuring the values used by the utilities.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 地图在 Sass 库和设计系统中经常被使用。在 Bootstrap 中，它们主要用于配置工具所使用的值。
- en: Mixins
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合
- en: Mixins are used a lot throughout the Bootstrap Sass code. They are used for
    layout, components, helpers, utilities, and other visual styling.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 混合在 Bootstrap Sass 代码中广泛使用。它们用于布局、组件、辅助工具、工具和其他视觉样式。
- en: Built-in modules
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内置模块
- en: Bootstrap uses the color and map modules of Sass. It uses functions from the
    color module (as well as other included color functions) to work with the visual
    style regarding colors, and it uses functions from the map module to work with
    map values that are used to generate utilities.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 使用 Sass 的颜色和地图模块。它使用颜色模块中的函数（以及其他包含的颜色函数）来处理与颜色相关的视觉样式，并使用地图模块中的函数来处理用于生成工具的地图值。
- en: We now know how Bootstrap utilizes the various features of Sass. But, what features
    are most important for developers working with customization of Bootstrap? Let’s
    take a look at that now.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Bootstrap 如何利用 Sass 的各种特性。但是，对于与 Bootstrap 定制化工作的开发者来说，哪些特性最为重要？现在让我们来看看。
- en: Most important Sass features for Bootstrap developers
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对 Bootstrap 开发者来说最重要的 Sass 特性
- en: Here’s a quick overview of what Sass features you will use the most when customizing
    Bootstrap.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在定制 Bootstrap 时，以下是一些你将最常使用的 Sass 特性的快速概述。
- en: Variables for customization
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于定制的变量
- en: The ability to use variables with Sass is the most important feature to understand
    when customizing Bootstrap. Most changes that you would want to make require you
    to overwrite a variable already used by Bootstrap.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在定制 Bootstrap 时，理解使用 Sass 变量的能力是最重要的特性。你想要做的多数更改都需要你覆盖 Bootstrap 已经使用的变量。
- en: Maps for the utility API
  id: totrans-371
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具 API 的地图
- en: The special map value that comes with Sass is used together with the utility
    API to generate various utility classes. This can be used to modify or remove
    existing utilities or add your own. We will learn all about how to use the utility
    API in the next chapter.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: Sass 伴随的特殊地图值与工具 API 结合使用，以生成各种工具类。这可以用来修改或删除现有的工具，或者添加你自己的。我们将在下一章中学习如何使用工具
    API。
- en: The utility API
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 工具 API
- en: The utility API is a built-in tool of Bootstrap 5 that is used to generate the
    different utility classes. Sass maps are used to provide settings and options
    for the utility API.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 工具 API 是 Bootstrap 5 的内置工具，用于生成不同的工具类。Sass 地图用于为工具 API 提供设置和选项。
- en: Mixins and extend for semantic code
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合和扩展用于语义化代码
- en: Bootstrap has a lot of mixins used by different Bootstrap elements, but these
    mixins can also be used in your own code. Mixins and the extend feature of Sass
    can both be used to write more semantic code, which we will take a closer look
    at in [*Chapter 8*](B17143_08_epub.xhtml#_idTextAnchor179), *Customizing the Website
    Using Bootstrap 5 Variables, Utility API, and Sass*.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 有许多由不同 Bootstrap 元素使用的混合，但这些混合也可以在你的代码中使用。混合和 Sass 的扩展功能都可以用来编写更语义化的代码，我们将在[*第
    8 章*](B17143_08_epub.xhtml#_idTextAnchor179)中更详细地探讨，*使用 Bootstrap 5 变量、工具 API
    和 Sass 定制网站*。
- en: We have just seen how to use some of the features of Sass, and we will now learn
    how to compile Sass code to regular CSS.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到了如何使用 Sass 的一些特性，现在我们将学习如何将 Sass 代码编译成常规 CSS。
- en: Compiling Sass
  id: totrans-378
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译 Sass
- en: There are various ways that you can compile your Sass code. If you are new to
    Sass and want to experiment with the syntax and features, you can use **Sassmeister**
    and get started right away. If you want to incorporate Sass compilation into your
    development workflow, there are several ways to do this. I will show you three
    different ways of doing this. The first way requires you to use **Node.js** and
    the Terminal or Command Prompt, the second way uses a free application called
    **Scout-App**, and the third way uses an extension for the **Visual Studio Code**
    code editor.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 您有多种方式可以编译您的 Sass 代码。如果您是 Sass 的初学者并想尝试语法和功能，您可以使用 **Sassmeister** 并立即开始。如果您想将
    Sass 编译集成到您的开发工作流程中，有几种方法可以实现。我将向您展示三种不同的方法。第一种方法需要您使用 **Node.js** 和终端或命令提示符，第二种方法使用一个名为
    **Scout-App** 的免费应用程序，第三种方法使用 **Visual Studio Code** 代码编辑器的扩展。
- en: Experimenting with Sass using Sassmeister
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Sassmeister 进行 Sass 实验
- en: Sassmeister, which can be visited at [sassmeister.com](http://sassmeister.com),
    is a free tool to experiment with Sass in a playground environment. You can use
    either the Sass or SCSS syntax, select between different Sass compilers, define
    the CSS output, and more. All the examples in this chapter can be seen in action
    using Sassmeister.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: Sassmeister，可在 [sassmeister.com](http://sassmeister.com) 访问，是一个在沙盒环境中实验 Sass
    的免费工具。您可以使用 Sass 或 SCSS 语法，选择不同的 Sass 编译器，定义 CSS 输出，等等。本章中的所有示例都可以在 Sassmeister
    中看到实际效果。
- en: '![Figure 2.1 – Sassmeister Sass playground on sassmeister.com ](img/Figure_2.1_B17143.jpg)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – Sassmeister Sass 沙盒环境在 sassmeister.com](img/Figure_2.1_B17143.jpg)'
- en: Figure 2.1 – Sassmeister Sass playground on sassmeister.com
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – Sassmeister Sass 沙盒环境在 sassmeister.com
- en: Incorporating Sass compilation into a development workflow
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Sass 编译集成到开发工作流程中
- en: In the next three subsections, I will describe different ways of incorporating
    Sass compilation into a development workflow. For all these approaches, we will
    use the same HTML file and SCSS file. You will have to create these files yourself
    and place them in a project folder.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的三个小节中，我将描述将 Sass 编译集成到开发工作流程中的不同方法。对于所有这些方法，我们将使用相同的 HTML 文件和 SCSS 文件。您必须自己创建这些文件并将它们放置在项目文件夹中。
- en: 'The HTML file should contain the following code:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 文件应包含以下代码：
- en: index.xhtml
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: index.xhtml
- en: '[PRE242]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: This is basic code for an HTML file, including a `<link>` tag to a stylesheet
    that doesn’t exist until it has been compiled from the source Sass code. If you
    open this file in a browser before any compilation, it will simply display an
    `Hello world!`.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 HTML 文件的基代码，包括一个指向尚未从源 Sass 代码编译的样式的 `<link>` 标签。如果您在编译之前在浏览器中打开此文件，它将简单地显示
    `Hello world!`。
- en: 'The SCSS file should contain the following code:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: SCSS 文件应包含以下代码：
- en: style.scss
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: style.scss
- en: '[PRE255]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: 'First, we have the `blue` color stored in the `$color-primary` variable. Then,
    we use that variable to set the text color of `h1` elements. After compiling our
    Sass, we get a new CSS file with the following code:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在 `$color-primary` 变量中存储了 `blue` 颜色。然后，我们使用该变量设置 `h1` 元素的文本颜色。在编译我们的 Sass
    后，我们得到一个包含以下代码的新 CSS 文件：
- en: style.css
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: style.css
- en: '[PRE259]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: After reloading the HTML file in the browser, we will see that the text color
    of the heading is now blue. This shows that the Sass compilation is working as
    expected and the referenced CSS file has now been generated.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中重新加载 HTML 文件后，我们将看到标题的文本颜色现在是蓝色。这表明 Sass 编译按预期工作，并且现在已生成了引用的 CSS 文件。
- en: Continue reading the next sections to learn different ways of incorporating
    Sass compilation into a development workflow.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 继续阅读下一部分，了解将 Sass 编译集成到开发工作流程中的不同方法。
- en: Using Node.js
  id: totrans-415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Node.js
- en: 'Step 1: Download and install Node.js'
  id: totrans-416
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第1步：下载并安装 Node.js
- en: This method requires you to download and install Node.js. To do this, you simply
    go to the official website at [nodejs.org](http://nodejs.org) and download it
    from there. `npm` is the default package manager that’s automatically installed
    together with Node.js.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法需要您下载并安装 Node.js。为此，您只需访问官方网站 [nodejs.org](http://nodejs.org) 并从那里下载即可。`npm`
    是与 Node.js 自动安装的默认包管理器。
- en: 'Step 2: Navigate to your project folder with the Terminal or Command Prompt'
  id: totrans-418
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第2步：使用终端或命令提示符导航到您的项目文件夹
- en: 'Now, open the Terminal (macOS) or Command Prompt (Windows) and use the following
    command to navigate to your project folder:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开终端（macOS）或命令提示符（Windows），并使用以下命令导航到您的项目文件夹：
- en: '[PRE262]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: 'The square brackets should not be used, so, for example, like this:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 方括号不应使用，例如，如下所示：
- en: '[PRE263]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: Drag your folder from Finder on macOS
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 从 macOS 的 Finder 拖动你的文件夹
- en: If you’re using macOS, you can simply type `cd` (remember the space in the end)
    and then drag your folder from Finder to the Terminal. This will insert the right
    folder path. Now, you just have to hit *Enter*.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 macOS，你可以简单地输入 `cd`（记得在最后加空格），然后从 Finder 拖动你的文件夹到终端。这将插入正确的文件夹路径。现在，你只需按
    *Enter* 键。
- en: Type cmd in File Explorer on Windows
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 的文件资源管理器中输入 cmd
- en: If you’re using Windows, you can type the `cmd` shortcut in the search bar of
    a **File Explorer** window. Hitting *Enter* will open up the folder in the Command
    Prompt.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 Windows，你可以在 **文件资源管理器** 窗口的搜索栏中输入 `cmd` 快捷方式。按 *Enter* 键将打开命令提示符中的文件夹。
- en: 'Step 3: Initialize a new npm project'
  id: totrans-427
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第3步：初始化一个新的 npm 项目
- en: 'Then, to initialize a new `npm` project, we enter one of the following two
    commands:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了初始化一个新的 `npm` 项目，我们输入以下两个命令之一：
- en: '[PRE264]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: If you use the first option (*without* the `-y` flag), you will be asked to
    type in the information for the project. Each step can be skipped simply by hitting
    *Enter*, and all of it can be edited afterward as well.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择第一个选项（*不带* `-y` 标志），你将被要求输入项目信息。每个步骤都可以通过按 *Enter* 键跳过，之后也可以编辑所有内容。
- en: If you choose the second option (*with* the `-y` flag), it will automatically
    answer these questions. This can also be edited at a later point.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择第二个选项（*带* `-y` 标志），它将自动回答这些问题。这也可以稍后编辑。
- en: 'After running the `npm init` command, a `package.json` file will be generated
    with basic information about your `npm` project. It will look something like this:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `npm init` 命令后，将生成一个包含你的 `npm` 项目基本信息的 `package.json` 文件。它看起来可能像这样：
- en: '[PRE265]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: 'Step 4: Install Sass globally'
  id: totrans-445
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第4步：全局安装 Sass
- en: 'We will now install the Sass `npm` package globally on the machine so it will
    be available for this and other future projects. This package is used to compile
    your Sass code to CSS. Type in the following command:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将在机器上全局安装 Sass `npm` 包，使其可用于此和其他未来的项目。此包用于将你的 Sass 代码编译为 CSS。输入以下命令：
- en: '[PRE277]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: 'To check that you have successfully installed Sass, you can enter the following
    command:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查你是否已成功安装 Sass，你可以输入以下命令：
- en: '[PRE278]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: 'You will see something like the following in your terminal:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在你的终端中看到以下内容：
- en: '[PRE279]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: 'If you’re using the Terminal on macOS and are getting errors regarding file
    permission when trying to install Sass, you can try to add the `sudo` command
    so that the full command will be as follows:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 macOS 的终端，并且在尝试安装 Sass 时遇到有关文件权限的错误，你可以尝试添加 `sudo` 命令，这样完整的命令将是：
- en: '[PRE280]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: If you’re experiencing similar problems on Windows, you can try to run the Command
    Prompt as an administrator.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 Windows 上遇到类似的问题，可以尝试以管理员身份运行命令提示符。
- en: 'Step 5: Compile Sass to CSS'
  id: totrans-455
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第5步：将 Sass 编译为 CSS
- en: 'Now, it’s time to compile your Sass code. To do this, you use the `sass` command
    followed by the path to your input file (your Sass source file) and your output
    file (the CSS file you want to use for your website), as well as any optional
    settings:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候编译你的 Sass 代码了。为此，你使用 `sass` 命令，后跟输入文件路径（你的 Sass 源文件）和输出文件（你想要用于网站的 CSS
    文件），以及任何可选设置：
- en: '[PRE281]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: or
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE282]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: Please note that in the preceding commands, the square brackets should not be
    used.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在先前的命令中，不应使用方括号。
- en: 'The most useful settings are as follows:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 最有用的设置如下：
- en: '`--style=expanded` – Generates a compressed and minified CSS file.'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--style=expanded` – 生成一个压缩和最小化的 CSS 文件。'
- en: '`--no-source-map` – Prevents the generation of a source map file. This file
    maps the transformed source to the original source so that the browser can show
    the original in the debugger.'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--no-source-map` – 阻止生成源映射文件。此文件将转换后的源映射到原始源，以便浏览器可以在调试器中显示原始内容。'
- en: '`--watch` – Watches for any changes in your file and recompiles automatically.'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--watch` – 监视文件中的任何更改并自动重新编译。'
- en: Remember to add spaces in between each of the settings, if you’re adding more
    than one.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你添加了多个设置，请记住在它们之间添加空格。
- en: 'To compile the SCSS file that comes with the starter template, you will type
    the following command:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译起始模板中包含的 SCSS 文件，你将输入以下命令：
- en: '[PRE283]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: This will compile the Sass code found in `style.scss` to CSS and create the
    new `style.css` file as well as the `style.css.map` source map file in the same
    folder.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译 `style.scss` 中找到的 Sass 代码到 CSS，并在同一文件夹中创建新的 `style.css` 文件以及 `style.css.map`
    源映射文件。
- en: You are now able to view the starter template in a browser with the compiled
    Bootstrap CSS.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在浏览器中查看编译后的 Bootstrap CSS 的起始模板。
- en: Using Scout-App
  id: totrans-470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Scout-App
- en: If you prefer to use a GUI when compiling Sass, you can use the free app, **Scout-App**.
    It can be downloaded from [scout-app.io](http://scout-app.io) and there’s a version
    for macOS, Windows, and Linux.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在编译Sass时更喜欢使用GUI，可以使用免费的**Scout-App**应用。您可以从[scout-app.io](http://scout-app.io)下载，并且有适用于macOS、Windows和Linux的版本。
- en: 'There’s a great *Getting Started* video on the front page that I suggest you
    watch to learn how the app works. The video can also be accessed directly on YouTube
    via the following link: [https://youtu.be/6zA78zMsH9w](https://youtu.be/6zA78zMsH9w).'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 在首页有一个非常棒的**入门**视频，我建议您观看以了解该应用的工作原理。您也可以通过以下链接直接在YouTube上观看视频：[https://youtu.be/6zA78zMsH9w](https://youtu.be/6zA78zMsH9w)。
- en: '![Figure 2.2 – Screenshot of the front page of the official Scout-App website
    ](img/Figure_2.2_B17143.jpg)'
  id: totrans-473
  prefs: []
  type: TYPE_IMG
  zh: '![图2.2 – 官方Scout-App网站首页截图](img/Figure_2.2_B17143.jpg)'
- en: Figure 2.2 – Screenshot of the front page of the official Scout-App website
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 – 官方Scout-App网站首页截图
- en: Using Live Sass Compiler extension for Visual Studio Code
  id: totrans-475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code的Live Sass Compiler扩展
- en: 'If you’re using Visual Studio Code as your code editor, you can install the
    `Live Sass Compiler` by Glenn Marks and then click **Install**:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Visual Studio Code作为代码编辑器，可以通过Glenn Marks的`Live Sass Compiler`进行安装，然后点击**安装**：
- en: '![Figure 2.3 – Screenshot of the Live Sass Compiler extension opened in the
    Extensions tab of Visual Studio Code ](img/Figure_2.3_B17143.jpg)'
  id: totrans-477
  prefs: []
  type: TYPE_IMG
  zh: '![图2.3 – Visual Studio Code扩展标签页中打开的Live Sass Compiler扩展截图](img/Figure_2.3_B17143.jpg)'
- en: Figure 2.3 – Screenshot of the Live Sass Compiler extension opened in the Extensions
    tab of Visual Studio Code
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3 – Visual Studio Code扩展标签页中打开的Live Sass Compiler扩展截图
- en: 'You can also find the extension on the Visual Studio Marketplace via this link:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过以下链接在Visual Studio Marketplace上找到此扩展：
- en: '[https://marketplace.visualstudio.com/items?itemName=glenn2223.live-sass](https://marketplace.visualstudio.com/items?itemName=glenn2223.live-sass)'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://marketplace.visualstudio.com/items?itemName=glenn2223.live-sass](https://marketplace.visualstudio.com/items?itemName=glenn2223/live-sass)'
- en: After successfully installing the extension, you now need to click **Watch Sass**
    in the Status Bar when you have a SCSS or SASS file open to activate the live
    Sass compiler. When done working you simply click the same button again to deactivate
    it.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功安装扩展后，当您打开SCSS或SASS文件时，需要点击状态栏中的**Watch Sass**来激活实时Sass编译器。完成工作后，只需再次点击相同的按钮即可将其停用。
- en: Summary
  id: totrans-482
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter was an introduction to Sass for people with no prior experience.
    We have learned about the syntax and features in general, and also about which
    features are used by Bootstrap as well as which features are the most important
    ones for Bootstrap developers. Finally, we also learned about various ways to
    compile Sass, either for simple experimentation or for incorporating Sass compilation
    into a development workflow.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是为没有先前经验的Sass初学者而写的介绍。我们学习了语法和一般特性，还了解了Bootstrap使用的特性以及对于Bootstrap开发者来说最重要的特性。最后，我们还学习了各种编译Sass的方法，无论是简单的实验还是将Sass编译集成到开发流程中。
- en: In the next chapter, we will learn how to customize Bootstrap 5 with Sass. If
    you have read this chapter, you are now well prepared to dive into the Sass code
    of Bootstrap 5.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Sass自定义Bootstrap 5。如果您已经阅读了本章，您现在已经为深入Bootstrap 5的Sass代码做好了充分的准备。
