- en: '*Chapter 2*: Using and Compiling Sass'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is an introduction to **Sass**. If you’re new to Sass, you should
    definitely go through this chapter to learn the basics of Sass, which is the language
    the Bootstrap styles are written in. If you’re already familiar with Sass, you
    can skip this chapter, but I will still suggest you take a look at the *Sass features
    used by Bootstrap* and *Most important Sass features for Bootstrap developers*
    sections. This will prepare you before starting the next chapter about customizing
    Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Sass?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sass syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sass features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sass features used by Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most important Sass features for Bootstrap developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling Sass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To preview the examples, you will need a code editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To compile Sass to CSS, you will need either of the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js**, if you prefer a **command-line interface** (**CLI**) using Terminal
    (Mac) or Command Prompt (Windows)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scout-App**, if you prefer a **graphical user interface** (**GUI**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code**, if you prefer to use an extension from the Visual Studio
    Code Marketplace'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: I will explain all these approaches in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code files of the chapter on GitHub at [https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide](https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide).
  prefs: []
  type: TYPE_NORMAL
- en: What is Sass?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sass is an abbreviation of **Syntactically Awesome Style Sheets**. It is a special
    kind of stylesheet language known as a preprocessor scripting language that extends
    the default capabilities of CSS. This enables you to use JavaScript-like logic
    and features in the code, such as **variables**, **nesting**, **mixins**, **inheritance**,
    **partials**, **functions**, **mathematical operations**, and more. All of this
    helps you write more robust and maintainable code by automating repetitive tasks,
    reducing the number of errors, creating reusable code snippets, and more. Sass
    has a syntax similar to CSS, but the Sass files need to be compiled to regular
    CSS before they can be rendered in browsers. This can be done using different
    tools, which we will learn more about later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Sass was first released in 2006 and is still being actively supported and developed
    by a large community. It is by far the most popular and used CSS preprocessor,
    with **Less** and **Stylus** being two other established CSS preprocessors in
    the market.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will take a look at the Sass syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Sass syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sass supports two different syntaxes: the original indented Sass syntax and
    the **SCSS** syntax, which is basically a superset of regular **CSS**. The SCSS
    syntax is the easiest one for beginners, the most popular one, and the one used
    for the Bootstrap styles. It’s also the one that I will be using throughout this
    book. However, both of these different syntaxes support the same features of Sass.'
  prefs: []
  type: TYPE_NORMAL
- en: Comparison between the original Sass syntax and the modern Sass syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The original syntax uses the `.sass` file extension. It uses indentation instead
    of curly braces to separate code blocks, and *newline* characters (every time
    you hit the *Enter* key) to separate rules within a code block.
  prefs: []
  type: TYPE_NORMAL
- en: 'The indented syntax looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The modern syntax uses the `.scss` file extension. **SCSS** is an abbreviation
    for **Sassy CSS**. It uses curly braces to separate code blocks, and semicolons
    to separate rules within a code block.
  prefs: []
  type: TYPE_NORMAL
- en: 'The SCSS syntax looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Both types of syntaxes will output the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, they’re similar. But SCSS allows you more options to format
    your code as long as you use semicolons and curly braces in the same way as in
    CSS, while the original Sass syntax requires stricter formatting because of its
    reliance on indentation and line breaks.
  prefs: []
  type: TYPE_NORMAL
- en: Parent selector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With Sass, you can use a parent selector with the ampersand symbol, `&`. This
    special selector is invented by Sass and used in nested selectors to refer to
    the parent selector. The ampersand will be replaced by the parent selector, no
    matter how many levels you are nesting (nesting will be described later in this
    section). You can use this in different ways, and we will now go through some
    examples.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an extra class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to create a more specific selector with two classes, you can use
    the ampersand as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Adding pseudo-classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To write common pseudo-classes for a certain selector, you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Qualifying based on another selector
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can qualify a selector by using the ampersand after another selector. So,
    if you, for example, want to change the styling of an element when it’s being
    used inside of another element, you can do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This style rule will only apply to a `.heading` class when it’s a child of a
    `.alert` class.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the ampersand
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The ampersand can be modified by adding a string of text right after it. Consider
    the following example for different button styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'This will compile to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: This is very helpful when using a naming methodology that, instead of combined
    selectors, uses dashes and underscores to create child selectors or modifier selectors.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned about the two different syntaxes for Sass and the special
    parent selector, we can move on to learn about the different Sass features.
  prefs: []
  type: TYPE_NORMAL
- en: Sass features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will take a look at some of the most used features of Sass.
    This will just be a brief introduction to get familiar with Sass code and not
    a detailed guide, as we’re not going to write much Sass code during the course
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sass variables can be used to store any kind of CSS value that you want to
    reuse. Variables are, for example, helpful to use for colors when you need to
    implement a consistent color scheme across many components and potentially need
    to change one or more of the colors later in the process. This can then be done
    simply by updating the value of the variable. To create a variable, you simply
    assign a value to a name that begins with the `$` symbol. Here is an example of
    creating and using a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'When the Sass file is processed, it takes the values of the variables and places
    them in the regular CSS. The generated CSS will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Default values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you assign a value to a variable that already has a value, it will be overwritten.
    But it is also possible to use the `!default` flag to only assign a new value
    to a variable if that variable is not already defined or the value is null. This
    is useful when creating Sass libraries such as Bootstrap, where you want to allow
    the users to configure the variables before generating the CSS. If the user does
    not configure any variables, the default value set by the library will be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example with the normal use of variables that will be overridden:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The background color of the button becomes red since the value of the `$color-primary`
    variable has been overridden.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you instead use the `!default` flag, it will work like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the background color of the button will now remain blue, since
    the `!default` flag won’t change the value of the `$color-primary` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Nesting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With Sass, you can nest your CSS selectors and achieve the same visual hierarchy
    as your HTML. While nesting CSS selectors, having many levels is generally considered
    a bad practice; using carefully nested CSS selectors is a good way to make your
    code more readable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take, for example, this navigation component created with an unordered list
    of links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'To get a better overview in our code, we can nest the CSS selectors in the
    following way to reflect the structure of our HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Partials and import
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Partials are small files with Sass code that you can import into other Sass
    files. This is useful for organizing your code into different parts and modules
    for a better overview of your project. A Sass partial file begins with the underscore
    character (`_`), which will prevent it from being generated into its own CSS file.
    To import a Sass partial into another file, you should use the `@import` rule.
    You don’t need to include the file extension and you can omit the leading underscore
    character.
  prefs: []
  type: TYPE_NORMAL
- en: Since the Sass `@import` rule is handled during compilation – unlike the regular
    CSS `@import` rule, which requires multiple HTTP requests – you get access to
    mixins, functions, and variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we will have two Sass partials, `_button.scss` and
    `_link.scss`, and one main file, `styles.scss`, that imports them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First partial’s filename: `_button.scss`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'Second partial’s filename: `_link.scss`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'Main file: `styles.scss`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'This will compile to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Import is being deprecated
  prefs: []
  type: TYPE_NORMAL
- en: The use of the `@import` rule is discouraged by the Sass team. It will be phased
    out during the following years and eventually removed completely. Instead, the
    `@use` rule should be used. Bootstrap uses the `@import` rule in their Sass code,
    and that is why I’m using it here instead of `@use`.
  prefs: []
  type: TYPE_NORMAL
- en: Mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With mixins, you can group together CSS declarations that you want to reuse
    across your project. Mixins can also receive arguments allowing them to be customized
    for each time they are being used. They are defined using the `@mixin` rule and
    are included in the code using the `@include` rule. Mixins copy the styles into
    the place they are being used.
  prefs: []
  type: TYPE_NORMAL
- en: Simple mixin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here’s an example of a simple mixin with no arguments. It’s a so-called `clearfix`
    mixin, which is taken directly from the Bootstrap 5 Sass code and also used for
    its `clearfix` helper utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: Mixin with argument
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we see a mixin for a simple grid. It has the `$grid` argument
    with the `true` default value. After the definition of the mixin, we include it
    for two elements. The first one will use the default argument to get the `display`
    value (`grid`) and the other will use `false` as an argument to get the `display`
    value (`flex`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'This will compile to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Extend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Extends** are another method of reusing CSS declarations in Sass. With this
    method, you can share the styles of one selector in another selector. When you
    extend a class selector to another selector, the result is equal to adding that
    class to the HTML element. Extending a selector does not copy any styles as mixins
    do, but instead, updates the style rule of the *extended* selector to also contain
    the *extending* selector.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of a simple `.alert` class with border and padding. Nested
    inside this is a modified parent selector that generates the `.alert-success`
    class, which will extend the `.alert` class plus add a background color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `.alert-success` class is now added to the style declaration
    for the `.alert` class. So, to clarify, when one class selector extends another,
    the styles belonging to the extended selector will now also be available for the
    extending selector.
  prefs: []
  type: TYPE_NORMAL
- en: Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With **operators**, you can do basic mathematical calculations with different
    values in your CSS. Besides the basic mathematical calculations such as addition,
    subtraction, multiplication, and division, you can check for relation and equality
    for various values, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples of basic mathematical calculations for both numbers
    and strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: Division with / is deprecated
  prefs: []
  type: TYPE_NORMAL
- en: 'Division with */* in Sass is deprecated since it’s being used as a separator
    in CSS. Instead, a division should be done using the built-in `math.div()` math
    module function of Sass like so: `math.div(30, 2)`, which equals `15`.'
  prefs: []
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can create your own functions for specific operations that you need to reuse
    in your project. They are created with the `@function` rule and return a value
    using the `@return` rule. They are called using the normal CSS function syntax.
    Just like mixins, functions can receive arguments, allowing the behavior to be
    customized for each time they are called. The arguments are available within the
    function as variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a simple function that adds two values together and returns the result.
    It can be either numbers or strings, but in this example, it will be two numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: You must specify the correct number of arguments when calling the function unless
    you make any of them optional by defining a default value for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how to make the second argument optional by giving it the default value
    of `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: Special values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sass supports many kinds of values. Most of them come from CSS, while some of
    them are specific to Sass. Maps are an example of a special Sass value and are
    used to associate keys and values in a list. Maps are not valid CSS values, so
    they can’t be used on their own. However, Sass provides various functions to work
    with maps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a simple example that first defines a `$font-size` map with three key/value
    pairs, and then gets the value of the third key by using the `map-get()` function
    with the name of the map and the key for the requested value as arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: Built-in modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sass provides built-in modules containing various functions and mixins. These
    functions were originally globally available, but should now be loaded via the
    `@use` rule (with few exceptions). Among the more useful functions are functions
    for manipulating color values and working with list- and map-based values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of how to fluidly scale a color property using the `color.scale()`
    function from the built-in color module. In this example, the function is used
    to increase the lightness of the color by 25%, and you can see that this even
    works when using a named color as the argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have had a look at some of the features of Sass, let’s take a look
    at which features are being used by Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Sass features used by Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is just a quick overview of the Sass features used by Bootstrap. We will
    dive deeper into how Bootstrap is built in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As already mentioned, the Bootstrap Sass code is written using the SCSS syntax.
    It also uses the `&` parent selector for pseudo-classes and states, together with
    attribute selectors.
  prefs: []
  type: TYPE_NORMAL
- en: Partials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Sass code for Bootstrap 5 is divided into 81 partials and five folders.
    These partials are then imported through other partials or regular SCSS files.
    This creates a good overview of all the various parts making up Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Variables are used extensively by Bootstrap. They are used to maintain visual
    consistency across components regarding colors, spacing, and more, but they are
    also used in such a way that they can easily be configured by a user before the
    generation of the CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Maps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maps are often used in Sass libraries and design systems. In Bootstrap, they
    are used primarily for configuring the values used by the utilities.
  prefs: []
  type: TYPE_NORMAL
- en: Mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mixins are used a lot throughout the Bootstrap Sass code. They are used for
    layout, components, helpers, utilities, and other visual styling.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bootstrap uses the color and map modules of Sass. It uses functions from the
    color module (as well as other included color functions) to work with the visual
    style regarding colors, and it uses functions from the map module to work with
    map values that are used to generate utilities.
  prefs: []
  type: TYPE_NORMAL
- en: We now know how Bootstrap utilizes the various features of Sass. But, what features
    are most important for developers working with customization of Bootstrap? Let’s
    take a look at that now.
  prefs: []
  type: TYPE_NORMAL
- en: Most important Sass features for Bootstrap developers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here’s a quick overview of what Sass features you will use the most when customizing
    Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Variables for customization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ability to use variables with Sass is the most important feature to understand
    when customizing Bootstrap. Most changes that you would want to make require you
    to overwrite a variable already used by Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Maps for the utility API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The special map value that comes with Sass is used together with the utility
    API to generate various utility classes. This can be used to modify or remove
    existing utilities or add your own. We will learn all about how to use the utility
    API in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The utility API
  prefs: []
  type: TYPE_NORMAL
- en: The utility API is a built-in tool of Bootstrap 5 that is used to generate the
    different utility classes. Sass maps are used to provide settings and options
    for the utility API.
  prefs: []
  type: TYPE_NORMAL
- en: Mixins and extend for semantic code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bootstrap has a lot of mixins used by different Bootstrap elements, but these
    mixins can also be used in your own code. Mixins and the extend feature of Sass
    can both be used to write more semantic code, which we will take a closer look
    at in [*Chapter 8*](B17143_08_epub.xhtml#_idTextAnchor179), *Customizing the Website
    Using Bootstrap 5 Variables, Utility API, and Sass*.
  prefs: []
  type: TYPE_NORMAL
- en: We have just seen how to use some of the features of Sass, and we will now learn
    how to compile Sass code to regular CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling Sass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various ways that you can compile your Sass code. If you are new to
    Sass and want to experiment with the syntax and features, you can use **Sassmeister**
    and get started right away. If you want to incorporate Sass compilation into your
    development workflow, there are several ways to do this. I will show you three
    different ways of doing this. The first way requires you to use **Node.js** and
    the Terminal or Command Prompt, the second way uses a free application called
    **Scout-App**, and the third way uses an extension for the **Visual Studio Code**
    code editor.
  prefs: []
  type: TYPE_NORMAL
- en: Experimenting with Sass using Sassmeister
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sassmeister, which can be visited at [sassmeister.com](http://sassmeister.com),
    is a free tool to experiment with Sass in a playground environment. You can use
    either the Sass or SCSS syntax, select between different Sass compilers, define
    the CSS output, and more. All the examples in this chapter can be seen in action
    using Sassmeister.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Sassmeister Sass playground on sassmeister.com ](img/Figure_2.1_B17143.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Sassmeister Sass playground on sassmeister.com
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating Sass compilation into a development workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the next three subsections, I will describe different ways of incorporating
    Sass compilation into a development workflow. For all these approaches, we will
    use the same HTML file and SCSS file. You will have to create these files yourself
    and place them in a project folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML file should contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: This is basic code for an HTML file, including a `<link>` tag to a stylesheet
    that doesn’t exist until it has been compiled from the source Sass code. If you
    open this file in a browser before any compilation, it will simply display an
    `Hello world!`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The SCSS file should contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: style.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we have the `blue` color stored in the `$color-primary` variable. Then,
    we use that variable to set the text color of `h1` elements. After compiling our
    Sass, we get a new CSS file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: style.css
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: After reloading the HTML file in the browser, we will see that the text color
    of the heading is now blue. This shows that the Sass compilation is working as
    expected and the referenced CSS file has now been generated.
  prefs: []
  type: TYPE_NORMAL
- en: Continue reading the next sections to learn different ways of incorporating
    Sass compilation into a development workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Using Node.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Step 1: Download and install Node.js'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This method requires you to download and install Node.js. To do this, you simply
    go to the official website at [nodejs.org](http://nodejs.org) and download it
    from there. `npm` is the default package manager that’s automatically installed
    together with Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Navigate to your project folder with the Terminal or Command Prompt'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now, open the Terminal (macOS) or Command Prompt (Windows) and use the following
    command to navigate to your project folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: 'The square brackets should not be used, so, for example, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: Drag your folder from Finder on macOS
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using macOS, you can simply type `cd` (remember the space in the end)
    and then drag your folder from Finder to the Terminal. This will insert the right
    folder path. Now, you just have to hit *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: Type cmd in File Explorer on Windows
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using Windows, you can type the `cmd` shortcut in the search bar of
    a **File Explorer** window. Hitting *Enter* will open up the folder in the Command
    Prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Initialize a new npm project'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Then, to initialize a new `npm` project, we enter one of the following two
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: If you use the first option (*without* the `-y` flag), you will be asked to
    type in the information for the project. Each step can be skipped simply by hitting
    *Enter*, and all of it can be edited afterward as well.
  prefs: []
  type: TYPE_NORMAL
- en: If you choose the second option (*with* the `-y` flag), it will automatically
    answer these questions. This can also be edited at a later point.
  prefs: []
  type: TYPE_NORMAL
- en: 'After running the `npm init` command, a `package.json` file will be generated
    with basic information about your `npm` project. It will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 4: Install Sass globally'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We will now install the Sass `npm` package globally on the machine so it will
    be available for this and other future projects. This package is used to compile
    your Sass code to CSS. Type in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: 'To check that you have successfully installed Sass, you can enter the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see something like the following in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’re using the Terminal on macOS and are getting errors regarding file
    permission when trying to install Sass, you can try to add the `sudo` command
    so that the full command will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: If you’re experiencing similar problems on Windows, you can try to run the Command
    Prompt as an administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: Compile Sass to CSS'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now, it’s time to compile your Sass code. To do this, you use the `sass` command
    followed by the path to your input file (your Sass source file) and your output
    file (the CSS file you want to use for your website), as well as any optional
    settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: Please note that in the preceding commands, the square brackets should not be
    used.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most useful settings are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--style=expanded` – Generates a compressed and minified CSS file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-source-map` – Prevents the generation of a source map file. This file
    maps the transformed source to the original source so that the browser can show
    the original in the debugger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--watch` – Watches for any changes in your file and recompiles automatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember to add spaces in between each of the settings, if you’re adding more
    than one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To compile the SCSS file that comes with the starter template, you will type
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: This will compile the Sass code found in `style.scss` to CSS and create the
    new `style.css` file as well as the `style.css.map` source map file in the same
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: You are now able to view the starter template in a browser with the compiled
    Bootstrap CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Using Scout-App
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you prefer to use a GUI when compiling Sass, you can use the free app, **Scout-App**.
    It can be downloaded from [scout-app.io](http://scout-app.io) and there’s a version
    for macOS, Windows, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s a great *Getting Started* video on the front page that I suggest you
    watch to learn how the app works. The video can also be accessed directly on YouTube
    via the following link: [https://youtu.be/6zA78zMsH9w](https://youtu.be/6zA78zMsH9w).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Screenshot of the front page of the official Scout-App website
    ](img/Figure_2.2_B17143.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Screenshot of the front page of the official Scout-App website
  prefs: []
  type: TYPE_NORMAL
- en: Using Live Sass Compiler extension for Visual Studio Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you’re using Visual Studio Code as your code editor, you can install the
    `Live Sass Compiler` by Glenn Marks and then click **Install**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Screenshot of the Live Sass Compiler extension opened in the
    Extensions tab of Visual Studio Code ](img/Figure_2.3_B17143.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Screenshot of the Live Sass Compiler extension opened in the Extensions
    tab of Visual Studio Code
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also find the extension on the Visual Studio Marketplace via this link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://marketplace.visualstudio.com/items?itemName=glenn2223.live-sass](https://marketplace.visualstudio.com/items?itemName=glenn2223.live-sass)'
  prefs: []
  type: TYPE_NORMAL
- en: After successfully installing the extension, you now need to click **Watch Sass**
    in the Status Bar when you have a SCSS or SASS file open to activate the live
    Sass compiler. When done working you simply click the same button again to deactivate
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was an introduction to Sass for people with no prior experience.
    We have learned about the syntax and features in general, and also about which
    features are used by Bootstrap as well as which features are the most important
    ones for Bootstrap developers. Finally, we also learned about various ways to
    compile Sass, either for simple experimentation or for incorporating Sass compilation
    into a development workflow.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to customize Bootstrap 5 with Sass. If
    you have read this chapter, you are now well prepared to dive into the Sass code
    of Bootstrap 5.
  prefs: []
  type: TYPE_NORMAL
