- en: Chapter 9. App Security Using Encryption and Other Techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Using secure properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object and string encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with encrypted files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling protected PDFs on iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android lock screen monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is common for Enterprise applications to contain private or confidential
    information. For this reason, encryption, file locking, and secure app lifecycle
    management are fundamental requirements when developing Enterprise Titanium apps.
    The core Titanium SDK provides limited functionality in this area such as one-way
    hashing and basic app events, but to fully meet security requirements, third-party
    modules such as `Securely` are needed.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss how to use the `Securely` framework to handle
    common secure programming tasks such as file and string encryption. `Securely`
    provides access to each platform's security APIs in a cross-platform and Titanium-friendly
    way. Through a series of recipes, we will demonstrate how to leverage the `Securely`
    framework within our existing Titanium Enterprise app.
  prefs: []
  type: TYPE_NORMAL
- en: Using secure properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Titanium SDK provides a `Ti.App.Properties` object, which provides a convenient
    way to persist user and application information. The `Securely` framework provides
    a familiar API designed to mirror `Ti.App.Properties`, which allows you to persist
    this information in a secure fashion. This recipe describes how to use the `Securely.Properties`
    object to store, read, and remove data in/from an encrypted and secure manner.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses the `Securely` native module. This module and other code assets
    can be downloaded from the source provided by the book, or individually through
    the links provided in the *See also* section at the end of this recipe. Installing
    these in your project is straightforward. Simply, copy the `modules` folder into
    your project as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the module reference
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After copying the mentioned folder, you will need to click on your **tiapp.xml**
    file in Titanium Studio and add a reference to the `bencoding.securely` module
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the module reference](img/5343_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is designed to run within the context of a `Ti.UI.Window` or other
    component within a single Titanium context. The code samples in this section demonstrate
    how to use the Secure properties of `Securely` using the same tests that Appcelerator
    uses for the Titanium SDK's `Ti.App.Properties` class. For more information, please
    refere to the `app.js` included with the recipe's source.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the namespace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have added the `Securely` module to your project, you need to create
    your application namespace in the `app.js` file and use `require` to import the
    module into your code as the following code snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating the secure properties object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After the app namespace has been created, the next step is to create a new
    properties object. This object contains the following property values that must
    be set at creation time:'
  prefs: []
  type: TYPE_NORMAL
- en: '`secret`: This is a required parameter. `secret` is the password used to encrypt
    and decrypt all property values. The same `secret` used to encrypt must be used
    during the decryption process or a `null` value will be returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`identifier`: This parameter is optional. If no value is provided, the bundle
    name on iOS or the `PackageName` on Android is used. `identifier` allows you to
    segment each property with an identifier, if needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accessGroup`: This parameter is an optional value used on the iOS platform.
    Access groups can be used to share keychain items among two or more applications.
    If no access group is provided, the keychain values will only be accessible within
    the app saving the values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encryptFieldNames`: This parameter is an optional value only used on the Android
    platform. When set to `true`, `Securely` will create an MD5 hash using the provided
    `secret` for all property names.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Result comparison helper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `displayResults` function shown in the following code snippet is used to
    compare the test result with the expected value. Based on the comparison, the
    proper message is generated for presenting to the user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Reading secure properties without defaults
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each supported property type has a `get` method. For example, to read a Boolean
    property, the `getBool` method is called and a name is provided. This API works
    similar to the `Ti.App.Properties` object within the Titanium SDK, with added
    support for reading and decrypting secure properties. If no stored value is available,
    a null or default value type is provided. The following snippet demonstrates how
    to read saved secure property values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On iOS, null values are returned for any property without a saved value. Due
    to Android's type system, Boolean values will return `false` if no value is stored
    and numeric values will return zero. All other Android values will return null
    similar to iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Reading secure properties with defaults
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Also similar to `Ti.App.Properties`, `Securely` provides the ability to read
    and decrypt a secure property and provide a default value if there is no stored
    value for the requested secure property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default value is not encrypted or persisted during the read process.
  prefs: []
  type: TYPE_NORMAL
- en: Setting secure property values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each supported property type has a `set` method used to encrypt and persist
    values. For example, to save and encrypt a Boolean property and the `setBool`
    method, and provide a property name and Boolean value. This API works similar
    to the `Ti.App.Properties` object within the Titanium SDK. `Securely` supports
    both encrypting and writing the value to the secure properties directly. The following
    code snippet demonstrates how to save the following values to secure and encrypted
    storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To demonstrate the properties were saved correctly, the `get` method is called
    for each file and the results are printed to the console within Titanium Studio.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Listing secure property field names
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The property names can be returned as an array by calling the `listProperties`
    method on the `Securely` property object. The following code snippet demonstrates
    how to use this method to print a JSON representation of the `names` array to
    the console within Titanium Studio.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If field name encryption is enabled, the `listProperties` method will return
    `null`. As the field names are encrypted with a one-way hash, the original names
    are no longer available.
  prefs: []
  type: TYPE_NORMAL
- en: Removing secure properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can remove properties using two methods on the `Securely` properties object.
    The `removeProperty` and `removeAllProperties` are designed to be familiar and
    mirror the methods with the same name on the Titanium SDK's `Ti.App.Properties`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: The `removeProperty` method will remove the provided secure property name, if
    it exists.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `removeAllProperties` method will remove all properties within the identifier
    provided when creating the properties object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our recipe, the `remove` property functions are called at the end of the
    test so that the results can be recreated reliably each time.
  prefs: []
  type: TYPE_NORMAL
- en: Check if a secure property exists
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Securely property object provides the `hasProperty` method to provide the
    ability to check if a secure property exists. If the property exists, a Boolean
    `true` value is returned, otherwise a result of `false` is provided. This API
    is designed to be familiar as it mirrors the `Ti.App.Properties.hasProperty` function
    within the core Titanium SDK.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The underlying infrastructure for secure properties is implemented differently
    depending on the platform running your application. Although `Securely` provides
    a cross-platform API, it is important to understand how each platform has been
    implemented and its associated security considerations.
  prefs: []
  type: TYPE_NORMAL
- en: Secure properties on iOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Securely` framework saves all property values as serialized strings within
    the iOS Keychain. This provides secure storage and since it is part of iOS does
    not require any dependencies. Since `Securely` uses the iOS keychain service,
    it is recommended that your organization review Apple's Keychain documents before
    storing sensitive data within the securely-managed container.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to remember since the iOS Keychain service is used, your Secure
    Property values will still be available within the iOS Keychain after your app
    has been uninstalled. The `removeAllProperties` method must be called if you wish
    to remove all keychain items before removal of the app.
  prefs: []
  type: TYPE_NORMAL
- en: Secure properties on Android
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Securely` framework saves all property values as serialized and AES-encrypted
    strings into Android's `SharedPreferences`. Although Android introduced native
    keychain support in API level 14, the `Securely` module was designed to accommodate
    a larger number of devices and targets API level 8 and higher. It is recommended
    that your Enterprise reviews the secure properties' implementation within `Securely`
    to ensure it is in compliance with your corporate or industry standards and requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Secure property considerations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default on Android, the property names are not encrypted. This can be enabled
    by setting the `encryptFieldNames` on creation of the `properties` object. Due
    to the need to encrypt all property names, this property can only be set on creation
    of a new `properties` object. When field name encryption is enabled, `Securely`
    will create a SHA-1 hash for each field name using the `secret` property value
    provided. Enabling this feature creates performance considerations. Regression
    and performance testing is recommended before implementing your existing Titanium
    app.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn more about the iOS Keychain, please review Apple's documentation available
    at [https://developer.apple.com/library/mac/#documentation/security/Conceptual/keychainServConcepts/01introduction/introduction.html](https://developer.apple.com/library/mac/#documentation/security/Conceptual/keychainServConcepts/01introduction/introduction.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more about Android's SharedPreferences, please review the documentation
    available at [http://developer.android.com/reference/android/content/SharedPreferences.html](http://developer.android.com/reference/android/content/SharedPreferences.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object and string encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the Enterprise Titanium development cycle, there is often the requirement
    to encrypt in-process or persisted JavaScript objects or variables. The `Securely`
    framework provides a `StringCrypto` proxy with convenience methods for key generation
    of AES and DES bi-directional encryption.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to use the `Securely.StringCrypto` object to encrypt
    and decrypt JavaScript objects in a secure manner.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AES and DES implementations of `Securely` are designed to be specific to the
    device platform. If there is a need to exchange AES or DES encrypted data, access
    device, platform or to a third-party service, testing is recommended to verify
    the implementations match.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the `Securely` native module. This module and other code assets
    can be downloaded from the source provided by the book. Installing these in your
    project is straightforward. Simply copy the `modules` folder into the root of
    your Titanium Project. Please review the *Getting ready* section of the *Using
    secure properties* recipe for instructions on module setup before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example is designed to run within the context of a `Ti.UI.Window` or other
    component within a single Titanium context. This section demonstrates how to use
    the `StringCrypto` method of `Securely` to encrypt JavaScript objects. For more
    information, please reference the `app.js` included with the recipe's source.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the namespace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have added the `Securely` module to your project, you need to create
    your application namespace in the `app.js` file and use `require` to import the
    module into your code as the following code snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Generating keys
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Key generation is an important part of cryptography and to assist with this
    process, `Securely` has two built-in convenience methods.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a derived key
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The first key generation convenience method is called `generateDerivedKey`.
    This method includes the string input provided by the user into the salt algorithm
    used to determine the key. This approach is helpful if the seed value needs to
    be known or derived by another accessing system. The following steps demonstrate
    two common approaches for generating the seed value to be provided to the `generateDerivedKey`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A common approach is to create a new GUID as the seed from which the key is
    generated. The following code snippet demonstrates this approach using the `Ti.Platform.createUUID`
    method to generate a GUID:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `generateDrivedKey` method will use the parameter provided to create a new
    key each time it is called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Another, less random method of key generation is to provide the Titanium app
    GUID as the seed value. The following code snippet demonstrates how to use the
    `Ti.App.guid` to create a derived key using the GUID from your project's `tiapp.xml`
    file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Generating a random key
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The second key generation convenience method is called `generateRandomKey`.
    As its name indicates, a random alphanumeric string is generated and used as the
    seed value. The following code snippet demonstrates how to create a key value
    using the `generateRandomKey` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Creating the stringCrypto object
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The next step in the cryptographic process for strings and objects is to create
    a new instance of the `stringCrypto` proxy. The following code snippet shows how
    to create a new proxy object named `stringCrypto`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Using DES encryption
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Securely` supports the older **Data Encryption Standard** (**DES**) encryption
    algorithm. Support for this algorithm is primarily provided for intercommunication
    with legacy systems. Wherever possible, the stronger AES encryption should be
    used instead.'
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting using DES
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `DESEncrypt` method requires a key and a string to encrypt. This method
    will then return a DES encrypted string. If an error is generated during the encryption
    process a null value is returned. The following demonstrates how to encrypt both
    a JavaScript string and object using this method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Any non-JavaScript string elements must first be converted into a JavaScript
    string before being provided to the `DESEncrypt` function.
  prefs: []
  type: TYPE_NORMAL
- en: Decrypting using DES
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `DESDecrypt` method is used to decrypt a string encrypted with the DES algorithm.
    This method requires the key and a string with the encrypted value. The `DESDecrypt`
    method will then return a string with the decrypted value. The following snippet
    demonstrates how to use the `DESDecrypt` method to decrypt both a string and object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The following code snippet demonstrates how to use `JSON.parse` to re-build
    the JavaScript object from the decrypted JSON string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Encrypting using AES
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `AESEncrypt` method requires a key and a string to encrypt. This method
    will then return an AES-encrypted string. If an error is generated during the
    encryption process, a null value is returned. The following code snippet demonstrates
    how to encrypt both a JavaScript string and object using this method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any non-JavaScript string elements must first be converted into a JavaScript
    string before being provided to the `AESEncrypt` function.
  prefs: []
  type: TYPE_NORMAL
- en: Decrypting using AES
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `AESDecrypt` method is used to decrypt a string encrypted with the AES algorithm.
    This method requires the key and a string with the encrypted value. The `AESDecrypt`
    method will then return a string with the decrypted value. The following code
    snippet demonstrates how to use the `AESDecrypt` method to decrypt both a string
    and an object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The following code snippet demonstrates how to use `JSON.parse` to rebuild the
    JavaScript object from the decrypted JSON string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Titanium object encryption
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Titanium SDK objects such as `Ti.UI.View` are not real JavaScript objects, and
    therefore, cannot be serialized and encrypted effectively. To encrypt Titanium
    objects, you must first copy all of the Titanium object's properties into a pure
    JavaScript object and then convert the JavaScript object to a JSON string as shown
    earlier. During the decryption process, the reverse approach can be taken to recreate
    the Titanium object.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the `Securely` module, for installation details please review
    the *Getting ready* section of the *Using secure properties* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more about DES encryption, please review processing standards publication
    published by the **National Institute of Standards and Technology** (**NIST**)
    available at [http://www.itl.nist.gov/fipspubs/fip46-2.htm](http://www.itl.nist.gov/fipspubs/fip46-2.htm)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more about AES encryption, please review processing standards publication
    published by the NIST available at [http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf](http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more about Cryptographic Services used in the iOS implementation, please
    review Apples documentation available at [https://developer.apple.com/library/mac/#documentation/security/Conceptual/cryptoservices/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011172-CH1-SW1](https://developer.apple.com/library/mac/#documentation/security/Conceptual/cryptoservices/Introduction/Introduction.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more about Cryptographic Ciphers used in the Android implementation,
    please review the Android documentation available at [http://developer.android.com/reference/javax/crypto/Cipher.html](http://developer.android.com/reference/javax/crypto/Cipher.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with encrypted files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: File encryption is a fundamental building block for enterprise mobile development.
    Due to the sensitivity of data collected by most enterprise apps, it is recommended
    that all persisted files are encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates how to use the `Securely` framework to both encrypt
    and decrypt files. Through the use of the File Crypto sample, we will provide
    step-by-step instructions on how to work with local encrypted files from within
    your Titanium app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the `Securely` native module. This module and other code assets
    can be downloaded from the source provided by the book. Simply copy the `modules`
    folder into the root of your Titanium project. Please review the *Getting ready*
    section of *Using secure properties* recipe for instructions on module setup before
    continuing.
  prefs: []
  type: TYPE_NORMAL
- en: After installing the `Securely` module, you need to copy the `PlainText.txt`
    file into the `Resources` folder of your project. This file will be used by the
    recipe to create the initial encrypted file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have added the `module` folder and `PlaintText.txt` sample file into
    your project, you need to create your application namespace in the `app.js` file
    and use `require` to import the module into your code as the following code snippet
    demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Creating the UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This recipe walks through how to use the `Securely` module along with Titanium''s
    `Ti.Filesystem` namespace to encrypt and decrypt files. The test harness pictured
    in the following screenshot is used to demonstrate how to perform these crypto
    actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the UI](img/5343_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step in creating the test harness is to create a `Ti.UI.Window`, which
    is used to attach all UI elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The next step in creating our test harness UI is to add a `Ti.UI.TextField`
    named `txtPassword`. This control is used to obtain the password used during the
    encryption and decryption operations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The next step in creating our test harness UI is to add a `Ti.UI.Button` named
    `btnEncrypt`. This control will be used to launch the file encryption process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The final step in creating our test harness UI is to add a `Ti.UI.Button` named
    `btnDecrypt`. This control will be used to launch the file decryption process.
    Please note the encryption process launched when the `btnEncrypt` button is tapped
    must be run first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Encrypting a file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The file encryption process is demonstrated using the `click` event of the `btnEncrypt
    Ti.UI.Button`. This section describes how to use the `AESEncrypt` method of `Securely`
    for file encryption using the AES encryption algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The first step in the file encryption process is to create a callback method
    to receive the results from the `AESEncrypt` method. The following `onEncryptCompleted`
    method demonstrates how to check for the different results provided during the
    callback process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next a new instance of the `FileCrypto` object of the `Securely` framework must
    be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then `Ti.FileSystem.File` objects are created for the input and output files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally the `AESEncrypt` method is called with the following parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`password`: The `password` parameter is the key used in the file encryption
    process. The same password must be provided later if you wish to decrypt the file.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from`: The `from` parameter provides a `nativePath` reference to the file
    that will be encrypted. Please note the file itself is not encrypted, but simply
    used as the source to generate an encrypted file at the path provided in the `to`
    parameter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to`: The `to` parameter provides the `nativePath` reference to where the encrypted
    file should be generated. The application must be able to write to this file path
    or an IO exception will be generated.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`completed`: The `completed` parameter provides a reference to the callback
    method to be used upon completion of the execution of the `AESEncrypt` method.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Decrypting a file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The file decryption process is demonstrated using the `click` event of the `btnDecrypt
    Ti.UI.Button`. The following section describes how to use `AESDecrypt` method
    of `Securely` for file decryption using the AES encryption algorithm. Please note
    that the same password used to encrypt the file must be provided in the decryption
    process.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The first step in the file decryption process is to create a callback method
    to receive the results from the `AESDecrypt` method. The following `onDecryptCompleted`
    method demonstrates how to check for the different results provided during the
    callback process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next the `Ti.FileSystem.File` objects are created for the input and output files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then a new instance of the `FileCrypto` object of `Securely` must be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally the `AESDecrypt` method is called with the following parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`password`: The `password` parameter is the key used in the file decryption
    process. This password must match the key provided during the file encryption
    process. If the passwords differ, an error will be provided to the callback method.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from`: The `from` parameter provides a `nativePath` reference to the file
    that will be decrypted. Please note the file itself is not decrypted, but simply
    used as the source to generate a decrypted file at the path provided in the `to`
    parameter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to`: The `to` parameter provides the `nativePath` reference to where the decrypted
    file should be generated. The application must be able to write to this file path
    or an IO exception will be generated.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`completed`: The `completed` parameter provides a reference to the callback
    method to be used upon completion of the execution of the `AESDecrypt` method.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the `Securely` module, for installation details please review
    the *Getting ready* section of the *Using secure properties* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Securely` uses the `RNCryptor` library on iOS for file encryption. For documentation,
    licensing, and source, please visit [https://github.com/rnapier/RNCryptor](https://github.com/rnapier/RNCryptor)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling protected PDFs on iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with and exchanging PDF files is common practice within a majority of
    organizations. Apple has provided APIs within iOS native access to lock and unlock
    PDF documents making implementing secure practices for this file format much easier.
    The `Securely` module exposes these native iOS APIs for your Titanium app to leverage.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates how to use the `Securely` framework to lock and unlock
    PDF files. Through the use of the PDF Locker sample, we will provide step-by-step
    instructions on how to protect and work with PDFs on the local device from within
    your Titanium app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses the `Securely` native module. This module and other code assets
    can be downloaded from the source provided by the book. Installing these in your
    project is straightforward. Simply copy the `modules` folder into your project
    as shown in the following screenshot. Next copy the `w4.pdf` file into the `Resources`
    folder of your project. This file will be used by the recipe to create the initial
    encrypted file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After copying the `modules` folder, you will need to update the `tiapp.xml`
    references as demonstrated in the *Getting ready* section of the *Using secure
    properties* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have added the `module` folder and `w4.pdf` sample file into your
    project, you need to create your application namespace in the `app.js` file and
    use `require` to import the module into your code as the following code snippet
    demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Creating the recipe's UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This recipe walks through how to use the `Securely` module along with Titanium''s
    `Ti.FileSystem` namespace to lock or unlock PDF files. The test harness pictured
    in the following screenshot is used to demonstrate how to perform these secure
    PDF actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the recipe''s UI](img/5343_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step in creating this test harness is a `Ti.UI.Window`, which is created
    to attach all UI elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The next step in creating our test harness UI is to add a `Ti.UI.TextField`
    named `txtPassword`. This control is used to obtain the password used during the
    encryption and decryption operations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The next step in creating our test harness UI is to add a `Ti.UI.Button` named
    `btnLock`. This control will be used to launch the PDF lock/protection process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The next step in creating our test harness UI is to add a `Ti.UI.Button` named
    `btnUnlock`. This control will be used to launch the PDF unlock or password removal
    process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Protecting a PDF file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The PDF protecting or locking process is demonstrated using the `click` event
    of the `btnLock Ti.UI.Button`. The following section describes how to use the
    `protect` method of `Securely` for PDF locking:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The first step in the file decryption process is to create a callback method
    to receive the results from the `AESDecrypt` method. The following `onProtected`
    method demonstrates how to check for the different results provided during the
    callback process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next `Ti.FileSystem.File` objects are created for the input and output files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then a new instance of the `PDF` object of `Securely` must be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally the `protect` method is called with the following parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`userPassword`: The `userPassword` parameter is the user-level password for
    the PDF. This field is required.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ownerPassword`: The `ownerPassword` parameter is the owner-level password
    for the PDF. Although this is optional, this value must be set in order to password-protect
    the document.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from`: The `from` parameter provides a `nativePath` reference to the PDF file
    to be protected. Please note that the file itself is not locked, but simply used
    as the source to generate a protected PDF file at the path provided in the `to`
    parameter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to`: The `to` parameter provides the `nativePath` reference to where the protected
    PDF file should be generated. The application must be able to write to this file
    path or an IO exception will be generated.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allowCopy`: The `allowCopy` is a Boolean parameter indicating whether the
    document allows copying when unlocked with the user password. This parameter defaults
    to `true` and is optional.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`completed`: The `completed` parameter provides a reference to the callback
    method to be used upon completion of the execution of the `protect` method.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Unlocking a PDF file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The process of unlocking or removing PDF protection from an existing PDF file
    is demonstrated using the `click` event of the `btnUnlock Ti.UI.Button`. The following
    steps describes how to use the `punprotect` method of `Securely` for PDF unlocking:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The first step in unlocking a protected PDF file is to create a callback method
    to receive the results from the `unprotect` method. The following `onUnlock` method
    demonstrates how to check for the different results provided during the callback
    process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next the `Ti.FileSystem.File` objects are created for the input and output files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, a new instance of the `PDF` object of `Securely` must be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally the `unprotect` method is called with the following parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`password`: The password parameter is the key used to unlock the protected
    PDF file. This password must match the owner password used in locking the document.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from`: The from parameter provides a nativePath reference to the protected
    PDF file. Please note the PDF file itself is not unlocked, but simply used as
    the source to generate a new unlocked PDF file at the path provided in the to
    parameter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to`: The to parameter provides the nativePath reference to where the unlocked
    PDF file should be generated. The application must be able to write to this file
    path or an IO exception will be generated.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`completed`: The `completed` parameter provides a reference to the callback
    method to be used upon completion of the execution of the `unprotect` method.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the `Securely` module. For installation details, please review
    the *Getting ready* section of the *Using secure properties* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android lock screen monitor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due to the inherent nature of Titanium Android architecture, it can be challenging
    to determine when the app has been placed into the background or the lock screen
    has been activated. These actions are important life cycle events to track for
    password and application access. For example, you might wish to display a login
    screen within your app if the user has locked their device since last entering
    your app.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe demonstrates how to use the `Securely` framework to check
    if the user has a lock screen pattern enabled and fire an event when the screen
    is locked or unlocked.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses the `Securely` native module. This module and other code assets
    can be downloaded from the source provided by the book. Installing these in your
    project is straightforward. Simply copy the `modules` folder into your project
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After copying the `modules` folder, you will need to update the `tiapp.xml`
    references as demonstrated in the Getting ready section of the *Using secure properties*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have added the `module` folder into your project, you need to create
    your application namespace in the `app.js` file and use `require` to import the
    module into your code as the following code snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Creating the recipe's UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe uses a single `Ti.UI.Window` object to host and demonstrate the
    different available lock screen methods and events. The following code snippet
    shows how this object is created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Verifying if the lock pattern is enabled
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe is dependent on the user enabling a passcode or lock pattern. If
    this feature is not enabled, the recipe will still function by simply providing
    when the screen has been disabled from a power consumption standpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps discuss how to verify if the user has enabled the lock
    screen functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to create a new `Securely.Platform` proxy as shown in the
    following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Securely.Platform` proxy provides many security-related methods. When the
    `lockPatternEnabled` method is called, a Boolean is provided indicating if the
    user has enabled this feature on their device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on your organization's passcode policy, you may wish to disable the
    app if a lock screen has not been implemented.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creating a Lock Helper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `Securely.LockScreenHelper` proxy object provides the initialization methods
    needed to start monitoring lock screen activity. The following code snippet demonstrates
    how to use this proxy to start the monitoring process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step in the lock screen monitoring process is to create a new `Securely.LockScreenHelper`
    proxy as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next the `startMonitorForScreenOff` method is called. This registers a broadcast
    receiver to listen for the `ACTION_SCREEN_OFF` broadcast.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then the `startMonitorForScreenOn` method is called. This registers a broadcast
    receiver to listen for the `ACTION_SCREEN_ON` broadcast.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Screen lock events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Both the `startMonitorScreenOff` and `startMonitorScreenOn` methods described
    earlier will emit global events when their subscribed broadcast is received. The
    following snippet demonstrates how to create application listeners to subscribe
    to these events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Each event is provided information to assist in managing your app state. Using
    the prior example snippet, the `e` argument is provided two properties by Securely.
  prefs: []
  type: TYPE_NORMAL
- en: '`actionName`: This is the full Android intent action name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actionTime`: This provides date/time in seconds format on when the last event
    was called. This can be converted into a JavaScript date using `new Date(e.actionTime)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using window focus for monitoring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe uses the `focus` event on the example `Ti.UI.Window` to demonstrate
    how to check if the device has been locked since the last time the `Ti.UI.Window`
    had focus. One use of this pattern would be to check if an internal passcode screen
    should be presented or to check if a session needs to be re-established.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The `wasLocked` method is called to determine if the device has been locked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `isShowingLockScreen` method can also be used to determine if the device
    is currently presenting the lock screen to the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `resetMonitorForScreenOff` method can also be used to reset the value returned
    by `wasLocked`. This is helpful in tracking if the device has been locked between
    app sessions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Stop monitoring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to stop monitoring and remove the global listeners when the
    app no longer needs this functionality. The following code snippet demonstrates
    how this is performed using the `close` event of the `Ti.UI.Window`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Monitoring can be stopped individually by using `stopMonitorForScreenOff` or
    `stopMonitorForScreenOn`. To stop all monitoring, the `stopMonitoring` convenience
    method can be used to remove both receivers.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn more about the `android.intent.action.SCREEN_ON` and `android.intent.action.SCREEN_OFF`
    intents used, please visit the official Android documentation available at [http://developer.android.com/reference/android/content/Intent.html](http://developer.android.com/reference/android/content/Intent.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe uses the `Securely` module. For installation details, please review
    the *Getting ready* section of the *Using secure properties* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
