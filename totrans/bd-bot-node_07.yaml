- en: Chapter 7. Facebook Messenger Bot, Who's Off – A Scheduler Bot for Teams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Facebook has launched its own messaging platform ([https://developers.facebook.com/docs/messenger-platform/product-overview](https://developers.facebook.com/docs/messenger-platform/product-overview)),
    which enables us to enrich our conversation experience with other users on a messengers.
    Companies, apart from just showing information, can now provide new ways of conversational
    experience using custom bots. These bots can be integrated with the company's
    Facebook Page. With this, customers or employees of that company can easily look
    for information on the page and also chat at the same time on Facebook Messenger
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: The Facebook Messenger platform's APIs can be used not only to send messages,
    but also to send links, photos, videos, files, and images. Facebook Messenger
    has a feature called secret messages or conversations. These secret conversations
    are currently available only in the Messenger app, downloaded on iOS and Android
    devices. With these conversations, we can only send messages, pictures, and stickers.
    Group messages, videos, GIFs, video calling, and payments are not supported in
    secret conversations.
  prefs: []
  type: TYPE_NORMAL
- en: Recently, I read about Domino's pizzas getting ordered from Facebook Messenger!
    So just by chatting, you can now select your pizza, order it, and process the
    payment as well. Here, users are provided with a seamless experience during the
    chat itself.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll build a Facebook Messenger bot and enhance it to schedule
    off-hours. Our bot will also help us discover who and when a person will take
    off; this will all be done through an elegant calendar-based user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Awesome! Let's start now.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our Facebook Messenger bot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Facebook has great documentation on how to set up a bot. You can also refer
    to the steps mentioned at [https://developers.facebook.com/docs/messenger-platform/guides/quick-start](https://developers.facebook.com/docs/messenger-platform/guides/quick-start).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using the following steps to build a basic bot:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Facebook Page for our bot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an app within Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a basic Facebook Messenger bot in Node.js, specifically in Microsoft
    Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wire up the Facebook app and the basic bot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start working on these steps one by one.
  prefs: []
  type: TYPE_NORMAL
- en: The Facebook Page for our basic bot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, log in to Facebook. You can use the existing pages or create a
    new page.
  prefs: []
  type: TYPE_NORMAL
- en: We will implement our bot in a way that it will tell users who would be off
    and when. Let's create a page called *Who's Off* by navigating to [https://www.facebook.com/pages/create/](https://www.facebook.com/pages/create/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you hit the URL, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Facebook Page for our basic bot](img/image00325.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose the page type as **Company, Organization or Institution**. This will
    show the following input screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Facebook Page for our basic bot](img/image00326.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Provide information on this page, such as the type and name of the company.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Internet Company** and set the name as `Who''s Off`. Then click on
    the **Get Started** button. This will open up a wizard to set up all the other
    properties for your company, such as the profile information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Facebook Page for our basic bot](img/image00327.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can skip this wizard or directly go to the last tab, **4\. Preferred Page
    Audience**, to save the information.
  prefs: []
  type: TYPE_NORMAL
- en: 'This creates a Facebook Page for our bot. This will appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Facebook Page for our basic bot](img/image00328.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Facebook app for our basic bot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After creating a page, now let''s create a Facebook app for our bot via [https://developers.facebook.com/quickstarts/](https://developers.facebook.com/quickstarts/).
    This will lead us to a screen where we can configure our app as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Facebook app for our basic bot](img/image00329.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on **basic setup** to open a popup and enter the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Facebook app for our basic bot](img/image00330.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'While creating the app ID, security check will be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Facebook app for our basic bot](img/image00331.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Please respond to **Security Check** and click on **Submit** to set up your
    Facebook app by following the instructions on this screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Facebook app for our basic bot](img/image00332.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we want to set up a messenger, click on the **Get Started** button available
    in **Messenger**. This will lead you to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Facebook app for our basic bot](img/image00333.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now locate the section called **Token Generation** in the page and select the
    Facebook Page created earlier. This will generate a token for the selected page,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Facebook app for our basic bot](img/image00334.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This page token will be used while communicating with the APIs.
  prefs: []
  type: TYPE_NORMAL
- en: To receive messages from users, our Facebook app needs the Webhooks integration.
    Before we set up Webhooks, let's create a Node.js Facebook Messenger app. The
    Facebook Webhook integration needs our bot app to be accessible over HTTPs. So
    we will need to do this using Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our bot server in Azure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, we need an HTTPs-enabled bot server so that we can integrate it
    in Facebook. We will build our bot server in Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s log in to the Azure portal and locate **App Services** to create a Node.js-based
    bot server. Refer to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up our bot server in Azure](img/image00335.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Add** link to open the following screen. Then, select the **Web
    + Mobile** option and search for an empty Node.js-based web app template, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up our bot server in Azure](img/image00336.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After selecting the template as **Node JS Empty Web App**, click on the **Create**
    button to create the Node.js-based site. The next screen will ask you to input
    the name of your site and resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up our bot server in Azure](img/image00337.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Provide the required information and click on the **Create** button at the bottom
    to create a site called `whosoffchatbotsite.azurewebsites.net`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once created, you should see the following properties of the site using the
    **Overview** menu option from the **App Services** selected site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up our bot server in Azure](img/image00338.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on `http://whosoffchatbotsite.azurewebsites.net` to check how our initial
    Node.js site looks or whether there are any issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up our bot server in Azure](img/image00339.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With this, we were able to create and run Node.js from Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 2](part0021.xhtml#aid-K0RQ2 "Chapter 2. Getting Skype to Work for
    You") , *Getting Skype to Work for You*, we looked at how to create a Node.js
    site using the Azure command-line interface. In this chapter, we have so far created
    a Node.js site in Azure itself; now, we will modify the basic Node.js site for
    our bot.
  prefs: []
  type: TYPE_NORMAL
- en: To modify the basic bot program, first we will clone the template on our local
    file system using git commands. Then, we will modify and deploy it to Microsoft
    Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating a folder in our local drive in order to store our
    bot program from the Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now go to the newly created directory and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up our bot server in Azure](img/image00340.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This command will clone our site from a remote URL to a local file system.
    Once the site is cloned, move to the `NodeJS-EmptySiteTemplate` directory and
    run `server.js` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up our bot server in Azure](img/image00341.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the cloning is successful, you should see the bot program in Node.js running,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up our bot server in Azure](img/image00342.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So far, we have used a template from a remote git repository and cloned it to
    a local file system. Now we'll set our own git location for the bot program. The
    reason is that, whenever we make a change in `server.js`, which is our bot program,
    we would also like the changes to be deployed to Azure; we can do this using git
    commands. So we will be setting up a local git repository for our bot program
    in Azure itself.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a local git repository for our bot server in Azure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, disconnect the remote git library of our program using the **Disconnect**
    menu option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a local git repository for our bot server in Azure](img/image00343.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once disconnected, use the **Setup** option to set up a code repository for
    our program, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a local git repository for our bot server in Azure](img/image00344.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you click on **Setup**, the **Deployment Source** screen will be launched,
    as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a local git repository for our bot server in Azure](img/image00345.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Choose the **Local Git Repository** option to set up a git-based repository
    for the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if you look at the website properties, you will see that a git URL as well
    as an FTP account has been set up. We can deploy our site to Azure using either
    git commands or FTP. Refer to the following screenshot for the newly updated properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a local git repository for our bot server in Azure](img/image00346.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So we have set up a git repository in Azure, but the site we cloned from a
    local file system earlier is still pointing to a remote URL. Let''s point our
    local git configurations to the newly created Azure clone repository using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a local git repository for our bot server in Azure](img/image00347.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Modifying our bot program for Facebook verification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When we cloned bot program code within `server.js`, the following is auto-generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s start modifying our code. But before that, we need to install some
    node modules; we can do this using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `body-parser` npm module helps in parsing the incoming requests available
    under `req.body`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s open our `server.js` and modify it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run our bot program using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying our bot program for Facebook verification](img/image00348.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then open a browser window and hit `http://localhost:8080` :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying our bot program for Facebook verification](img/image00349.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This will show us that our Node.js program is working fine. Now let's deploy
    this code to Azure using git commands. This time, all our node modules, which
    are marked as a dependent using `--save`, will also be pushed to Azure. Sometimes,
    you may encounter a timeout error while pushing the code. But again, try to push
    the code; it should get deployed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The git commands that we need to execute are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the code is deployed to Azure, browse the site and check whether it reflects
    the latest changes, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying our bot program for Facebook verification](img/image00350.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up a Webhook and Facebook verification of our bot program
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now let''s go back to our Facebook app; we had stopped at token generation.
    Let''s set up Webhooks in our Facebook app, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Webhook and Facebook verification of our bot program](img/image00351.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A few important things to note here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Callback URL** has to be accessible from Facebook and should be on HTTPS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Callback URL** with Webhook should return a token, as mentioned at **Verify
    token**. Verify that the token is the same as the one we referred to in `server.js`,
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The token `'whosoffbot_verify_token`, provided in the code should match the
    token on Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your token is verified, you should see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Webhook and Facebook verification of our bot program](img/image00352.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So Webhook is verified and set, but we need a page to subscribe to this Webhook.
    Refer to the following screen and subscribe to the **Who''s Off** page, which
    we created at the beginning:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Webhook and Facebook verification of our bot program](img/image00353.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is how we linked our basic bot to a Facebook Page. Now let''s open our
    **Who''s Off** page from Facebook and click on the **Message** button to make
    our bot active. You should see a green dot before the bot name indicating it is
    active. Refer to the following screenshot for details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Webhook and Facebook verification of our bot program](img/image00354.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you try to post anything to this bot, it will not do anything as we have
    not programmed Webhooks in relation to posting commands. Now let''s ask our bot
    to echo what the user is saying in a chat window. To achieve this, let''s include
    the following code snippet in our `server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Let me explain the code snippet here. When the data is posted from a page that
    is subscribing to the Webhook, `app.post('/webhook',function(req,res){})` will
    get called. This will parse the incoming messages, and bot will form an echo message
    and will call the `sendMessage()` function to send the message to the same recipient
    with the help of a page access token.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a modified bot that returns an echo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s use git commands to deploy the modified code and check whether the bot
    would echo what we say:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a modified bot that returns an echo](img/image00355.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you deploy the updated code, hit the Facebook Page again, and the Messenger
    and post data as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a modified bot that returns an echo](img/image00356.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have made multiple posts to our bot, but it is not yet doing anything. Let's
    see what's happening at the Azure end, that is, whether there are any errors at
    the application level.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting our bot in Azure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To troubleshoot the problem of bot not echoing anything, let''s turn to **Diagnostics
    logs** for our site and also start **Log stream**. Log stream will show us whether
    there are any errors in our program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Troubleshooting our bot in Azure](img/image00357.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s enter or post anything to our bot from the Facebook Page and refer
    to the log streams. You will get to see the line number and the error we will
    get, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Troubleshooting our bot in Azure](img/image00358.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So our code is failing to parse the input, resulting into an error. To fix
    this, let''s make a small change while parsing. Use `bodyParser` before the `urlencoded`
    call, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, deploy the modified code to Azure using git commands and try to post
    something to our bot. The code will run successfully and echo out what a user
    would post in the chat window, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Troubleshooting our bot in Azure](img/image00359.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Wow! So far, we have been able to wire up our bot with the Facebook Page and
    Messenger as well. We have also looked at how to use Azure diagnostics for logging
    into our site if there are issues with our bot program; we also understood how
    to trace and fix the problem. Now let's look at the core functionality we are
    trying to build for our Who's Off bot.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing our Who's Off bot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having built a very basic Facebook Messenger bot, let's enhance our Who's Off
    bot.
  prefs: []
  type: TYPE_NORMAL
- en: Assume our team members are collaborating over Facebook Messenger. Our bot should
    be able to help this team schedule a meeting and should also be able to show who
    is busy on a particular day before setting up the meeting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let me show you, what we will be building in Facebook Messenger for our
    bot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enhancing our Who''s Off bot](img/image00360.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's dive into the flow and then look into the code implementation one by one.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a user starts a conversation with our bot with `hi`, as shown in the preceding
    screenshot, then the Who''s Off bot will show the first three options: **Schedule
    a Meeting**, **Whos Off When**, and **My Schedule**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending upon the option the user chooses, the bot will prompt options for
    when they would like to carry out the mentioned operation, such as scheduling
    a meeting, seeing who is off when, or checking out their own meetings. Refer to
    the following screenshot for the operation''s flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enhancing our Who''s Off bot](img/image00361.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: These operations will be done using options such as **Today** and **Tomorrow**.
    Based on what you choose, the bot will display the meeting details or will ask
    for it to schedule the meeting. In the preceding screenshot, it shows the meeting
    for the **Whos Off When** option selected in Facebook Messenger is scheduled today.
  prefs: []
  type: TYPE_NORMAL
- en: 'So at a higher level, we will be:'
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing our basic bot program for a better conversational experience within
    Facebook Messenger by leveraging message templates; for more information, refer
    to [https://developers.facebook.com/docs/messenger-platform/send-api-reference/templates](https://developers.facebook.com/docs/messenger-platform/send-api-reference/templates)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing meeting's information in the NoSQL database-DocumentDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wiring up DocumentDB APIs and Messenger platform APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a conversational experience with the Who's Off bot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have already seen how users will arrive at our bot's Facebook Page and then
    start a conversation with our bot.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Messenger greeting
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s enhance the conversational experience of this bot now. We''ll begin
    by adding a greeting message whenever a user starts a conversation. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate your bot page on Facebook and click on the **Settings** option:![Setting
    up a Messenger greeting](img/image00362.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Settings** page, locate the **Messaging** menu on the left-hand side,
    as follows:![Setting up a Messenger greeting](img/image00363.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the option **Yes** for **Show a Messenger Greeting**, as follows:![Setting
    up a Messenger greeting](img/image00364.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the greeting text and click on the **Save** button to save the text:![Setting
    up a Messenger greeting](img/image00365.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the bot's Facebook Page and start messaging. The first time you start
    a conversation, the Who's Off bot will greet you like this:![Setting up a Messenger
    greeting](img/image00366.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Showing the initial options of what a bot can do
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'At the start of a conversation, our bot will display the tasks it can perform.
    The user can then choose which operation he or she wants to perform. To achieve
    this, let''s modify `server.js` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Use git commands to push the preceding code changes to Azure. Once deployed
    successfully, start a conversation with the bot by saying `hi`. The Who''s Off
    bot will respond with what it can do for you, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing the initial options of what a bot can do](img/image00367.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After checking out how our bot will respond, let's look at the code now.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `app.post(''/webhook'')` function captures all the messages that come to
    our bot. So when a user says `hi`, there is a pattern-matching done and bot responds
    with the initial options for operations that it can perform. This is done using
    the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `sendMessageWithInitialOptions()` function actually prepares a formatted
    message using structured messaging templates. Since we would like to display operations
    that the user can choose from, we use `template_type` as `button`. Every button
    is of the `postback` type, and when a user clicks on one of these buttons, we
    can capture what the user has selected and respond to the selection.
  prefs: []
  type: TYPE_NORMAL
- en: This structured message is then returned to a sender using the `sendMessage()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Based on what a user selects, the bot will respond in a button-type display.
    This is done to avoid wasting the end user's time in typing messages or entering
    keywords.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have seen how a basic conversation can happen between an end user
    and a bot. This same pattern will be used to further enhance our bot.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you now have a little idea about how to build and enhance a conversational
    experience. Now let's look at how to store meeting-related information. We will
    use DocumentDB to store this information. Let's quickly see how we can set this
    up on the Azure platform.
  prefs: []
  type: TYPE_NORMAL
- en: What is DocumentDB?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 6](part0040.xhtml#aid-164MG2 "Chapter 6. BotKit – Document Manager
    Agent for Slack") , *BotKit - Document Manager Agent for Slack*, I explained NoSQLs.
    DocumentDB is also a NoSQL where data is stored in JSON documents and offered
    by the Microsoft Azure platform.
  prefs: []
  type: TYPE_NORMAL
- en: For further details on DocumentDB, refer to [https://azure.microsoft.com/en-in/services/documentdb/](https://azure.microsoft.com/en-in/services/documentdb/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a DocumentDB for our Who's Off bot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Assuming you already have a Microsoft Azure subscription, follow the ensuing
    steps to configure a DocumentDB for your bot.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an account ID for the DocumentDB
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s create a new account called `botdb` using the following screen from
    the Azure portal. Select **DocumentDB** as the NoSQL API. Select the appropriate
    subscription and resources. Let''s use existing resources for this account. You
    can also create a new dedicated resource. Once you enter all of the required information,
    hit the **Create** button at the bottom to create a new account for the DocumentDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an account ID for the DocumentDB](img/image00368.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A newly created account called `botdb` will appear, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an account ID for the DocumentDB](img/image00369.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a collection and database
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Select a `botdb` account from the account list shown in the preceding screenshot.
    It will show various menu options, such as **Properties**, **Settings**, **Collections**,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under this account, we need to create a collection to store meetings or event
    data. To create a new collection, click on the **Add Collection** option, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a collection and database](img/image00370.jpeg)![Creating a collection
    and database](img/image00371.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As per the preceding screenshot, we are creating a new database along with our
    new collection called `Events`. This new database will be named `EventsDB`. Now
    we can integrate this storage using the DocumentDB APIs in our Node.js program.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up DocumentDB, Moment.js, and Node.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's go back to our `whosoffchatbot` directory and install the `documentdb`
    package from npm. This is nothing but the Node.js SDK for Microsoft Azure's DocumentDB.
    It can be located at [https://www.npmjs.com/package/documentdb](https://www.npmjs.com/package/documentdb)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to install it, run this npm command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'While storing the meetings, we will consider the following JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'So when the meetings get added, it''ll be great if you generate a unique ID
    for each meeting, and the meeting information should get stored in DocumentDB.
    To generate these unique IDs, we will use the `guid` package. This can be located
    at [https://www.npmjs.com/package/guid](https://www.npmjs.com/package/guid) .
    Let''s install the `guid` package by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, all the timings for the meetings will be stored in Unix epoch or Unix
    time. This is done to simplify our storing process as well as query a meeting
    or event data with DocumentDB. So, to enable the conversion of dates to Unix epoch,
    we will use the npm package `moment`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Utility functions and Node.js
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Considering the functionalities to be developed for this bot, I have decided
    to move some of the functionalities to be helper functions. These functions can
    be grouped under `utils.js`. Later, these functions will be called in our main
    Node.js file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the following code for `utils.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Looking at the preceding code, you may notice that the `isvalidateInput()` function
    mainly validates whether the user has entered the intended meeting information
    or not. If not, then the bot will help by providing sample meeting information
    while scheduling the meeting. This function mainly validates user input against
    the `Team Meeting@10:00to11:00` pattern.
  prefs: []
  type: TYPE_NORMAL
- en: The functions `getFormattedTime()` and `getFormattedDay()` convert Unix epoch
    to human-readable date formats.
  prefs: []
  type: TYPE_NORMAL
- en: The function `meeting()` is the constructor used during the creation of a new
    meeting based on the user's option.
  prefs: []
  type: TYPE_NORMAL
- en: The `getUserName()` function helps in getting the Facebook user's name, based
    on the recipient ID or the user ID passed to the function. When we store meetings,
    we will also store the recipient ID as well as the meeting owner's name with the
    help of this function and the `meeting()`function.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring it all up together
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that we have our utility or helper functions and the required Node.js packages
    in place, we are ready to finally integrate our bot in the right sense. Let's
    start with the breakdown of the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will refer to all the npm modules and their instantiation for this
    bot implementation. This can be seen in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also establish a connection to the DocumentDB database from Azure using
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a Webhook set up in Facebook, and upon receiving a call to our Webhook,
    our bot should capture and send us the initial options. This can be achieved using
    the `sendMessageWithInitialOptions()` function from the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: So here, whenever a user posts `hi`, he or she will see the initial options
    to proceed further.
  prefs: []
  type: TYPE_NORMAL
- en: 'While scheduling a meeting as well, we expect the user to provide the meeting
    details in a specific format. Based on what the user has sent, we will validate
    the input and process it further with the help of the `processMeetingDetails()`
    function. This is achieved using the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the options shown to the user, when they respond, the response is
    captured in `event.postback.payload`. Based on what the user has selected to proceed
    further, we''ll execute the next options. This is done using the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If you look at the preceding code lines, you will see payloads captured as `SCHEDULE
    A MEETING`, `SCHEDULETODAY`, and so on. So when a user selects these options from
    the Messenger screen, a post back or a call goes to our Webhook and we get what
    the user has selected. The function `sendMessageWithScheduleOptions()` shows options
      to the user for scheduling a meeting either today or tomorrow.
  prefs: []
  type: TYPE_NORMAL
- en: When a user responds to an option, Whos Off When, the Webhook is called and
    the function `sendMessageWithAllScheduleOptions()` gets executed to show the options
    to choose the day for which you would like to see who is busy and when. This again
    shows the options `Today` or `Tomorrow` to the end user on the screen. Based on
    the option selected by the user, the function `showWhosIsBusyWhen`() gets called
    with appropriate parameters to get the details of who is busy and when, meaning
    whose meetings are scheduled when.
  prefs: []
  type: TYPE_NORMAL
- en: While building this bot, we are not asking the user to key in or type in options;
    instead, we are showing options to choose from the screen. These options are nothing
    but structured message templates. We are using a button template and list template
    while showing the options and data to the end user.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the templates we are using in the function `sendMessageWithInitialOptions`()
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding function generates a structured message with the help of a button
    template and using function `sendMessage()`, message with initial options are
    shown to end user.
  prefs: []
  type: TYPE_NORMAL
- en: 'On similar lines, we have the function `sendMessageWithScheduleOptions()`.
    This generates a structured message to show the options `Today` and `Tomorrow`
    so as to select when to schedule a meeting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To process meeting data and check whether there are any conflicts, the following
    function is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding function extracts the meeting details and passes them to check
    whether there are any conflicts. This function uses the utility function from
    `Utils.js` to get the username of the current user and check whether there are
    any meeting conflicts in relation to the current user. If there are no conflicts,
    then the meeting is scheduled with the help of the `CheckMeetingsIfExistsOrInsert()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This function queries our DocumentDB-based database and checks whether any meeting
    is scheduled for that duration with the help of the `docclient.queryDocuments()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: If there are no meetings for the said duration, a new meeting is created using
    the `docclient.createDocument()` function. For a newly created meeting, the user
    who is scheduling a meeting is made the meeting owner by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a user selects an option for **Whos Off When**, the `showWhosIsBusyWhen()`
    function gets invoked and displays the information of all the meetings scheduled
    along with their owners and time slots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the passed dates, the scheduled meeting''s details are shown in a
    list along with their owners using the `sendMessageWithMeetingsOwnerInList`()
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The preceding function generates a list of meetings using a generic template
    and displays them as cards.
  prefs: []
  type: TYPE_NORMAL
- en: 'I hope you now have an overall understanding of the code implementations we
    have done for this bot. Our final `server.js` should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Running our bot - the Who's Off bot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having understood the code implementation and assuming our final code is up
    and running on Microsoft Azure, let's look at how our bot is executed from the
    end user's perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Initial options
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here are some initial options as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Initial options](img/image00372.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Scheduling a meeting
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When a user clicks on **Schedule a Meeting**, two options are sent by our bot,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scheduling a meeting](img/image00373.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now when the user clicks on **Tomorrow**, our bot will respond with some guiding
    text to the end user as **Pl. provide meeting details e.g. Team Meeting@10:00to11:00**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scheduling a meeting](img/image00374.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After receiving the guiding text, the user would enter the meeting details
    as `Team Meeting@10:00to11:00`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scheduling a meeting](img/image00375.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The bot checks for conflicts, and if no conflicts are found, the meeting is
    scheduled and the bot responds with the message **Meeting has been scheduled.**,
    as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Whos Off When
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the user selects an option for **Whos Off When**, the following screen
    shows the options from which days, **Today** or **Tomorrow,** you would like to
    see who is off when.
  prefs: []
  type: TYPE_NORMAL
- en: '![Whos Off When](img/image00376.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the user selects the option **Today**, the meetings for that day are shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Whos Off When](img/image00377.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The arrow on the right-hand side shows there are multiple meetings. Just scroll
    to the left to see the meetings, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Whos Off When](img/image00378.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This way, we are showing who is busy when, based on the meetings scheduled by
    individual members.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we have implemented our bot in a way that it can schedule our meetings and
    also show all our scheduled meetings in an elegant way within the Facebook Messenger
    interface. There is one more operation left: **My Schedule**. I will leave the
    implementation of this operation to you now.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So with Facebook, we built a bot and enhanced our team's collaborative experience.
    With this bot, our team can just send the meeting details on a chat window to
    our bot, such as the name and start and end date, and the bot will take care of
    rest.
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, we learned how to create a Facebook Page and app. We also created
    a basic bot wired up in Node.js and deployed this basic bot to Microsoft Azure.
    We did this as Facebook Messenger needs an HTTPS-based Webhooks integration. Then,
    we subscribed to a page within Webhooks so that the messages that come from our
    bot pages could be accepted by our Node.js bot.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we enhanced our bot to display information, such as who is off when,
    and displayed it within a Facebook Messenger interface.
  prefs: []
  type: TYPE_NORMAL
- en: We saw that the Who's Off bot with its little intelligence can check for a conflict
    and then scheduled a meeting accordingly. It can also present us with a team's
    schedule in a Facebook-compatible Messenger template format.
  prefs: []
  type: TYPE_NORMAL
- en: Further, if you would really like to develop intelligent bots, then it's worth
    taking a look at [https://wit.ai/](https://wit.ai/) and [https://api.ai/](https://api.ai/).
    These platforms enable us to develop chat bots that can understand humans in a
    better way.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, this chapter has given you an amazing experience of building Facebook
    Messenger bots!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore how to develop IRC bots and how we can
    wire them up within Node.js and help our developers use it for bug-tracking purposes.
  prefs: []
  type: TYPE_NORMAL
