["```js\n$ yarn create vite three-ts --template vanilla-ts\nyarn create v1.22.17\nwarning package.json: No license field\n[1/4]   Resolving packages...\n[2/4]   Fetching packages...\n[3/4]   Linking dependencies...\n[4/4]   Building fresh packages...\nwarning Your current version of Yarn is out of date. The latest version is \"1.22.19\", while you're on \"1.22.17\".\ninfo To upgrade, run the following command:\n$ curl --compressed -o- -L https://yarnpkg.com/install.sh | bash\nsuccess Installed \"create-vite@3.2.1\" with binaries:\n      - create-vite\n      - cva\n[######################################################################] 70/70\nScaffolding project in /Users/jos/dev/git/personal/ltjs4-all/three-ts...\n```", "```js\n$ yarn install\nyarn install v1.22.17\nwarning ../package.json: No license field\ninfo No lockfile found.\n[1/4]   Resolving packages...\n[2/4]   Fetching packages...\n[3/4]   Linking dependencies...\n[4/4]   Building fresh packages...\nsuccess Saved lockfile.\n  Done in 3.31s.\n```", "```js\n$  three-ts git:(main)  yarn vite\nyarn run v1.22.17\nwarning ../package.json: No license field\n$ /Users/jos/dev/git/personal/ltjs4-all/three-ts/node_modules/.bin/vite\n  VITE v3.2.3  ready in 193 ms\n    Local:   http://127.0.0.1:5173/\n    Network: use --host to expose\n```", "```js\n$ yarn add three\n$ yarn add -D @types/three\n```", "```js\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width,\n      initial-scale=1.0\" />\n    <title>Vite + TS</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script type=\"module\" src=\"img/main.ts\"></script>\n  </body>\n</html>\n```", "```js\nimport './style.css'\nimport { initThreeJsScene } from './threeCanvas'\nconst mainElement = document.querySelector\n  <HTMLDivElement>('#app')\nif (mainElement) {\n  initThreeJsScene(mainElement)\n}\n```", "```js\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/\n  controls/OrbitControls'\nexport const width = 500\nexport const height = 500\nexport const initThreeJsScene = (node: HTMLDivElement) => {\n  const scene = new THREE.Scene()\n  const camera = new THREE.PerspectiveCamera(75, height /\n    width, 0.1, 1000)\n  const renderer = new THREE.WebGLRenderer()\n  renderer.setClearColor(0xffffff)\n  renderer.setSize(height, width)\n  node.appendChild(renderer.domElement)\n  camera.position.z = 5\n  const geometry = new THREE.BoxGeometry()\n  const material = new THREE.MeshNormalMaterial()\n  const cube = new THREE.Mesh(geometry, material)\n  const controls = new OrbitControls(camera, node)\n  scene.add(cube)\n  const animate = () => {\n    controls.update()\n    requestAnimationFrame(animate)\n    cube.rotation.x += 0.01\n    cube.rotation.y += 0.01\n    renderer.render(scene, camera)\n  }\n  animate()\n}\n```", "```js\n$ yarn create react-app lts-tf --template TypeScript\n...\n$ cd lts-tf\n$ yarn add three\n$ yarn add -D @types/three\n$ yarn install\n```", "```js\n$ yarn start\nCompiled successfully!\nYou can now view lts-tf in the browser.\n  Local:            http://localhost:3000\n  On Your Network:  http://192.168.68.112:3000\nNote that the development build is not optimized.\nTo create a production build, use yarn build.\nwebpack compiled successfully\nFiles successfully emitted, waiting for typecheck results...\nIssues checking in progress...\nNo issues found.\n```", "```js\nimport './App.css'\nimport { ThreeCanvas } from './ThreeCanvas'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThreeCanvas></ThreeCanvas>\n    </div>\n  )\n}\nexport default App\n```", "```js\nimport { useCallback, useState } from 'react'\nimport * as THREE from 'three'\nconst initThreeJsScene = (node: HTMLDivElement) => {\n  const scene = new THREE.Scene()\n  const camera = new THREE.PerspectiveCamera(75, 500 / 500,\n    0.1, 1000)\n  const renderer = new THREE.WebGLRenderer()\n  renderer.setClearColor(0xffffff)\n  renderer.setSize(500, 500)\n  node.appendChild(renderer.domElement)\n  camera.position.z = 5\n  const geometry = new THREE.BoxGeometry()\n  const material = new THREE.MeshNormalMaterial()\n  const cube = new THREE.Mesh(geometry, material)\n  scene.add(cube)\n  const animate = () => {\n    requestAnimationFrame(animate)\n    cube.rotation.x += 0.01\n    cube.rotation.y += 0.01\n    renderer.render(scene, camera)\n  }\n  animate()\n}\nexport const ThreeCanvas = () => {\n  const [initialized, setInitialized] = useState(false)\n  const threeDivRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      if (node !== null && !initialized) {\n        initThreeJsScene(node)\n        setInitialized(true)\n      }\n    },\n    [initialized]\n  )\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '100vh'\n      }}\n      ref={threeDivRef}\n    ></div>\n  )\n}\n```", "```js\n$ yarn create react-app lts-r3f\n$ cd lts-3rf\n$ yarn install\n$ yarn add three\n$ yarn add @react-three/fiber\n```", "```js\nimport './App.css'\nimport { Canvas } from '@react-three/fiber'\nimport { Scene } from './Scene'\nfunction App() {\n  return (\n    <Canvas>\n      <Scene />\n    </Canvas>\n  )\n}\nexport default App\n```", "```js\nimport React from 'react'\nexport const Scene = () => {\n  return (\n    <>\n      <ambientLight intensity={0.1} />\n      <directionalLight color=\"white\" intensity={0.2}\n       position={[0, 0, 5]} />\n      <mesh\n        rotation={[0.3, 0.6, 0.3]}>\n        <boxGeometry args={[2, 5, 1]} />\n        <meshStandardMaterial color={color}\n          opacity={opacity} transparent={true} />\n      </mesh>\n    </>\n  )\n}\n```", "```js\n$ yarn add @react-three/drei\n```", "```js\nimport React, { useState } from 'react'\nimport './App.css'\nimport { OrbitControls, Sky } from '@react-three/drei'\nimport { useFrame } from '@react-three/fiber'\nexport const Scene = () => {\n  // run on each render of react\n  // const size = useThree((state) => state.size)\n  const mesh = React.useRef()\n  const [color, setColor] = useState('red')\n  const [opacity, setOpacity] = useState(1)\n  const [isRotating, setIsRotating] = useState(false)\n  // run on each rerender of\n  useFrame(({ clock }, delta, xrFrame) => {\n    if (isRotating) mesh.current.rotation.x += 0.01\n  })\n  return (\n    <>\n      <Sky distance={450000} sunPosition={[0, 1, 0]}\n        inclination={0} azimuth={0.25} />\n      <ambientLight intensity={0.1} />\n      <directionalLight color=\"white\" intensity={0.2}\n        position={[0, 0, 5]} />\n      <OrbitControls></OrbitControls>\n      <mesh\n        ref={mesh}\n        rotation={[0.3, 0.6, 0.3]}\n        onClick={() => setColor('yellow')}\n        onPointerEnter={() => {\n          setOpacity(0.5)\n          setIsRotating(true)\n        }}\n        onPointerLeave={() => {\n          setOpacity(1)\n          setIsRotating(false)\n        }}\n      >\n        <boxGeometry args={[2, 5, 1]} />\n        <meshStandardMaterial color={color}\n          opacity={opacity} transparent={true} />\n      </mesh>\n    </>\n  )\n}\n```", "```js\n  const mesh = React.useRef()\n  const [color, setColor] = useState('red')\n  const [opacity, setOpacity] = useState(1)\n  const [isRotating, setIsRotating] = useState(false)\n```", "```js\n      <mesh\n        onClick={() => setColor('yellow')}\n        onPointerEnter={() => {\n          setOpacity(0.5)\n          setIsRotating(true)\n        }}\n        onPointerLeave={() => {\n          setOpacity(1)\n          setIsRotating(false)\n        }}>\n```", "```js\n<meshStandardMaterial color={color} opacity={opacity}\n  transparent={true} />\n```", "```js\n  useFrame(({ clock }, delta, xrFrame) => {\n    if (isRotating) mesh.current.rotation.x += 0.01\n  })\n```", "```js\nrenderer.xr.enabled = true\n```", "```js\nimport { VRButton } from 'three/examples/jsm/webxr/VRButton'\ndocument.body.appendChild(VRButton.createButton(renderer))\n```", "```js\nanimate()\nfunction animate() {\n  renderer.setAnimationLoop(animate)\n  renderer.render(scene, camera)\n  if (onRender) onRender(clock, controls, camera, scene)\n}\n```", "```js\nimport { XRControllerModelFactory } from\n  'three/examples/jsm/webxr/XRControllerModelFactory'\nconst controllerModelFactory = new\n  XRControllerModelFactory()\nconst controllerGrip1 = renderer.xr.getControllerGrip(0)\ncontrollerGrip1.add(controllerModelFactory.createControllerModel(controllerGrip1))\nscene.add(controllerGrip1)\nconst controllerGrip2 = renderer.xr.getControllerGrip(1)\ncontrollerGrip2.add(controllerModelFactory.createControllerModel(controllerGrip2))\nscene.add(controllerGrip2)\n```", "```js\nconst controller = renderer.xr.getController(0)\ncontroller.addEventListener('selectstart', () => {\n  console.log('start', controller)\n  const mesh = new THREE.Mesh(new THREE.BoxGeometry(0.1,\n    0.1, 0.1), new THREE.MeshNormalMaterial())\n  mesh.position.copy(controller.position)\n  scene.add(mesh)\n})\ncontroller.addEventListener('selectend', () => {\n  console.log('end', controller)\n})\n```", "```js\nconst renderer = new THREE.WebGLRenderer({ antialias: true,\n  alpha: true })\nrenderer.xr.enabled = true\n```", "```js\nImport { ARButton } from 'three/examples/jsm/\n  webxr/ARButton'\ndocument.body.appendChild(ARButton.createButton(renderer))\n```", "```js\nanimate()\nfunction animate() {\n  renderer.setAnimationLoop(animate)\n  renderer.render(scene, camera)\n}\n```"]