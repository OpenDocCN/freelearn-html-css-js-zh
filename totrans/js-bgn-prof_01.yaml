- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Getting Started with JavaScript
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始学习 JavaScript
- en: It appears you have decided to start learning JavaScript. Excellent choice!
    JavaScript is a programming language that can be used on both the server side
    and client side of applications. The server side of an application is the backend
    logic that usually runs on computers in data centers and interacts with the database,
    while the client side is what runs on the device of the user, often the browser
    for JavaScript.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来你已经决定开始学习 JavaScript。这是一个非常好的选择！JavaScript 是一种可以在应用程序的客户端和服务器端使用的编程语言。应用程序的服务器端是通常在数据中心运行的计算机上的后端逻辑，并与数据库交互，而客户端是运行在用户设备上的部分，通常是
    JavaScript 的浏览器。
- en: It is not unlikely that you have used functionality written in JavaScript. If
    you have used a web browser, such as Chrome, Firefox, Safari, or Edge, then you
    definitely have. JavaScript is all over the web. If you enter a web page and it
    asks you to accept cookies and you click OK, the popup disappears. This is JavaScript
    in action. And if you want to navigate a website and a sub-menu opens up, that
    means more JavaScript. Often, when you filter products in a web shop, this involves
    JavaScript. And what about these chats that start talking to you after you have
    been on a website for a certain number of seconds? Well, you guessed it—JavaScript!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经使用过用 JavaScript 编写的功能。如果你使用过像 Chrome、Firefox、Safari 或 Edge 这样的网络浏览器，那么你肯定已经使用过了。JavaScript
    遍布整个网络。如果你进入一个网页，它要求你接受饼干，并且你点击了确定，那么弹出窗口就会消失。这就是 JavaScript 在起作用。如果你想要导航到一个网站，并且一个子菜单展开，这意味着有更多的
    JavaScript。通常，当你在一个网店中过滤产品时，这涉及到 JavaScript。那么，当你在一个网站上停留了一段时间后，开始与你交谈的这些聊天是什么？好吧，你已经猜到了——JavaScript！
- en: Pretty much any interaction we have with web pages is because of JavaScript;
    the buttons you are clicking, birthday cards you are creating, and calculations
    you are doing. Anything that requires more than a static web page needs JavaScript.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎我们与网页的所有交互都是因为 JavaScript；你点击的按钮、你创建的生日卡片，以及你进行的计算。任何需要比静态网页更复杂的功能的东西都需要 JavaScript。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Why should you learn JavaScript?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你为什么应该学习 JavaScript？
- en: Setting up your environment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置你的环境
- en: How does the browser understand JavaScript?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器是如何理解 JavaScript 的？
- en: Using the browser console
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用浏览器控制台
- en: Adding JavaScript to a web page
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 JavaScript 添加到网页中
- en: Writing JavaScript code
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写 JavaScript 代码
- en: 'Note: exercise, project and self-check quiz answers can be found in the *Appendix*.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：练习、项目和自我检查测验的答案可以在*附录*中找到。
- en: Why should you learn JavaScript?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你为什么应该学习 JavaScript？
- en: There are many reasons why you should want to learn JavaScript. JavaScript originates
    from 1995, and is often considered the most widely used programming language.
    This is because JavaScript is the language that web browsers support and understand.
    You have everything you need to interpret it already installed on your computer
    if you have a web browser and text editor. There are better setups, however, and
    we will discuss these later in this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多原因让你想要学习 JavaScript。JavaScript 诞生于 1995 年，通常被认为是使用最广泛的编程语言。这是因为 JavaScript
    是网络浏览器支持并理解的语言。如果你有网络浏览器和文本编辑器，你电脑上已经安装了所有你需要来解释它的东西。然而，有更好的设置，我们将在本章后面讨论这些。
- en: It is a great programming language for beginners, and most advanced software
    developers will know at least some JavaScript because they will have run into
    it at some point. JavaScript is a great choice for beginners for a number of reasons.
    The first reason is that you can start building really cool apps using JavaScript
    sooner than you could imagine. By the time you get to *Chapter 5*, *Loops*, you
    will be able to write quite complex scripts that interact with users. And by the
    end of the book, you will be able to write dynamic web pages to do all sorts of
    things.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一种非常适合初学者的编程语言，大多数高级软件开发者至少会知道一些 JavaScript，因为他们会在某个时候遇到它。JavaScript 是初学者的一个很好的选择，原因有很多。第一个原因是你可以比想象中更快地开始使用
    JavaScript 构建真正酷的应用程序。当你到达*第五章*，*循环*时，你将能够编写相当复杂的脚本，与用户交互。到本书结束时，你将能够编写动态网页，做各种事情。
- en: JavaScript can be used to write many different types of applications and scripts.
    It can be used for programming for the web browser, but also the logic layer of
    code that we cannot see (such as communication with the database) of an application
    can be programmed in JavaScript, along with games, automation scripts, and a plethora
    of other purposes. JavaScript can also be used for different programming styles,
    by which we mean ways to structure and write code. How you would go about this
    depends on the purpose of your script. If you've never coded before, you may not
    quite grasp these concepts, and it's not entirely necessary to at this stage,
    but JavaScript can be used for (semi) object-oriented, functional, and procedural
    programming, which are just different programming paradigms.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 可以用来编写许多不同类型的应用程序和脚本。它可以用于网页浏览器的编程，也可以用于我们看不到的应用程序逻辑层代码（例如与数据库的通信），这些代码可以用
    JavaScript 编写，包括游戏、自动化脚本以及众多其他用途。JavaScript 还可以用于不同的编程风格，我们这里指的是结构化和编写代码的方式。你如何进行取决于你的脚本目的。如果你之前从未编码过，你可能不太理解这些概念，在这个阶段也不是完全必要的，但
    JavaScript 可以用于（半）面向对象、函数式和过程式编程，这些都是不同的编程范式。
- en: There are a ton of libraries and frameworks you can use once you get the basics
    of JavaScript down. These libraries and frameworks will really enhance your software
    life and make it a lot easier and possible to get more done in less time. Examples
    of these great libraries and frameworks include React, Vue.js, jQuery, Angular,
    and Node.js. Don't worry about these for now; just see them as a bonus for later.
    We will cover some of them briefly at the very end of this book.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你掌握了 JavaScript 的基础知识，你就可以使用大量的库和框架。这些库和框架将真正提升你的软件开发生活，使你在更短的时间内完成更多的工作。这些优秀的库和框架包括
    React、Vue.js、jQuery、Angular 和 Node.js。现在不必担心这些；只需把它们看作是未来的额外奖励。我们将在本书的最后简要介绍其中的一些。
- en: Finally, we'll mention the JavaScript community. JavaScript is a very popular
    programming language, and many people are using it. As a beginner in particular,
    there won't be a problem for which you cannot find a solution on the internet.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将提到 JavaScript 社区。JavaScript 是一种非常流行的编程语言，很多人在使用它。特别是对于初学者来说，你几乎可以在互联网上找到所有问题的解决方案。
- en: The community of JavaScript is huge. The popular Stack Overflow forum contains
    lots of help for all sorts of coding issues and has an enormous section on JavaScript.
    You'll find yourself running into this web page a lot while googling problems
    and tips and tricks.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 的社区非常庞大。流行的 Stack Overflow 论坛包含大量各种编码问题的帮助，并且有一个关于 JavaScript 的巨大部分。你会发现自己在搜索问题和技巧时经常会遇到这个网页。
- en: If JavaScript is your first programming language, you are new to the whole software
    community and you are in for a treat. Software developers, no matter the language,
    love to help one another. There are forums and tutorials online and you can find
    answers to almost all your questions. As a beginner, it can be hard to understand
    all the answers though. Just hang in there, keep trying and learning, and you
    will understand it soon enough.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 JavaScript 是你的第一门编程语言，你对整个软件社区都是新手，那么你将有一个美好的体验。软件开发者，无论使用哪种语言，都喜欢互相帮助。网上有论坛和教程，你可以找到几乎所有问题的答案。然而，作为一个初学者，理解所有答案可能很困难。坚持下去，继续尝试和学习，你很快就会理解。
- en: Setting up your environment
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置你的开发环境
- en: There are many ways in which you can set up a JavaScript coding environment.
    For starters, your computer probably already has all the minimal things you will
    need to code JavaScript. We recommend you make your life a little bit easier and
    use an IDE.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过许多方式设置 JavaScript 编码环境。首先，你的电脑可能已经拥有了你编写 JavaScript 所需要的所有最小组件。我们建议你让生活变得更轻松一些，并使用集成开发环境（IDE）。
- en: Integrated Development Environment
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成开发环境
- en: An **Integrated Development Environment** (**IDE**) is a special application
    that is used to write, run, and debug code. You can just open it like you would
    any program. For example, to write a text document, you need to open the program,
    select the right file, and start to write. Coding is similar. You open the IDE
    and write the code. If you want to execute the code, the IDE often has a special
    button for this. Pressing this button will run the code from inside the IDE. For
    JavaScript, you might find yourself opening your browser manually in certain cases
    though.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 集成开发环境（IDE）是一种特殊的应用程序，用于编写、运行和调试代码。你可以像打开任何程序一样打开它。例如，要编写一个文本文档，你需要打开程序，选择正确的文件，然后开始编写。编码也是如此。你打开IDE并编写代码。如果你想执行代码，IDE通常有一个特殊的按钮用于此目的。按下此按钮将在IDE内部运行代码。对于JavaScript，你可能会在某些情况下手动打开浏览器。
- en: An IDE does do more than that though; it usually has syntax highlighting. This
    means that certain elements in your code will have a certain color, and you can
    easily see when something is going wrong. Another great feature is the autosuggest
    feature, where the editor helps you with the options you have at the place where
    you are coding. This is often called code completion. Many IDEs have special plugins
    so you can make working with other tools more intuitive and add features to it,
    for example, a hot reload in the browser.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，IDE的功能远不止于此；它通常具有语法高亮功能。这意味着你的代码中的某些元素将具有特定的颜色，你可以轻松地看到哪里出了问题。另一个出色的功能是自动建议功能，编辑器会帮助你完成你正在编码的地方的选项。这通常被称为代码补全。许多IDE都有特殊的插件，你可以使与其他工具的协作更加直观，并为其添加功能，例如浏览器中的热重载。
- en: There are many IDEs out there and they differ in what they have to offer. We
    use Visual Studio Code throughout the book, but that's a personal preference.
    Other popular ones at the time of writing include Atom, Sublime Text, and WebStorm.
    There are many IDEs and they keep on appearing, so chances are the most popular
    one at the time you are reading is not on this list. There are many other options.
    You can do a quick search on the web for JavaScript IDEs. There are a few things
    to pay attention to when selecting an IDE. Make sure that it supports syntax highlighting,
    debugging, and code completion for JavaScript.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 目前市面上有许多集成开发环境（IDE），它们提供的功能各不相同。我们在本书中使用了Visual Studio Code，但这只是个人偏好。在撰写本书时，其他流行的IDE包括Atom、Sublime
    Text和WebStorm。IDE种类繁多，而且还在不断出现，所以当你阅读本书时，最流行的IDE可能不在本列表中。还有很多其他选择。你可以在网上快速搜索JavaScript
    IDE。在选择IDE时，有几个需要注意的事项。确保它支持JavaScript的语法高亮、调试和代码补全功能。
- en: Web browser
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络浏览器
- en: You will also need a web browser. Most browsers are perfectly fine for this,
    but it's better not to use Internet Explorer, which doesn't support the latest
    JavaScript features. Two good options would be Chrome and Firefox. They support
    the latest JavaScript features and helpful plugins are available.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要一个网络浏览器。大多数浏览器都适合这个用途，但最好不要使用不支持最新JavaScript功能的Internet Explorer。两个不错的选择是Chrome和Firefox。它们支持最新的JavaScript功能，并且有可用的有用插件。
- en: Extra tools
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外工具
- en: There are many extra things you can use while coding, for example, browser plugins
    that will help you to debug or make things easier to look at. You don't really
    need any of them at this point, but keep an open mind whenever you come across
    a tool that others are very excited about.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在编码过程中，你可以使用许多额外的东西，例如可以帮助你调试或使事物更容易查看的浏览器插件。在这个阶段，你实际上并不需要任何这些工具，但当你遇到其他人非常兴奋的工具时，请保持开放的心态。
- en: Online editor
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在线编辑器
- en: It may be the case that you don't have access to a computer, perhaps just a
    tablet, or that you cannot install anything on your laptop. There are great online
    editors out there for these scenarios as well. We don't name any, since they are
    evolving rapidly and probably will be old by the time you are reading this. But
    if you do a web search for `online JavaScript IDE`, you will find plenty of online
    options where you can just start coding JavaScript and hit a button to run it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能没有电脑可以使用，也许只有平板电脑，或者你无法在你的笔记本电脑上安装任何东西。在这些情况下，也有出色的在线编辑器。我们不会列出任何名称，因为它们正在快速发展，可能在你阅读本书时就已经过时了。但如果你在网上搜索“在线JavaScript
    IDE”，你会找到许多在线选项，你可以在那里开始编写JavaScript代码，并点击按钮来运行它。
- en: How does the browser understand JavaScript?
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器是如何理解JavaScript的？
- en: JavaScript is an interpreted language, which means that the computer understands
    it while running it. Some languages get processed before running, this is called
    compiling, but not JavaScript. The computer can just interpret JavaScript on the
    fly. The "engine" that understands JavaScript will be called the interpreter here.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种解释型语言，这意味着计算机在运行时理解它。有些语言在运行前会先进行处理，这称为编译，但JavaScript不是。计算机可以直接解释JavaScript。理解JavaScript的“引擎”在这里被称为解释器。
- en: 'A web page isn''t just JavaScript. Web pages are written in three languages:
    HTML, CSS, and JavaScript.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个网页不仅仅是JavaScript。网页是用三种语言编写的：HTML、CSS和JavaScript。
- en: 'HTML determines what is on the page; the content of the page is in there. If
    there is a paragraph on the page, the HTML of the page contains a paragraph. And
    if there is a heading, HTML was used to add a heading, and so forth. HTML consists
    of elements, also called tags. They specify what is on the page. Here is a little
    sample that will create a web page with the text `Hello world` on it:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: HTML决定了页面上有什么；页面的内容就在那里。如果页面上有一个段落，页面的HTML包含一个段落。如果有标题，HTML被用来添加标题，等等。HTML由元素组成，也称为标签。它们指定页面上有什么。以下是一个小示例，它将创建一个包含文本`Hello
    world`的网页：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In *Chapter 9*, *The Document Object Model*, we have a little crash course in
    HTML, so don't worry if you have never seen it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第9章*，*文档对象模型*中，我们有一个关于HTML的简要课程，所以如果你从未见过它，请不要担心。
- en: CSS is the layout of the web page. So for example, if the text color is blue,
    this is done by CSS. Font size, font family, and position on the page are all
    determined by CSS. JavaScript is the final piece in the puzzle, which defines
    what the web page can do and how it can interact with the user or the backend.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: CSS是网页的布局。例如，如果文本颜色是蓝色，这是由CSS完成的。字体大小、字体家族和页面上的位置都是由CSS决定的。JavaScript是拼图中最后一块，它定义了网页能做什么以及如何与用户或后端交互。
- en: When dealing with JavaScript, you will come across the term **ECMAScript** sooner
    or later. This is the specification or standardization for the JavaScript language.
    The current standard is **ECMAScript 6** (also referred to as **ES6**). Browsers
    use this specification to support JavaScript (in addition to some other topics
    such as **Document Object Model** (**DOM**), which we'll see later). JavaScript
    has many implementations that might differ slightly, but ECMAScript can be considered
    the basic specification that the JavaScript implementation will definitely include.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理JavaScript时，你迟早会遇到**ECMAScript**这个术语。这是JavaScript语言的规范或标准化。当前的标准是**ECMAScript
    6**（也称为**ES6**）。浏览器使用这个规范来支持JavaScript（除了我们后面会看到的**文档对象模型**（**DOM**）等其他一些主题）。JavaScript有许多实现，可能略有不同，但ECMAScript可以被认为是JavaScript实现一定会包含的基本规范。
- en: Using the browser console
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用浏览器控制台
- en: You may have seen this already, or not, but web browsers have a built-in option
    to see the code that makes the web page you are on possible. If you hit `F12`
    on a Windows computer while you are in the web browser, or you right-click and
    select **Inspect** on macOS systems, you will see a screen appear, similar to
    the one in the following screenshot.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经看到了，或者没有看到，但网络浏览器有一个内置选项可以查看使你所在的网页成为可能的代码。如果你在Windows计算机上的网络浏览器中按`F12`，或者在macOS系统上右键单击并选择**Inspect**，你将看到一个出现的屏幕，类似于下面的截图。
- en: 'It might work slightly differently on your browser on your machine, but right-clicking
    and selecting **Inspect** generally does the trick:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能在你的机器上的浏览器中略有不同，但通常右键单击并选择**Inspect**就能解决问题：
- en: '![](img/B16682_01_01.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/B16682_01_01.png)'
- en: 'Figure 1.1: Browser console on the Packt website'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：Packt网站上的浏览器控制台
- en: This screenshot contains multiple tabs at the top. We are now looking at the
    element tabs, which contain all the HTML and CSS (remember those?). If you click
    on the console tab, you will find at the bottom of the panel a place where you
    can insert some code directly. You may see some warnings or error messages in
    this tab. This is not uncommon, and don't worry about it if the page is working.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个截图包含顶部多个标签页。我们现在正在查看元素标签页，它包含所有的HTML和CSS（还记得吗？）。如果你点击控制台标签页，你将在面板底部找到一个可以直接插入代码的地方。你可能在这个标签页中看到一些警告或错误消息。这是很常见的，如果页面正在工作，请不要担心。
- en: 'The console is used by developers to log what is going on and do any debugging.
    Debugging is finding the problem when an application is not displaying the desired
    behavior. The console gives some insights as to what is happening if you log sensible messages.
    This is actually the first command we are going to learn:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者使用控制台来记录正在发生的事情并进行任何调试。调试是在应用程序未显示预期行为时寻找问题的过程。如果你记录了有意义的消息，控制台会提供一些关于正在发生什么的见解。这实际上是我们将要学习的第一个命令：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you click on this console tab, enter the first JavaScript code above, and
    then hit `Enter`, this will show you the output of your code therein. It will
    look like the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击这个控制台标签，输入上面的第一段 JavaScript 代码，然后按 `Enter`，这将显示你代码中的输出。它看起来像以下截图：
- en: '![](img/B16682_01_02.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16682_01_02.png)'
- en: 'Figure 1.2: JavaScript in the browser console'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：浏览器控制台中的 JavaScript
- en: You will be working with the `console.log()` statement a lot throughout the
    book in your code to test your code snippets and see the results. There are also
    other console methods, such as `console.table()`, that create a table when the
    inputted data can be presented as a table. Another console method is `console.error()`,
    which will log the inputted data, but with a styling that draws attention to the
    fact that it's an error.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，你将大量使用 `console.log()` 语句来测试你的代码片段并查看结果。还有其他控制台方法，例如 `console.table()`，当输入的数据可以表示为表格时，它会创建一个表格。另一个控制台方法是
    `console.error()`，它将记录输入的数据，但以一种吸引注意力的样式显示，表明它是一个错误。
- en: Practice exercise 1.1
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.1
- en: 'Working with the console:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用控制台：
- en: Open the browser console, type `4 + 10`, and press `Enter`. What do you see
    as the response?
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器控制台，输入 `4 + 10` 并按 `Enter`。你看到了什么响应？
- en: Use the `console.log()` syntax, placing a value within the rounded brackets.
    Try entering your name with quotes around it (this is to indicate the fact that
    it's a text string—we'll get to this in the next chapter).
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `console.log()` 语法，在圆括号内放置一个值。尝试输入你的名字，并用引号括起来（这是为了表明它是一个文本字符串——我们将在下一章中讨论这一点）。
- en: Adding JavaScript to a web page
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在网页中添加 JavaScript
- en: There are two ways to link JavaScript to a web page. The first way is to type
    the JavaScript directly in the HTML between two `<script>` tags. In HTML, the
    first tag, `<script>`, is to declare that the following script will be executed.
    Then we have the content that should be inside this element. Next, we close the
    script with the same tag, but preceded by a forward slash, `</script>`. Or you
    can link a JavaScript file to the HTML file using the script tag at the head of
    the HTML page.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以将 JavaScript 链接到网页。第一种方法是在 HTML 中直接在两个 `<script>` 标签之间输入 JavaScript。在
    HTML 中，第一个标签 `<script>` 是用来声明下面的脚本将被执行。然后我们有应该放在这个元素内的内容。接下来，我们用相同的标签关闭脚本，但前面有一个向前斜杠，`</script>`。或者，你可以使用
    HTML 页面顶部的脚本标签将 JavaScript 文件链接到 HTML 文件。
- en: Directly in HTML
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接在 HTML 中
- en: 'Here is an example of how to write a very simple web page that will give a
    pop-up box saying `Hi there!`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个如何编写一个非常简单的网页的示例，该网页将弹出一个显示 `Hi there!` 的对话框：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you store this as a `.html` file, and open the file in your browser, you
    will get something like the following screenshot. We will be storing this one
    as `Hi.html`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将其保存为 `.html` 文件，并在浏览器中打开该文件，你将得到以下截图类似的内容。我们将将其保存为 `Hi.html`：
- en: '![Shape'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![形状'
- en: Description automatically generated with medium confidence](img/B16682_01_03.png)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成中等置信度的描述](img/B16682_01_03.png)
- en: 'Figure 1.3: JavaScript made this popup with the text "Hi there!" appear'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：JavaScript 使文本 "Hi there!" 的弹出窗口出现
- en: The `alert` command will create a popup that provides a message. This message
    is specified between the parentheses behind the alert.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`alert` 命令将创建一个弹出窗口，显示一条消息。这条消息位于 `alert` 后面的括号内。'
- en: Right now, we have the content directly within our `<html>` tags. This is not
    a best practice. We will need to create two elements inside `<html>`—`<head>`
    and `<body>`. In the head element, we write metadata and we also use this part
    later to connect external files to our HTML file. In the body, we have the content
    of the web page.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的内容直接位于 `<html>` 标签内。这不是最佳实践。我们需要在 `<html>` 内创建两个元素——`<head>` 和 `<body>`。在
    `<head>` 元素中，我们写入元数据，并且我们稍后会使用这部分来将外部文件连接到我们的 HTML 文件。在 `<body>` 中，我们有网页的内容。
- en: 'We also need to let the browser know what kind of document we''re working on
    with the `<!DOCTYPE>` declaration. Since we''re writing JavaScript inside an HTML
    file, we need to use `<!DOCTYPE html>`. Here''s an example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要通过 `<!DOCTYPE>` 声明让浏览器知道我们正在处理哪种类型的文档。由于我们在 HTML 文件中编写 JavaScript，我们需要使用
    `<!DOCTYPE html>`。以下是一个示例：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This example web page will display the following: `The content of the webpage`.
    If you look in the browser console, you''ll find a surprise! It has executed the
    JavaScript as well and logs `Hi there!` in the console.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例网页将显示以下内容：`网页内容`。如果你查看浏览器控制台，你会发现一个惊喜！它已经执行了 JavaScript，并在控制台中记录了 `Hi there!`。
- en: Practice exercise 1.2
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 1.2
- en: 'JavaScript in an HTML page:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 页面中的 JavaScript：
- en: Open your code editor and create an HTML file.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的代码编辑器并创建一个 HTML 文件。
- en: Within your HTML file, set up the HTML tags, doctype, HTML, head, and body,
    and then proceed and add the script tags.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 HTML 文件中，设置 HTML 标签、文档类型、HTML、head 和 body，然后继续添加脚本标签。
- en: Place some JavaScript code within the script tags. You can use `console.log("hello
    world!")`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本标签内放置一些 JavaScript 代码。你可以使用 `console.log("hello world!")`。
- en: Linking an external file to our web page
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将外部文件链接到我们的网页
- en: You could also link an external file to the HTML file. This is considered a
    better practice, as it organizes code better and you can avoid very lengthy HTML
    pages due to the JavaScript. In addition to these benefits, you can reuse the
    JavaScript on other web pages of your website without having to copy and paste.
    Say that you have the same JavaScript on 10 pages and you need to make a change
    to the script. You would only have to change one file if you did it in the way
    we are showing you in this example.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将外部文件链接到 HTML 文件。这被认为是一种更好的做法，因为它更好地组织代码，并且你可以避免由于 JavaScript 而导致的非常长的 HTML
    页面。除了这些好处之外，你可以在你的网站的其他网页上重用 JavaScript，而无需复制和粘贴。比如说，你有 10 页相同的 JavaScript，你需要对这个脚本进行修改。如果你按照我们在这个示例中展示的方式来做，你只需要更改一个文件。
- en: 'First, we are going to create a separate JavaScript file. These files have
    the postfix `.js`. I''m going to call it `ch1_alert.js`. This will be the content
    of our file:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个单独的 JavaScript 文件。这些文件有 `.js` 后缀。我将称之为 `ch1_alert.js`。这将是我们文件的内容：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then we are going to create a separate HTML file (using the postfix `.html`
    again). And we are going to give it this content:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个单独的 HTML 文件（再次使用 `.html` 后缀）。我们将给它以下内容：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Make sure that you put the files in the same location, or that you specify the
    path to the JavaScript file in your HTML. The names are case-sensitive and should
    match exactly.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将文件放在同一位置，或者在你的 HTML 中指定 JavaScript 文件的路径。文件名区分大小写，应该完全匹配。
- en: 'You have two options. You can use a relative path and an absolute path. Let''s
    cover the latter first since that is the easiest to explain. Your computer has
    a root. For Linux and macOS, it is `/`, and for Windows, it is often `C:/`. The
    path to the file starting from the root is the absolute path. This is the easiest
    to add because it will work on your machine. But there is a catch: on your machine,
    if this website folder later gets moved to a server, the absolute path will no
    longer work.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你有两种选择。你可以使用相对路径和绝对路径。我们先来谈谈后者，因为它最容易解释。你的计算机有一个根目录。对于 Linux 和 macOS，它是 `/`，对于
    Windows，通常是 `C:/`。从根目录开始到文件的路径是绝对路径。这是最容易添加的，因为它在你的机器上会起作用。但是有一个问题：在你的机器上，如果这个网站文件夹后来被移动到服务器，绝对路径将不再有效。
- en: The second, safer option is relative paths. You specify how to get there from
    the file you are in at that time. So if it's in the same folder, you will only
    have to insert the name. If it's in a folder called "example" that is inside the
    folder that your file is in, you will have to specify `example/nameOfTheFile.js`.
    And if it's a folder up, you would have to specify `../nameOfTheFile.js`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种更安全的选择是相对路径。你指定从你当前所在的文件如何到达那里。所以如果它在同一个文件夹中，你只需要插入名称。如果它在名为 "example" 的文件夹中，而这个文件夹又位于你的文件所在的文件夹内，你将需要指定
    `example/文件名.js`。如果是上一级文件夹，你将需要指定 `../文件名.js`。
- en: 'If you open the HTML file, this is what you should get:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开 HTML 文件，你应该得到以下内容：
- en: '![Graphical user interface'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![图形用户界面'
- en: Description automatically generated with medium confidence](img/B16682_01_04.png)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 描述自动生成，置信度中等](img/B16682_01_04.png)
- en: 'Figure 1.4: Popup created by JavaScript in a different file'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：JavaScript 在不同文件中创建的弹出窗口
- en: Practice exercise 1.3
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 1.3
- en: 'Linking to a JS JavaScript file:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 链接到 JS JavaScript 文件：
- en: Create a separate file called `app` with the extension `.js`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个扩展名为 `.js` 的名为 `app` 的单独文件。
- en: Within the `.js` file, add some JavaScript code.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`.js`文件中添加一些JavaScript代码。
- en: Link to the separate `.js` file within the HTML file you created in *Practice
    exercise 1.2*.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你创建的*练习1.2*中的HTML文件内链接到单独的`.js`文件。
- en: Open the HTML file within your browser and check to see whether the JavaScript
    code ran properly.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开HTML文件，并检查JavaScript代码是否正确运行。
- en: Writing JavaScript code
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写JavaScript代码
- en: So, we now have lots of context, but how do you actually write JavaScript code?
    There are some important things to keep in mind, such as how to format the code,
    using the right indentation level, using semicolons, and adding comments. Let's
    start with formatting code.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们现在有很多上下文，但你是如何实际编写JavaScript代码的呢？有一些重要的事情需要记住，比如如何格式化代码，使用正确的缩进级别，使用分号，以及添加注释。让我们从格式化代码开始。
- en: Formatting code
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码格式化
- en: Code needs to be formatted well. If you have a long file with many lines of
    code and you didn't stick to a few basic formatting rules, it is going to be hard
    to understand what you've written. So, what are the basic formatting rules? The
    two most important for now are indentations and semicolons. There are also naming
    conventions, but these will be addressed for every topic that is yet to come.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 代码需要很好地格式化。如果你有一个很长的文件，有很多行代码，而你又没有坚持一些基本的格式化规则，那么理解你所写的内容将会很困难。所以，基本格式化规则是什么？目前最重要的两个是缩进和分号。还有命名约定，但这些问题将在未来的每个主题中讨论。
- en: Indentations and whitespace
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩进和空白
- en: When you are writing code, often a line of code belongs to a certain code block
    (code between two curly brackets `{ like this }`) or parent statement. If that
    is the case, you give the code in that block one indentation to make sure that
    you can see easily what is part of the block and when a new block starts. You
    don't need to understand the following code snippet, but it will demonstrate readability
    with and without indentations.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写代码时，通常一行代码属于某个特定的代码块（两个大括号`{}`之间的代码）或父语句。如果是这样，你给该块中的代码一个缩进，以确保你可以轻松地看到哪些是块的一部分，以及何时开始新的块。你不需要理解下面的代码片段，但它将展示有缩进和无缩进时的可读性。
- en: 'Without new lines:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用新行：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With new lines but without indentation:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新行但不缩进：
- en: '[PRE7]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With new lines and indentation:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新行和缩进：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see, you can now easily see when the code blocks end. This is where
    the `if` has a corresponding `}` at the same indentation level. In the example
    without indentations, you would have to count the brackets to determine when the
    `if` block would end. Even though it is not necessary for working code, make sure
    to use indentation well. You will thank yourself later.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你现在可以很容易地看到代码块何时结束。这就是`if`在相同缩进级别有相应的`}`的地方。在未缩进的例子中，你将不得不数括号来确定`if`块何时结束。即使对于工作代码来说这不是必要的，但请确保正确使用缩进。你会在以后感谢自己的。
- en: Semicolons
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分号
- en: After every statement, you should insert a semicolon. JavaScript is very forgiving
    and will understand many situations in which you have forgotten one, but develop
    the habit of adding one after every line of code early. When you declare a code
    block, such as an `if` statement or loop, you should not end with a semicolon.
    It is only for the separate statements.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个语句之后，你应该插入一个分号。JavaScript非常宽容，会理解许多你忘记添加分号的情况，但最好养成在每行代码后都添加分号的习惯。当你声明一个代码块，如`if`语句或循环时，你不应该以分号结束。这只是为了单独的语句。
- en: Code comments
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码注释
- en: 'With comments, you can tell the interpreter to ignore some lines of the file.
    They won''t get executed if they are comments. It is often useful to be able to
    avoid executing a part of the file. This could be for the following reasons:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用注释，你可以告诉解释器忽略文件中的某些行。如果它们是注释，则不会执行。能够避免执行文件的一部分通常很有用。这可能是以下原因之一：
- en: You do not want to execute a piece of code while running the script, so you
    comment it out so it gets ignored by the interpreter.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你不希望在运行脚本时执行一段代码，所以你将其注释掉，这样它就会被解释器忽略。
- en: Metadata. Adding some context to the code, such as the author, and a description
    of what the file covers.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 元数据。为代码添加一些上下文，例如作者，以及文件涵盖的描述。
- en: Adding comments to specific parts of the code to explain what is happening or
    why a certain choice has been made.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码的特定部分添加注释来解释正在发生的事情或为什么做出了某个选择。
- en: 'There are two ways to write comments. You can either write single-line comments
    or multi-line comments. Here is an example:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 写注释有两种方式。你可以写单行注释或者多行注释。以下是一个例子：
- en: '[PRE9]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Practice exercise 1.4
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习1.4
- en: 'Adding comments:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 添加注释：
- en: 'Add a new statement to your JavaScript code by setting a variable value. Since
    we will cover this in the next chapter, you can use the following line:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过设置变量值向你的 JavaScript 代码中添加一个新语句。由于我们将在下一章中介绍这个内容，你可以使用以下行：
- en: '[PRE11]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Add a comment at the end of the statement indicating that you set a value of
    `10`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在语句末尾添加注释，说明你设置了 `10` 的值。
- en: Print the value using `console.log()`. Add a comment explaining what this will
    do.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `console.log()` 打印值。添加注释说明这将做什么。
- en: At the end of your JavaScript code, use a multiple-line comment. In a real production
    script, you might use this space to add a brief outline of the purpose of the
    file.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 JavaScript 代码末尾使用多行注释。在实际的生产脚本中，你可能可以使用这个空间来添加文件目的的简要概述。
- en: Prompt
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提示
- en: 'Another thing we would like to show you here is also a command prompt. It works
    very much like an alert, but instead, it takes input from the user. We will learn
    how to store variables very soon, and once you know that, you can store the result
    of this prompt function and do something with it. Go ahead and change the `alert()`
    to a `prompt()` in the `Hi.html` file, for example, like this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还想在这里向你展示另一个命令提示符。它的工作方式与警报非常相似，但它会从用户那里获取输入。我们将很快学习如何存储变量，一旦你知道这一点，你就可以存储这个提示函数的结果并对其进行处理。例如，将
    `alert()` 改为 `prompt()` 在 `Hi.html` 文件中，如下所示：
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, go ahead and refresh the HTML. You will get a popup with an input box
    in which you can enter text, as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，刷新 HTML。你将看到一个带有输入框的弹出窗口，你可以在其中输入文本，如下所示：
- en: '![Graphical user interface, application'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![图形用户界面，应用程序'
- en: Description automatically generated](img/B16682_01_05.png)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/B16682_01_05.png)
- en: 'Figure 1.5: Page prompting for use input'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5：页面提示用户输入
- en: The value you (or any other user) enter will be returned to the script, and
    can be used in your code! This is great for getting user input to shape the way
    your code works.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你（或任何其他用户）输入的值将被返回到脚本中，并可以在你的代码中使用！这对于获取用户输入以塑造代码的工作方式非常有用。
- en: Random numbers
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机数
- en: 'For the purpose of fun exercises in the early chapters of this book, we would
    like you to know how to generate a random number in JavaScript. It is absolutely
    fine if you don''t really understand what is going on just yet; just know that
    this is the command to create a random number:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在这本书的前几章进行有趣的练习，我们希望你知道如何在 JavaScript 中生成一个随机数。即使你现在还不完全理解发生了什么，也没有关系；只需知道这是创建随机数的命令：
- en: '[PRE13]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can do it in the console and see the result appear if we log it:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在控制台中执行它，并查看结果是否出现：
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This number will be a decimal between 0 and 1\. If we want a number between
    0 and 100, we can multiply it by 100, like this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数字将在 0 和 1 之间的小数。如果我们想要一个介于 0 和 100 之间的数字，我们可以将其乘以 100，如下所示：
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Don't worry, we will cover mathematic operators in *Chapter 2*, *JavaScript
    Essentials*.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心，我们将在 *第 2 章*，*JavaScript 基础* 中介绍数学运算符。
- en: 'If we don''t want to have a decimal result, we can use the `Math.floor` function
    on it, which is rounding it down to the nearest integer:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不希望得到小数结果，我们可以使用 `Math.floor` 函数，它将向下取整到最接近的整数：
- en: '[PRE16]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Don't worry about not getting this yet. This will be explained in more detail
    further on in the book. In *Chapter 8*, *Built-In JavaScript Methods*, we will
    discuss built-in methods in more detail. Until then, just trust us that this does
    generate a random number between 0 and 100.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心现在还没有掌握这个。这本书后面会更详细地解释。在 *第 8 章*，*内置 JavaScript 方法* 中，我们将更详细地讨论内置方法。在此之前，请相信我们这确实会在
    0 到 100 之间生成一个随机数。
- en: Chapter project
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节项目
- en: Creating an HTML file and a linked JavaScript file
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个 HTML 文件和一个链接的 JavaScript 文件
- en: Create an HTML file and create a separate JavaScript file. Then, connect to
    the JavaScript file from the HTML file.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 HTML 文件，创建一个单独的 JavaScript 文件。然后，从 HTML 文件连接到 JavaScript 文件。
- en: In the JavaScript file, output your name into the console and add a multiple-line
    comment to your code.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JavaScript 文件中，将你的名字输出到控制台，并在你的代码中添加一个多行注释。
- en: Try commenting out the console message in your JavaScript file so that nothing
    shows in the console.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在 JavaScript 文件中注释掉控制台消息，这样控制台就不会显示任何内容。
- en: Self-check quiz
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自我检查测验
- en: What is the HTML syntax to add an external JavaScript file?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加外部 JavaScript 文件的 HTML 语法是什么？
- en: Can you run JavaScript in a file with a JS extension in your browser?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能在浏览器中运行扩展名为 JS 的文件中的 JavaScript 代码吗？
- en: How do you write a multiple-line comment in JavaScript?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何在 JavaScript 中编写多行注释？
- en: What is the best way to remove a line of code from running that you might want
    to keep as you debug?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最好的方法是什么，可以从正在运行的代码中移除一行代码，同时你希望保留它以供调试？
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Nicely done! You have made a start with JavaScript! In this chapter, we have
    discussed a lot of context, which you will need to know before starting to code
    JavaScript. We saw that we can use JavaScript for many purposes, and one of the
    most popular use cases is the web. Browsers can work with JavaScript because they
    have a special part, called an interpreter, that can process JavaScript. We saw
    that we have multiple options for writing JavaScript on our computer. We will
    need an IDE, a program that we can use to write and run our code.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 干得漂亮！你已经开始了JavaScript的学习！在本章中，我们讨论了许多背景知识，这些知识在你开始编写JavaScript代码之前需要了解。我们了解到JavaScript可以用于许多目的，其中最受欢迎的使用场景之一是网页。浏览器可以与JavaScript协同工作，因为它们有一个特殊的部分，称为解释器，可以处理JavaScript。我们看到了在电脑上编写JavaScript的多种选择。我们需要一个IDE，这是一个我们可以用来编写和运行代码的程序。
- en: Adding JavaScript to a web page can be done in several ways. We saw how to include
    it in the script element and how to add a separate JavaScript file to a page.
    We ended this chapter with some important general notes on how to write well-structured,
    readable, and easy-to-maintain code that is well documented with comments. We
    also saw that we can write to the console with our `console.log()` method and
    ask for user input using `prompt()`. Lastly, we also saw that we can generate
    random numbers with the `Math.random()` function.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 将JavaScript添加到网页中可以通过几种方式完成。我们看到了如何在脚本元素中包含它，以及如何将单独的JavaScript文件添加到页面中。我们以一些关于如何编写结构良好、易于阅读和维护的代码的重要一般性说明结束本章，这些代码通过注释进行了良好的文档记录。我们还看到，我们可以使用`console.log()`方法向控制台写入，并使用`prompt()`方法请求用户输入。最后，我们还看到，我们可以使用`Math.random()`函数生成随机数。
- en: Next, we'll look at JavaScript's basic data types and the operators that can
    be used to manipulate them!
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨JavaScript的基本数据类型以及可以用来操作它们的运算符！
