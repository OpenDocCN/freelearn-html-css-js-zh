["```js\n{ \n    fillColor: \"#ee9900\", \n    fillOpacity: 0.4, \n    strokeColor: \"#ee9900\", \n    strokeOpacity: 1, \n    strokeWidth: 1 \n}\n\n```", "```js\n        // Create the map using the specified DOM element\n        var map = new OpenLayers.Map(\"ch07_using_symbolizers\");\n\n        var osm = new OpenLayers.Layer.OSM();\n        map.addLayer(osm);\n\n        map.setCenter(new OpenLayers.LonLat(0,0), 3)\n\n    ```", "```js\n        var vectorLayer = new OpenLayers.Layer.Vector(\"Features\");\n        vectorLayer.events.register('beforefeatureadded', vectorLayer, setFeatureStyle);\n        map.addLayer(vectorLayer);\n\n    ```", "```js\n        var editingControl = new OpenLayers.Control.EditingToolbar(vectorLayer);\n        map.addControl(editingControl);\n\n    ```", "```js\n        function setFeatureStyle(event) {\n            var fillColor = dijit.byId('fillColor').get('value');\n            var fillOpacity = dijit.byId('fillOpacity').get('value')/100;\n            var strokeColor = dijit.byId('strokeColor').get('value');\n            var strokeWidth = dijit.byId('strokeWidth').get('value');\n            var strokeOpacity = dijit.byId('strokeOpacity').get('value')/100;\n            var pointRadius = dijit.byId('pointRadius').get('value');\n\n            var style = OpenLayers.Util.extend({}, OpenLayers.Feature.Vector.style['default']);\n            style.fillColor = fillColor;\n            style.fillOpacity = fillOpacity;\n            style.strokeColor = strokeColor;\n            style.strokeWidth = strokeWidth;\n            style.strokeOpacity = strokeOpacity;\n            style.pointRadius = pointRadius;\n\n            event.feature.style = style;\n        }\n\n    ```", "```js\n    vectorLayer.events.register('beforefeatureadded', vectorLayer, setFeatureStyle);\n\n```", "```js\n    function setFeatureStyle(event) {\n        var fillColor = dijit.byId('fillColor').get('value');\n        var fillOpacity = dijit.byId('fillOpacity').get('value')/100;\n        var strokeColor = dijit.byId('strokeColor').get('value');\n        var strokeWidth = dijit.byId('strokeWidth').get('value');\n        var strokeOpacity = dijit.byId('strokeOpacity').get('value')/100;\n        var pointRadius = dijit.byId('pointRadius').get('value');\n\n        var style = OpenLayers.Util.extend({}, OpenLayers.Feature.Vector.style['default']);\n        style.fillColor = fillColor;\n        style.fillOpacity = fillOpacity;\n        style.strokeColor = strokeColor;\n        style.strokeWidth = strokeWidth;\n        style.strokeOpacity = strokeOpacity;\n        style.pointRadius = pointRadius;\n\n        event.feature.style = style;\n    }\n\n```", "```js\n    <div id=\"ch07_styleMap\" style=\"width: 100%; height: 95%;\"></div>\n\n    ```", "```js\n    <script type=\"text/javascript\">\n        // Create the map using the specified DOM element\n        var map = new OpenLayers.Map(\"ch07_styleMap\");\n\n        var osm = new OpenLayers.Layer.OSM();\n        map.addLayer(osm);\n\n        map.setCenter(new OpenLayers.LonLat(0,0), 2)\n\n    ```", "```js\n        // Create stylemap for the layer\n        var colors = ['#EBC137','#E38C2D','#DB4C2C','#771E10','#48110C'];\n\n    ```", "```js\n        var style = OpenLayers.Util.extend({}, OpenLayers.Feature.Vector.style[\"default\"]);\n        style.pointRadius = \"${radius}\";\n        style.fillColor = '${colorFunction}';\n\n        var defaultStyle = new OpenLayers.Style(style, {\n            context: {\n                colorFunction: function(feature) {\n                    return colors[feature.attributes.temp];\n                }\n            }\n        });\n\n    ```", "```js\n        // Create the vector layer\n        var vectorLayer = new OpenLayers.Layer.Vector(\"Features\", {\n            styleMap: new OpenLayers.StyleMap(defaultStyle)\n        });\n        map.addLayer(vectorLayer);\n\n    ```", "```js\n        // Create random feature points.\n        var pointFeatures = [];\n        for(var i=0; i< 150; i++) {\n            var px = Math.random() * 360 - 180;\n            var py = Math.random() * 170 - 85;\n\n            // Create a lonlat instance and transform it to the map projection.\n            var lonlat = new OpenLayers.LonLat(px, py);\n            lonlat.transform(new OpenLayers.Projection(\"EPSG:4326\"), new OpenLayers.Projection(\"EPSG:900913\"));\n\n            var pointGeometry = new OpenLayers.Geometry.Point(lonlat.lon, lonlat.lat);\n            var pointFeature = new OpenLayers.Feature.Vector(pointGeometry);\n\n            // Add random attributes\n            var radius = Math.round(Math.random() * 15 + 4);\n            var temp = Math.round(Math.random() * 4);\n            pointFeature.attributes.radius = radius;\n            pointFeature.attributes.temp = temp;\n\n            pointFeatures.push(pointFeature);\n        }\n        // Add features to the layer\n        vectorLayer.addFeatures(pointFeatures); \n\n    </script>\n\n    ```", "```js\n        var px = Math.random() * 360 - 180;\n        var py = Math.random() * 170 - 85;\n\n        // Create a lonlat instance and transform it to the map projection.\n        var lonlat = new OpenLayers.LonLat(px, py);\n        lonlat.transform(new OpenLayers.Projection(\"EPSG:4326\"), new OpenLayers.Projection(\"EPSG:900913\"));\n\n        var pointGeometry = new OpenLayers.Geometry.Point(lonlat.lon, lonlat.lat);\n        var pointFeature = new OpenLayers.Feature.Vector(pointGeometry);\n\n```", "```js\n        // Add random attributes\n        var radius = Math.round(Math.random() * 15 + 4);\n        var temp = Math.round(Math.random() * 4);\n        pointFeature.attributes.radius = radius;\n        pointFeature.attributes.temp = temp;\n\n```", "```js\n    var style = OpenLayers.Util.extend({}, OpenLayers.Feature.Vector.style[\"default\"]);\n\n```", "```js\n{ \n    fillColor: \"#ee9900\", \n    fillOpacity: 0.4, \n    hoverFillColor: \"white\", \n    hoverFillOpacity: 0.8, \n    strokeColor: \"#ee9900\", \n    strokeOpacity: 1, \n    strokeWidth: 1, \n    strokeLinecap: \"round\", \n    strokeDashstyle: \"solid\", \n    hoverStrokeColor: \"red\", \n    hoverStrokeOpacity: 1, \n    hoverStrokeWidth: 0.2, \n    pointRadius: 6, \n    hoverPointRadius: 1, \n    hoverPointUnit: \"%\", \n    pointerEvents: \"visiblePainted\", \n    cursor: \"inherit\" \n}\n\n```", "```js\npointRadius: 15\n\n```", "```js\npointRadius: '${featureRadius}'\n\n```", "```js\n    style.pointRadius = \"${radius}\";\n\n```", "```js\n    style.fillColor = '${colorFunction}';\n\n```", "```js\n    var defaultStyle = new OpenLayers.Style(style, {\n        context: {\n            colorFunction: function(feature) {\n                return colors[feature.attributes.temp];\n            }\n        }\n    });\n\n```", "```js\n    var vectorLayer = new OpenLayers.Layer.Vector(\"Features\", {\n        styleMap: new OpenLayers.StyleMap(defaultStyle)\n    });\n    map.addLayer(vectorLayer);\n\n```", "```js\n    <div id=\"ch07_rendering_intents\" style=\"width: 100%; height: 95%;\"></div>\n\n    ```", "```js\n    <script type=\"text/javascript\">\n        // Create the map using the specified DOM element\n        var map = new OpenLayers.Map(\"ch07_rendering_intents\");\n\n        var osm = new OpenLayers.Layer.OSM();\n        map.addLayer(osm);\n\n        map.setCenter(new OpenLayers.LonLat(0,0), 2)\n\n    ```", "```js\n        var defaultStyle = new OpenLayers.Style({\n            fillColor: \"#336699\",\n            fillOpacity: 0.4, \n            hoverFillColor: \"white\",\n            hoverFillOpacity: 0.8,\n            strokeColor: \"#003366\",\n            strokeOpacity: 0.8,\n            strokeWidth: 2,\n            strokeLinecap: \"round\",\n            strokeDashstyle: \"solid\",\n            hoverStrokeColor: \"red\",\n            hoverStrokeOpacity: 1,\n            hoverStrokeWidth: 0.2,\n            pointRadius: 6,\n            hoverPointRadius: 1,\n            hoverPointUnit: \"%\",\n            pointerEvents: \"visiblePainted\",\n            cursor: \"inherit\"\n        });\n        var selectStyle = new OpenLayers.Style({\n            fillColor: \"#ffcc00\",\n            fillOpacity: 0.4, \n            hoverFillColor: \"white\",\n            hoverFillOpacity: 0.6,\n            strokeColor: \"#ff9900\",\n            strokeOpacity: 0.6,\n            strokeWidth: 2,\n            strokeLinecap: \"round\",\n            strokeDashstyle: \"solid\",\n            hoverStrokeColor: \"red\",\n            hoverStrokeOpacity: 1,\n            hoverStrokeWidth: 0.2,\n            pointRadius: 6,\n            hoverPointRadius: 1,\n            hoverPointUnit: \"%\",\n            pointerEvents: \"visiblePainted\",\n            cursor: \"pointer\"\n        });\n        var temporaryStyle = new OpenLayers.Style({\n            fillColor: \"#587058\",\n            fillOpacity: 0.4, \n            hoverFillColor: \"white\",\n            hoverFillOpacity: 0.8,\n            strokeColor: \"#587498\",\n            strokeOpacity: 0.8,\n            strokeLinecap: \"round\",\n            strokeWidth: 2,\n            strokeDashstyle: \"solid\",\n            hoverStrokeColor: \"red\",\n            hoverStrokeOpacity: 1,\n            hoverStrokeWidth: 0.2,\n            pointRadius: 6,\n            hoverPointRadius: 1,\n            hoverPointUnit: \"%\",\n            pointerEvents: \"visiblePainted\",\n            cursor: \"inherit\"\n        });\n\n    ```", "```js\n        var styleMap = new OpenLayers.StyleMap({\n            'default': defaultStyle,\n            'select': selectStyle,\n            'temporary': temporaryStyle\n        });\n\n    ```", "```js\n        var vectorLayer = new OpenLayers.Layer.Vector(\"Features\", {\n            styleMap: styleMap\n        });\n        map.addLayer(vectorLayer);\n\n    ```", "```js\n        var editingControl = new OpenLayers.Control.EditingToolbar(vectorLayer);\n        var modifyControl = new OpenLayers.Control.ModifyFeature(vectorLayer, {\n            toggle: true\n        });\n        editingControl.addControls([modifyControl]);\n        map.addControl(editingControl);\n    </script>\n\n    ```", "```js\n    var styleMap = new OpenLayers.StyleMap({\n        'default': defaultStyle,\n        'select': selectStyle,\n        'temporary': temporaryStyle\n    });\n\n```", "```js\n    var defaultStyle = new OpenLayers.Style({\n        fillColor: \"#336699\",\n        fillOpacity: 0.4, \n        hoverFillColor: \"white\",\n        hoverFillOpacity: 0.8,\n        strokeColor: \"#003366\",\n        strokeOpacity: 0.8,\n        strokeWidth: 2,\n        strokeLinecap: \"round\",\n        strokeDashstyle: \"solid\",\n        hoverStrokeColor: \"red\",\n        hoverStrokeOpacity: 1,\n        hoverStrokeWidth: 0.2,\n        pointRadius: 6,\n        hoverPointRadius: 1,\n        hoverPointUnit: \"%\",\n        pointerEvents: \"visiblePainted\",\n        cursor: \"inherit\"\n    });\n\n```", "```js\n    var editingControl = new OpenLayers.Control.EditingToolbar(vectorLayer);\n\n```", "```js\n    var modifyControl = new OpenLayers.Control.ModifyFeature(vectorLayer, {\n        toggle: true\n    });\n    editingControl.addControls([modifyControl]);\n\n```", "```js\n    <div id=\"ch07_unique_value_rules\" style=\"width: 100%; height: 95%;\"></div>\n\n    ```", "```js\n    <script type=\"text/javascript\">\n        // Create the map using the specified DOM element\n        var map = new OpenLayers.Map(\"ch07_unique_value_rules\");\n\n        var osm = new OpenLayers.Layer.OSM();\n        map.addLayer(osm);\n\n        map.setCenter(new OpenLayers.LonLat(0,0), 4)\n\n    ```", "```js\n        var styles = {\n          7: { pointRadius: 4, label: \"${POP_RANK}\" },\n          6: { pointRadius: 7, label: \"${POP_RANK}\" },\n          5: { pointRadius: 10, label: \"${POP_RANK}\" },\n          4: { pointRadius: 13, label: \"${POP_RANK}\" },\n          3: { pointRadius: 15, label: \"${POP_RANK}\" },\n          2: { pointRadius: 18, label: \"${POP_RANK}\", fillColor: \"yellow\" },\n          1: { pointRadius: 21, label: \"${POP_RANK}\", fillColor: \"green\" }\n        };\n\n    ```", "```js\n        var styleMap = new OpenLayers.StyleMap();\n        styleMap.addUniqueValueRules(\"default\", \"POP_RANK\", styles);\n\n    ```", "```js\n        map.addLayer(new OpenLayers.Layer.Vector(\"World Cities (GeoJSON)\", {\n            protocol: new OpenLayers.Protocol.HTTP({\n                url: \"http://localhost:8080/openlayers-cookbook/recipes/data/world_cities.json\",\n                format: new OpenLayers.Format.GeoJSON()\n            }),\n            styleMap: styleMap,\n            strategies: [new OpenLayers.Strategy.Fixed()]\n        }));\n    </script>\n\n    ```", "```js\n    styleMap.addUniqueValueRules(\"default\", \"POP_RANK\", styles);\n\n```", "```js\n    var styles = {\n      7: { pointRadius: 4, label: \"${POP_RANK}\" },\n      6: { pointRadius: 7, label: \"${POP_RANK}\" },\n      5: { pointRadius: 10, label: \"${POP_RANK}\" },\n      4: { pointRadius: 13, label: \"${POP_RANK}\" },\n      3: { pointRadius: 15, label: \"${POP_RANK}\" },\n      2: { pointRadius: 18, label: \"${POP_RANK}\", fillColor: \"yellow\" },\n      1: { pointRadius: 21, label: \"${POP_RANK}\", fillColor: \"green\" }\n    };\n\n```", "```js\n    map.addLayer(new OpenLayers.Layer.Vector(\"World Cities (GeoJSON)\", {\n        protocol: new OpenLayers.Protocol.HTTP({\n            url: \"http://localhost:8080/openlayers-cookbook/recipes/data/world_cities.json\",\n            format: new OpenLayers.Format.GeoJSON()\n        }),\n        styleMap: styleMap,\n        strategies: [new OpenLayers.Strategy.Fixed()]\n    }));\n\n```", "```js\n    <div id=\"ch07_custom_rules\" style=\"width: 100%; height: 95%;\"></div>\n\n    ```", "```js\n    <script type=\"text/javascript\">\n        // Create the map using the specified DOM element\n        var map = new OpenLayers.Map(\"ch07_custom_rules\");\n\n        var osm = new OpenLayers.Layer.OSM();\n        map.addLayer(osm);\n\n        map.setCenter(new OpenLayers.LonLat(40,50).transform(new OpenLayers.Projection(\"EPSG:4326\"), \n        new OpenLayers.Projection(\"EPSG:900913\")), 3);\n\n    ```", "```js\n        var aRule = new OpenLayers.Rule({\n            filter: new OpenLayers.Filter.Comparison({\n                type: OpenLayers.Filter.Comparison.LESS_THAN,\n                property: \"AREA\",\n                value: 10000\n            }),\n            symbolizer: {\n                fillColor: \"#EBC137\",\n                fillOpacity: 0.5, \n                strokeColor: \"black\"\n            }\n        });\n\n    ```", "```js\n        var bRule = new OpenLayers.Rule({\n            filter: new OpenLayers.Filter.Logical({\n                type: OpenLayers.Filter.Logical.AND,\n                filters: [\n                    new OpenLayers.Filter.Comparison({\n                        type: OpenLayers.Filter.Comparison.GREATER_THAN,\n                        property: \"AREA\",\n                        value: 10000\n                    }),\n                    new OpenLayers.Filter.Comparison({\n                        type: OpenLayers.Filter.Comparison.LESS_THAN_OR_EQUAL_TO,\n                        property: \"AREA\",\n                        value: 25000\n                    })\n                ]\n            }),\n            symbolizer: {\n                fillColor: \"#E38C2D\",\n                fillOpacity: 0.7, \n                strokeColor: \"black\"\n            }\n        });\n\n    ```", "```js\n        var cRule = new OpenLayers.Rule({\n            filter: new OpenLayers.Filter.Logical({\n                type: OpenLayers.Filter.Logical.AND,\n                filters: [\n                    new OpenLayers.Filter.Comparison({\n                        type: OpenLayers.Filter.Comparison.GREATER_THAN,\n                        property: \"AREA\",\n                        value: 25000\n                    }),\n                    new OpenLayers.Filter.Comparison({\n                        type: OpenLayers.Filter.Comparison.LESS_THAN_OR_EQUAL_TO,\n                        property: \"AREA\",\n                        value: 50000\n                    })\n                ]\n            }),\n            symbolizer: {\n                fillColor: \"#DB4C2C\",\n                fillOpacity: 0.7, \n                strokeColor: \"black\"\n            }\n        });\n\n    ```", "```js\n        var dRule = new OpenLayers.Rule({\n            filter: new OpenLayers.Filter.Logical({\n                type: OpenLayers.Filter.Logical.AND,\n                filters: [\n                    new OpenLayers.Filter.Comparison({\n                        type: OpenLayers.Filter.Comparison.GREATER_THAN,\n                        property: \"AREA\",\n                        value: 50000\n                    }),\n                    new OpenLayers.Filter.Comparison({\n                        type: OpenLayers.Filter.Comparison.LESS_THAN_OR_EQUAL_TO,\n                        property: \"AREA\",\n                        value: 100000\n                    })\n                ]\n            }),\n            symbolizer: {\n                fillColor: \"#771E10\",\n                fillOpacity: 0.7, \n                strokeColor: \"black\"\n            }\n        });\n\n    ```", "```js\n        var eRule = new OpenLayers.Rule({\n            filter: new OpenLayers.Filter.Comparison({\n                type: OpenLayers.Filter.Comparison.GREATER_THAN_OR_EQUAL_TO,\n                property: \"AREA\",\n                value: 100000\n            }),\n            symbolizer: {\n                fillColor: \"#48110C\",\n                fillOpacity: 0.7, \n                strokeColor: \"black\"\n            }\n        });\n\n    ```", "```js\n        var style = new OpenLayers.Style();\n        style.addRules([aRule, bRule, cRule, dRule, eRule]);\n\n    ```", "```js\n        map.addLayer(new OpenLayers.Layer.Vector(\"World Cities (GeoJSON)\", {\n            protocol: new OpenLayers.Protocol.HTTP({\n                url: \"http://localhost:8080/openlayers-cookbook/recipes/data/europe.gml\",\n                format: new OpenLayers.Format.GML()\n            }),\n            styleMap: new OpenLayers.StyleMap(style),\n            strategies: [new OpenLayers.Strategy.Fixed()]\n        }));\n    </script>\n\n    ```", "```js\n    var aRule = new OpenLayers.Rule({\n        filter: new OpenLayers.Filter.Comparison({\n            type: OpenLayers.Filter.Comparison.LESS_THAN,\n            property: \"AREA\",\n            value: 10000\n        }),\n        symbolizer: {\n            fillColor: \"#EBC137\",\n            fillOpacity: 0.5, \n            strokeColor: \"black\"\n        }\n    });\n\n```", "```js\n    var bRule = new OpenLayers.Rule({\n        filter: new OpenLayers.Filter.Logical({\n            type: OpenLayers.Filter.Logical.AND,\n            filters: [\n                new OpenLayers.Filter.Comparison({\n                    type: OpenLayers.Filter.Comparison.GREATER_THAN,\n                    property: \"AREA\",\n                    value: 10000\n                }),\n                new OpenLayers.Filter.Comparison({\n                    type: OpenLayers.Filter.Comparison.LESS_THAN_OR_EQUAL_TO,\n                    property: \"AREA\",\n                    value: 25000\n                })\n            ]\n        }),\n        symbolizer: {\n            fillColor: \"#E38C2D\",\n            fillOpacity: 0.7, \n            strokeColor: \"black\"\n        }\n    });\n\n```", "```js\n    var style = new OpenLayers.Style();\n    style.addRules([aRule, bRule, cRule, dRule, eRule]);\n\n```", "```js\n    map.addLayer(new OpenLayers.Layer.Vector(\"World Cities (GeoJSON)\", {\n        protocol: new OpenLayers.Protocol.HTTP({\n            url: \"http://localhost:8080/openlayers-cookbook/recipes/data/europe.gml\",\n            format: new OpenLayers.Format.GML()\n        }),\n        styleMap: new OpenLayers.StyleMap(style),\n        strategies: [new OpenLayers.Strategy.Fixed()]\n    }));\n\n```", "```js\n  map.setCenter(new OpenLayers.LonLat(40,50).transform(new OpenLayers.Projection(\"EPSG:4326\"), \n    new OpenLayers.Projection(\"EPSG:900913\")), 3);\n\n```", "```js\n    var style = new OpenLayers.Style();\n    style.addRules([aRule, bRule, cRule, dRule, eRule]);\n\n```", "```js\n    var style = new OpenLayers.Style({\n        our_default_style\n    }, {\n        rules: [aRule, bRule, cRule, dRule, eRule]\n    });\n\n```", "```js\n    <div id=\"ch07_cluster_number_style\" style=\"width: 100%; height: 95%;\"></div>\n\n    ```", "```js\n    <script type=\"text/javascript\">\n        // Create the map using the specified DOM element\n        var map = new OpenLayers.Map(\"ch07_cluster_number_style\");\n\n    ```", "```js\n        var osm = new OpenLayers.Layer.OSM();\n        map.addLayer(osm);\n\n        map.setCenter(new OpenLayers.LonLat(0,20).transform(new OpenLayers.Projection(\"EPSG:4326\"), \n        new OpenLayers.Projection(\"EPSG:900913\")), 2);\n\n    ```", "```js\n        var cities = new OpenLayers.Layer.Vector(\"World Cities (GeoJSON)\", {\n            protocol: new OpenLayers.Protocol.HTTP({\n                url: \"http://localhost:8080/openlayers-cookbook/recipes/data/world_cities.json\",\n                format: new OpenLayers.Format.GeoJSON()\n            }),\n            strategies: [new OpenLayers.Strategy.Fixed(), new OpenLayers.Strategy.Cluster({distance: 25})],\n            styleMap: new OpenLayers.StyleMap({\n                'default': new OpenLayers.Style({\n                    strokeWidth: '${strokeFunction}',\n                    strokeOpacity: 0.5,\n                    strokeColor: \"#88aaaa\",\n                    fillColor: \"#99CC55\",\n                    fillOpacity: 0.5,\n                    pointRadius: '${radiusfunction}',\n                    label: \"${count}\",\n                    fontColor: \"#ffffff\"\n                }, {\n                    context: {\n                        strokeFunction: function(feature) {\n                            var count = feature.attributes.count;\n                            var stk = Math.max(0.1 * count, 1);\n                            return stk;\n                        },\n                        radiusFunction: function(feature) {\n                            var count = feature.attributes.count;\n                            var radius = Math.max(0.60 * count, 7);\n                            return radius;\n                        }\n                    }\n                })\n            })\n        });\n        map.addLayer(cities);\n    </script>\n\n    ```", "```js\n    map.setCenter(new OpenLayers.LonLat(0,20).transform(new OpenLayers.Projection(\"EPSG:4326\"), \n    new OpenLayers.Projection(\"EPSG:900913\")), 2);\n\n```", "```js\n    var cities = new OpenLayers.Layer.Vector(\"World Cities (GeoJSON)\", {\n        protocol: new OpenLayers.Protocol.HTTP({\n            url: \"http://localhost:8080/openlayers-cookbook/recipes/data/world_cities.json\",\n            format: new OpenLayers.Format.GeoJSON()\n        }),\n        strategies: [new OpenLayers.Strategy.Fixed(), new OpenLayers.Strategy.Cluster({distance: 25})],\n        styleMap: new OpenLayers.StyleMap({\n            'default': ...\n        })\n    });\n\n```", "```js\n        styleMap: new OpenLayers.StyleMap({\n            'default': ...\n        })\n\n```", "```js\nnew OpenLayers.Style({ \n    strokeWidth: '${strokeFunction}', \n    strokeOpacity: 0.5, \n    strokeColor: \"#88aaaa\", \n    fillColor: \"#99CC55\", \n    fillOpacity: 0.5, \n    pointRadius: '${radiusfunction}', \n    label: \"${count}\", \n    fontColor: \"#ffffff\" \n}, { \n    context: { \n        strokeFunction: function(feature) { \n            var count = feature.attributes.count; \n            var stk = Math.max(0.1 * count, 1); \n            return stk; \n        }, \n        radiusFunction: function(feature) { \n            var count = feature.attributes.count; \n            var radius = Math.max(0.60 * count, 7); \n            return radius; \n        } \n    } \n})\n\n```", "```js\n    strokeWidth: '${strokeFunction}', \n    ...\n    pointRadius: '${radiusfunction}', \n    label: \"${count}\", \n    ....\n\n```", "```js\n        radiusFunction: function(feature) { \n            var count = feature.attributes.count; \n            var radius = Math.max(0.60 * count, 7); \n            return radius; \n        } \n\n```"]