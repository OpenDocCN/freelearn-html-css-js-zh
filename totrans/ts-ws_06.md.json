["```js\ninterface UserInterFace {\n    email: string,\n    token: string,\n    resetPassword: ()=> boolean   \n}\n```", "```js\nconst User: UserInterFace = {\n    email: 'home@home.com',\n    token: '12345678',\n    resetPassword(): boolean{\n        return true\n    }\n}\n```", "```js\nExample_Interface_1.ts\n1 //first interface\n2 interface ProductTemplate {\n3     height: number\n4     width: number\n5     color: string\n6 }\nLink to the preceding example: https://packt.link/wYJis.\n```", "```js\n7 //make product function\n8 const productMaker = (product: ProductTemplate) => {\n9     return product\n10 }\n```", "```js\n11 // implement interface\n12 const myProduct: ProductTemplate = {\n13     height: 10,\n14     width: 12,\n15     color: 'red',\n16 }\n```", "```js\n(property) length: number\nType '{ height: number; width: number; color: string; length: number; }' is not assignable to type 'ProductTemplate'.\n  Object literal may only specify known properties, and 'length' does not exist in type 'ProductTemplate'.ts(2322)\n```", "```js\nconst myProduct: ProductTemplate\nProperty 'color' is missing in type '{ height: number; width: number; }' but required in type 'ProductTemplate'.ts(2741)\nExample_Interface.ts(5, 5): 'color' is declared here.\n```", "```js\n// call the function using console log to show the output\nconsole.log(productMaker(myProduct));\n```", "```js\n{ height: 10, width: 12, color: 'red' }\n```", "```js\nconst myBadProduct = {\n    height: '20',\n    color: 1\n}\nconsole.log (productMaker(myBadProduct))\n```", "```js\nerror TS2345: Argument of type '{ height: string; color: number; }' is not assignable to parameter of type 'ProductTemplate'.\n  Property 'width' is missing in type '{ height: string; color: number; }' but required in type 'ProductTemplate'.\n```", "```js\nExample_Interface_2.ts\n1 // first interface\n2 interface ProductTemplate {\n3     height: number\n4     width: number\n5     color: string\n6 }\n7 //function interface\n8 interface productInterfaceFunction {\n9     (product: ProductTemplate): ProductTemplate\n10 }\nLink to the preceding example: https://packt.link/Dzogj.\n```", "```js\n//make product function\nconst productMaker: productInterfaceFunction = (product: ProductTemplate) => {\n    return product }\n```", "```js\n{ height: 10, width: 12, color: 'red' }\n```", "```js\nExample_Interface_3.ts\n9  //product class interface\n10 interface ProductClassInterface {\n11    product: ProductTemplate\n12    makeProduct(product: ProductTemplate) :ProductTemplate\n13 }\nLink to the preceding example: https://packt.link/kF4Ee.\n```", "```js\n16 //class that implements product class interface \n17 class ProductClass implements ProductClassInterface  {\n18    product: ProductTemplate\n19    constructor(product: ProductTemplate){\n20        this.product = product\n21    }\n22    makeProduct():ProductTemplate {\n23        return this.product;\n24    }\n25 }\n26\n27 //new product object\n28 const product: ProductTemplate = {height:100, width:200, color: 'pink'}\n```", "```js\n27 //new product object\n28 const product: ProductTemplate = {height:100, width:200, color: 'pink'}\n29 \n30 //call make Product function\n31 // instantiate product class with new product object \n32 const newProduct = new ProductClass(product)\n33 // console our new product instance\n34 console.log(newProduct.product)\n```", "```js\n{ height: 100, width: 200, color: 'pink' }\n```", "```js\n    interface ProductObjectTemplate {\n        height: number\n        width: number\n        color: string\n    }\n    ```", "```js\n    interface ProductFunctionTemplate {\n        (product: ProductObjectTemplate)\n    }\n    ```", "```js\n    interface ProductClassTemplate {\n        makeProduct: ProductFunctionTemplate\n        allProducts():ProductObjectTemplate[]\n    }\n    ```", "```js\n    class Product implements ProductClassTemplate {\n        products: ProductObjectTemplate []\n        constructor() {\n            this.products = []\n        }\n        makeProduct(product: ProductObjectTemplate) {\n            this.products.push(product)\n        }\n\n        allProducts():ProductObjectTemplate[] {\n            return this.products\n        }}\n    ```", "```js\n    const productInstance: ProductClassTemplate = new Product()const productInstance: ProductClassTemplate = new Product()\n    productInstance.makeProduct({})\n    ```", "```js\n    productInstance.makeProduct(\n        {\n        color: \"red\", \n        height: 10, \n        width: 14\n        }\n    )\n    ```", "```js\n    console.log(productInstance.allProducts())\n    ```", "```js\n    console.log(productInstance.allProducts())\n    ```", "```js\n     [ { color: 'red', height: 10, width: 14 } ]\n    ```", "```js\n    type BlogPost = {\n        post: string,\n        timeStamp: number,\n        user: string\n    }\n    ```", "```js\n    interface AddToPost {\n         (post: BlogPost): BlogPost []\n    }\n    ```", "```js\n    interface IBlogPost {\n        allPost: BlogPost [],\n        addToPost: AddToPost\n    }\n    ```", "```js\n    class blogPostClass implements IBlogPost{\n        allPost: BlogPost [] = []\n        addToPost(post: BlogPost): BlogPost[] {\n            this.allPost = [\n                ...this.allPost,\n                post\n            ]\n            return this.allPost\n        }\n    }\n    ```", "```js\n    const blog = new blogPostClass();\n    ```", "```js\n    let post1: BlogPost = {post: 'Goodbye, 2020', timeStamp: 12345678, user: 'Rayon'}\n    let post2: BlogPost = {post: 'Welcome, 2021', timeStamp: 12345678, user: 'Mark'}\n    let post3: BlogPost = {post: 'What happened to 1999?', timeStamp: 12345678, user: 'Will'}\n    ```", "```js\n    blog.addToPost(post1)\n    blog.addToPost(post2)\n    blog.addToPost(post3)\n    ```", "```js\n    console.log(blog.allPost)\n    ```", "```js\n    [\n      { post: 'Goodbye, 2020', timeStamp: 12345678, user: 'Rayon' },\n      { post: 'Welcome, 2021', timeStamp: 12345678, user: 'Mark' },\n      { post: 'What happened to 1999?', timeStamp: 12345678, user: 'Will' }\n    ]\n    ```", "```js\n    type User = {\n        email: string,\n        userId: number\n    }\n    ```", "```js\n    interface SuperAddMe {\n        (user: User): User[]\n    };\n    ```", "```js\n    let allUsers: User[] = [\n        { email: 'home@home.com', userId: 1 },\n        { email: 'out@side.com', userId: 2 }\n    ];\n    ```", "```js\n    let adduser: SuperAddMe\n    adduser = function (user: User): User[] {\n        return [\n            ...allUsers,\n            user\n        ]\n    }\n    ```", "```js\n    console.log(\n        adduser(\n            { email: 'slow@mo', userId: allUsers.length }\n        )\n    )\n    ```", "```js\n    [\n      { email: 'home@home.com', userId: 1 },\n      { email: 'out@side.com', userId: 2 },\n      { email: 'slow@mo', userId: 2 }\n    ]\n    ```", "```js\n{ email: 'home@home.com', loginAt: 1614068072515, token: '123456' }\n{ email: 'home@home.com', loginAt: 1614068072515, token: '123456' }\n```", "```js\nExamples_Inheritance_1.ts\n1 class UserOne {\n2     email: string = \"\";\n3     createDate: number = 0;\n4     lastLogin: number = 0;\n5     token: string = \"\"\n6 \n7     setToken(token: string): void {\n8         // set user token\n9        this.token = token;\n10     }\n11     resetPassword(password: string):string {\n12         // return string of new password\n13         return password;\n14     }\n15 }\nLink to the preceding example: https://packt.link/23ts2.\n```", "```js\n16 class AdminUser extends UserOne {\n17     // pages admin has access to\n18     adminPages: string [] = [\"admin\", \"settings\"];\n19 \n20     // method that allows the admin to reset other users\n21    resetUserPassword(email: string):string {\n22         // return default user password\n23         return \"password123\";\n24     }\n25 }\n```", "```js\n26 // create a instance of our child class\n27 const adminUser: AdminUser = new AdminUser() \n28\n29 // create a string to hold our props\n30 let propString = ''\n31\n32 // loop through your props and appends prop names to propString\n33 for(let u in adminUser) {\n34     propString += u + ','\n35 }\n```", "```js\n36 // console out the results\n37 console.log(propString)\n```", "```js\nemail,createDate,lastLogin,token,adminPages,constructor,resetUserPassword,setToken,resetPassword,\n```", "```js\nExamples_Inheritance_2.ts\nclass SuperAdmin extends AdminUser {\n    superPages: string[] = [\"super\", \"ultimate\"]\n    createAdminUser(adminUser: AdminUser ): AdminUser {\n        return adminUser\n    }\n}\nLink to the preceding example: https://packt.link/XcFR6.\n```", "```js\n26 class SuperAdmin extends AdminUser {\n27     superPages: string[] = [\"super\", \"ultimate\"]\n28     readonly myHash: string\n29 \n30     constructor() {\n31         super()\n32         this.myHash = '1234567'\n33     }\n34 \n35     createAdminUser(adminUser: AdminUser ): AdminUser {\n36         return adminUser\n37     }\n38     resetPassword(password: string): string {\n39         // add hash to password\n40         return password + this.myHash; \n41     }\n42 }\n```", "```js\n43 const superAdmin = new SuperAdmin()\n44 const newAdmin = new AdminUser()\n45 console.log( superAdmin.resetPassword('iampassword'))\n46 console.log( newAdmin.resetPassword('iampassword'))\n```", "```js\niampassword1234567 \niampassword   \n```", "```js\nclass UserOne {\n    email: string = \"\";\n    createDate: number = 0;\n    lastLogin: number = 0;\n    private token: string = \"\"\n    setToken(token: string): void {\n        // set user token\n        this.token = token;\n    }\n    resetPassword(password: string):string {\n        // return string of new password\n        return password;\n}}\n```", "```js\n// adminUserTwo\nclass AdminUserTwo extends UserOne {\n    // pages admin has access to\n    constructor(email: string) {\n        super()\n        this.email = email;\n      }\n\n      adminPages: string [] = [\"admin\", \"settings\"];\n\n      resetUserPassword():string {\n          // return default user password\n          return \"password123\";\n      }\n```", "```js\nconst adminUserTwo = new AdminUserTwo('home@home.com');\n```", "```js\n    class User {\n        private userName: string; \n        private token: string = ''\n        readonly timeStamp: number = new Date().getTime()\n        constructor(userName: string, token: string) {\n            this.userName =  userName\n            this.token = token\n        }\n        logOut():void {\n            this.userName = ''\n            this.token = ''\n        }\n        getUser() {\n            return {\n                userName: this.userName,\n                token: this.token,\n                createdAt: this.timeStamp\n            }\n        }\n        protected renewToken (newToken: string) {\n            this.token = newToken\n        }}\n    ```", "```js\n    class Cashier extends User {\n        balance: number = 0\n        float: number = 0\n        start(balance: number, float: number): void {\n            this.balance= balance\n            this.float = float\n        }\n    }\n    ```", "```js\n    class Inventory extends User {\n        products: string [] = []\n        // override constructor method, add new prop\n        constructor(userName: string, token: string, products: string[]) {\n            // call parent constructor method\n            super(userName, token)\n            // set new prop\n            this.products = products\n    }}\n    ```", "```js\n    class FloorWorker extends Inventory {\n        floorStock: string [] = []\n        CheckOut(id: number) {\n            if(this.products.length >=0) {\n                this.floorStock.push(\n                    this.products[id]\n                )\n            }\n        }\n    }\n    ```", "```js\n    const basicUser = new User('user1', '12345678ttt')\n    console.log(basicUser) \n    ```", "```js\n    User {\n      token: '12345678ttt',\n      timeStamp: 1614074754797,\n      userName: 'user1'\n    }\n    ```", "```js\n    const cashUser = new Cashier('user2', '12345678')\n    console.log(cashUser)\n    cashUser.start(10, 1.5)\n    console.log(cashUser)\n    ```", "```js\n    Cashier {\n      token: '12345678',\n      timeStamp: 1614074754802,\n      userName: 'user2',\n      balance: 0,\n      float: 0\n    }\n    Cashier {\n      token: '12345678',\n      timeStamp: 1614074754802,\n      userName: 'user2',\n      balance: 10,\n      float: 1.5\n    ```", "```js\n    // init inventory\n    const iUser = new Inventory('user3', '123456789', [\n        'orange', 'mango', 'playStation 2'\n    ])\n    console.log(iUser) \n    ```", "```js\n    Inventory {\n      token: '123456789',\n      timeStamp: 1614074754819,\n      userName: 'user3',\n      products: [ 'orange', 'mango', 'playStation 2' ]\n    }\n    ```", "```js\n    // FloorWorker\n    const fUser = new FloorWorker('user4', '12345678', [\n        'orange', 'mango', 'playStation 2'\n    ])\n    fUser.CheckOut(0)\n    console.log(fUser.products) \n    console.log(fUser.floorStock)\n    ```", "```js\n    [ 'orange', 'mango', 'playStation 2' ]\n    [ 'orange' ]\n    ```", "```js\n    class Phone {\n    powerButton: boolean;\n    mic: boolean;\n    speaker: boolean;\n    serialNumber: string;\n    powerOn: boolean = false;\n    restart: boolean = false;\n    constructor(\n    powerButton: boolean,\n    mic: boolean,\n    speaker: boolean,\n    serialNumber: string,\n    ) {\n    this.powerButton = powerButton\n    this.mic = mic;\n    this.speaker = speaker;\n    this.serialNumber = serialNumber;\n    }\n\n    togglePower(): void {\n    this.powerOn ? this.powerOn = false : this.powerOn = true\n    }\n\n    reboot(): void {\n    this.restart = true\n    }\n    }\n    ```", "```js\n    class Smart extends Phone {\n    touchScreen: boolean = true;\n    fourG: boolean = true;\n    constructor(serial: string) {\n    super(true, true, true, serial)\n    }\n    playVideo(fileName: string): boolean {\n    return true\n    }\n    }\n    ```", "```js\n    class Dumb extends Phone {\n    dialPad: boolean = true;\n    threeG: boolean = true;\n    constructor(serial: string) {\n    super(true, true, true, serial)\n    }\n    NumberToLetter(number: number): string {\n    const letter = ['a', 'b', 'c', 'd']\n    return letter[number]\n    }\n    }\n    ```", "```js\n    const smartPhone = new Smart('12345678')\n    const standardPhone = new Standard('67890')\n    ```", "```js\n    console.log(smartPhone.playVideo('videoOne'))\n    console.log(standardPhone.NumberToLetter(3))\n    ```", "```js\n    true\n    d\n    ```", "```js\n    console.log(smartPhone)\n    console.log(standardPhone)\n    ```", "```js\n    Smart {\n      powerOn: false,\n      restart: false,\n      powerButton: true,\n      mic: true,\n      speaker: true,\n      serialNumber: '12345678',\n      touchScreen: true,\n      fourG: true\n    }\n    Dumb {\n      powerOn: false,\n      restart: false,\n      powerButton: true,\n      mic: true,\n      speaker: true,\n      serialNumber: '67890',\n      dialPad: true,\n      threeG: true\n    }\n    ```", "```js\n    Car { name: 'blueBird', wheels: 4, bodyType: 'sedan', rideHeight: 14 }\n    Truck { name: 'blueBird', wheels: 4, bodyType: 'sedan', offRoad: true }\n    Suv {\n      name: 'xtrail',\n      wheels: 4,\n      bodyType: 'box',\n      offRoad: true,\n      roofRack: true,\n      thirdRow: true\n    }\n    ```"]