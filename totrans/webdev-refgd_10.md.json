["```js\nvar car= {\n  model:\"2014\",\n  company:\"Honda\",\n  color:\"White\"\n};\n```", "```js\nvar empty = {}\n```", "```js\nvar car = new Object();\ncar.model = \"2014\";\ncar.company = \"Honda\";\ncar.colour = \"White\";\n```", "```js\nvarempty = new Object();    // An empty object, same as {}.\nvararr = new Array(); \t   // An empty array, same as [].\nvarcurrdate = new Date();    // Current Date. \nvarregex = new RegExp(\"JavaScript\"); // A pattern matching object.\n```", "```js\n// obj1 inherits properties model, company and colour.\nvarcar = Object.create({model:\"2014\",company:\"Honda\",colour:\"White\"});\n\n// car inherits no properties or methods.\nvarcar = Object.create(null);\n```", "```js\n// car is same as {} or new Object().\nvarcar = Object.create(Object.prototype);\n```", "```js\nvarObjectLiteral = {\n  variableKey: Value,\n\n  functionKey: function() {\n    //...\n  }\n};\n```", "```js\nmyModule.property = 'someValue';\n```", "```js\n// Detailed explanation of Mixin Design Pattern in JavaScript can be found here: http://addyosmani.com/resources/essentialjsdesignpatterns/book/#mixinpatternjavascript\n\n/* Car Class */\nvar Car = function(settings) {\n    this.model = settings.model || 'no model provided';\n    this.colour = settings.colour || 'no colour provided'; \n};\n\n/* Mixin Class */\nvar Mixin = function(){};\nMixin.prototype = {\n    driveForward: function() {\n        console.log('drive forward');\n    },\n    driveBackward: function() {\n        console.log('drive backward');        \n    }\n};\n\n/* Augment existing class with a method from another class */\nfunction augment(receivingClass, givingClass) {\n    /* only provide certain methods */\n    if(arguments[2]) {\n        var i, len = arguments.length;\n        for (i=2; i<len; i++) {\n            receivingClass.prototype[arguments[i]] = givingClass.prototype[arguments[i]];   \n        }\n    } \n    /* provide all methods */\n    else {\n        var methodName;\n        for (methodName in givingClass.prototype) {\n            /* check to make sure the receiving class doesn't have a method of the same name as the one currently being processed */\n            if (!receivingClass.prototype[methodName]) {\n                receivingClass.prototype[methodName] = givingClass.prototype[methodName];   \n            }\n        }\n    }\n}\n\n/* Augment the Car class to have the methods 'driveForward' and 'driveBackward' */\naugment(Car, Mixin, 'driveForward', 'driveBackward');\n\n/* Create a new Car */\nvar vehicle = new Car({model:'Ford Escort', colour:'blue'});\n\n/* Test to make sure we now have access to the methods */\nvehicle.driveForward();\nvehicle.driveBackward();\n```", "```js\n    Obj.getButtonColor();\n    ```", "```js\n    Obj.setButtonColor(value);\n    ```", "```js\nvarauthor = {\n  \"name\":\"talha\",\n  \"age\":\"24\"\n};\n```", "```js\n{\n  \"name\":\"talha\"\n};\n```", "```js\ndeleteauthor.age;\n\n```", "```js\ndelete author[\"age\"];\n\n```", "```js\n    For example:\n      samantha = new girls();\n      samantha.eyecolor = 'brown';\n\n    o.hasOwnProperty('eyecolor');   // returns true\n    ```", "```js\nvar girls = {\n  name: 'Samantha',\n  height: 'Tall',\n  eyecolor: 'brown',\n  address: null\n};\n'name' in girls; // true\n'age' in girls; // false\n```", "```js\nvar student = {\n  Name:\"Ali\",\n  Age:\"24\",\n  Edu:\"Engineering\"\n}\n\nSudent.propertyIsEnumerable('Name');\n// will return true since object's properties are enumerable\n\nfor(var property in student) {\n  Console.log(property); //will log all properties\n}\n```", "```js\n    Var x={\n    prop:555\n    };\n\n    console.log(x.prop); //its get method\n    c.prop=\"xyz\"; //its set method\n    ```", "```js\n    Var x = {\n      get name() {\n        return getter;\n      }\n    }\n    ```", "```js\n    var x = {\n      set name(val) {\n        console.log(val);\n      }\n    }\n    ```", "```js\nObj={a:1}\nA=json.stringify(obj);\n// creates a JSON String from an array or object\n\nB=json.parse(A);\n// parses a JSON Object 'A' in an object.\n```", "```js\nvar book = \"JavaScript Reference!\";\nvar result = book.toUpperCase();\n```", "```js\nJAVASCRIPT REFERENCE!\n```", "```js\nFunction arg(x,y) {\n  Console.log(x+y);\n  Arg(2);\n  Arg(2,1);\n}\n```", "```js\n    var a=2;\n    console.log(a); // shows 2\n    functionpassVal(a);{\n     a=3;\n    }\n    console.log(a); // shows 3\n    ```", "```js\n    functionpassingVariables(a, b, c) {\n      a = a + 10;\n      b.value = \"changed\";\n      c = {value: \"changed\"};\n    }\n\n    varnum = 10;\n    varvar1 = {value: \"unaffected\"};\n    varvar2 = {value: \"unaffected\"};\n\n    passingVariables (num, var1, var2);\n\n    console.log(num);  // 20\n    console.log(var1.value);  // changed\n    console.log(var2.value);  // unaffected\n    ```", "```js\nvar stud=student || {};\nstud.student=function(name) {\n  this.name ;\n}\nvar s=new stud.student(\"Ali\");\n```", "```js\nfunctionstudentName(name) {\n  varstdName=\"Student Name\";\n  functionstdLastName(){\n  returnstdName+name; }\n  returnstdntLastName();\n}\n```", "```js\nStudent.FullName = function() {\n  // define your code here\n}\n```", "```js\nName=Student.FullName;\n```", "```js\nvarobj = new Function('a', 'b', 'return a*b;');\n```", "```js\nfunction student(nameI) {\n  This.name=name;\n  this.age='18';\n}\nstudent.prototype.std=function() {\n  //define some code\n};\nmodule.export=student;\n```", "```js\n//Constructor Function\nvar Cat = function(name) {\n  this.Name = name;\n  this.Meow = function() {\n    console.log(this.Name + \" meow\");\n  };\n}\n\n//Prototype object method\nvar Cat = function(name) {\n  this.Name = name;\n}\n\nCat.prototype.Meow = function() {\n  console.log(this.Name + \" meow\");\n};\n\n//Both gives same results\nvar cat = new Cat(\"Capri\");\ncat.Meow();\n```", "```js\nvar color = 'black';\n\nfunction Cat() {\n  // public property\n  this.color = '';\n\n  // private constructor\n  var __construct = function(that) {\n    console.log(\"I have a Cat!\");\n    that.color = 'brown';\n  }(this)\n\n  // getter\n  this.getColor = function() {\n    returnthis.color;\n  }\n\n  // setter\n  this.setColor = function(color) {\n    this.color = color;\n  }\n\n}\n\nvar b = new Cat();\n\nconsole.log(b.getColor()); // should be brown\n\nb.setColor('white');\n\nconsole.log(b.getColor()); // should be white\n\nconsole.log(color); // should be black\n```", "```js\nVarobj= {};\nVarobj=[];\n```", "```js\nExport function sub(a,b) {\n  Return a+b;\n}\n```", "```js\nVar string=function(a,b) {\n  Return a+b;\n}\n```", "```js\nfunction person(name) {\n  this.name=name;\n}\nperson.prototype= {\n  sayHi:function() {\n    console.log(\"something\");\n  }\n\n  Function student(name) {\n    This.name=name;\n  }\n}\nStudent.prototype=new Person();\nVarstd=new student(\"Ali\");\nStd.sayHi();\n```", "```js\nfunction super() {\n  this.name=[\"Ali\"];\n}\nfunction sub() {\n  super.call(this);\n}\n\nvarstd=new sub();\nstd.name.push(\"Ali\");\nvarstd1= new sub();\nconsole.log(std1.name);\n```", "```js\nfunctionSuperType(name) {\n  this.name = name;\n  this.colors = ['yellow', 'purple', 'indigo'];\n}\nSuperType.prototype.sayName = function() {\n  //console.log(this.name);\n};\nfunctionSubType(name, age) {\n  //inherit properties\n  SuperType.call(this, name);\n  this.age = age;\n}\n//inherit methods\nSubType.prototype = new SuperType();\nSubType.prototype.sayAge = function() {\n  //console.log(this.age);\n};\nvarinstance1 = new SubType('John Doe', 26);\ninstance1.colors.push('white');\n//console.log(instance1.colors); //'yellow,purple,indigo,white'\ninstance1.sayName(); //'John Doe';\ninstance1.sayAge(); //26\nvarinstance2 = new SubType('Kate', 21); //console.log(instance2.colors); //'yellow,purple,indigo'\ninstance2.sayName(); //'Kate';\ninstance2.sayAge(); //21\n```", "```js\nvarobject=Object.create(null);\n```", "```js\nvar rectangle = {\n  area: function () {\n    returnthis.width * this.height;\n  }\n};\n\nvarrect = Object.create(rectangle);\n```", "```js\nvar rectangle = Object.create(Object.prototype);\n\nrectangle.area = function () {\n  returnthis.width * this.height;\n};\n```", "```js\nrect.width=50;\nrect.height=100;\nconsole.log(rect.area());\n```", "```js\nvar rectangle = {\n  create: function (width, height) {\n    var self = Object.create(this);\n    self.height = height;\n    self.width = width;\n    return self;\n  },\n  area: function () {\n    returnthis.width * this.height;\n  }\n};\n\nvarrect = rectangle.create(50, 100);\n\nconsole.log(rect.area());\n```", "```js\nFunction abc(x) {\n  Var clone=obj(abc);\n  Clone.sayHi=function() {\n  }; \n  return clone;\n}\n\nVar student= {\n  Name=\"Ali\";\n};\nVarstd=new abc(student);\nStd.sayHi();\n```", "```js\nfunction super(name) {\n  this.name=[\"Ali\"];\n}\nsuper.prototype.sayHi=function() {\n  console.log(\"something\");\n}\n\nfunction sub(age) {\n  this.age=age;\n  super.call(this,name);\n}\nsub.prototype=new super();\nsub.prototype.sayHi();\n```", "```js\n// super class\nfunctionsuperClass() {\n  this.bye = superBye;    //method 1\n  this.hello = superHello;    //method 2\n}\n\n//sub class\nfunctionsubClass() {\n  this.inheritFrom = superClass;    //inherit-from method defines superclass\n  this.inheritFrom();               //inherit from method called\n  this.bye = subBye;               method 1 overridden in subclass\n}\n\nfunctionsuperHello() {\n  return \"Hello from superClass\";\n}\n\nfunctionsuperBye() {\n  return \"Bye from superClass\";\n}\n\nfunctionsubBye() {\n  return \"Bye from subClass\";\n}\n```", "```js\nfunctionprintSub() {\n  varnewClass = new subClass();\n  console.log(newClass.bye());\n  console.log(newClass.hello());\n}\n```", "```js\nvarstudentName=\"Ali\"\nfunctionmyStd(){   }\n\nstudent=new Global(\"name\");\nstudent.age=18;\nperson=new Global(\"name\");\npost(person.age);\n```", "```js\nvar time = new Date();\ntime.getTime(); // This will output time as 1454905019871\n```", "```js\nvar time = new Date();\ntime.getMilliseconds();\n```", "```js\nvar time = new Date();\ntime.getMinutes();\n```", "```js\nvar time = new Date();\ntime.getHours();\n```", "```js\nvar time = new Date();\ntime.getDate();\n```", "```js\nvar time = new Date();\ntime.getDay();\n```", "```js\nvar time = new Date();\ntime.getMonth();\n```", "```js\nvar time = new Date();\ntime.getYear();\n```", "```js\nvar dob=new date();\ndob.setDate(19.03.1990);\n```", "```js\nvar dob=new date();\ndob.setDate(dob.getDate + 7);\n```", "```js\nMath.pow(base, exponent);\ndocument.write(Math.pow(2,4));  // 16 here 2 is base and 4 is exponent.\n```", "```js\nmin(10, 56, 3, 26, -6, 4); //The value returned is -6\n```", "```js\nmax(10, 56, 3, 26, -6, 4); //The value returned is 56\n```", "```js\nMath.random();\n```", "```js\nMath.round(4.3);// The value returned is 4\nMath.round(4.8);// The value returned is 5\nMath.round(4.5);// The value returned is 5\n```", "```js\nMath.ceil(-6.2);// The value returned is -6\nMath.ceil(6.2);// The value returned is 7\n```", "```js\nMath.floor(2.3);//The value returned is 2\nMath.floor(-2.3);//The value returned is -3\n```", "```js\nvar email=new RegExp(\"\\d{2},\"g\");\n```", "```js\nvar exp=\\d{2}/i\n```", "```js\nvar str=(\"I have 10 dollars\");\n//The pattern below is used to find non-digits in a string\nvar parsestring= str.match(/\\D/g);\n\n// Outputs I, ,h,a,v,e, , ,D,o,l,l,a,r,s\n```", "```js\nvar str1=(\"Apple Pie\");\nvar parsestring1=str1.replace(\"Pie\", \"Cinnamon Roll\");\n```", "```js\nvar str1=(\"Apple Pie , Banana Pie\", \"Strawberry PIE\");\nvar parsestring1=str1.replace(\"Pie\", \"Cinnamon Roll\");\n```", "```js\nvar str1=(\"Apple Pie , Banana Pie\", \"Strawberry PIE\");\nvar parsestring1=str1.replace(/Pie/g, \"Cinnamon Roll\");\n```", "```js\nvar str1=(\"Apple Pie , Banana Pie, \"Strawberry PIE\");\nvar parsestring1=str1.replace(/Pie/gi, \"Cinnamon Roll\");\n```", "```js\nvar str1 = \"My Car is at the garage in Queens\";\nvar parseString = str1.split(\"\");\n```", "```js\nM,y, ,C,a,r, ,i,s, ,a,t, ,t,h,e, ,g,a,r,a,g,e, ,i,n, ,Q,u,e,e,n,s\n```", "```js\nvar str1 = \"My Car is at the garage in Queens\";\nvar parseString = str1.split(\" \", 3);\n```", "```js\nvar str1 = \"My Car is at the garage in Queens\";\nvar parseString = str1.split(\"a\");\n```", "```js\nMy C,r is ,t the g,r,ge in Queens\n```", "```js\nvar str1 = \"My Car is at the garage in Queens\";\nvar parseString = str1.split(\"ar\");\n```", "```js\nMy C, is at the g,age in Queens\n```", "```js\nvar str1=(\"I have 10 dollars in my pocket\");\nvar parsestring=str1.search(\"i\");\n```", "```js\nvarcolors = [\"red\", \"yellow\", \"blue\"]\n```", "```js\nnew array(first, second, third, … )\nnew array(7)    // creates an array of size 7\n```", "```js\nvarlastColor = colors[2];    // blue\n```", "```js\nvar sweets = [\"Red Velvet\", \"Chocolate Mousse\", \"Strawberry Delight\", \"Pineapple Sundae\", \"Black Forest\"];\nvar element= sweets.Pop();\n```", "```js\nvar sweets = [\"Red Velvet\", \"Chocolate Mousse\", \"Strawberry Delight\", \"Pineapple Sundae\", \"Black Forest\"];\nvar element= sweets.Push(\"Lemon Meringue\");\n```", "```js\nvar sweets = [\"Red Velvet\", \"Chocolate Mousse\", \"Strawberry Delight\", \"Pineapple Sundae\", \"Black Forest\"];\nvar StrSweets= sweets.ToString()\n```", "```js\nRed Velvet,Chocolate Mousse,Strawberry Delight,Pineapple Sundae,Black Forest\n```", "```js\nvar sweets = [\"Red Velvet\", \"Chocolate Mousse\", \"Strawberry Delight\", \"Pineapple Sundae\", \"Black Forest\"];\nvar StrSweets= sweets.ValueOf()\n```", "```js\nRed Velvet,Chocolate Mousse,Strawberry Delight,Pineapple Sundae,Black Forest\n```", "```js\nvar sweets = [\"Red Velvet\", \"Chocolate Mousse\", \"Strawberry Delight\", \"Pineapple Sundae\", \"Black Forest\"];\nvar StrSweets= sweets.Join(*)\n```", "```js\nRed Velvet * Chocolate Mousse * Strawberry Delight * Pineapple Sundae * Black Forest\n```", "```js\nvar sweets = [\"Red Velvet\", \"Chocolate Mousse\", \"Strawberry Delight\", \"Pineapple Sundae\", \"Black Forest\"];\nvar StrSweets= sweets.splice(2, 0, \"Lemon Meringue\");\n```", "```js\nRed Velvet,Chocolate Mousse,Lemon Meringue,Strawberry Delight,Pineapple Sundae,Black Forest\n```", "```js\nvar sweets = [\"Red Velvet\", \"Chocolate Mousse\", \"Strawberry Delight\", \"Pineapple Sundae\", \"Black Forest\"];\nvar StrSweets= sweets.Sort();\n```", "```js\nBlack Forest,Chocolate Mousse,Pineapple Sundae,Red Velvet,Strawberry Delight\n```", "```js\nvar sweets = [\"Red Velvet\", \"Chocolate Mousse\", \"Strawberry Delight\", \"Pineapple Sundae\", \"Black Forest\"];\nvar StrSweets= sweets.reverse();\n```", "```js\nStrawberry Delight,Red Velvet,Pineapple Sundae,Chocolate Mousse,Black Forest.slice()\n```", "```js\nvar sweets = [\"Red Velvet\", \"Chocolate Mousse\", \"Strawberry Delight\", \"Pineapple Sundae\", \"Black Forest\"];\nvar StrSweets= sweets.slice(3);\n```", "```js\nPineapple Sundae,Black Forest\n```", "```js\nvar greenShades= [\"Mint\", \"Basil\", \"Pine\", \"Emerald\"];\nvar BlueShades=[\"Azure\", \"Cerulean\", \"Navy\", \"Aegan\"];\nvar VioletShades= [\"Lilac\", \"Orchid\", \"Mauve\", \"Wisteria\"];\nvar CoolShades=greenShades.concat(BlueShades, VioletShades);\n```", "```js\nMint,Basil,Pine,Emerald,Azure,Cerulean,Navy,Aegan,Lilac,Orchid,Mauve,Wisteria\n```"]