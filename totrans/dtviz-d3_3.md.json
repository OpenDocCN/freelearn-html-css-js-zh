["```js\n> [1,2,3,4].map(function (d) { return d+1; })\n[ 2, 3, 4, 5 ]\n```", "```js\n> [1,2,3,4].reduce(function (accumulator, current) { return accumulator+current; }, 0)\n10\n```", "```js\n> [1,2,3,4].filter(function (d) { return d%2; })\n[ 1, 3 ]\n```", "```js\nvar width = 768,\n  height = 768,\n  svg = d3.select('#graph')\n    .append('svg')\n    .attr({width: width,\n                  height: height});\n```", "```js\nvar spiral = function (n) {\n  var directions = {up: [0, -1],\n                      left: [-1, 0],\n                      down: [0, 1],\n                      right: [1, 0]};\n\n  var x = 0,\n    y = 0,\n      min = [0, 0],\n      max = [0, 0],\n      add = [0, 0],\n      direction = 0;\n\n  var spiral = [];\n});\n```", "```js\nd3.range(1, n).forEach(function (i) {\n    spiral.push({x: x, y: y, n: i});\n\n    add = directions[['up', 'left', 'down', 'right'][direction]];\n    x += add[0], y += add[1];\n\n    if (x < min[0]) {\n      direction = (direction+1)%4;\n      min[0] = x;\n    }\n    if (x > max[0]) {\n      direction = (direction+1)%4;\n      max[0] = x;\n    }\n    if (y < min[1]) {\n      direction = (direction+1)%4;\n      min[1] = y;\n    }\n    if (y > max[1]) {\n      direction = (direction+1)%4;\n      max[1] = y;\n    }\n  });\n\n  return spiral;\n```", "```js\nvar dot = d3.svg.symbol().type('circle').size(3),\n  center = 400,\n    x = function (x, l) { return center+l*x; },\n    y = function (y, l) { return center+l*y; };\n```", "```js\nd3.text('primes-to-100k.txt', function (data) {\n  var primes = data.split('\\n').slice(0, 5000).map(Number),\n    sequence = spiral(d3.max(primes)).filter(function (d) {\n    return _.indexOf(primes, d['n'], true) > -1;\n    });\n  var l = 2;\n\n  svg.selectAll('path')\n    .data(sequence)\n    .enter()\n    .append('path')\n    .attr('transform',\n         function (d) { return 'translate('+x(d['x'], l)+', '+y(d['y'], l)+')'; })\n    .attr('d', dot);\n});\n```", "```js\nvar scale = 8;\n\n  var regions = d3.nest()\n    .key(function (d) { return Math.floor(d['x']/scale); })\n    .key(function (d) { return Math.floor(d['y']/scale); })\n    .rollup(function (d) { return d.length; })\n     .map(sequence);\n```", "```js\n{\n    \"0\": {\n        \"0\": 5,\n        \"-1\": 2\n    },\n    \"-1\": {\n        \"0\": 3,\n        \"-1\": 4\n    }\n}\n```", "```js\nvar values = d3.merge(d3.keys(regions).map(function (_x) {\n      return d3.values(regions[_x]);\n    }));\n\n  var median = d3.median(values),\n    extent = d3.extent(values),\n      shades = (extent[1]-extent[0])/2;\n```", "```js\nd3.keys(regions).forEach(function (_x) {\n    d3.keys(regions[_x]).forEach(function (_y) {\n\n      var color,\n        red = '#e23c22',\n        green = '#497c36';\n\n      if (regions[_x][_y] > median) {\n        color = d3.rgb(green).brighter(regions[_x][_y]/shades);\n      }else{\n        color = d3.rgb(red).darker(regions[_x][_y]/shades);\n      }\n\n      svg.append('rect')\n        .attr({x: x(_x, a*scale),\n                  y: y(_y, a*scale),\n                  width: a*scale,\n                  height: a*scale})\n        .style({fill: color,\n                 'fill-opacity': 0.9});\n    });\n  });\n```", "```js\nvar xhr = d3.xhr('<a_url>');\nxhr.mimeType('application/json');\nxhr.header('User-Agent', 'our example');\nxhr.on('load', function (request) { … });\nxhr.on('error', function (error) { … });\nxhr.on('progress', function () { … });\nxhr.send('GET');\n```", "```js\nd3.json('a_dataset.json', function (data) {\n  // draw stuff\n});\n```", "```js\nvar shape_color = function (shape) {\n  if (shape == 'triangle') {\n    return 'red';\n  }else if (shape == 'line') {\n    return 'yellow';\n  }else if (shape == 'pacman') {\n    return 'green';\n  }else if (shape == 'square') {\n    return 'red';\n  }\n};\n```", "```js\nvar scale = d3.scale.ordinal()\n    .domain(['triangle', 'line', 'pacman', 'square'])\n    .range(['red', 'yellow', 'green', 'red']);\n```", "```js\nvar width = 800,\n  height = 600,\n  svg = d3.select('#graph')\n    .append('svg')\n    .attr({width: width,\n           height: height});\n```", "```js\nvar data = d3.range(30),\n  colors = d3.scale.category10(),\n  points = d3.scale.ordinal().domain(data)\n                 .rangePoints([0, height], 1.0),\n  bands = d3.scale.ordinal().domain(data)\n                 .rangeBands([0, width], 0.1);\n```", "```js\nsvg.selectAll('path')\n  .data(data)\n  .enter()\n  .append('path')\n  .attr({d: d3.svg.symbol().type('circle').size(10),\n      transform: function (d) { \n        return 'translate('+(width/2)+', '+points(d)+')'; }\n    })\n  .style('fill', function (d) { return colors(d); });\n\nsvg.selectAll('rect')\n  .data(data)\n  .enter()\n  .append('rect')\n  .attr({x: function (d) { return bands(d); },\n     y: height/2,\n     width: bands.rangeBand(),\n     height: 10})\n  .style('fill', function (d) { return colors(d); });\n```", "```js\nvar width = 800,\n  height = 600,\n  svg = d3.select('#graph')\n    .append('svg')\n    .attr({width: width,\n           height: height});\n\nvar weierstrass = function (x) {\n  var a = 0.5,\n    b = (1+3*Math.PI/2)/a;\n\n  return d3.sum(d3.range(100).map(function (n) {\n    return Math.pow(a, n)*Math.cos(Math.pow(b, n)*Math.PI*x);\n  }));\n};\n```", "```js\nvar draw_one = function (line) {\n  return svg.append('path')\n    .datum(data)\n    .attr(\"d\", line)\n    .style({'stroke-width': 2,\n            fill: 'none'});\n};\n```", "```js\nvar data = d3.range(-100, 100).map(function (d) { return d/200; }),\n  extent = d3.extent(data.map(weierstrass)),\n  colors = d3.scale.category10(),\n  x = d3.scale.linear().domain(d3.extent(data)).range([0, width]);\n```", "```js\nvar linear = d3.scale.linear().domain(extent).range([height/4, 0]),\n  line1 = d3.svg.line()\n    .x(x)\n    .y(function(d) { return linear(weierstrass(d)); });\n\ndraw_one(line1)\n  .attr('transform', 'translate(0, '+(height/16)+')')\n  .style('stroke', colors(0));\n```", "```js\nvar identity = d3.scale.identity().domain(extent),\n  line2 = line1.y(function (d) { return identity(weierstrass(d)); });\n\ndraw_one(line2)\n  .attr('transform', 'translate(0, '+(height/12)+')')\n  .style('stroke', colors(1));\n\nvar power = d3.scale.pow().exponent(0.2).domain(extent).range([height/2, 0]),\n  line3 = line1.y(function (d) { return power(weierstrass(d)); });\n\ndraw_one(line3)\n  .attr('transform', 'translate(0, '+(height/8)+')')\n  .style('stroke', colors(2));\n\nvar log = d3.scale.log().domain(\n  d3.extent(data.filter(function (d) { return d > 0 ? d : 0; }))).range([0, width]),\n  line4 = line1.x(function (d) { return d > 0 ? log(d) : 0; })\n    .y(function (d) { return linear(weierstrass(d)); });\ndraw_one(line4)\n  .attr('transform', 'translate(0, '+(height/4)+')')\n  .style('stroke', colors(3));\n```", "```js\nvar quantize = d3.scale.quantize().domain(extent)\n                        .range(d3.range(-1, 2, 0.5).map(function (d) { return d*100; })),\n  line5 = line1.x(x).y(function (d) { return quantize(weierstrass(d)); }),\n  offset = 100\n\ndraw_one(line5)\n  .attr('transform', 'translate(0, '+(height/2+offset)+')')\n  .style('stroke', colors(4));\n\nvar threshold = d3.scale.threshold().domain([-1, 0, 1]).range([-50, 0, 50, 100]),\n  line6 = line1.x(x).y(function (d) { return threshold(weierstrass(d)); });\n\ndraw_one(line6)\n  .attr('transform', 'translate(0, '+(height/2+offset*2)+')')\n  .style('stroke', colors(5));\n```", "```js\n> format = d3.time.format('%Y-%m-%d')\n> format.parse('2012-02-19')\nSun Feb 19 2012 00:00:00 GMT+0100 (CET)\n```", "```js\n> format(new Date())\n\"2013-02-19\"\n```", "```js\n> d3.time.hour.offset(new Date(), 1)\nTue Feb 19 2013 06:09:17 GMT+0100 (CET)\n```", "```js\n> npm install -global topojson\n```", "```js\n> topojson -o water.json ne_50m_rivers_lake_centerlines.shp ne_50m_ocean.shp\n> topojson -o land.json ne_50m_land.shp\n> topojson -o cultural.json ne_50m_admin_0_boundary_lines.shp ne_10m_urban_areas.shp\n```", "```js\n<style></style>\n```", "```js\n<script src=\"img/topojson.v0.min.js\"></script>\n<script src=\"img/queue.v1.min.js\"></script>\n```", "```js\nvar width = 1800,\n  height = 1200,\n  svg = d3.select('#graph')\n    .append('svg')\n    .attr({width: width,\n             height: height});\n```", "```js\nvar projection = d3.geo.equirectangular()\n    .center([8, 56])\n    .scale(800);\n```", "```js\nqueue()\n  .defer(d3.json, 'data/water.json')\n  .defer(d3.json, 'data/land.json')\n  .defer(d3.json, 'data/cultural.json')\n  .await(draw);\n```", "```js\nfunction add_to_map(collection, key) {\n  return svg.append('g')\n    .selectAll('path')\n    .data(topojson.object(collection,\n                   collection.objects[key]).geometries)\n        .enter()\n    .append('path')\n    .attr('d', d3.geo.path().projection(projection));\n}\n```", "```js\nfunction draw (err, water, land, cultural) {\n  add_to_map(water, 'ne_50m_ocean')\n    .classed('ocean', true);\n};\n```", "```js\n.ocean {\n  fill: #759dd1;\n}\n```", "```js\n  add_to_map(land, 'ne_50m_land')\n    .classed('land', true);\n\n  add_to_map(water, 'ne_50m_rivers_lake_centerlines')\n    .classed('river', true);\n\n  add_to_map(cultural, 'ne_50m_admin_0_boundary_lines_land')\n    .classed('boundary', true);\n\n  add_to_map(cultural, 'ne_10m_urban_areas')\n    .classed('urban', true);\n```", "```js\n.river {\n  fill: none;\n  stroke: #759dd1;\n  stroke-width: 1;\n}\n\n.land {\n  fill: #ede9c9;\n  stroke: #79bcd3;\n  stroke-width: 2;\n}\n\n.boundary {\n  stroke: #7b5228;\n  stroke-width: 1;\n  fill: none;\n}\n\n.urban {\n  fill: #e1c0a3;\n}\n```", "```js\nfunction add_airlines() {\n  queue()\n    .defer(d3.text, 'data/airports.dat')\n    .defer(d3.text, 'data/routes.dat')\n    .await(draw_airlines);\n};\n```", "```js\nfunction draw_airlines(err, _airports, _routes) {\n  var airports = {},\n    routes = {};\n\n  d3.csv.parseRows(_airports).forEach(function (airport) {\n    var id = airport[0];\n\n    airports[id] = {\n      lat: airport[6],\n      lon: airport[7]\n    };\n  });\n\n  d3.csv.parseRows(_routes).forEach(function (route) {\n    var from_airport = route[3];\n\n    if (!routes[from_airport]) {\n      routes[from_airport] = [];\n    }\n\n    routes[from_airport].push({\n      to: route[5],\n      from: from_airport,\n      stops: route[7]\n    });\n  });\n}\n```", "```js\n1,\"Goroka\",\"Goroka\",\"Papua New Guinea\",\"GKA\",\"AYGA\",-6.081689,145.391881,5282,10,\"U\"\n2,\"Madang\",\"Madang\",\"Papua New Guinea\",\"MAG\",\"AYMD\",-5.207083,145.7887,20,10,\"U\"\n```", "```js\nvar route_N = d3.values(routes).map(function (routes) {\n  return routes.length;\n  }),\n    r = d3.scale.linear().domain(d3.extent(route_N)).range([2, 15]);\n```", "```js\nsvg.append('g')\n    .selectAll('circle')\n    .data(d3.keys(airports))\n    .enter()\n    .append('circle')\n    .attr(\"transform\", function (id) {\n      var airport = airports[id];\n      return \"translate(\"+projection([airport.lon, airport.lat])+\")\";\n    })\n    .attr('r', function (id) { return routes[id] ? r(routes[id].length) : 1; })\n    .classed('airport', true);\n```", "```js\n.airport {\n  fill: #9e56c7;\n  opacity: 0.6;\n  stroke: #69349d;\n}\n```"]