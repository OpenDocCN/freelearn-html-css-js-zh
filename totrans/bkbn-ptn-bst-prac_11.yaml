- en: Appendix C. Organizing Templates with AMD and Require.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Asynchronous Module Definition** (**AMD**) is a JavaScript API used to define
    modules and load module dependencies asynchronously. It is a fairly new yet very
    robust concept that many developers are adopting nowadays. In [Chapter 7](ch07.html
    "Chapter 7. Organizing Backbone Applications – Structure, Optimize, and Deploy"),
    *Organizing Backbone Applications – Structure, Optimize, and Deploy*, we covered
    AMD with Require.js in detail. If you need more details on this library, we recommend
    you visit [http://requirejs.org/](http://requirejs.org/) to get a complete overview
    and then come back to this section.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, Require.js treats every file''s content as JavaScript. So, we cannot
    load our template files, if they aren''t JavaScript files, in the same manner
    as JavaScript files. Fortunately for templates, there is a `text` plugin that
    allows us to load text-based dependencies. Any file that we load using this file
    will be treated as a text file and the content that we receive will be a string;
    it can be used easily with your template methods. To use this plugin, just prepend
    `text!` to the file path and the file contents will be retrieved as plain text;
    to do this, follow this example:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The benefit of using this mechanism is that you can organize your templates
    by creating separate template files and they are automatically included in your
    modules. Since this involves asynchronous loading, the files are downloaded via
    AJAX requests, something we already decided as being a bad idea. However, Require.js
    comes with an `r.js` optimization tool that builds the modules and can save these
    extra AJAX requests by inlining these templates with their respective modules.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Precompiling with the requirejs-tpl plugin
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With AMD, we simplified the template organization process, but the end result
    still remains an uncompiled template string. In [Chapter 2](ch02.html "Chapter 2. Working
    with Views"), *Working with Views*, we saw how template compilation affects application
    performance every time and we also analyzed the benefits of precompiling templates.
    Won''t it be useful if we have something that will load these template files and
    provide us with an already-compiled template string instead? Fortunately, there
    are multiple `tpl` plugins available for Require.js that automate template compilation,
    and you can use these plugins directly in your module definition. Let us look
    at a similar plugin ([https://github.com/ZeeAgency/requirejs-tpl](https://github.com/ZeeAgency/requirejs-tpl))
    developed by ZeeAgency. Dependency loading is exactly the same as it is for the
    `text` plugin, you just need to use the `tpl!` plugin prefix instead of `text!`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, `r.js` provides optimized and packaged precompiled templates. The `tpl!`
    plugin is surely more handy and useful than the `text!` plugin.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Template organization with Require.js is one of the best ways to maintain templates;
    a lot of JavaScript developers are opting for it nowadays. If you are using AMD
    for your Backbone application, go for it without any hesitation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Require.js 进行模板组织是维护模板的最佳方式之一；现在很多 JavaScript 开发者都在选择这种方式。如果你正在使用 AMD 为你的
    Backbone 应用程序开发，那就毫不犹豫地选择它吧。
