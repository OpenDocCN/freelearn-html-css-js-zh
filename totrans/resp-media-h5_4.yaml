- en: Chapter 4. Testing Responsive Media
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yikes! What do I test? iPads? iPhones? Which Android devices? Such questions
    must have definitely crossed your mind. Worry not! This chapter will guide you
    through some really cool testing techniques/methods.
  prefs: []
  type: TYPE_NORMAL
- en: Testing is a key part of the process of working with responsive media. We need
    to test our content thoroughly on a variety of different browsers, devices, and
    platforms to ensure we don't encounter any problems when our site is released
    to the wild.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible you might think we need lots of specialist technology—nothing
    could be further from the truth! Throughout this chapter, we''ll see how easy
    it is to test sites with nothing more than different browsers or online emulators.
    We''ll take a look at some of the considerations and pitfalls we need to be mindful
    of and see how we can easily make improvements to those sites that aren''t running
    as well as they should. We''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Considering the pitfalls of testing responsive media
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing responsive sites using emulators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using tools to determine speed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working through a theoretical example of slowness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ready? Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: A starting point for testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've created that killer app or website and are ready to release it to the
    wild... or are you?
  prefs: []
  type: TYPE_NORMAL
- en: Before we release our creations into the wild, we need to test them thoroughly.
    It goes without saying that each and every element needs to be tested, but media
    such as images or videos need particular attention.
  prefs: []
  type: TYPE_NORMAL
- en: If the thought of testing conjures up images of needing lots of automated scripts,
    rigorous checking, and specialist software, think again. The most useful tool
    is the one we already have—our browser!
  prefs: []
  type: TYPE_NORMAL
- en: Granted, we need to perform lots of tests to ensure our content works well in
    a range of different devices. However, most of our testing can be done in desktop
    browsers, which come with responsive design facilities built within. They are
    not perfect, so we need the assistance of other facilities to complement our testing.
    Let's make a start though and take a look at the responsive facilities on offer
    in each browser, beginning with Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It should be noted that commands given will be for Windows; for Mac users, we
    have *Cmd* + *Opt* in place of *Ctrl* + *Shift*.
  prefs: []
  type: TYPE_NORMAL
- en: Using Google Chrome or Opera
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For testing responsive sites, Google Chrome is a hard act to beat. It offers
    the widest range of options to help with proving how well a responsive site works.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use it to change the user agent, alter the screen resolution, and even
    test retina-enabled devices; to enable the responsive design mode in Chrome is
    as simple as pressing *Ctrl* + *Shift* + *I*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Google Chrome or Opera](img/6968OT_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Opera's browser is almost identical. The responsive emulator can be enabled
    in the same manner, although some of the options are in slightly different locations.
  prefs: []
  type: TYPE_NORMAL
- en: Using Firefox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Not to be outdone, Firefox boasts a responsive design mode too; it is more
    simplistic than Chrome, but nonetheless serves a useful purpose. Firefox''s **Responsive
    Design View** can be enabled by pressing *Ctrl* + *Shift* + *M*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Firefox](img/6968OT_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Try clicking on the **606 x 389 (custom)** drop-down item and selecting a new
    value. Firefox will automatically resize the viewport to the new size; if the
    new screen size is larger, you will need to resize the browser window.
  prefs: []
  type: TYPE_NORMAL
- en: Using Internet Explorer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Internet Explorer takes a different approach to responsive design. To get the
    best emulation options requires the use of the latest version of the browser,
    which is version 11 at the time of this writing. The responsive emulation settings
    are held within the **Developer** toolbar (press *F12* to enable this), then switch
    to the **Emulation** tab to alter the settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Internet Explorer](img/6968OT_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The key to testing using the desktop browser is twofold—they will give a reasonable
    approximation of what your site will look like in a mobile view and should act
    only as a starting point to your testing. The real tests will come when we start
    to use online testing services. These offer the opportunity to test over a number
    of devices at once, although there is no substitution for the real thing! We'll
    cover use of these services later in this chapter, in the *Testing responsive
    sites with online tools* section.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Some alternatives to consider**'
  prefs: []
  type: TYPE_NORMAL
- en: 'While most testing is best completed online, there are a couple of options
    you may like to consider: Google Chrome has a more comprehensive browser add-in
    that emulates many online testing services. It''s available at [http://www.dimensionstoolkit.com/](http://www.dimensionstoolkit.com/).
    Adobe has released Adobe Edge Inspect, which attempts to link your local development
    site to a mobile emulator. It''s available through Apple iTunes—more details are
    available at [http://html.adobe.com/edge/inspect/](http://html.adobe.com/edge/inspect/).'
  prefs: []
  type: TYPE_NORMAL
- en: So far we've seen that the only way to effectively test your site is manually,
    in as wide a range of browsers as possible, on different platforms. This is not
    without pitfalls. Let's take a moment to consider some of the traps that may trip
    us up, if we're not careful when testing our work.
  prefs: []
  type: TYPE_NORMAL
- en: Considering pitfalls of responsive testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Who says testing is ever easy? This is true in most projects, but particularly
    so when testing responsive sites. We''ve concentrated on working with responsive
    media throughout this book, but many of the pitfalls we are likely to encounter
    will equally apply at a site level and not just to images or videos. The following
    list gives us an idea of such pitfalls:'
  prefs: []
  type: TYPE_NORMAL
- en: Which devices should you test? To some degree, this will depend on researching
    your target market. But it should be a wide range to include both Android and
    iOS devices and popular mobile browsers such as Chrome, Opera Mini, and Dolphin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We clearly can't test for every device, so use of Google Analytics is key to
    establishing a good range of devices that should be used. A great example of how
    testing has helped influence a company's responsive design is Marriot hotels.
    They found that their mobile site uncovered a number of issues with how their
    homepage was being displayed. Fixing these played an influential part in the design
    and construction of their responsive site offer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read the full article about the testing performed by Marriot at [http://www.mobilemarketer.com/cms/news/software-technology/18494.html](http://www.mobilemarketer.com/cms/news/software-technology/18494.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What do your customers want to do on a mobile device? Is creating a seamless
    site that works for all devices and platforms the right thing to do or should
    you segment functionality based on what tasks your mobile users are asking for?
    Being selective about what is on offer on a mobile platform in relation to a full-sized
    site can act as a gauge of how useful a truly responsive site would be to your
    users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A speed test is crucial. This will determine how well your site works on good
    or bad Wi-Fi connections, 4G, 3G, and EDGE; all of these should be tested (particularly
    EDGE, if you can find it!).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have access to colleagues, friends, or willing participants who can help
    test your site? Do they have the right devices that fit in with your test plans,
    so you can ensure you've covered enough devices?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The reality is that anyone spending time developing responsive content will
    need to build up a pool of devices. If you work alone, then this may take some
    time; Brad Frost has put together some useful tips on how to test on real devices
    without it becoming too expensive. You can read his comments at [http://bradfrostweb.com/blog/mobile/test-on-real-mobile-devices-without-breaking-the-bank/](http://bradfrostweb.com/blog/mobile/test-on-real-mobile-devices-without-breaking-the-bank/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There are plenty of emulators online to test responsive sites, but how well
    do they work? These will give you a feel for how well the site should work, but
    there is no substitute for testing on a real device!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Screen resolution will play a major role. Resizing a site on a desktop with
    1600 x 900 pixels will look different on a five-inch screen of a Galaxy S4, which
    will also be different to the 1334 x 750 pixel screen of a 4.7-inch retina display
    of an Apple iPhone 6\. Not only will content appear much smaller, but images will
    differ when displayed on retina-enabled devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of media queries on your site will mean content may not be at the same
    location on the page, or even be displayed. This leads to an uneven playing field
    when testing, making automation impossible, and leading to increased costs of
    manual effort and resource.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design strategies and approaches will differ between devices, making it difficult
    to test consistently across a range of devices. For instance, a hover interaction
    on a desktop will not transfer to a mobile device; links on one device can act
    differently on others. It requires the skill of an experienced tester to allow
    for these differences and to avoid applying tests incorrectly, which would result
    in inadequate coverage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The key point when testing is that nothing is ever consistent. Testing for one
    device or platform is not always likely to be the same for others! This is where
    the skill of an experienced tester will come into play. Ultimately, the level
    of testing performed on as wide a range of different devices will determine the
    success or failure of any responsive site.
  prefs: []
  type: TYPE_NORMAL
- en: Testing responsive sites with online tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've already seen that initial testing of our sites is possible in most desktop
    browsers, but there is a drawback to this approach. These tools will be set to
    display a limited set of screen sizes, which will require an update of the browser
    application to reflect any changes.
  prefs: []
  type: TYPE_NORMAL
- en: To help bolster our testing, we can use one of any number of online emulators.
    This has the advantage of dynamic resizing (by changing the size of the browser
    window), as well as choosing from any one of a number of preset sizes. While we
    may not be able to emulate the device perfectly, we can at least ensure that content
    will render correctly at a desired size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take, for example, Microsoft''s site—when viewed using the ScreenFly emulator
    (available at [http://www.quirktools.com/screenfly](http://www.quirktools.com/screenfly))—set
    to display as a Motorola RAZR V8, it displays perfectly within the 240 x 320 pixel
    display that would be present on this device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing responsive sites with online tools](img/6968OT_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The site is clearly responsive—the images from the desktop version have been
    resized and repositioned and the menu system reworked to suit a mobile display.
    It's worth taking a look at some of the styles that are being set. Remember how
    we used the basic principle of using percentages, rather than fixed `em` or `rem`
    (or even `pixel`) values? The same principle is being applied here, where the
    main image immediately below the menu is resized to `166.5%` of its size.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can prove this with a quick peek in a DOM inspector such as Firebug:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing responsive sites with online tools](img/6968OT_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice the styles highlighted in the screenshot? This is a perfect example of
    what we talked about back in [Chapter 1](ch01.html "Chapter 1. Working with Responsive
    Images"), *Working with Responsive Images*. Simply changing our image sizes to
    use percentages will go a long way to making a site responsive. Try resizing the
    browser window and notice how the values change in the DOM inspector.
  prefs: []
  type: TYPE_NORMAL
- en: 'In contrast, the Packt Publishing website ([www.packtpub.com](http://www.packtpub.com))
    is displayed in the same ScreenFly emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing responsive sites with online tools](img/6968OT_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: ScreenFly, in this instance, is set to emulate a Kindle Fire at 800 x 600 pixels.
    The site clearly needs some work. The images are not responsive, with the result
    that the jumbotron at the top of the page is not fully displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are dozens of responsive emulators available for use. They all follow
    very similar principles, although they are likely to be more up to date, in terms
    of device sizes, than standard desktop browsers. The following are some alternatives
    to try:'
  prefs: []
  type: TYPE_NORMAL
- en: Mat Kersley's simple responsive tester available at [http://mattkersley.com/responsive/](http://mattkersley.com/responsive/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsinator available at [http://www.responsinator.com/](http://www.responsinator.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Media Genesis' Responsive Design Checker available at [http://responsivedesignchecker.com/](http://responsivedesignchecker.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenDeviceLab.com available at [http://opendevicelab.com/](http://opendevicelab.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewport Resizer by Malte Wasserman available at [http://lab.maltewassermann.com/viewport-resizer/](http://lab.maltewassermann.com/viewport-resizer/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BrowserShots available at [http://browsershots.org/](http://browsershots.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BrowserStack available at [http://www.browserstack.com/](http://www.browserstack.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A good site is Am I Responsive available at [http://ami.responsivedesign.is](http://ami.responsivedesign.is)—this
    shows the site in a number of common devices at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing responsive sites with online tools](img/6968OT_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although the content appears very small, we can at least interact with the website
    to get a feel for how it works, and begin to see where there may be areas for
    improvement. Ultimately, it doesn't matter though how small or large your site
    is; if it crawls along at a snail's pace, then it will put visitors off. Fortunately,
    we can easily see if this is likely to become an issue for any site we operate
    as a precursor to tweaking elements to improve access.
  prefs: []
  type: TYPE_NORMAL
- en: Using tools to determine speed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are plenty of ways to determine if our site is running slowly—arguably
    one of the most well known is YSlow by Yahoo available at [https://developer.yahoo.com/yslow/](https://developer.yahoo.com/yslow/).
    In the following screenshot, it is shown in use from within Firebug:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using tools to determine speed](img/6968OT_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: YSlow is perfect to establish where there are slow elements in our pages. It
    uses a number of rules based on research by Yahoo's Exceptional Performance Team
    to work out how well a site measures up against its standards for performance.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at using it to see if some well-known sites could be improved.
    As an example, we'll begin with installing YSlow as a plugin for Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This example assumes we are using Firefox with Firebug already installed; if
    it is not already present, then you can download and install it from [http://www.getfirebug.com](http://www.getfirebug.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various ways to install YSlow. They include using a bookmarklet,
    browser add-ins, or working directly from the command line. The most convenient
    is a browser plugin, so we can assess a site directly:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by browsing to [https://developer.yahoo.com/yslow/](https://developer.yahoo.com/yslow/)
    and clicking on **Firefox** under **Availability** to install the Firefox add-on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, follow the instructions—the add-on installs using the normal
    process for Firefox plugins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, we are ready to start using YSlow:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to [http://www.microsoft.com](http://www.microsoft.com) and resize the
    window to a smaller size; the aim is to emulate the appearance of working on a
    smaller device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Firebug icon or go to **View** | **Firebug**, then switch to the
    **YSlow** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Run Test** button to fire off the main test. This runs through
    a number of tests before producing a list of its findings:![Using tools to determine
    speed](img/6968OT_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We're interested in the tests that relate to images, so click on **IMAGES (2)**
    to filter the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we've seen the results of the scan, let's analyze some of the results.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Take, for example, the following entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://c.s-microsoft.com/en-gb/CMSImages/SpringPromo_LastFrameBG_1600x540_EN_US.jpg?version=250bf4d8-ad95-96e7-3b61-394b95449a92](http://c.s-microsoft.com/en-gb/CMSImages/SpringPromo_LastFrameBG_1600x540_EN_US.jpg?version=250bf4d8-ad95-96e7-3b61-394b95449a92)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This happens to be the first on the list; it is the main one displayed immediately
    below the menu bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing results](img/6968OT_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is a perfect example of how it has failed the test for YSlow. The original
    image has been scaled, which puts extra demand on the server when rendering it
    on screen down to 1366 x 461 px:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing results](img/6968OT_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This seems perfectly reasonable. Scaling down an image will put extra demand
    on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Digging further into the code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hold on! Something doesn''t add up here. If we dig further by using Firebug
    to check the CSS styles, we can see the styles applied in the following screenshot.
    In this instance, it''s an example of `.hero .image .media` and `.hero .img video`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Digging further into the code](img/6968OT_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, did anyone spot anything? The keen-eyed among you should have spotted that
    this image has already appeared earlier in the *Testing responsive sites with
    online tools* section. There, we noted that the site appeared to be responsive—dynamic
    percentage values have been used, instead of fixed values; this we would expect
    to see on responsive sites. So, what gives? Why, with percentage values, are we
    still seeing issues being reported by YSlow?
  prefs: []
  type: TYPE_NORMAL
- en: Revealing all
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Well, to find out why, we need to dig further into the CSS file being used on
    [http://www.microsoft.com](http://www.microsoft.com). In the screenshot from Firebug,
    did you notice the `166.5%` value against `max-width`? And that this is overriding
    a `max-width` value of `100%` immediately below? Therein lies our first clue—back
    in [Chapter 1](ch01.html "Chapter 1. Working with Responsive Images"), *Working
    with Responsive Images*, I mentioned that the basic and easiest way to create
    responsive images is to set a `max-width` value of `100%`.
  prefs: []
  type: TYPE_NORMAL
- en: It's not without its own quirks, but will satisfy most requirements—at least
    as a starting point to implementing responsive behavior. So why do we have a value
    that is over 50 percent higher?
  prefs: []
  type: TYPE_NORMAL
- en: The true answer to this lies in the CSS file. A search of it using a text editor,
    such as Sublime Text, would appear to show that media queries have been used.
    This we would expect to see. But where the design has fallen over is in how the
    images have been set to display on the page.
  prefs: []
  type: TYPE_NORMAL
- en: The image we've selected is only set once. None of the media queries have been
    set to replace the image with a smaller one if the viewport or browser window
    size is reduced—therein lies the problem!
  prefs: []
  type: TYPE_NORMAL
- en: Fixing the problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While we clearly do not have access to alter the code, we can at least work
    out the steps required to fix the problem:'
  prefs: []
  type: TYPE_NORMAL
- en: In Firefox, right-click on the image and click on **View Image Info** to view
    the properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, I will assume you are using GIMP for Windows. If you are using
    a different package, please adjust the steps accordingly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This screenshot shows the page resized to the smallest width possible in Firefox:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Fixing the problem](img/6968OT_04_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click on **Save As…** to save a copy locally—the name is not critical; open
    it in an image editing application, such as PhotoShop or GIMP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When opened, it will show at full size, which is **1600px x 540px**; navigate
    to **Image** | **Scale Image...** and set the new size to **475px x 160px**. Click
    on **Scale** to resize the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, go to **File** | **Overwrite…** to update the image. On **Export Image
    as JPEG**, push the Quality scale to **100%** if it is not already set at this
    value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Export** to complete the process—the image will now be saved to the
    new dimensions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, we have an updated image, which would normally be uploaded to
    the website. A quick check shows that it has been reduced from a hefty 96 KB down
    to a more reasonable 38 KB. This makes it quicker to download in our style sheet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, to really finish it off though, we would need to include a media
    query in our style sheet that makes use of the smaller image when the viewport
    has been suitably resized, such as the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Not only does this mean that we're reducing the amount of content to download,
    but we're also removing some of the demand on the server and helping to make the
    response time of the site snappier—a win-win for all concerned! It takes a little
    research and planning to achieve this. But once implemented, it will dramatically
    reduce the overall effort required to make our media content responsive.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Website testing is one of the key steps to creating online sites. This is our
    chance to ensure that images and videos resize properly and that content appears
    correctly in our responsive sites. Throughout this chapter, we've taken a look
    at how we should test responsive content. Let's take a moment to consider what
    we have learned.
  prefs: []
  type: TYPE_NORMAL
- en: We kicked off with a look at the simplest form of testing, using the usual desktop
    browsers. We saw how this will take care of the basics, but that we can complement
    it using online services that can emulate multiple browsers at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Next up came a look at some of the pitfalls of responsive site testing; we learned
    how the most effective way to test is doing it manually. There are too many inconsistencies
    that make any form of automation difficult.
  prefs: []
  type: TYPE_NORMAL
- en: Moving swiftly on, we then turned our attention to using online tools to test
    responsive content—we saw how they work in a similar fashion to the responsive
    features in desktop browsers, but can offer a wider range of facilities. We then
    rounded out the chapter with a look at testing of responsive sites. We saw how
    with YSlow, we can soon identify slow responding elements; we then worked through
    a theoretical example to see what would happen and how we could fix it if we were
    the owner of the site.
  prefs: []
  type: TYPE_NORMAL
- en: Phew! It may have only been a short chapter, but we covered a lot! In the next
    one, we'll be taking a look at applying some of the principles that we've covered
    throughout the book to CMS systems such as WordPress.
  prefs: []
  type: TYPE_NORMAL
