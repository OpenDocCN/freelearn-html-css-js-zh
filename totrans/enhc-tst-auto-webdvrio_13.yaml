- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: The Multiverses – Cross-Browser Testing and Cross-Environment Testing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多宇宙 - 跨浏览器测试和跨环境测试
- en: In this chapter, we will begin adding the mutant power of horizontal scaling
    to browser operating systems and other platforms. This is in contrast to vertical
    scaling, which involves adding more tests to our suites, such as adding more floors
    to a superhero base that’s hiding in plain sight. Horizontal scaling is like expanding
    to more buildings up and down the city block. Our tests can run in multiple browsers,
    versions, operating systems, and other platforms. What this means is that if we
    are using a Mac as opposed to a Windows PC, then we will be confident that our
    applications and tests run well on our chosen browser. Chrome is typically the
    target browser because of the large number of users on both Windows and Mac. But
    many Mac users prefer Safari and Windows users prefer Edge. So, how do we ensure
    these combinations get tested?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始向浏览器操作系统和其他平台添加水平扩展的突变力量。这与垂直扩展形成对比，垂直扩展涉及向我们的套件添加更多测试，例如向一个隐藏在普通视线中的超级英雄基地添加更多楼层。水平扩展就像在城市街区上下扩展更多建筑。我们的测试可以在多个浏览器、版本、操作系统和其他平台上运行。这意味着如果我们使用Mac而不是Windows
    PC，那么我们将有信心我们的应用程序和测试在我们选择的浏览器上运行良好。Chrome通常是目标浏览器，因为Windows和Mac上的用户数量都很多。但许多Mac用户更喜欢Safari，而Windows用户更喜欢Edge。那么，我们如何确保这些组合得到测试？
- en: That’s where the standalone Selenium WebDriver service becomes useful. This
    service is used to automate the testing process across various browsers and platforms,
    which helps in identifying issues that might occur in specific environments. Utilizing
    this service can be a creative solution to streamline the test automation framework
    as it allows for more comprehensive testing coverage with less manual effort.
    However, it can also become quickly overwhelming.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 正是在这里，独立的Selenium WebDriver服务变得非常有用。此服务用于在各个浏览器和平台上自动化测试过程，有助于识别可能在特定环境中出现的问题。利用此服务可以是一个创造性的解决方案，以简化测试自动化框架，因为它允许以更少的手动工作实现更全面的测试覆盖。然而，它也可能很快变得令人不知所措。
- en: Think of this as a crossover between the multiple superhero universes. We will
    be extending testing beyond Chrome to Edge on a Windows machine as well as extending
    Chrome to Safari on a Mac. Then, we will use cloud-based solutions for various
    combinations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将其视为多个超级英雄宇宙之间的交叉。我们将扩展测试，从Windows机器上的Chrome扩展到Edge，以及从Mac上的Chrome扩展到Safari。然后，我们将使用基于云的解决方案来处理各种组合。
- en: 'The main topics in this chapter are:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要内容包括：
- en: Horizontal scaling
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 水平扩展
- en: Using built-in functionality via the wdio config file
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`wdio`配置文件使用内置功能
- en: Using LambdaTest online to automate browser testing grid
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LambdaTest在线自动化浏览器测试网格
- en: Using Selenium Standalone server to locally build the testing grid
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Selenium Standalone服务器在本地构建测试网格
- en: Avoiding the rabbit hole of horizontal scaling
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免水平扩展的兔子洞
- en: Handling environment-specific logic
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理特定环境的逻辑
- en: Horizontal scaling – cross-browser testing
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 水平扩展 - 跨浏览器测试
- en: 'There are three ways in which you can do cross-browser testing for your projects:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方法可以进行项目跨浏览器测试：
- en: Using the built-in functionality via the `wdio` config file
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`wdio`配置文件使用内置功能
- en: Using LambdaTest online to automate the browser testing grid
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LambdaTest在线自动化浏览器测试网格
- en: Using Selenium Standalone server to locally build the testing grid
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Selenium Standalone服务器在本地构建测试网格
- en: Although we will discuss all three ways, in this book, our examples will be
    completed using the built-in functionality provided by the `wdio` config file.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们将在本书中讨论所有三种方法，但我们的示例将使用`wdio`配置文件提供的内置功能来完成。
- en: Using built-in functionality via the wdio config file
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过wdio配置文件使用内置功能
- en: Cross-browser testing involves setting up the testing environment, writing tests
    using Jasmine syntax in TypeScript, and running the tests on different browsers.
    This is accomplished in the config file of WebdriverIO in the capabilities section.
    We will extend from Chrome to Edge in the capabilities section. This also controls
    how many concurrent browsers will be launched in parallel with the **maxInstances**
    parameter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 跨浏览器测试涉及设置测试环境，使用TypeScript中的Jasmine语法编写测试，并在不同的浏览器上运行测试。这是在WebdriverIO的配置文件中的能力部分完成的。我们将从Chrome扩展到Edge的能力部分。这也控制了将使用**maxInstances**参数并行启动多少个并发浏览器。
- en: Extending the wdio config file so that it supports multiple browsers
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展wdio配置文件以支持多个浏览器
- en: 'Set up `wdio.conf.ts` so that it defines your test settings and browser capabilities:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`wdio.conf.ts`以确保它定义了您的测试设置和浏览器功能：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the `Services` section, we must provide the drivers to interact with the
    browsers. `chromedriver` runs the Chrome browser, which we have been using all
    along. To drive Safari, `safaridriver` will be used. Keep in mind that the number
    of concurrent browsers that can be used is limited to the resources available
    to the local machine.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在“服务”部分，我们必须提供与浏览器交互的驱动程序。`chromedriver`运行Chrome浏览器，这是我们一直在使用的。要驱动Safari，将使用`safaridriver`。请注意，可以使用的并发浏览器数量受本地机器可用资源的限制。
- en: 'The following is an example of the type of test that can be run:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个可以运行的测试类型示例：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, we must execute the test in multiple browsers by running this command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须通过运行以下命令在多个浏览器中执行测试：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will execute the preceding example test on all browsers configured in the
    `wdio.conf` file’s capabilities section, namely Chrome, Safari, and Edge.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`wdio.conf`文件的能力部分配置的所有浏览器上执行前面的示例测试，即Chrome、Safari和Edge。
- en: Handling browser-specific issues
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理浏览器特定问题
- en: If your application has browser-specific code or issues, you can use conditional
    checks or feature detection to handle them gracefully.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序有浏览器特定的代码或问题，您可以使用条件检查或功能检测来优雅地处理它们。
- en: Test responsiveness
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试响应性
- en: Besides functional testing, ensure that your application is responsive and works
    well on different screen sizes and devices. This will require some next-level
    platform support. Companies such as LambdaTest, Browser Stack, and Sauce Labs
    provide custom environment configurations to ensure our application runs correctly
    under different architectures. These include iOS and Android mobile devices, tablets,
    and laptops of differing screen sizes. It is here that trying to maintain all
    these physical devices with the latest updates can become unfeasible.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 除了功能测试外，确保您的应用程序在不同屏幕尺寸和设备上具有响应性并且运行良好。这需要一些高级平台支持。像LambdaTest、Browser Stack和Sauce
    Labs这样的公司提供定制环境配置，以确保我们的应用程序在不同的架构下正确运行。这包括iOS和Android移动设备、平板电脑和不同屏幕尺寸的笔记本电脑。在这里，尝试维护所有这些物理设备并保持最新更新可能变得不可行。
- en: Using LambdaTest online to automate the browser testing grid
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LambdaTest在线自动化浏览器测试网格
- en: Cross-browser testing with LambdaTest allows you to test your web applications
    or websites across a wide range of browsers and operating systems. LambdaTest
    is a cloud-based platform that provides real browsers that run on virtual machines,
    enabling you to perform comprehensive testing without the need to set up physical
    devices or virtual machines locally.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用LambdaTest进行跨浏览器测试允许您在广泛的浏览器和操作系统上测试您的Web应用程序或网站。LambdaTest是一个基于云的平台，它提供在虚拟机上运行的实时浏览器，使您能够在不设置本地物理设备或虚拟机的情况下进行全面的测试。
- en: 'To perform cross-browser testing with LambdaTest, follow these steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用LambdaTest进行跨浏览器测试，请按照以下步骤操作：
- en: 'First, you need to sign up for a LambdaTest account. Once you’ve registered,
    you can access the LambdaTest dashboard:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要注册一个LambdaTest账户。一旦注册成功，您就可以访问LambdaTest仪表板：
- en: '![Figure 13\. 1 – LambdaTest dashboard](img/B19395_13_1.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图13.1 – LambdaTest仪表板](img/B19395_13_1.jpg)'
- en: Figure 13\. 1 – LambdaTest dashboard
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1 – LambdaTest仪表板
- en: 'On the LambdaTest dashboard, you can select the browsers and operating systems
    you want to test your website on. A large variety of browsers and versions are
    available, including Chrome, Safari, and Edge on different operating systems such
    as Windows and macOS, as well as iOS and Android mobile devices:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在LambdaTest仪表板上，您可以选择要测试网站上的浏览器和操作系统。提供大量浏览器和版本，包括Windows和macOS等不同操作系统上的Chrome、Safari和Edge，以及iOS和Android移动设备：
- en: '![Figure 13.2 – LambdaTest browser, operating system, and screen resolution
    selections](img/B19395_13_2.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图13.2 – LambdaTest浏览器、操作系统和屏幕分辨率选择](img/B19395_13_2.jpg)'
- en: Figure 13.2 – LambdaTest browser, operating system, and screen resolution selections
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2 – LambdaTest浏览器、操作系统和屏幕分辨率选择
- en: You can choose to run tests on either the *live interactive testing* environment
    or the *automated screenshot* *testing* environment.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以选择在*实时交互测试*环境或*自动化截图测试*环境中运行测试。
- en: Live interactive testing
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实时交互测试
- en: 'In this mode, you can interact with browsers in real time, just like using
    a physical device:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模式下，您可以实时与浏览器交互，就像使用物理设备一样：
- en: '![Figure 13.3 – LambdaTest live interactive testing for manual testers](img/B19395_13_3.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.3 – LambdaTest 为手动测试人员提供的实时交互式测试](img/B19395_13_3.jpg)'
- en: Figure 13.3 – LambdaTest live interactive testing for manual testers
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.3 – LambdaTest 为手动测试人员提供的实时交互式测试
- en: You can navigate your website, perform actions, and manually check for multiple
    issues. Interactive live testing is a pivotal feature in modern test automation
    frameworks that aligns well with a focus on inspecting tests mid-execution.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以浏览您的网站，执行操作，并手动检查多个问题。交互式实时测试是现代测试自动化框架中的一个关键特性，与在执行过程中检查测试的关注点相吻合。
- en: The live interactive testing feature provided by LambdaTest allows testers to
    interact with a website or web application in a real-time environment. This mirrors
    the experience a user would have on a physical device.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: LambdaTest 提供的实时交互式测试功能允许测试人员在实时环境中与网站或网络应用程序进行交互。这反映了用户在物理设备上可能拥有的体验。
- en: Automated screenshot testing
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动截图测试
- en: 'In this mode, LambdaTest takes screenshots of your website on different browsers
    and operating systems automatically. This is useful for quick checks and to see
    how your website looks on various configurations:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模式下，LambdaTest 会自动在不同浏览器和操作系统上对您的网站进行截图。这对于快速检查以及查看您的网站在各种配置下的外观非常有用：
- en: '![Figure 13.4 – Automated screenshot testing](img/B19395_13_4.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.4 – 自动截图测试](img/B19395_13_4.jpg)'
- en: Figure 13.4 – Automated screenshot testing
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.4 – 自动截图测试
- en: Once you’ve selected the browsers and testing mode, you can enter your website’s
    URL in LambdaTest and start the testing process. The platform will open virtual
    machines with the chosen browsers and load your website for testing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您选择了浏览器和测试模式，您可以在 LambdaTest 中输入您的网站 URL 并开始测试过程。平台将打开带有所选浏览器的虚拟机，并加载您的网站进行测试。
- en: During the testing process, you can inspect elements, use developer tools, and
    debug any issues you encounter. You can also take screenshots and save them for
    further analysis and reporting.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试过程中，您可以检查元素，使用开发者工具，并调试您遇到的任何问题。您还可以截图并保存以供进一步分析和报告。
- en: LambdaTest provides detailed test reports, including screenshots and logs, which
    can help you identify any discrepancies across browsers and operating system configurations.
    You can share these with your team to discuss and address any issues that are
    found during cross-browser testing.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: LambdaTest 提供详细的测试报告，包括截图和日志，这可以帮助您识别跨浏览器和操作系统配置中的任何差异。您可以将这些报告与您的团队分享，以便讨论和解决在跨浏览器测试过程中发现的问题。
- en: They also offer integrations with various testing and collaboration tools, making
    it easier to incorporate cross-browser testing seamlessly into your existing development
    workflow. By using LambdaTest for cross-browser testing, you can ensure that your
    web application performs consistently and optimally across different browsers
    and operating systems.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 他们还提供与各种测试和协作工具的集成，使将跨浏览器测试无缝集成到现有的开发工作流程中变得更加容易。通过使用 LambdaTest 进行跨浏览器测试，您可以确保您的网络应用程序在不同浏览器和操作系统上表现一致且优化。
- en: Using Selenium Standalone server to locally build the testing grid
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Selenium 独立服务器在本地构建测试网格
- en: Cross-browser testing with Selenium Standalone server allows you to test web
    applications or websites across multiple browsers and operating systems using
    the Selenium WebDriver API. The standalone server acts as a hub that connects
    to different browsers and executes test scripts on them.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Selenium 独立服务器进行跨浏览器测试允许您使用 Selenium WebDriver API 在多个浏览器和操作系统上测试网络应用程序或网站。独立服务器充当枢纽，连接到不同的浏览器并在其上执行测试脚本。
- en: 'To perform cross-browser testing with the Selenium Standalone server, follow
    these steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Selenium 独立服务器执行跨浏览器测试，请按照以下步骤操作：
- en: Download the Selenium Standalone server JAR file from the official Selenium
    website and run it on your machine or a dedicated server. This server acts as
    a central hub that manages browser sessions and receives test commands from your
    test scripts.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从官方 Selenium 网站下载 Selenium 独立服务器 JAR 文件，并在您的机器或专用服务器上运行它。此服务器充当中央枢纽，管理浏览器会话并从您的测试脚本接收测试命令。
- en: Install the browsers you want to test on the machine where the Selenium Standalone
    server is running. Ensure that you have the necessary browser drivers installed
    for each browser (for example, ChromeDriver for Chrome, GeckoDriver for Edge)
    and that they have been added to your system’s PATH.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Selenium Standalone服务器运行的机器上安装您想要测试的浏览器。确保您为每个浏览器安装了必要的浏览器驱动程序（例如，ChromeDriver用于Chrome，GeckoDriver用于Edge），并且它们已被添加到您的系统PATH中。
- en: Develop your test scripts using your preferred programming language and Selenium
    WebDriver bindings (for example, JavaScript, Python, C#, and so on). In your test
    scripts, set the desired capabilities to specify the browser and operating system
    configurations you want to test. The desired capabilities define which browser,
    browser version, and operating system Selenium Standalone server should use for
    the test. Use the Selenium WebDriver API to request a new browser session from
    the Selenium Standalone server, specifying the desired capabilities. The server
    will then launch the specified browser on the configured machine.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的编程语言和Selenium WebDriver绑定（例如，JavaScript、Python、C#等）开发您的测试脚本。在您的测试脚本中，设置所需的配置能力以指定您想要测试的浏览器和操作系统配置。所需的配置能力定义了Selenium
    Standalone服务器应使用哪个浏览器、浏览器版本和操作系统进行测试。使用Selenium WebDriver API从Selenium Standalone服务器请求新的浏览器会话，指定所需的配置能力。然后，服务器将在配置的机器上启动指定的浏览器。
- en: Once the browser session has been established, your test scripts can interact
    with the web elements by using WebDriver commands. You can navigate pages, click
    buttons, fill out forms, and perform other actions to test the functionality and
    user interface of your web application. During the test’s execution, the server
    will collect test results, logs, and any errors that were encountered during cross-browser
    testing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦建立了浏览器会话，您的测试脚本可以通过使用WebDriver命令与Web元素交互。您可以导航页面、点击按钮、填写表单以及执行其他操作来测试Web应用程序的功能和用户界面。在测试执行过程中，服务器将收集测试结果、日志以及在跨浏览器测试过程中遇到的任何错误。
- en: Cross-environment testing with a shared configuration file
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用共享配置文件的跨环境测试
- en: 'Cross-environment testing involves configuring WebdriverIO to run tests on
    different environments, such as test and staging. Occasionally, this might include
    development as well as production environments. This approach allows you to ensure
    compatibility and functionality across different environments, helping you catch
    potential issues early in the development process:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 跨环境测试涉及配置WebdriverIO在不同的环境中运行测试，例如测试和预发布环境。偶尔，这还可能包括开发和生产环境。这种方法允许您确保不同环境之间的兼容性和功能，帮助您在开发过程中早期发现潜在问题：
- en: '![Figure 13.5 – Three wdio conf files sharing a common config file](img/B19395_13_5.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图13.5 – 三个wdio conf文件共享一个公共配置文件](img/B19395_13_5.jpg)'
- en: Figure 13.5 – Three wdio conf files sharing a common config file
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5 – 三个wdio conf文件共享一个公共配置文件
- en: But we don’t want to repeat all the settings in multiple files. Fortunately,
    WebdriverIO allows us to share values across all environments. We created a `shared.conf`
    file that holds all the settings that are shared across all environments. If any
    settings need to be changed, we can make the necessary changes in a single location.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们不想在多个文件中重复所有设置。幸运的是，WebdriverIO允许我们在所有环境中共享值。我们创建了一个`shared.conf`文件，其中包含所有跨所有环境共享的设置。如果需要更改任何设置，我们可以在单个位置进行必要的更改。
- en: The way this is accomplished is by creating individual files for each operating
    system and environment, such as `windows.conf` and `mac.conf`. We will do this
    in a cloud environment with `lambdatest.conf` shortly.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一点的做法是为每个操作系统和环境创建单独的文件，例如`windows.conf`和`mac.conf`。我们将在云环境中使用`lambdatest.conf`进行此操作。
- en: 'In the `wdio.shared.conf.ts` configuration file, define multiple environments
    (for example, development, test, and production) with the appropriate settings
    for each environment. Here’s an example:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在`wdio.shared.conf.ts`配置文件中，定义多个环境（例如，开发、测试和生产）并为每个环境设置适当的配置。以下是一个示例：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Regardless of the operating system, every browser will navigate to the same
    URLs without having the information copied multiple times.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 不论操作系统如何，每个浏览器都将导航到相同的URL，而无需多次复制信息。
- en: This can be quite complex for a project on local machines with potentially different
    resources and configurations. So, the next step is to leverage cloud resources
    to ensure all testing configurations are consistent, such as on LambdaTest. This
    is how the `shared.conf` file is used in `windows.conf`, `mac.conf`, and a cloud-based
    service such as `lambdatest.conf`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在本地机器上具有不同资源和配置的项目来说，这可能相当复杂。因此，下一步是利用云资源以确保所有测试配置的一致性，例如在LambdaTest上。这就是`shared.conf`文件在`windows.conf`、`mac.conf`以及像`lambdatest.conf`这样的基于云的服务中使用的方式。
- en: 'The following is an example of a `windows.conf.ts` or `mac.conf.ts` file using
    the `shared.conf.ts` file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用`shared.conf.ts`文件创建的`windows.conf.ts`或`mac.conf.ts`文件的示例：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: However, `LambdaTest.conf.ts` or other cloud-based services (SauceLabs, BrowserStack,
    and so on) will require different sets of configurations.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`LambdaTest.conf.ts`或其他基于云的服务（SauceLabs、BrowserStack等）将需要不同的配置集。
- en: 'The following is an example of a cloud-based service using the `shared.conf`
    file:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用`shared.conf`文件创建的基于云的服务示例：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, we use the `baseUrl` variable to select the appropriate environment
    based on the`"Env=uat"` environment variable that’s set when running the tests.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用`baseUrl`变量根据在运行测试时设置的`"Env=uat"`环境变量来选择适当的环境：
- en: 'Use `baseUrl` from the configuration to navigate to different URLs for each
    environment:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用配置中的`baseUrl`导航到每个环境的不同URL：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'From the command line, we can change the environments the tests run against.
    In this example, we are running against `uat`, which is `the-internet`, and `dev`,
    which is `candymapperr2.com` on Windows on Chrome and Edge browsers. Lastly, the
    `prod` example runs against `candymapper.com` on Mac on Chrome and Safari:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行中，我们可以更改测试运行的环境。在这个例子中，我们正在针对`uat`运行，它是`the-internet`，以及`dev`，在Windows上的Chrome和Edge浏览器中对应的是`candymapperr2.com`。最后，`prod`示例在Mac上的Chrome和Safari中针对`candymapper.com`：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'From this, we can see how we might start getting to a point where we’re trying
    to support large combinations of operating systems, browsers, and even older versions.
    This level of architecture support alone will not be sustainable, so the next
    logical step is to move testing to the cloud. This brings us some unique advantages.
    The console output of the tests is still available when it’s run in a cloud environment:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们可以看到我们可能开始达到一个点，即我们试图支持大量操作系统、浏览器甚至旧版本的组合。仅此级别的架构支持本身将不可持续，因此下一步合乎逻辑的步骤是将测试迁移到云端。这为我们带来了一些独特的优势。当在云端环境中运行时，测试的控制台输出仍然可用：
- en: '![Figure 13.6 – Results from the terminal window in LambdaTest](img/B19395_13_6.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图13.6 – LambdaTest终端窗口中的结果](img/B19395_13_6.jpg)'
- en: Figure 13.6 – Results from the terminal window in LambdaTest
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.6 – LambdaTest终端窗口中的结果
- en: 'In the cloud, the test cases can be assigned to run in multiple browsers, versions,
    and operating systems, but without the need to configure and support the underlying
    architecture:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在云端，测试用例可以被分配到在多个浏览器、版本和操作系统上运行，但无需配置和支持底层架构：
- en: '![ Figure 13.7 – Results of the test cases in multiple operating systems and
    browsers in the cloud](img/B19395_13_7.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图13.7 – 云端多个操作系统和浏览器中的测试用例结果](img/B19395_13_7.jpg)'
- en: Figure 13.7 – Results of the test cases in multiple operating systems and browsers
    in the cloud
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.7 – 云端多个操作系统和浏览器中的测试用例结果
- en: 'The following example shows the multiple browsers and operating systems that
    we can run against. Now, if we were to click on a single item, we could dive deeper
    into the details of a particular system and run results:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了我们可以针对的多个浏览器和操作系统。现在，如果我们点击一个单独的项目，我们可以深入了解特定系统的详细信息并运行结果：
- en: '![Figure 13.8 – Test run on Safari V.15 on Mac Monteray in the cloud](img/B19395_13_8.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图13.8 – 在云端Mac Monteray上运行Safari V.15的测试](img/B19395_13_8.jpg)'
- en: Figure 13.8 – Test run on Safari V.15 on Mac Monteray in the cloud
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.8 – 在云端Mac Monteray上运行Safari V.15的测试
- en: 'And while screen captures are nice, it’s even better to watch an entire video
    that’s been recorded. This provides a clear look into the interactions of a test
    run:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然屏幕截图很棒，但观看整个录制视频更好。这可以清楚地了解测试运行的交互：
- en: '![Figure 13.9 – A video still of the test case running in LambdaTest](img/B19395_13_9.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图13.9 – LambdaTest中运行的测试用例的视频截图](img/B19395_13_9.jpg)'
- en: Figure 13.9 – A video still of the test case running in LambdaTest
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.9 – LambdaTest中运行的测试用例的视频截图
- en: Again, video storage space and cleanup are less time-consuming. The costs can
    be compared to having one or two team members dedicated to developing, enhancing,
    and maintaining such large files generated on-site becoming prohibitive when they
    could be spending more time writing more test cases, analyzing results, and writing
    defects.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，视频存储空间和清理工作不太耗时。成本可以与有一个或两个团队成员专门负责开发、增强和维护在现场生成的大型文件相比，当这些团队成员本可以花更多时间编写更多测试用例、分析结果和编写缺陷时，这种成本变得难以承受。
- en: Avoiding the rabbit hole of horizontal scaling
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免陷入水平扩展的兔子洞
- en: 'It is important to the 80/20 rule and the rule of threes in mind. We do not
    want to try to support 80% of the popular browser and operating system combinations
    when our customers are using only 20%. It may sound pro-active to try to support
    Safari on Mac when our customers only use Chrome on Windows. Attempting to do
    a regression test in a new browser on every environment becomes logarithmically
    impossible. You may not have the time to execute all test cases on all browsers
    and all environments. We only want to test on the browsers that are used by more
    of our users, so that might be a maximum combination of three: one browser in
    two operating systems or two browsers in one operating system. In addition, time
    can be taken away from creating new tests if we are trying to determine the root
    cause of why one test runs in one browser or operating system and fails in another.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 需要牢记80/20法则和三法则。当我们的客户只使用20%的浏览器和操作系统组合时，我们不想尝试支持80%的流行组合。当我们的客户只在Windows上使用Chrome时，尝试支持Mac上的Safari可能听起来很积极主动。在每一个环境中尝试在新的浏览器上进行回归测试，这变得对数级地不可能。你可能没有时间在所有浏览器和所有环境中执行所有测试用例。我们只想在更多用户使用的浏览器上进行测试，这可能是一个最多三组合：两个操作系统中的一个浏览器或一个操作系统中的两个浏览器。此外，如果我们试图确定为什么某个测试在一个浏览器或操作系统中运行而另一个失败的根本原因，那么时间可能会被用于创建新的测试。
- en: Handling environment-specific logic
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理特定环境的逻辑
- en: 'If your application has environment-specific code or issues, use conditional
    checks or feature detection to handle them gracefully:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序有特定环境的代码或问题，请使用条件检查或功能检测来优雅地处理它们：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Rule of thumb
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 经验法则
- en: Try not to get bogged down in getting All-Pass on every browser and operating
    system. Expand to one additional browser, then one additional operating system.
    It is best to only perform smoke testing on peripheral configurations. It can
    easily consume your time supporting logarithmically.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试不要陷入在每一个浏览器和操作系统中都达到全通过的困境。扩展到额外的一个浏览器，然后是额外的一个操作系统。最好只对边缘配置进行烟雾测试。这很容易消耗你的时间，支持对数级地。
- en: 'What if we have a new field that has been added to our testing environment
    but does not exist in production? Can we build a test that will support both?
    At this point, we can introduce a new set of `IfExist()` custom commands. Each
    base method, including `click()`, `setValue()`, and `select()`, will have a corresponding
    function: `clickIfExist()`, `setValueIfExist()`, and `selectIfExist()`, respectively.
    We can also add a `verifyIfExist()` method. The goal is that rather than have
    separate versions of every test for each environment, we have one set of tests
    that is highly likely to reach the endpoint of the journey, even if there are
    minor differences along the way.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在测试环境中添加了一个新字段，但在生产环境中不存在，我们该怎么办？我们能构建一个支持两者的测试吗？在这个时候，我们可以引入一组新的`IfExist()`自定义命令。每个基本方法，包括`click()`、`setValue()`和`select()`，都将有一个相应的函数：`clickIfExist()`、`setValueIfExist()`和`selectIfExist()`，分别。我们还可以添加一个`verifyIfExist()`方法。目标是，而不是为每个环境有单独的测试版本，我们有一套测试，它高度可能达到旅程的终点，即使沿途有细微的差异。
- en: The multiverse – one test, two environments
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多宇宙 – 一个测试，两个环境
- en: 'The advantage is that these `IfExist()` methods will not stop the test if the
    object doesn’t exist. Our tests can now be executed in a test environment where
    new functionality exists, as well as a production environment where the functionality
    is yet to be pushed. For example, a page may ask for a month to be selected from
    a list on a long survey navigation path. In the staging environment, this requires
    the **Next** button to be explicitly clicked to move to the page. However, in
    QA, the **Next** button is removed and the page implicitly moves on once the user
    selects an item from the list:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 优点是这些 `IfExist()` 方法如果对象不存在，则不会停止测试。我们的测试现在可以在存在新功能的新测试环境中执行，以及在功能尚未推送的生产环境中执行。例如，一个页面可能要求从长调查导航路径上的列表中选择一个月。在预发布环境中，这需要明确点击**下一步**按钮才能转到页面。然而，在质量保证（QA）中，**下一步**按钮被移除，一旦用户从列表中选择一个项目，页面就会隐式地继续：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'There are two approaches to this implementation. First, we could enhance the
    `clickadv()` method with an optional property:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此实现有两种方法。首先，我们可以通过一个可选属性来增强 `clickadv()` 方法：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'However, this leads to code that is less clear about the intention, with the
    potential of a magic Boolean argument being used:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这会导致代码在意图上不够清晰，可能会使用一个魔法布尔参数：
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Instead, let’s create an alternative function with `ifExists` appended. This
    function uses the automation switchboard to tell the initial wrapper to act differently
    if the element does not exist:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，让我们创建一个带有附加 `ifExists` 的替代函数。此函数使用自动化交换机板告诉初始包装器，如果元素不存在，则采取不同的行动：
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Second, we store the state of the element when we check that it is valid. We
    will also save the locator of the element if it has not already been saved in
    the `beforeCommand` hook:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是在检查元素是否有效时存储元素的状态。如果元素尚未在 `beforeCommand` 钩子中保存，我们还将保存元素的定位器：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Lastly, we return immediately from the `clickAdv()` method:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们从 `clickAdv()` 方法立即返回：
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we can add the feature just by adding `IfExists`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需添加 `IfExists` 就可以添加这个功能：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can do the same to enhance the `setValueAdv()` method:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用同样的方法来增强 `setValueAdv()` 方法：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We must do the same to create `selectValueAdvIfExists`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须做同样的事情来创建 `selectValueAdvIfExists`：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, we can have tests that are robust enough to run in slightly different test
    environments and still get to the conclusion of an end-to-end test.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以有足够健壮的测试，在略微不同的测试环境中运行，并且仍然到达端到端测试的结论。
- en: 'For example, in the following figure, we have two websites:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在下面的图中，我们有两个网站：
- en: '![Figure 13.10 – Production versus pre-production environments where a button
    element has been removed](img/B19395_13_10.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.10 – 移除按钮元素的生产环境与预生产环境](img/B19395_13_10.jpg)'
- en: Figure 13.10 – Production versus pre-production environments where a button
    element has been removed
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.10 – 移除按钮元素的生产环境与预生产环境
- en: The production site on the left has a **GET IN TOUCH** button that scrolls down
    the page to a customer detail input support page.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的生产网站有一个**联系我们**按钮，该按钮将页面滚动到客户详情输入支持页面。
- en: On the right is the new release of the site. Note that this site doesn’t include
    the **GET IN** **TOUCH** button.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧是网站的新版本。请注意，此网站不包括**进入** **联系** **我们**按钮。
- en: With the option to click the button only if it exists without failing the test,
    we can begin to have tests that are more flexible in slightly differing environments.
    If the button only exists in one environment, the test can continue to execute
    without failing in both. This changes our focus from maintaining test cases to
    having an increased chance of reaching the end path. Finally, even if the method
    fails because the locator is different, the next few steps will execute on the
    wrong page and still bring the test to a halt for maintenance.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果按钮存在，则可以点击按钮而不使测试失败，我们可以开始拥有在略微不同的环境中更加灵活的测试。如果按钮只存在于一个环境中，测试可以继续执行而不会在两个环境中失败。这改变了我们的关注点，从维护测试案例到提高达到最终路径的机会。最后，即使方法因为定位器不同而失败，接下来的几个步骤将在错误的页面上执行，但仍然会停止测试以进行维护。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In our epic journey, we’ve unlocked a new superpower for our scripts by integrating
    the automation switchboard. This newfound capability ensures that our scripts
    remain as adaptable as the ever-evolving world of superheroes. They can now seamlessly
    operate across various browsers and operating systems, making them as versatile
    as a superhero’s toolkit.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们史诗般的旅程中，通过整合自动化控制台，我们为脚本解锁了新的超级能力。这种新发现的能力确保了我们的脚本能够像不断进化的超级英雄世界一样灵活适应。现在，它们可以在各种浏览器和操作系统上无缝运行，变得像超级英雄的工具箱一样多才多艺。
- en: As we turn the page to the next thrilling chapter, get ready to witness our
    web hero, WebdriverIO, taking flight into the clouds of cloud-based test automation
    and scheduling. Just like a superhero soaring through the skies, we’ll delve into
    the extraordinary realm of executing tests in the cloud. This chapter promises
    to be a riveting adventure, showcasing the incredible potential of our superheroic
    scripts as they conquer new heights and challenges in the world of testing.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们翻到下一章激动人心的篇章时，准备好见证我们的网络英雄WebdriverIO飞向云端，进入基于云的测试自动化和排程的领域。就像超级英雄在天空中翱翔一样，我们将深入探索在云端执行测试的非凡领域。这一章节承诺将是一场扣人心弦的冒险，展示我们超级英雄脚本在征服测试世界的新的高度和挑战时所展现出的惊人潜力。
