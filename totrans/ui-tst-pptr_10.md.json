["```js\nnpm install -g lighthouse\n```", "```js\nlighthouse https://www.packtpub.com/ --view\n```", "```js\nconst fs = require('fs');\nconst lighthouse = require('lighthouse');\nconst chromeLauncher = require('chrome-launcher');\n(async () => {\n  const chrome = await chromeLauncher.launch({chromeFlags: ['--headless']});\n  const options = {logLevel: 'info', output: 'html', onlyCategories: ['performance'], port: chrome.port};\n  const runnerResult = await lighthouse('https://example.com', options);\n  const reportHtml = runnerResult.report;\n  fs.writeFileSync('lhreport.html', reportHtml);\n  console.log('Report is done for', runnerResult.lhr.finalUrl);\n  console.log('Performance score was', runnerResult.lhr.categories.performance.score * 100);\n  await chrome.kill();\n})();\n```", "```js\nlighthouse https://developers.google.com/web/tools/lighthouse --view\n```", "```js\nnpm run serve\n```", "```js\nlighthouse http://localhost:8080/--view\n```", "```js\nnpm install lighthouse\n```", "```js\nconst lighthouse = require('lighthouse');\n```", "```js\nit('Should have a good performance score', async() => {\n  const result = await lighthouse(config.baseURL, {\n    port: (new URL(browser.wsEndpoint())).port,\n    onlyCategories: ['performance']\n  });\n\n  expect(result.lhr.categories.performance.score >= 0.25).to.be.true;\n});\n```", "```js\nit('Should have a good first contentful paint metric', async() => {\n  const result = await lighthouse(config.baseURL, {\n    port: (new URL(browser.wsEndpoint())).port,\n    onlyCategories: ['performance']\n  });\n\n  expect(result.lhr.audits['first-contentful-paint'].numericValue).lessThan(30000);\n});\n```", "```js\nit('Should have properly sized images', async() => {\n  const result = await lighthouse(config.baseURL, {\n    port: (new URL(browser.wsEndpoint())).port,\n    onlyCategories: ['performance']\n  });\n\n  result.lhr.audits['uses-responsive-images'].numericValue.should.equal(0); \n});\n```", "```js\nit('Should have a good first contentful paint metric using tracing', async() => {\n  await page.tracing.start({ screenshots: true, path: './homepagetracing.json' });\n  await page.goto(config.baseURL);\n  await page.tracing.stop();\n});\n```", "```js\nit('Should have a good first contentful paint metric using tracing', async() => {\n  await page.tracing.start({ screenshots: true, path: './homepagetracing.json' });\n  await page.goto(config.baseURL);\n  const trace = await page.tracing.stop();\n  const result = JSON.parse(trace);\n  const baseEvent = result.traceEvents.filter(i=> i.name == 'TracingStartedInBrowser')[0].ts;\n  const firstContentfulPaint =result.traceEvents.filter(i=> i.name == 'firstContentfulPaint')[0].ts;\n  expect((firstContentfulPaint - baseEvent) / 1000).lessThan(500);\n});\n```", "```js\nconst traceScreenshots = result.traceEvents.filter(x => (\n    x.cat === 'disabled-by-default-devtools.screenshot' &&\n    x.name === 'Screenshot' &&\n    x.args  &&\n    x.args.snapshot\n));\ntraceScreenshots.forEach(function(snap) {\n  fs.writeFile(`./hometrace-${snap.ts - baseEvent}.png`, snap.args.snapshot, 'base64', function(err) {});\n});\n```", "```js\nit('It should have good coverage', async() => {\n  await Promise.all([page.coverage.startJSCoverage(), page.coverage.startCSSCoverage()]);\n  await page.goto(config.baseURL);\n  const [jsCoverage, cssCoverage] = await Promise.all([\n      page.coverage.stopJSCoverage(),\n      page.coverage.stopCSSCoverage()\n  ]);\n  let totalBytes = 0;\n  let usedBytes = 0;\n  const coverageTotals = [...jsCoverage, ...cssCoverage];\n  for (const entry of coverageTotals) {\n      totalBytes += entry.text.length;\n      for (const range of entry.ranges) usedBytes += range.end - range.start - 1;\n  }\n  const percentUnused = parseInt((usedBytes / totalBytes) * 100, 10);\n  expect(percentUnused).greaterThan(90);\n});\n```"]