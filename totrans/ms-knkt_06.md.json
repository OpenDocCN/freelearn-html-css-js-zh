["```js\nobj.on('contact:added', self.contacts.push, self.contacts)\n.on('contact:deleted', self.contacts.remove, self.contacts);\n```", "```js\nobj.on('contact:added').then(function(newContact) {\n  self.contacts.push(newContact);\n});\n```", "```js\n//Remove a specific callback on an event\nobj.off('contact:added', self.contacts.push);\n\n//Remove all callbacks for a context (will remove both added and deleted from above example)\nobj.off(undefined, undefined, self.contacts);\n\n//Remove all callbacks\nobj.off();\n```", "```js\nvar subscription = obj.on('contact:added').then(self.contacts.push);\n//unsubscribe\nsSubscription.off();\n```", "```js\nobj.trigger('contact:added', newContact);\nobj.trigger('contact:added contact:approved', newApprovedContact);\nobj.trigger('all', superImportantEventData);\n```", "```js\nobj.trigger('contact:added', newContact);\n//\nvar contactAdded = obj.proxy('contact:added');\ncontactAdded(newContact);\n```", "```js\nfunction ContactListVM() {\n  // ...\n  var singleActivate = dataService.getContacts()\n  .then(function(contacts) {\n    self.contacts(contacts);\n  });\n\n  self.activate = function() {\n    return singleActivate;\n  };\n  //...\n};\n\nreturn new ContactListVM();\n```", "```js\nrouter:navigation:complete\nrouter:navigation:cancelled\n```", "```js\napp.on('contact:added').then(function(newContact) {\n  self.contacts.push(newContact);\n});\n```", "```js\napp.on('contact:added', self.contacts.push, self.contacts);\n```", "```js\nself.saveEntry = function() {\n  if (self.contact().id() === 0) {\n    dataService.createContact(self.contact())\n    .then(function(contact) {\n      app.trigger('contact:added', contact);\n    });\n  } else {\n    //Edit\n  }\n};\n```", "```js\nvar contactAdded = app.proxy('contact:added');\nself.saveEntry = function() {\n  if (self.contact().id() === 0) {\n  dataService.createContact(self.contact())\n    .then(contactAdded)\n  } else {\n    //edit\n  }\n};\n```", "```js\nvar dataService = {};\nEvents.includeIn(dataService);\n//other methods omitted\ndataService.createContact = function(contact) {\n  contact.id(UUID.generate());\n  contacts[contact.id()] = ko.toJS(contact);\n  saveAllContacts();\n  return getTimeoutPromise(contact).then(function() {\n    dataService.trigger('contact:added', contact);\n    return contact;\n  });\n};\n```", "```js\ndataService.on('contact:added', self.contacts.push, self.contacts);\n```", "```js\n    define(['durandal/system', 'durandal/app', 'common/extensions', 'services/mock'],\n    function(system, app, extensions, dataService) {\n\n      ///Same as before\n\n      app.title = 'Mastering Knockout';\n      app.start().then(function () {\n        app.setRoot(dataService.isLoggedIn() ? 'shell/shell' : 'login/page');\n      });\n    });\n    ```", "```js\n    app.start()\n    .then(dataService.isLoggedIn)\n    .then(function (isLoggedIn) {\n      app.setRoot(isLoggedIn ? 'shell/shell' : 'login/page');\n    });\n    ```", "```js\nlocation.href = '/';\n```", "```js\n<nav role=\"navigation\" class=\"collapse navbar-collapse\" id=\"navbar-collapse-group\">\n  <ul class=\"nav navbar-nav\" data-bind=\"foreach: router.navigationModel\">\n    <li data-bind=\"css: { active: isActive }\">\n      <a class=\"\" data-bind=\"attr: { href: hash }, text: title\"></a>\n    </li>\n  </ul>\n  <div class=\"nav navbar-nav navbar-right\">\n    <!-- ko compose: login --><!-- /ko -->\n  </div>\n</nav>\n```", "```js\ndataService.loginName = ko.observable(storage.get('loginToken'));\ndataService.isLoggedIn = ko.computed(function() {\n  return dataService.loginName() != null;\n});\ndataService.tryLogin = function(username, password) {\n  var success = username === password;\n  if (success) {\n    storage.set('loginToken', username);\n    dataService.loginName(username);\n  }\n\n  return getTimeoutPromise(success);\n};\ndataService.logout = function() {\n  dataService.loginName(null);\n  storage.remove('loginToken');\n};\n```", "```js\nself.canEdit = ko.computed(function() {\n  return dataService.isLoggedIn();\n});\n```", "```js\n<!-- ko if: $parent.canEdit -->\n  <button class=\"btn btn-sm btn-default\" data-part=\"edit-btn\" data-bind=\"click: $parent.editContact\">Edit</button>\n  <button class=\"btn btn-sm btn-danger\" data-bind=\"click: $parent.deleteContact\">Delete</button>\n<!-- /ko -->\n```", "```js\nself.editContact = function(contact) {\n  if (!self.canEdit()) {\n    return;\n  }\n  router.navigate('contacts/' + contact.id());\n};\n```", "```js\nself.canActivate = function() {\n  return dataService.isLoggedIn();\n};\n```", "```js\nrouter.map([\n  { route: '', moduleId: 'contacts/list', title: 'Contacts', nav: true },\n  { route: 'contacts/new', moduleId: 'contacts/edit', title: 'New Contact', nav: true, auth: true },\n  { route: 'contacts/:id', moduleId: 'contacts/edit', title: 'Contact Details', nav: false }\n])\n.buildNavigationModel()\n.mapUnknownRoutes('shell/error', 'not-found');\n\nthis.navigationModel = ko.computed(function() {\n  var navigationModel = router.navigationModel();\n  if (dataService.isLoggedIn()) {\n    return navigationModel;\n  } else\n  return navigationModel.filter(function(route) {\n    return !route.auth;\n  });\n});\n```", "```js\nrouter.guardRoute = function(model, instruction) {\n  return !(instruction.config.auth && !dataService.isLoggedIn());\n};\n```", "```js\nrouter.guardRoute = function(model, instruction) {\n  return !(instruction.config.auth && !dataService.isLoggedIn()) || 'shell/error';\n};\n```", "```js\n<div class=\"page-host\">\n  <!-- ko router: { cacheViews: false }--> <!-- /ko -->\n</div>\n```", "```js\nself.activate = function(id) {\n  //Id is only present when editing\n  if (id) {\n    return dataService.getContact(id).then(self.contact);\n  }\n  else\n  self.contact(new Contact());\n};\n```", "```js\n<!-- ko router: { \n  cacheViews: false, \n  transition: 'entrance' \n}--> <!-- /ko -->\n```", "```js\ndefine(['durandal/system', 'jquery', 'jquery-ui'], function(system, $) {\n\n  var outDuration = 400,\n  outDirection = 'down'\n  inDuration = 400,\n  inDirection = 'up',\n  easing = 'swing';\n\n  return function slideAnimation(settings) {\n\n    var currentView = settings.activeView,\n    newView = settings.child;\n\n    return system.defer(function(defer) {\n      function endTransition() {\n        defer.resolve();\n      }\n\n      function slideIn() {\n        $(newView).show('slide', { direction: inDirection, easing: easing }, inDuration, endTransition);\n      }\n\n      if (currentView) {\n        $(currentView).hide('slide', { direction: outDirection, easing: easing }, outDuration, newView ? slideIn : endTransition);\n      } else {\n        $(newView).show();\n        endTransition();\n      }\n\n    }).promise();\n  };\n});\n```", "```js\n<ul class=\"list-unstyled\" data-bind=\"foreach: displayContacts\">\n  <li data-bind=\"compose: $data\"></li>\n</ul>\n```", "```js\n<h3 data-bind=\"with: contact\">\n  <span data-bind=\"text: displayName\"></span>\n  <small data-bind=\"text: phoneNumber\" data-part=\"phone\"></small>\n  <div class=\"inline\" data-part=\"btn-container\">\"\n    <button class=\"btn btn-sm btn-default\" data-part=\"edit-btn\" data-bind=\"click: edit\">Edit</button>\n  </div>\n</h3>\n```", "```js\ndefine(['knockout', 'plugins/router'], function(ko, router) {\n  return function ListItem(contact) {\n    var self = this;\n\n    self.contact = contact;\n\n    self.edit = function() {\n      router.navigate('contacts/' + self.contact.id());\n   };\n  };\n});\n```", "```js\nself.activate = function() {\n  return dataService.getContacts()\n  .then(function(contacts) {\n    var listItems = contacts.map(function(contact) {\n      return new ListItem(contact);\n    })\n    self.contacts(listItems);\n  });;\n};\n```", "```js\n<ul class=\"list-unstyled\" data-bind=\"foreach: displayContacts\">\n  <li data-bind=\"compose: { model: $data, mode: 'templated' }\">\n    <div data-part=\"btn-container\" class=\"inline\">\n      <button class=\"btn btn-sm btn-default\" data-bind=\"click: edit\">Edit</button>\n      <button data-bind=\"click: $root.deleteContact\" class=\"btn btn-sm btn-danger\">Delete</button>\n    </div>\n  </li>\n</ul>\n```", "```js\nrouter.map([\n  { route: 'about', moduleId: 'about/index', title: 'About', nav: true, hasChildRoutes: true }\n  //OR\n  { route: 'about*children', moduleId: 'about/index', title: 'About', nav: true }\n]);\n```", "```js\ndefine(['plugins/router'], function(router) {\n  var childRouter = router.createChildRouter()\n  .makeRelative({\n    moduleId: 'about',\n    fromParent: true\n  }).map([\n  { route: ['author', ''], moduleId: 'author', title: 'Author', nav: true },\n  { route: 'publisher', moduleId: 'publisher', title: 'Publisher', nav: true }\n  ]).buildNavigationModel();\n\n  return {\n    router:childRouter\n  };\n});\n```", "```js\n<h1>About</h1>\n//Text removed for clarity\n<ul class=\"nav nav-tabs\" role=\"tablist\" data-bind=\"foreach: router.navigationModel\">\n  <li data-bind=\"css: { active: isActive }\">\n    <a class=\"\" data-bind=\"attr: { href: hash }, text: title\"></a>\n  </li>\n</ul>\n<div class=\"page-sub-host\">\n  <!-- ko router: { cacheViews: false }--> <!-- /ko -->\n</div>\n```", "```js\n{ route: 'contacts/:id', moduleId: 'contacts/edit', title: 'Contact Details', nav: false, hasChildRoutes: true },\n//OR\n{ route: 'contacts/:id*children', moduleId: 'contacts/edit', title: 'Contact Details', nav: false, hash: 'contacts/:id' },\n```", "```js\nvar childRouter = router.createChildRouter()\n.makeRelative({\n  moduleId: 'contacts/edit',\n  fromParent: true,\n  dynamicHash: ':id'\n}).map([\n  { route: ['details', ''], moduleId: 'details', title: 'Details', nav: true },\n  { route: 'bio', moduleId: 'bio', title: 'Biography', nav: true },\n  { route: 'location', moduleId: 'location', title: 'Location', nav: true }\n]).buildNavigationModel();\n```", "```js\ndialog.addContext('bootstrap', {\n  addHost: function (dialogInstance) {\n    //Create dialog, add to DOM\n  },\n  removeHost: function (dialogInstance) {\n    //Remove dialog from DOM\n  },\n  compositionComplete: function (child, parent, context) {\n    //Perform setup\n  }\n});\n```", "```js\naddHost: function (dialogInstance) {\n  var body = $('body'),\n  host = $('<div class=\"modal fade\"><div class=\"modal-dialog\"><div class=\"modal-content\"></div></div></div>');\n  host.appendTo(body);\n  dialogInstance.host = host.find('.modal-content').get(0);\n  dialogInstance.modalHost = host;\n}\n```", "```js\ncompositionComplete: function (child, parent, context) {\n  var dialogInstance = dialog.getDialog(context.model),\n  $child = $(child);\n  $(dialogInstance.modalHost).modal({ backdrop: 'static', keyboard: false, show: true });\n\n  //Setting a short timeout is need in IE8, otherwise we could do this straight away\n  setTimeout(function () {\n    $child.find('.autofocus').first().focus();\n  }, 1);\n\n  if ($child.hasClass('autoclose') || context.model.autoclose) {\n    $(dialogInstance.blockout).click(function () {\n      dialogInstance.close();\n    });\n  }\n}\n```", "```js\nremoveHost: function (dialogInstance) {\n  $(dialogInstance.modalHost).modal('hide');''''''\n}\n```", "```js\nself.show = function() {\n  return dialog.show(self, null, ''bootstrap'');\n};\n```", "```js\nself.show = function() {\n  return dialog.showBootstrap(self);\n};\n```", "```js\nvar oldShow = dialog.show;\ndialog.show = function(obj, data, context) {\n  return oldShow.call(dialog, obj, data, context || 'bootstrap');\n};\n```", "```js\n//Shows using the Bootstrap dialog\napp.showMessage('Are you sure you want to delete ' + contact.displayName() + '?', 'Delete Contact?', ['No', 'Yes']);\n//Shows using the Bootstrap dialog\nself.show = function() {\n  return dialog.show(self);\n};\n//Uses the bubble context, equivalent to calling dialog.showBubble();\nself.show = function() {\n  return dialog.show(self, null, 'bubble');\n};\n```", "```js\nvar oldShow = dialog.show;\ndialog.show = function(obj, data, context) {\n  return oldShow.call(dialog, obj, data, context || 'bootstrap');\n};\ndialog.showDefault = oldShow;\n```", "```js\nself.editContact = activator.create();\nself.quickEdit = function(listItem) {\n  self.editContact(new ContactVM(listItem.contact, function() {\n    self.editContact(null);\n  }));\n};\n```", "```js\n<ul class=\"list-unstyled\" data-bind=\"foreach: displayContacts\">\n  <li data-bind=\"compose: { model: $data, mode: 'templated' }\">\n    <div data-part=\"btn-container\" class=\"inline\">\n      <button class=\"btn btn-sm btn-default\" data-bind=\"click: edit\">Edit</button>\n      <button class=\"btn btn-sm btn-default\" data-bind=\"click: $root.quickEdit\">Quick Edit</button>\n      <button data-bind=\"click: $root.deleteContact\" class=\"btn btn-sm btn-danger\">Delete</button>\n    </div>\n  </li>\n  </ul>\n```", "```js\nfunction EditContactVm(initContact, closeCallback) {\n\n  ///...\n\n  self.close = function(result) {\n    if (closeCallback) {\n      closeCallback();\n    } else if (dialog.getDialog(self)) {\n      dialog.close(self, result);\n    } else {\n      router.navigate('''');\n    }\n  };\n```", "```js\nfunction Contact() {\n  var self = this;\n  self.firstName = '';\n  self.lastName = '';\n  self.reset = function() {\n    self.firstName = '';\n    self.lastName = ''\n  };\n};\n\nvar viewmodel = new Contact();\n\n//HTML\n<input data-bind=\"value: firstName\" />\n<input data-bind=\"value: lastName\" />\n<button data-bind=\"click: reset\">Reset</button>\n```", "```js\napp.configurePlugins({\n  router:true,\n  dialog: true,\n  observable: true\n});\napp.start().then(function () {\n  app.setRoot('shell/shell');\n});\n```", "```js\nfunction Contact() {\n  //Same as before\n\n  observable(self, 'firstName').subscribe(function(value){\n    console.log('First name changed.');\n  });\n\n  observable(self, 'firstName').extend({\n    rateLimit: {\n      timeout: 100,\n      method: 'notifyWhenChangesStop'\n    }\n  });\n};\n```", "```js\nobservable.defineProperty(self, 'displayName', function() {\n  var nickname = self.nickname || '';\n  if (nickname.length > 0) {\n    return nickname;\n  } else if ((self.firstName || '').length > 0) {\n    return self.firstName + ' ' + self.lastName;\n  } else {\n    return 'New Contact';\n  }\n});\n```", "```js\nreturn function Contact(init) {\n  var self = this;\n\n  self.id = 0;\n  self.firstName = '';\n  self.lastName = '';\n  self.nickname = '';\n  self.phoneNumber = '';\n\n  observable.defineProperty(self, 'displayName', function() {\n    var nickname = self.nickname || '';\n    if (nickname.length > 0)\n    return nickname;\n    else if ((self.firstName || '').length > 0)\n    return self.firstName + ' ' + self.lastName;\n    else\n    return 'New Contact';\n  });\n\n  //This will break the display name property\n  var name = self.displayName;\n}\n```", "```js\nobservable.convertObject(self);\nobservable.defineProperty(self, 'displayName', function() {\n  //\n});\n```", "```js\nself.contacts = dataService.getContacts()\n.then(function(contacts) {\n  return contacts.map(function(contact) {\n    return new ListItem(contact);\n  });\n});\n```"]