- en: Chapter 1. Web Mapping Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple full screen map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different ways to include OpenLayers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding base and non-base layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding the need of a base layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing with the map's options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing map's stack layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing map's controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving around the map view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting the map extent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every history has a beginning, in the same way every recipe starts with the
    initial condiments.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter shows us the basics and more important things that we need to know
    when we start creating our first web mapping applications with OpenLayers.
  prefs: []
  type: TYPE_NORMAL
- en: As we will see in this chapter and the following chapters, OpenLayers is a big
    and complex framework but, at the same time it is also very powerful and flexible.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast to other libraries, such as the nice but much more simple Leaflet
    project ([http://leaflet.cloudmade.com](http://leaflet.cloudmade.com)) library,
    OpenLayers tries to implement all the required things a developer could need to
    create a web GIS application. That is, not only GIS related concepts such as map,
    layer, or standard formats but also manipulation of document elements or helper
    functions to make asynchronous requests.
  prefs: []
  type: TYPE_NORMAL
- en: Trivializing, we have described a big picture of the framework in the next paragraph.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main concept in OpenLayers is the map. It represents the view where information
    is rendered. The map can contain any number of layers, which can be the raster
    or vector layer. On its way, each layer has a data source that serves data with
    its own format: a PNG image, a KML file, and so on. In addition, the map can contain
    controls, which help to interact with the map and its contents: pan, zoom, feature
    selection, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started with learning OpenLayers by examples.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple full screen map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you work in mapping applications, the first and important task is the creation
    of the map itself. The map is the core of your application and it is where you
    will add and visualize data.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will guide you through the process of creating our first and very
    simple web map application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is supposed that a web server is configured and ready. Remember our recipes
    are nothing more than HTML, CSS, and JavaScript code and because of this we need
    a web server that serves them to be interpreted on the browser's side.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Programming with OpenLayers is mainly related to writing HTML code and, of course,
    JavaScript code. So, we simply need a text editor to start coding our recipes.
  prefs: []
  type: TYPE_NORMAL
- en: There exist plenty of great text editors, many of them with web programming
    capabilities. Because we are going to start exploring an open source project such
    as OpenLayers we will refer to a couple of great open projects.
  prefs: []
  type: TYPE_NORMAL
- en: For Windows users, Notepad++ ([http://notepad-plus-plus.org](http://notepad-plus-plus.org))
    is a great alternative to the default text editor. It is simple and quick, offers
    syntax highlighting, and addition of plugins to extend capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, instead of text editors you can find complete development
    frameworks with support for web development, not only with syntax highlighting
    but with autocomplete, code navigation, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this group, two projects are the stars within the open source projects universe:
    Eclipse ([http://www.eclipse.org](http://www.eclipse.org)) and NetBeans ([http://netbeans.org](http://netbeans.org)).
    Both are Java-based projects and run on any platform.'
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code at `recipe/ch01/ch01_simple_map_book.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by creating a new empty `index.html` file and inserting the following
    block of code in it. We will explain it step-by-step in the next section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the file in your browser and see the result. You will see a whole screen
    map with some controls on the top-left corner, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/7843_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us explain the mystery step-by-step. First, we created a HTML5 document,
    see the `doctype` declaration code`<!DOCTYPE html>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `head` section, we have included a reference to the OpenLayers library
    using a `script` element, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We have added a `style` element to force the document to occupy the whole page,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After the `style` element comes the `script` element with some JavaScript code,
    but we will explain it at the end.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the `head` section starts the `body` section. Our `body` has an `onload`
    event associated to it. This means, once the whole content of the `body` section
    is completely loaded by the browser, the `init()` function will be called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Finally, within the body we have put a `div` element with the identifier `rcp1_map`,
    which will be used by OpenLayers to render the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, we force the element to fill the entire parent''s space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**A word about styles...**'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the `div` element `width/height` to `100%` means it will fill 100 percent
    of the parent's space. In this case, the parent is the `body` element, which is
    also set to fill 100 percent of the page space. More and better information about
    CSS can be found at [http://www.w3schools.com/css](http://www.w3schools.com/css).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a look at the `script` element in the `head` section.
  prefs: []
  type: TYPE_NORMAL
- en: As we have mentioned previously, using the `onload` event we ensure the `init`
    function is executed once the entire `body` elements are loaded by the browser,
    which means we can access`<div id="rcp1_map" ...>` without any problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we created an `OpenLayers.Map` object that will be rendered in the previously
    mentioned `div` element. This is achieved by passing the `DOM` element identifier
    in the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we created a new raster layer that will show imagery from the `OpenStreetMaps`
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once created we add it to the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, set the `map` view to the maximum valid extent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember there is no one way to do things.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this book have not been coded as standalone applications. Instead,
    to improve the user experience, we have created a rich application that allows
    you to choose and run the desired recipe, with the possibility to see the source
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/7843_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So the way to code the recipes in the book is slightly different, because they
    must be integrated with the application's design. For example, they do not require
    including the OpenLayers libraries because this is included in another place of
    the main application.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the way presented in the *How to do it..*. section is more oriented
    toward standalone applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are looking at the source code of this recipe, located at `recipes/ch01/ch01_simple_map.html`,
    we will see a slightly different code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, it contains the main parts described in the previous sections.
    We have a `div` element to hold the map instance and a `script` element with all
    the required JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the rich application, we have to use the Dojo Toolkit framework ([http://dojotoolkit.org](http://dojotoolkit.org)),
    which offers almost any kind of required feature: access and modification of the
    document object structure, event handling, internationalization, and so on. But
    the main reason we have chosen it is because, in addition it offers a great set
    of homogeneous widgets (tabs, buttons, lists, and so on) to create applications
    with a great look and feel.'
  prefs: []
  type: TYPE_NORMAL
- en: It is beyond the scope of this book to teach Dojo but its use is so easy and
    specific that it will not disturb the objective of this recipe, which is to teach
    OpenLayers.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Different ways to include OpenLayers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Understanding base and non-base layers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different ways to include OpenLayers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different ways we can include OpenLayers in our projects depending
    on the environment we are working in, that is development or production.
  prefs: []
  type: TYPE_NORMAL
- en: The environment refers to the server tier required for a stage in our process.
    In this way, the development environment is related to the development process,
    where programmers are working day to day, testing and checking.
  prefs: []
  type: TYPE_NORMAL
- en: Production environment refers to the final stage of the projects. It must run
    on stable servers and without dependency problems.
  prefs: []
  type: TYPE_NORMAL
- en: As we will see shortly, we can summarize the solutions to include OpenLayers
    JavaScript code in two groups, those with code hosted on a remote server or those
    with code hosted on our own server.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start and see the pros and cons of each solution.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a folder called `myProject` that will contain all our project files and
    library dependencies. Then create an `index.html` file and continue with the code
    given in the *Creating a simple full screen map* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is supposed that the project folder resides within a folder accessible by
    the web server folder, so it can serve its content.
  prefs: []
  type: TYPE_NORMAL
- en: Now download OpenLayers code from the project's web page at [http://www.openlayers.org](http://www.openlayers.org).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing this book, OpenLayers version 2.11 is the stable release,
    which can be found at [http://openlayers.org/download/OpenLayers-2.11.tar.gz](http://openlayers.org/download/OpenLayers-2.11.tar.gz).
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the bundle in the `myProject` folder and uncompress it. We need to have
    a folder structure similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/7843_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have three ways to include the OpenLayers library in our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<script type="text/javascript" src="img/OpenLayers.js"> </script>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<script type="text/javascript" src="img/OpenLayers.js"></script>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<script type="text/javascript" src="img/OpenLayers.js"></script>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first option includes an all-in-one compressed file hosted at the OpenLayers
    project server. It is simple to use but you cannot work locally in offline mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The size of the compressed all-in-one file `OpenLayers.js` is nearly 1 MB, so
    in a production environment with lots of requests it is probably better to host
    this file in a Content Delivery Network or CDN ([http://en.wikipedia.org/wiki/Content_delivery_network](http://en.wikipedia.org/wiki/Content_delivery_network)).
  prefs: []
  type: TYPE_NORMAL
- en: The second option is very similar to the first one, but the all-in-one compressed
    file is attached to the project. This option is suitable for cases in which you
    need OpenLayers to be in your own server with the code of your application.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Finally, the third option includes the uncompressed code of the OpenLayers library,
    which in fact includes many other files required by layers, controls, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This option is mainly used by programmers who want to extend OpenLayers and
    need to debug the code.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I encourage you to work in this mode. Use some tool such as Firebug for Firefox
    web browser or the Chrome browser console and put breakpoints on OpenLayers classes
    to better understand what is happening.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth saying when using this method lots of files are loaded from the
    server, one per class, which means many more server requests are made.
  prefs: []
  type: TYPE_NORMAL
- en: The most notable impact of this is that the page load time is much longer than
    with the previous options.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you choose to download OpenLayers and include it within your project, you
    don''t need to put the whole uncompressed bundle. As you can see, it contains
    lots of files and folders: source code, building scripts, test code, and other
    tools, but only a few are really required.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the only things you need to attach are:'
  prefs: []
  type: TYPE_NORMAL
- en: The all-in-one `OpenLayers.js` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `theme` and `img` folders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Understanding base and non-base layers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a simple full screen map* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding base and non-base layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the first things you need to have clear when working with OpenLayers
    is the base layer concept.
  prefs: []
  type: TYPE_NORMAL
- en: A **base layer** is a special kind of layer, which is always visible and determines
    some map properties such as projection and zoom levels.
  prefs: []
  type: TYPE_NORMAL
- en: A map can have more than one base layer but only one of them can be active at
    a time.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, if you add more than one flagged base layer to the map, the first
    base layer added will be used as the map's active base layer.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to add layers to the map flagging them to be base
    layers. We are going to create a page with two maps side-by-side and every map
    will have a layer switcher control that allows you to control the map layers.
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding base and non-base layers](img/7843_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We assume you have created an `index.html` file and included the OpenLayers
    library as we have seen in the *Different ways to include OpenLayers* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start by creating the necessary HTML code to have both our maps side-by-side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After this, add a `script` element `(<script type="text/javascript"></script>)`
    with the necessary code to initialize every map. The map on the left will contain
    two layers, one base layer and one non-base layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The map on the right will contain two base layers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s take a look at the explanation for the map on the left. The first thing
    we have done is the creation of an `OpenLayers.Map` instance that will be rendered
    in the `div` element prepared for it, on the left side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have created two layers and added them to the map. The magic to make
    the second layer a non-base layer comes with the properties specified in the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In OpenLayers, all layer classes are inherited from the base class `OpenLayers.Layer`.
    This class defines some properties common for all layers, such as `opacity` or
    `isBaseLayer`.
  prefs: []
  type: TYPE_NORMAL
- en: The Boolean `isBaseLayer` property is used by the map to know if a layer must
    act as a base or non-base layer.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Non-base layers are also called **overlays**.
  prefs: []
  type: TYPE_NORMAL
- en: As you can imagine, the `opacity` property is a float value ranging from 0.0
    to 1.0 and specifies the opacity of the layer. We have set it to `50%` of the
    opacity to allow view through the overlay layer, that is, to be able to see the
    base layer.
  prefs: []
  type: TYPE_NORMAL
- en: For the right-hand map, we have added two layers without any specific property.
    This, by default, makes the WMS layer a base layer.
  prefs: []
  type: TYPE_NORMAL
- en: If you expand the layer switcher control, you will see that on the left map
    you can show/hide the overlay layer but you can't hide the base layer. In contrast,
    in the right map, both are base layers and they are mutually exclusive, which
    means only one can be active at a time.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you play with the layer switcher control, an internal call is made to the
    map's `setBaseLayer(newBaseLayer)` method. This method is responsible for changing
    the active base layer used by the map.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the specify properties at construction time, you can also use
    the setter methods `setOpacity(opacity)` and `setIsBaseLayer(isBaseLayer)` to
    change the values at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Avoiding the need of a base layer* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Managing map's stack layers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding the need of a base layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There can be situations where you don't want a base layer and only want a bunch
    of layers to work on.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine an online GIS editor where users can add and remove layers but they
    are not obligated to have an always visible one.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how we can easily avoid the requirement of setting a base
    layer within the map.
  prefs: []
  type: TYPE_NORMAL
- en: '![Avoiding the need of a base layer](img/7843_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As always, create a DOM element to render the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now create a new `OpenLayers.Map` instance and set the `allOverlays` property
    to `true:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add two layers to see a result. Also add the layer switcher control:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Center the map view to some nice place:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the map's property `allOverlays` is set to `true`, the map ignores the
    `isBaseLayer` property of the layers.
  prefs: []
  type: TYPE_NORMAL
- en: If you expand the layer switcher control, you will see that it contains two
    overlay layers, no base layer, which you can show or hide and, if desired, leave
    a blank map without layers.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, in this recipe we have used the `map.setCenter()` method, which
    needs a position, an `OpenLayers.LonLat` instance, and a zoom level to work.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When working in the `allOverlays` mode, the lowest layer will act as base layer,
    although all the layers will be flagged as `isBaseLayer` is set to `false.`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Understanding base and non-base layers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Moving around the map view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Restricting the map extent* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing with the map's options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you create a map to visualize data, there are some important things you
    need to take into account: projection to use, available zoom levels, the default
    tile size to be used by the layer requests, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Most of these important things are enclosed in the so-called map properties
    and, if you work in the `allOverlays` mode, you need to take them specially into
    account.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to set some of the most common map properties.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you continue, it is important to note that instances of the `OpenLayers.Map`
    class can be created in three ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Indicating the identifier of the DOM element where the map will be rendered:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Indicating the identifier of the DOM element and also indicating a set of options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Only indicating a set of options. This way we can later set the DOM element
    where the map will be rendered:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a DOM element to render the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define some map options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the map by passing `options:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `MousePosition` control to see the mouse position over the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a WMS layer and set the map view on some desired place:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this case we have used five map options to initialize our `OpenLayers.Map`
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have used the `div` option to pass the identifier of the DOM element where
    the map will be rendered: `div: "ch1_map_options"`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `OpenLayers.Map` class uses some default values for most of its options:
    `projection="EPSG:4326", units="degrees"`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `projection` option is used to set the projection used by the map to render
    data from layers: `projection: "EPSG:4326"`. Take into account it must be a string
    with the projection code. On other classes or options it can also be an `OpenLayers.Projection`
    instance.'
  prefs: []
  type: TYPE_NORMAL
- en: There are some implications with the map's projection. Firstly, the tiles to
    fill WMS layers will be requested using the map's projection, if no other projection
    is explicitly used by the layer. So you need to be sure the WMS server accepts
    the projection. Secondly, data from vector layers will be translated from the
    specific projection of every vector layer to the map's projection, so you will
    need to set the vector layer's projection options while creating them.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For translations other than `EPSG:4326` and `EPSG:900913`, you need to include
    the `Proj4js` project ([http://proj4js.org](http://proj4js.org)) in your web application.
  prefs: []
  type: TYPE_NORMAL
- en: Teaching map projections is beyond the scope of this book. A great description
    can be found on Wikipedia ([http://en.wikipedia.org/wiki/Map_projection](http://en.wikipedia.org/wiki/Map_projection)).
  prefs: []
  type: TYPE_NORMAL
- en: EPSG codes are a way to name and classify the set of available projections.
    The site Spatial Reference ([http://spatialreference.org](http://spatialreference.org))
    is a great place to find more information about them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `units` option specifies that the units used by the map are decimal degrees:
    `units: "dd"`. This option is related to some resolution options.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `displayProjection` option allows us to specify the projection that must
    be used to show the mouse position: `displayProjection: new OpenLayers.Projection("EPSG:900913")`.
    In this case, our map is in the `EPSG:4326` projection, also known as `WGS84`,
    with degree units but we show mouse position in `EPSG:900913`, also known as **Spherical
    Mercator**, which is in meter unit coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `numZoomLevels` sets the number of available zoom levels the user
    can change. A value of `7` means the user can go from *zoom level 0* to *zoom
    level 6*.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Imagery from sources such as Google Maps or OpenStreetMap are special cases
    where the pyramid of images is previously created with the Spherical Mercator
    projection - EPSG:900913\. This means you can't set the projection when requesting
    tiles because it is implicit.
  prefs: []
  type: TYPE_NORMAL
- en: If you put a layer in a different projection other than the one used by the
    map, it will be automatically disabled.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *Understanding base and non-base layers*, recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Managing map's stack layers*, recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Managing map's controls*, recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with projections*, recipe in [Chapter 8](ch08.html "Chapter 8. Beyond
    the Basics"), *Beyond the Basics.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing map's stack layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Map is the core concept in OpenLayers. It allows us to visualize information
    from different kinds of layers and brings us methods to manage layers attached
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to control layers. This is important because
    add, remove, or reorder layers are very common operations we need to do on almost
    every web mapping application.
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing map''s stack layers](img/7843_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The application will show a map on the left and a control panel on the right,
    with some buttons to control the layers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember we have used the Dojo toolkit framework ([http://dojotoolkit.org](http://dojotoolkit.org))
    to code a nicer and richer application to show the recipes of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this, you can see strange attributes in the HTML elements such as
    `dojoType="dijit.form.Button"` or `onClick="topLayer"`. Do not worry about it,
    there is no impact in the OpenLayers code we are covering in this book.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start by creating an `index.html` file to put the code needed to create the
    application layout. We place it within a table. On the left we put the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And, on the right we put the controls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `OpenLayers.Map` instance working in the `allOverlays` mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add some layers to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a layers switcher control (to show the layers) and center the map view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the JavaScript code that will react when the previous four buttons
    were clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is not much to say about the HTML code for the layout. We have used a
    table to put the map on the left and the set of buttons on the right. In addition,
    we have associated actions to the buttons that will be executed when they are
    clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'With respect to the OpenLayers code, we have created the map instance working
    in the `allOverlays` mode. This will let us move any layer without being worried
    about a base layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Later, we created three WMS layers and added them to the map. For some of them
    we have set the `opacity` property to `50%` to see through them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: It is very important to note that we have used the same name for the option's
    value attribute in the HTML select element as we have used for the layer. Later,
    this will let us select a map's layer by its name.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have added an `OpenLayers.Control.LayerSwitcher` control by setting
    its `ascending` property to `false:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: You can think of the map as storing layers in a stack and they are rendered
    from bottom to top, so the above layers can hide beneath the below layers depending
    on its opacity and extent.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default the `ascending` property is `true`, and the layer switcher control
    shows the layers of the map in the reverse order, that is, the bottom layer is
    drawn first in the control and the top layer is drawn last. You can avoid this
    by setting `ascending` to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the only thing we need to take a look at is the code responsible for
    button actions, which is the most interesting code in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look to the `raiseLayer()` action (which is very similar to `lowerLayer()`
    action):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: First, we get the name of the currently selected layer in the select element
    (don't worry if you don't understand that line completely, it is more related
    to the Dojo framework than to OpenLayers).
  prefs: []
  type: TYPE_NORMAL
- en: Then, we use the `map.getLayersByName()` method, which returns an array with
    all the layers that have the specified name. Because of this, we get the first
    element of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have a reference to the layer instance. We can raise it in the map using
    the `map.raiseLayer()` method. You can raise it by one or more positions indicating
    a `delta` number or, like in the `lowerLayer()` function, you can lower it by
    one or more positions indicating a negative value.
  prefs: []
  type: TYPE_NORMAL
- en: Internally `OpenLayers.Map` stores layers in an array (the `layers` attribute)
    and they are rendered in the order they are stored in the array (so the first
    element is the bottom layer).
  prefs: []
  type: TYPE_NORMAL
- en: The `topLayer()` and `bottomLayer()` actions are similar too, they move the
    specified layer to the top or bottom of the stack. They both work using the `map.setLayerIndex()`
    method, which is responsible to move a layer to a specified position.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The method `map.setLayerIndex()` is used internally by `map.raiseLayer()` to
    move layers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the bottom layer corresponds to the first layer in the array of layers,
    the `bottomLayer()` action is the easiest to implement because we simply need
    to move the layer to the first position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: For the `topLayer()` actions, we need to move the layer to the last position.
    To do this, we can get help from the `map.getNumLayers()` method, which returns
    the total number of layers in the map. In this way, if we have four layers in
    the map, the last corresponds to the index `3` (because the index value changes
    from `0` to `3)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `OpenLayers.Map` class has plenty of methods to manipulate the contained
    layers. We have seen a few in these recipes, to add, get layers by name, move
    up or down in the stack, and so on. But you can find more methods to remove layers,
    get layers by their position, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Managing map's controls* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Moving around the map view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Restricting the map extent* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing map's controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenLayers comes with lots of controls to interact with the map: pan, zoom,
    show overview map, edit features, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: In the same way as layers, the `OpenLayers.Map` class has methods to manage
    the controls attached to the map.
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing map''s controls](img/7843_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new HTML file and add the OpenLayers dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, add the required code to create the buttons and `div` element to hold
    the map instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the `script` element section, create the map instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add some layers to the map and center the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the actions code associated to the buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Every button action function checks if the toggle button is checked or unchecked
    and depending on the value we add or remove the control to the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Adding a control is fairly simple through the `map.addControl()` method, which,
    given a control instance—and, optionally a `OpenLayers.Pixel` instance—adds the
    control to the map at the specified position.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Usually, a control position is controlled by modifying the `top` and `left`
    values in the CSS class used by the control. If you use a `OpenLayers.Pixel` value
    to position the control, then that value will overwrite the CSS ones.
  prefs: []
  type: TYPE_NORMAL
- en: To remove a control we need to have a reference to the instance that has to
    be removed. The method `map.getControlsByClass()` returns an array of controls
    of the specified class and helps us to get a reference to the desired control.
    Next, we can remove it with `map.removeControl().`
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note, in this recipe we have centered the map''s view passing a `OpenLayers.LonLat`
    instance created in a different way. Instead of using the `new` operator, we have
    used the method `OpenLayers.LonLat.fromString`, which created a new instance from
    a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, the map instance created in this recipe has initialized with only
    one control, `OpenLayers.Control.Navigation()`, which allows us to navigate the
    map using the mouse:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Passing an empty array to the `controls` property creates a map instance without
    any control associated with it. In addition, without specifying the `controls`
    property, OpenLayers creates a set of default controls for the map, which includes
    the `OpenLayers.Control.Navigation` and `OpenLayers.Control.PanZoom` controls.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Managing map's stack layers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Moving around the map view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving around the map view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unless you want to create a completely static map, without the controls required
    for the user to pan or zoom, you would like the user to be able to navigate and
    explore the map.
  prefs: []
  type: TYPE_NORMAL
- en: There can be situations when the controls are not enough. Imagine a web application
    where the user can make a search, such as Everest, and the application must find
    its location and fly to it. In this case, you need to navigate by code and not
    by using a control.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you some of the `OpenLayers.Map` class methods that will allow
    you to improve the user's experience.
  prefs: []
  type: TYPE_NORMAL
- en: '![Moving around the map view](img/7843_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The application layout contains three main sections. At the top there is a label
    to show the current map center position and zoom level. It is automatically updated
    when the map is moved or the zoom is changed.
  prefs: []
  type: TYPE_NORMAL
- en: The map is in the center and there are a bunch of controls on the right to set
    and test the main map methods to interact with the view.
  prefs: []
  type: TYPE_NORMAL
- en: As you will see, the map has no control attached to it, so the only way to interact
    with it is through the right controls.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We omit the HTML code necessary to create the application layout, so if you
    are interested in the HTML code you can take a look at the source code available
    on the Packt Publishing website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an HTML file with OpenLayers dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The HTML code to create the buttons and layout of the previous screenshot is
    extensive and not related to the goal of the book, so here we avoid writing it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a `div` element to hold the map instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a map instance. This time we specify a listener for some events that
    will update the center and zoom values of the label on top of the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add one layer and center the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the code that will be executed by the button actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To update the center and zoom level values at the top, we have instantiated
    the `Map` object with some event listeners attached to it. Actually, the same
    listener function is attached to all three events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Within the `changeListener()` function we use `map.getCenter()`, which returns
    an `OpenLayers.LonLat` object, and `map.getZoom()` to get the current values and
    update the top-left label.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: For every button, an action is executed. They are responsible to get the required
    values and invoke a `map` method.
  prefs: []
  type: TYPE_NORMAL
- en: The `map.moveByPx()` method moves the map by a delta value specified in pixels.
    Note, it moves the map; it doesn't pan, so don't expect any effect.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The `map.moveTo()` method is similar to the previous one but moves the view
    to a specified position (instead of an increment) and is specified with an `OpenLayers.LonLat`
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: The `map.setCenter()` method is similar to `map.moveTo()` but it centers the
    view on the specified location.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, there are two pan-related actions, which make nice smooth movements.
    The `map.pan()` method moves the view with a pan effect specified by a pixel delta.
    The `map.panTo()` method does something similar, it moves the view to a specified
    location.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Managing map's stack layers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Restricting the map extent* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting the map extent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, there are situations where you are interested to show data to the user
    but only for a specific area, which your available data corresponds to (a country,
    a region, a city, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: In this case, there is no point in allowing the user to explore the whole world,
    so you need to limit the extent the user can navigate.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we present some ways to limit the area a user can explore.
  prefs: []
  type: TYPE_NORMAL
- en: '![Restricting the map extent](img/7843_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a map instance. Take a look at the couple of properties used in the
    constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As always, add some layer to see content and center the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the functions that will be executed when buttons are clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you have seen, the map has been instantiated using the two properties `maxExtent`
    and `restrictedExtent`, which are responsible for limiting the area of the map
    we can explore.
  prefs: []
  type: TYPE_NORMAL
- en: Although similar, these two properties have different meanings. Setting the
    `maxExtent` property limits the viewport so its center cannot go outside the specified
    bounds. By setting the `restrictedExtent` property the map itself cannot be panned
    beyond the given bounds.
  prefs: []
  type: TYPE_NORMAL
- en: 'The functions that react when buttons are clicked get the values from the input
    fields and apply the new values through the `map.setOptions()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: We can pass the same properties we use when creating a new `OpenLayers.Map`
    instance to the `map.setOptions()` method and it will take care to update them.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Limiting the map extent is not the only way to limit the information we show
    to the user. The layers have also similar properties to filter or limit the information
    they must render.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Moving around the map view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
