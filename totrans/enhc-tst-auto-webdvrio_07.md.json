["```js\nexports.selectAdv = async (selector, text){\n  element = await getValidElement(element, \"list\");\n      let listName : String = getListName{element}\n```", "```js\ncase 'list'\n  newSelector = `//select[contains(@id,\n    '${selector.toLowerCase()}'}]`;\n  length = await (this.countMatches(newSelector)));\n  exists = length != 0\n  element = await ${`${newSelector}`);\n```", "```js\n  if (length == 0){\n    // Second chance List locator\n    newSelector = `//select[contains(@id, '${selector}'}]`;\n    length = await (this.countMatches(newSelector)));\n    exists = length != 0\n    element = await ${`${newSelector}`);\n  }\n```", "```js\n  if (length == 0){\n    // Second chance List locator\n    newSelector = `//*[contains(text(),       '${selector}')]/parent::*/select]`;\n    length = await (this.countMatches(newSelector)));\n    exists = length != 0\n    element = await ${`${newSelector}`);\n  }\n    break;\n}\n```", "```js\nawait lstMonth.selectByVisibleText (\"March\");\nawait lstMonth.selectByAttribute (\"value\", \"March\");\nawait lstMonth.selectByIndex(2); // 0 based index\n```", "```js\nawait lstElement.selectByVisibleText (item);\nlet itemValue = await listElement.getText();\nif (itemValue === item) return true\n```", "```js\nawait listElement.click({ block: 'center' }) // Set focus\nawait browser.keys([\"\\uE015\"]}; // Send down arrow key to open the list \n```", "```js\nlet item : String =\"\";\nlet arrItems: string[] = [];\nlet found : boolean = false\nlet lastItem : string = await listElement.getText()\narrItems.push(lastItem);\n```", "```js\ndo {\n  if (await listElement).getText().contains(item){\n    found = true\n    global.log (\"Found a close match: \" +\n      listElement).getText()\n    break;\n  }\n  await browser.keys([\"\\uE015\"]}; // Send down arrow key\n  item = listElement.getText()\n  if (lastValue === item) {\n    break;\n global.log (`'${item}' was not found in list: ${arrValues}); // Output the item and the list of values\n}\n   arrItems.push(item)\n} while !(lastValue == listElement.getText()) // No match\n```", "```js\nif (found === false) {\n  await this.log (`    Failed to select '${text}' from ${arrItems} in ${listName}\n  return element;\n}\n```", "```js\nconst comboBoxSelector = 'select#yourComboBoxId';\n$(comboBoxSelector).selectByVisibleText('Option Text');\n```", "```js\nconst comboBoxSelector = 'select#yourComboBoxId';\n$(comboBoxSelector).selectByAttribute('value', 'option-value');\n```", "```js\nconst comboBoxSelector = 'select#yourComboBoxId';\n$(comboBoxSelector).selectByIndex(1); // Index starts from 0\n```", "```js\nListElement.setValue(\"\");\n```", "```js\nawait listElement.doubleclick()\n```", "```js\nawait listElement.click(); await listElement.click(); await listElement.click()\n```", "```js\nawait listElement.click()\nawait browser.keys(['Home']);\nawait browser.keys(['Shift','End']);\nawait browser.keys(['Delete']);\nawait browser.keys(`${item}`)\n```", "```js\n        // Find the item in the list\n        try {\n          listItems = await browser.$$(`//li/*`)\n```", "```js\n          for (const listItem of listItems) {\n            if ((await listItem.getText()).includes(item))             // Found the element\n            break;\n          }\n\n          clickAdv(listItem)\n        } catch (error) {\n```", "```js\n          listItems = await browser.$$(`//li/*`)\n          for (const listItem of listItems) {\n             textContent += await listItem.getText() + \" | \";              // Get the text content of the element\n\n        }\n          await log(`  ERROR: \"${item}\" was not found in combobox: \\n ${textContent}`)\n        }\n```"]