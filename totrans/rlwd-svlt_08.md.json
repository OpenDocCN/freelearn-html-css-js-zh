["```js\n<Component props={value} />\n```", "```js\n<!-- Parent.svelte -->\n<Child props={value} />\n<!-- Child.svelte -->\n<script>\n  export let props;\n</script>\n<GrandChild props={props} />\n```", "```js\n<script>\n  import { setContext } from 'svelte';\n  setContext(\"key\", value);\n</script>\n```", "```js\n<script>\n  import { getContext } from 'svelte';\n  const value = getContext(\"key\");\n</script>\n```", "```js\n<script>\n  setContext(\"item\", item);\n  setContext(\"order\", order);\n</script>\n```", "```js\n<script>\n  const object = {};\n  setContext(object, value);\n</script>\n```", "```js\n<script>\n  let itemId = 123;\n  setContext(\"itemid\", itemId);\n  itemId = 456;\n</script>\n```", "```js\n<script>\n  let item = { id: 123 };\n  setContext(\"item\", item);\n  item.id = 456;\n</script>\n```", "```js\n<script>\n  const item = getContext(\"item\");\n</script>\n{item.id}\n```", "```js\nconst item = getContext(\"item\");\nsetInterval(() => {\n  console.log(item.id);\n}, 1000);\n```", "```js\n<script>\n  import { quantity } from './item';\n</script>\n<p>Quantity: {quantity}</p>\n```", "```js\nimport { quantity, subscribe } from './item';\n```", "```js\nimport { quantity, subscribe } from './item';\nsubscribe((newQuantity) => { ... });\n```", "```js\n<script>\n  import { quantity, subscribe } from './item';\n  let _quantity = quantity;\n  subscribe((newQuantity) => { _quantity = newQuantity; });\n</script>\n<p>Quantity: {_quantity}</p>\n```", "```js\nlet subscribers = [];\nfunction subscribe(fn) {\n  subscribers.push(fn);\n}\nfunction notifySubscribers(newQuantity) {\n  subscribers.forEach(fn => {\n    fn(newQuantity);\n  });\n}\n```", "```js\nquantity = 20;\nnotifySubscribers(quantity);\n```", "```js\nconst store = {\n  subscribe() {},\n  set() {},\n};\n```", "```js\n    const subscribers = [];\n    const store = {\n      subscribe(fn) {\n        // add the fn to the list of subscribers\n        subscribers.push(fn);\n        // return a function to remove the fn from the list of subscribers\n        return () => {\n          subscribers.splice(subscribers.indexOf(fn), 1);\n        };\n      }\n    };\n    ```", "```js\n    let storeValue = 10;\n    const store = {\n      subscribe(fn) {\n        // immediately call the function with the store value\n        fn(storeValue);\n        // ...\n      },\n    };\n    ```", "```js\n    let storeValue;\n    store.subscribe((value) => {\n      storeValue = value;\n    });\n    console.log(storeValue);\n    subscribe method is not being called immediately and synchronously, then immediately in the next statement where we console out the value of storeValue, you will see that the value of storeValue remains undefined.\n    ```", "```js\n    store.set(newValue);\n    ```", "```js\n    const store = {\n      // ...\n      set(newValue) {\n        // notify subscribers with new store value\n        for(const subscriber of subscribers) {\n          subscriber(newValue);\n        }\n      },\n    };\n    ```", "```js\n    const store = readable(initialValue, (set) => {\n      // update store value\n      set(newValue);\n    });\n    ```", "```js\n    const store = readable(Date.now(), (set) => {\n      setInterval(() => {\n        // update store value to the current timestamp\n        set(Date.now());\n      }, 1000);\n    });\n    ```", "```js\n    const store = writable(initialValue);\n    store.set(newValue);\n    ```", "```js\n<script>\n  import { onMount } from 'svelte';\n  let storeValue;\n  onMount(() => {\n    // use `subscribe` to subscribe to latest store value\n    const unsubscribe = store.subscribe(newStoreValue => {\n      storeValue = newStoreValue;\n    });\n    return () => unsubscribe();\n  });\n  function update(newValue) {\n    // use `set` to update store value\n    store.set(newValue);\n  }\n</script>\n<p>{storeValue}</p>\n```", "```js\n<script>\n  import { writable } from 'svelte/store';\n  const count = writable();\n</script>\n```", "```js\n<script>\n  import { writable } from 'svelte/store';\n  const count = writable();\n  console.log($count);\n</script>\n```", "```js\n$count = 123;\n// is equivalent to\ncount.set(123);\n```", "```js\n// language-preference.js\nexport const languagePreference = ...;\n```", "```js\n<!-- Chart.svelte -->\n<script>\n  import { setContext } from 'svelte';\n  setContext('chart', ...);\n</script>\n<!-- ChartAxis.svelte -->\n<script>\n  import { getContext } from 'svelte';\n  // chartSettings depending on which chart it falls under\n  const chartSettings = getContext('chart');\n</script>\n```", "```js\nlet theme = 'dark';\n```", "```js\nimport { writable } from 'svelte/store';\nlet chartData = writable();\n```", "```js\n<script>\n  import { writable } from 'svelte/store';\n  import { setContext } from 'svelte';\n  // declare a Svelte store\n  let data = writable(0);\n  setContext('data', data);\n</script>\n```", "```js\n<script>\n  import { getContext } from 'svelte';\n  const data = getContext('data');\n</script>\n```", "```js\n<script>\n  import { getContext } from 'svelte';\n  const data = getContext('data');\n</script>\n<p>{$data}</p>\n```", "```js\n<script>\n  let data = writable(0);\n  setContext('data', data);\n  function update() {\n    $data = 123;\n  }\n</script>\n```"]