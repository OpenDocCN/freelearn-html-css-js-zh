- en: Chapter 3. Data Input
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 数据输入
- en: Welcome back. So, in the previous two chapters we worked on data structures
    and we made tables in SQL and MySQL. Then we created the development environment
    while getting to grips with Sencha Cmd.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回来。所以，在前两个章节中，我们学习了数据结构，并在SQL和MySQL中创建了表。然后我们在熟悉Sencha Cmd的过程中创建了开发环境。
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Learn to make a form to input data
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何创建输入数据的表单
- en: Transmit that data to a server via Ext Direct
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Ext Direct将数据传输到服务器
- en: Learn about monitoring the state of the input
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何监控输入状态
- en: Learn how to use Ext Direct to validate the `MyAccount` form on the server side
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用Ext Direct在服务器端验证`MyAccount`表单
- en: Creating the login page
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建登录页面
- en: Let's start by creating the login page for this application. Here we will perform
    a simple implementation using PHP. We will create `login.php` and `logout.php`.
    However, we will not go into too much detail about the login logic here because
    this book is focused on Ext JS and not PHP.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建这个应用程序的登录页面开始。在这里，我们将使用PHP进行简单的实现。我们将创建`login.php`和`logout.php`。然而，我们不会在这里过多地详细介绍登录逻辑，因为这本书的重点是Ext
    JS而不是PHP。
- en: Create the variable you will input in SQL and then just pull the user information
    from the database.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL中创建你将要输入的变量，然后只需从数据库中提取用户信息。
- en: The source code is very long, so please go to the source file to view the `login.php`
    file from the `01_making_the_login` folder and `logout.php` from `01_making_the_login`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码非常长，所以请前往源文件查看`01_making_the_login`文件夹中的`login.php`文件和`01_making_the_login`中的`logout.php`。
- en: 'Store the user data for the session with the key `USERINFO`. Again, to be able
    to perform a login check, change `index.html` to `index.php` and run the login
    check. Apart from the PHP code at the beginning, it''s the same as `index.html`
    (source file: `01_making_the_login/index.php`):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用键`USERINFO`将用户数据存储在会话中。再次，为了能够执行登录检查，将`index.html`改为`index.php`并运行登录检查。除了开头的PHP代码外，它与`index.html`相同（源文件：`01_making_the_login/index.php`）：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating the MyAccount form
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建MyAccount表单
- en: Now, let's build the forms that will deploy to various screens. First comes
    `MyAccount`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们构建将要部署到各种屏幕上的表单。首先是`MyAccount`。
- en: Add the form panel to the temporary panel you built. Don't install the form
    directly onto the `Screen` panel—there is a reason to this. You will make relationships
    between the list and the details, so there are times when there are numerous panels
    existing inside the screen.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 将表单面板添加到你构建的临时面板中。不要直接将表单安装到`Screen`面板上——这样做有原因。你将建立列表和详情之间的关系，因此有时屏幕内会有多个面板存在。
- en: It just so happens that `MyAccount` only needs one screen. If the number of
    methods increases, there is a chance that you will need multiple panels. You might
    need a panel to run the input verification. But it's difficult to say for sure
    at this point. So, it is necessary to make the **screen layout** into a **card
    layout** which will make it easier to handle multiple screens.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 恰好`MyAccount`只需要一个屏幕。如果方法数量增加，你可能会需要多个面板。你可能需要一个面板来运行输入验证。但在此阶段很难确定。因此，有必要将**屏幕布局**改为**卡片布局**，这将使处理多个屏幕变得更加容易。
- en: 'First, let''s specify the screen layout to be a card layout. In the `MyAccount.js`
    script at the bottom of the `view` directory you made before, create a `MyAccount`
    directory and move into it. The hierarchy of the directory will change, so let''s
    modify the class name as well (source file: `02_making_the_account_form/app/view/myaccount/MyAccount.js`):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们指定屏幕布局为一个卡片布局。在你之前在`view`目录底部创建的`MyAccount.js`脚本中，创建一个`MyAccount`目录并进入它。目录的层次结构将发生变化，因此我们还需要修改类名（源文件：`02_making_the_account_form/app/view/myaccount/MyAccount.js`）：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s modify the class name as follows (Source file: `02_making_the_account_form/app/controller/myaccount/MyAccount.js`):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式修改类名（源文件：`02_making_the_account_form/app/controller/myaccount/MyAccount.js`）：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the same way, edit the controllers of `Quotation`, `Bill`, and `Dashboard`
    and views. By doing this, the application should now be working.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，编辑`Quotation`、`Bill`和`Dashboard`的控制器和视图。通过这样做，应用程序现在应该可以工作了。
- en: 'Because the package name has changed, let''s modify the `Application.js` controller
    settings accordingly (source file: `02_making_the_account_form/app/Application.js`):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于包名已更改，让我们相应地修改`Application.js`控制器设置（源文件：`02_making_the_account_form/app/Application.js`）：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Also, the view name has changed, so we have to modify that as well (source
    file: `02_making_the_account_form/app/view/Viewport.js`):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，视图名称已更改，因此我们也必须修改它（源文件：`02_making_the_account_form/app/view/Viewport.js`）：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now with this, we're free to make the form. To begin with, we want to create
    the form panel and put it into `MyAccount`, but we want to perform a data abstraction
    of the form panel. So, at the beginning let's do just that and create a simple
    inheritance.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有了这个，我们可以自由地创建表单。首先，我们想要创建表单面板并将其放入`MyAccount`，但我们想要对表单面板进行数据抽象。所以，一开始我们就这样做，创建一个简单的继承。
- en: 'In the same way as we created the class for `app/panel/Screen.js`, we''ll create
    a class that''s inherited from `Ext.form.Panel` (refer to the source file: `02_making_the_account_form/app/form/Panel.js`).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们为`app/panel/Screen.js`创建类的方式相同，我们将创建一个继承自`Ext.form.Panel`的类（参考源文件：`02_making_the_account_form/app/form/Panel.js`）。
- en: 'We have created the inheritance. Let''s make the `edit` panel (source file:
    `02_making_the_account_form/app/view/myaccount/Edit.js`):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了继承。让我们创建一个`edit`面板（源文件：`02_making_the_account_form/app/view/myaccount/Edit.js`）：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s perform the implementation inside the form a little later. First, let''s
    embed this panel (source file: `02_making_the_account_form/app/view/myaccount/MyAccount.js`):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会在表单内进行实现。首先，让我们嵌入这个面板（源文件：`02_making_the_account_form/app/view/myaccount/MyAccount.js`）：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Make sure that there are no errors coming from the browser. The appearance does
    not change, so it might not be so interesting presently.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 确保浏览器没有错误。外观没有变化，所以目前可能不太有趣。
- en: At the moment, it looks good on the display, but you might have noticed that
    a **CT** error has arisen. This is because we changed the name earlier. Let's
    fix this now.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，它在显示上看起来不错，但你可能已经注意到出现了**CT**错误。这是因为我们之前更改了名称。现在让我们修复它。
- en: 'The `MyAccount` class (`view` and `controller`) package name has changed, so
    go ahead and amend the following class names (check the source file for reference):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyAccount`类（`view`和`controller`）的包名已更改，因此请继续修改以下类名（参考源文件）：'
- en: '`02_making_the_account_form/ct/myaccount/view.js`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`02_making_the_account_form/ct/myaccount/view.js`'
- en: '`02_making_the_account_form/ct/myaccount/app.js`'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`02_making_the_account_form/ct/myaccount/app.js`'
- en: Along with this, you should also fix the other CT error.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，你也应该修复其他CT错误。
- en: Now, let's start to build the main form. When you define the classes, you can
    define them using the configuration options, but let's set it up using `Ext.apply`
    inside `initComponent`. If we set up the configuration with `initComponent`, we
    can set a more flexible variety of behaviors to the component when we create it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始构建主表单。当你定义类时，你可以使用配置选项来定义它们，但让我们在`initComponent`中使用`Ext.apply`来设置。如果我们使用`initComponent`设置配置，我们可以在创建组件时设置更灵活的行为。
- en: 'The following code is really similar to the code that comes out of **Sencha
    Architect** (source file: `02_making_the_account_form/app/view/myaccount/Edit.js`):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码与**Sencha Architect**生成的代码非常相似（源文件：`02_making_the_account_form/app/view/myaccount/Edit.js`）：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you run the preceding code, it will look like the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行前面的代码，它将看起来像以下截图：
- en: '![Creating the MyAccount form](img/5446OS_03_01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![创建MyAccount表单](img/5446OS_03_01.jpg)'
- en: 'We make forms in this manner. Try adjusting it for yourself if you think up
    a more complex or attractive form. You can find more complex layouts published
    on *Sencha Ext samples*: [http://dev.sencha.com/deploy/ext-4.0.0/examples/#sample-13](http://dev.sencha.com/deploy/ext-4.0.0/examples/#sample-13).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以这种方式创建表单。如果你想到一个更复杂或更有吸引力的表单，可以尝试调整它。你可以在*Sencha Ext samples*上找到更多复杂的布局：[http://dev.sencha.com/deploy/ext-4.0.0/examples/#sample-13](http://dev.sencha.com/deploy/ext-4.0.0/examples/#sample-13)。
- en: 'At the moment, we see just three fields: **email:**, **firstname,** and **lastname:**.
    These are not usually modified often, but as we develop the application, other
    fields that require more modification might need to be added. In such occasions,
    you can add new fields in `myaccount.Edit`.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只看到三个字段：**email:**，**firstname**，和**lastname:**。这些字段通常不会经常修改，但随着我们开发应用程序，可能需要添加更多需要修改的字段。在这种情况下，你可以在`myaccount.Edit`中添加新字段。
- en: Creating the Quotation form
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建报价表单
- en: Let's continue and create forms for `Quotation` and `Bill`. In the same way
    as before, first set up the card layout in the `Screen` panel.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建`Quotation`和`Bill`的表单。与之前一样，首先在`Screen`面板中设置卡片布局。
- en: 'In the same way as with `view/myaccount/MyAccount.js`, in the `Quotation` class
    we will add the `Edit` and `List` screens (source file: `03_making_the_quotation_form/app/view/quotation/Quotation.js`):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与`view/myaccount/MyAccount.js`中的方式相同，在`Quotation`类中，我们将添加`Edit`和`List`屏幕（源文件：`03_making_the_quotation_form/app/view/quotation/Quotation.js`）：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Unlike the previous occasion, now two cards exist. These are `List` and `Edit`.
    You will implement `List` in a later chapter. Here, let's implement `Edit`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的情况不同，现在存在两张卡片。这些是`List`和`Edit`。你将在后面的章节中实现`List`。在这里，让我们实现`Edit`。
- en: 'The only thing is, if you don''t create a class, then `requires` won''t be
    able to read it. So, make a `List` class in the following way (source file: `03_making_the_quotation_form/app/view/quotation/List.js`):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，如果你不创建一个类，那么`requires`将无法读取它。所以，按照以下方式创建一个`List`类（源文件：`03_making_the_quotation_form/app/view/quotation/List.js`）：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, let''s create `Edit`. It is a bit of a long process, so let''s break
    it up into sections and go through each part (source file: `03_making_the_quotation_form/app/view/quotation/Edit.js)`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建`Edit`。这是一个相当长的过程，所以让我们将其分解成几个部分，并逐一介绍（源文件：`03_making_the_quotation_form/app/view/quotation/Edit.js`）：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We have made an empty `MyApp.view.quotation.Edit` component and from now, we'll
    begin to implement the inside of the `initComponent` method. As we saw before,
    this will make the component more flexible.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个空的`MyApp.view.quotation.Edit`组件，从现在起，我们将开始实现`initComponent`方法的内部。正如我们之前看到的，这将使组件更加灵活。
- en: Let's break this up into `Store`, `field` and `grid`, and `TopToolbar`. The
    following sections give the code that should be inserted into their specific points.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将它分解为`Store`、`field`和`grid`以及`TopToolbar`。以下各节提供了应插入到其特定点的代码。
- en: Store
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Store
- en: The `Store` component is where the data will be stored locally in the browser.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`Store`组件是数据将在浏览器中本地存储的地方。'
- en: 'Let''s create the `Store` component now. Implement the following code into
    the `initComponent` method inside the `MyApp.view.quotation.Edit` class (source
    file: `03_making_the_quotation_form/app/view/quotation/Edit.js`):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在创建`Store`组件。将以下代码实现到`MyApp.view.quotation.Edit`类中的`initComponent`方法（源文件：`03_making_the_quotation_form/app/view/quotation/Edit.js`）：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Generate `customerStore` and `itemStore`. `customerStore` is made for the combobox
    and `itemStore` is made for the `grid` panel. Both stores are temporarily installed.
    That is why we're using `Ext.applyIf`. Let's modify this, so at a later stage
    you can acquire the data via Ext Direct.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 生成`customerStore`和`itemStore`。`customerStore`是为组合框制作的，而`itemStore`是为`grid`面板制作的。这两个存储库暂时安装。这就是为什么我们使用`Ext.applyIf`。让我们修改它，以便在以后的阶段，你可以通过Ext
    Direct获取数据。
- en: The field and grid components
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字段和网格组件
- en: In this section, we will build the `field` components (in this case, it means
    the combobox along the top of the screen), and the `grid` panel that will appear
    below it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建`field`组件（在这种情况下，这意味着屏幕顶部的组合框），以及将出现在其下方的`grid`面板。
- en: 'It''s a little bit long, but write the following after the previous step when
    we defined the `Store` component (source file: `03_making_the_quotation_form/app/view/quotation/Edit.js`):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点长，但在我们定义`Store`组件的步骤之后编写以下代码（源文件：`03_making_the_quotation_form/app/view/quotation/Edit.js`）：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you lay out the field, you are laying out the `grid` panel. The point to
    remember here is that the `grid` panel is set up with the plugin `Ext.grid.plugin.CellEditing`.
    In order to open various cells to edit, we have set up the editor key in the column
    settings. The `textfield` form field is used by default, but you want just numerical
    inputs in `qty` and `price`, so we are using `numberfield` for those.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你布置了字段，你就是在布置`grid`面板。这里要记住的是，`grid`面板是通过插件`Ext.grid.plugin.CellEditing`设置的。为了打开各种单元格进行编辑，我们在列设置中设置了编辑键。默认情况下使用`textfield`表单字段，但你在`qty`和`price`中只想输入数值，所以我们使用`numberfield`。
- en: TopToolbar
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TopToolbar
- en: In this section we will create the `Save` button that will go on the top toolbar
    in our application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个将出现在我们应用程序顶部工具栏中的`Save`按钮。
- en: 'To do this, write the following code after the code we wrote in the previous
    step to display the `Save` button (source file: `03_making_the_quotation_form/app/view/quotation/Edit.js`):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，在我们在上一步中编写的代码之后编写以下代码以显示`Save`按钮（源文件：`03_making_the_quotation_form/app/view/quotation/Edit.js`）：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We will install the `Save` button. Now, we want to display this button as quickly
    as possible, but at the moment nothing is being displayed. This is because in
    the card layout, in the `Quotation` view's active item, `0` will display the `List`
    screen and `1` will display `Edit`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将安装“保存”按钮。现在，我们希望尽可能快地显示此按钮，但到目前为止，没有任何内容被显示。这是因为，在卡片布局中，在“引用”视图的激活项中，`0`将显示“列表”屏幕，而`1`将显示“编辑”。
- en: 'In this state, we can''t perform a component test, so first, let''s begin by
    preparing `view_edit.html` for the CT (source file: `03_making_the_quotation_form/ct/quotation/view_edit.html`).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种状态下，我们无法执行组件测试，所以首先，让我们开始准备CT的`view_edit.html`（源文件：`03_making_the_quotation_form/ct/quotation/view_edit.html`）。
- en: Basically, this does not change much in `view.html`, we're just changing `view.js`
    being read by `<script>` in `view_edit.js`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这不会在`view.html`中改变太多，我们只是在`view_edit.js`中读取`view.js`。
- en: 'Now, the `Quotation` view''s package name has not been amended, so you can
    correct this now. For the source code, please see the source file: `03_making_the_quotation_form/ct/quotation/view_edit.js`.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`Quotation`视图的包名尚未修改，因此你现在可以更正它。对于源代码，请参阅源文件：`03_making_the_quotation_form/ct/quotation/view_edit.js`。
- en: 'When you generate `MyApp.view.quotation.Quotation`, in the configuration options
    add `activeItem: 1`. By doing this, `Edit` will be displayed from the start. Of
    course the functions have not been implemented, so items will not be added or
    automatically calculated.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '当你生成`MyApp.view.quotation.Quotation`时，在配置选项中添加`activeItem: 1`。这样做，`Edit`将从一开始就显示。当然，功能尚未实现，因此项目不会被添加或自动计算。'
- en: 'Here we are adding a new component, so in order to apply the mapping for the
    new component to `bootstrap.js`, let''s execute `sencha app build`. After executing
    Sencha app build and the mapping has successfully been applied to `bootstrap.js`,
    the following screen should appear:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了一个新组件，因此为了将新组件的映射应用到`bootstrap.js`，让我们执行`sencha app build`。在执行Sencha
    app build并成功将映射应用到`bootstrap.js`之后，应该出现以下屏幕：
- en: '![TopToolbar](img/5446OS_03_02.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![TopToolbar](img/5446OS_03_02.jpg)'
- en: Creating the Bill form
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建账单表单
- en: Following on, let's make the form for invoices. The contents of the `Bill` and
    `Quotation` forms are mostly the same.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们制作发票表单。`Bill`和`Quotation`表单的内容大部分相同。
- en: This will also need to describe finer details such as payment date. So, regarding
    the structure of the database, the ID can be linked so that a quotation can raise
    an event for the bill.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这还需要描述更详细的细节，例如付款日期。因此，关于数据库的结构，ID可以链接，以便报价可以为一个账单引发事件。
- en: 'Now, let''s quickly begin by making the card layout in the same way as for
    `Quotation` (source file: `04_making_the_bill_form/app/view/bill/Bill.js`):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速开始以与“引用”相同的方式制作卡片布局（源文件：`04_making_the_bill_form/app/view/bill/Bill.js`）：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next, let's make a temporary empty `List` component to compensate for what we
    wrote previously and avoid receiving an error.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们制作一个临时的空`List`组件来弥补我们之前写的，避免收到错误。
- en: 'The next class we are going to make is really similar to the `dashboard.Dashboard`
    class. So, please use that as reference while you code and watch out for the following
    point (source file: `04_making_the_bill_form/app/view/bill/List.js`):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要制作的类与`dashboard.Dashboard`类非常相似。所以，请在编码时参考它，并注意以下要点（源文件：`04_making_the_bill_form/app/view/bill/List.js`）：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Also, let's implement the empty `initComponent` for the same reason as before
    for the `List` component.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，让我们为了与之前相同的原因实现空的`initComponent`，即为了`List`组件。
- en: 'Then, at the end, make `Edit` in the same way as `Quotation` (source file:
    `04_making_the_bill_form/app/view/bill/Edit.js`).'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在最后，以与“引用”相同的方式在“编辑”中进行“编辑”（源文件：`04_making_the_bill_form/app/view/bill/Edit.js`）。
- en: Again, this class is very similar to the `MyApp.view.quotation.Edit` class,
    which we previously made.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这个类与之前我们制作的`MyApp.view.quotation.Edit`类非常相似。
- en: 'Watch out for the following points and build this class in the same way:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下要点，并以相同的方式构建此类：
- en: '`className: MyApp.view.bill.Edit`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`className: MyApp.view.bill.Edit`'
- en: '`aliasName: widget.myapp-quotation-edit`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aliasName: widget.myapp-quotation-edit`'
- en: '`itemId: screen-quotation-edit`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`itemId: screen-quotation-edit`'
- en: 'You have created the view, so now it''s time to implement the various controllers.
    Instead of having one controller to manage `Quotation` and `Bill` that are separated
    into `List` and `Edit`, it''s better to prepare controllers for each one (source
    file: `04_making_the_bill_form/app/controller/quotation/List.js`):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经创建了视图，现在是时候实现各种控制器了。与其有一个控制器来管理分开成`List`和`Edit`的`Quotation`和`Bill`，不如为每个单独准备控制器（源文件：`04_making_the_bill_form/app/controller/quotation/List.js`）：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Let's create the rest of the controllers listed as follows in exactly the same
    way (only the class names are different).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以完全相同的方式创建以下列出的其余控制器（只有类名不同）。
- en: '(Source file: `04_making_the_bill_form/app/controller/quotation/Edit.js`)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （源文件：`04_making_the_bill_form/app/controller/quotation/Edit.js`）
- en: '(Source file: `04_making_the_bill_form/app/controller/bill/List.js`)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （源文件：`04_making_the_bill_form/app/controller/bill/List.js`）
- en: '(Source file: `04_making_the_bill_form/app/controller/bill/Edit.js`)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （源文件：`04_making_the_bill_form/app/controller/bill/Edit.js`）
- en: 'In order for the preceding controllers to be read, add a postscript into `app/Application.js`
    (source file: `04_making_the_bill_form/app/Application.js`).'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让前面的控制器可以被读取，请在`app/Application.js`中添加一个后缀（源文件：`04_making_the_bill_form/app/Application.js`）。
- en: It's worth checking now that no errors are being displayed by accessing `index.php`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 值得检查的是，通过访问`index.php`没有错误显示。
- en: Managing dirty and undirty apps
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理脏和干净的应用程序
- en: Naturally, it's good if the saving process happens every time you press the
    **Save** button.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 自然地，每次按下**保存**按钮时发生保存过程是很好的。
- en: However, if possible, wouldn't you prefer to have the **Save** button available
    only when changes have been made?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果可能的话，您是否希望仅在更改已被做出时才提供**保存**按钮？
- en: Here, we will implement the logic into the controller that will judge whether
    or not changes have been made after an input.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将实现逻辑到控制器中，以判断输入后是否已更改。
- en: MyAccount
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MyAccount
- en: First, we will implement a simple form from `MyAccount`. But, before that, `Quotation`
    and `Bill` separated the controller, but we didn't make the change in `MyAccount`!
    Let's separate it quickly and add it to `app/Application.js`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将从`MyAccount`实现一个简单的表单。但是，在此之前，`Quotation`和`Bill`已经分开控制器，但我们没有在`MyAccount`中做出更改！让我们快速将其分开并添加到`app/Application.js`中。
- en: Using the `MyApp.controller.bill.Edit` class as reference, let's go ahead and
    make the `MyApp.controller.myaccount.Edit` class.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以`MyApp.controller.bill.Edit`类为参考，让我们继续创建`MyApp.controller.myaccount.Edit`类。
- en: 'Apart from the class name, it''s exactly the same process (source file: `05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 除了类名之外，过程完全相同（源文件：`05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`）。
- en: After you have finished building the previous class, let's add the `myaccount.Edit`
    controller to the controller property of `app/Application.js`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在您完成构建前面的类之后，让我们将`myaccount.Edit`控制器添加到`app/Application.js`的控制器属性中。
- en: 'Now add it to `app.js` in the CT directory in the same way (source file: `05_management_of_dirty_and_undirty_myaccount/ct/myaccount/app.js`).'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，以相同的方式将其添加到CT目录中的`app.js`（源文件：`05_management_of_dirty_and_undirty_myaccount/ct/myaccount/app.js`）。
- en: 'Now, it should be able to run with a controller in CT. First, set up the following
    event list to fire during the component test:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，它应该能够在CT中运行，并带有控制器。首先，设置以下事件列表，在组件测试期间触发：
- en: '`myapp-show` (displays the component)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myapp-show`（显示组件）'
- en: '`myapp-hide` (hides the component)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myapp-hide`（隐藏组件）'
- en: '`myapp-dirty` (fires when information inside the form has been changed)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myapp-dirty`（当表单内的信息被更改时触发）'
- en: '`myapp-undirty` (fires when changed information has been recorded or information
    has been reverted back to the previous state)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myapp-undirty`（当更改的信息被记录或信息被回滚到之前的状态时触发）'
- en: 'Before anything else, in relation to `myapp-show` and `myapp-hide`, we need
    to pass the event to the `List` and `Edit` classes with `MyApp.controller.myaccount.MyAccount`
    (source file: `05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/MyAccount.js`):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在做任何事情之前，关于`myapp-show`和`myapp-hide`，我们需要通过`MyApp.controller.myaccount.MyAccount`将事件传递给`List`和`Edit`类（源文件：`05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/MyAccount.js`）：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The main point is to set up `refs` and capture the `editView`. Next, define
    the controller for `Edit` (source file: `05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 主要目的是设置`refs`并捕获`editView`。接下来，定义`Edit`的控制器（源文件：`05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`）：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we need to acquire the `field` event. Acquire the field with component
    query and then set up the event listener (source file: `05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`):'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要获取 `field` 事件。通过组件查询获取字段，然后设置事件监听器（源文件：`05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`）：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add each name property to the `View` field (source file: `05_management_of_dirty_and_undirty_myaccount/app/view/myaccount/Edit.js`):'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个名称属性添加到 `View` 字段中（源文件：`05_management_of_dirty_and_undirty_myaccount/app/view/myaccount/Edit.js`）：
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If we input something in text, it is output as a log in the console. We want
    to define the similar processing to the other classes, so move the following logic
    into the `Abstract` class and modify it so that it can be called (source file:
    `05_management_of_dirty_and_undirty_myaccount/app/controller/Abstract.js`):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在文本框中输入某些内容，它将在控制台输出日志。我们希望定义与其他类类似的处理，因此将以下逻辑移动到 `Abstract` 类中，并修改它以便可以调用（源文件：`05_management_of_dirty_and_undirty_myaccount/app/controller/Abstract.js`）：
- en: '[PRE21]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And let''s implement in the same way for `Edit.js` (source file: `05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `Edit.js` 中以相同的方式实现（源文件：`05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`）：
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`setChangeFieldEvents` is made so that we can set up other events besides `textfield`.
    `setChangeFieldEvents` can also support the times when you want to use it for
    other fields such as `combobox`. The fact that the details of the text were modified
    means you could handle it with the implementations made so far.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`setChangeFieldEvents` 是为了能够设置除了 `textfield` 之外的其他事件。`setChangeFieldEvents`
    还可以支持你想用于其他字段（如 `combobox`）的情况。文本细节被修改的事实意味着你可以使用到目前为止实现的实现来处理它。'
- en: So next, let's check if the content really did change. This means implementation
    inside the method `onChangeField` is successful.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，接下来，让我们检查内容是否真的发生了变化。这意味着在 `onChangeField` 方法中的实现是成功的。
- en: 'If the content of the component recorded by the `MyApp.controller.myaccount.Edit`
    controller''s `init` method is modified, the `onChangeField` method is implemented
    (source file: `05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`).'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `MyApp.controller.myaccount.Edit` 控制器的 `init` 方法记录的组件内容被修改，则实现 `onChangeField`
    方法（源文件：`05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`）。
- en: Use `getFieldValues` in order to judge whether there were changes to the field.
    `Ext.Object.getKeys` will send back an array. Consequently, with this single line
    you can judge whether changes have been made to the content.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `getFieldValues` 来判断字段是否有变化。`Ext.Object.getKeys` 将返回一个数组。因此，通过这一行代码，你可以判断内容是否已更改。
- en: If there is a change, `myapp-dirty` will be fired and if it reverts to its original
    state, the `myapp-undirty` event will be fired.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有变化，将触发 `myapp-dirty` 事件，如果它恢复到原始状态，将触发 `myapp-undirty` 事件。
- en: 'So, let''s add the logic to make the toolbar button available for `onDirty`
    and unavailable for `onUndirty` to finish the implementation of `MyAccount` (source
    file: `05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们添加逻辑，使工具栏按钮在 `onDirty` 时可用，在 `onUndirty` 时不可用，以完成 `MyAccount` 的实现（源文件：`05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`）：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s add `disabled` to the `Save` button settings. During the CT error, `onShow`
    does not work. Also, you should conduct the button''s initialization when it is
    `onHide` (source file: `05_management_of_dirty_and_undirty_myaccount/app/view/myaccount/Edit.js`):'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `Save` 按钮的设置中添加 `disabled`。在 CT 错误期间，`onShow` 不起作用。此外，当按钮处于 `onHide` 状态时，你应该进行按钮的初始化（源文件：`05_management_of_dirty_and_undirty_myaccount/app/view/myaccount/Edit.js`）：
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Finally, if you can muster enough energy, implement it so that when the reset
    button is pressed, the reset method is called from `Ext.form.Basic`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你能聚集足够的能量，实现它，以便当按下重置按钮时，从 `Ext.form.Basic` 调用重置方法。
- en: The Quotation form
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Quotation` 表单'
- en: The `Quotation` form is mostly the same as `Bill` and `MyAccount`, but there
    is one big difference—there is a grid inside the form panel.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`Quotation` 表单与 `Bill` 和 `MyAccount` 大致相同，但有一个很大的不同——表单面板中有一个网格。'
- en: At first glance, the store that is configured to the `grid` panel looks as though
    it will communicate directly with the server, but this is not the case. To the
    very end, this form panel handles fields, so it doesn't handle the grid directly
    and there is no need to separate form data sending and grid data sending.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，配置到 `grid` 面板的存储似乎将直接与服务器通信，但这并非事实。到最后，这个表单面板处理字段，所以它不直接处理网格，因此不需要分别发送表单数据和网格数据。
- en: Then how do we solve this? The answer is to hand it a hidden field and make
    it save the grid data in the form of JSON. So, the grid store is fine to be left
    as a **MemoryStore**.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何解决这个问题呢？答案是提供一个隐藏字段，并使其以 JSON 格式保存网格数据。所以，网格存储可以保持为 **MemoryStore**。
- en: First, implement it to the same point as `MyAccount`. Because `Quotation` will
    hold a list, add to it so that `refs` can also acquire a list view.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将其实现到与 `MyAccount` 相同的点。因为 `Quotation` 将会保存一个列表，所以添加到其中，以便 `refs` 也能获取到列表视图。
- en: 'This source code is very similar to the implementation from the previous step
    of the following classes:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这段源代码与以下类的前一步实现非常相似：
- en: '`MyApp.controller.myaccount.MyAccount`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MyApp.controller.myaccount.MyAccount`'
- en: '`MyApp.controller.myaccount.Edit`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MyApp.controller.myaccount.Edit`'
- en: 'Try implementing for `Quotation` remembering what we did with the source code
    from the previous classes. Use the following source files for reference if you
    get stuck:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试为 `Quotation` 实现，记住我们从之前的类中使用的源代码。如果你遇到困难，请参考以下源文件：
- en: '`06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Quotation.js`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Quotation.js`'
- en: '`06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`'
- en: 'In order to check the application you have implemented so far, add a CT to
    check `Edit` (source file: `06_management_of_dirty_and_undirty_quotation/ct/quotation/app_edit.html`).'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查你迄今为止实施的应用，添加一个 CT 来检查 `Edit`（源文件：`06_management_of_dirty_and_undirty_quotation/ct/quotation/app_edit.html`）。
- en: 'We''ll make this anew in the CT directory subsidiary. The content is mostly
    the same as for `app.html`, but we will change what will be read from `app.js`
    to `app_edit.js` (source file: `06_management_of_dirty_and_undirty_quotation/ct/quotation/app_edit.js`).'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 CT 目录的子目录中重新创建这个文件。内容与 `app.html` 大致相同，但我们将会将 `app.js` 中的读取内容更改为 `app_edit.js`（源文件：`06_management_of_dirty_and_undirty_quotation/ct/quotation/app_edit.js`）。
- en: This is also almost the same as `app.js` on the same tier, but we'll add an
    `Edit` controller to controllers and `activeItem:1` to `QuotationView` controller's
    configuration option.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎与同一层的 `app.js` 相同，但我们将在控制器中添加一个 `Edit` 控制器，并将 `activeItem:1` 添加到 `QuotationView`
    控制器的配置选项中。
- en: 'The main points to remember are to add `quotation.Edit` to the controller and
    set `activeItem` to `1` and display the `Edit` panel from the beginning. So, like
    we touched on initially, take the store data that''s configured in `grid` and
    make it into JSON, then create the logic to be stored in the `Hidden` field. First,
    we need to lay out the `Hidden` field in `view` (source file: `06_management_of_dirty_and_undirty_quotation/app/view/quotation/Edit.js`):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的主要点是向控制器添加 `quotation.Edit` 并将 `activeItem` 设置为 `1`，从开始就显示 `Edit` 面板。所以，就像我们最初提到的，将配置在
    `grid` 中的存储数据转换为 JSON，然后创建要存储在 `Hidden` 字段中的逻辑。首先，我们需要在 `view` 中布局 `Hidden` 字段（源文件：`06_management_of_dirty_and_undirty_quotation/app/view/quotation/Edit.js`）：
- en: '[PRE25]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this state, the data is fixed and cannot obtain an event that has specifically
    changed. Before this, let's implement the addition and deletion of items and event
    editing. There are various things we need to do to achieve that.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种状态下，数据是固定的，无法获取到特定更改的事件。在此之前，让我们实现项目的添加和删除以及事件编辑。为了实现这一点，我们需要做很多事情。
- en: 'First is to change the `Store` component into a class. You just need to take
    what is already generated inside `view` and make it into an external class (source
    file: `06_management_of_dirty_and_undirty_quotation/app/store/Customer.js`):'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是将 `Store` 组件改为一个类。你只需要将 `view` 内部已经生成的部分变成一个外部类（源文件：`06_management_of_dirty_and_undirty_quotation/app/store/Customer.js`）：
- en: '[PRE26]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Also, change the following (source file: `06_management_of_dirty_and_undirty_quotation/app/store/QuotationItem.js`):'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 还要更改以下内容（源文件：`06_management_of_dirty_and_undirty_quotation/app/store/QuotationItem.js`）：
- en: '[PRE27]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In order to use this store class, add the setting to the `MyApp.controller.quotation.Edit`
    class.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用这个存储类，将设置添加到 `MyApp.controller.quotation.Edit` 类中。
- en: 'We''ll add `Customer` and `QuotationItem` to the `MyApp.controller.quotation.Edit`
    class''s `stores` property (source file: `06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`).'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把 `Customer` 和 `QuotationItem` 添加到 `MyApp.controller.quotation.Edit` 类的 `stores`
    属性中（源文件：`06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`）。
- en: 'Because we have created `MyApp.store.Customer` and `MyApp.store.QuotationItem`
    outside of `view`, we need to adjust the code in `view` (source file: `06_management_of_dirty_and_undirty_quotation/app/view/quotation/Edit.js`):'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在`view`外部创建了`MyApp.store.Customer`和`MyApp.store.QuotationItem`，我们需要调整`view`中的代码（源文件：`06_management_of_dirty_and_undirty_quotation/app/view/quotation/Edit.js`）：
- en: '[PRE28]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: There is a reason why we externalized `store`. This is because if we configure
    the `store` class in stores with **Ext JS MVC architecture**, the `getXXXXStore`
    method is generated and we're then able to access the `store` component from the
    controller. `XXXX` is the `store` class name.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`store`外部化的原因在于，如果我们使用**Ext JS MVC架构**配置`store`类，则会生成`getXXXXStore`方法，然后我们可以从控制器中访问`store`组件。`XXXX`是`store`类的名称。
- en: 'Next, we will make modifications to monitor changes to `hidden` from the controller
    and change the initial values to `hidden` (source file: `06_management_of_dirty_and_undirty_quotation/app/view/quotation/Edit.js`):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将修改以监控控制器中`hidden`的变化，并将初始值更改为`hidden`（源文件：`06_management_of_dirty_and_undirty_quotation/app/view/quotation/Edit.js`）：
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Also, change the following code (source file: `06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`):'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，更改以下代码（源文件：`06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`）：
- en: '[PRE30]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, we can implement what operates the grid. First define the event handler
    for the button (source file: `06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`).'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以实现操作网格的功能。首先定义按钮的事件处理器（源文件：`06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`）。
- en: 'Implement `onAddItem` and `onRemoveItem`. Here it will become possible to add
    items and delete items on the grid (source file: `06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`):'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`onAddItem`和`onRemoveItem`。在这里，将能够在网格中添加和删除项目（源文件：`06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`）：
- en: '[PRE31]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The adding process is extremely simple, it's just using the `Add` method from
    the store and adding records. However, the deletion process is not just simply
    deleting.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 添加过程非常简单，只是使用存储的`Add`方法添加记录。然而，删除过程不仅仅是简单地删除。
- en: It has been set so that when deletion occurs, the next item from the one that
    was selected comes into being, and that item is selected. By doing this, you can
    keep deleting just by continuing to click on the **Delete** button. You should
    think of this as a little bonus feature!
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 已经设置为当发生删除时，从所选项目之后的下一个项目变为当前项目，并选择该项目。通过这样做，您可以通过继续点击**删除**按钮来继续删除。您应该将此视为一个小型附加功能！
- en: 'So, now you can add and delete records on the grid. Next, we will implement
    the essential part that turns the store data into JSON and stores it in `hidden`
    (source file: `06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`):'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在您可以在网格中添加和删除记录。接下来，我们将实现将存储数据转换为JSON并将其存储在`hidden`中的关键部分（源文件：`06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`）：
- en: '[PRE32]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: When the grid data is altered, `update`, `add`, and `remove` occur as a separate
    events. You need to define these event handlers. The process is common, so first
    store the function object in `updateGridData` and then use it.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当网格数据被修改时，`update`、`add`和`remove`会作为单独的事件发生。您需要定义这些事件处理器。这个过程是通用的，所以首先在`updateGridData`中存储函数对象，然后使用它。
- en: Again implement a bonus function for the update event. When the content is modified,
    multiply `qty` and `price` and then it will place the value automatically inside
    `sum`. This time it's made so you can't edit `sum`, it's set to input after calculating
    automatically. You can check that it works at `ct/quotation/app_edit.html`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 再次实现更新事件的附加功能。当内容被修改时，将`qty`和`price`相乘，然后它会自动将值放入`sum`中。这次它被设置为不能编辑`sum`，在自动计算后设置为输入。您可以在`ct/quotation/app_edit.html`中检查它是否工作。
- en: 'Until now we have been defining stores in View. However, because we changed
    the stores into class files, you might have noticed that `ct/ quotation/view_edit.html`
    isn''t working properly. At the end of `Quotation`, let''s make modifications
    so that the CT will work normally (source file: `06_management_of_dirty_and_undirty_quotation/ct/quotation/view_edit.js`):'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在视图中定义存储。然而，由于我们将存储改为类文件，您可能已经注意到`ct/quotation/view_edit.html`没有正常工作。在`Quotation`的末尾，让我们进行修改，以便CT可以正常工作（源文件：`06_management_of_dirty_and_undirty_quotation/ct/quotation/view_edit.js`）：
- en: '[PRE33]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Because there is no controller, the creation of the `store` component will not
    occur. Due to this, if you define and generate it yourself, it will be linked
    with `storeId` and then displayed. Of course, nothing will happen if you press
    any of the buttons displayed because there is no controller.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 因为没有控制器，所以不会创建`store`组件。因此，如果你自己定义和生成它，它将与`storeId`链接然后显示。当然，如果你按下显示的任何按钮，也不会发生任何事情，因为没有控制器。
- en: The implementation of `Quotation` has been longer and more complicated than
    anything preceding it. Next is `Bill`, which is more or less the same implementation.
    Please double-check the complex parts as you go.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`Quotation`的实现比之前的任何内容都要长且复杂。接下来是`Bill`，其实现方式大致相同。请在进行过程中仔细检查复杂部分。'
- en: The Bill form
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 账单表单
- en: As we know, `Bill` is pretty much the same as `Quotation`, but let's continue
    and implement `Bill`. First let's make the `BillItem` store class.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，`Bill`几乎与`Quotation`相同，但让我们继续并实现`Bill`。首先，让我们制作`BillItem`存储类。
- en: 'For `Bill`, it''s only the class name and `StoreId` that differs from `QuotationItem`.
    The rest is the same, so let''s try and code this by ourselves. You can check
    out the following source file if you want something to refer to:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`Bill`，它只与`QuotationItem`的类名和`StoreId`不同。其余的都是相同的，所以让我们尝试自己编写代码。如果你想参考一些源文件，可以查看以下内容：
- en: '`07_management_of_dirty_and_undirty_bill/app/store/BillItem.js`'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`07_management_of_dirty_and_undirty_bill/app/store/BillItem.js`'
- en: 'Next comes the controller setting. Again, the following implementations are
    extremely similar to what came before in `Quotation`, so think back to `MyApp.controller.quotation.Quotation`
    and `MyApp.controller.quotation.Edit` and try it for yourself. If you need help,
    you can find the source files at the following:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是控制器设置。同样，以下实现与之前的`Quotation`部分极其相似，所以回想一下`MyApp.controller.quotation.Quotation`和`MyApp.controller.quotation.Edit`，并亲自尝试。如果你需要帮助，可以在以下位置找到源文件：
- en: '`07_management_of_dirty_and_undirty_bill/app/controller/bill/Bill.js`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`07_management_of_dirty_and_undirty_bill/app/controller/bill/Bill.js`'
- en: '`07_management_of_dirty_and_undirty_bill/app/controller/bill/Edit.js`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`07_management_of_dirty_and_undirty_bill/app/controller/bill/Edit.js`'
- en: 'Finally, lets modifying `view`. In the same way, this is very similar to `EditView`,
    so think back to `MyApp.view.quotation.Edit` and try it for yourself. The following
    is the source file if you need some help:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们修改`view`。同样，这与`EditView`非常相似，所以回想一下`MyApp.view.quotation.Edit`并亲自尝试。如果你需要一些帮助，以下源文件可供参考：
- en: '`07_management_of_dirty_and_undirty_bill/app/view/bill/Edit.js`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`07_management_of_dirty_and_undirty_bill/app/view/bill/Edit.js`'
- en: Let's modify and add the CT. In the same way as the previous step, in order
    to validate the `EditView`, we will build `app.html` and `view.html` afresh for
    `Edit`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改并添加CT。与上一步相同，为了验证`EditView`，我们将为`Edit`重新构建`app.html`和`view.html`。
- en: 'What is happening internally is mostly the same, so please refer to the following
    source files:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 内部发生的事情基本上是相同的，所以请参考以下源文件：
- en: '`07_management_of_dirty_and_undirty_bill/ct/bill/app_edit.html`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`07_management_of_dirty_and_undirty_bill/ct/bill/app_edit.html`'
- en: '`07_management_of_dirty_and_undirty_bill/ct/bill/app_edit.js`'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`07_management_of_dirty_and_undirty_bill/ct/bill/app_edit.js`'
- en: '`07_management_of_dirty_and_undirty_bill/ct/bill/view_edit.html`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`07_management_of_dirty_and_undirty_bill/ct/bill/view_edit.html`'
- en: '`07_management_of_dirty_and_undirty_bill/ct/bill/view_edit.js`'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`07_management_of_dirty_and_undirty_bill/ct/bill/view_edit.js`'
- en: Regarding `app_edit.js`, in order for mutual validation to occur with the controller,
    we install a button on the screen and make an event fire.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`app_edit.js`，为了与控制器进行相互验证，我们在屏幕上安装了一个按钮并触发了一个事件。
- en: If no errors come up with CT or in the whole application, move to the next section.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果CT或整个应用程序没有出现错误，请转到下一部分。
- en: Implementing the read and write processes using Ext Direct
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ext Direct实现读写过程
- en: 'From here, we will start to implement the processing of data being written
    and read concerning the form that we have made this far. We''ll be using Ext Direct
    for this as well. Before we continue with the following implementation, there
    are a few points that you should amend. One of those is to add an **ID** to a
    session when you log in. Let''s amend this now (source file: `08_implement_read_and_write_by_ext_direct/index.php`):'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，我们将开始实现与我们迄今为止制作的表单相关的读写数据处理。我们也将使用Ext Direct来完成这项工作。在我们继续以下实现之前，有一些要点需要你修改。其中之一是在登录时给会话添加一个**ID**。现在让我们修改它（源文件：`08_implement_read_and_write_by_ext_direct/index.php`）：
- en: '[PRE34]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then, store the session ID:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，存储会话ID：
- en: '[PRE35]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Next, add `session_start` to the beginning of the router being used by Ext
    Direct. By doing this, you should be able to access the session with the method
    from each class (source file: `08_implement_read_and_write_by_ext_direct/php/router.php`).'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将 `session_start` 添加到 Ext Direct 所使用的路由器的开头。通过这样做，你应该能够使用每个类（源文件：`08_implement_read_and_write_by_ext_direct/php/router.php`）中的方法访问会话。
- en: '[PRE36]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: You have prepared the way, so now let's go ahead and implement the read process
    for `MyAccount`, `Quotation`, and `Bill`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经准备好了，现在让我们继续实现 `MyAccount`、`Quotation` 和 `Bill` 的读取过程。
- en: Reading data
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取数据
- en: Here, we will start to learn about how the various sections of our application
    will read data.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将开始了解我们应用程序的各个部分如何读取数据。
- en: MyAccount
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MyAccount
- en: To begin with, let's start working on `MyAccount`. Let's create a class for
    Ext Direct. Here we will add the source code for a new PHP.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们开始处理 `MyAccount`。让我们为 Ext Direct 创建一个类。在这里，我们将添加新的 PHP 的源代码。
- en: 'Because the source code is going to be a little long to be added to this text,
    please refer to your source file at: `09_reading_data_myaccount/php/classes/MyAppMyAccount.php`.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 由于源代码将很长，不便添加到本文中，请参考您的源文件：`09_reading_data_myaccount/php/classes/MyAppMyAccount.php`。
- en: Implement the `readForm` method. When a person logs in, it acquires the account
    information from the database by using the saved ID as a reference.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `readForm` 方法。当有人登录时，它通过使用保存的 ID 作为参考从数据库获取账户信息。
- en: I'll hold back from explaining the PHP processing that happens around here.
    The main point is the returned associative array key.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我将暂时不解释这里发生的 PHP 处理。主要点是返回的关联数组键。
- en: The access key is a flag that gives the value `true` or `false` indicating whether
    the form's acquisition was successful or not. The data for each field is configured
    as an associative array in the data key. In order to use this `readForm` in Ext
    Direct, update the `REMOTING_API` output configurations.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 访问键是一个标志，它给出 `true` 或 `false` 的值，表示表单的获取是否成功。每个字段的数配置在数据键中的关联数组中。为了在 Ext Direct
    中使用此 `readForm`，更新 `REMOTING_API` 输出配置。
- en: 'We will add a new class for Direct (source file: `09_reading_data_myaccount/php/config.php`):'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为 Direct 添加一个新的类（源文件：`09_reading_data_myaccount/php/config.php`）：
- en: '[PRE37]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now there is just a bit more preparation to be done. The CT of `MyAccount`
    is not preset to use Ext Direct, so we should amend this. First, add `api.php`
    to the HTML. In order to make our database read `api.php` just before reading
    `app.js`, we need to add the following code (source file: `09_reading_data_myaccount/ct/myaccount/app.html`):'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在还需要做一些更多的准备工作。`MyAccount` 的 CT 没有预设为使用 Ext Direct，因此我们应该修改这一点。首先，将 `api.php`
    添加到 HTML 中。为了使我们的数据库在读取 `app.js` 之前读取 `api.php`，我们需要添加以下代码（源文件：`09_reading_data_myaccount/ct/myaccount/app.html`）：
- en: '[PRE38]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next, add the Ext Direct setting to `app.js`. Let''s add the following code
    after `Ext.Loader.setConfig` (source file: `09_reading_data_myaccount/ct/myaccount/app.js`):'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将 Ext Direct 设置添加到 `app.js` 中。让我们在 `Ext.Loader.setConfig` 之后添加以下代码（源文件：`09_reading_data_myaccount/ct/myaccount/app.js`）：
- en: '[PRE39]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `Ext.app.REMOTING_API.url` file is being created by `api.php` that is being
    read by `app.html`. At this point, the URL path is different for the CT, so you
    should override this. Now we've finally prepared everything, so let's go on and
    set up Ext Direct in the `MyAccount` form (`view`).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ext.app.REMOTING_API.url` 文件是由读取 `app.html` 的 `api.php` 创建的。在这个时候，CT 的 URL
    路径不同，所以你应该覆盖这个。现在我们终于准备好了，所以让我们继续在 `MyAccount` 表单（`view`）中设置 Ext Direct。'
- en: 'We''ll add an `api` property to `MyApp.ciew.myaccount.Edit` (source file: `09_reading_data_myaccount/app/view/myaccount/Edit.js`):'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为 `MyApp.ciew.myaccount.Edit` 添加一个 `api` 属性（源文件：`09_reading_data_myaccount/app/view/myaccount/Edit.js`）：
- en: '[PRE40]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Set up the object in the `config.php` file named `API`. Specify `load` and `submit`
    inside that key. Set up the character string for the `Ext.Direct` function in
    the same way in which both `load` and `submit` methods specified their class name
    in the character string in `Ext.create` and `Ext.define`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为 `API` 的 `config.php` 文件中设置对象。在该键内部指定 `load` 和 `submit`。以与 `load` 和 `submit`
    方法在 `Ext.create` 和 `Ext.define` 中的字符字符串中指定的类名相同的方式设置 `Ext.Direct` 函数的字符字符串。
- en: Now, because `MyAccount` wants to read when it is `onShow` (when it's displayed),
    the `myapp-show` event in the CT doesn't fire. So, let's install this button that
    will cause a pseudo-fire event.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，因为 `MyAccount` 想要在 `onShow`（显示时）读取，所以 CT 中的 `myapp-show` 事件不会触发。所以，让我们安装这个按钮，它将引发一个伪触发事件。
- en: 'In the CT subsidiary directory, because we will add a button that''s necessary
    for the fake reproduction of `myapp-show`, we need to add the following code inside
    the `launch` method (source file: `09_reading_data_myaccount/ct/myaccount/app.js`):'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在CT子目录中，因为我们将添加一个对`myapp-show`的虚假复现必要的按钮，我们需要在`launch`方法内添加以下代码（源文件：`09_reading_data_myaccount/ct/myaccount/app.js`）：
- en: '[PRE41]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We can make the `myapp-show` event mock fire by forcefully implementing a structure
    that automatically calls the `loadIndex` method that we made a while back. So
    if you press the button, you can make the event fire. Now, implement the read
    logic for the form data in the `onShow` method.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过强制实现一个结构来自动调用我们之前制作的`loadIndex`方法来使`myapp-show`事件模拟触发。所以，如果您按下按钮，您可以使事件触发。现在，在`onShow`方法中实现表单数据的读取逻辑。
- en: 'Finally, we will implement the controller behavior after `myapp-show` fires
    (source file: `09_reading_data_myaccount/app/controller/myaccount/Edit.js`):'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`myapp-show`触发后，我们将实现控制器行为（源文件：`09_reading_data_myaccount/app/controller/myaccount/Edit.js`）：
- en: '[PRE42]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: It was a fairly short code. The main point is to acquire the `BasicForm` object
    with `getForm` and to set `trackResetOnLoad` to `true`.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码相当简短。主要点是使用`getForm`获取`BasicForm`对象，并将`trackResetOnLoad`设置为`true`。
- en: We can use `isLoading` to judge a situation when other processing happens while
    it is asynchronously reading. If we call the `load` method, the object we configured
    before in the `API` key is executed and the request is sent to the server. PHP
    acquires the data from the database and sends it back, and the variable is inserted
    automatically in the field. We don't need to go through the process of setting
    the data we receive into the field ourselves.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`isLoading`来判断在异步读取的同时发生其他处理的情况。如果我们调用`load`方法，之前在`API`密钥中配置的对象将被执行，并将请求发送到服务器。PHP从数据库获取数据并将其发送回来，变量会自动插入字段。我们不需要自己设置接收到的数据到字段中。
- en: After the `MyAccount` controller has finished reading the login information,
    as it's the latest user information, the `myapp-undirty` event fires. From then
    on, the **Save** button can now be pressed if there is a modification. Later,
    we'll implement a part that will send the data in reverse when the **Save** button
    is pressed.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MyAccount`控制器完成读取登录信息后，因为它是最新的用户信息，`myapp-undirty`事件被触发。从那时起，如果进行了修改，现在可以按下**保存**按钮。稍后，我们将实现一个部分，当按下**保存**按钮时，将数据反向发送。
- en: The Quotation form
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用表单
- en: Now let's implement the read action in for the `Quotation` form. First, set
    up the Ext Direct in the CT.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实现`Quotation`表单的读取操作。首先，在CT中设置Ext Direct。
- en: 'In the same way as we added to `MyAccount`, we will add the following code
    to `app_edit.js` (source file: `10_reading_data_quotation/ct/quotation/app_edit.js`):'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在`MyAccount`中添加的方式相同，我们将以下代码添加到`app_edit.js`（源文件：`10_reading_data_quotation/ct/quotation/app_edit.js`）：
- en: '[PRE43]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Don't forget to read the `API` key, so let's set this up now.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记读取`API`密钥，让我们现在设置它。
- en: In the same way as we did on the HTML side, make it read the `api.php` file
    to make use of Direct. If you need a reminder, see the source file at `10_reading_data_quotation/ct/quotation/app_edit.html`.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在HTML端所做的方式相同，让它读取`api.php`文件以使用Direct。如果您需要提醒，请参阅源文件`10_reading_data_quotation/ct/quotation/app_edit.html`。
- en: Next, we'll do the preparations on the server side. Like you understood up until
    now, the process is mostly the same as with `MyAccount`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在服务器端进行准备。如您至今所理解的，过程与`MyAccount`大致相同。
- en: 'We will add a new `API` key for `Quotation` to `config.php` (source file: `10_reading_data_quotation/ct/quotation/app_edit.js`):'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`config.php`（源文件：`10_reading_data_quotation/ct/quotation/app_edit.js`）中为`Quotation`添加一个新的`API`密钥：
- en: '[PRE44]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Next, implement the class you defined with `config.php`. We are going to implement
    the `API` key we added to `config.php`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，实现您在`config.php`中定义的类。我们将实现添加到`config.php`中的`API`密钥。
- en: 'For the content, please see the following source file for reference:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 对于内容，请参阅以下源文件以供参考：
- en: '`10_reading_data_quotation/php/classes/MyAppQuotation.php`'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`10_reading_data_quotation/php/classes/MyAppQuotation.php`'
- en: Implement the `readForm` method. With the `writeForm` method, in the case of
    `Quotation`, if the complex process to judge whether it is an update or a new
    addition becomes necessary, in order to judge whether it has an ID or not from
    the transition that's listed, it can't be implemented in this chapter, so implement
    it in the next chapter. This is the same with `Bill`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`readForm`方法。使用`writeForm`方法时，在`Quotation`的情况下，如果需要执行复杂的判断过程以确定是更新还是新增，为了从列出的转换中判断是否有ID，这一部分无法在本章实现，因此将其放在下一章实现。这与`Bill`相同。
- en: So, in order to communicate by using the class on the server side, define the
    setting in the config `API` in the form panel.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了通过在服务器端使用类进行通信，请在表单面板中定义配置`API`的设置。
- en: 'We will define the `API` property in the same way as we did for the `MyApp.view.myaccount.Edit`
    class (source file: `10_reading_data_quotation/app/view/quotation/Edit.js`).'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以与`MyApp.view.myaccount.Edit`类（源文件：`10_reading_data_quotation/app/view/quotation/Edit.js`）相同的方式定义`API`属性。
- en: 'Define the `myapp-show` event handler. This will be quite a long source code.
    So, while being careful to look out for the new and edit points inside the `onShow`
    method, try it out by using the following source file for reference:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 定义`myapp-show`事件处理器。这将是一个非常长的源代码。因此，在仔细寻找`onShow`方法中的新增和编辑点的同时，请参考以下源文件进行测试：
- en: '`10_reading_data_quotation/app/controller/quotation/Edit.js`'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`10_reading_data_quotation/app/controller/quotation/Edit.js`'
- en: The functions have been divided into `onEditShow` and `onNewShow`. This time,
    only `onEditShow` method will run. With a later-listed implementation, newly made
    processes and the processes that are divided after editing are also implemented.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 函数已分为`onEditShow`和`onNewShow`。这次，只有`onEditShow`方法将运行。通过后续列出的实现，新创建的过程以及编辑后的分割过程也将实现。
- en: After it has finished reading, fire `myapp-undirty` in order to know whether
    it is in a clean condition. The button to fire the `myapp-show` event is already
    installed in the CT, so if you press the button, it will signal and begin to read.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在读取完成后，触发`myapp-undirty`以了解它是否处于干净状态。触发`myapp-show`事件的按钮已经安装在CT中，因此如果您按下按钮，它将发出信号并开始读取。
- en: Of course it's the processing of the `readForm` method, so it's only the fixed
    test data that will be read. But we can implement the reading from the database
    with SQL along with the implementation of `writeForm` that happens in the next
    chapter. With the name specified on the server side, we need to set a name in
    the field on the client side. If the name is correctly set up, the data should
    be inserted automatically.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这是`readForm`方法的处理过程，所以只读取固定的测试数据。但我们可以实现与下一章中实现的`writeForm`一起的数据库读取。在服务器端指定名称的情况下，需要在客户端的字段中设置一个名称。如果名称设置正确，数据应该会自动插入。
- en: The Bill form
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bill表单
- en: Finally, implement `Bill` in the same way as `Quotation`. Firstly, configure
    Ext Direct in the CT.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以与`Quotation`相同的方式实现`Bill`。首先，在CT中配置Ext Direct。
- en: 'Like in the previous step, we will add the code necessary for Direct (source
    file: `11_reading_data_bill/ct/bill/app_edit.js`).'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一步类似，我们将添加必要的代码以实现Direct（源文件：`11_reading_data_bill/ct/bill/app_edit.js`）。
- en: 'Configure it without forgetting about reading the `API` key. This also repeats
    the process of making the HTML read `api.php` (source file: `11_reading_data_bill/ct/bill/app_edit.html`).'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置时，不要忘记读取`API`密钥。这也会重复制作HTML读取`api.php`的过程（源文件：`11_reading_data_bill/ct/bill/app_edit.html`）。
- en: 'Now prepare the server side. We will add the `API` class for Direct that''s
    used by the `Bill` class (source file: `11_reading_data_bill/php/config.php`):'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 现在准备服务器端。我们将为`Bill`类添加由`Bill`类使用的Direct `API`类（源文件：`11_reading_data_bill/php/config.php`）：
- en: '[PRE45]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Next, implement the class defined by `config.php`.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，实现由`config.php`定义的类。
- en: 'Because the code is very long, please refer to the following source file on
    this occasion:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 由于代码非常长，请在此情况下参考以下源文件：
- en: '`11_reading_data_bill/php/classes/MyAppBill.php`'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`11_reading_data_bill/php/classes/MyAppBill.php`'
- en: 'Then, configure the direct function in the `API` config file. Let''s define
    the API property in the same way as we did for the `MyApp.view.quotation.Edit`
    class (source file: `11_reading_data_bill/app/view/bill/Edit.js`).'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`API`配置文件中配置直接函数。让我们以与`MyApp.view.quotation.Edit`类（源文件：`11_reading_data_bill/app/view/bill/Edit.js`）相同的方式定义API属性。
- en: Finally, implement the event handler `myapp-show`. This is really similar to
    the implementation of `MyApp.controller.quotation.Edit`, so please try it for
    yourself. If you need to, you can refer to the source file at `11_reading_data_bill/app/view/bill/Edit.js`.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，实现事件处理器 `myapp-show`。这实际上与 `MyApp.controller.quotation.Edit` 的实现非常相似，所以请亲自尝试。如果你需要，可以参考源文件
    `11_reading_data_bill/app/view/bill/Edit.js`。
- en: Writing data and validations
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入数据和验证
- en: In regard to the writing process, as I mentioned before, just implement `MyAccount`
    and implement `writeForm` of `MyAccount`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 关于写入过程，正如我之前提到的，只需实现 `MyAccount` 和 `MyAccount` 的 `writeForm`。
- en: This is also quite long, so please refer to the source file `12_writing_data_and_validations/php/classes/MyAppMyAccount.php`.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这也很长，所以请参考源文件 `12_writing_data_and_validations/php/classes/MyAppMyAccount.php`。
- en: The content of the process is simple; however, if you look at the PHP code,
    it looks pretty complicated. I'll try to explain it simply.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 处理内容很简单；然而，如果你查看PHP代码，它看起来相当复杂。我会尽量简单解释。
- en: First, to return the associative array as a return value in the same way as
    the others, we have to set `success` as `true` and relay to the client that the
    writing process has finished normally.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为了像其他人一样以返回值的形式返回关联数组，我们必须将 `success` 设置为 `true` 并传达给客户端写入过程已正常完成。
- en: At the beginning, there are places where we set the associative array with a
    key called `errors`, then set a field name key inside and insert a message. This
    is the input check on the server side.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始时，有一些地方我们设置了带有 `errors` 键的关联数组，然后在内部设置字段名键并插入一条消息。这是服务器端的输入检查。
- en: If you use Ext Direct, this completes the input check.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Ext Direct，这就会完成输入检查。
- en: Under errors, put in the field name for the error target and just by entering
    the error message in there, the server side automatically displays a red frame.
    If you hover the mouse over it, the message you set up on the server side is displayed.
    In other words, you need zero lines of programming code on the client side for
    error processing.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在错误部分，输入错误目标的字段名，只需在其中输入错误消息，服务器端就会自动显示一个红色框架。如果你将鼠标悬停在其上，就会显示你在服务器端设置的消息。换句话说，你不需要在客户端编写任何编程代码来处理错误。
- en: Normally, you receive the JSON data by communicating through AJAX, but we need
    to define the error processing on the client side and the server side. So, I'm
    sure we would all prefer to use Ext Direct, which automatically processes this
    for us.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你通过AJAX通信接收JSON数据，但我们需要在客户端和服务器端定义错误处理。所以，我相信我们都会更喜欢使用Ext Direct，它会自动为我们处理这些。
- en: Tip
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you get used to this way of developing, you'll get hooked and you won't be
    able to go back.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你习惯了这种开发方式，你可能会上瘾，而且你将无法回头。
- en: Again, because you can wholly separate the client side and server side, one
    engineer does not need to construct both. Instead, it's possible to progress the
    work by completely separating the server side and client side. Once the input
    check has been passed, the user information is acquired from the database where
    the session ID is being saved.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，由于你可以完全分离客户端和服务器端，一个工程师不需要构建两者。相反，可以通过完全分离服务器端和客户端来推进工作。一旦输入检查通过，就会从保存会话ID的数据库中获取用户信息。
- en: Finally, set up the success key that displays `true` when the processing has
    been completed. `writeForm` is an implemented method used when writing form data.
    In the member on the server side that writes the form data, you need to set the
    `formHandler` method to `true`.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，设置成功键，当处理完成后显示 `true`。`writeForm` 是一个实现的方法，用于写入表单数据。在服务器端写入表单数据的成员中，你需要将
    `formHandler` 方法设置为 `true`。
- en: Everyone already has `formHandler` in `config.php` set to `true`, but when you
    get down to defining your own projects in a similar way, people often encounter
    problems when they forget to set the `formHandler` method to `true` meaning the
    data is not sent.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都已经将 `formHandler` 在 `config.php` 中设置为 `true`，但在你以类似方式定义自己的项目时，人们经常会忘记将 `formHandler`
    方法设置为 `true`，这意味着数据不会被发送。
- en: Tip
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Set the `formHandler` method to `true`.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `formHandler` 方法设置为 `true`。
- en: Summary
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Great work so far! This was quite a long chapter, but this was also integral
    to our application (yes, all the chapters are integral, but this one more so!).
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，做得很好！这是一个相当长的章节，但这对我们的应用程序来说也是至关重要的（是的，所有章节都是至关重要的，但这一章更为重要！）。
- en: In this chapter, we started with the login screen and then implemented the `Edit`
    screen that uses forms from each screen. At the end, we learnt about Ext Direct.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从登录屏幕开始，然后实现了使用表单的 `Edit` 屏幕。最后，我们学习了 Ext Direct。
- en: In the next chapter, we'll implement the `List` and `Search` functions for each
    screen that uses Ext Direct. Have a quick coffee break and carry on when you're
    ready!
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将为每个使用 Ext Direct 的屏幕实现 `List` 和 `Search` 函数。快速休息一下喝杯咖啡，准备好后继续吧！
