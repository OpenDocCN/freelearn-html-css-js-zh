- en: Chapter 3. Data Input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome back. So, in the previous two chapters we worked on data structures
    and we made tables in SQL and MySQL. Then we created the development environment
    while getting to grips with Sencha Cmd.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn to make a form to input data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transmit that data to a server via Ext Direct
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about monitoring the state of the input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to use Ext Direct to validate the `MyAccount` form on the server side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the login page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by creating the login page for this application. Here we will perform
    a simple implementation using PHP. We will create `login.php` and `logout.php`.
    However, we will not go into too much detail about the login logic here because
    this book is focused on Ext JS and not PHP.
  prefs: []
  type: TYPE_NORMAL
- en: Create the variable you will input in SQL and then just pull the user information
    from the database.
  prefs: []
  type: TYPE_NORMAL
- en: The source code is very long, so please go to the source file to view the `login.php`
    file from the `01_making_the_login` folder and `logout.php` from `01_making_the_login`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Store the user data for the session with the key `USERINFO`. Again, to be able
    to perform a login check, change `index.html` to `index.php` and run the login
    check. Apart from the PHP code at the beginning, it''s the same as `index.html`
    (source file: `01_making_the_login/index.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating the MyAccount form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's build the forms that will deploy to various screens. First comes
    `MyAccount`.
  prefs: []
  type: TYPE_NORMAL
- en: Add the form panel to the temporary panel you built. Don't install the form
    directly onto the `Screen` panel—there is a reason to this. You will make relationships
    between the list and the details, so there are times when there are numerous panels
    existing inside the screen.
  prefs: []
  type: TYPE_NORMAL
- en: It just so happens that `MyAccount` only needs one screen. If the number of
    methods increases, there is a chance that you will need multiple panels. You might
    need a panel to run the input verification. But it's difficult to say for sure
    at this point. So, it is necessary to make the **screen layout** into a **card
    layout** which will make it easier to handle multiple screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s specify the screen layout to be a card layout. In the `MyAccount.js`
    script at the bottom of the `view` directory you made before, create a `MyAccount`
    directory and move into it. The hierarchy of the directory will change, so let''s
    modify the class name as well (source file: `02_making_the_account_form/app/view/myaccount/MyAccount.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s modify the class name as follows (Source file: `02_making_the_account_form/app/controller/myaccount/MyAccount.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the same way, edit the controllers of `Quotation`, `Bill`, and `Dashboard`
    and views. By doing this, the application should now be working.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the package name has changed, let''s modify the `Application.js` controller
    settings accordingly (source file: `02_making_the_account_form/app/Application.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, the view name has changed, so we have to modify that as well (source
    file: `02_making_the_account_form/app/view/Viewport.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now with this, we're free to make the form. To begin with, we want to create
    the form panel and put it into `MyAccount`, but we want to perform a data abstraction
    of the form panel. So, at the beginning let's do just that and create a simple
    inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same way as we created the class for `app/panel/Screen.js`, we''ll create
    a class that''s inherited from `Ext.form.Panel` (refer to the source file: `02_making_the_account_form/app/form/Panel.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have created the inheritance. Let''s make the `edit` panel (source file:
    `02_making_the_account_form/app/view/myaccount/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s perform the implementation inside the form a little later. First, let''s
    embed this panel (source file: `02_making_the_account_form/app/view/myaccount/MyAccount.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that there are no errors coming from the browser. The appearance does
    not change, so it might not be so interesting presently.
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, it looks good on the display, but you might have noticed that
    a **CT** error has arisen. This is because we changed the name earlier. Let's
    fix this now.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `MyAccount` class (`view` and `controller`) package name has changed, so
    go ahead and amend the following class names (check the source file for reference):'
  prefs: []
  type: TYPE_NORMAL
- en: '`02_making_the_account_form/ct/myaccount/view.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`02_making_the_account_form/ct/myaccount/app.js`'
  prefs: []
  type: TYPE_NORMAL
- en: Along with this, you should also fix the other CT error.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's start to build the main form. When you define the classes, you can
    define them using the configuration options, but let's set it up using `Ext.apply`
    inside `initComponent`. If we set up the configuration with `initComponent`, we
    can set a more flexible variety of behaviors to the component when we create it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is really similar to the code that comes out of **Sencha
    Architect** (source file: `02_making_the_account_form/app/view/myaccount/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the preceding code, it will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the MyAccount form](img/5446OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We make forms in this manner. Try adjusting it for yourself if you think up
    a more complex or attractive form. You can find more complex layouts published
    on *Sencha Ext samples*: [http://dev.sencha.com/deploy/ext-4.0.0/examples/#sample-13](http://dev.sencha.com/deploy/ext-4.0.0/examples/#sample-13).'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, we see just three fields: **email:**, **firstname,** and **lastname:**.
    These are not usually modified often, but as we develop the application, other
    fields that require more modification might need to be added. In such occasions,
    you can add new fields in `myaccount.Edit`.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Quotation form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's continue and create forms for `Quotation` and `Bill`. In the same way
    as before, first set up the card layout in the `Screen` panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same way as with `view/myaccount/MyAccount.js`, in the `Quotation` class
    we will add the `Edit` and `List` screens (source file: `03_making_the_quotation_form/app/view/quotation/Quotation.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Unlike the previous occasion, now two cards exist. These are `List` and `Edit`.
    You will implement `List` in a later chapter. Here, let's implement `Edit`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The only thing is, if you don''t create a class, then `requires` won''t be
    able to read it. So, make a `List` class in the following way (source file: `03_making_the_quotation_form/app/view/quotation/List.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s create `Edit`. It is a bit of a long process, so let''s break
    it up into sections and go through each part (source file: `03_making_the_quotation_form/app/view/quotation/Edit.js)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We have made an empty `MyApp.view.quotation.Edit` component and from now, we'll
    begin to implement the inside of the `initComponent` method. As we saw before,
    this will make the component more flexible.
  prefs: []
  type: TYPE_NORMAL
- en: Let's break this up into `Store`, `field` and `grid`, and `TopToolbar`. The
    following sections give the code that should be inserted into their specific points.
  prefs: []
  type: TYPE_NORMAL
- en: Store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Store` component is where the data will be stored locally in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the `Store` component now. Implement the following code into
    the `initComponent` method inside the `MyApp.view.quotation.Edit` class (source
    file: `03_making_the_quotation_form/app/view/quotation/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Generate `customerStore` and `itemStore`. `customerStore` is made for the combobox
    and `itemStore` is made for the `grid` panel. Both stores are temporarily installed.
    That is why we're using `Ext.applyIf`. Let's modify this, so at a later stage
    you can acquire the data via Ext Direct.
  prefs: []
  type: TYPE_NORMAL
- en: The field and grid components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will build the `field` components (in this case, it means
    the combobox along the top of the screen), and the `grid` panel that will appear
    below it.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s a little bit long, but write the following after the previous step when
    we defined the `Store` component (source file: `03_making_the_quotation_form/app/view/quotation/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If you lay out the field, you are laying out the `grid` panel. The point to
    remember here is that the `grid` panel is set up with the plugin `Ext.grid.plugin.CellEditing`.
    In order to open various cells to edit, we have set up the editor key in the column
    settings. The `textfield` form field is used by default, but you want just numerical
    inputs in `qty` and `price`, so we are using `numberfield` for those.
  prefs: []
  type: TYPE_NORMAL
- en: TopToolbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section we will create the `Save` button that will go on the top toolbar
    in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, write the following code after the code we wrote in the previous
    step to display the `Save` button (source file: `03_making_the_quotation_form/app/view/quotation/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We will install the `Save` button. Now, we want to display this button as quickly
    as possible, but at the moment nothing is being displayed. This is because in
    the card layout, in the `Quotation` view's active item, `0` will display the `List`
    screen and `1` will display `Edit`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this state, we can''t perform a component test, so first, let''s begin by
    preparing `view_edit.html` for the CT (source file: `03_making_the_quotation_form/ct/quotation/view_edit.html`).'
  prefs: []
  type: TYPE_NORMAL
- en: Basically, this does not change much in `view.html`, we're just changing `view.js`
    being read by `<script>` in `view_edit.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the `Quotation` view''s package name has not been amended, so you can
    correct this now. For the source code, please see the source file: `03_making_the_quotation_form/ct/quotation/view_edit.js`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you generate `MyApp.view.quotation.Quotation`, in the configuration options
    add `activeItem: 1`. By doing this, `Edit` will be displayed from the start. Of
    course the functions have not been implemented, so items will not be added or
    automatically calculated.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we are adding a new component, so in order to apply the mapping for the
    new component to `bootstrap.js`, let''s execute `sencha app build`. After executing
    Sencha app build and the mapping has successfully been applied to `bootstrap.js`,
    the following screen should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TopToolbar](img/5446OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the Bill form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following on, let's make the form for invoices. The contents of the `Bill` and
    `Quotation` forms are mostly the same.
  prefs: []
  type: TYPE_NORMAL
- en: This will also need to describe finer details such as payment date. So, regarding
    the structure of the database, the ID can be linked so that a quotation can raise
    an event for the bill.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s quickly begin by making the card layout in the same way as for
    `Quotation` (source file: `04_making_the_bill_form/app/view/bill/Bill.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's make a temporary empty `List` component to compensate for what we
    wrote previously and avoid receiving an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next class we are going to make is really similar to the `dashboard.Dashboard`
    class. So, please use that as reference while you code and watch out for the following
    point (source file: `04_making_the_bill_form/app/view/bill/List.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Also, let's implement the empty `initComponent` for the same reason as before
    for the `List` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, at the end, make `Edit` in the same way as `Quotation` (source file:
    `04_making_the_bill_form/app/view/bill/Edit.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: Again, this class is very similar to the `MyApp.view.quotation.Edit` class,
    which we previously made.
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch out for the following points and build this class in the same way:'
  prefs: []
  type: TYPE_NORMAL
- en: '`className: MyApp.view.bill.Edit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aliasName: widget.myapp-quotation-edit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`itemId: screen-quotation-edit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You have created the view, so now it''s time to implement the various controllers.
    Instead of having one controller to manage `Quotation` and `Bill` that are separated
    into `List` and `Edit`, it''s better to prepare controllers for each one (source
    file: `04_making_the_bill_form/app/controller/quotation/List.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Let's create the rest of the controllers listed as follows in exactly the same
    way (only the class names are different).
  prefs: []
  type: TYPE_NORMAL
- en: '(Source file: `04_making_the_bill_form/app/controller/quotation/Edit.js`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '(Source file: `04_making_the_bill_form/app/controller/bill/List.js`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '(Source file: `04_making_the_bill_form/app/controller/bill/Edit.js`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order for the preceding controllers to be read, add a postscript into `app/Application.js`
    (source file: `04_making_the_bill_form/app/Application.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: It's worth checking now that no errors are being displayed by accessing `index.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Managing dirty and undirty apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Naturally, it's good if the saving process happens every time you press the
    **Save** button.
  prefs: []
  type: TYPE_NORMAL
- en: However, if possible, wouldn't you prefer to have the **Save** button available
    only when changes have been made?
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will implement the logic into the controller that will judge whether
    or not changes have been made after an input.
  prefs: []
  type: TYPE_NORMAL
- en: MyAccount
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will implement a simple form from `MyAccount`. But, before that, `Quotation`
    and `Bill` separated the controller, but we didn't make the change in `MyAccount`!
    Let's separate it quickly and add it to `app/Application.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `MyApp.controller.bill.Edit` class as reference, let's go ahead and
    make the `MyApp.controller.myaccount.Edit` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from the class name, it''s exactly the same process (source file: `05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: After you have finished building the previous class, let's add the `myaccount.Edit`
    controller to the controller property of `app/Application.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add it to `app.js` in the CT directory in the same way (source file: `05_management_of_dirty_and_undirty_myaccount/ct/myaccount/app.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it should be able to run with a controller in CT. First, set up the following
    event list to fire during the component test:'
  prefs: []
  type: TYPE_NORMAL
- en: '`myapp-show` (displays the component)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`myapp-hide` (hides the component)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`myapp-dirty` (fires when information inside the form has been changed)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`myapp-undirty` (fires when changed information has been recorded or information
    has been reverted back to the previous state)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before anything else, in relation to `myapp-show` and `myapp-hide`, we need
    to pass the event to the `List` and `Edit` classes with `MyApp.controller.myaccount.MyAccount`
    (source file: `05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/MyAccount.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The main point is to set up `refs` and capture the `editView`. Next, define
    the controller for `Edit` (source file: `05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to acquire the `field` event. Acquire the field with component
    query and then set up the event listener (source file: `05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Add each name property to the `View` field (source file: `05_management_of_dirty_and_undirty_myaccount/app/view/myaccount/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If we input something in text, it is output as a log in the console. We want
    to define the similar processing to the other classes, so move the following logic
    into the `Abstract` class and modify it so that it can be called (source file:
    `05_management_of_dirty_and_undirty_myaccount/app/controller/Abstract.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'And let''s implement in the same way for `Edit.js` (source file: `05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '`setChangeFieldEvents` is made so that we can set up other events besides `textfield`.
    `setChangeFieldEvents` can also support the times when you want to use it for
    other fields such as `combobox`. The fact that the details of the text were modified
    means you could handle it with the implementations made so far.'
  prefs: []
  type: TYPE_NORMAL
- en: So next, let's check if the content really did change. This means implementation
    inside the method `onChangeField` is successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the content of the component recorded by the `MyApp.controller.myaccount.Edit`
    controller''s `init` method is modified, the `onChangeField` method is implemented
    (source file: `05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: Use `getFieldValues` in order to judge whether there were changes to the field.
    `Ext.Object.getKeys` will send back an array. Consequently, with this single line
    you can judge whether changes have been made to the content.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a change, `myapp-dirty` will be fired and if it reverts to its original
    state, the `myapp-undirty` event will be fired.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s add the logic to make the toolbar button available for `onDirty`
    and unavailable for `onUndirty` to finish the implementation of `MyAccount` (source
    file: `05_management_of_dirty_and_undirty_myaccount/app/controller/myaccount/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add `disabled` to the `Save` button settings. During the CT error, `onShow`
    does not work. Also, you should conduct the button''s initialization when it is
    `onHide` (source file: `05_management_of_dirty_and_undirty_myaccount/app/view/myaccount/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Finally, if you can muster enough energy, implement it so that when the reset
    button is pressed, the reset method is called from `Ext.form.Basic`.
  prefs: []
  type: TYPE_NORMAL
- en: The Quotation form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Quotation` form is mostly the same as `Bill` and `MyAccount`, but there
    is one big difference—there is a grid inside the form panel.
  prefs: []
  type: TYPE_NORMAL
- en: At first glance, the store that is configured to the `grid` panel looks as though
    it will communicate directly with the server, but this is not the case. To the
    very end, this form panel handles fields, so it doesn't handle the grid directly
    and there is no need to separate form data sending and grid data sending.
  prefs: []
  type: TYPE_NORMAL
- en: Then how do we solve this? The answer is to hand it a hidden field and make
    it save the grid data in the form of JSON. So, the grid store is fine to be left
    as a **MemoryStore**.
  prefs: []
  type: TYPE_NORMAL
- en: First, implement it to the same point as `MyAccount`. Because `Quotation` will
    hold a list, add to it so that `refs` can also acquire a list view.
  prefs: []
  type: TYPE_NORMAL
- en: 'This source code is very similar to the implementation from the previous step
    of the following classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MyApp.controller.myaccount.MyAccount`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MyApp.controller.myaccount.Edit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Try implementing for `Quotation` remembering what we did with the source code
    from the previous classes. Use the following source files for reference if you
    get stuck:'
  prefs: []
  type: TYPE_NORMAL
- en: '`06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Quotation.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to check the application you have implemented so far, add a CT to
    check `Edit` (source file: `06_management_of_dirty_and_undirty_quotation/ct/quotation/app_edit.html`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll make this anew in the CT directory subsidiary. The content is mostly
    the same as for `app.html`, but we will change what will be read from `app.js`
    to `app_edit.js` (source file: `06_management_of_dirty_and_undirty_quotation/ct/quotation/app_edit.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: This is also almost the same as `app.js` on the same tier, but we'll add an
    `Edit` controller to controllers and `activeItem:1` to `QuotationView` controller's
    configuration option.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main points to remember are to add `quotation.Edit` to the controller and
    set `activeItem` to `1` and display the `Edit` panel from the beginning. So, like
    we touched on initially, take the store data that''s configured in `grid` and
    make it into JSON, then create the logic to be stored in the `Hidden` field. First,
    we need to lay out the `Hidden` field in `view` (source file: `06_management_of_dirty_and_undirty_quotation/app/view/quotation/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In this state, the data is fixed and cannot obtain an event that has specifically
    changed. Before this, let's implement the addition and deletion of items and event
    editing. There are various things we need to do to achieve that.
  prefs: []
  type: TYPE_NORMAL
- en: 'First is to change the `Store` component into a class. You just need to take
    what is already generated inside `view` and make it into an external class (source
    file: `06_management_of_dirty_and_undirty_quotation/app/store/Customer.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, change the following (source file: `06_management_of_dirty_and_undirty_quotation/app/store/QuotationItem.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In order to use this store class, add the setting to the `MyApp.controller.quotation.Edit`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll add `Customer` and `QuotationItem` to the `MyApp.controller.quotation.Edit`
    class''s `stores` property (source file: `06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we have created `MyApp.store.Customer` and `MyApp.store.QuotationItem`
    outside of `view`, we need to adjust the code in `view` (source file: `06_management_of_dirty_and_undirty_quotation/app/view/quotation/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: There is a reason why we externalized `store`. This is because if we configure
    the `store` class in stores with **Ext JS MVC architecture**, the `getXXXXStore`
    method is generated and we're then able to access the `store` component from the
    controller. `XXXX` is the `store` class name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will make modifications to monitor changes to `hidden` from the controller
    and change the initial values to `hidden` (source file: `06_management_of_dirty_and_undirty_quotation/app/view/quotation/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, change the following code (source file: `06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can implement what operates the grid. First define the event handler
    for the button (source file: `06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement `onAddItem` and `onRemoveItem`. Here it will become possible to add
    items and delete items on the grid (source file: `06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The adding process is extremely simple, it's just using the `Add` method from
    the store and adding records. However, the deletion process is not just simply
    deleting.
  prefs: []
  type: TYPE_NORMAL
- en: It has been set so that when deletion occurs, the next item from the one that
    was selected comes into being, and that item is selected. By doing this, you can
    keep deleting just by continuing to click on the **Delete** button. You should
    think of this as a little bonus feature!
  prefs: []
  type: TYPE_NORMAL
- en: 'So, now you can add and delete records on the grid. Next, we will implement
    the essential part that turns the store data into JSON and stores it in `hidden`
    (source file: `06_management_of_dirty_and_undirty_quotation/app/controller/quotation/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: When the grid data is altered, `update`, `add`, and `remove` occur as a separate
    events. You need to define these event handlers. The process is common, so first
    store the function object in `updateGridData` and then use it.
  prefs: []
  type: TYPE_NORMAL
- en: Again implement a bonus function for the update event. When the content is modified,
    multiply `qty` and `price` and then it will place the value automatically inside
    `sum`. This time it's made so you can't edit `sum`, it's set to input after calculating
    automatically. You can check that it works at `ct/quotation/app_edit.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Until now we have been defining stores in View. However, because we changed
    the stores into class files, you might have noticed that `ct/ quotation/view_edit.html`
    isn''t working properly. At the end of `Quotation`, let''s make modifications
    so that the CT will work normally (source file: `06_management_of_dirty_and_undirty_quotation/ct/quotation/view_edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Because there is no controller, the creation of the `store` component will not
    occur. Due to this, if you define and generate it yourself, it will be linked
    with `storeId` and then displayed. Of course, nothing will happen if you press
    any of the buttons displayed because there is no controller.
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of `Quotation` has been longer and more complicated than
    anything preceding it. Next is `Bill`, which is more or less the same implementation.
    Please double-check the complex parts as you go.
  prefs: []
  type: TYPE_NORMAL
- en: The Bill form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we know, `Bill` is pretty much the same as `Quotation`, but let's continue
    and implement `Bill`. First let's make the `BillItem` store class.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `Bill`, it''s only the class name and `StoreId` that differs from `QuotationItem`.
    The rest is the same, so let''s try and code this by ourselves. You can check
    out the following source file if you want something to refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '`07_management_of_dirty_and_undirty_bill/app/store/BillItem.js`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next comes the controller setting. Again, the following implementations are
    extremely similar to what came before in `Quotation`, so think back to `MyApp.controller.quotation.Quotation`
    and `MyApp.controller.quotation.Edit` and try it for yourself. If you need help,
    you can find the source files at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`07_management_of_dirty_and_undirty_bill/app/controller/bill/Bill.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`07_management_of_dirty_and_undirty_bill/app/controller/bill/Edit.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, lets modifying `view`. In the same way, this is very similar to `EditView`,
    so think back to `MyApp.view.quotation.Edit` and try it for yourself. The following
    is the source file if you need some help:'
  prefs: []
  type: TYPE_NORMAL
- en: '`07_management_of_dirty_and_undirty_bill/app/view/bill/Edit.js`'
  prefs: []
  type: TYPE_NORMAL
- en: Let's modify and add the CT. In the same way as the previous step, in order
    to validate the `EditView`, we will build `app.html` and `view.html` afresh for
    `Edit`.
  prefs: []
  type: TYPE_NORMAL
- en: 'What is happening internally is mostly the same, so please refer to the following
    source files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`07_management_of_dirty_and_undirty_bill/ct/bill/app_edit.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`07_management_of_dirty_and_undirty_bill/ct/bill/app_edit.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`07_management_of_dirty_and_undirty_bill/ct/bill/view_edit.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`07_management_of_dirty_and_undirty_bill/ct/bill/view_edit.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regarding `app_edit.js`, in order for mutual validation to occur with the controller,
    we install a button on the screen and make an event fire.
  prefs: []
  type: TYPE_NORMAL
- en: If no errors come up with CT or in the whole application, move to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the read and write processes using Ext Direct
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From here, we will start to implement the processing of data being written
    and read concerning the form that we have made this far. We''ll be using Ext Direct
    for this as well. Before we continue with the following implementation, there
    are a few points that you should amend. One of those is to add an **ID** to a
    session when you log in. Let''s amend this now (source file: `08_implement_read_and_write_by_ext_direct/index.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, store the session ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add `session_start` to the beginning of the router being used by Ext
    Direct. By doing this, you should be able to access the session with the method
    from each class (source file: `08_implement_read_and_write_by_ext_direct/php/router.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: You have prepared the way, so now let's go ahead and implement the read process
    for `MyAccount`, `Quotation`, and `Bill`.
  prefs: []
  type: TYPE_NORMAL
- en: Reading data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we will start to learn about how the various sections of our application
    will read data.
  prefs: []
  type: TYPE_NORMAL
- en: MyAccount
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin with, let's start working on `MyAccount`. Let's create a class for
    Ext Direct. Here we will add the source code for a new PHP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the source code is going to be a little long to be added to this text,
    please refer to your source file at: `09_reading_data_myaccount/php/classes/MyAppMyAccount.php`.'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `readForm` method. When a person logs in, it acquires the account
    information from the database by using the saved ID as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: I'll hold back from explaining the PHP processing that happens around here.
    The main point is the returned associative array key.
  prefs: []
  type: TYPE_NORMAL
- en: The access key is a flag that gives the value `true` or `false` indicating whether
    the form's acquisition was successful or not. The data for each field is configured
    as an associative array in the data key. In order to use this `readForm` in Ext
    Direct, update the `REMOTING_API` output configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will add a new class for Direct (source file: `09_reading_data_myaccount/php/config.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now there is just a bit more preparation to be done. The CT of `MyAccount`
    is not preset to use Ext Direct, so we should amend this. First, add `api.php`
    to the HTML. In order to make our database read `api.php` just before reading
    `app.js`, we need to add the following code (source file: `09_reading_data_myaccount/ct/myaccount/app.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the Ext Direct setting to `app.js`. Let''s add the following code
    after `Ext.Loader.setConfig` (source file: `09_reading_data_myaccount/ct/myaccount/app.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The `Ext.app.REMOTING_API.url` file is being created by `api.php` that is being
    read by `app.html`. At this point, the URL path is different for the CT, so you
    should override this. Now we've finally prepared everything, so let's go on and
    set up Ext Direct in the `MyAccount` form (`view`).
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll add an `api` property to `MyApp.ciew.myaccount.Edit` (source file: `09_reading_data_myaccount/app/view/myaccount/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Set up the object in the `config.php` file named `API`. Specify `load` and `submit`
    inside that key. Set up the character string for the `Ext.Direct` function in
    the same way in which both `load` and `submit` methods specified their class name
    in the character string in `Ext.create` and `Ext.define`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, because `MyAccount` wants to read when it is `onShow` (when it's displayed),
    the `myapp-show` event in the CT doesn't fire. So, let's install this button that
    will cause a pseudo-fire event.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the CT subsidiary directory, because we will add a button that''s necessary
    for the fake reproduction of `myapp-show`, we need to add the following code inside
    the `launch` method (source file: `09_reading_data_myaccount/ct/myaccount/app.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: We can make the `myapp-show` event mock fire by forcefully implementing a structure
    that automatically calls the `loadIndex` method that we made a while back. So
    if you press the button, you can make the event fire. Now, implement the read
    logic for the form data in the `onShow` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we will implement the controller behavior after `myapp-show` fires
    (source file: `09_reading_data_myaccount/app/controller/myaccount/Edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: It was a fairly short code. The main point is to acquire the `BasicForm` object
    with `getForm` and to set `trackResetOnLoad` to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: We can use `isLoading` to judge a situation when other processing happens while
    it is asynchronously reading. If we call the `load` method, the object we configured
    before in the `API` key is executed and the request is sent to the server. PHP
    acquires the data from the database and sends it back, and the variable is inserted
    automatically in the field. We don't need to go through the process of setting
    the data we receive into the field ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: After the `MyAccount` controller has finished reading the login information,
    as it's the latest user information, the `myapp-undirty` event fires. From then
    on, the **Save** button can now be pressed if there is a modification. Later,
    we'll implement a part that will send the data in reverse when the **Save** button
    is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: The Quotation form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's implement the read action in for the `Quotation` form. First, set
    up the Ext Direct in the CT.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same way as we added to `MyAccount`, we will add the following code
    to `app_edit.js` (source file: `10_reading_data_quotation/ct/quotation/app_edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget to read the `API` key, so let's set this up now.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way as we did on the HTML side, make it read the `api.php` file
    to make use of Direct. If you need a reminder, see the source file at `10_reading_data_quotation/ct/quotation/app_edit.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll do the preparations on the server side. Like you understood up until
    now, the process is mostly the same as with `MyAccount`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will add a new `API` key for `Quotation` to `config.php` (source file: `10_reading_data_quotation/ct/quotation/app_edit.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Next, implement the class you defined with `config.php`. We are going to implement
    the `API` key we added to `config.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the content, please see the following source file for reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '`10_reading_data_quotation/php/classes/MyAppQuotation.php`'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `readForm` method. With the `writeForm` method, in the case of
    `Quotation`, if the complex process to judge whether it is an update or a new
    addition becomes necessary, in order to judge whether it has an ID or not from
    the transition that's listed, it can't be implemented in this chapter, so implement
    it in the next chapter. This is the same with `Bill`.
  prefs: []
  type: TYPE_NORMAL
- en: So, in order to communicate by using the class on the server side, define the
    setting in the config `API` in the form panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will define the `API` property in the same way as we did for the `MyApp.view.myaccount.Edit`
    class (source file: `10_reading_data_quotation/app/view/quotation/Edit.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the `myapp-show` event handler. This will be quite a long source code.
    So, while being careful to look out for the new and edit points inside the `onShow`
    method, try it out by using the following source file for reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '`10_reading_data_quotation/app/controller/quotation/Edit.js`'
  prefs: []
  type: TYPE_NORMAL
- en: The functions have been divided into `onEditShow` and `onNewShow`. This time,
    only `onEditShow` method will run. With a later-listed implementation, newly made
    processes and the processes that are divided after editing are also implemented.
  prefs: []
  type: TYPE_NORMAL
- en: After it has finished reading, fire `myapp-undirty` in order to know whether
    it is in a clean condition. The button to fire the `myapp-show` event is already
    installed in the CT, so if you press the button, it will signal and begin to read.
  prefs: []
  type: TYPE_NORMAL
- en: Of course it's the processing of the `readForm` method, so it's only the fixed
    test data that will be read. But we can implement the reading from the database
    with SQL along with the implementation of `writeForm` that happens in the next
    chapter. With the name specified on the server side, we need to set a name in
    the field on the client side. If the name is correctly set up, the data should
    be inserted automatically.
  prefs: []
  type: TYPE_NORMAL
- en: The Bill form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, implement `Bill` in the same way as `Quotation`. Firstly, configure
    Ext Direct in the CT.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like in the previous step, we will add the code necessary for Direct (source
    file: `11_reading_data_bill/ct/bill/app_edit.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure it without forgetting about reading the `API` key. This also repeats
    the process of making the HTML read `api.php` (source file: `11_reading_data_bill/ct/bill/app_edit.html`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now prepare the server side. We will add the `API` class for Direct that''s
    used by the `Bill` class (source file: `11_reading_data_bill/php/config.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Next, implement the class defined by `config.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the code is very long, please refer to the following source file on
    this occasion:'
  prefs: []
  type: TYPE_NORMAL
- en: '`11_reading_data_bill/php/classes/MyAppBill.php`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, configure the direct function in the `API` config file. Let''s define
    the API property in the same way as we did for the `MyApp.view.quotation.Edit`
    class (source file: `11_reading_data_bill/app/view/bill/Edit.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, implement the event handler `myapp-show`. This is really similar to
    the implementation of `MyApp.controller.quotation.Edit`, so please try it for
    yourself. If you need to, you can refer to the source file at `11_reading_data_bill/app/view/bill/Edit.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Writing data and validations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In regard to the writing process, as I mentioned before, just implement `MyAccount`
    and implement `writeForm` of `MyAccount`.
  prefs: []
  type: TYPE_NORMAL
- en: This is also quite long, so please refer to the source file `12_writing_data_and_validations/php/classes/MyAppMyAccount.php`.
  prefs: []
  type: TYPE_NORMAL
- en: The content of the process is simple; however, if you look at the PHP code,
    it looks pretty complicated. I'll try to explain it simply.
  prefs: []
  type: TYPE_NORMAL
- en: First, to return the associative array as a return value in the same way as
    the others, we have to set `success` as `true` and relay to the client that the
    writing process has finished normally.
  prefs: []
  type: TYPE_NORMAL
- en: At the beginning, there are places where we set the associative array with a
    key called `errors`, then set a field name key inside and insert a message. This
    is the input check on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: If you use Ext Direct, this completes the input check.
  prefs: []
  type: TYPE_NORMAL
- en: Under errors, put in the field name for the error target and just by entering
    the error message in there, the server side automatically displays a red frame.
    If you hover the mouse over it, the message you set up on the server side is displayed.
    In other words, you need zero lines of programming code on the client side for
    error processing.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, you receive the JSON data by communicating through AJAX, but we need
    to define the error processing on the client side and the server side. So, I'm
    sure we would all prefer to use Ext Direct, which automatically processes this
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you get used to this way of developing, you'll get hooked and you won't be
    able to go back.
  prefs: []
  type: TYPE_NORMAL
- en: Again, because you can wholly separate the client side and server side, one
    engineer does not need to construct both. Instead, it's possible to progress the
    work by completely separating the server side and client side. Once the input
    check has been passed, the user information is acquired from the database where
    the session ID is being saved.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, set up the success key that displays `true` when the processing has
    been completed. `writeForm` is an implemented method used when writing form data.
    In the member on the server side that writes the form data, you need to set the
    `formHandler` method to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Everyone already has `formHandler` in `config.php` set to `true`, but when you
    get down to defining your own projects in a similar way, people often encounter
    problems when they forget to set the `formHandler` method to `true` meaning the
    data is not sent.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Set the `formHandler` method to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Great work so far! This was quite a long chapter, but this was also integral
    to our application (yes, all the chapters are integral, but this one more so!).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we started with the login screen and then implemented the `Edit`
    screen that uses forms from each screen. At the end, we learnt about Ext Direct.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll implement the `List` and `Search` functions for each
    screen that uses Ext Direct. Have a quick coffee break and carry on when you're
    ready!
  prefs: []
  type: TYPE_NORMAL
