- en: Chapter 6. Creating Grids
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several different routes to take when creating basic site layouts,
    and in many cases, developers may decide to use CSS grids.
  prefs: []
  type: TYPE_NORMAL
- en: A classic example for those using CSS pre-processors, is of course, the SASS
    grid system, **Bourbon Neat**—a great package, spoiled by the need to install
    Ruby. We can easily fix this in PostCSS, by using one of several plugins available,
    without the need for extra dependencies. In this chapter, we'll take a look at
    what's available, and work through some examples, using a plugin for creating
    grids within PostCSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover a number of topics throughout this chapter, which will include:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the basic principles of using CSS grids
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the grid plugins available for use within PostCSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working through some simple examples using Bourbon Neat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replicating pure SCSS examples using the PostCSS plugin, PostCSS-Neat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding responsive capabilities using the PostCSS-media-minmax plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get cracking…!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing grid design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The principles of using grids in design are not new, they date from the Second
    World War, with a number of graphic designers questioning the design of conventional
    page layouts, in favor of designing a system that provided a flexible, yet coherent,
    layout.
  prefs: []
  type: TYPE_NORMAL
- en: The same principles have been transferred to the web, starting with plain HTML,
    and CSS-based designs, before newer frameworks took over and helped to make construction
    easier.
  prefs: []
  type: TYPE_NORMAL
- en: It doesn't matter how the design is constructed, we can of course use HTML and
    CSS, or we might favor the image template approach (using packages such as `PhotoShop`),
    particularly if responsibility for designing the front end falls with a different
    team.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are perfectly acceptable methods, but require a lot of manual effort—in
    this age of web design, time is critical; we can instead make use of newer frameworks
    (such as SASS, Bourbon Neat, or Bootstrap) to create our grids, as shown in this
    example (which uses plain SASS):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing grid design](img/BO5194_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see this type of layout in action, if we go ahead and extract the `Tutorial28`
    folder from the code download that accompanies this book, then review it using
    a browser. We will see this grid appear, the `style.css` file used by this demo
    was created using the online SASS playground, Sassmeister at: [http://www.sassmeister.com](http://www.sassmeister.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Much of the code used in this demo centers around each column width and the
    overall .wrapper container; if you take a look at the code, you will notice that
    there are no static values for column widths. There are a couple of static values,
    but their sizes are not critical to the overall effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key to our demo working centers around this block of CSS styling:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing grid design](img/BO5194_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we''re using SASS''s interpolation to first build our media query (to
    make it responsive), followed by styles for a series of columns that form our
    grid. When compiled, it creates a number of styles that apply to each part of
    our grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing grid design](img/BO5194_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's a simple matter of matching up the style with the number shown on the grid.
    If we want to change the widths, we simply need to increase the number of columns,
    and our `for` statement will automatically calculate a new set of values at the
    next compilation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, enough chitchat: time, I think, for a demo! Throughout this chapter,
    we will work through the principles of migrating from some basic examples using
    SASS, through to using Bourbon Neat, before converting to using PostCSS plugins.
    We always have to start somewhere, so let''s begin with automating our compilation
    process using SASS.'
  prefs: []
  type: TYPE_NORMAL
- en: Automating the compilation process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '"Installing SASS?" I hear you ask Why, when this book is about PostCSS?'
  prefs: []
  type: TYPE_NORMAL
- en: 'I hear you, it''s a good question: there is logic, though, in this madness—let
    me explain all:'
  prefs: []
  type: TYPE_NORMAL
- en: While we are installing SASS, we're not going to use the standard route to installing
    it; instead, we're going to use the `gulp-sass` plugin. This allows us to make
    the initial switch to using a `gulp` file; this puts us one step further on down
    the route to converting our processes to use PostCSS. The use of a `gulp` file
    provides a convenient framework where we can switch components in, or out, while
    we transition to using PostCSS.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 12](ch12.html "Chapter 12. Mixing Preprocessors"), *Mixing Preprocessors*,
    we will see how PostCSS works well with other preprocessors, as a basis for adopting
    a consistent approach to compiling code.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, without further ado, let''s make a start on installing the `gulp-sass`
    plugin, before putting it to work:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by firing up a Node.js command prompt session, then changing the
    working folder to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the prompt, go ahead and enter this command, then press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Don't close the window, we will need it shortly!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Node will go away and install `gulp-sass`; it returns to the prompt when the
    installation is completed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the plugin installed, we now need to compile our code—go ahead and extract
    a copy of the `Tutorial29` folder to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of the `sass – pre-compile` folder to the `src` folder at
    the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also need to add the `gulpfile.js` and `package.json` files from the `Tutorial29`
    folder to the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Revert back to the Node.js window we had earlier, then at the prompt, enter
    `gulp` and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The files will now compile—once completed, copy them into the `css` folder within
    the `Tutorial29` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try previewing the results of our work in a browser; if all is well, we should
    see something akin to this screenshot:![Automating the compilation process](img/BO5194_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right, we now have automatic support for compiling in place; "What next?" I
    hear you ask. We''re one step closer, in that our code can now be compiled automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Automating the compilation process](img/BO5194_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: However, manual effort is still required to construct our grid! Let's start
    to change that now, there are several frameworks available that we can use, but
    in my view, one of the cleanest is SASS's Bourbon Neat. We'll use this as the
    basis for our next few exercises, before migrating to use the PostCSS version
    of this framework.
  prefs: []
  type: TYPE_NORMAL
- en: Adding support for Bourbon Neat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the uninitiated, SASS''s grid capability is provided by the Bourbon Neat
    add-on (available from [http://neat.bourbon.io/](http://neat.bourbon.io/)). For
    the purposes of our exercise, we''re going to use the Node versions of the framework—this
    requires two installations to be completed, so let''s go ahead and do that now:'
  prefs: []
  type: TYPE_NORMAL
- en: If you still have it open, revert back to the Node.js command prompt session
    from the previous demo; otherwise, open a new one and change the working folder
    to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the prompt, enter these two commands in turn, pressing *Enter* after each:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Both plugins will have installed correctly when we see a result akin to this
    screenshot:![Adding support for Bourbon Neat](img/BO5194_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the plugins now installed, we need to modify our `gulp` file—go ahead
    and add this at line 5:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, leave a line, then add the code as shown, at line 7:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The original SASS task can be replaced with this new task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The reference to SASS in the default task is now incorrect—go ahead and change
    it to: `gulp.task(''default'', [''styles'']);`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, change this line as indicated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We're now ready to test our compilation process—go ahead and extract a copy
    of the contents of `style – pre-compile.scss` from the code download and save
    it to the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, we can run `gulp` from a Node.js command prompt. If this works
    okay, we should get a `style.css` file appear in the `dest` folder. If we open
    it up, we should see some compiled styles, as follows, that prove Neat is installed
    and working:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point, we now have a working compilation process, and we're good to
    go with building a working site! For now, don't worry too much about the individual
    styles in the compiled `test.css` file, we will cover this in more detail over
    the next few pages. Let's put our new compilation process into practice and assemble
    a working example, so that we can see the grid facility in action.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an example with Bourbon Neat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Constructing a site using Bourbon Neat is a simple process, it does not require
    any special markup on our web page; the effort is all within the compiled style
    sheet.
  prefs: []
  type: TYPE_NORMAL
- en: To prove this, we'll construct a simple web page that could easily be part of
    any website—I've used a Japanese theme as the basis for my page, but the principles
    we will use can apply to any site. You'll see that (with the exception of the
    standard SASS style of code used) there are only three instances where we have
    used Bourbon Neat-specific code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a start:'
  prefs: []
  type: TYPE_NORMAL
- en: From the code download that accompanies this book, go ahead and extract a copy
    of `Tutorial30`, and save it to the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of the `sample site – pre-compile` from within the `Tutorial30`
    folder to the `src` folder within our project area. Go ahead and rename it as
    `sample.scss`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, fire up a Node.js command prompt, then change the working folder to our
    project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the prompt, enter `gulp`, then press *Enter*—Node.js will compile the code;
    if all is well, we should see two compiled style sheets and a source map in the
    `dest` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go ahead and copy the contents of the `dest` folder into the `css` folder at
    the root of the `Tutorial30` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we try previewing the results of our work, we should see a stylish page
    appear, with our Japanese theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an example with Bourbon Neat](img/BO5194_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The demo covers a couple of key points and useful tricks, so let's dive in and
    work through them in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring our demo in more detail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, be surprised to hear that, our first tip is not directly related
    to SASS or even Bourbon Neat, but to the color scheme!
  prefs: []
  type: TYPE_NORMAL
- en: '"Why", I hear you ask, "are we talking about the color scheme first?" There
    is a good reason for this: we''ve used variables to reference our colors, but
    could equally have used SASS functions to create the values. We''ve already covered
    this back in [Chapter 5](ch05.html "Chapter 5. Managing Colors, Images, and Fonts"),
    *Managing Colors, Images and Fonts*, where we covered the use of the `postcss-color-function`
    plugin to build these values; we will use it again later in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The real tip here, though, is using a nifty applet by Lokesh Dhakar, called
    **Color Thief** (hosted at [http://lokeshdhakar.com/projects/color-thief/](http://lokeshdhakar.com/projects/color-thief/)).
    We can simply drag and drop our header image in and get a full swatch of suitable
    colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring our demo in more detail](img/BO5194_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The only downside is that it doesn't provide the color values; we can get these
    from the page's source instead.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your preference is to use RGB(A) colors instead, then a site such as **Color
    Hexa** ([http://colorhexa.com](http://colorhexa.com)) will be a great help.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key to our demo is at lines 33, 63 and 69-these are Bourbon Neat mixins
    that control the format of the outer container (line 33):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring our demo in more detail](img/BO5194_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'They also control the format of each of the two content areas within (lines
    63 and 69):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring our demo in more detail](img/BO5194_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When compiled, the `outer-container` mixin adds a `max-width` of 72% to the
    `.wrapper` class controlling the main section, while the `span-columns()` mixins
    add `float`, `display`, `width`, and `margin-right` attributes to each element,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring our demo in more detail](img/BO5194_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In addition to the `outer-container()` and `span-columns()` mixins, the demo
    uses percentage values as much as possible, where `rem` or `pixel` values have
    been specified, then maintaining a cohesive design when resizing these elements
    is less critical.
  prefs: []
  type: TYPE_NORMAL
- en: We will, however, make some improvements later in this chapter, when we improve
    the responsive capabilities of our demo. For now, let's continue with our transition,
    and introduce the use of PostCSS plugins into our process.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the grid plugins in PostCSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter we've used SASS with Bourbon Neat to produce our grids.
    It's a perfectly valid option to use, but is not the only one available. We might
    have preferred to work with something like Bootstrap or the Semantic Grid System
    instead; it's ultimately down to our personal choice as to which grid system we
    use, based on our preferences and requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Up until now, we''ve focused on using Neat. This is largely due to familiarity
    and ease of use. There will come a point, though, when we need to make the transition
    to using PostCSS—the beauty is that there is a dedicated plugin available for
    using Neat within PostCSS, at [https://github.com/jo-asakura/postcss-neat](https://github.com/jo-asakura/postcss-neat).
    It''s not the only grid system plugin available for PostCSS, so let''s take a
    moment to cover the others that can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Grid`: Downloadable from https://github.com/andyjansson/postcss-grid, this
    plugin splits some of the configuration between PostCSS and the stylesheet, which
    helps to simplify the calculations required for formatting each column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Lost`: Available from [https://github.com/corysimmons/lost](https://github.com/corysimmons/lost),
    it describes itself as the Autoprefixer for grid systems; it provides support
    for most preprocessors, such as Less, SASS, or Stylus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Simple-grid`: From [https://github.com/admdh/postcss-simple-grid](https://github.com/admdh/postcss-simple-grid),
    this plugin takes a different route: all of the configuration is done in CSS,
    not within the task configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without further ado, it's time for us to make the transition—let's make a start
    by getting the plugin installed and configured for use.
  prefs: []
  type: TYPE_NORMAL
- en: Transitioning to using PostCSS-Neat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Making the transition to PostCSS is relatively straightforward. We need, of
    course,to update our compilation process to remove links to SASS, and introduce
    our PostCSS plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The transition process will be completed over this and the next two sections.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of changing the CSS, it's a little more complicated, as we have to
    work out how many columns are required for each grid block. Fortunately, our example
    is relatively straightforward, as we numbered the original blocks with the appropriate
    column count, so we can use that as a basis for changing our CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a start with updating our compilation process:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by extracting a copy of the `Tutorial31` folder from the code download
    that accompanies this book. Save it to the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `Tutorial31` folder, go ahead and extract copies of `package.json`
    and `gulpfile.js` files. Save these to the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to install the `postcss-neat` plugin. For this, fire up a Node.js
    command prompt, then change the working folder to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the prompt, go ahead and enter this command, then press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Node will go away and install our plugin—the plugin is installed, when we see
    this confirmation:![Transitioning to using PostCSS-Neat](img/BO5194_06_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have a plugin installed and configured for use. Before we create a test
    to confirm it works OK, let's take a quick look at our gulp file, at the root
    of our project area.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you were expecting a complex configuration, then I''m sorry to disappoint
    you—it''s even easier than installing Bourbon and Neat using the normal method
    outlined on their site! Our gulp file contains the requisite variable calls to
    each plugin at the start, with a watch facility at the end of the file. The section
    of interest to us is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This setup should satisfy most scenarios, with a default of 12 columns; if
    there is a need to override it, we can do so by specifying the appropriate option
    in our configuration object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We will use this option later in this chapter in the *Testing our configuration
    section*, when we build our test example.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a full list of the attributes that can be modified, head over to [https://github.com/jo-asakura/postcss-neat#custom-settings](https://github.com/jo-asakura/postcss-neat#custom-settings).
  prefs: []
  type: TYPE_NORMAL
- en: We have a basic configuration now in place, but hold on...it looks a little
    short! The sharp-eyed among you should notice that we've included additional options
    in the `gulp` files in previous exercises, such as creating source maps or minifying
    our CSS files. Let's fix that now, by amending our gulp file to include these
    missing options. Everything will then be in place, ready for when we create our
    example site.
  prefs: []
  type: TYPE_NORMAL
- en: Refining our task list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our `gulp` file, as it stands, is perfectly usable, but isn't really as useful
    as it could be—there are a handful of tasks we've built into previous exercises,
    but which of these are missing here.
  prefs: []
  type: TYPE_NORMAL
- en: 'A perfect example is the addition of source maps, but how about minifying our
    code too? Let''s take a moment to refine our task list, and add in the missing
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first task is to add in some variables that will act as references for
    the various plugins we will use—this goes in immediately after the last `var`
    statement, at the top of our `gulp` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The first task to add in is a facility to lint our styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our styles checked for accuracy and consistency, we can now minify our
    code. Add the following block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is to add a source map option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the additions to our `gulp` file, we need to adjust the main default task
    to call these additional tasks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have a watch facility in place, but it knows nothing about these extra tasks;
    let''s add them in now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We now have a working `gulp` file, that includes all of the configuration tasks
    required for our exercise—let's put it to the test by compiling some example code,
    to confirm it all works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Testing our configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A key part of our process is testing our `gulp` file to ensure it works; not
    only should it run all of the required tasks, but in the correct order, and produce
    the expected results. Although we've reused existing code for our gulp file, we've
    made some major changes to our `gulp` file—let's take a moment to test it is working,
    using the code from our previous demo.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get our demo working under PostCSS, we need to make some changes to our
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by resaving the `style.scss` file (from within the `css` folder
    in the `Tutorial31` folder) as a plain CSS file, and not a SASS stylesheet, we've
    removed the use of SASS from our previous demo, making the use of the `.scss`
    extension redundant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we used a `.wrapper` class in our previous demo. This needs to be modified
    as indicated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our `col-*` class rules need to change too. In place of the static percentages
    from the old demo, we''re going to replace them with this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our code is now ready, so go ahead and copy the `style.css` file into the `src`
    folder at the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, fire up a Node.js command prompt, then change the working folder to our
    project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the command prompt, enter `gulp` then press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all is well, we should see a compiled `style.css` file appear in the `dest`
    folder. If we open it up, we should see a number of styles displayed that relate
    to each column, such as is shown in this screenshot:![Testing our configuration](img/BO5194_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we try previewing the demo in a browser, we should see something akin to
    this screenshot. Notice how similar it is to the original version, which we built
    in SASS:![Testing our configuration](img/BO5194_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The demo that we've constructed is nearly identical to the original version.
    This proves that we have a working capability, which we can use to build our sites.
    The changes we made to our code are very simple, we added a `@neat-outer-container`
    to define how wide our site should be, followed by multiple instances of `@neat-span-columns`,
    to define how many columns each element should span.
  prefs: []
  type: TYPE_NORMAL
- en: Let's put some of this new knowledge to constructing something a little more
    useful, in the form of an example site with content. We'll reuse the example site
    page we created earlier in the chapter, and work through converting it for use
    with PostCSS plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a site using Neat and PostCSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember our demo with a Japanese theme from earlier, in *Creating an example
    with Bourbon Neat?* It's a simple demo, using Bourbon Neat to help create our
    grid. The downside, though, is, of course, the dependency on SASS!
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, we can fix that: PostCSS has a plugin available that mimics Bourbon Neat,
    but is written entirely in JavaScript, so there is no dependency on SASS. It''s
    easy to install and use, over the next few pages, we''ll work through the changes
    required to switch to this plugin.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First though, let''s get it set up:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll begin by extracting a copy of the `Tutorial32` folder from the code download
    that accompanies this book. Save this to the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `sample pre-compile.css` file to the `src` folder at the root of our
    project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `gulpfile.js`, `samplesite.html` and `package.json` files to the root
    of our project area. These should replace any existing versions that are present.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to install two plugins, although we've covered using `postcss-css-variables`
    earlier in the book, installing them will ensure the right references are added
    to the `package.json` file. Go ahead and fire up a Node.js command prompt, then
    change the working folder to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command prompt, enter these two statements in turn, pressing *Enter*
    between each one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When both plugins are installed, go ahead and enter `gulp`, then press *Enter*
    to fire off a compilation of our style sheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all is well, we should see two style sheets and a source `map` folder appear
    in the `dest` folder. Copy these to the `css` folder at the root of our project
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we fire up a copy of `samplesite.html`, we should see our demo appear as
    before, but this time without the dependency on SASS:![Creating a site using Neat
    and PostCSS](img/BO5194_06_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do you notice any difference to our SASS-only version of this demo, from earlier?
    Hopefully not; while it may not be pixel-identical to the original, it is not
    far from it! However, it does show that with a little ingenuity, it is possible
    to make the transition to using PostCSS and still maintain the same results. It
    will require a few changes to your code and processes, so let's take a look at
    these in more detail, starting with the style sheet.
  prefs: []
  type: TYPE_NORMAL
- en: Making the change to PostCSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Making the switch requires changes in both the `gulp` task file and style sheet.
    These are not to change how the page will look, but to maintain the same theme
    from the original demo. The key changes made to the style sheet are:'
  prefs: []
  type: TYPE_NORMAL
- en: The `_reset.scss` partial style sheet that we import will no longer work, as
    we are removing the reliance on SASS. To maintain its use, a compiled version
    was created using the online playground at Sassmeister ([http://www.sassmeister.com](http://www.sassmeister.com));
    we can then link to it from our markup page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you take a peek at the source version of `sample.css`, you will see a `:root`
    block at the top of the file; this replaces the `import` statements we used. This
    block can be used to store any variables used, and we will cover this in more
    detail when we explore the changes made to our `gulp` task file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We no longer needed the following three statements; they are used to debug
    the SASS version of Bourbon Neat, and were then removed:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We're using PostCSS equivalents for all of the variable statements. The SASS
    versions were modified using search and replace from `$...` to `var(--….)`, where
    the ... represents the variable name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our original code had a number of references to `Bourbon` mixins which had to
    be updated. We used the same search and replace principle, this time changing
    `@include outer…` to `@neat-outer…` throughout the code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To keep things simple, we manually calculated any instance where `$body-line-height`
    was referenced, and replaced the calculation with the result. We could have stayed
    with using calculations, but it would have required the use of another plugin
    which would have been overkill for their limited use in our code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also adjusted the width of the main area in our page; it's a minor quirk,
    but required to ensure we had two areas side by side, and not one above the other!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition to altering our style sheet, we also had to make some changes to
    the `gulp` task file. They center around replacing the main compilation task and
    adding in additional tasks to manage production and minification of our source
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: We added in the rename, lint-styles, and sourcemap tasks covered in earlier
    demos. These already worked well, and required no modification.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We stripped out the original styles task, and replaced it with this:![Making
    the change to PostCSS](img/BO5194_06_16.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This time, we're calling them `nested()`, `cssvariables()` and Neat plugins.
    These are referenced used variables and are added in at the top of our `gulp`
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Our final change is at the end of the `gulp` file, where we had to adjust the
    default and watcher tasks to include the additional tasks that we added to our
    `gulp` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At this stage, do we have a working demo ready for use? Well, not quite, but
    let''s try resizing our demo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making the change to PostCSS](img/BO5194_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hmm, what's happened to our content? It doesn't look great, does it? We can
    easily fix it though; it just requires the addition of some media queries to reorganize
    how our content is displayed on the screen. Let's dive in and take a look at what
    is needed to get our demo looking better at smaller sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Adding responsive capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although Bourbon does add a degree of responsivity to our code, it's not quite
    enough for our needs. If we try resizing our demo, it soon becomes apparent that
    the elements don't quite go where we would want them, to say the least!
  prefs: []
  type: TYPE_NORMAL
- en: 'The quickest way to see just how the design looks when resized for smaller
    devices is to use Google Chrome. Press *Shift* `+` *Ctrl* `+` *I* to enable Chrome''s
    developer tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding responsive capabilities](img/BO5194_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The design works well when viewed at 1280px x 1024px, but this soon changes
    if we change the available viewing estate to suit an Apple iPhone 6 at 375px by
    627px:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding responsive capabilities](img/BO5194_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See what I mean? It just doesn't look right, does it? Fortunately, it's easy
    to fix using PostCSS, so let's dive in and see what is required to get our design
    working again.
  prefs: []
  type: TYPE_NORMAL
- en: Correcting the design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Getting our design to work properly for smaller devices such as iPhones is
    easy when working with PostCSS: we can use the `postcss-media-minmax` plugin available
    from [https://github.com/postcss/postcss-media-minmax](https://github.com/postcss/postcss-media-minmax).'
  prefs: []
  type: TYPE_NORMAL
- en: '"How can PostCSS help us though?", I hear you ask. Easy, the point at which
    most people trip up when working with media queries is in setting the breakpoints,
    or determining where our designs break at specific sizes. The `postcss-media-minmax`
    plugin helps to make the text a little more human; after all, if a design works
    when the size is greater than or equal to an amount, why not say that in our code?'
  prefs: []
  type: TYPE_NORMAL
- en: 'To see what I mean, let''s get stuck into fixing our code. For simplicity,
    we will focus entirely on resizing our content for an iPhone 6, using 375px by
    627px as our breakpoint (as determined by using Google Chrome''s Responsive Design
    view). We will continue exactly where we left off from the previous demo:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We first need to install the `postcss-media-minmax` plugin—to do this, fire
    up a Node.js command prompt session, then at the prompt add this command and press
    *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, open up a copy of the `sample.css` file from within the `src` folder
    in our project area. We''ll add the media query first, adjusted to ensure we catch
    the right breakpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Immediately inside the query, go ahead and add this rule. We don''t want to
    resize below `375px` as a minimum:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The header image text needs to be resized to a smaller space, and we can also
    reduce it in size and move it over to the left a little:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `#alpha` content area (or menu) has automatically resized itself, but the
    main content area (`#beta`) is too wide; let''s resize it down to fit. Our area
    won''t cope with all of the text, so we''ll add an overflow attribute, and set
    it to hide text outside the viewable area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point, we need to install the `postcss-media-minmax` plugin, so fire
    up a Node,js command prompt and change the working folder to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the prompt, enter this command, then press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the plugin is installed, enter `gulp` at the command prompt, and press
    *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PostCSS will now compile the code, and if all is well, we should see updated
    style sheet and source `map` files appear in the `dest` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go ahead and copy these into the `css` folder in the `Tutorial32` folder, then
    try previewing the results in a browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If all is well, we should see something akin to the following screenshot, when
    enabling Chrome''s Responsive Design view, and switching the Device setting to
    Apple iPhone 6:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Correcting the design](img/BO5194_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The changes we''ve made to our code are simple, and limited to supporting iPhones.
    This is just the tip of the iceberg, though: there is so much more we can do!'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, instead of specifying an exact width value as our `min-width`
    attribute (or for the width of #beta, for that matter), we could consider using
    `@neat-span-columns` to provide this value for us. Of course, we can''t limit
    ourselves to one media query, we need to ensure we have enough media queries to
    cater for the devices we need to support.'
  prefs: []
  type: TYPE_NORMAL
- en: This does not mean that we need to have a 1:1 relationship between a query and
    a device. Provided we design our queries carefully, we can set existing ones to
    cover several devices. Ultimately, though, the principle is still the same, but
    instead of using the standard colon notation, we can use the easier to read `>=`
    or `<=` symbols to define the breakpoint range when working with queries using
    PostCSS.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For many developers or designers, using grid-based development forms a key part
    of their working process. Many will be familiar with the likes of Bootstrap or
    Bourbon Neat; we can easily replicate the same functionality within PostCSS. Let's
    take a moment to review what we've covered throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We kicked off with a brief introduction to using grid-based development, before
    swiftly moving on to beginning the transition process to using PostCSS. Our first
    stop was a look at automating the compilation process so we can make the switch
    to using Gulp.
  prefs: []
  type: TYPE_NORMAL
- en: Next up, we then took a look at making the switch from using pure SASS to using
    the SASS-based grid system, Bourbon Neat; we covered how easy it is for Bourbon
    to build the structure of our grid system with minimal effort.
  prefs: []
  type: TYPE_NORMAL
- en: We then moved on to exploring the plugin options available from within PostCSS,
    before making the transition to using the `postcss-neat` plugin. We then explored
    how easy it is to refine our Gulp task process, by adding in tasks that we introduced
    from earlier in the book, to help build up a process that more closely represents
    real-world development. To confirm the process works, we performed a test using
    an adapted version of the original demo from Bourbon Neat, before moving on to
    converting our Japanese-themed demo to using PostCSS equivalent plugins. We then
    rounded out the chapter with a brief look at refining the responsive capabilities
    within our design, to ensure it works better on smaller devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Phew, it may not seem like much, but we certainly covered a lot over the last
    few pages! But, as always, we continue apace: in the next chapter, we''ll really
    get animated (sorry, pun intended!), with a look at how PostCSS can help with
    animating content.'
  prefs: []
  type: TYPE_NORMAL
