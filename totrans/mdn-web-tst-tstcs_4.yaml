- en: '*Chapter 4:* Building a Test Suite with TestCafe'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, as we've been through the main concepts of TestCafe and reviewed its arsenal,
    let's draw a weapon and write some tests! The main goal here will be to get familiar
    with how to write a set of end-to-end tests (a test suite) with TestCafe. This
    is extremely important because the testing techniques that we will cover are universal
    and can be reused to write automated tests for any web project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up, this chapter will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a test.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging the tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing the test project log in tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding verifications to the test project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding custom code execution to the test project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding more tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we mentioned in [*Chapter 3*](B16280_03_Final_JM_ePub.xhtml#_idTextAnchor043)*,
    Setting Up the Environment*, while writing code throughout this book, we will
    follow some coding conventions: indent with two spaces for `.json` files, four
    spaces for `.js` files, use semicolons, and use single quotes. We will also utilize
    JavaScript ES6+ syntax, including template strings.'
  prefs: []
  type: TYPE_NORMAL
- en: 'All code examples for this chapter can be found on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TestCafe supports tests written using JavaScript, TypeScript, or CoffeeScript
    with all modern features, such as arrow functions and `async/await`. In addition
    to that, TestCafe will automatically transpile TypeScript and CoffeeScript code
    before running tests, so you do not need to tackle it on your own.
  prefs: []
  type: TYPE_NORMAL
- en: As we agreed initially, throughout this book we will be using JavaScript to
    write the tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'In continuation of our previous efforts from [*Chapter 3*](B16280_03_Final_JM_ePub.xhtml#_idTextAnchor043)*,
    Setting Up the Environment*, we already have `test-project` folder with the `.testcaferc.json`
    configuration file in it. So, let''s start by opening any shell (for example,
    we will use Terminal with bash) and following the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `test-project` folder and create a folder for our tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now go to that folder and create a `basic-tests.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `basic-tests.js` in a code editor (or IDE) of your choice and let's create
    a simple test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will start by including the `testcafe` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then we declare a fixture using the `fixture` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the first test using the `test` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As we selected Redmine ([http://demo.redmine.org/](http://demo.redmine.org/))
    as our test project, set this URL as a starting page for all tests in the `''My
    first set of tests''` fixture using the `page` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests1.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests1.js).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As we now have an empty test structure, let's run it and inspect the output.
  prefs: []
  type: TYPE_NORMAL
- en: Running the test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can easily run the test from a command shell by executing a single command
    with the target browser and file path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The shell output will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1: Shell output after the test run'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.01_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – Shell output after the test run
  prefs: []
  type: TYPE_NORMAL
- en: 'TestCafe will automatically spawn the chosen browser instance and will start
    running the test. As you can see in the test output: `The "src", "browsers" options
    from the configuration file will be ignored.` This means that we already specified
    our default browser and path to the tests in `.testcaferc.json` (you can see it
    here: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/.testcaferc.json#L3](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/.testcaferc.json#L3))
    and the command shell options that we provided just overrode the defaults.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we can now simplify our test run command even more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now TestCafe will just take the default options from `.testcaferc.json` and
    the result of the test run will be the same. We will review more **Command-Line
    Interface** (**CLI**) settings later on in the [*Chapter 5*](B16280_05_Final_JM_ePub.xhtml#_idTextAnchor125)*,
    Improving the Tests*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Keep the browser that is running tests active and do not minimize the browser
    window. Minimized browser windows and inactive tabs tend to get shifted to a reduced
    resource consumption mode where tests are not guaranteed to be executed correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Performing actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s perform some actions on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests2.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests2.js).'
  prefs: []
  type: TYPE_NORMAL
- en: The previous fixture contains a simple test that clicks the `t`. The test controller
    object lets us access the API of the test run. The `await` keyword should be used
    when calling test actions or action chains to wait for them to complete.
  prefs: []
  type: TYPE_NORMAL
- en: As we learned how to run a basic test, let's touch the ground on how to deal
    with debugging and errors.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging the tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s see how we can debug our tests. We will review it in two blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging tests in TestCafe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging tests in Chrome Developer Tools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging tests in TestCafe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s use the code from the previous example to create a `basic-test-wrong.js`
    file with a slightly modified class name in the selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-test-wrong.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-test-wrong.js).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The class name `.login-wrong` is used instead of `.login` to provoke the **element
    not found** error. Let''s launch our test to confirm this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2: Shell output after the test run with the error'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.02_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – Shell output after the test run with the error
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, TestCafe outputs the error and the line of code where it occurred.
  prefs: []
  type: TYPE_NORMAL
- en: 'But how do you debug the test even before it failed? For that purpose, TestCafe
    has the `t.debug` method. Let''s add it to our test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This method is used to pause the test execution and debug it with the browser''s
    developer tools. You will see some buttons to navigate the test run flow in the
    footer of the browser window:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unlock Page**: Allows us to interact with the browser page that is currently
    open.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resume**: Allows us to continue the test run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Next Action**: Executes the next action or assertion:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 4.3 – TestCafe debug buttons'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.03_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – TestCafe debug buttons
  prefs: []
  type: TYPE_NORMAL
- en: 'And the output will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4: Shell output in debug mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.04_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – Shell output in debug mode
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, TestCafe outputs the line of code where `t.debug` method is
    called.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also run the tests with `--debug-mode` flag. It will enable debugging
    and pause the test execution right before the first action or assertion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can use the `--debug-on-fail` flag. It will pause the test when it fails
    and will allow you to view the tested page and determine the cause of the failure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: When you are satisfied with the page debugging, just click the **Finish** button
    in the footer to kill the test execution process.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's see how to debug a test in Chrome Dev Tools.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging tests in Chrome Developer Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another useful way to debug the tests is to do it through Node.js in Chrome
    Developer Tools. You will need Google Chrome and Node.js v8 or higher to perform
    all the actions. To debug using the Chrome Developer Tool, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, put the `debugger` keyword in test code where you want the process
    to stop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, to activate Node.js debugging mode, add the `--inspect-brk` flag to the
    test run command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open Google Chrome and navigate to chrome://inspect. In the **Remote Target**
    section, find the Node.js debugger and click **Inspect**. Chrome will launch Developer
    Tools and the debugger will stop test execution at the first line. Click the **Resume
    script execution** button to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.5: Google Chrome Developer Tools debugger'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.05_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – Google Chrome Developer Tools debugger
  prefs: []
  type: TYPE_NORMAL
- en: As you can see the test execution gets paused at the line with `debugger` keyword
    allowing you to debug the code.
  prefs: []
  type: TYPE_NORMAL
- en: Now, as have learned how to debug the test code, let's go further and write
    some login tests for our test project.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the test project log in tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed in [*Chapter 1*](B16280_01_Final_JM_ePub.xhtml#_idTextAnchor013)*,
    Why TestCafe*, we will need a test user to log in to the portal and perform any
    further tests. So, let's start with creating a new user with an email address
    – `test_user_testcafe_poc{randomDigits}@sharklasers.com` – and password – `test_user_testcafe_poc`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s declare the following test to register a new user in `basic-tests.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The test will perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The test clicks on the **Register** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test fills in the **Login** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test fills in the **Password** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test fills in the **Confirmation** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test fills in the **First name** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test fills in the **Last name** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test fills in the **Email** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Submit** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests3.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests3.js).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As you can see in the previous code block, we are using `1234` as a random
    number for now. It is simple, but we will have to manually update this number
    each time we want to create a unique user. Let''s improve it to be done automatically
    by adding a simple open source library that will generate a timestamp for us.
    Open a shell and execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install the `js-automation-tools` library and save it to the list
    of our project''s dependencies in `package.json`. Now let''s update the code to
    generate random digits with this library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests4.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests4.js).'
  prefs: []
  type: TYPE_NORMAL
- en: As you can now see, each time we run the test an email with a unique set of
    digits such as `test_user_testcafe_poc1588556993141@sharklasers.com` is generated,
    so we don't have to worry about new users anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about the `js-automation-tools` library and how to use all
    its features here: [https://github.com/Marketionist/js-automation-tools](https://github.com/Marketionist/js-automation-tools).'
  prefs: []
  type: TYPE_NORMAL
- en: 'And so, as we now have a test that creates new Redmine user, let''s go forward
    and add a log in test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The test will perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The test clicks on the **Sign in** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test fills in the **Login** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test fills in the **Password** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Login** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests5.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests5.js).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As we now have all actions we need for creating users and logging in, let's
    add some verifications to make these two tests complete.
  prefs: []
  type: TYPE_NORMAL
- en: Adding verifications to the test project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Normally, each test should perform some actions and then check the result. As
    we already know from [*Chapter 2*](B16280_02_Final_JM_ePub.xhtml#_idTextAnchor027)*,
    Exploring TestCafe Under the hood*, TestCafe provides us with `t.expect`method
    to perform theassertions and verify the results of each test. So, let's add corresponding
    assertions to finalize user creation and log in tests.
  prefs: []
  type: TYPE_NORMAL
- en: Adding assertion for the user creation test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, the expected result for the user creation test is the **Your account has
    been activated. You can now log in.** notification, which should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the final assertion for the user creation test, we are getting
    a notification element by its id and then comparing its inner text value with
    the expected result.
  prefs: []
  type: TYPE_NORMAL
- en: Adding assertion for the log in test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The expected result for the log in test will be a block with the username of
    the currently active user that should be displayed in the top-right corner of
    the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests6.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests6.js).'
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate one more approach to assertions, in the login test we are verifying
    that the block with the username of the currently active user is present on the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the log out test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s also add a log out test to finish up with the `Redmine log in tests`
    fixture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests7.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests7.js).'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we are performing two assertions in the log out test:'
  prefs: []
  type: TYPE_NORMAL
- en: Verifies that the block with the currently active user is not present on the
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verifies that the **Sign in** link is present on the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we already have three tests in our test suite, let's add more and review
    how a custom code can be executed in TestCafe.
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom code execution to the test project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we already learned from the [*Chapter 2*](B16280_02_Final_JM_ePub.xhtml#_idTextAnchor027)*,
    Exploring TestCafe Under the Hood*, TestCafe lets you write code to be executed
    on the tested page; this way you can get web elements, URLs, and so on. Special
    kinds of functions are used to execute your code on the client side in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Selector`: To obtain any DOM elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClientFunction`: To obtain any data from the client side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These functions should be used in the same way as ordinary async functions,
    and you can use parameters to pass data inside such functions. The selector API
    provides methods and properties to select elements on the page and get their state.
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep a proper structuring of the tests, it is recommended to group them
    by fixture. So, let''s add a `Redmine entities creation tests` fixture and a `Create
    a new project` test to see how custom code execution works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The test will perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The test logs in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Projects** link in the top panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **New project** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test fills in the **Name** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Create** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test verifies that **Successful creation.** notification is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test verifies that the page URL contains the name of the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests8.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests8.js).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As our first fixture contains all login tests, a new fixture was created to
    include all tests for new entities creation. In addition to that, we added `ClientFunction`
    and introduced `getPageUrl` function to execute custom code and get the URL of
    the current page.
  prefs: []
  type: TYPE_NORMAL
- en: 'And the output will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6: Shell output with two fixtures'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.06_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – Shell output with two fixtures
  prefs: []
  type: TYPE_NORMAL
- en: Now, as we have fixtures for Redmine log in tests and Redmine entities creation
    tests, let's continue filling them up.
  prefs: []
  type: TYPE_NORMAL
- en: Adding more tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's continue writing more tests and structuring them into sets divided by
    fixtures.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the new issue creation test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start from `Create a new issue` test in the `Redmine entities creation
    tests` fixture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Note how we are creating a second set of random digits. We need them as now
    the tests are creating two projects, and each project should have a unique name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The test will perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The test logs in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test creates a new project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Projects** link in the top panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the project link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **New issue** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test fills in the **Subject** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test fills in the **Description** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test sets **Priority** to **High**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Create** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test verifies that created notification is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests9.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests9.js).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adding the new issue is displayed on a project page test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s move forward and add a test to verify that the issue is displayed on
    a project page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The test will perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The test logs in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test creates a new project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test creates a new issue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Projects** link in the top panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the project link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Issues** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test verifies that the issue''s **Subject** is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests10.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests10.js).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adding the issue editing test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s add a new fixture, `Redmine entities editing tests`, and add a test
    for issue editing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The test will perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The test logs in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test creates a new project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test creates a new issue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Projects** link in the top panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the project link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Issues** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the issue link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Edit** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clears the **Subject** field and fills it in with a new subject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test sets `Normal`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Submit** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test verifies that the **Successful update.** notification is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests11.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests11.js).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There are two interesting things to point out in this code example:'
  prefs: []
  type: TYPE_NORMAL
- en: As CSS selectors cannot access the element's text, the `.withText` method is
    used to get the element by its text. Addressing the element by its text is more
    stable than doing it with `option[value="5"]` as the value attribute can change
    if more options will be added to the dropdown. The other possible solution to
    get the element by its text can be to use XPath selector containing the text.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.selectText` and `.pressKey` methods are used to clear the field from its
    current text. This approach emulates real user behavior. Select all text in the
    input field and press the *delete* keyboard button to remove it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the updated issue is displayed on a project page test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s verify that the updated issue is displayed on a project page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'The test will perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The test logs in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test creates a new project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test creates a new issue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Projects** link in the top panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the project link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Issues** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the issue link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Edit** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clears the **Subject** field and fills it in with a new subject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test sets **Priority** to **Normal**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Submit** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Issues** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test verifies that the updated issue''s **Subject** is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests12.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests12.js).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adding the issue searching test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s add a test for searching the issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'The test will perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The test logs in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test creates a new project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test creates a new issue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test opens the **Search** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test types the issue''s subject into the **Search** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Submit** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test verifies that the issue is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests13.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests13.js).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adding the issue deletion test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s add a `Redmine entities deletion tests` fixture and `Delete the
    issue` test to demonstrate how to handle native browser dialogs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'The test will perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The test logs in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test creates a new project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test creates a new issue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Projects** link in the top panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the project link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Issues** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the issue link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The test clicks on the **Delete** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The test confirms the deletion in the browser modal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test verifies that the issue is not displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test verifies that the **No data to display** notification is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests14.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests14.js).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There''s one interesting thing to note in this test: we are using the `.setNativeDialogHandler`
    method before the browser dialog window will be triggered. We are passing a simple
    arrow function inside this method: `() => true`. All it does is just return `true`.
    It should be done this way to answer OK (confirm) to the browser dialog window
    when it will appear (you can read more about this method in [*Chapter 2*](B16280_02_Final_JM_ePub.xhtml#_idTextAnchor027)*,
    TestCafe under the Hood*, and here: [https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/setnativedialoghandler.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/setnativedialoghandler.html)).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the file uploading test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To demonstrate how to work with uploading files, let''s add an `Upload a file`
    test to the `Redmine entities creation tests` fixture. But before that, we will
    need to create a sample file that we will use for uploading, so open a shell and
    execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding commands, we are creating the `uploads` folder inside the `tests`
    folder, and then creating `test-file.txt` inside it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, as we have a dummy file prepared (you can see it on GitHub too: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/tree/master/ch4/test-project/tests/uploads/test-file.txt](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/tree/master/ch4/test-project/tests/uploads/test-file.txt)),
    let''s create a file uploading test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'The test will perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The test logs in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test creates a new project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Projects** link in the top panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the project link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Files** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **New** **file** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test sets the path to a file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Add** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test verifies that a link to the file is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test verifies that the MD5 checksum is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests15.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests15.js).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There''s one interesting thing to note in this test: we are using the `.setFilesToUpload`
    method to inject the file path to the file upload input on the page (you can read
    more about this method in the [*Chapter 2*](B16280_02_Final_JM_ePub.xhtml#_idTextAnchor027)*,
    TestCafe under the Hood*, and here: [https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/setfilestoupload.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/setfilestoupload.html)).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the file deletion test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s add one final test, `Delete the file`, to the `Redmine entities
    deletion tests` fixture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'The test will perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The test logs in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test creates a new project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test uploads a new file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Projects** link in the top panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the project link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test clicks on the **Files** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The test clicks on the trash bin icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The test confirms the deletion in the browser modal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test verifies that a link to the file is not displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test verifies that the MD5 checksum is not displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests16.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch4/test-project/tests/basic-tests16.js).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'One interesting thing to note in this test is how to get the element with a
    chain of methods: `Selector(''.filename a'').withText(''test-file.txt'').parent(''.file'').find(''.buttons
    a'').withAttribute(''data-method'', ''delete'')`. Here, we are getting a link
    that has `test-file.txt` text, then searching for its parent element with the
    `file` class, then searching among its descendants for a link with the `data-method="delete"`
    attribute. This will guarantee that we clicked on the delete link for the corresponding
    file. You can read more about how to select the elements here: [https://devexpress.github.io/testcafe/documentation/guides/basic-guides/select-page-elements.html](https://devexpress.github.io/testcafe/documentation/guides/basic-guides/select-page-elements.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have concentrated on how to write tests for a real-life
    project. We crafted four sets of tests (fixtures) for the Redmine demo portal:
    log in tests, entity creation tests, entity editing tests, and entity deletion
    tests.'
  prefs: []
  type: TYPE_NORMAL
- en: Also, we learned some useful techniques such as how to debug tests, execute
    custom code, assert elements, clear inputs, press keys, confirm native browser
    alerts, upload files, and chain element selectors. All of these lessons can be
    applied to pretty much any other web project.
  prefs: []
  type: TYPE_NORMAL
- en: As our set of tests in now ready, in the next chapter we will be adding setup
    and teardown sections to our current code to improve its structure and enhance
    its maintainability.
  prefs: []
  type: TYPE_NORMAL
