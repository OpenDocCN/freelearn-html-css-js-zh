- en: Chapter 5. AngularJS, React, Express, and Meteor – Developing Your Web Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：AngularJS、React、Express和Meteor – 开发你的Web应用
- en: In the previous chapter, we learned the ways in which WebStorm helps us when
    working with the package manager and build tools, and about the workflow for modern
    development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了WebStorm在处理包管理器和构建工具时的帮助方式，以及现代开发的流程。
- en: 'In this chapter, we are going to deal with a couple of the most essential and
    progressively developing web frameworks and platforms, and then learn how indispensable
    WebStorm can be when working with them. We will get acquainted with the following
    technologies in relation to WebStorm:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将处理几个最基本且不断发展的Web框架和平台，并学习当与它们一起工作时，WebStorm是多么不可或缺。我们将了解以下与WebStorm相关的技术：
- en: 'AngularJS: a client-only framework'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AngularJS：一个仅客户端的框架
- en: 'React: a library for building user interfaces'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React：用于构建用户界面的库
- en: 'Express: a minimalist web framework for Node.js'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Express：一个针对Node.js的最小化Web框架
- en: 'Meteor: a full-stack framework running on top of Node.js'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Meteor：一个运行在Node.js之上的全栈框架
- en: AngularJS
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AngularJS
- en: '|   | *"Superheroic JavaScript MVW Framework AngularJS is what HTML would have
    been, had it been designed for building web-apps. Declarative templates with databinding,
    MVW, MVVM, MVC, dependency injection and great testability story all implemented
    with pure client-side JavaScript!"* |   |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| -- "Superheroic JavaScript MVW Framework AngularJS is what HTML would have
    been, had it been designed for building web-apps. Declarative templates with databinding,
    MVW, MVVM, MVC, dependency injection and great testability story all implemented
    with pure client-side JavaScript!" |'
- en: '|   | --[https://angularjs.org](https://angularjs.org) |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| --[https://angularjs.org](https://angularjs.org) |'
- en: As presented on the developer's website, AngularJS is a client-only framework
    for building single-page web applications aimed to simplify the development and
    testing of web applications. In this section, we are we are going to learn about
    the considerable assistance that WebStorm can provide when using AngularJS, by
    creating a very simple blog application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如开发者网站所示，AngularJS是一个仅客户端的框架，用于构建单页Web应用，旨在简化Web应用的开发和测试。在本节中，我们将通过创建一个非常简单的博客应用来了解WebStorm在使用AngularJS时提供的巨大帮助。
- en: 'Our application will be a simple blog CMS that will perform the following tasks:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用将是一个简单的博客CMS，它将执行以下任务：
- en: Display a list of entries
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示条目列表
- en: Display a single entry
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示单个条目
- en: Add a new entry
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新条目
- en: First, using the steps from the previous chapters, create a new **Empty Project**.
    When creating a new project, you will notice that there is a project type named
    **AngularJS**. You can use it in your development activities; it already comprises
    of all the necessary libraries and setting files. However, for now we are creating
    a blog from scratch so that you can see the multiple ways in which the various
    actions can be performed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用前几章中的步骤，创建一个新的**空项目**。在创建新项目时，你会注意到有一个名为**AngularJS**的项目类型。你可以在你的开发活动中使用它；它已经包含了所有必要的库和设置文件。然而，现在我们是从零开始创建一个博客，这样你可以看到各种操作可以执行的多重方式。
- en: '![AngularJS](img/00063.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![AngularJS](img/00063.jpeg)'
- en: Preparing the tools and libraries
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工具和库
- en: Once we have created our project, we need to install all the dependencies of
    our app. We will use the AngularJS library, a routing library named Angular Route,
    and a styling library like Bootstrap. For the installation process, we will use
    Bower.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了我们的项目，我们需要安装我们应用的所有依赖项。我们将使用AngularJS库，一个名为Angular Route的路由库，以及一个像Bootstrap这样的样式库。对于安装过程，我们将使用Bower。
- en: 'I don''t like it when Bower installs the components to the default in `bower_components`
    directory. So, let us create a `.bowerrc` file and indicate that we want our packages
    to be installed into the `vendor` directory, as shown in the following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我不喜欢Bower将组件安装到默认的`bower_components`目录中。因此，让我们创建一个`.bowerrc`文件，并指明我们希望我们的包被安装到`vendor`目录中，如下截图所示：
- en: '![Preparing the tools and libraries](img/00064.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![准备工具和库](img/00064.jpeg)'
- en: 'Now we can install all the necessary packages. First of all, we need AngularJS.
    Type and execute the following command in the terminal:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以安装所有必要的包。首先，我们需要AngularJS。在终端中输入并执行以下命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will download AngularJS inside our `vendor` folder, but we still need
    to include it in the `index.html` file. With this file open at the end of the
    `body` section, add a `<script>` tag and then start simply typing, for example,
    `ang`. Use autocomplete to let WebStorm find the necessary `.js` file:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在我们的 `vendor` 文件夹中下载 AngularJS，但我们仍然需要在 `index.html` 文件中包含它。在文件末尾的 `body`
    部分打开此文件，添加一个 `<script>` 标签，然后简单地输入，例如，`ang`。使用自动完成功能让 WebStorm 查找必要的 `.js` 文件：
- en: '![Preparing the tools and libraries](img/00065.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![准备工具和库](img/00065.jpeg)'
- en: WebStorm will know from now on that our application is based on Angular, and
    the `ng-` autocomplete and others will work inside your project.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在起，WebStorm 将知道我们的应用程序是基于 Angular 的，`ng-` 自动完成和其他功能将在您的项目中工作。
- en: After this, add another `<script>` tag, and in the `src` attribute, type `"app/app.js"`;
    this will be the core of our application. This file doesn't exist yet, but you
    can automatically create it. Select the file name in the `src` attribute and click
    on *Alt* + *Enter* . Then, click on the **Create File app.js** item, and WebStorm
    will create the missing file for you in the newly opened tab.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，添加另一个 `<script>` 标签，在 `src` 属性中输入 `"app/app.js"`；这将是我们的应用程序的核心。该文件尚不存在，但您可以自动创建它。选择
    `src` 属性中的文件名，然后点击 *Alt* + *Enter* 。然后，点击 **创建文件 app.js** 项，WebStorm 将在新打开的选项卡中为您创建缺失的文件。
- en: '![Preparing the tools and libraries](img/00066.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![准备工具和库](img/00066.jpeg)'
- en: 'Next, let us install Bootstrap. To do so, you can use Bower from the Terminal
    window:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们安装 Bootstrap。为此，您可以从终端窗口使用 Bower：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next, just like we did with angular sources, include the Bootstrap `.css` and
    `.js` files into your project (using the link and `<script>` tags, respectively).
    As Bootstrap uses jQuery and this will be installed too, don't forget to add a
    `<script>` tag for jQuery as well.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，就像我们处理 angular 源文件一样，将 Bootstrap 的 `.css` 和 `.js` 文件包含到您的项目中（分别使用链接和 `<script>`
    标签）。由于 Bootstrap 使用 jQuery，因此它也将被安装，别忘了添加一个用于 jQuery 的 `<script>` 标签。
- en: 'Another library that we are going to use in our project is the angular-route
    library. So, we need to use bower again to install it and then add it to the `index.html`
    file:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在项目中使用的另一个库是 angular-route 库。因此，我们需要再次使用 bower 来安装它，并将其添加到 `index.html` 文件中：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'All the manipulations that we have performed so far should result in the following
    code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们迄今为止所进行的所有操作都应该导致以下代码：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Immersing in AngularJS
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 沉浸在 AngularJS 中
- en: 'Now we can start building our application. Open the `app.js` file, declare
    a new module called `app`, and then add `ngRoute` as a dependency:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以开始构建我们的应用程序了。打开 `app.js` 文件，声明一个新的模块名为 `app`，然后添加 `ngRoute` 作为依赖项：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot is the output of the preceding code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是前面代码的输出：
- en: '![Immersing in AngularJS](img/00067.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![沉浸在 AngularJS 中](img/00067.jpeg)'
- en: 'You can use autocomplete so that all the code that you write next is automatically
    suggested by WebStorm. This not only reduces development time by removing the
    necessity to write everything manually, but also helps you to better realize and
    decide what is more appropriate in the current context:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用自动完成功能，这样您接下来编写的所有代码都将由 WebStorm 自动建议。这不仅通过消除手动编写一切的需要来减少开发时间，而且还有助于您更好地实现和决定在当前上下文中什么更合适：
- en: '![Immersing in AngularJS](img/00068.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![沉浸在 AngularJS 中](img/00068.jpeg)'
- en: However, this is not the only assistance that WebStorm provides you with. WebStorm
    supplies so-called quick templates, which enable you to quickly write some standard
    code. For instance, in our case, we will need to indicate three routes—to the
    entries list, entry page, and the page to add a new entry.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不是 WebStorm 为您提供的唯一帮助。WebStorm 提供所谓的快速模板，这使您能够快速编写一些标准代码。例如，在我们的案例中，我们需要指示三个路由——到条目列表、条目页面和添加新条目的页面。
- en: 'This is performed with the `$routeProvider` construction, which can comprise
    certain parameters. We need just two, `templateUrl` and controller, inside a `when`
    condition. So instead of typing this manually, you can simply type `ngrw` and
    press *Tab*:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过 `$routeProvider` 构造来实现的，它可以包含某些参数。我们只需要两个参数，即 `templateUrl` 和 controller，在
    `when` 条件内部。因此，您无需手动输入，只需简单地输入 `ngrw` 并按 *Tab* 键：
- en: '![Immersing in AngularJS](img/00069.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![沉浸在 AngularJS 中](img/00069.jpeg)'
- en: 'This will replace `ngrw` with the following code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将用以下代码替换 `ngrw`：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Moreover, the cursor will be placed directly between the two single quotes right
    after the word `when`. This may seem trifling but you needn't perform any unnecessary
    manipulations with your mouse.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，光标将直接放置在单词“when”之后的两个单引号之间。这看起来可能微不足道，但你不需要用鼠标进行任何不必要的操作。
- en: 'Our final code for the `app.js` file should look like the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终的 `app.js` 文件代码应该如下所示：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now that the new app module is created, we can bind it to the `index.html`
    page by adding `ng-app="app"` to the `<body>` tag, of course, by using the autocomplete.
    The final `<body>` opening tag should read as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在新的应用程序模块已经创建，我们可以通过在 `<body>` 标签中添加 `ng-app="app"` 来将其绑定到 `index.html` 页面，当然，使用自动完成功能。最终的
    `<body>` 打开标签应该如下所示：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We should also add a special container where Angular can render our templates.
    Insert the following code after the opening `<body>` tag:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该添加一个特殊的容器，让 Angular 能够渲染我们的模板。在 `<body>` 标签的打开标签之后插入以下代码：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We have created a container `<div>` for styling purposes as well. With this
    final change, we can move to creating the features of our application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了一个用于样式的容器 `<div>`。通过这个最后的更改，我们可以转向创建应用程序的功能。
- en: Loading the initial entries
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载初始条目
- en: 'Our application will have a list of predefined topics that will be displayed
    on the first load. So, the first thing we need to do is to make sure that the
    data is loaded in the application. We are not going to use any backend so as not
    to complicate our application. We will simulate the server response with static
    JSON files that will be kept in the data folder. For the list of topics, create
    the `entries.json` file inside the `data` folder and fill it with the following
    content:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将有一个预定义的主题列表，这些主题将在第一次加载时显示。因此，我们首先需要确保数据被加载到应用程序中。我们不会使用任何后端，以免使我们的应用程序复杂化。我们将使用静态的
    JSON 文件来模拟服务器响应，这些文件将保存在数据文件夹中。对于主题列表，在 `data` 文件夹内创建一个 `entries.json` 文件，并填充以下内容：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we need to create the service that stores the data. In the `app.js` file,
    create a new `app.services` module, and fill it with the following code. We will
    use a service so that our data is available in multiple controllers and views.
    You can see that we have already created the `add` method, because we want to
    be able to create new entries in our blog:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个存储数据的服务。在 `app.js` 文件中，创建一个新的 `app.services` 模块，并填充以下代码。我们将使用服务，以便我们的数据可以在多个控制器和视图中使用。你可以看到我们已经有了一个
    `add` 方法，因为我们希望能够在我们的博客中创建新的条目：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we need to modify the `app.module` to include the new dependency; so
    after the `ngRoute`, we need add the new module `app.services`. We also need to
    create a new run block that will load the initial data when the application is
    started. The final code should look like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要修改 `app.module` 以包括新的依赖项；因此，在 `ngRoute` 之后，我们需要添加新的模块 `app.services`。我们还需要创建一个新的运行块，当应用程序启动时将加载初始数据。最终的代码应该如下所示：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Displaying a list of entries
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示条目列表
- en: For our list, we will need a controller for the data and a view that will display
    it. Moreover, since we want to display only a short summary in the main page,
    we also have to create a filter that creates the summary text.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的列表，我们需要一个用于数据的控制器和一个用于显示数据的视图。此外，由于我们想在主页上显示简短的摘要，我们还需要创建一个创建摘要文本的过滤器。
- en: 'Let''s start with this filter so we can use it later in the view. In the `app.js`
    file, add the following module for the filters:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这个过滤器开始，这样我们就可以在视图中稍后使用它。在 `app.js` 文件中，添加以下模块用于过滤器：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This filter takes the full content of the entry and displays only the first
    five words. Actually, this filter is agnostic and it doesn't care what it receives;
    it will take any string, and return the first five words from it. Again, after
    we have created this new module, we need to add it as a dependency on the app
    module.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此过滤器提取条目的全部内容，并仅显示前五个单词。实际上，这个过滤器是无差别的，它不关心接收到的内容；它会接受任何字符串，并从中返回前五个单词。再次强调，在我们创建了这个新模块之后，我们需要将其添加为应用模块的依赖项。
- en: 'Now we can move to the first controller, create a new module `app.controllers`,
    and add the first controller of our application, `EntriesController`. The only
    thing that this controller does is take the data from the store and pass it to
    the view. After you create this module, don''t forget to add it as a dependency:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以转向第一个控制器，创建一个新的模块 `app.controllers`，并添加我们的应用程序的第一个控制器 `EntriesController`。这个控制器唯一要做的事情就是从存储中获取数据并将其传递给视图。在你创建了这个模块之后，别忘了将其添加为依赖项：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The last step that we need to implement is the view. Create the `entries.html`
    file in the `views` folder, and fill in the following code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要实施的最后一步是实现视图。在`views`文件夹中创建`entries.html`文件，并填写以下代码：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Displaying entry details
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示条目详情
- en: Now that we have created the list of entries, we also have to create the page
    that displays each entry detail. We will again need a controller, a view and,
    a new route definition.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了条目列表，我们还必须创建显示每个条目详情的页面。我们还需要一个控制器、一个视图和一个新的路由定义。
- en: 'We will create the new definition after the route definition for the list page.
    The final code should look like the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在列表页面的路由定义之后创建新的定义。最终的代码应如下所示：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now create a new controller in the `app.controllers` module that reads the
    index from the route parameters and loads the specified entry, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在`app.controllers`模块中创建一个新的控制器，该控制器从路由参数中读取索引并加载指定的条目，如下所示：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We now have to create the `entry.html` file, and fill it with the view for
    our entry:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在必须创建`entry.html`文件，并填写我们的条目视图：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This view displays the entry title and a full content text. With this view,
    we have finished the entry detail functionality; and, as you can see, you can
    already navigate between the list and the details pages. The only thing that we
    have to create now is the page where we add a new entry.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图显示条目标题和完整内容文本。使用此视图，我们已经完成了条目详情功能；正如您所看到的，您现在可以在这张列表页和详情页之间进行导航。我们现在需要创建的只是添加新条目的页面。
- en: Adding a new entry
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加新条目
- en: Before we even start on this feature, we need to add a menu that will allow
    us to navigate to this page. So, open the `index.html` file, and add the following
    code before the container `<div>` of your application. This code will add a header
    menu with the link to this page. For this menu, we are going to use the familiar
    Bootstrap syntax from the previous chapters.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始这个功能之前，我们需要添加一个菜单，以便我们可以导航到这个页面。因此，打开`index.html`文件，并在您应用程序的容器`<div>`之前添加以下代码。此代码将添加一个带有指向此页面链接的页眉菜单。对于此菜单，我们将使用之前章节中熟悉的Bootstrap语法。
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that we have the menu for navigating to the page for adding a new entry,
    we need to create a new route definition for this. Following the same steps as
    we did for the previous routes, and add the following definition:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了导航到添加新条目页面的菜单，我们需要为这个新路由创建一个新的路由定义。按照我们为之前路由所采取的相同步骤，并添加以下定义：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now we can create the controller and the view. Again, in the `app.controllers`
    module, add the new controller. In this controller, we only need to define two
    functions: one to add the entry to our blog, and one to clear the form, as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建控制器和视图。再次，在`app.controllers`模块中添加新的控制器。在这个控制器中，我们只需要定义两个函数：一个用于将条目添加到我们的博客中，另一个用于清除表单，如下所示：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can now create the view in the `new-entry.html` file. We will again use
    the Bootstrap syntax for styling. You might also notice the `ng-model` that binds
    the inputs with the controller:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以在`new-entry.html`文件中创建视图。我们还将再次使用Bootstrap语法进行样式设置。您可能也会注意到`ng-model`将输入与控制器绑定：
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now that we have created all the features for our application, we can move to
    the final step of styling our application, and add the final touches.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为我们的应用程序创建了所有功能，我们可以进入最后一步，即对应用程序进行样式设置，并添加最后的修饰。
- en: Styling the application
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序的样式
- en: 'One of the first things that we can do is add the footer for our application.
    In the `index.html` file, add the following after the `app` container `<div>`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做的第一件事是为我们的应用程序添加页脚。在`index.html`文件中，在`app`容器`<div>`之后添加以下内容：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You may remember that we have included the `app.css` file in our `index.html`;
    so, go ahead, create this file in the `css` folder, and add the following code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能记得我们在`index.html`中包含了`app.css`文件；所以，继续前进，在`css`文件夹中创建此文件，并添加以下代码：
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Once again, since we have used the Bootstrap syntax and the helper classes,
    the amount of styling code that we have to write is minimal.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了Bootstrap语法和辅助类，因此我们需要编写的样式代码量非常少。
- en: With these final steps, we have finished our blogging application. As you just
    saw, it is very easy to create a complex application with the help of WebStorm
    and Angular. One thing to keep in mind is that this application is just an example,
    and there are a lot of improvements and changes that we can make; but that is
    well beyond the scope of this book.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些最终步骤，我们已经完成了我们的博客应用程序。正如你所看到的，在WebStorm和Angular的帮助下创建一个复杂的应用程序非常简单。需要注意的是，这个应用程序只是一个示例，我们可以对其进行许多改进和更改；但这超出了本书的范围。
- en: 'Next we are going to recreate the same application with the same features in
    another advanced JavaScript framework: React.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用另一个高级JavaScript框架：React，重新创建具有相同功能的应用程序。
- en: React
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React
- en: '|   | *"A JavaScript library for building user interfaces"* |   |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '|    | *"用于构建用户界面的JavaScript库"* |'
- en: '|   | --[http://facebook.github.io/react/](http://facebook.github.io/react/)
    |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '|    | --[http://facebook.github.io/react/](http://facebook.github.io/react/)
    |'
- en: React is a UI framework developed by Facebook that has a different approach
    to building web applications. It uses a virtual DOM to give the developers a simpler
    programming model and better performance. Moreover, the data flow in React applications
    is a one-way reactive, which reduces the Boilerplate and makes it easier to reason
    about the state of the application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: React是由Facebook开发的一个UI框架，它在构建Web应用程序方面采用了一种不同的方法。它使用虚拟DOM为开发者提供一个更简单的编程模型和更好的性能。此外，React应用程序中的数据流是单向响应式的，这减少了样板代码并使得推理应用程序的状态变得更加容易。
- en: Our goal for this section is to recreate the blog application that we have created
    previously, but using React as the UI framework. We will keep the same features
    that we had in the previous section.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的目标是使用React作为UI框架重新创建我们之前创建的博客应用程序。我们将保持与上一节相同的功能。
- en: 'The first step that we need to take is to create a new **Empty Project** for
    our application. Next, we need to install all the dependencies. Using the steps
    described earlier in the chapter, create the `.bowerrc` file and the `vendor`
    folder. Then install `react`, `react-router`, and `bootstrap`. You can do that
    by running the following single command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要采取的第一步是为我们的应用程序创建一个新的**空项目**。接下来，我们需要安装所有依赖项。使用本章前面描述的步骤，创建`.bowerrc`文件和`vendor`文件夹。然后安装`react`、`react-router`和`bootstrap`。你可以通过运行以下单个命令来完成：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now that we have all the dependencies installed, we have to include them in
    the `index.html` file. Again, use the steps previously described, and include
    the navigation and footer that we did in the Angular example. The final code should
    look like the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了所有依赖项，我们必须在`index.html`文件中包含它们。再次使用之前描述的步骤，包括我们在Angular示例中做的导航和页脚。最终的代码应该看起来像以下这样：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: One thing that might seem out of place in this code is the `text/jsx` type used
    for the `app` file. React uses a special syntax for its files called JSX. This
    syntax is similar to XML and it help us write the markup inside the component
    files.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，可能会觉得有些不合适的是用于`app`文件的`text/jsx`类型。React为其文件使用一种称为JSX的特殊语法。这种语法类似于XML，它帮助我们编写组件文件内的标记。
- en: So now that we have our `index.html` file ready, we can create the `app.jsx`
    file in the `app` folder, and start filling in the code for our application.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们的`index.html`文件已经准备好了，我们可以在`app`文件夹中创建`app.jsx`文件，并开始填写我们应用程序的代码。
- en: 'The fist thing that we have to add is the supporting code for our router. To
    keep our application simpler, we are not going to use any module system. But keep
    in mind that this is a not good as a regular practice:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要添加的是为我们的路由器提供的支持代码。为了使我们的应用程序更简单，我们不会使用任何模块系统。但请记住，这并不是一个好的常规做法：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: To keep things simple, we will skip the loading of entries from an external
    JSON file and, instead, create a variable to keep our initial data.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持简单，我们将跳过从外部JSON文件加载条目的步骤，而是创建一个变量来保存我们的初始数据。
- en: '[PRE27]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We can now move to creating the features of our application. The first one will
    be the entries list. As you can see, in React, all the functionality, including
    the template, is created in JavaScript with the JSX syntax. It might seem odd
    at first, but later on, it will prove to be a very efficient system for keeping
    all things together.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以开始创建我们应用程序的功能。第一个将是条目列表。正如你所看到的，在React中，包括模板在内的所有功能都是使用JSX语法在JavaScript中创建的。一开始可能会觉得有些奇怪，但后来你会发现这是一个将所有事物集中在一起非常高效的系统。
- en: '[PRE28]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'At some point, as WebStorm analyzes your code, it will see that you are using
    the JSX syntax and prompt you to switch the language level to JSX Harmony. So
    make sure you click **Switch** at this prompt, or go to the **Preferences** |
    **Languages & Frameworks** | **JavaScript**, and change the language version there:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时刻，当WebStorm分析你的代码时，它会看到你正在使用JSX语法，并提示你切换到JSX Harmony语言级别。所以请确保在这个提示中点击**切换**，或者转到**首选项**
    | **语言与框架** | **JavaScript**，并在那里更改语言版本：
- en: '![React](img/00070.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![React](img/00070.jpeg)'
- en: 'The `Entries` class relies on the `EntryItem` that we need to create. It is
    very common in React to compose elements using multiple child elements. You can
    see that the data is passed from the parent to the child as properties on the
    props object in the following code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`Entries`类依赖于我们需要创建的`EntryItem`。在React中，使用多个子元素组合元素是非常常见的。你可以看到数据是通过以下代码中props对象上的属性从父元素传递到子元素的：'
- en: '[PRE29]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'With this class, we have completed the `Entry` items feature, so we can now
    move to create the `Entry` detail features. Again, this will just be a simple
    render method that will display the details for a specific entry. The ID of the
    entry will be read from the route as a property on the `pros.params` object:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个类，我们已经完成了`Entry`项目功能，因此我们现在可以开始创建`Entry`详情功能。同样，这只是一个简单的渲染方法，将显示特定条目的详情。条目的ID将从路由中读取，作为`pros.params`对象上的一个属性：
- en: '[PRE30]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The last feature that we need to create is the new entry page feature. For this,
    we will also need to create two special methods that will handle the save and
    clear functionality. Another thing worth mentioning in this class is the `Router.Navigation`
    mixin that we are using. Mixins bring functionality from other classes into our
    own classes. In our example, we need to be able to navigate programmatically from
    within the submit method.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建的最后一个功能是新的条目页面功能。为此，我们还需要创建两个特殊的方法来处理保存和清除功能。在这个类中，还有一点值得提及的是我们正在使用的`Router.Navigation`混合。混合将功能从其他类引入到我们的类中。在我们的例子中，我们需要能够在提交方法中程序化地进行导航。
- en: '[PRE31]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As you might have noticed, WebStorm is really useful when writing the JSX syntax,
    since it allows for code completion and checking in a way similar to writing plain
    HTML or JavaScript code.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如你可能已经注意到的，WebStorm在编写JSX语法时非常有用，因为它允许以类似于编写纯HTML或JavaScript代码的方式完成代码和进行检查。
- en: 'The last component class that we need to create is the main `App`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建的最后一个组件类是主要的`App`：
- en: '[PRE32]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'So far we have created all the components for our application; now we can move
    to create the route definitions for the features of our application: the entries
    list (this will also be the default list), the entry details, and the new entry
    page:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经为我们的应用程序创建了所有组件；现在我们可以开始创建应用程序功能的路由定义：条目列表（这还将是默认列表）、条目详情和新的条目页面：
- en: '[PRE33]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The last step before we can test our application is to wire up the router,
    which is done as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以测试我们的应用程序之前，最后一步是连接路由，如下所示：
- en: '[PRE34]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: We are now ready to test our application. So, we will go to the `index.html`
    file and click the browser icon to run the application. As you can see, the functionality
    is the same as in the Angular application.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好测试我们的应用程序。所以，我们将转到`index.html`文件，点击浏览器图标来运行应用程序。正如你所看到的，功能与Angular应用程序相同。
- en: I must point out again that the code that we have created here is just for the
    functionality and features of WebStorm, when working with the React framework;
    it is not optimized and it doesn't respect all the best practices when working
    with this framework.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须再次指出，我们在这里创建的代码只是为了WebStorm的功能和特性，当与React框架一起工作时；它没有优化，并且不遵循与该框架一起工作时所有的最佳实践。
- en: Express
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Express
- en: '|   | *"Fast, unopinionated, minimalist web framework for Node.js"* |   |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '|   | *"快速、无偏见、极简主义的Node.js Web框架"* |   |'
- en: '|   | --[http://expressjs.com/](http://expressjs.com/) |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '|   | --[http://expressjs.com/](http://expressjs.com/) |'
- en: In this section, we are going to look at building some apps using JavaScript
    in the server. We are first going to look at one of the most popular framework
    builds on top of Node.js, that is, Express. This is one of the most popular frameworks
    that provides a robust set of features for both, web and mobile applications.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨使用服务器端的JavaScript构建一些应用程序。我们首先将查看基于Node.js的最受欢迎的框架之一，即Express。这是最受欢迎的框架之一，为Web和移动应用程序提供了一套强大的功能。
- en: 'To start with, we need to create a new project based on the **Node.js Express
    App** template:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要基于**Node.js Express App**模板创建一个新的项目：
- en: '![Express](img/00071.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![Express](img/00071.jpeg)'
- en: WebStorm will create the project, and install all the required dependencies.
    At some point, you will also be prompted to download and install the Node.js core
    module sources. This will be required for providing autocompletion and analysis
    for the Node.js core methods, so make sure you select Configure.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: WebStorm 将创建项目，并安装所有必需的依赖项。在某个时候，您还将被提示下载和安装 Node.js 核心模块源代码。这将用于提供 Node.js
    核心方法的自动完成和分析，所以请确保您选择配置。
- en: '![Express](img/00072.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![Express](img/00072.jpeg)'
- en: 'After the completion of all these steps, WebStorm will create a Run/Debug configuration,
    so you can quickly preview your project. If you select **''bin/www''** to be executed
    from the **Run** menu or the toolbar, your application will start, and you can
    preview it in your browser at the address: `http://localhost:3000/`.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些步骤后，WebStorm 将创建一个运行/调试配置，这样您就可以快速预览您的项目。如果您从 **运行** 菜单或工具栏中选择 **'bin/www'**
    来执行，您的应用程序将启动，您可以在浏览器中通过以下地址预览它：`http://localhost:3000/`。
- en: As you can see, it is easy to start a Node.js/Express project, including all
    the dependencies and configurations, with the help of WebStorm. We will not go
    any deeper in this chapter, but this project is an excellent foundation for any
    Express application.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，借助 WebStorm，启动一个 Node.js/Express 项目，包括所有依赖项和配置，非常简单。我们不会在本章中深入探讨，但这个项目是任何
    Express 应用程序的一个优秀基础。
- en: Meteor
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meteor
- en: Meteor is an open source, real-time platform for building web applications.
    It runs on top of Node.js and uses MongoDB. The framework is rather young—Meteor
    1.0 came out, not very long ago, on the 28 October, 2014—but it has already proved
    itself to be a powerful tool. WebStorm added support for Meteor in version 9,
    so you can utilize all the techniques that WebStorm suggests.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor 是一个开源的实时平台，用于构建 Web 应用程序。它运行在 Node.js 之上并使用 MongoDB。该框架相对较新——Meteor 1.0
    早在 2014 年 10 月 28 日就已经发布，但它已经证明了自己是一个强大的工具。WebStorm 在版本 9 中添加了对 Meteor 的支持，因此您可以利用
    WebStorm 提出的所有技术。
- en: 'Before you start building a Meteor application, you need to have Meteor installed
    on your machine. Linux and OS X, being command line-centric systems, enable you
    to install Meteor in one click with following command:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始构建 Meteor 应用程序之前，您需要在您的机器上安装 Meteor。Linux 和 OS X 作为以命令行为中心的系统，允许您通过以下命令一键安装
    Meteor：
- en: '[PRE35]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Windows users will need to visit [http://win.meteor.com/](http://win.meteor.com/)
    and download the `.exe` file, which is stable, although not the latest version.
    Alternatively, you may check the website, [https://github.com/meteor/meteor/wiki/Preview-of-Meteor-on-Windows](https://github.com/meteor/meteor/wiki/Preview-of-Meteor-on-Windows)
    and try an RC version.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 用户需要访问 [http://win.meteor.com/](http://win.meteor.com/) 并下载 `.exe` 文件，这是一个稳定的版本，尽管不是最新版本。或者，您也可以查看网站
    [https://github.com/meteor/meteor/wiki/Preview-of-Meteor-on-Windows](https://github.com/meteor/meteor/wiki/Preview-of-Meteor-on-Windows)
    并尝试一个 RC 版本。
- en: Setting up a new project
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置新项目
- en: Our Meteor environment is ready, so let us move from words to deeds and create
    a small application to observe where and how WebStorm can assist us in using Meteor.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 Meteor 环境已经准备好了，所以让我们从理论转向实践，创建一个小型应用程序来观察 WebStorm 在使用 Meteor 时如何帮助我们。
- en: 'Let us first create a new project called `MyMeteorApp`, as shown in the following
    screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个名为 `MyMeteorApp` 的新项目，如下面的截图所示：
- en: '![Setting up a new project](img/00073.jpeg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![设置新项目](img/00073.jpeg)'
- en: 'In the next window, you will be prompted to select the location of the Meteor
    executable. WebStorm first tries to locate it automatically, and then, if you
    need to specify another location, you can do it here. Also, you can use several
    templates, which are applications that have already been implemented. Let us examine
    how WebStorm handles Meteor with the help of of the **todos** application example.
    This is a simple application for tracking what is to be done and what has already
    been done:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个窗口中，您将被提示选择 Meteor 可执行文件的位置。WebStorm 首先尝试自动定位它，然后，如果您需要指定另一个位置，您可以在这里进行操作。此外，您还可以使用几个模板，这些是已经实现的应用程序。让我们通过
    **todos** 应用程序示例来查看 WebStorm 如何处理 Meteor。这是一个简单的应用程序，用于跟踪需要完成的事项和已经完成的事项：
- en: '![Setting up a new project](img/00074.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![设置新项目](img/00074.jpeg)'
- en: 'WebStorm needs some time for performing a couple of preparations, such as initializing
    a new application; then you will see the typical structure of a Meteor project,
    as seen in the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: WebStorm 需要一些时间来执行一些准备工作，例如初始化一个新应用程序；然后您将看到 Meteor 项目的典型结构，如下面的截图所示：
- en: '![Setting up a new project](img/00075.jpeg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![设置新项目](img/00075.jpeg)'
- en: For technical purposes, any JetBrains' IDEA-based IDE creates a special directory
    called `.idea`, for its own use. The IDE contains information related to the current
    project, such as the list of all the files, configurations, and even the cursor
    positions in each of the open files. So, after generating the Meteor project,
    WebStorm will need some more time to analyze its structure. The nuance in case
    of Meteor applications is that Meteor has a directory for itself, called—`.meteor`,
    where it stores information like details about the required packages and their
    versions. This directory is not controlled by WebStorm, because the contents of
    this directory can change very often and even grow to a very large size. This
    can badly affect WebStorm's efficiency. Therefore, the `.meteor` directory is
    usually under the control of a VCS.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度讲，任何基于JetBrains IDEA的IDE都会创建一个名为`.idea`的特殊目录，供其自身使用。IDE包含与当前项目相关的信息，例如所有文件的列表、配置，甚至每个打开文件中的光标位置。因此，在生成Meteor项目后，WebStorm需要更多的时间来分析其结构。在Meteor应用程序的情况下，细微差别在于Meteor有一个自己的目录，称为—`.meteor`，其中存储有关所需包及其版本的信息。这个目录不受WebStorm控制，因为这个目录的内容可能会非常频繁地改变，甚至增长到非常大的大小。这可能会严重影响WebStorm的效率。因此，`.meteor`目录通常由VCS控制。
- en: The application is now ready to be opened and run. If you open any `.js` file,
    you can see that WebStorm understands the Meteor-specific JavaScript and highlights
    it appropriately. This is because WebStorm automatically uses the Meteor library.
    You can check this by right-clicking on **Use JavaScript Library** and selecting
    **Meteor project library**.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序现在已准备好打开和运行。如果你打开任何`.js`文件，你会看到WebStorm理解Meteor特定的JavaScript，并相应地突出显示。这是因为WebStorm自动使用Meteor库。你可以通过右键单击**使用JavaScript库**并选择**Meteor项目库**来检查这一点。
- en: '![Setting up a new project](img/00076.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![设置新项目](img/00076.jpeg)'
- en: 'This library not only highlights the syntax, but also provides you with a full-fledged
    autocomplete. If you start typing (for example, `Meteor.st`), you will see that
    WebStorm, as usual, performs an internal analysis of the content and suggests
    the most appropriate methods to use in each case:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库不仅突出显示语法，还为你提供完整的自动完成功能。如果你开始输入（例如，`Meteor.st`），你会看到WebStorm，像往常一样，对内容进行内部分析，并建议在每个情况下最合适的要使用的方法：
- en: '![Setting up a new project](img/00077.jpeg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![设置新项目](img/00077.jpeg)'
- en: As we are not creating an application from scratch and it is already implemented,
    we can run it. In a standard case, to run the Meteor applications, you just need
    to use the command-line interface, and type the `meteor` command. What can WebStorm
    suggest for this if we can simply use the Terminal?
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不是从头开始创建应用程序，它已经实现，我们可以运行它。在标准情况下，要运行Meteor应用程序，你只需使用命令行界面，并输入`meteor`命令。如果我们可以直接使用终端，WebStorm能为此提供什么建议呢？
- en: WebStorm provides a very sophisticated, yet convenient, interface for customizing
    the run and debug configurations to automate the most frequently performed actions.
    It is especially useful when you have a lot of parameters that you want to run
    your application with. So, you won't need to indicate them in the Terminal every
    time you need them; you will just use the preconfigured cases.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: WebStorm提供了一个非常复杂且方便的界面，用于自定义运行和调试配置，以自动化最常执行的操作。当你有很多参数需要与你的应用程序一起运行时，这尤其有用。因此，你不需要在每次需要时在终端中指定它们；你只需使用预配置的情况即可。
- en: 'To add a new usage case, go to **Run** | **Edit Configurations…**. This will
    open a **Run/Debug Configurations** dialog. Click on the plus button, and choose
    the technology to which you are going to add a usage case:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加新的使用案例，请转到**运行** | **编辑配置…**。这将打开一个**运行/调试配置**对话框。点击加号按钮，并选择你要添加使用案例的技术：
- en: '![Setting up a new project](img/00078.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![设置新项目](img/00078.jpeg)'
- en: 'You will see two tabs. On the **Configuration** tab, you can specify the Meteor
    version to execute your application, program arguments, and environment variables
    (if needed), and so on. On the **Browser / Live Edit** tab, you are provided with
    secondary yet useful features, such as the automatic launching of a specific browser
    when you are running the application:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到两个标签页。在**配置**标签页上，你可以指定要执行应用程序的Meteor版本、程序参数和环境变量（如果需要），等等。在**浏览器/实时编辑**标签页上，你提供了次要但有用的功能，例如在运行应用程序时自动启动特定的浏览器：
- en: '![Setting up a new project](img/00079.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![设置新项目](img/00079.jpeg)'
- en: 'When you finish setting up all the parameters that you need for a certain case,
    you can run your application, as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成设置特定情况下所需的所有参数后，你可以运行你的应用程序，如下所示：
- en: Press the green **Play** button on the **Menu** panel of WebStorm (or the green
    bug button for debugging).
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在WebStorm的**菜单**面板上按下绿色**播放**按钮（或者在调试时按下绿色虫子按钮）。
- en: Go to **Run** | **Run**, and then choose the configuration that you are going
    to use.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**运行** | **运行**，然后选择你将要使用的配置。
- en: Go to **Run** and run `MyMeteorApp`, which will instantly run your application
    with the last used configuration.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**运行**选项并运行`MyMeteorApp`，这将立即使用最后使用的配置运行你的应用程序。
- en: Alternatively, you can just press *Ctrl* + *R* on Mac or *Shift* + *F10* on
    Windows.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，你只需在Mac上按*Ctrl* + *R*或在Windows上按*Shift* + *F10*。
- en: 'Your application is running! You can see the console output in the **Run**
    box, as seen in the following screenshot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序正在运行！你可以在**运行**框中看到控制台输出，如下面的截图所示：
- en: '![Setting up a new project](img/00080.jpeg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![设置新项目](img/00080.jpeg)'
- en: Summary
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how WebStorm can speed up the development process
    with the most advanced and popular JavaScript frameworks and platforms. We implemented
    a mini-blog in both AngularJS and React, and tested the usage of predefined application
    skeletons for Express and Meteor.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了WebStorm如何通过最先进和流行的JavaScript框架和平台来加速开发过程。我们使用AngularJS和React实现了迷你博客，并测试了Express和Meteor预定义应用程序骨架的使用。
- en: In the next chapter, we will immerse ourselves in the world of mobile development
    using JavaScript and HTML5.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将沉浸在JavaScript和HTML5的移动开发世界中。
