["```js\n{\n  \"name\": \"postcss\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Configuration file for PostCSS\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"Alex Libby\",\n  \"license\": \"ISC\",\n  \"dependencies\": { \"postcss\": \"^5.0.8\" },\n```", "```js\n  \"devDependencies\": {\n    \"autoprefixer\": \"^6.0.3\",\n    \"cssnano\": \"^3.2.0\",\n    \"gulp\": \"^3.9.0\",\n    \"gulp-postcss\": \"^6.0.0\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-sourcemaps\": \"^1.5.2\",\n    \"postcss-reporter\": \"^1.3.0\",\n    \"stylelint\": \"^2.3.7\"\n  }\n}\n```", "```js\n'use strict';\n\nvar gulp = require('gulp');\nvar postcss = require('gulp-postcss');\n//var autoprefixer = require('autoprefixer');\nvar cssnano = require('gulp-cssnano');\nvar sourcemaps = require('gulp-sourcemaps');\nvar rename = require('gulp-rename');\nvar stylelint = require('stylelint');\nvar reporter = require('postcss-reporter');\nvar rucksack = require('rucksack-css');\n```", "```js\ngulp.task('styles', function () {\n  return gulp.src('src/*.css')\n    .pipe(postcss([ rucksack({ fallbacks: true, autoprefixer: true }) ]))\n    .pipe(gulp.dest('dest/'));\n});\n```", "```js\ngulp.task(\"lint-styles\", ['styles'], function() {\n    return gulp.src(\"dest/*.css\")\n    .pipe(postcss([ stylelint({\n        \"rules\": {\n          \"color-no-invalid-hex\": 2,\n          \"declaration-colon-space-before\": [2, \"never\"],\n          \"indentation\": [2, 2],\n          \"number-leading-zero\": [2, \"always\"]\n        }\n      }),\n      reporter({ clearMessages: true, })\n    ]))\n});\n```", "```js\ngulp.task('rename', ['lint-styles'], function () {\n  return gulp.src('dest/*.css')\n    .pipe(postcss([ cssnano() ]))\n    .pipe(rename('style.min.css'))\n    .pipe(gulp.dest(\"dest/\"));\n});\n```", "```js\ngulp.task('sourcemap', ['rename'], function () {\n  return gulp.src('dest/*.css')\n    .pipe(sourcemaps.init())\n    .pipe(sourcemaps.write('maps/'))\n    .pipe(gulp.dest(\"dest/\"));\n});\n```", "```js\ngulp.task('default', ['styles', 'lint-styles',  'rename', 'sourcemap']);\n```", "```js\nvar watcher = gulp.watch('src/*.css', ['styles',\n'lint-styles', 'rename', 'sourcemap']);\nwatcher.on('change', function(event) {\n  console.log('File ' + event.path + ' was ' +\nevent.type + ', running tasks...');\n});\n```", "```js\n    .pipe(postcss([ rucksack({ fallbacks: true, autoprefixer: true }) ]))\n    ```", "```js\n    .pipe(postcss([ rucksack(), autoprefixer() ]))\n    ```", "```js\n    var stylerules = {\n      \"color-no-invalid-hex\": 2,\n      \"declaration-colon-space-before\": [2, \"never\"],\n      \"indentation\": [2, 2],\n      \"number-leading-zero\": [2, \"always\"]\n    };\n    ```", "```js\n    gulp.task('lint', ['styles'], function() {\n      return gulp.src(\"dest/*.css\")\n        .pipe(postcss([ stylelint({ \"rules\": stylerules }), \n        reporter({ clearMessages: true })\n      ]))\n    });\n    ```", "```js\n    gulp.task('rename', ['lint'], function () {\n    ```", "```js\n    .pipe(rename(renameFunction))\n    ```", "```js\n    gulp.task('sourcemap', ['rename'], function () {\n      return gulp.src(sourceMapLocation)\n    ```", "```js\n    gulp.task('minifyCSS', ['sourcemap'], function () {\n      return gulp.src('dest/*.min.css')\n        .pipe(cssnano({ autoprefixer: false }))\n        .pipe(gulp.dest(\"dest/\"));\n    });\n    ```", "```js\n    ['styles', 'lint' , 'rename' , 'sourcemap', 'minifyCSS']\n    ```", "```js\n    gulp.task('default', ['styles', 'lint' , 'rename' , 'minifyCSS', 'sourcemap']);\n\n    var watcher = gulp.watch('src/*.css', ['default']);\n    watcher.on('change', function(event) {\n    ```", "```js\n    var renameFunction = function (path) {\n      path.extname = \".min.css\";\n      return path;\n    };\n\n    var sourceMapLocation = ['dest/*.css', '!dest/*.min.css'];\n    ```", "```js\nvar sourceMapLocation = ['dest/*.css', '!dest/*.min.css'];\n...\ngulp.task('sourcemap', ['rename'], function () {\n  return gulp.src(sourceMapLocation)\n...\n});\n```", "```js\n    .pipe(sourcemaps.write('maps/', {\n      sourceMappingURLPrefix: 'https://www.mydomain.com/'\n    }))\n```", "```js\n    .pipe(postcss([ rucksack(), autoprefixer({browsers: ['last 2 versions']}) ])\n    ```", "```js\n    .pipe(postcss([ rucksack({autoprefixer: false  }),\n     autoprefixer({browsers: ['last 2 versions']}) ])\n    ```", "```js\n    npm install postcss-pseudo-elements-content --save-dev\n\n    ```", "```js\n    var pseudoContent = require('postcss-pseudo-elements-content');\n    ```", "```js\n    gulp.task('styles', function() {\n      return gulp.src('src/*.css')\n      .pipe(postcss([ autoprefixer(), pseudoContent() ]))\n    ```", "```js\n.underline a:hover::after-c, .underline a:focus::after-c {\n  opacity: 1;\n  transform: translateY(0px);\n}\n```", "```js\n    npm install gulp-imagemin --save-dev\n    npm install imagemin-jpegtran --save-dev\n\n    ```", "```js\n    var images = require('gulp-imagemin');\n    var jpegtran = require('imagemin-jpegtran');\n    ```", "```js\n    .pipe(plugins.livereload());\n    ```", "```js\n    plugins.livereload.listen();\n    ```", "```js\n    npm install postcss-cssstats --save-dev \n\n    ```", "```js\nvar reporter = require('postcss-reporter');\n```", "```js\n    .pipe(postcss([ cssstats( function(stats) {\n      console.log(stats);\n    })\n  ]))\n  .pipe(gulp.dest('dest/'));\n})\n```", "```js\n    gulp.task('stylestats', ['minifyCSS'], function () {\n      gulp.src('dest/*.css')\n        .pipe(stylestats({\n          type: 'json',\n          outfile: true\n        }))\n        .pipe(gulp.dest('dest/'));\n    });\n    ```", "```js\n    gulp.task('default', ['styles', 'lint', 'rename',\n     'minifyCSS', 'sourcemap', 'stylestats']);\n    ```", "```js\n    npm install postcss-nesting --save-dev\n    npm install postcss-short-color --save-dev\n    npm install postcss-pixrem\n\n    ```", "```js\ngulp.task('styles', function () {\n  return gulp.src('src/*.css')\n    .pipe(postcss([ rucksack({ fallbacks: true }), autoprefixer(), shortcolor, nesting, pixrem ]))\n    .pipe(gulp.dest('dest/'));\n});\n```", "```js\nvar nesting = require('postcss-nesting');\nvar shortcolor = require('postcss-short-color');\nvar pixrem = require('pixrem');\n```", "```js\n#maincontent .button .red.large:hover\n```", "```js\n.component {\n  /* represents a component */\n}\n\n.component__element {\n  /* represents a small part that is used to make a component */\n\n}\n\n'.component--modifier {\n  /* represents a state modifier for the component */\n}\n```", "```js\n    var watcher = gulp.watch('src/*.css', ['style']);\n    ```"]