- en: Using Physics to Create a Force-Directed Graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will cover how to make a force-directed graph that will visualize
    the relationships between various nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this lesson, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a physics-based force that will center nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a physics-based force that make the nodes repel each other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a physics-based force that will link the nodes to show their relationships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The complete code for this section can be found at [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter07](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter07).
  prefs: []
  type: TYPE_NORMAL
- en: What is a force-directed graph?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **force**-**directed** **graph** is a graph that is affected by various forces
    (such as gravity and repulsion). It can be extremely helpful when creating graphs
    of relationships.
  prefs: []
  type: TYPE_NORMAL
- en: How to set up a graph of relationships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following sections will provide an overview of what we're going to build.
    The overview will cover the display side and the physics side of the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The display aspect controls what we see; the display will include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of nodes representing people, displayed as circles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of links representing connections between people, displayed as lines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The physics of the simulation control how the elements interact, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A centering force at the center of the SVG will draw all of the nodes toward
    it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A repulsive force on each node will prevent the nodes from getting too close
    to each other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link forces will connect each of the nodes, so that they don't repel each other
    too much
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our file will be a pretty standard `index.html` file, but we''ll need two `<g>`
    elements, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'One to contain the nodes (**people**: circles)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One to contain the links (**relationship**: lines)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s what our code should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Setting up styling for nodes and links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create an `app.css` file for our circles (nodes/people) and lines (links/relationships),
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to create a link to it in your `index.html` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Setting up the SVG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the top of our `app.js` file, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If we open `index.html` in Chrome and look at Elements in the Developer tools,
    we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16f08b43-ba5d-4f3b-a62c-3b96f7d00010.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding data for people
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create an array of people at the bottom of `app.js`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Adding data for relationships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s create the relationships by adding the following array to the bottom
    of `app.js`. Note that the attributes must be `source` and `target`, in order
    for D3 to do its magic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Add circles to the SVG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Add the following to the bottom of `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a circle for each element in our `nodesData` array. Our Developer
    tools should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58ec4cff-78b6-4ac3-a9c6-a43b50452483.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding lines to the SVG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Add the following to the bottom of `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a line for each element in our `linksData` array. Our Developer
    tools should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/753db92b-2732-4ce4-b2c2-ed84e79a3064.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a simulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we''ll generate a simulation by adding the following to the bottom of
    `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that this simply creates a simulation; it doesn''t specify how the simulation
    should run. Let''s tell it which data to act on by modifying the previous line
    of code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Specifying how the simulation affects visual elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, our visualization still looks the same, as indicated by the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c04f2e60-4f3f-4ee8-9c9e-8b1b079df294.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s make our simulation affect the circles/lines that we created, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The simulation runs **ticks**, which run very quickly. Think of this a series
    of steps that happen very quickly, like the ticking of a stopwatch, but faster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each time a new tick occurs, you can update the visual elements. This allows
    our simulation to animate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: D3 will calculate and tack positional data onto our regular data, so that we
    can make use of it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following to the bottom of `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, our circles distance themselves from each other a little bit, but this
    is just a side effect of not having any forces attached to them. We''ll add forces
    next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97c9e4f7-fe37-4ac5-9e5d-1dec8cfbb1e9.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating forces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a centering force at the center of screen, which will pull all
    of the elements toward it. Adjust the code that we added in the previous step,
    so that it looks as follows. Not that we only add `.force("center_force", d3.forceCenter(WIDTH
    / 2, HEIGHT / 2))` to the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our circles are pulled towards the center of the SVG element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/351ca6f3-3830-4426-9944-bb434fdb8cdf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a force on each of the nodes, so that they repel each other. Just like
    in the last step, we will only add `.force("charge_force", d3.forceManyBody())`
    to the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll notice that the `cx`/`cy` values for the circles initially change rapidly,
    before finally stopping. This is because D3 is running a simulation. Note that
    `center_force` is trying to reach a state of equilibrium with `charge_force`.
    You''ll even notice that when you first load the page, the circles move outward
    from the center. This is due to the same reason:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42db87cd-8b24-4e29-92d2-4547f86f2a31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we''ll create the links between the nodes, so that they don''t repel
    each other too much. Just like in the last step, we will add the following code
    to the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Our last chunk of code should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The d3.forceLink function takes the array of links. It then uses the source
    and target attributes of each link data object to connect the nodes via their
    `.name` properties (as specified in the return value of the function we just wrote).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can tack on `.distance()` to specify how long the lines are visually between
    each circle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, our graph looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8fe9b4bf-b520-4caf-92f6-216729eed8cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we used D3 to create a graph that visualizes relationships
    between various nodes of data. This can be very useful in scenarios such as graphing
    a friend network, showing parent/child company relationships, or displaying a
    company's staff hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 8](9e68fb4c-044a-40ec-ba46-3181bc2b7b5f.xhtml), *Mapping*, we'll
    cover how to create a map from GeoJSON data.
  prefs: []
  type: TYPE_NORMAL
