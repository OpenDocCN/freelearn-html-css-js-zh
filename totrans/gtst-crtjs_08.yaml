- en: Chapter 8. Utilizing Vector Masks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will talk about utilizing vector masks in CreateJS and how
    to develop animation or drawings using vector masks. First off, we should know
    what a vector mask is and what it does. With vector masks, we can control which
    parts of the parent layer are hidden or revealed. We can even add a special effect
    to the vector mask to make that part of the parent layer different from the rest.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning about vector masks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a vector mask to an existing `DisplayObject` object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying vector masks to pictures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating the mask layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about vector masks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vector masking is a useful feature in EaselJS that enables developers to create
    awesome animations or drawings easily. There is a `mask` property for every `DisplayObject`
    object, with which you can apply a mask layer, or in other words; create a layer
    over an existing shape or picture. After applying the mask layer and updating
    the `stage` event, you will see that a new layer masks the existing layer. In
    other words, you can control what part of the parent layer is hidden or revealed
    with vector masks.
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning about vector masks](img/0260OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Furthermore, mask layers are also shapes, so you can change the mask layer properties
    continuously to create animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of using a vector mask in EaselJS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As with other examples in this book, we first get the `canvas` element from
    the page and then create the `Stage` object. Then, we create a simple circle using
    the `Shape` class and the `drawCircle` function. For the default position, we
    set both `x` and `y` to `100`. This circle is our vector mask layer.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we create a `bg` variable that contains a rectangle filled with the color
    red. After that, we assign the first shape—that is, the circle—to the `mask` property
    of the `bg` variable. Finally, we add the `bg` variable to stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the output of the preceding source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning about vector masks](img/0260OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For you to understand the example better, look at the following screenshot.
    It is what the output will be after removing the mask layer.
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning about vector masks](img/0260OS_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the first example, our mask layer is seen only in the circular
    shape, but in the next example, the whole rectangle is seen because there is no
    mask layer anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the mask layer independently:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning about vector masks](img/0260OS_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After assigning the mask layer to the parent layer (the red rectangle), the
    only visible part of the rectangle will be the visible part of the mask layer.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at a drag-and-drop example with mask layers.
  prefs: []
  type: TYPE_NORMAL
- en: Using a vector mask with Bitmap images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn to use the vector mask, filters, and a `Bitmap`
    class with an example. The `Bitmap` class is a subset of `DisplayObject`; thus,
    it has almost all the properties of the `Shape` class, such as `filters`, `mask`,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of using a vector mask with a `Bitmap` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we created the `canvas` variable that refers to our `canvas`
    element on the page. Then, we initiated the `stage` variable with the `Stage`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: In the next line, we initiated a `mask` variable using the `Shape` class. This
    shape is our mask layer, and it's a circle. For the mask layer coordinates, we
    used `img.width / 2` and `img.height / 2` to place the mask layer in the center
    of the picture. Then, we created the circle using the `drawCircle` method.
  prefs: []
  type: TYPE_NORMAL
- en: Then we created the `bg` variable, which refers to our image. We initiated this
    variable using the `Bitmap` class; the first parameter of the `Bitmap` class is
    the `Image` class. We already loaded the image using the `Image` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of loading an image and using an `onload` event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use the same approach to load images and pass them to the `Bitmap` class
    in EaselJS.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we added a blur filter to the picture filters and cached the shape using
    the `cache` method.We used the original image dimensions for the `cache` method.
    Then we assigned the mask layer to the `bg` variable using the `mask` property.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we added the `bg` variable to the `stage` event and updated this event
    to apply the changes.
  prefs: []
  type: TYPE_NORMAL
- en: In order to understand the differences better, look at the following output
    screenshot of the `bg` variable without the `mask` property. This is the `Bitmap`
    class without the mask layer.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a vector mask with Bitmap images](img/0260OS_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following image shows the vector mask separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a vector mask with Bitmap images](img/0260OS_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot illustrates the final result of our example with the
    mask layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a vector mask with Bitmap images](img/0260OS_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the whole image is visible in the first screenshot. However,
    the only visible part in the third image is our mask layer, that is the circle.
    That's the way vector masks work with pictures and shapes. You can create any
    shape and mask an existing layer, such as a picture with this shape.
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, we will create a drag-and-drop interaction using vector
    masks.
  prefs: []
  type: TYPE_NORMAL
- en: Playing with vector masks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will complete our previous example to create a simple drag-and-drop
    example using vector masks. The idea is to change the x and y coordinates of the
    mask layer on the `mousemove` event of the parent layer so that we can only see
    the masked layer over the existing shape. It will seem that only a circular shape
    is being dragged, but what''s actually happening is that our mask layer is changing
    continuously. The source code of our example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As in the previous example, we created a mask layer in the shape of a circle
    in the first line. We specified the default coordinates for the mask layer with
    `x=100` and `y=100`. Then, we created a `bg` variable that contains the background
    or parent layer.
  prefs: []
  type: TYPE_NORMAL
- en: Because we need the coordinates of the mask layer to change continuously as
    we move the mouse cursor, we bound a callback function to both `mousedown` and
    `mousemove` events. Then, inside the `mousemove` callback function, we changed
    the co-ordination of the mask layer and updated the stage.
  prefs: []
  type: TYPE_NORMAL
- en: The result will look like a drag-and-drop ball over the stage, but actually,
    it's our mask layer that keeps changing with every mouse move.
  prefs: []
  type: TYPE_NORMAL
- en: '![Playing with vector masks](img/0260OS_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The vector mask feature is one of the most useful features for drawing and developing
    animations, not only in CreateJS but in all other tools. In this chapter, we learned
    how to create vector mask layers in EaselJS and also how to enhance them to create
    animations. This feature also comes handy when you need to apply a different filter
    to a specific part of an existing shape or picture.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will wrap up everything to create a complete UI from
    scratch using all the CreateJS features that we have already talked about.
  prefs: []
  type: TYPE_NORMAL
