- en: Chapter 2. Adding Raster Layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Google Maps imagery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bing imagery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding WMS layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping the date line options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the zoom effect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the layer opacity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using WMS with single tile mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buffering the layer data to improve the map navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an image layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the tile size in WMS layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is all about working with raster layers. We have tried to summarize,
    with a set of recipes, the most common and important use cases you can find day-to-day
    when working with OpenLayers.
  prefs: []
  type: TYPE_NORMAL
- en: Imagery is one of the most important kinds of data to work with in a GIS system.
  prefs: []
  type: TYPE_NORMAL
- en: OpenLayers offers several classes to integrate with different imagery providers,
    from proprietary providers such as Google Maps and Bing Maps, to Open Source ones
    such as OpenStreetMap or even any WMS service provider.
  prefs: []
  type: TYPE_NORMAL
- en: The base class for any layer type is the `OpenLayers.Layer` class, which offers
    a set of common properties and defines the common behavior for any other classes.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, many layers inherit from the `OpenLayers.Layer.Grid` class, which
    divides the layer into zoom levels. This way each zoom level covers the same area
    but uses a greater set of tiles. For example, at level zero a grid with one tile
    covers the whole world, at level one a grid with four tiles covers the whole world,
    and so on. As we can see, on each level, the number of tiles and their resolution
    increases.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces you to the use of raster layers, with special attention
    to the WMS layers, and how to manage the most common properties.
  prefs: []
  type: TYPE_NORMAL
- en: Using Google Maps imagery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Maps is probably the most known web map application around the world.
    Their imageries, in the way of tiled layers, are well known by people; they are
    accustomed to their layer style and because of this you may be interested in using
    them in your own web mapping project.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Google Maps imagery](img/7843_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: OpenLayers counts with the `OpenLayers.Layer.Google` class, which is in fact
    a wrapper code around the Google Maps API, that allows us to use the Google Maps
    tiles in a homogeneous way within the OpenLayers API.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not confuse Google Maps API with the Google Maps imagery. Google Maps API
    is a bunch of JavaScript code, which is free to use, while the access to the Google
    Maps imagery has some usage restrictions and, depending on the number of hits,
    will be subject to some payments.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use Google Maps imagery, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an HTML file and add the OpenLayers dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Google Maps API as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `div` element to hold the map, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within a `script` element, add the code to create the map instance and add
    a layer switcher control, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create some Google based maps and add to the map, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, center the map on a desired location, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As you can see, the code has three main sections. First we have placed a `div`
    element, which will be used for the map, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have included the Google Maps API code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that OpenLayers simply acts as a wrapper, so we need the real Google
    Maps API code in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within a`<script type="text/javascript"> </script>` element, we have added
    the code necessary to initialize the map and add a layer switcher control, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we have added some well known Google Maps layers and centered the
    map''s viewport, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The type of the layers are defined by the Google Maps API class `google.maps.MapTypeId`,
    which you can find at [http://code.google.com/apis/maps/documentation/javascript/reference.html#MapTypeId](http://code.google.com/apis/maps/documentation/javascript/reference.html#MapTypeId).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we are working with two APIs, OpenLayers and Google Maps API, so it
    would be good to take a look at the Google Maps API to better understand its capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation can be found at [https://developers.google.com/maps/documentation/javascript/tutorial](http://https://developers.google.com/maps/documentation/javascript/tutorial).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we have shown you how to use the Google Maps API Version 3 to
    add the Google imagery to your OpenLayers projects.
  prefs: []
  type: TYPE_NORMAL
- en: For the previous version 2, Google requires you to register as a user and obtain
    an API key that you need to use to initialize the `OpenLayers.Layer.Google` instance.
    The key is later used on every tile request to identify you, so Google can know
    about your usage.
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen, version 3 is much more simple to use within OpenLayers.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Adding WMS layer* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using Bing imagery* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Understanding base and non-base layers* recipe in [Chapter 1](ch01.html
    "Chapter 1. Web Mapping Basics"), *Web Mapping Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bing imagery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bing Maps, previously known as Virtual Earth, is the mapping service provided
    by Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way as Google Maps, OpenLayers offers an `OpenLayers.Layer.Bing`
    class, which brings us the possibility to add Bing imagery in our projects.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Bing imagery](img/7843_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bing Maps requires you to register as a consumer user. Once registered, you
    will get an API key needed to initialize the `OpenLayers.Layer.Bing` layer and
    that will be used with every request to authenticate you against the Bing Maps
    service.
  prefs: []
  type: TYPE_NORMAL
- en: Opposite to Google Maps, Bing does not require any JavaScript code and the `OpenLayers.Layer.Bing`
    class does not act as a wrapper. Bing Maps offer a REST service to directly access
    tiles using your API key.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find out how to register as a user at [http://msdn.microsoft.com/en-us/library/ff428642.aspx](http://msdn.microsoft.com/en-us/library/ff428642.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: In addition you can learn about Bing Maps REST Services at [http://msdn.microsoft.com/en-us/library/ff701713.aspx](http://msdn.microsoft.com/en-us/library/ff701713.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: At this point, it is assumed that you have an API key to be used in the next
    code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section we will see how to use Bing imagery. To use Bing imagery, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an HTML file and add the OpenLayers dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `DOM` element to place the map, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within a `script` element create the map instance and add a layer switcher
    control, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create some Bing layers, add to the map and center the map''s viewport, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The main point to take into account in this recipe is that we are using Microsoft
    services. We request an URL using our API key and get a tile. Because of this,
    every Bing layer must include a `key` parameter while instantiating, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We know about the `name` parameter as it is common in all layers. The `name`
    parameter is used to put a descriptive name for the layer and it will be used
    by switcher control.
  prefs: []
  type: TYPE_NORMAL
- en: As previously mentioned, the `key` parameter is used on every tile request and
    identifies us as registered Bing consumer users.
  prefs: []
  type: TYPE_NORMAL
- en: The `type` parameter is necessary to specify the kind of tile we want to get
    from Bing Maps. Bing offers Road, Aerial, or AerialWithLabels among other types.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find more information about Bing Maps layer types at [http://msdn.microsoft.com/en-us/library/ff701716.aspx](http://msdn.microsoft.com/en-us/library/ff701716.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Using Google Maps imagery* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding WMS layer* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Understanding base and non-base layers* recipe in [Chapter 1](ch01.html
    "Chapter 1. Web Mapping Basics"), *Web Mapping Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding WMS layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Web Map Service (WMS)** ,is a standard developed by the **Open Geospatial
    Consortium (OGC)** implemented by many geospatial servers, among which we can
    find the free and open source projects GeoServer ([http://geoserver.org](http://geoserver.org))
    and MapServer ([http://mapserver.org](http://mapserver.org)). More information
    on WMS can be found at [http://en.wikipedia.org/wiki/Web_Map_Service](http://en.wikipedia.org/wiki/Web_Map_Service).'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a very basic summary, you can understand a WMS server as a normal HTTP web
    server that accepts request with some GIS-related parameters (such as projection,
    bounding box, and so on) and returns a map similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding WMS layer](img/7843_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are going to work with remote WMS servers, so it is not necessary you have
    one installed. As an advise, note that we are not responsible for these servers
    and that they may have problems, or are not available when you read this section.
  prefs: []
  type: TYPE_NORMAL
- en: Any other WMS server can be used, but the URL and layer name must be known.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a WMS layer, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an HTML file and add the OpenLayers dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `div` element to hold the map, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the map instance as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add two WMS layers. The first will be the base layer and the second will
    be an overlay, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we add a layer switcher control and center the view, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `OpenLayers.Layer.WMS` class constructor requires four arguments to be
    instantiated (actually the fourth is optional), which are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `name` is common to all layers and is used as a user-friendly description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `url` is a string that must point to the WMS server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `params` parameter is an object and can contain any parameters used in
    a WMS request: layers, format, styles, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check the WMS standard to know which parameters you can use within the `params`.
  prefs: []
  type: TYPE_NORMAL
- en: The use of layers is mandatory, so you always need to specify this value. In
    addition, if using the SRS WMS request parameter, take into account that it is
    always ignored, because it is taken from the projection of the base layer or the
    map's projection.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `options` parameter is an optional object that contains specific properties
    for the layer object: `opacity, isBaseLayer`, among others'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this recipe, we have added one base layer as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: It makes use of the `name, url`, and `params` parameters, indicating the `basic`
    is the only layer to be requested.
  prefs: []
  type: TYPE_NORMAL
- en: 'Later, we have added a second overlay layer with weather radar information
    from NEXRAD ([http://en.wikipedia.org/wiki/NEXRAD](http://en.wikipedia.org/wiki/NEXRAD)),
    at the Iowa State University servers (you can find more information at [http://mesonet.agron.iastate.edu/ogc)](http://mesonet.agron.iastate.edu/ogc))
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In this case, in addition to the `layers` parameter, we have used the `transparent`
    and `format` parameters.
  prefs: []
  type: TYPE_NORMAL
- en: The `format` parameter is used in a WMS request to specify what image format
    we want to receive the images in.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `transparent` property is set to `true`. If it were not set, we would get
    white tiles with some colored radar data that will hide the base layer. Make the
    test using `transparent: "false"`.'
  prefs: []
  type: TYPE_NORMAL
- en: For this layer, we have also set the layer parameter `isBaseLayer` to `false`,
    to indicate we want it to act as an overlay.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: WMS servers returns images no matter whether there is information in the bounding
    box we are requesting or not.
  prefs: []
  type: TYPE_NORMAL
- en: The previously mentioned Nexrad WMS layer, showing the tile images with a white
    background was not desirable, so we used the `transparent` parameter to fix the
    issue.
  prefs: []
  type: TYPE_NORMAL
- en: When you set the `transparent` parameter to `true`, no matter which format you
    specify, internally the WMS class ensures the requests are made using the `format
    image/png` or `image/gif` to guarantee the transparency of those pixels that have
    no data.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, remember we can pass any parameter defined by WMS standard in the requests,
    by just specifying them in the `params` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Using Google Maps imagery* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using WMS with single tile mode* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Changing the layer opacity* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Buffering the layer data to improve the map navigation* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping the date line options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There might be situations where you do not want your map ends at -180 or +180
    longitude degrees as you are working in that area and need a continuous map. For
    example, imagine a map where on the left you can see the end of Russia and at
    the right Alaska, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wrapping the date line options](img/7843_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This property is a common attribute from base class `OpenLayers.Layer` and is
    called the `wrapDateLine`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To wrap the date line options, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an HTML file and add the OpenLayers dependency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the beginning, we have put a checkbox to activate/deactivate the wrap data
    line feature, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not worry about the `dojoType="dijit.form.CheckBox"` attribute, it is because
    the Dojo Toolkit ([http://dojotoolkit.org](http://dojotoolkit.org)) is used in
    the sample.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Think of it as a normal HTML input element.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we have added the `DOM` element used to render the map, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within a `script` element, create the map instance, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a WMS layer specifying the `wrapDateLine` property, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, implement the function that will change the `wrapDateLine` property
    value, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the magic of this recipe is in the `wrapDateLine` property in the `OpenLayers.Layer`
    class. You need to set it to `true` to wrap and create a continuous layer on their
    longitudinal axes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, we have created a function that reacts to changes in the checkbox
    to activate/deactivate the `wrapDateLine` property, as in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note that after changing the property value we need to redraw the layer so that
    it takes effect. This is done using the `redraw()` method inherited from the `OpenLayers.Layer`
    base class.
  prefs: []
  type: TYPE_NORMAL
- en: The `wrapDateLine` property is not a property of the map but a property of every
    layer; so if you want the whole map to have the same behavior, you need to set
    it to `true` in all layers.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Adding WMS layer* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using WMS with single tile mode* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the zoom effect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The panning and zoom effects are very important actions related to the user
    navigation experience.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 1](ch01.html "Chapter 1. Web Mapping Basics"), *Web Mapping Basics*,
    the recipe *Moving around the map view* shows how you can control and create the
    way the map can be panned.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way you can control the transition effect between two zoom levels
    on the layers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `OpenLayers.Layer` class has a `transitionEffect` property, which determines
    the effect applied to the layer when the zoom level is changed. For the moment
    only two values are allowed: `null` and `resize`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `null` value means no transition effect will be applied, because when you
    change the zoom level you probably see how the layer disappears until the tiles
    at the new zoom level are loaded.
  prefs: []
  type: TYPE_NORMAL
- en: With the `resize` value when we zoom into a level, the current tiles are resized,
    adapting to the new zoom, until the tiles at the new level are loaded in background.
    This way images are always visible and we avoid the ugly effect of seeing a blank
    map for a few seconds.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To change the zoom level, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an HTML file and include the required OpenLayers dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this recipe, we are going to add a checkbox button that allows us to change
    between the transition effects on a single layer, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the `div` element, which holds the map as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the JavaScript that initializes the map and creates one WMS layer, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, put the function that will toggle the `transitionEffect` property
    value, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As explained at the beginning of the recipe, all the magic is in the `transitionEffect`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: As the property is specific to a layer and not an `OpenLayers.Map` property,
    if you want to apply the same effect to the whole map, you need to set it on all
    its contained layers.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One or more `OpenLayers.Tile.Image` forms a raster layer, so when it is rendered
    the real work to draw the tiles is made easy by the tiles themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Although the `transitionEffect` is defined in the `OpenLayers.Layer` class (or
    subclasses), each individual tile is responsible for drawing the transition effect.
  prefs: []
  type: TYPE_NORMAL
- en: If you plan to create a new zoom transition effect, you will need to take a
    look at the `OpenLayers.Tile.Image` code as well.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Adding WMS layer* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Changing the layer opacity* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using WMS with single tile mode* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the layer opacity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you are working with many layers—both raster and vector layers—you will
    probably find situations where a layer that is on top of another layer hides the
    one below it. This is more common when working with raster WMS layers without
    the `transparent` property set to `true` or tiled layers such as, OpenStreetMaps,
    Google, and Bing. The layer opacity is set to **50%** in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the layer opacity](img/7843_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `OpenLayers.Layer` base class has an `opacity` property, implemented by
    concrete subclasses, that allows us to modify the opacity of the layers. It is
    a float value that can range from `0.0` (completely transparent) to `1.0` (completely
    opaque).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The opacity of the layers can be changed. To change the opacity of the layer,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an HTML file adding the required OpenLayers dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We have intentionally omitted the HTML code required for the slider control.
    Here, we have focused on the code for OpenLayers. If interested in knowing more
    about the code for the slider, it can be found in the recipe's source code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a `div` element to hold the map, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a map instance and add two layers, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a layer switcher control and center the map''s viewport, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, implement the function that receives the changes on the slider control
    and changes the layer opacity, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we have commented that the `opacity` property is the key in this recipe,
    the way to modify it is not by changing the attribute value directly but by using
    the `setOpacity()` method.
  prefs: []
  type: TYPE_NORMAL
- en: The `setOpacity()` method is responsible for modifying the `opacity` property
    in addition to modifying any `DOM` element (for example, the images of the tiles)
    and emitting a `changelayer` event, which notifies any listener interested in
    knowing about any layer changes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Wrapping the date line options* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Understanding base and non-base layers* recipe in [Chapter 1](ch01.html
    "Chapter 1. Web Mapping Basics"), *Web Mapping Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding WMS layer* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Buffering the layer data to improve the map navigation* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using WMS with single tile mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Web Map Service (WMS)** is a protocol to serve georeferenced map images.'
  prefs: []
  type: TYPE_NORMAL
- en: The basic idea is that, given a bounding box and some other parameters, such
    as a layer name, the client makes an HTTP request to the WMS server, which computes
    and returns an image with all the data for the specified layers and within the
    specified bounding box.
  prefs: []
  type: TYPE_NORMAL
- en: In OpenLayers, when you add a WMS layer to your map, the `OpenLayers.Layer.WMS`
    instance is provided with some parameters, such as resolutions and tile size.
    The WMS server computes the right number of tiles for each zoom level and divides
    the layer in that number of tiles.
  prefs: []
  type: TYPE_NORMAL
- en: This way, when you add a WMS layer to the map, there is not only one request
    to the server, but one by each tile that forms the current zoom level.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Dividing the WMS layer in tiles can be better from the server-side point of
    view when it is configured with a cache system. This way tiles are generated once
    and served many times.
  prefs: []
  type: TYPE_NORMAL
- en: If you have more than one web mapping application using WMS layers that point
    to the same WMS server, all the tiles can be served from the cache and the load
    on the server would drastically reduce.
  prefs: []
  type: TYPE_NORMAL
- en: Dividing the layer in tiles isn't the only way you can work with WMS layers;
    if you need to, you can work in the so-called single tile mode.
  prefs: []
  type: TYPE_NORMAL
- en: In this mode, only one image is used to cover the whole view—the map's bounding
    box, instead of using a bunch of tiles required for the tiled mode.
  prefs: []
  type: TYPE_NORMAL
- en: Every time the layer must be refreshed (as you move the map or change the zoom
    level) one request is made to the WMS server requesting data for the new map's
    bounding box.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, in single tile mode, the number of requests to the server are
    much less than those in tiled mode. In contrast, working in tiled mode, each tile
    request is easy to cache as the tile's bounding boxes are fixed for each zoom
    level; while in single tile mode each request is usually slightly different than
    the other (as little changes in the bounding box) and will result in a request
    to the WMS server, with the consequent computation time.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow through the steps to use WMS in single tile mode:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an HTML file and add the OpenLayers dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we are going to create two maps side by side, each one with a WMS layer,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, write the required JavaScript code to initialize both maps. The first
    one will contain a normal WMS layer, as follows :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second map will contain a WMS layer pointing to the same server but working
    in single tile mode, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The recipe code is pretty easy. The long explanation at the beginning, on how
    WMS layers can work in single tile mode, is simply achieved in practice using
    the `singleTile` property of the `OpenLayers.Layer` class. Pan or zoom the maps
    to see how differently it works.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Buffering the layer data to improve the map navigation* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding WMS layer* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Changing the layer opacity* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buffering the layer data to improve the map navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Map navigation is an important factor to take into account to make the user
    experience better.
  prefs: []
  type: TYPE_NORMAL
- en: When we pan the map, many times we get to see blank areas (meaning that the
    content is loading) and after a few seconds the image appears.
  prefs: []
  type: TYPE_NORMAL
- en: On gridded layers and WMS layers working in single tile mode, we can improve
    this at the cost of increasing the requests number or increasing the computation
    time at the server side.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most of the raster layers inherit from the base class `OpenLayers.Layer.Grid`,
    which is responsible for dividing each zoom level into tiles.
  prefs: []
  type: TYPE_NORMAL
- en: For WMS layers working in single tile mode, the grid is formed only by one tile,
    which fills the whole map view.
  prefs: []
  type: TYPE_NORMAL
- en: The idea behind improving map navigation is simple; load the tiles outside the
    map view so that they are loaded before the user pans the map view in that direction.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to preload content outside the map view, both for
    gridded layers and also for WMS layers working in single tile mode, so that you
    can improve the navigation experience of the users.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an HTML file and include the OpenLayers dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are going to create two maps side by side and on top of each one we are
    going to add a spinner control, from the Dojo Toolkit framework ([http://dojotoolkit.org](http://dojotoolkit.org)),
    to control the properties `buffer` and `singleTile` values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The left-hand side panel will show how to control the number of tiles that
    can be loaded outside the map view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The right-hand side panel shows how to control the amount of data you can preload
    in a WMS layer working in single tile mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, there is the code responsible for changes on the spinner controls,
    shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The left-hand side map contains a WMS layer working in the default tiled mode.
    In this mode, the `buffer` property from the base class `OpenLayers.Layer.Grid`
    specifies how many tiles must be loaded outside the map view.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a user changes the spinner value for the `buffer` property, we simply
    update it with the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The right-hand side map, on the other hand, has a WMS layer working in single
    tile mode (see the `singleTile` property set to `true)`. In this mode, only one
    request is made to get an image, which fills the whole map view.
  prefs: []
  type: TYPE_NORMAL
- en: We can control the size of the image with the `ratio` property, which belongs
    to the `OpenLayers.Layer.WMS` class. A ratio of value 1.0 means an image with
    exact dimensions of the map view. By default the ratio value is 1.5, which means
    we are requesting an image with the map view dimensions plus a half.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the ratio value is set once while creating the layer and to update
    it we need to delete the previous layer and create a new one with the new value.
    This is done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We first remove the layer from the map and later invoke the `destroy()` method
    to free internal resources used by the layer and avoid memory leaks.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember, the more tiles we load the more requests to the server. The same goes
    for a WMS layer in single tile mode; the greater the bounding box you request,
    the greater the computation time on the server results.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this, increasing the `buffer` or `ratio` values too much is not always
    the best solution.
  prefs: []
  type: TYPE_NORMAL
- en: Think about your data and how the user will explore it. If your data is probably
    better to explore in its extension—a great area in the same zoom level—then a
    buffer of one or two can be a good idea. If your data is mainly zoomed but the
    user is not interested in exploring large areas, then the default values are fine.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Using WMS with single tile mode* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting the tile size in WMS layers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding WMS layer* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an image layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes a tiled layer, such as Google Maps, OpenStreetMap, or WMS, is not
    what you need. It is quite possible that you have a georeferenced image, knowing
    its projection and bounding box, and want to render it on the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'In these cases, OpenLayers offers the `OpenLayers.Layer.Image` class that allows
    us to create a layer based on a simple image. A georeferenced image is shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an image layer](img/7843_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create an image layer, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's go and create an HTML file with the OpenLayers dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, add the `div` element that will hold the map, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, initialize the map and add a WMS base layer, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, define the image URL, its extent and size, and create an image layer as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `OpenLayers.Layer.Image` class constructor needs five parameters, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name:** This is the desired descriptive name for the layer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**url:** This is the URL for the image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**extent:** This is an instance of the `OpenLayers.Bounds` class with the bounding
    box of the image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**size:** This is an instance of the `OpenLayers.Size` with the image dimensions
    in pixels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**options:** This indicates a JavaScript object with different options for
    the layer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The image used in this recipe was previously obtained from NEXRAD (see [http://mesonet.agron.iastate.edu/current/mcview.phtml)](http://mesonet.agron.iastate.edu/current/mcview.phtml))
    so we know the exact coordinates of their bounding box. They are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to note that the bounds must be expressed in the same projection
    as the map, in this case EPSG:4326.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also know the image size in pixels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Given the image extent and size, OpenLayers computes the appropriate resolutions
    (think of it as zoom levels) where the image must be shown.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we always want to show the image on the map, no matter at which
    zoom level we are, and because of this we have used the `alwaysInRange` property
    set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Adding WMS layer* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using WMS with single tile mode* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Buffering the layer data to improve the map navigation* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the tile size in WMS layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `OpenLayers.Layer.Grid` class is a special kind of layer, which divides
    the layer in different zoom levels composed of a grid of tiles.
  prefs: []
  type: TYPE_NORMAL
- en: The `OpenLayers.Layer.WMS` class is a subclass of the preceding one and, in
    addition to working in single tile mode, it can work in tiled mode as well.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, controlling the size of the tiles of the WMS request can affect the
    performance. By default, the tile size is 256 x 256 pixels, but we can set this
    to any desired value. Bigger tile sizes means less request to the server but more
    computation time to generate a bigger image. On the contrary, smaller tile sizes
    means more server requests and less time to compute smaller images.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set the tile size, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an HTML file with OpenLayers library dependency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `div` element that will hold the map, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, initialize the map and add two layers, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the second layer, specify the size of the tiles as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is not much mystery in this recipe. The `tileSize` property is available
    both for `OpenLayers.Map` and `OpenLayers.Layer.Grid` subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: The `tileSize` must be an instance of `OpenLayers.Size` class, indicating the
    width and height in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: When the tile size is set in the map instance all layers use this value unless
    you specify another value for each individual layer.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the OpenLayers.Map instance is configured to use 256 x 256 size
    tiles. Because of this, the first layer makes requests to the WMS server using
    a tile size of 256 x 256 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, we have specified a 512 x 512 tile size value for the second
    layer, so the requests against the WMS are made waiting for tiles with 512 x 512
    size.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For tiled services, such as Google Maps or OpenStreetMap, the `tileSize` property
    is simply ignored because these services have precomputed the images in a fixed
    256 x 256 size.
  prefs: []
  type: TYPE_NORMAL
- en: The reason for the tile size value being 256 x 256 pixels is because the size
    (in bytes) of each image file is optimum for bandwidth use.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Using WMS with single tile mode* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Buffering the layer data to improve the map navigation* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
