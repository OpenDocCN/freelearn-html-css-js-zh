["```js\nCharts.defaults.global.elements.line.tension = 0;\nCharts.defaults.scales.ticks.beginAtZero = true;\n```", "```js\nCharts.defaults.radar.elements.line.tension = 0.4;\n```", "```js\nconst chart = new Chart(\"my-chart\", {     type: 'line', data: {...},\n   options: {\n     elements: {\n       line: {\n         tension: 0\n         //overrides Charts.defaults.global.elements.line.tension\n       }\n     }\n   }\n });\n```", "```js\ndatasets: [{\n    data: [1,2,1],\n    lineTension: 0.3\n}]\n```", "```js\nChart.defaults.global.showLines = false;\n```", "```js\nChart.defaults.global.legend.display = false;\n```", "```js\ndisplay = true\ncolor = 'rgba(0,0,0,0.1)\nlineWidth = 1\ndrawTicks: true\ndrawOnChartArea = true\noffsetGridLines = false\n```", "```js\ndisplay = false,\nlabelString = ''\nlineHeight = 1.2\npadding: {top: 4, bottom: 4}\n```", "```js\ndisplay = true\nbeginAtZero = false\nautoSkip = true\nreverse = false\n```", "```js\nChart.defaults.scale.scaleLabel.display = true;\nChart.defaults.scale.scaleLabel.labelString = 'default';\n```", "```js\nbackgroundColor:\"rgba(0,0,0,0.1)\"\nborderColor:\"#fff\"\nborderWidth:2\n```", "```js\nbackgroundColor:\"rgba(0,0,0,0.1)\"\nborderCapStyle:\"butt\"\n//(see Chapter 2)\n borderColor:\"rgba(0,0,0,0.1)\"\n borderDash:[]\n borderDashOffset:0\n borderJoinStyle:\"miter\"\n//(see Chapter 2)\n borderWidth:3\n capBezierPoints:true\n fill:true //(see Chapter 4)\n tension:0.4\n stepped: false\n```", "```js\nbackgroundColor:\"rgba(0,0,0,0.1)\"\nborderColor:\"rgba(0,0,0,0.1)\"\nborderWidth:1\nhitRadius:1\nhoverBorderWidth:1\nhoverRadius:4\npointStyle:\"circle\"\n//(see Chapter 4)\nradius:3\n```", "```js\nbackgroundColor:\"rgba(0,0,0,0.1)\"\nborderColor:\"rgba(0,0,0,0.1)\"\nborderSkipped:\"bottom\" (\"left\"in horizontalBar)\nborderWidth:0\n```", "```js\nconst line = Chart.defaults.global.elements.line;\nline.borderDash = [5,5];\nline.borderWidth = 5;\nline.borderColor = 'red';\n```", "```js\nhover.mode = 'label'\nscales.xAxes[0].type = 'category'\nscales.yAxes[0].type = 'linear'\n```", "```js\nhover.mode = 'index'\nscales.xAxes[0].type = 'linear'\nscales.yAxes[0].type = 'category'\nelements.rectangle.borderSkipped = 'left'\n```", "```js\ncircumference = 2 * Math.PI\ncutoutPercentage = 0\nhover.mode = 'single'\n```", "```js\ncircumference = 2 * Math.PI\ncutoutPercentage = 50\nhover.mode = 'single'\n```", "```js\nhover.mode = 'label'\nscales.xAxes[0] = {type: 'category', id: 'x-axis-0'}\nscales.yAxes[0] = {type: 'linear', id: 'y-axis-0'}\nshowLines = true,\nspanGaps = false\n```", "```js\nelements.line.tension = 0\nscale.type = 'radialLinear'\n```", "```js\nangleLines.display = false\ngridLines.circular = true\npointLabels.display = false\nticks.beginAtZero = true\ntype = \"radialLinear\"\nstartAngle = Math.PI / 2\n```", "```js\nhover.mode = 'single'\nshowLines = false\nscales.xAxes[0] = {type: 'linear', id: 'x-axis-1'}\nscales.yAxes[0] = {type: 'linear', id: 'y-axis-1'}\n```", "```js\nhover.mode = 'single'\nscales.xAxes[0] = {type: 'linear', id: 'x-axis-0'}\nscales.yAxes[0] = {type: 'linear', id: 'y-axis-0'}\n```", "```js\nconsole.log(Chart.defaults);\n```", "```js\nconst chart = new Chart(…);\nconsole.log(\"Chart Data, chart.config.data);\nconsole.log(\"Chart Options, chart.options);\n```", "```js\nChart.defaults.global.defaultFontFamily =\n     'Courier, \"Courier New\", \"Lucida Console\", monospace';Chart.defaults.global.defaultFontSize = 12;\nChart.defaults.global.defaultFontStyle= 'normal';\nChart.defaults.global.defaultFontColor = '#333';\n```", "```js\nChart.defaults.global.title.fontSize = 24;\n```", "```js\nconst chart = new Chart(\"my-chart\", {type: 'line', data: {…},\n    options: {\n        title: {\n            display: true,\n            text: \"Very large title that doesn't fit in the default space\",\n            fontSize: 20\n           }\n        }\n});\n```", "```js\n<link href=\"https://fonts.googleapis.com/css?family=Yanone+Kaffeesatz\"\n       rel=\"stylesheet\">\n```", "```js\nChart.defaults.global.defaultFontFamily = '\"Yanone Kaffesatz\", sans-serif';\n```", "```js\nChart.defaults.global.defaultFontColor = 'black';\nChart.defaults.global.defaultFontFamily =\n      '\"Yanone Kaffesatz\", \"Helvetica Narrow\", \"Arial Narrow\", sans-serif';\nChart.defaults.global.defaultFontSize = 24;\nChart.defaults.global.defaultFontStyle = 'normal';\nChart.defaults.global.title.fontSize = 40;\nChart.defaults.global.title.fontColor = 'hsla(240,50%,70%,1)';\nChart.defaults.global.legend.labels.fontColor = 'hsla(120,20%,60%,1)';\n```", "```js\n<body>\n<canvas id=\"canvas\" width=\"200\" height=\"100\"></canvas>\n<script>\n    const data = {\n        labels: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n        datasets: [\n            {\n                data: [10, 5, 2, 20, 30, 41],\n            }\n        ]\n    };\n    new Chart('canvas', { type: 'bar', data: data, \n                          options: {legend: {display: false}} });\n</script>\n</body>\n```", "```js\ndatasets: [{\n   data: [10, 5, 2, 20, 30, 41],\n   backgroundColor:['#d73027','#fc8d59','#fee090','#e0f3f8','#91bfdb','#4575b4']\n}]\n```", "```js\n<script src=\"img/palette.min.js\"></script>\n```", "```js\nconst colorsArray = palette('tol', 6);\n```", "```js\nconst colorsArray = palette('tol', 6).map(n=>'#'+n);\n```", "```js\nbackgroundColor: colorsArray\n```", "```js\ncanvasContext.createLinearGradient(x0, y0, x1, y1);\n```", "```js\nfunction drawGradient(chart) {\n     const x0 = 0;\n     const y0 = chart.scales[\"y-axis-0\"].top;\n     const x1 = 0;\n     const y1 = chart.scales[\"y-axis-0\"].bottom;\n\n     const gradient1 = chart.ctx.createLinearGradient(x0, y0, x1, y1);\n     gradient1.addColorStop(0, 'hsla(60,100%,70%,.4)');\n     gradient1.addColorStop(1, 'hsla(0,100%,25%,.8)');\n\n     const gradient2 = chart.ctx.createLinearGradient(x0, y0, x1, y1);\n     gradient2.addColorStop(0, 'hsla(300,100%,70%,.4)');\n     gradient2.addColorStop(1, 'hsla(240,100%,25%,.8)');\n\n     chart.data.datasets[0].backgroundColor = gradient1;\n     chart.data.datasets[1].backgroundColor = gradient2;\n }\n```", "```js\nconst data = {\n    labels: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n    datasets: [\n        {\n            label: 'Week 1',\n            data: [2, 5, 2, 0, 20, 48, 51],\n            borderColor: 'red'\n        },{\n            label: 'Week 2',\n            data: [44, 36, 13, 40, 40, 9, 3],\n            borderColor: 'blue'\n        }\n    ]\n};\n\nconst chart = new Chart('canvas', {\n    type: 'line',\n    data: data,\n    options: {\n        animation: {\n            onComplete: function(context) {\n               drawGradient(context.chart);\n            }\n        }\n    }\n});\ndrawGradient(chart);\nchart.update();\n```", "```js\n<script src=\"img/patternomaly.min.js\">\n</script>\n```", "```js\npattern.generate('rgb(50%,20%,10%');\n```", "```js\npattern.draw('triangle', 'lightblue');\n```", "```js\nlet patternArray = ['#d73027','#fc8d59','#fee090','#e0f3f8','#91bfdb','#4575b4'];\npattern.generate(patternArray);\n```", "```js\nbackgroundColor: pattern.generate( palette('tol', 6).map(n=>'#'+n) ),\n```", "```js\n<script src=\"img/chartjs-plugin-style.min.js\"></script>\n```", "```js\nconst data = {\n    labels: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n    datasets: [\n        {\n            label: 'Week 1',\n            data: [20, 5, 2, 20, 30, 51],\n            backgroundColor: ['yellow','red','blue','green','orange', \n            'cyan'],\n            bevelWidth: 3,\n            bevelHighlightColor: 'rgba(255, 255, 255, 0.75)',\n            bevelShadowColor: 'rgba(0, 0, 0, 0.5)',\n            shadowOffsetX: 5,\n            shadowOffsetY: 5,\n            shadowBlur: 10,\n            shadowColor: 'rgba(0, 0, 0, 0.5)',\n        }\n    ]\n};\n\nnew Chart('canvas', { type: 'bar', data: data,\n                      options: {legend: {display: false}} });\n```", "```js\nconst data = [[12,19,3,5,2,3],[6,5,33,2,7,11],[2,3,5,16,0,1]],\n   strokes = ['rgba(54,162,235,1)','rgba(255,99,132,1)', \n              'rgba(132,255,99,1)'],\n   fills =  \n   ['rgba(54,162,235,.2)','rgba(255,99,132,.2)','rgba(132,200,99,.2)']; const grayFill = 'rgb(0,0,0,.2)';\nconst grayStroke = 'rgb(0,0,0,.8)';\n\nconst datasets = [];\nfor(const i = 0; i < data.length; i++) {\n     datasets.push({\n         label: 'Dataset ' + (i+1),\n         data: data[i],\n         backgroundColor: fills[i],\n         borderColor: strokes[i],\n         borderWidth: 1\n     });\n }\n\n const myChart = new Chart(\"myChart\", {\n     type: 'line',\n     data: {\n         labels: ['Day 1','Day 2','Day 3','Day 4','Day 5','Day 6'],\n         datasets: datasets,\n     },\n     options: {\n         legend: {\n             position: 'left',\n             reverse: true,\n             onClick: function(event, label) {\n                 const index = label.datasetIndex;\n                 const dataset = this.chart.data.datasets[index];\n                 if(dataset.backgroundColor == fills[index]) {\n                     dataset.backgroundColor = grayFill;\n                     dataset.borderColor = grayStroke;\n                 } else {\n                     dataset.backgroundColor = fills[index];\n                     dataset.borderColor = strokes[index];\n                 }\n                 this.chart.update();\n             }\n         }\n     }\n })\n```", "```js\n    Chart.defaults.global.legend.labels.fontSize = 16;\n    Chart.defaults.global.legend.labels.boxWidth = 20;\n```", "```js\nlabels: {\n    filter: function(label, item) {\n      return Math.max(...item.datasets[label.datasetIndex].data) <= 20;\n    }\n}\n```", "```js\n <script src=\"img/chartjs-plugin-datalabels\">  \n </script>\n```", "```js\noptions: {\n    plugins: {\n        datalabels: {\n            backgroundColor: function(context) {\n                return context.dataset.borderColor;\n           },\n          borderRadius: 4,\n          color: 'white',\n          font: { weight: 'bold'},\n          formatter: Math.round\n     }\n },\n}\n```", "```js\n<script src=\"img/> outlabels\"> </script>\n```", "```js\n const data = {\n     labels: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n     datasets: [\n         {\n             label: 'Week 1',\n             data: [20, 5, 2, 20, 30, 51],\n             backgroundColor: palette('tol', 6).map(n=>'#'+n),\n         }\n     ]\n };\n\n new Chart('canvas', {\n     type: 'outlabeledPie',\n     data: data,\n     options: {\n         zoomOutPercentage: 30,\n         plugins: {\n             legend: false,\n             outlabels: {\n                 text: '%l %p',\n                 color: 'white',\n                 stretch: 45,\n                 font: {\n                     resizable: true,\n                     minSize: 12,\n                     maxSize: 18\n                 }\n             }\n         }\n     }\n });\n```", "```js\nconst chart = new Chart(…);\n // make changes\n chart.update();\n```", "```js\ncallback: function() {\n     // make changes\n     this.chart.update();\n}\n```", "```js\nfunction square(chart) {\n    const datasets = chart.config.data.datasets;\n    for(let i = 0; i < datasets.length; i++) {\n        for(let j = 0; j < datasets[i].data.length; j++) {\n            let value = datasets[i].data[j];\n            datasets[i].data[j] = value * value;\n        }\n    }\n    chart.options.scales.yAxes = \n        Chart.helpers.scaleMerge(Chart.defaults.scale, \n                                 {yAxes: [{type: 'logarithmic'}]}).yAxes; \n    chart.update();\n}\n\nfunction squareRoot(chart) {\n    const datasets = chart.config.data.datasets;\n    for(let i = 0; i < datasets.length; i++) {\n        for(let j = 0; j < datasets[i].data.length; j++) {\n            let value = datasets[i].data[j];\n            datasets[i].data[j] = Math.sqrt(value);\n        }\n    }\n    chart.options.scales.yAxes = \n        Chart.helpers.scaleMerge(Chart.defaults.scale, \n                                 {yAxes: [{type: 'linear'}]}).yAxes; \n    chart.update();\n}\n```", "```js\n let button = document.getElementById(\"toggle\");\n button.addEventListener('click', function() {\n     const type = myChart.options.scales.yAxes[0].type;\n     if(type == 'linear') {\n         square(myChart);\n     } else {\n         squareRoot(myChart);\n     }\n });\n```", "```js\nevents: [\"mousemove\", \"mouseout\", \"click\", \"touchstart\", \"touchmove\", \"touchend\"]\n```", "```js\noptions: {\n   events: ['click']\n}\n```", "```js\noptions: {\n    animation: {\n        duration: 0\n    }\n}\n```", "```js\n<body>\n<canvas id=\"myChart\" width=\"400\" height=\"200\"></canvas>\n<form><button type=\"button\" id=\"toggle\">Square/Unsquare</button></form>\n<progress id=\"progress\" max=\"1\" value=\"0\"></progress>\n<script>\n    ...\n    const progress = document.getElementById(\"progress\");\n    ...\n    const myChart = new Chart(\"myChart\", { type: 'line', data: {…},\n        options: {\n           animation: {\n                 duration: 5000,\n                onProgress: function(animation) {\n                    console.log(animation.currentStep /  \n                                animation.numSteps);\n                    progress.value = animation.currentStep / \n                                     animation.numSteps;\n                },\n                onComplete: function(animation) {\n                    console.log(animation.currentStep);\n               }\n            }\n      }\n})\n    let button = document.getElementById(\"toggle\");\n    button.addEventListener('click', function() {…});\n</script>\n```"]