["```js\n@page {\n  bleed: 5mm;\n}\n```", "```js\n@page {\n  marks: crop cross;\n}\n```", "```js\n/*Default values*/\nul { list-style: disc outside none; }\n/*One value, the other two are default*/\nul { list-style: circle; }\n/*Two values, the other one is defaults*/\nul { list-style: lower-roman inside; }\n/*Three values*/\nul { list-style: decimal outside url(../images/list-bullet.png); }\n```", "```js\n/*Style: 01, 02, 03...*/\nul { list-style-type: decimal-leading-zero; }\n/*Style: α, β, γ...*/\nul { list-style-type: lower-greek; }\n/*Style: A, B, C...*/\nul { list-style-type: upper-latin; }\n```", "```js\nul {\n  list-style-position: inside;\n}\n```", "```js\nul {\n  list-style-image: url(../images/list-bullet.png);\n}\n```", "```js\ncounter-reset: basic-counter;\n```", "```js\n/*Define a name and counter reset to 0*/\nul { counter-reset: basic-counter; }\n/*The counter will start at 3*/\nul { counter-reset: basic-counter 2; }\n/*Multiple counters in a single declaration*/\nul { counter-reset: basic-counter-A, basic-counter-B 2; }\n```", "```js\ncounter-increment: basic-counter 2;\n```", "```js\n/*First, define a name and counter reset to 0 with counter-reset*/\nul { counter-reset: basic-counter; }\n/*Then, invoque the counter name and increment every element by 2 (2, 4, 6, and so on.)*/\nul li { counter-increment: basic-counter 2; }\n/*Multiple counters*/\nul li { counter-increment: basic-counter 2 roman-numeral-counter; }\n```", "```js\nbox-shadow: 10px 10px 13px 5px rgba(0, 0, 0, .5) inset;\n```", "```js\n/*Left 10px, top 10px, blur 13px, spread 5px, RGBa mode, inside the element*/\n.element {\n  box-shadow: 10px 10px 13px 5px rgba(0, 0, 0, .5) inset;\n}\n```", "```js\nall: initial;\n```", "```js\n/*Change an element's properties to their initial value*/\n.element { all: initial; }\n/*Inherit all the initial properties of the parent container*/\n.element { all: inherit; }\n/*Change the parent's properties to its parent values if inheritable*/\n.parent-container { all: unset; }\n```", "```js\nclear: both;\n```", "```js\n/*Float an element to the left*/\n.element-a { float: left; }\n/*Float an element to the right*/\n.element-b { float: right; }\n/*Clear the floats on the parent container*/\n.parent-container:after {\n  content: '';\n  display: table;\n  clear: both;\n}\n```", "```js\ndisplay: block;\n```", "```js\n/*Make an element display like a block level element*/\n.element { display: block; }\n/*Make an element display like a <table> element*/\n.element { display: table; }\n/*Make an element display like an inline-block element - <li>*/\n.element { display: inline-block; }\n/*Hide an element an its children*/\n.element { display: none; }\n```", "```js\nopacity: .55;\n```", "```js\n/*Make an element 55% opaque. This affects its children as well*/\n.element { opacity: .55; }\n/*Makes shadow 20% opaque. Same effect as in RGBa and HSLa color modes.*/\n.element { box-shadow: 0 0 5px rgba(0, 0, 0, .2); }\n```", "```js\nfilter: blur(10px);\n```", "```js\n/*Blur*/\n.element { filter: blur(10px); }\n/*Brightness*/\n.element { filter: brightness(20%); }\n/*Contrast*/\n.element { filter: contrast(10); }\n/*Drop shadow*/\n.element { filter: drop-shadow(5px 5px 3px rgba(0, 0, 0, .5)); }\n/*Grayscale*/\n.element { filter: grayscale(.8); }\n/*Hue rotation*/\n.element { filter: hue-rotate(80deg); }\n/*Invert*/\n.element { filter: invert(1); }\n/*Opacity*/\n.element { filter: opacity(.2); }\n/*Saturation*/\n.element { filter: saturate(300%); }\n/*Sepia*/\n.element { filter: sepia(100%); }\n/*URL*/\n.element { filter: url(/images/file.svg#blur); }\n/*Multiple filters for a single element*/\n.element { filter: sepia(100%) saturate(200%) hue-rotate(50deg); }\n```", "```js\noverflow: auto;\n```", "```js\n/*Scroll bars are generated if the content needs them*/\n.element {\n  white-space: nowrap;\n  overflow: auto;\n}\n/*Clearing floats. Be careful with this technique*/\n.parent-container { overflow: hidden; }\n```", "```js\noverflow-x: auto;\n```", "```js\n.element {\n  white-space: nowrap;\n  overflow-x: auto;\n}\n```", "```js\noverflow-y: auto;\n```", "```js\n.element {\n  height: 100px;\n  overflow-y: auto;\n}\n```", "```js\nvisibility: hidden;\n```", "```js\n/*Hide an element*/\n.element { visibility: hidden; }\n/*Parent container visible while child heading is visible*/\n.parent-container { visibility: hidden; }\n.parent-container h1 { visibility: visible; }\n/*Hide table elements*/\ntr { visibility: collapse; }\ntfoot { visibility: collapse; }\n```", "```js\n/*Set all cards to relative position so z-index can work*/\n.card { position: relative; }\n/*The Ace card sits on top of the pile*/\n.card.ace { z-index: 2; }\n/*The Five card sits at the bottom of the pile*/\n.card.five { z-index: 0; }\n/*The Queen card sits in between the Ace and the Five*/\n.card.queen { z-index: 1; }\n```", "```js\nmask: url(../images/mask.png) 50% 50% / contain no-repeat border-box;\n```", "```js\n/*Mask referencing a bitmap file.\nWe are specifying: mask-image mask-position / mask-size mask-repeat mask-clip\n*/\n.element {\n  mask: url(../images/mask.png) 50% 50% / contain no-repeat border-box;\n}\n/*Mask using the CSS linear-gradient property*/\n.element {\n  mask: linear-gradient(black 5%, transparent);\n}\n/*Mask created by declaring multiple masks*/\n.element {\n  mask:\n    url(../images/mask.png) 50% 50% / contain no-repeat border-box,\n    linear-gradient(white 5%, transparent);\n}\n```", "```js\nmask-clip: padding-box;\n```", "```js\n/*Padding box clipping*/\n.element { mask-clip: padding-box; }\n/*Multiple values*/\n.element { mask-clip: padding-box, border-box; }\n```", "```js\nmask-composite: intersect;\n```", "```js\n/*Intersect the masks*/\n.element { mask-composite: intersect; }\n/*Multiple values*/\n.element { mask-composite: intersect, exclude; }\n```", "```js\nmask-composite: intersect;\n```", "```js\n/*Mask referencing a bitmap*/\n.element { mask-image: url(../images/mask.png); }\n/*Mask using a CSS gradient*/\n.element { mask-image: linear-gradient(black 5%, transparent); }\n/*Mask referencing an SVG <mask>*/\n.element { mask-image: url(../images/file.svg#mask); }\n/*Multiple values*/\n.element { mask-image: url(../images/mask.png), linear-gradient(black 5%, transparent); }\n```", "```js\nmask-mode: alpha;\n```", "```js\n/*Alpha mask*/\n.element { mask-mode: alpha; }\n/*Multiple values*/\n.element { mask-mode: alpha, luminance; }\n```", "```js\nmask-mode: alpha;\n```", "```js\n/*Content box origin; the mask will exclude borders and paddings*/\n.element { mask-origin: content-box; }\n/*Multiple values*/\n.element { mask-origin: border-box, padding-box; }\n```", "```js\nmask-position: right top;\n```", "```js\n/*Keyword values*/\n.element { mask-position: right top; }\n/*Length and Percentage values*/\n.element { mask-position: 50px 25%; }\n/*Multiple values*/\n.element { mask-position: right top, 50% 50%; }\n```", "```js\nmask-repeat: space;\n```", "```js\n/*Space out the mask without clipping it*/\n.element { mask-repeat: space; }\n/*Repeat the mask in the X-axis (horizontally)*/\n.element { mask-repeat: repeat-x; } \n/*Multiple values*/\n.element { mask-repeat: space, repeat-x; }\n```", "```js\nmask-size: contain;\n```", "```js\n.element {\n  mask-size: contain;\n}\n```", "```js\nmask-border: url(../images/border-image-mask.png) 15 / 15px stretch and so on;\n```", "```js\n.element {\n  mask-border: url(../images/border-image-mask.png) 15 / 15px stretch;\n}\n```", "```js\n/*Border image referencing a bitmap file*/\n.element { mask-border-image: url(../images/border-image-mask.png); }\n/*Border image using a CSS gradient*/\n.element { mask-border-image: linear-gradient(red, transparent); }\n```", "```js\n.element {\n  mask-border-mode: luminance;\n}\n```", "```js\nmask-border-slice: 40;\n```", "```js\n/*All sides are offset by 40*/\n.element { mask-border-slice: 40; }\n/*Top & bottom and left & right values*/\n.element { mask-border-slice: 20% 30%; }\n/*Make the center of the image part of the mask with top & bottom, and left & right offsets*/\n.element { mask-border-slice: fill 40 25; }\n```", "```js\nmask-border-width: auto;\n```", "```js\n.element {\n  mask-border-width: auto;\n}\n```", "```js\nmask-border-outset: 10px;\n```", "```js\n/*All four sides have the same value*/\n.element { mask-border-outset: 10px; }\n/*Top & bottom and left & right values*/\n.element { mask-border-outset: 2 6; }\n/*Top, left & right, and bottom values*/\n.element { mask-border-outset: 5 20px 2; }\n```", "```js\nmask-border-repeat: repeat;\n```", "```js\n.element {\n  mask-border-repeat: repeat;\n}\n```", "```js\nclip-path: url(..images/file.svg#clipping-path);\n```", "```js\n/*Clipping path referenced from an external SVG file*/\n.element { clip-path: url(..images/file.svg#clipping-path); }\n/*Clipping path referenced from an embedded SVG*/\n.element { clip-path: url(#clipping-path); }\n```", "```js\n/*Circle 150px wide and tall with location*/\n.element { clip-path: circle(150px at 0 50%); }\n/*Circle without location is centered on the element*/\n.element { clip-path: circle(150px); }\n/*Circle defaults to closest-side and is centered on the element*/\n.element { clip-path: circle(); }\n```", "```js\n/*Ellipse with location*/\n.element { clip-path: ellipse(200px 100px at 0 50%); }\n/*Ellipse without location is centered*/\n.element { clip-path: ellipse(200px 100px); }\n/*No value makes an ellipse that is as wide an tall as the element*/\n.element { clip-path: ellipse(); }\n```", "```js\n/*Inset clip path where all four offset sides have the same distance*/\n.element { clip-path: inset(20px); }\n/*Inset clip path with border-radius declared*/\n.element { clip-path: inset(5% 20px 10% 40px round 20px); }\n```", "```js\n/*This polygon has 3 pairs of coordinates so it creates a triangle-shaped clipping path*/\n.element { clip-path: polygon(0 0, 0 100%, 100% 0); }\n/*Custom polygon (a star) from Bennett Feely's, Clippy tool*/\n.element { clip-path: polygon(50% 0%, 63% 38%, 100% 38%, 69% 59%, 82% 100%, 50% 75%, 18% 100%, 31% 59%, 0% 38%, 37% 38%); }\n```", "```js\nimage-orientation: flip;\n```", "```js\n/*Flip the image horizontally*/\nimg { image-orientation: flip; }\n/*Rotate the image 180 degrees and flip it horizontally*/\nimg { image-orientation: 180deg flip; }\n/*Follow the orientation from the EXIF information in the image*/\nimg { image-orientation: from-image; }\n```", "```js\nimage-rendering: pixelated;\n```", "```js\n/*Good for checkered patterns or QR codes*/\nimg { image-rendering: pixelated; }\n/*Exclusively for pixel art*/\nimg { image-rendering: crisp-edges; }\n```", "```js\ncursor: pointer;\n```", "```js\n/*Custom cursor with absolute path and coordinates*/\n.element { cursor: url(/images/cursor.cur) 10 10, default; }\n/*Multiple custom cursors with coordinates*/\n.element { cursor: url(/images/cursor-1.png) 5 5, url(/images/cursor-2.png) 0 0, default; }\n/*Assign a pointer on the <button> and <select> elements*/\nbutton,\nselect { cursor: pointer; }\n```", "```js\npointer-events: none;\n```", "```js\n/*Clicking/tapping on the element won't work*/\n.element { pointer-events: none; }\n/*Restore the default clicking/tapping behavior to the element*/\n.element { pointer-events: auto; }\n```", "```js\n.element {\n  outline: dotted 2px rgba(0, 0, 0, .5);\n}\n```", "```js\nperspective: 300px;\n```", "```js\n/*Enable perspective for child elements by applying it on the parent container*/\n.parent-container { perspective: 300px; }\n/*Child element will move in a 3D plane*/\n.parent-container .element { transform: rotateX(170deg); }\n```", "```js\nPerspective-origin: 24% center;\n```", "```js\n/*Enable perspective for child elements by applying it on the parent container*/\n/*The origin of the perspective X and Y-axis*/\n.parent-container {\n  perspective: 300px;\n  perspective-origin: 24% center;\n}\n/*Child element will move in a 3D plane*/\n.parent-container .element { transform: rotateX(170deg); }\n```", "```js\nbackface-visibility: hidden;\n```", "```js\nAnd finalizing the prior example from the perspective-origin example:\n/*Enable perspective for child elements by applying it on the parent container*/\n/*The origin of the perspective X and Y-axis*/\n.parent-container {\n  perspective: 300px;\n  perspective-origin: 24% center;\n}\n/*Child element will move in a 3D plane*/\n/*The backside of the element will not be visible*/\n.parent-container .element {\n  transform: rotateX(170deg);\n  backface-visibility: hidden;\n}\n```"]