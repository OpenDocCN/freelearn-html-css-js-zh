["```js\nconst fs = require('fs'); \n\nexports.deleteFile = function(fname, callback) { \n  fs.stat(fname, (err, stats) => { \n    if (err) callback(new Error(`the file ${fname} does not exist`)); \n    else { \n      fs.unlink(fname, err2 => { \n        if (err) callback(new Error(`could not delete ${fname}`)); \n        else callback(); \n      }); \n    } \n  }); \n}; \n```", "```js\nconst fs = require('fs'); \nconst assert = require('assert'); \nconst df = require('./deleteFile'); \n\ndf.deleteFile(\"no-such-file\", (err) => { \n    assert.throws( \n        function() { if (err) throw err; }, \n        function(error) { \n            if ((error instanceof Error) \n             && /does not exist/.test(error)) { \n               return true; \n            } else return false; \n        }, \n        \"unexpected error\" \n    ); \n}); \n```", "```js\n$ node test-deleteFile.js \n```", "```js\n$ npm init\n... answer the questions to create package.json\n$ npm install mocha@5.x chai@4.1.x esm --save\n```", "```js\n'use strict'; \n\nrequire = require(\"esm\")(module,{\"esm\":\"js\"});\nconst assert = require('chai').assert; \nconst model = require('../models/notes');\n\ndescribe(\"Model Test\", function() { \n  .. \n}); \n```", "```js\ndescribe(\"Model Test\", function() { \n  beforeEach(async function() {\n    try {\n      const keyz = await model.keylist();\n      for (let key of keyz) {\n        await model.destroy(key);\n      }\n      await model.create(\"n1\", \"Note 1\", \"Note 1\");\n      await model.create(\"n2\", \"Note 2\", \"Note 2\");\n      await model.create(\"n3\", \"Note 3\", \"Note 3\");\n    } catch (e) {\n      console.error(e);\n      throw e;\n    }\n  });\n    .. \n}); \n```", "```js\n  describe(\"check keylist\", function() {\n    it(\"should have three entries\", async function() {\n      const keyz = await model.keylist();\n      assert.exists(keyz);\n      assert.isArray(keyz);\n      assert.lengthOf(keyz, 3);\n    });\n    it(\"should have keys n1 n2 n3\", async function() {\n      const keyz = await model.keylist();\n      assert.exists(keyz);\n      assert.isArray(keyz);\n      assert.lengthOf(keyz, 3);\n      for (let key of keyz) {\n        assert.match(key, /n[123]/, \"correct key\");\n      }\n    });\n    it(\"should have titles Node #\", async function() {\n      const keyz = await model.keylist();\n      assert.exists(keyz);\n      assert.isArray(keyz);\n      assert.lengthOf(keyz, 3);\n      var keyPromises = keyz.map(key => model.read(key));\n      const notez = await Promise.all(keyPromises);\n      for (let note of notez) {\n        assert.match(note.title, /Note [123]/, \"correct title\");\n      }\n    });\n  });\n```", "```js\n\"test-notes-memory\": \"NOTES_MODEL=memory mocha test-model\",\n```", "```js\n$ npm run test-notes-memory\n\n> notes-test@1.0.0 test-notes-memory /Users/david/chap11/notes/test\n> NOTES_MODEL=memory mocha test-model\n\n Model Test\n check keylist\n √ should have three entries\n √ should have keys n1 n2 n3\n √ should have titles Node #\n\n 3 passing (18ms)\n```", "```js\ndescribe(\"read note\", function() {\n    it(\"should have proper note\", async function() {\n        const note = await model.read(\"n1\");\n        assert.exists(note);\n        assert.deepEqual({ key: note.key, title: note.title, body: \n        note.body }, {\n          key: \"n1\", title: \"Note 1 FAIL\", body: \"Note 1\"\n        });\n    });\n\n    it(\"Unknown note should fail\", async function() {\n        try {\n          const note = await model.read(\"badkey12\");\n          assert.notExists(note);\n          throw new Error(\"should not get here\");\n        } catch(err) {\n          // this is expected, so do not indicate error\n          assert.notEqual(err.message, \"should not get here\");\n        }\n    });\n});\n\ndescribe(\"change note\", function() {\n    it(\"after a successful model.update\", async function() {\n        const newnote = await model.update(\"n1\", \"Note 1 title \n        changed\", \"Note 1 body changed\");\n        const note = await model.read(\"n1\");\n        assert.exists(note);\n        assert.deepEqual({ key: note.key, title: note.title, body: \n        note.body }, {\n          key: \"n1\", title: \"Note 1 title changed\", body: \"Note 1 body \n        changed\"\n        });\n    });\n});\n\ndescribe(\"destroy note\", function() {\n    it(\"should remove note\", async function() {\n        await model.destroy(\"n1\");\n        const keyz = await model.keylist();\n        assert.exists(keyz);\n        assert.isArray(keyz);\n        assert.lengthOf(keyz, 2);\n        for (let key of keyz) {\n          assert.match(key, /n[23]/, \"correct key\");\n        }\n    });\n    it(\"should fail to remove unknown note\", async function() {\n        try {\n          await model.destroy(\"badkey12\");\n          throw new Error(\"should not get here\");\n        } catch(err) {\n            // this is expected, so do not indicate error\n            assert.notEqual(err.message, \"should not get here\");\n        }\n    });\n  });\n\n  after(function() {  model.close(); });\n}); \n```", "```js\n$ npm run test-notes-memory\n\n> notes-test@1.0.0 test-notes-memory /Users/david/chap11/notes/test\n> NOTES_MODEL=memory mocha test-model\n\n  Model Test\n    check keylist\n      √ should have three entries\n      √ should have keys n1 n2 n3\n      √ should have titles Node #\n    read note\n      √ should have proper note\n      √ Unknown note should fail\n    change note\n      √ after a successful model.update\n    destroy note\n      √ should remove note\n      √ should fail to remove unknown note\n\n  8 passing (17ms) \n```", "```js\nassert.deepEqual({ key: note.key, title: note.title, body: note.body }, {\n   key: \"n1\", title: \"Note 1\", body: \"Note 1\"\n });\n```", "```js\n Model Test \n check keylist \n √ should have three entries \n √ should have keys n1 n2 n3 \n √ should have titles Node # \n read note \n 1) should have proper note \n √ Unknown note should fail \n change note \n √ after a successful model.update \n destroy note \n √ should remove note \n √ should fail to remove unknown note \n\n 7 passing (42ms) \n 1 failing \n\n 1) Model Test \n read note \n should have proper note: \n AssertionError: expected { Object (key, title, ...) } to deeply \n equal { Object (key, title, ...) } \n + expected - actual \n\n { \n \"body\": \"Note 1\" \n \"key\": \"n1\" \n -  \"title\": \"Note 1\" \n +  \"title\": \"Note 1 FAIL\" \n } \n\n at Context.<anonymous> (test-model.js:53:16) \n at <anonymous> \n\n```", "```js\n\"test-notes-levelup\": \"NOTES_MODEL=levelup mocha\",\n\"test-notes-fs\": \"NOTES_MODEL=fs mocha\", \n```", "```js\n$ npm run test-notes-fs \n$ npm run test-notes-levelup \n```", "```js\n\"test-notes-sqlite3\": \"rm -f chap11.sqlite3 && sqlite3 chap11.sqlite3 --init ../models/chap07.sql </dev/null && NOTES_MODEL=sqlite3 SQLITE_FILE=chap11.sqlite3 mocha test-model\", \n```", "```js\n$ npm run test-notes-sqlite3 \n\n> notes-test@1.0.0 test-notes-sqlite3 /Users/david/chap11/notes/test \n> rm -f chap11.sqlite3 && sqlite3 chap11.sqlite3 --init ../models/chap07.sql </dev/null && NOTES_MODEL=sqlite3 SQLITE_FILE=chap11.sqlite3 mocha test-model \n\n  Model Test \n    check keylist \n      √ should have three entries \n      √ should have keys n1 n2 n3 \n      √ should have titles Node # \n    read note \n      √ should have proper note \n      1) Unknown note should fail \n    change note \n      √ after a successful model.update (114ms) \n    destroy note \n      √ should remove note (103ms) \n      2) should fail to remove unknown note \n\n  6 passing (6s) \n  2 failing \n\n  1) Model Test \n       read note \n         Unknown note should fail: \n     Uncaught TypeError: Cannot read property 'notekey' of undefined \n      at Statement.db.get (/home/david/nodewebdev/node-web-development-\n  code-4th-edition/chap11/notes/models/notes-sqlite3.mjs:64:39)                               \n\n  2) Model Test \n       destroy note \n         should fail to remove unknown note: \n\n      AssertionError: expected 'should not get here' to not equal \n  'should not get here' \n      + expected - actual \n```", "```js\nconst note = new Note(row.notekey, row.title, row.body);\n```", "```js\nexport async function read(key) {\n  var db = await connectDB();\n  var note = await new Promise((resolve, reject) => {\n    db.get(\"SELECT * FROM notes WHERE notekey = ?\", [ key ], (err, row) \n    => {\n        if (err) return reject(err);\n        if (!row) { reject(new Error(`No note found for ${key}`)); } \n        else {\n            const note = new Note(row.notekey, row.title, row.body);\n            resolve(note);\n        }\n    });\n  });\n  return note;\n}\n```", "```js\nawait model.destroy(\"badkey12\");\n```", "```js\ndb.run(\"DELETE FROM notes WHERE notekey = ?;\", ... );\n```", "```js\nexport async function destroy(key) {\n    const db = await connectDB();\n    const note = await read(key);\n    return await new Promise((resolve, reject) => {\n        db.run(\"DELETE FROM notes WHERE notekey = ?;\", [ key ], err => \n       {\n            if (err) return reject(err);\n            resolve();\n        });\n    });\n}\n```", "```js\ndbname: notestest \nusername: \npassword: \nparams: \n    dialect: sqlite \n    storage: notestest-sequelize.sqlite3 \n    logging: false \n```", "```js\n\"test-notes-sequelize-sqlite\": \"NOTES_MODEL=sequelize SEQUELIZE_CONNECT=sequelize-sqlite.yaml mocha test-model\" \n```", "```js\n$ npm run test-notes-sequelize-sqlite \n.. \n 8 passing (2s) \n```", "```js\ndb-userauth-test:\n  build: ../authnet\n  container_name: db-userauth-test\n  networks:\n    - authnet-test\n  environment:\n    MYSQL_RANDOM_ROOT_PASSWORD: \"true\"\n    MYSQL_USER: userauth-test\n    MYSQL_PASSWORD: userauth-test\n    MYSQL_DATABASE: userauth-test\n  volumes:\n    - db-userauth-test-data:/var/lib/mysql\n  restart: always\n.. \ndb-notes-test:\n  build: ../frontnet\n  container_name: db-notes-test\n  networks:\n    - frontnet-test\n  environment:\n    MYSQL_RANDOM_ROOT_PASSWORD: \"true\"\n    MYSQL_USER: notes-test\n    MYSQL_PASSWORD: notes12345\n    MYSQL_DATABASE: notes-test\n  volumes:\n    - db-notes-test-data:/var/lib/mysql\n  restart: always\n```", "```js\nuserauth-test:\n  build: ../users\n  container_name: userauth-test\n  depends_on:\n    - db-userauth-test\n  networks:\n    - authnet-test\n    - frontnet-test\n  environment:\n    DEBUG: \"\"\n    NODE_ENV: \"test\"\n    SEQUELIZE_CONNECT: \"sequelize-docker-test-mysql.yaml\"\n    HOST_USERS_TEST: \"localhost\"\n  restart: always\n  volumes:\n    - ./reports-userauth:/reports\n.. \nnotes-test:\n  build: ../notes\n  container_name: notes-test\n  depends_on:\n    - db-notes-test\n  networks:\n    - frontnet-test\n  ports:\n    - \"3000:3000\"\n  restart: always\n  environment:\n    NODE_ENV: \"test\"\n    SEQUELIZE_CONNECT: \"test/sequelize-mysql.yaml\"\n    USER_SERVICE_URL: \"http://userauth-test:3333\"\n  volumes:\n    - ./reports-notes:/reports\n...\nnetworks:\n  frontnet-test:\n    driver: bridge\n  authnet-test:\n    driver: bridge\n\nvolumes: \n  db-userauth-test-data: \n  db-notes-test-data: \n```", "```js\nnotes-test:\n  ...\n  volumes:\n    - ./reports-notes:/reports\n    - ../notes/test:/notesapp/test\n```", "```js\ndbname: userauth-test\nusername: userauth-test\npassword: userauth-test\nparams:\n    host: db-userauth-test\n    port: 3306\n    dialect: mysql\n```", "```js\nuserauth-test:\n  ...\n  volumes:\n    - ./reports-userauth:/reports\n    - ./userauth/sequelize-docker-test-mysql.yaml:/userauth/sequelize-\n  docker-test-mysql.yaml\n```", "```js\ndbname: notes-test \nusername: notes-test\npassword: notes12345\nparams: \n    host: db-notes-test\n    port: 3306 \n    dialect: mysql \n    logging: false \n```", "```js\ndocker-compose stop\n\ndocker-compose build\ndocker-compose up --force-recreate -d\ndocker ps\ndocker network ls\n\nsleep 20\ndocker exec -it --workdir /notesapp/test -e DEBUG= notes-test npm install\n\ndocker exec -it --workdir /notesapp/test -e DEBUG= notes-test npm run test-notes-memory\ndocker exec -it --workdir /notesapp/test -e DEBUG= notes-test npm run test-notes-fs\ndocker exec -it --workdir /notesapp/test -e DEBUG= notes-test npm run test-notes-levelup\ndocker exec -it --workdir /notesapp/test -e DEBUG= notes-test npm run test-notes-sqlite3\ndocker exec -it --workdir /notesapp/test -e DEBUG= notes-test npm run test-notes-sequelize-sqlite\ndocker exec -it --workdir /notesapp/test -e DEBUG= notes-test npm run test-notes-sequelize-mysql\n\ndocker-compose stop \n```", "```js\n$ sh -x run.sh \n```", "```js\ndb-notes-mongo-test:\n  image: mongo:3.6-jessie\n  container_name: db-notes-mongo-test\n  networks:\n    - frontnet-test\n  volumes:\n    - ./db-notes-mongo:/data/db\n```", "```js\n\"test-notes-mongodb\": \"MONGO_URL=mongodb://db-notes-mongo-test/ MONGO_DBNAME=chap11-test NOTES_MODEL=mongodb mocha --no-timeouts test-model\"\n```", "```js\ndocker exec -it --workdir /notesapp/test -e DEBUG= notes-test npm run test-notes-mongodb\n```", "```js\n'use strict';\n\nconst assert = require('chai').assert;\nconst request = require('supertest')(process.env.URL_USERS_TEST);\nconst util = require('util');\nconst url = require('url');\nconst URL = url.URL;\n\nconst authUser = 'them';\nconst authKey = 'D4ED43C0-8BD6-4FE2-B358-7C0E230D11EF';\n\ndescribe(\"Users Test\", function() {\n    ... Test code follows\n});\n```", "```js\nbeforeEach(async function() {\n  await request.post('/create-user')\n       .send({ \n          username: \"me\", password: \"w0rd\", provider: \"local\",\n          familyName: \"Einarrsdottir\", givenName: \"Ashildr\", \n          middleName: \"\",\n          emails: [], photos: []\n        })\n        .set('Content-Type', 'application/json')\n        .set('Acccept', 'application/json')\n        .auth(authUser, authKey);\n});\n\nafterEach(async function() {\n  await request.delete('/destroy/me')\n        .set('Content-Type', 'application/json')\n        .set('Acccept', 'application/json')\n        .auth(authUser, authKey);\n}); \n```", "```js\ndescribe(\"List user\", function() {\n   it(\"list created users\", async function() {\n     const res = await request.get('/list')\n          .set('Content-Type', 'application/json')\n          .set('Acccept', 'application/json')\n          .auth(authUser, authKey);\n    assert.exists(res.body);\n    assert.isArray(res.body);\n    assert.lengthOf(res.body, 1);\n    assert.deepEqual(res.body[0], { \n          username: \"me\", id: \"me\", provider: \"local\",\n          familyName: \"Einarrsdottir\", givenName: \"Ashildr\", \n          middleName: \"\",\n          emails: [], photos: []\n    });\n  });\n});\n```", "```js\ndescribe(\"find user\", function() {\n  it(\"find created users\", async function() {\n    const res = await request.get('/find/me')\n            .set('Content-Type', 'application/json')\n            .set('Acccept', 'application/json')\n            .auth(authUser, authKey);\n    assert.exists(res.body);\n    assert.isObject(res.body);\n    assert.deepEqual(res.body, { \n            username: \"me\", id: \"me\", provider: \"local\",\n            familyName: \"Einarrsdottir\", givenName: \"Ashildr\", \n            middleName: \"\",\n            emails: [], photos: []\n    });\n});\nit(\"fail to find non-existent users\", async function() {\n    var res;\n    try {\n      res = await request.get('/find/nonExistentUser')\n            .set('Content-Type', 'application/json')\n            .set('Acccept', 'application/json')\n            .auth(authUser, authKey);\n    } catch(e) {\n      return; // Test is okay in this case\n    }\n    assert.exists(res.body);\n    assert.isObject(res.body);\n    assert.deepEqual(res.body, {});\n  });\n});    \n```", "```js\ndescribe(\"delete user\", function() {\n  it(\"delete nonexistent users\", async function() {\n    var res;\n    try {\n      res = await request.delete('/destroy/nonExistentUser')\n              .set('Content-Type', 'application/json')\n              .set('Acccept', 'application/json')\n              .auth(authUser, authKey);\n    } catch(e) {\n      return; // Test is okay in this case\n    }\n    assert.exists(res);\n    assert.exists(res.error);\n    assert.notEqual(res.status, 200);\n  });\n}); \n```", "```js\nuserauth-test:\n  ...\n  volumes:\n    - ./reports-userauth:/reports\n    - ./userauth/sequelize-docker-test-mysql.yaml:/userauth/sequelize-docker-test-mysql.yaml\n    - ./userauth/test.js:/userauth/test.js\n```", "```js\ndocker exec -it -e DEBUG= userauth-test npm install supertest mocha chai\ndocker exec -it -e DEBUG= userauth-test ./node_modules/.bin/mocha test.js\n```", "```js\n# mocha --reporters\n\n dot - dot matrix\n doc - html documentation\n spec - hierarchical spec list\n json - single json object\n progress - progress bar\n list - spec-style listing\n tap - test-anything-protocol\n...\n```", "```js\n# mocha --reporter tap test\n1..4\nok 1 Users Test List user list created users\nok 2 Users Test find user find created users\nok 3 Users Test find user fail to find non-existent users\nok 4 Users Test delete user delete nonexistent users\n# tests 4\n# pass 4\n# fail 0\n```", "```js\n$ mkdir test-compose/notesui\n$ cd test-compose/notesui\n$ npm init\n... answer the questions\n$ npm install puppeteer@1.1.x mocha@5.x chai@4.1.x --save\n```", "```js\nDownloading Chromium r497674 - 92.5 Mb [====================] 100% 0.0s \n```", "```js\n\"setupuser\": \"PORT=3333 node users-add\", \n```", "```js\ndocker exec -it userauth-test npm run setupuser \ndocker exec -it notesapp-test npm run test-docker-ui \n```", "```js\n...\n<a id=\"btnGoHome\" class=\"navbar-brand\" href='/'>\n...\n{{#if user}}\n...\n<a class=\"nav-item nav-link btn btn-dark col-auto\" id=\"btnLogout\" href=\"/users/logout\">...</a>\n<a class=\"nav-item nav-link btn btn-dark col-auto\" id=\"btnAddNote\" href='/notes/add'>...</a>\n{{else}}\n...\n<a class=\"nav-item nav-link btn btn-dark col-auto\" id=\"btnloginlocal\" href=\"/users/login\">..</a>\n<a class=\"nav-item nav-link btn btn-dark col-auto\" \n                        id=\"btnLoginTwitter\" href=\"/users/auth/twitter\">...</a>\n...\n{{/if}}\n...\n```", "```js\n<div id=\"notesHomePage\" class=\"container-fluid\">\n  <div class=\"row\">\n    <div id=\"notetitles\" class=\"col-12 btn-group-vertical\" role=\"group\">\n      {{#each notelist}}\n      <a id=\"{{key}}\" class=\"btn btn-lg btn-block btn-outline-dark\" \n          href=\"/notes/view?key={{ key }}\">...</a>\n      {{/each}}\n    </div>\n  </div>\n</div>\n```", "```js\n<div id=\"notesLoginPage\" class=\"container-fluid\">\n...\n<form id=\"notesLoginForm\" method='POST' action='/users/login'> \n...\n<button type=\"submit\" id=\"formLoginBtn\" class=\"btn btn-default\">Submit</button> \n</form>\n...\n</div>\n```", "```js\n<form id=\"formDestroyNote\" method='POST' action='/notes/destroy/confirm'>\n...\n<button id=\"btnConfirmDeleteNote\" type=\"submit\" value='DELETE' \n                class=\"btn btn-outline-dark\">DELETE</button>\n...\n</form>\n```", "```js\n<form id=\"formAddEditNote\" method='POST' action='/notes/save'>\n...\n<button id='btnSave' type=\"submit\" class=\"btn btn-default\">Submit</button>\n...\n</form>\n```", "```js\n<div id=\"noteView\" class=\"container-fluid\">\n...\n<p id=\"showKey\">Key: {{ notekey }}</p>\n...\n<a id=\"btnDestroyNote\" class=\"btn btn-outline-dark\" \n     href=\"/notes/destroy?key={{notekey}}\" role=\"button\"> ...  </a>\n<a id=\"btnEditNote\" class=\"btn btn-outline-dark\" \n     href=\"/notes/edit?key={{notekey}}\" role=\"button\"> ... </a>\n<button id=\"btnComment\" type=\"button\" class=\"btn btn-outline-dark\" \n     data-toggle=\"modal\" data-target=\"#notes-comment-modal\"> ... </button> \n...\n</div>\n```", "```js\nconst puppeteer = require('puppeteer');\nconst assert = require('chai').assert;\nconst util = require('util');\nconst { URL } = require('url');\n\ndescribe('Notes', function() {\n    this.timeout(10000);\n    let browser;\n    let page;\n\n    before(async function() {\n        browser = await puppeteer.launch({ slomo: 500 });\n        page = await browser.newPage();\n        await page.goto(process.env.NOTES_HOME_URL);\n    });\n\n    after(async function() {\n        await page.close();\n        await browser.close();\n    });\n});\n```", "```js\ndescribe('Login', function() {\n    before(async function() { ... });\n    it('should click on login button', async function() {\n        const btnLogin = await page.waitForSelector('#btnloginlocal');\n        await btnLogin.click();\n    });\n    it('should fill in login form', async function() {\n        const loginForm = await page.waitForSelector('#notesLoginPage \n        #notesLoginForm');\n        await page.type('#notesLoginForm #username', \"me\");\n        await page.type('#notesLoginForm #password', \"w0rd\");\n        await page.click('#formLoginBtn');\n    });\n    it('should return to home page', async function() {\n        const home = await page.waitForSelector('#notesHomePage');\n        const btnLogout = await page.waitForSelector('#btnLogout');\n        const btnAddNote = await page.$('#btnAddNote');\n        assert.exists(btnAddNote);\n    });\n    after(async function() { ... });\n});\n```", "```js\n$ cd test-compose\n$ docker-compose up --force-rebuild\n```", "```js\n$ docker exec -it userauth bash\nuserauth# PORT=3333 node ./users-add.js\nuserauth# exit\n$ cd test-compare/notesui\n$ NOTES_HOME_URL=http://localhost:3000 mocha --no-timeouts uitest.js \n\n Notes\n Login\n √ should click on login button\n √ should fill in login form (72ms)\n √ should return to home page (1493ms)\n\n 3 passing (3s)\n```", "```js\ndescribe('Add Note', function() {\n    // before(async function() { ... });\n    it('should see Add Note button', async function() {\n        const btnAddNote = await page.waitForSelector('#btnAddNote');\n        await btnAddNote.click();\n    });\n    it('should fill in Add Note form', async function() {\n        const formAddEditNote = await \n        page.waitForSelector('#formAddEditNote');\n        await page.type('#notekey', 'key42');\n        await page.type('#title', 'Hello, world!');\n        await page.type('#body', 'Lorem ipsum dolor');\n        await page.click('#btnSave');\n    });\n    it('should view note', async function() {\n        await page.waitForSelector('#noteView');\n        const shownKey = await page.$eval('#showKey', el => \n        el.innerText);\n        assert.exists(shownKey);\n\n        assert.isString(shownKey);\n        assert.include(shownKey, 'key42');\n        const shownTitle = await page.$eval('#notetitle', el => \n        el.innerText);\n        assert.exists(shownTitle);\n        assert.isString(shownTitle);\n        assert.include(shownTitle, 'Hello, world!');\n        const shownBody = await page.$eval('#notebody', el => \n        el.innerText);\n        assert.exists(shownBody);\n        assert.isString(shownBody);\n        assert.include(shownBody, 'Lorem ipsum dolor');\n    });\n    it('should go to home page', async function() {\n        await page.waitForSelector('#btnGoHome');\n        await page.goto(process.env.NOTES_HOME_URL);\n        // await page.click('#btnGoHome');\n        await page.waitForSelector('#notesHomePage');\n        const titles = await page.$('#notetitles');\n        assert.exists(titles);\n        const key42 = await page.$('#key42');\n        assert.exists(key42);\n        const btnLogout = await page.$('#btnLogout');\n        assert.exists(btnLogout);\n        const btnAddNote = await page.$('#btnAddNote');\n        assert.exists(btnAddNote);\n    });\n    // after(async function() { ... });\n});\n```", "```js\n$ NOTES_HOME_URL=http://localhost:3000 ./node_modules/.bin/mocha --no-timeouts uitest3.js \n\n Notes\n Login\n √ should click on login button (50ms)\n √ should fill in login form (160ms)\n √ should return to home page (281ms)\n Add Note\n √ should see Add Note button\n √ should fill in Add Note form (1843ms)\n √ should view note\n √ should go to home page (871ms)\n\n 7 passing (5s)\n```", "```js\nthis.timeout(10000);\n```", "```js\n\nfunction frameEvent(evtname, frame) {\n    console.log(`${evtname} ${frame.url()} ${frame.title()}`);\n}\n\nfunction ignoreURL(url) {\n    if (url.match(/\\/assets\\//) === null \n     && url.match(/\\/socket.io\\//) === null\n     && url.match(/fonts.gstatic.com/) === null\n     && url.match(/fonts.googleapis.com/) === null) {\n        return false;\n    } else {\n        return true;\n    }\n}\n...\nbefore(async function() {\n    browser = await puppeteer.launch({ slomo: 500 });\n    page = await browser.newPage();\n    page.on('console', msg => {\n        console.log(`${msg.type()} ${msg.text()} ${msg.args().join(' ')}`);\n    });\n    page.on('error', err => {\n        console.error(`page ERROR ${err.stack}`);\n    });\n    page.on('pageerror', err => {\n        console.error(`page PAGEERROR ${err.stack}`);\n    });\n    page.on('request', req => {\n        if (ignoreURL(req.url())) return;\n        console.log(`page request ${req.method()} ${req.url()}`);\n    });\n    page.on('response', async (res) => {\n        if (ignoreURL(res.url())) return;\n        console.log(`page response ${res.status()} ${res.url()}`);\n    });\n    page.on('frameattached', async (frame) => frameEvent('frameattached', await frame));\n    page.on('framedetached', async (frame) => frameEvent('framedetached', await frame));\n    page.on('framenavigated', async (frame) => frameEvent('framenavigated', await frame));\n    await page.goto(process.env.NOTES_HOME_URL);\n});\n...\n```", "```js\nfunction waitFor(timeToWait) {\n    return new Promise(resolve => {\n      setTimeout(() => { resolve(true); }, timeToWait);\n    });\n};\n```", "```js\nawait waitFor(3000);\n```", "```js\nasync function waitForBtnGoHome() {\n    return page.waitForSelector('#btnGoHome');\n}\n```", "```js\nawait waitForBtnGoHome();\n```", "```js\nexport function enableSocketio() {\n  var ret = true;\n  const env = process.env.NOTES_DISABLE_SOCKETIO;\n  if (!env || env !== 'true') {\n    ret = true;\n  }\n  return ret;\n}\n```", "```js\nimport { enableSocketio, sessionCookieName } from '../app';\n```", "```js\nres.render('*view-name*', { \n  ...\n  enableSocketio: enableSocketio()\n});\n```", "```js\n{{#if enableSocketio}}\n...  JavaScript code for SocketIO support\n{{/if}}\n```", "```js\n{{#if enableSocketio}}\n    <button id=\"btnComment\" type=\"button\" class=\"btn btn-outline-dark\" \n        data-toggle=\"modal\" data-target=\"#notes-comment-modal\">Comment</button>\n{{/if}}\n```", "```js\nawait page.screenshot({\n      type: 'png',\n      path: `./screen/login-01-start.png`\n});\n```"]