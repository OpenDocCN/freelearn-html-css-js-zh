["```js\nUser.init({\n  age: {\n    type: Sequelize.INTEGER,\n    allowNull: true,\n    // if the age value is null then this will be ignored\n    validate: {\n      min: 1\n    }\n  },\n  name: {\n    type: DataTypes.STRING,\n    allowNull: true,\n    validate: {\n      // even if the name's value is null, the\n         customValidator will still be invoked\n      customValidator(value) {\n        if (value === null && (this.age === null || \n            this.age < 18)) {\n          throw new Error(\"A name is required unless the \n                           user is under 18 years old\");\n        }\n      }\n    }\n  },\n  email: {\n    type: DataTypes.STRING,\n    allowNull: false,\n    validate: {\n      // if the email value is null then this will not be \n         invoked\n      customValidator(value) {\n        // ...\n      }\n    }\n  }\n}, { sequelize });\n```", "```js\nUser.init({\n  email: {\n    type: DataTypes.STRING,\n    allowNull: false,\n    validate: {\n      notNull: {\n        msg: 'Please enter your e-mail address'\n      }\n    }\n  }\n}, { sequelize });\n```", "```js\nMyModel.init({\n  email: {\n    type: DataTypes.STRING,\n    // by default allowNull is true\n    allowNull: false,\n    unique: true\n  }\n}, { sequelize });\n```", "```js\nMyModel.init({\n  foo: {\n    type: DataTypes.STRING,\n    validate: {\n      is: /^[a-z]+$/i\n      // can also be written as:\n      // is: ['^[a-z]+$', 'i']\n    }\n  },\n  bar: {\n    type: DataTypes.STRING,\n    validate: {\n      not: /^[a-z]+$/i\n      // can also be written as:\n      // not: ['^[a-z]+$', 'i']\n    } \n  },\n  foobar: {\n    type: DataTypes.STRING,\n    validate: {\n      // ensure 'foobar' is always equaled to 'static\n         value'\n      equals: 'static value'\n    }\n  }\n}, { sequelize });\n```", "```js\nMyModel.init({\n  foo: {\n    type: DataTypes.STRING,\n    validate: {\n      isIn: [['red', 'yellow', 'green']]\n    }\n  },\n  bar: {\n    type: DataTypes.STRING,\n    validate: {\n      contains: 'foo'\n    } \n  }\n}, { sequelize });\n```", "```js\nMyModel.init({\n  foo: {\n    type: DataTypes.STRING,\n    validate: {\n      len: [1, 40]\n    }\n  }\n}, { sequelize });\n```", "```js\nMyModel.init({\n  expiration: {\n    type: DataTypes.DATE,\n    validate: {\n      isAfter: '2060-01-01'\n      // for \"now\"\n      // isAfter: true\n    }\n  }\n}, { sequelize });\n```", "```js\nconst { Model } = require('@sequelize/core');\nmodule.exports = (sequelize, DataTypes) => {\n  class Airplane extends Model {\n    static associate(models) {\n    }\n  };\n  Airplane.init({\n    planeModel: {\n      type: DataTypes.STRING,\n      validate: {\n        notEmpty: {\n          msg: 'Plane types should not be empty'\n        }\n      }\n    },\n    totalSeats: {\n      type: DataTypes.INTEGER,\n      validate: {\n        min: {\n          args: 1,\n          msg: 'A plane must have at least one seat'\n        }\n      }\n    }\n  }, {\n    sequelize,\n    modelName: 'Airplane',\n  });\n  return Airplane;\n};\n```", "```js\nconst { Model } = require('@sequelize/core');\nmodule.exports = (sequelize, DataTypes) => {\n  class BoardingTicket extends Model {\n    static associate(models) {\n    }\n  };\n  BoardingTicket.init({\n    seat: {\n      type: DataTypes.STRING,\n      validate: {\n        notEmpty: {\n          msg: 'Please enter in a valid seating arrangement'\n        }\n      }\n    }\n  }, {\n    sequelize,\n    modelName: 'BoardingTicket',\n  });\n  return BoardingTicket;\n};\n```", "```js\nconst { Model } = require('@sequelize/core');\nmodule.exports = (sequelize, DataTypes) => {\n  class Customer extends Model {\n    static associate(models) {\n    }\n  };\n  Customer.init({\n    name: {\n      type: DataTypes.STRING,\n      validate: {\n        notEmpty: true,\n        msg: 'A name is required for the customer'\n      }\n    },\n    email: {\n      type: DataTypes.STRING,\n      validate: {\n        isEmail: true,\n        msg: 'Invalid email format for the customer'\n      }\n    }\n  }, {\n    sequelize,\n    modelName: 'Customer',\n  });\n  return Customer;\n};\n```", "```js\nMyModel.init({\n  password: {\n    type: DataTypes.STRING,\n    validate: {\n      notLiteralPassword(value) {\n        if (value === 'password') {\n          throw new Error(\"Your password cannot be \n                           'password'\");\n        }\n      }\n    }\n  }\n}, { sequelize });\n```", "```js\nconst { Model } = require('@sequelize/core');\nconst availableAirports = [\n  'MIA',\n  'JFK',\n  'LAX'\n];\n```", "```js\nmodule.exports = (sequelize, DataTypes) => {\n  class FlightSchedule extends Model {\n    static associate(models) {\n    }\n  };\n```", "```js\n  FlightSchedule.init({\n    originAirport: {\n      type: DataTypes.STRING,\n  // examples of custom attribute validators\n      validate: {\n        isIn: {\n          args: [availableAirports],\n          msg: 'Invalid origin airport'\n        }\n      }\n    },\n    destinationAirport: {\n      type: DataTypes.STRING,\n      validate: {\n        isIn: {\n          args: [availableAirports],\n          msg: 'Invalid destination airport'\n        }\n      }\n    },\n    departureTime: {\n      type: DataTypes.DATE,\n      validate: {\n        isDate: {\n          args: true,\n          msg: 'Invalid departure time'\n        }\n      }\n    }\n  }, {\n    sequelize,\n    modelName: 'FlightSchedule',\n    validate: {\n```", "```js\n      validDestination() {\n        const hasAirportValues = this.originAirport !== \n        null && this.destinationAirport !== null;\n        const invalidDestination = this.originAirport === \n        this.destinationAirport;;\n        if (hasAirportValues && invalidDestination) {\n          throw new Error(\"The destination airport cannot \n                           be the same as the origin\");\n        }\n      }\n```", "```js\n    }\n  });\n  return FlightSchedule;\n};\n```", "```js\nMembership.init({\n  points: {\n    type: DataTypes.INTEGER,\n  }\n}, {\n  sequelize,\n  validate: {\n    async accountIsActive() {\n      const payments = await Payments.find({\n        where: { status: 'complete', expired: false }\n      });\n      if (payments.length < 1) {\n        throw new Error(\"Invalid membership\");\n      }\n    }\n  }\n});\n```", "```js\nconst tx = await sequelize.transaction();\ntry {\n  await Payment.create({ status: 'complete', expired: false });\n  await Membership.create({\n    points: 100,\n    // without the following line the `await    \nPayments.find()` call in \n    // ...accountIsActive will not find the previously\ncreated entry\n    transaction: tx\n  });\n  await t.commit();\n} catch (err) {\n  await t.rollback();\n}\n```", "```js\nconst { ValidationError } = require('@sequelize/core');\n// other imports and code...\nasync function createFlightSchedule() {\n  try {\n    await FlightSchedule.create({\n      originAirport: 'JAX',\n      destinationAirport: 'JFK',\n      departureTime: '2030-01-01T00:00:00.000+00:00'\n    });\n  } catch (err) {\n    if (err instanceof ValidationError) {\n      console.log(err.errors);\n    } else {\n      console.log(err);\n    }\n  }\n}\n  return FlightSchedule;\n};\n```", "```js\n[\n  ValidationErrorItem {\n    message: 'Invalid origin airport',\n    type: 'Validation error',\n    path: 'originAirport',\n    value: 'JAX',\n    origin: 'FUNCTION',\n    instance: FlightSchedule {\n      dataValues: [Object],\n      _previousDataValues: [Object],\n      uniqno: 1,\n      _changed: [Set],\n      _options: [Object],\n      isNewRecord: true\n    },\n    validatorKey: 'isIn',\n    validatorName: 'isIn',\n    validatorArgs: [ [Array] ],\n    original: Error: Invalid origin airport {\n      validatorName: 'isIn',\n      validatorArgs: [Array]\n    }\n  }\n] \n          origin airport'}\n]\n```", "```js\nasync function createFlightSchedule() {\n  try {\n    const schedule = FlightSchedule.build({\n      originAirport: 'JAX',\n      destinationAirport: 'JFK',\n      departureTime: '2030-01-01T00:00:00.000+00:00'\n    });\n    await schedule.validate();\n  } catch (err) {\n    console.log(err);\n  }\n}\n```", "```js\n{\n  errors: [\n    ValidationErrorItem {\n      message: 'Invalid origin airport',\n      type: 'Validation error',\n      path: 'originAirport',\n      value: 'JAX',\n      origin: 'FUNCTION',\n      instance: [FlightSchedule],\n      validatorKey: 'isIn',\n      validatorName: 'isIn',\n      validatorArgs: [Array],\n      original: [Error]\n    }\n  ]\n} \n                          the same as the origin']\n}\n```"]