["```js\n// Single line comment\n/*\nMultiline\ncomment\n*/\n```", "```js\nconst name = \"Ulises\";\nconsole.log(name); // Ulises\n```", "```js\nconst data = {\n  nestedData: {\n    moreNestedData: {\n      value: 1\n    }\n  }\n};\nconsole.log(data); // [object, object]\nconsole.log(JSON.stringify(data)); // {\"nestedData\":{\"moreNestedData\":{\"value\":1}}}\n```", "```js\nlet userName = \"Joe Doe\";\nconsole.log(userName); // Joe Doe\nuserName = \"Jane Doe\";\nconsole.log(userName); // Jane Doe\n```", "```js\nconst userName = \"Joe Doe\";\nconsole.log(userName); // Joe Doe\nuserName = \"mary\"; // TypeError: Assignment to constant variable.\n```", "```js\nconst user = {\n  name: \"Joe Doe\"\n}\nconsole.log(user.name); // Joe Doe\nuser.name = \"Jane Doe\";\nconsole.log(user.name); // Jane Doe\nuser = \"Mr. Joe\"; // TypeError: Assignment to constant variable.\n```", "```js\nconsole.log(0.1 + 0.2); // 0.30000000000000004\nconsole.log(0.1 + 0.2 === 0.3); // false\n```", "```js\nlet impreciseOperation = 0.1 + 0.2;\nNumber(impreciseOperation.toPrecision(1)) === 0.3; // true\n```", "```js\nlet a = 5;\nconsole.log(a++); // 5\nconsole.log(a);   // 6\nconsole.log(++a); // 7\nconsole.log(a);   // 7\n```", "```js\nconst jsDateAnnouncement = new Date(818031600000);\nconst currentDate = new Date();\nconst diff = jsDateAnnouncement - currentDate;\nconst formatter = new Intl.RelativeTimeFormat('en', {\n    numeric: 'auto'\n});\nconst diffInDays = Math.round(diff / 86400000);\nconst diffInYears = Math.round(diffInDays / 365);\nconst diffInText = formatter.format(diffInDays, 'day');\nconsole.log(`JavaScript was presented to the world ${formatter.format(diffInDays, 'day')}`);\n// JavaScript was presented to the world 10,094 days ago\nconsole.log(`JavaScript was presented to the world ${formatter.format(diffInYears, 'year')}`);\n// JavaScript was presented to the world 28 years ago.\n```", "```js\nconsole.log([1,2] === [1,2]) // false\nconsole.log({ name: 'John' } === { name: 'John' }); // false\nconsole.log(NaN === NaN); // false\n```", "```js\nconsole.log(1 == '1'); // true\nconsole.log(1 != '1'); // false\n```", "```js\nconst num = 2\nconsole.log((num == 2) && (3 >= 6)); // false\nconsole.log((num > 3) || (17 <= 40)); // true\n```", "```js\nconsole.log(!true); // false\nconsole.log(!false); // true\n```", "```js\n// The truthy values:\nconsole.log(\"String:\", Boolean(\"Ulises\")  );\nconsole.log(\"1235:\", Boolean(1235));\nconsole.log(\"-1235:\", Boolean(-1235));\nconsole.log(\"Object:\", Boolean({text: \"hi\"}));\nconsole.log(\"Array:\", Boolean([\"apple\", -1, false]));\nconsole.log(\"Function:\", Boolean(function(){}));\nconsole.log(\"Arrow function:\", Boolean(() => {}));\n// The falsy values:\nconsole.log(\"Empty string:\", Boolean(\"\")  );\nconsole.log(\"0:\", Boolean(0));\nconsole.log(\"-0:\", Boolean(-0));\nconsole.log(\"null:\", Boolean(null));\nconsole.log(\"undefined:\", Boolean(undefined));\nconsole.log(\"NaN:\", Boolean(NaN));\n```", "```js\nfunction checkValue (value) {\n    if(!value) {\n        throw new Error (\"The value is invalid! Try again.\")\n    }\n}\n```", "```js\nconst name = null ?? \"John Joe\";\nconsole.log(name); // John Joe\n```", "```js\nconst condition = true\nconst condition2 = true\nif(condition) {\n    console.log(\"The condition is true\")\n} else if (condition2) {\n    console.log(\"The condition2 is true\")\n} else {\n    console.log(\"The condition and condition2 are false\")\n}\n```", "```js\nconst condition = true;\nif(condition) {\n    return console.log(\"The condition is true\");\n}\nconsole.log(\"The condition is false\");\n```", "```js\nconst extension = \".md\";\nswitch (extension) {\n  case \".doc\":\n    console.log(\"This extension .doc will be deprecated soon\")\n  case \".pdf\":\n  case \".md\":\n  case \".svg\":\n    console.log(\"Congratulations! You can open this file\");\n    break;\n  default:\n    console.log(`${extension} is not supported`);\n}\n```", "```js\nconst isMember = true;\nconsole.log(`The payment is ${isMember ? \"20.00€\" : \"50.00€\"}`);\n// The payment is 20.00€\n```", "```js\nlet i = 1;\nwhile (i <= 10) {\n    console.log(i);\n    i++;\n};\n```", "```js\nlet i = 0;\ndo {\n    console.log(`i value: ${i}`);\n    i++;\n} while (false);\n// i value: 0\n```", "```js\nfor (let i = 0; i < 10; i++) {\n    console.log(i);\n}\n```", "```js\nfor (let i = 0, x = 1, z = 2, limit = 10; i <= limit; x *= z, i++ ) {\n    console.log(`i: ${i}. x: ${x}. z: ${z}`);\n}\n// i: 0\\. x: 1\\. z: 2\n// ...\n// i: 10\\. x: 1024\\. z: 2\n```", "```js\nlet x = 1;\nconst z = 2, limit = 10;\nfor (let i = 0; i <= limit; i++ ) {\n    console.log(`i: ${i}. x: ${x}. z: ${z}`);\n    x *= z\n}\n```", "```js\nconsole.log('Hello World');\nconsole.log(\"Hello World\");\nconsole.log(`Hello World`);\n```", "```js\nconst name = \"John\";\nconsole.log(`Hello ${name}!`) //Hello John!\n```", "```js\nconst array = [1, 2, 3];\nconsole.log(Array.isArray(array)); // true\nconst object = { name: \"Ulises\" };\nconsole.log(Array.isArray(object)); // false\nconsole.log(typeof array); // object\nconsole.log(typeof object); // object\nconsole.log(\"are object and array the same type?\", typeof(array) === typeof(object)); // true\n```", "```js\nconst array1 = [1, 2, 3];\nconst array2 = [1, 2, 3];\nconsole.log(array1 === array2); // false\n```", "```js\nconst emptyArray = [];\nconst numbers = [1, 2, 3];\nconst strings = [\"Hello\", \"World\"];\nconst mixed = [1, \"Hello\", true];\n```", "```js\nconst array = Array.of( 1, 2, 3 );\n```", "```js\nconsole.log(Array.from('packt'));   // ['p', 'a', 'c', 'k', 't']\n```", "```js\nconsole.log([...[1, 2, 3]]);    // [1, 2, 3]\nconsole.log([...'packt']);      // ['p', 'a', 'c', 'k', 't']\n```", "```js\nconsole.log(Array.from([1, 2, 3], x => x + x)); // [2, 4, 6]\n```", "```js\nconst fruits = ['banana', 'apple', 'orange'];\nconsole.log(fruits[0]); // banana\nconsole.log(fruits[1]); // apple\nconsole.log(fruits[2]); // orange\n```", "```js\nconst fruits = ['banana', 'apple', 'orange'];\nfruits[0] = 'pear';\nconsole.log(fruits); // ['pear', 'apple', 'orange']\n```", "```js\nconst numbers = [1, 2, 3, 4, 5]\nconst mapTransformation = numbers.map(el => el * 10)\nconst forEachTransformation = []\nnumbers.forEach(el => {\n    forEachTransformation.push(el * 10)\n})\nconsole.log(mapTransformation) // 10,20,30,40,50\nconsole.log(forEachTransformation) // 10,20,30,40,50\n```", "```js\nconst numbers = [1, 2, 3, 4, 5]\nconst filteredNums = numbers.filter(el => el <= 3)\nconsole.log(filteredNums) // [1, 2, 3]\n```", "```js\nconst data = [1, [2, 3], [4, 5]];\nconst flatData = data.flat();\nconsole.log(flatData); // [1, 2, 3, 4, 5]\n```", "```js\nconst people = ['Joe', 'Jane', 'John', 'Jack'];\nconsole.log(people.join()); // Joe,Jane,John,Jack\nconsole.log(people.join(' + ')); // Joe + Jane + John + Jack\n```", "```js\nconst people = ['Joe', 'Jane', 'John', 'Jack'];\nconst structuredPeople = people.map(person => `<li>${person}</li>\\n`);\nconsole.log(`\n    <ul>\n        ${structuredPeople.join('')}\n    </ul>\n`)\n// <ul>\n//     <li>Joe</li>\n//      ...\n// </ul>\n```", "```js\nconst numbers = [7, 1,10, 3,15,20]\nconsole.log(numbers.sort())\n// [1, 10, 15, 20, 3, 7]\nconsole.log(numbers.sort((a, b) => a - b))\n// [1, 3, 7, 10, 15, 20]\n```", "```js\nconst list = [1, 2];\nconst a = list[0] || 0; // 1\nconst b = list[1] // 2\nconst c = list[2] || 4; // 4\n```", "```js\nconst list = [1, 2];\nconst [ a = 0, b, c = 4 ] = list;\n```", "```js\nlet arr = [1,2,2,3,1,4,5,4,5]\nlet set = new Set(arr)\nlet uniques = Array.from(set)\nconsole.log(uniques) // [1,2,3,4,5]\n```", "```js\nconst person = {}\n```", "```js\nconst person = {\n    name: 'Jane',\n}\n```", "```js\nconst person = {\n    name: 'Jane',\n    id: 1,\n    favoriteColors: ['blue', 'green'],\n    address: {\n        street: 'Main St',\n        number: 1,\n    },\n    fullName: function() {\n        return `${this.name} Doe`\n    },\n    sayHi: function() {\n        console.log('Hello!')\n    }\n}\nconsole.log(person.fullName()) // Jane Doe\nperson.sayHi() // Hello!\nconsole.log(person.address.street) // Main St\nconsole.log(person.id) // 1\nconsole.log(person.favoriteColors[0]) // blue\n```", "```js\nconst person = {\n    id: 12\n}\nperson.name = 'Jane'\nconsole.log(person.name) // Jane\nperson.id = 1\nconsole.log(person.id) // 1\n```", "```js\nconst person = {\n    id: 12\n}\nconsole.log(person['id']) // 12\nconst specialKey = 'first name with spaces'\nperson[specialKey] = 'Jane'\nconsole.log(person[specialKey]) // Jane\n```", "```js\nconst person = {\n    id: 12,\n    name: 'Jane'\n}\ndelete person.id\nperson.name = undefined\nconsole.log(person.id) // undefined\nconsole.log(person.name) // undefined\n```", "```js\nconst users = {\n    admin: 'Jane',\n    moderator: 'Joe',\n    user: 'Billy',\n}\n```", "```js\nfor (let role in users) {\n    console.log(`${users[role]} is the ${role}`)}\n// Jane is the admin\n// Joe is the moderator\n// Billy is the user\n```", "```js\nconst roles = Object.keys(users)\nconsole.log(roles) // ['admin', 'moderator', 'user']\nroles.forEach(role => {\n    console.log(role) // admin\n    console.log(users[role]) // Jane\n})\n```", "```js\nconst name = \"Jane\"\nconst number = 1\nconst array = [1, 2, 3]\nconst object = { id: 1, name: 'Jane' }\n// Copy\nlet nameCopy = name\nlet numberCopy = number\nconst arrayCopy = array\nconst objectCopy = object\n// Modify the copy\nnameCopy = 'Joe'\nnumberCopy = 2\narrayCopy.push(\"additional item\")\nobjectCopy.name = 'Joe'\n// Check the original\nconsole.log(name) // Jane\nconsole.log(nameCopy) // Joe\nconsole.log(number) // 1\nconsole.log(numberCopy) // 2\nconsole.log(array) // [1, 2, 3, \"additional item\"]\nconsole.log(arrayCopy) // [1, 2, 3, \"additional item\"]\nconsole.log(object) // { id: 1, name: 'Joe' }\nconsole.log(objectCopy) // { id: 1, name: 'Joe' }\n```", "```js\nconst data = {item: {detail: { reference: {id: '123'} }}}\n// make a shortcut reference\nconst ref = data.item.detail.reference\nref.name = 'Jane'\n// check the original\nconsole.log(data.item.detail.reference) // {id: '123', name: 'Jane'}\n```", "```js\nconst array = [1, 2, 3]\nconst object = { id: 1, name: 'Jane' }\n// Copy\nconst arrayCopy = [...array]\nconst objectCopy = Object.assign({}, object)\n// Modify the copy\narrayCopy.push(\"additional item\")\nobjectCopy.name = 'Joe'\n// Check the original\nconsole.log(array) // [1, 2, 3]\nconsole.log(arrayCopy) // [1, 2, 3, \"additional item\"]\nconsole.log(object) // { id: 1, name: 'Jane' }\nconsole.log(objectCopy) // { id: 1, name: 'Joe' }\n```", "```js\nconst data = [{ 'a': 1 }, { 'b': 2 }];\nconst shallowCopy = [...data];\nshallowCopy[0].a = 3;\nconsole.log(data[0].a); // 3\nconsole.log(shallowCopy[0].a); // 3\n```", "```js\nconst dst  = { quux: 0 }\nconst src1 = { foo: 1, bar: 2 }\nconst src2 = { foo: 3, baz: 4 }\nObject.assign(dst, src1, src2)\nconsole.log(dst) // {quux: 0, foo: 3, bar: 2, baz: 4}\n```", "```js\nconst name = \"Jane\";\nconst age = 25;\nconst data = { item: \"Lorem Ipsum\", status: \"OK\" };\n```", "```js\nconst user = {\n  name: name,\n  age: age,\n  data: data,\n};\nconst item = data.item;\nconst status = data.status;\n```", "```js\nconst user = { name, age, data };\nconst { item, status } = data;\n```", "```js\nconst user = {\n  name: \"John\",\n  address: {\n    street: \"Main Street\",\n  },\n};\nconst otherUser = {\n  name: \"Jane\",\n};\nconsole.log(user.address?.street); // Main Street\nconsole.log(otherUser.address?.street); // undefined\n// without optional chaining:\nconsole.log(user.address.street); // Main Street\nconsole.log(otherUser.address.street); // TypeError: Cannot read properties of undefined (reading 'street')\n```", "```js\nfunction myFunction() {\n  console.log(\"This is a function body\")\n  // code to be executed\n}\n```", "```js\nconst myFunction = function() {\n  console.log(\"This is a function body\")\n  // code to be executed\n}\nmyFunction() // This is a function body\n```", "```js\nsetTimeout(function() {\n    console.log('1 second later')\n}, 1000);\n```", "```js\nfunction isEven(number) {\n  return number % 2 === 0\n}\nconst result = isEven(2)\nconst otherResult = isEven(3)\nconsole.log(result) // true\nconsole.log(otherResult) // false\n```", "```js\nfunction sayHi (name) {\n  console.log(`Hi ${name}!`);\n};\nsayHi('John'); // Hi John!\n```", "```js\nfunction sum (...numbers) {\n  console.log(\"First Number:\", numbers[0])\n  console.log(\"Last Number:\", numbers[numbers.length - 1])\n  let total = 0\n  for (let number of numbers) {\n    total += number\n  }\n  console.log(\"Total (SUM):\", total)\n}\nconst result = sum(1, 2, 3, 4, 5)\n// First Number: 1\n// Last Number: 5\n// Total (SUM): 15\n```", "```js\nconst sampleFunction = function () { }\nconst sayHelloNow = function (name) {\n  const now = new Date()\n  console.log(`Hello ${name}, at ${now}!`)\n}\n```", "```js\nconst sampleFunction = () => {}\nconst sayHelloNow = name => {\n  const now = new Date()\n  console.log(`Hello ${name}, at ${now}!`)\n}\n```", "```js\nconst alwaysTrue = () => true\nconst getData = (name, age) => ({ name: \"John\", age: 25 })\n```", "```js\nconst alwaysTrue = function () { return true }\nconst getData = function (name, age) {\n  return { name: \"John\", age: 25 }\n}\n```", "```js\nconst sum = function (a, b) { return a + b }\n// Arrow function translation\nconst sum = (a, b) => a + b\n```", "```js\nconst outerFunction = function () {\n  console.log(\"This is the outer function\")\n  const innerFunction = function () {\n    console.log(\"This is the inner function\")\n  }\n  return innerFunction\n}\n```", "```js\nconst innerFunction = outerFunction() // This is the outer function\ninnerFunction() // This is the inner function\n```", "```js\n// Execution in single line\nouterFunction()()\n```", "```js\nconst createCounter = (initialValue = 0) => {\n  let counter = initialValue\n  return (incrementalValue) => {\n    counter += incrementalValue\n    console.log(counter)\n  }\n}\n```", "```js\nconst addToCounter = createCounter(10)\naddToCounter(12) // 22\naddToCounter(1)  // 23\n```", "```js\nclass Human{\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n}\nconst jane = new Human (\"Jane\", 30);\nconsole.log(jane.name); // Jane\nconsole.log(jane.age); // 30\n```", "```js\nclass Human {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  sayHello() {\n    console.log(`Hello, my name is ${this.name}!`);\n  }\n}\nconst jane = new Human (\"Jane\", 30);\njane.sayHello(); // Hello, my name is Jane!\n```", "```js\nclass Colleague extends Human {\n  constructor(name, age, stack) {\n    super(name, age);\n    this.stack = stack;\n    this.canCode = true;\n  }\n  code() {\n    console.log(`I can code in ${this.stack}!`);\n  }\n}\nconst jane = new Colleague (\"Jane\", 30, ['JavaScript', 'React', 'MongoDB']);\nconsole.log(jane.name); // Jane\nconsole.log(jane.canCode); // true\njane.sayHello(); // Hello, my name is Jane!\njane.code(); // I can code in JavaScript, React and MongoDB!\n```", "```js\nclass Car {\n  constructor(brand) {\n    this.brand = brand;\n  }\n  move() {\n    console.log(`The ${this.brand} is moving!`);\n  }\n  static speedLimits() {\n    console.log(\"The speed limit is 120 km/h for new cars\");\n  }\n}\n```", "```js\nCar.speedLimits(); // The speed limit is 120 km/h for new cars\n```", "```js\nclass Rectangle {\n    constructor (width, height) {\n        this._width  = width\n        this._height = height\n    }\n    set width  (width)  { this._width = width               }\n    get width  ()       { return this._width                }\n    set height (height) { this._height = height             }\n    get height ()       { return this._height               }\n    get area   ()       { return this._width * this._height }\n}\nconst shape = new Rectangle(5, 2)\nconsole.log(shape.area) // 10\nconsole.log(shape.height) // 2\nconsole.log(shape.width) // 5\nshape.height = 10\nshape.width = 10\nconsole.log(shape.area) // 100\nconsole.log(shape.height) // 10\nconsole.log(shape.width) // 10\n```"]