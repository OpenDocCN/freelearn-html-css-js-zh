["```js\n    const doSomething = (cb) => {\n      console.log('Doing something...');\n      cb();\n    };\n    ```", "```js\n    const nextStep = () => {\n      console.log('Callback called');\n    };\n    doSomething(nextStep);\n    ```", "```js\n    Doing something...\n    Callback called\n    ```", "```js\ndoSomething(nextStep())\n// Callback called\n// Doing something...\n// Error: cb is not a function\n```", "```js\ndoSomething(() => {\n    console.log('Callback called');\n});\n```", "```js\nconst calculateNameLength = (name, cb) => {\n  const length = name.length;\n  cb(length);\n};\ncalculateNameLength('John', (length) => {\n  console.log(`The name length is ${length}`); // The name length is 4\n});\n```", "```js\nconsole.log('Before setTimeout');\nconst secondInMilliseconds = 1000;\nsetTimeout(() => {\n  console.log('A second has passed');\n}, secondInMilliseconds);\nconsole.log('after setTimeout');\n```", "```js\nBefore setTimeout\nafter setTimeout\nA second has passed\n```", "```js\nconst secondInMilliseconds = 1000;\nlet totalExecutions = 0\nconsole.log('Before setInterval');\nsetInterval(() => {\n    totalExecutions++;\n    console.log(`A second has passed, this is the ${totalExecutions} execution`);\n}, secondInMilliseconds);\nconsole.log('After setInterval');\n```", "```js\nBefore setInterval\nAfter setInterval\nA second has passed, this is the 1 execution\n...\nA second has passed, this is the 50 execution\n```", "```js\nconst doSomething = (cb) => {\n  const error = new Error('Something went wrong');\n  cb(error, null);\n};\ndoSomething((error, result) => {\n  if (error) {\n    console.log('There was an error');\n    return;\n  }\n  console.log('Everything went well');\n});\n```", "```js\nThere was an error\n```", "```js\nconst doSomething = (cb) => {\n  const result = 'It worked!';\n  cb(null, result);\n};\ndoSomething((error, result) => {\n  if (error) {\n    console.log('There was an error');\n    return;\n  }\n  console.log(result);\n  console.log('Everything went well');\n});\n```", "```js\nIt worked!\nEverything went well\n```", "```js\nreadFile(\"docs.md\", (err, mdContent) => {\n    convertMarkdownToHTML(mdContent, (err, htmlContent) => {\n        addCssStyles(htmlContent, (err, docs) => {\n            saveFile(docs, \"docs.html\",(err, result) => {\n                ftp.sync((err, result) => {\n                    // ...\n                })\n            })\n        })\n    })\n})\n```", "```js\nfetch('https://api.demo.foo/v1/todo')\n  .then(response => response.json())\n  .then(json => console.log(json))\n  .catch(error => console.log(error));\n```", "```js\n[{\n  \"id\": \"fc3f31b9-8d98-42e9-aab3-1586f2273c3a\",\n  \"title\": \"We need to input the digital DNS capacitor!\",\n   \"completed\": true  }\n...\n]\n```", "```js\nconst setTimeoutPromise = (time) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n};\nconsole.log('Before setTimeoutPromise');\nsetTimeoutPromise(1000).then(() => console.log('one second later'))\nconsole.log('After setTimeoutPromise');\n```", "```js\nBefore setTimeoutPromise\nAfter setTimeoutPromise\none second later\n```", "```js\nreadFile(\"docs.md\", (err, mdContent) => {\n    convertMarkdownToHTML(mdContent, (err, htmlContent) => {\n        addCssStyles(htmlContent, (err, docs) => {\n            saveFile(docs, \"docs.html\",(err, result) => {\n                ftp.sync((err, result) => {\n                    // ...\n                })\n            })\n        })\n    })\n})\n```", "```js\nreadFile(\"docs.md\")\n  .then(convertMarkdownToHTML)\n// shortcut for .then(mdContent => convertMarkdownToHTML(mdContent))\n  .then(addCssStyles)\n  .then(docs => saveFile(docs, \"docs.html\"))\n  .then(ftp.sync)\n  .then(result => {\n    // ... other things\n  })\n  .catch(error => console.log(error));\n```", "```js\nconst randomTimeOutPromise = () => {\n  return new Promise((resolve, reject) => {\n    const time = Math.floor(Math.random() * 100);\n    setTimeout(() => {\n      console.log(`Promise resolved after ${time}ms`);\n      resolve(time);\n    }, time);\n  });\n};\n```", "```js\nPromise.all([\n  randomTimeOutPromise(),\n  randomTimeOutPromise(),\n  randomTimeOutPromise(),\n  randomTimeOutPromise(),\n  randomTimeOutPromise(),\n]).then((results) => {\n  console.log(\"results:\", results);\n});\n```", "```js\nPromise resolved after 0ms\nPromise resolved after 26ms\nPromise resolved after 31ms\nPromise resolved after 37ms\nPromise resolved after 62ms\nresults: [37, 31, 26, 62, 0]\n```", "```js\nPromise.race([\n  randomTimeOutPromise(),\n  randomTimeOutPromise(),\n  randomTimeOutPromise(),\n  randomTimeOutPromise(),\n  randomTimeOutPromise(),\n]).then((result) => {\n  console.log(\"result:\", result);\n});\n```", "```js\nPromise resolved after 30ms\nresults: 30\nPromise resolved after 33ms\nPromise resolved after 60ms\nPromise resolved after 79ms\nPromise resolved after 83ms\n```", "```js\nconst generatePromise = shouldFail => {\n  return new Promise((resolve, reject) => {\n    if (shouldFail) {\n      return reject(new Error(\"Rejected!\"));\n    }\n    resolve(\"Success!\");\n  });\n};\ngeneratePromise(true).catch(error => console.log(\"Error message:\", error));\n// Error message: Error: Rejected!\n// ...\n```", "```js\ngeneratePromise(true)\n  .then(result => console.log(\"Result:\", result))\n  .catch(error => console.log(\"Error message:\", error))\n  .finally(() => console.log(\"Promise settled\"));\n```", "```js\ngeneratePromise()\n  .then(generatePromise)\n  .then(result => {\n    return generatePromise(true);\n  })\n  .then(() => console.log(\"This will not be called\"))\n  .catch(error => console.log(\"Error message:\", error));\n```", "```js\nconst asyncFun = async (generateError) => {\n    if (generateError) {\n        throw new Error(\"Error generated\");\n    }\n    return 1;\n};\nasyncFun().then((result) => console.log(result));\nasyncFun(true).catch((error) => console.log(error));\n```", "```js\nconst asyncFun =  (generateError) => new Promise((resolve, reject) => {\n    if (generateError) {\n        reject(new Error(\"Error generated\"));\n    }\n    resolve(1);\n});\nasyncFun().then((result) => console.log(result));\nasyncFun(true).catch((error) => console.log(error));\n```", "```js\n// Promises\nfetch(' https://api.demo.foo/v1/todo')\n  .then(response => response.json())\n  .then(json => console.log(json))\n  .catch(error => console.log(error));\n// Async/Await\nconst fetchData = async () => {\n  try {\n    const response = await fetch('https://api.demo.foo/v1/todo');\n    const json = await response.json();\n    console.log(json);\n  } catch (error) {\n      console.log(error);\n  }\n}\nfetchData(); // [{userId: 1, id: 1, title: 'delectus aut autem',\ncompleted: false}]\n```", "```js\n(function () {\n  // ... some code here\n})();\n```", "```js\n(async () => {\n    const response = await fetch(' https://api.demo.foo/v1/todo ');\n    const json = await response.json();\n    console.log(json);\n})()\n```"]