["```js\n//label[text()='One']\n```", "```js\nspan[@class='radiobtn']\n```", "```js\n//label[text()='One']/span[@class='radiobtn']\n```", "```js\npublic get myElement() {\n  const selector: string = \"/html[1]/body[1]/div[1]/div[1]/div[1]/div[13]/div[1]/div[1]/div[1]/div[2]/div[2]/a[1]\";\n  return $(selector);\n}\n```", "```js\nconst allElementsByXPath: ElementArrayType = await browser.$$('//*');\n```", "```js\n//a[text()=`FIND MY CANDY!`]\n```", "```js\n//a[normalize-space()=`FIND MY CANDY!`]\n```", "```js\n//*[contains(@class,\"popup\")]//following::a\n```", "```js\n.widget-popup a\n```", "```js\n[class*=\"popup\"] a\n```", "```js\ndiv[class*=\"popup\"] a\n```", "```js\n    //a[normalize-space()='Link Text']\n    //a[contains(normalize-space(),'Link')]\n    //a[@href='https://example.com']\n    ```", "```js\n    //button[normalize-space()='Click Me']\n    //button[contains(normalize-space(),'Click')]\n    //button[@id='submit-button']\n    ```", "```js\n    //ul/li[normalize-space()='Item']\n    //ul/li[contains(normalize-space(),'Item')]\n    //ol/li[position()=2]  // Not recommended\n    ```", "```js\n    //input[@type='text']\n    //input[contains(@id,'input')]\n    //textarea[@placeholder='Enter text']\n    ```", "```js\n    //span[normalize-space() ='Some Text']\n    //span[contains(normalize-space(),'Text')]\n    //*[starts-with(normalize-space(),'Hello')]\n    ```", "```js\n<div data-qa=\"product-card\" role=\"article\" aria-label=\"Product Details\">\n      <a href=\"#\" data-qa=\"add-to-cart\">Add to Cart </a> </div>\n```", "```js\n//div[contains(@aria-label, 'Product Details')]\n//a[contains(@data-qa, 'Add to Cart')]\n```", "```js\ndescribe(\"Accessibility Testing\", function () {\n  // Simulate loading a web page or application\n  beforeAll(function () {\n    // Load your web page or application\n  });\n it(\"should have proper ARIA attributes\", function () {\n    // Find an element by its data-qa attribute\n    const buttonWithQA = element(by.css('[data-qa=\"login-button\"]'));\n   // Verify that the ARIA role is set to \"button\"\n    expect(buttonWithQA.getAttribute('role')).toEqual('button');\n   // You can also check other ARIA attributes like \"aria-label\", \"aria-describedby\", etc.\n    // Example: expect(buttonWithQA.getAttribute('aria-label')).toBe('Login Button');\n  });\n it(\"should be keyboard accessible\", function () {\n    // Find an element by its ARIA label\n    const buttonWithARIA = element(by.css('[aria-label=\"Login Button\"]'));\n   // Trigger a click event using Protractor\n    buttonWithARIA.click();\n   // Verify that the element is focused after the click\n    expect(browser.driver.switchTo().activeElement().getAttribute('aria-label')).toEqual('Login Button');\n  });\n});\n```", "```js\nconst allElementsByCss: ElementArrayType = await browser.$$('*');\n```", "```js\n    //span[text()='Vital Signs']\n    ```", "```js\n    a[href='https://example.com']\n    //a[@href='https://example.com']\n    ```", "```js\n    button#submit-button\n    //button[text()='Login']\n    ```", "```js\n    ol li:nth-child(2)\n    ```", "```js\n    input[type='text']\n    input[id*='input']\n    textarea[placeholder='Enter text']\n    ```", "```js\n//a[text()='Next >']\n```", "```js\n//a[contains(text(),'Next']\n```", "```js\n//input[contains(@name,'chkSelect')]\n```", "```js\n//a[normalize-space()='John.Smith']//preceding::input[@id='ohrmList_chkSelectRecord_2']\n```", "```js\n//a[translate(normalize-space(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='john.smith']//preceding::input[@id='ohrmList_chkSelectRecord_2']\n```", "```js\n(//a | //input | //select | //textarea)[\nnot (\ncontains(@style,'opacity: 0;') or contains(@style,'visibility: hidden;') or contains(@style,'display: none;') or contains(@style,'overflow: hidden;') or contains(@style,'width: 0') or\ncontains(@style,'height: 0')) and\nnot(ancestor::*[contains(@style,'opacity: 0;') or\ncontains(@style,'visibility: hidden;') or\ncontains(@style,'display: none;') or\ncontains(@style,'overflow: hidden;') or\ncontains(@style,'width: 0') or\ncontains(@style,'height: 0')])]\n```", "```js\nconst A_Z = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst a_z = 'abcdefghijklmnopqrstuvwxyz';\n```", "```js\nfunction extractSelectorText(selector: string): string {\nconst singleQuoteCount = (selector.match(/'/g) || []).length;\n  let newSelector = selector;\n```", "```js\nif (singleQuoteCount === 1 || singleQuoteCount === 3){\n  const parts = selector.split(\"'\");\n  if (singleQuoteCount === 1) {\n```", "```js\n      newSelector = `concat('${parts[0]}', \"'\", '${parts[1]}')`;\n```", "```js\n    } else if (singleQuoteCount === 3) {\n```", "```js\n `//*[text()=Meet Dwayne \"The Rock\" Johnson at Moe's Bar]`\n```", "```js\n      newSelector = `concat('${parts[0]}${parts[1]}', \"'\", '${parts[2]}')`;\n    }\n  }\n```", "```js\n`concat(Meet Dwayne \"The Rock\" Johnson at Moe\",\"'\"'s Bar\"`\n```", "```js\n  let match = newSelector.match(/\"([^\"]+)\"$/) || newSelector.match(/'([^']+)'$/);\n```", "```js\n  if (!match || match.length < 2) {\n    return \"NO TEXT FOUND IN LOCATOR\";\n  }\n```", "```js\nreturn match[1];\n}\n```", "```js\n//a[text()='SEND']\n```", "```js\n//button[normalize-space()='SEND']\n```", "```js\n//button[translate (normalize-space(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'send']\n```", "```js\nfunction transformLink(selector: string): string {\nlet extractedText = extractSelectorText(selector)\n// Create the new selector string\nconst newSelector = `//button[contains(translate (normalize-space(),'${A_Z}','${a_z}'), '${extractedText.toLowerCase()}')]`;\nreturn newSelector;\n}\n```", "```js\npublic get sendLink () {\n    return $(`//a[text()='Send']`);\n}\nawait helpers.clickAdv(await this.sendLink)\n```", "```js\nfunction transformField(selector: string): string {\nlet extractedText = extractSelectorText(selector)\n// Create the new selector string\nconst newSelector = `//textarea [contains (@placeholder, '${A_Z}','${a_z}'), '${extractedText.toLowerCase()}')]`;\nreturn newSelector;\n}\n```", "```js\nfunction transformList(selector: string): string {\nlet extractedText = extractSelectorText(selector)\n// Create the new selector string\nconst newSelector = `//input[contains (@placeholder, '${A_Z}','${a_z}'), '${extractedText.toLowerCase()}')]`;\nreturn newSelector;\n}\n```", "```js\nfunction getMiddle(s: string): string {\n  const len = s.length;\n  // Return the string as it is if its length is less than or equal to 5\n  if (len <= 5) {\n    return s;\n  }\n  // Divide the string into three parts\n  const oneThird = Math.floor(len / 3);\n  const twoThirds = 2 * oneThird;\n  // Extract the middle part\n  return s.substring(oneThird, twoThirds);\n}\nconsole.log(getMiddle(\"Select all active files\")); // Output: \"all active fi\"\nconsole.log(getMiddle(\"small\")); // Output: \"small\"\n```", "```js\nasync function jsClick(element: WebdriverIO.Element): Promise<void> {\nawait browser.execute(\"arguments[0].click();\", element); }\n// Usage example\n  await jsClick('#some-button-id');\n```", "```js\nasync function scrollOneClickUp(): Promise<void> {\nawait browser.execute(() => { const event = new\nWheelEvent(\"wheel\", { deltaY: -50 });\ndocument.dispatchEvent(event); });\n}\n```", "```js\nasync function scrollOneClickDown(): Promise<void> {\nawait browser.execute(() => { const event = new\nWheelEvent(\"wheel\", { deltaY: 50 });\ndocument.dispatchEvent(event); });\n}\n```", "```js\nconst currentLocation: WebdriverIO.LocationReturn = await element.getLocation();\n```", "```js\nexport async function waitForElementToStopMoving(element: WebdriverIO.Element, timeout: number): Promise<void>\n  const initialLocation = await element.getLocation();\n  return new Promise((resolve, reject) => {\n    let intervalId: NodeJS.Timeout;\n    const checkMovement = () => {\n      element.getLocation().then((currentLocation) => {\n        if (\n            currentLocation.x === initialLocation.x &&\n            currentLocation.y === initialLocation.y\n        ) {\n          clearInterval(intervalId);\n          resolve();\n        }\n      });\n    };\n    intervalId = setInterval(checkMovement, 100);\n    setTimeout(() => {\n      clearInterval(intervalId);\n      reject(new Error(`Timeout: Element did not stop moving within ${timeout}ms`));\n    }, timeout);\n  });\n}\n```"]