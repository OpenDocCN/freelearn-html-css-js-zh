- en: Chapter 6. BotKit – Document Manager Agent for Slack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 4](part0032.xhtml#aid-UGI01 "Chapter 4.  A Slack Quote Bot") , *A
    Slack Quote Bot*, we saw how Slack is a great collaboration platform. While collaborating,
    teams can get the inspirational quotes from *They Said So* services right in their
    Slack channels. In this chapter, we will see a use case for Slack that's a little
    more complex than just getting quotes. Here, we will be building a Slack bot called
    DocMan bot with the help of **Howdy BotKit**. DocMan bot should be able to search
    document(s) and also provide a link to download them, based on team members' requests.
  prefs: []
  type: TYPE_NORMAL
- en: Our Slack bot, DocMan, will be built using MongoDB for data storage and Amazon
    S3 for research document or file storage. Details about MongoDB and Amazon S3
    storage will be detailed in the following sections of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Awesome!! Let's Slack now.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Slack for your team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will start setting up Slack for a team.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the browser window and enter the URL-- [https://slack.com](https://slack.com)
    . This will launch the Slack home page as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Slack for your team](img/image00278.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For users who are accessing Slack for the first time, you will first have to
    create your Slack account and then you can create your team. Users who are already
    on Slack can click on the **Sign in** link. Let's look at how to create our own
    account.
  prefs: []
  type: TYPE_NORMAL
- en: Provide your e-mail address at **Email address**. Click on the **Create New
    Team** link to launch the next step, as shown in the following screenshot. Slack
    will send a confirmation code to your e-mail id. Enter the received code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Slack for your team](img/image00279.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter your confirmation code. The code will be verified by Slack and then the
    following screen will be launched:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Slack for your team](img/image00280.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Provide your name and username in the fields **Your name** and **Username,**
    and click on the **Continue to Password** button to launch the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Slack for your team](img/image00281.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Provide your password at **Password** and click on the **Continue to Team Info**
    button to launch the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Slack for your team](img/image00282.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose the options that match your team''s purposes and intentions in the **What
    will your team use Slack for?** and **How big is your shared interest group?**
    dropdowns. Click on the **Continue to Group Name** button to launch the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Slack for your team](img/image00283.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'I wanted to name my team Bot Researchers, so I entered the name as **Bot Researchers**
    in the **Group Name** entry field and clicked on the **Continue to Team Domain**
    button to launch the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Slack for your team](img/image00284.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Slack verifies the domain name availability for your team. If it is available,
    then it shows a message saying so, as shown in the preceding screenshot. Now click
    on the **Create Team** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next screen is **Send Invitations**, which I will be skipping for now,
    going straight to the welcome screen for the Bot Researchers Slack team. The screen
    will appear as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Slack for your team](img/image00285.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, you might have noticed the name **slackbot**. Slack
    uses a bot named slackbot to greet us and help us in case of any questions. This
    is a wonderful use of bots to educate users in the chatting window itself.
  prefs: []
  type: TYPE_NORMAL
- en: We have now signed up with Slack and created our own team. Now we will develop
    our bot for this team.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Slack bot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a botresearcher group member, I would like my bot to provide information
    about all bot-related documents. This bot is called **DocMan**. Now, to create
    a new bot in Slack, just visit the website found at [https://botresearchers.slack.com/services/new/bot](https://botresearchers.slack.com/services/new/bot)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you are already logged in to your Slack group. Here I have logged
    in to my group, [https://botresearchers.slack.com](https://botresearchers.slack.com)
    . Since you are already logged in, this will navigate to the **Bots** | **New
    Configuration** screen, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Slack bot](img/image00286.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s enter the **Username** as `@docman` and then click on the **Add bot
    integration** button. Slack will ask for additional configuration information
    for this bot, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Slack bot](img/image00287.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Look at the **API Token** section, under **Integration Settings**. Our bot will
    use this token to communicate with APIs.
  prefs: []
  type: TYPE_NORMAL
- en: The bot user token can connect to real-time streaming APIs and can perform activities,
    such as posting messages, so the distribution of this token should be avoided
    in public code repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the following screenshot. You can enter the parameters of this bot''s
    behavior within Slack channels in the **What this bot does** entry field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Slack bot](img/image00288.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, I have entered **Provides Information and Documents about Bot Research**.
  prefs: []
  type: TYPE_NORMAL
- en: Now click the **Save Integration** button to save the configuration information
    of our bot. The information will be saved and the user will be notified at the
    top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s go back to our group by using the URL [https://botresearchers.slack.com/messages](https://botresearchers.slack.com/messages)
    . You will see **docman** under the **DIRECT MESSAGES** section. Click on the
    name **docman** to see a chat message screen, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Slack bot](img/image00289.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, our bot is showing its username as **@docman** and the description as **Provides
    Information and Documents about Bot Research**. We provided this information during
    its configuration. At the moment, this bot will not respond to any of our messages
    as it is not programmed yet. Also, the status of the bot is set to **away**.
  prefs: []
  type: TYPE_NORMAL
- en: To summarize so far, we have created our own Slack group and created our own
    Slack bot. We also looked at how to configure this bot. In the next section, we
    will see how we can wire up some intelligence to our bare bones bot.
  prefs: []
  type: TYPE_NORMAL
- en: Botkit and Slack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Botkit** is a free to use, open source toolkit from **Howdy** ([https://howdy.ai/botkit](https://howdy.ai/botkit))
    for integrating bots with messaging platforms such as Slack. Botkit comes with
    lots of features that help developers build both types of bot integrations, for
    individual teams as well as for other teams using *Slack Button*.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first Slack bot using Botkit and Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start wiring up our bot in Node.js by first installing Botkit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating a folder in our local drive in order to store our
    Bot from the Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming we have Node.js and NPM installed, let''s create and initialize our
    `package.json`, which will store our Bot''s dependencies and definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you go through the `npm init` options (which are very easy to follow),
    you''ll see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first Slack bot using Botkit and Node.js](img/image00290.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll see the result in your project folder; this is your `package.json`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first Slack bot using Botkit and Node.js](img/image00291.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's install the `botkit` package from NPM. This can be located at [https://www.npmjs.com/package/botkit](https://www.npmjs.com/package/botkit)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to install it, run this `npm` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You should then see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first Slack bot using Botkit and Node.js](img/image00292.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Having done this, the next thing to do is to update your `package.json` in
    order to include the `"engines"` attribute. Open the `package.json` file with
    a text editor and update it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Your `package.json` should then look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first Slack bot using Botkit and Node.js](img/image00293.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's create our `app.js` file, which will be the entry point for our bot, as
    mentioned while setting up our node package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `app.js` should like the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Remember, our bot DocMan is still not active, and its status is away, which
    we have seen in our Slack group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s run our Node.js program to see how it looks in Slack, and start
    our basic conversations with our bot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first Slack bot using Botkit and Node.js](img/image00294.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, if you look at the console, you will see, with the help of the token, that
    our bot has started communicating with Real-Time Messaging APIs through a websocket.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at our Slack group now. Our Slack group will now show our bot **@docman**
    under **DIRECT MESSAGES** with an active status, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first Slack bot using Botkit and Node.js](img/image00295.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now our bot is ready for conversation. Let''s say `Hello` to our bot and see
    what it says:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first Slack bot using Botkit and Node.js](img/image00296.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Our bot has responded to our message with **Hello there!** So the wiring up
    of our bot within Node.js and Botkit with Real-Time Messaging APIs has worked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now I want my bot to be part of the #general channel, which is the default
    for our group. Enter the name `@docman` in the messaging box and hit enter. Immediately
    **slackbot** will guide us to invite `@docman` in the #general channel, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first Slack bot using Botkit and Node.js](img/image00297.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **invite them to join** link to join our bot in this channel.
    On the popup, just click on the **Yes, invite** them button. Refer to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first Slack bot using Botkit and Node.js](img/image00298.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After inviting them, the Slack channel **#general** will show a notification
    that our bot has joined the group, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first Slack bot using Botkit and Node.js](img/image00299.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This way you can invite our bot to any of the channels, and you can also start
    conversations with our bot in that channel just by mentioning the name of our
    bot. I mentioned the name of our bot with a message reading **@docman Hello**
    in the **#general** channel. Our bot''s reply can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first Slack bot using Botkit and Node.js](img/image00300.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Enhancing our DocMan bot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having built a very basic Slack bot, let's enhance our **DocMan** bot. Say that,
    following a team member's request, DocMan bot should be able to search a particular
    document and also be able to provide a link to download.
  prefs: []
  type: TYPE_NORMAL
- en: Let me explain how this will work. The Bot Researchers Slack team members will
    be communicating within their respective Slack channels. Now let's assume that
    one of them needs information about a research planning checklist document. The
    team member will enter some keywords like `Research Planning` or `Checklist` or
    `Template` by mentioning our bot's name. DocMan will do a keyword search within
    the MongoDB database and will present the searched documents. MongoDB will only
    have links to these documents and other metadata or attributes for the documents
    that will be searched. Actual documents will be stored in Amazon S3 storage.
  prefs: []
  type: TYPE_NORMAL
- en: Before going into the details, let me explain a little about MongoDB and Amazon
    S3 storage.
  prefs: []
  type: TYPE_NORMAL
- en: What is MongoDB?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Day by day, the use of NoSQLs is skyrocketing. MongoDB is one such NoSQL. There
    are various NoSQL database types, such as `Document Store`, `Key-Value Store`,
    `Column Store`, and `Graph Store`, to name but a few,.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB is of the Document Store type of NoSQLs, where data is stored in JSON
    documents. In short, MongoDB is an open source, highly scalable, high-performance
    NoSQL database.
  prefs: []
  type: TYPE_NORMAL
- en: The reason I am using MongoDB is because I wanted to show you how we can use
    a NoSQL database like MongoDB to search and store the document links using their
    metadata or attribute values. However, don't get confused between the documents
    or files that we are searching and the material that MongoDB is storing. What
    MongoDB is storing is just like a single record which is in JSON format. Just
    like our relational databases where data is stored in tables and records, MongoDB
    stores data in collections and JSON documents. Actual documents or files will
    be stored on Amazon S3, and only the link will be stored in MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: For our DocMan bot's enhancements, make sure you have installed MongoDB on your
    machine based on your machine's version (32 bit or 64 bit). Detailed installation
    steps can be obtained from [https://docs.mongodb.com/manual/administration/install-community/](https://docs.mongodb.com/manual/administration/install-community/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB database for our DocMan bot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Assuming you have MongoDB up and running on your machine, let's set up a database
    with sample data for our bot using the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB shell
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Locate the `bin` directory of your MongoDB installation using the Command Prompt
    and run the MongoDB shell using `mongo.exe`. If everything goes well, you will
    see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MongoDB shell](img/image00301.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Create a database
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s create a new database called `BotDB` using the command shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create a database](img/image00302.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, to verify whether or not the database has been created, use the `show
    dbs` command. You will see the name `BotDB` in the list, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create a database](img/image00303.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Create a reference documents collection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To store documents, metadata, and attributes, let''s create a collection called
    `ReferenceDocuments` using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify a newly created collection with the help of the `show collections`
    command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create a reference documents collection](img/image00304.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Create data for our DocMan bot
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Our `BotResearcher` group needs some documents and templates for their day
    to day use. These documents can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create data for our DocMan bot](img/image00305.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As a sample, I will use the `Research Planning Checklist` to show how we will
    store the metadata for this document in a MongoDB collection. Refer to the following
    JSON code for the metadata of this document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We will be storing the `title`, `description`, `version`, `url`, and keywords
    in our `ReferenceDocuments` collection using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After inserting the preceding record, you will see the following message as
    `WriteResult({"nInserted":1})`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create data for our DocMan bot](img/image00306.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This way, we can create all the records in MongoDB for all our documents.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing for search
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Since a document can be searched using multiple keywords, we are storing keywords
    in an array for a document. When team members search documents, they will use
    keywords. We will apply an index to these keywords using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After running a command, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Indexing for search](img/image00307.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Search query
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Once our index has been created, let''s verify whether or not our search is
    working based on the keywords we enter. Let''s fire the following command on the
    MongoDB shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After executing the `search` query, you should see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Search query](img/image00308.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To summarize, we created a new database for our bot to store the metadata of
    the documents that it searches. We added a new collection and added some sample
    documents. We also applied a text index to the keywords column so as to enable
    a search using keywords.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's look at how we can wire up our database with Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: What is MongoJS?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: MongoJS is a Node.JS library used to connect to MongoDB APIs. Using this library,
    we will establish a connection with our MongoDB database and query documents based
    on input keywords.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up DocMan bot with MongoDB
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's go back to our `Slackbot` directory and install the `mongojs` package
    from NPM. This can be located at [https://www.npmjs.com/package/mongojs](https://www.npmjs.com/package/mongojs)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to install it, run this `npm` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You should then see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wiring up DocMan bot with MongoDB](img/image00309.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's modify our `app.js` file so that we can access MongoDB APIs through the
    `Mongojs` library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `app.js` should be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at this basic code with `mongojs` wired up as shown in the preceding
    code snippet. We connect to the MongoDB database through `mongojs` using the following
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here, MongoDB is hosted locally on my machine, so the host used is named as
    `127.0.0.1` and it listens to port `27017`. This IP address and port can be different
    for your machine, so while implementing your bots, make sure you use your machine's
    IP address and port for MongoDB. Within MongoDB, we connect to the `BotDB` database
    and a collection called `ReferenceDocuments`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To query one of the documents from `ReferenceDocuments`, the following code
    is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run the modified code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wiring up DocMan bot with MongoDB](img/image00310.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Go back to our Bot Researchers Slack group and say `hello` to our modified docman
    using direct messaging. You can also send mentions to docman as well, but this
    time I will use direct messaging.
  prefs: []
  type: TYPE_NORMAL
- en: 'When I messaged the `hello` directly to **docman**, docman queried the `BotDB`
    database and returned the title of one of the documents from the `ReferenceDocuments`
    collection. Refer to the following screenshot for further details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wiring up DocMan bot with MongoDB](img/image00311.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This shows how we can establish a MongoDB connectivity and query the data using
    `mongojs`.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon S3 storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Amazon Simple Storage Service** (**Amazon S3**) is a cloud-based data storage
    system from **Amazon Web Services** (**AWS**). We can use Amazon S3 to store any
    amount of data. Amazon S3 stores data as objects within buckets. An object can
    be a document or a file. In our DocMan context, all the actual documents or files
    that are searched by Bot Researchers team members are stored in Amazon S3\. In
    future, these files or documents can be of any types, such as media or office
    files of any size. Also, every bucket can have access control to decide who can
    access, delete, and create objects from the buckets. Given these requirements,
    Amazon S3 is suitable for our DocMan documents storage.'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon S3 console
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'I have my Amazon AWS account. Using that account, I have logged in to my Amazon
    S3 console. This console can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Amazon S3 console](img/image00312.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Those who are new to AWS can refer to the information at [https://aws.amazon.com/](https://aws.amazon.com/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Create buckets
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'From the preceding Amazon S3 console, click on the **Create Bucket** button
    to launch a **Create a Bucket** screen, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create buckets](img/image00313.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In creating my bucket, I have given the **Bucket Name** as **botdocuments**
    and selected the **Region** as **Oregon**. Make sure you are entering the **Bucket
    Name** in lowercase letters. Click on the **Create** button to create your bucket.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your bucket will be shown under the **All Buckets** table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create buckets](img/image00314.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now click on the bucket name shown under the **Name** column so that we can
    display a bucket view to upload and manage documents inside this bucket.
  prefs: []
  type: TYPE_NORMAL
- en: Store documents in the bucket
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Once you select the bucket name from the **All Buckets** view, you will see
    the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Store documents in the bucket](img/image00315.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, to upload documents in this bucket, click on the **Upload** button and
    upload documents with the help of the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Store documents in the bucket](img/image00316.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'I will use the drag and drop function to upload my files. Once you have dragged
    and dropped all the files that you want to upload, click on **Start Upload** to
    upload your files. Once all the files are uploaded, the bucket will show all the
    files as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Store documents in the bucket](img/image00317.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Mark documents as public
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just for demonstration purposes, we will be marking these documents as public.
  prefs: []
  type: TYPE_NORMAL
- en: This way, our `BotResearchers` group can access and download these documents
    from Amazon S3 storage easily. Let's go through the following steps to mark one
    of these documents as public. .
  prefs: []
  type: TYPE_NORMAL
- en: 'Select a document and, from **Actions**, select the **Make Public** option
    in the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mark documents as public](img/image00318.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This option will mark the selected document as public. Now we need a public
    URL so that we can update this URL in our MongoDB database for this document.
    To get the public URL again, select a document and, from the **Actions** menu,
    select the **Properties** menu item.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will bring up all the properties for the selected document, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mark documents as public](img/image00319.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the properties, refer to the **Link** property. This is our public URL
    for the document.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, mark all the documents as public and copy their URLs. Update these
    URLs to our MongoDB database.
  prefs: []
  type: TYPE_NORMAL
- en: Update MongoDB data with Amazon S3 document links
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s open up our Mongo shell again and select `BotDB` again using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Once successfully updated, you will see the number of records updated on the
    mongo shell. Follow the same steps to update all the rest of your documents' URL
    columns for their Amazon S3 public URLs. With this, we are all set with our bot
    docman, from a backend data perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring it all up together
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To wire all the things up together, let''s modify our earlier `app.js` as shown
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Code understanding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'I have already explained how we can connect to MongoDB using `mongojs.` Now
    let''s focus on how we have implemented the conversational experience within docman:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, the user can start the conversations with docman
    using the keywords `'docs'`,`'template'`,`'research documentation'`, and `'documents'`.
  prefs: []
  type: TYPE_NORMAL
- en: Upon receiving a direct message or mention, the bot will start a conversation
    using `bot.startConversation()`. This function will call a related conversation
    sub-function `askForKeywords` `()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The bot will ask us to provide keywords based on which documents need to be
    searched, and will also call the sub-function to actually search the document
    within MongoDB. The implementation for `askForKeywords` `()` can be seen as shown
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the `convo.next()`function tells our called bot to continue
    the conversation. This step is required, or, our conversation will hang.
  prefs: []
  type: TYPE_NORMAL
- en: There is a final sub-function `searchDocuments()` that actually does the searching
    of documents within MongoDB and returns the top three documents as a part of the
    conversation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the following code implementation for `searchDocuments()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, once the search query returns data, there can be single
    or multiple documents, so we are iterating the results and then combining them
    into a JSON format. Once JSON formatting is done, the bot calls the `convo.say()`
    function to send the message along with the searched documents.
  prefs: []
  type: TYPE_NORMAL
- en: Slack has some guidelines concerning the composing of messages and attachments.
    These guidelines can be referred to at [https://api.slack.com/docs/messages](https://api.slack.com/docs/messages)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Now let's begin our great conversation experience with our enhanced Slack bot,
    docman.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, start a communication in the **# general** channel by mentioning `@docman`,
    and type the word `docs` as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code understanding](img/image00320.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once we entered `docs`, docman asked to type the word or keywords for the document
    search.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the word as `template` and see what **docman** returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code understanding](img/image00321.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When I entered the `template` keyword, **docman** replied saying:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code understanding](img/image00322.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It also replied with the searched documents in a nice elegant format using
    the Slack messaging guidelines shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code understanding](img/image00323.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, select one of the documents from the search results-I selected a document
    titled **Timeline Document**, and `Timeline+Document.docx` was downloaded through
    our docman bot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the following screenshot to see the downloaded document:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code understanding](img/image00324.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, with Slack, we built a bot and enhanced our team's collaborative experience
    by building intelligence into it.
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, we saw how to create a Slack group from scratch. We also created
    a basic bot wired up in Node.js using Botkit, and had a basic conversation as
    a direct message as well as within a group by inviting the bot.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we made our bot search some of the documents based on keywords, and
    also provided a link to download the same document.
  prefs: []
  type: TYPE_NORMAL
- en: Our DocMan bot used MongoDB to store document attributes along with keywords
    with which the document can be searched. Also, DocMan retrieved actual documents
    from Amazon S3 storage upon a user's request to download them.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully this chapter has given you an end-to-end solution overview of how
    your bot searches and locates documents, as well as how it downloads them from
    storage locations or document repositories. You should now be aware of NoSQL technologies
    like MongoDB and how we can utilize them for keyword searches, and how we can
    wire up with storage locations like Amazon S3 in Node.js. Above all, you should
    now be fully aware of how we can bring everything together in messaging platforms
    like Slack.
  prefs: []
  type: TYPE_NORMAL
- en: Amazing!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore how to develop IRC bots and how we can
    wire up within Node.js and help our developers use it for bug tracking purposes.
  prefs: []
  type: TYPE_NORMAL
