- en: Using Motors to Move Your Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve explored using input to discover the world around our bots, and output
    to let our bots communicate, but there is another crucial skill any bot should
    have: the ability to move! In the next few chapters, we''ll discuss various ways
    we get let our bots to move, and discuss how to control that movement. We''ll
    start in this chapter with the simplest movement component: the motor.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: More about motors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing for a motor-driven project with the Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Johnny-Five motor object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting your motorized projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project – building a randomized motorized cat toy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project – using a gearbox motor and the motors object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need the Adafruit Pi motor hat kit ([https://www.adafruit.com/product/2348](https://www.adafruit.com/product/2348)),
    a small 5V motor, which you can also get from Adafruit ([https://www.adafruit.com/product/711](https://www.adafruit.com/product/711)),
    or many other suppliers, a 4-AA battery case with wire ends and an on/off switch,
    available from Adafruit ([https://www.adafruit.com/product/830](https://www.adafruit.com/product/830))
    and many other suppliers, 2 *gearbox* or *TT* motors, available from Adafruit
    ([https://www.adafruit.com/product/3777](https://www.adafruit.com/product/3777))
    and many other suppliers, and a sticky note (or a piece of paper, scissors, and
    tape).
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: If you cannot solder or are uncomfortable soldering, an alternative
    fully assembled hat can be found on Amazon ([https://www.amazon.com/SB-Motorshield-Raspberry-expansion-ultrasonic/dp/B01MQ2MZDV/ref=sr_1_fkmr1_1?s=electronics&ie=UTF8&qid=1534705033&sr=8-1-fkmr1&keywords=raspberry+pi+motor+controller+TB6612](https://www.amazon.com/SB-Motorshield-Raspberry-expansion-ultrasonic/dp/B01MQ2MZDV/ref=sr_1_fkmr1_1?s=electronics&ie=UTF8&qid=1534705033&sr=8-1-fkmr1&keywords=raspberry+pi+motor+controller+TB6612)).
    I will note changes in the code where necessary—anytime this chapter references
    the L293D hat, that is in reference to this hat.'
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter is available at [https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter06](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter06).
  prefs: []
  type: TYPE_NORMAL
- en: More about motors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A motor is a component that can rotate a shaft in continuous circles at varying
    speeds. However, there are many different kinds of motors; let''s take a look
    at a few:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DC motor**: This kind of motor is the simplest: it can go in one direction,
    and the speed varies by the power you give it. These usually only have two wires:
    one for ground and one for power; we will combine the latter with the motor hat
    to control the speed. With the correct controller, we can move the motor in both
    directions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Motors with brakes**: These motors have a third wire to control a brake that
    can stop the motor without the need to coast to a stop, as with DC motors. These
    motors are supported by the Johnny-Five library, but will not be covered in this
    book.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stepper motors**: Stepper motors are used for precise movements, as they
    move in steps that vary based on the size of the motor. They are bi-directional
    by design and are great where you need the torque of a motor with precision. We''ll
    talk more about these in the second project in this chapter. Just know that an
    easy way to spot a stepper motor is 5 wires as opposed to 2 or 3:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d271020c-8429-4ba7-af95-2ef4583634d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Regular motor on the left, stepper motor on the right
  prefs: []
  type: TYPE_NORMAL
- en: How to control a motor with a microcontroller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can directly connect DC hobby motors to the PWM pin of a microcontroller
    to power them, but this is usually inadvisable: motors take up a lot of power
    and many microcontrollers limit the amount of current out of each pin.'
  prefs: []
  type: TYPE_NORMAL
- en: A more advisable solution, which we will be using in this chapter, is to use
    an external motor controller; these usually contain the circuitry necessary to
    do more complex movement with your motors (such as allowing them to go backwards),
    and allow for an external power supply that provides the necessary power to your
    motors without drawing it from the microcontroller.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for a motor-driven project with Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to get started with motors using Johnny-Five and the Raspberry Pi,
    we''ll need to add a hat (think Arduino shields, but for the Pi, or add-on boards
    that stack on the Pi if you''re new to electronics) that allows us to:'
  prefs: []
  type: TYPE_NORMAL
- en: Provide external power to the motors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control the motors better than the Pi can on its own (especially in the case
    of the stepper motor)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting the hat together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Wire the battery pack and the motor to the hat''s screw terminals like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d9c3bad-3799-4ee9-9bbb-a5e56d3f410a.png)'
  prefs: []
  type: TYPE_IMG
- en: The yellow wire in the diagram should be your ground wire (usually black) and
    the green should be your power wire (usually red).
  prefs: []
  type: TYPE_NORMAL
- en: Putting the hat on the Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remove all power from the Pi, and make sure the battery pack is switched off.
    Also, remove the cobbler from the GPIO pins if it is still attached. Then, line
    up the sockets on the bottom of the hat with the pins on the top of the Pi, in
    the direction that makes it so the hat is situated over the Pi. Then, gently press
    down on the hat until it settles. **Don''t press hard— you may bend some of the
    Pi''s pins**. When all is said and done, it should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4434fd90-4e00-4061-88e1-0e2029248660.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And the motor should be plugged into the screw terminals, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e538a40-bd6c-474b-86fc-47af5a316c01.png)'
  prefs: []
  type: TYPE_IMG
- en: Re-apply power to the Pi, and we'll get started coding using the Johnny-Five
    motor object.
  prefs: []
  type: TYPE_NORMAL
- en: The Johnny-Five motor object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The motor object in Johnny-Five allows us to easily control our motors without
    having to worry about communicating with the hat via the Pi. Let's code a test
    setup with the REPL before coding our project, to make sure everything is working.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `project` folder and, inside it, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And, create a file in the folder named `motor-test.js`. Start by requiring
    in Johnny-Five and Raspi-IO, instantiating your board object, and creating a `board.on(''ready'')`
    handler, as we usually do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, we're ready to set up our motor object, keeping in mind that we'll need
    to configure for our hat.
  prefs: []
  type: TYPE_NORMAL
- en: Constructors for our hat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are using the Adafruit hat, your constructor is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And if you''re using the L293D hat, your constructor is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Place whichever one applies inside the `board.on('ready')` function.
  prefs: []
  type: TYPE_NORMAL
- en: Functions that move the motor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Referencing the Johnny-Five documentation, there are a few functions that will
    allow us to move the motor from the command line using the REPL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now that we know how to control the motor, let's add the REPL functionality
    to test it
  prefs: []
  type: TYPE_NORMAL
- en: Adding REPL control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the end of the `board.on(''ready'')` function, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: And now we have full control!
  prefs: []
  type: TYPE_NORMAL
- en: Loading and running your motor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Load the project onto the Pi, and navigate to the folder in the Pi ssh session.
    Then, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once that''s completed, turn on the battery pack and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you see *Board Initialized*, you should try out some of the commands from
    before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Hopefully, your motor is happily spinning away!
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting your motorized projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'But what if your motor doesn''t turn? Here are a few things to check if your
    motor isn''t spinning around:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Is the battery pack for the motor hat turned on? Don''t laugh, I''ve spent
    many a minute wondering why it wasn''t working only to discover it lacked power.
    There''s a power light on most motor hats that let you know it has power:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7e266636-c583-4a97-9b65-6ad94a531823.png)'
  prefs: []
  type: TYPE_IMG
- en: The power LED on the Adafruit hat is just above the screw terminals for the
    external power, and lights up red
  prefs: []
  type: TYPE_NORMAL
- en: Are your batteries fresh? Motors take up a lot of power, and extended use can
    wear them down pretty fast.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As I mentioned in the first chapter: check your wiring. Then, check it again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure all of the wires are securely fastened in the correct screw terminals
    so that a light yank cannot dislodge them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are you using rechargeable batteries? If so, I admire your commitment to reuse,
    but you're going to want 6 rechargeable running your motor due to differences
    in voltages between rechargeable and non-rechargeable batteries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hopefully, if your motor wasn't spinning before, it is now, and we can build
    our first project.
  prefs: []
  type: TYPE_NORMAL
- en: Project – cat toy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we'll add a piece of paper to our motor, and then code some
    randomness to make it spin back and forth at varying speeds (cats get bored with
    a predictable toy, after all).
  prefs: []
  type: TYPE_NORMAL
- en: The wiring for this project is the same as the motor test; no need to change
    anything there.
  prefs: []
  type: TYPE_NORMAL
- en: Putting a piece of paper on the motor shaft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Either roll the sticky end of a long sticky note around the motor shaft, or
    tape a long strip of paper to it. It should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/876ec6d9-4a0e-4737-baea-3d53eaafcfa9.png)'
  prefs: []
  type: TYPE_IMG
- en: After the relatively simple construction of our toy, let's code some randomness!
  prefs: []
  type: TYPE_NORMAL
- en: Coding the randomness to start/stop the motor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want the motor to start at a random speed for anywhere from 1-10 seconds,
    then stop for 1-10 seconds, and repeat. We also want whether it goes forward or
    backward to be random. I limited the speed to 75—anything faster was too much
    for my cats!
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `cat-toy.js` file, get rid of the `board.repl.inject` statement and
    add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will randomize the starting and stopping, the speed, and the direction.
    My cats were at least mildly entertained by it. If you have cats, give it a try!
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the project onto the Pi, and navigate to the folder in the Pi SSH session.
    Then, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: And watch it go!
  prefs: []
  type: TYPE_NORMAL
- en: We've got one motor going, but if you want to build a bot with wheels, we're
    gonna need two motors; let's take a look at that concept with our next project.
  prefs: []
  type: TYPE_NORMAL
- en: Project – using two gearbox motors and the motors object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've explored the motor object, let's dig a little deeper and build
    a project using two TT motors while exploring the motors object.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to take this a step further, you can get yourself a chassis like
    this one from Adafruit [https://www.adafruit.com/product/3796](https://www.adafruit.com/product/3796)
    and a pair of wheels like these from Adafruit [https://www.adafruit.com/product/3757](https://www.adafruit.com/product/3757)
    and build yourself a moving 2-wheel robot! Just remember you'll have to either
    power the Pi with a battery pack (those little USB packs for charging your phone
    work great) or stay within range of your Pi's power cord. If you go with the latter,
    I'd secure the power jack into the Pi and be very careful not to let the bot pull
    too hard on anything. Honestly, I'd really just recommend using a battery if you're
    going to let your Pi move about on its own.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up your TT motors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this diagram, pretend the normal DC motors are our TT motors—yellow will
    be the ground (usually black) wire, and the green will be the power (normally
    red) wire.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59a9dcca-4ac8-4a45-a754-0c0e61107275.png)'
  prefs: []
  type: TYPE_IMG
- en: Now it's time to get started coding our motors to perform common wheeled-vehicle
    movements using Johnny-Five and the motors object.
  prefs: []
  type: TYPE_NORMAL
- en: The motors Johnny-Five object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new file in your project folder called `driver-bot.js`. Start with
    the usual setup of the Johnny-Five and Raspi-IO libraries, your board object,
    and your `board.on(''ready'')` handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, inside the `board.on(''ready'')` handler, we''ll add the constructors
    for our two TT motors:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using the Adafruit hat, your constructors are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And if you''re using the L293D hat, your constructors are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that our motors are constructed, we''ll create our Motors object by passing
    it an array containing `leftMotor` and `rightMotor`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we start writing our driving functions, let''s talk a little about the
    benefits of the Motors object. The main benefit to having your motors in a Motors
    object is to maintain control over each individual motor while also being able
    to control them all at once. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The motors object allows you to call any Motor object function and it will perform
    it on all of the motors at once.
  prefs: []
  type: TYPE_NORMAL
- en: Let's use this knowledge to write some common driving functions that we can
    use with our motors.
  prefs: []
  type: TYPE_NORMAL
- en: Writing some functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First things first, we''ll want to let our robot go forward. Inside the `board.on(''ready'')`
    handler of `driver-bot.js`, add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here we see again the benefit of the `motors` object; we don't have to tell
    the right and left motor to move forward separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add another function to let our motors coast to a stop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'And another to let our robot go backward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that those are done, how about we add some turns? Luckily, the `motors`
    object still lets us control each motor individually—so turns are no problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s add the ability to spin left or right in place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, our motors have everything they need to drive around! Let''s give ourselves
    REPL access to these methods, the `motors` object, and the `motor` objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: And now we're ready to load up our code and take our motors for a spin (both
    metaphorically and literally)!
  prefs: []
  type: TYPE_NORMAL
- en: Running our motors project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Load the project onto the Pi, and navigate to the folder in the Pi SSH session.
    Then, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you see *Board Initialized*, feel free to try out our new functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: And that's it—you've written all the code you need to drive a two-wheeled robot!
  prefs: []
  type: TYPE_NORMAL
- en: As a bonus project, think of a way you could drive the bot without having to
    type out the function names each time!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we learned about the first component that adds movement to
    our bots: the motor. We learned about the types of motors, and how to interface
    one with a microcontroller. Then, we wrote code to test our motor with the Pi
    hat and the REPL, and we built a small randomized cat toy using our knowledge
    of the Johnny-Five Motor object. Finally, we built a project that allowed us to
    explore hands-on the abilities of the Motors object and write code to drive a
    two-wheeled robot.'
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a motor?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the difference between a motor and a stepper motor?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should you use external power for motors?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we need a hat to control our motor?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the benefits of the Motors object when using multiple motors?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
