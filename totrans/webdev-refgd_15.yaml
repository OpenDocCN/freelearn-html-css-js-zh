- en: Chapter 15. AngularJS – Google's In-Demand Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular is an application framework that helps you create web applications.
    It builds off of HTML and JavaScript to make the creation of dynamic applications
    easier. Angular extends and is a superset of JavaScript at the same time. You
    can use plain old JavaScript and Angular to build your application.
  prefs: []
  type: TYPE_NORMAL
- en: This creates a double-edged sword. On the positive side, it is much easier to
    build dynamic user interfaces and keep your code maintainable and testable. On
    the other side, you must learn the overall concept of how an Angular application
    is built, which Angular piece goes where. This is very different to any other
    JavaScript application you may have built.
  prefs: []
  type: TYPE_NORMAL
- en: If all you have ever built is user interfaces with **jQuery**, **BackBone**,
    or plain old JavaScript, then much of Angular will seem new and different.
  prefs: []
  type: TYPE_NORMAL
- en: We will try to cover Angular in a hierarchical way. We will start at the top
    with containers that hold other parts and objects and end functions that can be
    used across many objects. We will also touch upon testing, as it is a core part
    of how Angular is built.
  prefs: []
  type: TYPE_NORMAL
- en: Let's not waste any more time and jump right to it.
  prefs: []
  type: TYPE_NORMAL
- en: All of the examples assume that you have loaded Angular so that the `angular`
    object is available.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are unsure on how to load Angular, visit the official Angular page at
    [https://angularjs.org/](https://angularjs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Modules (ngApp)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the high-level container for all the other parts of your application.
    There are more functions than those listed here, but they will be described in
    the section they relate to. For example, you can use `module.controller` to create
    a controller, but this function will be under the controller section.
  prefs: []
  type: TYPE_NORMAL
- en: module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modules are the first basic building block of an Angular application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`moduleName`: This is a string that will identify the module. It should be
    unique.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dependencies(optional)`: This is an array of module names that this module
    is dependent on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`configFunction(optional)`: This is a function that will configure the module.
    See *config* section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is an Angular module object.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This function will either create a new module or retrieve a module. This depends
    on whether we pass in an array of dependencies. If dependencies are omitted, then
    a module is retrieved. Conversely, if we include an array of modules to load (the
    array can also be empty), then a module will be created.
  prefs: []
  type: TYPE_NORMAL
- en: When you have a group of objects that work together, it is a good idea to put
    them into a module. Do not worry about creating too many modules. A module should
    have one and only one clear function. Then, all the objects that it needs to accomplish
    that function would be packaged with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few examples of creating modules:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This creates a new module: `var firstModule = angular.module(''firstModule'',
    []);`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This retrieves a module named `firstModule`: `var firstModule = angular.module(''firstModule'');`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This creates a module that relies on `firstModule`: `var secondModule = angular.module(''secondModule'',
    [''firstModule'']);`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: config
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This allows you to configure providers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `configFunction` function is the function that will be executed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is an Angular module object.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the function that should be used to configure providers. We will cover
    providers later in this chapter, but there are a few examples in this section.
    This allows for providers to be created before the module actually executes.
  prefs: []
  type: TYPE_NORMAL
- en: The providers will be injected into this function when called. For example,
    you can use `$provide` or `$routeProvider` and they will be available. If you
    want to use a custom provider, it would have to be created before `config`. The
    custom object will need `provider` appended to the name for it to be available
    in `config`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a couple of examples using providers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This example uses `$provide`. The provider will be available later as `firstProvider`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This example creates a provider first. It is injected as `firstProvider` in
    `config` and used later:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: run
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This function is executed after config:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `runFunction` function is the function that will be executed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is an Angular module object.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `run()` function gets executed after `config`. At this point, all modules
    will be loaded. It is the first function called after the module is initialized
    after `config`. What you do in this function will depend on the module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that sets a scope variable. The variable will be available
    in the module in later functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Routing (ngRoute)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ngRoute` module is a module that will allow you to configure routing in
    your application. Routing is listening for changes to the location and then automatically
    responding to those changes with a new controller and template. It uses `ngView`,
    `$routeProvider`, and `$route`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your module will need to depend on `ngRoute` to use these directives and services.
    We will also need to include the Angular route JavaScript in our HTML.
  prefs: []
  type: TYPE_NORMAL
- en: ngView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This works with the `$route` service as a spot for content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`onload(Angular expression)`: This evaluates on load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoscroll(Angular expression)`: Whether or not `$anchorScroll` is used with
    this `ngView`. By default, it is disabled. Otherwise, it will evaluate whether
    the expression is true or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a directive.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When routing, you will need to mark a part of your application where dynamic
    content can be loaded. This is what `ngView` does. When a route is matched, it
    will load the new content where `ngView` is. An example will be provided for all
    of `ngRoute` at the end of the section.
  prefs: []
  type: TYPE_NORMAL
- en: $routeProvider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a provider that lets you configure routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`path(string)`: This is what the location will be matched against. It can contain
    named groups by using a colon (`:group`), can include a star to match multiple
    parts (`:group*`), and can be optional (`:group?`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`route(object)`: This object tells Angular what to do when the route matches.
    The object can have these properties (not an inclusive list):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`controller`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`template`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`templateUrl`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resolve`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This returns `$routeProvider`, so it is chainable.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the provider that can be used to configure all of the routes. It can
    be injected into `module.config`.
  prefs: []
  type: TYPE_NORMAL
- en: $route
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the actual service that provides which route definition has been matched.
    This is an object that can be injected directly into a controller.
  prefs: []
  type: TYPE_NORMAL
- en: Properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`current(object)`: This object has the current variables based on the route
    that was matched. This will include `$route`, `loadedTemplateUrl`, `locals`, `params`,
    and `scope`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`routes(object)`: This has all the routes configured.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These events can be listened for the `$route` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$routeChangeStart`: This event is fired before the actual route change'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$routeChangeSuccess`: This event is fired after a route has been resolved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$routeChangeError`: This event is fired if any of the route promises are rejected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a service that can be injected into each controller. The controller
    can then look at the properties to get information about the route that was matched.
    The routing matching will happen without your intervention and then you can update
    your controller's scope when the route is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: $routeParams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a service that will return the parameters of the loaded route. This
    will only give you parameters after a route has resolved, so you may need to use
    `$route.current.params`. This can be injected into a controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example using all of the directives and services in `ngRoute`. First,
    we have an HTML body tag. This will also include an inline template named `main.html`.
    This template will echo out the `$route` and `$routeParams` objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the script that will execute this. First is the creation of the module,
    then the configuration of `$routeProvider` and, finally, the definition of a controller
    for the provider to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Dependency injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular makes use of dependency injection everywhere. Dependency injection is
    when a function does not initialize the dependencies it needs. Instead, they are
    injected into the function as parameters. For example, when a module needs a route
    provider, it asks for one. The module does not care how or when the route provider
    was created; it just wants a reference.
  prefs: []
  type: TYPE_NORMAL
- en: You actually use the injector in everything you do in Angular. Angular just
    does it for you. We will look at `$injector` and understand how it works but,
    most likely, you will not need to use these functions.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency injection in Angular
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will quickly cover the common ways that objects are injected into functions
    in Angular. Using a controller as an example, we will cover the two most common
    methods. Both of these are using Angular''s injection behind the scenes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Defining the variables in a function**: You just have to pass the name of
    the object you need injected. Here is an example that uses `$scope` and a service:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Using an array to list the dependencies**: You can get the exact same result
    using an array. The elements of the array will be the objects you need as strings.
    Finally, you will just need to have a function as the last element in the array.
    The function can even rename the variable if needed. Here is the same example
    in the array format:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Only the array format is minification safe. The first function will not work
    once the source has been minified.
  prefs: []
  type: TYPE_NORMAL
- en: injector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use this to get an Angular injector that you can invoke:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `modules(array)` array is a list of the modules you want to load. You must
    include `ng`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This returns an injector object. See `$injector` section.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can create this object to use Angular's injector object. List out the references
    you want and then invoke your function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that gets a reference to the `$http` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: $injector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will very rarely ever need to create an injector in Angular. It will be
    provided for you. You can get a reference to the injector by injecting it or retrieving
    it from a current module. Here are examples for both:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get a reference from any element inside of the module:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can have it injected into a function. Here is an example using `config`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`annotation`: This returns an array of the objects that will be injected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get(name)`: This returns the service with its name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`invoke(function)`: This will execute the function injecting the dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`has(name)`: This allows you to determine whether a service exists'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Angular will do this automatically for you, but it is always good to have an
    idea of what is happening. This is especially true with something that works just
    like `$injector`. Each time a function executes with dependencies, Angular will
    invoke the function from the injector, sending the correct parameters if they
    have been created and registered.
  prefs: []
  type: TYPE_NORMAL
- en: Controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Controllers are one of the core units of any Angular application. Controllers
    are used to create a small part of a module that requires its own scope. Each
    module can have many controllers. Controllers should be small and focused on one
    task.
  prefs: []
  type: TYPE_NORMAL
- en: Each controller should really only worry about the data and any events that
    modify that data. This means a controller should not modify the DOM, change output
    or input, or share state with another controller. Each of these should use the
    Angular solution, directives or filters, and services, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Controllers are created from a module reference, so they are tied to modules.
    Here is an example of creating a simple controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This module can then be attached to a DOM element with `ngController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: ngController
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a core part of how Angular maps to the model-view-controller pattern.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ng-controller(expression)` attribute is a string that will tell Angular
    which controller is tied to this element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A controller needs a part of the document to attach. This directive will bind
    the controller, with its scope, to this element.
  prefs: []
  type: TYPE_NORMAL
- en: If a controller has been defined in a route, then you should not add this directive
    to the page. The router will take care of binding to the correct element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of using `ngcontroller` to create an alias for the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: $scope
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the most important part of a controller. This is the where you should
    place everything you are tracking for this controller. This includes any functions
    that modify the scope.
  prefs: []
  type: TYPE_NORMAL
- en: The `$scope` controller is injected into the controller by declaring a dependency
    to it (see dependency injection). There are built-in functions and properties
    (see Scopes), but because it is just a JavaScript object, you can add your own
    functions and properties. These will map directly to the template in the controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a controller that defines one property, `hey`, and a
    function, `changeHey`. It is important to note that there are no references to
    DOM references at all in this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the template with all the data binding in the HTML document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Angular will know what `hey` is in this element because it is scoped to just
    `SimpleController`.
  prefs: []
  type: TYPE_NORMAL
- en: Data binding and templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A controller uses HTML as its templating language. You can bind a value from
    the controller's scope just by surrounding it in double brackets `({{ }})`. That
    is really all there is to it!
  prefs: []
  type: TYPE_NORMAL
- en: For some elements such as `input`, `select`, and `textarea`, you cannot just
    add the value of a `scope` object to bind them. You will have to use the `ngModel`
    directive.
  prefs: []
  type: TYPE_NORMAL
- en: The `$scope` section has a great example of binding scope values to the template.
  prefs: []
  type: TYPE_NORMAL
- en: Event binding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular uses directives to bind events. In the `$scope` section, the example
    uses `ngClick` to listen for the click event on a button.
  prefs: []
  type: TYPE_NORMAL
- en: See the *Directives*, *Event Binding* section for a list of the most used event
    directives.
  prefs: []
  type: TYPE_NORMAL
- en: Scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `$scope` object that gets injected into controllers has some functionality.
    In addition to this, we will look at the hierarchies and digest cycle of scopes.
  prefs: []
  type: TYPE_NORMAL
- en: Digest cycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is an important concept to understand with scopes. The digest cycle, from
    a high level, is a cycle that checks to see whether any scope variables have been
    changed. If they have, it then executes a function. Take binding a scope variable
    to the template with `{{variable}}`. The digest cycle will now watch this variable
    and, anytime it changes, it will update the template. If the variable is bound
    anywhere else, it will be updated as well. This is how Angular "magically" makes
    values auto update.
  prefs: []
  type: TYPE_NORMAL
- en: A few things to keep in mind is that not everything in the scope is watched.
    The easiest way to have it watched is to bind it. You can also manually watch
    values. Also, remember that performance issues can arise when you are watching
    many variables. The digest cycle goes through all the watchers.
  prefs: []
  type: TYPE_NORMAL
- en: $digest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is how you can start the digest cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This will manually kick off the digest cycle for the scope. In most cases, this
    does not need to be called. For example, `$digest` does not need to be called
    after updating a value from a click event when handled through Angular. Angular
    will start the digest cycle for you. A good rule of thumb is that if you are changing
    or updating a value from an Angular event or directive in a controller, you would
    not need to call `$digest`.
  prefs: []
  type: TYPE_NORMAL
- en: One case where you may need to call it is when dealing with an asynchronous
    call in a custom directive.
  prefs: []
  type: TYPE_NORMAL
- en: $watch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This allows you to watch a value or computed value in the digest cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`watch(string or function)`: This is what you want to watch. A string will
    be evaluated as an expression. The function will have access to the scope through
    the first parameter. Using a function allows you to watch not only for values,
    but also calculated values of variables in the scope.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`listener(function)`: This function will have the `function(newVal, oldVal,
    scope)` signature. This is the function that will execute when the value changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a function to deregister the watch.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is how to manually add a watch to the digest cycle. There are two main
    reasons to do this. The first is that you will need to run a custom function when
    a value changes. The other is that you will need to watch a combination or calculation
    of a value in `$scope`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that has a watch for a string and a function. The basis
    of the example is from *Controllers*, *$scope* sections. The first watch listens
    for the `hey` variable in the scope. The other one watches to see whether the
    value of `hey` has three or more characters. It will only fire when this threshold
    has been crossed and not fire again until it is crossed in the opposite direction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: $apply
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a way to manually start the digest cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `func(function or string)` attribute is a string, it would be evaluated
    as an expression. If it is a function, the function would be executed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the return value of the function or expression.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This will manually kick off the digest cycle. Much like `$digest`, this should
    not be called for the most part, except for specific situations. The most common
    situation is when a scope value has been changed outside of Angular, for example,
    an asynchronous AJAX call that has a reference to a scope value. The update happens
    outside of the digest loop and Angular does not know as it did not use any Angular
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: This leads to a best practice to always use Angular's services and functions.
    If you do so, you should never have to run `$apply`.
  prefs: []
  type: TYPE_NORMAL
- en: Another best practice is to run your function inside `$apply`. Angular will
    catch any errors that are thrown and you can deal with them the Angular way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that updates the scope inside `setTimeout` after 2 seconds.
    As the digest loop has finished, it will not see this change unless `$apply` is
    called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Hierarchies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular applications only have one root scope but many child scopes. When a
    variable is referenced, it will check the current scope it is in and then check
    the parent. This will happen all the way up to the root scope. This is very similar
    to how JavaScript objects work with the prototype property. You can find more
    about this in [Chapter 8](ch08.html "Chapter 8. JavaScript Implementations, Syntax
    Basics, and Variable Types"), *JavaScript Object-orientated Programming*.
  prefs: []
  type: TYPE_NORMAL
- en: Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The role services play in an Angular application is clear, but there can be
    confusion around the creation of services. This is because there are three very
    similar ways to create a service in Angular. We will look at each of these and
    why they should be used.
  prefs: []
  type: TYPE_NORMAL
- en: A service in Angular is an object that can be an authority on data (meaning
    it is the only source of some data). A great example is the route provider as
    it is the only object that provides route information. It is a singleton that
    all modules utilize, a way to keep data in sync between controllers, or all of
    these! A great example of a service that you will most likely need is `$http`.
    It makes AJAX requests for you. You can build a service that returns data from
    your API and you do not have to worry about creating AJAX calls in each and every
    controller.
  prefs: []
  type: TYPE_NORMAL
- en: Another example is the `$route` and `$routeParams` services. When you have a
    reference to the `$route` service, you can always find out what route has been
    matched. The `$routeParams` service will let you know the parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Services should be used anytime you have the need to write the same code more
    than once. You can pull it out and put it into a service. In addition to this,
    services should be created for any data that will be used by more than one controller.
    The controller can then ask the service for the data. This will keep this data
    the same across multiple controllers.
  prefs: []
  type: TYPE_NORMAL
- en: All of the functions listed can be called from the module or off the `$provide`
    injectable object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Factory, service, and provider will all rely on an HTML template of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Factory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the method to create factories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`name(string)`: This is the name that the service will be known by. This can
    be used for dependency injection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getFunction(function or array)`: This is the function that will return the
    service. This can also be an array that lists the dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is an Angular module object.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The service factory is great when you need a singleton. No configuration other
    than what is done in the `factory()` function is done. The object will be the
    same each time it is injected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example that will return the name of the service. The example
    also creates a dependency on `$http`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Services can be initialized with `new` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`name(string)`: This is the name of the service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`constructor(function or array)`: This will be the function that is called
    as the constructor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is an Angular module object.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The key distinction between a service and a factory is that it can be initialized
    with `new`. Here is an example that depends on `$http`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the controller that will initialize the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Provider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The function that provides the most control of the setup of a provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`name(string)`: This is the name of the provider'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`provider(function or array)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is an Angular module object.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is the final and most complex way to build a service. It must return an
    object with a `$get` method. You should use this when you must have this object
    ready for configuration. This is the only provider that can be injected during
    the configuration phase of application startup. The word "provider" will be appended
    to the name of this. For example, if you named your provider `my`, it will be
    injected using `myProvider`. Here is an example provider that has its name injected
    during configuration. First up is the provider definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Next is the configuration. Notice how it is injected using `firstProvider`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, here is the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This sets a value in the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`name(string)`: This is the name of the value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value(object)`: This can be anything'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is an Angular module object.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A value is something that is set and then can be injected later. Values can
    only be injected into a controller or service, not during configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example of value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Constant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This creates a constant variable in a module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`name(string)`: This is the name of the value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value(object)`: This can be anything'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is an Angular module object.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is very similar to value, except that this can be used in the `config`
    function and that the value cannot be decorated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example of constant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: $http
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the service used to make HTTP calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`config(object)`: This object has the following properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`method(string)`: This is the HTTP method.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url(string)`: This is the URL.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params(string or object)`: This is the params for the request. An object will
    be mapped key to value for this.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data(string or object)`: This is the data to be sent in the request.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`headers(object)`: This sets the headers for the request.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xsrfHeadername(string)`: This is the name of the header for XSRF.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xsrfCookieName(string)`: This is the name of the cookie for XSRF.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache(Boolean)`: This is used to decide whether to cache data or not.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`responseType(string)`: This is used to decide what the request type will be.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A promise will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are familiar with jQuery's AJAX function, then you are familiar with
    this. This is Angular's way of making any `XMLHttpRequests`. For most things,
    you will use one of the convenience methods that make using `$http` easier.
  prefs: []
  type: TYPE_NORMAL
- en: Convenience methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use all of the HTTP methods as functions: `GET`, `POST`, `HEAD`, `PUT`,
    `DELETE`, and `PATCH`. We will just look at `GET`, `POST`, and `JSONP` closely.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`GET`, `POST`, and `JSONP` will cover most, if not all, of many people''s needs
    for `$http`. If this does not, view the `$http` documentation at [https://docs.angularjs.org/api/ng/service/$http](https://docs.angularjs.org/api/ng/service/$http).'
  prefs: []
  type: TYPE_NORMAL
- en: Each function will take the URL as the first parameter and a `config` object,
    which is the same `config` object that `$http()` gets.
  prefs: []
  type: TYPE_NORMAL
- en: GET
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is a `GET` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This executes a simple `GET` request. Here is an example of a factory that
    uses `$http.get`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the factory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'This returns a promise that the controller can then use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: POST
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is a `POST` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This will make a `POST` request. Here is a factory that makes a `POST` and
    an example that uses localhost. Remember that you must be running a server that
    responds to `POST` requests for this to work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: jsonp
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you have to make a cross origin request, you should use `JSONP`. This will
    allow you to use the data instead of the request being blocked based on security.
  prefs: []
  type: TYPE_NORMAL
- en: Notable services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I will list out some useful services that can be injected, with a short blurb
    about each:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$anchorScroll`: This parameter allows you to scroll to the element in the
    hash'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$animate`: This parameter allows DOM manipulations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$cacheFactory`: This allows caching'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$http`: See `$http`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$interval`: This uses Angular''s way to call `setInterval`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$location`: This gets the information about `window.location`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$rootScope`: This returns the root scope for the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$route`: See `Routing`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$q`: This allows promises to be added in our project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$timeout`: This uses Angular''s way to call `setTimout`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is not a comprehensive list as Angular has many services and can create
    and include more. These are the ones that you will most likely use in your applications.
  prefs: []
  type: TYPE_NORMAL
- en: Promises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In JavaScript, many actions are asynchronous. A great example of this is an
    AJAX request. When the request is sent, you do not know when or even if a request
    will be returned. This is where promises come in.
  prefs: []
  type: TYPE_NORMAL
- en: A promise is an object that will promise to run a function once an asynchronous
    event has happened. In our example, the event will be the request returning. This
    could be in a few milliseconds or longer, depending on the timeout setting.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to tracking successful events, promises can be rejected. This allows
    the object that was waiting for the response to do something different.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Visit [https://promisesaplus.com/](https://promisesaplus.com/) for the complete
    specification for using promises in JavaScript. Promises or promise-like objects
    are applicable in almost any JavaScript that you may write.
  prefs: []
  type: TYPE_NORMAL
- en: $q
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the service that implements promises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This returns a deferred object.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the core of building and using promises. The first thing is to get a
    deferred object, which will have to resolve and reject functions. When the action
    is successful, call the `resolve` function; when it fails, call `reject`. Finally,
    return the promise with `defer.promise`.
  prefs: []
  type: TYPE_NORMAL
- en: With the promise, you can call `then`, which takes two functions. The first
    will be called when `resolve` is called, and the second will be called when `reject`
    is called. The promise can be passed around and have `then` called multiple times.
  prefs: []
  type: TYPE_NORMAL
- en: Anytime you are doing anything asynchronous, you should use promises. With Angular,
    you should use `$q` as it is tied in with rootscope.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example where a function will succeed when the number is even and
    fail when the number is odd. Then, it is executed twice, logging to the console,
    whether it succeeded or failed. Note that the function is created in the controller,
    but a utility function like this should be put a service into production:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Expressions are a feature of Angular. They are a subset of JavaScript commands
    in addition to some Angular function. Expressions are used in many places in Angular.
    For example, anytime you bind data, you can use an expression. This makes understanding
    expressions important.
  prefs: []
  type: TYPE_NORMAL
- en: An expression will be evaluated to a value, to a true statement, to a function
    in scope, or to a variable in scope. This makes them powerful, but they do have
    some limitations.
  prefs: []
  type: TYPE_NORMAL
- en: Expressions in JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use some JavaScript, but not all JavaScript in an expression. Here
    are some of the things that you can and cannot do in JavaScript using expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: You can use a string, number, Boolean, array literal, or object literal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use any operators, for example, `a + b`, `a && b`, or `a || b`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can access properties on an object or look up values in an array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can make function calls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You cannot use flow control statements in an expression, for example, an `if`
    statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Context
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When an expression is evaluated in Angular, it will use the scope that it is
    in. This means that you can use any object or function that is accessible in the
    scope. One difference is that you will not get access to the global `window`.
    For example, you will not be able to use `window.alert` in an expression.
  prefs: []
  type: TYPE_NORMAL
- en: Directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Directives are what Angular uses to connect to the **Document Object** **Model**
    (**DOM**). This allows Angular to separate the concerns of what each part of the
    application should do. This means that a controller should never touch the DOM.
    A controller should only work through directives to change the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Normalization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When using directives, Angular must parse the DOM and figure out what directives
    apply to it. This is done by normalizing all the elements and tags. Normalization
    will remove any ";" "," " -", or" _". It will also remove `x-` and `data-` from
    the beginning of any attributes. For example, when looking for `ngModel`, all
    of the following will match:'
  prefs: []
  type: TYPE_NORMAL
- en: '`x-ng:model`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-ng_model`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-model`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng:model`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are concerned with HTML 5 validation, then you should use the `data-`
    normalization.
  prefs: []
  type: TYPE_NORMAL
- en: Scope
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scopes inside directives can become very confusing. We will look at a few examples
    of the different ways to use scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'First up is just inheriting the scope. This means that the directive will use
    whatever value the variable has in the controller''s scope. In this example, `test`
    will have to be set in the controller''s scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '@ binding'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next scope modification will be to isolate the scope. You can set the scope
    property of the returned Directive Definition Object (see the next section). What
    you use here will change how the scope is built. An `@` symbol will read in the
    value as a one-way bind into the scope. An `=` symbol will create a two-way bind.
    Each of these can have the name of the attribute used after them.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to bind one way to the attribute scope-test, use: `@scopeTest`.
    Here is an example that does that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be used like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: = binding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is the example using `=`. The controller will need to have a variable
    in scope to pass to the directive. Here is the directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The directive is then used like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the attribute used to connect the scope was called `test`. This
    is because we only used `=`, instead of `=nameOfVariable`.
  prefs: []
  type: TYPE_NORMAL
- en: '& binding'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the final way is to pass a function in. This is done with `&`. When
    creating a directive with isolated scope, you run into a problem with letting
    the controller know when to take an action. For example, when a button is clicked,
    the `& binding` allows the controller to pass in the reference to a function and
    have the directive execute it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The template now has a button that will call `testAction` when clicked. The
    `testAction` parameter that will execute is passed in from the controller and
    lives in the directive's scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the DOM of this directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Another situation comes up where you will need to pass information from the
    directive to the controller, for example, the event object or a variable from
    the scope. Here is an example that shows how Angular makes the `$event` object
    available in functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The key is the `link` property. This runs after compilation of the directive
    and is bound to the instance of the directive. This is important if you have a
    repeating directive. Next you listen for click using a jQuery-like API called
    JQLite. From here, we must call `$apply` because we are outside of Angular and
    it will not pick up any changes made here. Finally, we executed the expression
    that was passed in creating two variables, `$e` and `$fromDirective`, that will
    be available in the function in the controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what the directive will look like in the DOM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The two variables, `$e` and `$fromDirective`, need to be called the same thing
    as you defined in the directive.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying DOM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular makes very clear separation of concerns. This helps prevent hard-to-trace
    bugs from appearing. One of the separations is that controllers should not modify
    the DOM. Where does one modify the DOM then? In directives.
  prefs: []
  type: TYPE_NORMAL
- en: Directives are the only piece of your Angular application that should have any
    knowledge of what elements are in the DOM. When a DOM modification needs to be
    made, it should be the directive that does it.
  prefs: []
  type: TYPE_NORMAL
- en: Angular includes a jQuery-like library called jQLite. It has many of jQuery's
    DOM manipulation functions. If you know jQuery, you already know jQLite.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example of a directive that adds a `div` element when a button
    is clicked. The example uses jQLite''s `append` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Event binding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In an Angular application, only directives should be listening for DOM events,
    for example, the click event. This makes it very clear where the handlers reside.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that binds to the click event of the element and logs to
    the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, directives can let a controller pass in a function and execute
    it when an event happens (see `=` binding). Finally, the directive can even pass
    parameters into the controller from the directive. A great example is the event
    object that is returned from the event (see `&` binding).
  prefs: []
  type: TYPE_NORMAL
- en: Directive definition object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The directive definition object is the object that tells Angular how to build
    a directive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the most used properties and a quick overview of what they do:'
  prefs: []
  type: TYPE_NORMAL
- en: '`priority`: A directive with a higher priority will be compiled first. This
    defaults to `0`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scope`: See *Directives, Scope* section for a much more in depth overview.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`controller`: This can be confusing, but controller is used to share logic
    between directives. Another directive can share the code in the controller by
    using require and listing the name of the required directive. That directive''s
    controller will be injected into the `link` function. The function will have the
    following definition: `function($scope, $element, $attrs, $transclude)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require`: A string of the directive that is required. Prepending `?` will
    make this optional, `^` will search the element and parents throwing an error
    if not found, and `?^` will search the element and parents, but is optional. The
    function instance will be shared across directives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`restrict`: This will restrict the ways you can define the directive in the
    DOM. Here are the options, with `E` and `A` being the most commonly used ones:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'E: This stands for element'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A: This stands for attribute and default'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'C: This stands for class'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'M: This stands for comment'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`template`: HTML as a string or a function that returns a string that has the
    definition of `function(element, attrs)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`templateUrl`: Loads the template from this URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`link`: This is where any DOM manipulations or listeners are put. This function
    will have this definition: `function(scope, element, attrs, requiredController,
    transcludeFunction)`. If another directive is required, then its `controller`
    property would be the `requiredController` parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controller vs link
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When to use the `controller` or `link` function can be very confusing when building
    directives. You should view the `controller` function as the interface that another
    directive can use. When a directive is required by another directive, the controller
    return value is injected into the `link` function. This will be the fourth parameter.
    The object is then accessible from `link`. The `link` function is used for any
    DOM manipulations or listeners.
  prefs: []
  type: TYPE_NORMAL
- en: Key directives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are some of the most often used directives.
  prefs: []
  type: TYPE_NORMAL
- en: ngApp
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is the root of your Angular application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ng-app(string)` attribute is the name of the default module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This will set the root element of the application. This can be put on any element,
    including the root HTML element.
  prefs: []
  type: TYPE_NORMAL
- en: This will automatically bootstrap Angular loading the module that is defined
    in `ng-app`.
  prefs: []
  type: TYPE_NORMAL
- en: ngModel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This binds data from the scope to elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`ng-model(string)`: This will be a variable in the scope'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-required(boolean)`: This sets this input as required'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-minlength(int)`: This sets the minimum length'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-maxlength(int)`: This sets the maximum length'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-pattern(string)`: This is the regular expression that the value must match'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-change(expression)`: This is the Angular expression that will execute on
    value change'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-trim(boolean)`: This decides whether or not to trim the value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is used to bind variables in the controller's scope to input elements (text,
    select, or textarea). This will be a two-way binding, so any changes in the variable
    will update all occurrences of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example with text input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: ngDisabled
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This can disable an element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the `ng-disabled(expression)` attribute evaluates to true, the input will
    be disabled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This allows you to disable an input easily through code. The expression can
    bind to a scope variable or just evaluate what is in the expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example that disables a text input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: ngChecked
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This can make an element checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ng-checked(expression)` attribute is the Angular expression that should
    evaluate to a JavaScript Boolean value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the Angular way to check or uncheck a checkbox based on something in
    the controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: ngClass
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This sets the class of an element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ng-class(expression)` attribute can be a string, array, or an object map.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the expression is a string or array, then the value of the string or the
    values of the array will be applied as classes to the element. These can be tied
    to variables in the scope, of course.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of using a string to set the class. Here is the style that
    will be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the code to apply it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: The class is tied to the value of the `classString` variable. The input is bound
    so that any change will update the class on `div`. Once you type in double, it
    will apply the style.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example using an object map. The object''s property name is the
    class that will be applied and the value must be `true`. Here is a similar example
    utilizing the same class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that once you type anything into the input, the class will be
    applied. This is because a non-blank string will be `true`. You can use this to
    apply as many classes as needed using more properties.
  prefs: []
  type: TYPE_NORMAL
- en: ngClassOdd and ngClassEvent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These set the class of an odd or even element, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ng-class-odd` or `ng-class-even(expression)` attributes must evaluate to
    a string or an array of strings that will become the class(es) for the element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: These two directives are related and can even be applied to the same element.
    If a repeated element is odd, then `ng-class-odd` will evaluate and the same is
    true for `ng-class-even`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that will make every odd element twice the size and every
    even element half the size. Here are the styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the elements. The `ul` attribute creates the data to be repeated,
    and each `span` parameter statically sets the class to either odd or even. You
    can use variables in scope as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: ngRepeat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is a template that can be repeated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ng-repeat(repeat_expression)` attribute is similar to an expression, but
    it has a few syntax differences. Go to the description for the full explanation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Many times you will have data that has a similar template, but changes for each
    row of data. This is where `ng-repeat` comes in. The `ng-repeat` function will
    repeat the HTML that you have for each item in the repeat expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'The repeat expression is an expression that tells `ng-repeat` what items are
    going to be looped over. Here is a rundown of some expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`item in collection`: This is the classic foreach statement. It will loop over
    each item in a collection (an array, for example). The `item` parameter will be
    available inside the template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(key, value) in collection`: If your data is in an object and you want to
    be able to associate the name of the property to the value, then you will need
    to do use this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`item in collection track by grouping`: This allows for grouping. The grouping
    will only give you one item for each unique value of grouping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repeat expression | filter`: You can filter any of these expressions to give
    you a subset of the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example using an unordered list. Here is the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the HTML for the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: ngShow and ngHide
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These can show or hide elements, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ng-show` or `ng-hide(expression)` attributes will be evaluated to `true`
    or `false`, and the element will either by shown or hidden.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: These directives allow you to show or hide content based on the data in the
    scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that uses a counter to show or hide elements. You can use
    `ng-hide` and use the opposite logic. Here is the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Next is the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: ngSwitch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This creates a switch statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`ng-switch(expression)`: This is an expression that returns a value. This value
    will be used when evaluating `ng-switch-when`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-switch-when(expression)`: When the value matches this expression, then
    this element will be visible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-switch-default`: This element will show when `ng-switch-when` does not
    match.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This directive works much like the JavaScript `switch` statement. Different
    cases are tested against, and the one that matches is used. If none of the cases
    match, then a default element is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that jumps between even and odd. Here is the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Then comes the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: ngClick
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is used to define the click handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ng-click(expression)` attribute is what will be evaluated when the element
    is clicked. A function can be used, and the event object is available using the
    `function($event)` function definition. Any other variables in scope can be passed
    as well, for example, `$indexin` a repeater.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This directive allows you to run JavaScript on the click of an element. Usually,
    this is used with a function that is in the scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that will increment a `scope` variable. First, here are
    the controller''s scope variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, this is the element with the `ng-click` directive. In this example, you
    do not use the event object, but it demonstrates how to get it to the controller
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: ngDblclick
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is used to define the double-click handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ng-dblclick(expression)` function, a function can be used and the event
    object is available using the `function($event)` function definition. Any other
    variables in scope can be passed as well, for example, `$index` in a repeater.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This directive is very similar to `ngClick`. When the element is double-clicked,
    the expression will be evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of a div that will increment a counter when double-clicked.
    Here are the controller''s variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the element and directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: ngMousedown, ngMouseup, ngMouseover, ngMouseenter, and ngMouseleave
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are used to define the mouse event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the `ng-mouse*(expression)` function, a statement or function can be used,
    and the event object is available using the `function($event)` function definition.
    Any other variables in the scope can be passed as well, for example, `$index`
    in a repeater.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: These are grouped together as they are all related. When the mouse takes the
    action (down, up, over, enter, or leave), the expression will be evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example is a little crazy, but it demonstrates how to use these events.
    Here is the relevant portion of the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the directives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: ngMousemove
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is used to define the mouse move handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the `ng-mousemove(expression)` function, a statement or function can be used,
    and the event object is available using the `function($event)` function definition.
    Any other variables in the scope can be passed as well, for example, `$index`
    in a repeater.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This fires when the mouse moves. Unless the directive is on the entire page,
    the event will be limited to only the element it is applied to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that will display the mouse''s *x* and *y* coordinates.
    Here are the relevant scope variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Then comes the directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: ngKeydown, ngKeyup, and ngKeypress
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are used to define the key press handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the `ng-key*(expression)` function, a statement or function can be used,
    and the event object is available using the `function($event)` function definition.
    Any other variables in the scope can be passed as well, for example, `$index`
    in a repeater.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: These will fire when the key is pressed or released.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that will retrieve the key code from the key that was pressed
    down. Here are the relevant `scope` variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Next comes the directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: ngSubmit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are used to define the submit handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the `ng-submit(expression)` function, a statement or function can be used,
    and the event object is available using the `function($event)` function definition.
    Any other variables in the scope can be passed as well, for example, `$index`
    in a repeater.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This directive is used to capture the `submit` event of a form. If the form
    does not have an action attribute, then this will prevent the form from reloading
    the current page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example that logs the event object to console on `submit`.
    Here is the directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Next comes the controller code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: ngFocus and ngBlur
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are used to define the focus and blur handlers, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the `ng-focus(expression)` function, a statement or function can be used,
    and the event object is available using the `function($event)` function definition.
    Any other variables in the scope can be passed as well, for example, `$index`
    in a repeater.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `ngFocus` handler will fire when the element gains focus, and `ngBlur`
    will fire when it loses focus. Here is an example with a text input that logs
    the event to console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the controller code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: ngCopy, ngCut, and ngPaste
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`ng-copy`, `ng-cut`, or `ng-paste(expression)`: A statement or function can
    be used, and the event object is available using the `function($event)` function
    definition. Any other variables in the scope can be passed as well, for example,
    `$index` in a repeater.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'These are the events that will be fired when text is either cut, copied, or
    pasted. Here is an example that uses all three:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the controller code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Globals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This next group of functions can be executed from anywhere in Angular without
    having to inject them. They are mainly utility functions that allow you to do
    things easier or do things the Angular way.
  prefs: []
  type: TYPE_NORMAL
- en: Extend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This provides a way to combine two objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`srcObject(object)`: The object that extends will copy the properties from'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Destobject(object)`: The object that extends will copy the properties to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This returns a reference of `destObject`.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In JavaScript, there is no in-built way to extend an object using another object.
    This function does just that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example that will extend one object with the other''s property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: noop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the no operation function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `any` or `none` functions are used as these functions does nothing, you
    can pass in no parameters or as many as you want.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This will return `undefined`.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is useful to have a function do no operation (`noop`). A great example of
    this is when you have a function as a parameter that is optional. If it is not
    passed in, you can run `noop` instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a simple example that demonstrates the scenario explained earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: isUndefined
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This checks to see whether something is undefined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `object(any type)` function can be any variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This returns a Boolean value.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This states whether or not the variable is defined.
  prefs: []
  type: TYPE_NORMAL
- en: Copy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This makes a copy of an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`srcObject(any type)`: This is the source object to be copied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`destObject(same type as srcObject)`: This is optional. If it is supplied,
    it would be the destination of the copy operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This function returns the copy of `srcObject`. If `destObject` is supplied,
    it would be returned.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you need to make a copy of an object instead of modifying the original
    object, use this function.
  prefs: []
  type: TYPE_NORMAL
- en: Bind
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This binds a function to an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`self(object)`: This will set `this` (the inner self-reference) in the function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Function(function)`: This is the function that is being bound'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Args(any type)`: These are the arguments that will be bound to the function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the new bound function.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This creates a new bound function that will execute in the context of self.
    This allows you to define a function and then execute it many times in different
    contexts. This is further extended by binding arguments as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a contrived example, but demonstrates the principles. First is a function
    that depends on the context to execute. It will add the first parameter to `this`
    and multiply that result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you will use `angular.bind` to create a new function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be executed, and the return value will be 5 times the multiplier.
    In `newFunc`, `this` is `4`, and `toAdd` is `1`, so the inner parens will always
    be `5`. For example this will return `10`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forms are a core part of sending data to a server in HTML. As a result of this,
    Angular has some extra features that work with forms.
  prefs: []
  type: TYPE_NORMAL
- en: ngModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each form input will need `ngModel` defined to store the value in the scope.
    See *Directives*, *ngModel* for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple form that binds two text inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: CSS classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular will automatically add CSS classes to the form and elements that you
    can then target with CSS. Here is the list of CSS classes and when they are applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ng-valid`: This denotes that the form or element is valid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-invalid`: This denotes that the form or element is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-pristine`: This denotes that the control has not been changed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-dirty`: This denotes that the control has been changed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular has features that make validation very easy. First, Angular will use
    any of the HTML 5 input types. These allow the browser to do some validation,
    but Angular will still track any errors.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you can use any of the built-in validation directives of `ngModel`. The
    list is `required`, `pattern`, `minLength`, `maxLength`, `min`, and `max`. See
    *Directives*, *ngModel* for more info about each. When an input fails validation,
    the value will not be passed into the bound scope variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that sets a minimum length on `firstName`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: When a form is given a `name` attribute, it is bound to the scope as that name.
    When inputs are given names in a form, they are bound to that form. This allows
    you to use other directives with these values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that will show an error message when the text input does
    not meet the minimum length of 10:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: The validation message will only show when the field is invalid.
  prefs: []
  type: TYPE_NORMAL
- en: The form will have `$dirty`, `$invalid`, `$pristine`, and `$valid` as properties
    that can be used in directives or in scope. The inputs will have the same properties
    and additionally an `$error` object that will have each of the failed validations
    as a property. In the preceding example, this means that `form.firstname.$error.minLength`
    will return `true` when the input has failed that validation and `false` when
    it is valid.
  prefs: []
  type: TYPE_NORMAL
- en: Custom validators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you need to create your own logic, you can build a custom validator. You
    will need to create a new directive, require `ngModel`, and pass the value through
    the `$parsers` object of the `ngModel` controller when it is passed into the `link`
    function. Then, use `$setValidity` based on whether or not the value passed validation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a custom validator where you cannot have the value of
    the input set to `josh`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing should always be a major part of any development project. Angular has
    been built from the beginning to be testable. It has clear separation of concerns;
    for example, you do not need to build a full DOM to test a controller. Angular
    also uses dependency injection everywhere, which makes mocking up objects very
    easy.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing with Jasmine and Karma
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Jasmine** and **Karma** are two tools that allow you to quickly and easily
    test your Angular code.'
  prefs: []
  type: TYPE_NORMAL
- en: Jasmine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the actual unit testing library that we will use. Jasmine is a behavior-driven
    testing framework and is really easy to write.
  prefs: []
  type: TYPE_NORMAL
- en: Karma
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Karma is the test runner that will watch your files and automatically kick
    off your tests. It runs on Node.js, so you must have it installed. You can then
    install Karma with `npm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Karma can watch your test files and rerun them whenever any of the files change.
    You can also debug tests in the browser if there are any issues. It is a great
    complement to Jasmine, and Google recommends both for testing.
  prefs: []
  type: TYPE_NORMAL
- en: ngMock
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ngMock` handler is used to help mock up your application when testing.
    When testing, you will not want to create an entire DOM to load just one module.
    This is where `ngMock` can create a controller instance for use, and we can then
    test it.
  prefs: []
  type: TYPE_NORMAL
- en: Module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This allows you to load a module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `moduleName(string)` function take
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You do not have a root element to put `ng-app` on, so `module` allows us to
    load a module to get access to its controllers, services, and directives. You
    should only use this function in tests after loading `ngMock`.
  prefs: []
  type: TYPE_NORMAL
- en: Inject
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This gets the Angular inject services:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `toBeInjected(function)` function works much like other injected functions.
    List out the objects to be injected, and they will be available in the function
    body.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Use inject to get access to built-in Angular services, such as `$controller`
    and `$compile`, or use it to get access to a loading module's services.
  prefs: []
  type: TYPE_NORMAL
- en: Inject can load dependencies if they are wrapped with underscores. For example,
    inject would load `$compile` if it is used as `_$compile_`. This is done because
    in a test, we will need to create a reference to the `$compile` service, and most
    likely, we would want to use `$compile` as the variable name. The underscores
    allow you to inject it and use the `$compile` variable.
  prefs: []
  type: TYPE_NORMAL
- en: $httpBackend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This can create a mock response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`requestType(string)`: This is the HTTP method of the request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url(string)`: This is the URL of the request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`requestParameters(object)`: These are the parameters of the request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`headers(object)`: These are the headers for the request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`response(string, object)`: This is the response of the request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns a handler that can call `respond`.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Making AJAX calls is a perfect example of something that should not be done
    in a unit test. There are too many things out of your control for unit testing.
    The `$httpBackend` handler is provided by `ngMock` so that you can create a mock
    response.
  prefs: []
  type: TYPE_NORMAL
- en: The handler must match the expected method and URL at the very least. You can
    also match the optional parameters and headers if you plan on making specific
    requests with them.
  prefs: []
  type: TYPE_NORMAL
- en: When the request is matched, you can send back a string or object as the response.
    This allows you to create a test that uses `$httpBackend`, as you know what the
    response is going to be.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between `expect` and `when` is that `expect` has to be called
    in the test, whereas `when` does not have that requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is an example of a simple unit test for a controller. First, you must
    create a controller and then load it in our test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now create the test. In the test, you must load the `firstModule` module,
    inject `$controller`, and create an instance of `SimpleController`. Here is the
    test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Unit testing directives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This example will show you how to test a directive. First, create the directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you will need to load the module, inject `$compiler` and `$rootscope`,
    compile the directive, and finally, start the digest loop at least once to bind
    any values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Unit testing services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final testing example will test a service. First, create a service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you will have to load the module, inject `$httpBackend` and the service
    factory, create a response, and load the response. Notice the use of `$httpBackend.flush()`.
    This will send the response to any open requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
