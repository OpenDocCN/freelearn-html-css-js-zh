["```js\nrouter.get('/path/to/something', (req, res, next) => { \n  doSomething(arg1, arg2, (err, data1) => { \n    if (err) return next(err); \n    doAnotherThing(arg3, arg2, data1, (err2, data2) => { \n      if (err2) return next(err2); \n      somethingCompletelyDifferent(arg1, arg42, (err3, data3) => { \n        if (err3) return next(err3); \n        doSomethingElse((err4, data4) => { \n          if (err4) return next(err4); \n          res.render('page', { data }); \n        }); \n      }); \n    }); \n  }); \n});\n```", "```js\nexports.asyncFunction = function(arg1, arg2) { \n  return new Promise((resolve, reject) => { \n    // perform some task or computation that's asynchronous \n    // for any error detected: \n    if (errorDetected) return reject(dataAboutError); \n    // When the task is finished \n    resolve(theResult); \n  }); \n}; \n```", "```js\nasyncFunction(arg1, arg2) \n.then((result) => { \n   // the operation succeeded \n   // do something with the result\n   return newResult;\n}) \n.catch(err => { \n   // an error occurred \n}); \n```", "```js\nnotes.read(req.query.key) \n.then(note => { return filterNote(note); }) \n.then(note => { return swedishChefSpeak(note); }) \n.then(note => { \n    res.render('noteview', { \n        title: note ? note.title : \"\", \n        notekey: req.query.key, \n        note: note \n    }); \n}) \n.catch(err => { next(err); }); \n```", "```js\ndb.query('SELECT ..etc..', function(err, resultSet) { \n   if (err) { \n      // Instead, errors arrive here \n   } else { \n      // Instead, results arrive here \n    } \n}); \n// We WANT the errors or results to arrive here \n```", "```js\n$ cat gen.js\nfunction* gen() {\n    yield 1;\n    yield 2;\n    yield 3;\n    yield 4;\n}\nfor (let g of gen()) {\n   console.log(g); }\n$ node gen.js\n1\n2\n3\n4\n\n```", "```js\nvar geniter = gen();\nconsole.log(geniter.next());\nconsole.log(geniter.next());\nconsole.log(geniter.next());\n```", "```js\n$ node gen.js\n{ value: 1, done: false }\n{ value: 2, done: false }\n{ value: 3, done: false }\n```", "```js\nconst fs = require('fs-extra');\nconst co = require('co');\nconst util = require('util');\nco(function* () {\n  var texts = [\n    yield fs.readFile('hello.txt', 'utf8'),\n    yield fs.readFile('goodbye.txt', 'utf8')\n  ];\n  console.log(util.inspect(texts));\n});\n```", "```js\n$ node 2files.js\n[ 'Hello, world!\\n', 'Goodbye, world!\\n' ]\n```", "```js\nconst fs    = require('fs-extra');\nconst util  = require('util');\nasync function twofiles() {\n    var texts = [\n        await fs.readFile('hello.txt', 'utf8'),\n        await fs.readFile('goodbye.txt', 'utf8')\n    ];\n    console.log(util.inspect(texts));\n}\ntwofiles().catch(err => { console.error(err); });\n\n```", "```js\n$ node 2files-async.js \n[ 'Hello, world!\\n', 'Goodbye, world!\\n' ]\n```", "```js\nrouter.get('/path/to/something', async (req, res, next) => { \n   try {\n       let data1 = await doSomething(req.query.arg1, req.query.arg2);\n       let data2 = await doAnotherThing(req.query.arg3, req.query.arg2, \n       data1);\n       let data3 = await somethingCompletelyDifferent(req.query.arg1,\n                                                      req.query.arg42);\n       let data4 = await doSomethingElse();\n       res.render('page', { data1, data2, data3, data4 }); \n   } catch(err) {\n       next(err);\n   }\n}); \n```", "```js\n$ mkdir notes\n$ cd notes\n$ npm install express-generator@4.x\n$ ./node_modules/.bin/express --view=hbs --git .\ndestination is not empty, continue? [y/N] y\n\n create : .\n create : ./package.json\n create : ./app.js\n create : ./.gitignore\n create : ./public\n create : ./routes\n create : ./routes/index.js\n create : ./routes/users.js\n create : ./views\n create : ./views/index.hbs\n create : ./views/layout.hbs\n create : ./views/error.hbs\n create : ./bin\n create : ./bin/www\n create : ./public/stylesheets\n create : ./public/stylesheets/style.css\n\n install dependencies:\n $ cd . && npm install\n\n run the app:\n $ DEBUG=notes:* npm start\n\n create : ./public/javascripts\n create : ./public/images\n$ npm install\nadded 82 packages and removed 5 packages in 97.188s\n$ npm uninstall express-generator\nup to date in 8.325s\n```", "```js\nconst _note_key = Symbol('key');\nconst _note_title = Symbol('title');\nconst _note_body = Symbol('body');\n\nmodule.exports = class Note { \n    constructor(key, title, body) { \n        this[_note_key] = key; \n        this[_note_title] = title; \n        this[_note_body] = body; \n    } \n\n    get key() { return this[_note_key]; }\n    get title() { return this[_note_title]; }\n    set title(newTitle) { this[_note_title] = newTitle; }\n    get body() { return this[_note_body]; }\n    set body(newBody) { this[_note_body] = newBody; }\n};\n```", "```js\n$ node\n> const Note = require('./Note');\n> typeof Note\n'function'\n> const aNote = new Note('foo', 'The Rain In Spain', 'Falls mainly on the plain');\n> var notNote = {}\n> notNote instanceof Note\nfalse\n> aNote instanceof Note\ntrue\n> typeof aNote\n'object'\n```", "```js\n{\n   key: 'foo', title: 'The Rain in Spain',\n   body: 'Falls mainly on the plain'\n}\n```", "```js\nclass Note {\n  constructor(key, title, body) {\n     this.key = key;\n     this.title = title;\n     this.body = body;\n }\n}\n```", "```js\n> let symfoo = Symbol('foo')\n```", "```js\n> aNote[Symbol('title')]\nundefined\n```", "```js\nconst Note = require('./Note');\n\nvar notes = [];\n\nexports.update = exports.create = async function(key, title, body) {\n    notes[key] = new Note(key, title, body);\n    return notes[key];\n};\n\nexports.read = async function(key) {\n    if (notes[key]) return notes[key];\n    else throw new Error(`Note ${key} does not exist`);\n};\n\nexports.destroy = async function(key) {\n    if (notes[key]) {\n        delete notes[key];\n    } else throw new Error(`Note ${key} does not exist`);\n};\n\nexports.keylist = async function() { return Object.keys(notes); };\nexports.count = async function() { return notes.length; };\nexports.close = async function() { }\n```", "```js\nconst index = require('./routes/index'); \n.. \napp.use('/', index); \n```", "```js\nconst hbs = require('hbs');\n...\napp.set('view engine', 'hbs');\nhbs.registerPartials(path.join(__dirname, 'partials'));\n\n```", "```js\nconst express = require('express');\nconst router = express.Router();\nconst notes = require('../models/notes-memory');\n\n/* GET home page. */\nrouter.get('/', async (req, res, next) => {\n  let keylist = await notes.keylist();\n  let keyPromises = keylist.map(key => {\n    return notes.read(key)\n  });\n  let notelist = await Promise.all(keyPromises);\n  res.render('index', { title: 'Notes', notelist: notelist });\n});\n\nmodule.exports = router;\n```", "```js\nlet keylist = await notes.keylist();\nlet notelist = [];\nfor (key of keylist) {\n    let note = await notes.read(keylist);\n    notelist.push({ key: note.key, title: note.title });\n}\n```", "```js\n<!DOCTYPE html>\n<html>\n <head>\n <title>{{title}}</title>\n <link rel='stylesheet' href='/stylesheets/style.css' />\n </head>\n  <body>\n  {{> header }}\n  {{{body}}}\n  </body>\n</html>\n```", "```js\n<header>\n <h1>{{ title }}</h1>\n  <div class='navbar'>\n  <p><a href='/'>Home</a> | <a href='/notes/add'>ADD Note</a></p>\n  </div>\n</header>\n```", "```js\n{{#each notelist}}\n<ul>\n  <li>{{ key }}:\n  <a href=\"/notes/view?key={{ key }}\">{{ title }}</a>\n  </li>\n</ul>\n{{/each}}\n```", "```js\n$ DEBUG=notes:* npm start\n\n> notes@0.0.0 start /Users/David/chap05/notes\n> node ./bin/www\n\n notes:server Listening on port 3000 +0ms\nGET / 200 87.300 ms - 308\nGET /stylesheets/style.css 200 27.744 ms - 111\n```", "```js\n// var users = require('./routes/users'); \n.. \n// app.use('/users', users); \n```", "```js\n// const users = require('./routes/users'); \nconst notes  = require('./routes/notes'); \n.. \n// app.use('/users', users); \napp.use('/notes', notes); \n```", "```js\nconst util = require('util'); \nconst express = require('express'); \nconst router = express.Router(); \nconst notes = require('../models/notes-memory'); \n\n// Add Note. \nrouter.get('/add', (req, res, next) => { \n    res.render('noteedit', { \n        title: \"Add a Note\", \n        docreate: true, \n        notekey: \"\", note: undefined \n    }); \n}); \n\nmodule.exports = router; \n```", "```js\n<form method='POST' action='/notes/save'> \n<input type='hidden' name='docreate' value='<%= \n                  docreate ? \"create\" : \"update\"%>'> \n<p>Key: \n{{#if docreate }}\n    <input type='text' name='notekey' value=''/> \n{{else}} \n    {{#if note }}{{notekey}}{{/if}} \n    <input type='hidden' name='notekey'\n         value='{{#if note }}{{notekey}}{{/if}}'/> \n{{/if}} \n</p> \n<p>Title: <input type='text' name='title' \n        value='{{#if note }}{{note.title}}{{/if}}' /></p> \n<br/><textarea rows=5 cols=40 name='body' >\n    {{#if note }}{{note.body}}{{/if}} \n    </textarea> \n<br/><input type='submit' value='Submit' /> \n</form>\n```", "```js\n\n// Save Note (update)\nrouter.post('/save', async (req, res, next) => {\n    var note;\n    if (req.body.docreate === \"create\") {\n        note = await notes.create(req.body.notekey,\n                req.body.title, req.body.body);\n    } else {\n        note = await notes.update(req.body.notekey,\n                req.body.title, req.body.body);\n    }\n    res.redirect('/notes/view?key='+ req.body.notekey);\n});\n```", "```js\n// Read Note (read)\nrouter.get('/view', async (req, res, next) => {\n    var note = await notes.read(req.query.key);\n    res.render('noteview', {\n        title: note ? note.title : \"\",\n        notekey: req.query.key, note: note\n    });\n});\n```", "```js\n{{#if note}}<h3>{{ note.title }}</h3>{{/if}}\n{{#if note}}<p>{{ note.body }}</p>{{/if}}\n<p>Key: {{ notekey }}</p>\n{{#if notekey }}\n    <hr/>\n    <p><a href=\"/notes/destroy?key={{notekey}}\">Delete</a>\n     | <a href=\"/notes/edit?key={{notekey}}\">Edit</a></p>\n{{/if}}\n```", "```js\n// Edit note (update)\nrouter.get('/edit', async (req, res, next) => {\n    var note = await notes.read(req.query.key);\n    res.render('noteedit', {\n        title: note ? (\"Edit \" + note.title) : \"Add a Note\",\n        docreate: false,\n        notekey: req.query.key, note: note\n    });\n});\n```", "```js\n// Ask to Delete note (destroy)\nrouter.get('/destroy', async (req, res, next) => {\n    var note = await notes.read(req.query.key);\n    res.render('notedestroy', {\n        title: note ? note.title : \"\",\n        notekey: req.query.key, note: note\n    });\n});\n```", "```js\n<form method='POST' action='/notes/destroy/confirm'>\n<input type='hidden' name='notekey' value='{{#if note}}{{notekey}}{{/if}}'>\n<p>Delete {{note.title}}?</p>\n<br/><input type='submit' value='DELETE' /> \n<a href=\"/notes/view?key={{#if note}}{{notekey}}{{/if}}\">Cancel</a>\n</form>\n```", "```js\n// Really destroy note (destroy)\nrouter.post('/destroy/confirm', async (req, res, next) => {\n    await notes.destroy(req.body.notekey);\n    res.redirect('/');\n});\n```", "```js\nGET /stylesheets/style.css 304 0.702 ms - - \n```", "```js\n<link rel='stylesheet' href='/stylesheets/style.css' /> \n```", "```js\napp.use(express.static(path.join(__dirname, 'public'))); \n```", "```js\nbody { \n  padding: 50px; \n  font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif; \n} \n\na { \n  color: #00B7FF; \n} \n```", "```js\nbody { \n  padding: 5px; \n  .. \n} \n.. \nheader { \n    background: #eeeeee; \n    padding: 5px; \n} \n```", "```js\n\"scripts\": { \n    \"start\": \"DEBUG=notes:* node ./bin/www\", \n    \"server1\": \"DEBUG=notes:* PORT=3001 node ./bin/www\", \n    \"server2\": \"DEBUG=notes:* PORT=3002 node ./bin/www\" },\n```", "```js\n$ npm run server1\n\n> notes@0.0.0 server1 /Users/David/chap05/notes\n> DEBUG=notes:* PORT=3001 node ./bin/www\n\n notes:server Listening on port 3001 +0ms\n```", "```js\n$ npm run server2\n\n> notes@0.0.0 server2 /Users/David/chap05/notes\n> DEBUG=notes:* PORT=3002 node ./bin/www\n\n notes:server Listening on port 3002 +0ms\n```"]