["```js\n    $ ember g route index\n\n    ```", "```js\n    // app/routes/index.js\n    import Ember from 'ember';\n    const {Logger}= Ember;\n    export default Ember.Route.extend({\n        model(){\n          Logger.log('log');\n          Logger.info('info', 'more stuff');\n          Logger.error('error');\n          Logger.debug('debug');\n          Logger.warn('warn');\n          Logger.assert(true === false);\n          return {};\n        }\n    });\n    ```", "```js\n    Logger.log('log');\n    ```", "```js\n    Logger.info('info', 'more stuff');\n    ```", "```js\n    Logger.error('error');\n    ```", "```js\n    Logger.debug('debug');\n    ```", "```js\n    Logger.warn('warn');\n    ```", "```js\n    Logger.assert(true === false);\n    ```", "```js\n    $ ember install ember-cli-mirage\n    $ ember g factory school\n\n    ```", "```js\n    // app/mirage/config.js\n    export default function() {\n\n        this.get('/schools');\n    }\n    ```", "```js\n    // app/mirage/factories/school.js\n    import Mirage, {faker}  from 'ember-cli-mirage';\n\n    export default Mirage.Factory.extend({\n\n        name:faker.name.firstName,       // using faker\n        city: faker.address.city,\n    });\n    ```", "```js\n    // app/mirage/scenarios/default.js\n    export default function( server ) {\n\n        server.createList('school', 2);\n    }\n    ```", "```js\n    $ ember g route index\n    $ ember g model school name:string city:string\n    $ ember g adapter application\n\n    ```", "```js\n    // app/adapters/application.js\n    import DS from 'ember-data';\n\n    export default DS.RESTAdapter.extend({\n    });\n    ```", "```js\n    // app/models/school.js\n    import DS from 'ember-data';\n\n    export default DS.Model.extend({\n        name: DS.attr('string'),\n        city: DS.attr('string')\n    });\n    ```", "```js\n    // app/templates/index.hbs\n    {{outlet}}\n\n    {{#each model as |schoolName|}}\n        Name:{{schoolName.name}}<br>\n        City:{{schoolName.city}}<br>\n        <br>\n    {{/each}}\n    ```", "```js\n    // app/routes/index.js\n    import Ember from 'ember';\n\n    export default Ember.Route.extend({\n        model() {\n          return this.store.findAll('school');\n        }\n    });\n    ```", "```js\n    $E.store.createRecord('school',{name: 'Test School', city: 'Reno'});\n\n    ```", "```js\n    $ ember g component book-shelf\n    $ ember g acceptance-test add-book\n\n    ```", "```js\n    // app/components/book-shelf.js\n    import Ember from 'ember';\n\n    export default Ember.Component.extend({\n        books: Ember.A([{name: 'Moby Dick'}]),\n        actions: {\n          add(val) {\n            this.get('books').addObject({name:val});\n          }\n        }\n    });\n    ```", "```js\n    // app/templates/components/book-shelf.hbs\n    {{input value=val}}\n    <button {{action 'add' val}}>Push Me</button><br>\n    <ul>\n    {{#each books as |book|}}\n        <li>{{book.name}}<br></li>\n    {{/each}}\n    </ul>\n    ```", "```js\n    <h2 id=\"title\">Welcome to Ember</h2>\n    {{book-shelf}}\n    {{outlet}}\n    ```", "```js\n    // app/tests/acceptance/add-book-test.js\n    import { test } from 'qunit';\n    import moduleForAcceptance from 'example3/tests/helpers/module-for-acceptance';\n\n    moduleForAcceptance('Acceptance | add book');\n\n    test('visiting / and adding book', function(assert) {\n        visit('/');\n        fillIn('input','My new book');\n        click('button');\n        andThen(function() {\n          assert.equal(currentURL(), '/');\n          assert.equal(find('li:last').text(),'My new book');\n\n        });\n\n    });\n    ```", "```js\n    $ ember test –server\n\n    ```", "```js\n    // app/models/first-last.js\n\n    import Ember from 'ember';\n\n    export default Ember.Object.extend({\n        firstName: 'John',\n        lastName: 'Smith',\n        fullName: Ember.computed('firstName', 'lastName', function() {\n          const firstName = this.get('firstName');\n          const lastName= this.get('lastName');\n          return `Full Name: ${firstName} ${lastName}`;\n        })\n    });\n    ```", "```js\n    $ ember g model-test first-last\n\n    ```", "```js\n    // tests/unit/models/first-last-test.js\n\n    import { moduleFor, test } from 'ember-qunit';\n\n    moduleFor('model:first-last', 'Unit | Model | fullName', {\n        unit: true\n    });\n\n    test('check computed property fullName', function(assert) {\n        const firstLast= this.subject();\n        firstLast.set('firstName','Erik');\n        firstLast.set('lastName','Hanchett');\n        assert.equal(firstLast.get('fullName'), 'Full Name: Erik Hanchett');\n    });\n    ```", "```js\n    // tests/unit/models/first-last-test.js\n    …\n    test('check computed property fullName', function(assert) {\n        const firstLast= this.subject();\n        firstLast.set('firstName','Erik');\n        firstLast.set('lastName','Hanchett');\n        assert.equal(firstLast.get('fullName'),'Full Name: Erik wrong');\n    });\n    ```", "```js\n    $ ember g component font-sizer\n\n    ```", "```js\n    // app/components/font-sizer.js\n    import Ember from 'ember';\n\n    export default Ember.Component.extend({\n        textInfo: 'Hello World',\n        attributeBindings: ['style'],\n        style: Ember.computed('size',function() {\n          const size = this.get('size');\n          return new Ember.Handlebars.SafeString(\"font-size: \"+ size);\n        })\n\n    });\n    ```", "```js\n    // app/templates/application.hbs\n    <h2 id=\"title\">Welcome to Ember</h2>\n\n    {{#font-sizer size=\"38px\" }}\n        Test\n    {{/font-sizer }}\n    {{outlet}}\n    ```", "```js\n    // tests/integration/components/font-sizer-test.js\n    import { moduleForComponent, test } from 'ember-qunit';\n    import hbs from 'htmlbars-inline-precompile';\n\n    moduleForComponent('font-sizer', 'Integration | Component | font sizer', {\n        integration: true\n    });\n\n    test('check attributes', function(assert) {\n\n        this.render(hbs`{{font-sizer size=val}}`);\n        this.set('val','38px');\n        assert.equal(this.$('div').attr('style'),'font-size: 38px', 'size is set to 38px');\n\n    });\n    ```", "```js\n    // app/components/font-sizer.js\n    …\n        textInfo: 'Hello World',\n        }),\n        actions: {\n          updateText(){\n            this.set('textInfo','Hi');\n          }\n        }\n\n    });\n    ```", "```js\n    // app/templates/components/font-sizer.hbs\n    <div id='info'>{{textInfo}}</div><br>\n    {{yield}}<br>\n    <button {{action 'updateText'}}>Update Text</button>\n    ```", "```js\n    // tests/integration/components/font-sizer-test.js\n    …\n    test('check action', function(assert) {\n\n        assert.expect(2);\n        this.render(hbs`{{font-sizer}}`);\n        assert.equal(this.$('#info').text(), 'Hello World', |'starting text is hello world');\n        this.$('button').click();\n        assert.equal(this.$('#info').text(),'Hi', 'text changed   to hi');\n\n    });\n    ```", "```js\n    $ ember g route students\n\n    ```", "```js\n    // app/routes/students.js\n    import Ember from 'ember';\n\n    export default Ember.Route.extend({\n        someText: 'someText'\n    });\n    ```", "```js\n    // tests/unit/routes/students-test.js\n    import { moduleFor, test } from 'ember-qunit';\n\n    moduleFor('route:students', 'Unit | Route | students', {\n        // Specify the other units that are required for this test.\n    });\n\n    test('check prop and route exists', function(assert) {\n        let route = this.subject();\n        assert.expect(3);\n        assert.equal(route.get('someText'),'someText');\n        route.set('someText','otherText');\n        assert.equal(route.get('someText'),'otherText');\n        assert.ok(route);\n    });\n    ```", "```js\n    $ ember g model student.js\n\n    ```", "```js\n    // app/models/student.js\n    import DS from 'ember-data';\n\n    export default DS.Model.extend({\n        firstName: DS.attr('string'),\n        lastName: DS.attr('string')\n    });\n    ```", "```js\n    // tests/unit/models/student-test.js\n    import { moduleForModel, test } from 'ember-qunit';\n\n    moduleForModel('student', 'Unit | Model | student', {\n        // Specify the other units that are required for this test.\n        needs: []\n    });\n\n    test('it exists', function(assert) {\n        let model = this.subject();\n        assert.ok(!!model);\n    });\n\n    test('Test model data', function(assert) {\n        assert.expect(2);\n        let model = this.subject({firstName: 'Erik', lastName: 'Hanchett'});\n        assert.equal(model.get('firstName'),'Erik', 'first Name is Erik');\n        assert.equal(model.get('lastName'),'Hanchett', 'last Name is Erik');\n    });\n    ```", "```js\n    …\n    test('Test model data', function(assert) {\n        assert.expect(2);\n        let model = this.subject({firstName: 'Erik', lastName: 'Hanchett'});\n        assert.equal(model.get('firstName'),'Erik', 'first Name is Erik');\n        assert.equal(model.get('lastName'),'Hanchett', 'last Name is Erik');\n    });\n    ```", "```js\n    $ ember g controller index\n\n    ```", "```js\n    // app/controllers/index.js\n    import Ember from 'ember';\n\n    export default Ember.Controller.extend({\n        myValue: 'value',\n        actions:{\n          pressed(value){\n            this.set('myValue',value);\n          }\n        }\n    });\n    ```", "```js\n    // tests/unit/controllers/index-test.js\n    import { moduleFor, test } from 'ember-qunit';\n\n    moduleFor('controller:index', 'Unit | Controller | index', {\n        // Specify the other units that are required for this test.\n        // needs: ['controller:foo']\n    });\n\n    // Replace this with your real tests.\n    test('it exists', function(assert) {\n        let controller = this.subject();\n        assert.ok(controller);\n    });\n\n    test('check property', function(assert) {\n        assert.expect(2);\n        let controller = this.subject();\n        assert.equal(controller.get('myValue'),'value');\n        controller.send('pressed','newValue');\n        assert.equal(controller.get('myValue'),'newValue');\n    });\n    ```", "```js\n    …\n    test('check property', function(assert) {\n        assert.expect(2);\n        let controller = this.subject();\n        assert.equal(controller.get('myValue'),'value');\n        controller.send('pressed','newValue');\n        assert.equal(controller.get('myValue'),'newValue');\n    });\n    ```"]