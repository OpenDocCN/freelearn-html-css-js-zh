["```js\n$ docker rm --force $(docker ps --all --quiet)\n```", "```js\n    $ docker run --publish 3306:3306 --name node-mysql --env MYSQL_ROOT_PASSWORD=PASSWORD --detach mysql:8\n    ```", "```js\nUnable to find image 'mysql:8' locally\nlatest: Pulling from library/mysql\nea4e27ae0b4c: Pull complete\n837904302482: Pull complete\n3c574b61b241: Pull complete\n654fc4f3eb2d: Pull complete\n32da9c2187e3: Pull complete\ndc99c3c88bd6: Pull complete\n970181cc0aa6: Pull complete\nd77b716c39d5: Pull complete\n9e650d7f9f83: Pull complete\nacc21ff36b4b: Pull complete\nDigest: sha256:ff5ab9cdce0b4c59704b4e2a09deed5ab8467be795e0ea20228b8528f53fcf82\nStatus: Downloaded newer image for mysql:8\ndbb88d7d042966351a79ae159eb73129d69961b2c3dab943d9f4cdd6697d5220\n```", "```js\n    $ mkdir mysql-app\n    $ cd mysql-app\n    ```", "```js\n    $ npm init --yes\n    ```", "```js\n    $ touch setupDb.mjs tasks.mjs\n    $ touch .env\n    ```", "```js\n    DB_MYSQL_USER=root\n    DB_MYSQL_PASSWORD=PASSWORD\n    ```", "```js\n    $ npm install dotenv mysql2\n    ```", "```js\n    import dotenv from 'dotenv';\n    import mysql from 'mysql2/promise';\n    dotenv.config();\n    ```", "```js\n    async function main () {\n    }\n    main().catch(console.error);\n    ```", "```js\n    async function main() {\n      let connection;\n      try {\n        connection = await mysql.createConnection({\n          user: process.env.DB_MYSQL_USER,\n          password: process.env.DB_MYSQL_PASSWORD,\n        });\n        console.log('Connected as id ' +\n            connection.threadId);\n       } catch (error) {\n        console.error('Error connecting: ' + error.stack);\n      } finally {\n        if (connection) await connection.end();\n      }\n    }\n    ```", "```js\n    $ node setupDb.mjs\n    Connected as id 10\n    ```", "```js\n    await connection.query('CREATE DATABASE IF NOT EXISTS\n      tasks');\n    console.log('Database created or already exists.');\n    await connection.query('USE tasks');\n    const createTasksTableSql =\n      `CREATE TABLE IF NOT EXISTS tasks (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        task VARCHAR(255) NOT NULL,\n        completed BOOLEAN NOT NULL DEFAULT FALSE\n        )`;\n    await connection.query(createTasksTableSql);\n    console.log('Tasks table created or already exists.');\n    ```", "```js\n    $ node setupDb.mjs\n    Connected as id 18\n    Database created or already exists.\n    Tasks table created or already exists.\n    ```", "```js\n    import dotenv from 'dotenv';\n    import mysql from 'mysql2/promise';\n    dotenv.config();\n    async function main() {\n      let connection;\n      try {\n        connection = await mysql.createConnection({\n          user: process.env.DB_MYSQL_USER,\n          password: process.env.DB_MYSQL_PASSWORD,\n        });\n        console.log('Connected as id ' +\n            connection.threadId);\n      } catch (error) {\n        console.error('Error connecting: ' + error.stack);\n      } finally {\n        if (connection) await connection.end();\n      }\n    }\n    main().catch(console.error);\n    ```", "```js\n        if (process.argv[2]) {\n          await connection.query(\n              `INSERT INTO tasks.tasks (task) VALUES\n                  (?);`,\n              [process.argv[2]]\n          );\n        }\n    ```", "```js\n    const [results] = await connection.query('SELECT *\n      FROM tasks.tasks;');\n        console.log(results);\n    ```", "```js\n    $ node tasks.mjs \"Walk the dog.\"\n    Connected as id 10\n    [ { id: 1, task: 'Walk the dog.', completed: 0 } ]\n    ```", "```js\nawait connection.query(\n          `INSERT INTO tasks.tasks (task) VALUES (?);`,\n          [process.argv[2]]\n      );\n```", "```js\n    $ mkdir fastify-mysql\n    $ cd fastify-mysql\n    $ npm init --yes\n    ```", "```js\n    $ npm install fastify @fastify/mysql\n    ```", "```js\n    $ touch server.js\n    ```", "```js\n    const fastify = require('fastify')({ logger: true });\n    ```", "```js\n    fastify.register(require('@fastify/mysql'), {\n      connectionString:\n        'mysql://root:PASSWORD@localhost/tasks'\n    });\n    ```", "```js\n    fastify.get('/tasks', (req, reply) => {\n      fastify.mysql.query(\n        'SELECT * FROM tasks.tasks',\n        function onResult (err, result) {\n          reply.send(err || result);\n        }\n      );\n    });\n    ```", "```js\n    fastify.listen({ port: 3000 }, err => {\n      if (err) throw err;\n      console.log(`server listening on\n        ${fastify.server.address().port}`);\n    });\n    ```", "```js\n    $ node server.js\n    ```", "```js\n    $ curl http://localhost:3000/tasks\n    ```", "```js\n    $ docker run --publish 5432:5432 --name node-postgres-latest --env POSTGRES_PASSWORD=PASSWORD --detach postgres:16\n    ```", "```js\n    Unable to find image 'postgres:16' locally\n    latest: Pulling from library/postgres\n    f546e941f15b: Pull complete\n    926c64b890ad: Pull complete\n    eca757527cc4: Pull complete\n    93d9b27ec7dc: Pull complete\n    86e78387c4e9: Pull complete\n    8776625edd8f: Pull complete\n    d1afcbffdf18: Pull complete\n    6a6c8f936428: Pull complete\n    ae47f32f8312: Pull complete\n    82fb85897d06: Pull complete\n    ce4a61041646: Pull complete\n    ca83cd3ae7cf: Pull complete\n    f7fbf31fd41d: Pull complete\n    353df72b8bf7: Pull complete\n    Digest: sha256:f58300ac8d393b2e3b09d36ea12d7d24ee9440440e421472a300e929ddb63460\n    Status: Downloaded newer image for postgres:16\n    86ce1ac06849f737e669c34e50e6f91383074cdecb1a18f8f23a6becaa085ba0\n    ```", "```js\n    $ mkdir postgres-app\n    $ cd postgres-app\n    $ touch tasks.js .env\n    ```", "```js\n    $ npm init --yes\n    ```", "```js\n    $ npm install pg\n    ```", "```js\n    $ npm install dotenv\n    ```", "```js\n    PGUSER=postgres\n    PGPASSWORD=PASSWORD\n    PGPORT=5432\n    ```", "```js\n    require('dotenv').config();\n    ```", "```js\n    const pg = require('pg');\n    const db = new pg.Client();\n    ```", "```js\n    const task = process.argv[2];\n    ```", "```js\n    const CREATE_TABLE_SQL = `CREATE TABLE IF NOT EXISTS\n      tasks (id SERIAL, task TEXT NOT NULL, PRIMARY KEY (\n        id ));`;\n    const INSERT_TASK_SQL = 'INSERT INTO tasks (task)\n      VALUES ($1);';\n    const GET_TASKS_SQL = 'SELECT * FROM tasks;';\n    ```", "```js\n    db.connect((err) => {\n      if (err) throw err;\n      db.query(CREATE_TABLE_SQL, (err) => {\n        if (err) throw err;\n        if (task) {\n          db.query(INSERT_TASK_SQL, [task], (err) => {\n            if (err) throw err;\n            listTasks();\n          });\n        } else {\n          listTasks();\n        }\n      });\n    });\n    ```", "```js\n    function listTasks () {\n      db.query(GET_TASKS_SQL, (err, results) => {\n        if (err) throw err;\n        console.log(results.rows);\n        db.end();\n      });\n    }\n    ```", "```js\n    $ node tasks.js \"Bath the dog.\"\n    [\n      { id: 1, task: 'Bath the dog.' }\n    ]\n    ```", "```js\n    $ node tasks.js\n    [\n      { id: 1, task: 'Bath the dog.' }\n    ]\n    ```", "```js\nconst client = new Client({\n  host: 'localhost',\n  port: 5432,\n  user: 'postgres'\n});\n```", "```js\n    $ cp -r postgres-app postgres-object-app\n    $ cd postgres-object-app\n    ```", "```js\n    const CREATE_TABLE_SQL = `CREATE TABLE IF NOT EXISTS\n      task_docs (id SERIAL, doc jsonb);`;\n    const INSERT_TASK_SQL = `INSERT INTO task_docs (doc)\n      VALUES ($1);`;\n    const GET_TASKS_SQL = `SELECT * FROM task_docs;`;\n    ```", "```js\n    $ node tasks.js '{\"task\":\"Walk the dog.\"}'\n    [ { id: 1, doc: { task: 'Walk the dog.' } } ]\n    ```", "```js\nSELECT * FROM task_docs WHERE doc ->> task= \"Bath the dog.\"\n```", "```js\n    $ docker run --publish 27017:27017 --name node-mongo --detach mongo:7\n    ```", "```js\n    Unable to find image 'mongo:7' locally\n    latest: Pulling from library/mongo\n    bccd10f490ab: Pull complete\n    b00c7ff578b0: Pull complete\n    a1f43ab85151: Pull complete\n    9e72f6a5998a: Pull complete\n    8424336879e4: Pull complete\n    85a6d3c2e6c8: Pull complete\n    c533c21e5fb8: Pull complete\n    1fddf702bb73: Pull complete\n    Digest: sha256:0e145625e78b94224d16222ff2609c4621ff6e2c390300e4e6bf698305596792\n    Status: Downloaded newer image for mongo:7\n    9230ee867d2b2272448f2596ddc19a7f4de5112c99e4dd31b2d7746b28fbc674\n    ```", "```js\n    $ mkdir mongodb-app\n    $ cd mongodb-app\n    ```", "```js\n    $ npm init --yes\n    ```", "```js\n    $ touch index.js\n    ```", "```js\n    $ npm install mongodb\n    ```", "```js\n    const { MongoClient } = require('mongodb');\n    const URI = 'mongodb://localhost:27017';\n    const client = new MongoClient(URI);\n    async function connectToMongoDB () {\n      try {\n        await client.connect();\n        console.log('Connected successfully to server');\n        return client.db('Library');\n      } catch (err) {\n        console.error('Connection to MongoDB failed:',\n          err);\n      }\n    }\n    ```", "```js\n    async function createAuthor (db, author) {\n      try {\n        const result = await\n          db.collection('authors').insertOne(author);\n        console.log(`Author created with the following id:\n          ${result.insertedId}`);\n        return result.insertedId;\n      } catch (err) {\n        console.error('Create author failed:', err);\n      }\n    }\n    ```", "```js\n    async function createBook (db, book) {\n      try {\n        const result = await\n          db.collection('books').insertOne(book);\n        console.log(`Book created with the following id:\n          ${result.insertedId}`);\n        return result.insertedId;\n      } catch (err) {\n        console.error('Create book failed:', err);\n      }\n    }\n    ```", "```js\n    async function findAllAuthors (db) {\n      try {\n        const authors = await\n          db.collection('authors').find().toArray();\n        console.log('Authors:', authors);\n        return authors;\n      } catch (err) {\n        console.error('Find all authors failed:', err);\n      }\n    }\n    ```", "```js\n    async function findAllBooksWithAuthors (db) {\n      try {\n        const books = await\n          db.collection('books').aggregate([\n          {\n            $lookup: {\n              from: 'authors',\n              localField: 'authorId',\n              foreignField: '_id',\n              as: 'authorDetails'\n            }\n          }\n        ]).toArray();\n        console.log('Books with author details:', books);\n        return books;\n      } catch (err) {\n        console.error('Find all books with authors\n          failed:', err);\n      }\n    }\n    ```", "```js\n    async function main () {\n      const db = await connectToMongoDB();\n      if (!db) return;\n      const authorId = await createAuthor(db, { name:\n        'Richard Adams' });\n      if (!authorId) return;\n      await createBook(db, { title: 'Watership Down',\n        authorId });\n      await findAllAuthors(db);\n      await findAllBooksWithAuthors(db);\n      client.close();\n    }\n    main().catch(console.error);\n    ```", "```js\n    $ node index.js\n    ```", "```js\n    $ docker run --publish 6379:6379 --name node-redis --detach redis\n    ```", "```js\n    $ mkdir redis-app\n    $ cd redis-app\n    $ touch tasks.mjs\n    ```", "```js\n    $ npm init --yes\n    ```", "```js\n    $ npm install redis\n    ```", "```js\n    import { createClient } from 'redis';\n    const client = createClient();\n    ```", "```js\n    const task = process.argv[2];\n    ```", "```js\n    client.on('error', (err) => {\n        console.log('Error:', err);\n    });\n    ```", "```js\n    await client.connect();\n    ```", "```js\n    if (!task) {\n        listTasks();\n    } else {\n        addTask(task);\n    }\n    ```", "```js\n    async function addTask(task) {\n        const key =\n          `Task:${Math.random().toString(32).replace('.',\n            '')}`;\n        await client.hSet(key, 'task', task);\n        listTasks();\n    }\n    ```", "```js\n    async function listTasks() {\n        const keys = await client.keys('Task:*');\n        for (const key of keys) {\n            const task = await client.hGetAll(key);\n            console.log(task);\n        }\n        client.quit();\n    }\n    ```", "```js\n    $ node tasks.mjs \"Walk the dog.\"\n    { task: 'Walk the dog.' }\n    ```", "```js\n    $ docker run --publish 6380:6379 --name node-redis-pw --detach redis redis-server --requirepass PASSWORD\n    ```", "```js\n    $ cp tasks.mjs tasks-auth.mjs\n    ```", "```js\n    import { createClient } from 'redis';\n    const client = redis.createClient({\n        port: 6380,\n        password: 'PASSWORD',\n    });\n    ```", "```js\n    $ node tasks-auth.mjs \"Wash the car.\"\n    { task: 'Wash the car.' }\n    ```", "```js\nimport { createClient } from 'redis';\nconst client = createClient();\nclient.on('error', (err) => {\n  console.log('Error:', err);\n});\nawait client.connect();\nawait client.set('Task:3', 'Write letter.');\nconst resultsArray = await client\n  .multi()\n  .get('Task:3')\n  .set('Task:3', 'Mail letter.')\n  .get('Task:3')\n  .exec();\nconsole.log(resultsArray);\n// ['Write letter.', 'OK', 'Mail letter.']\nclient.quit();\n```", "```js\n    $ mkdir fastify-graphql\n    $ cd fastify-graphql\n    ```", "```js\n    $ npm init --yes\n    ```", "```js\n    $ npm install fastify mercurius\n    ```", "```js\n    $ touch data.js\n    ```", "```js\n    const authors = [\n      { id: '1', name: 'Richard Adams' },\n      { id: '2', name: 'George Orwell' }\n    ];\n    const books = [\n      { id: '1', name: 'Watership Down', authorId: '1' },\n      { id: '2', name: 'Animal Farm', authorId: '2' },\n      { id: '3', name: 'Nineteen Eighty-four', authorId:\n        '2' },\n    ];\n    module.exports = { authors, books };\n    ```", "```js\n    $ touch schema.graphql\n    ```", "```js\n    type Query {\n      books: [Book]\n      authors: [Author]\n    }\n    type Book {\n      id: ID\n      name: String\n      author: Author\n    }\n    type Author {\n      id: ID\n      name: String\n      books: [Book]\n    }\n    ```", "```js\n    $ touch resolvers.js\n    ```", "```js\n    const { authors, books } = require('./data');\n    const resolvers = {\n      Query: {\n        books: () => books,\n        authors: () => authors,\n      },\n      Book: {\n        author: (parent) => authors.find(author =>\n         author.id === parent.authorId),\n      },\n      Author: {\n        books: (parent) => books.filter(book =>\n          book.authorId === parent.id),\n      },\n    };\n    module.exports = { resolvers };\n    ```", "```js\n    $ touch server.js\n    ```", "```js\n    const fastify = require('fastify')();\n    const mercurius = require('mercurius');\n    const { readFileSync } = require('node:fs');\n    const { resolvers } = require('./resolvers');\n    const schema = readFileSync('./schema.graphql', 'utf-\n      8');\n    fastify.register(mercurius, {\n      schema,\n      resolvers,\n      graphiql: true\n    });\n    fastify.listen({ port: 3000 }, () => {\n      console.log('Server running at\n        http://localhost:3000');\n    });\n    ```", "```js\n    $ node server.js\n    ```", "```js\n     query {\n      books {\n        name\n        author {\n          name\n        }\n      }\n    }\n    ```"]