["```js\nsrc/lib/connect4.js\n\n/*\n  Connect 4 Game logic\n\n  Written for Blueprints: Express.js, Chapter 3\n\n*/\nvar MIN_ROWS = 6,\n    MIN_COLUMNS = 7,\n    players = ['x','o'];\n\n// Initializes and returns the board as a 2D array.\n// Arguments accepted are int rows, int columns,\n// Default values: rows = 6, columns = 7\nexports.initializeBoard = function initializeBoard(rows, columns){\n  var board = [];\n  rows = rows || MIN_ROWS;\n  columns = columns || MIN_COLUMNS;\n\n  // Default values is minimum size of the game\n  if (rows < MIN_ROWS) {\n    rows = MIN_ROWS;\n  }\n\n  if (columns < MIN_COLUMNS) {\n    columns = MIN_COLUMNS;\n  }\n\n  // Generate board\n  for (var i = 0; i < rows; i++){\n    var row = [];\n    for (var j = 0; j < columns; j++){\n      row.push(' ');\n    }\n    board.push(row);\n  }\n  return board;\n};\n\n// Used to draw the board to console, mainly for debugging\nexports.drawBoard = function drawBoard(board){\n  var numCols = board[0].length,\n      numRows = board.length;\n  consolePrint(' ');\n  for (var i = 1; i <= numCols; i++){\n    consolePrint(i+'');\n    consolePrint(' ');\n  }\n  consolePrint('\\n');\n  for (var j = 0; j < numCols*2+1; j++){\n    consolePrint('-');\n  }\n  consolePrint('\\n');\n  for (i = 0; i < numRows; i++){\n    consolePrint('|');\n    for (j = 0; j < numCols; j++){\n      consolePrint(board[i][j]+'');\n      consolePrint('|');\n    }\n    consolePrint('\\n');\n    for (j = 0; j < numCols*2+1; j++){\n      consolePrint('-');\n    }\n    consolePrint('\\n');\n  }\n};\n\n// Make a move for the specified player, at the indicated column for this board\n// Player should be the player number, 1 or 2\nexports.makeMove = function makeMove(player, column, board){\n  if (player !== 1 && player !== 2) {\n    return false;\n  }\n  var p = players[player-1];\n  for (var i = board.length-1; i >= 0; i--){\n    if (board[i][column-1] === ' '){\n      board[i][column-1] = p;\n      return board;\n    }\n  }\n  return false;\n}\n\n// Check for victory on behalf of the player on this board, starting at location (row, column)\n// Player should be the player number, 1 or 2\nexports.checkForVictory = function checkForVictory(player, lastMoveColumn, board){\n  if (player !== 1 && player !== 2) {\n    return false;\n  }\n  var p = players[player-1],\n      directions = [[1,0],[1,1],[0,1],[1,-1]],\n      rows = board.length,\n      columns = board[0].length,\n      lastMoveRow;\n  lastMoveColumn--;\n  // Get the lastMoveRow based on the lastMoveColumn\n  for (var r = 0; r < rows; r++) {\n    if(board[r][lastMoveColumn] !== ' ') {\n      lastMoveRow = r;\n      break;\n    }\n  }\n\n  for (var i = 0; i<directions.length; i++){\n    var matches = 0;\n    // Check in the 'positive' direction\n    for (var j = 1; j < Math.max(rows,columns); j++){\n      if (board[lastMoveRow + j*directions[i][1]] && p === board[lastMoveRow + j*directions[i][1]][lastMoveColumn + j*directions[i][0]]){\n        matches++;\n      } else {\n        break;\n      }\n    }\n    // Check in the 'negative' direction\n    for (j = 1; j < Math.max(rows,columns); j++){\n      if (board[lastMoveRow - j*directions[i][1]] && p === board[lastMoveRow - j*directions[i][1]][lastMoveColumn - j*directions[i][0]]){\n        matches++;\n      } else {\n        break;\n      }\n    }\n    // If there are greater than three matches, then that means there are at least 4 in a row\n    if (matches >= 3){\n      return true;\n    }\n  }\n  return false;\n};\n\nfunction consolePrint(msg) {\n  process.stdout.write(msg);\n}\nAnd the accompanying unit tests:\nvar expect = require('chai').expect;\n\nvar connect4 = require('../src/lib/connect4');\n\ndescribe('Connect 4 Game Logic | ', function() {\n  describe('#Create a board ', function() {\n    var board = connect4.initializeBoard();\n\n    it('should return game boards of the defaults length when too small', function(done) {\n      var board2 = connect4.initializeBoard(3,3),\n          board3 = connect4.initializeBoard(5),\n          board4 = connect4.initializeBoard(3,10),\n          board5 = connect4.initializeBoard(10,3);\n\n      // Make sure the board is a 2D array\n      expect(board2).to.be.an('array');\n      expect(board2.length).to.equal(board.length);\n      expect(board2[0].length).to.equal(board[0].length);\n      for(var i = 0; i < board2.length; i++){\n        expect(board2[i]).to.be.an('array');\n      }\n\n      // Make sure the board is a 2D array\n      expect(board3).to.be.an('array');\n      expect(board3.length).to.equal(board.length);\n      expect(board3[0].length).to.equal(board[0].length);\n      for(var i = 0; i < board3.length; i++){\n        expect(board3[i]).to.be.an('array');\n      }\n      // Board initialized with 3 rows, but should default to 6\n      expect(board4).to.be.an('array');\n      expect(board4.length).to.equal(board.length);\n      for(var i = 0; i < board4.length; i++){\n        expect(board4[i]).to.be.an('array');\n      }\n      // Board initialized with 3 columns, but should default to 7\n      expect(board5).to.be.an('array');\n      expect(board5[0].length).to.equal(board[0].length);\n      for(var i = 0; i < board5.length; i++){\n        expect(board5[i]).to.be.an('array');\n      }\n\n      done();\n\n    });\n\n    it('should only allow pieces to be placed #row amount of times', function(done) {\n      board = connect4.initializeBoard();\n      for (var i = 0; i < board.length; i++) {\n        board = connect4.makeMove(1, 1, board);\n      }\n      // Column should be full\n      expect(connect4.makeMove(1, 1, board)).to.be.an('boolean').and.equal(false);\n      // Out of bounds\n      expect(connect4.makeMove(1, 0, board)).to.be.an('boolean').and.equal(false);\n      expect(connect4.makeMove(1, board[0].length+1, board)).to.be.an('boolean').and.equal(false);\n\n      done();\n\n    });\n\n    it('should return victory if there are 4 in a row', function(done) {\n      // Vertical Win\n      board = connect4.initializeBoard();\n      for (var i = 0; i < 3; i++) {\n        board = connect4.makeMove(1, 1, board);\n        expect(connect4.checkForVictory(1, 1, board)).to.equal(false);\n      }\n      board = connect4.makeMove(1, 1, board);\n      expect(connect4.checkForVictory(1, 1, board)).to.equal(true);\n\n      // Horizontal Win\n      board = connect4.initializeBoard();\n      for (var i = 1; i < 4; i++) {\n        board = connect4.makeMove(1, i, board);\n        expect(connect4.checkForVictory(1, 1, board)).to.equal(false);\n      }\n      board = connect4.makeMove(1, 4, board);\n      expect(connect4.checkForVictory(1, 4, board)).to.equal(true);\n\n      // Diagonal Win\n      board = connect4.initializeBoard();\n      for (var i = 1; i < 4; i++) {\n        for (var j = 1; j <= i; j++){\n          if (j===i){\n            board = connect4.makeMove(1, i, board);\n          } else {\n            board = connect4.makeMove(2, i, board);\n          }\n          expect(connect4.checkForVictory(1, 1, board)).to.equal(false);\n        }\n      }\n      for (var i = 0; i < 3; i++) {\n        board = connect4.makeMove(2, 4, board);\n        expect(connect4.checkForVictory(2, 4, board)).to.equal(false);\n      }\n      board = connect4.makeMove(1, 4, board);\n      expect(connect4.checkForVictory(1, 4, board)).to.equal(true);\n\n      done();\n\n    });\n  });\n});\n```"]