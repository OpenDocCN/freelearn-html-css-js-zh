["```js\n'use strict';\n\nlet assert = require('assert');\nlet service = require('./services/games.js')\n\n// Given\nservice.create('firstUserId', 'testing');\n\n// When\nlet games = service.availableTo('secondUserId');\n\n// Then            \nassert.equal(games.length, 1);            \nlet game = games[0];\nassert.equal(game.setBy, 'firstUserId');\nassert.equal(game.word, 'TESTING');\n```", "```js\n> node gameServiceTest.js\n> echo %errorlevel%\n\n```", "```js\nvar app = require('../src/app');\nvar debug = require('debug')('hangman:server');\nvar http = require('http');\n```", "```js\n> npm install mocha --save-dev\n\n```", "```js\n  \"scripts\": {\n    \"start\": \"node ./bin/www\",\n \"test\": \"node node_modules/mocha/bin/mocha test/**/*.js\"\n  },\n```", "```js\n'use strict';\n\nconst assert = require('assert');\nconst service = require('../../src/services/games.js');\n\ndescribe('Game service', () => {\n    const firstUserId = 'user-id-1';\n    const secondUserId = 'user-id-2';\n\n    describe('list of available games', () => { \n        it('should include games set by other users', () => {\n            // Given\n            service.create(firstUserId, 'testing');\n\n            // When\n            const games = service.availableTo(secondUserId);\n\n            // Then\n            assert.equal(games.length, 1);\n            const game = games[0];\n            assert.equal(game.setBy, firstUserId);\n            assert.equal(game.word, 'TESTING');\n        });\n    });\n});\n```", "```js\n    it('should not include games set by the same user', () => {\n        // Given\n        service.create(firstUserId, 'first');\n        service.create(secondUserId, 'second');\n\n        // When\n        const games = service.availableTo(secondUserId);\n\n        // Then\n        assert.equal(games.length, 1);\n        const game = games[0];\n        assert.notEqual(game.setBy, secondUserId);\n    });\n```", "```js\ndescribe('Game service', () => {\n    const firstUserId = 'user-id-1';\n    const secondUserId = 'user-id-2';\n\n beforeEach(() => {\n let gamesCreated = service.availableTo(\"not-a-user\");\n gamesCreated.forEach(game => game.remove());\n });\n\n    describe('list of available games', () => {    \n```", "```js\n> npm install chai --save-dev\n\n```", "```js\nconst expect = require('chai').expect;\nconst service = require('../../src/services/games.js');\n\n...\n\n    it('should include games created by other users', () => {\n        // Given\n        service.create(firstUserId, 'testing');\n\n        // When\n        const games = service.availableTo(secondUserId);\n\n        // Then\n expect(games.length).to.equal(1);\n        const game = games[0];\n expect(game.setBy).to.equal(firstUserId);\n expect(game.word).to.equal('TESTING');\n    });\n\n    it('should not include games created by the same user', () => {\n        // Given\n        service.create(firstUserId, 'first');\n        service.create(secondUserId, 'second');\n\n        // When\n        const games = service.availableTo(secondUserId);\n\n        // Then\n expect(games.length).to.equal(1);\n        let game = games[0];\n expect(game.setBy).not.to.equal(secondUserId);\n    });\n```", "```js\nmodule.exports = function(req, res, next) {\n    let userId = req.cookies.userId;\n    if (!userId) {\n        userId = uuid.v4();\n        res.cookie('userId', userId);\n    }\n    req.user = {\n        id: userId\n    };\n    next();\n};\n```", "```js\n'use strict';\n\nconst middleware = require('../../middleware/users.js');\nconst expect = require('chai').expect;\n\ndescribe('Users middleware', () => {    \n    const defaultUserId = 'user-id-1';\n    let request, response;\n\n    beforeEach(() => {\n        request = { cookies: {} };\n        response = { cookie: () => {} };\n    });\n\n    it('if the user already signed in, reads their ID from a cookie and exposes the user on the request', () => {\n        // Given\n        request.cookies.userId = defaultUserId;\n\n        // When\n        middleware(request, response, () => {});\n\n        // Then\n        expect(request.user).to.exist;\n        expect(request.user.id).to.equal(defaultUserId);\n    }); \n});\n```", "```js\n    it('calls the next middleware in the chain', () => {\n        // Given\n        let calledNext = false;\n        const next = () => calledNext = true;\n\n        // When\n        middleware(request, response, next);\n\n        // Then\n        expect(calledNext).to.be.true;\n    });\n```", "```js\n> npm install sinon --save-dev\n\n```", "```js\nconst expect = require('chai').expect;\nconst sinon = require('sinon');\n\n...\n\n    it('calls the next middleware in the chain', () => {\n          // Given\n const next = sinon.spy();\n\n        // When\n        middleware(request, {}, next);\n\n        // Then\n        expect(next.called).to.be.true;\n    });\n\n it('if the user is not already signed in, ' +\n 'creates a new user id and stores it in a cookie', () => {\n // Given\n request.cookies.userId = undefined;\n response = { cookie: sinon.spy() };\n\n // When\n middleware(request, response, () => {});\n\n // Then\n expect(request.user).to.exist;\n const newUserId = request.user.id;\n expect(newUserId).to.exist;\n expect(response.cookie.calledWith(\n 'userId', newUserId)).to.be.true;\n    });\n```", "```js\n'use strict';\n\nconst http = require('http');\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst expect = require('chai').expect;\nconst gamesService = require('../../src/services/games.js');\n\nconst TEST_PORT = 5000, userId = 'test-user-id';\n\ndescribe('/games', () => {\n  let server;\n  const makeRequest = (method, path, callback) => {\n    http.request({\n      method: method,\n      port: TEST_PORT,\n      path: path\n    }, callback).end();\n  };\n\n  before(done => {\n    const app = express();\n    app.use(bodyParser.json());\n    app.use((req, res, next) => {\n      req.user = { id: userId }; next();\n    });\n\n    const games = require('../../src/routes/games.js');\n    app.use('/games', games);\n\n    server = http.createServer(app).listen(TEST_PORT, done);\n  });\n\n  afterEach(() => {\n    const gamesCreated = gamesService.availableTo(\"non-user\");\n    gamesCreated.forEach(game => game.remove());\n  });\n\n  after(done => {\n    server.close(done);\n  });\n\n  describe('/:id DELETE', () => {\n    it('should allow users to delete their own games', done => {\n      const game = gamesService.create(userId, 'test');\n\n      makeRequest('DELETE', '/games/' + game.id, response => {\n        expect(response.statusCode).to.equal(200);\n        expect(gamesService.createdBy(userId)).to.be.empty;\n        done();\n      });\n    });\n  });\n});\n```", "```js\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\nif (app.get('env') === 'development') {\n app.use(logger('dev'));\n}\napp.use(bodyParser.json());\n```", "```js\n  \"scripts\": {\n    \"start\": \"node ./bin/www\",\n \"test\": \"set NODE_ENV=test && node node_modules/mocha/bin/mocha test/**/*.js\"\n  },\n```", "```js\n> npm install supertest --save-dev\n\n```", "```js\n'use strict';\n\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst request = require('supertest');\nconst expect = require('chai').expect;\nconst gamesService = require('../../src/services/games.js');\n\nconst userId = 'test-user-id';\n\ndescribe('/games', () => {\n let agent, app;\n\n  before(() => {\n    app = express();\n    app.use(bodyParser.json());\n    app.use((req, res, next) => {\n      req.user = { id: userId }; next();\n    });\n\n    const games = require('../../src/routes/games.js');\n    app.use('/games', games);\n  });\n\n beforeEach(() => {\n agent = request.agent(app);\n });\n\n  describe('/:id DELETE', () => {\n    it('should allow users to delete their own games', done => {\n const game = gamesService.create(userId, 'test');\n\n agent\n .delete('/games/' + game.id)\n .expect(200)\n .expect(() =>\n expect(gamesService.createdBy(userId)).to.be.empty)\n .end(done);\n    });\n  });\n});\n```", "```js\n    it('should not allow users to delete games that they did not set', done => {\n      const game = gamesService.create('another-user-id', 'test');\n      agent\n        .delete('/games/' + game.id)\n        .expect(403)\n        .expect(() => expect(gamesService.get(game.id).ok))\n        .end(done);\n    });\n\n    it('should return a 404 for requests to delete a game that no longer exists', done => {\n      const game = gamesService.create(userId, 'test');\n      agent\n        .delete(`/games/${game.id}`)\n        .expect(200)\n        .end(function(err) {\n          if (err) {\n            done(err);\n          } else {\n            agent\n              .delete('/games/' + game.id)\n              .expect(404, done);\n          }\n        });\n    });\n```", "```js\n> npm install phantomjs-prebuilt --save-dev\n\n```", "```js\n(function() {\n    'use strict';\n\n    var expect = require('chai').expect;\n    var page = require('webpage').create();\n    var rootUrl = 'http://localhost:3000';\n\n    withGame('Example', function() {\n        expect(getText('#word')).to.equal('_______');\n\n        page.evaluate(function() {\n            $(document).ajaxComplete(window.callPhantom);\n        });\n\n        page.sendEvent('keydown', page.event.key.E);\n        page.onCallback = verify(function() {\n            expect(getText('#word')).to.equal('E_____E');\n            expect(getText('#missedLetters')).to.be.empty;\n\n            page.sendEvent('keydown', page.event.key.T);\n            page.onCallback = verify(function() {\n                expect(getText('#word')).to.equal('E_____E');\n                expect(getText('#missedLetters')).to.equal('T');\n\n                console.log('Test completed successfully!');\n                phantom.exit();\n            });\n        });\n    });\n\n    function withGame(word, callback) {\n        ...\n    }\n\n    function getText(selector) {\n        return page.evaluate(function(s) {\n            return $(s).text();\n        }, selector);\n    }\n\n    function verify(expectations) {\n        return function() { \n            try {\n                expectations();\n            } catch(e) {\n                console.log('Test failed!');\n                handleError(e.message);\n            }\n        }\n    }\n\n    function handleError(message) {\n        console.log(message);\n        phantom.exit(1);\n    }\n\n    phantom.onError = page.onError = handleError;\n}());\n```", "```js\n> node node_modules/phantomjs-prebuilt/bin/phantomjs integration-test/game.js\n\n```"]