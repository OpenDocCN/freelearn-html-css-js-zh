["```js\nlet *id* = x => x;\n```", "```js\nlet *lastElem*: *list('a)* => option('a);\n```", "```js\nlet *rec* *lastElem* = aList =>\n  switch aList {\n  | [] => None\n  | [x] => Some(x)\n  | [_, ...l] => lastElem(l)\n};\n```", "```js\nJs.log(*lastElem*([1, 3, 2, 5, 4]));\nJs.log(*lastElem*([\"a\", \"b\", \"c\", \"d\"]));\n```", "```js\nmodule *F* = (M1: I1, ···): ResultI => {\n   ...\n };\n```", "```js\nmodule *IntSet* =\n   *Set.Make*(\n     {\n       let *compare* = Pervasives.compare;\n       type *t* = int;\n     }\n );\n```", "```js\nlet *myIntSet* = IntSet.of_list([1,2,3]);\n```", "```js\nJs.log(myIntSet)\n```", "```js\n[ 0, 1, [ 0, 2, [ 0, 3, 0, 1 ], 2 ], 3 ]\n```", "```js\nmodule type *Comparable* = {\n   type *t*;\n   let *equal*: (t, t) => bool;\n };\n```", "```js\nmodule *MakeSet* = (Item: Comparable) => {\n   /* 1 */\n   type backingType = list(Item.t);\n   let *empty* = [];\n   let *add* = (currentSet: backingType, newItem: Item.t) : backingType =>\n     if (*List.exists*((*x*)=> *Item.equal*(*x, newItem*)*, currentSet*)) {\n       currentSet /* 2 */\n     } else {\n       [\n         *newItem*,\n         ...currentSet /* 3 */\n       ]\n     };\n };\n```", "```js\nmodule *IntPair* = {\n   type *t* = (int, int);\n   let *equal* = ((x1, y1), (x2, y2)) => x1 == x2 && y1 == y2;\n   let *create* = (x, y) => (x, y);\n };\n```", "```js\nmodule *SetOfIntPairs* = *MakeSet*(IntPair);\n```", "```js\nlet *aSetOfPairItems*: SetOfIntPairs.backingType = SetOfIntPairs.empty;\nJs.log(aSetOfPairItems);\nlet *otherSetOfPairItems* = SetOfIntPairs.add(aSetOfPairItems, (1, 2));\nJs.log(*otherSetOfPairItems*);\nlet *thirdSetOfPairItems* = SetOfIntPairs.add(otherSetOfPairItems, (2, 3));\nJs.log(thirdSetOfPairItems);\n```", "```js\n0\n[ [ 1, 2 ], 0 ]\n[ [ 2, 3 ], [ [ 1, 2 ], 0 ] ]\n```", "```js\nmodule type *PrintableType* = {\n   type *t*;\n   let *print*: t => string;\n };\n```", "```js\nmodule type *PrintablePair* = (First: PrintableType, Second: PrintableType) => {\n   type *t*;\n   let *make*: (First.t, Second.t) => t;\n   let *print*: (t) => string;\n };\n```", "```js\nmodule *Make*: *PrintablePair* = (First: PrintableType, Second: PrintableType) => {\n type *t* = (First.t, Second.t);\n let *make* = (f: First.t, s: Second.t) => (f, s);\n let *print* = ((f, s): t) =>\n   \"(\" ++ First.print(f) ++ \", \" ++ Second.print(s) ++ \")\";\n };\n```", "```js\nmodule *PrintableString* = {\n   type *t*=string;\n   let *print* = (s: t) => s;\n };\n```", "```js\nmodule *PrintableInt* = {\n   type *t*=int;\n   let *print* = (i: t) => string_of_int(i);\n };\n```", "```js\nmodule *PrintableSI* = Make(PrintableString, PrintableInt);\nlet () = *PrintableSI*.({\n   let *pair* = *make*(\"Jane\", 53);\n   let *str* = *print*(pair);\n   *print_string*(str);\n });\n```", "```js\n(Jane, 53)\n```"]