["```js\nnpm start \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head><link href=\"/css/bootstrap.min.css\" rel=\"stylesheet\" /></head>\n    <body>\n        <h3 class=\"m-2\">Message: {{ message }}</h3>\n    </body>\n</html> \n```", "```js\nimport { readFile } from \"fs\";\nimport { Express } from \"express\";\nconst renderTemplate = (path: string, context: any,\n    callback: (err: any, response: string | undefined) => void) => {\n    readFile(path, (err, data) => {\n        if (err != undefined) {\n            callback(\"Cannot generate content\", undefined);\n        } else {\n            callback(undefined, parseTemplate(data.toString(), context));           \n        }\n    });\n};\nconst parseTemplate = (template: string, context: any) => {\n    const expr = /{{(.*)}}/gm;\n    return template.toString().replaceAll(expr, (match, group) => {\n        return context[group.trim()] ?? \"(no data)\"\n    });               \n}\nexport const registerCustomTemplateEngine = (expressApp: Express) =>\n    expressApp.engine(\"custom\", renderTemplate); \n```", "```js\n...\nconst expr = /{{(.*)}}/gm;\nreturn template.toString().replaceAll(expr, (match, group) => {\n   ** return context[group.trim()] ?? \"(no data)\"**\n});\n... \n```", "```js\n...\nexport const registerCustomTemplateEngine = (expressApp: Express) =>\n    expressApp.**engine**(\"custom\", renderTemplate);\n... \n```", "```js\nimport { createServer } from \"http\";\nimport express, {Express } from \"express\";\nimport { testHandler } from \"./testHandler\";\nimport httpProxy from \"http-proxy\";\nimport helmet from \"helmet\";\n**import { registerCustomTemplateEngine } from \"./custom_engine\";**\nconst port = 5000;\nconst expressApp: Express = express();\nconst proxy = httpProxy.createProxyServer({\n    target: \"http://localhost:5100\", ws: true\n});\n**registerCustomTemplateEngine(expressApp);**\n**expressApp.set(\"views\", \"templates/server\");**\nexpressApp.use(helmet());\nexpressApp.use(express.json());\n**expressApp.****get(\"/dynamic/:file\", (req, resp) => {**\n **resp.render(`${req.params.file}.custom`, { message: \"Hello template\" });**\n});\nexpressApp.post(\"/test\", testHandler);\nexpressApp.use(express.static(\"static\"));\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\nexpressApp.use((req, resp) => proxy.web(req, resp));\nconst server = createServer(expressApp);\nserver.on('upgrade', (req, socket, head) => proxy.ws(req, socket, head));\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\n...\nexpressApp.**set**(\"views\", \"templates/server\");\n... \n```", "```js\n...\nexpressApp.**get**(\"/dynamic/:file\", (req, resp) => {\n    resp.**render**(`${req.params.file}.custom`, { message: \"Hello template\" });\n});\n... \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head><link href=\"/css/bootstrap.min.css\" rel=\"stylesheet\" /></head>\n    <body>\n        <h3 class=\"m-2\">Message: {{ message }}</h3>\n        **<h3 class=\"m-2\">Lower: {{ message.toLowerCase() }}</h3>**\n **<h3 class=\"****m-2\">Count: {{ 2 * 3 }}</h3>**\n    </body>\n</html> \n```", "```js\nimport { readFile } from \"fs\";\nimport { Express } from \"express\";\nconst renderTemplate = (path: string, context: any,\n    callback: (err: any, response: string | undefined) => void) => {\n    readFile(path, (err, data) => {\n        if (err != undefined) {\n            callback(\"Cannot generate content\", undefined);\n        } else {\n            callback(undefined, parseTemplate(data.toString(), context));           \n        }\n    });\n};\nconst parseTemplate = (template: string, context: any) => {\n   ** const ctx = Object****.keys(context)**\n **.map((k) => `const ${k} = context.${k}`)**\n **.join(\";\");**\n    const expr = /{{(.*)}}/gm;\n    return template.toString().replaceAll(expr, (match, group) => {\n      **  return eval(`****${ctx};${group}`);**\n    });\n}\nexport const registerCustomTemplateEngine = (expressApp: Express) =>\n    expressApp.engine(\"custom\", renderTemplate); \n```", "```js\n...\n\"const message = context.message; message.toLowerCase()\"\n... \n```", "```js\nimport { readFileSync } from \"fs\";\nexport const style = (stylesheet: string) => {\n    return `<link href=\"/css/${stylesheet}\" rel=\"stylesheet\" />`;\n}\nexport const partial = (file: string, context: any) => {\n    const path = `./${context.settings.views}/${file}.custom`;\n    return readFileSync(path, \"utf-8\");\n} \n```", "```js\n...\nconst path = `./${**context.settings.views**}/${file}.custom`;\n... \n```", "```js\n<!DOCTYPE html>\n<html>\n    **<head>{{ @style(\"bootstrap.min.css\") }}</head>**\n    <body>\n        **{{ @partial(\"message\") }}**\n        <h3 class=\"m-2\">Message: {{ message }}</h3>\n        <h3 class=\"m-2\">Lower: {{ message.toLowerCase() }}</h3>\n        <h3 class=\"m-2\">Count: {{ 2 * 3 }}</h3>\n    </body>\n</html> \n```", "```js\n<div class=\"bg-primary text-white m-2 p-2\">\n    {{ message }}\n</div> \n```", "```js\n...\n{{ @partial(\"message\") }}\n... \n```", "```js\n...\nfeatures.partial(\"message\", context);\n... \n```", "```js\nimport { readFile } from \"fs\";\nimport { Express } from \"express\";\n**import * as features from \"./custom_features\";**\nconst renderTemplate = (path: string, context: any,\n    callback: (err: any, response: string | undefined) => void) => {\n    readFile(path, (err, data) => {\n        if (err != undefined) {\n            callback(\"Cannot generate content\", undefined);\n        } else {\n            **callback(****undefined, parseTemplate(data.toString(),**\n **{ ...context, features }));**\n        }\n    });\n};\nconst parseTemplate = (template: string, context: any) => {\n    const ctx = Object.keys(context)\n        .map((k) => `const ${k} = context.${k}`)\n        .join(\";\");\n    const expr = /{{(.*)}}/gm;\n    return template.toString().replaceAll(expr, (match, group) => {\n        **const evalFunc= (expr: string) => {**\n **return eval(****`${ctx};${expr}`)**\n **}**\n **try {**\n **if (group.trim()[0] === \"@\") {**\n **group = `features.${group.trim().substring(1)}****`;**\n **group = group.replace(/\\)$/m, \", context, evalFunc)\");**\n **}**\n **let result = evalFunc(group);**\n **if (expr.test(result)) {**\n **result = parseTemplate(result, context);**\n **}**\n **return result;**\n **} catch (****err: any) {**\n **return err;**\n **}**\n    });\n}\nexport const registerCustomTemplateEngine = (expressApp: Express) =>\n    expressApp.engine(\"custom\", renderTemplate); \n```", "```js\n...\nexpressApp.get(\"/dynamic/:file\", (req, resp) => {\n   ** resp.render(`${req.params.file}.custom`, {**\n**message: \"Hello template\", req**\n **});**\n});\n... \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>{{ @style(\"bootstrap.min.css\") }}</head>\n    <body>\n        <a class=\"btn btn-primary m-2\"\n            href=\"/dynamic/counter?c={{ Number(req.query.c ?? 0) + 1}}\">\n                Increment\n        </a>\n        <div>\n            {{ @conditional(\"(req.query.c ?? 0) % 2\", \"odd\", \"even\") }}       \n        </div>\n    </body>\n</html> \n```", "```js\n<h4 class=\"bg-primary text-white m-2 p-2\">\n    Odd value: {{ req.query.c ?? 0}}\n</h4> \n```", "```js\n<h4 class=\"bg-secondary text-white m-2 p-2\">\n    Even value: {{ req.query.c ?? 0}}\n</h4> \n```", "```js\nimport { readFileSync } from \"fs\";\nexport const style = (stylesheet: string) => {\n    return `<link href=\"/css/${stylesheet}\" rel=\"stylesheet\" />`;\n}\nexport const partial = (file: string, context: any) => {\n    const path = `./${context.settings.views}/${file}.custom`;\n    return readFileSync(path, \"utf-8\");\n}\n**export const conditional = (expression: string,**\n **trueFile: string, falseFile: string, context: any,**\n **evalFunc: (expr: string) => any) => {**\n **return partial(evalFunc(expression) ? trueFile : falseFile, context);**\n**}** \n```", "```js\nimport { Odd } from \"./odd_custom\";\nimport { Even } from \"./even_custom\";\nexport const Counter = (context) => `\n    <button class=\"btn btn-primary m-2\" action=\"incrementCounter\">\n        Increment\n    </button>\n    <div>\n        ${ context.counter % 2 ? Odd(context) : Even(context) }\n    </div>` \n```", "```js\nexport const Even = (context) => `\n    <h4 class=\"bg-secondary text-white m-2 p-2\">\n        Even value: ${ context.counter }\n    </h4>` \n```", "```js\nexport const Odd = (context) => `\n    <h4 class=\"bg-primary text-white m-2 p-2\">\n        Odd value: ${ context.counter }\n    </h4>` \n```", "```js\nimport { Counter } from \"./counter_custom\";\nconst context = {\n    counter: 0\n}\nconst actions = {\n    incrementCounter: () => {\n        context.counter++; render();\n    }\n}\nconst render = () => {\n    document.getElementById(\"target\").innerHTML = Counter(context);\n}\ndocument.addEventListener('DOMContentLoaded', () => {\n    document.onclick = (ev) => {\n        const action = ev.target.getAttribute(\"action\")\n        if (action && actions[action]) {\n            actions[action]()\n        }\n    }\n    render();\n}); \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <script src=\"img/bundle.js\"></script>\n        <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n        **<div id=\"target\"></div>**\n **<!-- <button id=\"btn\" class=\"btn btn-primary m-2\">Send Request</button>**\n **<table class=\"table table-striped\">**\n **<tbody>**\n **<tr><th>Status</th><td id=\"msg\"></td></tr>**\n **<tr><th>Response</th><td id=\"body\"></td></tr>**\n **</tbody>**\n **</table> -->**\n    </body>\n</html> \n```", "```js\nnpm install handlebars@4.7.8\nnpm install express-handlebars@7.1.2 \n```", "```js\nexport const style = (stylesheet: any) => {\n    return `<link href=\"/css/${stylesheet}\" rel=\"stylesheet\" />`;\n}\nexport const valueOrZero = (value: any) => {\n    return value !== undefined ? value : 0;\n}\nexport const increment = (value: any) =>  {\n    return Number(valueOrZero(value)) + 1;\n}\nexport const isOdd = (value: any) => {\n    return Number(valueOrZero(value)) % 2;\n} \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        {{{ style \"bootstrap.min.css\" }}}\n    </head>\n    <body>\n        {{{ body }}}\n    </body>\n</html> \n```", "```js\n<a class=\"btn btn-primary m-2\"\n    href=\"/dynamic/counter?c={{ increment req.query.c }}\">\n        Increment\n</a>\n{{#if (isOdd req.query.c) }}\n    {{> odd }}\n{{else}}\n    {{> even }}\n{{/if}} \n```", "```js\n...\nhref=\"/dynamic/counter?c=**{{ increment req.query.c }}**\">\n... \n```", "```js\n...\n**{{#if (isOdd req.query.c) }}**\n    {{> odd }}\n**{{else}}**\n    {{> even }}\n**{{/if}}**\n... \n```", "```js\n...\n{{#if (isOdd req.query.c)}}\n    **{{> odd }}**\n{{else}}\n    **{{> even }}**\n{{/if}}\n... \n```", "```js\n`{{#if val}}` \n```", "```js\n`{{#unless val}}` \n```", "```js\n`{{> partial }}` \n```", "```js\n`{{each arr }}` \n```", "```js\n<h4 class=\"bg-secondary text-white m-2 p-2\">\n    Handlebars Even value: {{ valueOrZero req.query.c }}\n</h4> \n```", "```js\n<h4 class=\"bg-primary text-white m-2 p-2\">\n    Handlebars Odd value: {{ valueOrZero req.query.c}}\n</h4> \n```", "```js\nimport { createServer } from \"http\";\nimport express, {Express } from \"express\";\nimport { testHandler } from \"./testHandler\";\nimport httpProxy from \"http-proxy\";\nimport helmet from \"helmet\";\n**//import { registerCustomTemplateEngine } from \"./custom_engine\";**\n**import { engine } from \"express-handlebars\";**\n**import * as helpers from \"./template_helpers\"****;**\nconst port = 5000;\nconst expressApp: Express = express();\nconst proxy = httpProxy.createProxyServer({\n    target: \"http://localhost:5100\", ws: true\n});\n**//registerCustomTemplateEngine(expressApp);**\nexpressApp.set(\"views\", \"templates/server\");\n**expressApp.engine(\"handlebars\", engine****());**\n**expressApp.set(\"view engine\", \"handlebars\");**\nexpressApp.use(helmet());\nexpressApp.use(express.json());\n**expressApp.get(\"/dynamic/:file\"****, (req, resp) => {**\n **resp.render(`${req.params.file}.handlebars`,**\n **{ message: \"Hello template\", req,**\n **helpers: { ...helpers }**\n **});**\n**});**\nexpressApp.post(\"/test\", testHandler);\nexpressApp.use(express.static(\"static\"));\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\nexpressApp.use((req, resp) => proxy.web(req, resp));\nconst server = createServer(expressApp);\nserver.on('upgrade', (req, socket, head) => proxy.ws(req, socket, head));\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nnpm install --save-dev handlebars-loader@1.7.3 \n```", "```js\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nexport default  {\n    mode: \"development\",\n    entry: \"./src/client/client.js\",\n    devtool: \"source-map\",   \n    output: {\n        path: path.resolve(__dirname, \"dist/client\"),\n        filename: \"bundle.js\"\n    },\n    devServer: {\n        static: [\"./static\"],        \n        port: 5100,\n        client: { webSocketURL: \"http://localhost:5000/ws\" }\n    },\n  **  module: {**\n **rules: [**\n **{ test: /\\.handlebars$/, loader: \"handlebars-loader\" }**\n **]**\n **},**\n **resolve: {**\n**alias: {**\n **\"@templates\": path.resolve(__dirname, \"templates/client\")**\n **}**\n **}**\n}; \n```", "```js\n<button class=\"btn btn-primary m-2\" action=\"incrementCounter\">\n    Increment\n</button>\n<div>\n    {{#if (isOdd counter) }}\n        <h4 class=\"bg-primary text-white m-2 p-2\">\n            Client Odd Value: {{ counter }}\n        </h4>               \n    {{else}}\n        <h4 class=\"bg-secondary text-white m-2 p-2\">\n            Client Even Value: {{ counter }}\n        </h4>      \n    {{/if}}\n</div> \n```", "```js\nexport default (value) => value % 2; \n```", "```js\n**//import { Counter } from \"./counter_custom\";**\n**import * as** **Counter from \"@templates/counter_client.handlebars\";**\nconst context = {\n    counter: 0\n}\nconst actions = {\n    incrementCounter: () => {\n        context.counter++; render();\n    }\n}\nconst render = () => {\n    document.getElementById(\"target\").innerHTML = Counter(context);\n}\ndocument.addEventListener('DOMContentLoaded', () => {\n    document.onclick = (ev) => {\n        const action = ev.target.getAttribute(\"action\")\n        if (action && actions[action]) {\n            actions[action]()\n        }\n    }\n    render();\n}); \n```"]