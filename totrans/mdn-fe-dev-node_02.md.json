["```js\nimport * as b from './b.js'; // get all things from b.js\n// use imports\nconsole.log('The value of b is:', b.myValue);\n```", "```js\nexport const myValue = 42;\n```", "```js\n// get only selected things\nimport { myValue } from './b.js';\nconsole.log('The value of b is:', myValue); // use imports\n```", "```js\n// gets all the things, but only uses myValue\nconst { myValue: otherValue } = require('./b.js');\n```", "```js\n// gets only myValue – but renames it\nimport { myValue as otherValue } from './b.js';\n```", "```js\nexport default 42;\n```", "```js\nimport otherValue from './b.js'; // gets only default\nconsole.log('The value of b is:', otherValue);\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>My Sample Project</title>\n    <!--\n      data-main attribute tells RequireJS to load\n      ./main.js after ./require.js has been loaded\n    -->\n    <script data-main=\"./main\" src=\"img/require.js\"></script>\n  </head>\n  <body></body>\n</html>\n```", "```js\nrequirejs(['./helper/util'], (util) => {\n  // This is called when ./helper/util.js. has been processed\n});\n```", "```js\ndefine(['./helper/util'], (util) => {\n  // This is called when ./helper/util.js. has been processed\n});\n```", "```js\ndefine('myModule', ['dep1', 'dep2'], (dep1, dep2) => {\n  // Define the module exports by returning a value.\n  return {};\n});\n```", "```js\nconst define = require('./r.js'); // gets the loader\ndefine.config({\n  // Will also correctly resolve other Node.js dependencies\n  nodeRequire: require\n});\ndefine(['./b'], (b) => {\n  console.log('The value of b is:', b.myValue);\n});\n```", "```js\nconst define = require('./r.js'); // gets the loader\ndefine.config({\n  // Will also correctly resolve other Node.js dependencies\n  nodeRequire: require\n});\ndefine([], () => {\n  return {\n    myValue: 42,\n  };\n});\n```", "```js\n((root, factory) => { // context and export callback\n  if (typeof define === 'function' && define.amd) {\n    // there is a define function that follows AMD – use it\n    define(['b'], factory);\n  } else if (typeof exports === 'object' && typeof module\n    !== 'undefined') {\n    // there is module and exports: CommonJS\n    factory(require('b'));\n  } else {\n    // we just take the global context\n    factory(root.b);\n  }\n})(typeof self !== 'undefined' ? self : this, (b) => {\n  // this is the body of the module, follows AMD\n  console.log('The value of b is:', b.myValue);\n});\n```", "```js\n((root, factory) => {\n  if (typeof define === 'function' && define.amd) {\n    // in AMD we depend on the special \"exports\" dependency\n    define(['exports'], factory);\n  } else if (typeof exports === 'object' && typeof module\n    !== 'undefined') {\n    // in CommonJS we'll forward the exports\n    factory(exports);\n  } else {\n    // for scripts we define a new global and forward it\n    factory(root.b = {});\n  }\n})(typeof self !== 'undefined' ? self : this, (exports) =>\n{\n  // use the CommonJS format in here\n  exports.myValue = 42;\n});\n```", "```js\nconst os = require('os');\nconsole.log('The current hostname is:', os.hostname());\n```", "```js\nimport { hostname } from 'node:os';\nconsole.log('The current hostname is:', hostname());\n```", "```js\n{\n  \"imports\": {\n    \"os\": \"https://example.com/js/os.min.js\"\n  }\n}\n```", "```js\n<script type=\"importmap\">\n{\n  \"imports\": {\n    \"os\": \"https://example.com/js/os.min.js\"\n  }\n}\n</script>\n```", "```js\n<script type=\"importmap\">\n{\n  \"imports\": {\n    \"/app.mjs\": \"/app.8e0d62a03.mjs\"\n  }\n}\n</script>\n<script type=\"module\" src=\"img/app.mjs\"></script>\n```", "```js\n<script type=\"importmap\">\n{\n  \"imports\": {\n    \"/app.mjs\": \"/app.8e0d62a03.mjs\"\n  }\n}\n</script>\n<script type=\"module\">import \"/app.mjs\";</script>\n```", "```js\nSystem.register(['dependency'], (_export, _context) => {\n  let dependency;\n  return {\n    setters: [(_dep) => {\n      dependency = _dep;\n    }],\n    execute: () => {\n      _export({\n        myValue: 42,\n      });\n    },\n  };\n});\n```", "```js\n{\n  \"name\": \"my-package\",\n  \"version\": \"1.0.0\"\n}\n```", "```js\n{\n  \"name\": \"my-package\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./lib/app.js\"\n}\n```"]