- en: Chapter 10. Building a Custom Processor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the key benefits of using PostCSS is its modular approach—we're not forced
    to use a large library, particularly if we only need to make use of a small part
    of its functionality! In this chapter, we'll pull together some of the themes
    we've discussed throughout earlier chapters, and create a fully working preprocessor,
    customized to our needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll use it to compile code for a simple site, explore using it for CMS systems
    such as WordPress, then take a look at extending it to work with frameworks such
    as CSStyle. We will cover a number of topics throughout this chapter, which will
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating our processor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing the output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding source map and vendor prefix support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the final preprocessor on a simple site system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending our preprocessor to use the CSStyle framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's make a start!
  prefs: []
  type: TYPE_NORMAL
- en: Creating your processor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many developers who work with existing processors such as SASS, less, or Stylus
    will be accustomed to working with a library that is a necessary dependency, and
    where it is unlikely that they will be using 100% of the functionality available
    for their chosen processor.
  prefs: []
  type: TYPE_NORMAL
- en: This is not the case with PostCSS. One of the key attractions is its flexibility;
    gone are the days when we have excess baggage in our processor that is redundant
    for our needs! The power of flexibility can also be a shortcoming, where does
    one start deciding what to include in our processor, I hear you ask?
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the course of this chapter, we will bring together the various elements
    of the processor we've used in the demos, and work through changes we can make
    to improve or extend functionality. The key, though, to any processor is that
    there is no right or wrong answer; each will be different, and they will depend
    on your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: As time goes by, it is likely that you will find common elements that can be
    reused between projects, ultimately, it is up to you as the developer to find
    the combination that meets your requirements. This aside, let's begin with a detailed
    look at the processor we've used in recent examples, and explore some of the ideas
    and tips we can use to create our own version.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring our processor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As part of creating the demos we've worked through in this book, we concentrated
    on ensuring plugins are installed, and that we have the right files in the right
    place. There is something missing though, and that is—what actually happens in
    the files? Why do we have tasks in a particular order? What is the reasoning behind
    choosing some of the plugins that we've used…and so on—you get the idea!
  prefs: []
  type: TYPE_NORMAL
- en: Over the next few pages, we're going to try to answer some of these questions
    (and more), by exploring the processor that we've used in some of the recent examples;
    you will see that there isn't a one-answer-fits-all approach, but more a case
    of working through your requirements, and picking plugins to suit your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Before we go into depth, though, let's just quickly recap the make-up of our
    processor, starting with the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: Dissecting the package.json file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `package.json` file tells PostCSS which plugins to use, and may contain
    some of the key configuration settings to be used during compilation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The top half of our processor contains a number of key properties that tell
    us details such as the version, description, who created it, any dependencies,
    and the license being used for the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In comparison, the key part for us is in the bottom half; this lists all of
    the plugins that will be used within our project. In many of our projects, we've
    installed the plugin—at point of installation, the plugin will add an entry into
    this file that contains the name and the minimum version required (represented
    by the `^` symbol).
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that we can manually add entries to, or remove entries from
    this file, or even copy `package.json` files from one project to another if needed.
    This is particularly useful if we know that a new project has identical (or very
    similar) requirements to an existing one; plugins will only add an entry into
    this file at installation, if one does not already exist.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Gulp task file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `gulpfile.js` file is where the real magic happens—this contains all of
    the tasks that need to be performed on each style sheet within our project. Outside
    of the style sheet, this is the second of two files that we've simply copied across
    from the code download to our project area. Now that we've been using it in anger,
    it's worth taking a moment to explore what happens in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `gulpfile.js` file is made up of several sections—in our example, we begin
    with a list of variables that define references to each of our plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The first task in our list is the most important one—this picks up and compiles
    the source code into a valid CSS file and deposits it in the `dest` folder. As
    part of this, we provide links to any PostCSS plugin that is needed to transform
    our code—in this example, we''re using Rucksack, set to include fallback support
    but not add vendor prefixes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This chunky task is less complicated than it looks—it checks our code for consistency,
    based on the rules set; it outputs any warnings or errors on screen using the
    reporter plugin. The key here is the `[''styles'']` attribute—this tells PostCSS
    not to perform this task until the styles task has been completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In comparison, the next two tasks are relatively straightforward—this one takes
    care of compressing our compiled code, and renaming it with a `.min.css` extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This task is equally straightforward—it creates a source map of our style sheet,
    and sets it in a format that PostCSS can release into a file within the `dest`
    folder of our project area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The last two steps play the most important role in any Gulp task file—the first
    will fire off calls to each of our tasks if we enter `gulp` in a command line
    prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This task, although not obligatory, watches out for any changes to our code
    and sets off the tasks in our Gulp file automatically. It will respect any constraints
    set, although for consistency, it is preferable to list the tasks being performed
    in the same order as they are shown in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: There is more to the compilation process than these two files—thought should
    also be given to how we structure our working environment. A quick look at the
    Gulp task file should reveal that we've used a simple in-tray/out-tray approach;
    code is picked up from the `src` folder, and the results placed into the `dest`
    folder at the end of compilation.
  prefs: []
  type: TYPE_NORMAL
- en: This is an important part of the process—after all, there is no benefit in using
    PostCSS if we don't give any thought to the structure of our project area! Part
    of this is to maintain separation between source and compiled files, but also
    that we may decide to expand our compilation process to include tasks such as
    shrinking images. There is no right or wrong in how this area should be structured—this
    will be dictated by our project requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Dissecting issues with our processor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With a Gulp task file and associated `package.json` file in place, we should
    be good to go, right? Well, not quite—yes, our processor has been used on demos
    throughout the book to great effect. But there is more that we can do: our Gulp
    file should never be static; we should always look to review it periodically,
    to ensure it is working at optimal efficiency.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To see an updated version of our Gulp file, take a look in the `T49 – fixing
    issues in Gulpfile` folder within the code download that accompanies this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our Gulp file does have a few issues we need to address, so let''s look at
    these now:'
  prefs: []
  type: TYPE_NORMAL
- en: Some of our tasks are not correctly named—for example, the styles task could
    be renamed to better reflect that we're using Rucksack in this task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a question about the use of source maps; so far we've used a dedicated
    source map plugin to create them. An upcoming change in Gulp 4 will reduce the
    need for a plugin—support for creating them is being added to Gulp core, so a
    separate plugin won't be required so often!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the rename task, we've hard-coded a `style.min.css` filename as the output;
    this isn't going to suit all requirements, so we should change this to make it
    dynamic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Staying with the rename task—we're combining two tasks, when they should be
    split into two separate processes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take a look at the processor list within the styles task at line 16; this isn't
    too bad now, but over time it could become long and awkward to read! Instead,
    we need to change it so that at the point of calling PostCSS, we can use an array
    instead to provide the names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When creating source maps, our current setup provides both a full fat and minified
    version; is this really necessary? The issue comes from `cssnano`, which is compressing
    every `.css` file it sees; this isn't necessary, so needs to be changed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of `cssnano` that should be run as a task within PostCSS is causing
    issues—even though it would make sense to run it this way, it needs to be run
    independently, to satisfy our needs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should make a decision on whether we use a dedicated plugin for providing
    vendor prefix support, or rely on the use of other plugins that may have this
    built in already.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When compiling source files, our processor is producing two minified files;
    one is correctly named, but the other is meant to be the uncompressed version
    for development purposes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Over the next few pages, we will explore ways of fixing and improving our Gulp
    task file—it's key to understand that whilst many of these changes are specific
    to our task file, they are ones that may crop up for your future projects. Above
    all, it is essential that we should continually review our production process
    to ensure it is working as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin the process of fixing and improving our Gulp file before we put
    it to test on a sample site.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing our Gulp task file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It has to be said that there are a few issues we need to resolve—the key here
    is that none of them will stop our compilation process; we should consider them
    more as rough edges on a diamond, which need polishing to make our process sparkle
    (pun intended!).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note, the line numbers in the next exercise refer to the *unmodified
    version* of the source code from the `T48 – existing processor` folder, prior
    to making any changes. If you want to keep existing copies of files, please move
    them prior to starting the exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, let''s get cracking: there are a few changes to make, so we will start
    with the key task, which compiles the source file:'
  prefs: []
  type: TYPE_NORMAL
- en: For this process, we need a copy of the `gulpfile.js` file from the `T48 – existing
    processor` folder within the code download that accompanies this book; go ahead
    and save it as `gulpfile.js` at the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first change we need to make is to enable `autoprefixer` support in the
    file—you should find it there but commented out on line 5; go ahead and remove
    the comment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On or around line 16, look for this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''re not going to include fallback support, and will take care of `autoprefixer`
    separately, so for now, alter it as shown:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our next change is in the lint-styles task—two changes are required here; first,
    add this block at line 13, below the declaration for Rucksack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, go ahead and replace the entire lint-styles task with this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the rename task, we have three changes to make—first, remove the `cssnano`
    line at line 38; we're splitting the task into two, and this will be handled in
    a new task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This task has a prerequisite, which we''ve renamed—go ahead and change line
    36 to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, alter the rename command as indicated—this is on line 39:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the next task, `sourcemap`, we have one alteration to make—on or around
    line 47, change this line as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ve talked about splitting out the minification task—go ahead and add this
    below the `sourcemap` task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ve made changes to the task names, so we need to update the default task
    and watch facility—look for the string of names in square brackets on or around
    lines 50 and 52\. Replace it with this string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our watch task can also be put on a diet—there is no need to specify all of
    the tasks twice! Instead, go ahead and change the code as indicated—when changes
    are made, the watch facility will run the default task, which already has the
    requisite tasks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''re almost done—there are some additional declarations we need to add at
    the top of our file, to ensure everything works as expected. Below the `stylerules`
    declaration added in step *4*, go ahead and add these extra lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now have an updated Gulp task file—we now need to copy the `style.css` from
    the `src` folder under `T49 – fixing issues in Gulpfile` to the `src` folder at
    the root of our project area. If all is well, we should have something akin to
    this in the `dest` folder of our project area when we compile our file, and a
    file named `style.css.map` in the maps folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fixing our Gulp task file](img/BO5194_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this point, I am sure you will have a few questions about some of the changes
    we've made—the demo highlights a few key points, so it's worth taking time out
    to explore these in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you come across any issues with changing the gulp file, then check out a
    completed version in the `T49 - fixing issues in Gulpfile` folder in the code
    download that accompanies this book.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the changes made
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout the course of our demo, we made a number of changes to our Gulp task
    file—the key thing to note is that none of them are compulsory. Our task file
    worked perfectly well prior to making the changes, so if they aren't compulsory,
    why are we making them?
  prefs: []
  type: TYPE_NORMAL
- en: The answer to this is simple—using a task runner such as Gulp is about automating
    processes so that you arrive at just the content you need. We had that, but the
    task runner produced extra files, didn't compress them as expected, and our Gulp
    file contained tasks that had multiple steps within the same task. The work we
    completed was about adding polish to the process—although our Gulp task file worked,
    we explored how we could improve on it by tweaking some of the processes.
  prefs: []
  type: TYPE_NORMAL
- en: We kicked off with changes to how vendor prefixes were added—our existing task
    completed this as part of compiling using the Rucksack plugin. The Rucksack plugin
    was to provide fallback support—I'm not a fan of working with older browsers,
    so we don't need it. This makes it less beneficial to incorporate vendor prefix
    support from such a large plugin, thus support is not enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is another plugin available for PostCSS that handles vendor prefixes—`doiuse`,
    available at [https://github.com/anandthakker/doiuse](https://github.com/anandthakker/doiuse).
    Just another option to try!
  prefs: []
  type: TYPE_NORMAL
- en: The lint-styles task worked well—the changes we made focus on making the code
    easier to read in the task file. We moved the configuration block to the start
    of the file, and rearranged the format of the task; this means that we should
    not have to change the task, even though we may change the configuration!
  prefs: []
  type: TYPE_NORMAL
- en: Most of the remaining changes focus on splitting multiple roles into single
    tasks, and correcting some anomalies in the output. Our compilation process produced
    a minified file with the right extension, but also minified the original source
    file. We also had two source map files produced in a similar fashion—this is clearly
    not ideal! The changes we made now mean that our original source file is not minified,
    but only one minified file is produced, and that we have a single uncompressed
    style sheet created during the process.
  prefs: []
  type: TYPE_NORMAL
- en: Perfect, we now have a polished compilation process, which is producing the
    right files at the appropriate point; what next? Well, we can now add additional
    functionality to our compilation process. Using a task runner such as Gulp is
    about automating menial tasks, so let's explore what we might achieve in more
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing the output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The PostCSS system will quite happily play nicely with other plugins, be they
    Gulp-based, or using another task runner such as Grunt or Broccoli. This opens
    up a real world of possibilities, limited only by your imagination! There is one
    small but important point, though—it makes it crucial that we not only optimize
    our processor output (as we have done), but also fine tune it to ensure that we've
    added functionality that suits our needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what can we add? Well, here''s a starter for ten: how about compressing
    images? Another common task relates to adding responsive content—we''ve already
    covered this earlier in the book with the `postcss-responsive-type` plugin. We
    could take that further, by adding a task that resizes images automatically to
    different sizes; we can then use these as appropriate in a responsive site.'
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, it is up to you—as time goes by and you get more accustomed to using
    PostCSS, then it is likely that you will find yourself using some plugins more
    than others. The key here, though, is *not* about simply adding in plugins haphazardly—instead,
    we're looking for plugins that we would use regularly in our development workflow,
    and can form the basis of a baseline processor. Any additional functionality that
    is needed to support a particular project can then be added at the appropriate
    time.
  prefs: []
  type: TYPE_NORMAL
- en: A great place to look is the PostCSS plugin directory at [http://postcss.parts](http://postcss.parts)—it's
    worth taking a look to see what is there, and giving them a try! To get us started,
    we're going to work through a few ideas that are likely to be useful additions
    to your processor, beginning with improving support for source maps.
  prefs: []
  type: TYPE_NORMAL
- en: Altering our source map support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we take a look back at our gulp file prior to completing the exercise in
    *Fixing our gulp task file*, we can see it worked, but it suffered from a major
    drawback. The compilation process produced an extra source map which was minified
    by name, but not in reality! This is clearly something we didn''t need—the changes
    made to this task transformed it into what we have now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This is a much better version—it only produces one source map file, which is
    not compressed; compression is not needed. That being said, we can still improve
    on it; it's simply a matter of working through the documentation to really explore
    what is available, and see if it can help us. As a starter, try this for size.
  prefs: []
  type: TYPE_NORMAL
- en: 'There may be instances where we need control over the full URL when compiling
    our code and creating the source map, for example, if we''re transferring from
    a test environment to a production one. In an ideal world, we would use a relative
    file structure to avoid this issue, but for those occasions where this isn''t
    possible, a simple change to our Gulp task will suffice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see the result in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Altering our source map support](img/BO5194_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Ultimately, the requirements for our projects will determine how source map
    support needs to be configured—we may even have to go as far as compiling multiple
    files into one larger master file, if our project requirements dictate.
  prefs: []
  type: TYPE_NORMAL
- en: There's one thing to bear in mind, though—there are plans to include native
    source map support in Gulp 4; this will likely mean that the need for a separate
    plugin will become redundant. It pays to keep abreast of changes, particularly
    if it might affect our processor!
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a completed version of our Gulp file, which includes these changes, take
    a look at the `T50 - adjusting source map settings` folder in the code download
    that accompanies this book.
  prefs: []
  type: TYPE_NORMAL
- en: Let's change tack at this point, changing the source map compilation process
    was a straightforward alteration. We can take it up a notch with another key area—vendor
    prefixes. We've already covered the basics, so we'll take a look at how we can
    improve support.
  prefs: []
  type: TYPE_NORMAL
- en: Taking care of prefixes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Aha, prefixes! The bane of any designer: adding them and keeping them up to
    date can be a real chore.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `autoprefixer` task that has already featured throughout these pages goes
    some way to reducing the burden: it will add the current prefixes and remove any
    that are no longer needed. This is good…but we can do better! This time around,
    though, the emphasis is less on code, and more on the kinds of decisions we need
    to make:'
  prefs: []
  type: TYPE_NORMAL
- en: 'What browser versions do you need to support? The `autoprefixer` plugin already
    uses data from [http://caniuse.com/](http://caniuse.com/), which is sufficient
    for most requirements. However, we can tweak our code to use Browserslist (hosted
    at [https://github.com/ai/browserslist](https://github.com/ai/browserslist)) to
    determine which versions to support. For example, we might add *> 5%* to limit
    support to browsers which have over *5%* of global use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In an ideal world, I would push that as high as 10%, but that might be taking
    it too far!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'From a consistency perspective, we should make it clear that `autoprefixer`
    is `disabled` from within Rucksack—my preference is not to enable it there, as
    it can get confusing as to which plugin is adding prefixes (given that `cssnano`
    can add them too). To correct this, all we need to do is to change this line:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It''s not obligatory, but it at least makes it clear! If we wanted to be real
    purists, we would split this task into two separate ones, so that we''re keeping
    to the one task: one role mantra:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Although `autoprefixer` handles the removal of redundant prefixes, there is
    a useful trick we can use: add support for the `postcss-remove-prefixes` and `postcss-unprefix`
    plugins. The reason for this is simple—we may well not have a level playing field
    when running `autoprefixer`, where some vendor prefixes may be missing from our
    code. Adding these two plugins ensures that our code is as terse as possible prior
    to running `autoprefixer`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If our code is based on using SASS, then there is a good chance that the Compass
    library is being used—it is worth checking to see if this is being used to add
    vendor prefixes. If it is, it may be worth switching to using `autoprefixer`,
    as it is reported to be more efficient at removing code. Don't forget that we
    can compile SASS code within our Gulp file at the same time as running PostCSS
    plugins—we will explore more of this later in this book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It goes without saying that vendor prefixes continually change; with careful
    planning and the right use of plugins, we can be safe in the knowledge that no
    matter what happens, our code will be updated at the next compilation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, moving on: I am sure you are familiar with the ubiquitous pseudo-selector,
    such as hover. This is one area where we need to carefully consider what we might
    incorporate into our baseline processor; PostCSS has a number of plugins that
    can facilitate handling pseudo-selectors in our code. Let''s take a look at this
    in more detail.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding support for pseudo-selectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When designing sites, pseudo-selectors are a key part of providing interaction—they
    can be anything from the simple hover, all the way through to newer elements such
    as :range or :placeholder. We also have to be mindful of support—thankfully most
    elements will work in reasonably recent browsers (yes, even IE8!), but not all
    browsers use the same format of single or double colons when referencing the selector
    in CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help with both styling and providing consistency, PostCSS has a number of
    options we can use; we will explore using the `postcss-pseudo-elements-content`
    plugin in a moment, but for now, let''s take a quick look at some of the options
    to give you a flavor of what is available:'
  prefs: []
  type: TYPE_NORMAL
- en: Do you often find yourself adding the `focus` pseudo-selector to your code?
    If the answer is yes, then the `postcss-focus` plugin will be of interest. Available
    from [https://github.com/postcss/postcss-focus](https://github.com/postcss/postcss-focus),
    this plugin will add a `focus` pseudo-selector automatically, when compiling code.
    The styles will be the same as the `:hover` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We've just talked about adding a `focus` element automatically—the developer
    Jonathan Neal had the idea of creating a polyfill to add support for an `:enter
    pseudo-selector`, which would replace both :hover and :focus within code. When
    compiled, the code would transpile any instance of `:enter` into `:hover` and
    `:active` styles in our code. Head over to [https://github.com/jonathantneal/postcss-pseudo-class-enter](https://github.com/jonathantneal/postcss-pseudo-class-enter)
    for more details on this plugin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This next plugin could be euphemistically described as being one for those who
    have better things to do than write styles for links…. In plain speak, this is
    a real shortcut of a plugin! It adds styles for *all* of the link-related classes
    automatically; browse to [https://github.com/jedmao/postcss-all-link-colors](https://github.com/jedmao/postcss-all-link-colors)
    for an example of how to be really lazy…
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For those of you who regularly have to style form buttons (and face it, who
    doesn''t?), then this next plugin from [https://github.com/andrepolischuk/postcss-pseudo-class-any-button](https://github.com/andrepolischuk/postcss-pseudo-class-any-button)
    will be of interest: it allows us to use the `:any-button` selector (which isn''t
    an official selector). When compiled, it transpiles this into four different types—plain
    button and three inputs (reset, submit, and button).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is just a small selection of the handful of plugins currently available
    in the PostCSS ecosystem, for handling pseudo-selectors. We can talk about using
    them, but in reality, the best way to understand their usefulness is to see them
    in action! With this in mind, let''s take a look at one in action: `postcss-pseudo-elements-content`.
    This little beauty has but one purpose in life: to add a content: attribute to
    appropriate pseudo-selectors, if one is not present in our code.'
  prefs: []
  type: TYPE_NORMAL
- en: Updating our code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few examples of plugins that help handle pseudo-selectors better;
    our projects will dictate whether we should use them on a per case basis, or can
    incorporate some or all of them into our baseline processors.
  prefs: []
  type: TYPE_NORMAL
- en: 'One example that might suit being added to our baseline processor is postcss-pseudo-elements-content,
    which is available from [https://github.com/omgovich/postcss-pseudo-elements-content](https://github.com/omgovich/postcss-pseudo-elements-content).
    This simple plugin parses our code and will add a content: '''' statement to our
    code, when it sees instances of appropriate pseudo-selectors. It doesn''t require
    any configuration, so without further ado, let''s get stuck into using it:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start as always with installing the plugin—for this, fire up a Node.js
    command prompt window and change the working folder to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the prompt, go ahead and run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If all is well, we should see something akin to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating our code](img/BO5194_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From a copy of the code download that accompanies this book, extract a copy
    of `style.css` and `content.html` from the `T51 - adding before and after content`
    folder. Save the style sheet to the `src` folder, and the `content.html` to the
    root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open up a copy of `gulpfile.js` that is at the root of our project area, then
    add this line in at line 11:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A little further down, we need to update our first task to allow for the additional
    plugin; go ahead and alter the line as indicated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the Node.js command prompt, enter `gulp` then press *Enter*—if all is well,
    we should see our style sheet files and source map appear in the `dest` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of this folder to the `css` folder at the root of our project
    areas; if we preview `content.html`, we should see our menu appear:![Updating
    our code](img/BO5194_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a sense, this could be treated as a shortcut plugin (in a similar fashion
    to ones we worked with earlier in the book). The magic happens by adding `–c`
    after our pseudo-selector, as shown in this code extract:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'When compiled, it adds the `content: ''''` attribute, as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating our code](img/B05194_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although it is debatable whether it is worth adding a plugin for something this
    small, it does at least ensure that we keep a consistent code base when compiling
    our style sheet.
  prefs: []
  type: TYPE_NORMAL
- en: The real decision is whether your code has sufficient instances of pseudo-selectors
    to warrant installing these plugins as part of a baseline, or if your projects
    dictate their use on a case-by-case basis.
  prefs: []
  type: TYPE_NORMAL
- en: Let's change tack, most of the improvements we've covered relate to text. Text
    sites can be very unappealing without images—thankfully, there are some plugins
    available to help extend our baseline processor, and better manage images. I feel
    a demo coming on, so let's go explore this in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we were to consider our processor as being solely for compiling PostCSS code,
    then we are selling ourselves short—we've already covered how the use of a task
    runner such as Gulp allows us to add additional tasks such as `autoprefixer` and
    `cssnano`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A great one to consider adding is the ability to compress our images for optimum
    size; would you want to do this manually, no matter how much or how little might
    be saved in size? I thought not. Automating this process means we can get on with
    tasks that add more value to the process. We can achieve this with the `gulp-imagemin`
    plugin, available from [https://github.com/sindresorhus/gulp-imagemin](https://github.com/sindresorhus/gulp-imagemin)—let''s
    take a look at what might be involved in minifying our images:'
  prefs: []
  type: TYPE_NORMAL
- en: Fire up a Node.js command prompt window, then change the working directory to
    our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the prompt, enter both commands, pressing *Enter* after each:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Keep the prompt open—we will use it again shortly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the code download that accompanies this book, go ahead and extract copies
    of the `gulpfile.js` and `package.json` files from the `T52 - optimizing images`
    folder; save these to the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder called `img` at the root of our project folder; this will be
    used as a temporary replacement for the `dest` folder already present.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find some large images—they should be JPEG format, and ideally be several megabytes
    in size; about four to six images will suffice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the Node.js prompt, then enter `gulp` and press *Enter*—the screenshot
    below shows an example I performed with a handful of images:![Dealing with images](img/BO5194_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all is well, we should see our newly compressed images in the `img` folder—this
    is a useful task to have within our processor, so let's go through a few points
    in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Image compression is key to a performant site—users will be turned off if the
    text appears within a couple of seconds, but images take much longer to appear!
    There are a few points to consider, though, with this approach:'
  prefs: []
  type: TYPE_NORMAL
- en: It's not particularly fast—minifying a dozen images each around 2 MB in size
    isn't too bad, but this isn't going to improve if you have to minify large numbers
    of images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ve limited our support to JPEG images—it is possible to optimize SVG and
    PNG images, but this will require changes to our code. If we look closely at the
    code used, we can see this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The latter plugin is installed automatically by `gulp-imagemin`, and would
    need to be changed if working with SVG or PNG images:'
  prefs: []
  type: TYPE_NORMAL
- en: Tests performed locally seem to indicate that the size of reduction isn't as
    good as one might expect; I suspect that this will improve with much larger images.
    It is worth experimenting with changing the compression level—make sure your source
    images are as large as possible!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once our images have been optimized for size, we can then explore further options—here
    are a couple worth considering:'
  prefs: []
  type: TYPE_NORMAL
- en: In the age of development over multiple devices, we need our images to be responsive;
    the gulp-responsive plugin available from [https://github.com/azat-io/postcss-responsive-images](https://github.com/azat-io/postcss-responsive-images)
    can help create these images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We might want to use sprites instead. Thankfully, adding sprite support is
    easy within PostCSS: take a look at the postcss-sprites plugin for this task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may like to consider using an asset manager to resolve URLs—the postcss-assets
    plugin is a perfect candidate for this task. The source and details for using
    are available from [https://github.com/assetsjs/postcss-assets](https://github.com/assetsjs/postcss-assets).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's an important point to note, though—although plugins are available for
    the purpose, it is not worth considering minifying HTML; it is unlikely that you
    will get any significant space back, and the code will become hard to read. It
    is best to reserve minifying files for those external assets that have to be linked
    to your HTML pages, in order to get the most benefit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, let''s move on: before we test our processor, there is one more idea
    that may be worth consideration. Adding an automatic reload capability to our
    code means that we do not need to reload our pages to view updated content. There
    is a heavy reliance on the use of Chrome to make it work, so it won''t be for
    everyone: let''s look at what would be involved in more detail.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding reload capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding a reload capability reduces the amount of time spent manually reloading
    our pages after a code change; the latter can be a real pain, especially when
    working with complex CSS styles!
  prefs: []
  type: TYPE_NORMAL
- en: 'The downside to this is that it only works in Chrome—if this isn''t an issue,
    then these are the steps you would need to follow to make this work:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by extracting copies of the `gulpfile.js` and `package.json` files
    from the `T53 – adding livereload capabilities` folder, from the code download
    that accompanies this book. Save both copies to the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the same `T53 – adding livereload capabilities` folder, extract and save
    a copy of the `style.css` file from the `src` folder within, to the `src` folder
    at the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fire up a Node.js command prompt, then change the working folder to our project
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the prompt, enter `npm install gulp-livereload –save-dev` and press *Enter*—let
    this install.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install the Chrome applet for LiveReload from [http://bit.ly/IKI2MY](http://bit.ly/IKI2MY).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add this line at the end of the `sourcemap` task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remove the semi-colon at the end of line 60.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add this line to our `watch` task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our task file will look like this, with the changes made at lines 61 and 68:![Adding
    reload capabilities](img/BO5194_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, we can test to ensure it works by making a change to our style
    sheet—if all is well, Gulp will kick in and recompile our code; if we have a site
    open in a browser that we're developing, then this would be automatically reloaded
    by the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For those of you interested in using this plugin in more detail, please refer
    to the documentation available on the GitHub site at [https://github.com/vohof/gulp-livereload](https://github.com/vohof/gulp-livereload).
    There is a full version of the code used in this example, within the `T53 - adding
    livereload capabilities` folder in the code download that accompanies this book.
  prefs: []
  type: TYPE_NORMAL
- en: Right, onwards we go! We're almost at the end of our journey through the art
    of the possible; before we move onto testing our processor, I thought I would
    leave you with a few more ideas that you may like to consider using in your processors.
    All of them should install using the same process that we've seen throughout this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Extending our processor further
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the last few pages, we've explored a number of ways to improve our existing
    processor, as well as a few ideas for extending functionality. Although we can
    always keep to PostCSS plugins, we run the risk of limiting the "art of the possible",
    or what is available for us to use.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, we might want to go a little further afield—creating a processor
    isn't just about the nitty-gritty of compiling code, but also about our working
    environment and the processes required to support it (at least in part). To prove
    this, we're going to explore installing the `postcss-stats` plugin as an example
    of how we can extend both our plugin and working environment.
  prefs: []
  type: TYPE_NORMAL
- en: This plugin helps provide useful statistics about each project as it is compiled—it's
    based on the CSS Stats system, and is available online at [http://www.cssstats.com](http://www.cssstats.com).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Throughout the demo, you may see a few issues with deprecated warnings—at the
    time of writing, the plugin needs a little polishing/updating. Don''t worry though:
    the plugin will still work fine for the purposes of our demo.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The source for this plugin is available on GitHub at [https://github.com/cssstats/postcss-cssstats](https://github.com/cssstats/postcss-cssstats),
    and can be installed using the usual route. Let''s dive in and take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by firing up a Node.js command prompt session, then changing the
    working directory to the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to install the plugin, so in the prompt, enter this command and press
    *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Keep this open—we will need it later in the exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to update our `gulpfile.js` and `package.json` files—go ahead
    and extract copies of both files from the `T54 - using cssstats` folder in the
    code download that accompanies this book. Save both files to the root of our project
    area:'
  prefs: []
  type: TYPE_NORMAL
- en: With our files in place, we can now test that it works—go ahead and save a copy
    of `style.css` from the same folder into the `src` folder of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Revert to the Node.js command prompt we had open earlier—in the prompt, enter
    `gulp`, and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PostCSS will compile our code—if all is well, we should see files appear in
    the now familiar `dest` folder…and we should also see something akin to this screenshot:![Extending
    our processor further](img/BO5194_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If I were a betting man (I'm not, but assume I am for this)—I would bet even
    odds that you're probably thinking "What on earth does all of that text mean?"
    Well, let me shed some light on what it all means.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell, we''ve installed what is effectively a reporting system—this
    details a bunch of statistics about our code. It contains details about all kinds
    of information, including the number of selectors, colors, the level of CSS specificity,
    declarations, and so on. It''s an easy way to get information about our code,
    as a means of documenting it for later use. The reason it is so easy to get the
    information lies in how it is configured—take a look at the `gulpfile.js` file;
    we will add a call to the plugin at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then modify the styles single task, by adding this line near the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The trouble is, whilst it might be easy to get the information, it''s not so
    easy to store it! We can absolutely improve on it; instead of getting the information
    via our processor, we can go directly to the source. Let''s explore how to make
    this happen:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by firing up a Node.js command prompt, then changing the working
    folder to the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the prompt, go ahead and enter `npm install gulp-stylestats --save-dev`,
    then press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now need to edit the `gulpfile.js` and `package.json` files we used in the
    previous exercise, so open the `gulpfile.js` file in a text editor, and add these
    lines immediately below the closing bracket of the `sourcemap` task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to update the default task—alter it as indicated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Revert to the Node.js command prompt, then enter `gulp` and press *Enter*—assuming
    we still have the same `style.css` file in the `src` folder, we should see this
    appear in the `dest` folder at the root of our project area:![Extending our processor
    further](img/BO5194_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Whilst we clearly need to alter the parameters of our Gulp file to prevent it
    producing minified JSON files, we can at least see the result of the (uncompressed)
    JSON file. Go ahead and open it up—it will look something like this:![Extending
    our processor further](img/BO5194_10_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Although we're still only seeing code, we can now parse the content at will;
    we could, for instance, use jQuery to explore the contents and render it on screen
    using an appropriate style and format. I am sure you will agree though that this
    is a much easier way to view (and store) the information! The plugin needs minimal
    configuration to get started. We can use it to view any standard CSS file, once
    it has been through the compilation process.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a number of options we can use with the `gulp-stylestats` plugin—for
    details, take a look at `https://github.com/t32k/stylestats`.
  prefs: []
  type: TYPE_NORMAL
- en: Right, we now have a completed processor; hopefully, this will also include
    a style guide that is running, using one of the plugins we've just discussed in
    the previous exercise. It's time we moved on—there is one task we should complete,
    though, before we embark on the next stage of our journey. It's time we put our
    processor to the test…
  prefs: []
  type: TYPE_NORMAL
- en: Testing the final pre-processor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we've explored a number of different plugins and concepts
    to help construct a processor; over the last few pages, we've brought together
    some of those concepts as the final version of our processor—at least one we can
    start using in anger.
  prefs: []
  type: TYPE_NORMAL
- en: There is one key step left to complete—we've compiled code for simple exercises,
    this works well, but doesn't really represent the kind of processes we might go
    through as developers! For this, we need to construct a real-world example, and
    put our processor through its paces.
  prefs: []
  type: TYPE_NORMAL
- en: 'As luck would have it, there is an example web page we can use from the code
    download that accompanies this book—let''s take a look at putting its style sheet
    code through our processor. We''ll begin by running the normal tasks we''ve done
    before, but will add a selection of plugins to make for a more realistic example:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by extracting a copy of the `T55 - testing our processor` folder
    from the code download that accompanies this book; go ahead and save it to the
    root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `gulpfile.js` and `package.json` files from within this sub-folder
    to the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fire up a Node.js command prompt, then change the working folder to our project
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the prompt, go ahead and enter these three lines, pressing *Enter* after
    each:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy the `site.css` file from within the `css – completed version` folder under
    `T55 – testing our processor`, to the `src` folder at the root of our project
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Revert to the Node.js session, then enter `gulp` at the prompt and press *Enter*—wait
    for it to complete compiling.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When compilation has finished, copy the contents of the `dest` folder to the
    `css` folder within `T55 – testing our processor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try previewing the results of the compiled file—if all is well, we should see
    something akin to this screenshot:![Testing the final pre-processor](img/BO5194_10_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try resizing the browser window, or enabling Responsive Design mode in your
    browser (if supported)—we should see that content automatically flows or resizes,
    according to the size you set for the browser window. Overall, a successful result!
  prefs: []
  type: TYPE_NORMAL
- en: The question is—what happened here? If we take a look at our code, the sharp-eyed
    should spot the addition of three plugins, plus a lot more code in the compiled
    version; let's take a moment to digest the results of our exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Digesting the results of our exercise
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we look through our Gulp task file carefully, there should not be much in
    there that comes as a surprise—many of the tasks used are ones we have used on
    many occasions throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key here, though, is that whilst we can run the standard processor that
    we''ve already used before, it''s unlikely to suit all occasions. It''s more likely
    that we can use it as our base (as stated earlier), then add any extra plugins
    as needed. The great thing about this is that most of the configuration work is
    done—it keeps a consistent approach to our work. All that remains is to install
    any plugins that we *don''t* already have in place—we of course have most of them,
    but need to install three additional ones, as highlighted here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'These have to be accompanied with the relevant calls at the top of our Gulp
    task file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In turn, these plugins are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rucksack**: This is to handle responsive/media queries, fallback colors from
    rgba to hex, and implement `@font-face`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pixrem**: Available at [https://github.com/robwierzbowski/node-pixrem](https://github.com/robwierzbowski/node-pixrem),
    this takes care of providing a fallback mechanism for the rem unit values used
    throughout our style sheet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nesting**: Downloadable from [https://github.com/jonathantneal/postcss-nesting](https://github.com/jonathantneal/postcss-nesting)
    (via Node), this covers an instance of nesting used in our code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shorthand Color**: In a couple of instances, we combined `background-color`
    and `color` attributes in a shorthand form that is later transpiled by the plugin.
    You can see more about this plugin at [https://github.com/jonathantneal/postcss-short-color](https://github.com/jonathantneal/postcss-short-color).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can of course add others, and continue converting our code—there are other
    instances where Nesting can be applied, such as in the rules that control styling
    for our navigation. The key here, though, is that success is measured in how much
    we have to change our processor's *default* setup—in this instance, we didn't
    have to change it at all! We of course added extra plugins that required a change
    to one line of code in the processor, but none of the other tasks required any
    changes at all.
  prefs: []
  type: TYPE_NORMAL
- en: It's at this stage that we have effectively completed the journey to create
    our processor—well, strictly speaking, our journey should always be considered
    without end; this will help ensure our tool remains up to date. This aside, though,
    there are some useful tips we can use when creating our processor, so let's take
    a moment to cover these in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with some hints and tips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The time has come when it is over to you as developers to start creating your
    own processor! It may seem a daunting task at first, depending on the size and
    nature of your project; I''ve listed a few tips to help you over the initial hurdle
    of planning and creating your processor:'
  prefs: []
  type: TYPE_NORMAL
- en: Every processor is unique—do not be afraid to experiment. The processor of course
    must meet your requirements, but there are several ways to crack a nut, so if
    the first plugin you try doesn't work, then move on and try another.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't fall into the trap that many do, and consider PostCSS as either a pre-processor
    or a post-processor; it is neither and yet it is also both. The library itself
    does nothing; the magic lies in the plugins you add, which determine how it performs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start small—PostCSS was designed to be modular, so if all you need to begin
    with is a facility to add vendor prefixes, then fine. Over time, you can easily
    add extra plugins to your processor; it does not matter if this is adding to existing
    functionality, or replacing an old process that is no longer efficient or works.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Think iteratively—don't even try to convert something as large as the style
    sheet for WordPress in one go! You will soon lose patience and momentum, and potentially
    abandon a project before you get the benefits of using PostCSS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The only time a processor should be retired is if there is a fundamental change
    in the architecture of your project, which makes it incompatible with PostCSS.
    The versatility of PostCSS is such that this isn't likely to happen—you should
    always review the functionality periodically to ensure you are getting the best
    out of your processor. Plugins change, are deprecated, or new ones are added—a
    check will ensure your solution still works as efficiently as possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any processor should not be limited to PostCSS plugins only—even though this
    is what we've focused on, there are thousands of other plugins available for your
    task runner of choice, which will likely work with PostCSS. The key here is that
    if it helps automate a mundane task that saves you time as a developer, then consideration
    should be given to whether it can be included in your processor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I personally take the view that if it can be automated reliably, then include
    a task for it—we live in an age where time is precious; there is no value in manually
    resizing images, for example, if it can be done automatically!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although we've talked about some of the tasks we can complete using a task runner,
    we must not forget the folder structure too. There is nothing worse than compiling
    files for different environments, for example, if they land up in badly-organized
    folders! Gulp can automate a multitude of tasks, so the fewer changes we have
    to do, or the fewer files we have to copy, the better.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hopefully, they are a few tips to get you started! The great thing about PostCSS
    is that no two processors will be the same; whilst some may count that as a shortcoming,
    it should be noted that there is a wealth of possibilities out there to be explored,
    and that you can make your processor as simple or as complex as your project requirements
    dictate.
  prefs: []
  type: TYPE_NORMAL
- en: Before we bow out from our journey through building a custom processor, there
    is something we should consider. Our processor was constructed entirely using
    PostCSS plugins; in reality, our processor is more likely to go through a transitional
    phase, where we convert from the likes of SASS or less to using PostCSS.
  prefs: []
  type: TYPE_NORMAL
- en: To help with this process, we can always make use of a library such as CSStyle—this
    little interesting gem can work with either SASS or PostCSS, and could be a useful
    addition to the transition process. Over the course of the next two chapters,
    we will learn how to create custom syntaxes and explore some of the ways we can
    process both PostCSS and SASS content through the same process. As a taster for
    what is coming, let's take a quick tour through CSSStyle and see how it works
    in action.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the CSStyle library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cast your mind back to [Chapter 3](ch03.html "Chapter 3. Nesting Rules"), *Nesting
    Rules*, where we explored the concepts behind BEM, or the Block, Element, Modifier
    way of writing CSS. The key benefit of using this method is to help reduce CSS
    specificity, or where we might otherwise end up using something such as the following
    to style a simple button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, it''s a little contrived, but you get the idea: the level of specificity
    makes it awkward to manage and potentially reuse in future projects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We took a look at BEM as a possible alternative—it has the benefit of reducing
    styles down to one or two classes, but can be awkward to remember which conventions
    to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, so how can we get around this? Well, here''s an option we can consider
    using: the CSStyle library. There are several reasons why this can help us—let''s
    take a look in more detail.'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the benefits of using CSStyle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The key behind CSStyle (available from [http://csstyle.io/](http://csstyle.io/))
    is that it is made up of modular blocks, in a similar fashion to BEM. The difference,
    though, is that instead of having to remember a set of conventions that aren't
    the most intuitive, we can use a simpler set to create cleaner code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The real beauty, though, is that we can use either SASS or PostCSS to create
    our site—we can begin with SASS, but we can also begin to transition over to using
    PostCSS with minimal changes. Let''s put this into practice, and explore a quick
    demo to see how easy it is to make these changes—before we do so, take a look
    at [http://codepen.io/alibby251/pen/pgmqjJ](http://codepen.io/alibby251/pen/pgmqjJ);
    this is a Pen that illustrates what we''re going to create:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the benefits of using CSStyle](img/BO5194_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It won''t win any style awards, but the purpose of this demo is to show you
    the *process* and not necessarily produce anything that is stunning! With that
    in mind, let''s make a start:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll begin by extracting a copy of the `T56 - using csstyle with sass` folder
    from the code download that accompanies this book; save the folder to the root
    of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of the `src` folder within `T56 - using csstyle with sass`
    to the `src` folder at the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go ahead and replace the `gulpfile.js` and `package.json` files at the root
    of our project area with copies from within the `T56 - using csstyle with sass`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fire up a Node.js command prompt session, then change the working folder to
    the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the prompt, enter gulp and press *Enter*—if all is well, we should see a
    compiled `style.css` file appear in the `dest` folder in our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of the `dest` folder back to the `css` folder within the `T56
    - using csstyle with sass` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, try previewing the results in a browser. If all is well, we will
    see the three buttons appear, just as they show in the Pen we mentioned at the
    start of this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'All looks good…we have a working demo, with a compiled style sheet—but hold
    on…in *SASS*? Yes, if you look carefully, the demo was indeed set to use SASS,
    but with good reason: we''re going to see how easy it is to change to using PostCSS
    *without* making material changes to our style sheet or our compilation process.
    Let''s make a start:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `gulpfile.js` that is at the root of our project area, comment out line
    5, and uncomment lines 6 and 7; this switches our task file from using SASS to
    PostCSS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the `[sass]` task `[style]`, on line 9.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On line 10, the `gulp.src` call is looking for SASS files; change it to `src/*.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace line 11 with this line: `.pipe(postcss([nested, csstyle]))`—this removes
    the dependency on SASS and switches to using PostCSS.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On line 15, our default task will call the `[sass]` task; change `[sass]` to
    `[style]`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the watch task on line 17 to monitor CSS files, and not SASS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go ahead and open up the SASS style sheet in the `src` folder at the root of
    our project area—rename the file as `style.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `style.css`, go ahead and remove the `@import 'csstyle'` line at the top
    of our style sheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do a search and replace for `@include`—remove all instances in our style sheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it for our demo, sorry to disappoint if you were expecting more! All
    that remains is to replace the `gulpfile.js` and `package.json` files at the root
    of the project area with copies from the `T57 –` `using csstyle with postcss`
    folder, and compile as normal.
  prefs: []
  type: TYPE_NORMAL
- en: Dissecting our demo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Making the transition from SASS to PostCSS can be as easy or as complex as we
    make it. Using the CSStyle library can go a long way to easing the transition
    away from existing processors such as SASS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although our demo was just a quick whistle-stop tour through using CSStyle
    (and we will revisit it in [Chapter 12](ch12.html "Chapter 12. Mixing Preprocessors"),
    *Mixing Preprocessors*), it nevertheless illustrates a few important points of
    interest:'
  prefs: []
  type: TYPE_NORMAL
- en: The library uses the concept of components, options, parts, and tweaks to create
    the base components, pass styling to override base rules, add extra elements (such
    as icons), or tweak code. Careful design means that we can reduce or remove the
    need to alter our HTML as part of the transition to using PostCSS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is perfectly possible to compile the SASS version of our demo using a standard
    SASS compiler; the reason for choosing to use a task runner version (in this case
    for Gulp) means that we can centralize the compilation process in one task file,
    and remove the need to use separate compilers in our process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When planning the design or transition of our site to use PostCSS, it pays to
    choose plugins carefully within PostCSS; this will determine how easy or complex
    it will be to make the changes in our code and processor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our demo focused on the core compilation process, and didn't include the extra
    tasks we used in the past, such as adding source maps. This was purely for clarity—there
    is no reason why we can't add the remaining tasks we've used before, once we've
    confirmed our compilation process works as expected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ultimately though, the use of this library is about helping to ease the process
    of making the transition to using PostCSS. There are different ways to approach
    this—using CSSStyle means that we have to completely redesign our HTML, but can
    easily alter the processor with minimal fuss. The flip side to this is that we
    can use PostCSS plugins that mimic SASS coding standards, or create our own custom
    syntax—we will explore these concepts in the next two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating our own processor can be a satisfying experience—we have total control
    over what elements should be included, and can add or remove elements at any time.
    Throughout the course of this book, we've explored a number of elements that make
    up what might be a typical processor; in this chapter, we pulled together all
    of these elements to create our final article. Let's take a moment to review what
    we have learnt.
  prefs: []
  type: TYPE_NORMAL
- en: We began with a look at some of the key elements of our processor, which we've
    already used previously, but have not really understood in detail how it all fits
    together. With this in mind, we moved on to examine some of the issues with our
    processor, before working out ways of correcting those issues and altering our
    code.
  prefs: []
  type: TYPE_NORMAL
- en: With our updated processor in place, we then took a look at ways of optimizing
    our output by altering existing functionality, or including new options that may
    or may not make up a baseline processor or one customized for a specific project.
    We then took a look at extending our functionality, that includes options we would
    not normally consider, but will complement our work processes perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: We then rounded out our chapter with a quick test of our processor on a sample
    site, before exploring some of the hints and tips that will help us when creating
    our processors. The final step in our journey took a quick look at the CSSStyle
    library, as a precursor to creating custom syntaxes for PostCSS, which we will
    explore in the next chapter.
  prefs: []
  type: TYPE_NORMAL
