- en: Chapter 1. A Simple Task List
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。简单的任务列表
- en: 'At its core, most programming tasks fall into three categories: data display,
    data entry, and data storage. We will start our first project with the goal of
    covering how Sencha Touch handles each of these three basic categories. To do
    this, we will create a common programming application, the to-do list, or task
    list.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在其核心，大多数编程任务可以分为三类：数据展示、数据输入和数据存储。我们的第一个项目将以涵盖 Sencha Touch 如何处理这三个基本类别为目标。为此，我们将创建一个常见的编程应用，待办事项列表或任务列表。
- en: In this application, we will use the local storage available in HTML5 to store
    tasks including a name, description, creation date, completing date, and priority.
    We will then create a task list for displaying the current tasks as well as our
    completed tasks. We will discuss ways to test your display and to manage errors.
    We will then create the forms for entering in new tasks, editing existing tasks,
    and marking a task as complete.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，我们将使用 HTML5 中可用的本地存储来存储任务，包括名称、描述、创建日期、完成日期和优先级。然后我们将创建一个任务列表来显示当前任务以及我们的已完成任务。我们将讨论测试显示和管理错误的方法。然后我们将创建输入新任务、编辑现有任务和标记任务完成的表单。
- en: Finally, we will explore some of the possible additional features for this type
    of application in our Extra Credit section.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们的加分部分，我们将探讨一些此类应用可能的其他附加功能。
- en: A brief overview of Sencha Architect
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sencha Architect 的简要概述
- en: 'Sencha Architect is a cross-platform visual development tool for Sencha Touch
    and Ext JS. Sencha Architect is available for Mac, Windows, and Linux, and it
    can be downloaded at the following link:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Architect 是一个跨平台的视觉开发工具，用于 Sencha Touch 和 Ext JS。Sencha Architect 可用于
    Mac、Windows 和 Linux，可以通过以下链接下载：
- en: '[http://www.sencha.com/products/architect](http://www.sencha.com/products/architect)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.sencha.com/products/architect](http://www.sencha.com/products/architect)'
- en: For most of the chapters in this book we will be using a combination of Sencha
    Architect and standard coding to create our projects. This will give you an idea
    of some of the powerful advantages of the designer, while not hiding any of the
    actual code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的大部分章节中，我们将结合使用 Sencha Architect 和标准编码来创建我们的项目。这将让你了解设计师的一些强大优势，同时不会隐藏任何实际代码。
- en: This is actually one of the key benefits of Sencha Architect; while it allows
    you to rapidly create interfaces and test them, behind the scenes the designer
    is generating standard JavaScript files, which you can edit with any text editor.
    This advantage allows you to quickly assemble the basic elements of your application,
    while maintaining the ability to tweak the code by hand as needed. We will cover
    this a bit more later on, but for now let's take a look at how Sencha Architect
    is set up.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是 Sencha Architect 的关键优势之一；虽然它允许你快速创建界面并测试它们，但在幕后，设计师正在生成标准的 JavaScript
    文件，你可以使用任何文本编辑器来编辑这些文件。这种优势允许你快速组装应用程序的基本元素，同时保持根据需要手动调整代码的能力。我们将在稍后对此进行更多介绍，但现在让我们看看
    Sencha Architect 的设置。
- en: 'When you first launch Sencha Architect, you are presented with a dialog box
    where you can choose to work on a new Ext JS project or a new Sencha Touch project,
    or you can choose from a list of existing projects:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次启动 Sencha Architect 时，你会看到一个对话框，你可以选择开始一个新的 Ext JS 项目或一个新的 Sencha Touch
    项目，或者你可以从现有项目列表中选择：
- en: '![A brief overview of Sencha Architect](img/8901OS_01_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![Sencha Architect 的简要概述](img/8901OS_01_01.jpg)'
- en: Since we are concerned with Sencha Touch in this book, you should select a new
    Sencha Touch 2.1 project.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在这本书中关注 Sencha Touch，你应该选择一个新的 Sencha Touch 2.1 项目。
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**The difference between Ext JS and Sencha Touch**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ext JS 和 Sencha Touch 之间的区别**'
- en: Both ExtJ S and Sencha Touch are products created by the company Sencha Inc.
    Where Sencha Touch is used to develop mobile applications for various devices,
    Ext JS is used to create web applications for desktop browsers such as Firefox,
    Chrome, or Internet Explorer. For this book, we'll stick with Sencha Touch.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: ExtJS 和 Sencha Touch 都是 Sencha Inc. 公司的产品。Sencha Touch 用于为各种设备开发移动应用程序，而 Ext
    JS 用于创建桌面浏览器（如 Firefox、Chrome 或 Internet Explorer）的 Web 应用程序。对于这本书，我们将坚持使用 Sencha
    Touch。
- en: Once you have chosen your new project type, the Sencha Architect window will
    open. This window contains a visual display of the application and allows us to
    modify the application using drag-and-drop as well as directly entering code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择了你的新项目类型，Sencha Architect 窗口将打开。这个窗口包含应用程序的视觉展示，并允许我们通过拖放以及直接输入代码来修改应用程序。
- en: '![A brief overview of Sencha Architect](img/8901OS_01_02_New.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Sencha Architect的简要概述](img/8901OS_01_02_New.jpg)'
- en: The Toolbox
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具箱
- en: The **Toolbox** section of Sencha Architect is where you will find all of the
    components offered by Sencha Touch. These components are listed in alphabetical
    order on the right side of the **Toolbox** section, while the basic types of components
    are listed on the left side. Clicking on one of these component types will limit
    the list to that particular type.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Architect的**工具箱**部分是您将找到所有由Sencha Touch提供的组件的地方。这些组件按字母顺序列在**工具箱**部分的右侧，而基本组件类型则列在左侧。点击这些组件类型之一将限制列表只显示该特定类型的组件。
- en: '![The Toolbox](img/8901OS_01_03.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![工具箱](img/8901OS_01_03.jpg)'
- en: 'The following types are provided by default:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 默认提供的类型如下：
- en: '**Behaviors**: It provides empty containers for functions and controllers'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行为**: 它为函数和控制器提供空容器'
- en: '**Charts**: It is a collection of graphs and charts that can pull data directly
    from a store'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图表**: 它是一组可以直接从存储库中提取数据的图表和图形'
- en: '**Containers**: It contains elements such as panels, tab panels, carousels,
    and field sets'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器**: 它包含面板、选项卡面板、轮播图和字段集等元素'
- en: '**Data**: It contains data-driven pieces such as stores, proxies, readers,
    writers, and filters'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据**: 它包含数据驱动的组件，如存储库、代理、读取器、写入器和过滤器'
- en: '**Forms**: It contains basic form elements such as text fields, radio buttons,
    select fields, and buttons'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表单**: 它包含基本表单元素，如文本字段、单选按钮、选择字段和按钮'
- en: '**Models**: It includes the basic data model, validations, fields, proxies,
    readers, and writers'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**: 它包括基本数据模型、验证、字段、代理、读取器和写入器'
- en: '**Resources**: It allows you to add external files for JavaScript and CSS,
    as well as packaging files for compiled applications'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源**: 它允许您添加JavaScript和CSS的外部文件，以及编译应用的打包文件'
- en: '**Trees**: Trees are the store types needed for nested tree components'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**树**: 树是嵌套树组件所需的存储类型'
- en: '**Views**: It contains all of the basic viewable components in Sencha Touch
    such as containers, form fields, media, pickers, toolbars, lists, and buttons'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**: 它包含Sencha Touch中所有基本可查看组件，如容器、表单字段、媒体、选择器、工具栏、列表和按钮'
- en: There is also the **Everything** option to show all the types in the list.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有**所有内容**选项以显示列表中的所有类型。
- en: You can also use the **+** button in the **CUSTOM** section to add your own
    custom types for limiting the list. This is very helpful for frequently used components,
    or simply for customizing the lists to fit your own personal habits.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在**自定义**部分使用**+**按钮添加您自己的自定义类型以限制列表。这对于常用组件或简单地根据您自己的个人习惯定制列表非常有帮助。
- en: Once a custom type is created, you can just drag components over from the list
    on the right, and drop them into your custom type.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义类型后，您只需从右侧的列表中拖动组件，并将它们拖放到自定义类型中。
- en: Components can also be searched directly by name using the **Filter...** field
    at the top of the toolbox area.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用工具箱区域顶部的**过滤...**字段直接按名称搜索组件。
- en: The help section
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 帮助部分
- en: When any component is selected from the toolbox the help section directly below
    it will display information for the component.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当从工具箱中选择任何组件时，直接位于其下方的帮助部分将显示有关该组件的信息。
- en: There is also a blue link at the bottom of the help area that says **See Class
    Documentation**. Clicking on this link will take you to the Sencha website documentation
    for the specific component that you have selected. This documentation is an invaluable
    source of information and you should familiarize yourself with it as quickly as
    possible.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在帮助区域的底部还有一个蓝色链接，上面写着**查看类文档**。点击此链接将带您到Sencha网站上所选特定组件的文档。这些文档是信息宝贵的来源，您应尽快熟悉它们。
- en: The design area
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计区域
- en: The design area is where we will begin creating our first application. By default,
    a Sencha Touch application starts out with an iPhone 320 x 480 layout. This layout
    can be changed to be displayed as an iPad, Nexus S, or Kindle Fire display size.
    This allows you to look at your design under multiple devices. You can also set
    the orientation of the device and zoom in and out of the design view area.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 设计区域是我们开始创建第一个应用程序的地方。默认情况下，Sencha Touch应用程序以iPhone 320 x 480布局开始。此布局可以更改以显示iPad、Nexus
    S或Kindle Fire显示尺寸。这允许您在多个设备下查看您的设计。您还可以设置设备的方向并放大或缩小设计视图区域。
- en: '![The design area](img/8901OS_01_04_New.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![设计区域](img/8901OS_01_04_New.jpg)'
- en: The design area also offers an option to view and work with the code behind
    the design. This is a great learning tool if you're just getting into mobile programming.
    By switching between the **Design** and **Code** view, you can examine complex
    layouts and see exactly how the JavaScript code is used to create them.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 设计区域还提供了一个查看和操作设计背后代码的选项。如果你刚开始接触移动编程，这是一个非常好的学习工具。通过在**设计**和**代码**视图之间切换，你可以检查复杂的布局，并确切地看到JavaScript代码是如何用来创建它们的。
- en: The Project Inspector area
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目检查器区域
- en: The Project Inspector area provides an alternative view to your project's code.
    As you drag components onto the design area they will also appear in **Project
    Inspector**. The **Project Inspection** area will display these components as
    a hierarchical list. This is often very helpful in seeing which components are
    nested inside of other components.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 项目检查器区域为你提供了项目代码的另一种视图。当你将组件拖动到设计区域时，它们也会出现在**项目检查器**中。**项目检查器**区域将以分层列表的形式显示这些组件。这通常非常有帮助，可以查看哪些组件嵌套在其他组件内部。
- en: '![The Project Inspector area](img/8901OS_01_05.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![项目检查器区域](img/8901OS_01_05.jpg)'
- en: Components can also be dragged from the **Toolbox** list into **Project Inspector**.
    It is often easier to manage certain components by dropping them into **Project
    Inspector**, rather than the design area. This can ensure that you correctly position
    the component within the required container.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 组件也可以从**工具箱**列表拖动到**项目检查器**中。通过将组件拖放到**项目检查器**中，而不是设计区域，通常更容易管理某些组件。这可以确保你正确地将组件放置在所需的容器中。
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The **Resources** section is a new addition in Version 2.1, and it allows you
    to add external files to your project. If you have an older Version 2.0 Sencha
    Touch project, you can right-click on **Library** and select **Upgrade** to change
    the project to a newer Sencha Touch 2.1 project.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**资源**部分是2.1版本中的新增功能，它允许你将外部文件添加到你的项目中。如果你有一个较旧的2.0版本Sencha Touch项目，你可以右键点击**库**并选择**升级**，将项目更改为较新的Sencha
    Touch 2.1项目。'
- en: The Config area
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置区域
- en: The **Config** area will display all the configuration options for any component
    selected in the design area or in **Project Inspector**. All of the typical configuration
    options, such as height, width, layout, ID, padding, margin, events, and functions
    can be accessed from the **Config** area.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**配置**区域将显示设计区域或**项目检查器**中选定的任何组件的所有配置选项。所有典型的配置选项，如高度、宽度、布局、ID、填充、边距、事件和函数，都可以从**配置**区域访问。'
- en: '![The Config area](img/8901OS_6.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![配置区域](img/8901OS_6.jpg)'
- en: The configuration name is listed on the left and the value is on the right.
    Clicking on the value will allow you to edit it. You can also click on the **+**
    next to certain sections such as **Functions** and **Events** to add new items
    to **Config**.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 配置名称列在左侧，值在右侧。点击值将允许你编辑它。你还可以点击某些部分旁边的**+**，例如**函数**和**事件**，向**配置**中添加新项目。
- en: Getting started with the task list
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用任务列表
- en: To see how all of these pieces work together to create an application, let's
    start by creating our data store for the Task Manager application. Save the new
    file you have opened as `TaskList` and let's get to work on adding some components.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解所有这些组件如何协同工作以创建一个应用程序，让我们首先为任务管理器应用程序创建数据存储。将你打开的新文件保存为`TaskList`，然后开始添加一些组件。
- en: Creating the data store
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数据存储
- en: To add a component to the project, we need to drag the component from the toolbox
    and drop it on the project or onto the proper section of the project inspector.
    For our first component, let's choose a plain data store.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要将组件添加到项目中，我们需要从工具箱中拖动组件，并将其放置在项目或项目检查器的适当部分。对于我们的第一个组件，让我们选择一个普通的数据存储。
- en: 'From **Toolbox**, select **Data**, and then click on **Store** and drag it
    onto our iPhone in the design area. You should now see a store called **MyStore**
    appear in the **Property** **Inspector** under the **Stores** list:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从**工具箱**中选择**数据**，然后点击**存储**并将其拖动到设计区域中的我们的iPhone上。你现在应该能在**属性****检查器**下的**存储**列表中看到一个名为**MyStore**的存储：
- en: '![Creating the data store](img/8901OS_01_07.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![创建数据存储](img/8901OS_01_07.jpg)'
- en: You will also notice that there is a red warning icon next to our store. This
    tells us that our store is missing a few of its required components. In this case,
    the store needs a proxy to control how the data is sent and received and it needs
    a model to tell it what data to expect.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你也会注意到，在我们的商店旁边有一个红色的警告图标。这告诉我们我们的商店缺少一些必需的组件。在这种情况下，商店需要一个代理来控制数据的发送和接收，并且需要一个模型来告诉它期望哪些数据。
- en: From the **Toolbox** list, select a **LocalStorage Proxy** object and drag it
    over onto our store.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从**工具箱**列表中选择**LocalStorage Proxy**对象，并将其拖动到我们的商店上。
- en: You will probably notice that some components can only be placed within other
    components. For example, when you drag the proxy over, you can't just drop it
    into the iPhone diagram like we did before. A proxy component will only exist
    as part of a data store. This means that you have to drop a proxy component onto
    a data store in **Property Inspector** in order for it to correctly add itself
    to the store.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，某些组件只能放置在其他组件内部。例如，当你拖动代理时，你不能像之前那样直接将其拖放到iPhone图表中。代理组件将仅作为数据存储的一部分存在。这意味着你必须将代理组件拖放到**属性检查器**中的数据存储上，以便它能够正确地添加到商店中。
- en: Once you have dropped the proxy onto the store, we need to add a model, and
    link it to our store.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将代理拖放到商店中，我们需要添加一个模型，并将其链接到我们的商店。
- en: Adding a Model, Fields, and Field Types
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加模型、字段和字段类型
- en: In the **Data** section of our **Toolbox**, scroll up to find the listing for
    **Model**. Drag the **Model** object over to the **Models** section of our **Project
    Inspector**. This will create a new model called **MyModel**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的**工具箱**的**数据**部分中，向上滚动以找到**模型**的列表。将**模型**对象拖动到我们的**项目检查器**的**模型**部分。这将创建一个名为**MyModel**的新模型。
- en: Select **MyModel** in **Project Inspector** and look at the **Config** section.
    The first thing we probably want to change here is the name. Click on the value
    listed for **userClassName**, change **MyModel** to `Task` and press *Enter* on
    your keyboard. The model should now be listed as **Task** in both **Config** and
    **Project Inspector**.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在**项目检查器**中，选择**MyModel**，查看**配置**部分。我们可能首先想要更改的是名称。点击列出的**userClassName**的值，将**MyModel**更改为`Task`，然后按键盘上的*Enter*键。模型现在应在**配置**和**项目检查器**中均列为准**Task**。
- en: Next, we need to add some fields to our model. With the **Task** model selected,
    you should see a listing for **Fields** in the **Config** area. Click on the **+**
    button next to **Fields** and enter `id` into the text area that appears. Click
    on **Finish** on the screen or press *Enter* on your keyboard.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要向我们的模型添加一些字段。选择**Task**模型后，你应该在**配置**区域中看到**字段**的列表。点击**字段**旁边的**+**按钮，在出现的文本区域中输入`id`。在屏幕上点击**完成**或按键盘上的*Enter*键。
- en: 'Your **Config** area should now look something like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你的**配置**区域现在应该看起来像这样：
- en: '![Adding a Model, Fields, and Field Types](img/8901OS_01_08.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![添加模型、字段和字段类型](img/8901OS_01_08.jpg)'
- en: 'Repeat the previous steps to add the following fields to the task model:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 重复之前的步骤，将以下字段添加到任务模型中：
- en: '**name**'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**'
- en: '**description**'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**'
- en: '**create**'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建**'
- en: '**completed**'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完成**'
- en: '**priority**'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优先级**'
- en: '**isCompleted**'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**是否完成**'
- en: Now that you have all of your fields, we need to define the data types for each
    field.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经拥有了所有字段，我们需要为每个字段定义数据类型。
- en: In **Project Inspector**, click on the field called **id**. This will open the
    configuration for that field and you should see that there is currently no value
    listed for **type**. Click on the value next to **type.** A drop-down menu will
    appear and you can select **int** from the list.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在**项目检查器**中，点击名为**id**的字段。这将打开该字段的配置，你应该看到目前没有为**类型**列出任何值。点击**类型**旁边的值。将出现一个下拉菜单，您可以从列表中选择**int**。
- en: 'Now we need to do the same thing for our other fields. Select each field in
    turn and set them as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要为我们的其他字段做同样的事情。依次选择每个字段，并按以下方式设置它们：
- en: '**name**: Set it as **string**'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：将其设置为**字符串**'
- en: '**description**: Set it as **string**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：将其设置为**字符串**'
- en: '**create**: Set it as **date**'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建**：将其设置为**日期**'
- en: '**completed**: Set it as **date**'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完成**：将其设置为**日期**'
- en: '**priority**: Set it as **int**'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优先级**：将其设置为**整数**'
- en: '**isCompleted**: Set it as **boolean**'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**是否完成**：将其设置为**布尔值**'
- en: Now that you have all of the model fields and types defined, we need to add
    the model to the store.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经定义了所有模型字段和类型，我们需要将模型添加到商店中。
- en: Adding the model to the store
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将模型添加到商店
- en: Click on **MyStore** in **Project Inspector**. As we did with our model, we
    probably want to change the name of the store to make it easier to refer to and
    keep track of in our code. Click on the values next to **userClassName** and **storeID**
    and change both to say **taskStore**.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Project Inspector**中的**MyStore**。就像我们对模型所做的那样，我们可能想要更改存储的名称，以便在代码中更容易引用并跟踪。点击**userClassName**和**storeID**旁边的值，并将两者都更改为**taskStore**。
- en: 'Next, you will need to click on and edit the model **Config** in the store
    to select our **Task** model. Once complete, your store configuration should look
    something like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要点击并编辑存储中的模型**Config**以选择我们的**Task**模型。完成后，您的存储配置应该看起来像这样：
- en: '![Adding the model to the store](img/8901OS_01_09.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![将模型添加到存储](img/8901OS_01_09.jpg)'
- en: Making copies
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作副本
- en: Now that we have our store and model, we need to make a copy of it to hold our
    completed tasks. Both stores will use the same model and most of the same setup
    information. We only need to duplicate the store and change the **id** and **userClassName**
    values. Once we finish that, we will create filters for the store so that it only
    grabs the data we need.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了我们的存储和模型，我们需要复制一份以保存我们的已完成任务。这两个存储将使用相同的模型和大部分相同的设置信息。我们只需要复制存储并更改**id**和**userClassName**的值。完成这些后，我们将为存储创建过滤器，以便它只获取我们需要的资料。
- en: To duplicate **TaskStore**, right-click on it in **Project Inspector** and select
    **Duplicate**. A new store will appear called **MyStore2**, with the same proxy
    and model information. Select **MyStore2** in **Project Inspector** and change
    both the **id** and **userClassName** values in the **Config** section to `CompletedStore`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要复制**TaskStore**，在**Project Inspector**中右键单击它并选择**Duplicate**。将出现一个新的存储，称为**MyStore2**，具有相同的代理和模型信息。在**Project
    Inspector**中选择**MyStore2**，并在**Config**部分将**id**和**userClassName**的值都更改为`CompletedStore`。
- en: Adding filters
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加过滤器
- en: Now that we have our two stores, we need to set some filters to make sure that
    **TaskStore** only loads current tasks and **CompletedStore** only loads completed
    tasks.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了两个存储，我们需要设置一些过滤器以确保**TaskStore**只加载当前任务，而**CompletedStore**只加载已完成任务。
- en: You can add filters in the **Config** section for each of our stores. First,
    select **TaskStore** and then click on the **+** button next to **Filters** in
    the **Config** section. This will add a new filter called **MyFilter**. Click
    on the arrow next to **MyFilter** to reveal its **Config** options.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在每个存储的**Config**部分添加过滤器。首先，选择**TaskStore**，然后点击**Config**部分旁边**Filters**旁边的**+**按钮。这将添加一个名为**MyFilter**的新过滤器。点击**MyFilter**旁边的箭头以显示其**Config**选项。
- en: We need to add a function to this filter in order to tell it what records to
    grab. Click on the **+** button next to **filterFn** to add a new filter function.
    Up in the **Project Inspector** area, **filterFn** should appear beneath **MyFilter**.
    Click on **filterFn** in **Property Inspector** to bring up the code editor for
    the function.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要向这个过滤器添加一个函数，以便告诉它要获取哪些记录。点击**filterFn**旁边的**+**按钮以添加一个新的过滤器函数。在**Project
    Inspector**区域的上方，**filterFn**应该位于**MyFilter**下方。在**Property Inspector**中点击**filterFn**以打开该函数的代码编辑器。
- en: 'The editor should appear with the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器应该出现以下代码：
- en: '[PRE0]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This sets up the basic function for the filter and passes us each record in
    the store as **item**. If our function returns `true`, the record is included
    in the store and if it returns `false`, the record is ignored.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这设置了过滤器的基本功能，并将存储中的每个记录作为**item**传递给我们。如果我们的函数返回`true`，则记录包含在存储中，如果返回`false`，则记录被忽略。
- en: 'Our model has a Boolean value called `isComplete`. We can check this value
    in our function like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模式有一个名为`isComplete`的布尔值。我们可以在函数中这样检查这个值：
- en: '[PRE1]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This takes the record we were passed as `item`, and checks the record's data
    for `isComplete`. If a task record is complete this will be `true`, so we put
    the `!` character in front to grab only the records where `isComplete` is `false`.
    The filter is now complete.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将接受我们传递的记录作为`item`，并检查记录的数据中的`isComplete`。如果任务记录已完成，这将变为`true`，因此我们在前面放置`!`字符以仅获取`isComplete`为`false`的记录。过滤器现在已完成。
- en: 'Take the same steps to add a filter to `CompletedStore`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 按照相同的步骤为`CompletedStore`添加一个过滤器：
- en: Add a filter to `CompletedStore`.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`CompletedStore`添加一个过滤器。
- en: Add a function to the filter using `filterFn`.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`filterFn`向过滤器添加一个函数。
- en: Add the code for the filter function.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加过滤器函数的代码。
- en: 'In this case, our function just needs to look for tasks where `isComplete`
    is `true` (just drop the `!` character this time):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们的函数只需要查找`isComplete`为`true`的任务（这次不要使用`!`字符）：
- en: '[PRE2]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Both stores will now correctly filter the tasks based on completion.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 两个存储库现在都将正确地根据完成情况过滤任务。
- en: While we have been moving these components around on screen, Sencha Architect
    has been doing a bit of heavy lifting for us on the backend. Let's take a peek
    behind the curtain and see what's going on with the actual code.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在屏幕上移动这些组件时，Sencha Architect 在后端为我们做了一些繁重的工作。让我们揭开幕布，看看实际代码中发生了什么。
- en: Pay attention to the man behind the curtain
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注意幕后的那个人
- en: 'The first thing to look at is on your hard drive where you saved the Task Manager
    project file. You will notice that the designer has created a number of files
    here: `app.html`, `app.js`, and `TaskManager.xds`. We also have folders for app
    and metadata.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要查看的是你在硬盘上保存的任务管理器项目文件。你会注意到设计师在这里创建了许多文件：`app.html`、`app.js` 和 `TaskManager.xds`。我们还有
    app 和元数据文件夹。
- en: Sencha Architect uses both `TaskManager.xds` and the `metadata` folder. The
    `TaskManager.xds` file is the main project file you are currently working in and
    the `metadata` folder contains resources for that project file. We can ignore
    those files for now because the interesting stuff is in the other files.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Architect 使用 `TaskManager.xds` 和 `metadata` 文件夹。`TaskManager.xds` 文件是你目前正在工作的主要项目文件，而
    `metadata` 文件夹包含该项目文件的资源。我们现在可以忽略这些文件，因为有趣的内容在其他文件中。
- en: 'Let''s start with our `app.html` file. If you open this file in your favorite
    code editor, you should see something like this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 `app.html` 文件开始。如果你用你最喜欢的代码编辑器打开这个文件，你应该会看到类似这样的内容：
- en: '[PRE3]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This should look pretty familiar to anyone who is used to dealing with HTML
    and JavaScript. The file creates a basic HTML page, includes the JavaScript and
    CSS files for Sencha Touch, and also includes our `app.js` file (which we will
    get to in a second).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '这应该对熟悉 HTML 和 JavaScript 的人来说很熟悉。该文件创建了一个基本的 HTML 页面，包含了 Sencha Touch 的 JavaScript
    和 CSS 文件，并且还包含了我们的 `app.js` 文件（我们稍后会讨论）。 '
- en: The file then sets up some browser detection so that if the user attempts to
    access the application with a non-WebKit browser, they will be told that their
    browser is incompatible and will be given a list of compatible browsers.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 文件随后设置了一些浏览器检测，以便如果用户尝试使用非 WebKit 浏览器访问应用程序，他们将会被告知他们的浏览器不兼容，并会得到一个兼容浏览器的列表。
- en: Note
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Chrome and Safari are WebKit browsers and are available for Windows and Mac.
    Chrome is also available on Linux. In this book we will be using Safari for our
    testing, but the examples will work in Chrome as well.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome 和 Safari 是 WebKit 浏览器，可在 Windows 和 Mac 上使用。Chrome 也可在 Linux 上使用。在这本书中，我们将使用
    Safari 进行测试，但示例同样适用于 Chrome。
- en: One other thing to note is the message in the comments at the top of `app.html`.
    This particular file is autogenerated each time you save the TaskManager project.
    If you make changes to it in your code editor, they will be overwritten the next
    time you save.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一点需要注意，是 `app.html` 文件顶部注释中的信息。这个特定的文件每次你保存 TaskManager 项目时都会自动生成。如果你在代码编辑器中对其进行了修改，它们将在下一次保存时被覆盖。
- en: Tip
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**A word about CacheFly**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于 CacheFly 的一些建议**'
- en: CacheFly is a **CDN** (**Content Delivery Network**). They have computers all
    over the world, and can send files to your users from a server that's close to
    them, so that the files take less time to travel across the Internet, and therefore
    less time to load. That also means that you save on your own server bandwidth
    by not serving those files yourself.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: CacheFly 是一个 **CDN**（**内容分发网络**）。他们拥有全球各地的计算机，可以从离用户较近的服务器发送文件，这样文件在互联网上的传输时间更短，因此加载时间也更短。这也意味着，通过不自己提供这些文件，你可以节省自己的服务器带宽。
- en: 'Next, let''s take a look at our `app.js` file:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看一下我们的 `app.js` 文件：
- en: '[PRE4]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Like our HTML file, we start out with a stern warning at the top about hand
    editing the file.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们的 HTML 文件一样，我们在顶部有一个关于手动编辑文件的严厉警告。
- en: Tip
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**A word about hand editing**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于手动编辑的一些建议**'
- en: Sencha Architect does a lot of work for you, but that means that it can also
    accidentally overwrite code that you've written by hand. Your best bet is to wait
    to add any code yourself until you've fully laid out and configured all of the
    components for your application with the Architect first.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Architect 会为你做很多工作，但这意味着它也可能意外覆盖你手动编写的代码。最好的办法是在使用 Architect 首先完全布局和配置好应用程序的所有组件后再添加任何代码。
- en: If we skip down past that section, we have a setup function for the Ext.Loader
    followed by a definition of our application. This includes links to all of our
    models and stores, as well as the name of our application (which we should probably
    change once we finish snooping around in the code).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们跳过那个部分，我们会看到一个Ext.Loader的设置函数，然后是我们的应用程序定义。这包括所有模型和存储的链接，以及我们应用程序的名称（我们完成代码审查后可能需要更改一次）。
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Ext.Loader is a special part of Sencha Touch that will load JavaScript files
    as they're needed. Rather than include all of your JavaScript files in the HTML
    file, Ext.Loader will only load them as they're needed. This drastically cuts
    down on your application's startup time. You can learn more about Ext.Loader at
    [http://www.sencha.com/blog/using-ext-loader-for-your-application](http://www.sencha.com/blog/using-ext-loader-for-your-application).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Ext.Loader是Sencha Touch的一个特殊部分，它会在需要时加载JavaScript文件。而不是在HTML文件中包含所有JavaScript文件，Ext.Loader只会在需要时加载它们。这大大减少了应用程序的启动时间。你可以在[http://www.sencha.com/blog/using-ext-loader-for-your-application](http://www.sencha.com/blog/using-ext-loader-for-your-application)了解更多关于Ext.Loader的信息。
- en: Close the `app.js` file and open up the `app` folder. As you can see we have
    two folders called `model` and `store`. These, of course, contain our code for
    the model and the store.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭`app.js`文件，打开`app`文件夹。正如你所见，我们有两个名为`model`和`store`的文件夹。当然，这些文件夹中包含了我们模型和存储的代码。
- en: 'Open the `store/TaskStore.js` file first:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 首先打开`store/TaskStore.js`文件：
- en: '[PRE5]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Beyond the ever-present warning about hand editing, you will see our store definition
    written out in plain JavaScript. Note that the store definition not only contains
    the code for our proxy, it also includes the filter function and it lists our
    task model as the model for the store.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 除了始终存在的关于手动编辑的警告之外，你还会看到我们的存储定义以纯JavaScript的形式编写。请注意，存储定义不仅包含我们的代理代码，还包括过滤函数，并列出我们的任务模型作为存储的模型。
- en: Tip
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Why is it "MyApp.model.Task"?**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么是"MyApp.model.Task"**？'
- en: Ext.Loader turns the name of your components into a filename by turning the
    periods into slashes. This means that if your component is `MyApp.model.Task`
    then Ext.Loader will look in your application folder for a folder called `MyApp`.
    It will look inside that `MyApp` folder for a `model` folder that has a `Task.js`
    file in it.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Ext.Loader通过将点号转换为斜杠，将你的组件名称转换为文件名。这意味着如果你的组件是`MyApp.model.Task`，那么Ext.Loader将在你的应用程序文件夹中查找一个名为`MyApp`的文件夹。它将在该`MyApp`文件夹中查找一个包含`Task.js`文件的`model`文件夹。
- en: This is also a good way to keep your application folder organized. If you put
    all of your models in a `model` folder and all of your views in a `view` folder
    then you'll know where to find them when you need to find them later.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是保持应用程序文件夹组织良好的好方法。如果你将所有模型放在`model`文件夹中，所有视图放在`view`文件夹中，那么当你需要查找它们时就会知道它们在哪里。
- en: 'Close the `TaskStore.js` file and let''s look at the last file, `model/Task.js`.
    This is the file for our model:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭`TaskStore.js`文件，让我们看看最后一个文件，`model/Task.js`。这是我们的模型文件：
- en: '[PRE6]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that there is a fair amount of overlap between what's in the store and
    what's in the model. This duplication allows the model and store to act independently
    of each other while still maintaining consistency for the data itself. We will
    look closer at that when we deal with the forms for our application.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，存储和模型中的内容有相当大的重叠。这种重复允许模型和存储独立于彼此工作，同时仍然保持数据本身的一致性。当我们处理应用程序的表单时，我们将更详细地探讨这一点。
- en: Architect versus coding by hand
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构与手动编码
- en: As you can see, Sencha Architect generates code for us, but we could also choose
    to create this exact same code by hand. Sencha Architect offers benefits to the
    novice coder by allowing applications to be built visually and allowing the coder
    to explore the code as needed. The designer also generates code according to Sencha
    Touch best practices. This keeps the novice user from learning bad habits and
    encourages cleaner code when the coder needs to begin programming by hand.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，Sencha Architect为我们生成代码，但我们也可以选择手动创建完全相同的代码。Sencha Architect通过允许以可视化的方式构建应用程序和允许开发者按需探索代码，为新手程序员提供了便利。设计师还会根据Sencha
    Touch最佳实践生成代码。这有助于新手用户避免学习坏习惯，并在程序员需要手动编程时鼓励编写更干净的代码。
- en: For the seasoned coder, Sencha Touch offers ways to rapidly prototype interfaces
    and create mockups for clients. The code behind these mockups can then be used
    outside the designer to create complex applications that might be problematic
    if not impossible for Sencha Architect to accomplish.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 对于经验丰富的程序员来说，Sencha Touch 提供了快速原型化和为客户创建模拟界面的方法。这些模拟界面背后的代码可以在设计师之外使用，以创建可能对
    Sencha Architect 来说既困难又不可能完成的复杂应用程序。
- en: By using a combination of Sencha Architect and traditional text-based coding,
    we hope that this book will offer additional benefits to the reader both in terms
    of speed and consistency.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合使用 Sencha Architect 和传统的基于文本的编码，我们希望这本书能为读者在速度和一致性方面提供额外的益处。
- en: Creating the views
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建视图
- en: So far, none of our code has actually created anything on the screen. Now we
    need to create some visual components for the user to interact with, starting
    with the main panel that will contain our application.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的代码实际上还没有在屏幕上创建任何内容。现在我们需要创建一些用户可以与之交互的视觉组件，从包含我们应用程序的主要面板开始。
- en: 'Drag a **Tab Panel** object out of the **Toolbox** list on the left and drop
    it onto the iPhone screen in the designer. A **Panel** option will now appear
    in **Project Inspector**. Select **Tab Panel** and add the following information
    to the **Config** area:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 从左侧的 **工具箱** 列表中拖动一个 **标签面板** 对象并将其拖放到设计师中的 iPhone 屏幕上。现在在 **项目检查器** 中将出现一个
    **面板** 选项。选择 **标签面板** 并将以下信息添加到 **配置** 区域：
- en: Make sure the **initialView** checkbox is checked
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保勾选 **initialView** 复选框
- en: Change **userClassName** from **myTabPanel** to `mainView`
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 **userClassName** 从 **myTabPanel** 更改为 `mainView`
- en: Delete the third tab by right-clicking on it and choosing **Delete**
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过右键单击并选择 **删除** 来删除第三个标签
- en: 'Save the project and let''s take another look at the code for your project.
    In the `app.js` file, you will now see the following code:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 保存项目，然后让我们再次查看您项目的代码。在 `app.js` 文件中，您现在将看到以下代码：
- en: '[PRE7]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The designer has now added a `launch` function that creates an instance of our
    `MainView` panel and sets it to `fullscreen`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 设计师现在添加了一个 `launch` 函数，它创建了一个 `MainView` 面板的实例并将其设置为全屏。
- en: 'If we take a look in our `app` folder, we now see a folder called `view`. This
    folder contains our file for `MainView.js`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看 `app` 文件夹，现在我们看到一个名为 `view` 的文件夹。这个文件夹包含我们的 `MainView.js` 文件：
- en: '[PRE8]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Right now this file simply defines `MainView` as an extension of the standard
    `Ext.tab.Panel` function and sets the Config containing our two tabs. As we add
    additional pieces to the panel, they will appear here in the code. Let's head
    back to the designer and do just that.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 目前这个文件只是将 `MainView` 定义为标准 `Ext.tab.Panel` 函数的扩展，并设置了包含我们两个标签的配置。当我们向面板添加更多组件时，它们将在这里的代码中显示。让我们回到设计师，并做同样的事情。
- en: Configuring the Tab Panel
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置标签面板
- en: The first thing we should probably do is rename the tabs. Select **Tab 1** in
    the **Project Inspector** and then click on the value for **Title** in the **Config**
    section. Change the title from **Tab 1** to `Current` and press *Enter* on your
    keyboard. Do the same thing for **Tab 2**, changing its title to `Completed`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能首先应该做的是重命名标签。在 **项目检查器** 中选择 **Tab 1**，然后点击 **配置** 部分的 **标题** 值。将标题从 **Tab
    1** 更改为 `Current` 并按键盘上的 *Enter*。对 **Tab 2** 也做同样的事情，将其标题更改为 `Completed`。
- en: '![Configuring the Tab Panel](img/8901OS_01_13.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![配置标签面板](img/8901OS_01_13.jpg)'
- en: One additional thing we should do is change the tabs to appear on the bottom.
    This will give our application a more classic iPhone look. To make this change,
    select **mainView** in **Project Inspector** and find the **Tab Bar Config** listing
    in the **Config** section. Click on the **+** button next to **Tab Bar Config**
    and a new **Tab Bar** option will appear below. Click on the arrow next to the
    new **Tab Bar** option and the configuration options for it will appear.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该做的一件额外的事情是将标签移至底部。这将使我们的应用程序看起来更像经典的 iPhone。要做出这个更改，在 **项目检查器** 中选择 **mainView**，然后在
    **配置** 部分找到 **标签栏配置** 列表。点击 **标签栏配置** 旁边的 **+** 按钮，新的 **标签栏** 选项将出现在下方。点击新 **标签栏**
    选项旁边的箭头，将出现其配置选项。
- en: Locate the docked **Config** area and change it from top to bottom. The tabs
    should drop down to the bottom and give us the large icons familiar to most iPhone
    users. You can change these icons by clicking on the **Current** or **Completed**
    tab in **Project Inspector** and changing the **Config** value for **iconCls**.
    Select the icons you like and save the project (I chose **organize** for the **Current**
    tab and **delete** for the **Completed** tab).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 定位到停靠的**配置**区域，并将其从顶部改为底部。选项卡应下拉到底部，给我们带来大多数iPhone用户熟悉的图标。您可以通过在**项目检查器**中点击**当前**或**完成**选项卡并更改**配置**中的**iconCls**值来更改这些图标。选择您喜欢的图标并保存项目（我选择了**organize**作为**当前**选项卡的图标，**delete**作为**完成**选项卡的图标）。
- en: Once you are finished, select **MainView** in **Property Inspector** and then
    click on **Code** in the upper-right side of the designer. This will change the
    designer over into code view, showing us the contents of our `MainView.js` file.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，在**属性检查器**中选择**主视图**，然后在设计器的右上角点击**代码**。这将使设计器切换到代码视图，显示我们的`MainView.js`文件内容。
- en: '[PRE9]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can now see that the tab panel and its two tabs have been added to our `MainView.js`
    file. We also see our `tabBar` configuration and the `iconCls` values we selected.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以看到，选项卡面板及其两个选项卡已添加到我们的`MainView.js`文件中。我们还看到了我们的`tabBar`配置和选择的`iconCls`值。
- en: Adding the lists and details
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加列表和详情
- en: Next, we want to add a list and a panel to each of our tabs. The lists will
    display the names for our current and completed tasks. The panels will display
    details for the task when we click on it in the list.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要在每个选项卡上添加一个列表和一个面板。列表将显示当前和已完成任务的名称。面板将在我们点击列表中的任务时显示任务的详细信息。
- en: Let's start by selecting each tab and setting the **layout** property in **Config**
    to **card**. This will let us easily switch between the **List** and **Details**
    sections for each tab.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从选择每个选项卡并设置**配置**中的**布局**属性为**卡片**开始。这将使我们能够轻松地在每个选项卡的**列表**和**详情**部分之间切换。
- en: Next, take a **List** component from the **Toolbox** list and drop one on each
    tab in **Property Inspector**.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从**工具箱**列表中取一个**列表**组件，并将其拖放到**属性检查器**中的每个选项卡上。
- en: Tip
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Dropping items in Property Inspector**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**在属性检查器中放置项目**'
- en: While most components can be dropped directly onto the design area, it is often
    better to drop components into **Project Inspector**. It's much easier to ensure
    that you are putting the component within the correct container using **Property
    Inspector**.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然大多数组件可以直接拖放到设计区域，但通常将组件拖放到**项目检查器**中会更好。使用**属性检查器**确保您将组件放入正确的容器中要容易得多。
- en: Next you will need to take a panel from **Toolbox** and drop one onto each tab,
    just like we did with the list. This panel will be our details container and it
    will not appear in the design view because the list is in front. We will create
    some code later on to swap the list and the container when the user clicks on
    a task in the list.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要从**工具箱**中取一个面板，并将其拖放到每个选项卡上，就像我们处理列表时做的那样。这个面板将是我们的详情容器，并且它不会在设计视图中出现，因为列表在前。我们将在稍后创建一些代码来在用户点击列表中的任务时交换列表和容器。
- en: 'Your **Property Inspector** area should now look something like this:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您的**属性检查器**区域现在应该看起来像这样：
- en: '![Adding the lists and details](img/8901OS_10.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![添加列表和详情](img/8901OS_10.jpg)'
- en: Notice that the tabs (**Current** and **Completed**) are both indented under
    the **mainView** tab panel. Each tab also has a list and a panel beneath it. The
    tabs are children of the **mainView** tab panel and each tab has two child items;
    a list and a panel.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，选项卡（**当前**和**完成**）都缩进在**mainView**选项卡面板下。每个选项卡下也有一个列表和一个面板。选项卡是**mainView**选项卡面板的子项，每个选项卡有两个子项；一个列表和一个面板。
- en: 'Since we will need to address the lists and the panels in our code, we should
    probably name them something a bit more descriptive than **MyList** and **MyPanel**.
    In order to do this, you will need to select each of these items and change the
    **id** property in **Config**. Let''s rename them as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在代码中处理列表和面板，我们可能需要将它们命名为比**MyList**和**MyPanel**更具有描述性的名称。为了做到这一点，您需要选择这些项目中的每一个，并在**配置**中更改**id**属性。让我们按以下方式重命名它们：
- en: In the **Current** tab, we will call them `CurrentList` and `CurrentDetails`
    and in the **Completed** tab, we will call them `CompletedList` and `CompletedDetails`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在**当前**选项卡中，我们将它们命名为`CurrentList`和`CurrentDetails`，而在**完成**选项卡中，我们将它们命名为`CompletedList`和`CompletedDetails`。
- en: Setting up the templates
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置模板
- en: 'Next we need to set up the templates (called **itemTpl** in the **Config**
    area) for our lists and our details. These templates control how our data will
    be laid out on the screen. Remember that we have the following data items:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要设置列表和详情的模板（在**配置**区域中称为**itemTpl**）。这些模板控制我们的数据如何在屏幕上布局。记住，我们有以下数据项：
- en: '**id**'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**id**'
- en: '**name**'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**name**'
- en: '**description**'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**description**'
- en: '**created**'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已创建**'
- en: '**completed**'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已完成**'
- en: '**priority**'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**priority**'
- en: 'We can use any of these values by including them in our template by placing
    them in curly braces like so:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将它们放在大括号中（如下所示）将它们包含在我们的模板中，从而使用这些值：
- en: '[PRE10]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can also use any HTML styling or tags as part of our template. This gives
    us a great deal of flexibility in controlling the layout of our application.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将任何HTML样式或标签作为模板的一部分使用。这为我们控制应用程序布局提供了很大的灵活性。
- en: To edit the template for our **CurrentList** component, select it in **Project
    Inspector** and a gear icon will appear next to the list in our **Design** view.
    Click on the gear and you will see a pop-up window with a few configuration options
    including **Edit Template** at the bottom of the pop-up window.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑我们的**CurrentList**组件的模板，在**项目检查器**中选择它，然后在我们的**设计**视图中列表旁边会出现一个齿轮图标。点击齿轮，你将看到一个弹出窗口，其中包含一些配置选项，包括弹出窗口底部的**编辑模板**。
- en: 'When you click on **Edit Template**, a text area will appear over the list
    with the following text:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击**编辑模板**时，将出现一个文本区域，其中包含以下文本：
- en: '[PRE11]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Change this text to:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文本更改为：
- en: '[PRE12]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Click on **Done Editing** when you are finished. The list items will appear
    empty for now, but we will fix that a bit later.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成编辑时，点击**完成编辑**。目前列表项将显示为空，但我们稍后会解决这个问题。
- en: 'Next, click on the **CurrentDetails** panel in **Project Inspector** and edit
    the template the same way you did for **CurrentList**. Set the template for the
    **CurrentDetails** to:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在**项目检查器**中点击**CurrentDetails**面板，并以与**CurrentList**相同的方式编辑模板。将**CurrentDetails**的模板设置为：
- en: '[PRE13]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Click on **Done Editing** when you are finished.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成编辑时，点击**完成编辑**。
- en: 'When you are finished with the **CurrentDetails**, we want to follow the same
    steps for **CompletedList** and **CompletedDetails**. You can keep the list template
    the same but we should include the completed date on our details page like so:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成**CurrentDetails**的编辑后，我们希望对**CompletedList**和**CompletedDetails**执行相同的步骤。你可以保持列表模板不变，但我们应该在我们的详情页上包含完成日期，如下所示：
- en: '[PRE14]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Testing with starter data
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用启动数据测试
- en: You will notice that since we have no records, we have nothing to display. This
    can make testing our application difficult, so we are going to add a few test
    records to our application using the `launch` method.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，由于我们没有记录，我们没有什么可以展示的。这可能会使测试我们的应用程序变得困难，因此我们打算使用`launch`方法在我们的应用程序中添加一些测试记录。
- en: 'Select **Application** in **Project Inspector** and then locate **launch**
    down in the **Config** section. Click on the **+** button next to **launch** to
    add a new launch function, and then click on the arrow next to our new launch
    function to open it. This will open the code editor with:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在**项目检查器**中选择**应用程序**，然后在**配置**部分中找到**launch**。点击**launch**旁边的**+**按钮以添加新的启动函数，然后点击新启动函数旁边的箭头以打开它。这将打开代码编辑器，显示：
- en: '[PRE15]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the following code inside the `launch` function:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在`launch`函数内部添加以下代码：
- en: '[PRE16]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This code will grab our two stores, TaskStore and Completed Store, and check
    to see if there are any records. If there are no records, the function will add
    three new records, and then sync the store to save the records. These task records
    can also serve as a set of three instructions to new users opening the application
    for the first time.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将获取我们的两个存储库，任务存储库和完成存储库，并检查是否有任何记录。如果没有记录，该函数将添加三条新记录，然后同步存储库以保存记录。这些任务记录也可以作为一组三条指令，供首次打开应用程序的新用户使用。
- en: Tip
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Console logs**'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制台日志**'
- en: The `console.log` command is your best friend when programming. It will print
    text and objects to the error console in Safari or Chrome. This is critical for
    debugging any issues you have. In the previous code, the console logs will print
    based on whether we get back records or not. We could also use `console.log(TaskStore)`
    to get a display of every attribute of that store object. This is really handy
    for making sure you actually have the object you think you have.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log` 命令是编程时的最佳朋友。它将在 Safari 或 Chrome 的错误控制台中打印文本和对象。这对于调试任何问题至关重要。在前面的代码中，控制台日志将根据我们是否获取回记录而打印。我们也可以使用
    `console.log(TaskStore)` 来获取该存储对象每个属性的显示。这实际上非常方便，以确保你确实拥有你认为自己拥有的对象。'
- en: 'Now when you open up the `app.html` file in your browser, you should see the
    following in the **TaskMaster** application:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当你在浏览器中打开 `app.html` 文件时，你应该在 **TaskMaster** 应用程序中看到以下内容：
- en: '![Testing with starter data](img/8901OS_11.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![使用起始数据测试](img/8901OS_11.jpg)'
- en: We now have tasks to view, but we still can't get to the details. We need to
    add a function to switch the view between our list and our details.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有任务可以查看，但我们仍然无法获取详细信息。我们需要添加一个函数来在列表和详细信息之间切换视图。
- en: 'Back in Sencha Architect, click on **CurrentList** in **Project Inspector**
    and then look for **Events** at the top of the **Config** section. Click on the
    **+** button next to **Events** to add a new event listener. Use the menu that
    appears to choose the **select** event. Click on the arrow next the new **select**
    event to edit the code. The code editor will appear with the following code:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Sencha Architect 中，点击 **项目检查器** 中的 **CurrentList**，然后在 **配置** 部分的顶部查找 **事件**。点击
    **事件** 旁边的 **+** 按钮以添加新的事件监听器。使用出现的菜单选择 **select** 事件。点击新 **select** 事件旁边的箭头以编辑代码。代码编辑器将出现以下代码：
- en: '[PRE17]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the following code to the `select` event:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `select` 事件：
- en: '[PRE18]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The first line grabs our `Current` tab and the second grabs our `CurrentDetails`
    panel. We then set the record on the details panel to the record we are passed
    as part of the `select` function (the record from our list). Finally, we switch
    the card layout of our current tab to the `CurrentDetails` panel, hiding `CurrentList`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行获取我们的 `Current` 选项卡，第二行获取我们的 `CurrentDetails` 面板。然后我们将详细信息面板上的记录设置为作为 `select`
    函数一部分传递给我们的记录（列表中的记录）。最后，我们将当前选项卡的卡片布局切换到 `CurrentDetails` 面板，隐藏 `CurrentList`。
- en: 'We need to do the same thing with our `CompletedList` component. Add the new
    **select** event and set the code to:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要对 `CompletedList` 组件做同样的事情。添加新的 **select** 事件，并将代码设置为：
- en: '[PRE19]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If we test this in the browser we should be able to see our details panel when
    we click on an item in the list. This also brings us to our next challenge; we
    need a way to get back to our list.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中测试这个，我们应该能够在点击列表中的项目时看到我们的详细信息面板。这也带我们到了下一个挑战；我们需要一种方法回到我们的列表。
- en: In this chapter, we will create the back button manually and in the next chapter
    we will highlight a different approach to this same problem. For now, let's add
    a new button to our toolbar.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将手动创建返回按钮，在下一章中，我们将介绍解决这个问题的另一种方法。现在，让我们在我们的工具栏中添加一个新按钮。
- en: Adding the back button
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加返回按钮
- en: Grab a **toolbar** object from **Toolbox** and drag it over onto the **mainView**
    tab panel. Grab a **button** object from **Toolbox** and drag it onto the new
    **toolbar** panel.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 从 **工具箱** 中获取一个 **toolbar** 对象并将其拖动到 **mainView** 选项卡面板上。从 **工具箱** 中获取一个 **button**
    对象并将其拖动到新的 **toolbar** 面板上。
- en: Next, we want to give our toolbar a title. Let's select the toolbar and change
    the title in the **Config** section to `TaskMaster`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要给我们的工具栏添加一个标题。让我们选择工具栏，并在 **配置** 部分中将标题更改为 `TaskMaster`。
- en: 'Next we need to change a few things with our button. Select the **Button**
    object and make the following changes to its **Config** section:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要对我们的按钮做一些更改。选择 **Button** 对象，并在其 **配置** 部分进行以下更改：
- en: Change **text** to **Back**
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 **text** 改为 **Back**
- en: Change the **id** to **backButton**
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 **id** 改为 **backButton**
- en: Change the **ui** to **back** (this will make it look like a typical back button)
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 **ui** 改为 **back**（这将使其看起来像典型的返回按钮）
- en: Check the box next to the **hidden** property (we want the button hidden by
    default)
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查 **hidden** 属性旁边的框（我们希望按钮默认隐藏）
- en: Tip
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**I can''t find one of the Config options**'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**我找不到一个配置选项**'
- en: If you are unable to find some of these properties, you may need to toggle the
    **Config** section between **Show Common Configs** and **Show All Configs** using
    the two buttons in the upper-right corner of the **Config** section.
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您找不到一些这些属性，您可能需要使用**Config**部分右上角的两个按钮在**Show Common Configs**和**Show All
    Configs**之间切换。
- en: Now that we have a back button, we need to make it do something. Add a tap listener
    by clicking on the **+** button next to events in the button's **Config** section.
    Select **tap** and then click on the arrow next to the tap event that appears.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了返回按钮，我们需要让它执行一些操作。通过点击按钮的**Config**部分旁边的事件旁边的**+**按钮，添加一个点击监听器。选择**tap**，然后点击出现的点击事件旁边的箭头。
- en: 'Edit the back button code to look like this:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 将返回按钮代码编辑如下：
- en: '[PRE20]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: By grabbing `this.getActiveItem()` we grab the active tab in our `MainView`
    tab panel, which makes sure that the button will work correctly for both of our
    lists. We set the active item to the first item in the active tab. Finally, we
    hide the button so that it does not show up in our list view.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 通过获取`this.getActiveItem()`，我们获取了`MainView`标签面板中的活动标签，这确保了按钮可以正确地为我们的两个列表工作。我们将活动项设置为活动标签中的第一个项。最后，我们隐藏按钮，以确保它不会出现在我们的列表视图中。
- en: 'The last part we need to take care of is showing the button when we click an
    item in the list. Click on the **select** event for our current panel and add
    the following to our `select` function:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要最后处理的部分是在点击列表中的项时显示按钮。点击当前面板的**select**事件，并将以下内容添加到我们的`select`函数中：
- en: '[PRE21]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You will want to add the exact same button code to our **select** event in the
    **CompletedList** component. Just copy, open the select event for **CompletedList**,and
    paste.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望将完全相同的按钮代码添加到**CompletedList**组件的**select**事件中。只需复制，打开**CompletedList**的select事件，然后粘贴。
- en: Our lists and details are now complete. Now we need to be able to add, edit,
    and mark tasks as complete.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了列表和详情。现在我们需要能够添加、编辑和标记任务为完成。
- en: Creating the forms
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建表单
- en: Before we start creating forms we need to add a button to our **MainView** toolbar
    that will display the form for adding new tasks.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始创建表单之前，我们需要向**MainView**工具栏添加一个按钮，用于显示添加新任务的表单。
- en: Drag a **Button** object out from the **Toolbox** list and drop it on the **TaskMaster**
    toolbar. The new button should appear next to **backButton**. We probably want
    to move that over to the other side of our title, so we need to drag a **Spacer**
    out of **Toolbox** and drop it between our new button and **backButton**. **Spacer**
    will push the new button to the right side of the screen.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 从**Toolbox**列表中拖出一个**Button**对象，并将其拖放到**TaskMaster**工具栏上。新按钮应出现在**backButton**旁边。我们可能希望将其移到标题的另一侧，因此我们需要从**Toolbox**中拖出一个**Spacer**并将其放置在新按钮和**backButton**之间。**Spacer**将新按钮推到屏幕的右侧。
- en: 'Next we need to change the following **Config** properties for the new button:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要更改新按钮的以下**Config**属性：
- en: Set **text** to **Add**
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**text**设置为**Add**
- en: Set **itemId** to **addButton**
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**itemId**设置为**addButton**
- en: We will come back and add a `tap` function once we complete our forms.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在完成表单后回来添加一个`tap`函数。
- en: Add Task form
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加任务表单
- en: To create our Add Task form we will add a new form panel to the **Current**
    tab. Drag a **Form Panel** from the toolbox and drop it on our **Current** tab.
    The panel should appear below our **CurrentList** and **CurrentDetails** panels.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的添加任务表单，我们将向**Current**选项卡添加一个新的表单面板。从工具箱中拖出一个**Form Panel**并将其拖放到我们的**Current**选项卡上。面板应出现在我们的**CurrentList**和**CurrentDetails**面板下方。
- en: 'Next we need to drag some fields into our form so let''s start with dropping
    a **Text Field** object on the **MyFormPanel** panel and changing the following
    **Config** properties:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将一些字段拖入我们的表单中，所以让我们先在**MyFormPanel**面板上放置一个**Text Field**对象，并更改以下**Config**属性：
- en: Set **name** to **name**
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**name**设置为**name**
- en: Set **label** to **Name**
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**label**设置为**Name**
- en: Set **id** to **name**
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**id**设置为**name**
- en: Set **margin** to **3**
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**margin**设置为**3**
- en: 'Next, add a **Text Area** object to our **MyFormPanel** panel and set the following
    **Config** properties:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将一个**Text Area**对象添加到**MyFormPanel**面板中，并设置以下**Config**属性：
- en: Set **name** to **description**
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**name**设置为**description**
- en: Set **label** to **Description**
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**label**设置为**Description**
- en: Set **id** to **description**
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**id**设置为**description**
- en: Set **margin** to **3**
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**margin**设置为**3**
- en: 'Now, we need to add a **Select Field** object to **MyFormPanel** and set the
    following **Config** properties:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要向**MyFormPanel**添加一个**Select Field**对象，并设置以下**Config**属性：
- en: Set **name** to **priority**
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**name**设置为**priority**
- en: Set **label** to **Priority**
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**label**设置为**Priority**
- en: Set **id** to **priority**
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**id**设置为**priority**
- en: Set **margin** to 3
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**边距**设置为3
- en: 'We also need to add some options for **Select Field**. Locate **Options** in
    the **Config** properties and click to edit. The **Options** property expects
    an object as its value, in this case an array of name-value pairs like this:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要为**选择字段**添加一些选项。在**Config**属性中找到**Options**并点击编辑。**Options**属性期望一个对象作为其值，在这种情况下是一个类似这样的名称-值对的数组：
- en: '[PRE22]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: By default, the **Select Field** uses text for display and value for the submitted
    value. You can change this by editing the **displayField** and **valueFields**
    in the **Config** properties, but we can leave these as the defaults for our application.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，**选择字段**使用文本进行显示，使用值作为提交的值。您可以通过编辑**Config**属性中的**displayField**和**valueFields**来更改此设置，但我们可以将它们保留为我们的应用程序的默认值。
- en: We can save ourselves a lot of work if we use this form for both adding new
    tasks and editing existing ones. To do this we also need to add a hidden field
    to hold the ID value of any existing tasks that we edit.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用此表单来添加新任务和编辑现有任务，我们可以节省很多工作。为此，我们还需要添加一个隐藏字段来保存我们编辑的任何现有任务的ID值。
- en: Add a **Hidden Field** object to **MyFormPanel** and set the properties for
    **id** and **name** to **id** in the **Config** section. We will use this later
    when saving the form.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个**隐藏字段**对象添加到**MyFormPanel**中，并在**Config**部分将**id**和**name**的属性设置为**id**。我们将在保存表单时使用它。
- en: 'The last thing we need in our form is two buttons; one for save and one for
    cancel. Add the buttons and make the following changes:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的表单中，我们还需要两个按钮；一个用于保存，一个用于取消。添加按钮并做出以下更改：
- en: Set **text** for **button 1** to **Save**
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**按钮 1**的**文本**设置为**保存**
- en: Set **itemID** for **button 1** to **SaveButton**
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**按钮 1**的**itemID**设置为**SaveButton**
- en: Set **margin** for **button 1** to **10**
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**按钮 1**的**边距**设置为**10**
- en: Set **text** for **button 2** to **Cancel**
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**按钮 2**的**文本**设置为**取消**
- en: Set **itemID** for **button 2** to **CancelButton**
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**按钮 2**的**itemID**设置为**CancelButton**
- en: Set **margin** for **button 2** to **10**
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**按钮 2**的**边距**设置为**10**
- en: 'The structure and the form should look something like this:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 结构和表单应该看起来像这样：
- en: '![Add Task form](img/8901OS_12.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![添加任务表单](img/8901OS_12.jpg)'
- en: Next, we will add a tap event handler to each button using the **Event** section
    of the **Config** as before.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将像之前一样使用**Config**的**Event**部分为每个按钮添加一个点击事件处理程序。
- en: 'For our **Cancel** button, set the `event` function to:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的**取消**按钮，将`event`函数设置为：
- en: '[PRE23]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This code grabs our **Current** tab and sets the active panel back to **CurrentList**.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码获取我们的**当前**标签页并将活动面板重置为**CurrentList**。
- en: The **Save** button is a bit more complex. As we mentioned earlier, we want
    to use this form for both adding new tasks and editing existing ones. This means
    we need to check to see if the **Hidden Field** value of our form is set and save
    the task correctly.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '**保存**按钮稍微复杂一些。如我们之前提到的，我们希望使用此表单来添加新任务和编辑现有任务。这意味着我们需要检查表单的**隐藏字段**值是否已设置，并正确保存任务。'
- en: 'Add the following code to the **SaveButton** tap event function:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到**SaveButton**的点击事件函数中：
- en: '[PRE24]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Our first two lines grab `currentTab` and `formPanel`. We then get the values
    from `formPanel` and `store` that we need to save our data to.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的前两行获取`currentTab`和`formPanel`。然后，我们获取`formPanel`和`store`中的值，以便将数据保存到我们的数据中。
- en: We check the value of our hidden field to see if it has been set. This will
    be `true` if we are editing, but not if we are adding a new task.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查隐藏字段的值以查看它是否已设置。如果我们正在编辑，这将返回`true`，但如果我们正在添加新任务则不会。
- en: If we are adding a new task, we create a new `record` option using the `values`
    form in the form field, we set a create date, and add `record` to `store`.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正在添加新任务，我们使用表单字段中的`values`表单创建一个新的`record`选项，设置创建日期，并将`record`添加到`store`。
- en: If we are editing an existing record, we use the `id` value from our `store`
    to get the `record` from the `store`. We then set the `name`, `description`, and
    `priority` values of `record` from our form `values`.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正在编辑现有记录，我们使用`store`中的`id`值从`store`获取`record`。然后，我们从表单`values`设置`record`的`name`、`description`和`priority`值。
- en: Finally, we sync our `store` to save the `record`, clear out our form `values`
    and close the form by setting the active item back to our `CurrentList` view (`0`).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将`store`同步以保存`record`，清除表单`values`，并通过将活动项重置为我们的`CurrentList`视图（`0`）来关闭表单。
- en: Editing and completing a task
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑和完成任务
- en: For editing a task, we are going to use the form we just created, but we need
    to load it up with the currently selected record. For completing a task, we just
    need a button.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 对于编辑任务，我们将使用我们刚刚创建的表单，但我们需要用当前选定的记录加载它。对于完成任务，我们只需要一个按钮。
- en: To do this we will add a toolbar with two buttons to our **CurrentDetails**
    panel. We should probably add a **Spacer** object between the two buttons like
    we did with our previous toolbar.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们将在我们的**当前详情**面板中添加一个带有两个按钮的工具栏。我们可能需要在两个按钮之间添加一个**间隔**对象，就像我们在之前的工具栏中所做的那样。
- en: Each button also needs a **tap** event added to it in the **Config** section,
    under **Events**.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 每个按钮也需要在**配置**部分下的**事件**中添加一个**点击**事件。
- en: 'For the **Edit** button, set the **tap** function to:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**编辑**按钮，设置**点击**函数为：
- en: '[PRE25]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This code grabs `record` from the `DetailsPanel` panel and loads this into `formPanel`.
    Setting this `record` on the form also sets the value of our hidden field to the
    correct `id` value for our record. We then display the form as before and hide
    the **Back** button.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码从`DetailsPanel`面板中获取`record`并将其加载到`formPanel`中。将此`record`设置在表单上也会设置我们隐藏字段的正确`id`值。然后我们像之前一样显示表单并隐藏**返回**按钮。
- en: 'For our Complete Task button, we need to get `record` from `DetailsPanel` and
    set the values for `completed` (a date) and `isCompleted` (a Boolean). We do that
    by setting the tap event function to this:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的**完成任务**按钮，我们需要从`DetailsPanel`获取`record`并设置`completed`（一个日期）和`isCompleted`（一个布尔值）的值。我们通过将点击事件函数设置为以下内容来实现：
- en: '[PRE26]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This gets our `record` as before, sets our two values, and syncs `TaskStore`.
    This sync will also cause the filter on `TaskStore` to prevent the record from
    displaying in our `Current` list.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像之前一样获取我们的`record`，设置我们的两个值，并同步`TaskStore`。此同步还将导致`TaskStore`上的过滤器阻止记录在**当前**列表中显示。
- en: Next we add the record to `CompletedStore` and refresh the view for our `completed`
    list. We finish up by returning the user to the **Current** list and hiding the
    **Back** button.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将记录添加到`CompletedStore`中，并刷新我们的`completed`列表视图。最后，我们将用户返回到**当前**列表并隐藏**返回**按钮。
- en: Testing the application
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试应用程序
- en: If we did everything correctly, you should be able to open the `app.html` file
    in Safari (or Chrome) and test the application. Try putting the editing and marking
    tasks as completed. Be sure to use the JavaScript console in your browser to track
    down issues and view errors.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们一切都做得正确，你应该能够在Safari（或Chrome）中打开`app.html`文件并测试应用程序。尝试将编辑和标记任务标记为已完成。务必使用浏览器中的JavaScript控制台来追踪问题并查看错误。
- en: '![Testing the application](img/8901OS_13.jpg)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![测试应用程序](img/8901OS_13.jpg)'
- en: Extra credit
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外加分
- en: 'Task managing applications come in a variety of designs, with a wide variety
    of features. Everyone seems to have their own preference for tracking tasks. You
    can use this application as a base for your own personal task management application.
    These are a few ideas for taking the application to the next level:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 任务管理应用程序的设计多种多样，功能丰富。似乎每个人都对跟踪任务有自己的偏好。您可以使用此应用程序作为您自己的个人任务管理应用程序的基础。以下是将应用程序提升到下一个级别的几个想法：
- en: Add styles in the CSS file based on the priority of the tasks in the list and
    details
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据列表和详情中的任务优先级在CSS文件中添加样式
- en: Add a way to sort the tasks by date and priority
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一种按日期和优先级对任务进行排序的方法
- en: Customize the `CurrentDetails` and `CompletedDetails` templates to add icons
    for priority
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义`CurrentDetails`和`CompletedDetails`模板以添加优先级的图标
- en: Summary
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter we discussed the basic setup for an application using local
    storage, including:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了使用本地存储的应用程序的基本设置，包括：
- en: The basics of the Sencha Architect application
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sencha Architect应用程序的基本知识
- en: Creating data stores to use local storage and a task model
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用于本地存储和任务模型的数据存储
- en: Creating lists and details for our data stores to use
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的数据存储创建列表和详情
- en: Creating events to switch between the **List** and **Details** views
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建事件以在**列表**和**详情**视图之间切换
- en: Creating buttons to control navigation and launch our forms
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建按钮以控制导航并启动我们的表单
- en: Creating forms for editing and adding new tasks
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用于编辑和添加新任务的表单
- en: In the next chapter we will take a look at using layouts and templates to create
    a more complex and visually appealing application.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨使用布局和模板创建更复杂和视觉上吸引人的应用程序。
