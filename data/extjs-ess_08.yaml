- en: Chapter 8. Creating a Unique Look and Feel with SASS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 使用 SASS 创建独特的视觉和感觉
- en: Ext JS has come a long way since its beginning in terms of its design and the
    ease with which a new design can be applied to the framework.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 Ext JS 从其开始以来，在设计方面取得了长足的进步，并且将新设计应用于框架的容易程度也得到了提高。
- en: Its original blue theme was something that made it very appealing to developers
    but has since become dated and overused. Ext JS 5 now includes six themes and
    a host of options to customize them and to create your own.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 它原始的蓝色主题是使其对开发者非常有吸引力的事物，但现在已经过时且过度使用。Ext JS 5 现在包括六个主题和一系列选项来自定义它们以及创建你自己的。
- en: 'In this chapter, we will discuss how to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何：
- en: Apply different themes to your application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将不同的主题应用到你的应用程序
- en: Create your own custom theme
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你自己的自定义主题
- en: Customize basic application visuals with SASS variables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SASS 变量自定义基本应用程序视觉
- en: Create custom component UIs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义组件 UI
- en: Applying themes to your application
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将主题应用到你的应用程序
- en: 'When you generate a new Ext JS application with Sencha Cmd, it will automatically
    use the Neptune theme. This is one of the newest themes and looks very clean and
    modern:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 Sencha Cmd 生成新的 Ext JS 应用程序时，它将自动使用海王星主题。这是最新主题之一，看起来非常干净和现代：
- en: '![Applying themes to your application](img/3717_08_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![将主题应用到你的应用程序](img/3717_08_01.jpg)'
- en: 'As mentioned, there are a total of six themes packaged with Ext JS, as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Ext JS 包含了总共六个主题，如下所示：
- en: Neptune
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 海王星
- en: Neptune Touch (touch-friendly version of Neptune)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 海王星触摸（海王星的手势友好版本）
- en: Crisp
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清晰
- en: Crisp Touch (touch-friendly version of Crisp)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清晰触摸（清晰的手势友好版本）
- en: Classic
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经典
- en: Gray
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灰色
- en: 'Have a look at these themes in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中查看这些主题：
- en: '![Applying themes to your application](img/3717_08_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![将主题应用到你的应用程序](img/3717_08_02.jpg)'
- en: If you navigate to the `ext` directory in your project and have a peek into
    the `packages` folder, you will see all of the theme packages that are available.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你导航到项目中的 `ext` 目录并查看 `packages` 文件夹，你会看到所有可用的主题包。
- en: Configuring a new theme
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置新主题
- en: You can change the theme your application uses easily, with only one configuration
    change. In your application's folder, open the `app.json` file. This file is used
    to configure different aspects of your application and how it is loaded and built.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松地更改应用程序使用的主题，只需进行一次配置更改。在你的应用程序文件夹中，打开 `app.json` 文件。此文件用于配置应用程序的不同方面以及它的加载和构建方式。
- en: 'You should see an item named `theme` near the top of the file. We will edit
    the value of this property and change it to `ext-theme-crisp`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在文件顶部附近看到一个名为 `theme` 的项目。我们将编辑此属性的值并将其更改为 `ext-theme-crisp`：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For this change to take effect, we must rebuild the application using the following
    command from the `BizDash` folder:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使此更改生效，我们必须使用以下命令从 `BizDash` 文件夹重新构建应用程序：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This regenerates the CSS file for the application and includes the new theme's
    styles in it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这将重新生成应用程序的 CSS 文件，并包含新主题的样式。
- en: 'Refreshing the application in the browser should now show it with the Crisp
    theme applied:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中刷新应用程序现在应该显示应用了清晰主题的效果：
- en: '![Configuring a new theme](img/3717_08_03.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![配置新主题](img/3717_08_03.jpg)'
- en: Creating a custom theme
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义主题
- en: Now that we know how to switch our application's theme, we will move on to creating
    our own custom theme.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何切换应用程序的主题，我们将继续创建我们自己的自定义主题。
- en: Theme architecture
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主题架构
- en: As you may have noticed from our foray into Ext JS' packages folder, themes
    are architected as packages in the same way that Sencha Core and Sencha Charts
    are. This means they are portable between applications and sit in isolation from
    our app's code.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从我们对 Ext JS 包夹的探索中注意到的，主题被设计为与 Sencha Core 和 Sencha Charts 一样作为包。这意味着它们可以在应用程序之间移植，并且独立于我们的应用程序代码。
- en: 'Theme packages are also built with an inheritance hierarchy where they build
    upon common theme packages. The following diagram shows how each package relates
    to the others and how the basic styling is shared among each one:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 主题包也是按照继承层次结构构建的，它们建立在常见的主题包之上。以下图表显示了每个包如何相互关联以及基本样式如何在它们之间共享：
- en: '![Theme architecture](img/3717_08_04.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![主题架构](img/3717_08_04.jpg)'
- en: Generating a theme package
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成主题包
- en: First, we must generate a blank theme package using Sencha Cmd. To do this,
    we open the terminal and navigate to our `BizDash` project folder.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须使用 Sencha Cmd 生成一个空白主题包。为此，我们打开终端并导航到我们的 `BizDash` 项目文件夹。
- en: 'Next, we run the following command to generate a basic new theme:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们运行以下命令来生成一个基本的新主题：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We use the `generate` command, which you may remember from earlier in the book,
    but this time we tell it to generate a theme called bizdash-theme.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`generate`命令，你可能还记得在本书前面的内容，但这次我们告诉它生成一个名为bizdash-theme的主题。
- en: 'Once executed, we should see a new folder in our workspace''s packages folder:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，我们应该在我们的工作区包文件夹中看到一个新文件夹：
- en: '![Generating a theme package](img/3717_08_05.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![生成主题包](img/3717_08_05.jpg)'
- en: Anatomy of a theme
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主题的解剖结构
- en: 'Within our new theme package, there should be all of the files and folders
    you expect in a regular code package. The main ones we are interested in dealing
    with are:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的新主题包中，应该有我们在常规代码包中期望的所有文件和文件夹。我们最感兴趣的是处理以下内容：
- en: '`package.json`: This is where all the package''s details and configurations
    are defined'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`：这是定义所有包的详细信息和配置的地方'
- en: '`sass/var`: This will be where we put all of our SASS variable overrides'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sass/var`：这将是我们放置所有SASS变量覆盖的地方'
- en: '`sass/src`: This is where we define styling for individual components'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sass/src`：这是我们定义单个组件样式的位置'
- en: '`sass/etc`: This is where any miscellaneous SASS files, which don''t tie directly
    to a component file, can be placed'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sass/etc`：这是放置任何与组件文件无直接关联的杂项SASS文件的位置'
- en: Cross-browser styling
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨浏览器样式
- en: One of the great benefits of Ext JS is its legacy browser support. So, how do
    our shiny new themes cope with these older browsers? Ext JS is very clever when
    rendering in different browsers and uses different styling for browsers that don't
    support CSS3 properties (such as gradients and rounded corners). These older browsers
    are given image sprites to display these design features, so the exact same design
    is replicated across all browsers.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS的一个巨大好处是它对旧浏览器的支持。那么，我们这些闪亮的新主题如何应对这些旧浏览器呢？Ext JS在渲染不同浏览器时非常聪明，并为不支持CSS3属性（如渐变和圆角）的浏览器使用不同的样式。这些旧浏览器会得到图像精灵来显示这些设计特性，因此，完全相同的设计可以在所有浏览器中复制。
- en: During the Sencha Cmd build process, a sample page, which contains all of the
    framework's components, is rendered in a headless browser and a snapshot of it
    is taken. This snapshot is then sliced up into the required sprites and used as
    needed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在Sencha Cmd构建过程中，一个包含所有框架组件的示例页面在一个无头浏览器中渲染，并对其进行了快照。然后，这个快照被切割成所需的精灵，并按需使用。
- en: Theme inheritance
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主题继承
- en: As we mentioned before, themes extend other themes and build upon the styling
    each level defines. By default, our new theme will extend the ext-theme-classic
    theme and will look identical to it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，主题扩展其他主题，并在每个级别定义的样式上构建。默认情况下，我们的新主题将扩展ext-theme-classic主题，并且看起来与它完全相同。
- en: 'We can change our new theme''s base theme by opening the package''s `package.json`
    file in our IDE. In this file, we can update the `extend` property with the name
    of the theme we want to extend. We can change it to extend the Crisp theme:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在IDE中打开包的`package.json`文件来更改我们新主题的基础主题。在这个文件中，我们可以更新`extend`属性为我们想要扩展的主题的名称。我们可以将其更改为扩展Crisp主题：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Applying the new theme
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用新主题
- en: 'Now that we have a basic theme in place, we can apply it to our application
    in the same way that we applied one of the built-in themes. We modify our application''s
    `app.json` file and change the included theme name to bizdash-theme:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了一个基本主题，我们可以以应用内置主题相同的方式将其应用到我们的应用程序中。我们修改应用程序的`app.json`文件，并将包含的主题名称更改为bizdash-theme：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After rebuilding the application and refreshing the browser, we will see our
    application displaying our new theme (although at the moment it will look just
    like the Crisp theme).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在重新构建应用程序并刷新浏览器后，我们将看到我们的应用程序显示我们的新主题（尽管目前它看起来就像Crisp主题）。
- en: Basic theme customizations
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本主题定制
- en: Now that we have a custom theme in place, we want to start making it our own
    and moving away from the defaults inherited from the base theme.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了一个自定义主题，我们想要开始让它变得独特，并从基础主题继承的默认设置中脱离出来。
- en: Theme variables
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主题变量
- en: Ext JS themes are created with SASS and they place a lot of design control in
    the hands of SASS variables. By modifying these variables, we can make fundamental
    alterations to our theme very easily.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS主题是用SASS创建的，并将大量设计控制权交给了SASS变量。通过修改这些变量，我们可以非常容易地对我们的主题进行基本修改。
- en: SASS is a CSS preprocessor that introduces a more terse and functional way of
    writing CSS. It introduces concepts such as variables, nested rules, selector
    inheritance, and mixin, which are extremely useful when writing CSS for large
    applications.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: SASS是一种CSS预处理器，它引入了一种更简洁、更功能化的CSS编写方式。它引入了变量、嵌套规则、选择器继承和mixin等概念，这些概念在编写大型应用程序的CSS时非常有用。
- en: Each component in the framework has its own set of variables that will modify
    the look of that particular component. We can find a list of variables in the
    documentation alongside the methods, configs, and events that that component defines.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 框架中的每个组件都有自己的变量集，这将修改特定组件的外观。我们可以在文档中找到变量列表，包括该组件定义的方法、配置和事件。
- en: '![Theme variables](img/3717_08_06.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![主题变量](img/3717_08_06.jpg)'
- en: To define one of these variables in our theme, we must create a new SCSS file
    in the `sass/var` folder of our theme package. These SCSS files should match the
    structure of our JavaScript files. For example, defining variables for the `Ext.button.Button`
    class should be placed in a file named `sass/var/button/Button.scss`. This pattern
    should be followed when creating new styles in the `sass/src` folder.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的主题中定义这些变量之一，我们必须在主题包的`sass/var`文件夹中创建一个新的SCSS文件。这些SCSS文件应与我们的JavaScript文件结构相匹配。例如，为`Ext.button.Button`类定义变量应放在名为`sass/var/button/Button.scss`的文件中。在`sass/src`文件夹中创建新样式时应遵循此模式。
- en: We will now demonstrate how we can customize some areas of the UI with SASS
    variables.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将演示如何使用SASS变量自定义UI的一些区域。
- en: Changing the main color
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改主颜色
- en: A common scenario is that we want to change the main color of our theme to match
    our corporate colors. This can be done easily with the `$base-color` variable,
    which can be assigned any valid HTML color code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的场景是我们希望将主题的主颜色更改为与我们的企业颜色相匹配。这可以通过`$base-color`变量轻松完成，该变量可以分配任何有效的HTML颜色代码。
- en: 'This variable forms part of the `Ext.Component` class, so it must be defined
    in the file named `sass/var/Component.scss`. To change the base color to red,
    we include the following code in the file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此变量是`Ext.Component`类的一部分，因此必须在名为`sass/var/Component.scss`的文件中定义。要将基本颜色更改为红色，请在文件中包含以下代码：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `!default` suffix will allow the variable to be overridden in themes that
    extend this one.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`!default`后缀将允许在扩展此主题的主题中覆盖变量。'
- en: 'If we rebuild our application and refresh the browser, we will see the effect
    this has on our application:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们重新构建我们的应用程序并刷新浏览器，我们将看到这对我们应用程序的影响：
- en: '![Changing the main color](img/3717_08_07.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![更改主颜色](img/3717_08_07.jpg)'
- en: Changing the font size
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改字体大小
- en: 'We can also quickly change the font size used throughout the application by
    including the `$font-size` variable with a new size value. We increase the font
    size to 16 px with the following code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过包含带有新大小值的`$font-size`变量来快速更改应用程序中使用的字体大小。以下代码将字体大小增加到16 px：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Changing a button's color
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改按钮颜色
- en: We have seen that changing the `$base-color` variable resulted in our buttons
    rendering with that new color. We can select a different color for the buttons
    by overriding the `$button-default-background-color` variable.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，更改`$base-color`变量导致我们的按钮以新颜色渲染。我们可以通过覆盖`$button-default-background-color`变量来为按钮选择不同的颜色。
- en: 'We create a new SCSS file named `sass/var/button/Button.scss` and add the following
    code to change the color:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个名为`sass/var/button/Button.scss`的新SCSS文件，并添加以下代码来更改颜色：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Changing a button''s color](img/3717_08_08.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![更改按钮颜色](img/3717_08_08.jpg)'
- en: Custom component UIs
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义组件UI
- en: Ext JS components can be individually customized by providing a different `ui`
    configuration when they are created. This alters the CSS classes that are added
    to the components giving them a different look, in isolation from other components
    of that type. For example, you might want an action button to be green and a cancel
    button to be gray, but all the other buttons to be the default color.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS组件可以在创建时通过提供不同的`ui`配置来单独自定义。这改变了添加到组件中的CSS类，使它们具有不同的外观，而与其他类型的组件分离。例如，你可能希望操作按钮为绿色，取消按钮为灰色，但所有其他按钮为默认颜色。
- en: Defining UIs
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义UI
- en: We define a UI by including a SASS mixin and configuring it with our required
    colors and settings. A SASS mixin is a set of style rules that are grouped together,
    so they can be reused in multiple places and customized by passing parameter values
    to them.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过包含一个SASS混合并使用我们所需的颜色和设置来配置它来定义一个UI。SASS混合是一组组合在一起的样式规则，因此可以在多个地方重复使用，并通过传递参数值来定制。
- en: We will create the two UIs we mentioned earlier in this chapter for the `save`
    and `cancel` buttons of our `ProductForm`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建本章前面提到的两个UI，用于我们的`ProductForm`的`save`和`cancel`按钮。
- en: We start by creating a `Button.scss` file in a `sass/src/button` folder within
    our `bizdash-theme` package folder. This folder structure mirrors the `Ext.button.Button`
    component class and so will be picked up and compiled during a `sencha app build`
    process.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在`bizdash-theme`包文件夹内的`sass/src/button`文件夹中创建一个`Button.scss`文件。这个文件夹结构反映了`Ext.button.Button`组件类，因此在`sencha
    app build`过程中将被拾取和编译。
- en: 'In this file, we include the `extjs-button-small-ui` mixin:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中，我们包含了`extjs-button-small-ui`混合：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We then define the name of the UI, which will be used to apply the styling
    to a button. We use the `$ui` parameter name and give it the name `action`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义UI的名称，该名称将用于将样式应用于按钮。我们使用`$ui`参数名称，并将其命名为`action`：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we define the button''s background color, its text color, and its border
    color:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义按钮的背景颜色、文本颜色和边框颜色：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can repeat this for the `cancel` button and add a similar mixin to the `Button.scss`
    file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为`cancel`按钮重复此操作，并将类似的混合添加到`Button.scss`文件中：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that these are in place, we rebuild the application using the `sencha app
    build` command within the `BizDash` folder.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这些都已经就绪，我们使用`BizDash`文件夹内的`sencha app build`命令重新构建应用程序。
- en: Applying UIs
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用UI
- en: 'We now have two UI styles ready to apply to buttons within our application.
    To apply these, we use the `ui` configuration option. When added, this option
    adds a new CSS class, which was generated by our mixins in the previous step,
    to the components:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有两个UI样式准备应用于我们应用程序中的按钮。要应用这些样式，我们使用`ui`配置选项。添加后，此选项将添加一个新CSS类，该类是在上一步中由我们的混合生成的，并将其添加到组件中：
- en: 'In the `ProductForm` class our `button` configs become:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ProductForm`类中，我们的`button`配置变为：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Upon refreshing the application in our browser, we can see the new button styling
    in place. Inspecting the DOM shows the new CSS classes added to each of the buttons:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的浏览器中刷新应用程序后，我们可以看到新的按钮样式已经就绪。检查DOM显示已添加到每个按钮的新CSS类：
- en: '![Applying UIs](img/3717_08_09.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![应用UI](img/3717_08_09.jpg)'
- en: 'The following screenshot shows the new CSS classes:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了新的CSS类：
- en: '![Applying UIs](img/3717_08_10.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![应用UI](img/3717_08_10.jpg)'
- en: Other UIs
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他UI
- en: Most components within the framework have mixins that allow us to define a different
    component style. We will now demonstrate how to create an alternative UI for an
    `Ext.Panel` component.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 框架中的大多数组件都有混合，允许我们定义不同的组件样式。现在我们将演示如何为`Ext.Panel`组件创建一个替代UI。
- en: If you find the `Ext.Panel` in the Ext JS documentation, you will see one item
    under the **CSS Mixins** dropdown. We will use this to define our own UI, we first
    'create' a `Panel.scss` file in a folder `sass/src/panel/Panel`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Ext JS文档中找到`Ext.Panel`，你将在**CSS Mixins**下拉菜单下看到一个条目。我们将使用此条目来定义我们自己的UI，我们首先在文件夹`sass/src/panel/Panel`中创建一个`Panel.scss`文件。
- en: '![Other UIs](img/3717_08_11.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![其他UI](img/3717_08_11.jpg)'
- en: 'We include this in our `Panel.scss` file and start to configure the styling
    we want. You can see all of the available options in the documentation, but we
    will customize the header background color, border color, and border radius, as
    follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将此内容包含在我们的`Panel.scss`文件中，并开始配置我们想要的样式。您可以在文档中查看所有可用的选项，但我们将自定义页眉背景颜色、边框颜色和边框半径，如下所示：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This UI option can be added to the `ProductForm` in exactly the same way as
    we did with the buttons, using the `ui` config:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这个UI选项可以以与我们处理按钮完全相同的方式添加到`ProductForm`中，使用`ui`配置：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Other UIs](img/3717_08_12.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![其他UI](img/3717_08_12.jpg)'
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have looked at how we can customize the look and feel of
    our Ext JS applications through the use of custom themes. We have looked at how
    themes are constructed and how they inherit from each other.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何通过使用自定义主题来定制我们的Ext JS应用程序的外观和感觉。我们探讨了主题是如何构建的以及它们是如何相互继承的。
- en: We have also demonstrated how to create and customize a new theme through the
    use of global SASS variables and component mixins.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还展示了如何通过使用全局SASS变量和组件混合来创建和自定义一个新的主题。
- en: The next chapter will focus on visualizing data within our applications through
    the use of charts.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将专注于通过使用图表在我们的应用程序中可视化数据。
