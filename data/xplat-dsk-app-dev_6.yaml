- en: 'Creating a Screen Capturer with NW.js: Enhancement, Tooling, and Testing'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NW.js创建屏幕捕捉器：增强、工具和测试
- en: In[Chapter 5](5fc3eae1-8e13-4273-a9a3-c79d5384db4c.xhtml), *Creating a Screen
    Capturer with NW.js, React, and Redux â€“ Planning, Design, and Development,*
    we applied the Redux store to manage the application state. Now, we are going
    to get a look at how to use middleware for tooling Redux and how to unit-test
    Redux.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](5fc3eae1-8e13-4273-a9a3-c79d5384db4c.xhtml)中，*使用NW.js、React和Redux创建屏幕捕捉器-规划、设计和开发*，我们应用了Redux存储来管理应用程序状态。现在，我们将看看如何使用中间件来为工具化Redux，并如何对Redux进行单元测试。
- en: The main goal of this chapter though is to eventually teach our Screen Capturer
    to take screenshots and record screencasts. For that, you will learn how to use
    WebRTC APIs to capture and record a media stream. We will examine generating a
    still frame image from the stream by using canvas. We will put in practice the
    Notification API to inform the user about actions performed regardless of what
    window is in focus. We will add a menu to the system tray and bind it with the
    application state. We will make capturing action available via global keyboard
    shortcuts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，本章的主要目标是最终教会我们的屏幕捕捉器如何拍摄截图和录制屏幕录像。为此，您将学习如何使用WebRTC API来捕获和记录媒体流。我们将通过使用画布从流中生成静止帧图像。我们将实践通知API，以通知用户有关执行的操作，而不管焦点在哪个窗口。我们将向系统托盘添加菜单，并将其与应用程序状态绑定。我们将通过全局键盘快捷键使捕捉操作可用。
- en: Tooling Redux
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具化Redux
- en: In [Chapter 5](5fc3eae1-8e13-4273-a9a3-c79d5384db4c.xhtml)*,* *Creating a* *Screen
    Capturer with NW.js, React and Redux Planning, Design and Development,* you have
    learned the essentials of the Redux state container. We built a functional prototype
    using Redux. However, when building your own application, you may need to know
    when and what is happening to the state tree exactly.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](5fc3eae1-8e13-4273-a9a3-c79d5384db4c.xhtml)*，* *使用NW.js、React和Redux创建屏幕捕捉器-规划、设计和开发*，您已经学会了Redux状态容器的基本知识。我们使用Redux构建了一个功能原型。但是，在构建自己的应用程序时，您可能需要知道状态树的变化发生的时间和内容。
- en: 'Fortunately, Redux accepts middleware modules to deal with cross-cutting concerns.
    The concept is pretty similar to the one of the Express framework. We can extend
    Redux by hooking third-party modules on the event when an action gets dispatched
    but hasn''t yet reached the reducers. It doesn''t make much sense to write a custom
    logger as many are already available ([http://bit.ly/2qINXML](http://bit.ly/2qINXML)).
    For example, for tracing changes in the state tree, we can use the `redux-diff-logger`
    module that reports only the state diffs, which makes it much easier to read.
    So, we will install the package (`npm i -S redux-diff-logger`) and add a few lines
    to the entry script:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Redux接受中间件模块来处理横切关注点。这个概念与Express框架的概念非常相似。我们可以通过挂接第三方模块来扩展Redux，当一个操作被分派但尚未到达减速器时。编写自定义记录器并没有太多意义，因为已经有很多可用的记录器（[http://bit.ly/2qINXML](http://bit.ly/2qINXML)）。例如，为了跟踪状态树中的更改，我们可以使用`redux-diff-logger`模块，它只报告状态的差异，这样更容易阅读。因此，我们将安装该软件包（`npm
    i -S redux-diff-logger`）并在入口脚本中添加几行代码：
- en: '`./js/app.jsx`'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`./js/app.jsx`'
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we export `logger` from `redux-diff-logger` and pass it in the `applyMiddleware`
    function of the `redux` module to create a store enhancer. The store enhancer
    applies a given middleware to the `dispatch` method of the store. With the `compose`
    function of `redux`, we can combine multiple enhancers. We pass the derivative
    as the second argument to the `createStore` function.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们从`redux-diff-logger`中导出`logger`，并将其传递给`redux`模块的`applyMiddleware`函数，以创建一个存储增强器。存储增强器将给定的中间件应用于存储的`dispatch`方法。使用`redux`的`compose`函数，我们可以组合多个增强器。我们将导数作为第二个参数传递给`createStore`函数。
- en: 'Now, we can build the project and start it up. We play a bit with the UI and
    take a look in DevTools. The JavaScript console panel will output the state diffs
    we caused:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以构建项目并启动它。我们可以在UI中进行一些操作，并查看DevTools。JavaScript控制台面板将输出我们引起的状态差异：
- en: '![](img/091a0e4d-93e6-4501-85c6-264ce2f96794.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/091a0e4d-93e6-4501-85c6-264ce2f96794.png)'
- en: Though the redux-diff-logger middleware we receive reports in the JavaScript
    console of DevTools as we perform any action causing state change. For example,
    we modified screenshot filename template and that immediately reflected in the
    console. In fact we received a whole new object for the state tree, but redux-diff-logger
    is smart enough to show us only what really interested in - the diff of the state.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通过redux-diff-logger中间件，我们在DevTools的JavaScript控制台中收到报告，当我们执行任何导致状态更改的操作时。例如，我们修改了截图文件名模板，这立即反映在控制台中。实际上，我们收到了一个全新的状态树对象，但redux-diff-logger足够聪明，只显示我们真正感兴趣的内容
    - 状态的差异。
- en: Redux DevTools
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Redux DevTools
- en: 'Logging reports is already something, but it would be more useful if we could
    get a tool like `DevTools` to interact with the state. Third-party package `redux-devtools`
    brings in an extensible environment, which supports state live-editing and time
    traveling. We will examine it in conjunction with two additional modules, `redux-devtools-log-monitor`
    and `redux-devtools-dock-monitor`. The first allows us to inspect the state and
    time travel. The second is a wrapper that docks the Redux DevTools UI to window
    edges when we press the corresponding hot-key. To see it in action, we create
    a new component out of custom describing DevTools:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 记录报告已经是一件事，但如果我们能够获得像`DevTools`这样的工具与状态进行交互，那将更有用。第三方软件包`redux-devtools`带来了一个可扩展的环境，支持状态实时编辑和时间旅行。我们将与另外两个模块`redux-devtools-log-monitor`和`redux-devtools-dock-monitor`一起研究它。第一个允许我们检查状态和时间旅行。第二个是一个包装器，当我们按下相应的热键时，将Redux
    DevTools UI停靠到窗口边缘。为了看到它的效果，我们将创建一个新的组件来描述DevTools：
- en: '`./js/Components/DevTools.jsx`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`./js/Components/DevTools.jsx`'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We use the `createDevTools` function to create the component. It takes in JSX,
    where we configure visibility and the position of React DevTools UI through the
    props of `DockMonitor` and color theme in `LogMonitor`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`createDevTools`函数来创建组件。它接受JSX，我们可以通过`DockMonitor`的props配置React DevTools
    UI的可见性和位置，以及`LogMonitor`中的颜色主题。
- en: 'The derived component exposes the method instrument, which returns as a store
    enhancer. So, we can pass it to the compose function:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 派生的组件公开了`instrument`方法，它作为存储增强器返回。因此，我们可以将其传递给`compose`函数：
- en: '`./js/app.jsx`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`./js/app.jsx`'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the `DevTools` component itself, we have to add it to the DOM:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在`DevTools`组件本身中，我们必须将其添加到DOM中：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, when we run the application, we can see the dock. We can press *Ctrl*
    + *Q* to change its position and *Ctrl* + *H* to hide or to show it:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们运行应用程序时，我们可以看到dock。我们可以按下*Ctrl* + *Q*来改变它的位置，按下*Ctrl* + *H*来隐藏或显示它：
- en: '![](img/c456a00f-2cb4-469b-afc5-2ae172e74f5e.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c456a00f-2cb4-469b-afc5-2ae172e74f5e.png)'
- en: Unit-testing Redux
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试Redux
- en: 'We have already fiddled with the Jest testing framework in [Chapter 4](96f22864-d4f7-488d-b0fe-5451fd997e3d.xhtml)*,
    Chat System with Electron and React: Enhancement, Testing, and Delivery (Writing
    Unit-tests section)*. Redux introduces new concepts, such as actions and reducers.
    Now, we are going to unit-test them.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '我们已经在[第4章](96f22864-d4f7-488d-b0fe-5451fd997e3d.xhtml)中玩过Jest测试框架，Chat System
    with Electron and React: Enhancement, Testing, and Delivery（编写单元测试部分）。Redux引入了新的概念，比如动作和减速器。现在，我们要对它们进行单元测试。'
- en: 'As you may remember, to run Jest, we need to configure Babel:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能记得的，要运行Jest，我们需要配置Babel：
- en: '`.babelrc`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`.babelrc`'
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Again, with `env` preset, we target Babel on Node.js 7 and enable the extra
    plugins we used in the webpack configuration.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，使用`env`预设，我们针对Node.js 7上的Babel，并启用了在webpack配置中使用的额外插件。
- en: Testing action creator
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试动作创建者
- en: 'Actually, that''s quite simple with action creators because they are pure functions.
    We pass in an input according to the function interface and verify the output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，动作创建者非常简单，因为它们是纯函数。我们根据函数接口传入输入并验证输出：
- en: '`./js/Actions/index.spec.js`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`./js/Actions/index.spec.js`'
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We have written a test for the `toggleRecording` function. We assert the fact
    that the function produces an action object with `{ toggle: FLAG }` in the payload.
    As mentioned in the previous chapter, any action is supposed to have a mandatory
    property `type`. When we omit the description while calling the `createAction`
    function of the `redux-act` module, the derived action creator will produce an
    action with dynamically generated identifiers, which is hardly testable. However,
    we give it a string as the first argument, for example, `TOGGLE_RECORDING`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '我们已经为`toggleRecording`函数编写了一个测试。我们断言这个函数产生的动作对象在payload中有`{ toggle: FLAG }`。正如前一章所述，任何动作都应该有一个强制属性`type`。当我们在调用`redux-act`模块的`createAction`函数时省略描述时，派生的动作创建者将产生具有动态生成标识符的动作，这几乎无法测试。然而，我们给它一个字符串作为第一个参数，例如`TOGGLE_RECORDING`：'
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](img/7eb9fa04-1fae-442a-99ed-0d4d87e6d374.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7eb9fa04-1fae-442a-99ed-0d4d87e6d374.png)'
- en: Pretty much the same way we can test every action creator in our current application.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以几乎相同的方式测试当前应用程序中的每个动作创建者。
- en: Testing reducers
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试减速器
- en: 'Reducers, as well as action creators, are pure functions. They accept the last
    state tree object and the dispatched action in parameters and produce a new state
    tree object. So, when testing a reducer, we are checking whether a given action
    modifies the state as intended:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 减速器和动作创建者都是纯函数。它们接受最后的状态树对象和分派的动作作为参数，并产生一个新的状态树对象。因此，在测试减速器时，我们正在检查给定的动作是否按预期修改了状态：
- en: '`./js/Reducers/index.spec.js`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`./js/Reducers/index.spec.js`'
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For the very first time, Redux calls our reducer with the `undefined` state.
    What we expect from the reducer is to take a predefined object as the default
    state. So, if we call the function with no arguments, it is supposed to receive
    at entry point the default state and return it without modifications as no action
    was given.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Redux来说，第一次调用我们的减速器时，状态是`undefined`。我们期望减速器接受一个预定义对象作为默认状态。因此，如果我们不带参数调用该函数，它应该在入口点接收默认状态并在没有给定动作的情况下返回它而不进行修改。
- en: 'On the other hand, we can import an action creator:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们可以导入一个动作创建者：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create an action and pass it to the reducer:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个动作并将其传递给减速器：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Thus, we test that the reducer produces a new state, changed in accordance
    with the given action. An action is created by calling `toggleRecording( true
    )` is supposed to set the state object property `isRecording` to true. That is
    what we assert in the test:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们测试减速器是否产生了一个新的状态，根据给定的动作进行了更改。调用`toggleRecording(true)`创建的动作应该将状态对象属性`isRecording`设置为true。这就是我们在测试中断言的内容：
- en: '![](img/95b08e9c-3e88-4333-8261-c2dcc9ea0693.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95b08e9c-3e88-4333-8261-c2dcc9ea0693.png)'
- en: Taking a screenshot
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 截取屏幕截图
- en: The previously created static prototype may look fancy, but is not of much use.
    We need a service capable of taking screenshots and recording screencasts.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 先前创建的静态原型可能看起来很花哨，但用处不大。我们需要一个能够截取屏幕截图和录制屏幕录像的服务。
- en: 'If it was about a screenshot of the application window, we would simply use
    the API on NW.js:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是关于应用程序窗口的屏幕截图，我们可以简单地使用NW.js的API：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: But we need a screenshot of the screen and, therefore, we have to get access
    to display input. W3C includes a specification draft, "Media Capture and Streams"
    ([http://bit.ly/2qTtLXX](http://bit.ly/2qTtLXX)), which describes an API to capture
    displayed media (`mediaDevices.getDisplayMedia`). Unfortunately, at the time of
    writing, it's not yet supported in NW.js or, to be honest, by any browser. However,
    we can still use `webkitGetUserMedia`, which streams the desktop input. This API
    was once a part of technology known as WebRTC ([https://webrtc.org](https://webrtc.org)),
    designed for real-time video, audio, and data communication.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们需要屏幕截图，因此我们必须获得显示输入的访问权限。W3C包括了一份规范草案，“媒体捕获和流”（[http://bit.ly/2qTtLXX](http://bit.ly/2qTtLXX)），其中描述了捕获显示媒体的API（`mediaDevices.getDisplayMedia`）。不幸的是，在撰写本文时，它尚未得到NW.js或任何浏览器的支持。然而，我们仍然可以使用`webkitGetUserMedia`，它可以流式传输桌面输入。这个API曾经是被称为WebRTC的技术的一部分（[https://webrtc.org](https://webrtc.org)），旨在实现实时视频、音频和数据通信。
- en: Yet, currently, it is removed from the specification, but still available in
    both NW.js and Electron. It seems like we don't really have a choice, so we go
    with it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，目前它已从规范中删除，但仍然在NW.js和Electron中可用。看起来我们真的没有选择，所以我们就这样做吧。
- en: '`webkitGetUserMedia` takes in the so-called `MediaStreamConstraints` object
    describing what we want to capture and returns a promise. In our case, the constraints
    object may look as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`webkitGetUserMedia`接受所谓的`MediaStreamConstraints`对象，描述我们想要捕获的内容，并返回一个promise。在我们的情况下，约束对象可能如下所示：'
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We disable audio recording, set boundaries for video (`webkitGetUserMedia`
    determines a suitable size based on your display resolution. When the resolution
    does not fit the range it causes `OverconstrainedError`), and describe the media
    source. But we need a valid media stream ID. That we can obtain, for example,
    from the NW.js API:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们禁用音频录制，为视频设置边界（`webkitGetUserMedia`根据您的显示分辨率确定合适的大小。当分辨率不符合范围时，会导致`OverconstrainedError`），并描述媒体来源。但是我们需要一个有效的媒体流ID。我们可以从NW.js
    API中获取，例如：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When combining all together, we get the following service:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有内容结合在一起时，我们得到以下的服务：
- en: '`./js/Service/Capturer.js`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`./js/Service/Capturer.js`'
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When running it, we get a dialog prompting us to choose a media source:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时，我们会得到一个对话框提示我们选择媒体来源：
- en: '![](img/aa06bcfb-2640-4c53-afc2-26fd0d0d16ea.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa06bcfb-2640-4c53-afc2-26fd0d0d16ea.png)'
- en: 'I do not really like this UX. I would rather make it detect desktop media.
    We achieve that with the following method:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我不太喜欢这个用户体验。我宁愿让它检测桌面媒体。我们可以通过以下方法实现：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We use `DesktopCaptureMonitor` of the NW.js API for detecting available media
    devices, rejecting an app window (the type `"screen"`), and obtaining the media
    stream ID with the method `registerStream`. Now, we replace the `chooseDesktopMedia`
    of the NW.js API with our custom method, `detectDesktopStreamId`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用NW.js API的`DesktopCaptureMonitor`来检测可用的媒体设备，拒绝应用窗口（类型为“screen”），并使用`registerStream`方法获取媒体流ID。现在，我们用我们自定义的方法`detectDesktopStreamId`替换NW.js
    API的`chooseDesktopMedia`：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Well we manage to receive the stream. We have to direct it somewhere. We can
    create a hidden `HTMLVideoElement` and use it as a video stream receiver. We encapsulate
    this functionality in a separate module:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们设法接收到了流。我们必须将它指向某个地方。我们可以创建一个隐藏的`HTMLVideoElement`并将其用作视频流接收器。我们将这个功能封装在一个单独的模块中：
- en: '`./js/Service/Capturer/Dom.js`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`./js/Service/Capturer/Dom.js`'
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'During construction, the class creates a new DIV container and video element
    in it. The container gets attached to the DOM. We also need to support the new
    elements with CSS:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造过程中，该类创建一个新的DIV容器和其中的视频元素。容器被附加到DOM。我们还需要用CSS支持新元素：
- en: '`./assets/main.css`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`./assets/main.css`'
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Basically, we move the container out of view. So, the video will be streamed
    into a hidden `HTMLVideoElement`. The task is now to capture a still frame and
    convert it into an image. That we can do with the following trick:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们将容器移出视图。因此，视频将被流式传输到隐藏的`HTMLVideoElement`中。现在的任务是捕获静止帧并将其转换为图像。我们可以用以下的技巧来做到这一点：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We create a canvas context matching the video size. By using the context method
    `drawImage`, we draw an image from the video stream. Finally, we convert canvas
    to Data URI and obtain the Base64-encoded image by striping the `data:scheme`
    prefix.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个与视频大小匹配的画布上下文。通过使用上下文方法`drawImage`，我们从视频流中绘制图像。最后，我们将画布转换为数据URI，并通过去除`data:scheme`前缀来获取Base64编码的图像。
- en: 'We are going to inject our `Dom` module instance in the `Capturer` service
    as a dependency. For that, we need to modify the constructor:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将我们的`Dom`模块实例注入`Capturer`服务作为依赖项。为此，我们需要修改构造函数：
- en: '`./js/Service/Capturer.js`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`./js/Service/Capturer.js`'
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We also have to forward the media stream into `HTMLVideoElement`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将媒体流转发到`HTMLVideoElement`中：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We also add a method for saving screenshots:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个保存屏幕截图的方法：
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, when this method is called in a component, the image gets saved silently.
    To tell the truth, it''s not very user-friendly. A user presses the button and
    receives no information about whether the image really is saved or not. We can
    improve user experience by showing a desktop notification:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当在组件中调用这个方法时，图像会悄悄地保存。说实话，这并不是很用户友好。用户按下按钮，却没有收到关于图像是否真的保存了的信息。我们可以通过显示桌面通知来改善用户体验：
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, when the newly created screenshot is saved, the corresponding message
    gets displayed at the system level. So, even if the application window is hidden
    (for example, we use system tray or a shortcut), the user still receives a notification:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当新创建的屏幕截图被保存时，相应的消息会在系统级别显示。因此，即使应用程序窗口被隐藏（例如，我们使用系统托盘或快捷方式），用户仍然会收到通知：
- en: '![](img/a04c0844-73e1-4232-a379-d2115a19b210.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a04c0844-73e1-4232-a379-d2115a19b210.png)'
- en: Recording a screencast
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 录制屏幕截图
- en: 'In fact, while building the service for taking screenshots, we have done most
    of the work for screencast recording. We already have the `MediaStream` object
    delivered by `webkitGetUserMedia`. We just need a way to define the start and
    end of recording and save the collected frames in a video file. That is where
    we can benefit from the `MediaStream` Recording API, which captures the data produced
    by `MedaStream` or `HTMLMediaElement` (for example, `<video>`) so that we can
    save it. So, we modify the service again:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在构建用于截图的服务时，我们已经完成了大部分录屏的工作。我们已经有了`webkitGetUserMedia`提供的`MediaStream`对象。我们只需要一种方法来定义录制的开始和结束，并将收集的帧保存在视频文件中。这就是我们可以从`MediaStream`
    Recording API中受益的地方，它捕获由`MedaStream`或`HTMLMediaElement`（例如`<video>`）产生的数据，以便我们可以保存它。因此，我们再次修改服务：
- en: '`./js/Service/Capturer.js`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`./js/Service/Capturer.js`'
- en: '[PRE23]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: After receiving `MediaStream`, we use it to make an instance of `MediaRecorder`.
    We subscribe for the `dataavailable` event on the instance. The handler accepts
    a Blob (a file-like object representing a frame of the stream). To make a video,
    we need a sequence of the frames. So, we push every received Blob into the chunks
    array. We also subscribe a handler for the stop event, which creates a new Blob
    of the type `webm` from the collected chunks. Thus, we have a Blob representing
    the screencast, but we can't just save it in a file.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 收到`MediaStream`后，我们使用它来创建`MediaRecorder`的实例。我们订阅了实例的`dataavailable`事件。处理程序接受一个Blob（表示流的一帧的类似文件的对象）。为了制作视频，我们需要一系列的帧。因此，我们将每个接收到的Blob推送到chunks数组中。我们还为停止事件订阅了一个处理程序，它从收集到的chunks中创建了一个`webm`类型的新Blob。因此，我们有一个表示屏幕录像的Blob，但我们不能直接将其保存在文件中。
- en: For a stream of binary data, Node.js will expect from us an instance of the
    Buffer class. We use the `blob-to-buffer` package to convert Blob to Buffer.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于二进制数据流，Node.js将期望我们提供一个Buffer类的实例。我们使用`blob-to-buffer`包将Blob转换为Buffer。
- en: 'In this code, we rely on two events, `dataavailable` and `stop`. The first
    one gets fired when we start the recorder and the second when we stop it. These
    actions we make public:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们依赖于两个事件，`dataavailable`和`stop`。第一个在我们启动录制时触发，第二个在我们停止时触发。这些操作是公开的：
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When the method `record` is called, the instance of `MediaRecorder` starts recording
    and, on the contrary, with the `stop` method, it ceases the process. In addition,
    we define `saveAnimationBuffer` callback that will be called when recording stops
    (`this.mediaRecorder.onstop`) . The callback (`saveAnimationBuffer`) receives
    with the `buffer` parameter the binary stream of the recorded screencast and saves
    it with the `writeFileSync` method of the `fs` core module. Similar to a screenshot,
    on saving a screencast, we create a desktop notification to inform the user about
    the performed action.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`record`方法时，`MediaRecorder`实例开始录制，相反，使用`stop`方法停止该过程。此外，我们定义了`saveAnimationBuffer`回调函数，当录制停止时将被调用（`this.mediaRecorder.onstop`）。回调函数（`saveAnimationBuffer`）接收到录制屏幕的二进制流`buffer`参数，并使用`fs`核心模块的`writeFileSync`方法保存它。与截图类似，在保存屏幕录像时，我们创建一个桌面通知，通知用户已执行的操作。
- en: 'The service is almost ready. But as you can remember from our wireframes, the
    Screen Capturer accepts a template for the filename, such as `screenshot{N}.png`
    or `animation{N}.webm`, where `{N}` is a placeholder for the file index. Therefore,
    I would like to encapsulate filesystem operations in the dedicated class, `Fsys`,
    where we can process the template as needed:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 服务几乎准备好了。但是正如您从我们的线框图中记得的那样，屏幕捕获器接受文件名的模板，例如`screenshot{N}.png`或`animation{N}.webm`，其中`{N}`是文件索引的占位符。因此，我想将文件系统操作封装在专用类`Fsys`中，我们可以根据需要处理模板：
- en: '`./js/Service/Capturer/Fsys.js`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`./js/Service/Capturer/Fsys.js`'
- en: '[PRE25]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This class has the static method `getStoredFiles`, which returns an array of
    all the files of a given type (extension) from the working directory. Before saving
    a file in the `saveFile` method, we get the list of the earlier stored files and
    calculate the value for `{N}` as `files.length + 1`. Thus, the very first screenshot
    will be saved under the name `screenshot1.png`, the second as `screenshot2.png`,
    and so on.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类有一个静态方法`getStoredFiles`，它返回工作目录中给定类型（扩展名）的所有文件的数组。在`saveFile`方法中保存文件之前，我们获取之前存储的文件列表，并计算`{N}`的值为`files.length
    + 1`。因此，第一个截图将被保存为`screenshot1.png`，第二个为`screenshot2.png`，依此类推。
- en: 'The `Fsys` instance we inject in the `Capturer` service:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`Capturer`服务中注入的`Fsys`实例：
- en: '[PRE26]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We will instantiate the service in the entry script:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在入口脚本中实例化服务：
- en: '`./func-services/js/app.jsx`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`./func-services/js/app.jsx`'
- en: '[PRE27]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We import the `Capturer` class and the dependencies. While constructing `Capturer`,
    we pass it in the instances of `Fsys` and `Dom`. The derived instance of `Capturer`
    we pass with the props to the `App` component.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入`Capturer`类和依赖项。在构造`Capturer`时，我们将`Fsys`和`Dom`的实例传递给它。我们将派生的`Capturer`实例与props一起传递给`App`组件。
- en: 'So, the instance of the service arrives into the `ScreenshotTab` component
    and we can use it for taking a screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，服务的实例到达`ScreenshotTab`组件，我们可以用它来拍摄截图：
- en: '`./js/Components/ScreenshotTab.jsx`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`./js/Components/ScreenshotTab.jsx`'
- en: '[PRE28]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Similarly, in `AnimationTab`, we apply the methods record and stop of the instance
    from the corresponding handlers:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在`AnimationTab`中，我们应用了相应处理程序的实例的`record`和`stop`方法：
- en: '`./js/Components/AnimationTab.jsx`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`./js/Components/AnimationTab.jsx`'
- en: '[PRE29]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, after building the application, we can use it to take a screenshot and
    record screencasts:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在构建应用程序之后，我们可以使用它来进行截图和录制屏幕录像：
- en: '![](img/ad8aa105-24b3-4921-87c3-aeb3382e23f6.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad8aa105-24b3-4921-87c3-aeb3382e23f6.png)'
- en: From our image, we can observe that the buttons to take screenshots and record
    screencasts are parts of the window UI. However, we also need to provide functionality
    for hiding a window. So how do we reach capturing actions while application is
    hidden? The answer is to do with system tray.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的图像中，我们可以观察到拍摄截图和录制屏幕录像的按钮是窗口UI的一部分。但是，我们还需要提供隐藏窗口的功能。那么在应用程序隐藏时如何进行捕获操作呢？答案与系统托盘有关。
- en: Taking advantage of the system tray
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用系统托盘
- en: 'In *[Chapter 2](ed6645a7-d7e6-4322-909d-0777d9763560.xhtml), Creating a File
    Explorer with NW.js – Enhancement and Delivery* , we already examined adding and
    managing the application menu in the system tray. Briefly, we created menu items
    with `nw.MenuItem`, added them to the `nw.Menu` instance, and attached the menu
    to `nw.Tray`. So, the boilerplate for the tray menu may look as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在*[第2章](ed6645a7-d7e6-4322-909d-0777d9763560.xhtml)，使用NW.js创建文件资源管理器-增强和交付*中，我们已经研究了在系统托盘中添加和管理应用程序菜单。简而言之，我们使用`nw.MenuItem`创建菜单项，将它们添加到`nw.Menu`实例中，并将菜单附加到`nw.Tray`。因此，托盘菜单的样板可能如下所示：
- en: '`./js/Service/Tray.js`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`./js/Service/Tray.js`'
- en: '[PRE30]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'For this application, we need the following menu items:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个应用程序，我们需要以下菜单项：
- en: '[PRE31]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here, `Start recording` and `Stop recording` get enabled depending on the state
    `isRecording` property. Besides, we need the `Capturer` instance and state properties
    `screenshotFilename` and `animationFilename` to run the capturing action on user
    request. So, we inject both dependencies in the `Tray` constructor:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`Start recording`和`Stop recording`根据状态`isRecording`属性启用。此外，我们需要`Capturer`实例和状态属性`screenshotFilename`和`animationFilename`来在用户请求时运行捕获操作。因此，我们在`Tray`构造函数中注入了这两个依赖项：
- en: '`./js/Service/Tray.js`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ./js/Service/Tray.js
- en: '[PRE32]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In addition, we defined a few instance properties. `screenshotFilename` and
    `animationFilename` will receive the latest user-defined filename templates from
    the state. The property `isRecording` will take in the corresponding value of
    the state when it changes. In order to receive state updates, we subscribe for
    store changes:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们定义了一些实例属性。`screenshotFilename`和`animationFilename`将从状态中接收最新的用户定义的文件名模板。当状态改变时，属性`isRecording`将接收相应的值。为了接收状态更新，我们订阅存储更改：
- en: '[PRE33]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the callback, we compare the actual `isRecording` value from the state with
    the earlier store one in the instance property `isRecording`. This way, we know
    when `isRecording` has really changed. Only then, we update the menu.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在回调中，我们将状态中的实际`isRecording`值与实例属性`isRecording`中的早期存储值进行比较。这样，我们就知道了`isRecording`何时真正改变。只有在这种情况下，我们才会更新菜单。
- en: 'Finally, we can populate the array of menu items options in the `getItems`
    method:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以在`getItems`方法中填充菜单项选项数组：
- en: '[PRE34]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: We use the `close` method of the application window to quit and the method `show`
    to restore the window if it is hidden. We rely on passed in the `Capturer` instance
    for capturing actions. We also update the state by dispatching (`store.dispatch`)
    the `toggleRecording` action.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用应用程序窗口的`close`方法退出，并使用`show`方法恢复窗口（如果它被隐藏）。我们依赖传入的`Capturer`实例来捕获操作。我们还通过分发（`store.dispatch`）`toggleRecording`动作来更新状态。
- en: 'Now we instantiate the `Tray` class in entry script and call it the `render`
    method:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在入口脚本中实例化`Tray`类并调用`render`方法：
- en: '`./js/app.jsx`'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: ./js/app.jsx
- en: '[PRE35]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'When running the application, we can see in the system notification area the
    Screen Capturer menu:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，我们可以在系统通知区域看到屏幕捕获菜单：
- en: '![](img/4836b957-32a2-4321-a36b-ac46e654f3fc.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4836b957-32a2-4321-a36b-ac46e654f3fc.png)'
- en: Registering global keyboard shortcuts
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册全局键盘快捷键
- en: 'Menu in tray is a solution, but actually, we have an option to perform capturing
    actions even without opening the menu. NW.js allows us to assign global keyboard
    shortcuts:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 托盘中的菜单是一种解决方案，但实际上，我们有一个选项可以执行捕获操作，即使不打开菜单。NW.js允许我们分配全局键盘快捷键：
- en: '[PRE36]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We use `nw.Shortcut` to create an object representing a shortcut. With `nw.App.registerGlobalHotKey`,
    the shortcut is registered. We use `nw.App.unregisterGlobalHotKey` to unregister
    the shortcut when the application closes or reloads.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`nw.Shortcut`来创建代表快捷键的对象。使用`nw.App.registerGlobalHotKey`注册快捷键。当应用程序关闭或重新加载时，我们使用`nw.App.unregisterGlobalHotKey`取消注册快捷键。
- en: 'That brings us to the following service:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这将引入以下服务：
- en: '`./js/Service/Shortcut.js`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: ./js/Service/Shortcut.js
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Pretty much like in the `Tray` class, we inject capturer and store instances.
    With the first one, we access capturing actions, and use the second to access
    the global state. We subscribe for state changes to get actual values for filename
    templates and `isRecording`. The method `registerOne` creates and registers a
    shortcut instance based on the given key and callback, and subscribes for the
    `close` and `beforeunload` events to unregister the shortcut. In the method `registerAll`,
    we declare our action shortcuts. The shortcuts key we will define in the constants
    module:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Tray`类中的情况非常相似，我们注入了捕捉器和存储实例。通过第一个，我们可以访问捕捉操作，并使用第二个来访问全局状态。我们订阅状态更改以获取文件名模板和`isRecording`的实际值。`registerOne`方法基于给定的键和回调创建并注册一个快捷键实例，并订阅`close`和`beforeunload`事件以取消注册快捷键。在`registerAll`方法中，我们声明了我们的动作快捷键。快捷键的键我们将在常量模块中定义：
- en: '`./js/Constants/index.js`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: ./js/Constants/index.js
- en: '[PRE38]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, we can also append the keys to tray menu items:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们还可以将键附加到托盘菜单项：
- en: '[PRE39]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, when we run the application, we get the following tray menu:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们运行应用程序时，我们会得到以下托盘菜单：
- en: '![](img/e00b57cc-45e1-4a7e-a4ec-d03d2b714f29.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e00b57cc-45e1-4a7e-a4ec-d03d2b714f29.png)'
- en: We can hide the application by hitting the Hide window (left hand-side) button
    of the title bar and take screenshots by pressing *Shift* + *Alt* + *4* and screencasts,
    with *Shift* + *Alt* + *5* and *Shift* + *Alt* + *6* for starting and stopping
    recording, respectively.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过点击标题栏左侧的隐藏窗口按钮来隐藏应用程序，并通过按下*Shift* + *Alt* + *4*来截取屏幕截图，按下*Shift* + *Alt*
    + *5*和*Shift* + *Alt* + *6*来开始和停止录制屏幕录像。
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We started this chapter by introducing the Redux middleware. As an example,
    we used `redux-diff-logger` to monitor mutations in the store. We also plugged
    in a collection of tools (`redux-devtools`), enabling DevTools-like panels on
    a page for inspecting the store and traveling back in time using the cancelling
    actions. Closing with Redux, we examined unit-testing of action creators and reducers.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过介绍Redux中间件来开始本章。作为示例，我们使用`redux-diff-logger`来监视存储中的变化。我们还插入了一系列工具（`redux-devtools`），使得可以在页面上启用类似DevTools的面板，用于检查存储并使用取消操作来回溯时间。最后，我们通过Redux来检查了动作创建者和减速器的单元测试。
- en: In this chapter, we created the `Capturer` service responsible for taking screenshots
    and recording screencasts. We achieved capturing of desktop video input in `MediaStream`
    by using `webkitGetUserMedia` API. With the Canvas API, we managed to take a still
    frame from the video stream and convert it into an image. For video recording,
    we went with the `MediaRecorder` API. Both screenshot and screencast actions we
    have provided with the corresponding desktop notifications. We implemented an
    application menu in the system tray and bound it to the store. To access capturing
    actions even without opening the tray menu, we registered global keyboard shortcuts.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了`Capturer`服务，负责拍摄屏幕截图和录制屏幕录像。我们通过使用`webkitGetUserMedia` API在`MediaStream`中实现了对桌面视频输入的捕获。利用Canvas
    API，我们成功地从视频流中获取静止帧并将其转换为图像。对于视频录制，我们选择了`MediaRecorder` API。我们为截图和屏幕录像操作提供了相应的桌面通知。我们在系统托盘中实现了一个应用菜单，并将其绑定到存储中。为了即使在没有打开托盘菜单的情况下也能访问捕获操作，我们注册了全局键盘快捷键。
