- en: Deploying Node.js Applications to Linux Servers
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 将Node.js应用程序部署到Linux服务器
- en: Now that the Notes application is fairly complete, it's time to think about
    how to deploy it to a real server. We've created a minimal implementation of the
    collaborative note concept that works fairly well. To grow, *Notes* must escape
    our laptop and live on a real server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Notes应用程序已经相当完整，是时候考虑如何将其部署到真实服务器上了。我们已经创建了一个合作笔记概念的最小实现，效果相当不错。为了发展，Notes必须离开我们的笔记本电脑，生活在一个真正的服务器上。
- en: The user story to fulfill is access to a hosted application that's available even
    when your laptop is turned off, for evaluation. The developer stories are to identify
    one of several deployment solutions, to have enough reliability so that the system restarts
    when it crashes, and for the users can access the app without taking too much
    of the developers time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现的用户故事是访问托管应用程序，即使您的笔记本电脑关闭，也可以进行评估。开发者的故事是识别几种部署解决方案之一，确保系统在崩溃时具有足够的可靠性，以及用户可以在不占用开发者太多时间的情况下访问应用程序。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: A discussion of the application architecture, and thoughts on how to implement
    the deployment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序架构的讨论，以及如何实施部署的想法
- en: A traditional LSB-compliant Node.js deployment on a Linux server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux服务器上进行传统的LSB兼容的Node.js部署
- en: Configuring Ubuntu to manage background tasks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Ubuntu以管理后台任务
- en: Adjusting Twitter settings for application authentication
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整Twitter应用程序认证的设置
- en: Using PM2 to reliably manage background tasks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PM2可靠地管理后台任务
- en: Deployment to a virtual Ubuntu instance, which could be a **Virtual Machine**
    (**VM**) on our laptop or a **Virtual Private Server** (**VPS**) provider
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到虚拟Ubuntu实例，可以是我们笔记本电脑上的虚拟机（VM）或虚拟专用服务器（VPS）提供商
- en: 'There are two services making up the *Notes* application: *Notes* itself, and
    the user authentication service, along with the corresponding database instances.
    For them to be reliably available to the users, these services must be deployed
    on servers visible on the public internet, along with system management tools
    to keep the services running, handle service failures, and scale the service up
    to handle large traffic loads. One common way to do this is the traditional method
    of relying on scripts executing during server boot-up to start the required background
    processes.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Notes应用程序由两个服务组成：Notes本身和用户认证服务，以及相应的数据库实例。为了可靠地向用户提供这些服务，这些服务必须部署在公共互联网上可见的服务器上，并配备系统管理工具，以保持服务运行，处理服务故障，并扩展服务以处理大量流量。一个常见的方法是依赖于在服务器启动期间执行脚本来启动所需的后台进程。
- en: Even though our end goal is deployment on a cloud-based platform with auto-scaling
    and all the buzzwords, you must still start from the basics of how to get an application
    to run in the background on a Unix-like system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们的最终目标是在具有自动扩展和所有流行词的基于云的平台上部署，您仍必须从如何在类Unix系统上后台运行应用程序的基础知识开始。
- en: Let's start the chapter by again reviewing the architecture, and think about
    how to best deploy on a server.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过再次审查架构并思考如何在服务器上最佳部署来开始本章。
- en: Notes application architecture and deployment considerations
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注意应用程序架构和部署考虑事项
- en: 'Before we get into deploying the *Notes *application, we need to review its
    architecture and understand what we''re planning to do. We have segmented the
    services into two groups, as shown in the following diagram:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始部署Notes应用程序之前，我们需要审查其架构并了解我们计划做什么。我们已将服务分成两组，如下图所示：
- en: '![](img/27cc847a-c683-4bd3-9897-0a95dc242e1e.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27cc847a-c683-4bd3-9897-0a95dc242e1e.png)'
- en: The user-facing portion is the Notes service along with its database. The backend,
    the user authentication service, and its database require more security. On our
    laptop, we weren't able to create the envisioned protective wall around that service,
    but we're about to implement one form of such protection.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面部分是Notes服务及其数据库。后端，用户认证服务及其数据库需要更多的安全性。在我们的笔记本电脑上，我们无法为该服务创建设想中的保护墙，但我们即将实施一种形式的保护。
- en: 'One strategy to enhance security is to expose as few ports as possible. That
    reduces the so-called attack surface, simplifying our work in hardening the application
    against security bugs. With the *Notes* application, we have exactly one port
    to expose: the HTTP service through which users access the application. The other
    ports – two for the MySQL servers, and one for the user authentication service
    port – should not be visible to the public internet since they are for internal
    use only. Therefore, in the final system, we should arrange to expose that one
    HTTP port and keep everything else walled off from the public internet.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 增强安全性的一种策略是尽可能少地暴露端口。这减少了所谓的攻击面，简化了我们在加固应用程序防止安全漏洞方面的工作。对于Notes应用程序，我们只需要暴露一个端口：用户访问应用程序的HTTP服务。其他端口——两个用于MySQL服务器，一个用于用户认证服务端口——不应该对公共互联网可见，因为它们仅供内部使用。因此，在最终系统中，我们应该安排暴露一个HTTP端口，并将其他所有内容与公共互联网隔离开来。
- en: Internally, the *Notes* application needs to access both the Notes database
    and the user authentication service. That service, in turn, needs to access the
    user authentication database. The Notes service does not need to access the user
    authentication database, and the user authentication service does not need to
    access the Notes database. As currently envisaged, no external access to either
    database or the authentication service is required.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，Notes应用程序需要访问Notes数据库和用户认证服务。反过来，该服务需要访问用户认证数据库。Notes服务不需要访问用户认证数据库，用户认证服务也不需要访问Notes数据库。按照目前的设想，不需要外部访问任何数据库或认证服务。
- en: This gives us a sense of what will be implemented. To get started, let's learn
    the traditional way to deploy applications on Linux.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们一个将要实施的感觉。要开始，让我们学习在Linux上部署应用程序的传统方式。
- en: Traditional Linux deployment for Node.js services
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js服务的传统Linux部署
- en: In this section, we will explore the traditional Linux/Unix service deployment.
    We'll do this with a virtual Ubuntu instance running on our laptop. The goal is
    to create background processes that automatically start during boot-up, restart
    if the process crashes, and allow us to monitor log files and system state.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨传统的Linux/Unix服务部署。我们将在笔记本电脑上运行一个虚拟的Ubuntu实例来完成这个目标。目标是创建后台进程，这些进程在启动时自动启动，如果进程崩溃，则重新启动，并允许我们监视日志文件和系统状态。
- en: Traditional Linux/Unix server application deployment uses an **init script** to
    manage background processes. They are to start every time the system boots, and
    cleanly shut down when the system is halted. The name "init script" comes from
    the name of the first process launched in the system, whose traditional name is
    `/etc/init`. The init scripts are usually stored in `/etc/init.d`, and are typically
    simple shell scripts. Some operating systems use other process managers, such
    as `upstart`, `systemd`, or `launchd`, while following the same model. While it's
    a simple model, the specifics of this vary widely from one **operating system** (**OS**)
    to another.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的Linux/Unix服务器应用部署使用init脚本来管理后台进程。它们在系统启动时启动，并在系统停止时干净地关闭。名称“init脚本”来自系统中启动的第一个进程的名称，其传统名称为`/etc/init`。init脚本通常存储在`/etc/init.d`中，并且通常是简单的shell脚本。一些操作系统使用其他进程管理器，例如`upstart`、`systemd`或`launchd`，但遵循相同的模型。虽然这是一个简单的模型，但具体情况在一个操作系统（OS）到另一个操作系统（OS）之间差异很大。
- en: The Node.js project itself does not include any scripts to manage server processes
    on any OS. Implementing a complete web service based on Node.js means that we
    must create the scripting to integrate with process management on your OS.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js项目本身不包括任何脚本来管理任何操作系统上的服务器进程。基于Node.js实现完整的Web服务意味着我们必须创建脚本来与您的操作系统上的进程管理集成。
- en: 'Having a web service on the internet requires having background processes running
    on a server, and those processes have to be the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网上拥有Web服务需要在服务器上运行后台进程，并且这些进程必须是以下内容：
- en: '**Reliable**: For example, they should auto-restart when the server process
    crashes.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性**：例如，当服务器进程崩溃时，它们应该能够自动重新启动。'
- en: '**Manageable**: They should integrate well with system management practices.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可管理性**：它们应该与系统管理实践很好地集成。'
- en: '**Observable**: The administrator must be able to get status and activity information
    from the service.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可观察性**：管理员必须能够从服务中获取状态和活动信息。'
- en: To demonstrate what's involved, we'll use PM2 to implement background server
    process management for *Notes*. PM2 bills itself as a *process manager*, meaning
    it tracks the state of processes it is managing and makes sure the processes execute
    reliably and are observable. PM2 detects the system type and can automatically
    integrate itself with the native process management system. It will create an LSB-style
    init script ([http://wiki.debian.org/LSBInitScripts](http://wiki.debian.org/LSBInitScripts)),
    or other scripts as required for your server.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示涉及的内容，我们将使用PM2来实现*Notes*的后台服务器进程管理。PM2将自己标榜为*进程管理器*，意味着它跟踪它正在管理的进程的状态，并确保这些进程可靠地执行并且可观察。PM2会检测系统类型，并可以自动集成到本机进程管理系统中。它将创建一个LSB风格的init脚本（[http://wiki.debian.org/LSBInitScripts](http://wiki.debian.org/LSBInitScripts)），或者根据您的服务器需要创建其他脚本。
- en: 'Our goal in this chapter is exploring how to do this, and there are several
    routes to achieving this goal:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是探讨如何做到这一点，有几种实现这一目标的途径：
- en: Traditional VM management applications including VirtualBox, Parallels, and
    VMware let us install Ubuntu or any other OS within a virtual environment. On
    Windows, Hyper-V comes with Windows 10 Pro and offers a similar capability. In
    these cases, you download an ISO image of the boot CD-ROM, boot the VM from that
    ISO image, and run the full OS installation as if it was a regular computer.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传统的虚拟机管理应用程序，包括VirtualBox、Parallels和VMware，让我们在虚拟环境中安装Ubuntu或任何其他操作系统。在Windows上，Hyper-V随Windows
    10 Pro一起提供类似的功能。在这些情况下，您下载引导CD-ROM的ISO镜像，从该ISO镜像引导虚拟机，并运行完整的操作系统安装，就像它是一台普通的计算机一样。
- en: You can rent inexpensive VPSes from one of hundreds of web hosting providers
    around the world. Often the choice is limited to Ubuntu servers. In these cases,
    you're handed a pre-baked server system ready to go for installing server software
    to run websites.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以从全球数百家网络托管提供商中租用廉价的VPS。通常选择受限于Ubuntu服务器。在这些情况下，您将获得一个预先准备好的服务器系统，可用于安装运行网站的服务器软件。
- en: A new product, Multipass, is a lightweight VM management tool, based on lightweight
    hypervisor technology, and is available for every desktop computer OS. It gives
    you the exact same starting point as you'd get by renting a VPS or using VM software
    like VirtualBox, with a much lower system impact than traditional VM applications
    such as VirtualBox. It is like getting a VPS from a hosting provider, but it's
    on your laptop.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种新产品Multipass是一种基于轻量级虚拟化技术的轻量级虚拟机管理工具，适用于每台台式计算机操作系统。它为您提供了与从托管提供商租用VPS或使用VirtualBox等VM软件获得的完全相同的起点，但对系统的影响要比VirtualBox等传统VM应用程序低得多。就像在笔记本电脑上获得VPS一样。
- en: There is no practical difference between these choices from the standpoint of
    the tools and commands required to launch background processes. The Ubuntu instance
    installed in VirtualBox is the same as the Ubuntu on the VPS rented from a web-hosting
    provider, and is the same as the Ubuntu launched in a Multipass instance. It's
    the same OS, the same command-line tools, and the same system management practices.
    The difference is in the performance impact on your laptop. With Multipass, we
    can set up a virtual Ubuntu instance in a few seconds, and it is easy to have
    multiple instances running on a laptop with little or no performance impact. The
    experience of using VirtualBox, Hyper-V, or other VM solutions is that using the
    laptop feels quickly like walking through molasses, especially when running multiple
    VMs at once.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从启动后台进程的工具和命令的角度来看，这些选择之间没有实际区别。在VirtualBox中安装的Ubuntu实例与从Web托管提供商那里租用的VPS上的Ubuntu相同，与在Multipass实例中启动的Ubuntu相同。它是相同的操作系统，相同的命令行工具和相同的系统管理实践。不同之处在于对笔记本电脑性能的影响。使用Multipass，我们可以在几秒钟内设置一个虚拟的Ubuntu实例，并且很容易在笔记本电脑上运行多个实例而几乎不会影响性能。使用VirtualBox、Hyper-V或其他VM解决方案的体验是，使用笔记本电脑会很快感觉像在糖浆中行走，特别是在同时运行多个VM时。
- en: Therefore, in this chapter, we will run this exercise on Multipass. Everything
    shown in this chapter is easily transferrable to Ubuntu on VirtualBox/VMware/and
    so on or to a VPS rented from a web hosting provider.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将在Multipass上运行此练习。本章中显示的所有内容都可以轻松转移到VirtualBox/VMware/等上的Ubuntu或从Web托管提供商那里租用的VPS上。
- en: 'For this deployment, we will create two Ubuntu instances with Multipass: one
    instance for the Notes service and the other for the user service. In each instance,
    there will be a MySQL instance for the corresponding database. Then we''ll use
    PM2 to configure these systems to start our services in the background when launched.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此部署，我们将使用Multipass创建两个Ubuntu实例：一个用于Notes服务，另一个用于用户服务。在每个实例中，都将有一个对应数据库的MySQL实例。然后我们将使用PM2配置这些系统，在启动时在后台启动我们的服务。
- en: Because of apparent incompatibilities between Multipass and WSL2, there might
    be difficulties using Multipass on Windows. If you run into problems, we have
    a section describing what to do.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Multipass和WSL2之间存在明显的不兼容性，因此在Windows上使用Multipass可能会遇到困难。如果遇到问题，我们有一节描述应该怎么做。
- en: The first task is to duplicate the source code from the previous chapter. It's
    suggested you create a new directory, `chap10`, as a sibling of the `chap09` directory,
    and copy everything from `chap09` to `chap10`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第一项任务是复制上一章的源代码。建议您创建一个新目录`chap10`，作为`chap09`目录的同级目录，并将`chap09`中的所有内容复制到`chap10`中。
- en: To get started, let's install Multipass, and after that we'll start by deploying
    and testing the user authentication service, followed by deploying and testing
    Notes. We'll also cover setup issues on Windows.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们安装Multipass，然后我们将开始部署和测试用户认证服务，然后部署和测试Notes。我们还将涵盖Windows上的设置问题。
- en: Installing Multipass
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Multipass
- en: Multipass is an open source tool developed by Canonical. It is an extremely
    lightweight tool for managing VMs, specifically Ubuntu-based VMs. It is light
    enough to enable running a mini-sized cloud hosting system on your laptop.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Multipass是由Canonical开发的开源工具。它是一个非常轻量级的用于管理VM的工具，特别是基于Ubuntu的VM。它足够轻便，可以在笔记本电脑上运行迷你云主机系统。
- en: To install Multipass, get an installer from [https://multipass.run/](https://multipass.run/).
    It may also be available through package management systems.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Multipass，请从[https://multipass.run/](https://multipass.run/)获取安装程序。它也可能通过软件包管理系统可用。
- en: 'With Multipass installed, you can run some of the following commands to try
    it out:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Multipass后，您可以运行以下命令中的一些来尝试它：
- en: '[PRE0]js\1'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0]js\1'
- en: This works as expected, in that you see `apt-get` first update its list of available
    packages, and then ask you to approve downloading and installing the packages
    to update, after which it does so. Anyone who is familiar with Ubuntu will find
    this normal. The difference is doing this from the command-line environment of
    the host computer.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这按预期工作，您会看到`apt-get`首先更新其可用软件包的列表，然后要求您批准下载和安装软件包以进行更新，之后它会这样做。熟悉Ubuntu的人会觉得这很正常。不同之处在于从主机计算机的命令行环境中执行此操作。
- en: 'That was fun, but we have some work to do, and we''re not pleased with this
    mustang-based machine name Multipass saddled us with. Let''s learn how to delete
    Multipass instances:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有趣，但我们有一些工作要做，我们对Multipass基于野马的机器名称不满意。让我们学习如何删除Multipass实例：
- en: '[PRE1]js\1'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE1]js\1'
- en: It goes through all the steps of setting up an instance, but in the last step,
    we get this message instead of success. Running `multipass list` might show the
    instance in a `Running` state, but no IP address has been assigned, and running `multipass
    shell` also results in a timeout.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过设置实例的所有步骤，但在最后一步，我们收到了这条消息，而不是成功。运行`multipass list`可能会显示实例处于`Running`状态，但没有分配IP地址，运行`multipass
    shell`也会导致超时。
- en: This timeout is observed if WSL2 is installed on the computer along with Multipass.
    WSL2 is a lightweight Linux subsystem for Windows, that is billed as an excellent
    environment for running Linux commands on Windows. Running WSL2 and Multipass
    at the same time may result in unwanted behavior.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在计算机上安装了WSL2和Multipass，则会观察到此超时。WSL2是Windows的轻量级Linux子系统，被称为在Windows上运行Linux命令的极佳环境。同时运行WSL2和Multipass可能会导致不希望的行为。
- en: For the purposes of this chapter, WSL2 is not useful. This is because WSL2 does
    not, at this time, support installing a background service that persists after
    a reboot, because it does not support `systemd`. Remember that our goal is to
    learn about setting up persistent background services.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，WSL2没有用。这是因为WSL2目前不支持安装在重启后持续存在的后台服务，因为它不支持`systemd`。请记住，我们的目标是学习设置持久的后台服务。
- en: It may be necessary to disable WSL2\. To do so, use the Search box in the Windows
    taskbar to look for the Turn Windows Features On or Off control panel. Because
    WSL2 is a feature rather than an application that is installed or uninstalled,
    it is turned off or on using this control panel. Simply scroll down to find the
    feature, untick the checkbox, and then reboot the computer.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要禁用WSL2。要这样做，请使用Windows任务栏中的搜索框查找“打开或关闭Windows功能”控制面板。因为WSL2是一个功能而不是一个安装或卸载的应用程序，所以可以使用此控制面板来启用或禁用它。只需向下滚动以找到该功能，取消选中复选框，然后重新启动计算机。
- en: The Multipass online documentation has a troubleshooting page for Windows that
    has some useful hints, at [https://multipass.run/docs/troubleshooting-networking-on-windows](https://multipass.run/docs/troubleshooting-networking-on-windows).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Multipass在线文档中有一个用于Windows的故障排除页面，其中包含一些有用的提示，网址为[https://multipass.run/docs/troubleshooting-networking-on-windows](https://multipass.run/docs/troubleshooting-networking-on-windows)。
- en: Both WSL2 and Multipass use Hyper-V. This is a virtualization engine for Windows,
    and it also supports installing VMs in a mode similar to VirtualBox or VMware.
    It is easy to download an ISO for Ubuntu or any other OS and install it on Hyper-V.
    This results in a full OS in which to experiment with background process deployment.
    You may prefer to run these examples inside Hyper-V instead.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: WSL2和Multipass都使用Hyper-V。这是Windows的虚拟化引擎，它还支持以类似于VirtualBox或VMware的模式安装VM。可以轻松下载Ubuntu或任何其他操作系统的ISO并在Hyper-V上安装它。这将导致完整的操作系统，可以在其中进行后台进程部署的实验。您可能更喜欢在Hyper-V内部运行这些示例。
- en: Once the virtual machine is installed most of the instructions in the rest of
    this chapter will work. Specifically, the `install-packages.sh` script will be
    useful for installing the Ubuntu packages required to complete the instructions,
    and the two configure-svc scripts are useful for "deploying" the services into
    `/opt/notes and /opt/userauth`. It is recommended to use Git inside the virtual
    machine to clone the repository associated with this book. Finally, the scripts
    in the pm2-single directory are useful for running the Notes and Users services
    under PM2.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了虚拟机后，本章其余大部分说明都将适用。具体来说，`install-packages.sh`脚本可用于安装完成说明所需的Ubuntu软件包，`configure-svc`脚本可用于将服务“部署”到`/opt/notes`和`/opt/userauth`。建议在虚拟机内部使用Git克隆与本书相关的存储库。最后，pm2-single目录中的脚本可用于在PM2下运行Notes和Users服务。
- en: Our purpose is to learn how to deploy Node.js services on a Linux system, without
    having to leave our laptop. For that purpose, we've familiarized ourselves with
    Multipass since it is an excellent tool for managing Ubuntu instances. We've also
    learned about alternatives such as Hyper-V or VirtualBox that also can be used
    for managing Linux instances.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目的是学习如何在Linux系统上部署Node.js服务，而无需离开我们的笔记本电脑。为此，我们熟悉了Multipass，因为它是管理Ubuntu实例的绝佳工具。我们还了解了诸如Hyper-V或VirtualBox之类的替代方案，这些替代方案也可以用于管理Linux实例。
- en: Let's start exploring deployment with the user authentication service.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始探索使用用户认证服务进行部署。
- en: Provisioning a server for the user authentication service
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为用户认证服务配置服务器
- en: Since we want to have a segmented infrastructure, with the user authentication
    service in a walled-off area, let's make the first attempt at building that architecture.
    Using Multipass we will create two server instances, `svc-userauth` and `svc-notes`.
    Each will contain its own MySQL instance and the corresponding Node.js-based service. In
    this section, we'll set up `svc-userauth`, then in another section, we'll replicate
    the process to set up `svc-notes`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们希望拥有分段基础架构，并将用户认证服务放在一个隔离区域中，让我们首先尝试构建该架构。使用Multipass，我们将创建两个服务器实例`svc-userauth`和`svc-notes`。每个实例将包含自己的MySQL实例和相应的基于Node.js的服务。在本节中，我们将设置`svc-userauth`，然后在另一节中，我们将复制该过程以设置`svc-notes`。
- en: Feeling kindly to our DevOps team, who've requested automation for all administrative
    tasks, we'll create some shell scripts to manage the server setup and configuration.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的DevOps团队，他们要求对所有管理任务进行自动化，我们将创建一些shell脚本来管理服务器的设置和配置。
- en: The scripts shown here handle deployment to two servers, with one server holding
    the authentication service and the other holding the *Notes* application. In the
    GitHub repository accompanying this book, you'll find other scripts to handle
    deployment to a single server. The single server scenario might be required if
    you're using a heavier-weight virtualization tool such as VirtualBox rather than
    Multipass.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的脚本处理了部署到两个服务器的情况，其中一个服务器保存认证服务，另一个保存*Notes*应用程序。在本书的GitHub存储库中，您将找到其他脚本，用于部署到单个服务器。如果您使用的是VirtualBox而不是Multipass等较重的虚拟化工具，则可能需要单个服务器方案。
- en: In this section, we will create the user authentication backend server, `svc-userauth`,
    and in a later section, we will create the server for the *Notes* frontend, `svc-notes`.
    Since the two server instances will be set up similarly, we might question why
    we're setting up two servers. It's because of the security model we decided on.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建用户认证后端服务器`svc-userauth`，在后面的部分中，我们将创建*Notes*前端的服务器`svc-notes`。由于这两个服务器实例将设置类似，我们可能会质疑为什么要设置两个服务器。这是因为我们决定的安全模型。
- en: 'There are several steps involved, including a few scripts for automating Multipass
    operations, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 涉及几个步骤，包括一些用于自动化Multipass操作的脚本，如下所示：
- en: Create a directory named `chap10/multipass` for scripts related to managing
    Multipass instances.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`chap10/multipass`的目录，用于管理Multipass实例的脚本。
- en: 'Then, in that directory, create a file named `create-svc-userauth.sh`, containing
    the following:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在该目录中创建一个名为`create-svc-userauth.sh`的文件，其中包含以下内容：
- en: '[PRE2]js\1'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE2]js\1'
- en: The two are nearly the same, except for the method to compute the current directory.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者几乎相同，只是计算当前目录的方法不同。
- en: The `mount` command in Multipass attaches a host directory into the instance
    at the given location. Therefore, we attach the `multipass` directory as `/build` and `users` as `/build-users`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Multipass中的`mount`命令将主机目录附加到给定位置的实例中。因此，我们将`multipass`目录附加为`/build`，将`users`附加为`/build-users`。
- en: The ``pwd`` notation is a feature of the Unix/Linux shell environment. It means
    to run the `pwd` process and capture its output, supplying it as a command-line
    argument to the `multipass` command. For Windows, we use `(get-location)` for
    the same purpose in PowerShell.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '``pwd``符号是Unix/Linux shell环境的一个特性。它意味着运行`pwd`进程并捕获其输出，将其作为命令行参数提供给`multipass`命令。对于Windows，我们在PowerShell中使用`(get-location)`来达到同样的目的。'
- en: 'Create the instance by running the script:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行脚本创建实例：
- en: '[PRE3]js\1'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE3]js\1'
- en: Either one runs the commands in the scripts that will launch the instance and
    mount directories from the host filesystem.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本中的命令，将启动实例并从主机文件系统挂载目录。
- en: 'Create a file named `install-packages.sh` containing the following:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`install-packages.sh`的文件，其中包含以下内容：
- en: '[PRE4]js\1'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE4]js\1'
- en: The `exec` command, as we discussed earlier, causes a command to execute inside
    the container by running this command on the host system.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，`exec`命令会导致在主机系统上运行此命令，从而在容器内部执行命令。
- en: 'In the `users` directory, edit `user-server.mjs` and change the following:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`users`目录中，编辑`user-server.mjs`并更改以下内容：
- en: '[PRE5]js\1'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE5]js\1'
- en: This is our configuration for allowing the user service to connect with a local
    MySQL instance. The `dbname`, `username`, and `password` parameters must match
    the values in the configuration script shown earlier.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是允许用户服务与本地MySQL实例连接的配置。`dbname`、`username`和`password`参数必须与之前显示的配置脚本中的值匹配。
- en: 'Then, in the `users/package.json` file, add these entries to the scripts section:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`users/package.json`文件中，将这些条目添加到`scripts`部分：
- en: '[PRE6]js\1'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE6]js\1'
- en: Since we're now using MySQL, we must have the driver package installed.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在正在使用MySQL，我们必须安装驱动程序包。
- en: 'Now create a file named `configure-svc-userauth.sh` containing the following:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个名为`configure-svc-userauth.sh`的文件，其中包含以下内容：
- en: '[PRE7]js\1'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE7]js\1'
- en: Remember that the `multipass` directory in the source tree is mounted inside
    the instance as `/build`. As soon as we created this file, it showed up in the `/build` directory,
    and we can execute it inside the instance.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住源代码中的`multipass`目录被挂载到实例内部作为`/build`。一旦我们创建了这个文件，它就会出现在`/build`目录中，我们可以在实例内部执行它。
- en: Several times in this book, we've talked about the value of explicitly declaring
    all dependencies and of automating everything. This demonstrates this value, because
    now, we can just run a couple of shell scripts and the server is configured. And
    we don't have to remember how to launch the server because of the `scripts` section
    in `package.json`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们已经多次谈到了明确声明所有依赖关系和自动化一切的价值。这证明了这个价值，因为现在，我们只需运行几个shell脚本，服务器就配置好了。而且我们不必记住如何启动服务器，因为`package.json`中的`scripts`部分。
- en: 'We can now start the user authentication server, like so:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以启动用户认证服务器，就像这样：
- en: '[PRE8]js\1'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE8]js\1'
- en: Multipass assigned an IP address to the instance. Your IP address will likely
    be different.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Multipass为实例分配了一个IP地址。您的IP地址可能会有所不同。
- en: On our laptop is a copy of the source code, including a copy of `cli.mjs`. This
    means we can run `cli.mjs` on our laptop, telling it to access the service on `svc-userauth`.
    That's because we thought ahead and added `--host` and `--port` options to `cli.mjs`.
    In theory, using those options, we can access this server anywhere on the internet.
    At the moment, we simply need to reach into the virtual environment on our laptop.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的笔记本电脑上有源代码的副本，包括`cli.mjs`的副本。这意味着我们可以在笔记本电脑上运行`cli.mjs`，告诉它访问`svc-userauth`上的服务。这是因为我们提前考虑并添加了`--host`和`--port`选项到`cli.mjs`。理论上，使用这些选项，我们可以在互联网上的任何地方访问这个服务器。目前，我们只需要在笔记本电脑的虚拟环境中进行访问。
- en: 'On your laptop, in the regular command environment rather than inside Multipass,
    run these commands:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的笔记本电脑上，而不是在Multipass内部的常规命令环境中，运行这些命令：
- en: '[PRE9]js\1'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE9]js\1'
- en: This shows database entries for the users we created. Notice that while logged
    in to the Multipass instance, we can use any Ubuntu command because we have the
    full OS in front of us.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了我们创建的用户的数据库条目。请注意，当登录到Multipass实例时，我们可以使用任何Ubuntu命令，因为我们面前有完整的操作系统。
- en: We have not only launched the user authentication service on an Ubuntu server,
    but we've verified that we can access that service from outside the server.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅在Ubuntu服务器上启动了用户认证服务，而且还验证了我们可以从服务器外部访问该服务。
- en: In this section, we set up the first of the two servers we want to run. We still
    have to create the `svc-notes` server.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们设置了我们想要运行的两个服务器中的第一个。我们仍然需要创建`svc-notes`服务器。
- en: But before we do that, we first need to discuss running scripts on Windows.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 但在此之前，我们首先需要讨论在Windows上运行脚本。
- en: Script execution in PowerShell on Windows
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows上使用PowerShell执行脚本
- en: In this chapter, we'll write several shell scripts. Some of these scripts need
    to run on your laptop, rather than on a Ubuntu-hosted server. Some developers
    use Windows, and therefore we need to discuss running scripts on PowerShell.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将编写几个shell脚本。其中一些脚本需要在您的笔记本电脑上运行，而不是在Ubuntu托管的服务器上运行。一些开发人员使用Windows，因此我们需要讨论在PowerShell上运行脚本。
- en: Executing scripts on Windows is different because it uses PowerShell rather
    than Bash, along with a large number of other considerations. For this and the
    scripts that follow, make the following changes.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上执行脚本是不同的，因为它使用PowerShell而不是Bash，还有许多其他考虑因素。对于这个和接下来的脚本，做出以下更改。
- en: PowerShell script filenames must end with the `.ps1` extension. For most of
    these scripts, all that is required is to duplicate the `.sh` scripts as `.ps1` files,
    because the scripts are so simple. To execute the script, simply type `.\scriptname.ps1` in
    the PowerShell window. In other words, on Windows, the script just shown must
    be named `configure-svc-userauth.ps1`, and is executed as `.\configure-svc-userauth.ps1`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell脚本文件名必须以`.ps1`扩展名结尾。对于大多数这些脚本，所需的只是将`.sh`脚本复制为`.ps1`文件，因为脚本非常简单。要执行脚本，只需在PowerShell窗口中键入`.\scriptname.ps1`。换句话说，在Windows上，刚才显示的脚本必须命名为`configure-svc-userauth.ps1`，并且以`.\configure-svc-userauth.ps1`执行。
- en: 'To execute the scripts, you may need to change the PowerShell execution policy:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行这些脚本，您可能需要更改PowerShell执行策略：
- en: '[PRE10]js\1'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE10]js\1'
- en: This is tasked with launching the Multipass instance, and is very similar to `create-svc-userauth` but
    changed to use the word `notes`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个任务是启动Multipass实例，并且与`create-svc-userauth`非常相似，但是更改为使用单词`notes`。
- en: 'For Windows, instead create a file called `multipass/create-svc-notes.ps1` containing
    the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，创建一个名为`multipass/create-svc-notes.ps1`的文件，其中包含以下内容：
- en: '[PRE11]js\1'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE11]js\1'
- en: 'Or, on Windows, run the following command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在Windows上，运行以下命令：
- en: '[PRE12]js\1'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE12]js\1'
- en: This script installs Node.js, the MySQL server, and a few other required packages.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本安装了Node.js、MySQL服务器和其他一些必需的软件包。
- en: 'Now create a file, `notes/models/sequelize-mysql.yaml`, containing the following:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个文件，`notes/models/sequelize-mysql.yaml`，其中包含以下内容：
- en: '[PRE13]js\1'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE13]js\1'
- en: We need the MySQL driver package to use MySQL.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要MySQL驱动程序包来使用MySQL。
- en: 'Then, in the `notes/package.json` file, add this entry to the `scripts` section:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`notes/package.json`文件中，将此条目添加到`scripts`部分：
- en: '[PRE14]js\1'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE14]js\1'
- en: The `on-server` script will have to be updated appropriately.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`on-server`脚本将需要相应地更新。'
- en: 'Duplicate `multipass/configure-svc-userauth.sh` to create a script named `multipass/configure-svc-notes.sh`,
    and change the final two sections to the following:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制`multipass/configure-svc-userauth.sh`以创建一个名为`multipass/configure-svc-notes.sh`的脚本，并将最后两个部分更改为以下内容：
- en: '[PRE15]js\1'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE15]js\1'
- en: Remember that the `multipass` directory in the source tree is mounted inside
    the instance as `/build`. As soon as we created this file, it showed up in the `/build` directory,
    and we can execute it inside the instance.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，源树中的`multipass`目录被挂载到实例内部作为`/build`。一旦我们创建了这个文件，它就会出现在`/build`目录中，并且我们可以在实例内部执行它。
- en: 'We can now run the Notes service with the following command:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在可以使用以下命令运行Notes服务：
- en: '[PRE16]js\1'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE16]js\1'
- en: The change is to use `sudo` to execute the command as `root`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 更改是使用`sudo`以`root`身份执行命令。
- en: To test this we must of course use a browser to connect with the Notes service.
    For that, we need to use the IP address for `svc-notes`, which we learned from
    Multipass earlier. Using that example, the URL is `http://172.23.89.142:3000`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这一点，我们当然需要使用浏览器连接到Notes服务。为此，我们需要使用`svc-notes`的IP地址，这是我们之前从Multipass学到的。使用这个例子，URL是`http://172.23.89.142:3000`。
- en: You'll find that since we haven't changed anything in the look-and-feel category,
    that our *Notes* application looks like it has all along. Functionally, you will
    be unable to log in using Twitter credentials, but you can log in using one of
    the local accounts we created during testing.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现，由于我们在外观和感觉类别中没有改变任何内容，我们的*Notes*应用程序看起来一直都是这样。从功能上讲，您将无法使用Twitter凭据登录，但可以使用我们在测试期间创建的本地帐户之一登录。
- en: Once both services are running, you can use your browser to interact with the
    *Notes* application and run it through its paces.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦两个服务都在运行，您可以使用浏览器与*Notes*应用程序进行交互，并通过其功能运行它。
- en: What we've done is build the second of two servers, `svc-userauth` and `svc-notes`,
    on which we'll run the Notes application stack. That gives us two Ubuntu instances
    each of which are configured with a database and a Node.js service. We were able
    to manually run the authentication and Notes services together, connecting from
    one Ubuntu instance to the other, each working with their corresponding database.
    To have this as a fully deployed server, we will use PM2 in a later section.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经构建了两个服务器，`svc-userauth`和`svc-notes`，在这两个服务器上运行Notes应用程序堆栈。这给了我们两个Ubuntu实例，每个实例都配置了数据库和Node.js服务。我们能够手动运行身份验证和Notes服务，并从一个Ubuntu实例连接到另一个Ubuntu实例，每个实例都与其相应的数据库一起工作。要将其作为完全部署的服务器，我们将在后面的部分中使用PM2。
- en: We have learned a little about configuring Ubuntu servers, though there is an
    outstanding issue of running the services as background processes. Before we get
    to that, let's rectify the situation with the Twitter login functionality. The
    issue with Twitter login is that the application is now on a different IP address,
    so to resolve this, we now have to add that IP address in Twitter's management
    backend.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学到了一些关于配置Ubuntu服务器的知识，尽管运行服务作为后台进程仍然存在问题。在解决这个问题之前，让我们纠正一下Twitter登录功能的情况。Twitter登录的问题在于应用现在位于不同的IP地址，因此为了解决这个问题，我们现在必须在Twitter的管理后端中添加该IP地址。
- en: Adjusting Twitter authentication to work on the server
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整Twitter身份验证以在服务器上工作
- en: As we just noted, the *Notes* application as currently deployed does not support
    Twitter-based logins. Any attempt will result in an error. Obviously we can't
    deploy it like this.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们刚才指出的，当前部署的*Notes*应用程序不支持基于Twitter的登录。任何尝试都会导致错误。显然，我们不能这样部署它。
- en: The Twitter application we set up for *Notes* previously won't work because
    the authentication URL that refers to our laptop is incorrect for the server.
    To get OAuth to work with Twitter, while deployed on this new server, go to `developer.twitter.com/en/apps` and
    reconfigure the application to use the IP address of your server.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前为*Notes*设置的Twitter应用程序将无法工作，因为引用我们笔记本电脑的身份验证URL对于服务器来说是不正确的。要使OAuth在这个新服务器上与Twitter一起工作，请转到`developer.twitter.com/en/apps`并重新配置应用程序以使用服务器的IP地址。
- en: 'That page is the dashboard of your applications that you''ve registered with
    Twitter. Click on the Detail*s* button, and you''ll see the details of the configuration.
    Click on the Edit button, and edit the list of Callback URLs like so:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 该页面是您已在Twitter注册的应用程序的仪表板。单击`Details`按钮，您将看到配置的详细信息。单击`Edit`按钮，编辑回调URL的列表如下：
- en: '![](img/100f13e0-7055-4914-b2b6-19352f3bc230.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/100f13e0-7055-4914-b2b6-19352f3bc230.png)'
- en: Of course, you must substitute the IP address of your server. The URL shown
    here is correct if your Multipass instance was assigned an IP address of `192.168.64.9`.
    This informs Twitter of a new correct callback URL that will be used. Likewise,
    if you have configured *Notes* to listen to port `80`, the URL you point Twitter
    to must also use port `80`. You must update this list for any callback URL you
    use in the future.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您必须替换服务器的IP地址。如果您的Multipass实例被分配了IP地址`192.168.64.9`，则此处显示的URL是正确的。这将通知Twitter使用一个新的正确的回调URL。同样，如果您已经配置*Notes*监听端口`80`，那么您指向Twitter的URL也必须使用端口`80`。您必须为将来使用的任何回调URL更新此列表。
- en: 'The next thing is to change the *Notes* application so as to use this new callback
    URL on the `svc-notes` server. In `routes/users.mjs`, the default value was `http://localhost:3000` for
    use on our laptop. But we now need to use the IP address for the server. Fortunately,
    we thought ahead and the software has an environment variable for this purpose.
    In `notes/package.json`, add the following environment variable to the `on-server` script:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要做的是更改*Notes*应用程序，以便在`svc-notes`服务器上使用这个新的回调URL。在`routes/users.mjs`中，默认值是`http://localhost:3000`，用于我们的笔记本电脑。但是现在我们需要使用服务器的IP地址。幸运的是，我们事先考虑到了这一点，软件有一个环境变量来实现这个目的。在`notes/package.json`中，将以下环境变量添加到`on-server`脚本中：
- en: '[PRE17]js\1'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE17]js\1'
- en: This should not be added in `package.json`, but supplied via another means.
    We have not yet identified a suitable method, but we did identify that adding
    these variables to `package.json` means committing them to a source code repository,
    which might allow those values to leak to the public.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这不应该添加在`package.json`中，而应通过其他方式提供。我们还没有找到合适的方法，但我们确实发现将这些变量添加到`package.json`中意味着将它们提交到源代码存储库，这可能会导致这些值泄漏给公众。
- en: 'For now, the server can be started as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，服务器可以这样启动：
- en: '[PRE18]js\1'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE18]js\1'
- en: The server instances were running under Multipass, and the `restart` command
    caused the named instance to `stop` and then `start`. This emulates a server reboot.
    Since both were running in the foreground, you'll see each command window exit
    to the host command shell, and running `multipass list` again will show both instances
    in the `Running` state. The big takeaway is that both services are no longer running.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器实例正在Multipass下运行，`restart`命令导致命名实例`stop`，然后`start`。这模拟了服务器的重启。由于两者都在前台运行，您将看到每个命令窗口退出到主机命令shell，并且再次运行`multipass
    list`将显示两个实例处于`Running`状态。最重要的是，两个服务都不再运行。
- en: There are many ways to manage server processes, to ensure restarts if the process
    crashes, and so on. We'll use **PM2** ([http://pm2.keymetrics.io/](http://pm2.keymetrics.io/))
    because it's optimized for Node.js processes. It bundles process management and
    monitoring into one application.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以管理服务器进程，以确保在进程崩溃时重新启动等。我们将使用**PM2**（[http://pm2.keymetrics.io/](http://pm2.keymetrics.io/)），因为它针对Node.js进程进行了优化。它将进程管理和监控捆绑到一个应用程序中。
- en: Let's now see how to use PM2 to correctly manage the Notes and user authentication
    services as background processes. We'll start by familiarizing ourselves with
    PM2, then creating scripts to use PM2 to manage the services, and finally, we'll
    see how to integrate it with the OS so that the services are correctly managed
    as background processes.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使用PM2来正确地管理Notes和用户身份验证服务作为后台进程。我们将首先熟悉PM2，然后创建脚本来使用PM2来管理服务，最后，我们将看到如何将其与操作系统集成，以便正确地将服务作为后台进程进行管理。
- en: Familiarizing ourselves with PM2
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 熟悉PM2
- en: To get ourselves acquainted with PM2, let's set up a test using the `svc-userauth` server.
    We will create a directory to hold a `pm2-userauth` project, install PM2 in that
    directory, then use it to start the user authentication service. Along the way,
    we'll learn how to use PM2.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了熟悉PM2，让我们使用`svc-userauth`服务器设置一个测试。我们将创建一个目录来保存`pm2-userauth`项目，在该目录中安装PM2，然后使用它来启动用户身份验证服务。在此过程中，我们将学习如何使用PM2。
- en: 'Start by running these commands on the `svc-userauth` server:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 首先在`svc-userauth`服务器上运行以下命令：
- en: '[PRE19]js\1'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE19]js\1'
- en: This boils down to running `pm2 start ./user-server.mjs`, except that we are
    adding the environment variables containing configuration values, and we are specifying
    the full path to PM2\. This runs our user server in the background.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这归结为运行`pm2 start ./user-server.mjs`，只是我们添加了包含配置值的环境变量，并且指定了PM2的完整路径。这样可以在后台运行我们的用户服务器。
- en: 'We can repeat our test of using `cli.mjs` to list users known to the authentication
    server:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以重复使用`cli.mjs`来列出已知的身份验证服务器用户的测试：
- en: '[PRE20]js\1'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE20]js\1'
- en: Because PM2 captures the standard output from the server process, any output
    is saved away. The `logs` command lets us view that output.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 因为PM2捕获了服务器进程的标准输出，任何输出都被保存起来。`logs`命令让我们查看那些输出。
- en: 'Some other useful commands are as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 其他一些有用的命令如下：
- en: '`pm2 status`: Lists all the commands PM2 is currently managing, and their status'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pm2 status`：列出PM2当前正在管理的所有命令及其状态'
- en: '`pm2 stop SERVICE`: Stops the named service'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pm2 stop SERVICE`：停止命名服务'
- en: '`pm2 start SERVICE` or `pm2 restart SERVICE`: Starts the named service'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pm2 start SERVICE`或`pm2 restart SERVICE`：启动命名服务'
- en: '`pm2 delete SERVICE`: Makes PM2 forget about the named service'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pm2 delete SERVICE`：使PM2忘记命名服务'
- en: There are several other commands, and the PM2 website contains complete documentation
    for them. [https://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/](https://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/)
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他几个命令，PM2网站包含了完整的文档。[https://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/](https://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/)
- en: 'For the moment, let''s shut it down and delete the managed process:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时，让我们关闭它并删除受管进程：
- en: '[PRE21]js\1'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE21]js\1'
- en: This records for us the dependency on PM2, so it can easily be installed, along
    with some useful scripts we can run with PM2.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们记录了对PM2的依赖，因此可以轻松安装它，以及一些有用的脚本可以在PM2上运行。
- en: 'Then in the same directory, create an `ecosystem.json` file, containing the
    following:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在同一目录中，创建一个包含以下内容的`ecosystem.json`文件：
- en: '[PRE22]js\1'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE22]js\1'
- en: This is the same as for `pm2-notes`, with the names changed.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这与`pm2-notes`相同，只是名称不同。
- en: 'Then, in `pm2-userauth`, create a file named `ecosystem.json` containing the
    following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`pm2-userauth`中，创建一个名为`ecosystem.json`的文件，其中包含以下内容：
- en: '[PRE23]js\1'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE23]js\1'
- en: Doing so starts the service running on both server instances. The `npm run logs` command
    lets us see the log output as it happens. We've configured both services in a
    more DevOps-friendly logging configuration, without the DEBUG log enabled, and
    using the *common* log format.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做会启动两个服务器实例上的服务。 `npm run logs` 命令让我们可以实时查看日志输出。我们已经在更符合DevOps的日志配置中配置了两个服务，没有启用DEBUG日志，并且使用了*common*日志格式。
- en: For testing, we go to the same URL as before, but to port `80` rather than port
    `3000`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对于测试，我们访问与之前相同的URL，但是端口改为`80`而不是`3000`。
- en: 'Because the Notes service on `svc-notes` is now running on port `80`, we need
    to update the Twitter application configuration again, as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`svc-notes`上的Notes服务现在在端口`80`上运行，我们需要再次更新Twitter应用程序的配置，如下所示：
- en: '![](img/86efbfc1-e3a4-402c-8cce-22a36e1d88da.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86efbfc1-e3a4-402c-8cce-22a36e1d88da.png)'
- en: This drops the port `3000` from the URLs on the server. The application is no
    longer on port `3000`, but on port `80`, and we need to tell Twitter about this
    change.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从服务器的URL中删除端口`3000`。应用程序不再在端口`3000`上运行，而是在端口`80`上运行，我们需要告诉Twitter这个变化。
- en: Integrating the PM2 setup as persistent background processes
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将PM2设置集成为持久后台进程
- en: The *Notes* application should be fully functioning. There is one remaining
    small task to perform, and that is to integrate it with the OS.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*Notes*应用程序应该完全正常运行。还有一个小任务要完成，那就是将其与操作系统集成。'
- en: The traditional way on Unix-like systems is to add a shell script in a directory
    in `/etc`. The Linux community has defined the LSB Init Script format for this
    purpose, but since each OS has a different standard for scripts to manage background
    processes, PM2 has a command to generate the correct script for each.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在类Unix系统上的传统方法是在`/etc`目录中的一个目录中添加一个shell脚本。Linux社区为此目的定义了LSB Init Script格式，但由于每个操作系统对于管理后台进程的脚本有不同的标准，PM2有一个命令可以为每个操作系统生成正确的脚本。
- en: 'Let''s start with `svc-userauth`, and run these commands:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`svc-userauth`开始，运行这些命令：
- en: '[PRE24]js\1'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE24]js\1'
- en: The machines should restart correctly, and with no intervention on our part,
    the services will be running. You should be able to put the *Notes* application
    through its paces and see that it works. The Twitter login functionality will
    not work at this time because we did not supply Twitter tokens.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 机器应该能够正确重启，并且在我们不进行干预的情况下，服务将会运行。您应该能够对*Notes*应用程序进行测试，并查看它是否正常工作。此时Twitter登录功能将无法使用，因为我们没有提供Twitter令牌。
- en: 'It is especially informative to run this on each server:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在每台服务器上运行这个命令尤其有益：
- en: '[PRE25]js\1'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE25]js\1'
- en: This, of course, shuts down the service instances. Because of the work we've
    done, you'll be able to start them back up at any time.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这将关闭服务实例。由于我们所做的工作，您随时可以重新启动它们。
- en: We've learned a lot in this section about configuring the *Notes* application
    as a managed background process. With a collection of shell scripts and configuration
    files, we put together a system to manage these services as background processes
    using PM2\. By writing our own scripts, we got a clearer idea of how the underlying
    plumbing works.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们学到了很多关于将*Notes*应用程序配置为受管后台进程的知识。通过一系列shell脚本和配置文件，我们组建了一个系统，使用PM2来管理这些服务作为后台进程。通过编写我们自己的脚本，我们更清楚地了解了底层的工作原理。
- en: With that, we are ready to wrap up the chapter.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们就可以结束本章了。
- en: Summary
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started a journey to learn about deploying Node.js services
    to live servers. The goal was to learn deployment to cloud hosting, but to get
    there we learned the basics of getting reliable background processes on Linux
    systems.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开始了解将Node.js服务部署到生产服务器的过程。目标是学习部署到云托管，但为了达到这个目标，我们学习了在Linux系统上获得可靠后台进程的基础知识。
- en: We started by reviewing the Notes application architecture and seeing how that
    will affect deployment. That enabled us to understand the requirements for server
    deployment.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先回顾了Notes应用程序的架构，并看到这将如何影响部署。这使我们能够了解服务器部署的要求。
- en: Then we learned the traditional way to deploy services on Linux using an init
    script. To do that, we learned how to use PM2 to manage processes, and used it
    to integrate as a persistent background process. PM2 is a useful tool for managing
    background processes on Unix/Linux systems. Deploying and managing persistence
    is a key skill for anyone developing web applications.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们学习了在Linux上使用init脚本部署服务的传统方法。为此，我们学习了如何使用PM2来管理进程，并将其集成为持久后台进程。PM2是Unix/Linux系统上管理后台进程的有用工具。部署和管理持久性是任何开发Web应用程序的关键技能。
- en: While that was performed on your laptop, the exact same steps could be used
    on a public server such as a VPS rented from a web hosting company. With a little
    bit of work, we could use these scripts to set up a test server on a public VPS.
    We do need to work on better automation since the DevOps team requires fully automated
    deployments.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是在您的笔记本电脑上执行的，但完全相同的步骤可以在公共服务器上执行，比如从Web托管公司租用的VPS。通过一点工作，我们可以使用这些脚本在公共VPS上设置一个测试服务器。我们需要更好的自动化工作，因为DevOps团队需要完全自动化的部署。
- en: Even in this age of cloud hosting platforms, many organizations deploy services
    using the same techniques we discussed in this chapter. Instead of cloud-based
    deployments, they rent one or a few VPSes. But even in cloud-based deployments
    using Docker, Kubernetes, and the like, the developer must know how to implement
    a persistent service on Unix-like systems. Docker containers are typically Linux
    environments, and must contain reliable persistent background tasks that are observable
    and maintainable.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在云托管平台的时代，许多组织仍然使用我们在本章讨论的相同技术部署服务。他们不使用基于云的部署，而是租用一个或几个VPS。但即使在使用Docker、Kubernetes等云基部署时，开发人员也必须知道如何在类Unix系统上实现持久服务。Docker容器通常是Linux环境，必须包含可靠的持久后台任务，这些任务是可观察和可维护的。
- en: 'In the next chapter, we will pivot to a different deployment technology: Docker.
    Docker is a popular system for packaging application code in a *container* that
    can be executed on our laptop or executed unchanged at scale on a cloud hosting
    platform.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将转向不同的部署技术：Docker。Docker是一种流行的系统，用于将应用程序代码打包在一个*容器*中，在我们的笔记本电脑上执行，或者在云托管平台上按比例执行而不改变。
