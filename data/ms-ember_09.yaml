- en: Chapter 9. Logging, Debugging, and Error Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章：记录、调试和错误管理
- en: 'Until now, we have learned the basics of architecting and building Ember.js
    applications. In this chapter, we will learn how to debug these applications in
    order to not only reduce development time, but also to make development more fun.
    We will, therefore, cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了构建 Ember.js 应用程序的基础知识。在本章中，我们将学习如何调试这些应用程序，不仅为了减少开发时间，还为了使开发更加有趣。因此，我们将涵盖以下主题：
- en: Logging
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录
- en: Tracing events
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪事件
- en: Debugging errors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试错误
- en: Using the Ember.js inspector
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ember.js 检查器
- en: Logging and debugging
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录和调试
- en: Ember.js can be downloaded in two formats that are meant to be used in development
    and production environments accordingly. The development (magnified) build is
    recommended to be used during the application development period for easier debugging.
    There are various ways to log and inspect objects created inside an application.
    We will discuss how to log and debug each of these objects in detail.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Ember.js可以以两种格式下载，分别适用于开发和生产环境。建议在应用程序开发期间使用放大（开发）构建，以便更容易进行调试。有各种方法可以记录和检查应用程序内部创建的对象。我们将详细讨论如何记录和调试这些对象中的每一个。
- en: Objects
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象
- en: 'Besides the logging functions already provided by the browser''s `console`
    object, Ember.js provides the following `Ember.Logger` logging utilities that
    are specifically meant to log Ember.js objects:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 除了浏览器`console`对象提供的记录函数之外，Ember.js还提供了以下`Ember.Logger`记录工具，这些工具专门用于记录 Ember.js
    对象：
- en: '`assert`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assert`'
- en: '`debug`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debug`'
- en: '`error`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error`'
- en: '`info`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info`'
- en: '`log`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log`'
- en: '`warn`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`warn`'
- en: 'Ember.js bindings can be logged as they occur. To enable this logging, add
    the following code to a program before the application is initialized:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Ember.js绑定可以在它们发生时进行记录。要启用此记录，请在应用程序初始化之前将以下代码添加到程序中：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Most browsers allow setting breakpoints at predetermined points in an application.
    Breakpoints pause the execution of a program using the `debugger` keyword. Pausing
    a program can help troubleshoot problems as well as trace events. For example,
    we could set a breakpoint that will let us know whether a property was computed
    as expected:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数浏览器允许在应用程序的预定点设置断点。断点使用`debugger`关键字暂停程序的执行。暂停程序可以帮助解决问题以及跟踪事件。例如，我们可以设置一个断点，以了解一个属性是否按预期计算：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This creates a breakpoint, as shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个断点，如下面的截图所示：
- en: '![Objects](img/00013.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![对象](img/00013.jpeg)'
- en: Hitting the *F8* key resumes the execution of the application. Multiple breakpoints
    could be set up to trace the execution of an event. The sidebar on the right-hand
    side of the developer tools could then be used to enable, disable, or inspect
    these points.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*F8*键可以恢复应用程序的执行。可以设置多个断点来跟踪事件的执行。然后可以使用开发者工具右侧的侧边栏来启用、禁用或检查这些点。
- en: Router and routes
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由和路由
- en: 'When an application transitions from one route to another, it may be necessary
    to trace these events in the case of misbehavior. Enabling this behavior is easy:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序从一个路由转换到另一个路由时，在出现异常行为的情况下，可能需要跟踪这些事件。启用此行为很简单：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'More detailed logging can be enabled by additionally passing the `LOG_TRANSITIONS_INTERNAL`
    option as `true`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过此外传递`LOG_TRANSITIONS_INTERNAL`选项为`true`可以启用更详细的记录：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Even with this simple application, running it will log the following transition:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是这样一个简单的应用程序，运行它也会记录以下转换：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The application controller houses two useful pieces of information about the
    current application state. To get the current application route name, we will
    reference this from the application controller, shown as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序控制器包含有关当前应用程序状态的两个有用信息。要获取当前应用程序的路由名称，我们将从应用程序控制器引用，如下所示：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The full path of this current route could be looked up appropriately, as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当前路由的完整路径可以适当查找，如下所示：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Any instantiated route can be referenced from the application container, shown
    as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 任何实例化的路由都可以从应用程序容器中引用，如下所示：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Templates
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板
- en: 'As we''ve seen time and again, templates can be looked up from the `Ember.TEMPLATES`
    object; for example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们一次又一次看到的，可以从`Ember.TEMPLATES`对象中查找模板；例如：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Breakpoints can also be set right from templates! For example, consider that
    we have an `index` template defined as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 断点也可以直接从模板中设置！例如，考虑我们有一个如下定义的`index`模板：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We may want to inspect the rendering of this template by using the `debugger`
    expression:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能想通过使用 `debugger` 表达式来检查此模板的渲染：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Logging from the template is also possible using the `log` expression:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `log` 表达式也可以从模板中进行记录：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This logs the route's model to the browser's console.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将路由的模型记录到浏览器的控制台。
- en: Controllers
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器
- en: 'A specific controller can be looked up globally via the main application container:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过主应用程序容器全局查找特定的控制器：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This application container registers classes to be instantiated by the application,
    which can, in turn, be referenced. Note that the preceding example should be used
    for debug purposes only. Controller dependency should instead be used to access
    other controllers from routes and controllers, as shown in the following example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序容器注册由应用程序实例化的类，这些类反过来可以被引用。请注意，前面的示例仅应用于调试目的。控制器依赖项应代替从路由和控制器中访问其他控制器，如下面的示例所示：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, we can enable logs that will indicate generation of controllers by
    passing another option during application instantiation, as shown in the following
    example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以在应用程序实例化期间传递另一个选项来启用指示控制器生成的日志，如下面的示例所示：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Views
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图
- en: 'Instantiated views have unique IDs and can therefore be looked up accordingly,
    as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 实例化的视图具有唯一的 ID，因此可以相应地查找，如下所示：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Just as with routes, we can also log view events on route transitions. This
    may be useful in cases where we need to verify whether registered view classes
    are being used. This behavior can be enabled as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 就像路由一样，我们也可以在路由转换时记录视图事件。在需要验证注册的视图类是否被使用的情况下，这可能很有用。此行为可以通过以下方式启用：
- en: '[PRE16]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Using the Ember.js inspector
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ember.js 检查器
- en: 'An Ember.js application can be inspected via a browser extension that is available
    for Chrome, Opera, and Firefox. This extension lets you inspect objects in your
    application from an Ember.js tab that is created in the developer tools. To get
    started in Chrome, you''ll need to do the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Ember.js 应用程序可以通过适用于 Chrome、Opera 和 Firefox 的浏览器扩展进行检查。此扩展允许您从开发者工具中创建的 Ember.js
    标签页检查您的应用程序中的对象。要在 Chrome 中开始使用，您需要执行以下操作：
- en: Visit `chrome://flags` and ensure **Experimental Extension APIs** is enabled.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 `chrome://flags` 并确保 **实验性扩展 API** 已启用。
- en: Install the extension at [https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi](https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi).
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi](https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi)
    安装扩展。
- en: Restart Chrome.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动 Chrome。
- en: Open your Ember.js application and press the *Ctrl* + *U* keys to launch the
    developer tools.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的 Ember.js 应用程序并按 *Ctrl* + *U* 键以启动开发者工具。
- en: 'An **Ember** tab should have been created next to the **Console** tab, as shown
    in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 应该在 **控制台** 标签旁边创建一个 **Ember** 标签，如下面的截图所示：
- en: '![Using the Ember.js inspector](img/00014.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Ember.js 检查器](img/00014.jpeg)'
- en: 'From the sidebar, clicking on **View Tree** gives detailed information about
    the current state of the application, as shown in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从侧边栏中，点击 **视图树** 可以获得有关应用程序当前状态的详细信息，如下面的截图所示：
- en: '![Using the Ember.js inspector](img/00015.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Ember.js 检查器](img/00015.jpeg)'
- en: 'The next tab shows all the routes, views, controllers, and templates registered
    in the application. Here is a screenshot taken from the **Todos** application
    used in the previous chapter:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 下一张标签页显示了应用程序中注册的所有路由、视图、控制器和模板。以下是从上一章中使用的 **Todos** 应用程序中捕获的截图：
- en: '![Using the Ember.js inspector](img/00016.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Ember.js 检查器](img/00016.jpeg)'
- en: 'If an application uses Ember.js data, the **Data** tab will display all the
    loaded models:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序使用 Ember.js 数据，**数据** 标签将显示所有加载的模型：
- en: '![Using the Ember.js inspector](img/00017.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Ember.js 检查器](img/00017.jpeg)'
- en: Client-side tracing
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端跟踪
- en: 'When developing an Ember.js or any other MVC application, it may be wise to
    trace events that occur in the application. Tracing events has the benefit of
    yielding data that becomes meaningful when presented as graphs. A simple tracer
    could be implemented by logging the timestamp of predetermined points of an ongoing
    event. For example, let''s create an application that traces progress in loading
    models from the server:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发 Ember.js 或任何其他 MVC 应用程序时，追踪应用程序中发生的事件可能是一个明智的选择。追踪事件的好处是，当以图形形式呈现时，可以产生有意义的统计数据。可以通过记录进行中的事件预定的点的戳记来实现一个简单的追踪器。例如，让我们创建一个追踪从服务器加载模型进度的应用程序：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will produce logs similar to the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生类似于以下代码的日志：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Graphing this data could help us gain an insight into the performance of our
    application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制这些数据可以帮助我们深入了解我们应用程序的性能。
- en: Error management
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误管理
- en: 'In addition to saving logs back to the server, we could also `POST` any errors
    that could occur in the application by the following signature:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将日志保存回服务器外，我们还可以通过以下签名`POST`应用程序中可能发生的任何错误：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We just learned how to log events as well as debug bottlenecks in our Ember.js
    applications. A lot of development time could be saved as a result of the proper
    logging and tracing of events in client-side applications. In the next chapter,
    we'll learn how to write and run tests for our applications.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚学习了如何在 Ember.js 应用程序中记录事件以及调试瓶颈。通过在客户端应用程序中正确记录和跟踪事件，可以节省大量的开发时间。在下一章中，我们将学习如何为我们的应用程序编写和运行测试。
