- en: Chapter 5. Dynamic Visualforce Bindings
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 动态Visualforce绑定
- en: The dynamic Visualforce binding is one of the greatest features of the Spring
    '11 release. We can use this feature to build generic Visualforce pages without
    thinking which record fields have to be shown on the page. The record fields are
    determined at runtime rather than compile time. This is a powerful feature which
    allows us to minimize the code (Visualforce and Apex code). Otherwise, we have
    to write more queries, and have to populate lists of records, and render more
    fields. Using the dynamic Visualforce binding, we can develop a single page that
    renders differently for various users based on their authorizations or preferences.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 动态Visualforce绑定是Spring '11版本中最大的特性之一。我们可以使用这个特性来构建通用的Visualforce页面，而无需考虑页面上必须显示哪些记录字段。记录字段是在运行时而不是编译时确定的。这是一个强大的特性，它允许我们最小化代码（Visualforce和Apex代码）。否则，我们必须编写更多的查询，填充记录列表，并渲染更多的字段。使用动态Visualforce绑定，我们可以开发一个页面，根据不同用户的授权或偏好以不同的方式渲染。
- en: 'This chapter covers the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Using dynamic references with standard objects and custom objects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标准对象和自定义对象的动态引用
- en: Referencing Apex Maps and Lists
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用Apex Maps和Lists
- en: Working with field sets
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与字段集一起工作
- en: Dynamic references to global variables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态引用全局变量
- en: Let's learn about dynamic Visualforce binding…
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解动态Visualforce绑定...
- en: Using dynamic references with standard objects and custom objects
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标准对象和自定义对象的动态引用
- en: 'Dynamic Visualforce binding is supported for both standard and custom objects
    in Salesforce. We can use dynamic binding in the following form:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce支持标准对象和自定义对象的动态Visualforce绑定。我们可以使用以下形式的动态绑定：
- en: '`reference[expression]`'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`reference[expression]`'
- en: 'Let''s discuss the preceding form in detail:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细讨论前面的形式：
- en: '`reference`: This can be an sObject, an Apex class, or a global variable.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reference`：这可以是一个sObject、Apex类或全局变量。'
- en: '`expression`: This can be the name of the field or a related object. If it
    is a related object, then recursively-selected fields or further related objects
    can be used.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expression`：这可以是字段名称或相关对象。如果是相关对象，则可以使用递归选择的字段或进一步相关对象。'
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Dynamic bindings can be used in the page where formula expressions are valid.
    It is used with the `{!}` notation. If it is referenced from an Apex class, then
    the particular attribute (sObject or variable) must be public or global.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 动态绑定可以在公式表达式有效的页面上使用。它使用`{!}`符号。如果从Apex类中引用，则特定的属性（sObject或变量）必须是公共的或全局的。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Defining relationships**: If there are object relationships to be evaluated
    in expressions, they become complex expressions. Consider our example, where the
    `Order__c` custom object has a relationship with the `Customer__c` custom object.
    The relationship between these two objects is called `Orders__r`. The `Customer__c`
    object has the `Email__c` field. The same `Email__c` field will be returned by
    the following dynamically-cast lookups:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义关系**：如果在表达式中需要评估对象关系，它们会变得复杂。考虑我们的例子，其中`Order__c`自定义对象与`Customer__c`自定义对象有关联。这两个对象之间的关系称为`Orders__r`。`Customer__c`对象具有`Email__c`字段。以下动态类型转换的查找将返回相同的`Email__c`字段：'
- en: '`Order__c.Customer__c[''Email__c'']`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Order__c.Customer__c[''Email__c'']`'
- en: '`Order__c[''Customer__c.Email__c'']`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Order__c[''Customer__c.Email__c'']`'
- en: '`Order__c[''Customer__c''][''Email__c'']`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Order__c[''Customer__c''][''Email__c'']`'
- en: '`Order__c.Orders__r[Email__c]`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Order__c.Orders__r[Email__c]`'
- en: '`Order__c[Orders__r.Email__c]`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Order__c[Orders__r.Email__c]`'
- en: '`Order__c[Orders__r][Email__c]`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Order__c[Orders__r][Email__c]`'
- en: A dynamic Visualforce page must have a standard controller and further implementations
    can be done in an associated controller extension. The reason is that Visualforce
    automatically handles the optimization of the SOQL queries performed by the page's
    `StandardController` or `StandardSetController` object by loading only the used
    fields.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 动态Visualforce页面必须有一个标准控制器，并且进一步的实现可以在关联的控制器扩展中完成。原因是Visualforce自动处理页面`StandardController`或`StandardSetController`对象执行的SOQL查询的优化，只加载使用的字段。
- en: 'When we create a page with static references, the page can identify the fields
    and objects during compilation. Then the `StandardController` object will transform
    the particular fields and objects into SOQL queries. But the dynamic references
    are evaluated at runtime and not at compile time. This means that the dynamic
    references are evaluated after performing the SOQL query of the `StandardController`
    object. Therefore, when we use dynamic references and we have to provide some
    extra information to the controller extension, we can use the `addFields()` method
    to add any number of additional fields. This method will pass a list of additional
    fields to `StandardController` and those fields will load without giving runtime
    errors. The usage of the `addField()` method is as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建具有静态引用的页面时，页面可以在编译期间识别字段和对象。然后`StandardController`对象将特定的字段和对象转换为SOQL查询。但是，动态引用是在运行时而不是在编译时评估的。这意味着动态引用是在执行`StandardController`对象的SOQL查询之后评估的。因此，当我们使用动态引用并需要向控制器扩展提供一些额外信息时，我们可以使用`addFields()`方法添加任意数量的额外字段。此方法将传递一个额外字段列表给`StandardController`，这些字段将加载而不会产生运行时错误。`addField()`方法的用法如下：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The following example shows the usage of dynamic Visualforce binding. This page
    shows an order record with some editable fields. Some fields are related to `object(Customer__c)`.
    We can understand the usage of dynamic reference with object relationship traversing.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了动态Visualforce绑定的用法。此页面显示了一个带有一些可编辑字段的订单记录。一些字段与`object(Customer__c)`相关。我们可以通过对象关系遍历来理解动态引用的用法。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following code is the controller extension of the preceding Visualforce
    page. The `DynamicOrderExtension` controller extension has a list of strings called
    `editableFields` and this string list contains some fieldnames of the `Order__c`
    object and some fields of related object (`Customer__c`) of `Order__c`. In this
    example, editable fields are hardcoded. But we can get information for your dynamic
    references by using the Apex''s `Schema.sObjectType` methods. This will make a
    more dynamic and powerful reference. For example, `Schema.SobjectType.Order__c.fields.getMap()`
    returns a map with the name of the `Order__c` fields. The preceding markup has
    the `<apex:repeat>` tag, which is used to loop the `editableFields` string list
    and the `<apex:inputField>` tag which displays that particular returned string.
    It represents the field names of the order and the related object''s field names.
    The following markup line displays the dynamic reference:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是前面Visualforce页面的控制器扩展。`DynamicOrderExtension`控制器扩展有一个名为`editableFields`的字符串列表，这个字符串列表包含`Order__c`对象的一些字段名以及`Order__c`的相关对象（`Customer__c`）的一些字段。在这个例子中，可编辑字段是硬编码的。但我们可以通过使用Apex的`Schema.sObjectType`方法来获取动态引用的信息。这将使引用更加动态和强大。例如，`Schema.SobjectType.Order__c.fields.getMap()`返回一个包含`Order__c`字段名的映射。前面的标记中包含`<apex:repeat>`标签，用于循环`editableFields`字符串列表，以及`<apex:inputField>`标签，用于显示返回的特定字符串。它表示订单字段和相关对象字段的名字。下面的标记行显示了动态引用：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This page needs to be accessed with the ID of a valid case record specified
    as the id query parameter. For example, [https://c.ap1.visual.force.com/apex/DynamicBindingExample?id=a02900000086Hlr](https://c.ap1.visual.force.com/apex/DynamicBindingExample?id=a02900000086Hlr).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面需要通过指定为id查询参数的有效案例记录ID来访问。例如，[https://c.ap1.visual.force.com/apex/DynamicBindingExample?id=a02900000086Hlr](https://c.ap1.visual.force.com/apex/DynamicBindingExample?id=a02900000086Hlr)。
- en: Referencing Apex Maps and Lists
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引用Apex Maps和Lists
- en: 'Apex Maps and Lists can be dynamically refered in a Visualforce page. Apex
    Lists are vastly used with the `<apex:pageBlockTable>` and `<apex:repeat>` tags.
    In our preceding example (under the *Using Dynamic references with Standard objects
    and custom object* section) we have already seen the dynamic references of Apex
    List. The following example shows the dynamic reference of an Apex Map. This is
    the markup of the `DynamicExampleListMap` page:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Apex Maps和Lists可以在Visualforce页面中动态引用。Apex Lists与`<apex:pageBlockTable>`和`<apex:repeat>`标签广泛使用。在我们的前面例子（在*使用标准对象和自定义对象的动态引用*部分）中，我们已经看到了Apex
    List的动态引用。以下示例展示了Apex Map的动态引用。这是`DynamicExampleListMap`页面的标记：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following is the related custom controller. The `customerMap` object contains
    the customer''s records and the pick list is dynamically filled with the appropriate
    values from the Map. We can select a letter from the pick list and the customer
    list, and then rearrange the result according to the selected letter. The `customerMap`
    object returns the corresponding customer list at runtime by using the `{!customerMap[selectedKey]}`
    dynamic reference:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与之相关的自定义控制器。`customerMap`对象包含客户记录，下拉列表会根据Map中的适当值动态填充。我们可以从下拉列表和客户列表中选择一个字母，然后根据所选字母重新排列结果。`customerMap`对象通过使用`{!customerMap[selectedKey]}`动态引用在运行时返回相应的客户列表：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Working with field sets
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与字段集一起工作
- en: 'A field set is a group of fields which can be defined in a declarative manner.
    Field sets are available in Visualforce pages in the API Version 21.0\. These
    field sets can be displayed on a Visuaforce page by dynamic binding. For example,
    suppose we have created a field set (field set name: `CustomerDetails`) with the
    `Email__c`, `Name`, and `Address__c` fields of the customer object. We can refer
    to the `CustomerDetails` field set in Visualforce as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 字段集是一组可以以声明方式定义的字段。字段集在API版本21.0的Visualforce页面上可用。这些字段集可以通过动态绑定在Visualforce页面上显示。例如，假设我们创建了一个字段集（字段集名称：`CustomerDetails`），其中包含客户对象的`Email__c`、`Name`和`Address__c`字段。我们可以在Visualforce中如下引用`CustomerDetails`字段集：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When we want to create a managed package or add/ remove/reorder fields in the
    field set, we can accomplish that without modifying any code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要创建一个管理包或在字段集中添加/删除/重新排序字段时，我们可以不修改任何代码就完成这些操作。
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: A Visualforce page can have up to 50 field sets.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Visualforce页面最多可以有50个字段集。
- en: Summary
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the powerful feature of dynamic binding, which
    was released by Spring'11\. We became familiar with the usage of standard and
    custom object dynamic references. And we acquired a good knowledge of referencing
    Apex Maps/List and the way of using field sets. We have also seen the usage of
    dynamic reference of global variables. With all these, we learned the mechanisms
    of minimizing the Visualforce and Apex code.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了Spring'11发布的一项强大功能——动态绑定。我们熟悉了标准对象和自定义对象动态引用的用法。我们还对引用Apex Maps/List以及使用字段集的方式有了很好的了解。我们还看到了全局变量动态引用的用法。通过所有这些，我们学习了最小化Visualforce和Apex代码的机制。
