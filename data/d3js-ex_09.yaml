- en: Chapter 9. Complex Shapes Using Paths
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 使用路径的复杂形状
- en: In [Chapter 3](ch03.html "Chapter 3. Creating Visuals with SVG"), *Creating
    Visuals with SVG*, we briefly examined the concept of paths. We saw that we could
    use paths and their associated mini-language to create multi-segment renderings
    by creating a sequence of commands. These paths, although very powerful, can be
    cumbersome to create manually.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章. 使用SVG创建视觉图形")中，我们简要探讨了路径的概念。我们了解到，我们可以通过创建一系列命令来使用路径及其相关的迷你语言创建多段渲染。虽然这些路径功能强大，但手动创建可能会很繁琐。
- en: But don't fret, as D3.js provides a number of objects to create complex paths
    using just a few JavaScript statements. These **path generators** take much of
    the pain out of creating complex paths manually, as they do the heavy lifting
    of assembling the sequence of commands automatically.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但不必担心，因为D3.js提供了一系列对象，只需几行JavaScript语句就可以创建复杂的路径。这些**路径生成器**在手动创建复杂路径时减轻了许多痛苦，因为它们自动组装命令序列。
- en: Additionally, an important type of graph we have not looked at in this book
    is a line graph. This has been purposefully pushed off until now, as it is the
    most commonly used to create lines using path generators. After the examples in
    this chapter, the power of the path to create lines will be evident.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这本书中我们尚未探讨的一种重要类型的图表是折线图。这一部分内容是有意推迟到现在的，因为它是最常用于通过路径生成器创建线条的。在本章的示例之后，路径创建线条的能力将变得显而易见。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: An overview of path data generators
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径数据生成器的概述
- en: Lines and area generators
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线条和区域生成器
- en: Arcs and pie generators
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弧线和饼图生成器
- en: Symbols generators
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符号生成器
- en: Diagonals and radial generators
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对角线和径向生成器
- en: Line interpolators
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线性插值器
- en: An overview of path data generators
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路径数据生成器的概述
- en: D3.js goes to great lengths to make using SVG easy, particularly when creating
    complex paths. To do this, D3 provides a number of helper functions referred to
    as path generators that have been created to handle the gory details of path generation
    from a set of data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js不遗余力地使使用SVG变得简单，尤其是在创建复杂路径时。为此，D3提供了一系列称为路径生成器的辅助函数，这些函数被创建来处理从一组数据中生成路径的繁琐细节。
- en: 'The generators we examine will follow a common pattern of usage, so once you
    learn to use one, the use of the others will come naturally. These steps include:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要探讨的生成器将遵循一种常见的使用模式，所以一旦你学会了如何使用一个，其他的使用方法就会自然而然地掌握。这些步骤包括：
- en: Creating the `generator` object.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`generator`对象。
- en: Specifying accessor functions that can be used to find the *X* and *Y* values.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定可以用来找到*X*和*Y*值的访问器函数。
- en: Calling any additional methods to specify various rendering instructions.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用任何额外的函数来指定各种渲染指令。
- en: Adding a path to the visual.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将路径添加到视觉中。
- en: Specifying the data using `.datum()`on that path.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该路径上使用`.datum()`指定数据。
- en: And finally, setting the `d` attribute of the path to the generator, which tells
    the path where to find the `generator` object for the path.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将路径的`d`属性设置为生成器，这告诉路径在哪里找到该路径的`generator`对象。
- en: Once these are completed and D3.js renders the visual, it uses the generator
    that is attached to a `d` attribute and creates path commands based on your data.
    This is also why we use `.datum()` instead of `.data()`, as datum assigns the
    data to just that one element and does not force the execution of an enter-update-exit
    loop on that data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些步骤完成，D3.js渲染出视觉图形后，它将使用附加到`d`属性上的生成器，并根据你的数据创建路径命令。这也是为什么我们使用`.datum()`而不是`.data()`的原因，因为datum只将数据分配给单个元素，并不会强制在该数据上执行进入-更新-退出循环。
- en: Now let's examine doing this with various common generators—this will be fun!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过一些常见的生成器来探讨如何实现这一点——这将很有趣！
- en: Creating a sequence of lines
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一系列线条
- en: 'The line generator creates the necessary commands to draw a sequence of lines
    that are connected to each other:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 线生成器创建必要的命令来绘制一系列相互连接的线条：
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (9.1): [http://goo.gl/eAgBjL](http://goo.gl/eAgBjL)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (9.1): [http://goo.gl/eAgBjL](http://goo.gl/eAgBjL)'
- en: 'The preceding example creates a single line path generator and renders it twice,
    resulting in the following graphics:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例创建了一个单独的线路径生成器并将其渲染两次，结果如下图形：
- en: '![Creating a sequence of lines](img/B04230_09_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![创建一系列线条](img/B04230_09_01.jpg)'
- en: 'The path generator is created with the following data and using a `d3.svg.line()`
    object. On that object, we call two functions, `x()` and `y()`, which we give
    a function that tells the generator how to locate the *X* and *Y* values for each
    datum:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 路径生成器是通过以下数据和 `d3.svg.line()` 对象创建的。在该对象上，我们调用两个函数，`x()` 和 `y()`，我们提供一个函数来告诉生成器如何为每个数据点定位
    *X* 和 *Y* 值：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The next step is to add a path, call its .`datum()` function passing the data,
    and setting the `d` attribute at a minimum to specify which generator to use.
    The example creates two paths that use the same data and generator but apply a
    different fill:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是添加一个路径，调用其 `.datum()` 函数传递数据，并将 `d` 属性至少设置以指定要使用哪个生成器。示例创建了两个路径，它们使用相同的数据和生成器，但应用了不同的填充：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This path specifies two lines. The default operation for a line path is to connect
    the last point with the first and fill in the internals. In the case of the first
    path, this is a black fill and results in the black triangle (if you zoom in,
    you will see the `steelblue` outline on two of the sides). The latter path sets
    the fill to empty, so the result is just the two lines.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此路径指定了两条线。线路径的默认操作是将最后一个点与第一个点连接并填充内部。在第一个路径的情况下，这是一个黑色填充，结果是一个黑色三角形（如果你放大，你会看到两边的
    `steelblue` 轮廓）。后者路径将填充设置为空，所以结果只是两条线。
- en: This example also demonstrates using a single path generator but applying a
    transform and a different style to the actual path.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例还演示了使用单个路径生成器，但应用了转换和不同的样式到实际路径上。
- en: 'Examining the generated SVG, we see that D3.js has created the two paths and
    automatically generated the path data that is assigned to the `d` property of
    the path:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 检查生成的 SVG，我们看到 D3.js 创建了两个路径并自动生成了分配给路径的 `d` 属性的路径数据：
- en: '![Creating a sequence of lines](img/B04230_09_02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![创建线条序列](img/B04230_09_02.jpg)'
- en: Areas
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区域
- en: 'An area path generator allows us to make line plots where the area below the
    line plot is filled in with a particular color. A practical use of these is for
    the creation of area graphs. The following example demonstrates the creation of
    an area graph:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 区域路径生成器允许我们创建填充特定颜色的线形图。这些的实际用途之一是创建面积图。以下示例演示了创建面积图：
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (9.2): [http://goo.gl/7Xmo7u](http://goo.gl/7Xmo7u)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (9.2): [http://goo.gl/7Xmo7u](http://goo.gl/7Xmo7u)'
- en: 'This preceding example results in something that looks like the following image.
    The data is random, so it will be different each time it runs:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例的结果看起来像以下图像。数据是随机的，所以每次运行都会不同：
- en: '![Areas](img/B04230_09_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![区域](img/B04230_09_03.jpg)'
- en: 'The data is generated by generating 100 random numbers between 0 and 30, and
    defining `Y` as the random value and `X` increasing in increments of 10:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是通过生成 0 到 30 之间的 100 个随机数并定义 `Y` 为随机值以及 `X` 以 10 为增量增加来生成的：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The path is generated using a `d3.svg.area()` object:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 路径是通过使用 `d3.svg.area()` 对象生成的：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'An area path generator requires providing three accessor functions:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 区域路径生成器需要提供三个访问器函数：
- en: '`x()`: This specifies where to get the *X* values'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x()`：这指定了获取 *X* 值的位置'
- en: '`y0()`: This gets the position of the baseline of the area'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y0()`：这获取区域基线的位置'
- en: '`y1()`: This retrieves the height at the given `x()` value'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y1()`：这检索给定 `x()` 值的高度'
- en: The actual SVG path is then created and styled similar to the previous example.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的 SVG 路径随后创建并样式化，类似于之前的示例。
- en: Creating arcs, donuts, wedges, and segments
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建弧、甜甜圈、楔形和段
- en: An arc is a slice of a circle that has a portion of it swept through two specific
    angles. An arc swept through a full 360 degrees will actually result in a circle.
    A sweep of less than 360 degrees gives you a wedge of that circle and is often
    called a pie **wedge**.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 弧是圆的一部分，它通过两个特定的角度扫过。通过 360 度完整扫过的弧实际上会形成一个圆。小于 360 度的扫过会给你一个圆的楔形，这通常被称为饼 **楔**。
- en: An arc is created using the `d3.svg.arc()` function. This generator takes four
    parameters, describing the mathematics of the arc. The size of the wedge is defined
    by using the `.outerRadius()` function and an inner radius that is specified using
    `.innerRadius()`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `d3.svg.arc()` 函数创建一个弧。此生成器接受四个参数，描述了弧的数学。楔形的大小是通过使用 `.outerRadius()` 函数和一个使用
    `.innerRadius()` 指定的内半径来定义的。
- en: 'The following example uses an arc to draw a circle:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用弧来绘制圆形：
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (9.3): [http://goo.gl/fJN80J](http://goo.gl/fJN80J)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (9.3): [http://goo.gl/fJN80J](http://goo.gl/fJN80J)'
- en: '![Creating arcs, donuts, wedges, and segments](img/B04230_09_04.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Creating arcs, donuts, wedges, and segments](img/B04230_09_04.jpg)'
- en: 'The code to create the generator is the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 创建生成器的代码如下：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The generator specifies an inner radius of `0` and outer radius of `60`. The
    start and end angles are in radians and sweep out an entire circle.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器指定内半径为 `0` 和外半径为 `60`。起始和结束角度以弧度为单位，扫出一个完整的圆。
- en: 'The following example increases the size of the inner radius to create a donut:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例增加了内半径的大小来创建一个甜甜圈：
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (9.4): [http://goo.gl/NDVPRw](http://goo.gl/NDVPRw)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (9.4): [http://goo.gl/NDVPRw](http://goo.gl/NDVPRw)'
- en: '![Creating arcs, donuts, wedges, and segments](img/B04230_09_05.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![Creating arcs, donuts, wedges, and segments](img/B04230_09_05.jpg)'
- en: 'The only difference in the code is the call to `.innerRadius()`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中唯一的区别是调用 `.innerRadius()`：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We have now created a donut! Now how about an example of creating a pie wedge?
    We can create a pie wedge by specifying an inner radius of `0` and setting the
    start angle and end angle to not sweep out a full 360 degrees, as shown in the
    following example.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经创建了一个甜甜圈！那么，让我们来看一个创建饼形扇区的例子。我们可以通过指定内半径为 `0` 并设置起始角度和结束角度不扫满 360 度来创建一个饼形扇区，如下面的示例所示。
- en: 'To demonstrate, the following example creates a pie wedge sweeping between
    `45` and `105` degrees:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，以下示例创建了一个在 `45` 到 `105` 度之间扫过的饼形扇区：
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (9.5): [http://goo.gl/cNizYk](http://goo.gl/cNizYk)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (9.5): [http://goo.gl/cNizYk](http://goo.gl/cNizYk)'
- en: '![Creating arcs, donuts, wedges, and segments](img/B04230_09_06.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![Creating arcs, donuts, wedges, and segments](img/B04230_09_06.jpg)'
- en: 'The generator for the preceding pie wedge is as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 生成前一个饼形扇区的生成器如下：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A final example for arcs is to create a segment by increasing the inner radius
    of the previous example to be greater than 0:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于弧的一个最终示例是，通过增加前一个示例的内半径使其大于 0 来创建一个扇区：
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (9.6): [http://goo.gl/24djAS](http://goo.gl/24djAS)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (9.6): [http://goo.gl/24djAS](http://goo.gl/24djAS)'
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Creating arcs, donuts, wedges, and segments](img/B04230_09_07.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![Creating arcs, donuts, wedges, and segments](img/B04230_09_07.jpg)'
- en: Creating a pie chart
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Creating a pie chart
- en: One of the most common type of charts is the pie chart (it is also one of the
    most reviled). A pie chart could be created by using multiple arc generators and
    placing them manually.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的一种图表类型是饼图（它也是最被人诟病的一种）。饼图可以通过使用多个弧生成器并手动放置来创建。
- en: To make this simpler, D3.js provides us with a tool to help us generate pies
    and the associated arcs with a generator for pies, `d3.layout.pie()`. From an
    array of data, this function will generate an array of arc specifications that
    we can then use to generate all the pie segments automatically.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个过程更简单，D3.js 提供了一个工具，帮助我们通过饼的生成器 `d3.layout.pie()` 来生成饼和相关的弧。从数据数组中，这个函数将生成一个弧规范数组，然后我们可以使用它来自动生成所有的饼形扇区。
- en: 'So, let''s examine the creation of a pie:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们来检查饼的创建过程：
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (9.7): [http://goo.gl/omVW2n](http://goo.gl/omVW2n)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (9.7): [http://goo.gl/omVW2n](http://goo.gl/omVW2n)'
- en: 'The preceding code results in the following pie chart:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成以下饼图：
- en: '![Creating a pie chart](img/B04230_09_08.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![Creating a pie chart](img/B04230_09_08.jpg)'
- en: 'The example starts by declaring values that represent each piece of the pie
    and then we pass that to the `d3.layout.pie()` function:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 示例首先声明代表饼中每一块的数据值，然后将其传递给 `d3.layout.pie()` 函数：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you examine the contents of `pieSegments,` you will see a series of objects
    similar to the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查 `pieSegments` 的内容，你会看到一系列类似于以下的对象：
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can use this data via an arc generator and generate the pie:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一个弧生成器使用这些数据来生成饼：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Exploding the pie
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Exploding the pie
- en: 'We can make an exploded pie by setting the width of the border of the pie wedges.
    The following example demonstrates this in action. We''ll skip the walkthrough
    of the code, as it''s just adding a `stroke` and `stroke-width` to the previous
    example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过设置饼形扇区的边框宽度来制作一个爆炸式的饼。以下示例展示了这一过程。我们将跳过代码的详细说明，因为它只是在先前的示例中添加了 `stroke`
    和 `stroke-width`：
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (9.8): [http://goo.gl/fhQEau](http://goo.gl/fhQEau)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (9.8): [http://goo.gl/fhQEau](http://goo.gl/fhQEau)'
- en: '![Exploding the pie](img/B04230_09_09.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![Exploding the pie](img/B04230_09_09.jpg)'
- en: Creating a ring graph
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Creating a ring graph
- en: 'We can also easily make this into a ring chart by increasing the inner radius,
    as shown in the following example (with a brief modification to the previous example):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以很容易地将它转换成一个环形图，通过增加内半径，如下面的示例所示（对先前的示例进行简要修改）：
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (9.9): [http://goo.gl/Mk60ws](http://goo.gl/Mk60ws)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (9.9): [http://goo.gl/Mk60ws](http://goo.gl/Mk60ws)'
- en: '![Creating a ring graph](img/B04230_09_10.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![创建环形图](img/B04230_09_10.jpg)'
- en: Creating symbols
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建符号
- en: 'Symbols are little shapes that can be used on a chart, much like how we used
    small circles and squares in the chapter on scatter plots. D3.js comes with a
    generator that creates six symbols: circle, cross, diamond, square, triangle-down,
    and triangle-up.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 符号是可以在图表上使用的小形状，就像我们在散点图章节中使用小圆圈和正方形一样。D3.js附带一个生成器可以创建六个符号：圆形、十字、菱形、正方形、向下三角形和向上三角形。
- en: These symbols are named, and the `d3.svg.symbolTypes` contains an array of the
    names of the available symbol types. A symbol is then created by passing the symbol
    name to the `d3.svg.symbol().type()` function, which returns a path generator
    for the specified symbol.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这些符号有名称，`d3.svg.symbolTypes`包含可用符号类型的名称数组。然后通过将符号名称传递给`d3.svg.symbol().type()`函数来创建一个符号，该函数返回指定符号的路径生成器。
- en: 'An example of rendering the available symbols is available at the following
    link:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下链接中可以找到渲染可用符号的示例：
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (9.10): [http://goo.gl/AM2ErM](http://goo.gl/AM2ErM)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (9.10): [http://goo.gl/AM2ErM](http://goo.gl/AM2ErM)'
- en: 'The preceding code renders the following symbols as the result:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码渲染了以下符号作为结果：
- en: '![Creating symbols](img/B04230_09_11.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![创建符号](img/B04230_09_11.jpg)'
- en: Perhaps they're not the most exciting things in the world, but they are useful
    for representing different data items on scatter plots or as point markers on
    line diagrams.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 也许它们不是世界上最令人兴奋的事情，但它们对于在散点图上表示不同的数据项或在线图的点标记上很有用。
- en: Using diagonals to create curved lines
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用对角线创建曲线线条
- en: 'The diagonal is one of my personal favorites, and it can be used in many complex
    visualizations. This is a concept which I believe is best understood by seeing
    an example:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对角线是我个人最喜欢的一种，它可以用在许多复杂的可视化中。这是一个我认为最好通过示例来理解的概念：
- en: '![Using diagonals to create curved lines](img/B04230_09_12.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![使用对角线创建曲线线条](img/B04230_09_12.jpg)'
- en: The diagonal generator generates the curved lines between one point and a set
    of other points, generating the appropriate curves based on the position of the
    target points.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 对角线生成器生成一个点和一组其他点之间的曲线线条，根据目标点的位置生成适当的曲线。
- en: 'The following example creates the previous image:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例创建了之前的图像：
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (9.11): [http://goo.gl/by9B4S](http://goo.gl/by9B4S)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (9.11): [http://goo.gl/by9B4S](http://goo.gl/by9B4S)'
- en: 'This example starts with defining the source and target positions using JavaScript
    objects, and then, by creating from those an array of objects representing every
    combination of `source` and `target`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子从定义源位置和目标位置使用JavaScript对象开始，然后，通过创建一个表示每个`source`和`target`组合的对象数组：
- en: '[PRE11]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can then generate the curved lines using the following selection, which
    uses a `d3.svg.diagonal()` object as the generator of the path data:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用以下选择生成曲线线条，它使用一个`d3.svg.diagonal()`对象作为路径数据的生成器：
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The circles are not rendered by the diagonal generator. The code renders and
    positions them based on the positions of the source and target points.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 圆形不是由对角生成器渲染的。代码根据源点和目标点的位置渲染和定位它们。
- en: Drawing line graphs using interpolators
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用插值器绘制线图
- en: Now let's examine creating line graphs using a number of the built-in line generators.
    The capability for rendering lines in D3.js is very robust, and can be used to
    generate lines with straight segments, or to fit curves through a series of points
    using a number of different algorithms.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来探讨如何使用内置的线生成器创建线图。在D3.js中渲染线条的功能非常强大，可以用来生成带有直线段的线条，或者使用多种不同的算法通过一系列点拟合曲线。
- en: 'When rendering a line using a line generator, D3.js applies an interpolator
    across your data to determine how to create the path segments that connect your
    data points. The following tables lists the available line interpolators that
    are available:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用线生成器渲染线条时，D3.js会在你的数据上应用一个插值器，以确定如何创建连接数据点的路径段。以下表格列出了可用的线插值器：
- en: '| Interpolator | Operation |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 插值器 | 操作 |'
- en: '| --- | --- |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `linear` | Straight lines between points |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `linear` | 点之间的直线 |'
- en: '| `linear-closed` | Closes the line segment, last point to first, making a
    polygon |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `linear-closed` | 关闭线段，从最后一个点到第一个点，形成一个多边形 |'
- en: '| `step-before` | Step-wise drawing vertically then horizontally |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `step-before` | 先垂直后水平进行步进绘制 |'
- en: '| `step-after` | Step-wise drawing horizontally then vertically |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `step-after` | 先水平后垂直的步进绘制 |'
- en: '| `basis` | Renders a b-spline curve with control points at the ends |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `basis` | 在端点处渲染带有控制点的b样条曲线 |'
- en: '| `basis-open` | Renders a b-spline curve with control points at the ends,
    not closing the loop |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `basis-open` | 在端点处渲染带有控制点的b样条曲线，不闭合环 |'
- en: '| `basic-closed` | Renders a b-spline curve with control points at the ends,
    closing the loop |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `basic-closed` | 在端点处渲染带有控制点的b样条曲线，闭合环 |'
- en: '| `bundle` | Equivalent to basis, but with a tension parameter |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `bundle` | 与`basis`等效，但带有张力参数 |'
- en: '| `cardinal` | A cardinal spline, with control points at the ends |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `cardinal` | 一种基数样条，端点处有控制点 |'
- en: '| `cardinal-open` | A cardinal spline, with control points at the ends; the
    line may not intersect the end points, but will pass through the internal points
    |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `cardinal-open` | 一种基数样条，端点处有控制点；线可能不会与端点相交，但会通过内部点 |'
- en: '| `cardinal-closed` | Closes the cardinal spline into a loop |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `cardinal-closed` | 将基数样条闭合成环 |'
- en: '| `monotone` | A cubic interpolation that preserves monotonicity in y |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `monotone` | 一种保持y值单调性的三次插值 |'
- en: The default is to use a linear interpolator, which essentially draws a straight
    line between each pair of adjacent points. We will take a look at each of these,
    as I think they are worth demonstrating (and are fun!).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下使用线性插值器，它本质上是在每对相邻点之间绘制一条直线。我们将逐一查看这些内容，因为我认为它们值得展示（而且很有趣！）。
- en: 'The example is available at the following link:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 示例可在以下链接找到：
- en: Note
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (9.12): [http://goo.gl/MdjuPz](http://goo.gl/MdjuPz)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (9.12): [http://goo.gl/MdjuPz](http://goo.gl/MdjuPz)'
- en: The application presents the user with two options. One is to select the type
    of interpolation and the other is to select a tension value, which is only used
    when the selected interpolation is bundle.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序向用户提供了两个选项。一个是选择插值类型，另一个是选择张力值，这个值仅在所选插值是`bundle`时使用。
- en: 'The example then generates a cycle of a sine wave that is represented by 8
    points. As an example, the result is the following when linear interpolation is
    selected:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然后示例生成一个由8个点表示的正弦波周期。作为一个例子，当选择线性插值时，结果如下：
- en: '![Drawing line graphs using interpolators](img/B04230_09_13.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![使用插值器绘制线图](img/B04230_09_13.jpg)'
- en: The application starts by creating the dropdown boxes and the main SVG element
    in HTML. It then sets up the scales for the sine wave to map the points into the
    SVG. The first time the page is loaded, and upon every change of a selection for
    interpolation or tension, the `redraw()` function is called and the graph is generated.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序首先在HTML中创建下拉框和主要SVG元素。然后设置正弦波的刻度，将点映射到SVG中。当页面首次加载，以及每次更改插值或张力选择时，都会调用`redraw()`函数并生成图形。
- en: 'The `redraw()` function retrieves the current value from the interpolation
    dropdown and uses it to create the line path generator using the selected value:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`redraw()`函数从插值下拉菜单中检索当前值，并使用所选值创建线路径生成器：'
- en: '[PRE13]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If the selected interpolation is bundle, it also retrieves the selected value
    for the tension and applies that value to the line path generator:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择的插值是`bundle`，它还会检索所选的张力值并将其应用于线路径生成器：
- en: '[PRE14]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The lines are then generated using a path and the associated generator and then
    circles are added at the location of each point.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用路径和相关生成器生成线条，并在每个点的位置添加圆圈。
- en: Now let's examine what each of these interpolations does to render our sine
    wave.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来检查这些插值如何渲染我们的正弦波。
- en: Linear and linear-closed interpolators
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线性与线性闭合插值器
- en: 'The linear interpolator draws straight lines between the points:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 线性插值器在点之间绘制直线：
- en: '![Linear and linear-closed interpolators](img/B04230_09_14.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![线性与线性闭合插值器](img/B04230_09_14.jpg)'
- en: 'Linear closed is a slight variant that also connects the last point to the
    first:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 线性闭合是一个略有变体的选项，它也会将最后一个点连接到第一个点：
- en: '![Linear and linear-closed interpolators](img/B04230_09_15.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![线性与线性闭合插值器](img/B04230_09_15.jpg)'
- en: Step-before and step-after interpolations
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步前和步后插值
- en: The best way to demonstrate a step-before and step-after is just by giving examples.
    But essentially, each pair of points are connected by two lines, one horizontal
    and the other vertical.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 展示步前和步后的最佳方式就是通过给出例子。但本质上，每对点都通过两条线连接，一条水平线和一条垂直线。
- en: 'With step-before, the vertical line come first:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在“步前”模式下，垂直线先出现：
- en: '![Step-before and step-after interpolations](img/B04230_09_16.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![步前和步后插值](img/B04230_09_16.jpg)'
- en: 'A step-after renders the horizontal line first:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 步后首先绘制水平线：
- en: '![Step-before and step-after interpolations](img/B04230_09_17.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![步长前和步长后插值](img/B04230_09_17.jpg)'
- en: Creating curved lines using the basis interpolation
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用基插值创建曲线
- en: A **basis** curve will pass through the end points but may not pass through
    internal points. The internal points influence the curve of the line, but it is
    not necessary that the line runs through any of the internal points.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础**曲线将通过端点，但可能不会通过内部点。内部点影响线的曲线，但线不必穿过任何内部点。'
- en: 'The following is an example of the basis interpolation:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个基础插值的示例：
- en: '![Creating curved lines using the basis interpolation](img/B04230_09_18.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![使用基插值创建曲线](img/B04230_09_18.jpg)'
- en: 'A **basis-open** interpolation does not pass through the end points. It looks
    similar to basis, but with the line not being drawn between the first and second
    points and between the next to last and last points:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础开放**插值不通过端点。它看起来与基础相似，但线不会在第一和第二点之间以及下一到最后一点之间绘制：'
- en: '![Creating curved lines using the basis interpolation](img/B04230_09_19.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![使用基插值创建曲线](img/B04230_09_19.jpg)'
- en: Why would we want this? This would be in the case where the first and last are
    control points and can be changed in the *X* and *Y* values to influence how the
    curve moves through the inner points. Examining this is beyond the scope of this
    book, but I challenge you to take the concepts that you learned in [Chapter 8](ch08.html
    "Chapter 8. Adding User Interactivity"), *Adding User Interactivity*, allowing
    the user to drag the control points around, and see how that changes the flow
    of the line.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么要这样做？这种情况是当第一个和最后一个点是控制点，并且可以在 *X* 和 *Y* 值中更改以影响曲线如何通过内部点。检查这一点超出了本书的范围，但我挑战您将您在
    [第8章](ch08.html "第8章。添加用户交互") 中学到的概念应用到实践中，允许用户拖动控制点，并看看这如何改变线的流动。
- en: '**basis-closed** tells the generator to close the loop and ensure the loop
    is smooth across all points (the small change in code is omitted again). The result
    is the following:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础封闭**告诉生成器关闭循环并确保循环在所有点上都是平滑的（代码的小变化再次省略）。结果是以下内容：'
- en: '![Creating curved lines using the basis interpolation](img/B04230_09_20.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![使用基插值创建曲线](img/B04230_09_20.jpg)'
- en: Pretty awesome! As you can see, you can use these interpolators to create really
    complex curved shapes. Imagine doing this by creating the path commands all by
    yourself. I dare you to examine the path commands for this line—there are a lot
    of them.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 非常棒！正如您所看到的，您可以使用这些插值器创建非常复杂的曲线形状。想象一下，如果您自己创建路径命令会怎样。我敢打赌，您会检查这条线的路径命令——有很多。
- en: Creating curved lines using the bundle interpolation
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用捆绑插值创建曲线
- en: '`bundle` is similar to `basis,` except you can specify a parameter for the
    amount of tension in the line that is generated. Tension allows you to control
    how tightly the line will conform to the given points. To specify tension, chain
    the `.tension()` function with a parameter value between `0.0` and `1.0` (the
    default is `0.7`). The following shows a selected tension of `0.75`:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`bundle` 与 `basis` 类似，但您可以指定生成线张力的参数。张力允许您控制线将如何紧密地符合给定的点。要指定张力，将 `.tension()`
    函数与介于 `0.0` 和 `1.0`（默认为 `0.7`）之间的参数值链式调用。以下显示了一个选定的张力值为 `0.75`：'
- en: '![Creating curved lines using the bundle interpolation](img/B04230_09_21.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![使用捆绑插值创建曲线](img/B04230_09_21.jpg)'
- en: 'You can see how the generated line (well, curve) is now influenced a lot less
    closely by the points. If you set the value to `0.0`, this would actually be a
    straight line. To demonstrate efficiently other values for tension, the following
    table demonstrates the change in shape at various points of tension from `0.0`
    to `1.0`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到生成的线（好吧，曲线）现在受点的影响要小得多。如果您将值设置为 `0.0`，这实际上将是一条直线。为了有效地展示其他张力值，以下表格展示了从
    `0.0` 到 `1.0` 的张力各个点的形状变化：
- en: '| Tension | Result |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 张力 | 结果 |'
- en: '| --- | --- |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `0.0` | ![Creating curved lines using the bundle interpolation](img/B04230_09_22.jpg)
    |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `0.0` | ![使用捆绑插值创建曲线](img/B04230_09_22.jpg) |'
- en: '| `0.5` | ![Creating curved lines using the bundle interpolation](img/B04230_09_23.jpg)
    |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `0.5` | ![使用捆绑插值创建曲线](img/B04230_09_23.jpg) |'
- en: '| `1.0` | ![Creating curved lines using the bundle interpolation](img/B04230_09_24.jpg)
    |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `1.0` | ![使用捆绑插值创建曲线](img/B04230_09_24.jpg) |'
- en: If you compare a tension of `1.0` to the basis interpolation, you will notice
    they are identical.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将`1.0`的张力与基函数插值进行比较，你会注意到它们是相同的。
- en: Creating curved lines using the cardinal interpolation
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用基数插值创建曲线线
- en: '`cardinal` curves are like `basis` curves, except that the lines are forced
    to run through all points. The following graph demonstrates the normal, open,
    and closed forms:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`cardinal`曲线类似于`basis`曲线，不同之处在于线条被强制通过所有点。以下图表展示了正常、开放和封闭的形式：'
- en: '| Interpolation | Result |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| 插值 | 结果 |'
- en: '| --- | --- |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| cardinal | ![Creating curved lines using the cardinal interpolation](img/B04230_09_25.jpg)
    |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| cardinal | ![使用基数插值创建曲线线](img/B04230_09_25.jpg) |'
- en: '| cardinal-open | ![Creating curved lines using the cardinal interpolation](img/B04230_09_26.jpg)
    |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| cardinal-open | ![使用基数插值创建曲线线](img/B04230_09_26.jpg) |'
- en: '| cardinal-closed | ![Creating curved lines using the cardinal interpolation](img/B04230_09_27.jpg)
    |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| cardinal-closed | ![使用基数插值创建曲线线](img/B04230_09_27.jpg) |'
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we examined several techniques of creating complex shapes using
    D3.js path data generators. We started with examples of common generators, including
    line, area, circles, donuts, arcs, and diagonals. These are extremely powerful
    tools and enhance your ability to create complex visualizations easily.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们考察了使用D3.js路径数据生成器创建复杂形状的几种技术。我们从常见的生成器示例开始，包括线、区域、圆形、甜甜圈、弧线和对角线。这些工具非常强大，可以增强你轻松创建复杂可视化的能力。
- en: We finished the chapter with an examination of line interpolators, a means of
    informing the line path generator of how to fit lines between data points. These
    interpolations, including the default linear interpolation, are for the basis
    of efficiently creating complex line graphs and curved shapes that fit data.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过考察线插值器结束了这一章，这是一种通知线路径生成器如何在数据点之间拟合线条的方法。这些插值，包括默认的线性插值，是高效创建复杂线图和适合数据的曲线形状的基础。
- en: In the next chapter on layouts, we will move a little higher up the visual stack
    of D3.js to examine layouts, which are essentially generators for complex data
    visualizations.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章关于布局的部分，我们将稍微提升到D3.js的视觉堆栈中，来考察布局，布局本质上是为复杂数据可视化生成器。
