- en: Chapter 7. Let's Go to the Movies!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。让我们去看电影！
- en: It didn't take long after the introduction of cameras on phones to ask the question,
    "What about video?" Initially video recording was hampered by the limited space
    on phones as well as the hardware. It is one thing to snap a few JPEG files that
    might be a few hundred kilobytes each, but it is entirely another thing to take
    a video longer than a few seconds that doesn't add up to a pretty large file size.
    Furthermore, video has to be encoded and compressed, something that can be done
    in software, but is much better done in hardware.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在手机上引入相机不久后，人们就开始问，“视频怎么办？”最初，视频录制受到手机存储空间和硬件的限制。拍几张可能每张只有几百千字节的照片是一回事，但拍摄几秒钟以上的视频，其文件大小却相当大，这是另一回事。此外，视频还需要编码和压缩，这可以通过软件完成，但在硬件上完成会更好。
- en: When video recording did become practical, it changed the way we saw the world.
    Suddenly it was possible to have footage of news happening anywhere there was
    a cell phone – practically everywhere. Video recording became common place, so
    chances are good that there are very few handsets today that don't support it.
    In this project, we'll take a look at recording and playing video in our apps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当视频录制变得可行时，它改变了我们看待世界的方式。突然之间，只要有手机的地方就能拍摄新闻事件——几乎无处不在。视频录制变得司空见惯，所以现在几乎所有的手机都支持视频录制。在这个项目中，我们将探讨如何在我们的应用程序中录制和播放视频。
- en: What do we build?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们要构建什么？
- en: In all honesty, we're going to be building our [Project 6](ch06.html "Chapter 6. Say
    Cheese!"), *Say Cheese!*. Remember that one? Instead of working with still pictures,
    we'll be working with videos instead.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 实事求是地说，我们将要构建的是[项目6](ch06.html "第6章。说 Cheese！")，“说 Cheese！”。还记得那个吗？我们将不再处理静态图片，而是处理视频。
- en: While the user interface and a good percentage of the code will be the same,
    video does present some interesting challenges. For example, how does one get
    a thumbnail of a video? We all know how a thumbnail should look, but how does
    one actually get it? Or, frankly, how do we do more than simply display the video?
    How do we enable playback?
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然用户界面和大部分代码将保持不变，但视频确实带来了一些有趣的挑战。例如，如何获取视频的缩略图？我们都知道缩略图应该是什么样子，但实际如何获取呢？或者坦白说，我们如何不仅仅显示视频？我们如何实现播放？
- en: Unfortunately (or fortunately, depending on your viewpoint), we'll need to delve
    into some native code in order to accomplish these tasks. The tasks themselves
    aren't complicated, but PhoneGap doesn't provide support for thumbnails of videos,
    and the Android platform doesn't provide good support for the HTML5 `VIDEO` tag,
    so we'll have to use another plugin for playing video as well.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是（或者从你的观点来看，幸运的是），为了完成这些任务，我们需要深入研究一些本地代码。这些任务本身并不复杂，但PhoneGap没有提供对视频缩略图的支持，Android平台也没有提供对HTML5
    `VIDEO`标签的良好支持，因此我们将不得不使用另一个插件来播放视频。
- en: What does it do?
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它能做什么？
- en: Our app, called `Mem'ry` (we've got to be *hip* by leaving vowels out, right?)
    will allow the user to record video from within the app. Any recorded videos can
    be played back. Furthermore, we'll use the same document management we've used
    before to permit management of these files—deletion, duplication, and renaming.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序名为`Mem'ry`（我们得赶时髦，把元音字母去掉，对吧？）将允许用户在应用程序内录制视频。任何录制的视频都可以播放。此外，我们将使用之前使用的相同文档管理功能来管理这些文件——删除、复制和重命名。
- en: Why is it great?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么它很棒？
- en: Let's face it, recording video isn't something that a lot of apps have to deal
    with. But playing it back? That's a much larger percentage of apps. Therefore,
    it is very important that you know how to play videos for the end user, but should
    you ever need to record video as well, this app will give you the tools necessary
    for that as well.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 坦白说，录制视频并不是很多应用程序必须处理的事情。但播放视频呢？这却是大多数应用程序需要处理的事情。因此，了解如何为最终用户播放视频非常重要，但如果你需要录制视频，这个应用程序也会为你提供必要的工具。
- en: 'We''ll also delve into some areas that PhoneGap doesn''t really provide any
    support for. It''s not so much PhoneGap''s fault, really, it''s more that videos
    aren''t simply a collection of images. They''re compressed and encoded, and there''s
    no obvious way to get a thumbnail of a video and display it as an image in HTML,
    which is what we''ve been using so far when working with PhoneGap. A thumbnail
    of an image, of course, is easy: just scale the image down. A thumbnail of a video?
    Not so easy; you''ve got to construct it from the compressed and encoded file,
    and HTML doesn''t know how to do that. Fortunately, the SDKs provided on the most
    popular platforms make it easy, but we''ll have to do some native coding to get
    there.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将深入研究一些PhoneGap实际上并不提供支持的领域。这并不是PhoneGap的错，实际上，视频不仅仅是图像的集合。它们被压缩和编码，没有明显的方法可以从视频中获取缩略图并将其显示为HTML中的图像，这是我们迄今为止在处理PhoneGap时一直在使用的方法。图像的缩略图很简单：只需缩小图像即可。视频的缩略图？并不简单；你必须从压缩和编码的文件中构建它，而HTML不知道如何做到这一点。幸运的是，最流行的平台提供的SDK使得这变得容易，但我们需要进行一些原生编码才能达到这个目标。
- en: How are we going to do it?
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们该如何进行？
- en: 'We''ll be following these steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循以下步骤：
- en: Preparing for the video thumbnail plugin
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备视频缩略图插件
- en: Implementing the video thumbnail plugin for iOS
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现iOS版本的视频缩略图插件
- en: Implementing the video thumbnail plugin for Android
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现Android版本的视频缩略图插件
- en: Integrating with the video thumbnail plugin
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与视频缩略图插件集成
- en: Implementing recording and importing of video
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现视频录制和导入
- en: Implementing video playback
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现视频播放
- en: What do I need to get started?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我需要准备什么？
- en: First, make sure to get the files for this project from the download available
    for this book. We won't be listing the code in its entirely, since it is so similar
    to that in [Project 6](ch06.html "Chapter 6. Say Cheese!"), *Say Cheese!*, so
    in order for you to follow along you should either have a quick reference to your
    previous project or the one from our files.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请确保从本书提供的下载中获取此项目的文件。由于代码与[项目6](ch06.html "第6章。说奶酪！")中的代码非常相似，*说奶酪！*，所以为了让你能够跟上，你应该有之前项目的快速参考或我们的文件。
- en: Second, be sure to download the Android Video Player plugin from [https://github.com/phonegap/phonegap-plugins/tree/master/Android/VideoPlayer](https://github.com/phonegap/phonegap-plugins/tree/master/Android/VideoPlayer).
    In this project, we used the plugin for PhoneGap version 2.x and higher.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，请确保从[https://github.com/phonegap/phonegap-plugins/tree/master/Android/VideoPlayer](https://github.com/phonegap/phonegap-plugins/tree/master/Android/VideoPlayer)下载Android视频播放器插件。在这个项目中，我们使用了适用于PhoneGap
    2.x及更高版本的插件。
- en: Preparing for the video thumbnail plugin
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备视频缩略图插件
- en: Our app is practically identical with regards to the prior project's user interface
    and its interactions, so we won't go through the entire design process. Instead,
    we'll start right off with implementing the video thumbnail plugin.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的App在用户界面和交互方面与先前的项目几乎相同，因此我们不会走完整个设计流程。相反，我们将直接开始实现视频缩略图插件。
- en: Getting ready
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll be getting our hands dirty with native code for the first time in this
    book. While we've used plugins before (the ChildBrowser plugin in [Project 2](ch02.html
    "Chapter 2. Let's Get Social!"), *Let's Get Social!*), we've never created our
    own yet. Since we support more than one platform, we'll also have to write the
    plugin more than once.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将首次使用原生代码。虽然我们之前使用过插件（[项目2](ch02.html "第2章。让我们社交！")中的ChildBrowser插件，*让我们社交!*），但我们从未自己创建过。由于我们支持多个平台，我们还需要多次编写插件。
- en: Getting on with it
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始行动
- en: 'This task is essentially composed of three steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个任务本质上由三个步骤组成：
- en: Configuring the project to use the plugins
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置项目以使用插件
- en: Creating the JavaScript interface
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建JavaScript接口
- en: Creating the native code
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建原生代码
- en: The first two tasks are quite simple, but the last one, well, we'll cross that
    bridge in a few pages.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个任务相当简单，但最后一个，嗯，我们将在几页后解决这个问题。
- en: Configuring the project to use the plugins
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置项目以使用插件
- en: 'The first thing we need to do is to configure the projects we''re building
    to use the new plugin. The steps are different for each platform, but at a *high
    level* they are essentially the same thing. We''re telling PhoneGap about the
    plugin and that it is available for use. The steps are as follows for the different
    platforms:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是配置我们正在构建的项目以使用新的插件。对于每个平台，步骤都不同，但从*高层次*来看，它们基本上是相同的事情。我们正在告诉PhoneGap关于插件的信息，以及它可供使用。不同平台的步骤如下：
- en: iOS
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS
- en: Using Xcode, navigate to the `Cordova.plist` file.
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Xcode，导航到`Cordova.plist`文件。
- en: Expand the **Plugins** section.
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**插件**部分。
- en: Click on the **+** sign that appears when hovering over a plugin. This will
    inserta new row.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当鼠标悬停在插件上时，点击出现的**+**号。这将插入一个新行。
- en: Add `PKVideoThumbnail` as the key, and `PKVideoThumbnail` as the value.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`PKVideoThumbnail`作为键，将`PKVideoThumbnail`作为值添加。
- en: Save the file.
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: 'Go to the `index.html` file and add the `PKVideoThumbnail.js` script filegiven
    as follows:'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.html`文件，并添加以下`PKVideoThumbnail.js`脚本文件：
- en: '[PRE0]'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Android
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android
- en: Using Eclipse, navigate to the `/res/xml/config.xml` file and open it. If you
    aren't presented with the editable XML, switch to the XML text editor view.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Eclipse，导航到`/res/xml/config.xml`文件并打开它。如果您没有显示可编辑的XML，请切换到XML文本编辑视图。
- en: Find the **Plugin** section of the XML file.
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在XML文件中找到**插件**部分。
- en: 'Add the following line:'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下行：
- en: '[PRE1]'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save the file.
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: 'Go to the `index_android.html` file and add the `PKVideoThumnail.js` script
    file given as follows:'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index_android.html`文件，并添加以下`PKVideoThumnail.js`脚本文件：
- en: '[PRE2]'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: All this does is tell PhoneGap that we're going to have a plugin available with
    the name of `PKVideoThumbnail`. Without this, the app wouldn't work correctly,
    since it wouldn't know how to contact the plugin.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些只是告诉PhoneGap我们将有一个名为`PKVideoThumbnail`的插件可用。没有这个，应用程序将无法正确工作，因为它不知道如何联系插件。
- en: Creating the JavaScript interface
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建JavaScript接口
- en: While it is technically possible to call a plugin without having any corresponding
    `.js` file, it is a fact that it is often easier to create an interface so that
    calling the plugin is just a little bit easier. The interface files will be nearly
    identical, but the iOS version will be just enough different that it wouldn't
    work under the Android platform and vice versa.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在技术上可以在没有任何对应的`.js`文件的情况下调用插件，但事实是，创建一个接口通常会使调用插件变得更容易一些。接口文件将几乎相同，但iOS版本将有所不同，以至于它无法在Android平台上工作，反之亦然。
- en: 'Under the `www/plugins/iOS` directory, create a file called `PKVideoThumbnail.js`
    with the following contents:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在`www/plugins/iOS`目录下，创建一个名为`PKVideoThumbnail.js`的文件，内容如下：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What the preceding code does is simply create an easy-to-use wrapper call that
    lets us call `PKVideoThumbnail.createThumbnail()` whenever we need to get a video's
    thumbnail instead of using `cordova.exec(some_function,error_function,"PKVideoThumbnail","createThumbnail",[…])`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的作用是简单地创建一个易于使用的包装器调用，这样我们就可以在需要获取视频缩略图时调用`PKVideoThumbnail.createThumbnail()`，而不是使用`cordova.exec(some_function,error_function,"PKVideoThumbnail","createThumbnail",[…])`。
- en: For some plugins that offer a lot of functionality, the JavaScript interface
    essentially acts as a go-between. It translates arguments to what the plugin can
    understand, and then handles the return results when returning back to JavaScript.
    In our case, the wrapper is pretty small.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于提供大量功能的某些插件，JavaScript接口基本上充当中间人。它将参数转换为插件可以理解的内容，然后在返回到JavaScript时处理返回结果。在我们的案例中，包装器非常小。
- en: 'For the Android version, create a file named `PKVideoThumbnail.js` under `www/plugins/Android`
    with these contents:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Android版本，在`www/plugins/Android`目录下创建一个名为`PKVideoThumbnail.js`的文件，内容如下：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Could you spot the difference between the two files?
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您能看出这两个文件之间的区别吗？
- en: 'I''ll give you a clue: look at the penultimate line, just before `source`.
    The iOS version adds `file://localhost`, while the Android version doesn''t. Small
    detail, but without it, the iOS version of the app wouldn''t work.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我给你一个提示：看看倒数第二行，就在`source`之前。iOS版本添加了`file://localhost`，而Android版本没有。这是一个小细节，但没有它，iOS版本的应用程序将无法工作。
- en: What did we do?
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们做了什么？
- en: In this task, we modified the project settings so that the project knows about
    the plugin we're about to create. We also created the JavaScript interface for
    both iOS and Android that will permit us to communicate with the native code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们修改了项目设置，以便项目知道我们即将创建的插件。我们还为iOS和Android创建了JavaScript接口，这将允许我们与本地代码进行通信。
- en: Implementing the video thumbnail plugin for iOS
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现iOS的视频缩略图插件
- en: The iOS version of the video thumbnail will use a *hidden* video player to construct
    the thumbnail. Technically, we could use another library, but the video player
    is so convenient and fast when it comes to building images from videos. We hide
    it to ensure that the user will never actually see what's going on.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 视频缩略图的iOS版本将使用一个*隐藏*的视频播放器来构建缩略图。技术上，我们可以使用另一个库，但视频播放器在从视频构建图像时既方便又快速。我们将其隐藏以确保用户永远不会真正看到正在发生的事情。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'To start, let''s create a new **Objective-C class** within Xcode. The easiest
    way is to right-click on the **Plugins** folder and select **New File...**, as
    seen in the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在Xcode中创建一个新的**Objective-C类**。最简单的方法是在**插件**文件夹上右键单击并选择**新建文件...**，如以下截图所示：
- en: '![Getting ready](img/9403_07_01.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/9403_07_01.jpg)'
- en: It's important that you use the **Plugins** folder that is a sibling to the
    **Other Sources** and **Resources** directories; not the one within the **www**
    directory.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是你要使用与**其他源**和**资源**目录平级的**插件**文件夹；而不是位于**www**目录中的那个。
- en: '![Getting ready](img/9403_07_02.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/9403_07_02.jpg)'
- en: Next, ensure the **Cocoa Touch** category is selected and then select the **Objective-C
    class** icon. Click on **Next**.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，确保选择了**Cocoa Touch**类别，然后选择**Objective-C类**图标。点击**下一步**。
- en: '![Getting ready](img/9403_07_03.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/9403_07_03.jpg)'
- en: Then give the class a name, in this case `PKVideoThumbnail`, and ensure that
    it is a subclass of `CDVPlugin`. Click on **Next** again, and then you'll be prompted
    to verify where you want to save the files. It should be set to the **Plugins**
    folder; if not, be sure to navigate there before completing the task.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后给这个类起一个名字，在这个例子中是`PKVideoThumbnail`，并确保它是`CDVPlugin`的子类。再次点击**下一步**，然后你会被提示验证你想要保存文件的位置。它应该设置为**插件**文件夹；如果不是，在完成任务之前一定要导航到那里。
- en: Getting on with it
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始行动
- en: 'Now that we have the `.h` and `.m` files, we need to fill them in. Let''s start
    with the `.h` file first. The following is the *interface* or *specification*
    for the class:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了`.h`和`.m`文件，我们需要填充它们。让我们先从`.h`文件开始。以下是为这个类提供的*接口*或*规范*：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What we're doing in the preceding code is defining a method called `createThumbnail`
    that will be executed whenever we call `PKideoThumbnail.createThumbnail()` from
    JavaScript.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在定义一个名为`createThumbnail`的方法，它将在从JavaScript调用`PKideoThumbnail.createThumbnail()`时执行。
- en: Take note of the `#if…#else…#endif` construct; PhoneGap changed their method
    signature between versions 2.0 and 2.1, and so this handles both variations.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`#if…#else…#endif`结构；PhoneGap在2.0和2.1版本之间更改了方法签名，因此这处理了两种变体。
- en: 'So far, though, we''ve not written any substantive code yet; we''ve been *declaring*
    or *defining* thus far. Let''s change that by working on the `.m` file as shown
    in the following code snippet:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，到目前为止，我们还没有编写任何实质性的代码；我们一直在进行*声明*或*定义*。让我们通过以下代码片段中的`.m`文件来改变这种情况：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: First, we import several libraries that we need in order to construct our plugin.
    We also import our `.h` file as well; otherwise, the compiler would complain.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入我们需要构建插件的一些库。我们还导入了我们的`.h`文件；否则，编译器会报错。
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Next, we define a method called `extractVideoThumbnail` that takes two parameters,
    namely, the path to the video and the location and name we should use when creating
    the image. Our method will return `YES` if we're successful, and `NO` if not.
    (This is the Objective-C Boolean equivalent to `TRUE` and `FALSE`.)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个名为`extractVideoThumbnail`的方法，它接受两个参数，即视频的路径以及创建图像时应使用的位置和名称。如果成功，我们的方法将返回`YES`，如果不成功，则返回`NO`。（这是Objective-C中的布尔值`TRUE`和`FALSE`的等价物。）
- en: We also define a `thumbnail` of the type `UIImage`. The *asterisk* (`*`) indicates
    that this is a pointer – something very important in C-based languages. Essentially
    you'll use one whenever declaring a variable or parameter that's an object. When
    using numbers, you wouldn't use an asterisk, but in this case, we're only declaring
    one variable to start.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还定义了一个类型为`UIImage`的`thumbnail`。星号（`*`）表示这是一个指针——在基于C的语言中非常重要。基本上，你会在声明任何对象变量或参数时使用它。当使用数字时，你不会使用星号，但在这个例子中，我们只声明了一个变量来开始。
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The next thing we do is declare and create `MPMoviePlayerController`. It's an
    object, so it gets the asterisk as well. We'll name it `mp` for short.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要做的是声明并创建`MPMoviePlayerController`。它是一个对象，所以它也得到一个星号。我们将它简称为`mp`。
- en: We pass in the path to the video, which needs to be prefixed with `file://localhost`;
    remember that we do this in `PKVideoThumbnail.js`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传递了视频的路径，该路径需要以 `file://localhost` 前缀；记住我们在 `PKVideoThumbnail.js` 中这样做。
- en: Then we set the playback time to `1` second in, and indicate that it shouldn't
    auto play. We just want a single image from the video, so we don't want to actually
    play it for the user yet.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将播放时间设置为 `1` 秒，并指示它不应自动播放。我们只想从视频中获取一个单独的图像，所以我们不想立即为用户播放它。
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Next we ask for the image nearest the 1 second point in the movie. Since compression
    and encoding in movies uses key frames, we may not get the image at the exact
    1 second mark, but it should be pretty close.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们请求电影中1秒点附近的最接近的图像。由于电影中的压缩和编码使用关键帧，我们可能无法在确切的1秒标记处获得图像，但它应该非常接近。
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Finally, we save the thumbnail out to the desired file – our JavaScript will
    generally use the name of the movie and add a `.jpg` extension. The return value
    of the operation will either be `YES` or `NO`. If it is `NO`, the thumbnail wasn't
    successfully written.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将缩略图保存到所需的文件中——我们的JavaScript通常会使用电影名称并添加一个 `.jpg` 扩展名。操作的返回值将是 `YES` 或
    `NO`。如果是 `NO`，则缩略图没有成功写入。
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next up, we need to define the plugin handler for PhoneGap version 2.0 or lower:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为PhoneGap 2.0或更低版本定义插件处理程序：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: These three variables are always defined in plugins. They are critical to the
    functioning of the plugin. The first is a unique ID that PhoneGap uses to track
    calls between JavaScript and native code. The second is the result of our plugin's
    activities; we can use it to pass data back to JavaScript. The last one is the
    resulting JavaScript of the return code; this is used to call the success or failure
    routine.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个变量总是在插件中定义的。它们对于插件的功能至关重要。第一个是一个唯一ID，PhoneGap使用它来跟踪JavaScript和原生代码之间的调用。第二个是我们插件活动的结果；我们可以用它将数据传回JavaScript。最后一个是我们返回代码的JavaScript结果；这用于调用成功或失败例程。
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next, we obtain the two parameters that should have been passed to the plugin.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们获取应该传递给插件的两个参数。
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We call the `extractVideoThumbnail` method with the two parameters. As we said
    before, if it returns `YES`, then it worked, and so our plugin result will be
    an OK. If it returns `NO`, we'll return an error result instead.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用两个参数调用 `extractVideoThumbnail` 方法。正如我们之前所说的，如果它返回 `YES`，那么它就成功了，因此我们的插件结果将是OK。如果它返回
    `NO`，我们将返回一个错误结果。
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `@catch` block here is also important; it catches any errors that occur
    within the `@try` block. This might occur if something really went wrong or the
    wrong number (or type) of parameters were sent.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的 `@catch` 块也很重要；它捕获在 `@try` 块中发生的任何错误。这可能会发生在某些事情真的出了问题或发送了错误数量（或类型）的情况下。
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Finally, we essentially repeat ourselves, but using the PhoneGap 2.1 version
    of the plugin interface. Look closely, it does the same thing, but there are some
    subtle differences.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们基本上是重复自己，但使用PhoneGap 2.1版本的插件接口。仔细看看，它做的是同样的事情，但有一些细微的差别。
- en: What did we do?
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们做了什么？
- en: That's it! Now when we call `PKVideoThumbnail.createThumbnail()`, we'll be able
    to extract a thumbnail from any video we take or import. Cool, isn't it?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在当我们调用 `PKVideoThumbnail.createThumbnail()` 时，我们就能从我们拍摄或导入的任何视频中提取缩略图。酷吧，不是吗？
- en: What else do I need to know?
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我还需要知道什么？
- en: 'Okay, so `extractVideoThumbnail()` isn''t quite standard Objective-C style.
    Typically, one would write it:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，所以 `extractVideoThumbnail()` 并不完全符合标准的Objective-C风格。通常，人们会这样写：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And we would have called it like:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会这样调用它：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: But our way does the same thing and is a little less wordy. However, when working
    with Objective-C methods, it is important to recognize the differences in defining
    method signatures. If you're going to write a lot of Objective-C code, it's best
    to get used to the latter, but in a pinch, the former works too.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们的方法做的是同样的事情，而且更简洁。然而，当与Objective-C方法一起工作时，重要的是要认识到定义方法签名之间的差异。如果你要写很多Objective-C代码，最好习惯后者，但在紧急情况下，前者也可以用。
- en: 'One last thing: what happens if we can''t extract a thumbnail from the video?
    You''ll notice that there''s nothing in the code that appears to handle this possibility.
    Chances are that `thumbnail` will be `NULL` and that the attempt to write the
    thumbnail to storage will either return `NO` or raise an exception. Either way,
    we''re covered with our code later on where we return `ERROR` if `NO` is returned.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点：如果我们无法从视频中提取缩略图会发生什么？你会注意到代码中没有处理这种可能性的内容。很可能是`thumbnail`将是`NULL`，并且尝试将缩略图写入存储将返回`NO`或引发异常。无论如何，我们后面的代码中已经处理了，如果返回`NO`，我们将返回`ERROR`。
- en: Implementing the video thumbnail plugin for Android
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现Android的视频缩略图插件
- en: 'The Android version of the plugin is very similar to the iOS version, although
    it doesn''t have to worry about the version of PhoneGap in use, so it is a little
    shorter. Ultimately, though, the steps are the same: grab a frame from a video,
    save it to storage, and return to JavaScript.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的Android版本与iOS版本非常相似，尽管它不必担心使用的PhoneGap版本，所以它要短一些。最终，尽管如此，步骤是相同的：从视频中抓取一个帧，保存到存储，然后返回JavaScript。
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: First off, create a new class by opening the **File** menu, selecting **New**,
    and then selecting **Class**.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过打开**文件**菜单，选择**新建**，然后选择**类**来创建一个新的类。
- en: 'Next, set the **Package** to `com.kerrishotts.PKVideoThumbnail`, the **Name**
    field of the class to `PKVideoThumbnail`, and then uncheck the first item under
    **Which method stubs would you like to create?** – we won''t need any sample code.
    This is shown in the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将**包名**设置为`com.kerrishotts.PKVideoThumbnail`，将类的**名称**字段设置为`PKVideoThumbnail`，然后取消选中**您想创建哪些方法存根？**下的第一个选项——我们不需要任何示例代码。这在上面的屏幕截图中显示：
- en: '![Getting ready](img/9403_07_06.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/9403_07_06.jpg)'
- en: Next, open the resulting file `PKVideoThumbnail.java` file, and we'll start
    writing the Android version.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开生成的文件`PKVideoThumbnail.java`，我们将开始编写Android版本。
- en: Getting on with it
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继续前进
- en: 'Unlike iOS, we only need one file, and it ends up being a bit shorter too,
    given as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 与iOS不同，我们只需要一个文件，而且它最终还要短一些，如下所示：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: First, as in iOS, we import the libraries we'll need for our plugin to work.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，就像iOS一样，我们导入插件工作所需的库。
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Unlike iOS, we define a single method called `execute`. If our plugin had multiple
    actions, we'd need to handle each one within this `execute` method. In iOS, this
    is done for us.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 与iOS不同，我们定义了一个名为`execute`的单个方法。如果我们的插件有多个动作，我们需要在这个`execute`方法中处理每一个。在iOS中，这已经为我们做好了。
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Since we need to check if the incoming action is `createThumbnail`, we have
    the preceding code. Technically, we could avoid this for a plugin only performing
    one action, but it would be nonstandard to do so.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要检查传入的操作是否为`createThumbnail`，所以我们有前面的代码。技术上，如果我们只执行一个操作的插件，我们可以避免这样做，但这将是不标准的。
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the prior code, we define our two parameters that we pass in from JavaScript.
    Note the lack of any asterisks like we had in the iOS version. Nice not to have
    to worry about those pesky things, right?
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们定义了我们从JavaScript传递的两个参数。注意，与iOS版本不同，这里没有星号。不用担心那些讨厌的东西，不是吗？
- en: '[PRE23]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Creating a thumbnail from a video is really quite simple; there's already a
    simple routine pre-written for us. We just pass the path to the video, and ask
    for a specific size (in our case, `MINI_KIND`).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 从视频中创建缩略图实际上非常简单；已经有一个简单的例程预先为我们写好了。我们只需传递视频的路径，并请求一个特定的尺寸（在我们的情况下，`MINI_KIND`）。
- en: '[PRE24]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Actually saving the thumbnail to storage is a bit more involved. We need to
    check to see if we should create the file first (by checking if it doesn't exist
    first), and then if we can write to the file. Once we do that, we can use the
    `thumbnail.compress()` method to do the actual work of saving the file. All the
    other stuff is there to handle errors and such, and Java requires that you handle
    them. If not, the code will fail to compile.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上保存缩略图到存储要复杂一些。我们需要检查是否应该首先创建文件（通过检查它是否存在），然后检查是否可以写入文件。一旦我们这样做，我们就可以使用`thumbnail.compress()`方法来完成保存文件的实际工作。所有其他东西都是为了处理错误等，Java要求你必须处理它们。如果不这样做，代码将无法编译。
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'At this point, if we''re executing this bit of code, the thumbnail has been
    created successfully, and so we return `OK`. If we aren''t here, we''ve returned
    `ERROR` or `IO_EXCEPTION` or even something else, as listed in the following code
    snippet:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，如果我们正在执行这段代码，缩略图已经成功创建，因此我们返回`OK`。如果我们不在这里，我们已经返回了`ERROR`或`IO_EXCEPTION`或甚至其他，如以下代码片段中所示：
- en: '[PRE26]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: What did we do?
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们做了什么？
- en: That's all! We've extracted a thumbnail from a video file and saved it to a
    JPEG file for our JavaScript to work with.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些！我们已经从一个视频文件中提取了缩略图，并将其保存为JPEG文件，以便我们的JavaScript进行处理。
- en: What else do I need to know?
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我还需要了解什么？
- en: Ok, so if you actually take a close look at what gets saved out of this code,
    you'll notice it really isn't very much of a thumbnail. In fact it's a image that's
    the same size as the video resolution. That's not too big a deal, though, since
    we'll shrink it down in our JavaScript, but I wanted to let you know.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以如果你仔细观察这段代码保存出来的内容，你会发现它实际上并不是一个非常小的缩略图。实际上，它是一个与视频分辨率相同的图像。不过，这并不是什么大问题，因为我们在JavaScript中会将其缩小，但我还是想让你知道这一点。
- en: Integrating with the video thumbnail plugin
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成视频缩略图插件
- en: Next, we need to actually make the changes to our code so that we can display
    the video thumbnails. Open up the `documentsView.html` file under `www/views`
    so that you can follow along.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要实际修改我们的代码，以便显示视频缩略图。打开 `www/views` 下的 `documentsView.html` 文件，以便你可以跟随操作。
- en: Getting ready
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The theory behind displaying the thumbnails is much the same as displaying the
    thumbnails in our last project; that is, we're still using the `canvas` tag to
    speed up the feel of our app, and we're still generating thumbnails from JPEG
    files. The difference is that we have to generate those JPEG files from the video
    file.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 显示缩略图的原理与我们在上一个项目中显示缩略图的原理非常相似；也就是说，我们仍然使用 `canvas` 标签来加快应用程序的响应速度，我们仍然从JPEG文件生成缩略图。不同之处在于我们必须从视频文件生成那些JPEG文件。
- en: Getting on with it
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始行动
- en: 'Let''s start by taking a look at the `documentIterator()` method in the following
    code snippet:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下代码片段中的 `documentIterator()` 方法开始看起：
- en: '[PRE27]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When compared to our previous project, the content is pretty similar so far.
    The only difference is the highlighted line. We have defined a variable earlier
    in the file named `documentToIndex`, which is an object. We're using it as an
    associative array, however, so that we can later map the file back to its index.
    For example, if file *1239548.mov* is the third item in our document list, we'd
    store *3* in the space for *1239548.mov*.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前的项目相比，内容到目前为止非常相似。唯一的区别是高亮的那一行。我们在文件中之前定义了一个名为 `documentToIndex` 的变量，它是一个对象。我们将其用作关联数组，这样我们就可以稍后根据文件将其映射回其索引。例如，如果文件
    *1239548.mov* 是我们文档列表中的第三个项目，我们将在 *1239548.mov* 的空间中存储 *3*。
- en: 'Next, as before, we wait for `100` milliseconds before attaching the long press
    handler and such as seen in the following code snippet:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，就像之前一样，我们在附加长按处理程序等之前等待 `100` 毫秒，如下面的代码片段所示：
- en: '[PRE28]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This last portion is where we ask our new plugin to do the work of extracting
    the video thumbnail. We know the video's path in persistent storage, so we can
    pass that part along. We can also construct the filename for the JPEG as well
    (what we're doing is taking everything but the video's extension and substituting
    `.jpg` instead). Then when the video thumbnail has been generated successfully,
    `renderVideoThumbnail()` will be called. If an error occurs, we'll log it to the
    console.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这最后的部分是我们要求我们的新插件执行提取视频缩略图的工作。我们知道视频的路径在持久存储中，因此我们可以传递这部分信息。我们还可以构造JPEG文件的文件名（我们正在做的是移除视频扩展名，并用
    `.jpg` 替换）。然后当视频缩略图成功生成后，`renderVideoThumbnail()` 将被调用。如果发生错误，我们将将其记录到控制台。
- en: '[PRE29]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `renderVideoThumbnail()` method as a whole is very similar to the remainder
    of the code inside the last project's `documentIterator()`. We've broken it out
    to make it a little easier to read, but otherwise it does the same thing. The
    only difference between the two is that we have to figure out the index – which
    image are we talking about. If you remember the variable we defined earlier, `documentToIndex[]`,
    we can figure out the index of the image from the filename, which is what we do
    in the preceding code snippet. From there on the code is identical, and we won't
    list the rest here.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`renderVideoThumbnail()` 方法整体上与上一个项目中 `documentIterator()` 方法内部的其余代码非常相似。我们将其分离出来，以便更容易阅读，但除此之外，它做的是同样的事情。这两个方法之间的唯一区别是我们必须找出索引——我们正在谈论哪个图像。如果你记得我们之前定义的变量
    `documentToIndex[]`，我们可以从文件名中找出图像的索引，这正是我们在前面的代码片段中所做的。从那里开始，代码是相同的，我们这里不再列出其余部分。'
- en: What did we do?
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们做了什么？
- en: In this task, we modified the `documentIterator()` method to work with our new
    plugin. We've asked for a thumbnail from a video, and we've managed to display
    it back to the end user when needed.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们修改了`documentIterator()`方法以配合我们的新插件。我们已经从视频中请求了缩略图，并且我们已经成功地在需要时将其显示给最终用户。
- en: Implementing recording and importing of video
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现视频录制和导入
- en: We've done the first part of our app, which was displaying thumbnails from videos,
    but we've got to actually record them before we can get anything into our app.
    In this task, we'll do exactly that—record a new video.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了我们应用的第一部分，即显示视频缩略图，但在我们将任何内容放入应用之前，我们必须实际录制它们。在这个任务中，我们将做的是——录制一个新的视频。
- en: Getting ready
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll be working in the `documentsView.html` file in the `www/views` directory,
    if you want to follow along.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想跟随，我们将在这个`www/views`目录下的`documentsView.html`文件中工作。
- en: Getting on with it
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继续前进
- en: You might think that we'd use the camera code from our previous project, and
    you'd be partially correct. For iOS, we can indeed use virtually the exact same
    code to import new videos, but for any platform to record video, we have to use
    a new API—the `CAPTURE` API.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为我们会使用之前项目中的相机代码，你部分是对的。对于iOS，我们确实可以使用几乎完全相同的代码来导入新视频，但对于任何平台录制视频，我们必须使用一个新的API——`CAPTURE`
    API。
- en: 'Let''s take a look at the code for `takeMovie()`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`takeMovie()`函数的代码：
- en: '[PRE30]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `CAPTURE` API provides more methods than simply capturing video; you can
    capture audio as well (which is similar to using the `MEDIA` API in [Project 5](ch05.html
    "Chapter 5. Talking to Your App"), *Talking to Your App*). In our case, we use
    the `captureVideo()` method. It takes three parameters: the `success` function,
    the `failure` function, and any options we want to pass along. In our case, the
    only option is that we will limit the user to one video at a time. Technically,
    the API will allow more than one video in a session, but for our purposes, one
    at a time simplifies things.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`CAPTURE` API提供了比仅仅捕获视频更多的方法；你还可以捕获音频（这与在[项目5](ch05.html "第5章。与你的应用交谈")中使用`MEDIA`
    API类似，*与你的应用交谈*）。在我们的情况下，我们使用`captureVideo()`方法。它接受三个参数：`success`函数、`failure`函数以及我们想要传递的任何选项。在我们的情况下，唯一的选项是我们将限制用户一次只能有一个视频。技术上，API将允许在会话中录制多个视频，但出于我们的目的，一次一个简化了事情。'
- en: '[PRE31]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The preceding code shows the `success` method, which will be called with a list
    of files. In our case, it will only have one filename, which we get by using the
    `zero`th index of the list. From that point forward, it's nearly identical to
    the way we copy a file from temporary storage to permanent storage in [Project
    6](ch06.html "Chapter 6. Say Cheese!"), *Say Cheese!*. The only difference is
    that we don't assume that the file extension will be `.jpg`. Videos on different
    platforms can often have very different extensions.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码显示了`success`方法，它将使用文件列表调用。在我们的情况下，它将只有一个文件名，我们可以通过使用列表的`zero`索引来获取它。从那时起，它几乎与我们在[项目6](ch06.html
    "第6章。说奶酪！")中从临时存储复制文件到永久存储的方式相同。唯一的区别是我们不假设文件扩展名将是`.jpg`。不同平台上的视频通常会有非常不同的扩展名。
- en: '[PRE32]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Next up is the `failure` function, where all we'll worry about is letting the
    user know the error code, but if you wanted, you could give a much better error
    message based on the code.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`failure`函数，我们唯一要关心的是让用户知道错误代码，但如果你愿意，你可以根据代码给出一个更好的错误信息。
- en: '[PRE33]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Finally, the third parameter is that set of options. In this case, we only want
    one video at a time, but there are other options one could pass, such as the video
    encoding type. Different platforms support these other options differently, so
    we won't dwell on them here, but they are available in the PhoneGap API documentation
    should you need them. ([http://docs.phonegap.com/en/edge/cordova_media_capture_capture.md.html#Capture](http://docs.phonegap.com/en/edge/cordova_media_capture_capture.md.html#Capture))
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第三个参数是那一组选项。在这种情况下，我们只想一次有一个视频，但还有其他可以传递的选项，例如视频编码类型。不同的平台以不同的方式支持这些其他选项，所以我们在这里不会过多讨论它们，但如果你需要，它们可以在PhoneGap
    API文档中找到。([http://docs.phonegap.com/en/edge/cordova_media_capture_capture.md.html#Capture](http://docs.phonegap.com/en/edge/cordova_media_capture_capture.md.html#Capture))
- en: 'For importing video, we can use nearly the same code from the previous project,
    but we''ll put it all in `importMovie()`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于导入视频，我们可以使用之前项目中几乎相同的代码，但我们将它全部放在`importMovie()`中：
- en: '[PRE34]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Most of this code is identical to the code in the previous project for `doPicture()`.
    The only real differences are the handling of the file extension and the `mediaType`
    option. Notice we pass `Camera.MediaType.VIDEO` instead. This ensures we will
    only get videos in return.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分代码与之前项目中 `doPicture()` 的代码相同。唯一的真正区别是文件扩展名和 `mediaType` 选项的处理。注意我们传递了 `Camera.MediaType.VIDEO`。这确保了我们只会得到视频。
- en: 'One catch: this doesn''t seem to work well on Android. We haven''t disabled
    it in the app (just in case you have better luck), but you may wish to disable
    the import functionality in your Android apps. On iOS, however, it works quite
    well.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 一个要注意的问题：这似乎在 Android 上工作得不太好。我们还没有在应用程序中禁用它（以防你运气更好），但你可能希望在 Android 应用程序中禁用导入功能。然而，在
    iOS 上，它工作得相当好。
- en: What did we do?
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们做了什么？
- en: In this task, we implemented the code to record video and import video.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们实现了录制视频和导入视频的代码。
- en: Implementing video playback
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现视频播放
- en: Playing videos is a very important feature, especially if we're recording it,
    right? But even for apps that don't support video recording, video playback can
    be essential. Consider an e-learning type of application; reading about the subject
    can work well for a lot of people, but actually seeing the subject in action can
    help even more. Video would make an excellent platform for this type of learning.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 播放视频是一个非常重要的功能，尤其是如果我们正在录制它，对吧？即使应用程序不支持视频录制，视频播放也可以是必不可少的。考虑一个电子学习类型的应用程序；阅读主题对很多人来说效果很好，但真正看到主题的实际操作可以帮助更多。视频将是这种学习类型的绝佳平台。
- en: Getting ready
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll be working in `documentsView.html` and `movieView.html` in the `www/views`
    directory if you want to follow along.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想跟上来，我们将会在 `www/views` 目录下的 `documentsView.html` 和 `movieView.html` 中工作。
- en: Getting on with it
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继续前进
- en: First off, there's a catch. Playing video happens to be really easy on iOS devices.
    Playing video on other devices, well, not so much.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，有一个问题。在 iOS 设备上播放视频非常简单。在其他设备上播放视频，嗯，不那么简单。
- en: For iOS, we'll use the movie view, which is akin to the image view in our previous
    project. Most of the code is duplicated, so we'll just talk about the changes
    here.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 iOS，我们将使用电影视图，这与我们之前项目中的图像视图类似。大部分代码是重复的，所以我们只在这里讨论更改。
- en: 'The template portion of the movie view looks like the following:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 电影视图的模板部分看起来如下所示：
- en: '[PRE35]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Whereas, in the previous project we used an `IMG` tag to display the image,
    we are now using a `VIDEO` tag to display the video. This is a feature of HTML
    5 that iOS supports very nicely, and as such, it makes it very easy for us to
    support video playback.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，在之前的项目中，我们使用 `IMG` 标签来显示图片，而现在我们使用 `VIDEO` 标签来显示视频。这是 HTML 5 的一个特性，iOS
    支持得非常好，因此，这使得我们很容易支持视频播放。
- en: 'The tag will have `%SRC%` replaced with the video filename when the documents
    view calls `setMovie()`, which looks like the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 当文档视图调用 `setMovie()` 时，标签将用 `%SRC%` 替换视频文件名，这看起来如下所示：
- en: '[PRE36]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: It's essentially the same as `setImage()` in the prior project, though we have
    introduced a *thumb* portion, which you could use if you wanted to display a small
    thumbnail that the user had to click on prior to playing the movie.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 它基本上与之前项目中的 `setImage()` 相同，尽管我们引入了一个 *缩略图* 部分，如果你想要显示一个用户必须点击才能播放电影的小缩略图，你可以使用它。
- en: Once the movie view is pushed (by the documents view), and `setMovie()` is called,
    the `VIDEO` tag in the preceding code will cause the video to start playing instantly
    on iOS devices. Chances are good that the video will also fill the entire screen,
    something common on all mobile platforms. Tablets will generally permit inline
    video, but smaller form factors usually attempt to play video in full screen mode.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦电影视图被推入（由文档视图），并且调用了 `setMovie()`，前面的代码中的 `VIDEO` 标签将导致 iOS 设备上的视频立即开始播放。很可能会填充整个屏幕，这在所有移动平台上都很常见。平板电脑通常允许内联视频，但较小的设备通常尝试以全屏模式播放视频。
- en: 'So, as we already said, iOS is easy: HTML 5 video is properly supported, and
    we can display it simply with a minimum of fuss.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，正如我们之前所说的，iOS 很简单：HTML 5 视频得到了良好的支持，我们可以简单地显示它，无需太多麻烦。
- en: Oh, if the other platforms were only as nice. Android, for example, claims to
    support the `VIDEO` tag, but its implementation is so horribly broken that chances
    are slim you'll find a device on which it will actually work. Yes, the controls
    will display, but that's about it.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，如果其他平台也这么好就好了。例如，Android 声称支持 `VIDEO` 标签，但它的实现非常糟糕，你找到真正能工作的设备的可能性很小。是的，控件会显示，但仅此而已。
- en: What do we do instead? We use another plugin, this time written by Simon MacDonald
    who decided to help the PhoneGap community out by providing a simple video player
    plugin. ([http://simonmacdonald.blogspot.com/2011/11/video-player-plugin-for-phonegap.html](http://simonmacdonald.blogspot.com/2011/11/video-player-plugin-for-phonegap.html))
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们该怎么办呢？我们使用另一个插件，这次是由Simon MacDonald编写的，他决定帮助PhoneGap社区，通过提供一个简单的视频播放器插件来提供帮助。（[http://simonmacdonald.blogspot.com/2011/11/video-player-plugin-for-phonegap.html](http://simonmacdonald.blogspot.com/2011/11/video-player-plugin-for-phonegap.html)）
- en: 'First, you need to install the plugin into your Java project using the following
    steps:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要按照以下步骤将插件安装到你的Java项目中：
- en: Copy the `src` directory from the `Android/VideoPlayer` directory and add it
    to your project. Make sure the contents are included; deep inside this directory
    is a file called `VideoPlayer.java` that you need in your project.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Android/VideoPlayer`目录中的`src`目录复制到你的项目中。确保包含内容；在这个目录深处有一个名为`VideoPlayer.java`的文件，你需要将其包含在你的项目中。
- en: Copy the `video.js` file in the `Android/VideoPlayer/www` directory in the plugin
    package to `www/plugins/Android` in your project.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将插件包中`Android/VideoPlayer/www`目录下的`video.js`文件复制到项目中的`www/plugins/Android`目录。
- en: 'Add the following line to your `index_android.html file`:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到你的`index_android.html`文件中：
- en: '[PRE37]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the following line to your `/res/xml/config.xml` file:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到你的`/res/xml/config.xml`文件中：
- en: '[PRE38]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next, we''ll alter our code in `documentsView.html` to play video using this
    player if we''re an Android device. We''ll be doing this in the `documentContainerTapped()`
    method:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将修改`documentsView.html`中的代码，以便在Android设备上使用此播放器播放视频。我们将在`documentContainerTapped()`方法中这样做：
- en: '[PRE39]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: If we're any platform but Android, we'll attempt to use the movie view to play
    the video, but if we are on Android, we'll use the highlighted code in the preceding
    code snippet, which asks the video player plugin to play the desired video. When
    asked, the video will be played immediately, and in full screen. This does mean
    that Android devices won't ever display the movie view, but the actions available
    from within the view (*delete* and *share*) are also available from the documents
    view, so this isn't a big loss.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不是Android平台，我们将尝试使用电影视图来播放视频，但如果我们在Android上，我们将使用前面代码片段中突出显示的代码，该代码要求视频播放器插件播放所需的视频。当被要求时，视频将立即全屏播放。这意味着Android设备将永远不会显示电影视图，但视图内可用的操作（*删除*和*分享*）在文档视图中也是可用的，所以这并不是一个很大的损失。
- en: What did we do?
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们做了什么？
- en: In this task we used the HTML 5 `VIDEO` tag to play video on devices that support
    it, and we also learned how to use the video player plugin created by Simon MacDonald
    to play video on Android devices.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们使用了HTML 5的`VIDEO`标签来在支持它的设备上播放视频，我们还学习了如何使用Simon MacDonald创建的视频播放器插件在Android设备上播放视频。
- en: Game Over..... Wrapping it up
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏结束..... 结束
- en: 'Let''s see what we finally ended up with; first for iOS the view will be as
    follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们最终得到了什么；首先对于iOS视图将如下所示：
- en: '![Game Over..... Wrapping it up](img/9403_07_07.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![游戏结束..... 结束](img/9403_07_07.jpg)'
- en: 'For Android the view will be as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Android视图将如下所示：
- en: '![Game Over..... Wrapping it up](img/9403_07_08.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![游戏结束..... 结束](img/9403_07_08.jpg)'
- en: If you look at our final app, it's very similar to our previous project's app.
    We've changed some of the graphics a little bit, yes, but visually it's nearly
    identical, and from the code's perspective, it's nearly identical. We've swapped
    out the bits that dealt solely with images and replaced them with bits that work
    with video instead. We've worked with HTML 5 `VIDEO` and also written our own
    plugins using native code. You should now be able to take what you've learned
    and apply it to your own apps in order to record and play video files.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看看我们的最终应用，它与我们的前一个项目的应用非常相似。是的，我们改变了一些图形，但从视觉上看，它们几乎是相同的，从代码的角度来看，它们几乎是相同的。我们替换了仅与图像相关的部分，并用处理视频的部分替换了它们。我们使用了HTML
    5的`VIDEO`标签，并使用原生代码编写了自己的插件。你现在应该能够将你所学的应用到自己的应用中，以便录制和播放视频文件。
- en: Can you take the HEAT? The Hotshot Challenge
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你能承受热度吗？热手挑战
- en: There are several ways that you could further improve this app. How about challenging
    yourself to a few?
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过几种方式进一步改进这个应用。你愿意挑战自己尝试几种吗？
- en: Add the ability to upload the video files to a social network via the **Share**
    button.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过**分享**按钮添加上传视频文件到社交网络的功能。
- en: Allow the user to record more than one video at once, and process each one accordingly.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户一次性录制多个视频，并相应地处理每个视频。
- en: Change the whole app around into an e-learning style app where the videos aren't
    recorded by the user, but baked into the app. Then allow the user to watch your
    videos so that they can learn about a particular subject.
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将整个应用程序转变为一个电子学习风格的APP，其中视频不是由用户录制的，而是嵌入到应用程序中。然后允许用户观看您的视频，以便他们可以了解特定主题。
