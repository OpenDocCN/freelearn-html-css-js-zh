- en: Chapter 2. Customizing with Packages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. 使用包进行定制
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Adding Meteor packages
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加Meteor包
- en: Removing Meteor packages
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除Meteor包
- en: Discovering new packages with Atmosphere
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Atmosphere发现新包
- en: Creating a multipage application with Iron Router
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Iron Router创建多页面应用程序
- en: Building a custom package
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自定义包
- en: Using npm modules
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用npm模块
- en: Publishing custom packages to Atmosphere
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将自定义包发布到Atmosphere
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The package system in Meteor makes your development life much easier. It also
    speaks to one of Meteor's core principles—modular development. If you want to
    use the entire default Meteor stack, great! If you don't like a particular part
    and want to swap it out with a third-party package, great! It's completely up
    to you. Meteor allows you to quickly add and remove functionality, use the latest
    code shared by others, and create your own reusable code segments. This chapter
    will provide you with the recipes needed to take full advantage of the Meteor
    packages system.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor中的包系统使你的开发生活变得更加轻松。这也体现了Meteor的核心原则之一——模块化开发。如果你想使用整个默认的Meteor堆栈，那太好了！如果你不喜欢某个部分，并想用第三方包替换它，那也很好！这完全取决于你。Meteor允许你快速添加和删除功能，使用其他人共享的最新代码，并创建你自己的可重用代码段。本章将为你提供充分利用Meteor包系统所需的食谱。
- en: Adding Meteor packages
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Meteor包
- en: The core **Meteor Development Group** (**MDG**) have developed over 140 packages
    for you to use. These packages provide features and functionality ranging from
    simple display tweaks, to fully integrated account management. Not only are these
    packages useful, but they're extremely easy to add to your project. In addition
    to the core MDG packages, there are hundreds of third-party packages available,
    all of which are free and could be just as easily added. This recipe will show
    you how to add Meteor packages to your project.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 核心Meteor开发组（**MDG**）已经为你开发了超过140个包供你使用。这些包提供了从简单的显示调整到完全集成的账户管理等功能和功能。这些包不仅很有用，而且非常容易添加到你的项目中。除了核心MDG包之外，还有数百个第三方包可供选择，所有这些包都是免费的，并且可以同样容易地添加。这个食谱将向你展示如何将Meteor包添加到你的项目中。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You will need Meteor installed and have a project created. Any project will
    do. You should also have a terminal window open and navigate to the root folder
    of your project, for example, if the name of your project is `packagesTest`, located
    in the `~/Documents/MeteorProjects` folder, you would enter the following command
    in a terminal window:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要安装Meteor并创建一个项目。任何项目都可以。你还应该打开一个终端窗口，导航到你的项目根目录，例如，如果你的项目名称是`packagesTest`，位于`~/Documents/MeteorProjects`文件夹中，你需要在终端窗口中输入以下命令：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let's install the `fastclick` package as an example. This package removes the
    300 ms delay for mobile/touchscreens.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以安装`fastclick`包为例。这个包消除了移动/触摸屏的300毫秒延迟。
- en: 'In your terminal window, in the root folder, enter the following command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的终端窗口中，在根目录下，输入以下命令：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will install the bootstrap package into your project, with a message similar
    to the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在你的项目中安装bootstrap包，并显示类似以下的消息：
- en: '![How to do it...](img/image00330.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image00330.jpeg)'
- en: How it works...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `meteor add [package name]` command tells Meteor to find the named package
    in the Meteor packages registry and copy the appropriate files over to your project.
    In addition, the package name is added to the declaration files of your project
    so that when Meteor starts up your project, the appropriate files for the named
    project are added and executed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`meteor add [包名]`命令告诉Meteor在Meteor包注册表中查找命名的包，并将适当的文件复制到你的项目中。此外，包名被添加到你的项目的声明文件中，这样当Meteor启动你的项目时，将添加并执行命名的项目文件。'
- en: There's more…
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'As mentioned, you can install third-party packages using the same `meteor add`
    command. The difference between a core MDG package and a third-party package is
    that third-party packages have the creator''s account ID as a prefix, for example,
    to add the excellent HammerJS package to your app, you need to enter the following
    command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，你可以使用相同的`meteor add`命令安装第三方包。核心MDG包和第三方包之间的区别在于，第三方包有创建者的账户ID作为前缀，例如，要添加优秀的HammerJS包到你的应用中，你需要输入以下命令：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Other recipes in this chapter will walk you through discovering and implementing
    third-party packages, so stay tuned!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的其他食谱将指导你发现和实现第三方包，所以请保持关注！
- en: See also
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Discovering new packages with Atmosphere* recipe in this chapter
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *使用 Atmosphere 发现新包* 菜谱
- en: Removing Meteor packages
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除 Meteor 包
- en: Removing Meteor packages is just as easy as adding them. This recipe will show
    you how to quickly remove a Meteor package.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 移除 Meteor 包与添加它们一样简单。这个菜谱将向你展示如何快速移除一个 Meteor 包。
- en: Getting ready
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You will need Meteor installed and have a project created. You should also
    have a terminal window open and navigate to the root folder of your project. For
    example, if the name of your project is `packagesTest`, located in the `~/Documents/MeteorProjects`
    folder, enter the following command in a terminal window:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要安装 Meteor 并创建一个项目。你还应该打开一个终端窗口，并导航到你的项目根目录。例如，如果你的项目名称是 `packagesTest`，位于
    `~/Documents/MeteorProjects` 文件夹中，请在终端窗口中输入以下命令：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it…
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s remove the `insecure` Meteor package. In your terminal window, enter
    the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们移除 `insecure` Meteor 包。在你的终端窗口中，输入以下命令：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will remove the `insecure` package.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将移除 `insecure` 包。
- en: How it works…
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `meteor remove [package name]` command will direct Meteor to look for the
    named package in your project declaration files and remove the declaration and
    source files for the package from your project.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`meteor remove [包名]` 命令将指导 Meteor 在你的项目声明文件中查找指定的包，并从你的项目中移除该包的声明和源文件。'
- en: There's more…
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'It''s sometimes very helpful to check and see which packages you have added
    to your project. To see this list, enter the following command in your terminal
    window:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候检查并查看你添加到项目中的包非常有帮助。为了查看这个列表，请在你的终端窗口中输入以下命令：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will give you a quick list of all the packages contained in your project.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给你一个包含在你项目中的所有包的快速列表。
- en: Discovering new packages with Atmosphere
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Atmosphere 发现新包
- en: Meteor is an emerging platform, growing in popularity every day. The Meteor
    community is coming up with new packages and integrations with existing JavaScript
    libraries on almost a daily basis. Because the core Meteor team doesn't have time
    to test and apply every new package made by the community, a package registry,
    with a streamlined installation process, has been created. This package registry
    is called Atmosphere. Atmosphere has a clean, simple UI, which allows you to search
    for, rate, and discover new packages by popularity. This recipe will show you
    how to use Atmosphere to find and implement both Meteor and third-party packages.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor 是一个新兴的平台，每天都在增长其受欢迎程度。Meteor 社区几乎每天都在提出新的包和与现有 JavaScript 库的集成。由于核心 Meteor
    团队没有时间测试和应用社区制作的每个新包，因此创建了一个包注册表，它具有简化的安装流程。这个包注册表被称为 Atmosphere。Atmosphere 拥有干净、简单的用户界面，允许你通过流行度搜索、评分和发现新包。这个菜谱将向你展示如何使用
    Atmosphere 来查找和实现 Meteor 和第三方包。
- en: Getting ready
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: There's nothing really to do here, but you'll definitely want to have Meteor
    installed and a project created to start using the packages listed on Atmosphere
    right away!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这里实际上没有什么可做的，但你绝对需要安装 Meteor 并创建一个项目，以便立即开始使用 Atmosphere 上列出的包！
- en: How to do it…
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To discover new packages with Atmosphere, proceed with the following steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Atmosphere 发现新包，请按照以下步骤操作：
- en: In a browser, navigate to [https://atmospherejs.com](https://atmospherejs.com).
    You should see a very simple page with a centered search input box. Let's look
    for the official Twitter `bootstrap` package.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，导航到 [https://atmospherejs.com](https://atmospherejs.com)。你应该会看到一个带有居中搜索输入框的非常简单的页面。让我们查找官方的
    Twitter `bootstrap` 包。
- en: Type in the word `bootstrap` and watch the search results appear as you type.
    You should see something similar to the following screenshot:![How to do it…](img/image00331.jpeg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入单词 `bootstrap` 并观察搜索结果随着你的输入出现。你应该会看到以下截图类似的内容：![如何操作…](img/image00331.jpeg)
- en: You'll notice that each card in the search results has some statistics at the
    bottom. The down arrow statistic is the number of downloads, which (with the age
    of the package) is the primary statistic in the search results ranking. You will
    see a star, which represents the number of developers that have favorited/starred
    the package. Finally, you will see a gray line in the background, indicating popularity
    over time.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会注意到搜索结果中的每个卡片底部都有一些统计数据。向下箭头统计是下载次数，这（与包的年龄）是搜索结果排名中的主要统计指标。你会看到一个星号，代表有多少开发者将该包标记为收藏/星标。最后，你将看到一个背景中的灰色线条，表示随时间的变化趋势。
- en: Note
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The second result (`twbs:bootstrap`) is the official Twitter Bootstrap package.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二个结果（`twbs:bootstrap`）是官方的Twitter Bootstrap包。
- en: Click on the `twbs:bootstrap` card and an overview of the package will appear.
    You will see additional information about the package. This includes usage instructions,
    a link to the GitHub repository (if available), an expanded history of the package,
    related packages, dependants, and dependencies. At the very top of the page will
    be the instructions to add the package to your project:![How to do it…](img/image00332.jpeg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`twbs:bootstrap`卡片，将出现该包的概述。你将看到有关该包的更多信息。这包括使用说明、GitHub仓库链接（如果有的话）、包的扩展历史、相关包、依赖项和依赖包。在页面顶部将会有添加包到项目的说明：![如何做…](img/image00332.jpeg)
- en: 'You can copy the text and execute it in a terminal window, in your root project
    folder, as shown in the following code:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以复制文本并在终端窗口中执行它，在你的根项目文件夹中，如下所示：
- en: '[PRE6]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After a brief download process, the official Bootstrap package will be installed
    in your project.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在简短的下载过程之后，官方Bootstrap包将被安装到你的项目中。
- en: 'As mentioned in the previous example, Atmosphere has several additional discovery
    options. There are links to the package contributors'' profiles (so you can see
    other packages they may have contributed to), as shown in the following screenshot:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前例所述，Atmosphere有几种额外的发现选项。有链接到包贡献者个人资料（这样你可以看到他们可能贡献的其他包），如下所示：
- en: '![How to do it…](img/image00333.jpeg)'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/image00333.jpeg)'
- en: 'There are links to related packages, as shown in the following screenshot:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，有相关包的链接：
- en: '![How to do it…](img/image00334.jpeg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/image00334.jpeg)'
- en: 'There are links to dependants and dependencies as well, as shown in the following
    screenshot:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，还有链接到依赖项和依赖包：
- en: '![How to do it…](img/image00335.jpeg)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/image00335.jpeg)'
- en: Any of these links will help you to discover other packages that will complement
    the original package and could be useful in your application.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 任何这些链接都将帮助你发现其他可以补充原始包并可能在你的应用程序中很有用的包。
- en: 'Yet even more options exist for discovering packages in Atmosphere. If you
    navigate back to the home page at [https://atmospherejs.com/](https://atmospherejs.com/)
    and scroll down, you will see sections for **Trending**, **Most Used**, **Recent**,
    and **Top Searches**. All of these are worth perusing to discover some of the
    latest and greatest packages available for use:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在Atmosphere中查找包的选项还有更多。如果你导航回主页[https://atmospherejs.com/](https://atmospherejs.com/)并向下滚动，你会看到**趋势**、**最常用**、**最近**和**热门搜索**等部分。所有这些都值得浏览，以发现一些最新和最好的可用包：
- en: '![How to do it…](img/image00336.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/image00336.jpeg)'
- en: Feel free to explore and discover. You'll find some hidden gems in Atmosphere,
    and more than anything else, you'll come to realize that a Meteor package exists
    for almost everything. If it doesn't, create one yourself, with the *Building
    a custom package* recipe found later in this chapter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 随意探索和发现。你会在Atmosphere中发现一些隐藏的宝藏，而且最重要的是，你会意识到几乎每样东西都有一个Meteor包。如果没有，你可以创建一个，就像本章后面找到的“构建自定义包”食谱一样。
- en: How it works…
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The Atmosphere site simply puts a user-friendly wrapper on top of the Meteor
    package repository. It does this very well, and the contributors/creators of the
    site are to be commended. Atmosphere is improving over time, and you can contribute
    to its success if you are so inclined. You can check out what's coming down the
    pipe by visiting the Atmosphere FAQ, found at [https://atmospherejs.com/i/faq](https://atmospherejs.com/i/faq).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Atmosphere网站只是简单地在Meteor包仓库的顶部添加了一个用户友好的包装。它做得非常好，该网站的贡献者/创建者应受到赞扬。Atmosphere正在不断改进，如果你愿意，你可以为其成功做出贡献。你可以通过访问Atmosphere
    FAQ来查看即将推出什么内容，该FAQ位于[https://atmospherejs.com/i/faq](https://atmospherejs.com/i/faq)。
- en: There's more…
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'If you''re in a hurry or really really love the command line, you can perform
    searches in a terminal window, in the root folder of your project. Here''s an
    example of a CLI-based search:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你急于行事或者非常喜欢命令行，你可以在项目根目录的终端窗口中执行搜索。以下是一个基于CLI的搜索示例：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The results will be listed, with a brief explanation for each result, in alphabetical
    order:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将以字母顺序列出，每个结果都有简要说明：
- en: '![There''s more…](img/image00337.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多…](img/image00337.jpeg)'
- en: Be sure to note that the results from this can be pretty hefty (there's no prioritization
    of results), so the effectiveness in using a CLI-based search will vary.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个结果可能相当庞大（没有结果优先级），因此使用基于CLI的搜索的有效性会有所不同。
- en: See also
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Building a custom package* and *Publishing custom packages to Atmosphere*
    recipes in this chapter
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*构建自定义包*和*将自定义包发布到Atmosphere*配方
- en: Creating a multipage application with Iron Router
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Iron Router创建多页面应用程序
- en: Iron Router is an extremely useful Atmosphere package. It allows you to quickly
    and easily add multiple server pages to your Meteor project. This recipe will
    show you how to configure your project to use Iron Router.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Iron Router是一个非常有用的Atmosphere包。它允许你快速轻松地向你的Meteor项目添加多个服务器页面。这个配方将向你展示如何配置你的项目以使用Iron
    Router。
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have Meteor installed. You will also need a blank Meteor project
    (see the *Setting up your project file structure* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Optimizing Your Workflow") , *Optimizing Your Workflow*).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要安装Meteor。你还需要一个空的Meteor项目（参见[第1章](part0015.xhtml#aid-E9OE1 "第1章。优化你的工作流程")中的*设置你的项目文件结构*配方，*优化你的工作流程*）。
- en: 'Finally, you will need to add the Iron Router package to your Meteor project.
    You can reference the *Adding Meteor packages* recipe found previously in this
    chapter, or enter the following command in your terminal window, in the root folder
    of your project:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要在你的Meteor项目中添加Iron Router包。你可以参考本章前面找到的*添加Meteor包*配方，或者在项目根目录的终端窗口中输入以下命令：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How to do it…
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We are going to create a very simple example of multiple pages and we will use
    a fresh blank project to do so.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个非常简单的多页面示例，并使用一个全新的空白项目来完成。
- en: 'First, set up the route paths for the multiple pages. Create a subfolder called
    `router` in the `both` subfolder of your project. This can be done in a terminal
    window with the following command after navigating to the root folder of your
    project:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，设置多个页面的路由路径。在你的项目`both`子文件夹中创建一个名为`router`的子文件夹。这可以在导航到你的项目根文件夹后，在终端窗口中执行以下命令来完成：
- en: '[PRE9]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, create a new file named `router.js` in the `router` folder. Open the `router.js`
    file in a text editor, add the following code, and save your changes:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`router`文件夹中创建一个名为`router.js`的新文件。在文本编辑器中打开`router.js`文件，添加以下代码，并保存你的更改：
- en: '[PRE10]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, open your `main.html` file, located in the `client` subfolder, in an
    editor. Add the following template declarations to the bottom of the file and
    save your changes:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在编辑器中打开位于`client`子文件夹中的`main.html`文件。将以下模板声明添加到文件的底部并保存更改：
- en: '[PRE11]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, open the `main.js` file found at `[project folder]/client/scripts/main.js`
    in an editor. Locate the `Template.hello.events` method and change the ''`click
    button''` function body to the following:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在编辑器中打开位于`[项目文件夹]/client/scripts/main.js`的`main.js`文件。定位到`Template.hello.events`方法，并将`'click
    button'`函数体更改为以下内容：
- en: '[PRE12]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Save your changes to all the files and run your application using the `meteor`
    command.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`meteor`命令保存所有文件的更改并运行你的应用程序。
- en: 'When you navigate to your project''s home page in a browser (`http://localhost:3000/`),
    you should see something similar to the following screenshot:'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你在浏览器中导航到你的项目主页（`http://localhost:3000/`）时，你应该看到以下截图类似的内容：
- en: '![How to do it…](img/image00338.jpeg)'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点…](img/image00338.jpeg)'
- en: Click on the button marked **Click Me**, or navigate to `http://localhost:3000/second/`
    and the screen should change to the following:![How to do it…](img/image00339.jpeg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击标记为**点击我**的按钮，或者导航到`http://localhost:3000/second/`，屏幕应该变为以下内容：![如何做到这一点…](img/image00339.jpeg)
- en: You can continue to toggle between the two pages by clicking on the onscreen
    button.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过点击屏幕上的按钮在两个页面之间继续切换。
- en: How it works…
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Iron Router uses the path in your URL to invoke events in both the client and
    server. In most cases (unless you explicitly set the Iron Router path to render
    on the server, using the `where` parameter) the events and subsequent rendering
    happen in the client only.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Iron Router使用你的URL中的路径在客户端和服务器中调用事件。在大多数情况下（除非你明确使用`where`参数设置Iron Router路径在服务器上渲染），事件和随后的渲染仅在客户端发生。
- en: In essence, Iron Router uses the path as an arguments list, invoking functions
    and rendering appropriate templates based on the information contained in the
    path.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，Iron Router使用路径作为参数列表，根据路径中包含的信息调用函数并渲染适当的模板。
- en: 'Let''s break down the code we just entered to get Iron Router up and running,
    starting with `router.js`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下我们刚刚输入的代码，以启动 Iron Router，从 `router.js` 开始：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This code snippet tells Iron Router to use the `<template>` tag named `routeexample`
    as the main/default template for the page.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码片段告诉 Iron Router 使用名为 `routeexample` 的 `<template>` 标签作为页面的主要/默认模板。
- en: 'We created the `routeexample` template in `main.html`, like so:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `main.html` 中创建了 `routeexample` 模板，如下所示：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `yield` statement found in this template is known as the main yield. It
    is a placeholder for other templates that will be rendered once Iron Router completes
    its mapping process.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模板中找到的 `yield` 语句被称为主要 `yield`。它是一个占位符，用于其他模板，一旦 Iron Router 完成映射过程，这些模板将被渲染。
- en: 'Continuing, in `router.js`, we have the `Router.map` function:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 继续阅读，在 `router.js` 文件中，我们有 `Router.map` 函数：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This creates two mapped routes, using the `this.route` function. In each function
    call, the first parameter specifies the name of the route, and because we didn''t
    specify a specific template, it also implies the name of the template to use.
    In this case, we used the `thing1` and `thing2` templates, which we created in
    `main.html`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了两个映射的路由，使用 `this.route` 函数。在每个函数调用中，第一个参数指定了路由的名称，因为我们没有指定特定的模板，这也意味着它也隐含了要使用的模板名称。在这种情况下，我们使用了
    `thing1` 和 `thing2` 模板，这些模板我们在 `main.html` 中创建：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: These are very simple templates, and this is what makes them easy to understand
    for our example. Each template renders a simple `div` element with a message inside
    of it, indicating what page the user is on.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模板非常简单，这也是它们在我们的例子中易于理解的原因。每个模板都会渲染一个简单的 `div` 元素，其中包含一个消息，指示用户当前所在的页面。
- en: Going back to `router.js`, each `this.route` function call has a path argument
    inside of it. This path argument tells Iron Router what to look for in the URL
    to determine mapping. In the case of our first page (rendering the `thing1` template),
    the `path` element was set to "/", or the root path. In the case of our second
    page (rendering the `thing2` template), the `path` was set to "/second".
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 `router.js`，每个 `this.route` 函数调用中都有一个路径参数。这个路径参数告诉 Iron Router 在 URL 中寻找什么以确定映射。在我们的第一个页面（渲染
    `thing1` 模板）的情况下，`path` 元素被设置为 "/"，即根路径。在我们的第二个页面（渲染 `thing2` 模板）的情况下，`path` 被设置为
    "/second"。
- en: 'At this point, Iron Router was properly mapped, meaning this will have rendered
    the appropriate template based on the mapped routes. We wanted to make switching
    back and forth between the two routes easy, so we modified the `main.js` script
    as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Iron Router 已经正确映射，这意味着它将根据映射的路由渲染适当的模板。我们希望使在两个路由之间切换变得容易，因此我们修改了 `main.js`
    脚本，如下所示：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, when our button is clicked, we are checking to see whether the name of
    the currently mapped route (found using `Router.current().route.getName()`) is
    `thing1`. If it is, we tell Iron Router to change the currently rendered template
    (and the URL path) to our second template, named `thing2`, with a `path` value
    set to "/second". If the currently mapped route isn't `thing1`, then we toggle
    back to the original mapped route.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们的按钮被点击时，我们会检查当前映射的路由名称（通过 `Router.current().route.getName()` 获取）是否为 `thing1`。如果是，我们告诉
    Iron Router 将当前渲染的模板（以及 URL 路径）更改为名为 `thing2` 的第二个模板，其 `path` 值设置为 "/second"。如果当前映射的路由不是
    `thing1`，则切换回原始映射的路由。
- en: The `Router.go` statement changes the URL path, thereby setting events in motion
    to render the appropriate template and insert it into the main yield.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`Router.go` 语句更改了 URL 路径，从而触发了事件，以渲染适当的模板并将其插入到主要 `yield` 中。'
- en: There's more…
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Iron Router is a very sophisticated and powerful package, with many helpful
    features including pre-rendering events, setting data context, and access to server-side
    functions. If you are looking to build a multipage Meteor application, you will
    want to peruse the full documentation, found at [https://github.com/EventedMind/iron-router](https://github.com/EventedMind/iron-router).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Iron Router 是一个非常复杂且强大的包，它包含许多有用的功能，例如预渲染事件、设置数据上下文以及访问服务器端函数。如果你打算构建一个多页面的
    Meteor 应用程序，你将需要仔细阅读完整的文档，该文档可在 [https://github.com/EventedMind/iron-router](https://github.com/EventedMind/iron-router)
    找到。
- en: See also
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a complete app with Iron Router* recipe in [Chapter 12](part0088.xhtml#aid-2JTHG1
    "Chapter 12. Creating Useful Projects"), *Creating Useful Projects*
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 12 章 [创建有用的项目](part0088.xhtml#aid-2JTHG1 "第 12 章。创建有用的项目") 的 *使用 Iron Router
    创建完整的应用程序* 菜谱，*创建有用的项目*
- en: Building a custom package
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自定义包
- en: As you become more familiar with Meteor, you will want to start creating your
    own custom package, which consolidates the code you may find useful in multiple
    projects. This recipe will walk you through the basics of creating your own personal
    Meteor package.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你对 Meteor 的熟悉程度提高，你将想要开始创建自己的自定义包，该包将整合你在多个项目中可能发现有用的代码。这个菜谱将指导你创建自己的个人 Meteor
    包的基础知识。
- en: Getting ready
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The only thing you need for this recipe is Meteor and a text editor.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 制作这个食谱只需要 Meteor 和一个文本编辑器。
- en: How to do it…
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: We will create a package that will allow us to easily write to the console in
    not only the client web console, but also in the server terminal console.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个包，它将使我们能够轻松地在客户端网页控制台以及服务器终端控制台中写入控制台。
- en: 'To create a new baseline package, open a terminal window and navigate to where
    you would like your package to reside. Once there, execute the following command:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个新的基线包，打开一个终端窗口并导航到你希望你的包驻留的位置。一旦到达那里，执行以下命令：
- en: '[PRE18]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Make sure you replace `[myMeteorID]` with your own Meteor Developer Account
    ID or with the ID of the Meteor organization you belong to, for example (and for
    the rest of this chapter), we will use the `packtmeteor` organization. So our
    command will look like the following:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将 `[myMeteorID]` 替换为你自己的 Meteor 开发者账户 ID 或你所属的 Meteor 组织 ID，例如（在本章的其余部分），我们将使用
    `packtmeteor` 组织。因此，我们的命令将如下所示：
- en: '[PRE19]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will now add the code for our package. Open the file named `testpack.js`
    and add the following code:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将添加我们包的代码。打开名为 `testpack.js` 的文件，并添加以下代码：
- en: '[PRE20]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Save your changes and create a new file in the same folder named `servertestpack.js`.
    Open this file for editing and add the following code:'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存你的更改，并在同一文件夹中创建一个名为 `servertestpack.js` 的新文件。打开此文件进行编辑，并添加以下代码：
- en: '[PRE21]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We now need to make a few modifications to `package.js`, to make sure our package
    will work properly. Open `package.js` and modify the `Package.onUse()` method
    to look like the following:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要对 `package.js` 进行一些修改，以确保我们的包能够正常工作。打开 `package.js` 并修改 `Package.onUse()`
    方法，使其看起来如下所示：
- en: '[PRE22]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, add the following code inside the `Package.onUse()` method, just after
    the last `api.AddFiles()` call:'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，在 `Package.onUse()` 方法中添加以下代码，紧接在最后一个 `api.AddFiles()` 调用之后：
- en: '[PRE23]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, modify the `Package.onTest()` method by removing the prefix from the
    test''s filename, like so:'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，通过从测试文件名中移除前缀来修改 `Package.onTest()` 方法，如下所示：
- en: '[PRE24]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Save all your changes, and your package will be ready to be used in an application.
    Select a project you have underway, or create a default Meteor project using the
    `meteor create` command, and add a subfolder named `[project root]/packages/`.
    Copy the `testpack/` folder and paste it into the `[project root]/packages/` folder.
    Then, in a terminal window, execute the following command:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有更改，你的包就准备好在应用程序中使用。选择一个你正在进行的项目，或者使用 `meteor create` 命令创建一个默认的 Meteor 项目，并在
    `[项目根]/packages/` 中添加一个子文件夹。将 `testpack/` 文件夹复制并粘贴到 `[项目根]/packages/` 文件夹中。然后，在终端窗口中，执行以下命令：
- en: '[PRE25]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Your custom package will be registered for use in your project, and you can
    now start your application:'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的自定义包将注册用于你的项目，你现在可以启动你的应用程序：
- en: '[PRE26]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Open a browser, navigate to `http://localhost:3000` and open the web console.
    In the web console, enter the following command:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开浏览器，导航到 `http://localhost:3000` 并打开网页控制台。在网页控制台中，输入以下命令：
- en: '[PRE27]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You should see the following screen in the browser console:'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该在浏览器控制台中看到以下屏幕：
- en: '![How to do it…](img/image00340.jpeg)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00340.jpeg)'
- en: 'You should see the following in the server terminal console:'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该在服务器终端控制台中看到以下内容：
- en: '![How to do it…](img/image00341.jpeg)'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00341.jpeg)'
- en: Congratulations! You've just created your own personal package.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你刚刚创建了自己的个人包。
- en: How it works…
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Packages in Meteor are really just collections of organized files, with a configuration
    file that tells Meteor how to use those files.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Meteor 中，包实际上只是有组织的文件集合，其中有一个配置文件告诉 Meteor 如何使用这些文件。
- en: In this case, we created a default package template using the `meteor create
    --package` command. Note that we followed the `[owner]:[package name]` naming
    convention, which Meteor requires if we want to publish this package on Atmosphere
    for others to use (refer to the *Publishing custom packages to Atmosphere* recipe
    in this chapter for details).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用 `meteor create --package` 命令创建了一个默认的包模板。请注意，我们遵循了 `[所有者]:[包名]` 的命名约定，这是
    Meteor 所要求的，如果我们想在 Atmosphere 上发布此包供他人使用（有关详细信息，请参阅本章中的 *将自定义包发布到 Atmosphere*
    菜单）。
- en: Once created, we added our functionality, which was very simple. We just called
    `console.log()` on the client and on the server.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建，我们就添加了我们的功能，这非常简单。我们只是在客户端和服务器上调用 `console.log()`。
- en: 'Then, we modified the configuration file, which is always named `package.js`.
    The following table shows the three sections that this file contains:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们修改了配置文件，该文件总是命名为 `package.js`。以下表格显示了该文件包含的三个部分：
- en: '| `Package.describe()` | This contains the name, summary, and version number
    of our package. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `Package.describe()` | 这包含了我们的包的名称、摘要和版本号。|'
- en: '| `Package.onUse()` | This lists dependencies and exposes the methods available
    in our package. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `Package.onUse()` | 这列出了依赖项并公开了我们包中可用的方法。|'
- en: '| `Package.onTest()` | This lists dependencies and test methods to be run during
    testing. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `Package.onTest()` | 这列出了测试期间要运行的依赖项和测试方法。|'
- en: For this recipe, we didn't modify the `Package.describe()` method. Meteor autocreated
    this section for us and gave us a *version number*, which is required.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们没有修改 `Package.describe()` 方法。Meteor 自动为我们创建了这一部分，并给了我们一个 *版本号*，这是必需的。
- en: Tip
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Version numbers for packages follow the **Semantic Versioning Specification
    (SemVer)** specification (3 digits + an optional wrap, such as `1.0.2-rc_beta`).
    More information on the SemVer specification can be found at [http://semver.org/](http://semver.org/)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 包的版本号遵循 **语义化版本规范（SemVer）**（3个数字+一个可选的包装，例如 `1.0.2-rc_beta`）。有关 SemVer 规范的更多信息，请参阅
    [http://semver.org/](http://semver.org/)
- en: The bulk of our changes occurred in `Package.onUse()`, so we'll go through each
    item in this method.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的大部分更改发生在 `Package.onUse()` 中，所以我们将逐项说明这个方法。
- en: The `api.versionsFrom()` method specifies which version of Meteor the core packages
    used in your package should come from. This comes in handy because Meteor is updated
    pretty regularly, and some of the dependencies needed to run your package may
    change in later versions. This method allows you to *freeze* the release versions
    of the dependency packages you use in your app to prevent compatibility issues.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`api.versionsFrom()` 方法指定了你的包中使用的核心包应该来自哪个 Meteor 版本。这很有用，因为 Meteor 更新得很频繁，而且一些运行你的包所需的依赖项可能在后续版本中发生变化。此方法允许你将你在应用程序中使用的依赖包的发布版本“冻结”，以防止兼容性问题。'
- en: The `api.addFiles()` method allows us to include files found in our package
    directory and to specify whether they are client or server-specific. In our case,
    we used `api.addFiles()` with a `client` parameter to tell Meteor that the `testpack.js`
    file was client-specific. We then used a `server` parameter to tell Meteor that
    the `servertestpack.js` file was server-specific.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`api.addFiles()` 方法允许我们包含在包目录中找到的文件，并指定它们是客户端特定还是服务器特定。在我们的例子中，我们使用 `api.addFiles()`
    与 `client` 参数一起告诉 Meteor，`testpack.js` 文件是客户端特定的。然后我们使用 `server` 参数告诉 Meteor，`servertestpack.js`
    文件是服务器特定的。'
- en: We then used the `api.export()` method to declare/expose the `TestPack` object.
    This is what enabled us to use the `TestPack.log()` call in the browser's web
    console.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用了 `api.export()` 方法来声明/暴露 `TestPack` 对象。这使得我们能够在浏览器的网页控制台中使用 `TestPack.log()`
    调用。
- en: Finally, we have the `Package.onTest()` method. It contains two `api.use()`
    method calls, which declare the package dependencies needed to run the `testpack-test.js`
    file during testing.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有 `Package.onTest()` 方法。它包含两个 `api.use()` 方法调用，这些调用声明了在测试期间运行 `testpack-test.js`
    文件所需的包依赖项。
- en: Tip
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `api.use()` method isn't exclusive to testing. You can use it in the `Package.onUse()`
    method as well to include the MDG core or third-party packages.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`api.use()` 方法不仅限于测试。你还可以在 `Package.onUse()` 方法中使用它来包含 MDG 核心或第三方包。'
- en: 'After completing our modifications, we copied our entire package over to the
    `packages/` subfolder in our project. This is necessary for any non-deployed package.
    When you use the `meteor add` command to add a package, Meteor checks for the
    package in two places: in the online Meteor package repository (Atmosphere) and
    in the `[project root]/packages/` subfolder. In this case, because our package
    isn''t deployed to Atmosphere, we had a copy of our package in the `packages/`
    subfolder.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 完成我们的修改后，我们将整个包复制到了项目中的 `packages/` 子文件夹。这对于任何未部署的包都是必要的。当你使用 `meteor add` 命令添加包时，Meteor
    会检查两个地方：在线 Meteor 包仓库（Atmosphere）和 `[项目根]/packages/` 子文件夹。在这种情况下，因为我们的包没有部署到 Atmosphere，我们在
    `packages/` 子文件夹中有一个包的副本。
- en: There's more…
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Several other options exist for configuring packages (some of which are included
    in other recipes in this chapter). A complete list of these can be found in the
    Meteor documentation, found at [http://docs.meteor.com/#/full/packagejs](http://docs.meteor.com/#/full/packagejs).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 存在着几种其他配置包的选项（其中一些包含在本章的其他菜谱中）。这些选项的完整列表可以在 Meteor 文档中找到，文档位于 [http://docs.meteor.com/#/full/packagejs](http://docs.meteor.com/#/full/packagejs)。
- en: See also
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Using npm modules* and *Publishing custom packages to Atmosphere* recipes
    in this chapter
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *Using npm modules* 和 *Publishing custom packages to Atmosphere* 菜单
- en: The *Building custom server methods* recipe in [Chapter 11](part0083.xhtml#aid-2F4UM1
    "Chapter 11. Leveraging Advanced Features"), *Leveraging Advanced Features*
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第11章](part0083.xhtml#aid-2F4UM1 "第11章。利用高级功能")中的 *Building custom server methods*
    菜单，*利用高级功能*'
- en: Using npm modules
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 npm 模块
- en: '**Node Package Manager** (**NPM**) has thousands of modules available. Knowing
    how to add an npm module for use in your Meteor project gives you access to all
    of those modules. This recipe will show you how to do this.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**Node 包管理器**（**NPM**）有数千个模块可供使用。知道如何在 Meteor 项目中添加 npm 模块，你可以访问所有这些模块。本菜谱将向你展示如何做到这一点。'
- en: Getting ready
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to make sure that you have Meteor and Node/npm installed.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要确保你已经安装了 Meteor 和 Node/npm。
- en: You will also need a project that makes use of a custom-built package. We will
    be using the project from the *Building a custom package* recipe, found in this
    chapter.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要一个使用自定义构建包的项目。我们将使用本章中 *Building a custom package* 菜单中的项目。
- en: How to do it…
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We first need to add a reference to the npm package that we would like to add,
    which in this case is going to be the `colors` module.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要添加一个对我们要添加的 npm 包的引用，在这个例子中，将是 `colors` 模块。
- en: 'Inside your custom package (the one in the `packages/` subfolder of your app),
    in the `package.js` file, add an `Npm.depends` statement to the end of the file,
    as shown in the following example:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的自定义包（应用 `packages/` 子文件夹中的那个）的 `package.js` 文件中，将 `Npm.depends` 语句添加到文件末尾，如下例所示：
- en: '[PRE28]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now we need to add an `Npm.require` reference to the `colors` module and change
    our `console.log()` command to use a rainbow of fruit flavors. Change your `server-test.js`
    file so it looks like the following example:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要向 `colors` 模块添加一个 `Npm.require` 引用，并将我们的 `console.log()` 命令更改为使用彩虹水果口味。将你的
    `server-test.js` 文件修改如下例所示：
- en: '[PRE29]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Save your changes and we are ready to test our updated package. Navigate to
    `http://localhost:3000` in a browser, open the browser web console, and execute
    the following command a few times:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的更改，我们就可以测试更新后的包了。在浏览器中导航到 `http://localhost:3000`，打开浏览器控制台，并多次执行以下命令：
- en: '[PRE30]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If you switch to your console window, you should see a multicolored response,
    as shown in the following screenshot:![How to do it…](img/image00342.jpeg)
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你切换到你的控制台窗口，你应该会看到一个多彩的响应，如下面的截图所示：![如何操作…](img/image00342.jpeg)
- en: How it works…
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Npm.depends` declaration in `package.js` tells Meteor that whenever it
    starts, it needs to go and install the npm modules listed. In this case, we are
    telling Meteor to go and fetch the `colors` module, version `0.6.2`, from the
    npm registry.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `package.js` 文件中的 `Npm.depends` 声明告诉 Meteor，每次启动时，它需要安装列出的 npm 模块。在这种情况下，我们告诉
    Meteor 去 npm 注册表中获取 `colors` 模块，版本 `0.6.2`。
- en: The `Npm.require` function call in `server-test.js` makes the `colors` module
    functionality available on the server. Now, any time we make a `console.log()`
    call, the string passed into the call can have a `.color` reference added to it.
    In our case, we chose `.rainbow`, which makes every letter from the string printed
    out to the console appear in a different color.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `server-test.js` 中的 `Npm.require` 函数调用使 `colors` 模块的功能在服务器上可用。现在，每次我们进行 `console.log()`
    调用时，传递给调用的字符串可以添加一个 `.color` 引用。在我们的例子中，我们选择了 `.rainbow`，这使得打印到控制台中的每个字母都显示为不同的颜色。
- en: Tip
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: To see all the various options available in the npm `colors` module, visit [https://npmjs.org/package/colors](https://npmjs.org/package/colors).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 npm `colors` 模块中所有可用的各种选项，请访问 [https://npmjs.org/package/colors](https://npmjs.org/package/colors)。
- en: There's more…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: You can use any npm module you would like in a custom Meteor package. Some of
    them rely on asynchronous methods and events, so you will have to wrap those modules
    with specific asynchronous Meteor methods. You can read more about these methods
    in [Chapter 11](part0083.xhtml#aid-2F4UM1 "Chapter 11. Leveraging Advanced Features"),
    *Leveraging Advanced Features*.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在自定义Meteor包中使用任何您想要的npm模块。其中一些依赖于异步方法和事件，因此您必须使用特定的异步Meteor方法来包装这些模块。您可以在第11章（[part0083.xhtml#aid-2F4UM1
    "第11章。利用高级功能"）中了解更多关于这些方法的信息，*利用高级功能*。
- en: See also
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Using npm packages directly* recipe in [Chapter 8](part0069.xhtml#aid-21PMQ1
    "Chapter 8. Integrating Third-party Libraries"), *Integrating Third-party Libraries*
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第8章（[part0069.xhtml#aid-21PMQ1 "第8章。集成第三方库"）中关于*直接使用npm包*的配方，*集成第三方库*
- en: The *Handling asynchronous methods and using asynchronous functions* recipe
    in [Chapter 11](part0083.xhtml#aid-2F4UM1 "Chapter 11. Leveraging Advanced Features"),
    *Leveraging Advanced Features*
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第11章（[part0083.xhtml#aid-2F4UM1 "第11章。利用高级功能"）中关于*处理异步方法和使用异步函数*的配方，*利用高级功能*
- en: Publishing custom packages to Atmosphere
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将自定义包发布到Atmosphere
- en: When you've created a useful package and want to share it with the world, Atmosphere
    is the way to go. This recipe will show you how to upload your custom package
    to Atmosphere and provides some best practices for maintaining your package moving
    forward.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建了一个有用的包并希望与世界分享时，Atmosphere是您的最佳选择。这个配方将向您展示如何上传您的自定义包到Atmosphere，并提供了一些维护您包的最佳实践。
- en: Getting ready
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To create a quick Atmosphere package, please complete the *Using npm modules*
    recipe found in this chapter.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个快速Atmosphere包，请完成本章中找到的*使用npm模块*配方。
- en: 'You will also need to create a blank repository on GitHub. Assuming you have
    a GitHub login, navigate to the home page ([https://github.com](https://github.com))
    and create a new repository:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要在GitHub上创建一个空白的仓库。假设您有GitHub登录，请导航到首页([https://github.com](https://github.com))并创建一个新的仓库：
- en: '![Getting ready](img/image00343.jpeg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00343.jpeg)'
- en: Add a title and description to your repository and click on the button marked
    **Create repository**.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的仓库添加标题和描述，然后点击标记为**创建仓库**的按钮。
- en: To populate your new Git repository, you will need the Git URL, which can be
    copied from the home page of your new Git project. It should look something like
    [https://github.com/strack/packt-testpack.git](https://github.com/strack/packt-testpack.git).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 要填充您的新Git仓库，您需要Git URL，可以从您新Git项目的首页复制。它看起来可能像[https://github.com/strack/packt-testpack.git](https://github.com/strack/packt-testpack.git)。
- en: Remember this URL, as you will be using it to populate the content of your new
    repository.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这个URL，因为您将使用它来填充您新仓库的内容。
- en: How to do it…
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: To register and upload our package, we need to check our configuration file,
    upload our code to GitHub, and then deploy our package.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要注册和上传我们的包，我们需要检查我们的配置文件，将我们的代码上传到GitHub，然后部署我们的包。
- en: 'To configure `package.js`, open the `package.js` file found in the root folder
    of your package. In our case, the file is located at `[project root]/packages/testpack/package.js`.
    We will first modify the summary, as shown in the following example:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要配置`package.js`，请打开位于您包根目录下的`package.js`文件。在我们的例子中，该文件位于`[项目根]/packages/testpack/package.js`。我们首先将修改摘要，如下例所示：
- en: '[PRE31]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Next, we will add the GitHub URL to the `git` property:'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，我们将添加GitHub URL到`git`属性：
- en: '[PRE32]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You will notice that the documentation property references the `README.md`
    file, which means that our GitHub documentation will serve a dual purpose. Open
    `README.md` and add the following line:'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您会注意到文档属性引用了`README.md`文件，这意味着我们的GitHub文档将具有双重用途。打开`README.md`并添加以下行：
- en: '[PRE33]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To push the code to GitHub, save all of your files and navigate to the root
    folder of your package (not the root folder of your application) in a terminal
    window. In our case, the root folder is `[project root]/packages/testpack/`. Enter
    the following lines to populate the GitHub repository:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将代码推送到GitHub，请保存所有文件，并在终端窗口中导航到您的包根目录（不是应用程序的根目录）。在我们的例子中，根目录是`[项目根]/packages/testpack/`。输入以下行以填充GitHub仓库：
- en: '[PRE34]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To publish to Atmosphere, call `meteor publish` with the following command
    once it is completed:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，要发布到Atmosphere，请使用以下命令调用`meteor publish`：
- en: '[PRE35]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Voila! You have added your package to Atmosphere.
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 哇！您已将您的包添加到Atmosphere。
- en: Tip
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We deployed all packages directly from the `packages` subfolder of an application.
    A best practice is to develop and deploy your package on its own, independent
    of any application. Refer to the *Building a custom package* recipe.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们直接从应用程序的 `packages` 子文件夹中部署了所有包。最佳实践是在独立于任何应用程序的情况下开发和部署您的包。请参阅 *构建自定义包* 的说明。
- en: 'You can see your package live on Atmosphere by navigating to [https://atmospherejs.com](https://atmospherejs.com)
    and searching for it by name, as shown in the following screenshot:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过导航到 [https://atmospherejs.com](https://atmospherejs.com) 并按名称搜索来在 Atmosphere
    上查看您的包，如下面的截图所示：
- en: '![How to do it…](img/image00344.jpeg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/image00344.jpeg)'
- en: As with any other Meteor package found in Atmosphere, you can add it to any
    of your projects using the `meteor add` command in the terminal.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在 Atmosphere 中找到的任何其他 Meteor 包一样，您可以使用终端中的 `meteor add` 命令将其添加到您的任何项目中。
- en: How it works…
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Atmosphere reads the `package.js` file for the data that needs to be published,
    checks to make sure all information is accurate, and then publishes a link to
    your project from a GitHub repository. In this specific case, we added a summary
    to our file, specified the GitHub URL in the `git` property, and (after creating
    the GitHub repository) called `meteor publish` to deploy packages.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Atmosphere 读取需要发布的 `package.js` 文件，检查所有信息是否准确，然后从 GitHub 仓库发布一个链接到您的项目。在这个特定案例中，我们在文件中添加了一个摘要，在
    `git` 属性中指定了 GitHub URL，并在创建 GitHub 仓库后调用 `meteor publish` 来部署包。
- en: There's more…
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: More instructions on how to publish to Atmosphere can be found at [https://atmospherejs.com/i/publishing](https://atmospherejs.com/i/publishing).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于如何发布到 Atmosphere 的说明可以在 [https://atmospherejs.com/i/publishing](https://atmospherejs.com/i/publishing)
    找到。
- en: See also
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding Meteor packages* and *Discovering new packages with Atmosphere*
    recipes in this chapter
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *添加 Meteor 包* 和 *使用 Atmosphere 发现新包* 的说明
