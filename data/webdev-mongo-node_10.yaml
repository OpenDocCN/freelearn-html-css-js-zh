- en: Deploying with Cloud-Based Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用基于云的服务部署
- en: Inevitably, you'll want the application you've been building to be online and
    available to the world, whether you want to host your application online during
    its development process or when it's complete and ready for production. There
    are a number of different hosting options currently available for Node.js and
    MongoDB-based apps, and in this chapter, we'll take a look at deploying to a few
    different popular services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 不可避免地，您会希望您一直在构建的应用程序在线并且对世界可用，无论您是想在开发过程中在线托管您的应用程序，还是在应用程序完成并准备投入生产时。目前有许多不同的托管选项可供Node.js和基于MongoDB的应用程序使用，在本章中，我们将介绍一些不同的热门服务的部署方式。
- en: 'In this chapter, we will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下内容：
- en: Cloud versus traditional web hosting
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云与传统Web托管
- en: An introduction to Git source control
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git源代码控制的介绍
- en: Deploying an application with Nodejitsu
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Nodejitsu部署应用程序
- en: Deploying an application with Heroku
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Heroku部署应用程序
- en: Deploying an application with Amazon Web Services
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Amazon Web Services部署应用程序
- en: Deploying an application with Microsoft Azure
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Microsoft Azure部署应用程序
- en: A brief look at DigitalOcean
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对DigitalOcean的简要介绍
- en: Cloud versus traditional hosting
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云与传统托管
- en: If you have any previous experience with website hosting, which I'll refer to
    as traditional hosting, you're probably pretty familiar with the process of using
    FTP to upload your web files to your hosting provider. With traditional web hosting,
    service providers typically offer shared space to every user, each configured
    with their own public folder that houses the web files. In a scenario like this,
    every customer hosts the same kind of website, and their files are all stored
    and served from a single web server.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前有网站托管的经验，我将称之为传统托管，您可能对使用FTP上传网页文件到托管提供商的过程非常熟悉。在传统Web托管中，服务提供商通常为每个用户提供共享空间，每个用户都配置有自己的公共文件夹，用于存放网页文件。在这种情况下，每个客户都托管相同类型的网站，他们的文件都存储在同一台Web服务器上并由其提供服务。
- en: Traditional web hosting is fairly inexpensive because a single web server can
    host literally hundreds, if not thousands, of individual websites. Scaling is
    typically a problem with traditional hosting because if your website demanded
    more power, it would need to be moved to another server (with more hardware) and
    could experience potential downtime during this move. As a side effect, if a website
    on the same server as your own is being particularly demanding of the hardware,
    every site on that server could suffer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的Web托管成本相对较低，因为单个Web服务器可以托管成百上千个个人网站。传统托管通常存在扩展性问题，因为如果您的网站需要更多的资源，它需要被迁移到另一台服务器（具有更多硬件），并且在此迁移过程中可能会出现潜在的停机时间。作为一个副作用，如果与您的网站位于同一服务器上的网站对硬件要求特别高，那么该服务器上的每个网站都可能会受到影响。
- en: With cloud-based hosting, every instance of a website or service is hosted on
    its own **Virtual Private Server** (**VPS**). When a customer uploads a copy of
    their website, that website is running in its own isolated environment, and the
    environment is specifically designed to run only that website. Virtual private
    servers are instances of a server, typically all running simultaneously on the
    same hardware. Due to its isolated nature, a VPS scales very well because settings
    simply need to be changed for hardware allocation, and the server restarts. If
    your VPS is hosted on the same hardware as others, and they are experiencing high-volume
    spikes, your website will not suffer because of the isolated nature of the VPS.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基于云的托管，每个网站或服务的实例都托管在自己的虚拟专用服务器（VPS）上。当客户上传其网站的副本时，该网站在其自己的隔离环境中运行，并且该环境专门设计用于仅运行该网站。虚拟专用服务器是服务器的实例，通常都同时在同一硬件上运行。由于其隔离性质，VPS的扩展性非常好，因为只需更改硬件分配的设置，服务器就会重新启动。如果您的VPS托管在与其他VPS相同的硬件上，并且它们正在经历高流量峰值，您的网站不会因VPS的隔离性质而受到影响。
- en: Infrastructure as a Service versus Platform as a Service
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施即服务与平台即服务
- en: The beauty of the cloud is that the level and amount of service one can obtain
    varies greatly. For something as simple as a basic hosting plan to run your web
    application, you can use any number of services that are considered a **Platform
    as a Service** (**PaaS**). This is a service that provides a platform for you
    to host and run your web application. Increasing in scale and complexity, you
    can turn to an **Infrastructure as a Service** (**IaaS**) provider, which offers
    an entire cloud-based data center at your disposal.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 云的美妙之处在于可以获得的服务级别和数量变化很大。对于运行您的Web应用程序的基本托管计划，您可以使用许多被视为平台即服务（PaaS）的服务。这是一种为您提供托管和运行Web应用程序的平台。随着规模和复杂性的增加，您可以转向提供整个基于云的数据中心的基础设施即服务（IaaS）提供商。
- en: You can learn more about the differences between IaaS, PaaS, and **Software
    as a Service** (**SaaS**) by reading a detailed article available at [http://www.rackspace.com/knowledge_center/whitepaper/understanding-the-cloud-computing-stack-saas-paas-iaas](http://www.rackspace.com/knowledge_center/whitepaper/understanding-the-cloud-computing-stack-saas-paas-iaas).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过阅读一篇详细的文章了解IaaS、PaaS和软件即服务（SaaS）之间的区别，该文章可在[http://www.rackspace.com/knowledge_center/whitepaper/understanding-the-cloud-computing-stack-saas-paas-iaas](http://www.rackspace.com/knowledge_center/whitepaper/understanding-the-cloud-computing-stack-saas-paas-iaas)上找到。
- en: Cloud-based hosting costs can vary greatly because of the simple fact that they
    are so scalable. Your costs can fluctuate throughout a single month dramatically,
    depending directly on your need for power (that is, during more demanding times
    of the month and/or with big social media hits such as HackerNews or Reddit).
    On the flip side, if you require very little power for a server, you can often
    get cloud hosting for free!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 基于云的托管成本可能会有很大的变化，因为它们非常可扩展。您的成本可能会在一个月内发生剧烈波动，这取决于您对资源的需求（即，在一个月中需求更高的时间和/或像HackerNews或Reddit这样的大型社交媒体的点击）。另一方面，如果您对服务器的需求非常小，您通常可以免费获得云托管！
- en: Traditional web hosting service providers include GoDaddy, Dreamhost, 1&1, HostGator,
    and Network Solutions. Popular cloud-based hosting options include Nodejitsu (PaaS),
    Heroku (PaaS), Amazon Web Services (IaaS), Microsoft Azure (IaaS), and Digital
    Ocean.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的Web托管服务提供商包括GoDaddy、Dreamhost、1&1、HostGator和Network Solutions。热门的基于云的托管选项包括Nodejitsu（PaaS）、Heroku（PaaS）、Amazon
    Web Services（IaaS）、Microsoft Azure（IaaS）和Digital Ocean。
- en: An introduction to Git
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git简介
- en: With traditional hosting providers, the standard method for connecting to your
    server and uploading your files was to use **File Transfer Protocol** (**FTP**).
    You would connect using any standard FTP software and push a copy of your files
    to the server, and those changes would be reflected online instantly when accessing
    your website URL. With cloud-based hosting providers, the standard is typically
    to use the Git source control. Git is a source control technology that allows
    you to track changes and history with your project source code, as well as to
    provide an easy-use means of collaboration with multiple developers. The most
    popular Git online code repository provider is currently [www.github.com](http://www.github.com).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于传统的托管提供商，连接到服务器并上传文件的标准方法是使用**文件传输协议**（**FTP**）。您可以使用任何标准的FTP软件进行连接，并将文件副本推送到服务器，这些更改将在访问您的网站URL时立即反映在线。对于基于云的托管提供商，标准通常是使用Git源代码控制。Git是一种源代码控制技术，允许您跟踪项目源代码的更改和历史，以及提供与多个开发人员轻松协作的简便方法。目前最受欢迎的Git在线代码存储库提供商是[www.github.com](http://www.github.com)。
- en: 'We will use Git in order to track our application project source code and the
    method of pushing our code up to the various cloud-hosting providers. When you
    push code using Git, you are effectively transferring all or only the changed
    version of your code to an online repository (for example, Git and [www.github.com](http://www.github.com)
    are relatively easy to get into, but can seem intimidating and complex). If you''re
    unfamiliar with Git and/or [https://GitHub.com](https://GitHub.com), I would strongly
    suggest taking a moment to get acquainted by checking out the following guides:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Git来跟踪我们的应用项目源代码，并将我们的代码推送到各种云托管提供商。当您使用Git推送代码时，您实际上是将所有或仅更改版本的代码传输到在线存储库（例如，Git和[www.github.com](http://www.github.com)相对容易进入，但可能看起来令人生畏和复杂）。如果您对Git和/或[https://GitHub.com](https://GitHub.com)不熟悉，我强烈建议您花点时间通过查看以下指南来熟悉：
- en: '[https://help.github.com/articles/set-up-git](https://help.github.com/articles/set-up-git)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://help.github.com/articles/set-up-git](https://help.github.com/articles/set-up-git)'
- en: '[https://gist.github.com/andrewpmiller/9668225](https://gist.github.com/andrewpmiller/9668225)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://gist.github.com/andrewpmiller/9668225](https://gist.github.com/andrewpmiller/9668225)'
- en: 'The guides will take you through the following concepts:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 指南将带您了解以下概念：
- en: Downloading and installing Git
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载和安装Git
- en: Registering an account at [https://github.com](https://github.com)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://github.com](https://github.com)注册帐户
- en: Authenticating your machine with [https://github.com](https://github.com) and
    creating your first repository
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[https://github.com](https://github.com)对您的计算机进行身份验证并创建您的第一个存储库
- en: Committing your project source code to the repository
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将项目源代码提交到存储库
- en: Once you have your project source code configured as a local Git repository
    and all of the code committed to the master branch, proceed to the following sections.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将项目源代码配置为本地Git存储库，并且所有代码都提交到主分支，就可以继续阅读以下各节。
- en: Deploying your application
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署您的应用程序
- en: Now that you have your project set up as a local GitHub repository, it's time
    to take that code and get it online! The following sections will each cover the
    process of deploying your application to a few different popular cloud-based hosting
    providers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经将项目设置为本地GitHub存储库，是时候将该代码上线了！接下来的各节将分别介绍将应用程序部署到几个不同的热门基于云的托管提供商的过程。
- en: Feel free to explore and experiment with each, as most have free or relatively
    inexpensive plans. Each provider has its strengths and weaknesses, so I'll leave
    it up to you to decide which to stick to for your particular needs. The services
    that we cover aren't presented in any particular order.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请随意探索和尝试每个提供商，因为大多数都有免费或相对便宜的计划。每个提供商都有其优势和劣势，所以我将由您决定哪个适合您的特定需求。我们介绍的服务没有特定的顺序。
- en: For the purpose of this chapter, I will consistently name my app `imgploadr`;
    however, your app name needs to be different and unique. Wherever I include `imgploadr`
    in this chapter, you should replace it with your own app's unique name.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本章的目的，我将一贯地将我的应用命名为`imgploadr`；但是，您的应用名称需要不同和独特。在本章中，无论我何时提到`imgploadr`，您都应该用您自己应用的独特名称替换它。
- en: Nodejitsu
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nodejitsu
- en: To get started with Nodejitsu, visit [www.nodejitsu.com](http://www.nodejitsu.com)
    and register for a free account first. After providing your email address, username,
    and password, you will be presented with a pricing plan page where you can configure
    your service. If you just want to create the free account and experiment, simply
    click on the No Thanks button and the registration process is complete. Then,
    simply click on the Login button in the upper-right corner to log in and proceed
    to your Apps dashboard.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Nodejitsu，请访问[www.nodejitsu.com](http://www.nodejitsu.com)并首先注册一个免费帐户。在提供您的电子邮件地址、用户名和密码后，您将看到一个定价计划页面，您可以在该页面配置您的服务。如果您只想创建免费帐户并进行实验，只需单击“不，谢谢”按钮，注册过程就完成了。然后，只需单击右上角的“登录”按钮即可登录并转到您的应用程序仪表板。
- en: '![](img/c7398050-dfa5-4944-99b2-a69b657b3c89.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7398050-dfa5-4944-99b2-a69b657b3c89.png)'
- en: 'Deploying your app to Nodejitsu will require a new command-line interface tool;
    specifically, the `jitsu` CLI. Clicking on the big blue Deploy an app with jitsu
    button will take you to the [www.github.com](http://www.github.com) repository
    for this tool. You can skip that step and just install the CLI manually, using
    the following `npm` command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的应用程序部署到Nodejitsu将需要一个新的命令行界面工具；具体来说，是`jitsu` CLI。单击大蓝色的使用jitsu部署应用程序按钮将带您到此工具的[www.github.com](http://www.github.com)存储库。您可以跳过这一步，只需使用以下`npm`命令手动安装CLI：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `sudo` part of the command to install an `npm` package globally (using the
    `-g` flag) is sometimes required. Depending on the access level of the machine
    you are using, you may or may not need to include `sudo`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`npm`包时，有时需要使用`sudo`命令来全局安装（使用`-g`标志）。取决于您所使用的机器的访问级别，您可能需要或者不需要包括`sudo`。
- en: 'Now that the `jitsu` CLI is installed, you can use this handy tool to log in
    to your Nodejitsu account, create an app, and deploy your project code. First,
    let''s log in:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`jitsu` CLI已安装，您可以使用这个方便的工具来登录到您的Nodejitsu帐户，创建一个应用程序，并部署您的项目代码。首先，让我们登录：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can see that after successfully providing your username and password, you
    are now authenticated with Nodejitsu and are ready to go.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，在成功提供用户名和密码后，您现在已经通过Nodejitsu进行了身份验证，准备好开始了。
- en: Before we can deploy the actual application, we need to configure the MongoDB
    database in our Nodejitsu dashboard. Switch back to your browser, and on the Nodejitsu
    Apps dashboard, switch sections by clicking on the Databases tab.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实际部署应用程序之前，我们需要在Nodejitsu仪表板中配置MongoDB数据库。切换回浏览器，在Nodejitsu应用程序仪表板上，通过单击数据库选项卡切换部分。
- en: '![](img/135e760f-d109-4013-8f8f-94fd238cc1eb.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/135e760f-d109-4013-8f8f-94fd238cc1eb.png)'
- en: Let's choose MongoHQ for our needs by clicking on the large MongoHQ button.
    You will be prompted for a name for the new database, and then it will be listed
    at the bottom of the screen in the Your databases section. The important part
    we need is the connection string, and there's a convenient copy link right next
    to it to copy it to your clipboard.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单击大的MongoHQ按钮，让我们选择MongoHQ来满足我们的需求。您将被提示为新数据库命名，然后它将在屏幕底部的“您的数据库”部分列出。我们需要的重要部分是连接字符串，旁边有一个方便的复制链接，可以将其复制到剪贴板。
- en: 'Edit the `server.js` file and update the `mongoose.connect` line to use the
    new connection string you copied for your Nodejitsu database:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`server.js`文件，并更新`mongoose.connect`行以使用您为Nodejitsu数据库复制的新连接字符串：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The only thing remaining is to open a Terminal, change directories to your
    project home, and execute the following command to package up your app and push
    it to Nodejitsu:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一剩下的就是打开终端，切换到项目主目录，并执行以下命令来打包您的应用程序并将其推送到Nodejitsu：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After executing `jitsu deploy`, the CLI first prompts you to confirm what the
    subdomain will be under the [www.nodejitsu.com](http://www.nodejitsu.com) domain.
    Feel free to change this to whatever you like (it will check to confirm availability).
    It then makes a few minor modifications to your `package.json` file, specifically
    including the `subdomain` option with whatever value you provided. Finally, it
    uploads your source code and performs a remote `npm install` operation. Assuming
    that all went well, the app should be deployed and a confirmation of the URL should
    output to the screen. Feel free to open that URL in your browser to view the app
    online!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`jitsu deploy`后，CLI首先会提示您确认在[www.nodejitsu.com](http://www.nodejitsu.com)域名下的子域名是什么。随意更改为您喜欢的内容（它将检查确认可用性）。然后，它会对您的`package.json`文件进行一些微小的修改，具体包括使用您提供的任何值包括`subdomain`选项。最后，它会上传您的源代码并执行远程`npm
    install`操作。假设一切顺利，应用程序应该已部署，并且URL的确认应该输出到屏幕上。随意在浏览器中打开该URL以查看在线应用程序！
- en: 'Now, you can also see that the app is listed in your Apps dashboard:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您还可以看到应用程序在应用程序仪表板中列出：
- en: '![](img/40844f95-248b-4505-93e8-5dc413ba1d82.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40844f95-248b-4505-93e8-5dc413ba1d82.jpg)'
- en: 'Now that the application has been successfully uploaded, launch it via its
    URL and give it a test run by attempting to upload a new image. The first thing
    you should note is that attempting to upload an image fails with a fairly useless
    error (you can see the following error by accessing the Logs tab from your app''s
    dashboard):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用程序已成功上传，通过其URL启动它，并尝试上传一个新图像进行测试运行。您应该注意到的第一件事是，尝试上传图像失败，并显示一个相当无用的错误（您可以通过从应用程序仪表板的日志选项卡访问以下错误）：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This error is far from helpful! Basically, what's happening here is that the
    application is attempting to upload and save the image to the `temp` folder, which
    doesn't actually exist! We need to add a snippet of code to our application to
    check for this condition and create the folders, if necessary.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误远非有用！基本上，这里发生的是应用程序试图上传并保存图像到实际上并不存在的`temp`文件夹！我们需要向我们的应用程序添加一小段代码来检查这种情况，并在必要时创建文件夹。
- en: 'Edit the `server/configure.js` file and insert the following code snippet between
    `routes (app);` and `return app;`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`server/configure.js`文件，并在`routes(app);`和`return app;`之间插入以下代码片段：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, we''re using the filesystem `fs` module to create both the parent `upload`
    folder and the `temp` subfolder. Don''t forget to `require` the `fs` module at
    the top of the file, too:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用文件系统`fs`模块来创建父`upload`文件夹和`temp`子文件夹。也不要忘记在文件顶部`require` `fs`模块：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There is an `npm` module called `node-mkdirp` that will perform a recursive
    `mkdir`, which will basically accomplish the double `mkdir` we called in the preceding
    example. The only reason I didn't include it was for brevity and to not include
    additional instructions to install the module, require it, and use it unnecessarily.
    More information can be found at [https://www.npmjs.org/package/mkdirp](https://www.npmjs.org/package/mkdirp).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为`node-mkdirp`的`npm`模块，它将执行递归的`mkdir`，基本上实现了我们在前面示例中调用的双重`mkdir`。我之所以没有包括它，是为了简洁起见，不包括额外的安装模块、要求它并不必要地使用它的指示。更多信息可以在[https://www.npmjs.org/package/mkdirp](https://www.npmjs.org/package/mkdirp)找到。
- en: 'With the mentioned changes made to your code, you need to deploy your application
    again. Simply execute another `jitsu deploy`, and a fresh copy of your code will
    be uploaded to your instance:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在对代码进行了上述更改后，你需要再次部署你的应用程序。只需执行另一个`jitsu deploy`，你的代码的新副本将被上传到你的实例：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Open your app URL again, and this time you should be able to interact with the
    application and successfully upload a new image! Congratulations, you have successfully
    deployed your application, and it is now online using the Nodejitsu hosting service!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 再次打开你的应用程序URL，这次你应该能够与应用程序进行交互并成功上传新的图片！恭喜，你已成功部署了你的应用程序，现在它正在使用Nodejitsu托管服务在线运行！
- en: Heroku
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Heroku
- en: Another popular cloud-based hosting provider for Node.js apps is [www.Heroku.com](http://www.Heroku.com).
    The one thing that sets Heroku apart from other providers is the number of powerful
    add-ons that are available. Any kind of service you can imagine that your application
    will require is available as an add-on, including data stores, search, logging
    and analytics, email and SMS, workers and queuing, monitoring, and media. Each
    of these add-ons can be quickly and easily added to your service and integrated
    into your application.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个流行的基于云的Node.js应用程序托管提供商是[www.Heroku.com](http://www.Heroku.com)。Heroku与其他提供商的一个不同之处在于其提供的强大附加组件的数量。任何你能想象到的你的应用程序需要的服务都可以作为附加组件使用，包括数据存储、搜索、日志和分析、电子邮件和短信、工作和排队、监控和媒体。这些附加组件可以快速而轻松地添加到你的服务中，并集成到你的应用程序中。
- en: Like Nodejitsu, Heroku allows you to register for a free account and work within
    the confines of their *sandbox* pricing plans. The plans are free, but limited
    in scope with regard to bandwidth, processing power, and so on. Most, if not all,
    of the add-ons typically also offer some sort of free sandbox or trial-based plan.
    Just like Nodejitsu, one of the add-ons we will be using with our Heroku app is
    MongoHQ, a cloud-based MongoDB service provider.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 与Nodejitsu一样，Heroku允许你注册一个免费帐户，并在其*沙箱*定价计划范围内工作。这些计划是免费的，但在带宽、处理能力等方面有限。大多数，如果不是全部，附加组件通常也提供某种免费的沙箱或基于试用的计划。与Nodejitsu一样，我们将在Heroku应用程序中使用的附加组件之一是MongoHQ，一个基于云的MongoDB服务提供商。
- en: To get started, first go to [http://heroku.com](http://heroku.com) and sign
    up for your free account. While registration doesn't require a credit card, in
    order to include any add-ons with your application, you will have to have a credit
    card on file (even though you won't be charged unless you choose to scale up the
    services). After registering, click on the link in the confirmation email and
    provide a password; you will be presented with your Apps dashboard.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，去[http://heroku.com](http://heroku.com)注册一个免费帐户。虽然注册不需要信用卡，但是为了在你的应用程序中包含任何附加组件，你必须在文件中提供信用卡（即使你不选择扩展服务，也不会被收费）。注册后，点击确认电子邮件中的链接并提供密码；你将看到你的应用程序仪表板。
- en: '![](img/eed40703-a4d0-4d18-8035-9968d35e4bb7.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eed40703-a4d0-4d18-8035-9968d35e4bb7.png)'
- en: You'll note that the first thing you need to do is to download the Heroku Toolbelt
    (again, much like the `jitsu` CLI for Nodejitsu). Click on the Download button
    to download and install the Toolbelt. The Toolbelt is a CLI specifically used
    to create and deploy apps to Heroku, and gives you the `heroku` command.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你需要做的第一件事是下载Heroku Toolbelt（与Nodejitsu的`jitsu` CLI类似）。点击下载按钮下载并安装Toolbelt。Toolbelt是一个专门用于创建和部署应用程序到Heroku的CLI，并提供了`heroku`命令。
- en: Once you have the Toolbelt installed, open a command-line Terminal and change
    directories to your project's root. From there, execute the following command
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Toolbelt后，打开命令行终端并切换到项目的根目录。然后执行以下命令
- en: 'to log in to Heroku:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 登录Heroku：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now that you're logged in, you can issue commands directly to your Heroku
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经登录，可以直接向Heroku发出命令了
- en: account and use those commands to create an application, install add-ons, and
    deploy your project.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 帐户并使用这些命令来创建应用程序，安装附加组件并部署你的项目。
- en: 'The first thing you''ll want to do is to create a new application. Do so by
    executing `heroku create` from the command line:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的第一件事是创建一个新的应用程序。通过在命令行中执行`heroku create`来完成：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After creating the app, Heroku randomly assigns it a unique name; in my case,
    `secret-shore-2839` (don''t worry, though, as this can easily be changed):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 创建应用程序后，Heroku会随机分配一个唯一的名称；在我的情况下是`secret-shore-2839`（不过不用担心，这很容易改变）：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let's address the last part next. Heroku relies on the Git source control on
    your machine in order to push your project source code up to your server, unlike
    Nodejitsu, which uses its own file transfer mechanism. Assuming that you followed
    the directions earlier with regard to Git and [www.github.com](http://www.github.com),
    your project source code should be all set and committed to the master branch
    and ready to go. What we need to do next is to add a new remote for Git on your
    machine to point to Heroku; specifically, your new app.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们接下来解决最后一部分。Heroku依赖于你机器上的Git源代码控制，以便将你的项目源代码推送到服务器，而不像Nodejitsu那样使用自己的文件传输机制。假设你之前按照关于Git和[www.github.com](http://www.github.com)的说明进行了操作，你的项目源代码应该已经准备就绪并提交到主分支，准备好了。接下来我们需要做的是在你的机器上为Git添加一个指向Heroku的新远程。
- en: 'Let''s start with `git init` to initialize `git` in the current working directory
    and then execute the following command to create a new remote for Heroku:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`git init`开始，在当前工作目录中初始化`git`，然后执行以下命令为Heroku创建一个新的远程：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Before you can push your source code up to your Heroku account, we need to take
    care of a few things.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在将源代码推送到Heroku帐户之前，我们需要处理一些事情。
- en: 'A special file is required before your application will be able to run on your
    Heroku server. This file is called `Procfile`, and it specifically contains the
    command necessary to launch your application. Create this new file named `Procfile`
    (no extension) in the root of your project and include the following line:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Heroku服务器上运行应用程序之前，需要一个特殊的文件。这个文件称为`Procfile`，它专门包含启动应用程序所需的命令。在项目的根目录中创建一个名为`Procfile`（无扩展名）的新文件，并包含以下行：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'That''s it! With that file, Heroku will use that command to launch your application.
    Now that you have `Procfile` set up and your project source code ready, there''s
    only one thing left to do--install the MongoHQ add-on and configure your app to
    use it:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！有了那个文件，Heroku将使用该命令启动您的应用程序。现在您已经设置了`Procfile`并且您的项目源代码已准备就绪，只剩下一件事要做--安装MongoHQ附加组件并配置您的应用程序以使用它：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With the MongoHQ add-on added, you can now configure the database itself and
    retrieve the connection string (much like you did earlier with Nodejitsu). Access
    your [http://heroku.com](http://heroku.com) Apps dashboard, and it should look
    something like the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了MongoHQ附加组件后，您现在可以配置数据库本身并检索连接字符串（就像您之前在Nodejitsu中所做的那样）。访问您的[http://heroku.com](http://heroku.com)应用程序仪表板，它应该看起来像以下截图：
- en: '![](img/4991395a-bda2-4621-980b-56564bf02f32.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4991395a-bda2-4621-980b-56564bf02f32.png)'
- en: The app's dashboard screen is a great place to get a snapshot of your application
    and a quick glance at its current cost. Since I'm using the sandbox and/or free
    plans for my application and add-ons, my current estimated monthly cost is $0.00\.
    However, you can quickly and easily scale your apps, should you demand more power.
    Pay attention, as you can also just as quickly and easily escalate your monthly
    cost through the roof! (Scaling everything to maximum, I was able to get my estimated
    cost to roughly $60,000 per month!).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的仪表板屏幕是获取应用程序快照和快速查看当前成本的好地方。由于我正在为我的应用程序和附加组件使用沙箱和/或免费计划，我的当前预计月费用为$0.00。但是，如果您需要更多的功能，您可以快速轻松地扩展您的应用程序。请注意，您也可以快速轻松地将您的月费用飙升到天际！（将所有内容扩展到最大，我能够将我的预计费用提高到大约每月$60,000！）。
- en: 'To configure your MongoHQ database, simply click on the MongoHQ link under
    the Add-ons section of your app''s dashboard:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置您的MongoHQ数据库，只需在应用程序仪表板的附加组件部分下点击MongoHQ链接：
- en: '![](img/6ae6d0cd-0d61-4134-8027-2e0245c59c21.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ae6d0cd-0d61-4134-8027-2e0245c59c21.jpg)'
- en: Click on the Admin tab with the gear icon below the Collections tab. Click on
    the Users tab and provide a username and password that your application will use
    to connect with your MongoHQ database. This will create the `imgploadrdb` username
    with a secure password. With the new user added, switch back to the Overview tab
    and copy the Mongo URI string.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 点击Collections标签下方的带有齿轮图标的Admin标签。点击Users标签，并提供应用程序将用于连接MongoHQ数据库的用户名和密码。这将创建具有安全密码的`imgploadrdb`用户名。添加新用户后，切换回概述标签并复制Mongo
    URI字符串。
- en: 'Again, just like with Nodejitsu, edit the `server.js` file in your project
    and replace the `mongoose.connect` string with the new URI you just copied. Edit
    the string and replace `<username>` and `<password>` with the appropriate values,
    based on the new user account you just created. The `server.jsmongoose.connect`
    code should look as illustrated:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在Nodejitsu中一样，编辑项目中的`server.js`文件，并用刚刚复制的新URI替换`mongoose.connect`字符串。编辑字符串，并根据您刚刚创建的新用户帐户的情况，用适当的值替换`<username>`和`<password>`。`server.jsmongoose.connect`代码应如图所示：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Since you just made changes to your project''s source code, you need to remember
    to commit those changes to your Git repository master branch so that they can
    be uploaded to Heroku. Execute the following command to permanently commit these
    changes to your source code and upload your code to your Heroku server:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您刚刚对项目的源代码进行了更改，因此需要记住将这些更改提交到Git存储库的主分支，以便它们可以上传到Heroku。执行以下命令，将这些更改永久提交到您的源代码并将代码上传到Heroku服务器：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The final step to get your application up and running is to create an instance
    of your server (basically, the equivalent of turning it on). To do this, execute
    the following command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用程序启动的最后一步是创建服务器的实例（基本上相当于打开它）。要做到这一点，执行以下命令：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Success! Hopefully, your browser launched and your website is up and running.
    Go ahead, give it a try and upload an image! Thanks to the bug we caught during
    the Nodejitsu deployment, this updated version of the application should work
    just fine.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！希望您的浏览器已启动并且您的网站正在运行。继续，尝试上传一张图片！由于我们在Nodejitsu部署期间发现的错误，这个应用程序的更新版本应该可以正常工作。
- en: While deploying with Heroku seems more complicated than Nodejitsu, this is probably
    because it uses Git source control to facilitate the transfer of your project
    files. Also, because Heroku is so flexible with the power of its scaling and add-ons,
    the Toolbelt CLI is a little more robust.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用Heroku部署似乎比Nodejitsu更复杂，这可能是因为它使用Git源代码控制来促进项目文件的传输。此外，由于Heroku在扩展和附加组件的功能方面非常灵活，因此Toolbelt
    CLI更加强大。
- en: Amazon Web Services
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊网络服务
- en: While Nodejitsu and Heroku can be considered developer-level service providers
    because they are PaaS, Amazon Web Services (and Microsoft Azure) will be considered
    enterprise-level services because they are more IaaS. The sheer volume of options
    and services available with AWS and Azure is staggering. These are definitely
    top-tier services and hosting an application like ours is kind of like using a
    bazooka to kill a fly!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Nodejitsu和Heroku可以被认为是开发人员级别的服务提供商，因为它们是PaaS，但亚马逊网络服务（和微软Azure）将被认为是企业级服务，因为它们更像是IaaS。AWS和Azure提供的选项和服务的数量是令人震惊的。这绝对是顶级服务，像我们这样托管应用程序就像用火箭筒打苍蝇一样！
- en: AWS does provide its own NoSQL database, called DynamoDB, but for our purposes,
    we want to continue working with MongoDB and use Mongoose in our app. To do this,
    we can use a third-party MongoDB provider. If you recall, when we originally set
    up Nodejitsu, one of the MongoDB providers listed was MongoLab. MongoLab provides
    **MongoDB-as-a-Service**, which means we can use its service to host our MongoDB
    database, but use all of the power of AWS to host our Node.js application (this
    is not unlike what's already happening with Nodejitsu and Heroku; they just streamline
    the process a little better). Remember that AWS is an IaaS provider, so you can
    also just create another server instance and install MongoDB on it yourself and
    use that as your data source. However, that's slightly beyond the scope of this
    chapter.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: AWS确实提供了自己的NoSQL数据库，称为DynamoDB，但是对于我们的目的，我们希望继续使用MongoDB并在我们的应用程序中使用Mongoose。为此，我们可以使用第三方MongoDB提供商。如果你还记得，当我们最初设置Nodejitsu时，列出的一个MongoDB提供商是MongoLab。MongoLab提供**MongoDB作为服务**，这意味着我们可以使用它的服务来托管我们的MongoDB数据库，但使用AWS的所有功能来托管我们的Node.js应用程序（这与Nodejitsu和Heroku已经发生的情况并没有太大不同；它们只是更好地简化了这个过程）。请记住，AWS是一个IaaS提供商，所以你也可以创建另一个服务器实例并自己安装MongoDB，并将其用作数据源。但是，这略微超出了本章的范围。
- en: Creating a MongoLab account and database
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建MongoLab帐户和数据库
- en: In order to use MongoLab with our app in AWS, we first need to register a new
    account on [https://mlab.com/](https://mlab.com/) and create an AWS database subscription.
    After you register a new account and activate it using the link they send you
    via email, you can create your first database subscription.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在AWS中使用MongoLab，我们首先需要在[https://mlab.com/](https://mlab.com/)上注册一个新帐户并创建AWS数据库订阅。注册新帐户并使用他们通过电子邮件发送给你的链接进行激活后，你可以创建你的第一个数据库订阅。
- en: '![](img/9bd62362-3612-43b7-88d0-ff9e03c301de.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9bd62362-3612-43b7-88d0-ff9e03c301de.png)'
- en: From your main dashboard, click on the Create new button (with the lightning
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从你的主仪表板上，点击创建新按钮（带闪电图标）
- en: bolt icon).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 闪电图标）。
- en: 'From the Create new subscription page, configure the following settings:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从创建新订阅页面，配置以下设置：
- en: 'Cloud provider: amazon web services'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云提供商：亚马逊网络服务
- en: 'Location: Whichever region you prefer'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置：你喜欢的任何地区
- en: 'Plan: Select Single-node (development)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计划：选择单节点（开发）
- en: Select Sandbox (shared/free)
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择沙盒（共享/免费）
- en: 'MongoDB version: `2.4.x`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB版本：`2.4.x`
- en: 'Database name: `anything_you_want` (I chose `imgploadr`)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库名称：`anything_you_want`（我选择了`imgploadr`）
- en: Confirm that the price is $0 per month
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认价格为每月$0
- en: Click on Create new MongoDB deployment
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击创建新的MongoDB部署
- en: Going back to your main dashboard, you should now see that your new database
    has been created and is ready to go. The next thing we need to do is to create
    a user account that our app will use to connect to the server. Click on the database
    listed on the main dashboard and then select the Users tab. Provide a new username
    and password. After the new user account has been added, copy the URI located
    at the top of the screen (it only appears after a user has been added) that starts
    with `mongodb://`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 回到你的主仪表板，你现在应该看到你的新数据库已经创建并准备就绪。我们需要做的下一件事是创建一个用户帐户，我们的应用程序将用它来连接服务器。点击主仪表板上列出的数据库，然后选择用户选项卡。提供一个新的用户名和密码。添加新用户帐户后，复制位于屏幕顶部的URI（只有在添加用户后才会出现）以`mongodb://`开头。
- en: 'Now that you have the new URI connection string, we need to update `server.js`
    to include this new connection string in our `mongoose.connect`. Edit the file
    and update it with the following code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了新的URI连接字符串，我们需要更新`server.js`以在`mongoose.connect`中包含这个新的连接字符串。编辑文件并使用以下代码进行更新：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Ensure that you replace `<username>` and `<password>` with the appropriate information
    from the user account you created on the MongoLab dashboard.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 确保用MongoLab仪表板上创建的用户帐户的适当信息替换`<username>`和`<password>`。
- en: With our application code updated to point to the new MongoLab database connection
    string, we need to zip up the project files so that they can be uploaded via the
    AWS dashboard. From your computer's file browser, locate the project root that
    contains all of your applications' source code files, select all of them, and
    right-click on them to add to an archive or ZIP file. The name of the ZIP file
    can be whatever you choose. One thing to note is that you shouldn't include the
    `node_modules` folder with this ZIP file (the easiest solution might be to simply
    delete the folder altogether). The AWS online docs have a great write-up on creating
    ZIP files, if you need more information ([https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.deployment.source.html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.deployment.source.html)).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的应用程序代码更新为指向新的MongoLab数据库连接字符串后，我们需要将项目文件压缩，以便可以通过AWS仪表板上传。从你计算机的文件浏览器中，找到包含所有应用程序源代码文件的项目根目录，选择它们所有，右键单击它们以添加到存档或ZIP文件中。ZIP文件的名称可以是任何你选择的。需要注意的一点是，你不应该在这个ZIP文件中包含`node_modules`文件夹（最简单的解决方案可能是直接删除整个文件夹）。如果你需要更多信息，AWS在线文档有一个关于创建ZIP文件的很好的介绍（[https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.deployment.source.html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.deployment.source.html)）。
- en: Once your source code has been updated to use the new MongoLab connection string
    and you've created a ZIP file of the entire project (excluding the `node_modules`
    folder), you're ready to create the new AWS application and deploy your app.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的源代码已经更新为使用新的MongoLab连接字符串，并且你已经创建了整个项目的ZIP文件（不包括`node_modules`文件夹），你就可以创建新的AWS应用程序并部署你的应用程序了。
- en: Create and configure the AWS environment
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和配置AWS环境
- en: If you don't already have an account with Amazon, you will need one to use their
    AWS services. Point your browser to [http://aws.amazon.com](http://aws.amazon.com)
    and click on Sign Up (even if you already have an Amazon account). From the screen
    that follows, you can log in using your existing Amazon account or register for
    a new account. Once you've registered and logged in, you should be presented with
    the entire suite of cloud services AWS has to offer.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有亚马逊帐户，您需要一个才能使用他们的AWS服务。将浏览器指向[http://aws.amazon.com](http://aws.amazon.com)，然后点击注册（即使您已经有亚马逊帐户）。在随后的屏幕上，您可以使用现有的亚马逊帐户登录或注册一个新帐户。注册并登录后，您将看到AWS提供的整套云服务。
- en: 'The primary service we''re interested in is Elastic Beanstalk (located under
    Deployment and Managed with a green icon):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感兴趣的主要服务是弹性Beanstalk（位于部署和管理下，带有绿色图标）：
- en: '![](img/1bbff13f-5a46-4007-8623-7fb52c338d51.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1bbff13f-5a46-4007-8623-7fb52c338d51.jpg)'
- en: 'From this screen, click on the Create New Application link in the upper-right
    corner. The screens that follow will walk you through a multistep wizard process,
    where you will configure the environment in which the application will reside.
    Configure the following settings, where appropriate:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 从此屏幕，点击右上角的创建新应用程序链接。随后的屏幕将引导您完成一个多步向导过程，在其中您将配置应用程序所在的环境。在适当的情况下配置以下设置：
- en: 'Application Information:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序信息：
- en: 'Application name: `anything_you_want`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序名称：`任何你想要的`
- en: 'Environment Type:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境类型：
- en: 'Environment tier: `Web Server`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境层：`Web服务器`
- en: 'Predefined configuration: `Node.js`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预定义配置：`Node.js`
- en: 'Environment type: `Load balancing`, `autoscaling`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境类型：`负载均衡`，`自动扩展`
- en: 'Application Version:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序版本：
- en: Upload your own (choose the ZIP file that you created earlier)
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传您自己的（选择之前创建的ZIP文件）
- en: 'Environment Information:'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境信息：
- en: 'Environment name: `anything_you_want`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境名称：`任何你想要的`
- en: 'Environment URL: `anything_you_want` (this is the subdomain for your app)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境URL：`任何你想要的`（这是您应用程序的子域）
- en: 'Configuration Details:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置详情：
- en: 'Instance type: `t1.micro`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例类型：`t1.micro`
- en: The remaining fields can be left blank or at their default values
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 其余字段可以留空或使用它们的默认值
- en: 'Environment Tags: Skip this step; it is unnecessary for this app'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境标签：跳过此步骤；对于此应用程序是不必要的
- en: The final step is to review the configuration settings and then launch the environment
    (by clicking on the blue Launch button).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是审查配置设置，然后启动环境（点击蓝色的Launch按钮）。
- en: '![](img/c084bb2c-9f8f-4c84-9c31-0ec876a31f7f.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c084bb2c-9f8f-4c84-9c31-0ec876a31f7f.png)'
- en: It might take a few minutes for Elastic Beanstalk to configure and launch your
    environment
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性Beanstalk可能需要几分钟来配置和启动您的环境
- en: and application, so you might need to sit tight. With the environment officially
    launched and the application online, go ahead and open your app (by clicking on
    the link at the top of the page) and give it a test run. Assuming that everything
    went according to plan, your application should be up and running and should be
    working just fine!
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序，所以您可能需要耐心等待。环境正式启动并且应用程序在线后，继续打开您的应用程序（点击页面顶部的链接）并进行测试运行。假设一切按计划进行，您的应用程序应该已经启动并且应该正常运行！
- en: Microsoft Azure
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微软Azure
- en: Microsoft's Azure service is very similar to Amazon's AWS. Both can be considered
    enterprise-level services, and both offer a tremendous level of flexibility and
    power, with a really slick UI. Surprisingly, even though it's a Microsoft product,
    you can spin up instances of Linux environments using Azure, as well as host your
    Node.js and MongoDB apps.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的Azure服务与亚马逊的AWS非常相似。两者都可以被视为企业级服务，并且都提供了极大的灵活性和功能，具有非常流畅的用户界面。令人惊讶的是，尽管它是微软产品，您也可以使用Azure启动Linux环境的实例，以及托管您的Node.js和MongoDB应用程序。
- en: The first thing you will need, like with any other service, is a registered
    account at [http://azure.microsoft.com](http://azure.microsoft.com). You can use
    an existing Microsoft Live login if you have one; otherwise, you can register
    for a new account fairly easily. Once you're logged in to the Azure service, the
    first thing you'll be presented with is your primary dashboard. The icons to the
    left are all the various services and options available with Azure.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要的第一件事，就像任何其他服务一样，是在[http://azure.microsoft.com](http://azure.microsoft.com)注册帐户。如果您有一个现有的Microsoft
    Live登录，您可以使用它；否则，您可以相当容易地注册一个新帐户。一旦您登录到Azure服务，您将首先看到的是您的主要仪表板。左边的图标是Azure提供的各种服务和选项。
- en: '![](img/1e6ff7d5-9fb1-45cd-9820-6b1e4f130ae7.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e6ff7d5-9fb1-45cd-9820-6b1e4f130ae7.png)'
- en: Clicking on the +NEW icon at the bottom-left corner will present you with the
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 点击左下角的+NEW图标将呈现给您
- en: main dialog that you can use to add any new service. For our purposes, we want
    to
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 可以用来添加任何新服务的主要对话框。对于我们的目的，我们希望
- en: 'add a website:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 添加网站：
- en: Select Compute, Web Site, and From Gallery.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择计算、网站和从库中选择。
- en: Select Node JS Empty Site from the long list of gallery options. This will create
    the necessary environment so that you have somewhere you can put your application.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从众多的库选项中选择Node JS Empty Site。这将创建必要的环境，以便您有一个可以放置应用程序的地方。
- en: On the screen that follows, provide the URL for your app.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在随后的屏幕上，提供您应用程序的URL。
- en: Leave the remaining fields as their default values.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其余字段保留为默认值。
- en: Click on the checkmark icon to complete the setup process, and your website
    will be created.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击对勾图标完成设置过程，您的网站将被创建。
- en: The next step is to set up the database server. Again, similar to AWS or Nodejitsu,
    we will once again select MongoLab as our database service provider.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是设置数据库服务器。与AWS或Nodejitsu类似，我们将再次选择MongoLab作为我们的数据库服务提供商。
- en: Click on the +NEW icon again, select Store, and browse the list until you find
    and select MongoLab.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击+NEW图标，选择Store，并浏览列表，直到找到并选择MongoLab。
- en: Click on the next arrow and browse through the various plans. For our needs,
    we will leave Sandbox selected (since it's free).
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一个箭头并浏览各种计划。对于我们的需求，我们将保留Sandbox选项（因为它是免费的）。
- en: Provide a name for your database; in my case, I entered `imgploadrdb`.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的数据库提供一个名称；在我的情况下，我输入了`imgploadrdb`。
- en: Click on Next again to review and confirm the plan and monthly price (which
    should be $ 0.00 per month).
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次单击下一步以查看和确认计划和每月价格（应为每月$0.00）。
- en: Finally, click on the checkmark icon to Purchase this new subscription plan.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，单击复选标志图标以购买这个新的订阅计划。
- en: 'After a few seconds, you should be taken back to your dashboard, where you
    will see entries for both the website and database app service listed:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，您应该会回到仪表板，在那里您将看到网站和数据库应用服务的条目：
- en: '![](img/fb1656ca-1da9-4573-889b-d0efd47375c2.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb1656ca-1da9-4573-889b-d0efd47375c2.png)'
- en: 'Now that the database has been created and is ready, we need to include its
    connection string in our application before we can upload our code:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据库已经创建并准备就绪，我们需要在应用程序中包含其连接字符串，然后才能上传我们的代码：
- en: Click on the database row to select it and go to its overview.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击数据库行以选择它并转到其概述。
- en: The bottom of this screen will contain a few icons, one of which is labeled
    as Connection Info (and has an icon that looks like >i). Click on that icon for
    a modal window, which contains the connection string URI for your new MongoLab
    database server, to pop up.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 屏幕底部将包含一些图标，其中一个标有连接信息（并且有一个看起来像>i的图标）。单击该图标，会弹出一个模态窗口，其中包含您的新MongoLab数据库服务器的连接字符串URI。
- en: Copy that URI to your clipboard.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将该URI复制到剪贴板。
- en: 'Edit `server.js` in your local app and replace the `mongoose.connect` connection
    string with the new string you just copied. There is no need to update the `username`,
    and `password` as Azure has already taken care of this for you using the following
    code:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑本地应用程序中的`server.js`，并用刚刚复制的新字符串替换`mongoose.connect`连接字符串。无需更新`username`和`password`，因为Azure已经使用以下代码为您处理了这个问题：
- en: '[PRE18]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once that change has been made, save the file, and don''t forget to update
    your local Git repository with the change, as we''ll be using Git in the next
    section to push your code to Azure (just like we did earlier with Heroku):'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦更改完成，保存文件，并不要忘记使用Git更新您的本地Git存储库，因为在下一节中我们将使用Git将您的代码推送到Azure（就像我们之前在Heroku上做的那样）：
- en: '[PRE19]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Back at the Azure dashboard, click on Web Site in the All Items list (or filter
    by websites using the icons on the left toolbar). From this overview screen, locate
    the Integrate source control section toward the bottom and click on the Set up
    deployment from source control link. The following screenshot shows what you should
    see at this point:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 回到Azure仪表板，在所有项目列表中单击Web Site（或使用左侧工具栏上的图标筛选网站）。从概述屏幕中，找到朝向底部的集成源控制部分，并单击设置从源控制进行部署的链接。以下屏幕截图显示了此时您应该看到的内容：
- en: '![](img/29b5fb99-253e-447f-b760-bd49458a4fa5.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29b5fb99-253e-447f-b760-bd49458a4fa5.png)'
- en: Select Local Git repository and then continue by clicking on the next arrow
    icon.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 选择本地Git存储库，然后通过单击下一个箭头图标继续。
- en: 'The screen that follows will present instructions on how to push your local
    code to the remote Git repository that has just been created for your Azure website.
    The gist is to add a new Git remote (much like we did earlier with Heroku) that
    points to your Azure repository, and then push your code:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的屏幕将呈现如何将本地代码推送到刚刚为您的Azure网站创建的远程Git存储库的说明。要点是添加一个指向Azure存储库的新Git远程（就像我们之前在Heroku上做的那样），然后推送您的代码：
- en: '[PRE20]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You should notice the Git information screen in your Azure dashboard update
    in real time as your code starts to push up after the `git push` command. From
    the command line, you will see a lot of remote `npm install` output as well. Once
    completed, the deployment history in your Azure dashboard will update, showing
    the information for the last active deployment.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的代码开始在`git push`命令之后推送时，您应该注意到Azure仪表板中的Git信息屏幕会实时更新。从命令行中，您将看到大量远程`npm install`输出。完成后，Azure仪表板中的部署历史将更新，显示最后一次活动部署的信息。
- en: '![](img/4b10af1f-3a09-42c9-8a3e-a5a4640d65f1.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b10af1f-3a09-42c9-8a3e-a5a4640d65f1.png)'
- en: Now that your code has been deployed to your Azure website and your website
    connection string is pointing to your MongoLab Azure app service, you're ready
    to give the website a test run. Launch it by pointing your browser to [http://yourappname.azurewebsites.net](http://yourappname.azurewebsites.net).
    Azure does a lot of things right, (UI/UX) and has some really powerful options
    and scaling features available! Taking a quick glance at the dashboard for a website
    (the preceding screenshot), you can see that there is a lot going on.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的代码已部署到Azure网站，并且您的网站连接字符串指向您的MongoLab Azure应用服务，您已经准备好测试网站运行情况了。通过将浏览器指向[http://yourappname.azurewebsites.net](http://yourappname.azurewebsites.net)来启动它。Azure做了很多正确的事情（UI/UX），并且提供了一些非常强大的选项和扩展功能！快速浏览网站仪表板（上述屏幕截图），您会发现有很多事情正在进行。
- en: '![](img/bfa39f54-7930-4030-9a86-f10cbfb1c16f.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bfa39f54-7930-4030-9a86-f10cbfb1c16f.png)'
- en: There are many different configuration options, as well as health monitoring
    and general information (FTP settings, website URLs, usage metrics, and so on),
    so feel free to poke around and explore.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的配置选项，以及健康监控和一般信息（FTP设置，网站URL，使用度量等），所以请随意查看和探索。
- en: Digital Ocean
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Digital Ocean
- en: The last service I wanted to mention and briefly take a look at is Digital Ocean--[http://digitalocean.com](http://digitalocean.com).
    Digital Ocean is a true **Virtual Private Server** (**VPS**) service provider
    and is a good example of a service that gets you just about as *close to the metal*
    as possible. What this means is that Digital Ocean doesn't really have all the
    bells and whistles that the other services that we've seen offer. What Digital
    Ocean does offer, however, is direct, unfiltered access to the Linux server instance
    you spin up, referred to as **Droplets** in this case.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要提到并简要介绍的最后一个服务是Digital Ocean - [http://digitalocean.com](http://digitalocean.com)。Digital
    Ocean是一个真正的**虚拟专用服务器**（**VPS**）服务提供商，是一个让您尽可能*接近底层*的服务的很好的例子。这意味着Digital Ocean实际上并没有其他我们看到的服务所提供的所有花里胡哨的功能。然而，Digital
    Ocean提供的是对您所创建的Linux服务器实例的直接、未经过滤的访问，在这种情况下被称为**Droplets**。
- en: Digital Ocean allows you to boot up new Linux; virtual server instances very
    quickly. They offer very competitive prices, and they're a great service if you
    need to get a Linux server superfast because you only need one for a short period
    of time, or you want to boot up your own Linux server that you plan to use to
    host a production environment. The only *downside* (if I had to refer to it as
    such) is that you have to be pretty familiar with Linux; specifically, with administering
    a server and all the responsibilities that come with that.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Digital Ocean允许您快速启动新的Linux虚拟服务器实例。他们提供非常有竞争力的价格，如果您需要快速获取Linux服务器，因为您只需要短时间内的一个，或者您想要启动自己的Linux服务器，用于托管生产环境，那么他们是一个很好的选择。唯一的*缺点*（如果我不得不这样说的话）是您必须对Linux非常熟悉，特别是对服务器管理和相关责任。
- en: You can very easily clone your project using Git on a new Droplet, but an example
    of the actual raw nature of a new Droplet is that Git is not installed on the
    server by default. You need to manually install Git before you can clone your
    repository. Depending on which image you decided to clone when creating a new
    Droplet, you might need to install and configure Node.js as well as MongoDB. Fortunately,
    Digital Ocean offers a number of predefined servers you can choose from when creating
    a new server, one of which includes the **MongoDB, Express, Angular,** and **Node.js**
    (**MEAN**) stacks. Beyond that, actually launching your app will only run as a
    process during your currently logged in session; once you log out, your application
    will go down. You will need to further administer the server to configure your
    app to run as a service.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在新的Droplet上使用Git非常容易地克隆您的项目，但新Droplet的实际原始性的一个例子是，Git不会默认安装在服务器上。您需要在克隆存储库之前手动安装Git。取决于您在创建新Droplet时决定克隆哪个镜像，您可能还需要安装和配置Node.js以及MongoDB。幸运的是，Digital
    Ocean在创建新服务器时提供了许多预定义的服务器供您选择，其中包括**MongoDB，Express，Angular**和**Node.js**（**MEAN**）堆栈。除此之外，实际上启动您的应用程序只会在您当前登录的会话期间运行；一旦您退出登录，您的应用程序就会关闭。您需要进一步管理服务器，配置您的应用程序以作为服务运行。
- en: 'Digital Ocean allows you to connect directly to your server using the console
    access tool within the website itself, or by using SSH directly from a Terminal
    on your own machine:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Digital Ocean允许您直接使用网站内的控制台访问工具连接到您的服务器，或者通过在自己的计算机上的终端直接使用SSH连接：
- en: '![](img/551b8d9d-c20d-48d3-b477-6e98e6307c0f.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/551b8d9d-c20d-48d3-b477-6e98e6307c0f.jpg)'
- en: I mention Digital Ocean only because a lot of people will find this kind of
    raw power quite refreshing and will want to do their own hands-on kind of configuration
    and maintenance on their server. Digital Ocean is an awesome service, but it's
    not for everyone. I wanted to talk about it specifically because I feel that it
    rounds out and completes the list of services we've covered so far.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我之所以提到Digital Ocean，是因为很多人会觉得这种原始的力量非常令人耳目一新，并且希望自己动手配置和维护他们的服务器。Digital Ocean是一个很棒的服务，但并不适合每个人。我之所以特别想谈论它，是因为我觉得它完善了我们迄今为止所涵盖的服务列表。
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We've covered the full spectrum of cloud-based hosting service providers and
    walked through configuring your service and deploying your project code. Nodejitsu
    and Heroku are great services that cater more to developers and give them a lot
    of power through very accessible and slick user interfaces. Amazon and Microsoft,
    both industry juggernauts, are representatives of the kind of power and sophistication
    you'd expect with enterprise-level service providers. Digital Ocean is a no-frills,
    *close to the metal*, cloud-based VPS provider that sacrifices bells and whistles
    for raw and direct access to the server.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了基于云的托管服务提供商的整个范围，并介绍了配置您的服务和部署项目代码。Nodejitsu和Heroku是更多面向开发人员的优秀服务，并通过非常易于访问和流畅的用户界面赋予他们很大的权力。亚马逊和微软，作为行业巨头，代表了您可以期望的企业级服务提供商的实力和复杂性。Digital
    Ocean是一个无花俏、*接近底层*的基于云的VPS提供商，牺牲了花里胡哨的功能，以换取对服务器的原始和直接访问。
- en: All the hosting options we covered are great, and not the only choices out there.
    They're just a sample, but they speak to the power of the cloud! Within a few
    minutes and with very little to no cost at all, you can have an environment configured,
    and your website up and running online!
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们涵盖的所有托管选项都很棒，但并不是唯一的选择。它们只是一个样本，但它们展示了云的力量！在几分钟内，几乎没有成本，您就可以配置一个环境，并让您的网站在线运行！
- en: In the next chapter, we will take a look at the concept of Single-Page Applications
    and popular client-side development frameworks and tools.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍单页应用程序的概念以及流行的客户端开发框架和工具。
