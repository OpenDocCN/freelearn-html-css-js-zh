- en: Chapter 6. Grid Search
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 网格搜索
- en: In this chapter we are going to develop an Ext JS plugin, which will provide
    a search facility within a grid. This plugin was originally developed by Ing.
    Jozef Sakáloš and it is really useful and popular plugin. We will rewrite this
    plugin for the Ext JS 4x Version.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开发一个Ext JS插件，该插件将在网格内提供搜索功能。这个插件最初是由Ing. Jozef Sakáloš开发的，它是一个非常实用且受欢迎的插件。我们将为Ext
    JS 4x版本重写这个插件。
- en: 'In this chapter we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Functional requirements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能需求
- en: Planning and coding the grid search
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网格搜索的规划和编码
- en: Functional requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能需求
- en: We want to develop a plugin, which will help users to search within a grid panel
    through a text field. The plugin will also offer users the option to select or
    deselect the columns of the grid on which they want to apply the searching. There
    will be a clear button to clear the search text. There will be a configuration
    option where users can set the number of characters they want in order to trigger
    the search by typing within the search textbox.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望开发一个插件，该插件将帮助用户通过文本字段在网格面板中进行搜索。该插件还将为用户提供选择或取消选择他们想要应用搜索的网格列的选项。将有一个清除按钮来清除搜索文本。将有一个配置选项，用户可以设置他们想要在搜索文本框中输入以触发搜索的字符数。
- en: Planning and coding the grid search
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网格搜索的规划和编码
- en: 'To develop the plugin, we will create a menu where the user can select and
    deselect the columns of the grid, a text field where the user can write their
    search query, and a clear button that will help to clear the search query. At
    first we will develop the required UI fields and then we will add the corresponding
    functionality to those fields. Now let us start coding:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开发这个插件，我们将创建一个菜单，用户可以在其中选择和取消选择网格的列，一个文本字段，用户可以在其中输入他们的搜索查询，以及一个清除按钮，它将帮助清除搜索查询。最初，我们将开发所需的UI字段，然后我们将添加相应的功能到这些字段中。现在让我们开始编码：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can see that we have defined several configuration options and also the
    required `init` function for the plugin. Now let us define the `onRender` function:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，我们已经定义了几个配置选项，以及插件所需的`init`函数。现在让我们定义`onRender`函数：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this function, first we are trying to get the toolbar by calling the `getToolbar`
    function as we need to render our plugin UI on the toolbar. Then we are creating
    the menu field, which will hold the column selections, and then the search field.
    After this, we will add the menu field and the search field to that toolbar. Now
    let us define the `getToolbar` function:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，首先我们尝试通过调用`getToolbar`函数来获取工具栏，因为我们需要在工具栏上渲染我们的插件UI。然后我们创建一个菜单字段，该字段将包含列选择，然后是搜索字段。在此之后，我们将菜单字段和搜索字段添加到该工具栏中。现在让我们定义`getToolbar`函数：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this function we are looking for a toolbar item, which is docked at the location
    defined in the position configuration option. We will render our plugin UI on
    this returned toolbar.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们正在寻找一个工具栏项，该工具栏项位于位置配置选项中定义的位置。我们将在返回的工具栏上渲染我们的插件UI。
- en: 'Now let us use this plugin within a grid and the output of the plugin should
    look like the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在这个网格中使用这个插件，插件输出应该看起来像以下截图：
- en: '![Planning and coding the grid search](img/3725OS_06_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![网格搜索的规划和编码](img/3725OS_06_01.jpg)'
- en: 'So, now we have our plugin looking exactly the same as the requirement. Now
    let us start adding functionality. First let us modify the `onRender` function
    of our plugin code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们的插件看起来完全符合要求。现在让我们开始添加功能。首先让我们修改插件代码中的`onRender`函数：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can see that we have provided the `onTriggerClear` handler for the `onTriggerClick`
    event to clear the search. We need to add and handle some keyboard events: pressing
    the *Enter* key will trigger searching and pressing the *Esc* key will trigger
    clearing the search. So, we need to add the following code after defining the
    trigger field:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，我们已经为`onTriggerClick`事件提供了`onTriggerClear`处理程序来清除搜索。我们需要添加和处理一些键盘事件：按下*Enter*键将触发搜索，按下*Esc*键将触发清除搜索。因此，我们需要在定义触发字段后添加以下代码：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, we need to prepare the menu to load the column names and we will call the
    `initMenu` function to do that. And that's all we needed to do within the `onRender`
    function.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要准备菜单以加载列名，我们将调用`initMenu`函数来完成这个操作。这就是我们在`onRender`函数中需要做的所有事情。
- en: 'Now let us define the `onKeyUp` handler:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义`onKeyUp`处理程序：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let us go ahead with defining the `initMenu` function:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续定义`initMenu`函数：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can see how we are preparing the menu for selecting and deselecting the
    columns in the preceding `initMenu` function. Now let us define the `onTriggerClear`
    function, which is responsible for clearing the search query:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们是如何在先前的`initMenu`函数中准备菜单以选择和取消选择列的。现在让我们定义`onTriggerClear`函数，该函数负责清除搜索查询：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next we define the `onTriggerSearch` function:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义`onTriggerSearch`函数：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We need to check against the value set for the `mode` configuration option
    and need to provide separate logic if the value is set to `''local''` or if the
    proxy of the store is a server proxy. Now we need to add the following code within
    the `onTriggerSearch` function when the mode is set with `''local''`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要检查为`mode`配置选项设置的值，如果设置为`'local'`或者存储代理是服务器代理，我们需要提供单独的逻辑。现在，当模式设置为`'local'`时，我们需要在`onTriggerSearch`函数中添加以下代码：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And if the value is not set to `local`, we need to check whether the proxy
    is a server proxy or not. And here is the code that we need to add within the
    `onTriggerSearch` function after the `if (''local'' === this.mode)` block:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果值不是设置为`local`，我们需要检查代理是否是服务器代理。以下是需要在`onTriggerSearch`函数中添加的代码，在`if ('local'
    === this.mode)`块之后：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we define the `getDateFormat` function:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们定义`getDateFormat`函数：
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Following is the screenshot of our working plugin:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们工作插件的截图：
- en: '![Planning and coding the grid search](img/3725OS_06_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![规划与编写网格搜索代码](img/3725OS_06_02.jpg)'
- en: You can see that our plugin filters data according to the search query.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们的插件是根据搜索查询过滤数据的。
- en: Summary
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we've developed an Ext JS plugin to provide searching facility
    within a grid. Now we have a clear idea about how powerful the Ext JS plugins
    are. We can easily use this plugin within a grid and can provide this excellent
    searching feature whenever we need.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开发了一个Ext JS插件，以在网格内提供搜索功能。现在我们清楚地了解了Ext JS插件是多么强大。我们可以在网格中轻松使用此插件，并在需要时提供此出色的搜索功能。
- en: In the next chapter we will go through another useful plugin targeted for text
    components that show a clear button over the text field, and we will see how clicking
    on the button will clear the texts from the text field.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍另一个针对文本组件的有用插件，该插件在文本字段上方显示一个清晰的按钮，我们将看到点击按钮将如何清除文本字段中的文本。
