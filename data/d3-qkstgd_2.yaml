- en: Using SVG to Create Images Using Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码创建图像的SVG
- en: 'SVG elements are a way to create images within a web page and are the foundation
    of D3 and how it works. They use code to create shapes, rather than defining each
    pixel of an image. This chapter covers how to create various SVG elements within
    a web page. In it, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: SVG元素是在网页内创建图像的一种方式，是D3及其工作方式的基础。它们使用代码来创建形状，而不是定义图像的每个像素。本章将介绍如何在网页内创建各种SVG元素。其中，我们将涵盖以下主题：
- en: Base tags
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础标签
- en: Basic elements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本元素
- en: Positioning
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定位
- en: Styling
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 样式
- en: Important SVG elements
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重要SVG元素
- en: 'The complete code for this section can be found here: [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter02](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter02).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本节完整的代码可以在以下位置找到：[https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter02](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter02)。
- en: Base tag
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础标签
- en: 'When viewing SVG graphics in a browser, it''s important to embed an `<svg>`
    tag inside an HTML page. Let''s create an `index.html` file and add the following
    to it:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看SVG图形时，在HTML页面中嵌入一个`<svg>`标签非常重要。让我们创建一个`index.html`文件，并将其添加到其中：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now start a web browser and open that file (usually, File | Open File). For
    this book, it is recommended that the reader use Google Chrome, but in development
    and production, any browser will do. If we inspect our HTML in the Elements tab
    of Chrome''s Dev Tools (View | Developer | Developer Tools), we''ll see the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在启动一个网络浏览器并打开该文件（通常，文件 | 打开文件）。对于这本书，建议读者使用Google Chrome，但在开发和生产中，任何浏览器都可以。如果我们检查Chrome的开发者工具（视图
    | 开发者 | 开发者工具）中的HTML，我们会看到以下内容：
- en: '![](img/b37d8102-9708-468a-91c3-92d3e8c80aba.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b37d8102-9708-468a-91c3-92d3e8c80aba.png)'
- en: Basic elements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本元素
- en: 'We can draw elements in our `<svg>` element by adding a variety of predefined
    tags as child elements of the `<svg>`. This is just as we did in HTML, where we
    add `<div>`, `<a>`, and `<img>` tags inside the `<body>` tag. There are many tags,
    such as `<circle>`, `<rect>`, and `<line>`, that we''ll explore in a bit. Here''s
    just one example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向`<svg>`元素添加各种预定义标签作为子元素来绘制我们的元素。这与我们在HTML中添加`<div>`、`<a>`和`<img>`标签到`<body>`标签中的做法一样。有许多标签，如`<circle>`、`<rect>`和`<line>`，我们将在稍后探讨。这里只是一个例子：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Note that we can''t see the circle because it doesn''t have a radius, as shown
    in this screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们看不到圆，因为它没有半径，如下面的截图所示：
- en: '![](img/d8a0f85c-50de-4785-b64c-bae031effeab.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d8a0f85c-50de-4785-b64c-bae031effeab.png)'
- en: 'We''ll talk more about this later, but, for now, if we want to see the circle,
    we can add a special attribute that all `<circle>` elements take:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在稍后讨论这个问题，但，目前，如果我们想看到圆，我们可以添加一个特殊的属性，这是所有`<circle>`元素都有的：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This tells the browser to give the circle a radius of `50` px, which is shown
    in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉浏览器给圆一个`50`像素的半径，如下面的截图所示：
- en: '![](img/e3b7499e-c5de-45d1-8cb4-2a98440ae5ae.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e3b7499e-c5de-45d1-8cb4-2a98440ae5ae.png)'
- en: At the moment, though, we only see the lower–right quarter of the circle. This
    is because the center of the circle is being drawn at the very upper–left corner
    of the `<svg>`, and the rest of it is being clipped outside the `<svg>`. We can
    change this by changing the position of the circle, which we'll do next.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，目前我们只能看到圆的右下四分之一。这是因为圆的中心被绘制在`<svg>`的非常左上角，其余部分被裁剪在`<svg>`之外。我们可以通过改变圆的位置来改变这一点，我们将在下一部分做。
- en: Positioning an element
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元素定位
- en: 'The `<svg>` tag is an inline element, such as an image (as opposed to a block
    element such as a `<div>`). Elements within the `<svg>` are positioned similar
    to Photoshop, with a set of coordinates that follow the form `(x,y)`. An example
    of this could be `(10,15)`, which translates to `x=10` and `y=15`. This is different
    than HTML, where elements are laid out relative to one another. Here are some
    important things to keep in mind:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`<svg>`标签是一个内联元素，例如一个图片（与`<div>`这样的块元素相对）。`<svg>`内的元素定位类似于Photoshop，使用一组遵循`(x,y)`形式的坐标。一个例子可以是`(10,15)`，这表示`x=10`和`y=15`。这与HTML不同，在HTML中元素是相对于彼此布局的。以下是一些需要注意的重要事项：'
- en: The point `(0,0)` is the upper–left corner of the `<svg>` element.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点`(0,0)`是`<svg>`元素的左上角。
- en: As *y* values increase, the point moves vertically down the `<svg>` element.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着`y`值的增加，点沿着`<svg>`元素垂直向下移动。
- en: 'Don''t confuse this with a typical coordinate system that has `(0,0)` at the
    lower–left corner with a point moving up, as *y* increases in value. This diagram
    shows the difference between a traditional coordinate system and an SVG coordinate
    system:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要与具有 `(0,0)` 在左下角且点向上移动的典型坐标系混淆，随着 *y* 值的增加。此图显示了传统坐标系和 SVG 坐标系之间的差异：
- en: '![](img/1fe9328b-fca1-4b41-9434-aaab5bc33136.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1fe9328b-fca1-4b41-9434-aaab5bc33136.png)'
- en: 'We can use negative *x*/*y* values:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用负的 *x*/*y* 值：
- en: '*-x*: moves left'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*-x*: 向左移动'
- en: '*-y* :moves up'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*-y* : 向上移动'
- en: 'Let''s adjust the position of our circle in our previous section by adjusting
    `cx` and `cy` values (the *x* and *y* values for the center of the element):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过调整 `cx` 和 `cy` 值（元素的 *x* 和 *y* 中心值）来调整我们之前章节中圆的位置：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now we see the full circle:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们看到了完整的圆：
- en: '![](img/fb5099c5-17b9-47e3-b89d-07230f9265ad.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb5099c5-17b9-47e3-b89d-07230f9265ad.png)'
- en: Styling an element
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元素样式化
- en: 'The appearance of any tag inside an `<svg>` can be styled with the following
    attributes (the following are the attributes with example values):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 `<svg>` 标签内的标签都可以使用以下属性进行样式化（以下带有示例值的属性）：
- en: '`fill=red` or `fill=#ff0000` will alter the color of the shape.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fill=red` 或 `fill=#ff0000` 将改变形状的颜色。'
- en: '`stroke=red` or `stroke=#ff0000` will alter stroke color. Stroke is a line
    that surrounds each element.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stroke=red` 或 `stroke=#ff0000` 将改变线条颜色。线条是围绕每个元素的线条。'
- en: '`stroke-width=4` will adjust the width of the stroke.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stroke-width=4` 将调整线条的宽度。'
- en: '`fill-opacity=0.5` will adjust the transparency of the fill color.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fill-opacity=0.5` 将调整填充颜色的透明度。'
- en: '`stroke-opacity=0.5` will adjust the transparency of the stroke color.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stroke-opacity=0.5` 将调整线条颜色的透明度。'
- en: '`transform = "translate(2,3)"` will translate the element by the given *x*,
    *y* values.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transform = "translate(2,3)"` 将按给定的 *x*、*y* 值平移元素。'
- en: '`transform = "scale(2.1)"` will scale the size of the element by the given
    proportion (for example, `2.1` times as big).'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transform = "scale(2.1)"` 将按给定比例（例如，`2.1` 倍大）缩放元素的大小。'
- en: '`transform = "rotate(45)"` will rotate the element by the given number of degrees.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transform = "rotate(45)"` 将按给定度数旋转元素。'
- en: 'Let''s style the circle we positioned previously:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们样式化我们之前定位的圆：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we get this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们得到这个：
- en: '![](img/979c8285-88d6-4c00-b117-8f702cddf56e.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/979c8285-88d6-4c00-b117-8f702cddf56e.png)'
- en: 'Note that the stroke in the preceding screenshot is getting clipped. That''s
    because the stroke is created outside the element. If we want to see the full
    stroke, we can resize the circle:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，前一个屏幕截图中的线条正在被裁剪。这是因为线条是在元素外部创建的。如果我们想看到完整的线条，我们可以调整圆的大小：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we get the following output:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们得到以下输出：
- en: '![](img/d946c82f-8c2e-454e-a8b5-afa78ad6b361.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d946c82f-8c2e-454e-a8b5-afa78ad6b361.png)'
- en: 'Styling can also be done with CSS. The following steps will tell you how to
    style your `<svg>` element with CSS:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 样式也可以使用 CSS 完成。以下步骤将指导你如何使用 CSS 样式化 `<svg>` 元素：
- en: 'Create an external `app.css` file in the same folder as your `index.html` file
    with the following contents:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与你的 `index.html` 文件相同的文件夹中创建一个名为 `app.css` 的外部文件，并包含以下内容：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Link the file in the `<head>` tag of `index.html`:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `index.html` 的 `<head>` 标签中链接文件：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Lastly, remove our previous inline styling that we had on our `<circle>` tag:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，移除我们之前在 `<circle>` 标签上设置的行内样式：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we get this result:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们得到这个结果：
- en: '![](img/2828e708-a86d-4184-be53-2cb6988870be.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2828e708-a86d-4184-be53-2cb6988870be.png)'
- en: Note that I've hovered over the element in the dev tools to show that the element
    has been rotated 45 degrees. That's what the blue box is.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我已经在开发者工具中悬停在元素上以显示元素已被旋转 45 度。这就是蓝色框的作用。
- en: Important SVG elements
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重要的 SVG 元素
- en: 'To demonstrate each element, we''ll use the following code as a starting point
    and then add each element inside the `<svg>` tag:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示每个元素，我们将使用以下代码作为起点，然后在 `<svg>` 标签内添加每个元素：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let's now move on to each element. Note that you can write each tag in the form
    `<element></element>`, as we did with `<circle></circle>` previously, or the self-closing
    form, `<element/>`, which you will see next with `<circle/>`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们继续到每个元素。请注意，你可以像我们之前使用 `<circle></circle>` 一样，以 `<element></element>` 的形式编写每个标签，或者使用自闭合形式
    `<element/>`，你将在下面看到 `<circle/>`。
- en: Circle
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 圆形
- en: 'Circles have the following attributes:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 圆形具有以下属性：
- en: '`r`: radius'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r`: 半径'
- en: '`cx`: *x* position'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cx`: *x* 位置'
- en: '`cy`: *y* position'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cy`: *y* 位置'
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output for the previous code will be as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下所示：
- en: '![](img/a1a9a577-7aec-4947-b5ee-d854bef8120a.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1a9a577-7aec-4947-b5ee-d854bef8120a.png)'
- en: Line
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线条
- en: 'Lines have the following attributes:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 线条具有以下属性：
- en: '`x1`: starting *x* position'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x1`: 起始 *x* 位置'
- en: '`y1`: starting *y* position'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y1`: 起始 *y* 位置'
- en: '`x2`: ending *x* position'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x2`: 结束 *x* 位置'
- en: '`y2`: ending *y* position'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y2`: 结束 *y* 位置'
- en: 'Here are two examples:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个例子：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following output will be displayed:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出将被显示：
- en: '![](img/3041c38e-68a1-4654-802a-e1c6c5d7be3d.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3041c38e-68a1-4654-802a-e1c6c5d7be3d.png)'
- en: Rectangle
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矩形
- en: 'Rectangles have the following attributes:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 矩形有以下属性：
- en: '`x`: *x* position of upper–left'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`: 元素左上角的 *x* 位置'
- en: '`y`: *y* position of top left'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y`: 左上角的 *y* 位置'
- en: '`width`: width'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width`: 宽度'
- en: '`height`: height'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`height`: 高度'
- en: 'Here''s an example:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here''s what this code produces:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码会产生以下结果：
- en: '![](img/d33b7e35-12a2-45eb-b212-790354516bf6.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d33b7e35-12a2-45eb-b212-790354516bf6.png)'
- en: Ellipse
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 椭圆
- en: 'An ellipse has the following attributes:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 椭圆有以下属性：
- en: '`cx`: *x* position'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cx`: *x* 位置'
- en: '`cy`: *y* position'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cy`: *y* 位置'
- en: '`rx`: *x* radius'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rx`: *x* 半径'
- en: '`ry`: *y* radius'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ry`: *y* 半径'
- en: 'The attributes will be as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 属性将如下所示：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output can be seen as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下所示：
- en: '![](img/3b7971ec-e19f-4dd0-b990-17b0da09ca2e.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b7971ec-e19f-4dd0-b990-17b0da09ca2e.png)'
- en: Polygon
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多边形
- en: 'Polygons have the following attributes:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 多边形有以下属性：
- en: '`points`, which is a set of coordinate pairs'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`points`，它是一组坐标对'
- en: Each pair is of the form `x,y`
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每一对点的形式为 `x,y`
- en: 'The attributes will be as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 属性将如下所示：
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output can be seen as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下所示：
- en: '![](img/844e4714-4d29-401e-b5db-c4897314f7cf.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/844e4714-4d29-401e-b5db-c4897314f7cf.png)'
- en: Polyline
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 折线
- en: '**Polyline** is a series of connected lines. It can have a fill, as a polygon
    does, but it won''t automatically rejoin itself:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**折线**是一系列连接的线。它可以填充，就像多边形一样，但它不会自动重新连接：'
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output will be as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下所示：
- en: '![](img/71391dc9-e5e9-4bfc-a27e-57f899ce2b87.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71391dc9-e5e9-4bfc-a27e-57f899ce2b87.png)'
- en: Text
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本
- en: 'The content of the tag is the text to be displayed. It has the following attributes:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 标签的内容是要显示的文本。它有以下属性：
- en: '`x`, the *x* position of upper–left corner of the element'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`, 元素左上角的 *x* 位置'
- en: '`y`, the *y* position of upper-left corner of the element'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y`, 元素左上角的 *y* 位置'
- en: 'The attributes can be used as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 属性可以使用如下：
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You can use `font-family` and `font-size` CSS styling on this element.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `font-family` 和 `font-size` CSS 样式化这个元素。
- en: Group
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组
- en: 'This element has no special attributes, so we''ll use transform to position
    it. You can put multiple elements inside it and all of its positioning will apply
    to its children. It''s good for moving many elements together as one:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这个元素没有特殊属性，所以我们将使用转换来定位它。你可以将多个元素放入其中，并且所有定位都将应用于其子元素。这对于将多个元素一起移动非常有用：
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Bezier curves
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 贝塞尔曲线
- en: What if we want to draw complex organic shapes? To do this, we'll need to use
    paths. First, though, to understand paths, you have to understand **Bezier curves**.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想绘制复杂的有机形状呢？为了做到这一点，我们需要使用路径。不过，首先，为了理解路径，你必须了解**贝塞尔曲线**。
- en: Cubic Bezier curves
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三次贝塞尔曲线
- en: 'There are two types of Bezier curves:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 贝塞尔曲线有两种类型：
- en: Bezier curves ([http://blogs.sitepointstatic.com/examples/tech/svg-curves/cubic-curve.html](http://blogs.sitepointstatic.com/examples/tech/svg-curves/cubic-curve.html))
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贝塞尔曲线 ([http://blogs.sitepointstatic.com/examples/tech/svg-curves/cubic-curve.html](http://blogs.sitepointstatic.com/examples/tech/svg-curves/cubic-curve.html))
- en: Quadratic Bezier curves ([http://math.hws.edu/eck/cs424/notes2013/canvas/bezier.html](http://math.hws.edu/eck/cs424/notes2013/canvas/bezier.html))
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二次贝塞尔曲线 ([http://math.hws.edu/eck/cs424/notes2013/canvas/bezier.html](http://math.hws.edu/eck/cs424/notes2013/canvas/bezier.html))
- en: 'Each curve is made up of four points:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 每条曲线由四个点组成：
- en: Start point
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 起始点
- en: End point
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结束点
- en: Starting control point
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 起始控制点
- en: Ending control point
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结束控制点
- en: 'The start/end points are where the curve starts and ends. The control points
    define the shape of the curve. It''s easiest to conceptualize it with the following
    diagram:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 起始/结束点是曲线开始和结束的位置。控制点定义了曲线的形状。以下图表可以帮助你理解：
- en: '![](img/d8a7f600-e12f-4cc7-8b35-a181a917f937.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8a7f600-e12f-4cc7-8b35-a181a917f937.png)'
- en: 'As we manipulate the control points, we can see how the shape of the curve
    is affected:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们操纵控制点时，我们可以看到曲线形状是如何受到影响的：
- en: '![](img/f16c5fa7-54b4-4d57-962f-9faf96f0c591.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f16c5fa7-54b4-4d57-962f-9faf96f0c591.png)'
- en: 'You can even join multiple Bezier curves together, as shown in this diagram:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以将多个贝塞尔曲线连接起来，如图所示：
- en: '![](img/7f20a7b4-2671-4e9b-84a2-b0a79feb8acc.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f20a7b4-2671-4e9b-84a2-b0a79feb8acc.png)'
- en: Smooth cubic Bezier curves
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平滑三次贝塞尔曲线
- en: 'Smooth cubic Bezier curves are just a way to simplify some cubic Bezier curves
    when they''re joined together. Take a look at the two control points in the red
    square shown in this diagram:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 平滑三次贝塞尔曲线只是当它们连接在一起时简化某些三次贝塞尔曲线的一种方式。看看这个图中红色正方形中显示的两个控制点：
- en: '![](img/d951ea00-dc8c-42de-80fc-bf2c121903f2.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d951ea00-dc8c-42de-80fc-bf2c121903f2.png)'
- en: The point in the lower–left corner of the square is the end control point of
    the first curve. The point in the upper-right corner of the square is start control
    point of the second curve.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 正方形的左下角点是第一条曲线的终点控制点。正方形的右上角点是第二条曲线的起点控制点。
- en: Note that the two points are reflections of each other around the central black
    dot, which is the end point of the first curve and the start point of the second
    curve. The two points are exactly 180 degrees from each other, and they have the
    same distance from that central point.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这两个点在中心黑色圆点周围是彼此的反射，这个黑色圆点是第一条曲线的终点和第二条曲线的起点。这两个点彼此正好相差180度，并且它们与中心点的距离相同。
- en: 'In scenarios such as this, where the start control point of one curve is a
    reflection of the end control point of the previous curve, we can skip stating
    the start control point of the second curve. Instead, we let the browser calculate
    it, based on the end control point of the first curve:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，一个曲线的起点控制点是前一个曲线的终点控制点的反射，我们可以省略第二个曲线的起点控制点的声明。相反，我们让浏览器根据第一个曲线的终点控制点来计算它：
- en: '![](img/de5ee0ed-38b3-4040-b69f-763a7865b2ab.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de5ee0ed-38b3-4040-b69f-763a7865b2ab.png)'
- en: 'We can also omit the start point, since the browser knows it will be the same
    as the end point of the previous curve. In summary, to define that second curve,
    we only need two points:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以省略起点，因为浏览器知道它将与前一个曲线的终点相同。总之，为了定义第二个曲线，我们只需要两个点：
- en: The end point
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终点
- en: The end control point
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终点控制点
- en: Quadratic Bezier curve
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二次贝塞尔曲线
- en: 'Another situation where we can simplify defining a Bezier curve is where the
    start control point and end control point are the same:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简化定义贝塞尔曲线的另一种情况是，当起点控制点和终点控制点相同时：
- en: '![](img/be636500-bf3c-4543-bfb3-f3fc2262aec8.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be636500-bf3c-4543-bfb3-f3fc2262aec8.png)'
- en: 'Here, we can define the curve with just three points:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只需要三个点来定义曲线：
- en: The start point
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 起点
- en: The end point
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终点
- en: One single control point that acts as both a start control point and an end
    control point
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个既作为起点控制点又作为终点控制点的单个控制点
- en: Smooth quadratic Bezier curve
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平滑二次贝塞尔曲线
- en: 'The final situation where we can simplify defining a Bezier curve is where
    we have a quadratic Bezier curve (one single control point) that is a reflection
    of the end control point of a previous curve:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简化定义贝塞尔曲线的最终情况是，我们有一个二次贝塞尔曲线（一个单独的控制点），它是前一个曲线的终点控制点的反射：
- en: '![](img/36e34955-7eb9-4d50-aa64-334e6dfa613e.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36e34955-7eb9-4d50-aa64-334e6dfa613e.png)'
- en: 'In this situation, the browser knows the start point of the curve (the end
    point of the previous curve), and it can calculate the single control point needed
    (since it is a quadratic Bezier curve) based on the end control point of the previous
    curve. This is a smooth quadratic Bezier curve, and you only need one point to
    define it:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，浏览器知道曲线的起点（前一个曲线的终点），并且它可以基于前一个曲线的终点控制点计算出所需的单个控制点（因为它是一个二次贝塞尔曲线）。这是一个平滑的二次贝塞尔曲线，您只需要一个点来定义它：
- en: The end point
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终点
- en: Drawing a path
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制路径
- en: Now that we understand Bezier curves, we can use them in our SVGs with `<path>`
    elements.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了贝塞尔曲线，我们可以在我们的 SVG 中使用 `<path>` 元素来使用它们。
- en: 'Documentation can be found here: [https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths).'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 文档可以在这里找到：[https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths).
- en: 'These tags take a `d` attribute, which stands for a set of drawing commands.
    The value of this attribute is any combination of the following:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标签接受一个 `d` 属性，该属性代表一组绘图命令。此属性的值是以下组合中的任何一种：
- en: 'M = moveto: move the drawing point to the given coordinates'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'M = moveto: 将绘图点移动到给定的坐标'
- en: M *x y*
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: M *x y*
- en: 'L = lineto: draw a line from the previous point in the d command to the point
    given'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'L = lineto: 从 `d` 命令中的前一个点绘制到给定点的线'
- en: L *x y*
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: L *x y*
- en: 'C = curveto: draw a curve from the previous point in the `d` command to the
    point given with the given control points'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'C = curveto: 从 `d` 命令中的前一个点绘制曲线到给定控制点的点'
- en: C *x*1 *y*1, *x*2 *y*2, *x y*
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: C *x*1 *y*1, *x*2 *y*2, *x y*
- en: The first pair is first control point
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一对是第一个控制点
- en: The second pair is second control point
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二对是第二个控制点
- en: The last pair is final ending point of curve
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一对是曲线的最终终点
- en: 'S = smooth curveto:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: S = 平滑曲线：
- en: S *x*2 *y*2, *x y*
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S *x*2 *y*2, *x y*
- en: Follows another curve
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循另一个曲线
- en: Uses a reflection of *x*2 *y*2 of the previous S or C command for *x*1 *y*1
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用前一个S或C命令的*x*2 *y*2的反射作为*x*1 *y*1
- en: 'Q = quadratic Bezier curve:'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Q = 二次贝塞尔曲线：
- en: Q *x*1 *y*1, *x y*
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Q *x*1 *y*1, *x y*
- en: Uses one control point for start and end controls (*x*1, *y*1)
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一个控制点作为起始和结束控制（*x*1, *y*1）
- en: 'T = smooth quadratic Bezier curveto:'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: T = 平滑二次贝塞尔曲线：
- en: T *x y*
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: T *x y*
- en: Follows another curve
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循另一个曲线
- en: Uses a reflection of the previous quadratic curve's control point as its control
    point
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用前一个二次曲线的控制点的反射作为其控制点
- en: 'Z = closepath: draws a line from the previous point in the `d` command to the
    first point in the `d` command'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Z = 关闭路径：从`d`命令中的前一个点画一条线到`d`命令中的第一个点
- en: Note that all of these commands can also be expressed with lowercase letters.
    If capital letters are used, this means absolutely positioned (relative to the
    upper–left corner of the SVG element); lowercase letters mean that all the points
    are expressed relative to the previous point in the `d` command.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，所有这些命令也可以用小写字母表示。如果使用大写字母，这意味着绝对定位（相对于SVG元素的左上角）；小写字母表示所有点都相对于`d`命令中的前一点表示。
- en: 'Let''s use lines to draw a triangle:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用线条来画一个三角形：
- en: '[PRE18]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following output will be displayed:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示以下输出：
- en: '![](img/309d826e-b310-48b3-adbe-e7cf3191fd9f.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/309d826e-b310-48b3-adbe-e7cf3191fd9f.png)'
- en: 'Next, we''ll draw a Bezier curve:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将绘制一个贝塞尔曲线：
- en: '[PRE19]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following output will be displayed:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示以下输出：
- en: '![](img/387e8e9c-7489-464d-9cfb-74c4dbbfe961.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/387e8e9c-7489-464d-9cfb-74c4dbbfe961.png)'
- en: 'Here''s a quadratic Bezier curve:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个二次贝塞尔曲线：
- en: '[PRE20]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following output will be displayed:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示以下输出：
- en: '![](img/10a98bff-3fb8-4059-96d6-554748672f06.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/10a98bff-3fb8-4059-96d6-554748672f06.png)'
- en: Arcs
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弧线
- en: 'An **arc** is a command that you can add to a path that will draw part of an
    ellipse. To do this, we begin with only two points:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**弧**是一个可以添加到路径中的命令，可以绘制椭圆的一部分。为此，我们开始时只有两个点：'
- en: '![](img/b80f97e9-9d14-4a45-a34b-4d93ae784660.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b80f97e9-9d14-4a45-a34b-4d93ae784660.png)'
- en: For any two points, there are only two ellipses with the same width/height and
    rotation that contain both points. In the previous diagram, try to imagine moving
    the ellipses around without rotating or scaling them. As soon as you do, they
    lose contact with at least one of the two given points. One point might be on
    the ellipse, but the other won't be.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任意两个点，只有两个具有相同宽高和旋转的椭圆包含这两个点。在上一个图中，尝试想象在不旋转或缩放椭圆的情况下移动椭圆。一旦这样做，它们就会至少失去与两个给定点中的一个的接触。一个点可能在椭圆上，但另一个则不会。
- en: We can use this information to draw any of the four colored arcs shown in the
    previous diagram.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这些信息来绘制上一个图中显示的四个彩色弧线中的任何一个。
- en: 'Make the following code part of the `d` attribute''s value on a `<path>` element:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码部分作为`<path>`元素上的`d`属性的值：
- en: '[PRE21]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s look at the various properties of an arc:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看弧线的各种属性：
- en: '`A`: creates an arc draw command'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`A`: 创建一个弧线绘制命令'
- en: '`rx`: the *x* radius of both ellipses (in px)'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rx`: 两个椭圆的*x*半径（以px为单位）'
- en: '`ry`: the *y* radius of both ellipses (in px)'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ry`: 两个椭圆的*y*半径（以px为单位）'
- en: '`x-axis-rotation`: rotates both ellipses a certain number of degrees'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x-axis-rotation`: 旋转两个椭圆一定角度'
- en: '`large-arc-flag`: indicates whether to travel along the arc that contains more
    than 180 degrees (1 to do so, 0 to not do so)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`large-arc-flag`: 指示是否沿着包含超过180度的弧线移动（1表示移动，0表示不移动）'
- en: '`sweep-flag`: indicates whether to move along the arc that goes clockwise (1
    to do so, 0 to not do so)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sweep-flag`: 指示是否沿着顺时针方向的弧线移动（1表示移动，0表示不移动）'
- en: '`x`: destination *x* value (in px)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`: 目标*x*值（以px为单位）'
- en: '`y`: destination *y* value (in px)'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y`: 目标*y*值（以px为单位）'
- en: '`large-arc-flag` determines whether to make an arc that is greater than 180
    degrees. Here''s an example without it (note, the red shows the arc drawn, while
    the green arcs are other possible arcs that could be drawn using a combination
    of `large-arc-flag` and `sweep-flag`):'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`large-arc-flag`确定是否绘制大于180度的弧线。以下是一个没有它的示例（注意，红色显示绘制的弧线，而绿色弧线是使用`large-arc-flag`和`sweep-flag`组合可以绘制的其他可能的弧线）：'
- en: '![](img/c94ea0b6-a7d0-489d-8814-7e652fcc05ce.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c94ea0b6-a7d0-489d-8814-7e652fcc05ce.png)'
- en: 'Note, it chooses one of the two smaller arcs. Here''s an example with the `large-arc-flag`
    set:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，它选择两个较小弧线中的一个。以下是一个将`large-arc-flag`设置为的示例：
- en: '![](img/bae80f49-cb61-4278-bcfb-9a90cc18161f.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bae80f49-cb61-4278-bcfb-9a90cc18161f.png)'
- en: Note, it chooses one of the two larger arcs.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，它选择了两个较大弧中的其中一个。
- en: 'In the previous example, for both situations where the `large-arc-flag` was
    set or not set, there was one other arc that could have been taken. To determine
    which of those two arcs to take, we use the `sweep-flag`, which determines whether
    to travel clockwise from the start point to the end point. Here''s an example
    with the `large-arc-flag` set, but without the `sweep-flag` set:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，对于`large-arc-flag`被设置或未设置的情况，还有一个其他的弧可以选择。为了确定选择这两个弧中的哪一个，我们使用`sweep-flag`，它决定了是否从起点顺时针移动到终点。以下是一个`large-arc-flag`被设置但没有设置`sweep-flag`的例子：
- en: '![](img/5cd487e9-2450-404e-8cfd-16ec3e842458.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5cd487e9-2450-404e-8cfd-16ec3e842458.png)'
- en: 'Note that we move in a counterclockwise motion from start to end (left to right).
    If we set the `sweep-flag`, we travel in a clockwise motion:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们从起点到终点（从左到右）是逆时针移动的。如果我们设置`sweep-flag`，我们将按顺时针方向移动：
- en: '![](img/45761201-4725-4a3f-984e-8257a9b6b0f1.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45761201-4725-4a3f-984e-8257a9b6b0f1.png)'
- en: 'Here are all the possible combinations for `sweep-flag` and `large-arc-flag`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`sweep-flag`和`large-arc-flag`的所有可能组合：
- en: '![](img/2a53bf3f-6d1d-4489-b634-55cbdd70aba6.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a53bf3f-6d1d-4489-b634-55cbdd70aba6.png)'
- en: 'Here''s an example code for a `path` that uses an arc in its `d` attribute:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用`d`属性中的弧的`path`示例代码：
- en: '[PRE22]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here''s what it looks like:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来是这样的：
- en: '![](img/0f3ba735-ac9e-49d1-96e6-370460c709f7.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f3ba735-ac9e-49d1-96e6-370460c709f7.png)'
- en: 'Play with the different kinds of arc values here: [http://codepen.io/lingtalfi/pen/yaLWJG](http://codepen.io/lingtalfi/pen/yaLWJG).'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里尝试不同的弧值：[http://codepen.io/lingtalfi/pen/yaLWJG](http://codepen.io/lingtalfi/pen/yaLWJG)。
- en: Documentation
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档
- en: 'If needed, you can find all the documentation for SVG elements here: [https://developer.mozilla.org/en-US/docs/Web/SVG/Element](https://developer.mozilla.org/en-US/docs/Web/SVG/Element).'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，您可以在以下位置找到SVG元素的完整文档：[https://developer.mozilla.org/en-US/docs/Web/SVG/Element](https://developer.mozilla.org/en-US/docs/Web/SVG/Element)。
- en: Summary
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the basics of SVG (base tags, basic elements, positioning,
    and styling). We also looked at Bezier curves and how to draw organic shapes with
    them. We're now ready to learn how D3 can be used to modify these elements. In
    [Chapter 3](4c02d13e-8bf2-449a-8b13-eadd149cfda5.xhtml), *Building an Interactive
    Scatter Plot*, we will dive into the basics of `D3.js` and create an interactive
    scatter plot.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了SVG的基础知识（基础标签、基本元素、定位和样式）。我们还探讨了贝塞尔曲线以及如何使用它们绘制有机形状。现在我们准备好学习如何使用D3来修改这些元素。在[第3章](4c02d13e-8bf2-449a-8b13-eadd149cfda5.xhtml)《构建交互式散点图》中，我们将深入了解`D3.js`的基础并创建一个交互式散点图。
