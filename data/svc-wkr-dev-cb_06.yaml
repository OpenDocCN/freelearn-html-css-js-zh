- en: Chapter 6. Working with Advanced Libraries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。使用高级库
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Working with global APIs
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与全局API协同工作
- en: Implementing a circuit breaker
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现电路断路器
- en: Implementing a dead letter queue
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现死信队列
- en: Logging API analytics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录API分析
- en: Working with Google Analytics
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Google Analytics协同工作
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, you will be introduced to some of the advanced libraries available
    to interface with the service worker. These topics will be pragmatic and you will
    be working with advanced libraries in real-world software development. We will
    also learn about advanced topics, such as circuit breakers and dead letter queues,
    which you might not come across in everyday programming, but are something new
    to learn.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解一些可用于与服务工作者接口的高级库。这些主题将非常实用，你将在实际软件开发中使用高级库。我们还将学习一些高级主题，例如电路断路器和死信队列，这些可能在日常编程中不会遇到，但却是新学的知识。
- en: Let's start off this chapter by looking at which global APIs are available for
    the service worker to work with.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查看服务工作者可用的全局API开始这一章。
- en: Working with global APIs
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与全局API协同工作
- en: Service workers can access some very useful global API methods. Let's look at
    a few of these methods; you might them find handy, and they can be used in your
    own projects. Some of these global API methods include `Cache`, `caches`, `getAll`,
    `Request`, `Response`, and `fetch`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者可以访问一些非常实用的全局API方法。让我们看看其中的一些方法；你可能觉得它们很有用，并且可以在你的项目中使用。这些全局API方法包括`Cache`、`caches`、`getAll`、`Request`、`Response`和`fetch`。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章。学习服务工作者基础")的第一个菜谱，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考[第1章](ch01.html
    "第1章。学习服务工作者基础")的以下菜谱，*学习服务工作者基础*：*设置GitHub页面以支持SSL*、*在Windows上设置SSL*和*在Mac上设置SSL*。
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, and `style.css` files
    from the following location:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置复制`index.html`、`index.js`、`service-worker.js`和`style.css`文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/01/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/01/)'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/01/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/01/)'
- en: Open up a browser and go to `index.html`:![How to do it...](img/B05381_06_01.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`index.html`：![如何操作...](img/B05381_06_01.jpg)
- en: Open up the Developer Toolbar (*Cmd* + *Alt* + *I* or *F12*). Now refresh the
    page and look at the message in the console. You will see the global API functions
    logged into the console:![How to do it...](img/B05381_06_02.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开开发者工具栏（*Cmd* + *Alt* + *I* 或 *F12*）。现在刷新页面，查看控制台中的消息。你将看到全局API函数已记录到控制台：![如何操作...](img/B05381_06_02.jpg)
- en: How it works...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 的工作原理...
- en: 'We are simply printing some of the APIs available to the service worker to
    the console. Our `service-worker.js` file looks like the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是将可用的服务工作者API打印到控制台。我们的`service-worker.js`文件如下所示：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let's discuss some of these API methods in more detail.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地讨论一些这些API方法。
- en: Cache
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缓存
- en: The `Cache` interface is available for both service workers and windowed scopes.
    Its main purpose is to provide a storage mechanism for cached `Request` and `Response`
    object pairs.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cache`接口对服务工作者和窗口作用域都可用。其主要目的是为缓存的`Request`和`Response`对象对提供存储机制。'
- en: caches
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: caches
- en: The service worker stores assets offline with the `CacheStorage` object, which
    is enabled by the `window.caches` read-only property.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者使用`CacheStorage`对象将资产离线存储，该对象由`window.caches`只读属性启用。
- en: fetch
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: fetch
- en: The global `fetch` performs an asynchronous fetch across the network.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 全局 `fetch` 在网络中执行异步获取。
- en: getAll
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: getAll
- en: This is part of Chromium's command API. It gets passed into `Promise.then()`
    as an argument.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Chromium 命令 API 的一部分。它作为参数传递给 `Promise.then()`。
- en: Implementing a circuit breaker
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现断路器
- en: Imagine you run an application that polls an API every 5 seconds, but for some
    reason the service goes down, and you keep polling and getting timeouts. You would
    need to handle the error quickly and gracefully. The circuit breaker pattern detects
    failures and prevents your application from performing actions that are doomed
    to fail.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你运行的应用程序每5秒轮询一个API，但出于某种原因，服务中断了，你继续轮询并得到超时。你需要快速而优雅地处理错误。断路器模式检测故障并防止你的应用程序执行注定要失败的操作。
- en: In this recipe, we will look at how to implement a circuit breaker library with
    the service worker.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨如何使用服务工作者实现断路器库。
- en: Getting ready
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章. 学习服务工作者基础")的第一个菜谱，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在
    HTTPS 上运行。要了解如何设置支持此功能的发展环境，请参考[第1章](ch01.html "第1章. 学习服务工作者基础")的以下菜谱，*学习服务工作者基础*：*设置GitHub页面以支持SSL*，*在Windows上设置SSL*，和*在Mac上设置SSL*。
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Download all the files from the following location:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载所有文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/02/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/02/)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/02/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/02/)'
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_06_03.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到 `index.html` 文件：![如何做到这一点...](img/B05381_06_03.jpg)
- en: Now open up the DevTools (*Cmd* + *Alt* + *I* or *F12*) and make sure the **Preserve
    log** checkbox is clicked. Now refresh the page and you will see the log messages
    from the circuit breaker:![How to do it...](img/B05381_06_04.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开开发者工具 (*Cmd* + *Alt* + *I* 或 *F12*) 并确保点击了 **Preserve log** 复选框。现在刷新页面，你将看到断路器的日志消息：![如何做到这一点...](img/B05381_06_04.jpg)
- en: How it works...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: Before looking at the implementation, let's try to understand how a circuit
    breaker goes about its business.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看实现之前，让我们尝试理解断路器是如何工作的。
- en: A circuit breaker monitors for failures. Whenever the failures hit the threshold,
    the circuit breaker trips and any calls to the circuit breaker will return with
    an error. After a suitable interval, the circuit breaker resets the breaker if
    the error no longer occurs.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 断路器监控故障。每当故障达到阈值时，断路器跳闸，任何对断路器的调用都将返回错误。在适当的间隔后，如果错误不再发生，断路器将重置断路器。
- en: 'As you can see, we need two thresholds for error handling and resetting at
    a certain time after the circuit breaker trips:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们需要两个阈值来处理错误和在一定时间后重置断路器：
- en: '![How it works...](img/B05381_06_05.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B05381_06_05.jpg)'
- en: 'Image source: [http://martinfowler.com](http://martinfowler.com)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[http://martinfowler.com](http://martinfowler.com)
- en: 'The majority of our work is going to be in the `circuit-breaker.js` file. If
    you want to learn more about the circuit breaker, follow this link:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的大部分工作将在 `circuit-breaker.js` 文件中完成。如果你想了解更多关于断路器的信息，请点击此链接：
- en: '[http://martinfowler.com/bliki/CircuitBreaker.html](http://martinfowler.com/bliki/CircuitBreaker.html)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://martinfowler.com/bliki/CircuitBreaker.html](http://martinfowler.com/bliki/CircuitBreaker.html)'
- en: 'First, we need to configure the circuit breaker. Let''s make 10 blocks with
    a 3-second timeout and a threshold of five. We also define the error threshold
    as fifty percent:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要配置断路器。让我们创建10个块，每个块的超时时间为3秒，阈值为五个。我们还定义错误阈值为百分之五十：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We then define a method for `run` as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们然后定义`run`方法如下：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This method executes the fallback function passed in as an argument if the
    circuit is open. Otherwise, it will execute the command. In the `service-worker.js`
    file, we pass in the `fetch` request as the fallback function for the `run` method:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果电路开启，此方法将执行作为参数传入的回退函数。否则，它将执行命令。在`service-worker.js`文件中，我们将`fetch`请求作为`run`方法的回退函数传入：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `forceClose`, `forceOpen`, and `unforce` methods change the state accordingly:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`forceClose`、`forceOpen`和`unforce`方法相应地改变状态：'
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `isOpen` function returns a value indicating whether the circuit is open
    or closed:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`isOpen`函数返回一个值，表示电路是开启还是关闭：'
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Query the cache first; if the request doesn''t match, send the request to the
    network:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先查询缓存；如果请求不匹配，将请求发送到网络：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We denote our private functions with a `$` prefix. The `$startTicker` function
    starts the timer for us:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用`$`前缀表示我们的私有函数。`$startTicker`函数为我们启动计时器：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `$createBlock` function gives us a fresh block to work with, and the `$lastBlock`
    function gives us the last block, as expected:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`$createBlock`函数给我们提供了一个新的块来工作，而`$lastBlock`函数则如预期地给出了最后一个块：'
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `$execCmd` method updates the state by incrementing successes and failures:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`$execCmd`方法通过增加成功和失败次数来更新状态：'
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `$executeFallback` function runs the fallback method we discussed before:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`$executeFallback`函数运行我们之前讨论过的回退方法：'
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `$calcMetrics` function returns the total number of errors, as well as
    the count of successes:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`$calcMetrics`函数返回错误总数以及成功次数：'
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `$updateState` method updates the state after a series of calculations:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`$updateState`方法在一系列计算后更新状态：'
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Inside our `service-worker.js` file, we are using our circuit-breaker library
    by passing the fetch request via a circuitBreaker object:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`service-worker.js`文件中，我们通过传递fetch请求通过circuitBreaker对象来使用我们的断路器库：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Implementing a dead letter queue
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现死信队列
- en: 'Dead letter queues are system-generated queues for one or many of the following
    reasons: for storing messages that could not be delivered, queue length limit
    exceeded, message length limit exceeded, or a message being rejected by another
    queue exchange.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 死信队列是由于以下一个或多个原因系统生成的队列：存储无法投递的消息、队列长度限制超出、消息长度限制超出或消息被另一个队列交换拒绝。
- en: In this recipe, we are implementing a dead letter queue in the service worker.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们正在服务工作者中实现死信队列。
- en: Getting ready
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章. 学习服务工作者基础")的第一个食谱，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考以下食谱：*设置GitHub页面以支持SSL*、*设置Windows的SSL*和*设置Mac的SSL*。
- en: How to do it...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Download all the files from the following location:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载所有文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/03/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/03/)'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/03/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/03/)'
- en: Open up a browser and go to `index.html`:![How to do it...](img/B05381_06_06.jpg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`index.html`：![如何操作...](img/B05381_06_06.jpg)
- en: Now open up the DevTools (*Cmd* + *Alt* + *I* or *F12*) and make sure the **Preserve
    log** checkbox is clicked.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开开发者工具（*Cmd* + *Alt* + *I* 或 *F12*）并确保点击了**保留日志**复选框。
- en: Select the offline option on the **Network** tab:![How to do it...](img/B05381_06_07.jpg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**网络**选项卡上选择**离线**选项：![如何操作...](img/B05381_06_07.jpg)
- en: Now refresh the page and you will see the failed request messages, which are
    queued in the dead letter queue we implemented:![How to do it...](img/B05381_06_08.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在刷新页面，你会看到失败请求的消息，这些消息被我们实现的死信队列排队：![如何操作...](img/B05381_06_08.jpg)
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The install event handler of the service worker caches the files we are passing
    into the `addAll` method in the `service-worker.js` file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者安装事件处理程序将我们传递到 `service-worker.js` 文件中的 `addAll` 方法的文件缓存起来：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When we request files over the wire, the `fetch` event handler queries the
    cache to find out whether the requests are matched, and if so, serves them from
    the cache:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在网络上请求文件时，`fetch` 事件处理程序会查询缓存以确定请求是否匹配，如果匹配，则从缓存中提供它们：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Also, if the response is successful, then we call `replayQueuedRequests()`
    to run any outstanding requests in the queue:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果响应成功，则调用 `replayQueuedRequests()` 来运行队列中的任何挂起请求：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If the fetch fails, we queue the request:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果获取失败，我们将请求排队：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Logging API analytics
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录 API 分析
- en: If you were asked to implement API logging for an existing application, what
    will your approach be? The most common approaches are to either change the client-side
    code or the server-side code, or both.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你被要求为现有应用程序实现 API 日志记录，你的方法会是什么？最常见的方法是更改客户端代码或服务器端代码，或者两者都更改。
- en: By using a service worker, we can intercept client requests and gather information,
    and then send them to a log API.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用服务工作者，我们可以拦截客户端请求并收集信息，然后将它们发送到日志 API。
- en: Getting ready
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考第 1 章的第一道菜谱，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在
    HTTPS 上运行。要了解如何设置支持此功能的发展环境，请参考以下菜谱：*设置 GitHub pages for SSL*，*设置 Windows 的 SSL*
    和 *设置 Mac 的 SSL*。
- en: How to do it...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Download all the files from the following location:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载所有文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/04/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/04/)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/04/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/04/)'
- en: 'Run `npm install` on the command line:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行上运行 `npm install`：
- en: '[PRE18]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run `npm start` on the command line:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行上运行 `npm start`：
- en: '[PRE19]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_06_09.jpg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到 `index.html` 文件：![如何操作...](img/B05381_06_09.jpg)
- en: Add a task and a priority:![How to do it...](img/B05381_06_10.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加任务和优先级：![如何操作...](img/B05381_06_10.jpg)
- en: Now go to the reports page by clicking on the **reports** link:![How to do it...](img/B05381_06_11.jpg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在通过点击 **报告** 链接转到报告页面：![如何操作...](img/B05381_06_11.jpg)
- en: How it works...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the `index.html` file, we are adding a section with a form:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `index.html` 文件中，我们添加了一个带有表单的章节：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the `service-worker.js` file, every time a fetch request is fired, we are
    logging it:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `service-worker.js` 文件中，每次发起获取请求时，我们都会记录它：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `index.js` file contains the logic for adding and deleting to-dos. We first
    show the list of to-dos at the point of registration:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.js` 文件包含添加和删除待办事项的逻辑。我们首先在注册点显示待办事项列表：'
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'By clicking on the add button, a new to-do is created and sent to the server:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击添加按钮，创建一个新的待办事项并将其发送到服务器：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If a to-do was provided, skip it. If no priority is given, the default is `Minor`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了待办事项，则跳过。如果没有提供优先级，则默认为 `次要`：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We then send the API request, a `POST` request of to-do collection:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后发送 API 请求，一个待办事项集合的 `POST` 请求：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In order to retrieve the collection of to-dos, we fire a fetch request with
    the `GET` method:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索待办事项集合，我们使用 `GET` 方法发起一个获取请求：
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then we populate the to-dos table:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们填充待办事项表：
- en: '[PRE27]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'A function is useful for creating rows for the table:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数对于创建表格行很有用：
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Build a helper function for the table data:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为表格数据构建一个辅助函数：
- en: '[PRE29]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Build a delete button:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 构建删除按钮：
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Make a `DELETE` request for deleting to-dos:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 发起删除待办事项的 `DELETE` 请求：
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `server.js` file consists of two APIs, of which one is for to-do management
    and the other is for logs.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`server.js` 文件包含两个 API，其中一个用于待办事项管理，另一个用于日志。'
- en: We are providing a set of default to-dos to start with. These to-dos will appear
    on the top of our list as examples.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了一套默认的待办事项以开始。这些待办事项将作为示例出现在我们的列表顶部。
- en: '[PRE32]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The sticky flag will make sure that these to-dos are not removable.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 粘性标志将确保这些待办事项不可删除。
- en: 'The REST API endpoints will manage the requests for adding and deleting to-dos
    and the logs:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: REST API端点将管理添加和删除待办事项以及日志的请求：
- en: '[PRE33]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We create an aggregation function for the log report for `GET`, `DELETE`, and
    `POST` requests:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`GET`、`DELETE`和`POST`请求创建一个用于日志报告的聚合函数：
- en: '[PRE34]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the `report.html` file, we have a template for rendering log data. We use
    SWIG on the server side to render this template:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在`report.html`文件中，我们有一个用于渲染日志数据的模板。我们在服务器端使用SWIG来渲染此模板：
- en: '[PRE35]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Working with Google Analytics
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Google Analytics协作
- en: Google Analytics is a widely used tool today, and the majority of websites use
    it to collect various data from visitors. In this recipe, we are going to look
    at how we can benefit from the service worker when implementing Google Analytics.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Google Analytics是今天广泛使用的工具，大多数网站都使用它来收集访客的各种数据。在本菜谱中，我们将探讨在实现Google Analytics时如何从服务工作者中获益。
- en: Getting ready
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，您需要在浏览器设置中开启服务工作者实验功能。如果您还没有这样做，请参阅[第1章](ch01.html "第1章. 学习服务工作者基础")的第一个菜谱，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参阅以下菜谱：*设置GitHub页面以支持SSL*、*设置Windows的SSL*和*设置Mac的SSL*。
- en: How to do it...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置您的文件结构：
- en: 'Download all the files from the following location:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载所有文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/05/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/05/)'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/05/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/05/)'
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_06_12.jpg)
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`index.html`文件：![如何操作...](img/B05381_06_12.jpg)
- en: Now open up the DevTools (*Cmd* + *Alt* + *I* or *F12*), and go to the **Network**
    tab. You will see the /collect requests have a **Status** of 200, which means
    they've been successful:![How to do it...](img/B05381_06_13.jpg)
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开开发者工具（*Cmd* + *Alt* + *I* 或 *F12*），并转到**网络**选项卡。您将看到/collect请求的**状态**为200，这意味着它们已成功：![如何操作...](img/B05381_06_13.jpg)
- en: Refresh the page. You will see the following screen:![How to do it...](img/B05381_06_14.jpg)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新页面。您将看到以下屏幕：![如何操作...](img/B05381_06_14.jpg)
- en: Go to the **Console** tab of the DevTools:![How to do it...](img/B05381_06_15.jpg)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到开发者工具的**控制台**选项卡：![如何操作...](img/B05381_06_15.jpg)
- en: How it works...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In the `service-worker.js` file, at the point of activation, `caches.delete(cacheName)`
    will find and delete redundant out of date caches by checking the cache name:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在`service-worker.js`文件中，在激活点，`caches.delete(cacheName)`将通过检查缓存名称来查找并删除冗余的过时缓存：
- en: '[PRE36]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The service worker will cache the initial requests; the subsequent requests
    to the same resource will be handled by the `fetch()` event handler of the service
    worker. The `fetch` event handler queries the cache for the requests in the `currentCaches`
    cache and sends back the response to the browser:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者将缓存初始请求；对同一资源的后续请求将由服务工作者的`fetch()`事件处理器处理。`fetch`事件处理器在`currentCaches`缓存中查询请求，并将响应发送回浏览器：
- en: '[PRE37]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If the response was not found, it will send a fetch request to the network:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果响应未找到，它将向网络发送fetch请求：
- en: '[PRE38]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If the response for the preceding request was successful, the response will
    be cloned and added to the cache, with the request being the key and the response
    being the value:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前一个请求的响应成功，响应将被克隆并添加到缓存中，请求作为键，响应作为值：
- en: '[PRE39]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Next, we make sure that we resolve the current promise as soon as another on
    the array gets resolved:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们确保在数组中的另一个承诺解决后立即解决当前承诺：
- en: '[PRE40]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: See also
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Implementing read-through caching* recipe in [Chapter 4](ch04.html "Chapter 4. Accessing
    Offline Content with Advanced Techniques"), *Accessing Offline Content with Advanced
    Techniques*
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章。使用高级技术访问离线内容")的*实现读取缓存*配方中，*使用高级技术访问离线内容*
