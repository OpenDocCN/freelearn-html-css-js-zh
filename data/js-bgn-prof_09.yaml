- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: The Document Object Model
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档对象模型
- en: The **Document Object Model** (**DOM**) is a lot more exciting than it may sound
    at first. In this chapter, we will introduce you to the DOM. This is a fundamental
    concept you will need to understand before working with JavaScript on web pages.
    It grabs an HTML page and turns it into a logical tree. If you do not know any
    HTML, no worries. We start with an HTML crash course section that you can skip
    if you are familiar with HTML.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**文档对象模型** (**DOM**) 比您最初听起来要有趣得多。在本章中，我们将向您介绍 DOM。这是您在网页上使用 JavaScript 之前需要理解的基本概念。它抓取一个
    HTML 页面并将其转换为逻辑树。如果您不知道任何 HTML，不用担心。我们从 HTML 快速入门部分开始，如果您熟悉 HTML，可以跳过这一部分。'
- en: Once we are sure that we are on the same page with HTML knowledge, we will introduce
    you to the **Browser Object Model** (**BOM**). The BOM holds all the methods and
    properties for JavaScript to interact with the browser. This is information related
    to previous pages visited, the size of the window of the browser, and also the
    DOM.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确信我们对 HTML 知识有相同的理解，我们将向您介绍 **浏览器对象模型** (**BOM**)。BOM 包含 JavaScript 与浏览器交互的所有方法和属性。这是与之前访问的页面、浏览器窗口大小以及
    DOM 相关的信息。
- en: The DOM contains the HTML elements on the web page. With JavaScript, we can
    select and manipulate parts of the DOM. This leads to interactive web pages instead
    of static ones. So, long story short, being able to work with the DOM means you're
    able to create interactive web pages!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: DOM 包含网页上的 HTML 元素。通过 JavaScript，我们可以选择和操作 DOM 的部分。这导致交互式网页而不是静态网页。所以，简而言之，能够与
    DOM 一起工作意味着您能够创建交互式网页！
- en: 'We will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: HTML crash course
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML 快速入门
- en: Introducing the BOM
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 BOM
- en: Introducing the DOM
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 DOM
- en: Types of DOM elements
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM 元素的类型
- en: Selecting page elements
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择页面元素
- en: We can imagine you cannot wait to get started, so let's dive into it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以想象您迫不及待地想要开始，所以让我们深入探讨吧。
- en: 'Note: exercise, project and self-check quiz answers can be found in the *Appendix*.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：练习、项目和自我检查测验的答案可以在 *附录* 中找到。
- en: HTML crash course
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML 快速入门
- en: '**Hyper-Text Markup Language** (**HTML**) is the language that shapes the content
    of web pages. Web browsers understand HTML code and represent it in the format
    we are used to seeing: web pages. Here is a little very basic HTML example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**超文本标记语言** (**HTML**) 是塑造网页内容的语言。网络浏览器理解 HTML 代码并以我们习惯的格式展示它：网页。以下是一个非常基础的
    HTML 示例：'
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is what this basic web page looks like:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是这个基本网页的外观：
- en: '![Graphical user interface, text, application'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图形用户界面，文本，应用程序'
- en: Description automatically generated](img/B16682_09_01.png)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/B16682_09_01.png)
- en: 'Figure 9.1: Basic website'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1：基本网站
- en: HTML code consists of elements. These elements contain a tag and attributes.
    We will explain these fundamental concepts in the coming sections.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 代码由元素组成。这些元素包含一个标签和属性。我们将在接下来的章节中解释这些基本概念。
- en: HTML elements
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML 元素
- en: As you can see, HTML consists of words between `<angle brackets>`, or elements.
    Any element that gets opened needs to be closed. We open with `<elementname>`
    and we close with `</elementname>`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，HTML 由 `<angle brackets>` 之间的单词组成，或元素。任何打开的元素都需要关闭。我们用 `<elementname>`
    打开，用 `</elementname>` 关闭。
- en: 'Everything in between that is part of the element. There are a few exceptions
    with regards to the closing, but you will run into them at your own pace. In the
    previous example we had multiple elements, including these two. It is an element
    with the tag `body` and an inner element with the tag `p`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 元素之间的所有内容都是该元素的一部分。在关闭方面有一些例外，但你会根据自己的进度遇到它们。在上一个示例中，我们有许多元素，包括这两个。这是一个带有 `body`
    标签的元素，以及一个带有 `p` 标签的内部元素：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'So elements can contain inner elements. Elements can only be closed if all
    inner elements have been closed. Here is an example to demonstrate that. Here
    is the right way:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，元素可以包含内部元素。只有当所有内部元素都已关闭时，元素才能关闭。以下是一个示例来演示这一点。以下是正确的方式：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And here is the wrong way:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 而下面是错误的做法：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Please note, these are just made-up element names. In the last example, we
    close `sub` before we have closed the `inner` element. This is wrong; you must
    always close the inner elements before closing the outer element. We call inner
    elements child elements, and outer elements parent elements. Here is some correct
    HTML:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些只是虚构的元素名称。在上一个示例中，我们在关闭 `inner` 元素之前关闭了 `sub`。这是错误的；您必须始终在关闭外部元素之前关闭内部元素。我们称内部元素为子元素，外部元素为父元素。以下是一些正确的
    HTML：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This isn''t correct HTML, because the `div` is closed before its inner element
    `p`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是正确的HTML，因为`div`在其内部元素`p`之前就关闭了：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The different elements represent different pieces of layout. The `p` we just
    saw represents paragraphs. And another common one is `h1`, which represents a
    big title. What is more important is to know the three major building elements
    of every HTML page. The HTML element, the head element, and the body element.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的元素代表不同的布局部分。我们刚才看到的`p`代表段落。另一个常见的元素是`h1`，它代表一个大标题。更重要的是要了解每个HTML页面的三个主要构建元素。HTML元素、head元素和body元素。
- en: 'In the HTML element, all the HTML takes place. You can only have one of these
    in your HTML page. It is the outer element, and all other elements are housed
    in it. It contains the other two top-level elements: `head` and `body`. If you
    are ever confused about the order of `head` and `body`, just think of a human;
    the head is on top of the body.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML元素中，所有的HTML都在这里发生。你的HTML页面中只能有一个这样的元素。它是外层元素，所有其他元素都包含在其中。它包含其他两个顶级元素：`head`和`body`。如果你对`head`和`body`的顺序感到困惑，只需想象一个人类；头部在身体之上。
- en: In the `head` element, we arrange a lot of things that are meant for the browser
    and not for the user. You can think of certain metadata, such as which JavaScript
    scripts and which stylesheets need to be included, and what the searching engine
    should use as a description on the search result page. We will not really be doing
    a lot with the head element as JavaScript developers, other than including scripts.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在`head`元素中，我们安排了很多旨在为浏览器而非用户准备的事情。你可以想象一些元数据，比如哪些JavaScript脚本和哪些样式表需要包含，以及搜索引擎应该在搜索结果页面上使用什么作为描述。作为JavaScript开发者，我们实际上不会对head元素做很多操作，除了包含脚本。
- en: 'Here''s an example of a basic `head` element:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个基本`head`元素的例子：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `body` element is mostly the content that will appear on the web page. There
    can only be one `body` element in the HTML element. Titles, paragraphs, images,
    lists, links, buttons, and many more are all elements that we can come across
    in the body. They have their own tag, so for example, `img` for image and `a`
    for a link. Here is a table including common tags for in the body. It is definitely
    not an exhaustive list.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`body`元素主要是将在网页上显示的内容。在HTML元素中只能有一个`body`元素。标题、段落、图片、列表、链接、按钮等等，都是我们可能在body中遇到元素。它们有自己的标签，例如，`img`用于图片，`a`用于链接。这里有一个包括body中常见标签的表格。这绝对不是一个详尽的列表。'
- en: '| Tag to open | Tag to end | Description |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 开启标签 | 结束标签 | 描述 |'
- en: '| `<p>` | `</p>` | Used to create a paragraph. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `<p>` | `</p>` | 用于创建一个段落。 |'
- en: '| `<h1>` | `</h1>` | Used to create a header; smaller headers are h2 to h6.
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `<h1>` | `</h1>` | 用于创建一个标题；较小的标题是h2到h6。 |'
- en: '| `<span>` | `</span>` | Generic inline container for content that needs to
    be separated, for example, for layout purposes. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `<span>` | `</span>` | 用于需要分离的内容的通用内联容器，例如，用于布局目的。 |'
- en: '| `<a>` | `</a>` | Used for hyperlinks. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `<a>` | `</a>` | 用于超链接。 |'
- en: '| `<button>` | `</button>` | Used for buttons. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `<button>` | `</button>` | 用于按钮。 |'
- en: '| `<table>` | `</table>` | Creates a table. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `<table>` | `</table>` | 创建一个表格。 |'
- en: '| `<tr>` | `</tr>` | Creates a table row, must be used inside a table. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `<tr>` | `</tr>` | 创建一个表格行，必须在表格内使用。 |'
- en: '| `<td>` | `</td>` | Creates a table data cell inside a row. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `<td>` | `</td>` | 在行内创建一个表格数据单元格。 |'
- en: '| `<ul>` | `</ul>` | Unordered lists, with bullet points, for example. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `<ul>` | `</ul>` | 带有项目符号的无序列表，例如。 |'
- en: '| `<ol>` | `</ol>` | Ordered lists with numbers. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `<ol>` | `</ol>` | 带有数字的有序列表。 |'
- en: '| `<li>` | `</li>` | List items for inside ordered and unordered lists. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `<li>` | `</li>` | 有序和无序列表中的列表项。 |'
- en: '| `<div>` | `</div>` | Section inside the HTML page. It is often used as a
    container for other styles or sections and can easily be used for special layouts.
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `<div>` | `</div>` | HTML页面内的一个部分。它通常用作其他样式或部分的容器，并且可以很容易地用于特殊布局。 |'
- en: '| `<form>` | `<form>` | Creates an HTML form. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `<form>` | `<form>` | 创建一个HTML表单。 |'
- en: '| `<input>` | `</input>` | Creates an input field in which the user can enter
    information. These can be textboxes, checkboxes, buttons, passwords, numbers,
    dropdowns, radio buttons, and much more. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `<input>` | `</input>` | 创建一个用户可以输入信息的输入字段。这些可以是文本框、复选框、按钮、密码、数字、下拉菜单、单选按钮等等。
    |'
- en: '| `<input />` | None | Same as input, but written without a closing tag, the
    / at the end makes it self-closing. This is only possible for a few elements.
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `<input />` | 无 | 与input相同，但写成没有结束标签的形式，末尾的/使其自闭合。这仅适用于少数几个元素。 |'
- en: '| `<br>` | None | Used to make a line break (go to a new line). It does not
    need an end tag and is therefore an exception. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `<br>` | 无 | 用于创建换行（转到新行）。它不需要结束标签，因此是一个例外。 |'
- en: 'Can you figure out what this HTML example does:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你能弄清楚这个HTML示例的作用吗：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It creates a web page, with `Awesome` in the tab title. And on the page, it
    has a big header saying `Language and awesomeness`. Then there is a table with
    three rows and two columns. The first row contains the headers `Language` and
    `Awesomeness`. The second row holds the values `JavaScript` and `100`, and the
    third row holds the values `HTML` and `100`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 它创建了一个网页，在标签标题中显示`Awesome`。在页面上，有一个大标题写着`Language and awesomeness`。然后有一个包含三行两列的表格。第一行包含标题`Language`和`Awesomeness`。第二行包含值`JavaScript`和`100`，第三行包含值`HTML`和`100`。
- en: HTML attributes
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML属性
- en: 'The last part of HTML that we will discuss in this crash course is HTML attributes.
    Attributes influence the element they are specified on. They exist inside the
    element they are specified on and are assigned a value using an equal sign. For
    example, the attribute of `a` (which indicates a hyperlink) is the `href`. This
    specifies where the link is redirecting to:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本快速入门课程的最后部分，我们将讨论HTML属性。属性会影响它们指定的元素。它们存在于指定的元素内部，并使用等号赋值。例如，`a`（表示超链接）的属性是`href`。这指定了链接将重定向到何处：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This displays a link with the text `Ask Google`. And when you click it, you
    will be sent to Google, which can be told by the value of the `href` attribute.
    This modifies the `a` element. There are many attributes out there, but for now
    you just need to know that they modify the element they are specified on.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了一个带有文本`Ask Google`的链接。当你点击它时，你将被发送到Google，这可以通过`href`属性的值来判断。这修改了`a`元素。属性有很多，但就目前而言，你只需要知道它们会修改指定的元素。
- en: Here is a table with an overview of the most important attributes to get started
    with HTML and JavaScript. Why these are important will unfold somewhere in the
    next chapter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个表格，概述了开始使用HTML和JavaScript时最重要的属性。为什么这些属性很重要将在下一章中展开。
- en: '| Attribute name | Description | Can be used on which element? |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 属性名称 | 描述 | 可以用于哪些元素？ |'
- en: '| `id` | Gives an element a unique ID, such as age. | All of them |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `id` | 给元素赋予一个唯一的ID，例如`age`。 | 所有元素 |'
- en: '| `name` | Used to give a custom name to an element. | `input`, `button`, `form`,
    and quite a few we haven''t seen yet |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 用于给元素指定一个自定义名称。 | `input`、`button`、`form`以及我们尚未见过的许多元素 |'
- en: '| `class` | Special metadata that can be added to an element. This can result
    in a certain layout or JavaScript manipulation. | Almost all of them inside body
    |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `class` | 可以添加到元素中的特殊元数据。这可能导致特定的布局或JavaScript操作。 | 几乎所有在`body`内部的元素 |'
- en: '| `value` | Sets the initial value of the element it is added to. | `button`,
    `input`, `li`, and a few we haven''t seen yet |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `value` | 设置添加到元素中的初始值。 | `button`、`input`、`li`以及我们尚未见过的几个元素 |'
- en: '| `style` | Gives a specified layout to the HTML element it is added to. |
    All of them |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `style` | 给添加到其中的HTML元素指定一个布局。 | 所有元素 |'
- en: We will introduce you to other attributes when you will need them for practicing
    your JavaScript magic.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要它们来练习你的JavaScript魔法时，我们将向你介绍其他属性。
- en: Okay, this has been one of the more brief HTML crash courses out there. There
    are many great resources to find more information. If you need more information
    or explanation at this point, create and open an HTML file like the following
    and take it from there!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这可能是其中较为简短的HTML快速入门课程之一。有许多优秀的资源可以找到更多信息。如果你现在需要更多信息或解释，创建并打开一个如下所示的HTML文件，然后继续学习！
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We will now go ahead and have a look at the BOM and the different parts of the
    BOM.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将接着查看BOM及其不同部分。
- en: The BOM
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BOM
- en: The BOM, sometimes also called the **window browser object**, is the amazing
    "magic" element that makes it possible for your JavaScript code to communicate
    with the browser.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: BOM，有时也称为**窗口浏览器对象**，是一个神奇的“魔法”元素，使得你的JavaScript代码能够与浏览器进行通信。
- en: The window object contains all the properties required to represent the window
    of the browser, so for example, the size of the window and the history of previously
    visited web pages. The window object has global variables and functions, and these
    can all be seen when we explore the window object. The exact implementation of
    the BOM depends on the browser and the version of the browser. This is important
    to keep in mind while working your way through these sections.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口对象包含表示浏览器窗口所需的所有属性，例如窗口的大小和之前访问的网页的历史记录。窗口对象具有全局变量和函数，我们可以在探索窗口对象时看到它们。BOM的确切实现取决于浏览器和浏览器的版本。在浏览这些部分时，这一点很重要要记住。
- en: 'Some of the most important objects of the BOM we will look into in this chapter
    are:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将探讨BOM的一些最重要的对象：
- en: History
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 历史
- en: Navigator
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航器
- en: Location
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置
- en: As well as the preceding useful objects, we will also consider the DOM in more
    detail. But first, we can explore the BOM and see the objects of it with the command
    `console.dir(window)`. We will enter this in the console of our browser. Let's
    discuss how to get there first.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面提到的有用对象外，我们还将更详细地考虑DOM。但首先，我们可以探索BOM，并使用命令`console.dir(window)`查看其对象。我们将在浏览器控制台中输入这个命令。让我们先讨论如何到达那里。
- en: We can access the HTML elements and the JavaScript if we go to the inspection
    panel of our browser. It differs a bit in how you get there, but often the `F12`
    button while in the browser will do the trick, or else a right-click on the website
    you want to see the console for and clicking on **Inspect element** or **Inspect**
    on a macOS device.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们转到浏览器检查面板，我们可以访问HTML元素和JavaScript。到达那里的方式略有不同，但通常在浏览器中按`F12`按钮或右键单击你想要查看控制台的网站，然后单击**Inspect
    element**或macOS设备上的**Inspect**。
- en: You should see a side panel (or if you have changed your settings, a separate
    window) pop up.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到一个侧边面板（或者如果你已经更改了设置，则是一个单独的窗口）弹出。
- en: '![](img/B16682_09_02.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16682_09_02.png)'
- en: 'Figure 9.2: Inspecting a page in the browser'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2：在浏览器中检查页面
- en: 'Navigate to the **Console** tab, which is next to the **Elements** tab in the
    image above. You can type the following command and press `Enter` to get information
    about the window object:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到上面的图像中紧邻**Elements**标签旁边的**Console**标签。你可以输入以下命令并按`Enter`键以获取有关窗口对象的信息：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This command will produce a view like the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将产生如下视图：
- en: '![Text'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![文本'
- en: Description automatically generated](img/B16682_09_03.png)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/B16682_09_03.png)
- en: 'Figure 9.3: Part of the output of console.dir(window) showing the window browser
    object'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3：console.dir(window)的部分输出，显示了窗口浏览器对象
- en: The `console.dir()` method shows a list of all the properties of the specified
    object. You can click on the little triangles to open the objects and inspect
    them even more.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.dir()`方法显示指定对象的所有属性列表。你可以点击小三角形来打开对象并进一步检查它们。'
- en: 'The BOM contains many other objects. We can access these like we saw when we
    dealt with objects, so for example, we can get the length of the history (in my
    browser) accessing the `history` object of the window and then the length of the
    `history` object, like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: BOM包含许多其他对象。我们可以像处理对象时那样访问它们，例如，我们可以通过访问窗口的`history`对象以及`history`对象的长度的方式来获取历史记录的长度（在我的浏览器中），如下所示：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After the exercise, we will learn more about the `history` object.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 练习之后，我们将更多地了解`history`对象。
- en: Practice exercise 9.1
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习9.1
- en: Go back to the website you were just viewing and execute the command `console.dir(window)`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回你刚刚查看的网站并执行命令`console.dir(window)`。
- en: Can you find the `document` object that is nested within the `window` object?
    Under the root of the `window` object in the console, you can navigate down to
    the object that is named `document`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能找到嵌套在`window`对象中的`document`对象吗？在控制台中的`window`对象根目录下，你可以导航到名为`document`的对象。
- en: Can you find the height and width (in pixels) of your window? You can return
    the inner and outer window.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能找到窗口的高度和宽度（以像素为单位）吗？你可以返回内窗口和外窗口。
- en: Window history object
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 窗口历史对象
- en: 'The window browser object also contains a `history` object. This object can
    actually be written without the prefix of `window` because it has been made globally
    available, so we can get the exact same object by using the `console.dir(window.history)`
    or simply the `console.dir(history)` command in the console:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口浏览器对象还包含一个`history`对象。实际上，这个对象可以不使用`window`前缀来编写，因为它已经被设置为全局可用，所以我们可以通过在控制台中使用`console.dir(window.history)`或简单地使用`console.dir(history)`命令来获取相同的对象：
- en: '![](img/B16682_09_04.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B16682_09_04.png](img/B16682_09_04.png)'
- en: 'Figure 9.4: History object'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4：历史对象
- en: This object is actually what you can use to go back to a previous page. It has
    a built-in function for that called `go`. What happens when you execute this command?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个对象实际上是你用来返回上一个页面的。它有一个内置的`go`函数用于这个目的。当你执行这个命令时会发生什么？
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Go ahead and try it for yourself in the console of your browser (make sure that
    you did visit multiple pages in that tab).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以自己在浏览器控制台中尝试一下（确保你在那个标签页中访问了多个页面）。
- en: Window navigator object
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 窗口`navigator`对象
- en: In the window object that we just saw, there is a `navigator` property. This
    property is particularly interesting because it contains information about the
    browser we are using, such as what browser it is and what version we are using,
    and what operating system the browser is running on.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们刚才看到的窗口对象中，有一个`navigator`属性。这个属性特别有趣，因为它包含了关于我们使用的浏览器的信息，比如它是哪个浏览器，我们使用的是哪个版本，以及浏览器运行在什么操作系统上。
- en: This can be handy for customizing the website for certain operating systems.
    Imagine a download button that will be different for Windows, Linux, and macOS.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于为某些操作系统定制网站很有用。想象一下，一个按钮在不同的操作系统（Windows、Linux和macOS）上会有不同的样子。
- en: 'You can explore it using this command in the console:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令在控制台中探索它：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you can see, we start with accessing the window, because `navigator` is
    an object of the `window` object. So it is a property of the `window` object,
    which we specify with the dot in between. In other words, we access these `window`
    objects in the same way we do any other object. But, in this case, as `navigator`
    is also globally available, we can also access this without `window` in front
    of it with this command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们首先访问的是窗口，因为`navigator`是`window`对象的一个对象。所以它是`window`对象的一个属性，我们用点号来指定。换句话说，我们以访问任何其他对象的方式访问这些`window`对象。但是，在这种情况下，由于`navigator`也是全局可用的，我们也可以使用这个命令在不带`window`前缀的情况下访问它：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here is what the `navigator` object might look like:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`navigator`对象可能的样子：
- en: '![](img/B16682_09_05.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B16682_09_05.png](img/B16682_09_05.png)'
- en: 'Figure 9.5: The navigator object'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5：`navigator`对象
- en: Window location object
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 窗口位置对象
- en: Another rather interesting and unique property of `window` is the `location`
    object. This contains the URL of the current web page. If you override (parts
    of) that property, you force the browser to go to a new page! How to do this exactly
    differs per browser, but the next exercise will guide you through this.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`window`对象的另一个相当有趣且独特的属性是`location`对象。它包含了当前网页的URL。如果你覆盖（部分）这个属性，你会强制浏览器跳转到新页面！具体如何操作因浏览器而异，但下一项练习将指导你完成这个过程。'
- en: 'The `location` object consists of a few properties. You can see them by using
    the command `console.dir(window.location)` or `console.dir(location)` in the console.
    Here is what the output will look like:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`location`对象包含一些属性。你可以在控制台中使用`console.dir(window.location)`或`console.dir(location)`来查看它们。输出将如下所示：'
- en: '![Graphical user interface, text, application'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![图形用户界面，文本，应用程序'
- en: Description automatically generated](img/B16682_09_06.png)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/B16682_09_06.png)
- en: 'Figure 9.6: The location object'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6：`location`对象
- en: 'There are many objects on the `location` object, just as with the others we
    have seen. We can access the nested objects and properties using dot notation
    (like for other objects we have seen). So, for example, in this browser I can
    enter the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`location`对象上有许多对象，就像我们之前看到的那些一样。我们可以使用点符号（就像我们之前看到的对象一样）来访问嵌套的对象和属性。所以，例如，在这个浏览器中，我可以输入以下内容：'
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will get the length of the `ancestorOrigins` object, which represents how
    many browsing contexts our page is associated with. This can be useful to determine
    whether the web page is framed in an unexpected context. Not all browsers have
    this object though; again, this BOM and all the elements of it vary per browser.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这将获取`ancestorOrigins`对象的长度，它表示我们的页面与多少个浏览上下文相关联。这可以用来确定网页是否在一个意外的上下文中被框架化。不过，并不是所有的浏览器都有这个对象；再次强调，BOM及其所有元素在每个浏览器中都是不同的。
- en: Follow the steps in the practice exercise to do such magic yourself.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 按照实践练习中的步骤，自己尝试这样的魔法。
- en: Practice exercise 9.2
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实践练习 9.2
- en: Travel through the `window` object to get to the `location` object, then output
    the values of the `protocol` and `href` properties of the current file, into the
    console.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `window` 对象遍历到 `location` 对象，然后输出当前文件的 `protocol` 和 `href` 属性的值到控制台。
- en: The DOM
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM
- en: The DOM is actually not very complicated to understand. It is a way of displaying
    the structure of an HTML document as a logical tree. This is possible because
    of the very important rule that inner elements need to be closed before outer
    elements get closed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: DOM 实际上并不复杂，理解起来。它是一种将 HTML 文档的结构以逻辑树的形式显示出来的方式。这是由于一个非常重要的规则，即内部元素必须在外部元素关闭之前关闭。
- en: 'Here is an HTML snippet:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个 HTML 片段：
- en: '[PRE16]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And here is how we can translate it to a tree:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将其转换为树形结构的方法：
- en: '![Graphical user interface, application, PowerPoint'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图形用户界面、应用程序、PowerPoint'
- en: Description automatically generated](img/B16682_09_07.png)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/B16682_09_07.png)
- en: 'Figure 9.7: Tree structure of the DOM of a very basic web page'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7：非常基本的网页 DOM 的树结构
- en: 'As you can see, the most outer element, **html**, is at the top of the tree.
    The next levels, **head** and **body**, are its children. **head** has only one
    child: **title**. **body** has two children: **h1** and **div**. And **div** has
    two children: **p** and **a**. These are typically used for paragraphs and links
    (or buttons). Clearly, complex web pages have complicated trees. This logical
    tree and a bunch of extra properties make up a web page''s DOM.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，最外层的元素 **html** 位于树的顶部。下一层 **head** 和 **body** 是它的子元素。**head** 只有一个子元素：**title**。**body**
    有两个子元素：**h1** 和 **div**。而 **div** 有两个子元素：**p** 和 **a**。这些通常用于段落和链接（或按钮）。显然，复杂的网页有复杂的树。这个逻辑树和一系列额外的属性构成了网页的
    DOM。
- en: The DOM of a real web page wouldn't fit on a page in this book. But if you can
    draw trees like these in your head, it will be of great help soon.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一个真实网页的 DOM 无法在这个书的页面上显示。但如果你能在脑海中画出这样的树，这将很快大有帮助。
- en: Additional DOM properties
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外的 DOM 属性
- en: 'We can inspect the DOM in a similar fashion as we did the others. We execute
    the following command in the console of our website (again, the `document` object
    is globally accessible, so accessing it through the `window` object is possible
    but not necessary):'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像检查其他对象一样检查 DOM。我们在网站的控制台中执行以下命令（再次强调，`document` 对象是全局可访问的，因此通过 `window`
    对象访问它是可能的，但不是必需的）：
- en: '[PRE17]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In this case, we want to see the `document` object, which represents the DOM:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们想查看代表 DOM 的 `document` 对象：
- en: '![Text'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '![文本'
- en: Description automatically generated](img/B16682_09_08.png)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/B16682_09_08.png)
- en: 'Figure 9.8: The DOM'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.8：DOM
- en: You really do not need to understand everything you are seeing here, but it
    is showing many things, among which are the HTML elements and JavaScript code.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你真的不需要理解你在这里看到的一切，但它显示了众多内容，其中包括 HTML 元素和 JavaScript 代码。
- en: Great, right now you have got the basics of the BOM down, and its child object
    that is most relevant to us right now, the DOM. We saw many properties of the
    DOM earlier already. For us, it is most relevant to look at the HTML elements
    in the DOM. The DOM contains all the HTML elements of a web page.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，现在你已经掌握了 BOM 的基础知识，以及与我们最相关的子对象 DOM。我们之前已经看到了 DOM 的许多属性。对我们来说，查看 DOM 中的
    HTML 元素最为相关。DOM 包含了网页上的所有 HTML 元素。
- en: These basics of DOM elements, combined with some knowledge of manipulating and
    exploring the DOM, will open up so many possibilities.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 DOM 元素的基本知识，结合一些操作和探索 DOM 的知识，将开启许多可能性。
- en: In the next chapter, we will focus on traversing the DOM, finding elements in
    the DOM, and manipulating the DOM. The code we will be writing there will really
    start to look like proper projects.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于遍历 DOM、在 DOM 中查找元素以及操作 DOM。我们将编写的代码将真正开始看起来像真正的项目。
- en: Selecting page elements
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择页面元素
- en: The `document` object contains many properties and methods. In order to work
    with elements on the page, you'll first have to find them. If you need to change
    the value of a certain paragraph, you'll have to grab this paragraph first. We
    call this selecting the paragraph. After selecting, we can start changing it.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`document` 对象包含许多属性和方法。为了在页面上处理元素，你首先必须找到它们。如果你需要更改某个段落的值，你必须先获取这个段落。我们称之为选择段落。选择之后，我们就可以开始修改它了。'
- en: To select page elements to use within your JavaScript code and in order to manipulate
    elements, you can use either the `querySelector()` or `querySelectorAll()` method.
    Both of these can be used to select page elements either by tag name, ID, or class.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的 JavaScript 代码中选择的页面元素以及为了操作元素，您可以使用 `querySelector()` 或 `querySelectorAll()`
    方法。这两个方法都可以用来通过标签名、ID 或类选择页面元素。
- en: The `document.querySelector()` method will return the first element within the
    document that matches the specified selectors. If no matching page elements are
    found, the result `null` is returned. To return multiple matching elements, you
    can use the method `document.querySelectorAll()`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`document.querySelector()` 方法将返回文档中第一个匹配指定选择器的元素。如果没有找到匹配的页面元素，则返回结果 `null`。要返回多个匹配元素，可以使用
    `document.querySelectorAll()` 方法。'
- en: 'The `querySelectorAll()` method will return a static `NodeList`, which represents
    a list of the document''s elements that match the specified group of selectors.
    We will demonstrate the usage of both `querySelector()` and `querySelectorAll()`
    with the following HTML snippet:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`querySelectorAll()` 方法将返回一个静态的 `NodeList`，它表示与指定选择器组匹配的文档元素列表。我们将通过以下 HTML
    片段演示 `querySelector()` 和 `querySelectorAll()` 的用法：'
- en: '[PRE18]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We are going to select the `h1` element with `querySelector()`. Therefore,
    if there is more than one, it will just grab the first:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `querySelector()` 选择 `h1` 元素。因此，如果有多个，它只会获取第一个：
- en: '[PRE19]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you want to select multiple elements, you can use `querySelectorAll()`. This
    method is going to return all the elements that match the selector in an array.
    In this example, we are going to look for instances of the `output` class, which
    is done by prepending the class name with a dot.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想选择多个元素，可以使用 `querySelectorAll()`。此方法将返回一个数组中匹配选择器的所有元素。在这个例子中，我们将查找 `output`
    类的实例，这是通过在类名前加一个点来完成的。
- en: '[PRE20]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After selecting, you can start using the dynamic features of the DOM: you can
    manipulate the elements using JavaScript. Content can be changed in the same way
    a variable''s contents can be, elements can be removed or added, and styles can
    be adjusted. This can all be done with JavaScript and the way the user interacts
    with the page can affect this. We have seen the two most common methods to select
    in the DOM here, `querySelector()` and `querySelectorAll()`. You can actually
    select any element you might need with these. There are lots more, which you''ll
    encounter in the next chapter, along with many of the ways the DOM can be manipulated.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 选择后，你可以开始使用 DOM 的动态特性：你可以使用 JavaScript 操作元素。内容可以像变量内容一样更改，元素可以被删除或添加，样式可以调整。所有这些都可以使用
    JavaScript 和用户与页面交互的方式来实现。我们已经在这里看到了 DOM 中两种最常见的选择方法，`querySelector()` 和 `querySelectorAll()`。实际上，你可以使用这些方法选择任何你可能需要的元素。还有更多，你将在下一章中遇到，以及许多
    DOM 可以被操作的方式。
- en: Practice exercise 9.3
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 9.3
- en: 'Select a page element and update the content, change the style, and add attributes.
    Create an HTML file containing a page element with a class of `output` using the
    following code template:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 选择页面元素并更新内容、更改样式和添加属性。使用以下代码模板创建一个包含具有 `output` 类的页面元素的 HTML 文件：
- en: '[PRE21]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Within the `script` tags, make the following changes to the output element:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `script` 标签内，对输出元素进行以下更改：
- en: Select the page element as a JavaScript object.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将页面元素作为 JavaScript 对象选择。
- en: Update the `textContent` property of the selected page element.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新所选页面元素的 `textContent` 属性。
- en: Using the `classList`.`add` object method, add a class of `red` to the element.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `classList`.`add` 对象方法，将 `red` 类添加到元素上。
- en: Update the `id` property of the element to `tester`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将元素的 `id` 属性更新为 `tester`。
- en: Through the `style` object, add a `backgroundColor` property of `red` to the
    page element.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 `style` 对象，将 `backgroundColor` 属性设置为 `red` 添加到页面元素上。
- en: Get the document URL via `document.URL` and update the text of the output element
    to contain the value of the document URL. You can log it in the console first
    to ensure you have the correct value.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 `document.URL` 获取文档 URL 并更新输出元素的文本，使其包含文档 URL 的值。您可以先在控制台中记录它，以确保您有正确的值。
- en: Chapter project
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节项目
- en: Manipulating HTML elements with JavaScript
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 JavaScript 操作 HTML 元素
- en: 'Take the HTML code below:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 HTML 代码示例：
- en: '[PRE22]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Take the following steps (and experiment further) to understand how HTML elements
    can be manipulated with JavaScript code.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 采取以下步骤（并进一步实验）来了解如何使用 JavaScript 代码操作 HTML 元素。
- en: Select the element with the class `output`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择具有 `output` 类的元素。
- en: Create another JavaScript object called `mainList` and select only the `ul`
    tag that is within the `output` element. Update the ID of that `ul` tag to `mainList`.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为 `mainList` 的 JavaScript 对象，并仅选择 `output` 元素内的 `ul` 标签。更新该 `ul` 标签的 ID
    为 `mainList`。
- en: Search for the `tagName` of each `div`, and output them into the console as
    an array.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索每个 `div` 的 `tagName`，并将它们作为数组输出到控制台。
- en: Using a `for` loop, set the ID of each of the `div` tags to `id` with a numeric
    value of the order they appear within output. Still within the loop, alternate
    the color of the contents of each element in `output` to be red or blue.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `for` 循环，将每个 `div` 标签的 ID 设置为 `id`，其数值表示它们在输出中的出现顺序。仍然在循环中，交替更改 `output`
    中每个元素的背景颜色为红色或蓝色。
- en: Self-check quiz
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自我检查测验
- en: Go to your favorite website and open the browser console. Type `document.body`.
    What do you see in the console?
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往你最喜欢的网站并打开浏览器控制台。输入 `document.body`。你在控制台中看到了什么？
- en: As we know, with objects, we can write to the property value and assign a new
    value with the assignment operator. Update the `textContent` property of the `document.body`
    object on a web page of your choosing to contain the string `Hello World`.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如我们所知，对于对象，我们可以使用赋值运算符写入属性值并分配新值。更新你选择的网页上 `document.body` 对象的 `textContent`
    属性，使其包含字符串 `Hello World`。
- en: Use what we learned about objects to list out BOM object properties and values.
    Try it on the `document` object.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们关于对象的知识来列出 BOM 对象的属性和值。尝试在 `document` 对象上操作。
- en: Now do the same for the `window` object.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在为 `window` 对象做同样的操作。
- en: Create an HTML file with an `h1` tag. Use JavaScript and select the page element
    with the `h1` tag and assign the element into a variable. Update the `textContent`
    property of the variable to `Hello World`.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含 `h1` 标签的 HTML 文件。使用 JavaScript 选择带有 `h1` 标签的页面元素，并将该元素赋值给一个变量。更新该变量的
    `textContent` 属性为 `Hello World`。
- en: Summary
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We started this chapter with the basics of HTML. We learned that HTML consists
    of elements and that these elements can contain other elements. Elements have
    a tag that specifies the type of element they are and they can have attributes
    that alter the element or add some metadata to the element. These attributes can
    be used by JavaScript.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 HTML 的基础知识开始本章。我们了解到 HTML 由元素组成，这些元素可以包含其他元素。元素有一个标签指定它们的类型，并且它们可以有属性来改变元素或向元素添加一些元数据。这些属性可以被
    JavaScript 使用。
- en: We then had a look at the BOM, which represents the window of the browser that
    is being used for the web page and contains other objects, such as the `history`,
    `location`, `navigator`, and `document` objects. The `document` object is referred
    to as the DOM, which is what you are most likely to be working with. The document
    contains the HTML elements of the web page.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们然后查看 BOM，它代表正在使用的浏览器窗口，并包含其他对象，如 `history`、`location`、`navigator` 和 `document`
    对象。`document` 对象被称为 DOM，你很可能会与之交互。文档包含网页的 HTML 元素。
- en: We also started to consider how we can select document elements and use these
    to manipulate the web page. This is what we'll continue exploring in the next
    chapter!
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还开始考虑如何选择文档元素并使用这些元素来操作网页。这是我们将在下一章继续探索的内容！
