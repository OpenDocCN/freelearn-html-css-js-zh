- en: Chapter 2. Improving Your Efficiency with Smart Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. 使用智能功能提高效率
- en: In the previous chapter, you embarked on the path of familiarizing yourself
    with the world of WebStorm. You have not just learned about a couple of basic
    things, but also created a simple project using several features so you now have
    the first-hand elementary experience of using WebStorm, and now it is time to
    go further and cultivate your skills.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您开始了熟悉WebStorm世界的旅程。您不仅了解了一些基本的东西，而且还使用几个功能创建了一个简单的项目，因此您现在有了使用WebStorm的第一手基本经验，现在是时候更进一步，培养您的技能了。
- en: 'In this chapter, we are going to deal with a number of really smart features
    that will enable you to fundamentally change your approach to web development
    and learn how to gain maximum benefit from WebStorm. We are going to study the
    following in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将处理一些真正智能的功能，这些功能将使您能够从根本上改变您对Web开发的看法，并学习如何从WebStorm中获得最大收益。在本章中，我们将研究以下内容：
- en: Syntax highlighting
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法高亮
- en: On-the-fly code analysis
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 飞行中的代码分析
- en: Smart code features
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能代码功能
- en: Multiselect feature
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多选功能
- en: Refactoring facility
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构功能
- en: Advanced navigation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级导航
- en: Syntax highlighting
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语法高亮
- en: 'Syntax highlighting facility is one of the core things that any code editor
    must be great at, because even a dozen of uncolored lines of code may be confusing
    and even irritating. Further, you can see how WebStorm performs the highlighting:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 语法高亮功能是任何代码编辑器必须擅长的一项核心功能，因为即使是十几行未着色的代码也可能令人困惑，甚至令人烦恼。此外，您可以看到WebStorm如何执行高亮显示：
- en: '![Syntax highlighting](img/00020.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![语法高亮](img/00020.jpeg)'
- en: WebStorm not only neatly highlights the code, but also provides you with a bunch
    of flexible settings for doing this. It means that you are able to customize each
    particle of the code appearance completely up to your preferences. You are enabled
    to customize highlighting for JavaScript and CoffeeScript and TypeScript, CSS
    and SASS/SCSS, JSON and XML and YAML, and so on.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: WebStorm不仅整洁地突出显示代码，还提供了一组灵活的设置来做到这一点。这意味着您能够完全根据您的偏好自定义代码外观的每一个细节。您能够自定义JavaScript、CoffeeScript和TypeScript、CSS和SASS/SCSS、JSON和XML和YAML等的突出显示。
- en: 'To configure syntax highlighting, open the **Preferences** window, then go
    to the **Colors & Fonts** subsection of the **Editor** section, and choose the
    language or technology for customizing its code styling:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置语法高亮，请打开**首选项**窗口，然后转到**编辑器**部分的**颜色与字体**子部分，并选择要自定义其代码样式的语言或技术：
- en: '![Syntax highlighting](img/00021.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![语法高亮](img/00021.jpeg)'
- en: For each code unit—keywords, tags, numbers and words, comments, punctuation
    signs, variable and function declarations—you can change its appearance—bold or
    italic, the color of the foreground and background, font effects, and much more.
    Below the configuration panel, you can find a preview panel where you can observe
    all the changes you performed in real time. Besides, if you know what code unit
    you would like to customize but don't know what it is called, you can simply click
    on any sign or word of the code in the preview panel, and it will be automatically
    chosen in the list of code unit names, as well as all occurrences of the same
    type of unit get to blink so you can see what you are choosing.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个代码单元——关键词、标签、数字和单词、注释、标点符号、变量和函数声明——您都可以更改其外观——粗体或斜体，前景和背景颜色，字体效果等等。在配置面板下方，您可以找到一个预览面板，您可以在其中实时观察您所做的所有更改。此外，如果您知道您想自定义的代码单元是什么，但不知道它的名称，您只需在预览面板中单击任何符号或单词，它就会自动在选择代码单元名称的列表中选中，以及相同类型的所有单元都会闪烁，这样您就可以看到您选择了什么。
- en: After customizing, you can save all settings as a new scheme so that the settings
    can be applied for further projects, as well as this one. To do this, you can
    simply click the **Save As...** button above the settings, and name this new code
    style scheme.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义后，您可以保存所有设置为新方案，以便这些设置可以应用于未来的项目，以及这个项目。为此，您只需单击设置上方的**另存为...**按钮，并为这个新的代码样式方案命名。
- en: WebStorm is also able to detect the language you are using in specific contexts
    and will highlight the code accordingly. So, for example, if you are writing JavaScript
    code inside an HTML file, WebStorm will be able to detect this and highlight your
    code correctly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: WebStorm还能够检测您在特定上下文中使用的语言，并相应地突出显示代码。例如，如果您在HTML文件中编写JavaScript代码，WebStorm将能够检测到这一点并正确地突出显示您的代码。
- en: On-the-fly code analysis
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 飞行中的代码分析
- en: WebStorm will perform static code analysis on your code on the fly. The editor
    will check the code, based on the language used, and the rules you specify and
    highlight warnings and errors as you type. This is a very powerful feature that
    means you don't need to have an external linter and will catch most errors quickly,
    thus making a dynamic and complex language like JavaScript more predictable and
    easy to use.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: WebStorm 将在代码即时执行静态代码分析。编辑器将根据使用的语言和指定的规则检查代码，并在你输入时突出显示警告和错误。这是一个非常强大的功能，意味着你不需要外部代码检查器，并且可以快速捕获大多数错误，从而使像
    JavaScript 这样的动态和复杂语言更加可预测和易于使用。
- en: 'Runtime error and any other error, such as syntax or performance, are two things
    to consider. To investigate the first one, you need tests or a debugger, and it
    is obvious that they have almost nothing in common with the IDE itself (although,
    when these facilities are integrated into the IDE, such a synergy is better, but
    that is not it). You can also examine the second type of errors the same way,
    but is it convenient? Just imagine that you need to run tests after writing the
    next line of code. It is no go! Won''t it be more efficient and helpful to use
    something that keeps an eye on and analyzes each word being typed in order to
    notify you about probable performance issues and bugs, code style and workflow
    issues, various validation issues, warn of dead code and other likely execution
    issues before executing the code, to say nothing of reporting inadvertent misprints.
    WebStorm is the best fit for it. It performs a deep-level analysis of each line,
    each word in the code. Moreover, you needn''t break off your developing process
    when WebStorm scans your code; it is performed on the fly and thus so called:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时错误和任何其他错误，如语法或性能，是两个需要考虑的因素。要调查第一个，你需要测试或调试器，而且很明显，它们几乎与 IDE 本身没有什么共同之处（尽管，当这些功能集成到
    IDE 中时，这种协同作用会更好，但这不是重点）。你也可以用同样的方式检查第二种类型的错误，但这方便吗？想象一下，你需要在写下下一行代码后运行测试。这行不通！使用某种能够关注并分析每个输入的单词，以便在执行代码之前通知你可能的性能问题和错误、代码风格和工作流程问题、各种验证问题、警告死代码和其他可能的执行问题，不是更有效率和有帮助吗？WebStorm
    是最适合这项工作的。它对代码的每一行、每个单词进行深度分析。此外，你不需要在 WebStorm 扫描你的代码时打断你的开发过程；这是即时进行的，因此被称为：
- en: '![On-the-fly code analysis](img/00022.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![即时代码分析](img/00022.jpeg)'
- en: 'WebStorm also enables you to get a full inspection report on demand. To get
    it, go to the menu: **Code** | **Inspect Code**. It pops up the **Specify Inspection
    Scope** dialog where you can define what exactly you would like to inspect, and
    click **OK**. Depending on what is selected and of what size, you need to wait
    a little for the process to finish, and you will see the detailed results where
    the Terminal window is located:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: WebStorm 还允许你按需获取完整的检查报告。要获取它，请转到菜单：**代码** | **检查代码**。它会弹出**指定检查范围**对话框，你可以定义你想要检查的确切内容，然后点击**确定**。根据所选内容和大小，你可能需要等待一段时间，直到进程完成，你将看到详细的结果，其中终端窗口位于：
- en: '![On-the-fly code analysis](img/00023.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![即时代码分析](img/00023.jpeg)'
- en: You can expand all the items, if needed. To the right of this inspection result
    list you can see an explanation window. To jump to the erroneous code lines, you
    can simply click on the necessary item, and you will flip into the corresponding
    line.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，你可以展开所有项目。在检查结果列表的右侧，你可以看到一个解释窗口。要跳转到有错误的代码行，你只需点击必要的项目，然后你会翻转到相应的行。
- en: 'Besides simple indicating where some issue is located, WebStorm also unequivocally
    suggests the ways to eliminate this issue. And you needn''t even make any changes
    yourself—WebStorm already has quick solutions, which you need just to click on,
    and they will be instantly inserted into the code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除了简单地指示某个问题所在的位置，WebStorm 还明确地建议了消除这个问题的方法。你甚至不需要自己做出任何更改——WebStorm 已经提供了快速解决方案，你只需点击即可，它们将立即插入到代码中：
- en: '![On-the-fly code analysis](img/00024.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![即时代码分析](img/00024.jpeg)'
- en: We will go more into the details of code analysis and quality in [Chapter 7](part0048_split_000.html#1DOR01-0c7cc7dc97984506a3b137496d3ab1d6
    "Chapter 7. Analyzing and Debugging Your Code"), *Analyzing and Debugging Your
    Code*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第7章](part0048_split_000.html#1DOR01-0c7cc7dc97984506a3b137496d3ab1d6 "第7章。分析和调试你的代码")中更深入地探讨代码分析和质量，*分析和调试你的代码*。
- en: Smart code features
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能代码功能
- en: Being an **Integrated Development Environment** (**IDE**) and tending to be
    intelligent, WebStorm provides a really powerful pack of features which you can
    use to strongly improve your efficiency and save a lot of time.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一款**集成开发环境**（**IDE**）并且倾向于智能，WebStorm提供了一组非常强大的功能，您可以使用这些功能显著提高效率并节省大量时间。
- en: 'One of the most useful and hot features is code completion. WebStorm continually
    analyzes and processes the code of the whole project, and smartly suggests the
    pieces of code appropriate in the current context, and even more—alongside the
    method names you can find the usage of these methods. Of course, code completion
    itself is not a fresh innovation, but WebStorm performs it in a much smarter way
    than other IDEs do. WebStorm can auto-complete a lot things: Class and function
    names, keywords and parameters, types and properties, punctuation, and even file
    paths.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最有用且热门的功能之一是代码补全。WebStorm持续分析并处理整个项目的代码，并智能地建议当前上下文中适当的代码片段，甚至更多——在方法名称旁边，您还可以找到这些方法的用法。当然，代码补全本身并不是一项新鲜的创新，但WebStorm在执行它时比其他IDE更智能。WebStorm可以自动完成许多事情：类和函数名称、关键字和参数、类型和属性、标点符号，甚至文件路径。
- en: 'By default, the code completion facility is on. To invoke it, simply start
    typing some code. For example, in the following image you can see how WebStorm
    suggests object methods:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，代码补全功能是开启的。要调用它，只需开始输入一些代码。例如，在下面的图像中，您可以看到WebStorm如何建议对象方法：
- en: '![Smart code features](img/00025.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![智能代码功能](img/00025.jpeg)'
- en: 'You can navigate through the list of suggestions using your mouse or the *Up*
    and *Down* arrow keys. However, the list can be very long, which makes it not
    very convenient to browse. To reduce it and retain only the things appropriate
    in the current context, keep on typing the next letters. Besides typing only initial
    consecutive letter of the method, you can either type something from the middle
    of the method name, or even use the CamelCase style, which is usually the quickest
    way of typing really long method names:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用鼠标或*上*和*下*箭头键在建议列表中导航。然而，列表可能非常长，这使得浏览起来不太方便。为了减少列表长度并仅保留当前上下文中适当的内容，请继续输入下一个字母。除了仅输入方法的初始连续字母外，您还可以从方法名称的中间输入某些内容，或者甚至使用驼峰式风格，这通常是输入真正长方法名称最快的方式：
- en: '![Smart code features](img/00026.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![智能代码功能](img/00026.jpeg)'
- en: It may turn out for some reason that the code completion isn't working automatically.
    To manually invoke it, press *Ctrl* + *Space* on Mac or *Ctrl* + *Space* on Windows.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于某种原因，代码补全可能无法自动工作。要手动调用它，请按Mac上的*Ctrl* + *Space*或Windows上的*Ctrl* + *Space*。
- en: To insert the suggested method, press *Enter*; to replace the string next to
    the current cursor position with the suggested method, press *Tab*. If you want
    the facility to also arrange correct syntactic surroundings for the method, press
    *Shift* + *⌘* + *Enter* on Mac or *Ctrl* + *Shift* + *Enter* on Windows, and missing
    brackets and/or new lines will be inserted, up to the styling standards of the
    current language of the code.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要插入建议的方法，按*Enter*键；要将当前光标位置旁边的字符串替换为建议的方法，按*Tab*键。如果您希望该功能还能为该方法安排正确的语法环境，请按Mac上的*Shift*
    + *⌘* + *Enter*或Windows上的*Ctrl* + *Shift* + *Enter*，将插入缺失的括号和/或新行，直到达到当前代码语言的样式标准。
- en: The multiselect feature
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多选功能
- en: 'With the multiple selection (or simply multiselect) feature, you can place
    the cursor in several locations simultaneously, and when you will type the code
    it will be applied at all these positions. For example, you need to add different
    background colors for each table cell, and then make them of twenty-pixel width.
    In this case, you don''t need to perform these identical tasks repeatedly and
    can save a lot of time by placing the cursor after the `<td>` tag, press *Alt*,
    and put the cursor in each `<td>` tag, which you are going to apply styling to:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多选（或简称为多选）功能，您可以同时将光标放置在几个位置，当您输入代码时，它将应用于所有这些位置。例如，您需要为每个表格单元格添加不同的背景颜色，然后使它们的宽度为二十像素。在这种情况下，您不需要重复执行这些相同的任务，只需在`<td>`标签后放置光标，按*Alt*键，并将光标放入您打算应用样式的每个`<td>`标签：
- en: '![The multiselect feature](img/00027.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![多选功能](img/00027.jpeg)'
- en: 'Now you can start typing the necessary attribute—it is `bgcolor`. Note that
    WebStorm performs smart code completion here too, independently of you typing
    something on a single line or not. You get empty values for `bgcolor` attributes,
    and you fill them out individually a bit later. You need also to change the width
    so you can continue typing. As cell widths are arranged to be fixed-sized, simply
    add the value for `width` attributes as well. An example is shown in the following
    image:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以开始输入必要的属性了——它是`bgcolor`。请注意，WebStorm即使在您没有在单行输入任何内容的情况下，也会在这里执行智能代码补全。您会得到`bgcolor`属性的空值，稍后您将单独填写它们。您还需要更改宽度，以便继续输入。由于单元格宽度被设置为固定大小，因此只需添加`width`属性的值即可。以下图像显示了示例：
- en: '![The multiselect feature](img/00028.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![多选功能](img/00028.jpeg)'
- en: 'Moreover, the multiselect feature can select identical values or just words
    independently, that is, you needn''t place the cursor in multiple locations. Let
    us look at this feature by using another example. Say, you changed your mind and
    decided to colorize not backgrounds but borders of several consecutive cells.
    You may instantly think of using a simple replace feature but you needn''t replace
    all attribute occurrences, only several consecutive ones. For doing this, you
    can place the cursor on the first attribute, which you are going to perform changes
    from, and click *Ctrl* + *G* on Mac or *Alt* + *J* on Windows as many times as
    you need. One by one the same attributes will be selected, and you can replace
    the `bgcolor` attribute for the `bordercolor` one:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，多选功能可以选择相同值或独立单词，也就是说，您不需要将光标放在多个位置。让我们通过另一个示例来查看这个功能。比如说，您改变了主意，决定将几个连续单元格的背景色改为边框色。您可能会立刻想到使用简单的替换功能，但您不需要替换所有属性出现，只需几个连续的即可。为此，您可以将光标放在您将要执行更改的第一个属性上，然后在Mac上多次点击*Ctrl*
    + *G*或在Windows上点击*Alt* + *J*，直到您需要。一个接一个地，相同的属性将被选中，您可以将`bgcolor`属性替换为`bordercolor`：
- en: '![The multiselect feature](img/00029.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![多选功能](img/00029.jpeg)'
- en: You can also select all occurrences of any word by clicking *Ctrl* + *command*
    + *G* on Mac or *Ctrl* + *Alt* + *Shift* + *J*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过在Mac上点击*Ctrl* + *command* + *G*或在Windows上点击*Ctrl* + *Alt* + *Shift* +
    *J*来选择任何单词的所有出现。
- en: To get out of the multiselect mode you have to click in a different position
    or use the *Esc* key.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出多选模式，您必须点击不同的位置或使用*Esc*键。
- en: Refactoring facility
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构功能
- en: Throughout the development process, it is almost unavoidable that you have to
    use refactoring. Also, the bigger code base you have, the more difficult it becomes
    to control the code, and when you need to refactor some code, you will most likely
    be up against some issues relating to, for example, naming omission or not taking
    into consideration function usage. You learned that WebStorm performs a thorough
    code analysis so it understands what is connected with what and, if some changes
    occur, it collates them and decides what is acceptable, and what is not to perform
    in the rest of the code. Let us try a simple example.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个开发过程中，您几乎不可避免地需要使用重构。而且，您的代码库越大，控制代码就越困难。当您需要重构某些代码时，您很可能会遇到一些问题，例如命名遗漏或没有考虑到函数的使用。您已经了解到WebStorm执行彻底的代码分析，因此它理解什么与什么相关联，如果发生某些变化，它会收集它们并决定在其余代码中可以执行什么，不可以执行什么。让我们尝试一个简单的例子。
- en: 'In a big HTML file you have the following line:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个大的HTML文件中，您有以下的行：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And in a big JavaScript file you have another one:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个大的JavaScript文件中，您还有另一个：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You decided to rename the `id` attribute's value of the input element to `search_field`
    because it is less confusing. You could simply rename it here but after that you
    would have to manually find all the occurrences of the word `search` in the code.
    It is evident that the word is rather frequent so you would spend a lot of time
    recognizing usage cases appropriate in the current context or not. And there is
    a high probability that you would forget something important, and even more time
    will be spent on investigating an issue. Instead, you can entrust WebStorm with
    this task. Select the code unit to refactor (in our case, it is the `search` value
    of the `id` attribute), and click *Ctrl* + *T* on Mac or *Ctrl* + *Alt* + *Shift*
    + *T* on Windows (or simply click the **Refactor** menu item) to call the **Refactor
    This** dialog. There, choose the **Rename…** item and enter the new name for the
    selected code unit (`search_field` in our case). To get only a preview of what
    will happen during the refactoring process, click the **Preview** button, and
    all the changes to apply will be displayed in the bottom. You can walk through
    the hierarchical tree and either apply the change by clicking the **Do Refactor**
    button, or not. If you need a preview, you can simply click the **Refactor** button.
    What you will see is that the `id` attribute got the `search_field` value, not
    the type or placeholder values, even if they have the same value, and in the JavaScript
    file you got `getElementById('search_field')`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你决定将输入元素的`id`属性值重命名为`search_field`，因为它更不容易引起混淆。你可以在这里简单地重命名它，但之后你将不得不手动查找代码中所有`search`单词的出现。很明显，这个单词相当常见，所以你将花费大量时间识别当前上下文中合适的用法或不合适的用法。而且，你很可能忘记一些重要的事情，甚至还需要更多时间来调查问题。相反，你可以将这个任务委托给WebStorm。选择要重构的代码单元（在我们的例子中，是`id`属性的`search`值），然后在Mac上点击*Ctrl*
    + *T*或在Windows上点击*Ctrl* + *Alt* + *Shift* + *T*（或者简单地点击**重构**菜单项）来调用**重构此**对话框。在那里，选择**重命名…**项，并输入所选代码单元的新名称（在我们的例子中是`search_field`）。要仅预览重构过程中将发生的事情，请点击**预览**按钮，所有要应用的变化将显示在底部。你可以遍历层次树，通过点击**执行重构**按钮应用更改，或者不应用。如果你需要预览，可以简单地点击**重构**按钮。你将看到`id`属性得到了`search_field`值，而不是类型或占位符值，即使它们具有相同的值，在JavaScript文件中你也得到了`getElementById('search_field')`。
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that even though WebStorm can perform various smart tasks, it still remains
    a program, and some issues can be caused by so-called artificial intelligence
    imperfection, so you should always be careful when performing the refactoring.
    In particular, manually check the `var` declarations because WebStorm sometimes
    can apply the changes to them as well, but it is not always necessary because
    of the scope.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，尽管WebStorm可以执行各种智能任务，但它仍然是一个程序，并且所谓的“人工智能不完善”可能会引起一些问题，因此在执行重构时你应该始终保持谨慎。特别是，手动检查`var`声明，因为WebStorm有时也会将这些更改应用到它们上，但由于作用域的原因，这并不总是必要的。
- en: 'Of course, this is just a little of what you are enabled to perform with refactoring.
    The basic things that the refactoring facility allows you to do are as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这仅仅是你通过重构能够实现的一小部分功能。重构功能允许你执行的基本操作如下：
- en: '![Refactoring facility](img/00030.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![重构功能](img/00030.jpeg)'
- en: 'The elements in the preceding screenshot are explained as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图中的元素解释如下：
- en: '**Rename…**: You have already got familiar with this refactoring. Once again,
    with it you can rename code units, and WebStorm automatically will fix all references
    of them in the code. The shortcut is *Shift* + *F6*.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重命名…**：你已经熟悉了这种重构。再次强调，使用它你可以重命名代码单元，WebStorm会自动修复代码中所有对这些代码单元的引用。快捷键是*Shift*
    + *F6*。'
- en: '**Change Signature…**: This feature is used for changing function names, and
    adding/removing, reordering, or renaming function parameters, that is, changing
    the function signature. The shortcut is *⌘* + *F6* for Mac and *Ctrl* + *F6* for
    Windows.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更改签名…**：此功能用于更改函数名称，以及添加/删除、重新排序或重命名函数参数，即更改函数签名。快捷键是Mac上的*⌘* + *F6*，Windows上的*Ctrl*
    + *F6*。'
- en: '**Move…**: This feature enables you to move files or directories within a project,
    and it simultaneously repairs all references to these project elements in the
    code so you needn''t manually repair them. The shortcut is *F6*.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动…**：此功能使你能够在项目中移动文件或目录，并且它同时修复代码中对这些项目元素的引用，因此你不需要手动修复它们。快捷键是*F6*。'
- en: '**Copy…**: With this feature, you can copy a file or directory or even a class,
    with its structure, from one place to another. The shortcut is *F5*.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复制…**：使用此功能，您可以复制文件、目录或甚至一个类及其结构，从一个地方复制到另一个地方。快捷键是*F5*。'
- en: '**Safe Delete…**: This feature is really helpful. It allows you to safely delete
    any code or entire files from the project. When performing this refactoring, you
    will be asked about whether it is necessary to inspect comments and strings or
    all text files for the occurrence of the required piece of code or not. The shortcut
    is *⌘* + *delete* for Mac and *Alt* + *Delete* for Windows.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全删除…**：这个功能非常有用。它允许你安全地从项目中删除任何代码或整个文件。在执行此重构时，你会被问及是否需要检查注释和字符串或所有文本文件中所需代码片段的出现。快捷键是Mac上的*⌘*
    + *delete*，Windows上的*Alt* + *Delete*。'
- en: '**Variable…**: This refactoring feature declares a new variable where the result
    of the selected statement or expression is put. It can be useful when you realize
    there are too many occurrences of a certain expression so it can be turned into
    a variable, and the expression can just initialize it. The shortcut is *Alt* +*⌘*
    + *V* for Mac and *Ctrl* + *Alt* + *V* for Windows.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量…**：此重构功能在所选语句或表达式的结果处声明一个新变量。当意识到某个表达式的出现次数太多，可以将其转换为变量，并且表达式可以初始化它时，这可能很有用。快捷键是Mac上的*Alt*
    + *⌘* + *V*，Windows上的*Ctrl* + *Alt* + *V*。'
- en: '**Parameter…**: When you need to add a new parameter to some method and appropriately
    update its calls, use this feature. The shortcut is *Alt* + *⌘* + *P* for Mac
    and *Ctrl* + *Alt* + *P* for Windows.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数…**：当你需要向某个方法添加新参数并适当地更新其调用时，使用此功能。快捷键是Mac上的*Alt* + *⌘* + *P*，Windows上的*Ctrl*
    + *Alt* + *P*。'
- en: '**Method…**: During this refactoring, the code block you selected undergoes
    analysis, through which the input and output variables get detected, and the extracted
    function receives the output variable as a return value. The shortcut is *Alt*
    + *⌘* + *M* for Mac and *Ctrl* + *Alt* + *M* for Windows.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法…**：在此重构过程中，所选代码块经过分析，通过分析检测到输入和输出变量，提取的函数将输出变量作为返回值。快捷键是Mac上的*Alt* + *⌘*
    + *M*，Windows上的*Ctrl* + *Alt* + *M*。'
- en: '**Inline…**: The inline refactoring works contrariwise to the extract method
    refactoring—it replaces surplus variables with their initializers making the code
    more compact and concise. The shortcut is *Alt* + *⌘* + *N* for Mac and *Ctrl*
    + *Alt* + *N* for Windows.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内联…**：内联重构与提取方法重构相反——它用它们的初始化器替换多余的变量，使代码更加紧凑和简洁。快捷键是Mac上的*Alt* + *⌘* + *N*，Windows上的*Ctrl*
    + *Alt* + *N*。'
- en: Advanced navigation
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级导航
- en: Navigation is one of the most important things in any IDE because if you cannot
    quickly find or switch over to whatever you want, there is little reason to use
    such a program, as there is no time saving aspect.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 导航是任何IDE中最重要的功能之一，因为如果你不能快速找到或切换到你想要的任何东西，那么使用这样的程序几乎没有理由，因为没有节省时间的方面。
- en: Partially, we examined some navigation features WebStorm provides. They are
    the menu panel, the navigation toolbar, and tool tabs. It is all great but we
    still need to perform a lot of mouse movements to reach the necessary place in
    the code. We are going to see how WebStorm can help us working with code by going
    through some of these power navigation tools. We are going to go through them
    based on what type of action they can help us perform.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在一定程度上，我们检查了WebStorm提供的某些导航功能。它们是菜单面板、导航工具栏和工具标签。一切都很好，但我们仍然需要执行很多鼠标移动才能到达代码中的必要位置。我们将通过一些这些强大的导航工具来查看WebStorm如何帮助我们与代码一起工作。我们将根据它们可以帮助我们执行的动作类型来查看它们。
- en: File navigations
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件导航
- en: 'This are a set of shortcuts that help us work efficiently with files:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一组快捷键，帮助我们高效地处理文件：
- en: To navigate to a file in the project, press *Shift* + *⌘* + *O* on Mac or *Ctrl*
    + *Shift* + *N* on Windows.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要导航到项目中的文件，在Mac上按*Shift* + *⌘* + *O*，在Windows上按*Ctrl* + *Shift* + *N*。
- en: To navigate between the files opened in the editor, press *Ctrl* + *Tab* on
    Mac or *Alt* + *Tab* on Windows.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在编辑器中打开的文件之间导航，在Mac上按*Ctrl* + *Tab*，在Windows上按*Alt* + *Tab*。
- en: To see what files were last opened, press *⌘* + *E* on Mac or *Ctrl* + *E* on
    Windows. To see what files were recently updated, press *Shift* + *⌘* + *E* on
    Mac or *Ctrl* + *Shift* + *E* on Windows.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查看最近打开的文件，在Mac上按*⌘* + *E*，在Windows上按*Ctrl* + *E*。要查看最近更新的文件，在Mac上按*Shift* +
    *⌘* + *E*，在Windows上按*Ctrl* + *Shift* + *E*。
- en: To navigate to a class in the project, press *⌘* + *O* on Mac or *Ctrl* + *N*
    on Windows.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要导航到项目中的类，在Mac上按*⌘* + *O*，在Windows上按*Ctrl* + *N*。
- en: Code navigations
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码导航
- en: 'These shortcuts are designed to help us to navigate and quickly perform tasks
    on our source code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些快捷键旨在帮助我们导航并在源代码上快速执行任务：
- en: To pop up a structure view of the file, press *⌘* + *F12* on Mac or *Ctrl* +
    *F12* on Windows.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要弹出文件的结构视图，请按 Mac 上的 *⌘* + *F12* 或 Windows 上的 *Ctrl* + *F12*。
- en: To get hierarchy for the selected class, press *Ctrl* + *H* on Mac or *Ctrl*
    + *H* on Windows.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取所选类的层次结构，请按 Mac 上的 *Ctrl* + *H* 或 Windows 上的 *Ctrl* + *H*。
- en: To navigate to a declaration in the project, press *⌘* + *B* on Mac or *Ctrl*
    + *B* on Windows.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要导航到项目中的声明，请按 Mac 上的 *⌘* + *B* 或 Windows 上的 *Ctrl* + *B*。
- en: To navigate to the next method, press *⌘* + *O* on Mac or *Alt* + *Down* arrow
    key on Windows. To navigate to the previous method, press *⌘* + *O* on Mac or
    *Alt* + *Up* arrow key on Windows.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要导航到下一个方法，请按 Mac 上的 *⌘* + *O* 或 Windows 上的 *Alt* + 向下箭头键。要导航到上一个方法，请按 Mac 上的
    *⌘* + *O* 或 Windows 上的 *Alt* + 向上箭头键。
- en: If you need to duplicate the current line, press *Ctrl* + *D* on Mac or *Alt*
    + *D* on Windows.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您需要复制当前行，请按 Mac 上的 *Ctrl* + *D* 或 Windows 上的 *Alt* + *D*。
- en: If you need to comment/uncomment the line, press *⌘* + */* on Mac or *Ctrl*
    + */* on Windows.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您需要注释/取消注释行，请按 Mac 上的 *⌘* + */* 或 Windows 上的 *Ctrl* + */*。
- en: If you need to move the line to another place in the code, press *Shift* + *⌘*
    + *Down*/*Up* on Mac or *Ctrl* + *Shift* + *Down*/*Up* on Windows. It will also
    preserve syntactical correctness when moving.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您需要将行移动到代码中的另一个位置，请按 Mac 上的 *Shift* + *⌘* + 向下/向上箭头或 Windows 上的 *Ctrl* + *Shift*
    + 向下/向上箭头。移动时也会保持语法正确性。
- en: Search navigations
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索导航
- en: 'We can use the search navigations to quickly find what we need in our project:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用搜索导航快速找到项目中所需的内容：
- en: To find something in path, press *Shift* + *⌘* + *F* on Mac or *Ctrl* + *Shift*
    + *F* on Windows. To replace something in path, press *Shift* + *⌘* + *R* on Mac
    or *Ctrl* + *Shift* + *R* on Windows.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在路径中查找内容，请按 Mac 上的 *Shift* + *⌘* + *F* 或 Windows 上的 *Ctrl* + *Shift* + *F*。要在路径中替换内容，请按
    Mac 上的 *Shift* + *⌘* + *R* 或 Windows 上的 *Ctrl* + *Shift* + *R*。
- en: To find all usages of the selected piece of code, press *Alt* + *F7*. To find
    the usages of the selected piece of code only in the current file, press *⌘* +
    *F7* on Mac or *Ctrl* + *F7* on Windows.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查找所选代码片段的所有用法，请按 *Alt* + *F7*。要查找当前文件中选定代码片段的用法，请按 Mac 上的 *⌘* + *F7* 或 Windows
    上的 *Ctrl* + *F7*。
- en: To open the last used tool window, press *F12*. To close the currently active
    tool window, press *Shift* + *Esc*.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要打开最后使用的工具窗口，请按 *F12*。要关闭当前活动的工具窗口，请按 *Shift* + *Esc*。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To get more information about shortcuts read the online documentation: [https://www.jetbrains.com/webstorm/help/keyboard-shortcuts-and-mouse-reference.html](https://www.jetbrains.com/webstorm/help/keyboard-shortcuts-and-mouse-reference.html).'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关快捷键的更多信息，请阅读在线文档：[https://www.jetbrains.com/webstorm/help/keyboard-shortcuts-and-mouse-reference.html](https://www.jetbrains.com/webstorm/help/keyboard-shortcuts-and-mouse-reference.html).
- en: Tip
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 购买的所有 Packt 书籍的账户中下载示例代码文件。如果您在其他地方购买了这本书，您可以访问
    [http://www.packtpub.com/support](http://www.packtpub.com/support) 并注册以将文件直接通过电子邮件发送给您。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the most distinctive features of WebStorm,
    which are the core constituents of improving your efficiency in building web applications.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了 WebStorm 的最显著特点，这些特点是提高您构建 Web 应用程序效率的核心组成部分。
- en: In the next chapter we are going to see how we can build simple web pages with
    the help of project templates and work with VCS and file watchers.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何借助项目模板构建简单的网页，并使用版本控制系统（VCS）和文件监视器。
