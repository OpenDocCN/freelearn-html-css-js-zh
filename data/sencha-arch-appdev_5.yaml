- en: Chapter 5. Working with Resources
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用资源
- en: 'In this chapter we will learn how to use the Resources toolbox and the Resources
    package from the project inspector. So in this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用项目检查器中的资源工具箱和资源包。因此，在本章中，我们将涵盖：
- en: Changing the Ext JS and Sencha Touch SDK path
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改Ext JS和Sencha Touch SDK路径
- en: The debugging mode and the production mode
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试模式和发布模式
- en: Creating new CSS files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的CSS文件
- en: Working with Google Maps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Google Maps
- en: Working with theme files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用主题文件
- en: Working with additional JavaScript files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用额外的JavaScript文件
- en: The Library resource
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 库资源
- en: When we create a Sencha Touch or Ext JS project on Sencha Architect, we will
    be able to see a Resources package with a Library resource inside it. Depending
    on the version of the SDK you use to create the project, the options can be a
    little bit different.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在Sencha Architect上创建Sencha Touch或Ext JS项目时，我们将能够看到一个包含库资源的资源包。根据我们用于创建项目的SDK版本，选项可能会有所不同。
- en: 'For example, if we create an Ext JS 4.1 project, we will have the default **Library**
    options such as **Debug**, **Include CSS**, **Include** **JavaScript**, and **Library**
    **Base** **Path**. When we create an Ext JS 4.2 project, we will see all the options
    already mentioned plus the **theme** property as demonstrated by the following
    screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们创建一个Ext JS 4.1项目，我们将有默认的**库**选项，例如**调试**、**包含CSS**、**包含** **JavaScript**和**库**
    **基本** **路径**。当我们创建一个Ext JS 4.2项目时，我们将看到所有已提到的选项，以及如以下截图所示的主题属性：
- en: '![The Library resource](img/9819OS_05_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![库资源](img/9819OS_05_01.jpg)'
- en: 'The same thing happens with Sencha Touch 2.1 projects and Sencha Touch 2.2
    projects:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，Sencha Touch 2.1项目和Sencha Touch 2.2项目也会发生相同的情况：
- en: '![The Library resource](img/9819OS_05_02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![库资源](img/9819OS_05_02.jpg)'
- en: This is because Sencha added the capability to change the themes for Sencha
    Touch 2.2 and later and Ext JS 4.2 and later versions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为Sencha为Sencha Touch 2.2及以后版本和Ext JS 4.2及以后版本增加了更改主题的功能。
- en: So what does each option mean (**Debug**, **Include CSS**, **Include JavaScript**,
    **Library Base Path**)?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么每个选项代表什么（**调试**、**包含CSS**、**包含JavaScript**、**库基本路径**）？
- en: The **Debug** option means, if we want to use the debug or the production version
    of the SDK. By default, Sencha Architect will use the `ext-all.js` and `sencha-touch-all.js`
    SDK files. If we check the **Debug** checkbox, Sencha Architect will use the `ext-all-debug.js`
    and `sencha-touch-debug.js` SDK files instead.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**调试**选项意味着，如果我们想使用调试或生产版本的SDK。默认情况下，Sencha Architect将使用`ext-all.js`和`sencha-touch-all.js`SDK文件。如果我们勾选**调试**复选框，Sencha
    Architect将使用`ext-all-debug.js`和`sencha-touch-debug.js`SDK文件。'
- en: By default, Sencha Architect also has the **Include CSS** property checked.
    This means that Sencha Architect will automatically add the Ext JS and Sencha
    Touch CSS files (`ext-theme-classic-all.css` and `sencha-touch.css`) to the `app.html`
    file. But if we need the CSS to have the beautiful look provided by Ext JS and
    Sencha Touch frameworks, why does Sencha Architect offer the developer the option
    to add the CSS file? We will answer this question later in this chapter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Sencha Architect也勾选了**包含CSS**属性。这意味着Sencha Architect将自动将Ext JS和Sencha
    Touch CSS文件（`ext-theme-classic-all.css`和`sencha-touch.css`）添加到`app.html`文件中。但如果我们需要CSS具有Ext
    JS和Sencha Touch框架提供的美丽外观，为什么Sencha Architect会给开发者提供添加CSS文件的选项？我们将在本章后面回答这个问题。
- en: 'The **Include JavaScript** option is also checked. When this option is checked,
    Sencha Architect includes the `ext-all.js` and `sencha-touch-all.js` SDK files
    in `app.html`. Again, the same question: if we need Ext JS or Sencha Touch SDK
    to have an Ext JS or Sencha Touch application, why does Sencha Architect offer
    the possibility to remove these files from `app.html`? If you already generated
    a Sencha Touch or Ext JS project using Sencha Cmd, you will notice that in the
    `index.html` file, it was included a different file as `bootstrap.js` file, and
    inside this `bootstrap.js` file we have the logic to add production or debug file.
    So if we uncheck the **Include JavaScript** property, we can have a `bootstrap.js`
    file included by adding a new JS resource. Sencha Architect is very flexible when
    it comes to choosing what files you want to include in your `app.html` file.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**包含 JavaScript** 选项也被选中。当此选项被选中时，Sencha Architect 将 `ext-all.js` 和 `sencha-touch-all.js`
    SDK 文件包含在 `app.html` 中。同样的问题：如果我们需要 Ext JS 或 Sencha Touch SDK 来创建 Ext JS 或 Sencha
    Touch 应用程序，为什么 Sencha Architect 提供从 `app.html` 中移除这些文件的可能性？如果你已经使用 Sencha Cmd
    生成了一个 Sencha Touch 或 Ext JS 项目，你会在 `index.html` 文件中注意到，它包含了一个不同的文件作为 `bootstrap.js`
    文件，在这个 `bootstrap.js` 文件中我们有添加生产或调试文件的逻辑。因此，如果我们取消选中 **包含 JavaScript** 属性，我们可以通过添加一个新的
    JS 资源来包含 `bootstrap.js` 文件。在将哪些文件包含在 `app.html` 文件中时，Sencha Architect 非常灵活。'
- en: Setting the local SDK
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置本地 SDK
- en: Another property that caught our attention is the **Library Base Path**. When
    we create a Sencha Architect project, the **Library Base Path** for an Ext JS
    4.2 project is [http://cdn.sencha.com/ext/gpl/4.2.0/](http://cdn.sencha.com/ext/gpl/4.2.0/),
    and for a Sencha Touch 2.2 project it is [http://cdn.sencha.com/touch/sencha-touch-2.2.0-rc/](http://cdn.sencha.com/touch/sencha-touch-2.2.0-rc/).
    This means that every time you execute the application you are creating, your
    application will load the SDK JS file and the CSS file from the Sencha servers.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个引起我们注意的属性是**库基本路径**。当我们创建一个 Sencha Architect 项目时，Ext JS 4.2 项目的**库基本路径**是
    [http://cdn.sencha.com/ext/gpl/4.2.0/](http://cdn.sencha.com/ext/gpl/4.2.0/)，而对于
    Sencha Touch 2.2 项目则是 [http://cdn.sencha.com/touch/sencha-touch-2.2.0-rc/](http://cdn.sencha.com/touch/sencha-touch-2.2.0-rc/)。这意味着每次你执行你创建的应用程序时，你的应用程序都会从
    Sencha 服务器加载 SDK JS 文件和 CSS 文件。
- en: 'If you are testing your application locally, or you want to load the framework
    resources from a specific place, we need to change the **Library Base Path**.
    For example, in the following screenshot we are loading the Ext SJ framework files
    from a local server:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在本地测试你的应用程序，或者你想要从特定位置加载框架资源，我们需要更改**库基本路径**。例如，在下面的屏幕截图中，我们正在从本地服务器加载 Ext
    JS 框架文件：
- en: '![Setting the local SDK](img/9819OS_05_03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![设置本地 SDK](img/9819OS_05_03.jpg)'
- en: This can also be useful in case you are on an airplane and want to continue
    coding your project, and you do not have access to Internet, so you can point
    to your local installation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这在你乘坐飞机并想要继续编码你的项目，而你又没有互联网访问时也非常有用，因此你可以指向你的本地安装。
- en: Upgrading projects
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级项目
- en: This is another scenario in which Sencha Architect helps us a lot. Developing
    a really big Ext JS or Sencha Touch project can take a while. We start developing
    the project with the latest version of the framework (most of the cases); however,
    Sencha releases new versions of the framework with fixes and new components. And
    we want to have those fixes, so for this reason we want to upgrade the project
    as well.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这又是 Sencha Architect 在很多方面帮助我们的一种场景。开发一个真正的大 Ext JS 或 Sencha Touch 项目可能需要一段时间。我们通常从框架的最新版本开始开发项目；然而，Sencha
    会发布带有修复和新组件的框架新版本。我们想要这些修复，因此出于这个原因，我们也想升级项目。
- en: 'Sencha Architect also offers the feature of upgrading. To upgrade a project
    (as long Sencha Architect already supports this new version) we need to select
    the **Library** and right-click on it. An **Upgrade** option will appear. Once
    you click on it, we need to confirm that we really want to upgrade, because there
    is no turning back. Sencha Architect will also create an archive backup for the
    project''s safety:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Architect 还提供了升级功能。要升级一个项目（只要 Sencha Architect 已经支持这个新版本），我们需要选择**库**并右键单击它。会出现一个**升级**选项。一旦点击它，我们需要确认我们确实想要升级，因为一旦升级就没有回头路了。Sencha
    Architect 还会为项目的安全创建一个存档备份：
- en: '![Upgrading projects](img/9819OS_05_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![升级项目](img/9819OS_05_04.jpg)'
- en: 'In the preceding screenshot, we upgraded a project that was built with Ext
    JS 4.0\. So we can first upgrade to Ext JS 4.1.x, or we can update directly to
    Ext JS 4.2.x. Also, in the previous screenshot we upgraded from Ext JS 4.0.x to
    Ext JS 4.1.x. If we try to upgrade it again, only the **Upgrade to Ext JS 4.2.x**
    option will be available as shown in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们升级了一个使用 Ext JS 4.0 构建的项目。因此，我们可以首先升级到 Ext JS 4.1.x，或者我们可以直接更新到 Ext
    JS 4.2.x。此外，在先前的截图中，我们从 Ext JS 4.0.x 升级到 Ext JS 4.1.x。如果我们再次尝试升级，则只有**升级到 Ext
    JS 4.2.x**选项将可用，如下面的截图所示：
- en: '![Upgrading projects](img/9819OS_05_05.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![升级项目](img/9819OS_05_05.jpg)'
- en: 'The same feature is available for Sencha Touch:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的功能也适用于 Sencha Touch：
- en: '![Upgrading projects](img/9819OS_05_06.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![升级项目](img/9819OS_05_06.jpg)'
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For these examples, we used an existing Ext JS project (`arrayGrid`) that is
    available at [https://github.com/loiane/sencha-extjs4-examples-architect/tree/master/grid/arrayGrid](https://github.com/loiane/sencha-extjs4-examples-architect/tree/master/grid/arrayGrid)
    and `Touch Twitter Search` that is available at [https://github.com/loiane/sencha-touch2-examples-architect/tree/master/TouchTwitterSearch](https://github.com/loiane/sencha-touch2-examples-architect/tree/master/TouchTwitterSearch).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些示例，我们使用了一个现有的 Ext JS 项目（`arrayGrid`），可在[https://github.com/loiane/sencha-extjs4-examples-architect/tree/master/grid/arrayGrid](https://github.com/loiane/sencha-extjs4-examples-architect/tree/master/grid/arrayGrid)找到，以及可在[https://github.com/loiane/sencha-touch2-examples-architect/tree/master/TouchTwitterSearch](https://github.com/loiane/sencha-touch2-examples-architect/tree/master/TouchTwitterSearch)找到的`Touch
    Twitter Search`。
- en: Native themes
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原生主题
- en: 'For Ext JS 4.2 and Sencha Touch 2.2 projects, the library also displays the
    **theme** property. We can change to another available **theme** (native theme)
    as shown in the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Ext JS 4.2 和 Sencha Touch 2.2 项目，库也会显示**主题**属性。我们可以切换到另一个可用的**主题**（原生主题），如下面的截图所示：
- en: '![Native themes](img/9819OS_05_07.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![原生主题](img/9819OS_05_07.jpg)'
- en: 'And if we change the **theme** on Sencha Architect, we will be able to see
    the changes right away on the **Design** mode of the canvas:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 Sencha Architect 中更改**主题**，我们将在画布的**设计**模式下立即看到变化：
- en: '![Native themes](img/9819OS_05_08.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![原生主题](img/9819OS_05_08.jpg)'
- en: 'The same will happen for Sencha Touch:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Sencha Touch 也会发生同样的事情：
- en: '![Native themes](img/9819OS_05_09.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![原生主题](img/9819OS_05_09.jpg)'
- en: We will see how to handle custom themes at the end of this chapter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章末尾了解如何处理自定义主题。
- en: Creating/linking CSS and JavaScript files
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建/链接 CSS 和 JavaScript 文件
- en: Throughout this book, we learned how to create Sencha code using Sencha Architect.
    But an Ext JS or Sencha Touch project does not necessarily means we will have
    only Ext JS or Sencha Touch code. We can have additional JS and CSS files as well.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们学习了如何使用 Sencha Architect 创建 Sencha 代码。但 Ext JS 或 Sencha Touch 项目并不意味着我们只会拥有
    Ext JS 或 Sencha Touch 代码。我们还可以有额外的 JS 和 CSS 文件。
- en: 'So let''s see how to create new CSS and JS files (the logic is the same for
    both CSS and JS files). First we need to select **Resources** from project inspector,
    and then go to the toolbox, locate **Resources**, and double-click on the resource
    we want to create (*Step 1*). Alternatively, we can also use the drag-and-drop
    feature that we learned in the previous chapters. Then, a new CSS or JS file will
    be displayed under the **Resources** package. We need to select it and on the
    config panel we can give an **id** (just to help us to identify the file) and
    its **url** (*Step 2*). Then, if we go to the canvas and open the code editor,
    we will be able to edit this file (*Step 3*):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们看看如何创建新的 CSS 和 JS 文件（CSS 和 JS 文件的逻辑是相同的）。首先，我们需要从项目检查器中选择**资源**，然后转到工具箱，找到**资源**，并双击我们想要创建的资源（*步骤
    1*）。或者，我们也可以使用我们在前几章中学到的拖放功能。然后，一个新的 CSS 或 JS 文件将在**资源**包下显示。我们需要选择它，并在配置面板中我们可以给出一个**id**（仅用于帮助我们识别文件）和它的**url**（*步骤
    2*）。然后，如果我们转到画布并打开代码编辑器，我们将能够编辑此文件（*步骤 3*）：
- en: '![Creating/linking CSS and JavaScript files](img/9819OS_05_10.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![创建/链接 CSS 和 JavaScript 文件](img/9819OS_05_10.jpg)'
- en: 'If the file does not exist, Sencha Architect will create it for us on the path
    set as the **url** (if it is a local path). If the file already exists, Sencha
    Architect will load it for us as demonstrated by the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件不存在，Sencha Architect 将在设置为**url**的路径上为我们创建它（如果是本地路径）。如果文件已存在，Sencha Architect
    将为我们加载它，如下面的截图所示：
- en: '![Creating/linking CSS and JavaScript files](img/9819OS_05_11.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![创建/链接 CSS 和 JavaScript 文件](img/9819OS_05_11.jpg)'
- en: As it is an existing file, it is going to be locked for changes. If you want
    to make changes on it, just click on **Unlock** and then you will have freedom
    to add, edit, or delete the code you want.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它是一个现有文件，它将被锁定以防止更改。如果您想对其进行更改，只需单击**解锁**，然后您将可以自由地添加、编辑或删除所需的代码。
- en: Working with Google Maps
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Google Maps
- en: For Sencha Touch projects, it is possible to add a Google Maps API resource
    to the project. This resource will only add a new JavaScript file declaration
    in the `app.html` file pointing to the Google Maps API URL.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Sencha Touch 项目，可以将 Google Maps API 资源添加到项目中。此资源将在 `app.html` 文件中添加一个新的 JavaScript
    文件声明，指向 Google Maps API URL。
- en: To add it, select **Resources** from the project inspector, go to the toolbox,
    locate **Resources**, and double-click on the **Google Maps API** resource. It
    is going to be added on the project inspector under the **Resources** package.
    We do not need to change anything on the config panel.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加它，从项目检查器中选择**资源**，进入工具箱，找到**资源**，然后双击**Google Maps API**资源。它将被添加到项目检查器的**资源**包下。我们不需要在配置面板上做任何更改。
- en: '![Working with Google Maps](img/9819OS_05_12.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Google Maps](img/9819OS_05_12.jpg)'
- en: Only Sencha Touch projects have this resource option. But if we want to add
    the Google Maps API on an Ext JS project, we can simply add a new JS resource
    pointing to the same URL as demonstrated previously.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 只有 Sencha Touch 项目才有此资源选项。但如果我们想在 Ext JS 项目上添加 Google Maps API，我们可以简单地添加一个指向先前演示的相同
    URL 的新 JS 资源。
- en: Working with custom themes
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义主题
- en: We already learned how to work with native themes on Sencha Architect. But creating
    and customizing themes is fun and we also want to use custom themes in our Sencha
    Architect projects. And it is possible!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何在 Sencha Architect 中使用原生主题。但创建和自定义主题很有趣，我们还想在我们的 Sencha Architect 项目中使用自定义主题。这是可能的！
- en: Remember we asked why Sencha Architect allows us to disable the **Include CSS**
    option on the Library? This is one of the reasons. So if we want to use custom
    themes, we need to disable the **Include CSS** option and add our own theme. Adding
    a custom theme is very similar to adding an existing CSS resource to the project.
    First we select the **Resources** from the project inspector. Then we need to
    go to the toolbox, locate the **Resources** option, and then double-click on the
    **CSS resource**. The CSS file that represents the custom theme must be already
    present in the projects' directory. So we go to the config panel of this new CSS
    resource and add the relative path of the `my-theme.css` file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们问过为什么 Sencha Architect 允许我们禁用库中的**包含 CSS**选项？这是其中一个原因。所以如果我们想使用自定义主题，我们需要禁用**包含
    CSS**选项并添加我们自己的主题。添加自定义主题与将现有 CSS 资源添加到项目非常相似。首先，我们从项目检查器中选择**资源**。然后我们需要进入工具箱，找到**资源**选项，然后双击**CSS
    资源**。代表自定义主题的 CSS 文件必须已经存在于项目的目录中。因此，我们进入这个新 CSS 资源的配置面板，并添加 `my-theme.css` 文件的相对路径。
- en: Finally, the theme is included on the `app.html` file.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，主题被包含在 `app.html` 文件中。
- en: '![Working with custom themes](img/9819OS_05_13.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![使用自定义主题](img/9819OS_05_13.jpg)'
- en: 'When we reload the **Design** view of the canvas, the CSS will be applied to
    the project and we can immediately see how it looks, as shown in the following
    screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们重新加载画布的**设计**视图时，CSS 将应用于项目，我们可以立即看到其外观，如下面的截图所示：
- en: '![Working with custom themes](img/9819OS_05_14.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![使用自定义主题](img/9819OS_05_14.jpg)'
- en: Just remember that we need to generate the theme first. Sencha Architect is
    not a tool that will help us to create the theme; we need to use Sencha Cmd (along
    with Sass and Compass) to do it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 只需记住，我们首先需要生成主题。Sencha Architect 并不是一个帮助我们创建主题的工具；我们需要使用 Sencha Cmd（以及 Sass
    和 Compass）来完成这项工作。
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about creating themes for Ext JS please visit [http://docs.sencha.com/extjs/4.2.1/#!/guide/theming](http://docs.sencha.com/extjs/4.2.1/#!/guide/theming)
    and for Sencha Touch please visit [http://docs.sencha.com/touch/2.2.1/#!/guide/theming](http://docs.sencha.com/touch/2.2.1/#!/guide/theming).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有关为 Ext JS 创建主题的更多信息，请访问 [http://docs.sencha.com/extjs/4.2.1/#!/guide/theming](http://docs.sencha.com/extjs/4.2.1/#!/guide/theming)，以及
    Sencha Touch 请访问 [http://docs.sencha.com/touch/2.2.1/#!/guide/theming](http://docs.sencha.com/touch/2.2.1/#!/guide/theming)。
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we learned how to add some extra resources to a Sencha Architect
    project, such as a new CSS (or existing one), a new JavaScript file (or existing
    one), how to change themes, and how to apply a custom theme created by you or
    any other developer, how to upgrade the Ext JS or Sencha Touch SDK version, and
    also how to work with Google Maps. With all these resources we can enhance our
    projects.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何向 Sencha Architect 项目添加一些额外的资源，例如新的 CSS（或现有的），新的 JavaScript 文件（或现有的），如何更改主题，以及如何应用由您或任何其他开发者创建的自定义主题，如何升级
    Ext JS 或 Sencha Touch SDK 版本，以及如何与 Google Maps 一起工作。有了所有这些资源，我们可以增强我们的项目。
- en: In the next chapter, we will learn how to build, package, and deploy Sencha
    Architect projects.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何构建、打包和部署 Sencha Architect 项目。
