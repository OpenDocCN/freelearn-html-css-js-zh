- en: Chapter 3. Accessing Offline Content
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。访问离线内容
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Caching critical resources for offline use
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存关键资源以供离线使用
- en: Showing cached content first
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先显示缓存内容
- en: Implementing a cache and network race
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现缓存和网络竞态
- en: Using window.caches
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用window.caches
- en: Implementing stale-while-revalidate
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现陈旧数据验证
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: You don't need network access for your laptop or smartphone to be useful. Especially
    in areas where mobile data is expensive, with some proper planning, you can download
    certain apps that you can sync via free Wi-Fi, and then use them offline elsewhere.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要网络访问，您的笔记本电脑或智能手机也能发挥作用。特别是在移动数据昂贵的地区，通过一些适当的规划，您可以下载某些应用程序，通过免费Wi-Fi进行同步，然后在其他地方离线使用。
- en: Mobile apps such as Google Maps, FeedMe, and Wikipedia give us offline apps,
    which can be used anywhere regardless of the Internet. Making our own app offline-compatible
    is a great way of winning the hearts of our clients.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如Google Maps、FeedMe和Wikipedia等移动应用程序为我们提供了离线应用程序，无论是否有互联网，都可以在任何地方使用。使我们的应用程序离线兼容是赢得客户芳心的好方法。
- en: Let's start this chapter by looking at how to cache critical resources for use
    offline.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从如何缓存关键资源以供离线使用开始这一章。
- en: Caching critical resources for offline use
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存关键资源以供离线使用
- en: In this recipe, we look at how we can cache a set of critical resources to enable
    users to go offline and provide the user with the same experience. In the meantime,
    we will notify the user that they can go offline and continue to use the same
    features.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们看看我们如何缓存一组关键资源，使用户能够离线使用，并给用户提供相同的使用体验。同时，我们将通知用户他们可以离线使用并继续使用相同的功能。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，您需要在浏览器设置中开启服务工作者实验功能。如果您还没有这样做，请参考[第1章](ch01.html "第1章。学习服务工作者基础")的第一个食谱，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考[第1章](ch01.html
    "第1章。学习服务工作者基础")的以下食谱，*学习服务工作者基础*：*设置GitHub页面以支持SSL*，*在Windows上设置SSL*，和*在Mac上设置SSL*。
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure. Alternatively, you
    can download the files from the following location:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置您的文件结构。或者，您可以从以下位置下载文件：
- en: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/01/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/01/)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/01/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/01/)'
- en: 'First, we must create an `index.html` file as follows:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须创建一个如下所示的`index.html`文件：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a JavaScript file called `index.js`, in the same folder as the `index.html`
    file, with the following code:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`index.html`文件相同的文件夹中创建一个名为`index.js`的JavaScript文件，并包含以下代码：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a JavaScript file called `game.js`, in the same folder as the `index.html`
    file, with the following code:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`index.html`文件相同的文件夹中创建一个名为`game.js`的JavaScript文件，并包含以下代码：
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a JavaScript file called `service-worker.js`, in the same folder as
    the `index.html` file, with the following code:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`index.html`文件相同的文件夹中创建一个名为`service-worker.js`的JavaScript文件，并包含以下代码：
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a JavaScript file called `style.css`, in the same folder as the `index.html`
    file, with the following code:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`index.html`文件相同的文件夹中创建一个名为`style.css`的CSS文件，并包含以下代码：
- en: '[PRE4]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_03_01.jpg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并访问`index.html`文件：![如何操作...](img/B05381_03_01.jpg)
- en: You will see the **Ready to go offline!** message. This means that we can play
    the game offline. Now open up DevTools (*Cmd* + *Alt* + *I* or *F12*), go to the
    **Network** tab, click on the dropdown displaying **No throttling**, and select
    **Offline**:![How to do it...](img/B05381_03_02.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到 **Ready to go offline!** 消息。这意味着我们可以离线玩游戏。现在打开 DevTools (*Cmd* + *Alt*
    + *I* 或 *F12*)，转到 **Network** 选项卡，点击显示 **No throttling** 的下拉菜单，并选择 **Offline**：![如何操作...](img/B05381_03_02.jpg)
- en: Now refresh your browser, and you will be able to continue playing the game.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在刷新您的浏览器，您将能够继续玩游戏。
- en: You can select a company name from the dropdown and click the **Try** button:![How
    to do it...](img/B05381_03_03.jpg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以从下拉菜单中选择一个公司名称，然后点击 **Try** 按钮：![如何操作...](img/B05381_03_03.jpg)
- en: Every time the selection does not match the result, it will show a message saying
    **Boo! Try again..**, and you will see the attempts count:![How to do it...](img/B05381_03_04.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次选择不匹配结果时，都会显示一条消息说 **Boo! Try again..**，并且您将看到尝试次数：![如何操作...](img/B05381_03_04.jpg)
- en: Once your selection matches you will get a success message with the attempt
    count, and you will see the attempts count:![How to do it...](img/B05381_03_05.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您的选择匹配，您将获得一个带有尝试次数的成功消息，并且您将看到尝试次数：![如何操作...](img/B05381_03_05.jpg)
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Our `index.html` file contains the structure for the dropdown, buttons, and
    image. The dropdown contains the options for the brand:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `index.html` 文件包含下拉菜单、按钮和图像的结构。下拉菜单包含品牌的选项：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The values for the options are specified by numbers, which later match up with
    the images, so the order is important. As you can see, they start with 0, to adhere
    to the 0-based index of the array where we are going to store the names of the
    companies later on.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 选项的值由数字指定，这些数字稍后会与图像匹配，因此顺序很重要。如您所见，它们从 0 开始，以符合我们将要存储公司名称的数组的 0 基索引。
- en: 'The `style.css` file contains all the styles we need for our page. The top
    two declarations are common styles for all the elements and the body element respectively:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`style.css` 文件包含我们页面所需的全部样式。前两个声明是所有元素和 body 元素的通用样式：'
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The styles for failed and successful messages contain orange and green colors:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 失败和成功消息的样式包含橙色和绿色：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The notification message is initially hidden. This is done by assigning a class
    with `display:none`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通知消息最初是隐藏的。这是通过分配一个带有 `display:none` 类来实现的：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The first of the three JavaScript files, `index.js`, performs service worker
    registration, and then listens to the `controllerchange` event. It also handles
    the event for the reset button.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个 JavaScript 文件 `index.js` 执行服务工作者注册，然后监听 `controllerchange` 事件。它还处理重置按钮的事件。
- en: The game engine for our little game is in the `game.js` file. So let's go through
    what's happening inside this file.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的小游戏的引擎在 `game.js` 文件中。所以让我们看看这个文件内部发生了什么。
- en: 'First, we declare two variables at the top, `attempts` and `images`, with initial
    values; `attempts` contains the initial value for tries, 0, and `images`, which
    is an array constant, has the brand names in order. The order of the brands is
    important so that it matches the dropdown in the `index.html` file:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在顶部声明了两个变量，`attempts` 和 `images`，并赋予初始值；`attempts` 包含尝试的初始值，0，而 `images`
    是一个数组常量，包含品牌名称的顺序。品牌的顺序很重要，以便与 `index.html` 文件中的下拉菜单相匹配：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When the user clicks the `try` button, the game logic in the callback function
    is handled:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 `try` 按钮，回调函数中的游戏逻辑被处理：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'There is a lot going on in the declaration section in the callback handler.
    So let''s look at each initialization:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在回调处理程序中的声明部分有很多事情发生。所以让我们看看每个初始化：
- en: 'First we grab the logo from the **Document Object Model** (**DOM**):'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们从 **Document Object Model** (**DOM**) 中获取标志：
- en: '[PRE11]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We also capture the user `choice` and `attempts` element from the DOM, and
    the result element:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还从 DOM 中捕获了用户的 `choice` 和 `attempts` 元素，以及结果元素：
- en: '[PRE12]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then we capture the data attribute from the logo element, and we generate a
    random number with `getRandomIndex()`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们从标志元素捕获数据属性，并使用 `getRandomIndex()` 生成一个随机数：
- en: '[PRE13]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We generate a random number for the next index, as long as it is not the one
    we already have for the index:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为下一个索引生成一个随机数，只要它不是我们已为该索引拥有的一个：
- en: '[PRE14]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, we are set the brand images source to the image at the random index we
    created. Then we set the `data-image` attribute to the same index:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将品牌图像的源设置为随机索引创建的图像。然后我们将 `data-image` 属性设置为相同的索引：
- en: '[PRE15]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For example, this may create an HTML element like the following on our web
    page:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，这可能在我们的网页上创建一个如下所示的HTML元素：
- en: '[PRE16]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We make sure the class name for the result element is cleared before adding
    a new one. Then we increase the attempts count:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加新的之前，我们确保结果元素的类名被清除。然后我们增加尝试次数：
- en: '[PRE17]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we find out whether the new index is equal to the choice the user made.
    Note that we have used a double equation instead of triple deliberately, because
    the choice is a string and `newIndex` is an integer:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们找出新的索引是否等于用户所做的选择。请注意，我们故意使用双等号而不是三等号，因为选择是一个字符串，而`newIndex`是一个整数：
- en: '[PRE18]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s move on to the `service-worker.js` file. There we handle three events:
    install, fetch, and activate. In the install event handler, we cache all the dependencies—the
    files we need to go offline:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到`service-worker.js`文件。在那里我们处理三个事件：install、fetch和activate。在install事件处理器中，我们缓存所有依赖项——我们需要离线运行的文件：
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Inside the fetch handler, we check whether the resources are in the cache.
    If yes, then the response is provided by the cache:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在fetch处理器内部，我们检查资源是否在缓存中。如果是，则由缓存提供响应：
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Otherwise, return the result from the server itself:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，直接从服务器返回结果：
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, we are forcing a `controllerchange` event on `navigator.serviceWorker`
    by calling `claim()`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过调用`claim()`在`navigator.serviceWorker`上强制触发一个`controllerchange`事件：
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: See also
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Registering a service worker in detail* recipe of [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。学习Service Worker基础知识")的*详细注册Service Worker*配方，*学习Service
    Worker基础知识*'
- en: The *Loading CSS offline* recipe of [Chapter 2](ch02.html "Chapter 2. Working
    with Resource Files"), *Working with Resource Files*
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章。处理资源文件")的*离线加载CSS*配方，*处理资源文件*'
- en: Showing cached content first
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 首先显示缓存内容
- en: If you are a regular visitor to a certain website, chances are that you may
    be loading most of the resources, such as CSS and JavaScript files, from your
    cache, rather than from the server itself. This saves us necessary bandwidth for
    the server, as well as requests over the network. Having control over which content
    we deliver from the cache and server is a great advantage. Server workers provide
    us with this powerful feature by having programmatic control over the content.
    In this recipe, we are going to look at the methods that enable us to do so by
    creating a performance art event viewer web app.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你经常访问某个网站，那么你很可能正在从你的缓存而不是从服务器本身加载大部分资源，例如CSS和JavaScript文件。这为我们节省了服务器必要的带宽，以及网络请求。控制我们从缓存和服务器提供的内容是一个巨大的优势。服务器工作者通过程序性地控制内容为我们提供了这个强大的功能。在这个配方中，我们将查看使我们能够通过创建性能艺术事件查看器Web应用程序来实现这一点的各种方法。
- en: Getting ready
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Service Worker，你需要在浏览器设置中开启Service Worker实验功能。如果你还没有这样做，请参考[第1章](ch01.html
    "第1章。学习Service Worker基础知识")的第一篇配方，*设置Service Worker*：*设置Service Worker*。Service
    Worker仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考[第1章](ch01.html "第1章。学习Service Worker基础知识")的以下配方：*设置GitHub
    pages for SSL*，*在Windows上设置SSL*，和*在Mac上设置SSL*。
- en: How to do it...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure. Alternatively, you
    can download the files from the following location:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构。或者，你也可以从以下位置下载文件：
- en: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/02/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/02/)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/02/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/02/)'
- en: 'First, we must create an `index.html` file as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须创建一个如下所示的`index.html`文件：
- en: '[PRE23]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a CSS file called `style.css` in the same folder as the `index.html`
    file. You can find the source code in the following location on GitHub:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`index.html`文件相同的文件夹中创建一个名为`style.css`的CSS文件。你可以在GitHub的以下位置找到源代码：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/02/style.css](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/02/style.css)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/02/style.css](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/02/style.css)'
- en: 'Create a JavaScript file called `index.js` in the same folder as the `index.html`
    file. You can find the source code in the following location on GitHub:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`index.html`文件相同的文件夹中创建一个名为`index.js`的JavaScript文件。你可以在GitHub的以下位置找到源代码：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/02/index.js](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/02/index.js)'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/02/index.js](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/02/index.js)'
- en: Open up a browser and go to `index.html`:![How to do it...](img/B05381_03_06.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`index.html`：![如何操作...](img/B05381_03_06.jpg)
- en: First, we are requesting data from the network with caching enabled. Click on
    the **Fetch** button:![How to do it...](img/B05381_03_07.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们正在启用缓存从网络请求数据。点击**获取**按钮：![如何操作...](img/B05381_03_07.jpg)
- en: If you click **Fetch** again, the data has been retrieved first from cache,
    and then from the network, so you see duplicate data (see that the last line is
    the same as the first):![How to do it...](img/B05381_03_08.jpg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你再次点击**获取**，数据首先从缓存中检索，然后从网络中检索，所以你会看到重复的数据（注意最后一行与第一行相同）：![如何操作...](img/B05381_03_08.jpg)
- en: Now we are going to select the **Disabled** checkbox under the **Network** label,
    and click the **Fetch** button again, in order to fetch data only from the cache:![How
    to do it...](img/B05381_03_10.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将选择**网络**标签下的**禁用**复选框，并再次点击**获取**按钮，以便只从缓存中获取数据：![如何操作...](img/B05381_03_10.jpg)
- en: Select the **Disabled** checkbox under the **Network** label, as well as the
    **Cache** label, and click the **Fetch** button again:![How to do it...](img/B05381_03_09.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**网络**标签下的**禁用**复选框，以及**缓存**标签，然后再次点击**获取**按钮：![如何操作...](img/B05381_03_09.jpg)
- en: How it works...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'In the `index.js` file, we are setting a page-specific name for the cache,
    as the caches are origin-based, and no other page should use the same cache name:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.js`文件中，我们为缓存设置一个特定于页面的名称，因为缓存是基于源的，并且没有其他页面应该使用相同的缓存名称：
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you inspect the **Resources** tab of the development tools, you will find
    the cache inside the **Cache Storage** tab:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查开发工具的**资源**标签页，你将在**缓存存储**标签页内找到缓存：
- en: '![How it works...](img/B05381_03_11.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B05381_03_11.jpg)'
- en: 'If we have already fetched network data, we don''t want the cache fetch to
    complete and overwrite the data that we just got from the network. We use the
    `networkDataReceived` flag to let the cache fetch callbacks to know whether a
    network fetch has already completed:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经获取了网络数据，我们不希望缓存获取完成并覆盖我们从网络刚刚获取的数据。我们使用`networkDataReceived`标志让缓存获取回调知道网络获取是否已经完成：
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We are storing elapsed time for the network and cache in two variables:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在两个变量中存储网络和缓存的经过时间：
- en: '[PRE26]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The source URL, for example, is pointing to a file location in GitHub via RawGit:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 源URL，例如，是通过RawGit指向GitHub上的文件位置：
- en: '[PRE27]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If you want to set up your own source URL, you can easily do so by creating
    a gist or a repository on GitHub, and creating a file with your data in JSON format
    (you don''t need the `.json` extension). Once you''ve done that, copy the URL
    of the file, head over to [https://rawgit.com](https://rawgit.com), and paste
    the link there to obtain another link with a content type header, as shown in
    the following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要设置自己的源URL，你可以通过在GitHub上创建一个gist或仓库，并创建一个包含你的数据的JSON格式的文件（不需要`.json`扩展名）轻松做到这一点。一旦你完成了这个，复制文件的URL，转到[https://rawgit.com](https://rawgit.com)，并将链接粘贴在那里以获得另一个带有内容类型头的链接，如下面的截图所示：
- en: '![How it works...](img/B05381_03_13.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B05381_03_13.jpg)'
- en: 'Between the time we press the **Fetch** button and when the data is received,
    we have to make sure the user doesn''t change the search criteria, or press the
    **Fetch** button again. To handle this situation, we disable the controls:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们按下**获取**按钮和接收到数据之间，我们必须确保用户不会更改搜索条件，或者再次按下**获取**按钮。为了处理这种情况，我们禁用控件：
- en: '[PRE28]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The returned data will be rendered to the screen in rows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的数据将以行形式渲染到屏幕上：
- en: '[PRE29]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Each item of the `events` array will be printed to the screen as rows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`events`数组中的每个项目都将作为行打印到屏幕上：'
- en: '![How it works...](img/B05381_03_12.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B05381_03_12.jpg)'
- en: The function `handleFetchComplete` is the callback for both the cache and the
    network.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`handleFetchComplete`是缓存和网络的双重回调。
- en: 'If the disabled checkbox is checked, we are simulating a network error by throwing
    an error:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果禁用复选框被勾选，我们通过抛出错误来模拟网络错误：
- en: '[PRE30]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Because request bodies can only be read once, we have to clone the response:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 由于请求体只能读取一次，我们必须克隆响应：
- en: '[PRE31]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We place the cloned response in the cache using `cache.put` as a key/value
    pair. This helps subsequent cache fetches to find this update data:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`cache.put`将克隆的响应放入缓存，作为键/值对。这有助于后续的缓存获取找到这些更新数据：
- en: '[PRE32]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now we read the response in JSON format. Also, we make sure that any in-flight
    cache requests will not be overwritten by the data we have just received, using
    the `networkDataReceived` flag:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们以JSON格式读取响应。同时，我们确保任何正在进行的缓存请求不会被我们刚刚接收到的数据覆盖，使用`networkDataReceived`标志：
- en: '[PRE33]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To prevent overwriting the data we received from the network, we make sure
    only to update the page if the network request has not yet returned:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止覆盖我们从网络接收到的数据，我们确保只有在网络请求尚未返回的情况下才更新页面：
- en: '[PRE34]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'When the user presses the **Fetch** button, they make nearly simultaneous requests
    of the network and the cache for data. This happens on a page load in a real-world
    application, instead of as a result of a user action:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下**获取**按钮时，他们会几乎同时向网络和缓存请求数据。这在现实世界的应用程序中是在页面加载时发生的，而不是由用户操作引起的：
- en: '[PRE35]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We start by disabling any user input while the network fetch requests are initiated:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在启动网络获取请求时禁用任何用户输入：
- en: '[PRE36]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We request data using the `fetch` API with a cache-busting URL, as well as
    the no-cache option in order to support Firefox, which hasn''t implemented the
    caching options yet:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用带有缓存破坏URL的`fetch` API请求数据，以及Firefox的no-cache选项，以支持尚未实现缓存选项的Firefox：
- en: '[PRE37]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In order to simulate network delays, we wait before calling the network fetch
    callback. In situations where the callback errors out, we have to make sure that
    we reject the promise we received from the original fetch:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟网络延迟，我们在调用网络获取回调之前等待。在回调出错的情况下，我们必须确保拒绝我们从原始获取中收到的承诺：
- en: '[PRE38]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'To simulate cache delays, we wait before calling the cache fetch callback.
    If the callback errors out, we make sure that we reject the promise we got from
    the original call to match:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟缓存延迟，我们在调用缓存获取回调之前等待。如果回调出错，我们确保拒绝我们从原始调用中获得的承诺以匹配：
- en: '[PRE39]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `formatDate` function is a helper function for us to convert the date format
    we receive in the response into a much more readable format on the screen:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`formatDate`函数是我们将接收到的响应中的日期格式转换为屏幕上更易读格式的辅助函数：'
- en: '[PRE40]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: If you use a different date format, you can shuffle the position of the array
    in the return statement to your preferred format.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用不同的日期格式，你可以根据你喜欢的格式在返回语句中调整数组的顺序：
- en: Implementing a cache and network race
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现缓存和网络竞争
- en: If your client is using older and slower hardware, including older hard drives,
    there is a chance that accessing resources from a hard drive could be slower than
    accessing the same resources on a faster Internet connection. But just because
    some of your users are using slower hardware, it doesn't justify accessing resources
    already in the hardware over the network all the time, because some users may
    have faster hardware that could be a waste of data. To resolve this issue, we
    can implement a solution that performs a race condition, and fetch data according
    to which resolves first.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的客户端正在使用较旧且较慢的硬件，包括较旧的硬盘驱动器，那么从硬盘驱动器访问资源可能比从较快的互联网连接访问相同的资源要慢。但仅仅因为一些用户正在使用较慢的硬件，这并不能证明总是通过网络访问已经存在于硬件中的资源是合理的，因为一些用户可能拥有更快的硬件，这可能会浪费数据。为了解决这个问题，我们可以实现一个执行竞争条件的解决方案，并根据哪个先解决来获取数据：
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中打开服务工作者实验功能。如果你还没有这样做，请参阅[第1章](ch01.html "第1章。学习服务工作者基础")的第一个配方，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的开发生态，请参阅[第1章](ch01.html
    "第1章。学习服务工作者基础")的以下配方，*学习服务工作者基础*：*设置GitHub页面以支持SSL*，*在Windows上设置SSL*，和*在Mac上设置SSL*。
- en: How to do it...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure. Alternatively, you
    can download the files from the following location:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构。或者，你也可以从以下位置下载文件：
- en: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/03/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/03/)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/03/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/03/)'
- en: 'First, we must create an `index.html` file as follows:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须创建一个如下所示的`index.html`文件：
- en: '[PRE41]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create a JavaScript file called `style.css` in the same folder as the `index.html`
    file with the following code:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`index.html`文件相同的文件夹中创建一个名为`style.css`的JavaScript文件，并包含以下代码：
- en: '[PRE42]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create a JavaScript file called `index.js`, in the same folder as the `index.html`
    file, with the following code:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`index.html`文件相同的文件夹中创建一个名为`index.js`的JavaScript文件，并包含以下代码：
- en: '[PRE43]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a JavaScript file called `service-worker.js`, in the same folder as
    the `index.html` file with the following code:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`index.html`文件相同的文件夹中创建一个名为`service-worker.js`的JavaScript文件，并包含以下代码：
- en: '[PRE44]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_03_14.jpg)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并访问`index.html`文件：![如何操作...](img/B05381_03_14.jpg)
- en: Now open up DevTools (*Cmd* + *Alt* + *I* or *F12*), go to the **Network** tab,
    click on the dropdown, and select **GPRS(50 kb/s)** in order to simulate a slower
    network speed:![How to do it...](img/B05381_03_15.jpg)
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开开发者工具(*Cmd* + *Alt* + *I* 或 *F12*)，转到**网络**标签，点击下拉菜单，并选择**GPRS(50 kb/s**)以模拟较慢的网络速度：![如何操作...](img/B05381_03_15.jpg)
- en: Refresh the page and you will see the same page. But if you view the network
    requests, you will be able to find out that the service worker kicked in:![How
    to do it...](img/B05381_03_16.jpg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新页面，你会看到相同的页面。但如果查看网络请求，你会发现服务工作者已经启动：![如何操作...](img/B05381_03_16.jpg)
- en: How it works...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the `service-worker.js` file, we are caching the necessary resources for
    us to go offline and still use the application:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在`service-worker.js`文件中，我们正在缓存必要的资源，以便我们可以在离线状态下仍然使用应用程序：
- en: '[PRE45]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Then we create a function called `resolveAny`. The purpose of this function
    is to handle race conditions in a proper manner. The promise has a function called
    `race()`. This function is of no help to us, as it rejects if a promise has rejected
    before fulfilling.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个名为`resolveAny`的函数。这个函数的目的是以适当的方式处理竞争条件。Promise有一个名为`race()`的函数。这个函数对我们没有帮助，因为它在Promise在完成之前被拒绝时也会拒绝。
- en: 'The `resolveAny` function returns a new promise. Inside the promise, we make
    sure the array we pass in is an array of promises:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`resolveAny`函数返回一个新的Promise。在Promise内部，我们确保我们传入的数组是一个Promise数组：'
- en: '[PRE46]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Next, we make sure that we resolve the current promise as soon as another one
    in the array gets resolved:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们确保在数组中的另一个Promise解决后立即解决当前的Promise：
- en: '[PRE47]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We also make sure to reject if all promises are rejected:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还确保如果所有Promise都被拒绝，则拒绝：
- en: '[PRE48]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The callback function of the event listener for fetch calls the `resolveAny`
    function and passes in two functions, `caches.match(event.request)` and `fetch(event.request)`.
    Both these functions send the same request, resulting in a race condition.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetch`调用的事件监听器的回调函数调用`resolveAny`函数，并传入两个函数，`caches.match(event.request)`和`fetch(event.request)`。这两个函数发送相同的请求，导致竞争条件。'
- en: Using window.caches
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`window.caches`
- en: In this recipe, we look at how to prefetch specific resources during the installation
    of the service worker, as well as how to use the window.cache to make requests
    against the Cache Storage API, not within the scope of the service worker, but
    from the context of the HTML document.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们探讨如何在服务工作线程安装期间预取特定资源，以及如何使用 `window.cache` 来对缓存存储 API 发起请求，不是在服务工作线程的作用域内，而是在
    HTML 文档的上下文中。
- en: Getting ready
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作线程，你需要在浏览器设置中开启服务工作线程实验功能。如果你还没有这样做，请参考第 1 章的第一道菜谱 [第 1 章：学习服务工作线程基础](ch01.html
    "第 1 章：学习服务工作线程基础")，*学习服务工作线程基础*：*设置服务工作线程*。服务工作线程仅在 HTTPS 上运行。要了解如何设置开发环境以支持此功能，请参考第
    1 章 [第 1 章：学习服务工作线程基础](ch01.html "第 1 章：学习服务工作线程基础") 的以下菜谱：*设置 GitHub 页面以支持 SSL*，*在
    Windows 上设置 SSL*，以及 *在 Mac 上设置 SSL*。
- en: How to do it...
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure. Alternatively, you
    can download the files from the following location:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构。或者，你也可以从以下位置下载文件：
- en: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/04/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/04/)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/04/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/04/)'
- en: 'First, we must create an `index.html` file as follows:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须创建一个 `index.html` 文件，如下所示：
- en: '[PRE49]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Create a CSS file called `style.css` in the same folder as the `index.html`
    file. You can find the source code on GitHub at the following location:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与 `index.html` 文件相同的文件夹中创建一个名为 `style.css` 的 CSS 文件。你可以在 GitHub 上找到源代码，位置如下：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/04/style.css](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/04/style.css)'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/04/style.css](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/04/style.css)'
- en: 'Create a JavaScript file called `index.js`, in the same folder as the `index.html`
    file, with the following code:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与 `index.html` 文件相同的文件夹中创建一个名为 `index.js` 的 JavaScript 文件，内容如下：
- en: '[PRE50]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Create a JavaScript file called `app.js` in the same folder as the `index.html`
    file. The source code for this file can be found on GitHub at the following location:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与 `index.html` 文件相同的文件夹中创建一个名为 `app.js` 的 JavaScript 文件。该文件的源代码可以在 GitHub 上找到，位置如下：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/04/app.js](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/04/app.js)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/04/app.js](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/04/app.js)'
- en: 'Create an HTML file called `prefetched.html`:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `prefetched.html` 的 HTML 文件：
- en: '[PRE51]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Create a JavaScript file called `service-worker.js`, in the same folder as
    the `index.html` file, with the following code:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与 `index.html` 文件相同的文件夹中创建一个名为 `service-worker.js` 的 JavaScript 文件，内容如下：
- en: '[PRE52]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Open up a browser and go to the `index.html` file. You will see one prefetched
    bookmark:![How to do it...](img/B05381_03_17.jpg)
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并访问 `index.html` 文件。你会看到一个预取的书签：![如何操作...](img/B05381_03_17.jpg)
- en: Add a bookmark by typing a URL and clicking on the **Add** button on the right:![How
    to do it...](img/B05381_03_18.jpg)
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入 URL 并点击右侧的 **添加** 按钮来添加书签：![如何操作...](img/B05381_03_18.jpg)
- en: You can delete a bookmark by clicking on the tick icon on the right-hand side
    of the bookmark.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过点击书签右侧的勾选图标来删除书签。
- en: Add another bookmark and refresh the page. You will see the bookmarks are intact.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个书签并刷新页面。你会看到书签仍然完好无损。
- en: How it works...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'In our `service-worker.js` file, we maintain a cache version in order to use
    a fresh cache by incrementing the `cacheVersion` value. When the updated service
    worker kicks in, the old caches will be removed as a part of the activate event
    handler:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `service-worker.js` 文件中，我们维护一个缓存版本，以便通过增加 `cacheVersion` 值来使用新的缓存。当更新的服务工作线程启动时，旧缓存将作为激活事件处理程序的一部分被删除：
- en: '[PRE53]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The following resource will be displayed as a bookmarked URL when you load
    the page for the first time, and the event will be logged in your developer console:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次加载页面时，以下资源将显示为书签URL，并且该事件将在你的开发者控制台中记录：
- en: '[PRE54]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'If there is a possibility that the resources being fetched are served off a
    server that does not support CORS, it is important to use `{mode: ''no-cors''}`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '如果有可能会从不支持CORS的服务器获取资源，那么使用`{mode: ''no-cors''}`是非常重要的：'
- en: '[PRE55]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The `catch()` method handles any exceptions from the `caches.open()` and `cache.addAll()`
    steps:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`catch()`方法处理`caches.open()`和`cache.addAll()`步骤中的任何异常：'
- en: '[PRE56]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In the event handler for activate, we delete all caches that are not named
    in `currentCaches`. While in this example there is only one cache, the same logic
    handles cases where there are multiple versioned caches:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在激活事件的处理器中，我们删除了所有不在`currentCaches`中命名的缓存。虽然在这个例子中只有一个缓存，但同样的逻辑也处理了存在多个版本化缓存的情况：
- en: '[PRE57]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'If this cache name isn''t present in the array of "expected" cache names, then
    delete it:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个缓存名称不在“预期”的缓存名称数组中，那么就删除它：
- en: '[PRE58]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Let''s move on to the `app.js` file, where most of the work is taking place.
    The `initializeBookmarks` function attaches an event listener to the form for
    the submit button. In the callback for submit, the value of the text field is
    extracted and then a list is generated with it. This list is then attached to
    the unordered list represented by the ID of the articles in the `index.html` file.
    We then call the `showBookmarks()` function:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到`app.js`文件，大部分工作都在这里进行。`initializeBookmarks`函数将事件监听器附加到表单的提交按钮上。在提交的回调中，提取文本字段的值，然后根据它生成一个列表。然后，这个列表被附加到由`index.html`文件中文章的ID表示的无序列表。然后我们调用`showBookmarks()`函数：
- en: '[PRE59]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'We also add an event listener to the unordered articles list for the click
    event. Inside the callback, we remove the item itself if it''s a list (`li`) element.
    This is how we remove articles from the list:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还向无序列表的文章列表添加了一个点击事件监听器。在回调内部，如果它是列表（`li`）元素，我们就移除该项。这就是我们从列表中移除文章的方式：
- en: '[PRE60]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'In the `showBookmarks()` function, we clear out any of the previous URLs, in
    case this function was called after adding a new URL to the cache:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在`showBookmarks()`函数中，我们清除任何之前的URL，以防这个函数在向缓存添加新URL之后被调用：
- en: '[PRE61]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'We then iterate over all the available caches, and for each of the caches,
    iterate over all of the URLs, adding each cache to the bookmark list:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们遍历所有可用的缓存，并对每个缓存遍历所有URL，将每个缓存添加到书签列表中：
- en: '[PRE62]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Now let''s look at the function that actually uses `window.fetch()` to retrieve
    a response from the network and store it in the named cache. The important thing
    here is that the service worker controlling this page has no fetch event handler,
    therefore this request is made without the involvement of the service worker:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看实际使用`window.fetch()`从网络获取响应并将其存储在命名缓存中的函数。这里重要的是，控制此页面的服务工作者没有fetch事件处理器，因此这个请求是在没有服务工作者参与的情况下发出的：
- en: '[PRE63]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The `addRequestToBookmarks()` function is a helper function for adding a cached
    request to the list of the cached bookmarks. In this function, we''re creating
    a span, a button, and a list item, and appending those to the unordered articles
    list:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`addRequestToBookmarks()`函数是一个辅助函数，用于将缓存的请求添加到缓存的列表中。在这个函数中，我们创建一个span、一个按钮和一个列表项，并将它们附加到无序列表的文章列表中：'
- en: '[PRE64]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Next, the `removeCachedBookmark()` function removes the cache entry by a given
    a cache name and a URL:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`removeCachedBookmark()`函数通过给定的缓存名称和URL删除缓存条目：
- en: '[PRE65]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The `waitUntilInstalled()` helper function returns a promise which gets resolved
    once the service worker registration passes the `installing` state:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`waitUntilInstalled()`辅助函数返回一个承诺，一旦服务工作者注册通过`installing`状态，该承诺就会被解决：'
- en: '[PRE66]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'If the current registration portrays the `installing` service worker, then
    we make sure to wait until the installation step, where the resources are pre-fetched,
    completes to display the bookmark list:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前注册的服务工作者是`installing`状态，那么我们确保等待安装步骤完成，其中资源被预获取，然后显示书签列表：
- en: '[PRE67]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'If that''s not the case, and this isn''t the `installing` service worker, then
    we can safely assume the installation must have been completed during a previous
    visit to the current page, and the resources have already been prefetched. Therefore
    we can now show the list of bookmarks right away:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是这种情况，并且这不是`installing`服务工作者，那么我们可以安全地假设安装是在访问当前页面的前一次访问期间完成的，并且资源已经被预获取。因此，我们现在可以立即显示书签列表：
- en: '[PRE68]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Implementing stale-while-revalidate
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现缓存失效并重新验证
- en: Having the latest version of the cache is sometimes not absolutely necessary
    for resources such as certain images of a web page. We can use the cached version
    if available, and fetch an update next time.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，对于网页中某些图像等资源来说，拥有最新版本的缓存并不是绝对必要的。如果可用，我们可以使用缓存的版本，并在下次获取更新。
- en: Getting ready
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章. 学习服务工作者基础")的第一个食谱，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置开发环境以支持此功能，请参考[第1章](ch01.html
    "第1章. 学习服务工作者基础")的以下食谱，*学习服务工作者基础*：*为SSL设置GitHub页面*，*为Windows设置SSL*，以及*为Mac设置SSL*。
- en: How to do it...
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure. Alternatively, you
    can download the files from the following location:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构。或者，你也可以从以下位置下载文件：
- en: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/05/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/05/)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/05/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/05/)'
- en: 'First, we must create an `index.html` file as follows:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须创建一个`index.html`文件，如下所示：
- en: '[PRE69]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Create a JavaScript file called `index.js` in the same folder as the `index.html`
    file with the following code:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`index.html`文件相同的文件夹中创建一个名为`index.js`的JavaScript文件，并包含以下代码：
- en: '[PRE70]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Create a JavaScript file called `service-worker.js`, in the same folder as
    the `index.html` file, with the following code:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`index.html`文件相同的文件夹中创建一个名为`service-worker.js`的JavaScript文件，并包含以下代码：
- en: '[PRE71]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Download the `adobe-log.png` image from the source code, or use your own image
    in the same folder as the `index.html` file.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从源代码下载`adobe-log.png`图像，或者使用与`index.html`文件相同的文件夹中的自己的图像。
- en: 'Open up a browser and go to `index.html`. You will see the **Registration status:
    successful** message and the logo:![How to do it...](img/B05381_03_19.jpg)'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并访问`index.html`。你会看到**注册状态：成功**的消息和标志：![如何操作...](img/B05381_03_19.jpg)
- en: Now if you refresh the page and inspect the **Console** tab of the Developer
    Tools, you will be able to see that the `adobe-logo.png` file has been fetched
    from the cache.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你刷新页面并检查开发者工具的**控制台**标签页，你将能够看到`adobe-logo.png`文件已经被从缓存中获取。
- en: How it works...
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In our `service-worker.js` file, we make sure that if a cached version is available,
    we use it instead of a network request, but fetch an update the next time:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`service-worker.js`文件中，我们确保如果可用，则使用缓存版本而不是网络请求，但下次获取更新：
- en: '[PRE72]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
