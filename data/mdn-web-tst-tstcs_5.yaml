- en: '*Chapter 5:* Improving the Tests'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第五章：改进测试*'
- en: The main learning goal of this chapter is to get familiar with how to improve
    a set of end-to-end tests. This will be achieved with the help of test setup and
    teardown. Also, we will take a look at different command-line settings to run
    tests. The testing techniques that we will cover in this chapter are universal
    and can be reused to write automated tests for any web project. By the end of
    the chapter, we will have an improved test suite and will learn how to run it
    with command-line options.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要学习目标是熟悉如何改进一组端到端测试。这将通过测试设置和清理来实现。此外，我们还将查看不同的命令行设置来运行测试。本章中我们将涵盖的测试技术是通用的，可以重用来为任何Web项目编写自动化测试。到本章结束时，我们将拥有一个改进的测试套件，并学习如何使用命令行选项运行它。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主要内容：
- en: Executing selected tests.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行选定的测试。
- en: Exploring test setup and teardown.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索测试设置和清理。
- en: Adding setup and teardown to the test project.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将设置和清理添加到测试项目中。
- en: Running tests with command-line settings.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行设置运行测试。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All of the code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch5](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch5).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码示例都可以在GitHub上找到：[https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch5](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch5)。
- en: Executing selected tests
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行选定的测试
- en: 'Quite often, when writing or extending a set of tests, we need to concentrate
    on one specific test while omitting all others. Tests are usually organized into
    sets (groups of tests are also known as fixtures). Luckily, TestCafe provides
    the `fixture.only` and `test.only` methods to specify that only a selected test
    or fixture should be executed and all others should be skipped. Let''s review
    it using our set of tests in a simplified form, with all the test actions commented
    out:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 很常见，在编写或扩展一组测试时，我们需要专注于一个特定的测试，同时忽略所有其他测试。测试通常被组织成集合（测试组也称为固定装置）。幸运的是，TestCafe提供了`fixture.only`和`test.only`方法来指定仅执行选定的测试或固定装置，而其他所有测试将被跳过。让我们以简化形式使用我们的测试集来回顾这一点，其中所有测试操作都被注释掉：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see in the example, `test.only` is used in the `Create a new user`
    test, and `fixture.only` is used in the `Redmine entities deletion tests` fixture,
    so only the `Create a new user`, `Delete the issue`, and `Delete the file` tests
    will be executed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如示例所示，`test.only`在`创建新用户`测试中使用，而`fixture.only`在`Redmine实体删除测试`固定装置中使用，因此只有`创建新用户`、`删除问题`和`删除文件`测试将被执行。
- en: Note
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: If several tests (or fixtures) are marked with `test.only` (or `fixture.only`),
    all the marked tests and fixtures will be executed.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有多个测试（或固定装置）被标记为`test.only`（或`fixture.only`），则所有标记的测试和固定装置都将被执行。
- en: 'In addition to that, TestCafe allows you to use the `test.skip` and `fixture.skip`
    methods to specify a test or a fixture to skip when tests run:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，TestCafe允许您使用`test.skip`和`fixture.skip`方法来指定在运行测试时跳过的测试或固定装置：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As demonstrated in the preceding example, only the `Create a new user` and `Edit
    the issue` tests will be executed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，只有`创建新用户`和`编辑问题`测试将被执行。
- en: Now that we have learned how to execute a particular test or fixture, skipping
    all the others, let's see how test setup and teardown can be done.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何执行特定的测试或固定装置，跳过所有其他测试，让我们看看如何进行测试设置和清理。
- en: Exploring test setup and teardown
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索测试设置和清理
- en: As tests can be quite long and contain a lot of repetitive actions, TestCafe
    has a way to optimize this with test setup and teardown.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于测试可能相当长且包含大量重复操作，TestCafe通过测试设置和清理提供了一种优化方法。
- en: Setup is usually done by executing a number of specific functions (also known
    as hooks) *before* a fixture or test starts (including `fixture.before`, `fixture.beforeEach`,
    and `test.before`).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 设置通常是在固定装置或测试开始之前执行一系列特定函数（也称为钩子）时进行的（包括`fixture.before`、`fixture.beforeEach`和`test.before`）。
- en: Teardown is usually done by executing a number of specific functions *after*
    a fixture or test is completed (including `fixture.after`, `fixture.afterEach`,
    and `test.after`).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 清理通常是在固定装置或测试完成后执行一系列特定函数时进行的（包括`fixture.after`、`fixture.afterEach`和`test.after`）。
- en: There are six methods for using hooks in TestCafe.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在TestCafe中有六种使用钩子的方法。
- en: 'The first two (`fixture.before` and `fixture.after`) do not have access to
    the tested page and thus should be used to perform server-side operations, such
    as preparing the tested application''s server or pre-creating some test data in
    the database:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个（`fixture.before` 和 `fixture.after`）没有访问测试页面，因此应用于执行服务器端操作，例如准备测试应用的服务器或预先在数据库中创建一些测试数据：
- en: '`fixture.before` can be used to specify actions that should be executed before
    the first test in a fixture starts ([https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/before.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/before.html)).
    In the following example, the `createTestData` function will be called before
    the first test of the `My first set of tests` fixture:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixture.before` 可以用来指定在 fixture 中的第一个测试开始之前应执行的操作 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/before.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/before.html)).
    在以下示例中，`createTestData` 函数将在 `My first set of tests` fixture 的第一个测试之前被调用：'
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`fixture.after` can be used to specify actions that should be executed after
    the last test in a fixture is finished ([https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/after.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/after.html)).
    In the following example, the `deleteTestData` function will be called after the
    last test of the `My first set of tests` fixture:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixture.after` 可以用来指定在 fixture 中最后一个测试完成后应执行的操作 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/after.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/after.html)).
    在以下示例中，`deleteTestData` 函数将在 `My first set of tests` fixture 的最后一个测试之后被调用：'
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The next four methods (`fixture.beforeEach`, `fixture.afterEach`, `test.before`,
    and `test.after`) are launched when the tested web page is already loaded, so
    you can execute test actions and other test API methods inside these test hooks:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的四个方法（`fixture.beforeEach`、`fixture.afterEach`、`test.before` 和 `test.after`）在测试的网页已经加载时启动，因此您可以在这些测试钩子内部执行测试操作和其他测试
    API 方法：
- en: '`fixture.beforeEach` can be used to specify actions that should be executed
    before each test in a fixture ([https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/beforeeach.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/beforeeach.html)).
    In the following example, the `click` action will be performed before each test
    of the `My first set of tests` fixture:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixture.beforeEach` 可以用来指定在 fixture 中的每个测试之前应执行的操作 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/beforeeach.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/beforeeach.html)).
    在以下示例中，`click` 操作将在 `My first set of tests` fixture 的每个测试之前执行：'
- en: '[PRE4]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`fixture.afterEach` can be used to specify actions that should be executed
    after each test in a fixture ([https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/aftereach.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/aftereach.html)).
    In the following example, the `click` action will be performed after each test
    of the `My first set of tests` fixture:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixture.afterEach` 可以用来指定在 fixture 中的每个测试之后应执行的操作 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/aftereach.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/aftereach.html)).
    在以下示例中，`click` 操作将在 `My first set of tests` fixture 的每个测试之后执行：'
- en: '[PRE5]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`test.before` can be used to specify actions that should be executed before
    a particular test ([https://devexpress.github.io/testcafe/documentation/reference/test-api/test/before.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/test/before.html)).
    In the following example, the `click` action will be performed before the `My
    first Test` test:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.before` 可以用来指定在特定测试之前应执行的操作 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/test/before.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/test/before.html)).
    在以下示例中，`click` 操作将在 `My first Test` 测试之前执行：'
- en: '[PRE6]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`test.after` can be used to specify actions that should be executed after a
    particular test ([https://devexpress.github.io/testcafe/documentation/reference/test-api/test/after.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/test/after.html)).
    In the following example, the `click` action will be performed after the `My first
    Test` test:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.after` 可以用来指定在特定测试之后应执行的操作 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/test/after.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/test/after.html)).
    在以下示例中，`click` 操作将在 `My first Test` 测试之后执行：'
- en: '[PRE7]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: If a test runs in several browsers, test hooks are executed in each browser.
    If both the `fixture.beforeEach` and `test.before` (or `fixture.afterEach` and
    `test.after`) hooks are used together, the most specific hook will overrule. So,
    `test.before` (or `test.after`) will be executed and `fixture.beforeEach` (or
    `fixture.afterEach`) will be omitted and will not run for this test.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果一个测试在多个浏览器中运行，测试钩子将在每个浏览器中执行。如果同时使用了`fixture.beforeEach`和`test.before`（或`fixture.afterEach`和`test.after`）钩子，则最具体的钩子将覆盖。因此，`test.before`（或`test.after`）将被执行，`fixture.beforeEach`（或`fixture.afterEach`）将被省略，并且不会为此测试运行。
- en: You can read more about the hooks at [https://devexpress.github.io/testcafe/documentation/guides/basic-guides/organize-tests.html#initialization-and-clean-up](https://devexpress.github.io/testcafe/documentation/guides/basic-guides/organize-tests.html#initialization-and-clean-up).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://devexpress.github.io/testcafe/documentation/guides/basic-guides/organize-tests.html#initialization-and-clean-up](https://devexpress.github.io/testcafe/documentation/guides/basic-guides/organize-tests.html#initialization-and-clean-up)了解更多关于钩子的信息。
- en: In this section, we went through the types of hooks that are available in TestCafe.
    Now, let's put this knowledge into practice by applying it to our set of tests.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了TestCafe中可用的钩子类型。现在，让我们将这一知识应用到我们的测试集中。
- en: Adding setup and teardown to the test project
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将设置和清理添加到测试项目
- en: In this section, we will see how to optimize our test project code with setup
    and teardown blocks.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何通过设置和清理块来优化我们的测试项目代码。
- en: 'As we saw in the *Exploring test setup and teardown* section, `fixture.beforeEach`
    can specifically be useful when each of the tests needs a user to be logged in
    before the test. That''s exactly our case, so let''s add the `beforeEach` block
    to the `Redmine entities creation tests` fixture:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在*探索测试设置和清理*部分中看到的，`fixture.beforeEach`在需要用户在测试之前登录的每个测试中特别有用。这正是我们的情况，因此让我们将`beforeEach`块添加到`Redmine
    entities creation tests`测试用例中：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s also remove the login actions from all the tests of the `Redmine entities
    creation tests` fixture, as these actions will be executed in the `beforeEach`
    block. So, the `Create a new project` test will look like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也从`Redmine entities creation tests`测试用例的所有测试中移除登录操作，因为这些操作将在`beforeEach`块中执行。因此，`创建一个新项目`测试将看起来像这样：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After all login actions were moved to the `beforeEach` block, the `Create`
    `a new` `issue` test will look like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有登录操作都移动到`beforeEach`块之后，`创建一个新问题`测试将看起来像这样：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And the `Verify that the issue is displayed on a project page` test, without
    login actions, will look like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 并且没有登录操作的`验证问题是否显示在项目页面上`测试将看起来像这样：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And finally, the `Upload a file` test without login actions will look like
    this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，没有登录操作的`上传文件`测试将看起来像这样：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, let''s add the `beforeEach` block to the `Redmine entities editing tests`
    fixture:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将`beforeEach`块添加到`Redmine entities editing tests`测试用例中：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s also remove the login actions from all the tests of the `Redmine entities
    editing tests` fixture, as this action will now be executed in the `beforeEach`
    block. So, the `Edit the issue` test will look like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也从`Redmine entities editing tests`测试用例的所有测试中移除登录操作，因为这个操作现在将在`beforeEach`块中执行。因此，`编辑问题`测试将看起来像这样：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'All login actions were moved to the `beforeEach` block, so the `Verify that
    the updated issue is displayed on a project page` test will look like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所有登录操作都已移动到`beforeEach`块，因此`验证更新的问题是否显示在项目页面上`测试将看起来像这样：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `Search for the issue` test without all login actions will look like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 没有所有登录操作的`搜索问题`测试将看起来像这样：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, let''s add the `beforeEach` block to the `Redmine entities deletion tests`
    fixture:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将`beforeEach`块添加到`Redmine entities deletion tests`测试用例中：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s also remove the login actions from all the tests of the `Redmine entities
    deletion tests` fixture, as these actions will now be executed in the `beforeEach`
    block. So, the `Delete the issue` test will look like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也从`Redmine entities deletion tests`测试用例的所有测试中移除登录操作，因为这些操作现在将在`beforeEach`块中执行。因此，`删除问题`测试将看起来像这样：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And the `Delete the file` test, after all login actions were moved to the `beforeEach`
    block, will look like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有登录操作都移动到`beforeEach`块之后，`删除文件`测试将看起来像这样：
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can also review and download this file on GitHub at [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch5/test-project/tests/basic-tests17.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch5/test-project/tests/basic-tests17.js).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在GitHub上查看和下载此文件：[https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch5/test-project/tests/basic-tests17.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch5/test-project/tests/basic-tests17.js)。
- en: As we have integrated setup and teardown blocks, let's see how to run tests
    with command-line settings.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经集成了设置和清理块，让我们看看如何使用命令行设置运行测试。
- en: Running tests with command-line settings
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行设置运行测试
- en: As we already learned in [*Chapter 3*](B16280_03_Final_JM_ePub.xhtml#_idTextAnchor043),
    *Setting Up the Environment*, when you trigger tests by executing the `testcafe`
    command, TestCafe reads settings from the `.testcaferc.json` configuration file,
    if this file exists, and then applies the settings from the command line on top
    of it. Command-line settings overrule values from the configuration file if they
    differ. TestCafe outputs information about each overridden property to the console.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[*第3章*](B16280_03_Final_JM_ePub.xhtml#_idTextAnchor043)，“设置环境”中已经学到的，当你通过执行
    `testcafe` 命令来触发测试时，TestCafe会从 `.testcaferc.json` 配置文件中读取设置，如果该文件存在，然后在此基础上应用命令行设置。如果命令行设置与配置文件中的值不同，则命令行设置会覆盖配置文件中的值。TestCafe会将每个覆盖属性的信息输出到控制台。
- en: Note
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If the `browsers` and `src` properties are provided in the configuration file,
    you can omit them in the command line.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在配置文件中提供了 `browsers` 和 `src` 属性，则可以在命令行中省略它们。
- en: 'Let''s review some of the main command-line settings that can be used with
    the `testcafe` command while launching the tests:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下在启动测试时可以使用 `testcafe` 命令的一些主要命令行设置：
- en: '`--help`, or `-h`, outputs a list of all the available command-line options
    ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-h---help](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-h---help)).
    Open any shell and run the following:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--help` 或 `-h` 输出所有可用命令行选项的列表（[https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-h---help](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-h---help)）。打开任何shell并运行以下命令：'
- en: '[PRE20]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`--quarantine-mode`, or `-q`, enables quarantine mode for tests that fail ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-q---quarantine-mode](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-q---quarantine-mode)).
    Open any shell and run the following:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--quarantine-mode` 或 `-q` 为失败的测试启用隔离模式（[https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-q---quarantine-mode](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-q---quarantine-mode)）。打开任何shell并运行以下命令：'
- en: '[PRE21]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`--debug-mode`, or `-d`, executes test steps one by one, pausing the test after
    each step for debugging ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-d---debug-mode](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-d---debug-mode)).
    Open any shell and run the following:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--debug-mode` 或 `-d` 逐个执行测试步骤，在每个步骤后暂停测试以进行调试（[https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-d---debug-mode](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-d---debug-mode)）。打开任何shell并运行以下命令：'
- en: '[PRE22]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`--debug-on-fail`: If a test fails, automatically pause it and enter debug
    mode ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--debug-on-fail](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--debug-on-fail)).
    Open any shell and run the following:'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--debug-on-fail`：如果测试失败，则自动暂停并进入调试模式（[https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--debug-on-fail](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--debug-on-fail)）。打开任何shell并运行以下命令：'
- en: '[PRE23]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`--disable-page-caching` disables browser page caching during test execution
    ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--disable-page-caching](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--disable-page-caching)).
    Open any shell and run the following:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--disable-page-caching` 在测试执行期间禁用浏览器页面缓存（[https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--disable-page-caching](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--disable-page-caching)）。打开任何shell并运行以下命令：'
- en: '[PRE24]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`--skip-js-errors`, or `-e`, makes sure tests don''t fail when a JavaScript
    error occurs on a tested page ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-e---skip-js-errors](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-e---skip-js-errors)).
    Open any shell and run the following:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--skip-js-errors`, 或 `-e`，确保在测试页面发生JavaScript错误时测试不会失败（[https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-e---skip-js-errors](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-e---skip-js-errors)）。打开任何shell并运行以下命令：'
- en: '[PRE25]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`--skip-uncaught-errors`, or `-u`, ignores uncaught errors and unhandled promise
    rejections that occur during test execution ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-u---skip-uncaught-errors](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-u---skip-uncaught-errors)).
    Open any shell and run the following:'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--skip-uncaught-errors`，或 `-u`，忽略测试执行期间发生的未捕获错误和未处理的承诺拒绝（[https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-u---skip-uncaught-errors](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-u---skip-uncaught-errors)）。打开任何shell并运行以下命令：'
- en: '[PRE26]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`--test <name>`, or `-t <name>`, only runs tests with the specified name ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-t-name---test-name](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-t-name---test-name)).
    Open any shell and run the following:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--test <name>`，或 `-t <name>`，仅运行具有指定名称的测试用例（[https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-t-name---test-name](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-t-name---test-name)）。打开任何shell并运行以下命令：'
- en: '[PRE27]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`--test-grep <pattern>`, or `-T <pattern>`, only runs tests matching the specified
    pattern ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-t-pattern---test-grep-pattern](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-t-pattern---test-grep-pattern)).
    For example, to run tests whose names are `Click a link`, `Click a dropdown`,
    and so on, open any shell and run the following:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--test-grep <pattern>`，或 `-T <pattern>`，仅运行与指定模式匹配的测试用例（[https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-t-pattern---test-grep-pattern](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-t-pattern---test-grep-pattern)）。例如，要运行名为`Click
    a link`、`Click a dropdown`等测试用例，打开任何shell并运行以下命令：'
- en: '[PRE28]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`--fixture <name>`, or `-f <name>`, only runs tests from the fixtures with
    the specified name ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-f-name---fixture-name](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-f-name---fixture-name)).
    Open any shell and run the following:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--fixture <name>`，或 `-f <name>`，仅运行具有指定名称的固定测试用例（[https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-f-name---fixture-name](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-f-name---fixture-name)）。打开任何shell并运行以下命令：'
- en: '[PRE29]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`--fixture-grep <pattern>`, or `-F <pattern>`, only runs tests from the fixtures
    matching the specified pattern ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-f-pattern---fixture-grep-pattern](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-f-pattern---fixture-grep-pattern)).
    For example, to run tests from the fixtures whose names are `Suite1`, `Suite2`,
    and so on, open any shell and run the following:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--fixture-grep <pattern>`，或 `-F <pattern>`，仅运行与指定模式匹配的固定测试用例（[https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-f-pattern---fixture-grep-pattern](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-f-pattern---fixture-grep-pattern)）。例如，要运行名为`Suite1`、`Suite2`等固定测试用例的测试，打开任何shell并运行以下命令：'
- en: '[PRE30]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`--test-meta <key=value[,key2=value2,...]>` runs tests whose metadata matches
    the specified key-value pair ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--test-meta-keyvaluekey2value2](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--test-meta-keyvaluekey2value2)).
    For example, to run tests whose metadata''s `suite` property is set to `fast`
    and `env` property is set to `staging`, open any shell and run the following:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--test-meta <key=value[,key2=value2,...]>` 运行其元数据与指定键值对匹配的测试用例（[https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--test-meta-keyvaluekey2value2](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--test-meta-keyvaluekey2value2)）。例如，要运行元数据的`suite`属性设置为`fast`且`env`属性设置为`staging`的测试用例，打开任何shell并运行以下命令：'
- en: '[PRE31]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '`--fixture-meta <key=value[,key2=value2,...]>` runs tests from fixtures whose
    metadata matches the specified key-value pair ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--fixture-meta-keyvaluekey2value2](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--fixture-meta-keyvaluekey2value2)).
    For example, to run tests from fixtures whose metadata''s `suite` property is
    set to `long` and `env` property is set to `production`, open any shell and run
    the following:'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--fixture-meta <key=value[,key2=value2,...]>` 从符合指定键值对的元数据的测试用例中运行测试 ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--fixture-meta-keyvaluekey2value2](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--fixture-meta-keyvaluekey2value2)).
    例如，要运行设置 `suite` 属性为 `long` 和 `env` 属性为 `production` 的元数据的测试用例，打开任何shell并运行以下命令：'
- en: '[PRE32]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '`--app <command>`, or `-a <command>`, executes the specified shell command
    before tests are started, and is often used to launch the tested app using the
    specified command before running tests ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-a-command---app-command](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-a-command---app-command)).
    Open any shell and run the following:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--app <command>` 或 `-a <command>` 在测试开始之前执行指定的shell命令，通常用于在运行测试之前使用指定的命令启动测试应用
    ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-a-command---app-command](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-a-command---app-command))。打开任何shell并运行以下命令：'
- en: '[PRE33]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`--concurrency <number>`, or `-c <number>`, runs tests in parallel (concurrently)
    by spawning the provided number of browser instances ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-c-n---concurrency-n](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-c-n---concurrency-n)).
    Open any shell and run the following:'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--concurrency <number>` 或 `-c <number>` 通过启动提供的浏览器实例数量并行（同时）运行测试 ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-c-n---concurrency-n](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-c-n---concurrency-n))。打开任何shell并运行以下命令：'
- en: '[PRE34]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`--speed <factor>` sets the speed of test execution from the slowest, `0.01`,
    to the fastest, `1` ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--speed-factor](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--speed-factor)).
    Open any shell and run the following:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--speed <factor>` 设置测试执行的速率，从最慢的 `0.01` 到最快的 `1` ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--speed-factor](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--speed-factor))。打开任何shell并运行以下命令：'
- en: '[PRE35]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: You can read more about all the command-line options at [https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html)
    上阅读有关所有命令行选项的更多信息。
- en: It is good practice to keep all the major settings in the `.testcaferc.json`
    configuration file, overriding them with command-line settings when needed – for
    example, a combination of `--debug-on-fail --speed 0.8` will be quite convenient
    for debugging.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有主要设置保留在 `.testcaferc.json` 配置文件中是一种良好的实践，在需要时用命令行设置覆盖它们 - 例如，`--debug-on-fail
    --speed 0.8` 的组合将非常方便用于调试。
- en: To sum up, in this section we learned about some of the main command-line settings
    and how they can be used when launching tests.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在本节中，我们了解了一些主要的命令行设置以及它们在启动测试时的使用方法。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored how to execute tests selectively, as well as how
    to generalize some test actions with the help of test setup and teardown. Also,
    we reviewed some command-line settings to run tests. Now we have an improved test
    suite and know how to run it with command-line options.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何选择性地执行测试，以及如何通过测试设置和清理来泛化一些测试操作。此外，我们还回顾了一些用于运行测试的命令行设置。现在我们有一个改进的测试套件，并知道如何使用命令行选项来运行它。
- en: In the next chapter, we will continue to refine our test suite by moving some
    test logic to separate functions and refactoring tests with `PageObjects`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过将一些测试逻辑移动到单独的函数中，并使用 `PageObjects` 重构测试来继续改进我们的测试套件。
