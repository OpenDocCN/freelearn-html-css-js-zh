- en: Chapter 14\. Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。测试
- en: Automated testing is a critical part of software development. Even though it
    cannot (and it’s not intended) to replace manual testing and other quality assurance
    methods. Automated testing is a very valuable tool when used properly, to avoid
    regressions, bugs, or incorrect functionality.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试是软件开发的关键部分。尽管它不能（也不打算）取代手动测试和其他质量保证方法。当正确使用时，自动化测试是一个非常有价值的工具，可以避免回归、错误或不正确的功能。
- en: 'Software development is a tricky discipline: even though many developers try
    to isolate different parts of software, it’s often unavoidable that some pieces
    of the puzzle have effect on other pieces, be it intended or unintended.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发是一门棘手的学科：尽管许多开发人员试图隔离软件的不同部分，但往往不可避免地，一些拼图的部分会对其他部分产生影响，无论是有意还是无意。
- en: One of the main goals of using automated testing is to detect the kind of errors
    in which new code might break previously working functionality. These tests are
    known as *regression tests,* and they make the most sense when triggered as part
    of the merging or deployment process, as a required step. This means that, if
    the automated tests fail, the merge or deployment will be interrupted, thus avoiding
    the introduction of new bugs to the main codebase or to productive environments.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自动化测试的主要目标之一是检测新代码可能破坏先前工作功能的错误类型。这些测试被称为*回归测试*，当作为合并或部署过程的一部分触发时，它们是最有意义的。这意味着，如果自动化测试失败，合并或部署将被中断，从而避免向主代码库或生产环境引入新错误。
- en: Automated testing also enables a developmental workflow known as *test driven
    development (TDD.)* When following a TDD approach, automated tests are written
    beforehand, as very specific cases that reflect the requirements. Once the new
    tests are written, the developer runs *all tests;* the new ones should fail, since
    no new code has been written yet. At that point it’s when the new code has to
    be written so that the new tests pass, while not breaking the old ones.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试还可以实现一种被称为*测试驱动开发（TDD）*的开发工作流程。在遵循TDD方法时，自动化测试是事先编写的，作为反映需求的非常具体的案例。新测试编写完成后，开发人员运行*所有测试*；新测试应该失败，因为尚未编写新代码。在这一点上，新代码必须被编写，以便新测试通过，同时不破坏旧测试。
- en: The test driven development approach, if done right, can improve the confidence
    in code quality and requirement compliance. They can also make refactoring or
    even full code migrations, less risky.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果正确执行测试驱动开发方法，可以提高对代码质量和需求符合的信心。它们还可以使重构甚至完整的代码迁移变得不那么冒险。
- en: 'There are two main types of automated tests we are going to cover in this book:
    unit tests and end-to-end tests.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将涵盖两种主要类型的自动化测试：单元测试和端到端测试。
- en: Unit testing
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: 'As the name implies, each unit test cover one specific functionality. The most
    important principles when dealing with unit tests are:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，每个单元测试覆盖一个特定的功能。处理单元测试时最重要的原则是：
- en: '**isolation;** each component has to be tested without any other related components;
    it cannot be affected by side effects and, likewise, it cannot emit any side effects.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离；**每个组件必须在没有任何其他相关组件的情况下进行测试；它不能受到副作用的影响，同样，它也不能产生任何副作用。'
- en: '**predictability;** each test has to yield the same results as long as the
    input doesn’t change.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可预测性；**每个测试必须产生相同的结果，只要输入不改变。'
- en: In many cases, complying with these two principles means *mocking* (i.e. simulating
    the functionality of) the component dependencies.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，遵守这两个原则意味着*模拟*（即模拟组件依赖的功能）。
- en: Tooling
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具
- en: Unlike Angular, Nest.js doesn’t have an “official” toolset for running tests;
    this means we are free to set up our own tooling for running automated tests when
    we work in Nest.js projects.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与Angular不同，Nest.js没有用于运行测试的“官方”工具集；这意味着我们可以自由设置我们自己的工具，用于在Nest.js项目中运行自动化测试。
- en: There are multiple tools in the JavaScript ecosystem focused on writing and
    running automated unit tests. The typical solutions involve using several different
    packages for one setup, because those packages used to be limited in their scope
    (one for test running, a second one for assertions, a third one for mocking, maybe
    even another one for code coverage reporting).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript生态系统中有多个专注于编写和运行自动化单元测试的工具。典型的解决方案涉及使用多个不同的包进行设置，因为这些包在范围上受限（一个用于测试运行，第二个用于断言，第三个用于模拟，甚至可能还有一个用于代码覆盖报告）。
- en: We will, however, be using [Jest](https://facebook.github.io/jest/), an “all-in-one”,
    “zero-configuration” testing solution from Facebook that has greatly decreased
    the amount of configuration effort needed for running automated tests. It also
    officially supports TypeScript so it’s a great match for Nest.js projects!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们将使用[ Jest ](https://facebook.github.io/jest/)，这是来自Facebook的“一体化”，“零配置”测试解决方案，大大减少了运行自动化测试所需的配置工作量。它还官方支持TypeScript，因此非常适合Nest.js项目！
- en: Preparation
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: 'As you would expect, Jest is distributed as an npm package. Let’s go and install
    it in our project. Run the following command from your command line or terminal:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所期望的，Jest被分发为一个npm包。让我们在我们的项目中安装它。从命令行或终端运行以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We are installing three different npm packages as development dependencies:
    Jest itself; `ts-jest` that allows us to use Jest with our TypeScript code; and
    the Jest typings for their valuable contribution to our IDE experience!'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在安装三个不同的npm包作为开发依赖项：Jest本身；`ts-jest`，它允许我们在TypeScript代码中使用Jest；以及Jest的类型定义，对于我们的IDE体验做出了宝贵的贡献！
- en: 'Remember how we mentioned that Jest is a “zero-configuration” testing solution?
    Well, this is what their homepage claims. Unfortunately, it’s not entirely true:
    we still need to define a little amount of configuration before we are able to
    run our tests. In our case, this is mostly because we are using TypeScript. On
    the other hand, the configuration we need to write is really not that much, so
    we can write it as a plain JSON object.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们提到 Jest 是一个“零配置”测试解决方案吗？这是他们主页上宣称的。不幸的是，这并不完全正确：在我们能够运行测试之前，我们仍然需要定义一些配置。在我们的情况下，这主要是因为我们使用了
    TypeScript。另一方面，我们需要编写的配置实际上并不多，所以我们可以将其编写为一个普通的 JSON 对象。
- en: So, let’s create a new JSON file in our project’s root folder, which we will
    name `nest.json`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们在项目的根文件夹中创建一个名为 `nest.json` 的新的 JSON 文件。
- en: '**`/nest.json`**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**`/nest.json`**'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This small JSON file is setting up the following configuration:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小的 JSON 文件设置了以下配置：
- en: Established files with `.js`, `.ts` and `.json` as modules (i.e. code) of our
    app. You might think we would not need `.js` files, but the truth is that our
    code will not run without that extension, because of some of Jest’s own dependencies.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `.js`、`.ts` 和 `.json` 文件作为我们应用程序的模块（即代码）进行了配置。你可能会认为我们不需要 `.js` 文件，但事实上，由于
    Jest 自身的一些依赖关系，我们的代码没有这个扩展名就无法运行。
- en: Tells Jest to process files with a `.ts` extension using the `ts-jest` package
    (which was installed before from the command line).
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉 Jest 使用 `ts-jest` 包处理扩展名为 `.ts` 的文件（这个包在之前已经从命令行安装过）。
- en: Specifies that our test files will be inside the `/src` folder, and will have
    either the `.test.ts` or the `.spec.ts` files extension.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定我们的测试文件将位于 `/src` 文件夹中，并且将具有 `.test.ts` 或 `.spec.ts` 文件扩展名。
- en: Instructs Jest to generate code coverage reports from any `.ts` file on the
    `/src` folder, while ignoring the `node_modules` and the `vendor` folder contents.
    Also, to generate coverage it reports in both `JSON` and `LCOV` formats.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指示 Jest 从 `/src` 文件夹中的任何 `.ts` 文件生成代码覆盖报告，同时忽略 `node_modules` 和 `vendor` 文件夹中的内容。此外，生成的覆盖报告格式为
    `JSON` 和 `LCOV`。
- en: 'Finally, the last step before we can start writing tests will be to add a couple
    of new scripts to your `package.json` file:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们开始编写测试之前的最后一步是向你的 `package.json` 文件中添加一些新的脚本：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The three new scripts will, respectively: run the tests once, run the tests
    in watch mode (they will run after each file save), and run the tests and generate
    the code coverage report (which will be output in a `coverage` folder).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个新的脚本将分别：运行一次测试，以观察模式运行测试（它们将在每次文件保存后运行），以及运行测试并生成代码覆盖报告（将输出到一个 `coverage`
    文件夹中）。
- en: '**NOTE:** Jest receives its configuration as a `jest` property in the `package.json`
    file. If you decide to do things that way, you will need to omit the `--config=jest.json`
    arguments on your npm scripts.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** Jest 将其配置作为 `package.json` 文件中的 `jest` 属性接收。如果你决定以这种方式做事情，你将需要在你的 npm
    脚本中省略 `--config=jest.json` 参数。'
- en: 'Our testing environment is ready. If we now run `npm test` in our project folder,
    we will most likely see the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试环境已经准备好了。如果我们现在在项目文件夹中运行 `npm test`，我们很可能会看到以下内容：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The tests have failed! Well, they actually haven’t; we just have not written
    any tests yet! Let’s write some now.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 测试失败了！好吧，其实并没有失败；我们只是还没有写任何测试！现在让我们来写一些测试。
- en: Writing our first test
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写我们的第一个测试
- en: 'If you have read some more chapters of the book, you probably remember our
    blog entries and the code we wrote for them. Let’s take a look back to the `EntryController`.
    Depending on the chapters, the code looked something like the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经阅读了本书的更多章节，你可能还记得我们的博客条目以及我们为它们编写的代码。让我们回顾一下 `EntryController`。根据章节的不同，代码看起来可能是这样的：
- en: '**`/src/modules/entry/entry.controller.ts`**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**`/src/modules/entry/entry.controller.ts`**'
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that this controller is a dependency to `EntriesService`. Since we mentioned
    that each component has to be tested in *isolation*, we will need to mock any
    dependency it might have; in this case, the `EntriesService`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个控制器是 `EntriesService` 的一个依赖项。由于我们提到每个组件都必须在*隔离*中进行测试，我们需要模拟它可能具有的任何依赖项；在这种情况下，是
    `EntriesService`。
- en: Let’s write a unit test for the controller’s `findAll()` method. We will be
    using a special Nest.js package called `@nestjs/testing`, which will alow us to
    wrap our service in a Nest.js module specially for the test.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为控制器的 `findAll()` 方法编写一个单元测试。我们将使用一个名为 `@nestjs/testing` 的特殊 Nest.js 包，它将允许我们为测试专门包装我们的服务在一个
    Nest.js 模块中。
- en: Also, it’s important to follow the convention and name the test file `entry.controller.spec.ts`,
    and place it next to the `entry.controller.ts` file, so it gets properly detected
    by Jest when we trigger a test run.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，遵循约定并将测试文件命名为 `entry.controller.spec.ts`，并将其放在 `entry.controller.ts` 文件旁边，这样当我们触发测试运行时
    Jest 就能正确地检测到它。
- en: '**`/src/modules/entry/entry.controller.spec.ts`**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**`/src/modules/entry/entry.controller.spec.ts`**'
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let’s now take a close look at what the test code is achieving.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们仔细看一下测试代码实现了什么。
- en: First of all, we are declaring a test suite on `describe('EntriesController',
    () => {`. We also declare a couple of variables, `entriesController` and `entriesSrv`,
    to hold both the tested controller itself, as well as the service the controller
    depends on.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在 `describe('EntriesController', () => {` 上声明了一个测试套件。我们还声明了一些变量，`entriesController`
    和 `entriesSrv`，分别用来保存被测试的控制器本身以及控制器所依赖的服务。
- en: Then, it comes the `beforeEach` method. The code inside that method will be
    executed right before each of the following tests are run. In that code, we are
    instantiating a Nest.js module for each test. Note that this is a particular kind
    of module, since we are using the `.createTestingModule()` method from the `Test`
    class that comes from the `@nestjs/testing` package. So, let’s think about this
    module as a “mock module,” which will serve us for testing purposes only.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 `beforeEach` 方法。该方法中的代码将在每个测试运行之前执行。在这段代码中，我们为每个测试实例化了一个 Nest.js 模块。请注意，这是一种特殊类型的模块，因为我们使用了来自
    `@nestjs/testing` 包的 `Test` 类的 `.createTestingModule()` 方法。因此，让我们把这个模块看作是一个“模拟模块”，它只用于测试目的。
- en: 'Now comes the fun part: we include the `EntriesController` as a controller
    in the testing module. We then proceed to use:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是有趣的部分：我们在测试模块中将`EntriesController`作为控制器包含进来。然后我们继续使用：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This substitutes the original `EntryService`, which is a dependency of our tested
    controller. This is for a mock version of the service, which is not even a class,
    since we don’t need it to be, but rather an object with a `findAll` method that
    takes no arguments and returns null.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这替换了原始的`EntryService`，它是我们测试的控制器的一个依赖项。这是服务的模拟版本，甚至不是一个类，因为我们不需要它是一个类，而是一个没有参数并返回null的`findAll`方法的对象。
- en: You can think of the result of the two code lines above as an empty, dumb service
    that only repeats the methods we will need to use later, without any implementation
    inside.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将上述两行代码的结果视为一个空的、愚蠢的服务，它只重复我们以后需要使用的方法，而没有任何实现内部。
- en: Finally, the `.compile()` method is the one that actually instantiates the module,
    so it gets bound to the `module` constant.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`.compile()`方法是实际实例化模块的方法，因此它绑定到`module`常量。
- en: Once the module is properly instantiated, we can bind our previous `entriesController`
    and `entriesSrv` variables to the instances of the controller and the service
    inside the module. This is achieved with the `module.get` method call.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模块正确实例化，我们就可以将先前的`entriesController`和`entriesSrv`变量绑定到模块内控制器和服务的实例上。这是通过调用`module.get`方法实现的。
- en: 'Once all this initial setup is done, we are good to start writing some actual
    tests. Let’s implement one that checks whether the `findAll()` method in our controller
    correctly returns an array of entries, even if we only have one entry:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有这些初始设置都完成了，我们就可以开始编写一些实际的测试了。让我们实现一个检查我们的控制器中的`findAll()`方法是否正确返回条目数组的测试，即使我们只有一个条目：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `describe('findAll', () => {` line is the one that starts the actual test
    suite. We expect the resolved value of `entriesController.findAll()` to be an
    array. This is basically how we wrote the code in the first place, so it should
    work, right? Let’s run the tests with `npm test` and check the test output.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe(''findAll'', () => {`行是开始实际测试套件的行。我们期望`entriesController.findAll()`的解析值是一个数组。这基本上是我们最初编写代码的方式，所以应该可以工作，对吧？让我们用`npm
    test`运行测试并检查测试输出。'
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It failed... Well, of course it failed! Remember the `beforeEach()` method?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 它失败了... 好吧，当然失败了！记得`beforeEach()`方法吗？
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We told Nest.js to exchange the original `findAll()` method in the service for
    another one that returns just `null`. We will need to tell Jest to mock that method
    with something that returns an array, so to check that when the `EntriesService`
    returns an array, the controller is in fact returning that result as an array
    as well.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们告诉Nest.js将服务中的原始`findAll()`方法替换为另一个只返回`null`的方法。我们需要告诉Jest用返回数组的东西来模拟该方法，以便检查当`EntriesService`返回一个数组时，控制器实际上也将该结果作为数组返回。
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In order to mock the `findAll()` method from the service, we are using two Jest
    methods. `spyOn()` takes an object and a method as arguments, and starts watching
    the method for its execution (in other words, sets up a *spy*). And `mockImplementationOnce()`,
    which as its name implies changes the implementation of the method when it’s next
    called (in this case, we change it to return an array of one empty object.)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟服务中的`findAll()`方法，我们使用了两个Jest方法。`spyOn()`接受一个对象和一个方法作为参数，并开始监视该方法的执行（换句话说，设置一个*spy*）。`mockImplementationOnce()`，顾名思义，当下一次调用该方法时改变方法的实现（在这种情况下，我们将其更改为返回一个空对象的数组）。
- en: 'Let’s try to run the test again with `npm test`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试再次用`npm test`运行测试：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The test is passing now, so you can be sure that the `findAll()` method on the
    controller will always behave itself and return an array, so that other code components
    that depend on this output being an array won’t break themselves.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 测试现在通过了，因此您可以确信控制器上的`findAll()`方法将始终表现自如，并返回一个数组，以便依赖于该输出为数组的其他代码组件不会自己破坏。
- en: If this test started to fail at some point in the future, it would mean that
    we had introduced a regression in our codebase. One of the great sides of automated
    testing is that we will be notified about this regression before it’s too late.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个测试在将来的某个时刻开始失败，那将意味着我们在代码库中引入了一个回归。自动化测试的一个很大的好处是，在为时已晚之前，我们将收到有关此回归的通知。
- en: Testing for equality
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试相等性
- en: Up until this point, we are sure that `EntriesController.findAll()` returns
    an array. We can’t be sure that it’s not an array of empty objects, or an array
    of booleans, or just an empty array. In other words, we could rewrite the method
    to something like `findAll() { return []; }` and the test would still pass.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 直到这一点，我们可以确定`EntriesController.findAll()`返回一个数组。我们无法确定它不是一个空对象数组，或者一个布尔值数组，或者只是一个空数组。换句话说，我们可以将该方法重写为`findAll()
    { return []; }`，测试仍然会通过。
- en: So, let’s improve our tests to check that the method really returns the output
    from the service, without messing things up.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们改进我们的测试，以检查该方法是否真的返回了来自服务的输出，而不会搞乱事情。
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We just kept most of the test file as it was before, although we did add a
    new test, the last one, in which:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们保留了大部分测试文件之前的内容，尽管我们添加了一个新的测试，最后一个测试，在其中：
- en: We set an array of one *not-empty* object (the `result` constant).
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们设置了一个包含一个*非空*对象（`result`常量）的数组。
- en: We mock the implementation of the service’s `findAll()` method once again to
    return that `result`.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们再次模拟服务的`findAll()`方法的实现，以返回该`result`。
- en: We check that the controller returns the `result` object exactly as the original
    when called. Note that we are using the Jest’s `.toEqual()` method which, unlike
    `.toBe()`, performs a deep equality comparison between both objects for all of
    their properties.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们检查控制器在调用时是否确实像原始的那样返回`result`对象。请注意，我们使用了Jest的`.toEqual()`方法，它与`.toBe()`不同，它对两个对象的所有属性进行深度相等比较。
- en: 'This is what we get when we run `npm test` again:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们再次运行`npm test`时得到的结果：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Both our tests pass. We accomplished quite a lot already. Now that we have a
    solid foundation, extending our tests to cover as many test cases as possible
    will be an easy task.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的两个测试都通过了。我们已经取得了相当大的成就。现在我们有了一个坚实的基础，将测试扩展到尽可能多的测试用例将是一项容易的任务。
- en: Of course, we have only written a test for a controller. But testing services
    and the rest of the pieces of our Nest.js app works the same way.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们只为一个控制器编写了一个测试。但测试服务和我们的Nest.js应用程序的其余部分的工作方式是相同的。
- en: Covering our code in tests
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在测试中覆盖我们的代码
- en: One critical aspect in code automation is code coverage reporting. Because,
    how do you know that your tests actually cover as many test cases as possible?
    Well, the answer is checking code coverage.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 代码自动化中的一个关键方面是代码覆盖报告。因为，你怎么知道你的测试实际上覆盖了尽可能多的测试用例？嗯，答案就是检查代码覆盖率。
- en: If you want to be really confident in your tests as a regression detection systems,
    make sure that they cover as much functionality as possible. Let’s imagine we
    have a class with five methods and we only write tests for two of them. We would
    have roughly two-fifths of the code covered with tests, which means that we won’t
    have any insights about the other three-fifths, and about whether they still work
    as our codebase keeps on growing.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望对您的测试作为回归检测系统有真正的信心，确保它们尽可能多地覆盖功能。让我们想象一下，我们有一个有五个方法的类，我们只为其中两个编写了测试。我们大约覆盖了五分之二的代码，这意味着我们对另外三分之二没有任何了解，也不知道随着代码库的不断增长它们是否仍然有效。
- en: Code coverage engines analyze our code and tests together, and check the amount
    of lines, statements, and branches that are covered by the tests running in our
    suites, returning a percentage value.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 代码覆盖引擎分析我们的代码和测试，并检查测试套件中运行的测试覆盖的行数、语句和分支的数量，返回一个百分比值。
- en: As mentioned in previous sections, Jest already includes code coverage reporting
    out of the box, you just need to activate it by passing a `--coverage` argument
    to the `jest` command.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几节所述，Jest已经默认包含代码覆盖报告，您只需要通过向`jest`命令传递`--coverage`参数来激活它。
- en: 'Let’s add a script in our `package.json` file that, when executed, will generate
    the coverage report:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`package.json`文件中添加一个脚本，当执行时将生成覆盖报告：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When running `npm run test:coverage` on the controller written before, you
    will see the following output:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前编写的控制器上运行`npm run test:coverage`，您将看到以下输出：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In order to have a better vision of the console output within this book, we
    will transform the console output to a proper table.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地了解本书中的控制台输出，我们将把控制台输出转换成一个合适的表格。
- en: '| File | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 文件 | % 语句 | % 分支 | % 函数 | % 行 | 未覆盖的行号 |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| All files | 100 | 66.67 | 100 | 100 |  |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 所有文件 | 100 | 66.67 | 100 | 100 |  |'
- en: '| entry.controller.ts | 100 | 66.67 | 100 | 100 | 6 |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| entry.controller.ts | 100 | 66.67 | 100 | 100 | 6 |'
- en: You can easily see we are covering 100% of our code lines in our tests. This
    makes sense since we wrote two tests for the only method in our controller.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以很容易地看到，我们在测试中覆盖了100%的代码行。这是有道理的，因为我们为控制器中唯一的方法编写了两个测试。
- en: Failing tests for low coverage
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 覆盖率低的失败测试
- en: Let’s imagine now that we work in a complex project with several developers
    working on the same base at the same time. Let’s imagine also that our workflow
    includes a Continuous Integration/Continuous Delivery pipeline, running on something
    like Travis CI, CircleCI, or even Jenkins. Our pipeline would likely include a
    step that runs our automated tests before merging or deploying, so that the pipeline
    will be interrupted if the tests fail.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下，我们在一个复杂的项目中与几个开发人员同时在同一个基础上工作。还要想象我们的工作流程包括一个持续集成/持续交付流水线，运行在像Travis
    CI、CircleCI甚至Jenkins之类的东西上。我们的流水线可能包括一个在合并或部署之前运行我们的自动化测试的步骤，这样如果测试失败，流水线就会中断。
- en: All the imaginary developers working in this imaginary project will add (as
    well as refactor and delete, but those cases don’t really apply to this example)
    new functionality (i.e. *new code*) all the time, but they might forget about
    properly testing that code. What would happen then? The coverage percentage value
    of the project would go down.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个想象中的项目中工作的所有虚构开发人员将会添加（以及重构和删除，但这些情况并不适用于这个例子）新功能（即*新代码*），但他们可能会忘记对该代码进行适当的测试。那么会发生什么？项目的覆盖百分比值会下降。
- en: 'In order to still be sure that we can rely on our tests as a regression detection
    mechanism, we need to be sure that the coverage never goes *too low*. What is
    too low? That really depends on multiple factors: the project and the stack it
    uses, the team, etc. However, it’ normally a good rule of thumb not letting the
    coverage value go down on each coding process iteration.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们仍然可以依赖我们的测试作为回归检测机制，我们需要确保覆盖率永远不会*太低*。什么是太低？这实际上取决于多个因素：项目和其使用的技术栈、团队等。然而，通常一个很好的经验法则是在每个编码过程迭代中不要让覆盖率值下降。
- en: 'Anyway, Jest allows you to specify a coverage threshold for tests: if the value
    goes below that threshold, the tests will return failed *even if they all passed*.
    This way, our CI/CD pipeline will refuse to merge or deploy our code.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，Jest允许您为测试指定覆盖率阈值：如果值低于该阈值，测试将返回失败*即使它们都通过了*。这样，我们的CI/CD流水线将拒绝合并或部署我们的代码。
- en: The coverage threshold has to be included in the Jest configuration object;
    in our case, it lives in the `jest.json` file in our project’s root folder.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖率阈值必须包含在Jest配置对象中；在我们的情况下，它位于项目根文件夹中的`jest.json`文件中。
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Each number passed to each property of the object is a percentage value; below
    it, the tests will fail.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给对象的每个属性的数字都是百分比值；如果低于这个值，测试将失败。
- en: 'To demonstrate it, let’s run our controller tests with the coverage threshold
    set as above. `npm run test:coverage` returns this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，让我们以以上设置运行我们的控制器测试。`npm run test:coverage`返回如下结果：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As you can see, the tests passed, yet the process failed with status 1 and
    returned an error. Also, Jest reported `"global" coverage threshold for branches
    (80%) not met: 66.67%`. We have successfully kept non-acceptable code coverage
    away from our main branch or productive environments.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，测试通过了，但是进程以状态1失败并返回错误。此外，Jest报告说`"全局"分支覆盖率阈值（80%）未达到：66.67%`。我们已成功将不可接受的代码覆盖率远离了我们的主分支或生产环境。
- en: The following step could be now to implement a few end-to-end tests, along with
    our unit tests, to improve our system.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤可能是实现一些端到端测试，以及我们的单元测试，以改进我们的系统。
- en: E2E testing
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端到端测试
- en: 'While unit tests are isolated and independent by definition, end-to-end (or
    E2E) tests serve for, in a way, the opposite function: they intend to check the
    health of the system as a whole, and try to include as many components of the
    solution as possible. For this reason, in E2E tests we will focus on testing complete
    modules, rather than isolated components or controllers.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管单元测试根据定义是孤立和独立的，端到端（或E2E）测试在某种程度上具有相反的功能：它们旨在检查系统作为一个整体的健康状况，并尝试包括尽可能多的解决方案组件。因此，在E2E测试中，我们将专注于测试完整的模块，而不是孤立的组件或控制器。
- en: Preparation
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Fortunately, we can use Jest for E2E testing just like we did for unit testing.
    We will only need to install the `supertest` npm package to perform API requests
    and assert their result. Let’s install it by running `npm install --save-dev supertest`
    in your console.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们可以像对单元测试一样使用Jest进行E2E测试。我们只需要安装`supertest` npm包来执行API请求并断言它们的结果。通过在控制台中运行`npm
    install --save-dev supertest`来安装它。
- en: Also, we will create a folder called `e2e` in our project’s root folder. This
    folder will hold all of our E2E test files, as well as the configuration file
    for them.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们将在项目的根目录下创建一个名为`e2e`的文件夹。这个文件夹将保存所有的E2E测试文件，以及它们的配置文件。
- en: 'This brings us to the next step: create a new `jest-e2e.json` file inside the
    `e2e` folder with the following contents:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带我们到下一步：在`e2e`文件夹内创建一个名为`jest-e2e.json`的新文件，内容如下：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see, the new E2E configuration object is very similar to the one
    for unit tests; the main difference is the `testRegex` property, which now points
    to files in the `/e2e/` folder that have a `.e2e-test` or `e2e.spec` file extension.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，新的E2E配置对象与单元测试的对象非常相似；主要区别在于`testRegex`属性，它现在指向`/e2e/`文件夹中具有`.e2e-test`或`e2e.spec`文件扩展名的文件。
- en: 'The final step of the preparation will be to include an npm script in our `package.json`
    file to run the end-to-end tests:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 准备的最后一步将是在我们的`package.json`文件中包含一个npm脚本来运行端到端测试：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Writing end-to-end tests
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写端到端测试
- en: 'The way of writing E2E tests with Jest and Nest.js is also very similar to
    the one we used for unit tests: we create a testing module using the `@nestjs/testing`
    package, we override the implementation for the `EntriesService` to avoid the
    need for a database, and then we are ready to run our tests.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Jest和Nest.js编写端到端测试的方式也与我们用于单元测试的方式非常相似：我们使用`@nestjs/testing`包创建一个测试模块，我们覆盖`EntriesService`的实现以避免需要数据库，然后我们准备运行我们的测试。
- en: 'Let’s write the code for the test. Create a new folder called `entries` inside
    the `e2e` folder, and then create a new file there called `entries.e2e-spec.ts`
    with the following content:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来编写测试的代码。在`e2e`文件夹内创建一个名为`entries`的新文件夹，然后在其中创建一个名为`entries.e2e-spec.ts`的新文件，内容如下：
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let’s review what the code does:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下代码的功能：
- en: The `beforeAll` method creates a new testing module, imports the `EntriesModule`
    in it (the one we are going to test), and overrides the `EntriesService` implementation
    with the very simple `mockEntriesService` constant. Once that’s done, it uses
    the `.createNestApplication()` method to create an actual running app to make
    requests to, and then waits for it to be initialized.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`beforeAll`方法创建一个新的测试模块，在其中导入`EntriesModule`（我们将要测试的模块），并用非常简单的`mockEntriesService`常量覆盖`EntriesService`的实现。一旦完成，它使用`.createNestApplication()`方法创建一个实际运行的应用程序来进行请求，然后等待其初始化。'
- en: The `'/GET entries'` test uses a supertest to perform a GET request to the `/entries`
    endpoint, and then asserts whether the status code of the response from that request
    was a `200` and the received body of the response matches the `mockEntriesService`
    constant value. If the test passes, it will mean that our API is correctly reacting
    to requests received.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`''/GET entries''`测试使用supertest执行对`/entries`端点的GET请求，然后断言该请求的响应状态码是否为`200`，并且接收到的响应体是否与`mockEntriesService`常量的值匹配。如果测试通过，这意味着我们的API正确地响应了收到的请求。'
- en: The `afterAll` method ends the Nest.js app we created when all of the tests
    have run. This is important to avoid side effects when we run the tests the next
    time.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`afterAll`方法在所有测试运行完毕时结束了我们创建的Nest.js应用程序。这很重要，以避免在下次运行测试时产生副作用。'
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we have explored the importance of adding automated tests to
    our projects and what kind of benefits it brings.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了向我们的项目添加自动化测试的重要性以及它带来的好处。
- en: Also, we got started with the Jest testing framework, and we learned how to
    configure it in order to use it seamlessly with TypeScript and Nest.js
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们开始使用Jest测试框架，并学习了如何配置它，以便与TypeScript和Nest.js无缝使用。
- en: Lastly, we reviewed how to use the testing utilities that Nest.js provides for
    us, and learned how to write tests, both unit tests as well as end-to-end ones,
    and how to check the percentage of the code our tests are covering.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们回顾了Nest.js为我们提供的测试工具，并学习了如何编写测试，包括单元测试和端到端测试，以及如何检查我们的测试覆盖了多少代码的百分比。
- en: In the next and last chapter we cover server-side rendering with Angular Universal.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍使用Angular Universal进行服务器端渲染。
