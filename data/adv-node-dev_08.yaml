- en: The Join Page and Passing Room Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入页面和传递房间数据
- en: In the previous chapter, we looked into styling our chat page more like a real
    web application and less like an unstyled HTML page. In this chapter, we'll continue
    our discussion about the chat page and look into join page and passing room data.
    We are going to update our HTML file and add form-fields for the chat page.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们研究了如何将我们的聊天页面样式更像一个真正的Web应用程序，而不是一个未经样式化的HTML页面。在本章中，我们将继续讨论有关聊天页面的内容，并研究加入页面和传递房间数据。我们将更新我们的HTML文件，并为聊天页面添加表单字段。
- en: We'll take the name and room values and pass them from the client to the server
    so the server can keep track of who's in which room and we can set up a private
    communication. We'll also create test cases for the validation of the data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获取名称和房间数值，并将它们从客户端传递到服务器，以便服务器可以跟踪谁在哪个房间，我们可以建立私人通信。我们还将为数据验证创建测试用例。
- en: Adding a join page
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加加入页面
- en: The goal for this section is to add a join page like the one you see in the
    following screenshot, where you provide a name and you provide the room name you
    want to join.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分的目标是添加一个加入页面，就像您在下面的截图中看到的那样，您可以在那里提供一个名称，然后提供您想要加入的房间名称。
- en: 'You''ll then be able to join a given room, talk to anybody else in that room
    and you won''t be able to communicate with other people in other rooms:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您将能够加入指定的房间，与该房间中的任何其他人交谈，您将无法与其他房间中的其他人进行通信：
- en: '![](img/13a6462b-6214-4811-b331-1b509ca069cd.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13a6462b-6214-4811-b331-1b509ca069cd.png)'
- en: 'This means that when you click on this form, you''re going to click on Join and
    we''re going to have some custom information passed into the URL into the chat
    application as we know it, the one that looks like this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当您点击这个表单时，您将点击`Join`，我们将一些自定义信息传递到URL中，就像我们知道的那样，它看起来像这样的聊天应用程序：
- en: '![](img/15da8e1e-84ed-4ddf-8efb-59d94f548451.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15da8e1e-84ed-4ddf-8efb-59d94f548451.png)'
- en: Updating the HTML file
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新HTML文件
- en: Now in order to get that done, the first thing we're going to do is tweak the
    current HTML file. Right now, `index.html` is going to load first. We actually
    don't want that to be the case, when we go to `localhost:3000` we want to show
    our new join page. So what I'm going to do instead is move this page by renaming
    it. We're going to rename `index.html` to `chat.html`. I'm going to do the exact
    same thing with `index.js`, renaming it to `chat.js`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个目标，我们要做的第一件事是调整当前的HTML文件。现在，`index.html`将首先加载。实际上，我们不希望这样，当我们转到`localhost:3000`时，我们希望显示我们的新加入页面。所以我要做的是将这个页面移动，通过重命名。我们将把`index.html`重命名为`chat.html`。我将用相同的方法重命名`index.js`，将其重命名为`chat.js`。
- en: 'Last but not least, I''m going to update the reference in the script where
    we load in `index.js`; instead, we''ll load in `chat.js`. Now that we have this
    in place; we no longer have an HTML page that''s going to load when you visit
    the site. If I try to go to `localhost:3000`, we''re going to get an error saying
    we cannot get that route, nothing''s coming back from the server:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我将更新加载`index.js`的脚本中的引用；相反，我们将加载`chat.js`。既然我们已经有了这个，当您访问该站点时，将不再加载HTML页面。如果我尝试转到`localhost:3000`，我们将收到一个错误，说我们无法获取该路由，服务器没有返回任何内容：
- en: '![](img/eccf88c4-5aa8-4a28-807b-e41bfc8705c9.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eccf88c4-5aa8-4a28-807b-e41bfc8705c9.png)'
- en: 'To fix this, we''re going to create our brand new page as `index.html`. This
    is going to be the one that loads when a user visits the app. Now we''ll start
    off with a very basic template specifying things we''ve done before like `DOCTYPE`,
    setting it equal to HTML5, and then we''re going to add our `html` tag. Inside
    here, we can then add our `head` and `body` tags:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们将创建一个全新的页面作为`index.html`。这将是用户访问应用时加载的页面。现在我们将从非常基本的模板开始，指定我们以前做过的事情，比如`DOCTYPE`，将其设置为HTML5，然后我们将添加我们的`html`标签。在这里面，我们可以添加我们的`head`和`body`标签：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Adding the head tag in the HTML file
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在HTML文件中添加头标签
- en: 'I''m going to add my `head` tag first, and then I can go ahead and add my `body`
    tag. We''ll then kick things off by adding a few tags into the head such as `meta`,
    so we can set our charset, and it is going to have a value of `utf-8`. We''re
    also going to set a few other properties:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我将首先添加我的`head`标签，然后可以继续添加`body`标签。然后我们将通过在头部添加一些标签来启动一些事情，比如`meta`，这样我们就可以设置我们的字符集，它将具有一个值为`utf-8`。我们还将设置一些其他属性：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'I''m going to set a `title` tag, this is going to show up inside of the tab
    as the tab''s `title`, we can set ours to `Join` then we can add a space, a vertical
    line by using `|`, and the name of our app, something like `ChatApp`: This will
    show up any tab title. Then we can go ahead and link in our style sheet just like
    we did for `chat.html`. I''m going to grab that style sheet reference from `chat.html`,
    copy it into the head:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我将设置一个`title`标签，这将显示在标签的`title`中，我们可以将我们的设置为`Join`，然后我们可以添加一个空格，使用`|`添加一个竖线，以及我们的应用名称，类似于`ChatApp`：这将显示在任何标签标题中。然后我们可以继续链接我们的样式表，就像我们为`chat.html`所做的那样。我将从`chat.html`中获取样式表引用，复制到头部中：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'I''m going to add a `title` tag to `chat.html`. In `chat.html` we can specify
    title, just like we did over inside `index.html`. We can give this one a page
    of `Chat`, with a bar surrounded by spaces, and we''re also going to give it the
    same app name, `ChatApp`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在`chat.html`中添加一个`title`标签。在`chat.html`中，我们可以指定标题，就像我们在`index.html`中所做的那样。我们可以给这个页面一个`Chat`的标题，中间用空格包围，我们还将给它相同的应用名称，`ChatApp`：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we have this in place there is one more thing I want to do before we
    start updating `body`, this is set a `viewport` tag. The `viewport` tags let you
    specify certain things about how your site should be rendered. The `viewport`
    tag I'm about to add is going to make our website display much better on mobile.
    Instead of being really zoomed out, it's going to fit to the width of your phone,
    tablet, or any other device.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了这个，开始更新`body`之前，我想做的最后一件事是设置一个`viewport`标签。`viewport`标签允许您指定有关如何呈现您的站点的某些信息。我即将添加的`viewport`标签将使我们的网站在移动设备上显示得更好。它不会被放大，而是会适应您的手机、平板电脑或任何其他设备的宽度。
- en: We're going to copy this tag from `index.html` to `chat.html` when we're done,
    but for now we'll kick things off by adding a `meta` tag.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们完成后，我们将把这个标签从`index.html`复制到`chat.html`，但现在我们将通过添加一个`meta`标签来开始。
- en: 'This time around instead of specifying charset like we''ve done in the past,
    we''re going to give it a name equal to `viewport`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，与过去不同的是，我们不再指定字符集，而是将其命名为`viewport`：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we can go ahead and add a few options about what we want to do to that
    `viewport`. All of this is going to happen inside content. This is going to be
    a comma-separated list of key-value pairs, for example is `width` will be `device-width`.
    This tells your browser to use the device''s `width` as the web page''s `width`,
    and then we can add a comma, a space, and specify our next key-value pair. I''m
    going to use `initial-scale` and set that equal to `1`. This is going to scale
    the website appropriately so it doesn''t look all zoomed out, and finally `user-scalable` will
    be set equal to `no`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以继续添加一些关于我们想要对`viewport`做的选项。所有这些都将发生在内容内。这将是一个以逗号分隔的键值对列表，例如`width`将是`device-width`。这告诉您的浏览器使用设备的`宽度`作为网页的`宽度`，然后我们可以添加一个逗号，一个空格，并指定我们的下一个键值对。我将使用`initial-scale`并将其设置为`1`。这将适当地缩放网站，使其看起来不会被放大，最后`user-scalable`将设置为`no`：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We have styles in place to make the text bigger and to make sure that a user
    can always see everything, so there's no reason to give users the ability to scale.
    Now as mentioned, we're going to take this `meta` tag, copy it to the clipboard,
    and add it for `chat.html` as well. Now that we have our `head` tags, set up for
    `index.html` we can move on to the body.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置了样式，使文本变大，并确保用户始终可以看到所有内容，因此没有理由让用户有能力进行缩放。现在，正如前面提到的，我们将复制这个`meta`标签到剪贴板，并在`chat.html`中也添加它。现在我们已经为`index.html`设置好了`head`标签，我们可以继续处理`body`。
- en: Adding the body tag in the HTML file
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在HTML文件中添加body标签
- en: 'We''re going to be using a similar set of classes designed to work with this
    page. To kick things off on, the `body` tags, we''re going to add a class of `centered-form`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一组类似的类来设计与此页面配合使用。首先，在`body`标签上，我们将添加一个名为`centered-form`的类：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is going to center that form in the screen and give the entire website
    that blue background with the gradient. Next up, we can go ahead and provide the
    little box. This is going to be the centered white box that has our form in it.
    That''s going to be via `div` and we''re going to give this `div` a class. We''re
    going to set that class equal to, inside quotes, `centered-form__form`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使表单在屏幕中居中，并为整个网站提供蓝色渐变的背景。接下来，我们可以继续提供小框。这将是我们的表单所在的居中白色框。这将通过`div`实现，我们将给这个`div`一个类。我们将把这个类设置为，用引号括起来，`centered-form__form`：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now that we have these two classes in place we are ready to move on actually
    adding some of the fields that are going to go in that white box, starting with
    that title, `Chat`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了这两个类，我们准备继续添加一些将放在白色框中的字段，首先是标题`Chat`。
- en: Adding the form-fields for the chat page
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为聊天页面添加表单字段
- en: 'To do this, we''re going to create a few divs. They''re all going to look identical
    so we''ll make them once and duplicate them. We''re going to add a class equal
    to `form-field`. Now we''ll use this four times: title, name, room name, and button.
    In order to get that done, what we''re going to do is simply copy the line and
    paste it four times:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将创建一些`div`。它们都将看起来相同，所以我们将制作一次并复制它们。我们将添加一个等于`form-field`的类。现在我们将使用这个四次：标题，名称，房间名称和按钮。为了完成这个任务，我们将简单地复制这一行并粘贴它四次：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now all of this needs to go inside a `form` tag. The whole goal of this page
    is to take that data and submit it, redirecting the user to the chat page where
    we can then bring them into a specific chat room using the name they provided.
    That means we want to wrap these `form` fields inside a `form` tag, by opening
    it just above the `div` tags and closing it down below, just like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有这些都需要放在一个`form`标签内。这个页面的整个目标是获取数据并提交它，将用户重定向到聊天页面，然后使用他们提供的名称将他们带入特定的聊天室。这意味着我们希望将这些`form`字段包裹在一个`form`标签内，通过在`div`标签的上方打开它，并在下方关闭它，就像这样：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now previously we saw the default behavior for a `form` tag is to reload the
    current page, posting the data as a query string. What we're going to do instead
    is specify an `action` attribute which, lets us customize which page to go to.
    In this case, we're going to go to `/chat.html`, the page that we set up just
    now. This means that when someone's done filling out the form field, they're going
    to get redirected to the `chat` page and the data down below will get passed along
    too.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们之前看到的`form`标签的默认行为是重新加载当前页面，将数据作为查询字符串发布。我们要做的是指定一个`action`属性，这样可以自定义要去哪个页面。在这种情况下，我们将转到`/chat.html`，这就是我们刚刚设置的页面。这意味着当有人填写完表单字段后，他们将被重定向到`chat`页面，并且下面的数据也将被传递。
- en: 'Now the title `div` is easy, what we''re going to do is add an `h3` tag with
    whatever title you want; you could say `Chat` or `Join a Chat`. And then, I can
    go ahead and close my `h3`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在标题`div`很容易，我们要做的是添加一个带有你想要的标题的`h3`标签；你可以说`聊天`或`加入聊天`。然后，我可以继续关闭我的`h3`：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, I can move on to the next form field which is going to be the display
    name. I am going to use a label, a label is going to describe a field, this one
    will be `Display name` so we''ll open and close the `label` tag like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我可以继续处理下一个表单字段，即显示名称。我将使用一个标签，标签将描述一个字段，这个字段将是`显示名称`，所以我们将像这样打开和关闭`label`标签：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next up, we can add an `input`. We''re going to add an `input` just like we
    did for the `input` on our message `form`. We''re going to specify `type` equal
    to `text`. We want the user to be able to enter some text. We''re also going to
    give it a `name` equal to `name`. We are going to use `autofocus`; once again,
    this is going to make sure that when a user first visits the app, their cursor
    is placed inside the Name field:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以添加一个`input`。我们将添加一个`input`，就像我们为消息`form`上的`input`所做的那样。我们将指定`type`等于`text`。我们希望用户能够输入一些文本。我们还将给它一个`name`等于`name`。我们将再次使用`autofocus`，这将确保当用户首次访问应用时，他们的光标会放在名字字段内：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next up is the field for the room name, which is going to look pretty similar
    to the one above, we are going to start with `label` once again. This `label`
    is going to be a string, something like `Room name`, and we''re also going to
    add an input so the user can specify the room name, `type="text"`, and the `name`
    will equal `room`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是房间名称的字段，它看起来会与上面的字段非常相似，我们将再次从`label`开始。这个`label`将是一个字符串，类似于`Room name`，我们还将添加一个输入，以便用户可以指定房间名称，`type="text"`，`name`将等于`room`：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There is no need for `autofocus` on this one since we already have an `autofocus`
    input in the preceding code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个不需要`autofocus`，因为在前面的代码中我们已经有了一个`autofocus`输入。
- en: 'Now that we have this in place, we can go ahead and fill out the final `form`
    field, which is going to be the Submit button for our form by simply creating
    the `button` tag, and giving it a text value. We can have ours set to `Join`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经做好了这一点，我们可以继续填写最终的`form`字段，这将是我们表单的提交按钮，只需创建`button`标签，并给它一个文本值。我们可以将我们的设置为`Join`：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With this in place our `index.html` file is actually done. We can load it over
    inside the browser. Our server had automatically restarted, so a quick refresh
    should show our page Join a Chat app:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们的`index.html`文件实际上已经完成了。我们可以在浏览器中加载它。我们的服务器已经自动重新启动，所以快速刷新应该会显示我们的页面
    加入聊天应用：
- en: '![](img/26257300-edb9-4e62-81dc-4055bf712bf2.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26257300-edb9-4e62-81dc-4055bf712bf2.png)'
- en: 'The goal is to set this up to take a name like `Andrew`, and a room name like
    `Node Course Students`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是设置这个来接受一个名字，比如`Andrew`，和一个房间名，比如`Node Course Students`：
- en: '![](img/b0ae6d89-5856-48e0-8c54-f6b816faf0c4.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0ae6d89-5856-48e0-8c54-f6b816faf0c4.png)'
- en: 'You click Join and it joins you into this room with this name. Now currently,
    all it''s going to do is redirect us to `chat.html`, but as you''ll see it does
    indeed pass the data along:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 点击加入，它会将您加入到这个带有这个名字的房间。目前，它只会将我们重定向到`chat.html`，但正如你所看到的，它确实传递了数据：
- en: '![](img/4023c7d9-d23b-4a47-b57c-8548e94102a5.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4023c7d9-d23b-4a47-b57c-8548e94102a5.png)'
- en: Here we have `name` equal to `Andrew` and we have `room` name equal to `Node
    Course Students`, just like we specified over inside of `index.html`. With this
    in place, we are now ready to start talking about how we can join specific rooms
    inside `Socket.io`, making sure the events we emit only go to other people connected
    to that room. We have the stuff in place to get this done, so we're going to get
    started with all of that in the next section.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有`name`等于`Andrew`，我们有`room`名称等于`Node Course Students`，就像我们在`index.html`中指定的那样。有了这个，我们现在准备开始讨论如何加入`Socket.io`中的特定房间，确保我们发出的事件只传递给连接到该房间的其他人。我们已经准备好完成这些工作，所以我们将在下一节开始所有这些工作。
- en: For now we have a pretty great-looking join page, this is where we can join
    a room. Let's wrap this up with a commit, committing our changes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们有一个看起来相当不错的加入页面，这是我们可以加入一个房间的地方。让我们用一个提交来结束这一切，提交我们的更改。
- en: Committing the changes in index.html
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交更改到index.html
- en: 'If I run `git status` you''re going to see that we have a modified file `index.html`,
    and it also thinks we deleted `index.js`, although we add something down below,
    when we run `git add .` and rerun `git status` it''s going to understand exactly
    what happened:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我运行`git status`，你会看到我们有一个修改过的文件`index.html`，它还认为我们删除了`index.js`，尽管我们在下面添加了一些东西，但当我们运行`git
    add .`并重新运行`git status`时，它会完全理解发生了什么：
- en: '![](img/5a6673e4-c139-4351-9b90-e8ee157367b4.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a6673e4-c139-4351-9b90-e8ee157367b4.png)'
- en: 'Here, you can see we copied `index.html` to `chat.html`, we then modified `index.html`
    and renamed `index.js` to `chat.js`, which is exactly what we did. I''m going
    to go ahead and actually make the commit using `git commit` with the `-m` flag,
    `Add join page that submits to chat.html`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到我们复制了`index.html`到`chat.html`，然后修改了`index.html`并将`index.js`重命名为`chat.js`，这正是我们所做的。我将继续使用`git
    commit`进行提交，使用`-m`标志，`Add join page that submits to chat.html`：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We can then make the commit, push it up to GitHub, and that is it for this one.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以进行提交，将其推送到GitHub，就到此为止。
- en: Passing room data
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传递房间数据
- en: 'In the last section, we created a little chat page. We can type in a name like
    `Andrew` and a room like `Node Course`, and we can go ahead and join that room:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们创建了一个小的聊天页面。我们可以输入一个名字，比如`Andrew`，和一个房间，比如`Node Course`，然后我们可以加入那个房间：
- en: '![](img/cccfec12-a277-45fc-a5aa-c258db76d241.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cccfec12-a277-45fc-a5aa-c258db76d241.png)'
- en: Now when we do, we're brought to the chat page, but nothing is actually happening
    behind the scenes to use any of these values, they're showing up in the URL but
    that's about it. The goal in this section is to take these values and pass them
    from the client to the server so the server can keep track of who's in which room,
    and we can set up that private communication. Currently, if user one is in the
    Node course and user two is in the React course, both of them are going to be
    able to talk to each other because this data is not used.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们这样做时，我们被带到了聊天页面，但实际上在幕后并没有发生任何事情来使用这些值，它们出现在URL中，但仅此而已。本节的目标是将这些值从客户端传递到服务器，以便服务器可以跟踪谁在哪个房间，并且我们可以建立私人通信。目前，如果用户一在Node课程中，用户二在React课程中，他们两个都可以互相交谈，因为这些数据没有被使用。
- en: Getting data to the server
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据传递到服务器
- en: Now the first step in getting this data to the server is figuring out where
    it lives; this actually lives in the `location` object. We're going to use the
    console to just play around with it.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将这些数据发送到服务器的第一步是找出它在哪里；实际上它在`location`对象中。我们将使用控制台来玩一下。
- en: The `location` is a global object that's provided by your browser, and on it
    we have a whole bunch of really interesting things like `host`, `hostname`, `href`,
    `origin`, and `pathname`. What we're going to be using is `search`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`location`是浏览器提供的全局对象，在它上面我们有很多有趣的东西，比如`host`，`hostname`，`href`，`origin`和`pathname`。我们将使用的是`search`。'
- en: 'As you can see in the following screenshot, `search` is the query string, everything
    from the question mark to the end of the word course, what I have highlighted
    here:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在下面的截图中所看到的，`search`是查询字符串，从问号到单词“course”的末尾，我在这里标出了：
- en: '![](img/28150972-f55b-4e60-8e14-94e3d04d190f.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28150972-f55b-4e60-8e14-94e3d04d190f.png)'
- en: 'The goal is to get this into a more useful format. Right now we have just the
    string, we''re going to need to parse this. We''re actually going to use a library
    to do that now that we know where it lives. We can access `window.location.search`
    to get this value:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是将其转换为更有用的格式。现在我们只有字符串，我们需要解析它。既然我们知道它在哪里，我们实际上将使用一个库来做到这一点。我们可以访问`window.location.search`来获取这个值：
- en: '![](img/21e7de6c-5955-45b2-8db4-22cf6e39d7b8.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21e7de6c-5955-45b2-8db4-22cf6e39d7b8.png)'
- en: I'm adding window upfront the `location.search` just to make sure we're accessing
    the global location property as opposed to a local variable, which may or may
    not exist called location. This is going to be the most foolproof way to fetch
    the query string.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我在`location.search`前面添加了window，只是为了确保我们访问全局位置属性，而不是可能存在或不存在的名为location的局部变量。这将是获取查询字符串的最可靠方法。
- en: The params and deparams
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: params和deparams
- en: 'Now the next thing we''re going to do is talk about params and deparams. Inside
    jQuery, we actually have access to a function, we can access it by calling `jQuery.param`,
    and we can pass in an object. We''ll set `name` equal to your first name, I''m
    going to set it equal to `Andrew`, and we''ll set `age` equal to something like
    `25`. Now when I run this statement, jQuery is going to take that object and convert
    it into a set of parameters that could be added on to a URL:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要做的下一件事是讨论params和deparams。在jQuery内部，我们实际上可以访问一个函数，我们可以通过调用`jQuery.param`来访问它，并且我们可以传入一个对象。我们将设置`name`等于您的名字，我将其设置为`Andrew`，并且我们将设置`age`等于`25`之类的东西。现在当我运行这个语句时，jQuery将把该对象转换为一组可以添加到URL上的参数：
- en: '![](img/b9709f06-0212-47f8-9d94-6351292dbf53.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9709f06-0212-47f8-9d94-6351292dbf53.png)'
- en: Here you can see we have `name=Andrew` and `age=25`. This is similar to the
    format we had up in the URL, minus the question mark. All we'd have to do is add
    one at to the beginning and we would have a complete search string. Now the problem
    with jQuery is that it cannot do it in the other direction; meaning it cannot
    take the string and convert it back into an object, which is kind of what we want.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到我们有`name=Andrew`和`age=25`。这与我们在URL中的格式相似，减去了问号。我们只需要在开头添加一个问号，我们就会得到一个完整的搜索字符串。现在jQuery的问题是它不能以另一个方向进行操作；也就是说它不能将字符串转换回对象，这正是我们想要的。
- en: 'We want to be able to access this data easily, currently that is just not possible.
    There are also quirks like encoding and `+` characters. This was originally a
    space but it got converted to `a +` by the form. We''re going to want to decode
    all of that too. Luckily, there is a simple library we can include and we can
    grab it by going to [links.mead.io/deparam](https://gist.github.com/andrewjmead/b71e03d8df237983285892f9a265d401):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望能够轻松访问这些数据，目前这是不可能的。还有一些编码和`+`字符之类的怪癖。这原本是一个空格，但它被表单转换为`a +`。我们也希望解码所有这些。幸运的是，我们可以包含一个简单的库，我们可以通过访问[links.mead.io/deparam](https://gist.github.com/andrewjmead/b71e03d8df237983285892f9a265d401)来获取它：
- en: '![](img/d67ce9e6-0fa2-4edc-96dc-4752a4bb593f.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d67ce9e6-0fa2-4edc-96dc-4752a4bb593f.png)'
- en: 'The `param` takes your object and returns the string, `deparam` takes the string,
    and returns an object. Here in the preceding screenshot, we have a simple Gist.
    It''s a really short function that we''re going to be adding to our project. Let''s
    go to the Raw version of this page. We''re going to save it using right-click, Save
    as, and we''re going to add it right into a project. We have our `public`, `js`,
    and `libs` folder. Right in the `libs` folder, we''ll simply save it as `deparam.js`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`param`接受您的对象并返回字符串，`deparam`接受字符串并返回对象。在上面的截图中，我们有一个简单的Gist。这是一个非常简短的函数，我们将要添加到我们的项目中。让我们转到此页面的原始版本。我们将使用右键点击“另存为”保存它，并将其添加到项目中。我们有我们的`public`，`js`和`libs`文件夹。就在`libs`文件夹中，我们将简单地将其保存为`deparam.js`：'
- en: '![](img/cc454a75-b0c3-4253-967e-b46b6e778649.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc454a75-b0c3-4253-967e-b46b6e778649.png)'
- en: 'Now once we have that file saved, we can actually include it. This is going
    to make it much easier to work with the search data. Inside Atom, I''m going to
    head over to `chat.html`. We''re not going to need this in `index.html` but inside, `chat.html`
    we are going to load it in down below the `mustache.js` script. We''ll make a
    new `script` tag, and we''re going to go ahead and set the `src` equal to, inside
    quotes, `/js/libs/deparam.js`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一旦我们保存了那个文件，我们就可以包含它。这将使处理搜索数据变得更加容易。在Atom中，我将转到`chat.html`。我们不需要在`index.html`中使用它，但在`chat.html`中，我们将在`mustache.js`脚本下面加载它。我们将创建一个新的`script`标签，并且我们将设置`src`等于，引号内，`/js/libs/deparam.js`：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now when we save `chat.html` and head back into the browser, we can actually
    refresh the page and play around with this in the console before ever adding it
    to our code. We now have access to `jQuery.deparam`. If I run this statement,
    we''re going to get our function back, confirming that it does exist, and all
    we need to do is pass in the string, this is the search string, `window.location.search`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们保存`chat.html`并返回浏览器时，我们实际上可以刷新页面，并在添加到我们的代码之前在控制台中尝试这个。我们现在可以访问`jQuery.deparam`。如果我运行这个语句，我们将得到我们的函数返回，确认它确实存在，我们只需要传递这个字符串，这就是搜索字符串，`window.location.search`：
- en: '![](img/409b3993-4bb1-4699-865c-eb4f4f12c408.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/409b3993-4bb1-4699-865c-eb4f4f12c408.png)'
- en: So we're taking that search string, passing it into `deparam`, and the resulting
    object is exactly what we want. We have a `name` property equal to `Andrew` and
    we have a `room` property equal to `Node Course`. All those special characters
    like the `&` symbol, the question mark, and the `+` character, have all been removed
    and replaced with this nicely formatted object. This is what we're going to use
    inside of our client-side code to get the values and pass them to the server,
    which is what we're going to do right now.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将搜索字符串传递给`deparam`，得到的对象正是我们想要的。我们有一个`name`属性等于`Andrew`，我们有一个`room`属性等于`Node
    Course`。所有那些特殊字符，如`&`符号，问号和`+`字符，都已被移除并替换为这个格式化的对象。这是我们将在客户端代码中使用的内容，以获取这些值并将它们传递给服务器，这就是我们现在要做的。
- en: 'Inside Atom this is all going to happen in `chat.js`. In this file, we have
    our `connect` callback function. This happens when we first connect and right
    away when we connect, we''re going to emit an event that''s going to start the
    process of joining a room:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Atom内部所有的事情都将在`chat.js`中发生。在这个文件中，我们有我们的`connect`回调函数。当我们第一次连接时，就会发生这种情况，当我们连接时，我们将发出一个事件，这将启动加入房间的过程：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now `Socket.io` has built-in support for the idea of rooms, creating the little
    isolated areas where only certain people can emit and listen to events. All of
    that gets set up on the server though, which means right in this function. When
    we connect to the server, all we're going to do is emit an event called join;
    this is going to start the process.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`Socket.io`内置支持房间的概念，创建小的隔离区域，只有特定的人可以发出和监听事件。所有这些都在服务器上设置，这意味着就在这个函数中。当我们连接到服务器时，我们要做的就是发出一个名为`join`的事件；这将开始这个过程。
- en: 'First up, let''s go ahead and grab our parameters, the ones that we just learned
    how to `deparam` over inside the console, `var params = jQuery.deparam`, and we''re
    going to pass in `window.location.search`, just like we did before in the Developers
    Console. Now we have our object and we can go ahead and emit an event. Next, we''re
    going to call `socket.emit` and the event that we''re going to emit will be a
    custom event we''ll be creating, it''s going to be called `join`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们继续获取我们的参数，就是我们刚学会如何在控制台中`deparam`的参数，`var params = jQuery.deparam`，然后我们将`window.location.search`传递进去，就像我们之前在开发者控制台中做的那样。现在我们有了我们的对象，我们可以继续发出一个事件。接下来，我们将调用`socket.emit`，我们要发出的事件将是我们将创建的自定义事件，它将被称为`join`：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This is going to get emitted from the client and it''s going to get listened
    to by the server. When the server hears this `join` event, it''s going to go through
    the process of setting up the room. Now not all of that''s going to happen in
    this section, but we can get started. The data that we''re going to send across
    is just going to be the `params` object:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从客户端发出，并将被服务器监听。当服务器听到这个`join`事件时，它将开始设置房间的过程。现在，并不是所有的事情都会在这一部分发生，但我们可以开始。我们要发送的数据只是`params`对象：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: It may or may not include everything we need. We'll be doing a little validation
    on the server, and last but not least, we are going to set up acknowledgments
    for this one.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能包括或不包括我们需要的一切。我们将在服务器上进行一些验证，最后但并非最不重要的是，我们将为此设置确认。
- en: 'If someone does join the room we want to know that. We also want to if someone
    doesn''t. This is because if they don''t join the room, it''s most likely because
    they provided invalid data, which means that we want to kick them back to that
    join form forcing them to provide both a name and a room name. We can go ahead
    and set up our `function`, and this `function` could take an argument. We''re
    going to be setting it up ourselves, so we can decide if it takes an argument,
    and it definitely does make sense for it to take one. In this case, we''re going
    to go ahead and provide any errors. If there is an error, that''s fine we''ll
    be able to handle it. If there is no error, that''s great too; we''ll go ahead
    and do something else:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人加入房间，我们想知道。我们也想知道如果有人没有加入。这是因为如果他们没有加入房间，很可能是因为他们提供了无效的数据，这意味着我们希望将他们踢回到加入表单，强迫他们提供姓名和房间名。我们可以继续设置我们的`function`，这个`function`可以带一个参数。我们将自己设置它，所以我们可以决定它是否带有参数，而且它确实有意义带一个参数。在这种情况下，我们将继续提供任何错误。如果有错误，那没问题，我们将能够处理它。如果没有错误，那也很好；我们将继续做其他事情：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the function, we can do something if an error exists using `if (err)`. We
    can go ahead and add an `else` clause too; if there is no error we want to do
    a different thing:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，如果存在错误，我们可以使用`if (err)`来处理。我们还可以添加一个`else`子句；如果没有错误，我们想做另一件事：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now we're not going to fill this out at the moment, what we're going to do at
    this point in time is go ahead and actually set up the listener inside `server.js`
    for join.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们暂时不会填写这部分，我们现在要做的是在`server.js`中设置`join`的监听器。
- en: Setting up listener in server.js
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在server.js中设置监听器
- en: 'That is going to happen over in `server.js`. We can make that the very first
    event just above `createMessage`, `socket.on(''join'')`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`server.js`中发生。我们可以将它作为第一个事件放在`createMessage`的上面，`socket.on('join')`：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now as we already know we are going to be taking some arguments in the callback
    function. We''re going to get our parameters. We can call these `params`, and
    get that `callback` function since we are setting up acknowledgments:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道我们将在回调函数中获取一些参数。我们将得到我们的参数。我们可以称这些为`params`，并获取`callback`函数，因为我们正在设置确认：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Inside the `join` function, the first thing that we want to do is actually validate
    the data that came through, both the name and the room. These are both potential
    properties on `params`. All we really care is that they are non-empty strings;
    meaning that it's not just a space, not just an empty string, and not a non-string
    type like a number or an object.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在`join`函数内，我们要做的第一件事实际上是验证传递过来的数据，包括名称和房间。这两者都是`params`上的潜在属性。我们真正关心的是它们都是非空字符串；这意味着它不仅仅是一个空格，不仅仅是一个空字符串，也不是一个非字符串类型，比如数字或对象。
- en: Defining the isRealString function
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义isRealString函数
- en: In order to set up this validation, which we're going to be doing in other places
    too like `createMessage`, we're going to create a separate `utils` file. In here,
    I'm going to call this `validation.js` and this is where we can put some validators
    that we're going to need throughout the project.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置这个验证，我们将在其他地方也要做，比如`createMessage`，我们将创建一个单独的`utils`文件。在这里，我将称之为`validation.js`，这是我们可以放一些我们在整个项目中需要的验证器的地方。
- en: 'In this section we''re going to create one called `isRealString`. This is going
    to verify that a value is of a type string and that it''s not just a bunch of
    spaces; it actually has real characters inside it. We''re going to set this equal
    to a function that takes a string. This is going to be the string we validate,
    and it''s actually not going to be terribly difficult. We''re going to `return`
    and we''re going to `return` the following conditions. It''ll return `true` if
    it is a real string and `false` if it''s not. First up, we''ll use `typeof`. This
    is going to get the type of the string variable, this needs to equal, in quotes,
    `string`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将创建一个叫做`isRealString`的函数。这将验证一个值是否是字符串类型，而不仅仅是一堆空格；它实际上在其中有真正的字符。我们将把这个设置为一个接受字符串的函数。这将是我们要验证的字符串，实际上并不会太困难。我们将`return`，并且我们将`return`以下条件。如果它是一个真实的字符串，它将返回`true`，如果不是，它将返回`false`。首先，我们将使用`typeof`。这将获取字符串变量的类型，这需要等于，用引号括起来，`string`：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now currently, this is going to return `true` for any string and `false` for
    any non-string value, but it does not take into account the spaces. What we''re
    going to do is use the `trim` method available on strings which takes a string
    like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当前这个对于任何字符串都将返回`true`，对于任何非字符串值都将返回`false`，但它没有考虑到空格。我们要做的是使用字符串上可用的`trim`方法，它接受这样的字符串：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'and converts it into a string like this, trimming all whitespace:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 并将其转换为这样的字符串，修剪所有空格：
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If you pass in a string like, this it''s going to convert it into a string
    like this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你传入这样的字符串，它会将其转换为这样的字符串：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'trimming leading and trailing whitespace only:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 仅修剪前导和尾随空格：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'It''s not going to trim any interior spacing, so if I have `f` space `r` like
    this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 它不会修剪任何内部空格，所以如果我有`f`空格`r`像这样：
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'I am still going to get that space between `f` and `r`, but all of the leading
    and trailing spaces are removed:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然会得到`f`和`r`之间的空格，但所有前导和尾随空格都被移除了：
- en: '[PRE30]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We''re going to use that like this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将像这样使用它：
- en: '[PRE31]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'After we call `trim`, we do need a length greater than `0`, otherwise we have
    an empty string. This is going to be our `isRealString` function, and we''re going
    to go ahead and export it real quickly, `module.exports`, setting it equal to
    an object where we set `isRealString` equal to the `isRealString` function:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们调用`trim`之后，我们确实需要一个长度大于`0`，否则我们就有了一个空字符串。这将是我们的`isRealString`函数，我们将继续导出它，`module.exports`，将其设置为一个对象，其中我们将`isRealString`设置为`isRealString`函数：
- en: '[PRE32]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Now I can go ahead and save this file. I'm also going to go ahead and inside
    `server.js` call the function.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我可以继续保存这个文件。我也要继续在`server.js`内部调用这个函数。
- en: Calling the isRealString function in server.js
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在server.js中调用isRealString函数
- en: 'We need to import the `isRealString` function first before we can actually
    validate those two properties. We can make a `const` just below the `generateMessage`
    constant and use ES6 destructuring to grab `isRealString`, and we''re going to
    grab it using `require`. We require a local file `./`. It''s in that `utils` directory
    and the file name is `validation`, just like this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要先导入`isRealString`函数，然后我们才能验证这两个属性。我们可以在`generateMessage`常量的下面创建一个`const`，并使用ES6解构来获取`isRealString`，我们将使用`require`来获取它。我们需要一个本地文件`./`。它在`utils`目录中，文件名是`validation`，就像这样：
- en: '[PRE33]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now we can call `isRealString` inside `join`; that''s exactly what we''re going
    to do. We''re going to check if either of them are not real strings. If one or
    more are not real strings, we''re going to call the `callback` passing in the
    error. We''ll add `if (params.name)` as the first one and pass that into `isRealString(params.name)`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在`join`内部调用`isRealString`；这正是我们要做的。我们要检查它们中的任何一个是否不是真实的字符串。如果一个或多个不是真实的字符串，我们将调用`callback`并传入错误。我们将添加`if
    (params.name)`作为第一个，并将其传递给`isRealString(params.name)`：
- en: '[PRE34]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now we want to check if it''s not a real string. So we''re going to flip that,
    or (`||`), and then we''re going to check if the other property, the room name,
    is not a real string. Now inside the query string, the room name property is called
    `room`. So if it''s not `isRealString` passing in the correct value `params.room`,
    then that''s going to be an error too:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想要检查它是否不是一个真实的字符串。所以我们要翻转它，或者（`||`），然后我们要检查另一个属性，房间名，是否不是一个真实的字符串。现在在查询字符串内，房间名属性被称为`room`。所以如果它不是`isRealString`传入正确的值`params.room`，那也会是一个错误：
- en: '[PRE35]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Next, we can handle that error by adding error handler function. For this,
    I''m going to do is call the `callback` with a little string message, `Name and
    room name are required`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以通过添加错误处理程序函数来处理该错误。对于这个，我要做的是用一个小字符串消息`Name and room name are required`调用`callback`：
- en: '[PRE36]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now if that''s not the case we do still want to call the `callback` but we
    don''t want to pass any arguments in:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果不是这种情况，我们仍然希望调用`callback`，但我们不希望传递任何参数：
- en: '[PRE37]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Because remember that first argument we set that up to be the error argument
    in `chat.js`, and if both things are valid, we do not want to pass any errors
    back. Over inside `server.js`, we now have some pretty basic validation set up,
    and before we actually do anything in here, which is going to be in the upcoming
    section.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 因为记住我们在`chat.js`中设置的第一个参数是错误参数，如果两者都有效，我们不想传递任何错误。在`server.js`中，我们现在设置了一些非常基本的验证，并且在这里实际上我们不会做任何事情，这将在即将到来的部分中进行。
- en: Adding error handler case in chat.js
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在chat.js中添加错误处理程序
- en: 'We''re going to do is add a few cases right here, in `chat.js`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的就是在`chat.js`中添加一些案例：
- en: '[PRE38]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If it is an error that''s a pretty big problem, and we''re going to want to
    send the user back to the root of the application by changing one of the properties
    under location, `window.location.href`. Here we can manipulate which page the
    user''s on, essentially we''re going to be redirecting them back to that root
    page by having the forward slash (`/`) value set to the `href` property:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个错误，那就是一个相当大的问题，我们将希望通过更改位置下的一个属性将用户发送回应用程序的根部，`window.location.href`。在这里，我们可以操纵用户所在的页面，基本上我们将通过将斜杠(`/`)值设置为`href`属性来将其重定向回到根页面：
- en: '[PRE39]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now before we do that we can do whatever we like, maybe we want to display
    a modal using our framework of choice, whether it''s Foundation, Bootstrap, or
    anything else. To keep things simple here, all we''re going to do is call `alert`
    passing in the error, just like this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在我们做任何事情之前，我们可以做任何我们喜欢的事情，也许我们想使用我们选择的框架显示一个模态框，无论是Foundation、Bootstrap还是其他任何东西。为了保持简单，我们要做的就是调用`alert`传递错误，就像这样：
- en: '[PRE40]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'So a user will see a little alert box, they''ll then click on OK, and they''ll
    be redirected back to the home page. Now if there is no error, all we''re going
    to do for the moment is use `console.log` to print `No error`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将看到一个小小的警报框，然后点击确定，然后被重定向回到主页。现在如果没有错误，我们目前要做的就是使用`console.log`打印`No error`：
- en: '[PRE41]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'With this in place, let''s go ahead and test that things are working as expected.
    Over inside the browser I''m going to give my current page a refresh. Now here,
    we do have a valid name and a valid room, so when I click on the Refresh button,
    we should see No error printing in the console, and that''s exactly what we get:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，让我们继续测试一切是否按预期工作。在浏览器中，我要刷新当前页面。现在，在这里，我们有一个有效的名称和一个有效的房间，所以当我点击刷新按钮时，我们应该看到控制台中没有错误打印，这正是我们得到的：
- en: '![](img/84b02b1b-6c69-4845-a736-442b7d24d817.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84b02b1b-6c69-4845-a736-442b7d24d817.png)'
- en: The data that we passed through was indeed valid. Now we can go ahead and go
    to the root of the page and try some invalid data.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传递的数据确实是有效的。现在我们可以继续转到页面的根部并尝试一些无效的数据。
- en: 'To demonstrate this, all I''m going to do is click on Join without providing
    either value. This is going to bring us to the chat app and you can see we get
    our little alert box, Name and room name are required. We click on OK which is
    all we can do, and we''re immediately redirected back to Join a Chat:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明这一点，我要做的就是点击加入而不提供任何值。这将带我们到聊天应用程序，你可以看到我们得到了一个小小的警报框，需要名称和房间名称。我们点击确定，这是我们能做的一切，然后我们立即被重定向回到加入聊天：
- en: '![](img/2530d755-cad7-4355-b267-a8fb0c7a11da.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2530d755-cad7-4355-b267-a8fb0c7a11da.png)'
- en: 'If I do provide some valid data, like a display name of `Mike` and a room name
    of `Developers`, we are going to be brought to the chat page and we''ll see no
    error shows up, which is fantastic:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我提供一些有效的数据，比如显示名称为`Mike`和房间名称为`Developers`，我们将被带到聊天页面，我们将看不到任何错误显示，这太棒了：
- en: '![](img/82923f89-75b4-43d5-83ac-fce4dfcc6858.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/82923f89-75b4-43d5-83ac-fce4dfcc6858.png)'
- en: 'Now one last test real quick! If we have just spaces, I''m going to change
    the room name to a bunch of spaces. Now we click on Join, we are going to still
    get the error even though we do have a bunch of plus signs for spaces up above
    in the URL space:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在最后一个快速测试！如果我们只有空格，我将把房间名更改为一堆空格。现在我们点击加入，即使我们在URL空间上方有一堆加号表示空格，我们仍然会收到错误：
- en: '![](img/ca5407a8-f054-496a-9207-319cfef805c5.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca5407a8-f054-496a-9207-319cfef805c5.png)'
- en: Those are going to be swapped out for spaces when we run our code through `deparam`
    and the error is still going to occur. Now that we have this in place, we are
    in a pretty good spot to actually integrate rooms in the next section.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过`deparam`运行我们的代码时，这些将被替换为空格，错误仍然会发生。现在我们已经有了这个，我们在一个非常好的位置来实际整合下一节的房间。
- en: Adding test cases for the new validation function
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为新验证函数添加测试用例
- en: The first thing to do would be to write some test cases for the brand new validation
    function we just created, which means we're going to make a new test file called
    `validation.test.js`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是为我们刚刚创建的全新验证函数编写一些测试用例，这意味着我们将创建一个名为`validation.test.js`的新测试文件。
- en: 'Inside there, we''re going to load in an expect making a variable called `expect`.
    We could also make it a constant. We''re going to set that equal to `require`
    and we''re going to `require` the `expect` library:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将加载一个变量称为`expect`的期望。我们也可以将其设置为常量。我们将把它设置为`require`，并且我们将`require` `expect`库：
- en: '[PRE42]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Next up, we''re going to load in `RealString`, import `isRealString`, and we''re
    going to add three test cases. The `describe` blocks should be something like
    `isRealString`, and the three test cases will be as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将加载`RealString`，导入`isRealString`，并添加三个测试用例。`describe`块应该是`isRealString`，三个测试用例将如下所示：
- en: The first one, `should reject non-string` values, in this case I want you to
    pass a number object or anything else into the `isRealString` function, you should
    get false back.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个是`应该拒绝非字符串`值，在这种情况下，我希望你将一个数字对象或其他任何东西传递给`isRealString`函数，你应该得到false。
- en: Next up, `should reject strings with only spaces`. If I have a string that's
    just a bunch of spaces that should not pass the `isRealString` function validation.
    That's also going to fail; trim is going to remove all of those spaces and the
    length will be 0.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，`应该拒绝只有空格的字符串`。如果我有一个只有一堆空格的字符串，那么它不应该通过`isRealString`函数的验证。这也将失败；修剪将删除所有这些空格，长度将为0。
- en: Last up, `should allow strings with non-space characters`. In this case you
    can pass in whatever you like, some sort of valid value. You could have space
    space LOTR for Lord of the Rings, the beginning spaces are going to get trimmed
    out so it's not important. You could add the letter a, any valid string is going
    to pass this one.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，`应该允许包含非空格字符的字符串`。在这种情况下，你可以传入任何你喜欢的东西，一些有效的值。你可以有空格空格LOTR代表指环王，开始的空格将被修剪掉，所以这并不重要。你可以添加字母a，任何有效的字符串都会通过这个。
- en: Go ahead and set up those three test cases, making sure the right Boolean value
    comes back from `isRealString`. When you're done run `npm test` from the Terminal,
    make sure all of your three tests passed.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 继续设置这三个测试用例，确保从`isRealString`返回正确的布尔值。当你完成后，从终端运行`npm test`，确保你的三个测试都通过了。
- en: 'The first thing we''re going to do is import `isRealString` by making a variable.
    We can make this a constant or a variable, I''m going to go with a constant, and
    we''re going to use ES6 destructuring to grab `isRealString`, and we''re going
    to grab it off of the require call to our local file, `./validation`, which is
    just alongside the current file `validation.test.js`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是通过创建一个变量来导入`isRealString`。我们可以将这个变量设置为常量或变量，我会选择常量，我们将使用ES6解构来获取`isRealString`，并且我们将从require调用中获取它，这个require调用是我们本地文件`./validation`，它就在当前文件`validation.test.js`的旁边：
- en: '[PRE43]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Now we can add the things we have down below starting with our `describe` block.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以添加我们在下面的东西，从我们的`描述`块开始。
- en: Test case 1 – should reject non-string values
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试用例1 - 应该拒绝非字符串值
- en: 'We''re going to `describe` the `isRealString` function. Then we can add our
    arrow function (`=>`), and inside there, we can go ahead and provide our individual
    test cases, `it`, and I''m going to copy it directly, `should reject non-string
    values`:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`描述`这个`isRealString`函数。然后我们可以添加我们的箭头函数（`=>`），在里面，我们可以提供我们的各个测试用例，`it`，我将直接复制它，`应该拒绝非字符串值`：
- en: '[PRE44]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This is going to be a synchronous test, so there''s no reason to add the `done`
    argument. Inside here, we''re going to pass in a non-string value. I''ll make
    a variable called response, which will store the return result from `isRealString`.
    We''re going to call it passing in some sort of non-string value. Anything would
    work, I''m going to use a number, `98`:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个同步测试，所以没有理由添加`done`参数。在这里，我们将传入一个非字符串值。我将创建一个名为响应的变量，它将存储从`isRealString`返回的结果。我们将调用它，传入一些非字符串值。任何值都可以，我将使用一个数字，`98`：
- en: '[PRE45]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now down below we can use expect to assert that the response variable equals
    false, which should be the case. We''re expecting response `toBe(false)`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在下面，我们可以使用expect来断言响应变量是否等于false，这应该是情况。我们期望响应`toBe(false)`：
- en: '[PRE46]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Test case 2 – should reject string with only spaces
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试用例2 - 应该拒绝只有空格的字符串
- en: 'Next up, `it(''should reject string with only spaces'')`. I''m going to copy
    that text exactly, pasting it inside of our `it` name. Then we can go ahead and
    add our arrow function (`=>`), and for this case what we''re going to do is create
    a variable called response, passing in some sort of string with just spaces. We''re
    still going to be calling `isRealString`, and we''ll pass in a bunch of spaces.
    Now we''re going to assert that response is `false`, `expect(res).toBe(false)`,
    which it should be because we do not have a valid string:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`it('should reject string with only spaces')`。我将粘贴这个文本到我们的`it`名称中。然后我们可以继续添加我们的箭头函数（`=>`），对于这种情况，我们要做的是创建一个名为响应的变量，传入一些只有空格的字符串。我们仍然会调用`isRealString`，然后我们会断言响应为`false`，`expect(res).toBe(false)`，因为我们没有一个有效的字符串：
- en: '[PRE47]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Test case 3 – should allow strings with non-space characters
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试用例3 - 应该允许包含非空格字符的字符串
- en: 'Next up, last test case, `it (''should allow strings with non-space characters'')`.
    I''m going to paste that in the `it` function and then we can actually set up
    the test case. You could have provided a bunch of different values as the argument
    to `isRealString`. We''re still going to make that response variable. We''re still
    going to call `isRealString`, but right here, I''m going to choose to pass in
    `('' Andrew '')`, which is valid. The `trim` function is going to remove those
    spaces in the validation process:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，最后一个测试用例，`it ('should allow strings with non-space characters')`。我将把这个文本粘贴到`it`函数中，然后我们可以实际设置测试用例。你可以提供一堆不同的值作为`isRealString`的参数。我们仍然会创建响应变量。我们仍然会调用`isRealString`，但是在这里，我选择传入`('
    Andrew ')`，这是有效的。`trim`函数将在验证过程中删除这些空格：
- en: '[PRE48]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Down below we can `expect` that response is true, `toBe(true)`. That''s all
    you needed to do, we can go ahead and remove the comments since we have the actual
    code in place, and the last thing to do is run the test case to make sure our
    code actually works:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面，我们可以`期望`响应为true，`toBe(true)`。这就是你需要做的，我们可以继续删除注释，因为我们已经有了实际的代码，并且要做的最后一件事是运行测试用例，以确保我们的代码实际上起作用：
- en: '[PRE49]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The `npm test` is going to get that done. This is going to run our test suite
    and right here we have our three test cases for `isRealString`, and all of them
    are passing, which is fantastic:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm test`就可以完成了。这将运行我们的测试套件，现在我们有了`isRealString`的三个测试用例，它们都通过了，这太棒了：'
- en: '![](img/b2074612-7fc1-4cb8-b48c-2a1ea811e3a0.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2074612-7fc1-4cb8-b48c-2a1ea811e3a0.png)'
- en: Now as I mentioned you could pretty much pass anything in here. The letter `D`
    would work as a valid room name or username. If I rerun the test suite with `D`
    as my string, the test case still passes. It doesn't really matter what you passed
    into here as long as it had a real non-space character. Now that we have this
    in place we are done. We're not going to make a commit just yet we're kind of
    halfway through a feature, we'll commit once we have a little more in place.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在正如我所提到的，你几乎可以传入任何东西。字母`D`将作为一个有效的房间名称或用户名。如果我用`D`作为我的字符串重新运行测试套件，测试用例仍然通过。实际上，你传入的内容并不重要，只要它有一个真实的非空格字符。现在我们已经完成了这一步。我们还没有做出提交，因为我们只完成了一半的功能，等我们完成更多之后再提交。
- en: Socket.io rooms
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Socket.io房间
- en: In the last section, we set up an event listener on the server listening for
    that join event, and we did some validation. This at least makes sure we have
    the `name` and the `room` name, both of which are going to be required.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们在服务器上设置了一个事件监听器，监听加入事件，并进行了一些验证。这至少确保我们有`name`和`room`名称，这两者都是必需的。
- en: The real next step is to actually use the `Socket.io` library to join rooms,
    and this is not going to let us just join rooms but it's also going to give us
    a different set of methods. We can choose to `emit` to everybody connected to
    the server or just to people in specific rooms, and that's exactly what we're
    going to be doing. We want to `emit` chat messages just to other people who are
    also in the `room`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的下一步是实际使用`Socket.io`库加入房间，这不仅让我们加入房间，还会给我们一组不同的方法。我们可以选择向连接到服务器的每个人发送`emit`，或者只向特定房间的人发送，这正是我们要做的。我们希望只向也在“房间”中的其他人发送`emit`聊天消息。
- en: 'Now in order to join, what you do is you call `socket.join`. The `socket.join`
    takes a string `name`, and we have that `name` under `params.room`, just like
    we used in the previous section:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了加入，你要调用`socket.join`。`socket.join`需要一个字符串`name`，我们在`params.room`下有这个`name`，就像我们在上一节中使用的那样：
- en: '[PRE50]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: We now have a special place for people to talk who are in the same `room`. Now
    this is a string so it would be something like `The Office Fans`, or anything
    else, and you have to join by the string value. Right now, though, `params.room`
    will get the job done.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个特殊的地方供在同一个“房间”里的人交谈。现在这是一个字符串，所以它可能是像“The Office Fans”这样的东西，或者其他任何东西，你必须通过字符串值加入。不过，现在`params.room`就可以完成任务了。
- en: 'Now you can also choose to leave a room using `socket.leave`. The `socket.leave`,
    leaving the room by its name, `The Office Fans` for example, is going to kick
    you out of that group and you''re not going to get those private messages, the
    messages sent specifically to the group. Now the next step in the process is to
    figure out how to actually take advantage of this:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你也可以选择使用`socket.leave`离开一个房间。`socket.leave`，通过它的名称离开房间，例如`The Office Fans`，这将把你踢出那个群组，你将不会收到那些私人消息，也就是专门发送给该群组的消息。现在这个过程的下一步是弄清楚如何真正利用这一点：
- en: '[PRE51]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Targeting the specific user
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 针对特定用户
- en: Adding the user to the room is great, but if we can't target them specifically
    and others in that room, it's not very useful. Well it turns out we have a couple
    of ways to do just that. In order to illustrate how we're going to target specific
    users, let's look at all the ways we've emitted events on the server.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 将用户添加到房间是很好的，但如果我们不能具体地针对他们和房间中的其他人，那就没有什么用了。事实证明，我们有几种方法可以做到这一点。为了说明我们如何针对特定用户，让我们看看我们在服务器上发送事件的所有方法。
- en: We've used `io.emit`. This emits it to every single connected user, and that's
    currently what we're doing for things like `createMessage`. A new message comes
    in and we emit it to everyone connected. Next up, we have used `socket.broadcast.emit`.
    We use that with `newMessage` and as we know this sends the message to everyone
    connected to the socket server except for the current user. The last one we used
    inside `server.js` is `socket.emit`. This emits an event specifically to one user.
    Now we can take these events and we can convert them over to their room counterpart.
    In order to send it to a specific room, we're going to be chaining on the to method.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`io.emit`。这将向每个连接的用户发送事件，这是我们目前对于像`createMessage`这样的事情所做的。新消息进来，我们就会将其发送给所有连接的人。接下来，我们使用了`socket.broadcast.emit`。我们在`newMessage`中使用它，正如我们所知，这会将消息发送给连接到套接字服务器的每个人，除了当前用户。我们在`server.js`中使用的最后一个是`socket.emit`。这将专门向一个用户发送一个事件。现在我们可以将这些事件转换成它们的房间对应事件。为了将其发送到特定的房间，我们将链接到`to`方法。
- en: 'This is going to look a little something like this. Let''s say we want to emit
    an event to every single person connected to a room, and let''s just call this
    room `The Office Fans` for the moment. To do that, we''re going to call `io.to`.
    The `.to` is a method and it takes the room name exactly as it was provided in
    the call to join. In our case, that is going to be `The Office Fans`, just like
    this:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这将看起来有点像这样。假设我们想向连接到一个房间的每个人发送一个事件，让我们暂时将这个房间称为`The Office Fans`。为了做到这一点，我们将调用`io.to`。`.to`是一个方法，它接受房间名称，就像在加入调用中提供的那样。在我们的情况下，那将是`The
    Office Fans`，就像这样：
- en: '[PRE52]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Then we would chain on a call to `emit`. This is going to send an event to
    everybody connected to a room, `The Office Fans`:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将调用`emit`。这将向连接到房间“The Office Fans”的每个人发送一个事件：
- en: '[PRE53]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Now we can also do the same thing with broadcast, meaning that we want to send
    an event to everybody in a room except for the current user. In order to do that
    we would use `socket.broadcast.to`. This works just like the to the method defined
    previously, `The Office Fans` would get passed in, and on here we would call `emit`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们也可以用广播做同样的事情，也就是说我们想向房间中的每个人发送一个事件，除了当前用户。为了做到这一点，我们将使用`socket.broadcast.to`。这与之前定义的`to`方法的工作方式相同，例如传入`The
    Office Fans`，然后我们将调用`emit`：
- en: '[PRE54]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: This is going to send an event to everybody in `The Office Fans` room except
    for the current user, the one who's actually calling `socket.broadcast`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这将向“The Office Fans”房间中的每个人发送一个事件，除了当前用户，也就是实际调用`socket.broadcast`的人。
- en: 'Now the last way we''ve used `emit` is `socket.emit`. We''re still going to
    use that when we want to send something to a specific user. There is no reason
    to target them by rooms since we just want to target them:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们使用`emit`的最后一种方式是`socket.emit`。当我们想要发送一些东西给特定用户时，我们仍然会使用它。没有理由通过房间来定位他们，因为我们只想定位他们：
- en: '[PRE55]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'This are the two ways we''re going to emit to specific rooms. Now in order
    to actually start wiring some of that up what we can do is take the following
    two calls and we can move them down inside `join`, meaning that we''re not going
    to tell someone that someone joined a room until they''ve actually joined the
    room by calling `join`:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们要向特定房间发出的两种方式。现在为了实际开始连接一些东西，我们可以采取以下两个调用，并将它们移到`join`内部，这意味着我们不会告诉某人有人加入了一个房间，直到他们通过调用`join`实际加入了房间：
- en: '[PRE56]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We''re also not going to tell a user that they have joined a room until the
    call has actually gone through. It might not go through if the data, like the
    name or the room name, are invalid. Let''s take both of these calls and cut them
    out, and we''re just going to take them as they are and move them down into join.
    For the moment we can move them down below our comments; I''m going to leave the
    comments in place so you have these as a reference down the line. Now right below
    the `socket.join` line, we call `socket.emit` and we `emit` a new message, `Welcome
    to the chat app`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也不会告诉用户他们已经加入了一个房间，直到通话实际上已经进行。如果数据无效，比如名称或房间名称，通话可能不会进行。让我们把这两个调用都删掉，我们只是按原样接受它们并将它们移到下面的加入。暂时我们可以把它们移到我们的评论下面；我会留下评论，这样你以后可以作为参考。现在就在`socket.join`行的下面，我们调用`socket.emit`，我们`emit`一个新消息，`欢迎来到聊天应用`：
- en: '[PRE57]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: And this line it is actually going to stay the same, we still just want to target
    any specific user.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行实际上将保持不变，我们仍然只想定位任何特定用户。
- en: The next line is going to change though. Instead of broadcasting to every connected
    user, we're going to broadcast to just users inside the room we just joined, using
    `socket.broadcast.to`, passing in `params.room`. We're going to emit a new message
    and this is going to let everyone know that a new user has joined.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行将会改变。我们不再广播给每个连接的用户，而是只广播给我们刚刚加入的房间内的用户，使用`socket.broadcast.to`，传入`params.room`。我们将发出一个新消息，这将让每个人都知道有新用户加入了。
- en: '[PRE58]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Instead of new user, we can actually specify the name. We have access to that.
    Right here, I''m going to use a template string injecting the name first, `params.name`,
    followed by `has joined`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是新用户，我们实际上可以指定名称。我们可以访问到。就在这里，我将使用模板字符串首先注入名称，`params.name`，然后是`已加入`：
- en: '[PRE59]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Testing the specific user set up
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试特定用户设置
- en: 'Now that we have this in place we can actually test things out. What we''re
    going to do is join a room, then we''re going to have a second user join, and
    we should see the message right there: **Their name has joined**. We''re also
    going to add a third user into the mix to make sure it''s actually sending the
    message to just one room.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备就绪，我们可以实际测试一下。我们要做的是加入一个房间，然后我们要让第二个用户加入，我们应该看到消息：**他们的名字已经加入**。我们还要添加第三个用户进来，以确保它实际上只发送消息给一个房间。
- en: 'Over inside the browser, let''s get started by creating a user called `User
    One`. This user is going to join a room called uppercase `A`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，让我们开始创建一个名为`用户一`的用户。这个用户将加入一个名为大写`A`的房间：
- en: '![](img/dbc9d5a9-d57d-4e30-b99c-0f152a558b90.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dbc9d5a9-d57d-4e30-b99c-0f152a558b90.png)'
- en: 'Now we''re going to go ahead and create a second user by going to `localhost:3000`.
    This one can be called `User Two` and we''re going to join room `B`:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要继续创建第二个用户，前往`localhost:3000`。这个可以叫`用户二`，我们要加入房间`B`：
- en: '![](img/88fb428b-e5e2-4724-b10f-f7f279403992.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88fb428b-e5e2-4724-b10f-f7f279403992.png)'
- en: And if I go between room `A` and room `B` you can see that no join message printed
    because we haven't joined the same room. We're on completely separate rooms so
    we should not be getting those messages.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我在房间`A`和房间`B`之间切换，你会看到没有加入消息打印出来，因为我们没有加入相同的房间。我们在完全不同的房间，所以我们不应该收到那些消息。
- en: 'Next up we''re going to add a third user, this user is also going to join room
    `A`, `User Three`, room name, room `A`, and we are going to hit Join. When we
    hit Join, we can go through the tabs and see what data we get back:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要添加第三个用户，这个用户也要加入房间`A`，`用户三`，房间名称，房间`A`，然后我们点击加入。当我们点击加入时，我们可以在标签之间切换并查看我们得到的数据：
- en: '![](img/93e024a2-cb7e-4fe9-bec3-1688522c665e.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93e024a2-cb7e-4fe9-bec3-1688522c665e.png)'
- en: 'Here we get Welcome to the chat app as expected. This is only happening because
    we''ve successfully joined the room:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们得到了预期的欢迎来到聊天应用。这只会发生是因为我们已经成功加入了房间：
- en: '![](img/e7b1515a-4cf7-4cb2-b8f2-46eca485cc81.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7b1515a-4cf7-4cb2-b8f2-46eca485cc81.png)'
- en: 'Then in the second tab we get Welcome to the chat app too. There is no message
    greeting that other user because the other user joined room `A`, and the first
    tab has our User Three has joined message. This is fantastic:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在第二个标签中，我们也会收到欢迎来到聊天应用的消息。没有消息欢迎其他用户，因为其他用户加入了房间`A`，第一个标签有我们的用户三已加入的消息。这太棒了：
- en: '![](img/11002b86-87b7-48e9-81fc-3af3a987f7a9.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/11002b86-87b7-48e9-81fc-3af3a987f7a9.png)'
- en: Both users are in room `A` so this user should get a message when a new user
    joins, and we've injected the name right here as expected.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 两个用户都在房间`A`，所以当有新用户加入时，这个用户应该会收到一条消息，我们已经在这里注入了名称，这是预期的。
- en: Summary
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked into adding a chat page. We'll built an HTML file
    and defined `head` and `body` tags as per our requirements. Then, we go ahead
    with passing the room data. We looked into the concept of `params` and `deparams`
    and created test cases for validating the data. In the last section, we discussed
    the `socket.io` rooms. We targeting a specific user for the chat room and tested
    the set up.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了添加聊天页面。我们建立了一个HTML文件，并根据我们的要求定义了`head`和`body`标签。然后，我们继续传递房间数据。我们研究了`params`和`deparams`的概念，并创建了用于验证数据的测试用例。在最后一节中，我们讨论了`socket.io`房间。我们针对聊天室中的特定用户进行了测试并测试了设置。
- en: Things were relatively easy for our `join` event listener because we had access
    to both the name variable and the room variable. They were actually passed in
    as arguments. It's going to be a lot more difficult for `createMessage` and `createLocationMessage`.
    We'll need to figure out a way to get the room back for the given socket so we
    can `emit` to just that room.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的`join`事件监听器来说，事情相对容易，因为我们可以访问到name变量和room变量。它们实际上是作为参数传递进来的。对于`createMessage`和`createLocationMessage`来说，情况会更加困难。我们需要找出一种方法来获取给定socket的房间，这样我们就可以只向该房间发出`emit`。
- en: We also need to set up that People list on the left-hand sidebar. We'll need
    to figure out how to use that `io` object to get a list of all the people by room
    and their names. All of that is going to be super important because currently
    the messages we `emit`, some message(s), for example, will show up to all users
    regardless of what room they're in. To get this working, to get those private
    rooms in place, we'll be persisting that data, which we are going to discuss in
    the next chapter.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在左侧边栏设置“人员列表”。我们需要弄清楚如何使用`io`对象来获取按房间分类的所有人员及其姓名的列表。所有这些都非常重要，因为目前我们发出的消息，例如，将显示给所有用户，而不管他们在哪个房间。为了使其正常工作，为了建立私人房间，我们将持久化这些数据，这将在下一章中讨论。
