- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Ensuring Framework Usability and Quality
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保框架可用性和质量
- en: Continuing on the theme of framework architecture from the previous chapter,
    we will begin to look at the more architectural aspects of JavaScript frameworks.
    While technical architecture plays the core role and provides the guts of the
    framework, there are additional pieces of system architecture that engineers can
    add so that the project has a higher grade of usability and quality. As we mainly
    specialize in JavaScript projects, we will find a variety of tools that help us
    focus on quality. These tools are often built with JavaScript, but they also integrate
    with other systems, making it easier for those familiar with the language to cherish
    the benefits.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 继续探讨前一章中框架架构的主题，我们将开始研究JavaScript框架的更多架构方面。虽然技术架构扮演核心角色并提供框架的精髓，但工程师还可以添加额外的系统架构元素，以便项目具有更高的可用性和质量。由于我们主要专注于JavaScript项目，我们将发现各种有助于我们关注质量的工具。这些工具通常是用JavaScript构建的，但它们也与其他系统集成，使得熟悉该语言的人更容易珍惜这些好处。
- en: Supporting the technical usability of a framework is a series of development
    quality and usability patterns. These include the additional infrastructure that
    is used as part of framework development and framework usage. Generally, we look
    at these components as tools that improve our framework’s life cycle. First are
    the techniques that ensure the framework’s usability, for framework authors, contributors,
    and users. Second is the supporting infrastructure, such as documentation and
    many types of tests.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 支持框架的技术可用性是一系列开发质量和可用性模式。这包括作为框架开发和使用的部分使用的附加基础设施。通常，我们将这些组件视为提高我们框架生命周期的工具。首先是确保框架可用性的技术，对于框架作者、贡献者和用户来说。其次是支持性基础设施，如文档和多种类型的测试。
- en: 'We are going to explore these important topics in this chapter, focusing on
    development support patterns that help us build frameworks. Just like the technical
    architectures, these skills and tools can be applied while building any type of
    JavaScript framework. This chapter’s topics include exploring the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中探讨这些重要主题，重点关注帮助我们构建框架的开发支持模式。就像技术架构一样，这些技能和工具可以在构建任何类型的JavaScript框架时应用。本章的主题包括探索以下内容：
- en: '**Framework documentation** – a set of written or generated materials that
    provide information on framework features and how to utilize the framework for
    new projects. To learn from the best, in this section, we will take a look at
    how other JavaScript frameworks produce public and internal documentation.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**框架文档** – 一套书面或生成的材料，提供有关框架功能和如何利用框架进行新项目的信息。为了向最佳实践学习，在本节中，我们将探讨其他JavaScript框架如何制作公开和内部文档。'
- en: '**Variety of framework tests** – used extensively to check the correctness
    of the framework using different types of tooling, such as unit tests, end-to-end
    tests, and more. Focusing further on JavaScript projects, this section explores
    the testing abilities of framework projects.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**框架测试的多样性** – 广泛用于使用不同类型的工具（如单元测试、端到端测试等）检查框架的正确性。进一步关注JavaScript项目，本节将探讨框架项目的测试能力。'
- en: '**Development tooling** – external tools that help with the development process.
    This includes additional configurations and tooling that assist with the internal
    workflow of the framework, such as continuous integration, source control enhancements,
    and development tweaks. In the upcoming sections, we will see what type of developer
    tools are used by JavaScript projects such as Vue.js and Nest.js.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发工具** – 帮助开发过程的外部工具。这包括额外的配置和工具，这些工具有助于框架的内部工作流程，例如持续集成、源代码控制增强和开发调整。在接下来的章节中，我们将看到Vue.js和Nest.js等JavaScript项目使用哪些类型的开发者工具。'
- en: '**Generic framework structure** – understanding how we can create our own framework
    structure based on lessons from other open source framework architectures and
    patterns that we have seen in the book so far. This will give us a good outline
    of how authors organize the JavaScript framework code in large projects.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用框架结构** – 理解我们如何根据从其他开源框架架构和本书中迄今为止看到的模式中吸取的教训来创建自己的框架结构。这将为我们提供一个很好的概述，了解作者如何在大型项目中组织JavaScript框架代码。'
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the resources for this chapter in the book’s repository: [https://github.com/PacktPublishing/Building-Your-Own-JavaScript-Framework](https://github.com/PacktPublishing/Building-Your-Own-JavaScript-Framework).
    To make it easier to interact with the practical portion of this chapter, use
    the `chapter4` directory. The interactive script will make it easier for you to
    run the samples from this chapter. It works as follows from your command prompt
    or terminal window on your machine:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书的存储库中找到本章的资源：[https://github.com/PacktPublishing/Building-Your-Own-JavaScript-Framework](https://github.com/PacktPublishing/Building-Your-Own-JavaScript-Framework)。为了更容易地与本章的实际部分互动，请使用
    `chapter4` 目录。交互式脚本将使您更容易运行本章的示例。它的工作方式如下，从您的命令提示符或计算机上的终端窗口执行：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As with other chapters, the code in the repository is designed to work in operating
    systems that can run the Node.js runtime, such as Windows, macOS, and most variants
    of Linux.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他章节一样，存储库中的代码旨在在可以运行 Node.js 运行时的操作系统上工作，例如 Windows、macOS 和大多数 Linux 变体。
- en: JavaScript testing refresher
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 测试复习
- en: In this chapter, we will be discussing topics related to JavaScript testing.
    If you require a refresher or additional resources to give you in-depth information
    on various types of testing techniques, then check out additional Packt publications
    at [subscription.packtpub.com/search?query=javascript+testing](http://subscription.packtpub.com/search?query=javascript+testing).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论与 JavaScript 测试相关的话题。如果您需要复习或需要更多资源来深入了解各种测试技术，请查看 Packt 出版物的额外出版物，详情请访问
    [subscription.packtpub.com/search?query=javascript+testing](http://subscription.packtpub.com/search?query=javascript+testing)。
- en: Development support
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发支持
- en: Let's dive into a series of techniques and tools that enable developers to build
    quality frameworks focused on usability and ease of use. Learning and utilizing
    these types of development support strategies will help us with our framework
    development, making our projects more usable in internal (work projects) or public
    contexts (open source/publicly published projects).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入研究一系列技术工具，这些工具使开发者能够构建专注于可用性和易用性的高质量框架。学习和利用这些类型的开发支持策略将有助于我们的框架开发，使我们的项目在内部（工作项目）或公共环境中（开源/公开发布的项目）更具可用性。
- en: Some of these development methodologies and skills are not specific to JavaScript
    framework development; they are used across many JavaScript and web application
    development undertakings. However, in the context of framework development, the
    approach to these tooling and usability patterns is different from a regular application
    project. For example, a framework might have a particular expanded set of tests
    that ensures that new features and changes do not break the existing applications
    that use it. This type of extended testing is a particular case that only applies
    to framework projects and not application projects.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些开发方法和技能并不特定于 JavaScript 框架开发；它们被广泛应用于许多 JavaScript 和 Web 应用程序开发任务中。然而，在框架开发的背景下，对这些工具和可用性模式的方法与常规应用程序项目不同。例如，一个框架可能有一个特定的扩展测试集，确保新功能和更改不会破坏使用它的现有应用程序。这种扩展测试是仅适用于框架项目而不适用于应用程序项目的特定情况。
- en: In addition, a framework may focus more on technical design benchmarking and
    compatibility testing, supporting a variety of use cases. A lot of this comes
    from the requirements of the framework consumers and stakeholders.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一个框架可能更注重技术设计基准测试和兼容性测试，支持各种用例。这很大程度上源于框架消费者和利益相关者的需求。
- en: In the *Core APIs* section of [*Chapter 3*](B19014_03.xhtml#_idTextAnchor051),
    we saw examples of interfaces and features, such as *dependency injection*. These
    interfaces are designed to empower framework users with their flexibility and
    feature set. However, these interfaces need to be documented to be accessible
    to the developers. Otherwise, even if the framework interface is simple enough
    or powerful but not discoverable or explained, it probably won’t be utilized by
    users. These interfaces also need to be thoroughly tested, in isolation and as
    part of a greater system. Finally, we need various types of infrastructure to
    enable this process of testing, maintenance, and documentation. Luckily, there
    are many existing solutions that make framework development and maintenance much
    easier through the tools provided by the greater JavaScript community and external
    software services.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第3章*](B19014_03.xhtml#_idTextAnchor051) 的 *核心API* 部分，我们看到了接口和功能的示例，例如 *依赖注入*。这些接口旨在通过其灵活性和功能集赋予框架用户权力。然而，这些接口需要文档化，以便开发者可以访问。否则，即使框架接口足够简单或强大，但不可发现或解释，可能不会被用户使用。这些接口还需要进行彻底的测试，无论是独立测试还是作为更大系统的一部分。最后，我们需要各种类型的基础设施来支持这一测试、维护和文档化过程。幸运的是，有许多现有解决方案通过JavaScript社区提供的工具和外部软件服务，使框架开发和维护变得更加容易。
- en: 'Let us focus on the three categories of usability and quality patterns that
    will help us build a great framework:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们关注三个可帮助构建优秀框架的可用性和质量模式类别：
- en: '**Documentation** – a collection of materials targeting different framework
    stakeholders. These could be generated or written by the framework’s developers.
    This reference can also be internal, showcasing the design decisions and the technical
    architecture.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档** – 针对不同框架利益相关者的材料集合。这些可能是由框架的开发者生成或编写的。此参考也可以是内部的，展示了设计决策和技术架构。'
- en: '**Framework testing** – the testing infrastructure is crucial to development,
    feature set, and maintenance as they ensure framework quality. This includes using
    a variety of tools, such as unit, end-to-end, and integration testing.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**框架测试** – 测试基础设施对于开发、功能集和维护至关重要，因为它们确保框架质量。这包括使用各种工具，例如单元测试、端到端测试和集成测试。'
- en: '**Development tooling** – the supplementary tools that improve the internal
    workflow of developers. The tools incorporate technologies that simplify working
    with the project. They do this by introducing processes such as source control
    improvements, continuous integration, and others.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发工具** – 提高开发者内部工作流程的辅助工具。这些工具集成了简化项目工作的技术。它们通过引入源代码控制改进、持续集成等流程来实现这一点。'
- en: Each category of these patterns has several subtypes. In most cases, multiple
    existing frameworks rely on these types of techniques in their projects. We are
    going to get into an in-depth look at those patterns in this chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模式类别的每个类别都有几个子类型。在大多数情况下，多个现有框架在其项目中依赖于这些类型的技巧。我们将在本章中深入探讨这些模式。
- en: '*Figure 4**.1* presents a detailed outlook at an assortment of documentation
    kinds, types of tests, and additional tooling that is used by JavaScript frameworks
    today:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4**.1* 展示了JavaScript框架今天使用的各种文档类型、测试类型和附加工具的详细概述：'
- en: '| **Documentation** | **Framework testing** | **Development tooling** |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| **文档** | **框架测试** | **开发工具** |'
- en: '| Public API | Unit tests | Continuous integration |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 公共API | 单元测试 | 持续集成 |'
- en: '| Examples | Integration tests | Source control |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 集成测试 | 源代码控制 |'
- en: '| Internal documentation | End-to-end tests | Package configuration |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 内部文档 | 端到端测试 | 包配置 |'
- en: '|  | Benchmarks |  |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '|  | 基准测试 |  |'
- en: 'Figure 4.1: Subtypes of tools and patterns utilized in frameworks'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1：框架中使用的工具和模式的子类型
- en: We begin by looking at the documentation, something that our framework cannot
    survive without.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先关注文档，这是我们框架无法生存的东西。
- en: Documentation
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档
- en: Writing up documentation is one of the most crucial things for framework adaptation
    and usability. The reference materials produced can enable developers to properly
    utilize the provided tools. Framework developers spent a lot of time writing and
    tweaking their documentation, focusing on providing the most detailed and simple
    explanations of the components of the framework function. With a typical web application,
    you would already have some existing documentation on how to run it and configure
    parts of it. However, while developing a framework, a lot more documentation is
    required, consisting of API methods, learning materials, and other solutions to
    make it easier to utilize the framework to its maximum potential. Today, most
    frameworks invest in showcasing the framework’s API methods, writing up articles
    that help developers learn the framework from scratch, creating interactive tutorials,
    and providing detailed examples demonstrating how a framework can approach the
    challenges of a particular feature set.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 编写文档是框架适应性和可用性最重要的任务之一。产生的参考资料可以使开发者正确利用提供的工具。框架开发者花费了大量时间编写和调整他们的文档，专注于提供框架功能的组件最详细和最简单的解释。对于一个典型的Web应用，你已经有了一些关于如何运行它和配置其部分的功能文档。然而，在开发框架时，需要更多的文档，包括API方法、学习材料和其它解决方案，以便更容易地充分利用框架。今天，大多数框架都投资于展示框架的API方法，编写帮助开发者从头开始学习框架的文章，创建交互式教程，并提供详细示例，展示框架如何应对特定功能集的挑战。
- en: A great role model example of documentation comes from the creators of React
    – with the recently launched new learning platform at [https://react.dev](https://react.dev),
    which encourages the use of the library across the ecosystem and within frameworks.
    To help encourage adaption and successful knowledge transfer, their focus was
    on creating a learning environment alongside the API reference.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个优秀的文档范例来自React的创造者——在最近推出的新学习平台[https://react.dev](https://react.dev)上，该平台鼓励在整个生态系统和框架内使用该库。为了鼓励采用和成功知识转移，他们的重点是创建与API参考一起的学习环境。
- en: 'As you begin to build out your framework, keep in mind that providing a list
    of programmatic APIs is not enough. In *Figure 4**.2*, we can see excellent examples
    of valuable reference material:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始构建你的框架时，请记住，仅提供一个程序性API列表是不够的。在*图 4*.*2*中，我们可以看到有价值参考材料的优秀示例：
- en: '![Figure 4.2: Learning React documentation](img/Figure_4.2_B19014.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2：学习 React 文档](img/Figure_4.2_B19014.jpg)'
- en: 'Figure 4.2: Learning React documentation'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2：学习 React 文档
- en: Even though React is a library, there is still much we can learn about how the
    documentation is structured for this project. It consists of several vital items.
    The installation guide comes first and foremost; this can consist of package installation
    guidelines and the ability to scaffold a new project using a framework. Then,
    the existing or potential framework user is presented with a tutorial and an explanation
    of the thinking model behind the tool. Lastly, a series of articles explains the
    most important topics that a developer needs to know about the tool they are about
    to use.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管React是一个库，但我们仍然可以从这个项目的文档结构中学到很多。它包括几个关键项。首先是安装指南；这可以包括包安装指南和使用框架搭建新项目的能力。然后，现有或潜在的框架用户将得到一个教程和工具背后的思维模型解释。最后，一系列文章解释了开发者在使用工具时需要了解的最重要的话题。
- en: Your framework should aspire to a similar form of learning documentation. Even
    in cases of internal framework development, you or your team should still document
    and create learning reference material to encourage proper usage of your framework
    procedures. This kind of approach leads us to the next important part of documentation
    – the API.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你的框架应该追求类似的学习文档形式。即使在内部框架开发的情况下，你或你的团队仍然应该记录并创建学习参考材料，以鼓励正确使用你的框架流程。这种做法引导我们进入文档的下一个重要部分——API。
- en: Public API
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公共API
- en: In [*Chapter 3*](B19014_03.xhtml#_idTextAnchor051), as part of exploring framework
    packages, we have examined the framework entry points. Documentation serves as
    another type of entry point; developers interact with the framework by utilizing
    the provided documentation. Primarily, this interaction can be facilitated by
    the **public API** or **API reference**, created from the framework’s code and
    its interfaces.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](B19014_03.xhtml#_idTextAnchor051)中，作为探索框架包的一部分，我们检查了框架的入口点。文档作为另一种类型的入口点；开发者通过利用提供的文档与框架交互。主要来说，这种交互可以通过**公共API**或**API参考**来实现，这些是从框架的代码及其接口中创建的。
- en: 'Every framework we have seen in this book has an API reference published alongside
    the framework. This type of API reference can be statically or dynamically generated.
    In *Figure 4**.3*, we see an example of such documentation; the Vue.js docs are
    generated from the [github.com/vuejs/docs](http://github.com/vuejs/docs) repository
    and assembled using a static site generator:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们看到的每个框架都附带了一个与框架一起发布的API参考。这种类型的API参考可以是静态生成或动态生成的。在*图4.3*中，我们看到这样一个文档的例子；Vue.js文档是从[gihub.com/vuejs/docs](http://github.com/vuejs/docs)仓库生成的，并使用静态站点生成器组装的：
- en: '![Figure 4.3: Part of the Vue.js API reference](img/Figure_4.3_B19014.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图4.3：Vue.js API参考的一部分](img/Figure_4.3_B19014.jpg)'
- en: 'Figure 4.3: Part of the Vue.js API reference'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3：Vue.js API参考的一部分
- en: 'There are many open source projects that can make it easier for you to generate
    and maintain documentation files:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多开源项目可以帮助您更容易地生成和维护文档文件：
- en: '**Docusaurus** ([docusaurus.io](http://docusaurus.io)) – a static documentation
    site generator. Specifically for frameworks, it provides features such as search,
    versioning according to framework releases, and more.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docusaurus** ([docusaurus.io](http://docusaurus.io)) – 一个静态文档站点生成器。特别为框架设计，它提供了搜索、根据框架发布进行版本控制等功能。'
- en: '**MarkDoc** ([markdoc.dev](http://markdoc.dev)) – another open source for custom
    documentation sites. It is extensible and aims to provide the best documentation
    authoring and publishing experience.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MarkDoc** ([markdoc.dev](http://markdoc.dev)) – 另一个用于自定义文档站点的开源项目。它是可扩展的，旨在提供最佳的文档编写和发布体验。'
- en: '**Docus** ([docus.dev](http://docus.dev)) – a documentation generator that
    utilizes familiar to us frameworks such as Nuxt.js and Vue.js. Supports Markdown
    syntax and zero-configuration deploys across many services.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docus** ([docus.dev](http://docus.dev)) – 一个利用我们熟悉的框架（如Nuxt.js和Vue.js）的文档生成器。支持Markdown语法，并在许多服务上实现零配置部署。'
- en: '**TypeDoc** ([typedoc.org](http://typedoc.org)) – a documentation generator
    for TypeScript source code. Creates static sites based on the comments inside
    of the TypeScript files. The tool also has the ability to output the parsed source
    as a JSON file. A similar tool, **JSDoc** ([jsdoc.app](http://jsdoc.app)), is
    also available for pure JavaScript projects.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TypeDoc** ([typedoc.org](http://typedoc.org)) – 用于TypeScript源代码的文档生成器。基于TypeScript文件内的注释创建静态站点。该工具还具有将解析的源代码输出为JSON文件的能力。类似工具**JSDoc**
    ([jsdoc.app](http://jsdoc.app))也适用于纯JavaScript项目。'
- en: '**TSDoc** ([tsdoc.org](http://tsdoc.org)) – a similar project to TypeDoc, backed
    by Microsoft. It focuses on standardization efforts around documentation generators
    by providing an engine for other tools to generate comment-based documentation.
    Has integrations with several other projects, such as ESLint and Visual Studio
    Code.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TSDoc** ([tsdoc.org](http://tsdoc.org)) – 与TypeDoc类似的项目，由微软支持。它通过为其他工具提供基于注释的文档生成引擎，专注于文档生成器的标准化工作。与多个其他项目（如ESLint和Visual
    Studio Code）有集成。'
- en: Using one of the tools we just listed might be going overboard if your framework
    is just starting up, but given that documentation is critically necessary to the
    framework’s usability, you need to make sure to make it easier for yourself to
    maintain readable and clean documentation. You can also draw inspiration from
    a larger and more complex framework such as Angular. The project already provides
    the in-depth API reference ([angular.io/api](http://angular.io/api)), but in addition,
    the authors also deliver an exhaustive reference to concepts, error types, and
    diagnostics. All of these can be found in the **guides** section (e.g., [angular.io/guide/file-structure](http://angular.io/guide/file-structure))
    of the Angular website.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的框架刚刚起步，使用我们刚刚列出的工具可能有些过度，但鉴于文档对于框架的可用性至关重要，您需要确保使维护可读性和干净的文档变得更容易。您还可以从像Angular这样的更大、更复杂的框架中汲取灵感。该项目已经提供了深入的API参考（[angular.io/api](http://angular.io/api)），但除此之外，作者还提供了一份关于概念、错误类型和诊断的详尽参考。所有这些都可以在Angular网站的**指南**部分（例如，[angular.io/guide/file-structure](http://angular.io/guide/file-structure)）中找到。
- en: As you develop your framework, you will likely introduce drastic breaking changes
    as you go along from version to version. If you are in a context where you already
    have existing framework consumers, then you should spend the time creating a migration
    reference document. Good migration guidelines help your stakeholders keep up to
    date with the changes and use the latest fixes. Some examples of good migration
    guides include the Electron *Breaking Changes* guides ([electronjs.org/docs/latest/breaking-changes](http://electronjs.org/docs/latest/breaking-changes))
    and the Express migration overview ([expressjs.com/en/guide/migrating-5.html](http://expressjs.com/en/guide/migrating-5.html)).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您开发框架，您可能会在版本与版本之间引入重大的破坏性更改。如果您处于已经存在现有框架消费者的环境中，那么您应该花时间创建一个迁移参考文档。良好的迁移指南有助于您的利益相关者跟上变化并使用最新的修复。一些好的迁移指南示例包括Electron的*破坏性更改*指南（[electronjs.org/docs/latest/breaking-changes](http://electronjs.org/docs/latest/breaking-changes)）和Express迁移概述（[expressjs.com/en/guide/migrating-5.html](http://expressjs.com/en/guide/migrating-5.html)）。
- en: Practical use of documentation tools
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 文档工具的实际应用
- en: The repository directory for this chapter has an example of one of the documentation
    tools in action. In this case, the example uses Docus, with the Nuxt.js framework
    powering the behind-the-scenes infrastructure of the project. You can try this
    out on your own computer by running the interactive script in the `chapter4` directory
    or manually navigating to `practical-docus` and running `npm install`, and then
    `npm run dev`. The documentation site will run on port `3001` and you can live
    edit and interact with the docs tooling by editing files in the directory.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的仓库目录中包含了一个文档工具实际应用的示例。在这个例子中，示例使用了Docus，Nuxt.js框架为项目的后台基础设施提供动力。您可以在自己的电脑上通过在`chapter4`目录中运行交互式脚本或手动导航到`practical-docus`并运行`npm
    install`，然后`npm run dev`来尝试这个示例。文档站点将在端口`3001`上运行，您可以通过编辑目录中的文件来实时编辑和与文档工具交互。
- en: Basic documentation can improve your framework experience greatly, but there
    is more you can do to make adaptation more effortless. In the next section, we
    will focus on the importance of providing examples of framework usage. These meaningful
    resources can highlight the strong elements of your framework and ease of integration
    with other systems.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 基本文档可以极大地改善您的框架体验，但您还可以做更多的事情来使适应变得更加容易。在下一节中，我们将重点讨论提供框架使用示例的重要性。这些有意义的资源可以突出框架的强大元素以及与其他系统的集成简便性。
- en: Examples
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: Providing examples drastically helps reduce one of the most challenging aspects
    of adapting frameworks – the learning curve. To encourage adoption and reduce
    friction, framework developers invest time to produce examples of framework usage.
    These could be included as part of the reference documentation or provided alongside
    the framework source code. If you are working on an internal framework, investing
    in examples is still beneficial. If your project will be used by many internal
    teams or new hires, maintaining a base case of examples can reduce the number
    of questions and confusion.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 提供示例极大地有助于减少适应框架最具挑战性的方面之一——学习曲线。为了鼓励采用并减少摩擦，框架开发者投入时间来制作框架使用的示例。这些可以作为参考文档的一部分，或者与框架源代码一起提供。如果您正在开发一个内部框架，投资于示例仍然是有益的。如果您的项目将被许多内部团队或新员工使用，维护一个示例的基础可以减少问题数量和困惑。
- en: As part of my experience contributing to JavaScript testing frameworks, one
    of the most effective development investments was my focus on creating integration
    guides and developing examples. This was particularly important for a testing
    framework project, as the availability of these resources made it easier for developers
    to add the testing framework into their systems. It also showcased the maturity
    of the project, showing that it is capable of working with many different systems.
    It’s not just my experience, almost all JavaScript frameworks concentrate on providing
    instantly-runnable samples. These projects utilize tools such as **StackBlitz**
    ([stackblitz.com](http://stackblitz.com)) and **CodePen** ([codepen.io](http://codepen.io))
    to enable potential developers to get into the framework environment within seconds.
    For example, navigating to [stackblitz.com/fork/angular](http://stackblitz.com/fork/angular)
    presents you with a ready-to-go Angular framework application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我参与 JavaScript 测试框架贡献的经验中，最有效的开发投资之一就是专注于创建集成指南和开发示例。这对于测试框架项目尤其重要，因为这些资源的可用性使得开发者更容易将测试框架集成到他们的系统中。它还展示了项目的成熟度，表明它能够与许多不同的系统协同工作。这不仅仅是我的经验，几乎所有
    JavaScript 框架都专注于提供即时可运行的示例。这些项目利用 **StackBlitz** ([stackblitz.com](http://stackblitz.com))
    和 **CodePen** ([codepen.io](http://codepen.io)) 等工具，使潜在的开发者能够在几秒钟内进入框架环境。例如，访问
    [stackblitz.com/fork/angular](http://stackblitz.com/fork/angular) 会为你提供一个现成的 Angular
    框架应用程序。
- en: 'For more inspiration, Next.js takes the approach to examples thoughtfully;
    the framework maintains over 50 samples at [github.com/vercel/next.js/tree/canary/examples](http://github.com/vercel/next.js/tree/canary/examples).
    These include showcases of GraphQL support, CMS and blog use cases, integrations
    with other tooling, and deployment targets. To quickly enable users to run the
    samples, the `create-next-app` CLI supports the `example` argument to scaffold
    based on the sample:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得更多灵感，Next.js 考虑到示例的思考方式；该框架维护着超过 50 个示例，位于 [github.com/vercel/next.js/tree/canary/examples](http://github.com/vercel/next.js/tree/canary/examples)。这些示例包括对
    GraphQL 支持、CMS 和博客用例、与其他工具的集成以及部署目标。为了快速启用用户运行示例，`create-next-app` CLI 支持使用 `example`
    参数基于示例来构建：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When developing examples for your framework, keep in mind that you will later
    need to maintain all the examples you create, just like the documentation reference.
    If some example code gets out of date and no longer functions as it should, then
    it will cause more burden for you as the framework maintainer.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在为您的框架开发示例时，请记住，您将需要维护您创建的所有示例，就像文档参考一样。如果某些示例代码过时且不再按预期工作，那么这将给作为框架维护者的您带来更多负担。
- en: Practical example with Next.js
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Next.js 的实际示例
- en: You can check out this example in the `chapter4` directory in the `next-example-app`
    directory. Follow the `README.md` file for guidelines on setting up the Firebase
    project. The project requires Firebase project credentials to run properly. To
    initialize the Next.js app, run `npm install` and then `npm run dev`. You can
    also use the interactive script directly from the `chapter4` directory.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `next-example-app` 目录下的 `chapter4` 目录中查看此示例。按照 `README.md` 文件中的指南设置 Firebase
    项目。该项目需要 Firebase 项目凭据才能正常运行。要初始化 Next.js 应用程序，请运行 `npm install` 然后运行 `npm run
    dev`。您还可以直接从 `chapter4` 目录使用交互式脚本。
- en: To open the application, use the localhost URL, which will likely be `http://localhost:3000`.
    Follow the terminal output for instructions. To edit the files, open the `next-example-app`
    project directory with Visual Studio Code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开应用程序，请使用 localhost URL，这可能是 `http://localhost:3000`。按照终端输出中的说明操作。要编辑文件，请使用
    Visual Studio Code 打开 `next-example-app` 项目目录。
- en: 'Depending on the nature of your framework, you can use the JavaScript runtime
    tools to create a playground environment for your framework. In *Figure 4**.4*,
    we see a sample of the Vue.js component playground; this kind of environment takes
    the idea of examples further:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您框架的性质，您可以使用 JavaScript 运行时工具为您自己的框架创建一个游乐场环境。在 *图 4**.4 中，我们看到 Vue.js 组件游乐场的示例；这种环境将示例的概念进一步发展：
- en: '![Figure 4.4: Vue.js single-file component playground](img/Figure_4.4_B19014.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4：Vue.js 单文件组件游乐场](img/Figure_4.4_B19014.jpg)'
- en: 'Figure 4.4: Vue.js single-file component playground'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4：Vue.js 单文件组件游乐场
- en: With every “playground” example, you can teach the framework using the most
    basic features to more advanced use cases.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个“游乐场”示例，你都可以使用最基本的功能来教授框架，从更高级的使用案例。
- en: As you are starting up with your own framework, it is better to include your
    examples as part of your framework repository. To lessen the maintenance burden,
    make sure you execute your examples as part of your testing infrastructure (more
    on that later in [*Chapter 10*](B19014_10.xhtml#_idTextAnchor173), related to
    framework maintenance). If you are working on the framework alone or with a small
    team, the usage of included examples in your framework can greatly enhance the
    development process, helping you iterate quickly.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始自己的框架时，最好将你的示例作为框架存储库的一部分。为了减轻维护负担，确保你在测试基础设施中执行你的示例（更多内容将在[*第10章*](B19014_10.xhtml#_idTextAnchor173)，有关框架维护）中。如果你独自或与小型团队一起工作，在你的框架中使用包含的示例可以极大地提高开发过程，帮助你快速迭代。
- en: Internal documentation
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内部文档
- en: The internal documentation is all about helping the framework authors to continue
    developing the framework. Even if you are the only author of the framework, it
    is still useful to maintain internal documentation, even for your own sake. This
    way, you can look back on the code and design decisions from the past and make
    it easier to make updates to your project. Primarily, this type of documentation
    should not be consumed by the framework users or stakeholders. However, it can
    still be useful to expose these materials for debugging use cases.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 内部文档的目的是帮助框架作者继续开发框架。即使你是框架的唯一作者，维护内部文档仍然很有用，即使是为了你自己的利益。这样，你可以回顾过去的代码和设计决策，并使更新你的项目更容易。主要来说，这种类型的文档不应该被框架用户或利益相关者消费。然而，对于调试用例，公开这些材料仍然是有用的。
- en: The internal documentation can potentially include detailed interfaces of internal
    modules. It could potentially describe the design principles of the internal implementation.
    For instance, the Nuxt.js framework combines both public-facing and internal documentation
    on its reference pages. The framework’s renderer, builders, generator, and other
    classes are described in the Internals Glossary ([github.com/nuxt/nuxtjs.org/tree/main/content/en/docs/6.internals-glossary](http://github.com/nuxt/nuxtjs.org/tree/main/content/en/docs/6.internals-glossary)).
    For instance, Nuxt provides its own module system ([nuxtjs.org/docs/directory-structure/modules](http://nuxtjs.org/docs/directory-structure/modules))
    to extend the framework functionality, and the internals of that feature are supported
    by the `ModuleContainer` class. This class is part of the framework’s internals
    and should still be documented. It also enables framework plugin development for
    external developers to understand and extend the framework.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 内部文档可能包括内部模块的详细接口。它可能描述内部实现的原理。例如，Nuxt.js 框架在其参考页面上结合了面向公众和内部文档。框架的渲染器、构建器、生成器和其他类在内部术语表中进行了描述（[github.com/nuxt/nuxtjs.org/tree/main/content/en/docs/6.internals-glossary](http://github.com/nuxt/nuxtjs.org/tree/main/content/en/docs/6.internals-glossary)）。例如，Nuxt
    提供了自己的模块系统（[nuxtjs.org/docs/directory-structure/modules](http://nuxtjs.org/docs/directory-structure/modules)）以扩展框架功能，该功能的内部实现由
    `ModuleContainer` 类支持。这个类是框架内部的一部分，应该仍然被记录。它还使外部开发者能够理解和扩展框架，进行插件开发。
- en: Another example of using this type of documentation for the framework’s benefit
    can be seen in Vue.js. The framework utilizes the TSDoc tooling internally to
    ensure the specification of its functions, such as the shared utility methods.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Vue.js 中，可以看到使用这种类型文档的另一个框架示例。该框架内部使用 TSDoc 工具来确保其函数的规范，例如共享实用方法。
- en: 'The following code taken from the developer tools repository of the framework
    ([github.com/vuejs/devtools/blob/main/packages/shared-utils/src/util.ts](http://github.com/vuejs/devtools/blob/main/packages/shared-utils/src/util.ts))
    is a simpler example of documentation annotations that are available to framework
    developers while browsing the file, can later be exported to an external document,
    or can be previewed by an IDE while accessing this helper function:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是从框架的开发者工具存储库中提取的（[github.com/vuejs/devtools/blob/main/packages/shared-utils/src/util.ts](http://github.com/vuejs/devtools/blob/main/packages/shared-utils/src/util.ts)），它是框架开发者在浏览文件时可以使用的文档注释的简单示例，可以稍后导出到外部文档，或者在使用此辅助函数时由
    IDE 预览：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Contribution guidelines** are also part of this type of internal documentation.
    For both open and closed frameworks, you will potentially have someone who wants
    to make changes or contribute to the framework, either helping you fix issues
    or introducing new features. Contribution documentation helps enable this, providing
    the steps to quickly write and test new framework changes. As part of the contribution
    instruction, it is often important to list several important pieces of information:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**贡献指南**也是这类内部文档的一部分。对于开源和封闭框架，都可能有人想要对框架进行更改或贡献，无论是帮助你修复问题还是引入新功能。贡献文档有助于实现这一点，提供了快速编写和测试新框架更改的步骤。作为贡献说明的一部分，通常很重要列出以下几项重要信息：'
- en: First, how to modify the framework, build it, and test it. This includes pointers
    to all the relevant scripts that make the development process more approachable.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，如何修改框架、构建它以及测试它。这包括指向所有使开发过程更易于接近的相关脚本。
- en: Second, how to successfully write a patch, both in open source and internal
    environments. This includes following the source control guidelines and commit
    history rules.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，如何在开源和内部环境中成功编写补丁，包括遵循源代码控制指南和提交历史规则。
- en: To make framework contributions easier, this type of documentation should mention
    the coding rules around public and internal APIs, file formatting, and other potential
    style guides.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了使框架贡献更容易，这类文档应提及关于公共和内部API的编码规则、文件格式化以及其他潜在的风格指南。
- en: To provide some examples, Ember.js has a page on their contribution guidelines
    at [guides.emberjs.com/release/contributing](http://guides.emberjs.com/release/contributing),
    and other frameworks such as Angular include a `CONTRIBUTING.md` file in their
    repositories at [github.com/angular/angular/blob/main/CONTRIBUTING.md](http://github.com/angular/angular/blob/main/CONTRIBUTING.md).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Ember.js在其贡献指南页面[guides.emberjs.com/release/contributing](http://guides.emberjs.com/release/contributing)上有一个页面，其他框架如Angular在其GitHub存储库[github.com/angular/angular/blob/main/CONTRIBUTING.md](http://github.com/angular/angular/blob/main/CONTRIBUTING.md)中包含一个`CONTRIBUTING.md`文件。
- en: Framework testing
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 框架测试
- en: Just like any software project, frameworks require a number of tests to ensure
    that the framework is functioning as intended. In the framework context, you will
    find much in-depth testing focused on correctness, performance, and special framework
    use cases that need to be handled for all possible usage scenarios. We have seen
    examples of testing frameworks in the *Testing frameworks* section of [*Chapter
    1*](B19014_01.xhtml#_idTextAnchor015); those can be used from within our frameworks
    to simplify the testing workflow. In this section, we are going to look at what
    techniques JavaScript frameworks use internally to ensure that the final framework
    product is of high quality.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何软件项目一样，框架需要一系列测试来确保框架按预期工作。在框架的上下文中，你会找到许多针对正确性、性能以及需要处理所有可能使用场景的特殊框架用例的深入测试。我们在[*第一章*](B19014_01.xhtml#_idTextAnchor015)的[*测试框架*](https://wiki.example.org/testing_frameworks)部分看到了测试框架的例子；这些可以在我们的框架内部使用，以简化测试工作流程。在本节中，我们将探讨JavaScript框架内部使用哪些技术来确保最终框架产品具有高质量。
- en: Unit tests
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单元测试
- en: Just like most software projects, frameworks also include unit tests for their
    interfaces. They utilize a testing framework similar to the ones we have seen
    listed in [*Chapter 1*](B19014_01.xhtml#_idTextAnchor015). Often, you will see
    these types of tests called “specs” as well, meaning they are *specification tests*.
    This means that, given a certain component of a framework, there is a technical
    specification that it should adhere to. In the framework context, comprehensive
    tests help with refactoring major components much more quickly. Open source frameworks
    also benefit from a good unit testing suite when receiving external code contributions.
    It is much easier to review and be confident in the code change when there is
    a vast collection of existing tests and new tests being added as part of the change.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 就像大多数软件项目一样，框架也包括针对其接口的单元测试。它们使用与我们在[*第一章*](B19014_01.xhtml#_idTextAnchor015)中看到的类似的测试框架。通常，你会看到这些类型的测试被称为“specs”，这意味着它们是*规范测试*。这意味着，对于框架的某个组件，存在一个它应该遵守的技术规范。在框架的上下文中，全面的测试有助于更快地重构主要组件。开源框架在接收外部代码贡献时，也受益于良好的单元测试套件。当存在大量现有测试和新测试作为变更的一部分被添加时，审查代码变更并对其有信心要容易得多。
- en: 'Depending on the type of JavaScript framework, the testing environment and
    testing challenges can be different. In frameworks that target the browser, the
    unit testing requires mocking out browser and web APIs. For instance, Angular
    introduces several internal testing interfaces to simplify working with components
    that are injected into the DOM. Angular’s “change detection” and other DOM-related
    functionality use these testing interfaces to abstract away working with the `document`
    object instance directly. For example, Angular developers create several test
    wrappers to make it easier to attach the framework’s node tree to the DOM body,
    as seen in this function:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 根据JavaScript框架的类型，测试环境和测试挑战可能会有所不同。在针对浏览器的框架中，单元测试需要模拟浏览器和Web API。例如，Angular引入了几个内部测试接口，以简化与注入到DOM中的组件一起工作。Angular的“变更检测”和其他与DOM相关的功能使用这些测试接口来抽象处理`document`对象实例。例如，Angular开发者创建了几个测试包装器，以便更容易地将框架的节点树附加到DOM主体，如下面的函数所示：
- en: '[PRE3]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `change_detection_spec.ts` file relies on the `withBody` helper from the
    test utilities; these utilities rely on executing many frameworks’ tests in an
    environment where a `document` object is present.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`change_detection_spec.ts` 文件依赖于测试工具中的 `withBody` 辅助函数；这些工具依赖于在一个存在 `document`
    对象的环境中执行许多框架的测试。'
- en: 'In backend frameworks, projects may choose to mock out or create test-only
    classes based on the existing interfaces. For instance, Nest.js has defined a
    `NoopHttpAdapter` class ([https://github.com/nestjs/nest/blob/master/packages/core/test/utils/noop-adapter.spec.ts](https://github.com/nestjs/nest/blob/master/packages/core/test/utils/noop-adapter.spec.ts))
    that extends `AbstractHttpAdapter`, which we have seen before in the *Backend
    abstraction* section of [*Chapter 2*](B19014_02.xhtml#_idTextAnchor030). The following
    code shows how the testing adapter is structured to make it easier to use it in
    framework tests:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端框架中，项目可以选择模拟现有接口或创建仅用于测试的类。例如，Nest.js 定义了一个 `NoopHttpAdapter` 类 ([https://github.com/nestjs/nest/blob/master/packages/core/test/utils/noop-adapter.spec.ts](https://github.com/nestjs/nest/blob/master/packages/core/test/utils/noop-adapter.spec.ts))，它扩展了之前在[*第2章*](B19014_02.xhtml#_idTextAnchor030)的“后端抽象”部分中看到的
    `AbstractHttpAdapter`。以下代码显示了测试适配器的结构，以便更容易在框架测试中使用它：
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This `HttpAdapter` TypeScript class is used within the framework’s specification
    testing to ensure that the main `Application`, `Routing`, and `Middleware` classes
    function as they should.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `HttpAdapter` TypeScript 类在框架的规范测试中使用，以确保主要的 `Application`、`Routing` 和 `Middleware`
    类按预期工作。
- en: 'While developing your JavaScript framework, ensure to unit test every new component
    or interface that you add. This process will help you in several ways:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发JavaScript框架时，确保对每个新添加的组件或接口进行单元测试。这个过程将以多种方式帮助你：
- en: It will increase the code quality and help you organize your framework such
    that its components fit better together.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将提高代码质量，并帮助你组织框架，使其组件更好地协同工作。
- en: The framework development process is full of constant refactoring or changes.
    Your unit testing suite will grow as your framework grows and will increase your
    confidence in the changes as you code along.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 框架开发过程充满了持续的重构或更改。随着框架的增长，你的单元测试套件也会增长，并且随着你编码，你将增加对更改的信心。
- en: Finally, ensure that your unit testing suite runs efficiently. For example,
    Vue.js uses the Vitest test runner. Vue has over 2,500 unit tests, which execute
    in about 20 seconds. The unit tests of your framework should run as fast as possible
    to provide you with a blazing-fast feedback loop while you are busy developing
    new framework features.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，确保你的单元测试套件运行高效。例如，Vue.js 使用 Vitest 测试运行器。Vue 有超过 2,500 个单元测试，大约在 20 秒内执行。你的框架单元测试应该尽可能快地运行，以便在你忙于开发新框架功能时提供快速的反馈循环。
- en: Integration tests
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集成测试
- en: Integration tests are created with the purpose of testing how multiple interfaces
    or components of the framework fit together. These tests can catch issues that
    are not detected by unit/specification testing due to the fact that those types
    of tests are designed to test the component in isolation. Integration tests simulate
    the interaction between the components, making sure that the functionality fits
    well together.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试的目的是为了测试框架的多个接口或组件如何协同工作。这些测试可以捕捉到单元测试/规范测试无法检测到的问题，因为这些类型的测试旨在单独测试组件。集成测试模拟组件之间的交互，确保功能能够良好地协同工作。
- en: In the context of frameworks, the internal core architecture has to fit together.
    This means the integration tests would be verifying that behavior. For instance,
    a good integration test for a full stack framework would be ensuring that a component
    is rendered when a particular `router` route is called to. This kind of test ensures
    that all those components are behaving nicely together.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在框架的背景下，内部核心架构必须相互匹配。这意味着集成测试将验证这种行为。例如，对于一个全栈框架来说，一个好的集成测试将确保当调用特定的`router`路由时，组件会被渲染。这种测试确保所有这些组件都能良好地协同工作。
- en: In addition, frameworks usually have to integrate with other systems. This means
    developers also need to produce integration tests between a framework and that
    external system. For example, the Gatsby framework has integration tests ([github.com/gatsbyjs/gatsby/tree/master/integration-tests](http://github.com/gatsbyjs/gatsby/tree/master/integration-tests))
    for its static-site rendering, command-line interface, and caching infrastructure.
    These tests verify the framework’s features. However, Gatsby also includes integration
    tests to verify that it works with other technologies. The framework has an integration
    test to verify compatibility with the JavaScript ESM module standard.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，框架通常需要与其他系统集成。这意味着开发者还需要在框架和外部系统之间产生集成测试。例如，Gatsby框架为其静态站点渲染、命令行界面和缓存基础设施提供了集成测试([github.com/gatsbyjs/gatsby/tree/master/integration-tests](http://github.com/gatsbyjs/gatsby/tree/master/integration-tests))。这些测试验证了框架的功能。然而，Gatsby还包括集成测试来验证它与其他技术的兼容性。该框架有一个集成测试来验证与JavaScript
    ESM模块标准的兼容性。
- en: Writing integration tests can be challenging, as you have to verify that all
    sorts of interface combinations are working faultlessly together. Though it is
    an essential part of the framework development process, this type of testing can
    ultimately be much more beneficial than unit testing if you are in a rush to deliver
    your new framework project.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 编写集成测试可能具有挑战性，因为你必须验证所有类型的接口组合是否能够无缝协同工作。尽管它是框架开发过程中的一个基本部分，但如果你在匆忙交付新的框架项目，这种类型的测试最终可能比单元测试更有益。
- en: End-to-end tests
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 端到端测试
- en: End-to-end tests evaluate how the framework is functioning as a system overall.
    Usually, these tests simulate almost real user interaction. For a frontend framework,
    creating these tests usually means configuring one of the end-to-end testing frameworks.
    For server-side frameworks, the end-to-end tests usually simulate real requests
    to a server that is powered by the framework. Similar to its set of integration
    tests, Gatsby also maintains a suite of `transition`, `grid`, and `tree-view`
    interfaces. These can be found at [github.com/vuejs/core/tree/main/packages/vue/__tests__/e2e](http://github.com/vuejs/core/tree/main/packages/vue/__tests__/e2e).
    These tests use Puppeteer to execute commands in a headless Chrome browser, thus
    simulating real browser and user behavior.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端测试评估框架作为一个整体系统的工作情况。通常，这些测试模拟了几乎真实的用户交互。对于一个前端框架来说，创建这些测试通常意味着配置一个端到端测试框架。对于服务器端框架，端到端测试通常模拟对由框架驱动的服务器的真实请求。类似于其集成测试集，Gatsby也维护了一套`transition`、`grid`和`tree-view`接口。这些可以在[github.com/vuejs/core/tree/main/packages/vue/__tests__/e2e](http://github.com/vuejs/core/tree/main/packages/vue/__tests__/e2e)找到。这些测试使用Puppeteer在无头Chrome浏览器中执行命令，从而模拟真实的浏览器和用户行为。
- en: 'An extensive E2E test suite can support the development of your framework in
    several ways:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一个广泛的端到端测试套件可以通过几种方式支持你的框架开发：
- en: Catch regressions of the whole system, such as simulating common framework commands
    and expected functionality.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获整个系统的回归，例如模拟常见的框架命令和预期功能。
- en: Confirm that all components of your framework can work together as you make
    changes and develop new features.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认在您进行更改和开发新功能时，框架的所有组件都能协同工作。
- en: Integrate performance trials into E2E tests to be able to detect the slow performance
    of your framework.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将性能测试集成到端到端测试中，以便能够检测框架的缓慢性能。
- en: Ensure that the framework works correctly with external systems. These systems
    can include different types of web browsers or different backend environments.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保框架能够正确地与外部系统协同工作。这些系统可以包括不同类型的网络浏览器或不同的后端环境。
- en: Another important form of testing for frameworks that is relevant in many projects
    today is benchmarking.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种对许多当前项目都相关的框架测试形式是基准测试。
- en: Benchmarks
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基准测试
- en: The process of benchmarking runs a set of assessments and trials on a particular
    scenario of your framework. These benchmark tests can be written by framework
    authors or an external party. For the purposes of framework building, we are focusing
    on the former, where a framework includes a series of benchmarks as part of its
    internal testing. Frameworks can potentially compete on their benchmarking scores
    for tasks such as rendering a particular component configuration, or, in the case
    of backend frameworks, the time it takes to process a large number of requests.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 基准测试的过程是在你框架的特定场景上运行一系列评估和试验。这些基准测试可以由框架作者或第三方编写。为了构建框架的目的，我们专注于前者，即框架将其一系列基准测试作为其内部测试的一部分。框架可以在诸如渲染特定组件配置等任务上通过基准测试分数进行竞争。对于后端框架，内存利用率、请求吞吐量和延迟等因素通常会被基准测试。为了获得灵感，Nest.js
    在 [github.com/nestjs/nest/tree/master/benchmarks](http://github.com/nestjs/nest/tree/master/benchmarks)
    维护了一套基准测试工具，以比较框架提供的 HTTP 服务器的性能。在其他类型的框架中，如应用开发（Electron）和测试框架，基准测试也集中在性能上。正如我们在本章前面的
    *框架测试* 部分所看到的，测试框架本身需要尽可能高效地执行测试套件。
- en: For JavaScript frameworks, it is essential to benchmark the performance of the
    code in the runtime. In the browser runtime, the benchmarks are focused on efficient
    rendering and processing large inputs. In the full stack Next.js framework, the
    authors include several benchmarking scripts to test various features (found at
    [github.com/vercel/next.js/blob/canary/bench](http://github.com/vercel/next.js/blob/canary/bench)).
    When you are developing benchmarks of your own, keep in mind that you probably
    do not need any complex tooling. Instead, you can rely on built-in methods of
    the runtime – in this case, in Node.js.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 JavaScript 框架来说，在运行时对代码的性能进行基准测试是至关重要的。在浏览器运行时，基准测试主要关注高效的渲染和大量输入的处理。在完整的全栈
    Next.js 框架中，作者包含了一些基准测试脚本以测试各种功能（位于 [github.com/vercel/next.js/blob/canary/bench](http://github.com/vercel/next.js/blob/canary/bench)）。当你开发自己的基准测试时，请记住你可能不需要任何复杂的工具。相反，你可以依赖运行时的内置方法——在这种情况下，是
    Node.js。
- en: '*Figure 4**.5* shows one of the simpler benchmarking scripts [github.com/vercel/next.js/blob/canary/bench/recursive-copy/run.js](http://github.com/vercel/next.js/blob/canary/bench/recursive-copy/run.js)):'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4**.5* 展示了一个简单的基准测试脚本 [github.com/vercel/next.js/blob/canary/bench/recursive-copy/run.js](http://github.com/vercel/next.js/blob/canary/bench/recursive-copy/run.js))：'
- en: '![Figure 4.5: Benchmarking in the Next.js repository](img/Figure_4.5_B19014.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5：Next.js 仓库中的基准测试](img/Figure_4.5_B19014.jpg)'
- en: 'Figure 4.5: Benchmarking in the Next.js repository'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5：Next.js 仓库中的基准测试
- en: In *Figure 4**.5*, the main function provides a recursive copy implementation
    to the test. Executing the `run` function with two different implementations provides
    us with comparison results of these two functions.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 4**.5* 中，主函数提供了一个递归复制实现给测试。使用两种不同的实现执行 `run` 函数，为我们提供了这两个函数的比较结果。
- en: For backend frameworks, factors such as memory utilization, request throughput,
    and latency are often benchmarked. For inspiration, Nest.js maintains a set of
    benchmarking tools to compare the performance of the HTTP servers provided by
    the framework at [github.com/nestjs/nest/tree/master/benchmarks](http://github.com/nestjs/nest/tree/master/benchmarks).
    In other types of frameworks, such as application development (Electron) and testing
    frameworks, the benchmarks are also focused on performance. As we saw in the *Framework
    testing* section earlier in this chapter, the testing framework itself needs to
    execute the test suites as efficiently as possible.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 对于后端框架，内存利用率、请求吞吐量和延迟等因素通常会被基准测试。为了获得灵感，Nest.js 在 [github.com/nestjs/nest/tree/master/benchmarks](http://github.com/nestjs/nest/tree/master/benchmarks)
    维护了一套基准测试工具，以比较框架提供的 HTTP 服务器的性能。在其他类型的框架中，如应用开发（Electron）和测试框架，基准测试也集中在性能上。正如我们在本章前面的
    *框架测试* 部分所看到的，测试框架本身需要尽可能高效地执行测试套件。
- en: 'You, as a framework developer, should focus on setting up benchmarks for two
    use cases:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 作为框架开发者，你应该专注于为两种用例设置基准测试：
- en: First, the benchmark for the public interfaces your framework exposes. These
    would allow you to gauge how long it takes for your framework to complete the
    tasks.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，基准测试针对你框架公开的公共接口。这些将允许你衡量你的框架完成任务所需的时间。
- en: Second, you want to look into the micro-benchmarks of the framework internals.
    These internal benchmarks help optimize particular parts of the framework’s core,
    enabling speed improvements in the internal functions.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，你希望深入了解框架内部的微基准测试。这些内部基准测试有助于优化框架核心的特定部分，从而提高内部函数的速度。
- en: As you further develop your project, keep an eye on measurements of your benchmarks,
    ensuring that you do not regress the speed of your framework.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你进一步开发你的项目，关注你的基准测试的测量结果，确保你不会降低框架的速度。
- en: Development tooling
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发工具
- en: The framework development and the release process can greatly benefit from the
    inclusion of additional tools that elevate the quality and usability of the framework
    project. These workflows could be applied to various aspects of the framework,
    such as dependency management, testing, editor configuration, formatting, and
    more. We already saw a similar approach of relying on additional scripts and tooling
    in the *Binaries and scripts* section of [*Chapter 3*](B19014_03.xhtml#_idTextAnchor051).
    Additional tooling that can improve our framework’s development life cycle includes
    the introduction of continuous integration steps, improving the source control,
    and the addition of package-level utilities.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 框架开发和发布流程可以从包含提高框架项目质量和可用性的额外工具中受益。这些工作流程可以应用于框架的各个方面，例如依赖管理、测试、编辑器配置、格式化等。我们已经在
    [*第 3 章*](B19014_03.xhtml#_idTextAnchor051) 的 *二进制和脚本* 部分看到了类似的方法，依赖于额外的脚本和工具。可以改善我们框架开发周期的额外工具包括引入持续集成步骤、改进源控制和添加包级实用工具。
- en: Continuous integration
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续集成
- en: As part of the development cycle, just like many web application projects, frameworks
    configure **continuous integration** (**CI**) steps to test the code changes and
    new releases. These CI systems run tests of all types, such as the ones mentioned
    in the *Framework testing* section of this chapter. Every change committed using
    a version control system has to pass the existing test suite. This ensures that
    the changes do not introduce breaking changes or bugs. Besides running the tests,
    CI runs other types of analysis, such as formatting checks, linting, and more.
    These ensure consistency, usability, and quality.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发周期的一部分，就像许多 Web 应用程序项目一样，框架配置 **持续集成** (**CI**) 步骤来测试代码更改和新版本。这些 CI 系统运行所有类型的测试，如本章
    *框架测试* 部分中提到的测试。使用版本控制系统提交的每个更改都必须通过现有的测试套件。这确保了更改不会引入破坏性更改或错误。除了运行测试之外，CI 还运行其他类型的分析，如格式检查、linting
    等。这些确保了一致性、可用性和质量。
- en: If we focus on framework development, there are a few special uses for CI. It
    ensures that the framework works properly in different JavaScript environments.
    For a frontend framework, this means executing tests in a variety of browsers
    on different platforms. Browser support testing goes both ways – new features
    must work in older browser versions, and new browsers should not break any of
    the existing framework features. Node.js and Deno frameworks that run on the backend
    keep track of newer runtime versions, following the [github.com/nodejs/release](http://github.com/nodejs/release)
    release schedule. Running these compatibility checks in CI is the best solution;
    the CI platforms allow to quickly spin up different versions of environments and
    parallelize the test execution in those environments.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们专注于框架开发，CI 有一些特殊用途。它确保框架在不同的 JavaScript 环境中正常工作。对于一个前端框架来说，这意味着在不同的平台上执行各种浏览器的测试。浏览器支持测试是双向的——新功能必须在旧浏览器版本中工作，而新浏览器不应该破坏现有框架的任何功能。运行在后端的
    Node.js 和 Deno 框架跟踪新的运行时版本，遵循 [github.com/nodejs/release](http://github.com/nodejs/release)
    发布计划。在 CI 中运行这些兼容性检查是最佳解决方案；CI 平台允许快速启动不同版本的环境，并在此环境中并行化测试执行。
- en: Besides the focus on testing in various environments, the CI step can run a
    series of tests of projects that depend on your framework. For example, it can
    generate and run a sample application or an external script with the new framework
    changes applied. This way, it can check whether the changes are compatible.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在各种环境中关注测试之外，CI 步骤还可以运行一系列依赖于你的框架的项目测试。例如，它可以生成并运行一个示例应用程序或外部脚本，应用新的框架更改。这样，它可以检查更改是否兼容。
- en: 'Depending on the framework CI configuration, the integration story may be different.
    In *Figure 4**.6*, we see four successful checks; this is part of the Vue.js CI
    pipeline:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 根据框架 CI 配置的不同，集成故事可能会有所不同。在 *图 4*.6 中，我们看到四个成功的检查；这是 Vue.js CI 管道的一部分：
- en: '![Figure 4.6: Vue.js reporting its CI status](img/Figure_4.6_B19014.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6：Vue.js 报告其 CI 状态](img/Figure_4.6_B19014.jpg)'
- en: 'Figure 4.6: Vue.js reporting its CI status'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6：Vue.js 报告其 CI 状态
- en: In the case of Angular, there are over 20 checks in the CI pipeline before a
    code change can be merged into the repository. The reason for a growing number
    of integration steps is the execution tasks that are not tests. These could be
    formatting, spelling, and JavaScript code usability checks.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular的情况下，在代码更改可以合并到存储库之前，CI管道中存在超过20个检查。越来越多的集成步骤的原因是执行任务而不是测试。这些可能包括格式化、拼写和JavaScript代码可用性检查。
- en: The CI steps can vary in complexity and type, and they can also contribute to
    the release process of your framework. No matter what type of framework you are
    working on, internal or public, it is highly advised to configure a CI step as
    part of your framework development. This approach will ensure the quality of the
    code and help you maintain efficiency in your framework development.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: CI步骤的复杂性和类型可能有所不同，它们还可以为您的框架发布过程做出贡献。无论您正在开发哪种类型的框架，内部或公共的，都强烈建议将CI步骤配置为框架开发的一部分。这种方法将确保代码质量并帮助您在框架开发中保持效率。
- en: Source control
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 源代码控制
- en: Using source control for frameworks is similar to using it for other application
    projects. Nevertheless, JavaScript frameworks rely on source control tooling for
    tagging framework releases and keeping track of feature development branches.
    The use of source control in this context is a bit more in-depth. For instance,
    a framework author might need to write patches for an older version of the framework,
    which means jumping back to an older Git tag to introduce that change. In many
    cases, large framework refactoring also takes place in a temporary Git branch.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对于框架，使用源代码控制类似于使用它进行其他应用程序项目。尽管如此，JavaScript框架依赖于源代码控制工具来标记框架发布和跟踪功能开发分支。在此背景下使用源代码控制要深入一些。例如，框架作者可能需要为框架的旧版本编写补丁，这意味着需要回退到旧的Git标签以引入该更改。在许多情况下，大型框架重构也发生在临时的Git分支中。
- en: 'Most JavaScript frameworks also configure supplementary source control scripts
    that improve the workflow as new features and changes get developed. In *Figure
    4**.7*, we see the Nest framework using the Git pre-commit hook to execute JavaScript
    linting scripts:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数JavaScript框架也会配置补充的源代码控制脚本，以改善新功能和更改开发时的工作流程。在*图4**.7*中，我们看到Nest框架使用Git pre-commit钩子来执行JavaScript代码检查脚本：
- en: '![Figure 4.7: The pre-commit hook configuration](img/Figure_4.7_B19014.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图4.7：pre-commit钩子配置](img/Figure_4.7_B19014.jpg)'
- en: 'Figure 4.7: The pre-commit hook configuration'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7：pre-commit钩子配置
- en: The pre-commit hook, in this case (*Figure 4**.7*), enforces the code quality
    standards before the changes are committed. The step to configure this kind of
    behavior is simplified using a JavaScript module called **Husky** ([typicode.github.io/husky](http://typicode.github.io/husky)).
    You will find this pattern in a lot of the frameworks, as this is a handy addition
    to make the development process much more friendly.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在此情况下（*图4**.7*），pre-commit钩子强制在提交更改之前执行代码质量标准。使用名为**Husky**（[typicode.github.io/husky](http://typicode.github.io/husky)）的JavaScript模块配置此类行为的步骤被简化了。您将在许多框架中找到这种模式，因为这是使开发过程更加友好的便捷补充。
- en: At this point, it is a given that you will use source control for your new framework.
    However, you can invest in additional tooling by learning from some of the existing
    frameworks that we’ve seen in this book to improve your coding workflow.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一点，您将使用源代码控制来管理您的新框架是肯定的。然而，您可以通过学习本书中看到的一些现有框架来投资额外的工具，以改善您的编码工作流程。
- en: Package configuration
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包配置
- en: The `package.json` file and the additional files in the root of the framework
    directory define the package configurations of the project. The number of such
    configurations may vary depending on the types of tools you use in your framework.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json`文件和框架目录根目录中的附加文件定义了项目的包配置。此类配置的数量可能因您在框架中使用的工具类型而异。'
- en: 'The package configuration of Nest.js consists of many tools, such as ESLint,
    Git, npm, and Gulp, to name a few. Similar to the Nest.js configuration seen in
    *Figure 4**.8*, the `package.json` file will be the development entry point of
    your framework:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js的包配置由许多工具组成，例如ESLint、Git、npm和Gulp等。类似于*图4**.8*中看到的Nest.js配置，`package.json`文件将是您框架的开发入口点：
- en: '![Figure 4.8: Package configurations of Nest.js](img/Figure_4.8_B19014.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图4.8：Nest.js的包配置](img/Figure_4.8_B19014.jpg)'
- en: 'Figure 4.8: Package configurations of Nest.js'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8：Nest.js的包配置
- en: 'The `package.json` file consists of the information about your framework, its
    dependencies, and auxiliary configuration used by other tools. For example, the
    Nest.js package file ([github.com/nestjs/nest/blob/master/package.json](http://github.com/nestjs/nest/blob/master/package.json))
    stores configuration for the `nyc` code coverage tooling, the `mocha` test runner
    configuration, and commands for the changelog tooling. Besides those configuration
    entries, the package file has the `scripts` object. This object consists of commands
    that can be used during framework development. In the Nest.js case, these commands
    run some of the following operations:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 文件包含有关框架、其依赖项以及由其他工具使用的辅助配置的信息。例如，Nest.js 的包文件 ([github.com/nestjs/nest/blob/master/package.json](http://github.com/nestjs/nest/blob/master/package.json))
    存储了 `nyc` 代码覆盖率工具的配置、`mocha` 测试运行器的配置以及变更日志工具的命令。除了这些配置条目之外，包文件还有一个 `scripts`
    对象。此对象包含在框架开发期间可以使用的命令。在 Nest.js 的情况下，这些命令执行以下一些操作：'
- en: '**Build** – the command that compiles or builds the framework. Nest.js executes
    the TypeScript compiler as part of this command.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建** – 编译或构建框架的命令。Nest.js 将 TypeScript 编译器作为此命令的一部分执行。'
- en: '**Clean** – a quick command that cleans the working directory of the framework
    project. Usually, this means getting rid of any generated or built files.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清理** – 一个快速命令，用于清理框架项目的工作目录。通常，这意味着删除任何生成的或构建的文件。'
- en: '**Test** – commands that run all types of tests that are included in the framework.
    In the cases of Nest.js and many other frameworks, these types of commands are
    usually split by the type of tests they are running.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试** – 运行框架中包含的所有类型测试的命令。在 Nest.js 和许多其他框架的情况下，这些类型的命令通常根据它们运行的测试类型进行拆分。'
- en: '**Lint** – analyzes the JavaScript code in the project, looking for coding
    style errors, pitfalls, and potential issues. Nest.js uses ESLint, running in
    parallel to quickly diagnose the framework files.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码风格检查** – 分析项目中的 JavaScript 代码，寻找编码风格错误、陷阱和潜在问题。Nest.js 使用 ESLint，并行运行以快速诊断框架文件。'
- en: '`npm`.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm`.'
- en: '**Install** – installs the dependencies of the project. In the case of Nest.js,
    the dependency modules provide the functionality that is required to run a backend
    service. The developer dependency list has all the infrastructure modules to work
    on the framework project.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装** – 安装项目的依赖项。在 Nest.js 的情况下，依赖模块提供了运行后端服务所需的功能。开发者依赖列表包含所有用于框架项目的基础设施模块。'
- en: '**Coverage** – runs testing code coverage tooling to determine whether more
    tests are required to fully cover all the framework logic. For instance, Nest.js
    uses **Istanbul** ([istanbul.js.org](http://istanbul.js.org)) for the code coverage
    report.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**覆盖率** – 运行测试代码覆盖率工具以确定是否需要更多测试来完全覆盖所有框架逻辑。例如，Nest.js 使用 **Istanbul** ([istanbul.js.org](http://istanbul.js.org))
    生成代码覆盖率报告。'
- en: This is not an extensive list, but it provides some inspiration for command
    types you can include in your project. The `scripts` part of the `package.json`
    file usually follows the reference material at [docs.npmjs.com/cli/using-npm/scripts](http://docs.npmjs.com/cli/using-npm/scripts),
    but different JavaScript package managers may treat these commands a bit differently.
    Your framework should utilize `package.json` to your advantage, creating quickly
    accessible scripts and configuring the `package.json` file as the entry point
    for your framework’s development workflow.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个详尽的列表，但它为你的项目中可以包含的命令类型提供了一些灵感。`package.json` 文件的 `scripts` 部分通常遵循 [docs.npmjs.com/cli/using-npm/scripts](http://docs.npmjs.com/cli/using-npm/scripts)
    上的参考材料，但不同的 JavaScript 包管理器可能对这些命令的处理略有不同。你的框架应该利用 `package.json` 的优势，创建快速可访问的脚本，并将
    `package.json` 文件配置为框架开发工作流程的入口点。
- en: As we have seen in this section, there are a lot of development tools that empower
    framework development and are crucial to make the project successful. These development
    patterns have been improving over many years and are now deeply embedded in many
    JavaScript projects. In the next section, we shall take a look at the overall
    picture of a framework structure, which will give us a solid outline for our own
    framework project.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本节中看到的，有许多开发工具可以增强框架开发，并且对于使项目成功至关重要。这些开发模式已经经过多年的改进，并且现在已深深嵌入到许多 JavaScript
    项目中。在下一节中，我们将探讨框架结构的整体图景，这将为我们自己的框架项目提供一个坚实的轮廓。
- en: Learnings from other architectures
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从其他架构中学习
- en: In the current and previous chapters, we’ve seen all the different technical
    structures, tools, and patterns that frameworks use for their benefit. If we browse
    through the sources of frameworks gathered in the *Framework showcase* section
    of [*Chapter 1*](B19014_01.xhtml#_idTextAnchor015), we can start to clearly see
    repeating patterns. Following these practices, we can take advantage of them in
    our own framework development. By gathering knowledge from the existing designs
    from different types of JavaScript frameworks, we can conceive a structural system
    that can serve us well in building our project. We can fuse all those methods
    and practices into a general framework structure.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前和前几章中，我们看到了框架使用的技术结构、工具和模式。如果我们浏览在[*第一章*](B19014_01.xhtml#_idTextAnchor015)的“框架展示”部分收集的框架源代码，我们可以开始清楚地看到重复的模式。遵循这些实践，我们可以在自己的框架开发中利用它们。通过从不同类型的JavaScript框架的现有设计中汲取知识，我们可以构想出一个结构系统，它在我们构建项目时能为我们提供良好的服务。我们可以将这些方法和实践融合到一个通用的框架结构中。
- en: 'The following code shows the generic JavaScript framework structure:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了通用的JavaScript框架结构：
- en: '[PRE5]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This project structure should help demystify the approach to our framework project
    structure and empower you, as a developer, to design your own. The framework file
    and directory structure is the culmination of the last two chapters, combining
    many of the components that we have seen so far – framework packages, the compiler
    infrastructure, framework testing, documentation, scripts, and more. Future chapters
    will be using this structure for our own framework building.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目结构应有助于阐明我们的框架项目结构的处理方法，并赋予您作为开发者设计自己项目结构的能力。框架文件和目录结构是前两章的总结，结合了我们迄今为止看到的大部分组件——框架包、编译器基础设施、框架测试、文档、脚本等。未来的章节将使用这个结构来构建我们的框架。
- en: As we look at the core architectures and the examples of what the framework
    projects consist of, it helps us form what our framework will include and look
    like. Not everything that we see in the current architecture example will be necessary
    for our framework to function or succeed. In fact, if you will be building a framework
    for internal project use only, then you will be choosing a different combination
    of tools that help you with development.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看核心架构和框架项目的示例时，有助于我们形成我们的框架将包含的内容和外观。在当前架构示例中我们看到的一切并不一定都是我们的框架功能或成功所必需的。实际上，如果您只为内部项目构建框架，那么您将选择不同的工具组合来帮助您进行开发。
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covered the importance of framework documentation, the variety
    of tests that improve stability, and the array of internal tools that establish
    efficient framework workflows. The investment in good documentation helps both
    framework authors and framework users. The lack of well-defined documents can
    be devastating to the framework’s success. Luckily, there are a ton of tools that
    help simplify the approach to documentation. In the same sense, there are existing
    tools for testing workflows, covering all aspects of code testing within the framework.
    Finally, the additional tooling, such as improved source control and editor configurations,
    makes it much more pleasant to work on the framework and helps authors focus on
    the framework internals. All of these development support factors play an essential
    role in framework development and architecture. Learning from other projects and
    utilizing the patterns that support the development process helps us expand our
    architectural skills and be more efficient.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了框架文档的重要性、提高稳定性的各种测试以及建立高效框架工作流程的内部工具。对良好文档的投资有助于框架作者和框架用户。缺乏明确定义的文档可能会对框架的成功造成毁灭性的影响。幸运的是，有许多工具可以帮助简化文档的方法。同样，存在用于测试工作流程的工具，涵盖了框架内代码测试的所有方面。最后，额外的工具，如改进的源代码控制和编辑器配置，使得在框架上工作变得更加愉快，并帮助作者专注于框架内部。所有这些开发支持因素在框架开发和架构中发挥着至关重要的作用。从其他项目学习并利用支持开发过程的模式可以帮助我们扩展我们的架构技能并提高效率。
- en: At this point, we have learned a lot about existing framework technologies that
    enable web application and backend service development targeting the JavaScript
    runtime. In the next chapters, using these learnings and detailed exposure to
    existing framework projects, we will dive into the aspects of our framework building.
    This means starting a brand-new project from scratch. Utilizing the patterns,
    abstractions, and lessons learned from existing projects, we get to experience
    what it takes to build our own framework.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了大量现有的框架技术，这些技术能够支持针对JavaScript运行时的Web应用程序和后端服务开发。在接下来的章节中，利用这些知识和对现有框架项目的详细了解，我们将深入探讨我们框架构建的各个方面。这意味着从头开始启动一个全新的项目。利用从现有项目中学到的模式、抽象和经验教训，我们能够体验到构建我们自己的框架需要哪些要素。
- en: The next chapter will focus on some of the considerations a framework author
    needs to take into account before starting off with a new project.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将重点介绍框架作者在开始新项目之前需要考虑的一些因素。
- en: 'Part 2: Framework Development'
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：框架开发
- en: In this part, the book builds on top of the real-world framework examples and
    switches gears to focus on the programming aspects of framework creation from
    scratch. The goal is to cover the complete process of planning, architecting,
    and publishing a new full stack framework. These stages include several important
    considerations and a lesson in the architecture of various types of components.
    The emphasis is on the practical approach and guidance of each process’s steps
    that benefit developers of all types.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分，本书基于现实世界的框架示例，并转换方向，专注于从头开始创建框架的编程方面。目标是涵盖规划、架构和发布全新全栈框架的完整过程。这些阶段包括几个重要的考虑因素和关于各种类型组件架构的教训。重点是每个过程步骤的实用方法和指导，这对所有类型的开发者都有益。
- en: 'In this part, we cover the following chapters:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分，我们涵盖了以下章节：
- en: '[*Chapter 5*](B19014_05.xhtml#_idTextAnchor073), *Framework Considerations*'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B19014_05.xhtml#_idTextAnchor073)，*框架考虑因素*'
- en: '[*Chapter 6*](B19014_06.xhtml#_idTextAnchor089), *Building a Framework by Example*'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B19014_06.xhtml#_idTextAnchor089)，*通过示例构建框架*'
- en: '[*Chapter 7*](B19014_07.xhtml#_idTextAnchor108)*, Creating a Full Stack Framework*'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B19014_07.xhtml#_idTextAnchor108)，*创建全栈框架*'
- en: '[*Chapter 8*](B19014_08.xhtml#_idTextAnchor138)*, Architecting Frontend Frameworks*'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B19014_08.xhtml#_idTextAnchor138)，*架构前端框架*'
