- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Database Manipulation in Microservices with Node.js
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Node.js 在微服务中进行数据库操作
- en: When working with microservices architecture and Node.js, databases play a crucial
    role in storing and retrieving data for each service.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当与微服务架构和 Node.js 一起工作时，数据库在为每个服务存储和检索数据方面发挥着关键作用。
- en: We’ll start this chapter by understanding how to work with databases in microservices
    with Node.js. This involves many concepts and tools, such as database types, database
    connection, service-specific databases, data models and schemas, API endpoints,
    error handling, transactions and atomicity, caching, security, testing, monitoring,
    and logging. Manipulating data in microservices also involves performing **Create,
    Read, Update, and Delete** (**CRUD**) operations on databases or data storage
    systems. Remember to follow best practices for data security, such as input validation,
    data encryption, and protecting sensitive data, based on the requirements of your
    microservices and compliance standards.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始，了解如何使用 Node.js 在微服务中与数据库协同工作。这涉及到许多概念和工具，例如数据库类型、数据库连接、特定服务的数据库、数据模型和架构、API
    端点、错误处理、事务和原子性、缓存、安全、测试、监控和日志。在微服务中操作数据还涉及到在数据库或数据存储系统中执行 **创建、读取、更新和删除**（**CRUD**）操作。请记住，根据您的微服务需求和合规性标准，遵循数据安全最佳实践，例如输入验证、数据加密和保护敏感数据。
- en: By the end of this chapter, you will have learned how to manipulate databases
    in microservices and choose the right database for each specific service.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将学会如何在微服务中操作数据库，并为每个特定服务选择合适的数据库。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Choosing the right database and database connections
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择合适的数据库和数据库连接
- en: Data models and schemas and CRUD operations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据模型、架构和 CRUD 操作
- en: Transactions and data validation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务和数据验证
- en: Error handling and optimizations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误处理和优化
- en: Testing
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: Choosing the right database and database connections
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择合适的数据库和数据库连接
- en: In this section, we’re going to show you how to select a database or data storage
    system that aligns with your microservice requirements and establish connections
    to your chosen database from your Node.js microservice.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您展示如何选择与您的微服务需求相匹配的数据库或数据存储系统，并从您的 Node.js 微服务中建立与所选数据库的连接。
- en: Choosing the right database
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择合适的数据库
- en: '**Choosing the right database** for your application is an important decision
    that can affect the performance, scalability, and maintainability of your system.
    There are many factors to consider when selecting a database, such as the type,
    size, and structure of your data, the expected workload and concurrency of your
    application, the availability and consistency requirements of your system, the
    budget and resources of your project, and the programming languages and frameworks
    that you use.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**为您的应用程序选择合适的数据库**是一个重要的决定，它可能影响您系统的性能、可扩展性和可维护性。在选择数据库时，需要考虑许多因素，例如数据的类型、大小和结构，应用程序预期的负载和并发性，系统的可用性和一致性要求，项目的预算和资源，以及您使用的编程语言和框架。'
- en: 'Here are the key steps for choosing the right database:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 选择合适的数据库的关键步骤如下：
- en: '**Data model complexity**: Choose relational databases such as **MySQL** or
    **PostgreSQL** for complex relationships and structured data. Choose NoSQL databases
    such as **MongoDB** or **Cassandra** for flexible, semi-structured, or unstructured
    data. NoSQL databases are suitable for **handling large volumes of data with**
    **varying structures.**'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据模型复杂性**：对于复杂关系和结构化数据，选择关系型数据库，如 **MySQL** 或 **PostgreSQL**。对于灵活的、半结构化或非结构化数据，选择
    NoSQL 数据库，如 **MongoDB** 或 **Cassandra**。NoSQL 数据库适合**处理具有** **不同结构** **的大量数据**。'
- en: '**Scalability requirements**: If you need to scale your microservices horizontally
    (across multiple servers or containers), consider NoSQL databases such as MongoDB,
    Cassandra, or **Amazon DynamoDB**, which are designed for seamless horizontal
    scaling. For applications where vertical scaling (adding more resources to a single
    server) is sufficient, SQL databases can handle considerable loads.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可扩展性要求**：如果您需要水平扩展（跨多个服务器或容器）您的微服务，请考虑如 MongoDB、Cassandra 或 **Amazon DynamoDB**
    这样的 NoSQL 数据库，它们旨在实现无缝的水平扩展。对于只需要垂直扩展（向单个服务器添加更多资源）的应用程序，SQL 数据库可以处理相当大的负载。'
- en: '**Consistency requirements**: Consider whether your application requires strong
    data consistency. ACID transactions are a way of ensuring the reliability and
    consistency of database operations. They have four key properties: Atomicity,
    Consistency, Isolation, and Durability. Alternatively, you can opt for SQL databases.
    NoSQL databases often provide eventual consistency, which is suitable for applications
    where slight data inconsistencies are acceptable and low latency is essential.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**一致性要求**：考虑您的应用程序是否需要强数据一致性。ACID事务是确保数据库操作可靠性和一致性的方法。它们有四个关键属性：原子性、一致性、隔离性和持久性。或者，您可以选择SQL数据库。NoSQL数据库通常提供最终一致性，这对于可以接受轻微数据不一致且需要低延迟的应用程序是合适的。'
- en: '**Query complexity**: While SQL databases are designed for complex queries
    involving multiple tables and joins, NoSQL databases such as MongoDB are excellent
    for simple queries and fast data aggregation.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**查询复杂性**：虽然SQL数据库旨在处理涉及多个表和连接的复杂查询，但如MongoDB这样的NoSQL数据库在简单查询和快速数据聚合方面表现出色。'
- en: '**Community and support**: Consider the community support and documentation
    available for the chosen database. A robust community ensures timely help and
    a wealth of resources for problem-solving.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**社区和支持**：考虑所选数据库可用的社区支持和文档。一个强大的社区可以确保及时的帮助和丰富的资源以解决问题。'
- en: '**Operational overhead**: Evaluate the operational overhead required to manage
    the database. Some databases, especially managed services in the cloud, such as
    **AWS RDS** and **Azure Cosmos DB**, handle many operational tasks, easing the
    burden on your team.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运营开销**：评估管理数据库所需的运营开销。一些数据库，尤其是云中的托管服务，如**AWS RDS**和**Azure Cosmos DB**，处理许多运营任务，从而减轻了您团队的压力。'
- en: '**Compliance and security**: Ensure the database complies with necessary regulations
    and security standards applicable to your industry. Consider features such as
    data encryption, access control, and audit trails. Evaluate the security features
    of the database (encryption, authorization, and authentication) and make sure
    the database meets the security requirements of your application.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**合规性和安全性**：确保数据库符合适用于您行业的必要法规和安全标准。考虑数据加密、访问控制和审计跟踪等功能。评估数据库的安全功能（加密、授权和身份验证），并确保数据库满足您应用程序的安全要求。'
- en: '**Database recovery methods**: Make sure the database supports data recovery
    in case of any data loss. Understand the disaster recovery process of the database
    and how it can be handled well with the application.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据库恢复方法**：确保数据库在数据丢失的情况下支持数据恢复。了解数据库的灾难恢复过程以及如何与应用程序良好地处理。'
- en: Choosing the right database and managing database connections are critical decisions
    in microservices architecture.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，选择正确的数据库和管理数据库连接是关键决策。
- en: '*Figure 9**.1* illustrates the process of choosing the right database:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9*.*1*说明了选择正确数据库的过程：'
- en: '![Figure 9.1: The process of choosing the right database (image by fullvector
    on Freepik)](img/B14980_09_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1：选择正确数据库的过程（图片由Freepik上的fullvector提供）](img/B14980_09_01.jpg)'
- en: 'Figure 9.1: The process of choosing the right database (image by fullvector
    on Freepik)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1：选择正确数据库的过程（图片由Freepik上的fullvector提供）
- en: With these concepts covered, we can continue with database connections.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些概念被覆盖之后，我们可以继续讨论数据库连接。
- en: Database connections in microservices
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务中的数据库连接
- en: '**Database connections** in microservices is a topic that involves many design
    decisions and trade-offs. One of the main challenges is how to organize and manage
    the data that each microservice needs to operate.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**微服务中的数据库连接**是一个涉及许多设计决策和权衡的话题。其中一个主要挑战是如何组织和管理工作每个微服务需要操作的数据。'
- en: 'Here are the key concepts for database connections in microservices:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是微服务中数据库连接的关键概念：
- en: '**Connection pooling**: Use connection pooling techniques to manage database
    connections efficiently. Connection pools reuse existing connections, reducing
    the overhead of establishing new connections for each request.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接池**：使用连接池技术来有效地管理数据库连接。连接池重用现有连接，减少了为每个请求建立新连接的开销。'
- en: '**Connection details**: Connection details include connection limits and contract-based
    communications. These are important aspects of microservices architecture that
    help ensure efficient and reliable communication between the different services
    within the system. **Connection limits** refer to the maximum number of connections
    that a service can handle at any given time. In a microservices architecture,
    each service typically has connection limits to manage the incoming and outgoing
    communication with other services, databases, or external systems. Setting and
    managing these connection limits is crucial to prevent overloading the service
    and causing performance issues.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接详情**：连接详情包括连接限制和基于合约的通信。这些是微服务架构的重要方面，有助于确保系统内不同服务之间的高效和可靠通信。**连接限制**指的是服务在任何给定时间可以处理的连接的最大数量。在微服务架构中，每个服务通常都有连接限制来管理与其他服务、数据库或外部系统的传入和传出通信。设置和管理这些连接限制对于防止服务过载和引起性能问题至关重要。'
- en: '**Contract-based communication**, on the other hand, refers to the practice
    of defining and adhering to a clear set of communication protocols and data formats
    between services. This involves establishing clear contracts or interfaces that
    specify how services should communicate with each other, including the types of
    messages, data structures, and protocols to be used. By adhering to these contracts,
    services can ensure that their communication is reliable and predictable, regardless
    of the technology or implementation details used within each service.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，**基于合约的通信**指的是在服务之间定义和遵守一组明确的通信协议和数据格式的实践。这包括建立明确的合约或接口，以指定服务之间应该如何相互通信，包括要使用的消息类型、数据结构和协议。通过遵守这些合约，服务可以确保其通信的可靠性和可预测性，无论每个服务内部使用的具体技术或实现细节如何。
- en: In the context of microservices, proper management of connection limits and
    adherence to contract-based communication principles can help maintain the stability
    and scalability of the system. It allows for services to communicate efficiently
    and reliably, while also enabling changes and updates to be made to individual
    services without disrupting the overall system. Ultimately, this approach contributes
    to the overall robustness and maintainability of a microservices architecture.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在微服务的背景下，适当管理连接限制并遵守基于合约的通信原则可以帮助维护系统的稳定性和可扩展性。这允许服务高效且可靠地进行通信，同时还能在不影响整体系统的情况下对单个服务进行更改和更新。最终，这种方法有助于提高微服务架构的整体健壮性和可维护性。
- en: '**Retry strategies**: Implement retry strategies to handle transient database
    connection failures. Retrying failed database operations can improve the overall
    robustness of your microservices.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重试策略**：实现重试策略以处理暂时的数据库连接失败。重试失败的数据库操作可以提高微服务的整体健壮性。'
- en: '**Timeouts**: Set connection timeouts to prevent requests from waiting indefinitely
    for a response. Timeouts ensure that if a database operation takes too long, the
    system can recover and handle the situation gracefully.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超时**：设置连接超时以防止请求无限期地等待响应。超时确保如果数据库操作耗时过长，系统可以恢复并优雅地处理这种情况。'
- en: '**Connection string management**: Manage connection strings securely. Avoid
    hardcoding sensitive information such as passwords. Utilize environment variables
    or secure vaults for sensitive configuration data.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接字符串管理**：安全地管理连接字符串。避免将敏感信息如密码硬编码。利用环境变量或安全保险库来存储敏感配置数据。'
- en: '**Graceful handling of failures**: Implement graceful handling of database
    failures. When a database connection fails, microservices should respond gracefully,
    providing meaningful error messages to clients and attempting reconnection using
    back-off strategies.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优雅地处理失败**：实现数据库失败的优雅处理。当数据库连接失败时，微服务应该优雅地响应，向客户端提供有意义的错误消息，并尝试使用退避策略重新连接。'
- en: '**Database connection monitoring**: Implement monitoring for database connections.
    Track connection usage, errors, and latencies. Monitoring helps identify bottlenecks
    and performance issues in your microservices architecture.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库连接监控**：实现数据库连接的监控。跟踪连接使用情况、错误和延迟。监控有助于识别微服务架构中的瓶颈和性能问题。'
- en: Remember, it is important to write securely the database connection to ensure
    that the software with microservices is error-free and secure.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，确保数据库连接的安全性非常重要，以确保具有微服务的软件无错误且安全。
- en: In summary, by carefully considering your application’s requirements and selecting
    the appropriate database technology, along with implementing robust database connection
    management practices, you can ensure the reliability, scalability, and security
    of your microservices-based application.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，通过仔细考虑您应用程序的需求，选择合适的数据库技术，并实施稳健的数据库连接管理实践，您可以确保基于微服务的应用程序的可靠性、可扩展性和安全性。
- en: Next, we’ll learn more about data models and schemas and CRUD operations.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更深入地了解数据模型和模式以及 CRUD 操作。
- en: Data models and schemas and CRUD operations
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据模型和模式以及 CRUD 操作
- en: In microservices architecture, defining clear data models and schemas, as well
    as implementing CRUD operations, are essential tasks for managing data effectively.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，定义清晰的数据模型和模式，以及实施 CRUD 操作，是有效管理数据的基本任务。
- en: Data models and schemas
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据模型和模式
- en: '**Data models and schemas** are two important concepts in database design and
    development. A data model is a way of representing the structure, relationships,
    and constraints of the data in a database. A schema is a specific implementation
    of a data model, usually expressed in a formal language such as SQL. A schema
    defines the tables, columns, keys, indexes, views, and other objects that make
    up a database. There are different types of data models and schemas, depending
    on the level of abstraction and the purpose of the design.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据模型和模式**是数据库设计和开发中的两个重要概念。数据模型是表示数据库中数据结构、关系和约束的一种方式。模式是数据模型的具体实现，通常用如 SQL
    这样的形式化语言表达。模式定义了构成数据库的表、列、键、索引、视图和其他对象。根据抽象级别和设计目的的不同，存在不同类型的数据模型和模式。'
- en: 'Here’s how you can handle data models and schemas in microservices:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您在微服务中处理数据模型和模式的方法：
- en: '**Define clear data models**: Create well-defined data models for your microservices.
    Understand the entities your service will handle and represent them as JavaScript
    objects. Define the properties and their data types.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义清晰的数据模型**：为您的微服务创建定义良好的数据模型。了解您的服务将处理的实体，并将它们表示为 JavaScript 对象。定义属性及其数据类型。'
- en: '**Use schemas for validation**: Implement schemas using validation libraries
    such as **Joi**, or ORM/ODM features. ORM/ODM schemas are the definitions of how
    data is mapped between an object model and a database. An ORM schema specifies
    how the tables, columns, keys, and relationships in a relational database correspond
    to the classes, properties, methods, and associations in an object-oriented programming
    language. An ODM schema defines how the documents, fields, indexes, and references
    in a document database match the objects, attributes, functions, and links in
    an object-based programming language. Schemas enforce data consistency and validate
    incoming data against predefined rules. They ensure that the data adheres to the
    expected structure and format.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用模式进行验证**：使用如 **Joi** 这样的验证库或 ORM/ODM 功能实现模式。ORM/ODM 模式是数据在对象模型和数据库之间映射的定义。ORM
    模式指定关系数据库中的表、列、键和关系如何对应于面向对象编程语言中的类、属性、方法和关联。ODM 模式定义文档数据库中的文档、字段、索引和引用如何与基于对象的编程语言中的对象、属性、函数和链接相匹配。模式强制数据一致性，并验证传入数据是否符合预定义的规则。它们确保数据符合预期的结构和格式。'
- en: '**Handle relationships**: If your microservice handles entities with relationships
    (for example, one-to-many, many-to-many, and others), define relationships in
    your data models. Use foreign keys or references to establish these relationships,
    ensuring data integrity.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理关系**：如果您的微服务处理具有关系的实体（例如，一对一、多对多等），请在您的数据模型中定义这些关系。使用外键或引用来建立这些关系，确保数据完整性。'
- en: '**Version your schemas**: Consider versioning your schemas, especially in a
    microservices environment where services might evolve independently. Versioned
    schemas help maintain compatibility with existing consumers while allowing new
    features to be added.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本化您的模式**：考虑对您的模式进行版本控制，尤其是在可能独立发展的微服务环境中。版本化的模式有助于保持与现有消费者的兼容性，同时允许添加新功能。'
- en: In this section, we learned how to define data models or schemas that represent
    the structure and attributes of the data stored in the database.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何定义表示存储在数据库中的数据结构和属性的数据模型或模式。
- en: With these concepts covered, let’s learn more about CRUD operations.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了这些概念之后，让我们进一步学习 CRUD 操作。
- en: CRUD operations
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CRUD 操作
- en: '**CRUD operations** are the four basic functions of persistent storage in computer
    programming: Create, Read, Update, and Delete. These operations can be performed
    on various types of data, such as relational, document, or object-based data.
    CRUD operations are also mapped to standard HTTP methods, such as POST, GET, PUT,
    and DELETE, when working with web applications.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**CRUD操作**是计算机编程中持久存储的四个基本功能：创建、读取、更新和删除。这些操作可以应用于各种类型的数据，如关系型、文档型或基于对象的数据。当与Web应用程序一起工作时，CRUD操作也映射到标准HTTP方法，如POST、GET、PUT和DELETE。'
- en: 'Here’s how you can handle CRUD operations in microservices:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您如何在微服务中处理CRUD操作的方法：
- en: '**Create (POST) operation**: Implement the create operation to add new records
    to the database. Validate the incoming data using the defined schema before inserting
    it into the database. Then, return the created entity with a success status code.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建（POST）操作**：实现创建操作以向数据库添加新记录。在将其插入数据库之前，使用定义的架构验证传入的数据。然后，返回带有成功状态码的创建实体。'
- en: '**Read (GET) operation**: Implement the read operation to retrieve data from
    the database. Use query parameters to filter, sort, and paginate the results if
    necessary. Handle different endpoints or query parameters for specific data retrieval
    requirements.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读取（GET）操作**：实现读取操作以从数据库中检索数据。如有必要，使用查询参数进行筛选、排序和分页。处理不同端点或查询参数以满足特定的数据检索需求。'
- en: '**Update (PUT/PATCH) operation**: Implement the update operation to modify
    existing records. Validate the incoming data against the schema. Use **PUT** to
    update the entire resource and **PATCH** to update specific fields. Return the
    updated entity with a success status code.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新（PUT/PATCH）操作**：实现更新操作以修改现有记录。验证传入数据与架构的一致性。使用**PUT**来更新整个资源，使用**PATCH**来更新特定字段。返回带有成功状态码的更新实体。'
- en: '**Delete (DELETE) operation**: Implement the delete operation to remove records
    from the database. Use a unique identifier (for example, ID) to identify the entity
    to delete. Handle cascading deletions if necessary for related data.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除（DELETE）操作**：实现删除操作以从数据库中删除记录。使用唯一标识符（例如，ID）来识别要删除的实体。如有必要，处理级联删除以关联数据。'
- en: CRUD operations help us in our everyday work in terms of manipulating databases
    efficiently.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: CRUD操作帮助我们高效地操作数据库，在日常工作中非常有用。
- en: '*Figure 9**.2* depicts the process of database and CRUD operations:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9**.2*展示了数据库和CRUD操作的过程：'
- en: '![Figure 9.2: Database and CRUD operations (image by Freepik)](img/B14980_09_02.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图9.2：数据库和CRUD操作（图片由Freepik提供）](img/B14980_09_02.jpg)'
- en: 'Figure 9.2: Database and CRUD operations (image by Freepik)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2：数据库和CRUD操作（图片由Freepik提供）
- en: In summary, by following these best practices, you can ensure that your microservices
    handle data effectively, maintain data integrity, and provide reliable CRUD operations
    to consumers.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，通过遵循这些最佳实践，您可以确保您的微服务有效地处理数据，保持数据完整性，并向消费者提供可靠的CRUD操作。
- en: Now, we can continue to the next section, in which we will talk about transactions
    and data validation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续到下一节，我们将讨论事务和数据验证。
- en: Transactions and data validation
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事务和数据验证
- en: In microservices architecture, transactions are crucial for maintaining data
    consistency when multiple operations need to be executed atomically. Data validation
    and sanitization are critical for preventing common security vulnerabilities.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，当需要原子性地执行多个操作以保持数据一致性时，事务至关重要。数据验证和清理对于防止常见的安全漏洞至关重要。
- en: Transactions in microservices
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务中的事务
- en: '**Transactions** in microservices are a challenge that requires careful design
    and trade-offs. Transactions are operations that ensure the consistency and reliability
    of data across multiple systems. However, in microservices architecture, where
    each service has its own data store and communication is asynchronous and unreliable,
    implementing transactions becomes more complex and costly. There are different
    approaches and patterns to handle transactions in microservices, depending on
    the requirements and constraints of the system.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务中的**事务**是一个需要仔细设计和权衡的挑战。事务是确保跨多个系统数据一致性和可靠性的操作。然而，在微服务架构中，每个服务都有自己的数据存储，通信是异步且不可靠的，实现事务变得更加复杂和昂贵。根据系统的需求和限制，有不同方法和模式来处理微服务中的事务。
- en: 'Here’s how you can handle transactions in your microservices using Node.js:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您如何使用Node.js在微服务中处理事务的方法：
- en: '**Database support**: Choose a database that supports transactions. Most relational
    databases, such as MySQL and PostgreSQL, offer transactional support. Some NoSQL
    databases, such as MongoDB, provide support for multi-document transactions. NoSQL
    databases that support transactions natively, such as MongoDB, CouchDB, and RethinkDB,
    provide ACID guarantees for transactions within a single document or collection,
    and some of them also support multi-document or cross-collection transactions.
    However, these transactions may have performance and scalability trade-offs, and
    they may not work well for complex or cross-service transactions. NoSQL databases
    that support transactions through external libraries or frameworks, such as OrientDB,
    ArangoDB, and Cassandra, do not have built-in transaction support, but they can
    be integrated with third-party tools or modules that provide transaction capabilities,
    such as two-phase commit, the Saga pattern, or event sourcing. However, these
    tools or modules may have limitations or dependencies, and they may require additional
    coding or configuration.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库支持**：选择支持事务的数据库。大多数关系型数据库，如MySQL和PostgreSQL，提供事务支持。一些NoSQL数据库，如MongoDB，提供多文档事务的支持。支持原生事务的NoSQL数据库，如MongoDB、CouchDB和RethinkDB，在单个文档或集合内提供ACID事务保证，其中一些还支持多文档或跨集合事务。然而，这些事务可能会在性能和可扩展性方面有所权衡，并且可能不适合复杂或跨服务事务。通过外部库或框架支持事务的NoSQL数据库，如OrientDB、ArangoDB和Cassandra，没有内置的事务支持，但可以与提供事务能力的第三方工具或模块集成，例如两阶段提交、SAGA模式或事件溯源。然而，这些工具或模块可能存在限制或依赖，可能需要额外的编码或配置。'
- en: NOSQL may support different consistency models and may not guarantee ACID transactions
    in all situations, such as when key-value pairs or document-oriented programming
    is involved. While some NoSQL databases offer transactional capabilities, others
    may prioritize other aspects, such as high availability and scalability, over
    strong transactional consistency.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NoSQL可能支持不同的一致性模型，并且可能不会在所有情况下保证ACID事务，例如当涉及键值对或面向文档编程时。虽然一些NoSQL数据库提供事务能力，但其他数据库可能更优先考虑其他方面，如高可用性和可扩展性，而不是强事务一致性。
- en: Also, graph databases such as Neo4j can be used with microservices to handle
    transactional data. In microservices architecture, each service can have a graph
    database instance to manage its specific data. Neo4j supports ACID-compliant transactions,
    and its flexible data model makes it suitable for handling complex relationships
    and graph data in a distributed and scalable environment.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，图数据库如Neo4j可以与微服务一起使用来处理事务数据。在微服务架构中，每个服务可以有一个图数据库实例来管理其特定的数据。Neo4j支持符合ACID的事务，其灵活的数据模型使其适合在分布式和可扩展的环境中处理复杂的关系和图数据。
- en: '`BEGIN TRANSACTION`, `COMMIT`, and `ROLLBACK` for error handling. In NoSQL
    databases, transactions might involve a series of operations that are executed
    atomically. We must close database connections after each use. Failing to close
    these can result in memory leaks. Each open connection consumes memory resources,
    and if connections are not closed properly, the memory associated with those connections
    may not be released, leading to increased memory usage over time.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BEGIN TRANSACTION`、`COMMIT`和`ROLLBACK`用于错误处理。在NoSQL数据库中，事务可能涉及一系列原子执行的运算。我们必须在每次使用后关闭数据库连接。未能关闭这些连接可能导致内存泄漏。每个打开的连接都会消耗内存资源，如果连接没有正确关闭，与这些连接关联的内存可能不会被释放，从而导致随着时间的推移内存使用量增加。'
- en: '**Error handling and rollbacks**: Implement error handling within transactions.
    If any operation within a transaction fails, roll back the entire transaction.
    This ensures that either all operations in the transaction succeed, or the database
    is left in its initial state (rollback).'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理和回滚**：在事务中实现错误处理。如果事务中的任何操作失败，则回滚整个事务。这确保了事务中的所有操作要么全部成功，要么数据库保持其初始状态（回滚）。'
- en: '**Concurrency control**: Consider implementing concurrency control mechanisms
    such as pessimistic or optimistic concurrency control. Pessimistic concurrency
    control involves locking resources to prevent conflicts, while optimistic concurrency
    control uses versioning or timestamps to detect conflicts and handle them gracefully.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并发控制**：考虑实现并发控制机制，如悲观或乐观并发控制。悲观并发控制涉及锁定资源以防止冲突，而乐观并发控制使用版本号或时间戳来检测冲突并优雅地处理它们。'
- en: '**Nested transactions**: Some databases support nested transactions. Be cautious
    when using nested transactions as they can lead to complex behaviors. Nested transactions
    might commit independently of their parent transaction, leading to unexpected
    results.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嵌套事务**：一些数据库支持嵌套事务。使用嵌套事务时要小心，因为它们可能导致复杂的行为。嵌套事务可能会独立于其父事务提交，导致意外结果。'
- en: '**Test transactions**: Test your transactional logic thoroughly, including
    scenarios where transactions involve multiple services. Mock external service
    calls during testing to simulate different outcomes and ensure your transactions
    handle errors and rollbacks correctly.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试事务**：彻底测试您的交易逻辑，包括涉及多个服务的场景。在测试期间模拟外部服务调用以模拟不同的结果，并确保您的交易能够正确处理错误和回滚。'
- en: '**Monitor connection usage**: This will help you track the usage of database
    connections, which, in turn, helps with identifying potential issues such as connection
    leaks, excessive connection usage, or performance bottlenecks. We can monitor
    them using Datadog dashboards.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控连接使用情况**：这将帮助您跟踪数据库连接的使用情况，从而有助于识别潜在问题，例如连接泄漏、过度使用连接或性能瓶颈。我们可以使用 Datadog
    仪表板来监控它们。'
- en: With transactions, we can create faster a database and ensure its quality.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过事务，我们可以更快地创建数据库并确保其质量。
- en: Next, we’ll look at data validation and sanitization.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨数据验证和清理。
- en: Data validation and sanitization
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据验证和清理
- en: '**Data validation and sanitization** are two important techniques for ensuring
    the quality and security of data in web applications. Data validation is the process
    of checking if the user input meets certain criteria, such as format, length,
    type, or range, before we process or store it. Data sanitization is the process
    of removing or escaping potentially harmful characters or scripts from the user
    input to prevent attacks such as **cross-site scripting** (**XSS**) or SQL injection.
    By applying data validation and sanitization, developers can prevent various security
    vulnerabilities and ensure that the data being received and processed is accurate
    and reliable.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据验证和清理**是确保网络应用程序中数据质量和安全性的两种重要技术。数据验证是在我们处理或存储之前检查用户输入是否符合某些标准的过程，例如格式、长度、类型或范围。数据清理是从用户输入中删除或转义可能有害的字符或脚本的过程，以防止诸如**跨站脚本攻击**（XSS）或
    SQL 注入等攻击。通过应用数据验证和清理，开发者可以防止各种安全漏洞并确保接收和处理的数据是准确和可靠的。'
- en: 'Here’s how you can handle data validation and sanitization in your microservices
    using Node.js:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您如何使用 Node.js 在微服务中处理数据验证和清理的示例：
- en: '**Use validation libraries**: Utilize validation libraries such as Joi to validate
    incoming data against predefined schemas. Joi allows you to define the expected
    structure of data and validate it, ensuring that it adheres to the specified format
    before it’s processed. Here’s an example of using Joi in a Node.js route handler:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用验证库**：利用验证库，如 Joi，来验证传入数据是否符合预定义的模式。Joi 允许您定义数据的预期结构并进行验证，确保在处理之前它符合指定的格式。以下是一个在
    Node.js 路由处理程序中使用 Joi 的示例：'
- en: '[PRE0]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Sanitize user input**: Sanitize user input to prevent XSS attacks and SQL
    injection. Sanitization libraries such as **DOMPurify** can help clean HTML input
    to remove potentially malicious scripts. For SQL sanitization, use parameterized
    queries to avoid SQL injection attacks. Here’s an example of using DOMPurify to
    sanitize HTML input:'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清理用户输入**：清理用户输入以防止 XSS 攻击和 SQL 注入。如 **DOMPurify** 这样的清理库可以帮助清理 HTML 输入以删除可能有害的脚本。对于
    SQL 清理，使用参数化查询以避免 SQL 注入攻击。以下是一个使用 DOMPurify 清理 HTML 输入的示例：'
- en: '[PRE12]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Regular expressions**: Use regular expressions to validate specific patterns,
    such as email addresses, URLs, or credit card numbers. Regular expressions can
    be powerful tools for complex data validation. Here’s an example of using a regular
    expression to validate an email address:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正则表达式**：使用正则表达式来验证特定模式，例如电子邮件地址、URL 或信用卡号。正则表达式可以是复杂数据验证的有力工具。以下是一个使用正则表达式验证电子邮件地址的示例：'
- en: '[PRE14]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`eval()` and other unsafe functions that can execute arbitrary code. These
    functions can introduce serious security vulnerabilities by allowing attackers
    to execute malicious scripts within your application.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eval()`和其他可以执行任意代码的不安全函数。这些函数可以通过允许攻击者在您的应用程序中执行恶意脚本来引入严重的安全漏洞。'
- en: '**Output encoding**: Apply appropriate output encoding techniques to escape
    potentially malicious characters within user-generated content before rendering
    it in the browser. Utilize encoding methods such as HTML entity encoding, JavaScript
    escaping, and URL encoding to prevent malicious scripts from being injected into
    the output.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出编码**：在将用户生成的内容渲染到浏览器之前，应用适当的输出编码技术来转义潜在的恶意字符。使用如 HTML 实体编码、JavaScript 转义和
    URL 编码等方法来防止恶意脚本注入到输出中。'
- en: '**Security policies**: Enforce strict **content security policies** (**CSPs**)
    to define trusted sources of content and mitigate the risks associated with loading
    external resources and executing inline scripts. Implement appropriate HTTP security
    headers, such as X-XSS-Protection, to enable your browser’s XSS filtering mechanism
    and block potential attack vectors.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全策略**：强制执行严格的内容安全策略（**CSP**）来定义受信任的内容来源并减轻加载外部资源和执行内联脚本相关的风险。实施适当的 HTTP
    安全头，如 X-XSS-Protection，以启用浏览器 XSS 过滤机制并阻止潜在的攻击向量。'
- en: Incorporating these preventive measures can significantly reduce the likelihood
    of XSS attacks and enhance the overall security posture of your application. Additionally,
    staying informed about the latest security best practices and vulnerabilities
    is crucial for continuously improving your XSS prevention strategies.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 采取这些预防措施可以显著降低跨站脚本攻击的可能性，并增强应用程序的整体安全态势。此外，了解最新的安全最佳实践和漏洞对于持续改进您的 XSS 防范策略至关重要。
- en: Data validation and sanitization help us a lot in validating user input in models
    and not allowing hackers to modify our databases.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 数据验证和清理在验证模型中的用户输入并防止黑客修改我们的数据库方面帮我们很大忙。
- en: '*Figure 9**.3* illustrates data validation and sanitizing:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9**.3* 展示了数据验证和清理：'
- en: '![Figure 9.3: Data validation and sanitizing (image by storyset on Freepik)](img/B14980_09_03.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3：数据验证和清理（图片由 storyset 在 Freepik 提供）](img/B14980_09_03.jpg)'
- en: 'Figure 9.3: Data validation and sanitizing (image by storyset on Freepik)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3：数据验证和清理（图片由 storyset 在 Freepik 提供）
- en: In summary, by implementing robust transaction management and thorough data
    validation and sanitization practices, you can significantly enhance the security
    and reliability of your microservices-based applications.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，通过实施强大的事务管理和全面的数据验证和清理实践，您可以显著提高基于微服务的应用程序的安全性和可靠性。
- en: In the next section, we will learn about error handling and optimizations.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习关于错误处理和优化的内容。
- en: Error handling and optimizations
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理和优化
- en: Proper error handling is crucial in microservices architecture to ensure reliability
    and provide meaningful feedback to clients. On the other hand, optimizing your
    microservices ensures they run efficiently and handle requests quickly, enhancing
    the overall user experience.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，适当的错误处理对于确保可靠性和向客户提供有意义的反馈至关重要。另一方面，优化您的微服务确保它们运行高效，快速处理请求，从而提升整体用户体验。
- en: Error handling in microservices
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务中的错误处理
- en: '**Error handling** in microservices is a crucial aspect of building reliable
    and resilient distributed systems. Errors can occur due to various reasons, such
    as network failures, service outages, data inconsistencies, or application bugs.
    Therefore, it is important to have a consistent and effective strategy for handling
    errors across different microservices.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**微服务中的错误处理**是构建可靠和弹性分布式系统的关键方面。错误可能由于各种原因发生，例如网络故障、服务中断、数据不一致或应用程序错误。因此，在各个微服务中拥有一致和有效的错误处理策略非常重要。'
- en: 'Here’s how you can handle errors effectively in your Node.js microservices:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何在您的 Node.js 微服务中有效处理错误的示例：
- en: '**Use HTTP status codes**: Utilize appropriate HTTP status codes in your responses.
    For example, use **400 Bad Request** for client errors (for example, validation
    failures), **404 Not Found** for resources that don’t exist, and **500 Internal
    Server Error** for server-side errors (a server-side error is an error that occurs
    on the web server when it fails to process a request from a client (such as a
    web browser). A common example of a server-side error is the 500 Internal Server
    Error, which indicates that the server encountered an unexpected condition that
    prevented it from fulfilling the request.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 HTTP 状态码**：在响应中利用适当的 HTTP 状态码。例如，对于客户端错误（例如验证失败），使用 **400 Bad Request**；对于不存在的资源，使用
    **404 Not Found**；对于服务器端错误，使用 **500 Internal Server Error**（服务器端错误是在服务器无法处理来自客户端（如网页浏览器）的请求时发生的错误。一个常见的服务器端错误示例是
    500 内部服务器错误，这表明服务器遇到了阻止其满足请求的意外条件）。例如，当服务器遇到无法处理请求时，会显示 500 内部服务器错误。'
- en: '**Centralized error handling**: Implement centralized error handling middleware.
    This middleware catches unhandled errors, logs them, and sends an appropriate
    error response to the client. It ensures consistent error formatting across your
    microservices. Here’s an example of using **Express.js** middleware for centralized
    error handling:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中式错误处理**：实现集中式错误处理中间件。此中间件捕获未处理的错误，记录它们，并向客户端发送适当的错误响应。它确保你的微服务中错误格式的一致性。以下是一个使用
    **Express.js** 中间件进行集中式错误处理的示例：'
- en: '[PRE18]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Custom error classes**: Use custom error classes to represent different types
    of errors. Custom errors can include additional information and help you handle
    specific error scenarios more effectively. Here’s an example of creating a custom
    error class in Node.js:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义错误类**：使用自定义错误类来表示不同类型的错误。自定义错误可以包含附加信息，并有助于更有效地处理特定的错误场景。以下是在 Node.js
    中创建自定义错误类的示例：'
- en: '[PRE22]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**Logging**: Log errors with detailed information, including the error message,
    stack trace, and relevant context. Centralized logging helps in diagnosing issues
    and monitoring the health of your microservices.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录**：记录包含错误消息、堆栈跟踪和相关上下文的详细错误信息。集中式日志记录有助于诊断问题和监控微服务的健康状况。'
- en: '**Error codes and messages**: Include error codes and user-friendly error messages
    in your responses. Error codes can help both clients and developers identify specific
    issues, while user-friendly messages improve the user experience.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误代码和消息**：在响应中包含错误代码和用户友好的错误消息。错误代码可以帮助客户端和开发者识别特定问题，而用户友好的消息可以改善用户体验。'
- en: Error handling in microservices can help you avoid headaches later while developing
    microservices in Node.js. It helps developers debug faster.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务中处理错误可以帮助你在使用 Node.js 开发微服务时避免后续的头痛，它有助于开发者更快地调试。
- en: In the next section, we will talk about optimizations in microservices.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论微服务的优化。
- en: Optimizations in microservices
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务的优化
- en: '**Optimizations** in microservices are the techniques and practices that aim
    to improve the performance, scalability, and reliability of microservice-based
    applications.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**微服务的优化**是旨在提高基于微服务应用程序的性能、可扩展性和可靠性的技术和实践。'
- en: 'Here are some optimization techniques that are specific to Node.js microservices:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些针对 Node.js 微服务的特定优化技术：
- en: '**Code optimization**:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码优化**：'
- en: '**Minimize dependencies**: Use only the necessary libraries to reduce the size
    of your application'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小化依赖**：仅使用必要的库以减少应用程序的大小'
- en: '**Avoid synchronous operations**: Prefer asynchronous operations to prevent
    blocking the event loop'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免同步操作**：优先使用异步操作以防止阻塞事件循环'
- en: '**Use efficient algorithms**: Choose appropriate data structures and algorithms
    to optimize processing times'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用高效算法**：选择合适的数据结构和算法以优化处理时间'
- en: '**Database optimization**:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库优化**：'
- en: '**Use indexing**: Index database fields that are frequently used in queries
    to speed up search operations'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用索引**：对查询中频繁使用的数据库字段进行索引以加快搜索操作'
- en: '**Batch database operations**: Combine multiple database operations into batches
    to reduce the number of round trips to the database'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**批量数据库操作**：将多个数据库操作组合成批次，以减少对数据库的往返次数'
- en: '**Connection pooling**: Reuse database connections using connection pooling
    libraries to minimize overhead'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接池**：使用连接池库重用数据库连接以最小化开销'
- en: '**Caching**: Implement caching mechanisms (in-memory caching or external caches
    such as **Redis**) for frequently accessed data. Caching reduces the need to fetch
    data from the database repeatedly.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**：实现缓存机制（内存缓存或外部缓存，如**Redis**），用于频繁访问的数据。缓存减少了从数据库重复获取数据的需要。'
- en: '**Load balancing**: Use load balancers to distribute incoming traffic across
    multiple instances of your microservices. Load balancing ensures that no single
    instance is overwhelmed, optimizing resource utilization.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡**：使用负载均衡器将传入流量分配到您的微服务的多个实例。负载均衡确保没有单个实例过载，优化资源利用率。'
- en: '**Error handling and monitoring**: Monitor your microservices using tools such
    as **Prometheus**, **Grafana**, or **New Relic**. Track performance metrics, errors,
    and resource usage to identify bottlenecks and areas for optimization.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理和监控**：使用**Prometheus**、**Grafana**或**New Relic**等工具监控您的微服务。跟踪性能指标、错误和资源使用情况，以识别瓶颈和优化区域。'
- en: '**Network optimization**:'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络优化**：'
- en: '**Minimize external API calls**: Reduce the number of calls to external services
    or APIs since network latency can significantly impact response times'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小化外部API调用**：减少对外部服务或API的调用次数，因为网络延迟会显著影响响应时间'
- en: '**Compression**: Use response compression to reduce the size of data sent over
    the network, especially for JSON responses'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**压缩**：使用响应压缩来减少通过网络发送的数据大小，特别是对于JSON响应'
- en: '**Microservices communication**:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务通信**：'
- en: '**Optimize inter-service communication**: Choose efficient protocols such as
    **gRPC** and **Protocol Buffers** for communication between microservices.'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优化服务间通信**：选择高效的协议，如**gRPC**和**Protocol Buffers**，用于微服务之间的通信。'
- en: '**Implement circuit breaking**: Circuit breaking in microservices is a technique
    that prevents cascading failures in a distributed system by stopping communication
    with a failing or unresponsive service. A circuit breaker is a component that
    monitors the health and performance of a service and acts as a proxy for the requests.
    When the service is functioning normally, the circuit breaker allows the requests
    to pass through. Use circuit-breaking patterns to prevent cascading failures in
    case a dependent service is slow or unresponsive.'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现断路器**：微服务中的断路器是一种技术，通过停止与失败或无响应服务的通信来防止分布式系统中的级联故障。断路器是一个监控服务健康和性能的组件，并作为请求的代理。当服务正常运行时，断路器允许请求通过。使用断路器模式来防止依赖服务缓慢或无响应时的级联故障。'
- en: In summary, by combining effective error handling practices with strategic optimizations,
    you can ensure your Node.js microservices are both robust and performant, providing
    a seamless experience for users and clients.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，通过结合有效的错误处理实践和战略优化，您可以确保您的Node.js微服务既健壮又高效，为用户和客户提供无缝体验。
- en: In the final section, we are going to talk about testing.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一节，我们将讨论测试。
- en: Testing
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: '**Testing** is a critical aspect of software development as it ensures that
    your microservices are reliable, secure, and function as expected.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试**是软件开发的一个关键方面，因为它确保您的微服务是可靠、安全和按预期工作的。'
- en: 'Here are various testing techniques and best practices for Node.js microservices:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是各种Node.js微服务的测试技术和最佳实践的示例：
- en: '**Unit testing**:'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：'
- en: '*Purpose*: Test individual units or components of your microservices in isolation'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目的*：在隔离状态下测试您的微服务中的单个单元或组件'
- en: '*Tools*: Use testing frameworks such as **Mocha**, **Jest**, or **Jasmine**,
    and assertion libraries such as **Chai** or Jest’s built-in assertions'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*工具*：使用测试框架，如**Mocha**、**Jest**或**Jasmine**，以及断言库，如**Chai**或Jest内置的断言。'
- en: '*Techniques*: Write tests for functions, classes, and modules, mocking dependencies
    to isolate the unit being tested'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*技术*：为函数、类和模块编写测试，模拟依赖项以隔离正在测试的单元'
- en: '**Integration testing**:'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：'
- en: '*Purpose*: Validate interactions between different components or microservices.'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目的*：验证不同组件或微服务之间的交互。'
- en: '*Tools*: Use testing frameworks and libraries similar to unit testing but focus
    on scenarios where multiple units interact.'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*工具*：使用类似于单元测试的测试框架和库，但专注于多个单元交互的场景。'
- en: '*Techniques*: Test API endpoints, data flows, and integrations with databases
    or external services. Use real or in-memory databases for more realistic testing.'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*技术*：测试API端点、数据流以及与数据库或外部服务的集成。使用真实或内存数据库进行更真实的测试。'
- en: '**End-to-end testing**:'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端到端测试**：'
- en: '*Purpose*: Test the entire flow of a microservice, including interactions with
    external dependencies'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目的*: 测试微服务的整个流程，包括与外部依赖的交互'
- en: '*Tools*: **Selenium**, **Puppeteer**, and **Cypress**'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*工具*: **Selenium**, **Puppeteer**, 和 **Cypress**'
- en: '*Techniques*: Automate browser interactions, simulate user behaviors, and validate
    the application’s behavior across its entire stack'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*技术*: 自动化浏览器交互，模拟用户行为，并验证应用程序在其整个堆栈中的行为'
- en: '**Contract testing**:'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**契约测试**:'
- en: '*Purpose*: Ensure that services interacting via APIs adhere to their defined
    contracts'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目的*: 确保通过API交互的服务遵守其定义的契约'
- en: '*Tools*: **Pact** and **Spring** **Cloud Contract**'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*工具*: **Pact** 和 **Spring Cloud Contract**'
- en: '*Techniques*: Define contracts (expectations) between services, then verify
    that both the producer and consumer of the API meet these expectations'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*技术*: 定义服务之间的契约（期望），然后验证API的生产者和消费者是否满足这些期望'
- en: '**Load and** **performance testing**:'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载和性能测试**:'
- en: '*Purpose*: Assess how the system behaves under various loads and identify performance
    bottlenecks'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目的*: 评估系统在各种负载下的行为，并识别性能瓶颈'
- en: '*Tools*: **Apache JMeter**, **Loader.io**, and **Artillery**'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*工具*: **Apache JMeter**, **Loader.io**, 和 **Artillery**'
- en: '*Techniques*: Simulate a high volume of requests to your microservices, monitoring
    response times and server resource usage'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*技术*: 模拟对微服务的大量请求，监控响应时间和服务器资源使用情况'
- en: '**Security testing**:'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全测试**:'
- en: '*Purpose*: Identify vulnerabilities and weaknesses in your microservices'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目的*: 识别微服务中的漏洞和弱点'
- en: '*Tools*: **OWASP ZAP**, **Burp Suite**, and **SonarQube**'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*工具*: **OWASP ZAP**, **Burp Suite**, 和 **SonarQube**'
- en: '*Techniques*: Conduct security scans, code analysis, and penetration testing
    to find security flaws and address them before deployment'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*技术*: 进行安全扫描、代码分析和渗透测试，以发现安全漏洞并在部署前解决它们'
- en: '**Mutation testing**:'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**突变测试**:'
- en: '*Purpose*: Evaluate the quality of your unit tests by introducing small code
    mutations and checking if the tests catch them'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目的*: 通过引入小的代码突变并检查测试是否捕获它们来评估单元测试的质量'
- en: '*Tools*: **Stryker** and **PITest**'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*工具*: **Stryker** 和 **PITest**'
- en: '*Techniques*: Mutate your code base (change a small part of the code), rerun
    tests, and see if the tests fail due to the mutation'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*技术*: 突变你的代码库（更改代码的一小部分），重新运行测试，并查看测试是否因突变而失败'
- en: As we have learned, these concepts can help us test software better and deliver
    a well-tested piece of software.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所学的，这些概念可以帮助我们更好地测试软件，并交付经过良好测试的软件。
- en: '*Figure 9**.4* illustrates the process of testing:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9**.4* 展示了测试过程：'
- en: '![Figure 9.4: Testing (image by storyset on Freepik)](img/B14980_09_04.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4：测试（由Freepik上的storyset提供图片）](img/B14980_09_04.jpg)'
- en: 'Figure 9.4: Testing (image by storyset on Freepik)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4：测试（由Freepik上的storyset提供图片）
- en: In summary, by following these testing techniques and best practices, you can
    ensure that your Node.js microservices are thoroughly tested, reliable, and ready
    for deployment.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，通过遵循这些测试技术和最佳实践，你可以确保你的Node.js微服务得到彻底的测试，可靠，并且准备好部署。
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned a lot about microservices, how to manipulate databases,
    and how to fully test our software application. We have gone through every step
    of database manipulation and testing while developing so that our software application
    will be bug-free.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于微服务的大量知识，包括如何操作数据库以及如何全面测试我们的软件应用程序。我们在开发过程中走过了数据库操作和测试的每一步，以确保我们的软件应用程序无错误。
- en: Manipulating data in microservices involves performing CRUD operations on databases
    or data storage systems. Remember to follow best practices for data security,
    such as input validation, data encryption, and protecting sensitive data, based
    on the requirements of your microservices and compliance standards. By implementing
    these steps, you can effectively manipulate data within your Node.js microservices
    and ensure proper interaction with the underlying database or data storage system.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务中操作数据涉及在数据库或数据存储系统中执行CRUD操作。请记住，根据你的微服务需求和合规标准，遵循数据安全最佳实践，如输入验证、数据加密和保护敏感数据。通过实施这些步骤，你可以在Node.js微服务中有效地操作数据，并确保与底层数据库或数据存储系统的正确交互。
- en: Managing databases effectively within a microservices architecture using Node.js
    involves careful consideration of data models, CRUD operations, transactions,
    and optimizations.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js微服务架构中有效地管理数据库涉及仔细考虑数据模型、CRUD操作、事务和优化。
- en: By adhering to these practices, microservices can effectively manage databases,
    ensuring data integrity, security, and optimal performance within the microservices
    ecosystem.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些实践，微服务可以有效地管理数据库，确保在微服务生态系统中数据的完整性、安全性和最佳性能。
- en: In the next chapter, we are going to learn about API communication and data
    contracts in microservices.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习微服务中的API通信和数据合约。
- en: Quiz time
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: What are the key steps for choosing the right database?
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择正确数据库的关键步骤有哪些？
- en: How can you handle data models and schemas in microservices?
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何处理微服务中的数据模型和模式？
- en: What are CRUD operations?
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CRUD操作是什么？
- en: What are transactions?
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务是什么？
