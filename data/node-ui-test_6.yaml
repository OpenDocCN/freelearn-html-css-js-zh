- en: Chapter 6. Testing Interactions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。测试交互
- en: So far we have tested the filling of text fields on a form, but there are other
    more complex input fields that you can instruct a Zombie browser to fill.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经测试了在表单上填写文本字段，但还有其他更复杂的输入字段，您可以指示Zombie浏览器填写。
- en: For instance, you may want to select a radio button element, or choose one item
    from a drop-down list box, or you may want to select a particular date from a
    date input field.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可能想要选择单选按钮元素，或从下拉列表框中选择一个项目，或者您可能想要从日期输入字段中选择特定日期。
- en: When interacting with form fields and other elements, your application may manipulate
    the document—to show or hide some elements, for instance. By the end of this chapter
    you will know how to use Zombie.js to validate the effects of manipulating the
    document with JavaScript.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与表单字段和其他元素交互时，您的应用程序可能会操纵文档，例如显示或隐藏某些元素。在本章结束时，您将了解如何使用Zombie.js验证使用JavaScript操纵文档的效果。
- en: 'The topics covered in this chapter are:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题有：
- en: How to trigger changes in other form objects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何触发其他表单对象的更改
- en: How to test DOM manipulations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何测试DOM操作
- en: Acting on radio buttons
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作单选按钮
- en: To test the usage of radio buttons, we need to add some to a form in our app.
    We will introduce a radio button in the to-do item creation form to indicate if
    an alarm should be scheduled. Depending on the selected value, a field should
    appear, allowing us to set the to-do item's alarm date and time.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试单选按钮的使用，我们需要在应用程序的表单中添加一些单选按钮。我们将在待办事项创建表单中引入一个单选按钮，以指示是否应该安排闹钟。根据所选值，应该出现一个字段，允许我们设置待办事项的闹钟日期和时间。
- en: 'First, we need to change the to-do item creation template in `templates/todos/new.html`
    to:'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要更改`templates/todos/new.html`中的待办事项创建模板：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will present users with a couple of new radio buttons in the to-do item
    creation form:![Acting on radio buttons](img/0526OS_06_01.jpg)
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将向用户呈现待办事项创建表单中的一对新单选按钮：![操作单选按钮](img/0526OS_06_01.jpg)
- en: 'Now we also need to introduce some styles. Create a custom style sheet under
    `public/css/todo.css`:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们还需要引入一些样式。在`public/css/todo.css`下创建一个自定义样式表：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We need to refer the previous CSS file in our layout file in `templates/layout.html`:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在`templates/layout.html`中的布局文件中引用以前的CSS文件：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next we need to make the date and time form fields appear when the user selects
    the **Alarm** radio button. For that we need to introduce an event listener in
    the `public/js/todos.js` file:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，当用户选择**闹钟**单选按钮时，我们需要使日期和时间表单字段出现。为此，我们需要在`public/js/todos.js`文件中引入一个事件监听器：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This new event listener will listen for changes in the radio button and then
    hide or show the alarm date and time fields accordingly, resulting in the following
    screen when the `Alarm` setting is turned on:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新的事件监听器将监听单选按钮的更改，然后相应地隐藏或显示闹钟日期和时间字段，当“闹钟”设置打开时，结果如下：
- en: '![Acting on radio buttons](img/0526OS_06_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![操作单选按钮](img/0526OS_06_02.jpg)'
- en: 'We also need to change the route listener for the form post to accommodate
    these new fields:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要更改表单提交的路由监听器，以适应这些新字段：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This new piece of code processes the alarm date and alarm time submitted in
    the form fields and parses them into a timestamp. A to-do item contained in the
    `todo` variable is then converted into a document that looks like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这段新代码处理了表单字段中提交的闹钟日期和闹钟时间，并将它们解析为时间戳。然后，包含在`todo`变量中的待办事项被转换为一个看起来像这样的文档：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Testing the user interaction
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试用户交互
- en: 'For testing these new form fields and their combined behavior, we will use
    the test file in `test/todos.js`, and augment the `Todo creation form` scope:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这些新的表单字段及其组合行为，我们将使用`test/todos.js`中的测试文件，并增加`Todo creation form`范围：
- en: 'First we test that these radio buttons do exist and that the alarms are turned
    off by default:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们测试这些单选按钮是否存在，并且默认情况下闹钟是否关闭：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here we're verifying that we actually have two radio buttons for the `alarm`
    field, one having a `false` and the other having a `true` string value. Then we
    also verify that the first one is checked.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在验证“闹钟”字段实际上有两个单选按钮，一个具有“false”值，另一个具有“true”值。然后我们还验证第一个是否被选中。
- en: 'We also need to verify that the animation of the new date and time form fields
    works; the `div` element that wraps the alarm date and time input fields should
    be hidden when the user chooses not to use the alarm. When the user selects the
    `Use alarm` radio button, the `div` element should then be made visible:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要验证新的日期和时间表单字段的动画是否有效；包裹闹钟日期和时间输入字段的`div`元素在用户选择不使用闹钟时应该隐藏。当用户选择“使用闹钟”单选按钮时，`div`元素应该变为可见：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we are turning the use alarm setting on and off and verifying that the
    style of the container, `div`, changes accordingly. In Zombie, all the user interaction
    functions (such as `browser.choose()`, `browser.fill()`, and others) allow you
    to pass in a callback function as the last argument. This function will be invoked
    once the browser event loop is free, which means that your function will only
    be invoked after any animation. This is really useful since your test code doesn't
    have to explicitly wait for the animation to finish. You can be assured that the
    DOM is manipulated once your callback function gets called.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们打开和关闭使用闹钟设置，并验证容器`div`的样式相应更改。在Zombie中，所有用户交互函数（如`browser.choose()`，`browser.fill()`等）都允许您将回调函数作为最后一个参数传递。一旦浏览器事件循环空闲，将调用此函数，这意味着只有在任何动画之后才会调用您的函数。这真的很有用，因为您的测试代码不必显式等待动画完成。您可以确保在调用回调函数后DOM被操作。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Using this technique, you can also test for any user interaction. By providing
    a callback function that Zombie invokes when all the actions are complete, you
    can test the effect that those actions had on the document.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种技术，您还可以测试任何用户交互。通过提供一个回调函数，当Zombie完成所有操作时调用该函数，您可以测试这些操作对文档的影响。
- en: In our case, we tested that we succeed in changing the style attribute of a
    `div` element, but you can also test other interactions using this technique.
    For instance, as we'll see in the next chapter, we can test that the content has
    changed according to some user actions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们测试了成功更改`div`元素的样式属性，但您也可以使用这种技术测试其他交互。例如，正如我们将在下一章中看到的那样，我们可以测试内容是否根据某些用户操作而改变。
- en: Selecting values
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择值
- en: If you have a select box in a form, you can also instruct Zombie to select a
    list item for you. Let's change our to-do item creation form to include an additional
    select box that describes the scope of the item—whether the item is related to
    work, family, or if it's a personal task.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表单中有选择框，您还可以指示Zombie为您选择列表项。让我们更改我们的待办事项创建表单，以包括描述项目范围的额外选择框 - 项目是否与工作、家庭有关，或者是否是个人任务。
- en: 'First, we need to introduce this additional field into the to-do item creation
    form in `templates/todos/new.html`, right after the `What` text area field:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在`templates/todos/new.html`中的待办事项创建表单中引入这个额外的字段，就在`What`文本区域字段之后：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will present the following form containing the additional **Scope** label
    and a select box:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将呈现包含额外的**Scope**标签和选择框的以下表单：
- en: '![Selecting values](img/0526OS_06_03.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![选择值](img/0526OS_06_03.jpg)'
- en: 'Now we need to have a test that verifies that this form contains the `select`
    element and the `option` items. For that, let''s keep extending the file in `test/todos.js`,
    inside the `Todo creation form` description scope:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要有一个测试来验证该表单是否包含`select`元素和`option`项。为此，让我们继续扩展`test/todos.js`文件，在`Todo
    creation form`描述范围内：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here we're testing that the `select` element exists, that it has four `option`
    items, and that each item has the expected value and text.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在测试`select`元素是否存在，它是否有四个`option`项，以及每个项是否具有预期的值和文本。
- en: 'Now we need to change the to-do list to present this new scope field. For that,
    we need to introduce it in the `templates/todos/index.html` file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要更改待办事项列表以呈现这个新的范围字段。为此，我们需要在`templates/todos/index.html`文件中引入它：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We also need to fill the value when presenting the to-do item list in the `routes/todos.js`
    file, in the `GET /` route listener:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当在`routes/todos.js`文件的`GET /`路由监听器中呈现待办事项列表时，我们还需要填写值：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will result in a to-do list like the one shown in the following screenshot,
    where the `scope` attribute of each to-do item is presented:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致待办事项列表如下截图所示，其中呈现了每个待办事项的`scope`属性：
- en: '![Selecting values](img/0526OS_06_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![选择值](img/0526OS_06_04.jpg)'
- en: 'Now we need to test that the to-do item creation succeeds in capturing the
    scope value. For this, we''ll slightly change the test named `should allow to
    create a todo`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要测试待办事项创建是否成功捕获了范围值。为此，我们将稍微更改名为`should allow to create a todo`的测试：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Summary
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Zombie allows you to manipulate any form object including text fields, text
    areas, select boxes, checkboxes and radio buttons.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Zombie允许您操纵任何表单对象，包括文本字段、文本区域、选择框、复选框和单选按钮。
- en: Zombie not only allows the testing of server responses, but also the simulation
    of user interaction. If your application dynamically changes the document when
    a user event is triggered (such as selecting an option or clicking on an element),
    using Zombie and browser queries, you can verify that the behavior is as intended.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Zombie不仅允许测试服务器响应，还允许模拟用户交互。如果您的应用程序在触发用户事件时动态更改文档（例如选择选项或单击元素），您可以使用Zombie和浏览器查询来验证行为是否符合预期。
- en: Even when user-triggered animations are present (such as fade-in), Zombie will
    not invoke the callback until these animations are complete.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 即使存在用户触发的动画（例如淡入），Zombie也不会在这些动画完成之前调用回调函数。
- en: In the next chapter, we will analyze how we can use Zombie.js to test user interactions
    that perform the AJAX calls.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将分析如何使用Zombie.js来测试执行AJAX调用的用户交互。
