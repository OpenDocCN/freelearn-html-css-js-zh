- en: Building an Express Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Express应用
- en: Express.js is a Node.js web application framework. Express.js makes it easier
    to use Node.js and leverages its power. In this chapter, we will be creating an
    application using solely Express.js. Express.js is also a `node` package. We can
    use an application generator tool, which lets us create a skeleton of an express
    app easily, or we can simply create one ourselves from scratch.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Express.js是一个Node.js网络应用框架。Express.js使得使用Node.js更加容易，并利用了其强大功能。在本章中，我们将仅使用Express.js创建一个应用。Express.js也是一个`node`包。我们可以使用应用程序生成器工具，它让我们可以轻松地创建Express应用的骨架，或者我们可以从头开始自己创建。
- en: 'In the previous chapter, we learned about what `npm` is, what a package is,
    and how to install a package.  In this chapter, we will cover the following elements:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了`npm`是什么，包是什么，以及如何安装一个包。在本章中，我们将涵盖以下元素：
- en: What Node.js is and what it can do
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js是什么以及它能做什么
- en: The benefits it adds
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它带来的好处
- en: The basic programming of Node.js
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js的基本编程
- en: Node.js core and custom modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js核心和自定义模块
- en: An introduction to Express.js
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Express.js简介
- en: Creation of an application using Express.js
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Express.js创建应用
- en: Routes in Express.js
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Express.js中的路由
- en: 'MVC architecture: what it is and what value it adds when implemented in an
    application'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC架构：它是什么以及它在应用中实现时增加了什么价值
- en: File naming conventions for the application
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用的文件命名规范
- en: Folder reorganization to incorporate MVC
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对文件夹进行重组以融入MVC模式
- en: View creation for the Express.js application
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Express.js应用创建视图
- en: There are a lot of `npm` packages out there that can let us create a skeleton
    for an Express.js application. One such package is `express-generator`. This lets
    us scaffold the whole application in seconds. It will create all the necessary
    files and folders in a modular structure. It generates the file structures in
    such a way that is very easy to understand. The only thing that we need to do is
    to define the template views and the routes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多`npm`包可以帮助我们创建Express.js应用的骨架。其中一个这样的包是`express-generator`。它让我们能在几秒钟内搭建整个应用。它将以模块化结构创建所有必要的文件和文件夹。它生成的文件结构非常易于理解。我们唯一需要做的是定义模板视图和路由。
- en: We can modify this structure as per our needs and requirements as well. This
    is very handy when we are on a tight deadline and want to build an application
    in a day or so. The process is extremely simple.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以根据我们的需求和需求修改这个结构。当我们面临紧迫的截止日期，想在一天或几天内构建一个应用时，这非常方便。这个过程极其简单。
- en: '`express-generator` is only one of many tools that are available to create
    a scaffold or a modular structure of an express application. Each generator tool
    may have its own way of building the file structure as per their standard which
    can be easily customized.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`express-generator`只是众多可用于创建Express应用骨架或模块化结构的工具之一。每个生成器工具都有其自己的文件结构构建方式，这可以根据其标准轻松定制。'
- en: If you are a beginner and want to understand how the folder structure works,
    I recommend you build the application from scratch. We will be discussing this
    further in this chapter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个初学者并且想了解文件夹结构是如何工作的，我建议你从头开始构建应用。我们将在本章中进一步讨论这一点。
- en: To get started, first we need to learn more about Node.js before diving into
    Express.js.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们首先需要了解Node.js，然后再深入研究Express.js。
- en: Introduction to Node.js
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js简介
- en: Node.js is a JavaScript runtime build on a JavaScript engine. It is an open
    source framework used for server-side management. Node.js is lightweight and efficient
    and runs on various platforms, such as Windows, Linux, and macOS.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是一个基于JavaScript引擎构建的JavaScript运行时。它是一个开源框架，用于服务器端管理。Node.js轻量级且高效，可在Windows、Linux和macOS等平台上运行。
- en: 'Node.js was created by Ryan Dahl in 2009\. JavaScript used to be used mostly
    for client-side scripting, but Node.js enables JavaScript to be used on the server
    side as well. The invention of Node.js introduced the use of a single programming
    language in web applications. Node.js brings with it a lot of benefits, some of
    which are as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js由Ryan Dahl于2009年创建。JavaScript过去主要用于客户端脚本，但Node.js使得JavaScript也可以在服务器端使用。Node.js的发明引入了在Web应用中使用单一编程语言的做法。Node.js带来了很多好处，其中一些如下：
- en: '**Event-driven programming**: It means changing the state of an object from
    one to another. Node.js uses event-driven programming, which means it uses a user''s
    interactive actions, such as mouse clicks, and key presses, to change the state
    of objects.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件驱动编程**：这意味着改变一个对象的状态从一个变为另一个。Node.js使用事件驱动编程，这意味着它使用用户的交互动作，如鼠标点击和按键，来改变对象的状态。'
- en: '**Non-blocking I/O**: The non-blocking I/O, or non-synchronous I/O, means an
    asynchronous I/O. A synchronous process waits until the current running process
    is completed and, hence, blocks the process. On the other hand, the asynchronous process
    does not need to wait for that process to finish, which makes it fast and reliable
    as well.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非阻塞I/O**：非阻塞I/O或非同步I/O意味着异步I/O。同步进程会等待当前运行进程完成，因此会阻塞进程。另一方面，异步进程不需要等待该进程完成，这使得它既快速又可靠。'
- en: '**Single threading**: Single threading means that JavaScript runs in only a
    single event loop. Since an asynchronous process allows us to have multiple processes
    concurrently, it may seem like all these processes run in their own specific thread.
    But Node.js handles asynchronous a little differently. The event loop in Node.js
    triggers the next callback function that is scheduled for execution after the
    corresponding event has occurred.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单线程**：单线程意味着JavaScript只在单个事件循环中运行。由于异步进程允许我们同时拥有多个进程，这可能会让人感觉所有这些进程都在它们自己的特定线程中运行。但Node.js处理异步的方式略有不同。Node.js中的事件循环在相应事件发生后触发下一个已安排执行的回调函数。'
- en: Understanding Node.js
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Node.js
- en: Before diving into Node.js programming, let's first look into some fundamentals
    of Node.js. Node.js runs on the JavaScript V8 engine. The JavaScript V8 engine
    was built by *The Chromium Project* for Google Chrome and Chromium web browsers.
    It is an open source project written in C++. This engine is used for both client-
    and server-side web applications with JavaScript.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究Node.js编程之前，让我们先了解一下Node.js的一些基础知识。Node.js运行在JavaScript V8引擎上。JavaScript
    V8引擎是由*Chromium项目*为Google Chrome和Chromium网络浏览器构建的。这是一个用C++编写的开源项目。这个引擎用于客户端和服务器端Web应用程序的JavaScript。
- en: Node.js programming
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js编程
- en: 'Let''s start by running a `node` process. Open the Terminal and type this command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从运行一个`node`进程开始。打开终端并输入以下命令：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will start a new `node` process. We can write normal JavaScript here.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个新的`node`进程。我们在这里可以编写正常的JavaScript代码。
- en: 'So, for example, we can write in the new Node shell the following JavaScript
    command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以在新的Node shell中编写以下JavaScript命令：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It returns `1` when we type `a` and press enter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们输入`a`并按回车键时，它返回`1`。
- en: We can also run a file with the `.js` extension in a `node` process. Let's create
    a folder called `tutorial` in the root directory with the command `mkdir tutorial`
    and create a file inside it called `tutorial.js`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在`node`进程中运行扩展名为`.js`的文件。让我们在根目录下使用命令`mkdir tutorial`创建一个名为`tutorial`的文件夹，并在其中创建一个名为`tutorial.js`的文件。
- en: 'Now, in the Terminal, let''s go into that directory with the following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在终端中，让我们使用以下命令进入该目录：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We should see something similar to the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下类似的内容：
- en: '![](img/db7d6f63-3df3-4fd9-842e-fc4f6177ef4b.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/db7d6f63-3df3-4fd9-842e-fc4f6177ef4b.png)'
- en: This does not return anything because we haven't written anything for `tutorial.js`
    yet.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还没有为`tutorial.js`编写任何内容，所以它不会返回任何内容。
- en: 'Now, let''s add some code to the `tutorial.js`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们向`tutorial.js`文件中添加一些代码：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, run the file with this command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用以下命令运行文件：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We will see an output that says `Hello World`. This is how we execute files
    in Node.js.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到一个输出显示`Hello World`。这就是我们在Node.js中执行文件的方式。
- en: Other than running on the V8 engine and executing JavaScript codes in a web
    browser, Node.js also provides a server running environment. This is the most
    powerful feature of Node.js. Node.js provides an HTTP module of itself that enables
    a non-blocking HTTP implementation. Let's build a simple web server to understand
    this.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在V8引擎上运行并在浏览器中执行JavaScript代码之外，Node.js还提供了一个服务器运行环境。这是Node.js最强大的功能。Node.js提供了一个自带的HTTP模块，它实现了一个非阻塞的HTTP实现。让我们构建一个简单的Web服务器来理解这一点。
- en: 'On the same file, in `tutorial.js`, overwrite the file with the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一文件`tutorial.js`中，用以下代码覆盖文件：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, the  `var http = require('http');` code requires the HTTP module into our
    application. It means that now we can access the functions defined in the HTTP
    library via the `http` variable. Now we need to create a web server. The preceding
    code tells Node.js to run the web server in the 8080 port. The `function` parameter
    in the `createServer` method takes two arguments, `req` and `res`, which are the
    short form of request and response respectively. The first thing that we need
    to do inside that function is to set the HTTP header. This is basically defining
    what type of response we want from that request. Then, we define what we want
    to get in the response by using `res.send`. Finally, we ask the web server to
    listen to port 8080.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`var http = require('http');`这段代码将HTTP模块引入到我们的应用程序中。这意味着现在我们可以通过`http`变量访问HTTP库中定义的函数。现在我们需要创建一个Web服务器。前面的代码告诉Node.js在8080端口运行Web服务器。`createServer`方法中的`function`参数接受两个参数，分别是`req`和`res`，它们分别是请求和响应的简称。在这个函数内部，我们首先需要做的是设置HTTP头。这基本上是定义我们希望从该请求中获取哪种类型的响应。然后，我们使用`res.send`定义我们希望在响应中获取的内容。最后，我们要求Web服务器监听8080端口。
- en: 'When we run this code with `$ node tutorial.js`, the output looks like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`$ node tutorial.js`运行此代码时，输出看起来像这样：
- en: '![](img/154a4a5f-59e2-4837-b2c7-7962c1eb24ed.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/154a4a5f-59e2-4837-b2c7-7962c1eb24ed.png)'
- en: 'When we type that URL in our browser, we should be able to see this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在浏览器中输入该URL时，我们应该能够看到以下内容：
- en: '![](img/d553340f-ee2f-4961-af8b-28c4b6269826.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d553340f-ee2f-4961-af8b-28c4b6269826.png)'
- en: That's how Node.js works as a server program.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Node.js作为服务器程序的工作方式。
- en: To exit the `node` console, press *Ctrl* *+* *C* twice.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出`node`控制台，请按*Ctrl* *+* *C*两次。
- en: Node.js modules
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js模块
- en: A Node.js module is just a plain JavaScript file that consists of reusable code.
    Every module has its own specific functionality. We can think of it as a library.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js模块只是一个普通的JavaScript文件，它包含可重用的代码。每个模块都有自己的特定功能。我们可以将其视为一个库。
- en: For example, if we want to segregate all our user-related activities in our
    application, we create a module for it, which will handle all the data libraries
    about the users.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想在应用程序中隔离所有与用户相关的活动，我们可以为它创建一个模块，该模块将处理所有关于用户的数据库。
- en: The way we use a module in Node.js is via `require`. The example we just showed
    you about creating a web server is also a Node.js module.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js中使用模块的方式是通过`require`。我们刚才向您展示的创建Web服务器的例子也是一个Node.js模块。
- en: Node.js core modules
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js核心模块
- en: 'There are two types of modules in Node.js. The core modules are the modules
    that are built in Node.js. They come in while we install Node.js. These are also
    called built-in modules. There are a lot of core modules in Node.js:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js中有两种类型的模块。核心模块是在Node.js中构建的模块。在我们安装Node.js时它们就存在了。这些也被称为内置模块。Node.js中有许多核心模块：
- en: Debugger
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试器
- en: Filesystem
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件系统
- en: HTTP
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP
- en: Path
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径
- en: Process
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理
- en: Events
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件
- en: 'If you want to look into more details about each of the core modules, you can
    visit the documentation at:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想详细了解每个核心模块的更多细节，你可以访问以下文档：
- en: '[https://nodejs.org/api/.](https://nodejs.org/api/)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://nodejs.org/api/.](https://nodejs.org/api/)'
- en: Custom modules
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义模块
- en: These are the modules we create ourselves on top of Node.js. Since Node.js has
    a very large ecosystem, there are tons of different modules out there to grab
    for free according to our needs. We can build one ourselves or just use someone
    else's module. This is another aspect in which Node.js is powerful. It gives us
    the flexibility of using the modules from the community or we can build them by
    ourselves.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们自己基于Node.js创建的模块。由于Node.js有一个非常大的生态系统，因此有大量的不同模块可供我们根据需要免费获取。我们可以自己构建一个，或者直接使用别人的模块。这也是Node.js强大之处的一个方面。它为我们提供了使用社区模块或自己构建模块的灵活性。
- en: 'We can view the list of all existing available modules at [https://www.npmjs.com/browse/depended](https://www.npmjs.com/browse/depended):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在[https://www.npmjs.com/browse/depended](https://www.npmjs.com/browse/depended)查看所有现有可用模块的列表：
- en: '![](img/72db803d-bbff-45a8-8283-f529bfecf3a4.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/72db803d-bbff-45a8-8283-f529bfecf3a4.png)'
- en: Introducing Express.js
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Express.js
- en: Express.js is a minimalist server-side web framework for Node.js. It is built
    on top of Node.js to make it easy to manage the Node.js server. The most important
    strength of Express.js is that it makes the routing very, very easy. The robust
    API that it provides is very easy to configure. It is easy to receive requests
    from the frontend and easy to connect to the database. Express.js is also the
    most popular web framework for Node.js. It uses the **Model View Controller**
    (**MVC**) design pattern, which we will be discussing later on in this chapter.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Express.js 是一个用于 Node.js 的极简服务器端网络框架。它建立在 Node.js 之上，以便更容易地管理 Node.js 服务器。Express.js
    最重要的优势是它使路由变得非常简单。它提供的强大 API 非常容易配置。从前端接收请求和连接到数据库都很简单。Express.js 也是 Node.js 最受欢迎的网络框架。它使用
    **模型-视图-控制器**（**MVC**）设计模式，我们将在本章后面讨论。
- en: Installing Express.js
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Express.js
- en: 'We have already covered how to install `node` modules via `npm`. Similarly,
    we can install Express.js via NPM using this command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了如何通过 `npm` 安装 `node` 模块。同样，我们可以使用此命令通过 NPM 安装 Express.js：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is an easy way to install `node` modules. But, while building an application,
    we''re going to need lots of different kinds of modules. We will also want to
    share these modules across our multiple applications. Hence, to make a module
    available globally, we will have to install it globally. For that, `npm` provides
    the option of adding `-g` when installing `node` modules. So, now we can use:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种安装 `node` 模块的简单方法。但是，在构建应用程序时，我们需要很多不同种类的模块。我们还想在多个应用程序之间共享这些模块。因此，为了使模块全局可用，我们必须全局安装它。为此，`npm`
    提供了在安装 `node` 模块时添加 `-g` 选项的功能。所以，现在我们可以使用：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will install Express.js globally, which allows us to use the `express`
    command across multiple applications.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将全局安装 Express.js，这允许我们在多个应用程序中使用 `express` 命令。
- en: Creating an Express.js application
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Express.js 应用程序
- en: Now that we have installed Express.js, let's get started creating an application
    using Express.js.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 Express.js，让我们开始使用 Express.js 创建应用程序。
- en: 'We will name our application `express_app`.  Building an outline of an express
    application is very simple using the `express` command. We can simply use:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将命名我们的应用程序为 `express_app`。使用 `express` 命令构建 express 应用的轮廓非常简单。我们可以简单地使用：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output is as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '![](img/5ed5de2e-8500-4b09-bdeb-7eb0ee523acf.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ed5de2e-8500-4b09-bdeb-7eb0ee523acf.png)'
- en: 'The command creates a lot of files and folders in our application. Let''s have
    a quick look at these:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令会在我们的应用程序中创建大量的文件和文件夹。让我们快速看一下这些：
- en: '`package.json`: This file contains a list of all the `node` packages that we
    have installed in the application and an introduction to the application.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`：此文件包含我们在应用程序中安装的所有 `node` 包的列表以及应用程序的简介。'
- en: '`app.js`: This file is the main entry page for an express application. The
    web server code resides in this file.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.js`：此文件是 express 应用的主入口页面。网络服务器代码位于此文件中。'
- en: '`public`: We can use this folder to insert our assets such as images, stylesheets,
    or custom JavaScript code.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public`：我们可以使用此文件夹来插入我们的资产，例如图片、样式表或自定义 JavaScript 代码。'
- en: '`views`: This folder contains all of our view files that are going to be rendered
    in the browser. It has the main layout file (which contains the basic HTML templating
    for a view file), an `index.jade` file (which extends the layout file and only
    has the content that is changeable or dynamic), and an `error.jade` file (which
    displays when we need to display some sort of error messaging to our frontend).'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views`：此文件夹包含所有将在浏览器中渲染的视图文件。它包含主布局文件（其中包含视图文件的 HTML 模板），一个 `index.jade` 文件（它扩展了布局文件，只包含可变或动态的内容），以及一个
    `error.jade` 文件（当我们需要向前端显示某种错误消息时显示）。'
- en: '`routes`: This folder has a whole list of all the routes that we will be building
    access different pages of the application. We will discuss more on this in further
    sections.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`routes`：此文件夹包含我们将构建的所有路由，以便访问应用程序的不同页面。我们将在后续章节中进一步讨论。'
- en: '`bin`: This folder contains the executable files for Node.js.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`：此文件夹包含 Node.js 的可执行文件。'
- en: 'So, these are the basic things that we need to know. Now, use your favorite
    text editor to work on the application and let''s get started. Now, if we look
    at `package.json`, there are certain packages that we did not install but that
    are listed in the dependencies:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这些都是我们需要了解的基本知识。现在，使用您喜欢的文本编辑器来处理应用程序，让我们开始吧。现在，如果我们查看 `package.json`，会发现某些我们没有安装但列在依赖项中的包：
- en: '![](img/e44f9b6c-a3d5-47be-b601-fb8687b29f77.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e44f9b6c-a3d5-47be-b601-fb8687b29f77.png)'
- en: 'This is because these are the Express.js dependencies for any application.
    This means, when we create an application using the `express` command, it will
    automatically install all the dependencies that it needs. For example, the dependencies
    listed in the preceding `package.json` file do the following things:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为这些是 Express.js 任何应用程序的依赖项。这意味着，当我们使用 `express` 命令创建应用程序时，它将自动安装它需要的所有依赖项。例如，前面
    `package.json` 文件中列出的依赖项执行以下操作：
- en: '**body-parser**: This is used to parse the parameters of the body that we provide
    when making an HTTP request'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**body-parser**：用于解析我们在发起 HTTP 请求时提供的请求体参数'
- en: '**debug**: This is a JavaScript utility package that provides pretty formatting
    to what `console.log` returns'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**debug**：这是一个提供 `console.log` 返回值的格式化工具的 JavaScript 实用程序包'
- en: We can install or remove packages via the `package.json` file as well. Just
    add or remove the name of the package in the `package.json` file to install or
    remove it. Then run `$ npm install`.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过 `package.json` 文件安装或删除包。只需在 `package.json` 文件中添加或删除包的名称，然后运行 `$ npm install`。
- en: '**express**: This is a Node.js JavaScript framework and is used for building
    scalable web applications on top of Node.js.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**express**：这是一个 Node.js JavaScript 框架，用于在 Node.js 上构建可扩展的 Web 应用程序。'
- en: '**jade**: As mentioned previously, this is the default templating engine for
    Node.js. We should have seen a warning while creating the application with the `express`
    command, saying The default view engine will not be jade in future releases. This
    is because `jade` is going to be replaced by `pug`; `jade` was copyrighted by
    a company and the name was later changed to `pug`.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jade**：如前所述，这是 Node.js 的默认模板引擎。我们应该在用 `express` 命令创建应用程序时看到一条警告信息，说明在未来的版本中默认视图引擎将不再是
    jade。这是因为 `jade` 被一家公司拥有版权，后来将其名称更改为 `pug`。'
- en: 'The express generator uses the outdated `jade` templating engine. To change
    the templating engine, run the following steps:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Express 生成器使用过时的 `jade` 模板引擎。要更改模板引擎，请按照以下步骤操作：
- en: 'In the `package.json` file, remove the `"jade": "~1.11.0"`, line and run:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在 `package.json` 文件中，删除 `"jade": "~1.11.0"` 行并运行：'
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, to install the new `pug` templating engine, run:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，要安装新的 `pug` 模板引擎，请运行：
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we look into the `package.json` file, we should see a line similar to this:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们查看 `package.json` 文件，我们应该看到一条类似以下内容的行：
- en: '`"pug": "^2.0.0-rc.4"`.'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`"pug": "^2.0.0-rc.4"`。'
- en: 'Rename the files in the `views` folder:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重命名 `views` 文件夹中的文件：
- en: '`error.jade` to `error.pug`'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `error.jade` 重命名为 `error.pug`
- en: '`index.jade` to `index.pug`'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `index.jade` 重命名为 `index.pug`
- en: '`layout.jade` to `layout.pug`'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `layout.jade` 重命名为 `layout.pug`
- en: 'Finally, in `app.js`, remove the line which says:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 `app.js` 中，删除显示以下内容的行：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the following line to use `pug` as the view engine:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下行以使用 `pug` 作为视图引擎：
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**morgan**: This is middleware for logging the HTTP requests'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**morgan**：这是一个用于记录 HTTP 请求的中间件'
- en: '**serve-favicon**: This is for displaying a favicon in the browser to identify
    our application'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**serve-favicon**：这是在浏览器中显示 favicon 以识别我们的应用程序'
- en: It's not necessary to have all these dependencies for our application. They
    come from installing Express.js. Just dig around for what you want and then add
    or remove the packages as per your application needs.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用程序来说，没有必要拥有所有这些依赖项。它们来自安装 Express.js。只需查找你想要的，然后根据应用程序的需求添加或删除包。
- en: 'For now, we will leave it as it is. The `express` command just adds the dependencies
    to our `package.json` file and creates a skeleton for our application. In order
    to actually install these modules and packages listed in the `package.json` file,
    we need to run:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将保持原样。`express` 命令只是将依赖项添加到我们的 `package.json` 文件中，并为我们的应用程序创建一个骨架。为了实际安装
    `package.json` 文件中列出的这些模块和包，我们需要运行：
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This command will actually install all the dependencies. Now, if we look into
    the folder structure, we can see a new folder is being added called `node_modules`.
    This is the place where all of the packages that we installed within that application
    reside.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令实际上会安装所有依赖项。现在，如果我们查看文件夹结构，我们可以看到一个名为 `node_modules` 的新文件夹被添加。这就是我们在这个应用程序中安装的所有包的存放地。
- en: 'Now, the first thing that we want to do is to set up a web server. For that,
    add the following line in the `app.js` file:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们首先想要做的是设置一个 Web 服务器。为此，在 `app.js` 文件中添加以下行：
- en: '[PRE14]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, run the following command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行以下命令：
- en: '[PRE15]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will spin up our application server. Now, when we go to the `http://localhost:3000/` URL,
    we should be able to get this:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动我们的应用程序服务器。现在，当我们访问 `http://localhost:3000/` URL 时，我们应该能够得到以下内容：
- en: '![](img/e5dbd016-ed59-4dbf-8aeb-ba560d247a0b.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e5dbd016-ed59-4dbf-8aeb-ba560d247a0b.png)'
- en: That's it. We have successfully created an Express application.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些。我们已经成功创建了一个 Express 应用程序。
- en: Express router
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Express 路由器
- en: 'Let''s move on to the Express router. As mentioned earlier in the chapter,
    one of the most important aspects of Express.js is that it provides easy routing
    for the application. Routing is the definition of the URL for an application.
    If we look at `app.js`, we will see a section such as:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到 Express 路由器。如本章前面所述，Express.js 最重要的一点是它为应用程序提供了简单的路由。路由是应用程序 URL 的定义。如果我们查看
    `app.js`，我们会看到一个类似以下的部分：
- en: '[PRE16]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This means that when we access a web page, and when a request is made to the
    home page, the express router redirects it to a router called `index.` Now, look
    at `routes/index.js`, which has the following code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当我们访问一个网页，并且当对主页发起请求时，Express 路由器将其重定向到名为 `index` 的路由器。现在，看看 `routes/index.js`
    文件，它包含以下代码：
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This means that when we access the home page, it renders a page called `index` that
    resides inside `views/index.pug` and passes a parameter for the `title` to be
    displayed on the page. Now, look at the `index.pug` file in the views folder,
    which has the following code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当我们访问主页时，它会渲染一个名为 `index` 的页面，该页面位于 `views/index.pug` 内，并将要显示在页面上的 `title`
    参数传递过去。现在，看看位于视图文件夹中的 `index.pug` 文件，它包含以下代码：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This means it uses the layout from the `layout.pug` file and displays an `h1`
    title as well as a paragraph that renders the title that we passed from the route
    file. Hence, the output is as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着它使用了 `layout.pug` 文件中的布局，并显示了一个 `h1` 标题以及一个渲染我们从前端文件传递过来的标题的段落。因此，输出如下：
- en: '![](img/79f3e138-a5bb-4c1b-81e3-bde7992002d1.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/79f3e138-a5bb-4c1b-81e3-bde7992002d1.png)'
- en: Pretty simple and straightforward, right?
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单直接，对吧？
- en: Request object
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求对象
- en: 'A request object is an object that contains the information about the HTTP
    request. The properties of the request are:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请求对象是一个包含 HTTP 请求信息的对象。请求的属性包括：
- en: '**query: **This contains information about the parsed query strings. Accessed
    via `req.query`.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**query:** 这包含有关解析查询字符串的信息。通过 `req.query` 访问。'
- en: '**params: **This contains information about the parsed routing parameter. Accessed
    via `req.params`.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**params:** 这包含有关解析路由参数的信息。通过 `req.params` 访问。'
- en: '**body: **This contains information about the parsed request body. Accessed
    via `req.body`.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**body:** 这包含有关解析请求体的信息。通过 `req.body` 访问。'
- en: Response object
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应对象
- en: After receiving the `request` on `req` variable, the `res` object is something
    that we send back as the `response` we want.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `req` 变量上接收到 `request` 之后，`res` 对象是我们想要发送回的 `response`。
- en: 'The properties of the response are:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 响应对象的属性包括：
- en: '**send: **This is used for sending a response to the views. Accessed via `res.send`.
    It takes two parameters, the status code, and the response body.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**send:** 这用于向视图发送响应。通过 `res.send` 访问。它接受两个参数，状态码和响应体。'
- en: '**status: **If we want to send the success or failure of the application, `res.status`
    is used. This is the HTTP status code.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**status:** 如果我们想要发送应用程序的成功或失败，使用 `res.status`。这是 HTTP 状态码。'
- en: '**redirect: **`res.redirect` is used when we want to redirect to a certain
    page rather than sending responses in other formats.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**redirect:** 当我们想要重定向到某个页面而不是以其他格式发送响应时，使用 `res.redirect`。'
- en: Introduction to MVC
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC 简介
- en: The MVC model is essential when building applications regardless of any programming
    languages. The MVC architecture makes it easy to organize our application's structure
    and separate out logic parts and view parts. We can incorporate this MVC structure
    at any time, even if we have completed half of our application. The best time
    to implement it is at the start of any application.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: MVC 模型在构建应用程序时至关重要，无论使用哪种编程语言。MVC 架构使得组织我们应用程序的结构和分离逻辑部分和视图部分变得容易。我们可以在任何时间点整合这个
    MVC 结构，即使我们已经完成了应用程序的一半。最佳实施时间是任何应用程序的开始。
- en: 'As the name suggests, there are three parts to it:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，它有三个部分：
- en: '**Model: **All of the application''s business logic resides under these `models`.
    These deal with the database. They handle all the logic parts of the application.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Model:** 所有应用程序的业务逻辑都位于这些 `models` 之下。它们处理数据库。它们处理应用程序的所有逻辑部分。'
- en: '**View: **Everything that the browser renders—what users see—is handled by
    these view files. It deals with whatever we send to the client.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图：**浏览器渲染的任何内容——用户看到的内容——都由这些视图文件处理。它处理我们发送给客户端的任何内容。'
- en: '**Controller: **`Controllers` basically connect these `models` and views. It
    is responsible to take the logical calculations done in `models` to the `views`
    sections:'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器：**`Controllers`基本上连接这些`models`和视图。它负责将`models`中完成的逻辑计算传递到`views`部分：'
- en: '![](img/ed9038d2-b132-4c49-abd4-ca54af97f786.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ed9038d2-b132-4c49-abd4-ca54af97f786.png)'
- en: It is not necessary to implement the MVC platform in the application we build.
    The JavaScript is pattern agnostic, which means we can create our own folder structure.
    Unlike other programming languages, we can choose whatever structure is easiest
    for us.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们构建的应用程序中实现MVC平台并不是必需的。JavaScript是无模式的，这意味着我们可以创建自己的文件夹结构。与其他编程语言不同，我们可以选择对我们来说最容易的结构。
- en: Why MVC?
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用MVC？
- en: 'There are a lot of benefits that are added when we implement an MVC architecture
    into our application:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将MVC架构实现到我们的应用程序中时，会添加很多好处：
- en: Clear segregation of business logic and views. This separation allows us to
    reuse the business logic throughout the whole application.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 商业逻辑和视图的清晰分离。这种分离使我们能够在整个应用程序中重用业务逻辑。
- en: The development process becomes faster. This is obvious since the parts are
    clearly separated out. We can just add our views to our views folder and add logic
    inside the `models` folder.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发过程变得更快。这一点很明显，因为各个部分已经清晰地分离出来。我们只需将视图添加到视图文件夹中，并在`models`文件夹中添加逻辑。
- en: It is easy to modify existing code. This is very handy when multiple developers
    are working on the same project. Anyone can pick up the application from anywhere
    and start making changes to it.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改现有代码很容易。当多个开发者共同参与同一项目时，这一点非常方便。任何人都可以从任何地方开始修改应用程序。
- en: Changing the folder structure to incorporate MVC
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将文件夹结构修改为包含MVC
- en: Now that we know enough about MVC, let's modify the folder structure of the
    application we created, called `express_app`. First of all, we need to create
    these three folders in the root directory. There is already a views folders so
    we can skip that. Let's go ahead and create `models` and `controllers` folders.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经对MVC有了足够的了解，让我们修改一下我们创建的应用程序的文件夹结构，该应用程序名为`express_app`。首先，我们需要在根目录中创建这三个文件夹。已经有一个`views`文件夹，所以我们可以跳过它。让我们继续创建`models`和`controllers`文件夹。
- en: After that, in our `app.js`, we need to include our controller files. To do
    that, we first have to introduce a new package called filesystem. This module
    makes it easy to perform operations related to files, such as reading/writing
    to the file.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，在我们的`app.js`中，我们需要包含我们的控制器文件。为此，我们首先需要引入一个新的包，称为filesystem。这个模块使得执行与文件相关的操作变得容易，例如读取/写入文件。
- en: 'So, to add this package to our application, run:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要将这个包添加到我们的应用程序中，请运行：
- en: '[PRE19]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This `--save` argument is used when we want a `node` module to only be installed
    within our application. Also, after installation, this package will be automatically
    included in our `package.json`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`--save`参数用于当我们想要一个`node`模块只在我们应用程序中安装时。此外，安装后，这个包将自动包含在我们的`package.json`中。
- en: '![](img/e78d5486-a74d-46e8-8cba-51a0992af1e4.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e78d5486-a74d-46e8-8cba-51a0992af1e4.png)'
- en: 'Now, we will need to require this module and use it to include all of our files
    that reside in the controller. For that, add these lines of code in our `app.js`.
    Make sure you add these lines before our web server running code:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要引入这个模块并使用它来包含所有位于控制器中的文件。为此，在`app.js`中添加以下代码行。确保在运行我们的网络服务器代码之前添加这些行：
- en: '[PRE20]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s move ahead with adding a route to our controller. Let''s create a folder
    in the root of the application called `controllers` and add an `index.js` file
    to the `controllers` folder and paste the following code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加一个路由到我们的控制器。让我们在应用程序的根目录中创建一个名为`controllers`的文件夹，并在`controllers`文件夹中添加一个`index.js`文件，并将以下代码粘贴进去：
- en: '[PRE21]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, all of our routes will be handled by the controller files, which means
    we don''t need the codes in `app.js` that control the routing. Hence, we can remove
    these lines from the file:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有路由都将由控制器文件处理，这意味着我们不需要在`app.js`中控制路由的代码。因此，我们可以从文件中删除这些行：
- en: '[PRE22]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Actually, we don't need that `routes` folder any longer. Let's also remove the
    `routes` folder.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们不再需要那个`routes`文件夹。让我们也删除`routes`文件夹。
- en: 'Similarly, let''s add a new route that controls all the user-related operations.
    For that, add a new file to the `controllers` folder called `users.js` and paste
    the following code inside it:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，让我们添加一个新的路由来控制所有与用户相关的操作。为此，在 `controllers` 文件夹中添加一个名为 `users.js` 的新文件，并将以下代码粘贴到其中：
- en: '[PRE23]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, let''s restart our node server for the app with:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令重新启动我们的应用节点服务器：
- en: '[PRE24]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'With this, when we visit `http://localhost:3000/users`, we will be able to
    see the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，当我们访问 `http://localhost:3000/users` 时，我们将能够看到以下内容：
- en: '![](img/f1e95c69-0473-449b-952c-2451add9a98e.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f1e95c69-0473-449b-952c-2451add9a98e.png)'
- en: We have successfully set up a `controllers` and `views` part of the MVC architecture.
    We will cover more on `models` part in further sections.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功设置了 MVC 架构中的 `controllers` 和 `views` 部分。我们将在后续章节中进一步介绍 `models` 部分。
- en: In the previous chapter, we talked about GitHub and how to use it for making
    code history by making small commits. Don't forget to set up a repo and continuously
    push code to GitHub.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了 GitHub 以及如何通过进行小提交来使用它来记录代码历史。不要忘记设置仓库并持续将代码推送到 GitHub。
- en: The npm packages are stored in the `node_modules` directory, which we should
    not push to GitHub. To ignore such files, we can add a file called `.gitignore`
    and specify the files we do not want to push to GitHub.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: npm 包存储在 `node_modules` 目录中，我们不应将其推送到 GitHub。为了忽略此类文件，我们可以添加一个名为 `.gitignore`
    的文件，并指定我们不想推送到 GitHub 的文件。
- en: 'Let''s create a file within our application as well, called `.gitignore`, and
    add the following content:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的应用程序中创建一个名为 `.gitignore` 的文件，并添加以下内容：
- en: '[PRE25]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This way, when we install any packages, it will not show up as the code difference
    while making commits to GitHub.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，当我们安装任何包时，它不会在向 GitHub 提交代码时显示为代码差异。
- en: We are having to restart our `node` server every time we make some changes to
    our code which is very time-consuming. To ease this process, `node` provides a
    package called `nodemon`, which automatically restarts the server every time we
    make changes to the code.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们对代码进行一些更改时，我们都需要重新启动我们的 `node` 服务器，这非常耗时。为了简化这个过程，`node` 提供了一个名为 `nodemon`
    的包，它会在我们更改代码时自动重新启动服务器。
- en: 'To install the package, run:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装该包，请运行：
- en: '[PRE26]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To run the server, use the following command:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器，请使用以下命令：
- en: '[PRE27]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: File naming conventions
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件命名规范
- en: When developing an application, we need to follow a certain convention to name
    the files. As we go on building the application, we will have a whole lot of files,
    which can get messy. MVC allows for having parallel naming conventions across
    different folders, which can lead to the same filenames inside different folders.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发应用程序时，我们需要遵循一定的命名约定来命名文件。随着我们继续构建应用程序，我们将拥有大量的文件，这可能会变得混乱。MVC 允许在不同的文件夹之间有并行的命名规范，这可能导致不同文件夹中存在相同的文件名。
- en: We can work on such filenames as well if that is what we find to be easy and
    maintainable. Otherwise, we can just append the type of filename to each file, as
     in the following example; for a controller file to handle the user-related activities,
    we can leave it as `controllers/users.js`, or we can rename it to `controllers/users_controller.js`.
    We will be using `controllers/users` for our application.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们认为这样做既简单又易于维护，我们也可以处理这样的文件名。否则，我们只需将文件类型追加到每个文件中，例如，在以下示例中；对于处理用户相关活动的控制器文件，我们可以将其保留为
    `controllers/users.js`，或者我们可以将其重命名为 `controllers/users_controller.js`。我们将为我们的应用程序使用
    `controllers/users`。
- en: 'The same goes for `models`, `services`, or any other folders that need to be
    shared among different areas throughout the application. For this application,
    we will be using the following naming convention:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `models`、`services` 或任何需要在应用程序的不同区域之间共享的文件夹也是如此。对于这个应用程序，我们将使用以下命名约定：
- en: '![](img/2ecb07df-3666-4060-b1af-b197789c09df.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2ecb07df-3666-4060-b1af-b197789c09df.png)'
- en: Remember, there is no official naming convention in Node.js. We can definitely
    customize the way we find simpler. We will discuss more about creating `models`
    in further chapters. That will require us to create a connection with Mongo, which
    we will describe in further chapters.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，Node.js 中没有官方的命名规范。我们绝对可以自定义我们找到的更简单的方式。我们将在后续章节中进一步讨论创建 `models` 的问题。这需要我们与
    Mongo 建立连接，我们将在后续章节中描述。
- en: Creating view files for the Express.js application
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Express.js 应用程序创建视图文件
- en: 'We learned about how to create `controllers` in the last section. In this section,
    we will talk about how to add and customize view files. If you remember, we have
    this code in `controllers/users.js`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何创建 `controllers`。在本节中，我们将讨论如何添加和自定义视图文件。如果您还记得，我们在 `controllers/users.js`
    中有这段代码：
- en: '[PRE28]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s change a line that renders the `index` file to this:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更改渲染 `index` 文件的行，改为以下内容：
- en: '[PRE29]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This means that the controller wants to load the `users` file, which is in the
    `views` folder. Let's go ahead and create a `users.pug` file in the `views` folder.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着控制器想要加载 `views` 文件夹中的 `users` 文件。让我们继续在 `views` 文件夹中创建一个 `users.pug` 文件。
- en: 'After creating the file, paste in the following code; this is the same code
    as in the `index.pug` file in our `views` folder:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文件后，粘贴以下代码；这与我们在 `views` 文件夹中的 `index.pug` 文件中的代码相同：
- en: '[PRE30]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, if we used `nodemon`, we don''t have to restart our server; just reload
    the browser with the location `http://localhost:3000/users`. This should render
     the following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们使用了 `nodemon`，我们不需要重新启动服务器；只需用位置 `http://localhost:3000/users` 重新加载浏览器。这应该会渲染以下内容：
- en: '![](img/bd386ef4-752b-4a54-9206-abf4b85a3bd4.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bd386ef4-752b-4a54-9206-abf4b85a3bd4.png)'
- en: Now that we know how to connect `controllers` and `views` and how to create
    view files, let's get a little bit more information on the code of the file.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道了如何连接 `controllers` 和 `views` 以及如何创建视图文件，让我们来获取一些关于文件代码的更多信息。
- en: 'The first line says:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行表示：
- en: '[PRE31]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'What this means is that it is asking to extend the views that are already in
    the `layout.pug` file. Now, look at `layout.pug`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着它要求扩展 `layout.pug` 文件中已经存在的视图。现在，看看 `layout.pug`：
- en: '[PRE32]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This is a simple HTML file with `doctype`, `HTML`, `head`, and `body` tags.
    Inside the `body` tag, it says to block content, which means it yields the content
    from any other files that are written under this `block content` statement. If
    we look at `users.jade`, we can see that the content is written under the block
    content statement. Now, this is very useful because we don't have to repeat the
    entire HTML tags in every view file that we create.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的 HTML 文件，包含 `doctype`、`HTML`、`head` 和 `body` 标签。在 `body` 标签内，它指示阻塞内容，这意味着它从任何其他文件中产生内容，这些文件都写在
    `block content` 语句之下。如果我们查看 `users.jade`，我们可以看到内容是写在 `block content` 语句之下的。现在，这非常实用，因为我们不需要在创建的每个视图文件中重复整个
    HTML 标签。
- en: 'Also, if we look at `users.js` inside the controller, there''s a line that
    says:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们查看控制器中的 `users.js`，有一行写着：
- en: '[PRE33]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The render method has two parameters: the view that it wants to load and the
    variables that it wants to pass to that view. In this example, `Users` is passed
    to the title variable. And in `users.jade` in the `views` folder, we have:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染方法有两个参数：它想要加载的视图以及想要传递给该视图的变量。在这个例子中，`Users` 被传递给标题变量。在 `views` 文件夹中的 `users.jade`
    文件里，我们有：
- en: '[PRE34]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This renders that variable inside both the `h1` tag and the `p` tag. This way,
    we can pass any content that we want from `controllers` to views. Let''s add a
    new variable called `description` to the `render` method in the `users.js` controller:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在 `h1` 标签和 `p` 标签内渲染该变量。这样，我们可以从 `controllers` 向视图传递任何我们想要的内容。让我们在 `users.js`
    控制器的 `render` 方法中添加一个新的变量 `description`：
- en: '[PRE35]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Also, let''s make a place where this would be rendered in `users.pug`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，让我们在 `users.pug` 中创建一个渲染该内容的区域：
- en: '[PRE36]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If we reload the browser, we''ll get:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们重新加载浏览器，我们会得到：
- en: '![](img/cbaf19b7-8457-426c-b195-65b17ac8dd2b.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cbaf19b7-8457-426c-b195-65b17ac8dd2b.png)'
- en: That's how we create the views for an express application. Now, go ahead and
    add views as you wish for our application.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们在 Express 应用程序中创建视图的方法。现在，继续添加您希望为我们的应用程序添加的视图。
- en: Always make sure that you commit and push the changes into GitHub. The smaller
    the commit, the more maintainable the code is.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 总是要确保将更改提交并推送到 GitHub。提交越小，代码的可维护性就越高。
- en: Summary
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned what Node.js is and what Express.js is. We learned
    how to create an application using Express.js and learned about the MVC architecture.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了 Node.js 是什么以及 Express.js 是什么。我们学习了如何使用 Express.js 创建应用程序，并了解了 MVC
    架构。
- en: In the next chapter, we will talk about MongoDB and its queries. We will also
    talk about using Mongoose for fast development and Mongoose queries and validations.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论 MongoDB 及其查询。我们还将讨论使用 Mongoose 进行快速开发和 Mongoose 查询和验证。
