- en: Chapter 5. Data and Cache
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。数据和缓存
- en: Data is one of your most important assets in your application. Actually, it
    should be the fundamental asset. You might run your application anywhere, but
    without your data, it is pointless. By data, I mean the information that your
    application manipulates, generated or not by your end users. If your application
    can't work without a database, that database has an important piece of data that
    you must preserve.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是您应用程序中最重要的资产之一。实际上，它应该是基本资产。您可以在任何地方运行应用程序，但没有数据，它是没有意义的。通过数据，我指的是您的应用程序操作的信息，无论是由最终用户生成还是不生成。如果您的应用程序没有数据库无法运行，那么该数据库包含了您必须保留的重要数据。
- en: Application data is very important. In web applications, users access it using
    the Internet and their data is stored on the server side, this importance increases.
    As your user base grows and the total size of your data increases, it becomes
    even more important to plan how your data is stored and how it's used.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序数据非常重要。在Web应用程序中，用户使用互联网访问数据，并且他们的数据存储在服务器端，这增加了重要性。随着用户群体的增长和数据总量的增加，计划数据存储方式以及其使用方式变得更加重要。
- en: And don't forget to have a backup plan. You wouldn't want to lose your data
    and have no way to roll back, even if the rollback means going one week back in
    time. Your users might accept losing some data (1 week), but will definitely not
    accept losing everything.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记制定备份计划。您不希望丢失数据并且无法回滚，即使回滚意味着时间倒退一周。您的用户可能会接受丢失一些数据（1周），但绝对不会接受全部丢失。
- en: 'Let''s take a look at data storage by looking at some important topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过查看一些重要主题来了解数据存储：
- en: Excessive I/O
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过多的I/O
- en: Database management systems
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库管理系统
- en: Caching data and asynchronous caching
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存数据和异步缓存
- en: Clustering data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据集群
- en: Accessing data
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问数据
- en: Data storage
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据存储
- en: There are many ways of storing data. It depends on what type of data you have
    and how big it can become. If you just need to store a simple key/value pair,
    you can use a file with the format of your choice (for example, an INI or a JSON
    file). If that key/value pair grows to thousands or millions, you probably won't
    want to keep it there. You need to think about your data and choose the best possible
    storage for it, at least from your viewpoint.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 存储数据的方式有很多种。这取决于您拥有的数据类型以及它可能变得有多大。如果您只需要存储简单的键/值对，您可以使用您选择的格式的文件（例如INI或JSON文件）。如果这些键/值对增长到成千上万，您可能不希望将其保留在那里。您需要考虑您的数据，并选择从您的角度来看最佳的存储方式。
- en: If you have other applications, you might try to choose the same data storage
    to all or some of those applications. This is actually not a bad decision. Choosing
    the second best tool and trying to use just one or two tools for a couple of applications
    greatly improves your chances of gaining knowledge about that subset, instead
    of using the best tool for every application and ending up with many tools and
    little knowledge about each one.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有其他应用程序，您可以尝试为所有或其中一些应用程序选择相同的数据存储。这实际上不是一个坏决定。选择第二好的工具，并尝试仅使用一两个工具来处理一些应用程序，大大提高了您对该子集的了解的机会，而不是为每个应用程序使用最好的工具，最终拥有许多工具，对每个工具的了解很少。
- en: Excessive I/O
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过多的I/O
- en: When using a custom solution, we need to carefully plan how we store and access
    our data, especially when and how many times we do it. Your host has a disk throughput
    limit and you wouldn't want to reach it. Also, you'll certainly not want to read
    your data from the disk every time you need it. It can work during your local
    tests, but if your application is targeted to thousands of users, it will break
    and you might start receiving `EBUSY` or `EMFILE` errors.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用自定义解决方案时，我们需要仔细规划如何存储和访问我们的数据，特别是何时以及多少次。您的主机有磁盘吞吐量限制，您不希望达到该限制。此外，您肯定不希望每次需要数据时都从磁盘读取。这在本地测试期间可能有效，但如果您的应用程序面向数千用户，它将崩溃，您可能会开始收到“EBUSY”或“EMFILE”错误。
- en: One of the strategies is to avoid excessive I/O to just read it at start, manipulate
    it in the memory, and flush the data to disk from time to time. Data can be stored
    in a variety of formats, **JSON** being the most famous and used as of now. This
    has the disadvantage of forcing your application to implement a single channel
    to read and write to the file or else you'll get corrupted data sooner or later.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一种策略是避免过多的I/O，只需在开始时读取数据，将其在内存中操作，然后不时地将数据刷新到磁盘上。数据可以以各种格式存储，**JSON**目前是最著名和最常用的格式。这有一个缺点，即强制您的应用程序实现一个单一通道来读取和写入文件，否则您迟早会得到损坏的数据。
- en: 'Instead of creating your custom data storage, use databases or other data model
    servers. Leave data storage to professionals and focus on your applications. Some
    advantages of this are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 与其创建自定义数据存储，不如使用数据库或其他数据模型服务器。将数据存储留给专业人员，专注于您的应用程序。这样做的一些优势如下：
- en: Data storage does not need to be maintained
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据存储不需要维护。
- en: Database servers are optimized for high-performance scenarios
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库服务器针对高性能场景进行了优化
- en: Database servers normally support having more than one machine holding the data,
    allowing your application to scale in size as you need it
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库服务器通常支持多台机器持有数据，允许您的应用程序按需扩展大小
- en: It all depends on the system you choose. It's better to take your time and pick
    a good one before you start. I would focus on scalability and consistency. Speed
    is something you can't measure, and it varies from application to application
    and from use case to use case.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切取决于您选择的系统。最好在开始之前花时间选择一个好的系统。我会专注于可扩展性和一致性。速度是无法衡量的，它因应用程序和用例而异。
- en: Database management systems
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库管理系统
- en: 'If you choose a **database management system** (**DBMS**), it''s very important
    that you be comfortable with it. Don''t put a server that you''re uncomfortable
    with in production, as you''ll definitely regret it. When using a DBMS in production,
    you need to be comfortable with:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择了**数据库管理系统**（**DBMS**），非常重要的是你要对它感到舒适。不要将你不熟悉的服务器投入生产，因为你肯定会后悔的。在生产中使用DBMS时，你需要对以下内容感到舒适：
- en: '**Management**: It''s very important that you be able to replicate your application
    scenario to a new host without thinking too much about it. You should know how
    to initialize your storage and manage access. Look for visual interfaces (such
    as desktop and web) and avoid managing only through a console; you''ll make more
    mistakes in a console as it''s harder for complex tasks. Visual interfaces usually
    have automation tools and can help you avoid syntax errors.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理**：非常重要的是，你能够将你的应用场景复制到一个新的主机上，而不用太多考虑。你应该知道如何初始化你的存储并管理访问。寻找可视化界面（如桌面和Web），避免仅通过控制台进行管理；在控制台上会更容易出错，因为对于复杂的任务来说更难。可视化界面通常具有自动化工具，可以帮助你避免语法错误。'
- en: '**Security**: Be careful about default permissions, especially localhost permissions,
    as they''re usually set as permissive and give full control over the data. You
    don''t want to lose data, right?'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：要小心默认权限，特别是本地主机权限，因为它们通常被设置为宽松，可以完全控制数据。你不想丢失数据，对吧？'
- en: '**Backups**: It''s critical that you have a scheduled and automated plan and
    that you know how to roll back to a backup. You should run trials on another host.
    You wouldn''t want to roll back just to find that your backups are corrupted.
    Install a cron job (either locally or remotely), export it from time to time,
    and try it out. I personally prefer to have one or two backups that work rather
    than have 10 that don''t.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**备份**：非常重要的是你要有一个定期和自动化的计划，并且知道如何回滚到备份。你应该在另一个主机上进行试验。你不想回滚后发现你的备份已损坏。安装一个cron作业（可以是本地或远程），定期导出并进行测试。我个人更喜欢有一个或两个可用的备份，而不是有10个不可用的备份。'
- en: '**Structure**: Knowing how you can organize and correlate your data for better
    storage and faster access is mandatory. You definitely don''t want to make changes
    later.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构**：知道如何组织和关联你的数据以获得更好的存储和更快的访问是必不可少的。你绝对不想以后再做改变。'
- en: The data structure you choose is directly related to your DBMS and your application's
    performance. Make a sketch of your data and see how your data entities relate
    with each other. It's quite common to have several tables in your database. After
    all, that's one of the reasons you use a database in the first place.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你选择的数据结构与你的DBMS和应用程序的性能直接相关。绘制你的数据草图，看看你的数据实体是如何相互关联的。在你的数据库中拥有几个表是非常普遍的。毕竟，这是你首先使用数据库的原因之一。
- en: What you usually don't think about is that you probably have a single table,
    maybe a history table or similar, that over time will represent more than 90 percent
    of your database space usage. It is critical that you optimize that table and
    decide whether there are columns you don't need or you can move to another table.
    You can thank me later!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常没有考虑到的是，你可能有一个单独的表，也许是一个历史表或类似的表，随着时间的推移，它将占据超过90％的数据库空间。优化该表并决定是否有不需要的列或者可以移动到另一个表是至关重要的。以后你会感谢我的！
- en: Even after optimizing that table, you won't be able to stop its growth. Do you
    really need to have a lifetime history or can you export data monthly or yearly
    to another format and wipe it from the database? Having a database that can grow
    and even expand to multiple servers is good, but that isn't a synonym for performance.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 即使优化了该表，你也无法阻止它的增长。你真的需要有一个终身历史记录吗，还是可以将数据每月或每年导出到另一种格式，并从数据库中清除？拥有一个可以增长甚至扩展到多个服务器的数据库是好的，但这并不意味着性能。
- en: With respect to this matter, analyze what you might value the most. Is it integrity?
    Do you need extra security? Do you plan on splitting the database across different
    servers, as MongoDB is able to? Do you prefer a mature server that has been proven
    to be stable or will you opt for a new technology? As I said before, try the second
    best choice. You'll probably be able to use it more often and avoid getting a
    lot of different technologies that will be harder to maintain.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 就这个问题而言，分析一下你可能最看重的是什么。是完整性吗？你需要额外的安全性吗？你是否计划将数据库分布到不同的服务器上，就像MongoDB一样？你更喜欢一个经过验证稳定的成熟服务器，还是选择一个新技术？就像我之前说的，尝试第二个最佳选择。你可能会更频繁地使用它，避免使用很多不同的技术，这样会更难维护。
- en: Your data should be structured by now. For example, if you're creating a calendar
    application, you probably have entities such as users, calendars, and events.
    After creating the basic structure, you'll probably realize that you need more
    structures to relate calendars with users (maybe access permissions) and users
    with events (maybe participants). After a couple of development iterations, you'll
    probably have more.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你的数据现在应该已经被结构化了。例如，如果你正在创建一个日历应用程序，你可能有用户、日历和事件等实体。在创建基本结构之后，你可能会意识到你需要更多的结构来关联日历和用户（也许是访问权限），以及用户和事件（也许是参与者）。经过几次开发迭代后，你可能会有更多的结构。
- en: Your structures will grow and your tables will start getting more columns. You'll
    realize that in this case, your bottleneck table is the one that holds events.
    Hopefully, it will not be too late to optimize it and remove some columns that
    are rarely used and can be moved to another table. When there's no space left
    to reduce, you have to think about other options.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你的结构会增长，你的表会开始增加更多的列。你会意识到，在这种情况下，你的瓶颈表是保存事件的表。希望你能及时优化它，删除一些很少使用的列，并将其移动到另一个表中。当没有空间可以减少时，你必须考虑其他选项。
- en: Caching data
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存数据
- en: Caching becomes relevant when a piece of information is requested too often
    and its value will not change, for example, historic values. It's a good method
    of improving performance if these values require some complexity and manipulation
    in the database. Even if they're not historic values and can change, sometimes
    caching is not that bad, at least for a couple of minutes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当某个信息被频繁请求且其值不会改变时，例如历史值时，缓存变得相关。如果这些值在数据库中需要一些复杂性和操作，那么缓存是提高性能的好方法。即使它们不是历史值并且可能会改变，有时缓存也不是那么糟糕，至少可以持续几分钟。
- en: In complex systems, you may find cache as the second level of abstraction between
    the application and the database. In such cases, bidirectional updates happen;
    that is, data is fetched to the cache and when changed by some user action, the
    cache data is updated and then the database is also updated. This is faster than
    clearing the cache and forcing a new request to the database to fetch the data
    that we already know. You may find this in basic applications, for example, in
    session data.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在复杂系统中，你可能会发现缓存是应用程序和数据库之间的第二层抽象。在这种情况下，双向更新会发生；也就是说，数据被获取到缓存中，当被某个用户操作更改时，缓存数据会被更新，然后数据库也会被更新。这比清除缓存并强制向数据库发出新请求来获取我们已经知道的数据要快。你可能会在基本应用程序中发现这一点，例如在会话数据中。
- en: Some databases can perform this caching, but others don't, and you cannot rely
    on them to do it. Also, in other cases, they can't cache because you need to manipulate
    the data. In some cases you need to address caching to another application or
    another key/value service that you can use to save values and use them for a while.
    Redis can be used as a caching service. It supports some nice features, such as
    complex structures, transactions, and time-to-live keys.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一些数据库可以执行这种缓存，但其他数据库不行，你不能依赖它们来执行。此外，在其他情况下，它们无法缓存，因为你需要操作数据。在某些情况下，你需要将缓存地址到另一个应用程序或另一个键/值服务，你可以用它来保存值并在一段时间内使用。Redis可以用作缓存服务。它支持一些不错的功能，比如复杂结构、事务和生存时间键。
- en: 'Your cache logic should be something similar to this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你的缓存逻辑应该类似于这样：
- en: '![Caching data](img/4183_05_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![Caching data](img/4183_05_01.jpg)'
- en: This logic can be used in a variety of ways. You can use a cache in memory,
    getting the fastest cache possible for small sets. If you know that your cached
    data may exceed your available memory, you can use files. This happens if, for
    example, you generate image or document thumbnails. You can cache them, and probably,
    the best location to store them is the disk.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这种逻辑可以以多种方式使用。你可以在内存中使用缓存，获取最快的缓存以适用于小数据集。如果你知道你的缓存数据可能超出可用内存，你可以使用文件。例如，如果你生成图像或文档缩略图，你可以对它们进行缓存，而且，存储它们的最佳位置可能是磁盘。
- en: You can use services that handle data storage and allow you to focus on your
    application logic. Some of the most popular and simple services to work with are
    memcached and Redis. There are pros and cons for each of them. In both cases,
    they need zero setup to start using them.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用处理数据存储并允许你专注于应用程序逻辑的服务。一些最受欢迎和简单的服务包括memcached和Redis。它们各自都有优缺点。在这两种情况下，它们都需要零设置即可开始使用。
- en: Asynchronous caching
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步缓存
- en: Writing Node.js applications forces you to think asynchronously. This means
    that you'll face some challenges, a few of which you probably don't even know
    yet. One particularly painful challenge is asynchronous caching. It doesn't matter
    whether you're using an external service or a simple internal function; the asynchronous
    part is on your side and is the one responsible for giving you unpleasantness.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 编写Node.js应用程序会迫使你以异步方式思考。这意味着你将面临一些挑战，其中一些你可能甚至还不知道。其中一个特别痛苦的挑战就是异步缓存。无论你是使用外部服务还是简单的内部函数，异步部分都在你这一边，它是负责给你带来不愉快的部分。
- en: 'The problem won''t show up easily; you might figure it out just when the load
    gets high and you see a lot of cache function hits. This is not simple to describe,
    so let''s look at a fake example of a cache that we probably do somewhere in every
    application:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 问题不会轻易显现出来；你可能只有在负载变高并且看到很多缓存函数命中时才能发现它。这不容易描述，所以让我们看一个假的缓存示例，我们可能在每个应用程序中的某个地方都会做到：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It's very incomplete but you get the idea. Every time you want a user, you call
    `getUser`. This function will get it from somewhere (`users.findOne` might be
    from an ORM) and return it. Then it will store it in a hash table, and if you
    request it again, it will return that user directly. There's no time to live or
    proper error handling, but that won't solve the next problem.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是非常不完整的，但你可以理解。每当你想要一个用户时，你调用`getUser`。这个函数会从某个地方获取它（`users.findOne`可能是来自ORM），然后返回它。然后它会将它存储在哈希表中，如果你再次请求它，它将直接返回该用户。没有生存时间或适当的错误处理，但这不会解决下一个问题。
- en: We're assuming that fetching the user is very quick, right? Imagine it takes
    some time, a few seconds maybe. Next, imagine that this function is used very
    often. What happens if fetching the user takes, for instance, 10 seconds because
    of some hiccup in the network and, in that time, you call this function 100 times?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设获取用户非常快，对吧？想象一下它需要一些时间，也许几秒钟。接下来，想象一下这个函数被经常使用。如果由于网络中的某些故障，获取用户需要10秒钟，而在这段时间内，你调用了这个函数100次，会发生什么？
- en: There's no cached value and each one of the 100 calls will try to access the
    database because they ignore that the first call will actually cache the value
    and the rest of the 99 calls could use it. If the problem is in the user fetching,
    it will accumulate calls and drop your application to the ground. This happens
    because fetching the user is not instant, and so the following calls to the same
    user should be queued until the user is fetched.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 没有缓存值，100次调用中的每一次都会尝试访问数据库，因为它们忽略了第一次调用实际上会缓存该值，其余的99次调用可以使用它。如果问题出在用户获取上，调用会累积并使应用程序崩溃。这是因为获取用户不是瞬时的，所以对同一用户的后续调用应该排队，直到用户被获取为止。
- en: 'It could be something like the following code. Again, this is a simplified
    version:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能是以下代码的样子。再次强调，这是一个简化版本：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Take your time to understand it. As you can see, it's not the paradigm that
    has pitfalls; it's the way. Usually, developers are trained but not prepared for
    the asynchronous platform that Node.js (and others for the matter) enforces on
    you.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 花时间去理解它。正如你所看到的，它并不是范式有缺陷；而是方式。通常，开发人员接受培训，但并没有为Node.js（以及其他相关事项）强加给你的异步平台做好准备。
- en: For many years, it was good practice (and it still is) to get an abstraction
    to the database called **Object-relational mapping** (**ORM**). Abstractions create
    a new layer that allows you to change the database type (more or less) and still
    keep your application working. This is actually not that simple for a more mature
    application, as it can be quite difficult to avoid certain specificities of a
    server in order to improve performance. Besides this small advantage, it can reduce
    access speed and so make your application a little slower. It has other advantages,
    however, especially in the professional market, as you can apply your business
    model and entities directly to your code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，将数据库抽象成**对象关系映射**（**ORM**）是一个好的做法（现在仍然是）。抽象创建了一个新的层，允许你更改数据库类型（多多少少）并仍然让你的应用程序正常工作。对于更成熟的应用程序来说，这实际上并不那么简单，因为要避免服务器的某些特定性以提高性能可能会非常困难。除了这个小优势之外，它可能会降低访问速度，从而使你的应用程序变慢一点。然而，它还有其他优势，特别是在专业市场上，因为你可以直接将你的业务模型和实体应用到你的代码中。
- en: For historic data or a big dataset in general, ORMs are not exactly the best
    option. Many ORMs give you extra power over every item but that comes with a cost
    (speed and memory). For a big dataset, you get extra power (and big speed and
    memory cost). You'll figure out that it's not just the layer that's turning your
    application slow; it's also the database, which is usually not ready for huge
    datasets in a table (huge means gigabytes).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于历史数据或一般的大型数据集，ORM并不是最佳选择。许多ORM为你提供了对每个项目的额外控制权，但这是有代价的（速度和内存）。对于大型数据集，你会得到额外的控制权（以及大量的速度和内存成本）。你会发现，不仅是层使得你的应用变慢；通常数据库也不准备好在表中存储大型数据集（大型意味着千兆字节）。
- en: You may look for other services that can give you intermediate levels of caching
    and, if used correctly, a sense of performance by helping you reach specific data
    that you use the most. Services such as **ØMQ** and **RabbitMQ** (both message
    queue services) may be of your interest in achieving this. They can act as proxies
    for your data storage servers, creating the idea that you have a big and unified
    storage server. These services are targeted to be performant and this is one of
    the use cases they're designed for.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会寻找其他可以给你中间级别缓存的服务，如果使用正确，可以通过帮助你访问最常用的特定数据来提高性能。像**ØMQ**和**RabbitMQ**（都是消息队列服务）这样的服务可能会引起你的兴趣。它们可以充当数据存储服务器的代理，创造一个你拥有一个大型和统一的存储服务器的想法。这些服务旨在提供高性能，这是它们设计的用例之一。
- en: Adding services to act like proxies adds another layer to your application environment.
    In small scenarios with a small dataset, they might be overkill. But in bigger
    datasets, even on a single storage server, they can help maintain a constant throughput
    while your dataset grows.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 添加像代理一样的服务会给你的应用环境增加另一层。在小型场景和小型数据集中，它们可能会过度。但在更大的数据集中，即使在单个存储服务器上，它们可以帮助维持恒定的吞吐量，同时数据集增长。
- en: Clustering data
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据集群
- en: Spreading services across different hosts will be necessary. Somewhere, while
    your application dataset is growing, you'll see your host screaming for resources
    and your average load gradually eating up every one of your processors. From that
    moment onward, you need to add a host to keep the speed stable and allow your
    dataset to grow a little more.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 需要将服务分布在不同的主机上。在你的应用数据集不断增长的过程中，你会看到你的主机在呼喊资源，平均负载逐渐消耗你的每一个处理器。从那一刻开始，你需要添加一个主机来保持速度稳定，并允许数据集继续增长一点。
- en: Moving from using one host to using two hosts can be complex, forcing you to
    dominate a database server or another type of data clustering. Many database services
    support clustering or some kind of replication. The following image is an example
    of a database replicated in the servers, allowing the application to access any
    of the database instances
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从使用一个主机转变为使用两个主机可能会很复杂，迫使你控制数据库服务器或其他类型的数据集群。许多数据库服务支持集群或某种形式的复制。下面的图片是一个数据库在服务器上的复制示例，允许应用程序访问任何数据库实例。
- en: '![Clustering data](img/4183_05_02.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![数据集群](img/4183_05_02.jpg)'
- en: In multimaster replication mode, the dataset is usually stored (and duplicated)
    in two or more hosts, allowing the data to be updated from any of those hosts.
    This replicates data across all hosts, called **members**. Since there's no partitioning,
    every member is responsible for handling client requests.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在多主复制模式下，数据集通常存储（并复制）在两个或更多个主机上，允许数据从任何一个主机更新。这将数据复制到所有主机，称为**成员**。由于没有分区，每个成员都负责处理客户端请求。
- en: 'These are some of the advantages:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些优势：
- en: No single point of failure. Every member is a master, so everyone can fail.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无单点故障。每个成员都是主节点，所以每个人都可能失败。
- en: Hosts can be geographically distributed, allowing your application also to be
    distributed near your clients.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机可以在地理上分布，使你的应用程序也可以分布在你的客户附近。
- en: 'Some of the disadvantages are as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些缺点：
- en: It's not usually consistent if in asynchronous mode, as the network may disappoint
    you before your data is replicated to another host
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是在异步模式下，通常不是一致的，因为在数据复制到另一个主机之前，网络可能会让你失望。
- en: It introduces latency if in some kind of synchronous mode, since your server
    won't reply to you until data is replicated, and once again your network may fail
    on you
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是在某种同步模式下，它会引入延迟，因为你的服务器在数据复制之前不会回复给你，而且再一次，你的网络可能会让你失望。
- en: There's no silver bullet, and for a really performant application, you definitely
    need to take a deep look into your data. You might need to split it between different
    types of servers, taking advantage of their unique features. As stated before,
    a message queue server might be the best choice for part of your data.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 并没有银弹，对于一个真正高性能的应用程序，您绝对需要深入研究您的数据。您可能需要将其分割到不同类型的服务器上，利用它们独特的特性。如前所述，消息队列服务器可能是您数据的最佳选择之一。
- en: Replication does not allow you to scale properly. Your data is complete on every
    server. For huge datasets, this is a waste of space, given that the probability
    of all but one server going down is really small. And you have backups, right?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 复制不能让您正确扩展。您的数据在每台服务器上都是完整的。对于大型数据集来说，这是一种浪费空间的做法，因为所有服务器除了一台之外的概率非常小。而且你有备份，对吧？
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There are better alternatives, such as clustering, where your data is partitioned
    and every block is replicated on at least two hosts. It's normally up to you to
    decide. This is similar to RAID5 on disks but without the *write hole* phenomenon
    ([http://www.raid-recovery-guide.com/raid5-write-hole.aspx](http://www.raid-recovery-guide.com/raid5-write-hole.aspx)).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更好的选择，比如集群，其中您的数据被分区，每个块都在至少两台主机上复制。通常由您决定。这类似于磁盘上的RAID5，但没有*写洞*现象（[http://www.raid-recovery-guide.com/raid5-write-hole.aspx](http://www.raid-recovery-guide.com/raid5-write-hole.aspx)）。
- en: Accessing data
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问数据
- en: Your application needs to be prepared for these scenarios. One of the possibilities
    is shown in the previous diagram. Your application knows about replication members
    and tries to use them randomly or by a specific rule. It's up to your application
    or database module to identify failures and handle them correctly. The following
    image describes how you can also replicate the application instances and introduce
    a proxy to intermediate access to the application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序需要为这些情景做好准备。在前面的图表中显示了其中一种可能性。您的应用程序了解复制成员并尝试随机使用它们或按照特定规则使用它们。由您的应用程序或数据库模块来识别故障并正确处理。下图描述了您还可以复制应用程序实例并引入代理来中介访问应用程序。
- en: '![Accessing data](img/4183_05_03.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![访问数据](img/4183_05_03.jpg)'
- en: 'Another possible scenario is to have an instance of your application tied to
    each of your replication hosts, possibly even localhost. In this way, your application
    works locally. This, however, brings forth two issues to solve:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能的情景是将您的应用程序实例绑定到每个复制主机，甚至是本地主机。这样，您的应用程序可以在本地工作。然而，这带来了两个需要解决的问题：
- en: Having a reverse proxy enables this to assign an application instance to each
    user depending on the user geographic location or application instance load.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有反向代理可以根据用户的地理位置或应用程序实例负载为每个用户分配一个应用程序实例。
- en: Your application needs to be able to work in this scenario (stateless), unless
    your proxy ensures that every client will always access the same instance
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的应用程序需要能够在这种情况下工作（无状态），除非您的代理确保每个客户端始终访问相同的实例
- en: If your application only needs data stored in a database, these are the possible
    scenarios. If it depends on a filesystem, some scenarios won't fit unless you
    have some kind of synchronization between hosts. GlusterFS comes to my mind. If
    you don't need a filesystem and you're comfortable with some kind of object/blob
    storage, Ceph or even MongoDB can be a good choice. If you want a highly scalable
    data storage server, you might just start looking at Cassandra and forget about
    the alternatives. Prepare your application from the ground up to work with it
    and you won't regret it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序只需要存储在数据库中的数据，这些是可能的情景。如果它依赖于文件系统，除非您在主机之间进行了某种同步，否则有些情况不适用。我想到了GlusterFS。如果您不需要文件系统，并且对某种对象/大块存储感到满意，Ceph甚至MongoDB都是不错的选择。如果您想要一个高度可扩展的数据存储服务器，您可能只需开始查看Cassandra并忘记其他选择。从头开始准备您的应用程序以便与之一起工作，您将不会后悔。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Data is a critical part of your application and planning how to structure it
    is important. Even more important is how you plan your application growth and
    data escalation. Don't forget about caching for the most used parts of your data,
    and most importantly, don't forget backups. Replication and clustering are not
    kinds of backup. You need a correct backup plan that avoids downtime in the future.
    Don't forget to value your data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是您的应用程序的关键部分，规划如何构建数据结构非常重要。更重要的是，您要计划应用程序的增长和数据升级。不要忘记为数据的最常用部分进行缓存，更重要的是，不要忘记备份。复制和集群不是备份的一种形式。您需要一个正确的备份计划，以避免将来的停机时间。不要忘记重视您的数据。
- en: In the next chapter, we'll continue with topics on application performance by
    seeing how and why tests are important and how you should benchmark and carefully
    read the results (with a grain of salt). Your application is almost ready for
    high performance. But before you go for production, make sure you test it thoroughly.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续讨论应用程序性能的主题，看看测试为什么重要，以及您应该如何进行基准测试和仔细阅读结果（带有一些保留）。您的应用程序几乎已经准备好高性能了。但在投入生产之前，请确保对其进行彻底测试。
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为Bentham Chang准备，Safari ID bentham@gmail.com 用户编号：2843974 © 2015 Safari Books
    Online，LLC。此下载文件仅供个人使用，并受到服务条款的约束。任何其他用途均需版权所有者的事先书面同意。未经授权的使用、复制和/或分发严格禁止并违反适用法律。保留所有权利。
