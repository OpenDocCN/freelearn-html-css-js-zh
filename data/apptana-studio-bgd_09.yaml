- en: Chapter 9. Collaborative Work with SVN and Git
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章. 使用 SVN 和 Git 进行协作工作
- en: '*Collaborative work is an important topic at present. Many large projects are
    now being developed in a collaborative way. But this was not always easy for the
    developer. When many developers are working together on large projects, each developer
    must have a well-known area of work, and each developer must make sure that he
    doesn''t interfere with the work of the other developers.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*协作工作是目前的一个重要话题。现在许多大型项目都是以协作方式进行开发的。但这对开发者来说并不总是容易。当许多开发者共同在大项目上工作时，每个开发者都必须有一个公认的工作区域，并且每个开发者都必须确保他不会干扰其他开发者的工作。*'
- en: '*Without tools such as SVN or Git, large projects like jQuery or Linux Mint
    could not be possible. The developers of all these projects are distributed all
    over the world and they often work in different time zones and have different
    ways of working, but in the end all the parts are merged into one great project
    in SVN or Git.*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果没有像 SVN 或 Git 这样的工具，像 jQuery 或 Linux Mint 这样的大型项目将无法实现。所有这些项目的开发者分布在世界各地，他们经常在不同的时区工作，有不同的工作方式，但最终所有部分都合并到一个伟大的
    SVN 或 Git 项目中。*'
- en: '*So, SVN and Git are a great enrichment for all developers and essential for
    the fast progress of large web projects.*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*因此，SVN 和 Git 对所有开发者来说都是一项巨大的财富，对于大型网络项目的快速进展至关重要。*'
- en: '*Let''s take a look at how easy it is to work with SVN and Git in Aptana Studio.*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*让我们看看在 Aptana Studio 中使用 SVN 和 Git 是多么简单。*'
- en: 'In this chapter we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What views does the SVN perspective provide
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SVN** 视角提供了哪些视图'
- en: Checking out an SVN Repository
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检出 SVN 仓库
- en: Identifying files in different states within the Project Explorer
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目资源管理器中识别不同状态下的文件
- en: Updating and committing an SVN project
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新和提交 SVN 项目
- en: How to read the SVN history, compare versions, and restore an older version
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何读取 SVN 历史、比较版本和恢复旧版本
- en: Cloning a Git repository in order to receive a project
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆 Git 仓库以接收项目
- en: Working with a local Git repository
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用本地 Git 仓库
- en: How to stage, unstage, revert, and commit within Git Repositories
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 Git 仓库中暂存、取消暂存、还原和提交
- en: Pushing and pulling remote Git Repositories
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推送和拉取远程 Git 仓库
- en: Working with SVN
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SVN
- en: At first we will take a look at the **SVN** perspective. We have already examined
    how to install the SVN plugin in [Chapter 2](ch02.html "Chapter 2. Basics and
    How to Use Perspectives and Views"), *Basics and How to Use Perspectives and Views*.
    If you haven't installed it yet, switch back to [Chapter 2](ch02.html "Chapter 2. Basics
    and How to Use Perspectives and Views") and install it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将查看 **SVN** 视角。我们已经在 [第 2 章](ch02.html "第 2 章。基础和如何使用视角和视图") 中检查了如何安装 SVN
    插件，*基础和如何使用视角和视图*。如果您还没有安装，请切换回 [第 2 章](ch02.html "第 2 章。基础和如何使用视角和视图") 并安装它。
- en: The **SVN** perspective provides a group of views that help us to work with
    a Subversion server. You can open this perspective by using the Perspective menu
    in the top-right of the Aptana Studio window.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**SVN** 视角提供了一组视图，帮助我们与 Subversion 服务器一起工作。您可以通过在 Aptana Studio 窗口的右上角使用视角菜单来打开此视角。'
- en: 'The important and most frequently used views related to SVN, which we will
    take a look at, are the **SVN Repositories** view, the **Team** | **History**
    view, and the **SVN** | **Console** view. These views are categorized as the views
    selection into the **SVN** and **Team** folder, as shown in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与 SVN 相关的重要且最常用的视图，我们将要查看的，包括 **SVN 仓库** 视图、**团队** | **历史** 视图和 **SVN** | **控制台**
    视图。这些视图被归类为选择进入 **SVN** 和 **团队** 文件夹的视图，如下面的截图所示：
- en: '![Working with SVN](img/8246_09_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SVN](img/8246_09_01.jpg)'
- en: 'The **SVN Repositories** view allows you to add new repositories and manage
    all available repositories. Additionally, you have the option to create new tags
    or branches of the Repository. These views belong to the **SVN** views, as shown
    in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**SVN 仓库** 视图允许您添加新的仓库并管理所有可用的仓库。此外，您还有创建仓库的新标签或分支的选项。这些视图属于 **SVN** 视图，如下面的截图所示：'
- en: '![Working with SVN](img/8246_09_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SVN](img/8246_09_02.jpg)'
- en: 'The **History** view allows you to get an overview about the project and revisions
    history. This view is used by SVN and Git projects; for this reason the view is
    stored in the **Team** views group. The **History** view can be opened by the
    menu under **Window** | **Show View** | **History**. Here you can see all the
    revisions with their comments and data creation. Furthermore, you can get a view
    into all revisions of a file and you also have, the ability to compare all revisions.
    The following screenshot shows the **History** view:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**历史** 视图允许你了解项目及其修订历史的大致情况。这个视图被 SVN 和 Git 项目使用；因此，这个视图被存储在 **团队** 视图组中。可以通过
    **窗口** | **显示视图** | **历史** 菜单打开 **历史** 视图。在这里，你可以看到所有带有其注释和数据创建时间的修订。此外，你可以查看文件的所有修订版本，并且还有比较所有修订版本的能力。以下截图显示了
    **历史** 视图：'
- en: '![Working with SVN](img/8246_09_06.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SVN](img/8246_09_06.jpg)'
- en: Within the SVN **Console** view, you will find the output from all the SVN actions
    that are executed by Aptana Studio. Therefore, if you have an SVN conflict or
    something else, you can take a look at this **Console** view's output and you
    might locate the problem a bit faster. The SVN **Console** view was automatically
    integrated in the Aptana Studio Console, while the SVN plugin was installed. So
    if you need the SVN **Console** view, just open the general **Console** view from
    **Window** | **Show view** | **Console**. If the **Console** view is open, just
    use the View menu to select the **Console** type, which in this case is the **SVN
    Console** entry.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SVN **控制台** 视图中，你可以找到由 Aptana Studio 执行的所有 SVN 操作的输出。因此，如果你遇到 SVN 冲突或其他问题，你可以查看这个
    **控制台** 视图的输出，可能会更快地定位到问题。当安装了 SVN 插件时，SVN **控制台** 视图会自动集成到 Aptana Studio 控制台中。所以，如果你需要
    SVN **控制台** 视图，只需从 **窗口** | **显示视图** | **控制台** 打开常规 **控制台** 视图。如果 **控制台** 视图已经打开，只需使用视图菜单选择
    **控制台** 类型，在这种情况下是 **SVN 控制台** 项。
- en: 'The following screenshot shows the **Console** view and how you can select
    **SVN Console**:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 **控制台** 视图以及如何选择 **SVN 控制台**：
- en: '![Working with SVN](img/8246_09_07.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SVN](img/8246_09_07.jpg)'
- en: However, before we can start work with SVN, we have to add the related SVN Repository.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们开始使用 SVN 之前，我们必须添加相关的 SVN 仓库。
- en: Time for action – adding an SVN Repository
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行动作 – 添加 SVN 仓库
- en: Open the **SVN** perspective by using the Perspective menu in the top-right
    corner of the Aptana Studio window.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用 Aptana Studio 窗口右上角的视角菜单打开 **SVN** 视角。
- en: Now, you should see the **SVN Repositories** view on the left-hand side of the
    Aptana Studio window. If it does not open automatically, open it by selecting
    the view from the navigation **Window** | **Show view** | **SVN Repositories**.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你应该能在 Aptana Studio 窗口的左侧看到 **SVN 仓库** 视图。如果它没有自动打开，可以通过选择导航菜单中的视图来打开它：**窗口**
    | **显示视图** | **SVN 仓库**。
- en: In order to add a new SVN Repository, click on the small SVN icon with the plus
    sign at the top of the **SVN Repositories** view.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了添加新的 SVN 仓库，点击 **SVN 仓库** 视图顶部的带有加号的小 SVN 图标。
- en: You will now have to enter the address of the Subversion server in the pop up
    that appears, for example, `svn://219.199.99.99/svn_codeSnippets`.![Time for action
    – adding an SVN Repository](img/8246_09_08.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在需要在弹出的窗口中输入 Subversion 服务器的地址，例如，`svn://219.199.99.99/svn_codeSnippets`。![执行动作
    – 添加 SVN 仓库](img/8246_09_08.jpg)
- en: After you have clicked on the **Finish** button, Aptana Studio tries to reach
    the Subversion server in order to complete the process of adding a new Repository.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **完成** 按钮后，Aptana Studio 将尝试连接到 Subversion 服务器，以完成添加新仓库的过程。
- en: If the Subversion server was reached and the SVN Repository is password protected,
    you will have to enter the access data for reading the SVN data.![Time for action
    – adding an SVN Repository](img/8246_09_09.jpg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果连接到 Subversion 服务器并且 SVN 仓库受密码保护，你必须输入读取 SVN 数据的访问数据。![执行动作 – 添加 SVN 仓库](img/8246_09_09.jpg)
- en: If you don't have the required access data available currently, you can abort
    the process and Aptana Studio will ask you whether you want to keep the location.
    If you click on **NO**, the newly added SVN Repository will be deleted, but if
    you click on **YES**, the location will remain. This allows you to retrieve the
    required access data later, enter them, and begin to work with the SVN Repository.![Time
    for action – adding an SVN Repository](img/8246_09_10.jpg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您目前没有可用的所需访问数据，您可以中止进程，Aptana Studio 将询问您是否想要保留位置。如果您点击 **否**，新添加的 SVN 仓库将被删除，但如果您点击
    **是**，位置将保持不变。这允许您稍后检索所需的访问数据，输入它们，并开始使用 SVN 仓库。![操作时间 – 添加 SVN 仓库](img/8246_09_10.jpg)
- en: Regardless of whether you keep the location or enter the required access data,
    the new SVN Repository will be listed in the SVN Repository view.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无论您是保留位置还是输入所需的访问数据，新的 SVN 仓库都将列在 SVN 仓库视图中。
- en: '*What just happened?*'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We have added a new SVN Repository into Aptana Studio. The new Repository is
    now listed in our **SVN Repositories** view and we can check this out from there,
    or create new tags or branches.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将一个新的 SVN 仓库添加到 Aptana Studio 中。新的仓库现在列在我们的 **SVN 仓库** 视图中，我们可以从这里检出，或者创建新的标签或分支。
- en: Checking out an SVN Repository
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检出 SVN 仓库
- en: After we have seen how to add a new SVN Repository to Aptana Studio, we also
    want to know how we can check this Repository in order to work with the contained
    source code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们了解了如何将新的 SVN 仓库添加到 Aptana Studio 后，我们还想知道如何检查这个仓库以便与包含的源代码一起工作。
- en: You can do this, like many other things are done in Aptana Studio, in different
    ways. We will take a look at how we can do this directly from the **SVN Repositories**
    view, because every time we add a new Repository to Aptana Studio, we will also
    want to check it and use it as a project.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以像在 Aptana Studio 中做许多其他事情一样，以不同的方式完成此操作。我们将查看如何直接从 **SVN 仓库** 视图中完成此操作，因为每次我们将新的仓库添加到
    Aptana Studio 中，我们都会想要检查它并使用它作为项目。
- en: Time for action – checking out an SVN Repository
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 – 检出 SVN 仓库
- en: Open the **SVN Repositories** view.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **SVN 仓库** 视图。
- en: Expand the SVN Repository that you wish to check out. We do this because we
    want to check out the trunk directory from the Repository, not the tags and branches
    directory.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展您希望检出的 SVN 仓库。我们这样做是因为我们想要从仓库中检出 trunk 目录，而不是 tags 和 branches 目录。
- en: Now, right-click on the trunk directory and select the **Check Out...** entry.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，右键单击 trunk 目录并选择 **检出...** 选项。
- en: Aptana Studio will now read the properties of the SVN Repository directly from
    the Subversion server. When all the required properties are received, the following
    window will appear on your screen:![Time for action – checking out an SVN Repository](img/8246_09_11.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Aptana Studio 现在将从 Subversion 服务器直接读取 SVN 仓库的属性。当收到所有所需的属性后，以下窗口将出现在您的屏幕上：![操作时间
    – 检出 SVN 仓库](img/8246_09_11.jpg)
- en: First of all, we select the **Check out as a project in the workspace** option
    and enter the name of the new SVN project.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们选择 **在工作区中检出为项目** 选项，并输入新 SVN 项目的名称。
- en: After this, we select the revision that we want to check out. This is usually
    the head revision. This means that you want to check out the last committed one—called
    the head revision. But you can check out any revision number you want from the
    past. If this is so, just deselect the **Check out HEAD revision** checkbox and
    enter the number of the revision that you want to check out.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们选择我们想要检出的修订版本。这通常是头修订版本。这意味着您想要检出最后提交的版本——称为头修订版本。但您可以从过去检查任何想要的修订版本号。如果是这样，只需取消选择
    **检出 HEAD 修订版本** 复选框，并输入您想要检出的修订版本号。
- en: In the last section, we select the `Fully recursive` option within the **Depth**
    drop-down list and uncheck the **Ignore externals** checkbox, but select the **Allow
    unversioned obstructions** checkbox.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一部分，我们在 **深度** 下拉列表中选择 `完全递归` 选项，取消选择 **忽略外部** 复选框，但选择 **允许未版本化障碍** 复选框。
- en: After you have selected these settings, click on the **Next** button.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您选择了这些设置后，点击 **下一步** 按钮。
- en: Finally, you can select the location where the project should be created. Normally,
    this is the current workspace, but sometimes the location is different from the
    workspace. Maybe you have a web server installed and want to place the source
    code directly into the web root, in order to run the web application directly
    on your local machine.![Time for action – checking out an SVN Repository](img/8246_09_12.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你可以选择项目应该创建的位置。通常，这是当前工作区，但有时位置可能不同。也许你已经安装了Web服务器，并希望将源代码直接放置在Web根目录中，以便在本地机器上直接运行Web应用程序。![操作时间
    – 检出SVN仓库](img/8246_09_12.jpg)
- en: Finally, whether you select a different location for the project or not, you
    have to click on the **Finish** button to finalize the "Check out" into a new
    project.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，无论你是否为项目选择不同的位置，你都必须点击**完成**按钮以最终将“检出”到新项目。
- en: '*What just happened?*'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We have checked out an SVN Repository from the **SVN Repositories** view. In
    addition to that, we have seen how we can also check out the Repository source
    code into another location other than the workspace. Finally, you should now have
    a ready SVN project where you can start working.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已从**SVN仓库视图**检出SVN仓库。除此之外，我们还看到了如何将仓库源代码检出到工作区以外的其他位置。最后，你现在应该有一个准备好的SVN项目，你可以开始工作了。
- en: File states
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件状态
- en: If you're now changing some lines within a source code file, the **Project Explorer**
    view and the **App Explorer** view change the files' icon, so that you see a small
    white star on the black background. This means the file has changed since the
    last commit/update.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在正在修改源代码文件中的某些行，**项目资源管理器**视图和**应用程序资源管理器**视图会更改文件的图标，使你看到一个黑色背景上的小白色星号。这意味着自上次提交/更新以来文件已更改。
- en: 'There are some more small icons, which give you information about the related
    files and directories. Let''s take a closer look at the **Label Decorations**
    tab as shown in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他的小图标，它们提供了有关相关文件和目录的信息。让我们更仔细地看看以下截图所示的**标签装饰**选项卡：
- en: '![File states](img/8246_09_15.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![文件状态](img/8246_09_15.jpg)'
- en: 'Now, we will discuss the symbols in the order shown in the previous screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将按之前截图所示的顺序讨论这些符号：
- en: The small rising arrow shows you that the file or directory is an external one.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小上升箭头表示这个文件或目录是外部文件。
- en: The small yellow cylinder shows you that the file or directory is already under
    version control.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小黄色圆柱形符号表示这个文件或目录已经处于版本控制之下。
- en: The red **X** shows you that this file or directory is marked for deletion.
    The next time you commit your changes, the file will be deleted.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 红色**X**符号表示这个文件或目录被标记为删除。下次你提交更改时，该文件将被删除。
- en: The small blue cylinder shows you that the file or directory is switched. These
    are files or directories that belong to a different working copy other than their
    local parent directory.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小蓝色圆柱形符号表示文件或目录已被切换。这些是除了其本地父目录之外属于不同工作副本的文件或目录。
- en: The small blue plus symbol shows you that this already versioned file or directory
    needs to be added to the repository. These could be files or directories you may
    have renamed or moved to a different directory.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小蓝色加号符号表示这个已经版本化的文件或目录需要添加到仓库中。这些可能是你重命名或移动到不同目录的文件或目录。
- en: The small cornered square shows you that these files have a conflict with the
    repository.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小角形方块表示这些文件与仓库存在冲突。
- en: The small white star on the black background shows you that these files or directories
    have been changed since the last commit.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黑色背景上的小白色星号表示这些文件或目录自上次提交以来已更改。
- en: If the file's or directory's icon has no small symbol, it means the file is
    ignored by the SVN Repository.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果文件或目录的图标没有小符号，这意味着该文件被SVN仓库忽略。
- en: The small white hook on the black background shows you that this file or directory
    is locked.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黑色背景上的小白色钩子表示这个文件或目录已被锁定。
- en: The small red stop sign shows you that this file or directory is read-only.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小红色停止标志表示这个文件或目录是只读的。
- en: The small yellow cylinder shows you that this file or directory is already under
    version control and unchanged since the last commit.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小黄色圆柱形符号表示这个文件或目录已经处于版本控制之下，并且自上次提交以来没有更改。
- en: The small question mark shows you that this new file or directory isn't currently
    under version control.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小问号表示这个新文件或目录目前未处于版本控制之下。
- en: If you didn't find your icons in this list, or your icons look different, no
    problem. Just navigate to **Window** | **Preferences** and select the **Label
    Decorations** entry under **Team** | **SVN** within the tree. Here you will find
    all of the icons which are used.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在这份列表中没有找到你的图标，或者你的图标看起来不同，没有问题。只需导航到**窗口** | **首选项**，然后在树中的**团队** | **SVN**下选择**标签装饰**条目。在这里，你可以找到所有使用的图标。
- en: Committing an SVN Repository
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交 SVN 仓库
- en: If you have finished extending your web application with some new features,
    you can nowcommit these changes so that the changes are stored in the Repository,
    and other developers can also update their working copies and get the new features.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经通过一些新功能扩展了你的网络应用程序，你现在可以提交这些更改，以便更改被存储在仓库中，其他开发者也可以更新他们的工作副本并获取新功能。
- en: But how can you simply commit the changed files?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 但你如何简单地提交更改的文件？
- en: Unlike a Git Repository, SVN allows you to commit changes in a tree from the
    Repository. By using Git, you can only commit changes in the complete Repository
    at once. But for now, we want to commit our SVN Repository changes, therefore
    just follow the steps mentioned in the following *Time for action – updating and
    committing an SVN Repository* section.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Git 仓库不同，SVN 允许你从仓库提交树中的更改。通过使用 Git，你只能一次性提交整个仓库的更改。但到目前为止，我们想要提交我们的 SVN 仓库更改，因此只需遵循以下
    *行动时间 – 更新和提交 SVN 仓库* 部分中提到的步骤。
- en: Time for action – updating and committing an SVN Repository
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 更新和提交 SVN 仓库
- en: The first step, before performing a commit, is to perform an update on your
    working copy. Therefore, we will start by doing this, Aptana Studio reads all
    new revisions from the Subversion server and merges them with your local working
    copy. In order to do this update, right-click on your project root and select
    **Team** | **Update to HEAD**.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行提交之前的第一步是更新你的工作副本。因此，我们将首先这样做，Aptana Studio 从 Subversion 服务器读取所有新修订版本并将它们与你的本地工作副本合并。为了进行此更新，右键单击你的项目根目录，然后选择**团队**
    | **更新到 HEAD**。
- en: When your working copy is up to date, navigate to the **App Explorer** view
    or the **Project Explorer** view and right-click on the files or directories that
    you want to commit, and then select the **Commit...** entry in the **Team** option.![Time
    for action – updating and committing an SVN Repository](img/8246_09_13.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你的工作副本是最新的时，导航到**应用资源管理器**视图或**项目资源管理器**视图，然后右键单击你想要提交的文件或目录，然后在**团队**选项中选择**提交...**条目。![行动时间
    – 更新和提交 SVN 仓库](img/8246_09_13.jpg)
- en: If you select a few directories or the whole project, the **Commit** window
    lists only those files within the selection that have changed since the last commit.
    So, you are able to select just the files and directories that you want to commit.
    Compose the selected files and directories as you need, and enter a comment in
    the top of the window.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你选择了一些目录或整个项目，**提交**窗口只会列出自上次提交以来发生变化的那些选择中的文件。因此，你可以只选择你想要提交的文件和目录。按照你的需要组合选定的文件和目录，并在窗口顶部输入注释。
- en: Tip
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Why do you have to enter a comment while committing a change?**'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**为什么提交更改时必须输入注释？**'
- en: Because, by committing the SVN Repository, it automatically saves the date,
    time, and your username; with this data the revision history stores information
    about *who has changed which file at what time*. In addition to that comes the
    commenting part. The comment should describe what kind of changes were made and
    what is their purpose.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为，通过提交 SVN 仓库，它会自动保存日期、时间和你的用户名；有了这些数据，修订历史记录会存储有关 *谁在何时更改了哪个文件* 的信息。除此之外，还有注释部分。注释应该描述所做的更改及其目的。
- en: To finalize the commit, you just have to click on the **OK** button and the
    commit process will start.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要完成提交，你只需单击**确定**按钮，提交过程就会开始。
- en: As described previously, you can see the output from all your SVN processes
    within the SVN **Console** view. In the following screenshot you can see the result
    of our commit process:![Time for action – updating and committing an SVN Repository](img/8246_09_14.jpg)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，你可以在 SVN **控制台**视图中看到所有你的 SVN 进程的输出。在下面的屏幕截图中，你可以看到我们的提交过程的结果：![行动时间 –
    更新和提交 SVN 仓库](img/8246_09_14.jpg)
- en: '*What just happened?*'
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We have updated our working copy in order to commit our changes. Now the other
    developers can update their working copies too and can then work with your extensions.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经更新了我们的工作副本以提交我们的更改。现在其他开发者也可以更新他们的工作副本，然后可以与你一起工作。
- en: Tip
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Refer to [Chapter 11](ch11.html "Chapter 11. Optimizing Work and Increasing
    Collaboration"), *Optimizing Work and Increasing Collaboration* to learn how to
    optimize this process.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[第11章](ch11.html "第11章。优化工作和提高协作")，*优化工作和提高协作*，了解如何优化此过程。
- en: It should be noted again that it's recommended to perform an update before every
    commit. You can perform an update in a single file tree node. You don't have to
    update your whole project every time, a single node can also be committed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 再次需要注意的是，建议在每次提交之前执行更新。您可以在单个文件树节点中执行更新。您不必每次都更新整个项目，单个节点也可以提交。
- en: Updating an SVN Repository
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新SVN存储库
- en: Additionally, similar to the SVN check out, you have the option to update your
    working copy not only to the Head revision, but also to a special revision number.
    In order to do this, right-click on the project root within the **Project Explorer**
    view and select the **Update to Head...** option or the **Update to Version...**
    option under the **Team** tab. After selecting one of these entries, Aptana Studio
    determines all the new files and files to be updated, downloads them from the
    Repository, and merges them with your local working copy.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，类似于SVN检出，您还有选项将工作副本更新到Head修订版本，也可以更新到特定的修订版本号。为了做到这一点，在**项目资源管理器**视图中右键单击项目根目录，并选择**更新到Head...**选项或**团队**选项卡下的**更新到版本...**选项。选择这些条目之一后，Aptana
    Studio确定所有新文件和要更新的文件，从存储库下载它们，并将它们与您的本地工作副本合并。
- en: Now you should have all the source code from your current project. But, how
    can you identify which parts of a file are new or have been changed?
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该已经拥有了当前项目的所有源代码。但是，您如何识别文件中哪些部分是新的或已更改的？
- en: 'No problem! Aptana Studio allows you not only to compare two different local
    files, you can also compare files from different revisions in your Repository.
    Refer to the following *Time for action* section to understand how this works:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 没问题！Aptana Studio不仅允许您比较两个不同的本地文件，您还可以比较存储库中不同修订版本的文件。请参考以下*操作时间*部分了解这是如何工作的：
- en: Time for action – using the SVN history and comparing files
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 - 使用SVN历史和比较文件
- en: First we will view the SVN history of a single file. You can do this on a whole
    directory or project also; for now we will do it on a single file, but the procedure
    is the same. Navigate to your SVN project in the **App Explorer** or **Project
    Explorer** view.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将查看单个文件的SVN历史记录。您也可以在整个目录或项目中这样做；现在我们将对单个文件进行操作，但步骤是相同的。在**App资源管理器**或**项目资源管理器**视图中导航到您的SVN项目。
- en: Select the file or directory that you want to inspect, right-click on it and
    select the **Show History** entry in the **Team** tab.![Time for action – using
    the SVN history and comparing files](img/8246_09_16.jpg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您想要检查的文件或目录，右键单击它，并在**团队**选项卡中选择**显示历史记录**条目。![操作时间 – 使用SVN历史和比较文件](img/8246_09_16.jpg)
- en: In the SVN **History** view (as shown in the previous screenshot), at the top
    you have a list of all the revisions, and the location where the selected file
    was changed and committed. In our case, the file was initially committed first
    in revision **8**, and updated in revision **25** and **26**. Additionally, you
    can see the date of the revision and the name of the user who had committed it.
    The last column is the **Comment** column, where you find more information about
    what was changed in the commit.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在SVN **历史**视图中（如图中所示），顶部列出了所有修订版本，以及所选文件更改和提交的位置。在我们的例子中，文件最初是在修订版本**8**中提交的，然后在修订版本**25**和**26**中进行了更新。此外，您还可以看到修订版本的日期和提交该修订版本的用户名称。最后一列是**注释**列，其中包含有关提交中更改的更多信息。
- en: The list on the bottom area of the SVN **History** view depends on the selected
    revision in the top area and shows you which files are affected in the current
    selected scope of the **History** view.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SVN **历史**视图底部区域中的列表取决于顶部区域中选择的修订版本，并显示在**历史**视图当前所选范围内受影响的文件。
- en: If you double-click on a single file in the bottom list, Aptana Studio loads
    the file in the selected revision from the Subversion server, and opens it in
    the related editor. In the head of the editor, you can see the number of opened
    revisions suffixed to the filename as shown in the following screenshot:![Time
    for action – using the SVN history and comparing files](img/8246_09_17.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在底部列表中双击单个文件，Aptana Studio将从Subversion服务器加载所选修订版本的文件，并在相关编辑器中打开它。在编辑器的头部，您可以看到附加到文件名的打开修订版本的编号，如图中所示：![操作时间
    – 使用SVN历史和比较文件](img/8246_09_17.jpg)
- en: The file opens in read-only mode only because it is an already committed file.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文件以只读模式打开，仅因为它是已提交的文件。
- en: Now you know how to inspect an older version of a file from your SVN project,
    but it is also interesting to know what parts in the file have changed between
    the different versions.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您已经知道如何从您的 SVN 项目中检查文件的旧版本，但了解文件在不同版本之间哪些部分发生了变化也同样有趣。
- en: For this purpose, you can use the **Compare...** function. Select the file you
    want to compare in the bottom area, right-click on it, and select the **Compare...**
    entry.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了此目的，您可以使用 **比较...** 功能。在底部区域选择您想要比较的文件，右键单击它，然后选择 **比较...** 选项。
- en: '![Time for action – using the SVN history and comparing files](img/8246_09_18.jpg)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![执行时间 – 使用 SVN 历史记录和比较文件](img/8246_09_18.jpg)'
- en: The window, as shown in the following screenshot, allows you to select the two
    files that you want to compare. We already selected the first one by right-clicking
    on it. This file is automatically entered in the **Compare from** field. The **Compare
    to** field is automatically entered by Aptana Studio. Here, Aptana Studio just
    counts down one number. But, in our case (as shown in the previous screenshot)
    there is a revision **25**. In this case, since there was no revision **25**,
    Aptana Studio selected the revision **8** for comparing, because it was the last
    checked one since revision **25**.![Time for action – using the SVN history and
    comparing files](img/8246_09_19.jpg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下截图所示，窗口允许您选择您想要比较的两个文件。我们已经通过右键单击它来选择了第一个文件。此文件将自动输入到 **比较来源** 字段中。**比较目标**
    字段将由 Aptana Studio 自动输入。在这里，Aptana Studio 只倒数一个数字。但在我们的案例中（如前一个截图所示），有一个修订 **25**。在这种情况下，由于没有修订
    **25**，Aptana Studio 选择修订 **8** 进行比较，因为它是在修订 **25** 之后最后检查的一个。![执行时间 – 使用 SVN
    历史记录和比较文件](img/8246_09_19.jpg)
- en: After choosing the two file revisions that you want to compare, just click on
    **OK** in order to load the **Compare** view.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您想要比较的两个文件修订后，只需单击 **确定** 以加载 **比较** 视图。
- en: Tip
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Switch between the Compare from and to fields**'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**在比较来源和目标字段之间切换**'
- en: If the Compare revisions fields have been entered in reverse order, simply click
    on the **Swap From and To** button, and Aptana Studio will swap both the fields.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果比较修订字段已按相反顺序输入，只需单击 **交换来源和目标** 按钮，Aptana Studio 将交换这两个字段。
- en: Aptana Studio opens the **Compare** view of both these file revisions and you
    can inspect the differences. In our case (in the following screenshot), we compare
    revision **27** and **26**, as you can see from the revision number suffixed to
    the filenames at the top, revision **27** on the left and revision **26** on the
    right.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Aptana Studio 打开这两个文件修订版本的 **比较** 视图，您可以检查差异。在我们的案例中（如下面的截图所示），我们比较修订 **27**
    和 **26**，正如您从文件名顶部的修订号后缀中可以看到，修订 **27** 在左侧，修订 **26** 在右侧。
- en: From the left to the right you can see all the differences. Here it is obvious
    that only three lines of comments were inserted. You can see a horizontal rule
    on line 19, which shows a difference. It also ends with a horizontal rule on line
    21, where the row with a difference ends. In the space in the middle there is
    a gray column between both the text areas. In this column visual lines are shown
    which show the exact line where the new lines were added. In the left row, rows
    19 to 21 are connected by a visual line with the right horizontal rule between
    row 18 and 19\. This shows that the new lines were added in line 19.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从左到右，您可以查看所有差异。这里很明显，只有三行注释被插入。您可以看到第 19 行上的水平线，它表示一个差异。它也在第 21 行结束，其中包含差异的行结束。在中间的空间中，在两个文本区域之间有一个灰色列。在这个列中，显示了视觉行，显示了新行被添加的确切行。在左侧的行中，第
    19 行到第 21 行通过一行视觉线与第 18 行和第 19 行之间的右侧水平线相连。这表明新行是在第 19 行添加的。
- en: A nice feature is, when you scroll the editor towards the left, the right editor
    will scroll automatically synchronous to the left editor.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个很好的功能是，当您将编辑器向左滚动时，右侧编辑器会自动与左侧编辑器同步滚动。
- en: '![Time for action – using the SVN history and comparing files](img/8246_09_20.jpg)'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![执行时间 – 使用 SVN 历史记录和比较文件](img/8246_09_20.jpg)'
- en: But, you don't have to always take the long way via the SVN **History** view,
    when you want to compare some files. You can also navigate to the **App Explorer**
    view or the **Project Explorer** view, select the file you want to compare, and
    right-click on it. In the context menu (as shown in the following screenshot),
    select the **Compare with** entry and you will get a submenu with the most frequent
    comparing options.![Time for action – using the SVN history and comparing files](img/8246_09_21.jpg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是，当你想要比较一些文件时，你不必总是通过SVN **历史**视图的长路径。你也可以导航到**应用程序资源管理器**视图或**项目资源管理器**视图，选择你想要比较的文件，然后右键单击它。在上下文菜单（如以下截图所示）中，选择**与...比较**条目，你将得到一个包含最常用比较选项的子菜单。![行动时间
    - 使用SVN历史和比较文件](img/8246_09_21.jpg)
- en: 'If you want to compare two files that are both not in a subversion or maybe
    even in different projects, just select both of them by holding the *Ctrl* key
    within the **Project Explorer** view, right-click on one of the files, and select
    the **Each other** entry in the **Compare With** option. The **Compare** view
    of a compare will look similar to the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要比较两个都不在子版本控制中，甚至可能在不同的项目中，只需在**项目资源管理器**视图中按住**Ctrl**键选择这两个文件，然后右键单击其中一个文件，在**与...比较**选项中选择**彼此**条目。比较视图的**比较**将类似于以下截图：
- en: '![Time for action – using the SVN history and comparing files](img/8246_09_22.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 - 使用SVN历史和比较文件](img/8246_09_22.jpg)'
- en: '*What just happened?*'
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We have seen how easy it is to inspect what parts of a file have changed in
    the previous revisions by using the SVN **History** view. Starting with listing
    all available revisions of a file, we also discussed how to compare each of these
    revisions with each other. Comparing different files that maybe from other projects
    was also discussed in this section.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，通过使用SVN **历史**视图，检查文件在先前版本中哪些部分发生了变化是多么容易。从列出文件的所有可用版本开始，我们还讨论了如何将这些版本相互比较。本节还讨论了比较来自其他项目的不同文件。
- en: Have a go hero – checking out an SVN Repository and working with it
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动手实践英雄——检出SVN仓库并与之工作
- en: Now, your task is to add an SVN Repository to the Aptana Studio Repository view
    and then check it out directly into a project. After you have created your SVN
    project, go forward and work within it. Change some files and commit the changes.
    When you have committed some files, take a look into the SVN **History** view
    and see how the changes are displayed. Finally, choose one file from the SVN **History**
    view and compare it with the one from the Head Revision.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的任务是向Aptana Studio仓库视图添加一个SVN仓库，并将其直接检出到一个项目中。在你创建了SVN项目之后，继续在其中工作。更改一些文件并提交更改。当你提交了一些文件后，查看SVN
    **历史**视图，看看更改是如何显示的。最后，从SVN **历史**视图中选择一个文件，并将其与主修订版本的文件进行比较。
- en: Pop quiz – testing your newly acquired SVN knowledge
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速问答——测试你新获得的SVN知识
- en: Q1\. What is recommended to be done before every commit?
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 在每次提交之前推荐做什么？
- en: Checking out a fresh working copy
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检出新的工作副本
- en: Performing an update
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行更新
- en: Performing a clean-up
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行清理操作
- en: Q2\. How can you identify the subversion state of your files within your project?
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. 如何识别项目内文件的状态？
- en: Right-click on the file, select the **Properties** entry, and then select the
    **Subversion** section in the opening window.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击文件，选择**属性**条目，然后在打开的窗口中选择**子版本控制**部分。
- en: The files didn't have different states.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件没有不同的状态。
- en: You can identify the state of the file by the small symbol on the icon of the
    file.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过文件图标上的小符号来识别文件的状态。
- en: Q3\. What should be done when you are working on your project and you notice
    that the performed changes are not what you want, and you want to restore the
    original state again?
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Q3. 当你在进行项目工作时，注意到所做的更改不是你想要的，并且你想恢复到原始状态，应该怎么做？
- en: Delete the complete working copy and check them out again.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除完整的工作副本并再次检出。
- en: Try to undo all the changes by using the *Ctrl* + *Z* shortcut.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试使用**Ctrl** + **Z**快捷键撤销所有更改。
- en: Select the related files and directories and revert the changes by using the
    context menu in the **Project Explorer** view.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择相关的文件和目录，并在**项目资源管理器**视图中的上下文菜单中使用它来撤销更改。
- en: Q4\. What should be done to compare two files from two different projects?
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Q4. 如何比较来自两个不同项目的两个文件？
- en: You have to select both the files within the **Project Explorer** view, right-click
    on one of the files, and select the **Each other** entry under the **Compare With**
    option.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须选择**项目资源管理器**视图中的两个文件，右键单击其中一个文件，然后在**与...比较**选项下选择**彼此**。
- en: Select the first file within the **Project Explorer** view, open it, and drop
    the second file within the same editor.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目资源管理器**视图中选择第一个文件，打开它，并将第二个文件拖放到同一个编辑器中。
- en: You have to select both the files within the **Project Explorer** view and drag-and-drop
    these files into the editors area.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须选择**项目资源管理器**视图中的两个文件，并将这些文件拖放到编辑器区域。
- en: Working with Git
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Git
- en: Just like SVN, Git is a version control and source code management system, and
    was initially developed by Linus Torvalds. The difference between SVN and Git
    is that Git is a distributed version control and SVN is a centralized version
    control.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 就像SVN一样，Git是一个版本控制和源代码管理系统，最初由林纳斯·托瓦兹（Linus Torvalds）开发。SVN和Git之间的区别在于Git是一个分布式版本控制系统，而SVN是一个集中式版本控制系统。
- en: 'Aptana Studio is shipped with a built-in support for Git source control. However,
    if you are using a Linux-based operating system, you have to install the Git package
    manually. You can use the following command to do this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Aptana Studio自带对Git源代码管理的内置支持。但是，如果您使用的是基于Linux的操作系统，您必须手动安装Git包。您可以使用以下命令来完成此操作：
- en: '[PRE0]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you are using a Windows-based operating system, you don't need to install
    any additional components. Aptana Studio is pre-packaged with portable Git and
    so you can start using Git with Aptana Studio immediately.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是基于Windows的操作系统，您不需要安装任何额外的组件。Aptana Studio预包装了便携式Git，因此您可以直接使用Aptana
    Studio使用Git。
- en: Cloning a Git Repository and creating a new project with this clone can be done
    in different ways. At this point, we will take a look at the fastest way to do
    this.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆Git仓库并使用此克隆创建新项目的方法有多种。在此阶段，我们将查看完成此操作的最快方法。
- en: Tip
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**What is happening?**'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**发生了什么？**'
- en: Like the SVN Processes, the Git Processes are also executed on the console.
    Therefore, there will be some output found after each action, with one small difference;
    that Git uses the Aptana Studio system console.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 与SVN流程一样，Git流程也是在控制台执行的。因此，每次操作后都会有一些输出，只有一个小的区别；Git使用Aptana Studio的系统控制台。
- en: Time for action – cloning a remote Git Repository
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 - 克隆远程Git仓库
- en: Navigate to the **App Explorer** view or the **Project Explorer** view. Right-click
    on the background of the view and select the **Import...** entry from the context
    menu.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**应用资源管理器**视图或**项目资源管理器**视图。在视图的背景上右键单击，从上下文菜单中选择**导入...**选项。
- en: On the window that has opened (as shown in the following screenshot), expand
    the `Git` folder. Select the **Git Repository as New Project** entry and click
    on **Next**.![Time for action – cloning a remote Git Repository](img/8246_09_03.jpg)
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开的窗口中（如下面的截图所示），展开`Git`文件夹。选择**将Git仓库作为新项目**选项，然后单击**下一步**。![操作时间 - 克隆远程Git仓库](img/8246_09_03.jpg)
- en: Now we have to determine the **URI** of the Git Repository that we wish to clone.
    For this example, we will choose the **Less Css** project with the following URI[https://github.com/cloudhead/less.js.git](https://github.com/cloudhead/less.js.git)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们必须确定我们希望克隆的Git仓库的**URI**。在此示例中，我们将选择具有以下URI的**Less Css**项目[https://github.com/cloudhead/less.js.git](https://github.com/cloudhead/less.js.git)
- en: Next, select the **Destination** directory for the project in which the cloned
    files should be stored.![Time for action – cloning a remote Git Repository](img/8246_09_04.jpg)
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择克隆文件应存储的项目**目标**目录。![操作时间 - 克隆远程Git仓库](img/8246_09_04.jpg)
- en: Finally, you can complete the process by clicking on the **Finish** button.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您可以通过单击**完成**按钮来完成此过程。
- en: '*What just happened?*'
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: 'We have cloned a Git Repository and created a new Aptana Studio project in
    the same process, in which the source code is copied. We can now extend this project.
    The following screenshot shows you the **Project Explorer** view, where you can
    find your Git project:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经克隆了Git仓库，并在同一过程中创建了一个新的Aptana Studio项目，其中源代码被复制。现在我们可以扩展此项目。以下截图显示了**项目资源管理器**视图，您可以在其中找到您的Git项目：
- en: '![What just happened?](img/8246_09_05.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/8246_09_05.jpg)'
- en: Sometimes, there are some files that should not be added to the Repository.
    In this instance, you can add these files to an ignore list similar to the SVN.
    Just select the related file, right-click on it, and select the **Add to .gitignore**
    entry under the **Team** entry. If it is the first file that was added to the
    ignore list, the Git Repository gets an additional `.gitignore` file in the same
    directory as the ignored file of the project.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，有些文件不应该添加到仓库中。在这种情况下，你可以将这些文件添加到一个类似于 SVN 的忽略列表中。只需选择相关的文件，右键单击它，然后在**团队**条目下选择**添加到
    .gitignore**条目。如果是第一个被添加到忽略列表的文件，Git 仓库会在与被忽略文件相同的目录中创建一个额外的 `.gitignore` 文件。
- en: Creating a Git Repository
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Git 仓库
- en: Creating a Git Repository is quick and easy to do. Refer to the following *Time
    for action* section to find out how to do this.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Git 仓库既快又简单。参考以下**行动时间**部分，了解如何进行此操作。
- en: Time for action – creating a new local Git Repository for a new or existing
    project
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 为新或现有项目创建新的本地 Git 仓库
- en: First, create a project if you want to create a local Git Repository for a new
    project.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，如果你想为新的项目创建本地 Git 仓库，请创建一个项目。
- en: Now, navigate to your project within the **Project Explorer** view, right-click
    on it, and then select the **Share Project...** entry in the **Team** tab.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在**项目资源管理器**视图中导航到你的项目，右键单击它，然后在**团队**选项卡下选择**共享项目...**条目。
- en: In the window that opens, as shown in the following screenshot, you have to
    select the type of repository that you want to use. Select **Aptana Git** and
    click on **Next**.![Time for action – creating a new local Git Repository for
    a new or existing project](img/8246_09_23.jpg)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在随后打开的窗口中，如图所示，你必须选择你想要使用的仓库类型。选择**Aptana Git**并点击**下一步**。![行动时间 – 为新或现有项目创建新的本地
    Git 仓库](img/8246_09_23.jpg)
- en: Configure the new Git repository. Aptana Studio creates the required infrastructure
    and saves them within the `.git` directory.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置新的 Git 仓库。Aptana Studio 创建所需的基础设施并将它们保存在 `.git` 目录中。
- en: Select your project entry within the list, click on **Create...** and that's
    it. Aptana Studio creates the local repository and deactivates the **Create...**
    button, as the project is now a Git repository project.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在列表中选择你的项目条目，点击**创建...**，然后就可以了。Aptana Studio 创建了本地仓库并禁用了**创建...**按钮，因为项目现在是一个
    Git 仓库项目。
- en: '![Time for action – creating a new local Git Repository for a new or existing
    project](img/8246_09_24.jpg)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 为新或现有项目创建新的本地 Git 仓库](img/8246_09_24.jpg)'
- en: Finally, you can close the window by clicking on the **Finish** button.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你可以通过点击**完成**按钮来关闭窗口。
- en: '*What just happened?*'
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**发生了什么？**'
- en: We have created a new project (just in case the project was previously not available)
    and integrated these projects into a new Git Repository. Now, let's do a bit of
    work on managing our source code versions within our new Git repository.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个新项目（以防项目之前不可用），并将这些项目集成到一个新的 Git 仓库中。现在，让我们在我们的新 Git 仓库中管理我们的源代码版本做一些工作。
- en: Time for action – working with a new local Git Repository
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 使用新的本地 Git 仓库
- en: Navigate to the **App Explorer** view and create a new file, for example, create
    one with the name `hello.php` and write some PHP code in it. Now our `Git` project
    and the new file will look like the following screenshot:![Time for action – working
    with a new local Git Repository](img/8246_09_25.jpg)
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**应用资源管理器**视图，创建一个新文件，例如，创建一个名为 `hello.php` 的文件，并在其中编写一些 PHP 代码。现在我们的 `Git`
    项目和新文件将看起来像以下截图所示：![行动时间 – 使用新的本地 Git 仓库](img/8246_09_25.jpg)
- en: The small question mark on the file icon shows you that this new file isn't
    currently under version control. In order to mark this file for the next commit,
    right-click on the new file and select the **Stage** entry. After this, the small
    question mark should change to a green plus sign.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件图标上的小问号告诉你，这个新文件目前还没有处于版本控制之下。为了标记这个文件以供下一次提交，右键单击新文件并选择**暂存**条目。之后，小问号应该会变成一个绿色的加号。
- en: Now you have created a new file, written some code into it, and marked this
    file for the next commit.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经创建了一个新文件，向其中写入了一些代码，并标记了这个文件以供下一次提交。
- en: In order to commit the new file into the local Repository, right-click on the
    file and select the **Commit...** entry.![Time for action – working with a new
    local Git Repository](img/8246_09_26.jpg)
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将新文件提交到本地仓库，右键单击文件并选择**提交...**条目。![行动时间 – 使用新的本地 Git 仓库](img/8246_09_26.jpg)
- en: The Commit window, similar to the previous screenshot, comes with four areas.
    At the top you will find the content from the currently selected file. At the
    bottom-left, you will find all the unstaged files; this includes all the files
    that you didn't want to commit. In the bottom-right, you will find all the staged
    files, also the files that you want to commit. Finally, at the bottom in the middle,
    you will find an area for a comment for the commit. Fill in a short comment about
    what you have done in the changed files and click on **Commit**.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交窗口，类似于前面的截图，包含四个区域。在顶部，您将找到当前选定文件的内容。在左下角，您将找到所有未暂存的文件；这包括您不想提交的所有文件。在右下角，您将找到所有已暂存的文件，也包括您想要提交的文件。最后，在底部中间，您将找到一个用于提交注释的区域。填写一个简短的注释，说明您在更改的文件中做了什么，然后点击**Commit**。
- en: After Git has finished performing the commit, the area on the bottom-right with
    the staged files will be cleared. Now you can close the window by clicking on
    the **Close** button.![Time for action – working with a new local Git Repository](img/8246_09_27.jpg)
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git完成提交操作后，右下角的暂存文件区域将被清除。现在您可以通过点击**Close**按钮关闭窗口。![操作时间 – 使用新的本地Git仓库](img/8246_09_27.jpg)
- en: Now that we have checked our first file into the Git repository, we can go forward
    and add some new lines within our file. After that, we can save these changes
    and take a closer look at the **App Explorer** view (as shown in the following
    screenshot). We will see that there is an ***** symbol included between the file
    icon and the filename. This shows that this file is "dirty" (this means that this
    file has changed since the last commit).![Time for action – working with a new
    local Git Repository](img/8246_09_28.jpg)
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经将第一个文件检入Git仓库，我们可以继续在文件中添加一些新行。之后，我们可以保存这些更改并更仔细地查看**App Explorer**视图（如下面的截图所示）。我们会看到在文件图标和文件名之间有一个*****符号。这表明该文件是“脏的”（这意味着自上次提交以来该文件已更改）。![操作时间
    – 使用新的本地Git仓库](img/8246_09_28.jpg)
- en: After you have extended your web application and you are satisfied with the
    result, you may want to commit these changes. You can perform this in a similar
    way. First you have to stage the files that you want to commit and then click
    on the **Commit...** button.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在扩展了您的Web应用并且对结果满意之后，您可能希望提交这些更改。您可以通过类似的方式执行此操作。首先，您必须暂存想要提交的文件，然后点击**Commit...**按钮。
- en: At the top of the commit window (as shown in the following screenshot), where
    the currently selected committed file is displayed, you can now see what has changed
    since the last commit.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在提交窗口的顶部（如下面的截图所示），显示当前选定的提交文件的地方，您现在可以看到自上次提交以来发生了什么变化。
- en: Green rows are rows that have been added, and red rows are rows that have been
    removed.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 绿色行表示已添加的行，红色行表示已删除的行。
- en: The left column where the line numbers are located has been duplicated. The
    left-hand side line contains the line numbers from the previous committed file,
    the right-hand side one contains the new line numbers from the current version
    of the file.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 存储行号的左侧列已被复制。左侧包含上一个提交文件的行号，右侧包含当前文件版本的新的行号。
- en: '![Time for action – working with a new local Git Repository](img/8246_09_29.jpg)'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作时间 – 使用新的本地Git仓库](img/8246_09_29.jpg)'
- en: In order to complete the commit process, click on the **Commit** button and
    then click on the **Close** button.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了完成提交过程，点击**Commit**按钮，然后点击**Close**按钮。
- en: If you have made some changes that you wish to undo, no problem. Right-click
    on the related file and select the **Revert...** entry. Now, Aptana Studio will
    restore the file to the last committed one.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您对某些更改想要撤销，没问题。右键单击相关文件并选择**Revert...**条目。现在，Aptana Studio将文件恢复到最后提交的状态。
- en: If the **Revert...** entry is grayed out, you may have already staged the file
    you want to revert. Just select the **Unstage...** entry first and then revert
    your changes.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果**Revert...**条目变灰，可能意味着您已经暂存了想要撤销的文件。首先选择**Unstage...**条目，然后撤销您的更改。
- en: '*What just happened?*'
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We have worked with our local Git Repository project. In short, we have created
    new files, filled them with code, and committed the first version into the Git
    Repository. After that, we have extended our files and committed these changes
    too. Additionally, we have seen what should be done if you want to undo the changes
    that you've made.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经与本地 Git 仓库项目进行了操作。简而言之，我们创建了新文件，填充了代码，并将第一个版本提交到 Git 仓库。之后，我们扩展了文件并提交了这些更改。此外，我们还看到了如果你想要撤销所做的更改应该怎么做。
- en: Pulling and pushing Git remote projects
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拉取和推送 Git 远程项目
- en: If you've finished working with the extension of your local clone for a project,
    or if you want to merge your local clone with a remote one in order to get new
    extensions, you will come to the point where you need to use the **Push** and
    **Pull** functionality.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经完成了对本地克隆项目扩展的工作，或者如果你想将本地克隆与远程克隆合并以获取新扩展，你将到达需要使用**推送**和**拉取**功能的地步。
- en: Firstly, we need to know what **Push** and **Pull** functions mean?
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要了解**推送**和**拉取**功能的意义是什么？
- en: A **Push** function sends all the changes from a local Git Repository to a remote
    one and merges them on the remote side, whereas a **Pull** function pulls all
    the changes from a remote Git Repository and merges them with the local one.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**推送**功能将本地 Git 仓库的所有更改发送到远程仓库，并在远程端合并，而**拉取**功能则是从远程 Git 仓库拉取所有更改，并与本地仓库合并。'
- en: Time for action – pulling and pushing Git remote projects
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 拉取和推送 Git 远程项目
- en: Navigate to the project that you want to push, within the **Project Explorer**
    view.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目资源管理器**视图中，导航到你想要推送的项目。
- en: Ensure that all the files that you want to push are already committed to the
    local Git Repository, otherwise you might get the message **Everything up-to-date**.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你想要推送的所有文件都已经提交到本地 Git 仓库，否则你可能会收到**一切更新**的消息。
- en: Right-click on the project root and select the **Push...** entry in the **Team**
    tab.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目根目录，在**团队**选项卡中选择**推送...**条目。
- en: If an authorization for the remote Git Repository is required, you will see
    the following window where you can enter your username and password:![Time for
    action – pulling and pushing Git remote projects](img/8246_09_30.jpg)
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要远程 Git 仓库的授权，你将看到以下窗口，你可以在此输入用户名和密码：![行动时间 - 拉取和推送 Git 远程项目](img/8246_09_30.jpg)
- en: After the Push process is complete, logging from the Git Repository within the
    **Console** view can be seen, as shown in the following screenshot:![Time for
    action – pulling and pushing Git remote projects](img/8246_09_31.jpg)
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在推送过程完成后，可以在**控制台**视图中看到 Git 仓库的日志，如下截图所示：![行动时间 - 拉取和推送 Git 远程项目](img/8246_09_31.jpg)
- en: The Pull process is also easy and can be done quickly. Navigate to the project
    that you want to merge by pulling a remote Git Repository, within the Project
    Explorer view. Right-click on it and then select **Team** | **Pull...**.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拉取过程也很简单，可以快速完成。在**项目资源管理器**视图中，导航到你想要通过拉取远程 Git 仓库进行合并的项目。右键单击它，然后选择**团队**|**拉取...**。
- en: In the background, Aptana Studio loads the remote Repository and merges it with
    your local Repository.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在后台，Aptana Studio 加载远程仓库并将其与你的本地仓库合并。
- en: 'After this process has completed and providing that no conflicts happen, the
    console shows you a list of all the files that are new or have changed, as shown
    in the following screenshot:'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此过程完成后，如果没有发生冲突，控制台会显示所有新文件或已更改文件的列表，如下截图所示：
- en: '![Time for action – pulling and pushing Git remote projects](img/8246_09_32.jpg)'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 - 拉取和推送 Git 远程项目](img/8246_09_32.jpg)'
- en: '*What just happened?*'
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We have seen how easy it is to push and pull remote Git Repositories. After
    pulling a remote Repository, all the new and changed files from the remote side
    were merged with your local Repository. While pushing your local Repository, you
    merged your local extensions with the remote Repository so that other developers
    can pull these new features.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到推送和拉取远程 Git 仓库是多么容易。在拉取远程仓库后，远程端的所有新文件和更改文件都会与你本地的仓库合并。而在推送本地仓库时，你将本地扩展与远程仓库合并，以便其他开发者可以拉取这些新功能。
- en: Have a go hero – checking out a Git Repository
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄之旅 - 检出 Git 仓库
- en: Now your task is to create your own remote Git Repository (maybe by a service
    like GitHub or something similar), and clone it within Aptana Studio into a local
    project. If the project is ready, begin to work within it and create source code
    files, stage them, and commit the progress in your work.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的任务是创建你自己的远程 Git 仓库（可能通过 GitHub 或类似的服务），并在 Aptana Studio 中将其克隆到本地项目中。如果项目已准备就绪，开始在其中工作，创建源代码文件，暂存它们，并在你的工作中提交进度。
- en: Pop quiz– testing your newly acquired Git knowledge
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速问答——测试你新获得的 Git 知识
- en: Q1\. What's the difference between a Git version control and an SVN version
    control?
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. Git 版本控制和 SVN 版本控制之间的区别是什么？
- en: There are no differences. Both contain the same logic just in different implementations.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有差异。两者都包含相同的逻辑，只是实现方式不同。
- en: Git is a distributed version control and SVN is a centralized version control.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git 是一个分布式版本控制系统，而 SVN 是一个集中式版本控制系统。
- en: Git is a centralized version control and SVN is a distributed version control.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git 是一个集中式版本控制系统，而 SVN 是一个分布式版本控制系统。
- en: Q2\. What can you do with the files that are not inserted into the Git Repository?
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. 你可以用什么方法处理未插入到 Git 仓库中的文件？
- en: Simply delete them from your project.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简单地将它们从你的项目中删除。
- en: Rename the file so that the filename begins with a point.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件重命名，使文件名以点开头。
- en: Add these files to the `.gitignore` file.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这些文件添加到 `.gitignore` 文件中。
- en: Summary
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: By the end of this chapter, you should be familiar with SVN and Git Repositories.
    By working with SVN Repositories you should know, in detail, how to add a new
    Repository and, how to check out the Repository into a project. After adding and
    checking out, you should know how to work with the SVN project. This means that
    you have to know how to commit your local changes, update your local working copy,
    and know how to use the SVN history for your work.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该熟悉 SVN 和 Git 仓库。通过使用 SVN 仓库，你应该详细了解如何添加一个新的仓库，以及如何将仓库检出到一个项目中。在添加和检出之后，你应该知道如何与
    SVN 项目一起工作。这意味着你必须知道如何提交你的本地更改，更新你的本地工作副本，以及如何使用 SVN 历史记录来辅助你的工作。
- en: While working with Git, you have not only seen how to clone a remote Git Repository
    and work with it within a local project, but also how to create your own local
    Git Repository. Within your local Git Repository, we had a look at the commit
    process and how to stage, unstage, and revert files. Finally, we had a look at
    how to push and pull a Git Repository.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Git 的过程中，你不仅看到了如何克隆远程 Git 仓库并在本地项目中与之工作，还看到了如何创建你自己的本地 Git 仓库。在你的本地 Git
    仓库中，我们查看了一下提交过程以及如何暂存、取消暂存和撤销文件。最后，我们查看了一下如何推送和拉取 Git 仓库。
- en: In the next chapter, we will learn how to work in an optimal way with PHP within
    Aptana Studio.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在 Aptana Studio 中以最佳方式使用 PHP。
