- en: Building a Single Page App using Web Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Web Components构建单页应用
- en: So far, we have been using Web Components as an individual entity. But Web Components
    can be used to make something even more complicated. In this chapter, we will
    be making a single page web app, solely with the help of Web Components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直将Web Components作为一个独立实体来使用。但Web Components可以用来构建更复杂的东西。在本章中，我们将使用Web
    Components来构建一个单页网络应用。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding project requirements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解项目需求
- en: Figuring out reusable Web Components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定可重用Web组件
- en: Configuring starter project and APIs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置启动项目和API
- en: App components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用组件
- en: Other components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他组件
- en: Implementing routing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现路由
- en: Enabling analytics
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用分析
- en: Understanding project requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解项目需求
- en: When it comes to a single-page web app, it can be anything from one page to
    a thousand pages that you can show on the web app. But for the simplicity of this
    web app, we will keep it to a maximum of three pages. And the project that we
    will be trying to create is a GIF collection web app.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到单页网络应用时，它可以是从一页到一千页，你可以在网络应用上显示的内容。但为了这个网络应用的简单性，我们将将其限制在最多三页。我们将尝试创建的项目是一个GIF收藏网络应用。
- en: We all have been on the internet, and seen how memes and GIFs circulate. In
    this web app, we will be building something like a GIF repository. The purpose
    of this web app is to let the user see a list of trending GIFs, search for a specific
    topic, or maybe see a random GIF.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都上网过，见过梗图和GIF是如何传播的。在这个网络应用中，我们将构建一个类似GIF库的东西。这个网络应用的目的让用户看到一系列热门GIF，搜索特定主题，或者随机查看一个GIF。
- en: What we are also going to do is use the GIPHY API to get the GIFs. This way,
    we won't have to worry about manually scanning the web for GIFs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用GIPHY API来获取GIF。这样，我们就不必担心手动在网上扫描GIF了。
- en: Now that we have a basic understanding of our web app and the purpose behind
    it, let's take a look at how we can convert this requirement into a set of reusable
    Web Components.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对我们网络应用及其背后的目的有了基本了解，让我们看看我们如何将这个需求转换成一组可重用的Web Components。
- en: Figuring out reusable Web Components
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定可重用Web组件
- en: 'The main page of the web app we''re aiming to create might look something like
    this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们旨在创建的Web应用的首页可能看起来像这样：
- en: '![](img/87b5895f-061c-49f0-b00d-0f97962a9ea7.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87b5895f-061c-49f0-b00d-0f97962a9ea7.png)'
- en: 'This page shows that there is a header on top, an input field and a button
    that can be used to search a string, and a set of results. When we break this
    page into a set of components, the component list looks something like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本页展示了顶部有一个标题栏，一个输入字段和一个按钮，可以用来搜索字符串，以及一组结果。当我们把这个页面分解成一组组件时，组件列表看起来可能像这样：
- en: '**Header component**: A header that can be used on all pages. It needs to be
    sticky on the top, and clicking on the links should change the URL.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标题组件**：一个可以在所有页面上使用的标题栏。它需要固定在顶部，点击链接应该改变URL。'
- en: '**GIF cover component**: A component that takes a URL as an attribute and shows
    it. It can also have a height limit.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GIF封面组件**：一个组件，它接受一个URL作为属性并显示它。它还可以有一个高度限制。'
- en: '**Search bar component**: A component that is responsible for getting input
    from a user and searching for a string with the help of APIs. And when the search
    is complete, it returns the results with the help of a custom event.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索栏组件**：一个负责从用户那里获取输入并使用API搜索字符串的组件。搜索完成后，它通过自定义事件返回结果。'
- en: '**Search container**: A component that will have a Search bar component inside
    it, and will show GIF cover components based on the result obtained by the Search
    bar.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索容器**：一个包含搜索栏组件的组件，并将根据搜索栏得到的结果显示GIF封面组件。'
- en: 'Let''s take a look at the trending page. What this page is supposed to do,
    just like the search page, is show a collection of GIFs, but instead of making
    the user search for a specific string, it needs to show the trending GIFs. You
    should be able to find something similar on the Giphy site: [https://giphy.com/trending-gifs](https://giphy.com/trending-gifs).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看热门页面。这个页面应该做的事情，就像搜索页面一样，是展示一系列GIF，但不是让用户搜索特定的字符串，而是需要展示热门GIF。你应该能在Giphy网站上找到类似的东西：[https://giphy.com/trending-gifs](https://giphy.com/trending-gifs)。
- en: 'This is what it will look like:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的样子：
- en: '![](img/88992eb6-5012-49cc-9d71-433662a668eb.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88992eb6-5012-49cc-9d71-433662a668eb.png)'
- en: 'As you can see, it doesn''t look that much different from the search page.
    Let''s break down the page into Web Components:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它与搜索页面看起来并没有太大的不同。让我们将页面分解为 Web Components：
- en: '**Header component**: Same as previously'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标题组件**：与之前相同'
- en: '**GIF cover**: The same component that we used on the last page to show GIFs'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GIF 封面**：与上一个页面中用来显示 GIF 的相同组件'
- en: '**Show Trending component**: The container component that will make the call
    to the API to get trending GIFs and create a collection of GIF Cover components'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示趋势组件**：容器组件，将调用 API 获取趋势 GIF 并创建 GIF 封面组件集合'
- en: In all, we will be using just three components for this page.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我们将在这个页面上使用三个组件。
- en: 'Let''s take a look at the last page. This page is responsible for showing a
    randomly generated GIF, and this is what it will look like:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看最后一页。这个页面负责显示随机生成的 GIF，它看起来是这样的：
- en: '![](img/8e9e198e-da21-4a71-92b6-cd30a84f8dd7.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e9e198e-da21-4a71-92b6-cd30a84f8dd7.png)'
- en: 'As you can see, there is a header at the top, a random GIF, and a button to
    get another random GIF. Let''s break it down into Web Components:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，页面顶部有一个标题，一个随机的 GIF，以及一个获取另一个随机 GIF 的按钮。让我们将其分解为 Web Components：
- en: '**Header component**: Same as previously.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标题组件**：与之前相同。'
- en: '**GIF cover**: Same as the last one, but we won''t be seeing a lot of them.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GIF 封面**：与上一个相同，但我们不会看到很多。'
- en: '**Show Random component**: A component that is responsible for making the API
    call to get a random GIF. It also needs to have a button that needs to trigger
    the API again when it is clicked.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示随机组件**：一个负责调用 API 获取随机 GIF 的组件。它还需要有一个按钮，当点击时需要再次触发 API。'
- en: Now that we know what Web Components are required for this project, let's start
    working on it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了该项目所需的 Web Components，让我们开始工作。
- en: Configuring the Starter Project and APIs
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置入门项目和 API
- en: 'A starter project is the most minimalistic project that is configured for a
    single page web app. You can download it from the `Starter Project` directory
    and put it anywhere on your computer via the following link: [https://github.com/PacktPublishing/Getting-Started-with-Web-Components/tree/master/Chapter06](https://github.com/PacktPublishing/Getting-Started-with-Web-Components/tree/master/Chapter06)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 入门项目是最简约的项目，它为单页网页应用进行了配置。你可以从 `Starter Project` 目录下载它，并通过以下链接将其放置在电脑上的任何位置：[https://github.com/PacktPublishing/Getting-Started-with-Web-Components/tree/master/Chapter06](https://github.com/PacktPublishing/Getting-Started-with-Web-Components/tree/master/Chapter06)
- en: Pre-requisites
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预先条件
- en: Before you start using this project, make sure that you have Node.js installed
    on your computer. You can install it from the Node.js website ([https://nodejs.org/en/](https://nodejs.org/en/))
    or, if you want, you can use Homebrew ([https://brew.sh/](https://brew.sh/)) to
    install it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用此项目之前，请确保你的电脑上已安装 Node.js。你可以从 Node.js 网站（[https://nodejs.org/en/](https://nodejs.org/en/)）安装它，或者如果你想的话，可以使用
    Homebrew（[https://brew.sh/](https://brew.sh/)）来安装它。
- en: Setting up the project
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: Once you are done installing Node.js, you will need to install certain packages
    that would make the project work without doing a lot of manual configurations
    at our end. All the packages are already specified in the `package.json` file.
    If you want, feel free to look at the contents of this file. The most important
    package is `webpack`, which is going to be used for bundling our code so that
    it can be served on a server. Another important package is `node-sass`. It will
    help us write our code in SCSS.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装完 Node.js，你将需要安装一些使项目能够正常工作而无需在我们这一端进行大量手动配置的包。所有包都已经指定在 `package.json`
    文件中。如果你想的话，可以随意查看这个文件的内容。最重要的包是 `webpack`，它将被用来打包我们的代码，以便在服务器上提供服务。另一个重要的包是 `node-sass`。它将帮助我们用
    SCSS 编写代码。
- en: I am assuming that you know a little bit of SCSS. It is mostly CSS, but if you
    get confused, feel free to take a look at the SCSS documentation ([https://sass-lang.com/documentation/synta](https://sass-lang.com/documentation/syntax)[x](https://sass-lang.com/documentation/syntax)).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设你稍微了解一些 SCSS。它主要是 CSS，但如果你有疑问，可以随意查看 SCSS 文档（[https://sass-lang.com/documentation/synta](https://sass-lang.com/documentation/syntax)[x](https://sass-lang.com/documentation/syntax)）。
- en: 'You can install the packages involved by typing the following steps in the
    Terminal:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在终端中输入以下步骤来安装相关的包：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will install all the packages that will be required for this project. It
    might take a few minutes though, based on the speed of your internet connection.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装该项目所需的所有包。不过，根据你的网络连接速度，可能需要几分钟。
- en: Running the Starter Project
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行启动项目
- en: Now that we have installed all our dependencies, it is time to run the Starter
    Project and see what it looks like.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了所有依赖项，是时候运行启动项目并看看它的样子了。
- en: 'To start the project, run the following command in the Terminal:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动项目，请在终端中运行以下命令：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will show you the following output:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示以下输出：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This means that webpack is done creating a `bundle.js` file from the six listed
    files. And, you can simply go to a browser and open the following URL: `http://localhost:3000`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 webpack 已经从六个列出的文件中创建了一个 `bundle.js` 文件。然后，你只需打开浏览器并访问以下 URL：`http://localhost:3000`。
- en: This will show our starter project with the text My App.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示带有文本“我的应用”的启动项目。
- en: Pre-requisite for API calls
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 调用的先决条件
- en: 'You, as a user, will need to register for an API key and this can be done by
    following the steps as shown here:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 作为用户，你需要注册一个 API 密钥，这可以通过遵循以下步骤完成：
- en: Go to the following URL and register for a free account: [https://developers.giphy.com](https://developers.giphy.com)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往以下网址并注册一个免费账户：[https://developers.giphy.com](https://developers.giphy.com)
- en: 'Once you are done creating an account, create an app by clicking on the Create
    New App button at the top, as follows:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你完成了账户的创建，可以通过点击顶部的“创建新应用”按钮来创建一个应用，如下所示：
- en: '![](img/ae35e90b-8157-4e3a-96c5-ffb0a8f75e8c.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae35e90b-8157-4e3a-96c5-ffb0a8f75e8c.png)'
- en: 'Once you are done creating the app, you will be dropped onto a dashboard page
    where you can see your registered apps along with the API key required, as shown
    in the following screenshot:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你完成了应用的创建，你将被带到仪表板页面，在那里你可以看到你注册的应用以及所需的 API 密钥，如下面的截图所示：
- en: '![](img/6270799a-1f18-4356-9ad5-9788b821f758.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6270799a-1f18-4356-9ad5-9788b821f758.png)'
- en: If you have a moment, feel free to take a look at the API docs: [https://developers.giphy.com/docs/](https://developers.giphy.com/docs/).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你方便的话，可以查看 API 文档：[https://developers.giphy.com/docs/](https://developers.giphy.com/docs/)。
- en: But you don't have to worry about the APIs too much; we will be talking about
    this when we talk about components.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 但你不必过分担心 API；当我们谈到组件时，我们会讨论这个问题。
- en: App components
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用组件
- en: 'Before we take a look at the `<my-app>` component, let''s take a look at what
    happens when you go to `localhost:3000`. The `index.html` file runs. The contents
    of `index.html` look something like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看 `<my-app>` 组件之前，让我们看看当你访问 `localhost:3000` 时会发生什么。`index.html` 文件会运行。`index.html`
    的内容看起来像这样：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see, it is trying to render the `<my-app>` component. But it tries
    to get the definition of `MyApp` from the `bundle.js` file. This `bundle.js` file,
    as discussed earlier, is a collection of all the components that are required
    on the page and will be required by the `<my-app>` component. This `bundle.js`
    file is created with the help of webpack. And the configuration of the `bundle.js`
    file can be found in the `webpack.config.js` file, which looks something like
    this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它正在尝试渲染 `<my-app>` 组件。但它试图从 `bundle.js` 文件中获取 `MyApp` 的定义。正如之前讨论的，这个 `bundle.js`
    文件是页面所需的所有组件的集合，将被 `<my-app>` 组件所需要。这个 `bundle.js` 文件是由 webpack 创建的。而 `bundle.js`
    文件的配置可以在 `webpack.config.js` 文件中找到，看起来像这样：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The entry file that is chosen is the `/src/index.js` file. But then again,
    where does the `bundle.js` part come from? If you look at the bottom in the `webpack.config.js`
    file, you will see something like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 被选中的入口文件是 `/src/index.js` 文件。但再次问一下，`bundle.js` 部分是从哪里来的？如果你查看 `webpack.config.js`
    文件的最底部，你会看到类似以下的内容：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we are making sure that everything that is inside the entry file, `/src/index.js`,
    gets written to the `bundle.js` file. You can definitely modify this file if you
    have experience with webpack. But for the sake of simplicity, we are going to
    leave it as is.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们确保入口文件 `/src/index.js` 中的一切都被写入到 `bundle.js` 文件中。如果你有 webpack 的经验，你当然可以修改这个文件。但为了简单起见，我们将保持原样。
- en: 'Let''s take a look at the `/src/index.js` file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `/src/index.js` 文件：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What we are seeing here is that, it is importing a `styles.scss` file, which
    can be used to store our global styles, and then it is importing our `MyApp` class
    from the `/components/my-app` folder. And then, it defines the custom element.
    This is something that we have already looked into in [Chapter 1](a40f739f-c213-4862-a256-a7e76eff4370.xhtml),
    *Web Components Essentials and Specifications*.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到的是，它正在导入一个 `styles.scss` 文件，这个文件可以用来存储我们的全局样式，然后它从 `/components/my-app`
    文件夹中导入我们的 `MyApp` 类。然后，它定义了自定义元素。这是我们已经在 [第1章](a40f739f-c213-4862-a256-a7e76eff4370.xhtml)
    中探讨过的内容，*Web Components 基础和规范*。
- en: If we look into the `MyApp` class, we will find that there is nothing different
    than what we have already learned in the previous chapters.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看 `MyApp` 类，我们会发现其中没有什么比之前章节学到的内容更复杂。
- en: 'The `constructor()` method is no different:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`constructor()` 方法并无不同：'
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `render()` method is pretty simple as well:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`render()` 方法同样很简单：'
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `getStyle()` and `getTemplate()` methods are the same as well; no different
    from what we have learned previously:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`getStyle()` 和 `getTemplate()` 方法也是一样的；与之前学到的没有区别：'
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With the help of the code here, we can understand how the app component works
    and how it is the most important Web Component in order to make our single page
    web app work.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这里的代码，我们可以理解应用组件是如何工作的，以及它为什么是使我们的单页Web应用工作的最重要的Web组件。
- en: Functional components
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数式组件
- en: Now that we know what the `<my-app>` component looks like and what it needs
    to work, let's start writing the components that we discussed in the beginning
    of this chapter.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道了 `<my-app>` 组件的样貌以及它需要什么来工作，让我们开始编写本章开头讨论的组件。
- en: The <gif-cover> Web Component
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`<gif-cover>` 网页组件'
- en: 'As discussed earlier, the purpose of this web component is to show a GIF. And,
    from the screenshots, we can see that it is one of the most reusable components
    of the project. So, let''s start writing its code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这个网页组件的目的是显示一个GIF。从截图来看，它是项目中可重用性最高的组件之一。所以，让我们开始编写它的代码：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `constructor()`, we are using `this.url` to grab the URL from the attribute.
    We will be using this URL as a source for the image, as shown in the following
    code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `constructor()` 中，我们使用 `this.url` 从属性中获取URL。我们将使用这个URL作为图像的源，如下面的代码所示：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We will also need styles for this component; we can achieve this by adding
    the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要为这个组件添加样式；我们可以通过添加以下内容来实现：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, the only limitation that we are putting on this component is
    the image height. You can definitely remove it if you don't like it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们对这个组件施加的唯一限制是图像高度。如果你不喜欢，完全可以去掉它。
- en: Once our `<gif-cover>` web component is done, we can move on to another web
    component.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的 `<gif-cover>` 网页组件完成时，我们可以继续编写另一个网页组件。
- en: The <search-bar> Web Component
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`<search-bar>` 网页组件'
- en: If we take a look at the Search page, we will see that there is a search bar.
    The input field and the Search button are a part of this `<search-bar>` component
    and are responsible for making API calls.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看搜索页面，我们会看到一个搜索栏。输入字段和搜索按钮是这个 `<search-bar>` 组件的一部分，并负责发起API调用。
- en: The API call that we will be using here is the GIPHY Search Endpoint API, `https://api.giphy.com/v1/gifs/search`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的是GIPHY搜索端点API，`https://api.giphy.com/v1/gifs/search`。
- en: The preceding link is an API link. You cannot access it directly, but you can
    use it to grab data if you have a key.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的链接是一个API链接。你不能直接访问它，但如果你有一个密钥，你可以用它来获取数据。
- en: You will need to provide it with your key, which can be obtained from your dashboard.
    And, you may want to take a look at the docs here: [https://developers.giphy.com/docs/#operation--gifs-search-get](https://developers.giphy.com/docs/#operation--gifs-search-get).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要提供你的密钥，这可以从你的仪表板中获取。你可能还想看看这里的文档：[https://developers.giphy.com/docs/#operation--gifs-search-get](https://developers.giphy.com/docs/#operation--gifs-search-get)。
- en: When you make a call to this API, it is going to return an array of objects,
    each representing a GIF and its metadata.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用这个API时，它将返回一个对象数组，每个对象代表一个GIF及其元数据。
- en: 'Now that we know what API to use, let''s take a look at the code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了要使用哪个API，让我们看看代码：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `constructor()` method contains your key (which you will get from the GIPHY
    dashboard), the search URL, which is the API URL, and the limit or the amount
    to show in one call. Let''s take a look at the `render()` method:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`constructor()` 方法包含了你的密钥（你将在GIPHY仪表板中获取），搜索URL，即API URL，以及每次调用显示的限制或数量。让我们看看
    `render()` 方法：'
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'It is nothing unusual. We just have a text field and a button. And the styles
    look something like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这没有什么不寻常的。我们只有一个文本字段和一个按钮。样式看起来大致如下：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Along with basic rendering, we will also need to add a click event for the
    button, so that it can make a call to the API:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基本的渲染外，我们还需要为按钮添加一个点击事件，以便它可以调用 API：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This way, when a user clicks on the button, it is going to trigger the `handleSearch()`
    method, which looks something like this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，当用户点击按钮时，它将触发 `handleSearch()` 方法，其代码如下：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here, in the `handleSearch()` function, we are first getting the value of the
    input field. This is the value that the user entered. Then, we are making a call
    to the API by concatenating the API URL. The URL looks like the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，在 `handleSearch()` 函数中，我们首先获取输入字段的值。这是用户输入的值。然后，我们通过连接 API URL 来调用 API。URL
    看起来如下：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This will get the URL from the `searchUrl` variable, and the key from the `key`
    variable. The `value` is obtained from the input field. And the limit is obtained
    from the `showlimit` variable.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从 `searchUrl` 变量获取 URL，从 `key` 变量获取键。`value` 从输入字段获取。`limit` 从 `showlimit`
    变量获取。
- en: 'Once the call is made, and the promise resolves, it will call the `dispatchDataInEvent()`
    method:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦调用完成，并且承诺解决，它将调用 `dispatchDataInEvent()` 方法：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This `dispatchDataInEvent()` method will be responsible for notifying the parent
    Web Component of the new data that is obtained after the call.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `dispatchDataInEvent()` 方法将负责通知父 Web 组件在调用后获得的新数据。
- en: Now that we have created Web Components that can be reused in the `<search-container>`
    component, let's take a look at `<search-container>`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了可以在 `<search-container>` 组件中重用的 Web 组件，让我们看看 `<search-container>`。
- en: The <search-container> Web Component
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`<search-container>` Web 组件'
- en: 'Since the `<search-container>` component is going to use the `<gif-cover>`
    and `<search-bar>` components, the outline of our component will look something
    like this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `<search-container>` 组件将使用 `<gif-cover>` 和 `<search-bar>` 组件，我们的组件轮廓看起来大致如下：
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We are simply importing the classes of the Web Components that are going to
    be used in this component. This is pretty much the exact same thing that we have
    used in our `index.html` files.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是导入在这个组件中将使用的 Web 组件的类。这基本上和我们在 `index.html` 文件中使用的是完全相同的事情。
- en: 'Let''s take a look at the `constructor()` method:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `constructor()` 方法：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here, we have a `registerOtherComponents()` method that we are calling before
    the `render()` method. This is also the first time we are registering a custom
    element inside another custom element:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有一个 `registerOtherComponents()` 方法，我们在调用 `render()` 方法之前调用它。这也是我们第一次在另一个自定义元素内部注册自定义元素：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, we are first checking if the component has already been registered or
    not. If it has not been registered yet, then it registers it. Usually, a browser
    spits out an error message if it tries to register a custom element twice. This
    check is to fix that problem.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先检查组件是否已经被注册。如果尚未注册，那么就进行注册。通常，如果浏览器尝试两次注册一个自定义元素，它会抛出一个错误信息。这个检查是为了解决这个问题。
- en: 'Once we are done registering the Web Components, it''s time to render:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成 Web 组件的注册，就到了渲染的时候：
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here, we are rendering the `<search-bar>` component, but we do not see the
    `<gif-cover>` component. This is because the `<gif-cover>` components are to be
    shown only when data is retrieved from the `<search-bar>` component, and that
    is done when the `<search-bar>` component dispatches a `search-complete` event.
    Let''s take a look at the `connectedCallback()` callback to add this event handler:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们正在渲染 `<search-bar>` 组件，但我们没有看到 `<gif-cover>` 组件。这是因为 `<gif-cover>` 组件只有在从
    `<search-bar>` 组件检索数据时才显示，这是在 `<search-bar>` 组件派发 `search-complete` 事件时完成的。让我们看看
    `connectedCallback()` 回调以添加此事件处理器：
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here, we are looking for the `<search-bar>` element and adding an event listener.
    When that event occurs, it is going to trigger the `handleSearchData()` method
    and pass the associated data into it:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们正在寻找 `<search-bar>` 元素并添加一个事件监听器。当该事件发生时，它将触发 `handleSearchData()` 方法并将相关数据传递给它：
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Just like the student list example in the previous chapters, here we are creating
    an HTML collection of `<gif-cover>` Web Components with the URL obtained from
    the `data` array, and then appending this HTML to the `search-container__images`
    `div`. This will also make sure to replace the `<gif-cover>` with new data when
    the user searches for something else.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 就像前几章中的学生名单示例一样，这里我们正在创建一个HTML集合，包含从`data`数组中获取的`<gif-cover>` Web Components的URL，然后将这个HTML附加到`search-container__images`
    `div`中。这也会确保当用户搜索其他内容时，用新数据替换`<gif-cover>`。
- en: 'Also, the `getStyles()` method is important. This is what it looks like:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`getStyles()`方法也很重要。它看起来是这样的：
- en: '[PRE26]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now that we have our `<search-container>` Web Component all set, let''s add
    it to the `<my-app>` component, as shown here:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将`<search-container>` Web Component设置好了，让我们将其添加到`<my-app>`组件中，如下所示：
- en: '[PRE27]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Also, don''t forget to register the component, as shown in the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，别忘了按照以下方式注册组件：
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This way, we can make sure that `SearchContainer` is initialized only once.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们可以确保`SearchContainer`只初始化一次。
- en: Feel free to run the code and see if you are able to see a search bar; clicking
    on the search button will return some results.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 随意运行代码，看看你是否能看到搜索栏；点击搜索按钮将返回一些结果。
- en: Let's take a look at the `<show-trending>` component.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`<show-trending>`组件。
- en: The <show-trending> Web Component
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`<show-trending>` Web Component'
- en: The purpose of the `<show-trending>` Web Component is to first make a call to
    the API and then show the most trending GIFs. For this component, the API that
    we will be using is, `https://api.giphy.com/v1/gifs/trending`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`<show-trending>` Web Component的目的首先是对API进行调用，然后显示最热门的GIF。对于这个组件，我们将使用的API是，`https://api.giphy.com/v1/gifs/trending`。'
- en: Like the previous API, this also returns an array of objects that contains the
    URL and other metadata. To take a look at the documentation for this API, visit
    this link: [https://developers.giphy.com/docs/#operation--gifs-trending-get](https://developers.giphy.com/docs/#operation--gifs-trending-get).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前的API一样，这个API也返回一个包含URL和其他元数据的对象数组。要查看此API的文档，请访问此链接：[https://developers.giphy.com/docs/#operation--gifs-trending-get](https://developers.giphy.com/docs/#operation--gifs-trending-get)。
- en: 'Now that we know how the API works, lets take a look at the code for the `<show-trending>`
    Web Component:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经知道了API的工作方式，让我们来看看`<show-trending>` Web Component的代码：
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here, just like the `<search-bar>` components, we have a `key` variable for
    `YOUR_KEY`, the URL to store the API call, and the `showlimit` variable to set
    the max amount of data that can come from the API call.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，就像`<search-bar>`组件一样，我们有一个`key`变量用于`YOUR_KEY`，这是存储API调用的URL，以及`showlimit`变量用于设置从API调用中可以获取的最大数据量。
- en: 'We have already seen how our `registerOtherComponents()` method should work,
    as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了`registerOtherComponents()`方法应该如何工作，如下所示：
- en: '[PRE30]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Also, don''t forget to import the `GifCover` component:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，别忘了导入`GifCover`组件：
- en: '[PRE31]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let''s take a look at the `render()` method:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`render()`方法：
- en: '[PRE32]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Here, we just have a `show-trending__images` div that will have `<gif-cover>`
    Web Components once the API call is made.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们只有一个`show-trending__images` div，一旦进行API调用，它将包含`<gif-cover>` Web Components。
- en: 'The `getStyles()` method looks something like this:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`getStyles()`方法看起来像这样：'
- en: '[PRE33]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now that we have the component set up, it is time to make sure that the component
    makes the API call:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了组件，是时候确保组件能够进行API调用了：
- en: '[PRE34]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'What we are doing is simply making the call when the component is connected
    and DOM is added to the page. Once we have the data from the `fetch` call, we
    pass this data to the `handleTrendingData()` method:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的是在组件连接和DOM添加到页面时进行调用。一旦我们从`fetch`调用中获取了数据，我们就将此数据传递给`handleTrendingData()`方法：
- en: '[PRE35]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: As you can see, this `handleTrendingData()` method is responsible for creating
    `<gif-cover>` Web Components, giving them GIF URLs, and adding them to the `show-trending__images`
    div.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这个`handleTrendingData()`方法负责创建`<gif-cover>` Web Components，为它们提供GIF URL，并将它们添加到`show-trending__images`
    div中。
- en: Just like the `<search-container>` component, you can test the `<show-trending>`
    component inside the `<my-app>` component.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`<search-container>`组件一样，你可以在`<my-app>`组件内部测试`<show-trending>`组件。
- en: The <show-random> Web Component
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`<show-random>` Web Component'
- en: 'Just like the `<show-trending>` Web Component, this is a container Web Component.
    That means it will be using other components in a nested way. The component that
    it will be using is `<gif-cover>`. Let''s see what the outline looks like:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`<show-trending>` Web Component一样，这是一个容器Web Component。这意味着它将以嵌套的方式使用其他组件。它将使用的组件是`<gif-cover>`。让我们看看它的结构：
- en: '[PRE36]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'And, the `constructor()` method looks something like this:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 而 `constructor()` 方法看起来像这样：
- en: '[PRE37]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Here, the API that we are using is, `https://api.giphy.com/v1/gifs/random`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们使用的 API 是，`https://api.giphy.com/v1/gifs/random`。
- en: Unlike the previous APIs, this one spits out only one object at a time. This
    object will have the URL and other metadata associated with a GIF. If you need
    more information on it, feel free to refer to the documentation: [https://developers.giphy.com/docs/#operation--gifs-random-get](https://developers.giphy.com/docs/#operation--gifs-random-get)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的 API 不同，这个 API 每次只输出一个对象。这个对象将包含与 GIF 相关的 URL 和其他元数据。如果您需要更多关于它的信息，请随时参考文档：[https://developers.giphy.com/docs/#operation--gifs-random-get](https://developers.giphy.com/docs/#operation--gifs-random-get)
- en: 'The `registerOtherComponents()` method looks exactly the same as the previous
    one:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`registerOtherComponents()` 方法与之前的一个完全相同：'
- en: '[PRE38]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Also, the `render()` method looks something like this:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`render()` 方法看起来像这样：
- en: '[PRE39]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Here, we see that we have a div, `show-random__images`, to show the random
    image. And, there is a button right below it. The `getStyle()` method looks like
    this:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到有一个用于显示随机图片的 div，`show-random__images`，以及在其下方的一个按钮。`getStyle()` 方法看起来像这样：
- en: '[PRE40]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now that the component is set up, let''s make the API call:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在组件已经设置好了，让我们发起 API 调用：
- en: '[PRE41]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This `handleRandom()` function is responsible for making the API call, and
    when the data is retrieved, it passes it to the `handleTrendingData()` method:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `handleRandom()` 函数负责进行 API 调用，当数据被检索时，它将数据传递给 `handleTrendingData()` 方法：
- en: '[PRE42]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We also need to make sure that the image refreshes when the button is clicked.
    So, we can add this event listener inside the `connectedCallback()` method to
    make it work:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要确保当按钮被点击时图片会刷新。因此，我们可以在 `connectedCallback()` 方法内添加此事件监听器以使其工作：
- en: '[PRE43]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This way, whenever the button is clicked, it will trigger the `handleRandom()`
    method again.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，每次按钮被点击时，它都会再次触发 `handleRandom()` 方法。
- en: The <my-app> component
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`<my-app>` 组件'
- en: Just like the `<show-trending>` and `<search-container>` components, you can
    test the `<show-random>` Web Component by adding the `<show-random>` component
    inside the `<my-app>` component. But if you want to integrate it all, I have a
    better option.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 `<show-trending>` 和 `<search-container>` 组件一样，您可以通过在 `<my-app>` 组件内添加 `<show-random>`
    组件来测试 `<show-random>` Web 组件。但如果你想要集成所有这些，我有一个更好的选择。
- en: 'Let''s take a look at the `<my-app>` component. If we want all these three
    components, we will need to include it first:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `<my-app>` 组件。如果我们想包含这三个组件，我们首先需要引入它：
- en: '[PRE44]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now that we have these components imported, lets register these custom elements:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经引入了这些组件，让我们注册这些自定义元素：
- en: '[PRE45]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We can also add a `showSection` variable to keep track of what component to
    show at what time:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以添加一个 `showSection` 变量来跟踪在什么时间显示哪个组件：
- en: '[PRE46]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We are initially setting it to a value of `1`, so that it can show `<search-container>`
    by default.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最初将其设置为 `1` 的值，这样就可以默认显示 `<search-container>`。
- en: 'And, to make it work, we will modify the `getTemplate()` method a little bit
    to look something like this:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让它工作，我们将稍微修改一下 `getTemplate()` 方法，使其看起来像这样：
- en: '[PRE47]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This way, you can test the pages manually by changing the value of `showSection`.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，您可以通过更改 `showSection` 的值来手动测试页面。
- en: Now that we have created a way where we can show different page level components
    by changing the value of the variable `showSections`, we can now concentrate on
    the routing aspect of these page level components. Rather than manually changing
    the page numbers, it is time to automate this page change concept with the implementation
    of routing.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一种方法，可以通过更改变量 `showSections` 的值来显示不同的页面级组件，我们现在可以专注于这些页面级组件的路由方面。而不是手动更改页面编号，现在是时候通过实现路由来自动化页面更改的概念了。
- en: Implementing routing
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现路由
- en: Until now, we have been manually changing the code to see different pages of
    our single-page web app. Also, we have not talked about the header component yet.
    In this section, we will take a look at the header component, update the URLs
    based on the link, and make sure our page view changes based on the link clicked.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在手动更改代码来查看单页 Web 应用程序的不同页面。此外，我们还没有讨论过头部组件。在本节中，我们将查看头部组件，根据链接更新 URL，并确保我们的页面视图根据点击的链接进行更改。
- en: 'So, let''s take a look at the `<custom-header>` component:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们看看 `<custom-header>` 组件：
- en: '[PRE48]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The `constructor()` method is straightforward. Let''s take a look at the `render()`
    method:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`constructor()` 方法很简单。让我们看看 `render()` 方法：'
- en: '[PRE49]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'As you can see, we have three links: **Search**, **Trending**, and **Random**.
    Clicking on these links also changes the URL hash:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们有三个链接：**搜索**、**趋势**和**随机**。点击这些链接也会改变URL的hash值：
- en: '[PRE50]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The styles are pretty simple as well.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 样式也很简单。
- en: 'Let''s take a look at the event handlers for the click. For routing, we will
    need to notify the `<my-app>` Web Component (where this `<custom-header>` component
    is going to be used) about the click event or what link the user clicked on:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看点击事件的处理器。对于路由，我们需要通知`<my-app>`Web组件（这个`custom-header`组件将要被使用的地方）关于点击事件或用户点击了哪个链接：
- en: '[PRE51]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Here, we are simply binding a click event to all the links and making sure
    that the `handleClick()` method is triggered, along with the `index` of the link:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是将点击事件绑定到所有链接上，并确保触发`handleClick()`方法，以及链接的`index`：
- en: '[PRE52]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: This `handleClick()` method simply passes this index value to the parent component
    trying to listen to the `custom-header-clicked` event.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`handleClick()`方法只是将这个索引值传递给父组件，尝试监听`custom-header-clicked`事件。
- en: 'Inside the `<my-app>` component, the definition will update as well. For example,
    we will need to import the `CustomHeader` class:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<my-app>`组件内部，定义也会相应更新。例如，我们需要导入`CustomHeader`类：
- en: '[PRE53]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We will also need to update the `registerOtherComponents()` method by adding
    the following line:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要通过添加以下行来更新`registerOtherComponents()`方法：
- en: '[PRE54]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'This will also update the `getTemplate()` method, and make it look like this:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这也将更新`getTemplate()`方法，使其看起来像这样：
- en: '[PRE55]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Here, we are simply adding the `<custom-header>` element. We will also need
    to capture the event emitter by this element:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是添加了`<custom-header>`元素。我们还需要通过这个元素捕获事件发射器：
- en: '[PRE56]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We are adding an event listener to the `custom-header` element and making sure
    that the last value of `showSection` is not equal to the newer one. If it is not,
    then update the value and call the `reRenderAppSection()` method:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在向`custom-header`元素添加事件监听器，并确保`showSection`的最后一个值不等于新值。如果不是，则更新值并调用`reRenderAppSection()`方法：
- en: '[PRE57]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This `reRenderAppSection()` method simply update the view based on the `showSection`
    variable.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`reRenderAppSection()`方法只是根据`showSection`变量更新视图。
- en: Now, you can go ahead and test it on the browser by clicking on the header links,
    and watch the pages change. You can also see the URL changing in the address bar.
    Even though this all sounds complete, I would like to add one more feature to
    the routing.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过点击页眉链接在浏览器中测试它，并观察页面如何变化。您还可以看到地址栏中的URL变化。尽管这一切听起来都很完整，但我还想添加一个额外的功能到路由中。
- en: 'Note the URL that you see in the address bar. If you send the URL with trending
    in the hash to someone, would it open the trending page? The answer is no. The
    same applies for the URL with random in the hash. It won''t work. We need to have
    an extra piece of code:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 注意地址栏中显示的URL。如果您将带有趋势hash的URL发送给某人，它会打开趋势页面吗？答案是不会。对于带有随机hash的URL也是如此。它不会工作。我们需要添加额外的代码：
- en: '[PRE58]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: You can call this `handleURL()` method in the `constructor()` method, and see
    it working. It updates the value of the `showSection` variable and, this way,
    the `getSection()` method in `getTemplate()` knows what page to render.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`constructor()`方法中调用这个`handleURL()`方法，并观察其工作过程。它会更新`showSection`变量的值，这样`getTemplate()`中的`getSection()`方法就知道要渲染哪一页。
- en: Now that the app is built, let's try adding some extra features that will make
    our single page web app more useful.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用已经构建完成，让我们尝试添加一些额外的功能，使我们的单页Web应用更加有用。
- en: Enabling analytics
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用分析
- en: Analytics play an important role in understanding what users are visiting your
    site and how long they have been on a particular page. In this section, we will
    be using Google Analytics to track user interactions on the site. This is one
    of those really easy things that you can do even outside of Web Components.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 分析在了解用户访问您的网站以及他们在特定页面上停留了多长时间方面发挥着重要作用。在本节中，我们将使用Google Analytics来跟踪网站上的用户交互。这是那些即使在Web组件之外也能轻松完成的事情之一。
- en: 'In order to start using Analytics, we need to do the following:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始使用分析工具，我们需要做以下几步：
- en: Go to [https://analytics.google.com/](https://analytics.google.com/), then click
    on the admin button and create a new property. You will be dropped on to New Property
    page.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://analytics.google.com/](https://analytics.google.com/)，然后点击管理员按钮创建一个新的属性。你将被带到“新建属性”页面。
- en: 'You can then start filling out the forms on the page:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您就可以开始填写页面上的表单：
- en: '![](img/5fbae596-c80d-480a-b1bd-ecc485562a0f.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5fbae596-c80d-480a-b1bd-ecc485562a0f.png)'
- en: 'Once you have filled in the details, and clicked on the Get Tracking ID button,
    you will be dropped onto the next page:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您填写了详细信息，并点击了获取跟踪ID按钮，您将被带到下一页：
- en: '![](img/88d298bb-a77a-43a8-82ca-55c472c1cf30.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/88d298bb-a77a-43a8-82ca-55c472c1cf30.png)'
- en: You can use the code from the text area and put it in your `index.html` file.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以将文本区域中的代码复制并粘贴到您的`index.html`文件中。
- en: That's it. Now, you can simply go to the following URL and see how users are
    visiting your site: [https://analytics.google.com](https://analytics.google.com).
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这些了。现在，您可以直接访问以下URL，查看用户是如何访问您的网站的：[https://analytics.google.com](https://analytics.google.com)。
- en: 'You will be dropped onto a page where you can see how users have visited your
    page:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被带到一页，您可以查看用户是如何访问您的页面的：
- en: '![](img/206f683e-ce9b-4772-8c3a-e9d2269f811d.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/206f683e-ce9b-4772-8c3a-e9d2269f811d.png)'
- en: And, you can then use this data to understand what users do on your page, and
    how much time they stay on the site.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用这些数据来了解用户在您的页面上做了什么，以及他们在网站上停留了多长时间。
- en: Summary
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we created a single page web app using just Web Components.
    We learned how to break down a page into atomic and container Web Components.
    We learned how to include atomic components in a strategic way, so that they can
    be reused in an efficient way. We even looked into routing and how it can be used
    to keep track of what page the user is on. Lastly, we discussed how to integrate
    analytics into our single page web app, and how it can be used to understand different
    types of users. You should now be able to create any single page web application
    based on the concepts above without any problems.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们仅使用Web Components创建了一个单页Web应用。我们学习了如何将页面分解为原子和容器Web组件。我们学习了如何以战略性的方式包含原子组件，以便它们可以以高效的方式重用。我们还探讨了路由以及如何用它来跟踪用户所在的页面。最后，我们讨论了如何将分析集成到我们的单页Web应用中，以及它是如何用来理解不同类型用户的。现在，您应该能够根据上述概念创建任何单页Web应用而不会遇到任何问题。
- en: In the next chapter, we will look into Polymer and Stencil JS, which are libraries
    that use Web Components, and how the code differs from what we have learned so
    far.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Polymer和Stencil JS，这些是使用Web Components的库，以及代码与我们迄今为止所学的内容有何不同。
