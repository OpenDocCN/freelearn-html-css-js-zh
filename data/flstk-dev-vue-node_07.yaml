- en: Building OAuth Strategies with passport.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用passport.js构建OAuth策略
- en: 'In the preceding chapter, we discussed the passport-JWT strategy. We discussed
    how to leverage the JWT package to build a robust user on-boarding process. We
    covered how to implement the signup and sign-in process for a user. In this chapter,
    we will dive into the following parts:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们讨论了护照-JWT策略。我们讨论了如何利用JWT包来构建强大的用户入职流程。我们讨论了如何为用户实现注册和登录流程。在本章中，我们将深入以下部分：
- en: '`passport.js` Facebook Strategy'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`passport.js` Facebook策略'
- en: '`passport.js` Twitter Strategy'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`passport.js` Twitter策略'
- en: '`passport.js` Google Strategy'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`passport.js` Google策略'
- en: '`passport.js` LinkedIn Strategy'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`passport.js` LinkedIn策略'
- en: All these parts individually consume a lot of time if we set out to do them
    from scratch. `passport.js` provides a simpler way to integrate all these strategies
    in a very flexible way, and also makes them easier to implement.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从头开始做所有这些部分，每个部分都会消耗大量时间。`passport.js`提供了一种更简单的方式来以非常灵活的方式集成所有这些策略，并使它们更容易实现。
- en: '**OAuth** is an authentication protocol that lets users log in via different
    external services. For example, logging in to an application via Facebook or Twitter
    does not require a user to provide their username and password if the user is
    already logged in to Facebook or Twitter. It saves the user from setting up a
    new account in an application, which makes the login process smooth. This makes
    logging in to an app easier; otherwise, a user first needs to register to our
    application and then log in using those credentials. Passport''s OAuth strategies
    allow users to log in to our application with a single click if the browser remembers
    the account. Everything else is done automatically and is handled by the strategy
    itself.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**OAuth**是一种认证协议，它允许用户通过不同的外部服务登录。例如，通过Facebook或Twitter登录应用程序不需要用户提供用户名和密码，如果用户已经登录到Facebook或Twitter，则无需提供。这可以节省用户在应用程序中设置新帐户的时间，使登录流程更加顺畅。这使得登录应用程序变得更容易；否则，用户首先需要注册我们的应用程序，然后使用这些凭据登录。护照的OAuth策略允许用户通过单击登录到我们的应用程序，如果浏览器记住了该帐户，则其他所有操作都将自动完成并由策略本身处理。'
- en: Passport's Facebook Strategy
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 护照的Facebook策略
- en: Passport's Facebook Strategy is easy to integrate. As always, let's start with
    the installation of this strategy.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 护照的Facebook策略易于集成。一如既往，让我们从安装这个策略开始。
- en: Installing Passport's Facebook Strategy
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装护照的Facebook策略
- en: 'We can install passport''s Facebook Strategy by running the following command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令来安装护照的Facebook策略：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following code should add the package to your `package.json` file:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码应该将包添加到您的`package.json`文件中：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Configuring Passport's Facebook Strategy
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置护照的Facebook策略
- en: 'There are a few steps to configure the Passport''s Facebook Strategy. We will
    discuss each step in detail:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 配置护照的Facebook策略有几个步骤。我们将详细讨论每个步骤：
- en: Create and set up a Facebook app. This will provide us with an `App ID` and
    an `App Secret`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并设置一个Facebook应用。这将为我们提供一个“应用ID”和一个“应用密钥”。
- en: Add a button to our login page that allows our users to log in via Facebook.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的登录页面上添加一个按钮，允许用户通过Facebook登录。
- en: Add the necessary routes for Facebook authentication.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为Facebook认证添加必要的路由。
- en: Add a middleware method to check whether authentication is successful.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个中间件方法来检查认证是否成功。
- en: Let's dive into the details for each of the preceding steps.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入讨论前面每个步骤的细节。
- en: Creating and setting up a Facebook app
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建并设置一个Facebook应用
- en: To be able to use the Facebook Strategy, you have to build a Facebook application
    first. The developers, portal for Facebook is at [https://developers.facebook.com/](https://developers.facebook.com/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Facebook策略，您必须首先构建一个Facebook应用程序。Facebook的开发者门户网站位于[https://developers.facebook.com/](https://developers.facebook.com/)。
- en: After logging in, click on the Get Started button and then click on Next.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，点击“开始”按钮，然后点击“下一步”。
- en: Then, you will see a drop-down menu in the top-right corner of the screen called
    My Apps, where you can find the option to create a new application.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将在屏幕右上角看到一个名为“我的应用程序”的下拉菜单，在那里您可以找到创建新应用程序的选项。
- en: 'Choose a display name that you want to name your application. In this case,
    we will name it `movie_rating_app`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 选择您想要为应用程序命名的显示名称。在这种情况下，我们将其命名为`movie_rating_app`：
- en: '![](img/c16be676-d69d-40a3-be90-e4592e943604.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c16be676-d69d-40a3-be90-e4592e943604.png)'
- en: 'Click on Create App ID. If you go the settings page, you will see the App ID
    and App Secret for your application:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“创建应用ID”。如果您转到设置页面，您将看到应用程序的应用ID和应用密钥：
- en: '![](img/f449d1c8-dae4-4401-8070-966e4455aaec.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f449d1c8-dae4-4401-8070-966e4455aaec.png)'
- en: You will be needing the values mentioned in the preceding screenshot.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要前面截图中提到的值。
- en: Adding a button to our login page that allows users to log in via Facebook
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的登录页面上添加一个按钮，允许用户通过Facebook登录
- en: 'The next step is to add a LOGIN WITH FACEBOOK button in your login page, which
    you will be linking to your Facebook application. Replace the contents of `Login.vue`, with
    the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在登录页面上添加一个“使用Facebook登录”的按钮，将其链接到您的Facebook应用程序。用以下内容替换`Login.vue`：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s also add some styling to these buttons. In `src/assets/stylesheets/home.css`,
    add the following code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也为这些按钮添加一些样式。在`src/assets/stylesheets/home.css`中添加以下代码：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding code will add a LOGIN WITH FACEBOOK button:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将添加一个“使用Facebook登录”的按钮：
- en: '![](img/c49cfff2-17ec-4208-9611-efb6650fd253.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c49cfff2-17ec-4208-9611-efb6650fd253.png)'
- en: Adding configurations for Facebook app
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Facebook应用添加配置
- en: 'Let''s configure the Facebook Strategy just as we did for the local strategy.
    We will create a separate file to handle Facebook login so that the code is simpler.
    Let''s create a file called `facebook.js` inside the `controllers` folder and
    add the following contents to it:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们像为本地策略一样配置Facebook策略。我们将创建一个单独的文件来处理Facebook登录，以使代码更简单。让我们在`controllers`文件夹中创建一个名为`facebook.js`的文件，并将以下内容添加到其中：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code, the first line inside the `exports` method imports the
    Facebook Strategy. The configuration takes three parameters: `clientID`, `clientSecret`,
    and callback URL. `clientID` and `clientSecret` are the `App ID` and `App Secret`
    for your Facebook app, respectively.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，`exports`方法内的第一行导入了Facebook策略。配置需要三个参数：`clientID`，`clientSecret`和回调URL。`clientID`和`clientSecret`分别是您的Facebook应用的`App
    ID`和`App Secret`。
- en: 'Let''s add those secrets into our config file. In `config/Config.js`, let''s
    add our Facebook keys, the `facebook_client_id` and `facebook_client_secret`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这些密钥添加到我们的配置文件中。在`config/Config.js`中，让我们添加我们的Facebook密钥，`facebook_client_id`和`facebook_client_secret`：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The callback URL is the URL that you want to route your application to after
    the successful transaction with Facebook.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 回调URL是您希望在与Facebook成功交易后将您的应用程序路由到的URL。
- en: 'The callback we have defined here is `http://127.0.0.1:8081/login/facebook/return`,
    which we have to define. The configuration is followed by a function that takes
    the following four parameters:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里定义的回调是`http://127.0.0.1:8081/login/facebook/return`，我们必须定义。配置后跟一个函数，该函数接受以下四个参数：
- en: '`accessToken`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accessToken`'
- en: '`refreshToken`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`refreshToken`'
- en: '`profile`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`profile`'
- en: '`cb` (callback)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cb`（回调）'
- en: Upon successful request, our application will get redirected to the home page.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功请求后，我们的应用程序将被重定向到主页。
- en: Adding necessary routes for Facebook login
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Facebook登录添加必要的路由
- en: 'Now, let''s go ahead and add the necessary routes for when we click on the
    login button and when we receive the callback from Facebook. In the same file,
    `facebook.js`, add the following routes:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续添加必要的路由，当我们点击登录按钮时和当我们从Facebook接收回调时。在同一个文件`facebook.js`中，添加以下路由：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code, we have added two routes. If you remember, in `Login.vue`,
    we have added a link to `http://127.0.0.1:8081/login/facebook`, which will be
    served by the first route that we defined here.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们添加了两个路由。如果您记得，在`Login.vue`中，我们添加了一个链接到`http://127.0.0.1:8081/login/facebook`，这将由我们在这里定义的第一个路由提供。
- en: Also, if you recall, in the configuration setting, we have added a callback
    function that will be served by the second route, which we have defined here as
    well.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果您回忆起来，在配置设置中，我们添加了一个回调函数，这将由我们在这里定义的第二个路由提供。
- en: 'Now, the final thing to do is to actually log in the user using the strategy.
    Replace the contents of `facebook.js` with the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，实际上登录用户使用该策略的最后一件事。用以下内容替换`facebook.js`的内容：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: While logging in with the Facebook login, if the user already exists in our
    database, the user simply gets logged in and saved in the session. The session
    data is not stored in the browser cookies but on the server-side itself. If the
    user doesn't exist in our database, then we create a new user with the provided
    email from Facebook.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Facebook登录时，如果用户已经存在于我们的数据库中，用户将简单地登录并保存在会话中。会话数据不存储在浏览器cookie中，而是存储在服务器端本身。如果用户在我们的数据库中不存在，则我们将使用来自Facebook的提供的电子邮件创建一个新用户。
- en: The last thing to configure here is to add the return URLs or the redirect URL
    from Facebook to our application. For this, we can add the URLs in the App Settings
    page in Facebook. In the app `Settings` page, under the `Valid OAuth Redirect
    URIs`, add the redirect URLs to our application from Facebook.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里的最后一件要配置的事情是将Facebook的返回URL或重定向URL添加到我们应用程序中。为此，我们可以在Facebook的应用设置页面中添加URL。在应用程序`设置`页面中，在`有效的OAuth重定向URI`下，添加来自Facebook的重定向URL到我们的应用程序。
- en: 'Now, we should be able to log in via Facebook. When the `login` function is
    successful, it will redirect the user to the home page. If you notice, Facebook
    redirects us to `http://localhost:8081/#*=* `instead of just `http://localhost:8081`.
    This is because of a security vulnerability. We can remove the `#` from the URL
    by adding the following piece of code in the main file, which is `index.html`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该能够通过Facebook登录。当`login`函数成功时，它将重定向用户到主页。如果您注意到，Facebook将我们重定向到`http://localhost:8081/#*=*`而不是`http://localhost:8081`。这是由于安全漏洞。我们可以通过在主文件`index.html`中添加以下代码来删除URL中的`#`：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will remove the `#` symbol from the preceding URL. When you are successfully
    logged in, we should see your email in the top bar view similar to this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从上述URL中删除`#`符号。当您成功登录时，我们应该在顶部栏视图中看到您的电子邮件，类似于这样：
- en: '![](img/e9a8c95b-fcd9-4d90-9d01-6673e544d493.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9a8c95b-fcd9-4d90-9d01-6673e544d493.png)'
- en: Passport's Twitter Strategy
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Passport的Twitter策略
- en: The next strategy is Passport's Twitter Strategy.  Let's start with the installation
    of this strategy.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个策略是Passport的Twitter策略。让我们从安装这个策略开始。
- en: Installing Passport's Twitter Strategy
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Passport的Twitter策略
- en: 'Run the following command to install the Twitter Strategy:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令来安装Twitter策略：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding command should add the package to your `package.json` file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令应该将包添加到您的`package.json`文件中：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Configuring Passport's Twitter Strategy
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Passport的Twitter策略
- en: 'Just like Facebook Strategy, we have to perform the following steps to configure
    passport''s Twitter Strategy:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Facebook策略一样，我们必须执行以下步骤来配置passport的Twitter策略：
- en: Creating and setting up a Twitter application. This will provide us with a consumer
    key (API Key) and a consumer secret (API Secret).
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建和设置Twitter应用。这将为我们提供一个消费者密钥（API密钥）和一个消费者密钥（API密钥）。
- en: Adding a button to our login page that allows our users to LOGIN WITH TWITTER.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的登录页面上添加一个按钮，允许我们的用户使用Twitter登录。
- en: Adding the necessary routes.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加必要的路由。
- en: Adding a middleware method to check authentication.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个中间件方法来检查身份验证。
- en: Redirecting the user to the home page after redirection and displaying the logged-in
    user's email in the top bar.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在重定向后将用户重定向到主页，并在顶部栏中显示已登录用户的电子邮件。
- en: Let's dive into the details for each of the preceding steps.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解上述每个步骤的细节。
- en: Creating and setting up a Twitter app
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和设置Twitter应用
- en: Just as with Facebook Strategy, to be able to use the Twitter Strategy, we have
    to build a Twitter application as well. The developers' portal for Twitter is
    at [https://apps.twitter.com/](https://apps.twitter.com/), where you will see
    a list of all of your applications. If this is new, you will see a button to create
    a new application—click on Create your Twitter application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 与Facebook策略一样，为了能够使用Twitter策略，我们还必须构建一个Twitter应用程序。Twitter的开发者门户网站位于[https://apps.twitter.com/](https://apps.twitter.com/)，您将看到您所有应用程序的列表。如果这是新的，您将看到一个创建新应用程序的按钮
    - 点击创建您的Twitter应用程序。
- en: 'You will see a form, which will ask you to fill in the application name and
    other details. You can name the application whatever you want. For this application,
    we will name the application `movie_rating_app`. For the callback URL, we have
    provided `http://localhost:8081/login/twitter/return`, which we will have to define
    later:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个表单，要求您填写应用程序名称和其他细节。您可以随意命名应用程序。对于此应用程序，我们将应用程序命名为`movie_rating_app`。对于回调URL，我们提供了`http://localhost:8081/login/twitter/return`，稍后我们将不得不定义它：
- en: '![](img/201cae01-374c-4749-9d30-7da5d1d2add5.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/201cae01-374c-4749-9d30-7da5d1d2add5.png)'
- en: 'Upon successful creation of the application, you can see the API Key (Consumer
    Key) and API Secret (Consumer Secret) in the Keys and Access Tokens tab:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 成功创建应用程序后，您可以在“Keys and Access Tokens”选项卡中看到API密钥（消费者密钥）和API秘钥（消费者秘钥）：
- en: '![](img/65e39922-dee4-4d3d-9352-3f2b19f5af24.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65e39922-dee4-4d3d-9352-3f2b19f5af24.png)'
- en: These tokens will be used for authentication in our application.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些令牌将用于我们应用程序中的身份验证。
- en: Adding a button to our login page that allows users to log in via Twitter
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的登录页面上添加一个按钮，允许用户通过Twitter登录
- en: The next step is to add a LOGIN WITH TWITTER button in our login page, which
    we will link to our Twitter application that we just created.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在我们的登录页面中添加一个“使用Twitter登录”的按钮，我们将链接到我们刚刚创建的Twitter应用程序。
- en: 'In `Login.vue`, add a link to log in via Twitter with the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Login.vue`中，添加一个链接以通过Twitter登录：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding code will add a LOGIN WITH TWITTER button. Let''s run the following
    command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将添加一个“使用Twitter登录”按钮。让我们运行以下命令：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, if we visit the URL `http://localhost:8080/users/login`, we should see
    the following page:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们访问URL `http://localhost:8080/users/login`，我们应该看到以下页面：
- en: '![](img/7252b3ec-3ecd-4607-9c42-d7dd9bd95592.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7252b3ec-3ecd-4607-9c42-d7dd9bd95592.png)'
- en: Adding configurations for Twitter App
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Twitter应用添加配置
- en: 'Now, the next step is to add the necessary routes for the Twitter login. For
    this, we will need to configure the settings and callback URL. Just like we did
    for the Facebook Strategy, let''s create a separate file to set up our Twitter
    login. Let''s create a new file inside the `controllers` directory called `twitter.js`
    and add the following contents:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，下一步是为Twitter登录添加必要的路由。为此，我们需要配置设置和回调URL。就像我们为Facebook策略所做的那样，让我们创建一个单独的文件来设置我们的Twitter登录。在`controllers`目录中创建一个名为`twitter.js`的新文件，并添加以下内容：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As we did in the Facebook Strategy, the first line imports the Twitter Strategy.
    The configuration takes the following three parameters: `clientID`, `clientSecret`,
    and a callback URL. The `consumerKey` and `consumerSecret` are the `App ID` and
    `App Secret` for your Twitter application app, respectively.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在Facebook策略中所做的那样，第一行导入了Twitter策略。配置采用以下三个参数：`clientID`，`clientSecret`和回调URL。`consumerKey`和`consumerSecret`分别是您的Twitter应用程序的`App
    ID`和`App Secret`。
- en: 'Let''s add those secrets into our config file. In `config/Config.js`, add the
    `Facebook client ID` and `Facebook Client Secret`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这些密钥添加到我们的配置文件中。在`config/Config.js`中，添加`Facebook客户端ID`和`Facebook客户端秘钥`：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The callback URL is the URL that you want to route your application to after
    the successful transaction with Twitter.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 回调URL是在与Twitter成功交易后要将您的应用程序路由到的URL。
- en: 'The callback we have defined in the [preceding piece of code is `http://localhost:8081/login/twitter/return`,
    which we have to define. The configuration is followed by a function that takes
    the following four parameters:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上述代码中定义的回调是`http://localhost:8081/login/twitter/return`，我们必须定义。配置后跟着一个函数，该函数接受以下四个参数：
- en: '`accessToken`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accessToken`'
- en: '`refreshToken`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`refreshToken`'
- en: '`profile`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`profile`'
- en: '`cb` (callback)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cb`（回调）'
- en: Upon a successful request, our application will get redirected to the home page.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 成功请求后，我们的应用程序将被重定向到主页。
- en: Adding necessary routes for Twitter login
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Twitter登录添加必要的路由
- en: 'Now, let''s add the necessary routes for when we click on the `Login` button
    and when we receive the callback from Twitter. In the same file, `twitter.js`,
    add the following routes:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加当我们点击“登录”按钮和当我们从Twitter接收回调时所需的路由。在同一个文件`twitter.js`中，添加以下路由：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding code, we have added two routes: `/login/google` and `/login/google/return`.
    If you remember, in `Login.vue`, we have added a link to `http://localhost:8081/login/twitter`,
    which will be served by the first route that we defined here.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们添加了两个路由：`/login/google`和`/login/google/return`。如果您记得，在`Login.vue`中，我们已经添加了一个链接到`http://localhost:8081/login/twitter`，这将由我们在此处定义的第一个路由提供服务。
- en: 'Now, the final thing to do is to actually log in the user using the strategy.
    Replace the contents of `twitter.js` with the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，实际上使用策略登录用户的最后一件事是。用以下内容替换`twitter.js`的内容：
- en: '[PRE16]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We have to consider a few things here. Twitter does not allow us to access the
    user's email address by default. For that, we will need to check a field called Request
    email addresses from users while setting up the Twitter application, which can
    be found under the Permissions tab.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们需要考虑几件事。Twitter默认不允许我们访问用户的电子邮件地址。为此，我们需要在设置Twitter应用程序时检查一个名为“请求用户的电子邮件地址”的字段，该字段可以在“权限”选项卡下找到。
- en: 'Before we do that, we also need to set the Privacy Policy URL and Terms of
    Service URL in order to request the user''s access to their email address. This
    setting can be found under the Settings tab:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们这样做之前，我们还需要设置隐私政策URL和服务条款URL，以便请求用户访问其电子邮件地址。此设置可以在“设置”选项卡下找到：
- en: '![](img/553ca72b-d8a4-441b-a4cd-859b3e3454eb.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/553ca72b-d8a4-441b-a4cd-859b3e3454eb.png)'
- en: 'Fill in the privacy policy and terms of service URLs, and then under the Permissions
    tab, check the checkbox that says Request email addresses from users and click
    on Update Settings:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 填写隐私政策和服务条款的URL，然后在权限选项卡下，选中要求用户提供电子邮件地址的复选框，然后点击`更新设置`：
- en: '![](img/4e38f0c5-dd9f-4ded-b1e5-52d1007e2509.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e38f0c5-dd9f-4ded-b1e5-52d1007e2509.png)'
- en: 'The last thing we also need is to specify the resource URL to be able to access
    the email address, which we do by adding the following in `twitter.js`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要指定资源URL以访问电子邮件地址，方法是在`twitter.js`中添加以下内容：
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, everything is ready to go for the Twitter login. We should be able to log
    in successfully with the LOGIN WITH TWITTER button now.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一切准备就绪，可以使用LOGIN WITH TWITTER按钮成功登录。
- en: Passport's Google strategy
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Passport的Google策略
- en: The next strategy is the Passport's Google Strategy.  Let's start with the installation
    of this strategy.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的策略是Passport的Google策略。让我们从安装这个策略开始。
- en: Installing Passport's Google strategy
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Passport的Google策略
- en: 'Run the following command to install Passport''s Google strategy:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令安装Passport的Google策略：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The preceding command should add the package to your `package.json` file:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令应该将该软件包添加到您的`package.json`文件中：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Configuring Passport's Google strategy
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Passport的Google策略
- en: 'The configuration for all the strategies is somewhat similar. For the Google
    strategy, the following are the steps we have to follow for configuration:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 所有策略的配置都有些类似。对于Google策略，我们必须遵循以下配置步骤：
- en: Creating and registering an application on Google. This will provide us with
    a consumer key (API key) and a consumer secret (API secret).
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Google上创建和注册应用程序。这将为我们提供一个消费者密钥（API密钥）和一个消费者秘密（API秘密）。
- en: Adding a button to our login page that allows our users to log in via Google.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的登录页面上添加一个按钮，允许用户通过Google登录。
- en: Adding the necessary routes.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加必要的路由。
- en: Adding a middleware method to check authentication.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个中间件方法来检查身份验证。
- en: Redirecting the user to the home page and displaying the logged-in user's email
    in the top bar.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户重定向到主页，并在顶部栏中显示已登录用户的电子邮件。
- en: Let's dive into the details for each of the preceding steps.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解上述每个步骤的详细信息。
- en: Creating and setting up a Google app
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和设置Google应用程序
- en: Just as we did for the Facebook and Twitter strategies, to be able to use the
    Google Strategy, we have to build a Google application. The developers, portal
    for Google is at [https://console.developers.google.com/](https://console.developers.google.com/).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们为Facebook和Twitter策略所做的那样，为了使用Google策略，我们必须构建一个Google应用程序。Google的开发者门户网站位于[https://console.developers.google.com/](https://console.developers.google.com/)。
- en: Then, click on the drop-down list of the projects, which lies at the top-left
    corner of the page. A popup will show up. Then, click on the + icon to create
    a new application.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击页面左上角的项目下拉列表。将弹出一个弹出窗口。然后，点击+图标创建一个新的应用程序。
- en: 'You just have to add the name of your application. We will name the application
    *movieratingapp*, as Google does not allow underscores or any other special characters:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需添加您的应用程序名称。我们将应用程序命名为*movieratingapp*，因为Google不允许下划线或任何其他特殊字符：
- en: '![](img/1fe5003c-736e-440f-b59e-b0383aa820f7.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1fe5003c-736e-440f-b59e-b0383aa820f7.png)'
- en: When the application gets created successfully, click on Credentials and `Create`
    and then on OAuth Client ID to generate the app tokens. To generate the tokens,
    we will first need to Enable the Google+ API via Developer Console at [https://console.developers.google.com/](https://console.developers.google.com/).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序成功创建后，点击`凭据`，然后点击`创建`，然后点击OAuth客户端ID以生成应用程序令牌。要生成令牌，我们首先需要通过[https://console.developers.google.com/](https://console.developers.google.com/)启用Google+
    API。
- en: It then takes us to the `Create Consent` page, where we need to fill in some
    information about our application. After that, on the Credentials page, we will
    be able to view our `Client ID` and `Client Secret`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它会带我们到`创建同意`页面，在那里我们需要填写关于我们的应用程序的一些信息。之后，在凭据页面上，我们将能够查看我们的`客户端ID`和`客户端秘密`。
- en: 'These tokens will be used to verify the authentication in our application:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这些令牌将用于验证我们应用程序中的身份验证：
- en: '![](img/5d509cd5-ae77-4ee8-8d96-4d53b7378e5b.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d509cd5-ae77-4ee8-8d96-4d53b7378e5b.png)'
- en: Adding a button to our login page that allows users to log in via Google
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的登录页面上添加一个按钮，允许用户通过Google登录
- en: 'The next step is to add a LOGIN WITH GOOGLE button in our login page, which
    we will be linking to our Google application that we just created:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在我们的登录页面中添加一个LOGIN WITH GOOGLE按钮，我们将把它链接到我们刚创建的Google应用程序：
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The preceding code will add a LOGIN WITH GOOGLE button:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将添加一个LOGIN WITH GOOGLE按钮：
- en: '![](img/b72db97e-b9df-4aea-ba88-23eb2c5e7c6e.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b72db97e-b9df-4aea-ba88-23eb2c5e7c6e.png)'
- en: Adding configurations for Google app
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Google应用程序的配置
- en: 'Let''s configure the Google Strategy just as we did for the Facebook and Twitter
    strategies. We will create a separate file to handle Google login so that the
    code is simple. Let''s create a file called `google.js` inside the `controllers` folder
    and add the following contents to it:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们像为Facebook和Twitter策略一样配置Google策略。我们将创建一个单独的文件来处理Google登录，以使代码简单。让我们在`controllers`文件夹中创建一个名为`google.js`的文件，并添加以下内容：
- en: '[PRE21]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As we did in the Facebook and Twitter strategies, the first line imports the
    Google Strategy. The configuration takes the following three parameters: `clientID`,
    `clientSecret`, and callback URL. The `clientID` and `clientSecret` are the `App
    ID` and `App Secret` of the Google application we just created.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在Facebook和Twitter策略中所做的那样，第一行导入了Google策略。配置需要以下三个参数：`clientID`，`clientSecret`和回调URL。`clientID`和`clientSecret`是我们刚创建的Google应用程序的`App
    ID`和`App Secret`。
- en: 'Let''s add those secrets into our `config` file. In `config/Config.js`, add
    the `facebook_client_id` and `facebook_client_secret`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这些密钥添加到我们的`config`文件中。在`config/Config.js`中，添加`facebook_client_id`和`facebook_client_secret`：
- en: '[PRE22]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The callback URL is the URL that you want to route your application to after
    the successful transaction with Google.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 回调URL是您希望在与Google成功交易后将您的应用程序路由到的URL。
- en: 'The callback we just added is `http://127.0.0.1:8081/login/google/return`,
    which we have to define. The configuration is followed by a function that takes
    the following four parameters:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加的回调是`http://127.0.0.1:8081/login/google/return`，我们必须定义它。配置后跟一个函数，该函数接受以下四个参数：
- en: '`accessToken`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accessToken`'
- en: '`refreshToken`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`refreshToken`'
- en: '`profile`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`profile`'
- en: '`cb` (callback)'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cb`（回调）'
- en: Upon a successful request, our application will get redirected to the `profile`
    page, which we are yet to define.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功的请求之后，我们的应用程序将被重定向到我们尚未定义的`profile`页面。
- en: Adding necessary routes for Google login
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Google登录添加必要的路由
- en: 'Now, let''s go ahead and add the necessary routes, when we click on the login
    button and when we receive the callback from Google. In the same file, `google.js`,
    add the following routes:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续添加必要的路由，当我们点击登录按钮时以及当我们从Google收到回调时。在同一个文件`google.js`中，添加以下路由：
- en: '[PRE23]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the preceding code, we have added two routes. If you remember, in `Login.vue`,
    we have added a link to `http://localhost:8081/login/google`, which will be served
    by the first route that we defined here.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们添加了两个路由。如果你还记得，在`Login.vue`中，我们添加了一个链接到`http://localhost:8081/login/google`，这将由我们在这里定义的第一个路由来提供服务。
- en: Also, if you recall, in the configuration setting, we have added a callback
    function, which will be served by the second route that we have defined here as
    well.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果你还记得，在配置设置中，我们已经添加了一个回调函数，这将由我们在这里定义的第二个路由来提供服务。
- en: 'Now, the final thing to do is to actually log in the user using the strategy.
    Replace the contents of `google.js` with the following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要做的最后一件事是实际使用策略登录用户。用以下内容替换`google.js`的内容：
- en: '[PRE24]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Passport's LinkedIn strategy
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Passport的LinkedIn策略
- en: By now, you must understand quite well how to use each of the strategies provided
    by `passport.js`. Let's quickly revise these using the LinkedIn strategy. This
    is the last strategy we will be covering in this book. There are several other
    strategies that you can use according to your needs. You can find the list at
    [https://github.com/jaredhanson/passport/wiki/Strategies](https://github.com/jaredhanson/passport/wiki/Strategies).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您必须非常了解如何使用`passport.js`提供的每个策略。让我们快速使用LinkedIn策略来复习一下。这是我们将在本书中介绍的最后一个策略。根据您的需求，还有其他几种策略可供选择。您可以在[https://github.com/jaredhanson/passport/wiki/Strategies](https://github.com/jaredhanson/passport/wiki/Strategies)上找到列表。
- en: Now, let's start with the installation of this strategy.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始安装这个策略。
- en: Installing Passport's LinkedIn strategy
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Passport的LinkedIn策略
- en: 'Run the following command to install the LinkedIn strategy:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令来安装LinkedIn策略：
- en: '[PRE25]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The preceding command should add the following package to your `package.json`
    file:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令应该将以下包添加到您的`package.json`文件中：
- en: '[PRE26]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Configuring Passport's LinkedIn strategy
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Passport的LinkedIn策略
- en: 'The configuration for all the strategies is somewhat similar. So, the following
    are the steps we have to follow to configure this strategy:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 所有策略的配置都有些类似。因此，以下是我们必须遵循的配置此策略的步骤：
- en: Creating and registering an application on LinkedIn. This will provide us with
    a consumer key (API Key) and a consumer secret (API Secret).
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在LinkedIn上创建并注册一个应用程序。这将为我们提供一个消费者密钥（API密钥）和一个消费者秘密（API秘密）。
- en: Adding a button to our login page that allows users to log in via LinkedIn.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的登录页面上添加一个按钮，允许用户通过LinkedIn登录。
- en: Adding the necessary routes.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加必要的路由。
- en: Adding a middleware method to check authentication.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个中间件方法来检查身份验证。
- en: Redirecting the user to the home page and displaying the logged in user's email
    in the top bar.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户重定向到主页，并在顶部栏中显示已登录用户的电子邮件。
- en: Let's dive into the details for each of the preceding steps.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解每个步骤的细节。
- en: Creating and setting up a LinkedIn app
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和设置LinkedIn应用
- en: Just like we did for the Facebook and Twitter Strategies, to be able to use
    the Linkedin Strategy, we have to build a LinkedIn application. The developers,
    portal for LinkedIn is at [https://www.linkedin.com/developer/apps](https://www.linkedin.com/developer/apps).
    You will see a list of all of your applications there. You will also note a button
    to create a new application; click on Create Application.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们为Facebook和Twitter策略所做的那样，为了能够使用LinkedIn策略，我们必须构建一个LinkedIn应用程序。LinkedIn的开发者门户网站位于[https://www.linkedin.com/developer/apps](https://www.linkedin.com/developer/apps)。您将在那里看到您所有应用程序的列表。您还会注意到一个创建新应用程序的按钮；点击创建应用程序。
- en: 'We just have to add the name of our application. We can name the application
    whatever we want, but for our application, we will be naming it `movie_rating_app`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要添加我们应用程序的名称。我们可以随意命名应用程序，但对于我们的应用程序，我们将把它命名为`movie_rating_app`：
- en: '![](img/297423a4-5b9b-4491-997b-e3f203051476.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/297423a4-5b9b-4491-997b-e3f203051476.png)'
- en: Upon successful creation of the application, you can see the API Key (`clientID`)
    and API Secret (client secret) in the Credentials tab.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 成功创建应用程序后，您可以在凭据选项卡中看到API密钥（clientID）和API秘密（客户端秘密）。
- en: 'These tokens will be used to verify the authentication in our application:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这些令牌将用于验证我们应用程序中的身份验证：
- en: '![](img/0f34f2eb-7114-47e8-8f88-1ee30738ed2f.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f34f2eb-7114-47e8-8f88-1ee30738ed2f.png)'
- en: Adding a button to our login page that allows users to log in via LinkedIn
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的登录页面上添加一个按钮，允许用户通过LinkedIn登录
- en: The next step is to add a LOGIN WITH LINKEDIN button in our login page, which
    we will be linking to our LinkedIn application  that we just created.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在我们的登录页面中添加一个LOGIN WITH LINKEDIN按钮，我们将把它链接到我们刚刚创建的LinkedIn应用程序。
- en: 'In `Login.vue`, add the following code:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Login.vue`中，添加以下代码：
- en: '[PRE27]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The preceding code will add a LOGIN WITH LINKEDIN button:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将添加一个LOGIN WITH LINKEDIN按钮：
- en: '![](img/d184e8a0-f2e6-43a4-830e-dbd4248ed8a2.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d184e8a0-f2e6-43a4-830e-dbd4248ed8a2.png)'
- en: Adding configurations for LinkedIn app
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为LinkedIn应用添加配置
- en: 'Let''s configure the LinkedIn strategy just as we did for all the other strategies.
    We will create a separate file to handle LinkedIn login so that the code is simple.
    Let''s create a file called `linkedin.js` inside the `controllers` folder and
    add the following contents to it:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们像为所有其他策略一样配置LinkedIn策略。我们将创建一个单独的文件来处理LinkedIn登录，以使代码简单。让我们在`controllers`文件夹中创建一个名为`linkedin.js`的文件，并将以下内容添加到其中：
- en: '[PRE28]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the preceding code, the first line imports the LinkedIn Strategy. The configuration
    takes the following three parameters: `clientID`, `clientSecret`, and a callback
    URL. The `clientID` and `clientSecret` are the `App ID` and `App Secret` of the
    LinkedIn application we just created, respectively.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，第一行导入了LinkedIn策略。配置需要以下三个参数：`clientID`，`clientSecret`和回调URL。`clientID`和`clientSecret`分别是我们刚创建的LinkedIn应用程序的`App
    ID`和`App Secret`。
- en: 'Let''s add those secrets to our `config` file. In `config/Config.js`, add the
    `Facebook Client ID` and `Facebook Client Secret`:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这些密钥添加到我们的`config`文件中。在`config/Config.js`中，添加`Facebook Client ID`和`Facebook
    Client Secret`：
- en: '[PRE29]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `callbackURL` is the URL that you want to route your application to after
    the successful transaction with LinkedIn.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`callbackURL`是在与LinkedIn成功交易后要将应用程序路由到的URL。'
- en: 'The `callbackURL` that we have defined in the preceding code is `http://127.0.0.1:8081/login/linkedin/return`,
    which we have to define. The configuration is followed by a function that takes
    the following four parameters:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的代码中定义的`callbackURL`是`http://127.0.0.1:8081/login/linkedin/return`，我们需要定义它。配置后面跟着一个函数，它需要以下四个参数：
- en: '`accessToken`'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accessToken`'
- en: '`refreshToken`'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`refreshToken`'
- en: '`profile`'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`profile`'
- en: '`cb` (callback)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cb`（回调）'
- en: Upon successful request, our application will get redirected to the profile
    page, which we are yet to define.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 成功请求后，我们的应用程序将被重定向到我们尚未定义的个人资料页面。
- en: Adding necessary routes for LinkedIn login
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加LinkedIn登录所需的路由
- en: 'Now, let''s add the necessary routes for when we click on the Login button
    and when we receive the callback from LinkedIn:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为点击登录按钮和从LinkedIn接收回调时添加必要的路由：
- en: '[PRE30]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the preceding code, we have added two routes. If you remember, in `Login.vue`,
    we have added a link to `http://localhost:8081/login/linkedin`, which will be
    served by the first route that we defined here.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们添加了两个路由。如果你还记得，在`Login.vue`中，我们添加了一个链接到`http://localhost:8081/login/linkedin`，这将由我们在这里定义的第一个路由提供。
- en: Also, if you recall, in the configuration setting, we have added a callback
    function that will be served by the second route, which we have defined here as
    well.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你还记得，在配置设置中，我们添加了一个回调函数，这将由我们在这里定义的第二个路由提供。
- en: 'Now, the final thing to do is to actually log in the user using the strategy.
    Replace the contents of `linkedin.js` with the following:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，最后要做的事情就是实际使用策略登录用户。用以下内容替换`linkedin.js`的内容：
- en: '[PRE31]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: With this, everything is ready to go for the LinkedIn login. We should be able
    to log in successfully with the LOGIN WITH LINKEDIN button now.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，一切准备就绪，可以使用“使用LinkedIn登录”按钮成功登录了。
- en: Summary
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered what OAuth is and how to integrate different varieties
    of OAuth with our application. We also covered Facebook, Twitter, Google, and
    LinkedIn strategies provided by `passport.js`. If you want to explore a different
    strategy, a good list of available packages is available at[ https://github.com/jaredhanson/passport/wiki/Strategies](https://github.com/jaredhanson/passport/wiki/Strategies).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了OAuth是什么，以及如何将不同类型的OAuth与我们的应用程序集成。我们还介绍了`passport.js`提供的Facebook、Twitter、Google和LinkedIn策略。如果你想探索其他策略，可以在[https://github.com/jaredhanson/passport/wiki/Strategies](https://github.com/jaredhanson/passport/wiki/Strategies)找到一个可用的包列表。
- en: In the next chapter, we will find out more about what `Vuex` is and how can
    we use `Vuex` to simplify our application.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解更多关于`Vuex`是什么以及如何使用`Vuex`来简化我们的应用程序。
