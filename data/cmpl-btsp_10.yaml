- en: Chapter 10. Bootstrapping E-Commerce
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 启动电子商务
- en: Having built our business home page, it's time to design our online store.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建了我们的业务主页后，是时候设计我们的在线商店了。
- en: 'We''ll build on the design from the previous chapter, adding a new page with
    the following elements:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在上一章的设计基础上进行构建，添加一个包含以下元素的页面：
- en: A grid of product thumbnails, titles, and descriptions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一系列的产品缩略图、标题和描述的网格
- en: A left-hand sidebar with options to filter our products by category, brand,
    and so on
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个左侧边栏，包含按类别、品牌等过滤产品的选项
- en: Breadcrumbs and pagination to ease navigation through our inventory
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面包屑和分页以简化对库存的导航
- en: Take a few moments to visit websites such as Zappos ([http://www.zappos.com](http://www.zappos.com))
    and Amazon ([http://www.amazon.com](http://www.amazon.com)). Search or browse
    for products and you will see product grids with features similar to what we will
    be creating in this chapter.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 花几分钟时间访问Zappos([http://www.zappos.com](http://www.zappos.com))和Amazon([http://www.amazon.com](http://www.amazon.com))等网站。搜索或浏览产品，你将看到具有与我们本章将要创建的类似功能的产品网格。
- en: 'When complete, we want our products page to look like the following screenshot
    on medium, large and extra-large screens:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们希望我们的产品页面在中等、大和超大屏幕上看起来如下截图所示：
- en: '![Bootstrapping E-Commerce](img/00193.jpeg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![启动电子商务](img/00193.jpeg)'
- en: Layout for medium large and extra-large screens
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 中等大小和超大屏幕的布局
- en: 'On extra-small screens, we want our products page to adjust to the following
    single column layout:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在小屏幕上，我们希望我们的产品页面调整到以下单列布局：
- en: '![Bootstrapping E-Commerce](img/00194.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![Bootstrapping E-Commerce](img/00194.jpeg)'
- en: Bootstrap gives us a big head start in accomplishing this design-after which
    we can use the power of Sass to refine things to completion.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap为我们完成这个设计提供了很大的帮助，之后我们可以使用Sass的力量来完善细节。
- en: Surveying the markup for our products page
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查我们的产品页面标记
- en: You'll find this chapter's files prepared and ready in the folder `Lesson 10/start`.
    This project builds directly on the completed design from [Lesson 9](part0103_split_000.html#3279U1-d17423bd3b664255b5fd09e37e25e334
    "Chapter 9. Bootstrapping Business"), *Bootstrapping Business*. If anything in
    these files seems strange, you may want to review [Lesson 9](part0103_split_000.html#3279U1-d17423bd3b664255b5fd09e37e25e334
    "Chapter 9. Bootstrapping Business"), *Bootstrapping Business*, before proceeding.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在这个文件夹`Lesson 10/start`中找到准备好的本章文件。该项目直接基于[Lesson 9](part0103_split_000.html#3279U1-d17423bd3b664255b5fd09e37e25e334
    "第9章. 启动业务")的完成设计，*启动业务*。如果这些文件中的任何内容看起来很奇怪，你可能需要在继续之前回顾[Lesson 9](part0103_split_000.html#3279U1-d17423bd3b664255b5fd09e37e25e334
    "第9章. 启动业务")，*启动业务*。
- en: Tip
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you've not already downloaded the exercise files, you can find them at [http://packtpub.com/support](http://packtpub.com/support).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有下载练习文件，你可以在[http://packtpub.com/support](http://packtpub.com/support)找到它们。
- en: Run the `bower install` and `npm install` commands in your console before going
    on with the next steps! For this chapter, there is one new file in the `html/pages`
    directory, `products.html`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行下一步之前，请在您的控制台中运行`bower install`和`npm install`命令！对于本章，`html/pages`目录中有一个新文件，`products.html`。
- en: '![Surveying the markup for our products page](img/00195.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![检查我们的产品页面标记](img/00195.jpeg)'
- en: Open `products.html` in your editor to view the markup. Let's survey its contents.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的编辑器中打开`products.html`以查看标记。让我们检查其内容。
- en: 'Inside the `main role="main"` element is where we''ll find what''s new. Here,
    you''ll find the following elements in the same order as they appear:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main role="main"`元素内部是我们将找到新内容的地方。在这里，你可以按照它们出现的顺序找到以下元素：
- en: Breadcrumb links marked up as an ordered list
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记为有序列表的面包屑链接
- en: A page title within a `h1` heading
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`h1`标题内的页面标题
- en: A series of options for filtering products
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一系列用于过滤产品的选项
- en: Nine products with thumbnails, titles, descriptions, and a button
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 九个带有缩略图、标题、描述和按钮的产品
- en: An unordered list of pagination links just below the products and before
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在产品下方和之前的不带序列号的分页链接列表
- en: You can run the `bootstrap watch` command and point your browser to `http://localhost:8080/products.html`
    to view the file in your browser. You'll see that much remains to be done. Breadcrumbs
    do not yet look like breadcrumbs, the filtering options look like a long series
    of bulleted lists, the layout of our product items is uneven (and in places broken),
    and so on.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以运行 `bootstrap watch` 命令，并将浏览器指向 `http://localhost:8080/products.html` 来在浏览器中查看文件。您会看到还有很多工作要做。面包屑还没有看起来像面包屑，过滤选项看起来像一系列长列表，我们的产品项布局不均匀（并且在某些地方破损），等等。
- en: 'Don''t let these current imperfections worry you. These are the things that
    we''ll be addressing in the following steps. Here is what''s coming:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不要让这些当前的不完美让您担心。这些是我们将在以下步骤中解决的问题。以下是即将发生的事情：
- en: We will apply Bootstrap's built-in styles to the breadcrumbs, page title, and
    pagination, and then customize them further
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将应用 Bootstrap 的内置样式到面包屑、页面标题和分页，然后进一步自定义它们。
- en: We will improve the layout of the nine product items, innovating the Bootstrap
    grid system to maintain a visually well-organized grid across breakpoints
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将改进九个产品项的布局，创新 Bootstrap 网格系统，以在断点处保持视觉上井然有序的网格。
- en: We will style the filtering options by enhancing the layout and then using the
    Font Awesome icons to provide checkboxes
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将通过增强布局并使用 Font Awesome 图标来提供复选框来设置过滤选项的样式。
- en: Run the `bootstrap watch` or `gulp` command in your console and point your browser
    to `http://localhost:8080/products.html`. Your browser will automatically reload
    now after saving the Sass or HTML templates.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的控制台中运行 `bootstrap watch` 或 `gulp` 命令，并将浏览器指向 `http://localhost:8080/products.html`。保存
    Sass 或 HTML 模板后，浏览器将自动重新加载。
- en: Now that we have a plan, let's get started!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了计划，让我们开始吧！
- en: Styling the breadcrumbs, page title, and pagination
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置面包屑、页面标题和分页的样式
- en: 'In the following steps, we''ll apply Bootstrap styles to our breadcrumbs, page
    title, and pagination, and then customize them to fit our design:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中，我们将应用 Bootstrap 样式到我们的面包屑、页面标题和分页，然后根据我们的设计进行自定义：
- en: Open `products.html` in your editor.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的编辑器中打开 `products.html`。
- en: 'Find the ordered list just above the `h1` page title, add the `"breadcrumb"`
    class to the `ol` tag, and then add the `"active"` class to the last list item,
    as follows:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `h1` 页面标题正上方的有序列表中找到，将 `"breadcrumb"` 类添加到 `ol` 标签中，然后将 `"active"` 类添加到最后一个列表项中，如下所示：
- en: '[PRE0]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These classes correspond with Bootstrap breadcrumb styles, which you will find
    documented at [http://v4-alpha.getbootstrap.com/components/breadcrumb/](http://v4-alpha.getbootstrap.com/components/breadcrumb/).
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些类与 Bootstrap 面包屑样式相对应，您可以在 [http://v4-alpha.getbootstrap.com/components/breadcrumb/](http://v4-alpha.getbootstrap.com/components/breadcrumb/)
    找到相关文档。
- en: 'Save and refresh your browser. You should see the result shown in the following
    screenshot:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存并刷新您的浏览器。您应该会看到以下截图所示的结果：
- en: '![Styling the breadcrumbs, page title, and pagination](img/00196.jpeg)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![设置面包屑、页面标题和分页的样式](img/00196.jpeg)'
- en: To customize the breadcrumbs for this design, let's remove the light gray background
    and the extra padding.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了自定义此设计的面包屑，让我们移除浅灰色背景和额外的填充。
- en: Let's set the `padding` to `0` and remove the `background-color` entirely
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们将 `padding` 设置为 `0` 并完全移除 `background-color`。
- en: 'Create a new Sass partial in the `scss/_includes` directory called `_breadcrumb.scss`
    and add the following SCSS to it:'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `scss/_includes` 目录中创建一个新的 Sass 部分文件，命名为 `_breadcrumb.scss`，并向其中添加以下 SCSS：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Do not forget to import the `new _breadcrumb.scss` partial file into your `app.scss`
    file as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记按照以下方式将 `new _breadcrumb.scss` 部分文件导入到您的 `app.scss` 文件中：
- en: '[PRE2]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now for the page title. The page title works by nesting the top-level page
    heading within a `div` tag of the `page-header` class. The SCSS code for the `page-header`
    class can be edited in a new `scss/includes/_page-header.scss` partial and may
    look as shown here:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是页面标题。页面标题是通过在 `page-header` 类的 `div` 标签中嵌套顶级页面标题来工作的。`page-header` 类的 SCSS
    代码可以在新的 `scss/includes/_page-header.scss` 部分文件中进行编辑，可能看起来如下所示：
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that you'll have to declare the `$page-header-border-color;` variable
    in the `scss/includes/_varaibels.scss` file and of course also have to import
    the `scss/includes/_page-header.scss` partial in the main `app.scss` file.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，您必须在 `scss/includes/_varaibels.scss` 文件中声明 `$page-header-border-color;` 变量，当然也必须在主
    `app.scss` 文件中导入 `scss/includes/_page-header.scss` 部分文件。
- en: 'Let''s adjust our markup accordingly. For the title, a `h1` tag with Bootstrap''s
    `display-*` classes will be used. Let''s also add some text within a `small` tag
    having Bootstrap''s `text-muted` class to take advantage of the Bootstrap style
    for adding the explanatory notes to our headings:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们相应地调整我们的标记。对于标题，我们将使用带有Bootstrap的`display-*`类的`h1`标签。我们还在一个带有Bootstrap的`text-muted`类的`small`标签内添加了一些文本，以利用Bootstrap的样式为我们的标题添加解释性注释：
- en: '[PRE4]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'That will produce the following result:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下结果：
- en: '![Styling the breadcrumbs, page title, and pagination](img/00197.jpeg)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![设置面包屑、页面标题和分页的样式](img/00197.jpeg)'
- en: 'You can read more about Bootstrap''s typography and heading classes at the
    following URL: [v4-alpha.getbootstrap.com/content/typography/#headings](http://v4-alpha.getbootstrap.com/content/typography/#headings).'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在以下URL了解更多关于Bootstrap的排版和标题类：[v4-alpha.getbootstrap.com/content/typography/#headings](http://v4-alpha.getbootstrap.com/content/typography/#headings)。
- en: 'Finally, the pagination. Our markup for this is found just a few lines above
    the closing `main` tag (`</main>`). Above that closing tag, you''ll see commented
    closing `div` tags for the `.container`, `.row`, and `.products-grid`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，是分页。我们为此的标记位于关闭`main`标签（`</main>`）的几行之上。在那关闭标签之上，你会看到`.container`、`.row`和`.products-grid`的注释关闭`div`标签：
- en: '[PRE5]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Bootstrap's documentation for pagination styles is found at [v4-alpha.getbootstrap.com/components/pagination](http://v4-alpha.getbootstrap.com/components/pagination).
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Bootstrap的分页样式文档可以在[v4-alpha.getbootstrap.com/components/pagination](http://v4-alpha.getbootstrap.com/components/pagination)找到。
- en: 'To apply these styles here, we only need to add `class="pagination"` to the
    `ul` tag that you will find a few lines above the closing `.products-grid` tag:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要应用这些样式，我们只需要在位于关闭`.products-grid`标签几行之上的`ul`标签中添加`class="pagination"`：
- en: '[PRE6]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The markup for the navigation links may contain different classes to set the
    state of a link. The active CSS class makes clear that the link has an active
    state, whilst the disabled CSS class enables you to give some links a disabled
    state.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 导航链接的标记可能包含不同的类来设置链接的状态。活动CSS类清楚地表明链接处于活动状态，而禁用CSS类则允许你给一些链接设置禁用状态。
- en: 'The HTML code for a disabled item may look like the following:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 禁用项的HTML代码可能看起来像以下这样：
- en: '[PRE7]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Neither disabled nor active items are clickable. You can add the add pagination-lg
    or pagination-sm CSS classes for larger or smaller pagination as follows:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 禁用项和活动项均不可点击。你可以添加`pagination-lg`或`pagination-sm`CSS类来设置更大的或更小的分页，如下所示：
- en: '[PRE8]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Also notice that Bootstrap takes accessibility into account. The navigation
    contains various `aria-*` attributes. **Accessible Rich Internet Applications**
    (**ARIA**) is a set of special accessibility attributes that can be added to any
    markup, but is especially suited to HTML. You can read more about ARIA in HTML
    at the website of the **World Wide Web Consortium** (**W3C**), see [https://www.w3.org/TR/html-aria/](https://www.w3.org/TR/html-aria/). Elements
    with Bootstrap's sr-only class provided additional information for only screen
    readers.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还要注意，Bootstrap考虑了无障碍性。导航包含各种`aria-*`属性。**可访问的富互联网应用**（**ARIA**）是一组特殊的无障碍属性，可以添加到任何标记中，但特别适合HTML。你可以在**万维网联盟**（**W3C**）的网站上了解更多关于ARIA在HTML中的信息，见[https://www.w3.org/TR/html-aria/](https://www.w3.org/TR/html-aria/)。具有Bootstrap的sr-only类的元素为屏幕阅读器提供了额外的信息。
- en: Tip
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'For the `Next` and `Prev` items, I''ve already provided the `span` tags for
    the Font Awesome icons, `fa-chevron-left` and `-right`. This gives us the result
    shown in the following screenshot:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于“下一页”和“上一页”项，我已经提供了Font Awesome图标的`span`标签，分别是`fa-chevron-left`和`-right`。这给我们带来了以下截图所示的结果：
- en: '![Styling the breadcrumbs, page title, and pagination](img/00198.jpeg)'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![设置面包屑、页面标题和分页的样式](img/00198.jpeg)'
- en: 'Let''s center align the pagination below our grid. First, wrap it in a parent
    `div` tag. We''ll place the `row` class on this to ensure it clears the content
    above it, and then we''ll add an appropriately named Bootstrap class `text-xs-center`.
    The `xs` in the naming means for the extra small grid and up:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在网格下方居中对齐分页。首先，将其包裹在一个父`div`标签中。我们将在这个标签上放置`row`类以确保清除其上方的内联内容，然后我们将添加一个适当命名的Bootstrap类`text-xs-center`。命名中的`xs`表示对于超小网格及以上：
- en: '[PRE9]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Adjusting the products grid
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整产品网格
- en: 'Before you start you should notice that the product images, provided by the
    holder.js image placeholders as described in [Lesson 9](part0103_split_000.html#3279U1-d17423bd3b664255b5fd09e37e25e334
    "Chapter 9. Bootstrapping Business"), *Bootstrapping Business*, are not responsive.
    Let''s make all images responsive by default by adding the following lines of
    SCSS code to our `app.scss` file:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在您开始之前，您应该注意到由holder.js图像占位符提供的产品图像，如[第9课](part0103_split_000.html#3279U1-d17423bd3b664255b5fd09e37e25e334
    "第9章. 启动业务")“启动业务”中所述，不是响应式的。让我们通过向我们的`app.scss`文件添加以下SCSS代码，使所有图像默认为响应式：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The process of making images responsive by default. It influence all images.
    The logo in the also becomes responsive now and ignores the width we've set in
    the `scss/includes/_header.scss` file before. You can solve that by putting the
    SCSS code for the responsive image before the import of the `_header.scss` file
    in the `app.scss` file.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 默认使图像响应式的过程。它影响所有图像。在`scss/includes/_header.scss`文件中设置的宽度现在也被忽略的logo也变得响应式了。您可以通过在`app.scss`文件中在导入`_header.scss`文件之前放置响应式图像的SCSS代码来解决此问题。
- en: 'You should also inspect the footer logo after making the images responsive
    by default. You''ll find that the logo does not center anymore. The `img-fluid`
    class changes your images into block level element. Block level elements cannot
    be centered by the text-align: center; declaration. You can use the following
    CSS code in the file to center the logo again:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '您还应该检查在默认情况下使图像响应式后页脚徽标。您会发现徽标不再居中。`img-fluid`类将您的图像转换为块级元素。块级元素不能通过text-align:
    center;声明居中。您可以在文件中使用以下CSS代码再次居中徽标：'
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now let's make our products grid look as it should. Before we start, we move
    the product grid to its own HTML template file. Create a new HTML partial called
    `html/includes/products-grid.html`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使我们的产品网格看起来应该是的样子。在我们开始之前，我们将产品网格移动到自己的HTML模板文件中。创建一个新的HTML部分，称为`html/includes/products-grid.html`。
- en: 'In the `html/includes/products.html` file, use the following code to include
    the product grid:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在`html/includes/products.html`文件中，使用以下代码包含产品网格：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you inspect the markup for our product items, you''ll see that each item
    has been given a class of `col-sm-4`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您检查产品项的标记，您会看到每个项都被分配了一个`col-sm-4`类：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then we want our grid to reduce to two products per row for the medium screens,
    while large and extra-large viewports will have three items per row. To accomplish
    this, we need to find and replace the classes in each of our product items so
    that they are as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们希望我们的网格在中等屏幕上每行减少到两个产品，而大型和超大型视口将每行有三个项目。为了实现这一点，我们需要在每个产品项中找到并替换类，使其如下所示：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: These classes will set each product item to half width within extra-small and
    small viewports, and then transition to one-third width for medium and large viewports.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类将使每个产品项在超小和小的视口中设置为半宽度，然后过渡到中等和大型视口的三分之一宽度。
- en: 'The preceding change also means that we have to replace and extend our responsive
    column resets as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的更改还意味着我们必须替换和扩展我们的响应式列重置如下：
- en: 'After each third item the HTML code should look as follows:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每三个项目之后，HTML代码应如下所示：
- en: '[PRE16]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `hidden-sm-down` class in the preceding code has been replaced with the
    class `hidden-sm-down`. And then add the following lines of HTML after each second
    item:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的代码中的`hidden-sm-down`类已被替换为`hidden-sm-down`类。然后，在每个第二个项目之后添加以下HTML代码：
- en: '[PRE17]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After the sixth item you will get the following HTML code now:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第六个项目之后，现在您将得到以下HTML代码：
- en: '[PRE18]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The HTML code after the sixth item above should be replaced with this:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上面的第六个项目之后的HTML代码应替换为以下内容：
- en: '[PRE19]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Product items will now be laid out in two columns on a medium viewport:![Adjusting
    the products grid](img/00200.jpeg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 产品项现在将在中等视口中以两列布局：![调整产品网格](img/00200.jpeg)
- en: Then, our grid will transform to a three-column layout in large and extra-large
    viewports:![Adjusting the products grid](img/00201.jpeg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们的网格将在大型和超大型视口中转换为三列布局：![调整产品网格](img/00201.jpeg)
- en: Let's adjust the styles of our grid items to enhance their visual presentation.
    Having done that, we can fix this layout problem.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们调整网格项的样式，以增强其视觉呈现。完成此操作后，我们可以修复这个布局问题。
- en: As we'll be writing custom styles, create and have the `sccs/includes/_products-grid.scss`
    file open in your editor and import it into the main `app.scss` file.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们将编写自定义样式，请在您的编辑器中创建并打开`sccs/includes/_products-grid.scss`文件，并将其导入到主`app.scss`文件中。
- en: 'Let''s write styles to adjust image width, font size, padding, and margins,
    as shown in the following lines of code:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们编写一些样式来调整图像宽度、字体大小、填充和边距，如下面的代码行所示：
- en: '[PRE20]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'These styles will accomplish the following:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些样式将实现以下效果：
- en: Add bottom padding to each product item.
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个产品项添加底部填充。
- en: Reduce the `h2` heading font size to the size of our `$font-size-lg`.
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `h2` 标题的字体大小减少到我们的 `$font-size-lg` 的大小。
- en: Reduce the `p` font size to our `$font-size-sm` value.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `p` 字体的尺寸减少到我们的 `$font-size-sm` 值。
- en: Reduce `h2` padding by adding `!important` to override any conflicting rules
    .that we've written to apply in the standard pages.
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加 `!important` 来减少 `h2` 的填充，以覆盖我们在标准页面中应用的任何冲突规则。
- en: Set the `p` font color to `$gray`.
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `p` 字体的颜色设置为 `$gray`。
- en: 'Save these new styles, and run the `bootstrap watch` or `gulp` command. Though
    the layout will still be broken in places, you should see significant improvement
    in the styling of the product items, as shown in the following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这些新样式，并运行 `bootstrap watch` 或 `gulp` 命令。尽管布局在某些地方仍然会损坏，但你应该会在产品项的样式上看到显著的改进，如下面的截图所示：
- en: '![Adjusting the products grid](img/00202.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![调整产品网格](img/00202.jpeg)'
- en: It's a beautiful thing to behold.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一件令人赏心悦目的事情。
- en: Don't forget the Card module
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要忘记 Card 模块
- en: In the preceding section you used Bootstrap Grid to build to the product grid.
    You can also use Bootstrap's new card module to build the product grid. Cards
    include header, footers, top and bottom image caps.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，你使用了 Bootstrap Grid 来构建产品网格。你也可以使用 Bootstrap 的新卡片模块来构建产品网格。卡片包括标题、页脚、顶部和底部图像盖子。
- en: 'First, create a new HTML partial called `html/includes/product-grid-cards.html`
    to rebuild the product grid using the Cards module. The HTML code for each card
    should look as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个新的 HTML 部分文件名为 `html/includes/product-grid-cards.html`，使用 Cards 模块重新构建产品网格。每个卡片的
    HTML 代码应如下所示：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Bootstrap enables you to organize your cards in Groups or Decks. In this example,
    you will use decks. Decks contain a set of equal width and height cards that aren''t
    attached to one another. The HTML structure of a Deck of Cards will look as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 允许你将卡片组织成组或 Deck。在这个例子中，你将使用 Deck。Deck 包含一组等宽等高的卡片，这些卡片彼此不相连。Card
    Deck 的 HTML 结构将如下所示：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You'll have to wrap each block of three cards into its own card-deck wrapper.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须将每块三个卡片的块包裹在其自己的 card-deck 包装器中。
- en: 'The Card and Deck groups got a single breakpoint at between the extra small
    and small grid at 576 pixels. Below the breakpoint, the cards will stack. For
    the small grid between 576 and 768 pixels there are three cards in a row too.
    This cards are very small, so you''ll have to reduce the size of the button for
    the small grid by using the following SCSS code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片和 Deck 组在 576 像素之间的额外小网格和小网格处有一个断点。在断点以下，卡片将堆叠。对于 576 到 768 像素之间的中小网格，每行也有三个卡片。这些卡片非常小，所以你必须使用以下
    SCSS 代码来减小中小网格中按钮的大小：
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the preceding code, we've reduced the size of the button in the small viewport.
    Now let's add some space between the card for the larger viewports.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们已经减小了小视图中按钮的大小。现在让我们为较大视口的卡片之间添加一些空间。
- en: 'In `scss/includes/_product-grid.scss` you can add the following SCSS code to
    create some space between the cards:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `scss/includes/_product-grid.scss` 文件中，你可以添加以下 SCSS 代码来在卡片之间创建一些空间：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'With the Card Deck, your product grid may look like the following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Card Deck，你的产品网格可能看起来如下面的截图所示：
- en: '![Don''t forget the Card module](img/00203.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![不要忘记 Card 模块](img/00203.jpeg)'
- en: Cards with the CSS3 Flexbox layout module
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 CSS3 Flexbox 布局模块的卡片
- en: Bootstrap has option flexbox support built in. You can enable flexbox support
    by setting the `$enable-flex` Sass variable to true.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 内置了 flexbox 支持选项。你可以通过将 `$enable-flex` Sass 变量设置为 true 来启用 flexbox
    支持。
- en: 'Create a new HTML partial called `html/includes/product-grid-cards-flexbox.html`
    to test the flexbox layout. Don''t forget to replace the include statement in
    the `html/product.html` file as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 HTML 部分文件名为 `html/includes/product-grid-cards-flexbox.html` 以测试 flexbox
    布局。别忘了按照以下方式替换 `html/product.html` 文件中的包含语句：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the `scss/includes/_variables.scss` file, add the following line of SCSS
    code:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `scss/includes/_variables.scss` 文件中，添加以下 SCSS 代码行：
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `html/includes/product-grid-cards-flexbox.html` file may contain HTML code
    similar to the HTML code used in the `html/includes/product-grid-cards-flexbox.html`
    file. The card-deck-wrapper wrapper is not required when the flexbox support is
    enabled. You can wrap all Cards into a single card-deck wrapper. The breakpoint
    is still set at 576 pixels. For viewports wider than the breakpoint the flexbox
    is responsive by default. The more space there is, the more Cards there are on
    each row. On large and extra-large viewports there are four cards on each row
    by default. Use the flex-basis property to get three cards on each row. The flex-basis
    property specifies the initial length of a flexible item. You can use the following
    SCSS code to set the flex-basis property:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`html/includes/product-grid-cards-flexbox.html`文件可能包含与`html/includes/product-grid-cards-flexbox.html`文件中使用的HTML代码类似的代码。当启用flexbox支持时，不需要card-deck-wrapper包装器。你可以将所有卡片包装到一个单独的card-deck包装器中。断点仍然设置为576像素。对于比断点更宽的视口，flexbox默认是响应式的。空间越大，每行上的卡片就越多。在大型和超大型视口中，默认情况下每行有四个卡片。使用flex-basis属性来获取每行三个卡片。flex-basis属性指定了灵活项的初始长度。你可以使用以下SCSS代码来设置flex-basis属性：'
- en: '[PRE27]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'On a medium grid you will got two cards in each row. The last row has only
    one card, because of we have an odd number of cards. The last card takes 100%
    of the available space and will look like that shown in the following screenshot:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在中等网格中，每行将有两个卡片。最后一行只有一个卡片，因为我们有奇数个卡片。最后一个卡片将占据100%的可用空间，其外观如下所示：
- en: '![Cards with the CSS3 Flexbox layout module](img/00204.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![带有CSS3 Flexbox布局模块的卡片](img/00204.jpeg)'
- en: 'You can try to fix this with Sass by setting the max-width for each card as
    follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过设置每个卡片的max-width来尝试修复这个问题：
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Or alternatively, add an empty card that''s only visible on the medium grid
    by using Bootstrap''s responsive utilities classes:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以通过使用Bootstrap的响应式实用工具类来添加一个仅在中等网格中可见的空卡片：
- en: '[PRE29]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you''ve not removed the borders and rounded corners of the cards, you should
    remove them for the empty card. You can remove the borders and/or rounded corners
    with Sass. Use the following SCSS code to remove the borders from the empty card:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有移除卡片的边框和圆角，你应该为空卡片移除它们。你可以使用Sass移除边框和/或圆角。使用以下SCSS代码从空卡片中移除边框：
- en: '[PRE30]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the preceding code, :last-child is a CSS pseudo-class. CSS pseudo-classes
    can be added to selectors that specifies a special state of the element to be
    selected. The last-child pseudo-class selects any element that is the last child
    element of its parent. You can read more about the last-child pseudo-class at
    the following URL: [https://developer.mozilla.org/nl/docs/Web/CSS/:last-child](https://developer.mozilla.org/nl/docs/Web/CSS/:last-child).'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`:last-child`是一个CSS伪类。CSS伪类可以添加到选择器中，指定要选择元素的特定状态。`:last-child`伪类选择任何是其父元素的最后一个子元素的元素。你可以在以下网址了解更多关于`:last-child`伪类的信息：[https://developer.mozilla.org/nl/docs/Web/CSS/:last-child](https://developer.mozilla.org/nl/docs/Web/CSS/:last-child).
- en: Note
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Notice that the SCSS code with the `&` parent reference in front of the last-child
    pseudo-class compiles into CSS code as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，带有`&`父引用的SCSS代码在最后子伪类之前编译成以下CSS代码：
- en: '`.card-deck .card:last-child order: initial; }`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`.card-deck .card:last-child order: initial; }`'
- en: 'Now the last cards on the medium grid should look as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，中等网格上的最后几个卡片应该看起来如下：
- en: '![Cards with the CSS3 Flexbox layout module](img/00205.jpeg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![带有CSS3 Flexbox布局模块的卡片](img/00205.jpeg)'
- en: 'Of course, you can you can also remove just the rounded corners by using the
    following SCSS code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以通过以下SCSS代码仅移除圆角：
- en: '[PRE31]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can read more about the CSS3 flexbox layout module at the following URL:
    [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes).
    Internet Explorer 9 and earlier do not support flexbox.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下网址了解更多关于CSS3 flexbox布局模块的信息：[https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes)。Internet
    Explorer 9及更早版本不支持flexbox。
- en: Next, we'll style the filtering options sidebar.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为过滤选项侧边栏设置样式。
- en: Styling the options sidebar
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置选项侧边栏的样式
- en: Now, let's style our filtering options. These appear just before the markup
    for our product items. In small, medium, and large viewports, they appear as a
    left-hand sidebar.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为我们的过滤选项设置样式。这些选项出现在我们的产品项目标记之前。在小、中和大视口中，它们显示为左侧边栏。
- en: 'At the moment, they appear like the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，它们看起来如下面的截图所示：
- en: '![Styling the options sidebar](img/00206.jpeg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![设置选项侧边栏的样式](img/00206.jpeg)'
- en: 'For our final design, we want to transform the **Clearance Sale** link into
    an attractive extra-large button and arrange the filtering options into two columns
    with checkboxes rather than bullets, as shown in the following screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的最终设计，我们希望将**清仓大甩卖**链接转换成一个吸引人的超大按钮，并将过滤选项排列成两列，而不是使用项目符号，如下面的截图所示：
- en: '![Styling the options sidebar](img/00207.jpeg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![设置选项侧边栏的样式](img/00207.jpeg)'
- en: Let's begin by setting up some basic styles to lay a basic groundwork.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从设置一些基本样式开始，为基本工作打下基础。
- en: Setting up basic styles
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置基本样式
- en: We'll start by adjusting fonts, colors, margins, and padding.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从调整字体、颜色、边距和填充开始。
- en: 'Let''s add these rules to a new Sass partial called `_grid-options.scss`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这些规则添加到一个名为`_grid-options.scss`的新Sass部分中：
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The preceding code does the following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码执行以下操作：
- en: Adds Bootstrap Card styles to our sidebar (see the relevant Bootstrap documentation
    at [v4-alpha.getbootstrap.com/components/card/](http://v4-alpha.getbootstrap.com/components/card/))
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Bootstrap卡片样式添加到我们的侧边栏中（有关Bootstrap文档，请参阅[v4-alpha.getbootstrap.com/components/card/](http://v4-alpha.getbootstrap.com/components/card/)）
- en: Adds top and bottom padding to the sidebar so that our new background extends
    past the sidebar content
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向侧边栏添加顶部和底部填充，以便我们的新背景延伸到侧边栏内容之外
- en: Adjusts font size, line-height, and color for the `h2` heading
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整`h2`标题的字体大小、行高和颜色
- en: Notice that you should not forget to import the `_grid-options.scss` file into
    your `app.scss` file.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，您不应忘记将`_grid-options.scss`文件导入到您的`app.scss`文件中。
- en: Next, we will style the **Clearance Sale** link.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将对**清仓大甩卖**链接进行样式化。
- en: Styling the Clearance Sale link
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式化清仓大甩卖链接
- en: We want to transform our **Clearance Sale** link into an extra-large attractive
    button.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将我们的**清仓大甩卖**链接转换成一个超大吸引人的按钮。
- en: 'Let''s adjust the markup to do the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调整标记以执行以下操作：
- en: Turn the linked heading and paragraph into a button.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将链接标题和段落转换为按钮。
- en: Add the custom button `btn-feature` class, which we created in [Lesson 9](part0103_split_000.html#3279U1-d17423bd3b664255b5fd09e37e25e334
    "Chapter 9. Bootstrapping Business"), *Bootstrapping Business*, to give the button
    our special featured color—red.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加自定义按钮 `btn-feature` 类，这是我们之前在[第9课](part0103_split_000.html#3279U1-d17423bd3b664255b5fd09e37e25e334
    "第9章. 自我启动业务")中创建的，在《自我启动业务》中，以给按钮赋予我们特殊的功能颜色——红色。
- en: Add a Font Awesome icon for a sale tag. We'll make it three times the normal
    size by using Font Awesome's built-in `icon-3x` class.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为销售标签添加Font Awesome图标。我们将使用Font Awesome内置的`icon-3x`类将其大小增加到正常大小的三倍。
- en: Note
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about Font Awesome's special sizing classes, see the documentation
    at [http://fontawesome.io/examples/#larger](http://fontawesome.io/examples/#larger).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Font Awesome特殊尺寸类的更多信息，请参阅[http://fontawesome.io/examples/#larger](http://fontawesome.io/examples/#larger)的文档。
- en: 'The resulting HTML markup is as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的HTML标记如下：
- en: '[PRE33]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This immediately gives us a good start towards our desired result as shown
    in the following screenshot:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这立即为我们朝着期望的结果迈出了良好的一步，如下面的截图所示：
- en: '![Styling the Clearance Sale link](img/00208.jpeg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![设置清仓大甩卖链接的样式](img/00208.jpeg)'
- en: 'Now to polish it up, perform the following steps:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来润色一下，执行以下步骤：
- en: Display the **Clearance Sale** button as a block-level element by setting the
    display property to block and center it `by extending` Bootstrap's `m-x-auto`
    class. The `m-x-auto` class is part of Bootstrap's Utility classes and centers
    fixed-width block level content by setting the horizontal margins to auto.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过设置`display`属性为`block`并使用`by extending` Bootstrap的`m-x-auto`类来居中显示**清仓大甩卖**按钮。`m-x-auto`类是Bootstrap的实用类之一，通过设置水平边距为自动来居中固定宽度的块级内容。
- en: Force its width to fill 92.5 percent of its containing column.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 强制其宽度填充其包含列的92.5%。
- en: Add top and bottom padding.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加顶部和底部填充。
- en: Override Bootstrap's `white-space:nowrap` rule for buttons, so that our text
    can wrap as it should (See Bootstrap's `white-space` rule in `/bootstrap/scss/_buttons.scss`.
    You can learn more about the `white-space` property at [http://css-tricks.com/almanac/properties/w/whitespace/](http://css-tricks.com/almanac/properties/w/whitespace/).)
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '覆盖Bootstrap的`white-space: nowrap`规则，以便我们的文本可以像预期的那样换行（有关Bootstrap的`white-space`规则，请参阅`/bootstrap/scss/_buttons.scss`。您可以在[http://css-tricks.com/almanac/properties/w/whitespace/](http://css-tricks.com/almanac/properties/w/whitespace/)了解更多关于`white-space`属性的信息。）'
- en: Position it relatively so that we can apply absolute positioning to the tag
    icon.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其定位为相对位置，以便我们可以对标签图标应用绝对定位。
- en: Adjust font, color, font-size, and margins on our heading and paragraph.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整标题和段落上的字体、颜色、字体大小和边距。
- en: Position the tag icon at the top right.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签图标定位在右上角。
- en: 'We can accomplish these goals by adding the following style rules:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过添加以下样式规则来实现这些目标：
- en: '[PRE34]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Notice that the background-color of the **Clearance Sale** button is set by
    the class in the HTML code in the `html/pages/products.html` file. The `btn-feature`
    class is generated via the `scss/includes/_buttons.scss` partial file with the
    following SCSS code:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，**清仓销售**按钮的背景颜色是由`html/pages/products.html`文件中的HTML代码中的类设置的。`btn-feature`类是通过`scss/includes/_buttons.scss`部分文件中的以下SCSS代码生成的：
- en: '[PRE35]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'At the end, this gives us a pleasing result, as is evident from the following
    screenshot:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这给我们带来了令人愉悦的结果，如下面的截图所示：
- en: '![Styling the Clearance Sale link](img/00209.jpeg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![设置清仓销售链接的样式](img/00209.jpeg)'
- en: As a bonus, these styles work well across viewport sizes. Take a few moments
    to test it. Then of course, as always, feel free to take what we've begun and
    beautify it further.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的好处，这些样式在视口大小上表现良好。花几分钟时间测试一下。当然，就像往常一样，你可以自由地使用我们开始的工作并进一步美化它。
- en: Meanwhile, let's move down to the options for filtering our products.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，让我们转到筛选我们产品的选项。
- en: Styling the options list
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式化选项列表
- en: In this section, we will transform our lists of product filtering options.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将转换我们的产品筛选选项列表。
- en: If you take a moment to examine the markup of product filtering options in a
    store such as Amazon ([http://www.amazon.com](http://www.amazon.com)) or Zappos
    ([http://www.zappos.com](http://www.zappos.com)), you'll find that they are composed
    lists of links that have been specially styled to appear like checkboxes. We will
    style our links to look like checkboxes, which will appear as checked once selected,
    and we'll adjust them to work nicely across devices, such as tablet and phone
    devices.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你花点时间检查亚马逊（[http://www.amazon.com](http://www.amazon.com)）或Zappos（[http://www.zappos.com](http://www.zappos.com)）等商店的产品筛选选项的标记，你会发现它们是由链接组成的列表，这些链接被特别样式化，看起来像复选框。我们将样式化我们的链接，使其看起来像复选框，一旦选中就会显示为选中状态，并且我们将调整它们以在平板电脑和手机等设备上良好工作。
- en: Tip
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: On e-commerce websites such as Amazon and Zappos, the filter options are connected
    to a content management system, which dynamically updates the grid of shown products
    in response to the options selected. Bootstrap is a frontend design framework,
    and not a content management system. Thus, we will not be dynamically filtering
    our products as a part of this project. Instead, we will prepare a design that
    is ready to be used in the context of a complete content management system.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在像亚马逊和Zappos这样的电子商务网站上，筛选选项与内容管理系统相连，它会根据选定的选项动态更新显示的产品网格。Bootstrap是一个前端设计框架，而不是内容管理系统。因此，我们不会在这个项目中动态筛选我们的产品。相反，我们将准备一个设计，以便在完整的内容管理系统环境中使用。
- en: 'In the coming section, we''ll use the HTML code from the `html/pages/products.html`
    file. The HTML code of an option list may look as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将使用来自`html/pages/products.html`文件的HTML代码。一个选项列表的HTML代码可能看起来如下所示：
- en: '[PRE36]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Edit your SCSS code in the `scss/includes/_grid-options.scss` partial file.
    We''ll start with the `h3` headings for the lists, adjusting their size, line-height,
    margin, and color:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在`scss/includes/_grid-options.scss`部分文件中编辑你的SCSS代码。我们将从列表的`h3`标题开始，调整它们的大小、行高、边距和颜色：
- en: '[PRE37]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Tip
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We need to use the `>h3` child selector since we don't want these rules to apply
    to other `h3` tags, especially the one within our **Clearance Sale** button.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`>h3`子选择器，因为我们不希望这些规则应用于其他`h3`标签，特别是我们**清仓销售**按钮内的那个。
- en: Now, let's turn our attention to the unordered lists. These have a special class
    of `options-list`, which we'll use as our selector to ensure we're targeting only
    these special lists.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们把注意力转向无序列表。这些列表有一个特殊的`options-list`类，我们将使用它作为选择器，以确保我们只针对这些特殊列表。
- en: 'First, let''s remove bullets and padding:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们移除项目符号和填充：
- en: '[PRE38]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Now we'll style the links. Shortly, we'll also style the list items, so we'll
    include them in the sequence of nested selectors.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将对链接进行样式设计。很快，我们也将对列表项进行样式设计，所以我们将它们包含在嵌套选择器的顺序中。
- en: '[PRE39]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The rules we just set accomplish the following:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚设定的规则实现了以下功能：
- en: We'll use the power of Sass' extend feature to pull in the fundamental button
    styles associated with the `btn` class that includes displaying the `inline-block`
    link and the addition of padding.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将使用 Sass 的扩展功能来引入与 `btn` 类相关的根本按钮样式，该样式包括显示 `inline-block` 链接和添加填充。
- en: Since we added no other button class, there is no background color
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我们没有添加其他按钮类，因此没有背景颜色
- en: What we gain from these basic button styles is a convenient way to make our
    links user-friendly click targets-including fingers on touch devices
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从这些基本的按钮样式中获得的好处是，我们有一个方便的方式来使我们的链接成为用户友好的点击目标——包括触摸设备上的手指
- en: We then extend the styles associated with the `btn-sm` class to reduce padding
    and for the font-size to be a bit smaller than the standard button (for a refresher
    on Bootstrap button classes, go to [v4-alpha.getbootstrap.com/components/buttons/](http://v4-alpha.getbootstrap.com/components/buttons/))
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们随后扩展与 `btn-sm` 类相关的样式，以减少填充并使字体大小略小于标准按钮（如需刷新 Bootstrap 按钮类，请访问 [v4-alpha.getbootstrap.com/components/buttons/](http://v4-alpha.getbootstrap.com/components/buttons/))
- en: We then remove unneeded left and right padding
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们随后移除不必要的左右填充
- en: We change the color of our link text to `$gray`
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将链接文本的颜色更改为 `$gray`
- en: Finally, we set the color of hovered, focused, and active links to our `$link-color`
    value
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将悬停、聚焦和活动链接的颜色设置为我们的 `$link-color` 值
- en: 'You may want to save, compile, and test the results. The following screenshot
    depicts the result we get:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想要保存、编译并测试结果。以下截图展示了我们得到的结果：
- en: '![Styling the options list](img/00210.jpeg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![设置选项列表的样式](img/00210.jpeg)'
- en: Our option links have gained improved padding and font size and taken our desired
    colors.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的选项链接获得了改进的填充和字体大小，并采用了我们想要的颜色。
- en: Tip
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You may be wondering why I've chosen to extend the button styles by using the
    `.btn` and `.btn-sm` classes in our Sass files rather than adding the classes
    directly to the markup. We could do the latter, but given the number of option
    links, I think you will agree that it is far more efficient to apply the styles
    via CSS as we've done. In the section that follows, I will continue this pattern
    and extend it by bringing in Font Awesome icons via Sass rather than by adding
    markup.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道为什么我选择在 Sass 文件中使用 `.btn` 和 `.btn-sm` 类来扩展按钮样式，而不是直接在标记中添加类。我们可以这样做，但考虑到选项链接的数量，我认为你也会同意通过
    CSS 应用样式（就像我们之前做的那样）要高效得多。在接下来的部分，我将继续这种模式，并通过 Sass 引入 Font Awesome 图标而不是通过添加标记来扩展它。
- en: Now we'll add checkboxes to our option links.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在选项链接中添加复选框。
- en: Adding Font Awesome checkboxes to our option links
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Font Awesome 复选框添加到我们的选项链接中
- en: In this section, we'll use Font Awesome icons to add an empty checkbox to the
    left of each option link. Rather than adding icons in the markup, we will do it
    here via Sass as it will be far more efficient. Then we'll push a step further,
    adding styles to pull in an alternate Font Awesome icon-for a checked checkbox
    - to the hovered, focused, and active option links.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Font Awesome 图标在选项链接的左侧添加一个空白的复选框。我们不会在标记中添加图标，而是在这里通过 Sass 来做，这将更加高效。然后我们将更进一步，为悬停、聚焦和活动的选项链接添加样式以引入一个备选的
    Font Awesome 图标——用于勾选的复选框。
- en: 'Adding icons via Sass requires extending Font Awesome styles. First, we will
    take these fundamental styles from the fa base class, which can be found in the
    `_core.scss` file in the `bower_components/font-awesome` folder. In this file,
    you''ll find the following key styles:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Sass 添加图标需要扩展 Font Awesome 样式。首先，我们将从 fa 基础类中获取这些基本样式，这些样式可以在 `bower_components/font-awesome`
    文件夹中的 `_core.scss` 文件中找到。在这个文件中，你会找到以下关键样式：
- en: '[PRE40]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Tip
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'In the preceding code we''ve used the `.#{$fa-css-prefix}` selector, which
    is based on Sass'' variable interpolation. The Sass compiler uses the #{} interpolation
    syntax to compile variables into selectors and property names. Read more about
    variable interpolation in Sass at the following URL: [http://sass-lang.com/documentation/file.SASS_REFERENCE.html#interpolation_](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#interpolation_)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的代码中，我们使用了 `.#{$fa-css-prefix}` 选择器，这是基于 Sass 的变量插值。Sass 编译器使用 #{} 插值语法将变量编译成选择器和属性名称。有关
    Sass 中变量插值的更多信息，请参阅以下网址：[http://sass-lang.com/documentation/file.SASS_REFERENCE.html#interpolation_](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#interpolation_)'
- en: These styles establish the fundamental rules for all Font Awesome icons, including
    the Font Awesome icon for the font family and then refine the details of its presentation.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这些样式为所有 Font Awesome 图标建立了基本规则，包括字体家族的 Font Awesome 图标，然后细化其展示细节。
- en: For our present purposes, we do not need the selector or the braces but only
    the rules. We will take these and apply them to our links. Primarily, we'll use
    the `:before` pseudo-element as it ensures the best results.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的当前目的，我们不需要选择器或大括号，只需要规则。我们将使用这些规则并将其应用于我们的链接。主要，我们将使用 `:before` 伪元素，因为它确保了最佳结果。
- en: Tip
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: For more information about the CSS2.1 `:before` pseudo-element, go to [http://coding.smashingmagazine.com/2011/07/13/learning-to-use-the-before-and-after-pseudo-elements-in-css/](http://coding.smashingmagazine.com/2011/07/13/learning-to-use-the-before-and-after-pseudo-elements-in-css/).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 CSS2.1 `:before` 伪元素的更多信息，请访问 [http://coding.smashingmagazine.com/2011/07/13/learning-to-use-the-before-and-after-pseudo-elements-in-css/](http://coding.smashingmagazine.com/2011/07/13/learning-to-use-the-before-and-after-pseudo-elements-in-css/)。
- en: 'So edit the following rules in the _`grid-options.scss` file, nested as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，请在以下规则中编辑 `_grid-options.scss` 文件，嵌套如下：
- en: '[PRE41]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'These rules establish the fundamentals. Next, we need to specify which Font
    Awesome icon to use. Browsing the options at [http://fontawesome.io/icons/](http://fontawesome.io/icons/),
    we find the following open checkbox icon:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则建立了基础。接下来，我们需要指定要使用哪个 Font Awesome 图标。浏览 [http://fontawesome.io/icons/](http://fontawesome.io/icons/)
    上的选项，我们发现以下开放的复选框图标：
- en: '![Adding Font Awesome checkboxes to our option links](img/00211.jpeg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![将 Font Awesome 复选框添加到我们的选项链接中](img/00211.jpeg)'
- en: 'The Sass rules for this icon are found in the `_icons.scss` file inside the
    `font-awesome` folder. By opening that file and searching for the `}-square-o`
    string (including the closing curly brace before `-square-o` to narrow the results),
    we can find the following relevant line:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 此图标的 Sass 规则位于 `font-awesome` 文件夹中的 `_icons.scss` 文件内。通过打开该文件并搜索 `}-square-o`
    字符串（包括 `-square-o` 前面的闭合大括号以缩小搜索结果），我们可以找到以下相关行：
- en: '[PRE42]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'From the previous line, we only need `content: $fa-var-square-o`, which we
    can copy and paste in the `_grid-options.scss` file directly after the preceding
    rules, which are applied to our `a:before` selector or alternatively extend the
    `.fa-square-o:before` selector:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '从上一行中，我们只需要 `content: $fa-var-square-o`，我们可以直接在 `_grid-options.scss` 文件中复制并粘贴，位于先前的规则之后，这些规则应用于我们的
    `a:before` 选择器，或者也可以扩展 `.fa-square-o:before` 选择器：'
- en: '[PRE43]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Finally, we want to grab Font Awesome styles to give our icons a fixed width
    and to avoid any shifting when the icon changes to the checked version. These
    styles are found in the `_fixed-width.scss` file inside the `font-awesome` folder.
    Extend the `.fa-fw` class as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们想要获取 Font Awesome 样式，以给我们的图标一个固定宽度，并避免图标变为选中版本时发生任何偏移。这些样式位于 `font-awesome`
    文件夹中的 `_fixed-width.scss` 文件内。按照以下方式扩展 `.fa-fw` 类：
- en: '[PRE44]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'After adding these rules, run the bootstrap watch command and inspect the results
    in your browser. You should see the checkboxes appear as shown in the following
    screenshot:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这些规则后，运行 bootstrap watch 命令并在浏览器中检查结果。你应该会看到复选框如以下截图所示出现：
- en: '![Adding Font Awesome checkboxes to our option links](img/00212.jpeg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![将 Font Awesome 复选框添加到我们的选项链接中](img/00212.jpeg)'
- en: 'Now, following the same approach, we''ll add the following selectors and rules
    to apply the checked version of the Font Awesome icon to the hovered, focused,
    and active states of our links:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照相同的方法，我们将添加以下选择器和规则，将 Font Awesome 图标的选中版本应用于我们链接的悬停、聚焦和活动状态：
- en: '[PRE45]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Bootstrap's `hover-focus-active` mixin can be found in the b`ower_components/bootstrap/scss/mixins/_hover.sccs`
    partial. You can use this mixin to set the active, hover, and focus states once.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 的 `hover-focus-active` 混合可以在 `bower_components/bootstrap/scss/mixins/_hover.sccs`
    部分找到。您可以使用此混合来设置一次活动、悬停和聚焦状态。
- en: 'Save the file, and inspect the results in your browser. You''ll find that the
    checked version of the square icon appears when you hover on one of the links,
    as shown in the following screenshot:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件，并在浏览器中检查结果。你会发现当你在链接上悬停时，正方形的选中版本会出现，如以下截图所示：
- en: '![Adding Font Awesome checkboxes to our option links](img/00213.jpeg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![将 Font Awesome 复选框添加到我们的选项链接中](img/00213.jpeg)'
- en: Tip
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: As a reminder, it is not currently possible to force one of these links to stay
    in the active state as we have no content management system in place. What we
    do have is a set of styles ready and waiting to go to work in the context of such
    a content management system.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提醒，目前无法强制其中一个链接保持活动状态，因为我们没有设置内容管理系统。我们拥有的只是一套准备就绪的样式，等待在内容管理系统的上下文中发挥作用。
- en: That's it! We've successfully given our links the appearance of checkboxes to
    provide desired user feedback.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们已经成功给我们的链接添加了复选框的外观，以提供所需的用户反馈。
- en: Next, let's make more efficient use of our space by floating our options side
    by side.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们通过将选项并排浮动来更有效地利用我们的空间。
- en: Using Sass mixins to arrange option links in columns
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Sass 混合来排列选项链接的列
- en: In the previous section, we used custom Sass rules to accomplish things that
    might have been accomplished by adding markup. Given the number of option links
    we need to manage, this has proven significantly more efficient. The same dynamic
    applies when we want to arrange our option links into columns.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们使用了自定义 Sass 规则来完成可能通过添加标记来完成的任务。考虑到我们需要管理的选项链接数量，这已经证明效率显著更高。当我们想要将选项链接排列成列时，同样的动态也适用。
- en: 'We might accomplish our desired result by using Bootstrap row and column classes,
    adjusting our markup with the following pattern:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能通过使用 Bootstrap 行和列类，调整我们的标记，使用以下模式来实现我们想要的结果：
- en: '[PRE46]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Note
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In [Lesson 9](part0103_split_000.html#3279U1-d17423bd3b664255b5fd09e37e25e334
    "Chapter 9. Bootstrapping Business"), *Bootstrapping Business*, you saw that the
    Panini template engine does support loops and iterations. Using loops in your
    template is also an alternative for DRY coding and preventing duplicate code.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 9 课](part0103_split_000.html#3279U1-d17423bd3b664255b5fd09e37e25e334 "第
    9 章. 创业"), *创业* 中，你看到 Panini 模板引擎支持循环和迭代。在模板中使用循环也是避免重复代码和 DRY 编码的替代方案。
- en: 'An example can be found in the `html/pages/products.html` file. The code of
    the first list looks as follows:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子可以在 `html/pages/products.html` 文件中找到。第一个列表的代码如下所示：
- en: '[PRE47]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The numbers-10 variable is read from the file, which contains the number 1 through
    10 in YAML format. Using the index of the iteration seem to make more sense, but
    unfortunately, Panini does not support this feature of Handlebars. See also [https://github.com/zurb/panini/issues/67](https://github.com/zurb/panini/issues/67).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件中读取的变量是 numbers-10，该文件包含以 YAML 格式从 1 到 10 的数字。使用迭代索引看起来更有意义，但不幸的是，Panini
    不支持 Handlebars 的这个特性。也请参阅[https://github.com/zurb/panini/issues/67](https://github.com/zurb/panini/issues/67)。
- en: 'Thanks to the power of Bootstrap''s mixins, we can accomplish the same result
    with a few lines of Sass, as shown in the following steps:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了 Bootstrap 混合的强大功能，我们可以用几行 Sass 完成相同的结果，如下面的步骤所示：
- en: 'First, we''ll apply the `make-row()` mixin to the `options-list` selector,
    as follows:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将 `make-row()` 混合应用到 `options-list` 选择器，如下所示：
- en: '[PRE48]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This mixin applies the same styles to our options list that we would have gained
    by applying the `row` class in the markup. In this case, it's simply more efficient
    to do it here.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个混合将与我们通过在标记中应用 `row` 类所获得的相同样式应用到我们的选项列表上。在这种情况下，在这里做更有效率。
- en: 'Next, we can use a `make-col(6)` mixin and set the number of column to six
    to apply column rules to our list items as follows:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以使用 `make-col(6)` 混合并将列数设置为六，以将列规则应用到我们的列表项上，如下所示：
- en: '[PRE49]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This will apply the same styles to our list items as would be applied if we
    had added the `col-xs-6` class to each of the relevant `li` tags. Later on, you
    will read how to make the columns responsive.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将把相同的样式应用到我们的列表项上，就像我们给每个相关的 `li` 标签添加了 `col-xs-6` 类一样。稍后，你将了解到如何使列响应式。
- en: 'After adding the preceding lines, save the file, compile to CSS, and refresh
    your browser. You should see the option links line up in two columns:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 添加上述行后，保存文件，编译为 CSS，并刷新浏览器。你应该看到选项链接以两列的形式排列：
- en: '![Using Sass mixins to arrange option links in columns](img/00214.jpeg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Sass 混合来排列选项链接的列](img/00214.jpeg)'
- en: Not bad!
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 还不错！
- en: We will now make some adjustments for smaller viewports.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将对较小的视口进行一些调整。
- en: Adjusting the options list layout for tablets and phones
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整选项列表布局以适应平板和手机
- en: We need to constrain the width of our options panel so that it does not range
    too widely in tablet-width devices.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要限制选项面板的宽度，使其在平板宽度设备上不要范围太广。
- en: 'On the medium grid for tablets, between 768 and 992 pixels, neither the **Clearance
    Sale** button nor the options fit the column, as shown in the following screenshot:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在平板的中等网格中，768 到 992 像素之间，**清仓大甩卖**按钮和选项都不适合列，如下面的截图所示：
- en: '![Adjusting the options list layout for tablets and phones](img/00215.jpeg)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![调整选项列表布局以适应平板和手机](img/00215.jpeg)'
- en: 'We can fix this issues with the options by using Sass and force the options
    into a single column again for the medium grid as follows:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Sass 修复这个问题，并强制将选项在中等网格中再次排列成单列，如下所示：
- en: '[PRE50]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The preceding SCSS code does not fix the **Clearance Sale** button for the medium
    grid. You may try the reduce the font size to fix it.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 SCSS 代码没有解决中等网格的 **清仓大甩卖** 按钮。您可以尝试减小字体大小来修复它。
- en: 'Alternatively, you can adopt the main grid the solve the issues on the medium
    grid. In the `html/pages/products.html` file change the grid classes as shown
    here:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以采用主网格来解决中等网格上的问题。在 `html/pages/products.html` 文件中，按照以下所示更改网格类：
- en: '[PRE51]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The grid-options area will span four columns on the medium grid now. The problems
    for the medium grid are fixed. Let's take on the small grid.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在中等网格中，网格选项区域现在将跨越四列。中等网格的问题已解决。让我们来处理小网格。
- en: 'Right now, our **Clearance Sale** button stretches too wide, and our options
    list items spread too far apart on viewports between 480 pixels and 768 pixels
    wide. Thus, they can end up appearing like the following screenshot:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的 **清仓大甩卖** 按钮太宽，在 480 像素到 768 像素宽的视图中，我们的选项列表项间距太远。因此，它们最终可能看起来像以下截图：
- en: '![Adjusting the options list layout for tablets and phones](img/00216.jpeg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![调整平板电脑和手机上的选项列表布局](img/00216.jpeg)'
- en: 'This can be easily fixed by setting a `max-width` property with a value of
    480 pixels for the entire options panel:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过为整个选项面板设置一个值为 480 像素的 `max-width` 属性来轻松修复：
- en: '[PRE52]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now let''s adjust our option list items so that they organize themselves in
    three columns in small viewports. Using Sass, we can nest a media query within
    the appropriate selector and add an adjusted `make-col(4)` mixin, as shown in
    the following code snippet:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们调整我们的选项列表项，以便它们在小视图中以三列的形式组织。使用 Sass，我们可以在适当的选择器内嵌套一个媒体查询，并添加一个调整后的 `make-col(4)`
    混合，如下面的代码片段所示：
- en: '[PRE53]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'After making these adjustments, save the file and test in a narrow viewport.
    You should see the result shown in the following screenshot:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行这些调整后，保存文件并在窄视图中进行测试。你应该会看到以下截图所示的结果：
- en: '![Adjusting the options list layout for tablets and phones](img/00217.jpeg)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![调整平板电脑和手机上的选项列表布局](img/00217.jpeg)'
- en: 'Now let''s address the next problem facing our single-column layout: we need
    to hide our options away until they''re needed.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们解决我们单列布局面临的下一个问题：我们需要在需要时隐藏我们的选项。
- en: Collapsing the options panel for phone users
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为手机用户折叠选项面板
- en: At present, our options take up a considerable amount of vertical space. This
    creates a problem in narrow viewports. The single-column layout winds up pushing
    our grid of products far down the page.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的选项占据了相当多的垂直空间。这在窄视图中造成了一个问题。单列布局最终会将我们的产品网格推到页面底部。
- en: This is a great deal of vertical space for options that are not needed. The
    products themselves are priority items. We need to allow users of phones to find
    the products more quickly while still allowing them to access the filtering options
    when desired.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于不需要的选项来说是一个很大的垂直空间。产品本身是优先事项。我们需要允许手机用户更快地找到产品，同时仍然允许他们在需要时访问过滤选项。
- en: 'We''ll use Bootstrap''s collapse plugin for this. In the following steps, we''ll
    apply the collapse plugin to the options panel, add a button to expand the panel
    when desired, and restrict the behavior to narrow viewports only:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Bootstrap 的折叠插件来完成这个任务。在以下步骤中，我们将折叠插件应用于选项面板，添加一个按钮以在需要时展开面板，并将行为限制在窄视图中：
- en: Open your editor with `products.html`.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `products.html` 打开您的编辑器。
- en: 'Add a new `div` tag to wrap our **Clearance Sale** button and three options
    lists. We need to give this new `div` a special class of collapse as well as a
    distinctive ID so that we can target it with our JavaScript plugin. For good measure,
    we''ll give it a matching special class as well:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的 `div` 标签来包裹我们的 **清仓大甩卖** 按钮 和三个选项列表。我们需要给这个新的 `div` 一个特殊的折叠类以及一个独特的 ID，以便我们可以用我们的
    JavaScript 插件定位它。为了保险起见，我们还将给它一个匹配的特殊类：
- en: '[PRE54]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Notice that the `collapse` class in the previous step hides the content for
    all viewports. You can add the `navbar-toggleable-sm` class to ensure the content
    is always visible on larger viewports:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意到在上一步骤中的 `collapse` 类隐藏了所有视口的内容。您可以通过添加 `navbar-toggleable-sm` 类来确保内容在更大的视口中始终可见：
- en: '[PRE55]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Tip
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Bootstrap's collapse JavaScript plugin is what powers the collapsible responsive
    navbar. It may also be put to other uses, such as the one shown in the Bootstrap
    documentation at [v4-alpha.getbootstrap.com/components/collapse/](http://v4-alpha.getbootstrap.com/components/collapse/).
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Bootstrap 的折叠 JavaScript 插件是驱动可折叠响应式导航栏的动力。它也可以用于其他用途，例如在 Bootstrap 文档中所示，见
    [v4-alpha.getbootstrap.com/components/collapse/](http://v4-alpha.getbootstrap.com/components/collapse/)。
- en: Save the file and refresh it in your browser. You should see that the **Clearance
    Sale** button and options lists will now be hidden from view. All that remains
    of the options panel content will be the `h2` heading **Narrow your selection**,
    as shown in the following screenshot:![Collapsing the options panel for phone
    users](img/00218.jpeg)
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并在浏览器中刷新。您应该会看到**清仓大甩卖**按钮和选项列表现在已从视图中隐藏。选项面板内容剩下的将是 `h2` 标题**缩小选择范围**，如以下截图所示：![为手机用户折叠选项面板](img/00218.jpeg)
- en: Now we need a toggle button to expand our filter options when clicked.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要一个切换按钮，当点击时可以展开我们的筛选选项。
- en: 'Within the still visible `h2` heading that reads **Narrow your selection**,
    add a button element with the following attribute structure:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仍然可见的、读作**缩小选择范围**的 `h2` 标题内，添加一个具有以下属性结构的按钮元素：
- en: '[PRE56]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The following points explain what the preceding markup will do:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下要点解释了前面的标记将做什么：
- en: The `clearfix` class will ensure that the `h2` heading will contain the toggle
    button, which will float to the right due to the pull-right class.
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`clearfix` 类将确保 `h2` 标题包含切换按钮，由于 `pull-right` 类，按钮将浮动到右侧。'
- en: The `btn` and `btn-primary` classes will style our new `button` element with
    the Bootstrap's `btn` styles, which includes our background color of $brand-primary
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`btn` 和 `btn-primary` 类将使用 Bootstrap 的 `btn` 样式来设置我们的新 `button` 元素，这包括我们的 `$brand-primary`
    背景颜色。'
- en: The `hidden-md-up` class hides the button on larger viewports.
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`hidden-md-up` 类在较大视口中隐藏按钮。'
- en: Within the `button` element, we've placed a Font Awesome icon using the `fa-2x`
    class to double its size.
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `button` 元素内，我们使用 `fa-2x` 类放置了一个 Font Awesome 图标，以将其大小加倍。
- en: 'Save this and find the following result in your browser:'
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存此文件，并在浏览器中查找以下结果：
- en: '![Collapsing the options panel for phone users](img/00219.jpeg)'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![为手机用户折叠选项面板](img/00219.jpeg)'
- en: In narrow viewports, the options list is collapsed and the toggle button is
    visible:![Collapsing the options panel for phone users](img/00220.jpeg)
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在较窄视口中，选项列表被折叠，切换按钮可见：![为手机用户折叠选项面板](img/00220.jpeg)
- en: 'In small, medium, and large viewports, the toggle button is hidden, and the
    options list is visible:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在小、中和大视口中，切换按钮被隐藏，选项列表可见：
- en: '![Collapsing the options panel for phone users](img/00221.jpeg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![为手机用户折叠选项面板](img/00221.jpeg)'
- en: Adding a search form to your designing
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将搜索表单添加到您的页面设计中
- en: In the preceding sections we've build a navigation structure. About fifty percent
    of your visitors will use this navigation, the other half will prefer to search
    your content. So a good ability to search the content and your products must always
    be represented on your pages.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们构建了一个导航结构。大约百分之五十的访客将使用此导航，另一半访客将更喜欢搜索您的内容。因此，在您的页面上始终要有良好的搜索内容和产品的能力。
- en: 'We can add a search form in the header of our page, which should look as follows:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在页面的页眉中添加一个搜索表单，其外观应如下所示：
- en: '![Adding a search form to your designing](img/00222.jpeg)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![将搜索表单添加到您的页面设计中](img/00222.jpeg)'
- en: 'Edit the following HTML code in the `html/includes/header.html` file:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `html/includes/header.html` 文件中的以下 HTML 代码：
- en: '[PRE57]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The following points explain what the preceding markup will do:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 以下要点解释了前面的标记将做什么：
- en: 'The form-inline and form-control classes are Bootstrap classes for inline forms.
    You can read more about Bootstrap''s inline forms at the following URL: [v4-alpha.getbootstrap.com/components/forms/#inline-forms](http://v4-alpha.getbootstrap.com/components/forms/#inline-forms).'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: form-inline 和 form-control 类是 Bootstrap 的内联表单类。您可以在以下网址了解更多关于 Bootstrap 内联表单的信息：[v4-alpha.getbootstrap.com/components/forms/#inline-forms](http://v4-alpha.getbootstrap.com/components/forms/#inline-forms)。
- en: The `pull-md-right` class will ensure that the form float on the right side
    of the header for
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pull-md-right` 类将确保表单在页眉的右侧浮动。'
- en: The `hidden-sm-down` class hides the search button on the small viewports; only
    the search input is visible in these viewports.
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden-sm-down` 类在小型视口中隐藏搜索按钮；在这些视口中仅可见搜索输入。'
- en: 'The preceding code overlaps the icons; you can fix this by setting a padding-top
    using the following SCSS code in the `scss/includes/_header.scss` Sass partial:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码重叠了图标；您可以通过在 `scss/includes/_header.scss` Sass 部分中使用以下 SCSS 代码设置 `padding-top`
    来修复此问题：
- en: '[PRE58]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The `media-breakpoint-up(md)` mixin call ensures that the padding is only added
    for medium and larger viewports.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`media-breakpoint-up(md)` 混合器调用确保仅对中等和更大的视口添加填充。'
- en: Using the Typeahead plugin
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Typeahead 插件
- en: 'Adding an autocomplete function to your search form may improve the usability
    of search function. The typeahead plugin from Bootstrap 2 can be used to build
    an autocomplete function. More information about this plugin can be found at the
    following URL: [https://github.com/bassjobsen/Bootstrap-3-Typeahead](https://github.com/bassjobsen/Bootstrap-3-Typeahead).
    The plugin is ready to use with Bootstrap 4.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的搜索表单中添加自动完成功能可能会提高搜索功能的可用性。可以从 Bootstrap 2 的 typeahead 插件中构建自动完成功能。更多关于此插件的信息可以在以下网址找到：[https://github.com/bassjobsen/Bootstrap-3-Typeahead](https://github.com/bassjobsen/Bootstrap-3-Typeahead)。该插件已准备好与
    Bootstrap 4 一起使用。
- en: 'The following steps describe how to integrate the Typeahead plugin in your
    project:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了如何在您的项目中集成 Typeahead 插件：
- en: 'First, add the plugin to your bower project dependencies to the bower.json
    file of your project, as follows:'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，将插件添加到您的 bower 项目依赖项中，如下所示：
- en: '[PRE59]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Then run the `bootstrap update` or `bower update` command in your console.
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后在您的控制台中运行 `bootstrap update` 或 `bower update` 命令。
- en: 'Then edit the `compile-js` task in Gruntfile.js to ensure that the plugin is
    included in your project:'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后编辑 `Gruntfile.js` 中的 `compile-js` 任务，以确保插件包含在您的项目中：
- en: '[PRE60]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Then initiate the plugin and attached it to the search form. Open the `js/main.js`
    and edit the following JavaScript code into it:'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后初始化插件并将其附加到搜索表单上。打开 `js/main.js` 并将以下 JavaScript 代码编辑到其中：
- en: '[PRE61]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'And lastly, set the CSS z-index value of the suggestions menu to prevent the
    navbar overlapping it. You can set the `scss/includes/_header.scss` partial by
    using the following SCSS code:'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，将建议菜单的 CSS z-index 值设置为防止导航栏与其重叠。您可以通过以下 SCSS 代码设置 `scss/includes/_header.scss`
    部分的内容：
- en: '[PRE62]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Now your search form with autocomplete is ready. Run the Bootstrap watch command
    and expect the result in your browser. Type the capital A in the search form and
    you will find that a drop-down list with suggestions appears:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的搜索表单已准备好带有自动完成功能。运行 Bootstrap watch 命令，并在浏览器中查看结果。在搜索表单中输入大写字母 A，您将发现出现一个带有建议的下拉列表：
- en: '![Using the Typeahead plugin](img/00223.jpeg)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Typeahead 插件](img/00223.jpeg)'
- en: Tip
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'The Bootstrap team dropped the typeahead plugin in version 3 in favor of using
    `typeahead.js`; see [https://github.com/twitter/typeahead.js](https://github.com/twitter/typeahead.js).
    To use `typeahead.js` with Bootstrap 4, some additional CSS code is required.
    The required CSS code, include the generation SCSS code, can be found at the following
    URL: [https://github.com/bassjobsen/typeahead.js-bootstrap4-css/](https://github.com/bassjobsen/typeahead.js-bootstrap4-css/).'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 团队在版本 3 中放弃了 typeahead 插件，转而使用 `typeahead.js`；请参阅 [https://github.com/twitter/typeahead.js](https://github.com/twitter/typeahead.js)。要使用
    `typeahead.js` 与 Bootstrap 4，需要一些额外的 CSS 代码。所需的 CSS 代码，包括生成的 SCSS 代码，可以在以下网址找到：[https://github.com/bassjobsen/typeahead.js-bootstrap4-css/](https://github.com/bassjobsen/typeahead.js-bootstrap4-css/).
- en: Congratulations! With the search form, we have accomplished our design.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！有了搜索表单，我们已经完成了我们的设计。
- en: Summary
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have employed Bootstrap styles to quickly set up breadcrumbs,
    a page title, and pagination customized according to our needs. Then we created
    a visually pleasing grid of product items, all of the same height so as to ensure
    a regular grid by using Bootstrap's mobile first and responsive grid styles.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了 Bootstrap 样式来快速设置面包屑、页面标题和根据我们的需求定制的分页。然后我们创建了一个视觉上令人愉悦的产品项网格，所有项的高度相同，以确保使用
    Bootstrap 的移动优先和响应式网格样式来创建规则的网格。
- en: We finished our design by adding a complex **Clearance Sale** button with a
    `$brand-feature` red background color and a list of filter options that are easily
    clickable. We also used Bootstrap column classes with responsive adjustments to
    arrange our options list items optimally for multiple viewport widths.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过添加一个具有 `$brand-feature` 红色背景色和易于点击的筛选选项列表的复杂 **清仓大甩卖** 按钮完成了我们的设计。我们还使用了
    Bootstrap 列类和响应式调整来优化我们的选项列表项，以适应多个视口宽度。
- en: At the end, we also added a search form with an autocomplete function.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还添加了一个具有自动完成功能的搜索表单。
- en: Congratulations! We now have an attractive business website with a well-crafted
    e-commerce section.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们现在拥有了一个具有精心制作的电子商务部分的吸引人的商业网站。
- en: Next, let's take our skills another step forward by rebuilding our project with
    Angular 2.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们通过用 Angular 2 重建我们的项目来将我们的技能提升到另一个层次。
- en: Assessments
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Which of the following snippet will set `max-width` for cards?
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个代码片段将设置卡片的最大宽度？
- en: '`$include media-breakpoint-up(md) {.card-deck .card {width: 46%;}}`'
  id: totrans-359
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$include media-breakpoint-up(md) {.card-deck .card {width: 46%;}}`'
- en: '`@include media-breakpoint-up(sm) {.card-deck .card {max-width: 46%;}}`'
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@include media-breakpoint-up(sm) {.card-deck .card {max-width: 46%;}}`'
- en: Both i & iib
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两者i和iib
- en: None of the above
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上皆非
- en: What does the following snippet do?![Assessments](img/00224.jpeg)
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段的作用是什么？![评估](img/00224.jpeg)
- en: Adds Bootstrap Card styles to our sidebar
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的侧边栏添加Bootstrap卡片样式
- en: Adds top and bottom padding to the sidebar so that our new background extends
    past the sidebar content
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为侧边栏添加顶部和底部填充，以便我们的新背景延伸到侧边栏内容之外
- en: Adjusts font size, line-height, and color for the h2 heading
  id: totrans-366
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整h2标题的字体大小、行高和颜色
- en: All of the above
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有上述选项
- en: What is the purpose of setting the CSS `z-index` value of the suggestions menu?
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置CSS `z-index`值的目的何在？
- en: To prevent the navbar overlapping the menu
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 防止导航栏覆盖菜单
- en: To add plugin to your bower project dependencies
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将插件添加到您的bower项目依赖项中
- en: To edit the `compile-js` task in `Gruntfile.js` to ensure that the plugin is
    included in your project
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了编辑`Gruntfile.js`中的`compile-js`任务，以确保插件包含在您的项目中
- en: All of the above
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有上述选项
- en: What is the advantage of adding an autocomplete function to your search form?
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的搜索表单中添加自动完成功能的优势是什么？
- en: To read more about Bootstrap's inline forms
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取更多关于Bootstrap内联表单的信息
- en: To acquire more information about this plugin
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取更多关于此插件的信息
- en: To improve the usability of search function
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了提高搜索功能的可用性
- en: None of the above
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上皆非
- en: Which of the following is the use of the `clearfix` class?
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个是`clearfix`类的用途？
- en: It ensures that the heading will contain the `toggle button`, which will float
    to the right due to the `pull-right` class
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它确保标题将包含`切换按钮`，由于`pull-right`类，该按钮将浮动到右侧
- en: It allows users of phones to find the products more quickly while still allowing
    them to access the filtering options when desired.
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它允许手机用户更快地找到产品，同时仍然允许他们在需要时访问过滤选项。
- en: It uses Sass, to nest a media query within the appropriate selector and adds
    an adjusted `make-col(4)` mixin
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它使用Sass，在适当的选择器内嵌套媒体查询，并添加了一个调整后的`make-col(4)`混入
- en: All of the above
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有上述选项
