- en: Chapter 9.  Building a Frontend Process with Node.js and NPM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。使用Node.js和NPM构建前端流程
- en: As we mentioned before in previous chapters, we can use the facilities from
    Node Package Manager (NPM) to replace Gulp and the **Grunt** task manager, which
    are the most popular tools for dealing with frontend dependencies. We can combine
    both tools, but in this chapter we will explore only NPM and some commands that
    will help us create our application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在之前的章节中提到的，我们可以使用Node Package Manager（NPM）的工具来替换Gulp和**Grunt**任务管理器，这是处理前端依赖关系的最流行的工具。我们可以结合使用这两种工具，但在本章中我们将只探索NPM和一些命令，这些命令将帮助我们创建我们的应用程序。
- en: We will create building tasks to lint, concatenate, and minify Javascript files,
    optimize images, compile SASS stylesheets, and deploy the application to a server
    in the cloud, by just using the command line. Furthermore, for this example we
    will use the Loopback.io framework to create the application example with MongoDB
    as the database.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建构建任务来lint、连接和压缩Javascript文件，优化图像，编译SASS样式表，并通过命令行将应用程序部署到云端服务器。此外，对于这个示例，我们将使用Loopback.io框架来创建具有MongoDB作为数据库的应用程序示例。
- en: 'In this chapter, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: How to create an application using only the Loopback.io CLI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何仅使用Loopback.io CLI创建应用程序
- en: How to install eslint, imagemin, and browserify
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装eslint、imagemin和browserify
- en: How to create tasks to lint errors, concatenate JS files, and optimize images
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建任务来lint错误、连接JS文件和优化图像
- en: How to deal with SASS import and compile
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何处理SASS导入和编译
- en: How to deploy an application to Heroku using the Heroku toolbelt
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Heroku工具包将应用程序部署到Heroku
- en: What we are building
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们正在构建什么
- en: 'For this chapter, we will build a simple gallery application, very similar
    to [chapter 04](ch04.html "Chapter 4. Dont Take a Photograph, Make It – An App
    for Photographers"), *Don''t Take a Photograph, Make It – An App for Photographers,*
    but this time we will using a Restful API with the Loopback.io framework. We''ll
    see how to create building tasks using the NPM command line, and the final result
    will be very similar to the following screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个简单的画廊应用程序，与[第04章](ch04.html "第4章。不要拍照，创造它-摄影师的应用程序")非常相似，但这次我们将使用Loopback.io框架的Restful
    API。我们将看到如何使用NPM命令行创建构建任务，最终结果将与以下截图非常相似：
- en: '![What we are building](img/image_09_001.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![我们正在构建什么](img/image_09_001.jpg)'
- en: Home screen
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 主屏幕
- en: Creating the baseline application
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基线应用程序
- en: 'Although we already used the Loopback framework, we strongly recommend that
    you install it again, to ensure that you will have the most up-to-date version
    on your machine:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经使用了Loopback框架，我们强烈建议您再次安装它，以确保您的机器上有最新版本：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this example, we will not make many changes to the generated code, since
    our focus is to create building tasks, but we will use some interesting features
    of the Loopback framework using the command line:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们不会对生成的代码进行太多更改，因为我们的重点是创建构建任务，但我们将使用Loopback框架的一些有趣特性，使用命令行：
- en: 'Open terminal/shell, and type the following command:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/ shell，并输入以下命令：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Name the application chapter-09.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序命名为chapter-09。
- en: Choose empty-server (an empty LoopBack API, without any configured models or
    data source's) and press Enter.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择empty-server（一个没有配置模型或数据源的空LoopBack API），然后按Enter。
- en: Now we have created the application scaffold. Don't worry about the next commands
    suggested by the terminal output, as we will discuss these commands later in the
    book.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了应用程序脚手架。不用担心终端输出建议的下一个命令，因为我们将在本书的后面讨论这些命令。
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can read more about **Loopback CLI** at this link: [https://docs.strongloop.com/display/public/LB/Command-line+reference](https://docs.strongloop.com/display/public/LB/Command-line+reference).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此链接阅读有关**Loopback CLI**的更多信息：[https://docs.strongloop.com/display/public/LB/Command-line+reference](https://docs.strongloop.com/display/public/LB/Command-line+reference)。
- en: Adding a Datasource to the project
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向项目添加数据源
- en: Before we create our models as we did in [Chapter 06](ch06.html "Chapter 6. 
    Building a Customer Feedback App with a Restful API and Loopback.io"), *Building
    a Customer Feedback App with Restful API and Loopback.io,* this time, we will
    add the datasource first. This is because we are using the command line to create
    the entire project. This means that we don't edit any files manually.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们像在[第06章](ch06.html "第6章。使用Restful API和Loopback.io构建客户反馈应用程序")中所做的那样创建模型之前，这次我们将首先添加数据源。这是因为我们使用命令行来创建整个项目。这意味着我们不手动编辑任何文件。
- en: 'A good practice, when we use the command line, is to create the datasource
    first instead of the application models. This procedure prevents the need to manually
    edit the files to connect models with the datasource application:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用命令行时，一个好的做法是先创建数据源，而不是应用程序模型。这个过程可以防止需要手动编辑文件来连接模型和数据源应用程序：
- en: 'In  terminal/shell, go to the chapter-09 folder and type the following command:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端/ shell中，转到chapter-09文件夹，并输入以下命令：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Fill in the following questions as shown in the following screenshot:![Adding
    a Datasource to the project](img/image_09_002.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下截图中显示的问题进行填写：![向项目添加数据源](img/image_09_002.jpg)
- en: Datasource setup
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源设置
- en: By default, we don't need to set up a user and password if we are working with
    MongoDB on localhost. Don't worry about this now, but later we will see how to
    change this configuration to deploy the application. If you want, you can add
    a user and password in your local environment too.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果我们在本地使用MongoDB，就不需要设置用户名和密码。现在不用担心这个问题，但以后我们会看到如何更改配置以部署应用程序。如果你愿意，你也可以在本地环境中添加用户名和密码。
- en: Creating application models
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建应用程序模型
- en: 'Now let''s create the application models; for this example, we are using two
    models:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建应用程序模型；对于这个示例，我们使用了两个模型：
- en: 'Open the terminal/shell inside the chapter-09 folder, and type the following
    command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在chapter-09文件夹中打开终端/ shell，并输入以下命令：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Use the model name gallery.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模型名称gallery。
- en: Fill in the questions as shown in the following screenshot:![Creating application
    models](img/image_09_003.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下截图中显示的问题填写：![创建应用程序模型](img/image_09_003.jpg)
- en: Gallery model setup
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 画廊模型设置
- en: After the second property, **press **Enter**** to finish model creation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个属性之后，**按**Enter**完成模型创建。
- en: 'Open the terminal/shell inside the chapter-09 folder, and type the following
    command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在chapter-09文件夹中打开终端/Shell，并输入以下命令：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Use the model name bike.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模型名称自行车。
- en: Fill in the questions as shown in the following screenshot:![Creating application
    models](img/image_09_004.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下截图中显示的问题填写：![创建应用程序模型](img/image_09_004.jpg)
- en: Bike model setup
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 自行车模型设置
- en: After the third property, **press **Enter**** to finish model creation.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三个属性之后，**按**Enter**完成模型创建。
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can read more about model creation at this link: [https://docs.strongloop.com/display/public/LB/Model+generator](https://docs.strongloop.com/display/public/LB/Model+generator).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此链接找到有关模型创建的更多信息：[https://docs.strongloop.com/display/public/LB/Model+generator](https://docs.strongloop.com/display/public/LB/Model+generator)。
- en: Don't worry about the relationships between the models at this time, we will
    see this in the next step, using only the command line.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不要担心模型之间的关系，我们将在下一步中看到，只使用命令行。
- en: Adding relationships between application models
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在应用程序模型之间添加关系
- en: 'Let''s define the relationship between our models; we will use two types of
    relationship, which are:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义模型之间的关系；我们将使用两种类型的关系，即：
- en: '**hasmany**: A gallery can have many bikes'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**hasmany**：一个画廊可以有很多辆自行车'
- en: '**belongsTo**: A bike can have one gallery'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**belongsTo**：一辆自行车可以有一个画廊'
- en: 'Remember, we are just trying to make something useful, but not complex, to
    illustrate the building process with NPM, follow these steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们只是试图做一些有用的事情，而不是复杂的事情，以说明使用NPM的构建过程，请按照以下步骤进行：
- en: 'Open the terminal/shell inside the chapter-09 folder and type the following
    command:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在chapter-09文件夹中打开终端/Shell，并输入以下命令：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Choose the bike model and fill in the questions as shown:![Adding relationships
    between application models](img/image_09_005.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择自行车模型，并按照以下问题填写：![在应用程序模型之间添加关系](img/image_09_005.jpg)
- en: Bike model relationship
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 自行车模型关系
- en: Choose the gallery model and fill in the questions with the following information:![Adding
    relationships between application models](img/image_09_006.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择画廊模型，并使用以下信息填写问题：![在应用程序模型之间添加关系](img/image_09_006.jpg)
- en: Gallery model relationship
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 画廊模型关系
- en: So let's check whether everything has been written properly.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们检查一下是否一切都写得正确。
- en: 'Open the common/models/gallery.json file and you will see the following highlighted
    code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开common/models/gallery.json文件，您将看到以下突出显示的代码：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Open the common/models/bike.json file and you will see the following highlighted
    code:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开common/models/bike.json文件，您将看到以下突出显示的代码：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can find more information about **Relation generator** at this link: [https://docs.strongloop.com/display/public/LB/Relation+generator](https://docs.strongloop.com/display/public/LB/Relation+generator).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此链接找到有关**关系生成器**的更多信息：[https://docs.strongloop.com/display/public/LB/Relation+generator](https://docs.strongloop.com/display/public/LB/Relation+generator)。
- en: Using only three commands, we managed to create the basis for our sample application.
    The next step is to create a static website in the client's folder.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 只使用三个命令，我们就成功创建了示例应用程序的基础。下一步是在client文件夹中创建一个静态网站。
- en: Setting up a static site
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置静态站点
- en: 'As we did in [chapter 06](ch06.html "Chapter 6.  Building a Customer Feedback
    App with a Restful API and Loopback.io"), *Building a Customer Feedback App with
    Restful API and Loopback.io* let''s set up the client folder as a static site:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在[第06章](ch06.html "第6章。使用Restful API和Loopback.io构建客户反馈应用程序")中所做的那样，*使用Restful
    API和Loopback.io构建客户反馈应用程序*，让我们将client文件夹设置为静态站点：
- en: Rename the server/boot/root.js file to server/boot/_root.js.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将server/boot/root.js文件重命名为server/boot/_root.js。
- en: 'Add the following highlighted lines to server/middleware.json:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下突出显示的行添加到server/middleware.json中：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Inside the ./client folder, create a new file called index.html and add the
    following content:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在./client文件夹中，创建一个名为index.html的新文件，并添加以下内容：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now it is time to check the previous changes and see the final result in your
    browser.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候检查之前的更改，并在浏览器中查看最终结果了。
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/Shell并输入以下命令：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Open your favorite browser and go to http://localhost:3000/.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您喜欢的浏览器，转到http://localhost:3000/。
- en: You should see the **Hello Node 6 Blueprints!** message.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到**Hello Node 6 Blueprints!**消息。
- en: We also have the Restful API at http://localhost:3000/api/bikes and http://localhost:3000/api/galleries.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在http://localhost:3000/api/bikes和http://localhost:3000/api/galleries上有Restful
    API。
- en: Now we will see how to restructure some of the directories to prepare the application
    for deployment in the cloud using the NPM building tasks.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到如何重组一些目录，以准备使用NPM构建任务在云中部署应用程序。
- en: Refactoring the application folder
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构应用程序文件夹
- en: Our refactoring process includes two steps.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的重构过程包括两个步骤。
- en: First, let's create a directory for the application source files, such as JavaScript,
    SCSS, and images files.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们为应用程序源文件创建一个目录，例如JavaScript、SCSS和图像文件。
- en: In the second step, we will create some directories within the client folder
    to receive our scripts.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二步中，我们将在client文件夹中创建一些目录来接收我们的脚本。
- en: Let's create the source folder for images, libs, scripts, and scss files.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为图像、库、脚本和SCSS文件创建源文件夹。
- en: Creating the images folder
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建图像文件夹
- en: In this folder, we will store the images before processing an optimization technique
    using imagemin-cli.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件夹中，我们将在使用imagemin-cli进行优化技术处理之前存储图像。
- en: Inside the root project, create a folder called src.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根项目内，创建一个名为src的文件夹。
- en: Within the src folder, create a folder called images.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在src文件夹中，创建一个名为images的文件夹。
- en: Within the images folder, create a folder called gallery.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图像文件夹中，创建一个名为gallery的文件夹。
- en: Download the sample images file for [chapter 09](ch09.html "Chapter 9.  Building
    a Frontend Process with Node.js and NPM"), *Building a Frontend Process with Node.js
    and NPM* from the Packt website ([www.packtpub.com](http://www.packtpub.com))
    or from the official book repository on GitHub, and paste the images into the
    gallery folder.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Packt网站([www.packtpub.com](http://www.packtpub.com))或GitHub上的官方书籍存储库下载[第09章](ch09.html
    "第9章。使用Node.js和NPM构建前端流程")的示例图像文件，然后将图像粘贴到gallery文件夹中。
- en: Tip
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can read more about imagemin cli at this link: [https://github.com/imagemin/imagemin-cli](https://github.com/imagemin/imagemin-cli).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此链接了解更多有关imagemin cli的信息：[https://github.com/imagemin/imagemin-cli](https://github.com/imagemin/imagemin-cli)。
- en: Creating the libraries folder
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建libraries文件夹
- en: The libraries folder will store some jQuery plugins. Inside the src folder,
    create a folder called libs.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: libraries文件夹将存储一些jQuery插件。在src文件夹内，创建一个名为libs的文件夹。
- en: Creating the scripts folder
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建scripts文件夹
- en: 'As we are using jQuery and some plugins, we will need to write some code to
    use the jQuery libs; we will do that using this folder:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了jQuery和一些插件，我们需要编写一些代码来使用jQuery库；我们将使用这个文件夹来做到这一点：
- en: Inside the src folder, create a folder called scripts.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在src文件夹内，创建一个名为scripts的文件夹。
- en: 'Inside src/scripts folder, create a file called gallery.js and add the following
    code:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在src/scripts文件夹内，创建一个名为gallery.js的文件，并添加以下代码：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this example, we are using only a single plugin, but in large applications,
    it is very common to use several plugins; in this case, we would have a file for
    each feature.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们只使用了一个插件，但在大型应用程序中，使用多个插件是非常常见的；在这种情况下，我们会为每个功能有一个文件。
- en: Then, targeting a performance improvement in our application, we recommend concatenating
    all the scripts into a single file.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了提高应用程序的性能，我们建议将所有脚本合并成一个文件。
- en: Creating the SASS folder
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建SASS文件夹
- en: 'The SASS folder will store the scss files. We are using the Bootstrap framework,
    and for this example we will set up the Bootstrap framework using the SASS separated
    version; don''t worry about this now, as later in the chapter we will see how
    to get these files:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: SASS文件夹将存储scss文件。我们正在使用Bootstrap框架，对于这个例子，我们将使用SASS分离版本来设置Bootstrap框架；现在不用担心这个，因为在本章后面我们会看到如何获取这些文件：
- en: Inside the src folder, create a folder called scss.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在src文件夹内，创建一个名为scss的文件夹。
- en: Inside the scss folder, create a folder called vendor.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在scss文件夹内，创建一个名为vendor的文件夹。
- en: Installing Bower
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Bower
- en: 'As we have seen in previous chapters, we will use Bower to manage frontend
    dependencies:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在之前的章节中看到的，我们将使用Bower来管理前端依赖关系：
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/Shell并输入以下命令：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Create a file called .bowerrc and save it in the root folder.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为.bowerrc的文件并将其保存在根文件夹中。
- en: 'Add the following content to the .bowerrc file:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到.bowerrc文件中：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Open terminal/shell and type the following command:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/Shell并输入以下命令：
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Fill in the questions as shown in the following screenshot:![Installing Bower](img/image_09_007.jpg)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下截图中显示的问题填写：![安装Bower](img/image_09_007.jpg)
- en: Bower.json setup
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Bower.json
- en: Installing application dependencies
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装应用程序依赖关系
- en: 'In this example, we are using just one jQuery plugin plus the Bootstrap framework,
    so let''s first install Bootstrap using the Bower CLI:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们只使用了一个jQuery插件加上Bootstrap框架，所以让我们首先使用Bower CLI来安装Bootstrap：
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/Shell并输入以下命令：
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Just open the src/components folder to check the Bootstrap and jQuery folders.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 只需打开src/components文件夹查看Bootstrap和jQuery文件夹。
- en: 'Now we will install the jQuery fancybox plugin in the images gallery. Open
    the terminal/shell and type the following command:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将在图像库中安装jQuery fancybox插件。打开终端/Shell并输入以下命令：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'So the src folder will have the following structure at this point:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，此时src文件夹将具有以下结构：
- en: components/
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: components/
- en: bootstrap/
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: bootstrap/
- en: fancybox/
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: fancybox/
- en: jquery/
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jquery/
- en: Create the scss folder structure
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建scss文件夹结构
- en: 'Now let''s set up the scss folder to compile the bootstrap.scss files:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们设置scss文件夹来编译bootstrap.scss文件：
- en: Open src/components/bootstrap folder and copy all the contents from SCSS folder.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开src/components/bootstrap文件夹并复制SCSS文件夹中的所有内容。
- en: Paste the content inside the src/scss/vendor folder.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将内容粘贴到src/scss/vendor文件夹内。
- en: 'Create a file called main.scss inside the src/ folder and add the following
    content:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在src/文件夹内创建一个名为main.scss的文件，并添加以下内容：
- en: '[PRE17]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Many developers do not use the Bootstrap framework this way, some just use the
    bootstrap.css or bootstrap.min.css files in their projects. This is ok, but when
    we use the framework the way shown here, we can use all the framework's resources
    in our own stylesheet, so we can use all mixins and variables within our stylesheet.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员不会以这种方式使用Bootstrap框架，有些人只会在项目中使用bootstrap.css或bootstrap.min.css文件。这没问题，但是当我们以这种方式使用框架时，我们可以在我们自己的样式表中使用所有框架的资源，因此我们可以在我们的样式表中使用所有的mixin和变量。
- en: 'For example, the highlighted code came from Bootstrap mixins and we can apply
    it to our own stylesheet:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，突出显示的代码来自Bootstrap mixins，我们可以将其应用到我们自己的样式表中：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can read more about SASS at this link: [http://sass-lang.com/](http://sass-lang.com/).'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此链接了解更多有关SASS的信息：[http://sass-lang.com/](http://sass-lang.com/)。
- en: Refactoring the client folder
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构客户端文件夹
- en: The client folder will have a pretty basic structure for any web application
    with folders to store CSS, JavaScript, and images files.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端文件夹将具有一个非常基本的结构，用于存储CSS、JavaScript和图像文件。
- en: 'For this example, we will use the latest stable version of AngularJS to create
    the pages of our application:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用最新的稳定版本的AngularJS来创建我们应用程序的页面：
- en: 'Inside the client folder, create the following folders:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端文件夹内，创建以下文件夹：
- en: css/
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: css/
- en: images/gallery/
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: images/gallery/
- en: js/
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: js/
- en: js/libs/
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: js/libs/
- en: js/scripts/
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: js/scripts/
- en: views/
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: views/
- en: 'After creating all these folders, the client directory will look like the following
    screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 创建所有这些文件夹后，客户端目录将如下截图所示：
- en: '![Refactoring the client folder](img/image_09_008.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![重构客户端文件夹](img/image_09_008.jpg)'
- en: Client folder structure
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端文件夹结构
- en: Adding the application views
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加应用程序视图
- en: 'Now is time to create the application views folder to store all the application
    templates:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建应用程序视图文件夹来存储所有应用程序模板了：
- en: 'Inside the client/src folder, create a new file called home.html and add the
    following code:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 client/src 文件夹中，创建一个名为 home.html 的新文件，并添加以下代码：
- en: '[PRE19]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Inside the client/src folder, create a new file called galleries.html and add
    the following code:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 client/src 文件夹中，创建一个名为 galleries.html 的新文件，并添加以下代码：
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open the client/index.html file and replace the code with the following content:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 client/index.html 文件，并用以下内容替换代码：
- en: '[PRE21]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Installing AngularJS files
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 AngularJS 文件
- en: 'Now it is time to install the AngularJS files and create the application. In
    this example, we will explore the AngularJS SDK from the Loopback framework later
    in this section; for this we choose to use AngularJS to build our frontend application:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候安装 AngularJS 文件并创建应用程序了。在本示例中，我们将在本节后面探索 Loopback 框架的 AngularJS SDK；为此，我们选择使用
    AngularJS 来构建我们的前端应用程序：
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/Shell 并输入以下命令：
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/Shell 并输入以下命令：
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/Shell 并输入以下命令：
- en: '[PRE24]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Tip
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can read more about AngularJS at this link: [https://docs.angularjs.org/api](https://docs.angularjs.org/api).'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此链接了解更多关于 AngularJS 的信息：[https://docs.angularjs.org/api](https://docs.angularjs.org/api)。
- en: Creating the AngularJS application
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 AngularJS 应用程序
- en: 'Finally we will create the AngularJS application, so follow the next steps:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将创建 AngularJS 应用程序，所以请按照以下步骤进行：
- en: 'Inside the client/js folder, create a new file called app.js and add the following
    code:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 client/js 文件夹中，创建一个名为 app.js 的新文件，并添加以下代码：
- en: '[PRE25]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Don't worry about the lbServices dependency at this point; later in this chapter
    we will see how to create this file using the AngularJS SDK tool built with the
    Loopback framework.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不用担心 lbServices 依赖项；在本章后面，我们将看到如何使用 Loopback 框架构建的 AngularJS SDK 工具来创建此文件。
- en: 'Inside the client/js folder, create a new file called app.config.js and add
    the following code:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 client/js 文件夹中，创建一个名为 app.config.js 的新文件，并添加以下代码：
- en: '[PRE26]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Inside the client/js folder, create a new file called app.routes.js and add
    the following code:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 client/js 文件夹中，创建一个名为 app.routes.js 的新文件，并添加以下代码：
- en: '[PRE27]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Inside the client/js folder, create a new file called controllers.js and add
    the following code:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 client/js 文件夹中，创建一个名为 controllers.js 的新文件，并添加以下代码：
- en: '[PRE28]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Using Loopback's AngularJS SDK
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Loopback 的 AngularJS SDK
- en: 'We will use the built-in AngularJS SDK from the Loopback framework to automatically
    generate all application services:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Loopback 框架的内置 AngularJS SDK 自动生成所有应用程序服务：
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/Shell 并输入以下命令：
- en: '[PRE29]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The previous command will create a file called services.js inside the client/js
    folder with all the methods (Create, Read, Update, and Delete) and many more available
    in the Restful API created by the Loopback framework.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在 client/js 文件夹中创建一个名为 services.js 的文件，其中包含 Loopback 框架创建的 Restful API
    中的所有方法（创建、读取、更新和删除）以及其他许多方法。
- en: Tip
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can check your local API by running the npm start command in your terminal/shell
    at the root project folder. The API will be available at http://0.0.0.0:3000/explorer.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在终端/Shell 中在根项目文件夹中运行 npm start 命令来检查本地 API。API 将在 http://0.0.0.0:3000/explorer
    上可用。
- en: 'The lbServices section has the following CRUD methods and many others:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: lbServices 部分有以下 CRUD 方法和许多其他方法：
- en: '[PRE30]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To use one of these methods, we just need to inject the factory into the Angular
    controller as the following highlighted code:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用其中一种方法，我们只需要将工厂注入到 Angular 控制器中，如下面突出显示的代码所示：
- en: '[PRE31]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then we can use the methods inside the controllers, as in the following example:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以在控制器中使用这些方法，就像以下示例中所示的那样：
- en: '[PRE32]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This is a simple and very useful service to deal with all endpoints created
    in our application for all the models that we have.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单而非常有用的服务，用于处理我们应用程序中创建的所有模型的所有端点。
- en: The first part of the application is already almost complete, but we still need
    to add some content to make it more pleasant.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的第一部分已经几乎完成，但我们仍需要添加一些内容，使其更加愉快。
- en: Let's create some content. As already mentioned earlier, you can download the
    entire sample code for the book from the Packt website ([www.packtpub.com](http://www.packtpub.com)),
    or directly from the book's GitHub repository.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一些内容。如前所述，您可以从 Packt 网站 ([www.packtpub.com](http://www.packtpub.com)) 或直接从书的
    GitHub 存储库下载整个示例代码。
- en: Adding content to the application
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向应用程序添加内容
- en: You can add content in two ways, the first is using the endpoints created by
    the application and the second is by using the migration file.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过两种方式添加内容，第一种是使用应用程序创建的端点，第二种是使用迁移文件。
- en: 'In the following lines, we will show how to use the second option; it may be
    a brief and interesting procedure for creating a migration file:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几行中，我们将展示如何使用第二种选项；这可能是一个简短而有趣的过程，用于创建迁移文件：
- en: 'Inside the server/boot/ folder, create a file called create-sample-models.js
    and add the following content to create a migration file for **Gallery Model**:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 server/boot/ 文件夹中，创建一个名为 create-sample-models.js 的文件，并添加以下内容以创建一个 **Gallery
    Model** 的迁移文件：
- en: '[PRE33]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Inside the server/boot/ folder, add the following content to create a migration
    file for **Bike Model**:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 server/boot/ 文件夹中，添加以下内容以创建一个 **Bike Model** 的迁移文件：
- en: '[PRE34]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Tip
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Don't forget to delete this file after the first deployment to **Heroku**.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在第一次部署到 **Heroku** 后删除此文件。
- en: Creating the Building tasks
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建构建任务
- en: Now is the time to create our task using only NPM.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候只使用 NPM 来创建我们的任务了。
- en: Before we begin, it is important to keep in mind that NPM has two special commands
    that are invoked directly, start and test. So we will use the run command to run
    all the other tasks we create.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，重要的是要记住 NPM 有两个特殊的命令，可以直接调用，即 start 和 test。因此，我们将使用 run 命令来运行我们创建的所有其他任务。
- en: 'Our goals in this section are to:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本节的目标是：
- en: Copy some files from the source directory to the client directory
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从源目录复制一些文件到客户端目录
- en: Verify errors in JavaScript files
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证JavaScript文件中的错误
- en: Compile SASS files from src/scss and save them in the client/css folder
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从src/scss编译SASS文件并将其保存在client/css文件夹中
- en: Optimize images from src/images/gallery to client/images/gallery
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化从src/images/gallery到client/images/gallery的图像
- en: Concatenate JavaScript files from src/scripts to client/js/scripts
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将JavaScript文件从src/scripts连接到client/js/scripts
- en: Installing the dependencies
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: 'To accomplish these tasks, we need to install some Command Line Interface (CLI)
    tools:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这些任务，我们需要安装一些命令行界面（CLI）工具：
- en: 'Open the terminal/shell and type the following commands:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/Shell并输入以下命令：
- en: '[PRE35]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Our purpose in this example is to show how to use the building tools, so we
    will not go too deep into each of them.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们的目的是展示如何使用构建工具，因此我们不会深入研究每个工具。
- en: But before we go any further, let's set up the JavaScript validator eslint.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们继续之前，让我们设置JavaScript验证器eslint。
- en: Tip
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can read more about eslint at this link: [http://eslint.org/](http://eslint.org/).'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此链接阅读有关eslint的更多信息：[http://eslint.org/](http://eslint.org/)。
- en: 'Inside the root project, create a file called .eslintrc.json and add the following
    code:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根项目内，创建一个名为.eslintrc.json的文件并添加以下代码：
- en: '[PRE36]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Tip
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can read more about Eslint rules at : [http://eslint.org/docs/rules/](http://eslint.org/docs/rules/).'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此链接阅读有关Eslint规则的更多信息：[http://eslint.org/docs/rules/](http://eslint.org/docs/rules/)。
- en: Creating the copy task
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建复制任务
- en: We will create each task before inserting it into our package.json file; this
    way it is easier to understand the procedure of each.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在将其插入到我们的package.json文件之前创建每个任务；这样更容易理解每个过程。
- en: 'The copy tasks will be the following:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 复制任务将如下所示：
- en: Copy the jQuery file
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制jQuery文件
- en: Copy the AngularJS main library
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制AngularJS主库
- en: Copy the AngularJS resources library
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制AngularJS资源库
- en: Copy the AngularJS ui-router library
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制AngularJS ui-router库
- en: 'So we need to copy these files (jQuery and AngularJS) from the source folder
    to the client folder:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要将这些文件（jQuery和AngularJS）从源文件夹复制到客户端文件夹：
- en: '[PRE37]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The last copy task will execute all the other copy tasks:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的复制任务将执行所有其他复制任务：
- en: '[PRE38]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Don't worry about running the copy tasks at the moment; later in the chapter
    we will execute them one by one before deployment.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 目前不用担心运行复制任务；在本章后面，我们将在部署之前逐个执行它们。
- en: Creating the SASS task
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建SASS任务
- en: 'The SASS task will be very simple, we will just compile the scss files and
    insert them into the client/css folder:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: SASS任务将非常简单，我们只需编译scss文件并将它们插入到client/css文件夹中：
- en: '[PRE39]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Creating the linting task
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建linting任务
- en: 'We will use the .eslintrc.json configuration to apply to all JavaScript files
    in the client/js folder:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用.eslintrc.json配置应用于client/js文件夹中的所有JavaScript文件：
- en: '[PRE40]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Creating the image optimization task
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建图像优化任务
- en: 'Another important task in any web application is to optimize all the image
    files, for performance reasons:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何Web应用程序中，另一个重要的任务是优化所有图像文件，出于性能原因：
- en: '[PRE41]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Creating the concatenate task
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建连接任务
- en: 'The concat task will concatenate all scripts files from libs and scripts:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: concat任务将连接libs和scripts中的所有脚本文件：
- en: '[PRE42]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The last concat task executes all the other concat tasks:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的concat任务执行所有其他concat任务：
- en: '[PRE43]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Creating the build task
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建构建任务
- en: 'The build task is just the execution of each of the previous steps in a single
    task:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 构建任务只是在单个任务中执行之前的每个步骤：
- en: '[PRE44]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now let''s add all the tasks to the package.json file. Open the package.json
    file and add the following highlighted code:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将所有任务添加到package.json文件中。打开package.json文件并添加以下突出显示的代码：
- en: '[PRE45]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Using tasks with individual commands
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用单独命令的任务
- en: As we mentioned before, we can perform each of the tasks that we have created
    individually.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，我们可以单独执行我们创建的每个任务。
- en: 'For example, to optimize the image files, we can run the imagemin task only.
    Just open the terminal/shell and type the following command:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要优化图像文件，我们只需运行imagemin任务。只需打开终端/Shell并输入以下命令：
- en: '[PRE46]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The output on the terminal will be the following:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 终端上的输出将如下所示：
- en: '[PRE47]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: We can do the same for each task.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为每个任务执行相同的操作。
- en: Deploying to Heroku Cloud
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到Heroku云
- en: 'The first step to deploy our application is to create a free account on **Heroku
    Cloud Service**:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 部署我们的应用程序的第一步是在**Heroku云服务**上创建一个免费帐户：
- en: Go to [https://signup.heroku.com/](https://signup.heroku.com/) and create a
    free account.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://signup.heroku.com/](https://signup.heroku.com/)并创建一个免费帐户。
- en: Download the **Heroku toolbelt** for your platform at [https://toolbelt.heroku.com/](https://toolbelt.heroku.com/).
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://toolbelt.heroku.com/](https://toolbelt.heroku.com/)上为您的平台下载**Heroku工具包**。
- en: Follow the installation process for your platform.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照您的平台进行安装过程。
- en: Now you must have the Heroku toolbelt on your machine, to test it.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您必须在您的机器上安装Heroku工具包，以进行测试。
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/Shell并输入以下命令：
- en: '[PRE48]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The terminal output lists all the possible things to do with **Heroku CLI**.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 终端输出列出了使用**Heroku CLI**的所有可能操作。
- en: Tip
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The book assumes that you already have git source control installed on your
    machine; if you don''t it have yet, check out this page: [https://git-scm.com/downloads](https://git-scm.com/downloads).'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假设您的机器上已经安装了git源代码控制；如果您还没有安装，请查看此页面：[https://git-scm.com/downloads](https://git-scm.com/downloads)。
- en: Creating a Heroku application
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Heroku应用程序
- en: 'Now we will create an application and send it to your newly created Heroku
    account:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个应用程序并将其发送到您新创建的Heroku帐户：
- en: Create a file called .Procfile and save it at the root project folder.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为.Procfile的文件并将其保存在根项目文件夹中。
- en: 'Paste the following code into the .Procfile file:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码粘贴到.Procfile文件中：
- en: '[PRE49]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/Shell并输入以下命令：
- en: '[PRE50]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The previous command initializes a git repository.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令初始化了一个git存储库。
- en: 'The git add command adds all files to version tracking:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: git add命令将所有文件添加到版本跟踪：
- en: '[PRE51]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The git commit command send all files to version control on your local machine.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: git commit命令将所有文件发送到本地机器上的版本控制。
- en: '[PRE52]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Now it is time to log in to your Heroku account and send all the project files
    to Heroku git source control.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候登录您的Heroku帐户并将所有项目文件发送到Heroku git源代码控制。
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/ shell并输入以下命令：
- en: '[PRE53]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Enter your username and password.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的用户名和密码。
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/ shell并输入以下命令：
- en: '[PRE54]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The previous command will use strongloop-buildpacks to configure and deploy
    a Loopback application.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令将使用strongloop-buildpacks来配置和部署Loopback应用程序。
- en: Creating a deploy.sh file
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个deploy.sh文件
- en: 'Finally, we will create our deploy task using a .sh file:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用.sh文件创建我们的部署任务：
- en: Create a folder called bin in the root folder.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根文件夹中创建一个名为bin的文件夹。
- en: Inside the bin folder, create a file called deploy.sh.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在bin文件夹内，创建一个名为deploy.sh的文件。
- en: 'Add the following code to the bin/deploy.sh file:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到bin/deploy.sh文件的末尾：
- en: '[PRE55]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Add the following lines of code at the end of all tasks in the package.json
    file:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在package.json文件的所有任务的末尾添加以下代码行：
- en: '[PRE56]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Now, every time you make a commit with some changes and type the npm run deploy
    command, the engine will start the deploy.sh file and upload all the committed
    changes to Heroku Cloud Service.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当您进行一次提交并输入npm run deploy命令进行一次更改时，引擎将启动deploy.sh文件并将所有已提交的更改上传到Heroku云服务。
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/ shell并输入以下命令：
- en: '[PRE57]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'If you are facing errors with permissions, do the following. Open the terminal/shell
    inside the bin folder and type the following command:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您遇到权限错误，请执行以下操作。在bin文件夹内打开终端/ shell，并输入以下命令：
- en: '[PRE58]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'By default, Heroku Cloud Service will create a URL for your application, like
    this:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Heroku云服务将为您的应用程序创建一个URL，就像这样：
- en: https://some-name-1234.herokuapp.com/.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: https://some-name-1234.herokuapp.com/。
- en: 'At the end of the output on the terminal, you will see some very similar to
    the following lines:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端输出的末尾，您将看到类似以下行的内容：
- en: '[PRE59]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The final result will be our sample application deployed to Heroku Cloud Service.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果将是我们的示例应用程序部署到Heroku云服务。
- en: 'Just got to https://yourURL-some-23873.herokuapp.com/ and you will see the
    following result:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 只需转到https://yourURL-some-23873.herokuapp.com/，您将看到以下结果：
- en: '![Creating a deploy.sh file](img/image_09_009.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个deploy.sh文件](img/image_09_009.jpg)'
- en: Application on Heroku Cloud Service
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku云服务上的应用程序
- en: 'When you click on the Bikes View Gallery button, you will see the bike gallery,
    as shown here:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 当您单击“自行车查看画廊”按钮时，您将看到自行车画廊，如下所示：
- en: '![Creating a deploy.sh file](img/image_09_010.jpg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个deploy.sh文件](img/image_09_010.jpg)'
- en: Bikes gallery
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 自行车画廊
- en: Also, when you click on each bike, you will see the fancybox plugin in action.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当您单击每辆自行车时，您将看到fancybox插件在起作用。
- en: Summary
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explore a little more of the Loopback framework and its
    command line interface.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更深入地探索Loopback框架及其命令行界面。
- en: Also, we have seen how to configure an AngularJS application using the Loopback
    AngularJS SDK, creating all services for each endpoint of the application.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了如何使用Loopback AngularJS SDK配置AngularJS应用程序，为应用程序的每个端点创建所有服务。
- en: We then explored the facilities using NPM as a single build tool.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用NPM作为单一的构建工具来探索这些设施。
- en: We also addressed how to create and set up an account on Heroku, and how to
    automate the deployment of our application by integrating three different tools,
    Loopback, Git, and the Heroku toolbelt.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了如何在Heroku上创建和设置帐户，以及如何通过集成Loopback、Git和Heroku工具包来自动部署我们的应用程序。
- en: In the next chapter, we will see how to use the concept of containers to run
    a Node.js application.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用容器的概念来运行Node.js应用程序。
