- en: Chapter 5. Playing with Axes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。玩转坐标轴
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Working with basic axes
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基本坐标轴
- en: Customizing ticks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义刻度
- en: Drawing grid lines
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制网格线
- en: Dynamic rescaling of axes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 坐标轴的动态缩放
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: D3 was initially released without the built-in support of the Axis component.
    This situation did not last long since axes are the universal building blocks
    in many Cartesian coordinate system-based visualization projects and one of the
    most tedious tasks to build from scratch by hand. It quickly became clear that
    D3 needs to provide built-in support for axes. Therefore, it was introduced quite
    early on and is continuously being enhanced ever since it was released. In this
    chapter, we will explore the usage of the Axis component and some related techniques.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: D3最初发布时没有内置的坐标轴组件支持。这种情况并没有持续太久，因为坐标轴是许多基于笛卡尔坐标系的可视化项目的通用构建块之一，也是从头开始手动构建的最繁琐的任务之一。很快，就清楚D3需要提供内置的坐标轴支持。因此，它很早就被引入，并且自发布以来一直在不断改进。在本章中，我们将探讨坐标组件的使用和一些相关技术。
- en: Working with basic axes
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用基本坐标轴
- en: In this recipe, we will focus on introducing the basic concepts and supports
    of the Axis component in D3 while we cover different types and features of Axis
    as well as their `SVG` structures.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将专注于介绍D3中坐标组件的基本概念和支持，同时我们将涵盖坐标的不同类型和功能以及它们的`SVG`结构。
- en: Getting ready
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter5/basic-axes.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter5/basic-axes.html)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter5/basic-axes.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter5/basic-axes.html)'
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s first take a look at the following code sample:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看以下代码示例：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code produces a visual output with only the four buttons shown
    in the following screenshot; when you click on **horizontal bottom**, it will
    show you the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码只显示了以下截图中的四个按钮的视觉输出；当你点击**水平底部**时，它会显示以下内容：
- en: '![How to do it...](img/image_05_001.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_05_001.jpg)'
- en: Horizontal axis
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 水平坐标轴
- en: 'The following screenshot shows what it looks like when you click the **vertical
    right** button:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了当你点击**垂直右侧**按钮时的样子：
- en: '![How to do it...](img/image_05_002.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_05_002.jpg)'
- en: Vertical axis
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直坐标轴
- en: How it works...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first step in this recipe is to create the `svg` element, which will be
    used to render our axes. This is done using the `createSvg` function, which is
    defined on line `A`, and the D3 `append` and `attr` modifier functions, shown
    on lines `B` and `C`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的第一步是创建`svg`元素，它将被用来渲染我们的坐标轴。这是通过`createSvg`函数完成的，该函数定义在第`A`行，以及D3的`append`和`attr`修改函数，如第`B`行和第`C`行所示。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is the first recipe in this book that uses SVG instead of HTML element
    since D3 Axis component supports only SVG. If you are not familiar with SVG standard,
    don't worry, we will cover it in detail in [Chapter 7](ch07.html "Chapter 7. Getting
    into Shape"), *Getting into Shape*. Although, for the purpose of this chapter,
    some of the basic and limited SVG concepts will be introduced when used by the
    D3 Axis component.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书中第一个使用SVG而不是HTML元素的食谱，因为D3坐标轴组件只支持SVG。如果你不熟悉SVG标准，不要担心，我们将在第7章[“形状入门”](ch07.html
    "第7章。形状入门")中详细介绍它。尽管如此，为了本章的目的，当使用D3坐标轴组件时，将介绍一些基本和有限的SVG概念。
- en: 'Let''s take a look at how we created the SVG canvas in the following code snippet:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下代码片段中我们是如何创建SVG画布的：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we are ready to render the axes on this `svg` canvas. The `renderAxis`
    function is designed to do exactly just that. On line `D`, we first create an
    Axis component using the given D3 axis generator function. D3 version 4.x is shipped
    with four built-in axis generators for different orientations. Orientation tells
    D3 how a given axis will be placed, and therefore, how it should be rendered;
    for example, whether horizontally or vertically. The four axis orientations that
    D3 supports out of box are as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好在这个`svg`画布上渲染坐标轴。`renderAxis`函数正是为此而设计的。在第`D`行，我们首先使用给定的D3坐标轴生成函数创建一个坐标轴组件。D3
    4.x版本提供了四个内置的坐标轴生成器，用于不同的方向。方向告诉D3给定坐标轴将如何放置，因此应该如何渲染；例如，是水平还是垂直。D3支持的四个内置坐标轴方向如下：
- en: '`d3.axisTop`: A horizontal axis with labels placed on top of the axis'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.axisTop`: 一个水平轴，标签放置在轴的顶部'
- en: '`d3.axisBottom`: A horizontal axis with labels placed at the bottom of the
    axis'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.axisBottom`: 一个水平轴，标签放置在轴的底部'
- en: '`d3.axisLeft`: A vertical axis with labels placed on the left-hand side of
    the axis'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.axisLeft`: 一个垂直轴，标签放置在轴的左侧'
- en: '`d3.axisRight`: A vertical axis with labels placed on the right-hand side of
    the axis'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.axisRight`: 一个垂直轴，标签放置在轴的右侧'
- en: 'You can see in the following code snippet that these are indeed the functions
    that get passed to the `renderAll` function when you click on the specified buttons:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下代码片段中看到，这些确实是当您点击指定的按钮时传递给 `renderAll` 函数的函数：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'D3 Axis is designed to work out of the box with D3 scales. The axis scale is
    provided using the `scale()` function (refer to line `E`). In this example, we
    render three different axes with the following scales:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: D3 轴被设计为与 D3 尺度无缝工作。轴尺度是通过 `scale()` 函数提供的（参考行 `E`）。在这个例子中，我们使用以下尺度渲染了三个不同的轴：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: On line `G`, we set the number of ticks, the small marks on the axes, to `5`.
    This tells D3 ideally how many ticks we want to render for this axis; however,
    D3 might choose to render slightly more or less ticks based on the available space
    and its own calculation. We will explore the Axis ticks' configuration in detail
    in the next recipe.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在行 `G` 上，我们将刻度数（轴上的小标记）设置为 `5`。这告诉 D3 理想情况下我们希望为这个轴渲染多少个刻度；然而，D3 可能会根据可用空间和自己的计算选择渲染稍微更多或更少的刻度。我们将在下一个菜谱中详细探讨轴刻度的配置。
- en: 'Once the axis is defined, the final step in this creation process is to create
    an `svg:g` container element, which will then be used to host all SVG structures
    that are required to render an axis:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了轴，这个创建过程的最后一步是创建一个 `svg:g` 容器元素，然后它将被用来托管所有渲染轴所需的 SVG 结构：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Having a `g` container group element to contain all SVG elements related to
    an axis is not only a good practice but also a requirement of the D3 axis component.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个 `g` 容器组元素来包含所有与轴相关的 SVG 元素不仅是一种良好的实践，也是 D3 轴组件的要求。
- en: Most of the logic in this code snippet is related to the calculation of where
    to draw the axis on the `svg` canvas using the `transform` attribute (refer to
    line `H`). In the preceding code example, to shift the axis using offsets, we
    used the `translate` SVG transformation, which allows us to shift an element using
    a distance parameter that is defined with the coordinates in *x* and *y*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中的大部分逻辑都与使用 `transform` 属性在 `svg` 画布上绘制轴的位置计算相关（参考行 `H`）。在前面的代码示例中，为了使用偏移量移动轴，我们使用了
    `translate` SVG 变换，这允许我们使用定义在 *x* 和 *y* 坐标中的距离参数来移动一个元素。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'SVG transformation will be discussed in detail in [Chapter 7](ch07.html "Chapter 7. Getting
    into Shape"), *Getting into Shape*, or you can refer to the following URL for
    more information on this topic: [https://www.w3.org/TR/SVG/coords.html#TranslationDefined](https://www.w3.org/TR/SVG/coords.html#TranslationDefined)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 变换将在第 7 章（[Chapter 7](ch07.html "Chapter 7. Getting into Shape")）*Getting
    into Shape* 中详细讨论，或者您可以参考以下 URL 获取更多关于这个主题的信息：[https://www.w3.org/TR/SVG/coords.html#TranslationDefined](https://www.w3.org/TR/SVG/coords.html#TranslationDefined)
- en: 'The more relevant part of this code is on line `I`, where the `d3.selection.call`
    function is used with the `axis` object being passed in as the parameter. The
    `d3.selection.call` function invokes the given function (in our case, the `axis`
    object) with the current selection passed in as an argument. In other words, the
    function being passed into the `d3.selection.call` function should have the following
    form:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的相关部分在行 `I`，其中使用了 `d3.selection.call` 函数，并将 `axis` 对象作为参数传递。`d3.selection.call`
    函数使用当前选择作为参数调用给定的函数（在我们的情况下，是 `axis` 对象）。换句话说，传递给 `d3.selection.call` 函数的函数应该具有以下形式：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `d3.selection.call` function also allows you to pass in additional arguments
    to the invoking function. For more information, visit the following link: [https://github.com/d3/d3-selection/blob/master/README.md#selection_call](https://github.com/d3/d3-selection/blob/master/README.md#selection_call)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`d3.selection.call` 函数还允许您向调用函数传递额外的参数。更多信息，请访问以下链接：[https://github.com/d3/d3-selection/blob/master/README.md#selection_call](https://github.com/d3/d3-selection/blob/master/README.md#selection_call)'
- en: 'Once the D3 Axis component is called, it will take care of the rest and automatically
    create all necessary SVG elements for an axis (refer to line `I`). For example,
    the horizontal-bottom time axis in the example shown in this recipe has the following
    complicated SVG structure automatically generated, which we don''t really need
    to know much about:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦调用 D3 轴组件，它将负责剩余的工作，并自动创建轴所需的所有必要的 SVG 元素（参考行 `I`）。例如，本食谱中所示示例的水平底部时间轴具有以下自动生成的复杂
    SVG 结构，我们实际上并不需要了解太多：
- en: '![How it works...](img/image_05_003.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/image_05_003.jpg)'
- en: Horizontal bottom time Axis SVG structure
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 水平底部时间轴 SVG 结构
- en: Customizing ticks
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义刻度
- en: We already saw how to use the `ticks` function in the previous recipe. This
    is the simplest ticks-related customization you can do on a D3 axis. In this recipe,
    we will cover some of the most common and useful ticks-related customizations
    with D3 axis.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在之前的食谱中看到了如何使用 `ticks` 函数。这是在 D3 轴上可以进行的最简单的刻度相关自定义。在本食谱中，我们将介绍一些最常见和有用的刻度相关自定义。
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter5/ticks.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter5/ticks.html)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter5/ticks.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter5/ticks.html)'
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'In the following code example, we will customize the ticks, padding, and formatting
    of its label. Let''s take a look at the code snippet first:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码示例中，我们将自定义刻度、填充和标签的格式。让我们首先看看代码片段：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code generates the following visual output:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成了以下视觉输出：
- en: '![How to do it...](img/image_05_004.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现...](img/image_05_004.jpg)'
- en: Customized axis ticks
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义轴刻度
- en: How it works...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The focus of this recipe is the highlighted lines after the `ticks` function.
    As we have mentioned before, the `ticks` function provides D3 a hint on how many
    ticks an axis should contain. After setting the number of ticks, in this recipe,
    we continue to customize the ticks through further function calls. On line `A`,
    the `tickSize` function is used to customize the size of the ticks. The default
    tick size provided by D3 is `6px`, whereas we set it to `12px` in this example.
    Then, on line `B`, the `tickPadding` function was used to specify the amount of
    space (in pixels) between tick labels and the axis.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的重点是 `ticks` 函数之后的突出显示的行。正如我们之前提到的，`ticks` 函数为 D3 提供了一个提示，说明轴应该包含多少个刻度。在设置刻度数量之后，在本食谱中，我们继续通过进一步的函数调用来进一步自定义刻度。在行
    `A` 上，使用 `tickSize` 函数来自定义刻度的大小。D3 提供的默认刻度大小是 `6px`，而在这个例子中我们将其设置为 `12px`。然后，在行
    `B` 上，使用 `tickPadding` 函数指定刻度标签和轴之间的空间（以像素为单位）。
- en: 'Finally, a custom format was used with the `tickFormat` function on line `C`
    to convert the tick value into percentage. D3 axis'' `tickFormat` function can
    also take a function as a formatter for more customization, and therefore, the
    formatter used in this recipe is the same as passing, in the following custom
    format function:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在行 `C` 上使用 `tickFormat` 函数自定义了格式，将刻度值转换为百分比。D3 轴的 `tickFormat` 函数也可以接受一个函数作为格式化器进行更多自定义，因此，本食谱中使用的格式化器与以下自定义格式函数相同：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the aforementioned functions and other ticks-related
    customizations, visit the D3 Wiki at the following URL: [https://github.com/d3/d3-axis/blob/master/README.md#_axis](https://github.com/d3/d3-axis/blob/master/README.md#_axis)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 关于上述函数和其他刻度相关自定义的更多信息，请访问以下 URL 的 D3 Wiki：[https://github.com/d3/d3-axis/blob/master/README.md#_axis](https://github.com/d3/d3-axis/blob/master/README.md#_axis)
- en: Drawing grid lines
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制网格线
- en: Quite often, we will need horizontal and vertical grid lines to be drawn in
    consistency with the ticks on both *x* and *y* axes. As we have shown in the previous
    recipe, typically, we don't have, or don't want to have, precise control of how
    ticks are rendered on D3 axes. Therefore, we might not know how many ticks are
    present and their values, before they are rendered. This is especially true if
    you are building a reusable visualization library, where it is impossible to know
    the tick configuration ahead of its time. In this recipe, we will explore some
    useful techniques for drawing consistent grid lines on Axis without actually needing
    to know the tick values.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 很频繁地，我们需要绘制与*x*和*y*轴上的刻度一致的水平和垂直网格线。正如我们在前面的配方中所示，通常情况下，我们并没有，或者不希望对D3轴上刻度的渲染有精确的控制。因此，在它们被渲染之前，我们可能不知道有多少刻度以及它们的值。这在您正在构建一个可重用的可视化库时尤其如此，因为在那时之前，您不可能知道刻度配置。在这个配方中，我们将探讨一些在轴上绘制一致网格线的技术，而实际上并不需要知道刻度值。
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter5/grid-line.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter5/grid-line.html)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter5/grid-line.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter5/grid-line.html)'
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'First, let''s take a look at how we draw grid lines in the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看以下代码中我们是如何绘制网格线的：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The previous code generates the following visual output:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码生成了以下视觉输出：
- en: '![How to do it...](img/image_05_005.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现...](img/image_05_005.jpg)'
- en: Axes and grid lines
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 轴和网格线
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, two axes-*x* and *y-*were created in the `renderXAxis` and `renderYAxis`
    functions, respectively. Let's take a look at how the x axis was rendered.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，`renderXAxis`和`renderYAxis`函数分别创建了两个轴-*x*和*y-*。让我们看看x轴是如何被渲染的。
- en: 'Once you understand how to render the *x* axis and its grid lines, the logic
    used to render the *y* axis can be easily understood since the logic used is almost
    identical. The *x* axis and its scale were defined without complications, as we
    have already demonstrated them a number of times throughout this chapter. An `svg:g`
    element was created to contain the *x* axis structures. This `svg:g` element was
    placed at the bottom of the chart using a translate transformation, as shown on
    line `A`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你了解了如何渲染*x*轴及其网格线，由于使用的逻辑几乎相同，因此渲染*y*轴的逻辑也可以很容易地理解。*x*轴及其刻度已经被定义得没有复杂性，正如我们在本章中已经多次演示的那样。创建了一个`svg:g`元素来包含*x*轴的结构。这个`svg:g`元素通过平移变换放置在图表的底部，如图线`A`所示：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It is important to remember that the translate transformation changes the frame
    of reference for coordinates when it comes to any of its subelements. For example,
    within this `svg:g` element, if we create a point with its coordinates set as
    `(0, 0)`, then when we draw this point on the SVG canvas, it will be actually
    placed as `(margin, height - margin)`. This is because all subelements within
    the `svg:g` element are automatically transformed to this base coordinate, and
    hence leading to the shift of the frame of reference. Equipped with this understanding,
    let''s take a look at how dynamic grid lines can be generated after the axis is
    rendered through the following code snippet:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，平移变换会改变其子元素坐标的参考框架。例如，在这个`svg:g`元素内部，如果我们创建一个坐标设置为`(0, 0)`的点，那么当我们在这个SVG画布上绘制这个点时，它实际上会被放置在`(margin,
    height - margin)`。这是因为`svg:g`元素内的所有子元素都会自动转换到这个基准坐标，从而导致参考框架的偏移。有了这个理解，让我们看看如何通过以下代码片段在轴渲染后生成动态网格线：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once the axis is rendered, we can select all the ticks elements on an axis
    by selecting the `g.tick`, since each of them is grouped by its own `svg:g` element
    (refer to line `B`). Then, on line `C`, we append a new `svg:line` element to
    each of the `svg:g` tick element. SVG line element is the simplest shape provided
    by the SVG standard. It has the following four main attributes:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦轴被渲染，我们可以通过选择`g.tick`来选择轴上的所有刻度元素，因为每个刻度都由它自己的`svg:g`元素分组（参见图线`B`）。然后，在图线`C`中，我们为每个`svg:g`刻度元素添加一个新的`svg:line`元素。SVG线元素是SVG标准提供的最简单的形状。它有以下四个主要属性：
- en: '`x1` and `y1` attributes define the point of origin of this line'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x1`和`y1`属性定义了这条线的起点'
- en: '`x2` and `y2` attributes define the point of destination'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x2`和`y2`属性定义了终点'
- en: In our case, we simply will need to set `x1`, `y1`, and `x2` to `0` since each
    `g.tick` element is already translated to its position on the axis, and therefore,
    we only need to change the `y2` attribute in order to draw a vertical grid line.
    The `y2` attribute is set to `-(height - 2 * margin)`. The reason why the coordinate
    is negative was because the entire `g.x-axis` has been shifted down to `(height
    - margin)`, as mentioned in the previous code. Therefore, in absolute coordinate
    terms, `y2 =` `(height - margin)` `- (height - 2 * margin) = margin`, which is
    the top of the vertical grid line we want to draw from the *x* axis.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们只需要将 `x1`、`y1` 和 `x2` 设置为 `0`，因为每个 `g.tick` 元素已经转换到了其在轴上的位置，因此我们只需要更改
    `y2` 属性来绘制垂直网格线。`y2` 属性设置为 `-(height - 2 * margin)`。坐标为负的原因是，正如前一段代码中提到的，整个 `g.x-axis`
    已经向下移动到 `(height - margin)`。因此，在绝对坐标下，`y2 =` `(height - margin)` `- (height -
    2 * margin) = margin`，这是我们想要从 *x* 轴绘制的垂直网格线的顶部。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In SVG coordinates, `(0, 0)` denotes the top-left corner of the SVG canvas.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SVG 坐标中，`(0, 0)` 表示 SVG 画布的左上角。
- en: 'This is what the *x* axis in the SVG structure with an associated grid line
    looks like:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 SVG 结构中带有相关网格线的 *x* 轴的样子：
- en: '![How it works...](img/image_05_006.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image_05_006.jpg)'
- en: X-axis with grid lines SVG structure
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 带有网格线的 X 轴 SVG 结构
- en: As we can see in the preceding screenshot, an `svg:line` element representing
    the grid line was added into the `g.ticksvg:g` container element as discussed
    earlier in this section.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，一个代表网格线的 `svg:line` 元素被添加到了前面在本节中讨论的 `g.ticksvg:g` 容器元素中。
- en: 'The *y* axis grid lines are generated using the *identical technique*; the
    only difference is that instead of setting the `y2` attribute on the grid lines,
    as we did for the *x* axis, we change the `x2` attribute since the lines are horizontal
    (refer to line `F`):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*y* 轴的网格线使用的是相同的技巧生成；唯一的区别是，我们不是在网格线上设置 `y2` 属性，就像我们在 *x* 轴上做的那样，而是改变 `x2`
    属性，因为线条是水平的（参见图 `F`）：'
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Dynamic rescaling of axes
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轴的动态缩放
- en: In some cases, the scale used by axes might change when triggered by user interaction
    or changes from data feeds. For example, a user may change the time range for
    the visualization. This kind of change also needs to be reflected by rescaling
    the axes. In this recipe, we will explore how this can be achieved dynamically
    while also redrawing the grid lines associated with each tick.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，当由用户交互或数据源的变化触发时，轴使用的比例可能会改变。例如，用户可能会更改可视化的时间范围。这种变化也需要通过缩放轴来反映。在本食谱中，我们将探讨如何动态地实现这一点，同时重新绘制与每个刻度相关的网格线。
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网页浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter5/rescaling.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter5/rescaling.html)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter5/rescaling.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter5/rescaling.html)'
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following is the code that shows how to perform dynamic rescaling:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何执行动态缩放：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding code generates the following effects:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码生成了以下效果：
- en: '![How to do it...](img/image_05_007.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_05_007.jpg)'
- en: Dynamic axes rescaling
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 动态轴缩放
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Due to the limited space in this book, the *y* axis-related code is omitted
    from the code example in this recipe. Refer to the code example available online
    for a complete reference.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书篇幅有限，本食谱中的代码示例省略了与 *y* 轴相关的代码。请参考在线可用的代码示例以获取完整参考。
- en: How it works...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'As soon as you click on the **ReScale** button on the screen, you will notice
    both the axes rescale while all the ticks and grid lines get redrawn accompanied
    by a smooth transition effect. In this section, we will focus on how this rescaling
    works and leave the transition effect for the next chapter, *Transition with Style*.
    Most of the heavy lifting in this recipe is done by the `rescale` function defined
    on line `A`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在屏幕上点击 **ReScale** 按钮，您将注意到轴会缩放，同时所有刻度和网格线都会随着平滑的过渡效果重新绘制。在本节中，我们将关注这种缩放是如何工作的，并将过渡效果留到下一章，*带有风格的过渡*。本食谱的大部分工作都是由第
    `A` 行上定义的 `rescale` 函数完成的：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To rescale an axis, we simply will change its domain (refer to line `B`). If
    you recall, the scale domain represents the data domain, whereas its range corresponds
    to visual domain. Therefore, visual range should remain constant since we are
    not resizing the SVG canvas. Once this is updated, we call the axis function `xAxis`
    again by passing in the `svg:g` element for the *x* axis (refer to line `C`);
    this simple call will take care of the axis updating, and hence, our job with
    the axis is done. In the next step, we will also need to update and redraw all
    the grid lines since the domain change will also change all the ticks:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要缩放一个轴，我们只需更改其域（参见图`B`）。如果你还记得，刻度域表示数据域，而其范围对应于视觉域。因此，视觉范围应保持不变，因为我们没有调整SVG画布的大小。一旦更新，我们再次调用轴函数`xAxis`，通过传入`svg:g`元素来为*x*轴（参见图`C`）。这个简单的调用将处理轴的更新，因此我们的轴工作就完成了。在下一步中，我们还需要更新和重新绘制所有网格线，因为域的变化也会改变所有刻度：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is achieved by removing every grid line by calling the `remove()` function,
    as shown on line `D`, and then recreating the grid lines for all the new ticks
    on the rescaled axes. This approach effectively keeps all grid lines consistent
    with the ticks during rescaling.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过调用`remove()`函数移除所有网格线来实现的，如第`D`行所示，然后为缩放轴上的所有新刻度重新创建网格线。这种方法有效地保持了所有网格线在缩放过程中的与刻度的一致性。
