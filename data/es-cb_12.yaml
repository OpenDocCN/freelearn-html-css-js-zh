- en: Working with Sets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用集合
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下食谱：
- en: Adding and deleting items from a Set
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向集合中添加和删除项
- en: Creating a Set from existing data
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从现有数据创建一个Set
- en: Adding and deleting items from a WeakSet
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从WeakSet中添加和删除项
- en: Creating a WeakSet from existing data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从现有数据创建一个WeakSet
- en: Finding the union of two sets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找两个集合的并集
- en: Finding the intersection of two sets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找两个集合的交集
- en: Finding the difference between two sets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找两个集合之间的差异
- en: Creating a class that wraps a Set to work with more complex types
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个包装Set的类以处理更复杂的数据类型
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: For our final chapter, we'll be taking a look at two more new, related types.
    `Set` and `WeakSet`, like `Map` and `WeakMap`, are collections of other values.
    However, rather than creating relationships between pairs of values, `Set` and
    `WeakSet` create a relationship between all entries in the collection. These data
    structures ensure that there are no duplicated entries. If a new item evaluates
    as equal with another member, it won't be added to the `Set`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的最后一章，我们将探讨两种更多的新相关类型。`Set`和`WeakSet`，像`Map`和`WeakMap`一样，是其他值的集合。然而，`Set`和`WeakSet`不是在值对之间创建关系，而是在集合的所有条目之间创建关系。这些数据结构确保没有重复的条目。如果一个新项评估为与另一个成员相等，它将不会被添加到`Set`中。
- en: The recipes in this chapter will illustrate how to implement different behaviors
    with the set classes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的食谱将展示如何使用集合类实现不同的行为。
- en: Adding and deleting items from a Set
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向集合中添加和删除项
- en: We will start out with the simplest possible tasks involving a `Set`. In this
    recipe, we'll take a look at how to add and delete items from a `Set` using the
    respective instance methods.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从涉及`Set`的最简单任务开始。在本食谱中，我们将探讨如何使用相应实例方法向`Set`中添加和删除项。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设你已经有一个工作区，允许你在浏览器中创建和运行ES模块。如果你没有，请参考前两章。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application, and navigate to your workspace.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，导航到你的工作区。
- en: Create a new folder named `12-01-add-remove-from-set`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`12-01-add-remove-from-set`的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个`index.html`，它从`main.js`加载并运行一个`main`函数。
- en: 'Create a `main.js` file that defines a `main` function. In that function, create
    a new `Set` instance, then add and remove a few items from it:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.js`文件，定义一个`main`函数。在该函数中，创建一个新的`Set`实例，然后从中添加和删除一些项：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Start your Python web server, and open the following URL in your browser:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的Python网络服务器，并在浏览器中打开以下URL：
- en: '`http://localhost:8000/`.'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You will see the following output:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![](img/224ef062-02a4-4f7d-94e1-205afe5216ae.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/224ef062-02a4-4f7d-94e1-205afe5216ae.png)'
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A set is a collection of data. But it behaves differently than the more familiar
    `Array` type. Like mathematical sets, a `Set` instance is meant to only have a
    single copy of an element. That is, if you had an `Array` of numbers and a `Set`
    of numbers, the `Array` could contain the number `138` several times, but the
    `Set` could only contain a single copy if it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 集合是一组数据。但它的行为与更熟悉的`Array`类型不同。像数学集合一样，`Set`实例旨在只包含一个元素副本。也就是说，如果你有一个数字的`Array`和一个数字的`Set`，`Array`可以包含数字`138`多次，但`Set`只能包含一个副本。
- en: 'Membership to a Set is evaluated similarly to the `===` operator. In our case,
    you can see that `US: Saturn V` is only added to the set a single time, despite
    being provided as an argument to `add` twice. Next, you can see that `US: Falcon
    Heavy` is removed after being initially added. Subsequently, the set only has
    a single member.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '集合的成员资格评估方式类似于`===`运算符。在我们的例子中，你可以看到`US: Saturn V`只被添加到集合中一次，尽管它被作为`add`的参数提供了两次。接下来，你可以看到`US:
    Falcon Heavy`在被最初添加后就被移除了。随后，集合中只有一个成员。'
- en: 'To learn more about sets, visit the Mozilla developer documentation at the
    following link:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于集合的信息，请访问以下链接的Mozilla开发者文档：
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set).'
- en: Creating a Set from existing data
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从现有数据创建一个Set
- en: We just saw how to add values individually to sets. This can be tedious, however.
    For example, if we are working with a dataset that might be very large or unknown
    ahead of time, it would be nice to initialize a map with a function call, rather
    than hundreds or thousands.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到了如何将值逐个添加到集合中。然而，这可能会很繁琐。例如，如果我们正在处理一个可能非常大或事先未知的数据集，使用函数调用初始化映射会比数百或数千个映射更方便。
- en: In this recipe, we'll take a look at how to create a new Set with the preexisting
    data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探讨如何使用现有数据创建一个新的 Set。
- en: Getting ready
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设你已经有一个工作区，允许你在浏览器中创建和运行 ES 模块。如果你没有，请参考前两章。
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application, and navigate to your workspace.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，导航到你的工作区。
- en: Create a new folder named `12-02-create-set-from-data`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `12-02-create-set-from-data` 的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个 `index.html` 文件，该文件加载并运行来自 `main.js` 的 `main` 函数。
- en: 'Create a `main.js` file that defines a `main` function with an array of string.
    Create a new set with that array as a constructor argument:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，定义一个名为 `main` 的函数，它有一个字符串数组作为参数。使用该数组作为构造函数参数创建一个新的集合：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Start your Python web server, and the following URL in your browser:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的 Python 网络服务器，并在浏览器中打开以下 URL：
- en: '`http://localhost:8000/`.'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![](img/8d2f887e-24ee-42b7-b9f7-43de30197478.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d2f887e-24ee-42b7-b9f7-43de30197478.png)'
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In the preceding recipe we see how to create a `Set` with existing data. The
    constructor for a `Set` takes an `iterable` as an argument. The most familiar
    `iterable` is an array. In the case of the `Set`, each element in the `iterable`
    (array) is added to the collection in order. As we mentioned in the preceding
    recipe, membership of a `Set` is determined using a similar comparison to the
    `===` operator. Sets don''t allow duplicate values. Thus, we only see a single
    `US: Saturn V` in the `<entries>` section of the output.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的食谱中，我们看到如何使用现有数据创建一个 `Set`。`Set` 的构造函数接受一个 `iterable` 作为参数。最熟悉的 `iterable`
    是一个数组。在 `Set` 的情况下，`iterable`（数组）中的每个元素按顺序添加到集合中。正如我们在前面的食谱中提到的，`Set` 的成员资格是通过与
    `===` 操作符类似的比较来确定的。集合不允许重复值。因此，我们只看到输出 `<entries>` 部分中的单个 `US: Saturn V`。'
- en: Adding and deleting items from WeakSet
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 WeakSet 中添加和删除项目
- en: Now, we'll take a look at the corresponding weak data structure, `WeakSet`.
    In this recipe, we'll look at how to add and delete items from a `WeakSet`, using
    the respective instance methods, and at some restrictions on membership.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将查看相应的弱数据结构，`WeakSet`。在本食谱中，我们将探讨如何使用相应实例方法向 `WeakSet` 添加和删除项目，以及一些关于成员资格的限制。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设你已经有一个工作区，允许你在浏览器中创建和运行 ES 模块。如果你没有，请参考前两章。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application, and navigate to your workspace.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，导航到你的工作区。
- en: Create a new folder named `12-03-add-remove-from-weak-set`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `12-03-add-remove-from-weak-set` 的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个 `index.html` 文件，该文件加载并运行来自 `main.js` 的 `main` 函数。
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，定义一个名为 `Rocket` 的新类，它接受一个构造函数参数 `name` 并将其分配给实例属性：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a `main` function with some `Rocket` instances and a `WeakMap` instance.
    Add and remove the instances from the set:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数，包含一些 `Rocket` 实例和一个 `WeakMap` 实例。将实例添加到集合中并从中删除：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Start your Python web server, and open the following URL in your browser:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的 Python 网络服务器，并在浏览器中打开以下 URL：
- en: '`http://localhost:8000/`.'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You will see the following output:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![](img/b01fec77-d825-4111-8468-349ee0678e81.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b01fec77-d825-4111-8468-349ee0678e81.png)'
- en: How it works...
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Membership to a `WeakSet` is evaluated similarly to the `===` operator. Looking
    at the  preceding, we can see that two `Rocket` instances with the name `US: Saturn
    V` are added to the set. This is, of course, because the set isn''t comparing
    name properties, but object instances. Thus, we''ll see two rather than one (unique
    names) or three (number of times added) `US: Saturn V` entries.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`WeakSet`的成员资格评估方式类似于`===`运算符。查看前面的内容，我们可以看到名为`US: Saturn V`的两个`Rocket`实例被添加到集合中。这当然是因为集合不是比较名称属性，而是对象实例。因此，我们将看到两个而不是一个（唯一的名称）或三个（添加次数）`US:
    Saturn V`条目。'
- en: 'Next, you can see that the `US: Falcon Heavy` is removed after being initially
    added. Subsequently, the set doesn''t have that member.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，你可以看到`US: Falcon Heavy`在最初添加后被移除。随后，集合中不再有那个成员。'
- en: An error is thrown when trying to add a string to the `WeakSet`. Like the keys
    of `WeakMap`, the elements of `WeakSet` must be objects. This is so that the `WeakSet`
    can only keep weak references to its entries. Thus, the memory allocated for the
    entries can be released when other references go out of scope.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当尝试向`WeakSet`添加字符串时，会抛出错误。像`WeakMap`的键一样，`WeakSet`的元素必须是对象。这样，`WeakSet`只能对其条目保持弱引用。因此，当其他引用超出作用域时，可以为条目分配的内存被释放。
- en: Creating a WeakSet from existing data
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从现有数据创建WeakSet
- en: We just saw how to create a Set from existing data. The related class `WeakSet`
    can be created in a similar way, but has restrictions on membership. In this recipe,
    we'll take a look at how to create a `WeakSet` from existing data and some restrictions
    on membership.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到了如何从现有数据创建Set。相关的类`WeakSet`可以以类似的方式创建，但对其成员资格有限制。在这个配方中，我们将查看如何从现有数据创建`WeakSet`以及对其成员资格的限制。
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方假设你已经有一个工作区，允许你在浏览器中创建和运行ES模块。如果你没有，请参考前两章。
- en: How to do it...
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application, and navigate to your workspace.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，并导航到你的工作区。
- en: Create a new folder named `12-04-create-weak-set-from-data`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`12-04-create-weak-set-from-data`的新文件夹。
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.js`的文件，定义一个名为`Rocket`的新类，该类接受一个构造函数参数`name`并将其分配给实例属性：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a `main` function with an array of rocket instances. Create a new `WeakSet`
    from the array. Try to add a string to `WeakSet`:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含火箭实例数组的`main`函数。从数组中创建一个新的`WeakSet`。尝试向`WeakSet`添加一个字符串：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Start your Python web server, and open the following URL in your browser:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的Python网络服务器，并在浏览器中打开以下URL：
- en: '`http://localhost:8000/`.'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![](img/fd90e972-6cb5-43d9-9e0c-190cb807e89f.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fd90e972-6cb5-43d9-9e0c-190cb807e89f.png)'
- en: How it works...
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Just like the Set constructor, the `WeakSet` constructor takes an iterable.
    Each element of the array is added in turn. We'll note that multiple instances
    have the same `name` property. This is, of course, because they are separate `Rocket`
    instances, despite having the same name value.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Set构造函数一样，`WeakSet`构造函数也接受一个可迭代对象。数组中的每个元素依次被添加。我们将注意到多个实例具有相同的`name`属性。这当然是因为它们是独立的`Rocket`实例，尽管它们具有相同的名称值。
- en: Finding the union of two sets
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找两个集合的并集
- en: Now that we've got a good handle on sets, it's time to start performing some
    set operations. Sets are unordered groups of things; something you might want
    to do is to combine two groups into one. This operation is called a `union` of
    two sets. An element is in the union of two sets, if it exists in either of them.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经很好地掌握了集合，是时候开始执行一些集合操作了。集合是无序的事物组；你可能想要做的是将两个组合并成一个。这个操作称为两个集合的`并集`。如果一个元素存在于两个集合中的任何一个中，那么它就在两个集合的并集中。
- en: In this recipe, we'll take a look at how to create a union of two `Set` instances.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将查看如何创建两个`Set`实例的并集。
- en: Getting ready
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方假设你已经有一个工作区，允许你在浏览器中创建和运行ES模块。如果你没有，请参考前两章。
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application, and navigate to your workspace.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，并导航到你的工作区。
- en: Create a new folder named `12-05-set-union`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`12-05-set-union`的新文件夹。
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，定义一个名为 `Rocket` 的新类，该类接受一个构造函数参数 `name` 并将其分配给实例属性：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a function called `union` that takes two set arguments:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `union` 的函数，该函数接受两个集合参数：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a `result` set. Loop through both set instances, and add each `entry`
    to the resultant set:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `result` 集合。遍历两个集合实例，并将每个 `entry` 添加到结果集合中：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a `main` function. Create a couple of sets with overlapping members.
    Log out from the union of the two sets:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数。创建几个具有重叠成员的集合。从两个集合的并集中退出：
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Start your Python web server, and open the following URL in your browser:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的 Python 网络服务器，并在浏览器中打开以下 URL：
- en: '`http://localhost:8000/`.'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![](img/83a13115-9f0c-44e5-bf23-dc13e0bec3a5.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83a13115-9f0c-44e5-bf23-dc13e0bec3a5.png)'
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the preceding recipe, we rely on the properties of `Set` to implement the
    `union` operation. As stated before, sets do not store duplicate entries. So,
    when creating the union, we don't have to worry about adding duplicates to the
    resulting set, because that is taken care of for us by the class. Simply looping
    over all the members and adding them is sufficient to create the union set.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的食谱中，我们依赖于 `Set` 的属性来实现 `union` 操作。如前所述，集合不存储重复条目。因此，在创建并集时，我们不必担心将重复项添加到结果集合中，因为这一点由类为我们处理。只需遍历所有成员并添加它们就足以创建并集集合。
- en: Finding the intersection of two sets
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找两个集合的交集
- en: Next, we'll take a look at how to find out the elements two Sets have in common.
    This operation is called an `intersection` of two sets. An element is in the intersection
    of two sets, if it exists in both of them.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看如何找出两个集合共有的元素。这个操作称为两个集合的 `intersection`。如果一个元素存在于两个集合的交集中，那么它就存在于这两个集合中。
- en: In this recipe, we'll see how to create an intersection of two `Set` instances.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将了解如何创建两个 `Set` 实例的交集。
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您已经有一个工作区，允许您在浏览器中创建和运行 ES 模块。如果您没有，请参考前两章。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application, and navigate to your workspace.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序，并导航到您的 workspace。
- en: Create a new folder named `12-06-set-intersection`.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `12-06-set-intersection` 的新文件夹。
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument name and assigns it to an instance property:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，定义一个名为 `Rocket` 的新类，该类接受一个构造函数参数 `name` 并将其分配给实例属性：
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a function called `intersection` that takes two `set` arguments:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `intersection` 的函数，该函数接受两个 `set` 参数：
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a `result` set. Loop through the first `set` instance. Add each `entry`
    to the resultant `set`, if it appears in the second `set` as well:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `result` 集合。遍历第一个 `set` 实例。如果它也出现在第二个 `set` 中，则将每个 `entry` 添加到结果 `set`
    中：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a `main` function. Create a couple of sets with overlapping members.
    Log out the intersection of the two sets:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数。创建几个具有重叠成员的集合。输出两个集合的交集：
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Start your Python web server, and open the following URL in your browser:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的 Python 网络服务器，并在浏览器中打开以下 URL：
- en: '`http://localhost:8000/`.'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![](img/7f0d661d-8929-4767-89d6-9f2b0bcf3ac8.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f0d661d-8929-4767-89d6-9f2b0bcf3ac8.png)'
- en: How it works...
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: An intersection of two sets is defined as all the elements that appear in both
    sets. In this recipe, we use the `has` method to implement an `intersection` operation.
    We loop over the elements of the first `Set` and check whether the second contains
    each element. If the second `Set` contains that element, then the `has` method
    will return true. If this method returns true, then we know that the element is
    in both `Set` instances, and we add it to the new intersection.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 两个集合的交集定义为同时出现在两个集合中的所有元素。在本食谱中，我们使用 `has` 方法来实现 `intersection` 操作。我们遍历第一个 `Set`
    的元素，并检查第二个集合是否包含每个元素。如果第二个 `Set` 包含该元素，则 `has` 方法将返回 true。如果此方法返回 true，则我们知道该元素存在于两个
    `Set` 实例中，并将其添加到新的交集。
- en: Finding the difference between two sets
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找两个集合之间的差异
- en: We've seen how to combine two sets with the union operation, and find their
    common elements with the intersection  operation. The logical next step is to
    see how the sets differ. Next, we'll take a look at how to find out what elements
    one set has that another doesn't. This operation is called a `difference` of two
    sets. An element is in the difference of two sets, if it is in the first set,
    but not the second.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何使用并集操作组合两个集合，以及如何使用交集操作找到它们的共同元素。下一个逻辑步骤是看看如何找出一个集合中另一个集合没有的元素。这个操作称为两个集合的`difference`。如果一个元素在两个集合的差集中，那么它位于第一个集合中，但不位于第二个集合中。
- en: In this recipe, we'll take a look at how to find the difference between two
    `Set` instances.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将探讨如何找到两个`Set`实例之间的差异。
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方假设你已经有一个工作区，允许你在浏览器中创建和运行ES模块。如果你没有，请参阅前两章。
- en: How to do it...
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open your command-line application, and navigate to your workspace.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，并导航到你的工作区。
- en: Create a new folder named `12-07-set-difference`.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`12-07-set-difference`的新文件夹。
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.js`的文件，该文件定义了一个名为`Rocket`的新类，它接受一个构造函数参数`name`并将其分配给实例属性：
- en: '[PRE14]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a function called `difference` that takes two `set` arguments:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`difference`的函数，该函数接受两个`set`参数：
- en: '[PRE15]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a `result` set. Loop through the first set instance. Add each entry
    to the resultant set, if it does not appear in the second `set`:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`result`集合。遍历第一个集合实例。如果每个条目不在第二个`set`中，则将其添加到结果集合中：
- en: '[PRE16]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a `main` function. Create a couple of sets with overlapping members.
    Log out the differences of the two sets:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main`函数。创建几个具有重叠成员的集合。记录两个集合的差异：
- en: '[PRE17]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Start your Python web server, and open the following URL in your browser:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的Python网络服务器，并在浏览器中打开以下URL：
- en: '`http://localhost:8000/`.'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`。'
- en: 'You should see the following output:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![](img/7e6263e9-ae94-4c1f-b61b-4327ff90cf22.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7e6263e9-ae94-4c1f-b61b-4327ff90cf22.png)'
- en: How it works...
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the preceding recipe, we rely on the `has` method on the `Set` class that
    implements the `difference` operation. An element of a `difference` must appear
    in the first set but not the second. When looping over the first set, we know
    that the element is part of the first. Next, we simply have to check whether it
    is in the second using the `has` method. If this method returns false, then we
    know that the element is in the difference.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的配方中，我们依赖于`Set`类上的`has`方法来实现`difference`操作。差分的元素必须出现在第一个集合中，但不出现在第二个集合中。在遍历第一个集合时，我们知道该元素是第一个集合的一部分。接下来，我们只需使用`has`方法检查它是否在第二个集合中。如果此方法返回false，则我们知道该元素在差集中。
- en: An important distinction between difference and the other two operations we've
    seen (union and intersection) is that it is not commutative, that is, the order
    of arguments matters. You can see in the preceding recipe that the result of the
    difference function changes depending on which set is being differentiated from
    the other.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 差分与其他两个操作（并集和交集）的一个重要区别是它不是交换的，也就是说，参数的顺序很重要。你可以在前面的配方中看到，差分函数的结果取决于哪个集合被从另一个集合中区分出来。
- en: Creating a class that wraps a Set to work with more complex types
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个包装Set的类以处理更复杂的数据类型
- en: Knowing what types we are working with is valuable. `WeakSet` has some restriction
    on membership, but as you may know, objects can vary quite a lot.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 了解我们正在处理的数据类型是有价值的。`WeakSet`对成员资格有一些限制，但正如你可能知道的，对象可能会有很大的变化。
- en: In this recipe, we'll take a look at how to create a wrapper class for `Map`
    in order to control what types are used in the `Map`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将探讨如何创建`Map`的包装类，以控制`Map`中使用的类型。
- en: Getting ready
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方假设你已经有一个工作区，允许你在浏览器中创建和运行ES模块。如果你没有，请参阅前两章。
- en: If you are unfamiliar with the `WeakMap` class, refer to the *Setting and deleting
    entries from a WeakMap* recipe.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉`WeakMap`类，请参阅*从WeakMap中设置和删除条目*配方。
- en: How to do it...
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open your command-line application, and navigate to your workspace.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，并导航到你的工作区。
- en: Create a new folder named `12-08-create-class-to-wrap-set`.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `12-08-create-class-to-wrap-set` 的新文件夹。
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，该文件定义了一个名为 `Rocket` 的新类，该类接受一个构造函数参数 `name` 并将其分配给实例属性：
- en: '[PRE18]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a class `RocketSet` file that creates a new map and assigns it as an
    instance property in the constructor:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `RocketSet` 的类文件，该文件创建一个新的映射并将其作为实例属性分配给构造函数：
- en: '[PRE19]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add an `add` method that checks the type of the `key` and `value` arguments.
    This method should throw if the argument types are incorrect; otherwise, set the
    pair as an entry on the map:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `add` 方法，该方法检查 `key` 和 `value` 参数的类型。如果参数类型不正确，则抛出异常；否则，将这对作为映射条目设置：
- en: '[PRE20]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add a `has` method that returns `true` in the contained set has that entry:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `has` 方法，如果包含的集合中有该条目，则返回 `true`：
- en: '[PRE21]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a `main` function. Attempt to set various key and value pairs to an
    instance of `RocketSet`:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数。尝试将各种键值对设置到 `RocketSet` 实例中：
- en: '[PRE22]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Start your Python web server and open the following URL in your browser:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的 Python 网络服务器并在浏览器中打开以下 URL：
- en: '`http://localhost:8000/`.'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`。'
- en: 'You should see the following output:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![](img/0a1ec30c-4187-4e15-87ab-dd2f878c96e2.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0a1ec30c-4187-4e15-87ab-dd2f878c96e2.png)'
- en: How it works...
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: From the implementation of the `add` method, we can see where the types of the
    argument are being checked. The `Rocket` instances behave like other instances
    we've seen in other recipes, and can be checked like the others. When the incorrect
    type is passed as an argument to add, one of the conditionals will trigger and
    an error will be thrown.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `add` 方法的实现中，我们可以看到正在检查参数的类型。`Rocket` 实例的行为类似于我们在其他菜谱中看到的其他实例，并且可以像其他实例一样进行检查。当将不正确的类型作为
    `add` 的参数传递时，其中一个条件将触发并抛出错误。
- en: We don't have to check the types for the `has` method; it doesn't mutate the
    collection, and it will return `false` anyway if the argument isn't a `Rocket`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要为 `has` 方法检查类型；它不会修改集合，并且如果参数不是 `Rocket`，它将返回 `false`。
