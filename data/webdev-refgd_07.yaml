- en: Chapter 7. CSS Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章 CSS 函数
- en: CSS functions are used for many things in CSS. They can be used to create special
    types of processes such as creating animations or use custom fonts, or create
    visual effects like transparencies or transforming elements in both two-dimensional
    and three-dimensional planes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 函数在 CSS 中用于许多事情。它们可以用来创建特殊类型的进程，例如创建动画或使用自定义字体，或者创建透明度或变换元素在二维和三维平面上的视觉效果。
- en: Let's see what CSS functions are all about.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 CSS 函数都是关于什么的。
- en: Filter
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤器
- en: CSS filters allow us to manipulate the color of an element in different ways.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 过滤器允许我们以不同的方式操纵元素的颜色。
- en: brightness()
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: brightness()
- en: 'The `brightness()` CSS function is used with the `filter` property, and it
    looks like this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`brightness()` CSS 函数与 `filter` 属性一起使用，其语法如下：'
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Description
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `brightness()` function modifies the illumination of an image. Values are
    declared as either a *percentage* or a *number* without a unit, for example, `10%`
    and `0.5%`
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`brightness()` 函数修改图像的照明。值可以声明为不带单位的百分比或数字，例如，`10%` 和 `0.5%`。'
- en: A value of `100%` leaves the element unchanged; a value of `0%` makes the element
    completely black. Values over `100%` are allowed and create a more intense effect.
    There is no limit to the value.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 值为 `100%` 保持元素不变；值为 `0%` 使元素完全变黑。允许值超过 `100%`，这将产生更强烈的效果。值的范围没有限制。
- en: A value of `1` leaves the element unchanged; a value of `0` makes the element
    completely black. Values over `1` are allowed and create a more intense effect.
    There is no limit to the value. Also, negative values are not valid for either
    the percentage of the number.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 值为 `1` 保持元素不变；值为 `0` 使元素完全变黑。允许值超过 `1`，这将产生更强烈的效果。值的范围没有限制。此外，对于百分比和数字，负值均无效。
- en: '**CSS**:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: contrast()
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: contrast()
- en: 'The `contrast()` CSS function is used with the `filter` property, and it looks
    like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`contrast()` CSS 函数与 `filter` 属性一起使用，其语法如下：'
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Description
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `contrast()` function modifies the contrast of an element. Values are declared
    as either a *percentage* or a *number* without a unit, for example, `10%` and
    `0.5%`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`contrast()` 函数修改元素的对比度。值可以声明为不带单位的百分比或数字，例如，`10%` 和 `0.5%`。'
- en: A value of `100%` leaves the element unchanged; a value of `0%` makes the element
    completely black. Values over `100%` are allowed and create a more intense effect.
    There is no limit to the value.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 值为 `100%` 保持元素不变；值为 `0%` 使元素完全变黑。允许值超过 `100%`，这将产生更强烈的效果。值的范围没有限制。
- en: A value of `1` leaves the element unchanged; a value of `0` makes the element
    completely black. Values over `1` are allowed and create a more intense effect.
    There is no limit to the value. Also, negative values are not valid and decimal
    values are allowed for both.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 值为 `1` 保持元素不变；值为 `0` 使元素完全变黑。允许值超过 `1`，这将产生更强烈的效果。值的范围没有限制。此外，负值无效，并且允许使用小数。
- en: '**CSS**:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: grayscale()
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: grayscale()
- en: 'The `grayscale()` CSS function is used with the `filter` property, and it looks
    like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`grayscale()` CSS 函数与 `filter` 属性一起使用，其语法如下：'
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Description
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `grayscale()` function converts an element to shades of black. Values are
    declared as either a *percentage* or a *number* without a unit, for example, `10%`
    and `0.5%`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`grayscale()` 函数将元素转换为黑色调。值可以声明为不带单位的百分比或数字，例如，`10%` 和 `0.5%`。'
- en: A value of `0%` leaves the element unchanged; a value of `100%` makes the element
    grayscale. Values over `100%` are not allowed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 值为 `0%` 保持元素不变；值为 `100%` 使元素变为灰度。不允许值超过 `100%`。
- en: A value of `0` leaves the element unchanged; a value of `1` makes the element
    grayscale. Values over `1` are not allowed. Also, negative values are not valid
    for either. Decimal values are allowed
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 值为 `0` 保持元素不变；值为 `1` 使元素变为灰度。不允许值超过 `1`。此外，对于两种情况，负值均无效。允许使用小数。
- en: invert()
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: invert()
- en: 'The `invert()` CSS function is used with the `filter` property, and it looks
    like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`invert()` CSS 函数与 `filter` 属性一起使用，其语法如下：'
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Description
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `invert()` function inverts the color of the element. If used in an image,
    it makes the image look like a film negative.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`invert()` 函数反转元素的色彩。如果用于图像，它会使图像看起来像负片。'
- en: A value of `100%` completely inverts the element's color; a value of `0%` leaves
    the element unchanged. Values over `100%` are not allowed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 值为 `100%` 完全反转元素的色彩；值为 `0%` 保持元素不变。不允许值超过 `100%`。
- en: A value of `1` completely inverts the element's color; a value of `0` leaves
    the element unchanged. Values over `1` are not allowed. Also, negative values
    are not valid. Decimal values are allowed for both.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 值为 `1` 完全反转元素的颜色；值为 `0` 保持元素不变。不允许超过 `1` 的值。也不允许负值。两者都允许小数值。
- en: hue-rotate()
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: hue-rotate()
- en: 'The `hue-rotate()` CSS function is used with the `filter` property, and it
    looks like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`hue-rotate()` CSS 函数与 `filter` 属性一起使用，看起来像这样：'
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Description
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `hue-rotate()` function applies a hue rotation to the element. It accepts
    an *angle* value.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`hue-rotate()` 函数应用于元素，进行色调旋转。它接受一个 *角度* 值。'
- en: The angle value defines the degrees around the color wheel that the element
    sample will be modified to.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 角度值定义了元素样本在色轮上修改的度数。
- en: There is no maximum value. However, if the value is larger than `360deg`, the
    rotation will just go around. For example, if we declare `380deg`, that would
    the same as `20deg`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 没有最大值。然而，如果值大于 `360deg`，旋转将只是绕一圈。例如，如果我们声明 `380deg`，那么它等同于 `20deg`。
- en: blur()
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: blur()
- en: 'The `blur()` CSS function is used with the `filter` property, and it looks
    like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`blur()` CSS 函数与 `filter` 属性一起使用，看起来像这样：'
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Description
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `blur()` function gives the *smudge* effect. Values are declared as *length*
    values (`px`, `em`, `in`, `mm`, `cm`, `vw` and so on). The higher the value, the
    more intense the blur effect is, and vice versa.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`blur()` 函数产生 *模糊* 效果。值声明为 *长度* 值（`px`、`em`、`in`、`mm`、`cm`、`vw` 等）。值越高，模糊效果越强烈，反之亦然。'
- en: Percentage and negative values are not allowed, but decimal values are.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 不允许百分比和负值，但允许小数值。
- en: saturate()
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: saturate()
- en: 'The `saturate()` CSS function is used with the `filter` property, and it looks
    like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`saturate()` CSS 函数与 `filter` 属性一起使用，看起来像这样：'
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Description
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: It affects the saturation levels of an element. Values are declared as either
    a *percentage* or a *number* without a unit, for example, `10%` and `0.5%`
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 它会影响元素的饱和度水平。值可以声明为 *百分比* 或不带单位的 *数字*，例如 `10%` 和 `0.5%`。
- en: The default saturation value of an element is `100%`, or `1` if using a unitless
    number.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的默认饱和度值为 `100%`，或使用无单位数字时为 `1`。
- en: A value of `0%` completely desaturates the element (it removes all color leaving
    the element in grayscale); a value of `100%` leaves the element unchanged. Values
    over `100%` are allowed creating a more intense effect.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 值为 `0%` 完全去饱和元素（移除所有颜色，使元素变为灰度）；值为 `100%` 保持元素不变。允许超过 `100%` 的值，以创建更强烈的效果。
- en: A value of `0` completely desaturates the element (it removes all color leaving
    the element in grayscale); a value of `1` leaves the element unchanged. Values
    over `1` are allowed creating a more intense effect.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 值为 `0` 完全去饱和元素（移除所有颜色，使元素变为灰度）；值为 `1` 保持元素不变。允许超过 `1` 的值，以创建更强烈的效果。
- en: sepia()
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: sepia()
- en: 'The `sepia()` CSS function is used with the `filter` property, and it looks
    like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`sepia()` CSS 函数与 `filter` 属性一起使用，看起来像这样：'
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Description
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `sepia()` function converts an element to sepia. Think of a grayscale image
    but in shades of brown.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`sepia()` 函数将元素转换为棕褐色。想象一下灰度图像，但以棕色色调呈现。'
- en: A value of `100%` completely turns the element to sepia; a value of `0%` leaves
    the element unchanged. Values over `100%` are not allowed.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 值为 `100%` 完全将元素转换为棕褐色；值为 `0%` 保持元素不变。不允许超过 `100%` 的值。
- en: A value of `1` completely turns the element to sepia; a value of `0` leaves
    the element unchanged. Values over `1` are not allowed.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 值为 `1` 完全将元素转换为棕褐色；值为 `0` 保持元素不变。不允许超过 `1` 的值。
- en: Also, for both, negative values are not valid.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于两者，负值都是无效的。
- en: Transforms
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变换
- en: CSS transforms have gained such popularity that it's rare not to see some sort
    of transformation in a website nowadays, for example, button shapes, animations,
    and layouts.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 变换已经变得如此流行，以至于现在在网站上几乎看不到没有某种变换的情况，例如按钮形状、动画和布局。
- en: Let's see the transformation CSS functions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看变换 CSS 函数。
- en: matrix()
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: matrix()
- en: 'The `matrix()` CSS function is used with the `transform` property, and it looks
    like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`matrix()` CSS 函数与 `transform` 属性一起使用，看起来像这样：'
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Description
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `matrix()` function is the shorthand for all transformation properties,
    since they can be combined here. This function is used to define a two-dimensional
    transformation matrix.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`matrix()` 函数是所有变换属性的缩写，因为它们可以在这里组合。此函数用于定义二维变换矩阵。'
- en: This function requires a solid understanding of math, but in reality this function
    isn't something to be done by hand. Instead, we can use a tool like Eric Meyer's
    and Aaron Gustafson's *The Matrix Resolutions* ([http://tiny.cc/eric-meyer-matrix](http://tiny.cc/eric-meyer-matrix)).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数需要扎实的数学理解，但在现实中，这个函数并不是手动完成的。相反，我们可以使用像Eric Meyer和Aaron Gustafson的《矩阵解析》这样的工具([http://tiny.cc/eric-meyer-matrix](http://tiny.cc/eric-meyer-matrix))。
- en: 'The explanation of the advanced mathematics of the `matrix()` function are
    beyond the scope of this book. However, for very detailed explanations you can
    refer to any of these two articles:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`matrix()` 函数的高级数学解释超出了本书的范围。然而，对于非常详细的解释，你可以参考以下两篇文章中的任何一篇：'
- en: '*Understanding the CSS Transforms Matrix* by Tiffany Brown ([http://tiny.cc/css-matrix-1](http://tiny.cc/css-matrix-1))'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《理解CSS转换矩阵》由Tiffany Brown撰写([http://tiny.cc/css-matrix-1](http://tiny.cc/css-matrix-1))
- en: '*The CSS3 matrix() Transform for the Mathematically Challenged* by Zoltan Hawryluk
    ([http://tiny.cc/css-matrix-2](http://tiny.cc/css-matrix-2))'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《CSS3矩阵变换对数学挑战者的解释》由Zoltan Hawryluk撰写([http://tiny.cc/css-matrix-2](http://tiny.cc/css-matrix-2))
- en: '**CSS**:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: matrix3d()
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: matrix3d()
- en: 'The `matrix3d()` CSS function is used with the `transform` property, and it
    looks like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`matrix3d()` CSS函数与`transform`属性一起使用，其形式如下：'
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Description
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Just like the two-dimensional `matrix()` function, the `matrix3d()` function
    is a shorthand, but this one is for all transform 3D properties in a 4 x 4 grid.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 就像二维的 `matrix()` 函数一样，`matrix3d()` 函数是一个简写，但这个简写适用于4 x 4网格中所有3D转换属性。
- en: This function requires a solid understanding of math, but in reality this function
    isn't something to be done by hand. Instead, we can use a tool like Eric Meyer
    and Aaron Gustafson's *The Matrix Resolutions* ([http://tiny.cc/eric-meyer-matrix](http://tiny.cc/eric-meyer-matrix)).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数需要扎实的数学理解，但在现实中，这个函数并不是手动完成的。相反，我们可以使用像Eric Meyer和Aaron Gustafson的《矩阵解析》这样的工具([http://tiny.cc/eric-meyer-matrix](http://tiny.cc/eric-meyer-matrix))。
- en: '**CSS**:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: rotate()
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: rotate()
- en: 'The `rotate()` CSS function is used with the `transform` property, and it looks
    like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotate()` CSS函数与`transform`属性一起使用，其形式如下：'
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Description
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `rotate()` function rotates an element around a fixed point in a two-dimensional
    space. It accepts an *angle* value using the `deg`, `grad`, `rad`, or `turn` units.
    The `deg` unit is most commonly used. Negative values are valid.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotate()` 函数在二维空间中围绕一个固定点旋转元素。它接受一个使用`deg`、`grad`、`rad`或`turn`单位的 *角度* 值。`deg`单位最常用。负值是有效的。'
- en: '**CSS**:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: rotate3d()
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: rotate3d()
- en: 'The `rotate3d()` CSS function is used with the `transform` property, and it
    looks like this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotate3d()` CSS函数与`transform`属性一起使用，其形式如下：'
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Description
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `rotate3d()` function rotates an element around a fixed position in a three-dimensional
    plane via the *X*, *Y*, and *Z* axes. It accepts four values: three unitless *number*
    values that correspond to the *X*, *Y*, and *Z* axes, and an *angle* value that
    defines the amount of rotation.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotate3d()` 函数通过 *X*、*Y* 和 *Z* 轴在三维平面上围绕一个固定位置旋转元素。它接受四个值：对应于 *X*、*Y* 和 *Z*
    轴的三个无单位的 *数字* 值，以及一个定义旋转量的 *角度* 值。'
- en: Positive values rotate the element clockwise in the corresponding axis. Negative
    values rotate the element counter-clockwise.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正值在相应轴上按顺时针方向旋转元素。负值按逆时针方向旋转元素。
- en: '**CSS**:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: rotateX()
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: rotateX()
- en: 'The `rotateX()` CSS function is used with the `transform` property, and it
    looks like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotateX()` CSS函数与`transform`属性一起使用，其形式如下：'
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The previous code is similar to the following code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码与以下代码类似：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Description
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `rotateX()` function rotates an element on the *X* axes in a three-dimensional
    plane. It accepts an *angle* value.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotateX()` 函数在三维平面上沿 *X* 轴旋转元素。它接受一个 *角度* 值。'
- en: Positive values rotate the element clockwise. Negative values rotate the element
    counter-clockwise.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 正值按顺时针方向旋转元素。负值按逆时针方向旋转元素。
- en: '**CSS**:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: rotateY()
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: rotateY()
- en: 'The `rotateY()` CSS function is used with the `transform` property, and it
    looks like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotateY()` CSS函数与`transform`属性一起使用，其形式如下：'
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The previous line is the same as this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的行与这一行相同：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Description
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `rotateY()` function rotates an element on the *Y* axes in a three-dimensional
    plane. It accepts an *angle* value.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotateY()` 函数在三维平面上沿 *Y* 轴旋转元素。它接受一个 *角度* 值。'
- en: Positive values rotate the element clockwise. Negative values rotate the element
    counter-clockwise.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 正值按顺时针方向旋转元素。负值按逆时针方向旋转元素。
- en: '**CSS**:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: rotateZ()
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: rotateZ()
- en: 'The `rotateY()` CSS function is used with the `transform` property, and it
    looks like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotateY()` CSS 函数与 `transform` 属性一起使用，其形式如下：'
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Which is the same as this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这与以下内容相同：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Description
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `rotateY()` function rotates an element on the *Z* axes in a three-dimensional
    plane. It accepts an *angle* value.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotateY()` 函数用于在三维平面上沿 *Z* 轴旋转元素。它接受一个 *角度* 值。'
- en: Positive values rotate the element clockwise. Negative values rotate the element
    counter-clockwise.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 正值会使元素顺时针旋转。负值会使元素逆时针旋转。
- en: '**CSS**:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: scale()
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: scale()
- en: 'The `scale()` CSS function is used with the `transform` property, and it looks
    like this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`scale()` CSS 函数与 `transform` 属性一起使用，其形式如下：'
- en: '[PRE27]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Or:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Description
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `scale()` function changes the size of an element in a two-dimensional plane
    to make it larger or smaller. It supports one or two unitless *number* values,
    where the second value is optional. The number indicates the number of times the
    element should be scaled. For example, a value of `2` means the element is scaled
    (enlarged) `200%`; a value of `0.5` means the element should be scaled (reduced)
    to `50%`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`scale()` 函数用于在二维平面上改变元素的大小，使其变大或变小。它支持一个或两个无单位的数值，其中第二个值是可选的。数值表示元素应该缩放多少次。例如，值为
    `2` 表示元素被缩放（放大）到 `200%`；值为 `0.5` 表示元素应该缩放（缩小）到 `50%`。'
- en: The first value represents a horizontal scale and the second a vertical scale.
    If a single value is declared, it means that both orientations will use the same
    value.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个值代表水平缩放，第二个值代表垂直缩放。如果只声明一个值，则表示两个方向将使用相同的值。
- en: Negative values are allowed. However, when negative values are used, the element
    is flipped.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 允许使用负值。然而，当使用负值时，元素会被翻转。
- en: Tip
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When an element is scaled, it *does not* affect the layout; it will simply overlap
    or appear below other elements depending on the source order.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当元素被缩放时，它不会影响布局；它将根据源顺序简单地重叠或出现在其他元素下方。
- en: '**CSS**:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE29]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: scale3d()
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: scale3d()
- en: 'The `scaled3d()` CSS function is used with the `transform` property, and it
    looks like this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`scaled3d()` CSS 函数与 `transform` 属性一起使用，其形式如下：'
- en: '[PRE30]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Description
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `scaled3d()` function changes the size of an element in a three-dimensional
    plane via the *X*, *Y*, and *Z* axes to make it larger or smaller.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`scaled3d()` 函数通过 *X*、*Y* 和 *Z* 轴改变元素在三维平面上的大小，使其变大或变小。'
- en: It supports three unitless *number* values which are required. Negative values
    are allowed. However, when negative values are used, the element is flipped.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持三个无单位的数值，这些数值是必需的。允许使用负值。然而，当使用负值时，元素会被翻转。
- en: '**CSS**:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE31]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: scaleX()
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: scaleX()
- en: 'The `scaleX()` CSS function is used with the `transform` property, and it looks
    like this:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`scaleX()` CSS 函数与 `transform` 属性一起使用，其形式如下：'
- en: '[PRE32]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Description
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `scaleX()` function changes the size of an element on the *X* axes in a
    two-dimensional plane. It supports a unitless *number* value.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`scaleX()` 函数用于在二维平面上沿 *X* 轴改变元素的大小。它支持一个无单位的数值。'
- en: Negative values are allowed. However, the element is flipped when negative values
    are used.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 允许使用负值。然而，当使用负值时，元素会被翻转。
- en: '**CSS**:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE33]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: scaleY()
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: scaleY()
- en: 'The `scaleY()` CSS function is used with the `transform` property, and it looks
    like this:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`scaleY()` CSS 函数与 `transform` 属性一起使用，其形式如下：'
- en: '[PRE34]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Description
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `scaleY()` function changes the size of an element on the *Y* axes in a
    two-dimensional plane. It supports a unitless *number* value.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`scaleY()` 函数用于在二维平面上沿 *Y* 轴改变元素的大小。它支持一个无单位的数值。'
- en: Negative values are allowed. However, the element is flipped when negative values
    are used.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 允许使用负值。然而，当使用负值时，元素会被翻转。
- en: '**CSS**:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE35]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: scaleZ()
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: scaleZ()
- en: 'The `scaleZ()` CSS function is used with the `transform` property, and it looks
    like this:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`scaleZ()` CSS 函数与 `transform` 属性一起使用，其形式如下：'
- en: '[PRE36]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Description
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `scaleZ()` function changes the size of an element on the *Y* axes in a
    two-dimensional plane. It supports a unitless *number* value.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`scaleZ()` 函数用于在二维平面上沿 *Y* 轴改变元素的大小。它支持一个无单位的数值。'
- en: Negative values are allowed. However, the element is flipped when negative values
    are used.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 允许使用负值。然而，当使用负值时，元素会被翻转。
- en: '**CSS**:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE37]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: skew()
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: skew()
- en: 'The `skew()` CSS function is used with the `transform` property, and it looks
    like this:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`skew()` CSS 函数与 `transform` 属性一起使用，其形式如下：'
- en: '[PRE38]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Or you can also use the following code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您也可以使用以下代码：
- en: '[PRE39]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Description
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `skew()` function skews or *tilts* an element on the *X* axes or both the
    *X* and the *Y* axes on a two-dimensional plane. For example, a parallelogram
    is a skewed rectangle.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`skew()` 函数在二维平面上对元素进行倾斜或倾斜 *X* 轴或 *X* 和 *Y* 轴。例如，平行四边形是一个倾斜的矩形。'
- en: 'It supports one or two *angle* values: the first one corresponds to the *X*
    axes and the second one to the *Y* axes. If only one value is declared, the element
    is skewed only on the *X* axes. Negative values are allowed.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持一个或两个角度值：第一个对应于 *X* 轴，第二个对应于 *Y* 轴。如果只声明了一个值，则元素仅在 *X* 轴上倾斜。允许使用负值。
- en: It's recommended that you use either the `skewX()` or `skewY()` functions rather
    than `skew()`, because `skew()` has been removed from the spec (although most
    browsers still support it).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您使用 `skewX()` 或 `skewY()` 函数而不是 `skew()`，因为 `skew()` 已经从规范中移除（尽管大多数浏览器仍然支持它）。
- en: '**CSS**:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE40]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: skewX()
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: skewX()
- en: 'The `@skewX()` CSS function is used with the `transform` property, and it looks
    like this:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`@skewX()` CSS 函数与 `transform` 属性一起使用，看起来像这样：'
- en: '[PRE41]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Description
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `@skewX()` function skews or *tilts* an element on the *X* axes on a two-dimensional
    plane.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`@skewX()` 函数在二维平面上对元素进行倾斜或倾斜 *X* 轴。'
- en: It supports one *angle* value. Negative values are allowed.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持一个角度值。允许使用负值。
- en: '**CSS**:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE42]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: skewY()
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: skewY()
- en: 'The `@skewY()` CSS function is used with the `transform` property, and it looks
    like this:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`@skewY()` CSS 函数与 `transform` 属性一起使用，看起来像这样：'
- en: '[PRE43]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Description
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `@skewY()` function skews or *tilts* an element on the *Y* axes in a two-dimensional
    plane.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`@skewY()` 函数在二维平面上对元素进行倾斜或倾斜 *Y* 轴。'
- en: It supports one *angle* value. Negative values are allowed.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持一个角度值。允许使用负值。
- en: '**CSS**:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE44]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: steps()
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: steps()
- en: 'The `steps()` timing function is used with the `transition-timing-function`
    or the `animation-timing-function` properties, and it looks like this:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`steps()` 时间函数与 `transition-timing-function` 或 `animation-timing-function`
    属性一起使用，看起来像这样：'
- en: '[PRE45]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Description
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `steps()` timing function divides the transition or the animation into intervals
    of equal sizes. We can also specify if the steps of transition or animation happen
    at the `start` or the `end` of the interval. The `end` value is the default in
    case no argument is declared.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`steps()` 时间函数将过渡或动画分成相等大小的间隔。我们还可以指定过渡或动画的步骤是在间隔的 `start` 还是 `end` 处发生。如果没有声明参数，则默认为
    `end` 值。'
- en: It supports one *numeric* value, or one *numeric* value and an optional value
    of either `start` or `end`.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持一个数值值，或者一个数值值和一个可选的 `start` 或 `end` 值。
- en: 'The best way to understand how `start` or `end` works is with an example: the
    animation will begin right away when using `start`, and it will be delayed a bit
    when using `end`.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个例子来理解 `start` 或 `end` 的工作方式是最好的：使用 `start` 时，动画将立即开始，使用 `end` 时，将稍微延迟。
- en: '**CSS**:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE46]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: translate()
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: translate()
- en: 'The `translate()` CSS function is used with the `transform` property, and it
    looks like this:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`translate()` CSS 函数与 `transform` 属性一起使用，看起来像这样：'
- en: '[PRE47]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Or like this:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 或者像这样：
- en: '[PRE48]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Description
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `translate()` function affects the position of an element on the *X* axes
    or both the *X* and the *Y* axes on a two-dimensional plane.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`translate()` 函数影响元素在二维平面上的位置，在 *X* 轴或 *X* 和 *Y* 轴上。'
- en: It supports both *length* and *percentage* values. Negative values are allowed.
    It supports one or two *length* and *percentage* values; the first one corresponds
    to the X-axis and the second one to the Y-axis. If only one value is declared,
    the element is moved only on the X-axis. Negative values are allowed.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持长度和百分比值。允许使用负值。它支持一个或两个长度和百分比值；第一个对应于 X 轴，第二个对应于 Y 轴。如果只声明了一个值，则元素仅在 X 轴上移动。允许使用负值。
- en: '**CSS:**'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS:**'
- en: '[PRE49]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: translate3d()
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: translate3d()
- en: 'The `translate3d()` CSS function is used with the `transform` property and
    the `perspective` function, and it looks like this:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`translate3d()` CSS 函数与 `transform` 属性和 `perspective` 函数一起使用，看起来像这样：'
- en: '[PRE50]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Description
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `translate3d()` function is used to move an element on the *X*, *Y*, and
    *Z* axes on a three-dimensional plane.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`translate3d()` 函数用于在三维平面上沿 *X*、*Y* 和 *Z* 轴移动元素。'
- en: It supports both *length* and *percentage* values. Negative values are allowed.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持长度和百分比值。允许使用负值。
- en: In order to be able to see this function work, we need to give the element in
    question a three-dimensional plane with the `perspective` function, otherwise
    the `translate3d()` declaration will have no effect.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够看到这个函数的工作效果，我们需要给相关元素使用`perspective`函数创建一个三维平面，否则`translate3d()`声明将没有任何效果。
- en: '**CSS**:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE51]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: translateX()
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: translateX()
- en: 'The `translateX()` CSS function is used with the `transform` property, and
    it looks like this:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`translateX()` CSS函数与`transform`属性一起使用，其语法如下：'
- en: '[PRE52]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Description
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `translateX()` function is used to move an element on the *X* axes in a
    two-dimensional plane.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`translateX()`函数用于在二维平面上沿*X*轴移动元素。'
- en: It supports both *length* and *percentage* values. Negative values are allowed.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持长度和百分比值。允许使用负值。
- en: '**CSS**:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE53]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: translateY()
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: translateY()
- en: 'The `translateY()` CSS function is used with the `transform` property, and
    it looks like this:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`translateY()` CSS函数与`transform`属性一起使用，其语法如下：'
- en: '[PRE54]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Description
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This is used to move an element on the *Y* axes in a two-dimensional plane.
    It supports both *length* and *percentage* values. Negative values are allowed.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于在二维平面上沿*Y*轴移动元素。它支持长度和百分比值。允许使用负值。
- en: '**CSS**:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE55]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: translateZ()
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: translateZ()
- en: 'The `translateZ()` CSS function is used with the `transform` property and with
    the `perspective` function, and it looks like this:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`translateZ()` CSS函数与`transform`属性和`perspective`函数一起使用，其语法如下：'
- en: '[PRE56]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Description
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This is used to move an element on the *Z* axes on a three-dimensional plane.
    It supports both *length* and *percentage* values. Negative values are allowed.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于在三维平面上沿*Z*轴移动元素。它支持长度和百分比值。允许使用负值。
- en: In order to be able to see this function work, we need to give the element in
    question a three-dimensional plane with the `perspective` function; otherwise,
    the `translateZ()` declaration will have no effect.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够看到这个函数的工作效果，我们需要给相关元素使用`perspective`函数创建一个三维平面；否则，`translateZ()`声明将没有任何效果。
- en: '**CSS**:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE57]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Colors
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 颜色
- en: Colors can make or break a design, there are many ways to go about creating
    palettes and all that good stuff.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色可以成就或毁掉一个设计，有很多方法可以创建调色板和所有那些好东西。
- en: Let's take a look at *HSL(a)* and *RGB(a)*.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看*HSL(a)*和*RGB(a)*。
- en: hsl() and hsla()
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: hsl()和hsla()
- en: 'The `hsl()` and `hsla()` CSS functional notations set the color in HSL/HSLa
    formats, and they look like this:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`hsl()`和`hsla()` CSS函数表示法以HSL/HSLa格式设置颜色，其语法如下：'
- en: '[PRE58]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Description
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: '**HSL** stands for **Hue, Saturation, and Lightness** (or Luminance). The **a**
    stands for **Alpha**, which is the alpha channel, with which we declare the transparency
    of the color.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '**HSL**代表**色调、饱和度和亮度**（或亮度）。**a**代表**Alpha**，它是alpha通道，我们用它来声明颜色的透明度。'
- en: The `hsl()` function supports three or four values separated by commas. The
    first value is the hue, which is the base color. This is declared with a unitless
    *number*. This number represents an angle in degrees (*10 = 10º*) in the color
    wheel from 0 to 360\. So, 0 and 360 are Red, 90 is Yellow-Green, 180 is Cyan,
    and 270 is Blue-Magenta.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`hsl()`函数支持用逗号分隔的三个或四个值。第一个值是色调，它是基础颜色。这个值以无单位的*数字*表示。这个数字代表在色轮上的角度（*10 = 10º*），范围从0到360。因此，0和360是红色，90是黄绿色，180是青色，270是蓝紫色。'
- en: The second value is the saturation, which is basically the amount of the base
    color. This is declared with a *percentage* value. `0%` means there is no base
    color at all and it shows gray. `100%` means the base color is full.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个值是饱和度，这基本上是基础颜色的量。这个值以百分比表示。`0%`表示完全没有基础颜色，显示灰色。`100%`表示基础颜色是完整的。
- en: The third value is the lightness, also known as luminance. This is basically
    the brightness of the base color. `0%` means there is no lightness, hence it's
    black. `100%` is full lightness, hence it looks white. `50%` means the base color
    is full.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个值是亮度，也称为亮度。这基本上是基础颜色的亮度。`0%`表示没有亮度，因此是黑色。`100%`表示完全亮度，因此看起来是白色。`50%`表示基础颜色是完整的。
- en: The fourth value is the alpha channel. This is the transparency of the color.
    It's declared with a unitless *numeric* decimal value from `0` to `1`. Complete
    transparent is `0`, and `1` is fully opaque.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个值是alpha通道。这是颜色的透明度。它以无单位的*数字*小数形式从`0`到`1`声明。完全透明是`0`，`1`是完全不透明。
- en: The great advantage that HSL color naming system has over RGB is that it is
    more intuitive. Once we choose a base color, we can easily create a palette based
    on that color by only changing the saturation and lightness values.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: HSL颜色命名系统相对于RGB的一个巨大优势是它更直观。一旦我们选择了一个基础颜色，我们就可以通过只改变饱和度和亮度值来轻松地创建基于该颜色的调色板。
- en: 'You can see the HSL color wheel in CodePen: [http://tiny.cc/hsl-color-wheel](http://tiny.cc/hsl-color-wheel)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在CodePen中看到HSL颜色轮：[http://tiny.cc/hsl-color-wheel](http://tiny.cc/hsl-color-wheel)
- en: '**CSS**:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE59]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: rgb() and rgba()
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`rgb()`和`rgba()`'
- en: 'The `rgb()` and `rgba()` CSS functional notations set the color in RGB/RGBa
    formats, and they look like this:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`rgb()`和`rgba()` CSS功能符号设置RGB/RGBa格式的颜色，它们看起来是这样的：'
- en: '[PRE60]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Description
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: '**RGB** stands for **Red, Green and Blue**. The *a* stands for **Alpha**, which
    is the alpha channel with which we declare the transparency of the color.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '**RGB**代表**红色、绿色和蓝色**。*a*代表**Alpha**，这是我们声明颜色透明度的alpha通道。'
- en: This supports three or four unitless *numeric* values separated by commas, or
    three *percentage* values and one unitless *numeric* value. The last value is
    for the alpha channel.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 这支持三个或四个由逗号分隔的无单位*数值*，或者三个*百分比*值和一个无单位*数值*。最后一个值用于alpha通道。
- en: The *numeric* values range from 0 to 255\. The *percentage* values range from
    0% to 100%. For example, we can represent the color green as `rgb(0, 255, 0)`
    or `rgb(0, 100%, 0)`.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '*数值*的范围是0到255。*百分比*值的范围是0%到100%。例如，我们可以将绿色表示为`rgb(0, 255, 0)`或`rgb(0, 100%,
    0)`。'
- en: As I just mentioned, the fourth value is the alpha channel. This is the transparency
    of the color. It's declared with a unitless *numeric* decimal value from `0` to
    `1`. Complete transparent is `0`, and `1` is fully opaque.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我刚才提到的，第四个值是alpha通道。这是颜色的透明度。它用一个无单位的*数值*十进制值从`0`到`1`声明。完全透明是`0`，`1`是完全不透明。
- en: '**CSS**:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE61]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Gradients
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渐变
- en: For those who didn't know, CSS gradients are actually images. But these images
    are created by the browser the moment it sees a gradient color declared. The thing
    with these images is that they are created on the fly and do not cause any HTTP
    requests.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些不知道的人来说，CSS渐变实际上是图像。但这些图像是在浏览器看到声明渐变颜色时由浏览器创建的。这些图像的特点是它们是即时创建的，不会引起任何HTTP请求。
- en: CSS gradients are so powerful that we can not only create gradients in any direction
    and various shapes, but we can also create amazing patterns.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: CSS渐变功能非常强大，我们不仅可以创建任何方向和各种形状的渐变，还可以创建令人惊叹的图案。
- en: 'With this being said, Lea Verou has an amazing library of CSS patterns created
    with gradients everyone reading this book should bookmark. Check it out here:
    [http://tiny.cc/leave-verou-css3-patterns](http://tiny.cc/leave-verou-css3-patterns)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，Lea Verou有一个用渐变创建的CSS图案库，每个阅读这本书的人都应该将其收藏。在这里查看：[http://tiny.cc/leave-verou-css3-patterns](http://tiny.cc/leave-verou-css3-patterns)
- en: Let's see how to create gradients in CSS.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在CSS中创建渐变。
- en: linear-gradient()
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`linear-gradient()`'
- en: 'The `linear-gradient()` CSS function creates a gradient that transitions from
    one color to another in a *line*. It looks like this in its simplest form:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`linear-gradient()` CSS函数创建一个从一种颜色过渡到另一种颜色的*线*形渐变。它的最简单形式如下所示：'
- en: '[PRE62]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Description
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'We can create linear gradients that obey practically any direction called the
    *gradient line*: left to right, right to left, top to bottom, bottom to top, diagonal,
    and at any degree in a 360º radius.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建遵循任何方向的线性渐变，称为*渐变线*：从左到右，从右到左，从上到下，从下到上，对角线，以及在任何360º半径内的任何角度。
- en: If no direction for the gradient line is specified, the default value is from
    top to bottom.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有指定渐变线的方向，则默认值是从上到下。
- en: Any amount of colors can be declared in the gradient line. Technically speaking,
    there's no limit, but from a design standpoint we should always try to keep it
    simple. At least two color values are required.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 渐变线中可以声明任意数量的颜色。从技术上来说，没有限制，但从设计角度来看，我们应始终尝试保持简单。至少需要两个颜色值。
- en: 'The `linear-gradient()` function supports all color modes: `HEX`, `RGB`, `RGBa`,
    `HSL`, `HSLa`, and *color name*.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`linear-gradient()`函数支持所有颜色模式：`HEX`，`RGB`，`RGBa`，`HSL`，`HSLa`，和*颜色名称*。'
- en: Direction
  id: totrans-295
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 方向
- en: 'We can also declare the direction of the gradient line via an *angle* value
    or four *keyword* values: `to top`, `to` `bottom`, `to left`, and `to right`.'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过一个*角度*值或四个*关键字*值来声明渐变线的方向：`to top`，`to bottom`，`to left`，和`to right`。
- en: '`to top`: The gradient will start at the bottom and end at the top'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to top`：渐变将从底部开始，到顶部结束'
- en: '`to bottom`: The gradient will start at the top and end at the bottom'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to bottom`: 渐变将从顶部开始，并在底部结束'
- en: '`to left`: The gradient will start at the right and end at the left'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to left`: 渐变将从右侧开始，并在左侧结束'
- en: '`to right`: The gradient will start at the left and end at the right'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to right`: 渐变将从左侧开始，并在右侧结束'
- en: The *angle* value is defined at the beginning of the declaration and can range
    from 0 to 360\. Larger values wrap around the circumference.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '*角度* 值在声明的开始处定义，范围从 0 到 360。较大的值会绕圆周循环。'
- en: Color stops
  id: totrans-302
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 颜色停止
- en: We can also define where a color *stops* in the gradient. A color stop is a
    combination of a *color* value followed by a *stop position*, which is optional.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以定义颜色在渐变中的停止位置。颜色停止是颜色值和 *停止位置* 的组合，其中停止位置是可选的。
- en: Stop positions can be declared in any *length* value or a *percentage* value
    and go after the color value.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 停止位置可以用任何 *长度* 值或 *百分比* 值声明，并跟在颜色值之后。
- en: Tip
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Percentage values are more commonly used due to the fact that they can scale
    with the element. Pixel values are fine too, but they just don't have the same
    versatility as relative units.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 百分比值更常用，因为它们可以与元素一起缩放。像素值也可以，但它们没有相对单位那样灵活。
- en: Color stops are very flexible because they allow us to make solid transitions
    between colors. This is great for making patterns or other types of graphics that
    require solid color transitions, like country flags.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色停止非常灵活，因为它们允许我们在颜色之间创建平滑的过渡。这对于制作需要平滑颜色过渡的图案或其他类型的图形非常有用，例如国旗。
- en: When the *stop positions* aren't declared, the browser distributes the gradient
    colors evenly along the gradient line.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有声明 *停止位置* 时，浏览器会在渐变线上均匀地分布渐变颜色。
- en: '**CSS**:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE63]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: radial-gradient()
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: radial-gradient()
- en: 'The `radial-gradient()` CSS function creates a gradient that transitions from
    one color to another but in circular or elliptical form, and it looks like this
    in its simplest form:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 函数 `radial-gradient()` 创建的渐变从一种颜色过渡到另一种颜色，但以圆形或椭圆形的形式，其最简单的形式如下：
- en: '[PRE64]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Description
  id: totrans-314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'There are three parts to a radial gradient: its *center*, its *ending shape*,
    and *color stops*.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 径向渐变有三个部分：其 *中心*、其 *结束形状* 和 *颜色停止*。
- en: The *center* defines the location in the element from which the radial gradient
    will start; a radial gradient doesn't have to start at the center of an element.
    The *ending shape* defines if the radial gradient is going to be a circle or an
    ellipse. The ellipse shape is the default shape if the `circle` keyword isn't
    declared. The *color stops* are the colors that make the gradient and, if declared,
    any *stop positions* which are optional. Remember that stop positions can be declared
    in any *length* value or a *percentage* value and go after the color value.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '*中心* 定义了从元素中开始径向渐变的点；径向渐变不必从元素的中心开始。*结束形状* 定义了径向渐变是圆形还是椭圆形。如果没有声明 `circle`
    关键字，则默认形状是椭圆形。*颜色停止* 是构成渐变的颜色，如果声明了，任何可选的 *停止位置*。记住，停止位置可以用任何 *长度* 值或 *百分比* 值声明，并跟在颜色值之后。'
- en: At least two colors are required to make a radial gradient, or *any* gradient
    for that matter.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 至少需要两种颜色来创建径向渐变，或者任何类型的渐变。
- en: Position
  id: totrans-318
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 位置
- en: We can define where the center of the radial gradient is located within the
    element. As I mentioned before, the default position is at the center of the element.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义径向渐变的中心在元素内的位置。正如我之前提到的，默认位置是在元素的中心。
- en: To declare a specific position we use the keyword `at` and define the *X* and
    *Y* axes coordinates. This value should go before any color value is declared
    but after the *ending shape*.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明一个特定位置，我们使用关键字 `at` 并定义 *X* 和 *Y* 轴坐标。这个值应该在声明任何颜色值之前，但在 *结束形状* 之后。
- en: The *X* and *Y* axes coordinates can be declared in any *length* value, a *percentage*
    value or any of the keyword values, `top`, `right`, `bottom`, and `left`. This
    is pretty much the same way we declare the `background-position` on an element.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '*X* 和 *Y* 轴坐标可以用任何 *长度* 值、*百分比* 值或任何关键字值（`top`、`right`、`bottom` 和 `left`）声明。这基本上与我们声明元素上的
    `background-position` 的方式相同。'
- en: The position requires an *ending shape* to be declared, either `circle` or `ellipse`;
    otherwise, the declaration is invalid.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 位置需要声明一个 *结束形状*，可以是 `circle` 或 `ellipse`；否则，声明无效。
- en: Sizing
  id: totrans-323
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 尺寸
- en: We can also change the size of the radial gradient. The *size* of the gradient
    is declared before the *position* but it can go before or after the *ending shape*.
    It can take one or two values for *width* and *height*. If one value is declared
    it will be used for both.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以改变径向渐变的大小。渐变的*大小*在*位置*之前声明，但它可以在*结束形状*之前或之后。它可以接受一个或两个值，用于*宽度*和*高度*。如果声明了一个值，它将用于两者。
- en: 'The size can be defined with a *length* value, a *percentage* value, or one
    of four *keyword* *values*: `closest-corner`, `farthest-corner`, `closest-side`,
    and `farthest-side`.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 大小可以用*长度*值、*百分比*值或四个*关键字*值之一来定义：`closest-corner`、`farthest-corner`、`closest-side`和`farthest-side`。
- en: '`closest-corner`: The size of the gradient depends on the corner that is closest
    to the center.'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`closest-corner`：渐变的大小取决于离中心最近的角。'
- en: '`farthest-corner`: The size of the gradient depends on the corner that is farthest
    from the center.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`farthest-corner`：渐变的大小取决于离中心最远的角。'
- en: '`closest-side`: The size of the gradient depends on the side that is closest
    to the center.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`closest-side`：渐变的大小取决于离中心最近的边。'
- en: '`farthest-side`: The size of the gradient depends on the side that is farthest
    from the center.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`farthest-side`：渐变的大小取决于离中心最远的边。'
- en: '**CSS**:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**：'
- en: '[PRE65]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: repeating-linear-gradient()
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: repeating-linear-gradient()
- en: 'The `repeating-linear-gradient()` CSS function is used to repeat a gradient
    image, and it looks like this:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`repeating-linear-gradient()` CSS函数用于重复渐变图像，其外观如下：'
- en: '[PRE66]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Description
  id: totrans-335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Description
- en: The `repeating-linear-gradient()` function uses the same syntax and values as
    the `linear-gradient()` CSS function, so please refer to that function for a detailed
    explanation of all the available values.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`repeating-linear-gradient()`函数使用与`linear-gradient()` CSS函数相同的语法和值，因此请参阅该函数以获取所有可用值的详细说明。'
- en: In order for the `repeating-linear-gradient()` function to work, we need to
    define *stop positions* on the colors. Otherwise, the repeated gradient will look
    as if we're just using `linear-gradient()`.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`repeating-linear-gradient()`函数正常工作，我们需要在颜色上定义*停止位置*。否则，重复的渐变看起来就像我们只是使用了`linear-gradient()`。
- en: '**CSS**:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**：'
- en: '[PRE67]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: repeating-radial-gradient()
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: repeating-radial-gradient()
- en: 'The `repeating-radial-gradient()` CSS function is used to repeat a gradient
    image, and it looks like this:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`repeating-radial-gradient()` CSS函数用于重复渐变图像，其外观如下：'
- en: '[PRE68]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Description
  id: totrans-343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Description
- en: The `repeating-radial-gradient()` function uses the same syntax and values as
    the `radial-gradient()` CSS function, so please refer to that function for a detailed
    explanation of all the available values.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`repeating-linear-gradient()`函数使用与`radial-gradient()` CSS函数相同的语法和值，因此请参阅该函数以获取所有可用值的详细说明。'
- en: In order for the `repeating-radial-gradient()` function to work, we need to
    define *stop positions* on the colors. Otherwise, the repeated gradient will look
    as if we're just using `radial-gradient()`.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`repeating-radial-gradient()`函数正常工作，我们需要在颜色上定义*停止位置*。否则，重复的渐变看起来就像我们只是使用了`radial-gradient()`。
- en: '**CSS**:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**：'
- en: '[PRE69]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Values
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Values
- en: The following CSS functions allow us to declare many custom values for various
    results. Let's check them out.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 以下CSS函数允许我们为各种结果声明许多自定义值。让我们来看看它们。
- en: attr()
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: attr()
- en: 'The `attr()` CSS function allows us to target the value of any HTML attribute
    and use in CSS, and it looks like this:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`attr()` CSS函数允许我们针对任何HTML属性的值并在CSS中使用它，其外观如下：'
- en: '[PRE70]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Description
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Description
- en: The term **attr** is the abbreviation of the word **attribute**. This CSS function
    targets an *HTML attribute* and uses its value to accomplish different things
    via CSS.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 术语**attr**是单词**attribute**的缩写。这个CSS函数针对一个*HTML属性*，并使用其值通过CSS完成不同的事情。
- en: In CSS, the `attr()` function is most commonly used with the `content` property
    together with the `:after` CSS pseudo-element to inject content into the document,
    but in reality the `attr()` function can be used with *any* other CSS property.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中，`attr()`函数最常与`content`属性以及`:after` CSS伪元素一起使用，以将内容注入文档中，但事实上，`attr()`函数可以与*任何*其他CSS属性一起使用。
- en: In HTML, it's very common to use the `attr()` CSS function to target the HTML5
    `data-` or the `href` attributes. The `attr()` function can be used to target
    *any* HTML attribute.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML中，使用`attr()` CSS函数针对HTML5的`data-`或`href`属性是非常常见的。`attr()`函数可以用来针对*任何*HTML属性。
- en: In CSS3 the syntax of the `attr()` CSS function is a bit different. It accepts
    not only an attribute value but it also accepts two more arguments, a *type-or-unit*
    argument and an *attribute fallback* argument. The *type-or-unit* argument is
    optional. It tells the browser which type of attribute is in order to interpret
    its value. The *attribute fallback* argument defines a fallback value in case
    something goes wrong during the parsing of the main attribute of the element.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS3中，`attr()` CSS函数的语法略有不同。它不仅接受属性值，还接受两个额外的参数，即*类型或单位*参数和*属性回退*参数。*类型或单位*参数是可选的。它告诉浏览器哪种类型的属性正在使用，以便解释其值。*属性回退*参数定义了在解析元素的主要属性时出现错误的情况下的回退值。
- en: Tip
  id: totrans-358
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The new CSS3 syntax that includes the *type-or-unit* and the *attribute fallback*
    arguments is not stable and it may potentially be dropped from the spec. Do your
    research before deciding to use the new syntax.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 新的CSS3语法包括*类型或单位*和*属性回退*参数，尚不稳定，并且可能从规范中删除。在决定使用新语法之前，请做好研究。
- en: A good practice for printing web documents is to print the URL next to the linked
    element. Another common practice is to use a combination of the `attr()` CSS function
    with the `content` property and the HTML5 `data-` attribute in responsive tables
    to inject the content of a cell (usually a heading) next to their corresponding
    value via CSS, thus saving space.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 打印网页文档的一个良好实践是将URL打印在链接元素旁边。另一个常见做法是结合使用`attr()` CSS函数、`content`属性和HTML5的`data-`属性在响应式表格中注入单元格（通常是标题）的内容，从而节省空间。
- en: '**CSS**:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE71]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Responsive Table
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式表格
- en: When the viewport width is 640px or less, the table will become responsive.
    This is accomplished by combining the use of the `attr()` CSS function with the
    `content` property and the HTML5 `data-` attribute.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 当视口宽度为640像素或更小时，表格将变为响应式。这是通过结合使用`attr()` CSS函数、`content`属性和HTML5的`data-`属性来实现的。
- en: '**HTML**:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTML**:'
- en: '[PRE72]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '**CSS**:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE73]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: calc()
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: calc()
- en: 'The `calc()` CSS function allows us to perform mathematical calculations, and
    it looks like this:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`calc()` CSS函数允许我们执行数学计算，其格式如下：'
- en: '[PRE74]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Or like this:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 或者像这样：
- en: '[PRE75]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Description
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: We can perform those calculations with addition (`+`), subtraction (`-`), division
    (`/`), and multiplication (`*`). It's commonly used to calculate relative values
    for `width` and `height`, but as you saw, we can use this function with any CSS
    property.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用加法（`+`）、减法（`-`）、除法（`/`）和乘法（`*`）来进行这些计算。它通常用于计算`width`和`height`的相对值，但如您所见，我们可以使用此函数与任何CSS属性一起使用。
- en: A few things to consider are that a space is required before and after the addition
    (`+`) and subtraction (`-`) operators, otherwise a subtraction, for example, can
    be considered to have a negative value, for example, `calc(2.5em -5px)`. This
    `calc()` function is invalid since the second value is considered a negative value.
    Space is required after the subtraction (`-`) operator. However, the division
    (`/`) and multiplication (`*`) operators don't require the spaces.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 需要考虑的一些事情是，在加法（`+`）和减法（`-`）运算符前后都需要有空格，否则，例如，减法可以被认为是具有负值，例如`calc(2.5em -5px)`。这个`calc()`函数是无效的，因为第二个值被认为是负值。减法运算符后面需要有空格。然而，除法（`/`）和乘法（`*`）运算符不需要空格。
- en: Now, when doing a division (`/`), the value on the right *must* be a *number*
    value. For a multiplication (`*`) operation, at least one of the values *must*
    be *number* value as well.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在进行除法（`/`）时，右侧的值必须是*数字*值。对于乘法（`*`）操作，至少有一个值必须是*数字*值。
- en: '**CSS**:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE76]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: url()
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: url()
- en: 'The `url()` CSS function is used to point to an external resource, and it looks
    like this:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`url()` CSS函数用于指向外部资源，其格式如下：'
- en: '[PRE77]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Description
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `url()` function uses the URL value to point or link to a resource. **URL**
    stands for **Uniform Resource Locator**.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`url()`函数使用URL值来指向或链接到资源。**URL**代表**统一资源定位符**。'
- en: This function is commonly used with the `background` or `background-image` properties,
    but it can be used with any of the properties that take a URL as a value, like
    `@font-face`, `list-style`, `cursor`, and so on.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数通常与`background`或`background-image`属性一起使用，但可以与任何接受URL作为值的属性一起使用，如`@font-face`、`list-style`、`cursor`等。
- en: The URL can be quoted using single (`'` `'`) or double quotes (`"` `"`), or
    not quoted at all. However, there can't be any combinations of quote styles such
    as starting with a single quote and ending with a double quote.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: URL 可以用单引号（`'` `'`）或双引号（`"` `"`）引用，或者根本不引用。然而，不能有引号样式的组合，例如以单引号开头并以双引号结尾。
- en: Also, double quotes inside a URL that uses single quotes and single quotes inside
    a URL that uses double quotes *must* be escaped with a backslash (`\`). Otherwise,
    it will break the URL.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在单引号使用的URL中的双引号和双引号使用的URL中的单引号 *必须* 用反斜杠（`\`）转义。否则，它将破坏URL。
- en: The URL pointing to the resource can be either absolute or relative. If it's
    relative, it's relative to the location of the style sheet in the folder structure,
    not the webpage itself.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 指向资源的URL可以是绝对路径或相对路径。如果是相对路径，它相对于样式表在文件夹结构中的位置，而不是网页本身的位置。
- en: The `url()` CSS function also supports Data URI's, which is basically the code
    of an image. So instead of pointing the selector to download an image in the `/images`
    folder, we can embed the actual image in the CSS.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`url()` CSS 函数还支持 Data URI，这基本上是图像的代码。因此，我们不必将选择器指向 `/images` 文件夹中的图像下载，而是可以将实际图像嵌入到
    CSS 中。'
- en: Be careful with this because although we are reducing an HTTP request (and that's
    a *huge* win), we might be making the CSS file larger and a bit harder to maintain
    if the image changes. There can also be potential performance and render-blocking
    issues.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这一点，因为尽管我们减少了HTTP请求（这是一个 *巨大的* 成功），但如果图像发生变化，我们可能会使CSS文件变得更大，并且更难维护。也可能存在潜在的性能和渲染阻塞问题。
- en: 'For more information about Data URIs, you can read this great article by Nicholas
    Zakas: *Data URIs Explained* ([https://www.nczonline.net/blog/2009/10/27/data-uris-explained/](https://www.nczonline.net/blog/2009/10/27/data-uris-explained/)).'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Data URI的更多信息，您可以阅读尼古拉斯·扎卡斯的这篇文章：*Data URIs Explained* ([https://www.nczonline.net/blog/2009/10/27/data-uris-explained/](https://www.nczonline.net/blog/2009/10/27/data-uris-explained/)).
- en: '**CSS**:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE78]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: cubic-bezier()
  id: totrans-394
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`cubic-bezier()`'
- en: 'The `cubic-bezier()` function allows us to create custom acceleration curves,
    and it looks like this:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`cubic-bezier()` 函数允许我们创建自定义的加速度曲线，其外观如下：'
- en: '[PRE79]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Description
  id: totrans-397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `cubic-bezier()` function is used with the `animation-timing-function` and
    the `transition-timing-function` CSS properties. Most use cases can benefit from
    the already defined easing functions we mentioned in [Chapter 4](ch04.html "Chapter 4. CSS
    Properties – Part 1"), *CSS Properties – Part 1*, (`ease`, `ease-in`, `ease-out`,
    `ease-in-out`, and `linear`); if you're feeling adventurous, `cubic-bezier()`
    is your best bet.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`cubic-bezier()` 函数与 `animation-timing-function` 和 `transition-timing-function`
    CSS 属性一起使用。大多数用例都可以从我们在[第4章](ch04.html "第4章。CSS属性 - 第1部分")中提到的已定义缓动函数中受益，*CSS属性
    - 第1部分*（`ease`、`ease-in`、`ease-out`、`ease-in-out` 和 `linear`）；如果你喜欢冒险，`cubic-bezier()`
    是你的最佳选择。'
- en: 'Refer to the `animation-timing-function` CSS property in [Chapter 4](ch04.html
    "Chapter 4. CSS Properties – Part 1"), *CSS Properties – Part 1*, to see what
    a **Bézier** curve looks like. The `cubic-bezier()` function takes four parameters
    in the form of:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[第4章](ch04.html "第4章。CSS属性 - 第1部分")中关于 `animation-timing-function` CSS 属性的说明，以了解
    **贝塞尔** 曲线的外观。`cubic-bezier()` 函数以以下形式接受四个参数：
- en: '[PRE80]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Let''s represent all five predefined easing functions with the `cubic-bezier()`
    function:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用 `cubic-bezier()` 函数表示所有五个预定义的缓动函数：
- en: '`ease`: `animation-timing-function: cubic-bezier(.25, .1, .25, 1);`'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ease`: `animation-timing-function: cubic-bezier(.25, .1, .25, 1);`'
- en: '`ease-in`: `animation-timing-function: cubic-bezier(.42, 0, 1, 1);`'
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ease-in`: `animation-timing-function: cubic-bezier(.42, 0, 1, 1);`'
- en: '`ease-out`: `animation-timing-function: cubic-bezier(0, 0, .58, 1);`'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ease-out`: `animation-timing-function: cubic-bezier(0, 0, .58, 1);`'
- en: '`ease-in-out`: `animation-timing-function: cubic-bezier(.42, 0, .58, 1);`'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ease-in-out`: `animation-timing-function: cubic-bezier(.42, 0, .58, 1);`'
- en: '`linear`: `animation-timing-function: cubic-bezier(0, 0, 1, 1);`'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linear`: `animation-timing-function: cubic-bezier(0, 0, 1, 1);`'
- en: I'm not sure about you, but I prefer to use the predefined values.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定你是否也是这样，但我更喜欢使用预定义的值。
- en: Now, we can start tweaking and testing each value to the decimal, save, and
    wait for the live refresh to do its thing. But that's too much wasted time testing
    if you ask me.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以开始调整和测试每个值到小数点后，保存，并等待实时刷新完成其工作。但如果你问我，太多的测试时间是被浪费的。
- en: 'The amazing Lea Verou created the best web app to work with Bézier curves:
    [www.cubic-bezier.com](http://www.cubic-bezier.com). This is by far the easiest
    way to work with Bézier curves. I highly recommend this tool.'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 惊人的Lea Verou创建了最好的用于处理贝塞尔曲线的Web应用程序：[www.cubic-bezier.com](http://www.cubic-bezier.com)。这是处理贝塞尔曲线最简单的方法。我强烈推荐这个工具。
- en: The Bézier curve image showed previously was taken from the [www.cubic-bezier.com](http://www.cubic-bezier.com)
    website.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 之前展示的贝塞尔曲线图像是从[www.cubic-bezier.com](http://www.cubic-bezier.com)网站获取的。
- en: '**CSS**:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE81]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Miscellaneous
  id: totrans-413
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 杂项
- en: The following CSS functions have no specific category, so we grouped them here
    in a miscellaneous section.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 以下CSS函数没有特定的类别，因此我们将它们分组在这里的杂项部分。
- en: Let's see what we have.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们有什么。
- en: drop-shadow()
  id: totrans-416
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: drop-shadow()
- en: 'The `drop-shadow()` CSS function works with the `filter` property adds a shadow
    under the element, and it looks like this:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop-shadow()` CSS函数与`filter`属性一起使用，在元素下方添加阴影，其外观如下：'
- en: '[PRE82]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Description
  id: totrans-419
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `drop-shadow()` function works almost exactly the same way as the `box-shadow`
    property with two differences: the `drop-shadow()` function doesn''t support the
    `spread-radius` or the `inset` values.'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop-shadow()`函数几乎与`box-shadow`属性完全相同，但有两大区别：`drop-shadow()`函数不支持`spread-radius`或`inset`值。'
- en: Please refer to the `box-shadow` property for a detailed description of all
    the values. Additionally, some browsers actually provide hardware acceleration
    when using this function, which eventually improves performance. You know how
    it goes; anything we can do to improve performance is always a +1.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考`box-shadow`属性以获取所有值的详细描述。此外，一些浏览器在启用此功能时实际上会提供硬件加速，这最终会提高性能。你知道的；任何能提高性能的方法都是加分项。
- en: '**CSS**:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE83]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: element()
  id: totrans-424
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: element()
- en: 'The `element()` CSS function allows us to use any HTML element as a background
    for another HTML element, and it looks like this:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '`element()` CSS函数允许我们使用任何HTML元素作为另一个HTML元素的背景，其外观如下：'
- en: '[PRE84]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Description
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Use cases for the `element()` function are rare, but nonetheless it is available
    to us (granted, browser support isn't ideal yet).
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '`element()`函数的使用案例很少，但无论如何，它对我们是可用的（当然，浏览器的支持还不是很好）。'
- en: '**CSS**:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE85]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: image()
  id: totrans-431
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: image()
- en: 'The `image()` CSS function allows us to target an image file to be used as
    background, and it looks like this:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '`image()` CSS函数允许我们指定一个图像文件作为背景使用，其外观如下：'
- en: '[PRE86]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Description
  id: totrans-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `image()` function is practically the same as the `url()` function and it's
    considered to be more flexible and ideal to declare background images rather than
    using the commonly known `url()` function. However, the `image()` CSS function
    is at risk from being dropped from the spec due to lack of browser support.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '`image()`函数实际上与`url()`函数相同，但它被认为更加灵活，是声明背景图像而不是使用众所周知的`url()`函数的理想选择。然而，由于浏览器支持不足，`image()`
    CSS函数有被从规范中删除的风险。'
- en: '**CSS**:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE87]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: opacity()
  id: totrans-438
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: opacity()
- en: 'The `opacity()` CSS function works with the `filter` property. It defines the
    transparency (opacity) of an element, and it looks like this:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '`opacity()` CSS函数与`filter`属性一起工作。它定义了元素的不透明度（透明度），其外观如下：'
- en: '[PRE88]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Description
  id: totrans-441
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: When this function is applied to an element, the element itself and its children
    are affected. This function supports a numeric value ranging from `0` (zero) to
    `1` which is the default value. A value of `0` is completely transparent, as in
    `0%` opaque, and `1` is `100%` opaque, no transparency whatsoever. Decimal numbers
    are allowed but negative values are not.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 当此功能应用于一个元素时，该元素及其子元素都会受到影响。此功能支持从`0`（零）到`1`的数值范围，这是默认值。`0`的值是完全透明的，就像`0%`不透明，而`1`是`100%`不透明，完全没有透明度。允许使用小数，但不允许使用负值。
- en: '**CSS**:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE89]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: perspective()
  id: totrans-445
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: perspective()
- en: 'The `perspective()` CSS function is used with the `transform` CSS property,
    and it looks like this:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '`perspective()` CSS函数与`transform` CSS属性一起使用，其外观如下：'
- en: '[PRE90]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Description
  id: totrans-448
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This value gives three-dimensional perspective to the element. The element in
    question will react in a three-dimensional plane.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 此值给元素提供了三维透视效果。相关的元素将在三维平面上反应。
- en: This function works similarly to the `perspective` property, and the difference
    is that the `perspective()` function is used to give perspective to a single element.
    Hence, it's applied to the *element itself*. The `perspective` property is good
    for giving perspective to several elements at once, hence it is applied to the
    parent element instead.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的工作方式与 `perspective` 属性类似，区别在于 `perspective()` 函数用于给单个元素添加透视效果。因此，它应用于**元素本身**。`perspective`
    属性适用于一次性给多个元素添加透视效果，因此它应用于父元素。
- en: For example, if we apply the `perspective()` function to every element on a
    list, each element will have its own vanishing point. But if we apply the `perspective`
    property to the parent container of that list, all elements will share the same
    vanishing point.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们将 `perspective()` 函数应用于列表上的每个元素，每个元素都会有自己的消失点。但如果我们将 `perspective` 属性应用于该列表的父容器，所有元素将共享相同的消失点。
- en: The `perspective()` function on its own doesn't do much, so in order to see
    it in action we must combine it with any of the other transform functions like
    `rotate()`, `rotateX()`, or `rotateY()`.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '`perspective()` 函数本身并没有什么作用，因此为了看到它的实际效果，我们必须将其与其他转换函数（如 `rotate()`、`rotateX()`
    或 `rotateY()`）结合使用。'
- en: It accepts a *numeric* value with a *length* unit. Negative values are not allowed.
    The value defines the distance of the *Z* axes from the user.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 它接受一个带有长度单位的**数值**。不允许使用负值。该值定义了从用户到 *Z* 轴的距离。
- en: The higher the value, the less intense the perspective. This is because the
    element is farther away from us. However, the lower the value, the more pronounced
    the perspective looks. This is because the element is closer to us.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 值越高，透视效果越不强烈。这是因为元素离我们越远。然而，值越低，透视效果看起来越明显。这是因为元素离我们越近。
- en: '**CSS**:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE91]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: rect()
  id: totrans-457
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: rect()
- en: 'The `rect()` CSS function is used to create a rectangle-shaped clipping mask
    with the `clip` property, and it looks like this:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '`rect()` CSS 函数用于使用 `clip` 属性创建矩形形状的裁剪遮罩，其格式如下：'
- en: '[PRE92]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Tip
  id: totrans-460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `clip` CSS property is now deprecated due to poor features and limitations
    with SVGs. The current and widely supported `clip-path` property is part of the
    SVG specification and it has been adopted by the CSS Masking module.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 由于与 SVG 相关的功能和限制不佳，`clip` CSS 属性现在已被弃用。当前广泛支持的 `clip-path` 属性是 SVG 规范的一部分，并且已被
    CSS 遮罩模块采用。
- en: Description
  id: totrans-462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This function *only* works with the `clip` property, and as I mentioned, this
    property is now deprecated. Also, this CSS function *does not* work with the more
    modern `clip-path` CSS property, so the recommendation is to use the `inset()`
    CSS function instead.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能**仅**与 `clip` 属性一起使用，正如我提到的，此属性现在已被弃用。此外，此 CSS 函数**不**与更现代的 `clip-path` CSS
    属性一起使用，因此建议使用 `inset()` CSS 函数代替。
- en: Refer to the `inset()` CSS function in [Chapter 6](ch06.html "Chapter 6. CSS
    Properties – Part 3"), *CSS Properties – Part 3*.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[第 6 章](ch06.html "第 6 章。CSS 属性 – 第 3 部分")中的 `inset()` CSS 函数，*CSS 属性 – 第
    3 部分*。
- en: At-rules
  id: totrans-465
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规则
- en: CSS *at-rules* start with the `@` character and are followed by a keyword or
    identifier. They always have to end with a semicolon (`;`) character.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: CSS **规则**以 `@` 字符开头，后跟一个关键字或标识符。它们必须以分号 (`;`) 字符结尾。
- en: Some of the most popular at-rules are `@font-face`, which is used to declare
    custom fonts; `@import` that is used to import external CSS files (not recommended
    by the way for performance reasons), and it is also used in some CSS preprocessors
    to bring external partial files that will eventually get compiled into a single
    CSS file (recommended method); `@media` is used to declare media queries in our
    responsive projects or print style sheets and so on; `@keyframes` is used to create
    animations and so on.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最流行的规则包括 `@font-face`，用于声明自定义字体；`@import` 用于导入外部 CSS 文件（不过出于性能考虑并不推荐使用），它也被一些
    CSS 预处理器用来引入外部部分文件，这些文件最终会被编译成一个单一的 CSS 文件（推荐方法）；`@media` 用于在响应式项目中声明媒体查询或打印样式表等；`@keyframes`
    用于创建动画等。
- en: At-rules, let's see where they're *at*.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 规则，让我们看看它们在哪里**应用**。
- en: '@charset'
  id: totrans-469
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '@charset'
- en: 'The `@charset()` at-rule defines the character encoding to be used by a style
    sheet, and it looks like this:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '`@charset()` 规则定义了样式表所使用的字符编码，其格式如下：'
- en: '[PRE93]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Description
  id: totrans-472
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: We rarely need to define the character encoding in a style sheet as long as
    it's defined in the HTML. When the browser detects the character encoding in the
    HTML, it implies that it's the same character encoding for the CSS file(s).
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 只要HTML中已经定义了字符编码，我们就很少需要在样式表中定义字符编码。当浏览器检测到HTML中的字符编码时，它意味着CSS文件(们)使用相同的字符编码。
- en: If you like to declare the character encoding in your CSS files, that's fine
    too. If you plan to use this in a style sheet, it should be the first thing at
    the top of the file. It cannot have a space character before the `@` symbol, or
    a blank line above it. The *character encoding name* should always be inside quotes,
    either single (`'` `'`) or double quotes (`"` `"`).
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢在CSS文件中声明字符编码，那也行。如果你计划在样式表中使用它，它应该是文件顶部第一件事。它不能在`@`符号之前有空格字符，或者在其上方有空行。*字符编码名称*应始终在引号内，无论是单引号(`'`)还是双引号(`"`).
- en: '**CSS**:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE94]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '@document()'
  id: totrans-477
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '@document()'
- en: 'The `@document()` at-rule allows to define styles that only apply to a certain
    pages of a site, and it looks like this in one of its forms:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '`@document()` 规则允许定义仅适用于网站特定页面的样式，其一种形式如下所示：'
- en: '[PRE95]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Description
  id: totrans-480
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'There are four CSS functions that are exclusive to the `@document()` at-rule:
    `url()`, `url-prefix()`, `domain()`, and `regexp("` `")`. Multiple functions can
    be defined in a single declaration.'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个CSS函数是`@document()`规则独有的：`url()`、`url-prefix()`、`domain()`和`regexp("")`。可以在单个声明中定义多个函数。
- en: The values inside the functions can either be declared without quotation marks,
    or use single (`'` `'`) or double quotes (`"` `"`). Only the `regexp("")` function
    requires the use of double quotes (`"` `"`).
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 函数内的值可以不使用引号声明，或者使用单引号(`'`)或双引号(`"`).只有`regexp("")`函数需要使用双引号(`"`).
- en: '`url()`: This restricts the styles to a document that matches the URL'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url()`: 这将样式限制在匹配URL的文档中'
- en: '`url-prefix()`: This restricts the styles to a document that start with the
    specified URL'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url-prefix()`: 这将样式限制在以指定URL开始的文档中'
- en: '`domain()`: This restricts the styles to a document''s specific domain'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`domain()`: 这将样式限制在文档的特定域名中'
- en: '`regexp("")`: This restricts the styles to a document that match the regular
    expression'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`regexp("")`: 这将样式限制在匹配正则表达式的文档中'
- en: '**CSS**:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE96]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '@font-face'
  id: totrans-489
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '@font-face'
- en: 'The `@font-face()` at-rule is used to define custom fonts to use on a document,
    and it looks like this in its simplest form:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '`@font-face()` 规则用于定义在文档中使用的自定义字体，其最简单的形式如下：'
- en: '[PRE97]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Description
  id: totrans-492
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `@font-face()` at-rule has been around for actually more years than many
    believe, so our buddy IE6 supports this function. With the `@font-face()` at-rule,
    we can target custom font files to use on a website/webapp and extend the design
    and branding possibilities way beyond system fonts.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '`@font-face()` 规则实际上比许多人认为的还要存在得更久，因此我们的朋友IE6支持这个功能。使用 `@font-face()` 规则，我们可以针对网站/webapp上使用的自定义字体文件进行定位，并将设计和品牌推广的可能性扩展到系统字体之外。'
- en: One peculiarity of custom fonts is that different versions of each browser support
    one format but not another or even has its own proprietary font format.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义字体有一个特性，即每个浏览器的不同版本支持一种格式，但不支持另一种，甚至有自己的专有字体格式。
- en: Paul Irish's article *Bulletproof @font-face Syntax*, where the *smiley face*
    technique originated, is a must-read `@font-face` article for all web designers
    and developers ([http://tiny.cc/paul-irish-font-face](http://tiny.cc/paul-irish-font-face)).
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: Paul Irish的文章《Bulletproof @font-face Syntax》，其中*笑脸*技术起源于此，是所有网页设计师和开发人员必读的`@font-face`文章([http://tiny.cc/paul-irish-font-face](http://tiny.cc/paul-irish-font-face))。
- en: 'The five font formats we need to account for are: WOFF/WOFF2, EOT, TTF, OTF,
    and SVG.'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要考虑的五种字体格式是：WOFF/WOFF2、EOT、TTF、OTF和SVG。
- en: WOFF/WOFF2
  id: totrans-497
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: WOFF/WOFF2
- en: '**WOFF** stands for **Web Open Font Format** and was created by Mozilla. The
    WOFF format is a *wrapper* for OTF/TTF font formats and it provides better font
    data compression than any other format, thus making the file(s) smaller.'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '**WOFF** 代表 **Web开放字体格式**，由Mozilla创建。WOFF格式是OTF/TTF字体格式的包装器，并且比任何其他格式都提供了更好的字体数据压缩，从而使得文件(们)更小。'
- en: '**WOFF2** is basically WOFF on steroids. It provides even more compression,
    about 30 percent in average and in some cases up to 50 percent more.'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '**WOFF2** 实际上是增强版的WOFF。它提供了更多的压缩，平均约30%，在某些情况下甚至高达50%。'
- en: All modern browsers support these two formats.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代浏览器都支持这两种格式。
- en: EOT
  id: totrans-501
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: EOT
- en: '**EOT** stands for **Embedded Open Type** and was created by Microsoft. Only
    old versions of IE (IE6 to IE8) require the use of this font format. No other
    browsers support this format, so if we don''t need to support legacy browsers,
    we do not need to declare a link to this font format in the `@font-face()` at-rule
    declaration.'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '**EOT**代表**嵌入式OpenType**，由微软创建。只有旧版本的IE（IE6到IE8）需要使用这种字体格式。其他浏览器不支持此格式，因此如果我们不需要支持旧版浏览器，我们就不需要在`@font-face()`规则声明中声明对此字体格式的链接。'
- en: OTF and TTF
  id: totrans-503
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: OTF和TTF
- en: '**OTF** and **TTF** stand for **OpenType Font** and **TrueType Font**. These
    font formats are cross-platform compatible and include advanced layout features
    and information for expert typographic control. OTF is a newer format and has
    a few more features than TTF, such as small caps, ligatures, fractions, and so
    on.'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '**OTF**和**TTF**代表**OpenType字体**和**TrueType字体**。这些字体格式是跨平台兼容的，包括高级布局功能和专家排版控制的信息。OTF是一种较新的格式，比TTF具有更多功能，例如小写字母、连字符、分数等。'
- en: SVG
  id: totrans-505
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SVG
- en: '**SVG** stands for **Scalable Vector Graphic**. An SVG *font file* doesn''t
    really have a font; it has vector representations of the font. This type of font
    file is used when old iOS devices need to be supported. However, if this type
    of font is not declared, the old iOS device will simply use a system font instead,
    which if you ask me, I''m totally fine with.'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '**SVG**代表**可缩放矢量图形**。SVG *字体文件*实际上并没有字体；它有字体的矢量表示。此类字体文件用于需要支持旧版iOS设备的情况。然而，如果未声明此类字体，旧版iOS设备将简单地使用系统字体，如果问我，我完全没问题。'
- en: 'The values inside the `@font-face` brackets are called the **font descriptors**.
    In it, we can declare several values: `font-family`, `src`, `font-variant`, `font-stretch`,
    `font-style`, `font-weight`, and `unicode-range`.'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '`@font-face`括号内的值被称为**字体描述符**。在其中，我们可以声明几个值：`font-family`、`src`、`font-variant`、`font-stretch`、`font-style`、`font-weight`和`unicode-range`。'
- en: font-family
  id: totrans-508
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: font-family
- en: This is a required value. It defines the name of the font to be used in the
    style sheet.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个必需的值。它定义了在样式表中使用的字体名称。
- en: src
  id: totrans-510
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: src
- en: This is a required value. It defines the location or URL of the font file(s).
    Multiple URLs can be defined in the same `src` declaration block to account for
    the different types of fonts that each browser supports. However, legacy IEs choke
    when it finds multiple URLs in the same `src` declaration block, so an independent
    `src` declaration block needs to be declared if support for legacy IEs is required.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个必需的值。它定义了字体文件的位置或URL。可以在同一个`src`声明块中定义多个URL，以适应每个浏览器支持的字体类型。然而，如果需要支持旧版IE，当它发现同一个`src`声明块中有多个URL时，旧版IE会崩溃，因此如果需要支持旧版IE，需要声明独立的`src`声明块。
- en: In addition to targeting external files with URLs, we can also target locally
    installed files with the `local()` function.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 除了针对带有URL的外部文件，我们还可以使用`local()`函数针对本地安装的文件进行定位。
- en: font-variant
  id: totrans-513
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: font-variant
- en: The `font-variant` CSS property turns the targeted text into small caps. In
    CSS3, it's considered a shorthand and has been extended with new values, which
    developers rarely use. Refer to [Chapter 5](ch05.html "Chapter 5. CSS Properties
    – Part 2"), *CSS Properties – Part 2*, for more information.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-variant` CSS属性将目标文本转换为小写字母。在CSS3中，它被视为一个简写，并扩展了新的值，但开发者很少使用。有关更多信息，请参阅[第5章](ch05.html
    "第5章。CSS属性 - 第2部分")，*CSS属性 - 第2部分*。'
- en: font-stretch
  id: totrans-515
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: font-stretch
- en: The `font-stretch` CSS property allows us to select a *condensed*, *normal*,
    or *expanded* face from the font family in question. Refer to [Chapter 5](ch05.html
    "Chapter 5. CSS Properties – Part 2"), *CSS Properties – Part 2*, for more information.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-stretch` CSS属性允许我们从相关的字体族中选择一个*紧凑型*、*正常型*或*扩展型*面。有关更多信息，请参阅[第5章](ch05.html
    "第5章。CSS属性 - 第2部分")，*CSS属性 - 第2部分*。'
- en: font-weight
  id: totrans-517
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: font-weight
- en: The `font-weight` CSS property defines the thickness (weight) of the font. Refer
    to [Chapter 5](ch05.html "Chapter 5. CSS Properties – Part 2"), *CSS Properties
    – Part 2*, for more information.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-weight` CSS属性定义了字体的粗细（重量）。有关更多信息，请参阅[第5章](ch05.html "第5章。CSS属性 - 第2部分")，*CSS属性
    - 第2部分*。'
- en: unicode-range
  id: totrans-519
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: unicode-range
- en: The `unicode-range` CSS property descriptor defines a specific range of characters
    or glyphs that should be downloaded from a font declared in a `@font-face` declaration.
    This is helpful, for example, when working on a site with different languages.
    By declaring `unicode-range`, the browser only downloads the specific characters
    of that language for that page, thus saving bandwidth and optimizing performance.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '`unicode-range` CSS 属性描述符定义了应从 `@font-face` 声明中下载的特定字符或符号的范围。这在处理涉及不同语言的网站时非常有用。通过声明
    `unicode-range`，浏览器只为该页下载该语言的特定字符，从而节省带宽并优化性能。'
- en: This property is rarely used.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性很少使用。
- en: Google fonts
  id: totrans-522
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Google 字体
- en: We can't talk about `@font-face` without talking about **Google Fonts**. Google
    Fonts is a free web font service that allows us to practically skip all the manual
    work of creating `@font-face` declaration block in our CSS files by giving us
    an HTML `<link>` that points to the font(s) we selected.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在谈论 `@font-face` 时不能不提到 **Google Fonts**。Google Fonts 是一个免费的网页字体服务，它通过给我们一个指向所选字体（或字体组）的
    HTML `<link>` 标签，使我们能够跳过在 CSS 文件中创建 `@font-face` 声明块的繁琐工作。
- en: Check out Google Fonts at [http://tiny.cc/google-fonts](http://tiny.cc/google-fonts)
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Google Fonts，链接为 [http://tiny.cc/google-fonts](http://tiny.cc/google-fonts)。
- en: '**HTML**:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTML**:'
- en: '[PRE98]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '**CSS**:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE99]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '@import'
  id: totrans-529
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '@import'
- en: 'The `@import()` at-rule is used to import a style sheet into another, and it
    looks like this:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '`@import()` 规则用于将样式表导入另一个样式表中，其语法如下：'
- en: '[PRE100]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Description
  id: totrans-532
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The previous example targets another style sheet with a `string` value. But
    style sheets can also be imported using the `url()` function.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的例子使用一个 `string` 值来指向另一个样式表。但样式表也可以通过 `url()` 函数导入。
- en: The `@import` rules should always precede any other rules except the `@charset`
    rule, otherwise, it will be ignored by the browser.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '`@import` 规则应该始终位于除 `@charset` 规则之外的所有其他规则之前，否则浏览器将忽略它。'
- en: One thing to take into consideration is cascading. Imported style sheets cascade
    in the order they are imported. There is also a way to specify the media a specific
    imported style sheet is for via media queries. If more than one media query is
    declared, it needs to be separated by commas.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 需要考虑的一点是层叠。导入的样式表按导入的顺序层叠。还可以通过媒体查询指定特定导入样式表针对的媒体。如果声明了多个媒体查询，它们需要用逗号分隔。
- en: Tip
  id: totrans-536
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It's a known fact that using `@import` has a negative impact on performance
    due to sequential downloading instead of parallel downloads and multiple HTTP
    requests. Read more about this issue on Steve Souders' article *Don't Use @import*
    at [http://tiny.cc/steve-souders-avoidimport](http://tiny.cc/steve-souders-avoidimport)
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，使用 `@import` 由于按顺序下载而不是并行下载以及多次 HTTP 请求，会对性能产生负面影响。关于此问题的更多信息，请参阅 Steve
    Souders 的文章 *不要使用 @import*，链接为 [http://tiny.cc/steve-souders-avoidimport](http://tiny.cc/steve-souders-avoidimport)。
- en: '**CSS**:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE101]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '@keyframes'
  id: totrans-540
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '@keyframes'
- en: 'The `@keyframes()` at-rule is used to list CSS properties to be animated, and
    it looks like this:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '`@keyframes()` 规则用于列出要动画化的 CSS 属性，其语法如下：'
- en: '[PRE102]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Description
  id: totrans-543
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The animation created with the `@keyframes` at-rule only runs for one cycle.
    If we want the animation to play over and over, ease-in, ease-out, or show other
    behavior, we need to declare those properties in the element itself, outside the
    `@keyframes` at-rule.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `@keyframes` 规则创建的动画只运行一个周期。如果我们想让动画反复播放，实现渐入渐出，或者展示其他行为，我们需要在元素本身中声明这些属性，而不是在
    `@keyframes` 规则之外。
- en: Please refer to the Animation section in [Chapter 4](ch04.html "Chapter 4. CSS
    Properties – Part 1"), *CSS Properties – Part 1*, for detailed explanations of
    those CSS properties.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考第 4 章（[ch04.html "第 4 章. CSS 属性 – 第 1 部分"](ch04.html "Chapter 4. CSS Properties
    – Part 1")）中的动画部分，以获取有关这些 CSS 属性的详细解释。
- en: The animation's name (also called an **identifier**) always comes after the
    `@keyframes` keyword separated by a space. This animation name will later be referenced
    with the `animation-name` or `animation` shorthand CSS properties.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 动画名称（也称为 **标识符**）始终位于 `@keyframes` 关键字之后，两者之间用空格分隔。这个动画名称将在稍后通过 `animation-name`
    或 `animation` 简写 CSS 属性进行引用。
- en: The beginning and end of an animation can be declared with the two *selector
    keywords* `from` and `to`, or with two *keyframe selectors* `0%` and `100%`. Negative
    values are not allowed.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 动画的开始和结束可以使用两个选择器关键字 `from` 和 `to`，或者使用两个关键帧选择器 `0%` 和 `100%` 来声明。不允许使用负值。
- en: Obviously, we can declare intermediate waypoints but we can only do this using
    *keyframe selectors*. There is no limit to the amount of properties that can be
    declared in the `@keyframes` at-rule. However, some browsers animate properties
    that the spec says can't be animated, while others follow the spec correctly.
    Granted, the spec is unclear about some of the definitions, so make sure to run
    proper tests.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们可以声明中间路径点，但我们只能使用 *关键帧选择器* 来做到这一点。在 `@keyframes` 规则中声明的属性数量没有限制。然而，一些浏览器会动画化规范中说不应该动画化的属性，而其他浏览器则正确地遵循规范。当然，规范对一些定义不够明确，所以请确保运行适当的测试。
- en: Now the difference between using `@keyframes` at-rule and the `transition` property
    is that with the `@keyframes` at-rule we have the power of defining what happens
    in the middle waypoints rather than letting the browser figure it out for us.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用 `@keyframes` 规则和 `transition` 属性之间的区别在于，使用 `@keyframes` 规则，我们可以定义中间路径点发生的事情，而不是让浏览器为我们找出它。
- en: Basically, if we have a simple animation, we can just use the `transition` property.
    If we have somewhat more complex and elaborate animations, use `@keyframes`.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，如果我们有一个简单的动画，我们可以直接使用 `transition` 属性。如果我们有更复杂和精细的动画，则使用 `@keyframes`。
- en: '**CSS**:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE103]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '@media'
  id: totrans-553
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '@media'
- en: 'The `@media()` at-rule allows us to define a set of CSS styles that apply to
    a certain media type, and it looks like this:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: '`@media()` 规则允许我们定义一组应用于特定媒体类型的 CSS 样式，其外观如下：'
- en: '[PRE104]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'You can use the preceding code or the following code as well:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用前面的代码或以下代码：
- en: '[PRE105]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Description
  id: totrans-558
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This piece of CSS allows us to declare any set of styles to a specific media
    type.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 这段 CSS 允许我们为特定的媒体类型声明任何一组样式。
- en: 'The two types of directives that come after the `@media()` at-rule, for example,
    `print` and `screen` and even `(min-width: 40em)` or `(max-width: 40em)`, and
    they are called **media queries**.'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '在 `@media()` 规则之后出现的两种指令类型，例如 `print` 和 `screen`，甚至是 `(min-width: 40em)` 或
    `(max-width: 40em)`，它们被称为 **媒体查询**。'
- en: The keywords (`print` and `screen`) are called **media types**. And the ones
    that test specific features of a **User Agent** (**UA**) or display are called
    **media features**.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字（`print` 和 `screen`）被称为 **媒体类型**。而那些测试特定 **用户代理**（**UA**）或显示功能的被称为 **媒体特性**。
- en: Media types
  id: totrans-562
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 媒体类型
- en: 'Media types are case-sensitive. There are 10 media types that we can use with
    the `@media()` at-rule:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体类型区分大小写。我们可以使用 `@media()` 规则与以下 10 种媒体类型一起使用：
- en: '`all`: This is meant to work on all devices'
  id: totrans-564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`all`: 这是为了在所有设备上工作'
- en: '`braille`: This is meant to work with braille tactile-feedback devices'
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`braille`: 这是为了与盲文触觉反馈设备一起工作'
- en: '`embossed`: This is meant to work on braille printers'
  id: totrans-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`embossed`: 这是为了在盲文打印机上工作'
- en: '`handheld`: This is meant to work with handled "mobile" devices'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handheld`: 这是为了与手持“移动”设备一起工作'
- en: '`print`: This is meant to work for printing documents'
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`print`: 这是为了打印文档'
- en: '`projection`: This is meant to work with projectors'
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`projection`: 这是为了与投影仪一起工作'
- en: '`screen`: This is meant to work with computer screens of all sizes'
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`screen`: 这是为了与所有尺寸的计算机屏幕一起工作'
- en: '`speech`: This is meant to work with speech synthesizers'
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`speech`: 这是为了与语音合成器一起工作'
- en: '`tty`: This is meant to work with teletypes'
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tty`: 这是为了与电传打字机一起工作'
- en: '`tv`: This is meant to work with televisions'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tv`: 这是为了与电视一起工作'
- en: '**CSS**:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE106]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '@namespace'
  id: totrans-576
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '@namespace'
- en: 'The `@namespace()` at-rule is used to define the XML namespaces in a style
    sheet, and it looks like this:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '`@namespace()` 规则用于在样式表中定义 XML 命名空间，其外观如下：'
- en: '[PRE107]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'You can use the preceding code or the following code as well:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用前面的代码或以下代码：
- en: '[PRE108]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Description
  id: totrans-581
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: We use the `@namespace()` at-rule in a CSS document when we need to use selectors
    that apply or target certain elements in a specific namespace. For example, we
    can have an embedded SVG file in our HTML document. The thing is that SVGs share
    common elements with HTML and XML, such as the `<a>` element. So instead of creating
    a separate style sheet to target the SVG elements, we can declare an SVG namespace
    with the `@namespace()` at-rule to target the `<a>` elements within the same HTML
    document, thus we only have to work in one style sheet rather than two (or more).
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要在 CSS 文档中使用应用于或针对特定命名空间中元素的选择器时，我们使用 `@namespace()` 规则。例如，我们可以在我们的 HTML
    文档中嵌入 SVG 文件。问题是 SVG 与 HTML 和 XML 共享一些常见元素，例如 `<a>` 元素。因此，我们不必创建单独的样式表来针对 SVG
    元素，我们可以使用 `@namespace()` 规则声明 SVG 命名空间，以针对同一 HTML 文档中的 `<a>` 元素，这样我们只需要在一个样式表中工作，而不是两个（或更多）。
- en: 'Now, the `@namespace()` at-rule is mostly used for legacy XHTML documents where
    it''s necessary to declare a namespace in the `<html>` element:'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '**现在，`@namespace()` 规则主要用于需要声明 `<html>` 元素中的命名空间的旧版 XHTML 文档：**'
- en: '[PRE109]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '**With the `xmlns` directive in place, we can now declare the namespaces in
    our CSS. Finally, we can then target the `<a>` elements in the SVG block without
    affecting the HTML `<a>` elements.**'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 `xmlns` 指令后，我们现在可以在 CSS 中声明命名空间。最后，我们可以针对 SVG 块中的 `<a>` 元素进行定位，而不会影响 HTML
    `<a>` 元素。**'
- en: '**The URLs are merely to make the markup more readable and easier to understand
    when someone is reading through it.**'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '**URLs 仅用于使标记更易于阅读和理解，当有人阅读时。**'
- en: '****XHTML**:**'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '****XHTML**:**'
- en: '[PRE110]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '******CSS**:****'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '******CSS**:****'
- en: '[PRE111]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '****@page****'
  id: totrans-591
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '****@page****'
- en: '****The `@page()` at-rule is used to modify certain properties of a page to
    get it ready for printing, and it looks like this:****'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '****`@page()` 规则用于修改页面的某些属性以准备打印，其语法如下：****'
- en: '[PRE112]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '****Description****'
  id: totrans-594
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '****描述****'
- en: '****When using the `@page()` at-rule, only a few properties of the page can
    be changed: `margins`, `widows`, `orphans`, and *page breaks*. Declaring any other
    types of properties will be ignored.****'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '****当使用 `@page()` 规则时，只有页面的少数属性可以更改：`margins`、`widows`、`orphans` 和 *页面分页*。声明任何其他类型的属性都将被忽略。****'
- en: '****We can also declare if we want to target *only the first page*, *all the
    left pages only*, or *all the right pages only* with the `:first`, `:left` and
    `:right` pseudo-classes. The `@page()` at-rule is most commonly used to change
    the margins.****'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '****我们还可以声明是否只想针对 *第一页*、*所有左页* 或 *所有右页* 使用 `:first`、`:left` 和 `:right` 伪类。`@page()`
    规则最常用于更改边距。****'
- en: '******CSS**:****'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '******CSS**:****'
- en: '[PRE113]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '****@supports****'
  id: totrans-599
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '****@supports****'
- en: '****The `@supports()` at-rule is used to detect a *feature* on a browser, and
    it looks like this:****'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: '****`@supports()` 规则用于检测浏览器上的 *功能*，其语法如下：****'
- en: '[PRE114]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '****Description****'
  id: totrans-602
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '****描述****'
- en: '*****Feature detection* is something that''s usually done with polyfills like
    **Modernizr**. With the `@supports()` at-rule, we can accomplish similar results
    via CSS only.****'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '*****功能检测* 通常使用类似 **Modernizr** 的 polyfills 来实现。通过 `@supports()` 规则，我们可以仅使用
    CSS 就达到类似的效果。****'
- en: '****In order for this function to work properly, we need to specify a *property*
    and a *value*. There are three keyword operators that we can use with the `@supports()`
    at-rule: `not`, `and` and `or`.****'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '****为了使此函数正常工作，我们需要指定一个 *属性* 和一个 *值*。我们可以与 `@supports()` 规则一起使用三个关键字操作符：`not`、`and`
    和 `or`。****'
- en: '****The not operator****'
  id: totrans-605
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '****not 操作符****'
- en: '****Just like we can check for features that the browser supports, we can also
    check for features that the browser *does not* support using the `not` operator.****'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: '****就像我们可以检查浏览器支持的功能一样，我们也可以使用 `not` 操作符检查浏览器 *不支持* 的功能。****'
- en: '****The and operator****'
  id: totrans-607
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '****and 操作符****'
- en: '****The `and` operator allows us to check for multiple CSS properties in the
    same declaration.****'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '****`and` 操作符允许我们在同一个声明中检查多个 CSS 属性。****'
- en: '****The or operator****'
  id: totrans-609
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '****or 操作符****'
- en: '****A good example of this operator is when we need to check for a vendor-prefixed
    CSS property in case we need to support legacy browsers. When using this operator,
    if one of the expressions is `true`, it will make all other expressions valid
    as well. Additionally, we can also combine operators when necessary.****'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '****此操作符的一个好例子是当我们需要检查带有供应商前缀的 CSS 属性以支持旧版浏览器时。当使用此操作符时，如果其中一个表达式为 `true`，则所有其他表达式也将有效。此外，我们还可以在必要时组合操作符。****'
- en: '******CSS**:****'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '******CSS**:****'
- en: '[PRE115]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '****# Global CSS keyword values'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '****# 全局 CSS 关键字值'
- en: The following list of keyword values is ubiquitous to web designers and developers,
    but have you ever wondered what exactly they mean and do?
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '**以下关键字值对网页设计师和开发者来说是普遍存在的，但你是否曾想过它们的确切含义和作用？**'
- en: auto
  id: totrans-615
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: auto
- en: 'The `auto` CSS keyword value tells the browser to automatically compute the
    CSS property''s value, and it looks like this:'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '**auto** CSS 关键字值指示浏览器自动计算 CSS 属性的值，其语法如下：'
- en: '[PRE116]'
  id: totrans-617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: The term **auto** is short for **automatic**. It's not the same as saying 100%
    because 100% is an actual defined value; `auto` is calculated by the browser.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '**auto** 这个术语是 **自动** 的简称。它与说 100% 不同，因为 100% 是一个实际定义的值；`auto` 是由浏览器计算的。'
- en: One of the most common locations to see the keyword `auto` applied is when centering
    an element horizontally with the `margin` CSS property.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '**`auto` 关键字最常见的应用位置之一是使用 `margin` CSS 属性水平居中元素。**'
- en: '**CSS**:'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE117]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Tip
  id: totrans-622
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'I''ve seen most people use `margin: 0 auto;` to center an element. This is
    fine, but the value zero (`0`) can be omitted. `margin: auto;` is enough and yields
    the same result.'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '我看到大多数人使用 `margin: 0 auto;` 来居中元素。这没问题，但值零（`0`）可以省略。`margin: auto;` 就足够了，并且会产生相同的结果。'
- en: inherit
  id: totrans-624
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继承
- en: The `inherit` CSS keyword value makes an element derive/inherit the values of
    its parent container.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: '`inherit` CSS 关键字值使元素从其父容器继承值。'
- en: '**CSS**:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE118]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: initial
  id: totrans-628
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认
- en: The `initial` CSS keyword value sets the CSS property to its default value as
    per the CSS spec.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '`initial` CSS 关键字值将 CSS 属性设置为规范中定义的默认值。'
- en: '**CSS**:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE119]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: none
  id: totrans-632
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无
- en: The `none` CSS keyword value defines the lack of a specific styling.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '`none` CSS 关键字值定义了没有特定的样式。'
- en: '**CSS**:'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE120]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: normal
  id: totrans-636
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准
- en: The `normal` CSS keyword value defines a *standard* value.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '`normal` CSS 关键字值定义了一个*标准*值。'
- en: '**CSS**:'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE121]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: unset
  id: totrans-640
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未设置
- en: 'The `unset` CSS keyword is the combination of the `inherit` and `initial` keywords,
    and it looks like this:'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: '`unset` CSS 关键字是 `inherit` 和 `initial` 关键字的组合，看起来是这样的：'
- en: '[PRE122]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: By combining the `inherit` and `initial` keywords, the `unset` CSS keyword value
    resets the value of a property.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 通过组合 `inherit` 和 `initial` 关键字，`unset` CSS 关键字值重置了属性的值。
- en: If an element is inheriting values from its parent container and the `unset`
    keyword is declared, then the property's value is reset to the parent container's
    value (since it's inheriting). But if an element has no parent container and the
    `unset` keyword is declared, then its property's value is reset to the default
    value as per the spec (since it's not inheriting).
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个元素正在从其父容器继承值，并且声明了 `unset` 关键字，那么属性的值将重置为父容器的值（因为它正在继承）。但如果一个元素没有父容器，并且声明了
    `unset` 关键字，那么其属性的值将重置为规范中定义的默认值（因为它没有继承）。
- en: '**CSS**:'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE123]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: revert
  id: totrans-647
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回退
- en: 'The `revert` CSS keyword value is like an *undo* in CSS as it returns the cascade
    to a previous state and resets the property to the default value defined by the
    *user agent*. It looks like this:'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: '`revert` CSS 关键字值就像 CSS 中的 *撤销*，它会将层叠回滚到之前的状态，并将属性重置为用户代理定义的默认值。它看起来是这样的：'
- en: '[PRE124]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: This is different from the `initial` CSS keyword because `revert` rolls back
    the cascade and resets the value as per the user agent's *style sheet* value.
    With `initial` the value is reset to its default value as per the specification.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 这与 `initial` CSS 关键字不同，因为 `revert` 会回滚层叠并重置属性值为用户代理的 *样式表* 值。而 `initial` 则将值重置为其规范中定义的默认值。
- en: 'For example, the spec says that the default value of `display` is `inline`.
    However, most UAs assign a default value of `display: block;` to `<div>`, or `display:
    table;` to `<table>`.'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，规范说明 `display` 的默认值是 `inline`。然而，大多数用户代理将 `<div>` 的默认值设置为 `display: block;`，或者将
    `<table>` 的默认值设置为 `display: table;`。'
- en: '**CSS**:'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE125]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Summary
  id: totrans-654
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This conclude the chapters about CSS, pretty interesting stuff eh?
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了关于 CSS 的章节，很有趣吧？
- en: We learned about CSS Filters and how we can modify elements' colors without
    having to rely on image editing tools. This also applies to CSS Transforms because
    we can modify the shape and orientation of elements', at least to some extent,
    quite easily with CSS only.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了 CSS 过滤器以及我们如何在不依赖图像编辑工具的情况下修改元素的色彩。这也适用于 CSS 变换，因为我们可以使用 CSS 很容易地修改元素的形状和方向，至少在一定程度上。
- en: At the same time we learned about the different ways we can create colors in
    CSS, and that HSL mode is more intuitive and versatile than any other color mode.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，我们还了解了在 CSS 中创建颜色的不同方法，以及 HSL 模式比其他任何颜色模式都更直观和灵活。
- en: Calculating and declaring different values with the `attr()` or `calc()` functions
    opens new possibilities in our CSS toolbox, for example, how to make responsive
    tables.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `attr()` 或 `calc()` 函数计算和声明不同的值，为我们的 CSS 工具箱打开了新的可能性，例如，如何制作响应式表格。
- en: We now know that to improve performance with drop shadows we can use the `drop-shadow()`
    function; or to modify the transparency of an element we can use the `opacity()`
    function; or the perspective of an element with the `perspective()` function.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道，为了提高阴影效果的性能，我们可以使用 `drop-shadow()` 函数；或者要修改元素的透明度，我们可以使用 `opacity()`
    函数；或者使用 `perspective()` 函数来修改元素的透视。
- en: At-rules now make more sense I'm sure. Additionally, we addressed the different
    font formats and learned that if we don't need to support legacy IEs we can just
    use WOFF and WOFF2.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，@规则更有意义了。此外，我们还讨论了不同的字体格式，并了解到如果我们不需要支持旧版 IE，我们就可以直接使用 WOFF 和 WOFF2。
- en: And finally, we got clarification on the all the global CSS keyword values like
    auto or inherit that we use all the time and never really question what they are
    and how they work.
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们终于弄清楚了所有常用的全局 CSS 关键字值，比如 auto 或 inherit，我们经常使用它们，却从未真正质疑过它们是什么以及它们是如何工作的。
- en: Note that you don't have to know and remember all the CSS functions, you need
    to know where to look—this book.****
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你不需要知道和记住所有的 CSS 函数，你需要知道在哪里查找——这本书。****
