- en: '*Chapter 8*: Using the Project Feature with Git'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第8章*：使用Git的项目功能'
- en: What you will learn in this chapter is a very useful **Project** feature. The
    project feature of Node-RED is a kind of version management tool with Git on a
    Node-RED flow editor. This is actually disabled by default. Enabling this allows
    you to manage your flows in a new way. I believe many developers are familiar
    with Git services such as GitHub and GitLab. The project feature of Node-RED uses
    Git and GitHub for version control, so I think it's very easy to understand.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习到一个非常有用的**项目**功能。Node-RED的项目功能是一种使用Git在Node-RED流程编辑器上进行版本管理的工具/功能。实际上，默认情况下是禁用的。启用此功能可以让您以一种新的方式管理您的流程。我相信许多开发人员熟悉GitHub和GitLab等Git服务。Node-RED的项目功能使用Git和GitHub进行版本控制，因此我认为这非常容易理解。
- en: 'Here are the topics that we will be covering in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章将涵盖的主题：
- en: Enabling the project feature
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用项目功能
- en: Using the Git repository
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Git存储库
- en: Connecting a remote repository
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接远程存储库
- en: By the end of this chapter, you will be able to understand how to use the project
    feature, how to connect your own Git repository to your Node-RED flow editor,
    and how to manage flows as projects with version control tool Git.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够了解如何使用项目功能，如何将您自己的Git存储库连接到Node-RED流程编辑器，并如何使用版本控制工具Git管理流程作为项目。
- en: By the end of this chapter, you will have mastered how to use the project feature
    and make your applications with it. You can use it in any hosted Git service such
    as GitHub or GitLab.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将掌握如何使用项目功能并使用它制作应用程序。您可以在GitHub或GitLab等任何托管的Git服务中使用它。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To progress in this chapter, you will require the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本章中取得进展，您将需要以下内容：
- en: 'A GitHub account, which you can create via the official website: [https://github.com/](https://github.com/).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过官方网站创建GitHub帐户：[https://github.com/](https://github.com/)。
- en: 'A Git client tool, which you need to install via the official website: [https://git-scm.com/downloads](https://git-scm.com/downloads).'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要通过官方网站安装的Git客户端工具：[https://git-scm.com/downloads](https://git-scm.com/downloads)。
- en: Enabling the project feature
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用项目功能
- en: For example, in situations where you want to manage your own flow while sharing
    it with others, or you want to update the flow created by others, it is difficult
    to develop when a team uses only the Node-RED flow editor.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在您想要管理自己的流程同时与他人共享它，或者您想要更新他人创建的流程的情况下，当团队仅使用Node-RED流程编辑器时，开发会很困难。
- en: The project function of Node-RED is a method/function for managing the files
    that are relevant with each flow you make. It covers all the files needed to create
    applications with Node-RED shareable.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED的项目功能是一种管理与您制作的每个流程相关的文件的方法/功能。它涵盖了使用Node-RED可共享的创建应用程序所需的所有文件。
- en: These are supported by the Git repository. That is, all files are versioned.
    This allows developers to collaborate with other users.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都受Git存储库支持。也就是说，所有文件都有版本。这使开发人员能够与其他用户合作。
- en: On Node-RED version 1.x, the project feature is disabled by default, so it must
    be enabled in the `config` file named `settings.js`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node-RED版本1.x上，默认情况下禁用项目功能，因此必须在名为`settings.js`的`config`文件中启用它。
- en: Important note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When creating a project in the local environment of Node-RED, the flow created
    so far may be overwritten with a blank sheet. You can download the JSON files
    of the flow configurations for all the flows created in this document via the
    internet, but if the flow you created yourself exists in Node-RED in the local
    environment, it is recommended to export the flow configuration file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node-RED的本地环境中创建项目时，到目前为止创建的流程可能会被覆盖为空白表格。您可以通过互联网下载此文档中创建的所有流程的流程配置的JSON文件，但是如果您在本地环境中的Node-RED中创建了自己的流程，则建议导出流程配置文件。
- en: 'All of the flow definitions and JSON files that we created in this book are
    available to download here: [https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书中创建的所有流程定义和JSON文件都可以在此处下载：[https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming)。
- en: 'Now let''s try the project function. We will use a standalone version of Node-RED
    on a local environment such as macOS or Windows. In order to use the project feature,
    we first need to enable it. Let''s enable it by following these steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试项目功能。我们将在本地环境（如macOS或Windows）上使用独立版本的Node-RED。为了使用项目功能，我们首先需要启用它。让我们按照以下步骤启用它：
- en: It is necessary to rewrite the `settings.js` file to enable/disable the project
    function. Look for this file first. The `settings.js` file can be found in the
    Node-RED user directory where all of the user configurations are stored.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要重写`settings.js`文件以启用/禁用项目功能。首先找到此文件。`settings.js`文件可以在存储所有用户配置的Node-RED用户目录中找到。
- en: 'By default, on a Mac, this file is available under the following path:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac上，默认情况下，此文件位于以下路径下：
- en: '`/Users/<User Name>/.node-red/settings.js`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`/Users/<User Name>/.node-red/settings.js`。'
- en: 'By default, on Windows, this file is available under the following path:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，默认情况下，此文件位于以下路径下：
- en: '`C:\Users\<User Name>\.node-red\settings.js`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`C:\Users\<User Name>\.node-red\settings.js`'
- en: 'Edit the `settings.js` file. It is OK to open `settings.js` with any text editors.
    I have used `vi` here. Open `settings.js` with the following command:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`settings.js`文件。可以使用任何文本编辑器打开`settings.js`。我在这里使用了`vi`。使用以下命令打开`settings.js`：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Important note
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Please replace the command with the one specific to your environment.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请将命令替换为适用于您的环境的命令。
- en: 'Edit your `settings.js` file and set the `true` in the `editorTheme` block
    within the `module.exports` block in order for the project feature to be enabled:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑您的`settings.js`文件，并在`module.exports`块内的`editorTheme`块中设置`true`，以启用项目功能：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save and close the `settings.js` file.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭`settings.js`文件。
- en: 'Restart Node-RED to enable the settings we modified by running the following
    command:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令重新启动Node-RED以启用我们修改的设置：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We have now successfully enabled the project feature of Node-RED.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已成功启用了Node-RED的项目功能。
- en: To use this feature, you need to have access to Git and ssh-keygen command-line
    tools. Node-RED checks them at startup and notifies you if any tools are missing.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此功能，您需要访问Git和ssh-keygen命令行工具。Node-RED在启动时检查它们，并在缺少任何工具时通知您。
- en: If the settings are completed without any problems and you have restarted Node-RED,
    the project feature will be available. Next, let's set up the Git repository to
    use.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置完成没有任何问题，并且您已重新启动Node-RED，则项目功能将可用。接下来，让我们设置Git存储库以供使用。
- en: Using the Git repository
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Git存储库
- en: 'We enabled the project feature in the previous section. Reopen the flow editor
    and you will be prompted to create your first project using the contents of the
    flow you created at that time. This will be the welcome screen:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节中启用了项目功能。重新打开流程编辑器，您将被提示使用当时创建的流程内容创建您的第一个项目。这将是欢迎屏幕：
- en: '![Figure 8.1 – Welcome screen'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.1 - 欢迎屏幕'
- en: '](img/Figure_8.1_B16353.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.1_B16353.jpg)'
- en: Figure 8.1 – Welcome screen
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 - 欢迎屏幕
- en: We need to set up a version control client such as Git. As already explained,
    the project function of Node-RED uses Git as a version control tool. As with regular
    Git, you can manage file changes on a project-by-project basis and synchronize
    with remote repositories as required.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置Git等版本控制客户端。如前所述，Node-RED的项目功能使用Git作为版本控制工具。与常规Git一样，您可以根据项目管理文件更改，并根据需要与远程存储库同步。
- en: Git keeps track of who made the change. It works with your username and email
    address. The username does not have to be your real name; you can use any name
    you like.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Git跟踪谁做出了更改。它与您的用户名和电子邮件地址一起工作。用户名不必是您的真实姓名；您可以使用任何您喜欢的名称。
- en: If your local device already has a Git client configured, Node-RED will look
    up those settings.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的本地设备已经配置了Git客户端，Node-RED将查找这些设置。
- en: First, perform version control in your local environment. It takes advantage
    of the features of the Git client installed in your local environment. If you
    do not have Git installed, please install it in advance.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在您的本地环境中执行版本控制。它利用了您本地环境中安装的Git客户端的功能。如果您尚未安装Git，请提前安装。
- en: 'Now, follow these next steps to create a project on your Node-RED flow editor:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照以下步骤在Node-RED流程编辑器上创建项目：
- en: First, let's create a project. This is very easy. Enter a project name and a
    description in the project creation window.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个项目。这非常容易。在项目创建窗口中输入项目名称和描述。
- en: Name the flow file. By default, it is already named `flow.json`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名流程文件。默认情况下，它已命名为`flow.json`。
- en: In other words, Node-RED automatically migrates the flow currently configured
    on the flow editor to a new project as it is. It is OK to keep the default name.
    Of course, you may choose to rename it here if you so wish.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，Node-RED会自动将当前在流程编辑器上配置的流程迁移到一个新项目中。保持默认名称即可。当然，如果您愿意，也可以在此处选择重命名。
- en: If you publish your project on a public site such as GitHub, it's a good idea
    to encrypt your credentials file.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将项目发布在GitHub等公共网站上，加密凭据文件是个好主意。
- en: If you choose to encrypt, you must create a key to use for encryption. This
    key is not included in the project, so if you share the project with someone,
    you will need to provide the credential file decryption key separately to the
    user who cloned the project.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择加密，必须创建一个用于加密的密钥。该密钥不包括在项目中，因此如果与某人共享项目，则需要单独向克隆项目的用户提供凭据文件解密密钥。
- en: After adding the required information, click the **Create Project** button:![Figure
    8.2 – Projects screen
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加所需信息后，单击**创建项目**按钮：![图8.2 - 项目屏幕
- en: '](img/Figure_8.2_B16353.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.2_B16353.jpg)'
- en: Figure 8.2 – Projects screen
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 - 项目屏幕
- en: Congratulations! You have created your first project.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已创建了您的第一个项目。
- en: Next, check the project history. We can use the version control feature on our
    Node-RED flow editor. You can access the project history panel by clicking the
    **project history** button in the top-right corner:![Figure 8.3 – Project history
    panel
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，检查项目历史。我们可以在Node-RED流程编辑器上使用版本控制功能。您可以通过单击右上角的**项目历史**按钮访问项目历史面板：![图8.3
    - 项目历史面板
- en: '](img/Figure_8.3_B16353.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.3_B16353.jpg)'
- en: Figure 8.3 – Project history panel
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 - 项目历史面板
- en: You can see no changed items on this panel. To check whether the change history
    feature is enabled, make a flow on this workspace.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在此面板上看到没有更改的项目。要检查更改历史功能是否已启用，请在此工作区上创建一个流程。
- en: If you are a regular user of Git or GitHub, you should be able to understand
    the meaning and role of each item just by looking at the structure of this panel.
    If there is a change in the file structure or contents under the project, the
    target file will be displayed in the **Local Changes** area. When you move the
    change to the commit stage (that is, when you add it), the display of the target
    file moves to the **Changes to commit** area. If you enter a commit message and
    complete the commit, the version will be incremented by one.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您经常使用Git或GitHub，您应该能够通过查看此面板的结构来理解每个项目的含义和作用。如果项目下的文件结构或内容发生变化，目标文件将显示在**本地更改**区域。当您将更改移动到提交阶段（即添加时），目标文件的显示将移动到**要提交的更改**区域。如果输入提交消息并完成提交，版本将增加一次。
- en: This is exactly the same as what the Git client does.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这与Git客户端所做的完全相同。
- en: Create a flow and keep it simple. You can make any flow of your choice, for
    example, here I have used an `flow.json` file in the `flow.json` file, which is
    the configuration file for this entire flow, has been updated. As a result, `flow.json`
    has been recognized as a file to be changed in Git management:![Figure 8.5 – Node-RED
    recognizes that flow.json has been changed
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个简单的流程。您可以创建任何您选择的流程，例如，我在`flow.json`文件中使用了一个`flow.json`文件，这是整个流程的配置文件，已经更新。因此，`flow.json`已被识别为Git管理中要更改的文件：![图8.5
    - Node-RED认识到flow.json已更改
- en: '](img/Figure_8.5_B16353.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.5_B16353.jpg)'
- en: Figure 8.5 – Node-RED recognizes that flow.json has been changed
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5-Node-RED已经意识到flow.json已更改
- en: Now, let's follow Git etiquette and proceed with the process. First, put the
    changed file on the commit stage. This is the `git add` command of Git.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们遵循Git的规范并继续进行。首先，将更改的文件放在提交阶段。这是Git的`git add`命令。
- en: Click the `flow.json` file has moved from the **Local Changes** area to the
    **commit** area.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击`flow.json`文件已从**本地更改**区域移动到**提交**区域。
- en: Next, let's commit the changes in `flow.json`. Click the `git commit` command:![Figure
    8.7 – Clicking the commit button to commit the file
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们提交`flow.json`中的更改。单击`git commit`命令：![图8.7-单击提交按钮提交文件
- en: '](img/Figure_8.7_B16353.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.7_B16353.jpg)'
- en: Figure 8.7 – Clicking the commit button to commit the file
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7-单击提交按钮提交文件
- en: After clicking the **commit** button, the commit comment window will be opened.
    Please enter a commit comment here and then click the **Commit** button:![Figure
    8.8 – Clicking the Commit button to complete the commit process
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**提交**按钮后，将打开提交注释窗口。请在此处输入提交注释，然后单击**提交**按钮：![图8.8-单击提交按钮完成提交过程
- en: '](img/Figure_8.8_B16353.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.8_B16353.jpg)'
- en: Figure 8.8 – Clicking the Commit button to complete the commit process
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8-单击提交按钮完成提交过程
- en: 'The commit is now complete. Finally, let''s check the **Commit History** area.
    You can see that a new version has been created as a change history:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交现在已完成。最后，让我们检查**提交历史**区域。您会看到已创建一个新版本作为更改历史：
- en: '![Figure 8.9 – New history has been added'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.9-已添加新历史'
- en: '](img/Figure_8.9_B16353.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.9_B16353.jpg)'
- en: Figure 8.9 – New history has been added
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9-已添加新历史
- en: As you learned, after creating your project, it will be possible to use the
    Node-RED editor the same as usual.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建项目后，您可以像往常一样使用Node-RED编辑器。
- en: Now, let's add a new user interface to the Node-RED flow editor for project
    functionality.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为Node-RED流编辑器添加一个新的用户界面以实现项目功能。
- en: Accessing project settings
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问项目设置
- en: 'The project you are working on will appear at the top of the right-hand pane.
    Next to the project name, there is also a **Show project settings** button:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您正在处理的项目将显示在右侧窗格的顶部。在项目名称旁边，还有一个**显示项目设置**按钮：
- en: '![Figure 8.10 – Project information on the info panel'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.10-信息面板上的项目信息'
- en: '](img/Figure_8.10_B16353.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.10_B16353.jpg)'
- en: Figure 8.10 – Project information on the info panel
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10-信息面板上的项目信息
- en: 'You can also access the **Project Settings** screen from the **Projects | Project
    Settings** option under the main menu:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从主菜单下的“项目 | 项目设置”选项中访问**项目设置**屏幕：
- en: '![Figure 8.11 – How to access Project Settings via the main menu'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.11-如何通过主菜单访问项目设置'
- en: '](img/Figure_8.11_B16353.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.11_B16353.jpg)'
- en: Figure 8.11 – How to access Project Settings via the main menu
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.11-如何通过主菜单访问项目设置
- en: 'When the **Project Settings** panel is shown, you will see that it has three
    tabs for each setting:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当显示**项目设置**面板时，您会看到每个设置有三个选项卡：
- en: '`README.md` file of this project'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此项目的`README.md`文件
- en: '**Dependencies**: Managing the list of nodes for your project'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖项**：管理项目的节点列表'
- en: '**Settings**: Managing the project settings and the remote repositories:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置**：管理项目设置和远程存储库：'
- en: '![Figure 8.12 – The Project Settings panel'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.12-项目设置面板'
- en: '](img/Figure_8.12_B16353.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.12_B16353.jpg)'
- en: Figure 8.12 – The Project Settings panel
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.12-项目设置面板
- en: 'If you want to check and modify the Git settings, you can access the settings
    panel via the main menu:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要检查和修改Git设置，可以通过主菜单访问设置面板：
- en: '![Figure 8.13 – Git config on the User Settings panel'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.13-用户设置面板上的Git配置'
- en: '](img/Figure_8.13_B16353.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.13_B16353.jpg)'
- en: Figure 8.13 – Git config on the User Settings panel
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.13-用户设置面板上的Git配置'
- en: Now you know how to version control in your local environment. The next step
    entails understanding how to connect a remote repository such as a GitHub service.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道如何在本地环境中进行版本控制。下一步是了解如何连接远程存储库，比如GitHub服务。
- en: Connecting a remote repository
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接远程存储库
- en: Now, let's learn how to connect Node-RED to a remote repository such as GitHub.
    Here, we will use the GitHub service for the remote repository. This is like connecting
    local Git and remote GitHub via Node-RED. This is nothing special. It is familiar
    to people who use Git/GitHub on a regular basis, but it's very similar to the
    situation where GitHub is used as a client tool. It is very easy for you to manage
    the version with Node-RED.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习如何将Node-RED连接到GitHub等远程存储库。在这里，我们将使用GitHub服务作为远程存储库。这就像通过Node-RED连接本地Git和远程GitHub一样。这并没有什么特别之处。对于经常使用Git/GitHub的人来说，这是很熟悉的，但它与GitHub用作客户端工具的情况非常相似。您可以很容易地使用Node-RED管理版本。
- en: 'Create a remote repository of your Node-RED project on GitHub with the help
    of the following steps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下步骤在GitHub上创建Node-RED项目的远程存储库：
- en: First, go to your GitHub account and create a repository.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，转到您的GitHub帐户并创建一个存储库。
- en: 'It''s a good idea to use a project name similar to your local repository. We
    won''t go into details of how to use GitHub here, but since it is a service that
    can be used intuitively, I believe that anyone can use it without any problems:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最好使用与您的本地存储库类似的项目名称。我们不会在这里详细介绍如何使用GitHub，但由于它是一个可以直观使用的服务，我相信任何人都可以在没有任何问题的情况下使用它：
- en: '![Figure 8.14 – Creating a repository on your GitHub'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.14-在GitHub上创建存储库'
- en: '](img/Figure_8.14_B16353.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.14_B16353.jpg)'
- en: Figure 8.14 – Creating a repository on your GitHub
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14-在GitHub上创建存储库
- en: Configure the project settings of your Node-RED. To do this, return to the Node-RED
    flow editor and then go to **Project Settings** to connect the local and remote
    repositories. When the **Project Settings** panel is opened, click the **add remote**
    button to configure the remote repository information:![Figure 8.15 – Clicking
    the add remote button on the Project Settings panel
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置您的Node-RED项目设置。要做到这一点，请返回到Node-RED流编辑器，然后转到**项目设置**以连接本地和远程存储库。打开**项目设置**面板后，单击**添加远程**按钮以配置远程存储库信息：![图8.15
    - 在项目设置面板上点击添加远程按钮
- en: '](img/Figure_8.15_B16353.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.15_B16353.jpg)'
- en: Figure 8.15 – Clicking the add remote button on the Project Settings panel
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.15 - 在项目设置面板上点击添加远程按钮
- en: Please enter the repository URL you created on GitHub and then click the **Add
    remote** button:![Figure 8.16 – Setting your GitHub repository's URL
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请输入您在GitHub上创建的存储库URL，然后单击**添加远程**按钮：![图8.16 - 设置您的GitHub存储库的URL
- en: '](img/Figure_8.16_B16353.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.16_B16353.jpg)'
- en: Figure 8.16 – Setting your GitHub repository's URL
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.16 - 设置您的GitHub存储库的URL
- en: Click the **Close** button at the top right of the settings panel to complete
    this configuration.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击设置面板右上角的**关闭**按钮以完成此配置。
- en: Next, merge the repositories.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，合并存储库。
- en: 'The remote repository on GitHub is now linked to the Git repository in your
    local environment. But they are not yet in sync. All you have to do is pull the
    remote locally and merge it. To do this, select the **history** panel on the side
    information menu, and then click the **Manage remote branch** button on the **Commit
    History** panel to connect to your remote repository:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub上的远程存储库现在已连接到您本地环境中的Git存储库。但它们尚未同步。您只需在本地拉取远程并进行合并。要做到这一点，请在侧边信息菜单中选择**历史**面板，然后在**提交历史**面板上单击**管理远程分支**按钮以连接到您的远程存储库：
- en: '![Figure 8.17 – Setting your GitHub repository''s URL'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.17 - 设置您的GitHub存储库的URL'
- en: '](img/Figure_8.17_B16353.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.17_B16353.jpg)'
- en: Figure 8.17 – Setting your GitHub repository's URL
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.17 - 设置您的GitHub存储库的URL
- en: Select your remote branch. Usually, the **origin/master** branch is selected:![Figure
    8.18 – Selecting your remote branch
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您要推送的远程分支。通常会选择**origin/master**分支：![图8.18 - 选择您的远程分支
- en: '](img/Figure_8.18_B16353.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.18_B16353.jpg)'
- en: Figure 8.18 – Selecting your remote branch
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.18 - 选择您的远程分支
- en: Here, there is a difference between remote and local because we have already
    created the flow locally and versioned it with local Git. In this case, you need
    to pull the remote content locally before you can push the local content to the
    remote.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，远程和本地之间存在差异，因为我们已经在本地创建了流程，并使用本地Git进行了版本控制。在这种情况下，您需要在将本地内容推送到远程之前，将远程内容拉取到本地。
- en: Click the **pull** button:![Figure 8.19 – Pulling the commits from the remote
    repository
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**pull**按钮：![图8.19 - 从远程存储库拉取提交
- en: '](img/Figure_8.19_B16353.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.19_B16353.jpg)'
- en: Figure 8.19 – Pulling the commits from the remote repository
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.19 - 从远程存储库拉取提交
- en: A message indicating a conflict will be displayed en route, but proceed with
    the merge as it is. During the merge, you will be asked whether you want to apply
    the remote changes or the local changes. In that case, apply the changes on the
    local side to complete the merge.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在途中会显示冲突的消息，但请继续进行合并。在合并过程中，将会询问您是要应用远程更改还是本地更改。在这种情况下，请应用本地端的更改以完成合并。
- en: 'Following the operation, you will see that your local branch has been merged
    with your remote branch on the **Commit History** panel:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 操作完成后，您将看到您的本地分支已与**提交历史**面板上的远程分支合并：
- en: '![Figure 8.20 – Merged remote and local repositories'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.20 - 合并远程和本地存储库'
- en: '](img/Figure_8.20_B16353.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.20_B16353.jpg)'
- en: Figure 8.20 – Merged remote and local repositories
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.20 - 合并远程和本地存储库
- en: After this, select the **Manage remote branch** button (the up and down arrows):![Figure
    8.21 – Clicking the Manage remote branch button
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之后，选择**管理远程分支**按钮（上下箭头）：![图8.21 - 点击管理远程分支按钮
- en: '](img/Figure_8.21_B16353.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.21_B16353.jpg)'
- en: Figure 8.21 – Clicking the Manage remote branch button
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.21 - 点击管理远程分支按钮
- en: 'Select the branch you want to push and then click the **push** button to send
    (push) these changes to a remote repository:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要推送的分支，然后单击**push**按钮将这些更改发送（推送）到远程存储库：
- en: '![Figure 8.22 – Sending the changes to the remote repository'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.22 - 将更改发送到远程存储库'
- en: '](img/Figure_8.22_B16353.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.22_B16353.jpg)'
- en: Figure 8.22 – Sending the changes to the remote repository
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.22 - 将更改发送到远程存储库
- en: Congratulations! Now you have learned how to use the project feature on Node-RED
    and you can also connect a remote repository from your local repository of Node-RED.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！现在您已经学会了如何在Node-RED上使用项目功能，您还可以将Node-RED的本地存储库连接到远程存储库。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to enable the project feature of Node-RED and
    integrate local version control using Git with a remote repository created on
    GitHub. This will be very useful when you develop a team using Node-RED in the
    future.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何启用Node-RED的项目功能，并使用GitHub上创建的远程存储库集成本地版本控制Git。在未来使用Node-RED开发团队时，这将非常有用。
- en: In the next chapter, we will use this project feature to clone the repository
    of a to-do application locally. By studying this chapter and the next chapter
    together, you should have a greater in-depth understanding of the project feature.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用此项目功能在本地克隆待办事项应用程序的存储库。通过一起学习本章和下一章，您应该对项目功能有更深入的了解。
