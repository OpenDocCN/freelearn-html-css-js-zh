- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: JavaScript is a quirky little language that was written by Brendan Eich when
    he was working at Netscape around 1995\. It was the first browser-based scripting
    language and ran only in Netscape Navigator at the time, but it eventually found
    its way into most other web browsers. Back then, web pages consisted almost entirely
    of static markup. JavaScript (initially named LiveScript) emerged around the need
    to make pages dynamic and to bring the power of a full scripting language to browser
    developers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是由Brendan Eich在1995年左右在网景工作时编写的一种古怪的小语言。它是第一种基于浏览器的脚本语言，当时只在网景导航器中运行，但最终它找到了自己的位置，进入了大多数其他的Web浏览器。当时，网页几乎完全由静态标记组成。JavaScript（最初名为LiveScript）的出现是因为需要使页面动态化，并为浏览器开发人员带来完整脚本语言的功能。
- en: A lot of the design decisions of the language were driven by the need of simplicity
    and ease of use, although at the time, some were made for pure marketing reasons
    at Netscape. The name "JavaScript" was chosen to associate it with Java from Sun
    Microsystems, despite the fact that Sun really had nothing to do with it and that
    it's conceptually quite different from its namesake.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 语言的许多设计决策都是出于简单和易用的需要，尽管当时有些决策纯粹是出于网景的营销原因。选择“JavaScript”这个名字是为了将它与Sun Microsystems的Java联系起来，尽管事实上Sun与之无关，而且它在概念上与Java有很大不同。
- en: Except in one way, that is, most of its syntax was borrowed from Java, and also
    C and C++, so as to be familiar to the programmers coming from these languages.
    But despite looking similar, it is in fact a very different beast under the hood
    and shares characteristics with the more exotic languages such as Self, Scheme,
    and Smalltalk. Among these are dynamic typing, prototypical inheritance, first
    class functions, and closures.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了一种方式，即大部分语法都是从Java、C和C++中借鉴而来，以便让那些熟悉这些语言的程序员感到熟悉。但尽管看起来相似，实际上它在内部是一个非常不同的东西，并且具有与更奇特的语言（如Self、Scheme和Smalltalk）相似的特征。其中包括动态类型、原型继承、一级函数和闭包。
- en: So we ended up with a language that looked a lot like some of the mainstream
    languages at the time and could be coaxed into acting a lot like them, but with
    quite different central ideas. This has caused it to be very misunderstood for
    many years. A lot of programmers never saw it as being a "serious" programming
    language and thus didn't apply a lot of the best development practices built up
    over decades when it came to writing browser code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们最终得到了一种看起来很像当时的一些主流语言，并且可以被迫以与它们非常不同的中心思想行事的语言。这导致它在很多年里被人们误解。很多程序员从未将它视为一种“严肃”的编程语言，因此在编写浏览器代码时，他们没有应用几十年来积累的许多最佳开发实践。
- en: Those who did delve further into the language were sure to find a lot of strangeness.
    Eich himself admitted that the language was prototyped within about 10 days, and
    even though what he came up with was impressive, JavaScript isn't without (many)
    warts. These too didn't really help to raise its profile.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 那些深入研究这门语言的人肯定会发现很多奇怪之处。Eich本人承认，这门语言的原型大约在10天内完成，尽管他的成果令人印象深刻，但JavaScript并非没有（很多）缺陷。这些缺陷并没有真正有助于提升它的声誉。
- en: Despite all these issues, JavaScript still became one of the most widely used
    programming languages in the world, if not merely because of the explosion of
    the Internet and the spread of web browsers. Support across a multitude of browsers
    would seem to be a great thing, but it also caused havoc because of differences
    in implementations, both in the language and the DOM.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在所有这些问题，JavaScript仍然成为世界上最广泛使用的编程语言之一，这不仅仅是因为互联网的爆炸和Web浏览器的普及。在众多浏览器上的支持似乎是一件好事，但它也因为在语言和DOM的实现上的差异而造成了混乱。
- en: Around 2005, the term AJAX was coined to describe a style of JavaScript programming
    that was made possible by the introduction of the `XMLHTTPRequest` object in browsers.
    This meant that developers could write client-side code that could communicate
    with the server using HTTP directly, and update page elements without reloading
    the page. This was really a turning point in the history of the language. All
    of a sudden, it was being used in "serious" web applications, and people began
    to see the language in a different light.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在2005年，AJAX这个术语被创造出来，用来描述一种JavaScript编程风格，这种风格是由浏览器中`XMLHTTPRequest`对象的引入所可能的。这意味着开发人员可以编写客户端代码，直接使用HTTP与服务器通信，并在不重新加载页面的情况下更新页面元素。这真的是语言历史上的一个转折点。突然之间，它被用于“严肃”的Web应用程序，并且人们开始以不同的方式看待这门语言。
- en: In 2006, John Resig released jQuery to the world. It was designed to simplify
    client-side scripting, DOM manipulation, and AJAX, as well as to abstract away
    many of the inconsistencies across browsers. It became an essential tool for many
    JavaScript programmers. To date, it is used on 55 percent of the top 10, 000 websites
    in the world.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2006年，John Resig向世界发布了jQuery。它旨在简化客户端脚本编写、DOM操作和AJAX，以及抽象掉许多浏览器之间的不一致性。它成为了许多JavaScript程序员的必备工具。迄今为止，它在全球前10,000个网站中被使用了55%。
- en: In 2009, Ryan Dahl created Node.js, an event-driven network application framework
    written on top of the Google V8 JavaScript engine. It quickly became very popular,
    especially for writing web server applications. A big factor in its success has
    been the fact that you could now write JavaScript on the server, as well as in
    the browser. An elaborate and distinguished community has sprung up around the
    framework, and at present the future of Node.js is looking very bright.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年，Ryan Dahl创建了Node.js，这是一个基于Google V8 JavaScript引擎编写的事件驱动网络应用程序框架。它迅速变得非常流行，特别是用于编写Web服务器应用程序。它成功的一个重要因素是，现在你可以在服务器上编写JavaScript，而不仅仅是在浏览器中。围绕这个框架形成了一个复杂而杰出的社区，目前Node.js的未来看起来非常光明。
- en: Early in 2010, Jeremy Ashkenas created CoffeeScript, a language that compiles
    to JavaScript. Its goal is to create cleaner, more concise, and more idiomatic
    JavaScript and to make it easier to use the better features and patterns of the
    language. It does away with a lot of the syntactic cruft of JavaScript, reducing
    the line noise and generally creating much shorter and clearer code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 2010年初，Jeremy Ashkenas创建了CoffeeScript，这是一种编译成JavaScript的语言。它的目标是创建更清洁、更简洁、更惯用的JavaScript，并使其更容易使用语言的更好特性和模式。它摒弃了JavaScript的许多语法冗长，减少了行噪音，通常创建了更短更清晰的代码。
- en: Influenced by languages such as Ruby, Python, and Haskell, it borrows some of
    the powerful and interesting features of these languages. Although it can look
    quite different, the CoffeeScript code generally maps to its generated JavaScript
    pretty closely. It has grown to be an overnight success, quickly being adopted
    by the Node.js community as well as being included in Ruby on Rails 3.1.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 受到Ruby、Python和Haskell等语言的影响，它借用了这些语言的一些强大和有趣的特性。尽管它看起来可能相当不同，但CoffeeScript代码通常与生成的JavaScript非常接近。它已经成为一夜成功，很快被Node.js社区采纳，并被包含在Ruby
    on Rails 3.1中。
- en: Brendan Eich has also expressed his admiration for CoffeeScript, and has used
    it as an example of some of the things he would like to see in the future versions
    of JavaScript.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Brendan Eich也表达了对CoffeeScript的钦佩，并将其用作他希望在未来版本的JavaScript中看到的一些东西的例子。
- en: This book serves as an introduction to the language as well as a motivation
    for why you should write CoffeeScript instead of JavaScript wherever you can.
    It also then explores using CoffeeScript in the browser using jQuery and Ruby
    on Rails, as well as on the server using Node.js.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本书既是对该语言的介绍，也是为什么您应该在尽可能的地方使用CoffeeScript而不是JavaScript的动机。它还探讨了在浏览器中使用CoffeeScript使用jQuery和Ruby
    on Rails，以及在服务器上使用Node.js。
- en: What this book covers
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖的内容
- en: '[Chapter 1](ch01.html "Chapter 1. Why CoffeeScript?"), *Why CoffeeScript?*,
    introduces CoffeeScript and delves deeper into the differences between it and
    JavaScript, specifically focusing on the parts of JavaScript that CoffeeScript
    aims to improve.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第1章，为什么使用CoffeeScript，介绍了CoffeeScript并深入探讨了它与JavaScript之间的区别，特别关注CoffeeScript旨在改进的JavaScript部分。
- en: '[Chapter 2](ch02.html "Chapter 2. Running CoffeeScript"), *Running CoffeeScript*,
    goes into a short introduction of the CoffeeScript stack and how it''s typically
    packaged. You will learn how to install CoffeeScript on Windows, Mac, and Linux
    using Node.js and npm. You will get to know the CoffeeScript compiler (`coffee`)
    as well as get familiar with some helpful tools and resources for day-to-day development
    in CoffeeScript.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第2章，运行CoffeeScript，简要介绍了CoffeeScript堆栈以及它通常是如何打包的。您将学习如何在Windows、Mac和Linux上使用Node.js和npm安装CoffeeScript。您将了解CoffeeScript编译器（`coffee`）以及熟悉一些有用的工具和日常开发资源。
- en: '[Chapter 3](ch03.html "Chapter 3. CoffeeScript and jQuery"), *CoffeeScript
    and jQuery*, introduces client-side development using jQuery and CoffeeScript.
    We also start implementing a sample application for this book using these technologies.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第3章，CoffeeScript和jQuery，介绍了使用jQuery和CoffeeScript进行客户端开发。我们还开始使用这些技术来实现本书的示例应用程序。
- en: '[Chapter 4](ch04.html "Chapter 4. CoffeeScript and Rails"), *CoffeeScript and
    Rails*, starts with a brief overview of Ruby on Rails, and its history with JavaScript
    frameworks. We are introduced to the Asset Pipeline in Rails 3.1 and how it integrates
    with CoffeeScript and jQuery. We then move to adding a backend to our sample application
    using Rails.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章，CoffeeScript和Rails，首先简要概述了Ruby on Rails及其与JavaScript框架的历史。我们介绍了Rails 3.1中的Asset
    Pipeline以及它如何与CoffeeScript和jQuery集成。然后我们使用Rails为我们的示例应用程序添加后端。
- en: '[Chapter 5](ch05.html "Chapter 5. CoffeeScript and Node.js"), *CoffeeScript
    and Node.js*, starts with a brief overview of Node.js, its history, and philosophy.
    It then demonstrates how easy it is to write server-side code in CoffeeScript
    using Node.js. We then implement the final piece of the sample application using
    WebSockets and Node.js.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章，CoffeeScript和Node.js，首先简要概述了Node.js，它的历史和哲学。然后演示了使用Node.js在CoffeeScript中编写服务器端代码有多么容易。然后我们使用WebSockets和Node.js实现了示例应用程序的最后一部分。
- en: What you need for this book
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你需要什么来阅读本书
- en: To use this book, you need a computer running Windows, Mac OS X, or Linux and
    a basic text editor. Throughout the book, we'll be downloading some software that
    we need from the Internet, all of which will be free and open source.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用本书，您需要一台运行Windows、Mac OS X或Linux的计算机和一个基本的文本编辑器。在整本书中，我们将从互联网上下载一些我们需要的软件，所有这些软件都将是免费和开源的。
- en: Who this book is for
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书适合谁
- en: This book is for existing JavaScript programmers who would like to learn more
    about CoffeeScript, or someone who has some programming experience and would like
    to learn more about web development using CoffeeScript. It also serves as a great
    introduction to jQuery, Ruby on Rails, and Node.js. Even if you have experience
    with one or more of these frameworks, this book will show you how you can use
    CoffeeScript to make your experiences with them even better.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书适合现有的JavaScript程序员，他们想了解更多关于CoffeeScript的知识，或者有一些编程经验并想了解更多关于使用CoffeeScript进行Web开发。它还是jQuery、Ruby
    on Rails和Node.js的绝佳入门书籍。即使您有这些框架中的一个或多个的经验，本书也会向您展示如何使用CoffeeScript使您的体验变得更好。
- en: Conventions
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约定
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您会发现一些区分不同信息类型的文本样式。以下是一些这些样式的示例，以及它们的含义解释。
- en: 'Code words in text are shown as follows: "You''ll see that the clause of the
    `if` statement does not need be enclosed within parentheses".'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码词显示如下：“您会发现`if`语句的子句不需要用括号括起来”。
- en: 'A block of code is set as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望引起您对代码块的特定部分的注意时，相关行或项目会以粗体显示：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都以以下方式书写：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "a footer will have the **Clear completed** button".'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**新术语**和**重要单词**以粗体显示。您在屏幕上看到的单词，比如菜单或对话框中的单词，会在文本中以这种方式出现："页脚将有**清除已完成**按钮"。'
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Warnings or important notes appear in a box like this.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要提示会以这样的框出现。
- en: Tip
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Tips and tricks appear like this.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 提示和技巧会以这种方式出现。
