- en: Testing an MEVN Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试MEVN应用程序
- en: 'Let''s do a quick recap of what we have done so far in previous chapters:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速回顾一下我们在之前章节中所做的工作：
- en: We created different Vue components for different pages
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为不同的页面创建了不同的Vue组件
- en: We implemented Vuex—centralized state management for Vue.js applications, and
    defined state, getters, mutations, and actions for the components
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们实现了Vuex——用于Vue.js应用程序的集中状态管理，并为组件定义了状态、获取器、变化和操作
- en: We created controllers and models to interact with the Node.js backend
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了控制器和模型来与Node.js后端交互
- en: In this chapter, we will discuss how to write test code to make sure that everything
    in the application works well. Writing test code is an integral part of any application.
    It helps to ensure that the functionalities that we have written do not break,
    and maintains the quality of the code we write.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何编写测试代码，以确保应用程序中的一切都能正常工作。编写测试代码是任何应用程序的重要组成部分。它有助于确保我们编写的功能不会出错，并保持代码的质量。
- en: Different practices can be followed while writing tests. It's always a good
    practice to write test code first, before writing the actual code. Writing tests
    ensures that our application will not break and everything will work as expected.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 编写测试时可以遵循不同的实践。在编写实际代码之前，首先编写测试代码总是一个很好的实践。编写测试可以确保我们的应用不会出错，并且一切都会按预期工作。
- en: This helps us to write better code and also helps to reveal the potential problems
    before they arise.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于我们编写更好的代码，也有助于在问题出现之前揭示潜在问题。
- en: Benefits of writing tests
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写测试的好处
- en: 'Writing test code when developing an application has a lot of benefits. Some
    of them are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发应用程序时编写测试代码有很多好处。其中一些如下：
- en: '**Ensures code works as expected**: It helps to ensure that each piece of functionality
    that we have written in our application works exactly as expected.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确保代码按预期工作**：它有助于确保我们在应用程序中编写的每个功能都能按预期工作。'
- en: '**Improves the quality of code**: It improves the quality of code. Since writing
    test code helps to  pre-empt defects that may arise, before we write actual code,
    it improves the quality of the code.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高代码质量**：它提高了代码的质量。由于编写测试代码有助于在编写实际代码之前预防可能出现的缺陷，因此它提高了代码的质量。'
- en: '**Identifies bugs beforehand**: It helps to identify bugs in the early stages.
    Since test code is written for every functionality, bugs and issues can be identified
    early.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提前识别错误**：它有助于在早期阶段识别错误。由于为每个功能编写了测试代码，因此可以在早期识别出错误和问题。'
- en: '**Serves as documentation for new developers**: Test code is like documentation.
    If we need new developers to start work on the same application, test code helps
    them to understand how the application works instead of going through all the
    application code.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为新开发人员提供文档**：测试代码就像文档。如果我们需要新的开发人员开始在同一个应用程序上工作，测试代码可以帮助他们理解应用程序的工作方式，而不必查看所有应用程序代码。'
- en: '**Application development is faster with test code**: If we write code without
    the test code, we will code faster. However, if we skip the process, we will later
    spending most of our time later fixing the bugs that will start to crawl in, which
    could have been identified earlier with the test code.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用测试代码加快应用程序开发速度**：如果我们不编写测试代码，编写代码会更快。然而，如果跳过这个过程，后来我们将花费大部分时间来修复可能已经出现的错误，而这些错误本可以在测试代码中提前识别出来。'
- en: '**Application doesn''t need to be run**: Writing test code and running it doesn''t
    require the application to be up and running. It also doesn''t require the application
    to be built either. This reduces the development time significantly.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序不需要运行**：编写测试代码并运行它不需要应用程序运行。它也不需要构建应用程序。这显著减少了开发时间。'
- en: 'So, in this chapter, we will discuss the following topics:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将讨论以下主题：
- en: Learn why and how to write unit tests and end-to-end tests
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解为什么以及如何编写单元测试和端到端测试
- en: Learn about the technologies for writing test code for a Vue.js and Node.js
    application
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解为Vue.js和Node.js应用程序编写测试代码的技术
- en: Modify our application's structure to implement unit and end-to-end code
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改应用程序的结构以实现单元测试和端到端代码
- en: Write test code for Vue components
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Vue组件编写测试代码
- en: Introduction to unit tests
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试简介
- en: Unit testing is a software development process in which the smallest functionality
    of the application is tested and examined to check whether it works as expected
    or not. A unit is the smallest part of any application. Every test code written
    for a unit of an application is independent of each other. The goal of unit testing
    itself is to perform an individual tests and make sure that each piece is correct.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是软件开发过程中对应用程序的最小功能进行测试和检查，以检查它是否按预期工作。一个单元是任何应用程序的最小部分。为应用程序的一个单元编写的每个测试代码都是相互独立的。单元测试本身的目标是执行单独的测试，并确保每个部分都是正确的。
- en: Convention for writing unit tests
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写单元测试的约定
- en: 'If you follow certain guidelines and principles while writing unit tests, it
    makes your code maintainable and readable. The following are a few techniques
    that we can use while writing unit tests for any application:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在编写单元测试时遵循一定的指导方针和原则，可以使代码易于维护和可读。以下是编写任何应用程序的单元测试时可以使用的一些技术：
- en: Unit testing should be carried out in small units—for a single class or a method.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试应该在小单元中进行——针对单个类或方法。
- en: Unit testing should be carried out in isolation, meaning that a unit test should
    not be dependent on any other classes or methods, which is achieved by mocking
    such dependencies.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试应该在隔离环境中进行，这意味着单元测试不应依赖于任何其他类或方法，这可以通过模拟这些依赖来实现。
- en: Since unit testing is done in smaller parts, these should be very lightweight,
    which makes the tests run faster.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于单元测试是在较小的部分中进行的，因此这些部分应该非常轻量级，这样测试就可以更快地运行。
- en: A unit test should test the behavior of a unit of an application. It should
    expect a certain value and return a certain output.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试应该测试应用程序的一个单元的行为。它应该期望某个值并返回某个输出。
- en: Since unit tests are done in isolation, the ordering of tests for different
    units does not create a problem.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于单元测试是独立进行的，不同单元的测试顺序不会造成问题。
- en: Follow **Do not Repeat Yourself** (**DRY**); the code should not be repeatable.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循**不要重复自己**（**DRY**）；代码不应该重复。
- en: Add comments explaining where you can, which explains the why part of the test
    so that it is understandable.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加注释以解释在哪里可以解释测试的原因，以便能够理解。
- en: An introduction to end-to-end test
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端到端测试简介
- en: End-to-end testing is the testing of our application from start to finish. Where
    as unit testing tests whether the functionalities of your application work independently
    or not—end-to-end testing checks whether the flow of the application is performing
    as expected or not. Usually, the end-to-end testing makes sure that all the user
    interactions are carried out the way as expected. End-to-end testing ensures that
    the flow of the application is working as expected.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端测试是从头到尾测试我们的应用程序。而单元测试测试应用程序的功能是否独立工作，端到端测试检查应用程序的流程是否按预期执行。通常，端到端测试确保所有用户交互都按预期方式进行。端到端测试确保应用程序的流程按预期工作。
- en: Convention for writing end-to-end tests
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写端到端测试的约定
- en: 'There are certain guidelines to be followed when writing the end-to-end tests:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写端到端测试时，需要遵循一些特定的指导方针：
- en: Test cases should be written considering the end users and considering the real
    scenario
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例应该考虑最终用户和真实场景
- en: Multiple test cases should be created for different scenarios
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该为不同的场景创建多个测试用例。
- en: The requirements should be gathered for all the software or applications that
    are involved
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该为涉及的所有软件或应用程序收集需求
- en: For each requirement, gather as many conditions or scenarios as possible
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个需求，收集尽可能多的条件或场景
- en: Write separate test cases for each scenario
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个场景编写单独的测试用例
- en: Technologies we will be using
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们将使用的技术
- en: 'Here are some of the packages that we will be working with to write the tests
    for our application:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将使用的一些软件包，用于编写应用程序的测试：
- en: '**Mocha**: A JavaScript test framework to write unit testing ([https://mochajs.org/](https://mochajs.org/))'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mocha**：JavaScript测试框架，用于编写单元测试（[https://mochajs.org/](https://mochajs.org/)）'
- en: '**Chai**: An assertion library for the Node.js framework ([http://chaijs.com/](http://chaijs.com/))'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chai**：Node.js框架的断言库（[http://chaijs.com/](http://chaijs.com/)）'
- en: '**Sinon**: `sinon` is for test spies, stubs, and mocks ([http://sinonjs.org/](http://sinonjs.org/))'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sinon**：`sinon`用于测试间谍、存根和模拟对象（[http://sinonjs.org/](http://sinonjs.org/)）'
- en: '**Nightwatch**: A JavaScript library for writing end-to-end tests ([http://nightwatchjs.org/](http://nightwatchjs.org/))'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nightwatch**：用于编写端到端测试的JavaScript库（[http://nightwatchjs.org/](http://nightwatchjs.org/)）'
- en: '**Karma**: `karma` is the test runner for JavaScript ([https://karma-runner.github.io/2.0/index.html](https://karma-runner.github.io/2.0/index.html))'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Karma**：`karma`是JavaScript的测试运行器（[https://karma-runner.github.io/2.0/index.html](https://karma-runner.github.io/2.0/index.html)）'
- en: We will discuss each of these technologies as we go along.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在学习过程中讨论这些技术。
- en: Introducing Mocha
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Mocha
- en: 'Let''s create a separate working directory to learn to write tests. Create
    a folder called `test_js`  and switch to the `test_js` directory:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个单独的工作目录来学习如何编写测试。创建一个名为`test_js`的文件夹，并切换到`test_js`目录：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s also create a separate folder for `test` inside the `test_js` folder:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还在`test_js`文件夹中创建一个名为`test`的单独文件夹：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To access `mocha`, you have to install it globally:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问`mocha`，您必须全局安装它：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let's write a simple test code in `mocha`. We will write a test for a simple
    function, which takes two arguments and returns the sum of the arguments.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`mocha`中编写一个简单的测试代码。我们将为一个简单的函数编写一个测试，该函数接受两个参数并返回参数的总和。
- en: 'Let''s create a file called `add.spec.js` inside the `test` folder and add
    the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`test`文件夹中创建一个名为`add.spec.js`的文件，并添加以下代码：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, run the following command from the `test_js` folder:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从`test_js`文件夹运行以下命令：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This test will fail, and we will require a utility called `add.js`, which does
    not exist. It displays the following error:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试将失败，我们需要一个名为`add.js`的实用程序，但它不存在。它显示以下错误：
- en: '![](img/7fb7cc82-8cec-40c1-8d5f-584929a7e921.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7fb7cc82-8cec-40c1-8d5f-584929a7e921.png)'
- en: 'Let''s go ahead and write just enough code to pass the test. Create a file
    called `add.js` in the root of the `test_js` project and run the code again, which
    should pass:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续并编写足够的代码来通过测试。在`test_js`项目的根目录中创建一个名为`add.js`的文件，并再次运行代码，这应该通过：
- en: '![](img/4fb775f9-cbe4-48e8-bfec-babd34f2c394.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4fb775f9-cbe4-48e8-bfec-babd34f2c394.png)'
- en: 'Let''s go ahead and add the logic to the test code to check our `add` function.
    In `add.spec.js`, add the following lines of code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续并添加逻辑到测试代码中，以检查我们的`add`函数。在`add.spec.js`中，添加以下代码：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now comes the `assert` library. The `assert` library helps to check whether
    the passed expression is right or wrong. Here, we will use the built-in assertion
    library for Node.js.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是`assert`库的时间了。`assert`库有助于检查传递的表达式是对还是错。在这里，我们将使用Node.js的内置断言库。
- en: 'To include the `assert` library, let''s add the following lines of code in
    `add.spec.js`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要包含`assert`库，让我们在`add.spec.js`中添加以下代码：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s rerun `mocha`. This should again fail, because we haven''t added a method
    to our module. So, let''s go ahead and do that.  In `add.js`, let''s add the following
    code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新运行`mocha`。这应该再次失败，因为我们还没有向我们的模块添加方法。所以，让我们继续做。在`add.js`中，添加以下代码：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s rerun `mocha`. The spec should pass now:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新运行`mocha`。现在规范应该通过了：
- en: '![](img/1e2c62a1-ff29-41b8-a5d3-13c0548354fe.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e2c62a1-ff29-41b8-a5d3-13c0548354fe.png)'
- en: 'Now, let''s add the functional part to the sum method. In `add_spec.js`, add
    the following code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为sum方法添加功能部分。在`add_spec.js`中，添加以下代码：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, take a look at the test; it fails. Then, add the logic to our module:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，查看测试；它失败了。然后，添加逻辑到我们的模块：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, rerun `mocha` and the test should pass. That''s it!:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，重新运行`mocha`，测试应该通过。就是这样！：
- en: '![](img/031b7203-8a24-4c76-a0ea-cfa3dcfb0996.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/031b7203-8a24-4c76-a0ea-cfa3dcfb0996.png)'
- en: You can go on adding a few more cases to the test to ensure that nothing breaks.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以继续添加一些更多的测试用例，以确保没有任何问题。
- en: Introducing chai
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍chai
- en: Let's discuss `chai`. `chai` is an assertion library, used with `mocha`. We
    could also use the native `assertion` library , but `chai` adds a lot of flexibility.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论`chai`。`chai`是一个断言库，与`mocha`一起使用。我们也可以使用原生的`assertion`库，但`chai`增加了很多灵活性。
- en: '`chai` makes it a lot easier to write test definitions. Let''s install `chai`
    and modify the preceding test to make it look more simple and easy to understand:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`chai`使得编写测试定义变得更加容易。让我们安装`chai`并修改上述测试，使其看起来更简单易懂：'
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We passed the `-g` option to install it globally, since we do not have a `package.json`
    configuration.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传递了`-g`选项以全局安装它，因为我们没有`package.json`配置。
- en: 'Let''s use `chai` in our previous test. In `add.spec.js`, add the following
    lines of code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在之前的测试中使用`chai`。在`add.spec.js`中，添加以下代码行：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We have replaced the `assertion` library with, `chai` `expect()` method, which
    makes the code very much simpler and understandable.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经用`chai`的`expect()`方法替换了`assertion`库，这使得代码变得更简单和易懂。
- en: Introducing sinon
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍sinon
- en: '`sinon` is used to test spies, stubs, and mocks for JavaScript tests. To learn
    about these, let''s move on to the movie rating application we have in our `controller`
    file, `controller/movies.js`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`sinon`用于测试JavaScript测试的间谍、存根和模拟。要了解这些，让我们继续进行我们在`controller/movies.js`文件中的电影评分应用程序：'
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding code, each API call needs a request and a response object,
    which we need to mock. For this purpose, we have `sinon`. `sinon` provides us with
    a mechanism to `stub` and `mock` the requests.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，每个API调用都需要一个请求和一个响应对象，我们需要对其进行模拟。为此，我们有`sinon`。`sinon`为我们提供了一个机制来`stub`和`mock`请求。
- en: 'The three major methods that `sinon` provides are spies, stubs, and mocks:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`sinon`提供的三种主要方法是间谍、存根和模拟：'
- en: '**Spies**: Spies helps to create fake functions. We can use spies to track
    whether the functions are executed or not.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**间谍**：间谍有助于创建虚假函数。我们可以使用间谍来跟踪函数是否被执行。'
- en: '**Stubs**: Stubs helps us to make functions return whatever we want. This is
    useful when we want to test different scenarios for the given function.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存根**：存根帮助我们使函数返回我们想要的任何内容。当我们想要测试给定函数的不同场景时，这是很有用的。'
- en: '**Mocks**: Mocks are used to fake network connections. They help to create
    a dummy class instance, which helps to set the predetermined expectations.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟**：模拟用于伪造网络连接。它们有助于创建一个虚拟的类实例，这有助于设置预定的期望。'
- en: 'Let''s write a test for a `get` call in the `movies` controller:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为`movies`控制器中的`get`调用编写一个测试：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s create a new file, called `movies.spec.js`, inside the `test/units`
    folder:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`test/units`文件夹中创建一个名为`movies.spec.js`的新文件：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This test code simply checks whether the `controller` exists or not, which
    should pass when we run the following command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试代码只是检查`controller`是否存在，当我们运行以下命令时应该通过：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This command runs the tests for our `controller/movies.js` and should pass
    with the following output:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令运行我们的`controller/movies.js`的测试，并应该通过以下输出：
- en: '![](img/19083b7c-1469-4580-99ad-672027db64f7.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19083b7c-1469-4580-99ad-672027db64f7.png)'
- en: 'Let''s first write a test for a simple method. Let''s create a request that
    responds with just an object with a name. In `movies.js`,  let''s add the following
    code to create a dummy API:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先为一个简单的方法编写一个测试。让我们创建一个响应只包含一个名称的对象的请求。在`movies.js`中，让我们添加以下代码来创建一个虚拟API：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding code, we have a simple method that returns an object.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们有一个返回对象的简单方法。
- en: Let's move on to add the functional test part. We will be writing the test for
    the `/dummy_test` method.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加功能测试部分。我们将为`/dummy_test`方法编写测试。
- en: 'In `movies.spec.js`, let''s add the following lines of code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在`movies.spec.js`中，让我们添加以下代码行：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the preceding code, we have added a new package called `chai-http`, which
    is used to mock the request. Let''s install this package, as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们添加了一个名为`chai-http`的新包，用于模拟请求。让我们安装这个包，如下所示：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s now run the test with the following command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用以下命令运行测试：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The preceding command should give us the following output:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令应该给我们以下输出：
- en: '![](img/f7e5559c-b74b-43cb-ab62-d6998504a05a.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f7e5559c-b74b-43cb-ab62-d6998504a05a.png)'
- en: Writing tests for Node.js server
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Node.js服务器编写测试
- en: Let's start writing the tests for the application we built for the backend part
    of the `node` server.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始为我们为`node`服务器的后端部分构建的应用程序编写测试。
- en: 'We will be using the following folder structure:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下文件夹结构：
- en: '![](img/d12847d5-9326-47f1-a4c8-c06f8178230f.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d12847d5-9326-47f1-a4c8-c06f8178230f.png)'
- en: There are two folders inside the `test` folder. One for unit testing, called
    `unit`, and another for end-to-end testing, called `e2e`. We will start by writing
    the unit tests, which go under the `unit` directory. The naming convention is
    appending the `.spec` part to the filename for every file we will be writing tests
    for.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`test`文件夹内有两个文件夹。一个用于单元测试，名为`unit`，另一个用于端到端测试，名为`e2e`。我们将从编写单元测试开始，它们位于`unit`目录下。命名约定是为我们将编写测试的每个文件的文件名添加`.spec`部分。'
- en: Writing tests for controllers
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为控制器编写测试
- en: 'Let''s get started with writing tests for the controllers we added. Create
    a folder called `controllers` inside the `test/unit/specs` and create a new file
    inside it called `movies.spec.js`. This will be the naming convention that we
    will follow while creating the test files for any components: controllers, models,
    or Vue components—the actual filename followed by `.spec.js`. This helps to maintain
    the readability of the code.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始为我们添加的控制器编写测试。在`test/unit/specs`内创建一个名为`controllers`的文件夹，并在其中创建一个名为`movies.spec.js`的新文件。这将是我们在为任何组件创建测试文件时遵循的命名约定：控制器、模型或Vue组件的实际文件名后跟`.spec.js`。这有助于保持代码的可读性。
- en: 'Let''s first recap what we have in our `movies.js` file:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先回顾一下我们的`movies.js`文件中有什么：
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This controller has two methods—one GET request and a POST request. The GET
    request is for fetching all the movies from the database, and the POST request saves
    the movies with the given parameters to the database.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这个控制器有两个方法——一个是GET请求，一个是POST请求。GET请求是为了从数据库中获取所有电影，而POST请求是将给定参数的电影保存到数据库中。
- en: 'Let''s move on to adding the spec for the GET request first. Add the following
    contents in the `movies.spec.js` file that we just created:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续首先为GET请求添加规范。将以下内容添加到我们刚刚创建的`movies.spec.js`文件中：
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The first two lines required the corresponding controller and model for the `Movie`
    component, which we will need later. We will also require the server file.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 前两行需要`Movie`组件的相应控制器和模型，我们稍后会需要。我们还需要服务器文件。
- en: The other packages, such as `chai`, `sinon`, `expect`, and `should`, are needed
    for the assertions.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 其他包，如`chai`、`sinon`、`expect`和`should`，都是断言所需的。
- en: 'The next thing that we will need to make requests to the server is a package
    called `chai-http`.  This package will be used for HTTP request assertions. So,
    let''s install this package first with the following command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来需要向服务器发出请求的是一个名为`chai-http`的包。这个包将用于HTTP请求断言。因此，让我们首先使用以下命令安装这个包：
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, we can get ahead with adding the first test. Replace the contents in `movies.spec.js`
    with the following code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续添加第一个测试。用以下代码替换`movies.spec.js`中的内容：
- en: '[PRE23]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding method describes the `movies` controller. It simply checks whether
    the controller we are describing exists or not.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法描述了`movies`控制器。它只是检查我们正在描述的控制器是否存在。
- en: 'To make sure we have the connection of our `node` server, let''s export the
    server from `server.js`. Add the following code into `server.js`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们有`node`服务器的连接，让我们从`server.js`中导出服务器。将以下代码添加到`server.js`中：
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, let''s run the test using the following command:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令运行测试：
- en: '[PRE25]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The test should pass.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应该通过。
- en: 'Let''s move on to adding the test for the GET request. In `movies.js`, we have
    the following code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加GET请求的测试。在`movies.js`中，我们有以下代码：
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Since this method fetches all the existing movies from the database, we will
    first need to build the mock movies here to actually test it. Let''s replace the
    contents of `movies.spec.js` with the following code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个方法从数据库中获取所有现有的电影，我们首先需要在这里构建模拟电影来进行实际测试。让我们用以下代码替换`movies.spec.js`中的内容：
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s learn step by step what we did here:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步地学习我们在这里做了什么：
- en: We created a couple of movies with `sinon` mocks
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`sinon`模拟了一些电影
- en: We created an HTTP GET request using `chai`
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`chai`创建了一个HTTP GET请求
- en: 'We had three expectations:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有三个期望：
- en: The status of the request should be `200`
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求的状态应该是`200`
- en: The request response should be an object
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求响应应该是一个对象
- en: The response should contain the list of movies that we created with the mock
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应应该包含我们使用模拟创建的电影列表
- en: 'Let''s run the test again with the following command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下命令再次运行测试：
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The tests should pass.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应该通过。
- en: 'Let''s now move on to add the tests for the POST request for `movies.js`. In
    `movies.js`, here is what we have so far:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续为`movies.js`的POST请求添加测试。在`movies.js`中，目前我们有以下内容：
- en: '[PRE29]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The POST method takes the preceding four attributes of the movie and saves
    them to the database. Let''s add the test for this POST request. Replace the contents
    of `movies.spec.js` with the following code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: POST方法获取电影的前四个属性，并将它们保存到数据库中。让我们为这个POST请求添加测试。用以下代码替换`movies.spec.js`中的内容：
- en: '[PRE30]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here, in the preceding code block, what we have done is, for the POST request:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码块中，我们为POST请求做了以下操作：
- en: 'We are sending the POST request with movie parameters: `name`, `description`,
    `release_year`, and `genre`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在发送带有电影参数的POST请求：`name`、`description`、`release_year`和`genre`
- en: 'We had three expectations:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有三个期望：
- en: The status of the request should be `200`
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求的状态应该是`200`
- en: The request response should be an object
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求响应应该是一个对象
- en: The response should contain all four attributes, along with the ID of the movie
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应应该包含所有四个属性，以及电影的ID。
- en: Now if we run the tests again, they should all pass.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们再次运行测试，它们应该都通过。
- en: Similarly, we can add tests for other controllers as well.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们也可以为其他控制器添加测试。
- en: Writing tests for models
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为模型编写测试
- en: Let's move on to adding the tests for the models that we have defined. Let's
    create a folder called `models` inside `test/unit/specs` and create a test file
    for our `Movie.js` model. So, the name of the spec file would be `Movie.spec.js`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加我们定义的模型的测试。在`test/unit/specs`内创建一个名为`models`的文件夹，并为我们的`Movie.js`模型创建一个测试文件。因此，规范文件的名称将是`Movie.spec.js`。
- en: 'Let''s first take a look at what we have in our `Movie.js`:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看我们在`Movie.js`中有什么：
- en: '[PRE31]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We just have a `Schema` defined here, which defines the data type for the `Movie`
    collection.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里只定义了一个`Schema`，它定义了`Movie`集合的数据类型。
- en: 'Let''s add the specs for this model. Add the following contents to the `Movie.spec.js`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为这个模型添加规范。将以下内容添加到`Movie.spec.js`中：
- en: '[PRE32]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We do not need all the components that we added to the controller test here.
    We just have simple assertion tests here, so we will need the `Movie` model and
    the `chai` methods.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要在这里添加到控制器测试的所有组件。我们只需要简单的断言测试，所以我们需要`Movie`模型和`chai`方法。
- en: 'Let''s add the test for the `Movie` existence just like we did for the controller.
    Replace the contents in `Movie.spec.js` with the following code:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们像为控制器一样为`Movie`的存在性添加测试。用以下代码替换`Movie.spec.js`中的内容：
- en: '[PRE33]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This test checks whether the `Model` we are describing exists or not. Let''s
    run the test using the following command:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试检查我们正在描述的`Model`是否存在。让我们使用以下命令运行测试：
- en: '[PRE34]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The test should pass with the following output:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应该通过，并输出如下：
- en: '![](img/4da3257a-1664-4b20-b273-9196fb3ba7eb.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4da3257a-1664-4b20-b273-9196fb3ba7eb.png)'
- en: Let's move on to add a test when we send the `release_year` attribute of the
    `Movie` a string. Since we have a validation for the `release_year` attribute,
    sending a string value to it should throw an error.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加一个测试，当我们发送`Movie`的`release_year`属性为字符串时。由于我们对`release_year`属性进行了验证，因此向其发送字符串值应该会引发错误。
- en: 'Replace the contents in `Movie.spec.js` with the following code:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码替换`Movie.spec.js`中的内容：
- en: '[PRE35]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Here, we have prepared a movie object with `release_year` with an invalid value.
    The expectation we have here is that, when validating the model, it should send
    an error.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们准备了一个带有无效值的`release_year`的电影对象。我们的期望是，在验证模型时，它应该发送一个错误。
- en: 'Let''s run the test, and it should pass with the following output:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行测试，它应该通过并输出以下内容：
- en: '![](img/4860ebca-061b-41d0-855f-a41f93c04a9e.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4860ebca-061b-41d0-855f-a41f93c04a9e.png)'
- en: Similarly, we can add tests for other models as well.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们也可以为其他模型添加测试。
- en: Writing tests for Vue.js components
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Vue.js组件编写测试
- en: Let's move on to write the test specs for our Vue.js components. We will start
    with the simplest component, which is the `Contact.vue` page.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续为我们的Vue.js组件编写测试规范。我们将从最简单的组件开始，即`Contact.vue`页面。
- en: 'This is what we have in our `Contact.vue` page so far:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在`Contact.vue`页面中目前拥有的内容：
- en: '[PRE36]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let''s modify the component a little bit to make the tests more understandable.
    Replace the contents in `Contact.vue` with the following code:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微修改组件，以使测试更容易理解。用以下代码替换`Contact.vue`中的内容：
- en: '[PRE37]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, let''s first create the necessary folder and file to write our tests.
    Create a file called `Contact.spec.js` inside the `test/unit/specs` directory
    and add the following contents to it:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们首先创建必要的文件夹和文件来编写我们的测试。在`test/unit/specs`目录中创建一个名为`Contact.spec.js`的文件，并添加以下内容：
- en: '[PRE38]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In the preceding code, we have added a test to check whether the `vue` component
    `Contact.vue` renders the correct contents or not. We expected to have a `div`
    element with the `contact` class, and inside it, there should be an `h1` tag,
    which should contain the `this is contact` content.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们添加了一个测试，以检查`vue`组件`Contact.vue`是否呈现了正确的内容。我们期望有一个带有`contact`类的`div`元素，并且在其中应该有一个`h1`标签，其中应该包含`this
    is contact`内容。
- en: 'Now, to make sure that our tests run, let''s verify that we have the correct
    script set up to run the unit test in `package.json`:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了确保我们的测试运行，让我们验证我们在`package.json`中设置了正确的脚本来运行单元测试：
- en: '[PRE39]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, let''s run the test with the following command:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们用以下命令运行测试：
- en: '[PRE40]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The test should pass with the following output:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应该通过并输出以下内容：
- en: '![](img/78d15aee-07a0-4fb6-bea0-efe3af6bb819.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78d15aee-07a0-4fb6-bea0-efe3af6bb819.png)'
- en: 'Let''s move on to add specs for the component called `AddMovie.vue.` Create
    a file called `AddMovie.spec.js` inside `test/unit/specs` and add the following
    contents:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续为名为`AddMovie.vue`的组件添加规范。在`test/unit/specs`文件夹中创建一个名为`AddMovie.spec.js`的文件，并添加以下内容：
- en: '[PRE41]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This test states that the `years` variable should have the given values, which
    is `['2018', '2017', '2016', '2015']`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试说明`years`变量应该具有给定的值，即`['2018', '2017', '2016', '2015']`。
- en: 'Let''s add another test to check whether the required methods exist in our
    `vue` component, `AddMovie.js`, or not. Replace the contents in `AddMovie.spec.js`
    with the following code:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加另一个测试，以检查我们的`vue`组件`AddMovie.js`中是否存在所需的方法。将`AddMovie.spec.js`中的内容替换为以下代码：
- en: '[PRE42]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now, let''s run the tests with the following command:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们用以下命令运行测试：
- en: '[PRE43]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The tests should pass.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应该通过。
- en: 'Finally, to run all the tests, we can simply run the following command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要运行所有测试，我们只需运行以下命令：
- en: '[PRE44]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Writing e2e testing
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写端到端测试
- en: The vue.js applications created with `vue-cli` command contains the support
    for end-to-end testing which uses `Nightwatch`. `Nightwatch` is a very easy framework
    to write end-to-end test. `Nightwatch` uses `Selenium` commands to run the JavaScript.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`vue-cli`命令创建的vue.js应用程序包含对使用`Nightwatch`进行端到端测试的支持。`Nightwatch`是一个非常简单的编写端到端测试的框架。`Nightwatch`使用`Selenium`命令来运行JavaScript。
- en: Installing Nightwatch
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Nightwatch
- en: 'If you haven''t set up the application for `e2e`, then let''s first install
    the package needed to run the `e2e` tests:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有为`e2e`设置应用程序，那么让我们首先安装运行`e2e`测试所需的包：
- en: '[PRE45]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Configuring Nightwatch
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Nightwatch
- en: 'Now, we need a configuration file to run the test. Create a folder called `e2e`
    inside the `test` folder. Add the `nightwatch.conf.js` file and add the following
    contents to it:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一个配置文件来运行测试。在`test`文件夹中创建一个名为`e2e`的文件夹。添加`nightwatch.conf.js`文件，并添加以下内容：
- en: '[PRE46]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: In the preceding code, in the setting inside the `test_settings` attribute,
    we can see the different setups for different browsers. In this case, Chrome,
    Firefox, and the host and port settings for the development environment to run
    on the browser.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，在`test_settings`属性内的设置中，我们可以看到不同浏览器的不同设置。在这种情况下，Chrome，Firefox以及在浏览器上运行开发环境的主机和端口设置。
- en: 'Also, in the preceding code, we have specified two folders: `specs` and `custom-assertions`.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在上述代码中，我们指定了两个文件夹：`specs`和`custom-assertions`。
- en: The `specs` folder contains the main test code for the application
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`specs`文件夹包含应用程序的主要测试代码'
- en: '`custom-assertion` contains a script, which contains custom messages that get
    displayed when assertion tests are run on the command line'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`custom-assertion`包含一个脚本，其中包含在命令行上运行断言测试时显示的自定义消息'
- en: 'Let''s first set up our `custom-assertions`. Create a file called `elementCount.js`
    inside `custom-assertions` and add the following contents to it:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先设置我们的`custom-assertions`。在`custom-assertions`文件夹中创建一个名为`elementCount.js`的文件，并添加以下内容：
- en: '[PRE47]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'If you checked the `e2e` option when creating this application, you should
    also have the `test/e2e/specs/test.js` file. If not, go ahead and create this
    file and add the following contents into it:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在创建此应用程序时选择了`e2e`选项，那么您还应该有`test/e2e/specs/test.js`文件。如果没有，请继续创建此文件并将以下内容添加到其中：
- en: '[PRE48]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This is the main file, where we will add our test cases for the application.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这是主文件，我们将在其中为应用程序添加测试用例。
- en: The end-to-end testing makes sure that all the the flow of our application is
    performing as expected or not. When we run the `e2e` test, we want certain parts
    of our application to be clicked and behave the way it should. This can be described
    as testing the behavior of the application.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端测试确保我们的应用程序的所有流程是否按预期执行。当我们运行`e2e`测试时，我们希望应用程序的某些部分被点击并表现出应有的行为。这可以描述为测试应用程序的行为。
- en: 'To be able to run the `e2e` tests, we will need to start a `selenium-server`.
    If we take a look at the `test/e2e/nightwatch.conf.js` file, we can find a line
    that says:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够运行`e2e`测试，我们需要启动`selenium-server`。如果我们查看`test/e2e/nightwatch.conf.js`文件，可以找到一行代码：
- en: '[PRE49]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This means that when we run the `e2e` test, a `selenium-server` is started automatically,
    and we don't have to run a separate server. The port defines which port to use
    for `selenium-server`. You can leave this as it is and run the test, or you can
    change the values and configure it yourself.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当我们运行`e2e`测试时，`selenium-server`会自动启动，我们不需要运行单独的服务器。端口定义了用于`selenium-server`的端口。您可以将其保留不变并运行测试，或者您可以更改值并自行配置。
- en: 'Finally, we need a `runner` file for `Nightwatch` to run the test. Create a
    file called `runner.js` inside the `e2e` folder and add the following contents:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要一个`runner`文件来运行`Nightwatch`测试。在`e2e`文件夹中创建一个名为`runner.js`的文件，并添加以下内容：
- en: '[PRE50]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We will use a stand-alone Selenium server and port `5555` for this application.
    For that, we will need to install the standalone server first:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为此应用使用独立的Selenium服务器和端口`5555`。为此，我们首先需要安装独立服务器：
- en: '[PRE51]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Let''s run the package using the following command:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行包：
- en: '[PRE52]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The `npx` is a command that runs the npm packages.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`npx`是运行npm包的命令。'
- en: Since we are using the `5555` port, we will need to update it in the `nightwatch.conf.js`
    file as well.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用`5555`端口，因此我们还需要在`nightwatch.conf.js`文件中进行更新。
- en: 'Update the Selenium config in `nightwatch.conf.js` with the following code:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码更新`nightwatch.conf.js`中的Selenium配置：
- en: '[PRE53]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Since we are using the `8081` port to run the `node` server, make sure that
    you update the `devServerURL` attribute as well, as was done in the preceding
    piece of code.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用`8081`端口运行`node`服务器，请确保您也更新了`devServerURL`属性，就像在前面的代码片段中所做的那样。
- en: 'Now, we are all set to run the tests with the following command:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好使用以下命令运行测试：
- en: '[PRE54]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The test should fail with the following output:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应该失败，并显示以下输出：
- en: '![](img/61bec658-6b51-44f6-a8dc-a8dba79c76cb.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61bec658-6b51-44f6-a8dc-a8dba79c76cb.png)'
- en: The tests are failing because we do not have the element present with the `.hello`
    class in our application. So, to make the tests pass, we first need to add an
    identifier to the elements, which we will be doing as a part the `e2e` tests by
    following the below steps.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 测试失败是因为我们的应用程序中没有具有`.hello`类的元素。因此，为了使测试通过，我们首先需要为元素添加标识符，这将作为`e2e`测试的一部分来完成，具体步骤如下。
- en: 'Here are the things that we want to capture with the `e2e` test:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们希望通过`e2e`测试捕获的内容：
- en: Open the browser using `http://localhost:8081`
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`http://localhost:8081`打开浏览器
- en: 'Check whether the element with the `#inspire` ID exists. We have defined that
    in `App.vue` with the following code:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查是否存在具有`#inspire`ID的元素。我们在`App.vue`中使用以下代码定义了这一点：
- en: '[PRE55]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Check that the sidebar consists of the `Home` and `Contact` page links
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查侧边栏是否包含`Home`和`Contact`页面链接
- en: Click on the `Contact` page
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Contact`页面
- en: The contact page should contain the text `this is contact`
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 联系页面应包含文本`this is contact`
- en: Click on the login page to make sure that the login works fine
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击登录页面，确保登录正常工作
- en: Add a movie to our application
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向我们的应用程序添加电影
- en: Rate the movie
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对电影进行评分
- en: Finally, add the ability for users to log out of the application
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加用户注销应用的功能
- en: These are the important parts of our application. So, we will need to add an
    identifier to all of preceding components. The best practice for adding an identifier
    to the elements is to define a `class` or an `id` while building the application
    itself. However, we will assign an identifier to the now.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们应用程序的重要部分。因此，我们需要为所有先前的组件添加标识符。在构建应用程序本身时，为元素添加标识符的最佳实践是定义`class`或`id`。但是，我们将为当前分配一个标识符。
- en: 'In `App.vue`, update the highlighted parts with the following code:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App.vue`中，使用以下代码更新高亮部分：
- en: '[PRE56]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Also, let''s update the `id` in `AddMovie.vue`:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，让我们更新`AddMovie.vue`中的`id`：
- en: '[PRE57]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Also, in `Login.vue`, let''s add corresponding `id` for the form fields:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在`Login.vue`中，让我们为表单字段添加相应的`id`：
- en: '[PRE58]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'In `Movie.vue`, update the `id` for `Rate this Movie` with:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Movie.vue`中，使用以下代码更新`Rate this Movie`的`id`：
- en: '[PRE59]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: We have added the necessary identifier to all of the components. Now, let's
    add the `e2e` tests for the previously mentioned scenarios.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为所有组件添加了必要的标识符。现在，让我们为先前提到的场景添加`e2e`测试。
- en: 'Replace the contents of `test/e2e/specs/test.js` with the following code:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码替换`test/e2e/specs/test.js`的内容：
- en: '[PRE60]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'To run the `e2e` script, make sure that we have set up the correct command
    in `package.json`:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行`e2e`脚本，请确保我们在`package.json`中设置了正确的命令：
- en: '[PRE61]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'After adding the `e2e` script, we should be able to run the test with the following
    command:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`e2e`脚本后，我们应该能够使用以下命令运行测试：
- en: '[PRE62]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Now, all the tests should pass, and the output should look like this:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有测试应该通过，并且输出应如下所示：
- en: '![](img/4288c176-6724-4551-ae71-395d9b03501b.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4288c176-6724-4551-ae71-395d9b03501b.png)'
- en: Summary
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to write unit tests and we discussed the different
    technologies you can use to write them, such as `chai`, `mocha`, and `sinon`.
    You also learned to write tests for controllers, models, and Vue component.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何编写单元测试，并讨论了可以用来编写它们的不同技术，例如`chai`，`mocha`和`sinon`。您还学会了为控制器、模型和Vue组件编写测试。
- en: In the next chapter, you will learn about continuous integration and how to
    deploy your apps to Heroku using GitHub.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习有关持续集成以及如何使用GitHub将应用程序部署到Heroku的内容。
