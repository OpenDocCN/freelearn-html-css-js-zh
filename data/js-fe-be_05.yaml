- en: '*Chapter 3*: Getting Started with Vue.js'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第3章*: Vue.js 入门'
- en: 'The JavaScript world is constantly changing. In recent years, a new concept
    has emerged: that of developing applications by creating components.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 世界在不断发展。近年来，一个新概念出现了：通过创建组件来开发应用程序。
- en: New JavaScript libraries for developing component-based apps have emerged, the
    main ones being Angular, React, Svelte, and **Vue.js**. Among all these libraries,
    which are quite similar to each other, we have chosen to present Vue.js to you
    because it is widely used and quite simple to implement. The other libraries mentioned
    operate according to the same principles.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 新的基于组件的 Web 应用程序开发 JavaScript 库已经出现，其中主要的是 Angular、React、Svelte 和 **Vue.js**。在这些彼此之间相当相似的库中，我们选择向您介绍
    Vue.js，因为它被广泛使用且易于实现。提到的其他库遵循相同的原理。
- en: Why Use Vue.js?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么使用 Vue.js？
- en: The main advantage of Vue.js is the possibility of developing an application
    using components. We cut the web application into a set of components (actually
    JavaScript files) and then assemble them to form the final application. Vue.js
    can test each component independently of the others and can also reuse them in
    other applications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 的主要优势是能够使用组件来开发应用程序。我们将 Web 应用程序切割成一系列组件（实际上是 JavaScript 文件），然后组装它们以形成最终的应用程序。Vue.js
    可以独立于其他组件测试每个组件，并且还可以在其他应用程序中重用它们。
- en: In this chapter, we will study how to build our first application with Vue.js,
    by creating and using our first component.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究如何通过创建和使用我们的第一个组件来使用 Vue.js 构建我们的第一个应用程序。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Using Vue.js in an HTML page
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 HTML 页面中使用 Vue.js
- en: Creating our first Vue.js application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个 Vue.js 应用程序
- en: Using reactivity
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用响应性
- en: Creating our first component
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个组件
- en: Adding methods in components
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在组件中添加方法
- en: Using attributes in components
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在组件中使用属性
- en: Using directives
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用指令
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the code files for this chapter on GitHub at: [https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%203.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%203.zip).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 GitHub 上找到本章的代码文件：[https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%203.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%203.zip)。
- en: Using Vue.js in an HTML page
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 HTML 页面中使用 Vue.js
- en: To use Vue.js in an HTML page, simply insert the library file into it using
    the `<script>` tag.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 HTML 页面中使用 Vue.js，只需使用 `<script>` 标签将其库文件插入到页面中。
- en: 'To check that Vue.js is correctly integrated into the page, let’s display the
    version number of the library in the `Vue.version` variable:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查 Vue.js 是否正确集成到页面中，让我们在 `Vue.version` 变量中显示库的版本号：
- en: Displaying Vue.js version number (index.html file)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 显示 Vue.js 版本号（index.html 文件）
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If Vue.js is accessible in the page, the `Vue` object provides access to the
    version number in its `version` property as we can see in the following figure:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Vue.js 可在页面上访问，`Vue` 对象通过其 `version` 属性提供对版本号的访问，正如我们可以在以下图中看到：
- en: '![Figure 3.1 – Displaying the Vue.js version number'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.1 – 显示 Vue.js 版本号'
- en: '](img/Figure_3.1_B17416.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.1 – 显示 Vue.js 版本号](img/Figure_3.1_B17416.jpg)'
- en: Figure 3.1 – Displaying the Vue.js version number
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 – 显示 Vue.js 版本号
- en: Now that we have integrated Vue.js into our HTML page, let’s go about creating
    our first application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将 Vue.js 集成到我们的 HTML 页面中，让我们着手创建我们的第一个应用程序。
- en: Creating our first Vue.js application
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个 Vue.js 应用程序
- en: Once Vue.js has been inserted into the HTML page, you must define the HTML elements
    of the page in which Vue.js will be used.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将 Vue.js 插入到 HTML 页面中，您必须定义页面上 Vue.js 将要使用的 HTML 元素。
- en: In general, you want to use Vue.js on the whole HTML page, but it is possible
    to use it only on certain elements of the page as well. This would allow us, for
    example, to manage an HTML page with jQuery, except for a particular `<div>` element,
    which would be managed with Vue.js.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您希望在整个 HTML 页面上使用 Vue.js，但也可以仅在某些页面元素上使用它。例如，我们可以使用 jQuery 管理一个 HTML 页面，除了特定的
    `<div>` 元素，它将使用 Vue.js 管理。
- en: 'To illustrate this, let us create an HTML page with two `<div>` elements, only
    the first of which will be managed by Vue.js:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，让我们创建一个包含两个 `<div>` 元素的 HTML 页面，其中只有第一个将由 Vue.js 管理：
- en: Creating an HTML page partially managed by Vue.js
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 创建部分由 Vue.js 管理的 HTML 页面
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the preceding code, we have used the `Vue.createApp(options)` method defined
    on the `Vue` object. The `options` object is used to set options for creating
    the Vue.js application. One of the options of `Vue.createApp(options)` is the
    `template` option, which allows us to define the view (that is to say the HTML
    display) that will be displayed on the page, thanks to the call of the `app.mount(element)`
    method:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了定义在 `Vue` 对象上的 `Vue.createApp(options)` 方法。`options` 对象用于设置创建 Vue.js
    应用程序的选项。`Vue.createApp(options)` 的一个选项是 `template` 选项，它允许我们定义将在页面上显示的视图（即 HTML
    显示），这得益于 `app.mount(element)` 方法的调用：
- en: The `app` object is the one obtained as a result of the `Vue.createApp()` method
    call.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app` 对象是 `Vue.createApp()` 方法调用得到的结果。'
- en: The `element` parameter represents the HTML element on which Vue.js will act.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` 参数代表 Vue.js 将在其上起作用的 HTML 元素。'
- en: 'Let’s run the previous program; we should see the following output:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的程序；我们应该看到以下输出：
- en: '![Figure 3.2 – First Vue.js app'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.2 – 第一个 Vue.js 应用程序'
- en: '](img/Figure_3.2_B17416.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.2_B17416.jpg)'
- en: Figure 3.2 – First Vue.js app
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 第一个 Vue.js 应用程序
- en: On the preceding screen, we can see the result of using Vue.js on the page.
    The content of the first `<div>` is replaced by the template written in the `options`
    parameter of the `Vue.createApp(options)` method. The second `<div>` is not transformed.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕上，我们可以看到在页面上使用 Vue.js 的结果。第一个 `<div>` 的内容被 `Vue.createApp(options)` 方法的
    `options` 参数中编写的模板所替换。第二个 `<div>` 没有被转换。
- en: Thus, to manage an entire HTML page with Vue.js, just indicate in the `<body>`
    part of the page a single `<div>` element, which will be the one on which Vue.js
    will be activated.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要使用 Vue.js 管理整个 HTML 页面，只需在页面的 `<body>` 部分指定一个单独的 `<div>` 元素，Vue.js 将会在这个元素上激活。
- en: Now let’s see how to use an important concept of Vue.js, which is the correspondence
    between the variables defined in the program and their display on the HTML page.
    This concept is called reactivity.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看一下如何使用 Vue.js 的一个重要概念，即程序中定义的变量与它们在 HTML 页面上显示之间的对应关系。这个概念被称为响应性。
- en: Using reactivity
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用响应性
- en: One of the objectives of Vue.js is to separate the management of the display
    (the **view**) and that of the data (the **model**). This is the concept that
    is frequently found in what is called the **Model View Controller** (**MVC**)
    model.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 的一个目标是将显示管理（即 **视图**）和数据管理（即 **模型**）分离。这是在所谓的 **模型-视图-控制器**（**MVC**）模型中经常遇到的概念。
- en: To illustrate, suppose we want to display a counter that increments from 0\.
    A good separation of view and model would be for the view to constantly display
    the value of the counter, even if that value is changed elsewhere. This concept
    makes it possible not to link the display with the management of the data displayed.
    For this, we use the reactivity offered by Vue.js, by creating so-called **reactive
    variables**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明，假设我们想要显示一个从 0 开始递增的计数器。视图和模型的良好分离将使视图持续显示计数器的值，即使该值在其他地方被更改。这个概念使得不必将显示与显示数据的管理链接起来。为此，我们使用
    Vue.js 提供的响应性，通过创建所谓的 **响应式变量**。
- en: Reactive Variables
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式变量
- en: A variable will be said to be reactive if its modification in memory causes
    it to be modified automatically wherever the variable is displayed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个变量的内存修改导致它在显示的地方自动修改，则称该变量为响应式。
- en: Reactive variables are defined in the `options` object of the `Vue.createApp(options)`
    method. For this, we add in the `options` object, and the definition of the `data()`
    method, which will have to return an object containing the so-called reactive
    variables of the application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Vue.createApp(options)` 方法中定义的 `options` 对象中定义响应式变量。为此，我们在 `options` 对象中添加，并定义
    `data()` 方法，该方法必须返回一个包含应用程序所谓的响应式变量的对象。
- en: 'Let’s use a reactive variable named `count` in our Vue.js application:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 Vue.js 应用程序中使用一个名为 `count` 的响应式变量：
- en: Defining a count reactive variable
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个计数响应式变量
- en: '[PRE30]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In the preceding code, the `count` reactive variable is defined in the `data()`
    method, which returns the `{ count : 0 }` object containing the program’s reactive
    variable. Other variables can be defined afterward.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的代码中，`count` 响应式变量是在 `data()` 方法中定义的，该方法返回包含程序的响应式变量 `{ count : 0 }` 的对象。之后可以定义其他变量。'
- en: This reactive variable can then be used in the template by means of the notation
    with `{{ and }}`. This notation is used to indicate a JavaScript expression, such
    as the value of a variable.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个响应式变量可以通过 `{{ 和 }}` 的符号在模板中使用。这种符号用于表示 JavaScript 表达式，例如变量的值。
- en: 'The definition of a so-called reactive variable makes it possible to link the
    display to the value of the variable. As soon as the variable is modified, the
    display is also modified. We can see the counter value in the following figure:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一个所谓的响应式变量的定义使得将显示与变量的值联系起来成为可能。一旦变量被修改，显示也会相应修改。我们可以在以下图中看到计数器的值：
- en: '![Figure 3.3 – Displaying a reactive variable'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.3 – 显示一个响应式变量'
- en: '](img/Figure_3.3_B17416.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.3 – 显示一个响应式变量](img/Figure_3.3_B17416.jpg)'
- en: Figure 3.3 – Displaying a reactive variable
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 – 显示一个响应式变量
- en: 'The counter remains positioned at its initial value: `count` variable is modified.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 计数器保持在它的初始值：`count`变量被修改。
- en: 'To do this, let’s increment the value of the variable every second as shown
    in the following code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，让我们按照以下代码每秒增加变量的值：
- en: Incrementing count variable every second
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 每秒增加计数变量
- en: '[PRE52]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Using JavaScript’s `setInterval()` function, we increment the value of the `count`
    variable every second. Vue.js provides access to the `count` variable using `vm.count`,
    where `vm` is the object returned by the `app.mount()` method. Reactive variables
    become properties of this `vm` object. In the preceding code, we can see the separation
    of view and data processing, as advocated by the MVC pattern. The incrementation
    of the variable is done outside the view, which would not have been possible with
    a library such as jQuery.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JavaScript的`setInterval()`函数，我们每秒增加`count`变量的值。Vue.js通过`vm.count`提供对`count`变量的访问，其中`vm`是`app.mount()`方法返回的对象。响应式变量成为这个`vm`对象的属性。在之前的代码中，我们可以看到视图和数据处理的分离，这是MVC模式所倡导的。变量的增加是在视图外部完成的，这在像jQuery这样的库中是不可能的。
- en: We can see the incrementation and the automatic update of the display, thanks
    to the reactivity offered by Vue.js, as evident in the following figure
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过Vue.js提供的响应性，在以下图中看到增加和显示的自动更新
- en: '![Figure 3.4 – Incrementing a reactive variable'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.4 – 增加一个响应式变量'
- en: '](img/Figure_3.4_B17416.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.4 – 增加一个响应式变量](img/Figure_3.4_B17416.jpg)'
- en: Figure 3.4 – Incrementing a reactive variable
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – 增加一个响应式变量
- en: The previous program is very simple, but in reality, applications are of course
    more complex. As such, it is necessary to break down an application into small
    pieces, which will then be assembled. Now let’s learn how to write one of the
    small pieces of an application, called a component.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的程序非常简单，但在现实中，应用程序当然更加复杂。因此，有必要将应用程序分解成小块，然后将它们组装起来。现在让我们学习如何编写应用程序的一个小部分，称为组件。
- en: Creating our first component
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个组件
- en: Let’s see how to use Vue.js to create our own components.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用Vue.js创建我们自己的组件。
- en: A Vue.js component will be similar to a new HTML element. It will be used in
    the form of HTML tags to which new attributes can be associated if necessary.
    To use the component, all you have to do is use the corresponding tag.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js组件将类似于一个新的HTML元素。如果需要，它将以HTML标签的形式使用，可以将其与新的属性关联。要使用组件，您只需使用相应的标签。
- en: The components are therefore a means of enriching the HTML code by creating
    our own tags.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，组件是通过创建我们自己的标签来丰富HTML代码的一种方式。
- en: How to Discover the Components to Use to Build Our Application
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如何发现用于构建我们应用程序的组件
- en: All you have to do is visually cut the HTML page you want to display into the
    simplest possible elements (which will be the basic components of your application),
    then group several elements together to form a component that will group them,
    and so on until you have the main component, which will be your complete application.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要做的就是将您想要显示的HTML页面视觉上切割成最简单的元素（这些将成为您应用程序的基本组件），然后将几个元素组合在一起形成一个组件，这些组件将组合它们，依此类推，直到您拥有主组件，这将是您的完整应用程序。
- en: For example, if a list of elements is displayed on the HTML page, each element’s
    line of the list corresponds to a basic component, while the global list that
    groups these different components will be associated with another component. The
    set of all components of the HTML page corresponds to the main component, often
    named `<App>` or `<GlobalApp>`. Let’s see how to create and use the `<counter>`
    component corresponding to the previous counter by first learning how to insert
    the component.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果HTML页面上显示了一个元素列表，列表中的每一行对应一个基本组件，而将这些不同组件组合起来的全局列表将与另一个组件相关联。HTML页面上所有组件的集合对应于主组件，通常命名为`<App>`或`<GlobalApp>`。让我们先学习如何插入组件，然后看看如何创建和使用与之前计数器相对应的`<counter>`组件。
- en: You can create the component directly into the HTML page or include it from
    an external file. Let’s look at these two ways to do it.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接在 HTML 页面中创建组件，或者从外部文件中包含它。让我们看看这两种方法。
- en: Inserting a component in the application file
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在应用程序文件中插入组件
- en: 'A component can simply be embedded in the main application Vue.js file. Just
    use the `app.component(name, options)` method to create it as follows. The variable
    `app` corresponds to the object returned by `Vue.createApp()`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组件可以简单地嵌入到主应用程序 Vue.js 文件中。只需使用 `app.component(name, options)` 方法来创建，如下所示。变量
    `app` 对应于 `Vue.createApp()` 返回的对象：
- en: Creating the <counter> component directly in the application
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 直接在应用程序中创建 <counter> 组件
- en: '[PRE77]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: In the preceding code, the variable `app` corresponds to the object returned
    by `Vue.createApp()`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，变量 `app` 对应于 `Vue.createApp()` 返回的对象。
- en: 'The `app.component(name, options)` method works on the same principle as `Vue.createApp(options)`:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.component(name, options)` 方法与 `Vue.createApp(options)` 的工作原理相同：'
- en: The `name` parameter corresponds to the name of the component, which will then
    be used as tags in HTML templates.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` 参数对应于组件的名称，然后将在 HTML 模板中用作标签。'
- en: The `options` parameter is similar in both cases. There is the `template` section,
    `data`, and so on.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这两种情况下，`options` 参数类似。有 `template` 部分、`data` 等等。
- en: 'The `<counter>` component can then be used in other templates, including the
    one defined for the application. When you run the preceding code, you will see
    the following screen:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`<counter>` 组件可以在其他模板中使用，包括为应用程序定义的模板。当你运行前面的代码时，你会看到以下屏幕：
- en: '![Figure 3.5 – The <counter> component'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.5 – <counter> 组件'
- en: '](img/Figure_3.5_B17416.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_3.5_B17416.jpg)'
- en: Figure 3.5 – The <counter> component
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – <counter> 组件
- en: As we can see in the preceding figure, for the moment, the counter remains at
    `0`. To increment the reactive variable `count` in the component, it is necessary
    to be able to write the instruction of incrementation once the component is created.
    For this, Vue.js provides internal methods allowing access to the life cycle of
    each component created.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，目前计数器保持在 `0`。为了在组件创建后能够写入递增指令，以递增组件中的响应式变量 `count`，必须能够这样做。为此，Vue.js 提供了允许访问每个创建的组件生命周期的内部方法。
- en: One of the methods of a component’s life cycle is the `created()` method. It
    is called when the component is created. You can use this method to write the
    increment of the variable `count` every second, using the `setInterval()` function.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 组件生命周期的方法之一是 `created()` 方法。当组件被创建时，会调用此方法。你可以使用此方法使用 `setInterval()` 函数每秒写入变量
    `count` 的递增。
- en: 'Let’s use the component’s `created()` method as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式使用组件的 `created()` 方法：
- en: Using the component’s created() method
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用组件的 created() 方法
- en: '[PRE100]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: In the preceding code, we have used the notation `()=>` instead of `function()`.
    This notation (called a lambda function) was introduced in the latest versions
    of JavaScript in order to allow the value of `this` to be kept inside callback
    functions, which is necessary here. If you replace the lambda function `()=>`
    with the `function()` keyword, the program won’t work, as the `this` value won’t
    be the same.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了 `()=>` 语法而不是 `function()`。这种语法（称为 lambda 函数）是在 JavaScript 的最新版本中引入的，以便允许在回调函数内部保持
    `this` 的值，这在当前情况下是必要的。如果你将 lambda 函数 `()=>` 替换为 `function()` 关键字，程序将无法工作，因为 `this`
    的值将不同。
- en: 'On running the preceding code, you will see the following output:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的代码后，你会看到以下输出：
- en: '![Figure 3.6 – Incrementing the counter in the component'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.6 – 在组件中递增计数器'
- en: '](img/Figure_3.6_B17416.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_3.6_B17416.jpg)'
- en: Figure 3.6 – Incrementing the counter in the component
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – 在组件中递增计数器
- en: Inserting a component from an external file
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从外部文件插入组件
- en: Rather than defining the component directly in the HTML page, it is preferable
    to define it in an external file. The component can be used in the HTML page thanks
    to the inclusion of the external file in the HTML page. For this, we use the concept
    of modules provided by JavaScript.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 与直接在 HTML 页面中定义组件相比，最好在外部文件中定义它。组件可以通过在 HTML 页面中包含外部文件来在 HTML 页面中使用。为此，我们使用
    JavaScript 提供的模块概念。
- en: The Advantage of Components Defined in an External File
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在外部文件中定义的组件的优势
- en: The advantage of defining the component in an external file is to be able to
    include this file in several different HTML pages, and therefore to use the component
    in several different applications.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 将组件定义在外部文件中的优势是能够将此文件包含在多个不同的 HTML 页面中，因此可以在多个不同的应用程序中使用该组件。
- en: 'The `<counter>` component is defined in an external `counter.js` file as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`<counter>` 组件如下定义在外部 `counter.js` 文件中：'
- en: <counter> component definition (counter.js file)
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`<counter>` 组件定义（`counter.js` 文件）'
- en: '[PRE131]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: The `<counter>` component is defined as an object, having `template`, `data`,
    and `created` properties. Its definition is similar to the one shown previously
    in the `app.component()` method.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`<counter>` 组件被定义为具有 `template`、`data` 和 `created` 属性的对象。其定义与之前在 `app.component()`
    方法中展示的类似。'
- en: The `export default Counter` instruction makes the component accessible in the
    other files where this module is imported.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`export default Counter` 指令使得组件可以在导入此模块的其他文件中使用。'
- en: 'The `<counter>` component can now be integrated into the main file of our application.
    We use the JavaScript `import` statement for this. The code will look as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将 `<counter>` 组件集成到我们应用程序的主文件中。我们使用 JavaScript 的 `import` 语句来实现这一点。代码如下所示：
- en: Importing the component into the program (index.html file)
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 将组件导入程序（`index.html` 文件）
- en: '[PRE145]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'In the preceding code, to import the `counter.js` file and use the corresponding
    component, the following takes place:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，为了导入 `counter.js` 文件并使用相应的组件，发生以下操作：
- en: The `type="module"` attribute is indicated in the `<script>` tag. This allows
    the use of the `import` statement in the JavaScript statements of the `<script>`
    tag.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<script>` 标签中的 `type="module"` 属性表示。这允许在 `<script>` 标签的 JavaScript 语句中使用 `import`
    语句。'
- en: We use the `import` statement to import the corresponding module.
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 `import` 语句来导入相应的模块。
- en: We declare the imported components in the new `components` section. Components
    are declared as an object. The names of the properties in this object correspond
    to the name used by the component in the templates (`<counter>` or `<Counter>`),
    while the values correspond to the name of the imported component (`Counter`).
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在新的 `components` 部分声明导入的组件。组件被声明为一个对象。该对象中属性的名称对应于组件在模板中使用的名称（`<counter>`
    或 `<Counter>`），而值对应于导入的组件的名称（`Counter`）。
- en: Using HTTP Instead of the FILE Protocol
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 HTTP 而不是 FILE 协议
- en: 'However, as we use the import of JavaScript modules, it is necessary to run
    our application on an HTTP server, and no longer with a simple drag and drop as
    before. Hence the use of the URL that begins with `http://localhost`. If you need
    to know how to install an HTTP server, you can, for example, use the documentation
    here: [https://developer.mozilla.org/en-US/docs/Learn/Common_questions/set_up_a_local_testing_server](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/set_up_a_local_testing_server).'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，由于我们使用 JavaScript 模块的导入，有必要在 HTTP 服务器上运行我们的应用程序，而不是像以前那样简单地拖放。因此，使用了以 `http://localhost`
    开头的 URL。如果您需要了解如何安装 HTTP 服务器，例如，您可以使用以下文档：[https://developer.mozilla.org/en-US/docs/Learn/Common_questions/set_up_a_local_testing_server](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/set_up_a_local_testing_server)。
- en: 'In the following figure, we can see that creating a component directly in the
    HTML page or in an external file produces the same result:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图中，我们可以看到直接在 HTML 页面或在外部文件中创建组件会产生相同的结果：
- en: '![Figure 3.7 – Execution of the HTML file on an HTTP server (here, localhost)'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.7 – 在 HTTP 服务器上执行 HTML 文件（此处为 localhost）]'
- en: '](img/Figure_3.7_B17416.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.7_B17416.jpg)'
- en: Figure 3.7 – Execution of the HTML file on an HTTP server (here, localhost)
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – 在 HTTP 服务器上执行 HTML 文件（此处为 localhost）
- en: The current component only has a simple reactive variable. It is possible, in
    a component, to add methods to it that will be used in the component. Now let’s
    take a look at how to do it.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 当前组件仅有一个简单的响应式变量。在组件中，可以添加方法供组件使用。现在让我们看看如何实现。
- en: Adding methods in components
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在组件中添加方法
- en: We have seen how to create reactive variables in a component, using the `data`
    section of the component. It is also possible to create methods in a component
    that can be used in the component template.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何在组件中使用 `data` 部分创建响应式变量。在组件中还可以创建可以在组件模板中使用的方法。
- en: 'There are two ways to add methods to a component:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 向组件添加方法有两种方式：
- en: The first is to define the method in the `methods` section of the component.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种方法是在组件的 `methods` 部分定义方法。
- en: The second is to create a so-called computed property that will be defined in
    the `computed` section of the component.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种方法是创建一个所谓的计算属性，它将在组件的 `computed` 部分中定义。
- en: Let’s look at these two ways to do it.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这两种实现方式。
- en: Defining methods in the methods section
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 `methods` 部分中定义方法
- en: For each incrementation of the counter, it should be necessary to display the
    time at which it occurs. A `time()` function would be very useful in the component,
    allowing us to display the time in the form HH:MM:SS. This `time()` function will
    be defined in the `methods` section of the component.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 对于计数器的每次增加，都应该显示它发生的时间。在组件中，一个 `time()` 函数将非常有用，允许我们以 HH:MM:SS 的形式显示时间。这个 `time()`
    函数将在组件的 `methods` 部分中定义。
- en: 'The `<counter>` component is modified to integrate the display of the time
    at the beginning of the line. We can achieve all this using the following code:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`<counter>` 组件被修改以集成行首时间的显示。我们可以使用以下代码实现所有这些：'
- en: <counter> component displaying time (counter.js file)
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 显示时间的 `<counter>` 组件（counter.js 文件）
- en: '[PRE164]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: In the preceding code, the `time()` method is defined in the `methods` section
    and is then directly used in the component template within the double braces `{{
    and }}`.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`time()` 方法在 `methods` 部分中定义，然后直接在组件模板中的双大括号 `{{` 和 `}}` 内使用。
- en: A method defined in the `methods` section can use the other methods of this
    section or the reactive variables of the `data` section by prefixing them with
    the `this` keyword.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `methods` 部分中定义的方法可以使用该部分的其它方法或 `data` 部分的响应式变量，通过在它们前面加上 `this` 关键字来使用。
- en: 'The result is displayed in the following figure:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将在以下图中显示：
- en: '![Figure 3.8 – Time display in the component'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.8 – 组件中的时间显示]'
- en: '](img/Figure_3.8_B17416.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_3.8_B17416.jpg](img/Figure_3.8_B17416.jpg)'
- en: Figure 3.8 – Time display in the component
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.8 – 组件中的时间显示]'
- en: Vue.js allows you to define, in the form of methods, new variables that will
    be reactive. They are called computed properties. Let’s see how to create and
    use them.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 允许你以方法的形式定义新的变量，这些变量将是响应式的。它们被称为计算属性。让我们看看如何创建和使用它们。
- en: Defining computed properties in the computed section
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 `computed` 部分中定义计算属性
- en: A computed property is similar to a reactive variable. It is the result of the
    calculation performed on one or more reactive variables, and it will also be reactive.
    Any modification to one of the reactive variables associated with this computed
    property will cause it to be modified immediately.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 计算属性类似于响应式变量。它是通过对一个或多个响应式变量执行计算得到的结果，并且它也将是响应式的。任何对与该计算属性关联的响应式变量的修改都将立即导致它的修改。
- en: 'Let’s create a `countX2` property that calculates double the `count` variable
    as follows:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个 `countX2` 属性，它计算 `count` 变量的两倍，如下所示：
- en: Defining a computed property countX2 in the component (counter.js file)
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件中定义计算属性 countX2（counter.js 文件）
- en: '[PRE192]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: 'The output of the preceding code will look as follows:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的输出将如下所示：
- en: '![Figure 3.9 – Using a computed property'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.9 – 使用计算属性]'
- en: '](img/Figure_3.9_B17416.jpg)'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_3.9_B17416.jpg](img/Figure_3.9_B17416.jpg)'
- en: Figure 3.9 – Using a computed property
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.9 – 使用计算属性]'
- en: In the preceding figure, we can see the modification of the `count` variable.
    Every second leads to the automatic modification of the `countX2` variable thanks
    to its definition in the `computed` section.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们可以看到 `count` 变量的修改。每秒钟都会自动修改 `countX2` 变量，这得益于它在 `computed` 部分的定义。
- en: We have seen how to define methods and reactive variables in a component. Now
    let’s see how to pass parameters to a component, using the component’s attributes
    for this.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何在组件中定义方法和响应式变量。现在让我们看看如何通过使用组件的属性来传递参数。
- en: Using attributes in components
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在组件中使用属性
- en: Attributes in a component allow it to pass parameters for its use. For example,
    we could use in the `<counter>` component a `start` attribute indicating at what
    value we start counting. If this attribute is not indicated, it is considered
    to be 0 (that is, counting starts at 0 as in the preceding code example).
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 组件中的属性允许它传递使用参数。例如，我们可以在 `<counter>` 组件中使用一个 `start` 属性来指示我们从哪个值开始计数。如果没有指定此属性，则默认为
    0（即，计数从 0 开始，如前面的代码示例所示）。
- en: 'For a component to be able to employ attributes during its use, it suffices
    to indicate the name of the attributes in the `props` section of the component.
    The component can access the attribute value using the `this` keyword (for example,
    `this.start` to access the `start` attribute in the component). We can see this
    in action in the following code:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使组件能够在使用时使用属性，只需在组件的 `props` 部分中指明属性的名称。组件可以使用 `this` 关键字访问属性值（例如，`this.start`
    来访问组件中的 `start` 属性）。我们可以在以下代码中看到这一点：
- en: Using the start attribute in the component (index.html file)
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件中使用 start 属性（index.html 文件）
- en: '[PRE225]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: 'In the following code, the attribute is passed when using the component, as
    is traditionally done in HTML. The value of the attribute here will be a character
    string `"10"` and not the value `10`:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，属性是在使用组件时传递的，就像在传统的 HTML 中做的那样。这里的属性值将是一个字符字符串 `"10"`，而不是值 `10`：
- en: Setting the start attribute in the <counter> component (counter.js file)
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<counter>` 组件（counter.js 文件）中设置 start 属性
- en: '[PRE244]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: In the preceding code, notice the use of the `parseInt()` function (defined
    as standard in JavaScript) to retrieve the value of `this.start` in integer form.
    Indeed, the attributes are transmitted in the form of character strings, hence
    the need to transform `this.start` into an integer value.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，注意使用了 `parseInt()` 函数（在 JavaScript 中定义为标准函数）来以整数形式检索 `this.start` 的值。确实，属性是以字符字符串的形式传递的，因此需要将
    `this.start` 转换为整数值。
- en: It is possible to avoid transforming the attribute value into an integer value.
    All you have to do is indicate when using the attribute that you want to keep
    the JavaScript value and not the character string. We prefix the name of the attribute
    with the character `:`, for example, `:start='10'`. In this case, the value `10`
    will be transmitted and not the string `"10"`.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 可以避免将属性值转换为整数值。你只需要在使用属性时指明你想要保留 JavaScript 值而不是字符字符串。我们用字符 `:` 前缀属性名，例如，`:start='10'`。在这种情况下，值
    `10` 将被传递，而不是字符串 `"10"`。
- en: 'This makes it possible to be able to transmit in the attributes any types of
    values: numeric values, character strings, arrays, or objects.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得可以在属性中传递任何类型的值：数值、字符字符串、数组或对象。
- en: 'In the following figure we can see the counter has started from the value indicated
    in the `start` attribute:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图中，我们可以看到计数器从 `start` 属性中指示的值开始：
- en: '![Figure 3.10 – Using the start attribute in the component'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.10 – 在组件中使用 start 属性'
- en: '](img/Figure_3.10_B17416.jpg)'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.10_B17416.jpg)'
- en: Figure 3.10 – Using the start attribute in the component
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – 在组件中使用 start 属性
- en: We have therefore seen how to create new attributes in a component. Vue.js has
    specific attributes as standard, which can be used in all components. These specific
    attributes, created by Vue.js, are called directives. We will study them now.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经看到了如何在组件中创建新属性。Vue.js 有一些标准属性，可以在所有组件中使用。这些由 Vue.js 创建的特定属性被称为指令。我们现在将研究它们。
- en: Using directives
  id: totrans-435
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用指令
- en: Vue.js improves the writing of HTML code by offering to write its own components,
    as we have seen in the preceding section. The framework also makes it easier to
    write basic HTML code by adding new attributes to the HTML elements or to the
    components created. These new attributes are called directives.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 通过提供编写其自身组件的功能来改进 HTML 代码的编写，正如我们在上一节所看到的。该框架还通过向 HTML 元素或创建的组件添加新属性来简化基本
    HTML 代码的编写。这些新属性被称为指令。
- en: Note
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Directives are used exclusively in HTML elements or created components, that
    is, in the `template` section of components.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 指令仅用于 HTML 元素或创建的组件，即在组件的 `template` 部分中。
- en: Their name begins with `v-`, so as not to be confused with other existing HTML
    attributes. The main directives are `v-if`, `v-else`, `v-show`, `v-for`, and `v-model`.
    They will be explained now.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的名称以 `v-` 开头，这样就不会与其他现有的 HTML 属性混淆。主要的指令有 `v-if`、`v-else`、`v-show`、`v-for`
    和 `v-model`。现在我们将解释它们。
- en: The v-if and v-else directives
  id: totrans-440
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: v-if 和 v-else 指令
- en: The `v-if` directive is used to specify a condition. If true, the HTML element
    (or component) will be inserted into the HTML page. Otherwise, it will not be
    present.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-if` 指令用于指定条件。如果条件为真，HTML 元素（或组件）将被插入到 HTML 页面中。否则，它将不存在。'
- en: Let’s use the `v-if` directive to indicate that we want to display the value
    of the counter only for values less than or equal to 20\. As soon as the value
    20 is exceeded, the counter is no longer displayed.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `v-if` 指令来表示我们只想在计数器的值小于或等于 20 时显示计数器的值。一旦超过值 20，计数器将不再显示。
- en: 'In the following snippet, we have only indicated the code of the `template`
    section of the component, knowing that the rest is not modified:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，我们只指出了组件 `template` 部分的代码，知道其余部分没有修改：
- en: Using the v-if directive
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `v-if` 指令
- en: '[PRE282]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: Using backticks `'` and `'` to define the template avoids having to manage the
    concatenation of character strings on several lines.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 使用反引号 `'` 和 `'` 来定义模板可以避免在多行上管理字符串的连接。
- en: 'The `<span>` element on which the `v-if` directive is applied will be included
    in the HTML page only if the following condition is true: if `count<=20`. Beyond
    20, only the time will be displayed without the counter value.'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 `v-if` 指令的 `<span>` 元素只有在以下条件为真时才会包含在 HTML 页面中：如果 `count<=20`。超过 20，则只显示时间，而不显示计数器值。
- en: 'As long as the counter is less than or equal to 20, it is displayed as follows:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 只要计数器小于或等于 20，它将按以下方式显示：
- en: '![Figure 3.11 – Display of the counter whose value is less than 20'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.11 – 显示值小于 20 的计数器'
- en: '](img/Figure_3.11_B17416.jpg)'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.11_B17416.jpg)'
- en: Figure 3.11 – Display of the counter whose value is less than 20
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – 显示值小于 20 的计数器
- en: 'When the counter exceeds the value 20, it is no longer displayed:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 当计数器超过值 20 时，它将不再显示：
- en: '![Figure 3.12 – Display as soon as the counter exceeds the value 20'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.12 – 计数器超过值 20 时的显示'
- en: '](img/Figure_3.12_B17416.jpg)'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.12_B17416.jpg)'
- en: Figure 3.12 – Display as soon as the counter exceeds the value 20
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – 计数器超过值 20 时的显示
- en: The `v-else` directive is used to indicate an alternative when the condition
    expressed in `v-if` is `false`. The element on which the `v-else` directive is
    used will be inserted into the HTML page if the condition expressed in `v-if`
    is `false`.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-else` 指令用于在 `v-if` 表达的条件为 `false` 时表示一个替代项。如果 `v-if` 表达的条件为 `false`，则使用
    `v-else` 指令的元素将被插入到 HTML 页面中。'
- en: 'Let’s use the `v-else` directive to display another message when the counter
    exceeds the value 20:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `v-else` 指令在计数器超过值 20 时显示另一条消息：
- en: Using the v-else directive
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `v-else` 指令
- en: '[PRE286]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: 'When the counter exceeds the value 20, we now get the following:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 当计数器超过值 20 时，我们现在得到以下结果：
- en: '![Figure 3.13 – Counter having exceeded the value 20'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.13 – 计数器超过值 20'
- en: '](img/Figure_3.13_B17416.jpg)'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.13_B17416.jpg)'
- en: Figure 3.13 – Counter having exceeded the value 20
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 计数器超过值 20
- en: The v-show directive
  id: totrans-472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`v-show` 指令'
- en: The `v-show` directive is similar to the `v-if` directive. A condition is given
    next. If the condition is `true`, the element that uses the directive is displayed;
    otherwise, it is not.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-show` 指令与 `v-if` 指令类似。接下来给出一个条件。如果条件为 `true`，则使用该指令的元素将被显示；否则，它不会被显示。'
- en: The difference from the `v-if` directive is that the element, if not displayed,
    is only hidden, but it is still inserted into the page. Whereas with the `v-if`
    directive, the element is not inserted (if the condition is `false`).
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `v-if` 指令的区别在于，如果元素未显示，则仅隐藏，但仍然被插入到页面中。而使用 `v-if` 指令时，元素不会被插入（如果条件为 `false`）。
- en: The v-for directive
  id: totrans-475
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: v-for 指令
- en: The `v-for` directive allows you to loop over a set of elements or over the
    properties of an object. For each iteration of the loop, it inserts the HTML element
    on which the directive is positioned.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-for` 指令允许您遍历一组元素或遍历一个对象的所有属性。对于循环的每次迭代，它都会在指令定位的 HTML 元素上插入元素。'
- en: Let us assume the `<counter>` component is a set of counters associated with
    the variable `counts`, which is a JavaScript array. Each counter is, in our example,
    a character string (for example, `"Counter 1"`), and we want to display the whole
    in the form of a list (see the following code snippets).
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设 `<counter>` 组件是与变量 `counts` 相关的一组计数器，`counts` 是一个 JavaScript 数组。在我们的例子中，每个计数器都是一个字符串（例如，`"Counter
    1"`），我们希望以列表的形式显示整个集合（请参阅以下代码片段）。
- en: Let’s look at the two possible forms of the `v-for` directive.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `v-for` 指令的两种可能形式。
- en: Using the directive v-for=”count in counts”
  id: totrans-479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用指令 v-for="count in counts"
- en: 'Let’s use the first form of the `v-for` directive. It allows access to each
    element of the array indicated in the directive (in our example, the JavaScript
    `counts` array):'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `v-for` 指令的第一种形式。它允许访问指令中指定的数组中的每个元素（在我们的例子中，是 JavaScript 的 `counts` 数组）：
- en: Displaying counters as a list (counter.js file)
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 以列表形式显示计数器（counter.js 文件）
- en: '[PRE292]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: 'In the preceding code, we have positioned the `v-for` directive on the element
    that we want to repeat (in this case, the `<li>` element). The value associated
    with the `v-for` directive is a character string of the form `"count in counts"`,
    knowing that `counts` is the variable on which we are iterating. The `count` variable
    thus corresponds to each of the elements of the `counts` array:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们将 `v-for` 指令放置在我们想要重复的元素上（在这种情况下，是 `<li>` 元素）。与 `v-for` 指令关联的值是一个字符串，形式为
    `"count in counts"`，我们知道 `counts` 是我们迭代的变量。因此，`count` 变量对应于 `counts` 数组中的每个元素：
- en: '![Figure 3.14 – Using the v-for directive'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.14 – 使用 v-for 指令'
- en: '](img/Figure_3.14_B17416.jpg)'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.14_B17416.jpg)'
- en: Figure 3.14 – Using the v-for directive
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – 使用 v-for 指令
- en: Using the directive v-for=”(count, index) in counts”
  id: totrans-502
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用指令 v-for="count, index) in counts"
- en: 'A second form of the `v-for` directive gives access to each element of the
    array as before, but also to its index (starting from 0):'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-for` 指令的第二种形式提供了对数组中每个元素的访问，就像之前一样，但同时也提供了其索引（从 0 开始）：'
- en: Displaying counters and their index (counter.js file)
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 显示计数器和它们的索引（counter.js 文件）
- en: '[PRE308]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: 'On running the preceding code, the following is displayed:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的代码后，显示以下内容：
- en: '![Figure 3.15 – Using index in the v-for directive'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.15 – 在 v-for 指令中使用索引'
- en: '](img/Figure_3.15_B17416.jpg)'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.15_B17416.jpg)'
- en: Figure 3.15 – Using index in the v-for directive
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15 – 在 v-for 指令中使用索引
- en: Using the key attribute with the v-for directive
  id: totrans-525
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用带有 v-for 指令的关键属性
- en: The `v-for` directive can also be used to display large lists, for which reactivity
    must be maintained. That is, changing the reactive variable specified in the `v-for`
    directive should update the corresponding displayed list.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-for` 指令也可以用于显示大型列表，其中必须保持反应性。也就是说，更改 `v-for` 指令中指定的反应式变量应该更新相应的显示列表。'
- en: 'To perform the update as quickly as possible, Vue.js uses a special attribute
    (to be used only for this specific case) named `key`. This attribute can be positioned
    after the `v-for` directive. Its value must be unique for each item in the list.
    For example, the value of the index being unique for each list element can be
    used as a value in the `key` attribute:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尽可能快地执行更新，Vue.js 使用一个特殊的属性（仅用于此特定情况）命名为 `key`。此属性可以放置在 `v-for` 指令之后。其值必须对列表中的每个项目都是唯一的。例如，索引值对于每个列表元素是唯一的，可以用作
    `key` 属性的值：
- en: Using the key attribute with the v-for directive
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 使用带有 v-for 指令的 key 属性
- en: '[PRE324]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: In the preceding code, the value of the attribute is a JavaScript expression
    (the variable `index`). We use `:key` and not just `key`; otherwise, the attribute
    would constantly have the string `"index"` as its value (instead of the value
    of the variable `index`).
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，属性的值是一个 JavaScript 表达式（变量 `index`）。我们使用 `:key` 而不是 `key`；否则，该属性将始终具有字符串
    `"index"` 作为其值（而不是变量 `index` 的值）。
- en: Of course, adding the `key` attribute does not produce any display changes,
    but the performance will be visible on subsequent changes to the displayed list
    (it helps Vue.js to keep track of the element and prevent unnecessary re-rendering).
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，添加 `key` 属性不会产生任何显示变化，但性能上的提升在后续对显示列表的更改中会变得明显（它帮助 Vue.js 跟踪元素并防止不必要的重新渲染）。
- en: The v-model directive
  id: totrans-532
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`v-model` 指令'
- en: The `v-model` directive is used to manage form elements during an interaction
    (input in a field, a click on a checkbox or radio button, the choice of an element
    in a list).
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-model` 指令用于在交互过程中管理表单元素（字段中的输入、复选框或单选按钮的点击、列表中元素的选取）。'
- en: The `v-model` directive is used to immediately retrieve the result of input
    or selection in a reactive variable without having to perform any particular processing.
    It’s the `v-model` directive that performs this update (of the reactive variable)
    for us.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-model` 指令用于立即检索输入或选择的结果，而不需要执行任何特定的处理。正是 `v-model` 指令为我们执行了这种更新（反应式变量的更新）。'
- en: We use the `v-model` directive in the form `v-model="varname"`, where `varname`
    is the name of a reactive variable that will be updated on input or selection.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `v-model` 指令的形式 `v-model="varname"`，其中 `varname` 是一个反应式变量的名称，该变量将在输入或选择时更新。
- en: 'Let’s use the `v-model` directive in a form input field. To clearly see what
    happens with or without its use, we display two input fields: one managed without
    `v-model`, the other with:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在表单输入字段中使用`v-model`指令。为了清楚地看到使用或不使用它会发生什么，我们显示两个输入字段：一个未使用`v-model`管理，另一个使用：
- en: Using the v-model directive in an input field (counter.js file)
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单输入字段中使用v-model指令（counter.js文件）
- en: '[PRE325]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: 'Here are some notes on the preceding program:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是关于前面程序的几点说明：
- en: The first `<input>` field does not use `v-model`, but only uses the `value`
    attribute, which will be updated based on the `count` variable.
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个`<input>`字段不使用`v-model`，只使用`value`属性，其值将根据`count`变量进行更新。
- en: The second `<input>` field uses the `v-model` directive associated with the
    same `count` variable.
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个`<input>`字段使用与相同`count`变量关联的`v-model`指令。
- en: The value of the `count` variable is displayed after the two input fields.
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count`变量的值显示在两个输入字段之后。'
- en: 'When the program is launched, the value of the reactive variable `count` is
    transferred to the `value` attribute of the first input field, as well as to the
    second. This produces the initialization of the contents of the two input fields
    as seen here:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序启动时，响应式变量`count`的值被传递到第一个输入字段的`value`属性，以及第二个输入字段。这导致了两个输入字段内容的初始化，如下所示：
- en: '![Figure 3.16 – Display when starting the program'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.16 – 程序启动时的显示'
- en: '](img/Figure_3.16_B17416.jpg)'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.16 – 程序启动时的显示](img/Figure_3.16_B17416.jpg)'
- en: Figure 3.16 – Display when starting the program
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.16 – 程序启动时的显示
- en: 'If we change the contents of the first input field (which is not used with
    `v-model`), we will see something like this:'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们更改第一个输入字段的内容（该字段未使用`v-model`），我们会看到如下所示的内容：
- en: '![Figure 3.17 – Editing an input field without v-model'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.17 – 不使用v-model编辑输入字段'
- en: '](img/Figure_3.17_B17416.jpg)'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.17 – 不使用v-model编辑输入字段](img/Figure_3.17_B17416.jpg)'
- en: Figure 3.17 – Editing an input field without v-model
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.17 – 不使用v-model编辑输入字段
- en: Note that modifying the input field (without `v-model`) has no effect on the
    reactive variable associated with it.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，修改输入字段（不使用`v-model`）不会对其关联的响应式变量产生影响。
- en: 'Now let’s modify the contents of the second input field, managed by `v-model`:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来修改由`v-model`管理的第二个输入字段的内容：
- en: '![Figure 3.18 – Editing an input field with v-model'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.18 – 使用v-model编辑输入字段'
- en: '](img/Figure_3.18_B17416.jpg)'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.18 – 程序启动时的显示](img/Figure_3.18_B17416.jpg)'
- en: Figure 3.18 – Editing an input field with v-model
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.18 – 使用v-model编辑输入字段
- en: We now see that the use of `v-model` causes the immediate modification of the
    reactive variable to which it is associated, which then causes the modification
    of the `value` attribute of the first input field (because it is linked to the
    reactive variable).
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到，使用`v-model`会导致与之关联的响应式变量的立即修改，然后导致第一个输入字段的`value`属性被修改（因为它与响应式变量相关联）。
- en: Summary
  id: totrans-572
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have mainly studied how to create a component and methods
    or attributes associated with it.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们主要学习了如何创建一个组件以及与之相关的属性或方法。
- en: It is now necessary to study how to manage the actions of the user in a component,
    then how to assemble the components to form an application.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有必要研究如何管理组件中的用户操作，然后是如何组装组件以形成一个应用程序。
