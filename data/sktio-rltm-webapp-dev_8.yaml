- en: Appendix B. Socket.IO Backends
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录B. Socket.IO后端
- en: Socket.io started in Node.js and the primary backend continues to be Node.js.
    This book focuses on building a chat system with socket.io, Node.js, and Express.js.
    But what if your primary platform of choice is not Node.js or you are working
    on a project where you want the same capabilities as provided by socket.io but
    cannot as you have an existing standardized platform and cannot bring a new system
    in the equation. Many before you have faced the same dilemma and in the spirit
    of open source, socket.io servers exist for various platforms. In this appendix
    let's take a look at the various implementations available for socket.io backends.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Socket.io始于Node.js，其主后端仍然是Node.js。本书专注于使用socket.io、Node.js和Express.js构建聊天系统。但如果你的首选平台不是Node.js，或者你正在从事一个希望获得与socket.io相同功能但无法实现的项目，因为你有一个现有的标准化平台并且不能引入新的系统。在你之前，许多人面临过同样的困境，本着开源的精神，socket.io服务器适用于各种平台。在本附录中，让我们看看socket.io后端的各种实现。
- en: Every platform will require you to apply the learning and logic from this book
    to rewrite the server-side code targeting that platform. The client code can continue
    to be the same.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个平台都将要求你应用本书中的学习和逻辑来重写针对该平台的服务器端代码。客户端代码可以保持不变。
- en: 'The following is an alphabetic list of the implementations by their languages/platforms:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个按语言/平台字母顺序排列的实现列表：
- en: Erlang
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Erlang
- en: There are two different backends for socket.io on erlang, Yurii Rashkovskii's
    **socket.io-erlang** ([https://github.com/yrashk/socket.io-erlang](https://github.com/yrashk/socket.io-erlang))
    and Yongboy's **erlang-socketio** ([https://code.google.com/p/erlang-scoketio/](https://code.google.com/p/erlang-scoketio/)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在erlang上，socket.io有两个不同的后端，Yurii Rashkovskii的**socket.io-erlang** ([https://github.com/yrashk/socket.io-erlang](https://github.com/yrashk/socket.io-erlang))
    和 Yongboy的 **erlang-socketio** ([https://code.google.com/p/erlang-scoketio/](https://code.google.com/p/erlang-scoketio/))。
- en: Yurii seems to have a disagreement with the path taken by socket.io's post-0.6.x
    releases, and so the library supports only up to Version 0.6 of the spec. Naturally,
    most of the examples in this book and many other examples on the Internet, won't
    work over it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Yurii似乎对socket.io 0.6.x之后的版本所采取的道路存在分歧，因此该库仅支持规范的第0.6版。自然地，本书中的大多数示例以及互联网上的许多其他示例，都无法在它上面运行。
- en: Yongboy's erlang-socketio seems to be keeping itself up to date with the latest
    happenings in socket.io and is compatible with the latest spec for socket.io-1.0
    at the time of writing. Thus we will focus the rest of this section on this library.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Yongboy的erlang-socketio似乎在持续关注socket.io的最新动态，并且在撰写本文时与socket.io-1.0的最新规范兼容。因此，我们将在本节的剩余部分专注于这个库。
- en: This library is available for **Cowboy** and **Mochiweb** , two popular server-side
    frameworks in erlang. Both these versions support socket.io spec 1.0\. The Cowboy
    version supports all the transports, while the Mochiweb version is limited to
    `xhr-polling`, `htmlfile`, and `json-polling`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库适用于**Cowboy**和**Mochiweb**，这两个是erlang中流行的服务器端框架。这两个版本都支持socket.io规范1.0。Cowboy版本支持所有传输方式，而Mochiweb版本仅限于`xhr-polling`、`htmlfile`和`json-polling`。
- en: Google Go
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Go
- en: '**Go** is a language in its early years, but is gaining popularity, mainly
    due to the corporate backing from Google and being one of the three languages
    supported on the Google App Engine, beside Python and Java.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Go**是一种处于早期阶段的语言，但正在获得越来越多的关注，这主要得益于Google的企业支持，并且它是Google App Engine上支持的三种语言之一，除了Python和Java。'
- en: The `go-socket.io` implementation provides socket.io support on Go. This project
    supports almost all the transports and also supports socket.io on Google's App
    Engine. The original codebase for this project is at [https://github.com/madari/go-socket.io](https://github.com/madari/go-socket.io),
    but the development there has stagnated for a while; but others seem to have taken
    up the torch. The socket.io wiki points to this fork:[https://github.com/davies/go-socket.io](https://github.com/davies/go-socket.io).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`go-socket.io`实现为Go提供了socket.io支持。该项目支持几乎所有传输方式，并且也支持Google App Engine上的socket.io。该项目的原始代码库位于[https://github.com/madari/go-socket.io](https://github.com/madari/go-socket.io)，但那里的开发已经停滞了一段时间；但其他人似乎已经接过了接力棒。socket.io维基指向这个分支：[https://github.com/davies/go-socket.io](https://github.com/davies/go-socket.io)。'
- en: One thing to notice here is that this codebase still doesn't support versions
    higher than 0.6.x.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一点是，这个代码库仍然不支持高于0.6.x的版本。
- en: Check out the forks created in github and you will find interesting developments
    being done to the code. Like this fork, which was updated much more recently:[https://github.com/justinfx/go-socket.io](https://github.com/justinfx/go-socket.io).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 查看GitHub上创建的分支，你会发现代码正在进行的有趣开发。就像这个更新较新的分支：[https://github.com/justinfx/go-socket.io](https://github.com/justinfx/go-socket.io)。
- en: If you want to use a newer version of socket.io, the fork at [https://github.com/murz/go-socket.io](https://github.com/murz/go-socket.io)
    should support versions up to 0.8.x (this was at the time of writing).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要使用socket.io的新版本，[https://github.com/murz/go-socket.io](https://github.com/murz/go-socket.io)这个分支应该支持到0.8.x版本（这是在撰写本文时的情况）。
- en: Java
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java
- en: There are multiple implementations available for socket.io on a Java server.
    Let's take a look at them.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java服务器上，socket.io有多种实现方式。让我们来看看它们。
- en: The first is **Socket.IO-Java** , maintained most actively at [https://github.com/Ovea/Socket.IO-Java](https://github.com/Ovea/Socket.IO-Java).
    It has been forked and modified to work with various servers and platforms.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是**Socket.IO-Java**，在[https://github.com/Ovea/Socket.IO-Java](https://github.com/Ovea/Socket.IO-Java)上维护得最为活跃。它已经被分支并修改，以适应各种服务器和平台。
- en: Then there is **Atmosphere**. Atmosphere began as a project to bring server
    push to glassfish servers, but was spun off as a project of its own and works
    with almost any Java server. Atmosphere server comes with atmosphere.js, which
    is its own JS client, but any Atmosphere application will work with a socket.io
    client out of the box, without any modification; use [https://github.com/Atmosphere/atmosphere/wiki/Getting-Started-with-Socket.IO](https://github.com/Atmosphere/atmosphere/wiki/Getting-Started-with-Socket.IO)
    to get started with Atmosphere,. If you are starting a new java project or are
    introducing push in your existing java one, don't make a decision until you have
    taken a look at Atmosphere.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是**Atmosphere**。Atmosphere最初是一个将服务器推送引入glassfish服务器的项目，但后来作为一个独立的项目分离出来，并且几乎与任何Java服务器一起工作。Atmosphere服务器自带atmosphere.js，这是它自己的JS客户端，但任何Atmosphere应用都可以与socket.io客户端无缝工作，无需任何修改；使用[https://github.com/Atmosphere/atmosphere/wiki/Getting-Started-with-Socket.IO](https://github.com/Atmosphere/atmosphere/wiki/Getting-Started-with-Socket.IO)开始使用Atmosphere。如果你正在启动一个新的Java项目或者在你的现有Java项目中引入推送，在做出决定之前，一定要看看Atmosphere。
- en: '**Netty** brings an asynchronous server to Java; and very important to mention
    is Yongboy''s **socket** **io-netty** ([http://code.google.com/p/socketio-netty/](http://code.google.com/p/socketio-netty/)).
    It is highly recommended due to the async nature of netty, which is more suited
    for these applications.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**Netty**为Java带来了异步服务器；并且非常重要的一点是，Yongboy的**socket** **io-netty** ([http://code.google.com/p/socketio-netty/](http://code.google.com/p/socketio-netty/))。由于其异步特性，Netty非常适合这些应用，因此它被高度推荐。'
- en: '**Gisio** ([https://bitbucket.org/c58/gnisio/wiki/Home](https://bitbucket.org/c58/gnisio/wiki/Home))
    brings socket.io to the GWT framework, the Google''s write-in-Java-and-compile-to-JS
    library. So if your application is built in GWT and you want to introduce server-push
    in your application, you can use this library.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**Gisio** ([https://bitbucket.org/c58/gnisio/wiki/Home](https://bitbucket.org/c58/gnisio/wiki/Home))将socket.io引入了GWT框架，这是谷歌的Java编写和编译为JS的库。如果你的应用是用GWT构建的，并且你想要在你的应用中引入服务器推送，你可以使用这个库。'
- en: And for the new and upcoming completely asynchronous server **Vert.x** , there
    is **mo** **d-socket-io** ([https://github.com/keesun/mod-socket-io](https://github.com/keesun/mod-socket-io))
    Again, if you are looking at an application of a highly asynchronous nature, I
    would suggest you to take a look at this server and this module.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新出现的完全异步服务器**Vert.x**，有**mod-socket-io** ([https://github.com/keesun/mod-socket-io](https://github.com/keesun/mod-socket-io))。再次提醒，如果你正在寻找高度异步应用的应用，我建议你看看这个服务器和这个模块。
- en: Perl
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Perl
- en: Perl may be a very old language, but is still used in many places, and it has
    an actively maintained socket.io server module called **pocketio** ([https://github.com/vti/pocketio](https://github.com/vti/pocketio)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Perl可能是一个非常古老的语言，但仍然在许多地方被使用，并且有一个名为**pocketio** ([https://github.com/vti/pocketio](https://github.com/vti/pocketio))的活跃维护的socket.io服务器模块。
- en: Python
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python
- en: Python is another language that is gaining wide acceptance and popularity. And
    there are multiple socket.io server implementations for Python.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Python是另一种正在获得广泛接受和流行的语言。Python也有多个socket.io服务器实现。
- en: The first we look at is **gevent-socket.io** ([https://github.com/abourget/gevent-socketio](https://github.com/abourget/gevent-socketio)),
    which works with any WSGI-based web frameworks. So if you are using any framework
    such as Pyramid, Pylons, Flask, and Django, this will work for you. The only dependencies
    are **gevent** and **gevent-websocket**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先来看的是**gevent-socket.io** ([https://github.com/abourget/gevent-socketio](https://github.com/abourget/gevent-socketio))，它与任何基于WSGI的Web框架兼容。所以如果你使用的是任何框架，如Pyramid、Pylons、Flask和Django，这将适用于你。唯一的依赖项是**gevent**和**gevent-websocket**。
- en: If Tornado is your framework of choice, take a look at **Tornadio 2** ([https://github.com/MrJoes/tornadio2](https://github.com/MrJoes/tornadio2)),
    which provides support for socket.io Versions 0.7 and higher. Again, Tornado is
    an asynchronous framework and good for such applications.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Tornado是你的首选框架，请查看**Tornadio 2** ([https://github.com/MrJoes/tornadio2](https://github.com/MrJoes/tornadio2))，它提供了对socket.io
    0.7及以上版本的支持。再次强调，Tornado是一个异步框架，非常适合此类应用。
- en: And dedicated to bringing socket.io to Django is **django-socketio** ([https://github.com/stephenmcd/django-socketio](https://github.com/stephenmcd/django-socketio)).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 专注于将socket.io引入Django的是**django-socketio** ([https://github.com/stephenmcd/django-socketio](https://github.com/stephenmcd/django-socketio))。
- en: Summary
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we saw the socket.io backend implementations for some popular
    platforms. If you are using some other platform, just search for a socket.io server
    implementation on the Internet and I am sure you will find one. It may not be
    the best or in an ideal state, but you definitely will find a solution to get
    started.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了一些流行平台的socket.io后端实现。如果你使用的是其他平台，只需在互联网上搜索socket.io服务器实现，我确信你一定能找到。它可能不是最好的，也可能不是处于理想状态，但你肯定能找到一个开始的方法。
