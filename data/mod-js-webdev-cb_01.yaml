- en: Working with JavaScript Development Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JavaScript开发工具
- en: 'The recipes we''ll be seeing here are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里看到的配方如下：
- en: Installing Visual Studio Code for development
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Visual Studio Code进行开发
- en: Extending Visual Studio Code
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展Visual Studio Code
- en: Adding Fira Code font for better editing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加Fira Code字体以获得更好的编辑效果
- en: Adding npm for package management
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加npm进行包管理
- en: Doing version control with Git
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Git进行版本控制
- en: Formatting your source code with Prettier
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Prettier格式化您的源代码
- en: Documenting your code with JSDoc
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSDoc为您的代码编写文档
- en: Adding code quality checks with ESLint
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ESLint添加代码质量检查
- en: Adding Flow for data types checks
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加Flow进行数据类型检查
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: JavaScript has gone beyond a simple tool for adding small effects or behaviors
    to web pages, and has now become one of the world's most-used languages, applied
    to all sorts of developments. Given the complexity and variety of packages, libraries,
    and frameworks these days, you wouldn't start working without a full set of tools,
    and in this chapter we will aim to set up a good development environment, so you
    can work in a most efficient fashion.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript已经不再是一个简单的用于向网页添加小效果或行为的工具，现在它已经成为世界上使用最广泛的语言之一，应用于各种开发。鉴于当今包、库和框架的复杂性和多样性，您不会开始工作而没有一整套工具，在本章中，我们将致力于建立一个良好的开发环境，以便您可以以最有效的方式工作。
- en: Let's start by setting up some tools that will come in handy for all our JS
    development. It's been said that a bad craftsman blames his tools, so let's avoid
    even a hint of that by making some good choices!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先设置一些对所有JS开发都有用的工具。有人说“差的工匠怪工具”，所以让我们通过做出一些好选择来避免甚至一点点这样的情况！
- en: Installing Visual Studio Code for development
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Visual Studio Code进行开发
- en: The first tool we'll need is an **Integrated Development Environment** (**IDE**),
    or at least a powerful code editor. Some people make do with a simple editor,
    possibly something like `vi` or `Notepad`, but in the long run, all the wasted
    time in doing everything by hand doesn't pay. There are many options, such as
    (in alphabetic order) Atom, Eclipse, IntelliJ IDEA, Microsoft Visual Studio, NetBeans,
    Sublime Text, WebStorm, and Visual Studio Code. Personally, I've opted for the
    latter, though of course you may work perfectly well with any of the others.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的第一个工具是一个**集成开发环境**（**IDE**），或者至少是一个强大的代码编辑器。有些人可能会使用简单的编辑器，可能类似于`vi`或`Notepad`，但从长远来看，手工做所有事情所浪费的时间并不值得。有许多选择，例如（按字母顺序）Atom、Eclipse、IntelliJ
    IDEA、Microsoft Visual Studio、NetBeans、Sublime Text、WebStorm和Visual Studio Code。就我个人而言，我选择了后者，当然您也可以完全使用其他任何一个。
- en: The term IDE isn't really very well-defined. An IDE usually integrates many
    tools, providing a more seamless experience for the developer. Editors meant for
    development work provide some similar functionality by means of plugins or extensions.
    While this can certainly approximate the ease of use of an IDE, there may be some
    problems, such as a harder installation or configuration, or an interface that
    might be harder to figure out, but in the end, you may get practically the same
    feature set.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “集成开发环境”这个术语并没有一个很明确定义。一个集成开发环境通常集成了许多工具，为开发人员提供更无缝的体验。专为开发工作而设计的编辑器通过插件或扩展提供了一些类似的功能。虽然这当然可以近似于使用集成开发环境的便利性，但可能会出现一些问题，比如更难的安装或配置，或者界面可能更难理解，但最终，您可能会获得几乎相同的功能集。
- en: '**Visual Studio Code** (**VSC**) is basically a source code editor, developed
    by Microsoft in 2015\. Despite the similar name, it''s not related to Microsoft''s
    more powerful IDE, Visual Studio. The editor is free and open source, and the
    latest version is (currently) 1.29.1, dated November 2018, though new releases
    come out monthly. It can be used for JS development, but also for other languages,
    so if you wanted to, say, do your server-side coding in PHP, you could perfectly
    well use VSC for that too. However, from our point of view, the fact that VSC
    ships with IntelliSense for basically all the frontend languages (JS, TypeScript,
    JSON, HTML, CSS, LESS, SASS) is a good selling point. See [https://code.visualstudio.com/docs/editor/intellisense](https://code.visualstudio.com/docs/editor/intellisense)
    for more on this.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**（**VSC**）基本上是一个源代码编辑器，由微软于2015年开发。尽管名字相似，但它与微软更强大的集成开发环境Visual
    Studio无关。该编辑器是免费且开源的，最新版本是（目前）1.29.1，日期为2018年11月，但新版本每月发布一次。它可以用于JS开发，也可以用于其他语言，因此如果你想在PHP中进行服务器端编码，你也可以完全使用VSC。然而，从我们的角度来看，VSC为基本上所有前端语言（JS、TypeScript、JSON、HTML、CSS、LESS、SASS）提供了智能感知功能，这是一个很好的卖点。有关更多信息，请参阅[https://code.visualstudio.com/docs/editor/intellisense](https://code.visualstudio.com/docs/editor/intellisense)。'
- en: A nice touch is that VSC is written in JS, based on Node, and packaged for the
    desktop by using the `Electron` framework. (We'll get to see these topics in [Chapter
    13](2aebad42-65b6-4cb7-bf4f-1e2e0907a70a.xhtml), *Creating a Desktop Application
    with Electron*.) This automatically lets you use VSC in Linux, macOS, and Windows,
    which is a good advantage if you work in a team and not everybody shares the same
    development environment preferences.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的地方是VSC是用JS编写的，基于Node，并使用`Electron`框架打包为桌面应用程序。（我们将在[第13章](2aebad42-65b6-4cb7-bf4f-1e2e0907a70a.xhtml)中看到这些主题，*使用Electron创建桌面应用程序*。）这自动让您可以在Linux、macOS和Windows中使用VSC，这是一个很大的优势，如果您在一个团队中工作，而不是每个人都有相同的开发环境偏好。
- en: A commonly held misconception is that VSC is based on the Atom editor. Though
    VSC shares the same editor component (Monaco), VSC itself is distinct from Atom.
    A source of this misunderstanding may be the fact that `Electron`, when created
    in 2013, was originally called *Atom Shell*; the name change to `Electron` happened
    in 2015.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个普遍存在的误解是VSC是基于Atom编辑器的。尽管VSC共享相同的编辑器组件（Monaco），但VSC本身与Atom不同。这种误解的根源可能是`Electron`在2013年创建时最初被称为*Atom
    Shell*；名称在2015年更改为`Electron`。
- en: 'In the past, I''ve worked extensively with Eclipse, Microsoft Visual Studio,
    and NetBeans. However, nowadays I work exclusively with VSC. Why do I prefer it?
    My reasons (your mileage may vary!) include the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，我曾广泛使用Eclipse，Microsoft Visual Studio和NetBeans。然而，现在我只使用VSC。为什么我更喜欢它？我的原因（你的情况可能不同！）包括以下几点：
- en: '*Availability for multiple operating systems*: I personally use it on Mac and
    Linux all the time, and sometimes on Windows'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*适用于多个操作系统*：我个人一直在Mac和Linux上使用它，有时也在Windows上使用'
- en: '*Actively developed and maintained*: With updates (including bug fixes) provided
    on a regular basis'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*积极开发和维护*：定期提供更新（包括错误修复）'
- en: '*Very good performance*: VSC feels quite speedy'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*非常好的性能*：VSC感觉非常快速'
- en: '*IntelliSense support*: Out of the box for all JS needs'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*智能感知支持*：对所有JS需求开箱即用'
- en: '*Extensions available through plugins*: These become integrated into your work
    flow, adding new functionality'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过插件可用的扩展*：这些将集成到你的工作流中，添加新功能'
- en: '*Integrated debugging*:As we''ll see in [Chapter 5](18752def-acd4-4b7d-9395-a1dad0864f16.xhtml),
    *Testing and Debugging Your Server*'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*集成调试*：正如我们将在[第5章](18752def-acd4-4b7d-9395-a1dad0864f16.xhtml)中看到的，*测试和调试你的服务器*'
- en: '*Integrated source code management*: Through Git (see the *Doing version control
    with Git* section, later)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*集成源代码管理*：通过Git（参见稍后的*使用Git进行版本控制*部分）'
- en: '*Integrated terminal*: You can run commands or launch processes without leaving
    VSC'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*集成终端*：你可以在不离开VSC的情况下运行命令或启动进程'
- en: 'On the other hand, there are also some disadvantages; the main two being as
    follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，也存在一些缺点；主要有以下两点：
- en: The interface, configuration, and design of plugins usually varies from one
    to another, so you'll have to deal with frequent inconsistencies.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件的界面、配置和设计通常各不相同，因此你将不得不处理频繁的不一致性。
- en: VSC has no knowledge of projects or the links between tools needed to create,
    for example, a `React` frontend application that communicates with a `Node` backend
    server. VSC at most recognizes folders, but how you organize them, and where you
    place your pieces of code, is totally up to you.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VSC对项目或创建例如与`Node`后端服务器通信的`React`前端应用程序所需的工具之间的链接没有任何了解。VSC最多只能识别文件夹，但你如何组织它们，以及在哪里放置你的代码片段，完全取决于你。
- en: How to do it…
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: How do you install VSC? Instructions are different for each operating system,
    and may vary over time, so we'll just point you to downloading the appropriate
    package for your system at [https://code.visualstudio.com/download](https://code.visualstudio.com/download),
    and following the correct platform-specific instructions at [https://code.visualstudio.com/docs/setup/setup-overview](https://code.visualstudio.com/docs/setup/setup-overview).
    For Linux distributions, instead of downloading and installing some package by
    yourself, there may be another way out. For example, with OpenSUSE, there exists
    a repository that will allow you to install and update VSC through OpenSUSE itself;
    check out [https://en.opensuse.org/Visual_Studio_Code](https://en.opensuse.org/Visual_Studio_Code)
    for instructions on this, or [https://code.visualstudio.com/docs/setup/linux](https://code.visualstudio.com/docs/setup/linux)
    for even more distribution-specific instructions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如何安装VSC？每个操作系统的说明都不同，而且随着时间的推移可能会有所不同，所以我们只会指导你在[https://code.visualstudio.com/download](https://code.visualstudio.com/download)下载适合你系统的包，并按照[https://code.visualstudio.com/docs/setup/setup-overview](https://code.visualstudio.com/docs/setup/setup-overview)上的正确平台特定说明进行操作。对于Linux发行版，除了自己下载和安装一些软件包之外，可能还有其他方法。例如，对于OpenSUSE，存在一个存储库，允许你通过OpenSUSE自身安装和更新VSC；请查看[https://en.opensuse.org/Visual_Studio_Code](https://en.opensuse.org/Visual_Studio_Code)获取相关说明，或者查看[https://code.visualstudio.com/docs/setup/linux](https://code.visualstudio.com/docs/setup/linux)获取更多特定于发行版的说明。
- en: If you want to live on the edge, and get to see new features as early as possible,
    there's also an *Insiders build*. You may install both the normal VSC stable build
    and the Insiders build, and work with whichever you prefer. Be warned, though,
    that you may find unexpected bugs, but you can help the VSC development team get
    rid of those by letting them know!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试最新功能，并尽早看到新功能，还有一个*Insiders版本*。你可以安装正常的VSC稳定版本和Insiders版本，并使用你喜欢的那个。不过要注意，你可能会遇到意外的错误，但你可以通过让VSC开发团队知道来帮助他们摆脱这些错误！
- en: How it works…
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'After having installed it, open VSC and try out its settings to start configuring
    things the way you prefer, see the following screenshot. The bottom-left gear
    menu provides access to several related items, such as keyboard shortcuts, the
    color scheme, and icon set. If you have worked with VSC in the past, you''ll have
    access to more recent files and folders:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，打开VSC并尝试其设置，以开始按照你喜欢的方式配置事物，参见下图。左下角的齿轮菜单提供了访问多个相关项目的选项，例如键盘快捷键、颜色方案和图标集。如果你以前使用过VSC，你将可以访问更多最近的文件和文件夹：
- en: '![](img/d38a030b-92bf-43aa-bdc6-833a89eed189.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d38a030b-92bf-43aa-bdc6-833a89eed189.png)'
- en: The Welcome screen in VSC, and the settings gear at the bottom left
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: VSC中的欢迎屏幕，以及左下角的设置齿轮
- en: 'Configuring VSC is sort of unusual, but maybe to be expected, due to its JS
    origins. Basically, as seen in the following screenshot, you get a split screen,
    showing all the available configuration items (more than four hundred!) on the
    left, in JSON format, and you may change their values by writing new ones on the
    right side. If you mouse over any setting, you''ll get to see the possible values,
    and you can select a new one just by clicking on it:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 配置VSC有点不同寻常，但也许是可以预料的，因为它起源于JS。基本上，如下截图所示，你会得到一个分屏，左边以JSON格式显示所有可用的配置项（超过四百个！），你可以通过在右边写入新值来更改它们的值。如果你将鼠标悬停在任何设置上，你将看到可能的值，并且你可以通过点击来选择新的值：
- en: '![](img/b4bce1e1-98cd-4779-b9de-6d34fc01d6ff.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4bce1e1-98cd-4779-b9de-6d34fc01d6ff.png)'
- en: Configuring VSC is done by editing a JSON file with your personal choices
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 配置VSC是通过编辑一个JSON文件来完成的
- en: Do you want to pick a different editor for your work, or at least check out
    what's available out there? You may check out [www.slant.co/topics/1686/~javascript-ides-or-editors](https://www.slant.co/topics/1686/~javascript-ides-or-editors) for
    a long list of candidates, with pros and cons for each. At the current time (October
    2018) the page shows 41 options, with Visual Studio Code at the top of the list.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您想选择一个不同的编辑器进行工作，或者至少查看一下目前有哪些可用的？您可以查看[www.slant.co/topics/1686/~javascript-ides-or-editors](https://www.slant.co/topics/1686/~javascript-ides-or-editors)
    ，其中列出了许多候选项，每个候选项都有其优缺点。截至目前（2018年10月），该页面显示了41个选项，其中Visual Studio Code位列榜首。
- en: 'One extra advantage of VSC has to do with updates. It will periodically check
    to see whether there''s a new available version, and it will let you download
    and install it. (On the other hand, if you use Linux and install VSC through a
    repository, it may get updated automatically, without you even having to confirm
    it.) After that, you''ll get an information screen with the changes for the last
    month; as seen in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: VSC的一个额外优势与更新有关。它会定期检查是否有新版本可用，并允许您下载并安装它。（另一方面，如果您使用Linux并通过存储库安装VSC，它可能会自动更新，而无需您确认。）之后，您将获得一个信息屏幕，显示上个月的更改；如下面的截图所示：
- en: '![](img/0147cb80-fb72-48c5-b1bf-e23c89ff5dd0.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0147cb80-fb72-48c5-b1bf-e23c89ff5dd0.png)'
- en: After each monthly update, you'll be informed of VSC's new features
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 每月更新后，您将收到VSC的新功能通知
- en: Configuration of VSC goes beyond what we have just mentioned; see the following
    sections to find out more ways of extending its power and making it better for
    you to use.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: VSC的配置超出了我们刚提到的内容；请查看以下部分，以了解更多扩展其功能和使其更适合您使用的方法。
- en: Extending Visual Studio Code
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展Visual Studio Code
- en: VSC includes many out-of-the-box features, with which you can actually get started
    and working with no problems. By means of extensions, you can add support for
    languages, debugging, code quality, and many more functions. Configuring visual
    aspects is also provided, and you can change VSC's theme, shortcuts, and general
    preferences. However, you will want to add even more functionality to VSC, and
    that's where extensions (plugins) come in.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: VSC包括许多开箱即用的功能，您可以使用这些功能开始工作，而且没有问题。通过扩展，您可以为语言、调试、代码质量和许多其他功能添加支持。还提供了配置视觉方面的功能，您可以更改VSC的主题、快捷键和一般偏好设置。但是，您可能希望为VSC添加更多功能，这就是扩展（插件）的用武之地。
- en: You can even develop your own extensions for VSC, though we won't be getting
    into that subject in this book. If you are interested, check out [https://code.visualstudio.com/docs/extensions/overview](https://code.visualstudio.com/docs/extensions/overview).
    Extensions can be written in either JS or TypeScript (see the *Adding Flow for
    data types checks* section), and of course you can develop them by using VSC itself!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以为VSC开发自己的扩展，尽管我们在本书中不会涉及这个主题。如果您感兴趣，请查看[https://code.visualstudio.com/docs/extensions/overview](https://code.visualstudio.com/docs/extensions/overview)。扩展可以用JS或TypeScript编写（请参阅*为数据类型检查添加Flow*部分），当然您也可以使用VSC本身来开发它们！
- en: How to do it…
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: Extensions are optional installable additions to VSC, which provide specific
    new functions. Installing new extensions is a breeze. You can bring up the menu
    of all the available extensions by going to View | Extensions in the main menu
    (where you can also find a keyboard shortcut for it) or by clicking the Extensions
    icon at the bottom of the Activities bar at the left of VSC.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展是可选的可安装附加功能，提供特定的新功能。安装新扩展非常简单。您可以通过转到主菜单中的View | Extensions（您也可以找到其键盘快捷键）或单击VSC左侧活动栏底部的Extensions图标来查看所有可用扩展的菜单。
- en: 'You will first get the list of currently installed extensions, as demonstrated
    in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您将获得当前安装的扩展列表，如下面的截图所示：
- en: '![](img/1e5b186a-d552-45ec-ae89-fbff2c15df79.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e5b186a-d552-45ec-ae89-fbff2c15df79.png)'
- en: The list of already-installed extensions
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 已安装的扩展列表
- en: 'If you want, you can disable any specific extension: click on it at the left
    side of the screen, and then click on Disable at the right. You can also fully
    uninstall any extension, and it''s a sure bet that you''ll do this quite a lot;
    the only way to find out if an extension works for you is by experimenting! Take
    a look at the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，您可以禁用任何特定的扩展：在屏幕左侧点击它，然后在右侧点击禁用。您还可以完全卸载任何扩展，而且您很可能会经常这样做；找出扩展是否适合您的唯一方法就是通过实验！看看下面的截图：
- en: '![](img/73c6c77e-c750-4609-a37e-35676efd7b36.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73c6c77e-c750-4609-a37e-35676efd7b36.png)'
- en: The VSC Marketplace is a good place to search for new extensions
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: VSC市场是搜索新扩展的好地方
- en: 'Finding new extensions is also a breeze. You can either go to the VSC Marketplace
    at [https://marketplace.visualstudio.com/](https://marketplace.visualstudio.com/) as
    seen in the preceding screenshot or directly search from within VSC, by typing
    in the search box, as seen in the following screenshot. I''d recommend paying
    attention to the total number of installs (the higher the better) and the rating
    from 1 to 5 stars (also, the higher the better). We''ll be using several extensions;
    see, for example, in this chapter the *Formatting your source code with Prettier*
    and *Documenting your code with JSDoc* sections; there will be more in later chapters:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 查找新的扩展也很容易。您可以去VSC市场，如前面的截图所示，也可以直接在VSC内部搜索，通过在搜索框中输入，如下面的截图所示。我建议注意安装总数（越高越好）和从1到5星的评分（同样，越高越好）。我们将使用多个扩展；例如，在本章中*使用Prettier格式化源代码*和*使用JSDoc记录代码*部分；以后还会有更多：
- en: '![](img/2207fa9f-1218-4ede-a0fc-035ccf9d8e13.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2207fa9f-1218-4ede-a0fc-035ccf9d8e13.png)'
- en: You can also search for new extensions from within VSC by just typing some keywords
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过在VSC内部键入一些关键字来搜索新的扩展
- en: Extensions are updated automatically, and you won't have to do much. Periodically,
    I'd recommend having a look at your list of extensions, and possibly searching
    again for new ones; there have been cases of new versions deprecating old ones,
    but with a new name, so an update wouldn't have worked. And, finally, be ready
    to experiment and find for yourself which extensions make you tick!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展会自动更新，你不必做太多事情。我建议定期查看你的扩展列表，并可能再次搜索新的扩展；有些情况下，新版本会废弃旧版本，但用新名称，所以更新可能不起作用。最后，准备好进行实验，找出哪些扩展适合你！
- en: Adding Fira Code font for better editing
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Fira Code字体以获得更好的编辑
- en: If you want to try a topic that can quickly lead to a (warm? heated?) discussion,
    say out loud that the best font for programming is such and such, and just wait! I
    don't want to start any arguments, but I can certainly recommend a font that can
    make your JS code look much better, and become more readable.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试一个可能很快就会引发（热烈？激烈？）讨论的话题，大声说出最适合编程的字体是哪一种，然后等着看吧！我不想引发任何争论，但我肯定可以推荐一种可以让你的JS代码看起来更好，更易读的字体。
- en: An article in Slant, at [https://www.slant.co/topics/67/~best-programming-fonts](https://www.slant.co/topics/67/~best-programming-fonts),
    lists over 100 programming fonts; did you even think so many were available?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Slant上的一篇文章，网址为[https://www.slant.co/topics/67/~best-programming-fonts](https://www.slant.co/topics/67/~best-programming-fonts)，列出了100多种编程字体；你甚至想过有这么多可用吗？
- en: The key to a better font hinges on the concept of ligatures. In typography,
    a ligature occurs when two or more letters are joined, becoming a single character.
    OK, the proper technical word would be glyph, but let's not make it more complicated
    than needed!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的字体的关键在于连字的概念。在印刷术中，当两个或更多个字母连接在一起成为一个字符时，就会出现连字。好吧，正确的技术术语应该是字形，但我们不要把它弄得更复杂！
- en: 'Some ligatures you may not be aware of are these: the ampersand character (*&)*
    was originally a ligature of the letters *E* and *t*, spelling out *et* in Latin,
    meaning *and*. Similarly, the German *ß* character was a ligature of two *s* letters,
    next to each other, and the Spanish *Ñ* originally was a pair of *N* characters,
    one written on top of the other.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能不知道的一些连字是这样的：和符号（*&*）最初是拉丁字母*E*和*t*的连字，拼写成拉丁文的*et*，意思是*and*。同样，德语的*ß*字符是两个相邻的*s*字母的连字，而西班牙语的*Ñ*最初是一对*N*字符，一个写在另一个上面。
- en: In JS, there are many symbols that are written as two or more characters, just
    because no other way is available. For example, the greater than or equal to symbol
    is typed as `>=`, which doesn't look as good as the mathematical symbol `≥`, does
    it? Other combinations are `<=` (less than or equal to), `=>` (for arrow functions,
    which we'll meet in [Chapter 2](2948d1ab-ac85-4b3a-90f1-f240b7688216.xhtml), *Using
    Modern JavaScript Features*), the binary shift operators `<<` and `>>`, the equality
    operators `==` and `===` (plus the corresponding `!=` and `!==`), and more.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在JS中，有许多符号是以两个或更多字符编写的，只是因为没有其他方式可用。例如，大于或等于符号被键入为`>=`，这看起来不如数学符号`≥`好看，是吧？其他组合包括`<=`（小于或等于），`=>`（用于箭头函数，在[第2章](2948d1ab-ac85-4b3a-90f1-f240b7688216.xhtml)中我们将遇到*使用现代JavaScript功能*），二进制移位运算符`<<`和`>>`，相等运算符`==`和`===`（以及相应的`!=`和`!==`），等等。
- en: Do not confuse *ligatures* with *kerning*. Both have to do with showing adjacent
    characters, but the former refers to joining characters and replacing them with
    a new one, while the latter deals with reducing the distance between characters.
    If you place an *f *next to an *i*, kerning would make them closer without overlapping
    (in the same way that you can reduce spacing between *A* and *V* because of the
    letters' shapes), while a ligature would replace both characters with *fi,* actually
    joining both letters.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 不要混淆*连字*和*字距*。两者都涉及显示相邻的字符，但前者是指连接字符并用新字符替换它们，而后者是指减少字符之间的距离。如果你把一个*f*放在一个*i*旁边，字距会使它们更接近而不重叠（就像你可以减少*A*和*V*之间的间距一样，因为字母的形状），而连字会用*fi*替换两个字符，实际上连接了两个字母。
- en: How to do it…
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作方法如下：
- en: 'While there are many monospaced fonts (meaning all characters have the same
    width, which helps with onscreen alignment and indentation), there are not so
    many that also provide ligatures. In my case, after experimenting with many, I
    can recommend using Fira Code, available online at [https://github.com/tonsky/FiraCode](https://github.com/tonsky/FiraCode).
    This font provides lots of ligatures, not only for JS but for other programming
    languages as well. Take a look at following illustration for all the possibilities:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有许多等宽字体（意思是所有字符的宽度都相同，这有助于屏幕对齐和缩进），但提供连字的字体并不多。在我的情况下，经过许多实验后，我可以推荐使用Fira
    Code，可以在[https://github.com/tonsky/FiraCode](https://github.com/tonsky/FiraCode)上线获取。这种字体不仅为JS提供了许多连字，还为其他编程语言提供了连字。看看下面的插图，了解所有的可能性：
- en: '![](img/ecba6842-1641-458a-a28e-4aa70601b6d5.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecba6842-1641-458a-a28e-4aa70601b6d5.png)'
- en: All the available ligatures, as seen in the figure taken from
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可用的连字，如图所示
- en: https://raw.githubusercontent.com/tonsky/FiraCode/master/showcases/all_ligatures.png
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: https://raw.githubusercontent.com/tonsky/FiraCode/master/showcases/all_ligatures.png
- en: 'Download the latest version (1.206, as of December 2018) and install it, according
    to the standard procedures for your operating system. Afterwards, you''ll have
    to change a pair of VSC settings, as seen earlier in this chapter; just add the
    following lines, and save your configuration:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下载最新版本（截至2018年12月为1.206）并按照你的操作系统的标准程序进行安装。之后，你将不得不更改一对VSC设置，就像本章前面所示；只需添加以下行，并保存你的配置：
- en: '[PRE0]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first line defines what font you want to use (and in CSS style, I also provided
    alternatives, just in case I took my settings to a different machine where `Fira
    Code` wasn't available) and the second line tells VSC to enable onscreen ligatures.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行定义了你想使用的字体（在CSS样式中，我还提供了备选方案，以防我将我的设置带到另一台没有`Fira Code`的机器上），第二行告诉VSC启用屏幕连字。
- en: How it works…
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理如下：
- en: 'After doing the changes in the previous section, when you open VSC, you''ll
    be able to see code as in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中进行更改后，当您打开VSC时，您将能够看到以下截图中的代码：
- en: '![](img/c2fe811e-09d8-4a0c-8df5-b4432724f2a4.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2fe811e-09d8-4a0c-8df5-b4432724f2a4.png)'
- en: A sample listing, showing several ligatures; see lines 60 (=>), 63 (=== and
    ||), or 71 (<=)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例清单，显示了几个连字号；请参见第60行（=>），第63行（===和||），或第71行（<=）
- en: Note that you don't have to do anything at all when you type in your code. If
    you want an arrow ligature, you will have to type the two characters `=` and `>`
    as usual; the way they will look on screen is just a result of font rendering.
    Similarly, if you want to search for an arrow, seek `=>`, as that's what will
    be saved to disk.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当您输入代码时，您无需做任何事情。如果您想要一个箭头连字号，您将需要像平常一样输入两个字符`=`和`>`；它们在屏幕上的显示方式只是字体渲染的结果。同样，如果您想搜索箭头，请搜索`=>`，因为这将保存到磁盘上。
- en: Now we have got VSC configured to our liking, let's start more packages to help
    with source code management and other features.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将VSC配置为我们喜欢的样子，让我们开始更多的软件包来帮助管理源代码和其他功能。
- en: Adding npm for package management
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加npm进行软件包管理
- en: 'When working either on the frontend or the backend, you will surely want to
    use already available libraries and frameworks, and that begets an interesting
    problem: how to deal with those packages'' own needs, more packages, which themselves
    need even more packages, and so on. In [Chapter 3](f2d2d72d-2137-4f67-8d72-9a113dc3d09c.xhtml),
    *Developing with Node*, we''ll work with `Node`, but we need to get ahead of ourselves,
    and install `npm` (the package manager of `Node`) now to be able to set up several
    other tools.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是在前端还是后端工作时，您肯定会想要使用已有的库和框架，这就产生了一个有趣的问题：如何处理这些软件包的需求，更多的软件包，它们自己甚至需要更多的软件包，依此类推。在[第3章](f2d2d72d-2137-4f67-8d72-9a113dc3d09c.xhtml)中，*使用Node进行开发*，我们将使用`Node`，但我们需要超前一步，并现在安装`npm`（`Node`的软件包管理器）以便能够设置几个其他工具。
- en: '`npm` also is the name of a gigantic repository of software, at [https://www.npmjs.com/](https://www.npmjs.com/),
    which counts has around 600,000 packages you can observe that in the following
    screenshot and it grows at a daily rate of more than 500 packages, according to
    counts such as at [http://www.modulecounts.com/](http://www.modulecounts.com/),
    a place that tracks several well-known code repositories:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm`也是一个庞大的软件仓库的名称，位于[https://www.npmjs.com/](https://www.npmjs.com/)，大约有60万个软件包，您可以在以下截图中观察到，它以每天超过500个软件包的速度增长，根据[http://www.modulecounts.com/](http://www.modulecounts.com/)等统计数据，这是一个跟踪几个知名代码仓库的地方：'
- en: '![](img/1bde3af9-d7d1-443d-86c0-d2a421e7f27f.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1bde3af9-d7d1-443d-86c0-d2a421e7f27f.png)'
- en: The growth of the npm repository seems exponential, according to data from www.modulecounts.com/
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 根据www.modulecounts.com/的数据，npm仓库的增长似乎是指数级的。
- en: It can be safely said that it's probably impossible that a modern JS application
    doesn't require at least one, and more likely several, packages from `npm`, so
    adding a package manager will be mandatory; let's see a couple of them.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 可以肯定地说，现代JS应用程序可能不需要至少一个，更可能需要几个来自`npm`的软件包，因此添加一个软件包管理器将是强制性的；让我们看看其中的一些。
- en: How to do it…
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To get `npm`, you must first install `Node`, and that will come in handy for
    [Chapter 3](f2d2d72d-2137-4f67-8d72-9a113dc3d09c.xhtml), *Developing with Node*,
    and the following ones. We won''t copy the details here from the web (see [https://docs.npmjs.com/getting-started/installing-node](https://docs.npmjs.com/getting-started/installing-node))
    but we can resume as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取`npm`，您必须首先安装`Node`，这将对[第3章](f2d2d72d-2137-4f67-8d72-9a113dc3d09c.xhtml)以及接下来的章节有所帮助。我们不会从网上复制详细信息（请参见[https://docs.npmjs.com/getting-started/installing-node](https://docs.npmjs.com/getting-started/installing-node)），但我们可以总结如下：
- en: Install `Node`, either by downloading it and then doing a manual installation
    (the most common way for Windows) or by adding an appropriate repository and then
    using your Linux package manager to install `Node` (that's the way I do this in
    my OpenSuse machines). Be careful, and pick the **Long Term Support** (**LTS**)
    version, recognizable by its even major number (such as 8.x.x, for example), unless
    you feel adventurous enough to use the latest development version, and you don't
    mind risks such as things stopping working!
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过下载并进行手动安装（对于Windows来说是最常见的方式）或通过添加适当的仓库，然后使用Linux软件包管理器来安装`Node`（这是我在我的OpenSuse机器上的做法）。请注意，选择**长期支持**（**LTS**）版本，其主要版本号为偶数（例如8.x.x），除非您足够冒险，使用最新的开发版本，并且不介意出现停止工作等风险！
- en: Verify that `Node` is correctly installed. At the command line, type `node -v` and
    get the current version; in my machine, it's v9.7.1, but this will surely change
    by the time you try this out, and yes, I'm feeling adventurous and not using the
    LTS version!
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证`Node`是否正确安装。在命令行中，输入`node -v`并获取当前版本；在我的机器上，是v9.7.1，但在您尝试时这肯定会改变，是的，我感到很有冒险精神，没有使用LTS版本！
- en: 'Check if `npm` is up to its latest version with the `npm -v` command. If it''s
    not (refer to the following code snippet), you''ll have to update it:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npm -v`命令检查`npm`是否是最新版本。如果不是（请参考以下代码片段），您将需要更新它：
- en: '[PRE1]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you are working without a package manager (meaning you can get updates for
    your software automatically, without having to go and look for each on a one-by-one
    basis) you could also be interested in installing `nvm`, though it's optional;
    for more on this, see [https://github.com/creationix/nvm](https://github.com/creationix/nvm).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用一个软件包管理器（这意味着您可以自动获取软件的更新，而无需逐个查找每个软件包），您可能还对安装`nvm`感兴趣，尽管这是可选的；有关更多信息，请参见[https://github.com/creationix/nvm](https://github.com/creationix/nvm)。
- en: How it works…
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We'll be back to using `npm` in several places in this text. You'll have to
    use it in order to install several packages (some of which appear in this very
    chapter, such as `JSDoc` or `Prettier`) and later on we'll see how to configure
    an application, so all its required packages will be available and up to date.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本文的几个地方再次使用`npm`。您将不得不使用它来安装多个软件包（其中一些出现在本章中，例如`JSDoc`或`Prettier`），然后我们将看到如何配置应用程序，以便所有所需的软件包都可用且保持最新。
- en: You can find complete documentation for all `npm` features at [https://docs.npmjs.com/](https://docs.npmjs.com/).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.npmjs.com/](https://docs.npmjs.com/)找到所有`npm`功能的完整文档。
- en: Creating a project with npm
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用npm创建项目
- en: 'If you pick any empty directory and just install a package, you''ll get some
    warnings related to a missing file, and you''ll also find some new elements:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择任何空目录并只安装一个软件包，您将收到一些与缺少文件相关的警告，并且还会发现一些新元素：
- en: '[PRE2]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'What''s happening here? Let''s explain the results step by step, and then add
    whatever''s missing. When you install modules, they (plus all their dependencies,
    and their dependencies'' dependencies, and so on) are placed by default in a `node_modules` directory.
    This is a good measure, because all the code that will go in that directory is
    code that you haven''t actually written, and that will eventually get updated
    by `npm` without your direct control. We can verify that quickly by going to the
    newly created directory and checking out its contents:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？让我们一步一步地解释结果，然后添加缺少的部分。当您安装模块时，它们（以及它们的所有依赖项，以及它们依赖的依赖项等）默认放在`node_modules`目录中。这是一个很好的措施，因为将放入该目录的所有代码实际上都不是您编写的，并且最终将由`npm`在您的直接控制下进行更新。我们可以通过快速转到新创建的目录并检查其内容来快速验证：
- en: '[PRE3]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'But, how would you control what packages (and their versions) are to be installed?
    That''s the point of the missing `package.json` file, which, among other things
    that we''ll meet later in the book, lets you specify what packages you want. (We''ll
    also use it to specify parameters for other tools, such as Babel or ESLint, as
    we''ll see later in this chapter.) You can create this file by hand, but it''s
    easier to use `npm init` and just answer a few questions. This will create the
    required file, which will eventually describe all the dependencies of your project,
    plus other features (such as build or deploy procedures) that we''ll see later:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，您如何控制要安装哪些软件包（及其版本）？这就是缺少的`package.json`文件的目的，它让您指定要安装的软件包，以及我们稍后在本书中会遇到的其他一些东西。您可以手动创建此文件，但最好使用`npm
    init`并回答几个问题。这将创建所需的文件，最终描述项目的所有依赖关系，以及我们稍后将看到的其他功能（例如构建或部署过程）：
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s quickly go over each field, but remember these are only the basic ones;
    you can find more complete, official descriptions at [https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json).
    As we skipped some answers, not all fields are present in the produced project
    file, but you can add everything later:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览每个字段，但请记住这些只是基本字段；您可以在[https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json)找到更完整的官方描述。由于我们跳过了一些答案，生成的项目文件中并非所有字段都存在，但您可以稍后添加所有内容：
- en: '`name`: Whatever name you want to assign to the project; by default, the directory''s
    name.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：要分配给项目的任何名称；默认情况下为目录的名称。'
- en: '`version`: The semantic version number for your project. You would update this
    number whenever you create a newer version. See [https://semver.org/](https://semver.org/)
    for more information on semantic versioning.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`：项目的语义版本号。每当创建新版本时，您都会更新此数字。有关语义版本控制的更多信息，请参阅[https://semver.org/](https://semver.org/)。'
- en: '`description`: A simple description of your project, used by the `npm` search
    command.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`：项目的简单描述，由`npm`搜索命令使用。'
- en: '`main`: The name of the primary entry point to your program. It''s common to
    use `index.js` for this.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main`：程序的主要入口点的名称。通常使用`index.js`。'
- en: '`test command`: A command (script) that you would run in order to execute unit
    tests for your code. We''ll also be seeing this later in the book.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test command`：要执行代码的单元测试，您将运行的命令（脚本）。我们稍后在本书中也会看到这一点。'
- en: '`git repository`: If you are going to use source control, here you would give
    the details for it. We''ll get to this in the *Doing version control with Git*
    section later in this chapter.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git repository`：如果您要使用源代码控制，您将在此处提供详细信息。我们将在本章后面的*使用Git进行版本控制*部分中介绍这一点。'
- en: '`scripts`: This is an object that contains script commands you can run with
    `npm run`; for example, you could write scripts to build a project, deploy it,
    check it for code quality rules, and so on.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scripts`：这是一个包含可以使用`npm run`运行的脚本命令的对象；例如，您可以编写脚本来构建项目，部署它，检查它是否符合代码质量规则等。'
- en: '`author`: Who created the project.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`author`：创建项目的人。'
- en: '`license`: Whatever license you want to assign to your project; this is meant
    for other people to know how they may use your package (permissions, restrictions)
    should you allow it. You can find a (quite long!) list of possible licenses at [https://spdx.org/licenses/](https://spdx.org/licenses/),
    and be careful when selecting one; there are legal aspects involved!'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`license`：要分配给项目的任何许可证；这是为了让其他人知道他们可以如何使用您的软件包（权限，限制），如果您允许的话。您可以在[https://spdx.org/licenses/](https://spdx.org/licenses/)找到（相当长的！）可能的许可证列表，并在选择时要小心；涉及法律方面的问题！'
- en: But, where are the packages? Let's see about that in the next section.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，软件包在哪里？让我们在下一节中看看。
- en: Installing packages for different purposes
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为不同目的安装软件包
- en: 'There are two ways of installing `npm` packages: globally or locally:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种安装`npm`软件包的方法：全局或本地：
- en: If you plan to use the package from the command line, install it globally; for
    example, `npm install prettier -g` would install the `prettier` command so you
    can use it anywhere. (We'll see more of `prettier` in the *Formatting your source
    code with Prettier* section.) You may need to run the command as an administrator,
    or with `sudo`.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你计划从命令行使用这个包，就全局安装它；例如，`npm install prettier -g`会安装`prettier`命令，这样你就可以在任何地方使用它。（我们将在*使用Prettier格式化你的源代码*部分看到更多关于`prettier`的内容。）你可能需要以管理员身份运行命令，或者使用`sudo`。
- en: Otherwise, if you just need the package for your project, install it locally.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，如果你只需要这个包用于你的项目，就在本地安装它。
- en: 'Installing packages locally can also be done in more than one way:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 本地安装包也可以通过多种方式完成：
- en: If you need the package for your own project, then you install it as a production
    package with `npm install lodash --save`
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要这个包用于你自己的项目，那么你可以使用`npm install lodash --save`将其安装为生产包
- en: Instead, if you need the package in order to build your project, but not as
    a part of the final, produced code, install it as a development package with `npm
    install eslint --save-dev`
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，如果你需要这个包来构建你的项目，但不作为最终生成的代码的一部分，可以使用`npm install eslint --save-dev`将其安装为开发包
- en: There are many shorthand versions for commands and options, such as just `i`
    for `install`, or `-D` for `--save-dev`, but I am more comfortable spelling everything
    out. If you want to learn more about this, just try `npm --help`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多命令和选项的简写版本，比如`i`代表`install`，或者`-D`代表`--save-dev`，但我更喜欢把所有东西都写出来。如果你想了解更多，请尝试`npm
    --help`。
- en: 'After running these two latter commands, if you inspect `package.json`, you''ll
    notice that some lines were added:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这两个后续命令后，如果你检查`package.json`，你会注意到添加了一些行：
- en: '[PRE5]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `dependencies` and `devDependencies` entries refer to the production and
    development packages you require. If you are writing your software, and you decide
    you need a new package, there are two ways of doing this:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`dependencies`和`devDependencies`条目指的是你需要的生产和开发包。如果你正在编写软件，并且决定需要一个新的包，有两种方法可以做到这一点：'
- en: Add an entry to `package.json`, in the proper place, and then do `npm install`
    to get it
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`package.json`中添加一个条目，然后运行`npm install`来获取它
- en: Alternatively, use `npm install` with either `--save` or `--save-dev`, and `package.json`
    will be updated by `npm`
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，使用`npm install`，要么使用`--save`要么使用`--save-dev`，`package.json`将被`npm`更新
- en: To remove a dependency, use `npm uninstall` instead. You must include `--save`
    or `--save-dev` in order to also remove the reference from `package.json`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除一个依赖，使用`npm uninstall`。你必须包括`--save`或`--save-dev`，以便同时从`package.json`中删除引用。
- en: 'If you need specific versions, you will have to learn about semantic versioning.
    Version rules may become complex, and we''ll just see the main ones; check [https://docs.npmjs.com/files/package.json#dependencies](https://docs.npmjs.com/files/package.json#dependencies)
    and [https://github.com/npm/node-semver#versions](https://github.com/npm/node-semver#versions)
    for a complete description:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要特定版本，你将需要了解语义版本控制。版本规则可能变得复杂，我们只会看到主要的规则；查看[https://docs.npmjs.com/files/package.json#dependencies](https://docs.npmjs.com/files/package.json#dependencies)和[https://github.com/npm/node-semver#versions](https://github.com/npm/node-semver#versions)获取完整的描述：
- en: '| 4.5.6 | Version 4.5.6, and none other |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 4.5.6 | 版本为4.5.6，没有其他版本 |'
- en: '| ^4.0.0 | Latest compatible version 4.x.x |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| ^4.0.0 | 最新兼容版本4.x.x |'
- en: '| ^4.2.0 | Latest compatible version 4.2.x |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| ^4.2.0 | 最新兼容版本4.2.x |'
- en: '| >5.6.7 | A version greater than 5.6.7 |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| >5.6.7 | 大于5.6.7的版本 |'
- en: '| ~8.7.6 | A version approximately equivalent to 8.7.6; should be 8.7.x |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| ~8.7.6 | 大约等于8.7.6的版本；应该是8.7.x |'
- en: There's more…
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Maintaining your packages and updating them is an important task, and if you
    are part of a development team, with people possibly even in different regions
    or countries, it becomes mandatory that everybody should be working with the same
    configuration at all times. If the project is very dynamic (meaning that packages
    will be added, removed, or updated frequently), `npm` can become a bit slow and
    also produce consistency or security problems; to address this situation, in 2016
    Facebook released a new package manager, `yarn`. (See [https://yarnpkg.com/en/](https://yarnpkg.com/en/).)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 维护你的包并更新它们是一项重要的任务，如果你是开发团队的一部分，可能有人甚至在不同的地区或国家，那么每个人都应该始终使用相同的配置，这变得非常重要。如果项目非常动态（意味着包将经常被添加、删除或更新），`npm`可能会变得有点慢，也可能会产生一致性或安全问题；为了解决这种情况，Facebook在2016年发布了一个新的包管理器`yarn`。（参见[https://yarnpkg.com/en/](https://yarnpkg.com/en/)。）
- en: If you want to see the rationale for the changes, see the original blog post
    about yarn at [https://code.facebook.com/posts/1840075619545360](https://code.facebook.com/posts/1840075619545360).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想看到这些变化的原因，请参阅关于`yarn`的原始博客文章[https://code.facebook.com/posts/1840075619545360](https://code.facebook.com/posts/1840075619545360)。
- en: A key feature is that you can seamlessly replace `npm` with `yarn`, and just
    start using the latter, because it shares the same feature set (apart from some
    minor differences) while working in a faster, more reliable, and more secure way.
    For instance, `yarn` can manage downloads in parallel, and even work with cached
    packages, so it would even be possible to do some updates without a connection
    to the internet!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关键特性是你可以无缝地用`yarn`替换`npm`，并开始使用后者，因为它具有相同的功能集（除了一些细微差异），同时以更快、更可靠和更安全的方式工作。例如，`yarn`可以并行管理下载，甚至可以使用缓存包，因此甚至可以在没有连接到互联网的情况下进行一些更新！
- en: Installation is quite simple, and a bit ironic. Use `npm` with `npm install
    -g yarn`, and from that moment on, you will be able to use `yarn` directly and
    forget `npm`. See [https://yarnpkg.com/en/docs/install](https://yarnpkg.com/en/docs/install)
    for more complete documentation on the installation process.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 安装非常简单，有点讽刺。使用`npm`和`npm install -g yarn`，从那一刻起，你就可以直接使用`yarn`，忘记`npm`。查看[https://yarnpkg.com/en/docs/install](https://yarnpkg.com/en/docs/install)获取有关安装过程的更完整文档。
- en: For more details on comparing `npm` and `yarn` commands, check out [https://yarnpkg.com/lang/en/docs/migrating-from-npm/](https://yarnpkg.com/lang/en/docs/migrating-from-npm/)
    or [https://shift.infinite.red/npm-vs-yarn-cheat-sheet-8755b092e5cc](https://shift.infinite.red/npm-vs-yarn-cheat-sheet-8755b092e5cc).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 有关比较`npm`和`yarn`命令的更多细节，请查看[https://yarnpkg.com/lang/en/docs/migrating-from-npm/](https://yarnpkg.com/lang/en/docs/migrating-from-npm/)或[https://shift.infinite.red/npm-vs-yarn-cheat-sheet-8755b092e5cc](https://shift.infinite.red/npm-vs-yarn-cheat-sheet-8755b092e5cc)。
- en: Doing version control with Git
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Git进行版本控制
- en: In modern software development, it goes without saying that you will need some
    SCM (Software Configuration Management) software to keep track of all changes
    in your code. Today, the most-used tool is `Git`, which we'll also be using. `Git`
    was created in 2005 by Linus Torvalds (who also created Linux!) for the development
    of the Linux kernel; not a small task considering that its source is over 25 million
    lines of code!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代软件开发中，毋庸置疑，您将需要一些SCM（软件配置管理）软件来跟踪代码中的所有更改。今天，最常用的工具是`Git`，我们也将使用它。`Git`是由Linus
    Torvalds于2005年创建的（他还创建了Linux！）用于Linux内核的开发；考虑到其源代码超过2500万行，这并不是一项小任务！
- en: Linux is not the only major operating system controlled with `Git`; in February
    2017, Microsoft itself decide to migrate the development of Microsoft Windows
    to `Git`, and developed customizations to enhance remote work.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Linux不是唯一一个使用`Git`控制的主要操作系统；2017年2月，微软本身决定将Microsoft Windows的开发迁移到`Git`，并开发了定制功能以增强远程工作。
- en: 'We won''t be delving into how `Git` works, what commands to use, and so on,
    because that would be material enough for a book! We will focus on how to use
    `Git` with VSC. This is rather simple because not only was VSC written with `Git`
    access in mind, but there are also some extensions that can make work even easier,
    so you don''t have to memorize lots of commands and options; take look at following
    illustration:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入探讨`Git`的工作原理，要使用哪些命令等等，因为这将是一本书的材料！我们将专注于如何在VSC中使用`Git`。这相当简单，因为VSC不仅是为了访问`Git`而编写的，而且还有一些扩展可以使工作更加轻松，因此您不必记住大量的命令和选项；看看下面的插图：
- en: '![](img/7262d35b-aea2-4f27-b1a4-7cd70b379bb9.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/7262d35b-aea2-4f27-b1a4-7cd70b379bb9.png)
- en: Git has lot of commands, but you can cope very well with a few selected ones.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Git有很多命令，但您可以很好地应对其中的一些选择性命令。
- en: This XKCD comic is available online at https://xkcd.com/1597/.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这个XKCD漫画可以在https://xkcd.com/1597/上找到。
- en: How to do it…
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: Personally, I have a GitHub account, and I decided to use it for the code for
    this book. This is not only a way of being able to quickly share all the code
    with readers, but also (and quite important!) a way to ensure I wouldn't be able
    to accidentally lose my work, which I am quite capable of doing! See [https://github.com/fkereki/modernjs](https://github.com/fkereki/modernjs) for
    all code. I will assume that you have an appropriate `Git` server, and that you
    are able to initialize a project, connect it to the server, and so on. Also, VSC needs
    `Git` to be pre-installed in your machine; if you haven't installed it, checkout [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) to
    get started.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我有一个GitHub账户，并决定将其用于本书的代码。这不仅是一种能够快速与读者分享所有代码的方式，而且（非常重要！）也是一种确保我不会意外丢失工作的方式，我很有能力做到这一点！请访问[https://github.com/fkereki/modernjs](https://github.com/fkereki/modernjs)获取所有代码。我假设您有一个适当的`Git`服务器，并且能够初始化项目，将其连接到服务器等等。此外，VSC需要在您的计算机上预先安装`Git`；如果您还没有安装，请查看[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)开始安装。
- en: 'VSC provides full access to commands through its Command Palette.... as seen
    in the following screenshot. You can search for a command there, and after clicking
    on it, VSC will ask for all possible parameters one at the time, so you don''t
    have to do them by memory:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: VSC通过其命令面板提供了对命令的完全访问...如下截图所示。您可以在那里搜索命令，点击后，VSC将逐个询问所有可能的参数，这样您就不必靠记忆来完成它们：
- en: '![](img/4c0c8326-e5ab-4bf6-8786-94dce2dfe998.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/4c0c8326-e5ab-4bf6-8786-94dce2dfe998.png)
- en: You can enter Git commands through VSC's command palette, and you'll get asked
    for the required parameters, if any
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过VSC的命令面板输入Git命令，并且如果需要，会要求您输入所需的参数
- en: Committing code is quite frequent, so you can directly do it by clicking on
    the source control icon (third from the top, at the left) and entering the commit
    message that you want. In that screen, you can also revert local changes and more;
    mouse over to get all possible features.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 提交代码是相当频繁的，所以您可以直接点击源代码控制图标（在左侧的第三个）并输入您想要的提交消息。在那个屏幕上，您还可以恢复本地更改等等；鼠标悬停以获取所有可能的功能。
- en: There's more…
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'There is a single `Git` extension that I would recommend for VSC: look for
    `GitLens` (also called **Git Supercharged**) and install it. This extension provides
    access to practically all `Git` information.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个`Git`扩展我会推荐给VSC：寻找`GitLens`（也称为**Git Supercharged**）并安装它。这个扩展提供了对几乎所有`Git`信息的访问。
- en: 'Take a look at the following screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下的截图：
- en: '![](img/c4db95e0-4067-4468-97d3-d2f3e91f5df3.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/c4db95e0-4067-4468-97d3-d2f3e91f5df3.png)
- en: GitLens in use
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: GitLens的使用
- en: 'Among other features, `GitLens` provides the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 除了其他功能，`GitLens`还提供了以下功能：
- en: A lens, to show recent commit and author information
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个镜头，显示最近的提交和作者信息
- en: An explorer, to browse repositories and file histories
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个资源管理器，用于浏览存储库和文件历史
- en: A blame annotation, to show who made the last change to a line, as with git
    blame
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个责备注释，显示谁对一行进行了最后的更改，就像git blame一样
- en: The ability to search for commits in different ways, and much more
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索提交的能力以不同的方式，并且更多
- en: 'For more detailed information, see [http://gitlens.amod.io/](http://gitlens.amod.io/).
    Pay particular attention to customization at [https://github.com/eamodio/vscode-gitlens/#configuration](https://github.com/eamodio/vscode-gitlens/#configuration),
    because most features can be twiddled to better suit your work style. You can
    access them through the standard Settings page (look for all configuration items
    whose names start with *GitLens*), or by opening the Command Palette and looking
    for GitLens: Open Settings, which will open a special setup screen as seen in
    the following screenshot:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更详细的信息，请参阅[http://gitlens.amod.io/](http://gitlens.amod.io/)。特别注意定制[https://github.com/eamodio/vscode-gitlens/#configuration](https://github.com/eamodio/vscode-gitlens/#configuration)，因为大多数功能都可以调整以更好地适应您的工作风格。您可以通过标准设置页面（查找所有名称以*GitLens*开头的所有配置项），或者通过打开命令面板并查找GitLens：打开设置，这将打开一个特殊的设置屏幕，如下面的屏幕截图所示：
- en: '![](img/a0e36b9a-de2a-4592-aada-d2774211b5ed.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0e36b9a-de2a-4592-aada-d2774211b5ed.png)'
- en: Gitlens also provides a special onscreen settings feature, which allows you
    to configure practically every aspect of the tool
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Gitlens还提供了一个特殊的屏幕设置功能，允许您配置工具的几乎每个方面
- en: Now that we have a development environment set up, and we have chosen and installed
    a minimum set of tools, let's go further and add some optional, but highly recommended,
    additional packages that will help produce better code.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经建立了一个开发环境，并选择并安装了一组最少的工具，让我们进一步添加一些可选的，但强烈推荐的额外软件包，这些软件包将有助于生成更好的代码。
- en: Formatting your source code with Prettier
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Prettier格式化您的源代码
- en: 'If you work in a project with several other developers, sooner or later arguments
    as to how code should be formatted are certain to pop up, and they can keep going
    for a long time! Deciding upon a single standard for your source code is really
    needed, but if formatting depends on each person, it''s certain that you will
    end with even more "standards" than team members! Take a look at the following
    illustration.  Something you don''t want to have in a team is extra friction or
    aggravation, and style arguments can take forever:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在一个有几个其他开发人员的项目中工作，迟早会出现关于代码格式应该如何格式化的争论，而且这些争论可能会持续很长时间！确定源代码的单一标准确实是必要的，但如果格式取决于每个人，那么你肯定会得到比团队成员更多的“标准”！看看下面的插图。在团队中不希望出现额外的摩擦或激怒，而且风格争论可能会持续很长时间：
- en: '![](img/7b0c7a50-2f93-4ccc-b19e-0fd6cdea0d52.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b0c7a50-2f93-4ccc-b19e-0fd6cdea0d52.png)'
- en: You cannot afford to have more than one standard.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能拥有多个标准。
- en: This XKCD comic is available online at https://xkcd.com/927/.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这个XKCD漫画可以在https://xkcd.com/927/上在线获取。
- en: The problem is worsened by the fact that modern JS projects will not only include
    JS source code, but also possibly `TypeScript` or `Flow` (see the *Adding Flow
    for data types checks* section later), JSX (see [Chapter 6](82da8477-a63b-46d4-ad35-8a8cc114b542.xhtml),
    *Developing with React*), JSON, HTML, CSS or SCSS, and even more.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现代JS项目的问题更加严重，因为它们不仅包括JS源代码，还可能包括`TypeScript`或`Flow`（稍后请参阅*添加Flow进行数据类型检查*部分），JSX（请参阅[第6章](82da8477-a63b-46d4-ad35-8a8cc114b542.xhtml)，*使用React开发*），JSON，HTML，CSS或SCSS，甚至更多。
- en: After having tried out many source code formatters, I finally decided to use
    `Prettier` for all purposes. `Prettier` is an *opinionated* code formatter, which
    supports all the languages that I listed previously, reformatting source code
    according to a set of rules, thus ensuring that all code conforms to an expected
    style.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试了许多源代码格式化程序之后，我最终决定将`Prettier`用于所有目的。`Prettier`是一个*有主见的*代码格式化程序，支持我之前列出的所有语言，根据一套规则重新格式化源代码，从而确保所有代码符合预期的样式。
- en: If you want to read the original description for `Prettier`, see the blog post
    at [https://jlongster.com/A-Prettier-Formatter](https://jlongster.com/A-Prettier-Formatter),
    where the author describes the rationale for the project and gives some details
    on implementation and options.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想阅读`Prettier`的原始描述，请参阅[https://jlongster.com/A-Prettier-Formatter](https://jlongster.com/A-Prettier-Formatter)，作者在博客文章中描述了该项目的基本原理，并介绍了实现和选项的一些细节。
- en: What does it mean, that it is *opinionated*? Many (or most) code formatters
    provide a very big set of configuration options that you can twiddle in order
    to get the code to look as you wish. On the other hand, `Prettier` has its own
    set of rules, with little leeway for configuration, and thus cuts short all arguments.
    Moreover, you can get it to work seamlessly with VSC, meaning that whenever you
    save the code, it will get reformatted.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着什么，它是*有主见的*吗？许多（或大多数）代码格式化程序提供了一个非常大的配置选项集，您可以调整这些选项以使代码看起来符合您的期望。另一方面，`Prettier`有自己的一套规则，几乎没有配置的余地，因此可以缩短所有争论。此外，您可以使其与VSC无缝配合，这意味着每当您保存代码时，它都会被重新格式化。
- en: 'Let''s see some examples of this *opinionating*. Working with arrow functions
    (which we shall see in more detail in the *Defining functions* section of [Chapter
    2](2948d1ab-ac85-4b3a-90f1-f240b7688216.xhtml), *Using Modern JavaScript Features*),
    if the function has a single parameter, enclosing it in parentheses is optional:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些*有主见*的例子。使用箭头函数（我们将在[第2章](2948d1ab-ac85-4b3a-90f1-f240b7688216.xhtml)的*定义函数*部分中更详细地介绍它们，*使用现代JavaScript功能*），如果函数有一个参数，将其括在括号中是可选的：
- en: '[PRE6]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'However, `Prettier` decides that in this case the parentheses should not be
    included. Also, note that it added several spaces for clarity, as well as the
    (optional) missing semicolon:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`Prettier`决定在这种情况下不包括括号。另外，请注意它添加了一些空格以增加清晰度，以及（可选的）缺少分号：
- en: '[PRE7]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Similarly, if you use promises (we''ll see them in the *Doing async calls compactly*
    section of [Chapter 2](2948d1ab-ac85-4b3a-90f1-f240b7688216.xhtml), *Using JavaScript
    Modern Features*) you may write something such as the following:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果您使用承诺（我们将在[第2章](2948d1ab-ac85-4b3a-90f1-f240b7688216.xhtml)的*紧凑执行异步调用*部分中看到它们，*使用JavaScript现代功能*），您可能会写出以下内容：
- en: '[PRE8]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'However, it will get reformatted to the more usual following code:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它将被重新格式化为更常见的以下代码：
- en: '[PRE9]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note how each `.then(...)` was pushed to a separate line, according to the most
    common style for JS. The formatting rules that `Prettier` applies are derived
    from usual practice, and it wouldn't be possible to list them all here. But, what
    really matters is that by using this tool, you may be certain that your whole
    team will be working in the same fashion.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 注意每个`.then(...)`都被推到了单独的一行，这是JS最常见的风格。`Prettier`应用的格式规则源自通常的实践，这里不可能列出所有的规则。但真正重要的是，通过使用这个工具，你可以确信你的整个团队将以相同的方式工作。
- en: If your team grumbles about some rule or other, remind them of the saying *there's
    a right way, a wrong way, and the Army way!* After adopting `Prettier`, there
    will be no place for style discussions any more, and peace will eventually reign.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的团队对某些规则抱怨，提醒他们有句话说“有一种正确的方式，一种错误的方式，还有军队的方式！”采用`Prettier`后，不再有关于风格的讨论，和平最终会降临。
- en: How to do it…
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Installing `Prettier` is very simple: you should just add the VSC extension,
    which you can find by searching for `Prettier Code Formatter`; as a check, the
    latest version (as of December, 2018) is 1.16.0, and the author is Esben Petersen.
    The plugin itself can be found in the VSC marketplace, at [https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode).
    You can also install it globally (as we saw in the *Installing packages for different
    purposes* section earlier in this chapter) to be able to use it in scripts or
    from the command line with `npm` or `yarn`. See [https://prettier.io/docs/en/install.html](https://prettier.io/docs/en/install.html),
    and I''d recommend doing that.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`Prettier`非常简单：你只需要添加VSC扩展，你可以通过搜索`Prettier Code Formatter`找到；作为检查，最新版本（截至2018年12月）是1.16.0，作者是Esben
    Petersen。插件本身可以在VSC市场上找到，网址为[https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)。你也可以全局安装它（就像我们在本章前面看到的*为不同目的安装包*一节中那样），以便能够在脚本中或通过`npm`或`yarn`命令行使用它。参见[https://prettier.io/docs/en/install.html](https://prettier.io/docs/en/install.html)，我建议你这样做。
- en: 'There is one change you will want to make in the VSC preferences. Go to File
    | Preferences | Settings, and add the following line to your user configuration,
    so every file will be formatted automatically whenever you save it:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在VSC偏好设置中有一个改变你会想要做。转到文件|首选项|设置，并在用户配置中添加以下行，这样每个文件在保存时都会自动格式化：
- en: '[PRE10]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you''d rather only apply `Prettier` to JS, then you should use this instead:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更愿意只将`Prettier`应用于JS，那么你应该使用这个：
- en: '[PRE11]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As we said, `Prettier` is pretty opinionated as to how code should look, and
    there are only a few options that you can change. The available options can be
    set in `package.json` (which makes it easier for all the team to share them) in
    a `"prettier"` key. Some of the possibilities (meaning the ones you might want
    to modify) are as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，`Prettier`对代码的外观有很强的意见，并且只有少数几个选项可以更改。可用的选项可以在`package.json`中设置（这样整个团队更容易共享），在`"prettier"`键中。一些可能性（也就是你可能想要修改的）如下：
- en: '| **Option** | **Default value** | **Meaning** |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| **选项** | **默认值** | **含义** |'
- en: '| `arrowParens` | `false` | For arrow functions with a single parameter, whether
    to enclose it in parentheses. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `arrowParens` | `false` | 对于只有一个参数的箭头函数，是否将其括在括号中。'
- en: '| `bracketSpacing` | `true` | Include a space after the opening brace of an
    object, and before the closing brace. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `bracketSpacing` | `true` | 在对象的开括号之后和闭括号之前包括一个空格。'
- en: '| `jsxBracketSameLine` | `false` | If `true`, the ending `>` for a multiline
    JSX element will be added at the end of the last line; if `false`, it will be
    on a separate line. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `jsxBracketSameLine` | `false` | 如果为`true`，多行JSX元素的结束`>`将添加在最后一行的末尾；如果为`false`，它将在单独的一行上。'
- en: '| `printWidth` | `80` | Maximum line size. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `printWidth` | `80` | 最大行大小。'
- en: '| `semi` | `true` | Add semicolons at the end of every line, even if not needed.
    |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `semi` | `true` | 在每一行的末尾添加分号，即使不需要。'
- en: '| `singleQuote` | `false` | Use single quotes for strings. |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `singleQuote` | `false` | 对字符串使用单引号。'
- en: '| `tabWidth` | `2` | Indentation size. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `tabWidth` | `2` | 缩进大小。'
- en: '| `trailingComma` | `none` | Specify whether to add trailing commas or not,
    wherever possible. Options are `none` (never add such commas), `es5` (add them
    where ES5 allows, as in arrays or objects), or `all` (add them even to function
    arguments). |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `trailingComma` | `none` | 指定是否在可能的情况下添加尾随逗号。选项有`none`（从不添加这样的逗号），`es5`（在ES5允许的地方添加，如数组或对象），或`all`（即使在函数参数中也添加）。'
- en: '| `useTabs` | `false` | Use tabs for indentation. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `useTabs` | `false` | 使用制表符进行缩进。'
- en: 'Personally, the only ones I use are `tabWidth:4` and `printWidth:75,` but the
    latter is for the sake of the book only, not for other work. My `package.json`
    thus includes the following; I have it just before the `dependencies` key, but
    you can place it elsewhere:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我只使用`tabWidth:4`和`printWidth:75`，但后者只是为了这本书，而不是为了其他工作。我的`package.json`包括以下内容；我将其放在`dependencies`键之前，但你也可以将其放在其他位置：
- en: '[PRE12]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can also use `Prettier` independently of VSC, and in that case the configuration
    options should go in a `.prettierrc` file. See [https://prettier.io/docs/en/cli.html](https://prettier.io/docs/en/cli.html) and [https://prettier.io/docs/en/configuration.html](https://prettier.io/docs/en/configuration.html) for
    more on this.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以独立于VSC使用`Prettier`，在这种情况下，配置选项应该放在一个`.prettierrc`文件中。参见[https://prettier.io/docs/en/cli.html](https://prettier.io/docs/en/cli.html)和[https://prettier.io/docs/en/configuration.html](https://prettier.io/docs/en/configuration.html)了解更多信息。
- en: 'Finally, if you want to avoid `Prettier` code formatting for some reason or
    another, you can do the following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果出于某种原因你想要避免`Prettier`代码格式化，你可以这样做：
- en: Avoid all formatting for a given file by adding its path and name to a `.prettierignore`
    text file at the project root
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将其路径和名称添加到项目根目录下的`.prettierignore`文本文件中，可以避免给定文件的所有格式。
- en: Avoid reformatting a single sentence by preceding it with a `// prettier-ignore
    comment`
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在其前面加上`// prettier-ignore comment`来避免重新格式化单个句子
- en: For the latter option, remember to use the appropriate comment style depending
    on the source code language. For example, in an HTML file's you would use `<!--
    prettier-ignore -->`, while in CSS, it should be `/* prettier-ignore */`, and
    for JSX, `{/* prettier-ignore */}`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 对于后一种选项，记住根据源代码语言使用适当的注释样式。例如，在HTML文件中，你会使用`<!-- prettier-ignore -->`，而在CSS中，应该是`/*
    prettier-ignore */`，对于JSX，是`{/* prettier-ignore */}`。
- en: How it works…
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: There are two ways of using `Prettier`. The first is to configure VSC to automatically
    format the code whenever you save it; following the instructions we saw earlier
    when we installed VSC, change the editor Format on save option to true, and you'll
    be set. Of course, you can also format the code whenever you want by right clicking
    and selecting the Format Document option.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种使用`Prettier`的方法。第一种是配置VSC在保存代码时自动格式化代码；按照我们之前安装VSC时看到的说明，将编辑器的“保存时格式化”选项更改为true，就可以了。当然，你也可以通过右键单击并选择“格式化文档”选项来随时格式化代码。
- en: 'You can also use `Prettier` online. Go to [https://prettier.io/playground/](https://prettier.io/playground/),
    paste your code into the left panel, and you''ll instantly get a formatted version
    in the right panel. Take a look at the following screenshot for an example of
    code reformatting:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在网上使用`Prettier`。转到[https://prettier.io/playground/](https://prettier.io/playground/)，将你的代码粘贴到左侧面板，你将立即在右侧面板中获得一个格式化的版本。看下面的截图，以了解代码重新格式化的示例：
- en: '![](img/dfdc71d1-022c-47b1-a1ef-54b01c910557.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dfdc71d1-022c-47b1-a1ef-54b01c910557.png)'
- en: Prettier online can be used to experiment with configuration parameters, or
    for a quick code reformatting session
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在线的Prettier可以用来尝试配置参数，或进行快速的代码重新格式化会话
- en: 'If you want to experiment with the few available options, click Show Options at
    the bottom-left corner, and you''ll be able to configure Prettier, according to
    what we saw in the previous section, see the following screenshot:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试一下少量可用的选项，点击左下角的“显示选项”，你就可以根据我们在前一节中看到的内容配置Prettier，看下面的截图：
- en: '![](img/9c72dd1d-4a57-4b2b-a2d5-83b20135de88.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c72dd1d-4a57-4b2b-a2d5-83b20135de88.png)'
- en: If you want to dynamically experiment with (the few available) Prettier settings,
    you can do so in the online playground
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想动态地尝试（少量可用的）Prettier设置，你可以在在线游乐场中进行
- en: When preparing the code for this book, I set the right margin at 75, because
    that's what will fit in a printed page. I also set indentation to 4 characters,
    because I find it clearer. Other than that, I left everything as the default;
    fewer style arguments to deal with this way!
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在为本书准备代码时，我将右边距设置为75，因为这样才能适合打印页面。我还将缩进设置为4个字符，因为我觉得这样更清晰。除此之外，我将一切都保持默认设置；这样处理起来就少了一些样式参数！
- en: Documenting your code with JSDoc
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JSDoc记录你的代码
- en: A good rule for maintainability is that code should be documented. `JSDoc` (or
    `JSDoc3`; the name reflects the current version, 3.6.0) is an API documentation
    generator, which can produce an HTML website with full documentation for your
    code. You only have to add comments (in a specific format) to your source code,
    and `JSDoc` will scan the code to pick them up and generate the documentation.
    Let's first see how those comments should be written, and then turn to a tool
    to make the work easier with VSC.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 一个良好的可维护性规则是代码应该被记录。`JSDoc`（或`JSDoc3`；名称反映了当前版本，3.6.0）是一个API文档生成器，可以为你的代码生成完整的HTML网站文档。你只需要在你的源代码中添加注释（以特定格式），`JSDoc`就会扫描代码来提取它们并生成文档。让我们先看看这些注释应该如何编写，然后再转向一个工具，让VSC更容易地完成这项工作。
- en: The official web page for `JSDoc` is at [http://usejsdoc.org/](http://usejsdoc.org/),
    and the source code can be found at [https://github.com/jsdoc3/jsdoc](https://github.com/jsdoc3/jsdoc).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSDoc`的官方网页在[http://usejsdoc.org/](http://usejsdoc.org/)，源代码可以在[https://github.com/jsdoc3/jsdoc](https://github.com/jsdoc3/jsdoc)找到。'
- en: How to do it…
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: The main idea for `JSDoc` is to document your APIs, including functions, classes,
    methods, and whatnot. `JSDoc` comments are expected to precede the code that is
    being documented. Comments start with `/**` and end with `*/`; the double star
    distinguishes them from normal comments.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSDoc`的主要思想是记录你的API，包括函数、类、方法等。`JSDoc`注释应该在被记录的代码之前。注释以`/**`开头，以`*/`结尾；双星号将它们与普通注释区分开来。'
- en: Don't go overboard with stars, because if you write three or more, then the
    comment will also be ignored; `JSDoc` expects two stars, no more, no less.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 不要过度使用星号，因为如果写三个或更多，那么注释也会被忽略；`JSDoc`期望两个星号，不多不少。
- en: 'The following code block shows the simplest possible example, how you might
    document a function by providing a description of its goals and arguments:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块显示了可能的最简单的示例，说明了如何通过提供函数的目标和参数描述来记录函数：
- en: '[PRE13]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `@param` notation is a block tag, which introduces a code item, in this
    case, a parameter of the function. A (partial) list of common tags is as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`@param`符号是一个块标签，引入了一个代码项，这里是函数的参数。常见标签的（部分）列表如下：'
- en: '| `@author` | The developer''s name. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `@author` | 开发者的名字。 |'
- en: '| `@class` | Defines a class. |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `@class` | 定义一个类。 |'
- en: '| `@constructor` | Marks a function a constructor. |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| `@constructor` | 将函数标记为构造函数。 |'
- en: '| `@copyright`, `@license` | Legal details. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| `@copyright`, `@license` | 法律细节。 |'
- en: '| `@deprecated` | Marks a function or method as deprecated. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| `@deprecated` | 将函数或方法标记为已弃用。 |'
- en: '| `@exports` | An exported module member. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| `@exports` | 导出的模块成员。 |'
- en: '| `@function`, `@callback` | Defines a function, and more specifically, one
    used as a callback. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| `@function`, `@callback` | 定义一个函数，更具体地说，是用作回调的函数。 |'
- en: '| `@param` | What parameters are expected. The data type may be added within
    braces. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| `@param` | 期望的参数。数据类型可以在大括号内添加。 |'
- en: '| `@property` or `@prop` | A property of an object. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| `@property` or `@prop` | 对象的属性。 |'
- en: '| `@return` or `@returns` | What the function or method returns. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| `@return` or `@returns` | 函数或方法的返回值。 |'
- en: '| `@throws` or `@exception` | An exception thrown by a method. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| `@throws` or `@exception` | 方法抛出的异常。 |'
- en: '| `@version` | A library''s version. |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| `@version` | 库的版本。 |'
- en: There are more tags, such as `@private`, to identify a member as private, but
    since JS doesn't really provide that feature, I skipped it. Other tags are more
    specific, and you may not use them, such as `@generator` or `@mixin`. If you want
    to see the complete list of possible block (and also a couple of inline) tags,
    checkout [http://usejsdoc.org/index.html](http://usejsdoc.org/index.html).
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多的标签，比如`@private`，用于标识成员为私有，但由于JS实际上并没有提供这个功能，我跳过了它。其他标签更具体，你可能不会使用它们，比如`@generator`或`@mixin`。如果你想看到可能的块（以及一些内联）标签的完整列表，请查看[http://usejsdoc.org/index.html](http://usejsdoc.org/index.html)。
- en: 'A confession: we won''t be using `JsDoc` very much in this book, but only because
    all the needed explanations will be given in the text itself. For normal work,
    I''d always use it, but in this book it would mainly be redundant.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 坦白说：我们在这本书中不会经常使用`JsDoc`，但只是因为所有需要的解释都将在文本本身中给出。对于正常的工作，我总是会使用它，但在这本书中它主要是多余的。
- en: How it works…
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Writing this sort of comment can quickly become tedious, but you can use the
    *Document This* VSC extension to automatically generate the needed template, which
    you will then complete. You can find the extension at [https://marketplace.visualstudio.com/items?itemName=joelday.docthis](https://marketplace.visualstudio.com/items?itemName=joelday.docthis),but
    it''s simpler to install it through VSC itself: search for `Document This` and
    it will quickly appear.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 编写这种注释可能很快变得乏味，但你可以使用*Document This* VSC扩展来自动生成所需的模板，然后再进行补充。你可以在[https://marketplace.visualstudio.com/items?itemName=joelday.docthis](https://marketplace.visualstudio.com/items?itemName=joelday.docthis)找到这个扩展，但通过VSC本身安装它会更简单：搜索`Document
    This`，它会很快出现。
- en: After including this extension, if you right-click on the code, a new command
    will appear that will automatically generate (mostly empty) comments for you to
    complete.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在包含了这个扩展之后，如果你在代码上右键单击，将会出现一个新的命令，它将自动生成（大部分为空）的注释，供你完成。
- en: 'As for generating the automatic documentation, checkout [http://usejsdoc.org/about-commandline.html](http://usejsdoc.org/about-commandline.html);
    we won''t go into this because it''s fairly straightforward. You can configure
    `JSDoc`, and also change the template it uses for the generated page; see [http://usejsdoc.org/about-configuring-jsdoc.html](http://usejsdoc.org/about-configuring-jsdoc.html)
    and [http://usejsdoc.org/about-configuring-default-template.html](http://usejsdoc.org/about-configuring-default-template.html)
    for these topics. See the following screenshot:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 至于生成自动文档，查看[http://usejsdoc.org/about-commandline.html](http://usejsdoc.org/about-commandline.html)；我们不会深入讨论这个，因为它非常简单。你可以配置`JSDoc`，还可以更改它用于生成页面的模板；有关这些主题，请参阅[http://usejsdoc.org/about-configuring-jsdoc.html](http://usejsdoc.org/about-configuring-jsdoc.html)和[http://usejsdoc.org/about-configuring-default-template.html](http://usejsdoc.org/about-configuring-default-template.html)。请参阅以下截图：
- en: '![](img/4c9ae20c-d9a8-40f7-8212-e1ee009e3be8.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c9ae20c-d9a8-40f7-8212-e1ee009e3be8.png)'
- en: A simple example of the JSDoc output
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: JSDoc输出的一个简单示例
- en: Of course, documenting a single function won't be your use case! But for our
    purposes, it's enough; for normal use, you'd get an index with links to every
    class, function, and so on, fully documenting your code.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，文档化单个函数不会是你的用例！但对于我们的目的来说，这已经足够了；对于正常使用，你将得到一个带有链接到每个类、函数等的索引，充分记录你的代码。
- en: You have set up your working environment, and you are able to write documented,
    well-indented code in the latest version of JS, but that's still not proof against
    some error that may be committed, so let's now look into ways of enhancing your
    code more deeply.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经设置好了你的工作环境，并且能够在最新版本的JS中编写有文档记录的、缩进良好的代码，但这仍然不能防止可能发生的错误，所以现在让我们深入了解如何增强你的代码。
- en: Adding code quality checks with ESLint
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ESLint添加代码质量检查
- en: 'JS is a very potent language, but there''s also great potential for misuse.
    For example, most people would agree that if `a==b` is true, and `b==c` is also
    true, then `a==c` should be true too, but because of the data type conversion
    rules that JS applies for the `==` operator, you have the following:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: JS是一种非常强大的语言，但也有很大的滥用潜力。例如，大多数人会同意，如果`a==b`为真，并且`b==c`也为真，那么`a==c`也应该为真，但由于JS对`==`运算符应用的数据类型转换规则，你会得到以下结果：
- en: '[PRE14]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Another example follows; what does this very simple function return?
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是另一个例子；这个非常简单的函数返回什么？
- en: '[PRE15]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you answered *an object*, you would have been bitten by a missing semicolon.
    This code is actually interpreted by JS as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回答*一个对象*，你会被一个缺少分号咬到。这段代码实际上被JS解释为以下内容：
- en: '[PRE16]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note the semicolon after `return`. This function returns `undefined`, and `something`
    is interpreted as a label for an expression that happens to be `true`; bad! These
    kinds of situations are common enough, and even if you know what you are doing,
    getting at least a warning about possible problems with your code could help root
    out a bug, and that's the kind of warning that `ESLint` produces.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`return`后面的分号。这个函数返回`undefined`，而`something`被解释为一个表达式的标签，恰好是`true`；糟糕！这种情况很常见，即使你知道自己在做什么，至少得到一个关于代码可能存在问题的警告也有助于排除错误，这就是`ESLint`产生的警告类型。
- en: The *gotcha* shown previously is only one of many that JS has for unaware developers.
    Google for *JavaScript gotchas* and you'll get several lists of possible errors.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 前面显示的*陷阱*只是JS对不知情的开发人员之一。搜索*JavaScript陷阱*，你会得到几个可能错误的列表。
- en: How to do it…
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: '**Linters** are a class of programming tools that analyze your source code,
    and raise warnings and errors about poor-quality uses or constructs that could
    even imply bugs. We are going to use ESLint, created by Nicholas Zakas in 2013;
    the tool''s current version is 5.10.0, as of December, 2018.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linters**是一类编程工具，它们分析你的源代码，并提出关于低质量用法或构造的警告和错误，甚至可能暗示着错误。我们将使用ESLint，由Nicholas
    Zakas于2013年创建；该工具的当前版本是5.10.0，截至2018年12月。'
- en: The first `lint` program was written in 1978 by Stephen Johnson, at Bell Labs,
    where he also worked on Unix, **yet another compiler compiler** (**yacc**), and
    the portable C compiler, which made it easier to output code for different computer
    architectures.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 1978年，贝尔实验室的Stephen Johnson编写了第一个`lint`程序，他还在Unix，**另一个编译器编译器**（**yacc**）和便携式C编译器上工作，这使得更容易为不同的计算机架构输出代码。
- en: ^(`ESLint` is based upon pluggable rules, which may be enabled or disabled at
    will, or configured according to your specific preferences. (You could even develop
    your own rules, but that's beyond the scope of this book.) There are also bundles
    of rules that let you avoid having to individually configure dozens of distinct
    rules.)
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: ^（`ESLint`基于可插拔规则，可以根据您的特定偏好启用或禁用，或进行配置。（您甚至可以开发自己的规则，但这超出了本书的范围。）还有一些规则包，可以让您避免必须单独配置数十个不同的规则。）
- en: 'Installing ESLint is quite simple, and just requires doing the following:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 安装ESLint非常简单，只需要执行以下操作：
- en: '[PRE17]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, you will have to add ESLint options to the `package.json` configuration
    file; let''s get into this. First, we''ll add a script to apply ESLint to our
    complete source directory (which has only a single file at this time!) with `npm
    run eslint`:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将不得不将ESLint选项添加到`package.json`配置文件中；让我们开始吧。首先，我们将添加一个脚本，将ESLint应用于我们的完整源目录（此时只有一个文件！）使用`npm
    run eslint`：
- en: '[PRE18]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We must also specify some configuration for ESLint itself. We''ll add a completely
    new section for this:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须为ESLint本身指定一些配置。我们将为此添加一个全新的部分：
- en: '[PRE19]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s go item by item:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个项目地进行：
- en: '`parserOptions` lets you specify what JS version you want to process (I''m
    going with 2017, for ES8), and whether you are going to use modules (I''m indicating
    this, in advance of what we''ll see in the *Organizing code in modules* section
    of [Chapter 2](2948d1ab-ac85-4b3a-90f1-f240b7688216.xhtml), *Using Modern JavaScript
    Feature*s).'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parserOptions`允许您指定要处理的JS版本（我选择2017年，用于ES8），以及是否要使用模块（我提前指出这一点，我们将在[第2章](2948d1ab-ac85-4b3a-90f1-f240b7688216.xhtml)的*模块化代码组织*部分中看到）*使用现代JavaScript功能*）。'
- en: '`env` lets you specify the environment(s) you are going to work with, and that
    really means that some global variables will be assumed to exist. In this case,
    I''m saying I will be working both with code for browsers and for `Node`, but
    there are plenty more possible environments; checkout the *Specifying Environments*
    section at [https://eslint.org/docs/user-guide/configuring](https://eslint.org/docs/user-guide/configuring).
    Later on, we will be adding some more environments, for example, for unit testing.'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`env`允许您指定要使用的环境，这实际上意味着假定存在一些全局变量。在这种情况下，我表示我将同时使用浏览器和`Node`的代码，但还有很多其他可能的环境；请查看[https://eslint.org/docs/user-guide/configuring](https://eslint.org/docs/user-guide/configuring)中的*指定环境*部分。稍后，我们将添加一些更多的环境，例如用于单元测试。'
- en: '`extends` lets you select a predefined set of rules, which you will later be
    able to modify to suit your tastes. I''m going with the recommended set; you can
    read more about it at [https://github.com/kunalgolani/eslint-config](https://github.com/kunalgolani/eslint-config).
    The available sets of rules change only whenever the `ESlint` major version changes,
    so they are reasonably stable. Furthermore, the `recommended` set represents a
    usually agreed upon list of rules, so before you start tinkering with specific
    changes, give it a try as is. The complete set of rules is available at [https://eslint.org/docs/rules/](https://eslint.org/docs/rules/),
    and the recommended rules can be found at [https://github.com/eslint/eslint/blob/master/conf/eslint-recommended.js](https://github.com/eslint/eslint/blob/master/conf/eslint-recommended.js).'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extends`允许您选择一组预定义的规则，稍后您将能够修改以适应您的口味。我选择推荐的设置；您可以在[https://github.com/kunalgolani/eslint-config](https://github.com/kunalgolani/eslint-config)上了解更多信息。可用的规则集仅在`ESlint`主要版本更改时才会更改，因此它们是相当稳定的。此外，`recommended`设置代表通常达成一致的规则列表，因此在开始进行特定更改之前，请尝试按原样进行。完整的规则集可在[https://eslint.org/docs/rules/](https://eslint.org/docs/rules/)上找到，推荐的规则可以在[https://github.com/eslint/eslint/blob/master/conf/eslint-recommended.js](https://github.com/eslint/eslint/blob/master/conf/eslint-recommended.js)上找到。'
- en: '`rules` lets you change some of the rules to better suit your style. We''ll
    see good reasons for this soon.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rules`允许您更改一些规则以更好地适应您的风格。我们很快就会看到这样做的充分理由。'
- en: If (and only if) you are planning to use some `Babel` feature that is not yet
    supported by `ESLint`, you should install and use the `babel-eslint` package from [https://www.npmjs.com/package/babel-eslint](https://www.npmjs.com/package/babel-eslint).
    This will also require adding a line to the `.eslintrc.json` file to change the
    parser that `ESLint` uses. However, keep in mind that it's highly unlikely you
    will require this change!
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果（仅当）您计划使用`ESLint`尚不支持的一些`Babel`功能，您应该从[https://www.npmjs.com/package/babel-eslint](https://www.npmjs.com/package/babel-eslint)安装并使用`babel-eslint`包。这还需要向`.eslintrc.json`文件添加一行以更改`ESLint`使用的解析器。但是，请记住，您几乎不太可能需要进行此更改！
- en: How it works…
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'If we use `npm run eslint` as is, we will get the following result:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们按原样使用`npm run eslint`，我们将得到以下结果：
- en: '[PRE20]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The standard rules do not allow using `console.log(...)`, since you don''t
    probably want to include them in your shipped application; this is the `no-console`
    rule at [https://eslint.org/docs/rules/no-console](https://eslint.org/docs/rules/no-console).
    We can enable or disable rules on a global or local basis. If we approve of this
    `console.log(...)`, we must then disable the `no-console` rule locally. We''ll
    do this by adding a comment to the source code, just before the problem line:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 标准规则不允许使用`console.log（...）`，因为您可能不希望将它们包含在您的应用程序中；这是[https://eslint.org/docs/rules/no-console](https://eslint.org/docs/rules/no-console)中的`no-console`规则。我们可以在全局或本地基础上启用或禁用规则。如果我们批准此`console.log（...）`，那么我们必须在本地禁用`no-console`规则。我们将在问题行之前向源代码添加注释来完成这一点：
- en: '[PRE21]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If you had used `// eslint-disable no-console`, you would have disabled the
    `no-console` rule for the whole source file; `// eslint-disable` with no further
    specification would have disabled *all* rules for the file. After this, if you
    use `npm run eslint`, you'll get no errors.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用了`// eslint-disable no-console`，你会禁用整个源文件的`no-console`规则；没有进一步的规定的`// eslint-disable`会禁用文件的*所有*规则。之后，如果你使用`npm
    run eslint`，你将不会得到错误。
- en: 'Now, let''s set a global rule. Some people don''t like the `solutions++` line
    because not everybody feels comfortable with the `++` operator; there''s a `no-plusplus` rule
    for this, at [https://eslint.org/docs/rules/no-plusplus](https://eslint.org/docs/rules/no-plusplus),
    but by default it''s not enabled in the recommended set, so we will enable it globally
    by adding to the `rules` section in `package.json`:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们设置一个全局规则。有些人不喜欢`solutions++`这一行，因为不是每个人都对`++`运算符感到舒适；对此有一个`no-plusplus`规则，位于[https://eslint.org/docs/rules/no-plusplus](https://eslint.org/docs/rules/no-plusplus)，但默认情况下它不在推荐的设置中启用，所以我们将在`package.json`的`rules`部分中全局启用它：
- en: '[PRE22]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'After this, if you run `ESLint`, you''ll get a new error, and the developer
    that supposedly did it should fix the code:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，如果你运行`ESLint`，你会得到一个新的错误，应该修复代码的开发者：
- en: '[PRE23]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The possible configurations for a rule are `"off"` (if you want to disable it), `"warn"` (if
    you want to get a warning, but accept it), and `"error"` (rejecting the file).
    Some rules accept extra configurations, but those are specific; you'll have to
    read the rule documentation in order to learn about the possible changes. See [https://eslint.org/docs/rules/no-empty](https://eslint.org/docs/rules/no-empty)
    for a specific example with the `no-empty` rule, which disallows empty blocks
    of code but has an extra option to allow them in `catch` statements.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 规则的可能配置是`"off"`（如果你想要禁用它），`"warn"`（如果你想要得到一个警告，但接受它），和`"error"`（拒绝文件）。一些规则接受额外的配置，但那些是特定的；你需要阅读规则文档以了解可能的更改。参见[https://eslint.org/docs/rules/no-empty](https://eslint.org/docs/rules/no-empty)以了解`no-empty`规则的具体示例，该规则不允许空代码块，但有一个额外选项允许它们在`catch`语句中。
- en: Deciding what rules to enable or disable is something that usually happens at
    the beginning of a project, and it can be expected that some new rule changes
    will happen over time. In any case, no matter what you pick, ideally you should
    work only with `"off"` and `"error"`; if developers get used to warnings, they
    finally end up not paying attention to them, and that can be bad! Get used to
    the whole list of rules at [https://eslint.org/docs/rules/.](https://eslint.org/docs/rules/)
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 决定启用或禁用哪些规则通常发生在项目开始时，可以预期随着时间的推移会发生一些新的规则更改。无论你选择什么，理想情况下你应该只使用`"off"`和`"error"`；如果开发人员习惯于警告，最终他们会不再关注它们，这可能是不好的！熟悉所有规则列表，参见[https://eslint.org/docs/rules/.](https://eslint.org/docs/rules/)
- en: 'Finally, all projects will be using an `out/` directory for the output file,
    which you would then distribute. If you care to look at some files within it,
    you don''t need `ESLint` protesting about possible errors in generated code. To
    avoid this, you can add a small section to the `package.json` file:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，所有项目都将使用一个`out/`目录用于输出文件，然后你可以进行分发。如果你想查看其中的一些文件，你不需要`ESLint`在生成的代码中抗议可能的错误。为了避免这种情况，你可以在`package.json`文件中添加一个小节：
- en: '[PRE24]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: There's more…
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Of course, all these checks are very good, but if you had to stop working, save
    everything, and run a separate tool each time you wanted to check for problems
    in your code, it would soon become unbearable. However, with VSC you can add a
    plugin to interact with ESLint in real time. Go to the extensions view and search
    for ESLint; you should find and install an extension, currently at version 1.7.2
    (March 2018), written by Dirk Baeumer.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，所有这些检查都是非常好的，但是如果你不得不停止工作，保存一切，并且每次想要检查代码中的问题时都要运行一个单独的工具，那将很快变得难以忍受。然而，使用VSC，你可以添加一个插件以实时与ESLint进行交互。转到扩展视图并搜索ESLint；你应该找到并安装一个扩展，目前版本为1.7.2（2018年3月），由Dirk
    Baeumer编写。
- en: 'Once you install this extension, errors will be shown on screen with a wavy
    red underline, and if you mouse over them, you''ll get an explanation about the
    failed rule. Take a look at the  for an example:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了这个扩展之后，错误将以波浪红色下划线的形式显示在屏幕上，如果你将鼠标悬停在上面，你会得到一个关于失败规则的解释。看一个例子：
- en: '![](img/2cbacf17-225c-450b-92b8-c0bd991c1b94.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2cbacf17-225c-450b-92b8-c0bd991c1b94.png)'
- en: The ESLint plugin in action, showing problems with the code in real time
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint插件在实时显示代码问题
- en: 'There are very few configuration items for `ESLint`; the only one I use is `"eslint.alwaysShowStatus":
    true`, so the status bar will show whether `ESLint` is enabled or not.'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`ESLint`的配置项非常少；我只使用了一个`"eslint.alwaysShowStatus": true`，所以状态栏将显示`ESLint`是否已启用。'
- en: An interesting package that you could consider is the web `DeepScan` tool at [https://deepscan.io/home/](https://deepscan.io/home/).
    `DeepScan` is advertised as *beyond Lint*, insofar as it can also detect runtime
    problems having to do with implicit type conversions, null checks, unreachable
    code, and more. For the time being, `DeepScan` is considered to be in beta stage
    and there are no paid plans yet. You can use it free for open source projects;
    for example, you can use it automatically with a GitHub project.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 一个你可以考虑的有趣的包是web `DeepScan`工具，网址为[https://deepscan.io/home/](https://deepscan.io/home/)。`DeepScan`被宣传为*超越Lint*，因为它还可以检测与隐式类型转换、空检查、不可达代码等有关的运行时问题。目前，`DeepScan`被认为处于测试阶段，尚无付费计划。你可以在开源项目中免费使用它；例如，你可以在GitHub项目中自动使用它。
- en: Adding Flow for data types checks
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为数据类型检查添加Flow
- en: Let's finish this chapter by considering a tool that turns JS into a (sort of)
    new language, a *typed* one. One of the characteristics of JS is being untyped;
    for example, a variable can hold, or a function may return, any kind of value,
    there's no way to declare what type(s) should be stored in a variable or returned
    from a function. In this section, we will add `Flow`, a tool developed by Facebook,
    which allows for data type controls.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过考虑一个将JS转换为（一种新的）语言的工具来结束本章。JS的特点之一是无类型；例如，变量可以保存任何类型的值，函数可以返回任何类型的值，没有办法声明变量应该存储哪种类型的值，或者函数应该返回哪种类型的值。在本节中，我们将添加由Facebook开发的工具`Flow`，它允许进行数据类型控制。
- en: 'Angular developers do not go for `Flow`, and opt for `TypeScript` instead.
    (OK, not Angular developers only; you can use `TypeScript` practically everywhere!)
    This version of JS was developed by Microsoft, and also includes data typing in
    a style very similar to `Flow`. `TypeScript` has its own transpiler, and you won''t
    need `Babel` or `Flow`, so configuration will be a tad simpler. Instead of `ESLint`,
    you''ll use `TSLint`, but you need not forego ESLint''s rules: install `tslint-eslint-rules`;
    (see [https://github.com/buzinas/tslint-eslint-rules](https://github.com/buzinas/tslint-eslint-rules))
    and you''ll get the best of both worlds.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: Angular开发人员不使用`Flow`，而是选择`TypeScript`。（好吧，不仅仅是Angular开发人员；您几乎可以在任何地方使用`TypeScript`！）这个JS的版本是由微软开发的，也包括数据类型，风格与`Flow`非常相似。`TypeScript`有自己的转换器，您不需要`Babel`或`Flow`，因此配置会简单一些。您将使用`TSLint`而不是`ESLint`，但您不需要放弃ESLint的规则：安装`tslint-eslint-rules`；（请参阅[https://github.com/buzinas/tslint-eslint-rules](https://github.com/buzinas/tslint-eslint-rules)），您将获得两全其美。
- en: 'We will be getting into how to fully use `Flow` in the *Adding types* section
    of [Chapter 2](2948d1ab-ac85-4b3a-90f1-f240b7688216.xhtml), *Using JavaScript
    Modern Features*, but let me give you a preview of what we expect; then, we''ll
    get to install all the needed packages, and afterwards we''ll go into more details. Imagine
    you wrote a highly complex function to add two numbers:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第2章](2948d1ab-ac85-4b3a-90f1-f240b7688216.xhtml)的*添加类型*部分中全面介绍如何使用`Flow`，但让我先给您一个预览；然后，我们将安装所有所需的包，然后我们将进一步了解更多细节。假设您编写了一个非常复杂的函数来添加两个数字：
- en: '[PRE25]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'However, since JS won''t check types and has some conversion rules, the following
    two lines would also work:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于JS不会检查类型并且具有一些转换规则，以下两行也可以工作：
- en: '[PRE26]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You could, on principle, add a lot of data type checking code to your function
    to verify `typeof(x)==="number"`, but that can become a chore. (Although, of course,
    for some cases it's the only solution.) However, many errors can be detected before
    even running the code, as would happen here.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，您可以向函数添加大量数据类型检查代码来验证`typeof(x)==="number"`，但这可能会变得很繁琐。（当然，对于某些情况，这是唯一的解决方案。）然而，许多错误可以在运行代码之前被检测到，就像这里发生的情况一样。
- en: 'If you modify the function to include data type declarations, `Flow` will be
    able to detect the two wrong uses, and you will be able to solve the situation
    before even running the code:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您修改函数以包含数据类型声明，`Flow`将能够检测到两个错误的使用，并且您将能够在运行代码之前解决这种情况：
- en: '[PRE27]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Basically, that's all there is! Of course, there are many details about what
    data types are available, defining new ones, using interfaces, and much more,
    but we'll get to that in the next chapter. For the time being, let's just install
    it with the promise that we will learn more about its use very shortly.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上就是这样！当然，关于可用的数据类型、定义新数据类型、使用接口等细节有很多，但我们将在下一章中介绍。目前，让我们安装它，并承诺我们很快会了解更多关于它的用法。
- en: How to do it…
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤如下…
- en: Installing `Flow` depends on whether you are working with `Babel` (as would
    be the case for client-side browser code) or not (as you would do for server-side
    code). We will see how to deal with `Node` starting in [Chapter 3](f2d2d72d-2137-4f67-8d72-9a113dc3d09c.xhtml),
    *Developing with Node*; here, we'll just consider Babel.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`Flow`取决于您是否正在使用`Babel`（例如客户端浏览器代码的情况）或不使用（例如服务器端代码的情况）。我们将在[第3章](f2d2d72d-2137-4f67-8d72-9a113dc3d09c.xhtml)中看到如何处理`Node`；在这里，我们只考虑Babel。
- en: 'To start, execute the following command to get the needed Flow packages, including
    the Babel and ESLint ones:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，执行以下命令来获取所需的Flow包，包括Babel和ESLint包：
- en: '[PRE28]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, add the `"flow"` preset for Babel in `package.json`:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`package.json`中添加`"flow"`预设为Babel：
- en: '[PRE29]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add some lines to the `ESLint` configuration, also in `package.json`:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 还要在`package.json`中的`ESLint`配置中添加一些行：
- en: '[PRE30]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add a `"flow"` script in `package.json`:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在`package.json`中添加一个`"flow"`脚本：
- en: '[PRE31]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Finally, perform `npm run flow init` to initialize `Flow`, only once, to create
    a `.flowconfig` file with information that will be used by the `Flow` process.
    (See [https://flow.org/en/docs/config/](https://flow.org/en/docs/config/) for
    more information on this file.)
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，执行`npm run flow init`来初始化`Flow`，只需一次，以创建一个包含`Flow`进程将使用的信息的`.flowconfig`文件。（有关此文件的更多信息，请参见[https://flow.org/en/docs/config/](https://flow.org/en/docs/config/)。）
- en: The `.flowconfig` file doesn't really match the style of other configuration
    files, and should really be a JSON file instead, possibly part of `package.json`.
    However, this is a still pending item; you can check [https://github.com/facebook/flow/issues/153](https://github.com/facebook/flow/issues/153)
    to monitor advances, but for the time being, you'll have to deal with `.flowconfig`
    as is.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`.flowconfig`文件实际上并不符合其他配置文件的风格，应该是一个JSON文件，可能是`package.json`的一部分。然而，这仍然是一个未决事项；您可以查看[https://github.com/facebook/flow/issues/153](https://github.com/facebook/flow/issues/153)来监控进展，但目前，您将不得不处理`.flowconfig`。'
- en: How it works…
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: With the configuration you just wrote, you are set! Just do `npm run flow` whenever
    you start to work, to run a background process that will check your code incrementally
    and let you know about possible data type problems. However, you may even skip
    this step if you work with VSC; see the next section.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 通过您刚刚编写的配置，您已经准备好了！每当开始工作时，只需执行`npm run flow`，就可以运行一个后台进程，逐步检查您的代码，并让您了解可能的数据类型问题。但是，如果您使用VSC，甚至可以跳过此步骤；请参见下一节。
- en: Configuring Flow's linting
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Flow的linting
- en: Even though `ESLint` has us well covered for avoiding JS bad coding practices,
    it doesn't do much with regard to data types, but `Flow` can help us in this area.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`ESLint`已经很好地帮助我们避免JS的不良编码实践，但它在数据类型方面做得不多，但`Flow`可以帮助我们在这方面。
- en: 'There is a set of rules you can apply, and you will configure them through
    the `.flowconfig` file we mentioned in the previous section:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以应用一组规则，并且可以通过我们在上一节中提到的`.flowconfig`文件进行配置：
- en: '[PRE32]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The first line, `all=warn`, is a *catch-all*, which defines the standard setting
    for all rules; possible values are `off`, `warn`, and `error`. After that, you
    can specify settings for individual rules; for example, in the preceding code
    I decided to ignore warnings about unsafe getters or setters. Some rules are as
    follows:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行`all=warn`是一个*全局设置*，定义了所有规则的标准设置；可能的值为`off`，`warn`和`error`。之后，您可以为单个规则指定设置；例如，在前面的代码中，我决定忽略有关不安全的getter或setter的警告。一些规则如下：
- en: '`sketchy-null`, which applies whenever you test the value of a variable that
    could be false (for example, zero) but also null or undefined, in the context
    of something like `if (x) { ... }`. This warning is meant to remind you that the
    variable might have a value you weren''t considering.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sketchy-null`，每当您测试可能为false的变量的值（例如零），但也为null或未定义时，例如在`if (x) { ... }`的上下文中。此警告旨在提醒您变量可能具有您未考虑的值。'
- en: '`sketchy-null-bool`, `sketchy-null-number`, `sketchy-null-string`, and `sketchy-null-mixed`
    are more granular versions of `sketchy-null`, and apply only to the specified
    data types.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sketchy-null-bool`，`sketchy-null-number`，`sketchy-null-string`和`sketchy-null-mixed`是`sketchy-null`的更细粒度版本，并且仅适用于指定的数据类型。'
- en: '`unclear-type` warns about using `any`, `Object`, or `Function` as data type
    annotations.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unclear-type`警告使用`any`，`Object`或`Function`作为数据类型注释。'
- en: '`untyped-import` and `untyped-type-import` warn you against importing from
    untyped files.'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`untyped-import`和`untyped-type-import`警告您不要从未输入类型的文件中导入。'
- en: '`unsafe-getters-setters` advises against using getters or setters, because
    of their side effects.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsafe-getters-setters`建议不要使用getter或setter，因为它们会产生副作用。'
- en: Read the complete current set of `Flow` linting rules at [https://flow.org/en/docs/linting/rule-reference/](https://flow.org/en/docs/linting/rule-reference/),
    where you will also find examples of each rule.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完整的当前`Flow` linting规则集，网址为[https://flow.org/en/docs/linting/rule-reference/](https://flow.org/en/docs/linting/rule-reference/)，您还将在其中找到每个规则的示例。
- en: 'You should also set `include_warnings` to `true`, in order to be able to get
    warnings in VSC:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应将`include_warnings`设置为`true`，以便能够在VSC中获得警告：
- en: '[PRE33]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Whatever settings you include in `.fontconfig` will apply globally to your
    entire project, but you can also change them on a file-by-file basis, or even
    for a single line of code, along the same lines as with ESLint. You can disable
    warnings for a line by using a `flowlint-next-line` comment and listing the rules
    you want to change:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您在`.fontconfig`中包含哪些设置，都将全局应用于整个项目，但您也可以按文件或甚至按代码行进行更改，与ESLint类似。您可以通过使用`flowlint-next-line`注释和列出要更改的规则来禁用一行的警告：
- en: '[PRE34]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: There is another comment, `flowlint`, that applies to the complete file. Checkout [https://flow.org/en/docs/linting/flowlint-comments/](https://flow.org/en/docs/linting/flowlint-comments/)
    for more possibilities.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个注释`flowlint`，适用于整个文件。查看[https://flow.org/en/docs/linting/flowlint-comments/](https://flow.org/en/docs/linting/flowlint-comments/)以获取更多可能性。
- en: Using Flow within VSC
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在VSC中使用Flow
- en: 'As we have been doing previously, we''ll want to see `Flow` problems right
    in VSC. There''s a simple solution: just go to Extensions, search for `Flow Language
    Support`, and install the package; that''s it!'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，我们希望在VSC中直接查看`Flow`问题。有一个简单的解决方案：只需转到扩展，搜索`Flow Language Support`，并安装该软件包；就是这样！
- en: 'You''ll also have to change two settings for VSC:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 您还必须更改VSC的两个设置：
- en: 'Add `"flow.useNPMPackagedFlow": true` and this will remove the need to do `npm
    run flow` at the beginning; the extension will do that on its own'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '添加`"flow.useNPMPackagedFlow": true`，这将消除在开始时执行`npm run flow`的需要；扩展将自行执行此操作'
- en: 'Add `"javascript.validate.enable": false` to avoid clashes between Flow''s
    syntax and JS'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '添加`"javascript.validate.enable": false`以避免Flow的语法与JS之间的冲突'
- en: 'After that, you will be able to see `Flow` errors onscreen; see following screenshot
    for an example:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您将能够在屏幕上看到`Flow`错误；请参阅以下屏幕截图以了解示例：
- en: '![](img/d8759edb-75e5-437d-b204-2eb8b2641d2b.png)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8759edb-75e5-437d-b204-2eb8b2641d2b.png)'
- en: The VSC Flow extension lets you catch data type errors in real time; however,
    error messages are not always very clear
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: VSC Flow扩展允许您实时捕获数据类型错误；但是，错误消息并不总是非常清晰
