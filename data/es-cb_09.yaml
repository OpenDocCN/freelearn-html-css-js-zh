- en: Larger Structures with Design Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用设计模式构建更大的结构
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Defining steps with template functions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模板函数定义步骤
- en: Assembling customized instances with builders
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用构建器组装自定义实例
- en: Replicating instances with factories
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用工厂复制实例
- en: Processing a structure with the visitor pattern
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用访问者模式处理结构
- en: Using a singleton to manage instances
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用单例管理实例
- en: Modifying an existing design pattern to fit different use cases
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改现有设计模式以适应不同的用例
- en: Combining existing design patterns to fit different use cases
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将现有设计模式组合起来以适应不同的用例
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Classes, like objects and functions, are the fundamental building blocks from
    which we create programs. As programs grow, it becomes more difficult to efficiently
    and systematically define relationships between entities. When the relationships
    between data and functionality grow complicated, we can use classes and other
    objects to organize them. But what do we do when classes and objects proliferate?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 类，就像对象和函数一样，是我们创建程序的基本构建块。随着程序的扩展，定义实体之间关系变得越来越困难，且需要高效和系统地定义。当数据与功能之间的关系变得复杂时，我们可以使用类和其他对象来组织它们。但是，当类和对象大量增加时，我们该怎么办？
- en: Design patterns can be a helpful guide. Useful design patterns are refined from
    practical implementation. These patterns are intended to solve patterns of a given
    shape in predictable ways. When properly implemented, they form a contract of
    expected behaviors. This predictability and regularity (with other implementations
    of the pattern) assist in reasoning about code and a higher level of abstraction.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式可以是一个有用的指南。有用的设计模式是从实际实现中提炼出来的。这些模式旨在以可预测的方式解决给定形状的模式。当正确实现时，它们形成了一个预期的行为契约。这种可预测性和规律性（与其他模式的实现）有助于推理代码和更高层次的抽象。
- en: In this chapter, we'll see how common design patterns can be used as blueprints
    for organizing larger structures.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解如何使用常见的设计模式作为组织更大结构的蓝图。
- en: Defining steps with template functions
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模板函数定义步骤
- en: A template is a design pattern that details the order a given set of operations
    are to be executed in; however, a template does not outline the steps themselves.
    This pattern is useful when behavior is divided in to phases that have some conceptual
    or side effect dependency that requires them to be executed in a specific order.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 模板是一种设计模式，它详细说明了给定操作集应执行的顺序；然而，模板本身并不概述步骤。当行为被划分为具有某些概念或副作用依赖性，需要按特定顺序执行的阶段时，此模式非常有用。
- en: In this recipe, we'll see how to use the template function design pattern.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将了解如何使用模板函数设计模式。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您已经有一个工作区，允许您在浏览器中创建和运行 ES 模块。如果您没有，请参阅前两章。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序并导航到您的 workspace。
- en: Create a new folder named `09-01-defining-steps-with-template-functions`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `09-01-defining-steps-with-template-functions` 的新文件夹。
- en: Copy or create an `index.html` file that loads and runs a `main` function from
    `main.js`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个 `index.html` 文件，该文件从 `main.js` 加载并运行 `main` 函数。
- en: 'Create a `main.js` file that defines a new abstract `class` named `Mission`:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个定义名为 `Mission` 的新抽象 `class` 的 `main.js` 文件：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add a function named `execute` that calls three instance methods—`determineDestination`,
    `determinPayload`, and `launch`:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `execute` 的函数，该函数调用三个实例方法——`determineDestination`、`determinPayload` 和
    `launch`：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a `LunarRover` class that extends the `Mission` class:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个扩展 `Mission` 类的 `LunarRover` 类：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add a constructor that assigns `name` to an instance property:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个构造函数，将 `name` 分配给实例属性：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Implement the three methods called by `Mission.execute`:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现 `Mission.execute` 调用的三个方法：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a `JovianOrbiter` class that also extends the `Mission` class:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个也扩展 `Mission` 类的 `JovianOrbiter` 类：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a `main` function that creates both concrete mission types and executes
    them:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数，该函数创建具体的任务类型并执行它们：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的 Python 网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'The output should appear as follows:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![](img/17f7e161-ba42-4534-b30f-2c7fab39c4bb.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17f7e161-ba42-4534-b30f-2c7fab39c4bb.png)'
- en: How it works...
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Mission` abstract class defines the `execute` method, which calls the other
    instance methods in a particular order. You'll notice that the methods called
    are not defined by the `Mission` class. This implementation detail is the responsibility
    of the extending classes. This use of abstract classes allows child classes to
    be used by code that takes advantage of the interface defined by the abstract
    class.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mission`抽象类定义了`execute`方法，该方法以特定顺序调用其他实例方法。你会注意到被调用的方法并非由`Mission`类定义。这个实现细节是扩展类的责任。这种抽象类的使用允许子类被利用抽象类定义的接口的代码所使用。'
- en: In the template function pattern, it is the responsibility of the child classes
    to define the steps. When they are instantiated, and the `execute` method is called,
    those steps are then performed in the specified order.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板函数模式中，定义步骤的责任在于子类。当它们被实例化，并调用`execute`方法时，这些步骤就会按照指定的顺序执行。
- en: Ideally, we'd be able to ensure that `Mission.execute` was not overridden by
    any inheriting classes. Overriding this method works against the pattern and breaks
    the contract associated with it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们应该能够确保`Mission.execute`方法不会被任何继承类覆盖。覆盖此方法与模式相悖，并破坏了与之相关的契约。
- en: This pattern is useful for organizing data-processing pipelines. The guarantee
    that these steps will occur in a given order means that, if side effects are eliminated,
    the instances can be organized more flexibly. The implementing class can then
    organize these steps in the best possible way.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式对于组织数据处理管道非常有用。这些步骤以给定顺序发生的保证意味着，如果消除了副作用，实例可以更灵活地组织。实现类可以据此以最佳方式组织这些步骤。
- en: Assembling customized instances with builders
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用构建器组装定制实例
- en: 'The previous recipe shows how to organize the operations of a class. Sometimes,
    object initialization can also be complicated. In these situations, it can be
    useful to take advantage of another design pattern: builders.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的配方展示了如何组织类的操作。有时，对象初始化也可能很复杂。在这些情况下，利用另一个设计模式：构建器，可能很有用。
- en: In this recipe, we'll see how to use builders to organize the initialization
    of more complicated objects.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到如何使用构建器来组织更复杂对象的初始化。
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方假设你已经有了一个工作区，允许你在浏览器中创建和运行ES模块。如果你没有，请参阅前两章。
- en: How to do it...
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序并导航到你的工作区。
- en: Create a new folder named `09-02-assembling-instances-with-builders`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`09-02-assembling-instances-with-builders`的新文件夹。
- en: 'Create a `main.js` file that defines a new `class` named `Mission`, which that
    takes a `name` constructor argument and assigns it to an instance property. Also,
    create a `describe` method that prints out some details:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.js`文件，定义一个名为`Mission`的新`class`，它接受一个`name`构造函数参数并将其分配给实例属性。同时，创建一个`describe`方法，打印出一些详细信息：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create classes named `Destination`, `Payload`, and `Rocket`, which receive
    a `name` property as a constructor parameter and assign it to an instance property:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`Destination`、`Payload`和`Rocket`的类，这些类接收一个`name`属性作为构造函数参数并将其分配给实例属性：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a `MissionBuilder` class that defines the `setMissionName`, `setDestination`,
    `setPayload`, and `setRocket` methods:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`MissionBuilder`类，它定义了`setMissionName`、`setDestination`、`setPayload`和`setRocket`方法：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a `build` method that creates a new `Mission` instance with the appropriate
    properties:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`build`方法，该方法使用适当的属性创建一个新的`Mission`实例：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a `main` function that uses `MissionBuilder` to create a new mission
    instance:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main`函数，使用`MissionBuilder`创建一个新的任务实例：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Start your Python web server and open the following link in your browser: `http://localhost:8000/`.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的Python网络服务器并在浏览器中打开以下链接：`http://localhost:8000/`。
- en: 'Your output should appear as follows:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的输出应该如下所示：
- en: '![](img/6cf25134-2e1e-4673-9212-3606668ae3e2.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6cf25134-2e1e-4673-9212-3606668ae3e2.png)'
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The builder defines methods for assigning all the relevant properties and defines
    a build method that ensures that each is called and assigned appropriately. Builders
    are like template functions, but instead of ensuring that a set of operations
    are executed in the correct order, they ensure that an instance is properly configured
    before returning.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 构建器定义了分配所有相关属性的方法，并定义了一个`build`方法，确保每个方法都被适当地调用和分配。构建器类似于模板函数，但它们确保在返回实例之前，实例被正确配置。
- en: Because each instance method of `MissionBuilder` returns the `this` reference,
    the methods can be chained. The last line of the `main` function calls `describe`
    on the new `Mission` instance that is returned from the `build` method.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`MissionBuilder`的每个实例方法都返回`this`引用，所以这些方法可以被链式调用。`main`函数的最后一行在`build`方法返回的新`Mission`实例上调用`describe`方法。
- en: Replicating instances with factories
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用工厂复制实例
- en: Like builders, factories are a way of organizing object construction. They differ
    from builders in how they are organized. Often, the interface of factories is
    a single function call. This makes factories easier to use, if less customizable,
    than builders.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 与构建器一样，工厂是组织对象构造的一种方式。它们在组织方式上与构建器不同。通常，工厂的接口是一个单一的功能调用。这使得工厂比构建器更容易使用，尽管可定制性较低。
- en: In this recipe, we'll see how to use factories to easily replicate instances.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到如何使用工厂轻松复制实例。
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方假设你已经有一个工作区，允许你在浏览器中创建和运行ES模块。如果你没有，请参阅前两章。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，导航到你的工作区。
- en: Create a new folder named `09-03-replicating-instances-with-factories`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`09-03-replicating-instances-with-factories`的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个`index.html`，它加载并运行来自`main.js`的`main`函数。
- en: 'Create a `main.js` file that defines a new `class` named `Mission`. Add a constructor
    that takes a `name` constructor argument and assigns it to an instance property.
    Also, define a simple `describe` method:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.js`的文件，定义一个名为`Mission`的新`class`。添加一个构造函数，它接受一个`name`构造函数参数并将其分配给实例属性。同时，定义一个简单的`describe`方法：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create three classes named`Destination`, `Payload`, and `Rocket`, that take
    `name` as a constructor argument and assign it to an instance property:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建三个名为`Destination`、`Payload`和`Rocket`的`class`，它们接受`name`作为构造函数参数并将其分配给实例属性：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a `MarsMissionFactory` object with a single `create` method that takes
    two arguments: `name` and `rocket`. This method should create a new `Mission`
    using those arguments:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有单个`create`方法的`MarsMissionFactory`对象，该方法接受两个参数：`name`和`rocket`。此方法应使用这些参数创建一个新的`Mission`：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a `main` method that creates and describes two similar missions:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main`方法，创建并描述两个相似的使命：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的Python网络服务器，并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'Your output should appear as follows:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的输出应该如下所示：
- en: '![](img/8128d8d6-c25a-45fc-993a-296ce42bda19.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8128d8d6-c25a-45fc-993a-296ce42bda19.png)'
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `create` method takes a subset of the properties needed to create a new
    mission. The remaining values are provided by the method itself. This allows factories
    to simplify the process of creating similar instances. In the `main` function,
    you can see that two Mars missions have been created, only differing in name and
    `Rocket` instance. We've halved the number of values needed to create an instance.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`create`方法接受创建新使命所需属性的一个子集。其余值由该方法本身提供。这使得工厂可以简化创建类似实例的过程。在`main`函数中，你可以看到创建了两个火星使命，它们只在名称和`Rocket`实例上有所不同。我们已经将创建实例所需值的数量减半。'
- en: This pattern can help reduce instantiation logic. In this recipe, we simplified
    the creation of different kinds of missions by identifying the common attributes,
    encapsulating those in the body of the factory function, and using arguments to
    supply the remaining properties. In this way, commonly used instance shapes can
    be created without additional boilerplate code.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式可以帮助减少实例化逻辑。在这个配方中，我们通过识别共同属性，将这些属性封装在工厂函数体中，并使用参数提供剩余的属性，简化了不同类型使命的创建。这样，可以创建常用的实例形状，而无需额外的样板代码。
- en: Processing a structure with the visitor pattern
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用访问者模式处理结构
- en: The patterns we've seen thus far organize the construction of objects and the
    execution of operations. The next pattern we'll look at is specially made to traverse
    and perform operations on hierarchical structures.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止我们所看到的模式组织了对象的构建和操作的执行。接下来我们将要查看的模式是专门用来遍历和执行层次结构上的操作的。
- en: In this recipe, we'll be looking at the visitor pattern.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将查看访问者模式。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱假设你已经有了一个允许你在浏览器中创建和运行 ES 模块的工作区。如果没有，请参阅前两章。
- en: Additionally, this recipe assumes that you've completed the previous recipe, *Assembling
    customized instances with builders*. If not, complete that recipe first.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这个菜谱假设你已经完成了之前的菜谱，*使用构建器组装自定义实例*。如果没有，请先完成那个菜谱。
- en: How to do it...
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，导航到你的工作区。
- en: Copy the `09-02-assembling-instances-with-builders` folder to a new `09-04-processing-a-structure-with-the-visitor-pattern `directory.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `09-02-assembling-instances-with-builders` 文件夹复制到新的 `09-04-processing-a-structure-with-the-visitor-pattern`
    目录。
- en: 'Add a class named `MissionInspector` to `main.js`. Create a `visitor` method
    that calls a corresponding method for each of the following types: `Mission`,
    `Destination`, `Rocket`, and `Payload`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将名为 `MissionInspector` 的类添加到 `main.js` 中。创建一个 `visitor` 方法，该方法为以下类型调用相应的方法：`Mission`、`Destination`、`Rocket`
    和 `Payload`：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a `visitMission` method that logs out an `ok` message:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `visitMission` 方法，输出一个 `ok` 消息：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a `visitDestination` method that throws an error if the destination
    is not in an approved list:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `visitDestination` 方法，如果目的地不在批准的列表中则抛出错误：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a `visitPayload` method that throws an error if the `payload` isn''t
    valid:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `visitPayload` 方法，如果 `payload` 无效则抛出错误：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a `visitRocket` method that logs out an `ok` message:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `visitRocket` 方法，输出一个 `ok` 消息：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add an `accept` method to the `Mission` class that calls `accept` on its constituents,
    then tells `visitor` to visit the current instance:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Mission` 类中添加一个 `accept` 方法，先对其组成部分调用 `accept`，然后告诉 `visitor` 访问当前实例：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add an `accept` method to the `Destination` class that tells `visitor` to visit
    the current instance:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Destination` 类中添加一个 `accept` 方法，告诉 `visitor` 访问当前实例：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add an `accept` method to the `Payload` class that tells `visitor` to visit
    the current instance:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Payload` 类中添加一个 `accept` 方法，告诉 `visitor` 访问当前实例：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add an `accept` method to the `Rocket` class that tells `visitor` to visit
    the current instance:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Rocket` 类中添加一个 `accept` 方法，告诉 `visitor` 访问当前实例：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a `main` function that creates different instances with the builder,
    visits them with the `MissionInspector` instance, and logs out any thrown errors:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数，使用构建器创建不同的实例，使用 `MissionInspector` 实例访问它们，并记录任何抛出的错误：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的 Python 网络服务器，并在你的浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'Your output should appear as follows:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的输出应该如下所示：
- en: '![](img/53fd4e1c-d6ce-416c-a89c-d64a7c6dd8db.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53fd4e1c-d6ce-416c-a89c-d64a7c6dd8db.png)'
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The visitor pattern has two components. The visitor processes the subject objects
    and the subjects tell other related subjects about the visitor, and when the current
    subject should be visited.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 访问者模式有两个组件。访问者处理主题对象，而主题告诉其他相关主题关于访问者的信息，以及当前主题何时应该被访问。
- en: The `accept` method is required for each subject to receive a notification that
    there is a visitor. That method then makes two types of method call. The first
    is the `accept` method on its related subjects. The second is the `visitor` method
    on the visitor. In this way, the visitor traverses a structure by being passed
    around by the subjects.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个主题，`accept` 方法是必需的，以便接收有访问者存在的通知。然后该方法执行两种类型的方法调用。第一种是其相关主题上的 `accept` 方法。第二种是访问者上的
    `visitor` 方法。通过这种方式，访问者通过主题之间的传递来遍历结构。
- en: The `visitor` methods are used to process different types of node. In some languages,
    this is handled by language-level **polymorphism**. In JavaScript, we can use
    run-time type checks to do this.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`visitor` 方法用于处理不同类型的节点。在某些语言中，这由语言级别的**多态性**处理。在 JavaScript 中，我们可以使用运行时类型检查来完成此操作。'
- en: The visitor pattern is a good option for processing hierarchical structures
    of objects, where the structure is not known ahead of time, but the types of subjects
    are known.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 访问者模式是处理对象分层结构的好选择，其中结构在事先未知，但已知主题的类型。
- en: Using a singleton to manage instances
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用单例来管理实例
- en: Sometimes, there are objects that are resource intensive. They may require time,
    memory, battery power, or network usage that are unavailable or inconvenient.
    It is often useful to manage the creation and sharing of instances.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，存在一些资源密集型的对象。它们可能需要时间、内存、电池功率或网络使用，而这些资源可能不可用或不方便。管理实例的创建和共享通常很有用。
- en: In this recipe, we'll see how to use singletons to manage instances.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何使用单例来管理实例。
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱假设您已经有一个工作空间，允许您在浏览器中创建和运行ES模块。如果您没有，请参阅前两章。
- en: How to do it...
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序，导航到您的开发空间。
- en: Create a new folder named `09-05-singleton-to-manage-instances`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`09-05-singleton-to-manage-instances`的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个`index.html`文件，该文件从`main.js`加载并运行`main`函数。
- en: 'Create a `main.js` file that defines a new `class` named `Rocket`**.** Add
    a constructor takes a `name` constructor argument and assigns it to an instance
    property:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Rocket`的新`class`，**构造函数**接受一个`name`构造参数并将其分配给实例属性：
- en: '[PRE26]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a `RocketManager` object that has a `rockets` property. Add a `findOrCreate`
    method that indexes `Rocket` instances by the `name` property:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有`rockets`属性的`RocketManager`对象。添加一个`findOrCreate`方法，通过`name`属性索引`Rocket`实例：
- en: '[PRE27]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a `main` function that creates instances with and without the manager.
    Compare the instances and see whether they are identical:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main`函数，该函数使用和没有使用管理器来创建实例。比较这些实例，看看它们是否相同：
- en: '[PRE28]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的Python网络服务器，并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`。'
- en: 'Your output should appear as follows:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的输出应如下所示：
- en: '![](img/03775438-0d01-404c-86c0-7af5f2b0731c.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/03775438-0d01-404c-86c0-7af5f2b0731c.png)'
- en: How it works...
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The object stores references to the instances, indexed by the string value given
    with `name`. This map is created when the module loads, so it is persisted through
    the life of the program. The singleton is then able to look up the object and
    returns instances created by `findOrCreate` with the same name.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 该对象存储了对实例的引用，通过`name`提供的字符串值进行索引。此映射在模块加载时创建，因此它贯穿整个程序的生命周期。然后单例能够查找对象，并返回与`findOrCreate`具有相同名称的实例。
- en: Conserving resources and simplifying communication are primary motivations for
    using singletons. Creating a single object for multiple uses is more efficient
    in terms of space and time needed than creating several. Plus, having single instances
    for messages to be communicated through makes communication between different
    parts of a program easier.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 节约资源和简化通信是使用单例的主要动机。为多个用途创建单个对象，在空间和时间需求方面比创建多个对象更有效。此外，为消息的传递拥有单个实例，使得程序不同部分之间的通信更容易。
- en: Singletons may require more sophisticated indexing if they are relying on more
    complicated data.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单例依赖于更复杂的数据，可能需要更复杂的索引。
- en: Modifying an existing design pattern to fit different use cases
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改现有设计模式以适应不同的用例
- en: Patterns are not commandments received from a higher plane. They have their
    origins in, and have been refined from, real-world engineering projects. Patterns
    can be modified to fit new situations better.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 模式并非来自更高层面的命令，它们的起源在于，并且是从现实世界的工程项目中提炼出来的。模式可以根据新的情况更好地进行修改。
- en: In this recipe, we'll see how to modify the factory pattern to make creating
    missions easier.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何修改工厂模式以简化创建任务。
- en: Getting ready
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱假设您已经有一个工作空间，允许您在浏览器中创建和运行ES模块。如果您没有，请参阅前两章。
- en: How to do it...
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序，导航到您的开发空间。
- en: Create a new folder named `09-06-modifying-existing-design-pattern-to-fit-differet-use-cases`.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `09-06-modifying-existing-design-pattern-to-fit-differet-use-cases` 的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个 `index.html` 文件，该文件加载并运行来自 `main.js` 的 `main` 函数。
- en: 'Create a `main.js` file that defines a new `class` named `Mission`. Add a constructor
    that takes a `name` constructor argument and assigns it to an instance property.
    Also, define a simple `print` method:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，该文件定义了一个名为 `Mission` 的新 `class`。添加一个构造函数，它接受一个名为 `name` 的构造函数参数并将其分配给实例属性。此外，定义一个简单的
    `print` 方法：
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a class named `Destination`. Add a constructor takes a name constructor
    takes a `name` constructor argument and assigns it to an instance property:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Destination` 的类。添加一个构造函数，它接受一个名为 `name` 的构造函数参数并将其分配给实例属性：
- en: '[PRE30]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create a class named `Payload`. Add a constructor that takes a `name` constructor
    argument and assigns it to an instance property:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Payload` 的类。添加一个构造函数，它接受一个名为 `name` 的构造函数参数并将其分配给实例属性：
- en: '[PRE31]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a class named `Rocket`. Add a constructor that takes a `name` constructor
    argument and assigns it to an instance property:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Rocket` 的类。添加一个构造函数，它接受一个 `name` 构造函数参数并将其分配给实例属性：
- en: '[PRE32]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a function named `MissionProgramFactoryFn` that takes `rocketName`,
    `destinationName`, and `payloadName` arguments. This function should return a
    function that receives a `name` argument and returns a new `mission` with all
    of the properties:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `MissionProgramFactoryFn` 的函数，它接受 `rocketName`、`destinationName` 和 `payloadName`
    参数。这个函数应该返回一个函数，该函数接收一个 `name` 参数并返回一个新的 `mission`，包含所有以下属性：
- en: '[PRE33]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create a `main` function that creates two program factories. Create and describe
    multiple missions with the instances:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main` 的函数，该函数创建两个程序工厂。使用实例创建并描述多个任务：
- en: '[PRE34]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的 Python 网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: Your output should appear as follows:![](img/db6a42fd-fa3c-4b08-b667-b72a942fd2b9.png)
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的输出应如下所示：![](img/db6a42fd-fa3c-4b08-b667-b72a942fd2b9.png)
- en: How it works...
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the preceding example, we modified the factory pattern to be a bit more flexible.
    Rather than calling the factory function directly, we created new ones with the
    `MissionProgramFactoryFn` function. In effect, we created a factory of factories!
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们修改了工厂模式以使其更加灵活。而不是直接调用工厂函数，我们使用 `MissionProgramFactoryFn` 函数创建了新的工厂。实际上，我们创建了一个工厂的工厂！
- en: Variables within a JavaScript function are available to any blocks contained
    by that function. Thus, the `rocketName`, `destinationName`, and `payloadName`
    values are available to the body of the factory functions returned from `MissionProgramFactoryFn`. 
    This way, we reuse common values for new instances without repeating them.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 函数内的变量对该函数包含的任何块都可用。因此，`rocketName`、`destinationName` 和 `payloadName`
    的值可用于从 `MissionProgramFactoryFn` 返回的工厂函数的主体。这样，我们可以在不重复的情况下重用新实例的常见值。
- en: Returning a function from a function is called a second-order function; this
    pattern is common in JavaScript.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个函数中返回一个函数称为二阶函数；这种模式在 JavaScript 中很常见。
- en: Combining existing design patterns to fit different use cases
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将现有设计模式组合以适应不同的用例
- en: Modifying and extending patterns doesn't mean that we must forge ahead into
    *terra incognita*. It is still advisable to use well-known patterns when tackling
    new problems.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 修改和扩展模式并不意味着我们必须进入未知的领域。在解决新问题时，仍然建议使用已知模式。
- en: In this recipe, we'll see how to combine two patterns to better fit a given
    use case.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何结合两种模式以更好地适应给定的用例。
- en: Getting ready
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱假设你已经有一个工作区，它允许你在浏览器中创建和运行 ES 模块。如果你没有，请参阅前两章。
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序并导航到你的工作区。
- en: Create a new folder named `09-07-combine-design-patters-to-fit-new-use-case`.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `09-07-combine-design-patters-to-fit-new-use-case` 的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个 `index.html` 文件，该文件加载并运行来自 `main.js` 的 `main` 函数。
- en: 'Create a `main.js` file that defines a new `class` named `Mission`. Create
    a constructor that assigns a `name` argument to an instance variable. Add a simple
    `print` function:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，该文件定义了一个名为 `Mission` 的新 `class`。创建一个将 `name` 参数分配给实例变量的构造函数。添加一个简单的
    `print` 函数：
- en: '[PRE35]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a class named `Destination`. Create a constructor that assigns a `name` argument
    to an instance variable:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Destination`的类。创建一个构造函数，将`name`参数分配给实例变量：
- en: '[PRE36]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Create a class named `Payload`. Create a constructor that assigns a `name` argument
    to an instance variable:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Payload`的类。创建一个构造函数，将`name`参数分配给实例变量：
- en: '[PRE37]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create a class named `Rocket`. Create a constructor that assigns a `name` argument
    to an instance variable:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Rocket`的类。创建一个构造函数，将`name`参数分配给实例变量：
- en: '[PRE38]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Create a `MissionBuilder` class that defines setters for the mission''s `name`,
    `payload`, and `rocket`properties:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`MissionBuilder`类，该类定义了任务`name`、`payload`和`rocket`属性的设置器：
- en: '[PRE39]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add a `build` function that assembles all of these properties:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`build`函数，组装所有这些属性：
- en: '[PRE40]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create a `MarsMissionFactory` object that takes `name` and `rocket` arguments,
    and uses `MissionBuilder` to assemble a new mission:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`MarsMissionFactory`对象，该对象接受`name`和`rocket`参数，并使用`MissionBuilder`来组装一个新的任务：
- en: '[PRE41]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create a `main` function that creates and describes a few instances of Mars
    missions:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main`函数，创建并描述几个火星任务的实例：
- en: '[PRE42]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的Python网络服务器，并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: Your output should appear as follows:![](img/f672f48e-2e12-4880-a393-09b6c0b82330.png)
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的输出应如下所示：![](img/f672f48e-2e12-4880-a393-09b6c0b82330.png)
- en: How it works...
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`MarsMissionFactory` receives the values for the `name` and `rocket` properties
    of `mission`, then supplies the remaining values to a builder instance. This narrows
    the properties required to make a new `mission`, while still using the builder
    interface.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`MarsMissionFactory`接收`mission`的`name`和`rocket`属性的值，然后将剩余的值提供给一个构建器实例。这缩小了创建新`mission`所需属性的范围，同时仍然使用构建器接口。'
- en: This method of combining rather than modifying patterns is preferable in many
    use cases. Like more established library code, better-known patterns have better-defined
    contracts and more predictable behavior than custom ones. Their familiarity makes
    them easier for a newcomer to understand.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这种组合模式而不是修改模式的方法在许多用例中更可取。与更成熟的库代码一样，更知名的模式比自定义模式有更好的定义的契约和更可预测的行为。它们的熟悉性使得新来者更容易理解。
