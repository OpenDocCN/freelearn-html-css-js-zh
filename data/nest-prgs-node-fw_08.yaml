- en: Chapter 8\. Web sockets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。Web套接字
- en: As you have seen, Nest.js provides a way to use web sockets into your app through
    the `@nestjs/websockets` package. Also, inside the framework the usage of the
    `Adapter` allows you to implement the socket library that you want. By default,
    Nest.js comes with it’s own adapter, which allows you to use `socket.io`, a well
    known library for web sockets.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，Nest.js通过`@nestjs/websockets`包提供了一种在应用程序中使用Web套接字的方法。此外，在框架内使用`Adapter`允许您实现所需的套接字库。默认情况下，Nest.js自带适配器，允许您使用`socket.io`，这是一个众所周知的Web套接字库。
- en: You have the possibility to create a full web socket app, but also, add some
    web socket features inside your Rest API. In this chapter, we will see how to
    implement the web socket over a Rest API using the decorators provided by Nest.js,
    but also how to validate an authenticated user using specific middleware.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个完整的Web套接字应用程序，还可以在您的Rest API中添加一些Web套接字功能。在本章中，我们将看到如何使用Nest.js提供的装饰器实现在Rest
    API上使用Web套接字，以及如何使用特定中间件验证经过身份验证的用户。
- en: The advantage of the web socket is to be able to have some real-time features
    in an application depending on your needs. For this chapter you can have a look
    at the `/src/gateways` files from the repository, but also `/src/shared/adapters`
    and `/src/middlewares`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Web套接字的优势在于能够根据您的需求在应用程序中具有一些实时功能。对于本章，您可以查看存储库中的`/src/gateways`文件，还有`/src/shared/adapters`和`/src/middlewares`。
- en: 'Imagine the following `CommentGatewayModule`, which looks like this:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下以下`CommentGatewayModule`，它看起来像这样：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Import the `UserModule` in order to have access to the `UserService`, which
    will be useful later, as well as the `CommentModule`. Of course, we will create
    the `CommentGateway`, which is used as an injectable service.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`UserModule`以便访问`UserService`，这将在以后很有用，以及`CommentModule`。当然，我们将创建`CommentGateway`，它将用作可注入服务。
- en: WebSocketGateway
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSocketGateway
- en: To implement your first module using the Nest.js web socket, you will have to
    use the `@WebSocketGateway` decorator. This decorator can take an argument as
    an object to provide a way to configure how to use the adapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Nest.js Web套接字实现您的第一个模块，您必须使用`@WebSocketGateway`装饰器。此装饰器可以接受一个对象作为参数，以提供配置如何使用适配器的方法。
- en: 'The implementation of the arguments respect the interface `GatewayMetadata`,
    allowing you to provide:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的实现遵守`GatewayMetadata`接口，允许您提供：
- en: '`port`, which must be use by the adapter'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`，适配器必须使用的端口'
- en: '`namespace`, which belongs to the handlers'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`namespace`，属于处理程序'
- en: '`middlewares` that have to be applied on the gateway before accessing the handlers'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在访问处理程序之前必须应用的`middlewares`
- en: All the parameters are optional.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所有参数都是可选的。
- en: 'To use it, you have to create you first gateway class, so imagine a `UserGateway`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用它，您必须创建您的第一个网关类，因此想象一个`UserGateway`：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By default, without any parameters, the socket will use the same port as your
    express server (generally `3000`). As you can see, in the previous example we
    used a `@WebSocketGateway`, which uses the default port `3000` without namespace
    and with one middleware that we will see later.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，没有任何参数，套接字将使用与您的express服务器相同的端口（通常为`3000`）。正如您所见，在前面的示例中，我们使用了`@WebSocketGateway`，它使用默认端口`3000`，没有命名空间，并且有一个稍后将看到的中间件。
- en: Gateways
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网关
- en: The gateways in the class using the decorator previously seen contain all of
    the handlers that you need to provide the results of an event.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前看到的装饰器中使用的类中的网关包含您需要提供事件结果的所有处理程序。
- en: Nest.js comes with a decorator that allows you to access the server instance
    `@WebSocketServer`. You have to use it on a property of your class.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js带有一个装饰器，允许您访问服务器实例`@WebSocketServer`。您必须在类的属性上使用它。
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Also, throughout the gateway, you have access to the injection of injectable
    services. So, in order to have access of the comment data, inject the `CommentService`
    exported by the `CommentModule`, which has been injected into this module.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在整个网关中，您可以访问可注入服务。因此，为了访问评论数据，注入由`CommentModule`导出的`CommentService`，该服务已被注入到此模块中。
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The comment service allows you to return the appropriate result for the next
    handlers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 评论服务允许您为下一个处理程序返回适当的结果。
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We now have two handlers, the `indexComment` and the `showComment`. To use the
    `indexComment` handler we expect an `entryId` in order to provide the appropriate
    comment, and for the `showComment` we expect an `entryId`, and of course a `commentId`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有两个处理程序，`indexComment`和`showComment`。要使用`indexComment`处理程序，我们期望有一个`entryId`以提供适当的评论，而对于`showComment`，我们期望有一个`entryId`，当然还有一个`commentId`。
- en: As you have seen, to create the event handler use the `@SubscribeMessage` decorator
    provide by the framework. This decorator will create the `socket.on(event)` with
    the event corresponding to the string passed as a parameter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，要创建事件处理程序，请使用框架提供的`@SubscribeMessage`装饰器。此装饰器将使用传递的字符串作为参数创建`socket.on(event)`，其中事件对应于事件。
- en: Authentication
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证
- en: We have set up our `CommentModule`, and now we want to authenticate the user
    using the token (have a look to the Authentication chapter). In this example we
    use a mutualised server for the REST API and the Websocket event handlers. So,
    we will mutualise the authentication token in order to see how to validate the
    token received after a user has been logged into the application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置了我们的`CommentModule`，现在我们想使用令牌对用户进行身份验证（请查看认证章节）。在此示例中，我们使用一个共享服务器用于REST
    API和Web套接字事件处理程序。因此，我们将共享身份验证令牌，以查看如何验证用户登录应用程序后收到的令牌。
- en: It is important to secure the websocket in order to avoid the access of data
    without logging into the application.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要保护Web套接字，以避免在未登录应用程序的情况下访问数据。
- en: As shown in the previous part, we have used middleware named `AuthenticationGatewayMiddleware`.
    The purpose of this middleware is to get the token from the web socket `query`,
    which is brought with the `auth_token` property.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一部分所示，我们使用了名为`AuthenticationGatewayMiddleware`的中间件。此中间件的目的是从Web套接字`query`中获取令牌，该令牌带有`auth_token`属性。
- en: If the token is not provided, the middleware will return a `WsException`, otherwise
    we will use the `jsonwebtoken` library (have a look to the Authentication chapter)
    to verify the token.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未提供令牌，中间件将返回`WsException`，否则我们将使用`jsonwebtoken`库（请查看身份验证章节）来验证令牌。
- en: 'Let’s set up the middleware:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置中间件：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The middleware used for the web socket is almost the same as the REST API. Implementing
    the `GatewayMiddleware` interface with the `resolve` function is now nearly the
    same. The difference is that you have to return a function, which takes `socket`
    and the `next` function as its parameters. The socket contains the `handshake`
    with the `query` sent by the client, and all of the parameters provided, in our
    case, the `auth_token`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 用于Web套接字的中间件与REST API几乎相同。现在实现`GatewayMiddleware`接口与`resolve`函数几乎相同。不同之处在于，您必须返回一个函数，该函数以`socket`和`next`函数作为其参数。套接字包含客户端发送的`query`的`handshake`和所有提供的参数，我们的情况下是`auth_token`。
- en: Similar to the classic authentication middleware (have a look to the Authentication
    chapter), the socket will try to find the user with the given payload, which here
    contains the email, and then register the user into the handshake in order to
    be accessible into the gateway handler. This is a flexible way to already have
    the user in hand without finding it again in the database.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与经典的身份验证中间件类似（请查看身份验证章节），套接字将尝试使用给定的有效负载查找用户，其中包含电子邮件，然后在握手中注册用户，以便在网关处理程序中访问。这是一种灵活的方式，可以在不再在数据库中查找的情况下已经拥有用户。
- en: Adapter
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适配器
- en: As mentioned in the beginning of this chapter, Nest.js comes with it own adapter,
    which uses `socket.io`. But the framework needs to be flexible and it can be used
    with any third party library. In order to provide a way to implement another library,
    you have the possibility to create your own adapter.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章开头所提到的，Nest.js自带了自己的适配器，使用`socket.io`。但是框架需要灵活，可以与任何第三方库一起使用。为了提供实现另一个库的方法，您可以创建自己的适配器。
- en: 'The adapter has to implement the `WebSocketAdapter` interface in order to implement
    the following methods. For example, we will use `ws` as a socket library in our
    new adapter. To use it, we will have to inject the `app` into the constructor
    as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 适配器必须实现`WebSocketAdapter`接口，以实现以下方法。例如，我们将在新的适配器中使用`ws`作为套接字库。为了使用它，我们将不得不将`app`注入到构造函数中，如下所示：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: By doing this, we can get the `httpServer` in order to use it with the `ws`.
    After that, we have to implement the `create` method in order to create the socket
    server.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们可以获取`httpServer`以便与`ws`一起使用。之后，我们必须实现`create`方法以创建套接字服务器。
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, we have implemented the `verifyClient` property, which takes
    a method with `{ origin, secure, req }` and `next` values. We will use the `req`,
    which is the `IncomingMessage` from the client and the `next` method in order
    to continue the process. We use the `WsAuthenticationGatewayMiddleware` to authenticate
    the client with the token, and to inject the appropriate dependencies we select
    the right module and the right service.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们实现了`verifyClient`属性，该属性接受一个带有`{ origin, secure, req }`和`next`值的方法。我们将使用`req`，即来自客户端的`IncomingMessage`和`next`方法，以便继续该过程。我们使用`WsAuthenticationGatewayMiddleware`来验证客户端的令牌，并注入适当的依赖项，选择正确的模块和正确的服务。
- en: 'The middleware in this case processes the authentication:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，中间件处理身份验证：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this middleware, we have to manually parse the URL to get the token and verify
    it with `jsonwebtoken`. After that, we have to implement the `bindClientConnect`
    method to bind the connection event to a callback that will be used by Nest.js.
    It is a simple method, which takes in arguments to the server with a callback
    method.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个中间件中，我们必须手动解析URL以获取令牌，并使用`jsonwebtoken`进行验证。之后，我们必须实现`bindClientConnect`方法，将连接事件绑定到Nest.js将使用的回调方法。这是一个简单的方法，它接受服务器的参数和回调方法。
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To finish our new custom adapter, implement the `bindMessageHandlers` in order
    to redirect the event and the data to the appropriate handler of your gateway.
    This method will use the `bindMessageHandler` in order to execute the handler
    and return the result to the `bindMessageHandlers` method, which will return the
    result to the client.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成我们的新自定义适配器，实现`bindMessageHandlers`以将事件和数据重定向到网关的适当处理程序。该方法将使用`bindMessageHandler`来执行处理程序并将结果返回给`bindMessageHandlers`方法，后者将结果返回给客户端。
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we have created our first custom adapter. In order to to use it, instead
    of the Nest.js `IoAdapter`, we have to call the `useWebSocketAdapter` provided
    by the `app: INestApplication` in your `main.ts` file as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，我们已经创建了我们的第一个自定义适配器。为了使用它，我们必须在`main.ts`文件中调用`app: INestApplication`提供的`useWebSocketAdapter`，而不是Nest.js的`IoAdapter`，如下所示：'
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We pass in the adapter, the `app` instance, to be used as we have seen in the
    previous examples.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将适配器传递给`app`实例，以便像前面的示例中所示使用它。
- en: Client side
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端
- en: In the previous section, we covered how to set up the web socket on the server
    side and how to handle the event from the client side.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们介绍了如何在服务器端设置Web套接字以及如何处理来自客户端的事件。
- en: Now we will see how to set up your client side, in order to use the Nest.js
    `IoAdapter` or our custom `WsAdapter`. In order to use the `IoAdapter`, we have
    to get the `socket.io-client` library and set up our first HTML file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到如何设置客户端，以便使用Nest.js的`IoAdapter`或我们自定义的`WsAdapter`。为了使用`IoAdapter`，我们必须获取`socket.io-client`库并设置我们的第一个HTML文件。
- en: The file will define a simple script to connect the socket to the server with
    the token of the logged in user. This token we will be used to determine if the
    user is well connected or not.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件将定义一个简单的脚本，将套接字连接到具有已登录用户令牌的服务器。这个令牌将用于确定用户是否连接良好。
- en: 'Check out the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 检查以下代码：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you see, we pass at the socket connection a token `auth_token` into the query
    parameter. We can pick it from the socket handshake and then validate the socket.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们在套接字连接中传递了一个名为`auth_token`的令牌到查询参数中。我们可以从套接字握手中获取它，然后验证套接字。
- en: 'To emit an event, which is also easy, see the following example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 发出事件也很容易，参见以下示例：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In this example, we are waiting for the `connect` event to be aware when the
    connection is finished. Then we send three events: one to get the user, then an
    entry, and the comment of the entry.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在等待`connect`事件，以便在连接完成时得知。然后我们发送三个事件：一个是获取用户，然后是一个条目，以及条目的评论。
- en: Using the following on event, we are able to get the data sent by the server
    as a response to our previously emitted events.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下`on`事件，我们能够获取服务器作为响应我们之前发出的事件而发送的数据。
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here we show in the console all of the data responded by the server, and we
    have also implemented an event `exception` in order to catch all exceptions that
    the server can return.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在控制台中显示服务器响应的所有数据，并且我们还实现了一个名为`exception`的事件，以便捕获服务器可能返回的所有异常。
- en: Of course, as we have seen in the authentication chapter, the user can’t access
    the data from another user.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，正如我们在身份验证章节中所见，用户无法访问另一个用户的数据。
- en: 'In cases where we would like to use the custom adapter, the process is similar.
    We will open the connection to the server using the `WebSocket` as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们想要使用自定义适配器的情况下，流程是类似的。我们将使用以下方式打开到服务器的连接：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We open the connection here on the localhost with the same port as our HTTP
    server. We also pass the token as a query parameter in order to pass the `verifyClient`
    method, which we have seen with the `WsAuthenticationGatewayMiddleware`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本地主机上使用与我们的HTTP服务器相同的端口打开连接。我们还将令牌作为查询参数传递，以便通过`verifyClient`方法，这是我们在`WsAuthenticationGatewayMiddleware`中看到的。
- en: Then we will wait for the return of the server, to be sure that the connection
    is successful and usable.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将等待服务器的返回，以确保连接成功并可用。
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When the connection is usable, use the `send` method in order to send the type
    of event we want to handle, which is here with `showComment` and where we pass
    the appropriate parameters, just like we did with the socket.io usage.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当连接可用时，使用`send`方法发送我们想要处理的事件类型，这里是使用`showComment`，并传递适当的参数，就像我们在使用socket.io时所做的一样。
- en: We will use the `onmessage` in order to get the data returned by the server
    for our previous sent event. When the `WebSocket` receives an event, a `message`
    event is sent to the manager that we can catch with the following example.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`onmessage`来获取服务器为我们之前发送的事件返回的数据。当`WebSocket`接收到事件时，将发送一个`message`事件给我们可以使用以下示例捕获的管理器。
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You can now use this data as you’d like in the rest of your client app.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以根据自己的喜好在客户端应用程序的其余部分中使用这些数据。
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter you learned how to set up the server side, in order to use
    the:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何设置服务器端，以便使用：
- en: '`socket.io` library provided by the Nest.js `IoAdapter`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由Nest.js的`IoAdapter`提供的`socket.io`库
- en: '`ws` library with a custom adapter'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有自定义适配器的`ws`库
- en: You also set up a gateway in order to handle the events sent by the client side.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要设置一个网关来处理客户端发送的事件。
- en: You’ve seen how to set up the client side to use the `socket.io-client` or `WebSocket`
    client to connect the socket to the server. This was done on the same port as
    the HTTP server, and you learned how to send and catch the data returned by the
    server or the exception in case of an error.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经学会了如何设置客户端以使用`socket.io-client`或`WebSocket`客户端来连接服务器的套接字。这是在与HTTP服务器相同的端口上完成的，并且您学会了如何发送和捕获服务器返回的数据或在出现错误时捕获异常。
- en: And finally, you learned how to set up the authentication using middleware in
    order to check the socket token provided and identify if the user is authenticated
    or not to be able to access the handler in the cases of an `IoAdapter` or a custom
    adapter.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您学会了如何设置身份验证中间件，以便检查提供的套接字令牌并确定用户是否经过身份验证，以便能够在`IoAdapter`或自定义适配器的情况下访问处理程序。
- en: The next chapter will cover microservices with Nest.js.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将涵盖Nest.js的微服务。
