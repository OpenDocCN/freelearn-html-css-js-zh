- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Testing Authentication
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试认证
- en: Many web applications will involve authenticating users. This chapter shows
    how you can write tests for this functionality. These tests cover logging in,
    logging out, and ensuring that your application is only accessible to logged-in
    users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网络应用程序将涉及用户认证。本章展示了如何为这种功能编写测试。这些测试涵盖了登录、注销，并确保你的应用程序仅对已登录用户可访问。
- en: This chapter is not a walkthrough and only includes a small amount of detail
    on the application code required to implement authentication. The book repository
    uses the **Auth.js** library, but the same testing techniques will work regardless
    of the implementation approach.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章不是教程，只包含少量关于实现认证所需的应用程序代码的细节。本书仓库使用 **Auth.js** 库，但相同的测试技术无论采用何种实现方法都适用。
- en: 'The chapter covers the following key topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下关键主题：
- en: Testing authentication with Playwright
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Playwright 测试认证
- en: Testing authentication with Vitest
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Vitest 测试认证
- en: By the end of the chapter, you’ll have seen how to write tests that cover all
    aspects of authentication.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将看到如何编写涵盖所有认证方面的测试。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code for the chapter can be found online at [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter14/Complete](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter14/Complete).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在网上找到，地址为 [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter14/Complete](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter14/Complete)。
- en: If you want to run the code in this sample, you’ll need to create a `.env` file
    with some environment variables. There’s an example file named `.env.example`
    that you can copy and save as `.env`, which should work, but if you want to try
    the GitHub OAuth integration, you’ll need to do some configuration within GitHub.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想运行这个示例中的代码，你需要创建一个包含一些环境变量的 `.env` 文件。有一个名为 `.env.example` 的示例文件，你可以复制并保存为
    `.env`，这应该可以工作，但如果你想尝试 GitHub OAuth 集成，你需要在 GitHub 内进行一些配置。
- en: You’ll find more detailed information in the repository’s `README.md` file.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在仓库的 `README.md` 文件中找到更详细的信息。
- en: Testing authentication with Playwright
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Playwright 测试认证
- en: This section details the groundwork required for effective testing with your
    Playwright tests. First, we look at how to provide hard-coded authentication credentials
    for your end-to-end tests. Then we use this to verify that users can log in and
    log out of the application. Finally, we’ll update the existing tests so that they
    ensure the user is logged in before attempting to test the application functionality.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本节详细说明了使用 Playwright 测试进行有效测试所需的基础工作。首先，我们看看如何为端到端测试提供硬编码的认证凭据。然后我们使用这些凭据来验证用户能否登录和注销应用程序。最后，我们将更新现有的测试，以确保在尝试测试应用程序功能之前用户已经登录。
- en: What about Cucumber?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Cucumber 呢？
- en: If you’re using Cucumber tests with Playwright, then the same techniques presented
    here will also work for you.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 Cucumber 测试与 Playwright，那么这里展示的相同技术也适用于你。
- en: Creating an auth profile for dev and test modes
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为开发和测试模式创建一个认证配置文件
- en: It’s fairly typical to use OAuth authentication strategies that delegate authentication
    responsibilities to a third-party provider, such as Google or GitHub. However,
    when it comes to writing end-to-end tests, it’s impractical to maintain user accounts
    with these third parties just for the purposes of testing. For one thing, account
    passwords expire and need to be reset periodically. And that kind of work needs
    to be documented, tracked and scheduled.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OAuth 认证策略将认证责任委托给第三方提供者，如 Google 或 GitHub，这在很大程度上是典型的。然而，当涉及到编写端到端测试时，仅为了测试目的维护这些第三方用户账户是不切实际的。一方面，账户密码会过期并需要定期重置。这类工作需要被记录、跟踪和安排。
- en: Another solution is to provide a special hard-coded credential that can be used
    to log in when the application server is run in a specific test mode. Your Playwright
    tests can then use this credential to log in.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种解决方案是提供一个特殊的硬编码凭据，当应用程序服务器以特定测试模式运行时，可以使用该凭据登录。然后你的 Playwright 测试可以使用此凭据进行登录。
- en: 'Our solution does this in the following way:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的解决方案如下：
- en: Playwright starts the server with an additional environment variable, `VITE_ALLOW_CREDENTIALS`,
    that is set to `true`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Playwright 使用一个额外的环境变量 `VITE_ALLOW_CREDENTIALS` 启动服务器，该变量设置为 `true`。
- en: The `Auth.js` initialization code looks for this credential, and, if it is found,
    enables login via its credentials mechanism. There is a single user, `api`, which
    has no password associated with it.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Auth.js` 初始化代码寻找这个凭证，如果找到，将通过其凭证机制启用登录。有一个单一的用户 `api`，与之关联的密码为空。'
- en: This user can then be used by both the API tests and your application dev mode.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个用户可以由 API 测试和您的应用程序开发模式使用。
- en: 'To ensure Playwright starts with the right environment variable, the `playwright.config.js`
    file changes like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保 Playwright 以正确的环境变量启动，`playwright.config.js` 文件需要进行如下更改：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, the application has a file named `src/authProviders.js` that checks for
    the credential, shown in the following code snippet. This sample is specific to
    `Auth.js`, but other authentication libraries can be initialized similarly. The
    key point is that the expected `authProviders` is an array that may or may not
    contain the special credentials provider, depending on the value of the environment
    variable:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，应用程序有一个名为 `src/authProviders.js` 的文件，该文件检查凭证，如下面的代码片段所示。这个样本是针对 `Auth.js`
    的，但其他身份验证库也可以类似地初始化。关键点是预期的 `authProviders` 是一个可能包含也可能不包含特殊凭证提供程序的数组，这取决于环境变量的值：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With the application primed, it’s ready to be used in our tests.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序准备就绪后，即可在我们的测试中使用。
- en: Writing tests for login
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写登录测试
- en: It’s important to have one test for a successful login flow and one for an unsuccessful
    one. Having these tests ensures you have automated test coverage of these pages.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个成功登录流程的测试和一个失败的测试非常重要。拥有这些测试确保了您对这些页面的自动化测试覆盖率。
- en: 'Here’s an example of a successful login test. It can be found in the `tests/login.test.js`
    repository file. It navigates to the usual `/birthdays` route, then looks for
    a button named `api` user, and clicks the button again (which, this time, acts
    to submit the login information). It then checks that the user has been redirected
    to the main page and can see the **Birthday** **list** heading:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个成功登录测试的示例。它可以在 `tests/login.test.js` 仓库文件中找到。它导航到常规的 `/birthdays` 路由，然后寻找名为
    `api` 用户的按钮，并再次点击该按钮（这次，它起到提交登录信息的作用）。然后检查用户是否被重定向到主页并可以看到 **生日** **列表** 标题：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note the use of the `page.waitForLoadState` Playwright function. This is necessary
    to ensure that all the relevant `Auth.js` code has run and eventually renders
    the sign-in button.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用 `page.waitForLoadState` Playwright 函数。这是必要的，以确保所有相关的 `Auth.js` 代码都已运行，并最终渲染登录按钮。
- en: 'Next is the test for an unsuccessful login. For this, we can give any username
    other than `api`, so this test supplies the `unknown user` text, which gives the
    data some useful context:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是测试失败的登录。为此，我们可以提供除 `api` 之外任何用户名，因此这个测试提供了 `未知用户` 文本，为数据提供了一些有用的上下文：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That covers the tests for the new login functionality. Next, we need to update
    existing tests to ensure they continue to work.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了新登录功能的测试。接下来，我们需要更新现有测试以确保它们继续工作。
- en: Updating existing tests to authenticate the user
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新现有测试以验证用户身份
- en: The existing tests we have in `tests/birthdays.test.js` need to be updated so
    that each test starts with a logged-in user. We can do this using a `beforeEach`
    block, which has the advantage that the original tests doesn’t need to be modified.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `tests/birthdays.test.js` 中现有的测试需要更新，以便每个测试都以登录用户开始。我们可以使用 `beforeEach`
    块来完成此操作，它具有原始测试不需要修改的优点。
- en: Auth.js provides a neat API-like endpoint that we can call directly. This means
    that we don’t need to navigate through the web form for each test, which reduces
    the amount of work each test needs to do.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Auth.js 提供了一个整洁的 API 类型的端点，我们可以直接调用。这意味着我们不需要为每个测试导航通过网页表单，这减少了每个测试需要完成的工作量。
- en: 'The `login` function is defined in the following code snippet. It mimics the
    action of clicking the `username` field value of `api`. It’s also important to
    send the `origin` header with this request; otherwise, it will be rejected:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`login` 函数在下面的代码片段中定义。它模仿了点击 `api` 的 `username` 字段值的行为。发送此请求时，还重要地发送 `origin`
    标头；否则，它将被拒绝：'
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'That can then be triggered for each test in `tests/birthday.test.js` by sending
    it to `test.beforeEach`, like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以通过将其发送到 `test.beforeEach` 来为 `tests/birthday.test.js` 中的每个测试触发它，如下所示：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That completes the Playwright tests. You’ll note I’ve left out any test to check
    what happens when you go to the `/birthday` route in an unauthenticated state.
    We’ll cover that in the Vitest tests in the next section.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了 Playwright 测试。你会注意到我省略了任何检查当你未认证访问`/birthday`路由时会发生什么的测试。我们将在下一节的 Vitest
    测试中涵盖这一点。
- en: Testing authentication with Vitest
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Vitest 测试认证
- en: Now we drop down a level and get into specifics. Our tests will focus on the
    `/birthdays` route and how it is presented given authentication data.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们深入一层，具体来看。我们的测试将集中在`/birthdays`路由以及它如何根据认证数据呈现。
- en: The Auth.js library utilizes SvelteKit’s session mechanism for passing authentication
    information into components, so what we do is harness that via the `parent.session`
    object and the `locals.getSession` function. All we have to do is use test doubles
    to mimic the responses we want.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Auth.js库利用 SvelteKit 的会话机制将认证信息传递到组件中，所以我们通过`parent.session`对象和`locals.getSession`函数来实现这一点。我们只需要使用测试双胞胎来模拟我们想要的响应。
- en: We start by defining a session factory that can be used to set up these session
    test doubles. Then we’ll update page load tests with new authentication functionality,
    and finally, we’ll end with updating the form action tests.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义一个会话工厂，它可以用来设置这些会话测试双胞胎。然后我们将更新页面加载测试以包含新的认证功能，最后，我们将更新表单操作测试。
- en: Defining a session factory
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义会话工厂
- en: 'Here’s the definition of `src/factories/session.js`, which defines four exports
    that are used in the subsequent tests:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`src/factories/session.js`的定义，它定义了四个导出，这些导出在随后的测试中使用：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A `loggedInSession` object can be used as the `parent` property that’s passed
    to your page load. The Auth.js authentication process will run before your route
    is loaded and merged into this `parent` value. So, `loggedInSession` is just a
    dummy object: in the context of our tests, any value at all constitutes a valid,
    logged-in user.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`loggedInSession`对象作为传递给页面加载的`parent`属性。Auth.js认证过程将在你的路由加载之前运行，并将其合并到这个`parent`值中。所以，`loggedInSession`只是一个占位符对象：在我们的测试上下文中，任何值都构成一个有效的、已登录的用户。
- en: 'The `loggedOutSession` object is similar: this time, a `null` value for `session`
    means that the user is not authenticated.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`loggedOutSession`对象类似：这次，`session`的`null`值表示用户未认证。'
- en: The `loggedInLocalsSession` and `loggedOutLocalsSession` values are to be used
    in place of SvelteKit’s `locals` property that is passed to your form action.
    This property is a collection of functions that the form action can make use of.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`loggedInLocalsSession`和`loggedOutLocalsSession`值将用于替换传递给表单操作的 SvelteKit 的`locals`属性。这个属性是一组函数，表单操作可以使用这些函数。'
- en: Next, we’ll see how to make use of these tests.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到如何使用这些测试。
- en: Updating existing tests for page load functions
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新现有的页面加载函数测试
- en: Now let’s update the page load function so that it has the necessary load function.
    We’ll also write a test to ensure that the page does *not* load any data if the
    user is not authenticated.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更新页面加载函数，使其具有必要的加载函数。我们还将编写一个测试来确保如果用户未认证，页面不会加载任何数据。
- en: 'There’s a new import needed in `src/routes/birthdays/page.server.test.js`,
    shown in the following code block. These are the two factories that will be used
    to provide values for the `parent` property passed to the `load` function:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/routes/birthdays/page.server.test.js`中需要一个新的导入，如下面的代码块所示。这些是两个工厂，将用于为传递给`load`函数的`parent`属性提供值：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, the `describe` block is updated to create a `parent` variable that is
    defaulted to a logged-in user:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`describe`块被更新以创建一个默认为已登录用户的`parent`变量：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Each of the tests also needs to be updated to pass this new `parent` property
    into the `load` function:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每个测试也需要更新，以便将这个新的`parent`属性传递给`load`函数：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You’ll also want to add a test to check that the endpoint won’t work without
    the correct authentication. In the following example, we override the default
    `parent` property with `loggedOutSession` and then test that the returned page
    has a `303` status, meaning the browser is being redirected. It also checks the
    page being redirected to is the `/``login` route:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你还想要添加一个测试来检查端点在没有正确认证的情况下是否无法工作。在下面的示例中，我们用`loggedOutSession`覆盖了默认的`parent`属性，然后测试返回的页面有一个`303`状态，这意味着浏览器正在被重定向。它还检查被重定向到的页面是`/login`路由：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That completes the tests for the `load` function.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了`load`函数的测试。
- en: Updating existing tests for form actions
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新现有的表单操作测试
- en: 'For the form action tests, the `import` statement is updated with the remaining
    two factory functions:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于表单动作测试，`import` 语句被更新为剩余的两个工厂函数：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, the `describe` block is updated to include a `locals` variable that is
    set within `beforeEach`. Note that this time the variable is defined as `let`
    because the `loggedInLocalsSession` factory is responsible for setting up the
    `vi.fn` spy function:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`describe` 块被更新以包含在 `beforeEach` 中设置的 `locals` 变量。注意这次变量被定义为 `let`，因为 `loggedInLocalsSession`
    工厂负责设置 `vi.fn` 间谍函数：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then `performFormAction` changes to include the `locals` property. Since this
    is the function that our tests call to invoke the form action, none of the tests
    themselves need to change:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 `performFormAction` 被更新以包含 `locals` 属性。由于这是我们测试调用来触发表单动作的函数，因此测试本身不需要更改：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, we need a test to check what happens if the form is submitted when
    the user is not authenticated. In this case, we return a `300` status code rather
    than a redirect, but you could choose to go back to the previous form page, as
    you would with a validation error. That would help in the scenario where the user’s
    session has expired. Here’s the simpler version:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要一个测试来检查当用户未认证时提交表单会发生什么。在这种情况下，我们返回 `300` 状态码而不是重定向，但您可以选择回到上一个表单页面，就像处理验证错误时一样。这有助于用户会话已过期的场景。以下是更简单的版本：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: That completes the Vitest changes required to support our authentication implementation.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了支持我们的认证实现所需的 Vitest 变更。
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter briefly looked at the kinds of tests you’ll need for testing authentication.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要介绍了测试认证所需的测试类型。
- en: Playwright end-to-end tests should check the login flows, both successful and
    unsuccessful. They should also make use of fake credentials where possible and
    ensure that any routes are accessible only by authenticated users who are logged
    in using a `test.beforeEach` call.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Playwright 端到端测试应检查登录流程，无论是成功还是失败。它们还应尽可能使用假凭据，并确保任何路由都只能由使用 `test.beforeEach`
    调登录的认证用户访问。
- en: 'Vitest tests for authenticated routes work differently. They focus on the `session`
    object that SvelteKit returns: does it have a valid value or not?'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Vitest 对认证路由的测试工作方式不同。它们关注 SvelteKit 返回的 `session` 对象：它是否有有效的值？
- en: 'While this covers the basics, most applications will have much more complex
    needs: for example, your application might have individual data stores for each
    user, not just one global data store such as our Birthdays application.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这涵盖了基础知识，但大多数应用程序将具有更复杂的需求：例如，您的应用程序可能为每个用户都有单独的数据存储，而不仅仅是我们的生日应用程序中的一个全局数据存储。
- en: The Playwright website contains good documentation on how to test specific patterns,
    such as having multiple user roles interact within one test. That can be found
    at [https://playwright.dev/docs/auth](https://playwright.dev/docs/auth).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Playwright 网站上有关于如何测试特定模式的好文档，例如在单个测试中让多个用户角色交互。可以在 [https://playwright.dev/docs/auth](https://playwright.dev/docs/auth)
    找到。
- en: In the next chapter, we’ll look at testing Svelte Stores.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨测试 Svelte 存储。
