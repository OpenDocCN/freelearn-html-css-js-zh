- en: Chapter 2. Architecting the Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。设计项目
- en: 'Software development is a complex process. We can''t just start writing some
    code and expect that we will reach our goal. We need to plan and define the base
    of our application. In other words, before you dive into actual scripting, you
    have to architect the project. In this chapter, we will cover the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发是一个复杂的过程。我们不能只是开始编写一些代码，然后期望能够达到我们的目标。我们需要计划和定义我们应用程序的基础。换句话说，在你开始实际编写脚本之前，你必须设计项目结构。在本章中，我们将涵盖以下内容：
- en: The basic layers of a Node.js application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js应用程序的基本层
- en: Using the task runner and building system
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用任务运行器和构建系统
- en: Test-driven development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: The Model-View-Controller pattern
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型-视图-控制器模式
- en: The REST API concept
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST API概念
- en: Introducing the basic layers of the application
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍应用程序的基本层
- en: If we plan to build a house, we will probably want to start with a very good
    base. We simply can't build the first and second floor if the base of the building
    is not solid.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们计划建造一座房子，我们可能会想要从一个非常好的基础开始。如果建筑的基础不牢固，我们就不能建造第一层和第二层。
- en: However, with software, it is a bit different. We can start developing code
    without the existence of a good base. We call this **brute-force-driven development**.
    In this, we produce feature after feature without actually caring about the quality
    of our code. The result may work in the beginning, but in the long term, it consumes
    more time and probably money. It's well-known that software is nothing but building
    blocks placed on top of one another. If the lower layers of our program are poorly
    designed, then the whole solution will suffer because of this.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于软件来说，情况有些不同。我们可以在没有良好基础的情况下开始开发代码。我们称之为**蛮力驱动开发**。在这种情况下，我们会一次又一次地生产功能，而实际上并不关心我们代码的质量。结果可能在开始时有效，但从长远来看，它会消耗更多的时间，可能还有金钱。众所周知，软件只是放置在彼此之上的构建块。如果我们程序的下层设计不好，那么整个解决方案都会因此而受到影响。
- en: 'Let''s think about our project—the social network that we want to build with
    Node.js. We start with a simple code like this one:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一下我们的项目——我们想用Node.js构建的社交网络。我们从一个简单的代码开始，就像这样：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The very first thing that you may notice is that you served a text to the user,
    but you probably wanted to serve file content. Node.js is similar to PHP. However,
    there is one fundamental difference. PHP needs a server that accepts the requests
    and passes them to the PHP interpreter. Then, the PHP code is processed and the
    response is delivered to the user again by the server. In the Node.js world, we
    don't have a separate external server. Node.js itself plays that role. It is up
    to the developer to handle the incoming requests and decide what to do with them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到的第一件事是，你向用户提供了文本，但你可能想要提供文件内容。Node.js类似于PHP。然而，有一个根本的区别。PHP需要一个接受请求并将其传递给PHP解释器的服务器。然后，PHP代码被处理，响应再次由服务器传递给用户。在Node.js世界中，我们没有一个单独的外部服务器。Node.js本身扮演着这个角色。开发人员需要处理传入的请求，并决定如何处理它们。
- en: 'If we take the preceding code and assume that we have `page.html` containing
    our basic HTML layout and the `styles.css` file holding the CSS styles, our next
    step will be as follows (check out the `planning` folder in the book''s code samples):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们拿上面的代码并假设我们有一个包含基本HTML布局的`page.html`和一个包含CSS样式的`styles.css`文件，我们的下一步将是这样的（查看书中代码示例的`planning`文件夹）：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We will check the incoming request's URL. If we just open `http://127.0.0.1:1337/`,
    we will receive the code of `page.html` as a response. If we have a `<link>` tag
    in the `page.html` file that requests `style.css`, the browser will fire a request
    for that too. The URL is different, but it is again caught by the `if` clause
    and then the proper content is served.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将检查传入请求的URL。如果我们只是打开`http://127.0.0.1:1337/`，我们将收到`page.html`的代码作为响应。如果`page.html`文件中有一个请求`style.css`的`<link>`标签，浏览器也会为此发出请求。URL不同，但它再次被`if`子句捕获，然后提供适当的内容。
- en: This is fine for now, but we will probably need to serve not two but many files.
    We do not want to describe all of them. So, this process should be optimized.
    The first layer of every Node.js server usually deals with routing. It parses
    the request's URL and decides what to do. If we need to deliver static files,
    then we will end up placing logic for that in an external module that finds the
    files, reads them, and sends a response with the proper content type. This can
    be the second layer of our architecture.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这样做还可以，但我们可能需要提供不是两个而是许多文件。我们不想描述所有这些文件。因此，这个过程应该被优化。每个Node.js服务器的第一层通常处理路由。它解析请求的URL并决定要做什么。如果我们需要传递静态文件，那么我们最终会将处理逻辑放在一个外部模块中，该模块找到文件，读取它们，并以适当的内容类型发送响应。这可以成为我们架构的第二层。
- en: 'Along with the delivery of files, we will need to write some backend logic.
    This will be the third layer. Again, based on the URL, we will perform some actions
    related to the business logic, as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 除了交付文件，我们还需要编写一些后端逻辑。这将是第三层。同样，根据URL，我们将执行与业务逻辑相关的一些操作，如下所示：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that we returned the JSON data. So now, our Node.js server acts as an API.
    We will talk about this at the end of this chapter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们返回了JSON数据。因此，我们的Node.js服务器现在充当API。我们将在本章末讨论这一点。
- en: 'The following diagram shows the three layers that we just talked about:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图表显示了我们刚刚谈到的三个层次：
- en: '![Introducing the basic layers of the application](img/image00165.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![介绍应用程序的基本层](img/image00165.jpeg)'
- en: These will be the main layers of our application. In the chapters that follow,
    we will work on them. But before that, let's see what other work we have to do
    before we reach that point.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些将是我们应用程序的主要层。在接下来的章节中，我们将对它们进行处理。但在那之前，让我们看看在达到那一点之前我们还需要做什么其他工作。
- en: The task runner and building system
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务运行器和构建系统
- en: Along with the practice of running the Node.js server, there are other best
    practices pertaining to web development tasks that you can consider. We are building
    a web application. So, we have client-side JavaScript and CSS that has to be delivered
    in the best possible way. In other words, to increase the performance of our website,
    we need to merge all the JavaScript into a single file and compress it. The same
    is valid for the CSS style sheets. If you do this, the browser will make fewer
    requests to the server.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除了运行Node.js服务器的实践之外，还有其他与Web开发任务相关的最佳实践可以考虑。我们正在构建一个Web应用程序。因此，我们有客户端JavaScript和CSS需要以最佳方式交付。换句话说，为了提高网站的性能，我们需要将所有JavaScript合并到一个文件中并进行压缩。对CSS样式表也是如此。如果这样做，浏览器将减少对服务器的请求。
- en: Node.js is a common tool for command-line utilities, except for when you want
    to run web servers. There are many modules available for the packaging and optimizing
    of assets. It is great that there are task runners and build systems that help
    you manage these processes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是一个常见的命令行实用工具，除非你想要运行Web服务器。有许多可用于打包和优化资产的模块。很棒的是有任务运行器和构建系统可以帮助你管理这些过程。
- en: Introducing Grunt
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍Grunt
- en: 'Grunt is one of the most popular task runners that are based on Node.js. It
    is available in the package manager registry and can be installed by using the
    following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Grunt是基于Node.js的最流行的任务运行器之一。它可以在包管理器注册表中找到，并且可以通过以下命令安装：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once we run that in the terminal, we will get a global `grunt` command at our
    disposal. We need to create a `Gruntfile.js` file in the root directory of the
    project, which is where we will define our tasks. By tasks, we mean actions such
    as concatenation and minification that we want to perform on specific files. Here
    is a simple `Gruntfile.js`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在终端中运行了这个命令，我们就会得到一个全局的`grunt`命令供我们使用。我们需要在项目的根目录中创建一个`Gruntfile.js`文件，这是我们定义任务的地方。通过任务，我们指的是诸如文件合并和文件压缩等我们想要对特定文件执行的操作。以下是一个简单的`Gruntfile.js`：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the first chapter of this book, we saw how one can define Node.js modules.
    The configuration needed by Grunt is just a simple module. We export a function
    that accepts a `grunt` object containing all the public API functions of the runner.
    In the `initConfig` block, we place our actions, and with `registerTask`, we combine
    actions and tasks. There should be at least one task that is defined with the
    name `default`. This is what Grunt runs if we don't pass additional parameters
    in the terminal.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第一章中，我们看到了如何定义Node.js模块。Grunt所需的配置只是一个简单的模块。我们导出一个函数，该函数接受一个包含运行器所有公共API函数的`grunt`对象。在`initConfig`块中，我们放置我们的操作，而使用`registerTask`，我们组合操作和任务。至少应该有一个任务使用名称`default`进行定义。这是如果我们在终端中不传递额外参数时Grunt运行的内容。
- en: 'There is one last function used in the preceding example—`loadNpmTasks`. The
    real power of Grunt is the fact that we have hundreds of plugins available. The
    `grunt` command is an interface that you can use to control these plugins when
    the real job is done. Since they are all registered in the Node.js package manager,
    we need to include them in the `package.json` file. For the preceding code, we
    need the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中还有一个最后使用的函数——`loadNpmTasks`。Grunt的真正强大之处在于我们有数百个可用的插件。`grunt`命令是一个接口，你可以用它来控制这些插件完成真正的工作。由于它们都在Node.js包管理器中注册，我们需要在`package.json`文件中包含它们。对于前面的代码，我们需要以下内容：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s continue by adding two other functionalities to our Grunt setup. Once
    we have the JavaScript concatenated, we will probably want a minified version
    of the compiled file; `grunt-contrib-uglify` is the module that does this job:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续向我们的Grunt设置添加另外两个功能。一旦我们将JavaScript合并，我们可能会希望有编译文件的缩小版本；`grunt-contrib-uglify`就是完成这项工作的模块：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We should mention that the `uglify` task should be run after the `concat` one
    because they depend on each other. There is also a shortcut—`<%= concat.javascript.dest
    %>`. We use such expressions to simplify the maintenance of the `Gruntfile.js`
    file.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该提到`uglify`任务应该在`concat`之后运行，因为它们彼此依赖。还有一个快捷方式——`<%= concat.javascript.dest
    %>`。我们使用这样的表达式来简化`Gruntfile.js`文件的维护。
- en: 'We have Grunt tasks to process our JavaScript. However, it will be too annoying
    if we have to go back to the console and run `grunt` every time we make a change.
    This is why there exists `grunt-contrib-watch`. It is a module that looks out
    for file changes and runs our tasks. Here is the updated `Gruntfile.js`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有Grunt任务来处理我们的JavaScript。但是，如果我们每次进行更改都必须返回控制台并运行`grunt`，那将会很烦人。这就是为什么存在`grunt-contrib-watch`的原因。这是一个模块，它会监视文件更改并运行我们的任务。以下是更新后的`Gruntfile.js`：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To get the script working, we have to additionally run `npm install grunt-contrib-watch
    grunt-contrib-uglify –save`. The command will install the modules and will update
    the `package.json` file.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让脚本工作，我们还需要运行`npm install grunt-contrib-watch grunt-contrib-uglify –save`。这个命令将安装模块并更新`package.json`文件。
- en: 'The following screenshot shows what the result in the terminal looks like when
    we call the `grunt` command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了当我们调用`grunt`命令时终端中的结果：
- en: '![Introducing Grunt](img/image00166.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![介绍Grunt](img/image00166.jpeg)'
- en: We can now see how our tasks run and the watching task starts. Once we save
    changes to a watched file, both the operations—concatenation and minification—are
    fired again.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到我们的任务是如何运行的，监视任务也开始了。一旦我们保存了一个被监视的文件的更改，合并和压缩操作都会再次触发。
- en: Discovering Gulp
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现Gulp
- en: 'Gulp is a build system that automates common tasks. As in Grunt, we can compose
    our asset pipeline. However, there are a few differences between the two:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Gulp是一个自动化常见任务的构建系统。与Grunt一样，我们可以组合我们的资产管道。但是，两者之间有一些区别：
- en: We still have a configuration file, but it is called `gulpfile.js`.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们仍然有一个配置文件，但它被称为`gulpfile.js`。
- en: Gulp is a streaming-based tool. It doesn't store anything on the disc when it
    is working. Grunt needs to create temporary files in order to pass data from one
    task to another, but Gulp keeps the data in the memory.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gulp是基于流的工具。它在工作时不会在磁盘上存储任何东西。Grunt需要创建临时文件以便将数据从一个任务传递到另一个任务，但是Gulp将数据保存在内存中。
- en: Gulp follows the **code-over-configuration** principle. In the `gulpfile.js`
    file, we write our tasks like a regular Node.js script. We will see a demonstration
    of this in a minute.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gulp遵循**代码优于配置**的原则。在`gulpfile.js`文件中，我们像编写常规的Node.js脚本一样编写我们的任务。我们将在一分钟内看到这个演示。
- en: 'To use Gulp, we have to install it first. The following command will set up
    the tool globally:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Gulp，我们必须先安装它。以下命令将全局设置该工具：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We are going to use a few plugins—`gulp-concat`, `gulp-uglify`, and `gulp-rename`.
    After adding them to our `package.json` file, run `npm install` so that we can
    install them.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一些插件——`gulp-concat`、`gulp-uglify`和`gulp-rename`。将它们添加到我们的`package.json`文件中后，运行`npm
    install`以安装它们。
- en: 'The next step is to create a new `gulpfile.js` file in the root directory of
    our project and run the `gulp` command. Let''s keep the same tasks from the previous
    section and translate them to Gulp:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在项目的根目录中创建一个新的`gulpfile.js`文件，并运行`gulp`命令。让我们保留上一节中的相同任务，并将它们转换为Gulp：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'There are a few `require` calls at the top of the file. We initialized the
    public API of Gulp (the `gulp` object) and the plugins needed for the operations
    that we want to perform. We need to add all these modules to our `package.json`
    file. Just after that, we define three tasks by using the (`task_name`, `callback_function`)
    syntax:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 文件顶部有几个`require`调用。我们初始化了Gulp的公共API（`gulp`对象）和我们想要执行的操作所需的插件。我们需要将所有这些模块添加到我们的`package.json`文件中。在那之后，我们使用(`task_name`,
    `callback_function`)语法定义了三个任务：
- en: '`js`: This is the task that gets our JavaScript files, pipes them to the plugin
    that concatenates files, and saves the result. We continue by sending the data
    to the `uglify` module that minifies our code and in the end, we save a new file
    with a `.min` suffix.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`js`：这是获取我们的JavaScript文件的任务，将它们传输到连接文件的插件，并保存结果。然后我们将数据发送到`uglify`模块，对我们的代码进行最小化处理，最后保存一个带有`.min`后缀的新文件。'
- en: '`watchers`: With this task, we can monitor our JavaScript for changes and run
    the `js` task.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`watchers`：通过这个任务，我们可以监视我们的JavaScript文件的更改并运行`js`任务。'
- en: '`default`: By default, Gulp runs that part of our file. We may specify the
    task by adding one more argument to the `gulp` call in the terminal.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default`：默认情况下，Gulp运行我们文件的这部分。我们可以通过在终端中的`gulp`调用中添加一个参数来指定任务。'
- en: The result of the preceding script should look like the following screenshot.
    Again, we can see how automation happens. The watching part is present, too.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上述脚本的结果应该如下截图所示。再次，我们可以看到自动化是如何发生的。监视部分也存在。
- en: '![Discovering Gulp](img/image00167.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![发现Gulp](img/image00167.jpeg)'
- en: Test-driven development
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: 'Test-driven development is a software development process in which automated
    tests drive the development cycle of a new product or functionality. It speeds
    up the development in the long run and tends to produce better code. Nowadays,
    many frameworks have tools that help you create automated tests. So as developers,
    we need to write and run tests first before writing any new code. We always check
    what the result of our work is. In web development, we usually open the browser
    and interact with our application to see how our code behaves. So, a major part
    of our time goes into testing. The good news is that we may optimize this process.
    It is possible to write code that does the job instead of us. Sometimes, relying
    on manual testing is not the best option, because it takes time. Here are a few
    benefits of having tests:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 测试驱动开发是一种软件开发过程，其中自动化测试驱动新产品或功能的开发周期。从长远来看，它加快了开发速度，并倾向于产生更好的代码。如今，许多框架都有帮助您创建自动化测试的工具。因此，作为开发人员，我们需要在编写任何新代码之前首先编写和运行测试。我们始终检查我们工作的结果是什么。在Web开发中，我们通常打开浏览器并与我们的应用程序进行交互，以查看我们的代码行为如何。因此，我们的大部分时间都花在测试上。好消息是我们可以优化这个过程。我们可以编写代码来代替我们的工作。有时，依赖手动测试并不是最佳选择，因为它需要时间。以下是进行测试的几个好处：
- en: The tests improve the stability of our application
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试提高了我们应用程序的稳定性
- en: Automated testing saves time that can be spent in improving or refactoring the
    system's code
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化测试节省了时间，可以用来改进或重构系统的代码
- en: Test-driven development tends to produce better code over time because it makes
    us think about better structuring and modular approaches
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试驱动开发倾向于随着时间的推移产生更好的代码，因为它让我们考虑更好的结构和模块化方法
- en: Continuous testing helps us develop new features on an existing app since the
    automated tests will fail if we introduce a code that breaks an old feature
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续测试帮助我们在现有应用程序上开发新功能，因为如果我们引入破坏旧功能的代码，自动化测试将失败
- en: The tests could be used as documentation, especially for developers who have
    just joined the team
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试可以用作文档，特别是对于刚加入团队的开发人员
- en: 'At the beginning of the process, we want our test to fail. After that, we implement
    step-by-step the required logic till the test passes. The following diagram shows
    the process:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在过程开始时，我们希望我们的测试失败。之后，我们逐步实现所需的逻辑，直到测试通过。以下图表显示了这个过程：
- en: '![Test-driven development](img/image00168.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![测试驱动开发](img/image00168.jpeg)'
- en: 'Very often, developers use tools that help them write tests. We are going to
    use a testing framework called **Mocha**. It is available for Node.js and the
    browser, and it is one of the most popular solutions when it comes to automated
    testing. Let''s install Mocha and see how TDD works. We will run the following
    command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员经常使用帮助他们编写测试的工具。我们将使用一个名为**Mocha**的测试框架。它适用于Node.js和浏览器，并且在自动化测试方面是最受欢迎的解决方案之一。让我们安装Mocha并看看TDD是如何工作的。我们将运行以下命令：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As we already did several times in the book, we will have the package globally
    installed. For the purpose of this example, we will assume that our application
    needs a module that reads external JSON files. Let''s create an empty folder and
    put the following content into a `test.js` file:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在书中已经做了几次，我们将全局安装包。为了这个例子，我们假设我们的应用程序需要一个模块来读取外部的JSON文件。让我们创建一个空文件夹，并将以下内容放入`test.js`文件中：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `describe` and `it` functions are Mocha-specific functions. They are global
    and we have them readily available. The `assert` module is a native Node.js module
    that we may use to perform checks. Some of the popular testing frameworks have
    their own assertion methods. Mocha does not have one, but it works well with libraries
    such as `Chai` or `Expect.js`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe`和`it`函数是Mocha特定的函数。它们是全局的，我们可以随时使用。`assert`模块是一个原生的Node.js模块，我们可以用它来进行检查。一些流行的测试框架有自己的断言方法。Mocha没有，但它可以很好地与`Chai`或`Expect.js`等库一起使用。'
- en: 'We use `describe` to form a series of tests and `it` to define logical blocks.
    We assume that there is a `JSONReader.js` file in the current directory and when
    the module inside is required, we have a public `read` method available. Now,
    let''s run our test with `mocha .\test.js`. The result is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`describe`来形成一系列测试，使用`it`来定义逻辑块。我们假设当前目录中有一个`JSONReader.js`文件，当需要其中的模块时，我们有一个公共的`read`方法可用。现在，让我们用`mocha
    .\test.js`来运行我们的测试。结果如下：
- en: '![Test-driven development](img/image00169.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![测试驱动开发](img/image00169.jpeg)'
- en: 'Of course, our test fails because there is no such file. If we create the file
    and place the following code in it, our test will pass:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们的测试失败是因为没有这样的文件。如果我们创建文件并将以下代码放入其中，我们的测试将通过：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `JSONReader` module exports an object with the help of the `read` public
    method. We will run `mocha .\test.js` again. However, this time, all the requirements
    listed in the test are covered. Now, the terminal should look like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSONReader`模块通过`read`公共方法导出一个对象。我们将再次运行`mocha .\test.js`。然而，这一次，测试中列出的所有要求都得到了满足。现在，终端应该是这样的：'
- en: '![Test-driven development](img/image00170.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![测试驱动开发](img/image00170.jpeg)'
- en: Let's assume that our `JSONReader` module has been becoming bigger and bigger.
    New methods have come in, and different developers have worked on the same file.
    Our test will still check if the module exists and if there is a `read` function.
    This is important because somewhere at the beginning of the project, the programmer
    has used the `JSONReader` module and expects it to have the `read` function available.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的`JSONReader`模块变得越来越大。新的方法出现了，不同的开发人员在同一个文件上工作。我们的测试仍然会检查模块是否存在，以及是否有`read`函数。这很重要，因为在项目开始的某个地方，程序员已经使用了`JSONReader`模块，并期望它有可用的`read`函数。
- en: In our test, we added just a few assertions. However, in the real world, there
    will be many more `describe` and `it` blocks. The more cases the test covers,
    the better. Very often, companies rely on their test suites before releasing a
    new product version. If there is a test that has failed, they just don't publish
    anything. In the next few chapters of the book, we will often write tests.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的测试中，我们只添加了一些断言。然而，在现实世界中，会有更多的`describe`和`it`块。测试覆盖的案例越多，越好。很多时候，公司在发布新产品版本之前会依赖他们的测试套件。如果有一个测试失败了，他们就不发布任何东西。在书的接下来的几章中，我们经常会写测试。
- en: The Model-View-Controller pattern
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型-视图-控制器模式
- en: 'It''s always difficult to start a new project or the implementation of a new
    feature. We just don''t know how to structure our code, what modules to write,
    and how they are going to communicate. In such cases, we often trust well-known
    practices—design patterns. Design patterns are reusable solutions to commonly
    occurring problems. For example, the **Model-View-Controller** pattern has proven
    to be one of the most effective patterns for web development due to its clear
    separation of the data, logic, and presentation layers. We will base our social
    network on a variation of this pattern. The traditional parts and their responsibilities
    are as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个新项目或实现一个新功能总是困难的。我们不知道如何组织我们的代码，要写哪些模块，它们将如何通信。在这种情况下，我们经常信任众所周知的实践——设计模式。设计模式是常见问题的可重用解决方案。例如，**模型-视图-控制器**模式已被证明是Web开发中最有效的模式之一，因为它清晰地分离了数据、逻辑和表示层。我们将以这种模式的变体为基础构建我们的社交网络。传统的部分及其职责如下：
- en: '![The Model-View-Controller pattern](img/image00171.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![模型-视图-控制器模式](img/image00171.jpeg)'
- en: '**Model**: The **Model** is the part that stores the data or the state. It
    triggers an update on the **View** once there is a change.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：**模型**是存储数据或状态的部分。一旦有变化，它就会触发**视图**的更新。'
- en: '**View**: The **View** is usually the part that the user can see. It is a direct
    representation of the data or the state of the **Model**.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：**视图**通常是用户可以看到的部分。它是数据或**模型**状态的直接表示。'
- en: '**Controller**: The user interacts with the help of the **Controller** (sometimes
    through the **View**). It can send commands to the **Model** to update its state.
    In some cases, it can also notify the **View** so that the user can see another
    representation of the **Model**.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：用户通过**控制器**（有时通过**视图**）进行交互。它可以向**模型**发送命令以更新其状态。在某些情况下，它还可以通知**视图**，以便用户可以看到**模型**的另一个表示。'
- en: However, in web development (especially the code that runs in the browser),
    the **View** and the **Controller** share the same functions. Very often, there
    is no strict distinction between the two. In this book, the controllers will also
    deal with UI elements. Let's start with the Node.js environment. To simplify the
    example, we will place our code in a file called `server.js`. Our application
    will do only one thing—it will update the value of a variable stored in the memory.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在Web开发中（特别是在浏览器中运行的代码），**View**和**Controller**共享相同的功能。很多时候，两者之间没有严格的区分。在本书中，控制器也将处理UI元素。让我们从Node.js环境开始。为了简化示例，我们将把我们的代码放在一个名为`server.js`的文件中。我们的应用程序只会做一件事——更新存储在内存中的变量的值。
- en: 'In our context, the **View** will produce HTML markup. Later, that markup will
    be sent to the browser, as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的上下文中，**View**将生成HTML标记。稍后，该标记将被发送到浏览器，如下所示：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this code, there is a JavaScript object literal with only one `render` method.
    To construct proper content for the `h1` tag, we will use the model and its `status`
    variable. There are two links as well. The first one changes `model.status` to
    `true` and the second one changes it to `false`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，有一个JavaScript对象文字，只有一个`render`方法。为了构建`h1`标记的正确内容，我们将使用模型及其`status`变量。还有两个链接。第一个将`model.status`更改为`true`，第二个将其更改为`false`。
- en: 'The `Model` object is fairly small. Like the **View**, it has only one method:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`Model`对象相当小。与**View**一样，它只有一个方法：'
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that **Model** triggers the rendering of the view. It is important to mention
    here that the Model should not know about the representation of its data in the
    view layer. All it has to do is send a signal to the view to notify that it is
    updated.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，**Model**触发了视图的渲染。在这里重要的一点是，模型不应该知道其数据在视图层的表示。它所要做的就是向视图发送信号，通知它已更新。
- en: 'The last part of our pattern is the **Controller**. We may consider it as an
    entry point of our script. If we are building a Node.js server, this is the function
    that accepts the `request` and `response` object:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们模式的最后一部分是**Controller**。我们可以将其视为脚本的入口点。如果我们正在构建一个Node.js服务器，这是接受`request`和`response`对象的函数：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We cached the `response` parameter in a global variable so we that can access
    it from other functions.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在全局变量中缓存了`response`参数，以便我们可以从其他函数中访问它。
- en: This is similar to the instance that occurred at the beginning of this chapter
    where we used the `request.url` property to control the flow of the application.
    The preceding code changes the state of the model when the user visits the `/on`
    or `/off` URLs. If it does not, then it simply triggers the `render` function
    of the view.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于本章开头发生的情况，我们在那里使用`request.url`属性来控制应用程序的流程。当用户访问`/on`或`/off` URL时，前面的代码会改变模型的状态。如果没有，它只是触发视图的`render`函数。
- en: The Model-View-Controller pattern fits Node.js well. As we saw, it can be easily
    implemented. Since it is really popular, there are modules and even frameworks
    that use this concept. In the next few chapters, we will see how the pattern works
    in large-scale applications.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 模型-视图-控制器模式很适合Node.js。正如我们所看到的，它可以很容易地实现。由于它非常受欢迎，有使用这个概念的模块甚至框架。在接下来的几章中，我们将看到这种模式在大型应用程序中的运作方式。
- en: Introducing the REST API concept
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍REST API概念
- en: '**REST** stands for **Representational State Transfer**. By definition, it
    is an architectural principle of the Web. In practice, it is a set of rules that
    simplify client-server communication. A lot of companies provide REST APIs because
    they are simple and highly scalable.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**REST**代表**表述性状态转移**。根据定义，它是Web的一种架构原则。在实践中，它是一组简化客户端-服务器通信的规则。许多公司提供REST
    API，因为它们简单且高度可扩展。'
- en: 'To better understand what REST exactly means, let''s take a simple example.
    We have an online store and we want to manage the users in our system. We have
    the backend logic implemented in various controllers. We want to trigger functionalities
    there via HTTP requests. In other words, we need an application program interface
    for these controllers. We start by planning the URLs to access our server. If
    we follow the REST architecture, then we may have the following routes:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解REST的确切含义，让我们举一个简单的例子。我们有一个在线商店，我们想要管理系统中的用户。我们在各种控制器中实现了后端逻辑。我们希望通过HTTP请求触发那里的功能。换句话说，我们需要这些控制器的应用程序接口。我们首先规划要访问服务器的URL。如果我们遵循REST架构，那么我们可能会有以下路由：
- en: '`GET` requests to `/users` return a list of all the users in the system'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET`请求到`/users`返回系统中所有用户的列表'
- en: '`POST` requests to `/users` create new user'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST`请求到`/users`创建新用户'
- en: '`PUT` requests to `/users/24` edit the data of a user with the unique identification
    number `24`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT`请求到`/users/24`编辑具有唯一标识号`24`的用户的数据'
- en: '`DELETE` requests to `/users/24` delete the profile of a user with the unique
    identification number `24`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`请求到`/users/24`删除具有唯一标识号`24`的用户的个人资料'
- en: There is a resource defined—**user**. The URL is what makes REST simple. The
    `GET` request is used to retrieve data, `POST` is for storing, `PUT` is for editing
    and `DELETE` is for removing records.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个定义的资源——**user**。URL是使REST简单的关键。`GET`请求用于检索数据，`POST`用于存储，`PUT`用于编辑，`DELETE`用于删除记录。
- en: 'Some parts of our small social network will be based on the REST architecture.
    We will have controllers that handle the four types of requests and perform the
    necessary operations. However, before we reach that part of the book, let''s write
    a simple Node.js server that accepts `GET`, `POST`, `PUT`, and `DELETE` requests.
    The following code goes to a file called `server.js`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们小型社交网络的一些部分将基于REST架构。我们将有处理四种类型请求并执行必要操作的控制器。然而，在我们达到本书的那一部分之前，让我们编写一个简单的Node.js服务器，接受`GET`、`POST`、`PUT`和`DELETE`请求。以下代码放入一个名为`server.js`的文件中：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `req` object has a `method` property. It tells us about the type of the
    request. We may run the preceding server with `node .\server.js` and send different
    types of requests. In order to test it, we will use the popular `curl` command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`req`对象有一个`method`属性。它告诉我们请求的类型。我们可以使用`node .\server.js`运行前面的服务器，并发送不同类型的请求。为了测试它，我们将使用流行的`curl`命令：'
- en: '![Introducing the REST API concept](img/image00172.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![介绍REST API概念](img/image00172.jpeg)'
- en: 'Let''s try a more complex `PUT` request. The following example uses cURL. It
    is a command-line tool that helps you run requests. In our case, we will perform
    a `PUT` request to our server:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一个更复杂的`PUT`请求。以下示例使用cURL。这是一个帮助您运行请求的命令行工具。在我们的情况下，我们将向服务器执行一个`PUT`请求：
- en: '![Introducing the REST API concept](img/image00173.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![介绍REST API概念](img/image00173.jpeg)'
- en: 'We changed the request method with the `-X` option. Along with this, we passed
    a variable called `book` with the `Node.js by example` value. However, our server
    does not have code that processes parameters. We will add the following function
    to our `server.js`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`-X`选项更改了请求方法。除此之外，我们传递了一个名为`book`的变量，其值为`Node.js by example`。然而，我们的服务器没有处理参数的代码。我们将在`server.js`中添加以下函数：
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The code accepts the `req` object and a callback function because collecting
    the data is an asynchronous operation. The `body` variable is filled with the
    incoming data and once all the chunks are collected, we trigger the callback by
    passing the parsed body of the request. Here is the updated controller:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码接受`req`对象和回调函数，因为收集数据是一个异步操作。`body`变量填充了传入的数据，一旦收集到所有块，我们通过传递请求的解析主体来触发回调。以下是更新后的控制器：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Note that we called `return` in the `PUT` catch statement. We did this so that
    the application flow stops there and waits till the request is processed. This
    is the result in the terminal:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在`PUT` catch语句中调用了`return`。我们这样做是为了应用程序流在那里停止并等待请求被处理。这是终端中的结果：
- en: '![Introducing the REST API concept](img/image00174.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![介绍REST API概念](img/image00174.jpeg)'
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The developing of software is a complex task. Like every complex process, it
    needs planning. It needs a good base and a well-designed architecture. In this
    chapter, we saw a few different aspects of planning a big Node.js application.
    In the next chapter, we will learn how to manage our assets.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发是一项复杂的任务。像每个复杂的过程一样，它需要规划。它需要一个良好的基础和一个精心设计的架构。在本章中，我们看到了规划一个大型Node.js应用程序的几个不同方面。在下一章中，我们将学习如何管理我们的资产。
