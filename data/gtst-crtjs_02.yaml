- en: Chapter 2. Commencing with CreateJS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：开始使用CreateJS
- en: In this chapter, we are going to talk about working with basic objects and events
    in CreateJS and EaselJS. After learning about these topics, you can work with
    basic methods and functions in CreateJS to create your shapes, and control them
    using events.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何在CreateJS和EaselJS中处理基本对象和事件。在了解这些主题后，你可以使用CreateJS的基本方法和函数来创建你的形状，并通过事件来控制它们。
- en: 'We are going to discuss the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论以下主题：
- en: Exploring CreateJS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索CreateJS
- en: Working with APIs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与API一起工作
- en: Methods and events
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法与事件
- en: Exploring CreateJS
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索CreateJS
- en: 'EaselJS is one of the main CreateJS modules, which enable developers to work
    with Canvas elements. To work with EaselJS, we need to have a `canvas` element,
    so all shapes can be rendered into this area. After creating an instance of `Stage`
    class, we need to add `displayObject` to the `Stage` class. EaselJS supports the
    following features:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: EaselJS是CreateJS的主要模块之一，它使开发者能够与Canvas元素一起工作。要使用EaselJS，我们需要有一个`canvas`元素，因此所有形状都可以渲染到这个区域。在创建`Stage`类的实例后，我们需要将`displayObject`添加到`Stage`类中。EaselJS支持以下功能：
- en: '**Bitmap**: This is used for the images.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位图**：这用于图像。'
- en: '**Shape** and **Graphics**: These are used for the vector graphics.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**形状**和**图形**：这些用于矢量图形。'
- en: '**SpriteSheet** and **Sprite**: These are used for the animated Bitmaps.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**精灵图集**和**精灵**：这些用于动画位图。'
- en: '**Text**: This is used for the simple text instances.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本**：这用于简单的文本实例。'
- en: '**Container**: These hold other DisplayObjects.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器**：这些包含其他DisplayObjects。'
- en: '**DOMElement**: This is used to control the HTML DOM elements.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DOM元素**：这用于控制HTML DOM元素。'
- en: When the `Stage` object wraps the `canvas` element, all shapes and text appear
    in the `Canvas` element.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当`Stage`对象包裹`canvas`元素时，所有形状和文本都会出现在`Canvas`元素中。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more details, check the EaselJS documentation at [http://www.createjs.com/Docs/EaselJS/modules/EaselJS.html](http://www.createjs.com/Docs/EaselJS/modules/EaselJS.html).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详情，请查看EaselJS文档：[http://www.createjs.com/Docs/EaselJS/modules/EaselJS.html](http://www.createjs.com/Docs/EaselJS/modules/EaselJS.html)。
- en: 'Let''s go through an example of creating a basic shape in EaselJS. Here, we
    have a `canvas` element with a specific height and width:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个在EaselJS中创建基本形状的例子来了解一下。这里，我们有一个具有特定高度和宽度的`canvas`元素：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'CreateJS has a `Stage` method, which accepts a `canvas` element in the first
    parameter, and we should pass the ID of our canvas element to it:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: CreateJS有一个`Stage`方法，它接受第一个参数为一个`canvas`元素，我们应该将我们的`canvas`元素的ID传递给它：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We now have a stage for our canvas element. In the next step, we need to create
    a shape:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们为我们的`canvas`元素创建了一个舞台。在下一步中，我们需要创建一个形状：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)购买的Packt书籍的账户中下载所有示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册以直接通过电子邮件获得文件。
- en: In the first line, a `circle` variable is created. It contains the `Shape` object
    from EaselJS. All `Shape` objects have a `graphics` property.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，创建了一个名为`circle`的变量。它包含来自EaselJS的`Shape`对象。所有`Shape`对象都有一个`graphics`属性。
- en: In the next line, we fill it with the color red using the `beginFill` method,
    and then in the line after that, we create a circle with the `drawCircle` method.
    The `drawCircle` method has three parameters; the first two parameters are used
    for positioning the circle (x and y axis values) and the last parameter is the
    radius in pixels. Thus, we have created a circle with position `0` (relative to
    the shape's position) and radius `50`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行，我们使用`beginFill`方法将其填充为红色，然后在下一行，我们使用`drawCircle`方法创建一个圆形。`drawCircle`方法有三个参数；前两个参数用于定位圆形（x和y轴的值），最后一个参数是像素半径。因此，我们创建了一个位置为`0`（相对于形状的位置）和半径为`50`的圆形。
- en: EaselJS supports method chaining, we can call all functions one after another,
    just as we have seen in our previous example of creating the circle and filling
    in the background color.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: EaselJS支持方法链，我们可以一个接一个地调用所有函数，就像我们在之前的创建圆形和填充背景颜色的示例中看到的那样。
- en: 'After creating the `Shape` object, we need to add it to our `stage` object
    and also update the stage as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`Shape`对象后，我们需要将其添加到我们的`stage`对象中，并按以下方式更新舞台：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Keep in mind that after adding `child` (`shape`, `circle`, and so on), we have
    to call the `update` method from the `stage` object to update the stage; otherwise,
    the code will not run properly and we will not get the desired result. You can
    see the result of our simple code in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在添加 `child` (`shape`, `circle` 等等) 之后，我们必须从 `stage` 对象中调用 `update` 方法来更新舞台；否则，代码将无法正常运行，我们也不会得到期望的结果。您可以在下面的屏幕截图中看到我们简单代码的结果：
- en: '![Exploring CreateJS](img/0260OS_02_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![探索 CreateJS](img/0260OS_02_01.jpg)'
- en: Working with events
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与事件一起工作
- en: '`DisplayObject` has a method to add events to shapes or objects. Using `addEventListener`,
    we can add an event to `DisplayObject` (for example, `shape`). This function has
    two mandatory arguments:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`DisplayObject` 有一个方法可以向形状或对象添加事件。使用 `addEventListener`，我们可以向 `DisplayObject`（例如，`shape`）添加事件。此函数有两个强制参数：'
- en: The name of the event
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件的名称
- en: The callback function for the event
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件回调函数
- en: 'We will understand this method of working with events with the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下代码了解这种处理事件的方法：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the first line, a click event is added to `displayObject` so that the `handleClick`
    function is called when the user clicks on the object. The `handleClick` function
    is empty in this example.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，向 `displayObject` 添加了一个点击事件，以便当用户点击对象时调用 `handleClick` 函数。在这个例子中，`handleClick`
    函数是空的。
- en: 'Let''s consider our earlier example of the circle and add a click event to
    our circle. Inside the callback function of the click event, we move the circle
    10 pixels to right. Here is the code for that:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑我们之前的圆圈示例，并向我们的圆圈添加一个点击事件。在点击事件的回调函数内部，我们将圆圈向右移动 10 像素。以下是该代码：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the first line, we have our DisplayObject. Using `addEventListener`, the
    click event is added to the circle. Our callback handler is `handleClick`. Inside
    this function, we can get target objects (the circle shape, in this example) and
    change properties of the shape (for example, width, height, or position) via the
    `event` variable.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们有我们的 DisplayObject。使用 `addEventListener`，我们将点击事件添加到圆圈上。我们的回调处理程序是 `handleClick`。在这个函数内部，我们可以获取目标对象（在这个例子中是圆形形状）并通过
    `event` 变量更改形状的属性（例如，宽度、高度或位置）。
- en: '`event.target` is the target shape object. In every callback function call,
    we add the x property with 10 and then call the `update` function from the `stage`
    object. We have to call the update function after changing properties in order
    to apply changes.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`event.target` 是目标形状对象。在每次回调函数调用中，我们添加 x 属性 10，然后从 `stage` 对象中调用 `update` 函数。我们必须在更改属性后调用更新函数，以便应用更改。'
- en: 'Remember that to add events to `DisplayObject`, we need to add an event listener
    first and then add displayObject to the stage. Here is the complete source code
    for our example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，为了向 `DisplayObject` 添加事件，我们首先需要添加事件监听器，然后将 displayObject 添加到舞台中。以下是我们的示例的完整源代码：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: EaselJS has many more events, and you can use all of them in the same example
    explained previously.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: EaselJS 有更多的事件，您可以在之前解释的相同示例中使用它们。
- en: 'Currently DisplayObjects supports the following events:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 目前 DisplayObjects 支持以下事件：
- en: '`click`: The user clicks and releases the mouse'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`click`：用户点击并释放鼠标'
- en: '`dblclick`: The user double-clicks the mouse'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dblclick`：用户双击鼠标'
- en: '`mousedown`: The user clicks the mouse'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mousedown`：用户点击鼠标'
- en: '`mouseout`: The user moves the mouse pointer away from an object'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mouseout`：用户将鼠标指针从对象移开'
- en: '`mouseover`: The user moves the mouse pointer over an object'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mouseover`：用户将鼠标指针移到对象上'
- en: '`pressmove`: The user clicks the mouse and then moves it'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pressmove`：用户点击鼠标然后移动它'
- en: '`pressup`: The user releases the mouse either over or outside the object'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pressup`：用户在对象上方或外部释放鼠标'
- en: '`rollout`: The user rolls away from a child element'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rollout`：用户从子元素移开'
- en: '`rollover`: The user rolls over a child element'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rollover`：用户在子元素上悬停'
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more details, refer to [http://www.createjs.com/Docs/EaselJS/classes/DisplayObject.html#events](http://www.createjs.com/Docs/EaselJS/classes/DisplayObject.html#events).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息，请参阅 [http://www.createjs.com/Docs/EaselJS/classes/DisplayObject.html#events](http://www.createjs.com/Docs/EaselJS/classes/DisplayObject.html#events)。
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to work with the basic functions and events
    of CreateJS and EaselJS. We have learned how to create a stage object in EaselJS,
    what `DisplayObject` is, and how to append them to the `stage` object.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 CreateJS 和 EaselJS 的基本功能和事件。我们学习了如何在 EaselJS 中创建舞台对象，`DisplayObject`
    是什么，以及如何将它们附加到 `stage` 对象。
- en: We also created the first simple shape in EaselJS, a circle. In the last part
    of the chapter, we discussed how to add an event listener to an object in EaselJS.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在 EaselJS 中创建了第一个简单形状，一个圆。在章节的最后部分，我们讨论了如何在 EaselJS 中为一个对象添加事件监听器。
- en: In the next chapter, we are going to go through complex examples to create a
    drag-and-drop interaction and use mouse events in EaselJS.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过复杂的示例来创建拖放交互，并在 EaselJS 中使用鼠标事件。
