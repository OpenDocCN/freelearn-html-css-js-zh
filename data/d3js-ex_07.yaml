- en: Chapter 7. Creating Animated Visuals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。创建动画可视化
- en: We are now going to look at using D3.js transitions to represent changes in
    the information underlying a visual. We will start with examples for examining
    several concepts involved in using D3.js to animate the properties of visual elements
    from one state to another.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将探讨使用 D3.js 转换来表示视觉信息下的变化。我们将从几个概念的示例开始，这些概念涉及使用 D3.js 动画化视觉元素从一个状态到另一个状态的性质。
- en: By the end of this chapter, we will extend the bubble visualization from [Chapter
    6](ch06.html "Chapter 6. Creating Scatter and Bubble Plots"), *Creating Scatter
    and Bubble Plots*, to demonstrate how we can animate our bubbles as we move through
    multiple years of data. This will demonstrate the construction of a relatively
    complex animation through which a user can easily deduce trends in the information.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将从[第 6 章](ch06.html "第 6 章。创建散点图和气泡图")，*创建散点图和气泡图*，扩展气泡可视化，以展示我们如何随着通过多年的数据移动来动画化我们的气泡。这将展示一个相对复杂的动画构建过程，用户可以轻松地从中推断出信息中的趋势。
- en: 'In this chapter, we will cover the following topics through examples:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过以下示例涵盖以下主题：
- en: Animating using transitions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用转换进行动画
- en: Animating the fill color of a rectangle
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画矩形填充颜色
- en: Animating multiple properties simultaneously
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时动画化多个属性
- en: Delaying an animation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟动画
- en: Creating chained transitions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建链式转换
- en: Handling the start and end events of transitions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理转换的开始和结束事件
- en: Changing the content and size of text using tweening
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用缓动改变文本的内容和大小
- en: Using timers to schedule the steps of an animation
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用定时器安排动画的步骤
- en: 'Adding a fifth dimension to a bubble chart through animation: time'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过动画添加气泡图的第五维：时间
- en: Introduction to animation
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画简介
- en: D3.js provides extensive capabilities for animating your visualizations. Through
    the use of animation, we can provide the viewer with a means to understanding
    how data changes over time.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 提供了广泛的动画化可视化能力。通过使用动画，我们可以为观众提供一种理解数据随时间变化的方式。
- en: Animation in D3.js is all about changing the properties of the visual objects
    over time. When these properties are changed, the DOM is updated and the visual
    is modified to represent the new state.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 D3.js 中，动画全部关于随时间改变视觉对象的属性。当这些属性改变时，DOM 被更新，视觉被修改以表示新的状态。
- en: 'To animate properties, D3.js provides the following capabilities that we will
    examine:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了动画化属性，D3.js 提供了以下能力，我们将对其进行检查：
- en: Transitions
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换
- en: Interpolators and tweenings
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插值器和缓动
- en: Easings
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓动
- en: Timers
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定时器
- en: Animating using transitions
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用转换进行动画
- en: D3.js animations are implemented via the concept of **transitions**. Transitions
    provide instructions and information to D3.js for changing one or more visual
    attribute values over a specific duration of time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 动画通过**转换**的概念实现。转换提供指令和信息给 D3.js，以便在特定的时间段内改变一个或多个视觉属性值。
- en: When D3.js starts a transition on a visual, it calculates the initial style
    and ending style for the element that is being transitioned. These are often referred
    to as the start and end **keyframes**. Each keyframe is a set of styles and other
    properties that you can specify as part of the animation. D3.js will then animate
    those properties from the start values to the end values.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当 D3.js 在一个视觉元素上开始转换时，它会计算正在转换的元素的初始样式和结束样式。这些通常被称为开始和结束**关键帧**。每个关键帧是一组你可以指定为动画一部分的样式和其他属性。然后
    D3.js 将这些属性从起始值动画化到结束值。
- en: Animating the fill color of a rectangle
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动画矩形填充颜色
- en: 'To demonstrate a transition in action, we will start with an example and animate
    the color of a rectangle from one color to another. The code for this example
    is available at the following link:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示转换的实际操作，我们将从一个示例开始，并动画化矩形的颜色从一种颜色转换到另一种颜色。此示例的代码可在以下链接找到：
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (7.1): [http://goo.gl/oNJOQ9](http://goo.gl/oNJOQ9)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: bl.ock (7.1)：[http://goo.gl/oNJOQ9](http://goo.gl/oNJOQ9)
- en: In this example, we start by creating the following SVG rectangle and setting
    its initial `fill` to `red`, followed by transitioning the fill color to `blue`
    over a period of five seconds.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们首先创建以下 SVG 矩形，并将其初始 `fill` 设置为 `red`，然后在五秒内过渡到 `blue` 颜色。
- en: 'When running the example, you will see a single rectangle that changes from
    red to blue over a period of five seconds. During that time, it smoothly animates
    through intermediate colors such as purple, as seen in the following image:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 运行示例时，您将看到一个矩形在五秒内从红色变为蓝色。在这段时间内，它平滑地通过中间颜色，如紫色，正如以下图像所示：
- en: '![Animating the fill color of a rectangle](img/B04230_07_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![矩形填充颜色的动画](img/B04230_07_01.jpg)'
- en: 'The primary part of this code that does the animation is the following; it
    starts by creating the rectangle and setting its initial color to red:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码的主要部分负责动画，它首先创建矩形并将其初始颜色设置为红色：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The call to `.transition()` informs D3.js that we we want to transition one
    or more properties of the `rect` element that are made to the attributes of the
    rect element using calls to .style() or .attr().
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`.transition()` 调用通知 D3.js 我们想要过渡 `rect` 元素的一个或多个属性，这些属性是通过调用 .style() 或 .attr()
    对 rect 元素的属性所做的更改。'
- en: The call to `.transition()` instructs D3.js to track any changes that are made
    to the attributes of the SVG element using calls to `.style()` or `.attr()`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`.transition()` 调用指示 D3.js 跟踪使用 `.style()` 或 `.attr()` 调用对 SVG 元素的属性所做的任何更改。'
- en: In this case, we specify that the `fill` of the rectangle should be `blue` at
    the end of the transition. D3.js uses this to calculate the starting and ending
    keyframes, which tracks the fill on the rectangle should change from red to blue
    in this case.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们指定矩形的 `fill` 在过渡结束时应该是 `blue`。D3.js 使用此信息来计算起始和结束关键帧，跟踪矩形上的填充应该从红色变为蓝色。
- en: When the rendering of these elements begins, D3.js also starts the animation
    and smoothly changes the fill property over the specified period.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些元素的渲染开始时，D3.js 也会开始动画，并在指定期间平滑地改变填充属性。
- en: Animating multiple properties simultaneously
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 同时动画多个属性
- en: Multiple properties can be animated on an object during a transition. To accomplish
    this, all that is required is to set multiple attributes after the call to `.transition()`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在过渡期间可以对对象上的多个属性进行动画。要完成此操作，只需在 `.transition()` 调用之后设置多个属性即可。
- en: 'As an example, the following code animates the position of the rectangle and
    its size over the five-second period:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码在五秒内动画化矩形的定位和大小：
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (7.2): [http://goo.gl/2qG0EV](http://goo.gl/2qG0EV)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (7.2): [http://goo.gl/2qG0EV](http://goo.gl/2qG0EV)'
- en: 'The code extends the previous example by animating not only the fill, but also
    by changing the position to move the rectangle along a diagonal, and modifying
    the size to make the rectangle half the width and height at the end of the transition:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 代码扩展了之前的示例，不仅动画化填充，还将位置改变为使矩形沿对角线移动，并修改大小，使矩形在过渡结束时宽度和高的一半：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The resulting animation looks like the following image, where the rectangle
    moves along the path of the arrows, while changing both, color and size:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 结果动画看起来如下所示，其中矩形沿着箭头的路径移动，同时改变颜色和大小：
- en: '![Animating multiple properties simultaneously](img/B04230_07_02.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![同时动画多个属性](img/B04230_07_02.jpg)'
- en: Delaying a transition
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 延迟过渡
- en: If you do not want an animation to start instantaneously, you can use a delay.
    A delay defers the start of the transition for the specified period of time.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想动画立即开始，可以使用延迟。延迟将过渡的开始延迟指定的时间。
- en: The following example defers the start of the transition for one second, then
    runs the transition for four seconds, completing the transition in an overall
    time of five seconds.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将过渡的开始延迟一秒，然后运行四秒的过渡，总共完成五秒的过渡。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (7.3): [http://goo.gl/Vyd6Pd](http://goo.gl/Vyd6Pd)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (7.3): [http://goo.gl/Vyd6Pd](http://goo.gl/Vyd6Pd)'
- en: 'The code for the preceding example is the same as the previous one except for
    the following lines:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 之前示例的代码与之前的代码相同，除了以下行：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creating chained transitions
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建链式过渡
- en: A single transition changes the properties between only one set of keyframes.
    However, it is possible to chain transitions together for providing multiple sequences
    of animations. The following example demonstrates the chaining of two transitions
    (and also a delay at the start).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 单个过渡只改变一组关键帧之间的属性。然而，可以将过渡链接起来，以提供多个动画序列。以下示例演示了两个过渡的链接（以及开始时的延迟）。
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (7.4): [http://goo.gl/IfYJmY](http://goo.gl/IfYJmY)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (7.4): [http://goo.gl/IfYJmY](http://goo.gl/IfYJmY)'
- en: 'The first transition is executed for two seconds and animates the size, color,
    and position of the rectangle to the middle of the SVG area. The second transition
    then moves the rectangle to the upper-right corner for another two seconds while
    still continuing to change its color and size. The total execution time remains
    five seconds:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个转换执行了二秒钟，并使矩形的大小、颜色和位置动画化到 SVG 区域的中间。然后第二个转换将矩形移动到右上角，持续另外二秒钟，同时继续改变其颜色和大小。总的执行时间保持为五秒钟：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Creating chained transitions](img/B04230_07_03.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![创建链式转换](img/B04230_07_03.jpg)'
- en: Handling the start and end events of transitions
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理转换的开始和结束事件
- en: It is possible to handle the start and end events of a transition using the
    `.each()` function. This is useful for ensuring that the starting or ending style
    is exactly what you desire at the start or end of the transition. This can be
    an issue when interpolators (covered in the next section) are at and exact expected
    value, where the start values are not known until the animation is running, or
    there are browser-specific issues that need to be addressed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `.each()` 函数可以处理转换的开始和结束事件。这对于确保转换的开始或结束样式与您期望的完全一致非常有用。当插值器（下一节将介绍）达到精确的预期值时，这可能会成为一个问题，此时起始值直到动画运行时才知道，或者存在需要解决的浏览器特定问题。
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An example of a browser issue is that of transparent colors being represented
    by `rgba(0,0,0,0)`. This is black but completely transparent. However, an animation
    using this will always start with fully opaque black. The start event can be used
    to patch up the color at the start of the animation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器问题的例子之一是透明颜色被表示为 `rgba(0,0,0,0)`。这是黑色，但完全透明。然而，使用这种颜色进行的动画始终以完全不透明的黑色开始。可以使用开始事件来修复动画开始时的颜色。
- en: 'The following example demonstrates hooking on to the start event of the first
    transition and the end event of the second transition by modifying the previous
    example:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例通过修改前一个示例，展示了如何连接到第一个转换的开始事件和第二个转换的结束事件：
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (7.5): [http://goo.gl/746hLo](http://goo.gl/746hLo)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (7.5): [http://goo.gl/746hLo](http://goo.gl/746hLo)'
- en: 'There are two fundamental changes in this example. The hooking on to the start
    event of the first transition changes the color of the rectangle to green. This
    causes the rectangle to flash from red to green just after the delay finishes:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，有两个基本的变化。第一个转换的开始事件的处理改变了矩形颜色为绿色。这导致矩形在延迟结束后从红色闪烁到绿色：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following code shows the second change, which reforms the rectangle to
    yellow at the end of the second animation:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了第二个变化，它将矩形在第二个动画结束时变为黄色：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that when using the `.each()` function, the function that is called loses
    the context of the selection, and does not know the current item. We can get that
    back using the call to `d3.select(this)`, which will return the current datum
    that the functions are being applied to.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当使用 `.each()` 函数时，被调用的函数会失去选择上下文，并且不知道当前项。我们可以通过调用 `d3.select(this)` 来恢复这一点，它将返回函数正在应用到的当前数据。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In my experience, I have found that the setting of attributes before and after
    transitions must use a consistent notation. If you use `.style()` prior to the
    transition, and then `.attr()` later, even on the same attribute, the transition
    will not work for that attribute. So, if you use `.style()` before `.transition()`,
    make sure to use `.style()` after (and vice versa for `.attr()`).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，我发现转换前后属性的设置必须使用一致的符号。如果你在转换之前使用 `.style()`，然后在之后使用 `.attr()`，即使是在相同的属性上，该属性上的转换也不会工作。所以，如果你在
    `.transition()` 之前使用 `.style()`，确保在之后使用 `.style()`（反之亦然对于 `.attr()`）。
- en: Changing the content and size of text using tweening
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用缓动改变文本的内容和大小
- en: '**Tweening** provides a means of telling D3.js the way to calculate property
    values during transitions without D3.js tracking the keyframes. Keyframes can
    be a performance issue when animating a large quantity of items, so tweening can
    help out in such situations.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**缓动**为 D3.js 提供了一种在转换期间计算属性值的方式，而不需要 D3.js 跟踪关键帧。当动画化大量项目时，关键帧可能会成为性能问题，因此缓动在这种情况下非常有帮助。'
- en: Tweening gives us the opportunity to connect in our own **interpolator** for
    providing values at each step during an animation. An interpolator is a function
    that is passed a single value between 0.0 and 1.0, which represents the current
    percentage of the transition completed. The implementation of the interpolator
    then uses this value to calculate the value at that point in time.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 缓动动画给了我们连接自己的**插值器**的机会，在动画的每个步骤中提供值。插值器是一个函数，它接收一个介于0.0和1.0之间的单个值，该值表示过渡完成的当前百分比。插值器的实现然后使用此值来计算该时间点的值。
- en: 'We will look at two examples of tweening. The first example, available at the
    following link, animates the value of a text item from 0 to 10 over a period of
    ten seconds:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨两个缓动动画的示例。第一个示例可在以下链接中找到，它在一个十秒的周期内将文本项的值从0动画到10：
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (7.6): [http://goo.gl/SlWBdp](http://goo.gl/SlWBdp)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (7.6): [http://goo.gl/SlWBdp](http://goo.gl/SlWBdp)'
- en: 'This is actually something that cannot be done using attribute animation. We
    must call the `.text()` function of the DOM element to set the text, so we cannot
    use that technique to animate the change in content. We have to use tweening.
    The following snippet from the example creates the tween that sets the text content
    during the animation:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是一些不能使用属性动画来完成的事情。我们必须调用DOM元素的`.text()`函数来设置文本，因此我们不能使用那种技术来动画化内容的改变。我们必须使用缓动动画。以下示例代码片段创建了一个在动画过程中设置文本内容的缓动动画：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first parameter to `.tween()` is simply a name for this tween. The second
    parameter is a factory function which returns another function to D3.js that will
    be called at each step during the transition, passing it the current percentage
    of transition completed.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`.tween()`的第一个参数只是这个缓动的名称。第二个参数是一个工厂函数，它返回一个函数给D3.js，该函数将在过渡的每个步骤中被调用，传递给它过渡完成的当前百分比。'
- en: The factory function is called once for each datum at the start of the animation.
    The function it returns is called repeatedly, and uses the `d3.interpolateRound()`
    function to return rounded numbers between 0 and 10 based upon the value of `t`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂函数在动画开始时为每个数据项调用一次。它返回的函数会被重复调用，并使用`d3.interpolateRound()`函数根据`t`的值返回介于0和10之间的舍入数字。
- en: 'There are a number of interpolation functions provided by D3.js, such as:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js提供了一些插值函数，例如：
- en: '`d3.interpolateNumber`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.interpolateNumber`'
- en: '`d3.interpolateRound`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.interpolateRound`'
- en: '`d3.interpolateString`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.interpolateString`'
- en: '`d3.interpolateRgb`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.interpolateRgb`'
- en: '`d3.interpolateHsl`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.interpolateHsl`'
- en: '`d3.interpolateLab`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.interpolateLab`'
- en: '`d3.interpolateHcl`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.interpolateHcl`'
- en: '`d3.interpolateArray`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.interpolateArray`'
- en: '`d3.interpolateObject`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.interpolateObject`'
- en: '`d3.interpolateTransform`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.interpolateTransform`'
- en: '`d3.interpolateZoom`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.interpolateZoom`'
- en: 'D3.js also has a function `d3.interpolate(a, b)`, which returns the appropriate
    interpolation function from the previous list based upon the type of the end value
    `b`, using the following algorithm:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js还有一个函数`d3.interpolate(a, b)`，它根据最终值`b`的类型，从上一个列表中返回适当的插值函数，使用以下算法：
- en: If `b` is a color, `interpolateRgb` is used
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`b`是一个颜色，则使用`interpolateRgb`
- en: If `b` is a string, `interpolateString` is used
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`b`是一个字符串，则使用`interpolateString`
- en: If `b` is an array, `interpolateArray` is used
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`b`是一个数组，则使用`interpolateArray`
- en: If `b` is an object and not coercible to a number, `interpolateObject` is used
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`b`是一个对象且不能转换为数字，则使用`interpolateObject`
- en: Otherwise, `interpolateNumber` is used
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，使用`interpolateNumber`
- en: 'For a demonstration of `d3.interpolate()` and some of the underlying smarts,
    open the following example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要演示`d3.interpolate()`和一些底层智能，请打开以下示例：
- en: Note
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (7.7): [http://goo.gl/792lpH](http://goo.gl/792lpH)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (7.7): [http://goo.gl/792lpH](http://goo.gl/792lpH)'
- en: This example uses the `.styleTween()` function to change the font property of
    the style for the piece of text, increasing the size of the font from 12 px to
    36 px over five seconds.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例使用`.styleTween()`函数来改变文本样式的字体属性，在五秒内将字体大小从12 px增加到36 px。
- en: '![Changing the content and size of text using tweening](img/B04230_07_04.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![使用缓动动画改变文本内容和大小](img/B04230_07_04.jpg)'
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `.styleTween()` function operates in a way similar to `.tween()` except
    that the first parameter specifies the name of the property that will be set to
    the value which is returned by the interpolation function provided by the factory
    method. There is also a `.attrTween()` function that does the same but on an attribute
    instead of a style.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`.styleTween()` 函数的操作方式与 `.tween()` 类似，除了第一个参数指定了将被设置为通过工厂方法提供的插值函数返回的值的属性名称。还有一个
    `.attrTween()` 函数，它执行相同的操作，但是在属性上而不是在样式上。'
- en: The function `d3.interpolate()` is smart enough to determine that it should
    use `d3.interpolateString()`, and to identify that the two strings represent a
    font size and name besides performing the appropriate interpolation.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`d3.interpolate()` 函数足够智能，可以确定应该使用 `d3.interpolateString()`，并且可以识别出这两个字符串代表字体大小和名称，除了执行适当的插值。'
- en: Timers
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定时器
- en: D3.js manages transitions using timers that internally schedule the code to
    be run at a specific time. These timers are also exposed for your use.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 使用定时器来管理过渡，这些定时器内部安排代码在特定时间运行。这些定时器也对外公开供你使用。
- en: A timer can be created using `d3.timer(yourFunction, [delay], [mark])`, which
    takes a function to be called, a delay, and a starting time. This starting time
    is referred to as the **mark**, and it has a default value of `Date.now`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `d3.timer(yourFunction, [delay], [mark])` 可以创建一个定时器，它接受一个要调用的函数、一个延迟和一个起始时间。这个起始时间被称为
    **mark**，其默认值为 `Date.now`。
- en: D3.js timers are not executed at regular intervals—they are not periodic timers.
    Timers start execution at the time specified by `mark + delay`. The function will
    then be called as frequently as possible by D3.js, until the function it calls
    returns `true`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 定时器不是以固定间隔执行——它们不是周期性定时器。定时器在 `mark + delay` 指定的时间开始执行。然后，D3.js 将尽可能频繁地调用该函数，直到它调用的函数返回
    `true`。
- en: 'The use of `mark` and `delay` can allow very specific declaration of time for
    starting execution. As an example, the following command schedules an event four
    hours prior to September 1, 2015:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `mark` 和 `delay` 可以允许非常具体地声明启动执行的时间。例如，以下命令安排了一个在2015年9月1日之前四小时的事件：
- en: '[PRE8]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To implement a one-shot timer, simply return `true` from the first call of the
    function.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现一次性定时器，只需在函数第一次调用时返回 `true`。
- en: As a final note on timers, if you want to use a timer to alert you on a regular
    basis, it is often better to use the JavaScript built-in function `setInterval()`.
    We will examine using a timer on a periodic basis in the following section.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 关于定时器的最后一点，如果你想定期使用定时器来提醒你，通常更好的做法是使用JavaScript内置的 `setInterval()` 函数。我们将在下一节中检查定期使用定时器。
- en: Adding a fifth dimension to a bubble plot – time
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在气泡图中添加第五维——时间
- en: Now let's apply everything we have learned about animation to some real data.
    We are going to revisit our bubble plot visualization from [Chapter 6](ch06.html
    "Chapter 6. Creating Scatter and Bubble Plots"), C*reating Scatter and Bubble
    Plots*, expanding the set of data from a single year (2013) to all the available
    years (1960 through 2013). We will modify the rendering of the visual to periodically
    update and animate the bubbles into new position and sizes based upon the change
    in the values of the data.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将我们所学到的关于动画的知识应用到一些真实数据上。我们将回顾第6章中关于[创建散点图和气泡图](ch06.html "第6章。创建散点图和气泡图")的气泡图可视化，从单一年份（2013）的数据集扩展到所有可用的年份（1960年至2013年）。我们将修改视觉呈现，使其定期更新并基于数据值的变化将气泡动画到新的位置和大小。
- en: The expanded data set is available at [https://goo.gl/rC5WS0](https://goo.gl/rC5WS0).
    The fundamental difference is the inclusion of a year column, and data covering
    54 years.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展的数据集可在[https://goo.gl/rC5WS0](https://goo.gl/rC5WS0)找到。基本区别是包含了一个年份列，以及涵盖54年的数据。
- en: 'The code for and the demo of the example is available at the following link:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 示例的代码和演示可在以下链接找到：
- en: Note
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (7.7): [http://goo.gl/iYCNbG](http://goo.gl/iYCNbG)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (7.7): [http://goo.gl/iYCNbG](http://goo.gl/iYCNbG)'
- en: 'When you run this, you will see a smooth animation of the data over the years.
    It is obviously impossible to show this effectively in a static medium such as
    a book. But for demonstration, I have provided screenshots of the visualization
    at the start of each decade, except for 2010, which is substituted with the year
    2013:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个命令时，你会看到数据随年份变化的平滑动画。显然，在像书籍这样的静态媒介中很难有效地展示这一点。但为了演示，我在每个十年开始时提供了可视化的截图，除了2010年，它被替换为2013年：
- en: '![Adding a fifth dimension to a bubble plot – time](img/B04230_07_05.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![将第五维添加到气泡图 - 时间](img/B04230_07_05.jpg)'
- en: As the years advance, there is a strong tendency for all the countries towards
    an increased lifespan as well as decrease in fertility. This happens at a different
    pace for different countries. But it gives you a really good sense that something
    is going on that is causing this effect. Deciphering the plot is further made
    easier due to the addition of this extra dimension of time to the bubble plot.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 随着年份的推进，所有国家都有向增加预期寿命以及降低生育率的方向发展的强烈趋势。不同国家的发展速度不同。但它确实给人一种强烈的印象，即某种正在发生的事情导致了这种效果。由于在气泡图中添加了时间这一额外维度，解读图表变得更加容易。
- en: 'Now let''s examine how this is implemented in the example. A good portion of
    the code is identical to that of the example from [Chapter 6](ch06.html "Chapter 6. Creating
    Scatter and Bubble Plots"), *Creating Scatter and Bubble Plots*, which it is based
    upon. The loading and cleansing of the data is slightly different due to a different
    URL and the need to process the `Year` column in the data:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来检查这是如何在示例中实现的。大部分代码与[第6章](ch06.html "第6章。创建散点图和气泡图")中的示例相同，即*创建散点图和气泡图*，它基于此示例。由于URL不同以及需要处理数据中的`Year`列，因此数据的加载和清洗略有不同：
- en: '[PRE9]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will be rendering each year of data one at a time. As a part of this, we
    will need to extract only the data for each specific year. There are a number
    of ways that we can go about this. D3.js provides a very powerful function to
    do this for us: `d3.nest()`. This function pivots the `Year` column into the index
    of an associative array:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐个渲染每年的数据。作为这个过程的一部分，我们只需要提取每个特定年份的数据。我们可以以多种方式做到这一点。D3.js提供了一个非常强大的函数来帮我们完成这个任务：`d3.nest()`。此函数将`Year`列旋转为关联数组的索引：
- en: '[PRE10]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can then access all the data for a particular year using array semantics
    such as `nested[1975]`, which will give us the data (only the rows) for just 1975.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用数组语义（如`nested[1975]`）访问特定年份的所有数据，这将给我们1975年的数据（只有行）。
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more info on `d3.nest()`, see [https://github.com/mbostock/d3/wiki/Arrays#-nest](https://github.com/mbostock/d3/wiki/Arrays#-nest).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于`d3.nest()`的信息，请参阅[https://github.com/mbostock/d3/wiki/Arrays#-nest](https://github.com/mbostock/d3/wiki/Arrays#-nest)。
- en: 'The code is then identical through the creation of the axes. The next new piece
    of code is to add a text label on the graph to show the year that the data represents.
    This is positioned in the lower-left corner of the area where the bubbles will
    be rendered:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 代码在创建轴时保持一致。接下来新的代码片段是在图表上添加一个文本标签来显示数据所代表的年份。这个标签位于将要渲染气泡的区域左下角：
- en: '[PRE11]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then a group is created to contain the bubbles. The rendering function will
    select this group each time it is called:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建一个组来包含气泡。渲染函数将在每次被调用时选择这个组：
- en: '[PRE12]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This marks the beginning of the code that renders and animates the bubbles.
    It starts by declaring the interval for which each year should be drawn (10 times
    per second):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着渲染和动画气泡的代码的开始。它首先声明了每个年份应该绘制的间隔（每秒10次）：
- en: '[PRE13]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Since the bubbles must be repeatedly rendered, we create a function that can
    be called to render the bubbles for just a specified year:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 由于气泡必须反复渲染，我们创建了一个函数，可以调用以仅渲染指定年份的气泡：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This function first extracts the rows for the specific year, and then binds
    the data to the circles in the `bubblesHolder` group. The call to `.data()` also
    specifies that `CountryCode` will be used as the key. This is very important,
    because as we move from year to year, D3.js will use this to map the existing
    bubbles to the new data, making decisions based on this the key on which to enter-update-exit
    the circles.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数首先提取特定年份的行，然后将数据绑定到`bubblesHolder`组中的圆圈。对`.data()`的调用还指定了`CountryCode`将用作键。这非常重要，因为当我们从一年移动到另一年时，D3.js将使用此键将现有的气泡映射到新数据，并基于此键做出决策，以确定如何进入-更新-退出圆圈。
- en: 'The next statement executes the enter function creating new circles and calling
    a function to set the various attributes of the circles:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个语句执行enter函数，创建新的圆圈并调用一个函数来设置圆圈的各个属性：
- en: '[PRE15]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We use a function, as this is also used by the code to update. Finally, there
    is a case where occasionally a country disappears from the data, so we will remove
    any bubbles in the scenario.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个函数，因为代码也用它来更新。最后，偶尔会有一个国家从数据中消失，所以我们将删除任何在这种情况下的气泡。
- en: 'The final thing we need to do is perform the time animation. This is done by
    iterating through each year at the specified interval. To do this, we need to
    know the start and ending year, which we can obtain with the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的最后一件事是执行时间动画。这是通过在指定间隔内迭代每个年份来完成的。为此，我们需要知道起始年份和结束年份，我们可以通过以下方式获得：
- en: '[PRE16]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This follows with setting a variable for the current year and rendering that
    year:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步是设置一个变量来表示当前年份，并渲染该年份：
- en: '[PRE17]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we create a function to be called by a timer. This function returns another
    function which increments the year, and if the year is less than the max year,
    calls render again, and then schedules another timer instance to run at an interval
    of milliseconds. This pattern effectively uses a series of D3.js timers for implementing
    the periodic timer:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们创建一个由计时器调用的函数。这个函数返回另一个函数，它增加年份，如果年份小于最大年份，则再次调用渲染，然后安排另一个计时器实例以毫秒为间隔运行。这种模式有效地使用了一系列D3.js计时器来实现周期性计时器：
- en: '[PRE18]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this code returns `true` every time it is called. This makes it a
    one-shot timer. But before returning `true`, if we need to render another year,
    we start another timer.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此代码每次调用时都返回`true`。这使得它成为一个一次性计时器。但在返回`true`之前，如果我们需要渲染另一年，我们将启动另一个计时器。
- en: 'The last thing to be done is to start the timer for the first time:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要完成的事情是启动计时器：
- en: '[PRE19]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned the fundamentals of animation in D3.js, and by
    the end of the chapter, applied these simple concepts to make what appears to
    be a very complex data visualization.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了D3.js中动画的基础知识，并在本章结束时，将这些简单概念应用于制作看似非常复杂的数据可视化。
- en: We started with examples of transitions, using them to animate attributes from
    one state to another across an interval of time, and chaining animations together.
    Next we looked at handling animation without keyframes using tweening. We also
    took a quick look at interpolation.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从过渡的例子开始，使用它们在一段时间内将属性从一个状态动画到另一个状态，并将动画链接在一起。接下来，我们探讨了不使用关键帧处理动画的方法，即使用tweening。我们还快速浏览了插值的概念。
- en: We finished by examining timers, and then applied all the concepts of the chapter
    to progressively render a large set of data, giving the viewer of the visualization
    a sense of how data changes by animating time.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过检查计时器结束，然后应用本章的所有概念，逐步渲染大量数据，给可视化观看者一种通过动画时间来观察数据变化的感觉。
- en: In the next chapter, we will examine changing the visuals when the user interacts
    with the application, learning concepts such as the dragging and filtering of
    data based upon interactive events.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨当用户与应用程序交互时更改视觉效果的技巧，学习基于交互事件的数据拖拽和过滤等概念。
