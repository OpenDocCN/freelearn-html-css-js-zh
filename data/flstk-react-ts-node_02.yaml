- en: '*Chapter 1*: Understanding TypeScript'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第1章*：理解TypeScript'
- en: JavaScript is an enormously popular and powerful language. According to GitHub,
    it is the most popular language in the world (yes, used even more than Python),
    and the new features in ES6+ continue to add useful capabilities. However, for
    large application development, its feature set is considered to be incomplete.
    This is why TypeScript was created.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种非常流行和强大的语言。根据GitHub的数据，它是世界上最流行的语言（是的，甚至比Python更多），ES6+中的新功能继续增加有用的功能。然而，对于大型应用程序开发来说，其功能集被认为是不完整的。这就是为什么TypeScript被创建的原因。
- en: In this chapter, we'll learn about the TypeScript language, why it was created,
    and what value it provides to JavaScript developers. We'll learn about the design
    philosophy Microsoft used in creating TypeScript and why these design decisions
    added important support in the language for large application development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解TypeScript语言，它是如何创建的，以及它为JavaScript开发人员提供了什么价值。我们将了解Microsoft在创建TypeScript时使用的设计哲学，以及为什么这些设计决策为大型应用程序开发提供了重要的支持。
- en: We'll also see how TypeScript enhances and improves upon JavaScript. We'll compare
    and contrast the JavaScript way of writing code with TypeScript. TypeScript has
    a wealth of cutting-edge features to benefit developers. Chief among them are
    static typing and **Object-Oriented Programming** (**OOP**) capabilities. These
    features can make for code that is higher quality and easier to maintain.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将看到TypeScript如何增强和改进JavaScript。我们将比较JavaScript编写代码的方式与TypeScript的区别。TypeScript具有丰富的前沿功能，有利于开发人员。其中最重要的是静态类型和**面向对象编程**（**OOP**）能力。这些功能可以使代码质量更高，更易于维护。
- en: By the end of this chapter, you will understand some of the limitations of JavaScript
    that make it difficult to use in large projects. You will also understand how
    TypeScript fills in some of those gaps and makes writing large, complex applications
    easier and less prone to error.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您将了解JavaScript的一些限制，这些限制使其在大型项目中难以使用。您还将了解TypeScript如何填补其中的一些空白，并使编写大型、复杂的应用程序更容易，更不容易出错。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: What is TypeScript?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是TypeScript？
- en: Why is TypeScript necessary?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么需要TypeScript？
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In order to take full advantage of this chapter, you should have a basic understanding
    of JavaScript version ES5 or higher and some experience with building web applications
    with a JavaScript framework. You'll also need to install Node and a JavaScript
    code editor, such as **Visual Studio Code** (**VSCode**).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用本章，您应该对JavaScript版本ES5或更高版本有基本了解，并具有使用JavaScript框架构建Web应用程序的经验。您还需要安装Node和JavaScript代码编辑器，如**Visual
    Studio Code**（**VSCode**）。
- en: You can find the GitHub repository for this chapter at [https://github.com/PacktPublishing/Full-Stack-React-TypeScript-and-Node](https://github.com/PacktPublishing/Full-Stack-React-TypeScript-and-Node).
    Use the code in the `Chap1` folder.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/PacktPublishing/Full-Stack-React-TypeScript-and-Node](https://github.com/PacktPublishing/Full-Stack-React-TypeScript-and-Node)找到本章的GitHub存储库。使用`Chap1`文件夹中的代码。
- en: What is TypeScript?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是TypeScript？
- en: 'TypeScript is actually two distinct but related technologies – a language and
    a compiler:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript实际上是两种不同但相关的技术 - 一种语言和一种编译器：
- en: The language is a feature-rich, statically typed programming language that adds
    true object-oriented capabilities to JavaScript.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该语言是一种功能丰富的静态类型编程语言，为JavaScript添加了真正的面向对象的能力。
- en: The compiler converts TypeScript code into native JavaScript, but also provides
    the programmer with assistance in writing code with fewer errors.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译器将TypeScript代码转换为本机JavaScript，但也为程序员在编写代码时提供了帮助，减少了错误。
- en: TypeScript enables the developer to design software that's of a higher quality.
    The combination of the language and the compiler enhances the developer's capabilities.
    By using TypeScript, a developer can write code that is easier to understand and
    refactor and contains fewer bugs. Additionally, it adds discipline to the development
    workflow by forcing errors to be fixed while still in development.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript使开发人员能够设计更高质量的软件。语言和编译器的结合增强了开发人员的能力。通过使用TypeScript，开发人员可以编写更易于理解和重构、包含更少错误的代码。此外，它通过在开发过程中强制修复错误，为开发工作流程增加了纪律性。
- en: TypeScript is a development-time technology. There is no runtime component and
    no TypeScript code ever runs on any machine. Instead, the TypeScript compiler
    converts TypeScript into JavaScript and that code is then deployed and run on
    browsers or servers. It's possible that Microsoft considered developing a runtime
    for TypeScript. However, unlike the operating system market, Microsoft does not
    control the ECMAScript standards body (the group that decides what will be in
    each version of JavaScript). So, getting buy-in from that group would have been
    difficult and time-consuming. Instead, Microsoft decided to create a tool that
    enhances a JavaScript developer's productivity and code quality.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript是一种开发时技术。它没有运行时组件，也没有任何TypeScript代码在任何机器上运行。相反，TypeScript编译器将TypeScript转换为JavaScript，然后部署和运行该代码在浏览器或服务器上。微软可能考虑开发TypeScript的运行时。然而，与操作系统市场不同，微软并不控制ECMAScript标准组织（决定JavaScript每个版本中将包含什么内容的组织）。因此，获得该组织的支持将是困难且耗时的。因此，微软决定创建一个工具，增强JavaScript开发人员的生产力和代码质量。
- en: So then, if TypeScript has no runtime, how do developers get running code? TypeScript
    uses a process called transpilation. **Transpilation** is a method where code
    from one language is "compiled" or converted into another language. What this
    means is that all TypeScript code ultimately is converted into JavaScript code
    before it is finally deployed and run.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果TypeScript没有运行时，开发人员如何获得运行代码呢？TypeScript使用一种称为**转译**的过程。**转译**是一种将一种语言的代码“编译”或转换为另一种语言的方法。这意味着所有TypeScript代码最终都会在最终部署和运行之前转换为JavaScript代码。
- en: In this section, we've learned what TypeScript is and how it works. In the next
    section, we'll learn about why these features are necessary for building large,
    complex applications.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经学习了TypeScript是什么以及它是如何工作的。在下一节中，我们将学习为什么这些特性对于构建大型复杂应用程序是必要的。
- en: Why is TypeScript necessary?
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么需要TypeScript？
- en: The JavaScript programming language was created by Brendan Eich and was added
    to the Netscape browser in 1995\. Since that time, JavaScript has enjoyed enormous
    success and is now used to build server and desktop apps as well. However, this
    popularity and ubiquity have turned out to be a problem as well as a benefit.
    As larger and larger apps have been created, developers have started to notice
    the limitations of the language.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript编程语言是由Brendan Eich创建的，并于1995年添加到Netscape浏览器中。从那时起，JavaScript取得了巨大的成功，现在被用于构建服务器和桌面应用程序。然而，这种流行和普及也成为了一个问题和一个好处。随着越来越大的应用程序被创建，开发人员开始注意到这种语言的局限性。
- en: Large application development has greater needs than the browser development
    JavaScript was first created for. At a high level, almost all large application
    development languages, such as Java, C++, C#, and so on, provide static typing
    and OOP capabilities. In this section, we'll go over the advantages of static
    typing over JavaScript's dynamic typing. We'll also learn about OOP and why JavaScript's
    method of doing OOP is too limited to use for large apps.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 大型应用程序开发需要比JavaScript最初创建的浏览器开发更多的需求。在高层次上，几乎所有大型应用程序开发语言，比如Java、C++、C#等，都提供静态类型和面向对象编程能力。在本节中，我们将讨论静态类型相对于JavaScript动态类型的优势。我们还将了解面向对象编程，以及为什么JavaScript的面向对象编程方法对于大型应用程序来说太有限。
- en: 'But first, we''ll need to install a few packages and programs to allow our
    examples. To do this, follow these instructions:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，我们需要安装一些包和程序来允许我们的示例。要做到这一点，请按照以下说明操作：
- en: 'Let''s install Node first. You can download Node from here: [https://nodejs.org/](https://nodejs.org/).
    Node gives us `npm`, which is a JavaScript dependency manager that will allow
    us to install TypeScript. We''ll dive deep into Node in [*Chapter 8*](B15508_08_Final_JC_ePub.xhtml#_idTextAnchor122),
    *Learning Server-Side Development with Node.js and Express*.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先让我们安装Node。你可以从这里下载Node：[https://nodejs.org/](https://nodejs.org/)。Node给我们提供了`npm`，这是一个JavaScript依赖管理器，它将允许我们安装TypeScript。我们将在[*第8章*](B15508_08_Final_JC_ePub.xhtml#_idTextAnchor122)中深入学习Node，*使用Node.js和Express学习服务器端开发*。
- en: Install VSCode. It is a free code editor and its high-quality and rich features
    have quickly made it the standard development application for writing JavaScript
    code on any platform. You can use any code editor you like, but I will use VSCode
    extensively in this book.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装VSCode。它是一个免费的代码编辑器，其高质量和丰富的功能使其迅速成为了在任何平台上编写JavaScript代码的标准开发应用程序。你可以使用任何你喜欢的代码编辑器，但我会在本书中广泛使用VSCode。
- en: Create a folder in your personal directory called `HandsOnTypeScript`. We'll
    save all our project code into this folder.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的个人目录中创建一个名为`HandsOnTypeScript`的文件夹。我们将把所有项目代码保存在这个文件夹中。
- en: Important Note
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you don't want to type the code yourself, you can download the full source
    code as mentioned in the *Technical requirements* section.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想自己输入代码，你可以按照*技术要求*部分提到的方式下载完整的源代码。
- en: Inside `HandsOnTypeScript`, create another folder called `Chap1`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HandsOnTypeScript`中，创建另一个名为`Chap1`的文件夹。
- en: Open VSCode and go to **File** | **Open**, and then open the **Chap1** folder
    you just created. Then, select **View** | **Terminal** and enable the terminal
    window within your VSCode window.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开VSCode，转到**文件** | **打开**，然后打开你刚创建的**Chap1**文件夹。然后，选择**视图** | **终端**，在你的VSCode窗口内启用终端窗口。
- en: 'Type the following command into the terminal. This command will initialize
    your project so that it can accept `npm` package dependencies. You''ll need this
    because TypeScript is downloaded as an `npm` package:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中输入以下命令。这个命令将初始化你的项目，以便它可以接受`npm`包依赖。你需要这个因为TypeScript是作为`npm`包下载的：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should see a screen like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个像这样的屏幕：
- en: '![Figure 1.1 – npm init screen'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.1 – npm初始化屏幕'
- en: '](img/Figure1.1_B15508.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure1.1_B15508.jpg)'
- en: Figure 1.1 – npm init screen
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – npm初始化屏幕
- en: You can accept the defaults for all the prompts as we will only install TypeScript
    for now.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以接受所有提示的默认值，因为我们现在只安装TypeScript。
- en: 'Install TypeScript with the following command:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装TypeScript：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After all the items have been installed, your VSCode screen should look like
    this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有项目都安装完成后，你的VSCode屏幕应该看起来像这样：
- en: '![Figure 1.2 – VSCode after setup is complete'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.2 – 安装完成后的VSCode'
- en: '](img/Figure1.2_B15508.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure1.2_B15508.jpg)'
- en: Figure 1.2 – VSCode after setup is complete
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 安装完成后的VSCode
- en: We've finished installing and setting up our environment. Now, we can take a
    look at some examples that will help us better understand the benefits of TypeScript.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了安装和设置环境。现在，我们可以看一些示例，这些示例将帮助我们更好地理解TypeScript的好处。
- en: Dynamic versus static typing
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态与静态类型
- en: Every programming language has and makes use of types. A type is simply a set
    of rules that describe an object and can be reused. JavaScript is a dynamically
    typed language. In JavaScript, new variables do not need to declare their type
    and even after they are set, they can be reset to a different type. This feature
    adds awesome flexibility to the language, but it is also the source of many bugs.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 每种编程语言都有并且使用类型。类型只是描述对象并且可以被重用的一组规则。JavaScript是一种动态类型语言。在JavaScript中，新变量不需要声明它们的类型，即使在设置后，它们也可以被重置为不同的类型。这个特性为语言增加了灵活性，但也是许多bug的根源。
- en: 'TypeScript uses a better alternative called **static typing**. Static typing
    forces the developer to indicate the type of a variable up front, when they create
    it. This removes ambiguity and eliminates many conversion errors between types.
    In the following steps, we''ll take a look at some examples of the pitfalls of
    dynamic typing and how TypeScript''s static typing can eliminate them:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript使用了一个更好的替代方案叫做**静态类型**。静态类型强制开发人员在创建变量时提前指定变量的类型。这消除了歧义，并消除了许多类型之间的转换错误。在接下来的步骤中，我们将看一些动态类型的缺陷示例，以及TypeScript的静态类型如何消除它们：
- en: 'On the root of the `Chap1` folder, let''s create a file called `string-vs-number.ts`.
    The `.ts` file extension is a TypeScript specific extension and allows the TypeScript
    compiler to recognize the file and transpile it into JavaScript. Next, enter the
    following code into the file and save it:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chap1`文件夹的根目录下，让我们创建一个名为`string-vs-number.ts`的文件。`.ts`文件扩展名是TypeScript特有的扩展名，允许TypeScript编译器识别该文件并将其转译为JavaScript。接下来，将以下代码输入到文件中并保存：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, in the terminal, type the following:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在终端中，输入以下内容：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once you run the `tsc` command, you should see a new file, `string-vs-number.js`,
    in the same folder. Let''s run this file:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你运行了`tsc`命令，你应该会在同一个文件夹中看到一个新文件`string-vs-number.js`。让我们运行这个文件：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: a number variable into a string and appends it to variable b. This situation
    may seem unlikely in real-world code but if left unchecked it could occur, because
    in web development, most inputs coming in from HTML come in as strings—even if
    the user types a number.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个数字变量转换为字符串，并将其附加到变量b。这种情况在现实世界的代码中似乎不太可能发生，但如果不加以检查，它可能会发生，因为在Web开发中，大多数来自HTML的输入都以字符串形式输入，即使用户输入的是一个数字。
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let''s introduce TypeScript''s static typing into this code and see what
    happens. First, let''s delete the `.js` file, as the TypeScript compiler may consider
    there to be two copies of the `a` and `b` variables. Take a look at this code:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将TypeScript的静态类型引入到这段代码中，看看会发生什么。首先，让我们删除`.js`文件，因为TypeScript编译器可能会认为`a`和`b`变量有两个副本。看看这段代码：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you run the `tsc` compiler on this code, you will get the error `Type "''6''"
    is not assignable to the type ''number''`. This is exactly what we want. The compiler
    tells us that there is an error in our code and prevents the compilation from
    successfully compiling. Since we indicated that both variables are supposed to
    be numbers, the compiler checks for that and complains when it finds it not to
    be true. So, if we fix this code and set `b` to be a number, let''s see what happens:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在这段代码上运行`tsc`编译器，你会得到错误`Type "'6'" is not assignable to the type 'number'`。这正是我们想要的。编译器告诉我们代码中有一个错误，并阻止了成功编译。由于我们指示这两个变量应该是数字，编译器会检查并在发现不符合时进行投诉。因此，如果我们修复这段代码并将`b`设置为一个数字，让我们看看会发生什么：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, if you run the compiler, it will complete successfully, and running the
    JavaScript will result in the value `11`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你运行编译器，它将成功完成，并且运行JavaScript将得到值`11`：
- en: '![Figure 1.3 – Valid numbers addition'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.3 - 有效数字相加'
- en: '](img/Figure1.3_B15508.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure1.3_B15508.jpg)'
- en: Figure 1.3 – Valid numbers addition
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 - 有效数字相加
- en: Great, when we set `b` incorrectly, TypeScript caught our error and prevented
    it from being used at runtime.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，当我们错误地设置`b`时，TypeScript捕获了我们的错误，并阻止了它在运行时被使用。
- en: 'Let''s look at another more complex example, as it''s like what you might see
    in larger app code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个更复杂的例子，因为它就像你可能在更大的应用代码中看到的那样：
- en: 'Let''s create a new `.ts` file called `test-age.ts` and add the following code
    to it:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`test-age.ts`的新`.ts`文件，并将以下代码添加到其中：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see, the code has a function that checks the age of a user and determines,
    based on that age, whether they are allowed to drive. After the function definition,
    we see that a user is created, but with no age property. Let's pretend that the
    developer wanted to fill that in later based on user input. Now, below that user
    creation, the `canDrive` function is called and it claims the user is not allowed
    to drive. If it turned out that user `tom` was over 16 years old and this function
    triggered another action to be taken based on the user's age, obviously this could
    lead to a whole host of issues.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，代码中有一个函数，用于检查用户的年龄，并根据年龄确定他们是否被允许驾驶。在函数定义之后，我们看到创建了一个用户，但没有年龄属性。假设开发人员希望稍后根据用户输入填写该属性。现在，在用户创建下面，调用了`canDrive`函数，并声称用户不被允许驾驶。如果事实证明用户`tom`已经超过16岁，并且该函数触发了基于用户年龄采取其他行动，显然这可能会导致一系列问题。
- en: 'There are ways in JavaScript to deal with this problem, or at least partially.
    We could use a `for` loop to iterate through all of the property key names of
    the user object and check for an `age` name. Then, we could throw an exception
    or have some other error handler to deal with this issue. However, if we had to
    do this on every function, it would become inefficient and onerous very quickly.
    Additionally, we would be doing these checks while the code is running. Obviously,
    for these errors, we would prefer catching them before they make it out to users.
    TypeScript provides a simple solution to this issue and catches the error before
    the code even makes it into production. Take a look at the following updated code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中有方法来解决这个问题，或者至少部分解决。我们可以使用`for`循环来迭代用户对象的所有属性键名，并检查是否有`age`名称。然后，我们可以抛出异常或使用其他错误处理程序来处理此问题。但是，如果我们必须在每个函数中都这样做，那么效率会很低，负担也会很重。此外，我们将在代码运行时进行这些检查。显然，对于这些错误，我们更希望在它们传递给用户之前捕获它们。TypeScript为这个问题提供了一个简单的解决方案，并在代码甚至进入生产之前捕获错误。看看下面更新的代码：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s go through this updated code. At the top, we see something called an
    interface and it is given a name of `User`. An interface is one possible kind
    of type in TypeScript. I''ll detail interfaces and other types in later chapters,
    but for now, let''s just take a look at this example. The `User` interface has
    the two fields that we need: `name` and `age`. Now, below that, we see that our
    `canDrive` function''s `usr` parameter has a colon and the `User` type on it.
    This is called a type annotation and it means that we are telling the compiler
    only to allow parameters of the `User` type to be given to `canDrive`. Therefore,
    when I try and compile this code with TypeScript, the compiler complains that
    when `canDrive` is called, `age` is missing from the passed-in parameter, because
    our `tom` object does not have that property:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下这个更新后的代码。在顶部，我们看到一个叫做接口的东西，它被命名为`User`。在TypeScript中，接口是一种可能的类型。我将在后面的章节中详细介绍接口和其他类型，但现在，让我们看一下这个例子。`User`接口有我们需要的两个字段：`name`和`age`。现在，在下面，我们看到我们的`canDrive`函数的`usr`参数有一个冒号和`User`类型。这被称为类型注解，它意味着我们告诉编译器只允许将`User`类型的参数传递给`canDrive`。因此，当我尝试使用TypeScript编译这段代码时，编译器抱怨说在调用`canDrive`时，传入的参数缺少`age`，因为我们的`tom`对象没有这个属性：
- en: '![Figure 1.4 – canDrive error'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.4 – canDrive错误'
- en: '](img/Figure1.4_B15508.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure1.4_B15508.jpg)'
- en: Figure 1.4 – canDrive error
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – canDrive错误
- en: 'So, once again, the compiler has caught our error. Let''s fix this issue by
    giving `tom` a type:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，编译器再次捕捉到了我们的错误。让我们通过给`tom`一个类型来解决这个问题：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we give `tom` a type of `User`, but do not add the required `age` property,
    we get the following error:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们给`tom`一个`User`类型，但没有添加必需的`age`属性，我们会得到以下错误：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: interface User {
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 用户接口 {
- en: 'name: string;'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: 'age: number;'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 'age: number;'
- en: '}'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'function canDrive(usr: User) {'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 'function canDrive(usr: User) {'
- en: console.log("user is", usr.name);
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("user is", usr.name);
- en: if(usr.age >= 16) {
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: if(usr.age >= 16) {
- en: console.log("allow to drive");
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("allow to drive");
- en: '} else {'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: console.log("do not allow to drive");
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("do not allow to drive");
- en: '}'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // let's pretend sometime later someone else uses the   //function canDrive
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: // 假设过了一段时间，其他人使用了canDrive函数
- en: 'const tom: User = {'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 'const tom: User = {'
- en: 'name: "tom",'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: "tom",'
- en: 'age: 25'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 'age: 25'
- en: '}'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: canDrive (tom);
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: canDrive(tom);
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here''s a screenshot of the output once this fix is made and the code is run
    again:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进行了这个修复并且重新运行代码，这个输出的截图如下：
- en: '![Figure 1.5 – canDrive successful result'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.5 – canDrive成功结果'
- en: '](img/Figure1.5_B15508.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure1.5_B15508.jpg)'
- en: Figure 1.5 – canDrive successful result
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5 – canDrive成功结果
- en: In this section, we learned about some of the pitfalls of dynamic typing and
    how static typing can help remove and protect against those issues. Static typing
    removes ambiguity from code, both to the compiler and other developers. This clarity
    can reduce errors and make for higher-quality code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了动态类型的一些缺陷，以及静态类型如何帮助消除和防止这些问题。静态类型消除了代码中的歧义，对编译器和其他开发人员都有帮助。这种清晰度可以减少错误，并产生更高质量的代码。
- en: Object-oriented programming
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面向对象编程
- en: JavaScript is known as an OOP language. It does have some of the capabilities
    of other OOP languages, such as inheritance. However, JavaScript's implementation
    is limited both in terms of available language features and design. In this section,
    we'll take a look at how JavaScript does OOP and how TypeScript improves upon
    JavaScript's capabilities.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript被称为面向对象的语言。它确实具有一些其他面向对象语言的能力，比如继承。然而，JavaScript的实现在可用语言特性和设计方面都是有限的。在本节中，我们将看一下JavaScript是如何进行面向对象编程的，以及TypeScript如何改进JavaScript的能力。
- en: 'First, let''s define what OOP is. There are four major principles of OOP:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们定义一下面向对象编程是什么。面向对象编程有四个主要原则：
- en: Encapsulation
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封装
- en: Abstraction
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象
- en: Inheritance
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承
- en: Polymorphism
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多态
- en: Let's review each one.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们来复习一下每一个。 '
- en: Encapsulation
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 封装
- en: A shorter way of saying encapsulation is information hiding. In every program,
    you will have data and functions that allow you to do something with that data.
    When we use encapsulation, we are taking that data and putting it into a container
    of sorts. This container is known as a class in most programming languages and
    basically, it protects that data so that nothing outside of the container can
    modify or view it. Instead, if you want to make use of the data, it must be done
    through functions that are controlled by the container object. This method of
    working with object data allows strict control of what happens to that data from
    a single place in code, instead of being dispersed through many locations across
    a large application—which can be unwieldy and difficult to maintain.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 封装的另一种说法是信息隐藏。在每个程序中，你都会有数据和函数，允许你对这些数据进行操作。当我们使用封装时，我们将这些数据放入一种容器中。在大多数编程语言中，这个容器被称为类，基本上，它保护数据，使得容器外部无法修改或查看它。相反，如果你想使用数据，必须通过容器对象控制的函数来完成。这种处理对象数据的方法允许严格控制代码中发生的数据变化，而不是分散在大型应用程序中的许多位置，这可能会使维护变得困难。
- en: There are some interpretations of encapsulation that focus mainly on the grouping
    of members inside a common container. However, in the strict sense of encapsulation,
    information hiding, JavaScript does not have this capability built in. For most
    OOP languages, encapsulation requires the ability to explicitly hide a member
    via a language facility. For example, in TypeScript, you can use the `private`
    keyword so that a property cannot be seen or modified outside of its class. Now,
    it is possible in JavaScript to simulate member privacy through various workarounds,
    but again this is not part of the native code and adds additional complexity.
    TypeScript supports encapsulation with access modifiers such as `private` natively.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有些对封装的解释主要集中在将成员分组在一个共同的容器内。然而，在封装的严格意义上，信息隐藏，JavaScript没有内置这种能力。对于大多数面向对象编程语言，封装需要通过语言设施明确隐藏成员的能力。例如，在TypeScript中，您可以使用`private`关键字，以便属性在其类外部无法看到或修改。现在，虽然可以通过各种变通方法模拟成员的私有性，但这并不是原生代码的一部分，并增加了额外的复杂性。TypeScript通过`private`等访问修饰符原生支持封装。
- en: Important Note
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Privacy for class fields will be supported in ECMAScript 2020\. However, as
    this is a newer feature, it is not supported across all browsers at the time of
    writing.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 2020将支持类字段的私有性。然而，由于这是一个较新的功能，在撰写本文时，并不是所有浏览器都支持。
- en: Abstraction
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 抽象
- en: Abstraction is related to encapsulation. When using abstraction, you hide the
    internal implementation of how data is managed and provide a more simplified interface
    to the outside code. Primarily, this is done to cause "loose coupling." This means
    that it is desirable for code that is responsible for one set of data to be independent
    and separated from other code. In this way, it is possible to change the code
    in one part of the application without adversely affecting the code in another
    part.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象与封装有关。在使用抽象时，您隐藏了数据管理的内部实现，并为外部代码提供了更简化的接口。主要是为了实现“松耦合”。这意味着希望负责一组数据的代码独立于其他代码并分开。这样，就可以在应用程序的一个部分更改代码，而不会对另一个部分的代码造成不利影响。
- en: Abstraction for most OOP languages requires the use of a mechanism to provide
    simplified access to an object, without revealing that object's internal workings.
    For most languages, this is either an interface or an abstract class. We'll review
    interfaces more deeply in a later chapter, but for now, interfaces are like classes
    whose members have no actual working code. You can consider them a shell that
    only reveals the names and types of object members, but hides how they work. This
    capability is extremely important in producing the "loose coupling" mentioned
    previously and allowing code to be more easily modified and maintained. JavaScript
    does not support interfaces or abstract classes, while TypeScript supports both
    features.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数面向对象编程语言的抽象需要使用机制来提供对对象的简化访问，而不会揭示该对象的内部工作方式。对于大多数语言，这要么是一个接口，要么是一个抽象类。我们将在后面的章节中更深入地介绍接口，但现在，接口就像没有实际工作代码的类。您可以将它们视为仅显示对象成员的名称和类型，但隐藏它们的工作方式。这种能力在产生先前提到的“松耦合”并允许更轻松地修改和维护代码方面非常重要。JavaScript不支持接口或抽象类，而TypeScript支持这两个特性。
- en: Inheritance
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 继承
- en: Inheritance is about code reuse. For example, if you needed to create objects
    for several types of vehicles—car, truck, and boat—it would be inefficient to
    write distinct code for each vehicle type. It would be better to create a base
    type that has the core attributes of all vehicles, and then reuse that code in
    each specific vehicle type. This way, we write some of the needed code only once
    and share it across each vehicle type.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 继承是关于代码重用的。例如，如果您需要为几种类型的车辆（汽车、卡车和船）创建对象，为每种车辆类型编写不同的代码是低效的。最好创建一个具有所有车辆的核心属性的基本类型，然后在每种特定的车辆类型中重用该代码。这样，我们只需编写一次所需的代码，并在每种车辆类型中共享它。
- en: Both JavaScript and TypeScript support classes and inheritance. If you're not
    familiar with classes, a class is a kind of type that stores a related set of
    fields and also may have functions that can act on those fields. JavaScript supports
    inheritance by using a system called prototypical inheritance. Basically, what
    this means is that in JavaScript, every object instance of a specific type shares
    the same instance of a single core object. This core object is the prototype,
    and whatever fields or functions are created on the prototype, they are accessible
    across the various object instances. This is a good way of saving resources, such
    as memory, but it does not have the level of flexibility or sophistication of
    the inheritance model in TypeScript.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript和TypeScript都支持类和继承。如果您不熟悉类，类是一种存储一组相关字段的类型，还可以具有可以操作这些字段的函数。JavaScript通过使用原型继承系统来支持继承。基本上，这意味着在JavaScript中，特定类型的每个对象实例共享单个核心对象的相同实例。这个核心对象是原型，原型上创建的任何字段或函数都可以在各个对象实例之间访问。这是一种节省资源（如内存）的好方法，但它没有TypeScript中继承模型的灵活性或复杂性。
- en: In TypeScript, classes can inherit from other classes but they can also inherit
    from interfaces and abstract classes. Since JavaScript does not have these features,
    in comparison, its prototypical inheritance is limited. Additionally, JavaScript
    has no ability to inherit from multiple classes directly, which is another method
    of doing code reuse called multiple inheritance. But TypeScript does allow multiple
    inheritance using mixins. We'll dive deep into all these features later, but basically,
    the point is that TypeScript has a more capable inheritance model that allows
    for more kinds of inheritance and therefore more ways to reuse code.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript中，类可以继承自其他类，但也可以继承自接口和抽象类。由于JavaScript没有这些特性，相比之下，它的原型继承是有限的。此外，JavaScript没有直接从多个类继承的能力，这是另一种称为多重继承的代码重用方法。但是TypeScript允许使用混入进行多重继承。我们将在以后深入研究所有这些特性，但基本上，关键是TypeScript具有更强大的继承模型，允许更多种类的继承，因此有更多的代码重用方式。
- en: Polymorphism
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多态性
- en: Polymorphism is related to inheritance. In polymorphism, it is possible to create
    an object that can be set to one of any number of possible types that inherit
    from the same base lineage. This capability is useful for scenarios where the
    type needed is not immediately knowable but can be set at runtime once the appropriate
    circumstances have arisen.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 多态性与继承有关。在多态性中，可以创建一个对象，该对象可以设置为任何可能从相同基本谱系继承的多种类型之一。这种能力对于需要的类型不是立即可知的情况很有用，但可以在运行时根据适当的情况进行设置。
- en: This feature is used less often in OOP code than some of the other features,
    but nevertheless can be useful. In the case of JavaScript, there is no direct
    language support for polymorphism, but due to its dynamic typing, it can be simulated
    reasonably well (some JavaScript enthusiasts will strongly disagree with this
    statement, but please hear me out).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特性在面向对象编程代码中的使用频率比一些其他特性要低，但仍然可以很有用。在JavaScript的情况下，没有直接支持多态的语言特性，但由于它的动态类型，可以相当好地模拟（一些JavaScript爱好者会强烈反对这种说法，但请听我说）。
- en: Let's look at an example. It is possible to use JavaScript class inheritance
    to create a base class and have multiple classes that inherit from this one parent
    base class. Then, by using standard JavaScript variable declaration, which does
    not indicate the type, we can set the type instance at runtime to whichever inheriting
    class is appropriate. The issue I find is that there is no way to force the variable
    to be of a specific base type since there is no way to declare types in JavaScript,
    therefore there is no way of enforcing only classes that inherit from the one
    base type during development. So, again, you have to resort to workarounds such
    as using the `instanceof` keyword in order to test for certain types at runtime,
    to try and enforce type safety.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个例子。可以使用JavaScript类继承来创建一个基类，并有多个类从这个父基类继承。然后，通过使用标准的JavaScript变量声明，不指示类型，我们可以在运行时将类型实例设置为适当的继承类。我发现的问题是，没有办法强制变量成为特定的基本类型，因为在JavaScript中没有办法声明类型，因此在开发过程中没有办法强制只有从一个基本类型继承的类。因此，再次，你必须诉诸于解决方法，比如在运行时使用`instanceof`关键字来测试特定类型，以尝试强制类型安全。
- en: In the case of TypeScript, static typing is on by default and forces type declaration
    when the variable is first created. Additionally, TypeScript supports interfaces,
    which can be implemented by classes. Therefore, declaring a variable to be of
    a specific interface type forces all classes instantiated to that variable to
    be inheritors of the same interface. Again, this is all done at development time
    before code is deployed. This system is more explicit, enforceable, and reliable
    than the one in JavaScript.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript的情况下，静态类型默认开启，并在变量首次创建时强制类型声明。此外，TypeScript支持接口，可以由类实现。因此，声明一个变量为特定接口类型会强制所有实例化为该变量的类都是相同接口的继承者。同样，这都是在代码部署之前的开发时间完成的。这个系统比JavaScript中的系统更加明确、可强制执行和可靠。
- en: In this section, we have learned about OOP and its importance in large application
    development. We've also understood why TypeScript's OOP capabilities are significantly
    better and more feature-rich than JavaScript's.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经了解了面向对象编程及其在大型应用程序开发中的重要性。我们也了解了为什么TypeScript的面向对象编程能力比JavaScript更加强大和功能丰富。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced TypeScript and learned why it was created. We
    learned why type safety and OOP capabilities can be so important for building
    large apps. Then, we saw some examples comparing dynamic typing and static typing
    and saw why static typing might be a better way of writing code. Finally, we compared
    the styles of OOP between the two languages and learned why TypeScript has the
    better and more capable system. The information in this chapter has given us a
    good high-level conceptual understanding of the benefits of TypeScript.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了TypeScript，并了解了它为什么被创建。我们了解了为什么类型安全和面向对象编程能力对于构建大型应用程序如此重要。然后，我们看了一些比较动态类型和静态类型的例子，并了解了为什么静态类型可能是编写代码的更好方式。最后，我们比较了两种语言之间的面向对象编程风格，并了解了为什么TypeScript拥有更好、更有能力的系统。本章的信息使我们对TypeScript的好处有了一个良好的高层次概念理解。
- en: In the next chapter, we'll do a deeper dive into the TypeScript language. We'll
    learn more about types and investigate some of the most important features of
    TypeScript, such as classes, interfaces, and generics. This chapter should give
    you a strong foundation for using the various frameworks and libraries in the
    JavaScript ecosystem.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入研究TypeScript语言。我们将更多地了解类型，并调查TypeScript的一些最重要的特性，比如类、接口和泛型。这一章应该为您在JavaScript生态系统中使用各种框架和库奠定坚实的基础。
