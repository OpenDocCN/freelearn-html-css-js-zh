- en: Chapter 15\. Server-side Rendering with Angular Universal
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章。使用Angular Universal进行服务器端渲染
- en: 'If you are not familiar with the Angular platform for client-side application
    development it is worth taking a look into. Nest.js has a unique symbiotic relationship
    with Angular because they are both written in TypeScript. This allows for some
    interesting code sharing between your Nest.js server and Angular app, because
    Angular and Nest.js both use TypeScript, and classes can be created in a package
    that is shared between the Angular app and the Nest.js app. These classes can
    then be included in either app and help keep the objects that are sent and received
    over HTTP requests between client and server consistent. This relationship is
    taken to another level when we introduce Angular Universal. Angular Universal
    is a technology that allows your Angular app to be pre-rendered on your server.
    This has a number of benefits such as:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对用于客户端应用程序开发的Angular平台不熟悉，值得一看。Nest.js与Angular有着独特的共生关系，因为它们都是用TypeScript编写的。这允许在Nest.js服务器和Angular应用程序之间进行一些有趣的代码共享，因为Angular和Nest.js都使用TypeScript，可以在两者之间创建一个共享的包中的类。然后可以将这些类包含在任一应用程序中，并帮助保持在客户端和服务器之间通过HTTP请求发送和接收的对象一致。当我们引入Angular
    Universal时，这种关系被提升到另一个层次。Angular Universal是一种技术，允许在服务器上预渲染您的Angular应用程序。这有许多好处，比如：
- en: Facilitate web crawlers for SEO purposes.
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了便于SEO目的的网络爬虫。
- en: Improve the load performance of your site.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提高网站的加载性能。
- en: Improve performance of the site on low-powered devices and mobile.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提高低性能设备和移动设备上网站的性能。
- en: This technique is called server-side rendering and can be extremely helpful,
    but, requires some restructuring of the project as the Nest.js server and Angular
    app are built in sequence and the Nest.js server will actually run the Angular
    app itself when a request is made to get a webpage. This essentially emulates
    the Angular app inside a browser complete with the API calls and loading any dynamic
    elements. This page built on the server is now served as a static webpage to the
    client and the dynamic Angular app is loaded quietly in the background.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术称为服务器端渲染，可以非常有帮助，但需要对项目进行一些重构，因为Nest.js服务器和Angular应用程序是按顺序构建的，当请求获取网页时，Nest.js服务器实际上会运行Angular应用程序本身。这本质上模拟了浏览器中的Angular应用程序，包括API调用和加载任何动态元素。这个在服务器上构建的页面现在作为静态网页提供给客户端，动态的Angular应用程序在后台静默加载。
- en: 'If you are just hopping into this book now and want to follow along with the
    example repository it can be cloned with:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在刚开始阅读本书，并希望跟随示例存储库进行操作，可以使用以下命令进行克隆：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Angular is another topic that can, and has, have an entire book written about
    it. We will be using an Angular 6 app that has been adapted for use in this book
    by one of the authors. The original repository can be found here.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Angular是另一个可以写一整本书的主题。我们将使用一个已经由作者之一改编用于本书的Angular 6应用程序。原始存储库可以在这里找到。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This repository is using Nest 5 and Angular 6 so there have been some changes
    made, because this book is based on Nest 4\. Not to worry, though, we have included
    an Angular Universal project inside the main repository shown at the start of
    this chapter. It can be found inside the `universal` folder at the root of the
    project. This is a self-contained Nest + Angular project, rather than adapting
    the main repository for this book to serve an Angular app, we isolated it to provide
    a clear and concise example.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个存储库使用了Nest 5和Angular 6，所以进行了一些更改，因为这本书是基于Nest 4的。不过不用担心，我们在本章开头展示的主要存储库中包含了一个Angular
    Universal项目。它可以在项目的根目录下的`universal`文件夹中找到。这是一个独立的Nest + Angular项目，而不是将主要存储库适应这本书的Angular应用，我们将其隔离出来，以提供一个清晰简洁的示例。
- en: Serving the Angular Universal App with Nest.js
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nest.js为Angular Universal应用提供服务
- en: Now that we are going to be serving the Angular app with our Nest.js server,
    we are going to have to compile them together so that when our Nest.js server
    is run, it knows where to look for the Universal app. In our `server/src/main.ts`
    file there are a couple of key things we need to have in there. Here we create
    a function `bootstrap()` and then call it from below.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用Nest.js服务器来提供Angular应用程序，我们需要将它们编译在一起，这样当我们运行Nest.js服务器时，它就知道在哪里查找Universal应用程序。在我们的`server/src/main.ts`文件中，有一些关键的东西需要在那里。在这里我们创建一个`bootstrap()`函数，然后从下面调用它。
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let’s step through this function line by line.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行分析这个函数。
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This tells the application to enable production mode for the application. There
    are many differences between production and development modes when writing web
    servers, but this is required if you want to run a web server in a production
    context.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉应用程序为应用程序启用生产模式。在编写Web服务器时，生产模式和开发模式之间有许多不同之处，但如果您想在生产环境中运行Web服务器，这是必需的。
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will create the Nest app variable of type `INestApplication` and will
    be run using `ApplicationModule` in the `app.module.ts` file as the entry point.
    `app` will be the instance of the Nest app that is running on port `environment.port`,
    which can be found in `src/server/environment/environment.ts`. There are three
    different environment files here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建类型为`INestApplication`的Nest应用程序变量，并将在`app.module.ts`文件中使用`ApplicationModule`运行。`app`将是在`environment.port`端口上运行的Nest应用程序的实例，可以在`src/server/environment/environment.ts`中找到。这里有三个不同的环境文件：
- en: '`environment.common.ts`-As its name implies, this file is common between both
    production and development builds. It provides information and paths on where
    to find the packaged build files for the server and client applications.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`environment.common.ts`-正如其名称所示，这个文件在生产和开发构建之间是共用的。它提供了关于在服务器和客户端应用程序中找到打包构建文件的信息和路径。'
- en: '`environment.ts`-This is the default environment used during development, and
    it includes the settings from the `environment.common.ts` file as well as sets
    `production: false` and the port mentioned above to 3000.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`environment.ts`-这是在开发过程中使用的默认环境，并包括`environment.common.ts`文件中的设置，以及将`production:
    false`和上面提到的端口设置为3000。'
- en: '`environment.prod.ts`-This file mirrors #2 except that it sets `production:
    true` and does not define a port, instead defaulting to default, normally 8888.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`environment.prod.ts`-这个文件与#2相似，只是它设置了`production: true`，并且没有定义端口，而是默认使用默认端口，通常是8888。'
- en: If we are developing locally and want to have hot reloading, where the server
    restarts if we change a file, then we need to have the following included in our
    `main.ts` file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在本地开发并且想要进行热重载，即如果我们更改文件，则服务器将重新启动，那么我们需要在我们的`main.ts`文件中包含以下内容。
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is set within the `webpack.server.config.ts` file based on our `NODE_ENV`
    environment variable.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在`webpack.server.config.ts`文件中设置的，基于我们的`NODE_ENV`环境变量。
- en: Finally, to actually start the server, call the `.listen()` function on our
    `INestApplication` variable and pass it a port to run on.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要实际启动服务器，调用我们的`INestApplication`变量上的`.listen()`函数，并传递一个端口来运行。
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We then call `bootstrap()`, which will run the function described above. At
    this stage we now have our Nest server running and able to serve the Angular App
    and listen to serve API requests.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们调用`bootstrap()`，这将运行上面描述的函数。在这个阶段，我们现在有了我们的Nest服务器正在运行，并且能够提供Angular应用程序并监听API请求。
- en: 'In the `bootstrap()` function above when creating the `INestApplication` object
    we supplied it with `ApplicationModule`. This is the entry point for the app and
    handles both the Nest and Angular Universal Apps. In `app.module.ts` we have:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的`bootstrap()`函数中，当创建`INestApplication`对象时，我们提供了`ApplicationModule`。这是应用程序的入口点，处理Nest和Angular
    Universal应用程序。在`app.module.ts`中我们有：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here we are importing two Nest modules, the `HeroesModule`, which will supply
    the API endpoints for the *Tour of Heroes* application, and the `ClientModule`
    that is the module that is handling the Universal stuff. The `ClientModule` has
    a lot going on, but we will touch on the main things that are handling setting
    up Universal, here is the code for this module.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们导入了两个Nest模块，`HeroesModule`，它将为*英雄之旅*应用程序提供API端点，以及`ClientModule`，它是处理Universal的模块。`ClientModule`有很多内容，但我们将重点介绍处理设置Universal的主要内容，这是这个模块的代码。
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We will start with the `@Module` decorator at the top of the file. As with regular
    Nest.js modules (And Angular, remember how Nest.js is inspired by Angular?), there
    are `controllers` (for the endpoints) property and a `components` (for services,
    providers and other components we want to be part of this module) property. Here
    we are including the `ClientController` in the `controllers` array and `...clientProviders`
    in `components`. Here the triple dot (`...`) essentially means “insert each of
    the array elements into this array.” Let’s disect each of these a bit more.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从文件顶部的`@Module`装饰器开始。与常规的Nest.js模块（还有Angular，记得Nest.js是受Angular启发的吗？）一样，有`controllers`（用于端点）属性和`components`（用于服务、提供者和其他我们想要作为此模块一部分的组件）属性。在这里，我们在`controllers`数组中包括`ClientController`，在`components`中包括`...clientProviders`。这里的三个点（`...`）本质上意味着“将数组中的每个元素插入到这个数组中”。让我们更详细地解释一下这些。
- en: '`ClientController`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`ClientController`'
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is like any other controller that we have learned about, but with one small
    difference. At the URL path `/*` instead of supplying an API endpoint, the Nest.js
    server will render an HTML page, namely `index.html`, from that same `viewsPath`
    we have seen before in the environment files.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们学到的任何其他控制器都是一样的，但有一个小小的不同。在URL路径`/*`上，Nest.js服务器不是提供API端点，而是从之前在环境文件中看到的相同的`viewsPath`中呈现一个HTML页面，即`index.html`。
- en: 'As for the `clientProoviders` array:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 至于`clientProoviders`数组：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is similar to how we define our own provider inside the return statement
    of `ClientModule`, but instead of `useValue` we use `useFactory`, this passes
    in the Nest app and the `AngularUniversalOptions` we defined earlier to a function
    `setupUniversal(app, options)`. It has taken us a while, but this is where the
    Angular Universal server is actually created.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于我们在`ClientModule`的返回语句中定义自己的提供者，但是我们使用`useFactory`而不是`useValue`，这将Nest应用程序和我们之前定义的`AngularUniversalOptions`传递给`setupUniversal(app,
    options)`函数。我们花了一段时间，但这就是实际创建Angular Universal服务器的地方。
- en: '`setupUniversal(app, options)`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`setupUniversal(app, options)`'
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'There are three main functions being called here: `app.setViewEngine()`, `app.setBaseViewDir()`,
    and an `app.engine`. The first `.setViewEngine()` is setting the view engine to
    HTML so that the engine rendering views knows we are dealing with HTML. The second
    `.setBaseViewDir()` is telling Nest.js where to find the HTML views, which again
    was defined in the `environment.common.ts` file from earlier. The last is very
    important, `.engine()` defines the HTML engine to use, in this case, because we
    are using Angular, it is `ngExpressEngine`, which is the Angular Universal engine.
    Read more about the Universal express-engine here: [https://github.com/angular/universal/tree/master/modules/express-engine](https://github.com/angular/universal/tree/master/modules/express-engine).
    This sets `bootstrap` to the `AppServerModuleNgFactory` object, which is discussed
    in the next section.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里调用了三个主要函数：`app.setViewEngine()`，`app.setBaseViewDir()`和`app.engine`。第一个`.setViewEngine()`将视图引擎设置为HTML，以便引擎呈现视图时知道我们正在处理HTML。第二个`.setBaseViewDir()`告诉Nest.js在哪里找到HTML视图，这同样是之前在`environment.common.ts`文件中定义的。最后一个非常重要，`.engine()`定义了要使用的HTML引擎，在这种情况下，因为我们使用的是Angular，它是`ngExpressEngine`，这是Angular
    Universal引擎。在这里阅读更多关于Universal express-engine的信息：[https://github.com/angular/universal/tree/master/modules/express-engine](https://github.com/angular/universal/tree/master/modules/express-engine)。这将`bootstrap`设置为`AppServerModuleNgFactory`对象，这将在下一节中讨论。
- en: In the `ClientModule` we can see the `.forRoot()` function that was called when
    we imported the `ClientModule` in the `AppliationModule` (server entry point).
    Essentially, `forRoot()` is defining a module to return in place of the originally
    imported `ClientModule`, also called `ClientModule`. This module being returned
    has a single component that provides `ANGULAR_UNIVERSAL_OPTIONS`, which is an
    interface that defines what kind of object will be passed into the `useValue`
    property of the component.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ClientModule`中，我们可以看到在我们在`AppliationModule`（服务器入口点）中导入`ClientModule`时调用的`.forRoot()`函数。基本上，`forRoot()`定义了一个要返回的模块，以取代最初导入的`ClientModule`，也称为`ClientModule`。返回的这个模块有一个单一组件，提供了`ANGULAR_UNIVERSAL_OPTIONS`，这是一个定义将传递到组件的`useValue`属性中的对象类型的接口。
- en: 'The structure of `ANGULAR_UNIVERSAL_OPTIONS` is:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`ANGULAR_UNIVERSAL_OPTIONS`的结构是：'
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It follows that the value of `useValue` is the contents of `options` defined
    at the top of `forRoot()`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由此可见，`useValue`的值是在`forRoot()`顶部定义的`options`的内容。
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The value of `environment.clientPaths.app` can be found in the `environment.common.ts`
    file we discussed earlier. As a reminder, it points to where to find the compiled
    client code to be served. You may be wondering why the value of `bundle` is a
    require statement when the interface clearly says it should be of the structure:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`environment.clientPaths.app`的值可以在我们之前讨论过的`environment.common.ts`文件中找到。作为提醒，它指向编译后的客户端代码的位置。也许你会想为什么`bundle`的值是一个require语句，而接口明确表示它应该是这样的结构：'
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Well, if you trace that require statement back (`..` means go up one directory)
    then you will see we are setting the `bundle` property equal to another module
    `AppServerModule`. This will be discussed in a bit, but the Angular App will end
    up being served.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，如果你追溯这个require语句（`..`表示向上一级目录），那么你会看到我们将`bundle`属性设置为另一个模块`AppServerModule`。稍后会讨论这个，但是Angular应用程序最终将被提供。
- en: The last piece in the `ClientModule` is in the `configure()` function that will
    tell the server where to find static assets.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`ClientModule`中的最后一部分是`configure()`函数，它将告诉服务器在哪里找到静态资产。'
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Building and running the Universal App
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和运行Universal App
- en: 'Now that you have the Nest.js and Angular files setup, it is almost time to
    run the project. There are a number of configuration files that need your attention
    and are found in the example project: [https://github.com/backstopmedia/nest-book-example](https://github.com/backstopmedia/nest-book-example).
    Up until now we have been running the project with `nodemon` so that our changes
    are reflected whenever the project is saved, but, now that we are packaging it
    up to be serving an Angular App we need to build the server using a different
    package. For this, we have chosen `udk`, which is a `webpack` extension. It can
    both build our production bundles as well as start a development server, much
    like `nodemon` did for our plain Nest.js app. It would be a good idea to familiarize
    yourself with the following configuration files:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经设置好了Nest.js和Angular文件，几乎可以运行项目了。有一些需要你注意的配置文件，可以在示例项目中找到：[https://github.com/backstopmedia/nest-book-example](https://github.com/backstopmedia/nest-book-example)。到目前为止，我们一直在使用`nodemon`运行项目，这样我们的更改就会在保存项目时反映出来，但是，现在我们正在打包它以提供一个Angular应用程序，我们需要使用不同的包来构建服务器。为此，我们选择了`udk`，这是一个`webpack`扩展。它既可以构建我们的生产包，也可以启动一个开发服务器，就像`nodemon`为我们的普通Nest.js应用程序所做的那样。熟悉以下配置文件是个好主意：
- en: '`angular.json`-Our Angular config file that handles things like, what environment
    file to use, commands that can be used with `ng`, and the Angular CLI command.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`angular.json`-我们的Angular配置文件，处理诸如使用哪个环境文件、可以与`ng`一起使用的命令以及Angular CLI命令等事项。'
- en: '`package.json`-The project global dependency and command file. This file defines
    what dependencies are needed for production and development as well as what commands
    are available for your command line tool, ie. `yarn` or `npm`.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`package.json`-项目全局依赖和命令文件。该文件定义了生产和开发所需的依赖项，以及命令行工具（如`yarn`或`npm`）可用的命令。'
- en: '`tsconfig.server.json`-An extension on the global `tsconfig.json` file, this
    provides some Angular Compiler options like where to find the Universal entry
    point.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`tsconfig.server.json`-这是全局`tsconfig.json`文件的扩展，它提供了一些Angular编译器选项，比如在哪里找到Universal入口点。'
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: And that is it! We have a working Angular Universal project to play around with.
    Angular is a great client side framework that has been gaining a lot of ground
    lately. There is much more that can be done here as this chapter only scratched
    the surface, especially in terms of Angular itself.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们有一个可以玩耍的Angular Universal项目。Angular是一个很棒的客户端框架，最近一直在蓬勃发展。在这一章中只是浅尝辄止，特别是在Angular本身方面，还有很多工作可以做。
- en: And, this is the last chapter in this book. We hope you are excited to use Nest.js
    to create all sorts of apps.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书的最后一章。我们希望你会兴奋地使用Nest.js来创建各种应用程序。
