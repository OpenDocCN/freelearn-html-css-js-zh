- en: Chapter 2. Building a Web API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：构建 Web API
- en: With the foundations in place, we begin the process of building a Web API for
    our Vision project. We will start by setting up a persistence layer using MongoDB.
    We will then implement, feature-by-feature, the various aspects of our Web API.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在打下基础后，我们开始为我们的 Vision 项目构建 Web API 的过程。我们将首先使用 MongoDB 设置持久层。然后，我们将逐个实现 Web
    API 的各个方面。
- en: Persisting data with MongoDB and Mongoose
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MongoDB 和 Mongoose 持久化数据
- en: MongoDB is an open source document-oriented database system. MongoDB stores
    structured data such as JSON-like documents, simplifying integration.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB 是一个开源的面向文档的数据库系统。MongoDB 存储结构化数据，如类似 JSON 的文档，简化了集成。
- en: Let's start by creating a MongoDB schema for our project. The schema contains
    some basic information related to the project such as the project's name, a GitHub
    access token, a user, and a list of repositories.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先为我们的项目创建一个 MongoDB 模式。该模式包含一些与项目相关的基本信息，例如项目的名称、GitHub 访问令牌、用户和存储库列表。
- en: Let's install Mongoose, a MongoDB Object Document Mapper for Node.js; it provides
    a schema-based solution to modeling your data.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装 Mongoose，它是 Node.js 的 MongoDB 对象文档映射器；它提供了一个基于模式的解决方案来建模您的数据。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s configure our application to use MongoDB and Mongoose; we add a URL
    for MongoDB to our configuration files `./lib/config/*.js`:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们配置我们的应用程序以使用 MongoDB 和 Mongoose；我们在配置文件 `./lib/config/*.js` 中添加 MongoDB 的
    URL：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s create a MongoDB connection module, `./lib/db/index.js`, which simply
    pulls in the MongoDB URL from our Winston configuration and opens a connection:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个 MongoDB 连接模块，`./lib/db/index.js`，它只是从我们的 Winston 配置中获取 MongoDB URL 并打开一个连接：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We now create a model class `./lib/models/index.js` that defines our `ProjectSchema`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在创建一个模型类 `./lib/models/index.js`，它定义了我们的 `ProjectSchema`：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In order to run the following examples, we need a running instance of MongoDB.
    You can download MongoDB from [http://www.mongodb.org](http://www.mongodb.org).
    Run the following command to start MongoDB:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行以下示例，我们需要一个运行的 MongoDB 实例。您可以从 [http://www.mongodb.org](http://www.mongodb.org)
    下载 MongoDB。运行以下命令以启动 MongoDB：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: GitHub tokens
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub 令牌
- en: In order to acquire a GitHub token, log in to your GitHub account and go to
    the **Accounts** section of your **Settings** page. Here you will need to enter
    your password. Now click on **Create new token**, and name the token, if you prefer.
    Click on the **copy to clipboard** button in order to copy the token into the
    following `login` file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取 GitHub 令牌，请登录您的 GitHub 账户并前往您的 **设置** 页面的 **账户** 部分。在这里，您需要输入您的密码。现在点击
    **创建新令牌**，如果您愿意的话，还可以为令牌命名。点击 **复制到剪贴板** 按钮以将令牌复制到下面的 `login` 文件中。
- en: Let's create a `login` file—`./test/login.js`—with the data from GitHub. We
    will use this in order to call the GitHub API; this will be removed in a later
    chapter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 `login` 的文件——`./test/login.js`——并从 GitHub 获取数据。我们将使用这个文件来调用 GitHub
    API；在后续章节中，这个文件将被删除。
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Feature: Create a project'
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能：创建项目
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s add a test to our existing set of tests for our feature `Create a project`.
    This resource will POST a project to the route `/project` and return a `201 Created`
    status code. The following test: `./test/project.js` is the `201 Created` test.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在现有的测试集中添加一个针对我们的功能 `创建项目` 的测试。这个资源将向 `/project` 路由 POST 一个项目并返回 `201 Created`
    状态码。以下测试：`./test/project.js` 是 `201 Created` 测试。
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: This book will not document the full set of tests for a feature. Please refer
    to the source code for the full set of tests.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不会记录一个功能的全部测试集。请参阅源代码以获取完整的测试集。
- en: In this example, SuperTest executes an `end` function that returns a response;
    this allows us to check the headers and body of the response.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，SuperTest 执行一个返回响应的 `end` 函数；这允许我们检查响应的头和体。
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In order for some of our tests to work, we will need some test data. So, the
    following `./test/project.js` will tear down any existing project data and add
    a new project using a Mocha hook `beforeEach`, that runs before each test:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使一些测试能够运行，我们需要一些测试数据。因此，以下 `./test/project.js` 将使用 Mocha 的 `beforeEach` 钩子销毁任何现有的项目数据，并添加一个新的项目：
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s install `string.js`, a lightweight JavaScript library that provides
    extra string methods. This will help us validate a request:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装 `string.js`，这是一个轻量级的 JavaScript 库，它提供了额外的字符串方法。这将帮助我们验证请求：
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let's implement the `Create a project` feature. We start by creating a `Project`
    module `./lib/project/index.js`. We import a Mongoose schema for the `Project`
    model and define a function called `post`, which accepts the `name` and `data`
    as arguments. We call the static function `Project.findOne` to check if the project
    exists, and if the project is unique, we call the `project.save` function, which
    saves the project.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现“创建项目”功能。我们首先创建一个`Project`模块`./lib/project/index.js`。我们导入一个Mongoose模式用于`Project`模型，并定义一个名为`post`的函数，该函数接受`name`和`data`作为参数。我们调用静态函数`Project.findOne`来检查项目是否存在，如果项目是唯一的，我们调用`project.save`函数来保存项目。
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s add a new route `./lib/routes/project.js`. We import a `logger` variable,
    a `ProjectService` module, and define a route called `Post`, that uses `req.body`
    to gain access to the items we POST in a request. We then validate the request
    that returns a `400 Bad Request` if it is invalid. If the request is valid, we
    add the user and the token to the body and call `Project.post`; if we get an error,
    we return `500 Internal Server Error`, and if the project already exists, we return
    a `409 Conflict` response. If the request is ok, we set `res.location` on the
    response for our new resource and return a `201 Created` response:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`./lib/routes/project.js`中添加一个新的路由。我们导入一个`logger`变量、一个`ProjectService`模块，并定义一个名为`Post`的路由，该路由使用`req.body`来访问请求中POST的项目项。然后我们验证请求，如果请求无效则返回`400
    Bad Request`。如果请求有效，我们将用户和令牌添加到请求体中并调用`Project.post`；如果发生错误，我们返回`500 Internal
    Server Error`，如果项目已存在，我们返回`409 Conflict`响应。如果请求正常，我们在响应上设置`res.location`以指向我们的新资源，并返回`201
    Created`响应：
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In order to add our new route and allow our application to support HTTP POST,
    we need to make a few changes to our Express server `./lib/express/index.js`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加我们的新路由并允许我们的应用程序支持HTTP POST，我们需要对我们的Express服务器`./lib/express/index.js`进行一些修改。
- en: First, we import the `db` module we created at the beginning of this chapter,
    which opens a connection to a MongoDB database. We then import the `project` route
    module we just created. Importantly, `app.use(express.bodyParser())` parses the
    request body when the forms are submitted. The `bodyParser` middleware supports
    `application/x-www-form-urlencoded`, `application/json`, and `multipart/form-data`.
    We add a new route at `/project` for posting a project.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入本章开头创建的`db`模块，该模块打开到MongoDB数据库的连接。然后，我们导入刚刚创建的`project`路由模块。重要的是，`app.use(express.bodyParser())`在表单提交时解析请求体。`bodyParser`中间件支持`application/x-www-form-urlencoded`、`application/json`和`multipart/form-data`。我们在`/project`路径下添加了一个新的路由用于发布项目。
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Feature: Get a project'
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能：获取项目
- en: '[PRE13]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Let's add a test to the existing set of tests `./test/project.js` for our feature
    `Get a project`. This resource will GET a project from route `/project/:id`, and
    return a `200 OK` status.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在现有的测试集`./test/project.js`中为我们的“获取项目”功能添加一个测试。这个资源将GET从路由`/project/:id`获取一个项目，并返回`200
    OK`状态。
- en: 'Let''s install `underscore.js`; a utility-belt library that provides functional
    programming support:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装`underscore.js`；这是一个提供函数式编程支持的实用工具库：
- en: '[PRE14]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s implement the `Get a project` feature `./lib/project/index.js` and add
    a `get` function. We attempt to retrieve a project by calling the static function
    `Project.findOne`. If we get an error, we return it, if we find the project then
    we return the project:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现“获取项目”功能`./lib/project/index.js`并添加一个`get`函数。我们尝试通过调用静态函数`Project.findOne`来检索项目。如果发生错误，我们返回它；如果找到项目，我们返回项目：
- en: '[PRE16]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s add a new route `./lib/routes/project.js`. We start by defining a route
    called `get`. We validate the request using a regular expression for a valid Mongoose
    `ObjectId`; and it returns a `400 Bad Request` status if the request is invalid.
    We attempt to retrieve a project by calling `Project.get` passing the `id`. If
    we get an error, we return `500 Internal Server Error`; if the project does not
    exist, we return a `404 Not Found`. If we find the project, we return the project
    and a `200 OK` response:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`./lib/routes/project.js`中添加一个新的路由。我们首先定义一个名为`get`的路由。我们使用正则表达式验证请求，以检查有效的Mongoose
    `ObjectId`；如果请求无效，则返回`400 Bad Request`状态。我们尝试通过调用`Project.get`并传递`id`来检索项目。如果发生错误，我们返回`500
    Internal Server Error`；如果项目不存在，我们返回`404 Not Found`。如果我们找到项目，我们返回项目和一个`200 OK`响应：
- en: '[PRE17]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now add the following route to `./lib/express/index.js:`
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将以下路由添加到`./lib/express/index.js`中：
- en: '[PRE18]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Feature: Edit a project'
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能：编辑项目
- en: '[PRE19]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s add a test to our existing set of tests `./test/project.js` for our
    `Edit a project` feature. This resource will PUT a project to route `/project/:id`,
    and return a `204 No Content` status:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在现有的测试集 `./test/project.js` 中为我们的 `编辑一个项目` 功能添加一个测试。此资源将向路由 `/project/:id`
    发送一个项目，并返回 `204 No Content` 状态：
- en: '[PRE20]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s implement the `Edit a project` feature `./lib/project/index.js` and
    add a `put` function. We attempt to retrieve a project by calling the static function
    `Project.findOne`. If we get an error, we return it; if we cannot find the project,
    we return null. If we find the project, we update it and return the project:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现 `编辑一个项目` 功能 `./lib/project/index.js` 并添加一个 `put` 函数。我们尝试通过调用静态函数 `Project.findOne`
    来检索项目。如果发生错误，我们返回错误；如果我们找不到项目，我们返回 `null`。如果我们找到项目，我们更新它并返回项目：
- en: '[PRE21]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s add a new route `./lib/routes/project.js`. We start by defining a route
    called `put`, we then validate the request by returning a `400 Bad Request` if
    the request is invalid. We add a login user and token to the body of the request;
    this will be removed in a later chapter. We attempt to update the project by calling
    `Project.put` passing the `id`. If we get an error, we return `500 Internal Server
    Error`; if the project does not exist, we return a `404 Not Found` status. If
    we find the project, then we return a `204 No Content` response:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `./lib/routes/project.js` 中添加一个新的路由。我们首先定义一个名为 `put` 的路由，然后通过返回 `400 Bad
    Request` 来验证请求是否有效。我们在请求体中添加一个登录用户和令牌；这将在后面的章节中删除。我们尝试通过调用 `Project.put` 并传递 `id`
    来更新项目。如果发生错误，我们返回 `500 Internal Server Error`；如果项目不存在，我们返回 `404 Not Found` 状态。如果我们找到项目，则返回
    `204 No Content` 响应：
- en: '[PRE22]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, add the following route to the Express server `./lib/express/index.js`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下路由添加到 Express 服务器 `./lib/express/index.js` 中：
- en: '[PRE23]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Feature: Delete a project'
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能：删除一个项目
- en: '[PRE24]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s add a test to `./test/project.js` for our feature `Delete a project`.
    This resource will DELETE a project at route `/project/:id` and return a `204
    No Content` status:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `./test/project.js` 中为我们的功能 `删除一个项目` 添加一个测试。此资源将在路由 `/project/:id` 删除一个项目并返回
    `204 No Content` 状态：
- en: '[PRE25]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Let's implement the `Delete a project` feature `./lib/project/index.js` and
    add a `del` function. We attempt to delete a project by calling the static function
    `Project.findOne`. If we get an error, we return it; if we cannot find the project,
    we return `null`. If we find the project, we delete it and return an empty response.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现 `删除一个项目` 功能 `./lib/project/index.js` 并添加一个 `del` 函数。我们尝试通过调用静态函数 `Project.findOne`
    来删除项目。如果发生错误，我们返回错误；如果我们找不到项目，我们返回 `null`。如果我们找到项目，我们将其删除并返回一个空响应。
- en: '[PRE26]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Let's add a new route `./lib/routes/project.js`. We start by defining a route
    called `del`. We attempt to delete the project by calling `Project.del` and passing
    the `id`. If we get an error, we return `500 Internal Server Error`; if the project
    does not exist, we return a `404 Not Found`. If we find the project, we return
    a `204 No Content` response.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `./lib/routes/project.js` 中添加一个新的路由。我们首先定义一个名为 `del` 的路由。我们尝试通过调用 `Project.del`
    并传递 `id` 来删除项目。如果发生错误，我们返回 `500 Internal Server Error`；如果项目不存在，我们返回 `404 Not Found`。如果我们找到项目，我们返回
    `204 No Content` 响应。
- en: '[PRE27]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, add the following route to the Express server `./lib/express/index.js`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下路由添加到 Express 服务器 `./lib/express/index.js` 中：
- en: '[PRE28]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Feature: List projects'
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能：列出项目
- en: '[PRE29]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Let's add a test to `./test/project.js` for our feature `List projects`. This
    resource will GET all projects from route `/project` and return a `200 Ok` status.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `./test/project.js` 中为我们的功能 `列出项目` 添加一个测试。此资源将从路由 `/project` 获取所有项目并返回
    `200 Ok` 状态。
- en: '[PRE30]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let''s implement the `List projects` feature `./lib/project/index.js` and add
    an `all` function. We attempt to retrieve all projects by calling the static function
    `Project.find` and querying by a user `id`. If we get an error we return it, if
    we find the projects, we return the projects:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现 `列出项目` 功能 `./lib/project/index.js` 并添加一个 `all` 函数。我们尝试通过调用静态函数 `Project.find`
    并按用户 `id` 查询来检索所有项目。如果发生错误，我们返回错误；如果找到项目，我们返回项目：
- en: '[PRE31]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Let's add a new route `./lib/routes/project.js`. We start by defining a route
    called `all`. We start by retrieving a users `id`. In order to accommodate the
    fact that we have not implemented an authentication strategy; we get the user
    details from our hard-coded `login.user` object. We will clean this up in a future
    chapter. We attempt to retrieve a project by calling `Project.all`, passing the
    `userId`. If we get an error, we return `500 Internal Server Error`; if we find
    projects, we return the projects and a `200 OK` response.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `./lib/routes/project.js` 中添加一个新的路由。我们首先定义一个名为 `all` 的路由。我们首先检索用户的 `id`。为了适应我们没有实现认证策略的事实，我们从我们的硬编码
    `login.user` 对象中获取用户详情。我们将在未来的章节中清理它。我们尝试通过调用 `Project.all` 并传递 `userId` 来检索一个项目。如果发生错误，我们返回
    `500 Internal Server Error`；如果我们找到项目，我们返回项目和一个 `200 OK` 响应。
- en: '[PRE32]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, add the following route to the Express server `./lib/express/index.js`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下路由添加到 Express 服务器 `./lib/express/index.js` 中：
- en: '[PRE33]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: GitHub API
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub API
- en: Our project API is complete but things are about to get a little more complicated
    as we attempt to communicate with the GitHub API. Let's install the following
    modules.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目 API 已经完成，但随着我们尝试与 GitHub API 进行通信，事情将变得更加复杂。让我们安装以下模块。
- en: The `github` module provides an object-oriented wrapper for the GitHub v3 API;
    the complete API for this module can be found at [http://mikedeboer.github.io/node-github/](http://mikedeboer.github.io/node-github/).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`github` 模块为 GitHub v3 API 提供了一个面向对象的包装器；该模块的完整 API 可以在 [http://mikedeboer.github.io/node-github/](http://mikedeboer.github.io/node-github/)
    找到。'
- en: '[PRE34]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `async` module is a utility module that provides around 20 powerful functions
    for working with asynchronous JavaScript. The `async` module is a control-flow
    module and will allow us to do operations over IO in a clean, controlled way.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`async` 模块是一个实用模块，它提供了大约 20 个强大的函数，用于处理异步 JavaScript。`async` 模块是一个控制流模块，它将允许我们以干净、可控的方式执行
    IO 操作。'
- en: '[PRE35]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `moment.js` is a library for parsing, validating, manipulating, and formatting
    dates.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`moment.js` 是一个用于解析、验证、操作和格式化日期的库。'
- en: '[PRE36]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Feature: List repositories'
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能：列出仓库
- en: '[PRE37]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Let''s add a test to `./test/github.js` for our feature `List repositories`.
    This resource will GET all repositories for a project from the route `project/:id/repos`
    and return a `200 Ok` status:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `./test/github.js` 中为我们的功能 `列出仓库` 添加一个测试。这个资源将从路由 `project/:id/repos` 获取一个项目的所有仓库，并返回
    `200 Ok` 状态：
- en: '[PRE38]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The first thing we need to do is create a `GitHubRepo` module in `./lib/github/index.js`.
    We start by importing the required modules including `github`. We define a constructor
    function that accepts as input a GitHub access `token` and a `user`. We then instantiate
    a `GitHubApi` module, calling `github.authenticate`, which authenticates based
    on the token:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是在 `./lib/github/index.js` 中创建一个 `GitHubRepo` 模块。我们首先导入所需的模块，包括 `github`。我们定义一个构造函数，它接受一个
    GitHub 访问 `token` 和一个 `user` 作为输入。然后我们实例化一个 `GitHubApi` 模块，调用 `github.authenticate`，它基于
    token 进行认证：
- en: '[PRE39]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Let''s implement the feature `List repositories` and add it to our new `GitHubRepo`
    module in `./lib/github/index.js`. We start by defining our prototype function
    `repositories`. We call `getAll` on the `github` module. If we get an error, we
    return the error; if no repositories are found we return a `null` value. If we
    find repositories, we use the `map` function to create a new array of items using
    the `underscore pick` function to select the three attributes `id`, `name`, and
    `description`. We return these `items` via `callback`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现功能 `列出仓库` 并将其添加到我们新的 `GitHubRepo` 模块 `./lib/github/index.js` 中。我们首先定义我们的原型函数
    `repositories`。我们在 `github` 模块上调用 `getAll`。如果发生错误，我们返回错误；如果没有找到仓库，我们返回一个 `null`
    值。如果我们找到仓库，我们使用 `map` 函数创建一个新的项目数组，使用 `underscore pick` 函数选择三个属性 `id`、`name` 和
    `description`。我们通过 `callback` 返回这些 `items`：
- en: '[PRE40]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Let''s add a `repos` function to `./lib/project/index.js`. We start by importing
    the `GitHubRepo` module and we attempt to retrieve the project by calling the
    static function `Project.findOne`. If we get an error, we return the error; if
    the project does not exist we return a `null` value. If we find the project, we
    create a `GithubRepo` module and initialize it with a `token` and a `user`, and
    assign it to `git`. We then call `git.repositories` which returns a response.
    If we get an error, we return an `error`, if we do not find any repositories,
    we return a `null` value. If we find repositories, we use the `map` function to
    create a new array of items using `underscore pick` function to select three attributes,
    including `id`, `name`, and `description`. We add a fourth attribute, `enabled`,
    which signifies if our project has the repository assigned to it and returns all
    the repositories:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`./lib/project/index.js`中添加一个`repos`函数。我们首先导入`GitHubRepo`模块，然后通过调用静态函数`Project.findOne`尝试检索项目。如果我们得到一个错误，我们返回错误；如果项目不存在，我们返回一个`null`值。如果我们找到项目，我们创建一个`GithubRepo`模块，并用`token`和`user`初始化它，并将其分配给`git`。然后我们调用`git.repositories`，它返回一个响应。如果我们得到一个错误，我们返回一个`error`，如果我们没有找到任何仓库，我们返回一个`null`值。如果我们找到仓库，我们使用`map`函数通过`underscore
    pick`函数创建一个新的项目数组，选择包括`id`、`name`和`description`在内的三个属性。我们添加一个第四个属性`enabled`，表示我们的项目是否分配了仓库，并返回所有仓库：
- en: '[PRE41]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Let's add a new route `repos` to `./lib/routes/github.js`. We instantiate a
    new `ProjectService` and then attempt to retrieve the projects repositories by
    calling the function `Project.repos`. If we get an error, we return `500 Internal
    Server Error`. If no repositories are returned, we return a `404 Not Found` status.
    If we receive repositories, we return a `200 OK` status with the repositories.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`./lib/routes/github.js`中添加一个新的路由`repos`。我们实例化一个新的`ProjectService`，然后通过调用函数`Project.repos`尝试检索项目的仓库。如果我们得到一个错误，我们返回`500
    Internal Server Error`。如果没有返回仓库，我们返回`404 Not Found`状态。如果我们收到仓库，我们返回一个包含仓库的`200
    OK`状态。
- en: '[PRE42]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now, add the following route to `./lib/express/index.js`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下路由添加到`./lib/express/index.js`：
- en: '[PRE43]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Feature: List commits'
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能：列出提交
- en: '[PRE44]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Let''s add a test to `./test/github.js` for our `List commits` feature. This
    resource will GET the 10 most recent commits for all repositories in a project
    via the route `project/:id/commits` and return a `200 OK` status:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`./test/github.js`中为我们的`List commits`功能添加一个测试。这个资源将通过路由`project/:id/commits`获取项目中所有仓库的10个最新提交，并返回`200
    OK`状态：
- en: '[PRE45]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Let's implement the `List commits` feature, and add it to our new `GitHubRepo`
    module in `./lib/github/index.js`. We start by defining our function, `commits`,
    that takes a list of `repos`. We use `async.each` to loop though all `repos`.
    The `async` module allows us to do asynchronous work over IO.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现`List commits`功能，并将其添加到我们的新`GitHubRepo`模块`./lib/github/index.js`中。我们首先定义我们的函数`commits`，它接受一个`repos`列表。我们使用`async.each`遍历所有`repos`。`async`模块允许我们在IO上执行异步操作。
- en: 'We then call `github.repos.getCommits`; we pass it our GitHub `user` and `repo`.
    We call the `callback` if `github.repos.getCommits()` returns an error. When we
    get a response, we use the `map` function to create a new array of items using
    the `uderscore pick` function to select two attributes: `committer` and `message`.
    If the item has a `committer`, we use underscores the `extend` function and add
    the committers, `login` and `avatar_url`. We return the items to the main function
    via `callback` and use underscores `sort` function to sort the items by date and
    select the top 10 items. We then return the commits via `callback`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们调用`github.repos.getCommits`；我们传递我们的GitHub `user`和`repo`。如果`github.repos.getCommits()`返回错误，我们调用`callback`。当我们收到响应时，我们使用`map`函数通过`uderscore
    pick`函数选择两个属性：`committer`和`message`来创建一个新的项目数组。如果项目有`committer`，我们使用underscores的`extend`函数添加提交者的`login`和`avatar_url`。我们通过`callback`将项目返回到主函数，并使用underscores的`sort`函数按日期排序项目并选择前10个项目。然后，我们通过`callback`返回提交：
- en: '[PRE46]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Let's add a `commits` function to `./lib/project/index.js`. We start by defining
    a function called `commits`. We attempt to retrieve the project by calling the
    static function `Project.findOne`. If we get an error, we return the error. If
    the project does not exist, we return a `null` value. If we find the project,
    we create a `GithubRepo` module and initialize it with a token and a user and
    assign it to `git`. We then call the `git.commits` function and pass a list of
    repositories returning a response. If we get an error, we return an error. If
    we get a valid response, we return the commits.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `./lib/project/index.js` 中添加一个 `commits` 函数。我们首先定义一个名为 `commits` 的函数。我们尝试通过调用静态函数
    `Project.findOne` 来检索项目。如果发生错误，我们返回错误。如果项目不存在，我们返回一个 `null` 值。如果我们找到了项目，我们创建一个
    `GithubRepo` 模块，并用 token 和用户初始化它，并将其分配给 `git`。然后我们调用 `git.commits` 函数，传递一个存储库列表，返回一个响应。如果发生错误，我们返回错误。如果得到一个有效的响应，我们返回提交。
- en: '[PRE47]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Let''s add a new route `commits` to `./lib/routes/github.js`. We attempt to
    retrieve the commits by calling `Project.commits`. If we get an error we return
    `500 Internal Server Error`. If no commits are returned we return a `404 Not Found`.
    If we receive commits we return a `200 OK` response with the commits:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `./lib/routes/github.js` 中添加一个新的路由 `commits`。我们尝试通过调用 `Project.commits`
    来检索提交。如果发生错误，我们返回 `500 Internal Server Error`。如果没有返回提交，我们返回 `404 Not Found`。如果我们收到提交，我们返回一个包含提交的
    `200 OK` 响应：
- en: '[PRE48]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now, add the following route to `./lib/express/index.js`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下路由添加到 `./lib/express/index.js`：
- en: '[PRE49]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Feature: List issues'
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能：列出问题
- en: '[PRE50]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Let''s add a test to `./test/project.js` for our `List issues` feature. This
    resource will GET all projects from the route `project/:id/issues` and return
    a `200 OK` response:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `./test/project.js` 中为我们的 `List issues` 功能添加一个测试。此资源将获取来自 `project/:id/issues`
    路由的所有项目，并返回一个 `200 OK` 响应：
- en: '[PRE51]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Let's implement the feature `List issues` and add it to our new `GitHubRepo`
    module `./lib/github/index.js`. We start by defining our function `issues` which
    takes a list of `repos`. We use `async.each` to loop though all `repositories`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现一个名为 `List issues` 的功能，并将其添加到我们新的 `GitHubRepo` 模块 `./lib/github/index.js`
    中。我们首先定义我们的 `issues` 函数，它接受一个 `repos` 列表。我们使用 `async.each` 来遍历所有 `repositories`。
- en: We then call `github.repos.repoIssues` and we pass our GitHub `user` and `repo`,
    calling the callback if `github.repos.repoIssues()` returns an `error`. If we
    get a valid response we use the `map` function to create a new array of items
    using `underscore pick` function to select four attributes, including `id`, `title`,
    `state`, and `updated_at`. If the item has a user, we use underscores `extend`
    function and add the users `login` and `avatar_url`. We then return the items
    to the main function via `callback` and use the `underscore sort` function to
    sort the items by date. We then select the top 10 issues and return the issues
    via `callback`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们调用 `github.repos.repoIssues` 并传递我们的 GitHub `user` 和 `repo`，如果 `github.repos.repoIssues()`
    返回一个 `error`，则调用回调。如果得到一个有效的响应，我们使用 `map` 函数创建一个新的项目数组，使用 `underscore pick` 函数选择四个属性，包括
    `id`、`title`、`state` 和 `updated_at`。如果项目有用户，我们使用 `underscore extend` 函数添加用户的 `login`
    和 `avatar_url`。然后我们通过 `callback` 将项目返回给主函数，并使用 `underscore sort` 函数按日期排序项目。然后我们选择前
    10 个问题，并通过 `callback` 返回问题。
- en: '[PRE52]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Let''s add an `issues` function to `./lib/project/index.js`. We start by defining
    a function called `issues`. We attempt to retrieve the project by calling the
    static function `Project.findOne`. If we get an error, we return the `error`.
    If the project does not exist, we return a `null` value. If we find the project,
    we create a `GitHubRepo` module and initialize it with a `token` and a `user`,
    and assign it to `git`. We then call `git.issues`, passing a list of repositories,
    returning a response. If we get an error, we return an `error` and if we get a
    valid response, we return the issues and a `200 OK` response:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `./lib/project/index.js` 中添加一个 `issues` 函数。我们首先定义一个名为 `issues` 的函数。我们尝试通过调用静态函数
    `Project.findOne` 来检索项目。如果发生错误，我们返回 `error`。如果项目不存在，我们返回一个 `null` 值。如果我们找到了项目，我们创建一个
    `GitHubRepo` 模块，并用 `token` 和 `user` 初始化它，并将其分配给 `git`。然后我们调用 `git.issues`，传递一个存储库列表，返回一个响应。如果发生错误，我们返回一个
    `error`，如果得到一个有效的响应，我们返回问题和 `200 OK` 响应：
- en: '[PRE53]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Let''s add a new route, `issues`, to `./lib/routes/github.js`. We attempt to
    retrieve the issues by calling `Project.issues`. If we get an error we return
    `500 Internal Server Error`. If no issues are returned we return a `404 Not Found`
    response, and if we receive issues we return a `200 OK` response with the issues:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `./lib/routes/github.js` 中添加一个新的路由 `issues`。我们尝试通过调用 `Project.issues` 来检索问题。如果发生错误，我们返回
    `500 Internal Server Error`。如果没有返回问题，我们返回 `404 Not Found` 响应，如果收到问题，我们返回包含问题的
    `200 OK` 响应：
- en: '[PRE54]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Now, add the following route to `./lib/express/index.js`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下路由添加到`./lib/express/index.js`：
- en: '[PRE55]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Validating parameters with param middleware
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用参数中间件验证参数
- en: You will have noticed that we have repeated the `id` validation in each of our
    routes. Let's improve things using `app.params`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们在每个路由中都重复了`id`验证。让我们使用`app.params`来改进这些事情。
- en: 'Here is the offending line of code that simply checks to see if our `id` is
    a valid MongoDB `id`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是检查我们的`id`是否为有效的MongoDB `id`的有问题的代码行：
- en: '[PRE56]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Let''s add a middleware to handle this `./lib/middleware/id.js`. We define
    a `validate` function that takes four parameters, with the last being the value
    of `id`. We then validate the `id` parameter, returning a `400 Bad Request`,if
    it''s invalid. We then call `next()`, which calls the next middleware in our Express
    stack:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个中间件来处理这个`./lib/middleware/id.js`。我们定义一个`validate`函数，它接受四个参数，最后一个参数是`id`的值。然后我们验证`id`参数，如果它无效，则返回`400
    Bad Request`。然后我们调用`next()`，这将调用Express堆栈中的下一个中间件：
- en: '[PRE57]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now we can use this `id` middleware in our Express server. Let''s include the
    `param` middleware and add this line before the first route so that it applies
    to all of our routes: `./lib/express/index.js`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在我们的Express服务器中使用这个`id`中间件。让我们包含`param`中间件，并在第一个路由之前添加此行，以便它适用于所有路由：`./lib/express/index.js`：
- en: '[PRE58]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: We can now edit our two route modules `./lib/routes/project.js` and `./lib/routes/github.js`,
    and remove the offending line of code. The `id` param will now handle this for
    all routes.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以编辑我们的两个路由模块`./lib/routes/project.js`和`./lib/routes/github.js`，并删除有问题的代码行。`id`参数现在将处理所有路由。
- en: Route improvements
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由改进
- en: 'We now have quite a few routes required in our Express server; let''s clean
    this up. A common pattern in `node.js` is to include an `index` file that returns
    all files in its current directory. We will use `require-directory` to do this
    for us:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的Express服务器需要很多路由；让我们清理一下。在`node.js`中，一个常见的模式是包含一个`index`文件，该文件返回其当前目录中的所有文件。我们将使用`require-directory`来为我们完成这项工作：
- en: '[PRE59]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Let''s create a new module `./lib/routes/index.js`. with the following code:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的模块`./lib/routes/index.js`，代码如下：
- en: '[PRE60]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Now, all routes in the `./lib/routes/` folder will be exposed under a single
    variable, `routes`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`./lib/routes/`文件夹中的所有路由都将暴露在单个变量`routes`下：
- en: '[PRE61]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Summary
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have now completed our Web API. We have implemented a basic MongoDB provider;
    we are using Mongoose to give us a bit of schema support. We have also made a
    small improvement to our Express server, cleaning up the routes.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了我们的Web API。我们实现了一个基本的MongoDB提供者；我们使用Mongoose为我们提供了一些模式支持。我们还对我们的Express服务器进行了一些小的改进，清理了路由。
- en: In the next chapter, we will consume this API when we build our client.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将构建客户端时消费这个API。
