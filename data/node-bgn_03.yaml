- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: JavaScript Fundamentals
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript基础
- en: In this chapter, we will review all the aspects of JavaScript that are relevant
    to this book. While this topic could be a book in itself, this chapter synthesizes
    the most basic parts (arrays, objects, strings, and data types) in order to do
    a deeper analysis of the most complex parts, such as functions and closures.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾与本书相关的所有JavaScript方面。虽然这个主题本身可以是一本独立的书籍，但本章综合了最基本的部分（数组、对象、字符串和数据类型），以便对最复杂的部分进行更深入的分析，例如函数和闭包。
- en: Even if you are already familiar with JavaScript, this chapter will help you
    to refresh your knowledge of certain areas. Also, you will learn about the latest
    changes in JavaScript introduced by the latest specification.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你已经熟悉JavaScript，这一章也会帮助你刷新某些领域的知识。此外，你还将了解由最新规范引入的JavaScript的最新变化。
- en: We will also learn how JavaScript has become a standard on how decisions are
    made when a request change is made for the language.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将学习JavaScript如何成为在语言请求变更时做出决策的标准。
- en: Additionally, we will review some tools that will help us to write better JavaScript
    by using linters, debugging tools, and proper documentation for our code.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将回顾一些工具，这些工具将帮助我们通过使用代码风格检查器、调试工具和适当的代码文档来编写更好的JavaScript。
- en: 'To sum up, here are the main topics that we will explore in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，以下是本章我们将探讨的主要主题：
- en: Refresh or acquire JavaScript knowledge, including about many of its features
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 刷新或获取JavaScript知识，包括其许多特性
- en: Understand JavaScript versioning and the TC39 committee
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解JavaScript版本和TC39委员会
- en: Get familiar with the JavaScript documentation and linting
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉JavaScript文档和代码风格检查
- en: Understand the most commonly used parts of JavaScript (comments, data types,
    operators, conditionals, loops, functions, objects, arrays, classes, and so on)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解JavaScript中最常用的部分（注释、数据类型、运算符、条件语句、循环、函数、对象、数组等）
- en: Understand advanced JavaScript concepts such as closures and prototypes
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解高级JavaScript概念，如闭包和原型
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code files for the chapter can be found at [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在[https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners)找到。
- en: Check out the code in action video for this chapter on [https://youtu.be/BxM8XZzINmg](https://youtu.be/BxM8XZzINmg)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 查看本章代码的实际操作视频，请访问[https://youtu.be/BxM8XZzINmg](https://youtu.be/BxM8XZzINmg)
- en: JavaScript is a powerful language
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript是一种强大的语言
- en: JavaScript is a very powerful language. It is used in the frontend, backend,
    mobile, desktop, IoT, and so on. It is very flexible, and it is very easy to get
    started, but it is also very hard to master in depth.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种非常强大的语言。它被用于前端、后端、移动、桌面、物联网等领域。它非常灵活，而且很容易入门，但深入掌握它也非常困难。
- en: 'There is a very famous quote ([https://www.crockford.com/javascript/javascript.html](https://www.crockford.com/javascript/javascript.html))
    by Douglas Crockford that says:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Douglas Crockford有一句非常著名的引言（[https://www.crockford.com/javascript/javascript.html](https://www.crockford.com/javascript/javascript.html)）说：
- en: JavaScript is the world’s most misunderstood programming language.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是世界上被误解最多的编程语言。
- en: JavaScript is a multi-paradigm language, which means that you can use different
    programming styles, such as object-oriented programming, functional programming,
    or declarative programming. This is very useful because you can use the programming
    style that best fits your needs. But on the other hand, it can be very confusing
    for beginners, and not all the programming styles are equally supported by the
    language.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种多范式语言，这意味着你可以使用不同的编程风格，如面向对象编程、函数式编程或声明式编程。这非常有用，因为你可以使用最适合你需求的编程风格。但另一方面，对于初学者来说，这可能会非常令人困惑，而且并非所有编程风格都得到语言的同等支持。
- en: JavaScript is a very dynamic language, which means that you can change the behavior
    of the language at runtime. Thanks to JavaScript, you can learn complex concepts,
    such as closures and prototypes, and use them to create very powerful and complex
    applications. But you can also use them to create very confusing and hard-to-maintain
    applications.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种非常动态的语言，这意味着你可以在运行时更改语言的行为。多亏了JavaScript，你可以学习复杂的概念，如闭包和原型，并使用它们来创建非常强大和复杂的应用程序。但你也可以使用它们来创建非常混乱且难以维护的应用程序。
- en: In the next chapters, we will learn how to use JavaScript to create powerful
    applications, but we will also learn how to use it in a way that is easy to understand
    and maintain.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习如何使用JavaScript创建强大的应用程序，但我们也会学习如何以易于理解和维护的方式使用它。
- en: Important note
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Don’t worry if you’re not deeply familiar with any of the mentioned paradigms.
    Throughout this book, we’ll gradually incorporate elements from each paradigm,
    introducing them as needed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你并不熟悉所提到的任何一种范式，请不要担心。在这本书中，我们将逐步融入每种范式的元素，根据需要介绍它们。
- en: In the next section, we will explore the role of the TC39 in JavaScript and
    how the specification works.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨TC39在JavaScript中的作用以及规范是如何工作的。
- en: Understanding versioning – TC39
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解版本控制 – TC39
- en: JavaScript is getting old; it was created in 1995 by Brendan Eich at Netscape
    Communications Corporation. It was originally called Mocha, but it was renamed
    LiveScript and finally JavaScript.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript正在变得陈旧；它是由Brendan Eich在1995年于Netscape Communications Corporation创建的。最初它被称为Mocha，但后来改名为LiveScript，最终成为JavaScript。
- en: The first version of JavaScript was released in 1996\. It was called **ECMAScript
    1** (**ES1**) and was standardized by the **European Computer Manufacturers Association**
    (**ECMA**) in 1997.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的第一个版本于1996年发布。它被称为**ECMAScript 1**（**ES1**），并于1997年由**欧洲计算机制造商协会**（**ECMA**）标准化。
- en: Understanding versioning – ECMAScript
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解版本控制 – ECMAScript
- en: Over the years, many new features were added to the language, such as classes,
    modules, and arrow functions. The new features were added to the language through
    a submission proposal process called ECMAScript proposals ([https://github.com/tc39/proposals](https://github.com/tc39/proposals))
    that are managed directly by the TC39 ([https://tc39.es/process-document/](https://tc39.es/process-document/)),
    which refers to a committee of ECMA that is responsible for the evolution of the
    language.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，语言中添加了许多新特性，例如类、模块和箭头函数。这些新特性是通过一个名为ECMAScript提案的提交流程添加到语言中的，该流程由TC39直接管理（[https://github.com/tc39/proposals](https://github.com/tc39/proposals)），它指的是负责语言演变的ECMA委员会（[https://tc39.es/process-document/](https://tc39.es/process-document/)）。
- en: From 1997 until 2015, new features were added to the language every few years,
    but in 2015, the TC39 decided to release a new version of the language every year,
    which means that the language is evolving faster than ever. This also helps us
    with the adoption of the new features because we don’t need to wait many years
    to use them in production environments.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从1997年到2015年，每隔几年语言就会增加新特性，但在2015年，TC39决定每年发布一个新的语言版本，这意味着语言的演变速度比以往任何时候都要快。这也帮助我们更快地采用新特性，因为我们不需要等待很多年才能在生产环境中使用它们。
- en: Currently, the latest version of the language is ECMA-262 2023 ([https://tc39.es/ecma262/](https://tc39.es/ecma262/)),
    which was released in June 2023.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，语言的最新版本是ECMA-262 2023（[https://tc39.es/ecma262/](https://tc39.es/ecma262/)），于2023年6月发布。
- en: What is included in the next version of JavaScript?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下一个版本的JavaScript将包括什么？
- en: In order to add new features to the language, the TC39 committee has a process
    that is divided into stages. Anybody can submit a proposal to the TC39 committee,
    but it is not an easy task, because the proposal needs to be approved by the committee
    before it is implemented.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向语言添加新特性，TC39委员会有一个分为几个阶段的过程。任何人都可以向TC39委员会提交提案，但这并不是一件容易的事情，因为提案在实施之前需要得到委员会的批准。
- en: You can find all the proposals in the TC39 GitHub repository ([https://github.com/tc39/proposals](https://github.com/tc39/proposals)).
    You can participate in the discussions and get involved in the community.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在TC39的GitHub仓库中找到所有提案（[https://github.com/tc39/proposals](https://github.com/tc39/proposals)）。你可以参与讨论并融入社区。
- en: What is not included in the JavaScript specification?
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript规范中不包括什么？
- en: The JavaScript specification is very big, but it does not include many APIs
    that are commonly used in JavaScript applications, such as browser APIs and Node.js
    APIs.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript规范非常大，但它不包括许多在JavaScript应用程序中常用的API，例如浏览器API和Node.js API。
- en: If you are using JavaScript in the browser, you can use browser APIs, such as
    the **Document Object Model** (**DOM**). If you are using JavaScript in Node.js,
    you can use Node.js APIs, such as the filesystem or HTTP.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在浏览器中使用JavaScript，你可以使用浏览器API，例如**文档对象模型**（**DOM**）。如果你正在Node.js中使用JavaScript，你可以使用Node.js
    API，例如文件系统或HTTP。
- en: At the end of the day, JavaScript is just a programming language. If you are
    used to building JavaScript applications in the browser, you might be familiar
    with many APIs that are not included in the JavaScript specification and are not
    available in Node.js. For example, the window object ([https://developer.mozilla.org/en-US/docs/Web/API/Window](https://developer.mozilla.org/en-US/docs/Web/API/Window))
    is available in the browser, but it is not available in Node.js.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，JavaScript 只是一种编程语言。如果你习惯在浏览器中构建 JavaScript 应用程序，你可能熟悉许多不在 JavaScript 规范中包含且在
    Node.js 中不可用的 API。例如，window 对象([https://developer.mozilla.org/en-US/docs/Web/API/Window](https://developer.mozilla.org/en-US/docs/Web/API/Window))在浏览器中可用，但在
    Node.js 中不可用。
- en: Now that we know how the specification works, it is time to explore the JavaScript
    documentation in the next section.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了规范的工作方式，是时候在下一节中探索 JavaScript 文档了。
- en: Exploring JavaScript documentation
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 JavaScript 文档
- en: While ECMA-262 ([https://262.ecma-international.org/14.0/](https://262.ecma-international.org/14.0/))
    is a great source of information, it is not very beginner-friendly.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 ECMA-262 ([https://262.ecma-international.org/14.0/](https://262.ecma-international.org/14.0/))
    是一个很好的信息来源，但它对初学者来说并不友好。
- en: The most complete source of information is the MDN Web Docs ([https://developer.mozilla.org/en-US/docs/Web/JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript)),
    which is a community-driven documentation. It is very comprehensive, and it is
    updated regularly and even translated into other languages.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最完整的信息来源是 MDN Web Docs ([https://developer.mozilla.org/en-US/docs/Web/JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript))，这是一个由社区驱动的文档。它非常全面，定期更新，甚至被翻译成其他语言。
- en: If you are familiar with frontend development, you might have used the MDN Web
    Docs before, because it is the main source of information for browser APIs, such
    as the DOM ([https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction))
    and the Fetch API ([https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉前端开发，你可能之前使用过 MDN Web Docs，因为它是浏览器 API（如 DOM [https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction)
    和 Fetch API [https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)）的主要信息来源。
- en: If are looking for more concise documentation, you can use W3Schools ([https://www.w3schools.com/js/default.asp](https://www.w3schools.com/js/default.asp)),
    which is a great source of information for beginners, with a lot of examples.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更简洁的文档，可以使用 W3Schools ([https://www.w3schools.com/js/default.asp](https://www.w3schools.com/js/default.asp))，它是初学者的绝佳信息来源，有很多示例。
- en: Finally, if you are looking for a specific answer to a question, you can use
    Stack Overflow ([https://stackoverflow.com/questions/tagged/javascript](https://stackoverflow.com/questions/tagged/javascript)),
    which is a community-driven Q&A website.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你在寻找某个问题的具体答案，可以使用 Stack Overflow ([https://stackoverflow.com/questions/tagged/javascript](https://stackoverflow.com/questions/tagged/javascript))，这是一个由社区驱动的问答网站。
- en: In the next section, we will learn how we can use linting tools to improve our
    JavaScript code easily.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用代码检查工具轻松地改进我们的 JavaScript 代码。
- en: Linting JavaScript code
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查 JavaScript 代码
- en: Linting is the process of running a program that will analyze your code for
    potential errors. It is very useful in catching errors before running your code,
    so you can fix them before they cause any issues.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 代码检查是运行一个程序的过程，该程序将分析你的代码以查找潜在的错误。在运行代码之前捕捉错误非常有用，这样你就可以在它们造成任何问题之前修复它们。
- en: JavaScript is a very flexible language, which means that it is very easy to
    make mistakes. As you get more used to it, you will make fewer mistakes, but it
    is always good to have a linter to help you.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是一种非常灵活的语言，这意味着很容易犯错。随着你对它的熟悉程度增加，你犯的错误会越来越少，但始终有一个代码检查器来帮助你总是好的。
- en: In the next chapters, we will use ESLint ([https://eslint.org/](https://eslint.org/))
    to lint our code, but there are other options available, such as JSLint ([https://www.jslint.com/](https://www.jslint.com/))
    and JSHint ([https://jshint.com/](https://jshint.com/)).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用 ESLint ([https://eslint.org/](https://eslint.org/)) 来检查我们的代码，但还有其他选项可用，例如
    JSLint ([https://www.jslint.com/](https://www.jslint.com/)) 和 JSHint ([https://jshint.com/](https://jshint.com/))。
- en: Configuring a linter is not a trivial task, but it is worth the effort. There
    are many rules available, and it is not easy to know which ones to use. I highly
    recommend that you use the standard rules ([https://standardjs.com/](https://standardjs.com/)),
    which are one of the most popular and used by many open source projects (including
    Node.js, Express, and MongoDB) and companies. You can find all the rules available
    on the JavaScript Standard Style page ([https://standardjs.com/rules.html](https://standardjs.com/rules.html)).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 配置代码检查器不是一项简单的工作，但这是值得努力的。有许多规则可供选择，而且很难知道哪些规则应该使用。我强烈建议您使用标准规则 ([https://standardjs.com/](https://standardjs.com/))，这是最受欢迎的规则之一，被许多开源项目（包括
    Node.js、Express 和 MongoDB）和公司所使用。您可以在 JavaScript Standard Style 页面上找到所有可用的规则 ([https://standardjs.com/rules.html](https://standardjs.com/rules.html))。
- en: In *Figure 3**.1*, you can see how the standard is used to review the source
    code of the project. It will recommend what to do in order to follow the configured
    rules.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 3**.1 中，您可以了解标准是如何用于审查项目源代码的。它将推荐如何遵循配置的规则。
- en: '![Figure 3.1 – Screenshot from GitHub Codespaces](img/B21678_03_01.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – GitHub Codespaces 的截图](img/B21678_03_01.jpg)'
- en: Figure 3.1 – Screenshot from GitHub Codespaces
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – GitHub Codespaces 的截图
- en: In the next section, we will learn how to document our own code, so it becomes
    easier to maintain.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何记录我们的代码，使其更容易维护。
- en: Commenting JavaScript code
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注释 JavaScript 代码
- en: 'You have multiple options to include comments in your code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您有多种方式在代码中包含注释：
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you are new to JavaScript, I recommend you use a lot of comments to help
    you understand what is going on in your code. As you become more experienced,
    you will need fewer comments. Comments also help other developers to read and
    understand your code.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是 JavaScript 的初学者，我建议您使用大量的注释来帮助您理解代码中的内容。随着您经验的增加，您将需要更少的注释。注释还有助于其他开发者阅读和理解您的代码。
- en: Using JSDoc
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 JSDoc
- en: If you need guidance on how to write good comments, you can use the JSDoc ([https://jsdoc.app/](https://jsdoc.app/))
    syntax. Another additional benefit of using JSDoc is that you can use it to autogenerate
    documentation for your code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要有关如何编写良好注释的指导，您可以使用 JSDoc ([https://jsdoc.app/](https://jsdoc.app/)) 语法。使用
    JSDoc 的另一个额外好处是，您可以使用它来自动生成代码的文档。
- en: 'This is quite a popular solution. For example, Lodash uses this approach. Use
    the following links to check out how the `_.chunk` method is documented:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当流行的解决方案。例如，Lodash 就使用这种方法。使用以下链接查看 `_.chunk` 方法的文档：
- en: 'JSDoc in practice: [https://github.com/lodash/lodash/blob/4.17.15/lodash.js#L6818](https://github.com/lodash/lodash/blob/4.17.15/lodash.js#L6818)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSDoc 实践：[https://github.com/lodash/lodash/blob/4.17.15/lodash.js#L6818](https://github.com/lodash/lodash/blob/4.17.15/lodash.js#L6818)
- en: 'Documentation automatically generated by JSDocs: [https://lodash.com/docs/4.17.15#chunk](https://lodash.com/docs/4.17.15#chunk)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由 JSDoc 自动生成的文档：[https://lodash.com/docs/4.17.15#chunk](https://lodash.com/docs/4.17.15#chunk)
- en: In the next section, we will learn how to use `console` to speed up our debugging
    process.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用 `console` 来加速我们的调试过程。
- en: Printing values and debugging
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印值和调试
- en: 'The `console` object is non-standard; it is not part of the JavaScript language,
    but it is provided by the browser and Node.js. You can use it to print messages
    to the console, which is very useful for debugging purposes and for the purposes
    of this book, to follow along with the examples. It is quite common to use it
    to print the value of a variable. Take the following example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`console` 对象是非标准的；它不是 JavaScript 语言的组成部分，但它由浏览器和 Node.js 提供。您可以使用它将消息打印到控制台，这对于调试目的以及本书的示例跟踪非常有用。通常，人们会使用它来打印变量的值。以下是一个例子：'
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Yes, you can use `console.log` to print multiple values at the same time, separated
    by commas, and even include additional information to explain what you are printing.
    You don’t have to worry about the type of the variable as in other languages;
    `console.log` will do it for you.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，您可以使用 `console.log` 同时打印多个值，这些值由逗号分隔，甚至可以包含额外的信息来解释您正在打印的内容。您不必担心变量的类型，就像在其他语言中一样；`console.log`
    会为您处理。
- en: 'In some cases, you will need to help `console.log` print the value of a variable;
    for example, if you want to print an object, sometimes you end up getting `[object,
    object]` or similar as the output message. In this case, you will need to use
    `console.log(JSON.stringify(object))` to print the object as a string:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能需要帮助 `console.log` 打印变量的值；例如，如果您想打印一个对象，有时您会得到 `[object, object]`
    或类似的输出消息。在这种情况下，您需要使用 `console.log(JSON.stringify(object))` 来将对象作为字符串打印：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Over time, the JavaScript engines improve the `console` output, so this simple
    example might be printed as expected in your browser; but certain complex objects
    might still need to be stringified, for example, the response from a long HTTP
    request.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，JavaScript 引擎改进了 `console` 输出，因此这个简单的示例可能在您的浏览器中按预期打印；但某些复杂对象可能仍然需要转换为字符串，例如，来自长时间HTTP请求的响应。
- en: Important note
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The `console` object offers many methods to print the information in different
    formats, which will improve your developer experience a lot. Documentation is
    available for web browsers ([https://developer.mozilla.org/en-US/docs/Web/API/console](https://developer.mozilla.org/en-US/docs/Web/API/console))
    and for Node.js ([https://nodejs.org/api/console.html](https://nodejs.org/api/console.html)).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`console` 对象提供了许多方法来以不同格式打印信息，这将大大提高您的开发者体验。文档可在网络浏览器中查看（[https://developer.mozilla.org/en-US/docs/Web/API/console](https://developer.mozilla.org/en-US/docs/Web/API/console)）和Node.js中查看（[https://nodejs.org/api/console.html](https://nodejs.org/api/console.html)）。'
- en: In the next section, we will learn how JavaScript uses constants and variables
    to store the information that we need when building applications.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习JavaScript如何使用常量和变量来存储我们在构建应用程序时所需的信息。
- en: Variables and constants
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量和常量
- en: We use variables to store values, and we use constants to store values that
    will not change. In JavaScript, we can use the `let` keyword to declare a variable
    and the `const` keyword to declare a constant. Before ES6, we could only use the
    `var` keyword to declare variables, but it is not recommended to use it anymore.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用变量来存储值，使用常量来存储不会改变的值。在JavaScript中，我们可以使用 `let` 关键字来声明变量，使用 `const` 关键字来声明常量。在ES6之前，我们只能使用
    `var` 关键字来声明变量，但现在不建议再使用它。
- en: Naming conventions
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名规范
- en: In JavaScript, it is very common to use *camelCase* to name variables and constants,
    but other conventions are supported too, such as *snake_case* and *PascalCase*.
    It is also possible to start variables with symbols, but it is not recommended.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，使用 *camelCase* 命名变量和常量非常常见，但也支持其他规范，例如 *snake_case* 和 *PascalCase*。变量也可以以符号开头，但通常不推荐这样做。
- en: 'There are a few limitations that we need to consider when naming variables
    and constants:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在命名变量和常量时，我们需要考虑一些限制：
- en: Avoid starting with a symbol, such as `$resource`
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免以符号开头，例如 `$resource`
- en: Don’t start with a number, such as `1variable`
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要以数字开头，例如 `1variable`
- en: Don’t use spaces, such as `const my variable = 1`
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要使用空格，例如 `const my variable = 1`
- en: Don’t use reserved words, such as `const const = "``constant"`
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '不要使用保留字，例如 `const const = "``constant"` '
- en: let versus const
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`let` 与 `const`'
- en: 'We use `let` to declare variables and `const` to declare constants. The main
    difference is that we can reassign a value to a variable, but we cannot reassign
    a value to a constant. Here is an example of reassigning a value to a variable:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `let` 来声明变量，使用 `const` 来声明常量。主要区别在于我们可以重新分配变量的值，但不能重新分配常量的值。以下是将值重新分配给变量的示例：
- en: '[PRE3]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As we can see here, we cannot reassign a value to a constant:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们不能将值重新分配给常量：
- en: '[PRE4]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It is important to notice that we can change the value of a constant if the
    value is an object, but we cannot reassign a new value to the constant:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，如果常量的值是对象，我们可以更改其值，但不能将新值重新分配给常量：
- en: '[PRE5]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Later in this chapter, we will explore objects in more detail, and we will understand
    these mutations deeper.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面部分，我们将更详细地探讨对象，并更深入地理解这些突变。
- en: In JavaScript, there is another mechanism that you need to understand. Hoisting
    is a behavior in JavaScript where variable and function declarations are moved
    to the top of their containing scope during the compilation phase. This is done
    to optimize the code, but it can have some side effects. You can find a great
    guide at [https://www.freecodecamp.org/news/what-is-hoisting-in-javascript-3](https://www.freecodecamp.org/news/what-is-hoisting-in-javascript-3).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，还有一个你需要了解的机制。提升（Hoisting）是 JavaScript 中的一个行为，在编译阶段，变量和函数声明会被移动到它们包含的作用域的顶部。这样做是为了优化代码，但可能会产生一些副作用。你可以在
    [https://www.freecodecamp.org/news/what-is-hoisting-in-javascript-3](https://www.freecodecamp.org/news/what-is-hoisting-in-javascript-3)
    找到一篇很好的指南。
- en: Now that we are clear on how variables and constants work, it is time to explore
    the different data types available in JavaScript in the next section.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经清楚变量和常量的工作方式，现在是时候探索 JavaScript 中可用的不同数据类型了。
- en: Understanding data types
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解数据类型
- en: 'In JavaScript, there are several primitive types. We can group them into two
    groups: before ES6 (`undefined`, `object`, `boolean`, `number`, `string`, and
    `function`) and after ES6 (`bigint` and `symbol`). In order to check the type
    of a variable, we can use the `typeof` operator.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，有几个原始类型。我们可以将它们分为两组：ES6 之前（`undefined`、`object`、`boolean`、`number`、`string`
    和 `function`）和 ES6 之后（`bigint` 和 `symbol`）。为了检查变量的类型，我们可以使用 `typeof` 操作符。
- en: undefined
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: undefined
- en: Not all languages have an `undefined` type, but JavaScript does. It is used
    to represent the absence of a value. It is also used as the default value for
    uninitialized variables.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有语言都有 `undefined` 类型，但 JavaScript 有。它用于表示值的缺失。它也用作未初始化变量的默认值。
- en: object
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: object
- en: The `object` type is used to represent a collection of data. It is a very generic
    type, and it is used to represent many different things, such as arrays (lists),
    objects (dictionaries), class instances, and `null`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`object` 类型用于表示数据集合。它是一个非常通用的类型，用于表示许多不同的事物，例如数组（列表）、对象（字典）、类实例和 `null`。'
- en: boolean
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: boolean
- en: The `boolean` type is used to represent a logical value. It can be either `true`
    or `false`. This type can be generated by using the `Boolean` function too, as
    everything in JavaScript can be converted to a `boolean` value.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`boolean` 类型用于表示逻辑值。它可以是 `true` 或 `false`。此类型也可以通过使用 `Boolean` 函数生成，因为 JavaScript
    中的任何内容都可以转换为 `boolean` 值。'
- en: number
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: number
- en: The `number` type is used to represent a numeric value. It can be either an
    integer or a floating-point number. It is also used to represent special numeric
    values such as `Infinity`, `-Infinity`, and `NaN` (which stands for Not a Number).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`number` 类型用于表示数值。它可以是整数或浮点数。它也用于表示特殊的数值，如 `Infinity`、`-Infinity` 和 `NaN`（代表“非数字”）。'
- en: string
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: string
- en: The `string` type is used to represent a sequence of characters. It can be created
    explicitly by using single quotes (`'`), double quotes (`"`), or backticks (``
    ` ``) or implicitly by using the `String` function or expressions.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`string` 类型用于表示字符序列。它可以通过使用单引号 (`''`), 双引号 (`"`), 或反引号（`` ` ``）显式创建，或者通过使用
    `String` 函数或表达式隐式创建。'
- en: function
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: function
- en: The `function` type is used to represent a function. Functions in JavaScript
    are very powerful. We will explore them in detail in this chapter. There are two
    ways to create a function, by using the `function` keyword or by using the arrow
    function syntax.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`function` 类型用于表示函数。JavaScript 中的函数非常强大。我们将在本章中详细探讨它们。创建函数有两种方式，一种是使用 `function`
    关键字，另一种是使用箭头函数语法。'
- en: bigint
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: bigint
- en: '`bigint` was introduced in ES6 in order to work with large numbers. `number`
    is limited to values between -(253 – 1) and 253 – 1'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`bigint` 在 ES6 中引入，以便处理大数字。`number` 限制在 -(253 – 1) 和 253 – 1 之间'
- en: symbol
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: symbol
- en: The `symbol` type is used to represent a unique identifier. It is a new type
    that was introduced in ES6; you won’t really need to be familiar with it to follow
    along with this book.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`symbol` 类型用于表示唯一标识符。它是在 ES6 中引入的新类型；你不需要真正熟悉它就能跟随这本书的内容。'
- en: In the next section, we will explore numbers in depth, including the Math built-in
    library, common operators used for comparison, and useful methods for converting
    numbers and strings.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将深入探讨数字，包括 Math 内置库、常用的比较运算符以及转换数字和字符串的有用方法。
- en: Exploring numbers
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索数字
- en: JavaScript has good support for mathematical operations and dates, but sometimes
    it can be tricker and more limited than other programming languages, so many developers
    use specialized libraries when the application requires advanced math. For example,
    if you need to work with vectors, matrices, or complex numbers, you should use
    a library such as Math.js ([https://mathjs.org/](https://mathjs.org/)).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 对数学运算和日期的支持良好，但有时它可能比其他编程语言更复杂、更有限，因此许多开发者在应用程序需要高级数学时使用专门的库。例如，如果你需要处理向量、矩阵或复数，你应该使用
    Math.js 这样的库 ([https://mathjs.org/](https://mathjs.org/))。
- en: 'Here is a typical example of the floating-point precision problem:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是浮点精度问题的典型示例：
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see, the result of `0.1 + 0.2` is not `0.3`, but `0.30000000000000004`.
    This is because JavaScript uses the IEEE 754 standard ([https://en.wikipedia.org/wiki/IEEE_754](https://en.wikipedia.org/wiki/IEEE_754))
    to represent numbers, and it is not possible to represent all decimal numbers
    in binary. This is a common problem in many programming languages; it is not an
    exclusively JavaScript problem. But you can solve it by using the `Number` and
    `toPrecision` functions as you will implicitly convert from number to string and
    then back to number:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，`0.1 + 0.2` 的结果是 `0.3`，而不是 `0.30000000000000004`。这是因为 JavaScript 使用 IEEE
    754 标准 ([https://en.wikipedia.org/wiki/IEEE_754](https://en.wikipedia.org/wiki/IEEE_754))
    来表示数字，并且无法用二进制表示所有十进制数字。这是许多编程语言中常见的难题；这并不是 JavaScript 独有的问题。但你可以通过使用 `Number`
    和 `toPrecision` 函数来解决这个问题，你将隐式地将数字转换为字符串，然后再将其转换回数字：
- en: '[PRE7]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, there are some edge cases that are not easy to understand or
    solve intuitively. Most of the time, you will not need to worry about this, but
    it is important to know that this problem exists and you can use libraries if
    you are not experienced enough with numbers in JavaScript.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，有一些边缘情况不容易直观理解或解决。大多数时候，你不需要担心这个问题，但重要的是要知道这个问题存在，如果你在 JavaScript 中对数字不够熟悉，你可以使用库。
- en: Arithmetic operators
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算术运算符
- en: JavaScript has the expected arithmetic operators, `+`, `-`, `*`, `/`, `%`, and
    `**`, and indicates priority with brackets as in any modern language.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 有预期的算术运算符，`+`、`-`、`*`、`/`、`%` 和 `**`，并且像任何现代语言一样使用括号来表示优先级。
- en: Assignment operators
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 赋值运算符
- en: JavaScript has the expected assignment operators, `=`, `+=`, `-=`, `*=`, `/=`,
    `%=`, and `**=`, as in other languages.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 有预期的赋值运算符，`=`, `+=`, `-=`, `*=`, `/=`, `%=`, 和 `**=`，与其他语言类似。
- en: 'Also, you can use `++` and `--` to increment and decrement a variable. This
    operator can be added before or after the variable, and it will change the value
    of the variable before or after the operation:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以使用 `++` 和 `--` 来增加和减少变量的值。这个运算符可以放在变量之前或之后，它将在操作之前或之后改变变量的值：
- en: '[PRE8]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Additional info
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 其他信息
- en: 'JavaScript also supports bitwise operations, so you can work with a set of
    32 bits (zeros and ones), rather than decimal, hexadecimal, or octal numbers.
    You can check out the full documentation here: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#bitwise_operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#bitwise_operators).'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 还支持位运算，因此你可以处理一组 32 位（零和一），而不是十进制、十六进制或八进制数字。你可以在这里查看完整的文档：[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#bitwise_operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#bitwise_operators)。
- en: Useful methods
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有用的方法
- en: 'There are methods that are key to performing mathematical operations or transformations
    in daily work:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些方法对于在日常工作中进行数学运算或转换至关重要：
- en: '`Number.prototype.toFixed()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number.prototype.toFixed()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed)'
- en: '`Number.prototype.toPrecision()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number.prototype.toPrecision()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision)'
- en: '`Number.parseInt()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number.parseInt()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt)'
- en: '`Number.parseFloat()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number.parseFloat()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat)'
- en: The Math object
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数学对象
- en: JavaScript has a built-in `Math` object that provides a lot of useful methods
    to perform mathematical operations. I will list some of them here, but you can
    find the full list in the MDN documentation ([https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math)).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 内置了一个 `Math` 对象，它提供了许多用于执行数学运算的有用方法。以下是一些例子，但完整的列表可以在MDN文档中找到 ([https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math))。
- en: Useful methods
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有用的方法
- en: 'There are methods that are key to performing mathematical operations or transformations
    in daily work:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在日常工作中执行数学运算或转换的关键方法有：
- en: '`Math.random()`: Returns a pseudo-random floating-point number between 0 (inclusive)
    and 1 (exclusive) [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/random](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/random)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Math.random()`: 返回一个介于0（包含）和1（不包含）之间的伪随机浮点数 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/random](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/random)'
- en: '`Math.max()`: Returns the maximum numeric value among the arguments passed
    to it [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/max](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/max)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Math.max()`: 返回传递给它的参数中的最大数值 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/max](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/max)'
- en: '`Math.min()`: Returns the minimum numeric value among the arguments passed
    to it [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/min](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/min)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Math.min()`: 返回传递给它的参数中的最小数值 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/min](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/min)'
- en: '`Math.floor()`: Returns the resulting number from rounding a number down to
    the nearest integer that is less than or equal to the given number [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/floor](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/floor)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Math.floor()`: 返回将一个数字向下舍入到最接近的整数的结果，该整数小于或等于给定数字 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/floor](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/floor)'
- en: Other numbers
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他数字
- en: In JavaScript, there are some special values that are numbers, but they are
    not real numbers. These values are `NaN` and `Infinity`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，有一些特殊值是数字，但它们不是实数。这些值是 `NaN` 和 `Infinity`。
- en: Not a Number (NaN)
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不是一个数字 (NaN)
- en: '`NaN` is a special value that represents Not a Number. It is the result of
    an invalid or undefined mathematical operation, for example, dividing 0 by 0,
    or multiplying Infinity by 0\. You can use `isNaN()` to check whether a value
    is `NaN` ([https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/isNaN](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/isNaN)).'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaN` 是一个特殊值，表示“不是一个数字”。它是无效或未定义的数学运算的结果，例如，0除以0，或者无穷大乘以0。你可以使用 `isNaN()` 来检查一个值是否为
    `NaN` ([https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/isNaN](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/isNaN))。'
- en: Infinity
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无穷大
- en: '`Infinity` is a special value that represents infinity. It is the result of
    a mathematical operation that exceeds the largest possible number. You can use
    `isFinite()` to check whether a value is finite ([https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/isFinite](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/isFinite)).'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`Infinity`是一个表示无穷大的特殊值。它是数学运算超过可能的最大数字的结果。你可以使用`isFinite()`来检查一个值是否是有限的（[https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/isFinite](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/isFinite)）。'
- en: In the next section, we will explore dates in depth.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将深入探讨日期。
- en: Exploring Dates object
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索日期对象
- en: Dates are a complex topic for any programming language or system as you need
    to take into account many things, such as time zones. If you need to work with
    dates intensively, consider using a library such as Lunox ([https://github.com/moment/luxon/](https://github.com/moment/luxon/))
    or date-fns ([https://date-fns.org/](https://date-fns.org/)).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何编程语言或系统来说，日期都是一个复杂的话题，因为你需要考虑许多因素，例如时区。如果你需要密集地处理日期，考虑使用像Lunox（[https://github.com/moment/luxon/](https://github.com/moment/luxon/)）或date-fns（[https://date-fns.org/](https://date-fns.org/)）这样的库。
- en: For more simple scenarios, you can use the built-in `Date` object and the Intl
    API ([https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl))
    to format dates.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更简单的场景，你可以使用内置的`Date`对象和Intl API（[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl)）来格式化日期。
- en: The API offers several ways to generate the Date object by using numbers, strings,
    or several arguments. Also, you have getters and setters to read and modify specific
    parts, such as the year or milliseconds. It is also possible to perform operations
    such as comparing or adding time.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 该API提供了多种方式通过使用数字、字符串或多个参数来生成日期对象。此外，你还有getter和setter来读取和修改特定的部分，例如年份或毫秒数。你也可以执行比较或添加时间等操作。
- en: For many years, the only way to format dates in JavaScript was using the `toLocaleString()`
    method. This method is still valid, but it has a lot of limitations, specifically,
    when you want to compare dates in a human-readable way (e.g., *3 days ago* or
    *2* *weeks ago*).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，在JavaScript中格式化日期的唯一方法就是使用`toLocaleString()`方法。这个方法仍然有效，但它有很多限制，特别是当你想要以人类可读的方式比较日期时（例如，*3天前*或*2周前*）。
- en: In the past, we needed to use external libraries to achieve this, but now we
    can use the Intl API ([https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl))
    to format dates.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，我们需要使用外部库来实现这一点，但现在我们可以使用Intl API（[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl)）来格式化日期。
- en: 'In the following code, you can see how to generate, manipulate, and format
    dates:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，你可以看到如何生成、操作和格式化日期：
- en: '[PRE9]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The result may vary on your machine as it will have been some time since I wrote
    this code. Therefore, keep in mind that the output you observe may differ from
    mine.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我写这段代码已经有一段时间了，所以结果可能会因机器而异。因此，请记住，你观察到的输出可能与我不同。
- en: Important note
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The TC39 is doing a great job at consolidating this API, which includes a lot
    of features to format dates, numbers, currencies, and more. I recommend you follow
    the proposal’s progress and implementation in the JavaScript engines.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: TC39正在很好地整合这个API，它包括许多用于格式化日期、数字、货币等功能。我建议你关注该提案在JavaScript引擎中的进展和实现。
- en: In the next section, we will learn how to use conditionals in JavaScript by
    using several tools that JavaScript provides.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过使用JavaScript提供的几个工具来学习如何使用条件语句。
- en: Conditional statements
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件语句
- en: There are many ways to write conditional statements in JavaScript, but the most
    common are `if`, `switch`, and the ternary operator (`?:`).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中编写条件语句有许多方法，但最常见的是`if`、`switch`和三元运算符（`?:`）。
- en: Math comparison operators
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数学比较运算符
- en: 'For mathematical operations, we have the following operators: `>`, `<`, `>=`,
    and `<=`. They are used to compare two values and return a Boolean value. Their
    use is the same as in most modern programming languages.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数学运算，我们有以下运算符：`>`, `<`, `>=`, 和 `<=`。它们用于比较两个值并返回一个布尔值。它们的使用方式与大多数现代编程语言相同。
- en: Equality operators
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 等于运算符
- en: 'Equality operators are used to compare two values and return a Boolean value.
    There are two types of equality operators: strict (`===` and `!==`) and non-strict
    (`==` and `!=`).'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 相等运算符用于比较两个值并返回布尔值。有两种类型的相等运算符：严格（`===` 和 `!==`）和非严格（`==` 和 `!=`）。
- en: 'The strict equality operator cannot be used to compare non-primitive types
    (such as `object`, `array`, and `function`) and certain values such as `NaN`,
    as it will always return `false`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 严格相等运算符不能用于比较非原始类型（如 `object`、`array` 和 `function`）以及某些值（如 `NaN`），因为它总是会返回 `false`：
- en: '[PRE10]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It is not recommended to use non-strict equality operators, as they can lead
    to unexpected results, because this operator does not check the type of the values:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议使用非严格相等运算符，因为它们可能会导致意外结果，因为这个运算符不会检查值的类型：
- en: '[PRE11]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Logical operators
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑运算符
- en: It is possible to combine multiple conditions using logical operators. There
    are three logical operators, `&&`, `||`, and `!`, and some variations of them,
    `&&=` and `||=`, that are used to reduce the amount of code for certain operations.
    We won’t cover them all in this book.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用逻辑运算符组合多个条件。有三个逻辑运算符，`&&`、`||` 和 `!`，以及它们的某些变体，`&&=` 和 `||=`，这些变体用于减少某些操作的代码量。我们不会在这本书中涵盖所有这些内容。
- en: 'You can combine operators to build more complex validations:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将运算符组合起来构建更复杂的验证：
- en: '[PRE12]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The NOT operator (!)
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NOT 运算符 (!)
- en: 'The NOT operator is used to invert the value of a Boolean. It will return `true`
    if the value is false, and `false` if the value is true:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: NOT 运算符用于反转布尔值的值。如果值是假的，它将返回 `true`；如果值是真的，它将返回 `false`：
- en: '[PRE13]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This example is not clear about all the possibilities that are offered, so let’s
    try to build an analogy with a more verbose structure, `Boolean(value) === false`.
    Basically, the `!` operator converts the value to a Boolean and then compares
    it with a `false` value.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子并没有清楚地说明所有提供的选择，所以让我们尝试构建一个更冗长的结构，`Boolean(value) === false` 的类比。基本上，`!`
    运算符将值转换为布尔值，然后与 `false` 值进行比较。
- en: Equality in JavaScript
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript 中的相等性
- en: 'Due to the nature of JavaScript, it is possible to use any value as a condition.
    The condition will be evaluated as a Boolean, and if the value is truthy, the
    condition will be `true`. If the value is falsy, the condition will be `false`.
    This can be a bit confusing, so let’s explore the `Boolean` method to understand
    how different data values are transformed:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 JavaScript 的特性，可以使用任何值作为条件。条件将被评估为布尔值，如果值是真值，条件将为 `true`。如果值是假值，条件将为 `false`。这可能会有些令人困惑，所以让我们来探索
    `Boolean` 方法，以了解不同数据值是如何转换的：
- en: '[PRE14]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We can conclude easily that empty values (such as `null`, `undefined`, an empty
    string, or `NaN`) and `0` are falsy, and values with complex data types (such
    as objects and functions) or non empty strings and non-zero numbers are truthy.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以很容易地得出结论，空值（如 `null`、`undefined`、空字符串或 `NaN`）和 `0` 是假值，而具有复杂数据类型（如对象和函数）或非空字符串和非零数字的值是真值。
- en: 'This is quite convenient when we want to check whether a value is empty or
    not, as in the following example:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要检查一个值是否为空时，这非常方便，如下面的例子所示：
- en: '[PRE15]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This Boolean transformation and comparison can turn into a very complex situation
    if you want to compare different data types and values, for example, `Boolean([])
    === Boolean({})`. You can explore this topic in detail in the MDN documentation
    ([https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness)).
    But in general, you don’t need to be an expert in this area to follow along with
    this book.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要比较不同数据类型和值，例如 `Boolean([]) === Boolean({})`，这种布尔转换和比较可能会变得非常复杂。您可以在 MDN
    文档中详细了解这个主题（[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness)）。但一般来说，您不需要在这个领域成为专家，就能跟随这本书的内容。
- en: Note
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can get a better understanding of this topic by exploring JavaScript Equality
    Table by Dorey at [https://github.com/dorey/Javascript-Equality-Table/](https://github.com/dorey/Javascript-Equality-Table/).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过探索 Dorey 的 JavaScript 相等表来更好地理解这个主题（[https://github.com/dorey/Javascript-Equality-Table/](https://github.com/dorey/Javascript-Equality-Table/)）。
- en: The nullish coalescing operator (??)
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空值合并运算符 (??)
- en: 'The nullish coalescing operator is a new operator that was introduced in ES2020\.
    It is used to check whether a value is `null` or `undefined`; if it is, it will
    return a default value:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 空值合并运算符是一个在 ES2020 中引入的新运算符。它用于检查一个值是否为 `null` 或 `undefined`；如果是，它将返回一个默认值：
- en: '[PRE16]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The if statement
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`if` 语句'
- en: 'The `if` statement is the most common way to write a conditional statement.
    It will execute the code inside the block if the condition is true. The `else`
    statement allows us to follow up when the condition is not met by executing the
    code that is in the `else` statement. The `else if` statement is a variation of
    the `if` statement. It will execute the code inside the block if the condition
    is true. If the condition is false, it will execute the code inside the `else`
    block. You can add as many `else if` statements as you need:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`if` 语句是编写条件语句最常见的方式。如果条件为真，它将执行块内的代码。`else` 语句允许我们在条件不满足时执行 `else` 语句中的代码。`else
    if` 语句是 `if` 语句的一种变体。如果条件为真，它将执行块内的代码。如果条件为假，它将执行 `else` 块内的代码。你可以根据需要添加任意多的 `else
    if` 语句：'
- en: '[PRE17]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You can change the values in `condition` and `condition2` in order to get more
    familiar with the behavior of the conditional structures.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以更改 `condition` 和 `condition2` 中的值，以便更熟悉条件结构的操作。
- en: return usage
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`return` 语句的使用'
- en: 'The `return` statement is widely used to avoid using `else` statements and
    allows for cleaner code. Here is an example:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`return` 语句被广泛用于避免使用 `else` 语句，并允许编写更干净的代码。以下是一个示例：'
- en: '[PRE18]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The switch statement
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`switch` 语句'
- en: The `switch` statement is a good option when you want to compare a variable
    against multiple values. It is good when you want to assign a value to a variable
    depending on a condition.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想将一个变量与多个值进行比较时，`switch` 语句是一个不错的选择。当你想根据条件给变量赋值时，它也很好用。
- en: The `switch` structure is composed of the `switch` keyword, followed by the
    variable that you want to compare, and then a block of `case` statements. Each
    `case` statement is composed of the `case` keyword, followed by the value that
    you want to compare, "and then a double colon (:). After the double colon," you
    can write the code that you want to execute if the condition is true. The `default`
    statement is optional, and it will be executed if none of the `case` statements
    are true, like `else` when using `if` statements.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`switch` 结构由 `switch` 关键字组成，后面是你想要比较的变量，然后是一系列 `case` 语句。每个 `case` 语句由 `case`
    关键字组成，后面是你想要比较的值，然后是一个双冒号 `:`。在双冒号之后，你可以编写如果条件为真时你想要执行的代码。`default` 语句是可选的，如果没有任何
    `case` 语句为真，它将被执行，就像使用 `if` 语句时的 `else` 一样。'
- en: 'The `break` statement is used to stop the execution of the `switch` statement.
    If you don’t add the `break` statement, the code will continue executing the next
    `case` statement. Here we have a combined example:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`break` 语句用于停止 `switch` 语句的执行。如果你没有添加 `break` 语句，代码将继续执行下一个 `case` 语句。以下是一个组合示例：'
- en: '[PRE19]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Ternary operator
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 三元运算符
- en: The ternary operator is shorthand for the `if` and `else` statements. It is
    a good option when you want to assign a value to a variable depending on a condition.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 三元运算符是 `if` 和 `else` 语句的简写。当你想根据条件给变量赋值时，它是一个不错的选择。
- en: 'The structure is composed of the condition, followed by a question mark, `?`,
    then the value that you want to assign if the condition is true, followed by a
    double colon (:), and then the value that you want to assign if the condition
    is false: `condition ? valueIfTrue :` `valueIfFalse`.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '结构由条件组成，后面跟着一个问号 `?`，然后是如果条件为真时你想要分配的值，接着是一个双冒号 `:`, 然后是如果条件为假时你想要分配的值：`condition
    ? valueIfTrue : valueIfFalse`。'
- en: 'Let’s see an example with the `if` and `else` statements:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过 `if` 和 `else` 语句的示例来看一下：
- en: '[PRE20]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The ternary operator can nest multiple ternary operators, but it is not recommended
    because it can be extremely difficult to read. Also, it is possible to use the
    ternary operator to do multiple operations, but it is not recommended because
    it can be extremely difficult to read even if you use parentheses.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 三元运算符可以嵌套多个三元运算符，但并不推荐，因为这可能会非常难以阅读。此外，可以使用三元运算符执行多个操作，但也不推荐，即使使用括号，它也可能非常难以阅读。
- en: Now that we are clear on how conditional structures work in JavaScript, it is
    time to explore loops in the next section.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经清楚 JavaScript 中条件结构的工作方式，现在是时候探索下一节中的循环了。
- en: Understanding loops
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解循环
- en: There are many ways to create loops in JavaScript, but the most common are the
    `for` and `while` statements and variations of them that are specific to arrays
    and objects. Also, functions in JavaScript can be used to create loops when using
    recursion. In this section, we will look at only the `for`, `while`, and `do...while`
    statements.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中创建循环有许多方法，但最常见的是 `for` 和 `while` 语句以及针对数组和对象的特定变体。此外，JavaScript
    中的函数也可以通过递归来创建循环。在本节中，我们将只查看 `for`、`while` 和 `do...while` 语句。
- en: while
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: while
- en: 'The `while` statement creates a loop that executes a block of code as long
    as the condition is true. The condition is evaluated before executing the block
    of code:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`while` 语句创建一个循环，只要条件为真，就会执行代码块。条件在执行代码块之前被评估：'
- en: '[PRE21]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: do...while
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: do...while
- en: 'The `do...while` statement creates a loop that executes a block of code at
    least once even if the condition is not met, and then repeats the loop as long
    as the condition is true. The condition is evaluated after executing the block
    of code:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`do...while` 语句创建一个循环，即使条件不满足，也会至少执行一次代码块，然后只要条件为真，就重复循环。条件在执行代码块之后被评估：'
- en: '[PRE22]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: for
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: for
- en: 'The `for` statement creates a loop that consists of three optional expressions,
    enclosed in parentheses and separated by semicolons, followed by a statement executed
    in the loop:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 语句创建一个循环，由三个可选表达式组成，这些表达式用括号括起来，并用分号分隔，然后是循环中执行的语句：'
- en: '[PRE23]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The first expression is executed before the loop starts. Usually, it is used
    to initialize the variable that will act as counter.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个表达式在循环开始之前执行。通常，它用于初始化将作为计数器的变量。
- en: The second expression is the condition that is evaluated before executing the
    block of code. If the condition is true, the block of code is executed. If the
    condition is false, the loop stops.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个表达式是在执行代码块之前评估的条件。如果条件为真，则执行代码块。如果条件为假，则循环停止。
- en: The third expression is executed after the block of code is executed. Usually,
    it is used to increment or decrement the counter variable.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个表达式在代码块执行之后执行。通常，它用于增加或减少计数器变量。
- en: 'This structure is quite flexible, and some developers tend to abuse it. Let’s
    see an example with bad readability:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这种结构相当灵活，一些开发者倾向于滥用它。让我们通过一个可读性差的例子来看看：
- en: '[PRE24]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The readability issues are due to the large number of variables defined and
    updated in the `for` loop. It is important to remember that we write code that
    other programmers can understand in the future. Let’s see the same code with a
    more readable approach:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 可读性问题是由于在 `for` 循环中定义和更新的变量数量很多。重要的是要记住，我们编写的代码是其他程序员将来可以理解的。让我们看看以更可读的方式编写的相同代码：
- en: '[PRE25]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You can already notice the difference; it takes less time and effort to understand
    it. In the next section, we will learn how to use strings.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经可以注意到区别；理解它需要更少的时间和精力。在下一节中，我们将学习如何使用字符串。
- en: Using strings in JavaScript
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 JavaScript 中使用字符串
- en: 'Strings are primitive values. They are a sequence of characters. There are
    three ways to create strings in JavaScript: using single quotes, `''`, double
    quotes, `"`, or backticks, `` ` ``.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串是原始值。它们是一系列字符。在 JavaScript 中创建字符串有三种方法：使用单引号 `'`、双引号 `"` 或反引号 `` ` ``。
- en: '[PRE26]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Strings are immutable, which means that once they are created, they cannot
    be modified, but you can overwrite the variables or references depending on the
    data structure. So, all the methods that you use to modify a string will return
    a new string (or array):'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串是不可变的，这意味着一旦它们被创建，就不能被修改，但你可以根据数据结构覆盖变量或引用。所以，你用来修改字符串的所有方法都将返回一个新的字符串（或数组）：
- en: 'Template strings allow you to use placeholders, `${}`, to insert variables
    or expressions inside a string. There is also added support for multiple lines:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 模板字符串允许你使用占位符 `${}` 在字符串中插入变量或表达式。还增加了对多行的支持：
- en: '[PRE27]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Important methods
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重要方法
- en: 'There are many ways to perform operations with strings, but in this section,
    we will see only the most important methods that you will use in your day-to-day
    work:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以执行字符串操作，但在这个部分，我们将只看到你在日常工作中最常用的最重要的方法：
- en: '`String.prototype.indexOf()`: Finds the index of the first occurrence of a
    specified substring within a string [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String.prototype.indexOf()`: 在字符串中查找指定子字符串首次出现的位置 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)'
- en: '`String.prototype.lastIndexOf()`: Finds the index of the last occurrence of
    a specified substring within a string [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf)'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String.prototype.lastIndexOf()`: 在字符串中查找指定子字符串最后一次出现的位置 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf)'
- en: '`String.prototype.search()`: Searches for a specified substring within a string
    [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/search](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/search)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String.prototype.search()`: 在字符串中搜索指定的子字符串 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/search](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/search)'
- en: '`String.prototype.includes()`: Determines whether one string contains another
    string [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/includes](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/includes)'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String.prototype.includes()`: 判断一个字符串是否包含另一个字符串 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/includes](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/includes)'
- en: '`String.prototype.match()`: Extracts matches of a regular expression pattern
    from a string [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/match](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/match)'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String.prototype.match()`: 从字符串中提取正则表达式模式的匹配项 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/match](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/match)'
- en: '`String.prototype.matchAll()`: Returns an iterator that yields all matches
    of a regular expression against a string [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll)'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String.prototype.matchAll()`: 返回一个迭代器，该迭代器生成字符串中正则表达式的所有匹配项 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll)'
- en: '`String.prototype.split()`: Splits a string into an array of substrings based
    on a specified separator [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/split](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/split)'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String.prototype.split()`: 根据指定的分隔符将字符串拆分为一个子字符串数组 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/split](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/split)'
- en: '`String.prototype.slice()`: Extracts a section of a string and returns it as
    a new string [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/slice](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/slice)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String.prototype.slice()`: 提取字符串的一部分并返回一个新的字符串 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/slice](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/slice)'
- en: '`String.prototype.trim()`: Removes whitespace characters from both ends of
    a string [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/trim](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/trim)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String.prototype.trim()`: 从字符串的两端删除空白字符 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/trim](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/trim)'
- en: '`String.prototype.replace()`: Finds and replaces substrings within a string
    [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/replace](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/replace)'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String.prototype.replace()`: 在字符串中查找并替换子字符串 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/replace](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/replace)'
- en: In the next section, we will learn how to use arrays, one of the most versatile
    data structures in JavaScript.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用数组，这是JavaScript中最灵活的数据结构之一。
- en: Exploring arrays
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索数组
- en: Arrays are non-primitive values; they are a collection of values. The values
    can be any type of value, including other arrays. Arrays are mutable, which means
    that you can modify them and the changes will be reflected in the original array.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是非原始值；它们是一组值的集合。值可以是任何类型的值，包括其他数组。数组是可变的，这意味着你可以修改它们，并且更改将在原始数组中反映出来。
- en: Arrays are zero-indexed, which means that the first element is at index 0, the
    second element is at index 1, and so on.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是零索引的，这意味着第一个元素位于索引0，第二个元素位于索引1，依此类推。
- en: 'The `Array.isArray()` method determines whether the passed value is an array:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`Array.isArray()` 方法确定传递的值是否为数组：'
- en: '[PRE28]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'As arrays are objects, you need to be careful because they can’t be compared
    with the `===` or `==` operator, because it will compare the references, not the
    values:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数组是对象，你需要小心，因为它们不能使用 `===` 或 `==` 操作符进行比较，因为这会比较引用，而不是值：
- en: '[PRE29]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Arrays have a `length` property that returns the number of elements in the array
    and provides an easy way to iterate over the array.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 数组有一个 `length` 属性，它返回数组中的元素数量，并提供了一种轻松遍历数组的方法。
- en: Basic operations
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本操作
- en: In this section, we will look at the most common operations that you will perform
    with arrays.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨你将使用数组的最常见的操作。
- en: Creating an array
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建数组
- en: 'There are many ways to create an array in JavaScript. The most common is using
    the array literal notation, `[]`, but you can also create an array from other
    data types, such as when you split a string, or using the `string.prototype.split()`
    method. The following is an example of creating an array using the array literal
    notation:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中创建数组有多种方法。最常见的是使用数组字面量表示法 `[]`，但你也可以从其他数据类型创建数组，例如当你分割一个字符串时，或者使用
    `string.prototype.split()` 方法。以下是一个使用数组字面量表示法创建数组的示例：
- en: '[PRE30]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `Array.of()` method creates a new array instance from a variable number
    of arguments, regardless of the number or type of the arguments:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`Array.of()` 方法可以从一个可变数量的参数创建一个新的数组实例，无论参数的数量或类型如何：'
- en: '[PRE31]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `Array.from()` method creates a new array instance from an array-like or
    iterable object:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`Array.from()` 方法可以从一个类似数组的对象或可迭代对象创建一个新的数组实例：'
- en: '[PRE32]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The spread operator, `...`, can be used to create a new array from an existing
    array or from a string:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展运算符 `...` 可以用来从一个现有的数组或字符串创建一个新的数组：
- en: '[PRE33]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Also, you can pass a map function as a second parameter so you can perform
    transformations when the array is created:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以将映射函数作为第二个参数传递，以便在创建数组时执行转换：
- en: '[PRE34]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Accessing items
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问项
- en: 'You can access an item in an array using the index of the item:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用项的索引来访问数组中的项：
- en: '[PRE35]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Replacing items
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替换项
- en: 'You can replace an item in an array using the index of the item:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用项的索引来替换数组中的项：
- en: '[PRE36]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Adding items
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加项
- en: 'You can add items to an array using two main methods:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用两种主要方法向数组中添加项：
- en: '`Array.prototype.push()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/push](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/push)'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.push()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/push](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/push)'
- en: '`Array.prototype.unshift()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift)'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.unshift()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift)'
- en: Important note
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is always preferable to add new items to the end of the array, because adding
    items to the beginning of the array is an expensive operation. This is because
    it requires re-indexing all the items in the array.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 总是最好将新项添加到数组的末尾，因为将项添加到数组的开头是一个昂贵的操作。这是因为它需要重新索引数组中的所有项。
- en: Removing items
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除项
- en: 'There are several methods that allow you to remove items from the array:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以让你从数组中删除项：
- en: '`Array.prototype.pop()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/pop](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/pop)'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.pop()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/pop](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/pop)'
- en: '`Array.prototype.shift()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/shift](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/shift)'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.shift()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/shift](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/shift)'
- en: '`Array.prototype.splice()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/splice](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.splice()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/splice](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)'
- en: Iterating over an array
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历数组
- en: As we saw at the beginning of this chapter, it is possible to iterate over an
    array using a `for` loop, but there are also other ways to iterate over an array.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章开头所看到的，可以使用 `for` 循环遍历数组，但还有其他方法可以遍历数组。
- en: JavaScript provides great support for declarative programming, which is especially
    useful when you need to iterate over arrays. So, let’s summarize the most common
    ways to iterate over an array.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 为声明式编程提供了很好的支持，这在需要遍历数组时特别有用。因此，让我们总结一下遍历数组最常见的方法。
- en: Most of these methods receive a function as a parameter, and it is executed
    for each item in the array. Depending on the method used and the data returned
    from the function will get one result or another.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数这些方法接收一个函数作为参数，并且该函数会对数组中的每个项执行。根据使用的方法和函数返回的数据，将得到一个或另一个结果。
- en: Another important thing to remember is that these methods can be chained together,
    so you can use one method after another and compose more complex operations.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要记住的重要事情是，这些方法可以串联在一起，因此可以在一个方法之后使用另一个方法，从而组合更复杂的操作。
- en: Iteration
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 遍历
- en: 'As arrays can store a lot of elements, it is important to get familiar with
    the methods that are provided by the array in order to properly iterate over them.
    The most common are `Array.prototype.map()` and `Array.prototype.forEach()`. In
    both cases, we will iterate over the array, but `Array.prototype.map()` will directly
    return a new array with the applied transformation. Let’s see an example comparing
    both methods:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数组可以存储大量元素，熟悉数组提供的方法对于正确遍历它们非常重要。最常见的是 `Array.prototype.map()` 和 `Array.prototype.forEach()`。在两种情况下，我们都会遍历数组，但
    `Array.prototype.map()` 会直接返回一个应用了转换的新数组。让我们通过一个比较这两种方法的例子来看一下：
- en: '[PRE37]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Validation
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证
- en: 'As arrays can contain any type of data, it is common to need to validate whether
    an array contains a specific item or whether all the items in the array match
    a condition. There are several methods, but the most common are as follows:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数组可以包含任何类型的数据，通常需要验证数组是否包含特定项，或者数组中的所有项是否满足某个条件。有几种方法，但最常见的是以下几种：
- en: '`Array.prototype.every()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/every](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/every)'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.every()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/every](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/every)'
- en: '`Array.prototype.some()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/some](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/some)'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.some()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/some](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/some)'
- en: '`Array.prototype.includes()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/includes](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.includes()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/includes](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)'
- en: Filtering
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过滤
- en: 'Arrays can store a lot of information, and it is quite common to store nested
    structures such as big objects. There are many ways to do filtering in JavaScript.
    The most important difference between them is what your expected output is as
    sometimes we will be interested in a new array with the filtered values, but other
    times we might want the position (index) of certain elements in the array. The
    most used method is `Array.prototype.filter()`, which is used to generate a new
    array with the elements that pass certain criteria. Let’s see an example:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以存储大量信息，存储嵌套结构，如大型对象，是很常见的。在JavaScript中，有许多进行过滤的方法。它们之间最重要的区别在于你期望的输出是什么，因为有时我们可能对包含过滤值的新的数组感兴趣，但其他时候我们可能想要数组中某些元素的（索引）位置。最常用的方法是
    `Array.prototype.filter()`，它用于生成一个新数组，包含通过某些标准的元素。让我们看一个例子：
- en: '[PRE38]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'There are several methods that you will find relevant in this category:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现这个类别中有几个相关的方法：
- en: '`Array.prototype.slice()`: Returns the copy of a portion of the array [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/slice](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.slice()`: 返回数组一部分的副本 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/slice](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)'
- en: '`Array.prototype.find()`: Returns the value of the first item in the array
    that satisfies the provided criteria [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/find](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/find)'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.find()`: 返回满足提供条件的数组中第一个元素的值 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/find](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/find)'
- en: '`Array.prototype.findIndex()`: Returns the index of the first item in the array
    that satisfies the criteria [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex)'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.findIndex()`: 返回满足条件的第一个元素的索引 [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex)'
- en: Utilities
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工具
- en: 'Sometimes you need to flatten an array of arrays. You can use the `array.flat()`
    method to do that:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你需要将一个数组数组展平。你可以使用 `array.flat()` 方法来实现这一点：
- en: '[PRE39]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Another common method is the `array.join()` method, which is used to join all
    the items in an array into a string:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的方法是 `array.join()` 方法，它用于将数组中的所有项连接成一个字符串：
- en: '[PRE40]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This is very useful when you need to create a string with a list of items,
    for example, when you need to create a list of items in HTML, XML, Markdown, and
    so on:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 这在需要创建一个包含项目列表的字符串时非常有用，例如，当需要创建HTML、XML、Markdown等项目列表时：
- en: '[PRE41]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'While working with data, it is very common that we need to sort the items in
    the array. This can be done with `array.sort()`. In general, it is better if we
    provide a function that specifies how to properly sort the items just to avoid
    unexpected results. Let’s see an example:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理数据时，我们经常需要根据数组中的项目进行排序。这可以通过 `array.sort()` 方法完成。通常，如果我们提供一个函数来指定如何正确排序项目，会更好，这样可以避免意外结果。让我们看一个例子：
- en: '[PRE42]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'There are several methods that are quite useful and you will find yourself
    using very frequently:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法非常有用，你可能会发现自己非常频繁地使用它们：
- en: '`Array.prototype.reverse()`: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.reverse()`: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)'
- en: '`Array.prototype.concat()`: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.concat()`: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)'
- en: '`Array.prototype.fill()`: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.fill()`: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)'
- en: '`Array.prototype.reduce()`: [https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.reduce()`：[https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)'
- en: Destructuring
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解构赋值
- en: ES6 introduced a new syntax for destructuring arrays and objects. The left-hand
    side of an assignment is now a pattern for extracting values from arrays and objects.
    This pattern can be used in variable declarations, assignments, function parameters,
    and function return values. Also, you can use default values (fail-soft) in case
    the value is not present in the array.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: ES6引入了解构数组和对象的新语法。赋值语句的左侧现在是一个用于从数组和对象中提取值的模式。此模式可用于变量声明、赋值、函数参数和函数返回值。此外，您还可以在数组中不存在值的情况下使用默认值（失败软）。
- en: 'In the following code sample, we can see the classic way to do a fail-soft:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码示例中，我们可以看到经典的失败软处理方式：
- en: '[PRE43]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The following snippet contains the same code but using ECMAScript 6 destructuring:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段包含相同的代码，但使用了ECMAScript 6的解构语法：
- en: '[PRE44]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: As you can see, this version is more compact. Currently, this is the more popular
    way to assign default values when it is possible to combine it with destructuring.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这个版本更为紧凑。目前，这是在可能结合解构的情况下分配默认值时更受欢迎的方法。
- en: Sets
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合
- en: 'ES6 introduces a new data structure called `Set`. A Set is a collection of
    values, where each value may occur only once. It can be used to store a collection
    of values, but it is not an array as it doesn’t have indexes. It is quite a common
    solution to remove duplicate values from an array, as we can see in the following
    code:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: ES6引入了一种名为`Set`的新数据结构。Set是一个值的集合，其中每个值只能出现一次。它可以用来存储值的集合，但它不是一个数组，因为它没有索引。它通常用于从数组中移除重复值，如下面的代码所示：
- en: '[PRE45]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: You can find more information about set-specific methods at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set).
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)找到有关特定集合方法的更多信息。
- en: In the next section, we will learn how to use objects, one of the most powerful
    data structures in JavaScript.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用对象，这是JavaScript中最强大的数据结构之一。
- en: Using objects in JavaScript
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在JavaScript中使用对象
- en: Objects are non-primitive values; they are a collection of properties. A property
    is a key-value pair. The key is always a string, and the value can be any type
    of value, including other objects.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 对象是非原始值；它们是属性的集合。属性是一个键值对。键始终是字符串，而值可以是任何类型的值，包括其他对象。
- en: Basic operations
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本操作
- en: Objects are the most versatile structure in JavaScript. In this section, we
    will learn how to create objects, how to access and modify their properties, and
    how to iterate over the properties of an object.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 对象是JavaScript中最灵活的结构。在本节中，我们将学习如何创建对象，如何访问和修改它们的属性，以及如何遍历对象的属性。
- en: Creating an object
  id: totrans-337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建对象
- en: 'You can create an object using the object literal syntax, that is, using curly
    braces:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用对象字面量语法创建对象，即使用花括号：
- en: '[PRE46]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You can also create an object and directly add properties:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以创建一个对象并直接添加属性：
- en: '[PRE47]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You can store any type of value in an object, including other objects or functions
    (methods):'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在对象中存储任何类型的值，包括其他对象或函数（方法）：
- en: '[PRE48]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Creating and accessing properties
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建和访问属性
- en: 'You can create a new property or overwrite existing ones in an object by assigning
    a value:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过赋值来创建新属性或覆盖现有属性：
- en: '[PRE49]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'You can also access the properties of an object using the bracket notation,
    which is useful when using programmatic access or when using keys with special
    characters or whitespaces:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用方括号表示法访问对象的属性，这在使用程序化访问或使用特殊字符或空格的键时很有用：
- en: '[PRE50]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Deleting properties
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除属性
- en: 'You can delete a property from an object using the `delete` operator or overwrite
    it to `undefined`:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`delete`运算符从对象中删除属性，或者将其覆盖为`undefined`：
- en: '[PRE51]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Iteration
  id: totrans-352
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历
- en: Let’s see how to iterate over the properties of an object, and how to get an
    array with the keys and values of an object.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何遍历对象的属性，以及如何获取包含对象键和值的数组。
- en: 'This is our base object:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的基础对象：
- en: '[PRE52]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'You can iterate over the properties of an object using the `for...in` loop:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`for...in`循环遍历对象的属性：
- en: '[PRE53]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'You can also use the `Object.keys()` method to get an array with the keys of
    an object, so you can use array-specific methods to manage the iteration, such
    as `array.prototype.forEach()`:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`Object.keys()`方法来获取一个包含对象键的数组，这样你就可以使用数组特定的方法来管理迭代，例如`array.prototype.forEach()`：
- en: '[PRE54]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'You can also use additional methods introduced recently in the language:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用语言中最近引入的额外方法：
- en: '`Object.values()`: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values)'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object.values()`: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values)'
- en: '`Object.entries()`: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries)'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object.entries()`: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries)'
- en: Shallow copy versus deep copy
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浅拷贝与深拷贝
- en: 'The way JavaScript works means that sometimes we don’t get the expected copy
    of a variable. Let’s see a simple example:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的工作方式意味着有时我们得不到变量的预期副本。让我们看看一个简单的例子：
- en: '[PRE55]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: This is quite a specific behavior of JavaScript that frustrates many developers.
    How is it possible that the original variable is modified when we modify the copy?
    The answer is that we are not copying the variable (*deep copy*) in all the scenarios;
    we are copying the reference to the variable (*shallow copy*).
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种相当特定的JavaScript行为，让许多开发者感到沮丧。当我们修改副本时，原始变量是如何被修改的呢？答案是，在所有场景中，我们并没有复制变量（*深拷贝*），我们复制的是变量的引用（*浅拷贝*）。
- en: Only the primitive types (*string, number, Boolean, null, undefined,* and *symbol*)
    are copied by value; the rest are copied by reference, so you actually get a reference
    to the original variable, like a shortcut.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 只有原始类型（*字符串、数字、布尔值、null、undefined* 和 *符号*）是通过值进行复制的；其余的都是通过引用复制的，所以你实际上得到的是原始变量的引用，就像一个快捷方式。
- en: 'This allows you to do some interesting things, such as create shortcut references
    for very nested objects:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许你做一些有趣的事情，例如为非常嵌套的对象创建快捷引用：
- en: '[PRE56]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: But, as you can see, this can lead to changes in the original object. This can
    be an unexpected behavior if we are not clear how the original structure was copied.
    It can be trickier to detect if you are using nested structures.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，正如你所看到的，这可能会导致原始对象的变化。如果我们不清楚原始结构是如何被复制的，这可能会是一个意外的行为。如果你使用嵌套结构，这可能会更难以检测。
- en: 'If you want to get a deep copy of a simple object, you can use `Object.assign()`
    or the spread operator, `...`:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要获取一个简单对象的深拷贝，你可以使用`Object.assign()`或扩展运算符`...`：
- en: '[PRE57]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'But the nested objects will be copied by reference, so you will get the same
    behavior as before:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 但是嵌套对象将通过引用进行复制，所以你将得到与之前相同的行为：
- en: '[PRE58]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: An alternative is to use a specialized library such as Lodash ([https://lodash.com/docs/4.17.15#cloneDeep](https://lodash.com/docs/4.17.15#cloneDeep))
    or transform it into JSON and digest the structure, but this has some limitations,
    such as not being able to copy functions or items that are not defined in the
    JSON specs ([https://datatracker.ietf.org/doc/html/rfc7159](https://datatracker.ietf.org/doc/html/rfc7159)).
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是使用专门的库，如Lodash ([https://lodash.com/docs/4.17.15#cloneDeep](https://lodash.com/docs/4.17.15#cloneDeep))，或者将其转换为JSON并消化其结构，但这有一些限制，例如无法复制函数或未在JSON规范中定义的项目
    ([https://datatracker.ietf.org/doc/html/rfc7159](https://datatracker.ietf.org/doc/html/rfc7159))。
- en: Merging objects
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象合并
- en: 'Merging two objects can be done with `Object.assign`, but you need to understand
    two things:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Object.assign`合并两个对象是可以的，但你需要了解两件事：
- en: The order is important, so the first item will be overwritten by the next item
    when they share common properties
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顺序很重要，所以当它们有共同属性时，第一个项目将被下一个项目覆盖。
- en: If the objects are complex data structures such as nested objects or arrays,
    then the final object will copy the references (shallow copy)
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果对象是复杂的数据结构，如嵌套对象或数组，则最终对象将复制引用（浅拷贝）
- en: 'Let’s see an example:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个例子：
- en: '[PRE59]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Destructuring
  id: totrans-382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解构
- en: 'Since ES6, JavaScript has provided destructuring assignment for objects, which
    is very handy for extracting and including values in objects. Let’s see an example
    with a simple object:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 自从ES6以来，JavaScript为对象提供了解构赋值，这对于提取和包含对象中的值非常有用。让我们用一个简单的对象来举个例子：
- en: '[PRE60]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'If we didn’t use destructuring, we would have to do something like this:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有使用解构赋值，我们就必须这样做：
- en: '[PRE61]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'But with destructuring, we can do it in a more concise way:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 但有了解构赋值，我们可以更简洁地做到这一点：
- en: '[PRE62]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Optional chaining (?.)
  id: totrans-389
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可选链（?.）
- en: 'The optional chaining operator is a new operator introduced in ES2020\. It
    allows you to access deeply nested properties of an object without worrying about
    whether the property exists or not. Before the optional chaining operator, you
    had to check whether the property exists before accessing it. This was quite tedious
    for very nested structures. Let’s see a practical example:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 可选链操作符是 ES2020 中引入的新操作符。它允许您在不担心属性是否存在的情况下访问对象的深层嵌套属性。在可选链操作符之前，您在访问属性之前必须检查该属性是否存在。对于非常嵌套的结构来说，这相当繁琐。让我们看看一个实际例子：
- en: '[PRE63]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Now that we are familiar with most of the data structures, it is time to explore
    functions in the next section.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了大多数数据结构，是时候在下一节探索函数了。
- en: Exploring functions
  id: totrans-393
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索函数
- en: Functions are one of the more meaningful structures in JavaScript. There are
    certain characteristics that make them different from other programming languages;
    for example, they are first-class citizens, which means that they can be assigned
    to a variable, passed as an argument to another function, or returned from another
    function.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是 JavaScript 中更有意义的结构之一。它们有一些特性使它们与其他编程语言不同；例如，它们是一等公民，这意味着它们可以被分配给变量、作为另一个函数的参数传递，或从另一个函数返回。
- en: The basics
  id: totrans-395
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础知识
- en: There are many advanced concepts related to functions, but in this section,
    we will just look at the basics of functions in JavaScript. We will start with
    the declaration, execution, and arguments using the `function` keyword. Then,
    we will focus on arrow functions and closures.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 与函数相关的先进概念有很多，但在这个部分，我们将只关注 JavaScript 中函数的基础知识。我们将从使用 `function` 关键字的声明、执行和参数开始。然后，我们将重点介绍箭头函数和闭包。
- en: Declaration
  id: totrans-397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 声明
- en: 'In essence, a function is a block of code that can be executed when it is called.
    In JavaScript, we can declare a function using the `function` keyword. The syntax
    is the following:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，函数是一段代码块，当它被调用时可以执行。在 JavaScript 中，我们可以使用 `function` 关键字声明一个函数。其语法如下：
- en: '[PRE64]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Execution
  id: totrans-400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行
- en: 'The function is not executed when it is declared; it is executed when it is
    called. To call a function, we just need to write the name of the function followed
    by parentheses. Take the following example:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 函数在声明时不会执行；它在被调用时执行。要调用一个函数，我们只需写出函数名后跟括号。以下是一个例子：
- en: '[PRE65]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Anonymous functions
  id: totrans-403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 匿名函数
- en: 'Functions can also be declared as a function expression. This is known as anonymous
    functions. A simple example is when we pass the function as an argument to another
    function, like when we use timers – `setTimeout`, in this case:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 函数也可以声明为函数表达式。这被称为匿名函数。一个简单的例子是我们将函数作为参数传递给另一个函数，比如当我们使用定时器时——在这个例子中是 `setTimeout`：
- en: '[PRE66]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Return values
  id: totrans-406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: 'A function can return a value using the `return` keyword. This value can be
    assigned to a variable or used in another function. Take the following example:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以使用 `return` 关键字返回一个值。这个值可以被分配给一个变量或在另一个函数中使用。以下是一个例子：
- en: '[PRE67]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Arguments
  id: totrans-409
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'Functions can receive arguments; these arguments are passed to the function
    when it is called. Take the following example:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以接收参数；这些参数在函数被调用时传递给函数。以下是一个例子：
- en: '[PRE68]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'You don’t need to specify the arguments; you can use the rest operator (`...`)
    to access the arguments. In this example, we will sum all the numbers passed to
    the function:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要指定参数；您可以使用剩余操作符 (`...`) 来访问参数。在这个例子中，我们将计算传递给函数的所有数字的总和：
- en: '[PRE69]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Arrow functions
  id: totrans-414
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 箭头函数
- en: 'One of the most important features introduced in ES6 is arrow functions. They
    are a new syntax for writing JavaScript functions, but they also introduce certain
    changes that are important to be aware of:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: ES6 中引入的最重要特性之一是箭头函数。它们是编写 JavaScript 函数的新语法，但它们也引入了一些重要的变化，需要注意：
- en: Arrow functions introduce a new syntax for writing functions
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箭头函数引入了编写函数的新语法
- en: Arrow functions are always anonymous
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箭头函数总是匿名的
- en: Syntax
  id: totrans-418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语法
- en: 'Since the beginning of JavaScript, we declared functions using the `function`
    keyword, as in the following example:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 从 JavaScript 的开始，我们就使用 `function` 关键字声明函数，如下例所示：
- en: '[PRE70]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The new syntax for writing arrow functions uses `=>` and does not use the `function`
    keyword. The following example is the same as the previous one but with the new
    syntax:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 编写箭头函数的新语法使用 `=>` 而不是 `function` 关键字。以下例子与上一个例子相同，但使用了新的语法：
- en: '[PRE71]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The new syntax has an implicit return, so if you want to return a value, you
    can do it without using the `return` keyword:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 新的语法有隐式的返回，所以如果你想返回一个值，你可以不使用`return`关键字来完成：
- en: '[PRE72]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The previous example can be translated to the previous syntax as follows:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将之前的例子翻译成之前语法的示例：
- en: '[PRE73]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Arrow functions can receive arguments, but if you want to receive more than
    one argument, you need to use parentheses:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头函数可以接收参数，但如果你想要接收多个参数，你需要使用括号：
- en: '[PRE74]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Behavior changes
  id: totrans-429
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行为变化
- en: Due to the fact that JavaScript has retro compatibility with older versions,
    arrow functions introduce certain changes in the behavior of the functions. The
    most important one is related to the `this` keyword.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 由于JavaScript与旧版本具有向后兼容性，箭头函数在函数的行为上引入了一些变化。其中最重要的与`this`关键字有关。
- en: Also, arrow functions do not have a `prototype` property, which means that they
    cannot be used as constructors or method handlers.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，箭头函数没有`prototype`属性，这意味着它们不能用作构造函数或方法处理器。
- en: Important note
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'The management of `this` in JavaScript can be a bit confusing and is quite
    advanced for the objectives of this book. If you want to learn more about it,
    you can read the MDN documentation: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this).'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中`this`的管理可能有点令人困惑，对于本书的目标来说相当高级。如果你想了解更多，可以阅读MDN文档：[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this)。
- en: Closures
  id: totrans-434
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 闭包
- en: This is one of the most popular and important concepts in JavaScript, but it
    is a bit advanced, and it is not easy to understand.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 这是JavaScript中最受欢迎和最重要的概念之一，但它有点高级，理解起来并不容易。
- en: So, what is a closure?
  id: totrans-436
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 那么，什么是闭包？
- en: 'Basically, a closure is a function returned by another function. Here, we have
    an example:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，闭包是由另一个函数返回的函数。这里有一个例子：
- en: '[PRE75]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'In this example, `outerFunction` returns `innerFunction`, so we can call `innerFunction`
    after calling `outerFunction`:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`outerFunction`返回`innerFunction`，因此我们可以在调用`outerFunction`之后调用`innerFunction`：
- en: '[PRE76]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Now, let’s achieve the same result using less code by doing both executions
    in the same statement:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过在同一语句中执行两个操作来用更少的代码实现相同的结果：
- en: '[PRE77]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: But how is this useful?
  id: totrans-443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 但这有什么用？
- en: 'The most important thing about closures is that they can access and even modify
    the scope of the parent function (code block and arguments), even after the parent
    function has returned. Let’s see a practical example:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 闭包最重要的特点是它们可以访问甚至修改父函数的作用域（代码块和参数），即使父函数已经返回。让我们看看一个实际例子：
- en: '[PRE78]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'In this example, we added the `initialValue` and `incrementalValue` arguments
    to the functions, and also, we defined the `counter` variable to store the counter’s
    current value. In practice, we can use this function to create a counter that
    starts from a specific value, and then we can increment it by a specific value.
    We can’t access the `counter` variable directly because it lives only in the scope
    within the function and not outside, but we can use the closure to access it and
    even manipulate the value:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们向函数添加了`initialValue`和`incrementalValue`参数，并且还定义了`counter`变量来存储计数器的当前值。在实践中，我们可以使用这个函数来创建一个从特定值开始的计数器，然后我们可以通过特定值来增加它。我们无法直接访问`counter`变量，因为它只存在于函数的作用域内，而不是外部，但我们可以使用闭包来访问它甚至操作它的值：
- en: '[PRE79]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: In this example, we saw the basic usage of closures, but they can be used for
    many other things. One of the most common usages is to create abstractions to
    manage third-party services such as databases and APIs.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们看到了闭包的基本用法，但它们可以用在很多其他事情上。最常见的一种用法是创建抽象来管理第三方服务，例如数据库和API。
- en: We will use this structure in the following chapters when using MongoDB and
    Express.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，当我们使用MongoDB和Express时，我们将使用这个结构。
- en: In the next section, we will learn how to create and manage classes, as well
    as how prototypical inherence works in JavaScript.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何创建和管理类，以及JavaScript中的原型继承是如何工作的。
- en: Creating and managing classes
  id: totrans-451
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和管理类
- en: Classes were introduced in ES6\. They are syntactic sugar over the prototype-based
    inheritance. Historically, JavaScript did not have formal classes as we can expect
    from the typical Object Oriented Programing (OOP) languages.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 类是在ES6中引入的。它们是原型继承的语法糖。从历史上看，JavaScript没有像我们通常从典型的面向对象编程（OOP）语言中期望的那样有正式的类。
- en: In this section, we will learn how to create classes and how to use them with
    ES6\. Also, we will explore how the prototypical inheritance is a key feature
    in maintaining retro compatibility and extends JavaScript’s core features.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何创建类以及如何使用ES6中的类。此外，我们还将探讨原型继承是如何成为维护向后兼容性和扩展JavaScript核心功能的关键特性。
- en: Creating a class
  id: totrans-454
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建类
- en: 'To create a class, we need to use the `class` keyword, and then we can define
    the default properties of the class using the `constructor` method:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个类，我们需要使用`class`关键字，然后我们可以使用`constructor`方法来定义类的默认属性：
- en: '[PRE80]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: In this example, we created a class called `Human` and then we created an instance
    of the class called `jane`. We can access the properties of the class using dot
    notation.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个名为`Human`的类，然后我们创建了名为`jane`的类的实例。我们可以使用点符号来访问类的属性。
- en: Class methods
  id: totrans-458
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类方法
- en: 'To define a method in a class, we need to use a similar syntax as we use for
    defining methods in objects:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 要在类中定义一个方法，我们需要使用与在对象中定义方法相似的语法：
- en: '[PRE81]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: In this example, we defined a method called `sayHello` in the `Human` class,
    then we created an instance of the class, and we called the method.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们在`Human`类中定义了一个名为`sayHello`的方法，然后我们创建了类的实例，并调用了该方法。
- en: Extending classes
  id: totrans-462
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展类
- en: 'We can extend classes using the `extends` keyword. This will allow us to inherit
    the properties and methods of the parent class:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`extends`关键字来扩展类。这将允许我们继承父类的属性和方法：
- en: '[PRE82]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: In this example, we created a class called `Colleague` that extends the `Human`
    class, then we created an instance of the class, and we called the methods and
    properties inherited from both classes.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个名为`Colleague`的类，它扩展了`Human`类，然后我们创建了类的实例，并调用了从两个类继承的方法和属性。
- en: Static methods
  id: totrans-466
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态方法
- en: 'Static methods are methods that can be called without instantiating the class.
    They are defined using the `static` keyword:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 静态方法是可以在不实例化类的情况下调用的方法。它们使用`static`关键字定义：
- en: '[PRE83]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Now, we can call the `speedLimits` method without instantiating the class:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以调用`speedLimits`方法而不需要实例化类：
- en: '[PRE84]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Getters and setters
  id: totrans-471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取器和设置器
- en: 'As in other languages that support object-oriented programming, you can define
    getters and setters using the `get` and `set` keywords, respectively. This will
    allow you to access and modify the properties of the instance in a more classic
    way:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 就像支持面向对象编程的其他语言一样，你可以使用`get`和`set`关键字分别定义获取器和设置器。这将允许你以更经典的方式访问和修改实例的属性：
- en: '[PRE85]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Summary
  id: totrans-474
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we explored JavaScript’s history and current state. We learned
    about the different versions of the language and how the language has evolved
    over time. We also learned about how the new features are added to the language.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了JavaScript的历史和当前状态。我们学习了语言的不同版本以及语言是如何随着时间的推移而演变的。我们还学习了新特性是如何添加到语言中的。
- en: Also, we learned how to find the best documentation about the language and how
    to use it to learn about the language in more depth.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还学习了如何找到关于语言的最佳文档，以及如何使用它来更深入地了解语言。
- en: Additionally, we explored how to use numbers, dates, conditional statements,
    loops, strings, arrays, objects, and functions, among others, in detail.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还详细探讨了如何使用数字、日期、条件语句、循环、字符串、数组、对象和函数等。
- en: Furthermore, we learned about classes and prototype-based inheritance and how
    it is a key feature to maintain retro compatibility and extends JavaScript’s core
    features.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还学习了类和基于原型的继承，以及它是维护向后兼容性和扩展JavaScript核心功能的关键特性。
- en: In the next chapter, we will learn about asynchronous programming with JavaScript.
    You will apply all the knowledge learned in this chapter to manage asynchronous
    code using different approaches, such as callbacks, promises, and async/await.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习使用JavaScript进行异步编程。你将应用在本章中学到的所有知识，通过不同的方法来管理异步代码，例如回调、Promise和async/await。
- en: Further reading
  id: totrans-480
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The Weird History of JavaScript: [https://www.youtube.com/watch?v=Sh6lK57Cuk4](https://www.youtube.com/watch?v=Sh6lK57Cuk4)'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript的奇怪历史：[https://www.youtube.com/watch?v=Sh6lK57Cuk4](https://www.youtube.com/watch?v=Sh6lK57Cuk4)
- en: 'A Brief History of JavaScript, talk by Brendan Eich (creator of JavaScript):
    [https://www.youtube.com/watch?v=qKJP93dWn40](https://www.youtube.com/watch?v=qKJP93dWn40)'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript简史，由JavaScript的创造者布兰登·艾奇（Brendan Eich）演讲：[https://www.youtube.com/watch?v=qKJP93dWn40](https://www.youtube.com/watch?v=qKJP93dWn40)
- en: 'TC39 Demystified, by Ujjwal Sharma: [https://www.youtube.com/watch?v=YLHhRpaPly8](https://www.youtube.com/watch?v=YLHhRpaPly8)'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'TC39 解密，作者 Ujjwal Sharma: [https://www.youtube.com/watch?v=YLHhRpaPly8](https://www.youtube.com/watch?v=YLHhRpaPly8)'
- en: 'Documenting the Web Platform, by Florian Scholz: [https://www.youtube.com/watch?v=f_M0vQcKiW4](https://www.youtube.com/watch?v=f_M0vQcKiW4)'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '记录网络平台，作者 Florian Scholz: [https://www.youtube.com/watch?v=f_M0vQcKiW4](https://www.youtube.com/watch?v=f_M0vQcKiW4)'
- en: 'TC39: From the Proposal to ECMAScript, Step by Step, by Romulo Cintra: [https://www.youtube.com/watch?v=h5pUuz2qqVQ](https://www.youtube.com/watch?v=h5pUuz2qqVQ)'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'TC39：从提案到 ECMAScript，一步步，作者 Romulo Cintra: [https://www.youtube.com/watch?v=h5pUuz2qqVQ](https://www.youtube.com/watch?v=h5pUuz2qqVQ)'
