- en: Chapter 8. Building a Simple Social App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章：构建简单的社交应用
- en: In this chapter, we are going to focus on learning how to create an Ionic application
    that has tabs using the Ionic tabs template. We will also have a look at some
    of the things that make up the tabs template and learn how to add features into
    it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于学习如何使用 Ionic 标签模板创建具有标签的 Ionic 应用。我们还将查看构成标签模板的一些内容，并学习如何将其添加到其中。
- en: The Ionic tabs application
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic 标签应用
- en: Tabs are a very common menu system in mobile apps. They provide users with a
    simple yet effective way to create independent views in an app that sort of act
    like apps within an app.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 标签是移动应用中非常常见的菜单系统。它们为用户提供了一种简单而有效的方式，在应用中创建类似应用内应用的自独立视图。
- en: '![The Ionic tabs application](img/00059.jpeg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Ionic 标签应用](img/00059.jpeg)'
- en: The preceding screenshot is a view of a sample Ionic tabs application. One great
    feature that a tabbed menu system provides is the ability to maintain the independent
    context within each individual tab menu. No matter where you are in the application,
    you always have the option of switching to another tab at any point. Navigation
    history is another feature that the tabs menu provides. You are able to navigate
    to different views within each tab, and you do not lose this navigation history
    when you switch back and forth between any tab menu. Now that we have some clarity
    about what the tabs application entails, let's go ahead and create a brand new
    tab application and look in detail at how it operates.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图是示例 Ionic 标签应用的视图。标签菜单系统提供的一个非常棒的功能是能够在每个单独的标签菜单中保持独立上下文。无论您在应用中的哪个位置，您都可以在任何时候切换到另一个标签。标签菜单还提供了导航历史记录功能。您可以在每个标签内导航到不同的视图，并且在您在任意标签菜单之间切换时不会丢失这个导航历史记录。现在我们已经对标签应用包含的内容有了清晰的认识，让我们继续创建一个新的标签应用，并详细查看其工作方式。
- en: Creating an Ionic tabs application
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Ionic 标签应用
- en: 'Creating an Ionic tabs application is not too different from creating the side
    menu and blank Ionic applications as we have done in the previous chapters of
    this book. We are going to create a new Ionic tabs application, and we will call
    this application `tabs-app`. To create this new application, fire up a terminal
    window and run the following command:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 Ionic 标签应用与我们在本书前几章中创建侧边菜单和空白 Ionic 应用并没有太大的不同。我们将创建一个新的 Ionic 标签应用，并将其命名为
    `tabs-app`。要创建这个新应用，请打开一个终端窗口并运行以下命令：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Using the preceding command, you will create your `tabs-app` ionic application
    successfully. The next thing we are going to do is to have an overview of the
    application we just created. To do this, simply open the `tabs-app` project in
    your favorite IDE. You should have a projects folder structure that looks similar
    to what I have in the following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的命令，您将成功创建 `tabs-app` ionic 应用。接下来，我们将对刚刚创建的应用进行概述。为此，只需在您最喜欢的 IDE 中打开 `tabs-app`
    项目。您应该有一个类似于以下截图所示的项目文件夹结构：
- en: '![Creating an Ionic tabs application](img/00060.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Ionic 标签应用](img/00060.jpeg)'
- en: Running the tabs-app application
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行 tabs-app 应用
- en: Now that we have created our app, let's go ahead and see it in action. To do
    this, fire up a terminal window on your computer and run your application using
    the `ionic serve` technique.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的应用，让我们来看看它的实际运行情况。为此，请在您的计算机上打开一个终端窗口，并使用 `ionic serve` 技巧运行您的应用。
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Make sure you are within your project's folder by running `cd tabs-app`. To
    run your app using the `ionic serve` technique, run the `ionic serve` command
    on your terminal.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您位于项目文件夹内，通过运行 `cd tabs-app`。要使用 `ionic serve` 技巧运行您的应用，请在终端中运行 `ionic serve`
    命令。
- en: You should see an application with three tabs that looks similar to what we
    have in the following screenshots.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个有三个标签的应用，其外观类似于以下截图。
- en: For iOS:![Running the tabs-app application](img/00061.jpeg)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 iOS：![运行 tabs-app 应用](img/00061.jpeg)
- en: For Android:![Running the tabs-app application](img/00062.jpeg)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Android：![运行 tabs-app 应用](img/00062.jpeg)
- en: Overview of the tabs-app application
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tabs-app 应用概述
- en: To begin to understand the life cycle of our `tabs-app` Ionic tabs application,
    we first need to have a look at the entry module of our application. Our entry
    module is normally specified within the `index.html` file of our app via the `ng-app`
    directive.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始理解我们的 `tabs-app` Ionic 标签应用的生命周期，我们首先需要查看我们应用的入口模块。我们的入口模块通常通过 `ng-app` 指令在应用的
    `index.html` 文件中指定。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `index.html` file is located in the `www` directory of your application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html` 文件位于你的应用程序的 `www` 目录中。'
- en: 'A look through your `index.html` will reveal a file that closely resembles
    what we have in the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看你的 `index.html` 文件，你会发现一个文件，这与以下屏幕截图中的内容非常相似：
- en: '![Overview of the tabs-app application](img/00063.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![tabs-app应用概览](img/00063.jpeg)'
- en: You will see an Angular module called `starter` specified as on the opening
    `<body>` tag of our page via the `ng-app` directive. This can be seen highlighted
    in the preceding screenshot. This `starter` module is normally located in our
    `app.js` file, and we are going to have a look at it to understand the module
    even more deeply.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到一个名为 `starter` 的Angular模块，它通过页面的 `<body>` 标签上的 `ng-app` 指令指定。这可以在前面的屏幕截图中看到高亮显示。这个
    `starter` 模块通常位于我们的 `app.js` 文件中，我们将深入研究它以更深入地理解该模块。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `app.js` file is located in the `www/js` path of you project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.js` 文件位于你的项目的 `www/js` 路径中。'
- en: 'Open your `app.js` file and pay close attention to the `.config()` function
    where your routes are configured. Pay close attention to the first route definition
    of a route called `tab`. This route definition is represented in the following
    screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的 `app.js` 文件，并密切注意配置你的路由的 `.config()` 函数。特别注意名为 `tab` 的第一个路由定义。这个路由定义在下面的屏幕截图中表示：
- en: '![Overview of the tabs-app application](img/00064.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![tabs-app应用概览](img/00064.jpeg)'
- en: This `tab` state is an abstract state. An **abstract state** in Angular is a
    state that you cannot directly navigate to but which can contain child states
    that can be navigated to. This is a great way to create some sort of hierarchy
    for your states.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `tab` 状态是一个抽象状态。在Angular中，一个**抽象状态**是一个你不能直接导航到的状态，但它可以包含可以被导航到的子状态。这是一种为你的状态创建某种层次结构的好方法。
- en: Based on the state definition of the tabs as highlighted in the preceding screenshot,
    you can see that it references `templateUrl` to the `tabs.html` file contained
    in the `templates/template.html` directory. To understand how Ionic works with
    tabs, let's explore the `tabs.html` file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面屏幕截图中高亮的tabs状态定义，你可以看到它引用了 `templateUrl` 到位于 `templates/template.html` 目录中的
    `tabs.html` 文件。为了理解Ionic如何与标签页一起工作，让我们来探索 `tabs.html` 文件。
- en: Overview of the tabs.html file
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tabs.html文件概览
- en: 'When you open your `tabs.html` file, you will see something that closely resembles
    what I have in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开你的 `tabs.html` 文件时，你会看到一些内容，这与我在以下屏幕截图中的内容非常相似：
- en: '![Overview of the tabs.html file](img/00065.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![tabs.html文件概览](img/00065.jpeg)'
- en: You will clearly see that the entire markup is wrapped within the `<ion-tabs>`
    element. This `<ion-tabs>` element is the root element that acts like a container
    for the tabs that you declare in your Ionic tabs application. You can see that
    the opening `<ion-tabs>` tag also has a `class` attribute with some built-in Ionic
    CSS classes provided. This is because the `<ion-tabs>` element is just like every
    other element and is submissive to some CSS styling.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你会清楚地看到整个标记都被 `<ion-tabs>` 元素包裹。这个 `<ion-tabs>` 元素是像容器一样作用于你声明在Ionic标签应用中的标签页的根元素。你会看到打开的
    `<ion-tabs>` 标签还有一个带有一些内置Ionic CSS类的 `class` 属性。这是因为 `<ion-tabs>` 元素就像其他任何元素一样，并服从某些CSS样式。
- en: The <ion-tab> element
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`<ion-tab>` 元素'
- en: Within the `<ion-tabs>` element, you will see three distinct `<ion-tab>` elements.
    The `<ion-tab>` element is the element used to create a tab and must be a child
    element of the `<ion-tabs>` element. You will see that each `<ion-tab>` element
    has some attributes. The `title` attribute is used to specify the title that that
    particular tab will display. The `icon-on` and `icon-off` are attributes that
    are used to define what icons get displayed when the tab is in focus and out of
    focus. Lastly, the `href` attribute is used to provide the path of the route that
    should be navigated to when that particular tab is selected.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<ion-tabs>` 元素内部，你会看到三个不同的 `<ion-tab>` 元素。`<ion-tab>` 元素是用来创建标签页的元素，并且必须是
    `<ion-tabs>` 元素的子元素。你会注意到每个 `<ion-tab>` 元素都有一些属性。`title` 属性用于指定特定标签页将显示的标题。`icon-on`
    和 `icon-off` 是用于定义当标签页处于焦点和未焦点状态时显示哪些图标的属性。最后，`href` 属性用于提供当选择特定标签页时应导航到的路由路径。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are a lot more attributes that are available for different customizations
    and actions for `<ion-tab>`, and these are all available and duly documented on
    the official Ionic documentation page.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`<ion-tab>` 元素有更多可用于不同自定义和操作的属性，这些都在官方 Ionic 文档页面上有详细说明。'
- en: 'Within each `<ion-tab>` element, you will find an `<ion-nav-view>` declaration.
    The `<ion-nav-view>` is an element used to refer to an Angular view. If you pay
    close attention, you will see that the `<ion-nav-view>` elements have a `name`
    attribute, which has values. This `name` attribute is used to specify the name
    of a particular view that is defined in our `app.js` file. If you have another
    short look at the `app.js` file, as we did previously in this chapter, you will
    see that some of the states have views defined. A clear demonstration of this
    is shown in the following screenshot of the `tab.dash` state:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个 `<ion-tab>` 元素中，你将找到一个 `<ion-nav-view>` 声明。`<ion-nav-view>` 是一个用于引用 Angular
    视图的元素。如果你仔细观察，你会看到 `<ion-nav-view>` 元素有一个 `name` 属性，它有值。这个 `name` 属性用于指定在 `app.js`
    文件中定义的特定视图的名称。如果你再次查看 `app.js` 文件，就像我们在本章前面做的那样，你会看到一些状态有视图定义。以下截图显示了 `tab.dash`
    状态的清晰演示：
- en: '![The <ion-tab> element](img/00066.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![《ion-tab》元素](img/00066.jpeg)'
- en: You can see that there is a `tab-dash` view named within the views object, and
    this `tab-dash` view has a `templateUrl` definition as well as a `controller`
    definition similar to a normal state definition. This is how Ionic provides a
    hierarchy that enables each tab to have a separate `<ion-nav-view>`, where its
    view is placed. To get an even better understanding of how this tab system works,
    we will be adding another tab to our application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，在 `views` 对象中有一个名为 `tab-dash` 的视图，并且这个 `tab-dash` 视图也有一个 `templateUrl`
    定义以及一个类似于正常状态定义的 `controller` 定义。这就是 Ionic 提供的层次结构，使得每个标签都可以有一个独立的 `<ion-nav-view>`，其中视图被放置。为了更好地理解这个标签系统是如何工作的，我们将在我们的应用程序中添加另一个标签。
- en: Adding tabs to the tabs-app application
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将标签添加到 tabs-app 应用程序
- en: We will add one new tab which will contain a feature that will let users post
    messages like a message board and see that it appears similar to a Facebook wall
    or a Twitter wall. We will be calling this new tab the `wall` tab. To add this
    new tab, the first thing we need to do is to add the route for our new tab.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个新标签页，它将包含一个功能，允许用户发布消息，就像留言板一样，并看到它看起来类似于 Facebook 墙或 Twitter 墙。我们将把这个新标签页称为
    `wall` 标签。要添加这个新标签，我们首先需要为我们的新标签添加路由。
- en: Adding the state for the new tab
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加新标签页的状态
- en: 'To add the state for our new tab, we need to define this tab in our `app.js`
    file where all our default tab routes are defined. Within the `.config()` function
    found in your `app.js` file, place the following block of code just after the
    state definition of the tab abstract state:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要为我们的新标签页添加状态，我们需要在定义所有默认标签路由的 `app.js` 文件中定义此标签。在 `app.js` 文件中找到的 `.config()`
    函数内，在标签抽象状态的 `state` 定义之后放置以下代码块：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you have done this correctly, parts of the `.config()` function of your
    `app.js` file should look something like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经正确完成，你的 `app.js` 文件的 `.config()` 函数的部分应该看起来像这样：
- en: '![Adding the state for the new tab](img/00067.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![添加新标签页的状态](img/00067.jpeg)'
- en: Let's try to understand what we have just done here. We have created a new state
    called `tab.wall`, which has a route `/tab`. This means that we are able to navigate
    to this `tab.wall` state or `/tab` route as part of our Angular application. We
    have also created a new view called `tab-wall`, and later in this chapter, we
    will use this `tab-wall` view to reference it as where we want the content of
    our newly created tab to be displayed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试理解我们刚才做了什么。我们创建了一个名为 `tab.wall` 的新状态，它有一个 `/tab` 路由。这意味着我们能够作为我们的 Angular
    应用程序的一部分导航到这个 `tab.wall` 状态或 `/tab` 路由。我们还创建了一个名为 `tab-wall` 的新视图，在本章的后面，我们将使用这个
    `tab-wall` 视图来引用它，作为我们新创建的标签内容显示的地方。
- en: If you take a closer look at our new state definition, you will see that we
    referenced a `templateUrl` to a file with the path `templates/tab-wall.html` and
    a controller, `WallController`, both of which we have not yet created. We will
    need to create this `tab-wall.html` file and also create the `WallController`
    controller.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细查看我们的新状态定义，你会看到我们引用了一个 `templateUrl` 到路径为 `templates/tab-wall.html` 的文件和一个控制器
    `WallController`，这两个我们还没有创建。我们需要创建这个 `tab-wall.html` 文件，并创建 `WallController` 控制器。
- en: Creating the tab-wall.html file
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 tab-wall.html 文件
- en: To create the `tab-wall.html` file correctly, we need to make sure that we create
    it within the `templates` directory in order for it to match the `templates/tab-wall.html`
    directory which we passed when declaring our state definition.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要正确创建 `tab-wall.html` 文件，我们需要确保我们在 `templates` 目录中创建它，以便它与我们在声明状态定义时传递的 `templates/tab-wall.html`
    目录相匹配。
- en: 'Create a file called `tab-wall.html` within your `templates` folder. If you
    have done this correctly, your `templates` directory should look something very
    similar to what we have in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `templates` 文件夹中创建一个名为 `tab-wall.html` 的文件。如果你操作正确，你的 `templates` 目录应该看起来与以下截图中的非常相似：
- en: '![Creating the tab-wall.html file](img/00068.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![创建 tab-wall.html 文件](img/00068.jpeg)'
- en: 'The next step is to actually populate the newly created `tab-wall.html` file.
    Place the code as shown in the following code block into your `tab-wall.html`
    file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是实际填充新创建的 `tab-wall.html` 文件。将以下代码块中的代码放入你的 `tab-wall.html` 文件中：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you have correctly done this, your `tab-wall.html` should look something
    like the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你操作正确，你的 `tab-wall.html` 应该看起来如下截图所示：
- en: '![Creating the tab-wall.html file](img/00069.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![创建 tab-wall.html 文件](img/00069.jpeg)'
- en: This next step is to create the controller we defined in our state definition.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建我们在状态定义中定义的控制器。
- en: Creating the WallController controller
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 WallController 控制器
- en: 'To create the `WallController` controller, first we need to open the `controller.js`
    file. This file can be found within the same folder as our `app.js` file, that
    is, the `JS` folder. Your `controller.js` file should closely resemble what we
    have in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 `WallController` 控制器，首先我们需要打开 `controller.js` 文件。这个文件可以在与我们的 `app.js` 文件相同的文件夹中找到，即
    `JS` 文件夹。你的 `controller.js` 文件应该与以下截图中的非常相似：
- en: '![Creating the WallController controller](img/00070.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![创建 WallController 控制器](img/00070.jpeg)'
- en: 'To create the `WallController` file, simply place the code found in the following
    code block just after the first line where you can find the line of code, `angular.module(''starter.controllers'',
    [])`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 `WallController` 文件，只需将以下代码块中找到的代码放置在可以找到代码行的第一行之后，即 `angular.module('starter.controllers',
    [])` 这行代码之后：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you have correctly replicated this code, your `controller.js` file should
    closely resemble to the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正确复制了此代码，你的 `controller.js` 文件应该与以下截图非常相似：
- en: '![Creating the WallController controller](img/00071.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![创建 WallController 控制器](img/00071.jpeg)'
- en: By doing this, we have successfully created the `WallController` controller.
    However, we still have one last step to complete the implementation of our new
    tab. We need to actually create the tab itself using the `<ion-tab>` element.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们已经成功创建了 `WallController` 控制器。然而，我们还需要完成最后一步来实现我们新标签页的实现。我们需要实际创建标签页本身，使用
    `<ion-tab>` 元素。
- en: Creating the tab
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建标签页
- en: 'To create our tab, we need to revisit the `tabs.html` file. Within the file,
    locate the opening `<ion-tabs>` tag and place the code mentioned in the following
    code block just after that:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的标签页，我们需要重新访问 `tabs.html` 文件。在文件中，找到开头的 `<ion-tabs>` 标签，并在其后放置以下代码块中提到的代码：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you have done this correctly, your `tabs.html` file should look like what
    is shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你操作正确，你的 `tabs.html` 文件应该看起来如下截图所示：
- en: '![Creating the tab](img/00072.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![创建标签](img/00072.jpeg)'
- en: By doing this, we have successfully created a new tab in our application. Let's
    recap what we did to achieve this feat. First, we created a new state definition
    for our tab and referenced it a controller and template file. We then went ahead
    to create the tab itself using the `<ion-tab>` element, as in the preceding screenshot.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们在应用程序中成功创建了一个新的标签页。让我们回顾一下我们是如何实现这一壮举的。首先，我们为我们的标签创建了一个新的状态定义，并引用了控制器和模板文件。然后我们继续创建标签本身，如前一个截图所示，使用
    `<ion-tab>` 元素。
- en: If you look at the preceding screenshot and pay close attention to `<ion-tab>`
    that we just replicated from the code block, you will see that its `<ion-nav-view>`
    child element has a `name` attribute with the value `tab-wall`. This is simply
    referencing the view we defined while defining our `tab.wall` state in our `app.js`
    file. These steps complete our tabs implementation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看前面的截图并仔细注意我们刚刚从代码块中复制的 `<ion-tab>`，你会看到它的 `<ion-nav-view>` 子元素有一个值为 `tab-wall`
    的 `name` 属性。这仅仅是指我们在 `app.js` 文件中定义 `tab.wall` 状态时定义的视图。这些步骤完成了我们的标签实现。
- en: Now, the next step is to go on and run our app and see it in action. To do this,
    simply run your application using the `ionic serve` technique.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，下一步是运行我们的应用并看到它的实际效果。为此，只需使用`ionic serve`技术运行您的应用程序。
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To run your app using the `ionic serve` technique, simply run `ionic serve`
    from the root directory of your `tab-app` application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`ionic serve`技术运行您的应用，只需从`tab-app`应用程序的根目录运行`ionic serve`。
- en: If you have done this correctly, you should see something that closely resembles
    what we have in the following screenshots.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您操作正确，您应该看到一些与以下截图非常相似的内容。
- en: For iOS:![Creating the tab](img/00073.jpeg)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于iOS：![创建标签](img/00073.jpeg)
- en: For Android:![Creating the tab](img/00074.jpeg)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Android：![创建标签](img/00074.jpeg)
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the Ionic tabs application template. We also
    created a tabs application called `tabs-app` and even got as far as adding a new
    tab of our own. In the next chapter, we will be using this same application to
    learn how to use Firebase to add backend services to our application.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Ionic标签应用模板。我们还创建了一个名为`tabs-app`的标签应用，甚至添加了我们自己的新标签。在下一章中，我们将使用这个相同的应用程序来学习如何使用Firebase为我们的应用程序添加后端服务。
