- en: Chapter 4. CSS Properties – Part 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 CSS属性 - 第1部分
- en: CSS properties are characteristics of an element in a markup language (HTML,
    SVG, XML, and so on) that control their style and/or presentation. These characteristics
    are part of a constantly evolving standard from the W3C.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CSS属性是标记语言（HTML、SVG、XML等）中元素的特性，它们控制其样式和/或表现。这些特性是W3C不断发展的标准的一部分。
- en: 'A basic example of a CSS property is `border-radius`:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个CSS属性的简单例子是`border-radius`：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There is an incredible number of CSS properties, and learning them all is virtually
    impossible. Adding more into this mix, there are CSS properties that need to be
    vendor prefixed (`-webkit-`, `-moz-`, `-ms-`, and so on), making this equation
    even more complex.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CSS属性的数量多得令人难以置信，学习它们所有几乎是不可能的。更不用说，还有一些CSS属性需要供应商前缀（`-webkit-`、`-moz-`、`-ms-`等等），这使得这个方程式变得更加复杂。
- en: Vendor prefixes are short pieces of CSS that are added to the beginning of the
    CSS property (and sometimes CSS values too). These pieces of code are directly
    related to either the company that makes the browser (the "vendor") or to the
    CSS engine of the browser.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商前缀是添加到CSS属性（有时也是CSS值）开头的简短CSS片段。这些代码片段直接与浏览器制造商的公司（“供应商”）或浏览器的CSS引擎相关。
- en: 'There are four major CSS prefixes: `-webkit-`, `-moz-`, `-ms-` and `-o-`. They
    are explained here:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个主要的CSS前缀：`-webkit-`、`-moz-`、`-ms-`和`-o-`。它们在这里解释：
- en: '`-webkit-`: This references Safari''s engine, Webkit (Google Chrome and Opera
    used this engine in the past as well)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-webkit-`：这指的是Safari的引擎，Webkit（Google Chrome和Opera过去也使用这个引擎）'
- en: '`-moz-`: This stands for Mozilla, who creates Firefox'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-moz-`：这代表Mozilla，它是Firefox的创造者'
- en: '`-ms-`: This stands for Microsoft, who creates Internet Explorer'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-ms-`：这代表Microsoft，它是Internet Explorer的创造者'
- en: '`-o-`: This stands for Opera, but only targets old versions of the browser'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-o-`：这代表Opera，但仅针对旧版本的浏览器'
- en: Google Chrome and Opera both support the `-webkit-` prefix. However, these two
    browsers do not use the Webkit engine anymore. Their engine is called Blink and
    is developed by Google.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Google Chrome和Opera都支持`-webkit-`前缀。然而，这两个浏览器已经不再使用Webkit引擎了。它们的引擎被称为Blink，由Google开发。
- en: 'A basic example of a prefixed CSS property is `column-gap`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个带有前缀的CSS属性的简单例子是`column-gap`：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Knowing which CSS properties need to be prefixed is futile. That's why it's
    important to keep a constant eye on [CanIUse.com](http://CanIUse.com). However,
    it's also important to automate the prefixing process with tools such as `Autoprefixer`
    or `-prefix-free`, or mixins in preprocessors, and so on.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 知道哪些CSS属性需要前缀是徒劳的。这就是为什么保持对[CanIUse.com](http://CanIUse.com)的持续关注很重要。然而，使用`Autoprefixer`或`-prefix-free`等工具自动化前缀过程，或者在预处理器中使用mixin等，也同样重要。
- en: However, vendor prefixing isn't in the scope of the book, so the properties
    we'll discuss are absent of any vendor prefixes. If you want to learn more about
    vendor prefixes, you can visit **Mozilla Developer Network** (**MDN**) at [http://tiny.cc/mdn-vendor-prefixes](http://tiny.cc/mdn-vendor-prefixes).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，供应商前缀不在本书的范围内，所以我们讨论的属性不包含任何供应商前缀。如果您想了解更多关于供应商前缀的信息，您可以访问**Mozilla开发者网络**（**MDN**）[http://tiny.cc/mdn-vendor-prefixes](http://tiny.cc/mdn-vendor-prefixes)。
- en: Let's get the CSS properties reference rolling.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始滚动CSS属性的参考。
- en: Animation
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画
- en: Unlike the old days of Flash, where creating animations required third-party
    applications and plugins, today we can accomplish practically the same things
    with a lot less overhead, better performance, and greater scalability all through
    CSS only.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与需要第三方应用程序和插件的Flash旧时代不同，今天我们可以仅通过CSS实现几乎相同的事情，具有更少的开销，更好的性能，以及更大的可扩展性。
- en: Forget plugins and third-party software! All we need is a text editor, some
    imagination, and a bit of patience to wrap our heads around some of the animation
    concepts CSS brings to our plate.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 忘记插件和第三方软件！我们需要的只是一个文本编辑器，一些想象力，以及一点耐心来理解CSS带来的动画概念。
- en: Base markup and CSS
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础标记和CSS
- en: 'Before we dive into all the animation properties, we will use the following
    markup and animation structure as our base:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入所有动画属性之前，我们将使用以下标记和动画结构作为我们的基础：
- en: '**HTML**:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTML**：'
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**CSS**:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the examples, we will only see the `.element` rule since the HTML and `@keyframes
    fadingColors` will remain the same.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，我们只会看到`.element`规则，因为HTML和`@keyframes fadingColors`将保持不变。
- en: Tip
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `@keyframes` declaration block is a custom animation that can be applied
    to any element. When applied, the element's background will go from red to black.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`@keyframes` 声明块是一个可以应用于任何元素的定制动画。当应用时，元素的背景将从红色变为黑色。'
- en: Ok, let's do this.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们来做这个。
- en: animation-name
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: animation-name
- en: 'The `animation-name` CSS property is the name of the `@keyframes` at-rule that
    we want to execute, and it looks like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation-name` CSS 属性是我们想要执行的 `@keyframes` at 规则的名称，它看起来是这样的：'
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Description
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: In the HTML and CSS base example, our `@keyframes` at-rule had an animation
    where the background color went from red to black. The name of that animation
    is `fadingColors`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTML 和 CSS 基础示例中，我们的 `@keyframes` at 规则有一个动画，背景颜色从红色变为黑色。那个动画的名字是 `fadingColors`。
- en: 'So, we can call the animation like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以这样调用动画：
- en: '**CSS**:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is a valid rule using the longhand. There are clearly no issues with it
    at all. The thing is that the animation won't run unless we add `animation-duration`
    to it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用长语的合法规则。显然，它没有任何问题。问题是，除非我们添加 `animation-duration`，否则动画不会运行。
- en: animation-duration
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: animation-duration
- en: 'The `animation-duration` CSS property defines the amount of time the animation
    will take to complete a cycle, and it looks like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation-duration` CSS 属性定义了动画完成一个周期所需的时间，它看起来是这样的：'
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Description
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: We can specify the units either in seconds using `s` or in milliseconds using
    `ms`. Specifying a unit is required. Specifying a value of `0s` means that the
    animation should actually never run.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以指定单位，使用 `s` 表示秒或使用 `ms` 表示毫秒。指定一个单位是必需的。指定 `0s` 的值意味着动画实际上永远不会运行。
- en: 'However, since we do want our animation to run, we do the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于我们确实想让动画运行，我们这样做：
- en: '**CSS**:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As mentioned earlier, this will make a box go from its red background to black
    in `2` seconds and then stop.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这将使一个盒子在 `2` 秒内从其红色背景变为黑色，然后停止。
- en: animation-iteration-count
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: animation-iteration-count
- en: 'The `animation-iteration-count` CSS property defines the number of times the
    animation should be played, and it looks like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation-iteration-count` CSS 属性定义了动画应该播放的次数，它看起来是这样的：'
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Description
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'Here are two values: `infinite` and a *number*, such as `1`, `3`, or `0.5`.
    Negative numbers are not allowed.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个值：`infinite` 和一个 *数字*，例如 `1`、`3` 或 `0.5`。不允许使用负数。
- en: 'Add the following code to the prior example:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到前面的示例中：
- en: '**CSS**:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will make a box go from its red background to black, start over again with
    the red background and go to black, infinitely.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使一个盒子从其红色背景变为黑色，然后再次从红色背景开始，并再次变为黑色，无限循环。
- en: animation-direction
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: animation-direction
- en: 'The `animation-direction` CSS property defines the direction in which the animation
    should play after the cycle, and it looks like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation-direction` CSS 属性定义了动画在周期之后应该播放的方向，它看起来是这样的：'
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Description
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'There are four values: `normal`, `reverse`, `alternate`, and `alternate-reverse`.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个值：`normal`、`reverse`、`alternate` 和 `alternate-reverse`。
- en: '`normal`: This makes the animation play forward. This is the default value.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`normal`：这使得动画向前播放。这是默认值。'
- en: '`reverse`: This makes the animation play backward.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reverse`：这使得动画向后播放。'
- en: '`alternate`: This makes the animation play forward in the first cycle, then
    backward in the next cycle, then forward again, and so on. In addition, timing
    functions are affected, so if we have `ease-out`, it gets replaced by `ease-in`
    when played in reverse.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alternate`：这使得动画在第一个周期中向前播放，然后在下一个周期中向后播放，然后再向前播放，以此类推。此外，时间函数也会受到影响，所以如果我们有
    `ease-out`，当反向播放时，它会被 `ease-in` 替换。'
- en: We'll look at these timing functions in a minute.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将在一分钟内查看这些时间函数。
- en: '`alternate-reverse`: This is the same thing as `alternate`, but the animation
    starts backward, from the end.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alternate-reverse`：这与 `alternate` 相同，但动画从结束处开始向后播放。'
- en: In our current example, we have a continuous animation. However, the background
    color has a "hard stop" when going from black (end of the animation) to red (start
    of the animation).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们当前的例子中，我们有一个连续的动画。然而，当从黑色（动画的结束）变为红色（动画的开始）时，背景颜色有一个“硬停止”。
- en: 'Let''s create a more "fluid" animation by making the black background fade
    into red and then red into black without any hard stops. Basically, we are trying
    to create a "pulse-like" effect:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个更“流畅”的动画，通过让黑色背景淡入红色，然后红色再淡入黑色，没有任何硬停止。基本上，我们正在尝试创建一个“脉冲”效果：
- en: '**CSS**:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: animation-delay
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: animation-delay
- en: The `animation-delay` CSS property allows us to define when exactly an animation
    should start. This means that as soon as the animation has been applied to an
    element, it will obey the delay before it starts running.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation-delay` CSS 属性允许我们定义动画应该何时开始。这意味着一旦动画被应用到元素上，它将在开始运行之前遵守延迟。'
- en: 'It looks like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来像这样：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Description
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: We can specify the units either in seconds using `s` or in milliseconds using
    `ms`. Specifying a unit is required.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `s` 表示秒或使用 `ms` 表示毫秒来指定单位。指定单位是必需的。
- en: Negative values are allowed. Take into consideration that using negative values
    means that the animation should start right away, but it will start midway into
    the animation for the opposite amount of time as the negative value.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 允许使用负值。请考虑使用负值意味着动画应该立即开始，但它将在动画中开始时处于中间位置，持续时间为负值的相反时间。
- en: Use negative values with caution.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 谨慎使用负值。
- en: '**CSS**:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will make the animation start after 3 seconds have passed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使动画在 3 秒后开始。
- en: animation-fill-mode
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: animation-fill-mode
- en: The `animation-fill-mode` CSS property defines which values are applied to an
    element before and after the animation. Basically, outside the time the animation
    is being executed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation-fill-mode` CSS 属性定义了在动画执行时间之外应用于元素的哪些值。基本上，是在动画执行时间之外。'
- en: 'It looks like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来像这样：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Description
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'There are four values: `none`, `forwards`, `backwards`, and `both`.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个值：`none`、`forwards`、`backwards` 和 `both`。
- en: '`none`: No styles are applied before or after the animation.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`none`：在动画前后不应用任何样式。'
- en: '`forwards`: The animated element will retain the styles of the last keyframe.
    This the most used value.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`forwards`：动画元素将保留最后一个关键帧的样式。这是最常用的值。'
- en: '`backwards`: The animated element will retain the styles of the first keyframe,
    and these styles will remain during the `animation-delay` period. This is very
    likely the least used value.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backwards`：动画元素将保留第一个关键帧的样式，并且在 `animation-delay` 期间这些样式将保持不变。这可能是最不常用的值。'
- en: '`both`: The animated element will retain the styles of the first keyframe before
    starting the animation and the styles of the last keyframe after the animation
    has finished. In many cases, this is almost the same as using `forwards`.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`both`：动画元素在开始动画之前将保留第一个关键帧的样式，在动画完成后将保留最后一个关键帧的样式。在许多情况下，这几乎与使用 `forwards`
    相同。'
- en: The prior properties are better used in animations that have an end and stop.
    In our example, we're using a fading/pulsating animation, so the best property
    to use is `none`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的属性更适合用于有结束和停止的动画。在我们的例子中，我们使用的是淡入/脉冲动画，所以最好的属性是 `none`。
- en: '**CSS**:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: animation-play-state
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: animation-play-state
- en: 'The `animation-play-state` CSS property defines whether an animation is running
    or paused, and it looks like this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation-play-state` CSS 属性定义了动画是正在运行还是暂停，看起来像这样：'
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Description
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'There are two values: `running` and `paused`. These values are self-explanatory.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个值：`running` 和 `paused`。这些值是自我解释的。
- en: '**CSS**:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this case, defining `animation-play-state` as `running` is redundant, but
    I'm listing it for purposes of the example.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，将 `animation-play-state` 定义为 `running` 是多余的，但我列出它是为了举例。
- en: animation-timing-function
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: animation-timing-function
- en: 'The `animation-timing-function` CSS property defines how an animation''s speed
    should progress throughout its cycles, and it looks like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation-timing-function` CSS 属性定义了动画在其周期中速度应该如何进展，看起来像这样：'
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'There are five predefined values, also known as easing functions, for the **Bézier**
    curve (we''ll see what the Bézier curve is in a minute): `ease`, `ease-in`, `ease-out`,
    `ease-in-out`, and `linear`.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 **Bézier** 曲线（我们将在下一分钟看到 Bézier 曲线是什么），有五个预定义的值，也称为缓动函数：`ease`、`ease-in`、`ease-out`、`ease-in-out`
    和 `linear`。
- en: ease
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ease
- en: 'The `ease` function sharply accelerates at the beginning and starts slowing
    down towards the middle of the cycle, and it looks like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`ease` 函数在开始时急剧加速，并在周期中间开始减速，看起来像这样：'
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: ease-in
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ease-in
- en: 'The `ease-in` function starts slowly accelerating until the animation sharply
    ends, and it looks like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`ease-in` 函数开始缓慢加速，直到动画突然结束，看起来像这样：'
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: ease-out
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ease-out
- en: 'The `ease-out` function starts quickly and gradually slows down towards the
    end and it looks like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`ease-out` 函数开始迅速，并逐渐减速到结束，看起来像这样：'
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: ease-in-out
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ease-in-out
- en: 'The `ease-in-out` function starts slowly and it gets fast in the middle of
    the cycle. It then starts slowing down towards the end. And it looks like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`ease-in-out` 函数开始时速度较慢，在周期中间变得很快。然后它开始减速，直到周期结束。它看起来是这样的：'
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: linear
  id: totrans-119
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 线性
- en: 'The `linear` function has constant speed. No accelerations of any kind happen.
    It looks like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`linear` 函数具有恒定的速度。不会发生任何类型的加速度。它看起来是这样的：'
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now, the easing functions are built on a curve named the Bézier curve and can
    be called using the `cubic-bezier()` function or the `steps()` function.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，缓动函数建立在名为贝塞尔曲线的曲线上，可以使用 `cubic-bezier()` 函数或 `steps()` 函数调用。
- en: cubic-bezier()
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: cubic-bezier()
- en: The `cubic-bezier()` function allows us to create custom acceleration curves.
    Most use cases can benefit from the already defined easing functions we just mentioned
    (`ease`, `ease-in`, `ease-out`, `ease-in-out` and `linear`), but if you're feeling
    adventurous, `cubic-bezier()` is your best bet.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`cubic-bezier()` 函数允许我们创建自定义的加速度曲线。大多数用例都可以从我们刚才提到的已定义的缓动函数（`ease`, `ease-in`,
    `ease-out`, `ease-in-out` 和 `linear`）中受益，但如果你愿意尝试新事物，`cubic-bezier()` 是你的最佳选择。'
- en: 'Here''s what a Bézier curve looks like:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是贝塞尔曲线的样子：
- en: '![cubic-bezier()](img/B03289_04_01.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![cubic-bezier()](img/B03289_04_01.jpg)'
- en: Parameters
  id: totrans-127
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: 'The `cubic-bezier()` function takes four parameters as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`cubic-bezier()` 函数接受四个参数，如下所示：'
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: X and Y represent the *x* and *y* axes. The numbers `1` and `2` after each axis
    represent the control points. `1` represents the control point starting on the
    lower left, and `2` represents the control point on the upper right.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: X 和 Y 代表 *x* 和 *y* 轴。每个轴后面的数字 `1` 和 `2` 代表控制点。`1` 代表从左下角开始的控制点，而 `2` 代表右上角的控制点。
- en: Description
  id: totrans-131
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 描述
- en: 'Let''s represent all five predefined easing functions with the `cubic-bezier()`
    function:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用 `cubic-bezier()` 函数来表示所有五个预定义的缓动函数：
- en: 'ease: `animation-timing-function: cubic-bezier(.25, .1, .25, 1);`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ease`: `animation-timing-function: cubic-bezier(.25, .1, .25, 1);`'
- en: 'ease-in: `animation-timing-function: cubic-bezier(.42, 0, 1, 1);`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ease-in`: `animation-timing-function: cubic-bezier(.42, 0, 1, 1);`'
- en: 'ease-out: `animation-timing-function: cubic-bezier(0, 0, .58, 1);`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ease-out`: `animation-timing-function: cubic-bezier(0, 0, .58, 1);`'
- en: 'ease-in-out: `animation-timing-function: cubic-bezier(.42, 0, .58, 1);`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ease-in-out`: `animation-timing-function: cubic-bezier(.42, 0, .58, 1);`'
- en: 'linear: `animation-timing-function: cubic-bezier(0, 0, 1, 1);`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '线性: `animation-timing-function: cubic-bezier(0, 0, 1, 1);`'
- en: I'm not sure about you, but I prefer to use the predefined values.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定你是否和我一样，但我更喜欢使用预定义的值。
- en: Now, we can start tweaking and testing each value to the decimal, save it, and
    wait for the live refresh to do its thing. However, that's too much time wasted
    testing if you ask me.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以开始调整和测试每个值到小数点后，保存它，并等待实时刷新完成其工作。然而，如果你问我，这太浪费时间了去测试。
- en: Tip
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The amazing Lea Verou created the best web app to work with Bézier curves. You
    can find it at [cubic-bezier.com](http://cubic-bezier.com). This is by far the
    easiest way to work with Bézier curves. I highly recommend this tool.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 惊人的 Lea Verou 创建了最好的用于处理贝塞尔曲线的 Web 应用程序。你可以在 [cubic-bezier.com](http://cubic-bezier.com)
    找到它。这是处理贝塞尔曲线最简单的方法。我强烈推荐这个工具。
- en: The Bézier curve image showed earlier was taken from the [cubic-bezier.com](http://cubic-bezier.com)
    website.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 之前展示的贝塞尔曲线图像来自 [cubic-bezier.com](http://cubic-bezier.com) 网站。
- en: 'Let''s add `animation-timing-function` to our example:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的例子中添加 `animation-timing-function`：
- en: '**CSS**:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: steps()
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: steps()
- en: The `steps()` timing function isn't very widely used, but knowing how it works
    is a must if you're into CSS animations.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`steps()` 时间函数并不非常常用，但如果你对 CSS 动画感兴趣，了解它是如何工作的则是必须的。'
- en: 'It looks like this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来是这样的：
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This function is very helpful when we want our animation to take a defined number
    of steps.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要动画执行一个定义的步骤数时，这个函数非常有用。
- en: 'After adding a `steps()` function to our current example, it looks like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的当前例子中添加 `steps()` 函数后，它看起来是这样的：
- en: '**CSS**:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This makes the box take six steps to fade from red to black and vice versa.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得盒子从红色淡出到黑色，反之亦然，需要六个步骤。
- en: Parameters
  id: totrans-155
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: 'There are two optional parameters that we can use with the `steps()` function:
    `start` and `end`.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `steps()` 函数的两个可选参数：`start` 和 `end`。
- en: '`start`: This will make the animation run at the beginning of each step. This
    will make the animation start right away.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start`: 这将使动画在每个步骤的开始运行。这将使动画立即开始。'
- en: '`end`: This will make the animation run at the end of each step. This is the
    default value if nothing is declared. This will give the animation a short delay
    before it starts.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`end`: 这将使动画在每个步骤的末尾运行。如果没有声明任何内容，这是默认值。这将在动画开始前给予一个短暂的延迟。'
- en: Description
  id: totrans-159
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 描述
- en: 'After adding a `steps()` function to our current example, it looks like this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的当前示例中添加 `steps()` 函数后，它看起来是这样的：
- en: '**CSS**:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE28]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Granted, the pulsating effect in our example isn't quite noticeable when we
    add the `steps()` function. However, you can see it more clearly in this pen from
    Louis Lazarus when hovering over the boxes, at [http://tiny.cc/steps-timing-function](http://tiny.cc/steps-timing-function)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 承认，当我们添加 `steps()` 函数时，示例中的脉冲效果并不太明显。然而，你可以在 Louis Lazarus 的这个笔上更清楚地看到它，当鼠标悬停在盒子上时，在
    [http://tiny.cc/steps-timing-function](http://tiny.cc/steps-timing-function)
- en: 'Here''s an image taken from Stephen Greig''s article in *Smashing Magazine*,
    *Understanding CSS Timing Functions*, that explains `start` and `end` from the
    `steps()` function:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一张来自 Stephen Greig 在 *Smashing Magazine* 文章中的图片，解释了 `steps()` 函数中的 `start`
    和 `end`：
- en: '![Description](img/B03289_04_02.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/B03289_04_02.jpg)'
- en: 'Also, there are two predefined values for the `steps()` function: `step-start`
    and `step-end`.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`steps()` 函数有两个预定义值：`step-start` 和 `step-end`。
- en: '`step-start`: This is the same thing as `steps(1, start)`. It means that every
    change happens at the beginning of each interval.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`step-start`：这与 `steps(1, start)` 相同。这意味着每次变化都发生在每个间隔的开始。'
- en: '`step-end`: This is the same thing as `steps(1, end)`. It means that every
    change happens at the end of each interval.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`step-end`：这与 `steps(1, end)` 相同。这意味着每次变化都发生在每个间隔的末尾。'
- en: '**CSS**:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE29]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: animation
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: animation
- en: The `animation` CSS property is the shorthand for `animation-name`, `animation-duration`,
    `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`,
    `animation-fill-mode`, and `animation-play-state`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation` CSS 属性是 `animation-name`、`animation-duration`、`animation-timing-function`、`animation-delay`、`animation-iteration-count`、`animation-direction`、`animation-fill-mode`
    和 `animation-play-state` 的简写。'
- en: 'It looks like this:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来是这样的：
- en: '[PRE30]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Description
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'For a simple animation to work, we need at least two properties: `animation-name`
    and `animation-duration`.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要使简单的动画工作，我们需要至少两个属性：`animation-name` 和 `animation-duration`。
- en: If you feel overwhelmed by all these properties, relax. Let me break them down
    for you in simple bits.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得所有这些属性让你感到不知所措，放松一下。让我帮你简单分解它们。
- en: 'Using the `animation` longhand, the code would look like this:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `animation` 长格式，代码将如下所示：
- en: '**CSS**:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE31]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Using the `animation` shorthand, which is the recommended syntax, the code
    would look like this:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `animation` 简写，这是推荐的语法，代码将如下所示：
- en: '**CSS**:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE32]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This will make a box go from its red background to black in 2 seconds, and then
    stop.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使一个盒子在 2 秒内从红色背景变为黑色，然后停止。
- en: Final CSS code
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最终 CSS 代码
- en: Let's see how all the animation properties look in one final example showing
    both the longhand and shorthand styles.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看所有动画属性在一个最终的示例中是如何表现的，这个示例展示了长格式和简写样式。
- en: Longhand style
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 长格式
- en: '[PRE33]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Shorthand style
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简写样式
- en: '[PRE34]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Tip
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `animation-duration` property will always be considered first rather than
    `animation-delay`. All other properties can appear in any order within the declaration.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation-duration` 属性将始终首先考虑，而不是 `animation-delay`。所有其他属性可以在声明中按任何顺序出现。'
- en: 'Here is a demo in **CodePen**: [http://tiny.cc/animation](http://tiny.cc/animation)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个在 **CodePen** 上的演示：[http://tiny.cc/animation](http://tiny.cc/animation)
- en: Background
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: The CSS background properties handle the display of background effects on HTML
    elements.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 背景属性处理 HTML 元素上的背景效果显示。
- en: background-attachment
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: background-attachment
- en: 'The `background-attachment` CSS property defines how the background of an element
    scrolls relative to its containing parent, and it looks like this:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`background-attachment` CSS 属性定义了元素的背景相对于其包含父元素如何滚动，它看起来是这样的：'
- en: '[PRE35]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Description
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'There are three values: `scroll`, `fixed`, and `local`.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个值：`scroll`、`fixed` 和 `local`。
- en: '`scroll`: The background does not move within its container'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scroll`：背景在其容器内不移动'
- en: '`fixed`: The background stays fixed to the viewport, no matter what'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixed`：背景始终固定在视口中，不受任何影响'
- en: '`local`: The background scrolls within its container and the viewport'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local`：背景在其容器和视口中滚动'
- en: '**CSS**:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE36]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/css-background](http://tiny.cc/css-background)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个在 CodePen 上的演示：[http://tiny.cc/css-background](http://tiny.cc/css-background)
- en: background-blend-mode
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: background-blend-mode
- en: 'The `background-blend-mode` CSS property specifies how the background image
    of an element should blend with its background color, and it looks like this:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`background-blend-mode` CSS 属性指定了元素的背景图像应该如何与其背景颜色混合，它看起来是这样的：'
- en: '[PRE37]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Description
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'There are 18 possible blend mode values:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 有 18 种可能的混合模式值：
- en: '`color`: Hue and saturation from the top color prevail, but the luminosity
    of the bottom color is added. Gray levels are preserved.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color`: 顶部颜色的色调和饱和度占主导地位，但底部颜色的亮度被添加。灰度级别被保留。'
- en: '`color-burn`: The final color is the result of taking the bottom color and
    inverting it, dividing the value by the top color, and then inverting that value.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color-burn`: 最终颜色是通过取底部颜色并取反，将值除以顶部颜色，然后取反该值得到的。'
- en: '`color-dodge`: The final color is the result of dividing the bottom color with
    the inverse of the top one.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color-dodge`: 最终颜色是除以顶部颜色的倒数得到的底部颜色。'
- en: '`darken`: The final color is the result of taking the darkest value per color
    in each channel.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`darken`: 最终颜色是每个通道中每个颜色最暗值的组合。'
- en: '`difference`: The final color is the result of taking the lighter color and
    subtracting the darker color of the background image and background color.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`difference`: 最终颜色是通过从背景图像和背景颜色的较亮颜色中减去较暗颜色得到的。'
- en: '`exclusion`: The result is similar to the `difference`, but with lower contrast.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exclusion`: 结果类似于 `difference`，但对比度较低。'
- en: '`hard-light`: If the bottom color is darker, then the result is `multiply`.
    However, if the bottom color is lighter, the result is `screen`.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hard-light`: 如果底部颜色较暗，则结果是 `multiply`。然而，如果底部颜色较亮，则结果是 `screen`。'
- en: '`hue`: Takes the hue of the top color, and the saturation and luminosity of
    the bottom color.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hue`: 取顶部颜色的色调，以及底部颜色的饱和度和亮度。'
- en: '`inherit`: The final color inherits the blend mode of its parent container.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inherit`: 最终颜色继承其父容器的混合模式。'
- en: '`initial`: This is the default value without any blending.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initial`: 这是默认值，没有任何混合。'
- en: '`lighten`: The result is the lightest values per color from each channel.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lighten`: 结果是每个通道中每个颜色的最亮值。'
- en: '`luminosity`: The result is the luminosity of the top color, and the hue and
    saturation of the bottom one.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`luminosity`: 结果是顶部颜色的亮度，以及底部颜色的色调和饱和度。'
- en: '`multiply`: Multiply the top and bottom colors. This is the same effect as
    printing the colors on a translucent film and laying them one on top of the other.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multiply`: 乘以顶部和底部颜色。这与在半透明胶片上打印颜色并将它们一层层叠放的效果相同。'
- en: '`normal`: The final color is the color on top, regardless of the color underneath
    it.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`normal`: 最终颜色是顶部的颜色，无论其下是什么颜色。'
- en: '`overlay`: The final color is `multiply` if the bottom color is darker. And
    it would be `screen` if the bottom color is lighter.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`overlay`: 如果底部颜色较暗，则最终颜色为 `multiply`。如果底部颜色较亮，则为 `screen`。'
- en: '`saturation`: The final color is the saturation of the top color plus the hue
    and luminosity of the bottom one.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`saturation`: 最终颜色是顶部颜色的饱和度加上底部颜色的色调和亮度。'
- en: '`screen`: Invert both the top and bottom colors, multiply them, and then invert
    that final color.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`screen`: 对顶部和底部颜色取反，相乘，然后取反最终颜色。'
- en: '`soft-light`: Same as `hard-light` attribute but softer, like pointing a diffused
    light on the final color.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`soft-light`: 与 `hard-light` 属性相同，但更柔和，就像将散射光指向最终颜色。'
- en: 'In the following example, we will declare two backgrounds, an image and a color,
    and then apply a blend mode to them:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将声明两个背景，一个图像和一个颜色，然后对它们应用混合模式：
- en: '**CSS with longhand**:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS 长格式**:'
- en: '[PRE38]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '**CSS with shorthand**:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS 短格式**:'
- en: '[PRE39]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Tip
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Notice that in the second example, the path to the image is not inside quotes.
    The quotes, single [`''`] or double [`""`], are optional.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在第二个示例中，图像的路径不在引号内。单引号 `''` 或双引号 `""` 是可选的。
- en: CSS-Tricks has a great Pen showing all these blend modes. However, I forked
    it to improve a few things on it.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: CSS-Tricks 有一个很好的 Pen 展示了所有这些混合模式。然而，我对其进行了改进。
- en: So, check out the CodePen demo with all the blend modes at [http://tiny.cc/background-blend-mode](http://tiny.cc/background-blend-mode)
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，查看所有混合模式的 CodePen 示例 [http://tiny.cc/background-blend-mode](http://tiny.cc/background-blend-mode)
- en: background-clip
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: background-clip
- en: 'The `background-clip` CSS property helps define whether an element''s background
    extends below its border or not, and it looks like this:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`background-clip` CSS 属性有助于定义元素背景是否延伸到其边框下方，其外观如下：'
- en: '[PRE40]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Description
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'There are four values: `inherit`, `border-box`, `padding-box`, and `content-box`.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个值：`inherit`、`border-box`、`padding-box` 和 `content-box`。
- en: inherit
  id: totrans-244
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 继承
- en: This takes the value from its parent element.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这取自其父元素的值。
- en: border-box
  id: totrans-246
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: border-box
- en: This makes the background cover the entire container, including the border.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得背景覆盖整个容器，包括边框。
- en: padding-box
  id: totrans-248
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: padding-box
- en: This makes the background extend only up to where the border starts.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得背景只延伸到边框开始的地方。
- en: content-box
  id: totrans-250
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: content-box
- en: This works like `border-box`, but it will take into consideration any padding,
    thus creating a gap between the border and the background.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作方式类似于 `border-box`，但它将考虑任何填充，从而在边框和背景之间创建一个间隙。
- en: '**CSS**:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**：'
- en: '[PRE41]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/background-clip](http://tiny.cc/background-clip)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个在CodePen上的演示：[http://tiny.cc/background-clip](http://tiny.cc/background-clip)
- en: background-color
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: background-color
- en: 'The `background-color` CSS property defines the solid background color of an
    element, and it looks like this:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`background-color` CSS 属性定义了元素的实心背景颜色，其外观如下：'
- en: '[PRE42]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Description
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Also, `transparent` is actually a color in CSS.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`transparent` 在 CSS 中实际上是一种颜色。
- en: Tip
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If we wanted to set a gradient background color, we'd have to use the `background-image`
    property instead. This is because gradients are actually images.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要设置渐变背景颜色，我们必须使用 `background-image` 属性。这是因为渐变实际上是图像。
- en: 'The color value can be defined using any of the following methods:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色值可以使用以下任何一种方法定义：
- en: Named color
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名颜色
- en: Hexadecimal
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十六进制
- en: RGB and RGBa
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RGB 和 RGBa
- en: HSL and HSLa
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HSL 和 HSLa
- en: '**CSS**:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**：'
- en: '[PRE43]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: background-image
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: background-image
- en: 'The `background-image` CSS property sets an image or gradient in the background
    of an element, and it looks like this:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`background-image` CSS 属性在元素的背景中设置图像或渐变，其外观如下：'
- en: '[PRE44]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Alternatively, it could also look like this:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，它也可以是这样的：
- en: '[PRE45]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Description
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This property supports the JPG, PNG, GIF, SVG, and WebP image formats.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性支持 JPG、PNG、GIF、SVG 和 WebP 图像格式。
- en: We can also use the `none` value to declare the absence of an image.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用 `none` 值来声明图像的缺失。
- en: An element can also have several background images in a single declaration.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 一个元素也可以在单个声明中使用多个背景图像。
- en: 'When it comes to gradients, there are two styles: **Linear** and **Radial**.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到渐变时，有两种样式：**线性**和**径向**。
- en: Linear
  id: totrans-279
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 线性
- en: Its syntax is `linear-gradient`. These gradients can go vertical, horizontal,
    or diagonal.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 它的语法是 `linear-gradient`。这些渐变可以垂直、水平或对角延伸。
- en: Radial
  id: totrans-281
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 径向
- en: Its syntax is `radial-gradient`. These gradients are circular in nature, and
    by default, they will adapt to an element's dimension. For example, if the element
    is a perfect square, it would make a perfect circular radial gradient. However,
    if the element is a rectangle, then the radial gradient would look like an oval.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 它的语法是 `radial-gradient`。这些渐变本质上是圆形的，默认情况下，它们将适应元素的尺寸。例如，如果元素是一个完美的正方形，它将创建一个完美的圆形径向渐变。然而，如果元素是一个矩形，那么径向渐变将看起来像一个椭圆形。
- en: We can add as many colors in a gradient as we want or need to. Unless it is
    strictly necessary, I recommend that you steer away from doing so, as it can have
    a negative impact on browser performance.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在渐变中添加我们想要的或需要的任意多的颜色。除非这是绝对必要的，否则我建议您避免这样做，因为它可能会对浏览器性能产生负面影响。
- en: Additionally, in order to give us more control over the gradients, we can define
    where a gradient color stops so that the following one can start. This is called
    **color stops**. Color stops can be defined in pixels or percentages. Percentages
    are more commonly used because of their relative nature, which helps maintain
    the integrity and proportions of the gradients.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了让我们对渐变有更多的控制，我们可以定义渐变颜色的停止位置，以便下一个颜色可以开始。这被称为**颜色停止**。颜色停止可以用像素或百分比定义。百分比更常用，因为它的相对性质有助于保持渐变的完整性和比例。
- en: '**CSS**:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**：'
- en: '[PRE46]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: background-origin
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: background-origin
- en: 'The `background-origin` CSS property defines how the background gets rendered
    inside an element, and it looks like this:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`background-origin` CSS 属性定义了背景如何在元素内部渲染，其外观如下：'
- en: '[PRE47]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Description
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This property works similarly to the `background-clip` CSS property, except
    that with `background-origin`, the background is resized instead of clipped.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性的工作方式与 `background-clip` CSS 属性类似，但与 `background-origin` 不同的是，背景是缩放而不是裁剪。
- en: 'There are four values: `border-box`, `padding-box`, `content-box`, and `inherit`.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个值：`border-box`、`padding-box`、`content-box` 和 `inherit`。
- en: '`border-box`: The background extends all the way to the edge of the container,
    but under the border'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`border-box`：背景延伸到容器的边缘，但在边框下方'
- en: '`padding-box`: The background extends to meet the border edge to edge'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padding-box`：背景延伸到与边框边缘对齐'
- en: '`content-box`: The background is rendered inside the content box'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content-box`：背景在内容框内渲染'
- en: '`inherit`: This is the default value'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inherit`：这是默认值'
- en: '**CSS**:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**：'
- en: '[PRE48]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/background-origin](http://tiny.cc/background-origin)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个在CodePen上的演示：[http://tiny.cc/background-origin](http://tiny.cc/background-origin)
- en: background-position
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: background-position
- en: 'The `background-position` CSS property allows us to place the background (image
    or gradient) anywhere within its parent container, and it looks like this:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`background-position` CSS 属性允许我们在其父容器内放置背景（图像或渐变），其外观如下：'
- en: '[PRE49]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Description
  id: totrans-303
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'We can use three different types of values: predefined *keywords*, *percentage*,
    and *length*.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用三种不同类型的价值：预定义的 *关键词*，*百分比*，和 *长度*。
- en: Predefined keywords
  id: totrans-305
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 预定义关键词
- en: Values such as `left`, `right`, `top`, and `bottom` are the predefined keywords.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 值如 `left`, `right`, `top`, 和 `bottom` 是预定义的关键词。
- en: Percentages
  id: totrans-307
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 百分比
- en: Values such as `5%` and `80%`.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 值如 `5%` 和 `80%`.
- en: Length
  id: totrans-309
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 长度
- en: Values such as `15px` `130px`.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 值如 `15px` `130px`.
- en: 'This property requires you to declare two values: the first value relates to
    the *x* axis (horizontal) and the second value to the *y* axis (vertical).'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性需要您声明两个值：第一个值与 *x* 轴（水平）相关，第二个值与 *y* 轴（垂直）相关。
- en: The default value is `0 0`; which is exactly the same as `left top`.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值是 `0 0`；这与 `left top` 完全相同。
- en: '**CSS**:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE50]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/background-position](http://tiny.cc/background-position)'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个在 CodePen 上的演示：[http://tiny.cc/background-position](http://tiny.cc/background-position)
- en: background-repeat
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: background-repeat
- en: 'The `background-repeat` CSS property has two functions:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`background-repeat` CSS 属性有两个功能：'
- en: To define whether a background image is repeated or not
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义背景图像是否重复
- en: To determine how the background image is repeated
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定背景图像的重复方式
- en: 'It looks like this:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来像这样：
- en: '[PRE51]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Alternatively, it could also look like this:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，它也可能看起来像这样：
- en: '[PRE52]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Description
  id: totrans-324
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This property only works if `background-image` has been declared.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性仅在 `background-image` 已声明时才有效。
- en: 'There are four values: `repeat`, `repeat-x`, `repeat-y`, and `no-repeat`.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个值：`repeat`, `repeat-x`, `repeat-y`, 和 `no-repeat`.
- en: '`repeat`: The background image will repeat in both *x* and *y* axes. This will
    completely fill the container. This is the default value.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repeat`: 背景图像将在 *x* 和 *y* 轴上重复。这将完全填充容器。这是默认值。'
- en: '`repeat-x`: The background image will only repeat in the *x* axis, hence, horizontally.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repeat-x`: 背景图像将在 *x* 轴上重复，因此，水平方向上。'
- en: '`repeat-y`: The background image will only repeat in the *y* axis, hence, vertically.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repeat-y`: 背景图像将在 *y* 轴上重复，因此，垂直方向上。'
- en: '`no-repeat`: The background image will not be repeated and will only display
    one instance of it.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`no-repeat`: 背景图像不会重复，并且只会显示一个实例。'
- en: '**CSS**:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE53]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/background-repeat](http://tiny.cc/background-repeat)'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个在 CodePen 上的演示：[http://tiny.cc/background-repeat](http://tiny.cc/background-repeat)
- en: background-size
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: background-size
- en: 'The `background-size` CSS property defines the size of the background image,
    and it looks like this:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`background-size` CSS 属性定义了背景图像的大小，其外观如下：'
- en: '[PRE54]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Description
  id: totrans-337
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'There are five values: a *length* value, a *percentage* value, `auto`, `contain`,
    and `cover`.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 有五个值：一个 *长度* 值，一个 *百分比* 值，`auto`，`contain`，和 `cover`。
- en: Length value
  id: totrans-339
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 长度值
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们使用以下单位之一时：`px`, `em`, `in`, `mm`, `cm`, `vw`, 等等。
- en: Percentage value
  id: totrans-341
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 百分比值
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们使用百分比如 `50%`, `85%`, 等等情况。
- en: auto
  id: totrans-343
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: auto
- en: This value scales the image in the corresponding direction (horizontal or vertical)
    in order to maintain its aspect ratio and not deform it.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 此值在相应的方向（水平或垂直）上缩放图像，以保持其宽高比，不变形。
- en: contain
  id: totrans-345
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: contain
- en: This value makes sure the image can be seen completely within its parent container.
    The image does not bleed on the edges; it's "contained".
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 此值确保图像可以完全在其父容器内看到。图像的边缘不会溢出；它是“包含”的。
- en: cover
  id: totrans-347
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: cover
- en: This value scales the image and takes the longest dimension (horizontal or vertical).
    It makes sure that the image completely covers that dimension. Bleeding can occur
    if the container and the image have different aspect ratios.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 此值缩放图像并取最长的维度（水平或垂直）。它确保图像完全覆盖该维度。如果容器和图像有不同的宽高比，则可能会发生溢出。
- en: When declaring the size of the background, we can use either one or two values.
    The first value is the *width*, and the second is the *height* of the background
    image.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 当声明背景的大小，我们可以使用一个或两个值。第一个值是 *宽度*，第二个值是背景图像的 *高度*。
- en: Using one value means that the second value is set to `auto`. When using two
    values, we are then defining the `width` and `height` values of the background
    image.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个值意味着第二个值设置为 `auto`。当使用两个值时，我们定义背景图像的 `width` 和 `height` 值。
- en: We can use any measurement unit we want. Pixels, percentages, and the `auto`
    value are the most commonly used though.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用我们想要的任何度量单位。像素、百分比和`auto`值是最常用的。
- en: We can even combine multiple images in the same container. The background shorthand
    property is the best way to handle this situation.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以在同一个容器中组合多个图像。背景缩写属性是处理这种情况的最佳方式。
- en: '**CSS**:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE55]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/background-size](http://tiny.cc/background-size)'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个在CodePen上的演示：[http://tiny.cc/background-size](http://tiny.cc/background-size)
- en: background
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 背景
- en: The `background` CSS property is the shorthand in which we can list all background
    values.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`background` CSS属性是一个缩写，我们可以列出所有背景值。'
- en: 'I often see many developers write the longhand version of the property to declare
    a single value, such as a color. Here is an example:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常看到许多开发者编写长格式来声明单个值，例如颜色。以下是一个例子：
- en: '[PRE56]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Although this is totally fine, I prefer to use the shorthand version for practically
    everything:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这完全没问题，但我更喜欢为几乎所有事情使用缩写版本：
- en: '[PRE57]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This is a bit more scalable because if we need to add any other values, all
    we need to do is add the new value to this declaration rather than writing a separate
    one. However, at the end, it's all a matter of personal style.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 这更易于扩展，因为如果我们需要添加任何其他值，我们只需要将新值添加到这个声明中，而不是单独编写一个。然而，最终，这还是取决于个人风格。
- en: '**CSS**:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE58]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Box model
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 盒模型
- en: 'Every element in the web is a square, and as such, it has intrinsic characteristics:
    width, height, padding, border, and margin. All these characteristics, put together,
    make the box model.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络中，每个元素都是一个正方形，因此它具有固有的特性：宽度、高度、填充、边框和边距。所有这些特性加在一起，构成了盒模型。
- en: The almighty box model is one of the most talked about subjects in the CSS industry
    due to IE6 and IE7 being the most popular browsers back in the day. However, they
    had major issues interpreting this simple CSS concept. This meant the web designers
    and developers had to come up with all sorts of tricks to get around such a problem.
    Those days are now gone, for the most part at least.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 不可一世的盒模型是CSS行业中最常讨论的主题之一，因为IE6和IE7在当年是最受欢迎的浏览器。然而，它们在解释这个简单的CSS概念上存在重大问题。这意味着网页设计师和开发者不得不想出各种技巧来解决这个问题。至少在大多数情况下，那些日子已经过去了。
- en: Let's move on to the box model properties.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续讨论盒模型属性。
- en: width
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宽度
- en: 'The `width` CSS property specifies the width of an element''s content area,
    and it looks like this:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`width` CSS属性指定了元素内容区域的宽度，其形式如下：'
- en: '[PRE59]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Alternatively, it could also look like this:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，它也可能看起来像这样：
- en: '[PRE60]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Description
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The content area is inside the padding, border, and margin of the element.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 内容区域位于元素的填充、边框和边距内部。
- en: 'Let''s talk about the most used values and keywords: the *length* value, *percentage*
    value, `auto`, `max-content`, `min-content`, and `fit-content`.'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论最常用的值和关键字：*长度值*、*百分比值*、`auto`、`max-content`、`min-content`和`fit-content`。
- en: Length value
  id: totrans-377
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 长度值
- en: 'This is basically when we use one of the following units: `px`, `em`, `in`,
    `mm`, `cm`, `vw`, and so on.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是我们使用以下单位之一时的情况：`px`、`em`、`in`、`mm`、`cm`、`vw`等等。
- en: Percentage value
  id: totrans-379
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 百分比值
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们使用百分比的时候，比如`50%`、`85%`等等。
- en: auto
  id: totrans-381
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: auto
- en: This is a keyword value that allows the browser to choose the width of the element.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个关键字值，允许浏览器选择元素的宽度。
- en: max-content
  id: totrans-383
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: max-content
- en: This is a keyword value that makes the container take the width of its content.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个关键字值，使容器宽度与其内容相匹配。
- en: min-content
  id: totrans-385
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: min-content
- en: This is a keyword value that makes the container as small as possible depending
    on its content.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个关键字值，根据其内容使容器尽可能小。
- en: fit-content
  id: totrans-387
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: fit-content
- en: This is a keyword value that makes the container match the width of its content.
    This works great on containers with unknown or variable width.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个关键字值，使容器宽度与其内容相匹配。这对于具有未知或可变宽度的容器效果很好。
- en: You can find more information on MDN at [http://tiny.cc/mdn-width](http://tiny.cc/mdn-width)
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在MDN上找到更多信息：[http://tiny.cc/mdn-width](http://tiny.cc/mdn-width)
- en: '**CSS**:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE61]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/width](http://tiny.cc/width)'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个在CodePen上的演示：[http://tiny.cc/width](http://tiny.cc/width)
- en: height
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高度
- en: 'The `height` CSS property specifies the height of an element''s *content area*,
    and it looks like this:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`height` CSS属性指定了元素内容区域的高度，其形式如下：'
- en: '[PRE62]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Description
  id: totrans-396
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The *content area* is inside the padding, border, and margin of the element.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '*内容区域*位于元素的填充、边框和边距内部。'
- en: The most used values are a *length* value, a *percentage* value, and `inherit`.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的值是长度值、百分比值和 `inherit`。
- en: Length value
  id: totrans-399
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 长度值
- en: 'This is basically when we use one of the following units: `px`, `em`, `in`,
    `mm`, `cm`, `vw`, and so on.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是我们使用以下单位之一时的情况：`px`、`em`、`in`、`mm`、`cm`、`vw` 等等。
- en: Percentage value
  id: totrans-401
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 百分比值
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们使用百分比的情况，例如 `50%`、`85%` 等等。
- en: inherit
  id: totrans-403
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: inherit
- en: With this keyword, the element will inherit its parent container's height.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个关键字，元素将继承其父容器的高度。
- en: You can find more information on MDN at [http://tiny.cc/mdn-height](http://tiny.cc/mdn-height)
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 MDN 上找到更多信息：[http://tiny.cc/mdn-height](http://tiny.cc/mdn-height)
- en: '**CSS**:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE63]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: padding
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: padding
- en: 'The `padding` CSS property creates a space on all four sides of an element
    on the inside, between its content and the edges, and it looks like this:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '`padding` CSS 属性在元素的内部四侧创建空间，在其内容与边缘之间，其外观如下：'
- en: '[PRE64]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Alternatively, it could also look like this:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，它也可以是这样的：
- en: '[PRE65]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Description
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Borders and margins are outside of the content area and do not get affected
    by the padding.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 边框和边距在内容区域之外，并且不受填充的影响。
- en: The `padding` property is the shorthand for `padding-top`, `padding-right`,
    `padding-bottom`, and `padding-left`. We can use one, two, three, or all four
    values.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '`padding` 属性是 `padding-top`、`padding-right`、`padding-bottom` 和 `padding-left`
    的简写。我们可以使用一个、两个、三个或所有四个值。'
- en: '**One value**: This means that all four sides have the same value.'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个值**：这意味着所有四侧都有相同的值。'
- en: '**Two values**: The first value is for Top and Bottom. The second value is
    for Left and Right.'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**两个值**：第一个值用于顶部和底部。第二个值用于左侧和右侧。'
- en: '**Three values**: The first value is for Top. The second value is for Left
    and Right. The third value is for Bottom.'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**三个值**：第一个值用于顶部。第二个值用于左侧和右侧。第三个值用于底部。'
- en: '**Four values**: The first value is for Top. The second is for Right. The third
    is for Bottom. The fourth is for Left.'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**四个值**：第一个值用于顶部。第二个是用于右侧。第三个是用于底部。第四个是用于左侧。'
- en: Negative values are not allowed.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 不允许使用负值。
- en: '**CSS**:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE66]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: margin
  id: totrans-423
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: margin
- en: 'The `margin` CSS property defines an outside space on one, two, three or all
    four sides of an element, and it looks like this:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '`margin` CSS 属性定义了一个元素的一侧、两侧、三侧或所有四侧的外部空间，其外观如下：'
- en: '[PRE67]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Alternatively, it could also look like this:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，它也可以是这样的：
- en: '[PRE68]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Description
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `margin` property is the shorthand for `margin-top`, `margin-right`, `margin-bottom`,
    and `margin-left`. Just like with `padding`, we can use one, two, three, or all
    four values.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`margin` 属性是 `margin-top`、`margin-right`、`margin-bottom` 和 `margin-left` 的简写。就像
    `padding` 一样，我们可以使用一个、两个、三个或所有四个值。'
- en: '**One value**: This means that all four sides have the same padding.'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个值**：这意味着所有四侧都有相同的填充。'
- en: '**Two values**: The first value is for Top and Bottom. The second value is
    for Left and Right.'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**两个值**：第一个值用于顶部和底部。第二个值用于左侧和右侧。'
- en: '**Three values**: The first value is for Top. The second value is for Left
    and Right. The third value is for Bottom.'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**三个值**：第一个值用于顶部。第二个值用于左侧和右侧。第三个值用于底部。'
- en: '**Four values**: The first value is for Top. The second is for Right. The third
    is for Bottom. The fourth value is for Left.'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**四个值**：第一个值用于顶部。第二个值用于右侧。第三个值用于底部。第四个值用于左侧。'
- en: Negative values are allowed.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 允许使用负值。
- en: '**CSS**:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE69]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Collapsing margins
  id: totrans-437
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 边距合并
- en: There is a particular behavior with the margins. If two stacked elements have
    top and bottom margins, the margins are not added. Instead, the larger value is
    the only one taken into account.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 边距有一个特定的行为。如果有两个堆叠的元素具有顶部和底部边距，则边距不会相加。相反，只考虑较大的值。
- en: For example, we have an `<h1>` heading and a `<p>` paragraph. The heading has
    a bottom margin of `20px`, and the paragraph has a top margin of `10px`.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们有一个 `<h1>` 标题和一个 `<p>` 段落。标题的底部边距为 `20px`，而段落的顶部边距为 `10px`。
- en: Our senses immediately tell us that the total margin is `30px`, but in reality,
    because vertical margins collapse, only the largest value is considered, in this
    case, `20px`.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的感觉立即告诉我们总边距是 `30px`，但实际上，因为垂直边距会合并，只有最大的值会被考虑，在这种情况下，是 `20px`。
- en: The reason for this is that many elements, such as headings and paragraphs in
    our example, have both top and bottom margins. So, having the margins collapse
    allows the content and layout to maintain consistency and avoid creating undesired
    extra spacing between stacked elements.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 原因在于，许多元素，如我们示例中的标题和段落，都有顶部和底部边距。因此，合并边距允许内容和布局保持一致性，避免在堆叠元素之间创建不希望的多余空间。
- en: This is also good because it saves us the effort of having to "negate" margins
    on every stacked element that has top and bottom margins, again, to avoid creating
    those extra spaces.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 这也很好，因为它节省了我们为每个具有顶部和底部边距的堆叠元素“抵消”边距的精力，再次避免创建那些额外空间。
- en: The way I see it, is that collapsing margins is an editorial feature of the
    CSS margin property. I hope that the prior explanations help embrace this behavior.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为，合并边距是CSS边距属性的一个编辑功能。我希望前面的解释有助于理解这种行为。
- en: 'Here is a demo in CodePen: [http://tiny.cc/collapsing-margins](http://tiny.cc/collapsing-margins)'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个CodePen上的演示：[http://tiny.cc/collapsing-margins](http://tiny.cc/collapsing-margins)
- en: border
  id: totrans-445
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 边框
- en: The `border` CSS property is the shorthand that defines an element's border
    thickness, style, and color.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '`border` CSS属性是一个简写属性，用于定义元素的边框厚度、样式和颜色。'
- en: The `border` property and all its sister properties (`border-width`, `border-style`,
    and `border-color`) and variations are self-explanatory, so there's no need for
    a *Description* section like in prior properties.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '`border`属性及其所有姐妹属性（`border-width`、`border-style`和`border-color`）及其变体都是不言自明的，因此不需要像先前属性那样有“描述”部分。'
- en: The CSS example ahead will help clarify the use of these properties.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的CSS示例将有助于阐明这些属性的使用。
- en: border-width
  id: totrans-449
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 边框宽度
- en: This is the thickness of the border. It can be declared using `px` or `em`,
    but `px` yields more controllable results.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 这是边框的厚度。可以使用`px`或`em`声明，但`px`会产生更可控的结果。
- en: border-style
  id: totrans-451
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 边框样式
- en: 'This defines the type of line or no line at all. It supports the following
    values: `dashed`, `dotted`, `double`, `groove`, `hidden`, `inset`, `none`, `outset`,
    `ridge`, and `solid`.'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了线的类型或根本不显示线。它支持以下值：`dashed`、`dotted`、`double`、`groove`、`hidden`、`inset`、`none`、`outset`、`ridge`和`solid`。
- en: border-color
  id: totrans-453
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 边框颜色
- en: 'This defines the color of the line. It supports all color modes: HEX, RGB,
    RGBa, HSL, HSLs, and color name.'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了线的颜色。它支持所有颜色模式：十六进制、RGB、RGBa、HSL、HSLs和颜色名称。
- en: Keep in mind that all HTML elements are squares, so we can target any side of
    an element with `border-top-color`, `border-right-color`, `border-bottom-color`,
    or `border-left-color`.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，所有HTML元素都是正方形，因此我们可以使用`border-top-color`、`border-right-color`、`border-bottom-color`或`border-left-color`来定位元素的任何一边。
- en: The order of the values in the shorthand does not affect the output.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 简写值中的值的顺序不影响输出。
- en: 'In the following example, the top rule in *shorthand syntax* accomplishes exactly
    the same accomplishment as the bottom rule with the *longhand syntax*:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，*简写语法*中的顶部规则与*长写语法*中的底部规则达到完全相同的效果：
- en: '**CSS**:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE70]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: box-sizing
  id: totrans-460
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 盒子模型
- en: 'The `box-sizing` CSS property allows us to change the way browsers understand
    the box model by default, and it looks like this:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '`box-sizing` CSS属性允许我们通过默认方式更改浏览器理解盒子模型的方式，其语法如下：'
- en: '[PRE71]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Description
  id: totrans-463
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'There are two values: `content-box` and `border-box`.'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个值：`content-box`和`border-box`。
- en: content-box
  id: totrans-465
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: content-box
- en: This is the default value. The padding, border, and margin values are added
    to the final width and height of the element. This value is rarely used exactly
    because of the behavior I just described.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认值。填充、边框和边距值添加到元素的最终宽度和高度。这个值很少使用，正是因为我刚才描述的行为。
- en: border-box
  id: totrans-467
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: border-box
- en: On the other hand, since this value changes the box model, the padding and border
    are not added to the final width and height of the element but only to the margin.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，由于这个值改变了盒子模型，填充和边框不会添加到元素的最终宽度和高度，而只会添加到边距。
- en: '**CSS**:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE72]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/box-sizing](http://tiny.cc/box-sizing)'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个CodePen上的演示：[http://tiny.cc/box-sizing](http://tiny.cc/box-sizing)
- en: max-height
  id: totrans-472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最大高度
- en: 'The `max-height` CSS property defines the maximum height of an element, and
    it looks like this:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '`max-height` CSS属性定义了元素的最大的高度，其语法如下：'
- en: '[PRE73]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Description
  id: totrans-475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `max-height` attribute overrides the `height` property. Negative values
    are not allowed.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '`max-height`属性覆盖了`height`属性。不允许使用负值。'
- en: The most used values are a *length* value and a *percentage* value.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的值是长度值和百分比值。
- en: Length value
  id: totrans-478
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 长度值
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们使用以下单位之一的情况：`px`、`em`、`in`、`mm`、`cm`、`vw`等。
- en: Percentage value
  id: totrans-480
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 百分比值
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们使用百分比的情况，例如`50%`、`85%`等。
- en: You can find more information on MDN at [http://tiny.cc/mdn-max-height](http://tiny.cc/mdn-max-height)
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在MDN上找到更多关于MDN的信息，链接为[http://tiny.cc/mdn-max-height](http://tiny.cc/mdn-max-height)。
- en: '**CSS**:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE74]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: max-width
  id: totrans-485
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: max-width
- en: 'The `max-width` CSS property defines the maximum width of an element, and it
    looks like this:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '`max-width` CSS属性定义了元素的宽度最大值，它看起来是这样的：'
- en: '[PRE75]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Description
  id: totrans-488
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `max-width` attribute overrides the `width` property. Negative values are
    not allowed.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '`max-width`属性覆盖了`width`属性。不允许使用负值。'
- en: The most used values are a *length* value and a *percentage* value.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的值是长度值和百分比值。
- en: Length value
  id: totrans-491
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 长度值
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们使用以下单位之一的情况：`px`、`em`、`in`、`mm`、`cm`、`vw`等。
- en: Percentage value
  id: totrans-493
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 百分比值
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们使用百分比的情况，例如`50%`、`85%`等。
- en: You can find more information on MDN at [http://tiny.cc/mdn-max-width](http://tiny.cc/mdn-max-width)
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在MDN上找到更多关于MDN的信息，链接为[http://tiny.cc/mdn-max-width](http://tiny.cc/mdn-max-width)。
- en: '**CSS**:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE76]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: min-height
  id: totrans-498
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: min-height
- en: 'The `min-height` CSS property defines the minimum height of an element, and
    it looks like this:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '`min-height` CSS属性定义了元素的最小高度，它看起来是这样的：'
- en: '[PRE77]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Description
  id: totrans-501
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `min-height` attribute overrides the `height` and `max-height` properties.
    Negative values are not allowed.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '`min-height`属性覆盖了`height`和`max-height`属性。不允许使用负值。'
- en: The most used values are a *length* value and a *percentage* value.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的值是长度值和百分比值。
- en: Length value
  id: totrans-504
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 长度值
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们使用以下单位之一的情况：`px`、`em`、`in`、`mm`、`cm`、`vw`等。
- en: Percentage value
  id: totrans-506
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 百分比值
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们使用百分比的情况，例如`50%`、`85%`等。
- en: You can find more information on MDN at [http://tiny.cc/mdn-min-height](http://tiny.cc/mdn-min-height)
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在MDN上找到更多关于MDN的信息，链接为[http://tiny.cc/mdn-min-height](http://tiny.cc/mdn-min-height)。
- en: '**CSS**:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE78]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: min-width
  id: totrans-511
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: min-width
- en: 'The `min-width` CSS property defines the minimum width of an element, and it
    looks like this:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '`min-width` CSS属性定义了元素的宽度最小值，它看起来是这样的：'
- en: '[PRE79]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Description
  id: totrans-514
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `min-width` attribute overrides the `width` and `max-width` properties.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '`min-width`属性覆盖了`width`和`max-width`属性。'
- en: Negative values are not allowed.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 不允许使用负值。
- en: The most used values are a *length* value and a *percentage* value.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的值是长度值和百分比值。
- en: Length value
  id: totrans-518
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 长度值
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们使用以下单位之一的情况：`px`、`em`、`in`、`mm`、`cm`、`vw`等。
- en: Percentage value
  id: totrans-520
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 百分比值
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们使用百分比的情况，例如`50%`、`85%`等。
- en: You can find more information on MDN at [http://tiny.cc/mdn-min-width](http://tiny.cc/mdn-min-width)
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在MDN上找到更多关于MDN的信息，链接为[http://tiny.cc/mdn-min-width](http://tiny.cc/mdn-min-width)。
- en: '**CSS**:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE80]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: object-fit
  id: totrans-525
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: object-fit
- en: 'The `object-fit` CSS property defines how a *replaced element* fits inside
    its content box, and it looks like this:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '`object-fit` CSS属性定义了替换元素如何适应其内容框，它看起来是这样的：'
- en: '[PRE81]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Description
  id: totrans-528
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: A *replaced element* is an HTML element whose content and dimensions are intrinsic
    (defined by the element itself) and are not defined by CSS or by its context or
    surroundings.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 替换元素是一个HTML元素，其内容和尺寸是内在的（由元素本身定义），而不是由CSS或其上下文或周围环境定义。
- en: Examples of *replaced elements* are `<img>`, `<video>`, `<audio>`, `<canvas>`,
    `<iframe>`, `<textarea>`, `<object>`, `<input>`, `<button>`, `<br>`, and `<hr>`.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 替换元素的例子有`<img>`、`<video>`、`<audio>`、`<canvas>`、`<iframe>`、`<textarea>`、`<object>`、`<input>`、`<button>`、`<br>`和`<hr>`。
- en: Now, the most important characteristic of replaced elements is that we cannot
    apply generated content to them via CSS using the `:before` or `:after` pseudo-element
    selectors.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，替换元素最重要的特性之一是我们不能通过CSS使用`:before`或`:after`伪元素选择器向它们应用生成内容。
- en: This property can come in handy when we want a group of thumbnails to have the
    same width and height, but without distorting the images. However, the images
    for the thumbnails are uploaded by users, which means that the uploaded images
    can be of all sizes and different aspect ratios. The `object-fit` CSS property
    can help us have control of the thumbnails in such a situation.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要一组缩略图具有相同的宽度和高度，但又不扭曲图像时，这个属性会很有用。然而，缩略图的图像是由用户上传的，这意味着上传的图像可以是各种尺寸和不同的宽高比。`object-fit`
    CSS属性可以帮助我们在这种情况下控制缩略图。
- en: Tip
  id: totrans-533
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The content inside the replaced element is centered vertically and horizontally
    by default. However, the content can be repositioned using the `object-position`
    property.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 替换元素内部的内容默认在水平和垂直方向上居中。然而，可以使用`object-position`属性重新定位内容。
- en: 'There are four keyword values: `contain`, `cover`, `fill`, `none`, and `scale-down`.'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个关键字值：`contain`、`cover`、`fill`、`none`和`scale-down`。
- en: contain
  id: totrans-536
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: contain
- en: The aspect ratio of the content inside the replaced element is preserved. This
    content is enlarged as much as possible until it reaches its maximum size defined
    by its width and height. It's possible to see some "unfilled" areas of the element
    due to preservation of the aspect ratio.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 替换元素内部内容的宽高比被保留。此内容尽可能放大，直到达到其宽度和高度定义的最大尺寸。由于宽高比的保护，可能会看到一些“未填充”的元素区域。
- en: cover
  id: totrans-538
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 覆盖
- en: The aspect ratio of the content inside the replaced element is preserved. This
    content is enlarged as much as possible until it completely fills or "covers"
    the entire content box.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 替换元素内部内容的宽高比被保留。此内容尽可能放大，直到它完全填充或“覆盖”整个内容框。
- en: fill
  id: totrans-540
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 填充
- en: The aspect ratio of the content inside the replaced element is not necessarily
    preserved. This means that when filling the entire content box, the content of
    the replaced element can be stretched or shrunk during the scaling up or scaling
    down of the content.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 替换元素内部内容的宽高比不一定被保留。这意味着当填充整个内容框时，替换元素的内容在放大或缩小过程中可能会被拉伸或缩小。
- en: none
  id: totrans-542
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 无
- en: No resizing is done.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 不进行缩放。
- en: scale-down
  id: totrans-544
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 缩小
- en: This acts as if `none` or `contain` were declared. The idea here is that the
    browser will try to figure out the smallest concrete size of the content inside
    the replaced element in order to make it fit in its content box while preserving
    the aspect ratio of the content inside the replaced element.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于声明了`none`或`contain`。这里的想法是，浏览器将尝试确定替换元素内部内容的最大具体尺寸，以便使其适合其内容框，同时保留替换元素内部内容的宽高比。
- en: '**CSS**:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE82]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/object-fit-position](http://tiny.cc/object-fit-position)'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个CodePen上的演示：[http://tiny.cc/object-fit-position](http://tiny.cc/object-fit-position)
- en: object-position
  id: totrans-549
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: object-position
- en: 'The `object-position` CSS property defines the location of the content of the
    replaced element, and it looks like this:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '`object-position` CSS属性定义了替换元素内容的定位，其外观如下：'
- en: '[PRE83]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Description
  id: totrans-552
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: As described in the Tip of the object-fit CSS property, by default, the content
    of the replaced element is placed in the center of the content box, which is 50%
    50%.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 如对象-fit CSS属性的提示所述，默认情况下，替换元素的 内容放置在内容框的中心，即50% 50%。
- en: Now, this property behaves similarly to the `background-position` CSS property.
    This means, we can declare either *one* or *two* values.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，此属性的行为类似于`background-position` CSS属性。这意味着我们可以声明一个或两个值。
- en: The values are either *length* or *percentages* of *keyword* values `top`, `right`,
    `bottom`, or `left`. Negative values are allowed.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 值可以是`top`、`right`、`bottom`或`left`等关键字值的长度或百分比。允许使用负值。
- en: '**CSS**:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE84]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/object-fit-position](http://tiny.cc/object-fit-position)'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个CodePen上的演示：[http://tiny.cc/object-fit-position](http://tiny.cc/object-fit-position)
- en: Border radius
  id: totrans-559
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 边框半径
- en: With this property, we can not only make rounded corners but also circles, ellipses,
    and other interesting shapes.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此属性，我们不仅可以制作圆角，还可以制作圆形、椭圆形和其他有趣的形状。
- en: I admit that the term "rounded corners" is far less obscure than "border radius".
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 我承认“圆角”这个术语比“边框半径”要少一些晦涩。
- en: border-radius
  id: totrans-562
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: border-radius
- en: 'The `border-radius` CSS property allows us to make rounded corners on almost
    any HTML element, and it looks like this:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '`border-radius` CSS属性允许我们在几乎任何HTML元素上制作圆角，其外观如下：'
- en: '[PRE85]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Description
  id: totrans-565
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `border-radius` attribute is also the shorthand syntax for the `border-top-left-radius`,
    `border-top-right-radius`, `border-bottom-right-radius`, and `border-bottom-left-radius`
    properties.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '`border-radius`属性也是`border-top-left-radius`、`border-top-right-radius`、`border-bottom-right-radius`和`border-bottom-left-radius`属性的简写语法。'
- en: 'Using either a circle or an ellipse, we can create rounded corners:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 使用圆形或椭圆形，我们可以创建圆角：
- en: '![Description](img/B03289_04_03.jpg)'
  id: totrans-568
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/B03289_04_03.jpg)'
- en: 'There are two values: a *length* value and a *percentage* value.'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个值：一个*长度*值和一个*百分比*值。
- en: Length value
  id: totrans-570
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 长度值
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 这时我们会使用以下单位之一：`px`、`em`、`in`、`mm`、`cm`、`vw`等等。
- en: Percentage value
  id: totrans-572
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 百分比值
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 这时我们会使用百分比，如`50%`、`85%`等等。
- en: We can use, one, two, three, or four values in the same declaration. We can
    also use a slash symbol, "`/`", to separate groups of values.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在同一个声明中使用一个、两个、三个或四个值。我们还可以使用斜杠符号"`/`"来分隔值组。
- en: Tip
  id: totrans-575
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Sometimes, the background color or texture "bleeds" over the rounded corners
    in some browsers. Use `background-clip` to fix this issue.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，某些浏览器的背景颜色或纹理会“溢出”到圆角上。使用`background-clip`来解决这个问题。
- en: '**CSS**:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE86]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/css-border-radius](http://tiny.cc/css-border-radius)'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个CodePen中的演示：[http://tiny.cc/css-border-radius](http://tiny.cc/css-border-radius)
- en: Unit
  id: totrans-580
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单位
- en: 'CSS unit is a type of data with which we can define measurements, and it looks
    like this:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: CSS单位是一种数据类型，我们可以用它来定义测量值，它看起来像这样：
- en: '[PRE87]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Alternatively, it could also look like this:'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，它也可以这样：
- en: '[PRE88]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: There is no space between the number and the unit.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 数字和单位之间没有空格。
- en: In most cases, the unit isn't required after the number `0` (zero).
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，数字`0`（零）后面不需要单位。
- en: There are several types of length units, such as described in the following
    explanations.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所述，有几种长度单位类型。
- en: Relative length units
  id: totrans-588
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相对长度单位
- en: They are dependent on another element's length (usually, a parent element in
    the DOM) that relates directly to the element in question. When the other element's
    length changes, the length of the element in question maintains the defined proportion.
    In other words, there is no need to declare the length of the child element again.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 它们依赖于另一个元素的长度（通常是一个DOM中的父元素）与所讨论的元素直接相关。当其他元素的长度发生变化时，所讨论的元素的长度保持定义的比例。换句话说，没有必要再次声明子元素的长度。
- en: Description
  id: totrans-590
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Relative units are always the best way to go if we want to build scalable systems.
    Setting values in a single element and then modifying that single element to affect
    the whole system saves a lot of time and many headaches.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要构建可伸缩的系统，相对单位总是最好的选择。在单个元素中设置值，然后修改该单个元素以影响整个系统可以节省大量时间和许多麻烦。
- en: ex
  id: totrans-592
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ex
- en: The `ex` suffix stands for an element's x-height. The `ex` CSS unit refers to
    the height of lowercase *x*. This height is dependent on the font. In other words,
    the heights can be different if we are using Arial than if we are using Verdana,
    even if the value is the same.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '`ex`后缀代表一个元素的x-height。`ex` CSS单位指的是小写字母*x*的高度。这个高度取决于字体。换句话说，如果我们使用Arial而不是使用Verdana，即使值相同，高度也可能不同。'
- en: '**CSS**:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE89]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: ch
  id: totrans-596
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ch
- en: The `ch` suffix stands for character. The `ch` CSS unit refers to the width
    of the character `0` (zero). This width is dependent on the font. In other words,
    the widths can be different if we are using Arial than if we are using Verdana,
    even if the value is the same.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '`ch`后缀代表字符。`ch` CSS单位指的是字符`0`（零）的宽度。这个宽度取决于字体。换句话说，如果我们使用Arial而不是使用Verdana，即使值相同，宽度也可能不同。'
- en: '**CSS**:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE90]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: em
  id: totrans-600
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: em
- en: The `em` suffix stands for the pronunciation of the letter *m*, and it represented
    the width of the lower case *m* in the print and typography industries. In CSS,
    the `em` unit represents a calculation of an element's `font-size` property.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '`em`后缀代表字母*m*的发音，它代表了印刷和排版行业中小写*m*的宽度。在CSS中，`em`单位代表一个元素的`font-size`属性的计算。'
- en: This unit can be used together with many CSS properties, but the most common
    use is to define `font-size` elements.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单位可以与许多CSS属性一起使用，但最常见的使用是定义`font-size`元素。
- en: However, many web designers and developers prefer to use `rem` units to avoid
    the inheritance issue `em` units have in nested elements (3-4 or more levels deep).
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，许多网页设计师和开发者更喜欢使用`rem`单位来避免`em`单位在嵌套元素（3-4或更多级别）中存在的继承问题。
- en: '**CSS**:'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE91]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: rem
  id: totrans-606
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: rem
- en: The `rem` suffix stands for the abbreviation of the term *root element*. The
    `rem` CSS unit represents the font size of the root element in a markup document.
    A markup document is not only an HTML document; it can also be an XML, SVG, or
    other markup-based document.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '`rem` 后缀表示术语 *根元素* 的缩写。`rem` CSS 单位表示标记文档中根元素的字体大小。标记文档不仅是一个 HTML 文档；它还可以是
    XML、SVG 或其他基于标记的文档。'
- en: Granted that in this guide, we are referring to an HTML document, and since
    this is the case, the root element is the `<html>` element.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 在本指南中，我们指的是 HTML 文档，既然如此，根元素就是 `<html>` 元素。
- en: A very common practice is to set the font size on the `<html>` element to `62.5%`.
    This way, when we're setting our font sizes for other elements, we can still think
    in pixels, but write in `rem` units to maintain the relative font size when scaling
    up or down our document in our responsive projects.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 一种非常常见的做法是将 `<html>` 元素的字体大小设置为 `62.5%`。这样，当我们为其他元素设置字体大小时，我们仍然可以以像素为单位思考，但用
    `rem` 单位来保持相对字体大小，以便在响应式项目中放大或缩小文档。
- en: '**CSS**:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE92]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: The % sign
  id: totrans-612
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 百分比符号
- en: The `%` sign is what it implies, percentage. In CSS `em` units and percentage
    units yield the same result. Percentage values, such as any of the other relative
    units, are dependent on another value, usually that of the parent element.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '`%` 符号就是它所暗示的，百分比。在 CSS 中，`em` 单位和百分比单位会产生相同的结果。百分比值，如其他相对单位一样，依赖于另一个值，通常是父元素的值。'
- en: Like all other relative units, percentages and responsive web design go hand
    in hand.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有其他相对单位一样，百分比和响应式网页设计是相辅相成的。
- en: '**CSS**:'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE93]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Viewport-relative length units
  id: totrans-617
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视口相对长度单位
- en: These units relate to the viewport. If the viewport's dimensions change, the
    properties using viewport-relative length values adapt to the new dimensions of
    the view window.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 这些单位与视口相关。如果视口的尺寸发生变化，使用视口相对长度值的属性将适应视窗的新尺寸。
- en: Description
  id: totrans-619
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'These units are a godsend in my book. They do what we would expect of fonts
    in a responsive world: enlarge or shrink according to the width or height of the
    viewport.'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 这些单位对我来说是救星。它们在响应式世界中实现了我们对字体所期望的功能：根据视口的宽度或高度放大或缩小。
- en: Let's check them out.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来了解一下。
- en: vh
  id: totrans-622
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: vh
- en: The `vh` suffix stands for *viewport height*. The `vh` CSS unit relates to the
    height of the viewport. The value of `vh` is 1/100th of the height of the viewport.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '`vh` 后缀表示 *视口高度*。`vh` CSS 单位与视口的高度相关。`vh` 的值是视口高度的 1/100。'
- en: For example, if we declare the `font-size` of an element as `1vh`, and the browser
    window is `500px`, the font size is then `5px`.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们将一个元素的 `font-size` 声明为 `1vh`，而浏览器窗口大小为 `500px`，那么字体大小就是 `5px`。
- en: '**CSS**:'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE94]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: vw
  id: totrans-627
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: vw
- en: The `vw` suffix stands for *viewport width*. The `vw` CSS unit relates to the
    width of the viewport. The value of `vw` is 1/100th of the width of the viewport.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '`vw` 后缀表示 *视口宽度*。`vw` CSS 单位与视口的宽度相关。`vw` 的值是视口宽度的 1/100。'
- en: For example, if we declare the `font-size` of an element as `1vh`, and the browser
    window is `1400px`, the font size is then `14px`.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们将一个元素的 `font-size` 声明为 `1vh`，而浏览器窗口大小为 `1400px`，那么字体大小就是 `14px`。
- en: '**CSS**:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE95]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: vmin
  id: totrans-632
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: vmin
- en: The `vmin` suffix stands for *viewport minimum*. The `vmin` CSS unit relates
    to the smallest value of the viewport, of either its height or its width. The
    value of `vmin` is 1/100th of the side with the smallest length of the viewport.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '`vmin` 后缀表示 *视口最小值*。`vmin` CSS 单位与视口的最小值相关，无论是其高度还是宽度。`vmin` 的值是视口最短边的 1/100。'
- en: For example, if we declare the `font-size` of an element as `1vmin` and the
    browser's viewport is 600 × 800, the font size is then `6px`.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们将一个元素的 `font-size` 声明为 `1vmin`，而浏览器的视口大小为 600 × 800，那么字体大小就是 `6px`。
- en: '**CSS**:'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE96]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: vmax
  id: totrans-637
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: vmax
- en: The `vmax` suffix stands for viewport maximum. The `vmax` CSS unit relates to
    the largest value of the viewport, of either its height or its width. The value
    of `vmax` is 1/100th of the side with the largest length of the viewport.
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '`vmax` 后缀表示视口最大值。`vmax` CSS 单位与视口的最大值相关，无论是其高度还是宽度。`vmax` 的值是视口最长边的 1/100。'
- en: For example, if we declare the `font-size` of an element as `1vmax`, and the
    browser's viewport is 600 × 800, the font size is then `8px`.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们将一个元素的 `font-size` 声明为 `1vmax`，而浏览器的视口大小为 600 × 800，那么字体大小就是 `8px`。
- en: '**CSS**:'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE97]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Absolute length units
  id: totrans-642
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绝对长度单位
- en: These units represent a physical dimension of an element. Some units in CSS
    come from the printing world, and although it's not common to use them, it's important
    to know as much as we can about them.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 这些单位代表元素的物理尺寸。CSS中的一些单位来自印刷世界，尽管它们不常用，但了解它们是很重要的。
- en: Description
  id: totrans-644
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: These types of units relate directly to a physical measurement. They work best
    when the output environment is known, like in print.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的单位直接与物理测量相关。当输出环境已知时，例如在打印中，它们工作得最好。
- en: The most used absolute unit is the pixel (`px`). A pixel is known to be a single
    dot on a screen. The thing is that there is no industry standard for the size
    of that dot.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的绝对单位是像素(`px`)。像素被熟知为屏幕上的单个点。问题是，那个点的尺寸没有行业标准。
- en: In other words, a pixel in a standard LED/LCD display (for example, a monitor
    or a TV) has different sizes than a pixel in a high-density screen. Even the pixel
    sizes between high-density screens are different.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，标准LED/LCD显示器（例如，显示器或电视）上的像素大小与高密度屏幕上的像素大小不同。即使是高密度屏幕之间的像素大小也不同。
- en: Let's see what each abbreviation means, and at the end of the section, we'll
    be able to see a single example with all the units.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看每个缩写的含义，并在本节末尾，我们将能够看到一个包含所有单位的单一示例。
- en: cm
  id: totrans-649
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: cm
- en: The `cm` suffix stands for *centimeter*.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: '`cm`后缀代表*厘米*。'
- en: mm
  id: totrans-651
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: mm
- en: The `mm` suffix stands for *millimeter*.
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: '`mm`后缀代表*毫米*。'
- en: in
  id: totrans-653
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: in
- en: The `in` suffix stands for *inch*.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: '`in`后缀代表*英寸*。'
- en: pc
  id: totrans-655
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: pc
- en: The `pc` suffix stands for *pica*.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: '`pc`后缀代表*派卡*。'
- en: pt
  id: totrans-657
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: pt
- en: The `pt` suffix stands for *point*.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '`pt`后缀代表*点*。'
- en: px
  id: totrans-659
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: px
- en: The `px` suffix stands for *pixel*.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: '`px`后缀代表*像素*。'
- en: '**CSS**:'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: All the following values represent units that resemble `16px` font size, but
    in different length units.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 所有以下值代表类似于`16px`字体大小的单位，但使用不同的长度单位。
- en: '[PRE98]'
  id: totrans-663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Angle data types
  id: totrans-664
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 角度数据类型
- en: These units represent angle values.
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 这些单位代表角度值。
- en: Description
  id: totrans-666
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: These units are used whenever we want to rotate an element via the `transform`
    property.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 这些单位在需要通过`transform`属性旋转元素时使用。
- en: Aside from the `deg` data type, the other angle data type units aren't really
    that common.
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`deg`数据类型外，其他角度数据类型的单位并不常见。
- en: Let's check them out though.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看它们。
- en: deg
  id: totrans-670
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: deg
- en: The `deg` suffix stands for *degrees*.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '`deg`后缀代表*度*。'
- en: grad
  id: totrans-672
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: grad
- en: The `grad` suffix stands for *gradients*.
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '`grad`后缀代表*梯度*。'
- en: rad
  id: totrans-674
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: rad
- en: The `rad` suffix stands for *radians*.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '`rad`后缀代表*弧度*。'
- en: turn
  id: totrans-676
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: turn
- en: The `turn` suffix is not an abbreviation; it's the actual word *turn*. There
    is one turn in a full circle, so if we're going to make a horizontal rectangle
    rotate 90 degrees to make it vertical, we would define it as `.25turn`, because
    it's ¼th of the complete turn.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '`turn`后缀不是一个缩写；它是实际单词*转*。一个完整圆周有一个转，所以如果我们想要将一个水平矩形旋转90度使其垂直，我们将定义它为`.25turn`，因为它是一个完整转的四分之一。'
- en: '**CSS**:'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: 'All the following values represent units that resemble a 90-degree turn of
    an element but in different angle data types:'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 所有以下值代表类似于元素90度转动的单位，但使用不同的角度数据类型：
- en: '[PRE99]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Resolution units
  id: totrans-681
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分辨率单位
- en: These units represent the screen density of pixels on any given output or device.
    Unlike relative and absolute units, it's necessary to add the unit to the value
    `0` (zero).
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 这些单位代表任何给定输出或设备上像素的屏幕密度。与相对和绝对单位不同，必须在值`0`（零）后添加单位。
- en: Description
  id: totrans-683
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Whenever we need to consider density screens, resolution units will do the heavy
    lifting for us. They are used in media queries.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要考虑密度屏幕时，分辨率单位将为我们做大量工作。它们用于媒体查询。
- en: Let's see how they work.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它们是如何工作的。
- en: dpi
  id: totrans-686
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: dpi
- en: The `dpi` suffix stands for *dots per inch*. Screens contain 72 or 96 dpi, whereas
    a printed document has much larger dpi. 1 inch = 2.54 cm, so `1dpi`≈ `0.39dpcm`.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: '`dpi`后缀代表*每英寸点数*。屏幕通常包含72或96 dpi，而打印文档的dpi则大得多。1英寸=2.54厘米，因此`1dpi`≈ `0.39dpcm`。'
- en: dpcm
  id: totrans-688
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: dpcm
- en: The `dpcm` suffix stands for *dots per centimeter*. 1 inch = 2.54 cm, so `1dpcm`≈
    `2.54dpi`.
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: '`dpcm`后缀代表*每厘米点数*。1英寸=2.54厘米，因此`1dpcm`≈ `2.54dpi`。'
- en: dppx
  id: totrans-690
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: dppx
- en: The `dppx` suffix stands for *dots per pixel*. `1dppx` = `96dpi` due to the
    1:96 fixed ratio of CSS pixels.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '`dppx`后缀代表*每像素点数*。`1dppx` = `96dpi`，由于CSS像素的1:96固定比率。'
- en: '**CSS**:'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE100]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Duration units
  id: totrans-694
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续时间单位
- en: These units represent the duration of an animation in either seconds or milliseconds.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 这些单位代表动画的持续时间，无论是秒还是毫秒。
- en: Description
  id: totrans-696
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: These units are quite straightforward and are only used in CSS animations.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 这些单位相当直接，仅在CSS动画中使用。
- en: Tip
  id: totrans-698
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'You may think that because all other units use two, three, or four letters
    in their abbreviation (`px`, `dip`, `dpcm`, and so on). Always remember: when
    declaring the seconds unit only one `s` is used. Using `sec` or `secs` is incorrect.'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为，因为所有其他单位都使用两个、三个或四个字母的缩写（如`px`、`dip`、`dpcm`等）。始终记住：在声明秒单位时，只使用一个`s`。使用`sec`或`secs`是不正确的。
- en: ms
  id: totrans-700
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ms
- en: The `ms` suffix stands for *milliseconds*. `1000ms`= 1 second.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: '`ms`后缀代表*毫秒*。`1000ms` = 1秒。'
- en: s
  id: totrans-702
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: s
- en: The `s` suffix stands for *seconds*. `1s` = 1000 milliseconds.
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: '`s`后缀代表*秒*。`1s` = 1000毫秒。'
- en: '**CSS**:'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE101]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Column
  id: totrans-706
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列
- en: CSS columns is the most versatile way to fluidly distribute long strings of
    content while retaining scalability. If the content grows or is reduced, it would
    automatically reflow in the available space of the declared columns.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: CSS列是流畅地分配长字符串内容并保持可伸缩性的最灵活方式。如果内容增长或减少，它将自动在声明的列的可用空间中重新流动。
- en: Although not necessarily ideal, actual elements such as DIVs can also be distributed
    in columns with the CSS `columns` property.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不一定是最理想的选择，但实际元素，如DIV，也可以通过CSS的`columns`属性分布在列中。
- en: Let's dive in.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨。
- en: column-count
  id: totrans-710
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: column-count
- en: 'The `column-count` CSS property defines the number of columns of an element,
    and it looks like this:'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: '`column-count` CSS属性定义了元素列的数量，其外观如下：'
- en: '[PRE102]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Description
  id: totrans-713
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: We can use either a *number* value or the keyword `auto`.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一个*数字*值或关键字`auto`。
- en: When we use the `auto` keyword, we're letting the browser decide how many columns
    can fit within the available space. This is a very powerful and robust solution
    for responsive layouts. However, it is required that we declare `column-width`
    for this to work.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`auto`关键字时，我们让浏览器决定在可用空间内可以容纳多少列。这是一个非常强大且稳健的响应式布局解决方案。但是，为了使此功能正常工作，我们需要声明`column-width`。
- en: '**CSS**:'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE103]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: column-fill
  id: totrans-718
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: column-fill
- en: 'The `column-fill` CSS property controls how the content is assigned across
    columns, and it looks like this:'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '`column-fill` CSS属性控制内容如何在列之间分配，其外观如下：'
- en: '[PRE104]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Description
  id: totrans-721
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'There are two keywords: `auto` and `balance`.'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个关键字：`auto`和`balance`。
- en: '`auto`: This means that the content is filled sequentially. Basically, as space
    becomes available, the content will start filling it. This makes the parent container
    grow vertically by making the columns taller in order to fit the content.'
  id: totrans-723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto`：这意味着内容将按顺序填充。基本上，当空间变得可用时，内容将开始填充它。这使得父容器垂直增长，使列变高以适应内容。'
- en: '`balance`: This means that the content will be equally distributed in the available
    columns. For this to work, we need to declare a height on the parent container.
    This will make sure that the columns are of the specific height as well. The problem
    with this is that the content will just keep flowing outside the parent container
    if the parent container becomes too small.'
  id: totrans-724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`balance`：这意味着内容将在可用列中均匀分布。为了使此功能正常工作，我们需要在父容器上声明一个高度。这将确保列具有特定的高度。问题是，如果父容器变得太小，内容将不断流向父容器外部。'
- en: '**CSS**:'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE105]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: column-gap
  id: totrans-727
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: column-gap
- en: 'The `column-gap` CSS property defines the space between columns. In editorial
    terms, this space is the "gutter", and it looks like this:'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: '`column-gap` CSS属性定义了列之间的空间。在编辑术语中，这个空间是“边距”，其外观如下：'
- en: '[PRE106]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Description
  id: totrans-730
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'There are two values: the `auto` keyword and a *length* value.'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个值：`auto`关键字和一个*长度*值。
- en: '`auto`: This is the default value defined by the spec, which is `1em`.'
  id: totrans-732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto`：这是规范中定义的默认值，即`1em`。'
- en: '`Length value`: We define this using `px` or `em`.'
  id: totrans-733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`长度值`：我们使用`px`或`em`来定义这个值。'
- en: '**CSS**:'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE107]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: column-rule
  id: totrans-736
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: column-rule
- en: 'The `column-rule` CSS property creates or draws a vertical line that "separates"
    the columns, and it looks like this:'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: '`column-rule` CSS属性创建或绘制一条垂直线，这条线“分隔”了列，其外观如下：'
- en: '[PRE108]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Description
  id: totrans-739
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'We can define three aspects of the `column-rule` CSS property: the thickness
    or `width`; the `style`, which are the same styles of the `border-style` property;
    and `color`.'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义`column-rule` CSS属性的三个方面：厚度或`width`；`style`，这是与`border-style`属性相同的样式；和`color`。
- en: 'The `column-rule` CSS property is the shorthand of the following properties:'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: '`column-rule` CSS属性是以下属性的简写：'
- en: '`column-rule-width`: This can be just a length value (a number), or we can
    use any of these keywords: `thin`, `medium`, or `thick`.'
  id: totrans-742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column-rule-width`：这可以是一个长度值（一个数字），或者我们可以使用以下任何关键字：`thin`、`medium`或`thick`。'
- en: '`column-rule-style`: This can be any of the `border-style` values, such as
    `dotted`, `dashed`, `inset`, and so on.'
  id: totrans-743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column-rule-style`：这可以是任何`border-style`值，例如`dotted`、`dashed`、`inset`等。'
- en: '`column-rule-color`: This is a color defined in any format: `HEX`, `RGB`, or
    `HSL`. It also supports alpha channel, so `RGBa` and `HSLa` are allowed.'
  id: totrans-744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column-rule-color`：这是一个以任何格式定义的颜色：`HEX`、`RGB` 或 `HSL`。它还支持 alpha 通道，因此允许 `RGBa`
    和 `HSLa`。'
- en: '**CSS**:'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE109]'
  id: totrans-746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: column-rule-color
  id: totrans-747
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: column-rule-color
- en: The `column-rule-color` CSS property defines the color of the dividing line
    between columns.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: '`column-rule-color` CSS 属性定义了列之间的分隔线的颜色。'
- en: 'Colors can be defined in any format: `HEX`, `RGB`, or `HSL`. It also supports
    alpha channel, so `RGBa` and `HSLa` are allowed.'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色可以用任何格式定义：`HEX`、`RGB` 或 `HSL`。它还支持 alpha 通道，因此允许 `RGBa` 和 `HSLa`。
- en: '**CSS**:'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE110]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: column-rule-style
  id: totrans-752
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: column-rule-style
- en: The `column-rule-style` CSS property defines the style of the dividing line
    between columns.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: '`column-rule-style` CSS 属性定义了列之间的分隔线的样式。'
- en: It can be any of the `border-style` values, for example, `dotted`, `dashed`,
    `inset`, and so on.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以是任何 `border-style` 值，例如，`dotted`、`dashed`、`inset` 等。
- en: '**CSS**:'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE111]'
  id: totrans-756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: column-rule-width
  id: totrans-757
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: column-rule-width
- en: The `column-rule-width` CSS property defines the thickness (width) of the dividing
    line between columns.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: '`column-rule-width` CSS 属性定义了列之间分隔线的厚度（宽度）。'
- en: 'It can be just a length value (a number), or we can use any of these keywords:
    `thin`, `medium`, or `thick`.'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以是长度值（一个数字），或者我们可以使用以下任何关键字：`thin`、`medium` 或 `thick`。
- en: '**CSS**:'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE112]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: column-span
  id: totrans-762
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: column-span
- en: The `column-span` CSS property makes an element that's supposed to behave like
    a column into an element that spans across all columns. The element is still a
    "column", but it now expands the full width of the columns, like a block element.
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: '`column-span` CSS 属性将一个本应像列一样行为的元素变成一个跨越所有列的元素。该元素仍然是“列”，但现在它扩展了列的全宽，就像一个块元素。'
- en: There are two values, `none` and `all`, which are self-explanatory.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个值，`none` 和 `all`，它们是自我解释的。
- en: '**CSS**:'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE113]'
  id: totrans-766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/column-span](http://tiny.cc/column-span)'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个在 CodePen 上的演示：[http://tiny.cc/column-span](http://tiny.cc/column-span)
- en: column-width
  id: totrans-768
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: column-width
- en: The `column-width` CSS property defines the width of the columns.
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: '`column-width` CSS 属性定义了列的宽度。'
- en: When we define the width of the columns, the browser will automatically add
    or remove columns depending on the available space.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们定义列的宽度时，浏览器会根据可用空间自动添加或删除列。
- en: For example, if we say our columns are `200px` wide and the parent container
    is `800px`, then the browser will include three columns (taking into account the
    default `column-gap` of `1em`). However, if the container is at least `450px`
    wide, the browser will fit two columns.
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们说我们的列宽度是 `200px`，而父容器是 `800px`，那么浏览器将包括三列（考虑到默认的 `column-gap` 为 `1em`）。然而，如果容器至少
    `450px` 宽，浏览器将适应两列。
- en: '**CSS**:'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE114]'
  id: totrans-773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: columns
  id: totrans-774
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: columns
- en: The `columns` CSS property is the shorthand that we can use to set `column-width`
    and `column-count`.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '`columns` CSS 属性是我们可以用来自定义 `column-width` 和 `column-count` 的缩写。'
- en: It can accept either one or two values in the same declaration. The order of
    the values doesn't matter, but it's a good measure to declare `column-width` first
    and `column-count` second.
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以在同一个声明中接受一个或两个值。值的顺序无关紧要，但声明 `column-width` 首先然后 `column-count` 第二是个好习惯。
- en: '**CSS**:'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE115]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Flexible box (flexbox)
  id: totrans-779
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弹性框（flexbox）
- en: Flexbox is one of the most useful CSS modules when it comes to arranging elements
    in a container. Flexbox allows elements to grow or shrink, depending on the available
    space in order to maintain the integrity of layouts.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到在容器中排列元素时，Flexbox 是最有用的 CSS 模块之一。Flexbox 允许元素根据可用空间增长或缩小，以保持布局的完整性。
- en: Using Flexbox is the next step after using float-based layouts, not only because
    it can be easier to work with and wrap our heads around its concepts, but also
    because it may result in less markup and CSS.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Flexbox 是在基于浮动布局之后下一步，不仅因为它更容易操作，更容易理解其概念，而且还可能减少标记和 CSS。
- en: Tip
  id: totrans-782
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: A powerful partner to Flexbox is the Grid Layout, which is still in its early
    stages of development, and browser support is scarce. Since Grid Layout is out
    of the scope of this section, you can read more on Rachel Andrew's project site,
    Grid By Example, at [http://gridbyexample.com/](http://gridbyexample.com/)
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: Flexbox 的一个强大伙伴是网格布局（Grid Layout），它仍处于早期开发阶段，浏览器支持有限。由于网格布局超出了本节范围，你可以在 Rachel
    Andrew 的项目网站 Grid By Example 上了解更多信息，网址为 [http://gridbyexample.com/](http://gridbyexample.com/)
- en: 'Before we dive into the Flexbox properties, the following diagram will help
    us understand the terminology and orientations:'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究 Flexbox 属性之前，以下图表将帮助我们理解术语和方向：
- en: '![Flexible box (flexbox)](img/B03289_04_04.jpg)'
  id: totrans-785
  prefs: []
  type: TYPE_IMG
  zh: '![灵活框（flexbox）](img/B03289_04_04.jpg)'
- en: Let's dive into Flexbox properties.
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解Flexbox属性。
- en: flex-grow
  id: totrans-787
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: flex-grow
- en: 'This property defines how much a flex item should grow relative to other flex
    items via a flex grow factor, and it looks like this:'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性定义了flex项目相对于其他flex项目通过flex增长因子应该增长多少，其表现形式如下：
- en: '[PRE116]'
  id: totrans-789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Description
  id: totrans-790
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The flex grow factor is a *number* without a unit. Negative values are invalid.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: flex增长因子是一个没有单位的数字。负值无效。
- en: The flex item will grow by the defined grow factor as long as there is space
    to do so. It can grow on both the main or cross axes, depending on the direction
    defined by the `flex-direction` property, which we'll talk about in a minute.
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 只要还有空间，flex项目就会根据定义的增长因子增长。它可以在主轴或交叉轴上增长，具体取决于由`flex-direction`属性定义的方向，我们稍后会讨论这个属性。
- en: '**CSS**:'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE117]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: flex-shrink
  id: totrans-795
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: flex-shrink
- en: 'This property defines how much a flex item should shrink relative to other
    flex items via a flex shrink factor, and it looks like this:'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性定义了flex项目相对于其他flex项目通过flex收缩因子应该收缩多少，其表现形式如下：
- en: '[PRE118]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Description
  id: totrans-798
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The flex shrink factor is a *number* without a unit. Negative values are invalid.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: flex收缩因子是一个没有单位的数字。负值无效。
- en: This is used when the sum of all flex items exceeds the size of the flex container.
    This could be horizontally or vertically (main axis or cross axis). By assigning
    flex shrink factors to one or multiple flex items, we can make them fit the size
    of the flex container.
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 这在所有flex项目的总和超过flex容器大小时使用。这可以是水平方向或垂直方向（主轴或交叉轴）。通过将flex收缩因子分配给一个或多个flex项目，我们可以使它们适应flex容器的大小。
- en: '**CSS**:'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE119]'
  id: totrans-802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: flex-basis
  id: totrans-803
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: flex-basis
- en: 'This property defines the initial width of a flex item, and it looks like this:'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性定义了flex项目的初始宽度，其表现形式如下：
- en: '[PRE120]'
  id: totrans-805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Description
  id: totrans-806
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: flex-basis accepts a *length* value with either an absolute or a relative length
    unit (`px`, `em`, `%`, and so on) or the `content` keyword.
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: flex-basis接受一个带有绝对或相对长度单位（`px`、`em`、`%`等）或`content`关键字的长度值。
- en: When using `content`, the container will adapt to the content inside of it.
    Negative values are invalid.
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`content`时，容器将适应其内部的内容。负值无效。
- en: '**CSS**:'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE121]'
  id: totrans-810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: flex-direction
  id: totrans-812
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: flex-direction
- en: 'The `flex-direction` CSS property defines the direction of the flex items inside
    a flex container, and it looks like this:'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: '`flex-direction` CSS属性定义了flex容器内flex项目的方向，其表现形式如下：'
- en: '[PRE123]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Description
  id: totrans-815
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This property sets the direction in which flex items can be laid out, either
    horizontal with `row` or vertical with `column`.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性设置flex项目可以布局的方向，要么是水平方向的`row`，要么是垂直方向的`column`。
- en: 'There are four values: two for horizontal and two for vertical:'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个值：两个用于水平，两个用于垂直：
- en: row
  id: totrans-818
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: row
- en: This lays out the flex items on a horizontal axis. This is the default value.
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 这在水平轴上布局flex项目。这是默认值。
- en: When flex items are laid out with `row`, they stack side by side from left to
    right.
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 当flex项目使用`row`进行布局时，它们从左到右堆叠在一起。
- en: row-reverse
  id: totrans-821
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: row-reverse
- en: This is the same as `row` but in reverse. When flex items are laid out with
    `row-reverse`, they stack side by side from right to left.
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 这与`row`相同，但方向相反。当flex项目使用`row-reverse`进行布局时，它们从右到左堆叠在一起。
- en: column
  id: totrans-823
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: column
- en: This lays out the flex items on a vertical axis.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 这在垂直轴上布局flex项目。
- en: When flex items are laid out with `column`, they stack one on top of the other,
    starting from top to bottom.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 当flex项目使用`column`进行布局时，它们从上到下堆叠在一起。
- en: column-reverse
  id: totrans-826
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: column-reverse
- en: This is the same as `column` but in reverse.
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 这与`column`相同，但方向相反。
- en: When flex items are laid out with `column-reverse`, they stack one on top of
    the other, starting from bottom to top.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 当flex项目使用`column-reverse`进行布局时，它们从下到上堆叠在一起。
- en: Tip
  id: totrans-829
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `flex-direction` property is applied to the flex container, not the flex
    items.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: '`flex-direction`属性应用于flex容器，而不是flex项目。'
- en: '**CSS**:'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE124]'
  id: totrans-832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: flex-wrap
  id: totrans-833
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: flex-wrap
- en: 'The `flex-wrap` CSS property defines whether a flex item should wrap or not
    when the container becomes too small, and it looks like this:'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: '`flex-wrap` CSS属性定义了当容器变得太小时，flex项目是否应该换行，其表现形式如下：'
- en: '[PRE125]'
  id: totrans-835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Description
  id: totrans-836
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'This property accepts one of three keyword values: `nowrap`, `wrap` and `wrap-reverse`.'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性接受三个关键字值之一：`nowrap`、`wrap`和`wrap-reverse`。
- en: nowrap
  id: totrans-838
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: nowrap
- en: This is the default value. It tells the flex item to not wrap.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认值。它告诉flex项目不要换行。
- en: wrap
  id: totrans-840
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: wrap
- en: This tells the flex element to wrap.
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉flex元素进行换行。
- en: wrap-reverse
  id: totrans-842
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: wrap-reverse
- en: This tells the flex element to wrap but in reverse.
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉flex元素进行换行，但方向相反。
- en: Tip
  id: totrans-844
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `flex-wrap` property is applied to the flex container, not the flex items.
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: '`flex-wrap` 属性应用于弹性容器，而不是弹性项。'
- en: '**CSS**:'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE126]'
  id: totrans-847
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: flex-flow
  id: totrans-848
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: flex-flow
- en: 'The `flex-flow` CSS property is the shorthand for the `flex-direction` and
    `flex-wrap` properties, and it looks like this:'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: '`flex-flow` CSS 属性是 `flex-direction` 和 `flex-wrap` 属性的简写，其形式如下：'
- en: '[PRE127]'
  id: totrans-850
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Description
  id: totrans-851
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: We now know that the `flex-direction` property defines the direction of the
    flex items in either columns or rows.
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道 `flex-direction` 属性定义了弹性项的方向，是列还是行。
- en: The `flex-wrap` attribute, on the other hand, defines whether the flex items
    should wrap or not when the container becomes too small.
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，`flex-wrap` 属性定义了当容器变得太小时，弹性项是否应该换行。
- en: We can specify either one or two values. The order doesn't affect the result.
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以指定一个或两个值。顺序不会影响结果。
- en: 'The `flex-direction` attribute can take any of its available values: `row :
    (default value)`, `row-reverse`, `column`, or `column-reverse`.'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: '`flex-direction` 属性可以取其任何可用值：`row`（默认值）、`row-reverse`、`column` 或 `column-reverse`。'
- en: 'The `flex-wrap` attribute can take any of its available values as well: `nowrap`
    (default value),`wrap`, or `wrap-reverse`.'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: '`flex-wrap` 属性可以取其任何可用值：`nowrap`（默认值）、`wrap` 或 `wrap-reverse`。'
- en: Tip
  id: totrans-857
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `flex-flow` property is applied to the flex container, not the flex items.
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: '`flex-flow` 属性应用于弹性容器，而不是弹性项。'
- en: '**CSS**:'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE128]'
  id: totrans-860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: align-content
  id: totrans-861
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: align-content
- en: 'The `align-content` CSS property aligns lines inside a flex container as long
    as there is extra space on the cross axis, and it looks like this:'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: '`align-content` CSS 属性在交叉轴上有额外空间时，将弹性容器内的行对齐，其形式如下：'
- en: '[PRE129]'
  id: totrans-863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Description
  id: totrans-864
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'There are six values: `flex-start`, `flex-end`, `center`, `space-around`, `space-between`,
    and `stretch`.'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 有六个值：`flex-start`、`flex-end`、`center`、`space-around`、`space-between` 和 `stretch`。
- en: flex-start
  id: totrans-866
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: flex-start
- en: This groups the lines to the start of the container.
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: 这将行组合到容器的开始位置。
- en: flex-end
  id: totrans-868
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: flex-end
- en: This groups the lines to the end of the container.
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 这将行组合到容器的末尾位置。
- en: center
  id: totrans-870
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: center
- en: This groups the lines to the center of the container.
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 这将行组合到容器的中心。
- en: space-around
  id: totrans-872
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: space-around
- en: This distributes the lines evenly in the container, but the first line is placed
    at the start of the container and the last line at the end.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在容器中均匀分布行，但第一行放置在容器的开始处，最后一行放置在容器的末尾。
- en: space-between
  id: totrans-874
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: space-between
- en: This distributes the lines evenly in the container with an even amount of space
    between each line.
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在容器中均匀分布行，并且每行之间有相等的空间。
- en: stretch
  id: totrans-876
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: stretch
- en: This is the default value. The lines will evenly stretch to fill the whole container.
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认值。行将均匀拉伸以填充整个容器。
- en: Tip
  id: totrans-878
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `align-content` property is applied to the flex container, not the flex
    items.
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: '`align-content` 属性应用于弹性容器，而不是弹性项。'
- en: '**CSS**:'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE130]'
  id: totrans-881
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: align-items
  id: totrans-882
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: align-items
- en: 'The `align-items` CSS property sets the default alignment of the flex elements
    inside the flex container, and it looks like this:'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: '`align-items` CSS 属性设置弹性容器内弹性元素的默认对齐方式，其形式如下：'
- en: '[PRE131]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Description
  id: totrans-885
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'This property accepts five values: `flex-start`, `flex-end`, `center`, `baseline`,
    and `stretch`.'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性接受五个值：`flex-start`、`flex-end`、`center`、`baseline` 和 `stretch`。
- en: flex-start
  id: totrans-887
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: flex-start
- en: This aligns the flex elements to the beginning of the container.
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹性元素对齐到容器的开始位置。
- en: flex-end
  id: totrans-889
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: flex-end
- en: This aligns the flex elements to the end of the container.
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹性元素对齐到容器的末尾。
- en: center
  id: totrans-891
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: center
- en: This aligns the flex elements to the center of the container and and at the
    same time, it aligns them to their center.
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹性元素对齐到容器的中心，并且同时将它们对齐到它们的中心。
- en: baseline
  id: totrans-893
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: baseline
- en: This aligns the flex elements to the text baseline inside each flex element.
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹性元素对齐到每个弹性元素内的文本基线。
- en: stretch
  id: totrans-895
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: stretch
- en: This stretches the flex elements to fill the entire parent container.
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹性元素拉伸以填充整个父容器。
- en: Tip
  id: totrans-897
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `align-items` property is applied to the flex container, not the flex items.
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: '`align-items` 属性应用于弹性容器，而不是弹性项。'
- en: '**CSS**:'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE132]'
  id: totrans-900
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: align-self
  id: totrans-901
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: align-self
- en: 'The `align-self` CSS property aligns a specific flex item within its parent
    container, and it looks like this:'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: '`align-self` CSS 属性将特定弹性项在其父容器内对齐，其形式如下：'
- en: '[PRE133]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Description
  id: totrans-904
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'This property accepts the exact values as `align-items`, and the results are
    the same as well: `flex-start`, `flex-end`, `center`, `baseline`, and `stretch`.'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性接受与 `align-items` 相同的精确值，结果也相同：`flex-start`、`flex-end`、`center`、`baseline`
    和 `stretch`。
- en: flex-start
  id: totrans-906
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: flex-start
- en: This aligns the flex element to the beginning of the container.
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹性元素对齐到容器的开始位置。
- en: flex-end
  id: totrans-908
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: flex-end
- en: This aligns the flex element to the end of the container.
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 这将 flex 元素对齐到容器的末尾。
- en: center
  id: totrans-910
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: center
- en: This aligns the flex element to the center of the container.
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 这将 flex 元素对齐到容器的中心。
- en: baseline
  id: totrans-912
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: baseline
- en: This aligns the flex element to the text baseline inside each flex element.
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 这将 flex 元素对齐到每个 flex 元素内的文本基线。
- en: stretch
  id: totrans-914
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: stretch
- en: This stretches the flex elements to fill the entire parent container.
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 这将 flex 元素拉伸以填充整个父容器。
- en: '**CSS**:'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE134]'
  id: totrans-917
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: order
  id: totrans-918
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: order
- en: 'The `order` CSS property is used to alter the default order of flex items within
    the same parent container, and it looks like this:'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: '`order` CSS 属性用于改变同一父容器内 flex 元素的默认顺序，其表现形式如下：'
- en: '[PRE135]'
  id: totrans-920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Description
  id: totrans-921
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Description
- en: By default, flex items appear in the same order they appear in the source (HTML).
    The `order` property allows us to alter the display order while maintaining their
    source order. This property accepts a *number* value without a unit.
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，flex 元素按照它们在源（HTML）中出现的顺序显示。`order` 属性允许我们改变显示顺序，同时保持它们的源顺序。该属性接受一个不带单位的
    *数字* 值。
- en: 'The order is defined in a logical way: The lower the number, the more ahead
    it is in the order. Items that have the same number are laid out according to
    the source document.'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: 顺序以逻辑方式定义：数字越低，顺序越靠前。具有相同数字的项目将根据源文档进行布局。
- en: The starting number is `0` (zero), not 1\. Negative values are allowed.
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 起始数字是 `0`（零），不是 1。允许负值。
- en: '**CSS**:'
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE136]'
  id: totrans-926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: justify-content
  id: totrans-927
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: justify-content
- en: The `justify-content` CSS property works only on flex items. It allows the browser
    to distribute the space in between and around the flex items based on their main
    axes.
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: '`justify-content` CSS 属性仅在 flex 元素上起作用。它允许浏览器根据它们的主轴在 flex 元素之间和周围分配空间。'
- en: Description
  id: totrans-929
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Description
- en: 'This property supports five keyword values: `flex-start`, `flex-end`, `center`,
    `space-between`, and `space-around`.'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性支持五个关键字值：`flex-start`、`flex-end`、`center`、`space-between` 和 `space-around`。
- en: flex-start
  id: totrans-931
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: flex-start
- en: This is the default value. It groups and positions the elements to the beginning
    of the container.
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认值。它将元素分组并定位到容器的开头。
- en: flex-end
  id: totrans-933
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: flex-end
- en: This groups and positions the elements to the end of the container.
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 这将元素分组并定位到容器的末尾。
- en: center
  id: totrans-935
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: center
- en: This groups and positions the elements to the center of the container.
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将元素分组并定位到容器的中心。
- en: space-between
  id: totrans-937
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: space-between
- en: This spreads and positions the elements along the container and spaces them
    evenly.
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 这沿着容器分布和定位元素，并均匀地分配空间。
- en: The first and last flex items are flushed against the left-hand and right-hand
    sides respectively. In other words, the first and last flex items touch the left
    and right edges.
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个和最后一个 flex 元素分别紧贴容器的左侧和右侧。换句话说，第一个和最后一个 flex 元素接触容器的左右边缘。
- en: space-around
  id: totrans-940
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: space-around
- en: Similar to the `space-between` property, this spreads and positions the elements
    along the container and spaces them evenly.
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `space-between` 属性类似，这沿着容器分布和定位元素，并均匀地分配空间。
- en: However, the first and last flex items do not touch the left and right edges.
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，第一个和最后一个 flex 元素不接触左右边缘。
- en: '**CSS**:'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE137]'
  id: totrans-944
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: flex
  id: totrans-945
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: flex
- en: The `flex` CSS property is the shorthand in which we can declare the values
    for `flex-grow`, `flex-shrink`, and `flex-basis`. It's recommended that you follow
    this order when declaring the values.
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: '`flex` CSS 属性是声明 `flex-grow`、`flex-shrink` 和 `flex-basis` 值的简写。建议您按照以下顺序声明值。'
- en: '**CSS**:'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE138]'
  id: totrans-948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: Summary
  id: totrans-949
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Summary
- en: And this is how you start the first chapter about CSS Properties! We learned
    what CSS properties and vendor prefixes are.
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您开始关于 CSS 属性的第一章的方式！我们学习了 CSS 属性和供应商前缀是什么。
- en: Now, with the animation properties clear we can start working on great interactions
    for our sites and applications. We can also handle all background features, be
    positioning or even blend modes to create nice visual effects without having to
    depend on image editors of any kind.
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，随着动画属性变得清晰，我们可以开始为我们的网站和应用制作出色的交互。我们还可以处理所有背景功能，无论是定位还是混合模式，以创建无需依赖任何图像编辑器的精美视觉效果。
- en: The Box Model concept is something we can tackle easier especially knowing that
    legacy IE's have less and less impact than before. This is greatly impacted by
    how we work with CSS units since we need to understand which units work best with
    different use cases and requirements.
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: Box Model 概念是我们更容易解决的问题，特别是知道传统 IE 浏览器的影响越来越小。这很大程度上取决于我们如何处理 CSS 单位，因为我们需要了解哪些单位在不同用例和需求中工作得最好。
- en: We learned that CSS columns are a great tool to distribute long strings of text.
    And that the mighty Flexbox is the go-to feature to arrange elements in containers.
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到 CSS 列是一个很好的工具，可以分配长字符串文本。而且强大的 Flexbox 是在容器中排列元素的必备特性。
- en: Improving our typography and transformations are part of the next chapter, amongst
    other interesting properties.
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 改善我们的排版和转换是下一章节中众多有趣特性的一部分。
- en: Buckle up!
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好！
