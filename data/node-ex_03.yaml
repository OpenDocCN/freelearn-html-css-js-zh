- en: Chapter 3. Managing Assets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章。管理资产
- en: 'The first two chapters were a good introduction to the building blocks and
    structures of Node.js application development. We learned about the fundamentals
    of the technology and revealed important patterns such as Model-View-Controller.
    We talked about test-driven development and REST APIs. In this chapter, we will
    create the base of our social network. The proper delivery and management of an
    application''s assets is an essential part of the system. In most of the cases,
    it determines our workflow. We will go through the following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 第一章和第二章是Node.js应用程序开发的基本构建块和结构的良好介绍。我们了解了技术的基本知识，并揭示了重要的模式，如模型-视图-控制器。我们谈论了测试驱动开发和REST
    API。在本章中，我们将创建我们社交网络的基础。应用程序资产的适当交付和管理是系统的重要组成部分。在大多数情况下，它决定了我们的工作流程。在本章中，我们将讨论以下主题：
- en: Serving files with Node.js
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js提供文件
- en: CSS preprocessing
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS预处理
- en: Packing client-side JavaScript
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包客户端JavaScript
- en: Delivering HTML templates
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交付HTML模板
- en: Serving files with Node.js
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js提供文件
- en: 'Node.js differs from the usual Linux-Apache-MySQL-PHP setup. We have to write
    the server that handles the incoming request. When the user requires an image
    from our backend, Node.js doesn''t serve it automatically. The very first file
    of our social network will be `server.js` with the following content:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js与通常的Linux-Apache-MySQL-PHP设置不同。我们必须编写处理传入请求的服务器。当用户需要从我们的后端获取图像时，Node.js不会自动提供。我们社交网络的第一个文件将是`server.js`，内容如下：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We require three native modules that we will use to drive the server and deliver
    assets. The last two lines of the preceding code run the server and print a message
    to the console.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要三个本地模块，用于驱动服务器和交付资产。前面代码的最后两行运行服务器并在控制台打印消息。
- en: 'For now, the entry point of our application is the `assets` function. The main
    purpose of this method is to read files from the hard disk and serve it to the
    users. We will use `req.url` to fetch the current request path. When a web browser
    accesses our server and requests `http://localhost:9000/static/css/styles.css`
    in the browser, `req.url` will be equal to `/static/css/styles.css`. From this
    point onwards, we have a few tasks to handle:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们应用程序的入口点是“assets”函数。此方法的主要目的是从硬盘读取文件并提供给用户。我们将使用“req.url”来获取当前请求路径。当Web浏览器访问我们的服务器并在浏览器中请求“http://localhost:9000/static/css/styles.css”时，“req.url”将等于“/static/css/styles.css”。从这一点开始，我们有一些任务要处理：
- en: Checking whether the file exists and if not, sending a proper message (HTTP
    error code) to the user
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查文件是否存在，如果不存在，则向用户发送适当的消息（HTTP错误代码）
- en: Reading the file and finding out its extension
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取文件并找出其扩展名
- en: Sending the file's content to the browser with the correct content type
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以正确的内容类型将文件内容发送到浏览器
- en: The last point is an important one. Serving files with a wrong or missing content
    type may cause problems. The browser may not be able to recognize and process
    the resource properly.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点很重要。以错误或缺少的内容类型提供文件可能会导致问题。浏览器可能无法正确识别和处理资源。
- en: 'To make the process smooth, we will create a separate function for each of
    the tasks mentioned. The shortest one is the one that sends an error message to
    the user:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使流程顺利，我们将为提到的每个任务创建一个单独的函数。最短的函数是向用户发送错误消息的函数：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By default, the value of the `code` variable is `404`, which means **Not Found**.
    However, there are different types of errors, such as client errors (4XX) and
    server errors (5XX). It is good to leave an option to change the error's code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，“code”变量的值为“404”，表示“未找到”。然而，有不同类型的错误，如客户端错误（4XX）和服务器错误（5XX）。最好留下更改错误代码的选项。
- en: 'Let''s say that we have the content of the file and its extension. We need
    a function that recognizes the correct content type and delivers the resource
    to the client. For the sake of simplicity, we will perform a simple string-to-string
    check of the file''s extension. The following code does exactly that:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有文件的内容和扩展名。我们需要一个函数来识别正确的内容类型并将资源提供给客户端。为了简单起见，我们将执行文件扩展名的简单字符串检查。以下代码正是如此：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `serve` method accepts a `file` object with two properties—`ext` and `content`.
    In the next few chapters, we will probably add more file types to the list. However,
    for now, serving JavaScript, CSS, HTML, JPG, and PNG images is enough.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “serve”方法接受一个带有两个属性的“file”对象——“ext”和“content”。在接下来的几章中，我们可能会向列表中添加更多文件类型。但是，目前，提供JavaScript、CSS、HTML、JPG和PNG图像就足够了。
- en: 'The last task that we have to cover is the actual reading of the file. Node.js
    has a built-in module to read files called `fs`. We will use the asynchronous
    versions of its methods. With synchronous functions, the JavaScript engine may
    be blocked till the particular operation is fully executed. In this case, that
    is a reading of a file. In asynchronous programming, we allow our program to execute
    the rest of the code. In this scenario, we normally pass a callback—a function
    that will be executed when the operation ends:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须覆盖的最后一个任务是实际读取文件。Node.js有一个内置模块来读取文件，称为“fs”。我们将使用其异步方法。使用同步函数，JavaScript引擎可能会被阻塞，直到特定操作完全执行。在这种情况下，即读取文件。在异步编程中，我们允许程序执行其余的代码。在这种情况下，我们通常传递一个回调函数——当操作结束时将执行的函数：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The function accepts the path and opens the file. If the file is missing or
    there is a problem reading it, it sends an error to the user. In the beginning,
    we defined a `files` variable, which is an empty object. Every time we read a
    file, we are storing its content there so that the next time we read it, we don't
    have to access the disk again. Every I/O operation, such as reading a file, takes
    time. By using this simple caching logic, we improve the performance of our application.
    If everything is okay, we call the `serve` method.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受路径并打开文件。如果文件丢失或读取时出现问题，它会向用户发送错误。一开始，我们定义了一个`files`变量，它是一个空对象。每次我们读取一个文件，我们都将其内容存储在那里，这样下次读取时，我们就不必再次访问磁盘。每个I/O操作，比如读取文件，都需要时间。通过使用这种简单的缓存逻辑，我们提高了应用程序的性能。如果一切正常，我们调用`serve`方法。
- en: 'Here is how you combine all the preceding snippets:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何组合所有前面的片段：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Every HTTP request sent to our server is processed by the `assets` handler.
    We compose the file's path, starting from the current directory. The `path.normalize`
    parameter guarantees that our string looks alright on different operating systems.
    For example, it does not contain multiple slashes.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 发送到服务器的每个HTTP请求都由`assets`处理程序处理。我们从当前目录开始组成文件的路径。`path.normalize`参数确保我们的字符串在不同的操作系统上看起来都很好。例如，它不包含多个斜杠。
- en: CSS preprocessing
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS预处理
- en: CSS preprocessors are tools that accept source and produce CSS. Very often,
    the input is similar to the CSS language with regard to the syntax. However, the
    main idea of preprocessing is to add features that are missing and, at the same
    time, wanted by the community. Over the past few years, CSS preprocessing has
    become a hot topic. It comes with lots of benefits and the concept has been warmly
    accepted by the community. There are two main CSS preprocesors—**Less** ([http://lesscss.org/](http://lesscss.org/))
    and **Sass** ([http://sass-lang.com/](http://sass-lang.com/)). Sass is based on
    the Ruby language and it requires more effort to run it in a Node.js project.
    So in this book, we are going to use Less.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: CSS预处理器是接受源代码并生成CSS的工具。很多时候，输入与CSS语言的语法类似。然而，预处理的主要思想是添加社区所需但缺失的功能。在过去几年里，CSS预处理已成为热门话题。它带来了许多好处，并且这个概念已经被社区热烈接受。有两种主要的CSS预处理器——**Less**
    ([http://lesscss.org/](http://lesscss.org/)) 和 **Sass** ([http://sass-lang.com/](http://sass-lang.com/))。Sass基于Ruby语言，需要更多的工作才能在Node.js项目中运行。因此，在本书中，我们将使用Less。
- en: 'In the previous chapter, we talked about building systems and task runners.
    CSS preprocessing and a few other tasks that we will talk about in a bit should
    happen automatically. Gulp seems like a good option. Let''s move forward and add
    a `package.json` file where we will describe all the Gulp-related modules that
    we need:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们谈到了构建系统和任务运行器。CSS预处理和我们稍后将讨论的其他一些任务应该自动发生。Gulp似乎是一个不错的选择。让我们继续添加一个`package.json`文件，我们将在其中描述所有我们需要的与Gulp相关的模块：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The setting of `"start": "node server.js"` will allow us to type `npm start`
    and run our server. The dependencies that we will start with are as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '设置`"start": "node server.js"`将允许我们输入`npm start`并运行我们的服务器。我们将开始的依赖关系如下：'
- en: Gulp itself
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gulp本身
- en: '`gulp-less`: This is a plugin that wraps the Less preprocessor'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gulp-less`：这是一个包装了Less预处理器的插件'
- en: '`gulp-rename`: This changes the name of the produced file'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gulp-rename`：这会更改生成文件的名称'
- en: '`gulp-minify-css`: This compresses our CSS'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gulp-minify-css`：这会压缩我们的CSS'
- en: 'So, along with `server.js`, we now have `package.json`. We run `npm install`
    and the package manager adds a `node_modules` directory containing the modules.
    Let''s define our Gulp tasks in another file named `gulpfile.js`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，除了`server.js`，我们现在还有`package.json`。我们运行`npm install`，包管理器会添加一个包含模块的`node_modules`目录。让我们在另一个名为`gulpfile.js`的文件中定义我们的Gulp任务：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We start with two tasks—`css` and `watchers`. The first one expects us to have
    a `less` directory and a `styles.less` file inside. This will be our entry point
    to all the CSS styles. As seen from the Gulp task, we pipe the content of the
    file to the preprocessor and export the result to the `static/css` directory.
    Since everything with Gulp is a stream, we can continue and minify the CSS, rename
    the file to `styles.min.css`, and export it to the same folder.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从两个任务开始——`css`和`watchers`。第一个任务期望我们有一个`less`目录和一个`styles.less`文件。这将是我们所有CSS样式的入口点。从Gulp任务中可以看到，我们将文件的内容传输到预处理器，并将结果导出到`static/css`目录。由于Gulp中的一切都是流，我们可以继续压缩CSS，将文件重命名为`styles.min.css`，并将其导出到相同的文件夹。
- en: We do not want to run the building processes by ourselves every time we make
    changes to a file. So, we register `watchers` for the files in the `less` folder.
    A watcher is a process that monitors specific files and notifies the rest of the
    system once these files are changed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望每次更改文件时都要自己运行构建过程。因此，我们为`less`文件夹中的文件注册`watchers`。`watcher`是一个监视特定文件的过程，一旦这些文件被更改，就会通知系统的其余部分。
- en: 'At the end of this step, our project looks like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步结束时，我们的项目看起来是这样的：
- en: '![CSS preprocessing](img/image00175.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![CSS预处理](img/image00175.jpeg)'
- en: Packing client-side JavaScript
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包客户端JavaScript
- en: As with CSS, our goal should be to serve only one JavaScript file to the client's
    browser. We do not want to force the user to make more than one request, because
    this is less efficient and it means that the web browser takes longer to process
    and display the content of the page. Nowadays, the client-side part of applications
    is fairly complex. As with complex systems, we split our logic into different
    modules. Often, different modules mean different files. Thankfully, Node.js is
    full of tools that can be used to pack JavaScript. Let's see two of the most popular
    tools.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与CSS一样，我们的目标应该是只向客户端浏览器提供一个JavaScript文件。我们不希望强迫用户发出多个请求，因为这样效率较低，意味着网页浏览器需要更长的时间来处理和显示页面的内容。如今，应用程序的客户端部分相当复杂。与复杂系统一样，我们将逻辑分成不同的模块。通常，不同的模块意味着不同的文件。幸运的是，Node.js充满了可以用来打包JavaScript的工具。让我们看看两种最流行的工具。
- en: Concatenating with Gulp
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Gulp进行合并
- en: 'Gulp, as a build system, has several modules to concatenate files. The one
    that we are interested in is called `gulp-concat`. Let''s add it to the `package.json`
    file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 作为构建系统，Gulp有几个模块来连接文件。我们感兴趣的是一个叫做`gulp-concat`的模块。让我们把它添加到`package.json`文件中：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The next step is to write a task that uses it. Again, we will use the `src`
    and `dest` Gulp methods, and in between is the concatenation:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是编写一个使用它的任务。同样，我们将使用`src`和`dest` Gulp方法，在它们之间是连接：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It's important to mention that the files will be added to the final file in
    alphabetical order. So, we should be careful whenever there are some code dependencies.
    If this is the case, we should name the files in such a way that their names start
    with a unique number—01, 02, 03, and so on.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 需要提到的是，文件将按字母顺序添加到最终文件中。因此，每当有一些代码依赖时，我们都应该小心。如果是这种情况，我们应该以这样的方式命名文件，使它们的名称以唯一数字开头——01、02、03等等。
- en: 'The next logical task that we will do is to minify our JavaScript. Like the
    Less compilation, we want to serve a file that is as small as possible. The module
    that will help us achieve this is `gulp-uglify`. Again, we should add it to the
    `package.json` file (`"gulp-uglify": "1.0.1"`). After this, a little tweak to
    our newly created task will minify the JavaScript:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '我们接下来要做的逻辑任务是压缩我们的JavaScript。和Less编译一样，我们希望提供尽可能小的文件。帮助我们实现这一目标的模块是`gulp-uglify`。同样，我们应该把它添加到`package.json`文件中（`"gulp-uglify":
    "1.0.1"`）。之后，对我们新创建的任务进行一点调整就可以压缩JavaScript了：'
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that we used the `gulp-rename` plugin again. This is necessary because
    we want to produce a different file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们再次使用了`gulp-rename`插件。这是必要的，因为我们想生成一个不同的文件。
- en: Modularity in the browser with RequireJS
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用RequireJS在浏览器中进行模块化
- en: While building software, one of the most important concepts to think about is
    the splitting of our system into modules. Node.js has a nice built-in system to
    write modules. We mentioned this in [Chapter 1](part0014.xhtml#aid-DB7S1 "Chapter 1. Node.js
    Fundamentals"), *Node.js Fundamentals*. We encapsulate our code in a single file
    and use `module.exports` or `exports` to create the public API. Later, via the
    `require` function, we access the created functionalities.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建软件时，思考的最重要的概念之一是将我们的系统分割成模块。Node.js有一个很好的内置系统来编写模块。我们在[第1章](part0014.xhtml#aid-DB7S1
    "第1章. Node.js基础")中提到过，*Node.js基础*。我们将我们的代码封装在一个单独的文件中，并使用`module.exports`或`exports`来创建公共API。稍后，通过`require`函数，我们访问创建的功能。
- en: 'However, for the client-side JavaScript, we do not have such a built-in system.
    We need to use an additional library that allows us to define modules. There are
    several possible solutions. The first one that we will take a look at is RequireJS
    ([http://requirejs.org/](http://requirejs.org/)). We will download the library
    (version 2.1.16) from the official site and include it in our page like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于客户端JavaScript，我们没有这样的内置系统。我们需要使用一个额外的库来允许我们定义模块。有几种可能的解决方案。我们将首先看一下的是RequireJS（[http://requirejs.org/](http://requirejs.org/)）。我们将从官方网站下载这个库（版本2.1.16），并像这样包含在我们的页面中：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The key attribute here is `data-main`. It tells RequireJS about our application''s
    entry point. In fact, we should have the `scripts/main.js` file in our project''s
    folder to get the preceding line working. In `main.js`, we can use the `require`
    global function:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键属性是`data-main`。它告诉RequireJS我们应用的入口点。事实上，我们应该在项目文件夹中有`scripts/main.js`文件才能让前面的行起作用。在`main.js`中，我们可以使用`require`全局函数：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Let's say that our code in `main.js` depends on two other modules—the Ajax wrapper
    and router. We describe these dependencies in an array and provide a callback,
    which is later executed with two parameters. These parameters are actually references
    to the necessary modules.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的`main.js`代码依赖于另外两个模块——Ajax包装器和路由器。我们在一个数组中描述这些依赖关系，并提供一个回调，稍后用两个参数执行。这些参数实际上是对必要模块的引用。
- en: 'The defining of modules is possible with the help of another global function—`define`.
    Here is how the Ajax wrapper looks:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用另一个全局函数`define`可以定义模块。这是Ajax包装器的样子：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'By default, behind the scenes, RequireJS resolves the dependencies asynchronously.
    In other words, it performs an HTTP request for every required module. In some
    cases, this may lead to performance issues because every request takes time. Thankfully,
    RequireJS has a tool (optimizer) that solves the problem. It can bundle all the
    modules into a single file. The tool is available for Node.js too and it is distributed
    with the `requirejs` package:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，RequireJS在后台异步解析依赖项。换句话说，它为每个所需模块执行HTTP请求。在某些情况下，这可能会导致性能问题，因为每个请求都需要时间。幸运的是，RequireJS有一个解决这个问题的工具（优化器）。它可以将所有模块捆绑成一个单独的文件。这个工具也适用于Node.js，并且随`requirejs`包一起分发：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After a successful installation, we will have the `r.js` command in our terminal.
    The basic call looks like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功后，我们将在终端中有`r.js`命令。基本调用如下：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As with Grunt and Gulp, we have a file that instructs RequireJS on how to work.
    The following is a snippet that covers our example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 和Grunt和Gulp一样，我们有一个文件指导RequireJS如何工作。以下是涵盖我们示例的片段：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `name` property is the entry point and `out` is the resulting file. It''s
    nice that we have the `paths` property available. It is a place where we can describe
    the modules directly; for example, `jquery: "some/other/jquery"`. Later in our
    code, we do not have to write the full path to the files. Just a simple `require([''jquery''],
    ...)` is enough.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`属性是入口点，`out`是结果文件。很好的是我们有`paths`属性可用。这是一个我们可以直接描述模块的地方；例如，`jquery: "some/other/jquery"`。在我们的代码中，我们不必写文件的完整路径。只需简单的`require([''jquery''],
    ...)`就足够了。'
- en: 'By default, the output of the `r.js` command is minified. If we add an `optimize=none`
    argument to the command in the terminal, we will get the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`r.js`命令的输出是经过压缩的。如果我们在终端中添加一个`optimize=none`参数到命令中，我们将得到以下结果：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `main-built.js` file contains the main module and its dependencies.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`main-built.js`文件包含了主模块及其依赖项。'
- en: Moving from Node.js to the browser with Browserify
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Node.js移动到使用Browserify的浏览器
- en: 'RequireJS indeed solves the problem with modularity. However, it makes us write
    more code. Also, we should always describe our dependencies by following a strict
    format. Let''s look at the code that we used in the previous section:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: RequireJS确实解决了模块化的问题。然而，它让我们写更多的代码。此外，我们应该始终按照严格的格式描述我们的依赖关系。让我们看看我们在上一节中使用的代码：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'It is indeed better if we use the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，如果我们使用以下代码会更好：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The code is much simpler now. This is how we should fetch a module in the Node.js
    environment. It would be nice if we could use the same approach in the browser.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码简单多了。这是我们在Node.js环境中获取模块的方式。如果我们能在浏览器中使用相同的方法就好了。
- en: 'Browserify ([http://browserify.org/](http://browserify.org/)) is a module that
    brings the `require` module of Node.js to the browser. Let''s install it first
    by using the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Browserify ([http://browserify.org/](http://browserify.org/))是一个将Node.js的`require`模块带到浏览器中的模块。让我们首先使用以下代码安装它：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Similarly, to illustrate how the tool works, we will create the `main.js`,
    `ajax.js` and `router.js` files. This time, we are not going to use a global function
    such as `define`. Instead, we will use the usual Node.js `module.exports`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，为了说明这个工具是如何工作的，我们将创建`main.js`，`ajax.js`和`router.js`文件。这一次，我们不打算使用`define`这样的全局函数。相反，我们将使用通常的Node.js
    `module.exports`：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'By default, Browserify comes as a command-line tool. We need to provide an
    entry point and an output file:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Browserify作为一个命令行工具。我们需要提供一个入口点和一个输出文件：
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The result in the compiled file is as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 编译文件中的结果如下：
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that along with the modules, the compiled file also contains the `require`
    function's definition and implementation. It's really just a few bytes of code
    that makes Browserify one of the most popular ways to deliver modular JavaScript
    in the browser. This is what we are going to use in the next few chapters.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，编译文件除了模块之外，还包含`require`函数的定义和实现。这确实只是一小段代码，使Browserify成为浏览器中传递模块化JavaScript的最受欢迎的方式之一。这是我们接下来几章要使用的方法。
- en: 'We have started a Gulp setup. Let''s add Browserify there. We have already
    made a concatenation of the JavaScript. Let''s replace it with Browserify. We
    will add the module to the `package.json` file as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经开始了一个Gulp设置。让我们在那里添加Browserify。我们已经对JavaScript进行了合并。让我们用Browserify替换它。我们将在`package.json`文件中添加模块，如下所示：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'After running `npm install`, we will get the plugin installed and ready to
    use. We need to make two changes, replacing `concat` with `browserify` and pointing
    out the application''s main file:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`npm install`后，我们将安装并准备好使用插件。我们需要做两个更改，用`browserify`替换`concat`，并指出应用程序的主文件：
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, the `src` method accepts only one file. It's our entry point. This is the
    place where Browserify starts resolving dependencies. The rest is the same. We
    still use `uglify` for minification and `rename` to change the file's name.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`src`方法只接受一个文件。这是我们的入口点。这是Browserify开始解析依赖关系的地方。其余部分都是一样的。我们仍然使用`uglify`进行最小化和`rename`来更改文件的名称。
- en: Delivering HTML templates
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传递HTML模板
- en: In the previous sections, you saw how you can package CSS and JavaScript for
    the browser. At the end of this chapter, we will explore the various ways to deliver
    HTML. In the context of client-side applications, the templates still contain
    HTML. However, we need a dynamic way to render and fill them with data.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，您看到了如何为浏览器打包CSS和JavaScript。在本章的最后，我们将探讨各种传递HTML的方式。在客户端应用程序的上下文中，模板仍然包含HTML。然而，我们需要一种动态的方式来渲染并填充它们的数据。
- en: Defining the templates in script tags
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在脚本标记中定义模板
- en: 'The Ember.js framework adopts the concept of adding HTML templates directly
    into the page by using the popular **handlebars** ([http://handlebarsjs.com/](http://handlebarsjs.com/))
    template engine. However, since we do not want to mess up the markup that is already
    there, we place them in the `<script>` tags. The good thing about this is that
    if we set a custom value of the `type` attribute, the browser does not process
    the code inside. Here''s a demonstration of this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Ember.js框架采用了直接将HTML模板添加到页面中的概念，使用流行的**handlebars** ([http://handlebarsjs.com/](http://handlebarsjs.com/))模板引擎。然而，由于我们不想搞乱已经存在的标记，我们将它们放在`<script>`标记中。这样做的好处是，如果我们设置`type`属性的自定义值，浏览器就不会处理其中的代码。这里有一个演示：
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Since the tag has an `id` attribute, we can get its content easily in the following
    way:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于标签有一个`id`属性，我们可以通过以下方式轻松地获取它的内容：
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The benefit of this technique is that the template is on the page and we have
    instant access to it. Also, templates only display the desired content after being
    processed by JavaScript. So, if JavaScript is not enabled in the browser, we do
    not want to display the unprocessed raw template. A major problem with this concept
    is the fact that we will flood our HTML page with a lot of code. If we have a
    big application, then the user will have to download all the templates even if
    he/she uses only a part of it.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术的好处是模板在页面上，我们可以立即访问它。此外，模板只在被JavaScript处理后显示所需的内容。因此，如果浏览器中未启用JavaScript，我们不希望显示未经处理的原始模板。这个概念的一个主要问题是，我们将用大量代码淹没我们的HTML页面。如果我们有一个大型应用程序，那么用户将不得不下载所有模板，即使他/她只使用其中的一部分。
- en: Loading the template externally
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外部加载模板
- en: 'It''s also a common practice to define the templates as external files and
    load them on the page with an Ajax request. The following pseudocode uses jQuery''s
    `get` method to do the job:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将模板定义为外部文件并使用Ajax请求加载到页面上也是一种常见做法。以下伪代码使用jQuery的`get`方法来完成这项工作：
- en: '[PRE27]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We have clear markup, but the user has to make an additional HTTP request in
    order to fetch the template. This approach makes the code more complex because
    the process is asynchronous. It also makes the processing and rendering of the
    content slower than the preceding method.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有清晰的标记，但用户必须进行额外的HTTP请求才能获取模板。这种方法使代码更复杂，因为过程是异步的。它还使处理和渲染内容比前一种方法更慢。
- en: Writing HTML inside the JavaScript
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在JavaScript中编写HTML
- en: 'With the rise of mobile applications, many big companies have started developing
    their own frameworks. Since these companies have enough resources, they usually
    produce something interesting. For example, Facebook created a framework called
    **React** ([http://facebook.github.io/react/](http://facebook.github.io/react/)).
    It defines its templates directly in the JavaScript as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 随着移动应用程序的兴起，许多大公司已经开始开发自己的框架。由于这些公司有足够的资源，他们通常会产生一些有趣的东西。例如，Facebook创建了一个名为**React**
    ([http://facebook.github.io/react/](http://facebook.github.io/react/))的框架。它直接在JavaScript中定义其模板，如下所示：
- en: '[PRE28]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The developers from Facebook adopted the first technique mentioned in this section.
    They put some code inside a `<script>` tag. In order to get things working, they
    have their own parser. It processes the script and converts it into valid JavaScript.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Facebook的开发人员采用了本节中提到的第一种技术。他们将一些代码放在`<script>`标签中。为了使事情正常运行，他们有自己的解析器。它处理脚本并将其转换为有效的JavaScript。
- en: 'There are solutions that do not have templates in the form of HTML. There are
    tools that use templates written in JSON or YAML. For example, **AbsurdJS** ([http://absurdjs.com/](http://absurdjs.com/))
    can keep its template inside the JavaScript class definition as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些解决方案没有以HTML形式的模板。有些工具使用JSON或YAML编写的模板。例如，**AbsurdJS** ([http://absurdjs.com/](http://absurdjs.com/))可以将其模板保存在JavaScript类定义中，如下所示：
- en: '[PRE29]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Precompiling templates
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预编译模板
- en: 'Another popular way to deliver templates to the client side is by using precompilation.
    This is what we are going to use in our project. Precompilation is a process that
    converts the HTML template to a JavaScript object, which is ready for use in our
    code. This approach has several benefits, some of which are as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 将模板传递到客户端的另一种流行方式是使用预编译。这是我们将在项目中使用的方法。预编译是将HTML模板转换为JavaScript对象的过程，该对象已准备好在我们的代码中使用。这种方法有几个好处，其中一些如下：
- en: We do not have to think about accessing the HTML template
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不必考虑访问HTML模板
- en: The markup is still separated from the JavaScript code
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记仍然与JavaScript代码分开
- en: We do not lose time in fetching and processing the HTML
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不浪费时间去获取和处理HTML
- en: Different client-side frameworks have different tools to precompile templates.
    We will cover this in detail later, but the instrument that we are going to use
    for our social network application is called Ractive.js ([http://www.ractivejs.org/](http://www.ractivejs.org/)).
    It's a client-side framework that was originally developed by the people at TheGuardian
    to produce a news application. It's cross-browser and it performs well on mobile
    devices.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的客户端框架有不同的工具来预编译模板。我们将在以后详细介绍这一点，但我们将在我们的社交网络应用程序中使用的工具称为Ractive.js ([http://www.ractivejs.org/](http://www.ractivejs.org/))。这是一个最初由TheGuardian的人员开发的客户端框架，用于制作新闻应用程序。它跨浏览器，在移动设备上表现良好。
- en: 'In order to transform our HTML into Ractive-precompiled templates, we need
    two new modules in the `package.json` file:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们的HTML转换为Ractive预编译模板，我们需要在`package.json`文件中添加两个新模块：
- en: '[PRE30]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `gulp-tap` plugin allows us to process every file sent to the Gulp''s pipeline.
    Here is the new task that we have to add to the `gulpfile.js` file:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`gulp-tap`插件允许我们处理发送到Gulp管道的每个文件。以下是我们必须添加到`gulpfile.js`文件的新任务：'
- en: '[PRE31]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '`Ractive.parse` returns the precompiled template. Since it is a JavaScript
    object, we use `JSON.stringify` to convert it to a string. We use Browserify to
    control our client-side modularity so `module.exports` is attached in front of
    the template''s code. In the end, we use `gulp-rename` and produce a JavaScript
    file.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ractive.parse`返回预编译模板。由于它是一个JavaScript对象，我们使用`JSON.stringify`将其转换为字符串。我们使用Browserify来控制我们的客户端模块化，因此在模板代码前面附加了`module.exports`。最后，我们使用`gulp-rename`生成一个JavaScript文件。'
- en: 'Let''s say that we have a `/tpl/template.html` file with the following content:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个包含以下内容的`/tpl/template.html`文件：
- en: '[PRE32]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'When we run the `gulp` command, we will receive `/tpl/template.js` , which
    contains the JavaScript that is equivalent to the preceding markup:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`gulp`命令时，我们将收到包含相应标记的JavaScript的`/tpl/template.js`文件：
- en: '[PRE33]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: It probably looks strange now, but in the next few chapters, you will see how
    you can use such templates.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可能看起来很奇怪，但在接下来的几章中，您将看到如何使用这样的模板。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Assets are a major part of web applications. Often, companies do not pay enough
    attention to this part, which leads to slower loading time and increased web hosting
    costs, especially when your site grows in popularity. In this chapter, we saw
    that it is important to find the right setup and deliver the images, CSS, JavaScript,
    and HTML in the most efficient way.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 资产是Web应用程序的重要组成部分。通常，公司对这一部分不够重视，这导致加载时间变慢，Web托管成本增加，特别是当您的网站变得更受欢迎时。在本章中，我们看到找到正确的设置并以最有效的方式交付图像、CSS、JavaScript和HTML是很重要的。
- en: In the next chapter, we will start working heavily on our social network. We
    will explore the world of the Model-View-Controller pattern.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始在我们的社交网络上大量工作。我们将探索模型-视图-控制器模式的世界。
