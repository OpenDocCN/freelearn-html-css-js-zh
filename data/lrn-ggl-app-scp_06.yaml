- en: Chapter 6. Creating Feed Reader and Translator Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。创建 Feed 阅读器和翻译应用程序
- en: In the previous chapter, you learned to create Calendar events and Drive applications.
    You built many real-world applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何创建日历事件和 Drive 应用程序。你构建了许多实际的应用程序。
- en: In this chapter, you will learn to
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何
- en: Create a Google search
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Google 搜索
- en: Create a stock quote ticker
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建股票报价滚动条
- en: Create an RSS feed reader
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 RSS 源阅读器
- en: Create an Atom feed reader
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Atom 源阅读器
- en: Create a language translator application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建语言翻译应用程序
- en: Creating a document reviewing and instant inline commenting application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建文档审阅和即时内联评论应用程序
- en: The UrlFetchApp class
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UrlFetchApp 类
- en: The `UrlFetchApp` class can be used to issue HTTP/HTTPS request and get responses
    to/from any websites/URL. For example, the `UrlFetchApp.fetch ("https://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=PACKT")`
    code returns the search result with the search term `PACKT`. The response will
    be a raw content along with HTTP headers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`UrlFetchApp` 类可用于发出 HTTP/HTTPS 请求并从任何网站/URL 获取响应。例如，`UrlFetchApp.fetch ("https://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=PACKT")`
    代码返回了带有搜索词 `PACKT` 的搜索结果。响应将包含原始内容和 HTTP 标头。'
- en: If the communication between the `UrlFetchApp` class's `fetch` method and the
    URL is okay then the URL should return a response code `200`. Otherwise, any other
    number corresponds to the type of error. We can check the response code before
    proceeding further using the `getResponseCode` method.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `UrlFetchApp` 类的 `fetch` 方法和 URL 之间的通信正常，则 URL 应返回响应代码 `200`。否则，任何其他数字都对应于错误类型。我们可以在使用
    `getResponseCode` 方法之前检查响应代码。
- en: 'You can get the content text using the `getContentText` method and parsing
    it to JSON objects. The following code snippet pulls the content text and parses
    to JSON:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `getContentText` 方法获取内容文本，并将其解析为 JSON 对象。以下代码片段提取了内容文本并将其解析为 JSON：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For your understanding the logged output is furnished here (text might be truncated
    and formatted for brevity):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你理解，以下提供了日志输出（文本可能被截断和格式化以节省空间）：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The top-level objects of the JSON are `responseDetails`, `responseData`, and
    `responseStatus`. If Google has returned the correct response, then the `responseStatus`
    value should be `200`. This is returned by the Google search service not the `UrlFetchApp`
    status. You can also check whether the `responseStatus` value equals to `200`
    or not, to confirm if the response content is okay.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 的顶级对象是 `responseDetails`、`responseData` 和 `responseStatus`。如果 Google 返回了正确的响应，那么
    `responseStatus` 的值应该是 `200`。这是由 Google 搜索服务返回的，而不是 `UrlFetchApp` 的状态。你也可以检查 `responseStatus`
    的值是否等于 `200`，以确认响应内容是否正常。
- en: You need to dig into the `responseData` object, which contains the result as
    an array of object. To get the array, use `json.responseData.results` and then
    cycle through the array to get the required result data. We will create an application
    to search Google and to populate the result in Sheet.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要深入挖掘 `responseData` 对象，它包含作为对象数组的搜索结果。要获取数组，请使用 `json.responseData.results`，然后遍历数组以获取所需的结果数据。我们将创建一个应用程序来搜索
    Google 并在表格中填充结果。
- en: Creating a Google search application
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Google 搜索应用程序
- en: 'Create a new Sheet, rename it as `Google` and create headers as shown in the
    following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的表格，将其重命名为 `Google` 并创建如下截图所示的标题：
- en: '![Creating a Google search application](img/B05010_06_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Google 搜索应用程序](img/B05010_06_01.jpg)'
- en: 'Then, enter the following code in the `Code.gs` file:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 `Code.gs` 文件中输入以下代码：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A sample output of the application is shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了应用程序的示例输出：
- en: '![Creating a Google search application](img/B05010_06_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Google 搜索应用程序](img/B05010_06_02.jpg)'
- en: You can test the code using other keywords in cell *B2*. You can create a button
    or custom menu for the `searchGoogle` function, so that you can search frequently.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用单元格 *B2* 中的其他关键词测试代码。你可以为 `searchGoogle` 函数创建一个按钮或自定义菜单，以便你可以频繁搜索。
- en: Creating a stock quote ticker application
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建股票报价滚动条应用程序
- en: A simple function to get stock quotes from Google Finance is shown in the following
    screenshot. The query string (`q`) specifies `NASDAQ` as the stock exchange and
    `GOOG` (Google) as the scrip name.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了从 Google 财经获取股票报价的简单函数。查询字符串 (`q`) 指定了 `NASDAQ` 作为证券交易所，`GOOG`（谷歌）作为股票代码。
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding code, we are using the `UrlFetchApp` class''s `fetch` method.
    The logged response is as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在使用 `UrlFetchApp` 类的 `fetch` 方法。日志响应如下：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the returned response text, you can see that the first four characters are
    a line break, two slashes (`//`), and a space character, so you have to remove
    them before parsing the required JSON object. Striping out the first four characters
    from the returned string makes things easier. You can use the `substr` method
    to strip the first four characters. The `parse` method of JavaScript JSON (JavaScript
    Object Notation) object parses the string to the JSON object.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在返回的响应文本中，你可以看到前四个字符是一个换行符，两个斜杠（`//`）和一个空格字符，因此你必须在解析所需的 JSON 对象之前移除它们。从返回的字符串中移除前四个字符会使事情变得更容易。你可以使用
    `substr` 方法来移除前四个字符。JavaScript JSON（JavaScript 对象表示法）对象的 `parse` 方法将字符串解析为 JSON
    对象。
- en: 'The modified code to retrieve **Last Traded Price** (**LTP**) of Google scrip
    is:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 获取 Google 股票的 **最后交易价格**（**LTP**）的修改后代码如下：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can use multiple scrips (comma separated) in the query string. For example,
    `http://finance.google.com/finance/info?q=NASDAQ:GOOG,AMD,MCHP`. Then, the response
    would be an array of stock quote objects. You will have to cycle through the array
    to get each scrip data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在查询字符串中使用多个股票代码（以逗号分隔）。例如，`http://finance.google.com/finance/info?q=NASDAQ:GOOG,AMD,MCHP`。然后，响应将是一个股票报价对象的数组。你必须遍历数组以获取每个股票代码的数据。
- en: 'We will create a complete working stock quote application. Create or add a
    new Sheet and rename it as `Quotes`, populate the `SYMBOL` column, and format
    it as shown here:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个完整的股票报价应用程序。创建或添加一个新的表格，并将其重命名为 `Quotes`，填充 `SYMBOL` 列，并按以下格式进行格式化：
- en: '![Creating a stock quote ticker application](img/B05010_06_03.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![创建股票报价滚动应用](img/B05010_06_03.jpg)'
- en: 'Edit the `getStockQuotes` function in the `Code.gs` file as listed here:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 listed here 修改 `Code.gs` 文件中的 `getStockQuotes` 函数：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following is a sample output of the application:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该应用程序的样本输出：
- en: '![Creating a stock quote ticker application](img/B05010_06_04.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![创建股票报价滚动应用](img/B05010_06_04.jpg)'
- en: For a repeated quote tick, you can create a minutes trigger for the `getStockQuotes`
    function.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于重复的报价跳动，你可以为 `getStockQuotes` 函数创建一个按分钟触发的触发器。
- en: Logging Bitcoin quotes
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录比特币报价
- en: Have you ever heard about Bitcoin, digital, or virtual currency, and ever watched
    Bitcoin price ticks to buy/sell Bitcoins? **Bitcoin** is a digital asset and trending
    a new payment system spreading all over the world. Here is an interesting application
    to log real-time Bitcoin prices. In this application, we will log prices from
    the Bitstamp trading platform. [https://www.bitstamp.net](https://www.bitstamp.net)
    provides API to get Bitcoin real-time price ticks.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你听说过比特币、数字或虚拟货币吗？是否曾经观察过比特币价格跳动来买卖比特币？**比特币**是一种数字资产，正在全球范围内推广一种新的支付系统。这里有一个有趣的记录实时比特币价格的应用程序。在这个应用程序中，我们将记录
    Bitstamp 交易平台的价格。[https://www.bitstamp.net](https://www.bitstamp.net) 提供获取比特币实时价格跳动的
    API。
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The response from the Bitstamp API which is parsed as JSON is provided here:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 解析为 JSON 的 Bitstamp API 的响应在此提供：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The complete code to parse the said JSON objects to Sheet is provided here:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 解析所述 JSON 对象到表格的完整代码在此提供：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A sample logged Bitcoin data is given here. The **High**, **Low**, and **Volume**
    values are the highest price, lowest price, and total volume in the last 24 hours.
    The **Bid** and **Ask** values are real-time values. Create a trigger for the
    repeated execution of the `getBitCoinData` function.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提供了一个样本记录的比特币数据。**最高价**、**最低价**和**成交量**值是过去 24 小时内的最高价、最低价和总成交量。**买入价**和**卖出价**是实时值。为
    `getBitCoinData` 函数的重复执行创建一个触发器。
- en: '![Logging Bitcoin quotes](img/B05010_06_10.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![记录比特币报价](img/B05010_06_10.jpg)'
- en: RSS and Atom feeds
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RSS 和 Atom 源
- en: RSS stands for **Rich Site Summary**. It is used to publish frequently updated
    information. Users need standalone special software applications or browser add-ons
    called **RSS readers** to read information from any feeds.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: RSS 代表 **丰富网站摘要**。它用于发布经常更新的信息。用户需要独立的特殊软件应用程序或浏览器插件，称为 **RSS 阅读器**，来读取任何源的信息。
- en: Feed documents contain summarized or full text, metadata, publishing date, author
    name, and so on. Using feed, users can receive timely website updates or aggregate
    data from many websites. User need not check manually for any updates from those
    websites frequently, but subscribe for feeds. Feed reader checks the subscribed
    website frequently for any new data and retrieves them.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 源文档包含摘要或全文、元数据、发布日期、作者姓名等。使用源，用户可以接收网站的及时更新或聚合多个网站的数据。用户不需要频繁手动检查这些网站的更新，但需要订阅源。源阅读器会频繁检查订阅的网站是否有新数据，并检索它们。
- en: Skeleton of a RSS feed document
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RSS feed 文档的骨架
- en: 'An example of a RSS feed document is listed here:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了一个 RSS 馈送文档的示例：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The first line specifies the version, as this one is an XML document, to the
    processing software application.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行指定了版本，因为这个是一个 XML 文档，对处理软件应用程序来说。
- en: All other elements are enclosed within the `rss` root element.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他元素都包含在 `rss` 根元素内。
- en: The `title`, `description`, and `language` elements inside the `channel` element
    specify the title, description, and in which language the channel is published,
    respectively.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`channel` 元素内部的 `title`、`description` 和 `language` 元素分别指定了频道标题、描述以及频道发布的语言。'
- en: The `item` element is a repeated one, and it contains the individual feed item
    information, such as `title` (title of the item), `link` (link to the item), `comments`
    (comment about the item), `pubDate` (item published date), `creator` (creator
    of the item), `category` (specifying to which category the item belongs), `description`
    (a brief description about the item), and many more.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`item` 元素是重复的，它包含单个馈送项信息，例如 `title`（项的标题）、`link`（项的链接）、`comments`（关于项的评论）、`pubDate`（项的发布日期）、`creator`（项的创建者）、`category`（指定项属于哪个类别）、`description`（关于项的简要描述）以及更多。'
- en: Creating an RSS reader application
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个 RSS 阅读器应用程序
- en: 'You have to parse the required content from the XML document returned by `UrlFetchApp`
    using `XmlService`. The actual code is furnished here:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须使用 `XmlService` 从 `UrlFetchApp` 返回的 XML 文档中解析所需内容。实际代码如下所示：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding code, `XmlService` is used to parse any well-structured XML
    content. In the mentioned sample source, we concentrated on `channel` elements
    and one or more `item` elements. The `item` element itself contains more information.
    To get the required data, you have to dig into the contents in the order of `channel`
    | `item` | `title` | `link` | `creator`. The `creator` element is prefixed with
    `dc`, so we have to assign the `dc` namespace URL at the top lines of the code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，使用 `XmlService` 解析任何良好结构的 XML 内容。在提到的示例源中，我们专注于 `channel` 元素和一个或多个 `item`
    元素。`item` 元素本身包含更多信息。要获取所需数据，您必须按照 `channel` | `item` | `title` | `link` | `creator`
    的顺序挖掘内容。`creator` 元素以 `dc` 前缀开头，因此我们必须在代码的最上面几行分配 `dc` 命名空间 URL。
- en: 'A sample output of this application is shown here:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序的示例输出如下所示：
- en: '![Creating an RSS reader application](img/B05010_06_05.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个 RSS 阅读器应用程序](img/B05010_06_05.jpg)'
- en: Skeleton of an Atom feed document
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Atom 馈送文档的骨架
- en: 'Atom feeds are similar to RSS feeds with many advanced features. The `root`
    element is `feed` instead of `channel`. An example of an Atom feed document is
    shown here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Atom 馈送类似于 RSS 馈送，具有许多高级功能。`root` 元素是 `feed` 而不是 `channel`。这里展示了一个 Atom 馈送文档的示例：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating an Atom feed reader application
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个 Atom 馈送阅读器应用程序
- en: 'This application parses Google Hot Trends Atom Feed. The following is the code
    to read Google Trends Atom Feed content:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序解析 Google 热门趋势 Atom 馈送。以下是从 Google 热门趋势 Atom 馈送读取内容的代码：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'A sample output of the application is shown here:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序的示例输出如下所示：
- en: '![Creating an Atom feed reader application](img/B05010_06_06.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个 Atom 馈送阅读器应用程序](img/B05010_06_06.jpg)'
- en: Using optional parameters with the UrlFetchApp class
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 UrlFetchApp 类的可选参数
- en: 'All foresaid applications fetch results from public URLs; this means that they
    do not require credentials. What if a website requires your credentials, such
    as username and password, before sending a response? You can provide credentials
    and other parameters as an optional parameter of the `UrlFetchApp` class, for
    example, `UrlFetchApp.fetch(url, params)`. The `params` parameter is similar to
    this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所有上述应用程序从公共 URL 获取结果；这意味着它们不需要凭据。如果网站在发送响应之前需要您的凭据，例如用户名和密码，怎么办？您可以将凭据和其他参数作为
    `UrlFetchApp` 类的可选参数提供，例如 `UrlFetchApp.fetch(url, params)`。`params` 参数类似于以下内容：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `headers` variable (the HTTP/HTTPS request headers) can be a JavaScript
    key/value map. You can provide your login credentials as headers:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`headers` 变量（HTTP/HTTPS 请求头）可以是一个 JavaScript 键/值映射。您可以将登录凭据作为头信息提供：'
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Your username and password will be encoded but not encrypted, so prefer HTTPS
    over HTTP.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您的用户名和密码将被编码但不会被加密，因此请优先使用 HTTPS 而不是 HTTP。
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Not all websites support basic authentication; they mostly support OAuth. The
    `UrlFetchApp` class's built-in OAuth service is deprecated and moved to the open
    source library called the GAS library. More information on how to import the external
    library and use the OAuth2 open source library is provided in [Chapter 9](ch09.html
    "Chapter 9. More Tips and Tricks and Creating an Add-on"), *More Tips and Tricks
    and Creating an Add-on*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有网站都支持基本身份验证；它们大多支持OAuth。`UrlFetchApp`类的内置OAuth服务已弃用，并转移到名为GAS库的开源库中。有关如何导入外部库和使用OAuth2开源库的更多信息，请参阅第9章[更多技巧和窍门以及创建插件](ch09.html
    "第9章。更多技巧和窍门以及创建插件")：
- en: The LanguageApp class
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`LanguageApp`类'
- en: The `LanguageApp` class provides the `translate` method to translate any text
    from one language to another language.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`LanguageApp`类提供了`translate`方法，用于将任何文本从一种语言翻译成另一种语言。'
- en: 'For example, to translate `Google apps script for beginners` to French use
    the following code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要将`Google apps script for beginners`翻译成法语，请使用以下代码：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The logged output would be: `Google Apps Script pour les débutants`.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 记录的输出将是：`Google Apps Script pour les débutants`。
- en: Note
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Google Translate service supports many languages. For more information on supported
    languages, visit:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Google翻译服务支持许多语言。有关支持的语言的更多信息，请访问：
- en: '[https://cloud.google.com/translate/v2/using_rest#language-params](https://cloud.google.com/translate/v2/using_rest#language-params)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cloud.google.com/translate/v2/using_rest#language-params](https://cloud.google.com/translate/v2/using_rest#language-params)'
- en: Creating the language translator application
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建语言翻译应用程序
- en: This application translates text from one language to another. We will use one
    document as an origin/source document and the other one as a destination/target
    document. We are going to develop this application as an add-on. Although there
    is a built-in translate service available (in Docs application navigate to **Tools**
    | **Translate document…)**, we have provided the language translator application
    to explore the capabilities of GAS.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序将文本从一种语言翻译成另一种语言。我们将使用一个文档作为源/源文档，另一个文档作为目标/目标文档。我们将开发此应用程序作为插件。尽管内置的翻译服务可用（在文档应用程序中导航到**工具**
    | **翻译文档…**），但我们提供了语言翻译应用程序来探索GAS的功能。
- en: 'Enter the following code in the source document''s (Docs) `Code.gs` file:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在源文档（文档）的`Code.gs`文件中输入以下代码：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding code sets the target document''s ID to the `targetDocumentId`
    global variable. The target document is the document to which you are going to
    transfer the translated text. Replace the text within double quotes with the target
    document''s ID as a string:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将目标文档的ID设置为`targetDocumentId`全局变量。目标文档是你打算将翻译文本转移到的文档。将双引号内的文本替换为目标文档的ID字符串：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The preceding `onOpen` function creates an **Add-ons** menu with a menu item
    called **Start.** It is associated with the `showSidebar` function:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的`onOpen`函数创建了一个**插件**菜单，其中有一个名为**开始**的菜单项。它与`showSidebar`函数相关联：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding `showSidebar` function creates the sidebar with the required control
    elements.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的`showSidebar`函数创建了带有所需控制元素的侧边栏。
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `getPreferences` function gets and returns the user''s language preferences.
    The `runTranslation` function shown here translates the text from the source language
    to the destination language. The languages are notated by their two-letter short
    form. For example, English is `en`, German is `de`, and the default is auto, which
    means the Google Translate service will detect the source language itself. If
    the `savePrefs` argument is `true`, then the user language preference will be
    saved:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`getPreferences`函数获取并返回用户的语言偏好。此处显示的`runTranslation`函数将文本从源语言翻译成目标语言。语言用它们的两位字母简称表示。例如，英语是`en`，德语是`de`，默认为自动，这意味着Google翻译服务将自动检测源语言。如果`savePrefs`参数为`true`，则用户语言偏好将被保存：'
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following `include` helper function puts external JS/CSS contents from
    other files (filename given as argument) into the HTML file:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的`include`辅助函数将来自其他文件的外部JS/CSS内容（文件名作为参数给出）放入HTML文件中：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a new HTML file (`Sidebar.html`) from the **File** menu and enter the
    following code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 从**文件**菜单创建一个新的HTML文件（`Sidebar.html`）并输入以下代码：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the preceding code, Google's polymer components library is used. Although
    we could have used simple HTML elements, we used polymer components for an aesthetic
    look and feel of the sidebar. You need not worry about the functioning of that
    library, you just need to include the URLs as shown. The `include` helper function
    inserts the respective file, given as argument, contents.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，使用了 Google 的聚合物组件库。尽管我们可以使用简单的 HTML 元素，但我们使用了聚合物组件来获得侧边栏的美观外观和感觉。您无需担心该库的功能，只需按照所示包含
    URL 即可。`include` 辅助函数插入作为参数给出的相应文件的内容。
- en: 'Create another HTML file and name it as `Sidebar.css`, including `.css`. The
    script editor will add `.html` extension, so the filename will be `Sidebar.css.html`.
    Enter the following code in it:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 创建另一个 HTML 文件，并将其命名为 `Sidebar.css`，包括 `.css` 扩展名。脚本编辑器将添加 `.html` 扩展名，因此文件名将是
    `Sidebar.css.html`。在文件中输入以下代码：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The preceding CSS code defines styles for the HTML elements in the `Sidebar.html`
    file. CSS defines element styles within associated braces.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的 CSS 代码定义了 `Sidebar.html` 文件中 HTML 元素的样式。CSS 在相关的大括号内定义元素样式。
- en: 'For example:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: The `body` style name defines styles for the body element
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`body` 样式名称定义了主体元素的样式'
- en: '`h4` defines styles for fourth-level heading elements'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h4` 定义了第四级标题元素的样式'
- en: The style name prefixed with a dot (`.`) defines styles for the elements, which
    belong to that class
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有点（`.`）前缀的样式名称定义了属于该类的元素的样式
- en: The name prefixed with the hash symbol (`#`) defines styles for element whose
    ID is same as the style name
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有井号符号（`#`）前缀的名称定义了与样式名称相同的元素的样式
- en: Tip
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: For further reading on CSS, refer to [https://developer.mozilla.org/en-US/Learn/CSS](https://developer.mozilla.org/en-US/Learn/CSS).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步了解 CSS，请参阅 [https://developer.mozilla.org/en-US/Learn/CSS](https://developer.mozilla.org/en-US/Learn/CSS)。
- en: 'Create another HTML file and name it `Sidebar.js`. Enter the following code
    in the newly created `Sidebar.js.html` file:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 创建另一个 HTML 文件，并将其命名为 `Sidebar.js`。在新建的 `Sidebar.js.html` 文件中输入以下代码：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: After typing all the code without errors, reload the document. A new entry **Translate**
    under the **Add-ons** menu will appear. Click on **start** to open the sidebar,
    which will have all the controls you need to run the application. To test the
    application, enter some text in the source document (in which you have entered
    code). Select language into which you would like to translate the text, then click
    on the **TRANSLATE** button.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有错误地输入所有代码后，重新加载文档。在 **扩展程序** 菜单下将出现一个新的条目 **翻译**。点击 **开始** 打开侧边栏，其中将包含您运行应用程序所需的所有控件。要测试应用程序，请在源文档（其中您已输入代码）中输入一些文本。选择您想要将文本翻译成的语言，然后点击
    **翻译** 按钮。
- en: The translated text will be placed in the destination document whose ID you
    entered in the code. Open that document to see the translated text.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译后的文本将放置在目标文档中，其 ID 在代码中已输入。打开该文档以查看翻译后的文本。
- en: 'The following screenshot shows the sidebar:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了侧边栏：
- en: '![Creating the language translator application](img/B05010_06_07.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![创建语言翻译应用程序](img/B05010_06_07.jpg)'
- en: 'The following screenshot shows the source document text in English before translation:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了翻译前的英文源文档文本：
- en: '![Creating the language translator application](img/B05010_06_08.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![创建语言翻译应用程序](img/B05010_06_08.jpg)'
- en: 'Now if you open the target document, then you can view the translated text
    saved in it. The sample text shown in the preceding screenshot is translated to
    Japanese as shown here:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果您打开目标文档，您可以在其中查看保存的翻译文本。前面截图中的示例文本已翻译成日语，如下所示：
- en: '![Creating the language translator application](img/B05010_06_09.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![创建语言翻译应用程序](img/B05010_06_09.jpg)'
- en: Creating a document reviewing and instant inline commenting application
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个文档审查和即时内联评论应用程序
- en: We will create a document reviewing and commenting application. The document
    can be an article submission, a comprehension submitted by a student, a thesis
    paper submitted by a researcher, or anything else that should be reviewed before
    acceptance. The reviewer can review and insert predefined comments or his/her
    own custom comments, instantly. The reviewer selects some text in the document,
    and clicks on any one button (predefined comments) to highlight. Then, the script
    will highlight the text and insert the comment text inline along with creating
    an actual comment. You can see the created comments in the **Comment** panel (at
    the top right-hand side). Finally, the reviewer can insert score at the end of
    the document.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个文档审查和评论应用程序。文档可以是文章投稿、学生提交的理解测试、研究人员提交的论文，或者任何在接收前需要审查的内容。审查者可以审查并插入预定义的评论或他/她的自定义评论，即时完成。审查者选择文档中的某些文本，然后点击任何一个按钮（预定义评论）进行高亮。然后，脚本将高亮显示文本，并在实际评论旁边内联插入评论文本。您可以在**评论**面板（右上角）看到创建的评论。最后，审查者可以在文档末尾插入评分。
- en: 'As usual, create the `onOpen` trigger function in the code file, and it will
    open the sidebar:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，在代码文件中创建`onOpen`触发函数，它将打开侧边栏：
- en: '[PRE26]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `insertComment` function inserts the actual comment into the document.
    Drive is an advanced service, so you should enable the Drive API before using
    it. I hope you remember how to enable advanced services. If you don''t, then revise
    from [Chapter 5](ch05.html "Chapter 5. Creating Google Calendar and Drive Applications"),
    *Creating Google Calendar and Drive Applications*:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`insertComment`函数将实际评论插入到文档中。由于Drive是一个高级服务，所以在使用它之前，您应该启用Drive API。我希望您还记得如何启用高级服务。如果您不记得，请从[第5章](ch05.html
    "第5章。创建Google日历和Drive应用程序")，*创建Google日历和Drive应用程序*中复习：'
- en: '[PRE27]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `insertText` function uses the selected text or the text where the cursor
    is pointed to as an argument:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`insertText`函数使用所选文本或光标所在位置的文本作为参数：'
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This `insertScore` function inserts a horizontal line at the end of the document,
    and it also inserts the score based on whether the document meets the expectation
    or not:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`insertScore`函数在文档末尾插入一条水平线，并根据文档是否符合预期插入评分：'
- en: '[PRE29]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create the following code in the `Sidebar.html` file:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Sidebar.html`文件中创建以下代码：
- en: '[PRE30]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `accordion` block''s structure is provided in the code comment:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`accordion`块的结构在代码注释中提供：'
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following screenshot shows the sidebar and document:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了侧边栏和文档：
- en: '![Creating a document reviewing and instant inline commenting application](img/B05010_06_11.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![创建文档审查和即时内联评论应用程序](img/B05010_06_11.jpg)'
- en: You can see the inserted comments by clicking on the **Comment** button at the
    top right-hand side corner of the document's window.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击文档窗口右上角角落的**评论**按钮来查看插入的评论。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned and created many useful applications, including
    an RSS/Atom reader, the language translator applications, and the document reviewing
    and commenting application. In the next chapter, you will learn to create interactive
    web pages, an RSS feed, a file upload, and a timesheet application.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了并创建了多个有用的应用程序，包括RSS/Atom阅读器、语言翻译应用程序以及文档审查和评论应用程序。在下一章中，您将学习如何创建交互式网页、RSS源、文件上传和考勤应用程序。
