- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: A CI/CD Pipeline for Your Microservices
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为您的微服务构建 CI/CD 管道
- en: '**Continuous integration** (**CI**) and **continuous delivery/deployment**
    (**CD**) are fundamental practices in modern software development, forming the
    backbone of efficient DevOps workflows. Together, they automate and streamline
    the processes of integrating code changes, testing, and deploying applications,
    ensuring that software is always in a deployable state.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）和**持续交付/部署**（**CD**）是现代软件开发中的基本实践，构成了高效 DevOps 工作流程的骨干。它们共同自动化并简化了集成代码更改、测试和部署应用程序的过程，确保软件始终处于可部署状态。'
- en: One of the modern software development requirements for developers is to at
    least understand and have essential skills for building pipelines and working
    with different automation systems.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于现代软件开发人员来说，至少理解和掌握构建管道以及与不同自动化系统协作的基本技能是一个现代软件开发的要求。
- en: This chapter is about understanding and applying CI/CD to your microservices.
    Developing these fundamental DevOps skills will help you stay aligned with modern
    development practices.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于理解和应用 CI/CD 到您的微服务中。培养这些基本的 DevOps 技能将帮助您与现代化开发实践保持一致。
- en: 'We’ll cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: The essentials of CI/CD processes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI/CD 流程的基本要素
- en: Working with Azure Cloud
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure 云进行协作
- en: Working with GitHub actions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 进行协作
- en: Building a pipeline
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建管道
- en: You don’t need any previous experience of CI/CD to cover and understand the
    current chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要任何 CI/CD 的先前经验来覆盖和理解本章内容。
- en: The essentials of CI/CD processes
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI/CD 流程的基本要素
- en: CI and CD are essential practices in Node.js microservice development to streamline
    both the development and release processes. CI automates the integration of code
    changes into the main branch, ensuring each update is tested and validated through
    automated testing. This reduces the risk of integration issues and helps maintain
    code quality.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: CI 和 CD 是 Node.js 微服务开发中的基本实践，用于简化开发和发布流程。CI 自动将代码更改集成到主分支，确保每个更新都通过自动化测试进行测试和验证。这减少了集成问题的风险，并有助于保持代码质量。
- en: In the CD pipeline, every successful build from CI is automatically deployed
    to production or staging environments. This automation significantly reduces the
    time between development and release, allowing teams to quickly iterate on features
    and address issues.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CD 管道中，CI 的每个成功构建都会自动部署到生产或预发布环境中。这种自动化显著缩短了开发和发布之间的时间，使团队能够快速迭代功能和解决问题。
- en: Understanding CI
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 CI
- en: CI is the practice of frequently integrating code changes into a shared repository.
    This process is typically automated, with code being merged and tested multiple
    times a day. The main goals of CI are to detect integration issues early, reduce
    the chances of bugs reaching production, and ensure that new code is always compatible
    with the existing code base.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: CI 是将代码更改频繁集成到共享仓库的实践。这个过程通常是自动化的，代码每天被合并和测试多次。CI 的主要目标是尽早检测集成问题，减少错误到达生产环境的可能性，并确保新代码始终与现有代码库兼容。
- en: As developers, we commit our code changes frequently (often several times a
    day) to a shared repository. This reduces the chances of conflicts and integration
    issues. When we have automated systems such as CI, after every commit, an automated
    build process is triggered. The code is compiled, and necessary dependencies are
    resolved. This ensures that the code base remains in a buildable state at all
    times. A successful build is an indication that the code base is in a healthy
    state and can proceed to the next steps, such as testing.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，我们频繁地将代码更改（通常每天几次）提交到共享仓库。这减少了冲突和集成问题的可能性。当我们有如 CI 这样的自动化系统时，每次提交后都会触发一个自动构建过程。代码被编译，并解决必要的依赖项。这确保代码库始终处于可构建状态。成功的构建表明代码库处于健康状态，可以继续到下一步，例如测试。
- en: Automated tests are executed after the build process. These tests can include
    unit tests, integration tests, and sometimes even end-to-end tests. The goal is
    to catch any bugs or issues early in the development cycle. If the build or tests
    fail, developers receive immediate feedback. This allows them to address issues
    quickly before they become bigger problems.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 自动测试在构建过程之后执行。这些测试可以包括单元测试、集成测试，有时甚至包括端到端测试。目标是尽早捕捉到开发周期中的任何错误或问题。如果构建或测试失败，开发者会立即收到反馈。这允许他们在问题变得更大之前快速解决问题。
- en: Every time a new code change is committed, an automated build process is triggered.
    This process compiles the code, resolves dependencies, and packages the application
    if necessary.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每次提交新的代码更改时，都会触发一个自动构建过程。此过程编译代码，解决依赖关系，并在必要时打包应用程序。
- en: CI encourages the use of a single shared repository, which acts as the *single
    source of truth* for the project. This repository contains the most up-to-date
    and stable version of the code base, ensuring that all team members are working
    from the same foundation. This practice especially helps in maintaining consistency
    across the team.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: CI鼓励使用单个共享仓库，该仓库作为项目的*单一事实来源*。此仓库包含代码库的最新和稳定版本，确保所有团队成员都从相同的基础工作。这种做法特别有助于在团队中保持一致性。
- en: 'Now, let’s try to cover the benefits of CI:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试涵盖CI的好处：
- en: '**Early bug detection**: By integrating code changes frequently and running
    automated tests with each integration, CI allows teams to detect bugs and issues
    early in the development process. This early detection reduces the cost and complexity
    of fixing bugs.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**早期错误检测**：通过频繁集成代码更改并运行每次集成时的自动化测试，持续集成（CI）使团队能够在开发过程中早期发现错误和问题。这种早期检测减少了修复错误的成本和复杂性。'
- en: '**Reduced integration conflicts**: Frequent integration of code changes means
    that conflicts are detected and resolved quickly.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少集成冲突**：频繁集成代码更改意味着冲突可以快速检测和解决。'
- en: '**Faster development cycles**: Automated builds and tests free up developer
    time by eliminating the need for manual testing and build processes. This leads
    to faster development cycles and quicker delivery of new features and bug fixes.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加快开发周期**：自动化构建和测试通过消除手动测试和构建过程的需求，为开发者节省时间。这导致开发周期加快，新功能和错误修复的交付更快。'
- en: '**Improved code quality**: Automated testing as part of CI ensures that only
    code that passes a predefined set of tests is integrated into the mainline. This
    improves the overall quality and stability of the code base.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高代码质量**：作为CI一部分的自动化测试确保只有通过预定义测试集的代码才能集成到主线中。这提高了代码库的整体质量和稳定性。'
- en: '**Enhanced collaboration**: CI encourages collaboration among team members
    by making it easier to integrate and share code. This fosters a culture of transparency
    and collective ownership of the code base.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强协作**：CI通过简化代码集成和共享，鼓励团队成员之间的协作。这促进了透明度和代码库集体所有权的文化。'
- en: '**Continuous feedback**: Continuous feedback loops provide developers with
    immediate information about the impact of their changes. This helps in maintaining
    high code quality and reduces the time spent on debugging and troubleshooting.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续反馈**：持续的反馈循环为开发者提供有关其更改影响的信息。这有助于保持高代码质量，并减少调试和故障排除所花费的时间。'
- en: 'A CI workflow helps the team to catch bugs early, reduce integration challenges,
    and improve collaboration among team members. By automating the process of testing
    and building, CI ensures that the code base remains stable and ready for further
    development or deployment, promoting a faster and more reliable release cycle.
    Here is how it works:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: CI工作流程帮助团队早期捕捉错误，减少集成挑战，并改善团队成员之间的协作。通过自动化测试和构建的过程，CI确保代码库保持稳定，并准备好进一步的开发或部署，促进更快和更可靠的发布周期。以下是它是如何工作的：
- en: '**Developer makes changes**: Step one is about making changes. A developer
    writes new code or modifies existing code on their local machine. Once the changes
    are complete, they commit the changes to the **version control system** (**VCS**),
    such as Git.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**开发者进行更改**：第一步是进行更改。开发者在其本地机器上编写新代码或修改现有代码。一旦更改完成，他们将更改提交到**版本控制系统**（**VCS**），例如Git。'
- en: '**Code is pushed to the repository**: The developer pushes the committed changes
    to the shared repository. This triggers the CI process.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**代码推送到仓库**：开发者将提交的更改推送到共享仓库。这触发了CI过程。'
- en: '**CI server detects changes**: A CI server (e.g., Jenkins, Travis CI, CircleCI,
    or GitHub Actions) monitors the repository for new changes. When a change is detected,
    the CI server automatically triggers a build process.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**CI服务器检测更改**：CI服务器（例如Jenkins、Travis CI、CircleCI或GitHub Actions）监控仓库以查找新更改。当检测到更改时，CI服务器自动触发构建过程。'
- en: '**Build is automated**: The CI server pulls the latest code and initiates the
    build process. This involves compiling the code, resolving dependencies, and creating
    build artifacts if necessary. Tools such as Maven, Gradle, and Ant are used to
    automate the build process, manage dependencies, and compile the code.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建是自动化的**：CI服务器拉取最新代码并启动构建过程。这包括编译代码、解决依赖关系以及在必要时创建构建工件。Maven、Gradle和Ant等工具用于自动化构建过程、管理依赖关系和编译代码。'
- en: '**Testing is automated**: After a successful build, the CI server runs automated
    tests. These tests can include unit tests, integration tests, and other types
    of tests specific to the project. If the tests pass, the CI process continues.
    If any test fails, the process is halted, and the developer is notified of the
    failure. JUnit, NUnit, Mocha, Jest, and Selenium are examples of testing frameworks
    used to write and execute automated tests.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试是自动化的**：在构建成功后，CI服务器运行自动化测试。这些测试可以包括单元测试、集成测试和项目特定的其他类型测试。如果测试通过，CI过程将继续。如果任何测试失败，过程将停止，开发者将被通知失败情况。JUnit、NUnit、Mocha、Jest和Selenium是用于编写和执行自动化测试的测试框架示例。'
- en: '**Feedback is given to developers**: The CI server provides feedback to the
    developer, typically through notifications or a web interface. If the build or
    tests fail, the feedback includes details about the failure, helping the developer
    to quickly identify and fix the issue.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**向开发者提供反馈**：CI服务器向开发者提供反馈，通常通过通知或网页界面。如果构建或测试失败，反馈将包括关于失败详情的信息，帮助开发者快速识别和修复问题。'
- en: '**Changes are merged to mainline**: Once the build and tests pass, the changes
    are merged into the mainline or master branch of the repository. This branch always
    represents the latest stable version of the code.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更改合并到主线**：一旦构建和测试通过，更改将合并到存储库的主线或master分支。这个分支始终代表代码的最新稳定版本。'
- en: '**Builds are deployed**: In some cases, successful builds might be automatically
    deployed to a staging environment for further testing. This can be part of a CD
    pipeline.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建被部署**：在某些情况下，成功的构建可能会自动部署到预发布环境以进行进一步测试。这可能是持续交付（CD）管道的一部分。'
- en: The CI workflow is designed to automate the integration of code changes, ensuring
    that new updates are quickly tested and validated before being merged into the
    mainline. By following this structured process, teams can catch issues early,
    reduce integration headaches, and deliver high-quality code more efficiently.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成（CI）工作流程旨在自动化代码更改的集成，确保在合并到主线之前，新更新能够快速测试和验证。通过遵循这一结构化流程，团队可以早期发现问题，减少集成困难，并更高效地交付高质量代码。
- en: Several tools and platforms play an important role in implementing CI in software
    development projects. These tools ensure that code integration, building, and
    testing processes are automated and efficient. VCSs such as Git and Subversion,
    manage and track changes in the code base, while CI servers such as Jenkins and
    GitHub Actions automate the build and test process. Build tools such as Maven
    and Gradle handle dependencies and compilation, and testing frameworks such as
    Mocha and Jest enable automated testing, ensuring code quality at every stage
    of development.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 几种工具和平台在软件开发生命周期中实施持续集成（CI）方面发挥着重要作用。这些工具确保代码集成、构建和测试过程自动化且高效。如Git和Subversion等版本控制系统（VCS）管理和跟踪代码库中的更改，而如Jenkins和GitHub
    Actions等CI服务器自动化构建和测试过程。构建工具如Maven和Gradle处理依赖关系和编译，而测试框架如Mocha和Jest使自动化测试成为可能，确保开发过程中的每个阶段代码质量。
- en: Understanding CD
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解持续交付（CD）
- en: CD is a software engineering practice that enables teams to develop and release
    software in shorter, more frequent cycles, ensuring it can be deployed at any
    moment with confidence. As an evolution of CI, CD emphasizes not just building
    and testing code but also automating the deployment process to production environments,
    allowing for faster and more reliable releases.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付（CD）是一种软件开发实践，它使团队能够在更短、更频繁的周期内开发和发布软件，确保可以自信地随时部署。作为持续集成（CI）的演变，CD不仅强调构建和测试代码，还强调自动化部署过程到生产环境，从而实现更快、更可靠的发布。
- en: 'Here are the core principles of CD:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是持续交付（CD）的核心原则：
- en: '**Automated testing**: Every change goes through an automated testing process
    to ensure that it is production-ready.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化测试**：每个更改都经过自动化测试过程，以确保其适用于生产环境。'
- en: '**Automated deployment**: The deployment process is automated, reducing the
    risks and errors associated with manual deployments.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化部署**：部署过程是自动化的，这减少了与手动部署相关的风险和错误。'
- en: '**Incremental updates**: Software is released in small, manageable chunks rather
    than large, monolithic updates.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增量更新**：软件以小而可管理的块形式发布，而不是大型的单体更新。'
- en: '**Environment parity**: The testing, staging, and production environments are
    kept as similar as possible to avoid unexpected issues during deployment.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境一致性**：测试、预生产和生产环境保持尽可能相似，以避免部署过程中出现意外问题。'
- en: '**Continuous feedback**: Constant monitoring and feedback from the production
    environment allow for quick detection and resolution of issues.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续反馈**：从生产环境持续监控和获取反馈，可以快速检测和解决问题。'
- en: That is great, but how do we apply it to our Node.js microservices? Applying
    CD to a Node.js microservice architecture involves several steps.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 那很好，但我们如何将其应用到我们的 Node.js 微服务中呢？将 CD 应用于 Node.js 微服务架构涉及几个步骤。
- en: Integrating CI/CD into microservices
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 CI/CD 集成到微服务中
- en: 'Integrating CI/CD into microservices ensures seamless, automated deployment
    and testing of independent services, enabling faster development cycles and consistent,
    reliable updates. This approach enhances scalability and agility by streamlining
    the release process across distributed microservice architectures. Here is how
    we can integrate it in terms of Node.js microservices:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将 CI/CD 集成到微服务中确保了独立服务的无缝、自动化部署和测试，从而实现更快的开发周期和一致、可靠的更新。这种方法通过简化分布式微服务架构的发布流程，增强了可扩展性和敏捷性。以下是我们在
    Node.js 微服务中如何集成它的方法：
- en: First, you need to set up CI. You can use a CI tool such as **GitHub Actions**,
    **Jenkins**, or another tool to automate the process of building, testing, and
    packaging your Node.js microservices. Make sure that your CI pipeline runs unit
    tests, integration tests, and static code analysis on every commit.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要设置 CI。您可以使用 CI 工具，如 **GitHub Actions**、**Jenkins** 或其他工具来自动化构建、测试和打包您的
    Node.js 微服务的流程。确保您的 CI 管道在每次提交时都运行单元测试、集成测试和静态代码分析。
- en: Use Docker to containerize each Node.js microservice. This ensures that the
    service runs consistently across different environments. Define a Docker file
    for each microservice to specify the dependencies, environment variables, and
    startup commands.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Docker 对每个 Node.js 微服务进行容器化。这确保了服务在不同环境中的一致运行。为每个微服务定义一个 Dockerfile，以指定依赖项、环境变量和启动命令。
- en: The next step is writing automated tests for each microservice, covering unit
    tests, integration tests, and end-to-end tests. Use a test framework such as **Mocha**,
    **Jest**, or **Supertest** to write and run your tests.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是为每个微服务编写自动化测试，包括单元测试、集成测试和端到端测试。使用测试框架，如 **Mocha**、**Jest** 或 **Supertest**
    来编写和运行您的测试。
- en: In the end, ensure your CI pipeline runs these tests on every code change.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，确保您的 CI 管道在每次代码更改时都运行这些测试。
- en: The second huge step is to set up a CD pipeline. Extend your CI pipeline to
    deploy your microservices to a staging environment automatically. This can be
    done using the previously mentioned tools such as GitHub Actions, Jenkins, or
    other tools. Use a deployment tool such as **Kubernetes**, **Docker Swarm**, or
    **AWS ECS** (**Elastic Container Service**) to manage your containers in the staging
    and production environments.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个巨大的步骤是设置 CD 管道。扩展您的 CI 管道以自动将微服务部署到预生产环境。这可以使用之前提到的工具，如 GitHub Actions、Jenkins
    或其他工具来完成。使用部署工具，如 **Kubernetes**、**Docker Swarm** 或 **AWS ECS**（弹性容器服务）来管理预生产和生产环境中的容器。
- en: Automate the deployment process by defining scripts that push the Docker images
    to a container registry (such as Docker Hub or AWS ECR) and update the services
    in the staging environment.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过定义将 Docker 镜像推送到容器注册库（如 Docker Hub 或 AWS ECR）并更新预生产环境中的服务的脚本来自动化部署流程。
- en: Ensure that your local, testing, staging, and production environments are as
    similar as possible. This reduces the chances of environment-specific bugs.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的本地、测试、预生产和生产环境尽可能相似。这减少了环境特定错误的可能性。
- en: To manage different configurations for each environment, don’t forget to use
    environment variables.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了管理每个环境的不同配置，别忘了使用环境变量。
- en: Implement monitoring and logging for your microservices using tools such as
    Prometheus, Grafana, ELK Stack, or Datadog. Set up alerts to notify your team
    of any issues in the production environment.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Prometheus、Grafana、ELK Stack 或 Datadog 等工具对您的微服务进行监控和日志记录。设置警报以通知您的团队生产环境中出现的任何问题。
- en: Use deployment strategies such as canary releases or blue-green deployments
    to minimize the risk when deploying new versions of your microservices. This allows
    you to test new versions with a small percentage of users before rolling them
    out to the entire user base.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用诸如金丝雀发布或蓝绿部署等部署策略，以最小化部署微服务新版本时的风险。这允许你在将新版本推广到整个用户群之前，用一小部分用户测试新版本。
- en: Monitor the performance and logs of your services in production. Gather feedback
    from users and automatically roll back if a deployment causes issues.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监控生产中服务的性能和日志。从用户那里收集反馈，并在部署导致问题时自动回滚。
- en: Continuously iterate on your processes and tools to improve your CD pipeline.
    By following these steps, you can effectively implement CD in your Node.js microservice
    development process, allowing for faster, safer, and more reliable deployments.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续迭代你的流程和工具以改进你的持续交付（CD）管道。通过遵循这些步骤，你可以在 Node.js 微服务开发过程中有效地实施 CD，从而实现更快、更安全、更可靠的部署。
- en: CI and CD are closely related concepts in modern software development, but they
    focus on different stages of the software development life cycle. Here’s how they
    differ.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: CI 和 CD 是现代软件开发中紧密相关的概念，但它们关注软件开发生命周期的不同阶段。以下是它们之间的区别。
- en: The main focus of CI is integrating code changes from multiple developers into
    a shared repository, multiple times a day. It also ensures that the code is always
    in a deployable state by catching integration issues early. Hence, a CI pipeline
    focuses on integrating and testing code. It includes stages such as code linting,
    unit tests, integration tests, and sometimes code coverage reports.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成（CI）的主要焦点是将多个开发者的代码更改集成到一个共享仓库中，每天多次。它还通过早期捕捉集成问题来确保代码始终处于可部署状态。因此，CI 管道侧重于集成和测试代码。它包括代码检查、单元测试、集成测试，有时还包括代码覆盖率报告。
- en: On the other hand, CD builds on CI by automating the delivery of code changes
    to various environments, such as staging and production, after they pass the CI
    pipeline. The primary goal of CD is to then ensure that code is always ready to
    be released to production, and releases can happen frequently and reliably. A
    CD pipeline extends the CI pipeline to include steps for deploying the code to
    various environments. This can include deployment scripts, environment configuration,
    and automated rollback mechanisms.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，持续部署（CD）建立在 CI 的基础上，通过自动化代码更改的交付到各种环境（如预发布和生产环境），在它们通过 CI 管道后。CD 的主要目标是确保代码始终准备好发布到生产环境，并且发布可以频繁且可靠地进行。CD
    管道扩展了 CI 管道，包括将代码部署到各种环境的步骤。这可能包括部署脚本、环境配置和自动回滚机制。
- en: In essence, CI is the foundation, and CD extends it to cover the deployment
    aspect, allowing for continuous delivery of new features and updates to end users.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，CI 是基础，CD 则扩展了它以涵盖部署方面，允许持续向最终用户提供新功能和更新。
- en: Working with Azure Cloud
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure 云服务
- en: The **cloud** refers to a network of remote servers hosted on the internet,
    which are used to store, manage, and process data, rather than relying on a local
    server or personal computer. It allows businesses and individuals to access computing
    resources on-demand, such as storage, computing power, databases, and more, from
    anywhere in the world.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**云**指的是托管在互联网上的远程服务器网络，用于存储、管理和处理数据，而不是依赖于本地服务器或个人计算机。它允许企业和个人从世界任何地方按需访问计算资源，如存储、计算能力、数据库等。 '
- en: Azure is Microsoft‘s cloud computing platform, providing a wide range of services
    such as virtual machines, databases, AI tools, and more. It enables developers
    and businesses to build, deploy, and manage applications through a global network
    of Microsoft-managed data centers. Azure offers flexibility, scalability, and
    cost-effectiveness, making it suitable for everything from small startups to large
    enterprises.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 是微软的云计算平台，提供包括虚拟机、数据库、AI 工具等多种服务。它使开发者和企业能够通过微软管理的全球数据中心网络构建、部署和管理应用程序。Azure
    提供灵活性、可扩展性和成本效益，使其适用于从小型初创企业到大型企业的一切。
- en: Using **Azure cloud** provides several advantages, including seamless integration
    with Microsoft‘s ecosystem, high availability, and robust security features. It
    also supports hybrid cloud environments, allowing businesses to connect their
    on-premises infrastructure with the cloud. Azure’s global presence ensures low
    latency and compliance with regional regulations. Additionally, it offers advanced
    analytics, AI, and machine learning services, empowering businesses to innovate
    and stay competitive in the digital age.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **Azure 云** 提供了几个优势，包括与微软生态系统的无缝集成、高可用性和强大的安全功能。它还支持混合云环境，允许企业将他们的本地基础设施与云连接起来。Azure
    的全球存在确保了低延迟并符合区域法规。此外，它还提供高级分析、人工智能和机器学习服务，使企业能够在数字时代创新并保持竞争力。
- en: To make our example as simple as possible, we will work on the `Account` microservice
    from [*Chapter 5*](B09148_05.xhtml#_idTextAnchor074). We will begin by obtaining
    all the resources necessary for our example.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的示例尽可能简单，我们将从 [*第 5 章*](B09148_05.xhtml#_idTextAnchor074) 中的 `Account`
    微服务开始。我们将首先获取我们示例所需的全部资源。
- en: Our `Account` service stores data in the Postgres database. We will deploy our
    application to Azure, but you can use any cloud infrastructure you want.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `Account` 服务将数据存储在 Postgres 数据库中。我们将部署我们的应用程序到 Azure，但您可以使用任何您想要的云基础设施。
- en: 'First, we need to create an **Azure Resource Group** to deploy our application.
    We can do that with the following steps:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个 **Azure 资源组** 来部署我们的应用程序。我们可以通过以下步骤来完成：
- en: First, let’s create a Postgres resource to store data on Azure. Go to [http://portal.azure.com](http://portal.azure.com)
    and register to get a free account if you haven’t registered yet. Using a free
    subscription, you can get $200 of free credit toward Azure products and services,
    plus twelve months of popular free services.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个用于在 Azure 中存储数据的 Postgres 资源。如果您尚未注册，请访问 [http://portal.azure.com](http://portal.azure.com)
    并注册以获取免费账户。使用免费订阅，您可以获得 200 美元的免费信用额度用于 Azure 产品和服务，以及十二个月的流行免费服务。
- en: 'The next step is to set up Azure resources using the Azure portal and create
    a resource group:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是使用 Azure 门户设置 Azure 资源并创建一个资源组：
- en: Log in to the Azure portal.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 Azure 门户。
- en: In the left sidebar, select **Resource Groups**.
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧边栏中，选择 **资源组**。
- en: Click **Create**.
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建**。
- en: 'Fill in the necessary details, such as the subscription, resource group name,
    and region, then click **Review + create** (*Figure 13**.1*):'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写必要的详细信息，例如订阅、资源组名称和区域，然后点击 **审查 + 创建**（*图 13**.1*）：
- en: '![Figure 13.1: Creating a resource group in Azure](img/B09148_13_001.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.1：在 Azure 中创建资源组](img/B09148_13_001.jpg)'
- en: 'Figure 13.1: Creating a resource group in Azure'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1：在 Azure 中创建资源组
- en: 'The next step is to create an App Service plan:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建一个应用服务计划：
- en: In the Azure portal, search for `App Service plans` in the search bar and select
    the top result.
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure 门户中，在搜索栏中搜索 `App Service plans` 并选择顶部结果。
- en: Click **Create**.
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建**。
- en: Choose your subscription, select the resource group you just created, and enter
    a name for your App Service plan.
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的订阅，选择您刚刚创建的资源组，并为您的应用服务计划输入一个名称。
- en: Under **Operating System**, select **Linux**.
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **操作系统** 下，选择 **Linux**。
- en: Choose a pricing tier (e.g., **B1** for a basic plan).
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择定价层（例如，**B1** 基本计划）。
- en: Click **Review +** **create**.
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **审查 + 创建**。
- en: Creating an App Service plan in Azure is an essential step when deploying web
    apps, APIs, and other workloads using Azure App Services. The App Service plan
    defines the underlying infrastructure that powers your web app, API, or function
    app. It determines how your application is hosted, including the amount of CPU
    (processing power), memory (RAM), storage (disk space), and networking capacity
    it uses.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Azure 中创建应用服务计划是部署使用 Azure App Services 的 Web 应用、API 和其他工作负载时的一个重要步骤。应用服务计划定义了支持您的
    Web 应用、API 或函数应用的底层基础设施。它决定了您的应用程序如何托管，包括它使用的 CPU（处理能力）、内存（RAM）、存储（磁盘空间）和网络容量。
- en: 'By creating an App Service plan, you specify the resources and capacity needed
    to run your application, ensuring it has the necessary performance to handle the
    expected load. It directly influences the cost of running your application in
    Azure by giving the following two options:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过创建应用服务计划，您指定了运行应用程序所需的资源和容量，确保它具有处理预期负载所需的能力。它通过以下两个选项直接影响在 Azure 中运行应用程序的成本：
- en: '**Pricing tier**: The plan you choose determines the pricing tier, which affects
    the cost based on the resources allocated. Azure offers various pricing tiers,
    from free and shared tiers for small apps to premium tiers for high-performance,
    production-grade apps.'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定价层**：您选择的计划决定了定价层，这会影响基于分配的资源成本。Azure提供各种定价层，从小型应用的免费和共享层到高性能、生产级应用的 premium
    层。'
- en: '**Scaling options**: An App Service plan also defines the scaling options for
    your application. You can scale up (increase the size of the instance) or scale
    out (increase the number of instances) based on your application’s needs. Different
    pricing tiers offer different scaling capabilities.'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展选项**：应用服务计划还定义了您的应用的扩展选项。您可以根据应用的需求进行扩展（增加实例的大小）或扩展（增加实例的数量）。不同的定价层提供不同的扩展能力。'
- en: '*Figure 13**.2* shows how to create an App Service plan in Azure:'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图13*.2*展示了如何在Azure中创建应用服务计划：'
- en: '![Figure 13.2: Creating an App Service Plan in Azure](img/B09148_13_002.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图13.2：在Azure中创建应用服务计划](img/B09148_13_002.jpg)'
- en: 'Figure 13.2: Creating an App Service Plan in Azure'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2：在Azure中创建应用服务计划
- en: 'The next step is creating a web app:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建一个Web应用：
- en: In the Azure portal, search for `App Services` and select the top result.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Azure门户中，搜索`App Services`并选择最上面的结果。
- en: Click **Create** and select **Web App**.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**并选择**Web应用**。
- en: Choose your subscription, select your resource group, and enter a name for your
    web app. Make sure you have selected a unique name for your web app.
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的订阅，选择您的资源组，并为您的Web应用输入一个名称。确保您为您的Web应用选择了一个唯一的名称。
- en: For **Publish**, select **Code**.
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**发布**，选择**代码**。
- en: For the **Runtime stack**, select **Node 20 LTS**. (Select the node version
    you think is better for your needs).
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**运行时堆栈**，选择**Node 20 LTS**。（选择您认为最适合您需求的节点版本）。
- en: For **Operating System**, choose **Linux**.
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**操作系统**，选择**Linux**。
- en: Under **Region**, select the region closest to you or your users.
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**区域**下，选择离您或您的用户最近的位置。
- en: Under **App Service Plan**, select the plan you created earlier.
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**应用服务计划**下，选择您之前创建的计划。
- en: 'Click **Review + create** and then **Create**. See *Figure 13**.3*:'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**审查 + 创建**然后**创建**。见*图13*.3*：
- en: '![Figure 13.3: Creating a web app in Azure](img/B09148_13_003.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图13.3：在Azure中创建一个Web应用](img/B09148_13_003.jpg)'
- en: 'Figure 13.3: Creating a web app in Azure'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3：在Azure中创建一个Web应用
- en: 'Next, create an Azure Cosmos DB for the MongoDB API:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为MongoDB API创建一个Azure Cosmos DB：
- en: In the Azure portal, search for `Azure Cosmos DB` and select **Create**.
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Azure门户中，搜索`Azure Cosmos DB`并选择**创建**。
- en: Azure will ask you to select the type of resource, which will either be a requesting
    **unit database account** or **vCore cluster**. vCore Cluster is a recommended
    resource by Microsoft.
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure会要求您选择资源类型，这将是一个请求的**单元数据库账户**或**vCore集群**。vCore集群是微软推荐的一种资源。
- en: Under **API**, choose **Azure Cosmos DB** **for MongoDB**.
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**API**下，选择**Azure Cosmos DB** **用于MongoDB**。
- en: Enter your **Subscription**, **Resource Group**, **Account Name**, and other
    necessary details.
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的**订阅**、**资源组**、**账户名称**和其他必要详情。
- en: 'Click **Review + create** and then **Create**:'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**审查 + 创建**然后**创建**：
- en: '![Figure 13.4: Selecting Azure Cosmos DB for MongoDB](img/B09148_13_004.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图13.4：选择Azure Cosmos DB用于MongoDB](img/B09148_13_004.jpg)'
- en: 'Figure 13.4: Selecting Azure Cosmos DB for MongoDB'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4：选择Azure Cosmos DB用于MongoDB
- en: 'You can see the Azure Cosmos DB account creation page in the following figure:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下图中看到Azure Cosmos DB账户创建页面：
- en: '![Figure 13.5: The Azure Cosmos DB account creation page](img/B09148_13_005.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图13.5：Azure Cosmos DB账户创建页面](img/B09148_13_005.jpg)'
- en: 'Figure 13.5: The Azure Cosmos DB account creation page'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5：Azure Cosmos DB账户创建页面
- en: 'Finally, let us obtain a MongoDB connection string:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们获取一个MongoDB连接字符串：
- en: Once the Cosmos DB account is created, go to the **Overview** page.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了Cosmos DB账户，转到**概览**页面。
- en: Click on **Connection String** under the **Settings** section.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**设置**部分下点击**连接字符串**。
- en: Click the eye icon.
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击眼睛图标。
- en: 'Copy **Primary** **Connection String**:'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制**主** **连接字符串**：
- en: "![Figure 13.6:\uFEFF Connection string page in Azure](img/B09148_13_006.jpg)"
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图13.6：Azure中的连接字符串页面](img/B09148_13_006.jpg)'
- en: 'Figure 13.6: Connection string page in Azure'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.6：Azure中的连接字符串页面
- en: We’re done with resource obtaining. It is time for configuration.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了资源的获取。现在是配置的时候了。
- en: 'Now, let’s configure the Azure web app to use MongoDB. For that, navigate to
    your web app:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们配置Azure Web应用以使用MongoDB。为此，导航到您的Web应用：
- en: In the Azure portal, go to `MONGODB_URL`) and **Value** (paste the MongoDB connection
    string you copied earlier).
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Azure门户中，转到`MONGODB_URL`和**值**（粘贴您之前复制的MongoDB连接字符串）。
- en: Click **OK** and then **Save**.
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**然后**保存**。
- en: 'Finally, it’s time to prepare your Node.js application. Ensure your Node.js
    application is set up to read the MongoDB connection string from environment variables.
    Here are the steps to achieve it:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是时候准备您的Node.js应用程序了。确保您的Node.js应用程序已设置好，可以从环境变量中读取MongoDB连接字符串。以下是实现此目的的步骤：
- en: 'Go to the `src/config/config.js` file and change the `createConfig` function
    like so:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往`src/config/config.js`文件，并按照如下方式修改`createConfig`函数：
- en: '[PRE0]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we run our Node.js application, it automatically connects to a port number
    equal to `3001` (depending on what you encoded in the `.env` file). We updated
    the `.env` file by default to use `PORT=443`. Here is what it looks like:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们运行我们的Node.js应用程序时，它将自动连接到一个端口号等于`3001`（取决于您在`.env`文件中编码的内容）。我们默认更新了`.env`文件以使用`PORT=443`。它看起来是这样的：
- en: '[PRE1]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We also applied minor changes to the `src/index.js` file to support the `winston`
    library and to use the port from the process:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还对`src/index.js`文件进行了少量更改，以支持`winston`库并使用进程中的端口：
- en: '[PRE2]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you might guess, for both previous examples, we used `process.env`. Using
    `process.env.PORT` and `process.env.MONGODB_URL` in Node.js applications is a
    best practice for managing environment-specific configurations.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您所猜，对于前两个示例，我们使用了`process.env`。在Node.js应用程序中使用`process.env.PORT`和`process.env.MONGODB_URL`是管理特定于环境的配置的最佳实践。
- en: 'Node.js applications often need to run in different environments (development,
    testing, staging, production), each with its own set of configurations. Using
    environment variables allows you to customize behavior based on the environment
    without changing the code. Now, let’s take a closer look at the environment variables
    used in our code:'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Node.js应用程序通常需要在不同的环境中运行（开发、测试、预发布、生产），每个环境都有自己的配置集。使用环境变量允许您根据环境自定义行为，而无需更改代码。现在，让我们更详细地看看我们代码中使用的环境变量：
- en: '`process.env.PORT` is used to define the port number on which the Node.js application
    will listen for incoming requests. By using an environment variable for the port,
    you can easily run the application on different ports depending on the environment.
    For example, in a development environment, you might want to run it on port `3000`,
    while in production, the application might need to run on a port assigned by a
    hosting provider (e.g., Azure, Heroku). Cloud providers often assign dynamic ports
    to applications. By using `process.env.PORT`, your application can adapt to whatever
    port is assigned at runtime.'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process.env.PORT`用于定义Node.js应用程序将监听传入请求的端口号。通过使用端口号的环境变量，您可以轻松地在不同的端口上运行应用程序，具体取决于环境。例如，在开发环境中，您可能希望它在端口`3000`上运行，而在生产中，应用程序可能需要在一个由托管提供商（例如Azure、Heroku）分配的端口上运行。云提供商通常为应用程序分配动态端口。通过使用`process.env.PORT`，您的应用程序可以适应在运行时分配的任何端口。'
- en: '`process.env.MONGODB_URL`, on the other hand, is used to define the connection
    string for your MongoDB database. Storing sensitive information such as database
    connection strings in environment variables keeps them out of your source code,
    which is a security best practice. This prevents accidental exposure in VCSs (e.g.,
    Git). Different environments may use different databases or database servers.
    For example, a development environment might use a local MongoDB instance, while
    production uses a managed MongoDB service such as MongoDB Atlas. By using `process.env.MONGODB_URL`,
    you can easily switch between these without changing your code.'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，`process.env.MONGODB_URL`用于定义您的MongoDB数据库的连接字符串。将敏感信息，如数据库连接字符串存储在环境变量中，可以防止它们出现在源代码中，这是一种安全最佳实践。这可以防止在VCSs（例如Git）中意外泄露。不同的环境可能使用不同的数据库或数据库服务器。例如，开发环境可能使用本地MongoDB实例，而生产可能使用MongoDB
    Atlas等托管MongoDB服务。通过使用`process.env.MONGODB_URL`，您可以轻松地在这些之间切换，而无需更改代码。
- en: 'After successful deployment, Azure should run your application. That is why
    you need to update the `package.json` file to have the `start` script, like the
    following:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署成功后，Azure应该运行您的应用程序。这就是为什么您需要更新`package.json`文件以包含`start`脚本，如下所示：
- en: '[PRE3]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'But how about the package installation process? As you know, we don’t publish
    `node_modules`, but it should be on the server to run your application properly.
    To handle node module installation and execute the start command from `package.json`,
    you can follow the following steps:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 但关于包安装过程呢？正如您所知，我们不发布 `node_modules`，但它应该位于服务器上以正确运行您的应用程序。要处理node模块安装并从 `package.json`
    执行启动命令，您可以按照以下步骤操作：
- en: Go to **App Services** from the Azure portal.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Azure门户转到**应用服务**。
- en: Select your web app.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的Web应用程序。
- en: Navigate to **Settings**.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**设置**。
- en: Select **Configuration**.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**配置**。
- en: Go to **General Settings**.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**常规设置**。
- en: 'Go to `npm install &&` `npm start`:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 `npm install && npm start`：
- en: "![Figure 13.7:\uFEFF Startup command for an Azure web app](img/B09148_13_007.jpg)"
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图13.7：Azure Web应用的启动命令](img/B09148_13_007.jpg)'
- en: 'Figure 13.7: Startup command for an Azure web app'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.7：Azure Web应用的启动命令
- en: Of course, this is not the only option for running Node.js applications properly
    but for this example, it is more than enough.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这并不是运行Node.js应用程序的唯一正确方式，但在这个例子中，这已经足够了。
- en: Now, everything is ready. We can implement our pipeline using GitHub Actions.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一切准备就绪。我们可以使用GitHub Actions实现我们的管道。
- en: Working with GitHub Actions
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GitHub Actions
- en: '**GitHub Actions** is a powerful feature of GitHub that allows you to automate,
    customize, and execute software development workflows directly in your GitHub
    repository. It’s designed to help you build, test, and deploy your code right
    from GitHub. GitHub Actions is a tool that helps you automate tasks within your
    software development life cycle. For our case, we’ll create a workflow that automatically
    deploys your Node.js microservice to Azure whenever you push changes to the main
    branch.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**GitHub Actions**是GitHub的一个强大功能，允许您直接在GitHub仓库中自动化、自定义和执行软件开发工作流程。它旨在帮助您从GitHub构建、测试和部署代码。GitHub
    Actions是一个帮助您在软件开发生命周期内自动执行任务的工具。在我们的案例中，我们将创建一个工作流程，每当您向主分支推送更改时，它将自动将您的Node.js微服务部署到Azure。'
- en: 'First, create an account if you haven’t yet. After account creation, create
    a repository that will store your source code. Next, let’s look at some key features
    of GitHub Actions:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果您还没有，请创建一个账户。账户创建后，创建一个将存储您的源代码的仓库。接下来，让我们看看GitHub Actions的一些关键特性：
- en: '**Automation of workflows**: GitHub Actions enables you to automate tasks such
    as running tests, building applications, deploying to cloud services, and more
    whenever specific events occur in your repository (e.g., a push to a branch, a
    pull request, or the creation of an issue). You can also use GitHub Actions to
    run linting tools or static analysis on your code, ensuring that code quality
    standards are maintained.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作流程自动化**：GitHub Actions使您能够在仓库中发生特定事件时自动执行任务，例如运行测试、构建应用程序、部署到云服务等（例如，向分支推送、拉取请求或创建问题）。您还可以使用GitHub
    Actions在您的代码上运行linting工具或静态分析，确保代码质量标准得到维护。'
- en: '`.github/workflows/` directory of your repository. These files describe the
    automated processes you want to run.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的仓库的 `.github/workflows/` 目录中。这些文件描述了您想要运行的自动化流程。
- en: '**Event-driven**: Actions can be triggered by various GitHub events, such as
    pushes, pull requests, issue creation, or on a scheduled basis. This flexibility
    allows you to create workflows that are finely tuned to your development process.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件驱动**：动作可以由各种GitHub事件触发，例如推送、拉取请求、问题创建或按计划执行。这种灵活性允许您创建精细调整到您开发流程的工作流程。'
- en: '**Built-in CI/CD**: GitHub Actions provides built-in support for CI and CD.
    You can use it to automatically test your code and deploy it to production or
    a cloud service such as AWS, Azure, or Heroku after every commit.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内置的CI/CD**：GitHub Actions提供了内置的持续集成和持续部署支持。您可以使用它在每个提交后自动测试您的代码并将其部署到生产环境或AWS、Azure或Heroku等云服务。'
- en: '**Reusable actions**: You can reuse actions created by the community or share
    your own actions across projects. GitHub has a marketplace where you can find
    actions for various tasks such as setting up languages, deploying to cloud services,
    and more.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重用动作**：您可以重用社区创建的动作或在不同项目间共享您自己的动作。GitHub有一个市场，您可以在其中找到用于设置语言、部署到云服务等各种任务的动作。'
- en: '**Secrets management**: You can securely manage and use sensitive information
    such as API keys, tokens, and other credentials in your workflows without exposing
    them in your code.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**秘密管理**：您可以在工作流程中安全地管理和使用敏感信息，如API密钥、令牌和其他凭证，而无需在代码中暴露它们。'
- en: '**Scheduling tasks**: You can use GitHub Actions to run scripts or maintenance
    tasks, such as nightly builds or database backups, on a schedule.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调度任务**：您可以使用 GitHub Actions 按计划运行脚本或维护任务，例如夜间构建或数据库备份。'
- en: GitHub Actions integrates seamlessly with other GitHub features, such as *Issues*,
    *Pull Requests*, and *Packages*, making it easy to create workflows that encompass
    the full development life cycle.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 与其他 GitHub 功能无缝集成，例如 *问题*、*拉取请求*和*包*，这使得创建涵盖整个开发生命周期的流程变得容易。
- en: Now let’s look at Secrets in GitHub Actions.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看 GitHub Actions 中的密钥。
- en: Understanding Secrets
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解密钥
- en: '**Secrets** in GitHub Actions are encrypted environment variables that you
    use in your workflows. They are stored securely and can be accessed within your
    workflows without exposing sensitive information.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**GitHub Actions 中的密钥**是加密的环境变量，您在您的流程中使用它们。它们被安全地存储，可以在您的流程中访问，而不会暴露敏感信息。'
- en: 'To securely pass your Azure credentials (such as the publish profile) to GitHub
    Actions, you need to add them as **Secrets**. Here is how you can do it:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要安全地将您的 Azure 凭据（如发布配置文件）传递给 GitHub Actions，您需要将它们作为**密钥**添加。以下是您可以这样做的方法：
- en: Go to the Azure portal and navigate to your web app.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 Azure 门户并导航到您的网络应用。
- en: On the web app’s **Overview** page, look for the **Get Publish Profile** button
    and download the publish profile file. It’s an XML file that contains the credentials
    your GitHub Actions workflow will use to deploy the app. Don’t forget to change
    **Platform settings** from your Azure web app’s **Settings-Configuration** tab.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网络应用的**概览**页面，寻找**获取发布配置文件**按钮并下载发布配置文件文件。它是一个包含 GitHub Actions 工作流程将用于部署应用的凭据的
    XML 文件。别忘了将您的 Azure 网络应用的**设置-配置**选项卡中的**平台设置**进行更改。
- en: Once you do it, you will be able to download the publish profile (*Figure 13**.8*).
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您这样做，您将能够下载发布配置文件（*图 13**.8*）。
- en: Now go to the `<web_app_name>.PublishSettings` (it is `account-microservice-webapp.PublishSettings`
    in our case).
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到 `<web_app_name>.PublishSettings`（在我们的例子中是 `account-microservice-webapp.PublishSettings`）。
- en: Providing an Azure publish profile to GitHub Actions is essential for automating
    the deployment of your application to Azure. The publish profile contains credentials
    that GitHub Actions uses to authenticate and authorize the deployment to your
    Azure resources. This ensures that only authorized processes can deploy your application.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 向 GitHub Actions 提供Azure发布配置文件对于自动化将您的应用程序部署到 Azure 是必不可少的。发布配置文件包含 GitHub Actions
    用于验证和授权部署到您的 Azure 资源的凭据。这确保只有授权进程可以部署您的应用程序。
- en: It also includes all the necessary settings for deploying your application to
    a specific Azure App Service or other resources. It simplifies the configuration,
    avoiding manually defining all the deployment details in your workflow.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 它还包括将您的应用程序部署到特定 Azure App Service 或其他资源的所有必要设置。它简化了配置，避免了在您的流程中手动定义所有部署细节。
- en: 'Using a publish profile in GitHub Actions allows you to securely store and
    manage the credentials as secrets within your GitHub repository. This prevents
    exposing sensitive information in your workflow files. Here is what platform settings
    should look like to download the publish profile:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub Actions 中使用发布配置文件允许您在 GitHub 仓库中安全地存储和管理凭据作为密钥。这可以防止在您的流程文件中暴露敏感信息。以下是下载发布配置文件的平台设置应如何看起来：
- en: "![Figure 13.8:\uFEFF Platform settings to download the publish profile](img/B09148_13_008.jpg)"
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.8：下载发布配置文件的平台设置](img/B09148_13_008.jpg)'
- en: 'Figure 13.8: Platform settings to download the publish profile'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.8：下载发布配置文件的平台设置
- en: 'Let’s create Secrets in GitHub:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 GitHub 中创建密钥：
- en: Go to your GitHub repository.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您的 GitHub 仓库。
- en: Navigate to **Settings** | **Secrets** | **Actions**.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**设置** | **密钥** | **动作**。
- en: 'Add the following secrets:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下密钥：
- en: '`AZURE_WEBAPP_PUBLISH_PROFILE`: The entire contents of the publish profile
    from Azure (*Figure 13.9*).'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AZURE_WEBAPP_PUBLISH_PROFILE`：Azure 发布配置文件的全部内容（*图 13.9*）。'
- en: '`MONGODB_URL`: At this point, you should paste the MongoDB connection string
    that you copied earlier. If you have not yet retrieved it, please do so now before
    continuing. Here is how we can do it:'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MONGODB_URL`：在此阶段，您应该粘贴您之前复制的 MongoDB 连接字符串。如果您还没有检索它，请在继续之前现在就做。以下是我们可以这样做的方法：'
- en: "![Figure 13.9:\uFEFF Adding the Azure web app’s publish profile](img/B09148_13_009.jpg)"
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.9：添加 Azure 网络应用的发布配置文件](img/B09148_13_009.jpg)'
- en: 'Figure 13.9: Adding the Azure web app’s publish profile'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.9：添加 Azure 网络应用的发布配置文件
- en: Using Secrets is crucial because it prevents sensitive data from being exposed
    in your repository’s code or logs. Only authorized workflows can access these
    secrets.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Secrets 是至关重要的，因为它可以防止敏感数据在您的仓库代码或日志中暴露。只有授权的工作流程可以访问这些秘密。
- en: We have now provided all the secret information to GitHub, so let’s focus on
    building a simple pipeline using GitHub Actions.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已将所有秘密信息提供给 GitHub，因此让我们专注于使用 GitHub Actions 构建一个简单的 pipeline。
- en: Building a pipeline
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建pipeline
- en: While GitHub Actions doesn’t explicitly use the term **pipeline** in its documentation,
    a pipeline is a broader concept that represents the sequence of processes that
    code goes through from development to production. In many CI/CD tools, a pipeline
    typically consists of multiple stages (such as build, test, and deploy) that are
    executed in a specific order.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 GitHub Actions 在其文档中并未明确使用 **pipeline** 一词，但 pipeline 是一个更广泛的概念，它代表了代码从开发到生产的整个过程序列。在许多
    CI/CD 工具中，pipeline 通常由多个阶段（如构建、测试和部署）组成，这些阶段按照特定的顺序执行。
- en: A `.github/workflows/` directory of a repository. Workflows are triggered by
    events, such as pushes to the repository, pull requests, or scheduled events.
    Each workflow can have multiple jobs that run in parallel or sequentially, and
    each job can have multiple steps that execute commands or actions.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库的 `.github/workflows/` 目录。工作流程由事件触发，例如仓库的推送、拉取请求或计划事件。每个工作流程可以有多个并行或顺序执行的作业，每个作业可以有多个执行命令或操作的步骤。
- en: 'A workflow is defined in a `.yml` file. Here is how we define it:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流程是在 `.yml` 文件中定义的。以下是我们的定义方式：
- en: To create this file, you should open your web browser and go to your GitHub
    repository. Inside your repository, click on the **Add file** button, then choose
    **Create** **new file**.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建此文件，您应该打开您的网页浏览器并访问您的 GitHub 仓库。在您的仓库内，点击 **添加文件** 按钮，然后选择 **创建** **新文件**。
- en: Name the file `.github/workflows/azure-deploy.yml`. This will create the necessary
    directory structure and file. Commit the `azure-deploy.yml` file and push it to
    your GitHub repository.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为 `.github/workflows/azure-deploy.yml`。这将创建必要的目录结构和文件。提交 `azure-deploy.yml`
    文件并将其推送到您的 GitHub 仓库。
- en: 'The `azure-deploy.yml` file consists of multiple steps. For a more complete
    example, check our GitHub repository (`Ch13/.github/workflows/azure-deploy.yml`).
    Here is our first step:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`azure-deploy.yml` 文件由多个步骤组成。要查看更完整的示例，请检查我们的 GitHub 仓库（`Ch13/.github/workflows/azure-deploy.yml`）。以下是我们的第一步：'
- en: '[PRE4]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The GitHub Actions workflow file, named `CI/CD Pipeline`, is set up to automatically
    trigger whenever there is a push to the `main` branch of the repository. This
    means that any changes committed and pushed to the `main` branch will activate
    the defined workflow. The `on: push:` section specifies the event that starts
    the workflow – in this case, a push event to the `main` branch. This setup is
    commonly used for CI/CD, ensuring that updates to the `main` branch automatically
    go through the build, test, and deployment processes defined in the workflow.'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'GitHub Actions 工作流程文件，命名为 `CI/CD Pipeline`，被设置为在仓库的 `main` 分支有推送时自动触发。这意味着任何提交并推送到
    `main` 分支的更改都将激活定义的工作流程。`on: push:` 部分指定了启动工作流程的事件——在这种情况下，是推送到 `main` 分支的事件。这种设置通常用于
    CI/CD，确保 `main` 分支的更新自动通过工作流程中定义的构建、测试和部署过程。'
- en: 'Let’s continue by discussing the next lines in our workflow file:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们继续讨论工作流程文件中的下一行：
- en: '[PRE5]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This part of the GitHub Actions workflow defines a job named `security-scan`,
    which is responsible for running a security scan on your code base. The job will
    execute on the latest version of Ubuntu, as specified by `runs-on: ubuntu-latest`.'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '此部分 GitHub Actions 工作流程定义了一个名为 `security-scan` 的作业，该作业负责对您的代码库进行安全扫描。该作业将在由
    `runs-on: ubuntu-latest` 指定的最新版本的 Ubuntu 上执行。'
- en: Within this job, several steps are outlined. The first step, `Checkout code`,
    uses the `actions/checkout@v3` action to clone the repository’s code into the
    workflow’s environment. Next, the `Set up Node.js` step sets up Node.js version
    20 in the environment using the `actions/setup-node@v3` action. After the environment
    is ready, the `Install dependencies` step runs `npm install` to install all required
    Node.js packages. Finally, the `Run npm audit` step executes the `npm audit --audit-level=high`
    command, which checks for security vulnerabilities in the installed packages,
    focusing on those with a high severity level. This job ensures that your application
    is scanned for critical security issues as part of the CI/CD pipeline.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此作业中，概述了几个步骤。第一步是 `Checkout code`，使用 `actions/checkout@v3` 动作将代码库的代码克隆到工作流程环境中。接下来，`Set
    up Node.js` 步骤使用 `actions/setup-node@v3` 动作在环境中设置 Node.js 版本 20。环境准备就绪后，`Install
    dependencies` 步骤运行 `npm install` 以安装所有必需的 Node.js 包。最后，`Run npm audit` 步骤执行 `npm
    audit --audit-level=high` 命令，该命令检查已安装包中的安全漏洞，重点关注严重级别高的漏洞。此作业确保在 CI/CD 管道中扫描应用程序以查找关键安全问题。
- en: 'The following code of the GitHub Actions workflow defines a job called `check-dependencies`,
    which is designed to check whether any dependencies in your project are outdated.
    The job will run on the latest version of Ubuntu, as indicated by `runs-on: ubuntu-latest`:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '以下 GitHub Actions 工作流程的代码定义了一个名为 `check-dependencies` 的作业，该作业旨在检查项目中是否有任何依赖项过时。该作业将在最新版本的
    Ubuntu 上运行，如 `runs-on: ubuntu-latest` 所示：'
- en: '[PRE6]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `needs: security-scan` line specifies that this job will only run after
    the `security-scan` job has successfully completed. This creates a dependency
    between the two jobs, ensuring that the security scan must pass before checking
    for outdated dependencies.'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`needs: security-scan` 行指定了此作业只有在 `security-scan` 作业成功完成后才会运行。这在这两个作业之间创建了一个依赖关系，确保在检查过时的依赖项之前，安全扫描必须通过。'
- en: The job contains several steps. First, the `Checkout code` step uses the `actions/checkout@v3`
    action to clone the repository’s code into the environment. Then, the `Install
    dependencies` step runs `npm install` to install all the necessary Node.js packages
    for the project. Finally, the `Check for outdated dependencies` step runs `npm
    outdated`, which lists any dependencies that have newer versions available. This
    job helps maintain the health of your project by ensuring that you are aware of
    any outdated packages that might need updating.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作业包含几个步骤。首先，`Checkout code` 步骤使用 `actions/checkout@v3` 动作将代码库的代码克隆到环境中。然后，`Install
    dependencies` 步骤运行 `npm install` 以安装项目所需的所有 Node.js 包。最后，`Check for outdated dependencies`
    步骤运行 `npm outdated`，列出任何有新版本可用的依赖项。此作业通过确保您了解可能需要更新的任何过时包，帮助维护项目的健康状态。
- en: 'The following part of the GitHub Actions workflow defines a job named `test`,
    which is responsible for running tests on your code base. The job runs on the
    latest version of Ubuntu, as specified by `runs-on: ubuntu-latest`:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '以下 GitHub Actions 工作流程的部分定义了一个名为 `test` 的作业，该作业负责在代码库上运行测试。该作业在最新版本的 Ubuntu
    上运行，如 `runs-on: ubuntu-latest` 所指定：'
- en: '[PRE7]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `needs: check-dependencies` line indicates that this job will only start
    after the `check-dependencies` job has successfully completed. This ensures that
    all dependencies are up-to-date before tests are run, which is important for ensuring
    consistency and reliability in your testing process.'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`needs: check-dependencies` 行表示此作业只有在 `check-dependencies` 作业成功完成后才会启动。这确保在运行测试之前，所有依赖项都是最新的，这对于确保测试过程的一致性和可靠性非常重要。'
- en: The job consists of several steps. First, the `Checkout code` step uses the
    `actions/checkout@v3` action to clone the repository’s code into the workflow
    environment. Then, the `Set up Node.js` step configures Node.js version 20 in
    the environment using the `actions/setup-node@v3` action. Following this, the
    `Install dependencies` step runs `npm install` to install the necessary packages
    for the project. Finally, the `Run tests` step executes the `npm test` command,
    which runs the test suite defined in your project. This job ensures that your
    code is tested in a controlled environment, catching any issues before changes
    are merged or deployed.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作业由几个步骤组成。首先，`Checkout code` 步骤使用 `actions/checkout@v3` 动作将代码库的代码克隆到工作流程环境中。然后，`Set
    up Node.js` 步骤使用 `actions/setup-node@v3` 动作在环境中配置 Node.js 版本 20。接着，`Install dependencies`
    步骤运行 `npm install` 以安装项目所需的所有包。最后，`Run tests` 步骤执行 `npm test` 命令，该命令运行项目中定义的测试套件。此作业确保在代码合并或部署之前，在受控环境中测试代码，以捕获任何问题。
- en: 'The following part of the workflow is responsible for deploying your application
    to the Azure web app after the tests have been completed. The job runs on an Ubuntu-based
    virtual machine provided by GitHub Actions. Before deployment, the workflow checks
    out the latest version of your code to ensure that the most recent changes are
    included:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作流程的以下部分负责在测试完成后将您的应用程序部署到 Azure 网站应用程序。作业在 GitHub Actions 提供的基于 Ubuntu 的虚拟机上运行。在部署之前，工作流程会检出您代码的最新版本，以确保包含最新的更改：
- en: '[PRE8]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In preparation for deployment, the workflow cleans up unnecessary files and
    directories, such as the `.git` folder (which contains the repository’s Git history),
    the `.github` folder (used for GitHub-specific configurations), and other temporary
    or internal folders that aren’t needed in the deployed application. This cleanup
    helps reduce the deployment package size and eliminates any files that aren’t
    required for the application to run.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在部署准备过程中，工作流程会清理不必要的文件和目录，例如 `.git` 文件夹（包含存储库的 Git 历史）、`.github` 文件夹（用于 GitHub
    特定配置）以及部署应用程序中不需要的其他临时或内部文件夹。这种清理有助于减少部署包的大小，并消除应用程序运行不需要的任何文件。
- en: Finally, the workflow uses the `azure/webapps-deploy@v3` action to deploy the
    application to the specified Azure web app. The `app-name` configuration is set
    to match the site name in your Azure publish profile, and the `publish-profile`
    secret contains the necessary credentials. The package to be deployed is set to
    the entire workspace, ensuring that the cleaned-up code is what gets deployed.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，工作流程使用 `azure/webapps-deploy@v3` 动作将应用程序部署到指定的 Azure 网站应用程序。`app-name` 配置设置为与
    Azure 发布配置文件中的站点名称匹配，而 `publish-profile` 机密包含必要的凭据。要部署的包设置为整个工作区，确保部署的是清理后的代码。
- en: 'Once you push your changes, GitHub Actions will automatically trigger the workflow.
    Monitor the deployment process in the **Actions** tab of your GitHub repository:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您推送了更改，GitHub Actions 将自动触发工作流程。在您的 GitHub 仓库的 **操作** 选项卡中监控部署过程：
- en: "![Figure 13.10:\uFEFF GitHub Actions workflow](img/B09148_13_010.jpg)"
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.10：GitHub Actions 工作流程](img/B09148_13_010.jpg)'
- en: 'Figure 13.10: GitHub Actions workflow'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.10：GitHub Actions 工作流程
- en: 'Here is what success deployment logs look like:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这是成功部署日志的示例：
- en: '[PRE9]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once deployment succeeds, you can check the deployed files using a simple FTPS
    connection. To connect to your server using an FTP client, you can use any FTP
    client tools you want. We use FileZilla, which is free and easy to use. You can
    download it from [https://filezilla-project.org/](https://filezilla-project.org/).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦部署成功，您可以使用简单的 FTPS 连接检查已部署的文件。要使用 FTP 客户端连接到您的服务器，您可以使用您想要的任何 FTP 客户端工具。我们使用
    FileZilla，它是免费且易于使用的。您可以从 [https://filezilla-project.org/](https://filezilla-project.org/)
    下载它。
- en: 'To find FTP credentials for your server, follow these steps:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到您的服务器的 FTP 凭据，请按照以下步骤操作：
- en: Go to the Azure portal.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 Azure 门户。
- en: Select **App Services**.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **应用服务**。
- en: Find your web app.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到您的网站应用程序。
- en: Got to **Deployment** | **Deployment Center**
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 **部署** | **部署中心**
- en: 'Select the **FTPS credentials** tab. See *Figure 13**.11*:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **FTPS 凭据** 选项卡。参见 *图 13.11*：
- en: "![Figure 13.11:\uFEFF FTPS credentials tab for an Azure web app](img/B09148_13_011.jpg)"
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.11：Azure 网站应用程序的 FTPS 凭据选项卡](img/B09148_13_011.jpg)'
- en: 'Figure 13.11: FTPS credentials tab for an Azure web app'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.11：Azure 网站应用程序的 FTPS 凭据选项卡
- en: 'Now you can use these credentials to connect to the server. Here is what it
    looks like after connecting and navigating to the `wwwroot` folder:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用这些凭据连接到服务器。以下是连接并导航到 `wwwroot` 文件夹后的样子：
- en: "![Figure 13.12:\uFEFF FTP view of the deployed repository](img/B09148_13_012.jpg)"
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.12：已部署存储库的 FTP 视图](img/B09148_13_012.jpg)'
- en: 'Figure 13.12: FTP view of the deployed repository'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.12：已部署存储库的 FTP 视图
- en: 'Now we’re ready to test whether things are working or not. As you might guess,
    after investigating the Account microservice’s source code, we added a simple
    middleware to `app.js`:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好测试事情是否正常工作。正如您可能猜到的，在调查 Account 微服务的源代码后，我们在 `app.js` 中添加了一个简单的中间件：
- en: '[PRE10]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Just go to the Azure portal, select your web app, and in the **Overview** section,
    you will find the default domain:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 只需前往 Azure 门户，选择您的网站应用程序，然后在 **概览** 选项卡中，您将找到默认域名：
- en: "![Figure 13.13:\uFEFF Domains section for an Azure web app](img/B09148_13_013.jpg)"
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.13：Azure 网站应用程序的域名选项卡](img/B09148_13_013.jpg)'
- en: 'Figure 13.13: Domains section for an Azure web app'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.13：Azure 网站应用程序的域名选项卡
- en: 'Open any browser and type `<Default_domain>/welcome` as the URL:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 打开任何浏览器，将 `<Default_domain>/welcome` 作为 URL 输入：
- en: "![Figure 13.14:\uFEFF Welcome page for the deployed Node.js application](img/B09148_13_014.jpg)"
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.14：已部署 Node.js 应用程序的欢迎页面](img/B09148_13_014.jpg)'
- en: 'Figure 13.14: Welcome page for the deployed Node.js application'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.14：已部署 Node.js 应用程序的欢迎页面
- en: 'To test whether it is possible to connect to MongoDB and create account information,
    follow these steps:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试是否可以连接到 MongoDB 并创建账户信息，请按照以下步骤操作：
- en: Open Postman.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Postman。
- en: Click on the **+** button to create a new tab.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+**按钮创建新标签页。
- en: Select `<default_domain>/v1/accounts` template (it is `https://account-microservice-webapp.azurewebsites.net/v1/accounts`
    for us).
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `<default_domain>/v1/accounts` 模板（对我们来说，它是 `https://account-microservice-webapp.azurewebsites.net/v1/accounts`）。
- en: Go to the **Body** section and select **raw** | **Json**.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入**正文**部分并选择**raw** | **Json**。
- en: Paste your payload to create an account and click **Send**.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的有效负载粘贴以创建账户，然后点击**发送**。
- en: 'Here is what it looks like for us:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们看到的样子：
- en: "![Figure 13.15:\uFEFF Creating an account using Postman](img/B09148_13_015.jpg)"
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.15：使用 Postman 创建账户](img/B09148_13_015.jpg)'
- en: 'Figure 13.15: Creating an account using Postman'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.15：使用 Postman 创建账户
- en: 'To test whether it is possible to retrieve account information, follow these
    steps:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试是否可以检索账户信息，请按照以下步骤操作：
- en: Open Postman.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Postman。
- en: Click on the **+** button to create a new tab.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+**按钮创建新标签页。
- en: Select `<default_domain>/v1/accounts` template (it is `https://account-microservice-webapp.azurewebsites.net/v1/accounts`
    for us).
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `<default_domain>/v1/accounts` 模板（对我们来说，它是 `https://account-microservice-webapp.azurewebsites.net/v1/accounts`）。
- en: Click **Send**.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**发送**。
- en: 'Here is what it looks like for us:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们看到的样子：
- en: "![Figure 13.16:\uFEFF Retrieving account information](img/B09148_13_016.jpg)"
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.16：检索账户信息](img/B09148_13_016.jpg)'
- en: 'Figure 13.16: Retrieving account information'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.16：检索账户信息
- en: In this section, we explored the process of deploying an application to Azure
    and testing its functionalities. We walked through how to verify that everything
    is working as expected using Postman, ensuring your application is ready for production
    environments. Now you have a solid understanding of how to deploy and validate
    your microservice in the cloud.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了将应用程序部署到 Azure 并测试其功能的过程。我们介绍了如何使用 Postman 验证一切是否按预期工作，确保您的应用程序已准备好投入生产环境。现在，您已经对如何在云中部署和验证微服务有了坚实的理解。
- en: Summary
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we embarked on a comprehensive exploration of CI/CD processes,
    emphasizing their critical role in modern software development. We began by understanding
    the fundamentals of CI and CD and how they streamline the process of integrating
    and deploying code changes.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们全面探索了 CI/CD 流程，强调了它们在现代软件开发中的关键作用。我们首先理解了 CI 和 CD 的基础知识以及它们如何简化代码更改的集成和部署过程。
- en: Our journey continued with an in-depth look at working with Azure Cloud, where
    we discussed how to leverage its robust infrastructure for deploying and managing
    applications. We then delved into GitHub Actions, a powerful tool for automating
    workflows, enabling us to build, test, and deploy our code efficiently.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的旅程继续深入探讨与 Azure Cloud 一起工作，我们讨论了如何利用其强大的基础设施来部署和管理应用程序。然后我们深入研究了 GitHub Actions，这是一个强大的自动化工作流程的工具，使我们能够高效地构建、测试和部署我们的代码。
- en: Most of the chapter was dedicated to building a CI/CD pipeline. We walked through
    the steps necessary to create a seamless and automated pipeline, ensuring that
    our applications are always in a state ready for deployment.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的大部分内容都致力于构建 CI/CD 管道。我们介绍了创建无缝和自动化管道所需的步骤，确保我们的应用程序始终处于就绪状态，以便部署。
- en: In this book, we have covered everything you need to start building microservices
    with JavaScript. From designing the basic structure to deploying and monitoring
    your services, each chapter has given you practical steps and knowledge to help
    you create flexible and efficient applications. Now, you’re ready to take on real
    projects using microservices, which can make your systems easier to scale, update,
    and manage.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们涵盖了您开始使用 JavaScript 构建微服务所需的一切。从设计基本结构到部署和监控服务，每一章都为您提供了实用的步骤和知识，帮助您创建灵活高效的应用程序。现在，您已经准备好使用微服务承担真实项目，这可以使您的系统更容易扩展、更新和管理。
- en: However, remember that microservices are not a silver bullet. The best design
    depends on many factors, including the size of your project, team structure, and
    business needs. As you continue learning and practicing, stay curious and keep
    in mind that technology is always changing. Enjoy your journey in the world of
    microservices!
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请记住微服务并非万能良药。最佳设计取决于许多因素，包括您项目的规模、团队结构和业务需求。随着您继续学习和实践，保持好奇心，并牢记技术总是在变化。享受您在微服务世界中的旅程吧！
- en: Keep going and may you code for a lifetime. Until we meet again.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 继续前行，愿您终身编码。直到我们再次相遇。
