- en: Chapter 1. Introduction to Node.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。Node.js简介
- en: 'Node.js has ushered in the age of server-side JavaScript, the next logical
    step from the renaissance that client-side JavaScript has experienced over the
    last few years. While Node.js is not the first server-side JavaScript implementation,
    it has certainly become the most popular. By leveraging the best features of JavaScript
    as a language and nurturing a vibrant community, Node.js has become a tremendously
    popular platform and framework, with no signs of slowing down. A great description
    of what Node is can be found at [http://nodejs.org/](http://nodejs.org/):'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js已经开启了服务器端JavaScript的时代，这是客户端JavaScript在过去几年中经历的复兴的下一个逻辑步骤。虽然Node.js不是第一个服务器端JavaScript实现，但它肯定成为了最受欢迎的。通过利用JavaScript作为一种语言的最佳特性并培养一个充满活力的社区，Node.js已经成为一个非常受欢迎的平台和框架，而且没有放缓的迹象。关于Node是什么的很好描述可以在[http://nodejs.org/](http://nodejs.org/)找到：
- en: Node.js is a platform built on Chrome's JavaScript runtime for easily building
    fast, scalable network applications. Node.js uses an event-driven, non-blocking
    I/O model that makes it lightweight and efficient, perfect for data-intensive
    real-time applications that run across distributed devices.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Node.js是建立在Chrome的JavaScript运行时之上的平台，用于轻松构建快速、可扩展的网络应用程序。Node.js使用事件驱动的、非阻塞的I/O模型，使其轻量高效，非常适合在分布式设备上运行的数据密集型实时应用程序。
- en: History of Node.js
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js的历史
- en: The project began as the brain-child of Ryan Dahl back in 2009\. At JSConf.eu
    (a conference held annually in Europe) that year, he made his presentation and
    changed the face of JavaScript development. His speech included an impressive
    demonstration of a complete IRC server that had been written in roughly 400 lines
    of JavaScript. During his presentation, he outlined why he started the project,
    why JavaScript became such an integral part of it, and what goals he sought to
    accomplish along the way in the field of server programming – particularly with
    regards to how we deal with input and output (I/O).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目始于2009年，是Ryan Dahl的创意。在那一年的JSConf.eu（欧洲每年举办的会议）上，他做了演讲，改变了JavaScript开发的面貌。他的演讲包括了一个完整的IRC服务器的令人印象深刻的演示，该服务器用大约400行JavaScript编写。在他的演讲中，他概述了为什么开始这个项目，为什么JavaScript成为其中一个重要部分，以及他在服务器编程领域中希望实现的目标，特别是关于我们如何处理输入和输出（I/O）。
- en: Later that year, the **npm** project began, with the goal of managing packages
    for Node.js applications, as well as creating a publicly available registry for
    sharing code between Node.js developers. As of version 0.6.3 of Node.js, npm is
    deployed and installed alongside Node.js, making it the de facto package manager.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 那一年晚些时候，**npm**项目开始了，其目标是管理Node.js应用程序的软件包，并创建一个公开可用的注册表，供Node.js开发人员之间共享代码。截至Node.js的0.6.3版本，npm已经部署并与Node.js一起安装，成为事实上的软件包管理器。
- en: How Node.js differs?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js的不同之处？
- en: What makes Node.js different from other platforms is in how it approaches I/O.
    It uses an event-loop in conjunction with asynchronous I/O, which allows it to
    achieve a high level of concurrency with a light footprint.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js与其他平台的不同之处在于它如何处理I/O。它使用事件循环与异步I/O相结合，这使得它能够以轻量级的方式实现高并发性。
- en: 'Typically, when a program needs some sort of external input, it does so in
    a synchronous fashion. The following line of code should be very familiar to any
    programmer:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当程序需要某种外部输入时，它会以同步的方式进行。以下代码行对任何程序员来说应该非常熟悉：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'All we are doing here is querying a SQL database for a list of all users, and
    then we are printing out the first user''s name. When querying a database like
    this, there are many intermediary steps that need to be taken, such as:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的一切就是查询SQL数据库中所有用户的列表，然后打印出第一个用户的名字。在查询这样的数据库时，需要采取许多中间步骤，例如：
- en: Opening a connection to the database server.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开到数据库服务器的连接。
- en: Transmitting the request over the network to that server.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将请求通过网络传输到该服务器。
- en: The server itself needs to process the request after receiving it.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器本身需要在接收到请求后处理该请求。
- en: The server must transmit the response back over the network to our application.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器必须通过网络将响应传输回我们的应用程序。
- en: 'This list does not cover all the specifics, as there are many more factors
    than are necessary for the point to be made. By looking at our source code, this
    is treated as an instantaneous action, but we know better. We often neglect this
    wasted time because it is so fast that we don''t notice it happening. Consider
    the following table:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表并没有涵盖所有的细节，因为有比必要的要点更多的因素。通过查看我们的源代码，这被视为瞬时操作，但我们知道得更清楚。我们经常忽视这种浪费的时间，因为它发生得如此之快，以至于我们没有注意到它的发生。考虑以下表格：
- en: '| The Cost of I/O |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| I/O的成本 |'
- en: '| --- |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| L1-cache | 3 cycles |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| L1缓存 | 3个周期 |'
- en: '| L2-cache | 14 cycles |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| L2缓存 | 14个周期 |'
- en: '| RAM | 250 cycles |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| RAM | 250个周期 |'
- en: '| Disk | 41,000,000 cycles |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 磁盘 | 41,000,000个周期 |'
- en: '| Network | 240,000,000 cycles |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 网络 | 240,000,000个周期 |'
- en: Each I/O operation has a cost, which is paid directly in a program that uses
    synchronous I/O. There could easily be millions and millions of clock cycles that
    occur before the program can progress.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 每个I/O操作都有一个成本，在使用同步I/O的程序中直接支付。在程序可以继续进行之前，可能会有数百万甚至数千万个时钟周期发生。
- en: When writing an application server, a program like this can only serve one user
    at a time, and the next user cannot be served until all the I/O and processing
    is complete for the previous user. This is unacceptable of course, so the easiest
    solution is to create a new thread for each incoming request, so they can run
    in parallel.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 编写应用程序服务器时，这样的程序一次只能为一个用户提供服务，直到上一个用户的所有I/O和处理完成后，才能为下一个用户提供服务。这是不可接受的，所以最简单的解决方案是为每个传入的请求创建一个新的线程，这样它们可以并行运行。
- en: This is how the **Apache** web server works, and it is not difficult to implement.
    However, as the number of simultaneous users increase, the amount of memory used
    also increases. Each of those threads requires overhead at the operating system
    level, and it adds up pretty quickly. In addition, the overhead of context switching
    between those threads is more time consuming than desired, further compounding
    the problem.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是**Apache**网页服务器的工作原理，实现起来并不困难。然而，随着同时用户数量的增加，内存使用量也会增加。每个线程都需要操作系统级别的开销，并且这些开销会迅速累积。此外，在这些线程之间进行上下文切换的开销比预期的更加耗时，进一步加剧了问题。
- en: The **nginx** web server uses an event loop at its core to handle processes.
    By doing so, it is able to handle more simultaneous users at once, with fewer
    resources. An event loop requires that the bits of processing be broken up into
    small pieces, and run in a single queue. This removes the high cost of creating
    threads, switching back and forth between those threads, and requires less demand
    of the overall system. At the same time, it fills in the processing gaps, particularly
    those that occur during the wait for I/O to complete.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**nginx**网页服务器使用事件循环来处理进程。通过这样做，它能够同时处理更多的用户，使用更少的资源。事件循环要求将处理的位分解成小块，并在一个单一队列中运行。这消除了创建线程的高成本，来回切换线程之间的开销，并减少了对整个系统的需求。同时，它填补了处理间隙，特别是在等待I/O完成时发生的间隙。'
- en: Node.js takes the event-driven model that nginx uses to such great success,
    and it exposes that same capability for many types of applications. In Node.js,
    all I/O is entirely asynchronous and does not block the rest of the application
    thread. The Node.js API accepts function parameters (usually known as a "callback
    function") for all I/O operations. Node.js then fires off that I/O operation,
    and lets another thread outside the application do the processing. After that,
    the application is free to continue handling other requests. Once the requested
    operation is complete, the event-loop is notified, and the callback function is
    invoked with the results.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js采用了nginx成功使用的事件驱动模型，并为许多类型的应用程序提供了相同的能力。在Node.js中，所有I/O都是完全异步的，不会阻塞应用程序的其他线程。Node.js
    API接受函数参数（通常称为“回调函数”）进行所有I/O操作。然后Node.js启动该I/O操作，并让应用程序外的另一个线程进行处理。完成请求的操作后，事件循环被通知，回调函数被调用并返回结果。
- en: As it turns out, waiting for I/O to complete is the most expensive part of many
    applications in terms of raw processing time. With Node.js, the time spent waiting
    for I/O is completely detached from the rest of your application's processing
    time. Your application just uses callback functions to process results as simple
    events, and JavaScript's ability to use closure retains the function's context,
    despite being executed asynchronously.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，等待I/O完成是许多应用程序在原始处理时间方面最昂贵的部分。使用Node.js，等待I/O的时间完全与应用程序的其余处理时间分离。你的应用程序只是使用回调函数来处理结果作为简单的事件，并且JavaScript的闭包能力保留了函数的上下文，尽管是异步执行的。
- en: If you were to take up the task of writing a multi-threaded application, you
    would have to concern yourself with concurrency problems like deadlocks, which
    are very difficult (if not impossible) to reproduce and debug in real-world applications.
    With Node.js, your primary application logic runs on a single thread, free of
    such concurrency problems, while the time-consuming I/O is handled on your behalf
    by Node.js.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要写一个多线程应用程序，你将不得不关注并发问题，比如死锁，这在真实应用程序中很难（甚至不可能）重现和调试。使用Node.js，你的主要应用逻辑在单个线程上运行，不会出现这样的并发问题，而耗时的I/O则由Node.js代表你处理。
- en: Like any other platform, Node.js has an API developers can use to write their
    applications. JavaScript itself lacks a standard library, particularly for performing
    I/O. This actually turned out to be one of the reasons that Ryan Dahl chose JavaScript.
    As the core API can be built from the ground up, without needing to worry about
    creating conflicts with a standard library, in case it is done wrong (given JavaScript's
    history, this is not an unreasonable assumption).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 和其他平台一样，Node.js有一个API供开发者编写他们的应用程序使用。JavaScript本身缺乏标准库，特别是用于执行I/O。这实际上成为Ryan
    Dahl选择JavaScript的原因之一。因为核心API可以从头开始构建，而不需要担心与标准库发生冲突，如果做错了（考虑到JavaScript的历史，这并不是一个不合理的假设）。
- en: 'That core library is minimalistic, but it does include modules for the essentials.
    This includes, but is not limited to: filesystem access, network communication,
    events, binary data structures, and streams. Many of these APIs, while not difficult
    to use, are very low-level in implementation. Consider this "Hello World" demonstration
    straight from the Node.js website (with comments added):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 那个核心库是最小化的，但它包括了基本的模块。这包括但不限于：文件系统访问、网络通信、事件、二进制数据结构和流。其中许多API虽然不难使用，但在实现上非常底层。考虑一下这个直接来自Node.js网站的“Hello
    World”演示（附加了注释）：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This server uses the **http** core module to set up a web server that simply
    sends "Hello World" to anyone who makes a request of it. This is a simple example,
    but without comments, this consists of only six lines of code in all.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个服务器使用**http**核心模块来建立一个简单的网页服务器，向任何请求它的人发送“Hello World”。这是一个简单的例子，但没有注释的话，总共只有六行代码。
- en: The Node.js team has opted to keep the core library limited in scope, leaving
    the community of developers to create the modules they need for everything else,
    such as database drivers, unit-testing, templating, and abstractions for the core
    API. To aid in this process, Node.js has a package manager called npm.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js团队选择保持核心库的范围有限，让开发者社区为其他所有内容创建他们所需的模块，比如数据库驱动程序、单元测试、模板和核心API的抽象。为了帮助这个过程，Node.js有一个叫做npm的包管理器。
- en: npm is the tool that handles installing dependencies for Node.js applications.
    It opts for locally bundled dependencies, rather than using a single global namespace.
    This allows different projects to have their own dependencies, even if the version
    varies between those projects.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: npm是处理Node.js应用程序安装依赖项的工具。它选择本地捆绑的依赖项，而不是使用单一的全局命名空间。这允许不同的项目拥有自己的依赖项，即使这些项目之间的版本不同。
- en: Tip
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/supportand](http://www.packtpub.com/supportand)
    register to have the files e-mailed directly to you.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)购买的所有Packt图书的帐户中下载示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/supportand](http://www.packtpub.com/supportand)注册，将文件直接发送到您的电子邮件。
- en: In addition to allowing for the use of third-party modules, npm also makes contributing
    to the registry a public affair. Adding a module to the registry is as simple
    as a single command, making the barrier to enter extremely low. Today, the npm
    registry has over 42,000 packages listed and is growing faster by the day.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 除了允许使用第三方模块外，npm还使得向注册表贡献成为公开的事务。将模块添加到注册表就像执行一个简单的命令一样，使得进入门槛极低。如今，npm注册表上列出了超过42,000个软件包，并且每天都在快速增长。
- en: With the registry growing so fast, it's obvious there is a vibrant ecosystem
    behind it. I can personally attest to the fact that the Node.js developer community
    is very friendly, extremely prolific, and has an enormous amount of enthusiasm.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表增长如此迅速，显然背后有一个充满活力的生态系统。我个人可以证明，Node.js开发者社区非常友好，极其多产，并且有巨大的热情。
- en: Securing Node.js applications
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护Node.js应用程序
- en: When it comes to securing your application, there are many factors to consider.
    We will start by examining JavaScript itself, then analyze Node.js as a platform,
    and reveal some of the internals that are relevant to the discussion. After that,
    we will investigate considerations and patterns for your applications as a whole.
    Last, we will survey vulnerabilities at the request and response level of your
    applications. By the end of this book, you should have enough understanding of
    the internals of Node.js to not only address what we are discussing here, but
    also to grasp any future vulnerability that may appear for your applications.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在保护您的应用程序时，有许多因素需要考虑。我们将首先检查JavaScript本身，然后分析Node.js作为一个平台，并揭示一些与讨论相关的内部信息。之后，我们将调查整个应用程序的考虑因素和模式。最后，我们将调查应用程序请求和响应级别的漏洞。通过本书的最后，您应该对Node.js的内部有足够的了解，不仅能够解决我们在这里讨论的问题，还能够理解可能出现在您的应用程序中的任何未来漏洞。
- en: Summary
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the history of the Node.js project itself, and
    gave some background to the development environment and community. In the next
    chapter, we will start by looking at security features present within the JavaScript
    language itself.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Node.js项目本身的历史，并介绍了开发环境和社区的背景。在下一章中，我们将首先查看JavaScript语言本身的安全功能。
