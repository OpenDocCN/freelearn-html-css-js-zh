- en: Chapter 6. Adding Friendship Capabilities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。添加友谊功能
- en: 'In [Chapter 5](part0040.xhtml#aid-164MG1 "Chapter 5. Managing Users"), *Managing
    Users*, we implemented the user registration and login system. We now have user
    information in our database and we can continue with one of the most important
    characteristics of social networks—friendship. In this chapter, we will add a
    logic for the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](part0040.xhtml#aid-164MG1 "第5章。管理用户")*管理用户*中，我们实现了用户注册和登录系统。现在我们在数据库中有用户信息，我们可以继续社交网络中最重要的特征之一——友谊。在本章中，我们将添加以下逻辑：
- en: Finding friends
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找朋友
- en: Marking users as friends
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记用户为朋友
- en: Displaying the linked users on the **Profile** page
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**个人资料**页面上显示已连接的用户
- en: Finding friends
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找朋友
- en: The process of finding friends involves a series of changes in our current codebase.
    The following sections will guide us through the searching and displaying of friend
    profiles. We will make a couple of improvements in our REST API and define a new
    controller and model.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 查找朋友的过程涉及对我们当前代码库的一系列更改。以下各节将指导我们完成搜索和显示朋友资料。我们将对我们的REST API进行一些改进，并定义一个新的控制器和模型。
- en: Adding the search page
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加搜索页面
- en: 'So far, we have pages for registration, login, and profile management. We will
    add one more link in our navigation—`Find friends`. In order to do this, we have
    to update the `frontend/tpl/navigation.html` file as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了注册、登录和个人资料管理页面。我们将在导航栏中添加一个新链接——`查找朋友`。为了做到这一点，我们必须按照以下方式更新`frontend/tpl/navigation.html`文件：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The link that we added at the end will forward the user to a new route. As
    with the other pages, our router will catch the URL change and fire a handler.
    Here is a little update of the `app.js` file:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在最后添加的链接将把用户转发到一个新的路由。与其他页面一样，我们的路由器将捕获URL更改并触发处理程序。以下是`app.js`文件的小更新：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The adding of new friends should not be possible if the user is not authenticated.
    We will apply a simple check here in the frontend, but we will protect the API
    calls too. A new `FindFriends` controller has to be created. The role of this
    controller is to show a form with an input field and a button. The user submits
    the form, we query the database, and we later display the users that match the
    entered string. Here is how the controller begins:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户未经身份验证，则不应该能够添加新的朋友。我们将在前端应用一个简单的检查，但我们也将保护API调用。必须创建一个新的`FindFriends`控制器。该控制器的作用是显示一个带有输入字段和按钮的表单。用户提交表单后，我们查询数据库，然后显示与输入字符串匹配的用户。以下是控制器的开始部分：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We kept the same `Navigation` and `Footer` components. There are several variables
    with their respective default values. The `loading` keyword will be used as a
    flag indicating that we are making a request to the API. The fetching of friends
    that match certain criteria may be a complex operation. So, it will be a good
    practice to show the user that we are working on his/her query. The `message`
    property will be used either to display confirmation that everything went okay
    or to report an error. The last two variables keep the data. The `searchFor` variable
    will host the string entered by the user and `foundFriends` will host the users
    returned by the backend.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们保留了相同的`Navigation`和`Footer`组件。有几个变量及其默认值。`loading`关键字将用作指示我们正在向API发出请求的标志。查找符合某些条件的朋友可能是一个复杂的操作。因此，向用户显示我们正在处理他/她的查询将是一个很好的做法。`message`属性将用于显示一切正常的确认或报告错误。最后两个变量保留数据。`searchFor`变量将承载用户输入的字符串，`foundFriends`将承载后端返回的用户。
- en: 'Let''s check what we need as the HTML markup. The `frontend/tpl/find-friends.html`
    file contains the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下我们需要的HTML标记。`frontend/tpl/find-friends.html`文件包含以下内容：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `header` and the `navigation` sections stay untouched. We have a nicely
    placed title at the top followed by the form that we mentioned. If the `loading`
    flag has `true` as a value, we display the **Loading. Please wait.** message.
    If we are not in the process of querying the backend, then we show the input field
    and the button. The following screenshot demonstrates how this looks in practice:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`header`和`navigation`部分保持不变。顶部有一个很好放置的标题，后面是我们提到的表单。如果`loading`标志的值为`true`，我们将显示**加载中，请稍候**消息。如果我们没有在查询后端的过程中，那么我们会显示输入字段和按钮。以下截图展示了这在实践中的样子：'
- en: '![Adding the search page](img/image00178.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![添加搜索页面](img/image00178.jpeg)'
- en: The next part of the template renders the users sent by the backend. It shows
    their name and a **Add as a friend** button. We will see a screenshot of this
    view in the pages that follow.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 模板的下一部分呈现了后端发送的用户。它显示他们的姓名和一个**添加为朋友**按钮。我们将在接下来的页面中看到这个视图的截图。
- en: The last part of the HTML markup is for the conditional displaying of a message.
    If we set a value to the `message` variable, then Ractive.js reveals the `div`
    element and makes our text visible.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: HTML标记的最后部分是用于条件显示消息。如果我们为`message`变量设置了一个值，那么Ractive.js将显示`div`元素并使我们的文本可见。
- en: Writing the model
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写模型
- en: We have the user interface that will accept the user's input. Now, we need to
    communicate with the backend and retrieve users matching the value of the form's
    field. In our system, we make requests to the API through models.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个用户界面，可以接受用户的输入。现在，我们需要与后端通信，并检索与表单字段值匹配的用户。在我们的系统中，我们通过模型向API发出请求。
- en: 'So, let''s create a new `frontend/js/models/Friends.js` model:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们创建一个新的`frontend/js/models/Friends.js`模型：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The endpoint of the `friendship` functionality will be `/api/friends`. To search
    among users, we append `/find` to the URL. We are going to make a `POST` request
    with the value of the `searchFor` variable. The code that handles the result again
    uses the `lib/Ajax` module, and if everything is okay, it fires the specified
    callback.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`friendship`功能的端点将是`/api/friends`。要在用户中进行搜索，我们在URL后面添加`/find`。我们将使用`POST`请求和`searchFor`变量的值进行搜索。处理结果的代码再次使用`lib/Ajax`模块，如果一切正常，它将触发指定的回调。'
- en: 'Let''s update the controller that calls the newly created model and its `find`
    function. At the top of the `controllers/FindFriends.js` file, we will add a `require`
    statement:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新调用新创建的模型及其`find`函数的控制器。在`controllers/FindFriends.js`文件的顶部，我们将添加一个`require`语句：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, in the `render` handler of the controller, we will place the following
    snippet:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在控制器的`render`处理程序中，我们将放置以下片段：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `find` event is fired by the button in our form. Once we register the button''s
    click, we display the `loading` string and clear any previously shown message.
    We get the value of the input field and ask the model for matching users. If there
    are any such potential friends, we render them by setting a value to the `foundFriends`
    variable. If not, we display a message saying that there are no users who match
    the criteria. Once we finish with the API method implementation, the screen will
    look like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`find`事件由表单中的按钮触发。一旦我们注册了按钮的点击，我们显示`loading`字符串并清除任何先前显示的消息。我们获取输入字段的值，并要求模型匹配用户。如果有任何潜在的朋友，我们通过为`foundFriends`变量设置一个值来呈现它们。如果没有，我们会显示一条消息，说明没有符合条件的用户。一旦我们完成了API方法的实现，屏幕将如下所示：'
- en: '![Writing the model](img/image00179.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![编写模型](img/image00179.jpeg)'
- en: Fetching friends from the database
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从数据库中获取朋友
- en: 'The changes that we need to make are in `backend/API.js`. We need to add a
    couple of new routes. However, before proceeding with the querying of users, we
    will add a helper function to fetch the current user''s profile. We will keep
    the name and e-mail of the current user in a `session` variable, but that''s not
    enough, because we want to display more user information. So, the following function
    fetches the complete profile from the database:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`backend/API.js`中进行的更改是添加一些新路由。但是，在继续查询用户之前，我们将添加一个辅助函数来获取当前用户的配置文件。我们将保留当前用户的姓名和电子邮件在一个`session`变量中，但这还不够，因为我们想显示更多的用户信息。因此，以下函数从数据库中获取完整的配置文件：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We use the e-mail of the user as a criterion for the request. The object containing
    the profile's data is returned as an argument of the callback.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用用户的电子邮件作为请求的标准。包含配置文件数据的对象作为回调的参数返回。
- en: 'Since we have all the information about the current user, we can continue implementing
    the user''s search. The route that should answer such queries is as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经拥有关于当前用户的所有信息，我们可以继续实现用户搜索。应该回答这类查询的路由如下：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The first `if` clause guarantees that this route is accessible only to the
    registered and logged in users. This method accepts only the `POST` requests.
    The rest fetches the `searchFor` variable and calls the `findFriends` function,
    which can be implemented as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`if`子句确保此路由仅对已注册并已登录的用户可访问。此方法仅接受`POST`请求。其余部分获取`searchFor`变量并调用`findFriends`函数，可以实现如下：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The users in our system have their names split into two variables—`firstName`
    and `lastName`. We cannot be sure as to which one the user may be referring to
    when they type in the search form's field. So, we will search in the database
    of both properties. We will also use a regular expression to make sure that our
    search is not case-sensitive.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们系统中的用户将他们的名字分成两个变量——`firstName`和`lastName`。当用户在搜索表单字段中输入时，我们无法确定用户可能指的是哪一个。因此，我们将在数据库中搜索这两个属性。我们还将使用正则表达式来确保我们的搜索不区分大小写。
- en: 'The MongoDB database provides a syntax to perform complex queries. In our case,
    we want to fetch the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB数据库提供了执行复杂查询的语法。在我们的情况下，我们想获取以下内容：
- en: The users whose first or last names match the criteria sent by the client side.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其名字的第一个或最后一个与客户端发送的条件匹配的用户。
- en: The users who are different from the already added friends of the current user.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与当前用户已添加的朋友不同的用户。
- en: The users who are different from the current user. We don't want to offer the
    friendship of the user with their own profile.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与当前用户不同的用户。我们不希望向用户提供与他们自己的配置文件的友谊。
- en: The `$nin` variable means *value not in the provided array*. We will exclude
    the e-mail address of the current user. A little detail that is worth a mention
    is that MongoDB stores the IDs of the users in a 12-byte BSON type. They are not
    in plain text. So, we need to use a `ObjectID` function before sending the query.
    The method is accessible via the same `mongodb` module—`var ObjectId = require('mongodb').ObjectID`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`$nin`变量表示*值不在提供的数组中*。我们将排除当前用户的电子邮件地址。值得一提的一个小细节是，MongoDB将用户的ID存储在12字节的BSON类型中。它们不是明文。因此，在发送查询之前，我们需要使用`ObjectID`函数。该方法可以通过相同的`mongodb`模块访问——`var
    ObjectId = require(''mongodb'').ObjectID`。'
- en: When the database driver returns the records that fulfill our criteria, we filter
    the information and respond with a proper JSON file. We will not send the entire
    profiles of the users, because we are not going to use all the data. The names
    and IDs are enough.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据库驱动程序返回满足我们条件的记录时，我们会过滤信息并用适当的JSON文件进行响应。我们不会发送用户的整个配置文件，因为我们不会使用所有数据。姓名和ID就足够了。
- en: Adding that new route to the API will make friend searching work. Now, let's
    add logic that attaches profiles to the current user.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将该新路由添加到API将使朋友搜索起作用。现在，让我们添加逻辑，将配置文件附加到当前用户。
- en: Marking users as friends
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将用户标记为朋友
- en: 'If we check the HTML template of our new page, we will see that every rendered
    user has a button that dispatches an `add` event. Let''s handle this in our controller
    and run a function in our model, which is similar to the process of finding friends:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查新页面的HTML模板，我们会发现每个呈现的用户都有一个按钮，可以触发`add`事件。让我们在我们的控制器中处理这个，并在我们的模型中运行一个类似于查找朋友的过程的函数：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We use the same technique with the `loading` flag. The model's method that we
    will cover in the following code accepts the `id` value of the user and reports
    if the linking is successful. We need to clear the `foundFriends` array. Otherwise,
    the current user may click on the same profile twice. The other option is to remove
    only the clicked item, but this involves more code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用相同的技术来处理`loading`标志。我们将在下面的代码中介绍的模型方法接受用户的`id`值，并报告链接是否成功。我们需要清除`foundFriends`数组。否则，当前用户可能会点击同一个个人资料两次。另一个选项是只删除被点击的项目，但这涉及更多的代码。
- en: 'The addition in `models/Friends.js` is as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`models/Friends.js`中的添加如下：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The only difference between the `add` and `find` methods is that in the first
    one, we sent `searchFor` and in the second one, we sent the `id` parameter. The
    error handling and result responding is the same. Of course, the endpoints are
    also tweaked.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`add`和`find`方法之间的唯一区别在于，在第一个方法中，我们发送了`searchFor`，而在第二个方法中，我们发送了`id`参数。错误处理和结果响应是相同的。当然，端点也经过了调整。'
- en: 'We show profiles, the user clicks on some of them, and our model fires a `POST`
    request to the backend. It is time to implement the API route that marks users
    as friends. To do this, we will update the current user''s profile by adding a
    new array called `friends`, which contains references to friends'' profiles:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们展示个人资料，用户点击其中一些，我们的模型向后端发送`POST`请求。现在是时候实现标记用户为朋友的API路由了。为此，我们将通过添加一个名为`friends`的新数组来更新当前用户的个人资料，其中包含对朋友个人资料的引用：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding method is again protected. We require an authenticated user and
    a `POST` request to be made. After fetching the ID of the friend, we use the `$push`
    operator to create (if it doesn't exist) and fill the `friends` array. The only
    job of the `done` function is to send a response to the browser.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法再次受到保护。我们需要一个经过身份验证的用户和进行`POST`请求。在获取朋友的ID之后，我们使用`$push`运算符来创建（如果不存在）并填充`friends`数组。`done`函数的唯一工作是向浏览器发送响应。
- en: Our next step in this chapter is to show the added friends on the **Profile**
    page of the user.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的下一步是在用户的**个人资料**页面上显示添加的朋友。
- en: Displaying the linked users on the Profile page
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在个人资料页面显示链接的用户
- en: 'Again, we''ll start by updating our templates. In the previous chapter, we
    created `frontend/tpl/profile.html`. It contains a form that we use for profile
    updates. Let''s add the following code after it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们将从更新我们的模板开始。在上一章中，我们创建了`frontend/tpl/profile.html`。它包含一个我们用于个人资料更新的表单。让我们在它之后添加以下代码：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If the Ractive component has a `friends` property, then we will render a list
    of users. The page will display the name of the users and it will look like the
    next screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Ractive组件有一个`friends`属性，那么我们将渲染一个用户列表。页面将显示用户的名称，看起来像下一个截图：
- en: '![Displaying the linked users on the Profile page](img/image00180.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![在个人资料页面显示链接的用户](img/image00180.jpeg)'
- en: 'The controller that renders the page should also be updated. We should use
    the same `models/Friends` model that was developed in the previous sections. This
    is why we need to add `var Friends = require(''../models/Friends'');` at the top.
    Three other lines of code will make the fetching of records work. We will add
    them in the `onrender` handler of the controller as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染页面的控制器也应该更新。我们应该使用在前几节中开发的相同的`models/Friends`模型。这就是为什么我们需要在顶部添加`var Friends
    = require('../models/Friends');`。另外三行代码将使记录的获取工作。我们将在控制器的`onrender`处理程序中添加它们，如下所示：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Another small addition that we have to make in the controller is defining a
    default value of the `friends` variable, which is as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在控制器中还需要做的另一个小的添加是定义`friends`变量的默认值，如下所示：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This time, we are not going to update the model. We will use the default `fetch`
    method that sends a `GET` request to the `/api/friends` endpoint. The only addition
    that needs to be made is in the `backend/API.js` file. We need a route that finds
    the friends of the current user and returns them:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们不打算更新模型。我们将使用默认的`fetch`方法，向`/api/friends`端点发送`GET`请求。唯一需要做的是在`backend/API.js`文件中进行添加。我们需要一个路由来找到当前用户的朋友并返回它们：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is the second place that we used the `getCurrentUser` helper function.
    We do not have the profiles of the users. So, we need to make one additional request
    to the MongoDB server. The `$in` operator helps us in this case. Again, we need
    to convert the IDs to the proper format before sending them along with the query.
    In the end, before responding to the browser, we delete sensitive information,
    such as the ID, password, and e-mail. The frontend receives a nice array with
    all the friends of the currently logged in user.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们使用`getCurrentUser`辅助函数的第二个地方。我们没有用户的个人资料。因此，我们需要向MongoDB服务器发出一个额外的请求。在这种情况下，`$in`运算符对我们有帮助。再次，在将它们与查询一起发送之前，我们需要将ID转换为适当的格式。最后，在向浏览器响应之前，我们删除敏感信息，如ID、密码和电子邮件。前端将收到一个包含当前登录用户的所有朋友的漂亮数组。
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we made the creating of links between users possible. We reinforced
    our knowledge about frontend controllers and models. We extended the project's
    API with a couple of new methods and performed some complex database queries.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使得用户之间创建链接成为可能。我们加强了对前端控制器和模型的了解。我们通过一些复杂的数据库查询扩展了项目的API，添加了一些新的方法。
- en: In the next chapter, we will learn how to upload content with Node.js. Like
    other popular social networks, the posted information will be shown as a feed
    to the users.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Node.js上传内容。与其他流行的社交网络一样，发布的信息将显示为用户的动态。
