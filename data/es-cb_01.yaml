- en: Building with Modules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模块构建
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Installing and configuring browsers—Chrome and Firefox
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置浏览器—Chrome 和 Firefox
- en: Installing Python, using SimpleHTTPServer to host a local static file server
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Python，使用 SimpleHTTPServer 来托管本地静态文件服务器
- en: Creating an HTML page that loads an ECMAScript module
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个加载 ECMAScript 模块的 HTML 页面
- en: Exporting/importing multiple modules for external use
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导出/导入多个模块以供外部使用
- en: Renaming imported modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重命名导入的模块
- en: Nesting modules under a single namespace
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单个命名空间下嵌套模块
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: JavaScript is the most famous language that adheres to the ECMAScript standard.
    This standard was created in the late 1990s in order to guide the development
    of the language. In the early years, development was slow, with only four major
    versions reaching production in the first two decades. However, with increased
    exposure, largely thanks to the popularization of the Node.js run-time, the pace
    of development has increased dramatically. The years 2015, 2016, and 2017 each
    saw new releases of the of the standard, with another planned for 2018.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是最著名的遵循 ECMAScript 标准的语言。该标准是在 20 世纪 90 年代末期创建的，目的是为了指导语言的发展。在早期，发展缓慢，在前二十年里只有四个主要版本达到了生产阶段。然而，随着曝光度的增加，这很大程度上得益于
    Node.js 运行时的普及，发展速度显著加快。2015 年、2016 年和 2017 年每年都发布了新的标准版本，2018 年也计划发布另一个版本。
- en: With all these developments, now is an exciting time to be a JavaScript developer.
    A lot of new ideas are coming in from other languages, and the standard API is
    expanding to be more helpful. This book focuses on new features and techniques
    that can be used in the newer versions of JS as well as future versions!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些发展之后，现在是 JavaScript 开发者激动人心的时刻。许多新的想法来自其他语言，标准 API 正在扩展以提供更多帮助。本书专注于可以在
    JS 的新版本以及未来版本中使用的新特性和技术。
- en: Historically, creating JavaScript programs that span multiple files has been
    a painful experience. The simplest approach was to include each of the files in
    separate `<script>` tags. This also requires developers to position the tags in
    the correct order.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，创建跨越多个文件的 JavaScript 程序一直是一种痛苦的经历。最简单的方法是将每个文件包含在单独的 `<script>` 标签中。这也要求开发者正确地定位这些标签。
- en: Various libraries have attempted to improve this situation. RequireJS, Browserfy,
    and Webpack all attempt to solve the problem of JavaScript dependencies and module
    loading. Each of these requires some kind of configuration or build step.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的库试图改善这种情况。RequireJS、Browserify 和 Webpack 都试图解决 JavaScript 依赖项和模块加载的问题。这些都需要某种形式的配置或构建步骤。
- en: The situation has improved in recent years. Browser manufacturers collaborate
    in creating the ECMAScript specification. It is then up to the manufacturers to
    implement JavaScript interpreters (programs that actually run the JavaScript)
    that adhere to that specification
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，情况有所改善。浏览器制造商合作创建 ECMAScript 规范。然后，制造商需要实现符合该规范的 JavaScript 解释器（实际运行 JavaScript
    的程序）。
- en: New versions of browsers are being released that support native ECMAScript modules.
    ECMAScript modules provide an elegant method for including dependencies. Best
    of all, unlike the previous methods, modules don't require any build step or configuration.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正在发布支持原生 ECMAScript 模块的浏览器新版本。ECMAScript 模块提供了一种优雅的包含依赖项的方法。最好的是，与之前的方法不同，模块不需要任何构建步骤或配置。
- en: The recipes in this chapter focus on installing and configuring the Chrome and Firefox 
    web browsers and how to take full advantage of ES modules and the import/export
    syntax.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的食谱主要关注安装和配置 Chrome 和 Firefox 网络浏览器，以及如何充分利用 ES 模块和导入/导出语法。
- en: Installing and configuring - Chrome
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 - Chrome
- en: 'Subsequent recipes will assume an environment that is capable of using ES modules.
    There are two strategies for accomplishing this: creating a build step that collects
    all the modules used into a single file for the browser to download, or using
    a browser that is capable of using ES modules. This recipe demonstrates the latter
    option.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 后续的食谱将假设一个能够使用 ES 模块的环境。有两种策略可以实现这一点：创建一个构建步骤，将所有使用的模块收集到一个文件中以便浏览器下载，或者使用能够使用
    ES 模块的浏览器。这个食谱演示了后者选项。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you need a computer with an operating system (OS)
    that is supported by Chrome (not Chromium). It supports recent versions of Windows
    and macOS, as well as a large number of Linux distributions. Most likely, if your
    OS doesn't support this browser, you are already aware of this.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要逐步完成此菜谱，您需要一个由 Chrome 支持的操作系统（OS）（不是 Chromium）。它支持 Windows 和 macOS 的最新版本，以及大量
    Linux 发行版。如果您的操作系统不支持此浏览器，您可能已经知道了这一点。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To download Chrome, navigate your browser to the following:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要下载 Chrome，将您的浏览器导航到以下位置：
- en: '[https://www.google.co.in/chrome/](https://www.google.co.in/chrome/).'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.google.co.in/chrome/](https://www.google.co.in/chrome/)'
- en: Click Download and accept the terms of service.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下载并接受服务条款。
- en: After the installer finishes downloading, double-click the installer to launch
    it and follow the onscreen instructions.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装程序下载完成后，双击安装程序以启动它并按照屏幕上的说明操作。
- en: 'To check the version of Chrome, open the Chrome browser, and enter the following
    URL:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 Chrome 版本，打开 Chrome 浏览器，并输入以下 URL：
- en: '`chrome://settings/help`.'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`chrome://settings/help`。'
- en: 'You should see the Version number where the number is 61 or higher. See the
    following screenshot:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到版本号，数字为 61 或更高。请参阅以下截图：
- en: '![](img/7b15a0ae-f6f6-4db2-8cb8-e2e77dafda50.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b15a0ae-f6f6-4db2-8cb8-e2e77dafda50.png)'
- en: How it works...
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The current versions of Chrome come with ES modules enabled out of the box.
    So no configuration or plugins are required to get them working!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome 的当前版本默认启用 ES 模块。因此，无需配置或插件即可使其工作！
- en: There's more...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: At the time of writing, only a few browsers support ECMAScript. You can see
    which browsers support modules under the Browser compatibility section of the
    page at [https://mzl.la/1PY7nnm.](https://mzl.la/1PY7nnm)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，只有少数浏览器支持 ECMAScript。您可以在[https://mzl.la/1PY7nnm](https://mzl.la/1PY7nnm)页面上的浏览器兼容性部分查看哪些浏览器支持模块。
- en: Installing and configuring - Firefox
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 - Firefox
- en: 'Subsequent recipes will assume an environment that is capable of using ES modules.
    There are two strategies for accomplishing this: creating a build step that collects
    all the modules used into a single file for the browser to download, or using
    a browser that is capable of using ES modules. This recipe demonstrates the latter
    option.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 后续菜谱将假设一个能够使用 ES 模块的环境。有两种策略可以实现这一点：创建一个构建步骤，将所有使用的模块收集到一个文件中以便浏览器下载，或者使用能够使用
    ES 模块的浏览器。本菜谱演示了后者选项。
- en: Getting ready
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you need a computer with an operating system (OS)
    that is supported by Firefox. It supports recent versions of Windows and macOS,
    as well as a large number of Linux distributions. Most likely, if your OS doesn't
    support Firefox, you are already aware of this.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要逐步完成此菜谱，您需要一个由 Firefox 支持的操作系统（OS）。它支持 Windows 和 macOS 的最新版本，以及大量 Linux 发行版。如果您的操作系统不支持
    Firefox，您可能已经知道了这一点。
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To install Firefox, open a browser and enter the following URL:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装 Firefox，打开浏览器并输入以下 URL：
- en: '`https://www.mozilla.org/firefox`.'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`https://www.mozilla.org/firefox`。'
- en: Click the button that says Download to download the installer.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击显示“下载”的按钮来下载安装程序。
- en: After the installer has finished downloading, double click the installer and
    follow the onscreen instructions.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装程序下载完成后，双击安装程序并按照屏幕上的说明操作。
- en: 'To configure Firefox, open the Firefox browser and enter the following URL:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要配置 Firefox，打开 Firefox 浏览器并输入以下 URL：
- en: '`about:config`.'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`about:config`。'
- en: The menu will allow you to enable advanced and experimental features. If you
    see a warning, click the button that says I accept the risk!
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 菜单将允许您启用高级和实验性功能。如果您看到警告，请点击显示“我接受风险！”的按钮！
- en: 'Find the dom.moduleScripts.enabled setting, and double-click it to set the
    value to true**,** as shown in following screenshot:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到 `dom.moduleScripts.enabled` 设置，并双击它将值设置为 true**，如图所示：
- en: '![](img/e92323cd-a98f-4724-be81-b6271d10df52.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e92323cd-a98f-4724-be81-b6271d10df52.png)'
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Firefox supports ES modules, but disables them by default. This allows developers
    to experiment with the feature, while the majority of users are not exposed to
    it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Firefox 支持 ES 模块，但默认情况下是禁用的。这允许开发者尝试该功能，而大多数用户不会接触到它。
- en: There's more...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The same as the *Installing and configuring - Chrome* section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与“安装和配置 - Chrome”部分相同。
- en: Installing Python, using SimpleHTTPServer to host a local static file server
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Python，使用 SimpleHTTPServer 来托管本地静态文件服务器
- en: It is possible to browse web pages directly from the filesystem. However, Chrome
    and Firefox have security features that make this inconvenient for development.
    What we need is a simple static file server. This recipe demonstrates how to install
    Python (if necessary) and use it to serve files from a directory.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 可以直接从文件系统中浏览网页。然而，Chrome和Firefox的安全特性使得这在进行开发时变得不方便。我们需要的是一个简单的静态文件服务器。本食谱演示了如何（如果需要）安装Python并使用它从目录中提供文件。
- en: Getting ready
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Find out how to open the command line on your OS. On macOS and Linux, this is
    called the Terminal. On Windows, it is called the Command Prompt.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 查找如何在您的操作系统上打开命令行。在macOS和Linux上，这被称为终端。在Windows上，它被称为命令提示符。
- en: You should use a browser that is configured to load ES modules (see the first
    recipe).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该使用配置为加载ES模块的浏览器（参见第一个食谱）。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Check whether you have Python installed already.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查您是否已安装Python。
- en: Open the command line.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行。
- en: 'Enter the following command:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE0]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you see an output like the one displayed as follows, Python is already installed.
    And you can skip to *step 6*:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您看到如下显示的输出，则表示Python已经安装。您可以跳到第6步：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you receive an error such as the following, continue with the installation
    in *step 5*:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您收到如下错误，请继续进行第5步的安装：
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Install Python on your computer:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的计算机上安装Python：
- en: For macOS, download and run the installer for the latest version of Python 2
    or 3 from the following link: [https://www.python.org/downloads/mac-osx/](https://www.python.org/downloads/mac-osx/)
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于macOS，从以下链接下载并运行Python 2或3的最新版本安装程序：[https://www.python.org/downloads/mac-osx/](https://www.python.org/downloads/mac-osx/)
- en: For Windows, download and run the installer for the latest version of Python
    2 or 3 from the following link: [https://www.python.org/downloads/windows/](https://www.python.org/downloads/windows/)
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows，从以下链接下载并运行Python 2或3的最新版本安装程序：[https://www.python.org/downloads/windows/](https://www.python.org/downloads/windows/)
- en: For Linux, use the operating system's built in the package manager to install
    the Python package
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Linux系统，请使用操作系统的内置包管理器来安装Python包。
- en: Create a folder on your desktop named `es8-cookbook-workspace`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在桌面创建一个名为`es8-cookbook-workspace`的文件夹。
- en: Inside the folder, create a text file named `hello.txt` and save some text to
    it.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件夹内创建一个名为`hello.txt`的文本文件，并将一些文本保存到其中。
- en: 'Open the Command Prompt and navigate to the folder:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符并导航到该文件夹：
- en: 'In the Linux or macOS Terminal enter:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Linux或macOS终端中输入：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On Windows type the following command:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows上输入以下命令：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Start the Python HTTP server with the following command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启动Python HTTP服务器：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Or we can use following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以使用以下命令：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Open your browser and enter the following URL:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器并输入以下URL：
- en: '`http://localhost:8000/`.'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see a page that shows the contents of the `es8-cookbook-workspace` folder:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到一个页面，显示`es8-cookbook-workspace`文件夹的内容：
- en: '![](img/a983f629-b47b-4cdb-b94b-4e6908163069.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a983f629-b47b-4cdb-b94b-4e6908163069.png)'
- en: Click on the link to hello.txt and you'll see the text contents of the file
    you created.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击hello.txt链接，您将看到您创建的文件的文本内容。
- en: How it works...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first thing we did was check if Python was installed. The best way to do
    this is to ask Python for its version number. This way we know whether Python
    is installed, and if it's new enough for our purposes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先检查Python是否已安装。最好的方法是询问Python其版本号。这样我们就可以知道Python是否已安装，以及它是否足够新以满足我们的需求。
- en: If it's not installed, Python can be retrieved via the OS's package manager,
    or via the installers made available through Python's website.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尚未安装，可以通过操作系统的包管理器或通过Python网站提供的安装程序来获取Python。
- en: Once installed, Python comes with a lot of utilities. The one we are interested
    in is the appropriately named `SimpleHTTPServer`. This utility listens for HTTP
    requests on port `8000`, and returns the contents of the files relative to the
    directory root. If the path points to a directory, it returns an HTML page that
    lists the directory contents.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，Python附带了许多实用工具。我们感兴趣的是名为`SimpleHTTPServer`的实用工具。此实用工具监听端口`8000`上的HTTP请求，并返回相对于目录根的文件内容。如果路径指向目录，则返回一个列出目录内容的HTML页面。
- en: Creating an HTML page that loads an ECMAScript module
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个加载ECMAScript模块的HTML页面
- en: In previous recipes, we went over installation and configurations instructions
    to run a static file server using Python and configure a browser to use ES modules.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的食谱中，我们介绍了使用Python运行静态文件服务器以及配置浏览器使用ES模块的安装和配置说明。
- en: Getting ready
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you have the static file server running in your working
    directory. If you haven't installed Python or configured your browser to work
    with ES modules, please see the first two recipes in the book.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱假设你在工作目录中运行了静态文件服务器。如果你还没有安装 Python 或配置浏览器以使用 ES 模块，请参阅本书中的前两个菜谱。
- en: The following steps will demonstrate how to create an ES module and load it
    into an HTML file.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将演示如何创建一个 ES 模块并将其加载到 HTML 文件中。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create an `hello.html` file with a some text content:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含一些文本内容的 `hello.html` 文件：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Open `hello.html` by opening your browser, and entering the following URL: ` http://localhost:8000/hello.html`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开浏览器并输入以下 URL 来打开 `hello.html`：`http://localhost:8000/hello.html`。
- en: 'You should see Open Your Console! displayed by the browser:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器应该会显示 Open Your Console!：
- en: '![](img/57a7992c-da30-4b82-8b7a-341c30c4e717.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/57a7992c-da30-4b82-8b7a-341c30c4e717.png)'
- en: 'Lets do what the page tells us and open up the Developer Console. For both
    Firefox and Chrome, the command is the same:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们按照页面上的指示打开开发者控制台。对于 Firefox 和 Chrome，命令是相同的：
- en: 'On Windows and Linux:'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 和 Linux 上：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On macOS:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 macOS 上：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, in the same directory, create a file called `hello.js`, which exports
    a function named `sayHi` that writes a message to the console:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在同一个目录中创建一个名为 `hello.js` 的文件，导出一个名为 `sayHi` 的函数，该函数将消息写入控制台：
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next add a script module tag to the head of `hello.html` that imports the `sayHi` method
    from `hello.js` (pay attention to the type value).
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将一个脚本模块标签添加到 `hello.html` 的头部，导入 `hello.js` 中的 `sayHi` 方法（注意类型值）。
- en: 'Reload the browser window with the Developer Console open and you should see
    the `hello` message displayed as text:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开开发者控制台并重新加载浏览器窗口，你应该会看到文本形式的 `hello` 消息显示：
- en: '![](img/2e2413b0-c7b4-415e-a8c9-18314f5ee757.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2e2413b0-c7b4-415e-a8c9-18314f5ee757.png)'
- en: How it works...
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Although our browser can work with ES modules, we still need to specify that
    is how we want our code to be loaded. The older way of including script files
    uses `type="text/javascript"`. This tells the browser to execute the content of
    the tag immediately (either from tag contents or from the `src` attribute).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的浏览器可以处理 ES 模块，但我们仍然需要指定我们希望代码以这种方式加载。较老的方式包括脚本文件使用 `type="text/javascript"`。这告诉浏览器立即执行标签的内容（无论是从标签内容还是从
    `src` 属性）。
- en: By specifying `type="module"`, we are telling the browser that this tag is an
    ES module. The code within this tag can import members from other modules. We
    imported the function `sayHi` from the `hello` module and executed it within that
    `<script>` tag. We'll dig into the `import` and `export` syntax in the next couple
    of recipes.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定 `type="module"`，我们告诉浏览器这个标签是一个 ES 模块。此标签内的代码可以导入其他模块的成员。我们从 `hello` 模块中导入了
    `sayHi` 函数，并在该 `<script>` 标签内执行了它。我们将在接下来的几个菜谱中深入研究 `import` 和 `export` 语法。
- en: See also
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '*Exporting/importing multiple modules for external use*'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*导出/导入多个模块以供外部使用*'
- en: '*Adding fallback script tags*'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加回退脚本标签*'
- en: Exporting/importing multiple modules for external use
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出/导入多个模块以供外部使用
- en: In the previous recipe, we loaded an ES module into an HTML page and executed
    an exported function. Now we can take a look at using multiple modules in a program.
    This allows us more flexibility when organizing our code.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的菜谱中，我们将一个 ES 模块加载到 HTML 页面并执行了一个导出的函数。现在我们可以看看如何在程序中使用多个模块。这使我们组织代码时更加灵活。
- en: Getting ready
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have Python installed and your browser properly configured.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经安装了 Python 并正确配置了你的浏览器。
- en: How to do it...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Create a new working directory, navigate into it with your command-line application,
    and start the Python `SimpleHTTPServer`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的工作目录，使用你的命令行应用程序导航到该目录，并启动 Python 的 `SimpleHTTPServer`。
- en: 'Create a file named `rocket.js` that exports the name of a rocket, a countdown
    duration, and a launch function:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `rocket.js` 的文件，导出一个火箭的名称、倒计时持续时间和发射函数：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a file named `main.js` that imports from `rocket.js`, logs out details,
    and then calls the launch function:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.js` 的文件，从 `rocket.js` 中导入，输出详细信息，然后调用发射函数：
- en: '[PRE12]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, create an `index.html` file that imports the `main.js` module and runs
    the `main` function:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个 `index.html` 文件，导入 `main.js` 模块并运行 `main` 函数：
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Open your browser and then the `index.html` file. You should see the following
    output:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的浏览器，然后打开 `index.html` 文件。你应该会看到以下输出：
- en: '![](img/3be6b910-02e5-4259-b3e3-85233e7fa412.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3be6b910-02e5-4259-b3e3-85233e7fa412.png)'
- en: How it works...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'There are two options for exporting a member from a module. It can either be
    exported as the `default` member, or as a named member. In `rocket.js`, we see
    both methods:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 从模块导出一个成员有两种选择。它可以作为`default`成员导出，或者作为命名成员导出。在`rocket.js`中，我们看到了这两种方法：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this case, the string `"Saturn V"` is exported as the default member, while
    `COUNT_DOWN_DURATION` and `launch` are exported as named members. We can see the
    effect this has had when importing the module in `main.js`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，字符串`"Saturn V"`作为默认成员导出，而`COUNT_DOWN_DURATION`和`launch`作为命名成员导出。我们可以在`main.js`导入模块时看到这种影响：
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We can see the difference in how the default member and the name members are
    imported. The name members appear inside the curly braces, and the name they are
    imported with matches their name in the module source file. The default module,
    on the other hand, appears outside the braces, and can be assigned to any name.
    The unexported member `launchSequence` cannot be imported by another module.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到默认成员和命名成员导入的差异。命名成员出现在大括号内，它们导入的名称与模块源文件中的名称匹配。另一方面，默认模块出现在大括号外，可以分配给任何名称。未导出的成员`launchSequence`不能被另一个模块导入。
- en: See also
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '*Renaming imported modules*'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*重命名导入的模块*'
- en: '*Nesting imported modules under a single namespace*'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将导入的模块嵌套在单个命名空间下*'
- en: Renaming imported modules
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重命名导入的模块
- en: Modules allow more flexibility in organizing code. This allows for a shorter,
    more contextual name. For example, in the previous recipe, we named a function
    `launch` instead of something more verbose such as `launchRocket`. This helps
    keep our code more readable, but it also means that different modules can export
    members that use the same name.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 模块允许在组织代码方面有更大的灵活性。这允许使用更短、更具上下文的名字。例如，在前一个菜谱中，我们命名了一个函数为`launch`，而不是更冗长的名称，如`launchRocket`。这有助于使我们的代码更易于阅读，但也意味着不同的模块可以导出使用相同名称的成员。
- en: In this recipe, we'll rename imports in order to avoid these namespace collisions.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将重命名导入以避免这些命名空间冲突。
- en: Getting ready
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll be reusing the code from the previous recipe (*Exporting/importing multiple
    modules for external use*). The changes from the previous files will be highlighted.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重用前一个菜谱中的代码（*导出/导入多个模块以供外部使用*）。前一个文件中的更改将被突出显示。
- en: How to do it...
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Copy the folder created for the previous recipe into a new directory.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将为前一个菜谱创建的文件夹复制到一个新目录中。
- en: Navigate to that directory with your command-line application and start the
    Python server.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的命令行应用程序导航到该目录并启动Python服务器。
- en: 'Rename `rocket.js` to `saturn-v.js`, add the name of the rocket to the log
    statements, and update the `main.js` import statement:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`rocket.js`重命名为`saturn-v.js`，在日志语句中添加火箭的名称，并更新`main.js`的导入语句：
- en: '[PRE16]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Copy `saturn-v.js` to a new file named `falcon-heavy.js` and change the default
    export value and the `COUNT_DOWN_DURATION`:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`saturn-v.js`复制到名为`falcon-heavy.js`的新文件中，并更改默认导出值和`COUNT_DOWN_DURATION`：
- en: '[PRE17]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Import the `falcon` module into `main.js`. Rename the imported members to avoid
    conflicts and launch the falcon rocket as well:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`falcon`模块导入`main.js`。重命名导入的成员以避免冲突，并启动falcon火箭：
- en: '[PRE18]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Open `index.html` in your browser and you should see the following output:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开`index.html`，您应该看到以下输出：
- en: '![](img/8dbb64e7-e312-4818-958a-29b40c21704b.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8dbb64e7-e312-4818-958a-29b40c21704b.png)'
- en: How it works...
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we duplicated the `saturn-v.js` file to and imported the members from `falcon-heavy.js`,
    we had a potential namespace conflict. Both files export members named `COUNT_DOWN_DURATION`
    and launch. But using the `as` keyword, we renamed those members in order to avoid
    that conflict. Now the importing `main.js` file can use both sets of members without
    issue.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将`saturn-v.js`文件复制到并从`falcon-heavy.js`导入成员时，我们遇到了潜在的命名空间冲突。这两个文件都导出了名为`COUNT_DOWN_DURATION`和`launch`的成员。但是使用`as`关键字，我们重命名了这些成员以避免冲突。现在导入的`main.js`文件可以无问题地使用这两组成员。
- en: Renaming members can also be helpful to adding context. For example, it might
    be useful to rename the launch as `launchRocket` even if there is no conflict.
    This give the importing module additional context, and makes the code a bit clearer.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 重命名成员也可以有助于添加上下文。例如，即使没有冲突，将启动重命名为`launchRocket`也可能很有用。这为导入的模块提供了额外的上下文，并使代码更加清晰。
- en: Nesting modules under a single namespace
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在单个命名空间下嵌套模块
- en: As the number of modules grows, patterns start to emerge. For practical and
    architectural reasons, it makes sense to group multiple modules together and use
    them as a single package.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 随着模块数量的增长，模式开始出现。出于实际和架构的原因，将多个模块组合在一起并作为一个单一包使用是有意义的。
- en: This recipe demonstrates how to collect multiple modules together and use them
    as a single package.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方演示了如何将多个模块收集在一起，并将它们作为一个单一包使用。
- en: Getting ready
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: It will be helpful to have the source code available from previous recipes to
    bootstrap this recipe. Otherwise, you'll need to reference *Exporting/importing
    multiple modules for external use* for how to create the `index.html` file.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 将从之前的配方中提供源代码，以便启动这个配方。否则，您需要参考*导出/导入多个模块以供外部使用*以了解如何创建`index.html`文件。
- en: How to do it...
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Create a new folder with an `index.html` file, as seen in *Exporting/importing
    multiple modules for external use*.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含`index.html`文件的新文件夹，如*导出/导入多个模块以供外部使用*中所示。
- en: Inside of that directory, create a folder named `rockets`.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该目录内，创建一个名为`rockets`的文件夹。
- en: 'Inside of `rockets`, create three files: `falcon-heavy.js`, `saturn-v.js`,
    and `launch-sequence.js`:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`rockets`内部创建三个文件：`falcon-heavy.js`、`saturn-v.js`和`launch-sequence.js`：
- en: '[PRE19]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now create `index.js`, which exports the members of those files:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建`index.js`，该文件导出这些文件的成员：
- en: '[PRE20]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a `main.js` file (in the folder that contains `rockets`), which imports
    `falconHeavey` and `saturnV` from the `index.js` file and launches them:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.js`文件（在包含`rockets`的文件夹中），该文件从`index.js`文件中导入`falconHeavey`和`saturnV`并启动它们：
- en: '[PRE21]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Open in the browser, and see the following output:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开，可以看到以下输出：
- en: '![](img/f30de003-ea57-4257-a371-8fecbddbacfa.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f30de003-ea57-4257-a371-8fecbddbacfa.png)'
- en: How it works...
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何工作...
- en: The * syntax seen on the first two lines of `index.js` imports all the exported
    members under the same object. This means that the `name`, `COUNT_DOWN_DURATION`,
    and `launch` members of `falcon-heavey.js` are all attached to the `falconHeavy`
    variable. Likewise, for the `saturn-v.js` modules and the `saturnV` variable.
    So, when `falconHeavy` and `saturnV` are exported on *line 4*, those exported
    names now contain all the exported members of their respective modules.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.js`的前两行中看到的*语法*导入了同一对象下的所有导出成员。这意味着`falcon-heavey.js`的`name`、`COUNT_DOWN_DURATION`和`launch`成员都附加到了`falconHeavy`变量上。同样，对于`saturn-v.js`模块和`saturnV`变量也是如此。因此，当在*第4行*导出`falconHeavy`和`saturnV`时，这些导出的名称现在包含了它们各自模块的所有导出成员。
- en: This provides a single point where another module (`main.js` in this case) can
    import those members. The pattern has three advantages. It is simple; there is
    only one file to import members from, rather than many. It is consistent, because
    all packages can use an `index` module to expose members of multiple modules.
    It is more flexible; members of some modules can be used throughout a package
    and not be exported by the `index` module.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了一个单一的位置，另一个模块（在这种情况下是`main.js`）可以导入这些成员。这种模式有三个优点。它很简单；只有一个文件可以导入成员，而不是多个。它是统一的，因为所有包都可以使用一个`index`模块来暴露多个模块的成员。它更加灵活；某些模块的成员可以在整个包中使用，而不需要由`index`模块导出。
- en: There's more...
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'It is possible to export named items directly. Consider the following file, `atlas.js`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 可以直接导出命名项。考虑以下文件，`atlas.js`：
- en: '[PRE22]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `atlas` member can be exported directly by `index.js`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`atlas`成员可以直接由`index.js`导出：'
- en: '[PRE23]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then the `main.js` file can import the `atlas` member and launch it:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`main.js`文件可以导入`atlas`成员并启动它：
- en: '[PRE24]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This is one benefit of always using named exports; it's easier to collect and
    export specific members from packages with multiple modules.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这始终使用命名导出的一个好处是，更容易从具有多个模块的包中收集和导出特定的成员。
- en: Whether named or not, nesting is a great technique for grouping modules. It
    provides a mechanism for organizing code as the number of modules continues to
    grow.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 不论是否命名，嵌套是一种用于分组模块的绝佳技术。随着模块数量的持续增长，它提供了一种组织代码的机制。
