- en: Appendix A. Socket.IO Quick Reference
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A. Socket.IO 快速参考
- en: In this appendix we will take a look at the APIs provided by socket.io. The
    intention is to have a cursory glance through all the APIs so we know if there
    is a function that can help us while we are working. Socket.io is under active
    development and the APIs themselves are subject to change. Although the documented
    methods may not change, there are always new functions and features being added
    to socket.io. So always check with the socket.io website and wiki for the availability
    of a function that does what you want.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们将查看socket.io提供的API。目的是快速浏览所有API，以便我们知道在工作的过程中是否有函数可以帮助我们。socket.io正在积极开发中，API本身也可能发生变化。尽管文档化的方法可能不会改变，但socket.io中总是会有新的函数和功能被添加。所以，请始终检查socket.io网站和wiki，以确认所需功能的可用性。
- en: The server
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器
- en: As we already know by now, socket.io provides libraries to be used both in the
    server and the client. Let's first see the APIs provided for the server.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，socket.io提供了用于服务器和客户端的库。让我们首先看看为服务器提供的API。
- en: Instantiating socket
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实例化套接字
- en: 'The `socket.io` module is instantiated, just like any other node module, by
    using `require` to import the module:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他node模块一样，使用`require`导入模块来实例化`socket.io`模块：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Starting Socket.IO
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动Socket.IO
- en: 'The socket.io server component is started by using the `listen` method, which
    attaches the socket.io to the node HTTP server:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`listen`方法启动socket.io服务器组件，该方法将socket.io附加到node HTTP服务器：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, `server` is the instance of the node HTTP server.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`server`是node HTTP服务器的实例。
- en: Listening to events
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监听事件
- en: 'The event handlers are attached to socket using the `on` method. The `on` method
    takes the event name and the callback/handler function as parameters:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`on`方法将事件处理程序附加到套接字上。`on`方法接受事件名称和回调/处理函数作为参数：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, `event` is the name of the event and `eventData` represents the event-specific
    data passed to the handler when it is invoked.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`event`是事件的名称，而`eventData`代表在调用处理程序时传递给处理程序的事件特定数据。
- en: Emitting an event
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发射事件
- en: 'We use the `emit` method to trigger an event. This event will be handled on
    the client:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`emit`方法来触发一个事件。这个事件将在客户端被处理：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `event` is the name of the event to trigger, `event_data` is the event
    data as a JSON object, and `ack_callback` is the optional callback function that
    is invoked on the successful receipt of the event on the client.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`event`是要触发的事件的名称，`event_data`是作为JSON对象的事件数据，而`ack_callback`是在客户端成功接收到事件时调用的可选回调函数。
- en: Sending a message
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送消息
- en: 'The `send` method is used to send a message to the client:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`send`方法向客户端发送消息：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Where `message` is the message that will be sent to the client and `ack_callback`
    is the optional callback function that is invoked on the successful receipt of
    the message on the client.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`message`是要发送给客户端的消息，而`ack_callback`是在客户端成功接收到消息时调用的可选回调函数。
- en: Sending a JSON message
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送JSON消息
- en: 'A JSON message can be sent by using the `json` flag before the `send` method:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在`send`方法之前使用`json`标志来发送JSON消息：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, `message` is the message that will be sent to the client and `ack_callback`
    is the optional callback function that is invoked on the successful receipt of
    the message on the client.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`message`是要发送给客户端的消息，而`ack_callback`是在客户端成功接收到消息时调用的可选回调函数。
- en: Broadcasting a message/event
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广播消息/事件
- en: 'A message or an event can be broadcasted to all the connected sockets using
    the `broadcast` flag:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`broadcast`标志将消息或事件广播到所有已连接的套接字：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, `event` is the name of event to emit and `event_data` is the JSON data
    that will be sent with the event. The following line of code shows how to broadcast
    a message:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`event`是要发射的事件的名称，而`event_data`是与事件一起发送的JSON数据。以下代码行显示了如何广播消息：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, `message` is the message that will be sent to the client and `ack_callback`
    is the optional callback function that is invoked on the successful receipt of
    the message on the client.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`message`是要发送给客户端的消息，而`ack_callback`是在客户端成功接收到消息时调用的可选回调函数。
- en: Sending a volatile message
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送一个易失性消息
- en: 'Sometimes the message being sent is not important and can be ignored if not
    delivered. So these methods need not be queued or attempted to be redelivered.
    This is done with the `volatile` flag:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有时发送的消息并不重要，如果未送达，则可以忽略。因此，这些方法不需要排队或尝试重新发送。这是通过`volatile`标志完成的：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, `message` is the message that will be sent to the client and `ack_callback`
    is the optional callback function that is invoked on the successful receipt of
    the message on the client.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`message` 是将发送给客户端的消息，`ack_callback` 是在客户端成功接收到消息时调用的可选回调函数。
- en: Storing socket data
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储套接字数据
- en: 'We can call the `set` method on the socket to store some data on the socket.
    This is an asynchronous method call and takes a key, value, and a callback function:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在套接字上调用 `set` 方法来存储一些数据在套接字上。这是一个异步方法调用，它需要一个键、值和一个回调函数：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, `key` is the key name for this data and `value` is the value to store.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`key` 是此数据的键名，`value` 是要存储的值。
- en: Getting the socket data
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取套接字数据
- en: 'We use the `get` method to fetch the value stored on a socket. This is an asynchronous
    method and takes a key and a callback function, which will get the value:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `get` 方法从套接字获取存储的值。这是一个异步方法，它需要一个键和一个回调函数，该回调函数将获取值：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, `key` is the key of the data to fetch and `value` is the value if stored
    with the socket. This will be `null` if the value is not stored.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`key` 是要获取的数据的键，`value` 是如果与套接字一起存储的值。如果没有存储值，这将是一个 `null`。
- en: Restricting to a namespace
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制到命名空间
- en: 'We can multiplex the socket and restrict messages/events to a namespace by
    using the `of` method. This method returns a socket, which can be used as any
    other socket, but the messages will be restricted to only the clients connected
    to this namespace:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用 `of` 方法来复用套接字并将消息/事件限制到命名空间，从而实现限制。此方法返回一个套接字，它可以像任何其他套接字一样使用，但消息将被限制为仅连接到此命名空间的客户端：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, `namespace` is the namespace we want to restrict the socket to.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`namespace` 是我们想要限制套接字的命名空间。
- en: Joining a room
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加入房间
- en: 'We use the `join` method of `socket` to join a room. It will create a new room
    if one doesn''t already exist:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `socket` 的 `join` 方法加入一个房间。如果房间不存在，它将创建一个新的房间：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, `room` is the name of the room to join.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`room` 是要加入的房间的名称。
- en: Broadcasting messages/events in a room
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在房间中广播消息/事件
- en: 'We can send messages to all the connected clients in the room by using the
    `in` flag with `broadcast`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用 `broadcast` 中的 `in` 标志向房间中的所有已连接客户端发送消息：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, `room` is the room to send the message in, `message` is the message to
    send, `event` is the event to emit, and `event_data` is the data to be sent with
    the event.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`room` 是要发送消息的房间，`message` 是要发送的消息，`event` 是要发出的事件，`event_data` 是与事件一起发送的数据。
- en: Leaving a room
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 离开房间
- en: 'The `leave` method is used to leave a room. We don''t need to do this explicitly
    if the socket is exiting. Also, an empty room will automatically be destroyed:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `leave` 方法离开房间。如果套接字正在退出，我们不需要显式地这样做。此外，空房间将自动被销毁：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, `room` is the room to exit from.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`room` 是要退出的房间。
- en: Changing the configuration
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改配置
- en: 'Socket.io is configured using the `set` method in the `configure` method''s
    callback handler:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Socket.io 使用 `configure` 方法回调处理器的 `set` 方法进行配置：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, `environment` is the optional environment in which this configuration
    will be used, `property` is the property to be set, and `value` is the value for
    the property.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`environment` 是此配置将使用的可选环境，`property` 是要设置的属性，`value` 是属性的值。
- en: Server events
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器事件
- en: We will discuss some server-related events in this section.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中讨论一些与服务器相关的事件。
- en: connection
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接
- en: 'This event is fired when an initial connection with a client is established:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当与客户端建立初始连接时，会触发此事件：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here, `socket` is used in further communication with the client.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`socket` 用于与客户端的进一步通信。
- en: message
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息
- en: 'The `message` event is emitted when a message sent with `socket.send` is received:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `socket.send` 发送的消息被接收时，会发出 `message` 事件：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, `message` is the message sent and `ack_callback` is an optional acknowledgment
    function.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`message` 是发送的消息，`ack_callback` 是一个可选的确认函数。
- en: disconnect
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断开连接
- en: 'This event is fired when the socket disconnects:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当套接字断开连接时，会触发此事件：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The client
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端
- en: In this section we will get to know the client APIs.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解客户端 API。
- en: Connecting to a socket
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到套接字
- en: 'We connect to a socket using the `connect` method on the `io` object in the
    client:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过客户端 `io` 对象上的 `connect` 方法连接到套接字：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, `uri` is the server URI to connect to. It can be absolute or relative.
    If it is other than `/`, or an absolute equivalent of that, it will connect to
    the namespace.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`uri` 是要连接的服务器 URI。它可以绝对或相对。如果不是 `/` 或其绝对等效项，它将连接到命名空间。
- en: Listening to events
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监听事件
- en: 'We can attach event handlers to a socket using the `on` method:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`on`方法将事件处理器附加到套接字上：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, `event` is the event to listen for, `event_data` is the data for the event,
    and `ack_callback` is the optional callback method to call to acknowledge the
    receipt of the event.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`event`是要监听的事件，`event_data`是事件的数据，`ack_callback`是在成功接收事件时调用的可选回调方法。
- en: Emitting an event
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 触发事件
- en: 'We use the `emit` method to trigger an event. This event will be handled on
    the server:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`emit`方法来触发一个事件。这个事件将在服务器上处理：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, `event` is the name of the event to trigger, `event_data` is the event
    data as a JSON object, and `ack_callback` is the optional callback function that
    is invoked on the successful receipt of the message on the server.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`event`是要触发的事件的名称，`event_data`是事件的JSON对象数据，`ack_callback`是在服务器成功接收消息时调用的可选回调函数。
- en: Sending a message
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送消息
- en: 'The `send` method is used to send a message to the server:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`send`方法向服务器发送消息：
- en: '[PRE22]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, `message` is the message that will be sent to the server and `ack_callback`
    is the optional callback function that is invoked on the successful receipt of
    the message on the server.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`message`是要发送到服务器的消息，`ack_callback`是在服务器成功接收消息的可选回调函数。
- en: Client events
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端事件
- en: In this section we will get to know some client-side events.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解一些客户端事件。
- en: connect
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: connect
- en: 'The `connect` event is emitted when the socket is connected successfully:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当套接字成功连接时，会触发`connect`事件：
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: connecting
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: connecting
- en: 'The `connecting` event is emitted when the socket is attempting to connect
    with the server:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当套接字尝试与服务器连接时，会触发`connecting`事件：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: disconnect
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: disconnect
- en: 'The `disconnect` event is emitted when the socket is disconnected:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当套接字断开连接时，会触发`disconnect`事件：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: connect_failed
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: connect_failed
- en: 'The `connect_failed` event is emitted when socket.io fails to establish a connection
    to the server for reasons such as when none of the transports work or authorization
    failed:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当socket.io由于传输失败或授权失败等原因无法与服务器建立连接时，会触发`connect_failed`事件：
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: error
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: error
- en: 'The `error` event is emitted when an error occurs and it cannot be handled
    by the other event types:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生错误且无法由其他事件类型处理时，会触发`error`事件：
- en: '[PRE27]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: message
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: message
- en: 'The `message` event is emitted when a message sent with `socket.send` is received:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`socket.send`发送的消息被接收时，会触发`message`事件：
- en: '[PRE28]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Here, `message` is the sent message and `ack_callback` is an optional acknowledgment
    function.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`message`是发送的消息，`ack_callback`是一个可选的确认函数。
- en: reconnect
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: reconnect
- en: 'The `reconnect` event is emitted when socket.io successfully reconnects to
    the server:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当socket.io成功重新连接到服务器时，会触发`reconnect`事件：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: reconnecting
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: reconnecting
- en: 'The `reconnecting` event is emitted when the socket is attempting to reconnect
    with the server:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当套接字尝试与服务器重新连接时，会触发`reconnecting`事件：
- en: '[PRE30]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: reconnect_failed
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: reconnect_failed
- en: 'The `reconnect_failed` event is emitted when socket.io fails to reestablish
    a working connection after the connection was dropped:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当socket.io在连接断开后无法重新建立有效连接时，会触发`reconnect_failed`事件：
- en: '[PRE31]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
