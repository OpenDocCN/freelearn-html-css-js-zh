- en: Chapter 4. Working with Variables, Mixins, and Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：使用变量、混入（mixins）和函数
- en: So far in this book, we've built up the basics of what will become our development
    toolkit for working with Less and taken a whistle-stop tour through some of the
    syntax and concepts that are associated with Less as a CSS preprocessor. I am
    sure some well-known actor once said in a film somewhere, "It's time...."
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这本书中，我们已经建立了将成为我们Less开发工具包的基础，并对Less作为CSS预处理器的一些语法和概念进行了快速浏览。我相信某个知名演员曾经在电影中说过，“是时候了....”
- en: Yes, it's time to get stuck with using Less! However, hold on; this chapter
    says it's about working with variables, functions, and the like; surely, this
    means we're developing in programming code, right?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，是时候深入使用Less了！然而，等等；这一章说它是关于使用变量、函数等，这当然意味着我们在编写编程代码，对吧？
- en: Wrong. Don't worry, my friends; granted, we will look at functions, but they
    are nothing like the functions you might see when developing using languages such
    as C# or Visual Basic. Indeed, the only similarity is the name—as we will see,
    functions within the world of Less are more akin to using a scientific calculator
    than complicated code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 错了。别担心，我的朋友们；虽然我们将要看看函数，但它们与你在使用C#或Visual Basic等语言开发时看到的函数完全不同。事实上，唯一的相似之处就是名称——正如我们将看到的，Less世界中的函数更像是使用科学计算器而不是复杂的代码。
- en: 'This is just a small part of what we will cover. Throughout this chapter, we
    will look at some of the building blocks of Less, including:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是我们将要涵盖的一小部分。在本章中，我们将探讨Less的一些构建块，包括：
- en: Creating and scoping variables
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和定义变量
- en: Developing simple and parametric mixins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发简单和参数化混入（mixins）
- en: Using Less functions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Less函数
- en: Using prebuilt libraries
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用预构建库
- en: Intrigued? Let's get started...
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣吗？让我们开始吧...
- en: Discovering variables in Less
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Less中探索变量
- en: 'As with all good things, we must start somewhere—it seems like an opportune
    moment to ask ourselves a question: for those of you who are already familiar
    with the basics of programming, when is a variable not a variable? It''s a constant—but
    hold on, this section is about variables, right...? If this seemed like double
    Dutch to you, then don''t worry, let me explain.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 就像所有美好的事物一样，我们必须从某个地方开始——现在似乎是一个合适的时机来问自己一个问题：对于那些已经熟悉编程基础的人来说，什么时候一个变量不是变量？它是常量——但是等等，这一节是关于变量的，对吧...？如果你觉得这听起来像是双关语，那么别担心，让我来解释。
- en: 'Variables in Less are very much like the variables in most programming or scripting
    languages—they act as a placeholder for a value. Consider the following code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Less中的变量与大多数编程或脚本语言中的变量非常相似——它们充当值的占位符。考虑以下代码：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Instead of the previous code we could write this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是之前的代码，我们可以这样写：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code will produce the same result.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码会产生相同的结果。
- en: You might ask yourself though, "Why write double the code for the same result?"
    Surely, we can simply use the first method, right?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问自己，“为什么为了同样的结果要写双倍代码？”当然，我们可以简单地使用第一种方法，对吧？
- en: Yes and no—on its own, this example isn't actually that effective. However—and
    this is where the big difference lies when using Less—it comes into its own when
    you are using the same rule to style multiple items of the same type, with the
    same effect.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 是又否——就这个例子本身而言，它实际上并不那么有效。然而——这正是使用Less时的重大区别——当你使用相同的规则来为同一类型的多个项目设置样式，并产生相同效果时，它就变得非常有用。
- en: If we had the need to style a number of buttons throughout a site, for example,
    then we would normally set the style either inline or using classes. This is likely
    to require updating of styles at several different places in our style sheet,
    if we need to make a change; this is time-consuming and prone to errors!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要在整个网站上为许多按钮设置样式，例如，那么我们通常会设置内联样式或使用类。如果我们需要更改样式，这可能会要求我们在样式表中多个不同位置更新样式；这是耗时且容易出错的！
- en: Instead, we set up variables at the start of our Less styling, which are used
    throughout our code. This means that with a single stroke, we can automatically
    update all the instances of a particular value; this can be a real timesaver,
    particularly if a client is unsure what they want to see!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们在Less样式的开头设置变量，这些变量在代码中会被使用。这意味着我们只需一击，就可以自动更新特定值的所有实例；这可以节省大量时间，尤其是如果客户不确定他们想看到什么时！
- en: The key to setting up variables is planning; with a little care and forethought,
    we can set up our variables at the head of the style sheet and then use them as
    appropriate throughout our Less code. To see what I mean, let's put this into
    practice with a simple example.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 设置变量的关键是规划；通过一点小心和前瞻性，我们可以在样式表的头部设置变量，然后在我们的 Less 代码中适当使用它们。为了说明我的意思，让我们用一个简单的例子来实践。
- en: Creating Polaroid images
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建宝丽来照片
- en: 'In the first example of this chapter, we''re going to use Less to create the
    tried-and-trusted **Polaroid effect**, as developed by the Canadian developer
    Nick La ([http://www.webdesignerwall.com](http://www.webdesignerwall.com)), and
    apply it to a number of images, as shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一个例子中，我们将使用 Less 创建经过验证的 **宝丽来效果**，这是加拿大开发者 Nick La ([http://www.webdesignerwall.com](http://www.webdesignerwall.com))
    开发的，并将其应用于多个图像，如下面的截图所示：
- en: '![Creating Polaroid images](img/00040.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![创建宝丽来照片](img/00040.jpeg)'
- en: The beauty of this is that there is no need for any JavaScript or jQuery in
    our code; it will use pure Less, which we will compile into valid CSS.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这的好处是，我们不需要在代码中使用任何 JavaScript 或 jQuery；它将使用纯 Less，我们将将其编译为有效的 CSS。
- en: For the purpose of this book, it is assumed that we will be using Sublime Text
    that has been configured to automatically compile Less files to valid CSS, as
    we saw in [Chapter 2](part0025_split_000.html#page "Chapter 2. Building a Less
    Development Toolkit"), *Building a Less Development Toolkit*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本书的目的，我们假设我们将使用配置为自动将 Less 文件编译为有效 CSS 的 Sublime Text，正如我们在[第 2 章](part0025_split_000.html#page
    "第 2 章. 构建Less开发工具包")中看到的，*构建Less开发工具包*。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using a different means to compile the Less code, then you will need
    to adjust the steps accordingly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用不同的方式来编译 Less 代码，那么你需要相应地调整步骤。
- en: In a copy of the code download that accompanies this book, extract a copy of
    `variables.html`—we will use this as the basis for our Polaroid image effect.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书附带的代码副本中，提取 `variables.html` 的副本——我们将以此为基础创建我们的宝丽来图像效果。
- en: 'With our framework in place, let''s add some styling. In a separate file, let''s
    start adding in the Less styles, beginning with the variables that will define
    our colors:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的框架建立之后，让我们添加一些样式。在一个单独的文件中，让我们开始添加 Less 样式，从定义我们颜色的变量开始：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now that we have created our variables, it''s time to use them; let''s begin
    by styling each list item, to turn them into the container for each image:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了变量，是时候使用它们了；让我们从为每个列表项添加样式开始，使它们成为每个图像的容器：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can now turn our attention to styling the contents of each Polaroid; let''s
    begin by setting the main images to appear within each container, and not displaced
    to right:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以将注意力转向为每个宝丽来图像的内容添加样式；让我们首先设置主要图像出现在每个容器内，而不是向右偏移：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next comes the addition of each flower image, along with its overlay effect:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是添加每个花朵图像及其叠加效果：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, let''s add the styling for each image caption:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们为每个图像标题添加样式：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Save the file as `variables.less`. Sublime Text will automatically compile this
    into a valid CSS file, although for the purpose of this demo, we will compile
    the Less code dynamically as it is not very complex.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为 `variables.less`。Sublime Text 将自动将其编译为有效的 CSS 文件，尽管在本演示中，我们将动态编译 Less
    代码，因为它并不复杂。
- en: 'The keen-eyed among you will notice that we are using a nonstandard font for
    the caption—this is the Handlee font, available from Google Fonts. To ensure that
    this works as expected, add this line immediately after the `<title>` tag in `variables.html`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 留意观察的读者会发现我们为标题使用了非标准字体——这是 Handlee 字体，可在 Google Fonts 中找到。为了确保它按预期工作，请立即在 `variables.html`
    中的 `<title>` 标签后添加此行：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you preview the results in a browser, you will see something similar to
    this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在浏览器中预览结果，你会看到类似以下的内容：
- en: '![Creating Polaroid images](img/00041.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![创建宝丽来照片](img/00041.jpeg)'
- en: 'In our example, we''ve created a number of variables to handle the colors being
    used; instead of displaying hex codes throughout our code, which aren''t easy
    to understand, we can use names, such as `@dark-brown`, which are easier to understand:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们创建了一系列变量来处理使用的颜色；而不是在我们的代码中显示难以理解的十六进制代码，我们可以使用名称，如 `@dark-brown`，这些名称更容易理解：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can also use variables to define text, such as:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用变量来定义文本，例如：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It is important to note that while using variables to define colors is the
    most common, it is by no means the only use for variables. We can also use variables
    to define strings, as we have done here, or even include them in URLs:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然使用变量来定义颜色是最常见的，但这绝不是变量的唯一用途。我们还可以使用变量来定义字符串，就像我们在这里所做的那样，甚至可以将它们包含在URL中：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will compile to:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译为：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is worth reading through the variable examples on the main Less site ([http://less.github.io/features/#variables-feature](http://less.github.io/features/#variables-feature)).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 值得阅读Less官方网站上的变量示例（[http://less.github.io/features/#variables-feature](http://less.github.io/features/#variables-feature)）。
- en: In our example, we compiled our styles dynamically; so, Less will automatically
    substitute every instance of each variable name for the appropriate value throughout
    our code. At this point, we could easily substitute the Less file for the compiled
    CSS file—it will produce the same effect. This is something we should do for a
    production environment; we should also go one step further and minimize the code
    to ensure that bandwidth usage is kept to a minimum.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们动态编译了我们的样式；因此，Less会自动将每个变量名在整个代码中的每个实例替换为相应的值。在这个时候，我们可以轻松地将Less文件替换为编译后的CSS文件——它会产生相同的效果。这是我们应该在生产环境中做的事情；我们还应该更进一步，最小化代码以确保带宽使用量保持在最低。
- en: Loading variables and setting the scope
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载变量和设置作用域
- en: 'When setting and using variables, there is one key element that we need to
    be aware of: setting variable scope when loading variables in Less.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置和使用变量时，有一个关键要素我们需要注意：在Less中加载变量时设置变量作用域。
- en: 'Variables in Less are **lazy-loaded**, which means they don''t have to be declared
    before being used. If we have declared an instance of a variable, then redeclare
    it with a new value. Less will always use the last definition of the variable,
    searching upwards from the point where it is called. Consider this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Less中的变量是**延迟加载**的，这意味着在使用之前不需要声明。如果我们已经声明了一个变量的实例，然后再次声明它并赋予新的值，Less将始终使用变量的最后定义，从它被调用的点向上搜索。考虑以下：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In this instance, you might expect to see `.style1` contain a rule of `one:
    3`. Instead, it will compile to `one: 1`, as the `@var: 3` is contained in the
    `.class1` class rule, which is not within the same scope. It becomes even more
    important that variables are correctly assigned at the right point in our Less
    code, as we don''t have to declare them upfront before using them. As an example,
    consider the following two methods of writing the same code, both of which will
    compile to equally valid CSS. Consider the first method:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个例子中，你可能期望看到 `.style1` 包含一个 `one: 3` 的规则。然而，它将编译为 `one: 1`，因为 `@var: 3` 包含在
    `.class1` 类规则中，而这个规则并不在相同的范围内。因此，在Less代码中正确地在正确的点上分配变量变得尤为重要，因为我们不需要在使用它们之前提前声明它们。作为一个例子，考虑以下两种编写相同代码的方法，这两种方法都会编译成同样有效的CSS。考虑第一种方法：'
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The other method of writing the code is as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 编写代码的另一种方法是：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Both will compile to:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都会编译为：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: See what I mean? The first method is more concise—there is no need to use the
    second method if it produces the same result! On this note, let's change tack
    and focus on how we can remove repetition in our Less code by introducing the
    use of mixins.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你明白我的意思吗？第一种方法更简洁——如果它产生相同的结果，就没有必要使用第二种方法！关于这一点，让我们改变方向，关注我们如何通过引入mixins的使用来减少Less代码中的重复。
- en: Exploring mixins
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索mixins
- en: When writing code, how many times have you written a similar code, but for different
    projects? Ever wondered if you could, with a little change in the writing style,
    convert to using prebuilt blocks of CSS that you can drop in a project at a moment's
    notice?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写代码时，你有多少次写出了类似但针对不同项目的代码？你是否想过，通过一点写作风格的变化，你可以转换到使用预构建的CSS块，你可以在需要的时候随时将其插入到项目中？
- en: 'Sure, you could start to create your own library of code—this would work perfectly
    well. However, it suffers from at least one potential drawback: you will very
    likely have to manually modify any stored code to fit the needs of a new project.
    While this will work, you might find yourself expending more time updating code
    than if it had been written from scratch!'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以开始创建自己的代码库——这会非常完美。然而，它至少有一个潜在的缺点：你很可能需要手动修改任何存储的代码以适应新项目的需求。虽然这会有效，但你可能会发现自己花费更多的时间更新代码，而不是从头开始编写！
- en: What if I said you could still maintain a code library, but you don't have to
    keep modifying each block of library code that you reuse? It is possible—with
    the use of Less' mixin functionality.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我说你仍然可以维护一个代码库，但不需要修改你重用的每个代码库块，这是可能的——通过使用Less的混入功能。
- en: Mixins are blocks of code that do as the name suggests—they can be mixed-in
    to your project code and called when required. They can even be moved to a library
    style sheet, which you can include in your projects—the beauty is that while you
    may have a library style sheet that is huge, only those styles that are actively
    used in the code are called and compiled in the resulting CSS style sheet.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 混入是代码块，正如其名所示——它们可以被混合到你的项目代码中，并在需要时调用。它们甚至可以被移动到库样式表中，你可以将其包含在你的项目中——美丽之处在于，虽然你可能有一个巨大的库样式表，但只有那些在代码中实际使用的样式会被调用并编译到最终的CSS样式表中。
- en: The uses for mixins are as wide as your imagination—it can be as simple as defining
    a block of static code to call in your CSS, all the way through to passing specific
    values as parameters to mixins, otherwise known as parametric mixins. To see how
    mixins can work, let's begin by creating a simple web form using normal CSS.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 混入的用途广泛，就像你的想象力一样——它可以是从定义一个静态代码块并在CSS中调用它这么简单，到将特定值作为参数传递给混入，也就是参数化混入。为了了解混入如何工作，让我们首先使用正常的CSS创建一个简单的网页表单。
- en: Creating a web form
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建网页表单
- en: If you've spent any time looking at websites—and in this modern day of technology,
    it would be difficult not to—then you will have come across, or needed to use,
    the ubiquitous contact form. They pop up everywhere—you could almost take the
    cynical view that people use them as a means of avoiding human contact!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你花过时间查看网站——在这个技术发达的现代社会，不这么做会很困难——那么你可能会遇到或需要使用无处不在的联系表单。它们无处不在——你甚至可以采取一种愤世嫉俗的观点，认为人们使用它们作为一种避免与人接触的手段！
- en: Nonetheless, they still serve a valid purpose. Over the next few sections, we're
    going to develop a simple contact form and enhance it using Less mixins to illustrate
    how they can be used to reduce the amount of code that we need to write.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，它们仍然有存在的价值。在接下来的几节中，我们将开发一个简单的联系表单，并使用Less混入来增强它，以展示它们如何被用来减少我们需要编写的代码量。
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For this example, you will need to avail yourself of a copy of the code download
    that accompanies this book, as we will be using content from it during the exercise.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，你需要准备这本书附带代码下载的副本，因为在练习中我们将使用其中的内容。
- en: 'Start by opening a copy of `project.html`, which we created earlier, and then
    updating the `<head>` section, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开我们之前创建的`project.html`副本，然后更新`<head>`部分，如下所示：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, add the following markup in between the `<body>` tags:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`<body>`标签之间添加以下标记：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Save this as `mixins.html`—a copy of this file is also available in the code
    download. From the code download, retrieve a copy of the `buttons.css` file that
    is in the `css` subfolder, in the code folder for this chapter. Space constraints
    mean all 59 lines of the file can''t be reproduced in full here, but once they
    are saved in the same folder, we can preview the results:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存为`mixins.html`——这个文件的副本也包含在代码下载中。从代码下载中，获取位于代码文件夹`css`子文件夹中的`buttons.css`文件，在这个章节的代码文件夹中。由于空间限制，文件的全部59行无法在此全部展示，但一旦它们保存在同一文件夹中，我们就可以预览结果：
- en: '![Creating a web form](img/00042.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![创建网页表单](img/00042.jpeg)'
- en: As we can see from the CSS styles, there is definitely a fair amount of repetition—even
    for an example as simple as ours! Let's change this by introducing mixins in our
    code.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们从CSS样式中所见，确实存在相当多的重复——即使是像我们这样简单的例子！让我们通过在代码中引入混入来改变这一点。
- en: Adding basic mixins
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加基本混入
- en: 'We can start by adding in two simple mixins to our code—let''s begin by editing
    a copy of `buttons.css` and then adding the following code at the start of the
    file:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从向代码中添加两个简单的混入开始——让我们先编辑`buttons.css`的副本，然后在文件开头添加以下代码：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we can remove the original code from the `.button` style block, as this
    is no longer needed—it will be replaced by the names of our three simple mixins:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以从`.button`样式块中移除原始代码，因为这将不再需要——它将被我们三个简单的混入名称所取代：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Save this as `mixins1.less`; we can then remove the `buttons.css` link that
    is already in the code. Don''t forget to add in a link for our Less file, within
    `mixins1.html`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存为`mixins1.less`；然后我们可以移除代码中已经存在的`buttons.css`链接。别忘了在`mixins1.html`中添加我们的Less文件链接：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Save the HTML file as `mixins1.html`—if we preview the results in a browser,
    we should not see any difference in the outcome, but we can rest assured with
    the knowledge that our three styles can be reused at any time in our code.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将HTML文件保存为`mixins1.html`——如果我们在一个浏览器中预览结果，我们不应该看到任何差异，但我们可以放心，我们知道我们的三种样式可以在代码中的任何时间重用。
- en: In our example, we've made a simple change to hive off styles in the blocks
    that we can reuse—in this instance, our three mixins could be called by any of
    the buttons used on a site, but they need to be of a similar style to ours. In
    each mixin, we've grouped together the styles that complement each other, such
    as `font-family` and `font-size`. There are no hard and fast rules about what
    should and shouldn't be grouped; it all comes down to what makes sense and helps
    reduce the amount of code we need to use.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们对可以重用的块中的样式进行了简单的修改——在这种情况下，我们的三个混入可以被网站上使用的任何按钮调用，但它们需要与我们的样式相似。在每个混入中，我们将互补的样式组合在一起，例如`font-family`和`font-size`。关于应该组合什么和不应该组合什么没有硬性规定；一切都取决于什么有意义并有助于减少我们需要使用的代码量。
- en: We can further develop mixins by passing in parameters—this makes them more
    useful, as we can use the same code to produce different results, depending on
    our needs. However, when working with mixins, there are a couple of *gotchas*
    that we need to be aware of—the first one is code repetition.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过传递参数来进一步开发混入——这使得它们更有用，因为我们可以使用相同的代码产生不同的结果，这取决于我们的需求。然而，当使用混入时，有几个需要注意的陷阱——第一个是代码重复。
- en: Hiding the original mixin
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐藏原始混入
- en: When working with mixins, Less will compile (and display) both the mixin and
    the calling code so that we end up with duplicated code in the CSS style sheet.
    This isn't desirable, as it will make the style sheet larger than it is necessary
    and harder to debug in the event of any issue.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用混入时，Less会编译（并显示）混入和调用代码，这样我们最终在CSS样式表中会有重复的代码。这并不理想，因为它会使样式表比必要的更大，而且在出现问题时更难调试。
- en: 'To get around this, we need to make a small modification to our existing styles—in
    the `mixin1.less` file, alter both the Less mixins, as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们需要对我们的现有样式进行一些小的修改——在`mixin1.less`文件中，修改以下两个Less混入：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Save the file as you normally do—Sublime Text will recompile the Less file.
    We can prove this by examining the code in Firebug—the following screenshot shows
    the effect of not using `()` in our mixins:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 按照常规保存文件——Sublime Text将重新编译Less文件。我们可以通过检查Firebug中的代码来证明这一点——以下截图显示了在我们的混入中不使用`()`的效果：
- en: '![Hiding the original mixin](img/00043.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![隐藏原始混入](img/00043.jpeg)'
- en: 'When the code has been compiled, you can clearly see that the styles have been
    removed—they are still present but are incorporated into the CSS style rules and
    not as separate mixins:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 代码编译完成后，你可以清楚地看到样式已经被移除——它们仍然存在，但已经包含在CSS样式规则中，而不是作为单独的混入：
- en: '![Hiding the original mixin](img/00044.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![隐藏原始混入](img/00044.jpeg)'
- en: Using the !important keyword
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`!important`关键字
- en: 'When working with mixins, we can also specify the `!important` attribute, in
    the same way as we might do with normal CSS. All we need to do is to add it immediately
    after any style that must take precedence over subsequent definitions of the same
    rule:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用混入时，我们也可以指定`!important`属性，就像我们可能对正常CSS所做的那样。我们只需要在必须优先于后续定义的同一规则的任何样式后立即添加它：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This will be compiled by Less as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这将由Less按以下方式编译：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As the second style rule has been assigned the `!important` attribute, this
    will take precedence over the first rule. The `!important` override should be
    used with care though—it has gained something of a bad reputation since its introduction
    in CSS1 as it has often been misused. When used with care, it can perform an important
    function—although some might say that if you need to rely on it, then it is worth
    checking your CSS to ensure that you can't achieve the same results without it!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 由于第二个样式规则被分配了`!important`属性，这将优先于第一个规则。虽然`!important`覆盖应该谨慎使用——自从它在CSS1中引入以来，它已经获得了一些坏名声，因为它经常被误用。但是，如果谨慎使用，它可以发挥重要作用——尽管有些人可能会说，如果你需要依赖它，那么检查你的CSS以确保在没有它的情况下无法达到相同的结果是值得的！
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a good explanation of the role of the `!important` tag in CSS as a whole,
    you might want to refer to Ian Devlin's article on how to best use this attribute,
    which you can find at [http://www.iandevlin.com/blog/2013/05/css/using-important-in-your-media-queries](http://www.iandevlin.com/blog/2013/05/css/using-important-in-your-media-queries).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于CSS中`!important`标签的整体作用的良好解释，你可能想参考Ian Devlin关于如何最佳使用此属性的文章，你可以在这里找到[http://www.iandevlin.com/blog/2013/05/css/using-important-in-your-media-queries](http://www.iandevlin.com/blog/2013/05/css/using-important-in-your-media-queries)。
- en: Let's move on and take a look at how you can make mixins more powerful by passing
    attributes.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续前进，看看你如何通过传递属性使混入更强大。
- en: Developing parametric mixins
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发参数化混入
- en: So far, we have examined how you can use mixins to create blocks of code that
    can easily be reused throughout your style sheets. On principle, this works great.
    However, what if you found yourself wanting to reuse the same block of code but
    couldn't, as the values were different?
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探讨了如何使用混入创建易于在整个样式表中重用的代码块。原则上，这工作得很好。然而，如果你发现自己想要重用相同的代码块，但由于值不同而无法重用，那该怎么办呢？
- en: Well, this is possible with Less; we've already covered how we can create mixins
    as reusable blocks of code. Let's take this a step further and introduce the use
    of parameters—here, we can pass values between the main Less file and individual
    mixins. When compiled, Less will use the appropriate values that are being passed
    to produce the desired CSS. Let's see this in action by making some changes to
    our simple form, which we created earlier in this chapter.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这是Less可以做到的；我们已经介绍了如何创建可重用的代码块混入。让我们更进一步，介绍参数的使用——在这里，我们可以在主Less文件和单个混入之间传递值。在编译时，Less将使用传递的适当值来生成所需的CSS。让我们通过对我们之前在本章中创建的简单表单进行一些更改来实际看看这个效果。
- en: 'Crack open a new file and add the following mixins:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新文件并添加以下混入：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Save the file as `mixinlibrary.less`. Next, let''s modify a copy of `mixins1.less`,
    as there are some styles contained in it that are now redundant. In `mixins1.less`,
    make the following changes to the `.button` mixin, as highlighted:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为`mixinlibrary.less`。接下来，让我们修改`mixins1.less`的一个副本，因为其中包含一些现在已经冗余的样式。在`mixins1.less`中，对`.button`混入进行以下更改，如高亮所示：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'At the top of `mixins1.less`, we need to link in our `mixinlibrary.less` file;
    otherwise, the compilation will fail with errors—to fix this, add the following
    line at the top of `mixins1.less`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mixins1.less`的顶部，我们需要链接我们的`mixinlibrary.less`文件；否则，编译将因错误而失败——为了解决这个问题，请在`mixins1.less`的顶部添加以下行：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We need to make a few more changes; in `mixins1.less`, we have three style
    rules for the `.red` class, namely `.red`, `.red:hover`, and `.red:active`. Within
    each, we need to change the rule for `.background-color` to use the Less mixin
    we''ve included in our mixin library. So, let''s go ahead and make the following
    changes, as highlighted:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做一些更多的更改；在`mixins1.less`中，我们对`.red`类有三个样式规则，即`.red`、`.red:hover`和`.red:active`。在每个规则中，我们需要更改`.background-color`的规则，以使用我们包含在混入库中的Less混入。所以，让我们进行以下更改，如高亮所示：
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Save the file as `parametric1.less`—don''t forget to update `parametric1.html`
    with a new link for the Less style sheet! If we preview the results in a browser,
    we can see that there has not been any change to our design (which we would expect):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为`parametric1.less`——别忘了更新`parametric1.html`，为Less样式表添加一个新的链接！如果我们在一个浏览器中预览结果，我们可以看到我们的设计（我们预期的）没有任何变化：
- en: '![Developing parametric mixins](img/00045.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![开发参数化混入](img/00045.jpeg)'
- en: 'However, on closer inspection using a DOM inspector, such as Firebug (under
    the **Console** section), we can see that our mixins from `mixinslibrary.less`
    have been imported successfully:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通过使用DOM检查器（如Firebug中的**控制台**部分）进行更仔细的检查，我们可以看到我们的`mixinslibrary.less`中的混入已经成功导入：
- en: '![Developing parametric mixins](img/00046.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![开发参数化混入](img/00046.jpeg)'
- en: We covered a couple of useful techniques in this exercise—it's worth taking
    a moment to go through this in some detail.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们介绍了几种有用的技术——花点时间详细了解一下是值得的。
- en: In previous exercises, we used mixins by defining them as static blocks of code
    that we can drop in at a moment's notice. This is great, but while the code blocks
    are static, they are limited to what's contained within each block; we will need
    to modify them to use different values if required, which makes them less useful.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的练习中，我们通过将它们定义为可以随时插入的静态代码块来使用mixin。这很好，但是尽管代码块是静态的，但它们局限于每个块内包含的内容；如果需要，我们需要修改它们以使用不同的值，这使得它们不太有用。
- en: 'Instead, we''ve incorporated parameters, such as this example:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们已纳入了参数，例如以下示例：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'These are passed from the calling statement to the mixin and used to produce
    different results, depending on the values being passed. When compiled using the
    mixin in `mixinlibrary.less`, this will produce the following CSS:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是从调用语句传递给mixin的，并用于根据传递的值产生不同的结果。当使用`mixinlibrary.less`中的mixin进行编译时，这将生成以下CSS：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This makes them infinitely more useful—one mixin can now serve a variety of
    different uses, depending on which values are passed to it.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这使它们变得无限有用——一个mixin现在可以根据传递给它的不同值提供各种不同的用途。
- en: Now, did the keen-eyed among you notice that I said we introduced a couple of
    useful techniques here? Well, the second one is the use of the `@import` statement.
    It is worth getting to know this keyword well, as it is a key part of Less. It
    allows you to break down long, complicated Less files into smaller, more manageable
    ones.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，那些敏锐的眼睛中的人注意到我说我们在这里引入了几种有用的技术吗？好吧，第二个是使用`@import`语句。值得很好地了解这个关键字，因为它是Less的关键部分。它允许你将长而复杂的Less文件分解成更小、更易于管理的文件。
- en: 'Hold on, I hear you ask: doesn''t this mean more CSS files? No, that''s the
    beauty of Less; it doesn''t matter how many Less files you create, you will always
    end up with one compiled CSS file. Ideally, we would limit the number in practice,
    for practical purposes (7-10 is a good guideline, to allow uses such as WordPress).
    If you find yourself using more than 10, then I would suggest that you revisit
    your page design! We will return to importing Less and CSS files later in this
    chapter, in the *Using external libraries* section and also in [Chapter 5](part0050_split_000.html#page
    "Chapter 5. Inheritance, Overriding, and Nesting in Less"), *Inheritance, Overriding,
    and Nesting in Less*.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下，我听到你在问：这难道不是意味着更多的CSS文件吗？不，这正是Less的美丽之处；无论你创建多少Less文件，你最终都会得到一个编译后的CSS文件。理想情况下，我们会限制其实际数量，出于实用目的（7-10是一个很好的指导原则，以允许使用WordPress等）。如果你发现自己使用了超过10个，那么我建议你重新审视你的页面设计！我们将在本章的*使用外部库*部分以及[第5章](part0050_split_000.html#page
    "第5章。Less中的继承、覆盖和嵌套")，*Less中的继承、覆盖和嵌套*中稍后返回到导入Less和CSS文件。
- en: Let's move on and take this a step further; we introduced the use of multiple
    parameters with the use of the `.box-shadow` mixin, but it would be worth taking
    out time to explore these further, as we can make more useful changes to our page's
    Less design.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更进一步；我们通过使用`.box-shadow`mixin引入了多个参数的使用，但值得花时间进一步探索这些，因为我们可以对我们的页面Less设计做出更有用的更改。
- en: Passing multiple parameters
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传递多个参数
- en: So far, we've seen how you can pass a single parameter to a mixin, such as the
    radius size when using the border-radius rule. This is a great start, but as always,
    we can do more—how about passing in *multiple* parameters?
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何向mixin传递单个参数，例如使用border-radius规则时的半径大小。这是一个很好的开始，但就像往常一样，我们可以做得更多——传递多个参数怎么样？
- en: This opens up a world of possibilities, as we can widen the scope of what can
    be passed to our mixins. For example, if we're creating gradients, then we will
    have to hardcode color values in our mixins, which doesn't make them very flexible!
    Instead, if we use parametric mixins, then this allows us to pass colors as parameters
    to the mixin, thereby making the mixin far more flexible and useful.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们打开了无限的可能性，因为我们现在可以扩大传递给我们的mixin的范围。例如，如果我们正在创建渐变，那么我们将在我们的mixin中硬编码颜色值，这使它们不太灵活！相反，如果我们使用参数化mixin，那么这允许我们将颜色作为参数传递给mixin，从而使mixin更加灵活和有用。
- en: Let's take a look at how this works in practice, by updating our existing code
    for `linear-gradient` (and the associated vendor prefixes), to use a Less mixin.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在实际中它是如何工作的，通过更新我们现有的`linear-gradient`（和相关供应商前缀）代码，以使用Less mixin。
- en: 'In a copy of `mixinlibrary.less`, add the following mixin at the end of the
    file:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mixinlibrary.less`的一个副本中，在文件末尾添加以下mixin：
- en: '[PRE30]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We now have redundant code in our Less file; so, in a copy of `parametric1.less`,
    remove the six background statements in each block, along with the filter and
    border statements. In their place, add the following, as highlighted:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 Less 文件中有冗余代码；因此，在 `parametric1.less` 的副本中，删除每个块中的六个背景语句，以及过滤器和边框语句。用以下内容替换它们，如高亮所示：
- en: '[PRE31]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Save the file as `parametric2.less`—don't forget to update the `parametric.html`
    file with the new name of our Less file.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为 `parametric2.less`——别忘了更新 `parametric.html` 文件，使用我们 Less 文件的新名称。
- en: In this exercise, we continued with the theme of using parametric mixins, but
    this time, we called the same mixin with different parameters in each instance.
    In theory, it doesn't matter how many parameters are passed as long as Less can
    match them with valid inputs in each mixin. However, if you end up with more than
    4-5 parameters being passed, then it would be a good point to reassess your mixin
    and perhaps see if it should be rewritten!
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们继续使用参数化 mixin 的主题，但这次，我们在每个实例中用不同的参数调用相同的 mixin。从理论上讲，只要 Less 能够将它们与每个
    mixin 中的有效输入匹配，传递多少参数都没有关系。然而，如果你最终传递了 4-5 个以上的参数，那么重新评估你的 mixin 并可能考虑是否需要重写会是一个好主意！
- en: 'If we preview the results in a browser, we should not expect to see any visible
    results in our form, but we can see the change from within the HTML tab in Firebug:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中预览结果，我们不应该期望在我们的表单中看到任何可见的结果，但我们可以在 Firebug 的 HTML 选项卡中看到变化：
- en: '![Passing multiple parameters](img/00047.jpeg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![传递多个参数](img/00047.jpeg)'
- en: Applying conditions to mixins
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将条件应用于 mixin
- en: When using static or parametric mixins, there is one thing that we should note—the
    mixin will be applied, no matter what the circumstances are and provided that
    any parameters passed to a mixin can be correctly matched and processed.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用静态或参数化 mixin 时，我们应该注意的一件事是——无论情况如何，只要传递给 mixin 的任何参数可以正确匹配和处理，mixin 都会被应用。
- en: This isn't always a good thing; fortunately, we can fix this by attaching conditions
    to mixins so that they only execute if they can fulfill the condition(s) attached.
    These are known as **guarded mixins**—we will cover these in more detail in [Chapter
    8](part0074_split_000.html#page "Chapter 8. Media Queries with Less"), *Media
    Queries with Less*, where we will see how Less can be put to good use when producing
    responsive websites.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不总是好事；幸运的是，我们可以通过给 mixin 添加条件来修复这个问题，这样它们只有在满足附加的条件时才会执行。这些被称为 **受保护 mixin**——我们将在第
    8 章 [第 8 章. 使用 Less 的媒体查询](part0074_split_000.html#page "Chapter 8. Media Queries
    with Less") 中更详细地介绍这些内容，我们将看到 Less 在制作响应式网站时如何得到良好的应用。
- en: Using special keywords
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用特殊关键词
- en: If you spend any time working with mixins, then there are two useful variables
    that you will come across at some point in your Less development. They are `@arguments`
    and `@rest`. Let's take a look at how they work, in the context of the `.box-shadow`
    mixin we created in the last exercise.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你花时间与 mixin 一起工作，那么在 Less 开发过程中，你会在某个时候遇到两个有用的变量：`@arguments` 和 `@rest`。让我们看看它们是如何工作的，以我们上一次练习中创建的
    `.box-shadow` mixin 为例。
- en: 'In the last exercise, we created the `.box-shadow` mixin to handle our `box-shadow`
    styling:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个练习中，我们创建了 `.box-shadow` mixin 来处理我们的 `box-shadow` 样式：
- en: '[PRE32]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We referenced this mixin using the following command, which works perfectly
    well:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下命令引用了这个 mixin，它工作得非常完美：
- en: '[PRE33]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'However, if you don''t want to deal with all of the individual parameters (and
    particularly if there are a few involved), then you can replace `@x @y @blur @color;`
    with the `@arguments` variable:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你不想处理所有单个参数（尤其是如果涉及几个参数），那么你可以将 `@x @y @blur @color;` 替换为 `@arguments`
    变量：
- en: '[PRE34]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This handles the individual parameters in exactly the same way and produces
    valid CSS when compiled by Less.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这将以完全相同的方式处理单个参数，并在 Less 编译时产生有效的 CSS。
- en: 'If, however, you want to alter the number of parameters accepted by a mixin,
    then you can use Less'' ability to reference named variables. Less will automatically
    match them with the variables in the mixin and produce the appropriate result
    when compiling the code. For example:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想改变 mixin 接受的参数数量，那么你可以使用 Less 的能力来引用命名变量。Less 将会自动将它们与 mixin 中的变量匹配，并在编译代码时产生适当的结果。例如：
- en: '[PRE35]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You can also use the `@rest` keyword—we first pass different values to any
    named variable in the parameter list and then use `@rest` to tell Less to work
    with the remaining variables as they are now:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 `@rest` 关键字——我们首先将不同的值传递给参数列表中的任何命名变量，然后使用 `@rest` 来告诉 Less 使用剩余的变量，就像现在这样：
- en: '[PRE36]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'These two simple tricks will be of great help when you start working with mixins—there
    is one trick that we have not covered yet, which is a little more advanced: using
    mixins as if they were functions. Let''s fix this now and see what this means
    for developing mixins.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始使用mixin时，这两个简单的技巧将非常有帮助——我们还没有介绍的一个技巧稍微复杂一些：将mixin用作函数。现在让我们解决这个问题，看看这对开发mixin意味着什么。
- en: Creating mixins as functions
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将mixin作为函数创建
- en: On our journey through creating and developing mixins, we've seen how you can
    hive off styles into groups and vary the output if needed, if it is set to receive
    values from the calling statements. We have not covered one area though, which
    is the use of functions within mixins—let's remedy this and take a brief look
    at what this means.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建和开发mixin的旅程中，我们看到了如何将样式分组并按需更改输出，如果它被设置为接收调用语句的值。但我们还没有涵盖一个领域，那就是在mixin中使用函数——让我们纠正这一点，并简要看看这意味着什么。
- en: 'Any variable created inside a mixin is visible to the outside world and can
    be referenced from the calling statement. This means that within a mixin, we can
    call another mixin and reference any variable from within the second mixin:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在mixin内部创建的任何变量都对外部世界可见，并且可以从调用语句中引用。这意味着在mixin内部，我们可以调用另一个mixin并引用第二个mixin内部的任何变量：
- en: '[PRE37]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The previous code, when compiled, results in:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码在编译后会产生：
- en: '[PRE38]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Taking this further, we can use the variables defined within a mixin, as if
    it were a return value—this applies to any variable that is being called within
    the mixin:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 将此进一步扩展，我们可以在mixin内部定义的变量中像返回值一样使用它们——这适用于在mixin内部被调用的任何变量：
- en: '[PRE39]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The preceding code will result in the following:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将产生以下结果：
- en: '[PRE40]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This is really useful, as it means that we don't have to have a bunch of declarations
    for variables at the start of our code, but we can convert them into mixins that
    we can store in a mixin library and reuse in future projects. We will cover this
    in more detail, as a real-world example, in the *Moving calculations to a mixin*
    section of this chapter.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常有用，因为它意味着我们不必在代码开头声明一大堆变量，而是可以将它们转换为可以存储在mixin库中并在未来项目中重用的mixin。我们将在本章的“将计算移动到mixin”部分更详细地介绍这一点。
- en: Using external libraries
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用外部库
- en: Until now, we've developed a number of mixins and referenced them from either
    our main Less file or from a library file that we've created to store a number
    of our mixins. This is all good, but—hold on for a minute—one of Less' core concepts
    is DRY or Don't Repeat Yourself. While we are creating these mixin library files,
    we are (in a sense) repeating what other individuals may have already done, by
    creating—and publishing—their own solution.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经开发了许多mixin，并从我们的主Less文件或我们创建的用于存储多个mixin的库文件中引用它们。这都很好，但是——稍等一下——Less的核心概念之一是DRY（Don't
    Repeat Yourself）。当我们创建这些mixin库文件时，我们在某种程度上是在重复其他人可能已经做的事情，通过创建和发布他们自己的解决方案。
- en: 'With this in mind, it is worth researching online to see if anyone has already
    made their own mixin library available for use; there are a number of good libraries
    you can try, which include:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，值得在网上搜索看看是否有人已经发布了他们自己的mixin库供使用；你可以尝试一些好的库，包括：
- en: '**LESS Elements**: This is available at [http://www.lesselements.com](http://www.lesselements.com)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LESS Elements**：可在[http://www.lesselements.com](http://www.lesselements.com)找到'
- en: '**LESS Hat 2**: This can be downloaded from [http://www.lesshat.com](http://www.lesshat.com)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LESS Hat 2**：可以从[http://www.lesshat.com](http://www.lesshat.com)下载'
- en: '**3L**: This is hosted on GitHub at [http://mateuszkocz.github.io/3l/‎](http://mateuszkocz.github.io/3l/%E2%80%8E)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**3L**：托管在GitHub上，[http://mateuszkocz.github.io/3l/](http://mateuszkocz.github.io/3l/)'
- en: '**ClearLess**: This is available at [https://github.com/clearleft/clearless](https://github.com/clearleft/clearless)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ClearLess**：可在[https://github.com/clearleft/clearless](https://github.com/clearleft/clearless)找到'
- en: The Less library available as part of Bootstrap also contains some useful mixins—we
    will look at this in more detail, in [Chapter 10](part0091_split_000.html#page
    "Chapter 10. Using Bootstrap with Less"), *Using Bootstrap with Less*.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Bootstrap的一部分提供的Less库也包含一些有用的mixin——我们将在第10章“使用Bootstrap与Less”中更详细地探讨这一点，[第10章](part0091_split_000.html#page
    "第10章。使用Bootstrap与Less")。
- en: There are hundreds more available online—it is worth taking the time to look,
    as a library may exist that fulfills your need.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在线还有数百个可供选择——花时间查找是值得的，因为可能存在一个库能满足你的需求。
- en: 'To incorporate the library, it is as easy as adding this line to the head of
    your Less file:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要包含库，只需将此行添加到你的Less文件头部即可：
- en: '[PRE41]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Call the name of the mixin, including any parameters that are needed. We've
    already used this earlier in this chapter, in the *Developing parametric mixins*
    section—the principles used there apply here too, whether it be for calling in
    a prebuilt library made by someone else or one of your own creations.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 调用混入的名称，包括所需的任何参数。我们已经在本章的*开发参数化混入*部分中使用了这种方法，那里的原则也适用于这里，无论是调用别人制作的预构建库还是你自己的创作。
- en: Enough talk of mixins—let's change the subject and focus on another area of
    Less, which is the use of functions in our code.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 足够讨论混入（mixins）了——让我们转换话题，关注Less的另一个领域，那就是在代码中使用函数。
- en: Introducing functions
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍函数
- en: Another useful feature of Less is its ability to work out values that should
    be used in CSS, as a result of calculating the answers to functions and not merely
    using static values.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Less的另一个有用特性是它能够计算出在CSS中应该使用的值，这是通过计算函数的答案而不是仅仅使用静态值来实现的。
- en: If you are already familiar with functions in programming, you might think that
    using functions in Less will involve writing lots of complicated formulae. Before
    you put your hands up in horror, fear not—it doesn't have to be that complicated!
    In this section, we're going to take a look at how you can use some simple math
    functions to automatically calculate values, using operators and the `data-uri`
    function as the basis for some examples of the many functions available within
    Less.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经熟悉编程中的函数，你可能会认为在Less中使用函数将涉及编写大量的复杂公式。在你举手表示恐惧之前，不要害怕——它不必那么复杂！在本节中，我们将探讨如何使用一些简单的数学函数自动计算值，使用运算符和`data-uri`函数作为Less中提供的许多函数的示例的基础。
- en: Note
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can see the complete list of functions, on the main website at [http://lesscss.org/functions/](http://lesscss.org/functions/).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在主网站上看到函数的完整列表，网址为[http://lesscss.org/functions/](http://lesscss.org/functions/)。
- en: Creating column-based layouts
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基于列的布局
- en: One of the many tasks that a developer has to perform is to build the outline
    framework for a site—this could be one of the hundreds of designs, but it is likely
    that it will involve the use of columns in some format.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者必须执行的任务之一是为网站构建大纲框架——这可能是数百种设计之一，但很可能它将以某种形式使用列。
- en: 'In some cases, this can be fraught with problems, particularly when dealing
    with differences between each browser. Thankfully, Less can help here—we can use
    some of its maths operators to construct a suitable layout with ease. To give
    you an idea of what can be done, here''s a screenshot of the finished article
    from our next exercise:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，这可能会带来问题，尤其是在处理不同浏览器之间的差异时。幸运的是，Less可以在这里提供帮助——我们可以使用它的一些数学运算符轻松构建合适的布局。为了给你一个概念，这里有一个我们下一个练习中完成的文章的截图：
- en: '![Creating column-based layouts](img/00048.jpeg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![创建基于列的布局](img/00048.jpeg)'
- en: In a copy of the code download that accompanies this book, extract a copy of
    `functions1.html`—we will use this as the basis for styling our simple page layout.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在随本书附带的代码下载副本中，提取`functions1.html`的副本——我们将以此为基础来设计我们的简单页面布局。
- en: 'If we preview the results now, the design will look terrible. Let''s fix this
    by adding in the all-important styling rules. In a new file, add the following
    Less styles:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在预览结果，设计看起来会很糟糕。让我们通过添加至关重要的样式规则来修复这个问题。在一个新文件中，添加以下Less样式：
- en: '[PRE42]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Save the file as `functions.less`. Sublime Text will automatically compile
    this into a valid CSS file as `functions.css`. If we preview the results, we should
    see a simple, yet perfectly acceptable page appear:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为`functions.less`。Sublime Text将自动将其编译为有效的CSS文件`functions.css`。如果我们预览结果，我们应该看到一个简单但完全可接受的页面出现：
- en: '![Creating column-based layouts](img/00049.jpeg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![创建基于列的布局](img/00049.jpeg)'
- en: 'In this example, we''ve used a number of styles to produce a simple two-column
    web page. The key to this trick lies in the following code:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了一些样式来制作一个简单的两列网页。这个技巧的关键在于以下代码：
- en: '[PRE43]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Here, we've set three variables; the first variable, `@basewidth`, sets the
    overall size of the content container and is crucial for working out the widths
    that we will use for each column. Next, we've set the `@mainwidth` value, which
    calculates the value from `@basewidth`, divided by `1.618` (or approximately 61
    percent)—this gives a value of `494px`. Lastly, we use the same principle to work
    out the value for the column—the formula for this becomes `800 x 0.382`, which
    gives `305.6px` or approximately 39 percent of the total width.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们设置了三个变量；第一个变量`@basewidth`设置了内容容器的整体大小，这对于确定我们将使用的每个列的宽度至关重要。接下来，我们设置了`@mainwidth`值，它从`@basewidth`计算得出，除以1.618（或大约61%）——这给出了`494px`的值。最后，我们使用相同的原则来计算列的值——这个公式的结果变为`800
    x 0.382`，这给出了`305.6px`或大约总宽度的39%。
- en: Using this calculation means that we can be sure that the columns will maintain
    the correct width, irrespective of the size of our container.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个计算意味着我们可以确保列将保持正确的宽度，无论我们的容器大小如何。
- en: Moving calculations to a mixin
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将计算移动到mixin中
- en: In the last example, we used some simple maths to determine the sizes needed
    to produce a two-column layout; this formed the basis of a simple, but useful
    page layout that could be used to produce any number of websites with relative
    ease.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，我们使用了一些简单的数学来确定生成两列布局所需的大小；这构成了一个简单但有用的页面布局的基础，可以轻松地用于创建任何数量的网站。
- en: However, there is still a nagging thought that we could do better—what if we
    could turn our statements into a mixin and use it as if it were a function? Sounds
    crazy? Well, perhaps not—we covered the basics of how to do this earlier in the
    chapter, in the *Creating mixins as functions* section. Let's put some of that
    theory into practice and see it in action.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还有一个挥之不去的想法，那就是我们能否做得更好——如果我们能把我们的声明转换成一个mixin，并像使用函数一样使用它呢？听起来疯狂吗？嗯，也许并不——我们已经在本章的“创建函数式mixin”部分介绍了如何做到这一点的基础。让我们将一些理论应用到实践中，看看它是如何运作的。
- en: 'Start by opening a copy of `functions.less`, which we used to create our Less
    styling for the page demo earlier. At the top, remove the top three variable statements.
    Next, add the following mixin immediately below it—this is our replacement for
    the statements we have just commented out:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开我们之前用于创建页面演示Less样式的`functions.less`副本。在顶部，删除前三条变量声明。接下来，立即在其下方添加以下mixin——这是我们替换掉刚刚注释掉的声明的替代品：
- en: '[PRE44]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We need to adjust the three `<div>` elements, where we use the variables from
    within this mixin; so, go ahead and make the following changes, as highlighted:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要调整三个使用此mixin中变量的`<div>`元素；所以，请按照以下突出显示的更改进行操作：
- en: '[PRE45]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Save the changes as `functions.less`. If you preview the results in a browser,
    you should not see any change to the page visually. However, this gives us the
    opportunity to hive off the mixin into a mixin library, if we've been creating
    one—a great example is the `mixinlibrary.less` file, which we put together earlier
    in the book. Even though this will, by now, contain a number of mixins that we
    wouldn't need to use here, Less will only ever pull in those mixins that it needs
    to use if it encounters a direct call for them as part of the compilation process.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 将更改保存为`functions.less`。如果你在浏览器中预览结果，你应该在视觉上看不到任何变化。然而，这给了我们一个机会，如果我们一直在创建一个mixin库，就可以将mixin分离出来——一个很好的例子是我们之前在书中编写的`mixinlibrary.less`文件。尽管现在这个文件可能包含许多我们在这里不需要使用的mixin，但Less只会拉入它在编译过程中直接调用的那些mixin。
- en: Working with the data-uri function
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用data-uri函数
- en: At this point, we're going to completely change tack and look at the other functions
    available within Less—the use of the `data-uri` option.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们将完全改变方向，看看Less中可用的其他函数——`data-uri`选项的使用。
- en: '`Data-uri` is a function available in Less, which inlines a resource to your
    style sheet; it avoids the need to link to external files by embedding the content
    directly in your style sheet. Although it may not help with document sizes, it
    will help reduce the number of HTTP requests from your server; this is one of
    the key factors that can affect how fast a page loads on the Internet. We will
    cover more of some of the pitfalls at the end of this section.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`Data-uri`是Less中可用的一个函数，它将资源内联到样式表中；通过直接在样式表中嵌入内容，它避免了需要链接到外部文件的需求。尽管这可能对文档大小没有帮助，但它将有助于减少从服务器发出的HTTP请求数量；这是影响互联网上页面加载速度的关键因素之一。我们将在本节末尾介绍更多关于这些陷阱的内容。'
- en: 'Let''s get started with writing some code—there are a few steps involved in
    this process, so to give you a flavor of what we are going to produce, here''s
    a screenshot of the finished article:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写一些代码——这个过程涉及几个步骤，为了让你了解我们将要产生的内容，这里有一张完成作品的截图：
- en: '![Working with the data-uri function](img/00050.jpeg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![使用 data-uri 函数工作](img/00050.jpeg)'
- en: 'Let''s start by opening a copy of `functions1.html` and altering the `<div>`
    footer, as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从打开 `functions1.html` 的副本并修改 `<div>` 页脚开始：
- en: '[PRE46]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Save this as `functions2.html`. We need to add some social media icons at this
    point—there are thousands available on the Internet; the ones I''ve used in our
    example are the icons from *Vintage Social Media Stamps: Icon Pack* by John Negoita,
    which are available at [http://designinstruct.com/free-resources/icons/vintage-social-media-stamps-icon-pack/](http://designinstruct.com/free-resources/icons/vintage-social-media-stamps-icon-pack/).'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '将此文件保存为 `functions2.html`。在此处，我们需要添加一些社交媒体图标——互联网上有成千上万的选择；我在我们的示例中使用的是来自 *Vintage
    Social Media Stamps: Icon Pack* 的图标，由 John Negoita 设计，可在 [http://designinstruct.com/free-resources/icons/vintage-social-media-stamps-icon-pack/](http://designinstruct.com/free-resources/icons/vintage-social-media-stamps-icon-pack/)
    获取。'
- en: If you would like some inspiration, you may want to take a look at the various
    packs listed at [http://www.hongkiat.com/blog/free-social-media-icon-sets-best-of/](http://www.hongkiat.com/blog/free-social-media-icon-sets-best-of/)—there
    are some stunning examples on display!
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要一些灵感，你可能想看看 [http://www.hongkiat.com/blog/free-social-media-icon-sets-best-of/](http://www.hongkiat.com/blog/free-social-media-icon-sets-best-of/)
    上列出的各种包——展示了一些令人惊叹的例子！
- en: 'In this example, we''re using three icons: the RSS, Facebook, and Twitter icons,
    although you may prefer to use different icons from the pack, depending on your
    needs.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了三个图标：RSS、Facebook 和 Twitter 图标，尽管你可能更喜欢根据你的需求使用包中的不同图标。
- en: Next, to make positioning of the icons easier, we're going to convert them into
    an image sprite. For the uninitiated, image sprites are a really useful means
    of reducing the number of requests for resources from the server. This is particularly
    useful if you have lots of small images, such as arrows or icons, on your site;
    once you've downloaded the initial image, it will be cached for further use elsewhere
    on the site.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了使图标的定位更容易，我们将它们转换成图像精灵。对于初学者来说，图像精灵是一种非常有用的方法，可以减少从服务器请求资源的数量。如果你网站上有很多小图像，如箭头或图标，这尤其有用；一旦下载了初始图像，它将在网站上其他地方缓存以供进一步使用。
- en: Note
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to learn more about using CSS image sprites, then visit [http://css-tricks.com/css-sprites/](http://css-tricks.com/css-sprites/).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要了解更多关于使用 CSS 图像精灵的信息，请访问 [http://css-tricks.com/css-sprites/](http://css-tricks.com/css-sprites/)。
- en: There are a number of ways to create image sprites; the easiest way is to use
    an online service such as the one at [http://spritepad.wearekiss.com/](http://spritepad.wearekiss.com/),
    which we will use in our example.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 创建图像精灵有多种方法；最简单的方法是使用在线服务，例如 [http://spritepad.wearekiss.com/](http://spritepad.wearekiss.com/)
    上的服务，我们将在示例中使用它。
- en: Browse to the site and then drag-and-drop each image onto the grid. Position
    them until you have an even gap around each image—aim to leave 3-5 pixels between
    each image. When you are happy with the layout, click on **Download** to obtain
    the converted sprite and associated CSS styles that are produced by the site.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到网站，然后将每个图像拖放到网格上。调整它们的位置，直到每个图像周围都有均匀的间隙——目标是在每个图像之间留下 3-5 像素。当你对布局满意时，点击
    **下载** 以获取网站生成的转换后的精灵和相关的 CSS 样式。
- en: 'From the compressed archive that we''ve just downloaded, extract the image
    to the `lessjs` project folder; store it within the `img` subfolder. Switch to
    a new document in your text editor and then add the following, assuming that you''ve
    used the same icons as those outlined earlier:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们刚刚下载的压缩存档中，将图像提取到 `lessjs` 项目文件夹中；将其存储在 `img` 子文件夹中。切换到你的文本编辑器中的新文档，然后添加以下内容，假设你已经使用了前面概述的相同图标：
- en: '[PRE47]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Save the file as `social.less`—don''t forget to add a link to `social.less`
    in the `<head>` section of `functions2.html`:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为 `social.less`——别忘了在 `functions2.html` 的 `<head>` 部分添加对 `social.less`
    的链接：
- en: '[PRE48]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Sublime Text will have compiled the code into valid CSS—while the benefits
    of using this method won''t be apparent immediately, you will see the effects
    once you look at the `social.css` file that is produced (and which is available
    in the code download for this book). To give you a flavor, this is an extract
    from our compiled `social.css` file:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Sublime Text 会将代码编译成有效的 CSS——虽然使用这种方法的好处可能不会立即显现，但当你查看生成的 `social.css` 文件时（该文件包含在本书的代码下载中），你将看到效果。为了给你一个大致的概念，这是从我们的编译
    `social.css` 文件中提取的内容：
- en: '[PRE49]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If you save the files and preview the results in a browser, you will see the
    icons appear in the footer of your page, similar to this screenshot:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将文件保存并在浏览器中预览结果，你将看到图标出现在页脚，类似于这个截图：
- en: '![Working with the data-uri function](img/00051.jpeg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![使用 data-uri 函数](img/00051.jpeg)'
- en: In our example, we've taken three images and converted them into a single image
    sprite. We've then referenced this from our Less style sheet, using the `data-uri`
    function, and positioned this on our page using standard CSS attributes to determine
    the height and width (necessary for the background-image rule to work correctly).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们取了三张图像并将它们转换成一张单独的图像精灵。然后我们使用 `data-uri` 函数从我们的 Less 样式表中引用它，并使用标准的
    CSS 属性来确定其高度和宽度（这对于背景图像规则的正确工作是必要的）。
- en: Using the data-uri function – some words of caution
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 data-uri 函数——一些注意事项
- en: 'While it is in a developer''s best interests to ensure that his/her page sizes
    are kept to a minimum, there are some pitfalls that we need to be aware of when
    using `data-uris`:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然确保页面大小保持在最小是开发者的最佳利益，但在使用 `data-uris` 时，我们仍需注意一些潜在的问题：
- en: Updating sites that use `data-uri` to render images throughout can make it harder
    to maintain—it's better to use `data-uri` where icons or images are frequently
    repeated.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将使用 `data-uri` 渲染图像的网站更新可能会使其维护变得更加困难——最好在图标或图像频繁重复的地方使用 `data-uri`。
- en: It's a good practice to set a long expiry time on the CSS style sheet so that
    it remains cached as much as possible, particularly for often-repeated images.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 CSS 样式表中设置一个较长的过期时间是一个好习惯，这样可以使样式表尽可能多地被缓存，尤其是对于经常重复出现的图像。
- en: Some browsers will have strict limits on the size of `data-uri` that can be
    used. For example, IE8 has a maximum of 32KB; this will limit the size of the
    images that can be used.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些浏览器会对可使用的 `data-uri` 的大小设置严格的限制。例如，IE8 的最大限制是 32KB；这将限制可以使用的图像大小。
- en: You will find that embedded code means larger file sizes—this isn't necessarily
    an issue as long as the document is cached; you can help reduce this by using
    the **gzip** compression if needed.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你会发现嵌入式代码意味着更大的文件大小——只要文档被缓存，这通常不是问题；如果需要，你可以通过使用 **gzip** 压缩来帮助减少这一点。
- en: This shouldn't put you off from using `data-uri`—it just means that you need
    to be careful about its use in your pages! `Data-uri` is a really useful way of
    reducing the number of requests to the server, as long as the content to be used
    is chosen with care. A good example is small credit card images—these are repeated
    frequently throughout an e-commerce site, so they could easily be used inline
    within a CSS style sheet.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这不应该让你对使用 `data-uri` 挫折——它只是意味着你需要小心地在你的页面上使用它！只要谨慎选择要使用的内容，`Data-uri` 是一种非常实用的方法，可以减少对服务器的请求次数。一个很好的例子是小的信用卡图像——这些图像在电子商务网站上频繁重复，因此它们可以很容易地内联在
    CSS 样式表中。
- en: Summary
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Phew! We've covered a lot in this chapter! Let's recap what we learned.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 呼吁！我们在本章中涵盖了大量的内容！让我们回顾一下我们学到了什么。
- en: We kicked off with a look at how to create variables in Less, and with care,
    we used them to good effect in creating our take on the time-honored Polaroid
    effect on a series of images. We saw how this can be a real timesaver, by reducing
    the number of alterations required to code, while at the same time, noting that
    the scope of variables can be varied, and how this can impact our code.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先探讨了如何在 Less 中创建变量，并且谨慎地使用它们来有效地创建一系列图像上的经典宝丽来效果。我们看到了这种方法如何真正节省时间，通过减少对代码的修改次数，同时注意到变量的作用域可以变化，以及这如何影响我们的代码。
- en: We then moved on to looking at mixins—both the static and parametric varieties.
    Here, we saw, with a little forethought, that we could create reusable blocks
    of code that can be dropped in with ease either within our main Less file or a
    code library file. We used this technique to iteratively alter the code required
    to build a very simple web form in order to prove that the improvements made will
    not affect the overall outcome.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着转向查看混入（mixins）——包括静态和参数化两种类型。在这里，我们通过一点预先思考，发现可以创建可重用的代码块，这些代码块可以轻松地插入到我们的主Less文件或代码库文件中。我们使用这种技术迭代地改变构建一个非常简单的网页表单所需的代码，以证明所做的改进不会影响整体结果。
- en: Next up, came an introduction to using functions, where we saw that with the
    use of some simple operators or math functions, we can produce some useful results
    with little input. We saw how easy it is to create a simple two-column page layout
    using a small mixin, and that this can be developed further to incorporate more
    columns, if desired.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们介绍了使用函数的方法，我们看到通过使用一些简单的运算符或数学函数，我们可以用很少的输入产生一些有用的结果。我们看到了如何使用一个小混入轻松创建一个简单的两列页面布局，并且如果需要，这可以进一步发展以包含更多的列。
- en: Last, but by no means least, we took a look at using another of Less' functions,
    in the form of the `data-uri` operator. We saw how easy it is to convert the image
    into something that can be rendered inline in our code, helping to reduce the
    number of requests to render content from the server and increase the speed of
    accessing our page.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，但同样重要的是，我们探讨了使用Less的另一个功能，即`data-uri`运算符。我们看到了将图像转换为可以在代码中内联渲染的格式是多么容易，这有助于减少从服务器渲染内容所需的请求数量，并提高访问我们页面的速度。
- en: We're going to move on and change tack to cover another key area of Less in
    the next chapter, by looking at inheritance, overriding, and nesting within Less.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续前进并改变方向，通过查看Less中的继承、覆盖和嵌套来覆盖Less的另一个关键领域。
