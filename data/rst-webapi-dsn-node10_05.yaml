- en: Restful API Design Guidelines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Restful API设计指南
- en: In the previous chapter, we implemented a catalog module that exposed functions
    for data manipulation for the items in the catalog application. These functions
    made use of the `express.js` **request** object to parse the incoming data in
    the body and then to carry out the appropriate database operation. Each function
    populated the **response** object with a relevant status code and response body
    payload, if needed. Finally, we bound each function to a route, accepting HTTP
    requests.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们实现了一个目录模块，该模块公开了目录应用程序中项目数据操作的函数。这些函数利用了`express.js` **request**对象来解析传入的数据，并执行适当的数据库操作。每个函数都使用相关的状态码和响应主体有效载荷填充了**response**对象（如果需要）。最后，我们将每个函数绑定到一个路由，接受HTTP请求。
- en: Now, it's time to look closer into the URLs of the routes and into the returned
    HTTP status codes per operation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候更仔细地查看路由的URL和每个操作返回的HTTP状态码了。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Endpoint URLs and HTTP status codes best practices
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端点URL和HTTP状态码最佳实践
- en: Extensibility and versioning
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展性和版本控制
- en: Linked data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接数据
- en: Endpoint URLs and HTTP status codes best practices
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端点URL和HTTP状态码最佳实践
- en: Each RESTful API operation is a combination of an HTTP request against a URL
    and an appropriate HTTP method.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每个RESTful API操作都是针对URL的HTTP请求和适当的HTTP方法的组合。
- en: When executed, each operation will return a status code, indicating whether
    the invocation has been successful or not. Successful invocation is indicated
    by a HTTP 2XX status code, while operations that are not executed correctly indicate
    this with erroneous status code—4XX if the error is at client side, or 5xx when
    the server fails to process a valid request.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 执行时，每个操作将返回一个状态码，指示调用是否成功。成功的调用由HTTP 2XX状态码表示，而未正确执行的操作则用错误的状态码表示——如果错误发生在客户端，则为4XX，或者当服务器无法处理有效请求时为5xx。
- en: Having a well-specified API is vital for its adoption. Such specification should
    not only completely enumerate the status codes of each operation, but should also
    specify the expected data format, that is, its supported media types.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有明确定义的API对于其采用至关重要。这样的规范不仅应完全列举每个操作的状态码，还应指定预期的数据格式，即其支持的媒体类型。
- en: 'The following table defines how the Express.js Router will expose the API operations,
    and it should serve as a reference specification for it:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格定义了Express.js路由器将如何公开API操作，并应作为其参考规范：
- en: '| Method | URI | Media type | Description | Status Code |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | URI | 媒体类型 | 描述 | 状态码 |'
- en: '| GET | /catalog | application/json | Returns all the items in the catalog.
    | 200 OK500 Internal Server Error |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| GET | /catalog | application/json | 返回目录中的所有项目。 | 200 OK500 Internal Server
    Error |'
- en: '| GET | /catalog/{categoryId} | application/json | Returns all items for the
    selected category. If the category does not exist, it returns 404. | 200 OK,404
    NOT FOUND500 Internal Server Error |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| GET | /catalog/{categoryId} | application/json | 返回所选类别的所有项目。如果类别不存在，则返回404。
    | 200 OK,404 NOT FOUND500 Internal Server Error |'
- en: '| GET | /item/{itemId} | application/json | Returns a single item for the selected
    itemId. If there is no such item, it returns 404. | 200 OK,404 NOT FOUND500 Internal
    Server Error |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| GET | /item/{itemId} | application/json | 返回所选itemId的单个项目。如果没有这样的项目，则返回404。
    | 200 OK,404 NOT FOUND500 Internal Server Error |'
- en: '| POST | /item/ | application/json | Creates a new item; if an item with the
    same identifier exists, it will be updated. When an item is created, a **Location**
    header is returned. It provides the URL where the newly created item can be accessed.
    | 201 Created200 OK500 Internal Server Error |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| POST | /item/ | application/json | 创建新项目；如果具有相同标识符的项目存在，则将更新。创建项目时，将返回**Location**标头。它提供了可以访问新创建项目的URL。
    | 201 Created200 OK500 Internal Server Error |'
- en: '| PUT | /item/{itemId} | application/json | Updates an existing item; if an
    item with the provided identifier does not exist, it creates it. When an item
    is created, a **Location** header is returned. It provides the URL where the newly
    created item can be accessed. | 201 Created200 OK500 Internal Server Error |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| PUT | /item/{itemId} | application/json | 更新现有项目；如果提供的标识符不存在项目，则创建项目。创建项目时，将返回**Location**标头。它提供了可以访问新创建项目的URL。
    | 201 Created200 OK500 Internal Server Error |'
- en: '| DELETE | /item/{itemId} | application/json | Deletes an existing item; if
    an item with the provided identifier does not exist, it returns 404. | 200 OK,404
    NOT FOUND500 Internal Server Error |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| DELETE | /item/{itemId} | application/json | 删除现有项目；如果提供的标识符不存在项目，则返回404。
    | 200 OK,404 NOT FOUND500 Internal Server Error |'
- en: 'The catalog application handles two types of entities: items and categories.
    Each item entity contains a collection of categories where it belongs. As you
    can see, the category is just a logical entity in our application; it will exist
    as long as there is at least one item referencing it, and will cease to exist
    when no items refer it. This is why the application exposes routes for exposing
    data manipulation functions only for resources of type items, while the operations
    for categories are more or less read only. Looking more carefully into the URLs
    exposing the data manipulation operations for the items, we can see a clear pattern
    aligning the URL to the REST fundamental principles—a resource is exposed by a
    single URL, and it supports resource manipulation actions that are determined
    by the HTTP method of the request. To sum up, listed here are the generally accepted
    rules that a well-defined API should follow. They are semantically related to
    each resource manipulation operation:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 目录应用程序处理两种类型的实体：项目和类别。每个项目实体包含它所属的类别集合。正如你所看到的，类别只是我们应用程序中的一个逻辑实体；只要至少有一个项目引用它，它就会存在，并且当没有项目引用它时就会停止存在。这就是为什么应用程序只为项目类型的资源公开路由来公开数据操作功能，而类别的操作基本上是只读的。仔细观察暴露项目数据操作操作的URL，我们可以看到一个清晰的模式，将URL与REST基本原则对齐——一个资源由一个单一的URL公开，并支持由请求的HTTP方法确定的资源操作。总之，以下是一个良好定义的API应该遵循的普遍接受的规则。它们在语义上与每个资源操作相关联：
- en: When a **new** resource is created, the service makes use of the **201 Created** status
    code, followed by a location header that specifies the URL where the newly created
    resource can be accessed.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当**新**资源被创建时，服务使用**201已创建**状态码，后跟指定新创建资源的URL的位置标头。
- en: Operation that creates resources may be implemented to gracefully reject creation
    of resources, which unique identifiers already use; in such cases, the operation
    should indicate a non-successful invocation with an appropriate status code **409
    Conflict**, or a more general **400 BAD REQUEST**. However, a general status code
    should always be followed by a meaningful explanation of what has gone wrong.
    In our implementation, we choose a different approach—we update the resource from
    the create operation, if it exists, and notify the caller that the resource was
    updated by returning the **200 OK** status code instead of **201 Created**.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建资源的操作可以被实现为优雅地拒绝已经使用唯一标识符的资源的创建；在这种情况下，操作应该用适当的状态码**409冲突**指示不成功的调用，或者更一般的**400错误请求**。然而，通用状态码应该始终跟随一个有意义的解释，说明出了什么问题。在我们的实现中，我们选择了一种不同的方法——如果资源存在，我们会从创建操作中更新资源，并通过返回**200
    OK**状态码通知调用者资源已被更新，而不是**201已创建**。
- en: The **Update** operation resembles the create operation; however, it always
    expects a resource identifier as a parameter, if a resource with this identifier
    exists—it gets updated with a new state provided in the body of the HTTP PUT request.
    The **200 OK** status code indicates successful invocation. The implementation
    may decide to reject handling of non-existent resources with the **404 Not Found** status
    code or creating a new resource with the passed identifier. In that case, it would
    return the **201 Created** status code, followed by a location header that specifies
    the URL where the newly created resource can be accessed. Our API makes use of
    the second option.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新**操作类似于创建操作；然而，它总是期望资源标识符作为参数，如果存在具有此标识符的资源，它将使用HTTP PUT请求中提供的新状态对其进行更新。**200
    OK**状态码表示成功的调用。实现可以决定使用**404未找到**状态码拒绝处理不存在的资源，或者使用传递的标识符创建新资源。在这种情况下，它将返回**201已创建**状态码，后跟指定新创建资源的URL的位置标头。我们的API使用了第二个选项。'
- en: 'While successful **deletion **can be indicated with the **204 No Content** status and
    further payload, most user agents would expect the **2xx** HTTP status to be followed
    by a body. Thus, to stay compatible with most of the agents, our API will indicate
    successful deletion with the **200 OK** status code, followed by a JSON payload:`{''Status'':
    ''Successfully deleted''}`. Status code **404 Not found** will indicate that a
    resource with the provided identifier does not exist.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成功的**删除**可以用**204无内容**状态和进一步的有效载荷来表示，但大多数用户代理会期望**2xx**HTTP状态后跟一个主体。因此，为了与大多数代理保持兼容，我们的API将用**200
    OK**状态码表示成功的删除，后跟JSON有效载荷：`{'状态'：'成功删除'}`。状态码**404未找到**将表示提供的标识符不存在的资源。
- en: As a general rule, **5XX** should not indicate application state errors but
    more severe errors, such as application server or database failures.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一般规则是，**5XX**不应该表示应用程序状态错误，而应该表示更严重的错误，比如应用程序服务器或数据库故障。
- en: It is best practice that `update` and `create` operations should return as a
    payload to the entire state of the resource. For instance, if a resource is created
    with a minimum set of attributes, all non specified attribute will get default
    values; the response body should contain the full state of the object. The same
    is valid for updates; even if an update operation updates the resource restate
    partially, the response should return the complete state. This may save the user-agent
    an additional GET request if they needed to check the new state.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳实践是，`更新`和`创建`操作应该作为资源的整个状态返回有效载荷。例如，如果使用最少的属性创建资源，所有未指定的属性将获得默认值；响应主体应该包含对象的完整状态。对于更新也是一样；即使更新操作部分更新资源状态，响应也应该返回完整状态。这可能会节省用户代理额外的GET请求，如果他们需要检查新状态的话。
- en: Now that we have defined some general recommendations on how operations should
    behave, it's time to implement them in a new version of the API.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了一些关于操作应该如何行为的一般建议，是时候在API的新版本中实现它们了。
- en: Extensibility and versioning
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可扩展性和版本控制
- en: We've already defined a few basic versioning rules in Chapter 3, *Building a
    Typical Web API*. Let's apply them to the MongoDB database-aware module we implemented
    in the previous chapter. Our starting point would be to enable the current consumers
    of the API to continue using the same version on a different URL. This will keep
    them backward-compatible until they adopt and successfully test the new version.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在第3章*构建典型的Web API*中定义了一些基本的版本规则。让我们将它们应用到我们在上一章中实施的MongoDB数据库感知模块。我们的起点将是使API的当前消费者能够继续在不同的URL上使用相同的版本。这将使他们向后兼容，直到他们采用并成功测试新版本。
- en: 'Keeping a REST API stable is not a question of only moving one endpoint from
    one URI to another. It makes no sense to perform redirection and afterward have
    an API that behaves differently. Thus, we need to ensure that the behavior of
    the moved endpoint stays the same. To ensure that we don''t change the previously
    implemented behavior, let''s move the current behavior from the `catalog.js` module
    to a new module by renaming the file to `catalogV1.js`. Then, make a copy of it
    to the  `catalogV2.js` module, where we will introduce all new functionality;
    but before doing that, we have to reroute Version 1 from `/, /{categoryId}, /{itemId}`
    to `/v1, /v1/{categoryId}, /v1/{itemId}`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 保持REST API的稳定性不仅仅是将一个端点从一个URI移动到另一个URI的问题。进行重定向然后拥有行为不同的API是没有意义的。因此，我们需要确保移动端点的行为保持不变。为了确保我们不改变先前实施的行为，让我们将当前行为从`catalog.js`模块移动到一个新模块，将文件重命名为`catalogV1.js`。然后，将其复制到`catalogV2.js`模块，我们将在其中引入所有新功能；但在这之前，我们必须将版本1从`/,
    /{categoryId}, /{itemId}`重定向到`/v1, /v1/{categoryId}, /v1/{itemId}`：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Since Version 2 of our API is not yet implemented, executing a `GET` request
    against `/` will result in receiving a `301 Moved Permanently` HTTP status, which
    will then redirect to `/v1/`. This will notify our consumers that the API is evolving
    and that they will soon need to decide whether to continue using Version 1 by
    explicitly requesting its new URI or prepare for adopting Version 2.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的API的第2版尚未实施，对`/`执行`GET`请求将导致接收到`301 Moved Permanently`的HTTP状态，然后重定向到`/v1/`。这将通知我们的消费者API正在发展，并且他们很快将需要决定是继续使用版本1，通过显式请求其新URI，还是准备采用版本2。
- en: 'Go ahead and give it a try! Start the modified node application and, from Postman,
    make a GET request to `http://localhost:3000/catalog`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 继续尝试吧！启动修改后的节点应用程序，并从Postman向`http://localhost:3000/catalog`发出GET请求：
- en: '![](img/8476e742-7eb8-4e0b-8417-74cb895bf664.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8476e742-7eb8-4e0b-8417-74cb895bf664.png)'
- en: You will see that your request is redirected to the newly routed location at `http://localhost:3000/catalog/v1`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到您的请求被重定向到新路由位置`http://localhost:3000/catalog/v1`。
- en: Now that we have finalized Version 1 of the catalog, it's time to think of further
    extensions that we can add in Version 2\. Currently, the catalog service supports
    listing of all items in a category and fetching an item by its ID. It's about
    time to take full advantage of MongoDB, being a document-oriented database, and
    implement a function that will enable our API consumer to query for items based
    on any of their attributes. For instance, list all items for a specific category
    with an attribute that matches a query parameter, such as price or color, or search
    by item name. RESTful services usually expose document-oriented data. However,
    their usage is not limited to documents only. In the next chapter, we will extend
    the catalog in a way that it also stores binary data—an image that can be linked
    to each item. For that purpose, we will use a MongoDB binary format called **Binary
    JSON** (**BSON**) in the *Working with arbitrary data* section in [Chapter 6](41896ef3-f01c-44e6-a22c-cfec877dc2ad.xhtml),
    *Implementing a Full-Fledged RESTful Service*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了目录的第1版，是时候考虑我们可以在第2版中添加的进一步扩展了。目录服务目前支持列出类别中的所有商品和按ID获取商品。是时候充分利用MongoDB了，作为一个面向文档的数据库，并实现一个函数，使我们的API消费者能够根据商品的任何属性查询商品。例如，列出具有与查询参数匹配的属性的特定类别的所有商品，如价格或颜色，或按商品名称搜索。RESTful服务通常公开面向文档的数据。但是，它们的使用不仅限于文档。在下一章中，我们将扩展目录，使其还可以存储二进制数据——可以链接到每个商品的图像。为此，我们将在[第6章](41896ef3-f01c-44e6-a22c-cfec877dc2ad.xhtml)的*使用任意数据*部分中使用MongoDB的二进制格式**二进制JSON**（**BSON**）。
- en: 'Getting back to the searching extension, we''ve already used the `Mongoose.js`
    model''s `find()` and `findOne()` functions. So far, we used them to provide the
    name of the document attribute to be searched with, statically, in our JavaScript
    code. However, this filtering parameter of `find()` is just a JSON object where
    the key is the document attribute and the value is the attribute''s value to be
    used in the query. Here is the first new function we will add to Version 2\. It
    queries MongoDB by an arbitrary attribute and its value:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 回到搜索扩展，我们已经使用了`Mongoose.js`模型的`find()`和`findOne()`函数。到目前为止，我们在JavaScript代码中静态地使用它们来提供要搜索的文档属性的名称。然而，`find()`的这个过滤参数只是一个JSON对象，其中键是文档属性，值是要在查询中使用的属性的值。这是我们将在第2版中添加的第一个新函数。它通过任意属性和其值查询MongoDB：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This function calls find on the model with the provided attribute and value
    as parameters. We will bind this function to the router's `/v2/item/` GET handler.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数调用模型上的find，并将提供的属性和值作为参数。我们将把这个函数绑定到路由器的`/v2/item/` GET处理程序。
- en: At the end, our aim is to have `/v2/item/?currency=USD` that returns only records
    for items that are sold in USD currency, as indicated by the value of the passed
    GET parameter. That way, if we modify the model with additional attributes, such
    as color and size, we can query for all items having the same color or any other
    attribute that an item can have.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的目标是有`/v2/item/?currency=USD`，它只返回以美元货币出售的商品记录，由传递的GET参数的值指示。这样，如果我们修改模型并添加额外的属性，比如颜色和尺寸，我们可以查询具有相同颜色或任何其他商品属性的所有商品。
- en: 'We will keep the old behavior of returning a list of all available items when
    no parameters are provided within the query string, but we will also parse the
    query string for the first provided `GET` parameter and use it as a filter in
    the `findItemsByAttribute()` function:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当在查询字符串中没有提供参数时，我们将保留返回所有可用项目的旧行为，但我们还将解析查询字符串以获取第一个提供的`GET`参数，并将其用作`findItemsByAttribute()`函数中的过滤器：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Perhaps the most interesting part in this function is the URL parsing. As you
    can see, we keep using the same old strategy to check whether any `GET` parameters
    are supplied. We parse the URL in order to get the query string, and then we use
    the built-in `Object.keys` function to check whether the parsed key/value list
    contains elements. If it does, we take the first element and extract its value.
    Both the key and the value are passed to the `findByAttribute` function.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 也许这个函数中最有趣的部分是URL解析。正如你所看到的，我们继续使用相同的旧策略来检查是否提供了任何`GET`参数。我们解析URL以获取查询字符串，然后我们使用内置的`Object.keys`函数来检查解析的键/值列表是否包含元素。如果是，我们取第一个元素并提取其值。键和值都传递给`findByAttribute`函数。
- en: You may want to improve Version 2 further by providing search support by multiple
    arguments that are provided by more than one `GET` parameters. I will leave that
    to you as an exercise.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望通过多个`GET`参数提供的搜索支持来进一步改进版本2。我将把这留给你作为一个练习。
- en: Discovering and exploring RESTful services
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现和探索RESTful服务
- en: The topic of discovering RESTful services has a long and complicated history.
    The HTTP specification states that a resource should be self-descriptive and that
    it should be identified uniquely by a URI. Dependent resources should be linked
    by the dependency using their own unique URIs. Discovering a RESTful service means
    navigating from one service to another, following the links it provides.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 发现RESTful服务的主题有着悠久而复杂的历史。HTTP规范规定资源应该是自描述的，并且应该通过URI唯一标识。依赖资源应该通过其自己的唯一URI链接到依赖项。发现RESTful服务意味着从一个服务导航到另一个服务，跟随它提供的链接。
- en: In the year 2009, a specification called **Web Application Discovery Language**
    (**WADL**) was invented. It aims to document every URI exposed from a web application,
    along with the HTTP methods it supports and the parameter it expects. The response
    media type of the URI is also described. This is very useful for documenting purposes,
    and it's all that a WADL file can provide us in terms of RESTful service provisioning.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在2009年，发明了一种名为**Web Application Discovery Language**（**WADL**）的规范。它旨在记录从Web应用程序公开的每个URI，以及它支持的HTTP方法和它所期望的参数。还描述了URI的响应媒体类型。这对于文档目的非常有用，这就是WADL文件在RESTful服务供应方面能为我们提供的一切。
- en: Unfortunately, there is currently no Node.js module that can automatically generate
    a WADL file for a given express route. We will have to manually create a WADL
    file to demonstrate how it is used by other clients for discovery.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，目前还没有一个Node.js模块可以自动生成给定express路由的WADL文件。我们将不得不手动创建一个WADL文件来演示它如何被其他客户端用于发现。
- en: 'The following listing shows a sample WADL file describing the resources available
    at `/catalog, /catalog/v2/{categoryId}`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下清单显示了描述`/catalog, /catalog/v2/{categoryId}`处可用资源的示例WADL文件：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, the WADL format is very straightforward. It basically describes
    the URI of each resource, providing information about the media types it uses
    and the status codes that are expected at that URI. Many third-party RESTful clients
    understand the WADL language and can generate request messages out of a given
    WADL file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，WADL格式非常简单直接。它基本上描述了每个资源的URI，提供了关于它使用的媒体类型以及在该URI处预期的状态码的信息。许多第三方RESTful客户端都理解WADL语言，并可以根据给定的WADL文件生成请求消息。
- en: 'Let''s import the WADL file in Postman. Click on the Import button and select
    your WADL file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Postman中导入WADL文件。点击导入按钮并选择你的WADL文件：
- en: '![](img/76025807-8835-49ba-9603-bc52076d0565.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76025807-8835-49ba-9603-bc52076d0565.png)'
- en: Import a WADL in Postman to get a stub of the service. This is a screenshot
    for Postman. The individual settings are not important here. The purpose of the
    image is just to show how the window looks.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在Postman中导入一个WADL文件以获得服务的存根。这是Postman的一个截图。这里个别设置并不重要。图片的目的只是为了展示窗口的外观。
- en: As you can see, the result of importing the WADL file is that we have a project
    ready to test each aspect of a REST service in the nick of time. All the routes
    defined in the WADL file are now conveniently available as separate request entities
    on the right menu. That's not all; apart from the WADL standard, currently the
    swagger documentation format is heavily adopted and has become an informal standard
    for describing RESTful services, so we can also use it to ease the adoption and
    discovery of our service. In the next chapter, we will bind these description
    files to our service. This is an important step in the phase of production preparation.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，导入WADL文件的结果是，我们有一个准备好测试REST服务的项目。WADL文件中定义的所有路由现在都方便地作为右侧菜单上的单独请求实体可用。除了WADL标准之外，目前swagger文档格式也被广泛采用，并已成为描述RESTful服务的非正式标准，因此我们也可以使用它来简化服务的采用和发现。在下一章中，我们将把这些描述文件绑定到我们的服务上。这是生产准备阶段的重要步骤。
- en: Linked data
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接数据
- en: 'Every catalog application supports an image or set of images bound to this
    item. For that purpose, in the next chapter, we will see how to work with binary
    objects in MongoDB. However, now is the time to decide how to semantically link
    the binary data to an item document. Extending the model schema in such a way
    that it contains binary base64 representation of binary data in the document is
    anything but a good idea, as mixing literally encoded and binary data in one format
    is never a good idea. It increases the complexity of the application and makes
    it error-prone:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 每个目录应用程序都支持与该项目绑定的图像或一组图像。为此，在下一章中，我们将看到如何在MongoDB中处理二进制对象。然而，现在是决定如何在项目文档中语义链接二进制数据的时候了。以这样的方式扩展模型架构，使其包含文档中二进制数据的base64表示，绝非明智之举，因为在一个格式中混合文字编码和二进制数据从来都不是一个好主意。这增加了应用程序的复杂性，并使其容易出错。
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Imagine how large a result for a non-filtered query can become just for a few
    hundred items, if all of them had an image binary representation as a value of
    a JSON attribute. To avoid that, we will return the image for each item at a URL
    that is logically linked to the resource's URL—`/catalog/v2/item/{itemId}/image`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，如果所有这些项目都将图像二进制表示作为JSON属性的值返回，那么一个非过滤查询的结果会变得多么庞大，即使只有几百个项目。为了避免这种情况，我们将返回每个项目的图像，其URL在逻辑上与资源的URL链接在一起—`/catalog/v2/item/{itemId}/image`。
- en: 'That way, if there is an image assigned to an item, it will be served at a
    known location. This approach, however, does not semantically link the binary
    item to its corresponding resource, as when accessing the item at `/catalog/v2/item/{itemId}`,
    there would be no indication of whether it has an image assigned or not. To solve
    this, let''s use a custom HTTP header in response of the item route:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，如果为一个项目分配了图像，它将被提供在一个已知的位置。然而，这种方法并没有在语义上将二进制项目与其对应的资源链接起来，因为当访问`/catalog/v2/item/{itemId}`时，没有迹象表明它是否分配了图像。为了解决这个问题，让我们在项目路由的响应中使用自定义的HTTP头部：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When present in the response, the `Image-Url` header indicates that the item
    has an additional resource bound to it, and the header value provides the address
    where it is available. Using this approach, we linked a binary resource semantically to
    our document.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当在响应中存在时，`Image-Url`头部指示该项目有一个额外的资源与之绑定，并且头部值提供了它可用的地址。使用这种方法，我们在语义上将一个二进制资源链接到我们的文档。
- en: In the next chapter, we will implement the routes that will handle the manipulation
    of arbitrary items bound to the items in the catalog.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将实现处理目录中项目的任意项目的路由。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed in detail how resources should be exposed via
    a RESTful API; we paid close attention to URL best practices and looked into appropriate
    usage of the HTTP status codes indicating each state of our operations.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们详细讨论了资源应该如何通过RESTful API公开；我们密切关注了URL最佳实践，并研究了HTTP状态代码的适当使用，指示我们操作的每个状态。
- en: We covered the topics of versioning and extensibility, where we used the `301
    Moved Permanently` status code to automatically redirect API calls to different
    URLs.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们涵盖了版本控制和可扩展性的主题，我们使用`301 Moved Permanently`状态代码自动将API调用重定向到不同的URL。
- en: Finally, we figured out how to semantically link our resource items to arbitrary
    binary represented data.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们找出了如何将我们的资源项目与任意二进制表示的数据语义链接起来。
