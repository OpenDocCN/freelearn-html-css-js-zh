- en: Chapter 7.  Building a Real–Time Chat Application with Socket.io
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。使用Socket.io构建实时聊天应用程序
- en: Some time ago, when Node.js applications emerged, we had a boom of new possibilities,
    using the Node.js resources and things such as  Socket.io to build real-time applications
    (as the site says, Socket.io enables event-based bi-directional real-time communication.
    It works on every platform, device, or browser, focusing equally on reliability
    and speed).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间以前，当Node.js应用程序出现时，我们有了许多新的可能性，使用Node.js资源和诸如Socket.io之类的东西来构建实时应用程序（正如该网站所说，Socket.io实现了基于事件的双向实时通信。它在每个平台、设备或浏览器上都能工作，同时注重可靠性和速度）。
- en: Socket.io allows us to emit events between the client and server, and other
    possibilities.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Socket.io允许我们在客户端和服务器之间发出事件，以及其他可能性。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing Socket.io
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Socket.io
- en: The fundamentals of Socket.io events
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Socket.io事件的基础知识
- en: Creating an Express chat application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Express聊天应用程序
- en: Dealing with jQuery on the client side
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理客户端的jQuery
- en: How to use Gulp.js and the LiveReload plugin on development
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在开发中使用Gulp.js和LiveReload插件
- en: What we are building
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们正在构建什么
- en: 'In this chapter, we will build a real-time chat application with Node.js, Socket.io,
    and jQuery:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Node.js、Socket.io和jQuery构建一个实时聊天应用程序：
- en: '![What we are building](img/image_07_001.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![我们正在构建什么](img/image_07_001.jpg)'
- en: Screenshot of the home screen
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 主屏幕的屏幕截图
- en: Starting with a package.json file
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从package.json文件开始
- en: In this chapter we have adopted a different way to start our application; as
    we have seen in a previous chapter, let's build a Node.js application step by
    step without the command line.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们采用了一种不同的方式来启动我们的应用程序；正如我们在之前的章节中看到的，让我们逐步构建一个Node.js应用程序，而不使用命令行。
- en: 'Let''s create the package.json file with application dependencies:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建带有应用程序依赖项的package.json文件：
- en: Create a folder called chapter-07.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为chapter-07的文件夹。
- en: 'Create a file called package.json within chapter-07 and add the following code:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在chapter-07中创建一个名为package.json的文件，并添加以下代码：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that we are using the same recommended modules dependencies from the Express
    framework. Also, we add the task runner known as Gulp.js. Later in this chapter,
    we will explain more about **Gulp**.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用与Express框架推荐的模块依赖相同的模块依赖。此外，我们添加了名为Gulp.js的任务运行器。在本章的后面，我们将更多地解释有关**Gulp**的内容。
- en: 'Open terminal/shell and type the following command:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/Shell并输入以下命令：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Create a folder called public.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为public的文件夹。
- en: Create a folder called routes.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为routes的文件夹。
- en: Create a folder called views.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为views的文件夹。
- en: 'At this stage your folder must have the following structure:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你的文件夹必须具有以下结构：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Adding configuration files
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加配置文件
- en: Dot files are very common in all web applications; these files are responsible
    for various tasks, including configuration of version control and text editor
    configuration, among many other tasks.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 点文件在所有Web应用程序中都很常见；这些文件负责各种任务，包括版本控制和文本编辑器配置的配置，以及许多其他任务。
- en: 'Let''s add our first configuration file for **Bower package manager** (for
    more information: [http://bower.io/](http://bower.io/)):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为Bower包管理器添加我们的第一个配置文件（更多信息：[http://bower.io/](http://bower.io/)）：
- en: 'Create a file called .bowerrc and add the following code:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为.bowerrc的文件，并添加以下代码：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This file tells Bower to install all the application components at the public/components;
    otherwise, they will be installed at the root application folder.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件告诉Bower在public/components中安装所有应用程序组件；否则，它们将被安装在根应用程序文件夹中。
- en: 'Create a file called .editorconfig and add the following code:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为.editorconfig的文件，并添加以下代码：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This file standardizes the type of indentation of code for the entire application.
    There are many editors that support this file and apply their definitions for
    every application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件标准化了整个应用程序的代码缩进类型。有许多编辑器支持这个文件，并为每个应用程序应用它们的定义。
- en: The next configuration file is gitignore. As its own name indicates, it serves
    to tell the version control which application files should be ignored.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个配置文件是gitignore。正如它的名字所示，它用于告诉版本控制应忽略哪些应用程序文件。
- en: 'Create a file called .gitignore and add the following code:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为.gitignore的文件，并添加以下代码：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Adding task manager files
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加任务管理器文件
- en: 'Task managers serves specific tasks in our application. In [Chapter 9](ch09.html
    "Chapter 9.  Building a Frontend Process with Node.js and NPM"), *Building a Frontend
    Process with Node.js and NPM,* we will explore in depth their utilization in Node.js
    applications, but for now we focus on the file itself:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 任务管理器在我们的应用程序中执行特定的任务。在[第9章](ch09.html "第9章。使用Node.js和NPM构建前端流程")中，*使用Node.js和NPM构建前端流程*，我们将深入探讨它们在Node.js应用程序中的利用，但现在我们专注于文件本身：
- en: 'Create a file called bower.json and add the following lines of code:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为bower.json的文件，并添加以下代码行：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: it's pretty simple code, but this file has the same importance as package.json
    for the server side. Bower will be the frontend task manager. Later in the chapter
    we will see how to use it. The next one is the Gulp file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是非常简单的代码，但这个文件和服务器端的package.json一样重要。Bower将是前端任务管理器。在本章中，我们将看到如何使用它。接下来是Gulp文件。
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can find more information about Gulp file at the official website: [http://gulpjs.com/](http://gulpjs.com/)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方网站上找到有关Gulp文件的更多信息：[http://gulpjs.com/](http://gulpjs.com/)
- en: 'Create a file called gulpfile.js and add the following code (the code is fully
    commented and it is self-explanatory):'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为gulpfile.js的文件，并添加以下代码（代码已经完全注释，是不言自明的）：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The last file is the README.md file. Usually, this file is used by GitHub, Bitbucket,
    and NPM to store important information regarding the project, such as the installation
    process, dependencies, and code examples, among other things.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个文件是README.md文件。通常，这个文件被GitHub、Bitbucket和NPM用来存储关于项目的重要信息，比如安装过程、依赖关系和代码示例等。
- en: 'Create a file called README.md and add the following code:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为README.md的文件，并添加以下代码：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Pretty simple but very useful file. This Markdown file will be rendered as a
    HTML file with a h1 tag with this string as a title.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单但非常有用的文件。这个Markdown文件将被呈现为一个带有这个字符串作为标题的HTML文件。
- en: Tip
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can read more about Markdown files at this link: [https://daringfireball.net/projects/markdown/](https://daringfireball.net/projects/markdown/)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这个链接中阅读更多关于Markdown文件的信息：[https://daringfireball.net/projects/markdown/](https://daringfireball.net/projects/markdown/)
- en: Creating the app.js file
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建app.js文件
- en: As we have already seen in previous chapters, the basis of all Node.js applications
    is the file where we set up all the dependencies and instantiate the application.
    In this case, we use the app.js file, but you can use any name.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前几章中已经看到的，所有Node.js应用程序的基础是我们设置所有依赖项并实例化应用程序的文件。在这种情况下，我们使用app.js文件，但你可以使用任何名称。
- en: 'Create a file called app.js and add the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为app.js的文件，并添加以下代码：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The previous code is fully commented. All the information you need to understand
    what is happening with the preceding code is in the comment lines; here, we have
    almost the same configuration as in the previous examples.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码已经被完全注释了。你需要理解前面的代码发生了什么的所有信息都在注释行中；在这里，我们几乎和前面的例子中有相同的配置。
- en: Creating the route file
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建路由文件
- en: Now let's create the route file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建路由文件。
- en: 'Inside the routes folder, create a new file called index.js and add the following
    code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在routes文件夹中，创建一个名为index.js的新文件，并添加以下代码：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As we are building a simple chat application, we will have just one route.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们正在构建一个简单的聊天应用程序，所以我们只有一个路由。
- en: Creating the application views
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序视图
- en: Our next step is to build the application views files, so we will create new
    files within the views directory using the .ejs extension.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是构建应用程序视图文件，所以我们将在视图目录中使用.ejs扩展名创建新文件。
- en: 'Create a new file called error.ejs and add the following code:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为error.ejs的新文件，并添加以下代码：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a file called footer.ejs and add the following lines of code:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为footer.ejs的文件，并添加以下代码行：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that we already included the Socket.io client file from a **Content Delivery
    Network** (**CDN**). Don't worry about the main.js file at the end of footer.ejs;
    we will create this file in the next lines.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经从**内容交付网络**（**CDN**）中包含了Socket.io客户端文件。不要担心footer.ejs末尾的main.js文件；我们将在下面创建这个文件。
- en: 'Create a file called header.ejs and add the following lines of code:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为header.ejs的文件，并添加以下代码行：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a file called index.ejs and add the following lines of code:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为index.ejs的文件，并添加以下代码行：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Note that we are using the HTML markup from one of the examples about **Bootstrap
    4**. You can see more examples here: [http://v4-alpha.getbootstrap.com/examples/](http://v4-alpha.getbootstrap.com/examples/).'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用关于**Bootstrap 4**的一个示例中的HTML标记。你可以在这里看到更多示例：[http://v4-alpha.getbootstrap.com/examples/](http://v4-alpha.getbootstrap.com/examples/)。
- en: Installing frontend components with Bower
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Bower安装前端组件
- en: 'As we can see in the previous examples, we use a CDN to serve the CSS file
    and some JavaScript files for the example application. In this step, we will introduce
    a widely-used tool for dependencies management, known as **Bower,** for dealing
    with frontend frameworks such as the Twitter Bootstrap:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的例子中所看到的，我们使用CDN来提供CSS文件和一些JavaScript文件用于示例应用程序。在这一步中，我们将介绍一个广泛使用的依赖管理工具，称为**Bower**，用于处理诸如Twitter
    Bootstrap之类的前端框架：
- en: 'Open your terminal/shell and type the following command:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的终端/Shell并输入以下命令：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The previous command installs Bower globally on your machine.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令在你的机器上全局安装了Bower。
- en: 'Inside the root project folder, type the following command:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根项目文件夹中，输入以下命令：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The previous command will install Bootstrap inside the public/components folder,
    as we can see in the following image:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将在public/components文件夹中安装Bootstrap，正如我们在下面的图片中所看到的：
- en: '![Installing frontend components with Bower](img/image_07_002.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![使用Bower安装前端组件](img/image_07_002.jpg)'
- en: Screenshot of the components folder
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 组件文件夹的屏幕截图
- en: 'Note that the previous command adds the jQuery too, because Bootstrap depends
    on the jQuery library. Let''s add the links to header.ejs and footer.ejs:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，前面的命令也会添加jQuery，因为Bootstrap依赖于jQuery库。让我们在header.ejs和footer.ejs中添加链接：
- en: 'Open views/header.ejs and add the following code:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开views/header.ejs并添加以下代码：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Open footer.ejs and add the following code:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开footer.ejs并添加以下代码：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Adding some CSS
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一些CSS
- en: 'Now let''s insert a few lines of CSS to stylize our example page:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们插入一些CSS代码来美化我们的示例页面：
- en: Inside the public/css create a new file called style.css.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在public/css中创建一个名为style.css的新文件。
- en: 'Add the following code to style.css:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到style.css中：
- en: '[PRE19]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We made some alterations in the stylesheet to get the result we wanted for the
    book example.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对样式表进行了一些修改，以获得我们想要的书籍示例结果。
- en: At this stage, we have the home screen.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们有了主屏幕。
- en: 'Open your terminal/shell and type the following command:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的终端/Shell并输入以下命令：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Go to http://localhost:3000/, and you will see the following result:![Adding
    some CSS](img/image_07_003.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到http://localhost:3000/，你将看到以下结果：![添加一些CSS](img/image_07_003.jpg)
- en: Screenshot of home screen
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 主屏幕的屏幕截图
- en: Adding live reload plugin
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加实时重新加载插件
- en: 'As mentioned earlier, we will use the plugin livereload. This plugin is responsible
    for updating the browser every time we change an application file. Let''s see
    now how to implement it in our example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将使用livereload插件。这个插件负责在我们更改应用程序文件时更新浏览器。现在让我们看看如何在我们的示例中实现它：
- en: 'Remember that we created the gulpfile.js file at the beginning of the chapter,
    so we already have livereload task configured according to the following lines:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记住，我们在本章的开头创建了gulpfile.js文件，所以我们已经根据以下行配置了livereload任务：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Tip
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can read more about the gulp-livereload plugin here: [https://github.com/vohof/gulp-livereload](https://github.com/vohof/gulp-livereload).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里阅读更多关于gulp-livereload插件的信息：[https://github.com/vohof/gulp-livereload](https://github.com/vohof/gulp-livereload)。
- en: 'Open views/header.ejs and add the following code right after the stylesheet
    link:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开views/header.ejs并在样式表链接之后添加以下代码：
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: These lines of code tell the application to inject the livereload plugin when
    we are using the development environment.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码告诉应用程序在使用开发环境时注入livereload插件。
- en: Now every time we change a file, we can see the following message on the terminal:![Adding
    live reload plugin](img/image_07_004.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在每次更改文件时，我们可以在终端上看到以下消息：![添加实时重新加载插件](img/image_07_004.jpg)
- en: Screenshot from Terminal with a livereload message
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 终端屏幕截图，带有livereload消息
- en: 'But remember that we configured the livereload task to map only .js and .ejs
    files, as we can see in the following highlighted lines of code:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但请记住，我们配置了livereload任务仅映射.js和.ejs文件，正如我们在以下代码的突出显示行中所看到的：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: To map other file formats, you must add the file extension to that line.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要映射其他文件格式，必须将文件扩展名添加到该行。
- en: Checking the application folder structure
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查应用程序文件夹结构
- en: 'With everything in place, we now need to check the directories structure of
    the application. This time, your application should look like the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪后，我们现在需要检查应用程序的目录结构。这次，您的应用程序应该看起来像以下的屏幕截图：
- en: '![Checking the application folder structure](img/image_07_005.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![检查应用程序文件夹结构](img/image_07_005.jpg)'
- en: Screenshot of the application's structure
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序结构的屏幕截图
- en: Tip
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember that you can download the book's sample code on the Packt Publishing
    website ([www.packtpub.com](http://www.packtpub.com)) and also on the official
    book's repository on GitHub.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您可以在Packt Publishing网站（[www.packtpub.com](http://www.packtpub.com)）以及GitHub上的官方书籍存储库上下载本书的示例代码。
- en: Creating the Socket.io events
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Socket.io事件
- en: 'Now is the time to create the socket.io event issues in our server. The socket.io
    allows you to send and receive events with any type of data:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候在我们的服务器上创建socket.io事件问题了。socket.io允许您发送和接收任何类型的数据事件：
- en: 'Open app.js from the root folder and add the following lines of code at the
    end of the file:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 打开根文件夹中的app.js，并在文件末尾添加以下代码：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Adding socket.io behavior on the client side
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在客户端添加socket.io行为
- en: 'As mentioned earlier, socket.io works with events in the previous code where
    we configured our server to send and receive events. Now we set our client to
    receive and send events. In this step, we will use the jQuery library to assist
    in this task, since we are already using the library in our project:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，socket.io在先前的代码中使用事件，在那里我们配置了我们的服务器来发送和接收事件。现在我们设置我们的客户端来接收和发送事件。在这一步中，我们将使用jQuery库来协助完成这项任务，因为我们已经在项目中使用了该库：
- en: Inside the public/js folder, create a new file called main.js.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在public/js文件夹中，创建一个名为main.js的新文件。
- en: 'Place the following code in the main.js file:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码放入main.js文件中：
- en: '[PRE25]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Let's run the application to check what happens on the terminal.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行应用程序，看看终端上会发生什么。
- en: 'Open terminal/shell on the root project and type the following command:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根项目上打开终端/ shell，并输入以下命令：
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output on your terminal will be the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您的终端输出将如下所示：
- en: '![Adding socket.io behavior on the client side](img/image_07_006.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![在客户端添加socket.io行为](img/image_07_006.jpg)'
- en: Screenshot of the output terminal with application running
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序运行时的输出终端屏幕截图
- en: Here, we can see that we had only one connection. But if we open http://localhost:3000/
    in a new browser window, or even in another browser, we can see two connections,
    and so on.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们只有一个连接。但是，如果我们在新的浏览器窗口中打开http://localhost:3000/，甚至在另一个浏览器中打开，我们可以看到两个连接，依此类推。
- en: Starting the chat application
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动聊天应用程序
- en: 'Now we use our application in two windows simultaneously:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以同时在两个窗口中使用我们的应用程序：
- en: 'Open your terminal/shell and type the following command:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端/ shell，并输入以下命令：
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Go to http://localhost:3000/, insert the name **John Doe**, and you will see
    the following result:![Starting the chat application](img/image_07_007.jpg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到http://localhost:3000/，输入名称**John Doe**，您将看到以下结果：![启动聊天应用程序](img/image_07_007.jpg)
- en: Screenshot of the John Doe user
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: John Doe用户的屏幕截图
- en: We can see that's just one user, so now let's open another connection with the
    same socket. Use a new window or another browser.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到只有一个用户，现在让我们用相同的socket打开另一个连接。使用一个新窗口或另一个浏览器。
- en: Go to http://localhost:3000/ and insert the name, **Max Smith**. You should
    see the following result on the right-hand panel:![Starting the chat application](img/image_07_008.jpg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到http://localhost:3000/，并输入名称**Max Smith**。您应该在右侧面板上看到以下结果：![启动聊天应用程序](img/image_07_008.jpg)
- en: Screenshot of the users panel
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 用户面板的屏幕截图
- en: Now we have two users. Let's start talking...
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有两个用户。让我们开始交谈...
- en: 'On the **John Doe** screen, type this message: **Any Body there?**'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**John Doe**屏幕上，输入此消息：**有人在吗？**
- en: 'Check the **Max Smith** screen and you will see the message from **John** appear,
    as shown in the following image:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 检查**Max Smith**屏幕，您将看到**John**的消息出现，就像下面的图片中所示的那样：
- en: '![Starting the chat application](img/image_07_009.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![启动聊天应用程序](img/image_07_009.jpg)'
- en: Screenshot from Max Smith screen chat
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Max Smith屏幕聊天的屏幕截图
- en: Go back to the John Doe screen and check the message and answer it, as we did
    in the following image:![Starting the chat application](img/image_07_010.jpg)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到John Doe屏幕并检查消息并回答它，就像我们在下面的图片中所做的那样：![启动聊天应用程序](img/image_07_010.jpg)
- en: Screenshot of the John Doe screen chat
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: John Doe屏幕聊天的屏幕截图
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed some very important concepts of Node.js real-time
    applications with Node.js and Socket.io.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了一些关于Node.js实时应用程序的非常重要的概念，使用了Node.js和Socket.io。
- en: We have seen how to exchange messages between users in real time using a few
    lines of jQuery. Also, we addressed some very important topics in the development
    of modern web applications as frontend dependencies with Bower and the Gulp task
    manager using the livereload plugin.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何使用几行jQuery在用户之间实时交换消息。此外，我们还讨论了一些在现代Web应用程序开发中非常重要的主题，如使用Bower进行前端依赖项和使用livereload插件的Gulp任务管理器。
- en: Remember that all these tools are available in the Node.js ecosystem through
    your Node Package Manager (NPM).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，所有这些工具都可以通过Node Package Manager（NPM）在Node.js生态系统中获得。
- en: In the next chapter, we will see how to use a Content Management System (CMS)
    built entirely with Node.js to build a blog application.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用完全基于Node.js构建的内容管理系统（CMS）来构建博客应用程序。
