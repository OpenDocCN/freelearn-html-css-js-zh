- en: Chapter 11. Working with Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 安全工作
- en: User management and conditional access in various forms has become almost ubiquitous
    in modern apps, and modern users expect the possibility of logging in with an
    account that they already have or registering and using a new one. Further, they
    expect that the data that they make available under their accounts will remain
    secure and in compliance with the applicable privacy legislation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 用户管理和各种形式的有条件访问在现代应用程序中几乎无处不在，现代用户期望能够使用他们已有的帐户登录或注册并使用新帐户。此外，他们期望他们在其帐户下提供的数据将保持安全，并符合适用的隐私立法。
- en: In this chapter, we will explore how we can add security to our Ionic application,
    which meets most of these demands. We will start by explaining how routing between
    views in Ionic works and how we can secure access to individual routes. Finally,
    we will give some pointers to further reading, including advanced authentication
    concepts such as **OAuth**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何向我们的Ionic应用程序添加安全性，以满足大部分这些需求。我们将首先解释Ionic中视图之间的路由工作原理，以及如何保护对个别路由的访问。最后，我们将提供一些进一步阅读的指引，包括**OAuth**等高级身份验证概念。
- en: An overview of client-side security
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端安全概述
- en: We will start off by briefly discussing some core concepts that are involved
    in securing client applications, such as the apps that we are developing in this
    book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先简要讨论一些涉及保护客户端应用程序的核心概念，比如我们在本书中开发的应用程序。
- en: Client-side security is a convenience
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端安全是一种便利
- en: The first thing that you need to know about client-side security is that there
    really is no such thing as client-side security. The app that you deliver to your
    users, whether native or hybrid, is exposed to the possibility of tampering, reverse
    engineering, cracking, and a number of other things that fundamentally compromise
    its integrity. Thus, you can never really trust client applications with the important
    part of security in your app, which is ultimately required to safeguard your users'
    private information and make sure that unauthorized users cannot access data that
    they should not be allowed to access. In particular, this data is private and
    cannot be accessed by other users. In fact, many of the most severe blows in terms
    of security failures of larger companies has been due to user data being compromised
    and leaked en-masse to unauthorized parties.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 关于客户端安全，你需要知道的第一件事是，实际上并不存在所谓的客户端安全。你向用户提供的应用程序，无论是原生的还是混合的，都面临着被篡改、逆向工程、破解以及其他一些基本上损害其完整性的可能性。因此，你永远无法真正信任客户端应用程序中的重要安全部分，这些部分最终需要保护用户的私人信息，并确保未经授权的用户无法访问他们不应该访问的数据。特别是，这些数据是私人的，其他用户无法访问。事实上，许多大公司在安全失败方面遭受的最严重打击之一，是由于用户数据被泄露给未经授权的第三方。
- en: However, you can provide security that is good enough for the app's intended
    use. For example, even if it will not guarantee complete security, you can still
    attempt to deter less severe privacy invaders from trying to glean personal data
    from an app by using more advanced security measures such as fingerprint scanners
    on some devices, or by using encryption on local data while forcing users to pick
    very strong encryption keys.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可以提供足够好的安全性，以满足应用程序的预期使用。例如，即使它不能保证完全安全，你仍然可以尝试通过使用更先进的安全措施，如某些设备上的指纹扫描仪，或者在本地数据上使用加密并强制用户选择非常强大的加密密钥，来阻止较不严重的侵犯隐私者试图从应用程序中获取个人数据。
- en: The fact that client-side security is not a final measure in safeguarding your
    users' data should of course not deter you from using it. In fact, client-side
    security brings a lot of benefits in terms of how we structure our apps. Importantly,
    it allows us to to create rich user experiences, where the sections of the app
    accessible to the user can be limited based on the users' authentication status.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端安全不是最终保护用户数据的措施，当然不应该阻止你使用它。事实上，客户端安全在我们构建应用程序的方式方面带来了许多好处。重要的是，它使我们能够创建丰富的用户体验，其中用户可以基于其身份验证状态来限制可以访问的应用程序部分。
- en: The basic components of client-side security
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端安全的基本组件
- en: 'While details may vary across different systems and implementations, there
    are some fundamental concepts of client-side security that are in use almost everywhere.
    The following are some of the concepts:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然各个系统和实现可能会有所不同，但几乎所有地方都在使用客户端安全的一些基本概念。以下是其中一些概念：
- en: '**Authentication tokens**: These are data that uniquely identify an authenticated
    user in a system. They are granted by the system itself—or an associated, trusted
    system—in response to the user providing legitimate authentication information
    to the system. For example, this information can be a username-password pair,
    a fingerprint/iris scan, or some other trusted means of authentication.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证令牌：这些是在系统中唯一标识经过身份验证的用户的数据。它们由系统本身或关联的受信任系统授予，作为对用户向系统提供合法身份验证信息的响应。例如，这些信息可以是用户名-密码对、指纹/虹膜扫描，或其他受信任的身份验证手段。
- en: '**Secure local storage**: In order to improve user experience, we most certainly
    do not want to force our users to authenticate themselves every single time they
    use the app. Just imagine a situation where you had to log in again to every single
    account on your device every time you restarted it! In order to work around this,
    we use some kind of secure storage, where the access tokens stored under the previous
    step are preserved. The app itself then simply extracts the token from this storage
    and uses it in order to perform authenticated communication with the server. The
    term secure local storage implies some necessary security measures as regards
    how access tokens are stored and retrieved. This is necessary since a compromised
    access token will allow an unauthorized party to be masked as the legitimate user.
    On most mobile devices, there are native features for storage where security is
    handled by the resident operating system. In other cases, developers can opt to
    use other solutions, such as an encrypted file storage that require some external
    mechanism to unlock the system.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全本地存储**：为了提高用户体验，我们绝对不希望强迫用户每次使用应用程序时都要进行身份验证。想象一下，如果每次重新启动设备时都必须重新登录到每个帐户，那将是一种什么情况！为了解决这个问题，我们使用某种安全存储，将在上一步中存储的访问令牌保留下来。然后应用程序只需从此存储中提取令牌，并使用它来执行与服务器的经过身份验证的通信。安全本地存储这个术语意味着一些必要的安全措施，关于如何存储和检索访问令牌。这是必要的，因为一个被泄露的访问令牌将允许未经授权的一方伪装成合法用户。在大多数移动设备上，都有本地存储的原生功能，安全性由驻留操作系统处理。在其他情况下，开发人员可以选择使用其他解决方案，比如需要一些外部机制来解锁系统的加密文件存储。'
- en: '**Secure communication**: Access tokens can be compromised in storage. Furthermore,
    they are also open to theft while in transit. For example, various types of man-in-the-middle
    attack, where an attacker is masked as a legitimate endpoint for a network connection,
    can be used in order to intercept an access token during a transfer in order to
    steal it and consequently, the user''s access privileges. In most cases, secure
    communication is nothing that you as a developer have to worry about implementing
    manually. Encrypted connections via HTTPS are increasingly becoming the standard
    way of communication across the Internet, and they provide very robust security
    for data over network endpoints. Meanwhile, support for it is present in the network
    stacks of virtually all major operating systems, both for stationary and mobile
    devices.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全通信**：访问令牌在存储中可能会被泄露。此外，在传输过程中它们也容易被盗窃。例如，各种类型的中间人攻击，其中攻击者伪装成网络连接的合法端点，可以用来拦截访问令牌以窃取用户的访问权限。在大多数情况下，安全通信不是开发人员需要手动实现的。通过HTTPS加密连接越来越成为互联网上的标准通信方式，并且它们为网络端点上的数据提供了非常强大的安全性。同时，几乎所有主要操作系统的网络堆栈都支持它，包括固定和移动设备。'
- en: Building a secure app
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个安全的应用程序
- en: 'Now that we have a better understanding of client-side security and its drawbacks,
    let''s put it into practice by developing an app with the following features:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对客户端安全性及其缺点有了更好的理解，让我们通过开发一个具有以下功能的应用程序来实践它：
- en: There is a public home screen that can be seen by everybody who uses the app
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个公共主屏幕，可以被使用应用程序的每个人看到
- en: There is a private part that shows some personal information about a user, which
    is only accessible to authenticated users
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个私人部分，显示用户的一些个人信息，只有经过身份验证的用户才能访问
- en: There is logic for the authentication of users through a simple log-in form
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有用户认证的逻辑通过一个简单的登录表单
- en: There is logic for the authorization and authentication of users to access the
    otherwise private parts of the application
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户授权和认证的逻辑用于访问应用程序的私有部分
- en: Starting off
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始
- en: 'Let''s start with the configuration of our basic project structure. If you
    have read the book until this point, this should be second nature to you by now!
    Go to a desired project directory, and from there, just run the following from
    your terminal or command line:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从配置基本项目结构开始。如果你已经读到这一点，现在应该是你的第二天性！转到所需的项目目录，然后只需从终端或命令行运行以下命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will create a basic, blank Ionic app. Let''s add some basic structure
    to it. The first thing that we want to do is add two basic navigation states—home
    and public. Navigate to your app''s `www/js` folder and make sure that `app.js`
    has the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个基本的空白Ionic应用程序。让我们为其添加一些基本结构。我们首先要做的是添加两个基本的导航状态——主页和公共页。转到您的应用程序的`www/js`文件夹，并确保`app.js`具有以下内容：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will set up the essential navigation states for the app, which fortunately
    are very few at this point! However, we still need to add the necessary templates.
    Inside the `www` directory, create a `templates` directory and add the following
    three files to the path `www/templates/menu.html`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为应用程序设置必要的导航状态，在这一点上非常少！但是，我们仍然需要添加必要的模板。在`www`目录中，创建一个`templates`目录，并将以下三个文件添加到路径`www/templates/menu.html`：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following code snippet represents the `home.html` templates at the path
    `www/templates/home.html`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段代表了路径`www/templates/home.html`上的`home.html`模板：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following code snippet represents the `private.html` templates at the path
    `www/templates/private.html`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段代表了路径`www/templates/private.html`上的`private.html`模板：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'That''s all that we need for the basic setup. You can verify it by running
    the following in a terminal or command line in the `root` folder of your directory:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们基本设置所需的全部。您可以通过在目录的`root`文件夹中的终端或命令行中运行以下命令来验证它：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You will see the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到以下内容：
- en: '![Starting off](img/B04653_11_01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![开始](img/B04653_11_01.jpg)'
- en: 'A dire warning indeed! Let''s see if we can get around it. If you click on
    the app icon at the top left of the app screen (either for Android or iOS), you
    can bring out the navigation drawer that we created in the `www/templates/menu.html`
    file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 确实是一个严重的警告！让我们看看我们是否能绕过它。如果您点击应用程序屏幕左上角的应用程序图标（无论是Android还是iOS），您可以打开我们在`www/templates/menu.html`文件中创建的导航抽屉：
- en: '![Starting off](img/B04653_11_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![开始](img/B04653_11_02.jpg)'
- en: 'If you select the **Private** link from the list, you would expect the app
    to stop us from accessing information that could potentially put an end to Flipper
    once and for all, but alas:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从列表中选择**私人**链接，您会期望该应用程序阻止我们访问可能会彻底结束Flipper的信息，但遗憾的是：
- en: '![Starting off](img/B04653_11_03.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![开始](img/B04653_11_03.jpg)'
- en: Not good! To remedy this, we will need to find a way to block the user from
    accessing certain content unless they are authenticated and that, even if they
    hack their way into accessing the content, there is no useful data for them to
    find anywhere.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 不好！为了解决这个问题，我们需要找到一种方法来阻止用户访问某些内容，除非他们经过身份验证，即使他们以某种方式进入内容，也没有有用的数据供他们查找。
- en: A basic authentication service
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本身份验证服务
- en: 'The first step in adding basic security to our app is to create an authentication
    service, which can be used in order to carry out authentication requests. We want
    this service to provide the following functionalities:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 向我们的应用程序添加基本安全性的第一步是创建一个身份验证服务，该服务可用于执行身份验证请求。我们希望此服务提供以下功能：
- en: It should be able to log a user in. This function should take a username and
    password and, if they match, return an authentication token that the user can
    use in order to verify their identity to the system.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该能够登录用户。此功能应该接受用户名和密码，并且如果它们匹配，则返回一个身份验证令牌，用户可以使用它来验证其身份。
- en: It should be able to check whether a user is currently authenticated in the
    app. This will be necessary whenever we wish to check whether a user should have
    access to the system or not.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该能够检查用户当前是否在应用程序中进行了身份验证。每当我们希望检查用户是否应该访问系统时，这将是必要的。
- en: 'Let''s go ahead and build such a service. Add the `services.js` file in the
    `www/js` folder and insert the following content in it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续构建这样一个服务。在`www/js`文件夹中添加`services.js`文件，并插入以下内容：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This gives us a skeleton to work with. Let's start adding some meat to it incrementally.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们一个可以使用的框架。让我们逐步开始添加一些内容。
- en: The login function
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 登录功能
- en: The purpose of the login function is simply to take a username and password
    and check them against an existing list of such pairs. To get it working, we will
    first need to add some mock data to our service (in real life, you will of course
    pull the data from a remote server).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 登录功能的目的只是接受用户名和密码，并将它们与现有的用户名和密码对列表进行检查。为了使其工作，我们首先需要向我们的服务添加一些模拟数据（在现实生活中，您当然会从远程服务器拉取数据）。
- en: 'Go ahead and make sure that the `LoginFactory` contains the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 继续确保`LoginFactory`包含以下内容：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we simply need to add the following to the body of the login function:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要将以下内容添加到登录功能的主体中：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What we do here in terms of authentication is really quite simple. We only match
    `usernames` and `passwords` against a pre-defined array. If a match is found,
    we cache the matched user and add it to the `factories` context. It will now be
    accessible via the `getCurrent()` function.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，就身份验证而言，我们所做的实际上非常简单。我们只匹配`用户名`和`密码`与预定义数组。如果找到匹配项，我们会缓存匹配的用户并将其添加到`factories`上下文中。现在可以通过`getCurrent()`函数访问它。
- en: The isAuthenticated function
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: isAuthenticated功能
- en: 'The purpose of this function is to allow the system to check whether the current
    user is presently logged in or not. We can simply implement it in terms of whether
    there is a cached user from a successful login event available:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能的目的是允许系统检查当前用户是否已登录。我们可以简单地根据成功登录事件中是否有缓存用户来实现它：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The getCurrent function
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: getCurrent功能
- en: 'This function is simple, and it simply returns the current cached user:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能很简单，它只是返回当前缓存的用户：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Implementing route authentication
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施路由身份验证
- en: 'Now that we have a working authentication service, let''s use it in order to
    safeguard the world''s dolphins and seal off the private part of our app. To do
    so, first make sure that the `index.html` file correctly imports the new service,
    as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个可用的身份验证服务，让我们用它来保护世界的海豚，并封锁我们应用程序的私人部分。为此，首先确保`index.html`文件正确导入了新的服务，如下所示：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, modify the `app.js` file to import that file as well:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，修改`app.js`文件以导入该文件：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, in the `app.js` file, modify the routing `config` for the private part
    of the app so that it looks like the following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`app.js`文件中，修改应用程序私人部分的路由`config`，使其看起来像以下代码：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'What is going on here? To answer this, consider what we want to achieve. If
    the user is not authenticated, we want to send them back to the home screen until
    they have logged in. In order to do so, we perform the following steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？要回答这个问题，考虑一下我们想要实现的目标。如果用户未经身份验证，我们希望将他们发送回主屏幕，直到他们登录。为了做到这一点，我们执行以下步骤：
- en: We add a resolve hook for the transition to the `app.private` state. In terms
    of the router, this is a function that has to be resolved before the navigation
    commences.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为转换到`app.private`状态添加了一个解析钩子。在路由器方面，这是一个必须在导航开始之前解决的函数。
- en: Inside this hook, we use the `AuthFactory.isAuthenticated` function that we
    defined earlier. However, for `resolve` to work as expected, the return value
    of the hook needs to be a `promise` method. Thus, we use `$q` to return a when
    resolution if the user is logged in and a reject event if they are not.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个钩子内，我们使用了之前定义的`AuthFactory.isAuthenticated`函数。但是，为了使`resolve`按预期工作，钩子的返回值需要是一个`promise`方法。因此，如果用户已登录，我们使用`$q`返回一个解析，如果他们没有登录，则返回一个拒绝事件。
- en: If the user is not logged in, we use `$state` in order to tell the router to
    redirect the control to the home page again.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户未登录，我们使用`$state`告诉路由器将控制重定向到主页。
- en: 'Finally, all we need to do is add an actual login screen for the app. To do
    so, start by adding a new file to keep `controllers` for our app at the path `www/js/controllers.js`.
    Make sure that this file has the following content:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要为应用程序添加一个实际的登录界面。为此，首先要在路径`www/js/controllers.js`中添加一个新文件来保存我们应用程序的`controllers`。确保该文件具有以下内容：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To render the login screen itself, add a template for to the path `www/templates/login.html`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染登录界面本身，添加一个模板到路径`www/templates/login.html`：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, let''s tie everything together by making sure that the app loads our
    newly defined controller. Load it in `index.html`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过确保应用程序加载我们新定义的控制器来将所有内容联系在一起。在`index.html`中加载它：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, make sure that it is listed as a dependency in `app.js`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，确保它在`app.js`中列为依赖项：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We are now building our app. You can try it out by running it yourself. Try
    logging in with wrong credentials (according to the ones that we defined) in order
    to convince yourself that the app really blocks the user from going where they
    should not.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在正在构建我们的应用程序。您可以通过自己运行它来尝试。尝试使用错误的凭据（根据我们定义的凭据）登录，以确信应用程序确实阻止用户去不该去的地方。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you gained a basic understanding of how client-side authentication
    works and what its basic limitations are. You also saw how to create a basic app
    that implements some of the basic concepts to create an app in order to see how
    the app works in practice.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您对客户端身份验证的工作原理和基本限制有了基本的了解。您还看到了如何创建一个实现一些基本概念的基本应用程序，以便了解应用程序在实践中的工作方式。
- en: In the next chapter, you'll learn how to set up web socket communication through
    the app in order to subscribe to dynamic notifications from a server.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何通过应用程序设置网络套接字通信，以便订阅来自服务器的动态通知。
