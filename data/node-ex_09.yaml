- en: Chapter 9. Tagging, Sharing, and Liking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章，“标记、分享和喜欢”
- en: '[Chapter 8](part0054.xhtml#aid-1JFUC1 "Chapter 8. Creating Pages and Events"),
    *Creating Pages and Events*, was about creating pages and attaching events to
    them. We also made the posting of comments possible. In this part of the book,
    we will add three new features. Almost every social network contains some way
    to like a post. It is a nice way to rank the posts that you are interested in.
    Sharing is another popular process that comprises of posting an already existing
    post. Sometimes, we want to refer a post to some of our friends. In these cases,
    we **tag** people. These three functionalities will be implemented in this chapter.
    Here are the sections that will guide us through the development process:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 第8章，“创建页面和事件”，是关于创建页面并将事件附加到它们上面。我们还使得评论的发布成为可能。在本书的这一部分，我们将添加三个新功能。几乎每个社交网络都包含一种喜欢帖子的方式。这是一种很好的方式来对你感兴趣的帖子进行排名。分享是另一个流行的过程，包括发布已经存在的帖子。有时，我们想把帖子转发给我们的一些朋友。在这些情况下，我们会**标记**人。这三个功能将在本章中实现。以下是将指导我们完成开发过程的各个部分：
- en: Selecting friends and sending their IDs to the backend
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择朋友并将他们的ID发送到后端
- en: Storing the tagged users and displaying them in the user's feed
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储标记的用户并在用户的动态中显示它们
- en: Sharing a post
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分享帖子
- en: Liking posts and counting the number of likes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 喜欢帖子并计算喜欢的数量
- en: Showing the number of likes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示喜欢的数量
- en: Selecting friends and sending their IDs to the backend
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择朋友并将他们的ID发送到后端
- en: 'We will start with the tagging of not only random users but also the friends
    of the current user. The functionality that we want to build will be placed on
    the home page. The form that creates a new post will contain a list of checkboxes.
    The very first step will be to fetch the friends from the API. In [Chapter 6](part0046.xhtml#aid-1BRPS2
    "Chapter 6. Adding Friendship Capabilities"), *Adding Friendship Capabilities*,
    we already did that. We have a `models/Friends.js` file that queries the Node.js
    server and returns a list of users. So, let''s use it. At the top of `controllers/Home.js`,
    we will add the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从不仅随机用户的标记开始，还包括当前用户的朋友。我们想要构建的功能将放置在主页上。创建新帖子的表单将包含一个复选框列表。非常第一步将是从API中获取朋友。在第6章，“添加友谊功能”中，我们已经做到了。我们有一个`models/Friends.js`文件，查询Node.js服务器并返回用户列表。所以，让我们使用它。在`controllers/Home.js`的顶部，我们将添加以下内容：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Later, in the `onrender` handler, we will use the required module. The result
    of the API will be set as a value to a local `friends` variable in the following
    way:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，在`onrender`处理程序中，我们将使用所需的模块。API的结果将以以下方式设置为本地`friends`变量的值：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The controller has the user''s friends in its data structure, and we may update
    the template. We will make a loop through the records and display a checkbox for
    every user in the following way:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器在其数据结构中有用户的朋友，我们可以更新模板。我们将通过记录进行循环，并以以下方式为每个用户显示复选框：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Ractive.js framework nicely handles groups of checkboxes. In our case, the
    JavaScript component will receive a variable called `taggedFriends`. It will be
    an array of the selected users or an empty array if the user does not tick anything.
    The expected output is a list of the user's friends in the form of checkboxes
    and labels.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Ractive.js框架很好地处理复选框组。在我们的情况下，JavaScript组件将接收一个名为`taggedFriends`的变量。它将是一个选定用户的数组，或者如果用户没有选择任何内容，则为空数组。预期的输出是用户的朋友列表，以复选框和标签的形式呈现。
- en: 'Once Gulp compiles the new version of the template and we hit the refresh button
    of the browser, we will see our friends on the screen. We will select some of
    them, fill the content of the post, and press the **Post** button. The application
    sends a request to the API but without the tagged friends. One more change is
    needed to fix that. In the `controllers/Home.js` file, we have to use the value
    of the `taggedFriends` variable, as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Gulp编译了模板的新版本并且我们点击浏览器的刷新按钮，我们将在屏幕上看到我们的朋友。我们将选择其中一些，填写帖子的内容，然后按下**发布**按钮。应用程序向API发送请求，但没有标记的朋友。需要进行一次更改来修复这个问题。在`controllers/Home.js`文件中，我们必须使用`taggedFriends`变量的值，如下所示：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The FormData API accepts only Blob, file, or string values. We cannot send an
    array of strings. So, we will serialize `taggedFriends` to a string using `JSON.stringify`.
    In the next section, we will use `JSON.parse` to convert the string to an object.
    The `JSON` interface is available in both the browser and Node.js environments.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: FormData API只接受Blob、文件或字符串值。我们不能发送一个字符串数组。因此，我们将使用`JSON.stringify`将`taggedFriends`序列化为字符串。在下一节中，我们将使用`JSON.parse`将字符串转换为对象。`JSON`接口在浏览器和Node.js环境中都可用。
- en: Storing the tagged users and displaying them in the user's feed
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储标记的用户并在用户的动态中显示它们
- en: 'Along with the text and files, we now send a list of user IDs—users that should
    be tagged in the post. As mentioned before, they come to the server in the form
    of a string. We need to use `JSON.parse` to convert them into a regular array.
    The following lines are part of the `backend/api/content.js` module:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，除了文本和文件，我们还发送一个用户ID列表——应该在帖子中标记的用户。如前所述，它们以字符串的形式传递到服务器。我们需要使用`JSON.parse`将它们转换为常规数组。以下行是`backend/api/content.js`模块的一部分：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `content.js` module is the place where `formidable` provides the data sent
    by the frontend. At the end of this code snippet, we reconstructed the array from
    the previously serialized string.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`content.js`模块是`formidable`提供的前端发送的数据的地方。在此代码片段的末尾，我们从先前序列化的字符串中重构了数组。'
- en: We can easily go with only that change and store the `data` object. Indeed,
    in the client side, we will receive the post containing the `taggedFriends` property.
    However, we are interested in showing the names of the friends and not their IDs.
    If the frontend controller has IDs and needs names, then it should perform another
    HTTP request to the API. This will probably lead to a large number of API queries,
    especially if we have many messages displayed. To prevent such a situation, we
    will fetch the names of the tagged people during the fetching of the post in the
    backend. This approach has its own disadvantages, but it is still better compared
    to the variant mentioned earlier.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松地进行这种改变并存储`data`对象。实际上，在客户端，我们将接收包含`taggedFriends`属性的帖子。然而，我们对显示朋友的名称而不是他们的ID感兴趣。如果前端控制器具有ID并且需要名称，那么它应该执行另一个HTTP请求到API。这可能会导致大量的API查询，特别是如果我们显示了许多消息。为了防止这种情况，我们将在后端获取帖子时获取标记的人的名称。这种方法有自己的缺点，但与前面提到的变体相比仍然更好。
- en: 'Let''s create a function that wraps the needed logic and use it before saving
    the information in the database:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个包装所需逻辑的函数，并在保存信息到数据库之前使用它：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We prepared the IDs of the users for the MongoDB query. In this case, the `$in`
    operator is needed because we want to fetch the records of the IDs that match
    any of the items in the `ids` array. When the MongoDB driver returns the data,
    we create another array that contains the names of the friends. `GetFriendsProfiles`
    will be used in the next few pages, where we will update the posts' feed fetching.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为MongoDB查询准备了用户的ID。在这种情况下，需要`$in`运算符，因为我们希望获取与`ids`数组中的任何项目匹配的ID的记录。当MongoDB驱动程序返回数据时，我们创建另一个包含朋友名称的数组。`GetFriendsProfiles`将在接下来的几页中使用，我们将更新帖子的动态获取。
- en: 'The actual storing of the data is still the same. The only difference is that
    the `data` object now contains the `taggedFriends` property:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的数据存储仍然是相同的。唯一的区别是`data`对象现在包含`taggedFriends`属性：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we create a new post and check the record in the database, we will see something
    like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们创建一个新帖子并检查数据库中的记录，我们会看到类似于这样的东西：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let''s update the fetching of the database records. We have the IDs of
    our friends, but we need their names. So, in the same `content.js` file, we will
    place the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更新数据库记录的获取。我们有我们朋友的ID，但我们需要他们的名称。因此，在同一个`content.js`文件中，我们将放置以下代码：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We have the items from the database in the `results` array. The looping through
    the posts is still the same but doesn't send the response after the `forEach`
    call. For every post in the list, we need to send a request to the MongoDB database
    and get the name of the friends. So, we will initialize the `numberOfPosts` variable,
    and every time the request for the friend's name is finished, we will decrease
    the value. Once it gets to 0, we know that the last post is processed. After this,
    we will send the response to the browser.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`results`数组中有来自数据库的项目。遍历帖子仍然是相同的，但在`forEach`调用之后不发送响应。对于列表中的每个帖子，我们需要向MongoDB数据库发送请求并获取朋友的名称。因此，我们将初始化`numberOfPosts`变量，并且每次朋友名称的请求完成时，我们将减少该值。一旦它减少到0，我们就知道最后一个帖子已经处理完毕。之后，我们将向浏览器发送响应。
- en: 'Here is a small update of the `frontend/tpl/home.html` file that will make
    the `taggedFriends` array visible:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`frontend/tpl/home.html`文件的一个小更新，将使`taggedFriends`数组可见：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Along with the owner, the text, and the picture (if any), we check whether
    there are any tagged people. If there are any tagged people, then we join all
    the elements of the `taggedFriends` array with the given separator. The result
    looks like the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 除了所有者、文本和图片（如果有的话），我们还检查是否有任何标记的人。如果有任何标记的人，那么我们将使用给定的分隔符连接`taggedFriends`数组的所有元素。结果看起来像下面的截图：
- en: '![Storing the tagged users and displaying them in the user''s feed](img/image00182.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![存储标记用户并在用户的动态中显示它们](img/image00182.jpeg)'
- en: Sharing a post
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分享帖子
- en: 'The sharing function of our application will give an option to the current
    user to republish an already created post. We should make sure that the user does
    not share his/her own records. So, let''s start from there. The API returns the
    posts and knows who created them. It also knows which user is making the request.
    The following code creates a new property called `ownPost`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用的分享功能将为当前用户提供重新发布已创建帖子的选项。我们应该确保用户不分享自己的记录。因此，让我们从那里开始。API返回帖子并知道谁创建了它们。它还知道哪个用户正在发出请求。以下代码创建了一个名为`ownPost`的新属性：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is the logic that prepares the posts and sends them to the browser. The
    `getCurrentUser` property returns the user that is currently making the requests.
    The `user._id` variable is exactly what we need. This ID is actually assigned
    to the `userId` property for every post. So, we will simply compare them and determine
    whether the sharing is allowed or not. If the `ownPost` variable is equal to `true`,
    then the user should not be able to share the post.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是准备帖子并将其发送到浏览器的逻辑。`getCurrentUser`属性返回当前发出请求的用户。`user._id`变量正是我们需要的。这个ID实际上分配给了每个帖子的`userId`属性。因此，我们将简单地比较它们，并确定是否允许分享。如果`ownPost`变量等于`true`，那么用户就不应该能够分享帖子。
- en: 'In the previous section, we added a new markup to display the tagged friends.
    The space below them seems like a good place to place a **Share** button:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们添加了一个新的标记朋友的标记以显示标记的朋友。它们下方的空间似乎是放置**分享**按钮的好地方：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, the new `ownPost` property comes into use. If the post is not made by
    the current user, then we will show the button that dispatches the `share` event.
    Ractive.js gives us an opportunity to send data along with the event. In our case,
    this is the ID of the post.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，新的`ownPost`属性开始发挥作用。如果帖子不是由当前用户发布的，那么我们将显示一个按钮，用于触发`share`事件。Ractive.js为我们提供了发送数据的机会。在我们的情况下，这是帖子的ID。
- en: 'The controller of the home page should listen to this event. A quick update
    of `controllers/Home.js` adds the listener, as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 主页的控制器应该监听这个事件。`controllers/Home.js`的快速更新添加了监听器，如下所示：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `model` object is an instance of the `ContentModel` class. The sharing
    is a new feature. So, we need to send queries to a different API endpoint. The
    new `sharePost` method looks like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`model`对象是`ContentModel`类的一个实例。分享是一个新功能。因此，我们需要向不同的API端点发送查询。新的`sharePost`方法如下所示：'
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We used some code that is similar to the preceding one many times in the previous
    chapter. It sends a `POST` request to the backend at a specific URL. Here, the
    URL is `/api/content/share`. It is also important to mention that `formData` contains
    the ID of the post that we want to share.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章中多次使用了与前面相似的代码。它向特定URL的后端发送一个`POST`请求。在这里，URL是`/api/content/share`。还要提到的是，`formData`包含我们想要分享的帖子的ID。
- en: 'Let''s continue and make the necessary changes in the API. We already defined
    the URL that will host this functionality—`/api/content/share`. A new route in
    `backend/API.js` is needed, which is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续，在API中进行必要的更改。我们已经定义了将承载此功能的URL——`/api/content/share`。需要在`backend/API.js`中添加一个新路由，如下所示：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The next step involves the creation of the `content-share` controller. Like
    every other controller, we will start with requiring the helpers. We will skip
    this part and jump directly to the processing of the `POST` request:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步涉及创建`content-share`控制器。像每个其他控制器一样，我们将从要求助手开始。我们将跳过这部分，直接转到处理`POST`请求：
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding method expects a `postId` variable. If there is no such variable,
    then we will respond with an error. The rest of the code again involves the usage
    of the `formidable` module and the defining of a `done` function to send a response
    for a successful operation. Here is the more interesting part:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法期望一个`postId`变量。如果没有这样的变量，那么我们将以错误响应。代码的其余部分再次涉及`formidable`模块的使用和定义`done`函数以发送成功操作的响应。以下是更有趣的部分：
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After finding the post that should be shared, we will prepare an object that
    will be saved as a new record. We need to perform a few operations on the original
    post:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在找到应该分享的帖子后，我们将准备一个将保存为新记录的对象。我们需要对原始帖子执行一些操作：
- en: '[PRE17]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We surely do not need the `_id` property. MongoDB will create a new one. The
    third line defines a `via` property. We will talk about this in a minute, but
    in short, it is used to display the original author of the post. The lines after
    `via` set the owner of the new record. The date is also changed, and since this
    is a new post, we clear the `taggedFriends` array.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确实不需要`_id`属性。MongoDB将创建一个新的。第三行定义了一个`via`属性。我们将在一分钟内讨论这个问题，但简而言之，它用于显示帖子的原始作者。`via`后面的行设置了新记录的所有者。日期也被更改了，由于这是一个新帖子，我们清除了`taggedFriends`数组。
- en: 'The shared post is now in the database and it is displayed in the users'' feeds.
    Let''s use the `via` property and show the original creator of the post in the
    following way:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 共享的帖子现在在数据库中，并显示在用户的动态中。让我们使用`via`属性，并以以下方式显示帖子的原始创建者：
- en: '[PRE18]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We will check whether the variable is available and if it is, then we will
    add a small text below the text of the post. The result will look like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将检查变量是否可用，如果是，那么我们将在帖子文本下面添加一小段文字。结果将如下所示：
- en: '![Sharing a post](img/image00183.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![分享帖子](img/image00183.jpeg)'
- en: Liking posts and counting the number of likes
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 喜欢帖子并计算喜欢的数量
- en: 'The users of our social network should be able to see a **Like** button. By
    clicking on it, they will send a request to the API and our task is to count these
    clicks. Of course, only one click per user is allowed. As in the previous section,
    we will start by updating the user interface. Let''s add another button next to
    the **Share** one in the following way:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的社交网络用户应该能够看到一个**喜欢**按钮。点击它，他们将向API发送一个请求，我们的任务是计算这些点击。当然，每个用户只允许点击一次。与上一节一样，我们将从更新用户界面开始。让我们以以下方式在**分享**旁边添加另一个按钮：
- en: '[PRE19]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The new button dispatches a `like` event, and we will again pass the ID of
    the post. It is actually similar to the `share` event. Also, the liking action
    will use the same type of communication with the backend. So, it makes sense to
    refactor our code and use only one function for both the features. In the previous
    section, we added the `sharePost` method to the `models/Content.js` file. Let''s
    change it to `usePost` in the following way:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 新按钮分派了一个`like`事件，我们将再次传递帖子的ID。这实际上类似于`share`事件。此外，喜欢的动作将使用与后端相同类型的通信。因此，重构我们的代码并仅使用一个函数来处理这两个功能是有意义的。在上一节中，我们在`models/Content.js`文件中添加了`sharePost`方法。让我们以以下方式将其更改为`usePost`：
- en: '[PRE20]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Because the only one thing that differs is the URL, we define it as a parameter.
    The `formData` interface still contains the ID of the post. Here is the updated
    code of our controller:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因为唯一不同的是URL，我们将其定义为参数。`formData`接口仍然包含帖子的ID。以下是我们控制器的更新代码：
- en: '[PRE21]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We skipped the definition of one more method and made the implementation of
    the model a bit more flexible. We may need to add a new operation and the last
    tweak will come in handy.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们跳过了定义另一个方法，并使模型的实现更加灵活。我们可能需要添加一个新操作，最后的微调将派上用场。
- en: 'According to the changes in the API, we followed the same workflow. A new route
    responding to `/api/content/like` is needed, which can be created as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 根据API的更改，我们遵循了相同的工作流程。需要响应`/api/content/like`的新路由，可以创建如下：
- en: '[PRE22]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `content-like` controller still does not exist. We will create a new `backend/api/content-like.js`
    file that will host the logic related to the liking. The usual things like protecting
    the method from unauthorized users and fetching the `POST` data with `formidable`
    are present. This time, we are not going to use the `insert` method of the collection.
    Instead, we will use `update`. We will construct a slightly more complex MongoDB
    query and update a new property called `likes`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`content-like` 控制器仍然不存在。我们将创建一个新的 `backend/api/content-like.js` 文件，其中将包含与喜欢相关的逻辑。像保护未经授权用户的方法和使用
    `formidable` 获取 `POST` 数据这样的常规操作都存在。这次，我们不会使用集合的 `insert` 方法。相反，我们将使用 `update`。我们将构建一个稍微复杂一些的
    MongoDB 查询，并更新一个名为 `likes` 的新属性。'
- en: 'The `update` method accepts four parameters. The first one is the criteria.
    The records that match our criteria will be updated. The second one contains instructions
    with regards to what we want to update. The third parameter contains additional
    options and the last one is a callback that is invoked once the operation ends.
    Here is how our query looks:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`update` 方法接受四个参数。第一个是条件。符合我们条件的记录将被更新。第二个包含了我们想要更新的指令。第三个参数包含了额外的选项，最后一个是一个回调函数，一旦操作结束就会被调用。这是我们的查询的样子：'
- en: '[PRE23]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The code is indeed a bit long but it does its job. Let''s go through it line
    by line. The first parameter, our criteria, makes sure that we are going to update
    the right post. Because we use the `$and` operator, the second object in the array
    should also be valid. You may notice that a few lines below `$and`, the `$push`
    operator adds a new object to an array called `likes`. Every object has a `name`
    property containing the name of the user that hits the **Like** button. So, in
    our `"likes.user": { $nin: [userName] }` criteria, it means that the record will
    be updated only if `userName` is not in some of the elements of the `likes` array.
    This might look a little complex, but it is really a powerful combination of operators.
    Without this, we would probably end up making several queries to the database.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '代码确实有点长，但它完成了它的工作。让我们逐行来看一下。第一个参数，我们的条件，确保我们将要更新正确的帖子。因为我们使用了 `$and` 运算符，数组中的第二个对象也应该是有效的。你可能注意到在
    `$and` 下面几行，`$push` 运算符向一个名为 `likes` 的数组中添加了一个新对象。每个对象都有一个包含点击**喜欢**按钮的用户的名字的
    `name` 属性。所以，在我们的 `"likes.user": { $nin: [userName] }` 条件中，这意味着只有当 `userName`
    不在 `likes` 数组的一些元素中时，记录才会被更新。这可能看起来有点复杂，但它确实是一种强大的运算符组合。如果没有这个，我们可能最终会对数据库进行多次查询。'
- en: 'The `{w: 1}` option always changes its value if a callback is passed.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`{w: 1}` 选项总是在传递回调时改变其值。'
- en: Once the record is updated, we will simply call the `done` method and send a
    response to the user.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 记录更新后，我们将简单地调用 `done` 方法并向用户发送响应。
- en: 'With the changes in the API, we successfully finished this feature. Here is
    how a post looks in the browser now:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对 API 的更改，我们成功完成了这个功能。现在帖子在浏览器中的样子如下：
- en: '![Liking posts and counting the number of likes](img/image00184.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![喜欢帖子和计算喜欢次数](img/image00184.jpeg)'
- en: Showing the number of likes
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示喜欢的次数
- en: 'We keep the likes in an array. It is easy to count the elements there and find
    out how many times a post is liked. We will make two small changes that will make
    this possible. The first one is in the API, which is the place where we prepare
    the post objects:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将喜欢的内容保存在一个数组中。很容易对其中的元素进行计数，找出一篇帖子被喜欢的次数。我们将进行两个小改动，使这成为可能。第一个是在 API 中，那是我们准备帖子对象的地方：
- en: '[PRE24]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'A new `numberOfLikes` property is attached. The records did not have a `likes`
    property in the beginning. So, we have to check whether it exists before we use
    it. If we have `numberOfLikes` variable, we can update the label of the **Like**
    button in the frontend to the following code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的 `numberOfLikes` 属性被附加上。记录一开始没有 `likes` 属性。所以，在使用之前我们必须检查它是否存在。如果我们有 `numberOfLikes`
    变量，我们可以将前端**喜欢**按钮的标签更新为以下代码：
- en: '[PRE25]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Once created, every post has zero likes. So, the label of the button is **Like
    (0)**, but after the first click, it changes to **Like (1)**. The following screenshot
    demonstrates how this looks in practice:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 每个帖子创建后都没有喜欢。所以，按钮的标签是**喜欢（0）**，但第一次点击后，它会变成**喜欢（1）**。以下截图展示了这在实践中的样子：
- en: '![Showing the number of likes](img/image00185.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![显示喜欢的次数](img/image00185.jpeg)'
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter was about some of the most used features in social networks nowadays—tagging,
    sharing, and liking. We updated both sides of our application and validated our
    knowledge from the previous chapters.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了当今社交网络中最常用的一些功能——标记、分享和喜欢。我们更新了应用程序的两侧，并验证了我们在之前章节中的知识。
- en: The next chapter will be about real-time communication. We will build a chat
    window for our users, and they will be able to send real-time messages to others.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将讨论实时通信。我们将为用户构建一个聊天窗口，他们将能够向其他人发送实时消息。
