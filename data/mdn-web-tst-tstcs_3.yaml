- en: '*Chapter 3:* Setting Up the Environment'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第三章：设置环境*'
- en: The main learning goal of this chapter is to get used to setting up the testing
    environment for writing end-to-end tests using TestCafe. You will learn how to
    set up a Node.js environment (including TestCafe itself), create a basic configuration
    file to run the tests, and structure the test code to follow the best practices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要学习目标是熟悉使用 TestCafe 设置测试环境以编写端到端测试。你将学习如何设置 Node.js 环境（包括 TestCafe 本身），创建一个基本的配置文件来运行测试，以及如何构建测试代码以遵循最佳实践。
- en: This is especially important because in real life, each new project/repository
    usually requires a testing infrastructure to be set up to prevent regressions
    and to keep the code quality high.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这尤其重要，因为在现实生活中，每个新的项目/存储库通常都需要设置测试基础设施以防止回归并保持代码质量。
- en: 'To sum up, this chapter will cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，本章将涵盖以下主要主题：
- en: Setting up the test project environment.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置测试项目环境。
- en: Creating the test project configuration file.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建测试项目配置文件。
- en: Structuring the test code.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建测试代码。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All the code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/tree/master/ch3](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/tree/master/ch3).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码示例都可以在 GitHub 上找到，地址为 [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/tree/master/ch3](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/tree/master/ch3)。
- en: Setting up the test project environment
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置测试项目环境
- en: 'It is important to set up the environment properly now as we will be using
    it for the rest of the chapter and up to the end of this book. Doing so will also
    help you understand the basics of how Node.js deals with different packages and
    how to spin up pretty much any JavaScript/Node.js-based testing framework. We
    will divide the setup process into two sections:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在正确设置环境非常重要，因为我们将在本章的剩余部分以及整本书的结尾使用它。这样做还将帮助您了解 Node.js 如何处理不同的包以及如何启动几乎任何基于
    JavaScript/Node.js 的测试框架。我们将设置过程分为两个部分：
- en: Installing Node.js.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Node.js。
- en: Installing TestCafe.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 TestCafe。
- en: So, let's go through the whole process, starting from the beginning—installing
    Node.js.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们从头开始，从安装 Node.js 开始整个过程。
- en: Installing Node.js
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Node.js
- en: JavaScript is a client-side programming language that mostly deals with the
    frontend, which means it is usually processed by the browser of each user that
    opens your website or web application. Node.js was developed as a JavaScript runtime
    environment to provide the ability to use JavaScript as a server-side backend
    language.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是一种客户端编程语言，主要处理前端，这意味着它通常由打开您网站或 web 应用的每个用户的浏览器处理。Node.js 作为一种 JavaScript
    运行时环境被开发出来，以提供将 JavaScript 作为服务器端后端语言的能力。
- en: In order to launch almost any development tools written in JavaScript, you'll
    need to use Node.js and `node_modules` folder).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启动几乎所有用 JavaScript 编写的开发工具，您需要使用 Node.js 和 `node_modules` 文件夹。
- en: 'Node.js is available for a variety of operating systems, macOS, Ubuntu/Linux,
    and Windows being among them. The easiest way to install Node.js and `npm` is
    to follow these steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 可用于多种操作系统，包括 macOS、Ubuntu/Linux 和 Windows。安装 Node.js 和 `npm` 的最简单方法是按照以下步骤操作：
- en: Open [https://nodejs.org/en/download/](https://nodejs.org/en/download/).
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 [https://nodejs.org/en/download/](https://nodejs.org/en/download/)。
- en: Select the **long-term support (LTS)** version.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **长期支持 (LTS)** 版本。
- en: Select your operating system.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的操作系统。
- en: Download the installation file and run it.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载安装文件并运行它。
- en: Another slightly more complex but reusable way is to install Node.js through
    **Node Version Manager (nvm** – [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm))
    or n ([https://github.com/tj/n](https://github.com/tj/n)). Version managers give
    you the ability to install several versions of Node.js simultaneously and switch
    between them whenever you like, which is quite useful during test development.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种稍微复杂但可重用的方法是，通过 **Node 版本管理器 (nvm** – [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm))
    或 n ([https://github.com/tj/n](https://github.com/tj/n)) 安装 Node.js。版本管理器允许您同时安装多个
    Node.js 版本，并且可以随时在它们之间切换，这在测试开发期间非常有用。
- en: 'Once the installation is finished, you can check whether both Node.js and `npm`
    are working properly by opening any shell (for example, Terminal or PowerShell)
    and executing the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以通过打开任何外壳（例如，终端或 PowerShell）并执行以下命令来检查 Node.js 和 `npm` 是否正常工作：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That should output the version number for Node.js and `npm`, respectively.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会分别输出 Node.js 和 `npm` 的版本号。
- en: Installing TestCafe
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 TestCafe
- en: As we already have Node.js and `npm` installed, let's proceed with installing
    TestCafe. It can be installed from `npm` locally (to run from your project folder)
    or globally (to run from any location).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经安装了 Node.js 和 `npm`，让我们继续安装 TestCafe。它可以从 `npm` 本地安装（从您的项目文件夹运行）或全局安装（从任何位置运行）。
- en: Installing TestCafe locally
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本地安装 TestCafe
- en: 'To install TestCafe locally to your project directory and save it to the dependencies
    list, open any shell, go to your project folder, and execute the following two
    commands:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 TestCafe 本地安装到您的项目目录并保存到依赖项列表中，请打开任何 shell，转到您的项目文件夹，并执行以下两个命令：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first command will create a simple `package.json` file to store all the
    dependencies. The second command will install the `testcafe` package and save
    it to the list of your project's dependencies in `package.json`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令将创建一个简单的 `package.json` 文件来存储所有依赖项。第二个命令将安装 `testcafe` 包并将其保存到 `package.json`
    中您项目的依赖项列表中。
- en: Installing TestCafe globally
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全局安装 TestCafe
- en: 'To install TestCafe globally, open any shell and execute the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要全局安装 TestCafe，打开任何 shell 并执行以下命令：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will install TestCafe globally, and it will be accessible from any folder.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将全局安装 TestCafe，并且可以从任何文件夹访问它。
- en: 'You can always check the version of the `testcafe` package that is installed
    by executing the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过执行以下命令来检查已安装的 `testcafe` 包的版本：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: On macOS (starting from v10.15 Catalina and up), TestCafe requires screen recording
    permission to carry out test actions and take screenshots and videos. When TestCafe
    tests launch for the first time, macOS will ask you to allow screen recording
    for TestCafe browser tools. Go to **System Preferences** - **Security and Privacy**
    - **Privacy** and check **TestCafe Browser Tools** to grant permission. When you
    update macOS or TestCafe, security permissions may be purged—in this case, the
    system will repeat the request. So, when the **Security and Privacy** popup opens
    again, just uncheck and recheck the **TestCafe Browser Tools** checkbox.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS（从 v10.15 Catalina 版本开始），TestCafe 需要屏幕录制权限来执行测试操作并截图和录制视频。当 TestCafe
    首次启动测试时，macOS 将要求您允许 TestCafe 浏览器工具进行屏幕录制。转到 **系统偏好设置** - **安全性与隐私** - **隐私**，并勾选
    **TestCafe 浏览器工具** 以授予权限。当您更新 macOS 或 TestCafe 时，安全权限可能会被清除——在这种情况下，系统将重复请求。因此，当
    **安全性与隐私** 弹出窗口再次打开时，只需取消勾选并重新勾选 **TestCafe 浏览器工具** 复选框。
- en: Now, as we have Node.js, npm, and TestCafe installed and ready, let's proceed
    with creating a configuration file for our tests.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由于我们已经安装并准备好了 Node.js、npm 和 TestCafe，让我们继续创建测试项目的配置文件。
- en: Creating the test project configuration file
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建测试项目配置文件
- en: In this section, we will see how to configure TestCafe. However, before reviewing
    the main configuration options, let's set a convention for some coding style standards.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何配置 TestCafe。然而，在审查主要配置选项之前，让我们为一些编码风格标准设定一个约定。
- en: Accepting code styling convention
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接受代码风格约定
- en: 'When writing code throughout this book, we will follow some simple rules, such
    as indenting with two spaces for `.json` files and four spaces for `.js` files.
    We will also use semicolons and single-quotes. Most popular code editors support
    a `.editorconfig` configuration file to automatically apply the rules:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书编写代码的过程中，我们将遵循一些简单的规则，例如 `.json` 文件使用两个空格缩进，`.js` 文件使用四个空格缩进。我们还将使用分号和单引号。大多数流行的代码编辑器都支持
    `.editorconfig` 配置文件来自动应用这些规则：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can copy the basic config file that we will be using from [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/.editorconfig](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/.editorconfig).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/.editorconfig](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/.editorconfig)
    复制我们将要使用的基本配置文件。
- en: Exploring the configuration settings
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索配置设置
- en: 'The TestCafe configuration settings are usually stored in the `.testcaferc.json`
    file in the root folder of your project. Let''s look at the main options that
    can be specified:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: TestCafe 配置设置通常存储在项目根目录下的 `.testcaferc.json` 文件中。让我们看看可以指定的主要选项：
- en: '`browsers` is a string, or an array of strings, that sets one or more browsers
    to launch tests in. Browser aliases should be specified for any locally installed
    browsers, such as `chrome`, `firefox`, `safari`, `ie`, `edge`, or `opera` ([https://devexpress.github.io/testcafe/documentation/guides/concepts/browsers.html#locally-installed-browsers](https://devexpress.github.io/testcafe/documentation/guides/concepts/browsers.html#locally-installed-browsers)).
    You can see the list of all the available browsers in your system—just open any
    shell and run the following command:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`browsers` 是一个字符串，或一个字符串数组，用于设置要启动测试的一个或多个浏览器。对于任何本地安装的浏览器，例如 `chrome`、`firefox`、`safari`、`ie`、`edge`
    或 `opera`，应指定浏览器别名（[https://devexpress.github.io/testcafe/documentation/guides/concepts/browsers.html#locally-installed-browsers](https://devexpress.github.io/testcafe/documentation/guides/concepts/browsers.html#locally-installed-browsers)）。您可以在系统中的任何壳中打开并运行以下命令来查看所有可用的浏览器列表：'
- en: '[PRE5]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '{  "browsers": "chrome"}'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "browsers": "chrome"}'
- en: '[PRE6]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '{  "browsers": ["firefox", "chrome"]}'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "browsers": ["firefox", "chrome"]}'
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '{  "browsers": "saucelabs:Chrome@83.0:Windows 10"}'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "browsers": "saucelabs:Chrome@83.0:Windows 10"}'
- en: '[PRE8]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '{  "browsers": ["firefox:headless",     "chrome:emulation:device=iphone X"]}'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "browsers": ["firefox:headless",     "chrome:emulation:device=iphone X"]}'
- en: '[PRE9]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`src` is a string, or an array of strings, that sets a path to files or directories
    from where the tests should be launched. To run tests from one file, use the following
    code:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src` 是一个字符串，或一个字符串数组，用于设置从其中启动测试的文件或目录的路径。要从单个文件运行测试，请使用以下代码：'
- en: '[PRE10]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Global patterns can be used to parse a set of files:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用全局模式来解析一组文件：
- en: '[PRE11]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`reporter` is a string or an array of objects that sets the name of a built-in
    or custom reporter for generating test reports ([https://devexpress.github.io/testcafe/documentation/guides/concepts/reporters.html](https://devexpress.github.io/testcafe/documentation/guides/concepts/reporters.html)).
    By default, a `spec` reporter is used. To specify any other reporters—for example,
    `minimal`—use the following:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reporter` 是一个字符串或一个对象数组，用于设置用于生成测试报告的内置或自定义报告器的名称（[https://devexpress.github.io/testcafe/documentation/guides/concepts/reporters.html](https://devexpress.github.io/testcafe/documentation/guides/concepts/reporters.html)）。默认情况下，使用
    `spec` 报告器。要指定任何其他报告器，例如 `minimal`，请使用以下命令：'
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Multiple reporters can be set at the same time, but only one reporter can write
    to the console output (standard output, or `stdout`), and all other reporters
    should write to the files:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以同时设置多个报告器，但只能有一个报告器可以写入控制台输出（标准输出，或 `stdout`），所有其他报告器应写入文件：
- en: '[PRE13]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can also explore and use any of the available reporters from [https://www.npmjs.com/search?q=testcafe-reporter](https://www.npmjs.com/search?q=testcafe-reporter).
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您还可以探索和使用来自 [https://www.npmjs.com/search?q=testcafe-reporter](https://www.npmjs.com/search?q=testcafe-reporter)
    的任何可用报告器。
- en: '`screenshots` is an object that allows you to set the screenshot options. These
    options include `path`, which is a string for the directory where screenshots
    are saved; `takeOnFails`, which is a boolean for whether a screenshot should be
    captured whenever a test fails; `pathPattern`, which is a string for the custom
    pattern to create a relative path and a name for the screenshot; and `fullPage`,
    which is a boolean for whether a screenshot should be taken of the full page (including
    any content that is not visible because of the overflow):'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`screenshots` 是一个对象，允许您设置截图选项。这些选项包括 `path`，它是一个字符串，表示保存截图的目录；`takeOnFails`，它是一个布尔值，表示是否在测试失败时捕获截图；`pathPattern`，它是一个字符串，用于创建相对路径和截图的名称；以及
    `fullPage`，它是一个布尔值，表示是否应捕获整个页面截图（包括由于溢出而不可见的任何内容）：'
- en: '[PRE14]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: See the full list of the placeholder path patterns that can be used for screenshots
    and videos at [https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/screenshots-and-videos.html#path-pattern-placeholders](https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/screenshots-and-videos.html#path-pattern-placeholders).
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅可用于截图和视频的完整占位符路径模式列表，链接为 [https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/screenshots-and-videos.html#path-pattern-placeholders](https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/screenshots-and-videos.html#path-pattern-placeholders)。
- en: '`videoPath` is a string for the directory where videos of test runs are saved:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`videoPath` 是一个字符串，表示保存测试运行视频的目录：'
- en: '[PRE15]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`videoOptions` is an object that allows you to set the video options. These
    options include `failedOnly`, which is a boolean that should be set to `true`
    to enable recording for the failed tests only or to `false` (the default) to record
    all the tests; `singleFile`, which is a boolean that should be set to `true` to
    save the whole record in a single file or to `false` (the default) for a separate
    file per test; and `pathPattern`, which is a string for the custom pattern to
    compose the relative path and the name of the video file:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`videoOptions` 是一个对象，允许您设置视频选项。这些选项包括 `failedOnly`，这是一个布尔值，应设置为 `true` 以仅对失败的测试进行录制，或设置为
    `false`（默认值）以录制所有测试；`singleFile`，这是一个布尔值，应设置为 `true` 以将整个记录保存到单个文件中，或设置为 `false`（默认值）以每个测试保存到单独的文件；以及
    `pathPattern`，这是一个字符串，用于自定义模式来组合相对路径和视频文件名：'
- en: '[PRE16]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`videoEncodingOptions` is an object that sets the video encoding options (all
    the `FFmpeg` library options are supported, which you can find at [https://ffmpeg.org/ffmpeg.html#Options](https://ffmpeg.org/ffmpeg.html#Options)).
    For example, let''s set the frame rate and video display aspect ratio:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`videoEncodingOptions` 是一个对象，用于设置视频编码选项（支持所有 `FFmpeg` 库选项，您可以在 [https://ffmpeg.org/ffmpeg.html#Options](https://ffmpeg.org/ffmpeg.html#Options)
    找到这些选项）。例如，让我们设置帧率和视频显示宽高比：'
- en: '[PRE17]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`quarantineMode` is a boolean to switch failed tests to quarantine mode (to
    rerun the unstable tests):'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quarantineMode` 是一个布尔值，用于将失败的测试切换到隔离模式（以重新运行不稳定的测试）：'
- en: '[PRE18]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If quarantine mode is turned on, tests run will follow the next logic:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果启用隔离模式，测试运行将遵循以下逻辑：
- en: '![Figure 3.1 – Tests run logic in quarantine mode'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.1 – 在隔离模式下运行的测试逻辑'
- en: '](img/B16280_03_01_New.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.1 – 在隔离模式下运行的测试逻辑](img/B16280_03_01_New.jpg)'
- en: Figure 3.1 – Tests run logic in quarantine mode
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 在隔离模式下运行的测试逻辑
- en: '`debugMode` is a boolean to run tests in debugging mode:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debugMode` 是一个布尔值，用于在调试模式下运行测试：'
- en: '[PRE19]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'If debug mode is on, test execution will be paused before the first action
    or assertion so that you can open the developer tools and start debugging. To
    make it easier, a status bar will be displayed in the footer showing the available
    debug actions: **Unlock page**, **Resume**, and **Next step**.'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果启用调试模式，测试执行将在第一个动作或断言之前暂停，以便您可以打开开发者工具并开始调试。为了便于操作，将在页脚显示一个状态栏，显示可用的调试操作：**解锁页面**、**继续**和**下一步**。
- en: '`debugOnFail` is a boolean to automatically enable debug mode after a test
    fails. If this option is set to `true` (it''s set to `false` by default), TestCafe
    will pause during the test failure so that you can view the tested page, open
    the developer tools, and figure out why it failed:'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debugOnFail` 是一个布尔值，用于在测试失败后自动启用调试模式。如果此选项设置为 `true`（默认设置为 `false`），TestCafe
    将在测试失败时暂停，以便您可以查看测试页面，打开开发者工具，并找出失败的原因：'
- en: '[PRE20]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`skipJsErrors` is a boolean to ignore JavaScript errors on a tested web page
    (by default, when these errors occur, TestCafe will stop running the test and
    post an error message with a stack trace to the output report):'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skipJsErrors` 是一个布尔值，用于忽略测试网页上的 JavaScript 错误（默认情况下，当这些错误发生时，TestCafe 将停止运行测试，并在输出报告中发布带有堆栈跟踪的错误消息）：'
- en: '[PRE21]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`skipUncaughtErrors` is a boolean to ignore uncaught JavaScript errors and
    unhandled promise rejections on a tested web page (by default, when these errors
    or promise rejections occur, TestCafe will stop running the test and post an error
    message with a stack trace to the output report):'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skipUncaughtErrors` 是一个布尔值，用于忽略测试网页上的未捕获 JavaScript 错误和未处理的承诺拒绝（默认情况下，当这些错误或承诺拒绝发生时，TestCafe
    将停止运行测试，并在输出报告中发布带有堆栈跟踪的错误消息）：'
- en: '[PRE22]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`appCommand` is a string to execute the specified shell command before tests
    are started. This option is often used to launch the application you need to run
    tests over (such application will be automatically stopped after all the tests
    are executed):'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appCommand` 是一个字符串，用于在测试开始之前执行指定的 shell 命令。此选项通常用于启动需要运行测试的应用程序（在所有测试执行完毕后，此类应用程序将自动停止）：'
- en: '[PRE23]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`appInitDelay` is the time TestCafe will wait before launching the tests (in
    milliseconds; the default value is `1000`). So, this delay is used to give an
    application launched with the `appCommand` option some time to start:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appInitDelay` 是 TestCafe 在启动测试之前等待的时间（以毫秒为单位；默认值为 `1000`）。因此，此延迟用于给使用 `appCommand`
    选项启动的应用程序一些启动时间：'
- en: '[PRE24]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`concurrency` is the number of browser instances spawned to run tests in parallel.
    TestCafe will start with a specified number of browser instances and create a
    pool of those instances. Tests will be launched simultaneously against this pool;
    each test will take the first free browser instance from the pool and run inside
    this instance:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`concurrency` 是用于并行运行测试的浏览器实例的数量。TestCafe 将以指定的浏览器实例数量开始，并创建这些实例的池。测试将同时针对此池启动；每个测试将从池中获取第一个空闲的浏览器实例并在其中运行：'
- en: '[PRE25]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`selectorTimeout` is the time within which the selector sends requests to retrieve
    a web element node (in milliseconds; the default value is `10000`):'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectorTimeout` 是选择器在请求检索网页元素节点时的时间（以毫秒为单位；默认值为 `10000`）：'
- en: '[PRE26]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`assertionTimeout` is the time during which TestCafe performs assertion requests
    (in milliseconds; the default value is `3000`). This timeout will be applied only
    if a selector property or a client function is used in an assertion as an `actual`
    value:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertionTimeout` 是 TestCafe 执行断言请求的时间（以毫秒为单位；默认值为 `3000`）。此超时仅适用于在断言中使用选择器属性或客户端函数作为
    `实际` 值的情况：'
- en: '[PRE27]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`pageLoadTimeout` is the time after the `DOMContentLoaded` event within which
    TestCafe waits for the `window.load` event to be fired (in milliseconds; the default
    value is `3000`). TestCafe starts the test after the `window.load` event is triggered
    or the timeout passes (whichever happens first):'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pageLoadTimeout` 是在 `DOMContentLoaded` 事件之后 TestCafe 等待 `window.load` 事件被触发的时间（以毫秒为单位；默认值为
    `3000`）。TestCafe 在 `window.load` 事件被触发或超时通过（以先发生者为准）后开始测试：'
- en: '[PRE28]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`speed` is the test execution speed (`1` is the fastest and `0.01` is the slowest;
    `1` is the default). This option can be used to slow down the tests:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`speed` 是测试执行速度（`1` 是最快的，`0.01` 是最慢的；默认值为 `1`）。此选项可用于减慢测试速度：'
- en: '[PRE29]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: If the speed is set in `.testcaferc.json` and also within the test for an individual
    action, the action's speed setting will have a higher priority and will override
    the speed set in the configuration file.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在 `.testcaferc.json` 中设置了速度，并且在针对单个操作的测试中也设置了速度，则操作的速度设置将具有更高的优先级，并将覆盖配置文件中设置的速度：
- en: '`clientScripts` is an object, an array of objects, or a string for the scripts
    to be injected into any pages opened during the tests. This property is often
    used to add client-side mock functions, modules, or helper scripts. You can set
    `content`, which is a string with the code to inject the JavaScript code; `module`,
    which is a string with the module name to inject the module; and `path`, which
    is a string with the path to the file to inject the JavaScript file. Any of these
    settings can be paired with the optional `page` setting to set a specific page
    that the provided scripts should be injected into:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clientScripts` 是一个对象、一个对象数组或一个字符串，用于在测试期间注入任何打开的页面中的脚本。此属性通常用于添加客户端模拟函数、模块或辅助脚本。您可以设置
    `content`，这是一个包含要注入的 JavaScript 代码的字符串；`module`，这是一个包含要注入的模块名称的字符串；以及 `path`，这是一个包含要注入的
    JavaScript 文件的路径的字符串。这些设置中的任何一个都可以与可选的 `page` 设置配对，以设置应注入提供的脚本的特定页面：'
- en: '[PRE30]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`port1` and `port2` are numbers in the range of `0` to `65535` that represent
    a custom port, which TestCafe uses to launch the testing infrastructure (if ports
    are not set, TestCafe automatically selects them):'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port1` 和 `port2` 是范围在 `0` 到 `65535` 之间的数字，代表一个自定义端口，TestCafe 使用它来启动测试基础设施（如果未设置端口，TestCafe
    将自动选择它们）：'
- en: '[PRE31]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '`hostname` is a string for the hostname of your computer, used when you run
    tests within remote browsers. If `hostname` is not set, TestCafe will use the
    operating system hostname or the network IP address of the current machine:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hostname` 是您计算机的主机名，当您在远程浏览器中运行测试时使用。如果未设置 `hostname`，TestCafe 将使用操作系统的主机名或当前机器的网络
    IP 地址：'
- en: '[PRE32]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '`proxy` is a string for the proxy server used in your local network to access
    the internet:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`proxy` 是用于您本地网络中访问互联网的代理服务器的字符串：'
- en: '[PRE33]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Authentication credentials can also be set with the proxy host:'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 认证凭据也可以通过代理主机设置：
- en: '[PRE34]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`proxyBypass` is a string (or an array of strings) that requires TestCafe to
    bypass the proxy server to access the specified resources:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`proxyBypass` 是一个字符串（或字符串数组），要求 TestCafe 绕过代理服务器以访问指定的资源：'
- en: '[PRE35]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`developmentMode` is a boolean to diagnose errors (if you want to report an
    issue to TestCafe Support, you should set this option to `true`):'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`developmentMode` 是一个布尔值，用于诊断错误（如果您想向 TestCafe 支持报告问题，应将此选项设置为 `true`）：'
- en: '[PRE36]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '`stopOnFirstFail` is a boolean to stop a test run right after any of the tests
    fail:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stopOnFirstFail` 是一个布尔值，用于在任何一个测试失败后立即停止测试运行：'
- en: '[PRE37]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`tsConfigPath` is a string to enable TestCafe to use a custom TypeScript configuration
    file and set its location ([https://devexpress.github.io/testcafe/documentation/guides/concepts/typescript-and-coffeescript.html#customize-compiler-options](https://devexpress.github.io/testcafe/documentation/guides/concepts/typescript-and-coffeescript.html#customize-compiler-options)).
    A relative or an absolute path can be used:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tsConfigPath` 是一个字符串，用于使 TestCafe 能够使用自定义 TypeScript 配置文件并设置其位置 ([https://devexpress.github.io/testcafe/documentation/guides/concepts/typescript-and-coffeescript.html#customize-compiler-options](https://devexpress.github.io/testcafe/documentation/guides/concepts/typescript-and-coffeescript.html#customize-compiler-options))。可以使用相对路径或绝对路径：'
- en: '[PRE38]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In the case of relative paths, they will be resolved against the directory from
    which you run TestCafe.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在相对路径的情况下，它们将相对于你运行 TestCafe 的目录进行解析。
- en: '`disablePageCaching` is a boolean to prevent the page''s content from being
    cached by the browser:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`disablePageCaching` 是一个布尔值，用于防止浏览器缓存页面内容：'
- en: '[PRE39]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: When browsers open a cached page inside the role code, the `localStorage` and
    `sessionStorage` content will not be saved. To keep the storage items after navigation,
    set `disablePageCaching` to `true`.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当浏览器在角色代码中打开缓存页面时，`localStorage` 和 `sessionStorage` 的内容将不会被保存。为了在导航后保留存储项，将
    `disablePageCaching` 设置为 `true`。
- en: Note
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'Here is a good example of a `.testcaferc.json` file with all the main settings:
    [https://github.com/DevExpress/testcafe/blob/master/examples/.testcaferc.json](https://github.com/DevExpress/testcafe/blob/master/examples/.testcaferc.json).'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个包含所有主要设置的 `.testcaferc.json` 文件的好例子：[https://github.com/DevExpress/testcafe/blob/master/examples/.testcaferc.json](https://github.com/DevExpress/testcafe/blob/master/examples/.testcaferc.json)。
- en: Creating a basic configuration for the test project
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为测试项目创建基本配置
- en: 'Now, let''s assemble all that we have learned in this section and create a
    folder with the basic configuration for our test project by opening any shell
    (for example, we will use Terminal with Bash) and executing the following steps:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将本节所学的内容综合起来，通过打开任何外壳（例如，我们将使用带有 Bash 的终端）并执行以下步骤来为我们的测试项目创建一个具有基本配置的文件夹：
- en: 'As we have already downloaded and installed Node.js, let''s check its version:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们已经下载并安装了 Node.js，让我们检查其版本：
- en: '[PRE40]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Then, create a folder for your future test project:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为你的未来测试项目创建一个文件夹：
- en: '[PRE41]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, go to that folder and initiate a basic `package.json` file to store all
    the dependencies:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，进入那个文件夹，初始化一个基本的 `package.json` 文件以存储所有依赖项：
- en: '[PRE42]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'After that, install the TestCafe package and save it to your list as a development
    dependency:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，安装 TestCafe 包并将其保存为开发依赖项：
- en: '[PRE43]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'As a final step (for now), create a `.testcaferc.json` configuration file with
    a minimal set of options:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为最终步骤（目前），创建一个 `.testcaferc.json` 配置文件，包含一组最小选项：
- en: '[PRE44]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We have covered the options from this file in the *Exploring the configuration
    settings* section, so you can always refer back to it to understand this example.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在 *探索配置设置* 部分涵盖了此文件中的选项，因此你可以随时参考它来理解这个例子。
- en: You can also review and download this configuration file from GitHub at [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch3/test-project/.testcaferc.json](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch3/test-project/.testcaferc.json).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以从 GitHub 上审查和下载此配置文件：[https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch3/test-project/.testcaferc.json](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch3/test-project/.testcaferc.json)。
- en: As we installed Node.js and TestCafe and created a basic config file, let's
    continue setting up our test project by organizing our test code structure.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经安装了 Node.js 和 TestCafe 并创建了基本配置文件，让我们通过组织测试代码结构来继续设置我们的测试项目。
- en: Structuring the test code
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试代码的结构化
- en: 'To gain a better understanding of test code structure organization, let''s
    divide it into several parts: fixtures, tests, the starting web page, metadata,
    and skipping tests.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解测试代码结构组织，让我们将其分为几个部分：固定装置、测试、起始网页、元数据和跳过测试。
- en: Fixtures
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 固定装置
- en: 'TestCafe tests are usually grouped into test suites, called fixtures (which
    are the same as the `describe` blocks in the Jasmine and Mocha test frameworks).
    Any JavaScript, TypeScript, or CoffeeScript files with TestCafe tests should contain
    one or more fixtures. Test fixtures can be declared with the `fixture` function,
    which only accepts one argument—`fixtureName`—which is a string for the name of
    the fixture (set of tests):'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: TestCafe测试通常被分组到测试套件中，称为固定配置（与Jasmine和Mocha测试框架中的`describe`块相同）。任何包含TestCafe测试的JavaScript、TypeScript或CoffeeScript文件都应该包含一个或多个固定配置。固定配置可以使用`fixture`函数声明，它只接受一个参数——`fixtureName`，这是一个字符串，表示固定配置（测试集）的名称：
- en: '[PRE45]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Alternatively, you can write this without the brackets:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以这样写，不使用括号：
- en: '[PRE46]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: A fixture is basically a wrapper to indicate the beginning of a set of tests.
    Let's see how these tests should be structured.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 固定配置基本上是一个包装器，用于指示一组测试的开始。让我们看看这些测试应该如何结构化。
- en: Tests
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: 'Tests are usually written right after the `fixture` declaration. To create
    a test, call the `test` function, which accepts two arguments:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 测试通常在`fixture`声明之后编写。要创建一个测试，请调用`test`函数，它接受两个参数：
- en: '`testName`: A string for the name of the test.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`testName`：一个字符串，表示测试的名称。'
- en: '`function`: An asynchronous function that contains the test code and accepts
    one argument — `t`, which is an object for the test controller used to access
    all actions and assertions.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`function`：一个包含测试代码的异步函数，它接受一个参数——`t`，这是一个用于访问所有操作和断言的测试控制器对象。'
- en: 'A simple test with the block of code usually looks like this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的测试通常看起来像这样：
- en: '[PRE47]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Due to the fact that TestCafe tests are executed on the server side, you can
    use any additional packages or modules. Also, inside the test, you can do the
    following:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 由于TestCafe测试是在服务器端执行的，因此你可以使用任何额外的包或模块。此外，在测试内部，你可以执行以下操作：
- en: Use test actions to interact with the tested web page.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用测试操作与被测试的网页进行交互。
- en: Use selectors and client functions to get information regarding page element
    states or obtain other data from the client side.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用选择器和客户端函数来获取有关页面元素状态的信息或从客户端获取其他数据。
- en: Use assertions to verify whether the page elements have the expected parameters.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用断言来验证页面元素是否具有预期的参数。
- en: Now, let's see how to specify a starting page for all tests in a fixture.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在固定配置中为所有测试指定起始页面。
- en: The starting web page
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 起始网页
- en: 'You can set the initial web page that will be the starting point for all tests
    in a fixture with the `fixture.page` function. It only accepts one argument—`url`,
    which is a string for the URL of the web page where all tests in a fixture start:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`fixture.page`函数在一个固定配置中设置初始网页，它将成为所有测试的起点：它只接受一个参数——`url`，这是一个字符串，表示网页的URL，所有固定配置中的测试都是从该网页开始的：
- en: '[PRE48]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Next, let's see how to specify metadata for fixtures and tests.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何为固定配置和测试指定元数据。
- en: Metadata
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元数据
- en: 'In TestCafe, you can also provide additional information for tests, such as
    key-value metadata. This can be used to filter tests and display this data in
    reports. To define metadata, use the `fixture.meta` and `test.meta` methods. They
    accept two string arguments:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在TestCafe中，你还可以为测试提供额外的信息，例如键值元数据。这可以用于过滤测试并在报告中显示这些数据。要定义元数据，请使用`fixture.meta`和`test.meta`方法。它们接受两个字符串参数：
- en: '`name`: A string for the name of the metadata entry.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：一个字符串，表示元数据条目的名称。'
- en: '`value`: A string for the value of the metadata entry.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value`：一个字符串，表示元数据条目的值。'
- en: Alternatively, they can accept one argument—`metadata`, which is an object for
    key-value pairs of metadata.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，它们可以接受一个参数——`metadata`，这是一个包含元数据键值对的对象。
- en: 'Both styles of setting metadata can be combined, which will look like this:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种设置元数据的方式可以组合使用，看起来是这样的：
- en: '[PRE49]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Fixtures or tests can be launched by the specific metadata values that they
    contain. To filter tests by `metadata`, add the `filter.testMeta` and `filter.fixtureMeta`
    properties to the `.testcaferc.json` configuration file:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 固定配置或测试可以通过它们包含的特定元数据值来启动。要按`metadata`过滤测试，请将`filter.testMeta`和`filter.fixtureMeta`属性添加到`.testcaferc.json`配置文件中：
- en: '[PRE50]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This configuration will run only tests that have the `testType` property of
    `metadata` set to `fast` and `testedFeatureVersion` set to `1.1`, as well as tests
    whose fixture's metadata has the `env` property set to `production` and the `author`
    property set to `John`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置将仅运行具有`metadata`的`testType`属性设置为`fast`和`testedFeatureVersion`设置为`1.1`的测试，以及其固定配置的元数据具有`env`属性设置为`production`和`author`属性设置为`John`的测试。
- en: You can use custom reporters ([https://devexpress.github.io/testcafe/documentation/guides/extend-testcafe/reporter-plugin.html](https://devexpress.github.io/testcafe/documentation/guides/extend-testcafe/reporter-plugin.html))
    to display fixture's and test's metadata in reports.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用自定义报告器（[https://devexpress.github.io/testcafe/documentation/guides/extend-testcafe/reporter-plugin.html](https://devexpress.github.io/testcafe/documentation/guides/extend-testcafe/reporter-plugin.html)）来在报告中显示测试用例和测试的元数据。
- en: Skipping tests
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跳过测试
- en: 'In TestCafe, you can also specify a fixture or test to skip while all the other
    tests run. This is achieved with the `fixture.skip` and `test.skip` methods:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TestCafe 中，您还可以指定在所有其他测试运行时跳过的测试用例或测试。这是通过 `fixture.skip` 和 `test.skip` 方法实现的：
- en: '[PRE51]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: In this example, all tests from the `Contacts` `page` fixture will be excluded
    from running. The `Test More info form` test will not be executed either.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，`Contacts` 页面测试用例将不会被运行。`Test More info form` 测试也不会被执行。
- en: 'Another pair of useful methods is `fixture.only` and `test.only`. They are
    used to specify that only a particular fixture or test should be launched, and
    all others should be skipped. If several fixtures or tests are marked with `.only`,
    then all fixtures or tests marked with `.only` will be executed:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 另一对有用的方法是 `fixture.only` 和 `test.only`。它们用于指定仅启动特定的测试用例或测试用例，其他所有测试用例将被跳过。如果有多个测试用例被标记为
    `.only`，则所有标记为 `.only` 的测试用例都将被执行：
- en: '[PRE52]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In this example, only the tests from the `Contacts` `page` fixture and the `Test
    More info form` test will be executed.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，只有来自 `Contacts` 页面测试用例和 `Test More info form` 测试用例将被执行。
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to set up the testing environment for writing
    end-to-end tests using TestCafe. We installed Node.js and TestCafe, reviewed the
    configuration options, and created a basic `.testcaferc.json` file to store them.
    In addition to that, we found out about several techniques to structure TestCafe
    code, including fixtures, tests, the starting web page, metadata, and skipping
    tests.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 TestCafe 设置编写端到端测试的测试环境。我们安装了 Node.js 和 TestCafe，审查了配置选项，并创建了一个基本的
    `.testcaferc.json` 文件来存储它们。除此之外，我们还了解了几种结构化 TestCafe 代码的技术，包括测试用例、测试、起始网页、元数据和跳过测试。
- en: The lessons of this chapter are important as you will be going through the configuration
    phase for any new project that you'll start.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的教训非常重要，因为您将进入任何新开始项目的配置阶段。
- en: Now, we are well prepared and ready to proceed with utilizing this knowledge
    in writing TestCafe tests for our test project. We will learn how to create and
    debug a test, and will start building a real-life test suite right after that.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经做好了充分的准备，可以开始利用这些知识来编写我们的测试项目的 TestCafe 测试。我们将学习如何创建和调试测试，并在之后立即开始构建一个真实的测试套件。
