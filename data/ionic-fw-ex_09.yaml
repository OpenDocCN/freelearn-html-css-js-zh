- en: Chapter 9. Connecting to Firebase
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。连接到Firebase
- en: In this chapter, we are going to focus solely on learning how to use Firebase
    to integrate a backend with our Ionic application. Firebase is a real-time data
    store technology that uses JSON-style database structure to let you store your
    data in the cloud. We will also be using the `tabs-app` app that we created in
    [Chapter 8](part0035_split_000.html#11C3M2-798adc86542b445d8a1bb648e10b6714 "Chapter 8. Building
    a Simple Social App"), *Building a Simple Social App,* to learn to integrate Firebase
    into our application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于学习如何使用Firebase将后端集成到我们的Ionic应用程序中。Firebase是一种实时数据存储技术，它使用JSON风格的数据库结构，让您能够将数据存储在云端。我们还将使用在第8章中创建的`tabs-app`应用程序，即*Building
    a Simple Social App*，来学习如何将Firebase集成到我们的应用程序中。
- en: Extending our tabs-app Ionic app
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展我们的tabs-app Ionic应用程序
- en: In [Chapter 8](part0035_split_000.html#11C3M2-798adc86542b445d8a1bb648e10b6714
    "Chapter 8. Building a Simple Social App"), *Building a Simple Social App,* we
    created `tabs-app`. If you recall correctly, we added a new tab called `walls`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](part0035_split_000.html#11C3M2-798adc86542b445d8a1bb648e10b6714 "第8章。构建一个简单的社交应用程序")
    *Building a Simple Social App* 中，我们创建了`tabs-app`。如果您记得正确，我们添加了一个名为`walls`的新标签页。
- en: 'The basic idea we had for the `wall` tab we added was that it would be like
    a message board where a user could type a post and then tap the button labeled
    **Post** to see it on the message board, as shown in the following screenshot:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为新增的`wall`标签页所持有的基本想法是，它将像一块公告板，用户可以在其中输入帖子，然后点击标有**发布**的按钮，在公告板上查看帖子，如下面的截图所示：
- en: '![Extending our tabs-app Ionic app](img/00075.jpeg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![扩展我们的tabs-app Ionic应用程序](img/00075.jpeg)'
- en: The first thing we need to do is to implement our mechanism to allow users to
    post, as this does not currently work in our `tab-app` application.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是实现允许用户发布的功能，因为目前我们的`tab-app`应用程序中还没有这个功能。
- en: Implementing the post wall feature
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现帖子墙功能
- en: To recap what we want from our `wall` tab, we want to be able to enter message
    in the message box, as seen in the preceding screenshot, and have the message
    appear like the sample message post. To begin, we start by implementing the code
    for adding a post in our controller.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回顾我们对`wall`标签页的需求，我们希望能够在消息框中输入消息，就像前面截图所示，并且消息能够像示例消息帖子一样显示。首先，我们从在我们的控制器中实现添加帖子的代码开始。
- en: 'This code is provided in the following code block:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块提供了这段代码：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You will need to replicate the code provided in the preceding block within your
    `WallController` controller. This `WallController` controller can be found within
    the `controller.js` file of your `tabs-app` application. The `WallController`
    controller can be found in the path `www/js/controller.js`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的`WallController`控制器中复制前面代码块中提供的代码。这个`WallController`控制器位于您的`tabs-app`应用程序的`controller.js`文件中。`WallController`控制器可以在路径`www/js/controller.js`中找到。
- en: 'If you have done this correctly, your `WallController` controller will look
    like what we have in the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您操作正确，您的`WallController`控制器将看起来如下面的截图所示：
- en: '![Implementing the post wall feature](img/00076.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![实现帖子墙功能](img/00076.jpeg)'
- en: Let's understand what this code is doing. We are simply attaching a `post` object
    to the controller. We are also declaring a `posts` array where all our posts will
    be stored.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解这段代码的作用。我们只是将一个`post`对象附加到控制器上。我们还声明了一个`posts`数组，所有帖子都将存储在这个数组中。
- en: Lastly, we have a function called `addPost()` which will add a new post to the
    `posts` array every time it is fired.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一个名为`addPost()`的函数，每次它被触发时，都会将一个新的帖子添加到`posts`数组中。
- en: 'The next step is to wire this controller into the view of our `Wall` tab. The
    markup for this view is located in the `tab-wall.html` file. Now, this file looks
    like what we have in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将这个控制器连接到我们的`Wall`标签页的视图。这个视图的标记位于`tab-wall.html`文件中。现在，这个文件看起来如下面的截图所示：
- en: '![Implementing the post wall feature](img/00077.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![实现帖子墙功能](img/00077.jpeg)'
- en: 'You will need to completely replace the markup found within `<ion-content>`
    with the markup provided in the following code block:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要完全替换`<ion-content>`中找到的标记，使用以下代码块中提供的标记：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you have done this correctly, your `tab-wall.html` file will have a markup
    that looks like the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您操作正确，您的`tab-wall.html`文件将有一个如下截图所示的标记：
- en: '![Implementing the post wall feature](img/00078.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![实现帖子墙功能](img/00078.jpeg)'
- en: By doing this, we have completed the process of implementing and wiring our
    wall post feature on the `Wall` tab. The next step is to test it using the `ionic
    serve` technique. Go ahead and run your app using the `ionic serve` technique
    and you should see your app running in the browser.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们已经完成了在“墙”标签页上实现和布线我们的墙帖子功能的流程。下一步是使用`ionic serve`技术进行测试。使用`ionic serve`技术运行你的应用，你应该会在浏览器中看到你的应用正在运行。
- en: 'If you try to add a message in the text box found in the `Wall` tab and click
    the **Post** button, you will see a message appear, like what we have in the following
    screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试在“墙”标签页中的文本框中添加消息并点击**发布**按钮，你将看到一条消息出现，就像我们在以下屏幕截图中所看到的那样：
- en: '![Implementing the post wall feature](img/00079.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![实现帖子墙功能](img/00079.jpeg)'
- en: The backend challenge
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 后端挑战
- en: The one problem or challenge we have with our current application is that it
    does not persist. By this, we mean that once we refresh the browser, all our data
    is gone and we have to start again. How cool would it be if we could enter a post
    and when we revisited our app, we could carry on from where we left off just like
    every other message board in other applications? Well, we can achieve this thanks
    to a great technology called Firebase. The first thing we will do is try to understand
    Firebase and what exactly it is.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前应用程序遇到的一个问题或挑战是它不具备持久性。通过这种方式，我们的意思是，一旦我们刷新浏览器，所有我们的数据都会消失，我们必须重新开始。如果我们可以输入一个帖子，当我们再次访问我们的应用时，我们可以从我们离开的地方继续，就像在其他应用中的每个消息板一样，那会多么酷啊？嗯，我们可以通过一个叫做Firebase的伟大技术来实现这一点。我们首先要做的是尝试理解Firebase以及它究竟是什么。
- en: Firebase
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase
- en: Before we begin this chapter, it is very important that we understand the technology
    we are going to be using to integrate our backend. The technology in question
    is called Firebase. Firebase is a technology that lets us store real-time data.
    Unlike traditional backend databases where you need a server running, you do not
    need to have a hosted server with Firebase.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始这一章之前，非常重要的一点是我们必须理解我们将要用来集成后端的技术。这个技术被称为Firebase。Firebase是一种让我们能够存储实时数据的技术。与需要运行服务器的传统后端数据库不同，你不需要使用Firebase托管服务器。
- en: All you need to get going with Firebase is an active Google account and you
    are good to go. Let's set up a new Firebase account.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要一个活跃的Google账户就可以开始使用Firebase了。让我们设置一个新的Firebase账户。
- en: If you do not have a Google account, you can create one by visiting [http://www.gmail.com](http://www.gmail.com).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有Google账户，你可以通过访问[http://www.gmail.com](http://www.gmail.com)来创建一个。
- en: Setting up a new Firebase account
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置新的Firebase账户
- en: The first thing you need to do to set up your Firebase account is go to the
    Firebase website, which is [http://www.firebase.com](http://www.firebase.com).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 设置你的Firebase账户的第一件事是访问Firebase网站，它是[http://www.firebase.com](http://www.firebase.com)。
- en: 'You should see a screen that looks like what we have in the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到一个看起来像我们在以下屏幕截图中所展示的屏幕：
- en: '![Setting up a new Firebase account](img/00080.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![设置新的Firebase账户](img/00080.jpeg)'
- en: Once this is done, you should see a button labeled **Sign Up With Google** on
    the top right-hand corner.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成这些，你应该会在右上角看到一个标有**使用Google注册**的按钮。
- en: 'When you click this button, you should see a Gmail window asking you to select
    or log in to a Google account. After you select the Google account you want to
    use, you should be redirected to your brand new Firebase account. The window you
    will be redirected to should look like what we have in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击这个按钮时，你应该会看到一个Gmail窗口要求你选择或登录一个Google账户。在你选择了你想要使用的Google账户之后，你应该会被重定向到你的全新Firebase账户。你将被重定向到的窗口应该看起来像我们在以下屏幕截图中所展示的那样：
- en: '![Setting up a new Firebase account](img/00081.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![设置新的Firebase账户](img/00081.jpeg)'
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All the examples we have here are based on our sample account. You should not
    use the URLs from the preceding screenshot but instead use the ones you see in
    your own window. If you do not, your sample will not work.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里所有的示例都是基于我们的示例账户。你不应该使用前一个屏幕截图中的URL，而应该使用你自己在窗口中看到的URL。如果你不这样做，你的示例将不会工作。
- en: You will see that there is a Firebase app created for you called **MY FIRST
    APP**. When using Firebase, for each app we create we also create an app for it
    on our Firebase dashboard. This is because Firebase uses a distinct URL to provide
    you access to the data of each unique application you create. So, think of this
    **MY FIRST APP** Firebase app as a database.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您会看到为您创建了一个名为**我的第一个应用**的Firebase应用。当使用Firebase时，对于每个我们创建的应用，我们也会在Firebase仪表板上为它创建一个应用。这是因为Firebase使用不同的URL为您提供访问您创建的每个独特应用的数据的权限。所以，将这个**我的第一个应用**Firebase应用视为一个数据库。
- en: 'Now, let''s take a closer look at **MY FIRST APP**:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更仔细地看看**我的第一个应用**：
- en: '![Setting up a new Firebase account](img/00082.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![设置新的Firebase账户](img/00082.jpeg)'
- en: You should see something very similar to the preceding screenshot. You can access
    the URL for your Firebase database by clicking on the post fixed with the `.firebaseIO.com`
    URL. Remember that the URL you see on the screenshots will be different from the
    ones you see on your dashboard, and you are to use the ones on your dashboard.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到与前述截图非常相似的内容。您可以通过点击带有`.firebaseIO.com` URL的帖子来访问您的Firebase数据库的URL。请记住，截图中的URL将不同于您在仪表板中看到的URL，您应使用仪表板上的URL。
- en: You can see that the URL we have here for demonstration is [luminous-inferno-8905.firebaseIO.com](http://luminous-inferno-8905.firebaseIO.com).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，我们在这里用于演示的URL是[luminous-inferno-8905.firebaseIO.com](http://luminous-inferno-8905.firebaseIO.com)。
- en: 'Click the URL you have on your dashboard and that should take you to your Firebase
    database, which should look similar to the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 点击您仪表板上的URL，这将带您进入Firebase数据库，其外观应类似于以下截图：
- en: '![Setting up a new Firebase account](img/00083.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![设置新的Firebase账户](img/00083.jpeg)'
- en: Just to clarify once again, Firebase uses URLs to access databases. What you
    see in the preceding screenshot is the dashboard for your database. You can also
    see the same database URL in the browser's address bar. Firebase uses JSON-style
    data structure, so basically what we send to it is JSON, and what we store is
    JSON too.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 再次明确一下，Firebase使用URL来访问数据库。您在前述截图中所看到的是数据库的仪表板。您也可以在浏览器的地址栏中看到相同的数据库URL。Firebase使用JSON风格的数据库结构，因此我们发送给它的是JSON，我们存储的也是JSON。
- en: When we add data to our database, we will be able to see it in this dashboard.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向数据库添加数据时，我们将在仪表板中看到它。
- en: Integrate Firebase into tabs-app application
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Firebase集成到tabs-app应用中
- en: Now that we have our Firebase account and know how to get the URL of our Firebase
    database, the next step is to integrate it into our application.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了Firebase账户，并且知道了如何获取Firebase数据库的URL，下一步是将它集成到我们的应用中。
- en: Adding Firebase and Angular-Fire scripts
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加Firebase和Angular-Fire脚本
- en: The first thing we need to do is to add the scripts we will need. We will need
    two scripts. The first is the Firebase library. The second script is the Angular-Fire
    library. Angular-Fire is an Angular library that makes working with Firebase in
    an AngularJS application much simpler.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是添加所需的脚本。我们需要两个脚本。第一个是Firebase库。第二个脚本是Angular-Fire库。Angular-Fire是一个Angular库，它使得在AngularJS应用中使用Firebase变得更加简单。
- en: 'The simplest way is to use the hosted library references. To add this to our
    app, open your `index.html` file and add the following script references within
    `<head>` of your application:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是使用托管库引用。要将此添加到我们的应用中，打开您的`index.html`文件，并在应用的`<head>`部分添加以下脚本引用：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you have done this correctly, the `head` part of your `index.html` should
    look like the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您操作正确，`index.html`的`head`部分应类似于以下截图：
- en: '![Adding Firebase and Angular-Fire scripts](img/00084.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![添加Firebase和Angular-Fire脚本](img/00084.jpeg)'
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure your references are below the Ionic bundle as seen in the preceding
    screenshot. This is very important or else your app will not work properly.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的引用位于前述截图中所见的Ionic包下方。这一点非常重要，否则您的应用将无法正常工作。
- en: The next step is to reference your Angular-Fire module. This step will ensure
    that we can use Angular-Fire within our application. The name of this module is
    `firebase`. This will be added to the root module of your application, called
    `starter` in your `app.js` file.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是引用您的Angular-Fire模块。这一步将确保我们可以在应用中使用Angular-Fire。此模块的名称是`firebase`。它将被添加到您的应用根模块中，在`app.js`文件中称为`starter`。
- en: 'Currently, this module''s declaration looks something like what we have in
    the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，此模块的声明看起来类似于以下截图：
- en: '![Adding Firebase and Angular-Fire scripts](img/00085.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![添加Firebase和Angular-Fire脚本](img/00085.jpeg)'
- en: 'You will need to add the `firebase` module as a dependent module. Doing this
    will make the module declaration to look something like what we have in the following
    screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将`firebase`模块作为依赖模块添加。这样做会使模块声明看起来类似于以下截图所示：
- en: '![Adding Firebase and Angular-Fire scripts](img/00086.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![添加Firebase和Angular-Fire脚本](img/00086.jpeg)'
- en: You can see that the `firebase` module is now added to the module declaration
    as a dependency. By doing this, we have successfully integrated Firebase into
    the skin of our app. The next step is to actually implement it to save our data.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，`firebase`模块现在作为依赖项添加到了模块声明中。通过这样做，我们已经成功地将Firebase集成到我们应用程序的皮肤中。下一步是实际实现它以保存我们的数据。
- en: Implementing Firebase to our app
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在我们的应用程序中实现Firebase
- en: To implement Firebase in our app, we will need to do some work within our `WallController`
    controller. The first thing we need to code for is the ability to pull items from
    the database. The second thing we need to code for is the ability to add items
    to the database.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的应用程序中实现Firebase，我们将在`WallController`控制器中做一些工作。首先，我们需要编写代码以从数据库中提取项目。其次，我们需要编写代码以将项目添加到数据库中。
- en: Pulling from database
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从数据库中提取
- en: The first thing we need to do is to add the `$firebaseArray` service dependency
    into our `WallController` controller. This service is part of the Angular-Fire
    library and makes it easy for us to work with arrays in Firebase.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是将`$firebaseArray`服务依赖项添加到我们的`WallController`控制器中。这个服务是Angular-Fire库的一部分，使我们能够轻松地在Firebase中处理数组。
- en: 'Adding the service dependency correctly should make your `WallController` controller
    definition look like what we have in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正确添加服务依赖项应该会使你的`WallController`控制器定义看起来如下截图所示：
- en: '![Pulling from database](img/00087.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![从数据库中提取](img/00087.jpeg)'
- en: 'The next step is to actually write code to pull the data from the database.
    Replicate the code provided in the following code block in your `WallController`
    controller:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是实际编写从数据库中提取数据的代码。在`WallController`控制器中复制以下代码块提供的代码：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This piece of code creates a new Firebase reference at first. We passed in the
    URL of the Firebase database that we created earlier. Make sure you change the
    placeholder text (`YOUR-FIREBASE-APP`) to reflect the URL of your Firebase database.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码首先创建一个新的Firebase引用。我们传递了之前创建的Firebase数据库的URL。请确保将占位文本（`YOUR-FIREBASE-APP`）更改为反映您的Firebase数据库的URL。
- en: 'After this, we used the `$firebase` service that we added earlier to create
    a path called `postData`. The last step we need to do is to allow our app to load
    data from this `postData` path and use it. To do this, we need to edit the code
    of our `WallController` slightly. Currently, our `WallController` controller''s
    code looks like what we have in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们使用了之前添加的`$firebase`服务来创建一个名为`postData`的路径。我们需要做的最后一步是允许我们的应用程序从这个`postData`路径加载数据并使用它。为此，我们需要稍微编辑一下我们的`WallController`代码。目前，我们的`WallController`控制器的代码如下截图所示：
- en: '![Pulling from database](img/00088.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![从数据库中提取](img/00088.jpeg)'
- en: 'Pay close attention to the piece of code highlighted in the preceding screenshot.
    We need to edit this piece of code such that instead of equating to an empty array,
    it should equate to our `postData` variable. Doing this correctly should make
    us end up with a `WallController` controller that looks like the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请密切注意前一张截图中所高亮的代码片段。我们需要编辑这段代码，使其不再等于一个空数组，而是等于我们的`postData`变量。正确地完成这一步应该会使我们最终得到一个如下截图所示的`WallController`控制器：
- en: '![Pulling from database](img/00089.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![从数据库中提取](img/00089.jpeg)'
- en: By doing this, we have implemented the first part; our Firebase implementation
    and our app now loads data from our database. The next step is to implement the
    code to add our posts to our database.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们已经实现了第一部分；我们的Firebase实现和应用程序现在从我们的数据库加载数据。下一步是实现将我们的帖子添加到数据库中的代码。
- en: Adding to database
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加到数据库
- en: 'Adding to the database is actually pretty easy. All we need to do is slightly
    edit our `addPost()` function. Currently, our `addPost()` function looks like
    what we have in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 向数据库添加实际上非常简单。我们只需要稍微编辑一下我们的`addPost()`函数。目前，我们的`addPost()`函数如下截图所示：
- en: '![Adding to database](img/00090.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![添加到数据库](img/00090.jpeg)'
- en: 'To make our data persist in our database, we only need to replace the code
    highlighted in the preceding screenshot with the following code block:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要使我们的数据在数据库中持久化，我们只需要将前面截图中突出显示的代码替换为以下代码块：
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, your `addPost()` function should look like what we have in the following
    screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的`addPost()`函数应该看起来像下面截图中的那样：
- en: '![Adding to database](img/00091.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![添加到数据库](img/00091.jpeg)'
- en: 'All we did was just change the `unshift()` method to the `$add()` method. The
    `$add()` method is a method from Firebase that adds items to a Firebase database.
    At this point, we have completed the implementation of our backend. As easy as
    that was, we have a working database in just a few short steps and can now test
    this live. Your final `WallController` controller should look like the following
    code block:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的只是将`unshift()`方法更改为`$add()`方法。`$add()`方法是Firebase提供的一个方法，用于将项目添加到Firebase数据库中。到目前为止，我们已经完成了后端实现的全部工作。尽管这个过程很简单，但我们只需几个简单的步骤就建立了一个工作数据库，现在可以对其进行测试。你的最终`WallController`控制器应该看起来像以下代码块：
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To test your application, simply run your app using the `ionic serve` technique.
    When you do this, you should be able to enter messages in your application, and
    even after you refresh your browser, the data that you have already posted will
    still exist. Also, if you have a look at the Firebase dashboard for your database,
    you will see that the data you entered in the app is present there.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试你的应用程序，只需使用`ionic serve`技术运行你的应用程序。当你这样做时，你应该能够在你的应用程序中输入消息，即使你刷新浏览器，你之前发布的数据仍然存在。此外，如果你查看你的数据库的Firebase仪表板，你将看到你在应用程序中输入的数据已经存在那里。
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned some really cool ways of using Firebase to easily
    add a backend to our Ionic app. We only touched upon what Firebase lets us do,
    and you can look at the Firebase documentation available at [https://www.firebase.com/docs/](https://www.firebase.com/docs/)
    to see the full features of Firebase.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了一些非常酷的方法，使用Firebase轻松地为我们的Ionic应用添加后端。我们只是触及了Firebase能让我们做什么，你可以查看[https://www.firebase.com/docs/](https://www.firebase.com/docs/)提供的Firebase文档，以了解Firebase的完整功能。
- en: At this point, we have almost come to the end of our book. The next chapter
    will be the final one, and it is one you should definitely read. It contains some
    very useful information on how to harness skills learned in this book to get even
    better at using Ionic.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们几乎已经接近本书的结尾。下一章将是最后一章，你绝对应该阅读它。它包含了一些如何利用本书中学到的技能来进一步提升使用Ionic能力的非常有用信息。
