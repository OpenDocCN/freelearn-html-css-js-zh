- en: Chapter 8. Testing Your Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 测试你的应用程序
- en: In the previous chapter, we went through the process of analyzing and debugging
    our code. We learned to use the Code Inspector, Code Style checker, and the Code
    Quality Tools.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解了分析和调试代码的过程。我们学习了如何使用代码检查器、代码风格检查器和代码质量工具。
- en: 'In this chapter, we are going to see how WebStorm helps us in testing our code
    for ensuring that it is performs as expected. We will learn how to configure the
    test runners, run tests inside the IDE, and to use the following frameworks:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解 WebStorm 如何帮助我们测试代码以确保其按预期执行。我们将学习如何配置测试运行器、在 IDE 内运行测试以及使用以下框架：
- en: Karma
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Karma
- en: Jasmine
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jasmine
- en: Node Unit
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node 单元
- en: Mocha
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mocha
- en: Cucumber.js
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cucumber.js
- en: Wallaby.js
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wallaby.js
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Before we start, please note that the processes explained in this chapter might
    seem to be repetitive. However, this will not be the case in a production environment,
    since you usually use only one framework. In WebStorm, the differences, when working
    with multiple testing frameworks, are mostly at the syntax level.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请注意，本章中解释的过程可能看起来有些重复。然而，在生产环境中情况并非如此，因为你通常只使用一个框架。在 WebStorm 中，当使用多个测试框架时，差异主要在语法层面。
- en: Karma
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Karma
- en: Karma is a test runner created by the AngularJS team that helps us run out tests
    against several browsers. It starts the browsers that you select, loads the file
    you specify, and reports the results from your tests. Karma supports multiple-tests
    frameworks, so you can write your tests in Jasmine, Mocha, and so on.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Karma 是由 AngularJS 团队创建的测试运行器，它帮助我们针对多个浏览器运行测试。它启动你选择的浏览器，加载你指定的文件，并报告测试结果。Karma
    支持多个测试框架，因此你可以使用 Jasmine、Mocha 等编写测试。
- en: 'Before you start, you need to install the command interface globally so that
    you can run Karma directly without having to go to the `node_modules` folder.
    In the terminal, run the following command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，你需要全局安装命令行界面，这样你就可以直接运行 Karma，而无需进入 `node_modules` 文件夹。在终端中运行以下命令：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once you have the CLI installed globally, download the sample chapter from GitHub.
    So, create a new project using the Git repository at [https://github.com/srosca/webstorm_essentials_testing.git](https://github.com/srosca/webstorm_essentials_testing.git)
    as a source.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦全局安装了 CLI，你就可以从 GitHub 下载示例章节。因此，使用 Git 仓库 [https://github.com/srosca/webstorm_essentials_testing.git](https://github.com/srosca/webstorm_essentials_testing.git)
    作为源创建一个新的项目。
- en: 'After downloading the project, you need to install Karma as a development dependency:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下载项目后，你需要将 Karma 作为开发依赖项安装：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now you can initialize Karma in the project. To do that, run the following
    command in the terminal:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在项目中初始化 Karma。为此，请在终端中运行以下命令：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will be asked several questions for configuring the project. Answer them
    using the following options:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要回答几个配置项目的问题。使用以下选项回答它们：
- en: '**Which testing framework do you want to use?**'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**你想使用哪个测试框架？**'
- en: '**Jasmine**—to use Jasmine as the testing framework'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Jasmine**—使用 Jasmine 作为测试框架'
- en: '**Do you want to use Require.js?**'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**你想要使用 Require.js 吗？**'
- en: '**no**—since we don''t want to use `Require.js`'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**no**—因为我们不想使用 `Require.js`'
- en: '**Do you want to capture any browsers automatically?**'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**你想要自动捕获任何浏览器吗？**'
- en: '**Chrome**—as we want to use Chrome from the beginning enter an empty string
    to move to the succeeding questions'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Chrome**—因为我们想从一开始就使用 Chrome，请输入空字符串以跳到后续问题'
- en: '**What is the location of your source and test files?**'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**你的源文件和测试文件的位置在哪里？**'
- en: '**fib.js**—to test our file'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**fib.js**—测试我们的文件'
- en: '**test/jasmine/*.spec.js**—we are going to keep all our tests in the `test/jasmine`
    folder with `spec` as the name'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**test/jasmine/*.spec.js**—我们将把所有测试文件都保存在名为 `test/jasmine` 的文件夹中，文件名以 `spec`
    结尾'
- en: You have to again enter an empty string to move to the next question
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你需要再次输入一个空字符串来进入下一个问题
- en: '**Should any of the files included by the previous patterns be excluded?**'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**是否应该排除之前模式中包含的任何文件？**'
- en: Leave this option blank
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 留空此选项
- en: '**Do you want Karma to watch all the files and run the tests on change?**'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**你想要 Karma 监视所有文件并在更改时运行测试吗？**'
- en: '**yes**—as we want to watch for changes and run the test automatically'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**yes**—因为我们想监视更改并自动运行测试'
- en: 'Once you''re done with this, you will have created the `karma.conf` file that
    keeps the settings for your project. Moreover, based on the selections that we
    make, Karma installs the required dependencies: `karma-chrome-launcher`, `karma-jasmine`,
    and `jasmine-core`.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，你将创建一个`karma.conf`文件，该文件保存了项目的设置。此外，根据我们的选择，Karma 会安装所需的依赖项：`karma-chrome-launcher`、`karma-jasmine`和`jasmine-core`。
- en: You can now create a **Run/Debug Configuration** to run Karma inside WebStorm.
    Navigate to **Run** | **Edit Configurations**, and select **Karma** from the **Add
    New Configuration** menu accessible from the ![Karma](img/00115.jpeg) icon or
    by pressing *Ctrl* + *N*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以创建一个**运行/调试配置**来在 WebStorm 中运行 Karma。导航到**运行** | **编辑配置**，然后从![Karma](img/00115.jpeg)图标或按*Ctrl*
    + *N*键可访问的**添加新配置**菜单中选择**Karma**。
- en: '![Karma](img/00116.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Karma](img/00116.jpeg)'
- en: In the configuration screen (shown in the preceding screenshot), you need to
    select the path to the `karma.config.js` file, node, and Karma. WebStorm picks
    these up automatically.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置屏幕（如前面的截图所示），你需要选择`karma.config.js`文件的路径、node 和 Karma。WebStorm 会自动获取这些信息。
- en: Now we can start writing the tests for our code. One of the frameworks that
    we are going to look into first is Jasmine.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始编写代码的测试了。我们将首先研究的框架之一是 Jasmine。
- en: Jasmine
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jasmine
- en: Jasmine is a behavior-driven development framework for testing JavaScript code.
    It is designed to run on any JavaScript platform, does not depend on any other
    framework or the DOM, and has an easy-to-read obvious syntax.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Jasmine 是一个用于测试 JavaScript 代码的行为驱动开发框架。它设计在任意 JavaScript 平台上运行，不依赖于任何其他框架或 DOM，并且具有易于阅读的明显语法。
- en: Before we start, it will help to install the Jasmine JavaScript library for
    WebStorm. We can use autocomplete and syntax highlight. Go to the **Preferences**
    | **JavaScript** | **Libraries** screen, and select **Download**.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，安装 WebStorm 的 Jasmine JavaScript 库会有所帮助。我们可以使用自动完成和语法高亮。转到**首选项** |
    **JavaScript** | **库**屏幕，并选择**下载**。
- en: '![Jasmine](img/00117.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![Jasmine](img/00117.jpeg)'
- en: In the new screen, select **TypeScript community stubs** and search for **jasmine**,
    and then select **Download and Install**.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在新屏幕中，选择**TypeScript 社区占位符**并搜索**jasmine**，然后选择**下载并安装**。
- en: '![Jasmine](img/00118.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![Jasmine](img/00118.jpeg)'
- en: Now that you have the library set up, you can start. First you need to create
    the `test` folder, a `jasmine` folder inside the `test` folder, and a `fib.spec.js`
    file in the `jasmine` folder. As a convention, the tests use the tested file name
    followed by `.spec.js`. In practice, the test files are placed directly inside
    the `test` folder, but we have created the `jasmine` folder so that it is easier
    to use multiple frameworks.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经设置了库，可以开始了。首先，你需要创建一个`test`文件夹，在`test`文件夹内创建一个`jasmine`文件夹，并在`jasmine`文件夹中创建一个`fib.spec.js`文件。按照惯例，测试使用被测试文件名后跟`.spec.js`。在实践中，测试文件直接放在`test`文件夹中，但我们创建了`jasmine`文件夹，以便更容易使用多个框架。
- en: 'After creating the file, you need to fill it up with the following code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文件后，你需要用以下代码填充它：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This simple code will do some simple tests to check that everything is okay.
    You can now start Karma from the **Run** menu, the toolbar, or by using the shortcut,
    *Shift* + *W*. This will start Karma and display the results in the run section.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这段简单的代码将执行一些简单的测试来检查一切是否正常。你现在可以从**运行**菜单、工具栏或使用快捷键*Shift* + *W*启动 Karma。这将启动
    Karma 并在运行部分显示结果。
- en: '![Jasmine](img/00119.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![Jasmine](img/00119.jpeg)'
- en: These tests are just a simple example to make sure that everything is set up
    correctly. If you are able to see the same result like the preceding screenshot,
    we can now move to the next step, testing our Fibonacci function. While writing
    the test, it is a good practice to run the tests in continuous mode. We can do
    that by toggling auto run from the run section ![Jasmine](img/00120.jpeg). This
    is the equivalent of the watch mode, and it will run the tests automatically whenever
    we change the files.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些测试只是一个简单的例子，以确保一切设置正确。如果你能看到与前面的截图相同的结果，我们现在可以进入下一步，测试我们的 Fibonacci 函数。在编写测试时，持续模式运行测试是一个好习惯。我们可以通过从运行部分切换自动运行![Jasmine](img/00120.jpeg)来实现。这相当于监视模式，每次我们更改文件时都会自动运行测试。
- en: 'You will first have to delete the demo test that we did, and then get the `fib`
    function from the global object. Finally, you will test the result for some predefined
    values. You will also check if the recursion works okay by verifying that the
    current result is equal to the sum of the previous two results. The final code
    should look like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先需要删除我们之前做的演示测试，然后从全局对象中获取`fib`函数。最后，你将测试一些预定义的值的结果。你还需要通过验证当前结果是否等于前两个结果的和来检查递归是否正常工作。最终的代码应该看起来像这样：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you have toggled the auto run mode, then your run section should display
    the result as you complete them. If everything goes well, the entire tests should
    pass.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经切换到自动运行模式，那么你的运行部分应该在你完成它们时显示结果。如果一切顺利，所有测试应该通过。
- en: 'In this example, you have created a test to check that your function calculates
    the value correctly with the help of Jasmine and Karma. In the next section, we
    are going to use another testing framework: Nodeunit.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你已经创建了一个测试来检查你的函数在Jasmine和Karma的帮助下正确计算值。在下一节中，我们将使用另一个测试框架：Nodeunit。
- en: Nodeunit
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nodeunit
- en: 'Nodeunit is a framework for testing the code for Node.js. Its main focus is
    to create an easy way to test the code written for node. Some of its main features
    are as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Nodeunit是一个用于测试Node.js代码的框架。它的主要重点是创建一种简单的方式来测试为node编写的代码。它的一些主要功能如下：
- en: Simple to use
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单易用
- en: Ability to export tests from a module
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够从模块导出测试
- en: Works with Node.js and in the browser
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持Node.js和浏览器
- en: Allows the use of mocks and stubs
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许使用模拟和存根
- en: 'Before writing the tests, you need to install Nodeunit as a development dependency.
    Run the following command in the terminal:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写测试之前，你需要将Nodeunit作为开发依赖项安装。在终端中运行以下命令：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once the package is installed, create a `fib.spec.js` file inside the new `nodeunit`
    folder in the test . After the file is created, add in the following code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了包，就在测试目录中的新`nodeunit`文件夹内创建一个`fib.spec.js`文件。文件创建后，添加以下代码：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The tests are similar to the ones in the Jasmine section, but are written with
    the Nodeunit syntax. To run them, you need to create another run configuration
    but by selecting Nodeunit as a starting point this time. Open the configuration
    screen from the **Run** | **Edit Configurations** menu, and fill in the necessary
    settings. Use the installed package as the **Nodeunit** module, **All files in
    directory** as a **Run**, and `test/nodeunit` as the **Directory**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 测试与Jasmine部分中的测试类似，但使用Nodeunit语法编写。要运行它们，你需要创建另一个运行配置，但这次选择Nodeunit作为起点。从**运行**|**编辑配置**菜单打开配置屏幕，并填写必要的设置。使用已安装的包作为**Nodeunit**模块，**目录中的所有文件**作为**运行**，以及`test/nodeunit`作为**目录**。
- en: '![Nodeunit](img/00121.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![Nodeunit](img/00121.jpeg)'
- en: 'Once you have created the configuration, you can run the tests in the same
    way as the previous section, from either the toolbar or the **Run** menu. This
    will display the run section with the test results, as seen in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了配置，你就可以像上一节那样运行测试，无论是从工具栏还是**运行**菜单。这将显示运行部分和测试结果，如下面的截图所示：
- en: '![Nodeunit](img/00122.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![Nodeunit](img/00122.jpeg)'
- en: 'As you can see, the workflow for creating and running tests is very similar
    between frameworks, the only difference being in the syntax that we write. Next,
    we are going to see another framework: Mocha.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在创建和运行测试的工作流程在框架之间非常相似，唯一的区别在于我们编写的语法。接下来，我们将看到另一个框架：Mocha。
- en: Mocha
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mocha
- en: Mocha is a framework for testing code for both Node.js and the browser. It is
    a more complex one with more features. It allows the user to write the tests using
    several syntaxes like BDD, TDD, exports, and so on. The tests in Mocha are run
    serially, which allows for a more flexible and accurate reporting, and the exceptions
    are correctly mapped to the test case.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Mocha是一个用于测试Node.js和浏览器代码的框架。它是一个更复杂的框架，具有更多功能。它允许用户使用BDD、TDD、exports等多种语法编写测试。Mocha中的测试是顺序运行的，这允许更灵活和准确的报告，并且异常被正确映射到测试用例。
- en: 'Again, before we write the tests, we need to install Mocha as a development
    dependency by running the following command in the terminal:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，在编写测试之前，我们需要通过在终端中运行以下命令将Mocha作为开发依赖项安装：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, create a `fib.spec.js` file in a new `mocha` folder in `test`. Once the
    file is created, you need to fill the following tests:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`test`目录中的新`mocha`文件夹内创建一个`fib.spec.js`文件。文件创建后，你需要填写以下测试：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see, the differences are again only at the syntax level. The logic
    of the tests remains the same. Now that you have the test created, create a run
    configuration, selecting **Mocha** as the template this time.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，差异仅在语法层面。测试的逻辑保持不变。现在你已经创建了测试，创建一个运行配置，这次选择 **Mocha** 作为模板。
- en: '![Mocha](img/00123.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![Mocha](img/00123.jpeg)'
- en: Select the **Mocha** package, select **tdd** as a user interface, the test directory
    and then save the configuration, as seen in the preceding screenshot. This allows
    us to run the Mocha test and see the results in the run section.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 **Mocha** 包，选择用户界面为 **tdd**，测试目录，然后保存配置，如前述截图所示。这允许我们在运行部分运行 Mocha 测试并查看结果。
- en: '![Mocha](img/00124.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![Mocha](img/00124.jpeg)'
- en: Next, we are going to focus on a framework that tries to use a more human-readable
    way to write the test.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将关注一个尝试使用更易于人类阅读的方式来编写测试的框架。
- en: Cucumber.js
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cucumber.js
- en: Cucumber.js is a BDD framework that runs in Node.js and the browser. It uses
    a simple-to-understand syntax—the Gherkin language—that is described as a business
    readable, domain-specific language.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Cucumber.js 是一个在 Node.js 和浏览器中运行的 BDD 框架。它使用一种易于理解的语法——Gherkin 语言，该语言被描述为一种业务可读的、特定领域的语言。
- en: 'The test that you will write in Cucumber comprises two types of files:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在 Cucumber 中编写的测试包括两种类型的文件：
- en: Feature files written in Gherkin
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Gherkin 编写的功能文件
- en: Support files that are written in JavaScript or CoffeeScript
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JavaScript 或 CoffeeScript 编写的支持文件
- en: 'One of the first things to do before writing the test is to install Cucumber.js
    as a development dependency by running the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写测试之前，首先要做的事情之一是运行以下命令，将 Cucumber.js 作为开发依赖项安装：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once the package is installed, you need to create the folder structure; so,
    create a `cucumber` folder inside the `test` one. Inside the `cucumber` folder,
    create the features file, `fib.feature`, and fill it with the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了包，你需要创建文件夹结构；因此，在 `test` 文件夹内创建一个 `cucumber` 文件夹。在 `cucumber` 文件夹内，创建功能文件
    `fib.feature`，并填充以下代码：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As you can see, the Gherkin syntax focuses on the user story and not on the
    technical implementation. This is handled in the support files that we are going
    to create. These files will be placed in the `step_definitions` folder that you
    need to create inside the `cucumber` folder. In this folder, create the `fib.steps.js`
    file, and fill it with the following code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，Gherkin 语法侧重于用户故事，而不是技术实现。这将在我们即将创建的支持文件中处理。这些文件将放置在 `cucumber` 文件夹内的
    `step_definitions` 文件夹中。在这个文件夹中，创建 `fib.steps.js` 文件，并填充以下代码：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, in this file, we are translating the steps from the features
    files into technical implementation.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，在这个文件中，我们将功能文件中的步骤转换为技术实现。
- en: Now that you have all the files created, you can create a run configuration
    in the same way as in the previous section, but selecting `Cucumber.js` as the
    template this time.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了所有文件，你可以创建一个运行配置，就像上一节中那样，但这次选择 `Cucumber.js` 作为模板。
- en: You need to fill the **Feature file or directory** with the `fib.feature` file
    that we have created, and specify the executable path to the `Cucumber.js` file
    from the `node_modules/.bin/ folder`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将 **功能文件或目录** 填充为我们创建的 `fib.feature` 文件，并指定从 `node_modules/.bin/` 文件夹到 `Cucumber.js`
    文件的可执行路径。
- en: '![Cucumber.js](img/00125.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![Cucumber.js](img/00125.jpeg)'
- en: 'Having performed these steps, you will have created a new run configuration
    that can be started from the toolbar or the **Run** menu, as seen in the following
    screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些步骤后，你将创建一个新的运行配置，可以从工具栏或 **运行** 菜单启动，如以下截图所示：
- en: '![Cucumber.js](img/00126.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![Cucumber.js](img/00126.jpeg)'
- en: In the run section, you can see the results of the test run grouped by features
    and scenarios. As you can see, the cucumber framework focuses more on creating
    the test in a syntax that is easy to read and translate into business requirements.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行部分，你可以看到按功能和场景分组的测试运行结果。正如你所见，Cucumber 框架更注重以易于阅读和转换为业务需求的语法创建测试。
- en: 'Next, we are going to focus on an intelligent test runner that runs and displays
    the results in a clever way: directly in your code.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将关注一个智能测试运行器，它以巧妙的方式运行并显示结果：直接在你的代码中。
- en: Wallaby.js
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wallaby.js
- en: Wallaby.js is a test runner that runs your test in an innovative way. The tests
    are run in a continuous mode and Wallaby.js reports the code coverage and results
    directly in your code editor as you change the code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Wallaby.js 是一个以创新方式运行测试的测试运行器。测试以连续模式运行，并且当你在代码中更改代码时，Wallaby.js 会直接在你的代码编辑器中报告代码覆盖率和结果。
- en: Before using Wallaby.js, you need to download the plugin from the product page
    at [http://wallabyjs.com/](http://wallabyjs.com/).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Wallaby.js 之前，你需要从 [http://wallabyjs.com/](http://wallabyjs.com/) 的产品页面下载插件。
- en: 'After downloading the plugin, install it from the **Preferences** | **Plugins**
    dialog, and select **Install plugin from disk…**, as shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 下载插件后，从 **首选项** | **插件** 对话框安装它，并选择 **从磁盘安装插件…**，如图所示：
- en: '![Wallaby.js](img/00127.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![Wallaby.js](img/00127.jpeg)'
- en: Follow the steps for installing the downloaded plugin, and restart WebStorm.
    Since Wallaby.js is a paid plugin, after restarting, you will be prompted for
    the license or for using the trial mode.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 按照安装下载的插件的步骤操作，并重新启动 WebStorm。由于 Wallaby.js 是一个付费插件，重启后，你将被提示输入许可证或使用试用模式。
- en: 'Once you have it installed, you need to create a simple configuration file
    that will specify the files that you are using. Create a `wallaby.js` file in
    the project root, and fill it with the following code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装完成，你需要创建一个简单的配置文件来指定你正在使用的文件。在项目根目录下创建一个`wallaby.js`文件，并填写以下代码：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You are going to use the Jasmine tests that we have already defined in the
    previous section. Now create a run configuration that will run **wallaby**. Using
    the known steps, create a configuration based on the **Wallaby.js** template:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用我们在上一节中已经定义的 Jasmine 测试。现在创建一个运行配置来运行 **wallaby**。使用已知的步骤，基于 **Wallaby.js**
    模板创建一个配置：
- en: '![Wallaby.js](img/00128.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![Wallaby.js](img/00128.jpeg)'
- en: You need to specify the `wallaby.js` configuration file that you created in
    the previous step.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要指定你在上一步中创建的 `wallaby.js` 配置文件。
- en: When you run the project from the toolbar or from the **Run** menu, you will
    see some details in the run section, but this time the results and code coverage
    will be displayed as colored squares directly in your test files and source code.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从工具栏或从**运行**菜单运行项目时，你将在运行部分看到一些详细信息，但这次结果和代码覆盖率将以彩色方块的形式直接显示在你的测试文件和源代码中。
- en: '![Wallaby.js](img/00129.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![Wallaby.js](img/00129.jpeg)'
- en: Moreover, if you change one of your tests to fail, the failure will be displayed
    in line with the code so that you can easily see what the problem is.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你将其中一个测试更改为失败，失败将显示在代码行中，这样你可以轻松地看到问题是什么。
- en: '![Wallaby.js](img/00130.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![Wallaby.js](img/00130.jpeg)'
- en: As you can see, one of the big advantages that come with Wallaby.js is that
    you can see your results quickly, directly inside the code. This way, you can
    make changes quickly, without the need to jump between tools.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Wallaby.js 带来的一个主要优势是你可以快速看到结果，直接在代码中。这样，你可以快速做出更改，而无需在工具之间跳转。
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we focused on testing our code. We worked with some of the
    popular test runners and testing frameworks so that we can easily see the problems
    in our code.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于测试我们的代码。我们使用了一些流行的测试运行器和测试框架，这样我们就可以轻松地看到代码中的问题。
- en: 'In the next and final chapter, we are going to see some of WebStorm''s features
    that will boost our productivity: Live Edit, TODO facility, Emmet, and others.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章和最后一章中，我们将看到一些将提高我们生产力的 WebStorm 功能：实时编辑、TODO 功能、Emmet 等。
