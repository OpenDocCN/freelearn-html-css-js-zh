- en: Going Live
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上线
- en: In the previous chapter, we learned how to write tests for the Node.js and Vue.js
    components for our application. We learned what technologies we can use for testing
    MEVN applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何为我们的应用程序的Node.js和Vue.js组件编写测试。我们了解了我们可以使用哪些技术来测试MEVN应用程序。
- en: In this chapter, we will learn about what **Continuous Integration** (**CI**)
    is, how it makes our lives easier, and how we can deploy our application in Heroku.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习什么是**持续集成**（**CI**），它如何使我们的生活更轻松，以及我们如何在Heroku中部署我们的应用程序。
- en: Continuous integration
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成
- en: CI is a practice in the software development process where each member of the
    team is makes continuous small changes in the code and integrates them back into
    the original codebase. After each change, the developer pushes it to GitHub and
    the tests run automatically in that change. This helps to check whether there
    are any bugs or issues in the changed code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CI是软件开发过程中的一种实践，团队中的每个成员都在代码中进行持续的小改动，并将其集成回原始代码库中。每次更改后，开发人员都会将其推送到GitHub，并在该更改中自动运行测试。这有助于检查更改的代码中是否存在任何错误或问题。
- en: Consider a scenario where multiple developers are working on the same application.
    Each developer is working on a different feature on separate branches. They all
    build the features and write the test code for the features they build. Everything
    is going well. Then when the features are completed, they try to integrate all
    the features, and all of a sudden everything breaks. The tests also fail and many
    bugs start to creep out.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这样一个场景，多个开发人员正在同一个应用程序上工作。每个开发人员都在不同的分支上独立工作。他们都构建功能并为他们构建的功能编写测试代码。一切都进行得很顺利。然后当功能完成时，他们尝试集成所有功能，突然一切都崩溃了。测试也失败了，许多错误开始出现。
- en: If the application is small, it wouldn't be a very big deal because the bugs
    could be fixed easily. But if it's a large project, then it would be very hard
    just to figure out what went wrong, let alone fix it all. That is where CI originated.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序很小，那就不是很大的问题，因为错误可以很容易地修复。但如果是一个大型项目，那么仅仅弄清楚出了什么问题就已经很困难了，更不用说修复它了。这就是CI的由来。
- en: CI came into practice to mitigate such risks while integrating software. The
    rule for CI is to integrate early and often, which helps to identify the bugs
    and problems early in the process of adding new functionalities to the existing
    codebase. So instead of waiting for the completion of every component, CI encourages
    us to build the codebase and run the test suites on every single change that is
    committed to the codebase.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: CI的实践是为了减轻集成软件时的风险。CI的规则是早期和频繁地集成，这有助于在向现有代码库添加新功能的过程中及早识别错误和问题。因此，CI鼓励我们在每次提交到代码库的更改上构建代码库并运行测试套件，而不是等待每个组件的完成。
- en: Workflow for CI
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI的工作流程
- en: 'Here is a diagram that explains how CI works:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个解释CI如何工作的图表：
- en: '![](img/8af5c4d7-a178-4509-9323-836971059b9f.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8af5c4d7-a178-4509-9323-836971059b9f.jpg)'
- en: In a real-world scenario, multiple developers work on the same application.
    They work separately on their own machines. When they make changes to the codebase,
    they push it to the repository in the version control system that they are using.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界的场景中，多个开发人员在同一个应用程序上工作。他们在各自的机器上分别工作。当他们对代码库进行更改时，他们将其推送到他们正在使用的版本控制系统中的存储库中。
- en: Now, this change triggers the CI process that we have integrated into our application
    to run the test suites automatically and do the quality checks for the code that
    we have changed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个更改触发了我们集成到应用程序中的CI流程，自动运行测试套件并对我们更改的代码进行质量检查。
- en: If the test suite passes, then it goes to the further process for testing the
    full application and is handed over to the QAs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试套件通过，则进入进一步测试整个应用程序的流程，并交给质量保证人员。
- en: But, if the tests fail, then the developers or the whole team working on that
    application are notified. Then the developer working on that change makes the
    necessary changes to fix the bug, makes a commit, and pushes the fixed code changes
    to the repository. Again, the same process is repeated until the tests pass. Hence,
    if there are any bugs, they are identified early on and fixed early on.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果测试失败，那么开发人员或整个团队都会收到通知。然后负责该更改的开发人员进行必要的更改以修复错误，进行提交，并将修复后的代码更改推送到存储库。然后，重复相同的过程，直到测试通过。因此，如果有任何错误，它们会在早期被识别并及早修复。
- en: Benefits of CI
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI的好处
- en: 'Now that we are aware of what CI is and why we should use it, let''s look into
    some of the benefits it gives:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了CI是什么以及为什么我们应该使用它，让我们来看看它提供的一些好处：
- en: '**Build and test applications automatically**: While it is expected that a
    developer builds the application and runs the tests before pushing the changed
    code into the repository, sometimes the developer might just forget. In such cases,
    integrating a Continuous Integration process helps make the process automatic.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动构建和测试应用程序：虽然预期开发人员在将更改的代码推送到存储库之前构建应用程序并运行测试，但有时开发人员可能会忘记。在这种情况下，集成持续集成流程有助于使流程自动化。
- en: '**Gives the confidence to deploy**: Since CI checks the test suites and we
    can configure it to check the quality of the code in our codebase, we don''t need
    to worry about forgetting to run the tests before pushing the code to GitHub.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给予部署的信心：由于CI检查测试套件，并且我们可以配置它来检查我们代码库中代码的质量，我们不需要担心在将代码推送到GitHub之前忘记运行测试。
- en: '**Easy configuration**: CI is very easy to configure. We only need to create
    a single file with all the configurations.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单配置：CI非常容易配置。我们只需要创建一个包含所有配置的单个文件。
- en: '**Error reporting**: This is one of the powerful features of CI. When something
    breaks while building or running the tests, the team gets a notification. It can
    also provide information about who made what changes, which is awesome.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误报告：这是CI的强大功能之一。当构建或运行测试时出现问题时，团队会收到通知。它还可以提供关于谁做了什么更改的信息，这很棒。
- en: Introduction to Travis CI
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI简介
- en: Now that we know about CI, we need to start using it in our application as well.
    There are several technologies that can be used to follow the CI process for any
    application. There are a lot of tools and each has their own benefits of use;
    the one that we are going to choose for our application is **Travis CI**.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了CI，我们也需要在我们的应用程序中开始使用它。有几种技术可以用于为任何应用程序遵循CI流程。有很多工具，每种工具都有其自己的使用优势；我们将为我们的应用程序选择**Travis
    CI**。
- en: 'Travis CI is a technology used to build a CI server. Travis CI is used heavily
    with GitHub. There are a few other tools as well. Some of them are:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI是用于构建CI服务器的技术。Travis CI与GitHub一起广泛使用。还有一些其他工具。其中一些是：
- en: Circle CI
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Circle CI
- en: Jenkins
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins
- en: Semaphore CI
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号量CI
- en: Drone
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无人机
- en: 'If you want to learn more about each of the options, here is a good read for
    that:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解每个选项的更多信息，可以阅读以下内容：
- en: '[https://blog.github.com/2017-11-07-github-welcomes-all-ci-tools/.](https://blog.github.com/2017-11-07-github-welcomes-all-ci-tools/)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://blog.github.com/2017-11-07-github-welcomes-all-ci-tools/.](https://blog.github.com/2017-11-07-github-welcomes-all-ci-tools/)'
- en: Travis CI is used to build for every push that is made to GitHub and it is very
    easy to set up.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI用于为每次对GitHub进行的推送构建，并且非常容易设置。
- en: Setting up Travis in the app
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在应用程序中设置Travis
- en: Let's move on to the setup part. The first thing to do here is to check out
    the official website for Travis CI at [https://travis-ci.org/](https://travis-ci.org/).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续进行设置。这里要做的第一件事是查看Travis CI的官方网站[https://travis-ci.org/](https://travis-ci.org/)。
- en: Activating the repository
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 激活存储库
- en: 'We need to sign up first, which can be done easily using Sign in with GitHub.
    When you are done, you should see the list of your existing repositories. Select
    the application that you want to set up the Travis CI with and you will be able
    to see the following page:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要注册，可以使用GitHub登录轻松完成。完成后，您应该看到您现有的存储库列表。选择要设置Travis CI的应用程序，您将能够看到以下页面：
- en: '![](img/b30e6d08-74fb-4d0f-a31a-a2383b362d25.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b30e6d08-74fb-4d0f-a31a-a2383b362d25.png)'
- en: Specifying the Node.js version
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定Node.js版本
- en: Now, activate the repository in which you want to add Travis CI. We can see
    the list of our repositories in our profile. Select the application and click
    on the check mark to activate Travis CI in the repository. Now the next part is
    to add the configuration details. The first thing is to specify the `node` version
    that we will be using for the application.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，激活您要在其中添加Travis CI的存储库。我们可以在我们的个人资料中看到我们的存储库列表。选择应用程序，然后单击复选标记以在存储库中激活Travis
    CI。现在下一步是添加配置详细信息。首先要做的是指定我们将在应用程序中使用的`node`版本。
- en: 'Create `.travis.yml` file in the application in the root:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在根目录的应用程序中创建`.travis.yml`文件：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, this code block tells that this is a Node.js project and that the version
    of Node.js for this project is `10.0.0`. You have to specify the Node.js that
    is installed in your application. You can check the version with the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个代码块告诉这是一个Node.js项目，并且该项目的Node.js版本是`10.0.0`。您必须指定安装在应用程序中的Node.js。您可以使用以下命令检查版本：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can specify the same version in the .`travis.yml` file as well.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在`.travis.yml`文件中指定相同的版本。
- en: If the specified version is not a standard or available version of Node.js,
    then an error is raised.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定的版本不是标准或可用的Node.js版本，则会引发错误。
- en: We can also specify the version of Node.js that we want to use to build the
    project in a file called `.nvmrc`. The `travis.yml` file reads the content of
    this file if the version is not specified in the `.travis.yml` file itself.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在名为`.nvmrc`的文件中指定要用于构建项目的Node.js版本。如果在`.travis.yml`文件中未指定版本，则`travis.yml`文件将读取此文件的内容。
- en: Building the script
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建脚本
- en: 'Now the next part is to tell Travis to run the test suites. This part is specified
    in the `script` key in the `.travis.yml` file. The default build script for a
    Node.js project is `npm test`. But let''s first start with adding a single command
    to run in a single file so that it''s quick. Update the content of the .`travis.yml`
    file with the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在下一步是告诉Travis运行测试套件。这部分在`.travis.yml`文件的`script`键中指定。Node.js项目的默认构建脚本是`npm
    test`。但首先让我们添加一个单个命令在单个文件中运行，以便快速。更新`.travis.yml`文件的内容如下：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This tells the `script` to run the unit tests when any change is made to the
    repository.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉`script`在对存储库进行任何更改时运行单元测试。
- en: Managing the dependencies
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理依赖
- en: 'The next part is to install the dependencies. By default, no dependencies are
    added by Travis CI. The following command tells Travis CI to download the dependencies
    before building the `script`. It uses `npm` to install the dependencies, so let''s
    add a `script` to install such dependencies:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是安装依赖项。默认情况下，Travis CI不会添加任何依赖项。以下命令告诉Travis CI在构建`script`之前下载依赖项。它使用`npm`来安装依赖项，因此让我们添加一个`script`来安装这些依赖项：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That's it. We have successfully configured Travis CI for our application.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。我们已成功为我们的应用程序配置了Travis CI。
- en: 'Now, let''s commit and push this file to GitHub. When you do, check the branches
    on `travis.org` to view all the builds:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们提交并将此文件推送到GitHub。这样做时，请检查`travis.org`上的分支以查看所有构建：
- en: '![](img/95cbafc8-b06a-4641-ad29-a5b134ca4ee3.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95cbafc8-b06a-4641-ad29-a5b134ca4ee3.png)'
- en: Here, the master is the branch where we added the Travis CI build and the build
    is passing. You can view the details for for `master` branch by clicking on the
    build.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`master`是我们添加了Travis CI构建并且构建通过的分支。您可以通过点击构建来查看`master`分支的详细信息。
- en: While this is a good approach to view the builds, the best approach is to create
    a pull request for each branch and see the build pass or fail in that pull request
    itself. So, let's create a new pull request to see how we can make the best use
    of Travis CI to make our lives easier.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是查看构建的一个好方法，但最好的方法是为每个分支创建一个拉取请求，并在该拉取请求本身中查看构建是否通过或失败。因此，让我们创建一个新的拉取请求，以查看如何最好地利用Travis
    CI来使我们的生活更轻松。
- en: 'Let''s create a branch called `setup_travis` (you can name your branch anything,
    but make sure it indicates a particular change so that it''s easier to identify
    what changes that branch can expect) with the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`setup_travis`的分支（您可以为分支命名任何名称，但请确保它指示特定更改，以便更容易识别该分支可以期望的更改）使用以下命令：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let's make a simple change to the application so that our pull request contains
    some differences.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对应用程序进行简单更改，以便我们的拉取请求包含一些差异。
- en: 'Update the `README.md` file with the following content:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下内容更新`README.md`文件：
- en: '[PRE5] bash'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE5] bash'
- en: install dependencies
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: npm install
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: npm install
- en: serve with hot reload at localhost:8080
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在localhost:8080上使用热重新加载进行服务
- en: npm run dev
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: npm run dev
- en: build for production with minification
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建以缩小生产
- en: npm run build
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: npm run build
- en: build for production and view the bundle analyzer report
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为生产构建并查看捆绑分析器报告
- en: npm run build --report
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: npm run build --report
- en: run unit tests
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行单元测试
- en: npm run unit
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: npm run unit
- en: run e2e tests
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行端到端测试
- en: npm run e2e
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: npm run e2e
- en: run all tests
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行所有测试
- en: npm test
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: npm test
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, make a `commit` for the changes with the following command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令对更改进行`commit`：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, push the changes to GitHub with the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下命令将更改推送到GitHub：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, if we go to our GitHub repository page for this application, we should
    be able to see the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们转到此应用程序的GitHub存储库页面，我们应该能够看到以下内容：
- en: '![](img/827bc17c-f9de-44ec-bc0f-75421894291a.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/827bc17c-f9de-44ec-bc0f-75421894291a.png)'
- en: Click on the Compare & pull request button. Then add the necessary description
    and hit the Create pull request button.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“比较和拉取请求”按钮。然后添加必要的描述，点击“创建拉取请求”按钮。
- en: '![](img/86f73e47-7c07-408e-8bbd-fd8d672f0084.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86f73e47-7c07-408e-8bbd-fd8d672f0084.png)'
- en: As soon as you create a pull request, Travis CI will start to build the application,
    and as you go on to add more commits and push changes to, Travis CI will build
    the application for every commit.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建拉取请求，Travis CI将开始构建应用程序，随着您继续添加更多提交并推送更改，Travis CI将为每个提交构建应用程序。
- en: While it is a good practice to run the tests before we push any changes to GitHub,
    Travis CI build helps to notify if something breaks by building the application
    for every single commit.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在将任何更改推送到GitHub之前运行测试是一个很好的做法，Travis CI构建有助于在每次提交时构建应用程序，以便在出现故障时通知我们。
- en: 'We can also add settings to notify us via email or any other mechanism when
    the build fails or succeeds as well. By default, Travis CI will notify us via
    email notifications, as in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以添加设置，以便在构建失败或成功时通过电子邮件或任何其他机制通知我们。默认情况下，Travis CI将通过电子邮件通知我们，如下面的屏幕截图所示：
- en: '![](img/2e2dc45f-4a5e-4c6a-b9b9-9dddd6e98882.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2e2dc45f-4a5e-4c6a-b9b9-9dddd6e98882.png)'
- en: 'You can see here that Travis CI has been successfully integrated and that the
    tests are also passing:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处看到Travis CI已成功集成，并且测试也通过了：
- en: '![](img/5af4bbac-399e-49cc-9b8f-68fa4117efb7.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5af4bbac-399e-49cc-9b8f-68fa4117efb7.png)'
- en: 'When we click on Details, we can see the detailed log for the build as well:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击“详细信息”时，我们可以看到构建的详细日志：
- en: '![](img/3d247e17-4aca-4929-8b2e-cfe8a2ce4072.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d247e17-4aca-4929-8b2e-cfe8a2ce4072.png)'
- en: 'Once we are confident with the changes, we can merge the pull request to the
    master branch:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们对更改感到满意，我们就可以将拉取请求合并到主分支：
- en: '![](img/ec72e221-f298-4441-bcd3-f1f33d39832d.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec72e221-f298-4441-bcd3-f1f33d39832d.png)'
- en: Introduction to Heroku
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Heroku简介
- en: The last and most important part of developing an application is to deploy it.
    Heroku is a cloud platform as a service. It is a cloud platform where we can host
    our applications. Heroku is an easy and elegant way to deploy and manage our applications.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 开发应用程序的最后和最重要的部分是部署它。 Heroku是一种云平台即服务。这是一个云平台，我们可以在其中托管我们的应用程序。 Heroku是部署和管理我们的应用程序的简单而优雅的方式。
- en: With Heroku, we can deploy our applications written in Node.js, and many other
    programming languages as well, such as Ruby, Java, and Python. Regardless of the
    programming language, the setup required for the Heroku application is the same
    across all languages.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Heroku，我们可以部署使用Node.js编写的应用程序，以及许多其他编程语言，如Ruby、Java和Python。无论编程语言如何，Heroku应用程序所需的设置在所有语言中都是相同的。
- en: There are several ways to deploy our application using Heroku, such as using
    Git, GitHub, Dropbox, or via API. We will be focusing on deploying our application
    with a Heroku client in this chapter.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种使用Heroku部署我们的应用程序的方法，例如使用Git、GitHub、Dropbox或通过API。在本章中，我们将专注于使用Heroku客户端部署我们的应用程序。
- en: Setting up a Heroku account
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Heroku帐户
- en: To get started with app deployment in Heroku, we first need to create an account.
    You can create yours directly from [https://www.heroku.com/](https://www.heroku.com/).
    If you want to learn more about different types of apps, you can check out the
    official documentation at [https://devcenter.heroku.com/](https://devcenter.heroku.com/).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始在Heroku中部署应用程序，我们首先需要创建一个帐户。您可以直接从[https://www.heroku.com/](https://www.heroku.com/)创建您自己的帐户。如果您想了解有关不同类型的应用程序的更多信息，可以在[https://devcenter.heroku.com/](https://devcenter.heroku.com/)上查看官方文档。
- en: 'Once you create your account, you should be able to see your own dashboard:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 创建帐户后，您应该能够看到自己的仪表板：
- en: '![](img/30d6ccf6-84b5-4d3b-b947-787319f4b488.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30d6ccf6-84b5-4d3b-b947-787319f4b488.png)'
- en: Creating a Node.js app
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Node.js应用程序
- en: Heroku provides a lot of options for the application that we will build. It
    supports Node.js, Ruby, Java, PHP, Python, Go, Scala, and Clojure. Let's go ahead
    and choose Node.js from the dashboard.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku为我们将构建的应用程序提供了许多选项。它支持Node.js、Ruby、Java、PHP、Python、Go、Scala和Clojure。让我们继续从仪表板中选择Node.js。
- en: This documentation itself will guide you when you follow each step. Let's go
    ahead and deploy our own app in Heroku.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档本身将在您按照每个步骤进行时指导您。让我们继续在Heroku中部署我们自己的应用程序。
- en: Installing Heroku
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Heroku
- en: The first and foremost thing to do is to install Heroku.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的事情是安装Heroku。
- en: Installing Heroku in Windows
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows中安装Heroku
- en: We can install Heroku in Windows simply by downloading the installer from the
    official page, [https://devcenter.heroku.com/articles/heroku-cli#download-and-install](https://devcenter.heroku.com/articles/heroku-cli#download-and-install),
    and running the installer.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过从官方页面下载安装程序并运行安装程序来简单地在Windows中安装Heroku，网址为[https://devcenter.heroku.com/articles/heroku-cli#download-and-install](https://devcenter.heroku.com/articles/heroku-cli#download-and-install)。
- en: Installing Heroku in Linux
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux中安装Heroku
- en: 'Heroku can be installed in Linux with just a single command:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，可以通过一个命令安装Heroku：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Installing Heroku in macOS X
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在macOS X中安装Heroku
- en: 'We can install Heroku in macOS using `homebrew`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`homebrew`在macOS上安装Heroku：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can check whether `Heroku` is installed using the following command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令检查`Heroku`是否已安装：
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This should print the version of Heroku that we just installed.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该打印我们刚刚安装的Heroku的版本。
- en: Deploying to Heroku
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到Heroku
- en: 'Once Heroku is installed, let''s go to `https://dashboard.heroku.com/apps`,
    where we will be creating a Heroku application for our project. Click on the Create
    New App button and enter the application name that you want to provide to your
    application. We will be naming it `movie-rating-app-1` for our application:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Heroku后，让我们转到`https://dashboard.heroku.com/apps`，在那里我们将为我们的项目创建一个Heroku应用程序。单击“创建新应用”按钮，输入您要为应用程序提供的应用程序名称。我们将为我们的应用程序命名为`movie-rating-app-1`：
- en: '![](img/f4721c0e-7c82-4e5b-83e0-d0cf45af189d.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4721c0e-7c82-4e5b-83e0-d0cf45af189d.png)'
- en: 'This will create a Heroku application. Now, let''s switch to our application
    in the Terminal and run the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个Heroku应用程序。现在，让我们切换到终端中的应用程序并运行以下命令：
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This command will prompt you to enter your email and password:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将提示您输入您的电子邮件和密码：
- en: '![](img/fee4b358-df38-4a65-a9be-02ff0a82c01b.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fee4b358-df38-4a65-a9be-02ff0a82c01b.png)'
- en: 'Now, if you have already initialized a Git repository in your application,
    you can skip the `git init` part in the following code snippet:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您已经在应用程序中初始化了Git存储库，则可以跳过以下代码片段中的`git init`部分：
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This command will link our application to the Heroku application that we just
    created.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将链接我们的应用程序到我们刚刚创建的Heroku应用程序。
- en: The setup part is done. Now, we can go ahead and make some changes in our application.
    Commit to the GitHub repo the way we have been doing so far and push the changes.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 设置部分完成。现在，我们可以继续对应用程序进行一些更改。像我们迄今为止一直在做的那样，提交到GitHub存储库并推送更改。
- en: 'Now, the simple command to deploy to the Heroku app is to run the following
    command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，部署到Heroku应用程序的简单命令是运行以下命令：
- en: '[PRE14]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There are a couple of things that we need to take care of here.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几件事情需要注意。
- en: 'Since we are serving the Vue.js components by converting them to static files
    using the `serve-static` package in `server.js`, we need to update the start script
    in `package.json` to run the `node` server. Let''s update the start  script with
    the following line in `package.json`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用`serve-static`包将Vue.js组件转换为静态文件进行服务，我们需要更新`package.json`中的启动脚本以运行`node`服务器。让我们在`package.json`中使用以下行更新启动脚本：
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Also, in the `config/Config.js` file we have the following:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在`config/Config.js`文件中，我们有以下内容：
- en: '[PRE16]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here, we are specifying the local MongoDB URL that will not work when we host
    our application in Heroku. For this, we can use a tool called **mLab**. mLab is
    a Database as a service tool for MongoDB. mLab allows us to create as many databases
    as we want for a sandbox database.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在指定本地MongoDB URL，当我们在Heroku上托管我们的应用程序时，它将无法工作。为此，我们可以使用一个名为**mLab**的工具。mLab是一个用于MongoDB的数据库服务工具。mLab允许我们为沙箱数据库创建尽可能多的数据库。
- en: 'Let''s go ahead and create an account on [https://mlab.com/](https://mlab.com/).
    Once you are logged in, click on the Create new button to create a new database:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在[https://mlab.com/](https://mlab.com/)上创建一个帐户。一旦您登录，单击“创建新”按钮创建一个新数据库：
- en: '![](img/aca147de-3bfd-4f55-8ec2-12b01c69f427.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aca147de-3bfd-4f55-8ec2-12b01c69f427.png)'
- en: 'We can choose any cloud provider we want. Choose the plan type as Sandbox and
    click on CONTINUE. Choose any region and then click on CONTINUE and add the database
    name you want for the application. Finally, click on Submit Order:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择任何我们想要的云提供商。选择沙箱计划类型，然后单击“继续”。选择任何地区，然后单击“继续”，并添加您想要为应用程序使用的数据库名称。最后，单击“提交订单”：
- en: '![](img/ca4e7127-ac66-42e8-86d1-ff23d3a18294.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca4e7127-ac66-42e8-86d1-ff23d3a18294.png)'
- en: Now, if we click on the database name, we can see the link to the MongoDB URL
    provided by mLab. We also need to create a database user to be able to authenticate
    the database.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们单击数据库名称，我们可以看到mLab提供的MongoDB URL的链接。我们还需要创建一个数据库用户，以便能够对数据库进行身份验证。
- en: Go to the Users tab, click on Add Database User, provide the username and password,
    and hit Create.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 转到用户选项卡，单击添加数据库用户，提供用户名和密码，然后单击创建。
- en: 'We should be able to see the MongoDB URL in the database profile page:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该能够在数据库配置页面中看到MongoDB URL：
- en: '![](img/d14a44ce-c38e-431b-ab91-86317ebcdf25.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d14a44ce-c38e-431b-ab91-86317ebcdf25.png)'
- en: 'Let''s update the MongoDB URL in our `config/Config.js`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`config/Config.js`中更新MongoDB URL：
- en: '[PRE17]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The last thing we need to change is the port of the application. The Heroku
    application automatically assigns a port when deploying an application. We should
    only be using port `8081` of the development environment only. So, let''s verify
    that our `server.js` has the following code:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更改的最后一件事是应用程序的端口。Heroku应用程序在部署应用程序时会自动分配一个端口。我们应该只在开发环境中使用端口`8081`。因此，让我们验证我们的`server.js`是否具有以下代码：
- en: '[PRE18]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, let''s commit and push the changes to the `master` and then deploy again:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们提交并推送更改到`master`，然后再次部署：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The application should be successfully deployed to Heroku and we should be
    able to view our application at [https://movie-rating-app-1.herokuapp.com/](https://movie-rating-app-1.herokuapp.com/):'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序应该成功部署到Heroku，我们应该能够在[https://movie-rating-app-1.herokuapp.com/](https://movie-rating-app-1.herokuapp.com/)上查看我们的应用程序：
- en: '![](img/3e799d4c-c59c-4581-9810-b444da6c59c4.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e799d4c-c59c-4581-9810-b444da6c59c4.png)'
- en: Heroku error logs
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Heroku错误日志
- en: 'If something goes wrong when we are deploying in Heroku, we can also look into
    the error logs that Heroku provides with the following command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在Heroku部署时出现问题，我们还可以使用以下命令查看Heroku提供的错误日志：
- en: '[PRE20]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Summary
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned what CI is and how to use it to make the build automatic
    in the application. We also learned about how to deploy apps using Heroku integration.
    Overall, we learned how to build a full-stack web application using the Vue.js
    and Node.js technologies, we integrated a different authentication mechanism,
    and we also learned how to write tests for the application and make deployments
    for the application. Congratulations!
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了CI是什么，以及如何使用它使应用程序中的构建自动化。我们还学习了如何使用Heroku集成部署应用程序。总的来说，我们学会了如何使用Vue.js和Node.js技术构建全栈Web应用程序，集成了不同的身份验证机制，还学会了如何为应用程序编写测试并进行部署。恭喜！
- en: This is just the beginning of the journey that you will be taking forward. You
    should now be able to make small-to-large scale applications with all the technologies
    that we have learned about here.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是你将要继续前行的旅程的开始。现在你应该能够使用我们在这里学到的所有技术来制作小到大规模的应用程序。
- en: This book has provided you with the skills to build an application using JavaScript
    as the sole programming language using the MEVN stack. This can be a great start
    if you are planning on building your own complete application. I hope you enjoyed
    reading the book and that you continue building awesome applications!
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书为你提供了使用JavaScript作为唯一编程语言，使用MEVN堆栈构建应用程序的技能。如果你打算构建自己的完整应用程序，这可能是一个很好的开始。希望你喜欢阅读这本书，并继续构建令人敬畏的应用程序！
