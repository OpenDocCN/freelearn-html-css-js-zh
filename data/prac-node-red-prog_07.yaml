- en: '*Chapter 5*: Implementing Node-RED Locally'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第5章*：本地实现Node-RED'
- en: In this chapter, let's use the standalone version of Node-RED. Node-RED consists
    of a development environment, an execution environment, and the application itself.
    You can understand the mechanism by using the standalone version that runs in
    the local environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，让我们使用独立版本的Node-RED。Node-RED包括开发环境、执行环境和应用程序本身。您可以通过在本地环境中运行的独立版本来理解其机制。
- en: Specifically, the most common reason for starting the standalone version of
    Node-RED is when using it on an IoT edge device. IoT edge devices have sensors
    that are usually applied to the "Things" part of the "Internet of Things." In
    this chapter, we will look at the sensing data within the edge device and create
    a sample flow.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，启动独立版本的Node-RED最常见的原因是在物联网边缘设备上使用它。物联网边缘设备通常具有传感器，这些传感器通常应用于“物联网”的“物”部分。在本章中，我们将查看边缘设备内的传感数据并创建一个示例流程。
- en: 'Let''s get started with the following four topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下四个主题开始：
- en: Running Node-RED on a local machine
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地机器上运行Node-RED
- en: Using the standalone version of Node-RED
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用独立版本的Node-RED
- en: Using IoT on edge devices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在边缘设备上使用物联网
- en: Making a sample flow
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个示例流程
- en: By the end of this chapter, you will have learned how to build a flow for handling
    sensor data on IoT devices.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将学会如何构建处理物联网设备传感器数据的流程。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To progress through this chapter, you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章，您需要以下内容：
- en: 'Node-RED (v1.1.0 or above): [https://nodered.org/](https://nodered.org/)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node-RED（v1.1.0或更高版本）：[https://nodered.org/](https://nodered.org/)
- en: 'Raspberry Pi: [https://www.raspberrypi.org/](https://www.raspberrypi.org/)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派：[https://www.raspberrypi.org/](https://www.raspberrypi.org/)
- en: The code used in this chapter can be found in `Chapter05` folder at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的代码可以在[https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming)的`Chapter05`文件夹中找到。
- en: Running Node-RED on a local machine
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地机器上运行Node-RED
- en: We can now create the flow for sensing data on an IoT edge device, and in this
    scenario, the local machine uses Raspberry Pi. The reason for this will be described
    in the *Using the standalone verison of Node-RED* section, but in summary, this
    tutorial is for IoT edge device.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以为物联网边缘设备上的传感数据创建流程，在这种情况下，本地机器使用的是树莓派。关于这一点将在*使用独立版本的Node-RED*部分中描述，但总的来说，本教程是为物联网边缘设备而设计的。
- en: I have already explained how to start Node-RED on Raspberry Pi, so you should
    now know how to run it, but if you need a refresher, please refer to the *Install
    Node-RED for Raspberry Pi* section in [*Chapter 2*](B16353_02_ePub_AM.xhtml#_idTextAnchor034),
    *Setting Up the Development Environment*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经解释了如何在树莓派上启动Node-RED，所以您现在应该知道如何运行它，但如果您需要复习，请参考[*第2章*](B16353_02_ePub_AM.xhtml#_idTextAnchor034)中的*为树莓派安装Node-RED*部分，*设置开发环境*。
- en: 'Now, follow these steps to start Node-RED on your Raspberry Pi:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照以下步骤在您的树莓派上启动Node-RED：
- en: Let's start by executing Node-RED from the Raspberry Pi menu:![Figure 5.1 –
    Running Node-RED from the Raspberry Pi menu
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从树莓派菜单中执行Node-RED开始：![图5.1 – 从树莓派菜单中运行Node-RED
- en: '](img/Figure_5.01_B16353.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.01_B16353.jpg)'
- en: Figure 5.1 – Running Node-RED from the Raspberry Pi menu
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – 从树莓派菜单中运行Node-RED
- en: You can check the status of Node-RED on your terminal. If **Started flows**
    is shown, Node-RED is ready to use:![Figure 5.2 – Terminal of Raspberry Pi
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在终端上检查Node-RED的状态。如果显示**Started flows**，则Node-RED已准备就绪：![图5.2 – 树莓派终端
- en: '](img/Figure_5.2_B16353.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.2_B16353.jpg)'
- en: Figure 5.2 – Terminal of Raspberry Pi
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 – 树莓派终端
- en: 'You can access the Node-RED flow editor with the `localhost:1880` URL:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过`localhost:1880` URL访问Node-RED流程编辑器：
- en: '![Figure 5.3 – Node-RED flow editor'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.3 – Node-RED流程编辑器'
- en: '](img/Figure_5.3_B16353.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.3_B16353.jpg)'
- en: Figure 5.3 – Node-RED flow editor
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3 – Node-RED流程编辑器
- en: Let's learn a few concepts before making use of the flow editor.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用流程编辑器之前，让我们学习一些概念。
- en: Using the standalone version of Node-RED
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用独立版本的Node-RED
- en: Now we will learn what the standalone version of Node-RED is and how it differs
    from other versions. We usually use the Node-RED flow editor as a standalone editor;
    however, we can also use the Node-RED flow editor on any cloud with container
    technologies such as Docker, Kubernetes, or Cloud Foundry. We will explicitly
    demonstrate the use of the standalone version with relatively common use cases
    to learn how to use it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将学习独立版本的Node-RED是什么，以及它与其他版本有何不同。通常我们使用Node-RED流程编辑器作为独立编辑器；然而，我们也可以在任何具有Docker、Kubernetes或Cloud
    Foundry等容器技术的云上使用Node-RED流程编辑器。我们将明确演示使用独立版本的用例，以学习如何使用它。
- en: Let's think about situations where Node-RED is used.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们思考一下Node-RED被使用的情况。
- en: Node-RED is a tool for creating applications made with Node.js. It is also the
    execution environment. If you can write an application in Node.js, that's fine.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED是用Node.js创建应用程序的工具。它也是执行环境。如果你能用Node.js编写应用程序，那就没问题。
- en: So, why build an application with Node-RED?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么要使用Node-RED构建应用程序呢？
- en: One answer is to black-box each individual unit of data processing. This makes
    the role of each process very clear and easy to build and maintain.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个答案是将每个数据处理单元视为黑匣子。这使得每个过程的作用非常清晰，易于构建和维护。
- en: Another answer is to avoid human error. Since each process is modularized as
    a node, you only need to understand the input/output specifications when using
    that process. This means you can avoid human errors such as coding mistakes and
    missing test specifications. This can be the advantage of no-code/low-code as
    well as Node-RED.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个答案是避免人为错误。由于每个过程都被模块化为一个节点，因此在使用该过程时，您只需要了解输入/输出规范。这意味着您可以避免人为错误，如编码错误和缺少测试规范。这也可以是无代码/低代码以及Node-RED的优势。
- en: Next, imagine a concrete situation that uses Node-RED with the characteristics
    just described.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，想象一个使用Node-RED的具体情况，具有刚刚描述的特征。
- en: Think of a business logic that controls data and connects it to the next process.
    This is a common situation in IoT solutions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个控制数据并将其连接到下一个流程的业务逻辑。这在物联网解决方案中很常见。
- en: The standard architecture for IoT solutions is built with edge devices and cloud
    platforms. It sends the sensor data acquired by the edge device to the cloud and
    then, on the cloud work to process the data, such as visualizing, analyzing, and
    persistent.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网解决方案的标准架构是由边缘设备和云平台构建的。它将边缘设备获取的传感器数据发送到云端，然后在云端处理数据，如可视化、分析和持久化。
- en: In this chapter, I would like to focus on that edge device part.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我想专注于边缘设备部分。
- en: It is common for edge devices to want to prepare the acquired sensor data to
    some extent before sending it to the cloud. The reason for this that if you send
    all the acquired data, there is a risk that the network will be overloaded.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘设备通常希望在将获取的传感器数据发送到云端之前对其进行一定程度的准备。这样做的原因是，如果您发送所有获取的数据，存在网络过载的风险。
- en: So, the standalone Node-RED exercise uses Raspberry Pi, which is a famous IoT
    infrastructure for consumers.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，独立的Node-RED练习使用了树莓派，这是一个著名的物联网基础设施。
- en: In this chapter, we will use the **Grove Base HAT** for Raspberry Pi and Grove
    Base modules. This is one of the standards for the IoT edge device platform and
    so we need to install the Grove Base driver to Raspberry Pi.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用树莓派和Grove Base模块的**Grove Base HAT**。这是物联网边缘设备平台的标准之一，因此我们需要将Grove
    Base驱动程序安装到树莓派上。
- en: Important Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This chapter gives an example using Grove Base HAT, which is relatively inexpensive
    and can be purchased (the link to this is mentioned in the next section), but
    any sensor device that can be connected to a Raspberry Pi can handle data on Node-RED.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了一个使用Grove Base HAT的示例，这是相对便宜且可以购买的（链接在下一节中提到），但是任何可以连接到树莓派并在Node-RED上处理数据的传感器设备都可以处理数据。
- en: When using a module other than the Grove Base HAT sensor device, use the corresponding
    node and read this chapter. (Implementation is required if there is no corresponding
    node.)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用除Grove Base HAT传感器设备以外的模块时，请使用相应的节点并阅读本章。（如果没有相应的节点，则需要进行实现。）
- en: 'You can check the Node-RED library for the existence of a node that corresponds
    to each device:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以检查Node-RED库以查看是否存在与每个设备对应的节点：
- en: '[https://flows.nodered.org/](https://flows.nodered.org/)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://flows.nodered.org/](https://flows.nodered.org/)'
- en: 'Let''s prepare to use Grove Base HAT on our Raspberry Pi by following these
    steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤准备在树莓派上使用Grove Base HAT：
- en: 'Let''s start by executing the following command on our Raspberry Pi:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从在树莓派上执行以下命令开始：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If everything goes well, you will see the following notice:![Figure 5.4 – Successful
    grove.py installation
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，您将看到以下通知：![图5.4 – 成功安装grove.py
- en: '](img/Figure_5.4_B16353.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.4_B16353.jpg)'
- en: Figure 5.4 – Successful grove.py installation
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4 – 成功安装grove.py
- en: 'The next step is to enable ARM I2C. We can do this by executing the following
    command:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的步骤是启用ARM I2C。我们可以通过执行以下命令来实现：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After executing the command, you will see the following configuration window.
    Please select **Interfacing Options**:![Figure 5.5 – Software configuration tool
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行完命令后，您将看到以下配置窗口。请选择**接口选项**：![图5.5 – 软件配置工具
- en: '](img/Figure_5.5_B16353.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.5_B16353.jpg)'
- en: Figure 5.5 – Software configuration tool
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5 – 软件配置工具
- en: Select **I2C**:![Figure 5.6 – Enabling I2C
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**I2C**：![图5.6 – 启用I2C
- en: '](img/Figure_5.6_B16353.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.6_B16353.jpg)'
- en: Figure 5.6 – Enabling I2C
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 – 启用I2C
- en: Once you select it, a **Would you like the ARM I2C interface to be enabled?**
    message will be shown in the same window. Please select **Yes** to accept it.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择后，同一窗口将显示**是否要启用ARM I2C接口？**消息。请选择**是**以接受它。
- en: You have now successfully enabled I2C. Restart the Raspberry Pi and restart
    the Node-RED flow editor. In doing this, your Raspberry Pi has been made available
    to use the I2C interface, and for the next step, we need to connect the sensor
    devices and Raspberry Pi via the I2C interface.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已成功启用了I2C。重新启动树莓派并重新启动Node-RED流编辑器。通过这样做，您的树莓派已经可以使用I2C接口，下一步，我们需要通过I2C接口连接传感器设备和树莓派。
- en: Using IoT on edge devices
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在边缘设备上使用物联网
- en: Now let's consider a case study on edge devices in IoT.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑物联网中边缘设备的案例研究。
- en: IoT has recently been adopted in several industries, for example, in the fields
    of weather forecasting and agriculture; however, the basic composition is the
    same. Various data acquired by the edge device is sent to the server-side platform,
    such as the cloud, and the data is handled and visualized on the server side,
    which is full of resources. There are various ways to visualize, but in the simplest
    case, it will be to output the necessary data values to the log as a standard
    output.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网最近在几个行业中得到了采用，例如天气预报和农业领域；但是，基本构成是相同的。边缘设备获取的各种数据被发送到服务器端平台，如云端，并且数据在服务器端进行处理和可视化，这是充满资源的。有各种各样的可视化方式，但在最简单的情况下，将必要的数据值输出到日志作为标准输出。
- en: In this chapter, I would like to consider the edge device part in the use case
    of IoT. This is about handling the sensor data, acquired using the sensor module,
    before it goes to the server side for formatting and narrowing down.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我想考虑物联网用例中的边缘设备部分。这是关于在传感器模块使用获取的传感器数据在去往服务器端进行格式化和缩小之前进行处理。
- en: What are the different kinds of sensors?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有哪些不同类型的传感器？
- en: 'The following sensors are often used at the experimental level of IoT:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下传感器通常在物联网的实验级别上使用：
- en: Temperature
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 温度
- en: Humidity
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 湿度
- en: Gyroscope (acceleration, angular velocity)
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 陀螺仪（加速度，角速度）
- en: Light
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 光
- en: Sound
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声音
- en: Pressure-sensitive
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压敏
- en: Magnetic
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁性
- en: Here we will consider the use case of outputting the acquired value to the log
    using a light sensor and a temperature/humidity sensor.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将考虑使用光传感器和温度/湿度传感器将获取的值输出到日志的用例。
- en: In order to get sensor data, you'll need a device. In this sample flow (application),
    Raspberry Pi is used, but it does not have a sensing function because it is just
    a foundation. With the old-fashioned board, you had to solder the sensor device/module,
    but the convenient thing about the Raspberry Pi is that there are many sensor
    module kits that can be connected with one touch.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取传感器数据，您需要一个设备。在这个示例流程（应用程序）中，使用的是树莓派，但它没有传感功能，因为它只是一个基础。使用老式的板，您必须焊接传感器设备/模块，但树莓派的方便之处在于有许多传感器模块套件可以一键连接。
- en: 'As already introduced, we''ll use the Grove series provided by Seeed, which
    has a sensor module and connection board for Raspberry Pi: [https://wiki.seeedstudio.com/Grove_Base_Hat_for_Raspberry_Pi/](https://wiki.seeedstudio.com/Grove_Base_Hat_for_Raspberry_Pi/)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所介绍的，我们将使用Seeed提供的Grove系列，该系列具有树莓派的传感器模块和连接板：[https://wiki.seeedstudio.com/Grove_Base_Hat_for_Raspberry_Pi/](https://wiki.seeedstudio.com/Grove_Base_Hat_for_Raspberry_Pi/)
- en: Let's prepare the Grove Base HAT for Raspberry Pi modules.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们准备树莓派的Grove Base HAT模块。
- en: Important Note
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you don't have the Grove Base HAT for Raspberry Pi and want to run this tutorial,
    please buy it via the official site ([https://www.seeedstudio.com/Grove-Base-Hat-for-Raspberry-Pi.html](https://www.seeedstudio.com/Grove-Base-Hat-for-Raspberry-Pi.html)).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有树莓派的Grove Base HAT并且想要运行本教程，请通过官方网站购买（[https://www.seeedstudio.com/Grove-Base-Hat-for-Raspberry-Pi.html](https://www.seeedstudio.com/Grove-Base-Hat-for-Raspberry-Pi.html)）。
- en: 'This is what the Grove Base HAT for Raspberry Pi looks like:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是用于树莓派的Grove Base HAT的样子：
- en: '![Figure 5.7 – Grove Base HAT for Raspberry Pi'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.7 – 用于树莓派的Grove Base HAT'
- en: '](img/Figure_5.07_B16353.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.07_B16353.jpg)'
- en: Figure 5.7 – Grove Base HAT for Raspberry Pi
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7 – 用于树莓派的Grove Base HAT
- en: 'We need to connect the Grove Base HAT and the sensor modules to the Raspberry
    Pi. To do so, follow these steps:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将Grove Base HAT和传感器模块连接到树莓派。要做到这一点，请按照以下步骤进行：
- en: Place the Grove Base HAT on your Raspberry Pi and screw it in:![Figure 5.8 –
    Setting the Base HAT on your Raspberry Pi
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Grove Base HAT放在树莓派上并拧紧：![图5.8 – 将Base HAT设置在您的树莓派上
- en: '](img/Figure_5.08_B16353.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.08_B16353.jpg)'
- en: Figure 5.8 – Setting the Base HAT on your Raspberry Pi
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8 – 将Base HAT设置在您的树莓派上
- en: 'This is what the Grove - Light Sensor v1.2 - LS06-S phototransistor looks like:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Grove - 光传感器 v1.2 - LS06-S光电晶体管的样子：
- en: '![Figure 5.9 – Grove - Light Sensor v1.2'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.9 – Grove - 光传感器 v1.2'
- en: '](img/Figure_5.09_B16353.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.09_B16353.jpg)'
- en: Figure 5.9 – Grove - Light Sensor v1.2
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.9 – Grove - 光传感器 v1.2
- en: You can get it from [https://www.seeedstudio.com/Grove-Light-Sensor-v1-2-LS06-S-phototransistor.html](https://www.seeedstudio.com/Grove-Light-Sensor-v1-2-LS06-S-phototransistor.html).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://www.seeedstudio.com/Grove-Light-Sensor-v1-2-LS06-S-phototransistor.html](https://www.seeedstudio.com/Grove-Light-Sensor-v1-2-LS06-S-phototransistor.html)获取它。
- en: Connect the Grove light sensor to the analog port of your Base HAT:![Figure
    5.10 – Connecting the light sensor to your Base HAT
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Grove光传感器连接到Base HAT的模拟端口：![图5.10 – 将光传感器连接到您的Base HAT
- en: '](img/Figure_5.10_B16353.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.10_B16353.jpg)'
- en: Figure 5.10 – Connecting the light sensor to your Base HAT
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10 – 将光传感器连接到您的Base HAT
- en: Important Note
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Please be careful! This vendor, **Seeed,** has a similar module for temperature/humidity
    sensor **SHT35**, but it's not supported by the Grove Base HAT node. You need
    to use **SHT31**.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意！这家供应商**Seeed**有一个类似的温湿度传感器**SHT35**，但它不受Grove Base HAT节点支持。您需要使用**SHT31**。
- en: 'This is what the Grove - Temperature&Humidity Sensor (SHT31) looks like:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Grove - 温湿度传感器（SHT31）的样子：
- en: '![Figure 5.11 – Grove – Temperature&Humidity Sensor (SHT31)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.11 – Grove – 温湿度传感器（SHT31）'
- en: '](img/Figure_5.11_B16353.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.11_B16353.jpg)'
- en: Figure 5.11 – Grove – Temperature&Humidity Sensor (SHT31)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11 – Grove – 温湿度传感器（SHT31）
- en: You can get it from [https://www.seeedstudio.com/Grove-Temperature-Humidity-Sensor-SHT31.html](https://www.seeedstudio.com/Grove-Temperature-Humidity-Sensor-SHT31.html).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://www.seeedstudio.com/Grove-Temperature-Humidity-Sensor-SHT31.html](https://www.seeedstudio.com/Grove-Temperature-Humidity-Sensor-SHT31.html)获取它。
- en: 'Connect the Grove temperature and humidity sensor to the I2C port of your Base
    HAT:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Grove温湿度传感器连接到Base HAT的I2C端口：
- en: '![Figure 5.12 – Connecting the temperature/humidity sensor to your Base HAT'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.12 – 将温湿度传感器连接到您的Base HAT'
- en: '](img/Figure_5.12_B16353.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.12_B16353.jpg)'
- en: Figure 5.12 – Connecting the temperature/humidity sensor to your Base HAT
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.12 – 将温湿度传感器连接到您的Base HAT
- en: And that's it. Now your device is set up and we are ready to go on to the next
    step! In this part, we have learned about popular, simple use cases of IoT edge
    devices and next, we will make a flow for these use cases.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在您的设备已经设置好，我们准备进行下一步！在这一部分，我们已经了解了物联网边缘设备的流行简单用例，接下来，我们将为这些用例制作一个流程。
- en: Making a sample flow
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作一个示例流程
- en: In this section, we will create these two sensor data output flows in the Node-RED
    flow editor.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在Node-RED流编辑器中创建这两个传感器数据输出流。
- en: You will use the sensor modules you have prepared to collect data and create
    a sample flow to visualize it on Node-RED. By using two different sensor modules,
    we can learn the basics of data handling in Node-RED.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用准备好的传感器模块收集数据，并创建一个示例流程，在Node-RED上将其可视化。通过使用两种不同的传感器模块，我们可以学习Node-RED中的数据处理基础知识。
- en: Use case 1 – light sensor
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用例1 – 光传感器
- en: 'The first is a light sensor. Let''s create a flow (application) that detects
    light and outputs the value detected by a fixed-point observation to a log:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是光传感器。让我们创建一个流程（应用程序），检测光线并将固定点观察到的值输出到日志：
- en: '![Figure 5.13 – Use case 1 – getting light sensor data'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.13 – 用例1 – 获取光传感器数据'
- en: '](img/Figure_5.13_B16353.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.13_B16353.jpg)'
- en: Figure 5.13 – Use case 1 – getting light sensor data
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.13 – 用例1 – 获取光传感器数据
- en: Connect the light sensor module to the Raspberry Pi and use the Node-RED flow
    editor on the Raspberry Pi to output the data obtained as a standard output.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 将光传感器模块连接到树莓派，并使用树莓派上的Node-RED流编辑器将获取的数据输出为标准输出。
- en: Use case 2 – temperature/humidity sensor
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用例2 – 温湿度传感器
- en: 'The second one is a temperature/humidity sensor. Let''s create an application
    (flow) that detects temperature and humidity and outputs the value detected by
    a fixed-point observation to a log:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个是温度/湿度传感器。让我们创建一个应用程序（流），用于检测温度和湿度，并将通过固定点观察检测到的值输出到日志：
- en: '![Figure 5.14 – Use case 2 – getting temperature/humidity data'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.14 – 用例2 – 获取温度/湿度数据'
- en: '](img/Figure_5.14_B16353.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.14_B16353.jpg)'
- en: Figure 5.14 – Use case 2 – getting temperature/humidity data
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14 – 用例2 – 获取温度/湿度数据
- en: Connect the temperature/humidity sensor module to the Raspberry Pi and use the
    Node-RED flow editor on the Raspberry Pi to output the data obtained as a standard
    output.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 将温度/湿度传感器模块连接到树莓派，并使用树莓派上的Node-RED流程编辑器将获取的数据输出为标准输出。
- en: If you want to spot test these two use cases on your device, you need to connect
    a sensor that you can use to obtain sensor data.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在设备上对这两个用例进行现场测试，需要连接一个传感器，以获取传感器数据。
- en: You may have to prepare this before creating the flow.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建流程之前，您可能需要准备这个。
- en: This time, we will use Grove Base HAT, which is easy to use with Raspberry Pi,
    and as this setup was completed in the previous step, we are ready to access the
    data on Raspberry Pi. However, we have not yet prepared Node-RED. It is difficult
    to access this data with Node-RED as default. One way is to use a Function node
    and code the script from scratch, which is very difficult but not impossible.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将使用Grove Base HAT，它很容易与树莓派一起使用，由于上一步已经完成了设置，我们已经准备好在树莓派上访问数据。但是，我们还没有准备好Node-RED。默认情况下，使用Node-RED访问这些数据是困难的。一种方法是使用Function节点并从头开始编写脚本，这非常困难但并非不可能。
- en: For handling the sensing data recognized by Raspberry Pi on Node-RED, a "node"
    dedicated to Grove Base HAT is required.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理Raspberry Pi在Node-RED上识别的传感器数据，需要一个专门用于Grove Base HAT的“节点”。
- en: 'The good news is that you can start using the node right away. This is because
    Seigo Tanaka, a Node-RED User Group Japan board member ([https://nodered.jp/](https://nodered.jp/))
    and Node-RED contributor, has already created and released a node for Grove Base
    HAT. This is the node for the Grove Base HAT for Raspberry Pi:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，您可以立即开始使用该节点。这是因为田中正吾（Seigo Tanaka）是Node-RED用户组日本董事会成员（[https://nodered.jp/](https://nodered.jp/)）和Node-RED贡献者，已经创建并发布了一个用于Grove
    Base HAT的节点。这是用于树莓派的Grove Base HAT节点：
- en: '[PRE2]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can read more about it here: [https://www.npmjs.com/package/node-red-contrib-grove-base-hat](https://www.npmjs.com/package/node-red-contrib-grove-base-hat).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里了解更多信息：[https://www.npmjs.com/package/node-red-contrib-grove-base-hat](https://www.npmjs.com/package/node-red-contrib-grove-base-hat)。
- en: If you need a refresher on how to install nodes that are published on the node
    library, please read the *Getting several nodes from the library* section in [*Chapter
    4*](B16353_04_ePub_AM.xhtml#_idTextAnchor051), *Learning the Major Nodes*.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要复习如何安装发布在节点库中的节点，请阅读[*第4章*](B16353_04_ePub_AM.xhtml#_idTextAnchor051)中的*从库中获取多个节点*部分。
- en: The reason I refer you back to this is that the next step is to install the
    node for the Grove Base HAT from the library into your environment.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我之所以提到这一点，是因为下一步是将Grove Base HAT节点从库中安装到您的环境中。
- en: 'Let''s enable the use of this Grove Base HAT node in our Node-RED flow editor:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Node-RED流程编辑器中启用Grove Base HAT节点：
- en: Click the menu at the top right and select **Manage palette** to open the settings
    panel:![Figure 5.15 – Selecting Manage palette](img/Figure_5.15_B16353.jpg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击右上角的菜单，选择**管理调色板**以打开设置面板：![图5.15 – 选择管理调色板](img/Figure_5.15_B16353.jpg)
- en: Figure 5.15 – Selecting Manage palette
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.15 – 选择管理调色板
- en: 'When the settings panel is opened, type the name of the node you want to use
    in the search window. We want to use **node-red-contrib-grove-base-hat**, so please
    type the following:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开设置面板后，在搜索窗口中输入您想要使用的节点名称。我们想要使用**node-red-contrib-grove-base-hat**，所以请键入以下内容：
- en: '[PRE3]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After that, you can see the **node-red-contrib-grove-base-hat** node in the
    search window. Click the **Install** button:![Figure 5.16 – Installing the node-red-contrib-grove-base-hat
    node
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，您可以在搜索窗口中看到**node-red-contrib-grove-base-hat**节点。单击**安装**按钮：![图5.16 – 安装node-red-contrib-grove-base-hat节点
- en: '](img/Figure_5.16_B16353.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.16_B16353.jpg)'
- en: Figure 5.16 – Installing the node-red-contrib-grove-base-hat node
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.16 – 安装node-red-contrib-grove-base-hat节点
- en: 'After clicking the **Install** button, you will see a message asking you to
    read the documentation to find out more information about this node. Read the
    document if necessary, and then click the **Install** button on the message box:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**安装**按钮后，您将看到一条消息，要求您阅读文档以了解有关此节点的更多信息。如有必要，请阅读文档，然后单击消息框上的**安装**按钮：
- en: '![Figure 5.17 – A message window to read the node documentation'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.17 – 读取节点文档的消息窗口'
- en: '](img/Figure_5.17_B16353.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.17_B16353.jpg)'
- en: Figure 5.17 – A message window to read the node documentation
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.17 – 读取节点文档的消息窗口
- en: 'Now you are ready to use the node for Grove Base HAT. Check the palette in
    the flow editor. At the bottom of the palette, you can see that the Grove Base
    HAT node has been added:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备好使用Grove Base HAT节点了。检查流程编辑器中的调色板。在调色板底部，您可以看到已添加了Grove Base HAT节点：
- en: '![Figure 5.18 – Grove Base HAT nodes on your dashboard'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.18 – 仪表板上的Grove Base HAT节点'
- en: '](img/Figure_5.18_B16353.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.18_B16353.jpg)'
- en: Figure 5.18 – Grove Base HAT nodes on your dashboard
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.18 – 仪表板上的Grove Base HAT节点
- en: There are many sensing modules that can be connected to Grove Base HAT. This
    time, only the light and temperature/humidity sensors are used, but there are
    other things that can be seen by looking at the types of nodes.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Grove Base HAT可以连接许多传感器模块。这次只使用了光线和温度/湿度传感器，但通过查看节点类型，还可以看到其他东西。
- en: The procedure followed for the two use cases created here can also be applied
    when using other sensors. If you are interested, please try other sensors too.
    In the next section, we will make a flow for use case 1.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里创建的两个用例所遵循的程序也可以应用于使用其他传感器时。如果感兴趣，请尝试其他传感器。在下一节中，我们将为用例1创建一个流程。
- en: Making a flow for use case 1 – light sensor
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为用例1制作流程 – 光传感器
- en: In use case 1, Node-RED can be used to handle the illuminance obtained from
    the light sensor as JSON data. That data can be handled as JSON data, then be
    sent to the server side afterward, and various processes can be easily performed
    on the edge device.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在用例1中，Node-RED可以用来处理从光传感器获取的光照强度作为JSON数据。该数据可以被处理为JSON数据，然后发送到服务器端，各种处理可以在边缘设备上轻松进行。
- en: 'The value obtained from the light sensor is received by Node-RED and the output
    is a debug log (standard output). We can set this using the following steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 从光传感器获取的数值被Node-RED接收，并且输出为调试日志（标准输出）。我们可以通过以下步骤设置这一点：
- en: Select the **grove light sensor v1_2** node from the palette on the left side
    of the flow editor and drag and drop it into the workspace to place it:![Figure
    5.19 – grove light sensor v1_2
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从流编辑器左侧的调色板中选择**grove light sensor v1_2**节点，然后将其拖放到工作区中放置：![图5.19 – grove light
    sensor v1_2
- en: '](img/Figure_5.19_B16353.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.19_B16353.jpg)'
- en: Figure 5.19 – grove light sensor v1_2
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.19 – grove light sensor v1_2
- en: This node allows the value of the sensor device, which is continuously acquired
    on the Raspberry Pi via the Grove Base HAT, to be handled as a JSON format message
    object on Node-RED.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 该节点允许传感器设备的值，通过Raspberry Pi通过Grove Base HAT持续获取，被处理为Node-RED上的JSON格式消息对象。
- en: After placing the **grove-light-sensor-v1_2** node, place the **inject** node
    and **debug** nodes and wire them so that the **grove-light-sensor-v1_2** node
    you placed is sandwiched between them:![Figure 5.20 – Placing nodes and wiring
    them for the light sensor
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在放置**grove-light-sensor-v1_2**节点后，放置**inject**节点和**debug**节点，并将它们连接，使得您放置的**grove-light-sensor-v1_2**节点被夹在它们之间：![图5.20
    – 放置节点并为光传感器连接它们
- en: '](img/Figure_5.20_B16353.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.20_B16353.jpg)'
- en: Figure 5.20 – Placing nodes and wiring them for the light sensor
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.20 – 放置节点并为光传感器连接它们
- en: Next, check the settings of the **grove-light-sensor-v1_2** node. Double-click
    the node to open the settings panel.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，检查**grove-light-sensor-v1_2**节点的设置。双击节点打开设置面板。
- en: There is a selection item called **Port** in the settings panel. **A0** is selected
    by default.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置面板中有一个名为**Port**的选择项。**A0**是默认选择项。
- en: This **Port** setting is to specify which connector on the Grove Base HAT gets
    data from the connected module.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这个**Port**设置是为了指定Grove Base HAT上的哪个连接器从连接的模块获取数据。
- en: Earlier, we connected the Grove light sensor to the Grove Base HAT. If the connection
    is made according to the procedure in this tutorial, it should be connected to
    port A2, so select **A2** as the node setting value. If you are connecting to
    another port, select the port you are connecting to:![Figure 5.21 – Select A2
    as the port if you connected the sensor to A2 of Base HAT
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 早些时候，我们将Grove光传感器连接到了Grove Base HAT。如果按照本教程中的步骤进行连接，它应该连接到A2端口，因此选择**A2**作为节点设置值。如果连接到另一个端口，请选择您要连接的端口：![图5.21
    – 如果您将传感器连接到Base HAT的A2，则选择A2作为端口
- en: '](img/Figure_5.21_B16353.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.21_B16353.jpg)'
- en: Figure 5.21 – Select A2 as the port if you connected the sensor to A2 of Base
    HAT
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.21 – 如果您将传感器连接到Base HAT的A2，则选择A2作为端口
- en: After checking and setting **Port** on the settings panel, click the **Done**
    button in the upper-right corner to close the settings panel.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置面板上检查和设置**Port**后，点击右上角的**Done**按钮关闭设置面板。
- en: That's it! Don't forget to click the **deploy** button.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！不要忘记点击**deploy**按钮。
- en: You should remember how to execute a flow from a inject node, because you learned
    about this in the previous chapter. Click the switch on the inject node to run
    the flow. The data for the timing when the switch is clicked is outputted as a
    log, so please try clicking it a couple of times.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该记住如何从inject节点执行流程，因为您在上一章中学习了这个。点击inject节点上的开关来运行流程。当点击开关时的时间数据被输出为日志，所以请尝试点击几次。
- en: Important Note
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Do not forget to display the debug window to show that the value of the acquired
    data will be the output to the debug window. Node-RED does not automatically show
    the debug window even if the debug output is activated.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记显示调试窗口，以显示获取数据的值将输出到调试窗口。即使调试输出被激活，Node-RED也不会自动显示调试窗口。
- en: 'The resulting output in the **debug** window looks like the following:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**debug**窗口中的输出结果如下：'
- en: '![Figure 5.22 – Result of the light sensor flow'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.22 – 光传感器流的结果'
- en: '](img/Figure_5.22_B16353.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.22_B16353.jpg)'
- en: Figure 5.22 – Result of the light sensor flow
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.22 – 光传感器流的结果
- en: You can see that the result was output to the **debug** window.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到结果输出到**debug**窗口。
- en: Congratulations! With this, we have successfully created a basic flow (application)
    that handles the value of our first light sensor with Node-RED.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！通过这个，我们成功地创建了一个处理第一个光传感器值的基本流程（应用程序）与Node-RED。
- en: 'You can also download this flow definition file here: [https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter05/light-sensor-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter05/light-sensor-flows.json).'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在这里下载流程定义文件：[https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter05/light-sensor-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter05/light-sensor-flows.json)。
- en: Making a flow for use case 2 – temperature/humidity sensor
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为用例2制作流程 – 温湿度传感器
- en: In use case 2, Node-RED can be used to handle the temperature and the humidity
    obtained from the temperature/humidity sensor as JSON data. The data, which can
    be handled as JSON data, can be sent to the server side afterward, and various
    processes can be easily performed on the edge device.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在用例2中，Node-RED可以用来处理从温湿度传感器获取的温度和湿度作为JSON数据。这些数据可以被处理为JSON数据，然后发送到服务器端，各种处理可以在边缘设备上轻松进行。
- en: 'The value obtained from the temperature/humidity sensor is received by Node-RED
    and is outputted as a debug log (standard output):'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 从温湿度传感器获取的数值被Node-RED接收，并且输出为调试日志（标准输出）：
- en: Select the **grove temperature humidity sensor sht3x** node from the palette
    on the left side of the flow editor and drag and drop it into the workspace to
    place it:![Figure 5.23 – grove temperature humidity sensor sht3x
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从流程编辑器左侧的调色板中选择 **grove temperature humidity sensor sht3x** 节点，然后将其拖放到工作区中放置：![图5.23
    - grove temperature humidity sensor sht3x
- en: '](img/Figure_5.23_B16353.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.23_B16353.jpg)'
- en: Figure 5.23 – grove temperature humidity sensor sht3x
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.23 - grove temperature humidity sensor sht3x
- en: This node allows the value of the sensor device, which is continuously acquired
    on the Raspberry Pi via Grove Base HAT, to be handled as a JSON format message
    object on Node-RED.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这个节点允许将在树莓派上通过Grove Base HAT持续获取的传感器设备的值作为JSON格式的消息对象在Node-RED上处理。
- en: After placing the **grove-temperature-humidity-sensor-sht3x** node, place the
    **inject** and **debug** nodes, respectively, and wire them so that the **grove-temperature-humidity-sensor-sht3x**
    node you placed is sandwiched between them:![Figure 5.24 – Placing the nodes and
    wiring them for the temperature and humidity sensor
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 放置 **grove-temperature-humidity-sensor-sht3x** 节点后，分别放置 **inject** 和 **debug**
    节点，并将它们连接起来，使得您放置的 **grove-temperature-humidity-sensor-sht3x** 节点被夹在它们之间：![图5.24
    - 放置节点并为温湿度传感器连接线路
- en: '](img/Figure_5.24_B16353.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.24_B16353.jpg)'
- en: Figure 5.24 – Placing the nodes and wiring them for the temperature and humidity
    sensor
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.24 - 放置节点并为温湿度传感器连接线路
- en: Next, check the settings of the **grove-temperature-humidity-sensor-sht3x**
    node and double-click the node to open the settings panel.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，检查 **grove-temperature-humidity-sensor-sht3x** 节点的设置，并双击节点打开设置面板。
- en: 'Actually, this node has no values to set (strictly speaking, the name can be
    set, but the presence or absence of this setting does not affect the operation):'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这个节点没有要设置的值（严格来说，可以设置名称，但这个设置的有无不影响操作）：
- en: '![Figure 5.25 – Already set to the I2C port'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.25 - 已设置为I2C端口'
- en: '](img/Figure_5.25_B16353.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.25_B16353.jpg)'
- en: Figure 5.25 – Already set to the I2C port
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.25 - 已设置为I2C端口
- en: You can see on the settings panel that the port is designated as **I2C** (not
    changeable). If you have connected the Grove temperature and humidity sensor to
    the Grove Base HAT according to the procedure in this document, the module should
    be correctly connected to the **I2C** port. If it is connected to a port other
    than I2C, reconnect it properly.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在设置面板上看到端口被指定为 **I2C**（不可更改）。如果您按照本文档中的步骤将Grove温湿度传感器连接到Grove Base HAT，模块应正确连接到
    **I2C** 端口。如果它连接到除I2C之外的端口，请重新正确连接。
- en: After checking **Port** on the settings panel, click the **Done** button in
    the upper-right corner to close the settings panel.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置面板上检查 **端口**，然后点击右上角的 **完成** 按钮关闭设置面板。
- en: That's it! Don't forget to click the **deploy** button.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！不要忘记点击 **部署** 按钮。
- en: Click the switch on the inject node to run the flow. The data for the timing
    when the switch is clicked is outputted as a log, so please try clicking it a
    couple of times.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击注入节点上的开关以运行流程。当点击开关时的时间数据将作为日志输出，所以请尝试点击几次。
- en: Important Note
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: As noted in the previous section, do not forget to display the debug window
    to show that the value of the acquired data will be the output to the debug window.
    Node-RED does not automatically show the debug window even if the debug output
    is activated.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，请不要忘记显示调试窗口，以显示获取数据的值将作为输出显示在调试窗口中。即使启用了调试输出，Node-RED也不会自动显示调试窗口。
- en: 'The resulting output in the **debug** window looks like the following:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**调试** 窗口中的输出如下所示：'
- en: '![Figure 5.26 – Result of the temperature/humidity sensor flow'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.26 - 温湿度传感器流程的结果'
- en: '](img/Figure_5.26_B16353.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.26_B16353.jpg)'
- en: Figure 5.26 – Result of the temperature/humidity sensor flow
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.26 - 温湿度传感器流程的结果
- en: You can see that the result was outputted to the **debug** window.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到结果被输出到 **调试** 窗口。
- en: Congratulations! With this, we have successfully created a basic flow (application)
    that handles the value of the second sample, the temperature/humidity sensor,
    with Node-RED.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！通过这个，我们已经成功创建了一个基本的流程（应用程序），用Node-RED处理第二个样本，即温湿度传感器的数值。
- en: 'You can also download this flow definition file here: [https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter05/light-sensor-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter05/light-sensor-flows.json).'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在这里下载这个流程定义文件：[https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter05/light-sensor-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter05/light-sensor-flows.json)。
- en: Well done! Now you have learned how to handle the data obtained from the illuminance
    sensor and temperature and humidity sensor in JSON format on Node-RED.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！现在您已经学会了如何在Node-RED上处理以JSON格式获得的光照传感器和温湿度传感器的数据。
- en: Summary
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to create a sample flow (application) by comparing
    Node-RED to a real IoT use case. We experienced using the sensor module and Raspberry
    Pi to exchange data with Node-RED, so we had a feel for IoT.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何通过将Node-RED与真实的IoT用例进行比较来创建一个样本流程（应用程序）。我们通过使用传感器模块和树莓派与Node-RED交换数据，对IoT有了一定的了解。
- en: The flow steps created here will help you create different flows with other
    sensor modules in the edge device in the future.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里创建的流程步骤将帮助您将来在边缘设备中使用其他传感器模块创建不同的流程。
- en: In the next chapter, we will use the IoT use case as we did this time, but we
    will create a practical sample flow (application) on the cloud side (server side).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将像这次一样使用IoT用例，但我们将在云端（服务器端）创建一个实际的样本流程（应用程序）。
