- en: Chapter 7. Building User Interfaces
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。构建用户界面
- en: In this chapter, you will learn how to add new and unique elements to and modify
    your current Ionic project from a practical point of view. Among other things,
    I will show you how to modify the tab icons and add a new tab controller. This
    chapter will guide you and give you the necessary knowledge that is required to
    have a deep understanding of how to create and modify your own mobile applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将学习如何从实际角度向你当前的Ionic项目中添加新的独特元素并进行修改。除其他事项外，我将向你展示如何修改标签图标并添加新的标签控制器。这一章将指导你并提供必要的知识，以深入了解如何创建和修改你自己的移动应用程序。
- en: Most importantly, you will also get acquainted with the AngularJS JavaScript
    framework, which lies at the heart of the functionality of Ionic.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，你还将熟悉AngularJS JavaScript框架，它是Ionic功能的核心所在。
- en: The entire source code of this modified project is available on the GitHub repository,
    which can be viewed by visiting [https://github.com/stefanbuttigieg/nodejs-ionic-mongodb](https://github.com/stefanbuttigieg/nodejs-ionic-mongodb).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这个修改后的项目的整个源代码可以在GitHub存储库上找到，通过访问[https://github.com/stefanbuttigieg/nodejs-ionic-mongodb](https://github.com/stefanbuttigieg/nodejs-ionic-mongodb)进行查看。
- en: The structure of an Ionic project
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic项目的结构
- en: In the process of creating a project in the previous chapters, we created a
    directory entitled `myfirstionicapp`, which can be found in the root folder. We
    recommend that you open this project folder with an **Integrated Development Environment**
    (**IDE**) or a text editor. In our case, we are comfortable using Atom, which
    is an advanced open source text editor.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章创建项目的过程中，我们创建了一个名为`myfirstionicapp`的目录，它可以在根文件夹中找到。我们建议你使用**集成开发环境**（**IDE**）或文本编辑器打开这个项目文件夹。在我们的情况下，我们习惯使用Atom，这是一个先进的开源文本编辑器。
- en: Note
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can download Atom from [https://atom.io/](https://atom.io/).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[https://atom.io/](https://atom.io/)下载Atom。
- en: 'Once you open your IDE and add the project folder to your workspace, you will
    see the following folder structure:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你打开你的IDE并将项目文件夹添加到你的工作空间，你会看到以下文件夹结构：
- en: '![The structure of an Ionic project](img/B04653_07_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![Ionic项目的结构](img/B04653_07_01.jpg)'
- en: 'Let''s take a closer look at each of the folders shown in the preceding screenshot
    in turn:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们依次更仔细地看一下前面截图中显示的每个文件夹：
- en: '`hooks`: This folder is where our project will store automatically (or manually)
    generated hooks for the underlying Cordova system, which provides most of of our
    project''s runtime.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hooks`：这个文件夹是我们项目将自动生成（或手动生成）的Cordova系统的钩子的存储位置，它提供了我们项目的大部分运行时。'
- en: '`platforms`: This folder contains the necessary files and configurations that
    are required to deploy a project on a specific platform, such as Android or iOS.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`platforms`：这个文件夹包含部署到特定平台（如Android或iOS）所需的文件和配置。'
- en: '`plugins`: This stores the various Cordova plugins for our project. If you
    examine it closely, you will observe that it already contains a number of default
    plugins such as `com.ionic.keyboard`, which makes it easier to work with each
    platform''s native keyboard functionality.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plugins`：这个文件夹存储了我们项目的各种Cordova插件。如果你仔细检查，你会发现它已经包含了一些默认插件，比如`com.ionic.keyboard`，它使得更容易使用每个平台的本地键盘功能。'
- en: '`resources`: This contains global and platform-specific resources, such as
    app logos, splash screens, and so on.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resources`：这包含全局和特定平台的资源，如应用程序标志、启动画面等。'
- en: '`scss`: This contains the core **Sass** (**Syntactically Awesome Style Sheets**)
    files for our projects. By modifying these, we can extensively alter the appearance
    of our app on the various platforms that it targets.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scss`：这个文件夹包含我们项目的核心**Sass**（**Syntactically Awesome Style Sheets**）文件。通过修改这些文件，我们可以广泛地改变我们应用程序在各个目标平台上的外观。'
- en: '`www`: This is the folder that you will find yourself working with more than
    any other folder.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`www`：这是你将会发现自己与之一起工作最多的文件夹。'
- en: 'If you have previously worked with web apps, its contents will be familiar
    to you:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前曾经使用过Web应用程序，它的内容对你来说会很熟悉：
- en: '`css`: This contains the CSS files for your app.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`css`：这个文件夹包含你应用程序的CSS文件。'
- en: '`img`: This contains the static images for your app.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`img`：这个文件夹包含你应用程序的静态图像。'
- en: '`js`: This contains the JavaScript files for your app. This is also where most
    of your custom application logic will reside.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`js`：这个文件夹包含你应用程序的JavaScript文件。这也是大部分自定义应用程序逻辑的所在地。'
- en: '`lib`: This contains third-party libraries and applications that can be used
    in your project. Among other things, this folder contains AngularJS itself, along
    with its associated dependencies.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lib`：这个文件夹包含可以在你的项目中使用的第三方库和应用程序。这个文件夹包含了AngularJS本身以及它的相关依赖项。'
- en: '`templates`: This contains the AngularJS template files, which are HTML files
    that may contain AngularJS-specific content, such as data bindings and directives
    (don''t worry, we will explain what these are in a bit).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates`：这个文件夹包含AngularJS模板文件，这些是可能包含AngularJS特定内容的HTML文件，比如数据绑定和指令（别担心，我们一会儿会解释这些是什么）。'
- en: As mentioned earlier, your own work will predominantly be confined to the `www`
    folder. This makes sense, since the projects that we create with Ionic are actually
    a special breed of web apps that are customized to run on mobile devices.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，你自己的工作主要集中在`www`文件夹中。这是有道理的，因为我们用Ionic创建的项目实际上是一种定制化运行在移动设备上的Web应用程序。
- en: Now that we are familiar with the structure of our project, let's dip our toes
    into AngularJS, the framework that makes it all work. It only gets better.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们熟悉了项目的结构，让我们深入了解AngularJS，这个使一切运转的框架。它只会变得更好。
- en: Introducing AngularJS
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍AngularJS
- en: Ionic is powered by the AngularJS framework (which is also commonly just called
    Angular), which drives the UI interactions, gestures, animations, and well, essentially
    the entire functionality of your app. Understanding it is crucial to the experience
    of working with Ionic.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic由AngularJS框架（通常也被简称为Angular）驱动，它驱动UI交互、手势、动画，以及实际上应用程序的整个功能。理解它对于使用Ionic至关重要。
- en: Angular was initially developed by Google in 2009 in an effort to enhance HTML
    with dynamic data binding at the tag level (the name **Angular** refers to the
    **angular brackets** around the HTML tags). Its architectural philosophy is firmly
    grounded in the **Model-View-Controller** (**MVC**) pattern and centered around
    an augmented HTML syntax for building UIs and a feature-rich, modular core framework
    to create business logic.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Angular最初是由Google在2009年开发的，旨在通过标签级别的动态数据绑定来增强HTML（**Angular**的名称指的是HTML标签周围的**角括号**）。它的架构哲学牢固地基于**模型-视图-控制器**（**MVC**）模式，并围绕增强的HTML语法用于构建UI和一个功能丰富的模块化核心框架来创建业务逻辑。
- en: Due to its extensive nature, writing a concise introduction to Angular is not
    easy. As we work our way through the coming chapters, we will gradually go deeper
    and increase our knowledge of the framework. Here, we will settle for an outline
    of the most important aspects of AngularJS so that you can understand how these
    aspects work in the context of Ionic.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其广泛的性质，编写简洁的Angular介绍并不容易。随着我们逐步深入并增加对框架的了解，我们将逐渐深入。在这里，我们将简要介绍AngularJS的最重要方面，以便您了解这些方面在Ionic上的工作方式。
- en: The structure of an Angular app
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular应用程序的结构
- en: As we work our way through this chapter and the ones that follow, you will very
    quickly realize that what you are building with Ionic are actually augmented Angular
    apps that are designed for mobile devices. Since this is the case, it is crucial
    that you understand how Angular apps are structured.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们逐步深入本章和后续章节，您将很快意识到，您使用Ionic构建的实际上是为移动设备设计的增强型Angular应用程序。因为这是这种情况，您必须了解Angular应用程序的结构。
- en: Modules
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块
- en: The most fundamental module of an Angular app is, well, the module. A **module**
    is a collection of **services**, **controllers**, and **directives**, which provide
    some specific functionality to your app. In fact, your Angular app is itself a
    module!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Angular应用程序最基本的模块是，嗯，模块。**模块**是一组**服务**、**控制器**和**指令**，为您的应用程序提供一些特定功能。实际上，您的Angular应用程序本身就是一个模块！
- en: 'Defining a module is rather simple:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个模块相当简单：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This creates a `module` named `starter`. The second argument is meant to contain
    a list of dependencies (more on this will be discussed later). This argument is
    left empty if the module does not depend on any other modules.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个名为`starter`的`module`。第二个参数应包含一个依赖项列表（稍后将讨论更多）。如果模块不依赖于任何其他模块，则将此参数留空。
- en: Modules within modules within modules
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块内的模块内的模块
- en: Modules can load other modules, incorporating their functionality into their
    own. This makes it very easy for developers to write and share utility modules,
    which can be used by other developers in their own apps (at the time of writing
    this book, there are literally tens of thousands of such modules hosted on GitHub,
    with many under active development).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 模块可以加载其他模块，将它们的功能合并到自己的功能中。这使开发人员可以很容易地编写和共享实用模块，其他开发人员可以在自己的应用程序中使用（在撰写本书时，GitHub上托管了成千上万个此类模块，其中许多正在积极开发中）。
- en: 'Remember those empty brackets in the example that we saw just a bit earlier?
    This is where you list all the modules the current module should load for its
    own use. For example, in our Ionic apps, the `ionic` module is a fundamental component
    that we always want with us:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们刚才看到的示例中的空括号吗？这是您列出当前模块应加载的所有模块的地方，以供其自身使用。例如，在我们的Ionic应用中，`ionic`模块是一个基本组件，我们总是希望随身携带：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, whenever this module is loaded, Angular will automatically load its dependencies
    with it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当加载此模块时，Angular将自动加载其依赖项。
- en: Services, controllers, and other beasts
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务、控制器和其他“野兽”
- en: As mentioned before, the Angular modules contain other components, which provide
    various kinds of functionality to the app. Detailing them here would just clutter
    things, so we will introduce them as we go along (if not here, then in the later
    chapters, where they are needed). For now, it is sufficient that you just know
    that they exist and they together make up the functionality of an Angular module.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Angular模块包含其他组件，为应用程序提供各种功能。在这里详细介绍它们只会使事情变得混乱，因此我们将在逐步介绍它们（如果不是在这里，那么在后面的章节中，当需要它们时）。
- en: The Angular MVC pattern
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular MVC模式
- en: Now that we have a better understanding of how an Angular app is structured,
    it is time to look at how it actually works during runtime.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对Angular应用程序的结构有了更好的理解，是时候看看它在运行时实际是如何工作的了。
- en: 'The functionality of an Angular app revolves around the following three core
    concepts:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Angular应用程序的功能围绕以下三个核心概念展开：
- en: The **view** is what the user sees and the medium through which the user primarily
    interacts with and reads output from your application.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**视图**是用户看到的，也是用户主要与之交互和从应用程序中读取输出的媒介。'
- en: The **controller** responds to the user interaction with the application and
    communicates with the model in order to produce appropriate data. It then updates
    the view to reflect that data.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**控制器**响应用户与应用程序的交互，并与模型通信以生成适当的数据。然后更新视图以反映这些数据。'
- en: The **model** is a collection of data, libraries, services, and other things
    that make up your application's business logic. The model is responsible for the
    heavy processing in your app, and it is usually where most of your code will reside.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**模型**是应用程序业务逻辑的数据、库、服务和其他组成部分的集合。模型负责应用程序中的重要处理，并且通常是大部分代码所在的地方。'
- en: These three concepts make up the MVC pattern—model-view-controller. This is
    a very popular design pattern for modern web apps.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个概念构成了MVC模式——模型-视图-控制器。这是现代Web应用程序非常流行的设计模式。
- en: Now that we know how an Angular app functions, let's see how it realizes each
    of these three concepts.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了Angular应用程序的功能，让我们看看它是如何实现这三个概念的。
- en: The view
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视图
- en: 'In an Angular app, the view is composed predominantly of standard HTML, which
    is augmented by Angular-specific components in order to facilitate dynamic updates.
    The following are the two primary components:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular应用程序中，视图主要由标准的HTML组成，通过Angular特定的组件来实现动态更新。以下是两个主要组件：
- en: '**Directives**: These are the custom HTML tags, whose function and behavior
    are defined from within AngularJS but written like plain HTML. For example, a
    tag like the following can be a directive that draws a map centered on a specific
    latitude and longitude:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指令**：这些是自定义的HTML标签，其功能和行为是在AngularJS内部定义的，但像普通的HTML一样编写。例如，像下面这样的标签可以是一个在特定纬度和经度上绘制地图的指令：'
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Expressions**: These are the expressions that are surrounded by double curly
    braces, which evaluate to a given value during the runtime of the application.
    Unless specified otherwise, the output of an expression will be updated as soon
    as the model of the application changes. The following is an example of such an
    expression:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表达式**：这些是由双大括号括起来的表达式，它们在应用程序运行时评估为给定的值。除非另有说明，否则表达式的输出将在应用程序的模型更改时立即更新。以下是这样一个表达式的例子：'
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding expression does something that is very common in Angular—resolve
    the value of some object's member. However, to do so, we first need to define
    where that object can be found. This is where controllers come into the picture.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的表达式做了一件在Angular中非常常见的事情——解析某个对象成员的值。但是，为了这样做，我们首先需要定义该对象的位置。这就是控制器出现的地方。
- en: The controller
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制器
- en: 'In an Angular app, the **controller** is realized by special module components,
    which are fittingly called controllers. You can define them in a module in the
    following way:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular应用程序中，**controller**由特殊的模块组件实现，这些组件被称为控制器。您可以按照以下方式在模块中定义它们：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first parameter is the name of the `controller`. The second parameter is
    a `function` that defines what the controller actually does. This `function` can
    take a variable number of arguments, which represent the dependencies that the
    controller will use, much like the way we defined dependencies for modules earlier.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是`controller`的名称。第二个参数是定义控制器实际功能的`function`。这个`function`可以接受可变数量的参数，这些参数代表控制器将使用的依赖项，就像我们之前为模块定义依赖项的方式一样。
- en: The model
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模型
- en: Broadly speaking, the **model** is *everything else* in your app. It is the
    sum total of the data models. Throughout the following chapters, we will gradually
    explore the various components that you can use to compose your model.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 广义上说，**模型**是您的应用程序中的*其他所有内容*。它是数据模型的总和。在接下来的章节中，我们将逐渐探索您可以用来组成模型的各种组件。
- en: Putting it all together
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 把它们放在一起
- en: Let's finish our brief tour of Angular by showing how to connect the various
    components that we have seen so far.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过展示如何连接到目前为止看到的各种组件来完成对Angular的简要介绍。
- en: 'Consider a situation where you first navigate to the `index.html`, which is
    available at the following path `myfirstionicapp/www/index.html`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这样一种情况，您首先导航到以下路径可用的`index.html`：`myfirstionicapp/www/index.html`：
- en: 'When you navigate here, you will observe the following block of code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当您导航到这里时，您会看到以下代码块：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This block of code determines the header bar of the application, and this is
    one of the examples of the **User Interface** (**UI**) components, which can be
    managed through HTML5.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码确定了应用程序的标题栏，这是**用户界面**（**UI**）组件的一个例子，可以通过HTML5进行管理。
- en: For documentation and reference purposes, you can refer to the Ionic UI components
    at [http://ionicframework.com/docs/components](http://ionicframework.com/docs/components).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有关文档和参考目的，您可以参考Ionic UI组件[http://ionicframework.com/docs/components](http://ionicframework.com/docs/components)。
- en: 'As you further explore your project, you will see that the main controllers
    that will power the interactive functionality of your project are available at
    the following path:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当您进一步探索您的项目时，您会发现将为项目的交互功能提供动力的主要控制器位于以下路径：
- en: '**myfirstionicapp** | **js** | **controllers.js**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**myfirstionicapp** | **js** | **controllers.js**'
- en: Modifying an Ionic project
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改Ionic项目
- en: In order to build upon the knowledge that we have gained and the work that we
    have previously done, we will modify the user interface of the project that we
    previously created. We will start off by modifying the header.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了建立在我们之前获得的知识和之前完成的工作的基础上，我们将修改之前创建的项目的用户界面。我们将从修改标题开始。
- en: Modifying the header
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改标题
- en: Let's say that we would like to change the header bar to a calm blue color.
    Navigate to the `index.html` file available at **www** | **index.html**.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想将标题栏更改为宁静的蓝色。转到**www** | **index.html**中可用的`index.html`文件。
- en: 'Refer to the `body` block, and using the reference UI components, change the
    `ion-nav-bar` class to the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 参考`body`块，并使用参考UI组件，将`ion-nav-bar`类更改为以下内容：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Modifying the tab colour, icons, and names
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改标签颜色、图标和名称
- en: 'Since we have decided to change the header color, we will go ahead and modify
    the tab bar to make its color match the header color. We should first navigate
    to the `tabs.html`, file which is available at **www** | **templates** | **tabs.html**,
    and change the `ion-tabs` class to the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们决定更改标题颜色，我们将继续修改选项卡栏，使其颜色与标题颜色匹配。我们首先应该转到**www** | **templates** | **tabs.html**中可用的`tabs.html`文件，并将`ion-tabs`类更改为以下内容：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `icons` need to be further modified to contrast with the new `blue` color.
    So, we will further modify the `ion-tabs` class to the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`图标`需要进一步修改以与新的`蓝色`对比。因此，我们将进一步修改`ion-tabs`类如下：'
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We will take a step further and attempt to change the icon's graphic. Let's
    say that we would like to change the dashboard icon to something that looks more
    circular.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将进一步尝试更改图标的图形。假设我们想将仪表板图标更改为看起来更圆形的东西。
- en: First of all, we need to refer to the Ionicons documentation, which is available
    at [http://ionicons.com/cheatsheet.html](http://ionicons.com/cheatsheet.html),
    and find out the class name in relation to the circular analytics icon. For this
    example, we will use `ion-ios-analytics`. When we want the user to tap on the
    icon and activate the dashboard, we want the icon to be highlighted, whereas when
    it's not active, we need the user to see an outline of the icon. In order to achieve
    this, we will need to declare the icons that will be used in both an active and
    inactive state.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要参考Ionicons文档，该文档可在[http://ionicons.com/cheatsheet.html](http://ionicons.com/cheatsheet.html)找到，并找出与圆形分析图标相关的类名。在这个例子中，我们将使用`ion-ios-analytics`。当我们希望用户点击图标并激活仪表板时，我们希望图标被突出显示，而当它不活动时，我们需要用户看到图标的轮廓。为了实现这一点，我们需要声明将在活动和非活动状态下使用的图标。
- en: 'In order to do this, we will navigate to the `tabs.html` file and modify the
    `Dashboard` tab icon in the following way:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将导航到`tabs.html`文件，并以以下方式修改`Dashboard`标签图标：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Modifying our pages
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改我们的页面
- en: In this particular example, we will edit the dashboard page, where we will modify
    the content of the **list card** UI components.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的例子中，我们将编辑仪表板页面，我们将修改**list card** UI组件的内容。
- en: The modification of the dashboard is possible by navigating to the `tab-dash.html`
    file, where we will see the different cards declared in the `div` class of the
    `list card`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通过导航到`tab-dash.html`文件，我们可以修改仪表板。在`div`类的`list card`中声明了不同的卡。
- en: 'The `list card` is declared as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`list card`声明如下：'
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'By using the Ionic framework, it''s possible to include a footer to your card.
    In our case, we will add a footer to the `Health` list card, declaring that the
    user has walked `10,000` steps today. In order to do this, we will add an `item-divider`
    class, thus modifying the `list card` as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用Ionic框架，可以将页脚包含到您的卡中。在我们的例子中，我们将在`Health`列表卡中添加一个页脚，声明用户今天走了`10,000`步。为此，我们将添加一个`item-divider`类，从而修改`list
    card`如下：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'All the modifications that you made until now will result in a **Dashboard**
    tab, which will look like the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您所做的所有修改将导致一个**仪表板**标签，它将看起来像以下截图：
- en: '![Modifying our pages](img/B04653_07_02.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![修改我们的页面](img/B04653_07_02.jpg)'
- en: Adding a new tab
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个新标签
- en: In this project, we would like to add a new tab that highlights the developers
    of this application. This will inform the potential users of this app about how
    to get in touch with the developers to provide them with the necessary feedback
    to improve the app experience.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们想要添加一个新的标签，以突出显示这个应用程序的开发者。这将告知潜在用户如何与开发者取得联系，以提供他们改进应用体验所需的必要反馈。
- en: 'In order to achieve this, we''ll need to perform the following four main steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们需要执行以下四个主要步骤：
- en: Create a new controller entry in `controllers.js`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`controllers.js`中创建一个新的控制器条目。
- en: Create a new tab controller called `tab-about` in HTML.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在HTML中创建一个名为`tab-about`的新标签控制器。
- en: Add a new tab entry in the `tabs.html` file.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tabs.html`文件中添加一个新的标签条目。
- en: Consolidate our work in the `app.js` file and connect everything together.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app.js`文件中巩固我们的工作并将所有内容连接起来。
- en: Creating a new controller
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新的控制器
- en: 'Let''s start with adding a controller for the new tab. Head over to `controllers.js`
    and add the following into it:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从为新标签添加一个控制器开始。转到`controllers.js`并添加以下内容：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Don't worry about the empty function for now. At the moment, our tab does not
    need any functionality apart from simply appearing.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不要担心空函数。目前，我们的标签除了简单出现外不需要任何功能。
- en: Creating a view
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个视图
- en: 'Now that we have a controller, we need to implement the view for the new tab.
    The first order of business is to make sure that the tab is added to the list
    of tabs. To do so, modify `tabs.html` to include the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个控制器，我们需要为新标签实现视图。首要任务是确保标签已添加到标签列表中。为此，修改`tabs.html`以包括以下内容：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This creates the fundamental bindings for the new tab and adds it to the list
    of tabs. However, we will still need to add the content that should open when
    the user clicks on the tab. To do so, create a new file called `tab-about.html`
    in the `templates` folder and put the following code in it:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为新标签创建基本绑定并将其添加到标签列表中。但是，我们仍然需要添加用户点击标签时应该打开的内容。为此，在`templates`文件夹中创建一个名为`tab-about.html`的新文件，并将以下代码放入其中：
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Adding a state for the new tab
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为新标签添加一个状态
- en: 'Next, we need to add a new navigation state to the `controller` in order to
    allow the user to navigate, with the help of clicks, to the `tab-about.html` tabs
    content page. To do so, open the `app.js` file and add the following state:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在`controller`中添加一个新的导航状态，以便允许用户通过点击导航到`tab-about.html`标签内容页面。为此，打开`app.js`文件并添加以下状态：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Note that the following is what the preceding code does:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，前面的代码所做的是：
- en: The `url` property determines whether the application enters into the state
    of accessing the `/about` URL.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`属性确定应用程序是否进入访问`/about` URL的状态。'
- en: Inside the `views` property we determine the path to the `view`, which should
    be loaded when this application enters into the `view` state. In this case, it
    is the `tab-about.html` file that we created earlier.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`views`属性中，我们确定了应用程序进入`view`状态时应加载的`view`的路径。在这种情况下，就是我们之前创建的`tab-about.html`文件。
- en: Finally, inside `views`, we also determine which `controller` is responsible
    for handling this application state. In our case, it is the `AboutCtrl` controller,
    which was defined by us earlier.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，在`views`中，我们还确定哪个`controller`负责处理这个应用程序状态。在我们的例子中，它是我们之前定义的`AboutCtrl`控制器。
- en: Testing the newly created tab
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试新创建的标签
- en: 'Quick testing is possible through your local browser. Once you save your project
    files with your IDE, you will be able to see your app in the prototype form through
    your browser:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本地浏览器可以进行快速测试。一旦您用IDE保存了项目文件，您就可以通过浏览器以原型形式看到您的应用程序：
- en: 'First navigate to the project folder:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先导航到项目文件夹：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, type in the follow command:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，输入以下命令：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The results for this are shown in the following screenshot. These results are
    adapted for both iOS and Android. In addition to this, you''ll be able to test
    your application through a point-and-click interface. This experience is similar
    to having an iOS or Android emulator working through a browser:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这些结果显示在下面的截图中。这些结果适用于iOS和Android。除此之外，您还可以通过点按式界面测试您的应用程序。这种体验类似于在浏览器中使用iOS或Android模拟器：
- en: '![Testing the newly created tab](img/B04653_07_03.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![测试新创建的标签](img/B04653_07_03.jpg)'
- en: Going further
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更进一步
- en: The importance of setting out your layout and user experience before you start
    off with any project is crucial. This will enhance your user experience, and it
    will be even more helpful not only while laying out the necessary project structure,
    but also throughout the programming process.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始任何项目之前，设置布局和用户体验的重要性至关重要。这将增强用户体验，不仅在制定必要的项目结构时更有帮助，而且在整个编程过程中也更有帮助。
- en: You can further customize the look and feel of your application by using Sass.
    Sass is marketed as being the most mature, stable and powerful professional **grade
    CSS extension language**, and it allows you to further customize your project.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用Sass进一步自定义应用程序的外观和感觉。Sass被宣传为最成熟、稳定和功能强大的专业**级CSS扩展语言**，它允许您进一步定制您的项目。
- en: In order to improve your knowledge of AngularJS, we recommend that you check
    out a free video resource, which is available at [http://campus.codeschool.com/courses/shaping-up-with-angular-js](http://campus.codeschool.com/courses/shaping-up-with-angular-js),
    [http://campus.codeschool.com/courses/shaping-up-with-angular-js](http://campus.codeschool.com/courses/shaping-up-with-angular-js).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高您对AngularJS的了解，我们建议您查看一个免费的视频资源，可在[http://campus.codeschool.com/courses/shaping-up-with-angular-js](http://campus.codeschool.com/courses/shaping-up-with-angular-js)上找到。
- en: The aforementioned course is sponsored by Google and is available for free for
    anyone who would like to dive deeper into AngularJS. Experimenting with different
    Ionic user components has become easier than ever, especially with the recent
    **Playground** tools that are available in **Ionic Playground**, which is available
    at [http://play.ionic.io](http://play.ionic.io).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 上述课程由Google赞助，对于任何希望深入了解AngularJS的人都可以免费使用。尤其是随着最近在Ionic Playground中提供的**Playground**工具的推出，使用不同的Ionic用户组件变得比以往更容易，该工具可在[http://play.ionic.io](http://play.ionic.io)上使用。
- en: 'From the Android point of view, in order to take your project to the next level,
    there is a free library available, which can be used to integrate the latest iteration
    of Google''s interactive Material design by installing the Ionic Material library.
    This can easily be installed by first ensuring that you have bower installed and
    then navigating to your project folder and inputting the following command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 从Android的角度来看，为了将您的项目提升到一个新的水平，有一个免费的库可用，可以通过安装Ionic Material库来集成Google最新的交互式Material设计的最新版本。首先确保您已经安装了bower，然后导航到您的项目文件夹，并输入以下命令来轻松安装：
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We are hopeful that with this chapter, you will start experimenting with your
    very own projects while staying in line with providing remarkable user experience
    with the current knowledge that you've gained until now. In the next chapter,
    we'll take a step further.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望通过这一章，您将开始尝试自己的项目，同时保持与您迄今为止所获得的知识相一致，提供出色的用户体验。在下一章中，我们将更进一步。
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we took the template project that we created in the past few
    chapters and modified it to something closer to what we envisioned by modifying
    the appearance of the user interface. In addition to this, we also started experimenting
    with the Ionic project code to better understand what the project is made up of.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们拿过去几章创建的模板项目，并通过修改用户界面的外观，将其修改为更接近我们设想的东西。除此之外，我们还开始尝试Ionic项目代码，以更好地理解项目的组成部分。
- en: Furthermore, we provided you with the basic knowledge to start prototyping your
    Ionic application within the browser.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们为您提供了在浏览器中开始原型设计您的Ionic应用程序的基本知识。
