- en: Implementing the Reflect API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现 Reflect API
- en: 'The Reflect API is used for object reflection (that is, inspecting and manipulating
    the properties of objects). Although ES5 already had APIs for object reflection,
    these APIs were not well organized and, on failure, used to throw an exception.
    The Reflect API is well organized and makes it easier to read and write code,
    as it doesn''t throw exceptions on failure. Instead, it returns the Boolean value,
    representing if the operation was true or false. Since developers are adapting
    to the Reflect API for object reflection, it''s important to learn this API in
    depth. In this chapter, we''ll cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Reflect API 用于对象反射（即检查和操作对象的属性）。尽管 ES5 已经有了对象反射的 API，但这些 API 组织得不好，并且在失败时通常会抛出异常。Reflect
    API 组织得很好，使得代码的阅读和编写更加容易，因为它在失败时不会抛出异常。相反，它返回表示操作是否为真的布尔值。由于开发人员正在适应 Reflect API
    进行对象反射，因此深入了解此 API 非常重要。在本章中，我们将涵盖：
- en: Calling a function with a given `this` value
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用给定的 `this` 值调用函数
- en: Invoking a constructor with the prototype property of another constructor
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用另一个构造函数的原型属性调用构造函数
- en: Defining or modifying the attributes of the object properties
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义或修改对象属性的属性
- en: Enumerating the properties of an object using an iterator object
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用迭代器对象枚举对象的属性
- en: Retrieving and setting the internal [[prototype]] property of an object
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取和设置对象的内部 [[原型]] 属性
- en: A lot of other operations related to inspecting and manipulating methods and
    properties of objects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多与检查和操作对象方法和属性相关的其他操作
- en: The Reflect object
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Reflect 对象
- en: The global `Reflect` object exposes all the new methods for object reflection.
    `Reflect` is not a function object; therefore, you cannot invoke the `Reflect`
    object. Also, you cannot use it with the `new` operator. All the methods of the
    Reflect API are wrapped in the `Reflect` object to make it look well organized.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 全局 `Reflect` 对象公开了所有新的对象反射方法。`Reflect` 不是一个函数对象；因此，你不能调用 `Reflect` 对象。此外，你不能使用它与
    `new` 操作符一起使用。Reflect API 的所有方法都被封装在 `Reflect` 对象中，使其看起来组织良好。
- en: The `Reflect` object provides many methods, which overlap with the global object's
    methods in terms of functionality. Let's see the various methods provided by the
    `Reflect` object for object reflection.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect` 对象提供了许多方法，在功能上与全局对象的方法重叠。让我们看看 `Reflect` 对象为对象反射提供的各种方法。'
- en: The Reflect.apply(function, this, args) method
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Reflect.apply(function, this, args) 方法
- en: 'The `Reflect.apply()` method is used to invoke a function with a given `this`
    value. The function invoked by `Reflect.apply()` is called as the target function.
    It''s the same as the `apply()` method of the function object. The `Reflect.apply()`
    method takes three arguments:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Reflect.apply()` 方法来调用具有给定 `this` 值的函数。由 `Reflect.apply()` 调用的函数称为目标函数。它与函数对象的
    `apply()` 方法相同。`Reflect.apply()` 方法接受三个参数：
- en: The first argument represents the target function.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数代表目标函数。
- en: The second argument represents the value of `this` inside the target function.
    This argument is optional.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数表示目标函数内部的 `this` 值。此参数是可选的。
- en: The third argument is an array object, specifying the arguments of the target
    function. This argument is optional.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数是一个数组对象，指定目标函数的参数。此参数是可选的。
- en: 'The `Reflect.apply()` method returns whatever the target function returns.
    Here is a code example to demonstrate how to use the `Reflect.apply()` method:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.apply()` 方法返回目标函数返回的任何内容。以下是一个代码示例，演示如何使用 `Reflect.apply()` 方法：'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Reflect.construct(constructor, args, prototype) method
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Reflect.construct(constructor, args, prototype) 方法
- en: The `Reflect.construct()` method is used to invoke a function as a constructor.
    It's similar to the `new` operator. The function that will be invoked is called
    as the target constructor.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.construct()` 方法用于将函数作为构造函数调用。它与 `new` 操作符类似。将要调用的函数称为目标构造函数。'
- en: One special reason why you may want to use the `Reflect.construct()` method
    instead of the `new` operator is that you can target the constructor's prototype
    to match the prototype of another constructor.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想要使用 `Reflect.construct()` 方法而不是 `new` 操作符的一个特殊原因是，你可以将构造函数的原型指向另一个构造函数的原型。
- en: 'The `Reflect.construct()` method takes three arguments:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.construct()` 方法接受三个参数：'
- en: The first argument is the target constructor.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是目标构造函数。
- en: The second argument is an array, specifying the arguments of the target constructor.
    This argument is optional.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数是一个数组，指定目标构造函数的参数。此参数是可选的。
- en: The third argument is another constructor whose prototype will be used as the
    prototype of the target constructor. This argument is optional. The `Reflect.construct()`
    method returns the new instance created by the target constructor.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数是另一个构造函数，其原型将被用作目标构造函数的原型。此参数是可选的。`Reflect.construct()` 方法返回由目标构造函数创建的新实例。
- en: 'Here is the code example, to demonstrate how to use the `Reflect.constructor()`
    method:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是代码示例，以演示如何使用 `Reflect.constructor()` 方法：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding example, we used the prototype chain of `consturctor2` as the
    prototype of `constructor1` while invoking `constructor1`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们在调用 `constructor1` 时使用了 `constructor2` 的原型链作为 `constructor1` 的原型。
- en: The Reflect.defineProperty(object, property, descriptor) method
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Reflect.defineProperty(object, property, descriptor)` 方法'
- en: The `Reflect.defineProperty()` method defines a new property directly on an
    object or modifies an existing property on an object. It returns a Boolean value
    indicating whether the operation was successful or not.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.defineProperty()` 方法直接在对象上定义新属性或修改对象上的现有属性。它返回一个布尔值，表示操作是否成功。'
- en: 'It''s similar to the `Object.defineProperty()` method. The difference is that
    the `Reflect.defineProperty()` method returns a Boolean, whereas the `Object.
    defineProperty()` returns the modified object. If the `Object.defineProperty()`
    method fails to modify or define an object property, then it throws an exception,
    whereas the `Reflect.defineProperty()` method returns a `false` result. The `Reflect.defineProperty()`
    method takes in three arguments:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 它与 `Object.defineProperty()` 方法类似。区别在于 `Reflect.defineProperty()` 方法返回一个布尔值，而
    `Object.defineProperty()` 返回修改后的对象。如果 `Object.defineProperty()` 方法无法修改或定义对象属性，则抛出异常，而
    `Reflect.defineProperty()` 方法返回一个 `false` 结果。`Reflect.defineProperty()` 方法接受三个参数：
- en: The first argument is the object that is used to define or modify a property
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是要定义或修改属性的使用的对象
- en: The second argument is the symbol or name of the property that is to be defined
    or modified
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数是要定义或修改的属性的符号或名称
- en: The third argument is the descriptor for the property that is being defined
    or modified
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数是要定义或修改的属性的描述符
- en: Understanding the data properties and accessor properties
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解数据属性和访问器属性
- en: Since ES5, every object property is either a data property or an accessor property.
    A data property has a value, which may or may not be writable, whereas an accessor
    property has a getter-setter pair of functions to set and retrieve the property
    value.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 自从ES5以来，每个对象属性要么是数据属性，要么是访问器属性。数据属性有一个值，这个值可能是可写的，也可能不可写，而访问器属性有一对getter-setter函数来设置和检索属性值。
- en: The attributes of a data property are `value`, `writable`, `enumerable`, and
    `configurable`. On the other hand, the attributes of an accessor property are
    `set`, `get`, `enumerable`, and `configurable`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 数据属性的特性有 `value`、`writable`、`enumerable` 和 `configurable`。另一方面，访问器属性的特性有 `set`、`get`、`enumerable`
    和 `configurable`。
- en: A descriptor is an object that describes the attributes of a property. When
    creating a property using the `Reflect.defineProperty()` method, the `Object.
    defineProperty()` method, the `Object.defineProperties()` method, or the `Object.create()`
    method, we need to pass a descriptor for the property.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 描述符是一个对象，用于描述属性的属性。当使用 `Reflect.defineProperty()` 方法、`Object.defineProperty()`
    方法、`Object.defineProperties()` 方法或 `Object.create()` 方法创建属性时，我们需要传递一个属性描述符。
- en: 'A data property''s descriptor object has the following properties:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 数据属性的描述符对象具有以下属性：
- en: '**Value:** This is the value associated with the property. The default value
    is `undefined`.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Value:** 这是与属性关联的值。默认值是 `undefined`。'
- en: '**Writable:** If this is `true`, then the property value can be changed with
    an assignment operator. The default value is `false`.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Writable:** 如果这是 `true`，则可以使用赋值运算符更改属性值。默认值是 `false`。'
- en: '**Configurable:** If this is `true`, then the property attributes can be changed,
    and the property may be deleted. The default value is `false`. Remember, when
    the configurable attribute is `false` and the writable is `true`, the value and
    the writable attributes can be changed.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Configurable:** 如果这是 `true`，则可以更改属性属性，并且可以删除属性。默认值是 `false`。记住，当可配置属性为 `false`
    且可写为 `true` 时，可以更改值和可写属性。'
- en: '**Enumerable:** If this is `true`, then the property shows up in the `for…in`
    loop and the `Object.keys()` method. The default value is `false`.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Enumerable:** 如果这是 `true`，则该属性会在 `for…in` 循环和 `Object.keys()` 方法中出现。默认值是
    `false`。'
- en: 'An accessor property''s descriptor has the following properties:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 访问器属性的描述符具有以下属性：
- en: '**Get:** This is a function that returns the property value. The function has
    no parameters and the default value is `undefined`.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取：** 这是一个返回属性值的函数。该函数没有参数，默认值是 `undefined`。'
- en: '**Set:** This is a function that sets the property value. The function will
    receive the new value that is being assigned to the property.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置：** 这是一个设置属性值的函数。该函数将接收分配给属性的新的值。'
- en: '**Configurable:** If this is `true`, then the property descriptor can be changed
    and the property may be deleted. The default value is `false`.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可配置：** 如果这是 `true`，则可以更改属性描述符，并且属性可以被删除。默认值是 `false`。'
- en: '**Enumerable:** If this is `true`, then the property shows up in the `for…in`
    loop and the `Object.keys()` method. The default value is `false`.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可枚举：** 如果这是 `true`，则该属性会在 `for…in` 循环和 `Object.keys()` 方法中出现。默认值是 `false`。'
- en: Depending on the properties of the descriptor object, JavaScript decides whether
    the property is a data property or an accessor property.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 根据描述符对象的属性，JavaScript 决定属性是数据属性还是访问器属性。
- en: If you add a property without using the `Reflect.defineProperty()` method, the
    `Object.defineProperty()` method, the `Object.defineProperties()` method, or the
    `Object.create()` method, then the property is a data property and the writable,
    enumerable, and configurable attributes are all set to `true`. After the property
    is added, you can modify its attributes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有使用 `Reflect.defineProperty()` 方法、`Object.defineProperty()` 方法、`Object.defineProperties()`
    方法或 `Object.create()` 方法添加属性，那么该属性是一个数据属性，其可写性、可枚举性和可配置性属性都被设置为 `true`。属性添加后，你可以修改其属性。
- en: If an object already has a property with the specified name while calling the
    `Reflect.defineProperty()` method, the `Object.defineProperty()` method, or the
    `Object.defineProperties()` method, then the property is modified. The attributes
    that are not specified in the descriptor remain the same.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在调用 `Reflect.defineProperty()` 方法、`Object.defineProperty()` 方法或 `Object.defineProperties()`
    方法时，对象已经具有指定的属性，则属性将被修改。描述符中未指定的属性保持不变。
- en: You can change a data property to an accessor property, and vice versa. If you
    do this, the configurable and enumerable attributes that are not specified in
    the descriptor will be preserved in the property. Other attributes that are not
    specified in the descriptor are set to their default values.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将数据属性更改为访问器属性，反之亦然。如果你这样做，描述符中未指定的可配置性和可枚举性属性将保留在属性中。描述符中未指定的其他属性将被设置为它们的默认值。
- en: 'Here is example code that demonstrates how to create a data property using
    the `Reflect.defineProperty()` method:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些示例代码，展示了如何使用 `Reflect.defineProperty()` 方法创建数据属性：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is more example code that demonstrates how to create an accessor property
    using the `Reflect.defineProperty()` method:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一些示例代码，展示了如何使用 `Reflect.defineProperty()` 方法创建访问器属性：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The Reflect.deleteProperty(object, property) method
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Reflect.deleteProperty(object, property)` 方法'
- en: The `Reflect.deleteProperty()` method is used to delete a property of an object.
    It's the same as the `delete` operator.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.deleteProperty()` 方法用于删除对象的属性。它与 `delete` 操作符相同。'
- en: This method takes two arguments--that is, the first argument is the reference
    to the object and the second argument is the name of the property to delete. The
    `Reflect. deleteProperty()` method returns `true` if it has deleted the property
    successfully. Otherwise, it returns `false`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受两个参数——即第一个参数是对象的引用，第二个参数是要删除的属性的名称。如果 `Reflect.deleteProperty()` 方法成功删除了属性，则返回
    `true`。否则，返回 `false`。
- en: 'Here is a code example that demonstrates how to delete a property using the
    `Reflect.deleteProperty()` method:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个代码示例，展示了如何使用 `Reflect.deleteProperty()` 方法删除属性：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The Reflect.get(object, property, this) method
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Reflect.get(object, property, this)` 方法'
- en: The `Reflect.get()` method is used to retrieve the value of an object's property.
    The first argument is the object and the second argument is the property name.
    If the property is an accessor property, then we can provide a third argument,
    which will be the value of `this` inside the `get` function.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.get()` 方法用于检索对象的属性值。第一个参数是对象，第二个参数是属性名。如果属性是访问器属性，则我们可以提供一个第三个参数，它将是
    `get` 函数内部的 `this` 的值。'
- en: 'Here is a code example that demonstrates how to use the `Reflect.get()` method:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个代码示例，展示了如何使用 `Reflect.get()` 方法：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The Reflect.set(object, property, value, this) method
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Reflect.set(object, property, value, this)` 方法'
- en: The `Reflect.set()` method is used to set the value of an object's property.
    The first argument is the object, the second argument is the property name, and
    the third argument is the property value. If the property is an accessor property,
    then we can provide a fourth argument, which will be the value of `this` inside
    the `set` function.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.set()` 方法用于设置对象的属性值。第一个参数是对象，第二个参数是属性名，第三个参数是属性值。如果属性是访问器属性，则我们可以提供一个第四个参数，它将是
    `set` 函数内部 `this` 的值。'
- en: The `Reflect.set()` method returns `true` if the property value was set successfully.
    Otherwise, it returns `false`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果属性值设置成功，`Reflect.set()` 方法返回 `true`。否则，它返回 `false`。
- en: 'Here is a code example that demonstrates how to use the `Reflect.set()` method:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个代码示例，演示了如何使用 `Reflect.set()` 方法：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Reflect.getOwnPropertyDescriptor(object, property) method
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Reflect.getOwnPropertyDescriptor(object, property)` 方法'
- en: The `Reflect.getOwnPropertyDescriptor()` method is used to retrieve the descriptor
    of an object's property.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.getOwnPropertyDescriptor()` 方法用于检索对象的属性描述符。'
- en: The `Reflect.getOwnPropertyDescriptor()` method is the same as the `Object.getOwnPropertyDescriptor()`
    method. The `Reflect. getOwnPropertyDescriptor()` method takes two arguments.
    The first argument is the object and the second argument is the property name.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.getOwnPropertyDescriptor()` 方法与 `Object.getOwnPropertyDescriptor()`
    方法相同。`Reflect.getOwnPropertyDescriptor()` 方法接受两个参数。第一个参数是对象，第二个参数是属性名。'
- en: 'Here is an example to demonstrate the `Reflect.getOwnPropertyDescriptor()`
    method:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例，演示了如何使用 `Reflect.getOwnPropertyDescriptor()` 方法：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output is the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The Reflect.getPrototypeOf(object) method
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Reflect.getPrototypeOf(object)` 方法'
- en: The `Reflect.getPrototypeOf()` method is used to retrieve the prototype of an
    object--that is, the value of the internal `[[prototype]]` property of an object.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.getPrototypeOf()` 方法用于检索对象的原型，即对象的内部 `[[prototype]]` 属性的值。'
- en: The `Reflect.getPrototypeOf()` method is the same as the `Object.getPrototypeOf()`
    method.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.getPrototypeOf()` 方法与 `Object.getPrototypeOf()` 方法相同。'
- en: 'Here is a code example that demonstrates how to use the `Reflect. getPrototypeOf()`
    method:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个代码示例，演示了如何使用 `Reflect.getPrototypeOf()` 方法：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The Reflect.setPrototypeOf(object, prototype) method
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Reflect.setPrototypeOf(object, prototype)` 方法'
- en: The `Reflect.setPrototypeOf()` is used to set the internal `[[prototype]]` property's
    value of an object. The `Reflect.setPrototypeOf()` method will return `true` if
    the internal `[[prototype]]` property's value was set successfully. Otherwise,
    it will return `false`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.setPrototypeOf()` 方法用于设置对象的内部 `[[prototype]]` 属性的值。如果成功设置内部 `[[prototype]]`
    属性的值，`Reflect.setPrototypeOf()` 方法将返回 `true`。否则，它将返回 `false`。'
- en: 'Here is a code example that demonstrates how to use it:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个代码示例，演示了如何使用它：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The Reflect.has(object, property) method
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Reflect.has(object, property)` 方法'
- en: The `Reflect.has()` is used to check if a property exists in an object. It also
    checks for the inherited properties. It returns `true` if the property exists.
    Otherwise, it returns `false`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.has()` 方法用于检查一个属性是否存在于对象中。它也会检查继承属性。如果属性存在，则返回 `true`。否则，返回 `false`。'
- en: It's the same as the `in` operator in JavaScript.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 它与 JavaScript 中的 `in` 操作符相同。
- en: 'Here is a code example that demonstrates how to use the `Reflect.has()` method:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个代码示例，演示了如何使用 `Reflect.has()` 方法：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The Reflect.isExtensible(object) method
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Reflect.isExtensible(object)` 方法'
- en: The `Reflect.isExtensible()` method is used to check if an object is extensible
    or not,--that is, if we can add new properties to an object.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.isExtensible()` 方法用于检查一个对象是否可扩展，即我们是否可以向对象添加新属性。'
- en: An object can be marked as non-extensible using the `Object.preventExtensions()`,
    `Object.freeze()`, and the `Object.seal()` methods.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `Object.preventExtensions()`、`Object.freeze()` 和 `Object.seal()` 方法将对象标记为不可扩展。
- en: The `Reflect.isExtensible()` method is the same as the `Object.isExtensible()`
    method.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.isExtensible()` 方法与 `Object.isExtensible()` 方法相同。'
- en: 'Here is a code example that demonstrates how to use the `Reflect.isExtensible()`
    method:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个代码示例，演示了如何使用 `Reflect.isExtensible()` 方法：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The Reflect.preventExtensions(object) method
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Reflect.preventExtensions(object)` 方法'
- en: The `Reflect.preventExtensions()` is used to mark an object as non-extensible.
    It returns a Boolean, indicating whether the operation was successful or not.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.preventExtensions()` 方法用于将对象标记为不可扩展。它返回一个布尔值，指示操作是否成功。'
- en: 'It''s the same as the `Object.preventExtensions()` method:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 它与 `Object.preventExtensions()` 方法相同：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The Reflect.ownKeys(object) method
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Reflect.ownKeys(object)` 方法'
- en: The `Reflect.ownKeys()` method returns an array whose values represent the keys
    of the properties of a provided object. It ignores the inherited properties.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reflect.ownKeys()` 方法返回一个数组，其值表示提供对象的属性键。它忽略继承的属性。'
- en: 'Here is the example code to demonstrate this method:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是演示此方法的示例代码：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned what object reflection is and how to use the Reflect
    API for object reflection. We saw various methods of the `Reflect` object with
    examples. Overall, this chapter introduced the Reflect API to inspect and manipulate
    the properties of objects. In the next chapter, we will learn about proxies and
    their uses.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了对象反射的概念以及如何使用 Reflect API 进行对象反射。我们通过示例看到了 `Reflect` 对象的各种方法。总的来说，本章介绍了
    Reflect API 用于检查和操作对象属性。在下一章中，我们将学习代理及其用途。
