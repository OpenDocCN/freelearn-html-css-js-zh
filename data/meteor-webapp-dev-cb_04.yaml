- en: Chapter 4. Creating Models
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章。创建模型
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Implementing a simple collection
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现一个简单的集合
- en: Using the Session object
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Session 对象
- en: Sorting with MongoDB queries
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 MongoDB 查询进行排序
- en: Filtering with MongoDB queries
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 MongoDB 查询进行过滤
- en: Creating upsert MongoDB queries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 upsert MongoDB 查询
- en: Implementing a partial collection
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现部分集合
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The Meteor data model is designed to be very easy to develop. Gone are the days
    of worrying about lengthy SQL statements, database drivers, and rigidly structured
    database tables. In its place is a straightforward, JSON-based document model
    that lets you focus on the functionality of your application. This chapter contains
    the most common recipes to interact with MongoDB and the reactive model context
    inside Meteor.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor 数据模型设计得非常易于开发。那些担心长 SQL 语句、数据库驱动程序和严格结构的数据库表的日子已经过去了。取而代之的是一种简单直接的、基于
    JSON 的文档模型，让你能够专注于应用程序的功能。本章包含了与 MongoDB 和 Meteor 中的反应模型上下文交互的最常见菜谱。
- en: Implementing a simple collection
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现一个简单的集合
- en: Collections are the medium of communication between the client and the server,
    with changes being pushed down to the client and requests being pushed up to the
    server. This recipe will show you how and where to declare a collection for use
    on both the client and the server.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 集合是客户端和服务器之间通信的媒介，更改会推送到客户端，请求会推送到服务器。这个菜谱将向你展示如何在客户端和服务器上声明一个集合以供使用。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: First, you will need Meteor installed and have a project created. To create
    a standard project file structure, please see the *Setting up your project file
    structure* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Optimizing
    Your Workflow"), *Optimizing Your Workflow*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要安装 Meteor 并创建一个项目。要创建标准的项目文件结构，请参阅 [第 1 章](part0015.xhtml#aid-E9OE1 "第
    1 章。优化你的工作流程") 中的 *设置你的项目文件结构* 菜谱，*优化你的工作流程*。
- en: For this particular exercise, you will also need to have the `autopublish` and
    `insecure` packages installed (which are installed by default). If you need to
    add them, please see the *Adding Meteor packages* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个特定的练习，你还需要安装 `autopublish` 和 `insecure` 包（这些包默认已安装）。如果你需要添加它们，请参阅 [第 2 章](part0028.xhtml#aid-QMFO1
    "第 2 章。使用包进行自定义") 中的 *使用包进行自定义* 菜谱，*使用包进行自定义*。
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To implement a simple collection, proceed with the following steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现一个简单的集合，请按照以下步骤进行：
- en: Create a new file in your `both` folder, called `simple.js`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `both` 文件夹中创建一个新文件，命名为 `simple.js`。
- en: 'Open the `simple.js` file in an editor, and declare a MongoDB comments collection
    by entering the following:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开 `simple.js` 文件，通过输入以下内容来声明一个 MongoDB 注释集合：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, open the `main.js` file in your client''s `scripts` folder `([project
    root]/client/scripts/main.js`), add an action to the `click button` event handler,
    which will insert a record into the `Comments` collection:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开客户端 `scripts` 文件夹中的 `main.js` 文件（`[项目根]/client/scripts/main.js`），向 `click
    button` 事件处理器添加一个动作，该动作将记录插入到 `Comments` 集合中：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We need to add a comments helper as well. Locate the `Template.hello.helpers`
    method and add the following helper to the beginning:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要添加一个注释助手。定位到 `Template.hello.helpers` 方法，并在开头添加以下助手：
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save these changes.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存这些更改。
- en: 'Open your `main.html` page (`[project root]/client/main.html`), add a `{{ #each..}}`
    template fragment to the `hello` template as specified in the following example,
    and save your changes:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '打开你的 `main.html` 页面（`[项目根]/client/main.html`），按照以下示例在 `hello` 模板中添加一个 `{{ #each..}}`
    模板片段，并保存你的更改：'
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, open a terminal window, navigate to the `[root]` folder of your project,
    and start up Meteor:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开一个终端窗口，导航到你的项目 `[root]` 文件夹，并启动 Meteor：
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In a web browser, navigate to `http://localhost:3000/` and click on the button
    on the screen several times. The result should add comments with each click, similar
    to this:![How to do it...](img/image00360.jpeg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页浏览器中，导航到 `http://localhost:3000/` 并点击屏幕上的按钮几次。结果应该每次点击都添加注释，类似于这样：![如何做...](img/image00360.jpeg)
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The declaration in `simple.js` is read by both the client and the server:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`simple.js` 中的声明被客户端和服务器读取：'
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This instantiates the model and manifests as a collection called `Comments`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这将实例化模型，并以 `Comments` 集合的形式体现。
- en: 'The changes to `main.js` consist of an extra action in the `click` event:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`main.js` 的更改包括在 `click` 事件中添加一个额外的动作：'
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This adds a comment object to the `Comments` collection on the client, which
    is quickly propagated to a minimongo on the client and then to MongoDB on the
    server. The UI is updated instantly because of the second change in `main.js`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在客户端的 `Comments` 集合中添加一个评论对象，它将迅速传播到客户端的 minimongo，然后到服务器上的 MongoDB。由于 `main.js`
    中的第二个更改，UI 立即更新：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `comments` helper is a **reactive** **computation**, which means that it
    reruns itself every time there is a change in one of the **reactive** **contexts**
    (observed properties) it contains. In this example, `Comments.find()` is a reactive
    context, and therefore, whenever there is a change in the `Comments` collection,
    this `comments` helper will rerun.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`comments` 辅助函数是一个**响应式**计算，这意味着每当它包含的**响应式**上下文（观察属性）之一发生变化时，它都会重新运行。在这个例子中，`Comments.find()`
    是一个响应式上下文，因此每当 `Comments` 集合发生变化时，这个 `comments` 辅助函数都会重新运行。'
- en: Provided that the MongoDB collection (server side) ratifies the change, the
    UI will stay updated. If there was a conflict or some problem with the transaction,
    the server will send a corrective message, and Minimongo will be updated with
    the correct state. But, in this case, since we have no conflicts or latency, the
    change stuck, and comments are added after each click.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设MongoDB集合（服务器端）批准了更改，UI将保持更新。如果发生冲突或事务中存在问题，服务器将发送纠正消息，Minimongo将使用正确的状态更新。但是，在这种情况下，因为我们没有冲突或延迟，更改被卡住，每次点击后都会添加评论。
- en: 'This template is reactive, which means when a change is found in the `Comments`
    collection, this function will be updated, and Blaze will re-render the `{{#each…}}`
    template block added to `main.html`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板是响应式的，这意味着当在 `Comments` 集合中找到更改时，此函数将更新，Blaze 将重新渲染添加到 `main.html` 的 `{{#each…}}`
    模板块：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: See also
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Creating dynamic lists* and *Using reactivity with HTML attributes* recipes
    in [Chapter 3](part0036.xhtml#aid-12AK81 "Chapter 3. Building Great User Interfaces"),
    *Building Great User Interfaces*
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3章](part0036.xhtml#aid-12AK81 "第3章。构建出色的用户界面")中的 *创建动态列表* 和 *使用响应式与HTML属性*
    食谱，*构建出色的用户界面*'
- en: Using the Session object
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用会话对象
- en: The **Session** **object** is a global client-side object, and as such, is part
    of the client model. Though it's not part of any collection, the Session object
    can be used in a reactive context, which means you can use it to make reactive
    methods rerun whenever it is changed. This recipe will show you how to use the
    Session object to update the elements on your page.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**会话**对象是一个全局客户端对象，因此它是客户端模型的一部分。尽管它不属于任何集合，但会话对象可以在响应式上下文中使用，这意味着您可以使用它来使响应式方法在它发生变化时重新运行。本食谱将向您展示如何使用会话对象来更新页面上的元素。'
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to have Meteor installed and a project created. To create a standard
    project file structure, please see the *Setting up your project file structure*
    recipe in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Optimizing Your Workflow"),
    *Optimizing Your Workflow*. A quick default project will work just as well for
    this recipe.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装Meteor并创建一个项目。要创建标准项目文件结构，请参阅[第1章](part0015.xhtml#aid-E9OE1 "第1章。优化您的流程")中的
    *设置您的项目文件结构* 食谱，*优化您的流程*。一个快速默认项目对于本食谱来说也完全可以。
- en: How to do it…
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To use the Session object, proceed with the following steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用会话对象，请按照以下步骤操作：
- en: 'Open the `main.js` file in your client''s `scripts` folder `([project root]/client/scripts/main.js`)
    and add a `greeting` helper to the beginning of `Template.hello.helpers`, as follows:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的客户端的 `scripts` 文件夹中的 `main.js` 文件（[项目根目录]/client/scripts/main.js）中打开，并将 `greeting`
    辅助函数添加到 `Template.hello.helpers` 的开头，如下所示：
- en: '[PRE9]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open `main.html` and add the greeting to your `hello` template, as follows:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `main.html` 并将问候语添加到您的 `hello` 模板中，如下所示：
- en: '[PRE10]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If Meteor is not already running, initiate it by navigating to your project
    root folder in a terminal window and run the `meteor` command:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Meteor尚未运行，请在终端窗口中导航到您的项目根目录并运行 `meteor` 命令：
- en: '[PRE11]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, open a browser, navigate to `http://localhost:3000/`, and open your web
    console.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开浏览器，导航到 `http://localhost:3000/`，并打开您的网页控制台。
- en: 'In the web console, enter and execute the following command:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页控制台中，输入并执行以下命令：
- en: '[PRE12]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The greeting on your screen should have changed from **Welcome to Chapter 4**
    to **I just changed the Session Object**, as shown in the following screenshot:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您屏幕上的问候语应从 **欢迎来到第4章** 更改为 **我刚刚更改了会话对象**，如下面的截图所示：
- en: '![How to do it…](img/image00361.jpeg)'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00361.jpeg)'
- en: How it works…
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Adding a call to `Session.get` inside the `greeting` template helper tells Meteor
    to look for a value placed in the greeting key of the `Session.keys` collection.
    As the collections are reactive contexts in Meteor, changes made in the `Session`
    collection (even when executed through the web console) are instantly reflected
    in the UI.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在`greeting`模板辅助函数内部添加对`Session.get`的调用，告诉Meteor在`Session.keys`集合的`greeting`键中查找一个值。由于集合是Meteor中的响应式上下文，对`Session`集合所做的更改（即使通过Web控制台执行）会立即反映在UI上。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `Session` object is literally a *Session* object. It lasts only until the
    next manual page refresh. If you want something more permanent, you will need
    to use offline storage or a MongoDB collection. Make sure to include this fact
    in your design/development plans.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`Session`对象字面上是一个*会话*对象。它只持续到下一次手动页面刷新。如果您需要更持久的，您将需要使用离线存储或MongoDB集合。请确保在设计/开发计划中包含这一事实。'
- en: There's more…
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As of `0.9.1`, Meteor also provides single reactive variables. They can be used
    in place of the `Session` object, have a cleaner syntax, can be any type of object,
    and support checking for changes before a reactive invalidation is triggered.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 截至`0.9.1`版本，Meteor还提供了单个响应式变量。它们可以用作`Session`对象的替代品，具有更简洁的语法，可以是任何类型的对象，并且支持在触发响应式无效化之前检查更改。
- en: 'To use reactive variables, add the `reactive-var` package to your Meteor project:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用响应式变量，将`reactive-var`包添加到您的Meteor项目中：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can then declare and use a variable instead of the `Sessio` `n` object:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以声明并使用一个变量而不是`Sessio` `n`对象：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This variable (declared properly) can be manipulated in the same way as the
    Session object, with cleaner syntax. The following command entered in the web
    debug console will change the display accordingly:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此变量（正确声明）可以像处理`Session`对象一样进行操作，具有更简洁的语法。在Web调试控制台中输入以下命令将相应地更改显示：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding command will result in something similar to the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将产生类似于以下截图的结果：
- en: '![There''s more…](img/image00362.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多…](img/image00362.jpeg)'
- en: See also
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using reactivity with HTML attributes* recipe in [Chapter 3](part0036.xhtml#aid-12AK81
    "Chapter 3. Building Great User Interfaces"), *Building Great User Interfaces*
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](part0036.xhtml#aid-12AK81 "第3章。构建出色的用户界面")的*使用HTML属性与响应性结合*食谱中，*构建出色的用户界面*
- en: The *Creating and consuming a reactive* value and *Updating Blaze template without
    Mongo* recipes in [Chapter 6](part0058.xhtml#aid-1NA0K1 "Chapter 6. Mastering
    Reactivity"), *Mastering Reactivity*
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第6章](part0058.xhtml#aid-1NA0K1 "第6章。掌握响应性")的*创建和消费响应值*以及*不使用Mongo更新Blaze模板*的食谱中，*掌握响应性*
- en: Sorting with MongoDB queries
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MongoDB查询进行排序
- en: There are many times when you will need to sort a collection. Most recent comments,
    alphabetized lists, and bank transactions by amount are all good examples. This
    recipe will show you how to sort MongoDB collections, using the options in your
    `find()` request.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多时候您需要排序一个集合。最近的评论、按字母顺序排列的列表和按金额排序的银行交易都是很好的例子。本食谱将向您展示如何使用`find()`请求中的选项对MongoDB集合进行排序。
- en: Getting ready
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using the *Implementing a simple collection* recipe found in this
    chapter as a baseline. please follow that recipe in preparation for this activity.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本章中找到的*实现简单集合*食谱作为基准。请为此活动遵循该食谱。
- en: How to do it…
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'To perform sorting with MongoDB queries, proceed with the following steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用MongoDB查询执行排序，请按照以下步骤进行：
- en: 'In your `main.html` file (located at `[project root]/client/main.html`), make
    the following modification to the `{{#each…}}` template fragment:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`main.html`文件（位于`[project root]/client/main.html`）中，对`{{#each…}}`模板片段进行以下修改：
- en: '[PRE16]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, modify the `Comments.insert` action inside the `click` event handler,
    found in `[project root]/client/script/main.js`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改位于`[project root]/client/script/main.js`中的`click`事件处理器内的`Comments.insert`操作：
- en: '[PRE17]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, inside `main.js`, modify the `find()` arguments to specify a `sort`
    comments by its `number` in descending order (`-1`):'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`main.js`内部，修改`find()`参数以指定按其`number`降序排序评论（`-1`）：
- en: '[PRE18]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Save all the changes and run Meteor if necessary. Navigate to `http://localhost:3000/`,
    click on the button on the screen several times, and watch as the comments are
    sorted by a comment number:![How to do it…](img/image00363.jpeg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有更改，如果需要的话运行Meteor。导航到`http://localhost:3000/`，点击屏幕上的按钮几次，并观察评论按评论编号排序：![如何做到这一点…](img/image00363.jpeg)
- en: How it works…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The crux of this recipe is found in the `find()` method arguments. We modified
    how the number was being stored by adding a random number so that if we do nothing
    else, the comments will appear out of order. But by adding `{sort:{number:-1}}`
    to the `comments` helper, we are giving results to Blaze that are sorted in descending
    order by the randomly generated `number` property. To sort in ascending order,
    use `1` as your parameter. To sort in descending order, use `-1`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的核心在于`find()`方法参数。我们通过添加一个随机数来修改了数字的存储方式，这样如果我们不做其他任何事情，评论将无序显示。但是，通过在`comments`辅助函数中添加`{sort:{number:-1}}`，我们向Blaze提供了按随机生成的`number`属性降序排序的结果。要按升序排序，请使用`1`作为参数。要按降序排序，请使用`-1`。
- en: 'The rest of the changes are to support the sorting change. First, `main.js`
    was modified so that the `number` property could be assigned at random and added
    to the comment object when it is inserted into the `Comments` collection:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的更改是为了支持排序更改。首先，`main.js`被修改，以便`number`属性可以被随机分配并在将其插入`Comments`集合时添加到注释对象中：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The last change is made to `main.html` to display the new `number` property
    in the UI:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的更改是对`main.html`进行更改，以在UI中显示新的`number`属性：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: There's more…
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'You can perform complex sorts using multiple properties if the need arises.
    To do so, simply add the additional property key to the `sort` option, with either
    an ascending (`1`) or descending(`-1`) value, similar to the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，你可以使用多个属性执行复杂的排序。要这样做，只需将额外的属性键添加到`sort`选项中，使用升序（`1`）或降序（`-1`）值，类似于以下：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: See also
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Inserting templates with Spacebars* recipe in [Chapter 3](part0036.xhtml#aid-12AK81
    "Chapter 3. Building Great User Interfaces"), *Building Great User Interfaces*
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](part0036.xhtml#aid-12AK81 "第3章. 构建优秀的用户界面")的*使用Spacebars插入模板*菜谱中，*构建优秀的用户界面*
- en: Filtering with MongoDB queries
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MongoDB查询进行过滤
- en: Whether you're performing searches, organizing records, or narrowing down results,
    sooner or later, you'll want to filter the results of your collections. This recipe
    shows you how to limit the number of records in a collection, using MongoDB's
    `find` method options.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是在执行搜索、组织记录还是缩小结果范围，迟早你都会想要过滤你收藏的结果。这个菜谱展示了如何使用MongoDB的`find`方法选项来限制集合中的记录数量。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the project created in the *Sorting with MongoDB queries* recipe,
    found in this chapter. Please complete that recipe, and use the files as a baseline
    for this recipe.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本章中*使用MongoDB查询进行排序*菜谱中创建的项目。请完成该菜谱，并使用文件作为本菜谱的基线。
- en: How to do it…
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To filter MongoDB queries, proceed with the following steps:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要过滤MongoDB查询，请按照以下步骤操作：
- en: 'Make the following change to the `comments` helper function in `[project root]/client/scripts/main.js`:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下更改应用到`[项目根]/client/scripts/main.js`中的`comments`辅助函数：
- en: '[PRE22]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Save `main.js` and start Meteor if necessary. Navigate to `http://localhost:3000/`;
    click the button on the screen several times and watch as only the comments that
    contain an even number are displayed. Your results after multiple clicks should
    look similar to the following screenshot:![How to do it…](img/image00364.jpeg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存`main.js`并在必要时启动Meteor。导航到`http://localhost:3000/`；点击屏幕上的按钮几次，并观察只显示包含偶数的评论。多次点击后的结果应该类似于以下截图：![如何操作…](img/image00364.jpeg)
- en: 'Change the regular expression in `main.js` to only show comments that contain
    an odd number by making the following change to the query:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`main.js`中的正则表达式更改，只显示包含奇数的评论，通过在查询中进行以下更改：
- en: '[PRE23]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Save your changes and observe the change to your UI, which should look similar
    to the following screenshot:![How to do it…](img/image00365.jpeg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的更改，并观察你的UI的变化，它应该看起来类似于以下截图：![如何操作…](img/image00365.jpeg)
- en: How it works…
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: By adding a selector to the `find()` statement in the query, the collection
    is paired down to match whatever is specified in the selector. In this case, the
    selector was a regular expression, which returned results only if the `number`
    property contained at least one even number, and subsequently, if the `number`
    property contained at least one odd number.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在查询中的`find()`语句中添加一个选择器，集合将缩小以匹配选择器中指定的任何内容。在这种情况下，选择器是一个正则表达式，只有当`number`属性包含至少一个偶数时，才会返回结果，随后，如果`number`属性包含至少一个奇数。
- en: Notice that this didn't change the `{sort:{number:-1}}` predicate in any way
    and that it works exactly the same, regardless of how we changed the query.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这并没有以任何方式改变 `{sort:{number:-1}}` 断言，并且它工作得完全一样，无论我们如何更改查询。
- en: Tip
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: There is a healthy range of selectors that you can use to limit/filter your
    collection. For a complete list, check out the MongoDB query operators list found
    at [http://docs.mongodb.org/manual/reference/operator/query/](http://docs.mongodb.org/manual/reference/operator/query/).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用一系列选择器来限制/过滤你的集合。要获取完整列表，请查看位于 [http://docs.mongodb.org/manual/reference/operator/query/](http://docs.mongodb.org/manual/reference/operator/query/)
    的 MongoDB 查询运算符列表。
- en: There's more…
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Moving the filter to the server side provides security and performance advantages
    as the non-matching results are never sent down the wire to the client in the
    first place. In fact, `find()` is most commonly found on the server, using the
    Meteor publish and subscribe functionality. For an example of `find()` being used
    on the server, please see the *Implementing a partial collection* recipe found
    in this chapter.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 将过滤器移到服务器端提供了安全性和性能优势，因为非匹配的结果从一开始就不会发送到客户端。实际上，`find()` 最常在服务器上使用，利用 Meteor
    的发布和订阅功能。关于在服务器上使用 `find()` 的示例，请参阅本章中找到的 *使用 MongoDB 查询进行排序* 菜谱。
- en: See also
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Implementing a partial collection* and *Sorting with MongoDB queries* recipes
    in this chapter
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *实现部分集合* 和 *使用 MongoDB 查询进行排序* 菜谱
- en: Creating upsert MongoDB queries
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 upsert MongoDB 查询
- en: As you are developing applications, on occasion, you will run into a situation
    where you need to either update an existing record, or insert a record if it doesn't
    exist already. This is done traditionally using conditional operators such as
    `if`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发应用程序时，有时你会遇到需要更新现有记录或如果不存在则插入记录的情况。这通常使用条件运算符，如 `if` 来完成。
- en: Through MongoDB, Meteor removes the burden of checking by allowing you to upsert
    (update + insert) records using a simple syntax. This recipe will show you how.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 MongoDB，Meteor 通过允许你使用简单语法进行 upsert（更新+插入）记录来减轻检查的负担。这个菜谱将向你展示如何做到这一点。
- en: Getting ready
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will again use the project created in the *Sorting with MongoDB queries*
    recipe, found in this chapter. Please create a fresh copy of this recipe, and
    use the files as a baseline for this recipe.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次使用本章中 *使用 MongoDB 查询进行排序* 菜谱中创建的项目。请创建这个菜谱的新副本，并使用这些文件作为本菜谱的基线。
- en: 'We will also be using the official `momentjs` package. To add the `momentjs`
    package, navigate to your project''s root folder in a terminal window. Once there,
    execute the following command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用官方的 `momentjs` 包。要添加 `momentjs` 包，请在终端窗口中导航到你的项目根目录。一旦到达那里，请执行以下命令：
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This will add the `momentjs` package, and you're now ready to complete this
    recipe.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加 `momentjs` 包，现在你可以完成这个菜谱了。
- en: How to do it…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'We first need to increase the likelihood of duplicate records and identify
    the time at which each comment was inserted or updated. Proceed with the following
    steps to create upsert MongoDB queries:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要增加重复记录的可能性，并确定每个评论被插入或更新的时间。按照以下步骤创建 upsert MongoDB 查询：
- en: 'Open the `[project root]/client/scripts/main.js` file and modify `Template.hello.events`
    as follows:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `[项目根目录]/client/scripts/main.js` 文件，并按如下方式修改 `Template.hello.events`：
- en: '[PRE25]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We will now create a server method for the `upsert` function. By default, Meteor
    only allows modifications on the client by `_id`, and since an `_id` value may
    not exist, we need to create a server method for our `upsert` function. Open `[project
    root]/server/server.js` and add the following method to the bottom of the file:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将为 `upsert` 函数创建一个服务器方法。默认情况下，Meteor 只允许通过 `_id` 在客户端进行修改，由于 `_id` 值可能不存在，我们需要为我们的
    `upsert` 函数创建一个服务器方法。打开 `[项目根目录]/server/server.js` 并在文件底部添加以下方法：
- en: '[PRE26]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Finally, we will modify `[project root]/client/main.html` to display the timestamp
    on each comment in the `comments` collection:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将修改 `[项目根目录]/client/main.html` 以在 `comments` 集合中显示每个评论的时间戳：
- en: '[PRE27]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Save your changes, start the Meteor if it is not already running, and navigate
    to `http://localhost:3000/`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的更改，如果 Meteor 还未运行，请启动它，并导航到 `http://localhost:3000/`。
- en: Continuously, click on the button on the screen, and observe how, instead of
    new records being added on each and every click, if a record already exists, the
    record's timestamp is updated.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续点击屏幕上的按钮，观察每次点击时，不是添加新记录，而是如果记录已存在，则更新记录的时间戳。
- en: How it works…
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In `server.js`, we created a method by declaring the `commentUpsert` method
    inside `Meteor.methods`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `server.js` 中，我们在 `Meteor.methods` 内声明了 `commentUpsert` 方法。
- en: This method receives a new comment object (`newC`) as an argument and calls
    `upsert` on the `Comments` collection. The first argument (the selector) tells
    MongoDB to look for any entries that match the `number` property found in the
    `newC` object. The second argument (the modifier) tells MongoDB which fields to
    insert/update on the `upsert` object.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接收一个新评论对象 (`newC`) 作为参数，并在 `Comments` 集合上调用 `upsert`。第一个参数（选择器）告诉 MongoDB
    在 `newC` 对象中查找与 `number` 属性匹配的任何条目。第二个参数（修改器）告诉 MongoDB 在 `upsert` 对象上插入/更新哪些字段。
- en: If a match is found, the fields are updated. If no match is found, a new record
    is inserted, with the `newC` object providing the values.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找到匹配项，则更新字段。如果没有找到匹配项，则插入一个新记录，`newC` 对象提供值。
- en: 'In `main.html`, we simply added the new `time` property to the display:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，我们只是简单地添加了新的 `time` 属性到显示中：
- en: '[PRE28]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In `main.js`, we first remove the `Comments.insert()` statement. We then create
    the `newC` object, populating it with a random number, some text, and a timestamp
    using `moment().format()` to convert the timestamp into a readable format. Finally,
    we make a call to the `commentUpsert` server-side method, with a `Meteor.call`
    statement.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main.js` 中，我们首先删除了 `Comments.insert()` 语句。然后创建 `newC` 对象，使用 `moment().format()`
    将时间戳转换为可读格式，填充一个随机数字、一些文本和一个时间戳。最后，我们通过 `Meteor.call` 语句调用 `commentUpsert` 服务器端方法。
- en: The result confirms that our `upsert` function is working properly, as each
    new comment (with a new `number` property) is added to our list, and each existing
    comment (with an already existing `number` property) has its timestamp updated.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 结果确认我们的 `upsert` 函数正在正常工作，因为每个新的评论（带有新的 `number` 属性）都被添加到我们的列表中，每个现有的评论（带有已经存在的
    `number` 属性）的时间戳都得到了更新。
- en: There's more…
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Meteor simplifies things a bit by adding the actual `upsert` function, rather
    than setting `{upsert:true}` inside a traditional MongoDB `update` query. Both
    `update` or `upsert` can be used in Meteor, and it's really up to you to choose.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor 通过添加实际的 `upsert` 函数来简化事情，而不是在传统的 MongoDB `update` 查询中设置 `{upsert:true}`。在
    Meteor 中，`update` 或 `upsert` 都可以使用，具体选择取决于你。
- en: Tip
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Extensive documentation exists on updating and upserting records in a MongoDB
    collection. You can find more details at [http://docs.mongodb.org/manual/reference/method/db.collection.update/](http://docs.mongodb.org/manual/reference/method/db.collection.update/).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 关于在 MongoDB 集合中更新和 upsert 记录的详细文档已经存在。你可以在 [http://docs.mongodb.org/manual/reference/method/db.collection.update/](http://docs.mongodb.org/manual/reference/method/db.collection.update/)
    找到更多详细信息。
- en: See also
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Building custom server methods* recipe in [Chapter 11](part0083.xhtml#aid-2F4UM1
    "Chapter 11. Leveraging Advanced Features"), *Leveraging Advanced Features*
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 11 章 *构建自定义服务器方法* 菜谱，*利用高级功能*
- en: Implementing a partial collection
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现部分集合
- en: Partial collections are collections sent down the wire from the server that
    contain only part of the information available on each record. This is useful
    for hiding properties or fields, and also for paring down the size of records
    containing a lot of information. In other words, partial collections can help
    with security and performance. This recipe will show you how to implement a partial
    collection on the server.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 部分集合是从服务器发送下来的集合，其中只包含每个记录上可用的部分信息。这对于隐藏属性或字段，以及减少包含大量信息的记录的大小很有用。换句话说，部分集合可以帮助提高安全和性能。这个菜谱将向你展示如何在服务器上实现部分集合。
- en: Getting ready
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's use the *Creating upsert MongoDB queries* recipe found in this chapter
    as a baseline for this recipe. Create a fresh copy of this recipe and then proceed
    to the other preparations.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以本章中找到的 *创建 upsert MongoDB 查询* 菜谱作为本菜谱的基准。创建这个菜谱的新副本，然后进行其他准备工作。
- en: 'Let''s spruce things up just a bit as well while we''re at it. In a terminal
    window, navigate to the root project folder and execute the following command:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在做这件事的同时也稍微整理一下。在一个终端窗口中，导航到根项目文件夹，并执行以下命令：
- en: '[PRE29]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This will add the `bootstrap` CSS framework. We now want to take advantage
    of `bootstrap`, so open up your `main.html` file (found in `[project root]/client/`)
    and make the following changes to the `hello` template:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加 `bootstrap` CSS 框架。现在我们想利用 `bootstrap`，所以打开你的 `main.html` 文件（位于 `[项目根]/client/`），并对
    `hello` 模板进行以下更改：
- en: '[PRE30]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'These changes will use some of the default `bootstrap` component styles to
    make our display look similar to the following screenshot:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改将使用一些默认的`bootstrap`组件样式来使我们的显示看起来类似于以下截图：
- en: '![Getting ready](img/image00366.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/image00366.jpeg)'
- en: 'We now need to remove the `autopublish` default Meteor package. In the terminal
    window, execute the following command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要移除`autopublish`默认的Meteor包。在终端窗口中，执行以下命令：
- en: '[PRE31]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This will temporarily *break* your application; in that no records from the
    `Comments` collection are being sent down the wire to the client, so no records
    will be displayed in the UI. Don't worry, we'll fix this!
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这将暂时**中断**你的应用程序；在这种情况下，`Comments`集合中的记录不会通过线发送到客户端，因此UI中不会显示任何记录。别担心，我们会修复这个问题！
- en: You are now ready to move on to the recipe.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以继续到下一个步骤。
- en: How to do it…
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'First, since we removed `autopublish`, we need to prepare the client to subscribe
    to the `comments` data stream. To implement a partial collection, proceed with
    the following steps:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，由于我们移除了`autopublish`，我们需要准备客户端订阅`comments`数据流。要实现部分集合，请按照以下步骤进行：
- en: 'Open `[project root]/client/scripts/main.js` and add the following code to
    the very top of the document:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`[项目根]/client/scripts/main.js`，并将以下代码添加到文档的顶部：
- en: '[PRE32]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'While we have `main.js` open, let''s also change what we sort, by making the
    following change to the `comments` helper function and save your changes:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们打开`main.js`时，让我们也改变我们排序的内容，通过修改`comments`辅助函数并保存你的更改：
- en: '[PRE33]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, we need to have the server publish the `Comments` data collection. We''ll
    simultaneously remove the text field from the response stream, implementing a
    **partial collection**. Open `[project root]/server/server.js`, add the following
    code, and save your changes:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要服务器发布`Comments`数据集合。我们将同时从响应流中移除文本字段，实现**部分集合**。打开`[项目根]/server/server.js`，添加以下代码，并保存你的更改：
- en: '[PRE34]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We can now immediately see that the text field is no longer being displayed
    in the UI, as shown in the following screenshot:'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在可以立即看到文本字段不再在UI中显示，如下面的截图所示：
- en: '![How to do it…](img/image00367.jpeg)'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00367.jpeg)'
- en: 'Let''s clean up our UI a little bit now and make it obvious that the records
    are being reordered. Open `main.html` again, make the following changes, and save
    the file:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们现在稍微清理一下UI，使其明显显示记录正在重新排序。再次打开`main.html`，进行以下更改，并保存文件：
- en: '[PRE35]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, when you click on the button to update the `time` property, the timestamp
    will be updated, and the ordering of the records will change with each click (click
    several times to really see the effect in action):'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，当你点击按钮来更新`time`属性时，时间戳将被更新，并且每次点击（点击几次以真正看到效果）都会改变记录的排序：
- en: '![How to do it…](img/image00368.jpeg)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00368.jpeg)'
- en: How it works…
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The crux of this recipe is found inside `server.js` where we added the `fields`
    field specifier to the MongoDB query (in the `Meteor.publish(…)` statement):'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的核心在`server.js`中，我们添加了`fields`字段指定符到MongoDB查询（在`Meteor.publish(…)`语句中）：
- en: '[PRE36]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This field specifier tells the MongoDB query to exclude the text field/property
    from the results. Once this change has been made, `main.html` still tries to call
    `{{text}}` in the template, but since it's null, it doesn't appear. We then removed
    the call to display `{{text}}` altogether, because it wasn't needed.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字段指定符告诉MongoDB查询从结果中排除文本字段/属性。一旦做出这个更改，`main.html`仍然试图在模板中调用`{{text}}`，但由于它是空的，所以没有显示。然后我们完全移除了显示`{{text}}`的调用，因为它不是必需的。
- en: There's more…
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'The `fields` field specifier can be made **exclusive**, as we have seen in
    the preceding section, by only listing the fields we don''t want to see. To do
    this, simply use the `:false` (or `:0`) parameter for each field you don''t want
    to see, and the rest of the fields will be included by default. For example:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`fields`字段指定符可以通过只列出我们不想看到的字段来设置为**排除**。为此，只需为每个不想看到的字段使用`:false`（或`:0`）参数，其余字段将默认包含。例如：
- en: '[PRE37]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The field specifier can also be made **inclusive**, which means that only the
    fields specified will be included by using the `:true` (or `:1`) parameter. This
    would look similar to the following code:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 字段指定符也可以设置为**包含**，这意味着只有指定的字段将通过使用`:true`（或`:1`）参数被包含。这看起来会类似于以下代码：
- en: '[PRE38]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Tip
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To read more about the `fields` field specifier, check out the official Meteor
    documentation at [http://docs.meteor.com/#/full/fieldspecifiers](http://docs.meteor.com/#/full/fieldspecifiers).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`fields`字段指定符的信息，请查看官方Meteor文档，链接为[http://docs.meteor.com/#/full/fieldspecifiers](http://docs.meteor.com/#/full/fieldspecifiers)。
- en: See also
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Basic safety – turning off autopublish* recipe in [Chapter 9](part0073.xhtml#aid-25JP21
    "Chapter 9. Securing Your Application"), *Securing Your Application*
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第9章中的*基本安全 - 关闭autopublish*配方，*保护您的应用程序*，章节链接为[Chapter 9](part0073.xhtml#aid-25JP21
    "Chapter 9. Securing Your Application")。
