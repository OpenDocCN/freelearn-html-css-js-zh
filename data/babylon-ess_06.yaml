- en: Chapter 6. Manage Audio in Babylon.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：在 Babylon.js 中管理音频
- en: 'In the last chapter, you started adding dynamism to your scenes by adding collisions
    checks and physics simulations. Another important feature is handling sounds in
    your scenes and finally making it more alive. This chapter not only explains sound
    management with Babylon.js in order to create soundtrack sounds, but also spatialized
    sounds (3D). In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你通过添加碰撞检查和物理模拟来为场景添加动态效果。另一个重要功能是处理场景中的声音，并最终使场景更加生动。本章不仅解释了使用 Babylon.js
    进行声音管理以创建配乐声音，还涵盖了空间化声音（3D）。在本章中，我们将涵盖以下主题：
- en: Playing 2D sounds
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放2D声音
- en: Playing 3D sounds
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放3D声音
- en: Playing 2D sounds
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放2D声音
- en: The Babylon.js framework provides an audio engine based on WebAudio. It allows
    you to easily add 2D and 3D sounds using the provided tools that are developed
    for you by the Babylon.js team.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Babylon.js 框架提供了一个基于 WebAudio 的音频引擎。它允许你使用Babylon.js团队为你开发的工具轻松添加2D和3D声音。
- en: Creating 2D sounds
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建2D声音
- en: 'The Babylon.js framework provides a `BABYLON.Sound` class. This class allows
    you to create and manage 2D and 3D sounds for your scene. To add a sound, the
    only thing you need to do is to create a new `BABYLON.Sound` object, as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Babylon.js 框架提供了一个 `BABYLON.Sound` 类。此类允许你为场景创建和管理2D和3D声音。要添加声音，你需要做的只是创建一个新的
    `BABYLON.Sound` 对象，如下所示：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can now get access to methods such as `.play`, `.pause`, and `.stop`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以访问 `.play`、`.pause` 和 `.stop` 等方法。
- en: 'In fact, the sounds are loaded asynchronously so that you cannot call `sound.play()` right
    after creating the new sound object. This is why the `BABYLON.Sound` constructor
    provides a `readyToPlayCallback` parameter after the scene in order to handle
    the loading process. To play the sound when loaded, simply set the `readyToPlayCallback`
    parameter, as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，声音是异步加载的，因此你无法在创建新的声音对象后立即调用 `sound.play()`。这就是为什么 `BABYLON.Sound` 构造函数在场景之后提供了一个
    `readyToPlayCallback` 参数，以便处理加载过程。要加载后播放声音，只需设置 `readyToPlayCallback` 参数，如下所示：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Fortunately, the developers thought about this behavior and provided a last
    parameter named `options`. This parameter allows you to automatically set the
    default behaviors instead of managing them in the ready-to-play callback. The
    `options` parameter is optional and is an object that looks similar to the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，开发者考虑到了这种行为，并提供了一个名为 `options` 的最后一个参数。此参数允许你自动设置默认行为，而不是在准备播放回调中管理它们。`options`
    参数是可选的，其外观类似于以下内容：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `autoPlay` parameter will automatically play the sound when loaded and you
    don't have to manage the sound in the ready-to-play callback.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`autoPlay` 参数会在加载后自动播放声音，你不需要在准备播放回调中管理声音。'
- en: The Babylon.js framework still keeps things simple as you already added an audio
    track to your scene only by calling a `new` statement on the `BABYLON.Sound` class.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Babylon.js 框架仍然保持了简单性，因为你只需在 `BABYLON.Sound` 类上调用一个 `new` 语句，就为场景添加了一个音频轨道。
- en: 'Of course, you can play several sounds in a single scene, as shown in the following
    code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以在单个场景中播放多个声音，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Managing 2D sounds
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理二维声音
- en: There are several properties to manipulate a sound in 2D , such as the volume,
    whether the sound is playing or not, and so on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个属性可以用来在2D中操作声音，例如音量、声音是否正在播放等。
- en: 'To set the sound''s volume, just call the `.setVolume` function of the sound.
    The new volume is set in the [0, 1] interval, as shown in the following code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置声音的音量，只需调用声音的 `.setVolume` 函数。新的音量设置在 [0, 1] 区间内，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also get the volume, as shown in the following code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以获取音量，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can check the current state of a sound any time, as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随时检查声音的当前状态，如下所示：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can also set the sound''s state any time, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以随时设置声音的状态，如下所示：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Playing 3D sounds
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放3D声音
- en: In the previous topic, you added and played 2D sounds in a scene. These 2D sounds
    can be easily used as soundtracks for your games. To add dynamism to your scenes,
    as physics and collisions do, you can configure the sounds to be spatialized in
    a scene. The spatialized sounds, which are called 3D sounds, give give the notion
    of distance and orientation between the player and the sound. In other words,
    more the player is far from the sound, more the sound will be attenuated. Also,
    if the sound position is rather on the right of the player, the right speaker
    will generate more sound than the left speaker and vice versa.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的主题中，你已经在场景中添加并播放了2D声音。这些2D声音可以很容易地用作游戏的配乐。为了给场景增加动态效果，就像物理和碰撞一样，你可以配置声音在场景中空间化。空间化声音，也称为3D声音，提供了玩家与声音之间的距离和方向感。换句话说，玩家离声音越远，声音的衰减就越大。此外，如果声音位置相对在玩家的右边，右扬声器产生的声音比左扬声器多，反之亦然。
- en: For example, if the sound is emitted on your right, only the right speaker(s)
    should play it and the farther you are from the sound, the lower the sound's volume
    should be.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果声音从你的右边发出，只有右边的扬声器应该播放它，而且你离声音越远，声音的音量应该越低。
- en: Creating 3D sounds
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建3D声音
- en: 'You can imagine that, as for the 2D sounds, you can create a spatialized sound
    using the same `BABYLON.Sound` constructor. Only the `options` parameter will
    change as you have to set `spatialSound` to `true`, as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以想象，对于2D声音，你可以使用相同的`BABYLON.Sound`构造函数创建空间化声音。只需更改`options`参数，因为必须将`spatialSound`设置为`true`，如下所示：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once you have created the spatialized sound, you can set its 3D position in
    the scene''s world using a `BABYLON.Vector3`, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了空间化声音，你可以使用`BABYLON.Vector3`在场景的世界中设置其3D位置，如下所示：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Managing 3D sounds
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理三维声音
- en: In contrast to the 2D sounds, you can customize more properties with 3D sounds.
    Spatialized sounds provide properties to configure the attenuation and panning
    model.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与2D声音相比，你可以使用3D声音自定义更多属性。空间化声音提供了配置衰减和声像模型的属性。
- en: 'For example, the default distance model (attenuation) is set to be linear.
    Two other models such as `exponential` and `inverse` exist, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，默认的距离模型（衰减）设置为线性。存在其他两种模型，如`exponential`和`inverse`，如下所示：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As for the fog ([Chapter 4](ch04.html "Chapter 4. Using Materials to Customize
    3D Objects Appearance"), *Using Materials to Customize 3D Objects Appearance*),
    the linear model says that the farther away the player is from the sound source,
    the lower the sound will be following a linear function (the threshold of 0 volume
    is set by the `maxDistance` property). The exponential model is a variant of the
    linear model by following an exponential function.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 关于雾效（[第4章](ch04.html "第4章. 使用材质自定义3D对象外观"），*使用材质自定义3D对象外观*），线性模型表明，玩家距离声音源越远，声音会按照线性函数降低（0体积的阈值由`maxDistance`属性设置）。指数模型是线性模型的变体，它遵循指数函数。
- en: 'The `maxDistance` property can be set only if the distance model is linear,
    as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当距离模型是线性时，才能设置`maxDistance`属性，如下所示：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As for the `maxDistance` property, you can set the `rolloffFactor` property
    if you''re using an exponential model, as shown in the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`maxDistance`属性，如果你使用指数模型，可以设置`rolloffFactor`属性，如下面的代码所示：
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Of course, you can update multiple values at the same time. Just configure
    the `.updateOptions` parameter with the values. Consider the following as an example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以同时更新多个值。只需将`.updateOptions`参数配置为相应的值。以下是一个示例：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The last useful function for spatialized sounds is to directly attach a sound
    to a mesh. Then, it is not required to update the sound''s position manually to
    set it to the mesh''s position, as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于空间化声音，最后一个有用的功能是直接将声音附加到网格上。然后，不需要手动更新声音的位置来将其设置为网格的位置，如下所示：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, the sound and mesh share the same position and are updated together by
    the scene when you call `scene.render()`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当调用`scene.render()`时，声音和网格共享相同的位置，并由场景一起更新。
- en: Creating a directional spatialized sound
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建方向性空间化声音
- en: The previous spatialized sounds that you created were omnidirectional. This
    means that if you are behind a speaker, you'll hear the sound as loud as when
    you are in front of the speaker. Something that does not happen in real life.
    The Babylon.js audio engine provides a way to create directional sounds that are
    easily configurable.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你之前创建的空间化声音是全方向的。这意味着如果你在扬声器后面，你会听到和站在扬声器前面一样响亮的声音。这在现实生活中是不会发生的。Babylon.js音频引擎提供了一种创建易于配置的方向性声音的方法。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that direction-spatialized sounds work only when the sound is attached
    to a mesh.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，方向性空间化声音仅在声音附加到网格上时才起作用。
- en: 'Let''s start with the following sound reference:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下声音参考开始：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can configure it to be directional by calling only three functions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过调用仅三个函数来配置它为方向性。
- en: 'First, the direction of the sound is represented by a cone. Just set the direction
    cone, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，声音的方向由一个锥体表示。只需设置方向锥，如下所示：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'There are three parameters, which are as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个参数，如下所示：
- en: The size of the inner cone (in degrees) should be smaller than the outer cone
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内锥体的大小（以度为单位）应该比外锥体小
- en: The size of the outer cone (in degrees) should be larger than the inner cone
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外锥体的大小（以度为单位）应该比内锥体大
- en: The volume of the spatialized sound when the player is outside the outer cone
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当玩家位于外锥体外时，空间化声音的音量
- en: For a perfect directional sound, the sizes of the inner and outer cone should
    be equal.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得完美的方向性声音，内锥体和外锥体的大小应该相等。
- en: 'Once the directional cone is set, just set the direction of the sound according
    to the mesh rotation. The parameter is local to the mesh. Then, if you rotate
    the speaker, for example, the sound will always follow the speaker''s rotation,
    depending on the parameter. Consider the following example:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了方向锥，只需根据网格旋转设置声音的方向。该参数是局部于网格的。然后，如果你旋转扬声器，例如，声音将始终跟随扬声器的旋转，这取决于参数。考虑以下示例：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, don''t forget to attach the sound to the mesh, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，不要忘记按照以下方式将声音附加到网格上：
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This quick chapter demonstrates that using sounds (2D and 3D) in a 3D engine
    can be easy when powerful tools are provided to the developer. The example files
    create a 2D sound that is played as a soundtrack and a 3D sound located at the
    box's position. Do not hesitate to play with the distance models and check the
    effects using your headphones.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这章快速演示了当为开发者提供强大工具时，在3D引擎中使用声音（2D和3D）可以变得非常简单。示例文件创建了一个作为配乐播放的2D声音和一个位于盒子位置处的3D声音。不要犹豫，尝试调整距离模型，并使用你的耳机检查效果。
- en: In the next chapter, we'll try to automate some things using the `ActionManager `class
    of Babylon.js. This class is useful for executing actions on objects when a trigger
    is raised. For example, if the player left-clicks on the box, it plays the sound
    named `my_sound.wav`. It's also the time to introduce **Actions Builder**, which
    is a part of the Babylon.js 3ds Max exporter. Actions Builder allows artists (and
    developers) to create actions on their objects without any lines of code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将尝试使用Babylon.js的`ActionManager`类自动化一些事情。这个类在触发器被激活时对对象执行动作很有用。例如，如果玩家左键单击盒子，它将播放名为`my_sound.wav`的声音。这也是介绍**动作构建器**的时候，它是Babylon.js
    3ds Max导出器的一部分。动作构建器允许艺术家（和开发者）在不编写任何代码的情况下为他们的对象创建动作。
