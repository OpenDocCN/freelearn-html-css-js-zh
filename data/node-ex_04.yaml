- en: Chapter 4. Developing the Model-View-Controller Layers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。开发模型-视图-控制器层
- en: 'In the previous chapter, we learned how to prepare the assets needed by our
    application. It is time to move forward and start writing the base levels of our
    social network. In this chapter, we will use the Model-View-Controller pattern
    and prepare our code base to implement the future of our application. Here is
    what we will talk about in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何准备应用程序所需的资源。现在是时候继续前进，开始编写我们社交网络的基本层。在本章中，我们将使用模型-视图-控制器模式，并准备我们的代码基础以实现我们应用程序的未来。以下是本章将讨论的内容：
- en: Transforming the code from the previous chapter to a better file structure
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将代码从上一章转换为更好的文件结构
- en: Implementing a router that works in both backend and frontend environments
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现在后端和前端环境中都能工作的路由器
- en: Briefly introducing Ractive.js—a framework that we will use in the client-side
    part of the project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简要介绍Ractive.js——这是我们将在项目的客户端部分使用的框架
- en: Developing the main file of the application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发应用程序的主文件
- en: Implementing controller, view, and model classes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现控制器、视图和模型类
- en: Evolving the current setup
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发展当前的设置
- en: Writing software is difficult. Often, it's a process of change. In order to
    evolve and extend our systems, we have to make changes in the code. We will take
    the code from the previous chapter and introduce a couple of new folders and files.
    We will change the architecture a bit so that it fits in the development afterwards.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 编写软件是困难的。通常，这是一个变化的过程。为了发展和扩展我们的系统，我们必须对代码进行更改。我们将从上一章的代码中提取一些新的文件和文件夹。我们将稍微改变架构，以便在开发之后适应。
- en: Directory structure
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录结构
- en: 'It is a common practice to split the logic into frontend and backend. We are
    going to follow the same approach. Here is the new file structure:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将逻辑分为前端和后端是一种常见的做法。我们将遵循相同的方法。以下是新的文件结构：
- en: '![Directory structure](img/image00176.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![目录结构](img/image00176.jpeg)'
- en: The `backend` directory will contain files used in the Node.js environment.
    As we can see, we moved the files that were previously in the main directory to
    the `frontend` folder. These are the files that produce the resources placed in
    the `static` directory. We still have the necessary `gulpfile.js`, `package.json`,
    and `server.js` files that contain the code of the Node.js server.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`backend`目录将包含在Node.js环境中使用的文件。正如我们所看到的，我们将之前在主目录中的文件移动到`frontend`文件夹中。这些文件产生了放置在`static`目录中的资源。我们仍然有必要的`gulpfile.js`，`package.json`和`server.js`文件，其中包含了Node.js服务器的代码。'
- en: Forming the main server handlers
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 形成主服务器处理程序
- en: 'So far, our server only has one request handler—`assets`. Here is how we started
    our server in the previous chapter:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的服务器只有一个请求处理程序——`assets`。以下是我们在上一章中启动服务器的方式：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Along with the serving assets, we have to add two other handlers, which are
    as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供资源，我们还必须添加另外两个处理程序，如下所示：
- en: '**API handler**: The client-side part of our application will communicate with
    the backend via the REST API. We introduced this concept in [Chapter 2](part0020.xhtml#aid-J2B81
    "Chapter 2. Architecting the Project"), *Architecting the Project*.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API处理程序**：我们应用程序的客户端部分将通过REST API与后端通信。我们在[第2章](part0020.xhtml#aid-J2B81
    "第2章。项目架构")中介绍了这个概念，*项目架构*。'
- en: '**Page handler**: If the request that comes to the server is not for an asset
    or API resource, we will serve an HTML page, which is the page that normal users
    will see.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面处理程序**：如果发送到服务器的请求不是用于资源或API资源，我们将提供一个HTML页面，这是普通用户将看到的页面。'
- en: 'It''s not really a good idea to keep everything in a single file. So, the first
    step is to extract the `assets` function to its own module:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有内容保存在一个文件中并不是一个好主意。因此，第一步是将`assets`函数提取到自己的模块中：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will follow a similar approach and create a `backend/API.js` file. It will
    be responsible for the REST API. We will use JSON as a format to transfer data.
    The simplest code that we can use for this is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将采用类似的方法创建一个`backend/API.js`文件。它将负责REST API。我们将使用JSON作为数据传输的格式。我们可以使用的最简单的代码如下：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Setting the correct `Content-Type` value is important. If it is missing or if
    it is a wrong value, then the browser that receives the response may not process
    the result properly. In the end, we are returning a minimal empty JSON string.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 设置正确的`Content-Type`值很重要。如果缺少或者值错误，那么接收响应的浏览器可能无法正确处理结果。最后，我们返回一个最小的空JSON字符串。
- en: 'Towards the end, we will add `backend/Default.js`. This is the file that will
    generate the HTML page that users will see in the browser:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将添加`backend/Default.js`。这是将在浏览器中生成用户将看到的HTML页面的文件：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The content of `Default.js` looks similar to `API.js`. We will again set the
    `Content-Type` value and use the `end()` method of the `response` object. However,
    here we load the HTML Unicode string from an external file, which is stored in
    `backend/tpl/page.html`. The reading of the file is synchronous, and it happens
    only once in the beginning. Here is the code of `page.html`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`Default.js`的内容看起来与`API.js`类似。我们将再次设置`Content-Type`值，并使用`response`对象的`end()`方法。然而，在这里，我们从外部文件中加载HTML
    Unicode字符串，该文件存储在`backend/tpl/page.html`中。文件的读取是同步的，并且只在开始时发生一次。以下是`page.html`的代码：'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is a basic HTML5 boilerplate code containing head, body tag, CSS, and
    JavaScript imports. Our application will only need the following two JavaScript
    files to work:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本的HTML5样板代码，包含头部、主体标签、CSS和JavaScript导入。我们的应用程序只需要以下两个JavaScript文件才能运行：
- en: '`ractive.js`: This is the framework that we will use in the client-side. More
    about this will be discussed in the next few sections.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ractive.js`：这是我们将在客户端使用的框架。关于这个更多的内容将在接下来的几节中讨论。'
- en: '`app.js`: This is our client-side JavaScript. As seen in a previous chapter,
    it is produced by the Gulp setup.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.js`：这是我们的客户端JavaScript。如前一章所述，它是由Gulp设置生成的。'
- en: Having mentioned the handlers in the backend, we are ready to jump into the
    code that will be run in the browser.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在提到后端处理程序之后，我们准备好开始编写将在浏览器中运行的代码。
- en: Implementing the router
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现路由器
- en: Almost every web application needs a router, which is a component that acts
    as a front door and accepts the incoming queries. It analyzes the parameters of
    the request and decides which module of our system will serve the result.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个Web应用程序都需要一个路由器，它是一个作为前门的组件，接受传入的查询。它分析请求的参数，并决定我们系统的哪个模块将提供结果。
- en: 'We are using JavaScript language in the backend (via Node.js) and frontend
    (interpreted by the web browser). In this section, we will write a router that
    works in both the sides of our application. Let''s start examining what the Node.js
    part needs:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在后端（通过Node.js）和前端（由Web浏览器解释）中使用JavaScript语言。在本节中，我们将编写一个在应用程序的两侧都能工作的路由器。让我们开始检查Node.js部分需要什么：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`Router.js` exports two methods. The first one registers routes by accepting
    a path and a handler function, which will be called if the current URL matches
    the path. The `check` function simply performs the actual check.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`Router.js`导出两种方法。第一个方法通过接受路径和处理程序函数来注册路由，如果当前URL与路径匹配，则将调用该处理程序。`check`函数只是执行实际检查。'
- en: 'Here is how the `add` method looks:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`add`方法的样子：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can skip the `path` parameter and just register a function that matches every
    route. It is nice to support such behavior in cases where we want to define a
    default route.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以跳过`path`参数，只注册一个匹配每个路由的函数。在某些情况下，支持这种行为是很好的，我们想定义一个默认路由。
- en: 'The `check` function is slightly more complex. It not only covers simple string-to-string
    matching, but should also support dynamic parameters. We are going to use `:id`
    for these dynamic parameters. For example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`check`函数稍微复杂一些。它不仅涵盖简单的字符串匹配，还应该支持动态参数。我们将使用`:id`来表示这些动态参数。例如：'
- en: '`/home`: This matches `http://localhost/home`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/home`：这匹配`http://localhost/home`'
- en: '`/user/feed`: This matches `http://localhost/user/feed`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/user/feed`：这匹配`http://localhost/user/feed`'
- en: '`/user/:id/profile`: This matches `http://localhost/user/45/profile`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /user/:id/profile：这匹配`http://localhost/user/45/profile`
- en: '`/user/:id/:action`: This matches `http://localhost/user/45/update`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/user/:id/:action`：这匹配`http://localhost/user/45/update`'
- en: 'In order to implement this functionality, we will use regular expressions in
    the following way:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个功能，我们将以以下方式使用正则表达式：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's go through the function line by line. The arguments of the method are
    `f` and `parameters`. The fragment is actually a path. This is the URL against
    which we run the check. In the `add` method, we added a handler that should be
    fired once we have a match. It would be nice if we were able to send additional
    variables to this method. The `parameters` argument covers this functionality.
    We can send an array, which is later translated to the parameters of the handler.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行浏览该函数。该方法的参数是`f`和`parameters`。片段实际上是一个路径。这是我们要检查的URL。在`add`方法中，我们添加了一个处理程序，一旦匹配，就会触发。如果我们能够向该方法发送额外的变量，那将是很好的。`parameters`参数涵盖了这个功能。我们可以发送一个数组，稍后将其转换为处理程序的参数。
- en: 'The function continues with the checking whether the fragment is defined. In
    the Node.js environment, we have to send the URL. However, since we will use the
    same code in the browser, we define a `getFragment` helper method:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数继续检查片段是否已定义。在Node.js环境中，我们必须发送URL。但是，由于我们将在浏览器中使用相同的代码，我们定义了一个`getFragment`辅助方法：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The main idea of this helper is to get the current URL of the browser by using
    the global `window.location` object. You may notice another `clearSlashes` function.
    It does exactly what its name suggests. It removes the unnecessary slashes from
    the beginning and end of the string:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个辅助程序的主要思想是通过使用全局的`window.location`对象来获取浏览器的当前URL。您可能会注意到另一个`clearSlashes`函数。它确切地做了它的名字所暗示的。它从字符串的开头和结尾删除不必要的斜杠：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s get back to the `check` function. We will continue looping over the
    registered routes. For every route, we perform the following actions:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到`check`函数。我们将继续循环遍历已注册的路由。对于每个路由，我们执行以下操作：
- en: We prepare a regular expression by extracting the dynamic parts (if any); for
    example, `users/:id/:action` is transformed to `test/([\w-]+)/([\w-]+)`. We will
    use this later in the book.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通过提取动态部分（如果有）来准备一个正则表达式；例如，`users/:id/:action`被转换为`test/([\w-]+)/([\w-]+)`。我们将在本书中稍后使用这个。
- en: We check whether the regular expression matches the fragment. If it does, then
    we compose an array of parameters and call the route's handler.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们检查正则表达式是否与片段匹配。如果匹配，则我们组成一个参数数组并调用路由的处理程序。
- en: It's interesting that if we pass our own path (the fragment), we can use the
    same JavaScript in both the Node.js and browser environments.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，如果我们传递我们自己的路径（片段），我们可以在Node.js和浏览器环境中使用相同的JavaScript。
- en: 'The client side of the application will need two other methods. So far, we
    have routes'' registration and checking whether these rules match the URL specifically.
    This may work for the backend, but in the frontend, we need to constantly monitor
    the current browser location. That''s why we will add the following function:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的客户端将需要另外两种方法。到目前为止，我们已经注册了路由并检查这些规则是否特定匹配URL。这对于后端可能有效，但在前端，我们需要不断监视当前浏览器位置。这就是为什么我们将添加以下功能：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: By using `setInterval`, we will run the `fn` closure again and again. It checks
    whether the current URL has changed, and if it has, then it fires the `check`
    method, which has already been explained.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`setInterval`，我们将再次运行`fn`闭包。它检查当前URL是否已更改，如果是，则触发`check`方法，这已经解释过了。
- en: 'The last addition to the class is the `navigate` function:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 该类的最后一个添加是`navigate`函数：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We will probably want to change the current page from within our code. The router
    is a good instrument for this. Once we change the browser's URL, the class automatically
    calls the right handler. The preceding code uses the HTML5 history API ([http://diveintohtml5.info/history.html](http://diveintohtml5.info/history.html)).
    The `pushState` method changes the string of the browser's address bar.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能希望在代码中更改当前页面。路由是一个很好的工具。一旦我们更改浏览器的URL，该类就会自动调用正确的处理程序。上述代码使用了HTML5历史API（[http://diveintohtml5.info/history.html](http://diveintohtml5.info/history.html)）。`pushState`方法会更改浏览器地址栏的字符串。
- en: Adding the `navigate` method, we finalized our router, which is a module that
    can be used in the backend as it is in the frontend. Before we continue with the
    Model-View-Controller components, we will briefly introduce Ractive.js—the framework
    that we will use as a driving power for user interface development.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加`navigate`方法，我们完成了我们的路由器，它是一个可以在后端和前端使用的模块。在继续介绍模型-视图-控制器组件之前，我们将简要介绍Ractive.js—我们将用作用户界面开发的驱动力的框架。
- en: Introducing Ractive.js
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Ractive.js
- en: Ractive.js is a framework developed by TheGuardian, a well-known news organization
    ([http://www.theguardian.com/](http://www.theguardian.com/)). It simplifies the
    DOM interaction and provides features like two-way data binding and custom component
    creation. We are not going to cover all the capabilities of the framework now.
    A new feature will be introduced in later chapters.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Ractive.js是由著名新闻机构TheGuardian开发的框架（[http://www.theguardian.com/](http://www.theguardian.com/)）。它简化了DOM交互，并提供了诸如双向数据绑定和自定义组件创建等功能。我们现在不打算涵盖框架的所有功能。新功能将在后面的章节中介绍。
- en: 'In complex web applications like ours, it is extremely important to split different
    logical parts into components. Thankfully, Ractive.js provides an interface for
    this. Here is how a typical component looks:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在像我们这样的复杂Web应用程序中，将不同的逻辑部分拆分成组件非常重要。幸运的是，Ractive.js为此提供了一个接口。以下是典型组件的外观：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `template` property contains an HTML markup or (as in our case) a precompiled
    template. The data object is accessible inside our templates. Ractive.js uses
    **mustache** ([http://mustache.github.io/](http://mustache.github.io/)) as a template
    language. We can add another property called `el` and directly choose where the
    component will be rendered after initialization. However, there is another way—the
    `render` method. This method accepts a DOM element. In the preceding code, this
    is just the body of the page.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`template`属性包含HTML标记或（在我们的情况下）预编译模板。数据对象可以在我们的模板中访问。Ractive.js使用**mustache**（[http://mustache.github.io/](http://mustache.github.io/)）作为模板语言。我们可以添加另一个名为`el`的属性，并直接选择组件在初始化后将呈现的位置。然而，还有另一种方式—`render`方法。该方法接受一个DOM元素。在上述代码中，这只是页面的body。'
- en: 'Similarly, like the DOM tree in the browser, we will need the nesting of the
    components. This is nicely handled by the framework by introducing a custom tag
    definition, as demonstrated in the following example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 与浏览器中的DOM树类似，我们需要组件的嵌套。框架通过引入自定义标签定义来很好地处理了这一点，如下例所示：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Every component may have a hash map object (`components`) that defines our
    custom tags. We can nest as many components as we want. The HTML produced by the
    preceding code is as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组件可能都有一个哈希映射对象（`components`），用于定义我们的自定义标签。我们可以嵌套任意多个组件。上述代码生成的HTML如下所示：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'There are several ways to establish communication between different Ractive.js
    components. The most convenient one involves triggering and listening to events.
    Let''s check the following code snippet:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的Ractive.js组件之间建立通信的几种方式。最方便的一种方式是触发和监听事件。让我们来看一下以下代码片段：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We brought up a few new concepts. First, we defined a public function—`notifyTheOutsideWorld`.
    Ractive.js allows you to register custom methods. With the `on` method, we subscribed
    to a specific event, and with `fire`, we dispatched events.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提出了一些新概念。首先，我们定义了一个公共函数—`notifyTheOutsideWorld`。Ractive.js允许您注册自定义方法。使用`on`方法，我们订阅了特定事件，并使用`fire`来分发事件。
- en: In the preceding example, we used another method that has not been explained
    so far. The `set` function modifies the data object of the component. We will
    use this function regularly.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们使用了另一个到目前为止尚未解释的方法。`set`函数修改了组件的数据对象。我们将经常使用这个函数。
- en: 'The last thing about Ractive.js that we will mention in this chapter is its
    function of observing the changes in the component''s data properties. The following
    code demonstrates the observation of the `title` property:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Ractive.js，我们在本章中要提到的最后一件事是它观察组件数据属性变化的功能。下面的代码演示了对`title`属性的观察：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding example shows an `alert` window with the `Hello!` text. Let's
    continue with the process of defining the main application's file, or in other
    words, the client-side entry point of our social network.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例显示了一个带有`Hello!`文本的`alert`窗口。让我们继续定义主应用程序文件的过程，换句话说，我们的社交网络的客户端入口点。
- en: Constructing the entry point of the application
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建应用程序的入口点
- en: 'While we were constructing the Gulp setup, we created a task for JavaScript
    bundling. Browserify needs an entry point to resolve dependencies. We set `frontend/js/app.js`.
    Similarly, for the backend, we will build our logic around the router. The following
    code sets two routes and provides a helper function to render the Ractive.js component
    on the page:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建Gulp设置时，我们为JavaScript捆绑创建了一个任务。Browserify需要一个入口点来解析依赖关系。我们设置为`frontend/js/app.js`。同样，对于后端，我们将围绕路由构建我们的逻辑。以下代码设置了两个路由，并提供了一个辅助函数来在页面上呈现Ractive.js组件：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We require the `Router` variable at the top. Along with this, we need to fetch
    the controller responsible for the home page. We will learn more about this in
    the next section. For now, we will just say that it is a Ractive.js component.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在顶部引入`Router`变量。除此之外，我们还需要获取负责主页的控制器。我们将在下一节中详细了解这一点。现在，我们只会说它是一个Ractive.js组件。
- en: We don't want to run any JavaScript until the resources of the page are fully
    loaded. So, we will wrap our bootstrapping code in a `window.onload` handler.
    The holder of the Ractive.js components will be the `body` tag and we will create
    a reference to it. We defined a helper function called `showPage`. Its job is
    to render the current page and make sure that the page that was last added is
    removed properly. The `teardown` method is a built-in function of the framework.
    It unrenders the component and removes all the event handlers.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望在页面资源完全加载之前运行任何JavaScript。因此，我们将在`window.onload`处理程序中包装我们的引导代码。Ractive.js组件的持有者将是`body`标签，我们将创建对它的引用。我们定义了一个名为`showPage`的辅助函数。它的工作是呈现当前页面并确保最后添加的页面被正确移除。`teardown`方法是框架的内置函数。它取消呈现组件并删除所有事件处理程序。
- en: For this chapter, we will have only one page—the home page. We will use the
    router that we created for the backend and register a `/home` route. The second
    handler that we pass to the `add` function is basically called in case there is
    no matching route. What we did was immediately forward the user to the `/home`
    URL. In the end, we triggered the router's listening and fired the initial check.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将只有一个页面-主页。我们将使用我们为后端创建的路由器并注册一个`/home`路由。我们传递给`add`函数的第二个处理程序基本上是在没有匹配路由的情况下调用的。我们所做的是立即将用户转发到`/home`
    URL。最后，我们触发了路由器的监听并触发了初始检查。
- en: In the next section, we will define our first controller—the component that
    will control our home page.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将定义我们的第一个控制器-将控制我们的主页的组件。
- en: Defining a controller
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义控制器
- en: 'The role of controllers in our context will be to orchestrate the pages. In
    other words, they will act as page wrappers that manage the processes that happen
    between subcomponents. The content of the `controllers/Home.js` file is as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的上下文中，控制器的作用将是编排页面。换句话说，它们将充当管理子组件之间发生的过程的页面包装器。`controllers/Home.js`文件的内容如下：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Before you go through the properties of the template and components, we have
    to say a few words about `onrender`. The Ractive.js components provide an interface
    to define handlers for processes that happen internally at each stage of the component's
    life cycle. For example, we will need to perform some actions almost every time
    after the component is rendered on the page. Also, there are `onconstruct`, `onteardown`,
    or `onupdate`. This is surely a nice way to implement business logic. All properties
    such as these are listed in the official documentation of the framework at [http://docs.ractivejs.org/latest/options](http://docs.ractivejs.org/latest/options).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在您查看模板和组件的属性之前，我们必须对`onrender`说几句话。Ractive.js组件提供了一个接口，用于定义在组件生命周期的每个阶段内部发生的处理程序。例如，我们几乎每次在组件呈现在页面上后都需要执行一些操作。还有`onconstruct`，`onteardown`或`onupdate`。这无疑是实现业务逻辑的一种好方法。所有这些属性都在框架的官方文档中列出，网址为[http://docs.ractivejs.org/latest/options](http://docs.ractivejs.org/latest/options)。
- en: 'We already mentioned the `template` property while introducing you to Ractive.js.
    However, in the following code we do not have a string as a value. We require
    another JavaScript file—the precompiled HTML template. The precompilation is done
    by the build system Gulp in the following way:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在向您介绍Ractive.js时已经提到了`template`属性。但是，在下面的代码中，我们没有一个字符串作为值。我们需要另一个JavaScript文件-预编译的HTML模板。预编译是由构建系统Gulp完成的，如下所示：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will get all the HTML files from the `frontend/tpl` directory and convert
    them to JavaScript files that Ractive.js and Browserify understand. In the end,
    Gulp creates a file with the same name in the same directory but with a different
    extension. For example, the template for our home page can be as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`frontend/tpl`目录获取所有HTML文件，并将它们转换为Ractive.js和Browserify理解的JavaScript文件。最后，Gulp在同一目录中创建一个具有相同名称但扩展名不同的文件。例如，我们的主页模板可以如下所示：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'When we run `gulp` in the terminal, we will get `frontend/tpl/home.js` with
    the following content:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在终端中运行`gulp`时，我们将得到`frontend/tpl/home.js`，其内容如下：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We do not have to fully understand what these properties mean. The conversion
    of the JavaScript file to HTML is a job that is reserved for the framework.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不必完全理解这些属性的含义。将JavaScript文件转换为HTML是框架预留的工作。
- en: If you check the template and component definition in the preceding code, you
    will notice that there are two subcomponents, `navigation` and `appfooter`. Let's
    see how to create them.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您检查前面代码中的模板和组件定义，您会注意到有两个子组件，`navigation`和`appfooter`。让我们看看如何创建它们。
- en: Managing our views
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理我们的视图
- en: Again, the views are Ractive.js components. They have their own templates. In
    fact, the `Home.js` module can also be called a view. The Model-View-Controller
    pattern in the browser is often transformed, and it does not follow the exact
    definitions. This is the case with our application because we are using a framework
    that has some rules and which provides specific functionalities that do not align
    with the typical MVC. Of course, there is nothing wrong with this. As long as
    we separate the responsibilities, our architecture will be in good shape.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，视图是Ractive.js组件。它们有自己的模板。事实上，`Home.js`模块也可以被称为视图。浏览器中的模型-视图-控制器模式经常会发生变化，并且不遵循精确的定义。这在我们的应用程序中是这样的，因为我们使用的框架有一些规则，并且提供了一些特定的功能，这些功能与典型的MVC不一致。当然，这并没有什么问题。只要我们分开责任，我们的架构就会很好。
- en: 'The `navigation` view is fairly simple. It just defines the template that needs
    rendering:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`navigation`视图相当简单。它只定义了需要呈现的模板：'
- en: '[PRE22]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In order to make things more interesting and introduce the model''s definition,
    we will display a version number in the footer. This number will come from a model
    created in `models/Version.js`. Here is the code of the `views/Footer.js` file:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使事情更有趣并引入模型的定义，我们将在页脚中显示一个版本号。这个数字将来自于在`models/Version.js`中创建的模型。以下是`views/Footer.js`文件的代码：
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Before explaining what exactly happened with `bindComponent`, let''s check
    what we have in `tpl/footer.html`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释`bindComponent`到底发生了什么之前，让我们来看看`tpl/footer.html`中有什么：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We have a dynamic variable, `version`. In case we do not use a model, we have
    to define it in the `data` property of the component or use `this.set('data',
    value)`. However, the `FooterModel` module will make our life easier and update
    the variables of the component that are bound to it. This is why we are passing
    this module to `bindComponent`. The `fetch` method, as we will see in the next
    section, synchronizes the model's data with the data in the backend.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个动态变量，`version`。如果我们不使用模型，我们必须在组件的`data`属性中定义它，或者使用`this.set('data', value)`。然而，`FooterModel`模块将使我们的生活更轻松，并更新与其绑定的组件的变量。这就是为什么我们将这个模块传递给`bindComponent`的原因。正如我们将在下一节中看到的，`fetch`方法将模型的数据与后端的数据同步。
- en: Creating a model
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个模型
- en: 'We will probably have several models and all of them will share the same methods.
    Normally, the models make HTTP requests to the server and get data. So, this is
    something that we need to abstract. Thankfully, Ractive.js makes it possible for
    you to extend components. Here is the code for the `models/Version.js` file:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会有几个模型，它们都将共享相同的方法。通常，模型向服务器发出HTTP请求并获取数据。所以，这是我们需要抽象的东西。幸运的是，Ractive.js使您能够扩展组件。这是`models/Version.js`文件的代码：
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We have `models/Base.js`, the file that will contain these common functions.
    It will be a base class that we will later inherit.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有`models/Base.js`，这个文件将包含这些通用函数。它将是一个基类，我们稍后会继承它。
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We defined two methods—`fetch` and `bindComponent`. The first one uses a helper
    Ajax wrapper. We are not going to go into the details of this for now. It's similar
    to jQuery's `.ajax` method and it implements the promise interface pattern. The
    actual source code can be found in the files that came with this book.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了两个方法——`fetch`和`bindComponent`。第一个使用一个辅助的Ajax包装器。我们现在不打算深入讨论这个细节。它类似于jQuery的`.ajax`方法，并实现了promise接口模式。实际的源代码可以在随本书提供的文件中找到。
- en: The component that extends the `Base` module should provide a URL. This is the
    endpoint where the model will make requests. In our case, this is `/api/version`.
    Our backend will serve content on this URL.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展`Base`模块的组件应该提供一个URL。这是模型将发出请求的终点。在我们的情况下，这是`/api/version`。我们的后端将在这个URL上提供内容。
- en: 'If you go back and check what we did with the URLs starting with `/api`, we
    will see that the result is just an empty object. Let''s change this and cover
    the implementation of the `/api/version` route. We will update `backend/API.js`
    as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回头检查我们对以`/api`开头的URL所做的事情，你会发现结果只是一个空对象。让我们改变这一点，覆盖`/api/version`路由的实现。我们将更新`backend/API.js`如下：
- en: '[PRE27]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We used the same router to map the URL to the specific response. So, after this
    change, our model will fetch `0.1` as a value.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用相同的路由器将URL映射到特定的响应。所以，在这个改变之后，我们的模型将获取`0.1`作为值。
- en: 'Finally, let''s reveal the magic that happens in the `bindComponent` function:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们揭示`bindComponent`函数中发生的魔法：
- en: '[PRE28]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We observe the local `data` property value for changes. It is updated after
    a successful `fetch` method call. The new value is passed to the handler and we
    simply transfer the variables to the component. They are just a few lines of code,
    but they manage to bring about a nice abstraction. In the actual model definition,
    we only have to specify the URL. The `Base` module takes care of the rest.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们观察本地`data`属性值的变化。在成功的`fetch`方法调用后进行更新。新值传递给处理程序，我们只是将变量传递给组件。这只是几行代码，但它们成功地带来了一个很好的抽象。在实际的模型定义中，我们只需要指定URL。`Base`模块会处理其余部分。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we constructed the base of our application. We also created
    the base of our system—the router. The controllers are now nicely bound to routes
    and the views are rendered on the page, updating the display automatically when
    changes are made to the values in the model. We also introduced a simple model
    that gets data from the backend's API.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了我们应用程序的基础。我们还创建了我们系统的基础——路由器。控制器现在很好地绑定到路由，并且视图在页面上呈现，当模型的值发生变化时，显示会自动更新。我们还引入了一个简单的模型，它从后端的API获取数据。
- en: In the next chapter, we will implement a real working feature—we will manage
    the users of our system.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将实现一个真正有效的功能——我们将管理我们系统的用户。
