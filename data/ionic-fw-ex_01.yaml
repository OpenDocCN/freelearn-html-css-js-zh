- en: Chapter 1. First Look at Ionic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章. 初识Ionic
- en: Before we begin this book, it is very important that we understand just exactly
    what we are dealing with. The best way to understand this is by having a short
    history on mobile development, in general, and understand how tools like Ionic
    help mobile developers create beautiful mobile apps.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始这本书之前，了解我们正在处理的内容非常重要。了解这个问题的最好方式是通过简要回顾移动开发的历史，并了解像Ionic这样的工具如何帮助移动开发者创建美观的移动应用程序。
- en: The beginning
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始
- en: The year 2006 saw the beginning of the smartphone era with the launch of the
    iPhone by Apple. By 2008, Google had launched its answer to Apple's iOS operating
    system. This new operating system was called **Android**, and by 2010, it was
    clear that smartphones running iOS and Android dominantly covered the mobile ecosystem.
    Fast forward to today, the dominance of iOS and Android is not so different even
    though Windows for mobile by Microsoft has made some gains on the mobile front.
    It is fair to say that Android, iOS, and Windows make up the majority of the ecosystem
    with the first two at the forefront by a large margin.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 2006年，随着苹果公司推出iPhone，智能手机时代开始了。到2008年，谷歌推出了对苹果iOS操作系统的回应。这个新的操作系统被称为**Android**，到2010年，iOS和Android主导的智能手机在移动生态系统中占据了主导地位。快进到今天，尽管微软的Windows移动在移动领域取得了一些进展，但iOS和Android的统治地位并没有太大变化。可以说，Android、iOS和Windows构成了生态系统的主体，其中前两者以很大的优势处于前沿。
- en: The launch of the smartphone era also gave birth to the concept of mobile applications.
    Mobile apps are the medium by which we deliver and obtain most of our content
    on mobile phones. They are great and everyone with a smartphone pretty much has
    a number of apps downloaded on their devices to perform specific actions or achieve
    specific goals. This was massive for developers, and the software vendors also
    provided tools that enabled developers to create their own third-party mobile
    apps for users. We refer to these applications, built using the tools provided
    by the software vendors, as **native mobile applications**.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 智能手机时代的到来也催生了移动应用程序的概念。移动应用程序是我们通过手机获取和传递大部分内容的中介。它们非常出色，几乎每个智能手机用户都在他们的设备上下载了多个应用程序来执行特定操作或实现特定目标。这对开发者来说是一个巨大的机遇，软件供应商也提供了工具，使开发者能够为用户创建自己的第三方移动应用程序。我们把这些使用软件供应商提供的工具构建的应用程序称为**原生移动应用程序**。
- en: The problem
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: 'As great as mobile apps are, there is a small problem with how they are developed.
    Firstly, for each mobile development platform, the software vendor provides its
    own unique set of tools to build applications for its platforms. We know these
    tools as SDKs. The following table shows how each platform differs in terms of
    tools and SDK options to create native mobile apps for their ecosystems:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管移动应用非常出色，但它们的发展方式存在一个小问题。首先，对于每个移动开发平台，软件供应商都提供自己独特的一套工具来为其平台构建应用程序。我们把这些工具称为SDK。下表展示了每个平台在工具和SDK选项方面的差异，以及如何为它们的生态系统创建原生移动应用程序：
- en: '| Operating system | SDK | Programming language |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 操作系统 | SDK | 编程语言 |'
- en: '| --- | --- | --- |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| iOS | iOS SDK | Objective-C/Swift |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| iOS | iOS SDK | Objective-C/Swift |'
- en: '| Android | Android SDK | JAVA |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| Android | Android SDK | JAVA |'
- en: '| Windows for mobile | Windows SDK | .NET |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| Windows for mobile | Windows SDK | .NET |'
- en: To make a clear statement, we are not trying to downplay the use of native tools.
    As noted earlier, native tools are great but come with a great cost and time constraint.
    Firstly, you are unable to build the same app for different platforms with the
    same set of tools. For the Android version of your app, you will need a team of
    skilled android developers. For the iOS version of your app, you will need a team
    of Objective-C or Swift developers to create the iOS version of the same app.
    Also, there is no code sharing between these two teams, meaning that a feature
    developed on one platform will have to be completely developed on the other platform
    again. This is highly inefficient in terms of development and very time consuming.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了明确表达，我们并不是试图贬低原生工具的使用。如前所述，原生工具虽然很好，但代价高昂且时间紧迫。首先，你不能使用同一套工具为不同的平台构建相同的应用程序。对于你的应用程序的Android版本，你需要一支熟练的Android开发者团队。对于iOS版本，你需要一支Objective-C或Swift开发者团队来创建相同应用程序的iOS版本。此外，这两个团队之间没有代码共享，这意味着在一个平台上开发的功能必须完全在另一个平台上再次开发。这在开发方面非常低效，且耗时很长。
- en: Another problem is that because you are hiring two separate teams that are completely
    independent of one another even though they are both trying to create the same
    thing, you are left with a growing cost. For example, if you decided you wanted
    to create a Windows for mobile version of your mobile app, you will need to recruit
    another team of .NET developers and they will have to build everything present
    on the other existing platforms from scratch since they cannot reuse any of the
    already built tools.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是因为你雇佣了两个完全独立的团队，尽管他们都在尝试创造相同的东西，但你却面临不断上升的成本。例如，如果你决定你想为你的移动应用创建一个移动版的Windows，你需要招募另一个.NET开发团队，他们必须从头开始构建其他现有平台上的所有内容，因为他们不能重用任何已经构建的工具。
- en: For a company like Facebook, which makes revenue in the billions, it might make
    sense to go down the native path as cost and talent for native development would
    probably not be a part of their concern. However, for the most part, not everyone
    building or trying to build a mobile app is a company like Facebook. Most people
    want to get a simple, great, powerful app out there as quick as possible. Furthermore,
    some of these people want to use their preexisting skill set to build apps for
    multiple platforms without having to learn new programming languages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像Facebook这样的公司来说，它以数十亿美元的收入为生，选择原生开发路径可能是有意义的，因为原生开发的成本和人才可能不是他们关心的问题。然而，对于大多数人来说，他们想要尽快推出一个简单、出色、强大的应用。此外，有些人希望利用他们现有的技能集为多个平台构建应用，而无需学习新的编程语言。
- en: Before mobile applications, web apps ruled the world for the most part. We had
    more people developing for the web technologies consisting mostly of HTML, CSS,
    and JavaScript. One great thing we got used to with the web was that it was platform
    independent. This meant that as long as you had a browser application on any device,
    you were able to interact with any web application without any problem.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动应用出现之前，Web应用在很大程度上统治了世界。我们拥有更多人为Web技术开发，这些技术主要由HTML、CSS和JavaScript组成。我们习惯于Web的一个伟大之处在于它的平台无关性。这意味着只要你在任何设备上有一个浏览器应用程序，你就能无任何问题地与任何Web应用进行交互。
- en: '![The problem](img/00002.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![问题](img/00002.jpeg)'
- en: So when mobile apps came, it was a big change for most web developers because
    with mobile apps, each platform was self-dependent, and apps made for one platform
    would not work for another platform.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当移动应用出现时，这对大多数Web开发者来说是一个巨大的变化，因为移动应用每个平台都是自给自足的，为某个平台制作的移动应用在另一个平台上将无法工作。
- en: Apache Cordova
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache Cordova
- en: Apache Cordova is a technology that lets any web application be packaged as
    a native mobile application while also providing access to device features. Thanks
    to Adobe and the open source community, this technology has seen great growth
    over the years and more and more apps are being built with Cordova. The apps built
    with Cordova are commonly referred to as **hybrid applications**. But what is
    a hybrid app?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Cordova是一种技术，它允许任何Web应用被打包成原生移动应用，同时提供对设备功能的访问。多亏了Adobe和开源社区，这项技术在过去几年中取得了巨大的增长，越来越多的应用正在使用Cordova构建。用Cordova构建的应用通常被称为**混合应用**。但什么是混合应用呢？
- en: A hybrid application in the context of Cordova is actually a web app that lives
    within the thin container of a native mobile application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cordova的上下文中，混合应用实际上是一个存在于原生移动应用薄容器中的Web应用。
- en: In reality, the only difference between a native mobile app and a web application
    in terms of what they can do is the fact that the native mobile app has access
    to the device hardware features.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，在它们能做什么方面，原生移动应用和Web应用之间唯一的区别是原生移动应用可以访问设备硬件功能。
- en: '![Apache Cordova](img/00003.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Apache Cordova](img/00003.jpeg)'
- en: In truth, a hybrid app is actually a native app that serves up a web application
    on the phone's web view. It behaves and acts like a normal application and has
    complete device access, thanks to Cordova.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，混合应用实际上是一个在手机浏览器视图中提供Web应用的本地应用。它表现得像一个正常的应用程序，并且可以完全访问设备功能，这要归功于Cordova。
- en: However, the main advantage that Cordova has over native development techniques
    is that you only have to maintain one code base, and can use that same code base
    to build applications for multiple platforms. This was and still is the main selling
    point of Cordova to date, as with this technique you are provided with a big cost
    and time saving advantage.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Cordova 相比于原生开发技术的主要优势在于，你只需要维护一个代码库，并且可以使用这个相同的代码库为多个平台构建应用程序。这是 Cordova
    到目前为止的主要卖点，因为使用这种技术，你可以获得巨大的成本和时间节省优势。
- en: Early hybrid apps
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 早期的混合应用程序
- en: When the first few hybrid apps started rolling out, there were a couple of problems
    that seemed to persist. The first problem was that a lot of people complained
    that these hybrid applications did not have the same user interface and user experience
    as native mobile apps. The major reason for this was that when building a native
    app, all the building blocks are already provided for you. For example, we have
    things like pre-provided animations, swipe gestures, tabs, and so on. Hybrid apps
    failed to provide similar features like these because on the web, all we have
    is HTML, CSS, and JS. There is no pre-provided component for things like animations,
    gestures, and tabs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当第一批混合应用程序开始推出时，有几个问题似乎持续存在。第一个问题是很多人抱怨这些混合应用程序没有与原生移动应用程序相同的用户界面和用户体验。主要原因是在构建原生应用程序时，所有构建块都已经为你准备好了。例如，我们有预提供的动画、滑动手势、标签等。混合应用程序未能提供类似的功能，因为在网络上，我们只有
    HTML、CSS 和 JS。没有预提供的组件来处理动画、手势和标签等。
- en: This meant that pretty much anyone trying to build a hybrid app had to build
    these features from scratch. This was not very good and different people had different
    implementations of the same features. As a result, a lot of applications that
    were built by the hybrid way were not so visually appealing. What we needed was
    a framework that was centrally maintained that provided us with all the tools
    we needed to build features that native apps had with web technologies.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着几乎所有试图构建混合应用程序的人都必须从头开始构建这些功能。这并不好，不同的人对相同的功能有不同的实现。因此，许多通过混合方式构建的应用程序在视觉上并不吸引人。我们需要的是一个由中心维护的框架，它为我们提供了构建具有原生应用程序功能的网络技术所需的所有工具。
- en: What is Ionic?
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Ionic？
- en: Ionic is a framework that lets you build hybrid mobile applications with web
    technologies like HTML5, CSS, and JavaScript. But that is not where it stops with
    Ionic. Ionic provides you with components that you can use to build native-like
    features for your mobile applications. Think of Ionic as the SDK for making your
    Hybrid mobile application. Most of the features you have on a native app such
    as modals, gestures, popups, and many more, are all provided to you by Ionic and
    can be easily extended for new features or customized to suit your needs.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic 是一个框架，它允许你使用 HTML5、CSS 和 JavaScript 等网络技术构建混合移动应用程序。但 Ionic 的功能远不止于此。Ionic
    提供了你可以用来为移动应用程序构建类似原生功能的组件。将 Ionic 视为制作你的混合移动应用程序的 SDK。大多数你在原生应用程序上拥有的功能，如模态框、手势、弹出窗口等，都是由
    Ionic 提供的，并且可以轻松扩展以添加新功能或根据你的需求进行定制。
- en: Ionic itself does not grant you the ability to communicate with device features
    like GPS and camera; instead, it works side-by-side with Cordova to achieve this.
    Another great feature of Ionic is how loosely coupled all its components are.
    You can decide to use only some of Ionic on an already existing hybrid application
    if you wish to do so.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic 本身并不赋予你与设备功能如 GPS 和摄像头进行通信的能力；相反，它与 Cordova 并行工作以实现这一功能。Ionic 的另一个优点是它的所有组件耦合度都很低。如果你愿意，你可以选择只使用一些
    Ionic 来构建现有的混合应用程序。
- en: The Ionic framework is built with AngularJS, which is arguably the most well-tested
    and widely-used JavaScript framework out there. This feature is particularly powerful
    as it gives you all the goodness of Angular as part of any Ionic app you develop.
    In the past, architecting hybrid applications proved to be difficult, but with
    Angular, we can create our mobile applications using the **Single Page Application**
    (**SPA**) technique. Angular also makes it really easy to organize your application
    for the development and working across teams while providing you the possibility
    of easily adding custom features or libraries.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic框架是用AngularJS构建的，这可能是最经过测试和广泛使用的JavaScript框架。这个特性特别强大，因为它为您提供了Angular的所有优点，作为您开发的任何Ionic应用的一部分。在过去，构建混合应用证明是困难的，但有了Angular，我们可以使用**单页应用**（**SPA**）技术来创建移动应用。Angular还使组织您的应用以进行开发和跨团队协作变得非常容易，同时为您提供轻松添加自定义功能或库的可能性。
- en: Short history of Ionic
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ionic的简短历史
- en: Before we dive in, first let's revisit what we already know about hybrid applications
    and how they work. Remember that a hybrid mobile application is simply a web application
    that runs in a web view, within a thin native wrapper environment.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨之前，首先让我们回顾一下关于混合应用及其工作原理的知识。记住，混合移动应用实际上是一个运行在轻量级原生包装环境中的网页应用。
- en: Also remember that native apps came with already built components that enabled
    you to create beautiful user interfaces for mobile applications. Since hybrid
    apps used web technologies, there was no SDK or components provided for creating
    mobile UIs. The Ionic team saw this problem and created a solution in the form
    of the Ionic framework. The Ionic framework provides UI components to build beautiful
    hybrid applications.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 还要记住，原生应用已经内置了组件，使您能够为移动应用创建美观的用户界面。由于混合应用使用Web技术，没有提供SDK或组件来创建移动UI。Ionic团队看到了这个问题，并创建了一个解决方案，即Ionic框架。Ionic框架提供了UI组件来构建美观的混合应用。
- en: Features of Ionic
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ionic的功能
- en: 'Ionic provides you with a lot of cool neat features and tricks that help you
    create beautiful and well functioning hybrid apps in no time. The features of
    Ionic come under three categories:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic为您提供了许多酷炫的功能和技巧，帮助您快速创建美观且功能完善的混合应用。Ionic的功能可以分为三个类别：
- en: CSS features
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS功能
- en: JavaScript features
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript功能
- en: Ionic CLI
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ionic CLI
- en: CSS features
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: CSS功能
- en: To start off, Ionic comes stock with a great CSS library that provides you with
    some boilerplate styles. These Ionic CSS styles are generated with **SASS**, a
    CSS preprocessor for more advanced CSS style manipulation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Ionic自带一个优秀的CSS库，提供了一些样板样式。这些Ionic CSS样式是用**SASS**生成的，它是用于更高级CSS样式操作的CSS预处理器。
- en: 'Some of the cool CSS features that come built-in with Ionic include:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: ionic内置了一些酷炫的CSS功能，包括：
- en: Buttons
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮
- en: Cards
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卡片
- en: Header and footers
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题和页脚
- en: Lists
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表
- en: Forms elements
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单元素
- en: Grid system
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网格系统
- en: All these features and more, are already provided for you and are easily customizable.
    They also have the same look and feel that native equivalents have so you will
    not have to do any editing to make them look like native components.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些功能以及更多，都已经为您准备好，并且易于自定义。它们还具有与原生组件相同的视觉和感觉，因此您无需进行任何编辑即可使它们看起来像原生组件。
- en: JavaScript features
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: JavaScript功能
- en: The JavaScript features are at the very heart of the Ionic framework and essential
    for building Ionic apps. They also consist of other features that let you do things
    from under the hood like customize your application or even provide you with helper
    functions you can use to make developing your app more pleasant. A lot of these
    JavaScript features actually exist as HTML custom elements that make it easy to
    declaratively use these features.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript功能是Ionic框架的核心，对于构建Ionic应用至关重要。它们还包括其他功能，让您能够从底层进行操作，例如自定义您的应用或提供帮助函数，使您的应用开发更加愉快。实际上，许多这些JavaScript功能都作为HTML自定义元素存在，这使得声明式使用这些功能变得容易。
- en: 'Some of these features include:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些功能包括：
- en: Modal
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模态
- en: Slide box![JavaScript features](img/00004.jpeg)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滑块![JavaScript功能](img/00004.jpeg)
- en: Action sheet![JavaScript features](img/00005.jpeg)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作表![JavaScript功能](img/00005.jpeg)
- en: Side menu![JavaScript features](img/00006.jpeg)
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 侧边菜单![JavaScript功能](img/00006.jpeg)
- en: Tabs![JavaScript features](img/00007.jpeg)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签![JavaScript功能](img/00007.jpeg)
- en: Complex lists![JavaScript features](img/00008.jpeg)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂列表![JavaScript功能](img/00008.jpeg)
- en: Collection repeat
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合重复
- en: All the JavaScript features of Ionic are built with Angular, and most can be
    easily plugged in as Angular directives. Each of them also perform different actions
    that help you achieve specific functions and are all documented in the Ionic website.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic 的所有 JavaScript 功能都是用 Angular 构建的，并且大多数都可以轻松地作为 Angular 指令插入。每个功能也执行不同的操作，帮助你实现特定功能，并在
    Ionic 网站上都有文档说明。
- en: The Ionic CLI
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: The Ionic CLI
- en: This is the final part that makes up the three major arms of the Ionic framework.
    The Ionic CLI is a very important tool that lets you use the Ionic commands via
    the command line/terminal. It is also with the Ionic CLI that we get access to
    some Ionic features that make our app development process more streamlined. It
    is arguably the most important part of Ionic and it is also the feature you will
    use to do most actions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是构成 Ionic 框架三大支柱的最后一部分。Ionic CLI 是一个非常重要的工具，它允许你通过命令行/终端使用 Ionic 命令。它还使我们能够访问一些使我们的应用开发过程更加流畅的
    Ionic 功能。它可以说是 Ionic 中最重要的部分，也是你将用于执行大多数操作的功能。
- en: 'Ionic CLI features let you do the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic CLI 的功能让你可以执行以下操作：
- en: Create Ionic projects
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Ionic 项目
- en: Issue Cordova commands
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行 Cordova 命令
- en: Development and testing
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发和测试
- en: Ionic splash/Icon generator
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ionic 启动画面/图标生成器
- en: Ionic labs
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ionic 实验室
- en: SASS
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SASS
- en: Upload app to Ionic view
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用上传到 Ionic View
- en: Access `Ionic.IO` tools
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 `Ionic.IO` 工具
- en: The Ionic CLI is a very powerful tool and most of the time, it is the tool we
    will be using throughout this book to perform specific actions. This is why the
    first thing we are going to do is set up the Ionic CLI.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: The Ionic CLI 是一个非常强大的工具，在大多数情况下，我们将在这本书中使用它来执行特定操作。这就是为什么我们首先要做的是设置 Ionic CLI。
- en: Setting up Ionic
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Ionic
- en: 'The following steps will give a brief of how to setup Ionic:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将简要介绍如何设置 Ionic：
- en: '**Install NodeJS**: To set up Ionic, the first thing you will need to do is
    to install NodeJS on your computer so you can have access to **Node Package Manager**
    (**NPM**). If you already have node installed on your computer, you can skip this
    step and go to step 2\. To install NodeJS on your computer, perform the following
    steps:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 NodeJS**：要设置 Ionic，你首先需要在电脑上安装 NodeJS，以便你可以访问 **Node 包管理器**（**NPM**）。如果你已经在电脑上安装了
    NodeJS，你可以跳过此步骤并进入步骤 2。要在电脑上安装 NodeJS，请执行以下步骤：'
- en: Go to [www.nodejs.org](http://www.nodejs.org) and click on the latest stable
    version for your computer. That should download the latest version of NodeJS on
    your computer. Don't worry if you are on Mac, PC, or Linux, the correct one for
    your operating system will be automatically downloaded.
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 [www.nodejs.org](http://www.nodejs.org) 并点击适合你电脑的最新稳定版本。这应该在你的电脑上下载最新版本的
    NodeJS。如果你使用的是 Mac、PC 或 Linux，适合你操作系统的正确版本将被自动下载。不用担心，如果你使用的是 Mac、PC 或 Linux，正确的版本将自动下载。
- en: After the download is finished, install the downloaded software on your computer.
    You might need to restart your computer if you are running Windows.
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，在你的电脑上安装下载的软件。如果你使用的是 Windows，你可能需要重新启动电脑。
- en: Open up the terminal if you are on Mac/Linux or the Windows command line if
    you are on a Windows machine. Type the command `node –v` and press *Enter*.
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是 Mac/Linux，请打开终端；如果你使用的是 Windows，请打开命令行窗口。输入命令 `node –v` 并按 *Enter*。
- en: You should see the version number of your current installation of NodeJS. If
    you do not see a version number, this might mean that you have not correctly installed
    NodeJS and should try running step 1 again.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该能看到你当前 NodeJS 安装版本的版本号。如果你看不到版本号，这可能意味着你没有正确安装 NodeJS，应该尝试再次运行步骤 1。
- en: '**Install Ionic CLI**: The next step is to use NPM to install the Ionic CLI.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 Ionic CLI**：下一步是使用 NPM 安装 Ionic CLI。'
- en: 'Open a new terminal (OS X and Linux) or command-line (Windows) window and run
    the following command: `npm install ionic –g`. If you are on Linux/OS X, you might
    need to run `sudo npm install ionic –g`. This command will aim to install Ionic
    globally.'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Mac/Linux 上打开一个新的终端或 Windows 上的命令行窗口，并运行以下命令：`npm install ionic –g`。如果你使用的是
    Linux/OS X，你可能需要运行 `sudo npm install ionic –g`。此命令旨在全局安装 Ionic。
- en: After this has finished running, run the command `ionic –v` on your terminal/command
    line and press *Enter*.
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此运行完成后，在你的终端/命令行上运行命令 `ionic –v` 并按 *Enter*。
- en: You should see a version number of your Ionic CLI. This means that you have
    Ionic installed correctly and are good to go. If you are on a Windows machine,
    you might need to restart your machine to see the version number appear.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该能看到你的 Ionic CLI 的版本号。这意味着你已经正确安装了 Ionic，可以继续操作。如果你使用的是 Windows 机器，你可能需要重新启动机器才能看到版本号出现。
- en: If you did not see a version number, then you do not have Ionic installed correctly
    on your machine and should do step 2 again.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你没有看到版本号，那么你的机器上安装的 Ionic 不正确，应该再次执行步骤 2。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started off by getting to know a bit of background about
    mobile applications in general. We learned how native mobile applications work,
    how they are built with native SDKs, and how each platform is built with a completely
    different set of tools without any resource sharing between them all. We then
    went ahead and discussed briefly about Apache Cordova and how it aimed to solve
    the problem of cross-platform development.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先了解了一些关于移动应用程序的一般背景。我们学习了原生移动应用程序是如何工作的，它们是如何使用原生 SDK 构建的，以及每个平台是如何使用一套完全不同的工具构建的，它们之间没有任何资源共享。然后我们简要讨论了
    Apache Cordova 以及它旨在解决跨平台开发问题的方法。
- en: We then discussed exactly what Ionic means and what problems it aims to solve.
    We also got to discuss the CSS, JS, and Ionic CLI features of the Ionic framework
    lightly.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着讨论了 exactly what Ionic 的含义以及它旨在解决什么问题。我们还简要讨论了 Ionic 框架的 CSS、JS 和 Ionic
    CLI 特性。
- en: In the next chapter, we will be creating our very first Ionic application with
    the Ionic CLI, and we will create a nice to-do list style application with some
    great Ionic features.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用 Ionic CLI 创建我们的第一个 Ionic 应用程序，并且我们将创建一个具有一些出色 Ionic 特性的简洁待办事项列表应用程序。
