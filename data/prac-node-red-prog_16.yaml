- en: '*Chapter 13*: Creating and Publishing Your Own Node on the Node-RED Library'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第13章*：在Node-RED库中创建和发布自己的节点'
- en: So far, we have learned about Node-RED using the prepared nodes. In this chapter,
    you'll learn how to create your own node and publish it in a library. After completing
    the tutorials in this chapter, you will be able to publish your own node for use
    by various developers around the world.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了如何使用准备好的节点在Node-RED中进行操作。在本章中，您将学习如何创建自己的节点并将其发布到库中。完成本章的教程后，您将能够发布自己的节点供全球各地的开发人员使用。
- en: 'Let''s get started with the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下主题开始：
- en: Creating your own node
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您自己的节点
- en: Testing your own node in a local environment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地环境中测试您自己的节点
- en: Publishing your own node as a module on the Node-RED Library
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您自己的节点发布为Node-RED库中的模块
- en: By the end of this chapter, you will have mastered how to create your own node.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将掌握如何创建自己的节点。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To progress in this chapter, you will need the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本章中继续进行，您将需要以下内容：
- en: 'A GitHub account: [https://github.com/](https://github.com/).'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub帐户：[https://github.com/](https://github.com/)。
- en: 'An npm account: [https://www.npmjs.com/](https://www.npmjs.com/).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npm帐户：[https://www.npmjs.com/](https://www.npmjs.com/)。
- en: Node-RED (standalone in a local environment).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node-RED（在本地环境中独立运行）。
- en: An IBM Cloud account.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IBM Cloud帐户。
- en: The code used in this chapter can be found in `Chapter13` folder at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中使用的代码可以在[https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming)的`Chapter13`文件夹中找到。
- en: The steps of this tutorial are basically processed on Mac. If you use a Windows
    PC, please replace the commands and file path with your environment.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本教程的步骤基本上在Mac上进行处理。如果您使用Windows PC，请用您的环境替换命令和文件路径。
- en: Creating your own node
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您自己的节点
- en: Before developing a node, there is something you need to know first. The following
    policies are set for node development. Let's follow these and develop a node.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发节点之前，有一些事情您需要首先了解。为节点开发设置了以下策略。让我们遵循这些策略并开发一个节点。
- en: When creating a new node, you need to follow some general rules. They adhere
    to the approach adopted by the core nodes and provide a consistent user experience.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建新节点时，您需要遵循一些一般规则。它们遵循核心节点采用的方法，并提供一致的用户体验。
- en: 'You can check the rules for creating a node on the official Node-RED website:
    [https://nodered.org/docs/creating-nodes/](https://nodered.org/docs/creating-nodes/).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方Node-RED网站上查看创建节点的规则：[https://nodered.org/docs/creating-nodes/](https://nodered.org/docs/creating-nodes/)。
- en: Node program development
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 节点程序开发
- en: 'Node-RED nodes consist of two files: a JavaScript file that defines processing
    and an HTML file that provides a UI such as a setting screen. In the JavaScript
    file, the processing of the node you create is responsible for is defined as a
    function. This function is passed an object that contains node-specific properties.
    The HTML file describes the property settings screen displayed by the Node-RED
    flow editor. The settings values entered on the property settings screen displayed
    in this HTML file are called from the JavaScript file and processed.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED节点由两个文件组成：定义处理的JavaScript文件和提供UI（例如设置屏幕）的HTML文件。在JavaScript文件中，您创建的节点的处理由一个函数来定义。该函数接收一个包含特定于节点的属性的对象。HTML文件描述了Node-RED流编辑器显示的属性设置屏幕。在此HTML文件中显示的属性设置屏幕上输入的设置值从JavaScript文件中调用并进行处理。
- en: Here, we will create a GitHub repository, but if you just want to create a node,
    you don't need a GitHub repository. In this chapter, we will use the GitHub repository
    to publish the created node to the library, so I would like you to create the
    repository at the beginning of the step.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建一个GitHub存储库，但如果您只想创建一个节点，则不需要GitHub存储库。在本章中，我们将使用GitHub存储库将创建的节点发布到库中，因此我希望您在步骤开始时创建存储库。
- en: 'Please implement the following steps to create a GitHub repository:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤创建GitHub存储库：
- en: Go to [https://github.com/](https://github.com/) and log in with your GitHub
    account.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://github.com/](https://github.com/)并使用您的GitHub帐户登录。
- en: Select `node-red-contrib-<name representing a group of nodes>`, so specify the
    GitHub repository name accordingly. In this example, it is `node-red-contrib-taiponrock`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`node-red-contrib-<表示一组节点的名称>`，因此相应地指定GitHub存储库名称。在本例中，它是`node-red-contrib-taiponrock`。
- en: After specifying the repository name, set the repository disclosure range to
    **Public**, check the README file, and specify the license. In this example, it
    is created with the **Apache License 2.0**.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在指定存储库名称后，将存储库公开范围设置为**公共**，检查README文件，并指定许可证。在本例中，它是使用**Apache License 2.0**创建的。
- en: 'After setting everything, click the **Create repository** button to create
    a repository:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置完所有内容后，点击**创建存储库**按钮创建存储库：
- en: '![Figure 13.2 – The repository is created as a public project'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.2 – 存储库创建为公共项目'
- en: '](img/Figure_13.2_B16353.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.2_B16353.jpg)'
- en: Figure 13.2 – The repository is created as a public project
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2 – 存储库创建为公共项目
- en: You have now created your GitHub repository.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经创建了GitHub存储库。
- en: 'Now let''s clone the repository we just created to our local development environment
    by following these steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们按照以下步骤将我们刚刚创建的存储库克隆到我们的本地开发环境：
- en: Copy the repository URL to the clipboard. Click the green **Code** dropdown
    and click the **clipboard** button to copy the URL:![Figure 13.3 – Copy the URL
    to clone this repository
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将存储库URL复制到剪贴板。点击绿色的**Code**下拉菜单，然后点击**clipboard**按钮复制URL：![图13.3 – 复制克隆此存储库的URL
- en: '](img/Figure_13.3_B16353.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.3_B16353.jpg)'
- en: Figure 13.3 – Copy the URL to clone this repository
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3 – 复制克隆此存储库的URL
- en: Clone the repository locally (git clone) from a command-line interface (such
    as a terminal) where **Bash** can run.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行界面（如终端）本地克隆（git clone）存储库，其中**Bash**可以运行。
- en: 'Go to the working directory where you want to clone (copy) the repository.
    Here, I created a work directory under the `user` directory and moved to it:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到要克隆（复制）存储库的工作目录。在这里，我在`user`目录下创建了一个工作目录并切换到它：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Execute the `git clone` command with the URL of the repository you created
    earlier:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用之前创建的存储库的URL执行`git clone`命令：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When the clone is finished, use the `ls` command to confirm that it has been
    successfully cloned:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆完成后，使用`ls`命令确认克隆成功：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let's make a JavaScript file now.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个JavaScript文件。
- en: From here, we will create the actual node processing. But don't worry, we already
    have the code ready. The provided code is very simple for processing the node.
    It's just a matter of converting the string passed as input to lowercase.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，我们将创建实际的节点处理。但不用担心，我们已经准备好了代码。提供的代码非常简单，用于处理节点。只需将作为输入传递的字符串转换为小写。
- en: 'First, change to the directory of the cloned repository:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，切换到克隆存储库的目录：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Under this directory, create a file with the filename `node.js`, as shown in
    the following code:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此目录下，创建一个名为`node.js`的文件，如下所示：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`node.js` has been created.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`node.js`已创建。'
- en: Let's make an HTML file now.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个HTML文件。
- en: 'Create a file under the same directory with the filename `node.html`, as shown
    in the following code:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`node.js`和`node.html`创建的目录相同的位置创建一个名为`node.html`的文件，如下所示：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`node.html` has been created. This HTML file is responsible for the UI and
    design of the node you create. As mentioned previously, a node always consists
    of an HTML file and a JavaScript file.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`node.html`已创建。这个HTML文件负责创建的节点的用户界面和设计。如前所述，一个节点总是由一个HTML文件和一个JavaScript文件组成。'
- en: The node implementation has been almost completed. Next, let's package the created
    node so that it can be deployed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 节点实现几乎已经完成。接下来，让我们打包创建的节点，以便部署。
- en: Node packaging
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 节点打包
- en: Now that we've created the node processing (JavaScript) and appearance (HTML),
    it's time to package it. In Node-RED, the flow editor itself is a **Node.js**
    app, and each node running on it is also a Node.js app. In other words, the packaging
    here is processed using npm.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了节点处理（JavaScript）和外观（HTML），是时候打包了。在Node-RED中，流编辑器本身是一个**Node.js**应用程序，运行在其上的每个节点也是一个Node.js应用程序。换句话说，这里的打包是使用npm进行的处理。
- en: 'We won''t go into detail about npm here. If you want to know more about it,
    please visit the npm official website or refer to various technical articles:
    [https://www.npmjs.com/](https://www.npmjs.com/).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在这里详细介绍npm。如果您想了解更多信息，请访问npm官方网站或参考各种技术文章：[https://www.npmjs.com/](https://www.npmjs.com/)。
- en: 'Now, use the `npm` command to perform the following steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用`npm`命令执行以下步骤：
- en: 'npm initialization. Execute the following command in the same location as the
    directory where `node.js` and `node.html` were created:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: npm初始化。在创建`node.js`和`node.html`的目录中执行以下命令：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you run `npm init`, you will be asked for various parameters interactively,
    so enter them according to how you want to proceed. These are the parameters that
    I used:![](img/Table_13.1_B16353.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`npm init`时，将会交互式地询问各种参数，根据您的需求输入。这些是我使用的参数：![](img/Table_13.1_B16353.jpg)
- en: 'When you finish this step, the `npm init` command will generate a `package.json`
    file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，`npm init`命令将生成一个`package.json`文件：
- en: '![Figure 13.4 – npm init'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.4 – npm init'
- en: '](img/Figure_13.4_B16353.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.4_B16353.jpg)'
- en: Figure 13.4 – npm init
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4 – npm init
- en: 'Edit `package.json`. You will need to manually add Node-RED-specific settings
    to `package.json`. Open the `package.json` file with a text editor and add the
    new property at the same level as `"name"` and `"version"` in the JSON: `"node-red":
    {"nodes": "{" lower-case ":" node.js "} }`:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '编辑`package.json`。您需要手动向`package.json`中添加Node-RED特定的设置。用文本编辑器打开`package.json`文件，并在JSON的与`"name"`和`"version"`相同级别处添加新属性：`"node-red":
    {"nodes": "{" lower-case ":" node.js "} }`：'
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following screenshot can be used as a reference, which will help you in
    adding this property:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图可用作参考，可帮助您添加此属性：
- en: '![Figure 13.5 – Edit package.json'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.5 – 编辑package.json'
- en: '](img/Figure_13.5_B16353.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.5_B16353.jpg)'
- en: Figure 13.5 – Edit package.json
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5 – 编辑package.json
- en: This completes the packaging of your own node. Let's actually use this node
    in the next part.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了自己节点的打包。让我们在下一部分中实际使用这个节点。
- en: Testing your own node in a local environment
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地环境中测试您自己的节点
- en: You have already completed your own node. Let's add the nodes created so far
    to Node-RED in a local environment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经完成了自己的节点。让我们将迄今为止创建的节点添加到本地环境中的Node-RED中。
- en: For your own nodes, it is very important to check their operation locally. Publishing
    a node on the internet without making sure it works in your environment is not
    good for many developers.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于您自己的节点，非常重要的是在本地检查它们的运行情况。在不确定它在您的环境中是否正常工作的情况下，将节点发布到互联网对许多开发人员来说并不是一个好主意。
- en: So, in this section, you'll be testing your own node in your local environment.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本节中，您将在本地环境中测试自己的节点。
- en: Node installation
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 节点安装
- en: You can use the `npm link` command to test the node module locally. This allows
    you to develop nodes in your local directory and link them to your local Node-RED
    installation during development.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`npm link`命令在本地测试节点模块。这允许您在本地目录中开发节点，并在开发过程中将它们链接到本地Node-RED安装中。
- en: 'This is very simple. Follow these steps:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常简单。按照以下步骤进行：
- en: 'Execute the following command on the CLI to add a node and start Node-RED:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CLI上执行以下命令以添加一个节点并启动Node-RED：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will create the appropriate symbolic link to the directory and Node-RED
    will discover the node at boot time. Simply restart Node-RED to get the changes
    to the node's files.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建适当的符号链接到目录，并且Node-RED将在启动时发现节点。只需重新启动Node-RED即可获取节点文件的更改。
- en: Run the `node-red` command on the command line to start the local Node-RED.
    If it has already been started, restart it.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行上运行`node-red`命令以启动本地Node-RED。如果已经启动，请重新启动。
- en: 'You should see that a node called **lower case** has been added to the **function**
    category of the palette after rebooting:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动后，您应该看到一个名为**lower case**的节点已添加到调色板的**function**类别中：
- en: '![Figure 13.6 – The lower case node has been added'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.6 – 添加了小写节点'
- en: '](img/Figure_13.6_B16353.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.6_B16353.jpg)'
- en: Figure 13.6 – The lower case node has been added
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.6 – 添加了小写节点
- en: Let's see if it can be used properly. Create a flow by sequentially connecting
    each node of **inject** **lower case** **debug**.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看它是否可以正常使用。通过依次连接**inject** **lower case** **debug**的每个节点来创建一个流。
- en: For the properties of the **inject** node, set it to the character string type
    and set it to output any character string in all uppercase letters, for example,
    **MY NAME IS TAIJI**:![Figure 13.7 – Make a flow
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**inject**节点的属性，将其设置为字符串类型，并将其设置为输出任何全大写字母的字符串，例如**MY NAME IS TAIJI**：![图13.7
    – 创建一个流
- en: '](img/Figure_13.7_B16353.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.7_B16353.jpg)'
- en: Figure 13.7 – Make a flow
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.7 – 创建一个流
- en: 'When you deploy the created flow and execute the **inject** node, you can see
    that the all-uppercase string, as the parameter of this flow, is converted to
    an all-lowercase string and output to the **debug** tab:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当部署创建的流并执行**inject**节点时，您会看到作为此流参数的全大写字符串被转换为全小写字符串并输出到**debug**选项卡：
- en: '![Figure 13.8 – Result of this flow'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.8 – 这个流的结果'
- en: '](img/Figure_13.8_B16353.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.8_B16353.jpg)'
- en: Figure 13.8 – Result of this flow
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.8 – 这个流的结果
- en: Next, let's see how to customize a node.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何定制节点。
- en: Node customization
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 节点定制
- en: I was able to confirm that the node I created can be used in the local environment.
    From here, we will customize that node. It is possible to edit the function and
    appearance of the node by modifying JavaScript and HTML. These changes will take
    effect when you restart Node-RED.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我能够确认我创建的节点可以在本地环境中使用。从这里开始，我们将定制该节点。可以通过修改JavaScript和HTML来编辑节点的功能和外观。这些更改将在重新启动Node-RED时生效。
- en: Changing the node name
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改节点名称
- en: 'Currently, the node name of the created node is still a lower-case version
    of the sample program. Here, change this name to any name you like. Every node
    must have a unique name, so you should pick something that does not already exist.
    Follow these steps to change the name of the node:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，创建的节点的节点名称仍然是示例程序的小写版本。在这里，将此名称更改为您喜欢的任何名称。每个节点必须具有唯一名称，因此您应该选择尚不存在的名称。按照以下步骤更改节点的名称：
- en: Change `lower-case` described in the `package.json` file to your own node name.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`package.json`文件中描述的`lower-case`更改为您自己的节点名称。
- en: In the example, the repository of the node is `node-red-contrib-taiponrock`,
    so change it to the `taiponrock` node.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，节点的存储库是`node-red-contrib-taiponrock`，因此将其更改为`taiponrock`节点。
- en: 'This is how the `package.json` file looks before being modified:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这是修改前的`package.json`文件的样子：
- en: '![Figure 13.9 – Before modifying package.json'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.9 – 修改package.json前'
- en: '](img/Figure_13.9_B16353.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.9_B16353.jpg)'
- en: Figure 13.9 – Before modifying package.json
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.9 – 修改package.json前
- en: 'And this is how it looks after being modified:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的样子如下：
- en: '![Figure 13.10 – After modifying package.json'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.10 – 修改package.json后'
- en: '](img/Figure_13.10_B16353.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.10_B16353.jpg)'
- en: Figure 13.10 – After modifying package.json
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.10 – 修改package.json后
- en: Change `lower-case` and `LowerCaseNode` described in the `node.js` file to your
    own node name.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`node.js`文件中描述的`lower-case`和`LowerCaseNode`更改为您自己的节点名称。
- en: For example, change `lower-case` to `taiponrock` and `LowerCaseNode` to `TaiponrockNode`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，将`lower-case`更改为`taiponrock`，将`LowerCaseNode`更改为`TaiponrockNode`。
- en: 'This is how the `node.js` file looks before being modified:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是修改前的`node.js`文件的样子：
- en: '![Figure 13.11 – Before modifying node.js'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.11 – 修改node.js前'
- en: '](img/Figure_13.11_B16353.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.11_B16353.jpg)'
- en: Figure 13.11 – Before modifying node.js
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.11 – 修改node.js前
- en: 'This is how the `node.js` file looks like after being modified:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是修改后的`node.js`文件的样子：
- en: '![Figure 13.12 – After modifying node.js'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.12 – 修改node.js后'
- en: '](img/Figure_13.12_B16353.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.12_B16353.jpg)'
- en: Figure 13.12 – After modifying node.js
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.12 – 修改node.js后
- en: Change `lower-case` described in the `node.html` file to your own node name.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`node.html`文件中描述的`lower-case`更改为您自己的节点名称。
- en: For example, change `lower-case` to `taiponrock`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，将`lower-case`更改为`taiponrock`。
- en: 'This is how the `node.html` file looks before being modified:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是修改前的`node.html`文件的样子：
- en: '![Figure 13.13 – Before modifying node.html'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.13 – 修改node.html前'
- en: '](img/Figure_13.13_B16353.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.13_B16353.jpg)'
- en: Figure 13.13 – Before modifying node.html
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.13 – 修改node.html前
- en: 'This is how the `node.html` file looks after being modified:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是修改后的`node.html`文件的样子：
- en: '![Figure 13.14 – After modifying node.html'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.14 – 修改node.html后'
- en: '](img/Figure_13.14_B16353.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.14_B16353.jpg)'
- en: Figure 13.14 – After modifying node.html
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.14 – 修改node.html后
- en: 'After restarting Node-RED, you can see that it has been renamed correctly:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动Node-RED后，您会看到它已被正确重命名：
- en: '![Figure 13.15 – Your node has been renamed'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.15 – 您的节点已被重命名'
- en: '](img/Figure_13.15_B16353.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.15_B16353.jpg)'
- en: Figure 13.15 – Your node has been renamed
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.15 – 您的节点已被重命名
- en: Next, we will see how we can change the code of a particular node.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看如何更改特定节点的代码。
- en: Changing the node code
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改节点代码
- en: 'The main parts that implement node processing are as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 实现节点处理的主要部分如下：
- en: 'Change the code. You can change the processing of the node by rewriting `msg.payload
    = msg.payload.toLowerCase ();` defined in this part of `node.js`:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改代码。您可以通过重写`node.js`中定义的`msg.payload = msg.payload.toLowerCase();`来更改节点的处理：
- en: '[PRE9]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, to make the work easier to understand, let's change to a method that only
    returns the character string of your name or nickname.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，为了使工作更易于理解，让我们改为仅返回您的姓名或昵称的字符串的方法。
- en: 'Let''s rewrite `node.js` as follows:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将`node.js`重写如下：
- en: '[PRE10]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Execute the flow.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行该流。
- en: Now let's see if it has changed. Use the flow you created earlier. The **lower
    case** node in this flow has been changed to a node whose name and processing
    has been changed, but it needs to be redeployed and raised. To make it easier
    to understand, delete the node that was once the original **lower case** node
    and relocate it.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看它是否已更改。使用您之前创建的流程。此流程中的**lower case**节点已更改为更改了名称和处理的节点，但需要重新部署和提升。为了更容易理解，删除曾经是原始**lower
    case**节点的节点，并重新定位它。
- en: '![Figure 13.16 – Replace the node you created with the renamed node and execute
    it'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.16 - 用重命名的节点替换您创建的节点并执行它'
- en: '](img/Figure_13.16_B16353.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.16_B16353.jpg)'
- en: Figure 13.16 – Replace the node you created with the renamed node and execute
    it
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.16 - 用重命名的节点替换您创建的节点并执行
- en: Check the result. When you deploy the created flow and execute the **inject**
    node, you can see that the character string (name or nickname) that was set as
    a constant in this *Changing the node code* section is displayed in the **debug**
    tab.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查结果。当您部署创建的流程并执行**inject**节点时，您会看到在**debug**选项卡中显示了在*更改节点代码*部分中设置为常量的字符串（名称或昵称）。
- en: '![Figure 13.17 – Result of this flow'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.17 - 此流程的结果'
- en: '](img/Figure_13.17_B16353.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.17_B16353.jpg)'
- en: Figure 13.17 – Result of this flow
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.17 - 此流程的结果
- en: In the next section, we will see some other node customizing options that we
    can use.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到一些其他可以使用的节点自定义选项。
- en: Other customizing options
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他自定义选项
- en: 'In addition to the node name, you can customize your own node in a lot of different
    ways, such as node color, node icon, node category, node function, and so on.
    For details, please see this official document: [https://nodered.org/docs/creating-nodes/appearance](https://nodered.org/docs/creating-nodes/appearance).'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 除了节点名称，您还可以以许多不同的方式自定义自己的节点，例如节点颜色，节点图标，节点类别，节点功能等。有关详细信息，请参阅官方文档：[https://nodered.org/docs/creating-nodes/appearance](https://nodered.org/docs/creating-nodes/appearance)。
- en: Now that we have tested and customized the node in the local environment, let's
    publish the node in the Node-RED library.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在本地环境中测试和自定义了节点，让我们将节点发布到Node-RED库中。
- en: Publishing your own node as a module in the Node-RED Library
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您自己的节点发布为Node-RED库中的模块
- en: 'Here, we will publish the created node in the Node-RED library. To do that,
    some work is required. So far, you have created your own node and confirmed that
    it can be used only in your environment. However, since it is a unique node created
    by you, let''s publish it on the internet and have everyone in the world use it.
    To do this, you need to publish your own node to a location called the Node-RED
    library, which can be found here: [https://flows.nodered.org/](https://flows.nodered.org/).'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将在Node-RED库中发布创建的节点。为此，需要一些工作。到目前为止，您已经创建了自己的节点，并确认它只能在您的环境中使用。但是，由于这是您创建的唯一节点，让我们将其发布在互联网上，让世界上的每个人都可以使用它。为此，您需要将自己的节点发布到一个称为Node-RED库的位置，该位置可以在此处找到：[https://flows.nodered.org/](https://flows.nodered.org/)。
- en: Important note
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The Node-RED library is a community-based place to publish nodes and flows.
    Therefore, you should avoid exposing incomplete or useless nodes. This is because
    the Node-RED users should be able to find the nodes that they want, and it is
    not desirable to have a mix of unwanted nodes.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED库是一个社区发布节点和流的地方。因此，您应该避免暴露不完整或无用的节点。这是因为Node-RED用户应该能够找到他们想要的节点，而不希望有不需要的节点混合在一起。
- en: So, although this chapter will explain how to publish nodes, please avoid exposing
    test nodes or sample node-level ones.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，尽管本章将解释如何发布节点，请避免暴露测试节点或示例节点级别的节点。
- en: Publishing the node you created
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布您创建的节点
- en: 'Follow these steps to publish your own node in the Node-RED library:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在Node-RED库中发布您自己的节点：
- en: Maintain a `README.md` file.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 维护一个`README.md`文件。
- en: We will write the node description in the `README.md` file. English is the best
    language to write in, considering that English is a universal language.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`README.md`文件中写节点描述。考虑到英语是一种通用语言，最好用英语写。
- en: 'For example, it is desirable to describe the following contents:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，最好描述以下内容：
- en: Overview explanation
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概述解释
- en: How to use the node
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用节点
- en: Screenshot
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 屏幕截图
- en: Sample flow using this node
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用此节点的示例流
- en: Prerequisite environment
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先决条件环境
- en: Change log
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改日志
- en: 'In this section, since it is a hands-on tutorial, only the outline and usage
    will be written in the `README.md` file. Please update `README.md` with the following
    contents:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，由于这是一个实践教程，`README.md`文件中只会写概述和用法。请使用以下内容更新`README.md`：
- en: '[PRE11]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Upload files – make sure you have five files: `node.js`, `node.html`, `package.json`,
    `README.md`, and `LICENSE` in the directory (it doesn''t matter if `package.lock.json`
    is included):![Figure 13.18 – Check these five files'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传文件 - 确保您在目录中有五个文件：`node.js`，`node.html`，`package.json`，`README.md`和`LICENSE`（如果包括`package.lock.json`也没关系）：![图13.18
    - 检查这五个文件
- en: '](img/Figure_13.18_B16353.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.18_B16353.jpg)'
- en: '[PRE12]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Publish your node (`npm publish`).
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布您的节点（`npm publish`）。
- en: 'Now let''s expose the node as a module. Upload the set of files using the `npm`
    command. Again, work in the cloned repository directory:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将节点公开为模块。使用`npm`命令上传文件集。再次在克隆的存储库目录中工作：
- en: '[PRE13]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Register the created node from **Adding a node** of the Node-RED library.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Node-RED库的**添加节点**中注册创建的节点。
- en: 'In **Add your node to the Flow Library**, enter the name of the node you created
    and click the **add node** button:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**将您的节点添加到Flow库**中，输入您创建的节点的名称，然后单击**添加节点**按钮：
- en: '![Figure 13.21 – Add your node to the Node-RED library'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.21 - 将您的节点添加到Node-RED库'
- en: '](img/Figure_13.21_B16353.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.21_B16353.jpg)'
- en: Figure 13.21 – Add your node to the Node-RED library
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.21 - 将您的节点添加到Node-RED库
- en: 'When the registration is complete, you can see that the created node has been
    added to the library:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注册完成后，您会看到已创建的节点已添加到库中：
- en: '![Figure 13.22 – Your node has been published in the Node-RED library'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.22 - 您的节点已发布在Node-RED库中'
- en: '](img/Figure_13.22_B16353.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.22_B16353.jpg)'
- en: Figure 13.22 – Your node has been published in the Node-RED library
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.22 – 您的节点已在Node-RED库中发布
- en: It takes about 15 minutes for the registration of a new node. Please note that
    the node you registered via the Node-RED flow editor cannot be found without complete
    registration on the Node-RED library.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 新节点的注册大约需要15分钟。请注意，通过Node-RED流程编辑器注册的节点，如果在Node-RED库上没有完全注册，将无法找到。
- en: 'If you upgrade the version and publish it again, please refresh from your node''s
    page of the Node-RED Library and click **check for update** in the **Actions**
    panel on the right side of the node screen:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果升级版本并重新发布，请从Node-RED库的节点页面刷新，并在节点屏幕右侧的**操作**面板中单击**检查更新**：
- en: '![Figure 13.23 – Check for the update of your node''s status'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.23 – 检查节点状态更新'
- en: '](img/Figure_13.23_B16353.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.23_B16353.jpg)'
- en: Figure 13.23 – Check for the update of your node's status
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.23 – 检查节点状态更新
- en: Next, let's see how to delete the node published by you.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何删除您发布的节点。
- en: Deleting the node you published
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除您发布的节点
- en: Be careful when deleting published nodes. Currently (as of October 2020), according
    to npm's package unpublish policy, the unpublish deadline is within 24 to 72 hours
    of publication. In addition, it is possible to unpublish packages that have little
    effect on specific conditions, such as less than 300 downloads even for 72 hours
    or more.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 删除已发布的节点时要小心。目前（截至2020年10月），根据npm的包取消发布政策，取消发布的截止时间为发布后的24至72小时。此外，即使在72小时或更长时间内下载量少于300次，也有可能取消发布对特定条件影响不大的软件包。
- en: 'This information is expected to be updated from time to time, so please refer
    to the npm official website for the latest information: [https://www.npmjs.com/policies/unpublish](https://www.npmjs.com/policies/unpublish).'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息预计会不时更新，因此请参考npm官方网站获取最新信息：[https://www.npmjs.com/policies/unpublish](https://www.npmjs.com/policies/unpublish)。
- en: After unpublishing, please refresh from your node's page of the Node-RED library
    in the same way as when updating. Click the request refresh at the bottom of the
    **Actions** panel on the right side of the node screen.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 取消发布后，请像更新时一样从Node-RED库的节点页面刷新。单击节点屏幕右侧**操作**面板底部的**请求刷新**。
- en: 'To unpublish, execute the following command in the module directory (the directory
    of the cloned repository):'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要取消发布，请在模块目录（克隆存储库的目录）中执行以下命令：
- en: '[PRE14]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If this command completes successfully, the module unpublishing is successful.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此命令成功完成，则模块取消发布成功。
- en: Installing the node you published
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装您发布的节点
- en: It is recommended that you wait at least 15 minutes after completing adding
    your node to the **Node-RED Library**.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您在将您的节点添加到**Node-RED库**后等待至少15分钟。
- en: In Node-RED of the local environment, I reflected the self-made node so that
    it can be used as it is. I also published it to npm for publication and registered
    the node in the Node-RED library. Anyone should now be able to use this node.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地环境的Node-RED中，我反映了自制节点，以便可以直接使用。我还将其发布到npm进行发布，并在Node-RED库中注册了该节点。现在任何人都应该能够使用此节点。
- en: 'Here, let''s try and check whether the node created this time can be installed
    and used without any problems from Node-RED of IBM Cloud. Please follow these
    steps:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，让我们尝试并检查此次创建的节点是否可以从IBM Cloud的Node-RED中安装和使用，而不会出现任何问题。请按照以下步骤操作：
- en: Log into IBM Cloud, create a Node-RED service, and launch the Node-RED flow
    editor.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录IBM Cloud，创建Node-RED服务，并启动Node-RED流程编辑器。
- en: Open **Manage Palettes** in the flow editor:![Figure 13.24 – Access ing Manage
    palette
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在流程编辑器中打开**管理调色板**：![图13.24 – 访问管理调色板
- en: '](img/Figure_13.24_B16353.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.24_B16353.jpg)'
- en: Figure 13.24 – Access ing Manage palette
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.24 – 访问管理调色板
- en: Select the **Install** tab and start typing the name of your node you created
    in the search field.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**安装**选项卡，并开始在搜索字段中输入您创建的节点的名称。
- en: If the node you created is displayed in the search results, it means that it
    is open to the public and is the target of installation.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您创建的节点显示在搜索结果中，这意味着它是公开的，并且是安装的目标。
- en: Click the **Install** button to install.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**安装**按钮进行安装。
- en: 'If it is not displayed in the search results, you must have not waited for
    15 minutes after node registration. Please try again after 30 minutes or 1 hour.
    If you still do not find your node, there may be some other cause, so please review
    the procedure you have done so far and try again:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它未显示在搜索结果中，则您可能在节点注册后未等待15分钟。请在30分钟或1小时后再试一次。如果仍然找不到您的节点，则可能有其他原因，请检查您迄今为止所做的步骤，并再次尝试：
- en: '![Figure 13.25 – Search for and install your node'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.25 – 搜索并安装您的节点'
- en: '](img/Figure_13.25_B16353.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.25_B16353.jpg)'
- en: Figure 13.25 – Search for and install your node
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.25 – 搜索并安装您的节点
- en: Confirm that the node you created on the palette is installed, create a flow
    as shown in the following figure, and execute the **inject** node:![Figure 13.26
    – Make the flow
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认您在调色板上创建的节点已安装，创建如下图所示的流程，并执行**inject**节点：![图13.26 – 制作流程
- en: '](img/Figure_13.26_B16353.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.26_B16353.jpg)'
- en: Figure 13.26 – Make the flow
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.26 – 制作流程
- en: In the example, the self-made node is inserted between the flows prepared by
    default when the Node-RED flow editor is started for the first time.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，当首次启动Node-RED流程编辑器时，默认准备的流程之间插入了自制节点。
- en: 'After running the **inject** node, verify that the results are displayed in
    the **debug** window:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行**inject**节点后，请验证结果是否显示在**debug**窗口中：
- en: '![Figure 13.27 – Result of this flow'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.27 – 此流程的结果'
- en: '](img/Figure_13.27_B16353.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.27_B16353.jpg)'
- en: Figure 13.27 – Result of this flow
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.27 – 此流程的结果
- en: Great job! You now know how to make your own node and publish it.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！您现在知道如何制作自己的节点并发布它。
- en: Summary
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congrats! In this chapter, you learned how to create your own node, how to customize
    it, and how to set it from the Node-RED library or your local machine. Creating
    your own node wasn't as difficult as you might think. If you create the processing
    content and arrange the appearance based on this procedure, you can publish your
    own useful node that does not already exist and have developers all over the world
    use it!
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！在本章中，你学会了如何创建自己的节点，如何自定义它，以及如何从Node-RED库或本地机器设置它。创建自己的节点并不像你想象的那么困难。如果你根据这个过程创建处理内容并安排外观，你可以发布自己的有用节点，这些节点还不存在，并且全世界的开发者都可以使用它！
- en: Also, at the end of this book, I'll give you a brief introduction to the Node-RED
    user community, so be sure to check that out as well.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在本书的结尾，我会给你一个简要介绍Node-RED用户社区，所以一定要去了解一下。
