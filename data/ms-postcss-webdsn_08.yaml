- en: Chapter 8. Creating PostCSS Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。创建PostCSS插件
- en: Plugins, plugins…we can't escape them; by now, you will have seen that they
    are an essential part of developing within PostCSS. Its modular nature is built
    entirely around plugins, and is how we can streamline our processing through selective
    use of these plugins.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 插件，插件……我们无法避开它们；到目前为止，你已经看到它们是PostCSS开发中不可或缺的一部分。它的模块化特性完全围绕插件构建，这就是我们如何通过选择性地使用这些插件来简化我们的处理过程。
- en: In this chapter, we'll cover the anatomy of a PostCSS plugin and take a look
    at some pre-built examples, before embarking on the construction of a simple plugin
    that we can then test and submit for inclusion in the PostCSS system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍PostCSS插件的解剖结构，并查看一些预构建的示例，然后着手构建一个简单的插件，然后对其进行测试并提交以包含在PostCSS系统中。
- en: 'We will cover a number of topics throughout this chapter, which will include
    the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖多个主题，包括以下内容：
- en: Discovering how plugins can be used to extend PostCSS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现如何使用插件扩展PostCSS
- en: Examining the architecture of a standard plugin
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查标准插件的架构
- en: Creating a PostCSS plugin using the plugin boilerplate
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用插件模板创建PostCSS插件
- en: Building some example plugins
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一些示例插件
- en: Testing and submitting your plugin for inclusion in the PostCSS plugin library
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试并将你的插件提交到PostCSS插件库
- en: Exploring some examples of existing plugins available for PostCSS
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索一些现有的PostCSS插件示例
- en: Let's make a start…!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧…！
- en: Extending PostCSS with plugins
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用插件扩展PostCSS
- en: A question, how many times have you worked with plugins that by themselves don't
    actually achieve anything?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个问题，你有多少次与那些实际上并没有真正实现任何功能的插件一起工作过？
- en: I'll bet the answer won't be a high figure—and no, I'm not including those plugins
    that claim to perform an operation, yet don't seem to work for some reason! The
    power of PostCSS lies not in the core system, but the plugins that we use to manipulate
    our CSS style sheets.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我敢打赌答案不会是一个很高的数字——不，我并没有包括那些声称执行操作但实际上似乎因为某些原因不起作用的插件！PostCSS的力量不在于核心系统，而在于我们用来操作CSS样式表的插件。
- en: At the time of writing, there are more than 200 plugins available for use within
    PostCSS—these range from extending PostCSS (such as `postcss-nested` or `postcss-mixins`),
    to manipulating colors (such as `postcss-color-hcl` or `postcss-rgba-hex`), to
    plugins that cater for future CSS syntax (such as adding `@extend` support).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，PostCSS中有超过200个可用的插件——这些插件的范围从扩展PostCSS（如`postcss-nested`或`postcss-mixins`），到操作颜色（如`postcss-color-hcl`或`postcss-rgba-hex`），到为未来CSS语法提供支持的插件（如添加`@extend`支持）。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The full list is available at [https://github.com/postcss/postcss/blob/master/docs/plugins.md](https://github.com/postcss/postcss/blob/master/docs/plugins.md),
    or via the searchable catalogue hosted at [http://www.postcss.parts](http://www.postcss.parts).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 完整列表可在[https://github.com/postcss/postcss/blob/master/docs/plugins.md](https://github.com/postcss/postcss/blob/master/docs/plugins.md)或通过托管在[http://www.postcss.parts](http://www.postcss.parts)的可搜索目录中找到。
- en: To date, we've used a fair number of plugins throughout our examples—we've configured
    them for use, but there is still an element of *black box* about them, where we
    don't always know how the insides work. It's time to change that. As a first step,
    let's briefly meet the toolset that helps make plugins possible, the PostCSS API.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在示例中使用了相当多的插件——我们已为它们配置了使用，但它们仍然带有一定的*黑盒*特性，我们并不总是了解内部是如何工作的。是时候改变这一点了。作为第一步，让我们简要地认识一下帮助插件成为可能的工具集，即PostCSS
    API。
- en: Any plugin created for PostCSS will have been constructed using the API. The
    key to this API will be the `Node` and `Container` methods, which can be used
    to manipulate content once the `postcss` object has been initialized in the plugin.
    We will explore these in more detail throughout this chapter, but before doing
    so, it makes sense to explore the architecture of a PostCSS plugin first, so let's
    have a look and see what makes one tick.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为PostCSS创建的任何插件都将使用API构建。这个API的关键将是`Node`和`Container`方法，这些方法可以在插件中初始化`postcss`对象后用来操作内容。我们将在本章中更详细地探讨这些内容，但在这样做之前，先探索一下PostCSS插件的架构是有意义的，让我们来看看是什么让它运转起来。
- en: Dissecting the architecture of a standard plugin
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析标准插件的架构
- en: Creating a PostCSS plugin is a straightforward process—the beauty of PostCSS
    is that we as developers are free to design and construct any plugin we desire;
    it does mean that not every plugin will be of the same quality as others!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 PostCSS 插件是一个简单的过程——PostCSS 的美妙之处在于，作为开发者，我们可以自由地设计和构建我们想要的任何插件；这也意味着并非每个插件的质量都与其他插件相同！
- en: 'This aside, the recommended way to construct any PostCSS plugin is to use the
    boilerplate code, which is available from [https://github.com/postcss/postcss-plugin-boilerplate](https://github.com/postcss/postcss-plugin-boilerplate);
    we can see an example of it in this screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些，构建任何 PostCSS 插件的推荐方式是使用模板代码，这些模板代码可以从 [https://github.com/postcss/postcss-plugin-boilerplate](https://github.com/postcss/postcss-plugin-boilerplate)
    获取；我们可以在下面的截图中看到一个例子：
- en: '![Dissecting the architecture of a standard plugin](img/BO5194_08_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![剖析标准插件的架构](img/BO5194_08_01.jpg)'
- en: If we explore the source code for any PostCSS plugin hosted in GitHub, there
    will be a host of different files present; not all of them will be the same for
    each different plugin!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们探索托管在 GitHub 上的任何 PostCSS 插件源代码，将存在许多不同的文件；并不是每个插件都会完全相同！
- en: 'Nonetheless, if we delve in deeper, there are some files we would expect to
    see as part of the architecture of any plugin; they are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们进一步深入，我们会期望看到一些文件作为任何插件架构的一部分；它们如下所示：
- en: '`index.js`: This contains the main functionality for each plugin'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.js`: 这个文件包含了每个插件的主要功能'
- en: '`package.json`: This is used to configure and manage locally installed NPM
    packages'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`: 这个文件用于配置和管理本地安装的 NPM 包'
- en: '`test.js`: This contains the tests required to ensure the plugin works as expected'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.js`: 这包含了确保插件按预期工作所需的测试'
- en: Let's explore these in more detail, beginning with `index.js`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地探讨这些内容，从 `index.js` 开始。
- en: Exploring index.js
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索 index.js
- en: 'The crux of any plugin centers around `index.js`—we start with a reference
    to PostCSS (as a dependency for our plugin); this is followed by the exports function,
    which exposes functionality to anyone using the plugin:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 任何插件的精髓都集中在 `index.js` 上——我们从一个对 PostCSS（作为我们插件的依赖项）的引用开始；接着是导出函数，它向使用插件的任何人公开功能：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Discovering package.json
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发现 package.json
- en: 'Next up, we have `package.json`—this is used to configure and manage locally
    installed Node packages; given that PostCSS is based on Node.js, we will see something
    akin to this for any plugin installed as part of the PostCSS ecosystem:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有 `package.json`——这个文件用于配置和管理本地安装的 Node 包；鉴于 PostCSS 基于 Node.js，我们将在任何作为
    PostCSS 生态系统一部分安装的插件中看到类似的内容：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first section contains some basic details about the plugin name, description,
    and version. If we look through the `package.json` file, it's not difficult to
    spot a number of keywords in capitals—at first glance, one might be mistaken for
    thinking that it renders as invalid JSON.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分包含有关插件名称、描述和版本的一些基本细节。如果我们查看 `package.json` 文件，会发现一些大写关键词——乍一看，可能会误以为它们是无效的
    JSON。
- en: There is a reason for this—one of the steps for using this boilerplate plugin
    is to run a script that will replace these keywords with information; the script
    will transform this into valid JSON. This is something we will cover in more detail
    later, in the *Creating a transition plugin* section. For now, assume that this
    file will be converted to valid JSON during the build process.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是有原因的——使用这个模板插件的一个步骤是运行一个脚本，该脚本将替换这些关键字以提供信息；脚本将将其转换为有效的 JSON。我们将在后面的 *创建过渡插件*
    部分更详细地介绍这一点。现在，假设这个文件将在构建过程中转换为有效的 JSON。
- en: 'Moving on, we then store the name of the author, the plugin''s license, and
    where we can get the source or file bugs relating to the plugin:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们存储作者的名称、插件的许可证以及我们可以获取源代码或报告与插件相关的错误的地方：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This section is the most critical—the dependencies section stores details of
    any dependencies, when used in production; the `devDependencies` section takes
    care of dependencies when working in a development environment:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这一节是最关键的——依赖关系部分存储了在生产环境中使用的任何依赖项的详细信息；`devDependencies` 部分负责开发环境中的依赖项：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A key guideline given by the PostCSS team is that every plugin should be tested—this
    should always be a given, to help ensure we are creating something that is solid
    and not likely to cause issues for our users. A part of the boilerplate code contains
    a suitable test script for this purpose, so let's take a quick look at it now.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: PostCSS 团队给出的一个关键指南是每个插件都应该经过测试——这应该是一个理所当然的要求，以确保我们创建的东西是稳固的，不太可能给用户带来问题。样板代码的一部分包含了一个适合此目的的测试脚本，所以现在让我们快速看一下。
- en: Exploring test.js
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索 test.js
- en: 'The third element that is key to any plugin is the test—this should be stored
    in `test.js`, and will look similar to this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 任何插件的关键第三个元素是测试——这应该存储在 `test.js` 中，看起来类似于以下内容：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We will cover this part in more detail later in this chapter, in the *Testing
    and submitting a plugin* section—for now, let's get stuck in to creating a PostCSS-based
    plugin. We'll start with a quick look at the API, before diving into creating
    a plugin that applies a specific font stack based on a chosen font, and adds updated
    declarations if one of those fonts needs to be imported into our site.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的“测试和提交插件”部分更详细地介绍这部分内容——现在，让我们专注于创建一个基于 PostCSS 的插件。我们将首先快速查看 API，然后深入创建一个基于所选字体的特定字体堆栈的插件，并在需要将其中一个字体导入我们的网站时添加更新声明。
- en: 'With the framework in place, we can then build up our plugin using the PostCSS
    API; this contains a number of classes, modules, and methods that we can use.
    The key function in the API is of course `postcss`—this is the main entry point
    for PostCSS and is required for all plugins:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在框架就绪后，我们可以使用 PostCSS API 来构建我们的插件；它包含了许多类、模块和方法，我们可以使用。API 中的关键函数当然是 `postcss`——这是
    PostCSS 的主要入口点，对于所有插件都是必需的：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let's take a quick look through what else is available in the API, beginning
    with the Vendor module.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一下 API 中还提供了哪些其他功能，从供应商模块开始。
- en: The Vendor module
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 供应商模块
- en: 'This module contains helpers for working with vendor prefixes—we can initiate
    it using this object:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块包含用于处理供应商前缀的辅助工具——我们可以使用此对象来启动它：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The module contains two methods, as shown in the table:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块包含两个方法，如表所示：
- en: '| Module | Format | Value returned |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 模块 | 格式 | 返回的值 |'
- en: '| --- | --- | --- |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `vendor.prefix` | String | The vendor prefix extracted from an input string:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '| `vendor.prefix` | 字符串 | 从输入字符串中提取的供应商前缀：'
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `vendor.unprefixed` | String | The input string stripped of its vendor prefix:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '| `vendor.unprefixed` | 字符串 | 去除了供应商前缀的输入字符串：'
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '|'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The List module
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表模块
- en: 'This module contains helpers to safely split lists of CSS values, whilst preserving
    parentheses and quotes. We can initiate it using this object:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块包含用于安全分割 CSS 值列表的辅助工具，同时保留括号和引号。我们可以使用此对象来启动它：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The module contains two methods, as shown in the table:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块包含两个方法，如表所示：
- en: '| Module | Format | Designed to split |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 模块 | 格式 | 设计用于分割 |'
- en: '| --- | --- | --- |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `list.space` | String | Space-separated values (such as those for background,
    border-radius, and other shorthand properties):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '| `list.space` | 字符串 | 以空格分隔的值（例如背景、border-radius 和其他缩写属性）：'
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `list.comma` | String | Comma-separated values (such as those for transition-*
    and background properties):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '| `list.comma` | 字符串 | 以逗号分隔的值（例如 transition-* 和背景属性）：'
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '|'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Classes available in the API
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 中可用的类
- en: 'Once the PostCSS object has been defined as a dependency in our plugin, we
    can begin to manipulate its contents—for this purpose, there are a number of classes
    available to assist, as shown in this table:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在插件中将 PostCSS 对象定义为依赖项，我们就可以开始操作其内容——为此，有多个类可用以协助，如表所示：
- en: '| Name of class | Role within plugin |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 类名 | 插件中的角色 |'
- en: '| --- | --- |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Processor` | Creates a Processor instance, initializes any plugins, then
    uses this instance on CSS files as specified in the configuration. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `Processor` | 创建一个处理器实例，初始化任何插件，然后使用此实例处理配置中指定的 CSS 文件。 |'
- en: '| `LazyResult` | Acts as a promise proxy for the result of PostCSS transformations.Promises
    are a key part of working with Node.js—if you are not familiar with this concept,
    take a look at [https://www.promisejs.org/](https://www.promisejs.org/) for a
    detailed explanation. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `LazyResult` | 作为 PostCSS 转换结果的承诺代理。承诺是使用 Node.js 时的一个关键部分——如果你不熟悉这个概念，请查看
    [https://www.promisejs.org/](https://www.promisejs.org/) 以获取详细解释。 |'
- en: '| `Result` | Provides the result of any PostCSS transformations. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `Result` | 提供任何 PostCSS 转换的结果。 |'
- en: '| `Warning` | Allows a user to manage a warning within the plugin. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `Warning` | 允许用户在插件中管理警告。 |'
- en: '| `CssSyntaxError` | Allows a user to retrieve any errors for broken CSS, generated
    by the CSS parser. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `CssSyntaxError` | 允许用户检索由CSS解析器生成的任何CSS错误：'
- en: '| `Input` | Represents the source CSS being manipulated by PostCSS plugins.
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `Input` | 表示PostCSS插件正在操作的源CSS：'
- en: Nodes available in the API
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API中可用的节点
- en: 'Of course, we cannot manipulate content from within a PostCSS plugin without
    having access to each CSS node—the API contains a group of useful nodes to help
    with parsing and manipulating content:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果没有访问每个CSS节点的内容，我们无法在PostCSS插件中操作内容——API包含一组有用的节点，有助于解析和操作内容：
- en: '| Node | Represents |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 节点 | 表示：'
- en: '| --- | --- |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Root` | A CSS file and its parsed nodes:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Root` | 一个CSS文件及其解析后的节点：'
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `AtRule` | An `@`-based rule in CSS, such as `@media print {…}` |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `AtRule` | CSS中的基于`@`的规则，例如`@media print {…}` |'
- en: '| `Rule` | A CSS rule, containing a selector and declaration block:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Rule` | 一个CSS规则，包含选择器和声明块：'
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Declaration` | A CSS declaration:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Declaration` | 一个CSS声明：'
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '|'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Comment` | A comment between declarations or statements (in both rules and
    `@`-rules):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Comment` | 在声明或语句之间（在规则和`@`规则中）的注释：'
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '|'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Methods available in the API
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API中可用的方法
- en: 'A key role of a plugin is to navigate through each node to help determine if
    it should perform some action; the API contains a number of methods to assist
    with parsing nodes:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的一个关键作用是遍历每个节点以帮助确定是否应该执行某些操作；API包含一些方法来协助解析节点：
- en: '| Method group | Purpose |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 方法组 | 目的 |'
- en: '| --- | --- |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Nodes | These methods are for working with each CSS node—this includes methods
    such as the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '| 节点 | 这些方法用于处理每个CSS节点——这包括以下方法：'
- en: '`node.type`: returns a string representing the node type'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node.type`: 返回表示节点类型的字符串'
- en: '`node.parent`: returns the parent node as a string'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node.parent`: 返回作为字符串的父节点'
- en: '`node.next()` or `node.prev()`: returns the next or previous child of a node''s
    parent.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node.next()`或`node.prev()`: 返回节点父的下一个或前一个子节点。'
- en: More details are available at [https://github.com/postcss/postcss/blob/master/docs/api.md#nodes-common-methods](https://github.com/postcss/postcss/blob/master/docs/api.md#nodes-common-methods)
    |
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息请参阅：[https://github.com/postcss/postcss/blob/master/docs/api.md#nodes-common-methods](https://github.com/postcss/postcss/blob/master/docs/api.md#nodes-common-methods)
    |
- en: '| Containers | These methods contain methods for working with children in a
    container node—this includes methods such as the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '| 容器 | 这些方法包含用于在容器节点中处理子节点的方法——这包括以下方法：'
- en: '`container.nodes`: returns an array containing the container''s children.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container.nodes`: 返回包含容器子节点的数组。'
- en: '`container.first`: return the container''s first child node.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container.first`: 返回容器的第一个子节点。'
- en: '`container.last`: return the container''s last child node.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container.last`: 返回容器的最后一个子节点。'
- en: More details are available at [https://github.com/postcss/postcss/blob/master/docs/api.md#containers-common-methods](https://github.com/postcss/postcss/blob/master/docs/api.md#containers-common-methods)
    |
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息请参阅：[https://github.com/postcss/postcss/blob/master/docs/api.md#containers-common-methods](https://github.com/postcss/postcss/blob/master/docs/api.md#containers-common-methods)
    |
- en: The main site contains details and examples of all of the methods and classes
    available within the API—it is worth taking time to familiarize yourself with
    the options available.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 主站点包含API中所有方法和类的详细信息及示例——花时间熟悉这些选项是值得的。
- en: Tip
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Details for each method or class are available on the PostCSS API page at [https://github.com/postcss/postcss/blob/master/docs/api.md](https://github.com/postcss/postcss/blob/master/docs/api.md)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 每个方法或类的详细信息可在PostCSS API页面找到：[https://github.com/postcss/postcss/blob/master/docs/api.md](https://github.com/postcss/postcss/blob/master/docs/api.md)
- en: 'Okay, enough with theory: on we go! Let''s change tack and put some of what
    we''ve just learnt to good use by constructing a couple of plugins for PostCSS.
    These will use a real mix of the API commands that we''ve briefly looked at earlier
    in this chapter; our first demo centers around a shorthand plugin for creating
    transition statements within CSS rules in a style sheet, so let''s get stuck in
    and see how it works.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，理论就到这里：让我们开始吧！让我们改变方向，将我们刚刚学到的一些知识应用到构建几个PostCSS插件中；这些插件将使用我们在本章前面简要查看过的API命令的真实混合；我们的第一个演示围绕一个简写插件，用于在样式表中的CSS规则内创建过渡语句，所以让我们开始看看它是如何工作的。
- en: Creating an transition plugin
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个过渡插件
- en: The idea for this plugin is not new; it's loosely based on the `postcss-transform-shortcut`
    plugin by Jonathan Neal, available from [https://github.com/jonathantneal/postcss-transform-shortcut](https://github.com/jonathantneal/postcss-transform-shortcut).
    The concept is not necessarily a shorter means to create transition statements,
    but it makes it easier by allowing authors to specify values independently. These
    are then automatically inserted into the correct order within the transition declaration.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件的创意并不新颖；它松散地基于 Jonathan Neal 的 `postcss-transform-shortcut` 插件，可在 [https://github.com/jonathantneal/postcss-transform-shortcut](https://github.com/jonathantneal/postcss-transform-shortcut)
    获取。这个概念并不一定是一个创建过渡语句的更短方法，但它通过允许作者独立指定值来简化了过程。然后这些值会自动插入到过渡声明中的正确顺序。
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The source code for this plugin is also available on GitHub, at [https://github.com/alexlibby/postcss-transition-shortcut](https://github.com/alexlibby/postcss-transition-shortcut);
    the NPM package is also available at [https://www.npmjs.com/package/postcss-transition-shortcut](https://www.npmjs.com/package/postcss-transition-shortcut).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件的源代码也托管在 GitHub 上，网址为 [https://github.com/alexlibby/postcss-transition-shortcut](https://github.com/alexlibby/postcss-transition-shortcut)；NPM
    包也可在 [https://www.npmjs.com/package/postcss-transition-shortcut](https://www.npmjs.com/package/postcss-transition-shortcut)
    获取。
- en: 'Let''s dive in and take a look at how it is put together, in more detail:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解一下它是如何组合在一起的，更详细地看看：
- en: We'll start by installing Git—this is required for installing the plugin boilerplate.
    To do this, browse to [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git),
    and follow the instructions for your platform.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先安装 Git——这是安装插件模板所必需的。为此，浏览到 [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)，并遵循您平台上的说明。
- en: Open a Node.js command prompt, then change the working folder to our project
    directory.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Node.js 命令提示符，然后更改工作目录到我们的项目目录。
- en: 'In the prompt, enter this command then press *Enter*:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符中输入以下命令然后按 *Enter*：
- en: '[PRE16]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Git will clone the `postcss-plugin-boilerplate` repository to our project area,
    as shown in this screenshot:![Creating an transition plugin](img/BO5194_08_02.jpg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git 将 `postcss-plugin-boilerplate` 仓库克隆到我们的项目区域，如图所示：![创建过渡插件](img/BO5194_08_02.jpg)
- en: 'The plugin boilerplate includes a script to automatically generate the skeleton
    for our plugin—go ahead and run this command in the prompt:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插件模板包括一个脚本来自动生成我们插件的基本框架——请在提示符中运行此命令：
- en: '[PRE17]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: It will show a series of prompts for various bits of information. Go ahead and
    fill in appropriate responses, similar to that shown in this screenshot. Note
    that it is not obligatory to have a GitHub account, as the information is simply
    added to the `package.json` file; if you spend any time developing plugins in
    the future, then it is recommended that you go ahead and create one:![Creating
    an transition plugin](img/BO5194_08_03.jpg)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将显示一系列用于各种信息的提示。请填写适当的响应，类似于这个截图所示。请注意，拥有 GitHub 账户不是强制性的，因为信息只是添加到 `package.json`
    文件中；如果您未来花时间开发插件，那么建议您创建一个：![创建过渡插件](img/BO5194_08_03.jpg)
- en: Once the plugin folder has been created, we can remove the `postcss-plugin-boilerplate`
    folder from the project root folder, as this is no longer needed.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了插件文件夹，我们可以从项目根目录中删除 `postcss-plugin-boilerplate` 文件夹，因为不再需要它了。
- en: If all is well, we should see something akin to this screenshot, when browsing
    the contents of our plugin folder:![Creating an transition plugin](img/BO5194_08_04.jpg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们在浏览插件文件夹内容时应该能看到类似这样的截图：![创建过渡插件](img/BO5194_08_04.jpg)
- en: 'At this point, we can now add the code for our plugin into `index.js`—to do
    this, open up a copy of the file from within the `postcss-transition-shortcut`
    plugin from within our project area, and alter the code as shown:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到这一步，我们现在可以将我们的插件代码添加到 `index.js` 中——为此，打开项目区域内的 `postcss-transition-shortcut`
    插件的一个文件副本，并按照所示修改代码：
- en: '[PRE18]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'At this stage we will have a working plugin—the proof, though (to quote an
    old English saying), is in the pudding: does the plugin work as we expect? Well,
    there''s no better way to find out than by trying it out, so let''s set up a quick
    demo to confirm it works as expected. Before we do so, though, there is one important
    point I need to make, which concerns the generation of PostCSS plugins.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们将拥有一个可以工作的插件——虽然（引用一句古老的英语谚语），证明是甜点：插件是否按预期工作？好吧，没有比尝试它更好的方法来找出答案了，所以让我们快速设置一个演示来确认它按预期工作。不过，在我们这样做之前，有一个重要的问题需要说明，那就是关于
    PostCSS 插件生成的问题。
- en: Creating a test for our plugin
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为我们的插件创建测试
- en: The sharp-eyed amongst you will notice though that if we don't specify one of
    the four values for our transition plugin, then the code at present won't use
    the default; hopefully an update will come in a future version of the plugin.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 眼尖的您会注意到，如果我们没有为我们的过渡插件指定四个值之一，那么当前的代码将不会使用默认值；希望未来的插件版本中会有更新。
- en: 'This aside, the process for testing our plugin uses the AVA test runner, available
    from [https://github.com/sindresorhus/ava](https://github.com/sindresorhus/ava).
    The framework for the test is already created within the plugin boilerplate, which
    leaves us to add the test code to test.js file. Let''s take a peek at what''s
    required:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这个之外，测试我们的插件的过程使用的是来自 [https://github.com/sindresorhus/ava](https://github.com/sindresorhus/ava)
    的 AVA 测试运行器。测试框架已经在插件模板中创建好了，我们只需要将测试代码添加到 `test.js` 文件中。让我们看看需要什么：
- en: We'll start by installing the AVA test runner—for this, fire up a Node.js command
    prompt, and change the working folder to the root of our plugin folder.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将开始安装 AVA 测试运行器——为此，打开 Node.js 命令提示符，并将工作文件夹更改为插件文件夹的根目录。
- en: 'In the prompt, enter these commands, pressing *Enter* after each—the first
    installs AVA, with the second adding it to our `package.json` file:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符中，输入以下命令，每输入一个命令后按 *Enter* 键——第一个安装 AVA，第二个将其添加到我们的 `package.json` 文件：
- en: '[PRE19]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Open a new file in your text editor of choice—go ahead and add the following
    highlighted lines to `test.js`, within the plugin folder we created in the previous
    exercise:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您选择的文本编辑器中打开一个新文件——请将以下高亮行添加到之前练习中创建的插件文件夹中的 `test.js` 文件：
- en: '[PRE20]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Next, fire up a Node.js command prompt, then change the working directory to
    our plugin project folder.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开 Node.js 命令提示符，然后更改工作目录到我们的插件项目文件夹。
- en: At the prompt, enter `npm test` and press *Enter*.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符中，输入 `npm test` 并按 *Enter* 键。
- en: AVA will perform the test, which is then linted using ESLint. If all is well,
    we should see the results shown in this screenshot—assuming nothing was amiss
    with the test:![Creating a test for our plugin](img/BO5194_08_05.jpg)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AVA 将执行测试，然后使用 ESLint 进行代码检查。如果一切顺利，我们应该会看到这个截图中的结果——假设测试没有出现任何问题：![为我们的插件创建测试](img/BO5194_08_05.jpg)
- en: All good so far, right—at this point, we're OK to create a simple demo to prove
    plugin works…or are we? Well, the test shows a pass, so the code should be OK.
    But further down there are a ton of errors displayed, similar to this screenshot—what
    gives?
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止一切顺利，对吧——在这个阶段，我们可以创建一个简单的演示来证明插件可以工作……或者不是吗？好吧，测试结果显示通过，所以代码应该是没有问题的。但是往下看，会显示一大堆错误，类似于这个截图——这是怎么回事？
- en: '![Creating a test for our plugin](img/BO5194_08_06.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![为我们的插件创建测试](img/BO5194_08_06.jpg)'
- en: 'The test has passed, yet the tests would seem to indicate otherwise; a look
    further down reveals yet more errors:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 测试已经通过，但测试结果似乎表明相反；进一步查看会发现更多的错误：
- en: '![Creating a test for our plugin](img/BO5194_08_07.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![为我们的插件创建测试](img/BO5194_08_07.jpg)'
- en: This raises some important points about testing, so let's cover these before
    continuing with our demo.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这提出了关于测试的一些重要观点，所以在继续我们的演示之前，让我们先来谈谈这些。
- en: Correcting the errors
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修正错误
- en: 'The main error, or `Exported linebreaks to be ''LF''…`, is a simple one to
    fix—it''s being caused by Sublime Text being set to use Windows as the default
    line endings setting. Assuming we''re using Sublime Text, let''s go ahead and
    deal with that error:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 主要错误，或 `Exported linebreaks to be 'LF'…`，是一个简单的错误，很容易修复——这是由于 Sublime Text 被设置为使用
    Windows 作为默认的行结束符设置引起的。假设我们使用的是 Sublime Text，让我们来处理这个错误：
- en: Open up Sublime Text, then open `index.js` from our plugin folder.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Sublime Text，然后打开插件文件夹中的 `index.js` 文件。
- en: Click on View | Line Endings.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击视图 | 行结束符。
- en: Change the selected option to **Unix**, and save the file.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将选定的选项更改为 **Unix**，并保存文件。
- en: Repeat steps 1 to 3 for `test.js`—once done, close both files.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对 `test.js` 重复步骤 1 到 3——完成后，关闭这两个文件。
- en: 'If we re-run the test, we should see a significant drop in listed errors—there
    will be some left for us to fix in `index.js` and `test.js`, similar to this screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们重新运行测试，我们应该会看到列出的错误数量显著减少——在`index.js`和`test.js`中，我们还会剩下一些需要修复的错误，类似于下面的截图：
- en: '![Correcting the errors](img/BO5194_08_08.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![纠正错误](img/BO5194_08_08.jpg)'
- en: Most of the errors are self-explanatory—the two that are less obvious are `Expected
    indentation of X spaces…` and `Line X exceeds the maximum line length…`. We can
    fix the first by replacing all instances of tabs with four individual spaces per
    tab. The second error is simple to fix—simply split the line of code into two
    lines.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数错误都是显而易见的——两个不太明显的是`Expected indentation of X spaces…`和`Line X exceeds the
    maximum line length…`。我们可以通过将所有制表符替换为每个制表符四个空格来修复第一个错误。第二个错误很容易修复——只需将代码行拆分为两行即可。
- en: We need to work through all of the remaining errors, as far as possible—these
    won't entirely be the same for your version of the plugin, but some will be similar.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要尽可能解决所有剩余的错误——这些错误不会完全相同于你的插件版本，但其中一些将是相似的。
- en: Tip
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you come across any errors where you want to understand the reason behind
    the error, take a look at [https://jslinterrors.com/](https://jslinterrors.com/)—it's
    a great source for defining what an error means!
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到任何你想了解错误原因的错误，请查看[https://jslinterrors.com/](https://jslinterrors.com/)——这是一个定义错误含义的好资源！
- en: 'Assuming we''ve cleared most of the errors, we should be left with just one:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经清除了大多数错误，我们应该只剩下最后一个：
- en: '![Correcting the errors](img/BO5194_08_09.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![纠正错误](img/BO5194_08_09.jpg)'
- en: Is this an error we should fix, and therefore can clear from the report? The
    simple answer is that it depends—it highlights an important point about using
    linting for code, so let's take a moment to cover this in more detail.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个我们应该修复的错误，因此可以从报告中清除吗？简单的回答是这取决于——它强调了使用代码检查的一个重要观点，所以让我们花点时间更详细地讨论这一点。
- en: Clearing the final error
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清除最后一个错误
- en: The last error shown in the report presents some challenges—the code is valid,
    yet ESLint flags the error. The reason for this is that it has found an assignment
    expression within a while statement initializer; it is treated as a possible mistake
    in the code and *may* have unintended effects on the code.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 报告中显示的最后一个错误带来了一些挑战——代码是有效的，但ESLint标记了错误。原因是它在一个while语句初始化器中找到了一个赋值表达式；这被视为代码中的一个可能的错误，并且*可能*会对代码产生意外的影响。
- en: In some respects, it can be treated as a warning, and not necessarily as an
    error. Prior to July 2013 we could have configured our test to ignore this, but
    changes made to ESLint since that date mean that this error cannot be cleared
    without reworking the code.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些方面，它可以被视为警告，而不是错误。在2013年7月之前，我们可以配置测试来忽略它，但自那时起对ESLint所做的更改意味着这个错误不能不重新编写代码就清除。
- en: Note
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to understand more about the causes of this error, then please
    refer to [http://jslinterrors.com/unexpected-assignment-expression/](http://jslinterrors.com/unexpected-assignment-expression/).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于这个错误原因的信息，请参阅[http://jslinterrors.com/unexpected-assignment-expression/](http://jslinterrors.com/unexpected-assignment-expression/)。
- en: 'In our instance, the code is valid and will not cause any errors—it leaves
    us with several options as to what we can do going forward:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，代码是有效的，不会引起任何错误——这让我们在接下来的操作中有了几个选择：
- en: We can simply ignore the error and carry on—it's not great that the test fails,
    but in this case it won't cause any harm to our code
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以简单地忽略这个错误并继续——测试失败并不好，但在这个情况下，它不会对我们的代码造成任何伤害。
- en: We can switch off the test for it, so that while this condition is not tested,
    the test will at least show a 100% pass
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以关闭对这个测试的检查，这样即使这个条件没有被测试，测试至少会显示100%通过。
- en: We can look to alter the code to design out the error/warning—this is the ideal
    solution, but it may be a longer term route, depending on the nature of the changes
    we need to make
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以尝试修改代码来设计出错误/警告——这是理想的解决方案，但根据我们需要做出的更改的性质，这可能是一个长期的道路。
- en: 'For now, we''re going to switch off the test for this error—we can do this
    by editing the `.eslintrc` file from within our plugin, and set the value in square
    brackets to `0`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将关闭这个错误的测试——我们可以在插件内部编辑`.eslintrc`文件，并将方括号中的值设置为`0`：
- en: '![Clearing the final error](img/BO5194_08_10.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![清除最后一个错误](img/BO5194_08_10.jpg)'
- en: This will work in the short term, but with a view to revisiting the code to
    design out the ambiguity at some point in the future.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这在短期内是可行的，但考虑到将来某个时候重新审视代码以消除歧义。
- en: Performing a test using the plugin
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用插件进行测试
- en: 'With our plugin in place, let''s test it out—for this, we need a couple of
    files from the code download that accompanies this book; the files are available
    in the `T43 – building a transition shortcut plugin` folder:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的插件就位后，让我们测试它——为此，我们需要从本书附带的代码下载中获取几个文件；这些文件位于 `T43 – building a transition
    shortcut plugin` 文件夹中：
- en: Go ahead and extract copies of `gulpfile.js` and `package.json`, then save them
    to the root of our project area.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往并提取 `gulpfile.js` 和 `package.json` 的副本，然后将它们保存到我们项目区域的根目录。
- en: 'In a new file, add the following CSS styles, saving it as `style.css` in the
    `src` folder in our project area:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新文件中，添加以下 CSS 样式，并将其保存为 `style.css`，位于我们项目区域的 `src` 文件夹中：
- en: '[PRE21]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Fire up a Node.js command prompt, then change the working directory to our project
    area.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Node.js 命令提示符，然后更改工作目录到我们的项目区域。
- en: At the prompt, enter `gulp` then press *Enter*—PostCSS will go away and compile
    the source style sheet. If all is well, we should see the compiled results of
    our style sheet in the `dest` folder of our project area:![Performing a test using
    the plugin](img/BO5194_08_11.jpg)
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符中，输入 `gulp` 然后按 *Enter* 键——PostCSS 将消失并编译源样式表。如果一切顺利，我们应该在我们的项目区域的 `dest`
    文件夹中看到样式表的编译结果：![使用插件进行测试](img/BO5194_08_11.jpg)
- en: At this stage, we've run the test for our plugin—we go one step further, and
    add our plugin to a test runner service such as Travis CI (at [https://travis-ci.org](https://travis-ci.org)).
    Although this is a mandatory part of the process for creating any PostCSS plugin,
    there is a fairly steep learning curve, and anyone working on Windows may run
    into difficulties! If you are a Windows user, you will have to make `test.js`
    executable via the command line—this requires prior knowledge of using Git, which
    is beyond the scope of this book.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经为我们的插件运行了测试——我们再进一步，将我们的插件添加到测试运行器服务，如 Travis CI（在 [https://travis-ci.org](https://travis-ci.org)）。尽管这是创建任何
    PostCSS 插件过程中的一个强制性部分，但学习曲线相当陡峭，任何在 Windows 上工作的人可能会遇到困难！如果你是 Windows 用户，你将不得不通过命令行使
    `test.js` 可执行——这需要先了解 Git 的使用，而这超出了本书的范围。
- en: For now, we'll skip past the Travis CI part of the process—the plugin is sufficiently
    straightforward that the local testing with `test.js` will suffice. Let's change
    tack—our plugin contains a number of useful concepts in PostCSS, so let's explore
    how it is put together in more detail.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将跳过 Travis CI 的过程——插件足够简单，使用 `test.js` 进行本地测试就足够了。让我们改变方向——我们的插件包含了一些 PostCSS
    中的有用概念，因此让我们更详细地探索它是如何组合在一起的。
- en: Dissecting our plugin in detail
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 详细剖析我们的插件
- en: The inspiration for this plugin is twofold—at the time of writing, PostCSS doesn't
    have a great number of animation-based plugins, and it borrows the same concept
    used in the `postcss-transform-shortcut plugin`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件的灵感有两个方面——在撰写本文时，PostCSS 没有太多基于动画的插件，并且它借鉴了 `postcss-transform-shortcut`
    插件中使用的相同概念。
- en: 'We start with the ubiquitous call to initialize PostCSS as a dependency for
    our plugin:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从初始化 PostCSS 作为我们插件的依赖项的通用调用开始：
- en: '[PRE22]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next up, we initialize `postcss.plugin`, to expose functionality within our
    plugin to the ecosystem:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们初始化 `postcss.plugin`，以便在我们的插件中公开功能给生态系统：
- en: '[PRE23]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'At present, our plugin doesn''t contain any options, so it will be set as blank;
    if we had had some options set, then these will be stored in the options array:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的插件不包含任何选项，因此它将被设置为空白；如果我们已经设置了一些选项，那么这些选项将存储在选项数组中：
- en: '[PRE24]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'A key part of our plugin is to set some default options—we need to have some
    default values set, if we don''t specify one or more values:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们插件的关键部分是设置一些默认选项——如果我们没有指定一个或多个值，我们需要设置一些默认值：
- en: '[PRE25]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Up next comes the crux of our plugin—it returns the result of this function:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是插件的核心——它返回此函数的结果：
- en: '[PRE26]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We walk through each rule using `css.walkRules`—it sets up a number of variables
    and an array; we also set a search string that will be used to find any instance
    of our transition properties.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `css.walkRules` 遍历每个规则——它设置了一些变量和一个数组；我们还设置了一个搜索字符串，用于查找任何我们的过渡属性实例。
- en: 'If we find a suitable instance of our property, we then clone it, adding the
    property name `transition` before it. We then work through each of up to four
    properties that may be set, joining them together into the final transition declaration:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们找到一个合适的属性实例，我们就克隆它，在其前面添加属性名 `transition`。然后我们逐个处理可能设置的最多四个属性，将它们组合成最终的过渡声明：
- en: '[PRE27]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s move on. Our first example was a straightforward plugin; although it
    does need some further development (as indicated in *Testing our plugin*), it
    still serves a useful purpose. In our next example, we''ll take a different approach:
    we will use an existing plugin as a basis for our new version. This plugin, unlike
    the first one, will not see the light of day in GitHub, though—we''ll explore
    the reasons for this, and more, as part of our next exercise.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续前进。我们的第一个示例是一个简单的插件；尽管它还需要进一步开发（如 *测试我们的插件* 所示），但它仍然有其用途。在我们的下一个示例中，我们将采取不同的方法：我们将使用现有插件作为我们新版本的基础。这个插件与第一个不同，它不会在
    GitHub 上亮相——我们将探索这个原因，以及更多内容，作为我们下一个练习的一部分。
- en: Building a custom font plugin
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自定义字体插件
- en: For our next demo, we're not going to build something original, but start with
    adapting an existing plugin that is already available for PostCSS. The plugin
    we will use is `postcss-fontpath` by Seane King (available from [https://github.com/seaneking/postcss-fontpath](https://github.com/seaneking/postcss-fontpath));
    we're going to incorporate an autocomplete facility that automatically adds the
    relevant font stack, based on the name provided, and using the lists available
    at [http://www.cssfontstack.com/](http://www.cssfontstack.com/).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的下一个演示，我们不会构建原创内容，而是从已经可用于 PostCSS 的现有插件开始。我们将使用的插件是 Seane King 的 `postcss-fontpath`（可在
    [https://github.com/seaneking/postcss-fontpath](https://github.com/seaneking/postcss-fontpath)
    获取）；我们将集成一个自动完成功能，根据提供的名称自动添加相关的字体堆栈，并使用在 [http://www.cssfontstack.com/](http://www.cssfontstack.com/)
    可用的列表。
- en: '"Why do this", I hear you ask? To prove a point—it isn''t always necessary
    to re-invent the wheel; sometimes it is preferable to simply adapt something that
    exists, which doesn''t quite fit our requirements. In this instance, the code
    we''re adding will make it more useful; it will need some further development
    to allow for error-checking, but nonetheless still serves a purpose.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: “为什么这样做？”你可能会问？为了证明一个观点——并不是总是需要重新发明轮子；有时简单地适应现有的东西，虽然它并不完全符合我们的需求，可能更可取。在这个例子中，我们添加的代码将使其更有用；它还需要进一步开发以允许错误检查，但无论如何仍然有其用途。
- en: Note
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A point of note—recommended practice is to use the plugin boilerplate we covered
    in the previous section. For this next exercise, we will build it manually—this
    is to show you something of the process, even though it is not one we would release
    into the wild.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 一个需要注意的点——推荐的做法是使用我们在上一节中提到的插件模板。对于接下来的练习，我们将手动构建它——这是为了展示这个过程的一部分，尽管它不是我们会发布到野外的版本。
- en: 'Okay, that aside, let''s get stuck in and start developing our plugin:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，先不提这个，让我们开始着手开发我们的插件：
- en: We'll start by creating a folder within the root of our project area—go ahead
    and name this folder `postcss-custom-fonts`.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先在项目区域的根目录下创建一个文件夹——请将这个文件夹命名为 `postcss-custom-fonts`。
- en: Next, we need to set up the folder as a Node module, so fire up a Node.js command
    prompt and change the working folder to our plugin folder.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要将文件夹设置为一个 Node 模块，因此请启动 Node.js 命令提示符并将工作文件夹更改为我们的插件文件夹。
- en: 'At the prompt, enter `npm init` to start the process of creating a `package.json`
    file—use the details shown in this screenshot, at the appropriate prompt:'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在命令提示符中输入 `npm init` 以开始创建 `package.json` 文件的过程——使用此截图显示的详细信息，在适当的提示下：
- en: '![Building a custom font plugin](img/BO5194_08_12.jpg)'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![构建自定义字体插件](img/BO5194_08_12.jpg)'
- en: 'With the prompt still open, go ahead and enter these commands, then press *Enter*—the
    first one is needed to install PostCSS as a dependency for our plugin, with the
    second installing `underscore.js`, as a second dependency (it''s used for the
    extend method):'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符仍然打开的情况下，输入以下命令，然后按 *Enter* 键——第一个命令是安装 PostCSS 作为我们插件的依赖项，第二个命令安装 `underscore.js`
    作为第二个依赖项（它用于扩展方法）：
- en: '[PRE28]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Keep the session open—we will need it towards the end of this exercise.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保持会话打开——我们将在练习的末尾需要它。
- en: From the code download that accompanies this book, we need to extract a copy
    of `index.js`—copy this to the plugin folder.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本书附带的代码下载中，我们需要提取 `index.js` 的副本——将其复制到插件文件夹中。
- en: If all is well, we should see something akin to this screenshot when browsing
    the contents of our plugin folder:![Building a custom font plugin](img/BO5194_08_13.jpg)
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，当浏览我们插件文件夹的内容时，我们应该看到类似于以下截图的内容：![构建自定义字体插件](img/BO5194_08_13.jpg)
- en: With our plugin in place, let's test it out. For this, we need a couple of files
    from the code download that accompanies this book. Go ahead and extract copies
    of `gulpfile.js` and `package.json` from the `T42 – Building a custom font` plugin
    folder (and *not* the plugin one!), then save them to the root of our project
    area.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的插件就位后，让我们测试一下。为此，我们需要从本书附带的代码下载中获取几个文件。请从 `T42 – 构建自定义字体` 插件文件夹（而不是插件文件夹！）中提取
    `gulpfile.js` 和 `package.json` 的副本，然后将它们保存到我们项目区域的根目录。
- en: 'In a new file, add the following CSS styles, saving it as `style.css` in the
    `src` folder in our project area:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新文件中，添加以下 CSS 样式，将其保存为 `src` 文件夹中我们项目区域的 `style.css`：
- en: '[PRE29]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Revert back to the Node.js command prompt session we had open at the start of
    this exercise. Make sure the working folder is set to our project area before
    continuing.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到我们在本练习开始时打开的 Node.js 命令提示符会话。在继续之前，请确保工作文件夹设置为我们的项目区域。
- en: 'At the prompt, enter `gulp` then press *Enter*—PostCSS will go away and compile
    the source style sheet. If all is well, we should see the compiled results of
    our style sheet in the `dest` folder of our project area:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下，输入 `gulp` 然后按 *Enter* 键——PostCSS 将消失并编译源样式表。如果一切顺利，我们应该在我们的项目区域的 `dest`
    文件夹中看到样式表的编译结果：
- en: '![Building a custom font plugin](img/BO5194_08_14.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![构建自定义字体插件](img/BO5194_08_14.jpg)'
- en: At this stage, we now have a working plugin—even though this is not an original
    creation, it still highlights a number of key concepts around construction of
    PostCSS plugins. Let's take a moment to explore the functionality of our plugin
    in more detail.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们现在有一个可工作的插件——即使这不是一个原创作品，但它仍然突出了围绕 PostCSS 插件构建的许多关键概念。让我们花点时间更详细地探索一下我们插件的功能。
- en: Dissecting the functionality of our plugin
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析我们插件的功能
- en: 'At first glance, the code for our plugin may look complex, but in reality it
    is relatively straightforward to follow—let''s go through it in sections, beginning
    with defining instances of the `postcss` object and a `fontstacks_config` object
    we will use in the plugin:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 初看起来，我们插件的代码可能看起来很复杂，但实际上它相对容易理解——让我们分部分来看，从定义 `postcss` 对象和我们将要在插件中使用的 `fontstacks_config`
    对象的实例开始：
- en: '[PRE30]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next up, we add a simple helper function—this is used to convert font names
    into title case; the names listed in `fontstacks_config` are case sensitive, and
    will fail if they don''t match:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加一个简单的辅助函数——这个函数用于将字体名称转换为标题格式；`fontstacks_config` 中列出的名称是区分大小写的，如果不匹配将失败：
- en: '[PRE31]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This is the start of the plugin—the first two lines are the obligatory initialization
    to make the plugin available for use, followed by defining an options object.
    We then use `_.extend` to extend the predefined values in our chosen font stack
    with those added to the configuration object when running the plugin:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这是插件的开头——前两行是必须的初始化，以便插件可供使用，然后定义一个选项对象。然后我们使用 `_.extend` 将我们选择的字体堆栈中的预定义值与在运行插件时添加到配置对象的值扩展：
- en: '[PRE32]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We then walk through each rule and node, working out if they first contain
    a font declaration, then if they contain a font name that matches one in the predefined
    font stacks. If there is a match, then the font name is converted to the appropriate
    font stack and inserted with any additional fonts specified, but which don''t
    match our font stacks:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们遍历每个规则和节点，确定它们是否首先包含字体声明，然后确定它们是否包含与预定义字体堆栈中匹配的字体名称。如果匹配，则将字体名称转换为适当的字体堆栈，并插入任何指定的附加字体，但这些字体不匹配我们的字体堆栈：
- en: '[PRE33]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the second half of the plugin, we perform a simpler task—we work our way
    through each rule and declaration, looking for any instances of `@font-face` in
    the code. We then define a `fontpath` variable that removes any quotes from the
    supplied values, and a `format` array to manage the different font formats available
    for use:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在插件的下半部分，我们执行一个更简单的任务——我们逐个处理每个规则和声明，寻找代码中任何 `@font-face` 的实例。然后我们定义一个 `fontpath`
    变量，它从提供的值中删除任何引号，并定义一个 `format` 数组来管理可用的不同字体格式：
- en: '[PRE34]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We then build up the relevant statement for each font type, before assembling
    the custom font declaration and inserting it back into the appropriate point in
    our style sheet:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们为每种字体类型构建相关的语句，然后将自定义字体声明组装起来，并重新插入到样式表中的适当位置：
- en: '[PRE35]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Our plugin has exposed some key concepts in PostCSS plugin design—the main ones
    are the use of `.WalkDecls` and `.WalkRu` `les` (or `.WalkAtRules`). I would strongly
    recommend familiarizing yourself with the API documentation at [https://github.com/postcss/postcss/blob/master/docs/api.md](https://github.com/postcss/postcss/blob/master/docs/api.md),
    which outlines all of the commands available within the API, and gives a brief
    description of their purpose.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们插件暴露了 PostCSS 插件设计中的某些关键概念——主要的是使用 `.WalkDecls` 和 `.WalkRules`（或 `.WalkAtRules`）。我强烈建议您熟悉
    API 文档，网址为 [https://github.com/postcss/postcss/blob/master/docs/api.md](https://github.com/postcss/postcss/blob/master/docs/api.md)，其中概述了
    API 中所有可用的命令，并简要说明了它们的目的。
- en: Despite creating what should be a useful plugin, it isn't one that I would recommend
    releasing into the wild. At this point you may think I have completely lost the
    plot, but as I always say, "there's method in the madness"—there are good reasons
    for not publishing this plugin, so let's take a moment to explore why it might
    not be a sensible move to release this plugin in its current format.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管创建了一个本应很有用的插件，但我不会推荐将其发布到公共领域。在这个时候，你可能认为我已经完全迷失了方向，但正如我经常说的，“疯狂之中有方法”——不发布这个插件有很好的理由，让我们花点时间来探讨为什么以当前格式发布这个插件可能不是一个明智的决定。
- en: Exploring the dangers of publishing this plugin
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探讨发布此插件的风险
- en: Over the last few pages, we've created what should be a useful plugin to manipulate
    custom fonts—it automatically builds up the right font stack based on pre-defined
    settings, and will fill in the appropriate `@font-face` code for us. At this point
    we should have a plugin that can be released into the wild, for anyone to use…surely?
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几页中，我们创建了一个本应很有用的插件来操作自定义字体——它根据预定义的设置自动构建正确的字体堆栈，并将为我们填写适当的 `@font-face`
    代码。到这一点，我们应该有一个可以发布到公共领域的插件，任何人都可以使用……难道不是吗？
- en: 'Well yes, and no—even though this plugin serves a purpose, it is not one that
    I would recommend making available…at least not yet! There are a few reasons why,
    which also help to illustrate the benefits of using the boilerplate code we covered
    earlier in this chapter:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，是的，也不是——尽管这个插件有其用途，但我不会推荐将其公开……至少现在还不行！有几个原因，这也有助于说明使用本章前面提到的样板代码的好处：
- en: The plugin doesn't have a `test.js` file or configuration associated with it—one
    of the requirements for releasing plugins is that each be tested, using a `test.js`
    file. Ideally we might use a service such as Travis CI to help with this, but
    this really only works if you use a Unix-based environment for development.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该插件没有 `test.js` 文件或与之相关的配置——发布插件的一个要求是每个插件都必须经过测试，使用 `test.js` 文件。理想情况下，我们可能会使用像
    Travis CI 这样的服务来帮助完成这项工作，但这仅在您使用基于 Unix 的开发环境时才有效。
- en: The plugin itself performs two different roles, which is not recommended—best
    practice for PostCSS plugins is to try where possible to limit the role to one
    task only. The benefits of this can be seen when using a task runner—we can pick
    and choose which plugins to use, without introducing too much extra unwanted functionality.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该插件本身执行两个不同的角色，这并不推荐——PostCSS 插件的最佳实践是尽可能将角色限制为一个任务。当使用任务运行器时，我们可以选择使用哪些插件，而不会引入太多额外的、不希望的功能。
- en: The architecture of our code is not optimal—this is primarily due to the use
    of `css.WalkRules` (line 16), and `css.WalkAtRules` (line 28). These two commands
    parse each node within the container, and call the callback function for each
    rule node and at-rule node. The difference here is that `css.WalkRules` works
    on every rule; `css.WalkAtRules` will only work on `@-`rules (such as `@font-face`).
    They are not interchangeable, which makes it very inefficient at compilation.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们代码的架构并不理想——这主要是由于使用了 `css.WalkRules`（第 16 行）和 `css.WalkAtRules`（第 28 行）。这两个命令解析容器内的每个节点，并为每个规则节点和规则节点调用回调函数。这里的区别在于
    `css.WalkRules` 在每个规则上工作；`css.WalkAtRules` 只会在 `@-` 规则（如 `@font-face`）上工作。它们不可互换，这使得在编译时非常低效。
- en: If we don't use the plugin boilerplate, then most of the files required for
    publishing code will not be present—these either have to be created by hand, or
    created as part of submitting to GitHub. If we use the boilerplate, then this
    will be done for us automatically, along with configuring the `package.json` file
    for us—all we need to do is add a suitable task runner such as Gulp or Grunt.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们不使用插件模板，那么发布代码所需的大多数文件将不会存在——这些文件要么需要手动创建，要么在提交到 GitHub 时创建。如果我们使用模板，那么这将会自动完成，包括为我们配置
    `package.json` 文件——我们只需要添加一个合适的任务运行器，如 Gulp 或 Grunt。
- en: One might ask why we would even consider this route, if it is likely to throw
    up issues during development—the simple answer is that it helps us understand
    something of how plugins should be built. If we're building a plugin for personal
    use only, then there is no need for some of the files or processes that we have
    to use when releasing plugins for general use.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 人们可能会问，为什么我们甚至会考虑这条路线，如果它在开发过程中可能会出现问题的简单答案是，它帮助我们了解插件应该如何构建。如果我们只为个人使用构建插件，那么就没有必要使用我们在发布通用插件时必须使用的某些文件或流程。
- en: Simplifying the development process
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化开发过程
- en: Leaving aside the intended audience for our plugins, throughout our development
    process we've used a mix of different techniques, but with one thing in common—our
    plugins have very few dependencies! This is not to be sniffed at, as clearly any
    dependencies that change may have a resulting knock-on effect for our plugin.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在不考虑插件目标受众的情况下，我们开发过程中使用了不同的技术组合，但有一个共同点——我们的插件依赖项非常少！这并非微不足道，因为显然任何变化的依赖项都可能对我们的插件产生连锁反应。
- en: 'This aside, there will be times when the lack of any dependencies may require
    more development effort than is sensible (or practical)—it is at this point where
    we may need to consider using additional plugins to handle some of the processing.
    A perfect example of this is to parse a font: statement so that we can work on
    the constituent elements; there are a few others that are worthy of note:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '除了这一点，有时缺乏任何依赖项可能需要比合理的（或实际的）更多的开发努力——这时我们可能需要考虑使用额外的插件来处理一些处理工作。一个完美的例子是解析字体：语句，以便我们可以处理其组成部分；还有一些其他值得注意的例子： '
- en: '| Type of parser or helper | URL of plugin source | Purpose of plugin |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| 解析器或助手类型 | 插件源代码 URL | 插件用途 |'
- en: '| --- | --- | --- |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Selector | [https://github.com/postcss/postcss-selector-parser](https://github.com/postcss/postcss-selector-parser)
    | Manages selector strings. |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| 选择器 | [https://github.com/postcss/postcss-selector-parser](https://github.com/postcss/postcss-selector-parser)
    | 管理选择器字符串。 |'
- en: '| Value | [https://github.com/TrySound/postcss-value-parser](https://github.com/TrySound/postcss-value-parser)
    | Transforms CSS values and `@-`rule parameters into a tree of nodes for easy
    traversal. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| 值 | [https://github.com/TrySound/postcss-value-parser](https://github.com/TrySound/postcss-value-parser)
    | 将 CSS 值和 `@-` 规则参数转换为节点树，以便于遍历。 |'
- en: '| Property | [https://github.com/jedmao/postcss-resolve-prop](https://github.com/jedmao/postcss-resolve-prop)
    | Resolves a rule''s property value—this is particularly useful if multiple values
    are specified for the same property. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | [https://github.com/jedmao/postcss-resolve-prop](https://github.com/jedmao/postcss-resolve-prop)
    | 解析规则属性值——如果为同一属性指定了多个值，这特别有用。 |'
- en: '| Font | [https://github.com/jedmao/parse-css-font](https://github.com/jedmao/parse-css-font)
    | Parses a `font` property, and returns values for each element, such as `font-size`,
    `family`, `style`, or `lineHeigh` `t`. |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| 字体 | [https://github.com/jedmao/parse-css-font](https://github.com/jedmao/parse-css-font)
    | 解析 `font` 属性，并为每个元素返回值，例如 `font-size`、`family`、`style` 或 `lineHeight`。 |'
- en: '| Dimension | [https://github.com/jedmao/parse-css-dimension](https://github.com/jedmao/parse-css-dimension)
    | Parses a CSS dimension such as `number`, `length`, or `percentage`, to return
    a JavaScript object. |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| 尺寸 | [https://github.com/jedmao/parse-css-dimension](https://github.com/jedmao/parse-css-dimension)
    | 解析 CSS 尺寸，如 `number`、`length` 或 `percentage`，并返回一个 JavaScript 对象。 |'
- en: '| Sides | [https://github.com/jedmao/parse-css-sides](https://github.com/jedmao/parse-css-sides)
    | Parses an element''s side attributes (such as `margin`, `padding`, or `border`
    properties), and returns values for all four sides as strings. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| 边界 | [https://github.com/jedmao/parse-css-sides](https://github.com/jedmao/parse-css-sides)
    | 解析元素的边界属性（如 `margin`、`padding` 或 `border` 属性），并返回所有四边的字符串值。 |'
- en: '| Font helpers | [https://github.com/jedmao/postcss-font-helpers](https://github.com/jedmao/postcss-font-helpers)
    | Used to manipulate font statements in CSS—it either returns individual elements
    or a combined font object, as required. |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| 字体辅助工具 | [https://github.com/jedmao/postcss-font-helpers](https://github.com/jedmao/postcss-font-helpers)
    | 用于操作CSS中的字体声明——它根据需要返回单个元素或组合的字体对象。|'
- en: '| Margin helpers | [https://github.com/jedmao/postcss-margin-helpers](https://github.com/jedmao/postcss-margin-helpers)
    | Used to manipulate margin values for any specified element. |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| 边距辅助工具 | [https://github.com/jedmao/postcss-margin-helpers](https://github.com/jedmao/postcss-margin-helpers)
    | 用于操作任何指定元素的边距值。|'
- en: So, should we use them? It's not obligatory by any means, but they may help
    remove some of the effort required to create our plugin. If any are used, then
    it pays to keep a close note of any changes being made to the plugins, so that
    we can correct any issues that occur promptly; after all, no-one likes a plugin
    that isn't maintained properly by the developer!
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们应该使用它们吗？这并不是强制性的，但它们可能有助于减少创建我们插件所需的工作。如果使用了任何指南，那么密切关注对插件所做的任何更改是值得的，这样我们就可以及时纠正任何出现的问题；毕竟，没有人喜欢开发者没有妥善维护的插件！
- en: 'Let''s move on, a key part of plugin construction is consistency; the power
    of PostCSS allows any plugin to be created, so keeping a sense of uniformity is
    essential. To help with this, the developer of PostCSS has released a set of guidelines:
    let''s dive in and take a look at these in more detail.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续前进，插件构建的一个关键部分是一致性；PostCSS的力量允许创建任何插件，因此保持一致性至关重要。为了帮助实现这一点，PostCSS的开发者发布了一套指南：让我们深入探讨并更详细地查看这些指南。
- en: Guidelines for plugin building
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件构建指南
- en: One of the key benefits of the PostCSS ecosystem is its flexibility—it allows
    any developer to create any plugin, or adapt existing ones, as long as the license
    allows for further development!
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: PostCSS生态系统的一个关键优势是其灵活性——它允许任何开发者创建任何插件，或者修改现有的插件，只要许可证允许进一步开发！
- en: 'To help retain a sense of consistency, the developer has issued a series of
    mandatory guidelines, which should be followed where practical:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持一致性，开发者发布了一系列强制性的指南，应在实际情况下遵循：
- en: The name of your plugin should clearly indicate the purpose of that plugin—for
    example, if you built one to mimic the CSS4 `:hover` pseudo-class, then `postcss-hover`
    would be a good example.
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您插件的名称应清楚地表明该插件的目的——例如，如果您构建了一个用于模拟CSS4 `:hover`伪类的插件，那么`postcss-hover`就是一个很好的例子。
- en: It is better to create a plugin that does one thing well, and not one that tries
    to perform multiple tasks at the same time.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个只做一件事且做得好的插件比尝试同时执行多个任务要好。
- en: Always use the `postcss.plugin` method when creating plugins—you are then hooking
    into a common plugin API.
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建插件时始终使用`postcss.plugin`方法——这样您就连接到了一个通用的插件API。
- en: Where possible, try to use asynchronous methods—you should also set a `node.source`
    for each node, so that PostCSS can generate an accurate source map.
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在可能的情况下，尝试使用异步方法——您还应该为每个节点设置`node.source`，以便PostCSS可以生成准确的源映射。
- en: Do not use the console when displaying errors—some PostCSS runners do not allow
    console output. Use `result.warn` instead to manage errors.
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在显示错误时使用控制台——一些PostCSS运行器不允许控制台输出。请使用`result.warn`来管理错误。
- en: Any plugin created and published must be tested, with documented examples (where
    possible) and a change log in English.
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何创建并发布的插件都必须经过测试，并提供英文文档化的示例（如果可能）以及变更日志。
- en: If you are writing a plugin for Node, then the postcss-plugin keyword must feature
    in the `package.json` file—this is used for feedback about the PostCSS ecosystem.
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您正在为Node编写插件，那么`postcss-plugin`关键字必须在`package.json`文件中体现——这用于对PostCSS生态系统提供反馈。
- en: Tip
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: More details on these guidelines are available at [https://github.com/postcss/postcss/blob/master/docs/guidelines/plugin.md](https://github.com/postcss/postcss/blob/master/docs/guidelines/plugin.md).
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多关于这些指南的详细信息可在[https://github.com/postcss/postcss/blob/master/docs/guidelines/plugin.md](https://github.com/postcss/postcss/blob/master/docs/guidelines/plugin.md)找到。
- en: 'In addition, it is likely that we will use a task runner of some description,
    such as Broccoli, Grunt, or Brunch, or as in our case, Gulp. To help retain that
    consistency, the developer has issued a series of guidelines that should be followed
    where appropriate:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可能会使用某种任务运行器，例如Broccoli、Grunt或Brunch，或者在我们的情况下，Gulp。为了帮助保持一致性，开发者发布了一系列应在适当情况下遵循的指南：
- en: If your plugin uses a `config` file, then it must always be written in JavaScript,
    and set to support functions in parameters.
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的插件使用 `config` 文件，那么它必须始终用 JavaScript 编写，并设置为支持参数中的函数。
- en: When using runners, always set the to and from options, even if your runner
    doesn't handle writing to disk—this is to ensure that PostCSS generates accurate
    source maps and displays better syntax errors.
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用运行者时，始终设置到和从选项，即使你的运行者不处理写入磁盘——这是为了确保 PostCSS 生成准确的源映射并显示更好的语法错误。
- en: PostCSS runners must only use the publicly available asynchronous API—runners
    should not rely on undocumented methods or properties that may be removed in a
    future release.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostCSS 运行者必须仅使用公开可用的异步 API——运行者不应依赖于可能在未来版本中删除的未记录的方法或属性。
- en: Don't simply display the full JavaScript stack when handling `CssSyntaxError`
    messages—not every developer is familiar with JavaScript! Instead, make sure any
    errors are handled gracefully.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理 `CssSyntaxError` 消息时，不要简单地显示完整的 JavaScript 栈——并不是每个开发者都熟悉 JavaScript！相反，确保任何错误都能得到优雅的处理。
- en: Any warnings that appear from `result.warnings()` should be displayed by PostCSS
    runners; this can be facilitated by using the `postcss-logs-warnings` or `postcss-messages`
    plugins if needed.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `result.warnings()` 出现的任何警告都应由 PostCSS 运行者显示；如果需要，可以使用 `postcss-logs-warnings`
    或 `postcss-messages` 插件来简化这个过程。
- en: If your plugin uses the source map option, then by default this will be generated
    as an inline map by PostCSS. Runners must provide an option to save the map to
    a separate file, if required.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的插件使用了源映射选项，那么默认情况下，这将由 PostCSS 生成一个内联映射。如果需要，运行者必须提供一个选项来将映射保存到单独的文件中。
- en: Tip
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: More details on these guidelines are available at [https://github.com/postcss/postcss/blob/master/docs/guidelines/runner.md](https://github.com/postcss/postcss/blob/master/docs/guidelines/runner.md).
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多关于这些指南的详细信息可在[https://github.com/postcss/postcss/blob/master/docs/guidelines/runner.md](https://github.com/postcss/postcss/blob/master/docs/guidelines/runner.md)找到。
- en: The guidelines provided for plugins are mandatory, but in some cases can be
    seen as a start point—for example, a change log should always be maintained, but
    it is up to the developer as to whether this is a `HISTORY.md`, `CHANGELOG.md`,
    or a GitHub Releases document. The trick here is careful planning, and to keep
    it simple—focus on the basics first, before moving onto more complex projects.
    We can then get accustomed to what must be provided as a minimum for each plugin,
    before extending it to cover task runner use.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给插件的指南是强制性的，但在某些情况下，它们可以被视为一个起点——例如，变更日志应该始终维护，但具体是 `HISTORY.md`、`CHANGELOG.md`
    还是 GitHub 发布文档取决于开发者。这里的技巧是仔细规划，并保持简单——首先关注基础，然后再转向更复杂的项目。这样我们就可以习惯于每个插件必须提供的最低要求，然后再扩展以涵盖任务运行器的使用。
- en: 'Okay, let''s change tack at this point: one of the guidelines we''ve covered
    states that every plugin should be tested as part of normal practice; now is a
    perfect opportunity to explore what this means in more detail.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们在这里改变方向：我们之前提到的指南之一指出，每个插件都应该作为常规实践的一部分进行测试；现在是一个深入了解这究竟意味着什么的完美机会。
- en: Making the plugin available for use
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使插件可用
- en: A key part of creating any plugin is testing—once tested, we can then decide
    if we want to release it for general use on GitHub and Node's package manager
    directory. It's not obligatory, but if we have created something that could be
    useful to others, then it is only fair that we make it available!
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 创建任何插件的关键部分是测试——一旦测试通过，我们就可以决定是否将其发布到 GitHub 和 Node 的包管理器目录以供通用使用。这不是强制性的，但如果我们创建了一些可能对他人有用的东西，那么使其可用是公平的！
- en: 'There are a few steps involved in the process—they can be split into three
    groups: testing the plugin, adding the final details (in GitHub), and submitting
    it for inclusion on the PostCSS plugin directory. We''ll be using the `postcss-transition-shortcut`
    plugin that we''ve just created, as a basis for releasing it for general use.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程涉及几个步骤——它们可以分为三个组：测试插件、添加最终细节（在 GitHub 上），以及提交到 PostCSS 插件目录。我们将使用我们刚刚创建的
    `postcss-transition-shortcut` 插件作为发布供通用使用的基准。
- en: 'We''ve already covered the requirements for testing our plugin, so let''s explore
    the remaining steps needed to make our plugin available for general use by developers.
    The first step is to publish our plugin to a suitable repository on GitHub. This
    process falls outside of the scope of this book, but in a nutshell, the process
    for making the plugin available is as follows:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了测试插件的要求，现在让我们探讨使我们的插件可供开发者普遍使用的剩余步骤。第一步是将我们的插件发布到GitHub的一个合适的仓库。这个过程超出了本书的范围，但简而言之，使插件可用的过程如下：
- en: Add examples of code to the `README.md` file—this should show an example of
    a source file, and what we would expect to see when that file has been processed.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`README.md`文件中添加代码示例——这应该展示源文件的示例，以及当该文件被处理后我们期望看到的内容。
- en: In the `CHANGELOG.md` file, add the initial version number for the plugin.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`CHANGELOG.md`文件中，添加插件的初始版本号。
- en: All of the changes need to be committed to GitHub—my preferred choice is GitHub
    Desktop, available for Windows or Mac from [https://desktop.github.com/](https://desktop.github.com/).
    For Linux users, there are several options available at [https://git-scm.com/download/gui/linux](https://git-scm.com/download/gui/linux).
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有更改都需要提交到GitHub——我首选的选择是GitHub Desktop，可在Windows或Mac上从[https://desktop.github.com/](https://desktop.github.com/)获取。对于Linux用户，[https://git-scm.com/download/gui/linux](https://git-scm.com/download/gui/linux)提供了几个选项。
- en: At this point, we now need to publish our plugin to Node's package directory,
    NPM. The process involves adding a new user to NPM, then publishing all files
    to NPM; the details are outlined in full at [https://docs.npmjs.com/getting-started/publishing-npm-packages](https://docs.npmjs.com/getting-started/publishing-npm-packages).
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到目前为止，我们现在需要将我们的插件发布到Node的包目录NPM中。这个过程包括向NPM添加新用户，然后将所有文件发布到NPM；详细内容可以在[https://docs.npmjs.com/getting-started/publishing-npm-packages](https://docs.npmjs.com/getting-started/publishing-npm-packages)中找到。
- en: Once the plugin has been prepared, tested and published, all that remains is
    to fork PostCSS, add your plugin to the `Plugins` section in `README.md`, and
    send a `pull` request. We can then monitor the site's Twitter feed for updates
    about our plugin.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件准备就绪、测试并通过发布，剩下的就是将PostCSS进行分支，将你的插件添加到`README.md`中的`Plugins`部分，并发送一个`pull`请求。然后我们可以监控网站的Twitter动态，以获取关于我们插件更新的信息。
- en: Tip
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you are interested, then you may like to refer to *GitHub Essentials* by
    *Achilleas Pipinellis*, available at [https://www.packtpub.com/](https://www.packtpub.com/).
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这个话题感兴趣，你可能想参考*Achilleas Pipinellis*的《GitHub Essentials》，可在[https://www.packtpub.com/](https://www.packtpub.com/)找到。
- en: Summary
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Unlike other processors, plugins play a central role in PostCSS—we can pick
    and choose what functionality we want to use; if it doesn't exist, then we are
    free to create our own version. Throughout the course of this chapter, we've covered
    some key concepts around the use of plugins, so let's take a moment to review
    what we have learnt.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他处理器不同，插件在PostCSS中扮演着核心角色——我们可以挑选和选择我们想要使用的功能；如果不存在，那么我们可以自由地创建自己的版本。在本章的整个过程中，我们已经介绍了一些关于插件使用的关键概念，现在让我们花点时间回顾一下我们已经学到的内容。
- en: We kicked off with a quick introduction to the use of plugins, which was swiftly
    followed by exploring the architecture of a standard plugin that included a look
    at some of the key files that make up a standard plugin. We then moved on to take
    a look at some of the classes, modules, and methods available as part of the API.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先快速介绍了插件的使用方法，紧接着就探讨了标准插件的架构，包括查看构成标准插件的一些关键文件。然后，我们转向查看作为API一部分可用的类、模块和方法。
- en: Next up, we began working through the construction of an example plugin, before
    constructing a suitable test process and correcting the errors generated from
    linting the code as part of the test. We then rounded off our plugin with a look
    in more detail, to understand some of the key concepts behind how it works.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们开始构建一个示例插件，然后构建一个合适的测试过程，并纠正测试中从代码检查中产生的错误。然后我们更详细地审视我们的插件，以了解其工作背后的关键概念。
- en: Moving on, we then covered the construction of a second plugin, but this time
    explored the manual process, and examined why this is not a recommended practice.
    We took a look at some of the issues that can arise from this practice, and why
    using the plugin boilerplate makes development easier.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们介绍了构建第二个插件的过程，但这次我们探索了手动过程，并分析了为什么这不是一个推荐的做法。我们查看了一些可能由此产生的問題，以及为什么使用插件模板可以使开发更容易。
- en: We then rounded out the chapter by exploring some of the helper plugins we can
    use to simplify development, along with the recommended guidelines for development,
    and the process for making the plugin available for other developers to use in
    the future.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过探索一些可以帮助简化开发的辅助插件，以及推荐的开发指南，以及使插件可供其他开发者在未来使用的流程，来完善这一章。
- en: 'Okay, onwards we go: so far, we''ve used a variety of plugins throughout the
    book. There are three particular groups of plugins that are particularly useful—they
    are for fallback support, implementing shortcuts to creating CSS, and plugin packs.
    We''ll cover all three (and more) in the next chapter.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们继续前进：到目前为止，我们在整本书中使用了各种插件。有三个特定的插件组特别有用——它们是用于后备支持、实现创建 CSS 的快捷方式以及插件包。我们将在下一章中介绍这三个（以及更多）插件。
