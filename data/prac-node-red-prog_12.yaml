- en: '*Chapter 9*: Creating a ToDo Application with Node-RED'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：使用Node-RED创建ToDo应用程序'
- en: In this chapter, we are going to create a simple ToDo application in Node-RED.
    This is simple and straightforward and is a good tutorial on creating an application
    (flow) in Node-RED. We are going to use the project feature explained in the previous
    chapter, so this chapter will also double as a review of that function.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在Node-RED中创建一个简单的ToDo应用程序。这是一个简单直接的教程，可以帮助你在Node-RED中创建应用程序（流程）。我们将使用上一章中介绍的项目功能，因此本章也将作为该功能的复习。
- en: 'Let''s get started with the following four topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下四个主题开始：
- en: Why you should use Node-RED for web applications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么应该使用Node-RED进行Web应用程序
- en: Creating a database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库
- en: How to connect to a database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何连接数据库
- en: Running the application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: By the end of this chapter, you will have mastered how to make a simple web
    application with a database on Node-RED.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将掌握如何在Node-RED上制作一个带有数据库的简单Web应用程序。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To progress through this chapter, you will need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章，你需要以下内容：
- en: Node.js 12.x or above ([https://nodejs.org/](https://nodejs.org/)).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12.x或更高版本 ([https://nodejs.org/](https://nodejs.org/)).
- en: CouchDB 3.x ([https://couchdb.apache.org/](https://couchdb.apache.org/)).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CouchDB 3.x ([https://couchdb.apache.org/](https://couchdb.apache.org/)).
- en: A GitHub account, available from [https://github.com/](https://github.com/).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个GitHub账户，可从[https://github.com/](https://github.com/)获取。
- en: The code used in this chapter can be found in `Chapter09` at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中使用的代码可以在[https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming)的`Chapter09`中找到。
- en: Why you should use Node-RED for web applications
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么应该使用Node-RED进行Web应用程序
- en: So far, this book has explained that Node-RED is an easy-to-use tool for the
    **Internet of Things** (**IoT**). There are many cases where Node-RED is used
    as a solution in the IoT field.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书已经解释了Node-RED是**物联网**(**IoT**)的易于使用的工具。在物联网领域，Node-RED被用作解决方案的情况很多。
- en: However, recently, Node-RED has been recognized as a tool for creating web applications
    as well as IoT.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最近，Node-RED被认为是一个用于创建Web应用程序以及物联网的工具。
- en: I think one of the reasons is that the ideas of *no-code* and *low-code* have
    become widespread in the world. Nowadays, the number of people who know flow-based
    programming tools and visual programming tools is increasing, and they are being
    used in various fields.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为其中一个原因是*无代码*和*低代码*的理念已经在世界范围内得到了广泛传播。如今，了解基于流的编程工具和可视化编程工具的人数正在增加，并且它们正在被用于各个领域。
- en: It would be natural for Node-RED, which is made with Node.js, to be used for
    web applications.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED是使用Node.js制作的，自然而然地可以用于Web应用程序。
- en: The project function that we learned in the previous chapter, in collaboration
    with Git/GitHub, may also be a part of the flow of web application development
    culture.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章学习的项目功能，与Git/GitHub合作，也可能成为Web应用程序开发文化流程的一部分。
- en: In this chapter, we will create a ToDo application that is very suitable as
    a piece of development for tutorials.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个非常适合作为教程开发的ToDo应用程序。
- en: 'The overall picture of the application to be created is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建的应用程序的整体图景如下：
- en: '![Figure 9.1 – An overview of the application we''ll create'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1 – 我们将创建的应用程序概述'
- en: '](img/Figure_9.1_B16353.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.1_B16353.jpg)'
- en: Figure 9.1 – An overview of the application we'll create
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 我们将创建的应用程序概述
- en: '*Figure 9.1* outlines the application''s overview. The application will be
    accessed from a client PC browser. The user interface of this application is made
    with Node.js frameworks, **TodoMVC** and **Todo-Backend**. The data-handling programming
    is built on Node-RED by connecting CouchDB as the storage for this data.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9.1*概述了应用程序的概况。该应用程序将从客户端PC浏览器访问。该应用程序的用户界面是使用Node.js框架**TodoMVC**和**Todo-Backend**制作的。数据处理编程是通过将CouchDB连接为存储数据的Node-RED构建的。'
- en: In this application, the user interface and backend application are not built
    on Node-RED.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，用户界面和后端应用程序都不是基于Node-RED构建的。
- en: The application is implemented on your localhost directly as a Node.js application.
    We will cover this in a later step, where we will set it to redirect to the localhost
    Node.js application when accessing the localhost port where Node-RED is running.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序是直接在本地主机上作为Node.js应用程序实现的。我们将在稍后的步骤中介绍这一点，当访问Node-RED运行的本地主机端口时，我们将设置它重定向到本地主机Node.js应用程序。
- en: 'There are two frameworks used for this application that we should be aware
    of before we move toward the hands-on example. We will make our ToDo application
    with Node-RED in this hands-on tutorial. The application is implemented via these
    two Node.js frameworks:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行实际操作示例之前，我们应该了解一下这个应用程序使用了两个框架。我们将在这个实际操作教程中使用Node-RED制作我们的ToDo应用程序。该应用程序是通过这两个Node.js框架实现的：
- en: '**TodoMVC**: [http://todomvc.com/](http://todomvc.com/)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TodoMVC**: [http://todomvc.com/](http://todomvc.com/)'
- en: '![Figure 9.2 – TodoMVC'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.2 – TodoMVC'
- en: '](img/Figure_9.2_B16353.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.2_B16353.jpg)'
- en: Figure 9.2 – TodoMVC
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – TodoMVC
- en: '**Todo-Backend**: [https://todobackend.com/](https://todobackend.com/)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Todo-Backend**: [https://todobackend.com/](https://todobackend.com/)'
- en: '![Figure 9.3 – Todo-Backend'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.3 – Todo-Backend'
- en: '](img/Figure_9.3_B16353.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.3_B16353.jpg)'
- en: Figure 9.3 – Todo-Backend
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – Todo-Backend
- en: As you can see from the fact that it is possible to create a Node-RED flow by
    linking web application frameworks, Node-RED works very well with the web applications
    implemented in Node.js and the frameworks around it. This hands-on tutorial will
    help you understand why Node-RED is so popular for developing web applications
    in a no-code/low-code fashion.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可以从可以通过链接Web应用程序框架创建Node-RED流的事实中看出来，Node-RED与使用Node.js实现的Web应用程序及其周围的框架非常配合。这个实际操作教程将帮助你了解为什么Node-RED在以无代码/低代码方式开发Web应用程序方面如此受欢迎。
- en: Next, we will move to the hands-on steps.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将进行实际操作步骤。
- en: Creating a database
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库
- en: We introduced the big picture of the application in the previous section, but
    more specifically, this application uses CouchDB for the database. In this hands-on
    tutorial, we will create an application with Node-RED running on localhost. Therefore,
    you need to install CouchDB on your own local machine as well.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节介绍了应用程序的整体情况，但更具体地，这个应用程序使用CouchDB作为数据库。在这个实践教程中，我们将创建一个在本地主机上运行的Node-RED应用程序。因此，你也需要在自己的本地机器上安装CouchDB。
- en: 'Let''s install it by following these steps:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤安装它：
- en: Access the CouchDB website at [https://couchdb.apache.org/](https://couchdb.apache.org/)
    and then click the **DOWNLOAD** button:![Figure 9.4 – Click the DOWNLOAD button
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问CouchDB网站[https://couchdb.apache.org/](https://couchdb.apache.org/)，然后点击**DOWNLOAD**按钮：![图9.4
    - 点击DOWNLOAD按钮
- en: '](img/Figure_9.4_B16353.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.4_B16353.jpg)'
- en: Figure 9.4 – Click the DOWNLOAD button
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 - 点击DOWNLOAD按钮
- en: Select a file depending on the system running on local machine:![Figure 9.5
    – Select file
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据本地机器上运行的系统选择一个文件：![图9.5 - 选择文件
- en: '](img/Figure_9.5_B16353.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.5_B16353.jpg)'
- en: Figure 9.5 – Select file
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 - 选择文件
- en: Expand the ZIP file you downloaded and run the application file to start CouchDB
    once the file has finished downloading:![Figure 9.6 – Start CouchDB
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压下载的ZIP文件并运行应用程序文件以启动CouchDB，一旦文件下载完成：![图9.6 - 启动CouchDB
- en: '](img/Figure_9.6_B16353.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.6_B16353.jpg)'
- en: Figure 9.6 – Start CouchDB
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6 - 启动CouchDB
- en: Running the CouchDB application file launches a browser and opens the CouchDB
    management console. If it doesn't open automatically, you can also open it manually
    from the application menu:![Figure 9.7 – Open the CouchDB admin console
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行CouchDB应用程序文件会启动浏览器并打开CouchDB管理控制台。如果没有自动打开，也可以从应用程序菜单手动打开：![图9.7 - 打开CouchDB管理控制台
- en: '](img/Figure_9.7_B16353.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.7_B16353.jpg)'
- en: Figure 9.7 – Open the CouchDB admin console
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7 - 打开CouchDB管理控制台
- en: In the CouchDB management console, create a new database. Create it with the
    name `todos`. No partition is needed. Finally, click the **Create** button to
    complete:![Figure 9.8 – Create a new database named "todos"
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CouchDB管理控制台中创建一个新的数据库。使用名称`todos`创建它。不需要分区。最后，点击**Create**按钮完成：![图9.8 - 创建名为"todos"的新数据库
- en: '](img/Figure_9.8_B16353.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.8_B16353.jpg)'
- en: Figure 9.8 – Create a new database named "todos"
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8 - 创建名为"todos"的新数据库
- en: 'You will now be able to see the database named **todos** on your CouchDB admin
    console:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以在CouchDB管理控制台上看到名为**todos**的数据库：
- en: '![Figure 9.9 – Check the database you created'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.9 - 检查你创建的数据库'
- en: '](img/Figure_9.9_B16353.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.9_B16353.jpg)'
- en: Figure 9.9 – Check the database you created
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9 - 检查你创建的数据库
- en: 'Create an admin user to access this database from your application. To do this,
    access `admin` is set as the username and `adminpass` is set as the password:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个管理员用户来访问这个数据库。为此，访问`admin`设置为用户名，`adminpass`设置为密码：
- en: '![Figure 9.10 – Create a server admin user account](img/Figure_9.10_B16353.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图9.10 - 创建服务器管理员用户账户](img/Figure_9.10_B16353.jpg)'
- en: Figure 9.10 – Create a server admin user account
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.10 - 创建服务器管理员用户账户
- en: This completes all the settings related to CouchDB. Next, let's move on to setting
    up our Node-RED side.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了所有与CouchDB相关的设置。接下来，让我们继续设置我们的Node-RED端。
- en: How to connect to the database
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何连接到数据库
- en: Now that the database has actually been created, we will move toward the hands-on
    tutorial, where we will clone the Node-RED flow from GitHub, and implement the
    connection to that database from the Node-RED flow. Use the project feature you
    learned in the previous chapter to connect to your GitHub repository, load the
    prepared flow definition file, and implement it on Node-RED in your local environment.
    Since you have already done this in the previous chapter, it is not necessary
    to create a new flow this time.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据库实际上已经创建了，我们将朝着实践教程迈进，我们将从GitHub克隆Node-RED流，并实现从Node-RED流连接到该数据库。使用你在上一章学到的项目功能连接到你的GitHub存储库，加载准备好的流定义文件，并在本地环境中在Node-RED上实现它。由于你在上一章已经做过这个操作，这次不需要创建新的流。
- en: Configuring Node-RED
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Node-RED
- en: The first thing you need to do is change the localhost path (URL) of the Node-RED
    flow editor. Currently, you can access the flow editor at `localhost:1880`, but
    in order to change the path (URL) of the web application created by this hands-on
    tutorial to `localhost:1880`, we need to change the path of the flow editor to
    `localhost:1880/admin`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的第一件事是更改Node-RED流编辑器的本地主机路径（URL）。目前，你可以在`localhost:1880`访问流编辑器，但为了将由这个实践教程创建的Web应用程序的路径（URL）更改为`localhost:1880`，我们需要将流编辑器的路径更改为`localhost:1880/admin`。
- en: This is because you have to move the root path of the Node-RED flow editor to
    access the Node.js ToDo application running on the same port on your localhost.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为你必须将Node-RED流编辑器的根路径移动到本地主机上运行的Node.js ToDo应用程序的相同端口上。
- en: 'To configure Node-RED, follow these steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置Node-RED，请按照以下步骤操作：
- en: Open the settings file (`~/.node-red/settings.js`).
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开设置文件（`~/.node-red/settings.js`）。
- en: Find the `httpAdminRoot` setting in the `settings.js` file you opened.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到你打开的`settings.js`文件中的`httpAdminRoot`设置。
- en: 'This changes the path you access the Node-RED flow editor on. By default it
    uses the root path `/`, however, we want to use that for our application, so we
    can use this setting to move the editor. It is commented out by default, so uncomment
    it by removing the `//` at the start of the line:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这会更改你访问Node-RED流编辑器的路径。默认情况下，它使用根路径`/`，但是我们想要将其用于我们的应用程序，所以我们可以使用这个设置来移动编辑器。默认情况下是注释掉的，所以通过删除行首的`//`取消注释：
- en: '![Figure 9.11 – Uncomment httpAdminRoot to enable the flow editor path'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.11 - 取消注释httpAdminRoot以启用流编辑器路径'
- en: '](img/Figure_9.11_B16353.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.11_B16353.jpg)'
- en: Figure 9.11 – Uncomment httpAdminRoot to enable the flow editor path
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.11 - 取消注释httpAdminRoot以启用流编辑器路径
- en: You have now moved the flow editor to `/admin`. Restart Node-RED on your local
    machine and access the `http://localhost:1880/admin` URL to run your Node-RED
    flow editor.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在已将流程编辑器移至`/admin`。在本地计算机上重新启动Node-RED，并访问`http://localhost:1880/admin` URL以运行您的Node-RED流程编辑器。
- en: Next, let's clone the project.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们克隆项目。
- en: Cloning the Node-RED Project
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆Node-RED项目
- en: This hands-on tutorial provides an example of a Node-RED project for you to
    use. Before cloning it into your local Node-RED instance, you should first fork
    the project so you have your own copy of it to use.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实践教程为您提供了一个Node-RED项目的示例。在将其克隆到本地Node-RED实例之前，您应该首先分叉该项目，以便您有自己的副本可供使用。
- en: After forking it, you need to clone the project into your Node-RED instance.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 分叉后，您需要将项目克隆到您的Node-RED实例中。
- en: 'To clone your project, follow these steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要克隆您的项目，请按照以下步骤进行：
- en: Open the example project at [https://github.com/taijihagino/node-red-todo-app](https://github.com/taijihagino/node-red-todo-app).
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://github.com/taijihagino/node-red-todo-app](https://github.com/taijihagino/node-red-todo-app)上打开示例项目。
- en: Click the **fork** button to create your own copy of the repository.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**fork**按钮以创建存储库的自己的副本。
- en: Copy the URL of the repository you forked.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制您分叉的存储库的URL。
- en: Access the Node-RED editor via `http://127.0.0.1:1880/admin/`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`http://127.0.0.1:1880/admin/`访问Node-RED编辑器。
- en: Click the **Clone Repository** button in the **Projects Welcome** screen. If
    you've already closed that screen, you can reopen it with **Projects | New** from
    the main menu:![Figure 9.12 – Click New under the Projects menu to clone the repo
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目欢迎**屏幕上单击**克隆存储库**按钮。如果您已经关闭了该屏幕，可以从主菜单中使用**项目 | 新建**重新打开它：![图9.12 - 单击项目菜单下的新建以克隆存储库
- en: '](img/Figure_9.12_B16353.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.12_B16353.jpg)'
- en: Figure 9.12 – Click New under the Projects menu to clone the repo
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.12 - 单击项目菜单下的新建以克隆存储库
- en: On the **Projects** screen, provide your repository URL, your username, and
    password. These are used when committing changes to the project. If your local
    Git client is already configured, it will pick those values. It is fine to leave
    the **Credentials encryption key** field blank:![Figure 9.13 – Provide your GitHub
    repository information
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**屏幕上，提供您的存储库URL、用户名和密码。这些在提交更改到项目时使用。如果您的本地Git客户端已配置，它将选择这些值。将**凭据加密密钥**字段留空是可以的：![图9.13
    - 提供您的GitHub存储库信息
- en: '](img/Figure_9.13_B16353.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.13_B16353.jpg)'
- en: Figure 9.13 – Provide your GitHub repository information
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.13 - 提供您的GitHub存储库信息
- en: This will clone the repository into a new local project and start running it.
    In the workspace, you can see flows that implement each part of the application's
    REST API.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将克隆存储库到一个新的本地项目并开始运行它。在工作区中，您可以看到实现应用程序的每个部分的流程。
- en: 'You will see some errors on all of the **cloudant** nodes, but the reasons
    for these errors come from the connection settings. These settings will be made
    in later steps so it is not a problem for now:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在所有**cloudant**节点上看到一些错误，但这些错误的原因来自连接设置。这些设置将在后续步骤中进行设置，所以现在不是问题：
- en: '![Figure 9.14 – The flow overview you cloned'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.14 - 您克隆的流程概述'
- en: '](img/Figure_9.14_B16353.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.14_B16353.jpg)'
- en: Figure 9.14 – The flow overview you cloned
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.14 - 您克隆的流程概述
- en: The project also includes some static resources that need to be served by the
    runtime. To do this, some changes to how you access this web application need
    to be made in your settings file.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该项目还包括一些需要由运行时提供的静态资源。为此，需要对如何访问此Web应用程序的设置文件进行一些更改。
- en: 'First, you must locate your newly-cloned project on the local filesystem. It
    will be in `<node-red root>/projects/<name-of-project>`. Within that folder, you
    will find a folder named `public`. This contains the static resources for the
    project of this ToDo application, such as the following, for example:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您必须在本地文件系统中找到您新克隆的项目。它将在`<node-red root>/projects/<name-of-project>`中。在该文件夹中，您将找到一个名为`public`的文件夹。这包含了此ToDo应用程序项目的静态资源，例如以下内容：
- en: '[PRE0]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following image is an example of this. Please use it as a reference when
    checking your own file path:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像是一个示例。请在检查您自己的文件路径时使用它作为参考：
- en: '![Figure 9.15 – The ToDo application project folder'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.15 - ToDo应用程序项目文件夹'
- en: '](img/Figure_9.15_B16353.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.15_B16353.jpg)'
- en: Figure 9.15 – The ToDo application project folder
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.15 - ToDo应用程序项目文件夹
- en: Edit your settings file (`~/.node-red/settings.js`) and find the `httpStatic`
    property in this file. Uncomment it by removing the `//` at the start of the line
    and set its value using the absolute path to the `public` folder. The path in
    the following image is just an example; please replace it with your path:![Figure
    9.16 – Uncomment httpStatic and set your application project path
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑您的设置文件（`~/.node-red/settings.js`），并在该文件中找到`httpStatic`属性。通过删除行首的`//`来取消注释，并使用绝对路径到`public`文件夹来设置其值。以下图像中的路径仅为示例；请用您的路径替换它：![图9.16
    - 取消注释httpStatic并设置您的应用程序项目路径
- en: '](img/Figure_9.16_B16353.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.16_B16353.jpg)'
- en: Figure 9.16 – Uncomment httpStatic and set your application project path
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.16 - 取消注释httpStatic并设置您的应用程序项目路径
- en: Restart Node-RED.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动Node-RED。
- en: By restarting Node-RED, the changed `settings.js` contents will be reloaded
    and applied.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过重新启动Node-RED，更改的`settings.js`内容将被重新加载和应用。
- en: Next, let's configure the Node-RED and CouchDB connection.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们配置Node-RED和CouchDB连接。
- en: Configuring the Node-RED and CouchDB connection
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Node-RED和CouchDB连接
- en: As you know, we are using a **cloudant** node to connect to CouchDB, correct?
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所知，我们正在使用**cloudant**节点连接到CouchDB，对吗？
- en: Cloudant is a JSON database based on Apache CouchDB. Cloudant has CouchDB-style
    replication and synchronization capabilities, so you can connect to CouchDB using
    the **cloudant** node provided by Node-RED.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Cloudant是基于Apache CouchDB的JSON数据库。Cloudant具有CouchDB风格的复制和同步功能，因此您可以使用Node-RED提供的**cloudant**节点连接到CouchDB。
- en: As mentioned earlier, the **cloudant** node on Node-RED is experiencing an error.
    This is because the connection information to CouchDB on your local system is
    not set correctly when cloned from GitHub.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Node-RED上的**cloudant**节点出现错误。这是因为从GitHub克隆时，本地系统对CouchDB的连接信息未正确设置。
- en: Here, we will correct the settings of the **cloudant** node on Node-RED.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将纠正Node-RED上**cloudant**节点的设置。
- en: 'Now, carry out the settings according to the following steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，根据以下步骤进行设置：
- en: Double-click any **cloudant** node to open the settings screen. If you set one
    of the **cloudant** nodes there, the settings of all **cloudant** nodes on the
    same flow will be updated, so it doesn't matter which **cloudant** node you choose:![Figure
    9.17 – Open the settings screen with a double-click on any cloudant node
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击任何**cloudant**节点以打开设置屏幕。如果您在其中设置了一个**cloudant**节点，则同一流程上的所有**cloudant**节点的设置都将被更新，因此您选择哪个**cloudant**节点并不重要：![图9.17–双击任何cloudant节点打开设置屏幕
- en: '](img/Figure_9.17_B16353.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.17_B16353.jpg)'
- en: Figure 9.17 – Open the settings screen with a double-click on any cloudant node
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.17–双击任何cloudant节点打开设置屏幕
- en: Click the **pencil mark** button on the right side of **Server** on the **cloudant**
    node settings screen to open the connection information settings screen for CouchDB:![Figure
    9.18 – Click the pencil mark button
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**cloudant**节点设置屏幕上**服务器**右侧的**铅笔标记**按钮，打开CouchDB的连接信息设置屏幕：![图9.18–点击铅笔标记按钮
- en: '](img/Figure_9.18_B16353.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.18_B16353.jpg)'
- en: Figure 9.18 – Click the pencil mark button
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.18–点击铅笔标记按钮
- en: When the connection information settings screen for CouchDB opens, go to `http://localhost:5984`
    (if you have CouchDB installed on a different port, replace it as appropriate)
    and set the **Username** to the server admin user of CouchDB that you set earlier.
    For **Password**, enter the server admin password.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当打开CouchDB的连接信息设置屏幕时，转到`http://localhost:5984`（如果您的CouchDB安装在不同的端口上，请相应地替换），并将**用户名**设置为您之前设置的CouchDB服务器管理员用户。对于**密码**，输入服务器管理员密码。
- en: After entering all of this, click the **Update** button on the upper right to
    return to the previous screen:![Figure 9.19 – Set your CouchDB URL and server
    admin user/password
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在输入所有内容后，点击右上角的**更新**按钮返回到上一个屏幕：![图9.19–设置您的CouchDB URL和服务器管理员用户名/密码
- en: '](img/Figure_9.19_B16353.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.19_B16353.jpg)'
- en: Figure 9.19 – Set your CouchDB URL and server admin user/password
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.19–设置您的CouchDB URL和服务器管理员用户名/密码
- en: 'Click the **Done** button and return to the workspace of your Node-RED flow
    editor. You will see a message reading **connected** on all of the **cloudant**
    nodes next to a green square:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**完成**按钮并返回到您的Node-RED流程编辑器的工作区。您将看到所有**cloudant**节点旁边的**连接**上有一个绿色方块的消息：
- en: '![Figure 9.20 – Check that all of the cloudant nodes are error-free'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.20–检查所有cloudant节点是否无错误'
- en: '](img/Figure_9.20_B16353.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.20_B16353.jpg)'
- en: Figure 9.20 – Check that all of the cloudant nodes are error-free
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.20–检查所有cloudant节点是否无错误
- en: Perfect, you have succeeded in configuring the settings for starting the ToDo
    application in Node-RED. Next, let's run this ToDo application.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 完美，您已成功配置了在Node-RED中启动ToDo应用程序的设置。接下来，让我们运行这个ToDo应用程序。
- en: Running the application
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: If everything is working, you should be able to open `http://localhost:1880`
    in the browser and see the application.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，您应该能够在浏览器中打开`http://localhost:1880`并看到应用程序。
- en: 'Now, let''s confirm that the ToDo application works by following these steps:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过以下步骤确认ToDo应用程序是否正常工作：
- en: Access `http://localhost:1880` to open your ToDo application.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问`http://localhost:1880`打开您的ToDo应用程序。
- en: If you get the Node-RED flow editor when you open `localhost:1880`, the setting
    `httpAdminRoot` is not enabled, so please check your `settings.js` file again.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在打开`localhost:1880`时看到Node-RED流程编辑器，则表示`httpAdminRoot`设置未启用，请再次检查您的`settings.js`文件。
- en: 'When you access this URL, the following screen should be displayed:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问此URL时，应显示以下屏幕：
- en: '![Figure 9.21 – Open your ToDo application'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.21–打开您的ToDo应用程序'
- en: '](img/Figure_9.21_B16353.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.21_B16353.jpg)'
- en: Figure 9.21 – Open your ToDo application
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.21–打开您的ToDo应用程序
- en: Any ToDo item is fine for this test, so enter any words as a sample task. Here,
    I typed `Report my tasks`:![Figure 9.22 – Enter a sample ToDo item
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于此测试，任何ToDo项目都可以，因此输入任何单词作为示例任务。在这里，我输入了`报告我的任务`：![图9.22–输入一个示例ToDo项目
- en: '](img/Figure_9.22_B16353.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.22_B16353.jpg)'
- en: Figure 9.22 – Enter a sample ToDo item
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.22–输入一个示例ToDo项目
- en: If you press the *Enter* key while entering a value in the text box, that value
    will be registered as a ToDo item. In the following screenshot, we can see that
    it looks like it has been registered in the application:![Figure 9.23 – The ToDo
    item you entered has been registered
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本框中输入值时，如果按下*Enter*键，该值将被注册为一个ToDo项目。在下面的截图中，我们可以看到它看起来已经在应用程序中注册了：![图9.23–您输入的ToDo项目已被注册
- en: '](img/Figure_9.23_B16353.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.23_B16353.jpg)'
- en: Figure 9.23 – The ToDo item you entered has been registered
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.23–您输入的ToDo项目已被注册
- en: Let's check if the ToDo item that showed as registered on the screen is registered
    in the database.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下屏幕上显示为已注册的ToDo项目是否在数据库中注册。
- en: Open the CouchDB admin console.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开CouchDB管理控制台。
- en: If you forget how to open it, you can open it with the **Open Admin Console**
    option from the CouchDB application menu. If you reopen the management console,
    or if the time has passed, you may be asked to log in. In that case, log in with
    the server admin username and password you set.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您忘记如何打开它，可以从CouchDB应用程序菜单中选择**打开管理控制台**选项打开它。如果重新打开管理控制台，或者时间已过，可能会要求您登录。在这种情况下，请使用您设置的服务器管理员用户名和密码登录。
- en: Select **Database** option in the side menu, and click **todos**. You will see
    the record you registered on your ToDo application. Click the record to show more
    details:![Figure 9.24 – Check the record on your todos database
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在侧边菜单中选择**数据库**选项，然后点击**todos**。您将看到您在ToDo应用程序上注册的记录。点击记录以查看更多细节：![图9.24–检查您的todos数据库上的记录
- en: '](img/Figure_9.24_B16353.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.24_B16353.jpg)'
- en: Figure 9.24 – Check the record on your todos database
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.24 - 检查您的待办事项数据库中的记录
- en: 'You will see the detail of the record you selected. The data is the exact item
    you registered via the ToDo application, that is, **Report my tasks**:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到您选择的记录的详细信息。数据是您通过ToDo应用程序注册的确切项目，即**报告我的任务**：
- en: '![Figure 9.25 – Check the result'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.25 - 检查结果'
- en: '](img/Figure_9.25_B16353.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.25_B16353.jpg)'
- en: Figure 9.25 – Check the result
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.25 - 检查结果
- en: Congratulations! This completes the hands-on tutorial for cloning a ToDo application
    from GitHub and implementing it in Node-RED.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！这完成了从GitHub克隆ToDo应用程序并在Node-RED中实现的实践教程。
- en: The point of this tutorial was to use the project function of Node-RED to clone
    and execute the application project from the GitHub repository.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的重点是使用Node-RED的项目功能从GitHub存储库克隆和执行应用程序项目。
- en: This hands-on tutorial helped us learn that we don't necessarily have to implement
    user interfaces and server-side business logic in web applications made with Node-RED.
    We saw how one of the features of Node-RED is that the user interfaces and server-side
    business logic of the web application that we built are located outside of Node-RED,
    while only data handling functionalities such as accessing the database are done
    internally by Node-RED.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实践教程帮助我们了解，我们不一定需要在使用Node-RED制作的Web应用程序中实现用户界面和服务器端业务逻辑。我们看到Node-RED的一个特点是，我们构建的Web应用程序的用户界面和服务器端业务逻辑位于Node-RED之外，而仅数据处理功能（如访问数据库）由Node-RED内部完成。
- en: The GitHub repository we used contains two things, that is, Node-RED flow, which
    handles data, and the ToDo application, which runs outside Node-RED. The point
    here was to use the project function of Node-RED to clone and execute the application
    project from the GitHub repository.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的GitHub存储库包含两件事，即处理数据的Node-RED流程和在Node-RED之外运行的ToDo应用程序。这里的重点是使用Node-RED的项目功能从GitHub存储库克隆和执行应用程序项目。
- en: Summary
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, in the form of a hands-on tutorial, we experienced how to actually
    run a web application on Node-RED using the project feature. Of course, this is
    just one way to create a web application (including a UI, using a template node,
    and so on) on Node-RED. However, remembering this pattern will definitely be useful
    for your future development tasks.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过实践教程的形式体验了如何使用项目功能在Node-RED上实际运行Web应用程序。当然，这只是在Node-RED上创建Web应用程序（包括UI，使用模板节点等）的一种方式。然而，记住这种模式对于您未来的开发任务肯定会有用。
- en: In the next chapter, we will look at a hands-on scenario where we will be sending
    sensor data from an edge device to the server side (cloud) with Node-RED.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到一个实际场景，我们将使用Node-RED将传感器数据从边缘设备发送到服务器端（云）。
