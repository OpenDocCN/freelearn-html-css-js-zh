- en: Chapter 8. A Bug-Tracking Agent for Teams
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章. 团队用的缺陷跟踪代理
- en: '**InternetRelayChat** (**IRC**) enables us to communicate in real time in the
    form of text. This chat runs on a TCP protocol in a client-server model. IRC supports
    group messaging, which is called as channels, and also supports private messaging.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**InternetRelayChat** (**IRC**) 允许我们以文本形式进行实时通信。这种聊天在客户端-服务器模型中运行，基于 TCP 协议。IRC
    支持群组消息，这被称为频道，同时也支持私密消息。'
- en: IRC is organized into many networks with different audiences. IRC being a client
    server, users need IRC clients to connect to IRC servers. IRC client software
    comes as packaged software, as well as web-based clients. Some browsers are also
    providing IRC clients as add-ons. Users can either install them on their systems,
    and then they can be used to connect to IRC servers or networks. While connecting
    to these IRC servers, users will have to provide a unique nickname and choose
    an existing channel for communication, or users can start a new channel while
    connecting to these servers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: IRC 被组织成许多网络，具有不同的受众。作为客户端-服务器架构，用户需要使用 IRC 客户端连接到 IRC 服务器。IRC 客户端软件可以是打包软件，也可以是基于
    Web 的客户端。一些浏览器也提供作为附加组件的 IRC 客户端。用户可以在他们的系统上安装它们，然后可以使用它们连接到 IRC 服务器或网络。在连接到这些
    IRC 服务器时，用户将必须提供一个唯一的昵称并选择一个现有的通信频道，或者用户可以在连接到这些服务器时创建一个新频道。
- en: In this chapter, we are going to develop one such IRC bot for bug-tracking purposes.
    This bug-tracking bot will provide information about bugs as well as details about
    a particular bug. All this will be done seamlessly within the IRC channel itself.
    It's going to be one window operation for a team, when it comes to knowing about
    their bugs or defects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开发一个用于缺陷跟踪目的的此类 IRC 机器人。这个缺陷跟踪机器人将提供有关缺陷的详细信息以及特定缺陷的细节。所有这些都将无缝地在 IRC
    频道内完成。对于团队来说，在了解他们的缺陷或缺陷时，这将是一个窗口操作。
- en: Great!!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！！
- en: IRC client and server
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IRC 客户端和服务器
- en: As mentioned in the introduction, to initiate an IRC communication, we need
    an IRC client, and a server or a network to which our client will be connected.
    We will be using a freenode network for our client to connect to. Freenode is
    the largest free, open source, software-focused IRC network.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如介绍中所述，要启动 IRC 通信，我们需要一个 IRC 客户端和一个服务器或网络，我们的客户端将连接到该网络。我们将使用 freenode 网络让我们的客户端连接。Freenode
    是最大的免费、开源、以软件为中心的 IRC 网络。
- en: IRC web-based client
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于 Web 的 IRC 客户端
- en: 'We will be using the IRC web-based client through a URL ([https://webchat.freenode.net/](https://webchat.freenode.net/)).
    After opening the URL, you will see the following screen:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过 URL 使用基于 Web 的 IRC 客户端（[https://webchat.freenode.net/](https://webchat.freenode.net/)）。打开
    URL 后，您将看到以下屏幕：
- en: '![IRC web-based client](img/image00379.jpeg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![基于 Web 的 IRC 客户端](img/image00379.jpeg)'
- en: As mentioned earlier, while connecting, we need to provide **Nickname:** and
    **Channels:**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在连接时，我们需要提供 **昵称** 和 **频道**。
- en: 'I have provided **Nickname:** as `Madan` and at **Channels:** as `#BugsChannel`.
    In IRC, channels are always identified by a #, so I used # to begin the name of
    my bugs channel. This is the new channel that we will be starting for communication.
    All the developers or team members can similarly provide their nicknames and this
    channel name to join the communication. Now let''s prove **Humanity:** by selecting
    **I''m not a robot** and clicking the **Connect** button.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '我已提供 **昵称** 为 `Madan`，在 **频道** 中为 `#BugsChannel`。在 IRC 中，频道总是以 # 开头，所以我用 #
    开头命名我的缺陷频道。这是我们为通信开始的新频道。所有开发者或团队成员都可以提供他们的昵称和这个频道名称来加入通信。现在让我们通过选择 **我不是机器人**
    并点击 **连接** 按钮来证明 **人性**。'
- en: '![IRC web-based client](img/image00380.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![基于 Web 的 IRC 客户端](img/image00380.jpeg)'
- en: 'Once connected, you will see the following screen:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 连接成功后，您将看到以下屏幕：
- en: '![IRC web-based client](img/image00381.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![基于 Web 的 IRC 客户端](img/image00381.jpeg)'
- en: With this, our IRC client is connected to the freenode network. You can also
    see the username on the right-hand side is `@Madan`, and within this **#BugsChannel**.
    Whoever joins this channel, using this channel name and a network, will be shown
    on the right-hand side.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们的 IRC 客户端已连接到 freenode 网络。您也可以看到右侧的用户名是 `@Madan`，在 **#BugsChannel**
    内。任何使用这个频道名称和网络加入该频道的人都会显示在右侧。
- en: In the next section, we will ask our bot to join this channel and the same network,
    and will see how it appears within the channel.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将让我们的机器人加入这个频道和相同的网络，并查看它如何在频道中显示。
- en: IRC bots
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IRC 机器人
- en: IRC bot is a program that connects to IRC as one of the clients and appears
    as one of the users in the IRC channels. These IRC bots are used to provide IRC
    services or to host chat-based custom implementations that will help teams to
    efficiently collaborate.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: IRC机器人是一种连接到IRC作为客户端之一并出现在IRC频道中的用户的程序。这些IRC机器人用于提供IRC服务或托管基于聊天的自定义实现，这将帮助团队高效协作。
- en: Creating our first IRC bot using IRC and Node.js
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用IRC和Node.js创建我们的第一个IRC机器人
- en: 'Let''s start by creating a folder on our local drive, in order to store our
    bot program, from the Command Prompt:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在本地驱动器上创建一个文件夹开始，以便存储我们的机器人程序，从命令提示符中执行：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Assuming we have Node.js and npm installed, let''s create and initialize our
    `package.json`, which will store our bot''s dependencies and definitions:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经安装了Node.js和npm，让我们创建并初始化我们的`package.json`，它将存储我们的机器人依赖项和定义：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once you have gone through the `npm init` options (which are very easy to follow),
    you''ll see something similar to this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你通过了`npm init`选项（这些选项非常容易遵循），你会看到类似以下的内容：
- en: '![Creating our first IRC bot using IRC and Node.js](img/image00382.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![使用IRC和Node.js创建我们的第一个IRC机器人](img/image00382.jpeg)'
- en: 'In your project folder, you''ll see the result, which is your `package.json`
    file:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的项目文件夹中，你会看到结果，即你的`package.json`文件：
- en: '![Creating our first IRC bot using IRC and Node.js](img/image00383.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![使用IRC和Node.js创建我们的第一个IRC机器人](img/image00383.jpeg)'
- en: Let's install the `irc` package from npm. This can be located at [https://www.npmjs.com/package/irc](https://www.npmjs.com/package/irc)
    .
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从npm安装`irc`包开始。这个包可以在[https://www.npmjs.com/package/irc](https://www.npmjs.com/package/irc)找到。
- en: In order to install it, run this npm command.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装它，运行以下npm命令。
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should then see something similar to this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似以下的内容：
- en: '![Creating our first IRC bot using IRC and Node.js](img/image00384.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![使用IRC和Node.js创建我们的第一个IRC机器人](img/image00384.jpeg)'
- en: 'Having done this, the next thing to do is to update your `package.json` in
    order to include the `"engines"` attribute. Open the `package.json` file with
    a text editor and update it as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，接下来要做的事情是更新你的`package.json`以包括`"engines"`属性。使用文本编辑器打开`package.json`文件，并按以下方式更新它：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Your `package.json` should then look like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你的`package.json`应该看起来像这样：
- en: '![Creating our first IRC bot using IRC and Node.js](img/image00385.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![使用IRC和Node.js创建我们的第一个IRC机器人](img/image00385.jpeg)'
- en: Let's create our `app.js` file, which will be the entry point to our bot, as
    mentioned while setting up our node package.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的`app.js`文件，这是我们机器人的入口点，正如在设置我们的node包时提到的。
- en: 'Our `app.js` should look like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`app.js`应该看起来像这样：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now let''s run our Node.js program and see how our console looks. If everything
    works well, our console should show our bot as being connected to the required
    network and also joined to a channel. The console can be seen to be the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行我们的Node.js程序并看看我们的控制台看起来如何。如果一切顺利，我们的控制台应该显示我们的机器人已连接到所需的网络，并且已加入一个频道。控制台看起来应该是这样的：
- en: '![Creating our first IRC bot using IRC and Node.js](img/image00386.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![使用IRC和Node.js创建我们的第一个IRC机器人](img/image00386.jpeg)'
- en: 'Now, if you look at our channel **#BugsChannel** in our web client, you should
    see our bot has joined it and also sent a welcome message as well. Refer to the
    following screen:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你在Web客户端中查看我们的频道**#BugsChannel**，你应该能看到我们的机器人已经加入并也发送了欢迎信息。请参考以下屏幕截图：
- en: '![Creating our first IRC bot using IRC and Node.js](img/image00387.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![使用IRC和Node.js创建我们的第一个IRC机器人](img/image00387.jpeg)'
- en: If you look at the the preceding screen, our bot program has executed successfully.
    Our bot `BugTrackerIRCBot` has joined the channel **#BugsChannel**, and also the
    bot has sent an introduction message to all who are on the channel. If you look
    at the right side of the screen under usernames, we see `BugTrackerIRCBot` below
    `@Madan`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看前面的屏幕，我们的机器人程序已成功执行。我们的机器人`BugTrackerIRCBot`已加入频道**#BugsChannel**，并且机器人还向频道中的所有人发送了介绍信息。如果你查看屏幕右侧的用户名下，我们会看到`BugTrackerIRCBot`位于`@Madan`下方。
- en: Code understanding of our basic bot
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对我们基本机器人的代码理解
- en: After seeing how our bot looks in IRC client, let's look at the basic code implementation
    from `app.js`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在看到我们的机器人在IRC客户端中的样子后，让我们看看`app.js`中的基本代码实现。
- en: 'We used `irc` library with the following line:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了以下行中的`irc`库：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Using `irc` library, we instantiated the client to connect to one of the IRC
    networks using the following code snippet:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`irc`库，我们实例化了客户端，使用以下代码片段连接到IRC网络之一：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we connected to network `irc.freenode.net` and provided a nickname of
    `BugTrackerIRCBot`. This name has been given because I would like my bot to track
    and report any bugs found in the future. Now, we ask the client to connect and
    join a specific channel using the following code snippet:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们连接到了网络`irc.freenode.net`，并提供了昵称`BugTrackerIRCBot`。这个名字的由来是因为我希望我的机器人能够追踪和报告未来发现的任何错误。现在，我们要求客户端连接并使用以下代码片段加入一个特定的频道：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the preceding code snippet, once the client is connected, we get a reply
    from the server. This reply is shown on a console. Once successfully connected,
    we ask the bot to join a channel using the following code line:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，一旦客户端连接，我们会从服务器收到回复。这个回复会在控制台上显示。一旦成功连接，我们要求机器人使用以下代码行加入一个频道：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Remember, `#BugsChannel` is what we have joined to from the web client at the
    start. Now, using `client.join()`, I am asking my bot to join the same channel.
    Once the bot has joined, the bot gives a welcome message in the same channel using
    the function `client.say()`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`#BugsChannel`是我们从Web客户端开始加入的。现在，使用`client.join()`，我要求我的机器人加入相同的频道。一旦机器人加入，机器人将使用`client.say()`函数在同一个频道发送欢迎信息。
- en: Hopefully, this has given you some basic understanding of our bot and it's code
    implementations.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这已经给了你对我们机器人和其代码实现的一些基本理解。
- en: In the next section, we will enhance our bot so that our teams can have an effective
    communication experience while chatting.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将增强我们的机器人，以便我们的团队在聊天时能够有一个有效的沟通体验。
- en: Enhancing our BugTrackerIRCBot
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增强我们的BugTrackerIRCBot
- en: Having built a very basic IRC bot, let's enhance our BugTrackerIRCBot.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建了一个非常基础的IRC机器人之后，让我们增强我们的BugTrackerIRCBot。
- en: As developers, we would always like to know how our programs or a system is
    functioning. To do this, typically, our testing teams carry out testing of a system
    or a program, and log the bugs or defects in a bug-tracking software package or
    system. We developers can later take a look at those bugs and address them as
    part of our development life cycle. During this journey, developers will collaborate
    and communicate over messaging platforms such as IRC. We would like to provide
    a unique experience during their development by leveraging IRC bots.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，我们总是想了解我们的程序或系统是如何运行的。为了做到这一点，通常，我们的测试团队会对系统或程序进行测试，并在bug跟踪软件包或系统中记录错误或缺陷。我们开发者可以在开发周期中稍后查看这些错误，并作为我们开发周期的一部分来解决它们。在这个过程中，开发者将通过像IRC这样的消息平台进行协作和沟通。我们希望通过利用IRC机器人为他们提供独特的开发体验。
- en: So, this is exactly what we are doing. We are creating a channel for communication;
    all the team members will be joined to it and our bot will also be there. In this
    channel, bugs will be reported and communicated based on developers' requests.
    Also, if developers need some additional information about a bug, the chat bot
    can help them by providing a URL from the bug-tracking system.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这正是我们正在做的事情。我们正在创建一个用于通信的频道；所有团队成员都将加入该频道，我们的机器人也将在那里。在这个频道中，根据开发者的请求，将报告和沟通错误。此外，如果开发者需要有关错误的额外信息，聊天机器人可以通过提供bug跟踪系统的URL来帮助他们。
- en: Awesome!!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！！
- en: 'But, before going into detail, let me summarize how we are going to do this
    using the following steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在深入探讨之前，让我总结一下我们将如何使用以下步骤来完成这项工作：
- en: Enhance our basic bot program for a more conversational experience
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强我们的基本机器人程序，以获得更自然的对话体验
- en: Create a bug-tracking system or bug storage where bugs will be stored and tracked
    for developers
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个错误跟踪系统或错误存储，其中将存储和跟踪开发者的错误
- en: Here we mention a bug storage system. In this chapter, I would like to explain
    **DocumentDB**, which is a NoSQL JSON-based cloud storage system. In earlier chapters
    we looked at MongoDB. Now we will look at DocumentDB for our bug system.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们提到了一个错误存储系统。在本章中，我想解释**DocumentDB**，这是一个基于NoSQL JSON的云存储系统。在前面的章节中，我们看到了MongoDB。现在我们将查看DocumentDB来构建我们的错误系统。
- en: What is DocumentDB?
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是DocumentDB？
- en: In an earlier chapter, I have already explained NoSQLs. DocumentDB is one such
    NoSQL, in which data is stored in JSON documents, and is offered on the Microsoft
    Azure platform.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我已经解释了NoSQLs。DocumentDB就是这样一种NoSQL，其中数据存储在JSON文档中，并且提供在Microsoft Azure平台上。
- en: Details of DocumentDB can be referred to at [https://azure.microsoft.com/en-in/services/documentdb/](https://azure.microsoft.com/en-in/services/documentdb/)
    .
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: DocumentDB的详细信息可以在[https://azure.microsoft.com/en-in/services/documentdb/](https://azure.microsoft.com/en-in/services/documentdb/)查看。
- en: Setting up a DocumentDB for our BugTrackerIRCBot
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为我们的BugTrackerIRCBot设置DocumentDB
- en: Assuming you already have a Microsoft Azure subscription, follow these steps
    to configure DocumentDB for your bot.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经拥有一个Microsoft Azure订阅，请按照以下步骤配置DocumentDB以供您的机器人使用。
- en: Create account ID for DocumentDB
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为DocumentDB创建账户ID
- en: Let's create a new account called `botdb` using the following screenshot from
    the Azure portal. Select NoSQL API as **DocumentDB**. Select an appropriate subscription
    and resources. I am using the existing resources for this account. You can also
    create a new dedicated resource for this account. Once you enter all the required
    information, hit the **Create** button at the bottom to create the new account
    for DocumentDB.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下从Azure门户的截图创建一个名为`botdb`的新账户。选择NoSQL API作为**DocumentDB**。选择合适的订阅和资源。我正在使用此账户的现有资源。您也可以为该账户创建一个新的专用资源。一旦输入所有必要的信息，点击底部的**创建**按钮以创建新的DocumentDB账户。
- en: '![Create account ID for DocumentDB](img/image00388.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![为DocumentDB创建账户ID](img/image00388.jpeg)'
- en: 'The newly created account, `botdb`, can be seen as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建的账户`botdb`如下所示：
- en: '![Create account ID for DocumentDB](img/image00389.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![为DocumentDB创建账户ID](img/image00389.jpeg)'
- en: Create a collection and database
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建集合和数据库
- en: Select a `botdb` account from the account lists shown previously. This will
    show various menu options such as **Properties**, **Settings**, **Collections**,
    etc.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前显示的账户列表中选择一个`botdb`账户。这将显示各种菜单选项，如**属性**、**设置**、**集合**等。
- en: 'Under this account, we need to create a collection to store the bug data. To
    create a new collection, click on the **Add Collection** option, as shown in the
    following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在此账户下，我们需要创建一个集合来存储bug数据。要创建一个新的集合，请点击以下截图所示的**添加集合**选项：
- en: '![Create a collection and database](img/image00390.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![创建集合和数据库](img/image00390.jpeg)'
- en: 'On clicking on the **Add Collection** option, the following screen will be
    shown on the right side of the screen. Please enter the details as shown in the
    following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**添加集合**选项后，屏幕右侧将显示以下屏幕。请按照以下截图输入详细信息：
- en: '![Create a collection and database](img/image00391.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![创建集合和数据库](img/image00391.jpeg)'
- en: 'In the preceding screen, we are creating a new database along with our new
    collection, **Bugs**. This new database will be named `BugDB`. Once this database
    has been created, we can add other bug-related collections in future to the same
    database. This can be done using the option **Use** existing from the preceding
    screen. Once you have entered all the relevant data, click **OK** to create the
    database as well as the collection. Refer to the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕中，我们正在创建一个新的数据库以及我们的新集合**Bugs**。这个新数据库将被命名为`BugDB`。一旦这个数据库被创建，我们可以在未来将其他与bug相关的集合添加到同一个数据库中。这可以通过使用前面的屏幕中的**使用**现有选项来完成。一旦输入所有相关数据，点击**确定**以创建数据库以及集合。请参考以下截图：
- en: '![Create a collection and database](img/image00392.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![创建集合和数据库](img/image00392.jpeg)'
- en: From the preceding screen, the **COLLECTION ID** and **DATABASE** shown will
    be used while enhancing our bot.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕，将使用显示的**集合ID**和**数据库**来增强我们的机器人。
- en: Create data for our BugTrackerIRCBot
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为我们的BugTrackerIRCBot创建数据
- en: 'Now we have the `BugsDB` with the bugs collection, which will hold all the
    data for bugs. Let''s add some data into our collection. To add a data item, let''s
    use the menu option **Document Explorer** shown in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了包含bug集合的`BugsDB`，它将保存所有bug数据。让我们向我们的集合添加一些数据。要添加数据项，让我们使用以下截图所示的菜单选项**文档资源管理器**：
- en: '![Create data for our BugTrackerIRCBot](img/image00393.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![为我们的BugTrackerIRCBot创建数据](img/image00393.jpeg)'
- en: 'This will open up a screen showing the list of **Databases** and **Collections**
    created so far. Select our database of `BugDB` and the collection of `Bugs` from
    the available list. Refer to the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个显示迄今为止创建的**数据库**和**集合**列表的屏幕。从可用列表中选择我们的`BugDB`数据库和`Bugs`集合。请参考以下截图：
- en: '![Create data for our BugTrackerIRCBot](img/image00394.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![为我们的BugTrackerIRCBot创建数据](img/image00394.jpeg)'
- en: 'To create a JSON document for our bugs collection, click on the **Create**
    option. This will open up a **New Document** screen to enter the JSON-based data.
    Please enter a data item as per the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要为我们的bug集合创建一个JSON文档，请点击**创建**选项。这将打开一个**新建文档**屏幕，用于输入基于JSON的数据。请按照以下截图输入数据项：
- en: '![Create data for our BugTrackerIRCBot](img/image00395.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![为我们的BugTrackerIRCBot创建数据](img/image00395.jpeg)'
- en: 'We will be storing `id`, `status`, `title`, `description`, `priority`,`assignedto`,
    and `url` attributes for our single bug document, which will be stored in the
    bugs collection. To save the JSON document in our collection, click the **Save**
    button. Refer to the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为单个错误文档存储`id`、`status`、`title`、`description`、`priority`、`assignedto`和`url`属性，这些文档将存储在错误集合中。要保存集合中的JSON文档，请点击**保存**按钮。参考以下截图：
- en: '![Create data for our BugTrackerIRCBot](img/image00396.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![为我们的BugTrackerIRCBot创建数据](img/image00396.jpeg)'
- en: 'This way we can create sample records in the bugs collection, which will later
    be wired up in a Node.js program. A sample list of bugs can be seen in the following
    screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就可以在错误集合中创建示例记录，这些记录将在Node.js程序中连接。以下截图显示了示例错误列表：
- en: '![Create data for our BugTrackerIRCBot](img/image00397.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![为我们的BugTrackerIRCBot创建数据](img/image00397.jpeg)'
- en: To summarize the section so far, we have determined how to use DocumentDB from
    Microsoft Azure. Using DocumentDB, we created a new collection along with new
    database to store bug data. We also added some sample JSON documents in the bugs
    collection.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 总结到目前为止的章节，我们已经确定了如何使用微软Azure的DocumentDB。使用DocumentDB，我们创建了一个新的集合以及新的数据库来存储错误数据。我们还在错误集合中添加了一些示例JSON文档。
- en: Now let's look at how we can wire up our DocumentDB with Node.js.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们如何将我们的DocumentDB与Node.js连接起来。
- en: Wiring up DocumentDB and Node.js
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接DocumentDB和Node.js
- en: Let's go back to our `ircbot` directory and install the `documentdb` package
    from npm. This is simply Node.js SDK for Microsoft Azure DocumentDB. This is located
    at URL [https://www.npmjs.com/package/documentdb](https://www.npmjs.com/package/documentdb)
    .
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的`ircbot`目录，并从npm安装`documentdb`包。这仅仅是微软Azure DocumentDB的Node.js SDK。它位于URL
    [https://www.npmjs.com/package/documentdb](https://www.npmjs.com/package/documentdb)
    。
- en: 'In order to install it, run this npm command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装它，运行以下npm命令：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should then see something similar to this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到类似以下的内容：
- en: '![Wiring up DocumentDB and Node.js](img/image00398.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![连接DocumentDB和Node.js](img/image00398.jpeg)'
- en: Let's modify our `app.js` file so that we can access DocumentDB-based data using
    DocumentDB APIs.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改我们的`app.js`文件，以便我们可以使用DocumentDB API访问基于DocumentDB的数据。
- en: 'To wire up DocumentDB with Node.js, we will use the following code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要将DocumentDB与Node.js连接起来，我们将使用以下代码：
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the the preceding code, we are trying to read documents from our DocumentDB.
    Now, to instantiate `DocumentClient`, we need the `host` and `masterkey` of our
    DocumentDB account. Refer to the following screenshot to locate `host`, which
    is only a **URl** and `masterkey` is only a **PRIMARY KEY**.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在尝试从我们的DocumentDB中读取文档。现在，为了实例化`DocumentClient`，我们需要我们的DocumentDB账户的`host`和`masterkey`。参考以下截图以定位`host`，它只是一个**URL**，而`masterkey`是一个**主键**。
- en: '![Wiring up DocumentDB and Node.js](img/image00399.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![连接DocumentDB和Node.js](img/image00399.jpeg)'
- en: 'To read all the documents from our collection, we use the following code lines:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要读取我们集合中的所有文档，我们使用以下代码行：
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`readDocuments()` needs an argument of collection link. This collection link
    is simply the path to our collection. This is given as the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`readDocuments()`需要一个集合链接的参数。这个集合链接简单来说就是我们的集合路径。它如下所示：'
- en: '`dbs/<Your Database>/colls/<Your Collection ID>`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`dbs/<您的数据库>/colls/<您的集合ID>`'
- en: 'Our `app.js` now should look like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`app.js`现在应该看起来像这样：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s go back to our `ircbot` directory with a Command Prompt and run our
    node program. Once you run this, the program will connect to our collection using
    Microsoft Azure DocumentDB Node.js SDK. After reading the documents, on the Command
    Prompt we will see the number of documents read. For details, please refer the
    following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用命令提示符回到我们的`ircbot`目录，并运行我们的Node.js程序。一旦运行，程序将使用微软Azure DocumentDB Node.js
    SDK连接到我们的集合。在读取文档后，在命令提示符中我们将看到读取的文档数量。有关详细信息，请参考以下截图：
- en: '![Wiring up DocumentDB and Node.js](img/image00400.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![连接DocumentDB和Node.js](img/image00400.jpeg)'
- en: Since our IRC client is connecting asynchronously, we will see a reply from
    IRC Server once received. In this case, we got the response from DocumentDB early,
    so we see `6 Documents found` on the console.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的IRC客户端是异步连接的，所以一旦收到回复，我们将看到来自IRC服务器的回复。在这种情况下，我们提前收到了DocumentDB的响应，因此在控制台上看到“找到6个文档”。
- en: So far, we are able to connect to DocumentDB and able to retrieve documents
    from the same. Now, in the next and final section, we will wire up all of this
    together and we will also enhance the conversational experience of our bot.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经能够连接到DocumentDB并从同一数据库中检索文档。现在，在下一节和最后一节中，我们将将这些连接起来，并增强我们机器人的对话体验。
- en: Wiring up all of this together
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将所有这些连接起来
- en: 'To wire up all the things together, let''s modify our earlier `app.js` to be
    the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将这些事物连接起来，让我们修改我们早期的`app.js`，如下所示：
- en: '[PRE13]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Code understanding
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码理解
- en: I have already explained how we can connect to DocumentDB using **URI** and
    **PRIMARY KEY**. Now let's focus on how we have implemented the conversational
    experience and how we are getting bug information based on that within our BugTrackerIRCBot.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经解释了如何使用**URI**和**PRIMARY KEY**连接到DocumentDB。现在让我们关注我们是如何实现对话体验的，以及我们如何在BugTrackerIRCBot中根据这些信息获取错误信息。
- en: '[PRE14]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the the preceding code, our IRC client has been added with a listener that
    listens to all the messages within the channel. So, as our bot joins channel,
    the bot mentions which commands can be used. These commands are `BUGREPORT` and
    `BUG # <BUG NO.>`.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的代码中，我们的IRC客户端已经添加了一个监听器，该监听器监听频道内的所有消息。因此，当我们的机器人加入频道时，它会提及可以使用哪些命令。这些命令是`BUGREPORT`和`BUG
    # <错误编号>`。'
- en: 'Knowing this, when our incoming message contains words like `BUGREPORT` and
    `BUG #` then our bot BugTrackerIRCBot gathers information based on those commands.
    If the message does not match, then the bot replies with a proper message and
    also provides usable commands.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '了解这一点后，当我们的传入消息包含像`BUGREPORT`和`BUG #`这样的单词时，我们的机器人BugTrackerIRCBot将根据这些命令收集信息。如果消息不匹配，则机器人将回复适当的消息，并提供可用的命令。'
- en: 'Let''s assume one of the developers is looking for the total number of defects
    and so the developer enters the command `BUGREPORT`, then our bot will query the
    DocumentDB database and will get the report for open and closed bugs from our
    bugs collection. This code is as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一位开发者正在寻找缺陷的总数，因此开发者输入了`BUGREPORT`命令，然后我们的机器人将查询DocumentDB数据库，并从我们的错误集合中获取开放和关闭错误的报告。此代码如下：
- en: '[PRE15]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the the preceding code, once the developer's intention of getting a report
    is clear, our bot replies with confirmation using the `client.say()` function.
    The bot interactively asks the developer to wait for a moment and in the mean
    time queries DocumentDB using the function `docclient.queryDocuments()`. Once
    the data is received, again the bot uses the `client.say()` function and returns
    the information in a chat window. In the preceding code, the bot first returns
    `Total Open Bugs` and then `Total Closed Bugs`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，一旦开发者的报告意图明确，我们的机器人将使用`client.say()`函数进行确认回复。机器人交互式地要求开发者稍等片刻，同时使用`docclient.queryDocuments()`函数查询DocumentDB。一旦收到数据，机器人再次使用`client.say()`函数，并在聊天窗口中返回信息。在前面的代码中，机器人首先返回`Total
    Open Bugs`（总开放错误），然后是`Total Closed Bugs`（总关闭错误）。
- en: Now you may ask why two different calls are made for `Open` and `Closed` bugs;
    the reason is that, currently, there is no native support for AGGREGATE functions
    in DocumentDB. We need to know only the `Open` and `Closed` numbers of bugs, so
    we use the `docclient.queryDocuments()` function twice to get the data.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会问，为什么对`Open`和`Closed`错误使用不同的调用；原因是，目前，DocumentDB中没有对AGGREGATE函数的原生支持。我们只需要知道错误的`Open`和`Closed`数量，所以我们使用`docclient.queryDocuments()`函数两次来获取数据。
- en: 'BugTrackerIRCBot can also give us information about individual bugs using the
    command `BUG #`. The implementation for the same can be seen in the following
    code snippet:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 'BugTrackerIRCBot也可以使用`BUG #`命令提供有关单个错误的详细信息。相同的实现可以在以下代码片段中看到：'
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the the preceding code, when the developer gives the `BUG #` command while
    chatting, our code will extract only the bug number after the symbol `#`.Then
    our bot will reply with which bug details will be retrieved from the database.
    If the records are not found, our bot will reply with an appropriate message as
    well.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的代码中，当开发者聊天时给出`BUG #`命令，我们的代码将提取符号`#`之后的错误编号。然后我们的机器人将回复从数据库中检索哪些错误详情。如果没有找到记录，我们的机器人也将回复适当的消息。'
- en: 'The variable `querySpec` will formulate a query with the parameter of the bug
    number entered by the developer in a chat window and then will be processed using
    the function `docclient.queryDocuments()`. Once the function retrieves the data
    for a specified bug number, our bot will formulate the following response:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`querySpec`将根据开发者在一个聊天窗口中输入的bug编号来构建一个查询，然后使用`docclient.queryDocuments()`函数进行处理。一旦函数检索到指定bug编号的数据，我们的机器人将构建以下响应：
- en: '[PRE17]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To the end user or a developer, we show the URL of a bug from the bug-tracking
    system, as well as status of the bug and a title.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最终用户或开发者，我们显示了bug跟踪系统的bug URL，以及bug的状态和标题。
- en: Lots of code to understand so far!!
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，有很多代码需要理解！！
- en: Let's run our bot now, and see how it interacts and provides us with a great
    conversational experience.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在运行我们的机器人，看看它是如何互动并提供给我们一个极好的对话体验的。
- en: Running our enhanced BugTrackerIRCBot
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行我们的增强版BugTrackerIRCBot
- en: 'Let''s go back to our `ircbot` directory, on a Command Prompt, and run our
    modified `app.js`. Once the code has run successfully, you should see the following
    at the Command Prompt:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的`ircbot`目录，在命令提示符下运行我们的修改后的`app.js`。一旦代码成功运行，你应该在命令提示符下看到以下内容：
- en: '![Running our enhanced BugTrackerIRCBot](img/image00401.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的增强版BugTrackerIRCBot](img/image00401.jpeg)'
- en: 'This is assuming that you have already connected to the IRC client, as stated
    earlier. Now let''s look at our channel #BugsChannel from an IRC client. We should
    see our bot as the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在假设你已经按照前面所述连接到了IRC客户端的情况下。现在让我们从IRC客户端的角度来看我们的频道#BugsChannel。我们应该看到我们的机器人如下所示：
- en: '![Running our enhanced BugTrackerIRCBot](img/image00402.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的增强版BugTrackerIRCBot](img/image00402.jpeg)'
- en: In the the preceding screenshot, you can see the bot has joined the channel
    and has also introduced itself to us with usable commands.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，你可以看到机器人已经加入了频道，并且还向我们介绍了可用的命令。
- en: 'Let''s enter the command `BUGREPORT` and see what the bot replies to us. Here,
    the bot is getting the bug report, as explained earlier in the code description.
    The reply seen is as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们输入命令`BUGREPORT`并查看机器人对我们回复了什么。在这里，机器人正在获取bug报告，正如前面在代码描述中解释的那样。看到的回复如下：
- en: '![Running our enhanced BugTrackerIRCBot](img/image00403.jpeg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的增强版BugTrackerIRCBot](img/image00403.jpeg)'
- en: 'Now let''s ensure our other command also works. So, now we are interested in
    information about an individual bug, enter the command `BUG # 125` and see what
    our bot replies:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我们确保我们的其他命令也能正常工作。所以，现在我们感兴趣的是关于单个bug的信息，输入命令`BUG # 125`并查看我们的机器人如何回复：'
- en: '![Running our enhanced BugTrackerIRCBot](img/image00404.jpeg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的增强版BugTrackerIRCBot](img/image00404.jpeg)'
- en: The bot replied with the URL of the bug-tracking system for a bug, and also
    **Status** and **Title** information.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人回复了bug跟踪系统的URL，以及**状态**和**标题**信息。
- en: Let's cross check in DocumentDB whether the bot is providing the correct information
    or not.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在DocumentDB中交叉检查机器人是否提供了正确的信息。
- en: 'In DocumentDB, for `Bug # 125`, the following data can be seen:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '在DocumentDB中，对于`Bug # 125`，可以看到以下数据：'
- en: '![Running our enhanced BugTrackerIRCBot](img/image00405.jpeg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的增强版BugTrackerIRCBot](img/image00405.jpeg)'
- en: 'If you enter a bug number that does not exist in DocumentDB, then the bot replies
    accordingly; refer to the following screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你输入的bug编号在DocumentDB中不存在，那么机器人会相应地回复；参考以下截图：
- en: '![Running our enhanced BugTrackerIRCBot](img/image00406.jpeg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的增强版BugTrackerIRCBot](img/image00406.jpeg)'
- en: 'Here I entered `BUG # 12345` and the bot searched and could not find the bug,
    so it responded `No bugs found`.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '我输入了`BUG # 12345`，机器人搜索后没有找到该bug，因此它回复了`No bugs found`。'
- en: So, we are able to extend our bot to meet our requirements. BugTrackerIRCBot
    can be further extended to assign bugs or even to create a new bug using appropriate
    commands such as `ASSIGNBUG`, `NEWBUG`, etc. I will leave it up to the users to
    extend our BugTrackerIRCBot that way.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们能够扩展我们的机器人以满足我们的需求。BugTrackerIRCBot可以通过使用适当的命令如`ASSIGNBUG`、`NEWBUG`等进一步扩展，以分配bug或创建新的bug。我将把这种方式扩展我们的BugTrackerIRCBot的决定权留给用户。
- en: Hopefully, you now have enough insight on how we can leverage IRC bots during
    development, and how we can provide an effective and efficient conversational
    experience to developers who are collaborating and communicating through IRC clients.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你现在已经足够了解我们如何在开发过程中利用IRC机器人，以及我们如何为通过IRC客户端协作和沟通的开发者提供有效和高效的对话体验。
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Every development team needs bug-tracking and reporting tools. There are typically
    needs for bug reporting and bug assignment. In the case of critical projects,
    these needs become very critical for project timelines. This chapter has showed
    us how we can provide a seamless experience to developers while they are communicating
    with peers within a channel.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 每个开发团队都需要错误跟踪和报告工具。通常需要错误报告和错误分配。在关键项目中，这些需求对于项目时间表变得非常关键。这一章节向我们展示了我们如何为开发者在频道内与同行交流时提供无缝体验。
- en: Firstly, we created a very simple IRC bot in Node.js and verified how it can
    communicate within a channel using the IRC web-based client. Then, we extended
    our basic bot such that, based on a user's request, the bot will give us information
    quickly and easily while chatting itself. We also leveraged Azure-based cloud
    storage to store the bug database. This time we used DocumentDB - a NoSQL JSON
    database from the Microsoft Azure platform. We wired up DocumentDB libraries and
    IRC libraries in Node.js for our bot to function and had a great conversational
    experience.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用 Node.js 创建了一个非常简单的 IRC 机器人，并验证了它如何使用基于 Web 的 IRC 客户端在频道内进行通信。然后，我们扩展了我们的基本机器人，使其能够根据用户的请求，在聊天的同时快速、轻松地提供信息。我们还利用基于
    Azure 的云存储来存储错误数据库。这次我们使用了 DocumentDB - 来自微软 Azure 平台的 NoSQL JSON 数据库。我们在 Node.js
    中连接了 DocumentDB 库和 IRC 库，以便我们的机器人能够运行，并获得了极佳的对话体验。
- en: In today's world of collaboration, development teams that use such integrations
    and automations will be efficient and effective while delivering their quality
    products.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今的协作世界中，使用此类集成和自动化的开发团队将高效且有效地交付高质量的产品。
- en: In the next chapter, you will learn how to integrate Salesforce APIs and Kik's
    chat platform for the Salesforce CRM bot.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何集成 Salesforce API 和 Kik 的聊天平台，以用于 Salesforce CRM 机器人。
