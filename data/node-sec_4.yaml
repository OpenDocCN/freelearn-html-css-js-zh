- en: Chapter 4. Request Layer Considerations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。请求层考虑
- en: Some vulnerabilities appear at the request phase of your application. As mentioned
    before, Node.js does little for you by default, leaving you with complete freedom
    to craft a server that meets your needs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一些漏洞出现在应用程序的请求阶段。如前所述，Node.js默认情况下为您做的很少，让您完全自由地构建满足您需求的服务器。
- en: Limiting the request size
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制请求大小
- en: One major request-handling feature that is commonly left out of Node.js applications
    is size limits. **Express** (optionally) handles buffering of request body data
    and parsing that request body into some meaningful data structure. While the request
    is still being fulfilled, the entire content of that body is in memory. If you
    place no limits, malicious users have a number of ways to affect your system,
    such as exhausting memory limits, and uploading files that take up unnecessary
    disk space.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 常常在Node.js应用程序中被忽略的一个主要请求处理功能是大小限制。**Express**（可选）处理请求体数据的缓冲和将请求体解析为有意义的数据结构。当请求仍在被满足时，整个请求体的内容都在内存中。如果不设置限制，恶意用户有多种方法来影响您的系统，例如耗尽内存限制，上传占用不必要磁盘空间的文件。
- en: 'Depending on your needs, you will need to determine a reasonable limit for
    your application. While your needs may differ, you should always set some sort
    of limit, Connect and Express exposes a middleware just for this purpose, called
    limit:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的需求，您需要确定应用程序的合理限制。虽然您的需求可能不同，但您应该始终设置某种限制，Connect和Express为此目的专门提供了一个中间件，称为limit：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This middleware needs to be added early in the stack, otherwise it won't be
    caught until it's too late. It takes a single piece of configuration, which is
    the upper limit on the request size. If you send a number, it will be translated
    as a number of bytes. You can also send a more readable string, such as `"5mb"`
    or `"1gb"`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此中间件需要尽早添加到堆栈中，否则直到太迟才会被捕获。它需要一个单独的配置，即请求大小的上限。如果发送一个数字，它将被转换为字节数。您还可以发送一个更可读的字符串，例如`"5mb"`或`"1gb"`。
- en: This middleware responds with a **413 (Request Entity Too Large)** error to
    be thrown, if the limit is exceeded. First, the `Content-Length` header of the
    request is checked, and if it is too large it denies the request outright. Of
    course, the header could be faked or even absent, so the middleware also monitors
    the incoming data and triggers an error if the actual request body size reaches
    the limit.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果超出限制，此中间件将响应**413（请求实体太大）**错误。首先，检查请求的`Content-Length`标头，如果太大，则直接拒绝请求。当然，标头可能是伪造的，甚至不存在，因此中间件还监视传入数据，如果实际请求体大小达到限制，则触发错误。
- en: The `bodyParser` middleware is used to parse incoming request bodies for particular
    content types. In fact, the `bodyParser` middleware specifically is just short
    hand for three different middlewares namely, `json`, `urlencoded`, and `multipart`.
    Each of these corresponds to a different content-type. Setting an absolute size
    via the limit middleware is helpful, but not always enough. Some request bodies
    should be limited differently than others.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`bodyParser`中间件用于解析特定内容类型的传入请求体。实际上，`bodyParser`中间件具体来说只是三个不同中间件的简写，即`json`，`urlencoded`和`multipart`。每个中间件对应不同的内容类型。通过限制中间件设置绝对大小是有帮助的，但并不总是足够的。一些请求体应该有不同的限制。'
- en: For example, you may wish to allow file uploads that are up to 100 MB. However,
    that same amount of JSON will bring your application to a halt, while the `JSON.parse()`
    function runs, since it is a blocking operation. As a result, it is highly recommended
    to set a much smaller limit on request bodies other than multipart (since it deals
    with file uploads).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可能希望允许最多100MB的文件上传。但是，同样大小的JSON将在`JSON.parse()`函数运行时使您的应用程序停止，因为它是一个阻塞操作。因此，强烈建议除了多部分（因为它处理文件上传）之外，为请求体设置一个更小的限制。
- en: Therefore, I would recommend avoiding the `bodyParser` middleware, in order
    to be more explicit, and allow you to set different limits for each of the sub-middlewares.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我建议避免使用`bodyParser`中间件，以便更明确，并允许您为每个子中间件设置不同的限制。
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: While setting different limits for different content types like we are talking
    about here, the results could be unexpected if you are not careful about the order
    you choose for your middleware.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 像我们在这里讨论的为不同内容类型设置不同限制一样，如果您对中间件的选择顺序不小心，结果可能会出乎意料。
- en: If the limit middleware is used first, it will cause the other middlewares to
    ignore their own size limits. Make sure that you place the global limit middleware
    last, so it acts as a catch-all for any other content type, and not dealt with
    by the `bodyParser` middleware family.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果首先使用限制中间件，它将导致其他中间件忽略它们自己的大小限制。确保将全局限制中间件放在最后，这样它就可以作为任何其他内容类型的通用处理，而不是由`bodyParser`中间件系列处理。
- en: Using streams instead of buffering
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用流而不是缓冲
- en: Node.js includes a module called **streams**, which contains the implementation
    used widely throughout Node.js platform's own core modules. A stream is a lot
    like a Unix pipe, they can be read from, written to, or even both depending on
    the context. I won't go into great detail here, but streams are one of Node.js
    killer features, and you should be using them as much as possible in your applications
    and any npm modules you publish.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js包含一个名为**streams**的模块，其中包含广泛用于Node.js平台自身核心模块的实现。流很像Unix管道，它们可以被读取，写入，或者根据上下文甚至两者都可以。我不会在这里详细介绍，但流是Node.js的一个杀手功能，您应该尽可能在应用程序和任何npm模块中使用它们。
- en: 'If you are implementing more of a RESTful API, that accepts a file upload as
    a `PUT` request, for example, use streams in your request handler. The following
    code shows an inefficient way to handle putting a request body into a file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在实现更多的RESTful API，例如接受文件上传作为`PUT`请求，那么在请求处理程序中使用流。以下代码显示了处理将请求体放入文件的低效方法：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, we are buffering the entire request body into memory, before writing it
    to disk. At small sizes, this is not a problem, but an attacker could simultaneously
    send many large request bodies, and you're putting yourself in unnecessary risk
    by buffering. In Node.js, with streams at your disposal, this is the long way
    to do it (thank goodness the shorter way is also the best way!).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将整个请求体缓冲到内存中，然后将其写入磁盘。在小尺寸时，这不是问题，但攻击者可能同时发送许多大型请求体，通过缓冲将自己置于不必要的风险中。在
    Node.js 中，使用流来处理数据是一种长期的方法（谢天谢地，更短的方法也是最好的方法！）。
- en: 'The following code is an example of the same request, only using a stream to
    pipe the data to the destination:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是相同请求的示例，只是使用流将数据传送到目的地。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Our example here sets up a writeable stream that represents the destination
    of the uploaded data. Rather than buffering the entire request body into memory,
    the data will simply be piped into that file, as it becomes available. It should
    be noted that this example does not properly filter the user input; this was entirely
    to stay focused on the topic of the example and should not be applied directly
    to production code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例设置了一个可写流，表示上传数据的目的地。数据将被直接传送到文件中，而不是在内存中缓冲整个请求体。需要注意的是，这个示例没有正确过滤用户输入；这完全是为了专注于示例的主题，不应直接应用于生产代码。
- en: Streams are a proven and effective pattern for dealing with data in numerous
    contexts, and leverage the event-driven model of Node.js to its full potential.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 流是在许多情境下处理数据的一种经过验证和有效的模式，并充分利用了 Node.js 的事件驱动模型。
- en: When dealing with many simultaneous users, especially with unforeseen bursts
    of traffic, it's important to be ready for disaster scenarios, where the load
    becomes too much for your server to handle. This is also applicable in mitigating
    **Denial of Service** (**DoS**) attacks that attempt to flood your server with
    more requests than it could ever possibly handle, bringing it down completely
    (or just slowing it down to a crawl) for every other user.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理许多同时用户，特别是在出现意想不到的交通高峰时，准备好应对灾难情景是很重要的，其中负载变得过重，超出服务器的处理能力。这也适用于缓解拒绝服务（DoS）攻击，这些攻击试图用比服务器可能处理的更多请求来淹没服务器，使其完全崩溃（或者只是减慢到爬行速度）。
- en: Monitoring the event loop's responsiveness
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监视事件循环的响应性
- en: Building a server that doesn't just melt under heavy load can be done. One useful
    pattern is to monitor the event loop's responsiveness, and deny some requests
    right away, if the server is just under too much load to respond quickly. One
    module out there, called node-toobusy ([https://github.com/lloyd/node-toobusy](https://github.com/lloyd/node-toobusy))
    does just that.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个在重载下不会崩溃的服务器是可行的。一个有用的模式是监视事件循环的响应性，并立即拒绝一些请求，如果服务器负载过重，无法快速响应。有一个模块叫做 node-toobusy（https://github.com/lloyd/node-toobusy）就是这样做的。
- en: 'Once initialized, toobusy polls the event loop, and watches for lag or requests
    to the event loop that takes longer than expected. In your application, you set
    up a middleware layer that simply queries the monitor to determine whether or
    not to add to the server''s current processing queue. If the server is too busy,
    it will respond with a **503**, (**Server Currently Unavailable**) rather than
    taking on more load that it is able to satisfy. Instead of crashing your server,
    this pattern allows you to continue serving as many requests as possible, as shown
    in the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦初始化，toobusy 将轮询事件循环，并监视延迟或事件循环中超过预期时间的请求。在应用程序中，您设置一个中间件层，简单地查询监视器，以确定是否将请求添加到服务器的当前处理队列。如果服务器太忙，它将以
    503（服务器当前不可用）的方式进行响应，而不是承担超出其满足能力的负载。这种模式允许您继续尽可能多地提供服务请求，而不是使服务器崩溃，如下面的代码所示。
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding sample was found on node toobusy's github page. It sets up a simple
    server with a middleware employing the toobusy module. It also sets up a single
    route that blocks the event loop by running for five straight seconds. If a number
    of simultaneous requests that block the event loop for long enough come in, the
    server will start responding with a **503 (Server Currently Unavailable)** error,
    rather than taking on more than it should. Lastly, this also includes a graceful
    shutdown for the process.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例是在 node toobusy 的 github 页面上找到的。它设置了一个使用 toobusy 模块的简单服务器中间件。它还设置了一个阻塞事件循环的单个路由，运行了五秒钟。如果出现一些同时请求足够长时间阻塞事件循环的情况，服务器将开始以
    503（服务器当前不可用）错误进行响应，而不是承担超出其承受范围的负载。最后，这还包括了进程的优雅关闭。
- en: This example also demonstrates a very important point about the event loop in
    Node.js that is worth repeating. The contract made between your code and the event
    loop scheduler is that all code should execute quickly, to keep from blocking
    the event loop for other code. This means to avoid CPU-intensive calculations
    in your application code, unlike the preceding example, which blocks the CPU during
    its while-loop iteration.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例还演示了关于 Node.js 中事件循环的一个非常重要的观点，值得重复。您的代码与事件循环调度器之间的约定是，所有代码应该快速执行，以避免阻塞事件循环的其他代码。这意味着要避免在应用程序代码中进行
    CPU 密集型计算，不像前面的示例，在其 while 循环迭代期间阻塞 CPU。
- en: Node.js works best when your application is primarily I/O-bound, so CPU-intensive
    operations, such as complex calculations or very large data-set iterations should
    be avoided. If your system requires such operations, consider spawning the blocking
    portions off as separate processes to keep from hogging your application's event
    loop.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 在应用程序主要是 I/O 绑定时效果最佳，因此应避免 CPU 密集型操作，比如复杂的计算或非常大的数据集迭代。如果系统需要这样的操作，考虑将阻塞部分作为单独的进程进行分离，以避免占用应用程序的事件循环。
- en: There are a couple methods to accomplish this, such as using the HTML5 Web Worker
    API for node ([https://github.com/pgriess/node-webworker](https://github.com/pgriess/node-webworker)).
    In addition, a more bare-metal approach is to utilize Node's `child_process` module
    in conjunction with **Inter-Process Communication** (**IPC**).The IPC specifics
    on this are potentially heavily dependent on your platform and architecture, which
    is beyond the scope of this discussion.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以实现这一点，比如使用HTML5 Web Worker API for node ([https://github.com/pgriess/node-webworker](https://github.com/pgriess/node-webworker))。此外，一个更基本的方法是利用Node的`child_process`模块与**进程间通信**（**IPC**）结合使用。关于IPC的具体内容可能严重依赖于您的平台和架构，这超出了本讨论的范围。
- en: Cross-site Request Forgery
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨站点请求伪造
- en: '**Cross-site Request Forgery** (**CSRF**) is an attack vector that exploits
    the trust, an application has for a specific user''s browser. A request is made
    on the user''s behalf without their consent, allowing the application to perform
    some action under the assumption that the trusted user initiated the request,
    even though they have not.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站点请求伪造**（**CSRF**）是一种攻击向量，它利用了应用程序对特定用户浏览器的信任。在用户不知情的情况下，应用程序代表用户发出请求，从而使应用程序在假定受信任的用户发出请求的情况下执行某些操作，尽管实际上并非如此。'
- en: There are a number of ways this can be accomplished. One example is that an
    HTML image tag (for example, an `<img>`) somehow injected into the page, legitimately
    or not, such as via XSS, a vulnerability we will discuss in the next chapter.
    The browser implicitly sends a request to the URL specified in the `src` attribute,
    and sends any cookies it has as a part of the HTTP request. Many applications
    that track a user's identity do so via cookies that contains some sort of session
    identifier, which to the server makes it appear as though the user is making the
    request.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以实现这一点。一个例子是，一个HTML图像标签（例如，`<img>`）以某种方式被注入到页面中，无论是合法的还是非法的，比如通过XSS，这是我们将在下一章中讨论的一个漏洞。浏览器隐式地向`src`属性中指定的URL发送请求，并在HTTP请求的一部分中发送任何cookie。许多跟踪用户身份的应用程序通过包含某种会话标识符的cookie来实现，这样对服务器来说，就好像用户发出了请求。
- en: Prevention is pretty straightforward; the most common approach is requiring
    a generated, user-specific token to be included with each request that modifies
    state. In fact, Connect already includes the `csrf` middleware for just this purpose.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 预防措施非常简单；最常见的方法是要求在修改状态的每个请求中包含一个生成的用户特定令牌。事实上，Connect已经包含了`csrf`中间件，就是为了这个目的。
- en: It works by adding a generated token to the current user's session, which can
    be included in an HTML form, as a hidden input field or as a query-string value
    in any links with side-effects. When a later request is being handled, the middleware
    checks to ensure the value in the user's session, matches what was submitted with
    the request, which fails with a **403 (Forbidden)**, in the event of a mismatch.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过向当前用户的会话添加一个生成的令牌来工作，该令牌可以作为一个隐藏的输入字段或任何具有副作用的链接中的查询字符串值包含在HTML表单中。当处理后续请求时，中间件会检查用户会话中的值是否与请求提交的值匹配，如果不匹配，则会失败并返回**403（禁止）**。
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This example application has some defined middleware, namely the `bodyParser`,
    `cookieParser`, and `session`. These are all required by `csrf`, which is why
    they go first in the order. In addition, there are a few routes which are as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例应用程序有一些定义好的中间件，即`bodyParser`，`cookieParser`和`session`。这些都是`csrf`所需的，这就是为什么它们在顺序中排在第一位。此外，还有一些路由，如下所示：
- en: The homepage, which just provides links to both sample forms
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主页，只提供两个示例表单的链接
- en: The form action/target, which simply redirects the user home on a successful
    submission
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单操作/目标，只需在成功提交时将用户重定向到主页
- en: The valid form, which includes the token as a hidden input and successfully
    submits it
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效的表单，包括令牌作为隐藏输入，并成功提交
- en: The invalid form, which does not include the token and consequently fails, when
    submitted (with a (**403 Forbidden)** HTTP response)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无效的表单，不包括令牌，因此在提交时失败（带有(**403 Forbidden)** HTTP响应）
- en: This method prevents an attacker from successfully making false requests, as
    the required token will be different for each form submission.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可以防止攻击者成功发出虚假请求，因为所需的令牌对于每个表单提交都是不同的。
- en: Input validation
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入验证
- en: While protecting against many attack vectors, such as XSS, which we will deal
    with in the next chapter, it is important to filter and sanitize your inputs as
    you receive them from the user. This occurs during the request phase of a web
    application, so we will address it here. The general rule of thumb is to always
    validate inputs and escape outputs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在保护许多攻击向量，比如我们将在下一章中处理的XSS时，重要的是在接收用户输入时对其进行过滤和清理。这发生在Web应用程序的请求阶段，所以我们将在这里进行讨论。一个基本的经验法则是始终验证输入并转义输出。
- en: A popular library for validating user input is node-validator ([https://github.com/chriso/node-validator](https://github.com/chriso/node-validator)).
    This library is by no means the only option, but it is the one we will be using
    in our examples.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 用于验证用户输入的流行库是node-validator ([https://github.com/chriso/node-validator](https://github.com/chriso/node-validator))。这个库绝不是唯一的选择，但它是我们在示例中将要使用的选择。
- en: There are several goals of input validation, first of which is to verify that
    incoming user input matches the criteria of our application and its workflow;
    for example, you may want to ensure that a user submits a valid e-mail address.
    I am not referring to sending an e-mail for confirmation to test that the e-mail
    address is real, instead I am just talking about ensuring that they do not enter
    an erroneous value in the first place. Another example is to ensure that the number
    matches a particular range, such as being greater than zero.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 输入验证有几个目标，首先是验证传入的用户输入是否符合我们应用程序及其工作流程的标准；例如，您可能希望确保用户提交有效的电子邮件地址。我指的不是发送电子邮件进行确认以测试电子邮件地址是否真实，而是确保他们一开始就不输入错误的值。另一个例子是确保数字匹配特定范围，比如大于零。
- en: Secondly, input filtering is meant to prevent bad data from making it into your
    system that could compromise another subsystem; for example, if you accept an
    input for a certain numeric input, which you then pass along to another subsystem
    for some additional processing, such as a report or some other remote API. If
    your users, intentionally or not, submit some other unexpected value, like a symbol
    or an alphabetic character, it could cause problems in future operations. In large
    part, computers are garbage-in, garbage-out, so we need to make sure we are careful
    with any user input.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，输入过滤旨在防止不良数据进入系统，可能会损害另一个子系统；例如，如果您接受某个数字输入，然后将其传递给另一个子系统进行一些额外的处理，比如报告或其他远程API。如果您的用户故意或无意地提交其他意外的值，比如符号或字母字符，可能会在未来的操作中造成问题。在很大程度上，计算机是垃圾进，垃圾出，因此我们需要确保我们对任何用户输入都要小心谨慎。
- en: Thirdly, as already mentioned briefly before, input filtering is a helpful (albeit
    incomplete) preventative measure against attacks like **Cross-Site Scripting**
    (**XSS**). XSS attacks in HTML, CSS, and JavaScript, there are big problems with
    access control, meaning that any script has the same access as every other one.
    This means that if an attacker can find a way to inject further code into your
    page, they will have a great degree of control, which is potentially harmful to
    your users. Input filtering can help by removing malicious code that may be cleverly
    embedded in other user input.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，正如之前简要提到的，输入过滤是一种有用的（尽管不完整的）预防措施，可以防止**跨站脚本攻击**（**XSS**）等攻击。在HTML、CSS和JavaScript中的XSS攻击存在访问控制的严重问题，这意味着任何脚本都具有与其他脚本相同的访问权限。这意味着如果攻击者能够找到一种方式将进一步的代码注入到您的页面中，他们将拥有很大程度的控制权，这对您的用户可能是有害的。输入过滤可以通过删除可能巧妙嵌入其他用户输入的恶意代码来帮助。
- en: 'In addition to the base node-validator library, there is also a middleware
    plugin (express-validator: [https://github.com/ctavan/express-validator](https://github.com/ctavan/express-validator)),
    made especially for Express.js, which we will be using for our examples.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基本的node-validator库之外，还有一个中间件插件（express-validator：[https://github.com/ctavan/express-validator](https://github.com/ctavan/express-validator)），专门为Express.js制作，我们将在示例中使用它。
- en: 'Our first example will be a form that accepts a large variety of inputs, just
    to help demonstrate as much as possible. Consider the following HTML form:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个示例将是一个接受各种输入的表单，只是为了尽可能地进行演示。考虑以下HTML表单：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This sample code sets up an HTML form with five fields: `name`, `e-mail`, `website`,
    `age`, and `gender`. A user can enter values in the provided inputs and `POST`
    to the same URL. While processing the `POST` request, we will validate the data
    and give some sort of response. The next code sample will be our application code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例代码设置了一个带有五个字段的HTML表单：`name`，`e-mail`，`website`，`age`和`gender`。用户可以在提供的输入框中输入值，并`POST`到相同的URL。在处理`POST`请求时，我们将验证数据并给出某种响应。下一个代码示例将是我们的应用程序代码：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This example sets up a basic web server with only two routes, a `GET /` which
    just sends the HTML form, we showed earlier as the response. The second route
    is a `POST /` which takes the data submitted from the aforementioned form, and
    first validates it with the following rules:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例设置了一个基本的Web服务器，只有两个路由，一个是`GET /`，它只是发送之前显示的HTML表单作为响应。第二个路由是`POST /`，它接受从上述表单提交的数据，并首先根据以下规则进行验证：
- en: '| Field | Rules |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 字段 | 规则 |'
- en: '| --- | --- |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `name` | This field cannot be empty.It must match a regular expression (this
    one means it must be only alphabetic, numeric, whitespace, and a few select symbols).
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 该字段不能为空。它必须匹配一个正则表达式（这意味着它只能是字母、数字、空格和一些特定符号）。 |'
- en: '| `e-mail` | This must be a valid e-mail address. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `e-mail` | 这必须是一个有效的电子邮件地址。 |'
- en: '| `website` | This must be a valid URL. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `website` | 这必须是一个有效的URL。 |'
- en: '| `age` | This must be a number.It must be greater than or equal to 0.It must
    be less than or equal to 100. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `age` | 这必须是一个数字。它必须大于或等于0。它必须小于或等于100。 |'
- en: '| `gender` | This must be either "M" or "F". |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `gender` | 这必须是"M"或"F"。 |'
- en: 'In addition to validating the input, it also performs some filtering and transforming
    before the output, according to the following rules:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 除了验证输入，它还根据以下规则执行一些过滤和转换以进行输出：
- en: '| Field | Rule |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 字段 | 规则 |'
- en: '| --- | --- |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `name` | Trim leading and trailing whitespace. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 去除前导和尾随空格。 |'
- en: '| `e-mail` | Trim leading and trailing whitespace. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `e-mail` | 去除前导和尾随空格。 |'
- en: '| `age` | Convert to an integer. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `age` | 转换为整数。 |'
- en: Depending on how the validation goes, it will either respond with a **403 (Forbidden)**,
    with the list of validation errors, or it will respond with a **200 (OK)** with
    the filtered input.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 根据验证的结果，它要么以**403（禁止）**的状态响应，并附带验证错误列表，要么以**200（OK）**的状态响应，并附带过滤后的输入。
- en: This should demonstrate that it is pretty straightforward to add input validation
    and filtering to your applications, and the rewards are well worthwhile. You can
    ensure that the data matches expected formats for your various workflows, and
    help preemptively protect against some attack vectors.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该表明，向应用程序添加输入验证和过滤非常简单，并且收益是非常值得的。您可以确保数据与各种工作流程的预期格式匹配，并有助于预防性地防范一些攻击向量。
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we specifically examined request vulnerabilities, and provided
    some ways to avoid and deal with those vulnerabilities. In the next chapter, we
    will look at the response phase of applications, and the vulnerabilities that
    appear there.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们特别研究了请求漏洞，并提供了一些避免和处理这些漏洞的方法。在下一章中，我们将研究应用程序的响应阶段以及出现的漏洞。
