- en: Chapter 1. Creating Maps with Leaflet
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 使用 Leaflet 创建地图
- en: Web-based mapping has evolved rapidly over the last two decades, from MapQuest
    and Google to real-time location information on our phones' mapping apps. There
    have been open source projects to develop web-based maps in the past, such as
    MapServer, GeoServer, and OpenLayers. However, **Environmental Systems Research
    Institute** (**ESRI**) includes the Flex and Silverlight APIs; these create web-based
    maps from their ArcServer services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的二十年里，基于网络的地图技术迅速发展，从 MapQuest 和 Google 地图到我们手机地图应用中的实时位置信息。过去有一些开源项目用于开发基于网络的地图，例如
    MapServer、GeoServer 和 OpenLayers。然而，**环境系统研究院** (**ESRI**) 包含 Flex 和 Silverlight
    API；这些 API 可以从他们的 ArcServer 服务中创建基于网络的地图。
- en: Over the last few years, JavaScript has taken the online mapping world by storm.
    In 2013, there was a JS.geo conference. The library at the center of attention
    was Leaflet. This is a JavaScript library used to create interactive, web-based
    maps. With it, you can create a simple map in as little as three lines of JavaScript,
    or you can create complex, interactive, editable maps with hundreds of lines of
    code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，JavaScript 在在线地图领域引起了轰动。2013 年，有一个 JS.geo 会议。受到关注的库是 Leaflet。这是一个用于创建交互式、基于网络的地图的
    JavaScript 库。使用它，您可以用尽可能少的 JavaScript 代码行创建一个简单的地图，或者用数百行代码创建复杂、交互式、可编辑的地图。
- en: Note
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find more information on Leaflet at [http://leafletjs.com](http://leafletjs.com).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [http://leafletjs.com](http://leafletjs.com) 上找到有关 Leaflet 的更多信息。
- en: This book assumes that you have a basic understanding of HTML and CSS, primarily
    of how to link external `.js` and `.css` files and how to name and size a `<div>`
    element. It also assumes that you have a working knowledge of JavaScript.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假设您对 HTML 和 CSS 有基本的了解，主要是如何链接外部的 `.js` 和 `.css` 文件以及如何命名和设置 `<div>` 元素的大小。它还假设您对
    JavaScript 有一定的了解。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Tile layers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瓦片图层
- en: Vector layers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量图层
- en: Pop ups
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹出窗口
- en: Custom functions / Responding to events
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义函数/响应用户事件
- en: Mobile mapping
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动地图
- en: Creating a simple basemap
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建简单的基本地图
- en: 'To create a map with Leaflet, you need to do the following four things:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Leaflet 创建地图，您需要做以下四件事：
- en: Reference the JavaScript and **Cascading Style Sheet** (**CSS**) files
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用 JavaScript 和 **层叠样式表** (**CSS**) 文件
- en: Create a `<div>` element to hold the map
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 `<div>` 元素来包含地图
- en: Create a `map` object
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 `map` 对象
- en: Add a tile layer (base layer)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加瓦片图层（基本图层）
- en: 'Before we get into the details of building the map, let''s set up an HTML file
    that we can use throughout the book. Open a text editor and enter the following
    HTML:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入构建地图的细节之前，让我们设置一个 HTML 文件，我们可以在整本书中使用它。打开一个文本编辑器并输入以下 HTML：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save the file as `LeafletEssentials.html`. We will add to this file throughout
    the rest of the book.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为 `LeafletEssentials.html`。我们将在本书的其余部分添加到这个文件中。
- en: Tip
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户中下载您购买的所有 Packt
    书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册以将文件直接通过电子邮件发送给您。
- en: Referencing the JavaScript and CSS files
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用 JavaScript 和 CSS 文件
- en: 'There are two ways to load Leaflet into your code: you can either reference
    a hosted file or download a copy to your local machine and reference that copy.
    The next two sections will cover how you can set up your environment for a hosted
    copy or for a local copy.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以将 Leaflet 加载到您的代码中：您可以选择引用一个托管文件，或者将副本下载到您的本地计算机上并引用该副本。接下来的两个部分将介绍如何为托管副本或本地副本设置您的环境。
- en: Using a hosted copy
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用托管版本
- en: We will not be making any changes to the original CSS or JS files, so we will
    link to the hosted version.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会对原始 CSS 或 JS 文件进行任何修改，因此我们将链接到托管版本。
- en: 'In a text editor, open `LeafletEssentials.html`. In the `<head>` element, and
    after the `</title>` element, add the following code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开 `LeafletEssentials.html`。在 `<head>` 元素中，并在 `</title>` 元素之后，添加以下代码：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After the `<body>` tag, add the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<body>` 标签之后，添加以下代码：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The links are standard HTML for `<link>` and `<script>`. Open either link in
    your browser and you will see the contents of the files.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 链接是标准的 HTML `<link>` 和 `<script>`。在您的浏览器中打开任一链接，您将看到文件的内容。
- en: Using a local copy
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用本地副本
- en: 'Using a local copy is the same as a hosted copy, except the path to the files
    is different. Download `Leaflet.js` from [http://leafletjs.com/download.html](http://leafletjs.com/download.html)
    and extract it to your desktop. If you downloaded `Leaflet-0.7.3.zip`, you should
    have a folder with the same name. In the folder, you will find a subfolder named
    `images` and the following three files:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本地副本与托管副本相同，除了文件路径不同。从 [http://leafletjs.com/download.html](http://leafletjs.com/download.html)
    下载 `Leaflet.js` 并将其解压到您的桌面。如果您下载了 `Leaflet-0.7.3.zip`，您应该有一个同名文件夹。在该文件夹中，您将找到一个名为
    `images` 的子文件夹和以下三个文件：
- en: '`Leaflet.css`: This is the cascading style sheet'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Leaflet.css`: 这是一个层叠样式表'
- en: '`Leaflet`: This is a compressed version of Leaflet'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Leaflet`: 这是 Leaflet 的压缩版本'
- en: '`Leaflet-src.js`: This is the full version of Leaflet for developers'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Leaflet-src.js`: 这是 Leaflet 的完整版本，面向开发者'
- en: 'Add the following code in the `<head>` tag of `LeafletEssentials.html`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `LeafletEssentials.html` 的 `<head>` 标签中添加以下代码：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following code in the `<body>` tag of `LeafletEssentials.html`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `LeafletEssentials.html` 的 `<body>` 标签中添加以下代码：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You now have local references to the Leaflet library and CSS. We are using the
    `Leaflet` file because it is smaller and will load faster. As long as you do not
    need to add any code to the file, you can delete the `Leaflet-src.js` file.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在有了对 Leaflet 库和 CSS 的本地引用。我们使用 `Leaflet` 文件，因为它更小，加载速度更快。只要您不需要向文件中添加任何代码，您就可以删除
    `Leaflet-src.js` 文件。
- en: Creating a <div> tag to hold the map
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个用于包含地图的 `<div>` 标签
- en: 'You need a place to put the map. You can accomplished this by creating a `<div>`
    tag with an ID that will be referenced by a `map` object. The `<div>` tag that
    is holding the map needs a defined height. The easiest way to give the tag a height
    is to use CSS in the `<div>` tag that you created. Add the following code to the
    `<body>` tag of `LeafletEssentials.html` after the `<script>` reference to the
    `Leaflet` file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个放置地图的地方。您可以通过创建一个具有将被地图对象引用的 ID 的 `<div>` 标签来完成此操作。包含地图的 `<div>` 标签需要一个定义的高度。为标签设置高度的最简单方法是使用您创建的
    `<div>` 标签中的 CSS。在 `Leaflet` 文件引用之后，将以下代码添加到 `LeafletEssentials.html` 的 `<body>`
    标签中：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Style the `<div>` tag in the HTML file and *not* the `Leaflet.css` file. If
    you do this, the map `<div>` size will be global for every page that uses it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTML 文件中样式化 `<div>` 标签，而不是 `Leaflet.css` 文件。如果您这样做，地图 `<div>` 的大小将适用于使用它的每个页面。
- en: Creating a map object
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个地图对象
- en: 'Now that you have the references and a place to put the map, it is time to
    start coding the map using JavaScript. The first step is to create a `map` object.
    The `map` class takes a `<div>` tag (which you created in the previous step) and
    `options`: `L.map(div id, options)`. To create a map object named `map`, add the
    following code after the `<script>` element in `LeafletEssentials.html`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有了引用和放置地图的地方，是时候开始使用 JavaScript 编写地图了。第一步是创建一个 `map` 对象。`map` 类接受一个 `<div>`
    标签（您在上一步骤中创建的）和 `options`：`L.map(div id, options)`。要创建一个名为 `map` 的地图对象，请在 `LeafletEssentials.html`
    中的 `<script>` 元素之后添加以下代码：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Alternatively, you can shorten the code using the `setView()` method, which
    takes the `center` and `zoom` options as parameters:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用 `setView()` 方法缩短代码，该方法接受 `center` 和 `zoom` 选项作为参数：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the preceding code, you created a new instance of the `map` class and named
    it `map`. You may be used to creating new instances of a class using the keyword
    `new`; this is shown in the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，您创建了一个 `map` 类的新实例，并将其命名为 `map`。您可能习惯于使用 `new` 关键字创建类的实例；这在下述代码中显示：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Leaflet implements factories that remove the need for the `new` keyword. In
    this example, `L.map()` has been given the `<div>` map and two options: `center`
    and `zoom`. These two options position the map on the screen with the latitude
    and longitude in the center of the `<div>` element and zoomed in or out at the
    desired level. The `center` option takes the `[latitude, longitude]` parameters,
    and `zoom` takes an integer; the larger the number, the tighter the zoom.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Leaflet 实现了工厂，消除了使用 `new` 关键字的需要。在这个例子中，`L.map()` 被赋予了 `<div>` 地图和两个选项：`center`
    和 `zoom`。这两个选项使用纬度和经度将地图定位在屏幕上，以 `<div>` 元素为中心，并按所需级别放大或缩小。`center` 选项接受 `[纬度，经度]`
    参数，而 `zoom` 接受一个整数；数字越大，缩放越紧。
- en: Tip
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is good practice to always assign the `center` and `zoom` options. There
    is nothing worse than seeing a map of the world when all of the data is located
    Albuquerque, NM.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 始终分配 `center` 和 `zoom` 选项是一个好习惯。没有什么比看到所有数据都位于阿尔伯克基，新墨西哥州的世界地图更糟糕的了。
- en: Adding a tile layer
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加瓦片层
- en: The last step to create your first map in Leaflet is to add a tile layer. A
    tile layer can be thought of as your basemap. It is the imagery that you will
    add points, lines, and polygons on top of later in the book. Tile layers are a
    service provided by a tile server. A tile server usually breaks up the layer into
    256 x 256 pixel images. You retrieve the images needed based on your location
    and zoom through a URL that requests `/z/x/y.png`. Only these tiles are loaded.
    As you pan and zoom, new tiles are added to your map.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Leaflet中创建您的第一张地图的最后一步是添加瓦片层。瓦片层可以被视为您的底图。这是您将在本书后面添加点、线和多边形的图像。瓦片层是由瓦片服务器提供的一项服务。瓦片服务器通常将层分割成256
    x 256像素的图像。您通过请求`/z/x/y.png`的URL来检索所需的图像。只有这些瓦片被加载。当您平移和缩放时，新的瓦片会被添加到您的地图上。
- en: The tile layer, at a minimum, requires the URL to a tile server. In this book,
    we will use OpenStreetMap for our tile layer.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 瓦片层至少需要瓦片服务器的URL。在这本书中，我们将使用OpenStreetMap作为我们的瓦片层。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: You need to abide by the terms of service to use OpenStreetMap tiles. The TOS
    is available at [http://wiki.openstreetmap.org/wiki/Tile_usage_policy](http://wiki.openstreetmap.org/wiki/Tile_usage_policy).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OpenStreetMap瓦片时，您需要遵守服务条款。TOS可在[http://wiki.openstreetmap.org/wiki/Tile_usage_policy](http://wiki.openstreetmap.org/wiki/Tile_usage_policy)找到。
- en: 'The URL to the OpenStreetMap tile server is shown in the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStreetMap瓦片服务器的URL如下所示：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the code, we provide the URL template to OpenStreetMaps. We also call the
    `addTo()` method so that the layer is drawn. We need to pass `L.map()` as a parameter
    to the `addTo()` function. We named our `L.map()` instance map in the previous
    section (`var map = L.map()`).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，我们提供了OpenStreetMaps的URL模板。我们还调用了`addTo()`方法，以便绘制图层。我们需要将`L.map()`作为参数传递给`addTo()`函数。我们在上一节中命名了我们的`L.map()`实例为map（`var
    map = L.map()`）。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: 'Leaflet allows method chaining: the calling of multiple methods on an object
    at the same time. This is what we did when we put `.addTo(map)` at the end of
    the line, creating the instance of `L.tileLayer()`. The longer way of adding the
    layer to the map without chaining is to assign the instance to a variable and
    then call `addTo()` from the variable, as shown in the following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Leaflet允许方法链：同时在一个对象上调用多个方法。这就是我们在行尾放置`.addTo(map)`时所做的事情，创建了`L.tileLayer()`的实例。不使用链式调用将层添加到地图的更长时间方法是先将实例分配给一个变量，然后从该变量调用`addTo()`，如下所示：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You now have a complete map that allows you to pan and zoom around the world.
    Your `LeafletEssentials.html` file should look like the following code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在有一个完整的地图，允许您在世界各地平移和缩放。您的`LeafletEssentials.html`文件应如下所示：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Even with liberal spacing, you were able to build a fully functional map of
    the world with pan and zoom capabilities in six lines of JavaScript. The following
    screenshot shows the finished map:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有宽松的间距，您也能用六行JavaScript构建一个具有平移和缩放功能的完整世界地图。以下截图显示了完成的地图：
- en: '![Adding a tile layer](img/4812OS_01_01.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![添加瓦片层](img/4812OS_01_01.jpg)'
- en: Tile layer providers
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 瓦片层提供商
- en: 'Now that you have created your first map, you are probably wondering how to
    change the tile layer to something else. There are several tile layer providers,
    some of which require registration. This section will present you with two more
    options: Thunderforest and Stamen. Thunderforest provides tiles that extend OpenStreetMap,
    while Stamen provides more artistic map tiles. Both of these services can be used
    to add a different style of basemap to your Leaflet map.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经创建了您的第一张地图，您可能想知道如何更改瓦片层以使用其他内容。有几个瓦片层提供商，其中一些需要注册。本节将向您介绍另外两个选项：Thunderforest和Stamen。Thunderforest提供扩展OpenStreetMap的瓦片，而Stamen提供更多艺术风格的地图瓦片。这两个服务都可以用来为您的Leaflet地图添加不同的底图风格。
- en: 'Thunderforest provides five tile services:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Thunderforest提供五种瓦片服务：
- en: OpenCycleMap
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenCycleMap
- en: Transport
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交通
- en: Landscape
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风景
- en: Outdoors
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 户外
- en: Atlas (still in development)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大地（仍在开发中）
- en: 'To use Thunderforest, you need to point your tile layer to the URL of the tile
    server. The following code shows how you can add a Thunderforest tile layer:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Thunderforest，您需要将瓦片层指向瓦片服务器的URL。以下代码显示了如何添加Thunderforest瓦片层：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding code loads the landscape tile layer. To use another layer, just
    replace `landscape` in the URL with `cycle`, `transport`, or `outdoors`. The following
    screenshot shows the Thunderforest landscape layer loaded in Leaflet:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码加载了风景瓦片层。要使用其他层，只需将URL中的`landscape`替换为`cycle`、`transport`或`outdoors`。以下截图显示了在Leaflet中加载的Thunderforest风景层：
- en: '![Tile layer providers](img/4812OS_01_02.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![瓦片层提供商](img/4812OS_01_02.jpg)'
- en: 'Stamen provides six tile layers; however, we will only discuss the following
    three layers:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Stamen提供六个瓦片层；然而，我们只会讨论以下三个层：
- en: Terrain (available in the United States only)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地形（仅在美国可用）
- en: Watercolor
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 水彩
- en: Toner
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 素描
- en: The other three are Burning Map, Mars and Trees, and Cabs & Crime. The Burning
    Map and Mars layers require WebGL, and Trees and Cabs & Crime are only available
    in San Francisco. While these maps have a definite wow factor, they are not practical
    for our purposes here.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 其他三个是燃烧地图、火星和树木，以及出租车与犯罪。燃烧地图和火星层需要WebGL，而树木和出租车与犯罪仅在旧金山可用。虽然这些地图具有明显的震撼力，但它们对我们这里的用途来说并不实用。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Learn about the Stamen tile layers, including Burning Map, Mars and Trees, and
    Cabs & Crime, at [http://maps.stamen.com](http://maps.stamen.com).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 了解Stamen瓦片层，包括燃烧地图、火星和树木，以及出租车与犯罪，请访问[http://maps.stamen.com](http://maps.stamen.com)。
- en: 'Stamen requires you to follow the same steps as Thunderforest, but it includes
    an additional step of adding a reference to the JavaScript file. After the reference
    to your Leaflet file, add the following reference:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Stamen要求你遵循与Thunderforest相同的步骤，但还包括添加对JavaScript文件的引用。在你的Leaflet文件引用之后，添加以下引用：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Instead of `L.TileLayer()`, Stamen uses `L.StamenTileLayer(tile set name)`.
    Replace the tile set name with `terrain`, `watercolor`, or `toner`. Lastly, add
    `addLayer()` to the map as shown in the following code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Stamen使用`L.StamenTileLayer(tile set name)`而不是`L.TileLayer()`。将瓦片集名称替换为`terrain`、`watercolor`或`toner`。最后，将`addLayer()`添加到地图中，如下面的代码所示：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Stamen's tile layers are not your typical basemap layers; they are works of
    cartographic art.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Stamen的瓦片层并非典型的底图层；它们是地图艺术的杰作。
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Stamen has an online tool to edit map layers and save the output as an image.
    To create your own artistic map images, go to [http://mapstack.stamen.com](http://mapstack.stamen.com).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Stamen提供了一个在线工具来编辑地图层并将输出保存为图像。要创建自己的艺术地图图像，请访问[http://mapstack.stamen.com](http://mapstack.stamen.com)。
- en: 'The following screenshot shows the Stamen watercolor layer loaded in Leaflet.
    As you zoom in, you will see more detail:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在Leaflet中加载的Stamen水彩层。当你放大时，你会看到更多细节：
- en: '![Tile layer providers](img/4812OS_01_03.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![瓦片层提供商](img/4812OS_01_03.jpg)'
- en: Adding a Web Mapping Service tile layer
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Web地图服务瓦片层
- en: Another type of tile layer that can be added to a Leaflet map is a **Web Mapping
    Service** (**WMS**) tile layer. WMS is a way to request and transfer map images
    over the Web through HTTP. It is an **Open Geospatial Consortium** (**OGC**) specification.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 可以添加到Leaflet地图的另一种瓦片层类型是**Web地图服务**（**WMS**）瓦片层。WMS是通过HTTP在网络上请求和传输地图图像的一种方式。它是一个**开放地理空间联盟**（**OGC**）规范。
- en: Tip
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'For detailed technical information on the WMS specification, see the OGC website:
    [http://www.opengeospatial.org/standards/wms](http://www.opengeospatial.org/standards/wms).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 关于WMS规范的详细技术信息，请参阅OGC网站：[http://www.opengeospatial.org/standards/wms](http://www.opengeospatial.org/standards/wms)。
- en: With an understanding of how to add tile layers, and having seen several examples,
    you may have noticed that none of the examples were of satellite imagery. The
    first WMS layer you will add to your map is the **United States Geological Survey**
    (**USGS**) Imagery Topo.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通过了解如何添加瓦片层，并看到几个示例，你可能已经注意到示例中没有卫星图像。你将添加到地图中的第一个WMS层是**美国地质调查局**（**USGS**）影像拓扑。
- en: 'Like the `L.tileLayer()` function that we used previously, the `L.tileLayer.wms()`
    function takes a URL and a set of options as parameters. The following code adds
    the WMS layer to your map:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前使用的`L.tileLayer()`函数类似，`L.tileLayer.wms()`函数接受一个URL和一组选项作为参数。以下代码将WMS层添加到你的地图中：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The URL for the WMS was taken from the USGS website. You can find other WMS
    layers at [http://basemap.nationalmap.gov/arcgis/rest/services](http://basemap.nationalmap.gov/arcgis/rest/services).
    The options specified are the layer name, the format, the transparency, and the
    attribution. The layer name will be provided on the information page of the service
    you are connecting to. The format is an image, and the transparency is set to
    `true`. Since this layer covers the globe, and we are not putting any other layers
    underneath it, the transparency could be set to `false`. In the next example,
    you will see how setting the transparency to `true` allows another layer to become
    visible. Lastly, there is an attribution set to USGS. When you assign an attribution
    to a layer, Leaflet adds the text value in the lower-right corner of the map.
    It is important to use an attribution as it is similar to citing a source in text.
    If it is not your data, it is accepted practice to give credit where credit is
    due. Many times, it is also required by copyright. Since this layer is from the
    USGS, it is accredited in the attribution property of the layer.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: WMS的URL是从USGS网站获取的。你可以在[http://basemap.nationalmap.gov/arcgis/rest/services](http://basemap.nationalmap.gov/arcgis/rest/services)找到其他WMS图层。指定的选项是图层名称、格式、透明度和属性。图层名称将在你连接到的服务的信息页面上提供。格式是图像，透明度设置为`true`。由于这个图层覆盖了全球，我们没有在其下方放置其他图层，因此透明度可以设置为`false`。在下一个示例中，你将看到将透明度设置为`true`如何使另一个图层变得可见。最后，有一个设置为USGS的属性。当你将属性分配给图层时，Leaflet会在地图的右下角添加文本值。使用属性很重要，因为它类似于在文本中引用来源。如果不是你的数据，按照惯例，你应该给予应有的认可。很多时候，这也是版权的要求。由于这个图层来自USGS，它在图层的属性属性中被认可。
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The attribution value can contain hyperlinks, as shown in the following code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 属性值可以包含超链接，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Insert the WMS layer code into `LeafletEssentials.html`, and you should now
    have a map with satellite imagery. The following screenshot shows the satellite
    imagery loaded into Leaflet:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 将WMS图层代码插入`LeafletEssentials.html`，你现在应该有一个带有卫星影像的地图。以下截图显示了加载到Leaflet中的卫星影像：
- en: '![Adding a Web Mapping Service tile layer](img/4812OS_01_04.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![添加Web映射服务瓦片图层](img/4812OS_01_04.jpg)'
- en: Multiple tile layers
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个瓦片图层
- en: In the previous example, you added a WMS layer and set the transparency to `true`.
    The reason you need to do this is because you can add multiple tile layers on
    top of each other, and with the transparency set to `true`, you will be able to
    see them all at the same time. In this example, you need to add the **National
    Weather Service** (**NWS**) radar mosaic WMS on top of the USGS satellite imagery.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，你添加了一个WMS图层并将透明度设置为`true`。你需要这样做的原因是因为你可以在每个图层上添加多个瓦片图层，并且当透明度设置为`true`时，你将能够同时看到它们。在这个示例中，你需要在USGS卫星影像上添加**国家气象服务**（**NWS**）雷达瓦片WMS。
- en: Note
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The **National Oceanic and Atmospheric Administration** (**NOAA**) provides
    a list of several WMS layers; they are available at the following link:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**国家海洋和大气管理局**（**NOAA**）提供了一系列WMS图层的列表；它们可以在以下链接中找到：'
- en: '[http://nowcoast.noaa.gov/help/mapservices.shtml?name=mapservices](http://nowcoast.noaa.gov/help/mapservices.shtml?name=mapservices)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://nowcoast.noaa.gov/help/mapservices.shtml?name=mapservices](http://nowcoast.noaa.gov/help/mapservices.shtml?name=mapservices)'
- en: 'The adding of extra WMS layers follows the same format as the previous example,
    but with a different URL, layer name, and attribution. Add the following code
    after the code for the satellite imagery in `LeafletEssentials.html`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 添加额外的WMS图层遵循与上一个示例相同的格式，但具有不同的URL、图层名称和属性。在`LeafletEssentials.html`中卫星影像代码之后添加以下代码：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This code adds the NOAA WMS layer for the NWS radar mosaic. Note that the URL
    and layer have changed and the attribution is set to `NOAA/NWS`. The `RAS_RIDGE_NEXRAD`
    layer is a grid that displays values when they begin to exist. The name of the
    layer can be found on the NOAA website; you are not expected to remember that
    `RAS_RIDGE_NEXRAD` is the weather radar layer. There are large portions of the
    map with no data, and since we set the transparency to `true`, these blank spaces
    allow the satellite imagery to become visible. Your map should now show the satellite
    imagery with the radar mosaic overlaid, as in the following screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码添加了用于 NWS 雷达镶嵌的 NOAA WMS 层。请注意，URL 和图层已更改，并且归因设置为 `NOAA/NWS`。`RAS_RIDGE_NEXRAD`
    层是一个网格，当值开始存在时显示值。该图层的名称可以在 NOAA 网站上找到；你不需要记住 `RAS_RIDGE_NEXRAD` 是天气雷达层。地图上有大量没有数据的部分，由于我们设置了透明度为
    `true`，这些空白区域允许卫星图像变得可见。现在你的地图应该显示带有雷达镶嵌的卫星图像，如下面的截图所示：
- en: '![Multiple tile layers](img/4812OS_01_05.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![Multiple tile layers](img/4812OS_01_05.jpg)'
- en: 'If you set the transparency to `false`, you allow the layer to draw on the
    entire map. Areas with no data are displayed as white squares and cover the satellite
    imagery underneath, as shown in the following screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将透明度设置为 `false`，你将允许图层在整个地图上绘制。没有数据区域显示为白色方块，并覆盖下方的卫星图像，如下面的截图所示：
- en: '![Multiple tile layers](img/4812OS_01_06.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![Multiple tile layers](img/4812OS_01_06.jpg)'
- en: WMS layers do not need to serve as base layers only; they can be used as additional
    data. This was shown in the previous example where you overlaid the radar on the
    satellite imagery. In this example, you used a satellite image. You can also use
    the OpenStreetMap tile layer from the first map. Again, just set the transparency
    to `true`. WMS layers can be added just like points, lines, and polygons, which
    is discussed in the following sections.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: WMS 图层不仅需要作为基础图层；它们也可以用作附加数据。这在之前的示例中已经展示过，你在卫星图像上叠加了雷达。在这个例子中，你使用了卫星图像。你也可以使用来自第一张地图的
    OpenStreetMap 瓦片层。再次提醒，只需将透明度设置为 `true`。WMS 图层可以像点、线和多边形一样添加，这将在以下章节中讨论。
- en: Adding data to your map
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向你的地图添加数据
- en: So far, you have learned how to add tile layers to a map. In the previous example,
    you added a WMS layer on top of a base tile layer. Now, you will learn how to
    draw your own layers that need to be added on top of a tile layer. The three geometric
    primitives of vector data that you can add to a map are often referred to as points,
    lines, and polygons.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经学会了如何向地图添加瓦片层。在之前的示例中，你在基础瓦片层上添加了一个 WMS 层。现在，你将学习如何绘制需要添加到瓦片层上的自己的图层。你可以添加到地图上的三个矢量数据的基本几何形状通常被称为点、线和多边形。
- en: In this section, you will learn how to add markers, polylines, and polygons
    to your map.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习如何将标记、折线和多边形添加到你的地图上。
- en: Points
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 点
- en: 'So far, your map is not that interesting. You often draw a map to highlight
    a specific place or point. Leaflet has a `Point` class; however, it is not used
    to simply add a point on the map with an icon to specify the place. In Leaflet,
    points are added to the map using the `Marker` class. At minimum, the `Marker`
    class requires a latitude and longitude, as shown in the following code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你的地图并不那么有趣。你经常绘制地图来突出特定的地点或点。Leaflet 有一个 `Point` 类；然而，它并不是用来在地图上简单地添加一个带有图标来指定地点的点。在
    Leaflet 中，点是通过 `Marker` 类添加到地图上的。至少，`Marker` 类需要纬度和经度，如下面的代码所示：
- en: '[PRE18]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can create a marker by simply calling `L.marker([lat,long]).addTo(map);`,
    but assigning the marker to a variable will allow you to interact with it by name.
    How do you delete a specific marker if it does not have a name?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过简单地调用 `L.marker([lat,long]).addTo(map);` 来创建一个标记，但将标记分配给一个变量将允许你通过名称与之交互。如果你没有给标记命名，你该如何删除一个特定的标记？
- en: 'In the preceding code, you created a marker at point `[35.10418, -106.62987]`,
    and then, as with the tile layer, you used the `addTo(map)` function. This created
    a marker icon at the specified latitude and longitude. The following screenshot
    shows the marker on the map:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，你在 `[35.10418, -106.62987]` 点创建了一个标记，然后，就像瓦片层一样，你使用了 `addTo(map)` 函数。这就在指定的纬度和经度上创建了一个标记图标。以下截图显示了地图上的标记：
- en: '![Points](img/4812OS_01_07.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![Points](img/4812OS_01_07.jpg)'
- en: The preceding example is a simplified, and almost useless, marker. The `Marker`
    class has options, events, and methods that you can call to make them more interactive
    and useful. You will learn about methods—specifically the `bindPopup()` method—
    and events later in this chapter.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例是一个简化的、几乎无用的标记。`Marker`类有选项、事件和方法，你可以调用它们来使它们更具交互性和实用性。你将在本章后面学习关于方法——特别是`bindPopup()`方法——和事件的内容。
- en: 'There are 10 options you can specify when creating a marker, as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 创建标记时，你可以指定10个选项，如下所示：
- en: '`icon`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`icon`'
- en: '`clickable`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clickable`'
- en: '`draggable`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`draggable`'
- en: '`keyboard`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keyboard`'
- en: '`title`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`'
- en: '`alt`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alt`'
- en: '`zIndexOffset`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zIndexOffset`'
- en: '`opacity`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opacity`'
- en: '`riseOnHover`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`riseOnHover`'
- en: '`riseOffset`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`riseOffset`'
- en: 'The options `clickable`, `draggable`, `keyboard`, `zIndexOffset`, `opacity`,
    `riseOnHover`, and `riseOffset` are all set to a default value. In [Chapter 4](ch04.html
    "Chapter 4. Creating Custom Markers"), *Creating Custom Markers*, you will learn
    about the `icon` option in detail. Two options that you should set are `title`
    and `alt`. The `title` option is the tooltip text that will be displayed when
    you hover over the point with the cursor, and the `alt` option is the alternative
    text that is read using screen readers for accessibility. These options are used
    in the following code:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 选项`clickable`、`draggable`、`keyboard`、`zIndexOffset`、`opacity`、`riseOnHover`和`riseOffset`都设置为默认值。在[第4章](ch04.html
    "第4章。创建自定义标记")“创建自定义标记”中，你将详细了解`icon`选项。你应该设置的选项是`title`和`alt`。`title`选项是在你用鼠标悬停在点上时显示的工具提示文本，而`alt`选项是屏幕阅读器用于无障碍阅读的替代文本。这些选项在以下代码中使用：
- en: '[PRE19]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The code extends the original marker example by adding a title and alt text
    and making the marker draggable. You will use the `draggable` options with an
    event in the last section of this chapter. The options are set the same as when
    we created our map instance; use curly braces to group the options, and separate
    each option with a comma. This is how options will be set for all objects.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 代码通过添加标题和alt文本以及使标记可拖动来扩展了原始标记示例。你将在本章的最后部分使用`draggable`选项与一个事件。选项设置与创建我们的地图实例时相同；使用花括号来分组选项，并用逗号分隔每个选项。这就是所有对象设置选项的方式。
- en: Polylines
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 折线
- en: 'The first vector layer you will learn to create is aLine. In Leaflet, you will
    use the `Polyline` class. A polyline can represent a single line segment or a
    line with multiple segments. Polylines and polygons extend the `path` class. You
    do not call `path` directly, but you have access to its methods, properties, and
    events. To draw a polyline, you need to provide at least a single longitude and
    latitude pair. The option for a polyline is set as default, so you need not specify
    any values unless you want to override the default. This is shown in the following
    code:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你将首先学习创建的是一条线。在Leaflet中，你将使用`Polyline`类。折线可以表示单个线段或由多个段组成的线。折线和多边形扩展了`path`类。你不需要直接调用`path`，但你有权访问其方法、属性和事件。要绘制折线，你需要提供至少一个经纬度对。折线的选项默认设置，所以除非你想覆盖默认值，否则你不需要指定任何值。以下代码显示了这一点：
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In this example, the polyline is `red` and has a weight of `8`. The `weight`
    option defaults to `5`. If you want a thicker line, increase the number. For a
    thinner line, decrease the number. To add more segments to the line, just add
    additional latitude and longitude values as shown in the following code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，折线是`红色`的，宽度为`8`。`weight`选项默认为`5`。如果你想线条更粗，增加数字。如果你想线条更细，减少数字。要向线条添加更多段，只需像以下代码所示添加额外的纬度和经度值：
- en: '[PRE21]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: You need to first provide a latitude and longitude pair because a line consists
    of at least two points. Afterwards, you can declare additional latitudes and longitudes
    to extend your line.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要首先提供一个纬度和经度对，因为一条线至少由两个点组成。之后，你可以声明额外的纬度和经度来扩展你的线。
- en: 'The following screenshot shows the polyline added to the map:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了添加到地图上的折线：
- en: '![Polylines](img/4812OS_01_08.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![折线](img/4812OS_01_08.jpg)'
- en: Polygons
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多边形
- en: 'A polygon is a polyline that is closed. Polygons tend to be classified by the
    number of sides, as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 多边形是一个闭合的折线。多边形通常根据边的数量进行分类，如下所示：
- en: Triangle (3)
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三角形（3）
- en: Hexagon (6)
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 六边形（6）
- en: Octagon (8)
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 八边形（8）
- en: 'Leaflet has a class for drawing two common polygons: a circle and a rectangle.
    When drawing a polygon, you will specify a minimum of three coordinates. A triangle
    is the simplest polygon that you can draw. That is why you need to provide at
    least three points. You do not need to specify the starting point at the end of
    the list. Leaflet will automatically close the polygon for you. To draw a polygon,
    simply copy the code for the polyline with three points and change the class to
    `L.polygon()`, as shown in the following code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Leaflet 有一个用于绘制两个常见多边形的类：圆和矩形。绘制多边形时，你将指定至少三个坐标。三角形是可以绘制的最简单的多边形。这就是为什么你需要提供至少三个点。你不需要在列表末尾指定起始点。Leaflet
    会自动为你关闭多边形。要绘制多边形，只需复制具有三个点的折线代码，并将类更改为 `L.polygon()`，如下面的代码所示：
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Since Leaflet automatically closes the polygon, our three-point polyline can
    become a polygon. Since `polyline` and `polygon` inherit from `path`, the options
    `color` and `weight` apply to both. You will notice that `color` and `weight`
    refer to the outline of the polygon. Two options that you will find useful when
    drawing polygons are `fillColor` and `fillOpacity`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Leaflet 自动关闭多边形，我们的三点折线可以变成多边形。由于 `polyline` 和 `polygon` 继承自 `path`，选项 `color`
    和 `weight` 适用于两者。你会注意到 `color` 和 `weight` 指的是多边形的轮廓。在绘制多边形时，你会发现 `fillColor` 和
    `fillOpacity` 两个选项很有用：
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding code draws a `red` triangle with a weight of `8`. The additional
    options of `fillColor` and `fillOpacity` are set to `blue` and `1`. The fill color
    of a polygon will be set to the default if no `fillColor` option is selected.
    You only need to use `fillColor` if you want a different fill color than the outline.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码绘制了一个边宽为 `8` 的红色三角形。`fillColor` 和 `fillOpacity` 的附加选项设置为 `blue` 和 `1`。如果没有选择
    `fillColor` 选项，多边形的填充颜色将设置为默认值。只有当你想要与轮廓不同的填充颜色时，才需要使用 `fillColor`。
- en: Note
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Opacity is a value between `0` and `1`, where `0` is 100 percent opacity and
    `1` is no opacity (solid).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 不透明度是一个介于 `0` 和 `1` 之间的值，其中 `0` 是 100% 不透明度，`1` 是没有不透明度（实心）。
- en: 'The following screenshot shows the red triangle with a blue fill added to the
    map:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了添加到地图上的红色三角形，其填充颜色为蓝色：
- en: '![Polygons](img/4812OS_01_09.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![多边形](img/4812OS_01_09.jpg)'
- en: Rectangles and circles
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矩形和圆
- en: Circles and rectangles are common polygons that have built-in classes in Leaflet.
    You can also draw them manually using polygon and by specifying all of the line
    segments, but that would be a difficult route to take.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 圆和矩形是 Leaflet 中具有内置类的常见多边形。你也可以通过指定所有线段来手动绘制它们，但这将是一条困难的路。
- en: Rectangles
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矩形
- en: 'To create a rectangle, you need an instance of the class `L.rectangle()` with
    the latitude and longitude pair for the upper-left corner and lower-right corner
    as a parameter. The class extends `L.polygon()`, so you have access to the same
    options, methods, and events:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个矩形，你需要一个 `L.rectangle()` 类的实例，其中包含上左角和下右角的经纬度对作为参数。该类扩展了 `L.polygon()`，因此你可以访问相同的选项、方法和事件：
- en: '[PRE24]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The preceding code uses the first two points in the polyline and triangle,
    but in reverse order (upper left and lower right). The options are the same as
    the polygon, but with opacity removed. The following screenshot shows the rectangle
    added to the map:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码使用了折线和三角形的第一个两个点，但顺序相反（上左和下右）。选项与多边形相同，但去除了不透明度。以下截图显示了添加到地图上的矩形：
- en: '![Rectangles](img/4812OS_01_10.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![矩形](img/4812OS_01_10.jpg)'
- en: Circles
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 圆
- en: 'To create a circle, you need an instance of `L.circle()` with the center point
    and a radius (in meters) as parameters. You can specify the same options as you
    used in your rectangle because the `circle` class extends the `path` class. This
    is shown in the following code:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个圆，你需要一个 `L.circle()` 实例，其中包含中心点和一个半径（以米为单位）作为参数。你可以指定与你在矩形中使用的相同选项，因为 `circle`
    类扩展了 `path` 类。这在上面的代码中显示：
- en: '[PRE25]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The preceding code specifies the center point, a radius of 5 miles (`8046.72`
    meters), and the same options as the rectangle in the previous example. The following
    screenshot shows the circle added to the map:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码指定了中心点、半径为 5 英里（`8046.72` 米），以及与上一个示例中矩形相同的选项。以下截图显示了添加到地图上的圆：
- en: '![Circles](img/4812OS_01_11.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![圆](img/4812OS_01_11.jpg)'
- en: MultiPolylines and MultiPolygons
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多多折线和多多多边形
- en: In the previous examples, you created each polyline and polygon as its own layer.
    When you start creating real data, you will find that you want multiple polylines
    or polygons on a single layer. For starters, it is more realistic, and it also
    makes it possible to deal with similar features as a single entity. If you want
    to map parks and bike trails on a single map, it makes sense to add the parks
    as MultiPolygon and the bike trails as MultiPolyline. Then, you can provide the
    user with the option of turning either layer on or off.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，您将每条折线和多边形创建为其自己的图层。当您开始创建真实数据时，您会发现您想在单个图层上创建多个折线或多边形。首先，这更符合现实，同时也使得将类似特征作为一个单一实体处理成为可能。如果您想在单个地图上绘制公园和自行车道，将公园作为MultiPolygon添加，将自行车道作为MultiPolyline添加是有意义的。然后，您可以向用户提供选项，选择开启或关闭任一图层。
- en: Tip
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Bracketing for MultiPolylines and MultiPolygons can get confusing. You need
    brackets to hold the MultiPolyline or MultiPolygon, brackets for each polyline
    or polygon, and brackets for each latitude and longitude.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: MultiPolyline和多边形的括号可能会让人困惑。您需要括号来包含MultiPolyline或多边形，每个折线或多边形的括号，以及每个经纬度的括号。
- en: MultiPolylines
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多折线
- en: 'Creating a MultiPolyline is functionally the same as a single polyline, except
    that you pass multiple longitudes and latitudes; a set for each polygon. This
    is shown in the following code:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 创建MultiPolyline的功能与单个折线相同，只是您传递了多个经纬度；每个多边形一个集合。以下代码显示了这一点：
- en: '[PRE26]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the preceding code, the first polyline is the same as the polyline example.
    A second polyline is added, and the options are also the same as the first polyline
    example. The following screenshot shows the MultiPolyline added to the map:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，第一条折线与折线示例相同。添加了第二条折线，其选项也与第一条折线示例相同。以下截图显示了添加到地图上的MultiPolyline：
- en: '![MultiPolylines](img/4812OS_01_12.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![多折线](img/4812OS_01_12.jpg)'
- en: MultiPolygons
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多边形
- en: 'Creating a MultiPolygon is the same as creating a MultiPolyline. Since Leaflet
    will automatically close the polyline, as long as our polylines have three or
    more points, we can use them. This is shown in the following code:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 创建MultiPolygon与创建MultiPolyline相同。由于Leaflet会自动关闭折线，只要我们的折线有三个或更多点，我们就可以使用它们。以下代码显示了这一点：
- en: '[PRE27]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the preceding code, you can see that the parameters used are identical to
    those used in the MultiPolyline example earlier. When we create a MultiPolygon
    or MultiPolyline, the options will apply to every polygon or polyline in the collection.
    This means that they all have to be the same color, weight, opacity, and so on.
    There is a new method in the preceding code: `.bindPopup("We are the same layer")`.
    MultiPolygons and MultiPolylines also share the same pop up. Pop ups will be discussed
    later in this chapter. Also, note the use of method chaining in the line `L.multiPolygon().addTo().bindPopup()`.
    The following screenshot shows the MultiPolygon added to the map:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，您可以看到使用的参数与之前MultiPolyline示例中使用的参数相同。当我们创建MultiPolygon或多折线时，选项将应用于集合中的每个多边形或折线。这意味着它们都必须具有相同的颜色、权重、不透明度等。在上述代码中有一个新方法：`.bindPopup("我们属于同一图层")`。MultiPolygon和多折线也共享相同的弹出窗口。弹出窗口将在本章后面讨论。此外，请注意在行
    `L.multiPolygon().addTo().bindPopup()` 中的方法链的使用。以下截图显示了添加到地图上的MultiPolygon：
- en: '![MultiPolygons](img/4812OS_01_13.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![多边形](img/4812OS_01_13.jpg)'
- en: Groups of layers
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图层组
- en: MultiPolyline and MultiPolygon layers allow you to combine multiple polylines
    and polygons. If you want to create group layers of different types, such as a
    marker layer with a circle, you can use a layer group or a feature group.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 多折线和多边形图层允许您组合多个折线和多边形。如果您想创建不同类型的组图层，例如带有圆圈的标记图层，您可以使用图层组或要素组。
- en: The layer group
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图层组
- en: 'A layer group allows you to add multiple layers of different types to the map
    and manage them as a single layer. To use a layer group, you will need to define
    several layers:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图层组允许您将多个不同类型的图层添加到地图上，并将它们作为一个单一图层进行管理。要使用图层组，您需要定义几个图层：
- en: '[PRE28]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The preceding code creates two markers and a polyline. Note that you will not
    use the `addTo(map)` function after creating the layers, like you did in the previous
    examples. You will let the layer group handle adding the layer to the map. A layer
    group requires a set of layers as a parameter:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了两个标记和一个折线。请注意，在创建图层后，您将不会像在之前的示例中那样使用 `addTo(map)` 函数。您将让图层组来处理将图层添加到地图上的操作。图层组需要一个包含图层的集合作为参数：
- en: '[PRE29]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the previous code, an instance of `L.layerGroup()` was created as `myLayerGroup`.
    The layers passed as a parameter were `marker` and `polyline`. Finally, the layer
    group was added to the map. The earlier code shows three layers, but only two
    were added to the layer group. To add layers to a layer group without passing
    them as a parameter during creation, you can use the layer group `addLayer()`
    method. This method takes a layer as a parameter, as shown in the following code:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，创建了一个`L.layerGroup()`的实例作为`myLayerGroup`。作为参数传递的图层是`marker`和`polyline`。最后，将图层组添加到地图中。早期的代码显示了三个图层，但只有两个被添加到图层组中。要在创建时不需要作为参数传递图层，您可以使用图层组的`addLayer()`方法。此方法接受一个图层作为参数，如下面的代码所示：
- en: '[PRE30]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, all three layers have been added to the layer group and are displayed
    on the map. The following screenshot shows the layer group added to the map:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有三个图层都已添加到图层组中，并在地图上显示。以下截图显示了添加到地图中的图层组：
- en: '![The layer group](img/4812OS_01_14.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图层组](img/4812OS_01_14.jpg)'
- en: 'If you want to remove a layer from the layer group, you can use the `removeLayer()`
    method and pass the layer name as a parameter:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想从图层组中移除一个图层，您可以使用`removeLayer()`方法并传递图层名称作为参数：
- en: '[PRE31]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you remove a layer from the group, it will no longer be displayed on the
    map because the `addTo()` function was called for the layer group and not the
    individual layer. If you want to display the layer but no longer want it to be
    part of the layer group, use the `removeLayer()` function, as shown in the preceding
    code, and then add the layer to the map as shown in the earlier examples. This
    is shown in the following code:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从组中移除一个图层，它将不再在地图上显示，因为对图层组而不是单个图层调用了`addTo()`函数。如果您想显示图层但不再希望它成为图层组的一部分，可以使用前面代码中显示的`removeLayer()`函数，然后按照早期示例将其添加到地图中。以下代码显示了这一点：
- en: '[PRE32]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: All style options and pop ups need to be assigned to the layer when it is created.
    You cannot assign a style or pop ups to a layer group as a whole. This is where
    feature groups can be used.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 所有样式选项和弹出窗口都需要在创建图层时分配。您不能将样式或弹出窗口分配给整个图层组。这就是特征组可以发挥作用的地方。
- en: Feature groups
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特征组
- en: 'A feature group is similar to a layer group, but extends it to allow mouse
    events and includes the `bindPopup()` method. The constructor for a feature group
    is the same as the layer group: just pass a set of layers as a parameter. The
    following code displays an example of a feature group:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 特征组类似于图层组，但它扩展了它以允许鼠标事件并包括`bindPopup()`方法。特征组的构造函数与图层组相同：只需传递一组图层作为参数。以下代码显示了一个特征组的示例：
- en: '[PRE33]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the preceding code, the layers added are the same three that you added in
    the layer group. Since the feature group extends the layer group, you can assign
    a style and pop up to all of the layers at once. The following screenshot shows
    the feature group added to the map:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，添加的图层与在图层组中添加的相同三个图层。由于特征组扩展了图层组，您可以将样式和弹出窗口一次性分配给所有图层。以下截图显示了添加到地图中的特征组：
- en: '![Feature groups](img/4812OS_01_15.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![特征组](img/4812OS_01_15.jpg)'
- en: When you created the polyline in the previous example, you set the color to
    `red`. Note now that since you passed style information to the feature group by
    setting the color to `purple`, the polyline took the information from the feature
    group and discarded its original settings. If you removed the polyline from the
    feature group, it will be removed from the map as well. If you try to add the
    polyline to the map using `addTo()`, as in the previous examples, it will still
    be purple and have the new pop up. The markers are still blue even though you
    passed style information to the feature group. The `setStyle()` method only applies
    to layers in the feature group that have a `setStyle()` method. Since a polyline
    extends the `path` class, it has a `setStyle()` method. The markers do not have
    a `setStyle()` method, so their color did not change.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中创建折线时，您将其颜色设置为`红色`。注意现在，由于您通过将颜色设置为`紫色`向特征组传递了样式信息，折线从特征组中获取了信息并丢弃了其原始设置。如果您从特征组中移除折线，它也将从地图中移除。如果您尝试使用`addTo()`方法将折线添加到地图中，就像之前的示例一样，它仍然会是紫色并具有新的弹出窗口。即使您向特征组传递了样式信息，标记仍然是蓝色。`setStyle()`方法仅适用于具有`setStyle()`方法的特征组中的图层。由于折线扩展了`path`类，它具有`setStyle()`方法。标记没有`setStyle()`方法，因此其颜色没有改变。
- en: Pop ups
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弹出窗口
- en: 'The last few examples introduced pop ups. A pop up provides a way to make your
    layers interactive or provides information to the user. The simplest way to add
    a pop up to a marker, polyline, or polygon is to use the `bindPopup()` method.
    This method takes the contents of the pop up as a parameter. Using the `marker`
    variable we created earlier, we bind the pop up to it with the following code:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 最后几个示例介绍了弹出窗口。弹出窗口提供了一种使你的图层交互或向用户提供信息的方式。将弹出窗口添加到标记、折线或多边形的最简单方法是使用`bindPopup()`方法。此方法将弹出窗口的内容作为参数。使用我们之前创建的`marker`变量，我们可以用以下代码将弹出窗口绑定到它：
- en: '[PRE34]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The `bindPopup()` method allows you to enter HTML as the content. This is shown
    in the following code:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`bindPopup()`方法允许你输入HTML作为内容。这在上面的代码中显示：'
- en: '[PRE35]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The ability to use HTML in a pop up comes in handy when you have a lot of details
    to add. It allows the use of images and links in pop ups. The following screenshot
    shows the HTML-formatted pop up added to a marker on the map:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要添加大量详细信息时，使用HTML在弹出窗口中非常有用。它允许在弹出窗口中使用图片和链接。以下截图显示了添加到地图上的标记的HTML格式弹出窗口：
- en: '![Pop ups](img/4812OS_01_16.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![弹出窗口](img/4812OS_01_16.jpg)'
- en: 'You can also create an instance of the `popup` class and then assign it to
    multiple objects:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以创建`popup`类的实例，然后将其分配给多个对象：
- en: '[PRE36]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In the preceding code, you create an instance of the `L.popup()` class and assign
    it to the variable `mypopup`. Then, you can call the `bindPopup()` method on `marker`
    and `marker2` with `mypopup` as the parameter. Both markers will have the same
    pop up content and options.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，你创建了一个`L.popup()`类的实例，并将其分配给变量`mypopup`。然后，你可以使用`mypopup`作为参数，在`marker`和`marker2`上调用`bindPopup()`方法。这两个标记将具有相同的弹出窗口内容和选项。
- en: In the last section of this chapter, you will learn how to create a function
    that allows you to create a pop up with options and pass the content as a parameter.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，你将学习如何创建一个函数，该函数允许你创建带有选项的弹出窗口，并将内容作为参数传递。
- en: Mobile mapping
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动制图
- en: The maps you have made so far have been tested on the desktop. One of the benefits
    of mapping in JavaScript is that mobile devices can run the code in a standard
    web browser without any external applications or plugins. Leaflet runs on mobile
    devices, such as iPhone, iPad, and Android devices. Any web page with a Leaflet
    map will work on a mobile device without any changes; however, you probably want
    to customize the map for mobile devices so that it works and looks like it was
    built specifically for mobile.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 你迄今为止制作的地图已经在桌面端进行了测试。JavaScript制图的一个好处是，移动设备可以在标准网页浏览器中运行代码，无需任何外部应用程序或插件。Leaflet可以在iPhone、iPad和Android等移动设备上运行。任何带有Leaflet地图的网页在移动设备上都可以正常工作，无需任何更改；然而，你可能希望为移动设备定制地图，使其看起来像是专门为移动设备构建的。
- en: Lastly, the `L.map()` class has a `locate()` method, which uses the W3C Geolocation
    API. The Geolocation API allows you to find and track a user's location using
    the IP address, the wireless network information, or the GPS on a device. You
    do not need to know how to use the API; Leaflet handles all of this when you call
    `locate()`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`L.map()`类有一个`locate()`方法，它使用W3C地理位置API。地理位置API允许你通过IP地址、无线网络信息或设备上的GPS找到并跟踪用户的位置。你不需要知道如何使用API；当你调用`locate()`时，Leaflet会处理所有这些。
- en: HTML and CSS
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML和CSS
- en: 'The first step in converting your Leaflet map to a mobile version is to have
    it display properly on mobile devices. You can always tell when you open a website
    on your phone whether the developer took the time to make it mobile-accessible.
    How many times have you been on a website where the page loads and all you can
    see is the top-left corner, and you have to zoom around to read the page. It is
    not a good user experience. In `LeafletEssentials.html` in the `<head>` tag after
    the `<link>` tag for the CSS file, add the following code:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的Leaflet地图转换为移动版本的第一步是确保它在移动设备上正确显示。当你用手机打开一个网站时，你总能判断开发者是否花了时间使其移动设备可访问。你有多少次在网站上看到页面加载，但你只能看到左上角，你必须放大缩小才能阅读页面。这不是一个好的用户体验。在`LeafletEssentials.html`的`<head>`标签中，在CSS文件的`<link>`标签之后，添加以下代码：
- en: '[PRE37]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In the preceding CSS code, you set the `padding` and `margin` values to `0`.
    Think of a web page as a box model, where each element exists in its own box.
    Each box has a margin, which is the space between it and other boxes, and also
    padding, which is the space between the content inside the box and the box border
    (even if a border is not physically drawn). Setting the `padding` and `margin`
    values to `0` makes the `<body>` content fit to the size of the page. Lastly,
    you set the `height` value of the `<html>`, `<body>`, and `<div id = 'map'>` elements
    to `100%`.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的CSS代码中，您将`padding`和`margin`值设置为`0`。将网页想象成一个盒模型，其中每个元素都存在于自己的盒子中。每个盒子都有一个外边距，这是它与其他盒子之间的空间，还有一个内边距，这是盒子内内容与盒子边框之间的空间（即使边框没有实际绘制）。将`padding`和`margin`值设置为`0`使`<body>`内容适合页面大小。最后，您将`<html>`、`<body>`和`<div
    id = 'map'>`元素的`height`值设置为`100%`。
- en: Note
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In CSS, `#` is the ID selector. In the code, `#map` is telling us to select
    the element with the `id = 'map'` line. In this case, it is our `<div>` element
    that holds the map.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中，`#`是ID选择器。在代码中，`#map`告诉我们选择具有`id = 'map'`行的元素。在这种情况下，它是我们包含地图的`<div>`元素。
- en: 'The following diagram shows an overview of the settings for the web page:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了网页设置的概览：
- en: '![HTML and CSS](img/4812OS_01_20.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![HTML和CSS](img/4812OS_01_20.jpg)'
- en: 'The last step is to add the following code in the `<head>` section and after
    the `</title>` element:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是在`<head>`部分和`</title>`元素之后添加以下代码：
- en: '[PRE38]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The preceding code modifies the viewport that the site is seen through. This
    code sets the viewport to the width of the device and renders it by a ratio of
    1:1\. Lastly, it disables the ability to resize the web page. This, however, does
    not affect your ability to zoom on the map.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码修改了网站通过的可视区域。此代码将可视区域设置为设备宽度，并以1:1的比例渲染。最后，它禁用了调整网页大小的功能。然而，这并不会影响您在地图上缩放的能力。
- en: Creating a mobile map with JavaScript
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用JavaScript创建移动地图
- en: 'Now that you have configured the web page to render properly on mobile devices,
    it is time to add the JavaScript code that will grab the user''s current location.
    For this, perform the following steps:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经配置了网页以在移动设备上正确渲染，是时候添加将获取用户当前位置的JavaScript代码了。为此，执行以下步骤：
- en: 'Create the map instance, but do not use `setView`:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建地图实例，但不要使用`setView`：
- en: '[PRE39]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add a tile layer:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加瓦片层：
- en: '[PRE40]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Define a function to successfully find the location:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个函数以成功找到位置：
- en: '[PRE41]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Define a function to unsuccessfully find the location:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个函数以失败地找到位置：
- en: '[PRE42]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add an event listener for `foundLocation()` and `notFoundLocation()`:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`foundLocation()`和`notFoundLocation()`添加事件监听器：
- en: '[PRE43]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Use locate() to set the map view:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`locate()`设置地图视图：
- en: '[PRE44]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The code creates the map and adds a tile layer. It then skips over the functions
    and event listeners and tries to locate the user. If it is able to locate the
    user, it runs the code in `foundLocation()` and sets the view to the latitude
    and longitude of the user. If it does not locate the user, it executes the code
    in `notFoundLocation()` and displays a zoomed-out world map.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 代码创建地图并添加瓦片层。然后跳过函数和事件监听器，并尝试定位用户。如果它能够定位用户，它将运行`foundLocation()`中的代码并将视图设置为用户的纬度和经度。如果不能定位用户，它将执行`notFoundLocation()`中的代码并显示缩放后的世界地图。
- en: 'To make this example more usable, add the following code to `notFoundLocation()`:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使此示例更易于使用，将以下代码添加到`notFoundLocation()`中：
- en: '[PRE45]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The `alert()` function creates a pop up in the browser with the message passed
    as a parameter. Anytime that the browser is unable to locate the user, they will
    see the following message. While some devices do not have location capabilities,
    at times, they need to be allowed in their security settings:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`alert()`函数在浏览器中创建一个弹出窗口，显示传递给它的消息。任何浏览器无法定位用户时，他们都会看到以下消息。虽然一些设备没有定位功能，但有时需要在它们的设置中允许它们：'
- en: '![Creating a mobile map with JavaScript](img/4812OS_01_17.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![使用JavaScript创建移动地图](img/4812OS_01_17.jpg)'
- en: 'Now, add the following code to `foundLocation()`:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下代码添加到`foundLocation()`中：
- en: '[PRE46]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The preceding code will run when the user''s location is found. The `e` in
    `foundLocation(e)` is an event object. It is sent when an event is triggered to
    the function that is responsible for handling that specific event type. It contains
    information about the event that you will want to know. In the preceding code,
    the first event object we grab is the `timestamp` object. If you were to display
    the timestamp in a pop up, you would get a bunch of numbers: **1400094289048**.
    The timestamp is the number of milliseconds that have passed since January 1,
    1970 00:00:00 UTC. If you create an instance of the `date` class and pass it to
    the `timestamp` object, you receive a human-readable date. Next, the code creates
    a marker. The latitude and longitude are stored in `e.latlng`. You then add the
    marker to the map and bind a pop up. The pop up needs a string as a parameter,
    so you can use the `toString()` method of the `date` class or use `String(mydate)`
    to convert it. The following screenshot shows the pop up with the date and time
    when the user clicked on it:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户的位置被找到时，上述代码将执行。`foundLocation(e)` 中的 `e` 是一个事件对象。它在事件被触发并传递给负责处理该特定事件类型的函数时发送。它包含您想要了解的事件信息。在上述代码中，我们首先获取的是
    `timestamp` 对象。如果您要在弹出窗口中显示时间戳，您会得到一串数字：**1400094289048**。时间戳是自1970年1月1日00:00:00
    UTC以来经过的毫秒数。如果您创建一个 `date` 类的实例并将其传递给 `timestamp` 对象，您将收到一个可读的日期。接下来，代码创建一个标记。纬度和经度存储在
    `e.latlng` 中。然后您将标记添加到地图上，并绑定一个弹出窗口。弹出窗口需要一个字符串作为参数，因此您可以使用 `date` 类的 `toString()`
    方法，或者使用 `String(mydate)` 将其转换为字符串。以下截图显示了用户点击时的日期和时间弹出窗口：
- en: '![Creating a mobile map with JavaScript](img/4812OS_01_18.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![使用JavaScript创建移动地图](img/4812OS_01_18.jpg)'
- en: Events and event handlers
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件和事件处理程序
- en: So far, you have created maps that display data and added a pop up that displayed
    when the user clicked on a marker. Now, you will learn how to handle other events
    and assign these events to event handler functions to process them and do something
    as a result.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经创建了显示数据的地图，并添加了一个在用户点击标记时显示的弹出窗口。现在，您将学习如何处理其他事件，并将这些事件分配给事件处理函数以处理它们，并作为结果执行某些操作。
- en: 'You will first learn how to handle a `map` event. There are 34 events in the
    `map` class that can be subscribed to. This example will focus on the `click`
    event. To subscribe to an event, you use the event method `.on()`; so, for a `map`
    event, you use the `map.on()` method and pass the parameters as the event and
    function to handle the event. This is shown in the following code:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先将学习如何处理 `map` 事件。`map` 类中有34个事件可以订阅。本例将重点介绍 `click` 事件。要订阅事件，您使用事件方法 `.on()`；因此，对于
    `map` 事件，您使用 `map.on()` 方法并传递事件和处理函数作为参数。这在上面的代码中显示：
- en: '[PRE47]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The code tells Leaflet to send an alert pop-up box with the text **You clicked
    the map** when the user clicks on the map. In the mobile example, you created
    a listener that had a named function that executed `foundLocation()`. In the preceding
    code, the function was put in as a parameter. This is known as an anonymous function.
    The function has no name, and so, it can only be called when the user clicks on
    the map.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 代码指示Leaflet在用户点击地图时发送一个包含文本 **您点击了地图** 的警告弹出窗口。在移动示例中，您创建了一个具有命名函数的监听器，该函数执行
    `foundLocation()`。在上述代码中，函数被作为参数放入。这被称为匿名函数。该函数没有名称，因此只能在用户点击地图时调用。
- en: 'Remember `e` from the mobile example? If you pass `e` to the function, you
    can get the `longlat` value of the spot that the user clicked on, as shown in
    the following code:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 记得移动示例中的 `e` 吗？如果您将 `e` 传递给函数，您就可以获取用户点击的位置的 `longlat` 值，如下所示：
- en: '[PRE48]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The preceding code is spaced in a way that is more readable, but you can put
    it all on a single line. The code displays the longitude and latitude of the spot
    where the user clicked on the map. The second line assigns the variable `coord`,
    the value of `e.latlng`. The next two lines strip the latitude and longitude from
    the value so that you can display them clearly.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码以更易读的方式进行了排版，但您也可以将其全部放在一行上。该代码显示用户在地图上点击的位置的经纬度。第二行将变量 `coord` 赋值为 `e.latlng`
    的值。接下来的两行从值中提取经纬度，以便您可以清晰地显示它们。
- en: 'You can build on this example by adding a marker when the user clicks on the
    map by simply replacing the code with the following:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过添加标记来扩展这个示例，只需将代码替换为以下内容：
- en: '[PRE49]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The preceding code is identical to the code in the mobile example. The difference
    is that in the mobile example, it was only executed when `locate()` was successful.
    In this example, it is executed every time the user clicks on the map.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码与移动示例中的代码相同。不同之处在于，在移动示例中，它仅在 `locate()` 成功时执行。在这个例子中，它会在用户每次点击地图时执行。
- en: 'In the section on markers, you created a marker that had the property `draggable:true`.
    Markers have three events that deal with dragging: `dragstart`, `drag`, and `dragend`.
    Perform the following steps to return the longitude and latitude of the marker
    in a pop up on `dragend`:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在标记部分，你创建了一个具有属性 `draggable:true` 的标记。标记有三个与拖动相关的事件：`dragstart`、`drag` 和 `dragend`。执行以下步骤以在
    `dragend` 时在弹出窗口中返回标记的经纬度：
- en: 'Create the marker and set the draggable property to `true`:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建标记并将可拖动属性设置为 `true`：
- en: '[PRE50]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Write a function to bind a pop up to the marker and call the method `getLatLong()`:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个函数将弹出窗口绑定到标记并调用 `getLatLong()` 方法：
- en: '[PRE51]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Subscribe to the event:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订阅事件：
- en: '[PRE52]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Open the map and click on the marker. Hold down the left mouse button and drag
    the marker to a new location on the map. Release the left button and click on
    the marker again to trigger the pop up. The pop up will have the new latitude
    and longitude of the marker.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 打开地图并点击标记。按住鼠标左键并将标记拖动到地图上的新位置。释放鼠标左键并再次点击标记以触发弹出窗口。弹出窗口将显示标记的新纬度和经度。
- en: Custom functions
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义函数
- en: You subscribed to an event and handled it with a function. So far, you have
    only passed `e` as a parameter. In JavaScript, you can send anything you want
    to the function. Also, functions can be called anywhere in your code. You do not
    have to call them only in response to an event. In this short example, you will
    create a function that returns a pop up and is triggered on a call and not by
    an event.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 你订阅了一个事件并用函数处理了它。到目前为止，你只传递了 `e` 作为参数。在 JavaScript 中，你可以向函数发送任何你想要的内容。此外，函数可以在你的代码的任何地方调用。你不必仅在响应事件时调用它们。在这个简短的例子中，你将创建一个返回弹出窗口的函数，该函数在调用时被触发，而不是由事件触发。
- en: 'First, create a marker and bind a pop up to it. For the content of the pop
    up, enter `createPopup(Text as a parameter)`. Add the marker to the map as shown
    in the following code:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个标记并将其绑定到弹出窗口。对于弹出窗口的内容，输入 `createPopup(Text as a parameter)`。按照以下代码将标记添加到地图中：
- en: '[PRE53]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Create a second marker and set the content of the pop up to `createPopup (Different
    text as a parameter)`:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 创建第二个标记并将弹出窗口的内容设置为 `createPopup (Different text as a parameter)`：
- en: '[PRE54]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In the previous examples, you created a pop up by passing text or a pop-up
    instance. In this example, you call a function, `createPopup()`, with a string
    as a parameter, as shown in the following code:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，你通过传递文本或弹出实例来创建弹出窗口。在这个例子中，你使用字符串作为参数调用函数 `createPopup()`，如下所示：
- en: '[PRE55]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The function takes a parameter called `x`. In the marker, when you call the
    function, you pass a string. This is sent to the function and stored as `x`. When
    the pop up is created, the `setContent()` method is given the value of `x` instead
    of a hardcoded string. This function is useful if you have a lot of options set
    on your pop ups and want them all to be the same. It limits the number of times
    that you need to repeat the same code. Just pass the text of the pop up to the
    function, and you get a new pop up with the standardized formatting options. The
    following screenshot shows both of the pop ups generated by the custom function:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受一个名为 `x` 的参数。在标记中，当你调用该函数时，你传递一个字符串。这个字符串被发送到函数并存储为 `x`。当弹出窗口创建时，`setContent()`
    方法被赋予 `x` 的值而不是硬编码的字符串。这个函数在你有很多弹出窗口选项并且希望它们都相同的情况下很有用。它限制了你需要重复相同代码的次数。只需将弹出窗口的文本传递给函数，你就可以得到一个新的具有标准化格式选项的弹出窗口。以下截图显示了由自定义函数生成的两个弹出窗口：
- en: '![Custom functions](img/4812OS_01_19.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![自定义函数](img/4812OS_01_19.jpg)'
- en: Summary
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covered almost every major topic required to create a Leaflet map.
    You learned how to add tile layers from multiple providers, including satellite
    imagery. You can now add points, lines, and polygons to the map, as well as collections
    of polylines and polygons. You can group layers of different types into layer
    or feature collections. This chapter covered the styling of objects and adding
    pop ups. You learned how to interact with the user by responding to events and
    created custom functions to allow you to code more by writing less.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了创建Leaflet地图所需的大部分主要主题。你学习了如何添加来自多个提供者的瓦片图层，包括卫星影像。你现在可以向地图中添加点、线和多边形，以及多边形的集合。你可以将不同类型的图层分组到图层或要素集合中。本章还涵盖了对象的样式化和添加弹出窗口。你学习了如何通过响应用件与用户交互，并创建了自定义函数，让你可以通过编写更少的代码来实现更多的编码。
- en: In the next chapter, you will learn how to add GeoJSON data to your map.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何将GeoJSON数据添加到你的地图中。
