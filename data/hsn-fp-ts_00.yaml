- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: Functional programming is a programming paradigm that treats computation as
    the evaluation of mathematical functions and avoids changing-state and mutable
    data. The origins of the functional programming paradigm can be traced back to
    the 1930s when Alonzo Church introduced Lambda calculus. Lambda calculus presents
    a theoretical framework for describing functions and their evaluation, and is
    a mathematical abstraction rather than a programming language. However, Lambda
    calculus is the foundation of most functional programming languages.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程是一种将计算视为数学函数评估的编程范式，并避免改变状态和可变数据。函数式编程范式的起源可以追溯到20世纪30年代，当时阿隆佐·丘奇介绍了Lambda演算。Lambda演算提供了一个描述函数及其评估的理论框架，是一种数学抽象，而不是编程语言。然而，Lambda演算是大多数函数式编程语言的基础。
- en: In the late 1950s, Lisp, one of the first functional programming languages,
    was developed by John McCarthy. Lisp introduced many functional programming paradigm
    features, and it was the primary influence of other popular functional programming
    languages, such as Scheme and Clojure.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '在20世纪50年代末，约翰·麦卡锡开发了Lisp，这是最早的函数式编程语言之一。Lisp引入了许多函数式编程范式特性，并成为其他流行函数式编程语言（如Scheme和Clojure）的主要影响。 '
- en: In 1973, Robin Milner created ML at the University of Edinburgh. ML eventually
    developed into several alternative languages, the most common of which are now
    OCaml and Standard ML. In 1977, John Backus defined functional programs in a way
    that allows an "algebra of programs" and follows the principle of compositionality.
    In 1985, Research Software Limited released Miranda, and the interest in lazy
    functional programming languages grew. After a couple of years, more than a dozen
    non-strict, purely functional programming languages existed. In 1987, at the conference
    on functional programming languages and computer architecture in Portland, Oregon,
    there was a strong consensus that a committee should be formed to define an open
    standard for such languages; Haskell was born.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 1973年，罗宾·米尔纳在爱丁堡大学创建了ML。ML最终发展成了几种替代语言，其中最常见的是OCaml和标准ML。1977年，约翰·巴克斯以允许“程序代数”并遵循组合性原则的方式定义了函数程序。1985年，研究软件有限公司发布了Miranda，对惰性函数式编程语言的兴趣增长。几年后，存在十多种非严格、纯函数式编程语言。1987年，在俄勒冈州波特兰举行的函数式编程语言和计算机架构会议上，形成了强烈的共识，即应成立一个委员会来定义此类语言的开放标准；Haskell应运而生。
- en: The 1970s and 1980s were years of significant advancement for functional programming.
    However, during the 1990s and 2000s, functional programming lost market share
    against object-oriented programming languages, such as Java and C#.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 20世纪70年代和80年代是函数式编程显著进步的年份。然而，在90年代和21世纪初，函数式编程在与面向对象编程语言（如Java和C#）的竞争中失去了市场份额。
- en: In the 2010s, the adoption of JavaScript grew exponentially, and it became the
    most popular programming language. The Scheme programming language is one of the
    main influences of JavaScript and, as a result, JavaScript implements many functional
    programming features, such as support for higher-order functions. JavaScript became
    the first contact with functional programming for many young developers. However,
    because JavaScript is a multi-paradigm programming language, many ignored its
    functional programming capabilities. However, in recent times, thanks to the arrival
    of technologies highly influenced by functional programmings principles, such
    as React, RxJS, and Redux, there has been a significant increase in interest in
    functional programming within the JavaScript community.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在2010年代，JavaScript的采用呈指数增长，成为最受欢迎的编程语言。Scheme编程语言是JavaScript的主要影响因素之一，因此JavaScript实现了许多函数式编程特性，例如支持高阶函数。JavaScript成为许多年轻开发者接触函数式编程的第一步。然而，由于JavaScript是一种多范式编程语言，许多人忽略了其函数式编程能力。然而，在最近几年，随着受函数式编程原则高度影响的技术（如React、RxJS和Redux）的出现，JavaScript社区对函数式编程的兴趣显著增加。
- en: As the popularity of JavaScript grew, the complexity of JavaScript applications
    also grew exponentially. Web user interfaces became much more sophisticated, and
    JavaScript started to be used in a number of alternative scenarios, such as backend
    applications. The TypeScript programming language was then introduced as a tool
    that allows us to manage the new levels of complexity.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 随着JavaScript的普及，JavaScript应用程序的复杂性也呈指数级增长。Web用户界面变得更加复杂，JavaScript开始被用于多种替代场景，例如后端应用程序。随后，TypeScript编程语言被引入作为一种工具，它允许我们管理新的复杂级别。
- en: TypeScript aims to reduce the complexity of a system by adding a static type
    system to JavaScript. Static type systems can be used to detect errors at compilation
    time as a beneficial form of in-code documentation. Static type systems can be
    very beneficial in functional programming. Most object-oriented programming languages,
    such as Java and C#, are slowly adopting functional programming features, and
    sophisticated static type systems are something that is many times associated
    with purely functional programming languages, such as Haskell.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript旨在通过向JavaScript添加静态类型系统来减少系统的复杂性。静态类型系统可以在编译时检测错误，这是一种有益的代码文档形式。在函数式编程中，静态类型系统可以非常有用。大多数面向对象的编程语言，如Java和C#，正在缓慢地采用函数式编程特性，而复杂的静态类型系统通常与纯函数式编程语言（如Haskell）相关联。
- en: 'This book is not going to encourage you to stop using object-oriented programming.
    Instead, we are going to try to think about both the functional programming and
    the object-oriented programming paradigms as two different solutions to the same
    problem: managing complexity:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不会鼓励你停止使用面向对象编程。相反，我们将尝试将函数式编程和面向对象编程范式视为解决同一问题的两种不同解决方案：管理复杂性：
- en: '"Object-oriented programming makes code understandable by encapsulating moving
    parts. Functional programming makes code understandable by minimizing moving parts."'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '"面向对象编程通过封装移动部分使代码易于理解。函数式编程通过最小化移动部分使代码易于理解。"'
- en: – *Michael Feath**ers*
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: – *迈克尔·费瑟斯*
- en: The popularity of distributed systems is increasing as the adoption of cloud
    computing continues to grow and, as a result, functional programming is expected
    to rise in popularity over the next decade because it is particularly well suited
    for concurrent systems and distributed systems. Functional programming encourages
    the implementation of stateless components, which can be scaled with ease. Since
    the complexity of distributed systems is usually high, this is just another example
    of how functional programming can be used as a weapon against complexity.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随着云计算的采用持续增长，分布式系统的普及也在增加，因此，预计在接下来的十年中，函数式编程的受欢迎程度也将上升，因为它特别适合并发系统和分布式系统。函数式编程鼓励实现无状态组件，这些组件可以轻松扩展。由于分布式系统的复杂性通常很高，这仅仅是函数式编程如何作为对抗复杂性的武器的另一个例子。
- en: Mastering TypeScript together with the principles and techniques of both object-oriented
    programming and functional programming can provide us with a richer toolset to
    fight against complexity in our systems. This book will provide you with knowledge
    about a wide range of functional programming principles, patterns, and techniques
    that should help you to become a more versatile software engineer and prepare
    you for dealing with the increasing complexity in modern web applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 将TypeScript与面向对象编程和函数式编程的原则和技术相结合，可以为我们提供更丰富的工具集，以对抗系统中的复杂性。本书将为你提供关于广泛的功能性编程原则、模式和技术的知识，这应该有助于你成为一个更全能的软件工程师，并为你应对现代Web应用程序中日益增长的复杂性做好准备。
- en: Who this book is for
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书面向对象
- en: If you are a developer aiming to learn functional programming for the very first
    time and improve the quality of your applications, then this book is for you.
    No prior knowledge of functional programming is required. However, a basic understanding
    of JavaScript and TypeScript is recommended to make the most out of this book.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一名开发者，目标是首次学习函数式编程并提高你应用程序的质量，那么这本书就是为你准备的。不需要函数式编程的先验知识。然而，为了充分利用这本书，建议你具备JavaScript和TypeScript的基本理解。
- en: What this book covers
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖内容
- en: '[Chapter 1](65bf43e0-dba4-414a-b6e7-3c6f38581858.xhtml), *Functional Programming
    Fundamentals*, introduces the main functional programming terms, such as pure
    functions.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[第一章](65bf43e0-dba4-414a-b6e7-3c6f38581858.xhtml)，*函数式编程基础*，介绍了主要的函数式编程术语，如纯函数。'
- en: '[Chapter 2](5c1a8b07-e106-4ea8-a5e5-909e641eb271.xhtml), *Mastering Functions*,
    takes an in-depth look at the main building block in a functional programming
    application—functions. The chapter also explores most of the function-related
    features in TypeScript. We will learn how to work with functions in many different
    scenarios and how to take advantage of the TypeScript type system features while
    working with functions.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](5c1a8b07-e106-4ea8-a5e5-909e641eb271.xhtml)，*精通函数*，深入探讨了函数式编程应用中的主要构建块——函数。本章还探讨了TypeScript中大多数与函数相关的特性。我们将学习如何在许多不同的场景下与函数一起工作，以及如何在处理函数时利用TypeScript的类型系统特性。'
- en: '[Chapter 3](3e1c3d5e-9b0a-417c-9d73-366fbd7432d6.xhtml), *Mastering Asynchronous
    Programming*, takes an in-depth look at the main asynchronous programming APIs
    in JavaScript and TypeScript, including callbacks, promises, generators, and asynchronous
    functions. These APIs are relevant in functional programming because they can
    be used to implement lazy evaluation.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](3e1c3d5e-9b0a-417c-9d73-366fbd7432d6.xhtml)，*精通异步编程*，深入探讨了JavaScript和TypeScript中的主要异步编程API，包括回调、承诺、生成器和异步函数。这些API在函数式编程中相关，因为它们可以用来实现惰性求值。'
- en: '[Chapter 4](0ea0b1ad-d206-4b3a-9520-b08365a988d7.xhtml), *The Runtime – The
    Event Loop and the this Operator*, is the first chapter of two that are dedicated
    to exploring concepts about the runtime that are relevant for a number of functional
    programming techniques. For example, we can gain a much better understanding of
    recursion if we understand the event loop.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[第4章](0ea0b1ad-d206-4b3a-9520-b08365a988d7.xhtml)，*运行时 – 事件循环和this操作符*，是两章中第一章，专注于探索与许多函数式编程技术相关的运行时概念。例如，如果我们理解了事件循环，我们就能更好地理解递归。'
- en: '[Chapter 5](68a4518b-0e8e-4273-8418-2751c4961ed1.xhtml), *The Runtime – Closures
    and Prototypes*, is the second chapter dedicated to exploring concepts about the
    runtime that are relevant to a number of functional programming techniques. For
    example, understanding closures can help us to understand how some higher-order
    functions work.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章](68a4518b-0e8e-4273-8418-2751c4961ed1.xhtml)，*运行时 – 闭包和原型*，是第二章节，专注于探索与许多函数式编程技术相关的运行时概念。例如，理解闭包可以帮助我们理解一些高阶函数是如何工作的。'
- en: '[Chapter 6](b9229d02-8eca-4ff7-a88f-e4ccb019270f.xhtml), *Functional Programming
    Techniques*, explores the main functional programming techniques and patterns
    in detail. We will explore concepts such as partial function application, functional
    composition, and currying. This chapter also explores many other functional programming
    techniques and patterns, such as point-free style.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章](b9229d02-8eca-4ff7-a88f-e4ccb019270f.xhtml)，*函数式编程技术*，详细探讨了主要的函数式编程技术和模式。我们将探讨部分函数应用、函数组合和柯里化等概念。本章还探讨了其他许多函数式编程技术和模式，如无参数风格。'
- en: '[Chapter 7](ca940a3c-ec71-4a5c-bb96-41dfe38228de.xhtml), *Category Theory*,
    explores category theory. You will learn about what algebraic data types are and
    what the relationships between them are. You will then learn how to implement
    some of the main algebraic data types, including functors and monads.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](ca940a3c-ec71-4a5c-bb96-41dfe38228de.xhtml)，*范畴论*，探讨了范畴论。你将了解什么是代数数据类型以及它们之间的关系。然后，你将学习如何实现一些主要代数数据类型，包括函子和单子。'
- en: '[Chapter 8](da643d96-7b61-4d9c-8fed-8a44b485c140.xhtml), *Immutability, Optics,
    and Laziness*, explores three important functional programming techniques. You
    will learn about what lazy evaluation is, what its benefits are, and how to implement
    it. You will also learn about immutable data structures, their benefits, and how
    to implement them. Finally, you will learn about functional optics and how they
    can help with immutable data structures.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](da643d96-7b61-4d9c-8fed-8a44b485c140.xhtml)，*不可变性、光学和惰性*，探讨了三个重要的函数式编程技术。你将了解什么是惰性求值，它的好处以及如何实现它。你还将了解不可变数据结构、它们的优点以及如何实现它们。最后，你将了解函数式光学以及它们如何帮助不可变数据结构。'
- en: '[Chapter 9](6a03c916-f7a5-439a-bea6-6facecef0347.xhtml), *Functional-Reactive
    Programming*, explores the functional-reactive programming paradigm. We will learn
    about what observables are and how they can be used to simplify our code. We will
    also learn how to use RxJS, the leading reactive-programming library in the JavaScript
    ecosystem.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[第9章](6a03c916-f7a5-439a-bea6-6facecef0347.xhtml)，*函数式响应式编程*，探讨了函数式响应式编程范式。我们将了解什么是可观察的，以及它们如何被用来简化我们的代码。我们还将学习如何使用RxJS，这是JavaScript生态系统中最领先的响应式编程库。'
- en: '*[Chapter 10](35e51290-b4e7-44e8-bc7f-b9fbbe3bc94c.xhtml), Real-World Functional
    Programming*, explores some production-ready functional programming libraries,
    such as Ramda and Funfix, to create real-world functional programming applications.\'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*[第10章](35e51290-b4e7-44e8-bc7f-b9fbbe3bc94c.xhtml), 实际应用中的函数式编程*，探讨了几个可用于生产环境的函数式编程库，如Ramda和Funfix，以创建实际的函数式编程应用程序。'
- en: '[Appendix A](9301d615-1e48-448c-91aa-956f9c94a1ba.xhtml), *Functional Programming
    Learning Road Map*, this was developed for Fantasyland institute of learning for
    the LambdaConf conference. It is used to track our level of knowledge regarding
    functional programming.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[附录A](9301d615-1e48-448c-91aa-956f9c94a1ba.xhtml), *函数式编程学习路线图*，这是为Fantasyland学习机构和LambdaConf会议开发的。它用于跟踪我们对函数式编程的知识水平。'
- en: '[Appendix B](70e73ea4-faef-4537-b7e6-01f087f0f913.xhtml), *Directory of TypeScript
    Functional Programming Libraries*, In this appendix, you will find a list of functional
    programming libraries compatible with TypeScript grouped.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[附录B](70e73ea4-faef-4537-b7e6-01f087f0f913.xhtml), *TypeScript函数式编程库目录*，在这个附录中，你可以找到一个与TypeScript兼容的函数式编程库列表。'
- en: To get the most out of this book
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为了充分利用这本书
- en: You don't need any additional material to follow this book. No prior knowledge
    of functional programming is required. However, a basic understanding of JavaScript
    and TypeScript is recommended to make the most use of this book.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读这本书不需要任何额外的材料。不需要函数式编程的先验知识。然而，建议对JavaScript和TypeScript有基本了解，以便充分利用这本书。
- en: It is recommended reading the chapters in order. However, if you are new to
    functional programming and already have advanced knowledge of functions, asynchronous
    programming, and the runtime, you could maybe skip chapters two to five.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 建议按顺序阅读章节。然而，如果你是函数式编程的新手，但已经对函数、异步编程和运行时有了高级知识，你可能可以跳过第二到五章。
- en: You can refer to the TypeScript handbook at [http://www.typescriptlang.org/docs/handbook/basic-types.html](http://www.typescriptlang.org/docs/handbook/basic-types.html) if
    you have some experience with JavaScript, but TypeScript is new to you. This resource
    might be especially useful if TypeScript is your first statically typed programming
    language. Alternatively, you can refer to the book *Learning TypeScript 2.x, Second Edition*,
    also by *Remo H. Jansen* and *Packt Publishing*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一些JavaScript经验，但TypeScript对你来说是新的，你可以参考[http://www.typescriptlang.org/docs/handbook/basic-types.html](http://www.typescriptlang.org/docs/handbook/basic-types.html)的TypeScript手册。如果TypeScript是你的第一门静态类型编程语言，这个资源可能特别有用。或者，你也可以参考由*Remo
    H. Jansen*和*Packt Publishing*出版的书籍*Learning TypeScript 2.x, Second Edition*。
- en: If you need help installing Node.js, you can refer to the official documentation
    at [https://nodejs.org/en/download/package-manager](https://nodejs.org/en/download/package-manager/).
    If you need help installing TypeScript, you can refer to the official documentation
    at [http://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html](http://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要安装Node.js的帮助，可以参考[https://nodejs.org/en/download/package-manager](https://nodejs.org/en/download/package-manager/)的官方文档。如果你需要安装TypeScript的帮助，可以参考[http://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html](http://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html)的官方文档。
- en: Download the example code files
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载示例代码文件
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packt.com/support](http://www.packt.com/support)
    and register to have the files emailed directly to you.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[www.packt.com](http://www.packt.com)的账户下载这本书的示例代码文件。如果你在其他地方购买了这本书，你可以访问[www.packt.com/support](http://www.packt.com/support)并注册，以便将文件直接通过电子邮件发送给你。
- en: 'You can download the code files by following these steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下步骤下载代码文件：
- en: Log in or register at [www.packt.com](http://www.packt.com).
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[www.packt.com](http://www.packt.com)登录或注册。
- en: Select the SUPPORT tab.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择SUPPORT标签。
- en: Click on Code Downloads & Errata.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击代码下载与勘误。
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入书名，并遵循屏幕上的说明。
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 文件下载完成后，请确保使用最新版本解压或提取文件夹：
- en: WinRAR/7-Zip for Windows
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WinRAR/7-Zip（适用于Windows）
- en: Zipeg/iZip/UnRarX for Mac
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zipeg/iZip/UnRarX（适用于Mac）
- en: 7-Zip/PeaZip for Linux
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7-Zip/PeaZip（适用于Linux）
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Typescript](https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Typescript). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍的代码包也托管在GitHub上，网址为[https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Typescript](https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Typescript)。如果代码有更新，它将在现有的GitHub仓库中更新。
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有其他来自我们丰富的书籍和视频目录的代码包，可在[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)找到。查看它们吧！
- en: Download the color images
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载彩色图像
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://www.packtpub.com/sites/default/files/downloads/9781788831437_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/9781788831437_ColorImages.pdf).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了一个包含本书中使用的截图/图表的彩色图像的PDF文件。您可以从这里下载：[https://www.packtpub.com/sites/default/files/downloads/9781788831437_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/9781788831437_ColorImages.pdf)。
- en: Conventions used
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用的约定
- en: There are a number of text conventions used throughout this book.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用了多种文本约定。
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "Mount the downloaded `WebStorm-10*.dmg` disk image file as
    another disk in your system."'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`CodeInText`：表示文本中的代码单词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter昵称。以下是一个示例：“将下载的`WebStorm-10*.dmg`磁盘映像文件作为系统中的另一个磁盘挂载。”'
- en: 'A block of code is set as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望您注意代码块中的特定部分时，相关的行或项目将以粗体显示：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都按照以下方式编写：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    screen. For example, words in menus or dialog boxes appear in the text like this.
    Here is an example: "Select System info from the Administration panel."'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**粗体**：表示新术语、重要单词或屏幕上看到的单词。例如，菜单或对话框中的单词在文本中显示如下。以下是一个示例：“从管理面板中选择系统信息。”'
- en: Warnings or important notes appear like this.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要注意事项看起来像这样。
- en: Tips and tricks appear like this.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士和技巧看起来像这样。
- en: Get in touch
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系我们
- en: Feedback from our readers is always welcome.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们欢迎读者的反馈。
- en: '**General feedback**: If you have questions about any aspect of this book,
    mention the book title in the subject of your message and email us at `customercare@packtpub.com`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**一般反馈**：如果您对本书的任何方面有疑问，请在邮件主题中提及书名，并通过`customercare@packtpub.com`给我们发送邮件。'
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packt.com/submit-errata](http://www.packt.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**勘误**：尽管我们已经尽一切努力确保内容的准确性，但错误仍然可能发生。如果您在这本书中发现了错误，我们将不胜感激，如果您能向我们报告这一点。请访问[www.packt.com/submit-errata](http://www.packt.com/submit-errata)，选择您的书籍，点击勘误提交表单链接，并输入详细信息。'
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packt.com` with a link
    to the material.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**盗版**：如果您在互联网上以任何形式发现我们作品的非法副本，如果您能提供位置地址或网站名称，我们将不胜感激。请通过`copyright@packt.com`与我们联系，并提供材料的链接。'
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in, and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您有兴趣成为作者**：如果您在某个领域有专业知识，并且您有兴趣撰写或为书籍做出贡献，请访问[authors.packtpub.com](http://authors.packtpub.com/)。'
- en: Reviews
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评论
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请留下您的评价。一旦您阅读并使用过这本书，为何不在购买它的网站上留下评价呢？潜在读者可以查看并使用您的客观意见来做出购买决定，我们 Packt 可以了解您对我们产品的看法，而我们的作者也可以看到他们对书籍的反馈。谢谢！
- en: For more information about Packt, please visit [packt.com](http://www.packt.com/).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解 Packt 的更多信息，请访问 [packt.com](http://www.packt.com/).
