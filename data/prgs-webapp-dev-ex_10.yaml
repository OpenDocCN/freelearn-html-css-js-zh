- en: Service Worker Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Service Worker 工具
- en: Web development has become complicated today with so many options, steps, and
    tools. **Progressive Web Apps** (**PWAs**) require a new model but that can produce
    many opportunities for errors to creep into the code. The good news is that there
    are several tools that you can integrate into your workflow to improve your application
    code's integrity.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着今天有如此多的选项、步骤和工具，Web开发已经变得复杂。**渐进式Web应用**（**PWAs**）需要一个新的模型，但这可能会让错误悄悄进入代码。好消息是，有几个工具可以集成到你的工作流程中，以改善你的应用程序代码的完整性。
- en: In this chapter, I will review several tools I have found invaluable in helping
    me ensure that my applications meet a level of consistent quality before I ship
    them. These include **PWABuilder**, **Lighthouse**, **Sonar**, and **WorkBox**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将回顾一些我认为非常有价值的工具，这些工具帮助我在发布应用程序之前确保它们达到一定的质量标准。这些工具包括**PWABuilder**、**Lighthouse**、**Sonar**和**WorkBox**。
- en: Lighthouse and Sonar are *linting tools* you can use to audit your web pages
    to ensure that a minimum criteria is met, including PWA, performance, hosting,
    and SEO requirements. PWABuilder and Workbox are very helpful in scaffolding important
    aspects of progressive web apps including the manifest, icons, and service workers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Lighthouse和Sonar是你可以用来审计你的网页以确保满足最低标准的*linting工具*，包括PWA、性能、托管和SEO要求。PWABuilder和Workbox在构建渐进式Web应用的重要方面非常有帮助，包括清单、图标和服务工作者。
- en: As a bonus, all of these tools are available as node modules which you can execute
    as part of a script and from the command line. This means that you can include
    much of this functionality as part of your automated workflow and build processes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的好处，所有这些工具都可作为node模块提供，你可以将其作为脚本的一部分或在命令行中执行。这意味着你可以将许多此功能包含在自动化工作流程和构建过程中。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Scaffolding PWA assets with PWABuilder
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PWABuilder 构建PWA资产
- en: Auditing web pages using Lighthouse
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Lighthouse 审计网页
- en: Auditing web pages using Sonar
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Sonar 审计网页
- en: Making complex service workers with WorkBox
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 WorkBox 构建复杂的服务工作者
- en: Using PWABuilder to scaffold your PWA
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PWABuilder 构建你的 PWA
- en: PWABuilder is a progressive web application scaffolding tool built by the Microsoft
    Edge team and publicly hosted at [https://pwabuilder.com](https://pwabuilder.com).
    I love this tool because you can quickly scaffold the assets you need to upgrade
    any website to a progressive web app in less than a minute.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: PWABuilder是由Microsoft Edge团队构建的渐进式Web应用构建工具，公开托管在[https://pwabuilder.com](https://pwabuilder.com)。我喜欢这个工具，因为它可以在不到一分钟的时间内快速构建你需要的资产，将任何网站升级为渐进式Web应用。
- en: 'There are three steps to scaffolding the PWA components, which are generating
    a web manifest file, picking a simple service worker, and downloading the assets:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 构建PWA组件有三个步骤，包括生成一个web清单文件、选择一个简单的Service Worker以及下载资产：
- en: '![](img/00121.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00121.jpeg)'
- en: Let's check each of these steps in detail.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细检查每个步骤。
- en: Generating a valid web manifest file
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成有效的web清单文件
- en: A valid web manifest file is one of the primary PWA requirements, but you would
    be surprised at how many sites miss this simple step. Most of them just forget
    an important field or to supply values that don't meet the guidelines, such as
    a long and short name value.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有效的web清单文件是PWA的基本要求之一，但你会惊讶地发现，许多网站忽略了这一简单的步骤。其中大多数只是忘记了一个重要的字段，或者提供的值不符合指南，例如长名称和短名称值。
- en: The biggest mistake is not including the minimum set of icons required by all
    the different browsers and operating systems.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的错误是没有包含所有不同浏览器和操作系统所需的最小图标集。
- en: 'To use the online tool, you need to supply a public URL, two primary application
    colors, and a logo or image you want to make application icons:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用在线工具，你需要提供一个公开的 URL、两种主要的应用程序颜色以及你想要制作应用程序图标的标志或图像：
- en: '![](img/00122.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00122.jpeg)'
- en: 'The wizard will try to parse values to supply properties, such as full name,
    short name, and description. If your site already has a web manifest file, it
    will use those properties. Don''t worry: you can supply or change any value in
    the online form, as well as specify display orientation and language, as shown
    in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 向导将尝试解析值以提供属性，例如全名、简称和描述。如果你的网站已经有一个web清单文件，它将使用那些属性。不用担心：你可以在在线表单中提供或更改任何值，以及指定显示方向和语言，如下面的截图所示：
- en: '![](img/00123.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00123.jpeg)'
- en: 'The next step in the PWABuilder wizard is to generate a set of application
    icons, and there are over 100 at the time of writing this book. You can either
    supply a URL to a public image or upload a base image. The image generator will
    create a set of images to meet the criteria of each major platform: iOS, Android,
    and Windows. It also covers Chrome and FireFox requirements.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: PWABuilder向导的下一步是生成一组应用程序图标，在撰写本书时，有超过100个图标可供选择。您可以选择一个公开图像的URL或上传一个基本图像。图像生成器将创建一组图像，以满足每个主要平台（iOS、Android和Windows）的准则。它还涵盖了Chrome和Firefox的要求。
- en: 'My favorite feature is how it includes proper references for each image in
    the generated web manifest file. I can''t emphasize how much time this saves and
    how it eliminates potential errors. The fact that the service creates a complete
    set of images also means that you won''t miss an important icon size that could
    keep your PWA from qualifying as a progressive web app on different platforms.
    Check out the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我最喜欢的功能是它包括在生成的web清单文件中对每个图像的正确引用。我无法强调这节省了多少时间以及它如何消除潜在的错误。服务创建完整图像集的事实也意味着您不会错过可能使您的PWA在不同平台上无法作为渐进式Web应用程序的重要图标大小。查看以下截图：
- en: '![](img/00124.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图片1](img/00124.jpeg)'
- en: 'When you click the Input Image input field, you are greeted with a form so
    that you can upload an image. You can choose a file on your hard drive:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击“输入图像”输入字段时，您会看到一个表单，以便您可以上传图像。您可以从您的硬盘驱动器中选择一个文件：
- en: '![](img/00125.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片3](img/00125.jpeg)'
- en: 'When the wizard completes, the product is a package containing all the icons
    and a manifest file with the icons referenced:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当向导完成时，产品是一个包含所有图标和一个包含图标引用的清单文件的包：
- en: '![](img/00126.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片4](img/00126.jpeg)'
- en: Building a service worker
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建服务工作者
- en: After uploading a source image to make the application icons, the service worker
    step displays. Here, you are given a selection of premade service workers. These
    are all basic service workers that can work with most sites so that you can start
    the progressive web application journey.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在上传源图像以制作应用程序图标后，服务工作者步骤会显示。在这里，您可以选择预制的服务工作者。这些都是基本的服务工作者，可以与大多数网站一起工作，以便您开始渐进式Web应用的旅程。
- en: 'There are five starter service worker options:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有五种初始服务工作者选项：
- en: '**Offline page**: Initializes the service worker cache with an offline fallback
    page'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**离线页面**：使用离线回退页面初始化服务工作者缓存。'
- en: '**Offline copy of pages**: As the user visits pages on your site, they are
    cached, making return visits fast and offline capable'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面离线副本**：当用户访问您的网站上的页面时，它们会被缓存，这使得返回访问变得快速且支持离线。'
- en: Offline copy with a backup of offline pages
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 离线副本与离线页面的备份
- en: '**Cache-First Network**: Checks the cache for a valid response before hitting
    the network, which adds network responses to the cache'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存优先网络**：在触网之前检查缓存以获取有效响应，这会将网络响应添加到缓存中。'
- en: '**Advanced Pre-Caching**: Currently under development, but designed to give
    you more control over site assets that are cached when the service worker is installed'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级预缓存**：目前处于开发中，但旨在让您对服务工作者安装时缓存的网站资产有更多控制。'
- en: Downloading your site's PWA assets
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载您网站的PWA资产
- en: After selecting a starter service worker, PWABuilder provides links to download
    packaged versions of your PWA and native apps. You have the option to download
    just the progressive web app assets, a pre-packaged Windows appx file, and native
    apps for the Google Play and iOS App stores.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择初始服务工作者后，PWABuilder提供下载您的PWA和原生应用程序打包版本的链接。您可以选择仅下载渐进式Web应用程序资产、预打包的Windows
    appx文件以及Google Play和iOS应用商店的原生应用程序。
- en: In most cases, the native app versions won't be needed, but can be handy just
    in case you need access to platform-specific APIs and integrations.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，不需要原生应用程序版本，但如果有需要访问特定平台API和集成的需求，它们可能很有用。
- en: You can click the buttons corresponding to the package you need. PWABuilder
    will then generate a package, a ZIP file, containing the assets you need. The
    site also provides instructions for integrating the scaffolded code into your
    site and submitting the app store packages to the various stores.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以点击对应于您所需包的按钮。然后，PWABuilder将生成一个包含所需资产的包，一个ZIP文件。该网站还提供了将框架化代码集成到您的网站和提交应用商店包到各个商店的说明。
- en: 'This is an example of the generated web manifest file:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成的web清单文件的示例：
- en: '![](img/00127.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片2](img/00127.jpeg)'
- en: Scaffolded PWA images
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 框架化的PWA图像
- en: I think the best part to PWABuilder is how it quickly generates all the application
    icons as the web manifest file that properly references each image. It generates
    over 100 images, and I don't know about you, but I don't have the time or patience
    to create that many variations, much less add the code to my web manifest file.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为 PWABuilder 最好的部分是它如何快速生成所有应用程序图标，并正确引用每个图像的网页清单文件。它生成了超过 100 张图像，我不知道您是否也是如此，但我没有时间或耐心去创建那么多变体，更不用说将代码添加到我的网页清单文件中。
- en: This is part of the PWABuilder wizard, but you may have already created a valid
    web manifest file and a service worker and only need a collection of icons.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 PWABuilder 向导的一部分，但您可能已经创建了一个有效的网页清单文件和一个服务工作者，并且只需要一组图标。
- en: This is where you can access the image generation service directly at [https://www.pwabuilder.com/imageGenerator](https://www.pwabuilder.com/imageGenerator).
    You'll see the same form that's included in the wizard interface. The only difference
    is that once you provide the base image, you can directly click the Download button
    to get just your PWA icons and the web manifest JSON.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您可以直接访问图像生成服务的地方 [https://www.pwabuilder.com/imageGenerator](https://www.pwabuilder.com/imageGenerator)。您将看到与向导界面中包含的相同表单。唯一的区别是，一旦您提供了基础图像，您可以直接点击下载按钮以获取仅包含您的
    PWA 图标和网页清单 JSON 的文件。
- en: You are not limited to just using the online image generator. The source code
    is an open source ASP.NET project, [https://github.com/pwa-builder/App-Image-Generator](https://github.com/pwa-builder/App-Image-Generator).
    You will need to stand up a web server that's capable of servicing an ASP.NET
    site, which you could do using Docker. I don't think this version is built on
    .NET Core, which means you will need an instance of IIS on Windows.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您不仅限于使用在线图像生成器。源代码是一个开源的 ASP.NET 项目，[https://github.com/pwa-builder/App-Image-Generator](https://github.com/pwa-builder/App-Image-Generator)。您需要建立一个能够服务
    ASP.NET 网站的网络服务器，您可以使用 Docker 来实现。我认为这个版本不是基于 .NET Core，这意味着您需要在 Windows 上有一个
    IIS 实例。
- en: The tool does not modify any files in your site, so you still need to update
    your pages to register the service worker and web manifest file. You will also
    need to copy the icons, manifest, and service worker files to your site's folder.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 工具不会修改您网站上的任何文件，因此您仍然需要更新您的页面以注册服务工作者和网页清单文件。您还需要将图标、清单和服务工作者文件复制到您网站文件夹中。
- en: Running PWABuilder locally
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地运行 PWABuilder
- en: 'If your site is not public, don''t worry: you can still take advantage of PWABuilder
    by running it locally. PWABuilder is actually the second generation of PWA tools
    produced by Microsoft. In its previous life, it was called Manifold JS, and still
    uses that engine.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的网站不是公开的，请不要担心：您仍然可以通过本地运行来利用 PWABuilder。实际上，PWABuilder 是微软生产的第二代 PWA 工具。在其之前的生活中，它被称为
    Manifold JS，并且仍然使用那个引擎。
- en: Manifold is a collection of node modules, used by the PWABuilder site, that
    generate the files needed for your PWA. The Manifold JS components are available
    both on GitHub ([https://github.com/pwa-builder](https://github.com/pwa-builder))
    and npm ([https://www.npmjs.com/package/manifoldjs](https://www.npmjs.com/package/manifoldjs)).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Manifold 是一个由 PWABuilder 网站使用的节点模块集合，用于生成您 PWA 所需的文件。Manifold JS 组件可在 GitHub
    ([https://github.com/pwa-builder](https://github.com/pwa-builder)) 和 npm ([https://www.npmjs.com/package/manifoldjs](https://www.npmjs.com/package/manifoldjs))
    上找到。
- en: You can run PWABuilder directly from the command line. Since it is a node module,
    you will need Nodejs installed, and so on.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接从命令行运行 PWABuilder。由于它是一个节点模块，您需要安装 Nodejs，等等。
- en: 'I recommend installing the PWABuilder node library globally:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议全局安装 PWABuilder 节点库：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, you can execute `pwabuilder` from any command line. In the following example,
    I added a couple of options, one to specify the target directly to save the generated
    assets and another to designate what platform to generate assets:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以从任何命令行执行 `pwabuilder`。在以下示例中，我添加了一些选项，一个用于指定目标以保存生成的资产，另一个用于指定生成资产的平台：
- en: '![](img/00128.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00128.jpeg)'
- en: If you want to get even more ambitious, you can build your own node script to
    execute the PWABuilder libraries directly. You can clone the PWABuilder projects
    and examine the source code and how the command-line utility executes to see how
    you can incorporate parts of the library in your own scaffolding routines.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更加雄心勃勃，您可以构建自己的节点脚本来直接执行 PWABuilder 库。您可以克隆 PWABuilder 项目并检查源代码以及命令行实用工具的执行方式，以了解您如何将库的某些部分纳入自己的脚手架流程中。
- en: Auditing web pages using Lighthouse
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Lighthouse 审计网页
- en: Lighthouse ([https://developers.google.com/web/tools/lighthouse/](https://developers.google.com/web/tools/lighthouse/))
    is an automated tool managed by the Chrome team that can help you audit your site
    to identify problems that need attention. The tools audits more than just progressive
    web app requirements, as it checks for many best practices including performance,
    accessibility, and SEO.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Lighthouse ([https://developers.google.com/web/tools/lighthouse/](https://developers.google.com/web/tools/lighthouse/))
    是由Chrome团队管理的一个自动化工具，可以帮助您审核网站以识别需要关注的问题。该工具不仅审核渐进式Web应用的要求，还检查许多最佳实践，包括性能、无障碍性和SEO。
- en: Lighthouse is an open source project, and contributions are welcome.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Lighthouse是一个开源项目，欢迎贡献。
- en: 'As mentioned earlier in this book, Lighthouse can be executed two different
    ways:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如本书前面所述，Lighthouse可以通过两种不同的方式执行：
- en: Built-in to the Chrome Developer tools' Audit tab
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置于Chrome开发者工具的审核标签页
- en: Node Module ([https://www.npmjs.com/package/Lighthouse](https://www.npmjs.com/package/Lighthouse))
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node模块 ([https://www.npmjs.com/package/Lighthouse](https://www.npmjs.com/package/Lighthouse))
- en: The Chrome extension was the original implementation, but this is being phased
    out. Today, the extension is redundant since Lighthouse is built-in to the Developer
    tools.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome扩展是原始实现，但现在正在逐步淘汰。今天，扩展是多余的，因为Lighthouse已经内置到开发者工具中。
- en: Lighthouse will exercise a given URL in Chrome and run it through a battery
    of tests. These tests cover different scenarios emulating mobile cellular network
    and desktop versions.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Lighthouse将在Chrome中执行给定的URL，并通过一系列测试。这些测试涵盖了模拟移动蜂窝网络和桌面版本的不同场景。
- en: It runs a battery of test against the URL in these different scenarios, looking
    for potential issues. It can establish a baseline for your application's performance
    and how well it meets minimum requirements, like being a PWA.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它在这些不同场景中对URL进行一系列测试，寻找潜在问题。它可以为您应用程序的性能以及它如何满足最低要求（如成为PWA）建立基准。
- en: Lighthouse produces a score/report card, listing how a page has performed against
    the battery of tests. Over the course of a minute or so, an audit will reload
    the page several times under different conditions, with loads capturing traces
    each time. How long it took to load pages, become interactive, how well it worked
    offline, and so on are all logged.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Lighthouse生成一个分数/成绩单，列出页面在一系列测试中的表现。在一分钟左右的审计过程中，审核会根据不同条件多次重新加载页面，每次加载都会捕获跟踪信息。页面加载时间、成为交互式页面、离线工作效果等都会被记录。
- en: The primary categories the Lighthouse audits are for progressive web application
    features, web performance optimization, accessibility, and general best practices.
    Recently, the tool added an SEO audit section, but this functionality is still
    limited at this time.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Lighthouse审核的主要类别包括渐进式Web应用功能、Web性能优化、无障碍性和一般最佳实践。最近，该工具新增了SEO审核部分，但这一功能目前仍有限。
- en: 'After you run a Lighthouse audit, you will see a report card. This is an example
    of the five top level audit type scores. These scores are based on a 0-100 scale,
    with 100 being perfect. The score is comprised of a weighted score for each point
    in the audit group:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在您运行Lighthouse审核后，您将看到一份成绩单。这是五个顶级审核类型分数的示例。这些分数基于0-100的评分标准，100分是完美分数。分数由审核组中每个点的加权分数组成：
- en: '![](img/00129.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00129.jpeg)'
- en: Each one of these top-level audits runs granular tests and provides a very detailed
    report. Lighthouse can produce a report as either JSON or the default HTML. You
    can also save the data collected during a Developer tools test so that you can
    review and compare it with a later test.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 每个顶级审核都运行细粒度测试并提供非常详细的报告。Lighthouse可以生成JSON或默认HTML格式的报告。您还可以保存开发工具测试期间收集的数据，以便您可以对其进行审查和比较。
- en: 'The HTML report will automatically highlight areas you either failed on or
    need to address. It also provides helpful links to documentation that will help
    point you to a solution:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: HTML报告会自动突出显示您失败或需要解决的问题区域。它还提供了有用的链接，指向可以帮助您找到解决方案的文档：
- en: '![](img/00130.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00130.jpeg)'
- en: From time to time, I like to run Lighthouse from the Chrome Developer tools,
    just to see where I'm at in my development process. It's a quick and automated
    tool that can help me get insight into where I may have missed something mundane
    that can have a measurable impact.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 不时地，我喜欢从Chrome开发者工具中运行Lighthouse，只是为了看看我在开发过程中的位置。这是一个快速且自动化的工具，可以帮助我了解我可能遗漏了一些微不足道但可能产生可衡量影响的问题。
- en: For progressive web apps, it runs through a set of checklist items to be a full-blown
    progressive web app. Most can be automatically tested, but a few must be manually
    evaluated. The Lighthouse report list items should be manually verified.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于渐进式 Web 应用，它会通过一系列清单项来确保它是一个完整的渐进式 Web 应用。大多数都可以自动测试，但有一些必须手动评估。Lighthouse
    报告中的条目应该手动验证。
- en: The big two are obvious, HTTPS, web manifest file in a service worker, but it
    goes to a deeper level. It also looks at your performance and if you can load
    in under three seconds over a cellular connection. It does this by simulating
    slower network conditions and CPUs.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最明显的两个是 HTTPS 和在服务工作者中的 Web 清单文件，但它还深入到更深的层次。它还会检查你的性能，以及你是否可以在蜂窝连接下在 3 秒内加载。它是通过模拟更慢的网络条件和
    CPU 来做到这一点的。
- en: It also checks to make sure that you have valid icons for the different viewports
    and that you can prompt the Homescreen banner.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 它还会检查确保你有针对不同视口的有效图标，并且你可以提示主屏幕横幅。
- en: All tests are run, emulating a 3G connection and throttle down your CPU 4x from
    its default speed. This last part can obviously skew your test results from device
    to device based on the available CPU. I work on a very new i7 Surface Laptop,
    which runs much faster than a more seasoned i3 or i5 processor. You will also
    see variability as you use different virtual machines with different CPU power
    allocated.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试都会运行，模拟 3G 连接并将 CPU 速度降低到默认速度的 4 倍。这部分显然会根据可用 CPU 的不同，从设备到设备地影响你的测试结果。我在一台非常新的
    i7 Surface Laptop 上工作，它的运行速度比更成熟的 i3 或 i5 处理器要快得多。你也会看到，当你使用不同 CPU 功率的虚拟机时，会有所变化。
- en: Collectively, all these little things will help you know if your website will
    provide a good user experience or not. It's not the only way to test, but it does
    give you a good baseline that covers most of the areas that you need to audit.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些小事情加在一起，将帮助你了解你的网站是否能够提供良好的用户体验。这不是唯一的测试方法，但它确实为你提供了一个良好的基准，涵盖了你需要审计的大部分领域。
- en: Running Lighthouse from the Chrome Developer Tools
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Chrome 开发者工具运行 Lighthouse
- en: The easiest way to use Lighthouse is from the Chrome Developers Tools. By now,
    you should know how to open these tools. All desktop browsers contain Developer
    tools and they can be opened by pressing *F12* or *Ctrl* + *Shift* + *I*.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Lighthouse 最简单的方法是从 Chrome 开发者工具开始。到现在，你应该知道如何打开这些工具。所有桌面浏览器都包含开发者工具，可以通过按
    *F12* 或 *Ctrl* + *Shift* + *I* 来打开。
- en: 'Once the Developer tools are open ,you have multiple options. Lighthouse is
    one of those options. It is labeled Audits and is presented as the last native
    tab. If you are like me, you may have an extension that has parked a custom tab
    in the tools as well. They are listed after the Audits tab:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打开开发者工具，你就有多个选项。Lighthouse 就是其中之一。它被标记为 Audits，并作为最后一个原生标签呈现。如果你像我一样，你可能还有一个扩展程序在工具中放置了一个自定义标签页。它们在
    Audits 标签页之后列出：
- en: '![](img/00131.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00131.jpeg)'
- en: Initially, there is not much to the Audits tab when you open it, just the Lighthouse
    dialog.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 初始状态下，打开 Audits 标签页时并没有太多内容，只有一个 Lighthouse 对话框。
- en: 'The dialog has a list of the five current audit categories, and the Run audit
    and Cancel buttons. Each category can be toggled on or off. Pressing the Run audit
    button starts the audit process:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框列出了五个当前的审计类别，以及“运行审计”和“取消”按钮。每个类别都可以打开或关闭。按下“运行审计”按钮开始审计过程：
- en: '![](img/00132.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00132.jpeg)'
- en: During the audit process, you will see a new dialog, assuring you that the audit
    is running and sharing useful web development facts and stats to keep you entertained.
    Meanwhile, the corresponding browser tab is being exercised by Lighthouse.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在审计过程中，你会看到一个新对话框，向你保证审计正在运行，并分享有用的网页开发事实和统计数据以供娱乐。同时，相应的浏览器标签页正在由 Lighthouse
    进行测试。
- en: If you watch the browser tab, you will see it use the built-in emulation tools
    to load the target page in different virtual devices and under different network
    conditions, including offline.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你观察浏览器标签页，你会看到它使用内置的模拟工具在不同的虚拟设备和不同的网络条件下加载目标页面，包括离线状态。
- en: 'Based on how the page behaves and loads, the different tests either pass or
    fail. In the end, Lighthouse produces a report, which you can then use to evaluate
    how your page stands. Use the report to identify different aspects of the page
    and site to improve:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 根据页面行为和加载情况，不同的测试要么通过要么失败。最后，Lighthouse 会生成一个报告，你可以用它来评估你的页面表现。使用报告来识别页面和网站的各个方面，以进行改进：
- en: '![](img/00133.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00133.jpeg)'
- en: After the audit completes, you are presented with a nicely formatted report
    featuring a high-level grade in each category at the top. Below the scores, each
    category lists any failing tests or tests that you did not quite meet target numbers
    but should investigate. All tests that passed are grouped together and collapsed
    out of view but can still be viewed.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 审计完成后，您将看到一个格式良好的报告，顶部显示每个类别的总体等级。在分数下方，每个类别列出任何失败的测试或您没有完全达到目标数字但应调查的测试。所有通过测试的测试都分组在一起并折叠在视图之外，但仍然可以查看。
- en: 'Every test should have a link with more details, indicated with a separate
    Learn more link, about what was tested and hopefully guidance to help you improve
    the page, so that you can pass the test:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 每个测试都应该有一个链接，提供更多详细信息，以单独的“了解更多”链接指示测试内容，并希望提供帮助您改进页面的指导，以便您可以通过测试：
- en: '![](img/00134.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00134.jpeg)'
- en: You should also consider the hosting environment you are testing against. Some
    tests will fail on a local site because you may not have a full production scale
    web server. While the node http-server makes it easy to run a local web server,
    it does not have HTTPS and HTTP/2 by default. This makes your page fail any tests
    that are looking for these two features.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该考虑您正在测试的托管环境。由于您可能没有完整的生产规模Web服务器，一些测试将在本地站点上失败。虽然node http-server使运行本地Web服务器变得容易，但它默认不包含HTTPS和HTTP/2。这使得您的页面在寻找这两个功能的测试中失败。
- en: In these scenarios, you can safely ignore these test results due to environment
    limitations. I do advise performing additional tests once the site is deployed
    to full scale environments like development, staging, and production.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，由于环境限制，您可以安全地忽略这些测试结果。我确实建议在网站部署到开发、预发布和生产等全规模环境中后进行额外的测试。
- en: Remember, when running in the Developer tools, you should use this as an important
    triage step to ensure that your code and site updates improve the overall site's
    experience. They are not the actual experience a real user may have, because the
    site is hosted in a different environment. Also remember the conditions Lighthouse
    emulates are just that, emulated, and may not perfectly reflect a real-world device
    or network conditions.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，当在开发者工具中运行时，您应该将其视为一个重要的分类步骤，以确保您的代码和网站更新能够提升整体网站体验。它们并不是真实用户可能拥有的实际体验，因为网站托管在不同的环境中。也要记住，Lighthouse模拟的条件只是模拟，可能无法完美反映真实世界的设备或网络条件。
- en: Another big issue with the Developer tools Lighthouse implementation is that
    there is the inability to customize the audit beyond toggling major test categories.
    You cannot extend the audit with your own tests and categories.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者工具Lighthouse实现中另一个大问题是无法在切换主要测试类别之外自定义审计。您不能通过自己的测试和类别扩展审计。
- en: This is where running Lighthouse directly as a node module offers big benefits.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是直接将Lighthouse作为node模块运行提供巨大优势的地方。
- en: Running Lighthouse as a command-line utility
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Lighthouse作为命令行实用程序运行
- en: I really enjoy the ability to execute Lighthouse as a node module. The Lighthouse
    node module has a dependency on Chrome Launcher ([https://www.npmjs.com/package/chrome-launcher](https://www.npmjs.com/package/chrome-launcher)),
    which will open an instance of Chrome to execute the test.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的很喜欢将Lighthouse作为node模块执行的能力。Lighthouse node模块依赖于Chrome Launcher ([https://www.npmjs.com/package/chrome-launcher](https://www.npmjs.com/package/chrome-launcher))，这将打开一个Chrome实例以执行测试。
- en: This means the machine executing Lighthouse should have Chrome installed. The
    tool uses a full instance of Chrome because it needs to render the page and use
    the Developer tools to emulate different modes.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着执行Lighthouse的机器应该已安装Chrome。该工具使用完整的Chrome实例，因为它需要渲染页面并使用开发者工具来模拟不同的模式。
- en: 'Because Lighthouse is a node module, you need to install it using either npm
    or yarn. Like the other tools, I recommend installing it globally:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Lighthouse是一个node模块，您需要使用npm或yarn安装它。像其他工具一样，我建议全局安装：
- en: '[PRE1]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can run a full audit right from the command line by executing Lighthouse
    followed by the target URL:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接通过命令行运行完整的审计，只需执行Lighthouse后跟目标URL：
- en: '[PRE2]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This launches a new instance of Chrome and runs the test battery against the
    target URL. When completed, an HTML report file is created in the current folder.
    You can load this in a browser to review. It is the same report that's loaded
    in the Developer tools.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个新的Chrome实例，并对目标URL运行测试套件。完成后，在当前文件夹中创建一个HTML报告文件。您可以在浏览器中加载此文件进行审查。它与开发者工具中加载的报告相同。
- en: 'This is an example of an automated test report file loaded into the Lighthouse
    report viewer:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个将自动测试报告文件加载到 Lighthouse 报告查看器的示例：
- en: '![](img/00135.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00135.jpeg)'
- en: 'You can customize Lighthouse to perform the tests you need and report in the
    format you want. These are just some of the common options I use on my projects:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以自定义 Lighthouse 以执行所需的测试并以您想要的格式报告。以下是我在我项目上使用的一些常见选项：
- en: '`--config-path`: The local path to the configuration file you want to use for
    the audit.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--config-path`: 要用于审计的配置文件的本地路径。'
- en: '`--output`: The report format. Options are JSON, CSV, and HTML with HTML by
    default. You can designate more than one format.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--output`: 报告格式。选项包括 JSON、CSV 和 HTML（默认为 HTML）。您可以指定多个格式。'
- en: '`--output-path`: The location to write the report. If multiple formats are
    designated, the path is ignored, but each format is saved to the current path
    based on the target''s basename.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--output-path`: 报告的写入位置。如果指定了多个格式，路径将被忽略，但每个格式都根据目标的基本名称保存到当前路径。'
- en: '`--view`: Launches a HTML report in the browser once it is written.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--view`: 一旦写入，就在浏览器中启动 HTML 报告。'
- en: '`--block-url-patterns`: Forces the browser to ignore certain assets. This is
    good to test without third-party scripts.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--block-url-patterns`: 强制浏览器忽略某些资源。这对于测试没有第三方脚本的情况很有用。'
- en: '`--throttling-*`: Different options here to granularly control how network
    and CPU throttling is set during tests.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--throttling-*`: 在测试期间对网络和 CPU 限制的不同选项，以细粒度控制。'
- en: '`--save-assets`: Persists test assets like screenshots to disks.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--save-assets`: 将测试资源如屏幕截图持久化到磁盘。'
- en: 'In this example, a full audit is run and saved in both JSON and HTML formats:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，运行了完整的审计，并以 JSON 和 HTML 格式保存：
- en: '[PRE3]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The report is saved locally in both output formats. I like doing this because
    the HTML report is easy to read and the JSON report is easy to consume into third
    party or custom reporting solutions.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 报告以两种输出格式保存在本地。我喜欢这样做，因为 HTML 报告易于阅读，而 JSON 报告易于被第三方或自定义报告解决方案消费。
- en: The default Lighthouse audit may not cover the rules you need to monitor or
    more than you want to test. You can also create your own tests, which need to
    be included. You can customize the audit with your own configuration.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的 Lighthouse 审计可能无法覆盖您需要监控的规则或您想要测试的规则。您也可以创建自己的测试，这些测试需要被包含在内。您可以使用自己的配置来自定义审计。
- en: 'Custom configurations are written as JSON objects. This example extends the
    default configuration, but limits the tests to just the performance and progressive
    web app tests:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义配置以 JSON 对象的形式编写。以下示例扩展了默认配置，但将测试限制为仅性能和渐进式 Web 应用测试：
- en: '[PRE4]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To use the custom configuration file, you must supply the path as a command-line
    switch:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用自定义配置文件，您必须将路径作为命令行开关提供：
- en: '[PRE5]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Ultimately, you can control everything Lighthouse uses to run an audit, including
    gathers, test groups, categories, and how different passes execute.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，您可以控制 Lighthouse 用于运行审计的所有内容，包括收集、测试组、类别以及不同通过如何执行。
- en: A custom configuration file makes it very easy for you to control how Lighthouse
    is exercised against your web app without fussing with extended command-line options.
    This also makes testing very repeatable and you can include the configuration
    files in your source control to easily restore and audit how tests were executed.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义配置文件使您能够非常容易地控制 Lighthouse 如何针对您的 Web 应用进行测试，而无需烦恼于扩展命令行选项。这也使得测试非常可重复，并且您可以将配置文件包含在源控制中，以便轻松恢复和审计测试的执行情况。
- en: Lighthouse and headless testing
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lighthouse 和无头测试
- en: Recently, the Chrome team also released a tool called Puppeteer ([https://github.com/GoogleChrome/puppeteer](https://github.com/GoogleChrome/puppeteer)),
    which executes a headless instance of Chromium. This is not Chrome, but a variation
    in the code base upon which many popular applications such as Visual Studio Code
    are built.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，Chrome 团队还发布了一个名为 Puppeteer 的工具（[https://github.com/GoogleChrome/puppeteer](https://github.com/GoogleChrome/puppeteer)），它执行一个无头
    Chromium 实例。这并不是 Chrome，而是在代码库上的一个变体，许多流行的应用程序如 Visual Studio Code 都是基于这个变体构建的。
- en: A headless browser can execute a page, but not with the ability to view the
    page. Because the page is not visibly rendered, some of the tests are not run.
    You should keep this mind when executing an audit using a headless browser.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 无头浏览器可以执行页面，但不能查看页面。因为页面没有可见地渲染，所以一些测试没有运行。在执行使用无头浏览器的审计时，您应该注意这一点。
- en: The ability to exercise Lighthouse against a headless browser has opened up
    opportunities for the tool to be integrated in different tools. For example, WebPageTest,
    HTTPArchive, Calibre, and others use Lighthouse to add additional test points
    to their reports. You can follow their lead and incorporate the Lighthouse node
    module in your in-house test and auditing work flows.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 能够在无头浏览器上使用Lighthouse进行测试的能力为将工具集成到不同的工具中打开了机会。例如，WebPageTest、HTTPArchive、Calibre和其他工具使用Lighthouse向他们的报告添加额外的测试点。你可以效仿他们，在你的内部测试和审计工作流程中整合Lighthouse节点模块。
- en: Because Lighthouse can be executed from a script as a node module, you can create
    an automated test to exercise over your entire website or a sample set of URLs
    in your website. You can then audit the results and find the common area areas
    you need to address.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Lighthouse可以作为节点模块从脚本中执行，你可以创建一个自动化测试来测试你的整个网站或网站中一组样本URL。然后你可以审计结果并找到你需要解决的问题的共同区域。
- en: 'I do advise running it over more than one URL in your site because there are
    many different types of pages that compose most applications. But a word of caution:
    limit the number of pages you automate testing. Each test instance will launch
    a new instance of Chrome, which can quickly get out of hand if you try to test
    an entire site.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实建议在您网站上的多个URL上运行它，因为大多数应用程序都是由许多不同类型的页面组成的。但请注意：限制自动测试的页面数量。每个测试实例都会启动一个新的Chrome实例，如果你试图测试整个网站，这可能会迅速失控。
- en: The lightcrawler ([https://github.com/github/lightcrawler](https://github.com/github/lightcrawler))
    project is a possible tool you can use to automate testing your entire site. Lighthouse
    Cron ([https://github.com/thearegee/Lighthouse-cron](https://github.com/thearegee/lighthouse-cron))
    allows you to audit a site at scheduled and random intervals using cron jobs to
    collect scores over time. These are just a couple of examples of how Lighthouse
    and similar tools are being used to provide valuable testing and performance audits
    to make web applications better.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: lightcrawler ([https://github.com/github/lightcrawler](https://github.com/github/lightcrawler))
    项目是一个你可以用来自动化测试整个网站的潜在工具。Lighthouse Cron ([https://github.com/thearegee/Lighthouse-cron](https://github.com/thearegee/lighthouse-cron))
    允许你使用cron作业在预定和随机间隔内审计网站，以收集随时间变化的分数。这些都是Lighthouse和类似工具如何被用来提供有价值的测试和性能审计，以使Web应用程序更好的几个例子。
- en: I would also recommend running multiple test cycles to create a comparison.
    Any time I run a site or page audit, I find result variations. Sometimes, like
    any real scientific experiment, you find outliers that do not accurately reflect
    the overall experience.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我还建议运行多个测试周期以创建比较。每次我运行网站或页面审计时，我都会发现结果变化。有时，就像任何真正的科学实验一样，你会找到一些异常值，这些异常值并不能准确反映整体体验。
- en: For example, the test machine may have a high CPU background task running or
    one that consumes disk and memory I/O, causing performance issues. When testing
    against a live site, you may also encounter network issues that fall outside of
    your control.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，测试机器可能正在运行一个高CPU后台任务，或者一个消耗磁盘和内存I/O的任务，这可能导致性能问题。当对实时网站进行测试时，你也可能遇到超出你控制范围的网络问题。
- en: These can all lead to failed tests and poor audit results. When I see poor performance
    results, I will typically run 3-5 more tests to see what sort of variations I
    may have. When I consistently see a test fail or log poor results, I then work
    to improve the issue. If a failed test is consistent, the problem is my site,
    not the environment around the site.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都可能导致测试失败和审计结果不佳。当我看到性能结果不佳时，我通常会再运行3-5次测试，看看可能会有什么变化。当我持续看到测试失败或记录不良结果时，我会努力改进问题。如果一个失败的测试是持续的，那么问题是我的网站，而不是网站周围的环境。
- en: Running Lighthouse in a Node script
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Node脚本中运行Lighthouse
- en: 'Like Sonar (which will be covered in the next section) and the other node-based
    utilities, you can also use Lighthouse in your own node scripts and modules. You
    need to create references to both the `Lighthouse` and `chrome-launcher` modules:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Sonar（将在下一节中介绍）和其他基于节点的实用工具一样，你还可以在自己的Node脚本和模块中使用Lighthouse。你需要创建对`Lighthouse`和`chrome-launcher`模块的引用：
- en: '[PRE6]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Both the Chrome Launcher and Lighthouse modules return promises. You must create
    a new Chrome instance before launching Lighthouse.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome启动器和Lighthouse模块都返回承诺。在启动Lighthouse之前，您必须创建一个新的Chrome实例。
- en: 'Chrome Launcher resolves a reference to a Chrome instance. You need to pass
    the developer port number to the Lighthouse module. This is how Lighthouse communicates
    with Chrome to perform the tests:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome Launcher解析对Chrome实例的引用。您需要将开发端口号码传递给灯塔模块。这就是灯塔如何与Chrome通信以执行测试的：
- en: '[PRE7]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You should also supply your custom configuration to the Lighthouse method. You
    can leave this empty and the default audit is executed.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该将自定义配置提供给灯塔方法。您可以将其留空，并执行默认审计。
- en: When Lighthouse starts, a new instance of Chrome is opened, just like from the
    command line. You can watch your site run through all the tests.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当灯塔启动时，会打开一个新的Chrome实例，就像从命令行一样。您可以观察您的网站运行所有测试。
- en: When Lighthouse is finished, it resolves the results in the target format.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当灯塔完成时，它会以目标格式解析结果。
- en: Continuous build with Lighthouse
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用灯塔进行持续构建
- en: Another way to use Lighthouse is to embed it as part of your build and deployment
    workflow. For example, you may use a tool like **Travis**, which exercises a script
    to deploy and test applications. This way, you can make sure that the project
    passes the Lighthouse audits before deploying to a production server.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用灯塔的另一种方法是将其嵌入到您的构建和部署工作流程中。例如，您可能使用像**Travis**这样的工具，该工具执行脚本以部署和测试应用程序。这样，您可以在将项目部署到生产服务器之前确保项目通过灯塔审计。
- en: There is a problem running more modern sites requiring authentication like the
    PWA ticket application. Because Lighthouse exercises web pages using an unprimed
    environment and sometimes when storage is not available, persisted tokens may
    not be available.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 运行需要认证的现代网站（如PWA票据应用）存在问题。因为灯塔使用未初始化的环境来执行网页，有时当存储不可用时，持久令牌可能不可用。
- en: In the PWA ticket application, this means the site redirects to the login page.
    I have seen a few mentions of potential solutions to this issue, but have not
    had much success.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在PWA票据应用中，这意味着网站会重定向到登录页面。我看到了一些关于解决这个问题的潜在解决方案的提及，但并没有取得太多成功。
- en: 'Finally, one of the cool Lighthouse tools I found is Eric Bidel''s Score badges
    ([https://github.com/ebidel/Lighthouse-badge](https://github.com/ebidel/lighthouse-badge)).
    You can include the badges as part of your project''s `readme` file:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我发现的一个很酷的灯塔工具是埃里克·比德尔（Eric Bidel）的得分徽章（[https://github.com/ebidel/Lighthouse-badge](https://github.com/ebidel/lighthouse-badge)）。您可以将徽章作为项目`readme`文件的一部分包含：
- en: '![](img/00136.jpeg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00136.jpeg)'
- en: Lighthouse is a fantastic tool that can help you find and diagnose many common
    issues that will affect your overall application user experience. It provides
    valid valued insight into things like progressive web application features, web
    performance, accessibility, and feature acts. And as we've recently seen, the
    team is continually adding new test sets to Lighthouse. The SEO set is just the
    start of a new air area that Lighthouse will cover.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 灯塔是一个出色的工具，可以帮助您找到并诊断许多会影响您整体应用程序用户体验的常见问题。它对渐进式Web应用程序功能、Web性能、可访问性和功能行为等方面提供了有价值的见解。正如我们最近所看到的，团队正在不断向灯塔添加新的测试集。SEO集只是灯塔将要覆盖的新领域的一个起点。
- en: The built-in tooling gives you, the developer, or any concerned party, the ability
    to quickly test a page to see how well you meet expectations in the default categories.
    You should remember the default tests run by the Chrome tool are what the Chrome
    team considers important and they may not match exactly to your needs.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 内置工具为您，开发者或任何相关方，提供了快速测试页面以查看您在默认类别中满足预期程度的能力。您应该记住，Chrome工具执行的默认测试是Chrome团队认为重要的，它们可能并不完全符合您的需求。
- en: I do recommend starting with the default tests to benchmark your site's current
    state. The default tests are a great set of baseline tests that I personally think
    every site should use as a minimum standard.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实建议从默认测试开始，以基准测试您网站当前的状态。默认测试是一套很好的基线测试，我认为每个网站都应该将其作为最低标准使用。
- en: The ability to run Lighthouse directly using node gives you the ability to not
    only tailor tests to your requirements, but gives you the ability to customize
    and extend the test battery. You can dig into the Lighthouse documentation to
    see how to create your own tests.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 直接使用node运行灯塔的能力不仅可以让您根据需求定制测试，还让您能够自定义和扩展测试套件。您可以深入研究灯塔文档，了解如何创建自己的测试。
- en: Auditing web pages with Sonar
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sonar审计网页
- en: Similar to Lighthouse, the Microsoft Edge team has also released a new site
    linting tool called **Sonar **([https://sonarwhal.com/](https://sonarwhal.com/)).
    Like Lighthouse, it is an open source node module that serves as a testing harness
    to execute rules over a web page.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Lighthouse 类似，微软 Edge 团队也发布了一个名为 **Sonar** 的新网站代码检查工具（[https://sonarwhal.com/](https://sonarwhal.com/)）。像
    Lighthouse 一样，它是一个开源的节点模块，充当测试框架来在网页上执行规则。
- en: The two tools offer similar testing abilities, but also offer a different set
    of abilities and test batteries. Both provide a default starting point to execute
    a base set of tests on a page. Both can be customized with your own configurations
    and even extended with custom tests and reports.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个工具提供类似的测试能力，但也提供了一组不同的能力和测试套件。两者都提供了一个默认的起点来在页面上执行一组基本测试。两者都可以使用你自己的配置进行自定义，甚至可以通过自定义测试和报告进行扩展。
- en: Unlike Lighthouse, Sonar is not built into the browser developers tools. At
    least not yet, and I only say that because I could see the tool being integrated
    into Edge at some point, like Lighthouse is in Chrome.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 与灯塔（Lighthouse）不同，Sonar 并未集成到浏览器开发者工具中。至少目前还没有，我之所以这么说，是因为我可以看到这个工具可能会在某个时刻被集成到
    Edge 浏览器中，就像 Lighthouse 在 Chrome 浏览器中那样。
- en: Sonar also differs because it can execute tests in either Microsoft Edge, Chrome,
    or other testing libraries. For example, Sonar ships with a jsdom parser.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Sonar 还有所不同，因为它可以在 Microsoft Edge、Chrome 或其他测试库中执行测试。例如，Sonar 随带一个 jsdom 解析器。
- en: Using the Sonar CLI
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Sonar CLI
- en: 'Because Sonar is not part of a browser, but a node module, it needs to be executed
    either within a custom node script or by using its command-line interface. The
    CLI is the best place to start using Sonar, and like Lighthouse, you need to install
    Sonar first. Again, I recommend a global install:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Sonar 不是浏览器的一部分，而是一个节点模块，它需要在自定义节点脚本中执行或者通过使用其命令行界面（CLI）来执行。CLI 是开始使用 Sonar
    的最佳起点，就像 Lighthouse 一样，你首先需要安装 Sonar。再次强调，我推荐全局安装：
- en: '[PRE8]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Before you can run Sonar, you need to create a configuration file, `.sonarwhalrc`.
    You can do this by hand or use the command line to initialize a configuration
    file:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在你能够运行 Sonar 之前，你需要创建一个配置文件，`.sonarwhalrc`。你可以手动创建或者使用命令行来初始化配置文件：
- en: '[PRE9]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This kicks off a wizard, asking you a series of questions to initialize your
    configuration. You can choose a predefined configuration or make a custom configuration:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个向导，它会问你一系列问题以初始化你的配置。你可以选择一个预定义的配置或者创建一个自定义配置：
- en: '![](img/00137.jpeg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00137.jpeg)'
- en: 'There are two predefined configurations available at this time: `web-recommended`
    and `progressive-web-apps`. Depending on which configuration you choose, the wizard
    will install any required node dependencies. I will cover the Sonar components
    a little later:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有 `web-recommended` 和 `progressive-web-apps` 两个预定义配置可用。根据你选择的配置，向导将安装所需的任何节点依赖项。我将在稍后介绍
    Sonar 组件：
- en: '![](img/00138.jpeg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00138.jpeg)'
- en: 'This produces a started config file, extending the built-in `web-recommended`
    package:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个启动配置文件，扩展内置的 `web-recommended` 包：
- en: '[PRE10]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This contains a base configuration with a minimum set of rules, a formatter,
    and connector definition. This is what the `web-recommended` configuration file
    looks like. You can use the following code as a reference to see how to create
    your own configuration files:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这包含一个基础配置，包括最小规则集、格式化器和连接器定义。这就是 `web-recommended` 配置文件的样子。你可以使用以下代码作为参考来查看如何创建自己的配置文件：
- en: '[PRE11]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: I will demonstrate how to customize this configuration a little later.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在稍后演示如何自定义这个配置。
- en: 'You are not limited to a single configuration to extend, as you can extend
    multiple configurations, as mentioned in the following code:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 你不仅限于扩展单个配置，因为你还可以扩展多个配置，如以下代码所示：
- en: '[PRE12]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You are not limited to the built-in configurations and you don''t need to run
    the initialization wizard. You can create your own configuration file, as they
    are just JSON documents:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你不仅限于内置的配置，而且不需要运行初始化向导。你可以创建自己的配置文件，因为它们只是 JSON 文档：
- en: '[PRE13]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once Sonar has a configuration, you can execute it from the command line. Like
    Lighthouse, you just need to execute Sonar followed by a valid URL:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Sonar 有了一个配置，你就可以从命令行执行它。像 Lighthouse 一样，你只需要执行 Sonar 然后跟上一个有效的 URL：
- en: '[PRE14]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can customize the test by creating a custom configuration file. Sonar will
    look for the `.sonarwhalrc` file in the current folder.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过创建一个自定义配置文件来自定义测试。Sonar 将在当前文件夹中查找 `.sonarwhalrc` 文件。
- en: Sonar components
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sonar 组件
- en: There are five components of Sonar you need to familiarize yourself with to
    understand how the tool works.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要熟悉 Sonar 的五个组件，才能理解这个工具是如何工作的。
- en: Configurations
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置
- en: These are the `.sonarwhalrc` files I covered earlier. These are the files that
    drive a specific test or audit against your site.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这些就是我之前提到的 `.sonarwhalrc` 文件。这些文件驱动着针对您网站的特定测试或审计。
- en: Connectors
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接器
- en: 'The connector is the interface between the rules Sonar executes and the URL.
    Right now, there are three official connectors available:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 连接器是 Sonar 执行的规则与 URL 之间的接口。目前有三种官方连接器可用：
- en: '`jsdom`: A nodejs implementation of the WHATWG DOM, which means it provides
    a pretty good engine to test how the page renders.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jsdom`：WHATWG DOM 的 nodejs 实现，这意味着它提供了一个相当不错的引擎来测试页面是如何渲染的。'
- en: '`chrome`: Executes the rules by launching Chrome, using it''s debugging protocol.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chrome`：通过启动 Chrome 并使用其调试协议来执行规则。'
- en: '`edge`: Exercises the rules using Microsoft Edge. This requires Windows 10
    because Edge only works on Windows.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`edge`：使用 Microsoft Edge 来执行规则。这需要 Windows 10，因为 Edge 只在 Windows 上运行。'
- en: Formatters
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化器
- en: 'Formatters take the test results and *print* them. There are currently five
    formatters being maintained by the Sonar team:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化器将测试结果打印出来。目前有五个格式化器由 Sonar 团队维护：
- en: '`json`: Creates a JSON formatted report'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json`：创建一个 JSON 格式的报告'
- en: '`stylish`: Produces a table formatted report'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stylish`：生成一个格式化的表格报告'
- en: '`excel`: Generates the report as an Excel worksheet'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`excel`：将报告生成为一个 Excel 工作表'
- en: '`codeframe`: Produces the report in a codeframe style'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`codeframe`：以代码框架风格生成报告'
- en: '`summary`: Formats the report in a table'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`summary`：以表格格式格式化报告'
- en: My personal favorite is JSON because I can then use that as a raw data source
    to add it to a custom report or combine it with other tools like Lighthouse's
    reports to complete a full site audit.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人最喜欢 JSON，因为这样我就可以将其作为原始数据源添加到自定义报告中，或者将其与其他工具（如 Lighthouse 的报告）结合使用，以完成全面的网站审计。
- en: Parsers
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析器
- en: Rules subscribe to parsers and the events they emit to perform tests. They are
    designed to focus on specific resource types, like JavaScript and web manifest
    files.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 规则订阅解析器和它们发出的事件以执行测试。它们被设计为专注于特定的资源类型，如 JavaScript 和 web 清单文件。
- en: Rules
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规则
- en: Rules are the heart of Sonar because they are responsible for exercising the
    page to see if the desired criteria are met. There are a number of rules included
    in the default Sonar installation. Like the rest of Sonar, you are free to create
    your own rules.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 规则是 Sonar 的核心，因为它们负责对页面进行测试，以查看是否满足所需的准则。默认的 Sonar 安装中包含了许多规则。像 Sonar 的其他部分一样，您可以自由创建自己的规则。
- en: Automating site audits with the Sonar node module
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Sonar node 模块自动化网站审计
- en: The combination of being a nodejs module and the command-line interface gives
    you multiple ways to integrate Sonar as part of your build and deployment process.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 nodejs 模块和命令行界面的组合，这为您提供了多种方式将 Sonar 集成到您的构建和部署过程中。
- en: Unlike Lighthouse, there are no command-line switches because it relies on the
    configuration file. If you want to execute different configurations, you need
    to run sonarwhal from the target folder so that the desired custom configuration
    is loaded.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Lighthouse 不同，没有命令行开关，因为它依赖于配置文件。如果您想执行不同的配置，您需要从目标文件夹运行 sonarwhal，以便加载所需的自定义配置。
- en: Making complex service workers with workbox
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 workbox 创建复杂的服务工作者
- en: '**Workbox** ([https://developers.google.com/web/tools/workbox/](https://developers.google.com/web/tools/workbox/))
    is another open source project to help you create service workers. It is maintained
    by the Chrome team, but like the other projects, I have reviewed those open to
    public contributions.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**Workbox** ([https://developers.google.com/web/tools/workbox/](https://developers.google.com/web/tools/workbox/))
    是另一个开源项目，可以帮助您创建服务工作者。它由 Chrome 团队维护，但像其他项目一样，我已经审查了那些公开接受贡献的项目。'
- en: The goal of Workbox is to help scaffold complete service workers or add complex
    components to existing service workers. Workbox allows you to build on a solid
    foundation, so you can configure to meet your specific needs. It gives you control
    over how you build your service worker. You can manually add features to existing
    service workers and tooling to scaffold a service worker from scratch.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Workbox 的目标是帮助构建完整的服务工作者或向现有服务工作者添加复杂组件。Workbox 允许您在稳固的基础上构建，因此您可以配置以满足您的特定需求。它让您能够控制如何构建服务工作者。您可以手动向现有服务工作者添加功能，并使用工具从零开始构建服务工作者。
- en: A properly configured service worker uses a combination of appropriate caching
    strategies. The key part of that sentence is a *properly configured service worker*,
    which is, as you should know by now, not simple.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 正确配置的服务工作者使用一系列适当的缓存策略。这句话的关键是“正确配置的服务工作者”，正如您现在应该知道的，这并不简单。
- en: 'Workbox is a tool to scaffold the caching components in your service worker.
    The tool focuses on providing boilerplate code to help with the following service
    worker areas:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Workbox是一个用于在您的服务工作者中构建缓存组件的工具。该工具专注于提供样板代码，以帮助以下服务工作者区域：
- en: Precaching
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预缓存
- en: Runtime caching
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行时缓存
- en: Strategies
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略
- en: Request routing
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求路由
- en: Background sync
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景同步
- en: Helpful debugging
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有用的调试
- en: Workbox's history is rooted in a pair of now deprecated projects, `sw_precache`
    and `sw_toolbox. sw_precache`, which are managed precaching assets and `sw_toolbox`
    handled dynamic caching. Workbox focuses on managing all caching and invalidation
    strategies.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Workbox的历史起源于一对现在已弃用的项目，`sw_precache`和`sw_toolbox`。`sw_precache`管理预缓存资源，而`sw_toolbox`处理动态缓存。Workbox专注于管理所有缓存和失效策略。
- en: At the time of writing this book, Workbox is currently at version 3.2 and has
    come a long way in the past 18 months. Its strength is its ability to abstract
    complex code away from you, the developer. Instead, you can focus on configuration
    and in some cases, customization.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，Workbox目前处于3.2版本，在过去18个月里取得了长足的进步。它的优势在于能够将复杂的代码抽象化，从而让您，开发者，可以专注于配置，在某些情况下，还可以进行定制。
- en: For the rest of this chapter, I will focus on updating the PWA ticket application
    to replace most of the code covered in [Chapter 8](part0174.html#55U1S0-f12cdcca08b54960b3d271452dc7667d), *Applying
    Advanced Service Worker Cache Strategies*, with Workbox. I created a separate
    branch in the source repository called workbox.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分，我将专注于更新PWA票据应用程序，用Workbox替换[第8章](part0174.html#55U1S0-f12cdcca08b54960b3d271452dc7667d)中涵盖的大部分代码，*应用高级服务工作者缓存策略*。我在源代码库中创建了一个名为workbox的单独分支。
- en: Installing workbox
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装workbox
- en: 'Workbox is a collection of library and node modules. To get the full breadth
    of the tool, you need to install the node modules globally and clone the GitHub
    repository. Cloning the library is not required, but I recommend it so that you
    can study how the library is structured:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Workbox是一个库和node模块的集合。要获得工具的全貌，您需要全局安装node模块并克隆GitHub仓库。克隆库不是必需的，但我建议您这样做，以便您可以研究库的结构：
- en: '[PRE15]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The Workbox node modules include command-line interfaces to help you scaffold
    your service worker and Workbox components. I will cover how to use the CLI as
    I explain the different parts of the tool.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Workbox的node模块包括命令行界面，可以帮助您构建服务工作者和Workbox组件。我将在解释工具的不同部分时介绍如何使用CLI。
- en: 'The first step you need to take after installing the CLI is to run the Workbox
    wizard:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 安装CLI后的第一步是运行Workbox向导：
- en: '[PRE16]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will start a series of questions about your application:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一系列关于您应用程序的问题：
- en: '![](img/00139.jpeg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00139.jpeg)'
- en: 'This will create a configuration file that the `workbox-cli` tool can use during
    additional steps. This is what it generates when run and choosing the default
    options for the PWA ticket app:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个配置文件，`workbox-cli`工具可以在后续步骤中使用。这是在运行时选择默认选项为PWA票据应用程序生成的：
- en: '[PRE17]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The CLI commands use the settings in the configuration file to find all the
    files matching the `globPatterns` and creates an entry in the precache array.
    I will cover the precache list format in the next section:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: CLI命令使用配置文件中的设置来查找所有匹配`globPatterns`的文件，并在预缓存数组中创建一个条目。我将在下一节中介绍预缓存列表格式：
- en: '![](img/00140.jpeg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00140.jpeg)'
- en: I don't advise precaching 600 files and 11 MB like this example demonstrates.
    Instead, you should customize the configuration to trim the list to a proper amount.
    In this case, the PWA tickets app has all the ticket barcodes generated as part
    of the build process, so there is data to develop against.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我不建议像这个例子那样预先缓存600个文件和11 MB。相反，你应该自定义配置以将列表裁剪到适当的数量。在这种情况下，PWA票据应用在构建过程中生成了所有票据条形码，因此有数据可以开发。
- en: I'll circle back around to show you how to customize the configuration file
    to maximize your Workbox service worker experience. The configuration file and
    the workbox-cli commands to compose your service worker are key to using the library.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我会回来展示如何自定义配置文件以最大化您的Workbox服务工作者体验。配置文件和workbox-cli命令是构建服务工作者的关键，也是使用该库的关键。
- en: You are free to use the Workbox library any way you see fit. The configuration
    is for the command-line tools. If you are not familiar with the different nuances
    to how Workbox works, then I suggest starting with the wizard first.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以自由地以任何您认为合适的方式使用 Workbox 库。配置是为命令行工具准备的。如果您不熟悉 Workbox 的工作方式的不同细微差别，那么我建议您首先从向导开始。
- en: Once you have mastered or at least feel very comfortable with how the Workbox
    library works, you can start integrating it by hand. It all starts with importing
    the library to your service worker.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您掌握了 Workbox 库的工作方式，或者至少感到非常舒适，您就可以开始手动集成它。一切从将库导入到您的服务工作者开始。
- en: 'In previous chapters, I demonstrated how you can use `importScripts` to reference
    additional scripts within your service worker. You will need to reference the
    workbox library using `importScripts`:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我演示了如何使用 `importScripts` 在您的服务工作者中引用额外的脚本。您需要使用 `importScripts` 引用 workbox
    库：
- en: '[PRE18]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This example shows how I replaced some of the supporting libraries in the PWA
    tickets app with a reference to the CDN hosted Workbox script. The library is
    hosted in the Google Cloud CDN.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子展示了我是如何将 PWA 票务应用中的一些支持库替换为对 CDN 托管的 Workbox 脚本的引用。该库托管在 Google Cloud CDN
    上。
- en: You can also use the `workbox-cli copyLibrary` command to copy the library to
    your site. The library is not a single file, but a collection of many files containing
    different JavaScript classes. These files are all copied to the target directory.
    I used the `/sw` folder in the PWA tickets app.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `workbox-cli copyLibrary` 命令将库复制到您的网站上。该库不是一个单独的文件，而是一组包含不同 JavaScript
    类的多个文件。这些文件都被复制到目标目录中。我在 PWA 票务应用中使用了 `/sw` 文件夹。
- en: 'A folder with the current Workbox version number is created within the target
    folder. To add a reference to the library, you need to reference the `workbox-sw.js`
    file:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在目标文件夹内创建了一个包含当前 Workbox 版本号的文件夹。要添加对库的引用，您需要引用 `workbox-sw.js` 文件：
- en: '[PRE19]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In previous Workbox versions, the entire library was loaded, which is a lot
    of code. This has been improved, so that now only the files needed by your service
    worker are loaded, reducing the payload and required storage. The 3.2 version
    I am using for this example has 23 different files or classes.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的 Workbox 版本中，整个库都被加载，这有很多代码。现在已经得到了改进，现在只加载您服务工作者所需的文件，减少了负载和所需的存储。我在这例子中使用的
    3.2 版本有 23 个不同的文件或类。
- en: If you look in the folder that's created by the `copyFiles` method, you will
    see more. There are two versions for each class, production and debug. There are
    also source map files as well. I will show you how to toggle which versions are
    used as well as how to tell Workbox how to find the local modules a little later.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看 `copyFiles` 方法创建的文件夹，您会发现更多内容。每个类都有两个版本，分别是生产版和调试版。还有源映射文件。我稍后会向您展示如何切换使用的版本，以及如何告诉
    Workbox 如何查找本地模块。
- en: The CLI tool is a great way to familiarize yourself with using Workbox to scaffold
    your service worker, but it is really just a library. In the next section, I will
    review how the library is structured and get you started with how to use Workbox
    in your service workers to maximize your experience.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 工具是熟悉使用 Workbox 构建服务工作者的一种好方法，但它实际上只是一个库。在下一节中，我将回顾库的结构，并指导您如何在使用服务工作者时使用
    Workbox 来最大化您的体验。
- en: Workbox structure
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Workbox 结构
- en: 'When you import the Workbox library, you are importing the root level module.
    The module loads additional components belonging to the workbox namespace, such
    as:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 当您导入 Workbox 库时，您正在导入根级别模块。该模块加载属于 workbox 命名空间的其他组件，例如：
- en: '`workbox`'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workbox`'
- en: '`workbox.core`'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workbox.core`'
- en: '`workbox.precaching`'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workbox.precaching`'
- en: '`workbox.routing`'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workbox.routing`'
- en: '`workbox.strategies`'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workbox.strategies`'
- en: '`` `workbox.expiration` ``'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `workbox.expiration` ``'
- en: '`workbox.backgroundSync`'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workbox.backgroundSync`'
- en: '`workbox.googleAnalytics`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workbox.googleAnalytics`'
- en: '`workbox.cacheableResponse`'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workbox.cacheableResponse`'
- en: '`workbox.broadcastUpdate`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workbox.broadcastUpdate`'
- en: '`workbox.rangeRequest`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workbox.rangeRequest`'
- en: '`workbox.streams`'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workbox.streams`'
- en: Each library has its own API. Some are higher level and others work within or
    even extend others. Routing uses the strategies classes, which in turn can be
    extended through plugins. The Workbox libraries can handle most scenarios out
    of the box, but are configurable and extensible to allow you to customize them
    as needed.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 每个库都有自己的 API。有些是高级别的，而有些在或甚至扩展了其他库。路由使用策略类，而这些类可以通过插件进行扩展。Workbox 库可以处理大多数场景，但它们是可配置和可扩展的，允许您根据需要自定义它们。
- en: You are not limited to the modules included in the library. You can create your
    own components and add even more value to Workbox's functionality. You can also
    use their modules as references to build your own custom solutions.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 您不仅限于库中包含的模块。您可以创建自己的组件，并为 Workbox 的功能添加更多价值。您还可以使用它们的模块作为参考来构建自己的定制解决方案。
- en: Service worker setup
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务工作者设置
- en: 'By default, Workbox uses a debug version of the library with extra logging
    capabilities. You can turn this off and use the production version by setting
    the debug flag to false in the `setConfig` method. The production version is more
    lightweight, which means you won''t be as much of a burden on your customer''s
    data plans. The production code is minified and has heavier logging capabilities
    removed:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Workbox 使用具有额外日志记录功能的库的调试版本。您可以通过在 `setConfig` 方法中将调试标志设置为 false 来关闭此功能，并使用生产版本。生产版本更轻量级，这意味着您不会对客户的流量计划造成太大负担。生产代码已压缩，并移除了更重的日志记录功能：
- en: '[PRE20]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: By default, Workbox loads modules from the CDN. If you are hosting Workbox on
    your server, then you need to configure Workbox to load modules from your server.
    This requires using the `modulePathPrefix` in the configuration object.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Workbox 从 CDN 加载模块。如果您在自己的服务器上托管 Workbox，那么您需要配置 Workbox 从您的服务器加载模块。这需要使用配置对象中的
    `modulePathPrefix`。
- en: 'To configure Workbox to use a local production version, the `setConfig` call
    would look like:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置 Workbox 使用本地生产版本，`setConfig` 调用将如下所示：
- en: '[PRE21]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can let Workbox manage everything about your service worker, including
    life cycle events. If you want your service worker to immediately become active,
    you should do this for the `skipWaiting` (in [Chapter 5](part0114.html#3CN040-f12cdcca08b54960b3d271452dc7667d),
    *The Service Worker Life Cycle*) and `clientsClaim` methods:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以让 Workbox 管理关于您的服务工作者的一切，包括生命周期事件。如果您希望服务工作者立即变为活动状态，您应该对 `skipWaiting`（在[第
    5 章](part0114.html#3CN040-f12cdcca08b54960b3d271452dc7667d)，*服务工作者生命周期*) 和 `clientsClaim`
    方法执行此操作：
- en: '[PRE22]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you are integrating Workbox components in your service worker and are not
    outsourcing all life cycle management to Workbox, then you can still manage this
    within the install and active events, as you learned earlier in this book.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在服务工作者中集成 Workbox 组件，并且没有将所有生命周期管理外包给 Workbox，那么您仍然可以在安装和活动事件中管理这些，就像您在本书的早期部分学到的那样。
- en: Pre-caching with Workbox
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Workbox 进行预缓存
- en: Earlier in this book, I covered the concept of pre-caching assets within the
    install event. The standard pattern used is to create a list of URLs to cache
    and pass those to the `cache.addAll` method. This is great when your application
    is very stable and rarely changes assets. But what if you only need to update
    a handful of the pre-cached responses?
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的早期部分，我介绍了在安装事件中预缓存资源的概念。使用的标准模式是创建一个要缓存的 URL 列表，并将其传递给 `cache.addAll` 方法。当您的应用程序非常稳定且很少更改资源时，这很棒。但如果你只需要更新少量预缓存响应怎么办？
- en: Instead of using the `cache.addAll` method, you need to create more sophisticated
    routines to check revisions against cached assets and perform updates.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用 `cache.addAll` 方法不同，您需要创建更复杂的程序来检查修订版本与缓存资源之间的差异，并执行更新。
- en: This is where the Workbox precaching module is helpful. It abstracts the complex
    logic required to manage your pre-cached assets. You can still supply a simple
    array of URLs, as I have demonstrated in previous chapters, and it will cache
    those. But you have the option of also including a corresponding hash or revision
    value Workbox which you can use to track the asset.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Workbox 预缓存模块发挥作用的地方。它抽象了管理您预缓存资源所需的复杂逻辑。您仍然可以提供简单的 URL 数组，就像我在前面的章节中演示的那样，并且它会缓存这些资源。但您还有选择包括相应的哈希或修订值，Workbox
    可以使用这些值来跟踪资源。
- en: 'The `workbox.precaching.precahceAndRoute` method accepts an array which can
    contain strings, objects, or a combination of both. In this example, I have just
    copied the PWA tickets pre-cache list into the method:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`workbox.precaching.precacheAndRoute` 方法接受一个数组，该数组可以包含字符串、对象或两者的组合。在这个例子中，我只是将
    PWA 票据预缓存列表复制到了该方法中：'
- en: '[PRE23]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Workbox maintains an index of cached responses with extra meta data in `IndexedDB`.
    It can only use this to update precached assets when needed. The change you need
    to make is converting your pre-cache list from just strings to objects containing
    the URL and a revision value.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Workbox 在 `IndexedDB` 中维护一个包含额外元数据的缓存响应索引。它只能在需要时使用此索引来更新预缓存资源。您需要做出的更改是将您的预缓存列表从仅字符串转换为包含
    URL 和修订值的对象。
- en: 'Here, I have a modified the version of the list, showing just a few of the
    entries:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我已经修改了列表的版本，只显示其中的一些条目：
- en: '[PRE24]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The most common way to generate a revision value is to calculate the file's
    hash. I demonstrated how to generate file hashes in [Chapter 8](part0174.html#55U1S0-f12cdcca08b54960b3d271452dc7667d),
    *Applying Advanced Service Worker Cache Strategies*. You can leverage this routine
    as part of your build process or you can leverage the Workbox CLI to help.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 生成修订值最常见的方法是计算文件的哈希值。我在[第 8 章](part0174.html#55U1S0-f12cdcca08b54960b3d271452dc7667d)，“应用高级服务工作者缓存策略”中演示了如何生成文件哈希值。你可以将此例程作为构建过程的一部分，或者利用
    Workbox CLI 来帮助。
- en: 'When you run the Workbox CLI wizard, it uses the glob patterns to identify
    your site''s assets. It creates a list of files to pre-cache with a hash value
    assigned to the corresponding revision values. You have two options: let the wizard
    scaffold your entire service worker, or have it inject the precaching code into
    an existing service worker.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行 Workbox CLI 向导时，它使用全局模式来识别你的网站资产。它创建一个带有分配给相应修订值的哈希值的预缓存文件列表。你有两个选择：让向导构建整个服务工作者，或者让它将预缓存代码注入现有的服务工作者中。
- en: 'The `injectManifest` functionality allows you to inject pre-caching code using
    the Workbox infrastructure. This is done using the CLI and the `injectManifest`
    command. You need to supply the path to the configuration script:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`injectManifest` 功能允许你使用 Workbox 基础设施注入预缓存代码。这是通过 CLI 和 `injectManifest` 命令完成的。你需要提供配置脚本的路径：'
- en: '[PRE25]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The CLI tool looks for the following to replace with a call to `preCacheAndRoute`:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 工具查找以下内容以替换为对 `preCacheAndRoute` 的调用：
- en: '[PRE26]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This method allows you to maintain a source service worker you can modify as
    part of your build process. It also allows you to lean on the wizard to create
    the file hashes for you.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法允许你在构建过程中修改源服务工作者。它还允许你依赖向导为你创建文件哈希值。
- en: If you are using a file naming convention that includes a hash or revision value,
    you can continue to do this without supplying the hash to Workbox. For these scenarios,
    you can just supply the string reference.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用包含哈希或修订值的文件命名约定，你可以继续这样做，无需向 Workbox 提供哈希值。对于这些场景，你只需提供字符串引用即可。
- en: Some files cannot use revision values in their file names, like the path to
    any HTML. Changing the URL changes the address, which means you either need to
    configure complex 301 redirect rules or worse, break links to assets.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 一些文件不能在文件名中使用修订值，例如任何 HTML 的路径。更改 URL 会更改地址，这意味着你可能需要配置复杂的 301 重定向规则，或者更糟糕的是，断开资产链接。
- en: 'In this example, the `precacheAndRoute` method is passed an array of both strings,
    URLs with revision values built into the names, and objects for the HTML files
    without a revisioned name:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`precacheAndRoute` 方法接收一个包含字符串、带有修订值嵌入名称的 URL 以及不带修订名称的 HTML 文件对象的数组：
- en: '[PRE27]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can build your list and call the `preCacheAndRoute` method, as I have shown,
    but you can also break the precache list into logical groups so that you can supply
    those individually using the `workbox.precaching.precache` method. After you have
    supplied all the precache references, you must call the `addRoute` method to complete
    the process:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以构建你的列表并调用 `preCacheAndRoute` 方法，就像我展示的那样，但你也可以将预缓存列表分解成逻辑组，这样你可以使用 `workbox.precaching.precache`
    方法单独提供这些组。在你提供了所有预缓存引用之后，你必须调用 `addRoute` 方法来完成此过程：
- en: '[PRE28]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If you are using the CLI to generate a list of files and hash values to pre-cache,
    you need to trim or limit the files it includes in the list. For example, the
    PWA tickets application automatically creates hashed names for style sheets and
    scripts, but not the templates and HTML assets.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 CLI 生成预缓存文件和哈希值的列表，你需要修剪或限制它包含在列表中的文件。例如，PWA 票务应用程序自动为样式表和脚本创建哈希名称，但不为模板和
    HTML 资产创建。
- en: 'A simple modification of the site''s Workbox configuration file removes the
    css and js files from the automated process. Just remove those extensions from
    the `globPatterns` regular expression:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 简单修改网站的 Workbox 配置文件可以移除从自动化过程中删除的 css 和 js 文件。只需从 `globPatterns` 正则表达式移除这些扩展名即可：
- en: '[PRE29]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Also note that I added a `globIgnores` property to the config as well. This
    tells the wizard to ignore any files matching these patterns. I know that the
    QR codes are generated by ticket and the venue images should only be loaded as
    needed. I also added a few additional patterns to the ignore list. Now, those
    assets are not pre-cached, and instead of precaching over 11 MB of assets, the
    service worker will now pre-cache 886 KB in 39 files:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 还请注意，我在配置中添加了 `globIgnores` 属性。这告诉向导忽略任何匹配这些模式的文件。我知道二维码是由票据生成的，场馆图片应该按需加载。我还添加了一些额外的模式到忽略列表中。现在，这些资源不会进行预缓存，而不是预缓存超过
    11 MB 的资源，服务工作者现在将在 39 个文件中预缓存 886 KB：
- en: '![](img/00141.jpeg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00141.jpeg)'
- en: 'Workbox ships with three ways you can use it to generate the revision values:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Workbox 提供了三种方式供你使用来生成修订值：
- en: '`workbox-build`: Can be included in a task runner like grunt, gulp, or npm
    script'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workbox-build`：可以包含在任务运行器（如 grunt、gulp 或 npm 脚本）中'
- en: '`workbox-cli`: Can generate a list and add it to a scaffolded service worker'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workbox-cli`：可以生成列表并将其添加到脚手架（scaffolded）服务工作者中'
- en: '`workbox-webpack-plugin`: For webpack users'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workbox-webpack-plugin`：适用于 webpack 用户'
- en: You are not limited to the revision values the Workbox tools generate, and you
    can generate them as part of your own build process. The revision value just needs
    to be unique for each version of the file so that the Workbox service worker libraries
    can check to see if it needs to update the resource.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 你不受 Workbox 工具生成的修订值（revision values）的限制，你可以在自己的构建过程中生成它们。修订值只需对每个文件版本唯一，以便
    Workbox 服务工作者库可以检查是否需要更新资源。
- en: Workbox can manipulate requests to match variations to cached versions. For
    example, often, marketing tags are added in the `QueryString` and vary for many
    reasons. Workbox can be configured to ignore `QueryString` patterns to avoid duplicate
    content caching.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Workbox 可以操纵请求以匹配缓存的版本。例如，营销标签通常添加在 `QueryString` 中，并且由于许多原因而变化。Workbox 可以配置为忽略
    `QueryString` 模式以避免重复内容缓存。
- en: 'These are the common variation scenarios Workbox can be configured to optimize:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 Workbox 可以配置以优化的常见变化场景：
- en: '**queryStrings and URL parameters**'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询字符串和 URL 参数**'
- en: '**Default documents**: `index.html` and `default.html`'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认文档**：`index.html` 和 `default.html`'
- en: '**Cean URLs**: Automatically appending `.html` to extension-less URLs'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清洁 URL**：自动将 `.html` 添加到无扩展名的 URL 后面'
- en: '**Custom manipulations**: An opportunity for you to define a callback method
    to return an array of possible matches'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义操作**：这是一个机会，让你定义一个回调方法来返回可能的匹配数组'
- en: This requires using the `precaching.PrecacheController` object. To do so, you
    need to create a new instance of the controller and use the `addToCacheList` method.
    This method consumes the same array(s) used with the precaching methods.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要使用 `precaching.PrecacheController` 对象。为此，你需要创建控制器的新实例并使用 `addToCacheList`
    方法。此方法消耗与预缓存方法相同的数组（s）。
- en: 'The difference is that you must manage the service worker install, activate,
    and fetch events manually:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 差别在于你必须手动管理服务工作者（service worker）的安装、激活和获取事件：
- en: '[PRE30]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Inside the service worker event install and activate handlers, you need to call
    the `precacheController` `install` and `cleanup` methods.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务工作者事件安装和激活处理程序中，你需要调用 `precacheController` 的 `install` 和 `cleanup` 方法。
- en: Pre-caching is just one of Workbox's strengths. Its pre-caching system solves
    a common issue encountered with pre-caching, and that is how to keep the cached
    assets up to date without flushing the entire cache and reloading. Now, you can
    update the service worker and it will only update changed assets, a big win.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 预缓存（Pre-caching）只是 Workbox 的众多优势之一。它的预缓存系统解决了预缓存中常见的常见问题，那就是如何在不清空整个缓存和重新加载的情况下保持缓存的资源更新。现在，你可以更新服务工作者，它只会更新已更改的资源，这是一个巨大的优势。
- en: The pre-caching system is also highly configurable and customizable. Even though
    Workbox performs a lot of work behind abstractions, you don't need to feel like
    you lost control.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 预缓存系统也是高度可配置和可定制的。尽管 Workbox 在抽象背后执行了大量工作，但你不需要感到失去了控制。
- en: Dynamic routes with Workbox
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Workbox 的动态路由
- en: Up to this point, the Workbox section has focused on scaffolding, pre-caching,
    and configuration concerns. But as you should know by this point, the complexity
    of a service worker grows, managing dynamic requests or any request that does
    not have a pre-cached response.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Workbox 部分已经关注了脚手架（scaffolding）、预缓存（pre-caching）和配置问题。但正如你应该知道的，服务工作者（service
    worker）的复杂性在增长，管理动态请求或任何没有预缓存响应的请求。
- en: This is where Workbox really flexes its muscles.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是 Workbox 真正发挥其肌肉力量的地方。
- en: 'Dynamic routes, like the PWA tickets event pages, need to have custom caching
    logic applied to them. This is where the `workbox.routing` object comes into play.
    For each dynamic route, you need to register what the route is and a handler using
    the `registerRoute` method. Its signature looks like this:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 动态路由，如PWA票务事件页面，需要应用自定义的缓存逻辑。这就是`workbox.routing`对象发挥作用的地方。对于每个动态路由，你需要使用`registerRoute`方法注册路由和处理程序。它的签名如下：
- en: '[PRE31]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The method requires a match and handler callback method. Each one of these callback
    methods is supplied a URL and event (`FetchEvent`) object. The callback methods
    use these parameters to determine what to do.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法需要一个匹配和处理回调方法。每个回调方法都提供了一个URL和事件（`FetchEvent`）对象。回调方法使用这些参数来确定要执行的操作。
- en: 'The callback signatures should look something like this:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 回调签名可能看起来像这样：
- en: '[PRE32]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The match callback should evaluate the request and return back a truthy value,
    indicating if the request matches the pattern or not:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配回调应该评估请求并返回一个布尔值，指示请求是否与模式匹配：
- en: '[PRE33]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You can also supply a regular expression object (`RegEx`). This gives you the
    flexibility to assign a route handler to multiple, related assets at the same
    time. This is the most common way you will use Workbox routing.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以提供一个正则表达式对象（`RegEx`）。这为你提供了同时将路由处理器分配给多个相关资源的灵活性。这是你使用Workbox路由最常见的方式。
- en: The handler callback is free to apply any caching strategy needed. Again, the
    method should use the URL and event objects to perform these actions, just like
    you learned in previous chapters.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器回调可以自由地应用所需的任何缓存策略。再次强调，该方法应使用URL和事件对象来执行这些操作，就像你在前面的章节中学到的那样。
- en: 'This example shows how you might integrate the `fetchAndRenderResponseCache`
    functionality demonstrated in [Chapter 8](part0174.html#55U1S0-f12cdcca08b54960b3d271452dc7667d),
    *Applying Advanced Service Worker Cache Strategies*:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子展示了你如何将[第8章](part0174.html#55U1S0-f12cdcca08b54960b3d271452dc7667d)中演示的`fetchAndRenderResponseCache`功能集成进来，*应用高级Service
    Worker缓存策略*：
- en: '[PRE34]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In most cases, you won't need to create your own custom callback methods because
    Workbox has strategy modules for most common scenarios.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，你不需要创建自己的自定义回调方法，因为Workbox为大多数常见场景提供了策略模块。
- en: 'You can also define a default handler for any route that may not have an explicit
    handler registered:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以为任何可能没有显式注册处理程序的路由定义一个默认处理程序：
- en: '[PRE35]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Notice how I used one of the caching strategies as the default, `cacheFirst`?
    This should help us segway to the next step in dynamic routes, using caching strategies.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我如何将其中一个缓存策略设置为默认值，`cacheFirst`？这应该有助于我们过渡到动态路由的下一步，即使用缓存策略。
- en: 'You should probably have a handler any time there is an exception retrieving
    a response. Workbox can do this with the `routing.setCacheHandler` method:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 当检索响应出现异常时，你可能需要有一个处理程序。Workbox可以使用`routing.setCacheHandler`方法来完成此操作：
- en: '[PRE36]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Caching strategies
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存策略
- en: 'Workbox has the five most common caching strategies built into the library:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: Workbox将五种最常见的缓存策略内置到库中：
- en: '`Stale-While-Revalidate`'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Stale-While-Revalidate`'
- en: '`Cache-First`'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cache-First`'
- en: '`Network-First`'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Network-First`'
- en: '`Network-Only`'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Network-Only`'
- en: '`Cache-Only`'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cache-Only`'
- en: Each one of these strategies is available as a method in the `workbox.strategies`
    namespace. You can use these strategies without any custom configuration, but
    as you have seen, everything in Workbox of highly configurable.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 这些策略中的每一个都在`workbox.strategies`命名空间中作为方法提供。你可以使用这些策略而不需要任何自定义配置，但正如你所看到的，Workbox中的所有内容都是高度可配置的。
- en: The best part is that these strategy methods return a reference to a properly
    configured route response handler.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的部分是，这些策略方法返回一个指向正确配置的路由响应处理器的引用。
- en: 'If you want to use any of these strategies with your own fetch handler, feel
    free. Create a new instance of the desired strategy. Then, use the `event.respondWith`
    method, suppling the strategy''s handle method. You just need to supply the `fetch`
    `event` object to the handle method:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要使用这些策略中的任何一个与你的自定义fetch处理器一起使用，请随意。创建所需策略的新实例。然后，使用`event.respondWith`方法，提供策略的handle方法。你只需要将`fetch`
    `event`对象提供给handle方法：
- en: '[PRE37]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Each strategy method lets you configure the following properties:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 每个策略方法都允许你配置以下属性：
- en: The cache name
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存名称
- en: Expiration policy
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过期策略
- en: Plugins to extend the functionality
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展功能的插件
- en: 'Each caching strategy method accepts an `options` object. Here, you can specify
    these customizations. First, is the `cacheName`. In this example, I am registering
    a custom route to catch individual event page requests and cache them in the events
    named cache:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 每个缓存策略方法都接受一个`options`对象。在这里，你可以指定这些自定义设置。首先，是`cacheName`。在这个例子中，我正在注册一个自定义路由来捕获单个事件页面请求并将它们缓存到名为events的缓存中：
- en: '[PRE38]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: I like this option because it makes it easier to manage how different asset
    types are cached and invalidated. Workbox makes managing invalidation easier with
    a custom module.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢这个选项，因为它使得管理不同资产类型的缓存和失效变得更加容易。Workbox通过一个自定义模块使管理失效变得更加简单。
- en: Workbox cache invalidation
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Workbox缓存失效
- en: Cache invalidation is handled by the Workbox Expiration plugin. This plugin
    allows you to control how many responses, lifetime, or a combination of both can
    be cached for a specific rule.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存失效由Workbox过期插件处理。此插件允许你控制特定规则可以缓存多少响应、生命周期或两者的组合。
- en: 'The expiration plugin is applied to the route''s handler or caching strategy
    method. This is done by adding a new expiration plugin reference to the strategy''s
    plugins array:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 过期插件应用于路由的处理程序或缓存策略方法。这是通过向策略的插件数组中添加一个新的过期插件引用来完成的：
- en: '[PRE39]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: If you want to limit the number of cached responses for the rule, supply a numeric
    value for the `maxEntries` property. If you want to limit a responses time to
    live, supply a numeric value matching the number of seconds a response is valid
    for. As the preceding example demonstrates, you can use both at the same time.
    In this situation when either of the conditions is true, the clean-up logic is
    triggered.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要限制缓存响应的数量，为`maxEntries`属性提供一个数值。如果你想限制响应的有效时间，提供一个与响应有效秒数相匹配的数值。正如前面的例子所展示的，你可以同时使用这两个。在这种情况下，当任一条件为真时，清理逻辑就会被触发。
- en: Adding background sync functionality
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加后台同步功能
- en: Service worker background sync is a little complicated. It requires that you
    wrap all network-related activities you want to include in your sync logic in
    tags. This means in many cases that you must modify or completely rewrite your
    caching logic.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者后台同步稍微有些复杂。它要求你将所有想要包含在同步逻辑中的网络相关活动包裹在标签中。这意味着在许多情况下，你必须修改或完全重写你的缓存逻辑。
- en: Plus, most browsers do not have support for this feature yet. We are on the
    verge of ubiquitous support, but that has limited this important feature's appeal.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，大多数浏览器目前还没有支持这个功能。我们正站在普遍支持的边缘，但这限制了这一重要功能的吸引力。
- en: 'However, Workbox includes a plugin module to make background sync a breeze.
    Just like the Expiration plugin, you add the Background Sync plugin to a strategy''s
    list:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Workbox包含一个插件模块，使后台同步变得轻而易举。就像过期插件一样，你只需将后台同步插件添加到策略的列表中：
- en: '[PRE40]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Inside the plugin, a queue is managed that works with the background sync API
    to make sure requests are sent to the server. You can limit how long the service
    worker will try to connect with the server. In this example, I limited the retry
    to a single day. Unlike the expiration plugin, the `maxRetentionTime` property
    is measured in minutes, not seconds.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在插件内部，有一个队列与后台同步API一起工作，以确保请求被发送到服务器。你可以限制服务工作者尝试连接服务器的时长。在这个例子中，我将重试限制在了一天。与过期插件不同，`maxRetentionTime`属性是以分钟为单位衡量的，而不是秒。
- en: The added complexity background sync adds to your service worker code, which
    been a big roadblock for my enthusiasm. Workbox making this feature easy to integrate
    means it is much easier for you and I to add an extra layer of functionality to
    our web apps without writing this complex code.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 后台同步给服务工作者代码增加的复杂性，这曾是我的热情的一大障碍。Workbox使这个功能易于集成，这意味着你和我可以更容易地为我们的Web应用添加一个额外的功能层，而无需编写这段复杂的代码。
- en: Background sync is an important feature if you are expecting responses or data
    from end users. I know many enterprise applications rely on internet connectivity,
    but employees may not be on stable Wi-Fi. This gives them to the ability to be
    productive when there is intermittent or no connectivity.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你期待从最终用户那里得到响应或数据，后台同步是一个重要的功能。我知道许多企业应用依赖于互联网连接，但员工可能不在稳定的Wi-Fi环境下。这让他们在间歇性或没有连接的情况下也能保持生产力。
- en: As a word of caution, I do advise you to give the user advice about the state
    of the requests hanging in the background synch queue. This way, they know the
    form they submitted has not been submitted to the server.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一句忠告，我确实建议你给用户提供关于后台同步队列中挂起的请求状态的提示。这样，他们就知道他们提交的表单尚未提交到服务器。
- en: Using Google Analytics, even when the user is offline
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Google Analytics，即使用户离线
- en: A common question I am asked and see others asking in various forums is, "how
    can I use analytics services like Google Analytics with a service worker?"
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常被问到，也看到其他人在各种论坛上询问，“我如何使用像Google Analytics这样的分析服务与一个服务工作者一起使用？”
- en: What they are ultimately asking is how they can use an analytics package when
    the device is offline, but the service worker allows the user to continue using
    the application. How do user activities get logged to the analytics tool?
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 他们最终询问的是，当设备离线时，他们如何使用分析包，但服务工作者允许用户继续使用应用程序。用户活动是如何记录到分析工具中的？
- en: The good news is that you can track offline activity with a service worker,
    but it does require extra plumbing on your part to store all the activities in
    a custom queue and sync those to the analytics package when the device comes back
    online.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，你可以使用服务工作者跟踪离线活动，但这确实需要你在部分额外的工作来存储所有活动在一个自定义队列中，并在设备重新上线时同步到分析包。
- en: Sounds simple, right?
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很简单，对吧？
- en: One area I did not spend any time on in this book is the background sync API.
    There were a few good reasons, mostly due to limited browser support and the added
    complexity it brings to your service worker.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我没有花时间讨论的一个领域是后台同步API。有几个很好的原因，主要是由于浏览器支持的有限以及它给服务工作者带来的额外复杂性。
- en: If you have ever written an application with a dependency on an analytics package
    like GA, Ensighten, and so on, you know things can be complex. Stakeholders use
    this data to know if their marketing campaigns and websites are working and where
    they can focus improvement activities.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经编写过一个依赖于分析包（如GA、Ensighten等）的应用程序，你就知道事情可能会很复杂。利益相关者使用这些数据来了解他们的营销活动和网站是否有效，以及他们可以在哪里集中改进活动。
- en: 'The good news is that Workbox has you covered, at least for Google Analytics.
    Workbox is a Google project, so you should expect them to offer easy support for
    one of their products! Easy might be understating their solution, as it is a single
    line of code:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是Workbox为你提供了支持，至少对于Google Analytics来说是这样。Workbox是谷歌的一个项目，所以你应该期待他们对其产品提供易于使用的支持！简单可能低估了他们的解决方案，因为它只是一行代码：
- en: '[PRE41]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This turns on the Workbox library that manages Google analytics. Every request
    and response is managed through a background sync layer. If you need to perform
    some advanced configurations, you have that option as well.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 这启动了管理Google分析的工作库。每个请求和响应都通过后台同步层进行管理。如果你需要执行一些高级配置，你也有这个选项。
- en: 'For instance, if you need to differentiate online versus offline activities,
    you can provide overrides. If you understand custom dimensions, the cd1 parameter
    will make sense to you:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你需要区分在线和离线活动，你可以提供覆盖。如果你理解自定义维度，cd1参数对你来说将是有意义的：
- en: '[PRE42]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Even though Workbox only includes a Google Analytics provider does not mean
    you can't create a similar handler for your analytics package. You can use the
    GA provider as a reference or template to create your own analytics package provider.
    The production code is located in the `workbox-google-analytics.prod.js` file.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Workbox只包括Google Analytics提供者，但这并不意味着你不能为你的分析包创建一个类似的处理器。你可以使用GA提供者作为参考或模板来创建你自己的分析包提供者。生产代码位于`workbox-google-analytics.prod.js`文件中。
- en: Don't limit yourself to just thinking about analytics packages when it comes
    to synchronizing offline activities. Use this as a model for any online API you
    may need to interact with where the user can continue interaction, even when their
    device is offline. This can be very handy for companies with line of business
    apps for field agents.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 不要仅仅在同步离线活动时考虑分析包。将其用作任何可能需要与之交互的在线API的模型，即使用户的设备离线，他们也可以继续交互。这对那些为现场代理提供业务线应用程序的公司来说非常有用。
- en: Summary
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: I have always been a fan of tooling and automation to make my applications faster
    to code with more maintainability and hopefully fewer bugs, but it is important
    you have a firm understanding of what any generate code or component is doing.
    This is why even when you are using the progressive web application tools I highlighted
    in this chapter that you need to be able recognize their strengths and limitations.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直是个工具和自动化的粉丝，它们可以使我的应用编码更快，维护性更强，并且希望有更少的错误，但重要的是你要对任何生成的代码或组件的功能有一个清晰的理解。这就是为什么即使当你使用本章中我强调的渐进式Web应用工具时，你也需要能够识别它们的优点和局限性。
- en: You also need to have a firm understanding of how complex features like service
    workers function before you start using a tool like Workbox. Without this fundamental
    knowledge, you can quickly make a service worker that does not work as you expect.
    You also need to have a strong knowledge foundation to help you debug issues when
    these tools break.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用Workbox这样的工具之前，你还需要对像服务工作者这样的复杂功能如何工作有一个清晰的理解。没有这些基本知识，你可能会迅速创建一个不符合你预期的服务工作者。此外，当你使用这些工具时遇到问题时，你也需要有强大的知识基础来帮助你调试。
- en: I chose four tools I think add the most value for the developers to review in
    this chapter. This by no means that all the tools available to you help you build
    great progressive web applications.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本章中选择了四个我认为对开发者来说最有价值的工具进行回顾。这并不意味着所有可用的工具都能帮助你构建出色的渐进式Web应用。
- en: Pinterest has a small collection of tools you may find useful on GitHub ([https://github.com/pinterest/service-workers](https://github.com/pinterest/service-workers)).
    They also have a tool to generate a service worker. There is also a webpack plugin.
    But the most intriguing tool may be their service worker unit testing mocking
    environment. This allows you to write unit tests against your service worker without
    running a browser instance.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: Pinterest在GitHub上有一系列你可能觉得有用的工具([https://github.com/pinterest/service-workers](https://github.com/pinterest/service-workers))。他们还有一个生成服务工作者的工具。还有一个webpack插件。但最引人入胜的工具可能是他们的服务工作者单元测试模拟环境。这允许你在不运行浏览器实例的情况下对你的服务工作者编写单元测试。
- en: Most of the major frameworks have also released command-line utilities to help
    you generate routing logic against your single page applications. I am also very
    intrigued with the rapid inclusion of CLI tools to convert these rendering engines
    into server engines using the same logic they have shipped to the client. I think
    these static sites are much easier to build PWA logic around as they have real
    URLs.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数主要框架也已经发布了命令行工具，以帮助你为单页应用生成路由逻辑。我也非常着迷于这些渲染引擎快速被包含到命令行工具中，以使用它们向客户端提供的相同逻辑将它们转换为服务器引擎。我认为这些静态网站围绕PWA逻辑构建起来要容易得多，因为它们有真实的URL。
- en: With the increased demand for PWAs by businesses, developers are put in the
    position where we need to have a deep knowledge of how to create new and update
    existing web apps so that they can be progressive web apps with a range of service
    worker complexity. The tools surveyed in this chapter should help you craft those
    solutions. I hope this book has helped give you the firm foundation you need to
    make those applications.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 随着企业对渐进式Web应用需求的增加，开发者们处于一个需要深入了解如何创建新应用和更新现有应用以使其成为具有各种服务工作者复杂性的渐进式Web应用的位置。本章中调查的工具应该能帮助你构建这些解决方案。我希望这本书能帮助你建立起构建这些应用所需的坚实基础。
