- en: Chapter 3. Powering a Rails App with Bootstrap's Grid System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 使用Bootstrap的网格系统为Rails应用供电
- en: We now have a good knowledge of what Bootstrap is, and how we can get it installed
    in our projects. With this chapter, we will understand the what can be done part
    of Bootstrap.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在对Bootstrap有了很好的了解，以及我们如何在项目中安装它。通过本章，我们将了解Bootstrap可以做什么。
- en: Grid system is an integral part of the Bootstrap framework. You won't be able
    to make a responsive website/application without properly understanding Bootstrap's
    grid system. By responsive, I mean an application that works and looks perfect
    in devices of all sizes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 网格系统是Bootstrap框架的一个基本组成部分。如果不正确理解Bootstrap的网格系统，您将无法制作出响应式的网站/应用。这里的“响应式”是指一个在所有尺寸的设备上都能完美运行和显示的应用。
- en: This is the generation of Hybrid applications! Developers want to write the
    code once and make it accessible from all the devices. To do this, they have to
    first make their web application responsive. Bootstrap helps in creating a responsive
    website using one of its most popular features called **grid system**.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是混合应用的生成！开发者希望编写一次代码，使其可以从所有设备访问。为此，他们必须首先使他们的Web应用具有响应性。Bootstrap通过其最流行的功能之一——网格系统，帮助创建响应式网站。
- en: In this chapter, we will first understand Bootstrap's grid system and then proceed
    to use it in our first application called Online Packt Shopping. We will try to
    use this same app in the rest of book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先了解Bootstrap的网格系统，然后将其应用于我们的第一个应用，即Online Packt Shopping。我们将尝试在本书的其余部分使用这个相同的应用。
- en: 'In this chapter, we will cover:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: What is Bootstrap's grid system?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap的网格系统是什么？
- en: Implementing Bootstrap's Grid System in Rails application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Rails应用中实现Bootstrap的网格系统
- en: What is Bootstrap's grid system?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bootstrap的网格系统是什么？
- en: When we first think about grids, we imagine the intersection of vertical and
    horizontal lines that create grids. That's what's happening here too. Bootstrap's
    grid system contains rows equivalent to horizontal lines, and columns equivalent
    to vertical lines. When these rows and columns meet, they create grids, which
    can be used to fill some content in our webpage. Simple, isn't it?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们第一次思考网格时，我们会想象垂直和水平线条的交叉，这些线条构成了网格。这里发生的情况也是如此。Bootstrap的网格系统包含与水平线条相当的行，以及与垂直线条相当的列。当这些行和列相交时，它们就形成了网格，我们可以用它们在我们的网页中填充一些内容。简单，不是吗？
- en: One of the biggest advantages of using Bootstrap's grid system is that it is
    responsive. Unlike HTML tables, Bootstrap's grid system is flexible and adjusts
    itself properly in the smaller screens as well. The size of the grids in Bootstrap
    isn't fixed. They change as per the size of the device's screen. Hence, the content
    is rearranged, as per the space available.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Bootstrap的网格系统的最大优点之一是它具有响应性。与HTML表格不同，Bootstrap的网格系统是灵活的，并且在小屏幕上也能正确调整。Bootstrap中的网格大小不是固定的。它们根据设备屏幕的大小而变化。因此，内容会根据可用空间重新排列。
- en: Most developers fail to understand the grid system properly and hence they fail
    to achieve a responsive web design. In this section, we will first create a static
    non-Rails webpage showcasing how to create Bootstrap's Grid System, and then we
    will use it in our Rails application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发者未能正确理解网格系统，因此他们未能实现响应式网页设计。在本节中，我们首先创建一个静态的非Rails网页，展示如何创建Bootstrap的网格系统，然后我们将将其应用于我们的Rails应用中。
- en: 'Let''s create a folder called `Responsive_website_static` anywhere in the system.
    Then, create an HTML file called `index.html`. We will use Bootstrap''s CDN link
    to import Bootstrap''s CSS and JavaScript codes inside the webpage. Now, open
    the `index.html` file and then paste the following basic HTML layout into it:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在系统中的任何位置创建一个名为`Responsive_website_static`的文件夹。然后，创建一个名为`index.html`的HTML文件。我们将使用Bootstrap的CDN链接在网页中导入Bootstrap的CSS和JavaScript代码。现在，打开`index.html`文件，然后粘贴以下基本的HTML布局到其中：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above markup is as per Bootstrap's recommended markup. You can see that
    it has got some additional meta tags also. These meta tags are used to render
    the webpage properly in all kinds of devices. The `UTF-8` charset is used to tell
    the browser that your webpage contains some `unicode` characters.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 上述标记符符合Bootstrap的推荐标记符。您可以看到它还有一些额外的元标签。这些元标签用于在所有类型的设备上正确渲染网页。使用`UTF-8`字符集是为了告诉浏览器您的网页包含一些`unicode`字符。
- en: The next meta tag with the `http-equiv="X-UA-Compatible"` and `content="IE=edge"`
    attributes is used for Internet Explorer. Sometimes, Internet Explorer switches
    to the compatible mode instead of using its best mode available. Hence, this tag
    tells Internet Explorer to use its best mode when rendering your website.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个具有 `http-equiv="X-UA-Compatible"` 和 `content="IE=edge"` 属性的元标签用于 Internet
    Explorer。有时，Internet Explorer 会切换到兼容模式而不是使用其最佳模式。因此，这个标签告诉 Internet Explorer 在渲染你的网站时使用其最佳模式。
- en: The next meta tag is a `viewport` tag. It tells the browser to scale and fit
    the webpage to the whole screen in mobile devices.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个元标签是一个 `viewport` 标签。它告诉浏览器在移动设备上缩放并适应整个屏幕。
- en: Instead of downloading the Bootstrap files from its browser, we have used the
    CDN links to link to the Bootstrap's CSS and JavaScript files. Since Bootstrap
    also depends on jQuery, we have also used the CDN link of the jQuery file.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有从浏览器下载 Bootstrap 文件，而是使用了 CDN 链接来链接到 Bootstrap 的 CSS 和 JavaScript 文件。由于
    Bootstrap 也依赖于 jQuery，我们同样使用了 jQuery 文件的 CDN 链接。
- en: 'Finally, we have an `<h1>` tag to display the message **Hello World** on the
    webpage. So, let''s open it in the browser and check whether all the files have
    been properly loaded. The webpage should now look like the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一个 `<h1>` 标签，用于在网页上显示消息 **Hello World**。因此，让我们在浏览器中打开它并检查所有文件是否已正确加载。网页现在应该看起来像以下截图：
- en: '![What is Bootstrap''s grid system?](img/7269OS_03_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![什么是 Bootstrap 的网格系统？](img/7269OS_03_01.jpg)'
- en: If you are using Google Chrome, you can easily check whether all the CDN files
    are loaded properly. Right-click anywhere on the webpage, and select the inspect
    element. Many web developer tool tabs will appear below the screen. Select the
    **Network** tab and reload the page. In the **Status Text** column, you will see
    many response codes against each resource name. If none of the response codes
    fail, then all the files are loaded properly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Google Chrome，你可以轻松地检查所有 CDN 文件是否已正确加载。在网页上的任何地方右键单击，并选择“检查元素”。屏幕下方将出现许多开发者工具标签。选择
    **网络** 标签并重新加载页面。在 **状态文本** 列中，你将看到针对每个资源名称的许多响应代码。如果没有响应代码失败，则所有文件都已正确加载。
- en: '![What is Bootstrap''s grid system?](img/7269OS_03_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![什么是 Bootstrap 的网格系统？](img/7269OS_03_02.jpg)'
- en: 'Before we start filling any content inside the webpage, we need to create a
    container. This will be used to wrap all the webpage content and center it to
    the browser screen. There are two different container classes in Bootstrap: `"container"`
    and `"container-fluid"` The first class, `"container"`, has a fixed width and
    centers itself to the browser window. The second class, `"container-fluid"`, is
    a full width container. It spans from the left edge to the right edge of the browser
    window. So, let''s define a container inside `index.html` and move the Hello World
    message inside it:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始向网页内填充任何内容之前，我们需要创建一个容器。这将用于包裹所有网页内容并将其居中到浏览器屏幕。Bootstrap 中有两种不同的容器类：`"container"`
    和 `"container-fluid"`。第一个类 `"container"` 具有固定宽度并自动居中到浏览器窗口。第二个类 `"container-fluid"`
    是一个全宽容器，它从浏览器窗口的左侧延伸到右侧。因此，让我们在 `index.html` 中定义一个容器并将 Hello World 消息放入其中：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot shows the output:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出：
- en: '![What is Bootstrap''s grid system?](img/7269OS_03_03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![什么是 Bootstrap 的网格系统？](img/7269OS_03_03.jpg)'
- en: 'You can see how it has moved the message towards the center. It will be more
    clearly visible if we apply a background to the container. So, let''s write an
    inline CSS to the container markup:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到消息是如何向中心移动的。如果我们给容器应用一个背景，它将更加清晰可见。因此，让我们给容器标记写入内联 CSS：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here''s the output of the preceding code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前面代码的输出：
- en: '![What is Bootstrap''s grid system?](img/7269OS_03_04.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![什么是 Bootstrap 的网格系统？](img/7269OS_03_04.jpg)'
- en: 'You should always define a container before using Bootstrap''s Grid System.
    We can now proceed to define rows. To define a row, we have to use a class called
    `row.` So, let''s proceed and create a row inside the container:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Bootstrap 的网格系统之前，你应该始终定义一个容器。现在，我们可以继续定义行。要定义一个行，我们必须使用一个名为 `row` 的类。因此，让我们继续并在容器内创建一个行：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Creating a row is a way of telling Bootstrap that you want to use its grid
    system. It''s time to layout vertical columns inside the above row. A single column
    in Bootstrap will occupy all the space inside the row. Creating two columns will
    divide the row''s space into two equal halves. Hence, the more columns you create,
    the row''s space will be divided equally. Bootstrap''s grid system scales up to
    12 columns. If you create more than 12 columns, the remaining columns will be
    moved automatically to a new row. So, let''s first create a single column:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一行是告诉 Bootstrap 你想要使用其网格系统的一种方式。现在是时候在上面的行内布局垂直列了。Bootstrap 中的一个单独的列将占据行内的所有空间。创建两列将把行的空间分成两半。因此，你创建的列越多，行的空间就会平均分配。Bootstrap
    的网格系统可以扩展到 12 列。如果你创建超过 12 列，剩余的列将自动移动到新的一行。所以，让我们首先创建一个单独的列：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s take a look at the output:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看输出结果：
- en: '![What is Bootstrap''s grid system?](img/7269OS_03_05.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![什么是 Bootstrap 的网格系统？](img/7269OS_03_05.jpg)'
- en: 'A column in the Bootstrap grid system is declared using the amount of columns
    it will span across. If you want to create a single column, you need it to span
    across 12 Bootstrap columns. Hence, we get the class `"col-xs-12"`. If you want
    to create two columns, you have to use the class `"col-xs-6"`. This will make
    each column span across six Bootstrap columns. So, let''s proceed and create two
    columns in the preceding markup:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Bootstrap 网格系统中，列是通过它将跨越的列数来声明的。如果你想创建一个单独的列，你需要它跨越 12 个 Bootstrap 列。因此，我们得到类
    `"col-xs-12"`。如果你想创建两列，你必须使用类 `"col-xs-6"`。这将使每个列跨越六个 Bootstrap 列。所以，让我们继续，在前面的标记中创建两列：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s take a look at the output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看输出结果：
- en: '![What is Bootstrap''s grid system?](img/7269OS_03_06.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![什么是 Bootstrap 的网格系统？](img/7269OS_03_06.jpg)'
- en: 'Bootstrap has defined classes for devices of different sizes. In the preceding
    examples, we have been using the classes such as `"col-xs-*"`. Here the letters
    *xs* stand for extra-small devices and the devices above that range. Hence a class,
    "`col-xs-"` will create a column of size 12 Bootstrap columns in all types of
    devices starting from extra-small devices. There are four different types of Bootstrap
    classes for four different sizes of devices:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 为不同尺寸的设备定义了类。在前面的例子中，我们一直在使用类如 `"col-xs-*"`。在这里，字母 *xs* 代表超小设备及其以上的设备范围。因此，类
    "`col-xs-"` 将在从超小设备开始的所有类型的设备上创建一个大小为 12 个 Bootstrap 列的列。Bootstrap 有四种不同类型的类，用于四种不同尺寸的设备：
- en: '`Extra-Small Devices ".col-xs-*"`: These devices have a screen size less than
    768 px'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`超小设备 ".col-xs-*"`：这些设备的屏幕尺寸小于 768 像素'
- en: '`Small Devices ".col-sm-*"`: These devices have a screen size less than 992
    px and larger than or equal to 786 px'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`小设备 ".col-sm-*"`：这些设备的屏幕尺寸小于 992 像素，且大于或等于 786 像素'
- en: '`Medium Devices ".col-md-*"`: These devices have a screen size less than 1200
    px and larger than and equal to 992 px'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`中等设备 ".col-md-*"`：这些设备的屏幕尺寸小于 1200 像素，且大于或等于 992 像素'
- en: '`Large Devices ".col-lg-*"`: These devices have a screen size larger than 1200
    px'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`大设备 ".col-lg-*"`：这些设备的屏幕尺寸大于 1200 像素'
- en: For instance, if you are defining columns, keeping in mind medium devices greater
    than or equal to 992 px, then these columns will look the same even in larger
    devices greater than or equal to 992 px 1200 px. They will be stacked on top of
    each other in small devices smaller than 992 px and extra-small devices 768 px.
    Hence, if you define columns for extra-small devices, then they will look the
    same in all kinds of devices.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你正在定义列，考虑到中等设备大于或等于 992 像素，那么这些列即使在大于或等于 992 像素和 1200 像素的大设备上看起来也相同。在小于
    992 像素的小设备和 768 像素的超小设备上，它们将堆叠在一起。因此，如果你为超小设备定义列，那么它们在所有类型的设备上看起来都一样。
- en: 'Using Bootstrap, you can also dynamically change the number of columns in different
    devices. For example, using the classes `"col-xs-4"` and `"col-sm-6"` together
    will make a column span across four Bootstrap columns in extra-small devices,
    and six Bootstrap columns in small devices. The steps are as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Bootstrap，你还可以在不同设备上动态地更改列的数量。例如，使用类 `"col-xs-4"` 和 `"col-sm-6"` 一起，将使列在超小设备上跨越四个
    Bootstrap 列，在小设备上跨越六个 Bootstrap 列。步骤如下：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s take a look at the output:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看输出结果：
- en: '![What is Bootstrap''s grid system?](img/7269OS_03_07.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![什么是 Bootstrap 的网格系统？](img/7269OS_03_07.jpg)'
- en: The preceding screenshot shows the webpage in extra-small devices. The browser
    renders one column per row because of the class `"col-xs-12"`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了在超小设备上的网页。浏览器由于类 `"col-xs-12"` 的存在，每行渲染一列。
- en: Hopefully, now you have got an idea of how Bootstrap's columns are named. So,
    let's proceed to another important concept in Bootstrap's grid system, nesting
    columns.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 希望现在你已经了解了 Bootstrap 列的命名方式。那么，让我们继续探讨 Bootstrap 网格系统中的另一个重要概念，即嵌套列。
- en: Nesting columns
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套列
- en: 'In Bootstrap, it is possible to define columns within columns. To do so, you
    need to declare a new row within a column markup and then proceed to create columns
    within it. Let''s modify the previous code to test nested columns:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Bootstrap 中，可以在列内定义列。为此，您需要在列标记内声明一个新的行，然后继续在其中创建列。让我们修改之前的代码来测试嵌套列：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s take a look at the output:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看输出结果：
- en: '![Nesting columns](img/7269OS_03_08.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![嵌套列](img/7269OS_03_08.jpg)'
- en: In the preceding screenshot, you can clearly see that we have created two different
    columns within the first column. Since the second column doesn't have any nested
    columns in it, the background color (cyan) of the main container is now visible
    to us. This way you can create as many nesting columns as you want.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，你可以清楚地看到我们在第一个列内创建了两个不同的列。由于第二个列没有嵌套列，因此主容器的背景色（青色）现在对我们可见。这样，你可以创建任意数量的嵌套列。
- en: Implementing Bootstrap's grid system in a Rails application
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Rails 应用程序中实现 Bootstrap 的网格系统
- en: It's time to finally use the Grid system in our Rails application. As stated
    earlier, we will create an application called Online Packt Shopping. We will use
    grid system in this chapter and create a CRUD app for products. We will continue
    developing this app throughout this book as we learn Bootstrap's different features.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '现在是时候在我们的 Rails 应用程序中使用网格系统了。如前所述，我们将创建一个名为 Online Packt Shopping 的应用程序。我们将在本章中使用网格系统创建一个针对产品的
    CRUD 应用程序。随着我们学习 Bootstrap 的不同功能，我们将继续开发这个应用程序。 '
- en: So, let's proceed and create a Rails application called Online Packt Shopping.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们继续创建一个名为 Online Packt Shopping 的 Rails 应用程序。
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once the application is created, you should navigate inside the newly created
    folder and start the Rails server to test if the application is properly installed.
    So, let''s do it using the following command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序创建后，你应该导航到新创建的文件夹内，并启动 Rails 服务器以测试应用程序是否正确安装。那么，让我们使用以下命令进行操作：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Access the webpage at `http://localhost:3000`. It should show the default Rails
    app **Welcome Board**.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 访问网页 `http://localhost:3000`。它应该显示默认的 Rails 应用程序 **欢迎板**。
- en: 'Our product will have the following four attributes:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的产品将具有以下四个属性：
- en: Name
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称
- en: Featured Image
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特色图片
- en: Description
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述
- en: Price
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 价格
- en: So, let's scaffold accordingly
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们相应地进行操作
- en: 'Now, we will scaffold and generate a product model with the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用以下命令构建和生成一个产品模型：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This command will create a model named **NewProduct** and its associated attributes.
    You need to migrate the newly created model to the database. You can do so using
    the rake command, which is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将创建一个名为 **NewProduct** 的模型及其相关属性。你需要使用 rake 命令将新创建的模型迁移到数据库中。你可以使用以下命令来完成：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once this is done successfully, run the server and open: `http://localhost:3000/products`.
    You should see an empty products listing page:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦成功完成，运行服务器并打开：`http://localhost:3000/products`。你应该看到一个空的产品列表页面：
- en: '![Implementing Bootstrap''s grid system in a Rails application](img/7269OS_03_09.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![在 Rails 应用程序中实现 Bootstrap 的网格系统](img/7269OS_03_09.jpg)'
- en: 'We have to first include Bootstrap in this application. For that, we will use
    the CDN method, as described in [Chapter 2](ch02.html "Chapter 2. Introducing
    Bootstrap 3"): *Introducing Bootstrap 3* in the section *Installing Bootstrap
    in a Rails project*.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要将 Bootstrap 包含到这个应用程序中。为此，我们将使用第 2 章中描述的 CDN 方法：在 *安装 Bootstrap 到 Rails
    项目* 部分的 *介绍 Bootstrap 3* 中。[第 2 章](ch02.html "第 2 章。介绍 Bootstrap 3")。
- en: 'Once you have included Bootstrap in your application, you can reload the preceding
    webpage and see the CSS reset the Bootstrap applies on the HTML elements. You
    can also see that the font has changed from `Times New Roman` to `Open Sans`.
    So, let''s take a look at the output:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在你的应用程序中包含了 Bootstrap，你可以重新加载前面的网页，并看到 Bootstrap 对 HTML 元素应用的 CSS 重置。你还可以看到字体已从
    `Times New Roman` 更改为 `Open Sans`。那么，让我们看看输出结果：
- en: '![Implementing Bootstrap''s grid system in a Rails application](img/7269OS_03_10.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![在 Rails 应用程序中实现 Bootstrap 的网格系统](img/7269OS_03_10.jpg)'
- en: We will follow all the steps, as discussed in the previous section. First, we
    need to define a container for our application. Open `application.html.erb`, which
    is present in app/views/layouts.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循前一小节中讨论的所有步骤。首先，我们需要为我们的应用程序定义一个容器。打开`application.html.erb`，它位于`app/views/layouts`中。
- en: 'We need to wrap `<%= yield %>` inside the Bootstrap container markup:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将`<%= yield %>`包裹在Bootstrap容器标记内：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s take a look at the output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看输出结果：
- en: '![Implementing Bootstrap''s grid system in a Rails application](img/7269OS_03_11.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![在Rails应用程序中实现Bootstrap的网格系统](img/7269OS_03_11.jpg)'
- en: Next, we need to change the way the content appears on this page. We don't need
    a table to list our products. We will use Bootstrap's grid system to display the
    products beautifully in a responsive grid layout.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要更改此页面上内容显示的方式。我们不需要一个表格来列出我们的产品。我们将使用Bootstrap的网格系统以响应式网格布局美观地显示产品。
- en: Open `index.html.erb` which is present inside the `products` folder by navigating
    to `app/views/products`. If you are familiar with Rails development, you must
    know that there's a separate folder present inside the `views` folder for each
    model. The `index.html.erb` file inside each model folder is used for displaying
    various models. Go ahead and delete everything which is present inside this file.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`index.html.erb`，它位于`products`文件夹中，通过导航到`app/views/products`。如果您熟悉Rails开发，您必须知道在`views`文件夹内为每个模型都有一个单独的文件夹。每个模型文件夹中的`index.html.erb`文件用于显示各种模型。继续并删除该文件中所有内容。
- en: 'First, we need a page header that tells the users what the page is displaying.
    So, let''s create a page header using Bootstrap''s `".page-header"` class. Insert
    the following code in `index.html.erb`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个页面标题来告诉用户页面显示的内容。因此，让我们使用Bootstrap的`".page-header"`类创建一个页面标题。在`index.html.erb`中插入以下代码：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we need to create a row for displaying the products. Hence, update the
    markup and add the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个行来显示产品。因此，更新标记并添加以下内容：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we will create columns inside this row. For our application, we want the
    following features in our layout:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在该行内创建列。对于我们的应用程序，我们希望在布局中具有以下功能：
- en: Columns in extra-small mobile devices
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极小移动设备中的列
- en: Columns in small mobile devices
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小移动设备中的列
- en: Columns in medium devices
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中等设备中的列
- en: Columns in large devices
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大设备中的列
- en: 'Hence, the combination which we will use to define our column is `"col-xs-12
    col-sm-6 col-md-4 col-lg-3"`. Let''s proceed and update the preceding row markup
    with a single column:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将使用以下组合来定义我们的列：“`col-xs-12 col-sm-6 col-md-4 col-lg-3`”。让我们继续并更新前面的行标记，只使用一个列：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We will now loop this column markup for each product. Hence, we need to update
    our markup as following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将遍历每个产品的列标记。因此，我们需要更新我们的标记如下：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we need to fill this column with the product details:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要填充这个列的产品详情：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding code, I am looping through the `product` object to repeatedly
    print the same markup, but with a different data. For each product, I am printing
    its name using the `<h2>` tag, an image using, `<img>` tag, product description
    in a `<p>` tag, product price in the `<h4>` tag, and finally the link to the product
    page using `link_to`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我正在遍历`product`对象，重复打印相同的标记，但带有不同的数据。对于每个产品，我使用`<h2>`标签打印其名称，使用`<img>`标签打印图像，使用`<p>`标签打印产品描述，使用`<h4>`标签打印产品价格，最后使用`link_to`打印产品页面的链接。
- en: You can see, that while printing the data in HTML tags, I have also added some
    additional classes. These classes carry some CSS styles associated with them that
    are written by Bootstrap. For example, adding a class `"img-responsive"` to an
    `<img>` tag will make the image fit to the size of the grid, irrespective of the
    size of the image. I have also used the combination of classes `btn` and `btn-success`
    which are used for the `<a>` and `<button>` tags. These classes give links a fancy
    button look. We will learn more about these classes in subsequent chapters.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，在打印HTML标签中的数据时，我还添加了一些额外的类。这些类携带与它们关联的一些CSS样式，这些样式是由Bootstrap编写的。例如，将类`"img-responsive"`添加到`<img>`标签中将使图像适应网格的大小，而不管图像的大小如何。我还使用了`btn`和`btn-success`类的组合，这些类用于`<a>`和`<button>`标签。这些类给链接带来了时尚的按钮外观。我们将在后续章节中了解更多关于这些类的信息。
- en: 'Let''s proceed and check out how this page will look once we have filled data
    in our database using the `New Product` page:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续并查看在我们在数据库中使用“新产品”页面填充数据后，这个页面将看起来如何：
- en: '![Implementing Bootstrap''s grid system in a Rails application](img/7269OS_03_12.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![在Rails应用程序中实现Bootstrap的网格系统](img/7269OS_03_12.jpg)'
- en: The preceding screenshot is the desktop view.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图是桌面视图。
- en: '![Implementing Bootstrap''s grid system in a Rails application](img/7269OS_03_13.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![在 Rails 应用中实现 Bootstrap 的网格系统](img/7269OS_03_13.jpg)'
- en: 'The preceding screenshot is a medium-sized device view. This will be the view
    in most of the tablets in the market, the output for this is:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图是中等尺寸设备的视图。这将是市场上大多数平板电脑的视图，输出如下：
- en: '![Implementing Bootstrap''s grid system in a Rails application](img/7269OS_03_14.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![在 Rails 应用中实现 Bootstrap 的网格系统](img/7269OS_03_14.jpg)'
- en: 'You can mark that the number of columns is reducing, as per our design requirement.
    The preceding image shows the layout in smaller devices. The following screenshot
    shows the view for extra-small devices:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到列数正在减少，正如我们的设计要求。上述图像显示了较小设备的布局。以下截图显示了超小设备的视图：
- en: '![Implementing Bootstrap''s grid system in a Rails application](img/7269OS_03_15.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![在 Rails 应用中实现 Bootstrap 的网格系统](img/7269OS_03_15.jpg)'
- en: You can see that the layout has changed to single-column design in extra-small
    devices.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，在超小设备中，布局已经变为单列设计。
- en: 'There''s still a thing missing in this page, a link to add a new product. Let''s
    place a nice fancy `New Product` page right-aligned with the page header. An update
    page header markup is as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个页面上，还有一些东西缺失，那就是添加新产品的链接。让我们将一个漂亮的“新产品”页面放置在页面标题的右侧。更新页面标题的标记如下：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The webpage should now look like:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的网页应该看起来像：
- en: '![Implementing Bootstrap''s grid system in a Rails application](img/7269OS_03_16.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![在 Rails 应用中实现 Bootstrap 的网格系统](img/7269OS_03_16.jpg)'
- en: You must be wondering how I pulled the New Product button to the right side
    of the page. If you see the markup properly, I have used an additional Bootstrap
    class named `pull-right`. These classes are called helper classes in Bootstrap.
    There are many helper classes in Bootstrap, we will learn more about them as we
    proceed with the book.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你一定在想我是如何将“新产品”按钮拉到页面右侧的。如果你正确地查看标记，我使用了额外的 Bootstrap 类名 `pull-right`。这些类在 Bootstrap
    中被称为辅助类。Bootstrap 中有很多辅助类，随着我们继续阅读本书，我们将了解更多关于它们的信息。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we understood Bootstrap''s Grid System and created two different
    types of projects: a static demo webpage and an online shopping Rails app. We
    saw how to use the Grid system, and make our homepage responsive to various sizes
    of devices. There are still many pages left unstyled in the current app: `add
    product` page, `edit product` page, and `single product` page. We will use Bootstrap
    to style them in subsequent chapters.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了 Bootstrap 的网格系统，并创建了两种不同类型的项目：一个静态的演示网页和一个在线购物 Rails 应用。我们看到了如何使用网格系统，并使我们的主页能够适应各种尺寸的设备。当前应用中仍有许多页面未进行样式设计：`添加产品`页面、`编辑产品`页面和`单个产品`页面。我们将在后续章节中使用
    Bootstrap 对它们进行样式设计。
- en: In the next chapter, we will understand various typography support from Bootstrap,
    play with beautiful Bootstrap buttons, and do more with images using Bootstrap.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解 Bootstrap 提供的各种排版支持，玩转漂亮的 Bootstrap 按钮，并使用 Bootstrap 对图像进行更多操作。
