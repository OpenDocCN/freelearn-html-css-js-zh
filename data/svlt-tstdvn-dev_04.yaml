- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Saving Form Data
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存表单数据
- en: The preceding chapter introduced Playwright and SvelteKit routes. The data in
    our `/birthdays` route was hardcoded. In this chapter, we’ll force the *real*
    implementation of the `load` function by adding the ability to add new birthdays
    into the system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 前一章介绍了 Playwright 和 SvelteKit 路由。我们 `/birthdays` 路由中的数据是硬编码的。在这一章中，我们将通过添加将新生日添加到系统中的功能来强制实现
    `load` 函数的真正实现。
- en: '*Figure 4**.1* shows the new form we’ll be building. It is attached to the
    bottom of the birthday list at the `/``birthdays` route:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4**.1* 显示了我们将要构建的新表单。它附加在 `/``birthdays` 路由的生日列表底部：'
- en: '![Figure 4.1 – The form for adding a new birthday](img/Figure_4.1_B19611.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – 添加新生日的表单](img/Figure_4.1_B19611.jpg)'
- en: Figure 4.1 – The form for adding a new birthday
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 添加新生日的表单
- en: 'This chapter covers the following key topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下关键主题：
- en: Adding a Playwright test for data input
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为数据输入添加 Playwright 测试
- en: Test-driving a SvelteKit form
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 驱动 SvelteKit 表单
- en: Test-driving a SvelteKit form action
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 驱动 SvelteKit 表单操作
- en: By the end of the chapter, you’ll have a good understanding of how to test-drive
    SvelteKit forms.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将很好地理解如何驱动 SvelteKit 表单。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code for the chapter can be found online at [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter04/Start](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter04/Start).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在网上找到，地址为 [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter04/Start](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter04/Start)。
- en: Adding a Playwright test for data input
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为数据输入添加 Playwright 测试
- en: 'Go ahead and add this test to `tests/birthdays.test.js`. It includes all the
    steps required for adding a new birthday to the system:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将此测试添加到 `tests/birthdays.test.js` 中。它包括将新生日添加到系统所需的所有步骤：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After navigating to the `/birthdays` endpoint, it uses the `getByLabel` locator
    function to find an `input` field that has a `Name` label. This is standard HTML
    functionality using the `label` and `input` elements, which we’ll see in the next
    section.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航到 `/birthdays` 端点后，它使用 `getByLabel` 定位函数来查找一个带有 `Name` 标签的 `input` 字段。这是标准的
    HTML 功能，使用 `label` 和 `input` 元素，我们将在下一节中看到。
- en: We use the `fill` function to enter a value into this field, and then we repeat
    the process for the `Date of birth` field. Then, we click the button (any button!),
    and finally, we check that the `Persephone` text appears somewhere on the page.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `fill` 函数将值输入到这个字段中，然后重复这个过程为 `Date of birth` 字段。然后，我们点击按钮（任何按钮！），最后检查
    `Persephone` 文本是否出现在页面的某个位置。
- en: An important distinction to make here is that `getByText` checks page text rather
    than, say, the values of the `input` fields. So, we can’t just fill in the `Name`
    field and then watch the expectation magically pass.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要区分的一个重要观点是，`getByText` 检查页面文本，而不是例如 `input` 字段的值。因此，我们不能只是填写 `Name` 字段，然后期待期望神奇地通过。
- en: 'The intent of the Playwright test is to show that the following steps are performed:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Playwright 测试的目的是展示以下步骤被执行：
- en: The user fills in a name and date of birth.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户填写姓名和出生日期。
- en: The user presses the **Save** button.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户按下 **保存** 按钮。
- en: The system records the birthday in its system.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统在其系统中记录生日。
- en: The browser refreshes the page, and the new birthday is displayed as part of
    the loaded page data.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器刷新页面，新的生日作为加载的页面数据的一部分显示出来。
- en: 'With all that in mind, the process we’ll use to make the test pass is as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到所有这些，我们将使用以下过程来使测试通过：
- en: First, we’ll build a new `BirthdayForm` component that displays a basic HTML
    form with two input fields and a button.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将构建一个新的 `BirthdayForm` 组件，该组件显示一个带有两个输入字段和一个按钮的基本 HTML 表单。
- en: Then, we’ll add this to the existing `+page.svelte` file that we built in the
    preceding chapter.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将将其添加到上一章中构建的现有 `+page.svelte` 文件中。
- en: Finally, we’ll add a form action to add this birthday, including introducing
    a new data structure to hold our birthdays in the server.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将添加一个表单操作来添加这个生日，包括在服务器中引入一个新的数据结构来存储我们的生日。
- en: That covers our up-front design, all wrapped up in a Playwright test. Next,
    we can begin test-driving the form.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这就涵盖了我们的前期设计，所有这些都包含在 Playwright 测试中。接下来，我们可以开始驱动表单。
- en: Test-driving a SvelteKit form
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 驱动 SvelteKit 表单
- en: 'In this section, you’ll construct a new component named `BirthdayForm`, together
    with its test suite. This component is an HTML form that comprises two text fields:
    `name` and `dob`. Each `input` element has a corresponding `label` element. There’s
    also a button named **Save** that submits the form.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将构建一个名为`BirthdayForm`的新组件，以及其测试套件。这个组件是一个HTML表单，包含两个文本字段：`name`和`dob`。每个`input`元素都有一个相应的`label`元素。还有一个名为**保存**的按钮用于提交表单。
- en: SvelteKit handles the submission of our form data from the client to the server.
    We won’t test this behavior in our Vitest test suites, instead leaving it up to
    the Playwright tests to ensure that all pieces slot together correctly.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: SvelteKit处理从客户端到服务器的表单数据提交。我们不会在我们的Vitest测试套件中测试这种行为，而是将其留给Playwright测试以确保所有部分正确对接。
- en: 'Follow these steps to build the new form:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤构建新的表单：
- en: 'Create a new file named `src/routes/birthdays/BirthdayForm.test.js` with the
    following first test. This uses the `queryByRole` query function to find an element
    with the `form` role on the page:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`src/routes/birthdays/BirthdayForm.test.js`的新文件，并添加以下第一个测试。这个测试使用了`queryByRole`查询函数来在页面上查找具有`form`角色的元素：
- en: '[PRE1]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Make sure you run the test and watch it fail.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你运行测试并观察它失败。
- en: 'Then, create a new file named `src/routes/birthdays/BirthdayForm.svelte` with
    the following content:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个名为`src/routes/birthdays/BirthdayForm.svelte`的新文件，并添加以下内容：
- en: '[PRE2]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you run tests now, you’ll see the test still doesn’t pass. That’s because
    the `form` role only becomes available once you *name* a form. Update the implementation
    as follows:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你现在运行测试，你会看到测试仍然没有通过。那是因为`form`角色只有在给表单命名后才会可用。按照以下方式更新实现：
- en: '[PRE3]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The test should now pass. Add the next test, as shown in the following code
    block. This test simply checks that we submit the form via a `POST` request, which
    is the usual mechanism for submitting new data to the server:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试现在应该通过了。添加下一个测试，如下面的代码块所示。这个测试简单地检查我们是否通过`POST`请求提交表单，这是向服务器提交新数据的常用机制：
- en: '[PRE4]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Make that pass by adding the `method` attribute, as shown here:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加`method`属性使其通过，如下所示：
- en: '[PRE5]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, add the third test, as shown in the following code block:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加第三个测试，如下面的代码块所示：
- en: '[PRE6]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To make that pass, add an `input` element into the form with a `type` attribute
    set to `submit`. You can also give it `value` as `Save`, which will be used as
    the button name:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使其通过，请向表单中添加一个`type`属性设置为`submit`的`input`元素。你也可以给它一个`value`属性为`Save`，这将用作按钮名称：
- en: '[PRE7]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For the next test, we will introduce a nested `describe` block called `name
    field`. We can add a block here for grouping in anticipation of more tests for
    this field. We’ll be adding some more in [*Chapter 5*](B19611_05.xhtml#_idTextAnchor070),
    *Validating* *Form Data*:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于下一个测试，我们将引入一个嵌套的`describe`块，称为`name field`。我们可以在这里添加一个块以供分组，预期会有更多对这个字段的测试。我们将在[*第五章*](B19611_05.xhtml#_idTextAnchor070)，*验证*
    *表单数据*中添加一些：
- en: '[PRE8]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This test makes use of the `queryByLabelText` function. This is analogous to
    the `page.getByLabel` function that was used in the Playwright test.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试使用了`queryByLabelText`函数。这与在Playwright测试中使用的`page.getByLabel`函数类似。
- en: 'There is something else in this test that is important: the `input[type=text]`.
    It’s not very clear from the test, but the first expectation in this test checks
    all of the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中还有其他一些重要的内容：`input[type=text]`。从测试中看不太清楚，但这个测试的第一个预期检查以下所有内容：
- en: That a `label` element exists with the `Name` text
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在一个带有`Name`文本的`label`元素
- en: That an `input` element exists with the `type` attribute set to `text`
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在一个带有`type`属性设置为`text`的`input`元素
- en: That the `label` element is associated with the `input` element
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`元素与`input`元素相关联'
- en: Part of these checks come from the selector expression itself. Without an explanation
    or understanding of the selector syntax, it’s hard to know the intent behind this
    expectation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些检查的一部分来自选择器表达式本身。没有解释或对选择器语法的理解，很难知道这个预期的意图。
- en: There’s also a second expectation in there to check that the `name` attribute
    is set. This is important so that the SvelteKit form action gets the right named
    parameters back. We’ll add this parameter, `name`, and in the next test, we’ll
    add another one named `dob`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 其中还有一个第二个预期检查，确保`name`属性已设置。这很重要，这样SvelteKit表单操作就可以正确地返回命名参数。我们将添加这个参数`name`，在下一个测试中，我们将添加另一个名为`dob`的参数。
- en: In [*Chapter 8*](B19611_08.xhtml#_idTextAnchor100), *Creating Matchers to Simplify
    Tests*, we’ll refactor these expectations to improve their readability.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第8章*](B19611_08.xhtml#_idTextAnchor100)，“创建匹配器以简化测试”中，我们将重构这些期望以提高其可读性。
- en: 'Let’s carry on with the next steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续下一步：
- en: 'To make the test pass, go ahead and add the `label` and `input` elements, as
    shown in the following code block:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使测试通过，请继续添加`label`和`input`元素，如下面的代码块所示：
- en: '[PRE9]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we can repeat the same thing with the `date of` `birth` field:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以用同样的方法对`出生日期`字段重复同样的操作：
- en: '[PRE10]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To make that pass, add in a field for the date of birth:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使那个测试通过，添加一个用于出生日期的字段：
- en: '[PRE11]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That completes the `BirthdayForm` component.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了`BirthdayForm`组件。
- en: Adding the form component to the page component
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将表单组件添加到页面组件中
- en: 'Next, we’ll add `BirthdayForm` into the existing page component for the `/``birthdays`
    route:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将`BirthdayForm`添加到现有的`/birthdays`路由的页面组件中：
- en: 'Start by adding this test in `src/routes/birthdays/page.test.js`, as shown.
    We are testing for the presence of `BirthdayForm` simply by checking for an HTML
    element with the `form` role:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`src/routes/birthdays/page.test.js`中添加这个测试，如下所示。我们通过检查具有`form`角色的HTML元素的存在来测试`BirthdayForm`：
- en: '[PRE12]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using previously prepared work to make tests pass
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用先前准备的工作来使测试通过
- en: We *could* make this test pass by just adding a new `form` element, but given
    that we have `form` already prepared in `BirthdayForm`, it makes sense to use
    that. We’ll see how component mocks can be used to make this test more specific
    in [*Chapter 11*](B19611_11.xhtml#_idTextAnchor127), *Replacing Behavior with
    a* *Side-By-Side Implementation*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们*可以*通过仅添加一个新的`form`元素来使这个测试通过，但鉴于我们已经在`BirthdayForm`中准备了`form`，使用它是有意义的。我们将在[*第11章*](B19611_11.xhtml#_idTextAnchor127)，“用*并行实现*替换行为”中看到如何使用组件模拟来使这个测试更具体。
- en: 'To make this pass, start by inserting the new `import` statement into `src/routes/birthdays/+page.svelte`:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使这个测试通过，首先将新的`import`语句插入到`src/routes/birthdays/+page.svelte`中：
- en: '[PRE13]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, add a reference to the `BirthdayForm` component, together with a heading.
    Since the heading will remain static data, we don’t need a test for that. Our
    Vitest tests are for *behavior* only – things that change when props change or
    **Document Object Model** (**DOM**) events fire:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加对`BirthdayForm`组件的引用，以及一个标题。由于标题将保持静态数据，我们不需要为它编写测试。我们的Vitest测试仅针对*行为*——当props改变或**文档对象模型**（**DOM**）事件触发时发生变化的事物：
- en: '[PRE14]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'While you’re here, you can also update the tag to make sure `div` has the same
    style as the `li` elements:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在这里时，你还可以更新标签以确保`div`具有与`li`元素相同的样式：
- en: '[PRE15]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You’ve now learned how to test-drive a form component and how to hook it up
    to your `page` component. That’s it for the new `BirthdayForm` component, and
    if you load the dev server now and browse to the `/birthdays` URL, you should
    see the form displayed on the page.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经学会了如何测试驱动表单组件以及如何将其连接到你的`page`组件。这就是新的`BirthdayForm`组件的全部内容，如果你现在加载开发服务器并浏览到`/birthdays`
    URL，你应该会在页面上看到表单。
- en: In the next section, we’ll wire up the **Save** button so that it adds the new
    birthday data into the system.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将连接**保存**按钮，以便将新的生日数据添加到系统中。
- en: Test-driving a SvelteKit form action
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动SvelteKit表单操作
- en: 'The `form` action is the thing that SvelteKit calls when the form is submitted.
    It is defined in the `+page.server.js` file as an object named `actions`. The
    general form is shown in the following code block. Don’t add this just yet; we’ll
    come to it later on:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`form`操作是SvelteKit在表单提交时调用的东西。它在`+page.server.js`文件中定义为一个名为`actions`的对象。一般形式如下所示。现在不要添加这个；我们稍后会讨论它：'
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is what we’ll test-drive now. There’s a few things to note:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们现在要测试驱动的内容。有几个需要注意的点：
- en: 'First, the Vitest unit tests can check the behavior of the `form` action, but
    it doesn’t check any of the SvelteKit framework code that invokes the action.
    You’ll recall we took the same approach with the HTML form: we didn’t test the
    `submit` action since that magic is managed by SvelteKit. For testing the framework
    integration, we need the Playwright tests.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，Vitest单元测试可以检查`form`操作的行为，但它不会检查调用该操作的SvelteKit框架代码。你会记得我们用同样的方法对HTML表单进行了测试：我们没有测试`submit`操作，因为这种魔法是由SvelteKit管理的。为了测试框架集成，我们需要Playwright测试。
- en: Second, if you take a look at the preceding code sample, the form action has
    an action parameter with a `formData` function. This returns an item of the `FormData`
    type, which is a built-in DOM type.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，如果你看一下前面的代码示例，表单操作有一个带有`formData`函数的动作参数。这个函数返回一个`FormData`类型的项，这是一个内置的DOM类型。
- en: If we’re going to test the `form` action, we’ll need a way to build these `FormData`
    objects.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们要测试 `form` 操作，我们需要一种方法来构建这些 `FormData` 对象。
- en: What we’ll do is create factory methods to generate example objects for use
    in our tests. After that, we’ll build our form action. However, in order to do
    that, we’ll need to replace our hardcoded load function with a *real* implementation.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的就是创建工厂方法来生成用于测试的示例对象。之后，我们将构建我们的表单操作。然而，为了做到这一点，我们需要用 *真实* 实现替换我们的硬编码加载函数。
- en: Building a factory for the FormData objects
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建 FormData 对象的工厂
- en: 'Create a new file named `src/factories/formDataRequest.js` and add the following
    function:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `src/factories/formDataRequest.js` 的新文件，并添加以下函数：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This function takes a plain JavaScript object and converts it into a `FormData`
    object by repeatedly calling the `append` method with each of the `obj` key-value
    pairs.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数接受一个纯 JavaScript 对象，并通过反复调用 `append` 方法将每个 `obj` 键值对转换为 `FormData` 对象。
- en: 'Next, add the `createFormDataRequest` function, as shown in the following code
    block. It returns a SvelteKit request object that behaves in the same way that
    SvelteKit will:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加 `createFormDataRequest` 函数，如下面的代码块所示。它返回一个与 SvelteKit 相同行为的 SvelteKit
    请求对象：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can now use this within your Vitest tests for the form action.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以使用这个在 Vitest 测试的表单操作中。
- en: Building a Vitest test suite for the form action
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为表单操作构建 Vitest 测试套件
- en: 'Open the `src/routes/birthdays/page.server.test.js` file and update `load import`
    to also import the `actions` object:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `src/routes/birthdays/page.server.test.js` 文件，并更新 `load import` 以导入 `actions`
    对象：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Just below that, add a new `import` statement for the `createFormDataRequest`
    factory that you just defined:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在那下面，添加一个新的 `import` 语句，用于你刚刚定义的 `createFormDataRequest` 工厂：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, at the bottom of the file, in a new top-level describe block, add the
    following test:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在文件的底部，在一个新的顶级 `describe` 块中，添加以下测试：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This test builds a request, calls our form action with it, and then uses the
    `load` function to check that it’s returned successfully. But there’s a difficulty
    here. Because our `load` function from the preceding chapter had a hardcoded implementation,
    there’s no way for us to add any new data there.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试构建一个请求，用此调用我们的表单操作，然后使用 `load` 函数检查它是否成功返回。但这里有一个困难。因为前一章中的 `load` 函数有一个硬编码的实现，我们无法在那里添加任何新数据。
- en: Before we can make this test pass, we need to replace our hardcoded `load` function
    with a version that will then make this test easy to pass.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以使这个测试通过之前，我们需要将我们的硬编码 `load` 函数替换为一个版本，这样就可以使这个测试容易通过。
- en: Skipping tests as part of a TDD workflow
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 跳过测试作为 TDD 工作流程的一部分
- en: Sometimes, we write a *Red* test and are ready to make it *Green*. But the approach
    to making it *Green* involves a whole bunch of refactoring. In these scenarios,
    it is better to rewind by marking the new *Red* test as skipped. Then you can
    safely refactor while you are on *Green*. Once your refactor is complete, un-skip
    your test, and you’re back on *Red*. Now make the test pass given all your refactoring
    work is done.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们会编写一个 *Red* 测试并准备好将其变为 *Green*。但使其 *Green* 的方法涉及大量的重构。在这些情况下，最好通过标记新的 *Red*
    测试为跳过来回退。然后你可以在 *Green* 的状态下安全地进行重构。一旦你的重构完成，取消跳过你的测试，你就可以回到 *Red*。现在，在所有重构工作完成后，使测试通过。
- en: Why go through this dance? Because you have the safety of a fully *Green* test
    suite to tell whether your Refactor has been completed correctly or not.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要经历这个舞蹈？因为你有完全 *Green* 测试套件的安全感，可以告诉你你的重构是否正确完成。
- en: 'Start by skipping the test you just added, like this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，像这样跳过你刚刚添加的测试：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Re-run all your tests to check that they are passing, except for the skipped
    test:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行所有测试以检查它们是否通过，除了跳过的测试：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now in the `src/routes/birthdays/+page.server.js` file, update the implementation
    to read as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在 `src/routes/birthdays/+page.server.js` 文件中，更新实现如下：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This new implementation gives us an `addNew` function that we can use in our
    latest test.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新实现给我们提供了一个 `addNew` 函数，我们可以在最新的测试中使用它。
- en: 'Re-run all tests and check that they have passed. Then, you can un-skip the
    latest test and re-run it. You should get a failure, as shown in the following
    block:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行所有测试并检查它们是否通过。然后，你可以取消跳过最新的测试并重新运行它。你应该会得到一个失败，如下面的代码块所示：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Okay; we can just add an empty `default` function to get started. Add the following
    to the bottom of the `src/routes/birthdays/+page.server.js` file:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧；我们可以添加一个空的 `default` 函数开始。将以下内容添加到 `src/routes/birthdays/+page.server.js`
    文件的底部：
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If you run the tests again, you’ll see from the failure that all the plumbing
    seems fine; it’s just that we’re missing the important call to add the birthday:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你再次运行测试，你会从失败中看到所有管道似乎都正常；只是我们遗漏了添加生日的重要调用：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, make the test pass by adding the call to the `addNew` function that
    already exists:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过添加对已存在的 `addNew` 函数的调用使测试通过：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Re-run your tests; the tests should all be passing now. And if you run the
    Playwright test, you should find it also passes:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行你的测试；现在所有测试都应该通过了。如果你运行 Playwright 测试，也应该发现它也通过了：
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now would be a great time to fire up the dev server and try the form out for
    real.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是启动开发服务器并真正尝试表单的好时机。
- en: You’ve now learned how to test-drive a SvelteKit form action, completing the
    last stage of work needed to fully test-drive an entire route.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经学会了如何测试驱动 SvelteKit 表单操作，完成了全面测试整个路由所需工作的最后阶段。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has covered how to test-drive SvelteKit forms and form actions
    using both Playwright end-to-end tests and Vitest unit tests.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何使用 Playwright 端到端测试和 Vitest 单元测试来测试驱动 SvelteKit 表单和表单操作。
- en: You have seen how Vitest is useful for testing all the peculiarities of individual
    Svelte components but isn’t good at testing the framework code of SvelteKit, such
    as the code that takes an HTML form submit event, builds a server request, and
    invokes your form action. For that, you need a Playwright test.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到了 Vitest 在测试单个 Svelte 组件的所有特殊性方面是有用的，但并不擅长测试 SvelteKit 的框架代码，例如处理 HTML
    表单提交事件、构建服务器请求并调用你的表单操作的代码。为此，你需要一个 Playwright 测试。
- en: In the next chapter, you’ll build on this form by adding some server-side form
    validations.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将通过添加一些服务器端表单验证来扩展这个表单。
