- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Stack Development Technologies
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 栈开发技术
- en: Knowing what tools and apps to use can speed up your development process significantly.
    That is why we need to prepare our development environment first before typing
    lines of code. The development environment should make you feel comfortable and
    help you throughout the process of learning and writing your microservices.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 了解要使用哪些工具和应用程序可以显著加快您的开发过程。这就是为什么我们需要在编写代码之前首先准备我们的开发环境。开发环境应该让您感到舒适，并在学习编写微服务的过程中为您提供帮助。
- en: It is like building a house. Choosing the right tools can speed up the process
    and save you time. Of course, having the right tools doesn’t mean you will succeed,
    but it is better to fail with the right ones than to have the cause of failure
    be the choice of tools.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像建造一栋房子。选择合适的工具可以加快进程并节省时间。当然，拥有合适的工具并不意味着你一定会成功，但选择正确的工具失败总比因为工具选择不当而失败要好。
- en: This chapter focuses on installing the required tools. The programming language
    and frameworks are also tools for us to build microservices. In one form or another,
    everything we use while writing software is a tool for us. It makes no sense to
    install all the tools we plan to use at this point, but at least understanding
    how to install most of them will help us to switch to coding faster.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍安装所需的工具。编程语言和框架也是我们构建微服务的工具。以某种形式或另一种形式，我们在编写软件时使用的所有东西都是我们的工具。现在安装我们计划使用的所有工具没有意义，但至少理解如何安装其中大部分工具将帮助我们更快地进入编码阶段。
- en: We will also have a look at some of the Node.js frameworks that we plan to use
    in this book. Understanding them is crucial for fast and easy development.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将查看本书中计划使用的一些 Node.js 框架。理解它们对于快速和轻松的开发至关重要。
- en: 'In this chapter, we’re going to cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Node.js and its installation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 及其安装
- en: Node.js frameworks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 框架
- en: Choosing the right IDE
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择合适的 IDE
- en: Understanding and installing Docker
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解和安装 Docker
- en: Understanding and installing Apache Kafka
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解和安装 Apache Kafka
- en: Understanding and installing Git
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解和安装 Git
- en: Installing Postman
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Postman
- en: Installing MongoDB
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 MongoDB
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with this chapter, you only need a browser of your choice and
    an internet connection. Regarding the rest of the tools we plan to use, we will
    learn how to install them in this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章内容，您只需要选择一个浏览器以及互联网连接。关于我们计划使用的其他工具，我们将在本章中学习如何安装它们。
- en: Node.js and its installation
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js 及其安装
- en: 'As we learned in the previous chapter, Node.js is a runtime environment built
    on Google’s V8 engine. You can build a wide variety of applications using it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中学到的，Node.js 是建立在 Google 的 V8 引擎之上的运行时环境。您可以使用它构建各种应用程序：
- en: '**Web applications**: Node.js is a popular choice for building both the backend
    and frontend of web applications. Its JavaScript-based environment makes it easy
    for developers to work on both sides.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web 应用程序**：Node.js 是构建 Web 应用程序后端和前端的热门选择。其基于 JavaScript 的环境使得开发者能够轻松地在两个方向上工作。'
- en: '**Real-time applications**: Node.js’s event-driven architecture and non-blocking
    I/O model make it ideal for building real-time applications such as chat apps,
    collaboration tools, and streaming services. These applications require constant
    communication between users and the server, and Node.js can handle this efficiently.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时应用程序**：Node.js 的事件驱动架构和非阻塞 I/O 模型使其非常适合构建实时应用程序，如聊天应用、协作工具和流媒体服务。这些应用程序需要用户和服务器之间持续的通信，而
    Node.js 可以高效地处理这一点。'
- en: '**Single-page applications** (**SPAs**): SPAs are web applications that load
    a single HTML page and update the content dynamically using JavaScript. Node.js
    can be used to build the backend API that provides data to the SPA client-side
    code.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单页应用程序**（**SPAs**）：SPAs 是一种网页应用程序，它加载单个 HTML 页面，并使用 JavaScript 动态更新内容。可以使用
    Node.js 来构建后端 API，为 SPAs 的客户端代码提供数据。'
- en: '**API-driven applications**: Many modern applications rely on **application
    programming interfaces** (**APIs**) to access data and functionality from other
    services. Node.js is a great choice for building these APIs due to its ability
    to handle many concurrent requests efficiently.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API 驱动的应用程序**：许多现代应用程序依赖于 **应用程序编程接口**（**APIs**）来访问其他服务的数据和功能。由于 Node.js
    能够高效地处理大量并发请求，因此它是构建这些 API 的绝佳选择。'
- en: '**Microservices**: Node.js is well-suited for building microservices because
    of its modular nature and asynchronous capabilities.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务**：由于Node.js具有模块化和异步能力，非常适合构建微服务。'
- en: '**Command-line tools**: Node.js can be used to create command-line tools that
    automate tasks or interact with other systems.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令行工具**：Node.js可以用来创建命令行工具，以自动化任务或与其他系统交互。'
- en: '**Desktop applications**: While less common, Node.js can also be used to build
    desktop applications with frameworks such as Electron.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**桌面应用程序**：虽然不太常见，但Node.js也可以使用Electron等框架来构建桌面应用程序。'
- en: Of course, this is not the full list, but it gives you a good idea of the wide
    range of applications that can be built with Node.js.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这并不是完整的列表，但它为你提供了一个很好的概念，即可以用Node.js构建的广泛的应用程序范围。
- en: Learning some technology or language mostly starts with installing the required
    tools. The same applies to Node.js. So, let’s dive into its installation process.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 学习某些技术或语言通常从安装所需的工具开始。Node.js也是如此。那么，让我们深入了解其安装过程。
- en: Installing Node.js for Windows
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Windows版本的Node.js
- en: You might be surprised but I’m a big fan of Microsoft and its products. This
    means I’m using a Windows **operating system** (**OS**). All types of installations
    will be explained using mainly the *Windows OS,* but I will provide the relevant
    links to help non-Windows users be on the same level of progress.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会感到惊讶，但我非常喜欢微软及其产品。这意味着我使用的是Windows **操作系统**（**OS**）。所有类型的安装都将主要使用*Windows
    OS*进行解释，但我将提供相关的链接，以帮助非Windows用户达到相同的进度水平。
- en: When installing Node.js from the official page ([www.nodejs.org](http://www.nodejs.org)),
    it automatically detects your OS and provides the exact OS instructions to install
    it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当从官方网站（[www.nodejs.org](http://www.nodejs.org)）安装Node.js时，它会自动检测你的操作系统并提供安装的确切说明。
- en: We also have different ways of installing Node.js, even for the same OS. The
    most popular ones are prebuilt installers and installation via package manager.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有不同的安装Node.js的方式，即使是对于同一操作系统。最受欢迎的是预构建安装程序和通过包管理器安装。
- en: 'Let’s follow these step-by-step instructions to install Node.js:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下分步说明来安装Node.js：
- en: Go to [www.nodejs.org/en/download](http://www.nodejs.org/en/download). In my
    case, I’ll be using Windows-based instructions.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [www.nodejs.org/en/download](http://www.nodejs.org/en/download)。在我的情况下，我将使用基于Windows的说明。
- en: Select **prebuilt installer**.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**预构建安装程序**。
- en: From the tab, select the required version of Node.js, along with the OS and
    CPU architecture to run it (*Figure 4**.1*).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标签页中，选择要运行的Node.js的所需版本，包括操作系统和CPU架构（*图4.1*）。
- en: 'You might be wondering which version of Node.js to choose – **LTS** or **Current**?
    Well, the answer is easy:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能想知道应该选择Node.js的哪个版本——**LTS**还是**当前**版本？答案是简单的：
- en: For long-term use, where things need to stay stable and work well together,
    the **LTS** version is a safe bet. It’s a reliable option.
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于长期使用，需要保持稳定并协同工作的情况，**LTS**版本是一个安全的选择。这是一个可靠的选项。
- en: On the other hand, the **Current** version has all the latest bells and whistles,
    which is great for programmers who want to try out new features.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，**当前**版本拥有所有最新的功能和特性，这对于想要尝试新功能的程序员来说非常棒。
- en: For our code examples, the LTS version is sufficient. Select it and continue.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于我们的代码示例，LTS版本就足够了。选择它并继续。
- en: '![Figure 4.1: The Node.js installation page](img/B09148_04_1.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图4.1：Node.js安装页面](img/B09148_04_1.jpg)'
- en: 'Figure 4.1: The Node.js installation page'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1：Node.js安装页面
- en: These same instructions are applicable for *non-Windows* users. You need to
    select your appropriate OS and its platform and click the green **Download Node.js**
    **v<version_number>** button. Depending on the selected version, the version on
    the button will automatically be updated. We’ll look at this installation in depth
    in the next section.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些相同的说明也适用于*非Windows*用户。你需要选择你的适当操作系统及其平台，然后点击绿色的**下载Node.js** **v<版本号>**按钮。根据所选版本，按钮上的版本将自动更新。我们将在下一节深入探讨这个安装过程。
- en: 'When installing, just accept the license and follow the wizard’s instructions
    without any custom setup configuration. In the middle of the installation, the
    wizard will require you to select how the app will behave when compiling native
    modules. It is preferable to select the checkbox shown in (*Figure 4**.2*):'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装过程中，只需接受许可协议并按照向导的说明进行，无需进行任何自定义设置配置。在安装过程中间，向导将要求你选择应用程序在编译本地模块时的行为。最好选择如(*图4.2*)所示的复选框：
- en: '![Figure 4.2: Node.js’s “Tools for Native Modules” window](img/B09148_04_2.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2：Node.js的“原生模块工具”窗口](img/B09148_04_2.jpg)'
- en: 'Figure 4.2: Node.js’s “Tools for Native Modules” window'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2：Node.js的“原生模块工具”窗口
- en: If you select the **Automatically install** checkbox (*Figure 4**.2*), it will
    install additional tools like Chocolatey, Python, and Visual Studio Build Tools.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择 **自动安装** 复选框（*图 4.2*），它将安装额外的工具，如Chocolatey、Python和Visual Studio Build
    Tools。
- en: 'After installation, just press the *Win* + *R* combination and type `node`
    in the window that opens:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，只需按下 *Win* + *R* 组合键，然后在打开的窗口中输入 `node`：
- en: '![Figure 4.3: The input window for running your commands](img/B09148_04_3.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3：运行命令的输入窗口](img/B09148_04_3.jpg)'
- en: 'Figure 4.3: The input window for running your commands'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3：运行命令的输入窗口
- en: 'After typing `node`, hit *Enter*. You should see the following app:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `node` 后，按 *Enter* 键。你应该会看到以下应用程序：
- en: '![Figure 4.4: Node command line](img/B09148_04_4.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4：Node命令行](img/B09148_04_4.jpg)'
- en: 'Figure 4.4: Node command line'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4：Node命令行
- en: The window shown in *Figure 4**.4* is a **read-eval-print loop** (**REPL**),
    which serves as a programming language environment, akin to a console window (*Figure
    4**.5*). It accepts a single expression as input from the user, processes it,
    and then displays the result in the console. It is a handy method for promptly
    experimenting with basic JavaScript code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 4.4* 中显示的窗口是一个 **读取-评估-打印循环**（**REPL**），它作为一个编程语言环境，类似于控制台窗口（*图 4.5*）。它接受用户输入的单个表达式，处理它，然后在控制台中显示结果。这是一个快速实验基本JavaScript代码的好方法。
- en: '![Figure 4.5: Node.js REPL](img/B09148_04_5.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5：Node.js REPL](img/B09148_04_5.jpg)'
- en: 'Figure 4.5: Node.js REPL'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5：Node.js REPL
- en: Now, let’s continue our discussion of installing Node.js in terms of macOS and
    Linux.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续讨论在macOS和Linux上安装Node.js的讨论。
- en: Installing Node.js for macOS and Linux
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为macOS和Linux安装Node.js
- en: 'One of the easiest options for macOS and Linux users is to use a package-manager-based
    installation. Select your OS and go to the **Package Manager** section. From the
    **using** section, you can select the active management tool (*NVM*, *Brew*, *Chocolatey*,
    or *Docker*) and follow the instructions provided in that window (*Figure 4**.6*):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于macOS和Linux用户来说，最简单的方法之一是使用基于包管理器的安装。选择你的操作系统，然后转到 **包管理器** 部分。在 **使用** 部分，你可以选择活动管理工具（*NVM*、*Brew*、*Chocolatey*
    或 *Docker*）并遵循该窗口中提供的说明（*图 4.6*）：
- en: '![Figure 4.6: Node.js installation for different OSs](img/B09148_04_6.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6：不同操作系统的Node.js安装](img/B09148_04_6.jpg)'
- en: 'Figure 4.6: Node.js installation for different OSs'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6：不同操作系统的Node.js安装
- en: 'If you want to download Node.js for Linux distributions using NVM, you should
    follow the instructions provided here:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用NVM下载适用于Linux发行版的Node.js，应遵循此处提供的说明：
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Please note that Node.js versions may differ while you read this book. For more
    up-to-date installation instructions, please read Node.js’s official page.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在阅读本书时，Node.js的版本可能会有所不同。对于更详细的安装说明，请阅读Node.js的官方页面。
- en: While Node.js is our primary tool while developing microservices, throughout
    the learning process, we will also use some of Node.js’s frameworks to make our
    lives easier. The most popular ones that we’ll use in this book are *NestJS* and
    *Express.js*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Node.js是我们开发微服务时的主要工具，但在整个学习过程中，我们也会使用一些Node.js的框架来简化我们的工作。本书中我们将使用最流行的两个框架，即
    *NestJS* 和 *Express.js*。
- en: Node.js frameworks
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js框架
- en: Node.js has a lot of interesting frameworks. We’ll be using *NestJS* and *Express.js*
    (we look at more on these frameworks shortly) but of course, more frameworks rely
    on Node.js, and it is impossible to use all of them in a single book and even
    if possible, it doesn’t make too much sense to do it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js有很多有趣的框架。我们将使用 *NestJS* 和 *Express.js*（我们将在稍后详细介绍这些框架）但当然，更多的框架依赖于Node.js，并且在一本书中不可能使用所有这些框架，即使可能，这样做也没有太多意义。
- en: First things first, Node.js is not a framework but a runtime environment that
    executes JavaScript code outside the browser. Some developers call it a framework
    but that is not true. We need to understand the term framework to understand whether
    something is a framework or not. In programming, a **framework** is essentially
    a pre-built structure that serves as a foundation for creating software applications.
    It’s like a blueprint that you can customize to fit your specific needs, rather
    than having to start entirely from scratch. Frameworks come with pre-written code
    for common functionalities, such as handling user input, database interactions,
    or security. These components act as building blocks that you can leverage to
    save time and effort.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Node.js 不是一个框架，而是一个在浏览器外执行 JavaScript 代码的运行时环境。一些开发者称之为框架，但这并不准确。我们需要理解框架这个术语，才能判断某物是否是框架。在编程中，**框架**基本上是一个预先构建的结构，作为创建软件应用的基础。它就像一个你可以根据特定需求定制的蓝图，而不是从头开始。框架提供了用于常见功能的预写代码，例如处理用户输入、数据库交互或安全性。这些组件作为构建块，你可以利用它们来节省时间和精力。
- en: Frameworks often have a defined way of organizing your code, which ensures consistency
    and makes it easier for other developers to understand and maintain the code base.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 框架通常有定义好的代码组织方式，这确保了一致性，并使其他开发者更容易理解和维护代码库。
- en: A key aspect of frameworks is an *inversion of control*. Instead of your code
    calling into the framework, the framework calls your code at specific points.
    This allows the framework to manage the overall flow of the application.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 框架的一个关键方面是**控制反转**。不是你的代码调用框架，而是在特定的点上框架调用你的代码。这允许框架管理应用程序的整体流程。
- en: With that information, you can tell Node.js is not a framework. It is just a
    runtime, but we have frameworks that are built on *top* of Node.js. The most popular
    ones are *NestJS*, *Express.js*, *MeteorJS*, and *SailsJS*. Oh, by the way – many
    popular frameworks, such as *Sails*, *NestJS*, *Kraken*, *poet*, and *Item API*,
    are built on Express. As mentioned previously, we’ll be using NestJS and Express.js,
    so let’s look at them closely.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些信息，你可以知道 Node.js 不是一个框架。它只是一个运行时环境，但我们有建立在 Node.js 之上的框架。最受欢迎的包括 *NestJS*、*Express.js*、*MeteorJS*
    和 *SailsJS*。顺便说一句——许多流行的框架，如 *Sails*、*NestJS*、*Kraken*、*poet* 和 *Item API*，都是建立在
    Express.js 之上的。如前所述，我们将使用 NestJS 和 Express.js，让我们来仔细看看它们。
- en: Express.js
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Express.js
- en: '**Express.js** simplifies the web development process. By using Express.js
    effectively, you can create dynamic and interactive web experiences for your users.
    Because Express.js is lightweight, it’s a great choice for creating web applications
    that need to perform well under heavy traffic. One of the key features of Express.js
    is its ability to handle different routes, which are essentially paths users take
    to access specific parts of your web application.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**Express.js** 简化了网络开发过程。通过有效地使用 Express.js，你可以为用户创建动态和交互式的网络体验。由于 Express.js
    轻量级，它是创建需要在高流量下表现良好的网络应用的绝佳选择。Express.js 的一个关键特性是它处理不同路由的能力，这些路由本质上是用户访问你网络应用特定部分所走的路径。'
- en: Imagine Node.js as the building blocks and tools, like bricks and mortar. Express.js
    is like prefabricated walls and plumbing – it gives you a structured way to assemble
    those blocks to create a web application faster. Building a complex web application
    with just Node.js can get messy. Express.js provides a framework so that you can
    organize your code into routes, middleware, and views, making it more maintainable
    and easier for others to understand.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Node.js 想象成构建块和工具，就像砖块和灰浆。Express.js 就像预制墙体和管道——它为你提供了一个结构化的方式来组装这些块，以更快地创建网络应用。仅使用
    Node.js 构建复杂网络应用可能会变得混乱。Express.js 提供了一个框架，这样你可以将代码组织成路由、中间件和视图，使其更易于维护和他人理解。
- en: While you can build everything from scratch with Node.js, Express.js offers
    built-in features for handling routes, handling HTTP requests and responses, and
    creating APIs, saving you time and effort.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以用 Node.js 从头开始构建一切，但 Express.js 提供了内置的功能来处理路由、处理 HTTP 请求和响应以及创建 API，为你节省时间和精力。
- en: Express.js is a popular framework with a vast community of developers. This
    means you have access to a wealth of resources, tutorials, and additional libraries
    to streamline development. While there are other Node.js frameworks available,
    Express.js is a strong choice due to its simplicity, flexibility, and large community
    support.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Express.js 是一个流行的框架，拥有庞大的开发者社区。这意味着你可以访问大量的资源、教程和额外的库，以简化开发。尽管有其他Node.js框架可供选择，但由于其简单性、灵活性和庞大的社区支持，Express.js
    仍然是一个不错的选择。
- en: NestJS
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NestJS
- en: '**NestJS** is a framework built on top of Node.js that is specifically useful
    for building robust and scalable server-side applications.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**NestJS** 是一个建立在 Node.js 之上的框架，专门用于构建健壮和可扩展的服务器端应用程序。'
- en: NestJS enforces a clear and organized architecture for your application. This
    makes complex projects easier to manage and maintain, especially for teams of
    developers. It integrates seamlessly with TypeScript, a superset of JavaScript
    that adds static typing for improved code reliability and fewer errors. It also
    promotes a modular approach, where you break down your application into smaller,
    reusable components. This makes your code base more organized and easier to scale
    as your application grows.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: NestJS 为你的应用程序强制执行一个清晰和有序的架构。这使得复杂项目更容易管理和维护，特别是对于开发者团队。它与 TypeScript 无缝集成，TypeScript
    是 JavaScript 的超集，它为代码添加了静态类型，提高了代码可靠性并减少了错误。它还促进了模块化方法，即将你的应用程序分解成更小、可重用的组件。这使得你的代码库更有组织，并且随着应用程序的增长更容易进行扩展。
- en: Note
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Another piece of good news is that if you’re familiar with *Angular*, a popular
    frontend framework that NestJS borrows many concepts, it makes it easier to learn
    and use for Angular developers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个好消息是，如果你熟悉 *Angular*，一个 NestJS 借用了许多概念的流行的前端框架，这将使 Angular 开发者更容易学习和使用。
- en: NestJS goes beyond basic web applications. You can build RESTful APIs, GraphQL
    APIs, WebSockets applications, and even command-line interfaces using this framework.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: NestJS 超越了基本的Web应用程序。你可以使用这个框架构建RESTful API、GraphQL API、WebSocket应用程序，甚至命令行界面。
- en: It also utilizes **dependency injection**, a powerful technique for managing
    dependencies between different parts of your application. This promotes loose
    coupling and makes your code more testable.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 它还利用了 **依赖注入**，这是一种管理应用程序不同部分之间依赖关系的强大技术。这促进了松散耦合，并使你的代码更容易进行测试。
- en: Long story short, NestJS provides a structured and feature-rich toolkit on top
    of Node.js, allowing you to build scalable and maintainable server-side applications
    efficiently.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，NestJS 在 Node.js 的基础上提供了一个结构化和功能丰富的工具包，使你能够高效地构建可扩展和可维护的服务器端应用程序。
- en: Choosing between Express.js and Node.js
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Express.js 和 Node.js 之间做出选择
- en: 'This book is not about Node.js frameworks, and our aim is not to provide full
    information about them. However, having fundamental knowledge about the differences
    between these two will help us to have a broader understanding. Let’s outline
    some situations where either of these frameworks would be a good fit. With this
    understanding, you’ll be able to make a more informed decision and pick the right
    framework for your project:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书不是关于 Node.js 框架的，我们的目标也不是提供关于它们的完整信息。然而，了解这两者之间的基本差异将有助于我们有一个更广泛的理解。让我们概述一些这些框架适合的情况。有了这种理解，你将能够做出更明智的决定，并为你的项目选择正确的框架：
- en: '**Use Express.js in the** **following situations**:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在以下情况下使用 Express.js**：'
- en: If your project is small or medium-sized. For simpler web applications or APIs,
    Express.js’s lightweight and flexible nature might be ideal.
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的项目是小型的或中等规模的。对于更简单的Web应用程序或API，Express.js 的轻量级和灵活特性可能非常理想。
- en: If you prioritize flexibility. Express.js offers more control over your application’s
    structure, allowing you to tailor it to your specific needs.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你优先考虑灵活性。Express.js 提供了对你的应用程序结构的更多控制，允许你根据具体需求进行定制。
- en: If you’re familiar with JavaScript. If you’re comfortable with vanilla JavaScript,
    the learning curve for Express.js is gentler.
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你熟悉 JavaScript。如果你对原生 JavaScript 感到舒适，Express.js 的学习曲线会更加平缓。
- en: '**Use NestJS in the** **following situations**:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在以下情况下使用 NestJS**：'
- en: If your project is large or complex. NestJS’s structured architecture and features
    are beneficial for managing and maintaining bigger applications with multiple
    developers.
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的项目很大或很复杂。NestJS 的结构化架构和功能对于管理和维护由多个开发者参与的大型应用程序非常有用。
- en: If you value scalability. NestJS’s modular design makes it easier to scale your
    application as it grows in terms of features and complexity.
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你重视可扩展性，NestJS的模块化设计使得随着功能和复杂性的增长，你的应用程序更容易进行扩展。
- en: If you want built-in features. NestJS offers features such as dependency injection
    and support for TypeScript out of the box, improving code maintainability and
    reliability.
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要内置功能，NestJS提供了诸如依赖注入和TypeScript支持等开箱即用的功能，这提高了代码的可维护性和可靠性。
- en: If your team is familiar with Angular. If your developers have experience with
    Angular, NestJS’s similar structure can ease the learning curve.
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的团队熟悉Angular。如果你的开发者有Angular的经验，NestJS的类似结构可以减轻学习曲线。
- en: After installing Node.js, we need to prepare our **integrated development environment**
    (**IDE**) for development.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Node.js之后，我们需要为开发准备我们的**集成开发环境**（**IDE**）。
- en: Choosing the right IDE
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择合适的IDE
- en: Choosing the right IDE may help you do fast development. For Node.js development,
    especially to follow our code examples, we don’t have strict requirements related
    to IDE. You can use your favorite text editor or built-in text editor for your
    OS. Choosing the right IDE is a taste and functionality preference. An IDE helps
    you in syntax highlighting, autocompletion, and refactoring, and also easily interacts
    with important libraries. You can use different IDEs, such as *Visual Studio Code*,
    *Eclipse Che*, *Sublime Text*, *WebStorm*, and *IntelliJ IDEA*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 选择合适的IDE可能有助于你快速开发。对于Node.js开发，尤其是为了跟随我们的代码示例，我们没有对IDE有严格的要求。你可以使用你喜欢的文本编辑器或操作系统内置的文本编辑器。选择合适的IDE是一种口味和功能偏好的选择。IDE可以帮助你在语法高亮、自动完成和重构，并且可以轻松地与重要库进行交互。你可以使用不同的IDE，例如*Visual
    Studio Code*、*Eclipse Che*、*Sublime Text*、*WebStorm*和*IntelliJ IDEA*。
- en: We prefer Visual Studio Code because it is free, easy to use, can be extended
    using extensions, is cross-platform compatible, easily configurable, and supports
    multiple programming languages.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更喜欢Visual Studio Code，因为它免费、易于使用、可以通过扩展进行扩展、跨平台兼容、易于配置，并支持多种编程语言。
- en: 'Let’s install Visual Studio Code. To install it, just follow these instructions:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装Visual Studio Code。要安装它，只需遵循以下说明：
- en: Go to [https://code.visualstudio.com/download](https://code.visualstudio.com/download).
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://code.visualstudio.com/download](https://code.visualstudio.com/download)。
- en: Click on your OS version and wait for the download to be completed.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击你的操作系统版本，等待下载完成。
- en: Click on the file you’ve downloaded and follow the default instructions.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击你下载的文件，并按照默认说明进行操作。
- en: As you learn microservices development, you’ll become familiar with the classical
    application installation process. For that reason, we haven’t provided detailed
    screenshots and won’t be spending too much time on installation details. For more
    information, you can simply search for the relevant application installation instructions
    on Google.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你学习微服务开发，你会熟悉经典的应用程序安装过程。因此，我们没有提供详细的截图，也不会在安装细节上花费太多时间。更多信息，你可以在Google上简单地搜索相关应用程序安装说明。
- en: 'Visual Studio Code provides a rich extension library for all needs (*Figure
    4**.7*). You can download anything you want to help you do fast development, refactor,
    highlight your code, and more:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code为所有需求提供了丰富的扩展库（*图4.7*）。你可以下载任何你想要的东西来帮助你快速开发、重构、突出显示你的代码等等：
- en: '![Figure 4.7: Visual Studio Code’s EXTENSIONS section](img/B09148_04_7.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图4.7：Visual Studio Code的扩展部分](img/B09148_04_7.jpg)'
- en: 'Figure 4.7: Visual Studio Code’s EXTENSIONS section'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7：Visual Studio Code的扩展部分
- en: After installing our IDE, it is time to install Docker. It is a must-have tool,
    especially nowadays for microservice application development. We’ll be actively
    using Docker in our development, so let’s dive in.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完我们的集成开发环境（IDE）后，是时候安装Docker了。它是一个必备的工具，尤其是在如今微服务应用开发中。我们将在开发中积极使用Docker，所以让我们深入了解一下。
- en: Understanding and installing Docker
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和安装Docker
- en: Before installing Docker, we need to understand its value and purpose.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Docker之前，我们需要了解它的价值和目的。
- en: '**Docker** is like a shipping container for your software. It packages everything
    your application needs to run – the code, libraries, and settings – and bundles
    them together. This ensures your application runs everywhere, in any OS without
    any issues. It guarantees that if the application works locally, it will work
    globally.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker**就像是你软件的运输集装箱。它将你的应用程序运行所需的一切——代码、库和设置——打包在一起，并将它们捆绑在一起。这确保了你的应用程序可以在任何操作系统上无任何问题地运行。它保证了如果应用程序在本地运行良好，那么它将在全球范围内运行。'
- en: Docker guarantees your application runs exactly how you built it, every time.
    No more surprises due to different computer setups.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Docker确保您的应用程序每次都以您构建的方式运行。不再因为不同的计算机配置而出现惊喜。
- en: The main concepts in Docker are images and containers. **Containers** are lightweight
    and start up quickly, making testing and development cycles much smoother. You
    can simply ship the Docker container to any environment, cloud-based or not, and
    be confident it will work. Containers share the underlying OS, so you can run
    more applications on a single machine without bogging it down.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Docker中的主要概念是镜像和容器。**容器**轻量级且启动速度快，使得测试和开发周期更加顺畅。您可以轻松地将Docker容器发送到任何环境，无论是基于云的还是不是，并且可以确信它将正常工作。容器共享底层操作系统，因此您可以在单台机器上运行更多应用程序，而不会使其过载。
- en: In the world of Docker, an **image** is like a blueprint for a Docker container.
    It’s a set of instructions that specify what goes inside the container, including
    the software, libraries, and configurations needed for your application to run.
    You build an image once, and you can use it to create many containers, saving
    you time and effort. Images can be shared and downloaded easily, allowing you
    to run your application on any machine with Docker. One of the advantages of images
    is that everyone using the same image gets the same environment, reducing surprises
    and ensuring reliable application behavior.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker的世界里，**镜像**就像Docker容器的蓝图。它是一组指令，指定了容器内部需要什么，包括应用程序运行所需的软件、库和配置。您只需构建一次镜像，就可以用它来创建许多容器，节省您的时间和精力。镜像可以轻松共享和下载，允许您在安装了Docker的任何机器上运行您的应用程序。镜像的一个优点是，使用相同镜像的每个人都会得到相同的环境，减少了惊喜并确保了应用程序行为的可靠性。
- en: If you don’t want to install some applications to your computer *forever* and
    easily remove them after development is done, it would be better to not directly
    install them but use Docker for your installation.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想将某些应用程序永久安装在您的计算机上，并且在开发完成后轻松地移除它们，那么最好不是直接安装它们，而是使用Docker进行安装。
- en: In the end, Docker simplifies the process of building, shipping, and running
    applications. It’s like having a universal box for your software, ensuring it
    runs flawlessly wherever it goes.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Docker简化了构建、运输和运行应用程序的过程。它就像是一个软件的通用盒子，确保它无论在哪里运行都能完美运行。
- en: That’s enough theory – let’s dive into the Docker installation process.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 理论已经足够了——让我们深入了解Docker的安装过程。
- en: You can install Docker for almost all popular OSs, such as Windows, Linux, and
    Mac. It may have specific requirements for your OS, which you can learn about
    by navigating to [https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/).
    Then, you can select your OS to install it.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您几乎可以在所有流行的操作系统上安装Docker，例如Windows、Linux和Mac。它可能对您的操作系统有特定的要求，您可以通过导航到[https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/)来了解这些要求。然后，您可以选择您的操作系统进行安装。
- en: 'Note that requirements may vary by the OS’s internal version. In the **System
    requirements** section, you’ll see prerequisites based on the internal version
    of the selected OS (*Figure 4**.8*). For instance, for Windows, we have **WSL
    2 backend** and **Hyper-V backend and Windows containers** system requirements:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，需求可能因操作系统的内部版本而异。在**系统需求**部分，您将看到基于所选操作系统内部版本的先决条件（*图4.8*）。例如，对于Windows，我们有**WSL
    2后端**和**Hyper-V后端以及Windows容器**的系统需求：
- en: '![Figure 4.8: Docker’s System requirements section](img/B09148_04_8.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图4.8：Docker的系统需求部分](img/B09148_04_8.jpg)'
- en: 'Figure 4.8: Docker’s System requirements section'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8：Docker的系统需求部分
- en: If your OS meets the provided system requirements, you’ll be able to install
    Docker Desktop (*Figure 4**.8*). For Windows, **WSL 2** is recommended over **Hyper-V**.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的操作系统满足提供的系统需求，您将能够安装Docker桌面（*图4.8*）。对于Windows，建议使用**WSL 2**而不是**Hyper-V**。
- en: 'The installation is a straightforward process and doesn’t require any additional
    configuration:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程简单直接，不需要任何额外的配置：
- en: '![Figure 4.9: Docker Desktop](img/B09148_04_9.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图4.9：Docker桌面](img/B09148_04_9.jpg)'
- en: 'Figure 4.9: Docker Desktop'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.9：Docker桌面
- en: 'Docker is not the only powerful tool that we need to use when building microservices.
    We have another great tool that helps us have real-time communication between
    our microservices: Apache Kafka.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Docker不是我们在构建微服务时需要使用的唯一强大工具。我们还有另一个优秀的工具，它可以帮助我们在微服务之间进行实时通信：Apache Kafka。
- en: Understanding and installing Apache Kafka
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和安装Apache Kafka
- en: '**Apache Kafka** is an open-source platform that handles real-time data streams.
    Originally designed as a messaging queue, it has evolved into a robust system
    for streaming data and building event-driven architectures. Communication between
    microservices is crucial, and that’s where Kafka shines.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**Apache Kafka** 是一个开源平台，用于处理实时数据流。最初设计为一个消息队列，它已经发展成为一个强大的数据流和事件驱动架构构建系统。微服务之间的通信至关重要，这正是
    Kafka 发挥其优势的地方。'
- en: Kafka itself is a huge concept that needs a different book. In this book, we’re
    going to provide enough information that we’ll be able to integrate and use it
    for our microservices. For more detailed information, you can follow my *Apache
    Kafka for Distributed Systems* course on the Udemy platform ([https://www.udemy.com/course/apache-kafka-for-distributed-systems/](https://www.udemy.com/course/apache-kafka-for-distributed-systems/)).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka 本身是一个庞大的概念，需要另一本书来详细阐述。在这本书中，我们将提供足够的信息，以便我们能够将其集成并用于我们的微服务。如需更详细的信息，您可以在
    Udemy 平台上跟随我的 *Apache Kafka for Distributed Systems* 课程（[https://www.udemy.com/course/apache-kafka-for-distributed-systems/](https://www.udemy.com/course/apache-kafka-for-distributed-systems/)）。
- en: Kafka uses a **publish-subscribe** messaging model. Services, acting as producers,
    publish events to specific channels known as **topics** within Kafka. Other services,
    functioning as consumers, subscribe to relevant topics and receive these events
    asynchronously.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka 使用 **发布-订阅** 消息模型。服务作为生产者，将事件发布到 Kafka 内部的特定通道，称为 **主题**。其他服务作为消费者，订阅相关主题并异步接收这些事件。
- en: This approach beautifully decouples services from one another. Producers don’t
    need to wait for consumers to be available, and consumers can process events at
    their own pace. This improves scalability and flexibility.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法巧妙地将服务彼此解耦。生产者不需要等待消费者可用，消费者可以按自己的节奏处理事件。这提高了可扩展性和灵活性。
- en: Kafka also acts as a buffer, storing events until consumers are ready. This
    enables asynchronous processing, which prevents bottlenecks and improves overall
    system responsiveness.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka 还充当缓冲区，存储事件直到消费者准备好。这实现了异步处理，防止了瓶颈并提高了整体系统的响应速度。
- en: Kafka is built for reliability. It replicates data across multiple nodes, ensuring
    that messages aren’t lost even if a server fails. This enhances fault tolerance
    within the microservices architecture.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka 是为可靠性而构建的。它会在多个节点之间复制数据，确保即使服务器出现故障，消息也不会丢失。这增强了微服务架构中的容错能力。
- en: It’s important to know that Kafka scales horizontally. You can easily add more
    nodes to handle increasing data volumes without impacting existing services. This
    caters perfectly to the dynamic nature of microservices.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要知道 Kafka 可以水平扩展。您可以轻松地添加更多节点来处理不断增长的数据量，而不会影响现有服务。这完美地适应了微服务的动态特性。
- en: As mentioned previously, a key feature of Kafka is its ability to handle real-time
    data streams. This is valuable for microservices that need to react to events
    promptly, such as in fraud detection or stock trading applications.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Kafka 的一个关键特性是它处理实时数据流的能力。这对于需要迅速响应事件的微服务来说非常有价值，例如在欺诈检测或股票交易应用中。
- en: Kafka is flexibly related to programming languages and integrates seamlessly
    with various programming languages, making it adaptable to diverse microservice
    environments.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka 可以灵活地与编程语言相关联，并与各种编程语言无缝集成，使其能够适应不同的微服务环境。
- en: '**Kafka Streams**, a powerful API within Kafka, empowers you to perform real-time
    computations and transformations on data streams within the Kafka cluster itself.
    This stream processing capability adds significant value to microservice architectures.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kafka Streams**，Kafka 内部的一个强大 API，使您能够在 Kafka 集群内部对数据流进行实时计算和转换。这种流处理能力为微服务架构增添了显著的价值。'
- en: Long story short, by integrating Apache Kafka, microservice development benefits
    from increased scalability, resilience, and agility. It fosters a loosely coupled,
    event-driven approach that empowers microservices to communicate and react to
    changes effectively. This translates to a more robust, adaptable, and high-performing
    application architecture.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，通过集成 Apache Kafka，微服务开发从增加的可扩展性、弹性和敏捷性中受益。它促进了松散耦合的事件驱动方法，使微服务能够有效地进行通信和响应变化。这转化为更稳健、适应性强和高性能的应用程序架构。
- en: Apache Kafka’s installation varies by OS, and you need some additional configuration
    per OS.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Kafka 的安装因操作系统而异，您需要根据每个操作系统进行一些额外的配置。
- en: Also, along with Apache Kafka, we may use Zookeeper and Kafka UI. Starting from
    Apache Kafka `v4`, you won’t need Zookeeper. However, this feature is still in
    development, so it makes sense to understand it also. Zookeeper has multiple responsibilities
    and plays a critical role as the coordinator.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，除了 Apache Kafka，我们还可能使用 Zookeeper 和 Kafka UI。从 Apache Kafka `v4` 开始，您将不再需要
    Zookeeper。然而，此功能仍在开发中，因此了解它也很有意义。Zookeeper 承担多个职责，并在协调器中扮演着关键角色。
- en: Kafka itself is a CLI-based tool, so if you want to see things graphically,
    you’ll need additional tools, such as Kafka UI, Offset Explorer, and more.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka 本身是一个基于 CLI 的工具，因此如果您想以图形方式查看内容，则需要额外的工具，例如 Kafka UI、偏移量探索器等。
- en: 'But I have good news for you. If you have Docker installed, there is no need
    to dive into the details of the installation process. We can create a `docker-compose`
    file to combine the required tools and install them together. You can download
    files one by one, but `docker-compose` helps you to create a special YAML file
    where you can define all the tools and application dependencies and install them
    together. Here is our `docker-compose` file’s content:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 但我有好消息要告诉您。如果您已安装 Docker，则无需深入了解安装过程。我们可以创建一个 `docker-compose` 文件来组合所需的工具并一起安装。您可以逐个下载文件，但
    `docker-compose` 帮助您创建一个特殊的 YAML 文件，您可以在其中定义所有工具和应用程序依赖项并一起安装。以下是我们的 `docker-compose`
    文件内容：
- en: '[PRE1]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To install Apache Kafka, you need to follow these instructions:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Apache Kafka，您需要遵循以下说明：
- en: Open Docker Desktop.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开 Docker Desktop。
- en: Go to `Ch04``/docker-compose.yml` and download it to your computer.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前往 `Ch04``/docker-compose.yml` 并将其下载到您的计算机上。
- en: Open the command line from the folder and type `docker-compose` `up -d`.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从文件夹中打开命令行并输入 `docker-compose` `up -d`。
- en: 'Docker should start pooling the images and create containers based on these
    images (*Figure 4**.10*):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 应该开始收集镜像并根据这些镜像创建容器（*图 4**.10*）：
- en: '![Figure 4.10: Docker with running containers](img/B09148_04_10.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.10：运行中的 Docker 容器](img/B09148_04_10.jpg)'
- en: 'Figure 4.10: Docker with running containers'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10：运行中的 Docker 容器
- en: Now, we are ready to move forward and understand how to install Git, an essential
    tool under a developer’s belt.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好向前迈进，了解如何安装 Git，这是开发者工具箱中的必备工具。
- en: Understanding and installing Git
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和安装 Git
- en: Git is a powerful **version control system** (**VCS**) for software development.
    Imagine it as a time machine for your code. It tracks every change you make to
    your project, like a detailed logbook.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是一种强大的 **版本控制系统**（**VCS**），用于软件开发。想象它就像你代码的时间机器。它跟踪你对项目所做的每一个更改，就像一本详细的日志簿。
- en: With Git, you can easily revert to a previous version of your code, essentially
    undoing any errors.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Git，您可以轻松地回滚到代码的先前版本，本质上撤销了任何错误。
- en: It makes collaboration easy. Working with a team? Git lets everyone collaborate
    seamlessly. Each team member can work on their part of the project, and Git helps
    merge their changes smoothly, avoiding conflicts.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 它使协作变得容易。与团队一起工作？Git 允许每个人无缝协作。每个团队成员都可以在自己的项目部分工作，Git 帮助他们平滑地合并更改，避免冲突。
- en: It also keeps a detailed history of all the changes, allowing you to see exactly
    what modifications were made and by whom. This is crucial for tracking progress
    and understanding the project’s journey.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 它还记录了所有更改的详细历史，让您可以确切地看到所做的修改以及由谁进行的。这对于跟踪进度和理解项目的发展历程至关重要。
- en: 'Git is one of the most important tools that we use in our day-to-day development
    process. You can install Git for any popular OS, particularly for Linux, Windows,
    and Mac:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是我们在日常开发过程中使用的重要工具之一。您可以为任何流行的操作系统安装 Git，尤其是 Linux、Windows 和 Mac：
- en: For more detailed instructions for *Linux*, go to [https://git-scm.com/download/linux](https://git-scm.com/download/linux).
    There, you can find a Linux-distribution-based installation for Git.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取关于 *Linux* 的更详细说明，请访问 [https://git-scm.com/download/linux](https://git-scm.com/download/linux)。在那里，您可以找到基于
    Linux 发行版的 Git 安装程序。
- en: As with other popular tools, we have multiple options to install Git on *macOS*.
    Go to [https://git-scm.com/download/mac](https://git-scm.com/download/mac) to
    learn more about it.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他流行工具一样，我们在 *macOS* 上安装 Git 有多种选择。请访问 [https://git-scm.com/download/mac](https://git-scm.com/download/mac)
    了解更多信息。
- en: 'For *Windows*, I prefer to use the **Git for Windows** tool. You can download
    it from [https://gitforwindows.org/](https://gitforwindows.org/). This application
    provides Git Bash and Git GUI mechanisms (*Figure 4**.11*). You can use any of
    them throughout your development:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 *Windows*，我更喜欢使用 **Git for Windows** 工具。你可以从 [https://gitforwindows.org/](https://gitforwindows.org/)
    下载它。此应用程序提供 Git Bash 和 Git GUI 功能（*图 4.11*）。你可以在整个开发过程中使用它们：
- en: '![Figure 4.11: Git for Windows](img/B09148_04_11.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.11：Git for Windows](img/B09148_04_11.jpg)'
- en: 'Figure 4.11: Git for Windows'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11：Git for Windows
- en: There’s another tool we need to install. Let’s continue our installation journey
    with Postman.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要安装另一个工具。让我们继续我们的 Postman 安装之旅。
- en: Installing Postman
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Postman
- en: The penultimate tool we’ll cover in this chapter is Postman. We’ll build a lot
    of APIs, and we need some tools to rapidly and easily test them. It’s a tool that
    helps developers interact with and test APIs.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将介绍的最后一种工具是 Postman。我们将构建许多 API，并且我们需要一些工具来快速轻松地测试它们。这是一个帮助开发者与 API 交互和测试的工具。
- en: 'Here’s what Postman helps you do:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Postman 帮助你做的事情：
- en: '**Build APIs**: You can design and plan out your API using Postman’s tools.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建 API**：你可以使用 Postman 的工具设计和规划你的 API。'
- en: '**Test APIs**: Send requests (such as asking for information) and see the responses
    (the information you get back) from the API. This helps ensure the API works as
    expected.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试 API**：发送请求（例如请求信息）并查看 API 的响应（你得到的信息）。这有助于确保 API 按预期工作。'
- en: '**Work with APIs**: Postman lets you easily send different kinds of requests
    to APIs and see the results. It’s like having a remote control for the API.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与 API 交互**：Postman 允许你轻松地向 API 发送不同类型的请求并查看结果。这就像拥有 API 的遥控器。'
- en: 'Here’s how you can install it:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你可以安装它的方法：
- en: Go to [https://www.postman.com/downloads/](https://www.postman.com/downloads/).
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://www.postman.com/downloads/](https://www.postman.com/downloads/)。
- en: Click on your OS’s name and download the relevant file.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击你的操作系统名称并下载相关文件。
- en: Install it.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装它。
- en: 'After installing Postman, open it. At this point, you can insert any URL into
    the URL section. There, you can also select the HTTP method (`GET`, `POST`, `PUT`,
    and so on) for that URL and send the request (*Figure 4**.12*):'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Postman 后，打开它。此时，你可以在 URL 部分插入任何 URL。在那里，你还可以为该 URL 选择 HTTP 方法（`GET`、`POST`、`PUT`
    等）并发送请求（*图 4.12*）：
- en: '![Figure 4.12: An overview of Postman](img/B09148_04_12.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.12：Postman 概览](img/B09148_04_12.jpg)'
- en: 'Figure 4.12: An overview of Postman'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12：Postman 概览
- en: 'With that, let’s move on to the final tool in this chapter: MongoDB.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们继续本章的最后一个工具：MongoDB。
- en: Installing MongoDB
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 MongoDB
- en: MongoDB is a popular NoSQL database. We will use it when we develop microservices
    and it might be a good choice for you in the future when you build microservices.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB 是一个流行的 NoSQL 数据库。我们在开发微服务时会使用它，未来当你构建微服务时，它可能也是一个不错的选择。
- en: 'You may consider MongoDB based on the following characteristics:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以考虑 MongoDB 的以下特性：
- en: '**Document-oriented**: Unlike traditional relational databases, which store
    data in tables with rows and columns, MongoDB stores data in flexible JSON-like
    documents. This makes it easier to represent complex data structures.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向文档**：与传统的基于行和列的表格存储数据的数据库不同，MongoDB 使用灵活的类似 JSON 的文档来存储数据。这使得表示复杂的数据结构变得更容易。'
- en: '**Scalable**: MongoDB can handle large datasets and high-traffic applications
    by scaling horizontally. It does this by adding more servers to the database cluster.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：MongoDB 通过水平扩展可以处理大量数据集和高流量应用程序。它是通过向数据库集群添加更多服务器来实现的。'
- en: '**Flexible schema**: MongoDB allows for flexible schema design. Documents within
    a collection can have different structures. This is useful for storing data that
    doesn’t fit neatly into rigid table structures.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活的模式**：MongoDB 允许灵活的模式设计。集合内的文档可以有不同的结构。这对于存储不适合整齐的表格结构的数据库很有用。'
- en: '**Cross-platform**: MongoDB runs on various OSs, including Windows, Linux,
    and macOS.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨平台**：MongoDB 在各种操作系统上运行，包括 Windows、Linux 和 macOS。'
- en: '**Open source**: The core MongoDB server is open source and free to use, with
    a variety of commercial licenses available for additional features and support.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开源**：MongoDB 的核心服务器是开源的，并且免费使用，同时提供多种商业许可证，以提供额外的功能和支持。'
- en: 'To install MongoDB Server, just navigate to [https://www.mongodb.com/docs/manual/installation/](https://www.mongodb.com/docs/manual/installation/)
    and select your platform. At the time of writing, you can install it on Linux,
    macOS, Windows, and Docker. MongoDB has two available editions: Community and
    Enterprise. To experiment and test it, the Community edition will be enough.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 MongoDB 服务器，只需导航到 [https://www.mongodb.com/docs/manual/installation/](https://www.mongodb.com/docs/manual/installation/)
    并选择您的平台。在撰写本文时，您可以在 Linux、macOS、Windows 和 Docker 上安装它。MongoDB 有两个可用的版本：社区版和企业版。为了实验和测试，社区版将足够使用。
- en: 'Another useful product for interacting with MongoDB is the MongoDB Compass
    application. It can be found at [https://www.mongodb.com/try/download/compass](https://www.mongodb.com/try/download/compass)
    and is free. You can install it for different platforms:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用于与 MongoDB 交互的有用产品是 MongoDB Compass 应用程序。您可以在 [https://www.mongodb.com/try/download/compass](https://www.mongodb.com/try/download/compass)
    找到它，并且它是免费的。您可以为不同的平台安装它：
- en: '![Figure 4.13: MongoDB Compass supports different platforms](img/B09148_04_13.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.13：MongoDB Compass 支持不同的平台](img/B09148_04_13.jpg)'
- en: 'Figure 4.13: MongoDB Compass supports different platforms'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13：MongoDB Compass 支持不同的平台
- en: MongoDB Compass is a free, **graphical user interface** (**GUI**) tool specifically
    designed for interacting with MongoDB databases. It essentially acts as a user-friendly
    client application that simplifies managing and working with your data.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB Compass 是一个免费、**图形用户界面**（**GUI**）工具，专门设计用于与 MongoDB 数据库交互。它本质上充当一个用户友好的客户端应用程序，简化了管理和处理您的数据。
- en: 'You can use it for the following purposes:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用它进行以下目的：
- en: '**Visualizing data**: Compass allows you to browse collections, view documents
    in a clear and organized format, and explore the structure of your data.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可视化数据**：Compass 允许您浏览集合，以清晰和有组织的格式查看文档，并探索您数据的结构。'
- en: '**Querying**: You can write and execute queries directly within Compass to
    filter and retrieve specific data from your MongoDB databases.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询**：您可以直接在 Compass 中编写和执行查询，以过滤和从您的 MongoDB 数据库中检索特定数据。'
- en: '**Building complex queries**: Compass provides a visual interface for building
    aggregation pipelines, which are powerful tools for transforming and analyzing
    your data.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建复杂查询**：Compass 提供了一个可视化界面来构建聚合管道，这些是转换和分析您数据的强大工具。'
- en: '**CRUD operations**: Compass allows you to easily'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CRUD 操作**：Compass 允许您轻松'
- en: '**create, read, update, and delete** (**CRUD**) documents within your collections.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在您的集合中创建、读取、更新和删除**（**CRUD**）文档。'
- en: '**Schema analysis**: Compass helps you understand the structure and relationships
    within your data by providing schema visualization.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式分析**：Compass 通过提供模式可视化来帮助您理解您数据内部的结构和关系。'
- en: '**Index optimization**: Compass can recommend and assist with creating indexes
    on your collections to optimize query performance.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引优化**：Compass 可以推荐并协助在您的集合上创建索引以优化查询性能。'
- en: '**Connection management**: Compass allows you to connect to various MongoDB
    deployments, including local servers, cloud instances, and containers.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接管理**：Compass 允许您连接到各种 MongoDB 部署，包括本地服务器、云实例和容器。'
- en: Overall, MongoDB Compass offers a user-friendly and intuitive way to interact
    with your MongoDB databases. It’s a valuable tool for database administrators,
    developers, and anyone who needs to explore, analyze, and manage their MongoDB
    data.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，MongoDB Compass 提供了一种用户友好且直观的方式来与您的 MongoDB 数据库交互。它是数据库管理员、开发人员以及任何需要探索、分析和管理其
    MongoDB 数据的人的有价值工具。
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Having a well-prepared development environment is crucial for a smooth and efficient
    software development process. By installing the necessary tools and programs beforehand,
    you eliminate the need to scramble for them mid-development, saving valuable time.
    A configured environment ensures a consistent workflow. You know exactly where
    your files are located, how to run them, and what commands to use. This reduces
    cognitive load and lets you focus on coding.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个准备良好的开发环境对于顺利和高效的软件开发过程至关重要。通过事先安装必要的工具和程序，您可以消除在开发过程中寻找它们的需要，节省宝贵的时间。一个配置好的环境确保了一致的工作流程。您确切地知道您的文件在哪里，如何运行它们以及要使用哪些命令。这减少了认知负荷，让您能够专注于编码。
- en: Using the same tools throughout the project helps maintain code style and consistency.
    This makes the code easier to read, understand, and maintain for yourself and
    others.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个项目中使用相同的工具有助于保持代码风格和一致性。这使得代码更容易阅读、理解和维护，无论是对于您自己还是其他人。
- en: When everyone on the team uses the same development environment, collaboration
    becomes smoother. They can easily share code, troubleshoot issues, and understand
    each other’s work.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 当团队中的每个人都使用相同的开发环境时，协作变得更加顺畅。他们可以轻松地共享代码、解决问题，并理解彼此的工作。
- en: In this chapter, we talked about the tools we need to install before starting
    our development journey. Of course, we haven’t installed all the tools, but the
    main ones are here. We’ll introduce additional tools as needed in future chapters,
    ensuring the installation process is straightforward.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了在开始我们的开发之旅之前需要安装的工具。当然，我们还没有安装所有工具，但主要工具都在这里。我们将在未来的章节中根据需要介绍额外的工具，确保安装过程简单明了。
- en: If you’re here, then congratulations! Starting from the next chapter, we will
    dive into the details of microservice development in practice.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在这里，那么恭喜你！从下一章开始，我们将深入探讨微服务开发的实践细节。
- en: Part 2:Building and Managing Microservices
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2部分：构建和管理微服务
- en: In this part, we will dive into the practical aspects of building microservices
    with JavaScript. We’ll start by creating a basic CRUD (Create, Read/Retrieve,
    Update, Delete) microservice and then move on to more advanced concepts, such
    as synchronous and asynchronous communication between services. We will also cover
    real-time data streaming, which is essential for creating responsive and dynamic
    applications.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分，我们将深入探讨使用 JavaScript 构建微服务的实际方面。我们将从创建一个基本的 CRUD（创建、读取/检索、更新、删除）微服务开始，然后继续探讨更高级的概念，例如服务之间的同步和异步通信。我们还将涵盖实时数据流，这对于创建响应性和动态的应用程序至关重要。
- en: 'This part contains the following chapters:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 5*](B09148_05.xhtml#_idTextAnchor074), *Basic CRUD* *Microservices*'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B09148_05.xhtml#_idTextAnchor074)，*基本的 CRUD 微服务*'
- en: '[*Chapter 6*](B09148_06.xhtml#_idTextAnchor104), *Synchronous Microservices*'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B09148_06.xhtml#_idTextAnchor104)，*同步微服务*'
- en: '[*Chapter 7*](B09148_07.xhtml#_idTextAnchor121), *Asynchronous Microservices*'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B09148_07.xhtml#_idTextAnchor121)，*异步微服务*'
- en: '[*Chapter 8*](B09148_08.xhtml#_idTextAnchor135), *Real-Time Data Streaming
    Using Microservices*'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B09148_08.xhtml#_idTextAnchor135)，*使用微服务的实时数据流*'
