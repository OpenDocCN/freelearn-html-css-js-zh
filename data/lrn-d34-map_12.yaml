- en: Publishing Your Visualization with Github Pages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GitHub Pages 发布您的可视化
- en: Once done with the hard work of creating your visualization, you should show
    it to the world, and the internet seems the perfect place for that.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成创建您的可视化的艰苦工作后，您应该向世界展示它，而互联网似乎是展示它的完美场所。
- en: 'In this chapter, you will learn how to publish your visualization online. There
    are several ways to do so, stretching from simple command line one-liners using
    your machine as a server, to full-fledged hosting services that require you to
    build and deploy a server yourself. We will focus on a simple, fast and convenient
    way—**GitHub Pages**. Here’s what we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何在线发布您的可视化。有几种方法可以实现，从使用您的机器作为服务器执行简单的命令行单行命令，到需要您自己构建和部署服务器的完整托管服务。我们将重点介绍一种简单、快速且方便的方法——**GitHub
    Pages**。以下是我们将涵盖的内容：
- en: Get an understanding of Git, GitHub, and GitHub Pages
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Git、GitHub 和 GitHub Pages
- en: Create a GitHub repository with your files and folders
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个包含您的文件和文件夹的 GitHub 仓库
- en: Upload your files to GitHub and edit them for publishing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的文件上传到 GitHub 并编辑它们以供发布
- en: Publish your visualization on GitHub Pages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 GitHub Pages 上发布您的可视化
- en: These are all easy steps, no matter whether you are a seasoned Git and GitHub
    user or if you have just started out. Let’s dive into it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤都很简单，无论您是经验丰富的 Git 和 GitHub 用户，还是刚刚开始，都是如此。让我们深入探讨。
- en: What we will publish
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们将要发布的内容
- en: 'First, you need something to publish. Let’s assume that after mapping so many
    earthly things, you were reaching for outer space—mapping our solar system:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要一些可以发布的内容。假设在映射了这么多地球事物之后，您正在向太空进发——映射我们的太阳系：
- en: '![](img/b9d10ab8-3739-40a8-a02e-3de166cd7333.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9d10ab8-3739-40a8-a02e-3de166cd7333.png)'
- en: Planets in pink
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 粉红色的行星
- en: This visual shows all planets of our solar system in a row, ordered from left
    to right by their distance to the sun and showing their scaled sizes in relation
    to each other. It also shows the sun (not a planet, but a star) and Pluto (officially,
    a dwarf planet).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个可视化显示了我们的太阳系中所有的行星，按从左到右的顺序排列，按距离太阳的远近排列，并显示它们相对于彼此的缩放大小。它还显示了太阳（不是一个行星，而是一颗恒星）和冥王星（官方上，是一颗矮行星）。
- en: So, at this stage, you have a visualization in an HTML file or in a set of files
    stitched together in an HTML or JavaScript file; that's all you need. Your published
    work is just a few clicks away, thanks to how simple GitHub Pages makes the process.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这个阶段，您在 HTML 文件或一组拼接到 HTML 或 JavaScript 文件中的文件中有一个可视化；这就是您所需要的。由于 GitHub
    Pages 使过程变得如此简单，您的发布作品只需几步即可完成。
- en: Feel free to take a peek at the GitHub account we will set up, including the
    code at [https://github.com/GoodToBeHere/pink-planets](https://github.com/GoodToBeHere/pink-planets)
    as well as the published visual at [https://goodtobehere.github.io/pink-planets/](https://goodtobehere.github.io/pink-planets/)
    or at [planetsin.pink/](http://planetsin.pink/).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎查看我们将设置的 GitHub 账户，包括代码在 [https://github.com/GoodToBeHere/pink-planets](https://github.com/GoodToBeHere/pink-planets)
    以及发布的视觉作品在 [https://goodtobehere.github.io/pink-planets/](https://goodtobehere.github.io/pink-planets/)
    或 [planetsin.pink/](http://planetsin.pink/)。
- en: Understanding the type of content you can publish
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解您可以发布的内容类型
- en: Before we jump into it, let's briefly consider what type of content GitHub Pages
    can host. In short, GitHub Pages will let you serve any **static web page** or
    pages with **dynamic client-side scripting**. If you want to host projects with
    dynamic server-side scripting, you might want to opt for a different setup, for
    example, **Heroku**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入之前，让我们简要地考虑一下 GitHub Pages 可以托管的内容类型。简而言之，GitHub Pages 将允许您托管任何 **静态网页**
    或具有 **动态客户端脚本** 的网页。如果您想托管具有动态服务器端脚本的项目，您可能需要选择不同的设置，例如 **Heroku**。
- en: In simple terms, static or flat web pages consist of a set of files—or at least
    a single HTML file that serves the same content to every user. If you want to
    change the content, you need to change the source code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，静态或平面网页由一组文件组成——或者至少是一个为每个用户提供相同内容的单个 HTML 文件。如果您想更改内容，您需要更改源代码。
- en: Dynamic web pages consist of a set of files that await external requests or
    inputs to then build, change, and serve the content on the fly. They might show
    different contents for different users, or for different times of the day or operating
    systems.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 动态网页由一组等待外部请求或输入的文件组成，然后即时构建、更改并服务内容。它们可能为不同的用户显示不同的内容，或者在不同时间或操作系统上显示。
- en: 'There are two types of dynamic web pages:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 动态网页有两种类型：
- en: Web pages with **client-side scripting** usually use JavaScript and its derivatives
    to translate user input to a changed DOM structure. It does so *client-side*,
    which means that it happens entirely within the bounds of the browser.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **客户端脚本** 的网页通常使用 JavaScript 及其衍生品将用户输入转换为更改后的 DOM 结构。它是 *客户端* 执行的，这意味着它完全在浏览器的范围内发生。
- en: Web pages with **server-side scripting** require input parameters passed all
    the way to the application’s server. Server-side languages such as PHP, Python,
    Node.js, or the like assemble the page content in a situation-bespoke way, often
    with information retrieved from databases.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **服务器端脚本** 的网页需要将输入参数传递到应用程序的服务器。PHP、Python、Node.js 或类似的服务器端语言以特定情况的方式组装页面内容，通常是从数据库中检索信息。
- en: In short, you can host your project on GitHub Pages if it’s not dependent on
    server-side scripting. You can facilitate user input as long as it happens within
    the bounds of the client. You can join and update all data that comes from a flat
    file stored as such on your GitHub page. This can be a `.csv` or otherwise delimited
    data file, but you can’t connect to, for example, a relational SQL database (which
    relies on structured interrelationships). You can, of course, calculate and recalculate
    data, as long as it happens client-side.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，如果您的项目不依赖于服务器端脚本，您可以在 GitHub Pages 上托管它。只要用户输入在客户端范围内发生，您就可以促进用户输入。您可以在
    GitHub 页面上加入和更新所有来自存储为平文件的数据，这可以是 `.csv` 或其他分隔数据文件，但您不能连接到，例如，一个关系型 SQL 数据库（它依赖于结构化的相互关系）。当然，您可以在客户端计算和重新计算数据。
- en: It is important to be aware of this limitation in order to choose the right
    hosting technology to publish your visualization. However, many D3 projects in
    the wild can be hosted as static web pages or dynamic pages with exclusive client-side
    scripting.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了选择合适的托管技术来发布您的可视化，了解这一限制非常重要。然而，野外许多 D3 项目可以作为静态网页或具有专用客户端脚本的动态网页托管。
- en: Hosting your code on GitHub
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GitHub 上托管您的代码
- en: In this section, we’ll set you up for the publishing of your visual. We’ll explain
    a few key terms that will help understand GitHub and its purpose; we create an
    account, upload our content, and prepare it for publishing. This will be a gentle
    introduction to GitHub. If you already have an account and know about repositories,
    committing, pulling, pushing, merging, and branches feel free to jump on to the
    *Publishing your project on GitHub Pages* section.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为您设置视觉内容的发布。我们将解释一些关键术语，这将有助于理解 GitHub 及其目的；我们创建账户，上传我们的内容，并为其发布做准备。这将是对
    GitHub 的温和介绍。如果您已经有了账户并且了解仓库、提交、拉取、推送、合并和分支，请自由跳转到 *在 GitHub Pages 上发布您的项目* 部分。
- en: Making sense of some key terms and concepts
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解一些关键术语和概念
- en: Let’s look at some terminology first. If you are a seasoned Git or GitHub user,
    feel free to skip this introduction.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看一些术语。如果您是经验丰富的 Git 或 GitHub 用户，请自由跳过这个介绍。
- en: This is a very high-level introduction to Git and GitHub, and by no means complete.
    If you want to learn more about Git, I recommend reading the excellent documentation
    at [https://git-scm.com/](https://git-scm.com/). If you want to know more about
    GitHub, [https://guides.github.com/activities/hello-world/](https://guides.github.com/activities/hello-world/)
    is a great place to start.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对 Git 和 GitHub 的非常高级的介绍，绝对不是完整的。如果您想了解更多关于 Git 的信息，我建议阅读优秀的文档 [https://git-scm.com/](https://git-scm.com/)。如果您想了解更多关于
    GitHub 的信息，[https://guides.github.com/activities/hello-world/](https://guides.github.com/activities/hello-world/)
    是一个很好的起点。
- en: Git is a **distributed version control system**. Let’s break that down. **Version
    control** of a file (usually a text file such as a `.html` or `.js` file) just
    means keeping track of all the changes made to the file. Before you can use it,
    you need to download, install, and initialize it in the folder you would like
    to track files in. Git has three core concepts that make your coding life easier.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是一个 **分布式版本控制系统**。让我们来分解一下。文件的 **版本控制**（通常是一个文本文件，如 `.html` 或 `.js` 文件）仅仅意味着跟踪文件的所有更改。在使用它之前，您需要下载、安装并在您想要跟踪文件的文件夹中初始化它。Git
    有三个核心概念，可以让您的编码生活变得更轻松。
- en: Tracking historic changes of your files
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪您文件的历次更改
- en: Once initialized in a folder, Git allows you to save or **commit** a file to
    that folder after you changed it. Without Git, you might stoop to making explicit
    copies of a file you’re working on and misusing its name to represent the version
    such as `myFile-v01.html` and `myFile-v02.html`. Instead, Git will assign a commit
    ID to each commit. Going back through all your commits is easy; just open or check
    out the version you would like to see. Usually, you don’t just version control
    a single file but many files living in different project folders. The root folder
    of all the key files you want to version control, the one you initialized Git
    in, is called the Git **repository**.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在一个文件夹中初始化，Git 允许你在更改文件后将其保存或**提交**到该文件夹。如果没有 Git，你可能不得不降低到显式复制你正在工作的文件，并滥用其名称来表示版本，例如
    `myFile-v01.html` 和 `myFile-v02.html`。相反，Git 会为每个提交分配一个提交 ID。回顾所有提交很容易；只需打开或检出你想要看到的版本即可。通常，你不仅仅控制单个文件，而是控制位于不同项目文件夹中的多个文件。所有你想要进行版本控制的键文件的主文件夹，你在其中初始化
    Git 的文件夹，被称为 Git **仓库**。
- en: Collaborating on a project
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在项目上进行协作
- en: The big advantage of Git, as compared to its predecessors, is that it is distributed.
    It allows many people to access the same project files and each person with granted
    access sees the full history of versions for each file. It is made for collaboration.
    To share a repository, it needs to be accessible by some sort of network, for
    example, the internet. This is where GitHub comes into play.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与其前辈相比，Git 的一大优势在于它是分布式的。它允许许多人访问同一项目文件，并且每个获得授权的人都能看到每个文件的完整版本历史。它是为了协作而设计的。为了共享仓库，它需要通过某种网络方式可访问，例如，互联网。这就是
    GitHub 发挥作用的地方。
- en: Assuming that you start a project with the bold goal of visualizing our solar
    system, you can start coding on your own. You create your own local repository
    and add and commit the files you want to track in the repository. A few days and
    many commits later, you realize that this is much too large a task for you to
    pull off alone. You invite friends to help you. In order to work on the code base
    together, you upload all your files to GitHub and tie it to your local repository
    via Git. Git now knows that there is a local repository of your project and a
    remote repository mirroring the local repository.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你以一个明确的目标开始一个项目，即可视化我们的太阳系，你可以自己开始编码。你创建自己的本地仓库，并将你想要在仓库中跟踪的文件添加和提交。几天后，经过多次提交，你意识到这个任务对你一个人来说太大，难以完成。你邀请朋友来帮忙。为了共同工作在代码库上，你将所有文件上传到
    GitHub，并通过 Git 将其与本地仓库关联起来。Git 现在知道有一个本地仓库和远程仓库，后者镜像了本地仓库。
- en: Once you have made changes to a file locally and committed them, you can overwrite
    the same file on the remote GitHub repository by **push**ing this file up. Your
    friends can **pull** the changes you made down to their local machines and see
    the exact same files you see, including the file with the changes you just made
    and all changes made previously.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在本地对文件进行了更改并提交了它们，你可以通过**推送**这个文件来覆盖远程 GitHub 仓库中的相同文件。你的朋友可以将你做出的更改拉到他们的本地机器上，看到与你完全相同的文件，包括你刚刚更改的文件以及之前所做的所有更改。
- en: Working on project branches
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在项目分支上工作
- en: You can also maintain parallel **branches** of your project. Each branch is
    a copy of your project.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以维护你项目的并行**分支**。每个分支都是你项目的副本。
- en: 'Imagine that you have a production version of your project that lives on a
    website visited by millions of people each day. This production version will be
    your **master branch**. Now you want to add a new feature; for example, a button
    that changes the planets’ color from pink to purple. You don’t want to develop
    this feature in the production version. This can be dangerous as things might
    break and your millions of visitors might turn away in disgust. So, you create
    a copy of your project—a branch you might call the *purple* bra*nch*. You can
    now merrily develop locally, commit different versions of it, and make and fix
    mistakes. You can push your changes up to GitHub to collaborate with your friends
    until it works, is tested, and makes you happy. Then, you copy all changes from
    the *purple* branch to the *master* branch, or better expressed in Git-terminology:
    you **merge** the purple branch into the master branch.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您有一个生产版本的项目，它存在于每天被数百万访客访问的网站上。这个生产版本将是您的**主分支**。现在您想要添加一个新功能；例如，一个将行星颜色从粉红色变为紫色的按钮。您不希望在生产版本中开发这个功能。这可能会很危险，因为事情可能会出错，您的数百万访客可能会因为厌恶而离开。所以，您创建了一个项目的副本——一个您可以称之为
    *purple* 的分支。现在您可以在本地愉快地开发，提交不同的版本，并做出和修复错误。您可以将您的更改推送到 GitHub，与您的朋友协作，直到它工作，经过测试，让您满意。然后，您将所有更改从
    *purple* 分支复制到 *master* 分支，或者用 Git 术语更好地表达：您**合并**了 purple 分支到 master 分支。
- en: As said, this can only be a quick tour past the bare bones of Git and GitHub.
    There’s surely more, but being comfortable with these key concepts and terms,
    you can now confidently set up yourself and your project on GitHub.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如所说，这只能是对 Git 和 GitHub 的基本功能的快速浏览。当然还有更多，但只要您对这些关键概念和术语感到舒适，您现在就可以自信地为自己和项目在
    GitHub 上设置账户。
- en: Setting up a GitHub account
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 GitHub 账户
- en: 'As setting up an online account is something you have probably done a lot of
    times in your life, we won’t spend much time on this. Here we go:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于设置在线账户可能是您在生活中已经做过很多次的事情，我们不会在这方面花费太多时间。下面是步骤：
- en: '![](img/22b4086e-691e-4227-b433-b0080388f7c5.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/22b4086e-691e-4227-b433-b0080388f7c5.png)'
- en: Setting up a GitHub account
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 GitHub 账户
- en: Go to [https://github.com/](https://github.com/), click on **Sign in**, and
    follow the steps. We express our generally positive attitude to GitHub by choosing
    the Username `GoodToBeHere` and enter our email address and a Password. On the
    second screen, we opt for the free account and, after answering a few optional
    questions on the third screen, we complete our signup.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 [https://github.com/](https://github.com/)，点击 **Sign in**，并按照步骤操作。我们通过选择用户名
    `GoodToBeHere` 并输入我们的电子邮件地址和密码来表达我们对 GitHub 的一般积极态度。在第二屏，我们选择免费账户，并在第三屏回答几个可选问题后，完成注册。
- en: Creating a repository
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建仓库
- en: 'Next, we want to set up a repository. Remember that a repository is the root
    folder of your project holding all your files and folders. There are two ways
    to create this repository on GitHub:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要设置一个仓库。请记住，仓库是您项目的根目录，包含所有您的文件和文件夹。在 GitHub 上创建这个仓库有两种方式：
- en: You can push up a local repository—a project folder on your local machine
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以将本地仓库推送上去——即您本地机器上的项目文件夹
- en: You can create a new repository online via GitHub
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过 GitHub 在线创建一个新的仓库
- en: In this chapter, we will only look at the second way and do everything online.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们只将探讨第二种方式，并在网上完成所有操作。
- en: It makes sense to connect your project to GitHub via the command line if you
    are working continuously with Git and GitHub. It only requires basic familiarity
    with the command line, and you can learn more about it at [https://help.github*.com*/articles/adding-an-existing-project-to-github-using-the-command-line/](https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您持续使用 Git 和 GitHub 进行工作，通过命令行将项目连接到 GitHub 是很有意义的。这只需要对命令行有基本的熟悉度，您可以在[https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/](https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/)了解更多信息。
- en: 'After setting up your account, you will be directed to your very own GitHub
    dashboard, as you can see in the URL:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好账户后，您将被引导到您自己的 GitHub 仪表板，正如您在 URL 中看到的：
- en: '![](img/62f695cc-f087-452e-8467-6e2cefe538b3.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/62f695cc-f087-452e-8467-6e2cefe538b3.png)'
- en: Your GitHub dashboard
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 GitHub 仪表板
- en: To create a new repository, click on New repository.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的仓库，请点击“New repository”。
- en: 'Considering the next screenshot, we will first name our repository. All your
    repositories will be owned by you, so they will all start with your username.
    Each repository needs to have a unique name within your list of repositories.
    For now, you are pretty flexible as this is your first and only repository so
    far. We’ll appropriately call our repository `pink-planets`, avoiding any spaces
    in the name:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到下一张截图，我们首先命名我们的仓库。您所有的仓库都将归您所有，因此它们都将以您的用户名开头。每个仓库在您的仓库列表中都需要有一个独特的名称。目前，您非常灵活，因为这是您迄今为止的第一个也是唯一的仓库。我们将适当地将我们的仓库命名为`pink-planets`，避免在名称中使用空格：
- en: '![](img/bef6f303-8c15-4c3b-b9ac-8e005326155c.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bef6f303-8c15-4c3b-b9ac-8e005326155c.png)'
- en: Creating a repository
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 创建仓库
- en: All our repositories will be Public, which means that everyone can see all your
    code! If you would like or need to keep your code private, you can opt for a paid
    personal plan.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有的仓库都将公开，这意味着每个人都可以看到您的所有代码！如果您希望或需要保持您的代码私密，您可以选择付费的个人计划。
- en: It’s a good practice to initialize the repository with a `README` file, which
    allows a description of your project. Don’t worry about the `.gitignore` file,
    we won’t need it here. Lastly, we add a license, in our case, an Apache License
    2.0\. There are several licenses you can choose from, and it’s a good idea to
    make yourself acquainted with the options here.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化仓库时包含一个`README`文件是一个好习惯，它允许您描述您的项目。不用担心`.gitignore`文件，我们在这里不需要它。最后，我们添加一个许可证，在我们的例子中是一个Apache
    License 2.0。您可以选择的许可证有很多，了解这里的选项是个好主意。
- en: 'Lastly, we hit the big green Create repository button, which does exactly that
    and brings us straight to the repository’s page:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们点击那个大绿色的“创建仓库”按钮，它确实会这样做，并直接带我们到仓库页面：
- en: '![](img/280cad99-6f50-4c59-9dce-72fcc2f153bc.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/280cad99-6f50-4c59-9dce-72fcc2f153bc.png)'
- en: Our repository’s page
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仓库的页面
- en: You can see the name of your repository, a control bar with several tabs displaying
    the contents of the Code tab in focus, and a quick description. Next, there’s
    a bar showing you some general information such as how many commits (or file saves)
    have been done, how many branches (or project copies) this repository boasts,
    how many releases there are, and how many contributors have access to this repository.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到您仓库的名称，一个带有多个标签的控制栏，显示当前聚焦的代码标签的内容，以及一个快速描述。接下来，有一个显示一些一般信息的栏，例如已经完成的提交（或文件保存）数量，这个仓库有多少分支（或项目副本），有多少个发布，以及有多少贡献者可以访问这个仓库。
- en: 'After the row of button controls, we have a folder view of all files and folders
    in our repository. Currently, there are only the two files we just created: the
    `LICENSE` and the `README.md` file; `.md` stands for **markdown**, which allows
    you to format text files with a simple syntax. You can learn the gist of it within
    a few minutes at, for example, [https://guides.github.com/features/mastering-markdown/](https://guides.github.com/features/mastering-markdown/).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在按钮控制行之后，我们有一个我们仓库中所有文件和文件夹的文件夹视图。目前，只有我们刚刚创建的两个文件：`LICENSE`和`README.md`文件；`.md`代表**markdown**，它允许您使用简单的语法格式化文本文件。您可以在几分钟内了解其精髓，例如在[https://guides.github.com/features/mastering-markdown/](https://guides.github.com/features/mastering-markdown/)。
- en: At the bottom, you see the contents of the `README` file, giving visitors or
    collaborators a quick summary of what your project is about.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在底部，您可以看到`README`文件的内容，为访问者或合作者提供了一个关于您的项目快速总结。
- en: It’s still a little bland, so let’s change it and, at the same time, learn how
    to edit a file via GitHub.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它仍然有点单调，所以让我们来修改它，同时学习如何通过GitHub编辑文件。
- en: Editing a file on GitHub
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GitHub上编辑文件
- en: 'If you want to edit a file, you first need to click on its link in your repository.
    Next, you click on the Edit this file pencil in the upper-right corner:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想编辑一个文件，首先需要点击您仓库中它的链接。接下来，您点击右上角的“编辑此文件”铅笔：
- en: '![](img/790d7b46-6bcb-40d4-8f9c-1a66923687f3.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/790d7b46-6bcb-40d4-8f9c-1a66923687f3.png)'
- en: Opening a file for edit
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件进行编辑
- en: 'This will direct you to an editable view of the file. In here, you can change
    the name of the file above the editor window (we leave that as we’re happy with
    `README.md` as a name), and you can change the file’s content in the Edit file
    view:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带您进入文件的可编辑视图。在这里，您可以在编辑器窗口上方更改文件的名称（我们保留它，因为我们喜欢`README.md`这个名字），您可以在“编辑文件”视图中更改文件的内容：
- en: '![](img/93bc1d88-95a6-4738-8fc8-5ca5aeaef2f9.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/93bc1d88-95a6-4738-8fc8-5ca5aeaef2f9.png)'
- en: Changing the README.md file
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 修改README.md文件
- en: 'We’ve only done a few changes here: we capitalized the title and added some
    text to describe what the project is about. We’re using markdown syntax to mark
    the headline as headline 1 with the `#` before the text. We also use markdown
    to print `sun` in bold with the prepending and trailing asterisks. The great thing
    about markdown files is that we can also use normal HTML tags for styling, as
    we do here with the word `dwarfed`*—*writing it in subscript.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里只做了一些更改：我们将标题大写，并添加了一些文字来描述项目的内容。我们使用 markdown 语法通过在文本前加 `#` 来标记标题为一级标题。我们还使用
    markdown 将 `sun` 以粗体形式打印出来，使用前置和后置的星号。关于 markdown 文件的好之处在于，我们还可以使用正常的 HTML 标签进行样式设置，就像我们在这里对单词
    `dwarfed`*—*进行下标处理一样。
- en: 'Once done with our edits, we can change from the Edit file tab to the Preview
    changes tab and see what we’ve done. The preview marks our changes clearly with
    coloring and strike-through:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成我们的编辑后，我们可以从“编辑文件”选项卡切换到“预览更改”选项卡，查看我们做了什么。预览通过着色和删除线清晰地标记我们的更改：
- en: '![](img/10a92c3e-5afb-498e-8888-4af87ec2c8be.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/10a92c3e-5afb-498e-8888-4af87ec2c8be.png)'
- en: Previewing our changes
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 预览我们的更改
- en: We now want to save these changes, which, in Git's language, means **commit**.
    We can do this with the big green button at the bottom. However, before we do
    so, we have to add a commit message consisting of a mandatory short summary line
    and an optional extended description. We can add those to the text fields under
    Commit changes. Think of the commit summary line as an email title and the extended
    description as the email body.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在想要保存这些更改，在 Git 的语言中，这意味着**提交**。我们可以通过底部的绿色大按钮来完成这个操作。然而，在我们这样做之前，我们必须添加一个包含一个强制性的简短摘要行和一个可选的扩展描述的提交信息。我们可以在“提交更改”下的文本字段中添加这些内容。将提交摘要行视为电子邮件标题，将扩展描述视为电子邮件正文。
- en: A good commit summary line is short (less than 70 characters) and completes
    the sentence *This commit will…*, summarizing concisely what the changes include.
    GitHub is so kind as to offer us a predefined description depending on the changes
    we made. In this case, it offers us Update README.md, which we’re perfectly happy
    with, so we won’t change it. We’ll leave the optional extended description field
    blank, and click on Commit changes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的提交摘要行应该简短（少于 70 个字符），并完成句子“这个提交将…”，简洁地总结更改包含的内容。GitHub 非常友好地为我们提供了根据我们所做的更改预定义的描述。在这种情况下，它为我们提供了更新
    README.md 的描述，我们对此非常满意，所以我们将不会更改它。我们将留空可选的扩展描述字段，并点击“提交更改”。
- en: Uploading files to the repository
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将文件上传到仓库
- en: 'Let’s now upload our project files and folders. Back on our repository page,
    we find the Upload files button:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们上传我们的项目文件和文件夹。回到我们的仓库页面，我们找到上传文件按钮：
- en: '![](img/3d31e71c-d58a-4b06-bcbf-fb7bfc5e7a38.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3d31e71c-d58a-4b06-bcbf-fb7bfc5e7a38.png)'
- en: Uploading files
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上传文件
- en: 'We get to an upload field and drag all our project files over, like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们到达一个上传字段，并将所有项目文件拖动过来，就像这样：
- en: '![](img/c95c1668-df42-4910-a82c-d3eed5ac0d7c.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c95c1668-df42-4910-a82c-d3eed5ac0d7c.png)'
- en: Dragging our files to upload
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 拖动我们的文件进行上传
- en: Our project consists of four files in three folders. We have a `planets.html`
    file in the root directory, three folders called `/css`, `/data`, and `/js` containing
    the `planets.css`, `planets.csv` and `planets.js` files. We just grab them from
    our folder and drag them over.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目由三个文件夹中的四个文件组成。我们在根目录中有一个 `planets.html` 文件，三个名为 `/css`、`/data` 和 `/js`
    的文件夹包含 `planets.css`、`planets.csv` 和 `planets.js` 文件。我们只需从我们的文件夹中抓取它们并将它们拖动过来。
- en: '![](img/d99a0ba6-ec44-42f0-bf41-4b0f3ec22f26.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d99a0ba6-ec44-42f0-bf41-4b0f3ec22f26.png)'
- en: Committing our project files and folders
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 提交我们的项目文件和文件夹
- en: Once uploaded, we need to commit our changes. We add a short commit message
    summary and click on Commit changes.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦上传，我们需要提交我们的更改。我们添加一个简短的提交信息摘要，并点击“提交更改”。
- en: 'We’ll be redirected to the repository page and can see all our uploaded files:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将被重定向到仓库页面，并可以看到我们上传的所有文件：
- en: '![](img/7580a636-0193-4ccb-973b-ae2348e6830f.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7580a636-0193-4ccb-973b-ae2348e6830f.png)'
- en: The repository with all our project files
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 包含所有项目文件的仓库
- en: Publishing your project on GitHub Pages
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GitHub Pages 上发布您的项目
- en: Great, you have your project on GitHub. It doesn’t get any more complex. You’re
    just two small preparations and a few clicks away from having your project online!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，您已经在 GitHub 上有了您的项目。它不会更复杂。您只需进行两项小准备和一些点击，就可以将您的项目上线！
- en: Preparing the files for publishing
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备文件以发布
- en: Before we can click on that publish button, we need to ensure that your files
    are interlinked in the right way, and that your main HTML file is called `index.html`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们点击发布按钮之前，我们需要确保您的文件以正确的方式相互链接，并且您的主HTML文件被命名为`index.html`。
- en: Keeping your paths absolute
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持路径绝对
- en: 'First, let’s check all our file references. There are two links from within
    our HTML file, one to our `.css` file and one to our `.js` file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们检查所有我们的文件引用。在我们的HTML文件中有两个链接，一个指向我们的`.css`文件，另一个指向我们的`.js`文件：
- en: '![](img/03061ce8-853f-4112-ac9b-c8f59a6db320.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03061ce8-853f-4112-ac9b-c8f59a6db320.png)'
- en: Correct links within the HTML file
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: HTML文件中的正确链接
- en: All paths on GitHub can be referenced as absolute paths pointing to the root
    directory. This saves you from working out the relative path from any file at
    any depth of your directory tree. However, it also means that you might have to
    change relative paths from your local directory to root-based absolute paths.
    Your HTML file `planets.html` (we will change this to `index.html` in the next
    step) lives in the root directory. Both the `css` and `js` folders are also saved
    in the root directory, so the two paths are absolute to root and will work locally
    as well as in GitHub.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub上的所有路径都可以作为指向根目录的绝对路径进行引用。这可以节省您从目录树中的任何文件和任何深度计算相对路径。然而，这也意味着您可能需要将本地目录中的相对路径更改为基于根目录的绝对路径。您的HTML文件`planets.html`（我们将在下一步将其更改为`index.html`）位于根目录中。`css`和`js`文件夹也保存在根目录中，因此这两个路径相对于根目录是绝对的，并且在本地和GitHub上都将有效。
- en: 'However, in our project, we’re also referencing the `data/planets.csv` file
    from the `js/planets.js` file. Locally, you may reference this as a relative path,
    first moving up a level with `../` as in `''../data/planets.csv''`. However, in
    GitHub, the following will work:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们的项目中，我们还在`js/planets.js`文件中引用了`data/planets.csv`文件。在本地，您可能将其作为相对路径引用，首先使用`../`向上移动一个级别，例如`'../data/planets.csv'`。然而，在GitHub上，以下方式将有效：
- en: '![](img/48bf7bec-46ea-4d24-80bf-6b079eddb9e8.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48bf7bec-46ea-4d24-80bf-6b079eddb9e8.png)'
- en: An absolute path used within a nested file
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌套文件中使用的绝对路径
- en: In short, you can always use absolute paths relative to root within your GitHub
    project.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，您始终可以在GitHub项目中使用相对于根目录的绝对路径。
- en: Changing the main HTML filename to index.html
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将主HTML文件名更改为index.html
- en: 'Your main HTML file might already be called `index.html`. If it’s not, just
    go to the file and rename it to `index.html`, as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您的主要HTML文件可能已经命名为`index.html`。如果不是，只需转到该文件并将其重命名为`index.html`，如下所示：
- en: '![](img/a09ed18f-716e-458d-a317-07a0e3f57008.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a09ed18f-716e-458d-a317-07a0e3f57008.png)'
- en: Ensuring that our main HTML file is called **index.html**
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们的主HTML文件名为**index.html**
- en: Well done, that’s all the preparation required. Now, let’s publish!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 做得好，这就是所有需要的准备。现在，让我们发布！
- en: Publishing your project
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布您的项目
- en: 'After all that, erm, hard work, you deserve a simple process to publish. Well,
    you are exactly five clicks away from viewing your project online. Here they are:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些艰苦的工作之后，您应该有一个简单的发布过程。嗯，您正好需要五次点击才能在线查看您的项目。这里就是：
- en: '1\. Click on the Settings tab from your repository home page:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 从您的仓库主页点击设置选项卡：
- en: '![](img/34bf895c-e6eb-4495-9a4f-ac61cae97a65.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34bf895c-e6eb-4495-9a4f-ac61cae97a65.png)'
- en: Your repository settings
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您的仓库设置
- en: '2\. Navigate to the GitHub Pages area and expand the drop-down menu in the
    Source field:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 2. 导航到GitHub Pages区域并展开源字段中的下拉菜单：
- en: '![](img/9592f97b-5faa-4ebd-83f9-882a304fb9a6.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9592f97b-5faa-4ebd-83f9-882a304fb9a6.png)'
- en: You are nearly there
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您即将完成
- en: 3\. Choose the master branch to publish from (we didn’t create any other branches,
    so this is the one) and 4\. click on Save.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 选择从master分支发布（我们没有创建其他分支，所以这就是正确的分支）然后点击保存。
- en: 'Next, you will see the following message offering you a link to your online
    project:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将看到以下消息，提供您在线项目的链接：
- en: '![](img/91640700-0595-44ca-bf10-50065e17cdb6.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91640700-0595-44ca-bf10-50065e17cdb6.png)'
- en: Just one more click!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 只需再点击一次！
- en: '5\. Click it! It might take a moment for the project to take its rightful place,
    so you might want to wait a painful minute, but eventually, it will be published:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 5. 点击它！项目可能需要一段时间才能占据其应有的位置，所以您可能需要等待痛苦的一分钟，但最终，它将被发布：
- en: '![](img/3c9c90b1-fc15-4753-bfb0-76b8d7ee4c3d.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c9c90b1-fc15-4753-bfb0-76b8d7ee4c3d.png)'
- en: Your published work
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您发布的作品
- en: Marvelous! Your work is published, and the rest is history! Congratulations.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！您的作品已发布，其余的就是历史了！恭喜您。
- en: 'Our URL is [https://goodtobehere.github.io/pink-planets/](https://goodtobehere.github.io/pink-planets/),
    or more generally, `https://<your username>.github.io/<the repository’s name>`.
    Although this is a logical construct, it might appear a little clunky. You can
    change it to a custom URL, like we did in our example:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的网址是[https://goodtobehere.github.io/pink-planets/](https://goodtobehere.github.io/pink-planets/)，或者更普遍地，`https://<你的用户名>.github.io/<仓库的名称>`。尽管这是一个逻辑结构，但它可能看起来有点笨拙。你可以将其更改为自定义URL，就像我们在示例中所做的那样：
- en: '![](img/bc37aa2a-fb49-4229-94a5-c3adc230955b.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bc37aa2a-fb49-4229-94a5-c3adc230955b.png)'
- en: A custom domain
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义域名
- en: It will require you to use a domain you have secured with the DNS Provider of
    your choice, and change a few settings on the DNS Provider side as well as, in
    some cases, on GitHub, but it’s also a simple process that you might want to consider.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这将要求你使用你通过所选DNS提供商安全保护的域名，并在DNS提供商的一侧以及在某些情况下在GitHub上更改一些设置，但这也是一个你可能想要考虑的简单过程。
- en: For excellent guidance regarding a custom domain, check out [https://help.github.com/articles/using-a-custom-domain-with-github-pages/](https://help.github.com/articles/using-a-custom-domain-with-github-pages/).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 关于自定义域的出色指导，请参阅[https://help.github.com/articles/using-a-custom-domain-with-github-pages/](https://help.github.com/articles/using-a-custom-domain-with-github-pages/)。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to publish your visualization, or in fact any
    project, on GitHub Pages. You learned what type of pages you can and can’t publish
    on GitHub Pages. You glimpsed the powers of Git and the merits of GitHub before
    using it as a home for your code. After minor tweaking and prepping, you eventually
    published your project online. One way to look at this feat is that your project
    now claims the same online real estate as any other page on the web, which is
    something to build upon.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何在GitHub Pages上发布你的可视化作品，或者实际上任何项目。你了解了你可以在GitHub Pages上发布和不能发布的页面类型。在使用它作为代码的家园之前，你瞥见了Git的力量和GitHub的益处。经过一些微调和准备，你最终将项目在线发布。看待这一成就的一种方式是，你的项目现在与网络上的任何其他页面拥有相同的在线空间，这是可以构建的。
