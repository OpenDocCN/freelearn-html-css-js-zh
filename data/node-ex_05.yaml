- en: Chapter 5. Managing Users
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 管理用户
- en: 'In [Chapter 4](part0032.xhtml#aid-UGI01 "Chapter 4. Developing the Model-View-Controller
    Layers"), *Developing the Model-View-Controller Layers*, we used the Model-View-Controller
    pattern and wrote the base of our social network. We split our application into
    backend and frontend directories. The code in the first folder serves the assets
    and generates the home page. Along with this, we made the base of our backend
    API. The client side of the project is driven by the Ractive.js framework. This
    is the place where we store our controllers, models, and views. With these elements,
    we will continue with the management of users. In this part of the book, we will
    cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](part0032.xhtml#aid-UGI01 "第4章. 开发模型-视图-控制器层")中，*开发模型-视图-控制器层*，我们使用了模型-视图-控制器模式并编写了我们社交网络的基础。我们将应用程序分成了后端和前端目录。第一个文件夹中的代码用于提供资产并生成主页。除此之外，我们还建立了后端API的基础。项目的客户端由Ractive.js框架驱动。这是我们存储控制器、模型和视图的地方。有了这些元素，我们将继续管理用户。在本书的这一部分，我们将涵盖以下主题：
- en: Working with the MongoDB database
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MongoDB数据库
- en: Registering a new user
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册新用户
- en: User authentication with sessions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用会话进行用户认证
- en: Managing a user's profile
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理用户的个人资料
- en: Working with the MongoDB database
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MongoDB数据库
- en: Nowadays, almost every web application stores and retrieves data from a database.
    One of the most popular databases that works well with Node.js is MongoDB ([http://www.mongodb.org/](http://www.mongodb.org/)).
    This is what we are going to use. The main characteristic of MongoDB is that it
    is a NoSQL database with a different data format and query language.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，几乎每个网络应用程序都会从数据库中存储和检索数据。其中一个与Node.js兼容性很好的最流行的数据库是MongoDB ([http://www.mongodb.org/](http://www.mongodb.org/))。这就是我们要使用的。MongoDB的主要特点是它是一个具有不同数据格式和查询语言的NoSQL数据库。
- en: Installing MongoDB
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装MongoDB
- en: As with every other popular software, MongoDB is available for all operating
    systems. If you are a Windows user, there is an installer that you can download
    from the official page [http://www.mongodb.org/downloads](http://www.mongodb.org/downloads).
    For Linux or OS X developers, MongoDB is reachable through most popular package
    management systems. We are not going to cover the installation in detail, but
    you will find nicely written instructions at [http://docs.mongodb.org/manual/installation/](http://docs.mongodb.org/manual/installation/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他流行软件一样，MongoDB适用于所有操作系统。如果您是Windows用户，可以从官方页面[http://www.mongodb.org/downloads](http://www.mongodb.org/downloads)下载安装程序。对于Linux或OS
    X开发人员，MongoDB可以通过大多数流行的软件包管理系统获得。我们不会详细介绍安装过程，但您可以在[http://docs.mongodb.org/manual/installation/](http://docs.mongodb.org/manual/installation/)找到详细的说明。
- en: Running MongoDB
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行MongoDB
- en: 'After its successful installation, we will have a `mongod` command available.
    By running it in the terminal, we start a MongoDB server listening by default
    on port `27017`. Our Node.js backend will connect to this port and execute database
    queries. Here is how our console looks like after the execution of the `mongod`
    command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功后，我们将有一个`mongod`命令可用。通过在终端中运行它，我们启动一个默认监听端口`27017`的MongoDB服务器。我们的Node.js后端将连接到这个端口并执行数据库查询。以下是在执行`mongod`命令后我们控制台的样子：
- en: '![Running MongoDB](img/image00177.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![运行MongoDB](img/image00177.jpeg)'
- en: Connecting to the database server
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到数据库服务器
- en: 'A benefit of Node.js is the existence of thousands of modules. Because of the
    growing community, we have a module for almost every task that we come across.
    We have already used several Gulp plugins. Now, we will add the official MongoDB
    driver to the `package.json` file:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js的一个好处是存在成千上万的模块。由于社区不断增长，我们几乎可以为遇到的每个任务找到一个模块。我们已经使用了几个Gulp插件。现在，我们将在`package.json`文件中添加官方的MongoDB驱动程序：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We have to run `npm install` to get the module into the `node_modules` directory.
    Once the process finishes, we can connect to the server with the following code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须运行`npm install`将模块安装到`node_modules`目录中。一旦过程完成，我们可以使用以下代码连接到服务器：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this code, `nodejs-by-example` is the name of our database. The callback
    that is invoked gives us access to the driver''s API. We can use the `db` object
    to operate with the collections in the database or in other words, create, update,
    retrieve, or delete documents. This can be demonstrated with the following example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，`nodejs-by-example`是我们的数据库名称。调用的回调函数使我们能够访问驱动程序的API。我们可以使用`db`对象来操作数据库中的集合，换句话说，创建、更新、检索或删除文档。以下是一个示例：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now we know how to manage the data in our system. Let's continue to the next
    section and extend our client-side code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何管理系统中的数据了。让我们继续到下一节并扩展我们的客户端代码。
- en: Extending the code from the previous chapter
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展上一章的代码
- en: Adding new functionalities to the code base that already exists means refactoring
    and extending the already written code. In order to develop the management of
    users, we need to update the `models/Base.js` file. So far, we have a simple `Version`
    model and we will need a new `User` model. An improvement in our navigation and
    routing is needed so that users have pages to create, edit, and manage their accounts.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 向已有的代码库添加新功能意味着重构和扩展已经编写的代码。为了开发用户管理，我们需要更新`models/Base.js`文件。到目前为止，我们有一个简单的`Version`模型，我们将需要一个新的`User`模型。我们需要改进我们的导航和路由，以便用户有页面来创建、编辑和管理他们的账户。
- en: The code that comes with this chapter has a lot of additions to the CSS styles.
    We are not going to discuss them, because we want to focus more on the JavaScript
    part. They provide a slightly better look to the application. If you are interested
    in how the final CSS is generated, check out the code pack of this book.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章附带的代码有很多CSS样式的添加。我们不会讨论它们，因为我们更想专注于JavaScript部分。它们为应用程序提供了稍微更好的外观。如果您对最终的CSS是如何生成感兴趣，请查看本书的代码包。
- en: Updating our base model class
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新我们的基础模型类
- en: 'So far, `models/Base.js` has had only two methods. The first one, `fetch`,
    performs a `GET` request to the server with the given URL. In [Chapter 2](part0020.xhtml#aid-J2B81
    "Chapter 2. Architecting the Project"), *Architecting the Project*, we talked
    about REST APIs; to fully support this architecture, we have to add methods to
    create, update, and remove records. In fact, all these methods will be close to
    the one that we already have. Here is the `create` function:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，`models/Base.js`只有两种方法。第一个方法`fetch`执行一个带有给定URL的`GET`请求。在[第2章](part0020.xhtml#aid-J2B81
    "第2章。项目架构")中，*项目架构*，我们谈到了REST API；为了完全支持这种架构，我们必须添加用于创建、更新和删除记录的方法。实际上，所有这些方法都将接近我们已经拥有的方法。这是`create`函数：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We run the method of the model, which gets the data from its `value` property
    and executes a `POST` request. In the end, we fire a callback. If there is a problem,
    we send the error as a first argument. If not, then the first argument (representing
    an error state) is `null` and the second one contains the server's response.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行模型的方法，该方法从其`value`属性获取数据并执行`POST`请求。最后，我们触发一个回调。如果出现问题，我们将错误作为第一个参数发送。如果没有问题，那么第一个参数（表示错误状态）为`null`，第二个参数包含服务器的响应。
- en: 'We will follow the same approach for updating and deleting code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循相同的方法来更新和删除代码：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The difference is the `request` method. For the `save` operation, we use `PUT`,
    and to remove data, we use `DELETE`. Note that during the deletion, we do not
    have to send the model's data as we are performing a simple operation to remove
    a specific data object from the database and not making more complex changes as
    seen in the `create` and `save` requests.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不同之处在于`request`方法。对于`save`操作，我们使用`PUT`，而要删除数据，我们使用`DELETE`。请注意，在删除过程中，我们不必发送模型的数据，因为我们只是执行一个简单的操作，从数据库中删除特定的数据对象，而不是进行像`create`和`save`请求中所见的更复杂的更改。
- en: Updating page navigation and routing
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新页面导航和路由
- en: 'The code from [Chapter 4](part0032.xhtml#aid-UGI01 "Chapter 4. Developing the
    Model-View-Controller Layers"), *Developing the Model-View-Controller Layers*,
    contains only two links in its navigation. We need to add a bit more to it—links
    to register, log in and out, and profile management access. The `frontend/tpl/navigation.html`
    template fragment looks like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 来自[第4章](part0032.xhtml#aid-UGI01 "第4章。开发模型-视图-控制器层")的代码，*开发模型-视图-控制器层*，在其导航中只包含两个链接。我们需要为其添加更多内容——链接到注册、登录和注销，以及个人资料管理访问。`frontend/tpl/navigation.html`模板片段如下所示：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Together with the new `<a>` tags, we made the following two interesting additions:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 除了新的`<a>`标签，我们还进行了以下两个有趣的添加：
- en: There is an `{{#if}}` expression. In our Ractive.js component, we need to register
    an `isLogged` variable. It will control the state of the navigation by hiding
    and showing the appropriate buttons. When the user is not logged in, we will display
    the **Register** and **Login** buttons. Otherwise, our application will show the
    **Logout** and **Profile** links. More about the `isLogged` variable will be discussed
    at the end of this chapter when we cover session support.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个`{{#if}}`表达式。在我们的Ractive.js组件中，我们需要注册一个`isLogged`变量。它将通过隐藏和显示适当的按钮来控制导航的状态。当用户未登录时，我们将显示**注册**和**登录**按钮。否则，我们的应用程序将显示**注销**和**个人资料**链接。关于`isLogged`变量的更多信息将在本章末讨论，当我们涵盖会话支持时。
- en: We have the `on-click` attributes. Note that these attributes are not valid
    HTML, but they are interpreted by Ractive.js to produce the desired result. Every
    link in the navigation will dispatch a `goto` event with a specific parameter,
    and this will happen when the links are triggered by the user.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有`on-click`属性。请注意，这些属性不是有效的HTML，但它们被Ractive.js解释为产生期望的结果。导航中的每个链接都将分派一个带有特定参数的`goto`事件，并且当用户触发链接时，这将发生。
- en: 'In the main file of the application (`frontend/js/app.js`), we have a `showPage`
    function. This method has access to the current page, and it is a perfect place
    to listen for the `goto` event. It is also a good choice because in the same file,
    we have a reference to the router. Thus, we are able to change the current site''s
    page. A little change to this function and we are done with the switching of the
    pages:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序的主文件（`frontend/js/app.js`）中，我们有一个`showPage`函数。该方法可以访问当前页面，是监听`goto`事件的理想位置。这也是一个很好的选择，因为在同一个文件中，我们有一个对路由器的引用。因此，我们能够更改当前站点的页面。对这个函数进行一点改变，我们就完成了页面的切换：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the next section, we will continue with the code that will register a new
    user in our system.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将继续编写代码，以在我们的系统中注册新用户。
- en: Registering a new user
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册新用户
- en: To handle the registration of users, we need to update both our frontend and
    backend code. The client-side part of the application will collect the data and
    the backend will store it in the database.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理用户的注册，我们需要更新前端和后端代码。应用程序的客户端部分将收集数据，后端将其存储在数据库中。
- en: Updating the frontend
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新前端
- en: 'We updated the navigation and now, if users click on the **Register** link,
    the app will forward them to a `/register` route. We have to tweak our router
    and register a handler in the following way:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更新了导航，现在，如果用户点击**注册**链接，应用程序将将他们转发到`/register`路由。我们必须调整我们的路由器，并以以下方式注册处理程序：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As with the home page, we will create a new controller located in `frontend/js/controllers/Register.js`,
    as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 与主页一样，我们将创建一个位于`frontend/js/controllers/Register.js`中的新控制器，如下所示：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The template attached to this controller contains a form with several fields—the
    first and last name, e-mail, and a password:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该控制器附加的模板包含一个带有几个字段的表单——名字、姓氏、电子邮件和密码：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It is worth mentioning that we have placeholders for error and success messages.
    They are protected with the `{{#if}}` expressions and are hidden by default. If
    we, in the controller, set a value to the `error` or `success` variables, these
    hidden `div` elements will become visible. In order to get the values of the input
    fields, we will use Ractive.js bindings. By setting `value="{{firstName}}"`, we
    will create a new variable that will be available in our controller. We can even
    listen for changes in this variable, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，我们有错误和成功消息的占位符。它们受`{{#if}}`表达式保护，并且默认情况下是隐藏的。如果我们在控制器中为`error`或`success`变量设置值，这些隐藏的`div`元素将变为可见。为了获取输入字段的值，我们将使用Ractive.js绑定。通过设置`value="{{firstName}}"`，我们将创建一个新变量，该变量将在我们的控制器中可用。我们甚至可以监听此变量的更改，如下所示：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The data from the input field should be sent to a `model` class that communicates
    with the backend. Since we have several form fields, it makes sense to create
    a helper that saves us a little writing:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 输入字段中的数据应发送到与后端通信的`model`类。由于我们有几个表单字段，创建一个辅助程序可以节省一些代码：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `setter` method returns the same closure that we used in the preceding
    code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`setter`方法返回了我们在前面代码中使用的相同闭包：'
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If we look back and check `controllers/Register.js`, we will see all the fields
    from the registration form. In this form, we have a button that dispatches the
    `register` event. The controller is subscribed for that event and triggers the
    `create` function of the model. Based on the result, we either show an error message
    or display a registration successful message.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回头检查`controllers/Register.js`，我们将看到注册表单中的所有字段。在此表单中，我们有一个按钮触发`register`事件。控制器订阅了该事件，并触发模型的`create`函数。根据结果，我们要么显示错误消息，要么显示注册成功消息。
- en: 'In the preceding code, we used a `userModel` object. This is an instance of
    the `User` class, which extends the `models/Base.js` file. Here is the code that
    is stored in `frontend/js/models/User.js`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了一个`userModel`对象。这是`User`类的一个实例，它扩展了`models/Base.js`文件中的内容。以下是存储在`frontend/js/models/User.js`中的代码：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We extended the base model. So, we got the `create` and `setter` functions automatically.
    For the registration process, we do not need any other custom methods. However,
    to log in and out, we will add more functions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展了基本模型。因此，我们自动获得了`create`和`setter`函数。对于注册过程，我们不需要任何其他自定义方法。但是，为了登录和退出，我们将添加更多函数。
- en: 'Several parts of our system will need this model. So, we will create its global
    `userModel` instance. An appropriate place for this is the `frontend/js/app.js`
    file. The listener of the `window.onload` event is a good host for such code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的系统的几个部分将需要这个模型。因此，我们将创建其全局`userModel`实例。这样做的合适位置是`frontend/js/app.js`文件。`window.onload`事件的监听器是这样的代码的良好宿主：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that we missed the `var` keyword in front of the variable definition. This
    is how we make `userModel` available in the global scope.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在变量定义前面漏掉了`var`关键字。这是我们使`userModel`在全局范围内可用的方法。
- en: Updating the backend API
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新后端API
- en: 'We have our client-side code making a `POST` request to the backend with the
    new user''s data. To close the circle, we have to handle the request in our backend
    API and record the information in the database. Let''s first extend `backend/API.js`
    with a few helper functions and variables:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的客户端代码向后端发出`POST`请求，携带新用户的数据。为了闭环，我们必须在后端API中处理请求，并将信息记录在数据库中。让我们首先在`backend/API.js`中添加一些辅助函数和变量：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: At the beginning of this chapter, we learned how to make queries to the MongoDB
    database. What we need is access to the driver's API. There is a piece of code
    that we will use often. So, it is a good idea to wrap it in a helper method. The
    `getDatabaseConnection` function is exactly the function that can be used to achieve
    this. It only connects to the database during the first time of its execution.
    Every call after that returns the cached `database` object.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开头，我们学习了如何向MongoDB数据库发出查询。我们需要访问驱动程序的API。有一段代码我们会经常使用。因此，将其包装在一个辅助方法中是一个好主意。`getDatabaseConnection`函数正是可以用来实现这一点的函数。它只在第一次执行时连接到数据库。之后的每次调用都会返回缓存的`database`对象。
- en: 'Another common task typical to Node.js request handling is the fetching of
    the `POST` data. The `GET` parameters are available in the `request` object that
    comes to every route handler. However, for the `POST` data, we need a special
    helper:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js请求处理的另一个常见任务是获取`POST`数据。`GET`参数可在每个路由处理程序中的`request`对象中使用。但是，对于`POST`数据，我们需要一个特殊的辅助程序：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We use the `request` object as a stream and subscribe to its `data` event. Once
    we receive all the information, we use `querystring.parse` to format it into a
    usable hashmap (key/value of the `POST` parameters) object and fire the callback.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`request`对象作为流，并订阅其`data`事件。一旦我们接收到所有信息，我们就使用`querystring.parse`将其格式化为可用的哈希映射（`POST`参数的键/值）对象，并触发回调。
- en: 'In the end, we will add an e-mail validation function. We will need it during
    the registration and the updating of the user''s profile. The actual validation
    is done with the regular expression:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将添加一个电子邮件验证函数。我们在注册和更新用户资料时会用到它。实际的验证是通过正则表达式完成的：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now let''s continue with the code that will accept the `POST` request and register
    a new user in the database. So far, we have only added two routes to the API—`/api/version`
    and the default one. We will add one more, `/api/user`, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续编写代码，接受`POST`请求并在数据库中注册新用户。到目前为止，我们只向API添加了两个路由—`/api/version`和默认路由。我们将再添加一个`/api/user`，如下所示：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The same route will host different operations. To distinguish them, we will
    rely on the `request` method as it is described in the REST API concept.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 同一路由将承载不同的操作。为了区分它们，我们将依赖`request`方法，正如REST API概念中所描述的那样。
- en: 'In the `POST` case, we will first fetch the data by using the `processPOSTRequest`
    helper. After that, we will run a series of checks to make sure that the data
    sent is correct. If it is not, we will respond with an appropriate error message.
    If everything is okay, we will use the other `getDatabaseConnection` helper and
    make a new record in the database. It''s not a good practice to store the users''
    password as plain text. So, before sending them to MongoDB, we will encrypt them
    using the `sha1` module. This is a module that is available in the Node.js package
    manager registry. At the top of `backend/API.js`, we will add the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在`POST`情况下，我们将首先使用`processPOSTRequest`助手获取数据。之后，我们将运行一系列检查，以确保发送的数据是正确的。如果不正确，我们将用适当的错误消息进行响应。如果一切正常，我们将使用另一个`getDatabaseConnection`助手，在数据库中创建一个新记录。将用户密码以明文形式存储并不是一个好的做法。因此，在将它们发送到MongoDB之前，我们将使用`sha1`模块对它们进行加密。这是一个在Node.js包管理器注册表中可用的模块。在`backend/API.js`的顶部，我们将添加以下内容：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To get this line working, we have to update the `package.json` file and run
    `npm install` in the console.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这一行起作用，我们必须更新`package.json`文件，并在控制台中运行`npm install`。
- en: In the next section, we will implement the `GET`, `PUT` and `DELETE` cases.
    Together with this, we will introduce you to a new route to log in.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将实现`GET`、`PUT`和`DELETE`情况。除此之外，我们还将向您介绍一个新的登录路由。
- en: User authentication with sessions
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户身份验证与会话
- en: 'We implemented the functionalities that register new users in our system. The
    next step is to authenticate these users. Let''s first provide an interface to
    enter a username and password. We need to add a new route handler in `frontend/js/app.js`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了在系统中注册新用户的功能。下一步是对这些用户进行身份验证。让我们首先提供一个输入用户名和密码的界面。我们需要在`frontend/js/app.js`中添加一个新的路由处理程序：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'All the other pages so far use the same idea. We will initialize a new controller
    and pass it to the `showPage` helper. The template that is used here is as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，所有其他页面都使用了相同的思路。我们将初始化一个新的控制器并将其传递给`showPage`助手。这里使用的模板如下：
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'During the registration process, we used similar placeholders for the error
    and success messages. Again, we have an HTML form. However this time, the form
    contains input fields for the username and password. We will also bind two variables
    and make sure that the button dispatches the `login` event. Here is the code for
    our controller:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在注册过程中，我们使用了类似的占位符来显示错误和成功消息。同样，我们有一个HTML表单。但是这次，表单包含了用户名和密码的输入字段。我们还将绑定两个变量，并确保按钮分派`login`事件。这是我们控制器的代码：
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'By using the same `setter` function, we stored the values filled into our model.
    There is a `userModel.login` method that is similar to `userModel.create`. It
    triggers a `POST` request to the server with the given data. In this case, the
    data is the username and password. This time, we are not going to use functions
    from the base model. We will register a new one in the `/frontend/js/models/User.js`
    file:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用相同的`setter`函数，我们存储了填入我们模型的值。有一个`userModel.login`方法，类似于`userModel.create`。它触发一个带有给定数据的`POST`请求到服务器。在这种情况下，数据是用户名和密码。这次，我们不会使用基本模型中的函数。我们将在`/frontend/js/models/User.js`文件中注册一个新的模型：
- en: '[PRE23]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Again, we used the Ajax helper to send information to the backend API. The
    request goes to the `/api/user/login` URL. At the moment, we will not handle such
    routes. The following code goes to `/backend/API.js` just above the `/api/user`
    handler:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们使用Ajax助手将信息发送到后端API。请求发送到`/api/user/login` URL。目前，我们不会处理这样的路由。以下代码放在`/backend/API.js`中，就在`/api/user`处理程序的上面：
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `processPOSTRequest` function delivers the `POST` data sent by the frontend.
    We will keep the same e-mail and password validation mechanisms. If everything
    is okay, we will check whether the provided credentials match some of the accounts
    in the database. The result for a correct e-mail and password is an object containing
    the user''s details. It is not a good idea to return the ID and password of the
    user. So, we will remove them from the returned user object. There is one more
    thing that we haven''t talked about so far:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`processPOSTRequest`函数传递了前端发送的`POST`数据。我们将保持相同的电子邮件和密码验证机制。如果一切正常，我们将检查提供的凭据是否与数据库中的某些帐户匹配。正确的电子邮件和密码的结果是包含用户详细信息的对象。将ID和用户密码返回给用户并不是一个好主意。因此，我们将它们从返回的用户对象中删除。到目前为止，还有一件事我们还没有谈论：'
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This is how we store a session. By default, we do not have a `session` object
    available. There is a module that delivers this functionality. It''s called `cookie-session`.
    We have to add it to `package.json` and run the `npm install` command in the terminal.
    After its successful installation, we have to tweak the `server.js` file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们存储会话的方式。默认情况下，我们没有可用的`session`对象。有一个模块提供了这个功能。它被称为`cookie-session`。我们必须将其添加到`package.json`并在终端中运行`npm
    install`命令。安装成功后，我们必须调整`server.js`文件：
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Before passing the application's flow to the router, we run the `checkSession`
    function. The method uses the newly added module and patches the `request` object
    by attaching the `session` object. All API methods have access to the current's
    user session. This means that we may secure every request to the backend by simply
    checking whether the user is authenticated or not.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在将应用程序的流程传递给路由之前，我们运行`checkSession`函数。该方法使用新添加的模块，并通过附加`session`对象来修补`request`对象。所有API方法都可以访问当前用户的会话。这意味着我们可以通过简单地检查用户是否经过身份验证来保护对后端的每个请求。
- en: 'You may remember that at the beginning of this chapter, we created a global
    `userModel` object. It''s initialization occurred in the `window.onload` handler,
    which is effectively the bootstrapping point of our frontend. We can ask the backend
    whether the current user is logged in before showing the UI. This will help us
    display the proper navigation buttons. So, here is how `frontend/js/app.js` changes:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得，在本章的开头，我们创建了一个全局的`userModel`对象。它的初始化发生在`window.onload`处理程序中，这实际上是我们前端的引导点。我们可以在显示UI之前向后端询问当前用户是否已登录。这将帮助我们显示适当的导航按钮。因此，这是`frontend/js/app.js`的更改方式：
- en: '[PRE27]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `userModel` function extends the base model where the `fetch` method puts
    the response from the server in the `value` property of the model. Fetching data
    from the frontend means making a `GET` request, and in this case, this is a `GET`
    request to the `/api/user` URL. Let''s see how `backend/API.js` handles the query:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`userModel`函数扩展了基本模型，其中`fetch`方法将服务器的响应放入模型的`value`属性中。从前端获取数据意味着发出`GET`请求，在这种情况下，是对`/api/user`
    URL的`GET`请求。让我们看看`backend/API.js`如何处理这个查询：'
- en: '[PRE28]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If the user is logged in, we return what is stored in the `session` object.
    If not, the backend responds with an empty object. For the client side, this means
    that the `userModel` object may or may not have information in its `value` property
    based on the current user''s status. So, it makes sense to add a new `isLogin`
    method in the `frontend/js/models/User.js` file:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户已登录，我们返回存储在`session`对象中的内容。如果没有，后端将返回一个空对象。对于客户端来说，这意味着`userModel`对象的`value`属性可能根据当前用户的状态有信息，也可能没有。因此，在`frontend/js/models/User.js`文件中添加一个新的`isLogin`方法是有意义的：
- en: '[PRE29]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Adding the preceding function, we can use the `userModel.isLogged()` call anywhere
    in our client-side code and we will know whether the user has logged in or not.
    This will work because we performed the fetching at the very beginning of our
    application. For example, the navigation (`frontend/js/views/Navigation.js`) needs
    this information in order to display the correct links:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了前面的函数后，我们可以在客户端代码的任何地方使用`userModel.isLogged()`调用，从而知道用户是否已登录。这将起作用，因为我们在应用程序的最开始执行了数据获取。例如，导航(`frontend/js/views/Navigation.js`)需要这些信息以便显示正确的链接：
- en: '[PRE30]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Managing a user's profile
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理用户的个人资料
- en: 'The previous sections of this chapter gave us enough knowledge to update the
    information saved in the database. Again, we need to create a page in the frontend
    that has an HTML form. The difference here is that the input fields of the form
    should be filled by default with the data of the current user. So, let''s start
    by adding a route handler for the `/profile` URL:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的前几节给了我们足够的知识来更新数据库中保存的信息。同样，我们需要在前端创建一个包含HTML表单的页面。这里的区别在于，表单的输入字段应该默认填充当前用户的数据。因此，让我们从为`/profile`
    URL添加路由处理程序开始：
- en: '[PRE31]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: There is no reason to allow access to this page if the user is not logged in.
    A simple authentication check before calling the `showPage` helper forwards the
    user to the login page if needed.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户未登录，没有理由允许访问此页面。在调用`showPage`助手之前进行简单的身份验证检查，如果需要，将用户转发到登录页面。
- en: 'The template that we need for the `Profile` controller is identical to the
    one that we used for registration. There are only two things that we have to change—we
    need to remove the `email` field and update the label of the button from **Register**
    to **Update**. The removing of the `email` field is not absolutely necessary,
    but it is a good practice to prevent changes by the user and leave it as it was
    entered during the registration. Here is how the controller looks:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为`Profile`控制器准备的模板与我们用于注册的模板相同。我们只需要更改两件事情——我们需要删除`email`字段，并将按钮的标签从**注册**更改为**更新**。删除`email`字段并不是绝对必要的，但防止用户更改并将其保留为注册时输入的内容是一个好的做法。控制器的样子如下：
- en: '[PRE32]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `updateProfile` event is the event that is fired by the button on the page.
    We update the `model` fields with the values from the form. The password is changed
    only if the user enters something in the field. Otherwise, the backend keeps the
    old value.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateProfile`事件是页面上按钮触发的事件。我们使用表单中的值更新`model`字段。只有用户在字段中输入了内容，密码才会更改。否则，后端将保留旧值。'
- en: 'We will call `userModel.save`, which performs a `PUT` request to the API. Here
    is how we handle the request in `backend/API.js`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将调用`userModel.save`，它执行对API的`PUT`请求。以下是我们在`backend/API.js`中处理请求的方式：
- en: '[PRE33]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The usual field validation is here again. We will check whether the user has
    typed something for their first and last name. The password is updated only if
    there is data for the same. It's important to note that we need the user's e-mail
    to update the profile. This is how we refer to the exact record in our MongoDB
    database. Since we stored the e-mail in the session of the user, it is quite easy
    to fetch it from there. If everything goes well, we update the information in
    the `session` object. This is needed because the frontend gets the user's details
    from there, and if we forget to perform this change, our UI will show the old
    data.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通常的字段验证又出现了。我们将检查用户是否已输入了名字和姓氏。只有在有相应数据时才会更新密码。重要的是要注意，我们需要用户的电子邮件来更新个人资料。这是我们在MongoDB数据库中引用确切记录的方式。由于我们将电子邮件存储在用户的会话中，因此很容易从那里获取。如果一切顺利，我们将更新`session`对象中的信息。这是必要的，因为前端从那里获取用户的详细信息，如果我们忘记进行这个更改，我们的UI将显示旧数据。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we made a lot of progress. We built one of the core features
    of our social network—user management. We learned how to store data in a MongoDB
    database and use sessions to authenticate users.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们取得了很大的进展。我们构建了社交网络的核心功能之一——用户管理。我们学会了如何将数据存储在MongoDB数据库中，并使用会话对用户进行身份验证。
- en: In the next chapter, we will implement the functions of friend management. The
    users of any social network will be familiar with the same. At the end of the
    next chapter, users will be able to make friends using our application.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将实现好友管理的功能。任何社交网络的用户都会熟悉这个功能。在下一章的结束时，用户将能够使用我们的应用程序添加好友。
