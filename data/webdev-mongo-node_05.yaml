- en: Templating with Handlebars
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Handlebars进行模板化
- en: 'The JavaScript template engines are the reason why node.js proves to be an
    isomorphic technology. It adds a server-side UI rendering functionality in node.js,
    stimulating its client-side rendering performance. Next, it also eases the maintenance
    of client-side code as it is tightly coupled in server-side code. Lets understand
    it more clearly in this chapter by exploring the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript模板引擎是node.js被证明是一种同构技术的原因。它在node.js中添加了服务器端UI渲染功能，刺激了其客户端渲染性能。此外，它还简化了客户端代码的维护，因为它与服务器端代码紧密耦合。让我们在本章中更清楚地了解这一点，通过探索以下主题：
- en: The Handlebars templating framework
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Handlebars模板框架
- en: The steps to develop the templates necessary to build the presentation layer
    of our application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发构建应用程序呈现层所需的模板的步骤
- en: Before we start exploring the capabilities of Handlebars, we need to have an
    idea of what a templating framework generally does.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始探索Handlebars的功能之前，我们需要了解模板框架通常做什么。
- en: Templating engines
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板引擎
- en: As we already know, an MVC application framework divides the application-specific
    code into models, views, and controllers. Controllers are supposed to be handling
    the task of binding the appropriate data to its relevant views to generate the
    output for an incoming web application request. So, views are supposed to be independent
    of the data and only contain code relevant to the presentation of the data, which
    will be mostly HTML. Apart from HTML, views will need to contain presentation
    logic, which will be conditions written on the data passed to them via controllers.
    Then, the main task that templating frameworks do in this case is that they make
    this process of embedding presentational logic simpler and readable. Also, they
    attempt to segregate the views into more understandable subcomponents.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经知道的，MVC应用程序框架将应用程序特定代码分为模型、视图和控制器。控制器应该处理将适当的数据绑定到其相关视图以生成传入Web应用程序请求的输出的任务。因此，视图应该独立于数据，只包含与数据呈现相关的代码，这将主要是HTML。除了HTML，视图还需要包含呈现逻辑，这将是在通过控制器传递给它们的数据上编写的条件。然后，模板框架在这种情况下的主要任务是使嵌入呈现逻辑的过程更简单和可读。此外，它们试图将视图分隔成更易理解的子组件。
- en: Server-side and client-side templating
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端和客户端模板
- en: Templating solutions can be generally classified as client-side and server-side
    templating solutions. The web applications we build usually follow a server-side
    or client-side templating approach or a hybrid of both.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 模板解决方案通常可以分为客户端和服务器端模板解决方案。我们构建的Web应用程序通常遵循服务器端或客户端模板方法，或两者的混合。
- en: Client-side templating
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端模板
- en: Imagine a case where the web application, after loading the page, makes an API
    call via AJAX and gets a JSON response in return. How will it render the data
    it received into its corresponding HTML? Client-side templates are required in
    this case to keep our JavaScript code neat and clean, or else we will end up putting
    too much unreadable HTML code as strings inside the JavaScript code. Client-side
    templating frameworks allow us to dump the templates corresponding to the components
    of a page in the markup inside specific tags and render them via JavaScript code
    whenever necessary. The common disadvantage of following a client-side approach
    is the impact it has on the initial render time of this page.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一种情况，即Web应用程序在加载页面后，通过AJAX调用API并得到JSON响应。它将如何将接收到的数据呈现到相应的HTML中？在这种情况下，需要客户端模板来保持我们的JavaScript代码整洁，否则我们将不得不在JavaScript代码中放入太多难以阅读的HTML代码作为字符串。客户端模板框架允许我们将页面组件对应的模板放在标记内的特定标记中，并在必要时通过JavaScript代码呈现它们。采用客户端方法的常见缺点是它对页面的初始渲染时间产生的影响。
- en: Another important advantage of using client-side templating is that it helps
    to offload the templating effort from the server to the client. This helps to
    reduce the computational load on your server to a great extent, as the templating
    logic is executed only in the browser via JavaScript.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用客户端模板的另一个重要优势是，它有助于将模板工作从服务器转移到客户端。这有助于大大减少服务器的计算负载，因为模板逻辑仅在浏览器中通过JavaScript执行。
- en: Server-side templating
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端模板
- en: Server-side templating is where we will render the markup via calling the corresponding
    views before sending the HTML response back to the web browser. This is what we
    will explore in this chapter via Handlebars.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端模板是我们在将HTML响应发送回Web浏览器之前通过调用相应的视图来呈现标记的地方。这是我们将通过Handlebars在本章中探讨的内容。
- en: Many different rendering engines are available that can be used with Node and
    Express. The most popular among them are Jade, EJS, and Handlebars. The particular
    engine we will explore in this book is Handlebars.js.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的渲染引擎可用于Node和Express。其中最受欢迎的是Jade、EJS和Handlebars。本书将探讨的特定引擎是Handlebars.js。
- en: The basics of Handlebars
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Handlebars的基础知识
- en: '**Handlebars** is a really simple and easy-to-use templating framework. It
    works on the principle of interpolation of data within the template. To get an
    overview of Handlebars, consider the following block diagram:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**Handlebars**是一个非常简单和易于使用的模板框架。它的工作原理是在模板内插入数据。要了解Handlebars的概述，请考虑以下块图：'
- en: '![](img/79f68b2d-0cfe-4024-baef-1f18685afb88.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79f68b2d-0cfe-4024-baef-1f18685afb88.jpg)'
- en: Here, the compile method accepts the HTML expression templates and results in
    a function with a parameter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，编译方法接受HTML表达式模板，并生成一个带有参数的函数。
- en: Let's go through and explore the basic syntax of writing a Handlebars template.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看编写Handlebars模板的基本语法。
- en: Binding an object to the template
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将对象绑定到模板
- en: 'Let''s assume that the following JavaScript object is passed to a Handlebars
    template:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设以下JavaScript对象被传递给Handlebars模板：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The template file itself will contain the following markup:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 模板文件本身将包含以下标记：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding markup contains `name` as the HTML expression that will be interpolated
    by its context object.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的标记包含`name`作为HTML表达式，将由其上下文对象插值。
- en: 'We need to write the JavaScript method that makes it work, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要编写使其工作的JavaScript方法，如下所示：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This output variable will contain the following HTML code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出变量将包含以下HTML代码：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Embedding presentation logic
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入式呈现逻辑
- en: 'Of course, there''s a lot more that you can do than just this! Handlebars also
    supports conditional statements:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以做的远不止这些！Handlebars还支持条件语句：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Using an `if` block helper, as shown in the preceding code, you can check for
    true conditionals and only display HTML and/or data if the condition is true.
    Alternatively, you can use the `unless` helper to do the opposite and display
    HTML only if a condition is false:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`if`块助手，如前面的代码所示，您可以检查真条件，并且只在条件为真时显示HTML和/或数据。或者，您可以使用`unless`助手来执行相反的操作，只有在条件为假时显示HTML：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can use both `if` and `else` as well as `unless` the same way you would
    use conditional `if/else` in other programming languages. So that's it! These
    were all the basics that we need to know to resume our application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以像在其他编程语言中使用条件`if/else`一样使用`if`和`else`，以及`unless`。就是这样！这些就是我们需要了解的所有基础知识，以便恢复我们的应用程序。
- en: Views
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图
- en: A view is what we refer to an HTML page as. They are called views because of
    the MVC design pattern. As we already discussed, a model is a data that will be
    displayed on a page, the view is the page itself, and the controller is the brain
    that communicates between the model and the view.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是我们称之为HTML页面的东西。它们被称为视图是因为MVC设计模式。正如我们已经讨论过的，模型是将显示在页面上的数据，视图是页面本身，控制器是在模型和视图之间通信的大脑。
- en: Our particular application is going to need two views. The first view is the
    home page and the second view is the image page.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的特定应用程序将需要两个视图。第一个视图是主页，第二个视图是图像页面。
- en: The HTML in the following section relies heavily on Bootstrap, a popular HTML
    framework created by Twitter, which provides a standard set of user interface
    elements. These include buttons, fonts, layout grids, color schemes, and a whole
    lot more. Using Bootstrap allows us to not only present our application with a
    nice clean UI but also build it so that it is responsive and will look correct
    on any device that is viewing it. You can learn more about Bootstrap by visiting
    [http://getbootstrap.com](http://getbootstrap.com).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分的HTML严重依赖于Bootstrap，这是Twitter创建的流行HTML框架，它提供了一套标准的用户界面元素。这些包括按钮、字体、布局网格、颜色方案等等。使用Bootstrap不仅可以让我们以一个漂亮干净的UI呈现我们的应用程序，还可以使其具有响应性，并且在任何查看它的设备上都能正确显示。您可以通过访问[http://getbootstrap.com](http://getbootstrap.com)了解更多关于Bootstrap的信息。
- en: 'Let''s start by creating the home page view. Create a new file within the `views`
    folder, name it `index.Handlebars`, and insert the following HTML code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建主页视图开始。在`views`文件夹中创建一个新文件，命名为`index.Handlebars`，并插入以下HTML代码：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The reason we named our file `index.Handlebars` is a purely personal choice,
    but it is also based on common naming conventions on the web. Typically, an HTML
    page that acts as the root file for any website is named `index.whatever` (`.php`,
    `.aspx`, `.html`, and so on). Again, this is just a common convention and not
    something you need to specifically adhere to.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将文件命名为`index.Handlebars`的原因纯粹是个人选择，但也基于网络上的常见命名约定。通常，作为任何网站的根文件的HTML页面被命名为`index.whatever`（`.php`，`.aspx`，`.html`等）。再次强调，这只是一个常见的约定，不是您必须特别遵守的东西。
- en: 'Create a basic HTML form and set `method` to `post` and `action` to `/images`.
    Ensure that you set the `enctype` attribute of the form, since we will be uploading
    files as well as submitting data via form fields:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个基本的HTML表单，并将`method`设置为`post`，`action`设置为`/images`。确保设置表单的`enctype`属性，因为我们将上传文件以及通过表单字段提交数据：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, we have included a standard HTML input field for the file to be uploaded:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们包含了一个标准的HTML输入字段，用于上传文件：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Another standard HTML input field for the title of the file can be whatever
    the user wants, as shown in the following code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个标准的HTML输入字段用于文件的标题可以是用户想要的任何内容，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A standard HTML `textarea` input field to allow for a description is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 用于描述的标准HTML `textarea`输入字段如下：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'A standard HTML button is provided that will submit the form to the server.
    Using Bootstrap classes, we provide `btn` and `btn-success` to make this look
    like a Bootstrap-style button with the default color for success (green):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了一个标准的HTML按钮，将表单提交到服务器。使用Bootstrap类，我们提供了`btn`和`btn-success`，使其看起来像一个具有默认成功颜色（绿色）的Bootstrap风格按钮：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After the upload form section, we will display a list of the newest images
    uploaded to the website. Refer to the `each` block in the code snippet that follows.
    It is a keyword supported by Handlebars to loop over the data provided to the
    template in case of reusable HTML blocks. We will discuss this in detail in the
    following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在上传表单部分之后，我们将显示上传到网站的最新图像列表。请参考以下代码片段中的`each`块。它是Handlebars支持的关键字，用于循环遍历提供给模板的数据，以便重用HTML块。我们将在以下代码中详细讨论这一点：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There are two important sections in the main home page HTML code. The first
    is
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 主页HTML代码中有两个重要部分。第一个是
- en: the form we define, which will be the main way in which users will upload images
    to the website. As we will be accepting image files as well as details of the
    image (title, description, and so on), we need to ensure that the form is set
    up to accept multipart data. We also set the form action to point to the `/images`
    route we defined earlier in our `routes` and `image` controller modules. When
    a user completes the form and clicks on the Submit button, the form will send
    a `POST` request to `http://localhost:3300/images` and our router will catch that
    and forward it to our `image` controller. From there, the `image` controller will
    handle the processing of the data and will save it to the database, saving the
    image file to the filesystem, and redirecting to the image details page. We will
    actually be writing this logic in the next chapter. For now, nothing will actually
    happen if you submit the form.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义的表单将是用户上传图像到网站的主要方式。由于我们将接受图像文件以及图像的详细信息（标题、描述等），因此我们需要确保表单设置为接受多部分数据。我们还将表单操作设置为指向我们在`routes`和`image`控制器模块中早些时候定义的`/images`路由。当用户完成表单并单击提交按钮时，表单将向`http://localhost:3300/images`发送`POST`请求，我们的路由器将捕获该请求并将其转发到我们的`image`控制器。从那里，`image`控制器将处理数据并将其保存到数据库，将图像文件保存到文件系统，并重定向到图像详细信息页面。我们将在下一章中编写这个逻辑。目前，如果您提交表单，实际上不会发生任何事情。
- en: Below the main image uploading form on the home page, we also have a section
    that performs a Handlebars loop using `each` and iterates through an image collection,
    displaying each image as a thumbnail and the link to the image page. The `images`
    collection will be populated from our `home` controller. It's important to note
    here that when you are inside a `{{#each}}` loop in a Handlebars template, your
    context changes. That is, the path you use to access data inside `each` is now
    based on each item in the collection. Here, our object, which will be bound to
    the view, will have an image collection, and each item in the image collection
    will have a property for `uniqueid`, `filename`, and `title`. With the home page
    view out of the way, let's set up the view for the image page.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在主页上的主要图像上传表单下面，我们还有一个部分，使用`each`执行Handlebars循环，并遍历图像集合，将每个图像显示为缩略图，并提供指向图像页面的链接。`images`集合将从我们的`home`控制器中填充。在这里需要注意的是，在Handlebars模板的`{{#each}}`循环中，您的上下文会发生变化。也就是说，您用于访问`each`内部数据的路径现在基于集合中的每个项目。在这里，我们的对象将绑定到视图，将具有一个图像集合，图像集合中的每个项目将具有`uniqueid`、`filename`和`title`属性。完成主页视图后，让我们设置图像页面的视图。
- en: 'Create another file in the `views` folder and name it `image.Handlebars`. This
    file is going to have a bit more functionality, so I''m going to break it down
    into chunks so that you can review each section. First, insert the following block
    of code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在`views`文件夹中创建另一个文件，并将其命名为`image.Handlebars`。这个文件将具有更多的功能，所以我将它分成几部分，以便您可以审查每个部分。首先，插入以下代码块：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This block of code defines the bulk of the content that will be displayed on
    the page for a specific image. The `viewModel` for this page is going to consist
    of an `image` object that has various properties defined that you see being used
    throughout the code; properties such as `title`, `description`, `filename`, `likes`,
    `views`, and the timestamp of when the image upload was performed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码块定义了将在特定图像页面上显示的大部分内容。此页面的`viewModel`将由一个`image`对象组成，该对象具有在整个代码中使用的各种属性，例如`title`、`description`、`filename`、`likes`、`views`以及图像上传的时间戳。
- en: You may have noticed a slightly different piece of syntax in the code specific
    to the `{{ timeago image.timestamp }}` timestamp. That is actually a Handlebars
    helper.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到代码中与`{{ timeago image.timestamp }}`时间戳相关的语法略有不同。那实际上是一个Handlebars助手。
- en: It is a custom function we will write shortly, which will perform some special
    string formatting-specifically, converting a timestamp string to how long it was
    some time ago (that is, 2 days ago, 12 hours ago, 15 minutes ago, and so on).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个我们即将编写的自定义函数，它将执行一些特殊的字符串格式化，具体来说，将时间戳字符串转换为一段时间前的时间（即2天前，12小时前，15分钟前等）。
- en: 'We want to allow users to post comments to images, so let''s include a simple
    form for that:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望允许用户对图像发表评论，因此让我们包括一个简单的表单：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following is another standard HTML form with the method and action set.
    This form allows a user to enter, via standard HTML input fields, their name,
    email address, and comments. Another Submit button is provided to save the comment:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是另一个标准的HTML表单，其中设置了方法和操作。该表单允许用户通过标准的HTML输入字段输入他们的姓名、电子邮件地址和评论。还提供了另一个提交按钮来保存评论：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The form action for comments is set to `/images/{{ image.uniqueid }}/comment`.
    Again, if you recall from the routes we set up, we specifically defined a route
    to handle this.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 评论的表单操作设置为`/images/{{ image.uniqueid }}/comment`。同样，如果您回忆起我们设置的路由，我们特意定义了一个路由来处理这个问题。
- en: 'Finally, we want to display any comments that have been submitted for this
    image. Our `viewModel` includes a collection of comments in addition to the image
    details, so we can simply iterate over that collection using the Handlebars `#each`
    block helper:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望显示已提交的任何评论。我们的`viewModel`包括评论集合以及图像详细信息，因此我们可以简单地使用Handlebars的`#each`块助手遍历该集合：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Much like the loop, which we performed on the home page to display a collection
    of images, here, we simply iterate through every comment in the `comments` collection
    and display the comment and string-formatted timestamp (again using our `timeago`
    global helper). We also use Gravatar to display universal avatar images for users
    who have commented (assuming that they have provided their email addresses).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在主页上执行的循环一样，用于显示图像集合，这里我们只是遍历`comments`集合中的每条评论，并显示评论和字符串格式化的时间戳（再次使用我们的`timeago`全局助手）。我们还使用Gravatar来显示已评论用户的通用头像图像（假设他们已经提供了他们的电子邮件地址）。
- en: Gravatar is a service provided by [https://wordpress.com/](https://wordpress.com/)
    that allows a user's personal profile image to be provided via his/her email address.
    Many popular web services rely on Gravatar as a quick and easy way to display
    a user's personal profile image, without requiring the additional functionality
    to support such a feature. You can learn more about Gravatar at [http://gravatar.com](http://gravatar.com).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Gravatar是由[https://wordpress.com/](https://wordpress.com/)提供的一项服务，允许通过用户的电子邮件地址提供用户的个人资料图像。许多流行的网络服务依赖于Gravatar，作为一种快速简便的方式来显示用户的个人资料图像，而无需支持此功能的额外功能。您可以在[http://gravatar.com](http://gravatar.com)了解更多关于Gravatar的信息。
- en: Layouts
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局
- en: 'So far, we''ve created two specific views for our website: one for the home
    page and one for the details of an image. However, there''s no consistent UI wrapping
    both of these pages together. We have no consistent navigation or logo. There''s
    no common footer with standard copyright or additional information.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们为我们的网站创建了两个特定视图：一个用于主页，一个用于图像的详细信息。然而，没有一致的UI将这两个页面联系在一起。我们没有一致的导航或标志。没有带有标准版权或其他信息的通用页脚。
- en: Usually, with any website that you create, you're going to want to have some
    form of a standard layout or master template that every page will use. This layout
    typically includes the website logo and title, main navigation, sidebar (if any),
    and the footer. It would be bad practice to include the HTML code for the layout
    in every single page on the website because if you wanted to make even the smallest
    change to the main layout, you would have to edit every single page as a result.
    Fortunately, Handlebars helps lessen the work of utilizing a layout file.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，对于您创建的任何网站，您都希望有某种标准布局或主模板，每个页面都将使用。此布局通常包括网站标志和标题、主导航、侧边栏（如果有）、页脚。在每个网页上包含布局的HTML代码是不好的做法，因为如果您想对主布局进行最小的更改，结果将不得不编辑每个网页。幸运的是，Handlebars有助于减少使用布局文件的工作量。
- en: 'Let''s create a layout file for our app by creating a new file named `main.Handlebars`
    within the `views/layouts` folder and inserting the following HTML code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过在`views/layouts`文件夹中创建一个名为`main.Handlebars`的新文件来为我们的应用程序创建一个布局文件，并将以下HTML代码插入其中：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Most of the preceding code is just HTML and a lot of it uses Bootstrap for the
    actual physical layout of the page as well as a few other UI-related elements.
    The most important part is the highlighted section in the middle with `{{{ body
    }}}` and the few lines below that, as they pertain to the use of Handlebars.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的大部分代码只是HTML，其中大部分使用Bootstrap来实际布局页面以及其他一些与UI相关的元素。最重要的部分是中间的突出部分，其中包含`{{{
    body }}}`和下面的几行，因为它们涉及使用Handlebars。
- en: The `{{{ body }}}` is a reserved word in Handlebars that is used specifically
    for layouts. What we are basically saying is that any page we render that uses
    our default layout file will have its content inserted into the area where `{{{
    body }}}` is defined. If you recall from the `configure` module we created earlier,
    we defined our default layout file when we set up Handlebars as our rendering
    engine. The slightly odd use of `{{{` and `}}}` around the body is due to the
    fact that Handlebars escapes HTML by default when using `{{` and `}}`. Since our
    views contain mostly HTML, we want this to stay intact so that we use `{{{` and
    `}}}` instead.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`{{{ body }}}`是Handlebars中专门用于布局的保留字。基本上，我们要说的是，我们渲染的任何页面都将其内容插入到定义`{{{ body
    }}}`的区域。如果您回忆一下我们之前创建的`configure`模块，当我们设置Handlebars作为我们的渲染引擎时，我们定义了我们的默认布局文件。在`{{{
    body }}}`周围使用`{{{`和`}}}`的略显奇怪的用法是因为Handlebars在使用`{{`和`}}`时默认转义HTML。由于我们的视图主要包含HTML，我们希望保持其完整性，因此我们使用`{{{`和`}}}`。'
- en: The other three lines that use the `{{ > ... }}` render Handlebars partials,
    which are like the shared HTML code blocks, and will be covered next.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 另外三行使用`{{ > ... }}`渲染Handlebars部分，这些部分就像共享的HTML代码块，接下来将介绍。
- en: Partial views
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部分视图
- en: So far, we created a view, which acts as the bulk of the HTML for a specific
    page, and a layout, which acts as the wrapper for the consistent parts of the
    website on every page. Next, let's take a look at creating partials, which are
    really just small views that we can reuse and inject inside our layouts or views.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们创建了一个视图，它作为特定页面的大部分HTML，以及一个布局，它作为网站每个页面上一致部分的包装。接下来，让我们来看看创建部分，这些部分实际上只是我们可以重用并注入到我们的布局或视图中的小视图。
- en: Partials are a terrific way to create reusable components in a website and reduce
    code duplication. Consider the comments in our application. We have an HTML form
    defined that a user uses to submit a comment, but what if we wanted to allow users
    to post comments from a number of different areas throughout the website? This
    type of scenario is a great candidate for moving our comment form out to its own
    partial and then just including that partial anywhere we want to display the comment
    form.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 部分是在网站中创建可重用组件并减少代码重复的绝佳方式。考虑一下我们应用程序中的评论。我们定义了一个HTML表单，用户可以使用它提交评论，但是如果我们想允许用户从网站的许多不同区域发布评论，该怎么办？这种情况是将我们的评论表单移到自己的部分中的绝佳候选，并且只需在任何我们想要显示评论表单的地方包含该部分。
- en: For this app, we're using partials specifically for the sidebar in the main
    layout.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个应用程序，我们特别使用部分来处理主要布局中的侧边栏。
- en: With every view's `viewModel`, we will include a JavaScript object called `sidebar`
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个视图的`viewModel`，我们将包含一个名为`sidebar`的JavaScript对象
- en: that will contain the data specifically for the stats, popular images, and recent
    comments found within the sidebar partial.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 其中将包含侧边栏部分中找到的统计数据、热门图片和最近评论的特定数据。
- en: 'Let''s create the HTML for each of the partials. First, create a file named
    `stats.Handlebars` within the `views/partials/` path and include the following
    HTML code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为每个部分创建HTML。首先，在`views/partials/`路径中创建一个名为`stats.Handlebars`的文件，并包含以下HTML代码：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, create `views/partials/popular.Handlebars` and insert the following HTML
    code into it:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建`views/partials/popular.Handlebars`，并将以下HTML代码插入其中：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Finally, create `views/partials/comments.Handlebars` and insert the following
    HTML code into it:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建`views/partials/comments.Handlebars`并将以下HTML代码插入其中：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Handlebars helpers
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Handlebars助手
- en: Handlebars supports the idea of helpers, which are special custom functions
    you can write to perform some special logic from within the template during runtime.
    This will encourage developers to migrate the common presentation logic present
    in views into helpers and reuse them, thereby adding much more readability to
    the views. A great example of a helper would be the date string formatter we've
    been using. Helpers can be registered globally and made available to every template
    file, or they can be defined per view and passed to the template on an as-needed
    basis as part of the `viewModel`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Handlebars支持助手的概念，这些助手是您可以编写的特殊自定义函数，用于在模板中执行一些特殊逻辑。这将鼓励开发人员将视图中存在的常见呈现逻辑迁移到助手中并重用它们，从而大大提高视图的可读性。一个很好的助手示例是我们一直在使用的日期字符串格式化程序。助手可以全局注册并提供给每个模板文件，或者可以针对每个视图进行定义，并作为“viewModel”的一部分根据需要传递给模板。
- en: Global helpers
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局助手
- en: First, let's create a global helper that will be available to every Handlebars
    template we render. The global helper that we will create will be used to format
    a timestamp so that it is worded according to how long ago the event occurred.
    We will use this throughout our application for things such as comments and image
    timestamps.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个全局助手，它将适用于我们渲染的每个Handlebars模板。我们将创建的全局助手将用于格式化时间戳，以便根据事件发生多久以前的时间来表达。我们将在整个应用程序中使用它，例如评论和图像时间戳。
- en: 'The first thing we need to do is update our `server/configure.js` module, where
    we originally configured Handlebars as our rendering engine. We will add the following
    section to define our helpers:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是更新我们的`server/configure.js`模块，在那里我们最初将Handlebars配置为我们的渲染引擎。我们将添加以下部分来定义我们的助手：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As you can see from the additional code we added (highlighted in the preceding
    code), we defined the `helpers` property of the configuration options within `create()`.
    Inside the `helpers` property, we can define any number of functions we want.
    In this case, we defined a simple `timeago` function that actually uses another
    `npm` module called `moment`. The `moment` module is a great library for performing
    numerous different types of date string formatting. As we are using a new module,
    we need to be sure to perform `require()` at the top of our `configure` module:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们添加的附加代码中可以看出（在前面的代码中突出显示），我们在`create()`的配置选项中定义了`helpers`属性。在`helpers`属性内，我们可以定义任意数量的函数。在这种情况下，我们定义了一个简单的`timeago`函数，实际上使用了另一个名为`moment`的`npm`模块。`moment`模块是一个用于执行多种不同类型的日期字符串格式化的优秀库。由于我们正在使用一个新模块，我们需要确保在我们的`configure`模块顶部执行`require()`：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Also, we need to actually install it via `npm`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们需要通过`npm`实际安装它：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: View-specific helpers
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特定于视图的助手
- en: 'While defining helpers globally is nice because they are available to every
    view that''s rendered, sometimes you might only need to define a helper for use
    within a single view. In this case, you can include the helper with the model
    itself when calling `res.render()`, as shown in the following code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 全局定义助手很好，因为它们适用于渲染的每个视图，但有时您可能只需要为单个视图内部定义一个助手。在这种情况下，您可以在调用`res.render()`时将助手与模型本身一起包含，如以下代码所示：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Not only are we defining a custom helper that can be used specifically from
    this view in its model object but, in this particular instance, we are overriding
    the existing `timeago` global helper with a slightly different version that is
    perfectly valid.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅定义了一个可以从此视图的模型对象中专门使用的自定义助手，而且在这种特定情况下，我们还覆盖了现有的`timeago`全局助手，使用了略有不同但完全有效的版本。
- en: Rendering the views
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染视图
- en: 'Let''s take a minute to do a quick recap and see what we''ve done up to this
    point. So far, we have done the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花一点时间快速回顾一下我们到目前为止所做的事情。到目前为止，我们已经完成了以下工作：
- en: We created `index.Handlebars` and `image.Handlebars`, the views for the two
    main pages of the application
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了`index.Handlebars`和`image.Handlebars`，这是应用程序的两个主要页面的视图
- en: We created `layouts/main.handelbars`, the main layout file for every page in
    the application
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了`layouts/main.handelbars`，这是应用程序中每个页面的主要布局文件
- en: We created `partials/comments.Handlebars`, `popular.Handlebars`, and `stats.Handlebars`
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了`partials/comments.Handlebars`，`popular.Handlebars`和`stats.Handlebars`
- en: We created a global `timeago` Handlebars helper
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了一个全局`timeago` Handlebars助手
- en: So far, so good; however, none of these views actually do anything, receive
    any `viewModels`, or even appear when you run the application! Let's make a few
    quick minor modifications to our controllers to get our views to render properly.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很好；但是，这些视图实际上没有做任何事情，也没有接收任何`viewModels`，甚至在运行应用程序时也不会出现！让我们对我们的控制器进行一些快速的小修改，以使我们的视图正确渲染。
- en: Open `/controllers/home.js` so that you can edit the `home` controller module.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`/controllers/home.js`以编辑`home`控制器模块。
- en: 'Update the contents of that file so that it looks identical to the following
    block of code:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 更新该文件的内容，使其看起来与以下代码块完全相同：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Instead of performing `res.send`, which just sends a simple response, we are
    calling `res.render` and passing in the name of the template file we want to render
    as the only parameter (for now). Using the defaults that were defined in our `configure`
    module, the `index` file will be loaded from our `views` folder. Again, also using
    the defaults, we configured the default layout of `main` that will be applied
    to this view in our `configure` module.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再执行`res.send`，它只发送简单的响应，而是调用`res.render`并将要渲染的模板文件的名称作为唯一参数传递（目前）。使用我们在`configure`模块中定义的默认值，`index`文件将从我们的`views`文件夹加载。同样，还使用默认值，我们在`configure`模块中配置了将应用于此视图的默认布局`main`。
- en: 'Let''s update the `image` controller to do the same thing as well. Edit `/controllers/image.js`
    and change the `index` function so that it looks identical to the following block
    of code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也更新`image`控制器以执行相同的操作。编辑`/controllers/image.js`并更改`index`函数，使其看起来与以下代码块完全相同：
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: And that's it! Let's fire up the server, open the app in our browser, and see
    how
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！让我们启动服务器，在浏览器中打开应用程序，看看
- en: 'it looks:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来：
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The preceding command uses `npm start` to start the application. Please note
    that this command will work only if you have the application entrypoint file configured
    in the `package.json` file. If this is not working, then you have to set the main
    attribute in the `package.json` and set it to the `server.js` file. Also, as an
    alternative, you can manually invoke the `server.js` file by using `node server.js`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令使用`npm start`来启动应用程序。请注意，此命令仅在`package.json`文件中配置了应用程序入口文件时才有效。如果这不起作用，那么您必须在`package.json`中设置主属性，并将其设置为`server.js`文件。另外，作为替代方案，您可以通过使用`node
    server.js`手动调用`server.js`文件。
- en: 'Success! Hopefully, you see something that closely resembles the following
    screenshot of the home page:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！希望您看到的东西与主页的以下截图非常相似：
- en: '![](img/464d7d90-c835-43d7-8dd4-775e358b010c.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/464d7d90-c835-43d7-8dd4-775e358b010c.png)'
- en: Additionally, if you provide a random URL to a specific image, for example,
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您向特定图像提供一个随机的URL，例如，
- en: '`http://localhost:3300/images/1`, you should see the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:3300/images/1`，您应该看到以下截图：'
- en: '![](img/d75936c4-08ce-4be0-b6d7-834a6426b932.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d75936c4-08ce-4be0-b6d7-834a6426b932.png)'
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, the Handlebars template-rendering engine was introduced,
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，介绍了Handlebars模板渲染引擎，
- en: following which we reviewed the syntax used when creating dynamic HTML
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 随后我们回顾了创建动态HTML时使用的语法
- en: pages. We created the main layout for our app as well as the home page and image
    page views. We included partial views for the sidebar in the layout and created
    a global Handlebars helper to display custom formatted dates.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为应用程序创建了主布局以及主页和图像页视图。我们在布局中包含了侧边栏的部分视图，并创建了一个全局Handlebars助手来显示自定义格式的日期。
- en: Even though none of the views are currently displaying any data (because we
    aren't passing models to the views yet), you can see that things are starting
    to come along nicely! In the next chapter, we will wire up the actual logic in
    the controllers for each page and build up the model objects so that we start
    seeing some actual content on our screens.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管当前没有任何视图显示任何数据（因为我们还没有将模型传递给视图），但您可以看到事情开始顺利进行！在下一章中，我们将连接每个页面控制器中的实际逻辑，并构建模型对象，以便在屏幕上看到一些实际内容。
