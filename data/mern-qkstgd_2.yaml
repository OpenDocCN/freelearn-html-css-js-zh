- en: Building a Web server with ExpressJS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ExpressJS 构建 Web 服务器
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Routing in ExpressJS
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ExpressJS 中的路由
- en: Modular route handlers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块化路由处理程序
- en: Writing middleware functions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写中间件函数
- en: Writing configurable middleware functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写可配置的中间件函数
- en: Writing router-level middleware functions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写路由级别的中间件函数
- en: Writing error-handler middleware functions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写错误处理中间件函数
- en: Using ExpressJS' built-in middleware function to serve static assets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ExpressJS 内置的中间件函数来提供静态资源
- en: Parsing the HTTP request body
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析 HTTP 请求体
- en: Compressing HTTP responses
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩 HTTP 响应
- en: Using an HTTP request logger
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 HTTP 请求记录器
- en: Managing and creating virtual domains
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理和创建虚拟域名
- en: Securing an ExpressJS web application with helmet
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 helmet 保护 ExpressJS Web 应用程序
- en: Using template engines
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模板引擎
- en: Debugging your ExpressJS web application
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试你的 ExpressJS Web 应用程序
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will be required to have an IDE, Visual Studio Code, Node.js and MongoDB.
    You will also need to install Git, in order use the Git repository of this book.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要有一个 IDE、Visual Studio Code、Node.js 和 MongoDB。你还需要安装 Git，以便使用本书的 Git 仓库。
- en: 'The code files of this chapter can be found on GitHub:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在 GitHub 上找到：
- en: '[https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter02](https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter02)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter02](https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter02)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[https://goo.gl/xXhqWK](https://goo.gl/xXhqWK)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://goo.gl/xXhqWK](https://goo.gl/xXhqWK)'
- en: Introduction
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: ExpressJS is the preferred de facto Node.js web application framework for building
    robust web applications and APIs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: ExpressJS 是构建健壮的 Web 应用程序和 API 的首选事实上的 Node.js Web 应用程序框架。
- en: In this chapter, the recipes will focus on building a fully functional web server
    and understanding the core fundamentals.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的食谱将专注于构建一个功能齐全的 Web 服务器和了解核心基础。
- en: Routing in ExpressJS
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ExpressJS 中的路由
- en: Routing refers to how an application responds or acts when a resource is requested
    via an HTTP verb or HTTP method.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 路由指的是当通过 HTTP 动词或 HTTP 方法请求资源时，应用程序如何响应或行动。
- en: '**HTTP** stands for **Hypertext Transfer Protocol** and it''s the basis of
    data communication for the **World Wide Web** (**WWW**). All documents and data
    in the WWW are identified by a **Uniform Resource Locator** (**URL**).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP** 代表 **超文本传输协议**，它是 **万维网**（**WWW**）数据通信的基础。万维网中的所有文档和数据都由一个 **统一资源定位符**（**URL**）标识。'
- en: HTTP verbs or HTTP methods are a *client-server* model. Typically, a web browser
    serves as a *client*, and in our case ExpressJS is the framework that allows us
    to create a *server* capable of understanding these requests. Every request expects
    a response to be sent to the client to recognize the status of the resource that
    it is requesting.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 动词或 HTTP 方法是 *客户端-服务器* 模型。通常，网页浏览器充当 *客户端*，在我们的案例中，ExpressJS 是允许我们创建能够理解这些请求的
    *服务器* 的框架。每个请求都期望发送一个响应到客户端，以便识别它所请求的资源的状态。
- en: 'Request methods can be:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请求方法可以是：
- en: '**Safe**: An HTTP verb that performs read-only operations on the server. In
    other words, it does not alter the server state. For example: `GET`.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**：一个只执行服务器上的只读操作的 HTTP 动词。换句话说，它不会改变服务器状态。例如：`GET`。'
- en: '**Idempotent**: An HTTP verb that has the same effect on the server when identical
    requests are made. For instance, sending a `PUT` request to modify a user''s first
    name should have the same effect on the server if implemented correctly when multiple
    identical requests are sent. All *safe* methods are also idempotent. For example,
    the `GET`, `PUT`, and `DELETE` methods are idempotent.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**幂等**：当发送相同请求时，对服务器产生相同效果的 HTTP 动词。例如，发送一个 `PUT` 请求来修改用户的首名，如果正确实现，当发送多个相同请求时，应该在服务器上产生相同的效果。所有
    *安全* 方法也都是幂等的。例如，`GET`、`PUT` 和 `DELETE` 方法都是幂等的。'
- en: '**Cacheable**: An HTTP response that can be cached. Not all methods or HTTP
    verbs can be cached. A response is cacheable only if the *status code* of the
    response and the method used to make the request are both cacheable. For example,
    the GET method is cacheable and the following status codes: `200` (Request succeeded),
    `204` (No content), `206` (Partial content), `301` (Moved permanently), `404`
    (Not found), `405` (Method not allowed), `410` (Gone or Content permanently removed
    from server), and `414` (URI too long).'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可缓存**: 可以缓存的 HTTP 响应。并非所有方法或 HTTP 动词都可以缓存。只有当响应的 *状态码* 和用于发出请求的方法都是可缓存的时，响应才是可缓存的。例如，GET
    方法是可缓存的，以下状态码也可以缓存：`200`（请求成功）、`204`（无内容）、`206`（部分内容）、`301`（永久移动）、`404`（未找到）、`405`（方法不允许）、`410`（已删除或内容已从服务器永久删除）、`414`（URI
    太长）。'
- en: Getting ready
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Understanding routing is one of the most important core aspects in building
    robust RESTful APIs.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 理解路由是构建健壮的 RESTful API 最重要的核心方面之一。
- en: 'In this recipe, we will see how ExpressJS handles or interprets HTTP requests.
    Before you start, create a new `package.json` file with the following content:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将了解 ExpressJS 如何处理或解释 HTTP 请求。在开始之前，创建一个包含以下内容的 `package.json` 文件：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'ExpressJS does the whole job of understanding a client''s request. The request
    may come from a browser, for instance. Once the request has been interpreted,
    ExpressJS saves all the information in two objects:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: ExpressJS 执行理解客户端请求的全部工作。请求可能来自浏览器，例如。一旦请求被解释，ExpressJS 就将所有信息保存到两个对象中：
- en: '**Request**: This contains all the data and information about the client''s
    request. For instance, ExpressJS parses the URI and makes its parameters available
    on request.query.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求**: 这包含有关客户端请求的所有数据和信息。例如，ExpressJS 解析 URI 并在 `request.query` 上提供其参数。'
- en: '**Response**: This contains data and information that will be sent to the client.
    The response''s headers can be modified as well before sending the information
    to the client. The `response` object has several methods available for sending
    the status code and data to the client. For instance: `response.status(200).send(''Some
    Data!'')`.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应**: 这包含将发送给客户端的数据和信息。在将信息发送给客户端之前，也可以修改响应的头部。`response` 对象有几种方法可用于向客户端发送状态码和数据。例如：`response.status(200).send(''Some
    Data!'')`。'
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: '`Request` and `Response` objects are passed as arguments to the *route handlers*
    defined inside a `route` method.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`Request` 和 `Response` 对象作为参数传递给在 `route` 方法内部定义的 *路由处理程序*。'
- en: Route methods
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由方法
- en: These are derived from HTTP verbs or HTTP methods. A route method is used to
    define the response that an application will have for a specific HTTP verb.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是从 HTTP 动词或 HTTP 方法派生出来的。路由方法用于定义应用程序对特定 HTTP 动词的响应。
- en: 'ExpressJS route methods have equivalent names to HTTP verbs. For instance:
    `app.get()` for the `GET` HTTP verb or `app.delete()` for the `DELETE` HTTP verb.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: ExpressJS 路由方法具有与 HTTP 动词等效的名称。例如：`app.get()` 对应于 `GET` HTTP 动词，或 `app.delete()`
    对应于 `DELETE` HTTP 动词。
- en: 'A very basic route can be written as the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常基本的路由可以写成以下形式：
- en: Create a new file named `1-basic-route.js`
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `1-basic-route.js` 的新文件
- en: 'Include the ExpressJS library first and initialize a new ExpressJS application:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先包含 ExpressJS 库并初始化一个新的 ExpressJS 应用程序：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add a new route method to handle requests for the path `"/"`. The first argument
    specifies the path or URL, the next argument is the route handler. Inside the
    route handler, let''s use the `response` object to send a status code `200 (OK)`
    and text to the client:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的路由方法来处理对路径 `"/"` 的请求。第一个参数指定路径或 URL，下一个参数是路由处理程序。在路由处理程序内部，让我们使用 `response`
    对象发送状态码 `200 (OK)` 和文本到客户端：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, use the `listen` method to accept new connections on port `1337`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用 `listen` 方法在端口 `1337` 上接受新的连接：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the file
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a Terminal and run the following command:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行以下命令：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open a new tab on your browser and visit `localhost` on port `1337` in your
    web browser to see the results:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开一个新标签页，并访问 `localhost` 端口 `1337` 以查看结果：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For more information about which HTTP methods are supported by ExpressJS, visit
    the official ExpressJS website at [https://expressjs.com/en/guide/routing.html#route-methods](https://expressjs.com/en/guide/routing.html#route-methods).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 ExpressJS 支持哪些 HTTP 方法的更多信息，请访问官方 ExpressJS 网站上的 [https://expressjs.com/en/guide/routing.html#route-methods](https://expressjs.com/en/guide/routing.html#route-methods)。
- en: Route handlers
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由处理程序
- en: Route handlers are callback functions that accept three arguments. The first
    one is the `request` object, the second one is the `response` object, and the
    last one is a `callback,` which passes the handler to the next request handler
    in the chain. Multiple `callback` functions can be used inside a route method
    as well.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 路由处理器是接受三个参数的回调函数。第一个参数是 `request` 对象，第二个参数是 `response` 对象，最后一个参数是 `callback`，它将处理器传递给链中的下一个请求处理器。在路由方法内部也可以使用多个
    `callback` 函数。
- en: 'Let''s see a working example of how we could write route handlers inside route
    methods:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在路由方法内部编写路由处理器的实际示例：
- en: Create a new file named `2-route-handlers.js`
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `2-route-handlers.js` 的新文件
- en: 'Include the ExpressJS library, then initialize a new ExpressJS application:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含 ExpressJS 库，然后初始化一个新的 ExpressJS 应用程序：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add two route methods to handle a request in the same path `"/one"`. Use the
    `type` method of the `response` object to set the content type of the response
    sent to the client to `text/plain`. Using the `write` method send partial data
    to the client. To finalize sending data, use the `end` method of the response
    object. Calling `nextHandler` will pass the handler to the second handler in the
    chain:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加两个路由方法来处理同一路径 `"/one"` 的请求。使用 `response` 对象的 `type` 方法设置发送给客户端的响应内容类型为 `text/plain`。使用
    `write` 方法向客户端发送部分数据。要最终发送数据，请使用响应对象的 `end` 方法。调用 `nextHandler` 将处理器传递给链中的下一个处理器：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add a `route` method to handle a request in the path `"/two"`. Two route handlers
    are defined inside the `route` method to handle the same request:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向处理路径 `"/two"` 的请求的 `route` 方法添加一个 `route` 方法。在 `route` 方法内部定义了两个路由处理器来处理相同的请求：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Use the `listen` method to accept new connections on port `1337`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `listen` 方法在端口 `1337` 上接受新的连接：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save the file
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a Terminal and run:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To see the result, open a new tab in your web browser and visit:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看结果，请在您的网页浏览器中打开一个新标签页并访问：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Chainable route methods
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链式路由方法
- en: Route methods can be chainable using `app.route(path)` because the `path` is
    specified for a single location. This is probably the best approach when dealing
    with multiple route methods because, besides making the code more readable and
    less prone to typos and redundancy, it allows to work with multiple route methods
    at the same time.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 路由方法可以通过使用 `app.route(path)` 来实现链式调用，因为 `path` 是为单个位置指定的。当处理多个路由方法时，这可能是最佳方法，因为除了使代码更易读、减少错误和冗余外，它还允许同时使用多个路由方法。
- en: Create a new file named `3-chainable-routes.js`
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `3-chainable-routes.js` 的新文件
- en: 'Initialize a new ExpressJS application:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个新的 ExpressJS 应用程序：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Chain three route methods using the `route` method:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `route` 方法链式调用三个路由方法：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Use the `listen` method to accept new connections on port `1337`:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `listen` 方法在端口 `1337` 上接受新的连接：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Save the file
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To see the result, open a new tab in your web browser and visit:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看结果，请在您的网页浏览器中打开一个新标签页并访问：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: There's more...
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Route paths can be strings or regular expressions. Route paths are internally
    turned into regular expressions using the `path-to-regexp` NPM package [https://www.npmjs.com/package/path-to-regexp](https://www.npmjs.com/package/path-to-regexp).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 路由路径可以是字符串或正则表达式。路由路径在内部使用 `path-to-regexp` NPM 包 [https://www.npmjs.com/package/path-to-regexp](https://www.npmjs.com/package/path-to-regexp)
    转换为正则表达式。
- en: '`path-to-regexp`, in a way, helps you write path regular expressions in a more
    human-readable way. For example, consider the following code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`path-to-regexp` 以一种方式帮助您以更易读的方式编写路径正则表达式。例如，考虑以下代码：'
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This could be written as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以写成如下形式：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Or better:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 或者更好：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Take a look at this expression: `/([a-z]+)-([0-9]+)$/`. The parentheses in
    the regular expression are called **capturing parentheses**; and when they find
    a match, they remember it. In the preceding example, for `abc-12345`, two strings
    are remembered, `{"0":"abc","1":"12345"}`. This is the way that ExpressJS finds
    a match, remembers its value, and associates it to a key:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个表达式：`/([a-z]+)-([0-9]+)$/`。正则表达式中的括号被称为 **捕获括号**；当它们找到匹配项时，会记住它。在上面的例子中，对于
    `abc-12345`，会记住两个字符串，`{"0":"abc","1":"12345"}`。这是 ExpressJS 找到匹配项、记住其值并将其与键关联的方式：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Modular route handlers
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块化路由处理器
- en: ExpressJS has a built-in class called **router**. A router is just a class that
    allows developers to write mountable and modular route handlers.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ExpressJS 有一个内置的名为 **router** 的类。路由器只是一个允许开发者编写可挂载和模块化路由处理器的类。
- en: 'A **Router** is an instance of ExpressJS'' core routing system. That means,
    all routing methods from an ExpressJS application are available:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**路由器**是ExpressJS核心路由系统的一个实例。这意味着，来自ExpressJS应用程序的所有路由方法都是可用的：'
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we will see how to use a router to make a modular application.
    Before you start, create a new `package.json` file with the following content:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何使用路由器来制作一个模块化应用程序。在你开始之前，创建一个包含以下内容的新的`package.json`文件：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, install the dependencies by opening a terminal and running:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Suppose that you want to write a modular mini-application within your ExpressJS
    main application that can be mounted to any URI. You want to be able to choose
    the path where to mount it, or you just want to mount the same route methods and
    handlers to several others paths or a URI.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要在你的ExpressJS主应用程序中编写一个模块化迷你应用程序，该应用程序可以被挂载到任何URI。你想要能够选择挂载它的路径，或者你只是想要将相同的路由方法和处理程序挂载到其他几个路径或URI。
- en: Create a new file named `modular-router.js`
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`modular-router.js`的新文件
- en: 'Initialize a new ExpressJS application:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个新的ExpressJS应用程序：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Define a router for your mini-application and add a request method to handle
    requests for path `"/home"`:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的迷你应用程序定义一个路由器，并添加一个请求方法来处理对路径`"/home"`的请求：
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Mount your modular mini-application to `"/first"` path, and to `"/second"`
    path:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的模块化迷你应用程序挂载到`"/first"`路径，以及`"/second"`路径：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Listen for new connections on port `1337`:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在端口`1337`上监听新连接：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Save the file
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a Terminal and run the following command:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行以下命令：
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To see the results, navigate in your web browser to:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看结果，请在你的网络浏览器中导航到：
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You will see two different outputs:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到两个不同的输出：
- en: '[PRE31]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As can be seen, a *router* was mounted to two different mount points. Routers
    are usually referred to as mini-applications because they can be mounted to an
    ExpressJS application's specific routes and not only once but also several times
    to different mount points, paths, or URIs.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如所示，一个*路由器*被挂载到两个不同的挂载点。路由器通常被称为迷你应用程序，因为它们可以被挂载到ExpressJS应用程序的特定路由上，并且不仅一次，还可以多次挂载到不同的挂载点、路径或URI。
- en: Writing middleware functions
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写中间件函数
- en: Middleware functions are mainly used to make changes in the `request` and `response`
    object. They are executed in sequence, one after another, but if a middleware
    functions does not pass control to the next one, the request is left hanging.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件函数主要用于在`request`和`response`对象中进行更改。它们按顺序依次执行，但如果一个中间件函数没有将控制权传递给下一个函数，则请求将挂起。
- en: Getting ready
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Middleware functions have the following signature:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件函数具有以下签名：
- en: '[PRE32]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The signature is very similar to writing route handlers. In fact, a middleware
    function can be written for a specific HTTP method and a specific path route,
    and will look like this, for example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 签名与编写路由处理程序非常相似。实际上，可以为特定的HTTP方法和特定的路径路由编写一个中间件函数，例如，它看起来像这样：
- en: '[PRE33]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'So, if you are wondering what the difference is between route handlers, and
    middleware functions, the answer is simple: their purpose.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你想知道路由处理程序和中间件函数之间的区别是什么，答案是简单的：它们的目的。
- en: If you are writing route handlers, and the `request` objects and/or the `response`
    object is modified, then you are writing middleware functions.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在编写路由处理程序，并且修改了`request`对象和/或`response`对象，那么你正在编写中间件函数。
- en: 'In this recipe, you will see how to use a middleware function to restrict access
    to certain paths or routes that depend on a certain condition. Before you start,
    create a new `package.json` file with the following content:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将看到如何使用中间件函数来限制对某些路径或路由的访问，这些路径或路由依赖于某个条件。在你开始之前，创建一个包含以下内容的新的`package.json`文件：
- en: '[PRE34]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then, install the dependencies by opening a terminal and running:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE35]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How to do it...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will write a middleware function that allows access to the root path `"/"`
    only when the query parameter `allowme` is present:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个中间件函数，该函数允许在查询参数`allowme`存在时仅访问根路径`"/"`：
- en: Create a new file named `middleware-functions.js`
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`middleware-functions.js`的新文件
- en: 'Initialize a new ExpressJS application:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个新的ExpressJS应用程序：
- en: '[PRE36]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Write a middleware function that will add a property `allowed` to the `request`
    object:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个中间件函数，该函数将`allowed`属性添加到`request`对象中：
- en: '[PRE37]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add a request method to handle requests for path `"/"`:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个请求方法来处理对路径`"/"`的请求：
- en: '[PRE38]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Listen on port `1337` for new connections:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在端口`1337`上监听新连接：
- en: '[PRE39]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Save the file
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE40]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'To see the results, in your web browser, navigate to:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看结果，在你的网页浏览器中，导航到：
- en: '[PRE41]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How it works...
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Just like with route handlers, middleware functions need to pass control to
    the next handler; otherwise, our application will have been hanging because no
    data was sent to the client, and the connection was not closed either.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 就像处理路由处理程序一样，中间件函数需要将控制权传递给下一个处理程序；否则，我们的应用程序将会挂起，因为没有数据发送到客户端，连接也没有关闭。
- en: If new properties are added to the `request` or `response` objects inside a
    middleware function, the next handler will have access to those new properties.
    As in our previously written code, the `allowed property` in the `request` object
    is available to the next handler.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在中间件函数内部的`request`或`response`对象中添加了新属性，下一个处理程序将能够访问这些新属性。就像我们之前编写的代码一样，`request`对象中的`allowed
    property`对下一个处理程序是可用的。
- en: Writing configurable middleware functions
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写可配置的中间件函数
- en: A common pattern for writing middleware functions is to wrap the middleware
    function inside another function. The result of doing so is a configurable middleware
    function. They are also *higher-order functions*, that is, a function that returns
    another function.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 编写中间件函数的常见模式是将中间件函数包装在另一个函数中。这样做的结果是一个可配置的中间件函数。它们也是*高阶函数*，也就是说，一个返回另一个函数的函数。
- en: '[PRE42]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Usually an object is used as an `options` parameters. However, there is nothing
    stopping you from doing it in your own way.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个对象被用作`options`参数。然而，你完全可以用自己的方式来做。
- en: Getting ready
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will write a configurable logger middleware function. Before
    you start, create a new `package.json` file with the following content:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将编写一个可配置的日志中间件函数。在开始之前，创建一个新的`package.json`文件，内容如下：
- en: '[PRE43]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then, install the dependencies by opening a terminal and running:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE44]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How to do it...
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'What your configurable middleware function will do is simple: it will print
    the status code and the URL when a request is made.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你的可配置中间件函数要执行的操作很简单：当发起请求时，它会打印状态码和URL。
- en: Create a new file named `middleware-logger.js`
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`middleware-logger.js`的新文件
- en: 'Export a function that accepts an object as the first argument. The function
    expects the object to have a property `enable`, which can be either `true` or
    `false`:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导出一个接受一个对象作为第一个参数的函数。该函数期望对象具有一个名为`enable`的属性，可以是`true`或`false`：
- en: '[PRE45]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Save the file
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: Let's test it...
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们测试一下...
- en: 'Our configurable middleware function is not useful on its own. Create a simple
    ExpressJS application to see our middleware actually working:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的可配置中间件函数本身并没有什么用处。创建一个简单的ExpressJS应用程序来查看我们的中间件实际上是如何工作的：
- en: Create a new file named `configurable-middleware-test.js`
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`configurable-middleware-test.js`的新文件
- en: 'Include our `middleware-logger.js` module and initialize a new ExpressJS application:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含我们的`middleware-logger.js`模块并初始化一个新的ExpressJS应用程序：
- en: '[PRE46]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Use the `use` method to include our configurable middleware function. When
    the `enable` property is set to `true`, your logger will work and log every request''s
    status code and URL to the terminal:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`use`方法包含我们的可配置中间件函数。当`enable`属性设置为`true`时，你的日志记录器将工作并记录每个请求的状态码和URL到终端：
- en: '[PRE47]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Listen on port `1337` for new connections:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听`1337`端口以接收新连接：
- en: '[PRE48]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Save the file
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE49]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'In your browser, navigate to:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的浏览器中，导航到：
- en: '[PRE50]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The Terminal should display:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 终端应该显示：
- en: '[PRE51]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: There's more...
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you want to experiment, start your configurable middleware test application
    with the `enable` property set to `false`. No logs should be displayed.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想实验，将可配置中间件测试应用程序的`enable`属性设置为`false`。不应该显示任何日志。
- en: Usually, you would want to disable logging in production, since this operation
    could hit performance.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你希望在生产环境中禁用日志，因为这个操作可能会影响性能。
- en: 'An alternative to disabling all logging is to use other libraries to do this
    task instead of using `console`. There are libraries that allow you to set different
    levels of logging as well, for instance:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭所有日志的另一种方法是使用其他库来完成这项任务，而不是使用`console`。还有一些库允许你设置不同的日志级别，例如：
- en: '**Debug module**: [https://www.npmjs.com/package/debug](https://www.npmjs.com/package/debug)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试模块**: [https://www.npmjs.com/package/debug](https://www.npmjs.com/package/debug)'
- en: '**Winston**: [https://www.npmjs.com/package/winston](https://www.npmjs.com/package/winston)'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Winston**: [https://www.npmjs.com/package/winston](https://www.npmjs.com/package/winston)'
- en: 'Logging is useful for several reasons. The main reasons are:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录有几个有用的原因。主要原因包括：
- en: It checks whether your services are running properly, for example, checking
    whether your application is connected to MongoDB.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它检查您的服务是否正常运行，例如，检查您的应用程序是否连接到 MongoDB。
- en: It discovers errors and bugs.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它发现错误和漏洞。
- en: It helps you to understand better how your application is working. For instance,
    if you have a modular application, you can see how it integrates when included
    in other applications.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于您更好地理解应用程序的工作方式。例如，如果您有一个模块化应用程序，您可以看到它如何与其他应用程序集成。
- en: Writing router-level middleware functions
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写路由级别中间件函数
- en: Router-level middleware functions are only executed inside a router. They are
    usually used when applying a middleware to a mount point only or to a specific
    path.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 路由级别中间件函数仅在路由器内部执行。它们通常用于将中间件应用于仅挂载点或特定路径时。
- en: Getting ready
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will create a small logger router-level middleware function
    that will only log requests to paths mounted or located in the router''s mounted
    path. Before you start, create a new `package.json` file with the following content:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，您将创建一个小的日志记录路由级别中间件函数，该函数将仅记录挂载在路由器挂载路径或位于该路径中的请求。在开始之前，创建一个包含以下内容的新的
    `package.json` 文件：
- en: '[PRE52]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE53]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: How to do it...
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Create a new file named `router-level.js`
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `router-level.js` 的新文件
- en: 'Initialize a new ExpressJS application and define a router:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个新的 ExpressJS 应用程序并定义一个路由器：
- en: '[PRE54]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Define our logger middleware function:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义我们的日志记录中间件函数：
- en: '[PRE55]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Mount the Router to the path `"/router"`
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将路由器挂载到路径 `"/router"`
- en: '[PRE56]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Listen on port `1337` for new connections:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听端口 `1337` 以便接收新的连接：
- en: '[PRE57]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Save the file
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE58]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'In your web browser navigate to:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网页浏览器中导航到：
- en: '[PRE59]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The Terminal should display:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 终端应显示：
- en: '[PRE60]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'After, in your web browser, navigate to:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在您的网页浏览器中导航到：
- en: '[PRE61]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: No logs should be displayed in terminal
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 终端中不应显示任何日志
- en: There's more...
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It is possible to pass control back to the next middleware function or route
    method outside of a router by calling `next('router')`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用 `next('router')`，可以在路由器外部将控制权交回下一个中间件函数或路由方法。
- en: '[PRE62]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'For example, by creating a router that expects to receive a user ID as a query
    parameter. The `next(''router'')` function can be used to get out of the router
    or pass control to the next middleware function outside of the router when a user
    ID is not provided. The next middleware function out of the router can be used
    to display other information when the router passes control to it. For example:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，通过创建一个期望接收用户 ID 作为查询参数的路由器。当未提供用户 ID 时，可以使用 `next('router')` 函数退出路由器或将控制权传递给路由器外部的下一个中间件函数。路由器外部的下一个中间件函数可以在路由器将控制权传递给它时显示其他信息。例如：
- en: Create a new file named `router-level-control.js`
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `router-level-control.js` 的新文件
- en: 'Initialize a new ExpressJS application:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个新的 ExpressJS 应用程序：
- en: '[PRE63]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Define a new router:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个新的路由器：
- en: '[PRE64]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Define our logger middleware function inside the router:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在路由器内部定义我们的日志记录中间件函数：
- en: '[PRE65]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Add a route method to handle `GET` requests for path `"/"` which will be executed
    only if the middleware function passes control to it:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向路由器外部添加一个路由方法来处理路径 `"/"` 的 `GET` 请求，该请求只有在中间件函数将控制权传递给它时才会执行：
- en: '[PRE66]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Add a route method to handle `GET` requests for path `"/"` outside of the router.
    However, include the router as a route handler as the second argument, and another
    route handler to handle the same request only if the router passes control to
    it:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向路由器外部添加一个路由方法来处理路径 `"/"` 的 `GET` 请求。然而，将路由器作为第二个参数包含在路由处理程序中，并添加另一个路由处理程序来处理相同的请求，只有当路由器将控制权传递给它时：
- en: '[PRE67]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Listen on port `1337` for new connections:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听端口 `1337` 以便接收新的连接：
- en: '[PRE68]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Save the file
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE69]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'To see the result, in your browser, navigate to:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看结果，请在浏览器中导航到：
- en: '[PRE70]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: How it works...
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When navigating to the first URL (`http://localhost:1337/`), the following
    message is shown:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 当导航到第一个 URL (`http://localhost:1337/`) 时，显示以下消息：
- en: '[PRE71]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: This is because the middleware function in the router checks if the `id` was
    provided in the query, and because it is not, it passes control to the next handler
    outside of the router with `next('router')`.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为路由器中的中间件函数检查查询中是否提供了 `id`，因为它没有提供，所以它使用 `next('router')` 将控制权传递给路由器外部的下一个处理程序。
- en: 'On the other hand, when navigating to the second URL ([http://localhost:1337/?id=7331](http://localhost:1337/?id=7331)),
    the following message is shown:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，当导航到第二个 URL ([http://localhost:1337/?id=7331](http://localhost:1337/?id=7331))
    时，显示以下消息：
- en: '[PRE72]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: That happens because, as an `id` was provided in the query, the middleware function
    in the router will pass control to the next handler inside the router with `next()`.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为在查询中提供了一个`id`，所以路由器中的中间件函数会通过`next()`将控制权传递给路由器内的下一个处理器。
- en: Writing error-handler middleware functions
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写错误处理程序中间件函数
- en: ExpressJS already includes by default a built-in error handler which gets executed
    at the end of all middleware and route handlers.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: ExpressJS默认包含一个内置的错误处理程序，它在所有中间件和路由处理器结束时执行。
- en: 'There are ways that the built-in error handler can be triggered. One is implicit
    when an error occurs inside a route handler. For example:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 触发内置错误处理程序的方法有很多。一种是在路由处理器内部发生错误时的隐式触发。例如：
- en: '[PRE73]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'And another way of triggering the built-in error handler is explicit when passing
    an `error` as an argument to `next(error)`. For instance:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种触发内置错误处理程序的方式是在将`error`作为参数传递给`next(error)`时是明确的。例如：
- en: '[PRE74]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The stack trace is displayed on the client side. If `NODE_ENV` is set to production,
    then the stack trace is not included.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 栈跟踪会在客户端显示。如果`NODE_ENV`设置为生产环境，则不会包括栈跟踪。
- en: 'A custom error handler middleware function can be written as well and it looks
    pretty much the same as route handlers do with the exception that an error handler
    function middleware expects to receive four arguments:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 可以编写一个自定义错误处理程序中间件函数，其外观与路由处理器非常相似，除了错误处理程序函数中间件期望接收四个参数：
- en: '[PRE75]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Take into account that `next(error)`is optional. That means, if specified, `next(error)`
    will pass control over to the next error handler. If no other error handler was
    defined, then the control will pass to the built-in error handler.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到`next(error)`是可选的。这意味着，如果指定了，`next(error)`将控制权传递给下一个错误处理程序。如果没有定义其他错误处理程序，则控制权将传递给内置错误处理程序。
- en: Getting ready
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we will see how to create a custom error handler. Before you
    start, create a new `package.json` file with the following content:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何创建一个自定义错误处理程序。在你开始之前，创建一个包含以下内容的新的`package.json`文件：
- en: '[PRE76]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Then, install the dependencies by opening a terminal and running:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行来安装依赖项：
- en: '[PRE77]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: How to do it...
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: You will build a custom error handler that sends to the client the error message.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 你将构建一个自定义错误处理程序，将错误消息发送到客户端。
- en: Create a new file named `custom-error-handler.js`
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`custom-error-handler.js`的新文件
- en: 'Include the ExpressJS library, then initialize a new ExpressJS application:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含ExpressJS库，然后初始化一个新的ExpressJS应用程序：
- en: '[PRE78]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Define a new Route Method to handle `GET` requests for path `"/"` and throw
    an error every time:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个新的路由方法来处理路径`"/"`的`GET`请求并每次都抛出错误：
- en: '[PRE79]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Define a custom error handler middleware function to send the error message
    back to the client''s browser:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个自定义错误处理程序中间件函数，将错误消息发送回客户端的浏览器：
- en: '[PRE80]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Listen on port `1337` for new connections:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听端口`1337`以接收新的连接：
- en: '[PRE81]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Save the file
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE82]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'To see the result, in your web browser, navigate to:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看结果，在你的网页浏览器中导航到：
- en: '[PRE83]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Using ExpressJS' built-in middleware function for serving static assets
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ExpressJS内置的中间件函数来提供静态资源
- en: Prior to the 4.x version of ExpressJS, it has depended on ConnectJS which is
    an HTTP server framework [https://github.com/senchalabs/connect](https://github.com/senchalabs/connect).
    In fact, most middleware written for ConnectJS is also supported in ExpressJS.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在ExpressJS 4.x版本之前，它依赖于ConnectJS，这是一个HTTP服务器框架[https://github.com/senchalabs/connect](https://github.com/senchalabs/connect)。实际上，为ConnectJS编写的几乎所有中间件在ExpressJS中也得到了支持。
- en: As from the 4.x version of ExpressJS, it no longer depends on ConnectJS, and
    all previously built-in middleware functions were moved to separate modules [https://expressjs.com/en/resources/middleware.html](https://expressjs.com/en/resources/middleware.html).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 从ExpressJS 4.x版本开始，它不再依赖于ConnectJS，并且所有之前内置的中间件函数都被移动到了单独的模块[https://expressjs.com/en/resources/middleware.html](https://expressjs.com/en/resources/middleware.html)。
- en: 'ExpressJS 4.x and newer versions include only two built-in middleware functions.
    The first one has already been seen: the built-in error handler middleware function.
    The second one is the `express.static` middleware function that is responsible
    for serving static assets.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: ExpressJS 4.x及更高版本只包含两个内置中间件函数。第一个已经看到：内置错误处理程序中间件函数。第二个是负责提供静态资源的`express.static`中间件函数。
- en: The `express.static` middleware function is based on `serve-static` module [https://expressjs.com/en/resources/middleware/serve-static.html](https://expressjs.com/en/resources/middleware/serve-static.html).
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`express.static` 中间件函数基于 `serve-static` 模块 [https://expressjs.com/en/resources/middleware/serve-static.html](https://expressjs.com/en/resources/middleware/serve-static.html)。'
- en: The main difference between `express.static` and `serve-static` is that the
    second one can be used outside of ExpressJS.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`express.static` 和 `serve-static` 之间的主要区别在于后者可以在 ExpressJS 之外使用。'
- en: Getting ready
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will see how to build a web application that will serve
    static assets in a certain path. Before you start, create a new `package.json`
    file with the following content:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您将了解如何构建一个将在特定路径下提供静态资源的 Web 应用程序。在开始之前，创建一个包含以下内容的 `package.json` 文件：
- en: '[PRE84]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Then, install the dependencies by opening a terminal and running:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE85]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: How to do it...
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Create a new directory named `public`
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `public` 的新目录
- en: Move into the new `public` directory
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入新的 `public` 目录
- en: Create a new file named `index.html`
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `index.html` 的新文件
- en: 'Add the following code:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE86]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Save the file
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: Navigate back out of the `public` directory
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `public` 目录中退出
- en: Create a new file named `serve-static-assets.js`
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `serve-static-assets.js` 的新文件：
- en: 'Add the following code. Initialize a new ExpressJS application:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码。初始化一个新的 ExpressJS 应用程序：
- en: '[PRE87]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Include the `express.static` configurable middleware function and Pass the
    path of the `/public` directory where `index.html` file is located:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含 `express.static` 可配置中间件函数，并传递包含 `index.html` 文件的 `/public` 目录的路径：
- en: '[PRE88]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Listen on port `1337` for new connections:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听端口 `1337` 以便接受新的连接：
- en: '[PRE89]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Save the file
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE90]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'To see the result, in your browser, navigate to:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看结果，请在浏览器中导航到：
- en: '[PRE91]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: How it works...
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Our `index.html` file will be shown because we specified `"/"` as the root directory
    where to look for assets.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `index.html` 文件将被显示，因为我们指定了 `"/"` 作为查找资源的根目录。
- en: Try changing the path from `"/"` to `"/public"`. Then, you will be able to see
    that the `index.html` file, and other files that you want to include in the `/public`
    directory, will be accessible under `http://localhost:1337/public/[fileName]`.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将路径从 `"/"` 更改为 `"/public"`。然后，您将能够看到 `index.html` 文件，以及其他您想要包含在 `/public`
    目录中的文件，它们将在 `http://localhost:1337/public/[fileName]` 下可访问。
- en: There's more...
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Let''s pretend that you have a big project that serves dozens of static files,
    including images, font files, and PDF documents (those about privacy and legal
    stuff) among others. You decided that you want to keep them in separate files,
    but you do not want to change the mount path or URI. They can be served under
    `/public`, for example, but they will exist in separate directories in your project
    directory:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个大项目，该项目提供数十个静态文件，包括图像、字体文件和 PDF 文档（关于隐私和法律事宜的文件）等。你决定想要将它们保存在单独的文件中，但你不想更改挂载路径或
    URI。它们可以位于 `/public` 下，例如，但它们将存在于项目目录中的单独目录中：
- en: 'First, let''s create the first `public` directory that will contain a single
    file named `index.html`:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建第一个 `public` 目录，它将包含一个名为 `index.html` 的单个文件：
- en: Create a new directory named `public` if you didn't create it in the previous
    recipe
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在之前的步骤中没有创建，请创建一个名为 `public` 的新目录：
- en: Move into the new `public` directory
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入新的 `public` 目录
- en: Create a new file named `index.html`
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `index.html` 的新文件
- en: 'Add the following code:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE92]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Save the file
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Now, let''s create a second public directory that will contain another file
    named `second.html`:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建第二个公共目录，它将包含另一个名为 `second.html` 的文件：
- en: Move back out of the `public` directory
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `public` 目录中退出
- en: Create a new directory named `another-public`
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `another-public` 的新目录
- en: Move into the new `another-public` directory
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入新的 `another-public` 目录
- en: Create a new empty file named `second.html`
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `second.html` 的新空文件
- en: 'Add the following code:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE93]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Save the file
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'As you can see, both files exist in different directories. To serve those files
    under one mount point:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这两个文件存在于不同的目录中。要在单个挂载点下提供这些文件，请执行以下操作：
- en: Move back out of the `another-public` directory
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `another-public` 目录中退出
- en: Create a new file named `router-serve-static.js`
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `router-serve-static.js` 的新文件：
- en: 'Include the ExpressJS and path libraries. Then, initialize a new ExpressJS
    application:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含 ExpressJS 和 path 库。然后，初始化一个新的 ExpressJS 应用程序：
- en: '[PRE94]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Define a router:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个路由器：
- en: '[PRE95]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Use the `express.static` configurable middleware function to include both directories,
    `public` and `another-public`:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `express.static` 可配置中间件函数包含两个目录，`public` 和 `another-public`：
- en: '[PRE96]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Mount the Router to the `"/"` path:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将路由器挂载到 `"/"` 路径：
- en: '[PRE97]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Listen on port `1337` for new connections:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在端口 `1337` 上监听新的连接：
- en: '[PRE98]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Save the file
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE99]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'To see the result, in the browser, navigate to:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看结果，在浏览器中导航到：
- en: '[PRE100]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Two different files in different locations were served under one path
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个路径下为不同位置的两个不同文件提供服务
- en: If two or more files with the same name exist under different directories, only
    the first one found will be displayed on the client-side.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在不同目录下存在同名文件，客户端只会显示找到的第一个。
- en: Parsing the HTTP request body
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析 HTTP 请求体
- en: '`body-parser` is a middleware function that parses the incoming request body
    and makes it available in the `request` object as `request.body` [https://expressjs.com/en/resources/middleware/body-parser.html](https://expressjs.com/en/resources/middleware/body-parser.html).'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`body-parser` 是一个中间件函数，它解析传入的请求体，并将其作为 `request.body` 可用 [https://expressjs.com/en/resources/middleware/body-parser.html](https://expressjs.com/en/resources/middleware/body-parser.html)。'
- en: 'This module allows an application to parse the incoming request as:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块允许应用程序将传入请求解析为：
- en: JSON
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON
- en: Text
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本
- en: Raw (buffer original incoming data)
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始（缓冲原始传入数据）
- en: URL encoded form
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL 编码表单
- en: The module supports automatic decompression of gzip and deflates encodings when
    the incoming request is compressed.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 当传入请求被压缩时，该模块支持自动解压缩 gzip 和 deflate 编码。
- en: Getting ready
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will see how to use the `body-parser` NPM module to parse
    the content body sent from two different forms encoded in two different ways.
    Before you start, create a new `package.json` file with the following content:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，您将了解如何使用 `body-parser` NPM 模块解析来自两个不同表单的内容体，这两个表单以两种不同的方式编码。在开始之前，创建一个包含以下内容的新的
    `package.json` 文件：
- en: '[PRE101]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Then, install the dependencies by opening a terminal and running:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE102]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: How to do it...
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Two forms will be displayed to the user, both of them will send data to our
    web server application encoded in two different ways. The first one is a URL encoded
    form while the other one will encode its body as plain text.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 将向用户显示两个表单，它们都将以两种不同的方式将数据发送到我们的 Web 服务器应用程序。第一个是一个 URL 编码表单，而另一个将将其体编码为纯文本。
- en: Create a file named `parse-form.js`
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `parse-form.js` 的文件
- en: 'Include the `body-parser` NPM module. Then, initialize a new ExpressJS application:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含 `body-parser` NPM 模块。然后，初始化一个新的 ExpressJS 应用程序：
- en: '[PRE103]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Include the `body-parser` middleware functions to handle URL encoded requests
    and text plain requests:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含 `body-parser` 中间件函数来处理 URL 编码请求和文本 plain 请求：
- en: '[PRE104]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Add a new route method to handle `GET` requests for path `"/"`. Serve HTML
    content with two forms that submit data using different encodings:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的路由方法来处理 `"/"` 路径的 `GET` 请求。提供包含两个表单的 HTML 内容，这两个表单使用不同的编码提交数据：
- en: '[PRE105]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Add a new route method to handle `POST` requests for path `"/setdata"`. Display
    on terminal the content of `request.body`:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的路由方法来处理 `"/setdata"` 路径的 `POST` 请求。在终端显示 `request.body` 的内容：
- en: '[PRE106]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Listen on port `1337` for new connections:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在端口 `1337` 上监听新的连接：
- en: '[PRE107]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Save the file
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE108]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'In your web browser, navigate to:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网页浏览器中，导航到：
- en: '[PRE109]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Fill the first input box with any data and submit the form:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个输入框中填写任何数据并提交表单：
- en: 'In your web browser, navigate back to:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网页浏览器中，返回到：
- en: '[PRE110]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Fill the second input box with any data and submit the form:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个输入框中填写任何数据并提交表单：
- en: Check the output in the terminal
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中检查输出
- en: How it works...
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Terminal outputs something like:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 终端输出类似以下内容：
- en: '[PRE111]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Two parsers are used above:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 上文使用了两个解析器：
- en: The first one `bodyParser.urlencoded()` parses incoming requests for `multipart/form-data`
    encoding type. The result is available as an **Object** in `request.body`
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个解析器 `bodyParser.urlencoded()` 解析 `multipart/form-data` 编码类型的传入请求。结果作为 `Object`
    可在 `request.body` 中访问
- en: The second one `bodyParser.text()` parses incoming requests for `text/plain`
    encoding type. The result is available as a **String** in `request.body`
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个解析器 `bodyParser.text()` 解析 `text/plain` 编码类型的传入请求。结果作为 `String` 可在 `request.body`
    中访问
- en: Compressing HTTP responses
  id: totrans-403
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 压缩 HTTP 响应
- en: '**compression** is a middleware function that compresses the response body
    that will be send to the client. This module uses the `zlib` module [https://nodejs.org/api/zlib.html](https://nodejs.org/api/zlib.html)
    that supports the following content-encoding mechanisms:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '**compression** 是一个中间件函数，它压缩将发送给客户端的响应体。此模块使用支持以下内容编码机制的 `zlib` 模块 [https://nodejs.org/api/zlib.html](https://nodejs.org/api/zlib.html)：'
- en: gzip
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: gzip
- en: deflate
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: deflate
- en: The `Accept-Encoding` HTTP header is used to determine which content-encoding
    mechanism is supported on the client-side (for example web browser) while the
    `Content-Encoding` HTTP header is used to tell the client which content encoding
    mechanism was applied to the response body.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '`Accept-Encoding` HTTP 响应头用于确定客户端（例如，网页浏览器）支持哪种内容编码机制，而 `Content-Encoding`
    HTTP 响应头用于告知客户端已应用于响应体的内容编码机制。'
- en: '`compression` is a configurable middleware function. It accepts an `options`
    object as the first argument to define a specific behavior for the middleware
    and also to pass `zlib` options as well.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`compression` 是一个可配置的中间件函数。它接受一个 `options` 对象作为第一个参数，以定义中间件的具体行为，并传递 `zlib`
    选项。'
- en: Getting ready
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we will see how to configure and use the `compression` NPM
    module to compress the request body sent to the client. Before you start, create
    a new `package.json` file with the following content:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将了解如何配置和使用 `compression` NPM 模块来压缩发送给客户端的请求体。在开始之前，创建一个包含以下内容的新的 `package.json`
    文件：
- en: '[PRE112]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Then, install the dependencies by opening a terminal and running:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE113]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: How to do it...
  id: totrans-414
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Create a new file named `compress-site.js`
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `compress-site.js` 的新文件
- en: 'Include the `compression` NPM module. Then, initialize a new ExpressJS application:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含 `compression` NPM 模块。然后，初始化一个新的 ExpressJS 应用程序：
- en: '[PRE114]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Include the `compression` middleware function. Specify the `level` of compression
    to `9` (best compression) and `threshold`, or minimum size in bytes that the response
    should have to consider compressing the response body, to `0` bytes:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含 `compression` 中间件函数。指定压缩的 `level` 为 `9`（最佳压缩）和 `threshold`，或响应体应考虑压缩的最小字节数，为
    `0` 字节：
- en: '[PRE115]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Define a route method to handle `GET` requests for path `"/"` which will serve
    a sample HTML content that we expect to be compressed and will print the encodings
    that the client accepts:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个路由方法来处理路径 `"/"` 的 `GET` 请求，该方法将提供我们期望被压缩的样本 HTML 内容，并将打印客户端接受的编码：
- en: '[PRE116]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Listen on port `1337` for new connections:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听端口 `1337` 以接收新的连接：
- en: '[PRE117]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Save the file
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE118]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'In your browser, navigate to:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的浏览器中，导航到：
- en: '[PRE119]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: How it works...
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The output of the Terminal will show the content encoding mechanism that the
    client (for example web browser) supports. It may look something like this:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 终端输出将显示客户端（例如，网页浏览器）支持的内容编码机制。它可能看起来像这样：
- en: '[PRE120]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: The content encoding mechanism sent by the client is used by `compression` internally
    to know if compression is supported. If compression is not supported, then the
    response body is not compressed.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端发送的内容编码机制被 `compression` 内部使用，以确定是否支持压缩。如果不支持压缩，则不压缩响应体。
- en: If opening Chrome Dev Tools or similar and analyzing the request made, the `Content-Encoding`
    header that was sent by the server indicates the kind of content encoding mechanism
    used by `compression`.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 如果打开 Chrome 开发者工具或类似工具并分析请求，服务器发送的 `Content-Encoding` 响应头指示 `compression` 使用的编码机制。
- en: '![](img/50e0019b-c8b1-4cfb-86f8-aaa8200854f8.png)'
  id: totrans-434
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/50e0019b-c8b1-4cfb-86f8-aaa8200854f8.png)'
- en: Chrome Dev Tools | Network Tab displaying Response Headers
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome 开发者工具 | 网络标签显示响应头
- en: The `compression` library sets the `Content-Encoding` header to the encoding
    mechanism used for compressing the response body.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '`compression` 库将 `Content-Encoding` 响应头设置为用于压缩响应体的编码机制。'
- en: The `threshold` option is set by default to 1 KB which means that if the response
    size is below the number of bytes specified, then it is not compressed. Set it
    to 0 or `false` to compress the response even when the size is below 1 KB
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '`threshold` 选项默认设置为 1 KB，这意味着如果响应大小低于指定的字节数，则不进行压缩。将其设置为 `0` 或 `false` 以在大小低于
    1 KB 时压缩响应。'
- en: Using an HTTP request logger
  id: totrans-438
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 HTTP 请求记录器
- en: As previously seen, writing a request logger is simple. However, writing our
    own could take precious time. Luckily, there are several other alternatives out
    there. For example, a very popular HTTP request logger widely used is morgan [https://expressjs.com/en/resources/middleware/morgan.html](https://expressjs.com/en/resources/middleware/morgan.html).
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，编写请求记录器很简单。然而，编写我们自己的可能需要宝贵的时间。幸运的是，还有其他几种替代方案。例如，一个非常流行的 HTTP 请求记录器是 morgan
    [https://expressjs.com/en/resources/middleware/morgan.html](https://expressjs.com/en/resources/middleware/morgan.html)。
- en: '**morgan** is a configurable middleware function that takes two arguments `format`
    and `options` which are used to specify the format in which the logs are displayed
    and what kind of information needs to be displayed.'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '**morgan** 是一个可配置的中间件函数，它接受两个参数 `format` 和 `options`，用于指定日志显示的格式以及需要显示的信息类型。'
- en: 'There are several predefined formats:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种预定义的格式：
- en: '`tiny`: Minimal output'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tiny`: 最小输出'
- en: '`short`: Same as tiny, including remote IP address'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`short`: 与 `tiny` 相同，包括远程 IP 地址'
- en: '`common`: Standard Apache log output'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`common`: 标准的 Apache 日志输出'
- en: '`combined`: Standard Apache combined log output'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`combined`: 标准的 Apache 合并日志输出'
- en: '`dev`: Displays the same information as the tiny format does. However, the
    response statuses are colored.'
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev`: 显示与 `tiny` 格式相同的信息。然而，响应状态是彩色的。'
- en: Getting ready
  id: totrans-447
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: 'Create a new `package.json` file with the following content:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个包含以下内容的 `package.json` 文件：
- en: '[PRE121]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Then, install the dependencies by opening a terminal and running:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE122]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: How to do it...
  id: totrans-452
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let's build a working example. We will include the **morgan** configurable middleware
    function with the `dev` format to display information of every request.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个工作示例。我们将包含具有 `dev` 格式的 **morgan** 可配置中间件函数来显示每个请求的信息。
- en: Create a new file named `morgan-logger.js`
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `morgan-logger.js` 的新文件
- en: 'Initialize a new ExpressJS application:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个新的 ExpressJS 应用程序：
- en: '[PRE123]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'Include the `morgan` configurable middleware. Pass `''dev''` as the format
    we will use as the first argument to the middleware function:'
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含可配置的 `morgan` 中间件。将 `'dev'` 作为我们将用作中间件函数的第一个参数的格式：
- en: '[PRE124]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'Define a route method to handle all `GET` requests:'
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个路由方法来处理所有 `GET` 请求：
- en: '[PRE125]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Listen on port `1337` for new connections:'
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听端口 `1337` 以接收新连接：
- en: '[PRE126]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Save the file
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE127]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'To see the result in your terminal, in your web browser, navigate to:'
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在终端中查看结果，请在您的网络浏览器中导航到：
- en: '[PRE128]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Managing and creating virtual domains
  id: totrans-468
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理和创建虚拟域名
- en: Managing virtual domains is really easy with ExpressJS. Imagine that you have
    two or more subdomains, and you want to serve two different web applications.
    However, you do not want to create a different web server application for each
    subdomain. In this kind of situation, ExpressJS allows developers to manage virtual
    domains within a single web server application using **vhost** [https://expressjs.com/en/resources/middleware/vhost.html](https://expressjs.com/en/resources/middleware/vhost.html).
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ExpressJS 管理虚拟域名非常简单。想象一下，你有两个或更多子域名，并且你想要提供两个不同的网络应用程序。然而，你不想为每个子域名创建不同的网络服务器应用程序。在这种情况下，ExpressJS
    允许开发者在单个网络服务器应用程序内使用 **vhost** [https://expressjs.com/en/resources/middleware/vhost.html](https://expressjs.com/en/resources/middleware/vhost.html)
    来管理虚拟域名。
- en: '**vhost** is a configurable middleware function that accepts two arguments.
    The first one is the `hostname`. The second argument is the request handler which
    will be called when the `hostname` matches.'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '**vhost** 是一个可配置的中间件函数，它接受两个参数。第一个参数是 `hostname`。第二个参数是当 `hostname` 匹配时将被调用的请求处理器。'
- en: The `hostname` follows the same rules as route paths do. They can be either
    a string or a regular expression.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '`hostname` 遵循与路由路径相同的规则。它们可以是字符串或正则表达式。'
- en: Getting ready
  id: totrans-472
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: 'Create a new `package.json` file with the following content:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个包含以下内容的 `package.json` 文件：
- en: '[PRE129]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Then, install the dependencies by opening a terminal and running:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE130]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: How to do it...
  id: totrans-477
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Build two mini applications using **Router** that will be served in two different
    sub-domains:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **Router** 构建 two 个微型应用程序，它们将在两个不同的子域名中提供：
- en: Create a new file named `virtual-domains.js`
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `virtual-domains.js` 的新文件
- en: 'Include `vhost` NPM module. Then, initialize a new ExpressJS application:'
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含 `vhost` NPM 模块。然后，初始化一个新的 ExpressJS 应用程序：
- en: '[PRE131]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Define two routers that we will use to build two mini-applications:'
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义两个我们将使用来构建两个微型应用程序的路由器：
- en: '[PRE132]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Add a route method to handle `GET` requests for path `"/"` in the first router:'
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个路由器中添加一个路由方法来处理路径 `"/"` 的 `GET` 请求：
- en: '[PRE133]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Add a route method to handle `GET` requests for path `"/"` in the second router:'
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个路由器中添加一个路由方法来处理路径 `"/"` 的 `GET` 请求：
- en: '[PRE134]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'Mount our routers to our ExpressJS application. Serve the first application
    under `localhost` and the second under `second.localhost`:'
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的路由器挂载到我们的 ExpressJS 应用程序上。在 `localhost` 下提供第一个应用程序，在 `second.localhost`
    下提供第二个应用程序：
- en: '[PRE135]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Listen on port `1337` for new connections:'
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在端口 `1337` 上监听新连接：
- en: '[PRE136]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Save the file
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-493
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE137]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'To see the result, in your web browser navigate to:'
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看结果，请在您的网页浏览器中导航到：
- en: '[PRE138]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: There's more...
  id: totrans-497
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: '`vhost` adds a `vhost object` to the `request` object, which contains the complete
    hostname (displaying the hostname and port), hostname (without the port), and
    matching strings. These give you more control in how to handle virtual domains.'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '`vhost` 将一个 `vhost 对象` 添加到 `request` 对象中，该对象包含完整的域名（显示域名和端口）、域名（不带端口）和匹配字符串。这为您提供了更多控制虚拟域处理方式的能力。'
- en: 'For example, we could write an application that allows users to have their
    own sub-domain with their name:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以编写一个应用程序，允许用户拥有以他们名字为子域：
- en: Create a new file named `user-subdomains.js`
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `user-subdomains.js` 的新文件
- en: 'Include the `vhost` NPM module. Then, initialize a new ExpressJS application:'
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含 `vhost` NPM 模块。然后，初始化一个新的 ExpressJS 应用程序：
- en: '[PRE139]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Define a new router. Then, add a route method to handle `GET` requests on path
    `"/"`. Use the `vhost` object to access the array of subdomains:'
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个新的路由器。然后，添加一个路由方法来处理路径 `"/"` 上的 `GET` 请求。使用 `vhost` 对象访问子域数组：
- en: '[PRE140]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'Mount the router:'
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 挂载路由器：
- en: '[PRE141]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'Listen on port `1337` for new connections:'
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在端口 `1337` 上监听新连接：
- en: '[PRE142]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Save the file
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE143]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'To see the result, in your web browser, navigate to:'
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看结果，请在您的网页浏览器中导航到：
- en: '[PRE144]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: Securing an ExpressJS web application with Helmet
  id: totrans-514
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Helmet 保护 ExpressJS 网络应用程序
- en: '**Helmet** allows to protect web server applications against common attacks,
    such as **cross-site scripting (XSS)**, insecure requests, and clickjacking.'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '**Helmet** 允许保护网络服务器应用程序免受常见攻击，例如 **跨站脚本 (XSS**)、不安全的请求和点击劫持。'
- en: 'Helmet is a collection of 12 middleware functions that allow you to set specific
    HTTP headers:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: Helmet 是一组 12 个中间件函数，允许您设置特定的 HTTP 头部：
- en: '`Content Security Policy (CSP)`: This is an effective way to whitelist what
    kind of external resources are allowed in your web application, such as JavaScript,
    CSS, and images, for instance.'
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`内容安全策略 (Content Security Policy, CSP)`: 这是允许在您的网络应用程序中允许外部资源（如 JavaScript、CSS
    和图像）的一种有效方式。'
- en: '`Certificate Transparency`: This is a way of providing more transparency for
    certificates issued for a specific domain or specific domains [https://sites.google.com/a/chromium.org/dev/Home/chromium-security/certificate-transparency](https://sites.google.com/a/chromium.org/dev/Home/chromium-security/certificate-transparency).'
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`证书透明度 (Certificate Transparency)`: 这是为特定域名或特定域名颁发的证书提供更多透明度的一种方式 [https://sites.google.com/a/chromium.org/dev/Home/chromium-security/certificate-transparency](https://sites.google.com/a/chromium.org/dev/Home/chromium-security/certificate-transparency)。'
- en: '`DNS Prefetch Control`: This tells the browser if it should perform domain
    name resolution (DNS) on resources that are not yet loaded, such as links.'
  id: totrans-519
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DNS 预取控制 (DNS Prefetch Control)`: 这告诉浏览器是否应该对尚未加载的资源（如链接）执行域名解析（DNS）。'
- en: '`Frameguard`: This helps to prevent **clickjacking** by telling the browser
    not to allow your web application to be put inside an `iframe.`'
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Frameguard`: 这通过告诉浏览器不允许您的网络应用程序被放入 `iframe` 中来帮助防止 **点击劫持**。'
- en: '`Hide Powered-By`: This simply hides the `X-Powered-By` header indicates not
    to display what technology powers the server. ExpressJS sets this header to `"Express"`
    by default.'
  id: totrans-521
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`隐藏 Powered-By`: 这只是隐藏了指示不显示服务器所使用技术的 `X-Powered-By` 头部。ExpressJS 默认将其设置为 `"Express"`。'
- en: '`HTTP Public Key Pinning`: This helps to prevent **man-in-the-middle-attacks**
    by pinning your web application''s public keys to the `Public-Key-Pins`header.'
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`HTTP 公钥固定 (Public Key Pinning)`: 这通过将您的网络应用程序的公钥固定到 `Public-Key-Pins` 头部来帮助防止
    **中间人攻击**。'
- en: '`HTTP Strict Transport Security`: This tells the browser to strictly stick
    to the HTTPs version of your web application.'
  id: totrans-523
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`HTTP 严格传输安全 (Strict Transport Security)`: 这告诉浏览器严格坚持您的网络应用程序的 HTTPs 版本。'
- en: '`IE No Open`: This prevents Internet Explorer from executing untrusted downloads,
    or HTML files, on the context of your site, thus preventing the injection of malicious
    scripts.'
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`IE 无打开 (IE No Open)`: 这防止了 Internet Explorer 在您的站点上下文中执行不受信任的下载或 HTML 文件，从而防止恶意脚本的注入。'
- en: '`No Cache`: This tells the browser to disable browser caching.'
  id: totrans-525
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`无缓存 (No Cache)`: 这告诉浏览器禁用浏览器缓存。'
- en: '`Don''t Sniff Mimetype`: This forces the browser to disable mime sniffing or
    guessing the content type of a served file.'
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`不要嗅探 MIME 类型`：这强制浏览器禁用 MIME 嗅探或猜测服务文件的类型。'
- en: '`Referrer Policy`: The referrer headers provide the server with data regarding
    where the request was originated. It allows developers to disable it, or set a
    stricter policy for setting a `referrer` header.'
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Referrer Policy`：引用头提供了关于请求来源的数据给服务器。它允许开发者禁用它，或为设置 `referrer` 头设置更严格的策略。'
- en: '`XSS Filter`: This prevents reflected cross-site scripting (XSS) attacks by
    setting the `X-XSS-Protection` header.'
  id: totrans-528
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`XSS Filter`：通过设置 `X-XSS-Protection` 头来防止反射型跨站脚本（XSS）攻击。'
- en: Getting ready
  id: totrans-529
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we will use most of the middleware functions provided by Helmet
    to secure our ExpressJS web application against common attacks. Before you start,
    create a new `package.json` file with the following content:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用 Helmet 提供的大多数中间件函数来保护我们的 ExpressJS 网络应用程序免受常见攻击。在开始之前，创建一个包含以下内容的新的
    `package.json` 文件：
- en: '[PRE145]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE146]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: How to do it...
  id: totrans-534
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Create a new file named `secure-helmet.js`
  id: totrans-535
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `secure-helmet.js` 的新文件：
- en: 'Include the ExpressJS, helmet, and body NPM modules:'
  id: totrans-536
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含 ExpressJS、helmet 和 body NPM 模块：
- en: '[PRE147]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'Generate a random ID which will be used for `nonce` which is an HTML attribute
    used for whitelist which scripts or styles are allowed to be executed inline in
    the HTML code:'
  id: totrans-538
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成一个随机 ID，该 ID 将用于 `nonce`，这是一个用于白名单的 HTML 属性，用于指定哪些脚本或样式允许在 HTML 代码中内联执行：
- en: '[PRE148]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'Use body parser to parse JSON request body for `json` and `application/csp-report`
    content types. `application/csp-report` is a content type that contains a JSON
    request body of type `json` which is sent by the browser when one or several CSP
    rules are violated:'
  id: totrans-540
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 body parser 解析 `json` 和 `application/csp-report` 内容类型的 JSON 请求体。`application/csp-report`
    是一种包含类型为 `json` 的 JSON 请求体的内容类型，当浏览器违反一个或多个 CSP 规则时，浏览器会发送它：
- en: '[PRE149]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'Use the `Content Security Policy` middleware function to define directives.
    `defaultSrc` specifies where resources can be loaded from. The `self` option specifies
    to load resources only from your own domain. We will use `none` instead, which
    means that no resources will be loaded. However, because we are whitelisting `scriptSrc`,
    we will be able to load Javascript scripts but only the ones that have the `nonce`
    that we will specify. The `reportUri` is used to tell the browser where to send
    violation reports of our `Content Security Policy`:'
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Content Security Policy` 中间件函数来定义指令。`defaultSrc` 指定资源可以从中加载的位置。`self` 选项指定只从自己的域名加载资源。我们将使用
    `none`，这意味着不会加载任何资源。然而，因为我们正在白名单 `scriptSrc`，我们将能够加载 JavaScript 脚本，但仅限于我们指定的 `nonce`
    的那些脚本。`reportUri` 用于告诉浏览器将我们的 `Content Security Policy` 违规报告发送到何处：
- en: '[PRE150]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'Add a route method to handle `POST` request for path `"/csp-violation"` to
    receive violation reports from the client:'
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个路由方法来处理路径 `"/csp-violation"` 的 `POST` 请求，以接收来自客户端的违规报告：
- en: '[PRE151]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'Use the `DNS Prefetch Control` middleware to disable prefetch of resources:'
  id: totrans-546
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `DNS Prefetch Control` 中间件来禁用资源的预取：
- en: '[PRE152]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Use the `Frameguard` middleware function to disable your application from being
    loaded inside a `iframe`:'
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Frameguard` 中间件函数来禁用应用程序在 `iframe` 中加载：
- en: '[PRE153]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'Use the `hidePoweredBy` middleware function to replace the `X-Powered-By` header
    and set a fake one:'
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `hidePoweredBy` 中间件函数来替换 `X-Powered-By` 头并设置一个假的头：
- en: '[PRE154]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'Use the `ieNoOpen` middleware function to disable IE untrusted executions:'
  id: totrans-552
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `ieNoOpen` 中间件函数来禁用 IE 不受信任的执行：
- en: '[PRE155]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'Use the `noSniff` middleware function to disable mime-type guessing:'
  id: totrans-554
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `noSniff` 中间件函数来禁用 MIME 类型猜测：
- en: '[PRE156]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'Use the `referrerPolicy` middleware function to make the header available only
    for our domain:'
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `referrerPolicy` 中间件函数使头仅对我们自己的域名可用：
- en: '[PRE157]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'Use the `xssFilter` middleware function to prevent Reflected XSS attacks:'
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `xssFilter` 中间件函数来防止反射型 XSS 攻击：
- en: '[PRE158]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'Add a route method to handle `GET` requests on path `"/"` and serve a sample
    HTML content that will try to load an image from an external source, try to execute
    an inline script, and try to load an external script without a `nonce` specified.
    We will add a valid script as well that is allowed to be executed because a `nonce`
    attribute will be specified:'
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个路由方法来处理路径 `"/"` 的 `GET` 请求，并服务一个示例 HTML 内容，该内容将尝试从外部源加载图像，尝试执行内联脚本，并尝试加载未指定
    `nonce` 的外部脚本。我们还将添加一个有效的脚本，该脚本允许执行，因为将指定一个 `nonce` 属性：
- en: '[PRE159]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'Listen on port `1337` for new connections:'
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听端口 `1337` 以接收新的连接：
- en: '[PRE160]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Save the file
  id: totrans-564
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-565
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE161]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'To see the results, in your web browser, navigate to:'
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看结果，在你的网页浏览器中，导航到：
- en: '[PRE162]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: How it works...
  id: totrans-569
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: How everything works is pretty straight forward with `Helmet`. You specify the
    security measures you want to implement by choosing and applying a specific `Helmet`
    middleware function and `Helmet` will do the work of setting the right headers
    that will be sent to the client.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Helmet`，一切的工作原理都非常直观。你通过选择并应用特定的 `Helmet` 中间件函数来指定你想要实施的安全措施，然后 `Helmet`
    将负责设置正确的头信息并发送到客户端。
- en: In the client side (web browser), everything just works by its own. The web
    browser is in charge of interpreting the headers sent by the server and applying
    the security policies. This also means that old browsers cannot support or understand
    all these headers. Saying that, there are not many good reasons why you would
    want to support old web browsers if you have security in mind for your application.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端（网页浏览器）中，一切都会自动工作。浏览器负责解释服务器发送的头信息并应用安全策略。这也意味着，如果你的应用考虑了安全性，那么没有太多理由要支持旧版浏览器。
- en: 'If you are using Chrome, for instance, you should be able to see something
    similar to this in the console:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你使用的是 Chrome，你应该能在控制台看到类似以下的内容：
- en: '![](img/e75f8ade-149b-4074-971f-489e190d69ca.png)'
  id: totrans-573
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e75f8ade-149b-4074-971f-489e190d69ca.png)'
- en: Chrome Dev Tools | Console displaying CSP violation
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome 开发者工具 | 显示 CSP 违规的控制台
- en: 'In the Terminal, you should be able to see similar output to the following
    that is sent by the browser:'
  id: totrans-575
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，你应该能看到浏览器发送的类似以下输出：
- en: '[PRE163]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Using template engines
  id: totrans-577
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模板引擎
- en: Template engines allow you to generate HTML code in a more convenient way. Templates
    or views can be written in any format, interpreted by a template engine that will
    replace variables with other values, and finally transform to HTML.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 模板引擎允许你以更方便的方式生成 HTML 代码。模板或视图可以以任何格式编写，由模板引擎进行解释，将变量替换为其他值，最终转换为 HTML。
- en: A big list of template engines that work out of the box with ExpressJS, is available
    in the official website at [https://github.com/expressjs/express/wiki#template-engines](https://github.com/expressjs/express/wiki#template-engines).
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 一份包含与 ExpressJS 兼容的模板引擎的大列表，可在官方网站 [https://github.com/expressjs/express/wiki#template-engines](https://github.com/expressjs/express/wiki#template-engines)
    上找到。
- en: Getting ready
  id: totrans-580
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, you will build your own template engine. To develop and use
    your own template engine, you will first need to register it, then define the
    path where the views are located, and finally tell ExpressJS which template engine
    to use.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将构建自己的模板引擎。为了开发和使用自己的模板引擎，你首先需要注册它，然后定义视图所在的位置，最后告诉 ExpressJS 使用哪个模板引擎。
- en: '[PRE164]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'Before you start, create a new `package.json` file with the following content:'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，创建一个包含以下内容的新的 `package.json` 文件：
- en: '[PRE165]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'Then, install the dependencies by opening a terminal and running:'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE166]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: How to do it...
  id: totrans-587
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'First create a `views` directory which will contain a simple template:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个包含简单模板的 `views` 目录：
- en: Create a new directory named `views`
  id: totrans-589
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `views` 的新目录
- en: Create a new file named `home.tpl` inside our `views` directory
  id: totrans-590
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 `views` 目录内创建一个名为 `home.tpl` 的新文件
- en: 'Add the following code:'
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE167]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: Save the file
  id: totrans-593
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Now, create a new template engine that will transform the previous template
    into HTML and replace `%[var]%` with the options provided:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个新的模板引擎，它将转换之前的模板为 HTML，并将 `%[var]%` 替换为提供的选项：
- en: Move out of the `views` directory
  id: totrans-595
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 离开 `views` 目录
- en: Create a new file named `my-template-engine.js`
  id: totrans-596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `my-template-engine.js` 的新文件
- en: 'Include the ExpressJS and fs (file system) libraries. Then, initialize a new
    ExpressJS application:'
  id: totrans-597
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含 ExpressJS 和 fs（文件系统）库。然后，初始化一个新的 ExpressJS 应用程序：
- en: '[PRE168]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'Use the `engine` method to register a new template engine named `tpl`. We will
    read the file''s content and replace `%[var]%` with the one specified in the `options`
    object:'
  id: totrans-599
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `engine` 方法注册一个名为 `tpl` 的新模板引擎。我们将读取文件内容，并将 `%[var]%` 替换为 `options` 对象中指定的值：
- en: '[PRE169]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'Define the path where the views are located. Our template is located in the
    `views` directory:'
  id: totrans-601
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义视图所在的位置。我们的模板位于 `views` 目录中：
- en: '[PRE170]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'Tell ExpressJS to use our template engine:'
  id: totrans-603
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉 ExpressJS 使用我们的模板引擎：
- en: '[PRE171]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'Add a route method to handle `GET` requests for path `"/"` and render our home
    template. Provide the `title` and `description` options which will replace `%title%`
    and `%description%` in our template:'
  id: totrans-605
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个路由方法来处理路径 `"/"` 的 `GET` 请求并渲染我们的主页模板。提供 `title` 和 `description` 选项，它们将替换模板中的
    `%title%` 和 `%description%`：
- en: '[PRE172]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'Listen on port `1337` for new connections:'
  id: totrans-607
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听端口 `1337` 以便接收新的连接：
- en: '[PRE173]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Save the file
  id: totrans-609
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-610
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE174]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: 'In your browser, navigate to:'
  id: totrans-612
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的浏览器中，导航到：
- en: '[PRE175]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: The template engine we just have wrote doesn't escape HTML characters. That
    means, you should be careful if replacing those properties with data gotten from
    the client because it may be vulnerable to XSS attacks. You may want to use a
    template engine from the official ExpressJS website that is safer.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚编写的模板引擎不会转义 HTML 字符。这意味着，如果您用从客户端获取的数据替换这些属性，可能会容易受到 XSS 攻击。您可能想使用来自官方 ExpressJS
    网站的模板引擎，它更安全。
- en: Debugging your ExpressJS web application
  id: totrans-615
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试 ExpressJS 网络应用程序
- en: Debugging information on ExpressJS about all of the cycle of a web application
    is something simple. ExpressJS uses the **debug** NPM module internally to log
    information. Unlike `console.log`, **debug** logs can easily be disabled on production
    mode.
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 ExpressJS 中网络应用程序整个周期的调试信息是简单的。ExpressJS 使用内部 **debug** NPM 模块来记录信息。与 `console.log`
    不同，**debug** 日志可以在生产模式下轻松禁用。
- en: Getting ready
  id: totrans-617
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will see how to debug your ExpressJS web application. Before
    you start, create a new `package.json` file with the following content:'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，您将了解如何调试您的 ExpressJS 网络应用程序。在您开始之前，创建一个包含以下内容的新的 `package.json` 文件：
- en: '[PRE176]'
  id: totrans-619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'Then, install the dependencies by opening a terminal and running:'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行来安装依赖项：
- en: '[PRE177]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: How to do it...
  id: totrans-622
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Create a new file named `debugging.js`
  id: totrans-623
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `debugging.js` 的新文件
- en: 'Initialize a new ExpressJS application:'
  id: totrans-624
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个新的 ExpressJS 应用程序：
- en: '[PRE178]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: 'Add a route method to handle `GET` requests for any path:'
  id: totrans-626
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为任何路径添加处理 `GET` 请求的路由方法：
- en: '[PRE179]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: 'Listen on port `1337` for new connections:'
  id: totrans-628
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听端口 `1337` 以便接收新的连接：
- en: '[PRE180]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: Save the file
  id: totrans-630
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-631
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: 'On Windows:'
  id: totrans-632
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 上：
- en: '[PRE181]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'On Linux or MacOS:'
  id: totrans-634
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Linux 或 MacOS 上：
- en: '[PRE182]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: 'In your web browser, navigate to:'
  id: totrans-636
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中，导航到：
- en: '[PRE183]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Observe your terminal's output for logs
  id: totrans-638
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察您的终端输出以获取日志
- en: How it works...
  id: totrans-639
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `DEBUG` environment variable is used to tell the **debug** module which
    parts of the ExpressJS application to debug. In our previously written code, `express:*`
    tells the debug module to log everything related to the express application.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `DEBUG` 环境变量来告知 **debug** 模块要调试 ExpressJS 应用程序的哪些部分。在我们之前编写的代码中，`express:*`
    告诉 debug 模块记录与 express 应用程序相关的所有内容。
- en: We could use `DEBUG=express:router` to displays logs related to the Router or
    routing of ExpressJS.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `DEBUG=express:router` 来显示与 ExpressJS 的 Router 或路由相关的日志。
- en: There's more...
  id: totrans-642
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can use the debug NPM module in your own projects. For example:'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在自己的项目中使用 debug NPM 模块。例如：
- en: Create a new file named `myapp.js`
  id: totrans-644
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `myapp.js` 的新文件
- en: 'Add the following code:'
  id: totrans-645
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE184]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Save the file
  id: totrans-647
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a terminal and run:'
  id: totrans-648
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: 'On Windows:'
  id: totrans-649
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 上：
- en: '[PRE185]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'On Linux and MacOS:'
  id: totrans-651
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Linux 和 MacOS 上：
- en: '[PRE186]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'In your web browser, navigate to:'
  id: totrans-653
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中，导航到：
- en: 'Observe your Terminal''s output. It would display something like:'
  id: totrans-654
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察您的终端输出。它将显示类似以下内容：
- en: '[PRE187]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'You can use the `DEBUG` environment variable to tell the `debug` module to
    displays logs not only for `myapp` but also for ExpressJS like so:'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `DEBUG` 环境变量来告知 `debug` 模块显示日志，不仅限于 `myapp`，还包括 ExpressJS，如下所示：
- en: 'On Windows:'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上：
- en: '[PRE188]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'On Linux and MacOS:'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 和 MacOS 上：
- en: '[PRE189]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
