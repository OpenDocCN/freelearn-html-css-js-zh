- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Initial Setup and Project Structure
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始设置和项目结构
- en: I’ve been developing web applications for almost a decade now and the landscape
    has changed drastically since I began. To put that in reference, I’ve been building
    websites since JavaScript was so poorly supported by mainstream browsers that
    jQuery became the de facto standard for building interactive frontend experiences.
    But over time, we’ve seen more browsers willing to support ECMAScript standards
    and the ones that didn’t have died off (good riddance, Internet Explorer). JavaScript
    then re-emerged as a viable language. And with the rise of Node.js, developers
    could finally build an entire application, both frontend and backend, in a single
    programming language. JavaScript had taken over the web development world and
    firmly cemented its foothold.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在已经开发了近十年的网络应用程序，自从我开始以来，这个领域发生了巨大的变化。为了参考这一点，我自从JavaScript在主流浏览器中支持得如此糟糕，以至于jQuery成为了构建交互式前端体验的既定标准以来，就开始构建网站了。但随着时间的推移，我们看到越来越多的浏览器愿意支持ECMAScript标准，那些不支持的标准已经消失（再见了，Internet
    Explorer）。JavaScript随后重新成为了一种可行的语言。随着Node.js的兴起，开发者终于可以在单一编程语言中构建整个应用程序，包括前端和后端。JavaScript已经接管了网络开发世界，并牢固地确立了其地位。
- en: As the technologies have matured, so too have development experiences. With
    the arrival of SvelteKit 1.0, we developers are given an intuitive experience
    allowing us to couple frontend and backend logic together in a way that leaves
    us wondering, “How did we do this before?” Before we dive into that experience,
    we’ll need to cover a few things.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着技术的成熟，开发体验也日益完善。随着SvelteKit 1.0的到来，我们开发者得到了一个直观的体验，允许我们将前端和后端逻辑结合起来，让我们不禁想问：“我们以前是如何做到这一点的？”在我们深入那个体验之前，我们需要先了解一些事情。
- en: Firstly, we’ll cover the prerequisites for developing applications with SvelteKit.
    We’ll then move on to how SvelteKit is installed and discuss how projects are
    typically structured. From there, we’ll build a “Hello, World!” application so
    we can see everything in action.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将介绍使用SvelteKit开发应用程序的先决条件。然后，我们将继续介绍如何安装SvelteKit，并讨论项目通常的结构。从那里，我们将构建一个“Hello,
    World!”应用程序，以便我们可以看到一切的实际操作。
- en: 'To summarize, we’ll discuss these topics in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们将在本章讨论以下主题：
- en: Prerequisites
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先决条件
- en: Installing SvelteKit
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装SvelteKit
- en: SvelteKit’s Project Structure
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SvelteKit的项目结构
- en: “Hello, World!”
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Hello, World!”
- en: After covering all of this material, you should be reasonably comfortable setting
    up a new SvelteKit application for your next project.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在覆盖所有这些材料之后，你应该能够合理地设置一个新的SvelteKit应用程序用于你的下一个项目。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The complete code for this chapter is available on GitHub at: [https://github.com/PacktPublishing/SvelteKit-Up-and-Running/tree/main/chapters/chapter01](https://github.com/PacktPublishing/SvelteKit-Up-and-Running/tree/main/chapters/chapter01)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整代码可在GitHub上找到：[https://github.com/PacktPublishing/SvelteKit-Up-and-Running/tree/main/chapters/chapter01](https://github.com/PacktPublishing/SvelteKit-Up-and-Running/tree/main/chapters/chapter01)
- en: Prerequisites
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: To get the most out of this book and ensure you retain the information provided,
    it is recommended to work alongside the material as you read it. Type the commands
    and code shown into your project, but also feel free to experiment. To do this
    effectively, you will need a computer running Windows, macOS, or a Linux-based
    operating system as well as access to a terminal or command-line interface. Most
    modern computer hardware capable of running the latest versions of the aforementioned
    operating systems should be sufficient for your needs. Specifically, you’ll need
    a system with a minimum of 1 GB of RAM and at least a 1.6 GHz processor. This
    should work just fine for developing with SvelteKit, though performance may vary
    for your operating system.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用这本书并确保你记住提供的信息，建议你在阅读时与材料一起工作。将显示的命令和代码输入到你的项目中，但也请随意进行实验。为了有效地进行这项工作，你需要一台运行Windows、macOS或基于Linux的操作系统以及访问终端或命令行界面的计算机。大多数能够运行上述操作系统的最新版本的现代计算机硬件应该能满足你的需求。具体来说，你需要一个至少有1
    GB RAM和至少1.6 GHz处理器的系统。这应该足以用于使用SvelteKit进行开发，尽管性能可能会因操作系统而异。
- en: Like many other web development projects, you’ll also need a web browser. The
    latest version of Firefox, Chrome, or Safari is recommended. You will also need
    to install Node.js. It is recommended to use the latest `npm` as it is available
    with a standard Node.js installation. It is possible to use `yarn` in place of
    `npm`, but it is probably easier to just use `npm`. If you’re worried about performance,
    `pnpm` will also work.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 就像许多其他 Web 开发项目一样，你还需要一个网络浏览器。建议使用最新版本的 Firefox、Chrome 或 Safari。你还需要安装 Node.js。建议使用与标准
    Node.js 安装一起提供的最新 `npm`。你可以用 `yarn` 代替 `npm`，但可能更简单直接使用 `npm`。如果你担心性能，`pnpm` 也可以使用。
- en: The final tool required will be a text editor or `ext install svelte.svelte-vscode`,
    and hit *Enter*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后需要的工具是一个文本编辑器或通过 `ext install svelte.svelte-vscode` 安装扩展，然后按 *Enter*。
- en: 'In summary, you will need the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，你需要以下内容：
- en: A macOS, Windows, or Linux-based computer
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 macOS、Windows 或 Linux 的计算机
- en: A modern web browser (Firefox, Chrome, or Safari)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现代网络浏览器（Firefox、Chrome 或 Safari）
- en: Terminal access
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终端访问权限
- en: Node.js 18+ LTS
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 18+ LTS
- en: A package manager (`npm` comes installed with Node.js)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包管理器（`npm` 随 Node.js 一起安装）
- en: A text editor/IDE (with the recommended Svelte extension)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本编辑器/集成开发环境（推荐使用 Svelte 扩展）
- en: Installing SvelteKit
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 SvelteKit
- en: 'To begin, open your terminal or command-line interface and navigate to a directory
    where you are comfortable starting a new project. From there, we’ll run three
    simple commands. The first will create a new SvelteKit project with various prompts
    to initialize the application, the second will install dependencies, and the third
    will start our development server:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开你的终端或命令行界面，导航到一个你愿意开始新项目的目录。从那里，我们将运行三个简单的命令。第一个将创建一个新的 SvelteKit 项目，并会有各种提示来初始化应用程序，第二个将安装依赖项，第三个将启动我们的开发服务器：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When running the first command, you’ll be presented with several prompts. The
    first of these will ask you to install `create@svelte` to which your response
    should be `y` for yes. When prompted to select a directory to install the project
    in, leave the option blank to use the current directory (or specify the directory
    if you’d prefer to). You’ll then be asked which template to use. We’ll be working
    primarily with the option **Skeleton project** but feel free to come back and
    give the **SvelteKit demo app** a try in another directory at your convenience.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行第一个命令时，你会看到几个提示。其中第一个会询问你是否要安装 `create@svelte`，你应该回答 `y` 表示是。当被提示选择一个目录来安装项目时，请保持选项为空以使用当前目录（或者如果你愿意，也可以指定目录）。然后你会被询问要使用哪个模板。我们将主要使用
    **骨架项目** 选项，但请随时在另一个目录中尝试 **SvelteKit 示例应用**。
- en: The next prompt pertains to **TypeScript** (**TS**) usage, for which SvelteKit
    has excellent support. However, to keep the focus of this book on SvelteKit itself
    and to appeal to developers that may not yet be familiar with TS, we will be using
    plain JavaScript. As such, to properly follow along with this text, you should
    select **No**. If you feel comfortable enough with TS, then by all means, select
    **Yes**. Be sure to select **Yes** for ESLint and Prettier support as they will
    very likely save you headaches and further improve your development experience.
    It is also recommended to include supported testing packages, but this book will
    not be covering testing strategies.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个提示与 **TypeScript**（**TS**）的使用有关，SvelteKit 对其有很好的支持。然而，为了使本书的焦点保持在 SvelteKit
    本身，并吸引那些可能还不熟悉 TS 的开发者，我们将使用纯 JavaScript。因此，为了正确地跟随本文，你应该选择 **否**。如果你对 TS 感到足够自信，那么当然可以选择
    **是**。务必选择 **是** 以启用 ESLint 和 Prettier 支持，因为它们很可能为你节省麻烦并进一步改善你的开发体验。还建议包括支持的测试包，但本书不会涵盖测试策略。
- en: After installing the project dependencies with `npm install`, we run `npm run
    dev`, which starts our development server. The output from the command should
    look similar to that shown in *Figure 1**.1*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 `npm install` 安装项目依赖后，我们运行 `npm run dev` 来启动我们的开发服务器。命令的输出应该类似于 *图 1**.1*
    中所示。
- en: '![Figure 1.1 – Showing the output from the Vite development server](img/Figure_1.01_B19024.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 展示 Vite 开发服务器的输出](img/Figure_1.01_B19024.jpg)'
- en: Figure 1.1 – Showing the output from the Vite development server
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 展示 Vite 开发服务器的输出
- en: 'Notice how quickly Vite starts our development server. Even though this is
    a bare-bones application, other bundling tools would have taken multiple seconds
    whereas Vite was ready in under one second. As shown in the output displayed in
    the terminal, the site can be viewed by navigating to `http://localhost:5173/`
    in your browser. If you would like to access the site from a device other than
    your development machine, for instance, on a mobile device, then you may append
    `–-host` to the appropriate `npm` script found in the `package.json` project file.
    Under the `scripts` entry, the new command would look like `"dev": "vite` `dev
    –-host"`.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '注意 Vite 启动我们的开发服务器有多快。尽管这是一个骨架应用，其他打包工具可能需要几秒钟的时间，而 Vite 在一秒内就准备好了。如终端中显示的输出所示，可以通过在浏览器中导航到
    `http://localhost:5173/` 来查看网站。如果您想从除开发机器以外的设备访问网站，例如在移动设备上，那么您可以在 `package.json`
    项目文件中找到的相应 `npm` 脚本后附加 `–-host`。在 `scripts` 条目下，新命令将看起来像 `"dev": "vite dev –-host"`。'
- en: We’ve just covered the installation process for SvelteKit. At this point, it
    should be trivial for you to install your own SvelteKit-based project. We’ve covered
    how the various prompts from the `create@svelte` package allow you to customize
    the project to your liking. Now, let’s take a look at how a typical SvelteKit
    project is structured.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚介绍了 SvelteKit 的安装过程。到现在为止，你应该能够轻松地安装自己的基于 SvelteKit 的项目。我们已经介绍了 `create@svelte`
    包中的各种提示如何让你根据喜好自定义项目。现在，让我们看看一个典型的 SvelteKit 项目是如何结构的。
- en: SvelteKit’s Project Structure
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SvelteKit 的项目结构
- en: 'Once you have installed a new SvelteKit project, open the project directory
    in your preferred editor. Within that folder, you’ll notice files that are commonly
    found in the root project folder of JavaScript applications such as `package.json`,
    `.gitignore`, and `README.md`, as well as configuration files pertaining to SvelteKit
    (`svelte.config.js`) and Vite (`vite.config.js`). You’ll also notice three subfolders:
    `static/`, `tests/`, and `src/`. Let’s look at them in detail in the following
    sections.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 安装新的 SvelteKit 项目后，在您首选的编辑器中打开项目目录。在该文件夹中，您会注意到在 JavaScript 应用程序的根项目文件夹中常见的文件，如
    `package.json`、`.gitignore` 和 `README.md`，以及与 SvelteKit 相关的配置文件（`svelte.config.js`）和
    Vite（`vite.config.js`）。您还会注意到三个子文件夹：`static/`、`tests/` 和 `src/`。以下几节将详细探讨它们。
- en: static/
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: static/
- en: This folder is where you may place static assets such as `robots.txt` (your
    guidelines for search engine site crawlers), static images such as favicons, or
    even a global CSS style sheet. These files should be able to be served “as is.”
    Files located in this folder will be available to your application logic as if
    they existed in the root folder of your project, that is, `/robots.txt`. You can
    also access them by prefixing the file path with `%sveltekit.assets%`. Note that
    if files here are changed, you may need to manually refresh the page to see changes.
    In some cases, you may even need to restart your development server as Vite has
    strong opinions about caching. You should not attempt to access files included
    in this directory programmatically. Rather, the paths should be “hardcoded” wherever
    the assets here are included.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件夹是放置静态资源的地方，例如 `robots.txt`（为搜索引擎网站爬虫提供的指南）、静态图像，如favicon，甚至全局CSS样式表。这些文件应该能够“原样”提供服务。位于此文件夹中的文件将作为如果它们存在于项目根目录中一样，对应用程序逻辑可用，即
    `/robots.txt`。您也可以通过在文件路径前加上 `%sveltekit.assets%` 来访问它们。请注意，如果这里的文件被更改，您可能需要手动刷新页面以查看更改。在某些情况下，您甚至可能需要重新启动开发服务器，因为Vite对缓存有强烈的看法。您不应尝试以编程方式访问此目录中包含的文件。相反，路径应该在包含这些资产的地方“硬编码”。
- en: tests/
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: tests/
- en: Logically, tests from the Playwright package (included in the various prompts
    we said *yes* to) are located here. To run the Playwright browser test, use the
    npm script `npm run test`. Unit tests from Vitest will be included alongside your
    source code. For example, if you included a file called `utilities.js`, unit tests
    for it would live alongside it as `utilities.test.js`. Vitest is a package from
    the developers of Vite that enables simple testing for Vite-based applications.
    **Test-Driven Development** (**TDD**) is an excellent practice to follow to ensure
    code performs as it is expected to. However, it is beyond the scope of this book.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从逻辑上讲，Playwright 包（在我们说“是”的各种提示中包含）的测试位于此处。要运行 Playwright 浏览器测试，请使用 npm 脚本 `npm
    run test`。Vitest 的单元测试将与您的源代码一起包含。例如，如果您包含了一个名为 `utilities.js` 的文件，那么它的单元测试将作为
    `utilities.test.js` 与它一起存在。Vitest 是 Vite 开发者提供的包，它使基于 Vite 的应用程序的简单测试成为可能。**测试驱动开发**（**TDD**）是一种确保代码按预期执行的优秀实践。然而，这超出了本书的范围。
- en: src/
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: src/
- en: 'You will be spending most of your time working in this folder as this is where
    the core logic for a SvelteKit application lives. There are a few files and directories
    that should be taken note of at this time:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在大多数时间里在这个文件夹中工作，因为这是 SvelteKit 应用程序核心逻辑所在的地方。现在应该注意一些文件和目录：
- en: '`routes/`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`routes/`'
- en: '`lib/`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lib/`'
- en: '`app.html`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.html`'
- en: routes/
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 路由/
- en: The first subfolder to take note of is `src/routes/`. This directory will contain
    most files necessary for managing SvelteKit’s file-based routing mechanism. Its
    sibling folder `src/params/` will be covered later on, but for now, assume most
    logic related to managing the routes of your application is located here. As a
    brief example, if you’d like to add a static “about” page, then you would do so
    by creating `src/routes/about/+page.svelte` containing the appropriate markup
    and text.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的第一个子文件夹是 `src/routes/`。这个目录将包含管理 SvelteKit 文件路由机制所需的大部分文件。它的同级文件夹 `src/params/`
    将稍后介绍，但到目前为止，假设与您的应用程序路由管理相关的逻辑主要位于此处。作为一个简短的例子，如果您想添加一个静态的“关于”页面，那么您可以通过创建包含适当标记和文本的
    `src/routes/about/+page.svelte` 来实现。
- en: lib/
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: lib/
- en: Svelte components and various other utilities can be placed in the `src/lib/`
    subfolder. This folder may not be present in the skeleton project template so
    you’ll have to add it on your own. It will be shown in the SvelteKit demo app.
    By placing your components here, you can easily reference them in `import` statements
    later on as the `$lib/` alias will be available throughout the application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Svelte 组件和各种其他实用工具可以放置在 `src/lib/` 子文件夹中。这个文件夹可能不在骨架项目模板中，所以您需要自己添加它。它将在 SvelteKit
    示例应用中展示。通过将组件放在这里，您可以在稍后的 `import` 语句中轻松引用它们，因为 `$lib/` 别名将在整个应用程序中可用。
- en: app.html
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: app.html
- en: There are more files to cover that we will address later on, but for now, the
    final mention is `app.html`. This file serves as the base for the rest of your
    application to build off of. When opened, you’ll notice it contains references
    to `%sveltekit.head%`, which SvelteKit uses for injecting various script and link
    tags, and `%sveltekit.body%`, which is used for injecting the markup generated
    for the application.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多文件将在稍后介绍，但到目前为止，最后的提及是 `app.html`。这个文件作为您应用程序构建的基础。当打开时，您会注意到它包含对 `%sveltekit.head%`
    的引用，SvelteKit 使用它来注入各种脚本和链接标签，以及 `%sveltekit.body%`，它用于注入为应用程序生成的标记。
- en: To recap, the `static/` directory contains files that don’t frequently change,
    `tests/` contains tests from the Playwright package, and `src/` contains the source
    code of your project. Most Svelte components and other utilities you create can
    be placed at `src/lib/` so as to be easily accessed via the `$lib/` alias in `import`
    statements. If you’d like to add a new route to your application URL, you can
    do so by creating a `+page.svelte` file inside a directory with the corresponding
    name at `src/routes/`. And finally, your application will need a base to build
    off. That’s where `app.html` comes in. I’m sure you’re eager to finally build
    something, so let’s do it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，`static/` 目录包含不经常更改的文件，`tests/` 目录包含 Playwright 包中的测试，而 `src/` 目录包含您项目的源代码。您创建的大多数
    Svelte 组件和其他实用工具都可以放在 `src/lib/` 中，以便通过 `import` 语句中的 `$lib/` 别名轻松访问。如果您想向应用程序
    URL 添加新路由，可以在 `src/routes/` 中相应名称的目录内创建一个 `+page.svelte` 文件。最后，您的应用程序需要一个基础来构建。这就是
    `app.html` 的作用。我相信您已经迫不及待地想要最终构建一些东西了，所以让我们开始吧。
- en: Hello World Application
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello World 应用程序
- en: 'Now that we know a bit about what we’re looking at in a freshly initialized
    SvelteKit project, it seems appropriate to build a “Hello, World!” application.
    We’ll begin by opening `src/routes/+page.svelte` in our editor. At this point,
    it should only contain basic HTML code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对在全新初始化的 SvelteKit 项目中查看的内容有了一定的了解，似乎构建一个“Hello, World!”应用程序是合适的。我们将首先在编辑器中打开`src/routes/+page.svelte`文件。在这个阶段，它应该只包含基本的
    HTML 代码：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Since this file lives directly inside the `src/routes/` directory and not a
    sub-directory, it is available in the browser as the URL's root route (i.e., `/`).
    If we were to create a new folder within the routes directory (i.e., `src/routes/hello/`)
    and place another `+page.svelte` file inside of that (i.e., `src/routes/hello/+page.svelte`),
    then we would make the `/hello` route available as a valid URL for our app. We’ll
    cover more advanced routing techniques in later chapters, but for now, just know
    that to add a new route, you’ll need to create a folder using the desired route
    name in the `routes` directory as well as a `+``page.svelte` file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此文件直接位于`src/routes/`目录中，而不是子目录中，因此它作为 URL 的根路由（即`/`）在浏览器中可用。如果我们要在路由目录中创建一个新的文件夹（即`src/routes/hello/`），并在其中放置另一个`+page.svelte`文件（即`src/routes/hello/+page.svelte`），那么我们就会使`/hello`路由作为有效的
    URL 对我们的应用程序可用。我们将在后面的章节中介绍更高级的路由技术，但到目前为止，只需知道要添加新路由，你需要在`routes`目录中创建一个使用所需路由名称的文件夹，以及一个`+page.svelte`文件。
- en: Svelte Components
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Svelte 组件
- en: Readers familiar with Svelte will have noticed that the `+page.svelte` file
    extension is that of a Svelte component. That’s because *it is* a Svelte component!
    As such, we can adjust the HTML in it, customize the look with CSS in `<style>`
    tags, write JS inside of `<script>` tags, and import other Svelte components.
    If you’re unfamiliar with Svelte components, it’s recommended to learn at least
    the basics before continuing further. Check out *Svelte 3 Up and Running* by *Allessandro
    Segala* or visit the official Svelte website ([https://svelte.dev](https://svelte.dev))
    for more information.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉 Svelte 的读者会注意到`+page.svelte`文件扩展名是 Svelte 组件的扩展名。这是因为**它就是一个** Svelte 组件！因此，我们可以调整其中的
    HTML，使用`<style>`标签自定义外观，在`<script>`标签内编写 JS，并导入其他 Svelte 组件。如果你对 Svelte 组件不熟悉，建议在继续之前至少学习基础知识。可以查看*Allessandro
    Segala*的《Svelte 3 Up and Running》或访问官方 Svelte 网站([https://svelte.dev](https://svelte.dev))获取更多信息。
- en: 'Let’s make some changes to `src/routes/+page.svelte` to see what’s happening.
    Change the inner text of the `<h1>` tag to read `Hello, World!`, like so:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对`src/routes/+page.svelte`文件进行一些修改，看看发生了什么。将`<h1>`标签的内部文本更改为`Hello, World!`，如下所示：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Thanks to Vite, the page in our browser is updated immediately after saving.
    If your setup has dual monitors available with code shown on one and your browser
    on the other, you’ll quickly see how valuable **Hot Module Replacement** (**HMR**)
    can be. The change we’ve made is all well and good, but it isn’t really a “Hello,
    World!” application if users can’t change the text. For a true “Hello, World!”
    example, we need to show some text that has been provided by the user. The following
    code is an implementation showing just that:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了 Vite，我们在浏览器中的页面在保存后立即更新。如果你的设置中有双显示器，一个显示代码，另一个显示浏览器，你将很快看到**热模块替换**（**HMR**）是多么有价值。我们做出的更改都是好的，但如果用户不能更改文本，这并不是一个真正的“Hello,
    World!”应用程序。为了一个真正的“Hello, World!”示例，我们需要显示一些由用户提供的文本。以下代码展示了这一点：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This simple Svelte component creates a variable named `name` with the default
    value of “`World`.” From there, the HTML gives us a basic form binding the text
    input value to our variable and outputting the text inside an HTML `<h1>` tag.
    Thanks to Svelte’s reactivity and the binding of the text input value to the `name`
    variable, the text provided is shown immediately, even as it is typed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的 Svelte 组件创建了一个名为`name`的变量，默认值为“`World`”。从那里，HTML 给我们一个基本的表单，将文本输入值绑定到我们的变量，并在
    HTML `<h1>`标签中输出文本。多亏了 Svelte 的响应性和文本输入值与`name`变量的绑定，提供的文本会立即显示，即使在输入时也是如此。
- en: '![Figure 1.2 – The output from our “Hello, World!” component](img/Figure_1.02_B19024.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – “Hello, World!”组件的输出](img/Figure_1.02_B19024.jpg)'
- en: Figure 1.2 – The output from our “Hello, World!” component
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – “Hello, World!”组件的输出
- en: Summary
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed some of the prerequisite knowledge and tools needed
    for getting started with SvelteKit. You likely already had a computer running
    a capable operating system with a browser installed. You may even have had the
    latest LTS version of Node.js installed with the `npm` package manager. We also
    briefly touched on getting your editor prepared by installing Svelte-specific
    extensions.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了一些开始使用 SvelteKit 所需的先验知识和工具。你可能已经拥有一台运行着强大操作系统的计算机，并且安装了浏览器。你可能甚至已经安装了带有
    `npm` 软件包管理器的最新 LTS 版本的 Node.js。我们还简要介绍了通过安装 Svelte 特定扩展来准备你的编辑器。
- en: We continued by covering the installation process of SvelteKit. The prompts
    provided during the installation make setting up a new SvelteKit project simple
    and easily customized to a developer’s liking.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续介绍了 SvelteKit 的安装过程。安装过程中提供的提示使得设置新的 SvelteKit 项目变得简单，并且可以轻松地根据开发者的喜好进行定制。
- en: After the project installation, we took a high-level look at SvelteKit’s project
    structure. While the `tests/` and `static/` directories are fairly straightforward,
    some nuances lie within the `src/` folder. For instance, keeping various Svelte
    components and other utilities in the `src/lib/` folder can help keep a project
    from becoming difficult to navigate. Components located there are also easily
    accessed across application code via the `$``lib/` alias.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目安装之后，我们从高层次上审视了 SvelteKit 的项目结构。虽然 `tests/` 和 `static/` 目录相当直接，但 `src/` 文件夹中存在一些细微差别。例如，将各种
    Svelte 组件和其他实用工具放在 `src/lib/` 文件夹中可以帮助项目避免变得难以导航。位于那里的组件也可以通过 `$lib/` 别名轻松地在应用程序代码中访问。
- en: We also created a rudimentary “Hello, World!” application. It showcased how
    simple SvelteKit makes it to start building an application from scratch.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了一个基本的“Hello, World!”应用程序。它展示了 SvelteKit 如何使从头开始构建应用程序变得简单。
- en: In the next chapter, we’ll go over some of the various configuration options
    you may need to tweak in both SvelteKit and Vite to customize them to suit your
    needs.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍一些你可能需要在 SvelteKit 和 Vite 中调整的各种配置选项，以便根据你的需求进行定制。
- en: Resources
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: 'Node.js: [https://nodejs.org](https://nodejs.org)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Node.js: [https://nodejs.org](https://nodejs.org)'
- en: 'NVM: [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NVM: [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm)'
- en: 'SvelteKit: [https://kit.svelte.dev](https://kit.svelte.dev)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SvelteKit: [https://kit.svelte.dev](https://kit.svelte.dev)'
- en: 'VS Code: [https://code.visualstudio.com/](https://code.visualstudio.com/)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'VS Code: [https://code.visualstudio.com/](https://code.visualstudio.com/)'
