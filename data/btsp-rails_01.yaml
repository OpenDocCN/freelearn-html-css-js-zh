- en: Chapter 1. Introducing Web Application Development in Rails
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 介绍 Rails 中的 Web 应用程序开发
- en: Presenting your application in the best possible way has been the most important
    factor for every web developer for ages. In this mobile-first generation, we are
    forced to go with the wind and make our application compatible with Mobiles, Tables,
    PCs, and every possible display on Earth.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 以最佳方式展示您的应用程序一直是每位网页开发者最重要的因素。在这个以移动设备为先导的时代，我们被迫随风而行，使我们的应用程序兼容于手机、平板电脑、个人电脑以及地球上所有可能的显示设备。
- en: '**Bootstrap** is the one stop solution for all woes that developers have been
    facing. It creates beautiful responsive designs without any extra efforts and
    without any advanced CSS knowledge. It is a true boon for every developer.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bootstrap** 是解决开发者所面临所有烦恼的一站式解决方案。它无需额外努力，也不需要任何高级 CSS 知识，就能创建出美丽的响应式设计。对于每一位开发者来说，它都是真正的福音。'
- en: In this chapter, and throughout the book, we will be focusing on how to beautify
    our Rails applications through the help of Bootstrap. In this chapter, we will
    create a basic Todo application with Rails. We will explore the folder structure
    of a Rails application and analyze which folders are important for templating
    a Rails Application. This will be helpful if you want to quickly revisit Rails
    concepts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章以及整本书中，我们将关注如何借助 Bootstrap 美化我们的 Rails 应用程序。在本章中，我们将使用 Rails 创建一个基本的 Todo
    应用程序。我们将探索 Rails 应用的文件夹结构，并分析哪些文件夹对于模板化 Rails 应用程序很重要。这将有助于你快速回顾 Rails 概念。
- en: We will also see how to create views, link them, and also style them. The styling
    in this chapter will be done traditionally through the application's default CSS
    files. Finally, we will discuss how we can speed up the designing process using
    Bootstrap.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将了解如何创建视图、链接它们以及样式化它们。本章中的样式化将通过应用程序的默认 CSS 文件以传统方式完成。最后，我们将讨论如何使用 Bootstrap
    加速设计过程。
- en: 'In short, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我们将涵盖以下主题：
- en: Why Bootstrap with Rails?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择 Bootstrap 与 Rails 结合使用？
- en: Setting up a Todo Application in Rails
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Rails 中设置 Todo 应用程序
- en: Analyzing folder structure of a Rails application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析 Rails 应用的文件夹结构
- en: Creating views
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建视图
- en: Styling views using CSS
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CSS 样式化视图
- en: Challenges in traditionally styling a Rails Application
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传统样式化 Rails 应用的挑战
- en: Why Bootstrap with Rails?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 Bootstrap 与 Rails 结合使用？
- en: Rails is one the most popular Ruby frameworks which is currently at its peak,
    both in terms of demand and technology trend. With more than 3,100 members contributing
    to its development, and tens of thousands of applications already built using
    it, Rails has created a standard for every other framework in the Web today.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 是目前最受欢迎的 Ruby 框架之一，无论是需求还是技术趋势都处于巅峰状态。有超过 3,100 名成员为其开发贡献力量，已有成千上万的应用程序使用它构建，Rails
    已经为今天的每个 Web 框架树立了标准。
- en: Rails was initially developed by David Heinemeier Hansson in 2003 to ease his
    own development process in Ruby. Later, he became generous enough to release Rails
    to the open source community. Today, it is popularly known as **Ruby on Rails**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 最初由 David Heinemeier Hansson 在 2003 年开发，目的是简化他在 Ruby 中的开发过程。后来，他足够慷慨，将
    Rails 释放到开源社区。如今，它广为人知为 **Ruby on Rails**。
- en: Rails shortens the development life cycle by moving the focus from reinventing
    the wheel to innovating new features. It is based on the convention of the configurations
    principle, which means that if you follow the Rails conventions, you would end
    up writing much less code than you would otherwise write.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 通过将重点从重新发明轮子转移到创新新功能，缩短了开发周期。它基于配置原则的约定，这意味着如果你遵循 Rails 的约定，你最终编写的代码将比不遵循时少得多。
- en: Bootstrap, on the other hand, is one of the most popular frontend development
    frameworks. It was initially developed at Twitter for some of its internal projects.
    It makes the life of a novice web developer easier by providing most of the reusable
    components that are already built and are ready to use. Bootstrap can be easily
    integrated with a Rails development environment through various methods. We can
    directly use the `.css` files provided by the framework, or can extend it through
    its Sass version and let Rails compile it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Bootstrap 是最受欢迎的前端开发框架之一。它最初是为 Twitter 的某些内部项目开发的。它通过提供大多数已经构建并准备好使用的可重用组件，使新手网页开发者的生活变得更加容易。Bootstrap
    可以通过多种方法轻松集成到 Rails 开发环境中。我们可以直接使用框架提供的 `.css` 文件，或者通过其 Sass 版本扩展它，并让 Rails 编译它。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Sass is a CSS preprocessor that brings logic and functionality into CSS. It
    includes features like variables, functions, mixins, and others. Using the Sass
    version of Bootstrap is a recommended method in Rails. It gives various options
    to customize Bootstrap's default styles easily.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Sass 是一个 CSS 预处理器，它将逻辑和功能引入 CSS。它包括变量、函数、混合等功能。在 Rails 中使用 Sass 版本的 Bootstrap
    是一种推荐的方法。它提供了各种选项，可以轻松自定义 Bootstrap 的默认样式。
- en: Bootstrap also provides various JavaScript components that can be used by those
    who don't have any real JavaScript knowledge. These components are required in
    almost every modern website being built today.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 还为那些没有实际 JavaScript 知识的人提供了各种 JavaScript 组件。这些组件几乎在当今构建的每个现代网站上都是必需的。
- en: Bootstrap with Rails is a deadly combination. You can build applications faster
    and invest more time to think about functionality, rather than rewrite codes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 与 Rails 的结合是致命的。您可以更快地构建应用程序，并投入更多时间来思考功能，而不是重写代码。
- en: Setting up a Todo application in Rails
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Rails 中设置待办事项应用
- en: Since this book is targeted for Rails developers, I assume that you already
    have basic knowledge of Rails development. You should also have Rails and Ruby
    installed in your machine to start with.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这本书的目标是针对 Rails 开发者，我假设您已经具备基本的 Rails 开发知识。您还应该在您的机器上安装 Rails 和 Ruby 以开始。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While writing this book, Ruby 2.1.1 and Rails 4.1.4 was used.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写这本书时，使用了 Ruby 2.1.1 和 Rails 4.1.4。
- en: Let's first understand what this Todo application will do. Our application will
    allow us to create, update, and delete items from the Todo list. We will first
    analyze the folders that are created while scaffolding this application and which
    of them are necessary for templating the application.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先了解这个待办事项应用将做什么。我们的应用程序将允许我们创建、更新和删除待办事项列表中的项目。我们将首先分析在构建此应用程序时创建的文件夹，以及哪些文件夹对于模板化应用程序是必要的。
- en: 'So, let''s dip our feet into the water:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们先试水：
- en: First, we need to select our workspace, which can be any folder inside your
    system. Let's create a folder named `Bootstrap_Rails_Project`. Now, open the terminal
    and navigate to this folder.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要选择我们的工作区，它可以是系统中的任何文件夹。让我们创建一个名为 `Bootstrap_Rails_Project` 的文件夹。现在，打开终端并导航到这个文件夹。
- en: 'It''s time to create our Todo application. Write the following command to create
    a Rails application named `TODO`:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是时候创建我们的待办事项应用了。输入以下命令以创建一个名为 `TODO` 的 Rails 应用程序：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command will execute a series of various other commands that are necessary
    to create a Rails application. So, just wait for sometime before it stops executing
    all the codes. If you are using a newer version of Rails, then this command will
    also execute `bundle install` command at the end. Bundle install command is used
    to install other dependencies.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此命令将执行一系列其他必要的命令以创建 Rails 应用程序。因此，请稍等片刻，直到它停止执行所有代码。如果您使用的是 Rails 的新版本，则此命令还会在最后执行
    `bundle install` 命令。`bundle install` 命令用于安装其他依赖项。
- en: 'The output for the preceding command is as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![Setting up a Todo application in Rails](img/7269OS_1_1.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![在 Rails 中设置待办事项应用](img/7269OS_1_1.jpg)'
- en: 'Now, you should have a new folder inside `Bootstrap_Rails_Project` named `TODO`,
    which was created by the preceding code. Here is the output:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该在 `Bootstrap_Rails_Project` 内部有一个名为 `TODO` 的新文件夹，这是由前面的代码创建的。以下是输出：
- en: '![Setting up a Todo application in Rails](img/7269OS_1_2.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![在 Rails 中设置待办事项应用](img/7269OS_1_2.jpg)'
- en: Analyzing folder structure of a Rails application
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析 Rails 应用程序的文件夹结构
- en: 'Let''s navigate to the `TODO` folder to check how our application''s folder
    structure looks like:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导航到 `TODO` 文件夹，查看我们的应用程序文件夹结构是什么样的：
- en: '![Analyzing folder structure of a Rails application](img/7269OS_1_3.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![分析 Rails 应用程序的文件夹结构](img/7269OS_1_3.jpg)'
- en: 'Let me explain to you some of the important folders here:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我为您解释这里的一些重要文件夹：
- en: The first one is the `app` folder, which we will be focusing on the most throughout
    this book. All our application's content will be present inside this folder.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个文件夹是 `app` 文件夹，我们将在这本书中重点关注它。我们应用程序的所有内容都将存放在这个文件夹中。
- en: The `assets` folder inside the `app` folder is the location to store all the
    static files like JavaScript, CSS, and Images. You can take a sneak peek inside
    them to look at the various files.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app` 文件夹内的 `assets` 文件夹是存储所有静态文件（如 JavaScript、CSS 和图片）的位置。您可以偷偷看看里面的各种文件。'
- en: The `controllers` folder handles various requests and responses of the browser.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`controllers` 文件夹处理浏览器的各种请求和响应。'
- en: The `helpers` folder contains various helper methods both for the `views` and
    `controllers`.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helpers` 文件夹包含用于 `views` 和 `controllers` 的各种辅助方法。'
- en: The next folder `mailers`, contains all the necessary files to send an e-mail.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个文件夹 `mailers` 包含发送电子邮件所需的所有必要文件。
- en: The `models` folder contains files that interact with the database.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`models` 文件夹包含与数据库交互的文件。'
- en: Finally, we have the `views` folder, which contains all the `.erb` files that
    will be complied to HTML files.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们有 `views` 文件夹，它包含所有将被编译成 HTML 文件的 `.erb` 文件。
- en: 'So, let''s start the Rails server and check out our application on the browser:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们启动 Rails 服务器，并在浏览器中检查我们的应用程序：
- en: 'Navigate to the `TODO` folder in the terminal and then type the following command
    to start a server:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中导航到 `TODO` 文件夹，然后输入以下命令以启动服务器：
- en: '[PRE1]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can also use the following command:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以使用以下命令：
- en: '[PRE2]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will see that the server is deployed under the port `3000`. So, type the
    following URL to view the application:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到服务器正在 `3000` 端口下部署。因此，输入以下 URL 来查看应用程序：
- en: '`http://localhost:3000`.'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:3000`。'
- en: 'You can also use the following URL: `http://0.0.0.0:3000`.'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以使用以下 URL：`http://0.0.0.0:3000`。
- en: If your application is properly set up, you should see the default page of Rails
    in the browser:![Analyzing folder structure of a Rails application](img/7269OS_1_4.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的应用程序设置得当，你应该在浏览器中看到 Rails 的默认页面：![分析 Rails 应用程序的文件夹结构](img/7269OS_1_4.jpg)
- en: Creating views
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建视图
- en: 'We will be using Rails'' scaffold method to create models, views, and other
    necessary files that Rails needs to make our application live. Here''s the set
    of tasks that our application should perform:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Rails 的 scaffold 方法来创建模型、视图和其他 Rails 需要的必要文件，以便使我们的应用程序运行。以下是我们的应用程序应执行的任务集：
- en: It should list out the pending items
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该列出待办事项
- en: Every task should be clickable, and the details related to that item should
    be seen in a new view
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个任务都应该是可点击的，并且与该项目相关的详细信息应该在新视图中显示
- en: We can edit that item's description and some other details
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以编辑该项目的描述和一些其他细节
- en: We can delete that item
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以删除该条目
- en: The task looks pretty lengthy, but any Rails developer would know how easy it
    is to do. We don't actually have to do anything to achieve it. We just have to
    pass a single scaffold command, and the rest will be taken care of.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个任务看起来相当长，但任何 Rails 开发者都知道这有多容易。我们实际上不需要做任何事情就能实现它。我们只需要传递一个单独的 scaffold 命令，其余的将由
    Rails 处理。
- en: 'Close the Rails server using *Ctrl* + *C* keys and then proceed as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *Ctrl* + *C* 键关闭 Rails 服务器，然后按照以下步骤操作：
- en: 'First, navigate to the project folder in the terminal. Then, pass the following
    command:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在终端中导航到项目文件夹。然后，输入以下命令：
- en: '[PRE3]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will create a new model called `todo` that has various fields like title,
    description, and completed. Each field has a type associated with it.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建一个名为 `todo` 的新模型，它具有各种字段，如标题、描述和完成状态。每个字段都与其相关联的类型。
- en: 'Since we have created a new model, it has to be reflected in the database.
    So, let''s migrate it:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们创建了一个新的模型，它必须在数据库中反映出来。因此，让我们迁移它：
- en: '[PRE4]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding code will create a new table inside a new database with the associated
    fields.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码将在新数据库中创建一个新表，并包含相关字段。
- en: 'Let''s analyze what we have done. The scaffold command has created many HTML
    pages or views that are needed for managing the `todo` model. So, let''s check
    out our application. We need to start our server again:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们分析一下我们所做的工作。scaffold 命令创建了许多用于管理 `todo` 模型的 HTML 页面或视图。因此，让我们检查我们的应用程序。我们需要再次启动服务器：
- en: '[PRE5]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Go to the localhost page `http://localhost:3000` at port number `3000`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往本地主机页面 `http://localhost:3000` 的端口号 `3000`。
- en: 'You should still see the Rails'' default page. Now, type the URL: `http://localhost:3000/todos`.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该仍然看到 Rails 的默认页面。现在，输入 URL：`http://localhost:3000/todos`。
- en: You should now see the application, as shown in the following screenshot:![Creating
    views](img/7269OS_1_5.jpg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在应该看到应用程序，如下面的截图所示：![创建视图](img/7269OS_1_5.jpg)
- en: Click on **New Todo**, you will be taken to a form which allows you to fill
    out various fields that we had earlier created. Let's create our first todo and
    click on **submit**. It will be shown on the listing page:![Creating views](img/7269OS_1_6.jpg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **New Todo**，你将被带到允许你填写我们之前创建的各种字段的表单。让我们创建我们的第一个 todo 并点击 **提交**。它将显示在列表页面上：![创建视图](img/7269OS_1_6.jpg)
- en: It was easy, wasn't it? We haven't done anything yet. That's the power of Rails,
    which people are crazy about.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单，不是吗？我们还没有做什么。这就是 Rails 的力量，人们为之疯狂。
- en: Styling views using CSS
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CSS 样式视图
- en: Obviously, the application doesn't look insanely great. The table that has been
    presented is extremely confusing and needs some CSS styling. So, let's proceed
    to style our Rails application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，应用程序的外观并不疯狂地好。所展示的表格极其混乱，需要一些 CSS 样式。因此，让我们继续为我们的 Rails 应用程序添加样式。
- en: 'We will use the application''s default CSS file to add and modify the styles:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用应用程序的默认 CSS 文件来添加和修改样式：
- en: Open `Bootstrap_Rails_Project`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Bootstrap_Rails_Project`。
- en: Open the `TODO` folder; go to the `app` folder. Navigate to the `assets` folder.
    There you will find a folder named `stylesheets`. This folder contains all the
    CSS files of the application.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `TODO` 文件夹；进入 `app` 文件夹。导航到 `assets` 文件夹。在那里你会找到一个名为 `stylesheets` 的文件夹。这个文件夹包含应用程序的所有
    CSS 文件。
- en: 'Currently, you will find three different files: `application.css`, `scaffold.css.scss`,
    and `todos.css.scss`. The first file is an application level CSS file. Anything
    you write inside it will be applied to the whole application. The next two files
    are Sass files. Rails uses SASS to apply styles to the application. These SASS
    files are compiled in the CSS files and included in the application on the go.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你将找到三个不同的文件：`application.css`、`scaffold.css.scss` 和 `todos.css.scss`。第一个文件是应用级别的
    CSS 文件。你可以在其中写入任何内容，它将应用于整个应用程序。接下来的两个文件是 Sass 文件。Rails 使用 SASS 来为应用程序应用样式。这些
    SASS 文件被编译成 CSS 文件，并在运行时包含在应用程序中。
- en: 'We will be using a normal CSS file without any SASS to apply styles to our
    `Todo` application. Let''s first proceed and analyze the HTML source code of our
    application. The screenshot is as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个普通的 CSS 文件（不包含 SASS）来为我们的 `Todo` 应用程序应用样式。让我们首先继续并分析应用程序的 HTML 源代码。截图如下：
- en: '![Styling views using CSS](img/7269OS_1_7.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![使用 CSS 样式化视图](img/7269OS_1_7.jpg)'
- en: You can see that all the CSS files are loaded alphabetically here. This can
    be a serious problem where overriding CSS is concerned. We want our CSS file to
    be at the end. This will allow us to override the application level styles at
    some places in future.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，所有的 CSS 文件在这里都是按字母顺序加载的。这可能会在覆盖 CSS 时成为一个严重的问题。我们希望我们的 CSS 文件在最后。这样，我们就可以在未来的一些地方覆盖应用级别的样式。
- en: 'So, let''s rearrange the CSS files here.To do so, follow the given steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们重新排列这里的 CSS 文件。为了做到这一点，请遵循以下步骤：
- en: Open the `application.css` file using a text editor. There you can see some
    code lines with `require_` as their prefix. We need to tweak them a bit in order
    to get the desired result, as shown here:![Styling views using CSS](img/7269OS_1_8.jpg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开 `application.css` 文件。在那里你可以看到一些以 `require_` 为前缀的代码行。我们需要稍作调整，以获得如图所示的结果：![使用
    CSS 样式化视图](img/7269OS_1_8.jpg)
- en: Let's create a new CSS file named `styles.css` in the same `stylesheets` folder.
    Now come back to the `application.css` file.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在同一 `stylesheets` 文件夹中创建一个名为 `styles.css` 的新 CSS 文件。现在回到 `application.css`
    文件。
- en: 'Remove the following line from the file:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件中删除以下行：
- en: '[PRE6]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding line was telling Rails to include all the CSS files in alphabetical
    order.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的行是在告诉 Rails 按字母顺序包含所有 CSS 文件。
- en: 'Now, add the following line:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加以下行：
- en: '[PRE7]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding line will include `styles.css` in the application. Ensure that
    `application.css` looks as shown in the following screenshot:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的行将包含 `styles.css` 到应用程序中。确保 `application.css` 的外观如下所示：
- en: '![Styling views using CSS](img/7269OS_1_9.jpg)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用 CSS 样式化视图](img/7269OS_1_9.jpg)'
- en: 'The `require_self` command includes the `application.css` file in the application.
    If we inspect the HTML source file now, we should see that there are only two
    CSS files included: `application.css` and `styles.css`. Hence, we are now safe
    to write CSS styles for the application.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`require_self` 命令将 `application.css` 文件包含在应用程序中。如果我们现在检查 HTML 源文件，我们应该看到只有两个
    CSS 文件被包含：`application.css` 和 `styles.css`。因此，我们现在可以安全地为应用程序编写 CSS 样式。'
- en: Redesigning the Todo application
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新设计 Todo 应用程序
- en: In this section, We will write all the CSS files to redesign without the use
    of any framework. This will help us to better understand the amount of CSS code
    we have to write at the end for styling simple links and other HTML elements.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将不使用任何框架来编写所有的 CSS 文件以进行重新设计。这将帮助我们更好地理解在最后为了样式化简单的链接和其他 HTML 元素时，我们需要编写多少
    CSS 代码。
- en: 'We are going to redesign our existing Todo application to something that looks
    like the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重新设计现有的 Todo 应用程序，使其看起来像以下截图所示：
- en: '![Redesigning the Todo application](img/7269OS_1_10.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![重新设计 Todo 应用程序](img/7269OS_1_10.jpg)'
- en: 'The preceding screenshot displays the redesigned version of the home page.
    As you can see, the list of TODO activities are now displayed properly in the
    middle of the screen inside a table-like structure. Even the action links (Show,
    Edit, and Destroy) have been redesigned to look like 3D buttons. Let''s look at
    the redesigned version:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了重新设计的主页。正如你所见，TODO 活动列表现在在屏幕中央以类似表格的结构正确显示。甚至动作链接（显示、编辑和删除）也被重新设计成看起来像
    3D 按钮。让我们看看重新设计的版本：
- en: '![Redesigning the Todo application](img/7269OS_1_11.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![重新设计 Todo 应用程序](img/7269OS_1_11.jpg)'
- en: 'The preceding screenshot displays the redesigned version of the `New Todo`
    page. The form has been redesigned and a background color has been applied to
    it, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了重新设计的“新建 Todo”页面。表单已被重新设计，并应用了背景颜色，如下所示：
- en: '![Redesigning the Todo application](img/7269OS_1_12.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![重新设计 Todo 应用程序](img/7269OS_1_12.jpg)'
- en: 'The preceding screenshot shows the redesigned version of the `Edit TODO` screen,
    which is the same as the `New Todo` screen. The only difference here is the auto
    fill feature that fills the fields as per the data available in the database.
    The input fields are more spacious with a bigger font size for properly displaying
    the text contained in them. Let''s see the screenshot of the `View Todo` page:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了重新设计的“编辑 TODO”屏幕版本，它与“新建 Todo”屏幕相同。这里唯一的区别是自动填充功能，它会根据数据库中可用的数据填充字段。输入字段更加宽敞，字体大小更大，以便正确显示其中的文本。让我们看看“查看
    Todo”页面的截图：
- en: '![Redesigning the Todo application](img/7269OS_1_13.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![重新设计 Todo 应用程序](img/7269OS_1_13.jpg)'
- en: The preceding screenshot displays the redesigned version of the `View Todo`
    page. We have kept this page simple and clear for better readability. In all the
    pages, we have centered the content of the website.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了重新设计的“查看 Todo”页面。我们保持了该页面的简洁和清晰，以便更好的可读性。在所有页面中，我们都使网站的内容居中。
- en: Oh! That's lots of designing! Don't worry. We will get through it easily.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 哦！设计内容太多了！别担心，我们会轻松完成。
- en: 'It is generally considered as a good practice to organize the designing process
    before jumping into it. In our Todo application, we have three different views:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 通常认为在开始设计之前组织设计过程是一个好的做法。在我们的 Todo 应用程序中，我们有三种不同的视图：
- en: 'Home page to list out all Todos: This is at `http://localhost:3000/todos`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主页列出所有 Todo：这是在 `http://localhost:3000/todos`
- en: 'New Todo forms and Edit Todo forms: They both are the same view, which is reachable
    through two different types of URLs'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新建 Todo 表单和编辑 Todo 表单：它们都是相同的视图，可以通过两种不同类型的 URL 访达
- en: 'Show View Todo: It displays particular TODO details'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示查看 Todo：它显示特定的 TODO 详细信息
- en: 'Let''s begin by styling the Homepage:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从美化主页开始：
- en: Open `styles.css`, which we have recently created. All the styles that we are
    going to write should be written in this file.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们最近创建的 `styles.css` 文件。我们将要编写的所有样式都应该写入此文件。
- en: 'We will first clear the browser default margin and padding using the universal
    selector in CSS (*). So, our CSS for this will be:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先使用 CSS 中的通用选择器 (*) 清除浏览器默认的边距和填充。因此，我们为此的 CSS 将是：
- en: '[PRE8]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s style the title of the page first. If you check out the HTML source
    code of the page, you will see that it is an `H1` element. So, our CSS for this
    will be:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先美化页面的标题。如果你检查页面的 HTML 源代码，你会看到它是一个 `H1` 元素。因此，我们为此的 CSS 将是：
- en: '[PRE9]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding code makes the title appear in the center of the page. It also
    adds a light blue color to it. We have also created some space around it using
    the padding property of CSS. Refresh your page to verify it.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码使标题出现在页面中央。它还添加了浅蓝色。我们还使用 CSS 的填充属性在其周围创建了一些空间。刷新页面以验证它。
- en: 'It''s time to decorate the `table` element. Our CSS for it will be:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是时候装饰 `table` 元素了。我们为此的 CSS 将是：
- en: '[PRE10]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding code makes the table position to the center of the browser. First,
    we applied a width of `800px` to it and then we applied an auto positioned margin
    to it. Since the browser now knows the width of the table element, it will automatically
    divide the extra space on each side of it. This will make our table centered to
    the browser screen. The last property, `text-align` is used to align the text
    present inside the table.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码使表格定位到浏览器中央。首先，我们给它应用了 `800px` 的宽度，然后我们给它应用了自动定位的边距。由于浏览器现在知道了表格元素的宽度，它将自动在它每侧的额外空间中分配。这将使我们的表格在浏览器屏幕中居中。最后一个属性
    `text-align` 用于对齐表格内的文本。
- en: 'Let''s apply some more styles to the elements present inside the table:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在表格内的元素上应用一些更多的样式：
- en: '[PRE11]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding CSS code, we have applied styles to the `td` and `th` elements
    of the table element. We created some space around the text using padding. We
    also applied a border to each cell. It is a solid border of `1px` width and color
    `#888888`.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的CSS代码中，我们已经为表格元素的`td`和`th`元素应用了样式。我们使用填充创建了文本周围的空间。我们还为每个单元格应用了边框。这是一个`1px`宽度和颜色为`#888888`的实线边框。
- en: 'It''s time to design the application''s links. We will try to make them appear
    like a button so that it appears more clickable. Our CSS for it will be:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是时候设计应用程序的链接了。我们将尝试使它们看起来像按钮，以便它们看起来更易于点击。我们的CSS如下：
- en: '[PRE12]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Links `<a>` are inline HTML elements. Hence in the first line, we have made
    it look like a block-level element using the `display` property. Now, we can apply
    width and margin to it. Just like we did to our table element; we will also apply
    a particular width and make all the links appear centered to their parent elements.
    We have also applied a padding of `5px` to create space around the link text.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 链接`<a>`是内联HTML元素。因此，在第一行，我们使用`display`属性使其看起来像一个块级元素。现在，我们可以应用宽度和边距。就像我们对表格元素所做的那样；我们也将应用特定的宽度，并使所有链接都对其父元素居中。我们还为链接文本周围添加了`5px`的填充。
- en: To color the links, we applied background to it, and to make the text appear
    more distinct in this background, we applied a color property to it. We have also
    played with the shadow of the button to make it appear more 3D.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给链接上色，我们应用了背景，并为了使文本在这个背景中更明显，我们为它应用了颜色属性。我们还玩弄了按钮的阴影，使其看起来更有3D效果。
- en: Make sure to refresh the browser screen to see the changes we are continuously
    applying. Hope you are enjoying the process of designing the application.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 确保刷新浏览器屏幕以查看我们持续应用的变化。希望你在设计应用程序的过程中享受这个过程。
- en: 'We have finally designed the home screen. The form is still not styled! Let''s
    do it now:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终设计了主页屏幕。表单还没有被样式化！让我们现在就做：
- en: 'Click on the `New Todo` file and let''s style it:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`New Todo`文件，让我们为其添加样式：
- en: '[PRE13]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We applied proper width to the form and made it appear at the center of the
    screen. We have also given a decent background color to it. Padding and border
    is also applied to make it look more spacious and flat.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们为表单应用了适当的宽度，并使其出现在屏幕中央。我们还给它提供了一个不错的背景颜色。我们还应用了填充和边框，使其看起来更宽敞和平滑。
- en: Next, we have to design the labels and input fields. If you check out the HTML
    source of this page, you will see that every label, and its associated input field,
    is wrapped inside a `div` which has a `field` class. Remember that these classes
    and the HTML structures are not written by us. These have been autogenerated by
    Rails. We are just working with the CSS file.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要设计标签和输入字段。如果你查看这个页面的HTML源代码，你会看到每个标签及其相关的输入字段都被包裹在一个具有`field`类的`div`标签内。记住，这些类和HTML结构不是我们写的。这些是由Rails自动生成的。我们只是在处理CSS文件。
- en: 'Now, we will use the `field` class to apply style to the elements present inside
    the `New Todo` view. Here we will design the label, input field, and `textarea`
    element:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用`field`类来为`New Todo`视图内的元素应用样式。在这里，我们将设计标签、输入字段和`textarea`元素：
- en: '[PRE14]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We applied a decent space inside the `field` with `div` element. Here, we have
    give two different values to the padding property. The first value is for creating
    spaces to the top and bottom, whereas the next value will be used for the left
    and right side.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在`field`中的`div`元素内应用了适当的间隔。在这里，我们给填充属性赋予了两个不同的值。第一个值用于创建顶部和底部的空间，而下一个值将用于左侧和右侧。
- en: Next, we applied style to the label element of the `field` element. We have
    made it appear bold using the `font-weight` property. Lastly, we gave both the
    input fields and `textarea` the same set of CSS styles. We made them look spacious
    using padding. A border property is applied to get rid of the browser default
    border around the input and textarea elements. We also applied border-radius to
    make the corners a little rounded. Finally, we fixed the width of both the textarea
    and input elements so that they appear properly aligned.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着，我们对`field`元素的标签元素应用了样式。我们使用`font-weight`属性使其看起来加粗。最后，我们给输入字段和`textarea`应用了相同的CSS样式。我们通过添加填充来使它们看起来更宽敞。为了去除输入和`textarea`元素周围的浏览器默认边框，我们应用了边框属性。我们还应用了`border-radius`来使角落略微圆润。最后，我们固定了文本区域和输入元素的宽度，以确保它们正确对齐。
- en: 'It''s time to design the last element in this HTML page, the `Create Todo`
    button:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是时候设计这个HTML页面中的最后一个元素了，即`创建待办事项`按钮：
- en: '[PRE15]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Most of the CSS styles that we applied here are similar to what we have applied
    to the input and textarea element. Here, we have added two extra properties, `background`
    and `color` to make it look different and stand out properly in the form.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在这里应用的大多数CSS样式与我们对输入和textarea元素应用的样式相似。在这里，我们添加了两个额外的属性，`background`和`color`，使其看起来不同，并在表单中正确突出显示。
- en: We have successfully designed the `New Todo` and `Edit Todo` pages. We are now
    only left with the `Show Todo` page. So, without any further delay, let's first
    check out the page. Click on the **Show** link.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经成功设计了`新建待办事项`和`编辑待办事项`页面。我们现在只剩下`显示待办事项`页面。所以，不要拖延，让我们首先查看这个页面。点击**显示**链接。
- en: 'Most of the content is already styled by us. We are only left with designing
    the text on this page, the code is as follows:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大部分内容已经被我们样式化。我们只剩下设计这个页面上的文本了，代码如下：
- en: '[PRE16]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We applied a fixed width to the `p` element and made it appear to the center
    of the screen using the margin property. We also applied a decent font size to
    them. Now, let's separate them from each other using the margin and padding properties.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们为`p`元素应用了固定宽度，并使用margin属性使其显示在屏幕中心。我们还为它们应用了一个合适的字体大小。现在，让我们使用margin和padding属性将它们分开。
- en: This page is also shown after the `New Todo` or `Edit Todo` pages with a notice
    at the top. This element has an `id` element, which is used to show the status,
    whether a new `todo` was successfully created or an existing `todo` was successfully
    updated. Using CSS, we have applied style to it. Make sure that you are not giving
    any space between `p` and `#notice` in the preceding CSS code. We are targeting
    the `p` tag, which has an id, `#notice`, so spaces shouldn't be present between
    the selectors.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面也在`新建待办事项`或`编辑待办事项`页面之后显示，顶部有一个通知。此元素有一个`id`元素，用于显示状态，即是否成功创建了一个新的`todo`或成功更新了一个现有的`todo`。我们使用CSS对其应用了样式。请确保在先前的CSS代码中`p`和`#notice`之间没有空格。我们正在针对具有id的`p`标签，即`#notice`，所以选择器之间不应该有空格。
- en: Congrats! We have successfully completed designing the whole application.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们已经成功完成了整个应用程序的设计。
- en: Tip
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你购买的所有Packt书籍的账户中下载示例代码文件。[http://www.packtpub.com](http://www.packtpub.com)。如果你在其他地方购买了这本书，你可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给你。
- en: Challenges in styling a Rails application traditionally
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统上在Rails应用程序中样式的挑战
- en: The application which we have created was so basic that we did not write a single
    line of code for its logic part. We didn't even touch the HTML layout of the application.
    You have seen how complex the CSS styling can be at some places, such as designing
    a link. The CSS which we have written here is very poorly organized. We have a
    target element level selector at many places to apply styles to them. This is
    considered as a very poor way of designing.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的应用程序非常基础，以至于我们没有为其逻辑部分编写任何代码。我们甚至没有触及应用程序的HTML布局。你已经看到了CSS样式在某些地方是多么复杂，例如设计链接。我们在这里编写的CSS组织得非常糟糕。我们在许多地方使用目标元素级别选择器来应用样式，这被认为是一种非常糟糕的设计方式。
- en: Our CSS code was not segregated into various, smaller parts. All the styles
    were written directly in one file, `styles.css`. In the coming chapters, we will
    see how we can use SASS to apply styles to our Rails applications. Using SASS,
    we can bring logic to the CSS codes.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的CSS代码没有分成几个更小的部分。所有的样式都直接写在了一个文件中，`styles.css`。在接下来的章节中，我们将看到如何使用SASS来为我们的Rails应用程序应用样式。使用SASS，我们可以将逻辑引入CSS代码中。
- en: We will also overcome the difficulties of styling each and every element in
    our Rails application using Bootstrap. You will realize how easy it can become
    for a Non-CSS developer to design a high-end application using Bootstrap. You
    won't write a single piece of CSS code when using Bootstrap. Its developers have
    written a bunch of CSS codes for you.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将克服在Rails应用程序中为每个元素进行样式的困难。你会发现，对于非CSS开发者来说，使用Bootstrap设计高端应用程序是多么容易。当你使用Bootstrap时，你甚至不会编写任何CSS代码。它的开发者为你编写了一大堆CSS代码。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The main intention of this chapter, was to brief you on how to develop and design
    a simple Rails application without the help of any CSS frontend frameworks. We
    manually styled the application by creating an external CSS file `styles.css`
    and importing it into the application using another CSS file `application.css`.
    We also discussed the complexities that a novice web designer might face on directly
    styling the application.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目的是向您简要介绍如何在没有任何CSS前端框架的帮助下开发和设计一个简单的Rails应用程序。我们通过创建一个外部CSS文件`styles.css`并将其导入到应用程序中，使用另一个CSS文件`application.css`来手动设置应用程序的样式。我们还讨论了新手网页设计师在直接设置应用程序时可能遇到的一些复杂性。
- en: In the next chapter, we will get our hands dirty with Bootstrap. We will learn
    what it is, and how it can help to design a Rails application quickly. We will
    also learn how to integrate Bootstrap with the Rails application.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始使用Bootstrap。我们将学习它是什么，以及它如何帮助快速设计Rails应用程序。我们还将学习如何将Bootstrap集成到Rails应用程序中。
