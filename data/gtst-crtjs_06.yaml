- en: Chapter 6. Using Filters in EaselJS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。在EaselJS中使用过滤器
- en: One of the great features of CreateJS is the ability to play with filters and
    apply various filters to pictures and shapes easily. CreateJS makes it easy by
    providing a `Filter` class and `filters` property for `DisplayObject`; accordingly,
    we can simply create instances of the `Filter` class and apply them to the objects.
    In this chapter, we will have a look at CreateJS filters and some basic examples
    of working with the `Filter` class.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CreateJS的一个伟大功能是能够轻松地玩转过滤器并将各种过滤器应用于图片和形状。CreateJS通过提供`Filter`类和`DisplayObject`的`filters`属性来实现这一点；因此，我们可以简单地创建`Filter`类的实例并将它们应用于对象。在本章中，我们将查看CreateJS过滤器以及与`Filter`类一起工作的基本示例。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the `Filter` class
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解`Filter`类
- en: How to use built-in EaselJS filters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用内置的EaselJS过滤器
- en: Understanding the Filter class
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解过滤器类
- en: EaselJS comes with a `Filter` class, which is the base class for all other filters,
    and other filter classes should inherit from this class. Filters need to be applied
    to objects that have been cached using the `cache` method; after that, if the
    object gets changed again, we should use the `cache` or `updateCache` methods
    to update the shape.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: EaselJS提供了一个`Filter`类，这是所有其他过滤器的基类，其他过滤器类应该从这个类继承。过滤器需要应用于使用`cache`方法缓存的对象；之后，如果对象再次更改，我们应该使用`cache`或`updateCache`方法来更新形状。
- en: 'The following is an example of applying filters to an object:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将过滤器应用于对象的示例：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the first line, we have created a shape object; in the next line, we have
    created a circle with the color red. The next line contains the filter configurations,
    and in the last line we have cached the object using the `cache` function.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们创建了一个形状对象；在下一行，我们创建了一个红色的圆形。下一行包含过滤器配置，而在最后一行我们使用`cache`函数缓存了对象。
- en: Using the `cache` method in examples with filtering will not only boost performance
    but will also apply the filter to the shape and make it work.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在带有过滤器的示例中使用`cache`方法不仅可以提高性能，还可以将过滤器应用于形状并使其工作。
- en: '![Understanding the Filter class](img/0260OS_06_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![理解过滤器类](img/0260OS_06_01.jpg)'
- en: 'EaselJS contains several basic filters, such as `blur` or `color` filters,
    that you can use easily. Here is a list of built-in filters:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: EaselJS包含几个基本过滤器，如`blur`或`color`过滤器，您可以使用它们。以下是一个内置过滤器的列表：
- en: '`AlphaMapFilter`: This is used to map a grayscale image to the alpha channel
    of a display object.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AlphaMapFilter`：这个用于将灰度图像映射到显示对象的alpha通道。'
- en: '`AlphaMaskFilter`: This is used to map the alpha channel of an image to the
    alpha channel of a display object.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AlphaMaskFilter`：这个用于将图像的alpha通道映射到显示对象的alpha通道。'
- en: '`BlurFilter`: This applies vertical and horizontal blur to a display object.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BlurFilter`：对显示对象应用垂直和水平模糊。'
- en: '`ColorFilter`: This color transforms a display object.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ColorFilter`：这个颜色转换显示对象。'
- en: '`ColorMatrixFilter`: This transforms an image using a `ColorMatrix`.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ColorMatrixFilter`：使用`ColorMatrix`转换图像。'
- en: In the next section, we will discuss all these filters in detail.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将详细讨论所有这些过滤器。
- en: Using the AlphaMapFilter class
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AlphaMapFilter类
- en: The `AlphaMapFilter` is an built-in filter is used for applying a grayscale
    alpha map image (or canvas) to the target. To be clearer, the alpha channel of
    the result will be copied from the red channel of the map and the RGB channels
    will be copied from the target object.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`AlphaMapFilter`是一个内置过滤器，用于将灰度alpha映射图像（或画布）应用于目标。为了更清晰，结果图像的alpha通道将从映射的红通道复制，而RGB通道将从目标对象复制。'
- en: Generally, it is recommended that you use `AlphaMaskFilter`, because it has
    much better performance.
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 通常，建议您使用`AlphaMaskFilter`，因为它具有更好的性能。
- en: 'This has been taken from: [http://www.createjs.com/Docs/EaselJS/classes/AlphaMapFilter.html](http://www.createjs.com/Docs/EaselJS/classes/AlphaMapFilter.html)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从：[http://www.createjs.com/Docs/EaselJS/classes/AlphaMapFilter.html](http://www.createjs.com/Docs/EaselJS/classes/AlphaMapFilter.html)中摘取的。
- en: 'The following code snippet is the definition for this class:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段是该类的定义：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The parameters are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 参数如下：
- en: '`alphaMap` | `Image` | `HTMLCanvasElement`'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`alphaMap` | `Image` | `HTMLCanvasElement`'
- en: We have used the grayscale image or the canvas as the alpha channel. It should
    be of the same dimensions as the target.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了灰度图像或画布作为alpha通道。它应该与目标具有相同的尺寸。
- en: 'The following code is an example of using the `AlphaMapFilter` class:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用`AlphaMapFilter`类的示例代码：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the first few lines of the code, we created a rectangle created with a linear
    gradient and then cached the object using `cache` method. The reason for caching
    the object is to use it in the filter parameters.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的第一行中，我们创建了一个具有线性渐变的矩形，然后使用`cache`方法缓存了对象。缓存对象的原因是将其用于滤镜参数。
- en: Then, we created the `box2` variable; it's our parent shape. This shape is the
    same as the first one, but the gradient color is different. We have changed the
    colors for the start and end of the linear gradient. Afterward, we added `AlphaMapFilter`
    to the `box2` filters and the `box` variable as the parameter of the filter. Then,
    in to order apply the filter to the shape, we cached the shape using the `cache`
    method and added it to the stage.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建了`box2`变量；它是我们的父形状。这个形状与第一个相同，但渐变颜色不同。我们改变了线性渐变的起始和结束颜色。之后，我们将`AlphaMapFilter`添加到`box2`的滤镜中，并将`box`变量作为滤镜的参数。然后，为了将滤镜应用于形状，我们使用`cache`方法缓存了形状并将其添加到舞台中。
- en: 'A preview of the previous example is shown in the following image:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了上一个示例的预览：
- en: '![Using the AlphaMapFilter class](img/0260OS_06_02.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![使用AlphaMapFilter类](img/0260OS_06_02.jpg)'
- en: Using the AlphaMaskFilter class
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AlphaMaskFilter类
- en: This filter is similar in usage to the `AlphaMapFilter` class, but we will briefly
    talk about this filter as well. As per the CreateJS documentation, it's recommended
    that you use this filter instead of `AlphaMapFilter` because it has much better
    performance.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此滤镜的使用方式与`AlphaMapFilter`类相似，但我们将简要讨论此滤镜。根据CreateJS文档，建议您使用此滤镜而不是`AlphaMapFilter`，因为它具有更好的性能。
- en: '`AlphaMaskFilter` applies the alpha mask from the mask image (or canvas) to
    the target. The alpha channel of the result will be derived from the mask, and
    the RGB channels will be copied from the target object.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`AlphaMaskFilter`将来自遮罩图像（或画布）的alpha遮罩应用于目标。结果的alpha通道将来自遮罩，而RGB通道将复制自目标对象。'
- en: 'Here is how we define the `AlphaMaskFilter` class:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们如何定义`AlphaMaskFilter`类的：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The parameters in this code snippet are as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段中的参数如下：
- en: '`mask` | `Image`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`mask` | `Image`'
- en: This class is an instance of the `Image` class.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类是`Image`类的一个实例。
- en: 'Here is an example of using this filter:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用此滤镜的示例：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, the usage of this filter is almost the same as `AlphaMapFilter`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，此滤镜的使用几乎与`AlphaMapFilter`相同。
- en: The example source code is divided into two functions, `init` and `handleimg`.
    In order to load the image properly, we used the `Image` class and the `onload`
    event. We then used the `handleimg` function for the `onload` event callback function.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 示例源代码分为两个函数，`init`和`handleimg`。为了正确加载图像，我们使用了`Image`类和`onload`事件。然后，我们使用`handleimg`函数作为`onload`事件的回调函数。
- en: Inside `init` function, `stage` class is created. We also configured the `Image`
    class and assigned the `handleimg` function to the `onload` event. A major part
    of the example's source code is inside the `handleimg` function. In the first
    few lines, we created a rectangle with a linear gradient background. The reason
    for using the `rgba` function to define color is to change the alpha channel of
    the gradient so that the filter will derive this alpha channel for the final result.
    Finally, we cached the shape using the `cache` method.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在`init`函数内部，创建了`stage`类。我们还配置了`Image`类，并将`handleimg`函数分配给`onload`事件。示例源代码的大部分内容都在`handleimg`函数中。在第一行代码中，我们创建了一个具有线性渐变背景的矩形。使用`rgba`函数定义颜色的原因是为了改变渐变的alpha通道，以便滤镜可以为最终结果提取这个alpha通道。最后，我们使用`cache`方法缓存了形状。
- en: Then, we loaded an image using the `Bitmap` function and also applied it to
    the `bmp` variable with the `filters` property. We also cached this image in order
    to apply the filter changes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`Bitmap`函数加载了一张图片，并将其应用于`bmp`变量的`filters`属性。我们还缓存了这张图片以便应用滤镜变化。
- en: 'The following screenshot illustrates the result of our example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们的示例结果：
- en: '![Using the AlphaMaskFilter class](img/0260OS_06_03.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![使用AlphaMaskFilter类](img/0260OS_06_03.jpg)'
- en: Implementing the BlurFilter class
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现BlurFilter类
- en: The Blur filter is one of usable filters for creating innovative animations
    and drawings. In this section, we will have a discussion about using the `BlurFilter`
    class.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊滤镜是用于创建创新动画和绘图的可用滤镜之一。在本节中，我们将讨论使用`BlurFilter`类。
- en: This filter applies a **blur box** to `DisplayObject`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此滤镜将一个**模糊框**应用于`DisplayObject`。
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This filter is CPU intensive, particularly if the quality is set to higher than
    1.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此过滤器是CPU密集型的，尤其是当质量设置为大于1时。
- en: 'Here is the definition of the `BlurFilter` class and its parameters:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`BlurFilter`类及其参数的定义：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The parameters included in this code snippet are as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段中包含的参数如下：
- en: '`[blurX=0]` | `Number`: It is an optional parameter. It is used to set the
    horizontal blur radius in pixels.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[blurX=0]` | `数值`：这是一个可选参数。它用于设置以像素为单位的水平模糊半径。'
- en: '`[blurY=0]` | `Number`: It is an optional parameter. It is used to set the
    vertical blur radius in pixels.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[blurY=0]` | `数值`：这是一个可选参数。它用于设置以像素为单位的垂直模糊半径。'
- en: '`[quality=1]` | `Number`: It is an optional parameter. It is used to set the
    number of blur iterations.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[quality=1]` | `数值`：这是一个可选参数。它用于设置模糊迭代的次数。'
- en: 'Here is an example of using the Blur filter with a red circle:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用红色圆形应用模糊过滤器的示例：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the first line, we have the `shape` variable, which is the variable for our
    shape, a circle. In the next line, we filled the circle with the red color and
    finished drawing the shape using the `drawCircle` function.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们有`shape`变量，这是我们形状的变量，一个圆形。在下一行，我们用红色填充了圆形，并使用`drawCircle`函数完成了形状的绘制。
- en: Then, we created the blur filter using three parameters and applied it to the
    `shape` object with the `filters` property. In order to find the dimension of
    the caching area, we used the `getBounds` function because, as you know, the blur
    filter has some more padding after applying the `getBounds` function.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用三个参数创建了模糊过滤器，并将其应用于具有`filters`属性的`shape`对象。为了找到缓存区域的尺寸，我们使用了`getBounds`函数，因为你知道，在应用`getBounds`函数之后，模糊过滤器会有一些额外的填充。
- en: '![Implementing the BlurFilter class](img/0260OS_06_04.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![实现`BlurFilter`类](img/0260OS_06_04.jpg)'
- en: Utilizing the ColorFilter class
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`ColorFilter`类
- en: This filter applies a color transform to `DisplayObject`. This filter comes
    handy when you need to play with colors in EaselJS.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此过滤器将颜色转换应用于`DisplayObject`。当你需要在EaselJS中玩转颜色时，此过滤器非常有用。
- en: 'In the following code snippet, you can see the definition of this filter:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，你可以看到此过滤器的定义：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The various parameters in this code snippet are as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段中的各种参数如下：
- en: '`[redMultiplier=1]`– `Number`: It is an optional parameter. It sets the value
    to multiply with the red channel. The value should be between 0 and 1.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[redMultiplier=1]`– `数值`：这是一个可选参数。它设置与红色通道相乘的值。该值应在0和1之间。'
- en: '`[greenMultiplier=1]`– `Number`: It is an optional parameter. It sets the value
    to multiply with the green channel. The value should be between 0 and 1.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[greenMultiplier=1]`– `数值`：这是一个可选参数。它设置与绿色通道相乘的值。该值应在0和1之间。'
- en: '`[blueMultiplier=1]`– `Number`: It is an optional parameter. It sets the value
    to multiply with the blue channel. The value should be between 0 and 1.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[blueMultiplier=1]`– `数值`：这是一个可选参数。它设置与蓝色通道相乘的值。该值应在0和1之间。'
- en: '`[alphaMultiplier=1]`– `Number`: It is an optional parameter. It sets the value
    to multiply with the alpha channel. The value should be between 0 and 1.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[alphaMultiplier=1]`– `数值`：这是一个可选参数。它设置与alpha通道相乘的值。该值应在0和1之间。'
- en: '`[redOffset=0]`– `Number`: It is an optional parameter. It sets the value to
    add to the red channel after it has been multiplied. The value should be between
    -255 and 255.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[redOffset=0]`– `数值`：这是一个可选参数。它设置在红色通道乘以之后要添加的值。该值应在-255和255之间。'
- en: '`[greenOffset=0]`– `Number`: It is an optional parameter. It sets the value
    to add to the green channel after it has been multiplied. The value should be
    between -255 and 255.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[greenOffset=0]`– `数值`：这是一个可选参数。它设置在绿色通道乘以之后要添加的值。该值应在-255和255之间。'
- en: '`[blueOffset=0]`– `Number`: It is an optional parameter. It sets the value
    to add to the blue channel after it has been multiplied. The value should be between
    -255 and 255\.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[blueOffset=0]`– `数值`：这是一个可选参数。它设置在蓝色通道乘以之后要添加的值。该值应在-255和255之间。'
- en: '`[alphaOffset=0]`– `Number`: It is an optional parameter. It sets the value
    to add to the alpha channel after it has been multiplied. The value should be
    between -255 and 255.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[alphaOffset=0]`– `数值`：这是一个可选参数。它设置在alpha通道乘以之后要添加的值。该值应在-255和255之间。'
- en: 'Here is an example of using this filter:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用此过滤器的示例：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, we created a red circle and then changed its color to blue
    using `ColorFilter`. This is done by multiplying all the channels with 0 (except
    for the alpha channel, which is set to 1) and then adding the value 255 to the
    blue channel and 0 to the other channels.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个红色圆圈，然后使用`ColorFilter`将其颜色改为蓝色。这是通过将所有通道乘以0（除了alpha通道，设置为1）然后向蓝色通道添加255，向其他通道添加0来完成的。
- en: '![Utilizing the ColorFilter class](img/0260OS_06_05.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![利用ColorFilter类](img/0260OS_06_05.jpg)'
- en: Using the ColorMatrixFilter class
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ColorMatrixFilter类
- en: With this filter, you can play with complex color operations, such as saturation,
    brightness, or inversion. This filter uses the `ColorMatrix` class to perform
    the action.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个过滤器，你可以玩转复杂的颜色操作，例如饱和度、亮度或反转。这个过滤器使用`ColorMatrix`类来执行操作。
- en: 'The following code snippet defines this class:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段定义了这个类：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The parameters present in this code snippet are as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段中存在的参数如下：
- en: '`matrix– Array`: A 4x5 matrix describing the color operation to perform using
    the `ColorMatrix` class.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matrix– 数组`：一个4x5的矩阵，描述了使用`ColorMatrix`类要执行的颜色操作。'
- en: 'Here is an example of using this filter:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用这个过滤器的例子：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceeding example, we created a red circle and then inverted the hue
    and changed the saturation to 100\. We started by creating the `stage` class in
    the first line. Then, we created a circle using the `drawCircle` function. To
    place the circle in the viewport of the `canvas` element, we used the `set` function
    to change the `x` and `y` values.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们创建了一个红色圆圈，然后反转了色调并将饱和度改为100。我们首先在第一行创建了`stage`类。然后，我们使用`drawCircle`函数创建了一个圆。为了将圆放置在`canvas`元素的视口中，我们使用`set`函数更改了`x`和`y`的值。
- en: Then, we initiated the `matrix` variable using the `ColorMatrix` class. We used
    the `adjustHue` and `adjustSaturation` functions to change the hue and saturation
    of the circle. An acceptable value for `adjustHue` is between -180 to 180\. This
    value for `adjustSaturation` is between -100 and 100\. We set the hue value to
    180 and saturation value to 100 in our example to see the difference better.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`ColorMatrix`类初始化了`matrix`变量。我们使用了`adjustHue`和`adjustSaturation`函数来改变圆的色调和饱和度。`adjustHue`的可接受值在-180到180之间。`adjustSaturation`的值在-100到100之间。在我们的例子中，我们将色调值设置为180，饱和度值设置为100，以便更好地观察差异。
- en: We applied all using the `filter` property of the `shape` variable. Finally,
    we cached the shape using the `cache` method and updated the stage using `update`
    method to apply the changes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用了`shape`变量的`filter`属性的所有功能。最后，我们使用`cache`方法缓存了形状，并使用`update`方法更新阶段以应用这些更改。
- en: '![Using the ColorMatrixFilter class](img/0260OS_06_06.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![使用ColorMatrixFilter类](img/0260OS_06_06.jpg)'
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to use the built-in filters in EaselJS to change
    `DisplayObject` properties such as color, hue, saturation, and so on. We also
    discussed the definition and basic usage of the filters with interactive examples
    and screenshots.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了如何使用EaselJS的内置过滤器来更改`DisplayObject`属性，如颜色、色调、饱和度等。我们还通过交互式示例和截图讨论了过滤器的定义和基本用法。
- en: In the next chapter, we will discuss the creation of a web-based painting application
    using all the methods and functions that we have learned up to now.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何使用我们迄今为止所学到的所有方法和函数创建一个基于网页的绘画应用程序。
