- en: Chapter 7. Bottlenecks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 瓶颈
- en: As we've seen in the previous chapters, a lot of elements influence performance.
    Even the process of development will influence how you monitor performance degradation.
    The patterns you use might not make a difference on a small scale, but after deployment,
    you'll regret every bad decision you made.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的章节中看到的，许多因素影响性能。甚至开发过程也会影响你如何监控性能下降。你使用的模式可能在小规模上没有什么区别，但部署后，你会后悔你所做的每一个错误决定。
- en: The host is also an important performance factor. How well your processor performs
    for your specific tasks is important. How much memory you have available influences
    how much of your data will reside in a fast location or will move to a slower
    location, such as a local disk.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 主机也是一个重要的性能因素。你的处理器对于你特定的任务的表现有多好是很重要的。你有多少可用内存会影响你的数据有多少会驻留在一个快速的位置或者移动到一个较慢的位置，比如本地磁盘。
- en: Caching your data is also of great importance. The technique of accelerating
    data access using some kind of middle storage to give a perception of greater
    speed creates an important illusion of a fast application. Although this might
    seem wrong since it looks like an illusion, it's actually very important if you
    want to stretch performance to the limit.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存你的数据也非常重要。使用某种中间存储加速数据访问的技术，给人一种更快速的感觉，创造了一个快速应用程序的重要幻觉。虽然这可能看起来不对，因为它看起来像是一个幻觉，但如果你想要将性能提升到极限，这实际上是非常重要的。
- en: All of this is important, but there are limits that you cannot pass, or at least
    some that you should know in order to go around and choose a better design pattern.
    Some of these limits are outside your scope and you cannot tweak or control them.
    Others could be minimized if you have the budget and/or time and want to take
    that path. I recommend that you take it, as knowing the surroundings of your application
    will give you a bigger picture of the understanding of how it all works and how
    it could be improved.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都很重要，但有一些限制是你无法突破的，或者至少有一些你应该了解以便绕过并选择更好的设计模式。其中一些限制超出了你的范围，你无法调整或控制它们。其他一些可以在有预算和/或时间的情况下最小化，并且想要选择这条道路。我建议你这样做，因为了解你的应用程序的周围环境将使你更全面地了解它的工作方式以及如何改进它。
- en: Host limits
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主机限制
- en: 'The place where you host your application—the server—has limits. There are
    two types of limits on the host: hardware and software. Hardware limits can be
    easy to spot. Your application might be consuming all of the memory and needing
    to consume disk to continue working. Adding more memory by upgrading your host,
    whether physical or virtual, seems to be the right choice.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你托管应用程序的地方——服务器——有限制。主机上有两种类型的限制：硬件和软件。硬件限制可能很容易发现。你的应用程序可能会消耗所有内存并需要使用磁盘继续工作。通过升级主机的内存，无论是物理的还是虚拟的，似乎是正确的选择。
- en: 'For Node.js applications you also have a software memory limit imposed by V8,
    so don''t forget about this when upgrading your memory banks. As a 32-bit environment
    has a limit of more or less 3.5 GB, I''m assuming that you''re upgrading memory
    in a 64-bit environment. In this case, your application would be running by default
    at a 1 GB V8 limit. You then need to run your application with a higher limit
    by starting it in a way similar to the following command:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Node.js应用程序，你还有一个由V8强加的软件内存限制，所以在升级内存时不要忘记这一点。在32位环境中，限制大约为3.5GB，我假设你在64位环境中升级内存。在这种情况下，你的应用程序默认会以1GB的V8限制运行。然后你需要以类似以下命令的方式启动你的应用程序来以更高的限制运行：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This would run `application.js` with a 4 GB memory limit. This is actually not
    recommended. You have probably chosen a design pattern that is not suitable for
    the task, and you should try to split your application into smaller services.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这将以4GB内存限制运行`application.js`。这实际上是不推荐的。你可能选择了一个不适合任务的设计模式，你应该尝试将你的应用拆分成更小的服务。
- en: When you don't control your production environment other restrictions might
    apply, such as the inability to install a software dependency or upgrade a library
    to fix a security or performance issue. If you don't control the environment from
    top to bottom, you're not stretching its limits.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当你无法控制你的生产环境时，可能会有其他限制，比如无法安装软件依赖项或升级库以修复安全或性能问题。如果你无法从头到尾控制环境，你就无法挑战其极限。
- en: Operating systems and database servers usually come with predefined values for
    moderated usage. This is usually fine for the average user, but definitely not
    enough for the power user.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统和数据库服务器通常都预设了适度使用的数值。这通常对于普通用户来说是可以的，但对于高级用户来说绝对不够。
- en: A simple example is the maximum number of open file descriptors for each process.
    A socket is a file descriptor, and if you use the default 1024 limit it means
    that at most you'll probably have 1,000 open clients connected. I'm being generous;
    I'm talking about a Linux machine. If you look at OS X, you will have a worse
    scenario.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的例子是每个进程的最大打开文件描述符数。套接字是一个文件描述符，如果你使用默认的1024限制，这意味着最多你可能会有1000个打开的客户端连接。我很慷慨；我说的是一个Linux机器。如果你看看OS
    X，情况会更糟。
- en: 'Similar to this limit, and looking at Linux in particular, you can check out
    the other limits that definitely influence your application. Look at the manual
    and see what options you might want to tweak. The following is an example of the
    limits and defaults you may find in a Linux system:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于这个限制，特别是看看Linux，你可以查看其他明显影响你的应用程序的限制。查看手册，看看你可能想要调整的选项。以下是你可能在Linux系统中找到的限制和默认值的示例：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are other methods and options that you can change and optimize for your
    application. I'm talking about kernel parameters. You can look at them and change
    them using the `sysctl` command.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他方法和选项可以为你的应用程序进行更改和优化。我说的是内核参数。你可以查看它们并使用`sysctl`命令进行更改。
- en: You can tweak areas such as the filesystem, network timings and routing, the
    virtual memory behavior, and the kernel itself, like processor scheduling and
    reaction to hanging tasks.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以调整诸如文件系统、网络时间和路由、虚拟内存行为以及内核本身，如处理器调度和对挂起任务的反应等领域。
- en: 'Here''s a small list showing just a fraction of the options:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个小列表，只显示了一小部分选项：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As mentioned before, it's not just the operating system that can be badly optimized
    for your use case. Services usually come with a simple default configuration that
    is not targeted at performance.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，不仅操作系统可能对你的用例进行糟糕的优化。服务通常带有一个简单的默认配置，不针对性能而设计。
- en: MySQL database servers can have some weird configuration parameters, such as
    `innodb_flush_log_at_trx_commit`, which defaults to `1`. This means that every
    transaction triggers a flush to disk (to save the transaction). If you have 100
    transactions per second, it means your disk will heat and degrade performance
    by issuing 100 flushes per second.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL数据库服务器可能有一些奇怪的配置参数，比如`innodb_flush_log_at_trx_commit`，默认为`1`。这意味着每个事务都会触发一次刷新到磁盘（保存事务）。如果你每秒有100个事务，那么你的磁盘将会发热，并通过发出100次刷新来降低性能。
- en: Instead, you would want to ensure that this configuration is `2`, which means
    that disk flush is done at most once per second. This configuration does not ensure
    ACID ([https://en.wikipedia.org/wiki/ACID](https://en.wikipedia.org/wiki/ACID))
    compliance, but I think you'll thank me later. Performance comes at a cost, and
    in this case, an uninterruptible power supply is required.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你可能希望确保此配置为`2`，这意味着磁盘刷新最多每秒执行一次。这个配置不能确保ACID（[https://en.wikipedia.org/wiki/ACID](https://en.wikipedia.org/wiki/ACID)）合规性，但我想你以后会感谢我的。性能是有代价的，在这种情况下，需要不间断的电源供应。
- en: Another configuration you must watch out for is the memory used by the operative
    system and all the services involved in your application. For instance, taking
    the MySQL server, you must ensure that it doesn't consume all of the memory and
    leaves some for your other services. This avoids swaps and ensures that it runs
    smoothly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个你必须注意的配置是操作系统和应用程序中涉及的所有服务使用的内存。例如，以MySQL服务器为例，你必须确保它不会消耗所有内存，留一些给其他服务。这可以避免交换并确保其正常运行。
- en: Network limits
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络限制
- en: The network is nowadays the de facto transport method for accessing applications.
    As the Internet of Things becomes more of a reality, even common desktop applications,
    such as office productivity tools, are moving to the cloud. You probably didn't
    ever develop a traditional desktop application.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 网络现在是访问应用程序的事实上的传输方法。随着物联网变得更加现实，甚至常见的桌面应用程序，如办公生产工具，也在转移到云端。你可能从未开发过传统的桌面应用程序。
- en: 'Cloud applications give you many advantages over traditional ones, such as
    the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 云应用程序相对于传统应用程序给你很多优势，比如以下：
- en: Easier deployments. Since the application is located in one or more central
    points, it's simpler to fix a bug or add a feature to all of your user base.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易的部署。由于应用程序位于一个或多个中心点，修复错误或向所有用户添加功能更加简单。
- en: License enforcements. As the application is not installed in the user's computer
    and you control the host, you can block its usage or control the quality of service.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许可证执行。由于应用程序没有安装在用户的计算机上，你可以阻止其使用或控制服务质量。
- en: Proper environment. Because you control the host, you ensure that it has a proper
    processor and enough memory and disk space to operate as it should.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适当的环境。因为你控制主机，你可以确保它有适当的处理器、足够的内存和磁盘空间来正常运行。
- en: 'All of these are very good pros, but what about the cons? Well, for every advantage,
    there''s usually a disadvantage. It''s not good or bad; it just depends on what
    you prefer. Taking the previous list, we can enumerate the counterparts:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都是非常好的优点，但缺点呢？对于每个优势，通常都有一个劣势。它不是好或坏，只取决于你的偏好。以前的列表，我们可以列举出相应的对应项：
- en: Deployments must be made with care, as a server contains sensitive data and
    it is the only way to use your application. Do you accept Gmail being offline
    for 15 minutes? To guarantee a proper deployment, you need proper infrastructure
    with data duplicated to ensure that you can remove servers from the network pool,
    update them, and redeploy them again.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署必须小心进行，因为服务器包含敏感数据，也是使用你的应用程序的唯一途径。你接受Gmail离线15分钟吗？为了保证正确的部署，你需要适当的基础设施，数据重复以确保你可以从网络池中移除服务器，更新它们，然后重新部署它们。
- en: Enforcing a license means that you keep a service online and no downtime is
    accepted. Similarly, you may need to ensure a billing system while the user is
    using the application. This is the opposite of a common desktop application, where
    you pay once and then forget about it.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制许可证意味着你保持服务在线，不接受停机。同样，你可能需要在用户使用应用程序时确保一个计费系统。这与常见的桌面应用程序相反，你只需支付一次，然后忘记它。
- en: Adapting application to multiple environments. Supporting all major browser
    vendors is not easy. With this comes the user's assumption that your application
    must have a mobile-friendly alternative, which usually doesn't exist in a desktop
    version.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适应多个环境的应用程序。支持所有主要浏览器供应商并不容易。随之而来的是用户的假设，即你的应用程序必须有一个移动友好的替代方案，通常在桌面版本中不存在。
- en: There are a lot of market offers (free and paid) to "convert" your web application
    into a desktop application if you prefer the advantages of not moving your application
    to the cloud.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多市场提供（免费和付费）可以将你的Web应用程序“转换”为桌面应用程序，如果你更喜欢不将你的应用程序转移到云端的优势。
- en: Applications now prefer to reside in the cloud. Their advantages usually surpass
    those of desktop applications, and there's something important mentioned in the
    advantages—licensing. The cloud gives you the "as a service" opportunity, which
    you usually don't have in a traditional application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用程序更喜欢驻留在云端。它们的优势通常超过了桌面应用程序的优势，并且在优势中提到了一个重要的事情——许可证。云端给了你“作为服务”的机会，这通常在传统应用程序中是没有的。
- en: 'With the cloud come a lot of hard work and troubles. You need to register your
    own domain, pay for a dedicated or shared host, and deploy your application. If
    you''re developing a big application and want to live up to your promises, you
    need more than that: hardware, a network link with a good quality of service,
    a support team, a backup plan, and so on.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 随着云计算的发展，会带来大量的辛苦和麻烦。您需要注册自己的域名，支付专用或共享主机的费用，并部署您的应用程序。如果您正在开发一个大型应用程序并希望信守承诺，您需要更多：硬件、具有良好服务质量的网络连接、支持团队、备份计划等等。
- en: 'No matter what you choose, there are limits you should be aware of. You probably
    know them but this is never reflected. You have limits such as these:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您选择什么，都应该意识到存在一些限制。您可能知道它们，但这从未反映出来。您有诸如以下的限制：
- en: Responsiveness. When the user interacts using the application interface, it
    might feel slow, as the interface is being downloaded from the cloud as the user
    is using the interface. This responsiveness can be improved if you cache the interface
    in the user's computer. Caching means that sometimes the user might be looking
    at an old interface, but that might not be as critical as getting a fast user
    experience. There are standards for doing this. Take a look at the Offline Web
    Applications section of the HTML standard as an example.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应速度。当用户使用应用程序界面进行交互时，可能会感觉很慢，因为用户在使用界面时，界面正在从云端下载。如果您在用户的计算机上缓存界面，可以改善这种响应速度。缓存意味着有时用户可能会看到旧界面，但这可能并不像获得快速用户体验那样关键。有关此方面的标准，请参阅HTML标准的离线Web应用程序部分。
- en: Data access, when a user interacts with a more data-intensive interface. Sometimes,
    part of the slowness of the interface is related to your server collecting data
    from the database and sending it through the network. You can also use a cache,
    but you may have to be more careful because interface caching is one thing and
    data caching is another. People can tolerate one or two hours with an old interface,
    but not with old data.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据访问，当用户与更加数据密集的界面进行交互时。有时，界面的缓慢与服务器从数据库中收集数据并通过网络发送有关。您也可以使用缓存，但您可能需要更加小心，因为界面缓存和数据缓存是两回事。人们可以容忍旧界面一两个小时，但不能容忍旧数据。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Security is critical. Offer HTTPS access to your users so that they can feel
    comfortable about their privacy.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性至关重要。为您的用户提供HTTPS访问，以便他们可以放心其隐私。
- en: Apart from these limits, there are security issues that reduce performance.
    For example, in terms of privacy you have to choose HTTPS, which means a good
    certificate and good server configuration to avoid poor ciphers. This in turn
    means that some users might be unable to access the application, and data exchange
    between the server and the client will be a bit slower.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些限制之外，还有安全问题会影响性能。例如，就隐私而言，您必须选择HTTPS，这意味着需要一个良好的证书和良好的服务器配置，以避免使用较差的密码。这反过来意味着一些用户可能无法访问该应用程序，服务器和客户端之间的数据交换会变得稍慢一些。
- en: This is a requirement if you want to ensure that the data being transferred
    from the server to the end user is not compromised. However, this is actually
    not enough because the user must also have an up-to-date browser and a good configuration.
    There have been a lot of SSL weaknesses found recently, and they can be avoided
    by updating the browser.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想确保从服务器传输到最终用户的数据不会被篡改，这是一个要求。然而，这其实还不够，因为用户还必须拥有最新的浏览器和良好的配置。最近发现了许多SSL漏洞，可以通过更新浏览器来避免。
- en: Networking was not designed to be secure; it was designed with the assumption
    that everyone has good intentions, which is definitely wrong. When your users
    access your application using a public hotspot (from a coffee shop, a mall, or
    an airport), they're vulnerable to privacy issues. Attackers can sniff the network
    traffic and try to find a password or attach themselves to an open session and
    be able to impersonate a user.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 网络并不是为了安全而设计的；它是基于每个人都怀有良好意图的假设而设计的，这显然是错误的。当用户使用公共热点（来自咖啡店、商场或机场）访问您的应用程序时，他们容易受到隐私问题的影响。攻击者可以嗅探网络流量，并尝试找到密码或附加到一个开放的会话中，并能够冒充用户。
- en: Getting a secure connection is important, but it might reduce performance and
    also the number of users that each of your servers can handle. This can be the
    cost of security. Think that HTTPS is always slower? Try [http://www.httpvshttps.com/](http://www.httpvshttps.com/).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 获得安全连接很重要，但可能会降低性能，也可能降低每台服务器可以处理的用户数量。这可能是安全的代价。认为HTTPS总是更慢的吗？试试[http://www.httpvshttps.com/](http://www.httpvshttps.com/)。
- en: Also, don't forget about your database. Ensure that you don't have any default
    password and you only allow access from your application (don't give access to
    everyone on the Internet).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，不要忘记您的数据库。确保您没有使用默认密码，并且只允许应用程序访问（不要向互联网上的所有人开放访问）。
- en: Security does not end here. As your application is a known network location,
    you can be the victim of an attack. Perhaps you think that putting the server
    behind a firewall and just redirecting traffic to the ports that the users need
    (such as HTTP and HTTPS) is enough, but don't forget **Denial of Service** (**DoS**)
    attacks. An attacker with an attack network can bring your application down by
    just forcing it to be so busy with them that real users won't be able to access
    and use it. This gives them a perception of poor performance and is something
    you can't avoid.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性并不仅止于此。由于您的应用程序是一个已知的网络位置，您可能会成为攻击的受害者。也许您认为将服务器放在防火墙后，并将流量重定向到用户所需的端口（如HTTP和HTTPS）就足够了，但不要忘记**拒绝服务**（**DoS**）攻击。一个拥有攻击网络的攻击者可以通过迫使应用程序忙于处理攻击而使其无法访问和使用，从而使真实用户无法访问和使用应用程序。这会给他们一种性能不佳的感觉，这是您无法避免的。
- en: For example, GitHub faced an attack from China in March 2015\. It lasted a few
    days. They couldn't avoid it and could only mitigate it by trying to deflect the
    traffic. Some people were greatly affected. As your application becomes bigger,
    more attackers may be interested in your information or just in denying access
    to it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，GitHub在2015年3月遭受了来自中国的攻击。持续了几天。他们无法避免，只能试图转移流量来减轻影响。一些人受到了严重影响。随着你的应用程序变得越来越大，可能会有更多的攻击者对你的信息感兴趣，或者只是想拒绝访问。
- en: Client limits
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端限制
- en: Clients also have limits. They may be using an operating system that you don't
    know or can't be sure about. This also applies to the browser, the applications
    installed, and even the location.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端也有限制。他们可能使用你不了解或不能确定的操作系统。这也适用于浏览器、安装的应用程序，甚至位置。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Never trust the user agent sent by browsers. Also, don't ever infer any information
    from it. It can be forged to be anything. A laptop can mimic a Nokia phone from
    the last century very easily—no hacking is necessary!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要相信浏览器发送的用户代理。也不要从中推断任何信息。它可以伪造成任何东西。一台笔记本电脑可以非常容易地模拟上个世纪的诺基亚手机——不需要任何黑客技术！
- en: 'This is something every developer must observe as a rule: never trust the client.
    I''m not saying this in a bad way, but you have to be sure of the information
    you have. For example, your interface has validations in forms and you''re sure
    that they validate correctly before submitting, right? Wrong! Never trust the
    client.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是每个开发者必须遵守的规则：永远不要相信客户端。我并不是以一种贬义的方式说这个，但你必须确信你所拥有的信息。例如，你的界面在表单中有验证，并且在提交之前你确信它们验证正确，对吗？错！永远不要相信客户端。
- en: Also, never trust the link between the client and you. Validate information
    again on the server side. If possible, by using Node.js, use the same code to
    validate on both sides and avoid duplicated code. For example, you can use some
    code to validate a form in a web view and that code can also be used in the server.
    Don't forget! Node.js is JavaScript. If it's a complex piece of code or module,
    you may want to look at browserify ([http://browserify.org/](http://browserify.org/)).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，永远不要相信客户端和你之间的链接。在服务器端再次验证信息。如果可能的话，使用Node.js，在双方使用相同的代码进行验证，并避免重复的代码。例如，你可以使用一些代码在Web视图中验证一个表单，这些代码也可以在服务器上使用。不要忘记！Node.js是JavaScript。如果它是一个复杂的代码或模块，你可能需要查看browserify（[http://browserify.org/](http://browserify.org/)）。
- en: Form validations should be done on both sides to give a perception of performance
    and to actually avoid common errors. You shouldn't validate everything on the
    client, but at least check whether a currency field actually has a number and
    not text, and confirm that all the required fields have proper values. This reduces
    the round trips of submitting to the server and the server replying back with
    an error.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 表单验证应该在双方进行，以给人一种性能感知，并实际上避免常见错误。你不应该在客户端验证所有东西，但至少要检查货币字段是否实际上是数字而不是文本，并确认所有必填字段是否有适当的值。这样可以减少向服务器提交的往返次数，以及服务器回复错误的次数。
- en: Apart from the limits of the application, there are limits outside that you
    can't control. The user will always blame you, and perhaps it's not your application's
    fault most of the time. Are you prepared for an intermittent connection for a
    client from a cellular network? I'm not referring to 3G, because this can be stable
    enough. I'm referring to GPRS connections.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 除了应用程序的限制之外，还有一些你无法控制的外部限制。用户总是会责怪你，也许大部分时间并不是你的应用程序的错。你准备好应对来自蜂窝网络的客户端的间歇性连接了吗？我不是指3G，因为这可能足够稳定。我指的是GPRS连接。
- en: Do you have a full-blown application for a cellphone that does not have a more
    than 300-pixel wide screen and behaves like my TI-83 from high school? Are you
    expecting that everyone will use the latest cellphone with a huge screen and more
    processor power than your netbook? It's here that the sense of performance is
    noticed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否有一个适用于没有超过300像素宽屏幕并且行为类似于我高中时期的TI-83的手机应用程序？你是否期望每个人都会使用具有巨大屏幕和比你的上网本更多处理器性能的最新手机？这里就是性能感知的地方。
- en: A huge application can bring down a weaker cellphone just by rendering the interface.
    A cheap processor will have a hard time rendering all the elements and running
    all of the JavaScript in your application. It will be a challenge for it to render
    on a small screen. Therefore, it's better to have a completely different interface
    for this type of screen and simply use an adaptive interface for smaller differences.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一个庞大的应用程序可能会使一部性能较弱的手机崩溃，只是因为渲染界面。一个廉价的处理器将很难渲染所有元素并运行你的应用程序中的所有JavaScript。它将很难在小屏幕上进行渲染。因此，最好为这种类型的屏幕拥有完全不同的界面，并且只是对较小的差异使用自适应界面。
- en: The user accepts a different interface because they are actually interfacing
    with the application in a different way. They are probably using a finger on a
    cellphone and a mouse or a couple of fingers on a tablet or a laptop. Also, the
    distance between the eyes and the screen is different, hence the resolution difference.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 用户接受不同的界面，因为他们实际上是以不同的方式与应用程序进行交互。他们可能在手机上使用手指，在平板电脑或笔记本电脑上使用鼠标或几根手指。此外，眼睛和屏幕之间的距离也不同，因此分辨率也不同。
- en: Because of this and to target the best performance possible, you should bring
    forth a simpler interface. Remove clutter-like information that the user will
    probably not need, for example, in a cellphone. Keep only the important actions.
    If possible, cache the interface for a better sense of performance. It's better
    to see a spinning wheel than a blank screen with no progress information.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了达到最佳性能，你应该提供一个更简单的界面。删除用户可能不需要的混乱信息，例如在手机上。只保留重要的操作。如果可能的话，缓存界面以获得更好的性能感知。看到一个旋转的圆圈要比看到一个没有进度信息的空白屏幕要好。
- en: Nowadays, the Web gives you choices. You can use different types of devices
    with different systems and web browsers. This is good for the user but horrible
    for the developer. It's a fragmentation that forces applications to be developed
    with only a couple of targets in mind and not all of the market.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，网络给了你选择。你可以使用不同类型的设备和不同的系统和网络浏览器。这对用户来说是好事，但对开发者来说是可怕的。这是一种碎片化，迫使应用程序只针对少数目标进行开发，而不是全部市场。
- en: You need to focus on the main target of the application and develop the best
    interface for it. You can then move your focus to other environments, such as
    the smaller screens on cellphones and watches. Don't make an application that
    can run on all screens but isn't the best on any of them.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要专注于应用程序的主要目标，并为其开发最佳界面。然后你可以将注意力转移到其他环境，比如手机和手表上的小屏幕。不要开发一个可以在所有屏幕上运行但在任何屏幕上都不是最佳的应用程序。
- en: A few years ago, applications were copied to all screens, which was actually
    dumb. People use different devices with different goals in mind. For example,
    people won't want to create a task list on a cellphone, but will probably want
    to check it and mark it as complete. This means that you can have in place a much
    smaller application to do exactly what the user wants, avoiding excessive information
    and the risk of slowing down interaction and degrading experience.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，应用程序被复制到所有屏幕上，这实际上是愚蠢的。人们使用不同的设备来实现不同的目标。例如，人们不会想在手机上创建任务列表，但可能会想要查看并标记为完成。这意味着你可以建立一个更小的应用程序来满足用户的需求，避免过多的信息和减慢交互和降低体验的风险。
- en: Browser limits
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器限制
- en: Browser vendors are merging efforts to make the lives of developers easier.
    A few years ago, it was hell to develop a web application for several browsers.
    You would usually focus on one or two of them. If you focused on more, your code
    would get a lot more complicated and performance would be compromised. Usually,
    applications would become slower with time and with newer browser versions.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器供应商正在合并努力，使开发者的生活更轻松。几年前，为多个浏览器开发Web应用程序是一件苦差事。你通常会专注于其中一个或两个。如果你专注于更多，你的代码会变得更加复杂，性能会受到影响。通常，随着时间的推移和新的浏览器版本，应用程序会变得更慢。
- en: Nowadays, it's safer to develop an application in only one browser. Most of
    the application, if not all—depending on what abstraction you used for the DOM
    (jQuery is the best example)—will run just fine on other browsers. You can then
    make a couple of improvements, and you will have an application running smoothly
    on every browser.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只在一个浏览器中开发应用程序更安全。大多数应用程序，如果不是全部——取决于你用于DOM的抽象（jQuery是最好的例子）——都会在其他浏览器上正常运行。然后你可以进行一些改进，你的应用程序将在每个浏览器上顺畅运行。
- en: Keeping these abstraction layers up to date is important to avoid deprecated
    and slower code. Browsers tend to release versions more often and bring newer
    developer interfaces that those abstractions take advantage of.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 保持这些抽象层的最新状态是重要的，以避免过时和更慢的代码。浏览器往往会更频繁地发布版本，并带来新的开发者接口，这些抽象可以利用。
- en: '![Browser limits](img/4183_07_01.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![浏览器限制](img/4183_07_01.jpg)'
- en: The preceding screenshot is a `jsperf` testing some versions of jQuery. The
    versions are not actually the latest ones, but it doesn't matter. Take it with
    a grain of salt. As you can see, the newer versions perform better—not always,
    but this is usually true. You can see how, in this example, the performance of
    the oldest version is 77 percent worse than the newest one.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图是一个`jsperf`测试一些版本的jQuery。这些版本实际上并不是最新的，但这并不重要。你可以看到，新版本的性能更好——并不总是如此，但通常是如此。你可以看到，在这个例子中，最旧版本的性能比最新版本差了77%。
- en: Performance variables
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能变量
- en: 'Performance should be seen as a mixture of choices and variables that you should
    adjust depending on your needs. Here are some variables you should consider:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 性能应该被视为一系列选择和变量，你应该根据自己的需求进行调整。以下是一些你应该考虑的变量：
- en: Choose the best or second best platform. Remember that the best one could potentially
    not be the best for you.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择最好或次好的平台。记住最好的可能不一定适合你。
- en: Define your data structure and choose your database server wisely. Think big
    and plan how you'll react to fast data growth.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 明确定义你的数据结构并明智选择你的数据库服务器。放眼未来，计划如何应对快速数据增长。
- en: Plan your application's modules and don't forget about making tests to every
    module. Create a developing environment that can be replicated in order for it
    to be easier for new developers to start programming faster.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划你的应用程序模块，不要忘记对每个模块进行测试。创建一个可以复制的开发环境，以便新开发者可以更快地开始编程。
- en: Choose a target environment and start developing. Don't start developing for
    every device and browser.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个目标环境并开始开发。不要为每个设备和浏览器开始开发。
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Your application's performance is not constrained by your code and database
    choices. There are limitations that you must be aware of in order to choose the
    best path for your application. These are just external elements of your application
    that influence its performance, but there are others as well.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序的性能不受你的代码和数据库选择的限制。有一些限制你必须意识到，以便为你的应用程序选择最佳路径。这些只是影响性能的应用程序的外部元素，但也有其他因素。
- en: The most important rule—you shouldn't forget it—is to plan your steps. Don't
    develop without thinking properly about this. A bad choice will make your life
    harder later on when you have to fix it. It's better to lose an hour thinking
    than a week fixing. That's actually part of your own development performance.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的规则——你不应该忘记的是规划你的步骤。不要在没有好好考虑的情况下进行开发。一个糟糕的选择会在以后修复时让你的生活变得更加困难。花一个小时思考要比花一周修复要好。这实际上是你自己发展表现的一部分。
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为Bentham Chang准备，Safari ID为bentham@gmail.com 用户编号：2843974 © 2015 Safari Books
    Online，LLC。此下载文件仅供个人使用，并受到服务条款的约束。任何其他用途均需版权所有者的事先书面同意。未经授权的使用、复制和/或分发严格禁止并违反适用法律。保留所有权利。
