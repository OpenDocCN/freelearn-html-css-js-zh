- en: Chapter 9. Unit Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 单元测试
- en: We have come this far but haven't done any testing! That's not very good, is
    it? Usually, if not always, testing is a major concern in software development.
    In this chapter, we will cover unit testing concepts with Node.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经走了这么远，但还没有做任何测试！这不太好，是吗？通常，如果不是总是，测试是软件开发中的一个主要关注点。在本章中，我们将介绍Node的单元测试概念。
- en: There are many testing frameworks for Node.js and in this chapter we will be
    covering Mocha.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js有许多测试框架，在本章中我们将介绍Mocha。
- en: Installing mocha
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装mocha
- en: 'To ensure that `mocha` gets installed everywhere, we need to install it globally.
    This can be done using the `-g` flag with `npm install`:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保`mocha`在所有地方都安装了，我们需要全局安装它。这可以使用`npm install`的`-g`标志来完成：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, we can use Mocha through the terminal console.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过终端控制台使用Mocha。
- en: Typically, we will contain all our testing code in a `test` sub-directory within
    the project. All we need to do to get our code running is run `mocha`, assuming
    we have written some tests first.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们将所有测试代码放在项目的`test`子目录中。我们只需要运行`mocha`，假设我们首先编写了一些测试，就可以运行我们的代码。
- en: As with many (if not all) unit testing frameworks, Mocha uses assertions to
    ensure that a test runs correctly. If an error is thrown and is not handled then
    the test is considered to have failed. What assertion libraries do is throw errors
    when an unexpected value is passed, so this works well.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多（如果不是所有）单元测试框架一样，Mocha使用断言来确保测试正确运行。如果抛出错误并且没有处理，那么测试被认为是失败的。断言库的作用是在传递意外值时抛出错误，因此这很有效。
- en: 'Node.js provides a simple assertion module, let''s have a look at the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js提供了一个简单的断言模块，让我们来看一下：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As we can see, an error is thrown if the assertion doesn''t pass. However,
    the error message provided wasn''t very handy; to fix this we can pass an error
    message as well:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，如果断言不通过，就会抛出错误。但是，提供的错误消息并不是很方便；为了解决这个问题，我们也可以传递错误消息：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With this we can create a test.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们就可以创建一个测试。
- en: Mocha provides many ways of creating tests, these are called *interfaces* and
    the default is called BDD.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Mocha提供了许多创建测试的方法，这些方法称为*接口*，默认的称为BDD。
- en: You can view all interfaces at [http://mochajs.org/#interfaces](http://mochajs.org/#interfaces).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://mochajs.org/#interfaces](http://mochajs.org/#interfaces)上查看所有接口。
- en: The **BDD** (**Behavior Driven Development**) interface can be compared to Gherkin
    where we specify a feature and a set of scenarios. It provides methods to help
    define these sets, `describe` or `context` is used to define a feature, and the
    `it` or `specify` functions are used to define a scenario.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**BDD**（行为驱动开发）接口可以与Gherkin进行比较，其中我们指定一个功能和一组场景。它提供了帮助定义这些集合的方法，`describe`或`context`用于定义一个功能，`it`或`specify`函数用于定义一个场景。'
- en: 'For example, if we were to have a function that joins someone''s first and
    last name, the tests might look something like the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有一个函数，用于连接某人的名和姓，测试可能看起来像下面这样：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can also add a few more tests for this; for example, if it threw an error
    in case of no object being passed:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以为此添加一些其他测试；例如，如果没有传递对象，则会引发错误：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can explore many more mocha-specific features at [http://mochajs.org/](http://mochajs.org/).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://mochajs.org/](http://mochajs.org/)上探索更多mocha特定的功能。
- en: Chai
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chai
- en: Along with the many testing frameworks, there are also many assertion frameworks,
    one of which is called **Chai**. Complete documentation can be found at [http://chaijs.com/](http://chaijs.com/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了许多测试框架之外，还有许多断言框架，其中之一称为**Chai**。完整的文档可以在[http://chaijs.com/](http://chaijs.com/)找到。
- en: Instead of just using the built-in assertion module provided by Node.js, we
    may want to use a module such as Chai to extend our possibilities.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不要使用Node.js提供的内置断言模块，我们可能想要使用Chai等模块来扩展我们的可能性。
- en: Chai has three sets of interfaces, should, expect, and assert. In this chapter,
    we will be covering expect.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Chai有三组接口，should，expect和assert。在本章中，我们将介绍expect。
- en: 'When using expect, you are using natural language to describe what you want;
    for example, if you want something to exist, you can say, `expect( x ).to.exist`
    rather than `assert( !!x )`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用expect时，您使用自然语言描述您想要的内容；例如，如果您想要某物存在，可以说`expect( x ).to.exist`而不是`assert(
    !!x )`：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using natural language makes things a lot clearer for people reading your tests.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自然语言使得阅读您的测试变得更加清晰。
- en: 'This language can be linked together; we have `to`, `be`, `been`, `is`, `that`,
    `which`, `and`, `has`, `have`, `with`, `at`, `of`, and `same`, which can help
    us to build sentences like:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语言可以链接在一起；我们有`to`，`be`，`been`，`is`，`that`，`which`，`and`，`has`，`have`，`with`，`at`，`of`和`same`，这些可以帮助我们构建句子，比如：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: However, these words are only for reliability and they don't modify the result.
    There are a lot of other words that can be used to assert things, such as `not`,
    `exists`, `ok`, and many more. You can view them all at [http://chaijs.com/api/bdd/](http://chaijs.com/api/bdd/).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这些词只是用于可靠性，它们不会修改结果。还有很多其他词可以用来断言事物，比如`not`，`exists`，`ok`等等。您可以在[http://chaijs.com/api/bdd/](http://chaijs.com/api/bdd/)上查看它们。
- en: 'Some examples of chai in use are:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: chai的一些用法示例包括：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Stubbing methods
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存根方法
- en: '*If it looks like a duck, swims like a duck, and quacks like a duck, then it
    probably is a duck*.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果它看起来像一只鸭子，游泳像一只鸭子，嘎嘎叫像一只鸭子，那么它可能就是一只鸭子*。'
- en: As you write your tests you want to be only be testing `units` of code. Generally
    this will be a method, provide it some input, and expect an output of some kind,
    or if it is a `void` function, expect nothing to be returned.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写测试时，您只想测试代码的“单元”。通常这将是一个方法，为其提供一些输入，并期望得到某种输出，或者如果它是一个“void”函数，则期望不返回任何内容。
- en: With this in mind, you have to think of your application as being in a sandboxed
    state where it can't talk to the outside world. For example, it might not be able
    to talk to a database or make any kind of external request. Having this assumption
    is great if you are going to (and you usually should) implement continuous integration
    and deployment. It also means that there are no external requirements for the
    machine you are testing on except for Node.js and the testing framework, which
    could just be a part of your package anyway.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个想法，你必须把你的应用程序看作处于沙盒状态，不能与外部世界交流。例如，它可能无法与数据库通信或进行任何外部请求。如果你要（通常应该）实现持续集成和部署，这种假设是很好的。这也意味着在测试的机器上除了Node.js和测试框架之外，没有外部要求，这些可能只是你的软件包的一部分。
- en: Unless the method you are testing is rather simple and doesn't have any external
    dependencies, you will probably want to `mock` the methods that you know it is
    going to execute. A great module to do this is called Sinon.js; it allows you
    to create `stubs` and `spies` to make sure that the correct data returns from
    other methods and to ensure that they were called in the first place.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你要测试的方法非常简单，没有任何外部依赖，否则你可能会想要`mock`你知道它将执行的方法。一个很好的模块就是Sinon.js；它允许你创建`stubs`和`spies`，以确保正确的数据从其他方法返回，并确保它们首先被调用。
- en: '`sinon` provides many helpers, as mentioned before and one of these is called
    a **spy**. A spy is used mainly to just wrap a function to see what its input
    and output was. Once a spy has been applied to a function, to the outside world
    it behaves exactly the same.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`sinon`提供了许多辅助功能，如前所述，其中之一就是**spy**。spy主要用于包装一个函数，以查看其输入和输出。一旦spy被应用到一个函数上，对外界来说，它的行为完全相同。'
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can use a spy to check if a function was called:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用spy来检查函数是否被调用：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Or what arguments were passed for each call:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 或者每次调用时传递了什么参数：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we provided `spy` with an object and a method to replace then we can restore
    the original once we are finished. We will usually do this in the `tear down`
    of our test:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们用一个对象和一个要替换的方法提供了`spy`，那么在完成后我们可以恢复原始的方法。我们通常会在测试的`tear down`中这样做：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We also have a `stub` function, which inherits all the functionality of `spy`
    but instead of calling the original function it completely replaces it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个`stub`函数，它继承了`spy`的所有功能，但是完全替换了原始函数，而不是调用它。
- en: 'This is so we can define the behavior, for example, what it returns:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就可以定义行为，例如，它返回什么：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can also define a return value for a set of arguments passed:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以为一组传递的参数定义返回值：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s say we had this set of methods:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有这组方法：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, we only care about the scenario where a user is returned, as the `getUser`
    function will throw an error if it can't find it. Knowing this, we just want to
    test that when a user is found it returns their name.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只关心用户被返回的情况，因为如果找不到用户，`getUser`函数将抛出错误。知道这一点，我们只想测试当找到用户时它返回他们的名字。
- en: 'This is a perfect example of when we want to `stub` a method:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个完美的例子，我们想要`stub`一个方法的时候：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Instead of replacing the function we can also pass the function using the scope,
    replacing this with the object we passed; either way is sufficient.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过作用域传递函数，而不是替换函数，用传递的对象替换this；两种方式都可以。
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Everything we need to create a Node.js application is now at our fingertips.
    Testing is just one of those things that are essential to any successful software.
    We covered using mocha as a testing framework and chai as an assertion framework.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以轻松创建一个Node.js应用所需的一切。测试只是其中一个对于任何成功的软件都是必不可少的事情。我们介绍了使用mocha作为测试框架和chai作为断言框架。
- en: In the next chapter, we will cover using another language with Node.js, CoffeeScript!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何在Node.js中使用另一种语言，CoffeeScript！
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为Bentham Chang准备，Safari ID bentham@gmail.com 用户编号：2843974 © 2015 Safari Books
    Online，LLC。此下载文件仅供个人使用，并受到服务条款的约束。任何其他用途均需版权所有者的事先书面同意。未经授权的使用、复制和/或分发严格禁止并违反适用法律。保留所有权利。
