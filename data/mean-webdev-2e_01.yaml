- en: Chapter 1. Introduction to MEAN
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 MEAN简介
- en: 'The MEAN stack is a powerful, full-stack JavaScript solution that comprises
    four major building blocks: MongoDB as the database, Express as the web server
    framework, Angular as the web client framework, and Node.js as the server platform.
    These building blocks are being developed by different teams, and involve a substantial
    community of developers and advocates pushing forward the development and documentation
    of each component. The main strength of the stack lies in its centralization of
    JavaScript as the main programming language. However, the problem of connecting
    these tools together can lay the foundation for scaling and architecture issues,
    which can dramatically affect your development process.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: MEAN堆栈是一个强大的全栈JavaScript解决方案，由四个主要构建模块组成：MongoDB作为数据库，Express作为Web服务器框架，Angular作为Web客户端框架，Node.js作为服务器平台。这些构建模块由不同的团队开发，并涉及一个庞大的开发人员和倡导者社区，推动每个组件的开发和文档化。该堆栈的主要优势在于将JavaScript作为主要编程语言。然而，连接这些工具的问题可能为扩展和架构问题奠定基础，这可能会严重影响您的开发过程。
- en: 'In this book, I will try to present the best practices and known issues of
    building a MEAN application, but before you begin with actual MEAN development,
    you will first need to set up your environment. This chapter will cover a bit
    of a programming overview, but mostly present the proper ways of installing the
    basic perquisites of a MEAN application. By the end of this chapter, you''ll learn
    how to install and configure MongoDB and Node.js on all the common operating systems
    and how to use NPM. In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将尝试介绍构建MEAN应用程序的最佳实践和已知问题，但在您开始实际的MEAN开发之前，您首先需要设置您的环境。本章将涵盖一些编程概述，但主要介绍安装MEAN应用程序的基本先决条件的正确方法。通过本章的学习，您将了解如何在所有常见操作系统上安装和配置MongoDB和Node.js以及如何使用NPM。在本章中，我们将涵盖以下主题：
- en: Introduction to the MEAN stack architecture
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MEAN堆栈架构简介
- en: Installing and running MongoDB on Windows, Linux, and Mac OS X
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows、Linux和Mac OS X上安装和运行MongoDB
- en: Installing and running Node.js on Windows, Linux, and Mac OS X
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows、Linux和Mac OS X上安装和运行Node.js
- en: Introduction to npm and how to use it to install Node modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npm简介及如何使用它安装Node模块
- en: Three-tier web application development
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三层Web应用程序开发
- en: 'Most web applications are built in a three-tier architecture that consists
    of three important layers: data, logic, and presentation. In web applications,
    the application structure usually breaks down to database, server, and client,
    while in modern web development, it can also be broken into database, server logic,
    client logic, and client UI.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Web应用程序都是建立在三层架构上的，包括三个重要的层：数据、逻辑和呈现。在Web应用程序中，应用程序结构通常分解为数据库、服务器和客户端，而在现代Web开发中，它也可以分解为数据库、服务器逻辑、客户端逻辑和客户端UI。
- en: 'A popular paradigm for implementing this model is the **Model-View-Controller**
    (**MVC**) architectural pattern. In the MVC paradigm, the logic, data, and visualization
    are separated into three types of object, each handling its own tasks. The **View**
    handles the visual part, taking care of user interaction. The **Controller** responds
    to system and user events, commanding the Model and View to change appropriately.
    The **Model** handles data manipulation, responding to requests for information
    or changing its state according to the Controller''s instructions. A simple visual
    representation of the MVC architecture is shown in the following diagram:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这种模型的一种流行范式是**模型-视图-控制器**（**MVC**）架构模式。在MVC范式中，逻辑、数据和可视化被分为三种类型的对象，每个对象处理自己的任务。**视图**处理视觉部分，负责用户交互。**控制器**响应系统和用户事件，命令模型和视图适当地进行更改。**模型**处理数据操作，响应对信息的请求或根据控制器的指示改变其状态。MVC架构的简单可视化表示如下图所示：
- en: '![Three-tier web application development](img/B05071_01_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![三层Web应用程序开发](img/B05071_01_01.jpg)'
- en: Common MVC architecture communication
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的MVC架构通信
- en: In the 25 years of web development, many technology stacks became popular for
    building three-tier web applications. Among those now ubiquitous stacks, you can
    find the LAMP stack, the .NET stack, and a rich variety of other frameworks and
    tools. The main problem with these stacks is that each tier demands a knowledge
    base that usually exceeds the abilities of a single developer, making teams bigger
    than they should be, less productive, and exposed to unexpected risks.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web开发的25年中，许多技术堆栈变得流行，用于构建三层Web应用程序。在那些现在无处不在的堆栈中，你可以找到LAMP堆栈、.NET堆栈和丰富多样的其他框架和工具。这些堆栈的主要问题是，每个层都需要一个知识库，通常超出了单个开发人员的能力范围，使团队比他们应该的更大，生产力更低，面临意外风险。
- en: The evolution of JavaScript
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript的演变
- en: JavaScript is an interpreted computer programming language that was built for
    the Web. First implemented by the Netscape Navigator web browser, it became the
    programming language that web browsers use to execute client-side logic. In the
    mid 2000s, the shift from websites to web applications, along with the release
    of faster browsers, gradually created a community of JavaScript developers writing
    more complex applications. These developers started creating libraries and tools
    that shortened development cycles, giving birth to a new generation of even more
    advanced web applications. They, in turn, created a continuous demand for better
    browsers. This cycle went on for a few years, where the vendors kept improving
    their browsers and JavaScript developers kept pushing the boundaries.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种为Web开发而构建的解释性计算机编程语言。最初由Netscape Navigator网络浏览器实现，它成为Web浏览器用于执行客户端逻辑的编程语言。在2000年代中期，从网站向Web应用程序的转变，以及更快的浏览器的发布，逐渐形成了一个编写更复杂应用程序的JavaScript开发人员社区。这些开发人员开始创建缩短开发周期的库和工具，催生了一代更先进的Web应用程序。他们反过来创造了对更好浏览器的持续需求。这个循环持续了几年，供应商不断改进他们的浏览器，JavaScript开发人员不断推动边界。
- en: The real revolution began in 2008, when Google released its Chrome browser,
    along with its fast JIT-compiling V8 JavaScript engine. Google's V8 engine made
    JavaScript run so much faster that it completely transformed web application development.
    More importantly, the release of the engine's source code allowed developers to
    start reimagining JavaScript outside of the browser. One of the first products
    of this revolution was Node.js.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的革命始于2008年，当谷歌发布了其Chrome浏览器，以及其快速的JIT编译V8 JavaScript引擎。谷歌的V8引擎使JavaScript运行速度大大加快，完全改变了Web应用程序开发。更重要的是，引擎源代码的发布使开发人员开始重新构想浏览器之外的JavaScript。这场革命的第一个产物之一就是Node.js。
- en: 'After looking into other options for a while, programmer Ryan Dahl found that
    V8 engine fit his non-blocking I/O experiment called Node.js. The idea was simple:
    help developers build non-blocking units of code to allow better use of system
    resources and create more responsive applications. The result was a minimal yet
    powerful platform, which utilized JavaScript''s non-blocking nature outside of
    the browser. Node''s elegant module system enabled developers to freely extend
    the platform using third-party modules to achieve almost any functionality. The
    reaction by the online community was a creation of various tools, from modern
    web frameworks to robotics server platforms. However, server-side JavaScript was
    only the beginning.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在研究了一段时间其他选项之后，程序员Ryan Dahl发现V8引擎非常适合他的非阻塞I/O实验，称为Node.js。这个想法很简单：帮助开发人员构建非阻塞的代码单元，以更好地利用系统资源并创建更具响应性的应用程序。结果是一个简洁而强大的平台，利用了JavaScript在浏览器之外的非阻塞特性。Node的优雅模块系统使开发人员可以自由地使用第三方模块来扩展平台，实现几乎任何功能。在线社区的反应是创建了各种工具，从现代Web框架到机器人服务器平台。然而，服务器端JavaScript只是一个开始。
- en: When Dwight Merriman and Eliot Horowitz set out to build their scalable hosting
    solution back in 2007, they already had a lot of experience with building web
    applications. However, the platform they built did not succeed as planned, so
    in 2009, they decided to take it apart and open source its components, including
    a V8-based database called MongoDB. Derived from the word "humongous", MongoDB
    was a scalable NoSQL database that used a JSON-like data model with dynamic schemas.
    MongoDB gained a lot of traction right away by giving developers the flexibility
    they needed when dealing with complex data, while providing RDBMS features such
    as advanced queries and easy scaling—features that eventually made MongoDB one
    of the leading NoSQL solutions. JavaScript broke another boundary. However, the
    JavaScript revolutionaries haven't forgotten where it all began. In fact, the
    popularization of modern browsers created a new wave of JavaScript frontend frameworks.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当Dwight Merriman和Eliot Horowitz在2007年开始构建可扩展的托管解决方案时，他们已经在构建Web应用程序方面有了很多经验。然而，他们构建的平台并没有按计划成功，因此在2009年，他们决定拆开它，并开源其组件，包括一个名为MongoDB的基于V8的数据库。MongoDB源自“巨大”的单词，是一个可扩展的NoSQL数据库，使用动态模式的类JSON数据模型。MongoDB立即获得了很多关注，因为它为开发人员提供了处理复杂数据时所需的灵活性，同时提供了高级查询和易于扩展的RDBMS功能，这些功能最终使MongoDB成为领先的NoSQL解决方案之一。JavaScript打破了另一个界限。然而，JavaScript革命者并没有忘记一切的起源。事实上，现代浏览器的普及创造了JavaScript前端框架的新浪潮。
- en: Back in 2009, while building their JSON as a platform service, developers Miško
    Hevery and Adam Abrons noticed that the common JavaScript libraries weren't enough.
    The nature of their rich web application raised the need for a more structured
    framework that would reduce grunt work and maintain an organized code base. Abandoning
    the original idea, they decided to focus on the development of their frontend
    framework and open sourced the project, naming it AngularJS. The idea was to bridge
    the gap between JavaScript and HTML, and help popularize single-page application
    development.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 回到2009年，当Miško Hevery和Adam Abrons在构建他们的JSON作为平台服务时，他们注意到常见的JavaScript库并不够用。他们丰富的Web应用程序的性质引发了对更有结构的框架的需求，这将减少繁重的工作并保持有组织的代码库。他们放弃了最初的想法，决定专注于开发他们的前端框架，并开源了该项目，命名为AngularJS。这个想法是为了弥合JavaScript和HTML之间的差距，并帮助推广单页应用程序的开发。
- en: The result was a rich web framework, which presented frontend web developers
    with concepts such as two-way data binding, cross-component dependency injection,
    and MVC-based components. Angular, along with other modern frameworks, revolutionized
    web development by transforming the once unmaintainable frontend code base into
    a structured code base that can support more advanced development paradigms such
    as **Test-driven Development** (**TDD**).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个丰富的Web框架，为前端Web开发人员提供了诸如双向数据绑定、跨组件依赖注入和基于MVC的组件等概念。Angular，以及其他现代框架，通过将曾经难以维护的前端代码库转变为可以支持更高级开发范式的结构化代码库，彻底改变了Web开发。
- en: The rise of open source collaboration tools, along with the devoted involvement
    of these talented engineers, created one of the richest communities in the world.
    More importantly, these major advancements allowed the development of three-tier
    web applications to be unified under JavaScript as the programming language across
    all three layers—an idea that is commonly referred to as the full-stack JavaScript.
    The MEAN stack is just a single example of this idea.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 开源协作工具的兴起，以及这些才华横溢的工程师的投入，创造了世界上最丰富的社区之一。更重要的是，这些重大进步使得三层Web应用程序的开发能够在JavaScript的统一编程语言下进行——这个想法通常被称为全栈JavaScript。MEAN堆栈就是这个想法的一个例子。
- en: Introduction to ECMAScript 2015
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ECMAScript 2015介绍
- en: After years of work, the ES6 specification was released on June 2015\. It presented
    the biggest advancements in JavaScript since ES5 and introduced several features
    into the language that will completely transform the way we JavaScript developers
    write code. It would be ambitious to describe all the improvements made by ES2015\.
    Instead, let's try to work through the basic features we'll use in the next chapters.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 经过多年的工作，ES6规范于2015年6月发布。它提出了自ES5以来JavaScript最大的进步，并在语言中引入了几个功能，将彻底改变我们JavaScript开发人员编写代码的方式。描述ES2015所做的所有改进是雄心勃勃的。相反，让我们试着通过我们将在下一章中使用的基本功能来工作。
- en: Modules
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块
- en: 'Modules are now a supported language-level feature. They allow developers to
    wrap their component in a Module pattern, and export and import modules inside
    their code. The implementation is very similar to the CommonJS module implementation
    described in the previous chapters, although ES2015 modules also support asynchronous
    loading. The basic keywords for working with ES2015 modules are `export` and `import`.
    Let''s look at a simple example. Suppose you have a file named `lib.js` that contains
    the following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 模块现在是一种受支持的语言级特性。它允许开发人员将其组件包装在模块模式中，并在其代码中导出和导入模块。实现与前几章描述的CommonJS模块实现非常相似，尽管ES2015模块还支持异步加载。处理ES2015模块的基本关键字是`export`和`import`。让我们看一个简单的例子。假设您有一个名为`lib.js`的文件，其中包含以下代码：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So, in your `main.js` file, you can use the following code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在您的`main.js`文件中，您可以使用以下代码：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'However, modules can be much more fun. For instance, let''s say our `lib.js`
    file looks like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，模块可能更有趣。例如，假设我们的`lib.js`文件看起来像这样：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In your main file, use the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的主文件中，使用以下代码：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'ES2015 modules also support default `export` values. So, for instance, let''s
    say you have file named `doSomething.js` that contains the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ES2015模块还支持默认的`export`值。因此，例如，假设您有一个名为`doSomething.js`的文件，其中包含以下代码：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You''ll be able to use it as follows in your `main.js` file:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`main.js`文件中如下使用它：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It is important to remember that the default import should identify their entities
    using the module name.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，默认导入应该使用模块名称标识其实体。
- en: 'Another important thing to remember is that modules export bindings and not
    values. So for instance, let''s say you have a `validator.js` file that looks
    like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件重要的事情要记住的是，模块导出绑定而不是值。因此，例如，假设您有一个名为`validator.js`的文件，看起来像这样：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You also have a `main.js` file that looks like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您还有一个名为`main.js`的文件，看起来像这样：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first output would be `false`, and the second would be `true`. Now that
    we have a basic understanding of modules, let's move to classes.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个输出将是`false`，第二个将是`true`。现在我们对模块有了基本的了解，让我们转到类。
- en: Classes
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类
- en: 'The long debate about classes versus prototypes came to a conclusion that classes
    in ES2015 are basically just a syntactic sugar over the prototype-based inheritance.
    Classes are easy-to-use patterns that support instance and static members, constructors,
    and super calls. Here is an example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 关于类与原型的长期辩论得出结论，即ES2015中的类基本上只是基于原型的继承的一种语法糖。类是易于使用的模式，支持实例和静态成员、构造函数和super调用。这里有一个例子：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this example, the `Car` class extends the `Vehicle` class. Thus, the output
    is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`Car`类扩展了`Vehicle`类。因此，输出如下：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Arrow functions
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 箭头函数
- en: 'Arrows are functions shorthand by the `=>` syntax. For people familiar with
    other languages such as C# and Java 8, they might look familiar. However, arrows
    are also very helpful because they share the same lexical `this` as their scope.
    They are mainly used in two forms. One is using an expression body:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头函数是`=>`语法的函数简写。对于熟悉其他语言如C#和Java 8的人来说，它们可能看起来很熟悉。然而，箭头函数也非常有帮助，因为它们与其作用域共享相同的词法`this`。它们主要以两种形式使用。一种是使用表达式体：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Another form is using a statement body:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种形式是使用语句体：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'An example of using the shared lexical would be:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用共享词法的一个例子是：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If used as a regular function, `this` would be the `book` object and not the
    `author`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果作为常规函数使用，“this”将是“book”对象，而不是“author”。
- en: Let and Const
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Let和Const
- en: '`Let` and `Const` are new keywords used for symbol declaration. Let is almost
    identical to the `var` keyword, so it''ll behave the same as global and function
    variables. However, `let` behaves differently inside a block. For instance, look
    at the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`Let`和`Const`是用于符号声明的新关键字。`Let`几乎与`var`关键字相同，因此它的行为与全局和函数变量相同。但是，在块内部，`let`的行为不同。例如，看下面的代码：'
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The first function will print `i` after the loop, but the second one will throw
    an error, since `i` is defined by `let`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个函数将在循环后打印`i`，但第二个函数将抛出错误，因为`i`是由`let`定义的。
- en: 'The `const` keyword forces single assignment. So, this code will throw an error
    as well:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`const`关键字强制单一赋值。因此，这段代码也会抛出错误：'
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Default, Rest, and Spread
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认、Rest和Spread
- en: 'Default, Rest, and Spread are three new features related to functions parameters.
    The default feature allows you to set a default value to the function parameter:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 默认、Rest和Spread是与函数参数相关的三个新功能。默认功能允许您为函数参数设置默认值：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this example, the value of `y` will be set to `0` if a value is not passed
    or is set to `undefined`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，如果没有传递值或设置为`undefined`，`y`的值将设置为`0`。
- en: 'The Rest feature allows you to pass an array as trailing arguments as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Rest功能允许您将数组作为尾随参数传递，如下所示：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The Spread feature turns an array into a call argument:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Spread功能将数组转换为调用参数：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Summary
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Going into modern web development, ES2015 will become a viable part of your
    daily programming sessions. What is shown here is the tip of the iceberg, and
    it is strongly recommended that you continue to investigate it deeper. However,
    for the purposes of this book, it will suffice.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 进入现代Web开发，ES2015将成为您日常编程会话的一个可行部分。这里显示的只是冰山一角，强烈建议您继续深入研究。但是，对于本书的目的，这就足够了。
- en: Introducing MEAN
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍MEAN
- en: 'MEAN is an abbreviation for MongoDB, Express, Angular, and Node.js. The concept
    behind it is to use only JavaScript-driven solutions to cover the different parts
    of your application. The advantages are great and are as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: MEAN是MongoDB、Express、Angular和Node.js的缩写。其背后的概念是只使用JavaScript驱动的解决方案来覆盖应用程序的不同部分。其优势很大，如下所示：
- en: A single language is used throughout the application
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个应用程序只使用一种语言
- en: All the parts of the application can support and often enforce the use of the
    MVC architecture
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的所有部分都可以支持并经常强制使用MVC架构
- en: Serialization and deserialization of data structures is no longer needed, because
    data marshaling is done using JSON objects
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再需要数据结构的序列化和反序列化，因为数据编组是使用JSON对象完成的
- en: 'However, there are still a few important questions that remain unanswered:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仍有一些重要的问题尚未解答：
- en: How do you connect all the components together?
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将所有组件连接在一起？
- en: Node.js has a huge ecosystem of modules, so which modules should you use?
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js有一个庞大的模块生态系统，那么你应该使用哪些模块？
- en: JavaScript is paradigm agnostic, so how can you maintain the MVC application
    structure?
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript是范式不可知的，那么你如何维护MVC应用程序结构？
- en: JSON is a schema-less data structure, so how and when should you model your
    data?
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON是一种无模式的数据结构，那么你应该如何以及何时对你的数据进行建模？
- en: How do you handle user authentication?
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何处理用户认证？
- en: How should you use the Node.js non-blocking architecture to support real-time
    interactions?
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Node.js的非阻塞架构来支持实时交互？
- en: How can you test your MEAN application code base?
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何测试你的MEAN应用程序代码库？
- en: Considering the rise of DevOps and CI, what kind of JavaScript development tools
    can you use to expedite your MEAN application development process?
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑到DevOps和CI的兴起，你可以使用哪些JavaScript开发工具来加快MEAN应用程序的开发过程？
- en: In this book, I'll try to answer these questions and many more. However, before
    we go any further, you will first need to install the basic prerequisites.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将尝试回答这些问题和更多。但是，在我们继续之前，你首先需要安装基本的先决条件。
- en: Installing MongoDB
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装MongoDB
- en: For MongoDB's stable versions, the official MongoDB website supplies linked
    binaries that provide the easiest way to install MongoDB on Linux, Mac OS X, and
    Windows. Notice that you need to download the right architecture version for your
    operating system. If you use Windows or Linux, ensure that you download either
    the 32-bit or 64-bit version according to your system architecture. Mac users
    are safe to download the 64-bit version.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于MongoDB的稳定版本，官方MongoDB网站提供了链接的二进制文件，为Linux、Mac OS X和Windows提供了安装MongoDB的最简单方式。请注意，你需要根据你的操作系统下载正确的架构版本。如果你使用Windows或Linux，请确保根据你的系统架构下载32位或64位版本。Mac用户可以安全地下载64位版本。
- en: Note
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The MongoDB versioning scheme works in such a way that only even version numbers
    mark stable releases. So, versions 3.0.x and 3.2x are stable, while 2.9.x and
    3.1.x are unstable releases and should not be used in production. The latest stable
    version of MongoDB is 3.2.x.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB的版本方案是这样工作的，只有偶数版本号标记稳定版本。因此，版本3.0.x和3.2x是稳定的，而2.9.x和3.1.x是不稳定的版本，不应该在生产中使用。MongoDB的最新稳定版本是3.2.x。
- en: When you visit the download page at [http://mongodb.org/downloads](http://mongodb.org/downloads),
    you'll be offered a download of an archive that contains the binaries you need
    to install MongoDB. After downloading and extracting the archive file, you will
    need to locate the `mongod` binary, which is usually located in the `bin` folder.
    The `mongod` process runs the main MongoDB server process, which can be used as
    a standalone server or a single node of a MongoDB replica set. In our case, we
    will use MongoDB as a standalone server. The `mongod` process requires a folder
    to store the database files (the default folder is `/data/db`) and a port to listen
    to (the default port is `27017`). In the following subsections, we'll go over
    the setup steps for each operating system. We'll begin with the common Windows
    installation process.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当你访问[http://mongodb.org/downloads](http://mongodb.org/downloads)下载页面时，你将得到一个包含安装MongoDB所需二进制文件的存档文件的下载。下载并提取存档文件后，你需要找到`mongod`二进制文件，通常位于`bin`文件夹中。`mongod`进程运行主MongoDB服务器进程，可以用作独立服务器或MongoDB副本集的单个节点。在我们的情况下，我们将使用MongoDB作为独立服务器。`mongod`进程需要一个文件夹来存储数据库文件（默认文件夹是`/data/db`）和一个要监听的端口（默认端口是`27017`）。在接下来的小节中，我们将介绍每个操作系统的设置步骤。我们将从常见的Windows安装过程开始。
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is recommended that you learn more about MongoDB by visiting the official
    documentation at [https://mongodb.org](https://mongodb.org).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 建议你通过访问官方文档[https://mongodb.org](https://mongodb.org)来更多了解MongoDB。
- en: Installing MongoDB on Windows
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows上安装MongoDB
- en: 'Once you have downloaded the right version, run the `.msi` file. MongoDB should
    be installed in the `C:\Program Files\MongoDB\` folder. While running, MongoDB
    uses a default folder to store its data files. On Windows, the default folder
    location is `C:\data\db`. So, in the command prompt, go to `C:\` and issue the
    following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 下载正确的版本后，运行`.msi`文件。MongoDB应该安装在`C:\Program Files\MongoDB\`文件夹中。在运行时，MongoDB使用默认文件夹来存储其数据文件。在Windows上，默认文件夹位置是`C:\data\db`。因此，在命令提示符中，转到`C:\`并输入以下命令：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can tell the mongod service to use an alternative path for the data files,
    using the `--dbpath` command-line flag.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以告诉mongod服务使用`--dbpath`命令行标志来使用替代路径的数据文件。
- en: Once you've finished creating the data folders, you'll get two options while
    running the main MongoDB service.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完数据文件夹后，在运行主MongoDB服务时会得到两个选项。
- en: Running MongoDB manually
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动运行MongoDB
- en: 'To run MongoDB manually, you will need to run the `mongod` binary. So, open
    the command prompt and navigate to the `C:\Program Files\MongoDB\Server\3.2\bin`
    folder. Then, issue the following command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要手动运行MongoDB，你需要运行`mongod`二进制文件。因此，打开命令提示符并导航到`C:\Program Files\MongoDB\Server\3.2\bin`文件夹。然后，输入以下命令：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The preceding command will run the main MongoDB service that starts listening
    to the default `27017` port. If everything goes well, you should see a console
    output similar to the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将运行主MongoDB服务，该服务将开始监听默认的`27017`端口。如果一切顺利，您应该看到类似以下截图的控制台输出：
- en: '![Running MongoDB manually](img/B05071_01_02.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![手动运行MongoDB](img/B05071_01_02.jpg)'
- en: Running the MongoDB server on Windows
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上运行MongoDB服务器
- en: Depending on the Windows security level, a security alert dialog, which notifies
    you about the blocking of some service features, will be issued. If this occurs,
    select a private network and click on **Allow Access**.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Windows安全级别，可能会发出安全警报对话框，通知您有关某些服务功能的阻止。如果发生这种情况，请选择私人网络，然后单击**允许访问**。
- en: Note
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You should be aware that the MongoDB service is self-contained, so you can alternatively
    run it from any folder of your choice.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该知道，MongoDB服务是自包含的，因此您也可以选择从任何文件夹运行它。
- en: Running MongoDB as a Windows service
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将MongoDB作为Windows服务运行
- en: 'The more popular approach is running MongoDB automatically after every reboot
    cycle. Before you begin setting up MongoDB as a Windows service, it''s considered
    a good practice to specify a path for the MongoDB log and configuration files.
    Start by creating a folder for these files by running the following command in
    your command prompt:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 更流行的方法是在每次重启后自动运行MongoDB。在将MongoDB设置为Windows服务之前，最好指定MongoDB日志和配置文件的路径。首先在命令提示符中运行以下命令创建这些文件的文件夹：
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, you''ll need to create a configuration file at `C:\Program Files\MongoDB\Server\3.2\mongod.cfg`
    that contains these lines:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要在`C:\Program Files\MongoDB\Server\3.2\mongod.cfg`创建一个包含以下内容的配置文件：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'When you have your configuration file in place, open a new command prompt window
    with administrative privileges by right-clicking on the command prompt icon and
    clicking on **Run as administrator**. Notice that if an older version of the MongoDB
    service is already running, you''ll first need to remove it using the following
    commands:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的配置文件就位时，请通过右键单击命令提示符图标并单击**以管理员身份运行**来打开具有管理员权限的新命令提示符窗口。请注意，如果已经运行较旧版本的MongoDB服务，您首先需要使用以下命令将其删除：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, install the MongoDB service by running the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过运行以下命令安装MongoDB服务：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Notice that the install process will only succeed if your configuration file
    is set correctly. After installing your MongoDB service, you can run it by executing
    the following command in the administrative command prompt window:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，只有在正确设置配置文件时，安装过程才会成功。安装MongoDB服务后，您可以通过在管理命令提示符窗口中执行以下命令来运行它：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Be aware that the MongoDB configuration file can be modified to accommodate
    your needs. You can learn more about it by visiting [http://docs.mongodb.org/manual/reference/configuration-options/](http://docs.mongodb.org/manual/reference/configuration-options/).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，MongoDB配置文件可以修改以适应您的需求。您可以通过访问[http://docs.mongodb.org/manual/reference/configuration-options/](http://docs.mongodb.org/manual/reference/configuration-options/)了解更多信息。
- en: Installing MongoDB on Mac OS X and Linux
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Mac OS X和Linux上安装MongoDB
- en: In this section, you'll learn the different ways of installing MongoDB on Unix-based
    operating systems. Let's begin with the simplest way to install MongoDB, which
    involves downloading MongoDB's precompiled binaries.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习在基于Unix的操作系统上安装MongoDB的不同方法。让我们从最简单的安装MongoDB的方式开始，这涉及下载MongoDB的预编译二进制文件。
- en: Installing MongoDB from binaries
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从二进制文件安装MongoDB
- en: 'You can download the right version of MongoDB using the download page at [http://www.mongodb.org/downloads](http://www.mongodb.org/downloads).
    Alternatively, you can do this via CURL by executing the following command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问[http://www.mongodb.org/downloads](http://www.mongodb.org/downloads)的下载页面下载正确版本的MongoDB。或者，您可以通过执行以下命令使用CURL来执行此操作：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Notice that we have downloaded the Mac OS X 64-bit version, so make sure you
    alter the command to fit the version suitable for your machine. After the downloading
    process is over, unpack the file by issuing the following command in your command-line
    tool:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经下载了Mac OS X 64位版本，因此请确保修改命令以适合您的机器版本。下载过程结束后，请通过在命令行工具中发出以下命令解压文件：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, change the name of the extracted folder to a simpler folder name by running
    the following command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过运行以下命令将提取的文件夹更改为更简单的文件夹名称：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'MongoDB uses a default folder to store its files. On Linux and Mac OS X, the
    default location is `/data/db`, so in your command-line tool, run the following
    command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB使用默认文件夹来存储其文件。在Linux和Mac OS X上，默认位置是`/data/db`，所以在命令行工具中运行以下命令：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Tip
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You may experience some trouble creating this folder. This is usually a permission
    issue, so use `sudo` or super user when running the preceding command.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会在创建此文件夹时遇到一些问题。这通常是权限问题，因此在运行上述命令时，请使用`sudo`或超级用户。
- en: 'The preceding command will create the `data` and `db` folders, because the
    `–p` flag creates parent folders as well. Notice that the default folder is located
    outside your home folder, so make sure you set the folder permission by running
    the following command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建`data`和`db`文件夹，因为`-p`标志也会创建父文件夹。请注意，默认文件夹位于您的主文件夹外部，因此请确保通过运行以下命令设置文件夹权限：
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now that you have everything prepared, use your command-line tool and go to
    the `bin` folder to run the `mongod` service as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备好了，使用命令行工具并转到`bin`文件夹以运行`mongod`服务，如下所示：
- en: '[PRE30]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This will run the main MongoDB service, which will start listening to the default
    `27017` port. If everything goes well, you should see a console output similar
    to the following screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这将运行主MongoDB服务，它将开始监听默认的`27017`端口。如果一切顺利，您应该看到类似以下截图的控制台输出：
- en: '![Installing MongoDB from binaries](img/B05071_01_03.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![从二进制文件安装MongoDB](img/B05071_01_03.jpg)'
- en: Running the MongoDB server on Mac OS X
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac OS X上运行MongoDB服务器
- en: Installing MongoDB using a package manager
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用软件包管理器安装MongoDB
- en: Sometimes, the easiest way to install MongoDB is using a package manager. The
    downside is that some package managers are falling behind in terms of supporting
    the latest version. Luckily, the team behind MongoDB also maintains the official
    packages for RedHat, Debian, and Ubuntu, as well as a Homebrew package for Mac
    OS X. Note that you'll have to configure your package manager repository to include
    the MongoDB servers to download the official packages.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，安装MongoDB的最简单方法是使用软件包管理器。缺点是一些软件包管理器在支持最新版本方面落后。幸运的是，MongoDB团队还维护了RedHat、Debian和Ubuntu的官方软件包，以及Mac
    OS X的Homebrew软件包。请注意，您需要配置软件包管理器存储库以包括MongoDB服务器以下载官方软件包。
- en: To install MongoDB on Red Hat Enterprise, CentOS, or Fedora using Yum, follow
    the instructions at [http://docs.mongodb.org/manual/tutorial/install-mongodb-on-red-hat-centos-or-fedora-linux/](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-red-hat-centos-or-fedora-linux/).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Red Hat Enterprise、CentOS或Fedora上使用Yum安装MongoDB，请按照[http://docs.mongodb.org/manual/tutorial/install-mongodb-on-red-hat-centos-or-fedora-linux/](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-red-hat-centos-or-fedora-linux/)上的说明进行操作。
- en: To install MongoDB on Ubuntu using APT, follow the instructions at [http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Ubuntu上使用APT安装MongoDB，请按照[http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/)上的说明进行操作。
- en: To install MongoDB on Debian using APT, follow the instructions at [http://docs.mongodb.org/manual/tutorial/install-mongodb-on-debian/](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-debian/).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Debian上使用APT安装MongoDB，请按照[http://docs.mongodb.org/manual/tutorial/install-mongodb-on-debian/](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-debian/)上的说明进行操作。
- en: To install MongoDB on Mac OS X using Homebrew, follow the instructions at [http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac OS X上使用Homebrew安装MongoDB，请按照[http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/)上的说明进行操作。
- en: Using the MongoDB shell
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用MongoDB shell
- en: 'The MongoDB archive file includes the MongoDB shell, which allows to you to
    interact with your server instance using the command line. To start the shell,
    navigate to the MongoDB `bin` folder and run the `mongo` service as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB存档文件包括MongoDB shell，它允许您使用命令行与服务器实例进行交互。要启动shell，请转到MongoDB `bin`文件夹，并运行以下`mongo`服务：
- en: '[PRE31]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you successfully installed MongoDB, the shell will automatically connect
    to your local instance, using the test database. You should see a console output
    similar to the following screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功安装了MongoDB，shell将自动连接到您的本地实例，使用测试数据库。您应该看到类似以下屏幕截图的控制台输出：
- en: '![Using the MongoDB shell](img/B05071_01_04.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: 使用MongoDB shell
- en: Running the MongoDB shell on Mac OS X
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac OS X上运行MongoDB shell
- en: 'To test your database, run the following command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试您的数据库，请运行以下命令：
- en: '[PRE32]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The preceding command will create a new article collection and insert a JSON
    object containing a `title` property. To retrieve the article object, execute
    the following command:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建一个新的文章集合，并插入一个包含`title`属性的JSON对象。要检索文章对象，请执行以下命令：
- en: '[PRE33]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The console will output a text similar to the following message:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台将输出类似以下消息的文本：
- en: '[PRE34]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Congratulations! This means your MongoDB instance is working properly, and you
    have successfully managed to interact with it using the MongoDB shell. In the
    upcoming chapters, you'll learn more about MongoDB and how to use the MongoDB
    shell.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！这意味着您的MongoDB实例正常工作，并且您已成功使用MongoDB shell与其进行交互。在接下来的章节中，您将了解更多关于MongoDB以及如何使用MongoDB
    shell的知识。
- en: Installing Node.js
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Node.js
- en: For the stable versions, the official Node.js website supplies linked binaries
    that provide the easiest way to install Node.js on Linux, Mac OS X, and Windows.
    Note that you need to download the right architecture version for your operating
    system. If you use Windows or Linux, make sure to download either the 32-bit or
    64-bit version according to your system architecture. Mac users are safe to download
    the 64-bit version.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对于稳定版本，官方Node.js网站提供了链接的二进制文件，为Linux、Mac OS X和Windows提供了安装Node.js的最简单方法。请注意，您需要为您的操作系统下载正确的架构版本。如果您使用Windows或Linux，请确保根据您的系统架构下载32位或64位版本。Mac用户可以安全地下载64位版本。
- en: Note
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: After the merge between the Node.js and io.js projects, the version scheme continued
    directly from 0.12.x to 4.x. The team now uses the **Long-term Support** (**LTS**)
    policy. You can read about it at [https://en.wikipedia.org/wiki/Long-term_support](https://en.wikipedia.org/wiki/Long-term_support).
    The latest stable version of Node.js is 6.x.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js和io.js项目合并后，版本方案直接从0.12.x继续到4.x。团队现在使用**长期支持**（**LTS**）政策。您可以在[https://en.wikipedia.org/wiki/Long-term_support](https://en.wikipedia.org/wiki/Long-term_support)上了解更多信息。Node.js的最新稳定版本是6.x。
- en: Installing Node.js on Windows
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows上安装Node.js
- en: Installing Node.js on a Windows machine is a simple task that can be easily
    accomplished using the standalone installer. To begin with, navigate to [https://nodejs.org/en/download/](https://nodejs.org/en/download/)
    and download the right `.msi` file. Notice there are 32-bit and 64-bit versions,
    so make sure you download the right one for your system.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows机器上安装Node.js是一项简单的任务，可以使用独立安装程序轻松完成。首先，转到[https://nodejs.org/en/download/](https://nodejs.org/en/download/)并下载正确的`.msi`文件。请注意有32位和64位版本，因此请确保为您的系统下载正确的版本。
- en: 'After downloading the installer, run it. If you get any security dialog boxes,
    just click on the **Run** button, and the installation wizard should start. You
    will be prompted with an installation screen similar to the following screenshot:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 下载安装程序后，运行它。如果出现任何安全对话框，只需单击**运行**按钮，安装向导应该会启动。您将看到类似以下屏幕截图的安装屏幕：
- en: '![Installing Node.js on Windows](img/B05071_01_05.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![在Windows上安装Node.js](img/B05071_01_05.jpg)'
- en: Node.js Windows installation wizard
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js Windows安装向导
- en: 'Once you click on the **Next** button, the installation should begin. A few
    moments later, you''ll see a confirmation screen similar to the following screenshot,
    telling you that Node.js was successfully installed:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击**下一步**按钮，安装将开始。几分钟后，您将看到一个类似以下截图的确认屏幕，告诉您Node.js已成功安装：
- en: '![Installing Node.js on Windows](img/B05071_01_06.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![在Windows上安装Node.js](img/B05071_01_06.jpg)'
- en: Node.js Windows installation confirmation
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js在Windows上的安装确认
- en: Installing Node.js on Mac OS X
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Mac OS X上安装Node.js
- en: 'Installing Node.js on Mac OS X is a simple task that can be easily accomplished
    using the standalone installer. Start by navigating to the [https://nodejs.org/en/download/](https://nodejs.org/en/download/)
    page and download the `.pkg` file. After downloading the installer, run it, and
    you will be prompted with an installation screen similar to the following screenshot:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac OS X上安装Node.js是一个简单的任务，可以使用独立安装程序轻松完成。首先转到[https://nodejs.org/en/download/](https://nodejs.org/en/download/)页面并下载`.pkg`文件。下载安装程序后，运行它，您将看到一个类似以下截图的安装屏幕：
- en: '![Installing Node.js on Mac OS X](img/B05071_01_07.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![在Mac OS X上安装Node.js](img/B05071_01_07.jpg)'
- en: Node.js Mac OS X installation wizard
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js在Mac OS X上的安装向导
- en: 'Click on **Continue**, and the installation process should begin. The installer
    will ask you to confirm the license agreement and then ask you to select the folder
    destination. Choose the option most suitable for you before clicking on the **Continue**
    button again. The installer will then ask you to confirm the installation information
    and ask you for your user password. A few moments later, you''ll see a confirmation
    screen similar to the following screenshot, telling you that Node.js was successfully
    installed:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**继续**，安装过程应该开始。安装程序将要求您确认许可协议，然后要求您选择文件夹目标。在再次点击**继续**按钮之前，选择最适合您的选项。然后安装程序将要求您确认安装信息，并要求您输入用户密码。几分钟后，您将看到一个类似于以下截图的确认屏幕，告诉您Node.js已成功安装：
- en: '![Installing Node.js on Mac OS X](img/B05071_01_08.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![在Mac OS X上安装Node.js](img/B05071_01_08.jpg)'
- en: Node.js Mac OS X installation confirmation
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js在Mac OS X上的安装确认
- en: Installing Node.js on Linux
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Linux上安装Node.js
- en: 'To install Node.js on a Linux machine, you''ll have to use the tarball file
    from the official website. The best way of doing so is to download the latest
    version and then build and install the source code using the `make` command. Start
    by navigating to the [http://nodejs.org/en/download/](http://nodejs.org/en/download/)
    page, and download the suitable `.tar.gz` file. Then, expand the file and install
    Node.js by issuing the following commands:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Linux机器上安装Node.js，您需要使用官方网站上的tarball文件。最好的方法是下载最新版本，然后使用`make`命令构建和安装源代码。首先转到[http://nodejs.org/en/download/](http://nodejs.org/en/download/)页面，下载适合的`.tar.gz`文件。然后，通过以下命令扩展文件并安装Node.js：
- en: '[PRE35]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: If everything goes well, the commands will install Node.js on your machine.
    Note that these commands are for the Node.js 6.9.1 version, so remember to replace
    the version number with the version you downloaded.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，这些命令将在您的机器上安装Node.js。请注意，这些命令适用于Node.js 6.9.1版本，所以请记得用您下载的版本替换版本号。
- en: Note
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is recommended that you learn more about Node.js by visiting the official
    documentation at [https://nodejs.org](https://nodejs.org).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您通过访问官方文档[https://nodejs.org](https://nodejs.org)来了解更多关于Node.js的信息。
- en: Running Node.js
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行Node.js
- en: 'After you have successfully installed Node.js, you will be able to start experimenting
    with it using the provided command-line interface (CLI). Go to your command-line
    tool and execute the following command:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功后，您将能够使用提供的命令行界面（CLI）开始尝试使用Node.js。转到命令行工具并执行以下命令：
- en: '[PRE36]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This will start the Node.js CLI, which will wait for a JavaScript input. To
    test the installation, run the following command:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动Node.js CLI，它将等待JavaScript输入。要测试安装，请运行以下命令：
- en: '[PRE37]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The output should be similar to the one that follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于以下内容：
- en: '[PRE38]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This is nice, but you should also try to execute a JavaScript file. Start by
    creating a file named `application.js` that contains the following code:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，但您还应该尝试执行一个JavaScript文件。首先创建一个名为`application.js`的文件，其中包含以下代码：
- en: '[PRE39]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'To run it, you''ll have to pass the file name as the first argument to the
    Node CLI by issuing the following command:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行它，您需要通过以下命令将文件名作为第一个参数传递给Node CLI：
- en: '[PRE40]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Congratulations! You have just created your first Node.js application. To stop
    the CLI, press *CTRL* + *D* or *CTRL* + *C*.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您刚刚创建了您的第一个Node.js应用程序。要停止CLI，请按*CTRL* + *D*或*CTRL* + *C*。
- en: Introducing npm
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍npm
- en: 'Node.js is a platform, which means its features and APIs are kept to a minimum.
    To achieve more complex functionality, it uses a module system that allows you
    to extend the platform. The best way to install, update, and remove Node.js modules
    is using npm. npm is mainly used as:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是一个平台，这意味着它的功能和API被保持在最低限度。为了实现更复杂的功能，它使用了一个模块系统，允许您扩展平台。安装、更新和删除Node.js模块的最佳方式是使用npm。npm主要用途包括：
- en: A registry of packages for browsing, downloading, and installing third-party
    modules
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于浏览、下载和安装第三方模块的包注册表
- en: A CLI tool to manage local and global packages
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于管理本地和全局包的CLI工具
- en: Conveniently, npm is installed during the Node.js installation process, so let's
    quickly jump in and learn how to use it.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 方便的是，npm是在Node.js安装过程中安装的，所以让我们快速开始学习如何使用它。
- en: Using npm
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用npm
- en: To understand how npm works, we will install the Express web framework module,
    which you'll use in the upcoming chapters. npm is a robust package manager, which
    keeps a centralized registry for public modules. To browse the available public
    packages, visit the official website at [https://www.npmjs.com/](https://www.npmjs.com/).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解npm的工作原理，我们将安装Express web框架模块，这将在接下来的章节中使用。npm是一个强大的包管理器，它为公共模块保持了一个集中的注册表。要浏览可用的公共包，请访问官方网站[https://www.npmjs.com/](https://www.npmjs.com)。
- en: Most of the packages in the registry are open source and contributed by the
    Node.js community developers. When developing an open source module, the package
    author can decide to publish it to the central registry, allowing other developers
    to download and use it in their projects. In the package configuration file, the
    author will choose a name that will later be used as a unique identifier to download
    that package.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表中的大多数包都是开源的，由Node.js社区开发者贡献。在开发开源模块时，包的作者可以决定将其发布到中央注册表，允许其他开发者下载并在他们的项目中使用它。在包配置文件中，作者将选择一个名称，以后将用作下载该包的唯一标识符。
- en: Note
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is recommended that you learn more about Node.js by visiting the official
    documentation at [https://docs.npmjs.com](https://docs.npmjs.com).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 建议你通过访问官方文档[https://docs.npmjs.com](https://docs.npmjs.com)来学习更多关于Node.js的知识。
- en: The installation process of npm
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: npm的安装过程
- en: 'It is important to remember that npm has two installation modes: local and
    global. The default local mode is used more often and installs third-party packages
    in a local `node_modules` folder placed inside your application folder. It has
    no effect system-wise and is used to install the packages your application needs,
    without polluting your system with unnecessary global files.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，npm有两种安装模式：本地和全局。默认的本地模式经常被使用，并且会将第三方包安装在本地的`node_modules`文件夹中，放在应用程序文件夹内。它不会对系统产生影响，并且用于安装应用程序需要的包，而不会用不必要的全局文件污染系统。
- en: The global mode is used to install the packages you want Node.js to use globally.
    Usually, these are CLI tools, such as Grunt, that you'll learn about in the upcoming
    chapters. Most of the time, the package author will specifically instruct you
    to install the package globally. Therefore, whenever in doubt, use the local mode.
    The global mode will usually install the packages in the `/usr/local/lib/node_modules`
    folder for Unix-based systems and the `C:\Users\%USERNAME%\AppData\Roaming\npm\node_modules`
    folder for Windows-based systems, making it available to any Node.js application
    running on the system.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 全局模式用于安装你想要Node.js全局使用的包。通常，这些是CLI工具，比如Grunt，在接下来的章节中你会学到。大多数情况下，包的作者会明确指示你全局安装包。因此，当有疑问时，请使用本地模式。全局模式通常会将包安装在Unix系统的`/usr/local/lib/node_modules`文件夹中，以及Windows系统的`C:\Users\%USERNAME%\AppData\Roaming\npm\node_modules`文件夹中，使其对系统上运行的任何Node.js应用程序可用。
- en: Installing a package using npm
  id: totrans-209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用npm安装一个包
- en: 'Once you find the right package, you''ll be able to install it using the `npm
    install` command, as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到合适的包，你就可以使用`npm install`命令进行安装，如下所示：
- en: '[PRE41]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Installing a module globally is similar to its local counterpart, but you''ll
    have to add the `–g` flag, as follows:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 全局安装模块与本地安装模块类似，但你需要添加`-g`标志，如下所示：
- en: '[PRE42]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may find out that your user doesn't have the right permissions to install
    packages globally, so you'll have to use the root user or install it using sudo.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现你的用户没有权限全局安装包，所以你需要使用root用户或使用sudo进行安装。
- en: 'For example, to locally install Express, you''ll need to navigate to your application
    folder and issue the following command:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要在本地安装Express，你需要导航到你的应用程序文件夹，并发出以下命令：
- en: '[PRE43]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The preceding command will install the latest stable version of the Express
    package in your local `node_modules` folder. Furthermore, npm supports a wide
    range of semantic versioning. So, to install a specific version of a package,
    you can use the `npm install` command, as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在本地的`node_modules`文件夹中安装Express包的最新稳定版本。此外，npm支持广泛的语义版本。因此，要安装一个特定版本的包，你可以使用`npm
    install`命令，如下所示：
- en: '[PRE44]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'For instance, to install the second major version of the Express package, you''ll
    need to issue the following command:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要安装Express包的第二个主要版本，你需要发出以下命令：
- en: '[PRE45]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This will install the latest stable version of Express 2\. Note that this syntax
    enables npm to download and install any minor version of Express 2\. To learn
    more about the supported semantic versioning syntax, it is recommended that you
    visit [https://github.com/npm/node-semver](https://github.com/npm/node-semver).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装Express 2的最新稳定版本。请注意，这种语法使npm能够下载并安装Express 2的任何次要版本。要了解更多关于支持的语义版本语法，请访问[https://github.com/npm/node-semver](https://github.com/npm/node-semver)。
- en: When a package has dependencies, npm will automatically resolve those dependencies,
    installing the required packages in a `node_modules` folder inside the `package`
    folder. In the preceding example, the Express dependencies will be installed under
    `node_modules/express/node_modules`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个包有依赖关系时，npm会自动解析这些依赖关系，在`package`文件夹内的`node_modules`文件夹中安装所需的包。在前面的例子中，Express的依赖关系将安装在`node_modules/express/node_modules`下。
- en: Removing a package using npm
  id: totrans-224
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用npm移除一个包
- en: 'To remove an installed package, you''ll have to navigate to your application
    folder and run the following command:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要移除一个已安装的包，你需要导航到你的应用程序文件夹，并运行以下命令：
- en: '[PRE46]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'npm will then look for the package and try to remove it from the local `node_modules`
    folder. To remove a global package, you''ll need to use the `-g` flag, as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: npm然后会寻找这个包，并尝试从本地的`node_modules`文件夹中移除它。要移除一个全局包，你需要使用`-g`标志，如下所示：
- en: '[PRE47]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Updating a package using npm
  id: totrans-229
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用npm更新一个包
- en: 'To update a package to its latest version, issue the following command:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 要将一个包更新到最新版本，发出以下命令：
- en: '[PRE48]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'npm will download and install the latest version of this package, even if it
    doesn''t exist yet. To update a global package, use the following command:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: npm会下载并安装这个包的最新版本，即使它还不存在。要更新一个全局包，使用以下命令：
- en: '[PRE49]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Managing dependencies using the package.json file
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用package.json文件管理依赖关系
- en: Installing a single package is nice, but pretty soon, your application will
    need to use several packages. So, you'll need a better way to manage these dependencies.
    For this purpose, npm allows you to use a configuration file named `package.json`
    in the root folder of your application. In your `package.json` file, you'll be
    able to define various metadata properties of your application, including properties
    such as the name, version, and author of your application. This is also where
    you define your application dependencies.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 安装单个包很好，但很快，您的应用程序将需要使用多个包。因此，您需要一种更好的方法来管理这些依赖关系。为此，npm允许您在应用程序的根文件夹中使用名为`package.json`的配置文件。在`package.json`文件中，您将能够定义应用程序的各种元数据属性，包括应用程序的名称、版本和作者等属性。这也是您定义应用程序依赖关系的地方。
- en: 'The `package.json` file is basically a JSON file that contains the different
    attributes you''ll need to describe your application properties. An application
    using the latest Express and Grunt packages will have a `package.json` file as
    follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json`文件基本上是一个JSON文件，其中包含了描述应用程序属性所需的不同属性。使用最新的Express和Grunt包的应用程序将具有以下`package.json`文件：'
- en: '[PRE50]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Note
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Your application name and version properties are required, so removing these
    properties will prevent npm from working properly.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序名称和版本属性是必需的，因此删除这些属性将阻止npm正常工作。
- en: Creating a package.json file
  id: totrans-240
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建package.json文件
- en: 'While you can manually create a `package.json` file, an easier approach would
    be to use the `npm init` command. To do so, use your command-line tool and issue
    the following command:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以手动创建`package.json`文件，但更简单的方法是使用`npm init`命令。要这样做，使用命令行工具并发出以下命令：
- en: '[PRE51]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'npm will ask you a few questions about your application and will automatically
    create a new `package.json` file for you. A sample process should look similar
    to the following screenshot:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: npm会询问您关于您的应用程序的一些问题，并将自动为您创建一个新的`package.json`文件。示例过程应该类似于以下截图：
- en: '![Creating a package.json file](img/B05071_01_09.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![创建package.json文件](img/B05071_01_09.jpg)'
- en: Using `npm init` on Mac OS X
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac OS X上使用`npm init`
- en: 'After creating your `package.json` file, you''ll need to modify it and add
    a `dependencies` property. Your final `package.json` file should look like the
    following code snippet:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`package.json`文件后，您需要修改它并添加一个`dependencies`属性。您的最终`package.json`文件应该如下代码片段所示：
- en: '[PRE52]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Note
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the preceding code example, we used the `latest` keyword to tell npm to install
    the latest versions of these packages. However, it is highly recommended that
    you use specific version numbers or range to prevent your application dependencies
    from changing during development cycles. This is because new package versions
    might not be backward compatible with older versions, which will cause major issues
    in your application.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码示例中，我们使用了`latest`关键字告诉npm安装这些包的最新版本。然而，强烈建议您使用特定的版本号或范围，以防止您的应用程序依赖关系在开发周期中发生变化。这是因为新的包版本可能与旧版本不兼容，这将导致应用程序出现重大问题。
- en: Installing the package.json dependencies
  id: totrans-250
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装package.json的依赖项
- en: 'After creating your `package.json` file, you''ll be able to install your application
    dependencies by navigating to your application''s root folder and using the `npm
    install` command, as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`package.json`文件后，您可以通过转到应用程序的根文件夹并使用`npm install`命令来安装应用程序的依赖项，如下所示：
- en: '[PRE53]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'npm will automatically detect your `package.json` file and install all your
    application dependencies, placing them under a local `node_modules` folder. An
    alternative and sometimes better approach to installing your dependencies is to
    use the following `npm update` command:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: npm将自动检测您的`package.json`文件并安装所有应用程序的依赖项，将它们放在本地的`node_modules`文件夹下。安装依赖项的另一种方法，有时更好的方法是使用以下`npm
    update`命令：
- en: '[PRE54]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: This will install any missing packages and will update all of your existing
    dependencies to their specified version.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装任何缺少的包，并将更新所有现有依赖项到它们指定的版本。
- en: Updating the package.json file
  id: totrans-256
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新package.json文件
- en: 'Another robust feature of the `npm install` command is the ability to install
    a new package and save the package information as a dependency in your `package.json`
    file. This can be accomplished using the `--save` optional flag when installing
    a specific package. For example, to install the latest version of Express and
    save it as a dependency, you can just use the following command:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install`命令的另一个强大功能是能够安装新包并将包信息保存为`package.json`文件中的依赖项。在安装特定包时，可以使用`--save`可选标志来实现这一点。例如，要安装最新版本的Express并将其保存为依赖项，只需使用以下命令：'
- en: '[PRE55]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: npm will install the latest version of Express and will add the Express package
    as a dependency to your `package.json` file. For clarity, in the upcoming chapters,
    we prefer to manually edit the `package.json` file. However, this useful feature
    can come in pretty handy in your daily development cycles.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: npm将安装Express的最新版本，并将Express包添加为`package.json`文件的依赖项。为了清晰起见，在接下来的章节中，我们更喜欢手动编辑`package.json`文件。然而，这个有用的功能在您的日常开发周期中可能非常方便。
- en: Note
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is recommended that you learn more about npm's vast array of configuration
    options by visiting the official documentation at [https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您通过访问官方文档[https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json)了解更多关于npm庞大的配置选项。
- en: Summary
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to install MongoDB and how to connect to your
    local database instance using the MongoDB shell. You also learned how to install
    Node.js and use the Node.js CLI. You learned about npm and discovered how to use
    it to download and install Node.js packages. You also learned how to easily manage
    your application dependencies using the `package.json` file.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何安装MongoDB以及如何使用MongoDB shell连接到本地数据库实例。您还学习了如何安装Node.js并使用Node.js
    CLI。您了解了npm并发现了如何使用它来下载和安装Node.js包。您还学习了如何使用`package.json`文件轻松管理应用程序的依赖关系。
- en: In the next chapter, we'll discuss some Node.js basics, and you'll build your
    first Node.js web application.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论一些Node.js基础知识，您将构建您的第一个Node.js Web应用程序。
