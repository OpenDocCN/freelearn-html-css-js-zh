- en: Using Motors to Move Your Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用电机移动你的项目
- en: 'We''ve explored using input to discover the world around our bots, and output
    to let our bots communicate, but there is another crucial skill any bot should
    have: the ability to move! In the next few chapters, we''ll discuss various ways
    we get let our bots to move, and discuss how to control that movement. We''ll
    start in this chapter with the simplest movement component: the motor.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了使用输入来发现我们机器人周围的世界，以及使用输出让我们的机器人进行通信，但任何机器人都应该具备的另一项关键技能是：移动的能力！在接下来的几章中，我们将讨论各种让我们机器人移动的方法，并讨论如何控制这种移动。我们将从本章开始，讨论最简单的移动组件：电机。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: More about motors
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于电机的内容
- en: Preparing for a motor-driven project with the Raspberry Pi
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Raspberry Pi为电机驱动项目做准备
- en: The Johnny-Five motor object
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Johnny-Five 电机对象
- en: Troubleshooting your motorized projects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决你的电机化项目的故障
- en: Project – building a randomized motorized cat toy
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目 - 构建一个随机电机化猫玩具
- en: Project – using a gearbox motor and the motors object
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目 - 使用齿轮箱电机和电机对象
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will need the Adafruit Pi motor hat kit ([https://www.adafruit.com/product/2348](https://www.adafruit.com/product/2348)),
    a small 5V motor, which you can also get from Adafruit ([https://www.adafruit.com/product/711](https://www.adafruit.com/product/711)),
    or many other suppliers, a 4-AA battery case with wire ends and an on/off switch,
    available from Adafruit ([https://www.adafruit.com/product/830](https://www.adafruit.com/product/830))
    and many other suppliers, 2 *gearbox* or *TT* motors, available from Adafruit
    ([https://www.adafruit.com/product/3777](https://www.adafruit.com/product/3777))
    and many other suppliers, and a sticky note (or a piece of paper, scissors, and
    tape).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要Adafruit Pi电机帽子套件([https://www.adafruit.com/product/2348](https://www.adafruit.com/product/2348))，一个小型5V电机，你也可以从Adafruit([https://www.adafruit.com/product/711](https://www.adafruit.com/product/711))或许多其他供应商那里购买，一个带有电线端子和开关的4xAA电池盒，可以从Adafruit([https://www.adafruit.com/product/830](https://www.adafruit.com/product/830))和许多其他供应商那里购买，2个*齿轮箱*或*TT*电机，可以从Adafruit([https://www.adafruit.com/product/3777](https://www.adafruit.com/product/3777))和许多其他供应商那里购买，以及一个贴纸（或一张纸，剪刀和胶带）。
- en: '**Note**: If you cannot solder or are uncomfortable soldering, an alternative
    fully assembled hat can be found on Amazon ([https://www.amazon.com/SB-Motorshield-Raspberry-expansion-ultrasonic/dp/B01MQ2MZDV/ref=sr_1_fkmr1_1?s=electronics&ie=UTF8&qid=1534705033&sr=8-1-fkmr1&keywords=raspberry+pi+motor+controller+TB6612](https://www.amazon.com/SB-Motorshield-Raspberry-expansion-ultrasonic/dp/B01MQ2MZDV/ref=sr_1_fkmr1_1?s=electronics&ie=UTF8&qid=1534705033&sr=8-1-fkmr1&keywords=raspberry+pi+motor+controller+TB6612)).
    I will note changes in the code where necessary—anytime this chapter references
    the L293D hat, that is in reference to this hat.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：如果你不会焊接或者不习惯焊接，可以在亚马逊上找到一种替代的全组装帽子([https://www.amazon.com/SB-Motorshield-Raspberry-expansion-ultrasonic/dp/B01MQ2MZDV/ref=sr_1_fkmr1_1?s=electronics&ie=UTF8&qid=1534705033&sr=8-1-fkmr1&keywords=raspberry+pi+motor+controller+TB6612](https://www.amazon.com/SB-Motorshield-Raspberry-expansion-ultrasonic/dp/B01MQ2MZDV/ref=sr_1_fkmr1_1?s=electronics&ie=UTF8&qid=1534705033&sr=8-1-fkmr1&keywords=raspberry+pi+motor+controller+TB6612))。我将在必要时注明代码中的更改——任何本章引用的L293D帽子，即指这个帽子。'
- en: The code for this chapter is available at [https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter06](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter06).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可在[https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter06](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter06)找到。
- en: More about motors
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多关于电机的内容
- en: 'A motor is a component that can rotate a shaft in continuous circles at varying
    speeds. However, there are many different kinds of motors; let''s take a look
    at a few:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 电机是一种可以以不同速度连续旋转轴的组件。然而，电机有很多不同的种类；让我们看看一些例子：
- en: '**DC motor**: This kind of motor is the simplest: it can go in one direction,
    and the speed varies by the power you give it. These usually only have two wires:
    one for ground and one for power; we will combine the latter with the motor hat
    to control the speed. With the correct controller, we can move the motor in both
    directions.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**直流电机**：这种电机是最简单的：它可以单向运行，速度由你提供的功率决定。这些通常只有两根线：一根接地，一根供电；我们将后者与电机帽子结合来控制速度。使用正确的控制器，我们可以使电机双向移动。'
- en: '**Motors with brakes**: These motors have a third wire to control a brake that
    can stop the motor without the need to coast to a stop, as with DC motors. These
    motors are supported by the Johnny-Five library, but will not be covered in this
    book.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带有刹车的电机**：这些电机有一个额外的线来控制刹车，可以在不需要减速到停止的情况下停止电机，就像直流电机一样。Johnny-Five 库支持这些电机，但本书不会涉及。'
- en: '**Stepper motors**: Stepper motors are used for precise movements, as they
    move in steps that vary based on the size of the motor. They are bi-directional
    by design and are great where you need the torque of a motor with precision. We''ll
    talk more about these in the second project in this chapter. Just know that an
    easy way to spot a stepper motor is 5 wires as opposed to 2 or 3:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步进电机**：步进电机用于精确运动，因为它们的运动是按电机尺寸变化的步进。它们设计为双向的，非常适合需要电机扭矩且精确的地方。我们将在本章的第二项目中更多地讨论这些内容。只需知道，一个简单的识别步进电机的方法是它有
    5 根线，而不是 2 或 3 根：'
- en: '![](img/d271020c-8429-4ba7-af95-2ef4583634d8.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d271020c-8429-4ba7-af95-2ef4583634d8.png)'
- en: Regular motor on the left, stepper motor on the right
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 左边是普通电机，右边是步进电机
- en: How to control a motor with a microcontroller
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用微控制器控制电机
- en: 'You can directly connect DC hobby motors to the PWM pin of a microcontroller
    to power them, but this is usually inadvisable: motors take up a lot of power
    and many microcontrollers limit the amount of current out of each pin.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接将直流模型电机连接到微控制器的 PWM 引脚来为其供电，但这通常是不推荐的：电机消耗大量电力，许多微控制器限制每个引脚的电流输出。
- en: A more advisable solution, which we will be using in this chapter, is to use
    an external motor controller; these usually contain the circuitry necessary to
    do more complex movement with your motors (such as allowing them to go backwards),
    and allow for an external power supply that provides the necessary power to your
    motors without drawing it from the microcontroller.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 更推荐的解决方案，我们将在本章中使用，是使用外部电机控制器；这些通常包含进行更复杂运动所需的电路（例如允许它们反向运动），并允许外部电源为电机提供必要的电力，而不会从微控制器中吸取电力。
- en: Preparing for a motor-driven project with Raspberry Pi
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备使用树莓派进行电机驱动项目
- en: 'In order to get started with motors using Johnny-Five and the Raspberry Pi,
    we''ll need to add a hat (think Arduino shields, but for the Pi, or add-on boards
    that stack on the Pi if you''re new to electronics) that allows us to:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Johnny-Five 和树莓派开始学习电机，我们需要添加一个帽子（想象一下 Arduino 面板，但针对 Pi，或者如果你是电子新手，则是堆叠在
    Pi 上的附加板）以使我们能够：
- en: Provide external power to the motors
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为电机提供外部电源
- en: Control the motors better than the Pi can on its own (especially in the case
    of the stepper motor)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比树莓派本身控制电机更好（尤其是在步进电机的情况下）
- en: Putting the hat together
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组装帽子
- en: 'Wire the battery pack and the motor to the hat''s screw terminals like so:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 按照如下方式将电池组和电机连接到帽子的螺丝端子：
- en: '![](img/4d9c3bad-3799-4ee9-9bbb-a5e56d3f410a.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4d9c3bad-3799-4ee9-9bbb-a5e56d3f410a.png)'
- en: The yellow wire in the diagram should be your ground wire (usually black) and
    the green should be your power wire (usually red).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图中的黄色线应该是你的地线（通常是黑色），绿色应该是你的电源线（通常是红色）。
- en: Putting the hat on the Pi
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将帽子安装在 Pi 上
- en: 'Remove all power from the Pi, and make sure the battery pack is switched off.
    Also, remove the cobbler from the GPIO pins if it is still attached. Then, line
    up the sockets on the bottom of the hat with the pins on the top of the Pi, in
    the direction that makes it so the hat is situated over the Pi. Then, gently press
    down on the hat until it settles. **Don''t press hard— you may bend some of the
    Pi''s pins**. When all is said and done, it should look something like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Pi 上移除所有电源，并确保电池组已关闭。此外，如果它还连接在 GPIO 引脚上，请移除 Cobbler。然后，将帽子底部的插槽与 Pi 顶部的引脚对齐，使其位于
    Pi 之上。然后，轻轻按下帽子直到它就位。**不要用力按——你可能会弯曲一些 Pi 的引脚**。一切就绪后，它应该看起来像这样：
- en: '![](img/4434fd90-4e00-4061-88e1-0e2029248660.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4434fd90-4e00-4061-88e1-0e2029248660.png)'
- en: 'And the motor should be plugged into the screw terminals, like so:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 电机应该这样插入螺丝端子：
- en: '![](img/4e538a40-bd6c-474b-86fc-47af5a316c01.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4e538a40-bd6c-474b-86fc-47af5a316c01.png)'
- en: Re-apply power to the Pi, and we'll get started coding using the Johnny-Five
    motor object.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重新为 Pi 上电，然后我们将开始使用 Johnny-Five 电机对象进行编码。
- en: The Johnny-Five motor object
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Johnny-Five 电机对象
- en: The motor object in Johnny-Five allows us to easily control our motors without
    having to worry about communicating with the hat via the Pi. Let's code a test
    setup with the REPL before coding our project, to make sure everything is working.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Johnny-Five 中的电机对象允许我们轻松控制电机，而无需担心通过 Pi 与帽子通信。在我们编写项目之前，让我们用 REPL 编写一个测试设置，以确保一切正常。
- en: 'Create a new `project` folder and, inside it, run the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 `project` 文件夹，并在其中运行以下命令：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And, create a file in the folder named `motor-test.js`. Start by requiring
    in Johnny-Five and Raspi-IO, instantiating your board object, and creating a `board.on(''ready'')`
    handler, as we usually do:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在文件夹中创建一个名为 `motor-test.js` 的文件。首先，引入 Johnny-Five 和 Raspi-IO，实例化你的板对象，并创建一个
    `board.on('ready')` 处理器，就像我们通常做的那样：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, we're ready to set up our motor object, keeping in mind that we'll need
    to configure for our hat.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好设置我们的电机对象，记住我们需要为我们的帽子进行配置。
- en: Constructors for our hat
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们帽子的构造函数
- en: 'If you are using the Adafruit hat, your constructor is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Adafruit 帽子，你的构造函数如下：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And if you''re using the L293D hat, your constructor is as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 L293D 帽子，你的构造函数如下：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Place whichever one applies inside the `board.on('ready')` function.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 将适用的任何一个放入 `board.on('ready')` 函数中。
- en: Functions that move the motor
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动电机的函数
- en: 'Referencing the Johnny-Five documentation, there are a few functions that will
    allow us to move the motor from the command line using the REPL:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 参考 Johnny-Five 文档，有几个函数允许我们通过命令行使用 REPL 移动电机：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now that we know how to control the motor, let's add the REPL functionality
    to test it
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何控制电机，让我们添加 REPL 功能来测试它
- en: Adding REPL control
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加 REPL 控制
- en: 'At the end of the `board.on(''ready'')` function, add the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `board.on('ready')` 函数的末尾添加以下内容：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And now we have full control!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了完全的控制权！
- en: Loading and running your motor
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载和运行你的电机
- en: 'Load the project onto the Pi, and navigate to the folder in the Pi ssh session.
    Then, run the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将项目加载到 Pi 上，并在 Pi 的 ssh 会话中导航到该文件夹。然后，运行以下命令：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once that''s completed, turn on the battery pack and run the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 完成之后，打开电池组并运行以下命令：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once you see *Board Initialized*, you should try out some of the commands from
    before:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦看到 *Board Initialized*，你应该尝试之前的一些命令：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Hopefully, your motor is happily spinning away!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你的电机正在愉快地旋转！
- en: Troubleshooting your motorized projects
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决你的电机项目故障
- en: 'But what if your motor doesn''t turn? Here are a few things to check if your
    motor isn''t spinning around:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你的电机不转动怎么办？如果你的电机没有旋转，这里有几点需要检查：
- en: 'Is the battery pack for the motor hat turned on? Don''t laugh, I''ve spent
    many a minute wondering why it wasn''t working only to discover it lacked power.
    There''s a power light on most motor hats that let you know it has power:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电机帽子的电池组已经打开了吗？不要笑，我花了很多时间在怀疑为什么它不起作用，最后发现它没有电源。大多数电机帽子上都有一个电源指示灯，告诉你它是否有电：
- en: '![](img/7e266636-c583-4a97-9b65-6ad94a531823.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7e266636-c583-4a97-9b65-6ad94a531823.png)'
- en: The power LED on the Adafruit hat is just above the screw terminals for the
    external power, and lights up red
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Adafruit 帽子上的电源 LED 正在外部电源的螺丝端子上方，并亮起红色
- en: Are your batteries fresh? Motors take up a lot of power, and extended use can
    wear them down pretty fast.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的电池是新的是吗？电机消耗的电量很大，长时间使用会很快耗尽它们。
- en: 'As I mentioned in the first chapter: check your wiring. Then, check it again.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如我在第一章中提到的：检查你的接线。然后，再检查一遍。
- en: Make sure all of the wires are securely fastened in the correct screw terminals
    so that a light yank cannot dislodge them.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保所有电线都牢固地固定在正确的螺丝端子上，这样轻轻一拉就不会松动。
- en: Are you using rechargeable batteries? If so, I admire your commitment to reuse,
    but you're going to want 6 rechargeable running your motor due to differences
    in voltages between rechargeable and non-rechargeable batteries.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你在使用可充电电池吗？如果是这样，我钦佩你对再利用的承诺，但你需要 6 个可充电电池来运行电机，因为可充电电池和非可充电电池之间的电压不同。
- en: Hopefully, if your motor wasn't spinning before, it is now, and we can build
    our first project.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你的电机之前没有旋转，现在应该已经旋转了，我们可以构建我们的第一个项目。
- en: Project – cat toy
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目 – 猫玩具
- en: In this project, we'll add a piece of paper to our motor, and then code some
    randomness to make it spin back and forth at varying speeds (cats get bored with
    a predictable toy, after all).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将在电机上放一张纸，然后编写一些随机代码，使其以不同的速度来回旋转（毕竟，猫对可预测的玩具会感到无聊）。
- en: The wiring for this project is the same as the motor test; no need to change
    anything there.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的布线与电机测试相同；那里不需要做任何改变。
- en: Putting a piece of paper on the motor shaft
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在电机轴上放一张纸
- en: 'Either roll the sticky end of a long sticky note around the motor shaft, or
    tape a long strip of paper to it. It should look something like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要么用一条长粘性便条的粘性端绕着电机轴滚动，要么用一条长纸条粘在上面。它应该看起来像这样：
- en: '![](img/876ec6d9-4a0e-4737-baea-3d53eaafcfa9.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/876ec6d9-4a0e-4737-baea-3d53eaafcfa9.png)'
- en: After the relatively simple construction of our toy, let's code some randomness!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们玩具相对简单的构造之后，让我们编写一些随机的代码！
- en: Coding the randomness to start/stop the motor
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写代码以随机启动/停止电机
- en: We want the motor to start at a random speed for anywhere from 1-10 seconds,
    then stop for 1-10 seconds, and repeat. We also want whether it goes forward or
    backward to be random. I limited the speed to 75—anything faster was too much
    for my cats!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望电机以1-10秒内的任意速度启动，然后停止1-10秒，然后重复。我们还想让它向前或向后移动是随机的。我把速度限制在75——任何更快的东西对我来说猫都承受不了！
- en: 'In your `cat-toy.js` file, get rid of the `board.repl.inject` statement and
    add the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`cat-toy.js`文件中，删除`board.repl.inject`语句，并添加以下内容：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will randomize the starting and stopping, the speed, and the direction.
    My cats were at least mildly entertained by it. If you have cats, give it a try!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将随机化启动和停止、速度和方向。我的猫至少被它轻微地娱乐了。如果你有猫，不妨试试！
- en: 'Load the project onto the Pi, and navigate to the folder in the Pi SSH session.
    Then, run:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 将项目加载到Pi上，在Pi SSH会话中导航到该文件夹。然后运行：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And watch it go!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后看看它怎么走！
- en: We've got one motor going, but if you want to build a bot with wheels, we're
    gonna need two motors; let's take a look at that concept with our next project.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有一个电机在工作，但如果你想要制作一个带轮子的机器人，我们需要两个电机；让我们在下一个项目中看看这个概念。
- en: Project – using two gearbox motors and the motors object
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目 – 使用两个齿轮电机和电机对象
- en: Now that we've explored the motor object, let's dig a little deeper and build
    a project using two TT motors while exploring the motors object.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探索了电机对象，让我们深入一点，在探索电机对象的同时，使用两个TT电机构建一个项目。
- en: If you want to take this a step further, you can get yourself a chassis like
    this one from Adafruit [https://www.adafruit.com/product/3796](https://www.adafruit.com/product/3796)
    and a pair of wheels like these from Adafruit [https://www.adafruit.com/product/3757](https://www.adafruit.com/product/3757)
    and build yourself a moving 2-wheel robot! Just remember you'll have to either
    power the Pi with a battery pack (those little USB packs for charging your phone
    work great) or stay within range of your Pi's power cord. If you go with the latter,
    I'd secure the power jack into the Pi and be very careful not to let the bot pull
    too hard on anything. Honestly, I'd really just recommend using a battery if you're
    going to let your Pi move about on its own.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更进一步，你可以从Adafruit购买这样的底盘[https://www.adafruit.com/product/3796](https://www.adafruit.com/product/3796)和一对这样的轮子[https://www.adafruit.com/product/3757](https://www.adafruit.com/product/3757)，然后自己组装一个移动的2轮机器人！记住，你可能需要用电池组给Pi供电（那些为手机充电的小USB包效果很好）或者保持在Pi电源线的范围内。如果你选择后者，我会把电源插头固定在Pi上，并且非常小心不要让机器人拉得太用力。说实话，如果要让Pi自己移动，我强烈建议使用电池。
- en: Wiring up your TT motors
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接你的TT电机
- en: For this diagram, pretend the normal DC motors are our TT motors—yellow will
    be the ground (usually black) wire, and the green will be the power (normally
    red) wire.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个图，假设正常的直流电机是我们的TT电机——黄色将是地线（通常是黑色）线，绿色将是电源线（通常是红色）。
- en: '![](img/59a9dcca-4ac8-4a45-a754-0c0e61107275.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/59a9dcca-4ac8-4a45-a754-0c0e61107275.png)'
- en: Now it's time to get started coding our motors to perform common wheeled-vehicle
    movements using Johnny-Five and the motors object.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候开始编写代码，让我们的电机使用Johnny-Five和电机对象执行常见的轮式车辆运动了。
- en: The motors Johnny-Five object
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Johnny-Five的电机对象
- en: 'Create a new file in your project folder called `driver-bot.js`. Start with
    the usual setup of the Johnny-Five and Raspi-IO libraries, your board object,
    and your `board.on(''ready'')` handler:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的项目文件夹中创建一个名为`driver-bot.js`的新文件。从Johnny-Five和Raspi-IO库的常规设置开始，你的板对象，以及你的`board.on('ready')`处理程序：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, inside the `board.on(''ready'')` handler, we''ll add the constructors
    for our two TT motors:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`board.on('ready')`处理程序中，我们将添加两个TT电机的构造函数：
- en: 'If you are using the Adafruit hat, your constructors are:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Adafruit帽子，你的构造函数是：
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And if you''re using the L293D hat, your constructors are:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是L293D帽子，你的构造函数是：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now that our motors are constructed, we''ll create our Motors object by passing
    it an array containing `leftMotor` and `rightMotor`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了电机，我们将通过传递包含`leftMotor`和`rightMotor`的数组来创建Motors对象：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Before we start writing our driving functions, let''s talk a little about the
    benefits of the Motors object. The main benefit to having your motors in a Motors
    object is to maintain control over each individual motor while also being able
    to control them all at once. For example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写驾驶函数之前，让我们谈谈Motors对象的好处。将你的电机放在Motors对象中的主要好处是，在同时能够控制所有电机的同时，还能保持对每个单独电机的控制。例如：
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The motors object allows you to call any Motor object function and it will perform
    it on all of the motors at once.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Motors对象允许你调用任何Motor对象函数，并且它将一次性在所有电机上执行。
- en: Let's use this knowledge to write some common driving functions that we can
    use with our motors.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们利用这些知识来编写一些常见的驾驶函数，我们可以用这些函数与我们的电机一起使用。
- en: Writing some functions
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写一些函数
- en: 'First things first, we''ll want to let our robot go forward. Inside the `board.on(''ready'')`
    handler of `driver-bot.js`, add:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们希望让我们的机器人向前行驶。在`driver-bot.js`的`board.on('ready')`处理程序中，添加以下内容：
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here we see again the benefit of the `motors` object; we don't have to tell
    the right and left motor to move forward separately.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们再次看到了`motors`对象的好处；我们不需要分别告诉左右电机向前移动。
- en: 'Let''s add another function to let our motors coast to a stop:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加另一个函数，让我们的电机滑行到停止：
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And another to let our robot go backward:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个让我们的机器人向后行驶：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that those are done, how about we add some turns? Luckily, the `motors`
    object still lets us control each motor individually—so turns are no problem:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经完成这些，我们再添加一些转弯如何？幸运的是，`motors`对象仍然允许我们单独控制每个电机——所以转弯不是问题：
- en: '[PRE19]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Finally, let''s add the ability to spin left or right in place:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们添加原地左转或右转的能力：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, our motors have everything they need to drive around! Let''s give ourselves
    REPL access to these methods, the `motors` object, and the `motor` objects:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的电机拥有了它们驱动所需的全部！让我们给自己提供REPL访问这些方法、`motors`对象和`motor`对象：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: And now we're ready to load up our code and take our motors for a spin (both
    metaphorically and literally)!
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好加载我们的代码，并让我们的电机转起来（既指比喻意义也指字面意义）！
- en: Running our motors project
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行我们的电机项目
- en: 'Load the project onto the Pi, and navigate to the folder in the Pi SSH session.
    Then, run:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 将项目加载到Pi上，并在Pi SSH会话中导航到该文件夹。然后运行：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once you see *Board Initialized*, feel free to try out our new functions:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你看到*Board Initialized*，你可以自由尝试我们的新函数：
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: And that's it—you've written all the code you need to drive a two-wheeled robot!
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样——你已经编写了你需要驱动两轮机器人的所有代码！
- en: As a bonus project, think of a way you could drive the bot without having to
    type out the function names each time!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 作为附加项目，想想你如何能够驱动机器人而不必每次都输入函数名！
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we learned about the first component that adds movement to
    our bots: the motor. We learned about the types of motors, and how to interface
    one with a microcontroller. Then, we wrote code to test our motor with the Pi
    hat and the REPL, and we built a small randomized cat toy using our knowledge
    of the Johnny-Five Motor object. Finally, we built a project that allowed us to
    explore hands-on the abilities of the Motors object and write code to drive a
    two-wheeled robot.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了为我们的机器人添加运动的第一组件：电机。我们学习了电机的类型以及如何将它们与微控制器接口连接。然后，我们编写了代码来测试我们的电机与Pi帽和REPL，并利用我们对Johnny-Five
    Motor对象的了解制作了一个小型随机猫玩具。最后，我们构建了一个项目，使我们能够亲手探索Motors对象的能力，并编写代码来驱动两轮机器人。
- en: Questions
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is a motor?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 电机是什么？
- en: What's the difference between a motor and a stepper motor?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 电机和步进电机有什么区别？
- en: Why should you use external power for motors?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么你应该为电机使用外部电源？
- en: Why do we need a hat to control our motor?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们需要一个帽子来控制我们的电机？
- en: What are the benefits of the Motors object when using multiple motors?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用多个电机时，Motors对象有哪些好处？
