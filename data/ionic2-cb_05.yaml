- en: Chapter 5. Adding Animation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：添加动画
- en: 'In this chapter, we will cover the following tasks related to adding animation
    and interaction to the app:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍与向应用添加动画和交互相关的以下任务：
- en: Embedding fullscreen inline video as background
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将全屏内联视频嵌入为背景
- en: Creating physics-based animation using Dynamics.js
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Dynamics.js创建基于物理的动画
- en: Animating the slide component by binding gesture to animation state
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将手势绑定到动画状态来动画化幻灯片组件
- en: Adding background CSS animation to the login page
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向登录页面添加背景CSS动画
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: User experience is crucial for the initial traction of users. When your early
    adopters use the app for the first time, they will have a better impression, which
    creates trust and increases retention. App animation will also provide interactive
    feedback for the users so that they know what to do or take action based on very
    gentle visual hints.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 用户体验对于用户的初始吸引力至关重要。当您的早期用户第一次使用应用时，他们会有更好的印象，这会建立信任并提高留存率。应用动画也将为用户提供交互式反馈，以便他们知道该做什么或根据非常温和的视觉提示采取行动。
- en: Native apps used to have an advantage over web-based hybrid apps because of
    animation performance. However, frameworks like Ionic and Angular have closed
    the gap in performance a lot in the recent years. Web animation is also easier
    to learn and code since many frontend developers are already familiar with JavaScript
    and CSS.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 原生应用曾经因为动画性能而优于基于Web的混合应用。然而，像Ionic和Angular这样的框架在近年来在性能上已经缩小了很多差距。Web动画也更容易学习和编码，因为许多前端开发者已经熟悉JavaScript和CSS。
- en: In this chapter, you will learn how to do basic animation using video and CSS.
    Then, you will start utilizing physics-based animation to create interesting interactivity.
    Moreover, you could even bind the gesture frame by frame so that your animation
    happens instantly during a swipe event.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用视频和CSS进行基本动画。然后，您将开始利用基于物理的动画来创建有趣的交互。此外，您甚至可以逐帧绑定手势，以便在滑动事件发生时动画能够即时播放。
- en: Embedding full screen inline video as background
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将全屏内联视频嵌入为背景
- en: Today, there are many apps leveraging video as an animated background for the
    introduction screen. This makes the app more interesting and creative. The users
    feel that they are welcomed to the app. This tactic is great to impress new users
    and encourage them to come back.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有许多应用利用视频作为介绍屏幕的动画背景。这使得应用更加有趣和富有创意。用户会感觉到他们受到了欢迎。这种策略对于给新用户留下深刻印象并鼓励他们回来是非常好的。
- en: 'This section will teach you how to add a video with autoplay in the background:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将教您如何在背景中添加自动播放的视频：
- en: '![Embedding full screen inline video as background](img/image00261.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![将全屏内联视频嵌入为背景](img/image00261.jpeg)'
- en: You will also learn how to use `animate.css` to add custom animation to the
    app header text.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将学习如何使用`animate.css`为应用头部文本添加自定义动画。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This app example could work either in the browser or on a physical device. However,
    it's optional that you connect your physical device to verify that the animation
    is playing correctly in the background.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用示例可以在浏览器或物理设备上运行。然而，您可以选择将物理设备连接到应用以验证动画在背景中是否正确播放。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the instructions:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是操作说明：
- en: 'Create a new `VideoIntro` app using the `blank` template, as shown, and go
    into the `VideoIntro` folder:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`blank`模板创建一个新的`VideoIntro`应用，如图所示，并进入`VideoIntro`文件夹：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You need to have your video ready at this point. However, for this example,
    let's download a free video from a public website that does not require a license.
    Navigate to [http://www.coverr.co](http://www.coverr.co).
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您此时需要准备好您的视频。然而，对于这个示例，让我们从不需要许可证的公共网站上下载一个免费视频。导航到[http://www.coverr.co](http://www.coverr.co)。
- en: You can download any video. The example in this app uses the `Blurry-People.mp4`
    clip. Download it to your computer:![How to do it...](img/image00262.jpeg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以下载任何视频。本应用中的示例使用的是`Blurry-People.mp4`剪辑。将其下载到您的电脑上：![如何操作...](img/image00262.jpeg)
- en: Save the videos in `./src/assets/`:![How to do it...](img/image00263.jpeg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将视频保存到`./src/assets/`目录下：![如何操作...](img/image00263.jpeg)
- en: 'Open the `./src/index.html` file and replace the content with the following
    code:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/index.html`文件，将其内容替换为以下代码：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Basically, the main difference with the original `index.html` file is that you
    want to include the `Google Lobster` font for the heading text and `animate.css`
    for animation.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与原始的`index.html`文件的主要区别在于，您想要包含用于标题文本的`Google Lobster`字体和用于动画的`animate.css`。
- en: 'For the main template, you can modify the `./src/pages/home.html` file and
    replace it with the following code:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于主模板，你可以修改`./src/pages/home.html`文件，并用以下代码替换它：
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There are only two important items on this page: the video and the header with
    subheader.'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个页面只有两个重要的项目：视频和带有副标题的页眉。
- en: 'Open and edit the `./src/pages/home/home.scss` file in the same folder using
    the following code:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码在同一个文件夹中打开并编辑`./src/pages/home/home.scss`文件：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: All animation is done using CSS; thus, you don't need to write any code for
    the JavaScript file.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有动画都是使用CSS完成的；因此，你不需要为JavaScript文件编写任何代码。
- en: 'Open the `config.xml` file and add the following line within the `<widget>`
    tag:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`config.xml`文件，并在`<widget>`标签内添加以下行：
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Go to your terminal and run the app with the following command:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的终端，使用以下命令运行应用：
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Let''s start with the `home.html` file because that is the only page where
    you added the animation:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`home.html`文件开始，因为这是唯一添加了动画的页面：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is just a typical `<video>` tag in HTML5\. However, there is a new attribute,
    called `webkit-playsinline`. This means that you want the video to play where
    it is on the HTML page and not open it up fullscreen with the play control. The
    reason is that you want this video to play in the background, while you can animate
    text on top of it. This is the reason you need to enable this feature by setting
    `AllowInlineMediaPlayback` in `config.xml`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个典型的HTML5 `<video>`标签。然而，有一个新的属性，称为`webkit-playsinline`。这意味着你希望视频在HTML页面上播放，而不是全屏播放并打开播放控制。原因是你希望这个视频在后台播放，同时你可以在其上方动画文本。这就是为什么你需要通过在`config.xml`中设置`AllowInlineMediaPlayback`来启用这个功能。
- en: 'The second item in this template is your header and subheader:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模板的第二项是你的页眉和副标题：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that there are `animated` and `zoomIn` classes included. These are the
    required classes for `animate.css` to kick in. If you run the app, you will see
    the text starting to appear from a smaller size to a bigger size (that is, a zoom-in
    effect).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这里包含了`animated`和`zoomIn`类。这些是`animate.css`启动所必需的类。如果你运行这个应用，你会看到文本从较小的尺寸开始逐渐放大（即缩放效果）。
- en: 'The `home.scss` file is important because it has a lot of animation logic.
    Let''s take a look at the header text first:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`home.scss`文件很重要，因为它包含了很多动画逻辑。我们先看看页眉文本：'
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: One interesting thing here is the use of the `text-shadow` attribute. This is
    because you want to create a thin border line around the text so that your white
    text can be easily seen on top of a light background.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个有趣的地方是使用了`text-shadow`属性。这是因为你想要在文本周围创建一个细的边框线，这样你的白色文本就可以在浅色背景上容易被看到。
- en: 'To set the video to fullscreen, you need it to have a negative index so that
    it''s below the other layers. Also, the height must be 100%. This is shown as
    follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要将视频设置为全屏，你需要给它一个负的索引，这样它就会在其他层下面。同时，高度必须是100%。如下所示：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, in order to position the text vertically in the center, you have to
    create this class:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了使文本垂直居中，你必须创建这个类：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `center` class forces the element to have top of 50% but then push the Y
    position -50% to reset the vertical pivot of the `<div>` tag in the middle area.
    You will rarely need to customize such classes; thus, it's good to keep the `center`
    class handy for future use.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`center`类强制元素顶部为50%，然后推Y位置-50%以重置中间区域`<div>`标签的垂直中心点。你很少需要自定义这样的类；因此，保留`center`类以备将来使用是个好主意。'
- en: Creating a physics-based animation using Dynamics.js
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Dynamics.js创建基于物理的动画
- en: Using physics-based animations can make your app more interactive and lively,
    which helps attract and retain more users. There are many methods to add physics
    to your component animation. For example, you could even use the CSS `animation-timing`
    function to add property values, such as `ease-in`, `ease-out`, or `cubic-bezier`.
    However, it's easier and better to use an existing JavaScript-based physic animation.
    `Dynamics.js` is one of those JavaScripts that comes with utilities and performance.
    Using native CSS physic features is actually not a good practice as it comes with
    a frame-per-second penalty on mobile devices.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基于物理的动画可以使你的应用更加互动和生动，这有助于吸引和保留更多用户。有许多方法可以将物理添加到组件动画中。例如，你甚至可以使用CSS的`animation-timing`函数来添加属性值，如`ease-in`、`ease-out`或`cubic-bezier`。然而，使用现有的基于JavaScript的物理动画会更简单、更好。`Dynamics.js`就是那些带有实用工具和性能的JavaScript之一。实际上，使用原生的CSS物理特性并不是一个好的做法，因为它在移动设备上会带来每秒帧数的惩罚。
- en: 'The app will show a bouncing button, which can show and hide a top quote box,
    as follows, it also uses physics animation:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将显示一个弹跳按钮，它可以显示和隐藏一个顶部引言框，如下所示，它也使用了物理动画：
- en: '![Creating a physics-based animation using Dynamics.js](img/image00264.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Dynamics.js 创建基于物理的动画](img/image00264.jpeg)'
- en: Getting ready
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This app example could work either in a browser or on a physical device. However,
    it's recommended that you run the app via your physical device to test for performance.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序示例可以在浏览器或物理设备上运行。然而，建议您通过物理设备运行应用程序以测试性能。
- en: How to do it...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the instructions:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是说明：
- en: 'Open a terminal window, create a new `SpinningButton` app using the `blank`
    template, and go into the `SpinningButton` folder:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，使用 `blank` 模板创建一个新的 `SpinningButton` 应用程序，并进入 `SpinningButton` 文件夹：
- en: '[PRE11]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Visit [http://dynamicsjs.com/](http://dynamicsjs.com/) and download the `dynamics.min.js`
    file to your `./src/assets` folder, as follows:![How to do it...](img/image00265.jpeg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [http://dynamicsjs.com/](http://dynamicsjs.com/) 并将 `dynamics.min.js` 文件下载到您的
    `./src/assets` 文件夹中，操作如下：![如何操作...](img/image00265.jpeg)
- en: 'Open the `./src/index.html` file and replace the code with the following:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./src/index.html` 文件，用以下代码替换：
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The key part of this file is to ensure that `dynamics.min.js` is included.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此文件的关键部分是确保包含 `dynamics.min.js`。
- en: 'Open and edit the `./src/pages/home/home.html` file to replace the content
    with the following:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并编辑 `./src/pages/home/home.html` 文件，用以下内容替换内容：
- en: '[PRE13]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There is no need to have header navigation in this app because it will just
    be a single page.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此应用程序中不需要头部导航，因为它将只是一个单页应用。
- en: 'Open the `home.ts` file for editing in the same folder as Step 2, with the
    following code:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与步骤 2 相同的文件夹中打开 `home.ts` 文件进行编辑，以下代码：
- en: '[PRE14]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that you must import the `dynamics` object in this file.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，您必须在此文件中导入 `dynamics` 对象。
- en: 'Modify the `home.scss` stylesheet, as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `home.scss` 样式表，如下所示：
- en: '[PRE15]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Go to your terminal and run the app with the following command:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您的终端，使用以下命令运行应用程序：
- en: '[PRE16]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works…
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The main concept behind the physics animation in this app is the `dynamics.animate`
    method from the `Dynamics.js` library. Let''s start with the button in the template,
    as shown:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序中物理动画背后的主要概念是来自 `Dynamics.js` 库的 `dynamics.animate` 方法。让我们从模板中的按钮开始，如下所示：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is your floating button that you can click to create a nice bouncing effect
    by calling the `animateMe()` method.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您可以点击以通过调用 `animateMe()` 方法创建良好弹跳效果的浮动按钮。
- en: Tip
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: To learn more about Ionic 2's floating button, you can refer to the Ionic documentation
    at [http://ionicframework.com/docs/v2/components/#floating-action-buttons](http://ionicframework.com/docs/v2/components/#floating-action-buttons).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Ionic 2 浮动按钮的信息，您可以参考 [http://ionicframework.com/docs/v2/components/#floating-action-buttons](http://ionicframework.com/docs/v2/components/#floating-action-buttons)
    的 Ionic 文档。
- en: 'The simple logic here is as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的简单逻辑如下：
- en: If the button is animated, `isAnimating` must be `True`. Once it's `True`, any
    additional click will not trigger the animation since we don't want the physics
    to kick in multiple times.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果按钮正在动画，`isAnimating` 必须为 `True`。一旦为 `True`，任何额外的点击都不会触发动画，因为我们不希望物理效果多次触发。
- en: If the top quote bar is displayed, `isQuoteShown` must be `True`. Otherwise,
    it will call a different animation to hide it.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果顶部引言栏显示，`isQuoteShown` 必须为 `True`。否则，它将调用不同的动画来隐藏它。
- en: 'You can pass many options in the `dynamics.animate` method. For example, the
    button will use `dynamics.bounce` as the type; thus, it will bounce up and down
    on each click. You can also specify the duration to be applied to the animation
    process itself. After the animation is done, it will trigger the callback in the
    `complete` function, as illustrated:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `dynamics.animate` 方法中传递许多选项。例如，按钮将使用 `dynamics.bounce` 作为类型；因此，每次点击都会上下弹跳。您还可以指定应用于动画过程的持续时间。动画完成后，它将在
    `complete` 函数中触发回调，如图所示：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: An important thing to keep in mind is that `Dynamics.js` must refer to the DOM
    JavaScript object itself and not the DOM node or Ionic object. That's why you
    have to use `el._elementRef.nativeElement` to point to the native element object
    instead.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的一个重要事项是 `Dynamics.js` 必须引用 DOM JavaScript 对象本身，而不是 DOM 节点或 Ionic 对象。这就是为什么您必须使用
    `el._elementRef.nativeElement` 来指向原生元素对象。
- en: 'For the quote box, it creates a local variable, called `myCard`, in the template,
    as shown:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于引言框，它在模板中创建了一个局部变量，称为 `myCard`，如下所示：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You must refer to this variable using the `ViewChild` decorator, as shown,
    so that `@Page` knows to include it as a dependency:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须像下面这样使用`ViewChild`装饰器来引用此变量，这样`@Page`就知道将其作为依赖项包含：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: See also
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: If you are interested in learning more about native CSS physics-based animation,
    visit [https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function).
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于原生CSS基于物理的动画，请访问[https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function)。
- en: Animating the slide component by binding a gesture to the animation state
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过将手势绑定到动画状态来动画化幻灯片组件
- en: Another way to get a *wow* experience from users is to have great-looking introduction
    slides. A typical app would have three to five slides to describe what the app
    does and how it will benefit the users. Today, many apps even add videos or interactive
    screens so that the users can get a *feel* for how the app may work. Such an interactive
    animation will require some internal development to bind touch gestures to the
    animation state. Animating based on a specific state is very difficult because
    you really have to get granular gesture data. On the other hand, it's a lot easier
    to just animate at the beginning or ending of a state. For example, you could
    animate an object inside a slide when the slide completely shows up on the screen
    after a left swipe. However, this animation effect is not as interesting or attractive
    as binding the animation during the touch movement.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户那里获得*哇*体验的另一种方式是拥有看起来很棒的介绍幻灯片。一个典型的应用程序会有三到五张幻灯片来描述应用程序的功能以及它将如何造福用户。今天，许多应用程序甚至添加了视频或交互式屏幕，以便用户可以感受到应用程序可能的工作方式。这样的交互式动画需要一些内部开发来将触摸手势绑定到动画状态。基于特定状态的动画非常困难，因为你真的需要获取粒度手势数据。另一方面，在状态的开始或结束时进行动画要容易得多。例如，您可以在幻灯片完全显示在屏幕上之后，通过向左滑动来动画化幻灯片内的对象。然而，这种动画效果不如在触摸移动过程中绑定动画那样有趣或吸引人。
- en: 'The app you will build in this section will have three slides that will animate
    when you swipe left or right:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中构建的应用程序将包含三个幻灯片，当您向左或向右滑动时，这些幻灯片将进行动画处理：
- en: '![Animating the slide component by binding a gesture to the animation state](img/image00266.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![通过将手势绑定到动画状态来动画化幻灯片组件](img/image00266.jpeg)'
- en: 'You will see fade in and fade out animation effects between slides. The following
    Angular logo also moves up when you swipe left from the second slide:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到幻灯片之间的淡入和淡出动画效果。以下Angular标志在从第二个幻灯片向左滑动时也会向上移动：
- en: '![Animating the slide component by binding a gesture to the animation state](img/image00267.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![通过将手势绑定到动画状态来动画化幻灯片组件](img/image00267.jpeg)'
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: There is no need to test the app in a physical device because the animation
    is done via HTML and JavaScript. However, it's recommended to test the app in
    your device to evaluate to animation performance.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于动画是通过HTML和JavaScript完成的，因此不需要在物理设备上测试应用程序。然而，建议在您的设备上测试应用程序以评估动画性能。
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the instructions:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是说明：
- en: 'Create a new `SliderAnimation` app using the `blank` template, as follows,
    and go to the `SliderAnimation` folder:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`blank`模板创建一个新的`SliderAnimation`应用程序，如下所示，并进入`SliderAnimation`文件夹：
- en: '[PRE21]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Open the `./src/pages/home/home.html` file and modify its content with the
    following code:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/pages/home/home.html`文件，并使用以下代码修改其内容：
- en: '[PRE22]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This template mainly uses the `<ion-slides>` tag. However, there are some layers
    to float on top of the `<ion-slide>` tag in order to animate them separately.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此模板主要使用`<ion-slides>`标签。然而，有一些层浮在`<ion-slide>`标签之上，以便单独对它们进行动画处理。
- en: 'After this, replace the content of `./src/pages/home/home.ts` with the following:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将`./src/pages/home/home.ts`的内容替换为以下内容：
- en: '[PRE23]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note that the comments are useful to calculate an animation formula for each
    object.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，注释对于计算每个对象的动画公式很有用。
- en: 'Edit `./app/pages/home/home.scss` with the following:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容编辑`./app/pages/home/home.scss`：
- en: '[PRE24]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Go to your Terminal and run the app with the following command:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入您的终端，并使用以下命令运行应用程序：
- en: '[PRE25]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works…
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'This is the general process for animation:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是动画的一般过程：
- en: Since there are three slides, the user has to swipe twice to reach the end.
    This means that the first swipe will be at 50% progress.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于有三个幻灯片，用户必须滑动两次才能到达末尾。这意味着第一次滑动将在50%进度。
- en: When a user swipes left to 25%, the Ionic logo will fade out.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户向左滑动到25%时，Ionic标志将淡出。
- en: When a user swipes to 50%, the Angular logo will fade in for the second slide.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户滑动到50%时，Angular标志将在第二页淡入。
- en: When a user swipes to 75%, the Angular logo will move up to disappear instead
    of fading out.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户滑动到75%时，Angular标志将向上移动以消失，而不是淡出。
- en: Finally, in the last 75% to 100%, the JavaScript logo will fade in.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在最后75%到100%的过程中，JavaScript标志将淡入。
- en: 'You probably noted that the amount of fade or movement will depend on the progress
    percentage. Thus, if you swipe left and right a little bit, you can see the animation
    responding to the gesture right away. There are two *layers* in the template.
    The *floating* static layer, as illustrated, must be on top and it must stay at
    the same position regardless of which slide is current:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，淡入或移动的量将取决于进度百分比。因此，如果你稍微左右滑动，就可以立即看到动画对手势的反应。模板中有两层。如上图所示，*浮动*静态层必须位于顶部，并且无论当前是哪一页，它都必须保持在相同的位置：
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The bottom layer is your typical `<ion-slides>`, as shown:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 底层是你的典型`<ion-slides>`，如图所示：
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When you swipe, it's actually moving `<ion-slide>`. However, it also triggers
    the `onMove()` method because you bind it with the `move` event. The `onMove()`
    method will access `#slidefloat1`, `#slidefloat2`, and `#slidefloat3` from the
    floating `<div>` layer. The `home.ts` file is where you have to animate these
    individual floating slides.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当你滑动时，实际上是在移动`<ion-slide>`。然而，它也会触发`onMove()`方法，因为你将其与`move`事件绑定。`onMove()`方法将访问浮动`<div>`层中的`#slidefloat1`、`#slidefloat2`和`#slidefloat3`。`home.ts`文件是你必须对单个浮动幻灯片进行动画的地方。
- en: 'There are several variables that you need to declare in the `home.ts` file.
    You need to be able to access the `<ion-slides>` object in order to call the *native*
    Swiper methods:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在`home.ts`文件中，你需要声明几个变量。你需要能够访问`<ion-slides>`对象，以便调用*原生*Swiper方法：
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: According to the Ionic documentation, the `<ion-slides>` object is written based
    on the Swiper library at [http://ionicframework.com/docs/v2/api/components/slides/Slides/](http://ionicframework.com/docs/v2/api/components/slides/Slides/).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Ionic文档，`<ion-slides>`对象是基于Swiper库编写的，该库位于[http://ionicframework.com/docs/v2/api/components/slides/Slides/](http://ionicframework.com/docs/v2/api/components/slides/).
- en: You need to bind it with the swiping event natively in order to get the correct
    progress data.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要原生地将其与滑动事件绑定，以便获取正确的进度数据。
- en: 'The following three variables are necessary to access each floating slide:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下三个变量是访问每个浮动幻灯片所必需的：
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You need to leverage `requestAnimationFrame`, as follows, for the best animation
    performance:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要利用`requestAnimationFrame`，如下所示，以获得最佳的动画性能：
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Otherwise, users will sense a *jerky* movement during a swipe because your animation
    is not at 60 FPS.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，用户在滑动时会感觉到*颠簸*的运动，因为你的动画不是60 FPS。
- en: 'Lastly, you need to bind the swipe event only once; thus, it''s necessary to
    have a Boolean toggle to detect the binding event:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要只绑定一次滑动事件；因此，有必要有一个布尔切换来检测绑定事件：
- en: '[PRE31]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following code shows how to create a `requestAnimationFrame` object to
    call whichever function is to be rendered later:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了如何创建一个`requestAnimationFrame`对象来调用稍后要渲染的任何函数：
- en: '[PRE32]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `onMove()` method is where you put all the animation logic, which must
    bind with the `onProgress` event, as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`onMove()`方法是你放置所有动画逻辑的地方，它必须与`onProgress`事件绑定，如下所示：'
- en: '[PRE33]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'First, let''s take a look at the code at the bottom of `onMove()`, as shown:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看`onMove()`方法底部的代码，如图所示：
- en: '[PRE34]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Basically, you want to have four quarters (or segments) of animation. When you
    swipe from slide 1 to slide 2, it will trigger the `firstQuarter` and `secondQuarter`
    methods. That is, you want to fade out the first floating slide and fade in the
    second floating slide at the end of the process. The concept is similar for the
    `thirdQuarter` and `fourthQuarter` methods. Note that you don't want to call the
    method directly but just pass the function reference inside `this.rAf` to have
    the rendering engine manage the frame rate. Otherwise, the rendered function may
    end up blocking other processes in the UI, which causes jerky movement.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，你想要有四个四分之一（或部分）的动画。当你从幻灯片1滑动到幻灯片2时，它将触发`firstQuarter`和`secondQuarter`方法。也就是说，你希望在过程结束时淡出第一个浮动幻灯片并淡入第二个浮动幻灯片。对于`thirdQuarter`和`fourthQuarter`方法，概念是相似的。请注意，你不想直接调用方法，而是只需将函数引用传递给`this.rAf`内部，以便渲染引擎管理帧率。否则，渲染函数可能会阻塞UI中的其他进程，导致运动颠簸。
- en: 'For each of the quarters, you only have to change the `style` property, given
    a known **progress value**, as shown:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个象限，你只需要更改`style`属性，给定一个已知的**进度值**，如下所示：
- en: '[PRE35]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: It's important to use the arrow function here so that you can access the `this`
    context. You have to call `this.slidefloat2.nativeElement` to get to the `<div>`
    DOM object. It's really up to you to write your own math function to calculate
    the position or opacity during the slide movement with the progress value. In
    this example, the `slidefloat1Opacity` variable is just a linear function based
    on the `progress` input value.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里使用箭头函数很重要，这样你就可以访问`this`上下文。你必须调用`this.slidefloat2.nativeElement`来获取到`<div>`DOM对象。实际上，编写你自己的数学函数来计算滑动过程中的位置或不透明度，取决于你。在这个例子中，`slidefloat1Opacity`变量只是一个基于`progress`输入值的线性函数。
- en: 'The `secondQuarter` follows the same approach. However, the `thirdQuarter`
    uses the `transform` property instead of `opacity`, as illustrated:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`secondQuarter`遵循相同的方法。然而，`thirdQuarter`使用`transform`属性而不是`opacity`，如图所示：'
- en: '[PRE36]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: There are many ways to make a DOM object change its position. However, it's
    best to leverage the `transform` property instead of using the `left` and `top`
    properties. You want to achieve the highest Frame Per Second. In the `thirdQuarter`
    method, your `slidefloat2transform` will be calculated and it will update a new
    Y position using `translateY()`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以使DOM对象改变其位置。然而，最好利用`transform`属性而不是使用`left`和`top`属性。你想要达到最高的每秒帧数。在`thirdQuarter`方法中，你的`slidefloat2transform`将被计算，并使用`translateY()`更新一个新的Y位置。
- en: Tip
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that you must use `this.bindOnProgress` to disable another event binding
    to `onProgress` because, for each swipe, it will continue to add more events.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你必须使用`this.bindOnProgress`来禁用对`onProgress`的另一个事件绑定，因为对于每一次滑动，它都会继续添加更多的事件。
- en: See also
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: To understand more about `requestAnimationFrame`, you can check out the official
    documentation at [https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame)
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于`requestAnimationFrame`的信息，你可以查看官方文档[https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame)
- en: The Swiper API is located at [http://idangero.us/swiper/api/](http://idangero.us/swiper/api/)
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swiper API位于[http://idangero.us/swiper/api/](http://idangero.us/swiper/api/)
- en: Ionic 2 has an official usage example at [http://ionicframework.com/docs/v2/components/#slides](http://ionicframework.com/docs/v2/components/#slides)
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ionic 2在[http://ionicframework.com/docs/v2/components/#slides](http://ionicframework.com/docs/v2/components/#slides)有一个官方的使用示例
- en: Ionic 2 also provides a limited number of API for slides at [http://ionicframework.com/docs/v2/api/components/slides/Slides/](http://ionicframework.com/docs/v2/api/components/slides/Slides/)
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ionic 2还提供了有限的API用于幻灯片，在[http://ionicframework.com/docs/v2/api/components/slides/Slides/](http://ionicframework.com/docs/v2/api/components/slides/Slides/)
- en: Adding a background CSS animation to the login page
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为登录页面添加背景CSS动画
- en: Animation can also be completely done in CSS. In many cases, you will probably
    run into some interesting demos online and would like to incorporate the CSS-only
    code for animation. If the animation is not as critical to the user experience,
    you could just use to add additional effects to the app. CSS animation is great
    because you don't have to write JavaScript code to manage the animation and just
    leave the browser to process it.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 动画也可以完全使用CSS完成。在许多情况下，你可能会在网上遇到一些有趣的演示，并希望将仅使用CSS的动画代码集成进来。如果动画对用户体验不是那么关键，你只需使用它来为应用添加额外的效果。CSS动画很棒，因为你不需要编写JavaScript代码来管理动画，只需让浏览器处理它即可。
- en: 'In this section, you will build an app to show some floating squares in the
    background of your login page, as shown:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将构建一个应用，在登录页面的背景中显示一些浮动方块，如图所示：
- en: '![Adding a background CSS animation to the login page](img/image00268.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![为登录页面添加背景CSS动画](img/image00268.jpeg)'
- en: Getting ready
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: There is no need to test in a physical device because CSS animation will work
    just fine in the Ionic app.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要在物理设备上进行测试，因为在Ionic应用中CSS动画将运行得很好。
- en: How to do it...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Here are the instructions:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是说明：
- en: 'Create a new `BubbleLogin` app using the `blank` template, as follows, and
    go to the `BubbleLogin` folder:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`blank`模板创建一个新的`BubbleLogin`应用，如下所示，并进入`BubbleLogin`文件夹：
- en: '[PRE37]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Open the `./src/pages/home/home.html` file and modify the content with the
    following code:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/pages/home/home.html`文件，并使用以下代码修改内容：
- en: '[PRE38]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `bg-bubbles` class will convert a list of `<li>` into floating squares pieces.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`bg-bubbles` 类将 `<li>` 列表转换为浮动正方形块。'
- en: 'Edit `./src/pages/home/home.scss` with the following:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容编辑 `./src/pages/home/home.scss`：
- en: '[PRE39]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Go to your terminal and run the app with the following command:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端，并使用以下命令运行应用：
- en: '[PRE40]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: How it works…
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Since this app does not use JavaScript for animation, you will not need to modify
    anything in `home.ts`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此应用不使用 JavaScript 进行动画，因此您不需要在 `home.ts` 中进行任何修改。
- en: 'The CSS will drive the animation infinitely with the following code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将使用 CSS 无限驱动动画：
- en: '[PRE41]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You will also be using two points in the `square` keyframe:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将使用 `square` keyframe 中的两个点：
- en: '[PRE42]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: So, for a 0% to 100% loop, it will move 700 px vertically and rotate 600 degrees
    in the duration.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于 0% 到 100% 的循环，它将在垂直方向上移动 700 像素，并在持续时间内旋转 600 度。
- en: 'The reason that each square has a different size and speed is because you can
    customize the CSS as per the `<li>` tag further. Consider the following example:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 每个正方形具有不同的大小和速度的原因是，您可以根据 `<li>` 标签进一步自定义 CSS。考虑以下示例：
- en: '[PRE43]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Since this animation does not generate a random number of square objects and
    there are a limited number of objects, you could write a customization for each
    `<li>` tag in the CSS.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此动画不会生成随机数量的正方形对象，且对象数量有限，因此您可以为 CSS 中的每个 `<li>` 标签编写自定义代码。
- en: 'Note that you have to put the animation with `z-index: 0` because it will stay
    above other layers, such as form and button.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '注意，您必须将动画设置为 `z-index: 0`，因为它将保持在其他层（如表单和按钮）之上。'
- en: See also
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: To understand more about CSS keyframes, you can check out the Mozilla documentation
    at [https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes)
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于 CSS keyframes 的信息，您可以查看 Mozilla 文档，链接为 [https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes)
