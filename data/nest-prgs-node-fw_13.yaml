- en: Chapter 13\. Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章。架构
- en: As you now know, Nest.js is based on the same principles as Angular, so it is
    a good idea to have a similar structure as Angular’s.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道，Nest.js 基于与 Angular 相同的原则，因此将其结构与 Angular 类似是一个好主意。
- en: Before going into the file structure, we will see some guidelines about the
    naming and about how to structure our different directories and files in order
    to have an easy and more readable project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入文件结构之前，我们将看到一些关于命名和如何结构化不同目录和文件的指南，以便使项目更易读和可维护。
- en: 'We will take a look at the architecture for two different type of projects:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一下两种不同类型项目的架构：
- en: A server application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器应用程序
- en: A more complete app using `Angular universal` with Nest.js and Angular 6
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Angular universal` 与 Nest.js 和 Angular 6 创建更完整的应用程序
- en: By the end of the chapter, you should know how to structure your app either
    for a server application or a complete app with a client front-end.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章结束时，您应该知道如何为服务器应用程序或具有客户端前端的完整应用程序结构化您的应用程序。 '
- en: Style guide of naming conventions
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名约定的样式指南
- en: In this part, we will see the naming conventions that we can use in order to
    have better maintainability and readability. For each decorator, you should use
    the name with a hyphen for a composed name, followed by a dot and the name of
    the decorator or object to which it corresponds.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将看到可以使用的命名约定，以便具有更好的可维护性和可读性。对于每个装饰器，您应该使用带连字符的名称，后跟一个点和对应的装饰器或对象的名称。
- en: Controller
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器
- en: 'The naming of the controller should respect the following principle:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器的命名应遵循以下原则：
- en: '***user.controller.ts***'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '***user.controller.ts***'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Service
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务
- en: 'The naming of the service should respect the following principle:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 服务的命名应遵循以下原则：
- en: '***user.service.ts***'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '***user.service.ts***'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Module
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块
- en: 'The naming of the module should respect the following principle:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的命名应遵循以下原则：
- en: '***user.module.ts***'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '***user.module.ts***'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Middleware
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中间件
- en: 'The naming of the middleware should respect the following principle:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件的命名应遵循以下原则：
- en: '***authentication.middleware.ts***'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '***authentication.middleware.ts***'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Exception filter
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常过滤器
- en: 'The naming of the exception filter should respect the following principle:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 异常过滤器的命名应遵循以下原则：
- en: '***forbidden.exception.ts***'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '***forbidden.exception.ts***'
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Pipe
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道
- en: 'The naming of the pipe should respect the following principle:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 管道的命名应遵循以下原则：
- en: '***validation.pipe.ts***'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '***validation.pipe.ts***'
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Guard
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 守卫
- en: 'The naming of the guard should respect the following principle:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 守卫的命名应遵循以下原则：
- en: '***roles.guard.ts***'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '***roles.guard.ts***'
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Interceptor
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拦截器
- en: 'The naming of the interceptor should respect the following principle:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截器的命名应遵循以下原则：
- en: '***logging.interceptor.ts***'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '***logging.interceptor.ts***'
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Custom decorator
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义装饰器
- en: 'The naming of the custom decorator should respect the following principle:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义装饰器的命名应遵循以下原则：
- en: '***comment.decorator.ts***'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '***comment.decorator.ts***'
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Gateway
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网关
- en: 'The naming of the gateway should respect the following principle:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 网关的命名应遵循以下原则：
- en: '***comment.gateway.ts***'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '***comment.gateway.ts***'
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Adapter
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 适配器
- en: 'The naming of the adapter should respect the following principle:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 适配器的命名应遵循以下原则：
- en: '***ws.adapter.ts***'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '***ws.adapter.ts***'
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Unit test
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试
- en: 'The naming of the unit test should respect the following principle:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试的命名应遵循以下原则：
- en: '***user.service.spec.ts***'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '***user.service.spec.ts***'
- en: E2E test
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 端到端测试
- en: 'The naming of the e2e test should respect the following principle:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端测试的命名应遵循以下原则：
- en: '***user.e2e-spec.ts***'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '***user.e2e-spec.ts***'
- en: Now we have overviewed the tools provided by Nest.js and have put in place some
    naming guidelines. We can now move onto the next part.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经概述了 Nest.js 提供的工具，并制定了一些命名指南。我们现在可以进入下一部分了。
- en: Directory structure
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录结构
- en: It is important to have a project with a well-structured directory file in order
    for it to be much more readable, understandable, and easy to work with.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有良好结构化的目录文件的项目非常重要，因为这样更易读、易懂且易于使用。
- en: So, let’s see how we can structure our directory in order for it to be more
    clear. You will see in the following example the directory file architecture used
    for the repository, which has been created for this book using the naming convention
    described in the previous section.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们看看如何结构化我们的目录，以便更清晰。您将在以下示例中看到用于存储库的目录文件架构，该架构是使用前一节中描述的命名约定创建的。
- en: Server architecture
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器架构
- en: For the server architecture, you will see a proposed architecture used for the
    repository to have clean directories.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于服务器架构，您将看到一个用于存储库的建议架构，以便有清晰的目录。
- en: Complete overview
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完整概述
- en: 'See the base file structure without entering into too much detail:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 查看基本文件结构，不要深入细节：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We have four folders for this server that contain all of the files that we
    need for a complete server:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有四个文件夹用于存放服务器所需的所有文件：
- en: '`artillery` directory, if you need this it can contain all of the scenarios
    to test some end points of your API.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`artillery` 目录，如果需要，可以包含所有用于测试API端点的场景。'
- en: '`scripts` directory will contain all of the scripts that you need to use in
    your application. In our case the script to wait for the port used by `RabbitMQ`
    to open in order that the Nest.js application waits before starting.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scripts` 目录将包含您在应用程序中需要使用的所有脚本。在我们的情况下，等待 `RabbitMQ` 使用的端口打开的脚本，以便 Nest.js
    应用程序在启动之前等待。'
- en: '`migrations` A directory exists because we use `sequelize` and we have written
    some migration files that are stocked in this directory.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`migrations` 目录存在是因为我们使用了 `sequelize`，并且编写了一些迁移文件，这些文件存储在该目录中。'
- en: '`src` directory, which will contain all of the code for our server application.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src` 目录，其中包含我们服务器应用的所有代码。'
- en: In the repository, we also have a `client` directory. In this case, however,
    this one is only used as a sample of web socket usage.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在存储库中，我们还有一个 `client` 目录。但在这种情况下，它仅用作 WebSocket 使用的示例。
- en: The `src` directory
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`src` 目录'
- en: 'The `src` directory will contain all of the application modules, configurations,
    gateways and more. Let’s take a look at this directory:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`src`目录将包含所有应用程序模块、配置、网关等。让我们来看看这个目录：'
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This directory will also have to be well-structured. For this, we have created
    three sub-directories that correspond to the web socket gateways, which have all
    been put in the `gateways` directory. The `modules` will contain all of the modules
    needed for the application. Finally, `shared` will contain all of the shared content
    as its name suggests, corresponding with all of the `adapters`, `config` files,
    and `decorators` for the custom decorators and elements that can be used everywhere
    without belonging to any module in particular.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个目录也必须被良好地构建。为此，我们创建了三个子目录，对应于所有放在`gateways`目录中的Web套接字网关。`modules`将包含应用程序所需的所有模块。最后，`shared`将包含所有共享内容，如其名称所示，与所有`adapters`、`config`文件和自定义装饰器的元素对应，这些元素可以在任何模块中使用而不属于特定的模块。
- en: Now we will dive into the modules directory.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将深入研究模块目录。
- en: Modules
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模块
- en: 'The main part of your application will be structured as a module. This module
    will contain many different files. Let’s have a look at how a module can be structured:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序的主要部分将被构建为一个模块。这个模块将包含许多不同的文件。让我们看看一个模块可以如何构建：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In our repository, we have many modules. Some of them also implement the `cqrs`,
    and it is in the same directory as the module, because it concerns the module
    and is part of it. The `cqrs` parts are separated into the `commands` and `events`
    directories. A module can also define some interfaces and these are put into a
    separate `interfaces` directory. Separate directories allow us to have something
    that is much more readable and clear without having lots of different files mixed
    together. Of course, all of the tests concerning the modules are also included
    in their own directory `tests` and separated into the `unit` and `e2e`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的存储库中，有许多模块。其中一些还实现了`cqrs`，它与模块位于同一个目录，因为它涉及到模块并且是其一部分。`cqrs`部分分为`commands`和`events`目录。模块还可以定义一些接口，这些接口放在单独的`interfaces`目录中。单独的目录使我们能够更清晰地阅读和理解，而不必将许多不同的文件混在一起。当然，所有涉及模块的测试也包括在它们自己的`tests`目录中，并分为`unit`和`e2e`。
- en: Finally, the main files defining the module itself, including the injectables,
    the controllers, and the entity, are in the root of the module `directory`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，定义模块本身的主要文件，包括可注入对象、控制器和实体，都在模块的根目录中。
- en: In this section, we have seen how to structure our server application in a way
    to keep it clearer and much more readable. You now know where to put all of your
    modules and how to structure a module, as well as where to put your gateways or
    your shared files if you used them.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经看到了如何以更清晰和更易读的方式构建我们的服务器应用程序的结构。现在您知道应该把所有模块放在哪里，以及如何构建一个模块，以及如果使用它们，应该把网关或共享文件放在哪里。
- en: Angular Universal architecture
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular Universal架构
- en: 'The Angular Universal part of the repository is a standalone application, using
    the Nest.js server and Angular 6\. It will be composed of just two main directories:
    `e2e` for the end-to-end tests and the `src`, which contains the server and the
    client.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库的Angular Universal部分是一个独立的应用程序，使用Nest.js服务器和Angular 6。它将由两个主要目录组成：`e2e`用于端到端测试，以及包含服务器和客户端的`src`。
- en: 'Let’s start by seeing an overview of this architecture:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看一下这个架构的概述：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `src` directory
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`src`目录'
- en: This directory will contain the `app` directory in order to put our client content
    with the Angular architecture using modules. Also, we will find the `environments`,
    which define if we are in production mode or not exporting constant. This environment
    will be replaced by the production environment config for the production mode,
    and then the `server` and `shared` directories. The shared directory allows us
    to share some files as an interface, for example, and the server directory will
    contain all the server applications as we have seen in the previous section.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个目录将包含`app`目录，以便使用模块化的Angular架构放置我们的客户端内容。此外，我们还将找到`environments`，它定义了我们是否处于生产模式，并导出常量。这个环境将被生产环境配置替换为生产模式，然后是`server`和`shared`目录。共享目录允许我们共享一些文件，例如接口，而服务器目录将包含所有服务器应用程序，就像我们在前一节中看到的那样。
- en: 'But in this case, the server has changed a bit and now looks like this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 但在这种情况下，服务器有些变化，现在看起来是这样的：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The modules directory will contain all of the Nest.js modules, exactly as we
    have seen in the previous section. One of the modules is the `client` module and
    will serve the Universal app and all of the required assets, as well as setting
    up the initializer to set the engine and provide some Angular configurations.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: modules目录将包含所有的Nest.js模块，就像我们在前一节中看到的那样。其中一个模块是`client`模块，将为Universal应用程序提供所有必需的资产，并设置初始化程序以设置引擎并提供一些Angular配置。
- en: Regarding the `environments`, this one will contain all of the configuration
    paths related to the Angular application. This configuration references the project
    configured into the `angular.json` file seen in the base of the previous section’s
    project.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`environments`，这个目录将包含与Angular应用程序相关的所有配置路径。这个配置引用了在前一节项目的基础中看到的`angular.json`文件中配置的项目。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter allows you to set up the architecture of your application in a
    way that is much more understandable, readable and easier to work with. We have
    seen how to define the architecture’s directories for a server application, but
    also for a complete application using Angular Universal. With these two examples,
    you should be able to build your own project in a clearer way.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章让您以更易理解、易读和易于处理的方式设置应用程序的架构。我们已经看到了如何为服务器应用程序定义架构目录，以及如何使用Angular Universal构建完整应用程序。通过这两个示例，您应该能够以更清晰的方式构建自己的项目。
- en: The next chapter shows how to use testing in Nest.js.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将展示如何在Nest.js中使用测试。
