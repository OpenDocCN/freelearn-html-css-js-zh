- en: Plain Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单对象
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Using Object.assign to add properties to an object
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Object.assign` 向对象添加属性
- en: Using Object.entries to get iterable property-name pairs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Object.entries` 获取可迭代的属性名对
- en: Using Object.is to compare two values
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Object.is` 比较两个值
- en: Defining function properties as methods on a plain object
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在简单对象上定义函数属性作为方法
- en: Defining read-only props with Object.defineProperty
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Object.defineProperty` 定义只读属性
- en: Overriding read-only props with Object.defineProperty
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Object.defineProperty` 覆盖只读属性
- en: Creating a non-enumerable property with Object.defineProperty
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Object.defineProperty` 创建非枚举属性
- en: Creating an object using object structuring
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用对象结构创建对象
- en: Picking values from an object using destructuring
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用解构从对象中选取值
- en: Using a spread operator to combine objects
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用扩展运算符组合对象
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: With all the new features made available in recent versions of ECMAScript, it's
    easy to lose sight of the fundamentals. The Object API, like others, has received
    plenty of updates. They may seem mundane compared to less familiar features (such
    as `SharedArrayBuffer`), but they allow you to create some interesting and useful
    behaviors.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 随着最近版本的 ECMAScript 中提供的所有新功能的推出，很容易忽视基础知识。对象API，就像其他API一样，已经收到了很多更新。与不太熟悉的功能（如
    `SharedArrayBuffer`）相比，它们可能看起来很平凡，但它们允许您创建一些有趣和有用的行为。
- en: In this chapter, we'll be looking at how to use the Object API to create rich
    relationships and interesting properties.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何使用对象API来创建丰富的关系和有趣属性。
- en: Using Object.assign to add properties to an object
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `Object.assign` 向对象添加属性
- en: Combining the properties from different objects is a fairly common task. Doing
    this value by value is limited and tedious, because each property has to be enumerated.
    This recipe demonstrates how to do the same thing with the `Object.assign` method.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从不同的对象组合属性是一个相当常见的任务。这样做按值逐个进行是有限的且繁琐的，因为每个属性都必须枚举。这个配方演示了如何使用 `Object.assign`
    方法完成相同的事情。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方假设您已经有一个工作区，允许您在浏览器中创建和运行 ES 模块。如果您没有，请参阅前两章。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序，导航到您的 workspace。
- en: Create a new folder named `06-01-object-assign-add-properties`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `06-01-object-assign-add-properties` 的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个 `index.html` 文件，该文件从 `main.js` 加载并运行一个 `main` 函数。
- en: 'Create a `main.js` file with a `main` function that creates two objects, and
    then uses `Object.assign` to combine them with another anonymous object:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含 `main` 函数的 `main.js` 文件，该函数创建两个对象，然后使用 `Object.assign` 将它们与另一个匿名对象组合：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的 Python 网络服务器，并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You will see the following output:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/eb449fb7-e2ab-4acf-a2ea-9311dda42ef5.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb449fb7-e2ab-4acf-a2ea-9311dda42ef5.png)'
- en: How it works...
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Object` assign method iterates over all the properties of the objects passed
    to it. Then it assigns them to the leftmost object. Priority is given to properties
    on rightmost objects. So, you can see that the value of `foo` comes from the anonymous
    object. The leftmost object is mutated by the values from the right, while the
    other objects are left unchanged.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.assign` 方法遍历传递给它的所有对象的属性。然后，它将这些属性分配给最左边的对象。优先考虑最右边对象的属性。因此，您可以看到 `foo`
    的值来自匿名对象。最左边的对象被右边的值所突变，而其他对象保持不变。'
- en: We'll see how to use the spread operator to accomplish the same task later on.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在稍后看到如何使用扩展运算符来完成相同的任务。
- en: Using Object.entries to get iterable property-name pairs
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `Object.entries` 获取可迭代的属性名对
- en: '`Object.assign` works well for copying properties from one object to another.
    However, we sometimes want to perform other operations based on the properties
    of an object. This recipe shows how to use `Object.entries` to get an iterable
    of an object''s properties.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.assign` 在从一个对象复制属性到另一个对象方面表现良好。然而，我们有时想根据对象的属性执行其他操作。这个配方展示了如何使用 `Object.entries`
    来获取一个对象属性的迭代器。'
- en: Getting ready
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设你已经有一个工作区，允许你在浏览器中创建和运行ES模块。如果你没有，请参阅前两章。
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序并导航到你的工作区。
- en: Create a new folder named `06-02-object-entries-to-get-iterable`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`06-02-object-entries-to-get-iterable`的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个`index.html`文件，该文件加载并运行来自`main.js`的`main`函数。
- en: 'Create a `main.js` with a function named `main` that creates an object then
    uses a `for-of` loop to loop over the result of `Object.entries`:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main`的函数的`main.js`文件，然后创建一个对象，并使用`for-of`循环遍历`Object.entries`的结果：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的Python网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You will see the following output:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![](img/33138a26-3529-4b8c-b3d5-5ee8f5eb4f81.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33138a26-3529-4b8c-b3d5-5ee8f5eb4f81.png)'
- en: How it works...
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`Object.entries` returns what is known as an iterable. These lists can be traversed
    with `for-of` loops. The items in this iterable are pairs of property names and
    values.  The props are `foo` and `bar`, while the value entries are their corresponding
    values for those props.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.entries`返回一个可迭代的值。这些列表可以用`for-of`循环遍历。这个可迭代中的项是属性名和值的对。属性是`foo`和`bar`，而值条目是这些属性的对应值。'
- en: The syntax `[prop, value]` destructures this pair into individual variables
    that are then logged out. Alternatively, we could reference the entry `prop` and
    `value` as the zero and 1 index of an array, but the destructured syntax is a
    little more direct. We'll look at destructuring in future recipes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 语法`[prop, value]`将这个对拆分为单独的变量，然后输出。或者，我们也可以将条目`prop`和`value`作为数组的零和一索引来引用，但解构语法更直接。我们将在未来的食谱中查看解构。
- en: Using Object.is to compare two values
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`Object.is`比较两个值
- en: JavaScript has a complex relationship with equality. It is common knowledge
    that using `===` is preferable to `==` because it gives more predictable results,
    and in most cases `===` behaves as expected. Unfortunately, due to quirks in the
    JavaScript type system, there are some frustrating edge cases.  In this recipe,
    we'll see how to use `Object.is` to get expected results for comparisons.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript与相等性有复杂的关系。众所周知，使用`===`比使用`==`更可取，因为它给出了更可预测的结果，在大多数情况下`===`的行为是预期的。不幸的是，由于JavaScript类型系统的怪癖，有一些令人沮丧的边缘情况。在本食谱中，我们将了解如何使用`Object.is`来获得比较的预期结果。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设你已经有一个工作区，允许你在浏览器中创建和运行ES模块。如果你没有，请参阅前两章。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序并导航到你的工作区。
- en: Create a new folder named `06-03-compare-with-object-is`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`06-03-compare-with-object-is`的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个`index.html`文件，该文件加载并运行来自`main.js`的`main`函数。
- en: 'Create a `main.js` with a `main` function that makes a few illustrative comparisons:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含`main`函数的`main.js`文件，该函数进行一些说明性比较：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的Python网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output displayed:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出显示：
- en: '![](img/5e51f831-3718-4574-a48e-34f434886116.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e51f831-3718-4574-a48e-34f434886116.png)'
- en: How it works...
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Object.is` method has a different specification from the `===` operator.
    You can see that they agree most of the time, but there are certain edge cases
    where they disagree.  The initial test cases (the `object`, `null`, and `undefined`
    comparison) all agree, but we start to see some differences when we hit corner
    cases. You can see the differences between a positive and negative zero comparison,
    as well as a NaN comparison.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.is`方法与`===`运算符有不同的规范。你可以看到它们大多数时候是一致的，但有一些边缘情况它们不一致。初始测试案例（`object`、`null`和`undefined`比较）都是一致的，但当我们遇到边缘情况时，我们开始看到一些差异。你可以看到正零和负零比较之间的差异，以及NaN比较。'
- en: 'For more information, see the documentation on the Mozilla Developer page:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参阅Mozilla开发者页面上的文档：
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).'
- en: Defining function properties as methods on a plain object
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在普通对象上定义函数属性作为方法
- en: Defining methods on object literals has always been possible with normal key-value
    pairs. More recent versions of ECMAScript have added a shorthand that mimics the
    syntax for defining methods on classes.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在对象字面量上定义方法始终可以通过正常的键值对来实现。ECMAScript的较新版本添加了一个简写，它模仿了在类上定义方法的语法。
- en: In this recipe, we'll see that we can create and override methods on object
    literals using either technique.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到我们可以使用这两种技术中的任何一种在对象字面量上创建和覆盖方法。
- en: Getting ready
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱假设你已经有一个工作区，允许你在浏览器中创建和运行ES模块。如果你没有，请参阅前两章。
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序并导航到你的工作区。
- en: Create a new folder named `06-04-define-function-properties-as-method`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`06-04-define-function-properties-as-method`的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个`index.html`文件，该文件从`main.js`加载并运行一个`main`函数。
- en: 'Create a `main.js` with a function named `main`that defines two methods with the
    property and method syntax, overrides them, and calls them before and after override:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main`的函数的`main.js`文件，使用属性和方法语法定义两个方法，覆盖它们，并在覆盖前后调用它们：
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的Python网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output displayed:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该会看到以下输出显示：
- en: '![](img/30c222da-8028-4298-8015-a15aa85268e4.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30c222da-8028-4298-8015-a15aa85268e4.png)'
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As we saw previously, the two syntaxes are equivalent. The two methods are defined
    as properties with function values, and because they don't have any attributes
    that prevent it, they can be overridden. Both `method0` and `method1` are defined
    on the initial object and executed immediately thereafter.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前看到的，两种语法是等效的。这两种方法被定义为具有函数值的属性，并且由于它们没有任何阻止其被覆盖的属性，因此可以被覆盖。`method0`和`method1`都是在初始对象上定义的，并在之后立即执行。
- en: Next, we assign a new function value to those properties of the same object.
    So when they are called again, the new functions are executed, rather than the
    originals.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们为同一对象的这些属性分配一个新的函数值。因此，当它们再次被调用时，将执行新函数而不是原始函数。
- en: In future recipes, we'll see how to prevent this kind of overriding.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的菜谱中，我们将看到如何防止这种覆盖。
- en: Defining read-only props with Object.defineProperty
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Object.defineProperty定义只读属性
- en: It's not always ideal to have methods that can be overridden. By default, properties
    that are assigned to an object can be reassigned. We need another option to add
    functions to an object so they won't be changed.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 并非总是理想的做法拥有可以被覆盖的方法。默认情况下，分配给对象的属性可以被重新分配。我们需要另一个选项来向对象添加函数，这样它们就不会被更改。
- en: In this recipe, we'll see how to add non-writable properties to an object with
    `Object.defineProperty`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何使用`Object.defineProperty`向对象添加不可写属性。
- en: Getting ready
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱假设你已经有一个工作区，允许你在浏览器中创建和运行ES模块。如果你没有，请参阅前两章。
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序并导航到你的工作区。
- en: Create a new folder named `06-05-define-readonly-props`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`06-05-define-readonly-props`的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个`index.html`文件，该文件从`main.js`加载并运行一个`main`函数。
- en: 'Create a `main.js` file with a `main` function that defines a non-writable
    property, and then tries to write to it:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含`main`函数的`main.js`文件，该函数定义一个不可写属性，然后尝试写入它：
- en: '[PRE4]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的Python网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output displayed:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该会看到以下输出显示：
- en: '![](img/bad291f3-9cc8-4305-9e7a-f3dbb9ddc956.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bad291f3-9cc8-4305-9e7a-f3dbb9ddc956.png)'
- en: How it works...
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we see that object properties are not simple key-value pairs.
    They have attributes that governern their behavior. One of these properties is
    writable. This property means that we can reassign the value afterwards. By default,
    this property is set to true; using `Object.defineProperty` we can see other values.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们看到对象属性不仅仅是简单的键值对。它们有属性来控制其行为。其中一个属性是可写的。这个属性意味着我们可以在之后重新赋值。默认情况下，这个属性被设置为
    true；使用 `Object.defineProperty` 我们可以看到其他值。
- en: We'll see how other properties can be used to control other behaviors.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将了解其他属性如何用来控制其他行为。
- en: Overriding read-only props with Object.defineProperty
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Object.defineProperty 覆盖只读属性
- en: Creating a non-writable property isn't the final word. In some cases, it is
    still possible to rewrite these properties. Thankfully, it is not something that
    is likely to be done by accident. In this recipe, we'll see how to define and
    redefine non-writable props with `Object.define`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 创建不可写的属性并不是最终结果。在某些情况下，仍然有可能重写这些属性。幸运的是，这不太可能是一个意外行为。在这个菜谱中，我们将了解如何使用 `Object.define`
    定义和重新定义不可写的属性。
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱假设你已经有一个工作区，允许你在浏览器中创建和运行 ES 模块。如果你没有，请参阅前两章。
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，导航到你的工作区。
- en: Create a new folder named `06-06-redefine-read-only-props`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `06-06-redefine-read-only-props` 的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个 `index.html` 文件，该文件加载并运行来自 `main.js` 的 `main` 函数。
- en: 'Create a `main.js` file with a `main` function that creates an object. Define
    a configurable, non-writable property named `prop1` with a random value:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含 `main` 函数的 `main.js` 文件，该函数创建一个对象。定义一个可配置的、不可写的属性 `prop1`，并赋予一个随机值：
- en: '[PRE5]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Redefine that property as another `random` value and change configurable to
    `false`:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将该属性重新定义为另一个 `random` 值，并将可配置性更改为 `false`：
- en: '[PRE6]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Attempt to redefine the property a third time:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试第三次重新定义属性：
- en: '[PRE7]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的 Python 网络服务器，并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`。'
- en: 'You should see the following output displayed:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该会看到以下输出显示：
- en: '![](img/8fb48c41-eb43-4088-a72b-f35b0ecba239.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8fb48c41-eb43-4088-a72b-f35b0ecba239.png)'
- en: How it works...
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Writable is only part of the equation. Setting writable to false means that
    the property can be reassigned normally. By default, it cannot be redefined with
    `Object.defineProperty`. However, if `configurable` is set to true, then the property
    can be redefined. Once the `configurable` attribute is set to false, then we can
    no longer redefine it.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 可写性只是方程的一部分。将可写性设置为 false 意味着属性可以被正常重新赋值。默认情况下，它不能使用 `Object.defineProperty`
    重新定义。然而，如果 `configurable` 设置为 true，则可以重新定义属性。一旦将 `configurable` 属性设置为 false，我们就不能再重新定义它了。
- en: Creating a non-enumerable property with Object.defineProperty
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `Object.defineProperty` 创建不可枚举的属性
- en: We've seen in previous recipes how to avoid having properties overridden. There
    are situations where we might not want a property to be read. Recall the `Object.entries` method,
    which creates an iterator of all the properties and values on the object. Well,
    that's not precisely true. It creates an iterator of all the `enumerable` properties.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的菜谱中，我们看到了如何避免属性被覆盖。有些情况下，我们可能不希望属性被读取。回想一下 `Object.entries` 方法，它创建了一个包含对象上所有属性和值的迭代器。嗯，这并不完全正确。它创建了一个包含所有
    `enumerable` 属性的迭代器。
- en: In this recipe, we'll see how to create properties that won't be included in
    the iterator.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将了解如何创建不会被包含在迭代器中的属性。
- en: Getting ready
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱假设你已经有一个工作区，允许你在浏览器中创建和运行 ES 模块。如果你没有，请参阅前两章。
- en: How to do it...
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，导航到你的工作区。
- en: Create a new folder named `06-07-non-enumerable-props`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `06-07-non-enumerable-props` 的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个 `index.html` 文件，该文件加载并运行来自 `main.js` 的 `main` 函数。
- en: 'Create a `main.js` file with a `main` function that creates an object with
    key-value pairs of books and authors:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，其中包含 `main` 函数，该函数创建一个包含书籍和作者键值对的对象：
- en: '[PRE8]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Define two properties, one an `enumerable` with a random value and another
    non-enumerable with a function as the value:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义两个属性，一个是有随机值的 `enumerable`，另一个是非可枚举的，其值为函数：
- en: '[PRE9]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的 Python 网络服务器，并在你的浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output displayed:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出显示：
- en: '![](img/167601f8-fd15-4a62-866f-463d2f3f2332.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/167601f8-fd15-4a62-866f-463d2f3f2332.png)'
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The key values defined as literals on the object are enumerable as before. The
    next two properties are more interesting. The first property, `visibleProp`, explicitly
    sets the `enumerable` attribute to true, and appears in the list. The `invisibleProp` property
    is not explicitly set; the default value is false. Only the `enumerable` properties
    appear in the iterator.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在对象上以字面量定义的键值与之前一样是可枚举的。接下来的两个属性更有趣。第一个属性 `visibleProp` 明确将 `enumerable` 属性设置为
    true，并出现在列表中。`invisibleProp` 属性没有明确设置；默认值为 false。只有可枚举的属性出现在迭代器中。
- en: Creating an object using object structuring
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用对象结构创建对象
- en: Pulling attributes from an object is yet another repetitive task. There seems
    to be unnecessary repetition. Newer versions of ECMAScript include a syntactic
    feature that makes this process less onerous. This recipe demonstrates how to
    use object destructuring to pull new variables from object props.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 从对象中提取属性是另一个重复的任务。似乎存在不必要的重复。ECMAScript 的新版本包括一种语法特性，使这个过程不那么繁琐。这个配方演示了如何使用对象解构从对象属性中提取新变量。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方假设你已经有一个工作区，允许你在浏览器中创建和运行 ES 模块。如果你没有，请参阅前两章。
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，导航到你的工作区。
- en: Create a new folder named `06-08-pick-values-from-object-destructuring`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `06-08-pick-values-from-object-destructuring` 的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个 `index.html` 文件，该文件从 `main.js` 中加载并运行一个 `main` 函数。
- en: 'Create a `main.js` file. Create a main function that creates a new object then
    creates new constants from the properties therein:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件。创建一个主函数，该函数创建一个新对象，然后从其中的属性创建新的常量：
- en: '[PRE10]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的 Python 网络服务器，并在你的浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output displayed:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出显示：
- en: '![](img/b12aa271-e818-4be0-bf7d-750c24a8050a.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b12aa271-e818-4be0-bf7d-750c24a8050a.png)'
- en: How it works...
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Destructuring is syntactic shorthand. The names of the variables are used to
    reference properties on the object. The values are assigned to the variable of
    the corresponding name.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 解构是一种语法简写。变量的名称用于引用对象上的属性。值被分配给对应名称的变量。
- en: Picking values from an object using destructuring
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用解构从对象中提取值
- en: Bundling multiple properties into a single object is another common task in
    JavaScript that can be really tedious. More recent versions of ECMAScript have
    added a new bit of syntax to make this more convenient.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 将多个属性捆绑成一个单一的对象是 JavaScript 中的另一个常见任务，这可能会非常繁琐。ECMAScript 的较新版本增加了一种新的语法，使这个过程更加方便。
- en: In this recipe, we'll see how to use this new syntax to create an object from
    existing variables.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到如何使用这种新语法从现有变量中创建一个对象。
- en: Getting ready
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方假设你已经有一个工作区，允许你在浏览器中创建和运行 ES 模块。如果你没有，请参阅前两章。
- en: How to do it...
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，导航到你的工作区。
- en: Create a new folder named `06-09-create-objects-with-structuring`.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `06-09-create-objects-with-structuring` 的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个 `index.html` 文件，该文件从 `main.js` 中加载并运行一个 `main` 函数。
- en: 'Create a `main.js` file with an `async` function named `main`, which creates
    several constants and then uses object structuring to create an object with properties
    of the corresponding names and values:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main` 的 `async` 函数的 `main.js` 文件，该函数创建几个常量，然后使用对象结构创建具有相应名称和值的对象：
- en: '[PRE11]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的 Python 网络服务器，并在你的浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output displayed:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出显示：
- en: '![](img/b948e29b-9434-40fb-80c7-12f42b25d17e.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b948e29b-9434-40fb-80c7-12f42b25d17e.png)'
- en: How it works...
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Like the previous recipe, the syntax uses the names of the variables between
    the curly braces to determine the property name on the object. Each of the properties
    is created with the variable name and value of the corresponding constant.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的菜谱一样，语法使用花括号之间的变量名来确定对象上的属性名。每个属性都使用相应的常量的变量名和值创建。
- en: Using a spread operator to combine objects
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用扩展操作符合并对象
- en: In a previous recipe, we saw how to use `Object.assign` to combine objects.
    It gets the job done, but by using newer ECMAScript syntax we can do this in a
    more compact way. In this recipe, we'll see how to use the new spread operator
    to combine objects.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的菜谱中，我们看到了如何使用 `Object.assign` 来合并对象。它完成了任务，但通过使用更新的 ECMAScript 语法，我们可以以更紧凑的方式完成这项任务。在这个菜谱中，我们将看到如何使用新的扩展操作符来合并对象。
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱假设你已经有一个工作区，允许你在浏览器中创建和运行 ES 模块。如果你没有，请参阅前两章。
- en: How to do it...
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，导航到你的工作区。
- en: Create a new folder named `06-10-spread-operator-combine`.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `06-10-spread-operator-combine` 的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个 `index.html` 文件，该文件加载并运行来自 `main.js` 的 `main` 函数。
- en: 'Create a `main.js` file with an `async` function named `main`, which creates
    a couple of objects and a constant. It then uses the spread operator and object
    structuring to combine them into a single object:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.js` 的文件，其中包含一个名为 `main` 的 `async` 函数，该函数创建几个对象和一个常量。然后它使用扩展操作符和对象结构将它们合并成一个单一的对象：
- en: '[PRE12]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的 Python 网络服务器，并在你的浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output displayed:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出显示：
- en: '![](img/42d91977-788f-4d94-b667-9b29d6a5e41f.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42d91977-788f-4d94-b667-9b29d6a5e41f.png)'
- en: How it works...
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The spread operator spreads out the `enumerable` properties of an object so
    that they are all referenced when structuring the new object. Like `Object.assign`,
    the values are given priority from right to left, and the last property is handled
    in the sane way as with object structuring in a prior recipe.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展操作符将对象的 `enumerable` 属性展开，以便在构建新对象时它们都被引用。像 `Object.assign` 一样，值从右到左给予优先级，并且最后一个属性的处理方式与之前菜谱中对象结构的方式相同。
