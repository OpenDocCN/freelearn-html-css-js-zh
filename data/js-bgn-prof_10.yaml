- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Dynamic Element Manipulation Using the DOM
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DOM进行动态元素操作
- en: Learning the difficult concepts of the previous chapter will be rewarded in
    this chapter. We will take our DOM knowledge one step further and learn how to
    manipulate the DOM elements on the page with JavaScript. First, we need to learn
    how to navigate the DOM and select the elements we want. We will learn how we
    can add and change attributes and values, and how to add new elements to the DOM.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 学习上一章的困难概念将在本章中得到回报。我们将把我们的DOM知识再向前迈进一步，学习如何使用JavaScript操作页面上的DOM元素。首先，我们需要学习如何导航DOM并选择我们想要的元素。我们将学习我们如何添加和更改属性和值，以及如何向DOM添加新元素。
- en: You will also learn how to add style to elements, which can be used to make
    items appear and disappear. Then we will introduce you to events and event listeners.
    We will start easy, but by the end of this chapter you will be able to manipulate
    web pages in many ways, and you will have the knowledge to create basic web apps.
    The sky is the limit after getting this skill down.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将学习如何给元素添加样式，这可以用来使项目出现和消失。然后我们将向你介绍事件和事件监听器。我们将从简单开始，但到本章结束时，你将能够以多种方式操作网页，并且你将拥有创建基本Web应用的知识。掌握这项技能后，天空就是极限。
- en: 'Along the way, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在旅途中，我们将涵盖以下主题：
- en: Basic DOM traversing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本DOM遍历
- en: Accessing elements in the DOM
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问DOM中的元素
- en: Element click handler
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素点击处理器
- en: This and the DOM
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这和DOM
- en: Manipulating element style
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作元素样式
- en: Changing the classes of an element
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改元素的类
- en: Manipulating attributes
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作属性
- en: Event listeners on elements
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素上的事件监听器
- en: Creating new elements
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新元素
- en: 'Note: exercise, project and self-check quiz answers can be found in the *Appendix*.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：练习、项目和自我检查测验的答案可以在*附录*中找到。
- en: We have learned a lot about the DOM already. In order to interact with our web
    page and create a dynamic web page, we have to connect our JavaScript skills to
    the DOM.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学到了很多关于DOM的知识。为了与我们的网页交互并创建动态网页，我们必须将我们的JavaScript技能与DOM连接起来。
- en: Basic DOM traversing
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本DOM遍历
- en: We can traverse the DOM using the `document` object that we saw in the previous
    chapter. This document object contains all the HTML and is a representation of
    the web page. Traversing over these elements can get you to the element you need
    in order to manipulate it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用我们在上一章中看到的`document`对象来遍历DOM。这个文档对象包含所有HTML，是网页的表示。遍历这些元素可以让你到达需要操作的元素。
- en: 'This is not the most common way to do it, but this will help understand how
    it works later. And sometimes, you might actually find yourself needing these
    techniques as well. Just don''t panic: there are other ways to do it, and they
    will be revealed in this chapter!'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是最常见的方法，但这将有助于你理解它的工作原理。有时，你可能实际上需要这些技术。只是不要慌张：还有其他方法可以做到这一点，它们将在本章中揭晓！
- en: 'Even for a simple HTML piece there are already multiple ways to traverse the
    DOM. Let''s go hunting for treasure in our DOM. We start with this little HTML
    snippet:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 即使对于简单的HTML片段，也已经存在多种遍历DOM的方法。让我们在我们的DOM中寻找宝藏。我们从这个小小的HTML片段开始：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We now want to traverse the DOM of this snippet to find the treasure. We can
    do this by stepping into the document object and navigating our way from there
    onwards. It is easiest to do this exercise in the console in the browser, because
    that way you'll get direct feedback about where in the DOM you are.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在想要遍历这个片段的DOM以找到宝藏。我们可以通过进入文档对象并从那里开始导航来实现这一点。在浏览器控制台中做这个练习最容易，因为这样你将直接获得关于你在DOM中的位置的反馈。
- en: 'We can start by using the `body` property from the document. This contains
    everything that''s inside the `body` element. In the console, we''ll type:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从文档的`body`属性开始。这包含`body`元素内部的所有内容。在控制台中，我们将输入：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We should get a really long object. There are a few ways from this object to
    get to our treasure. To do so, let's discuss the children and `childNodes` property.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该得到一个非常长的对象。从该对象到我们的宝藏有几种方法。为了做到这一点，让我们讨论一下子元素和`childNodes`属性。
- en: '`childNodes` is more a complete term than children. Children just contain all
    the HTML elements, so are really the nodes. `childNodes` also contain text nodes
    and comments. With children, however, you can use the ID, and therefore they are
    easier to use.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`childNodes`比`children`更完整。`children`只包含所有HTML元素，所以实际上是节点。`childNodes`还包含文本节点和注释。然而，使用`children`，你可以使用ID，因此它们更容易使用。'
- en: 'To get to the treasure using children you would have to use:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用子元素到达宝藏，你必须使用：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, on every element we select, we have to select the children again.
    So, first, we grab the children from the body, then we select `forest` from these
    children. Then from `forest`, we want to grab its children again, and from these
    children we want to select `tree2`. From `tree2` we want to grab the children
    again, from these children we need `shrubbery`. And then finally, we can grab
    the children from `shrubbery` and select `treasure`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在每一个我们选择的元素上，我们都需要再次选择子元素。所以，首先，我们从body中获取子元素，然后从这些子元素中选择`forest`。然后从`forest`中，我们想要再次获取其子元素，然后从这些子元素中选择`tree2`。从`tree2`中，我们想要再次获取子元素，从这些子元素中我们需要`shrubbery`。然后最终，我们可以从`shrubbery`中获取子元素并选择`treasure`。
- en: 'To get to the treasure using `childNodes` you would have to use your console
    a lot because text and comment nodes are also in there. `childNodes` is an array,
    so you will have to select the right index to select the right child. There is
    one advantage here: it is a lot shorter because you won''t need to select the
    name separately.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`childNodes`到达宝藏，你将不得不经常使用你的控制台，因为文本和注释节点也包含在其中。`childNodes`是一个数组，所以你必须选择正确的索引来选择正确的子节点。这里有一个优势：它要短得多，因为你不需要单独选择名称。
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You could also combine them:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将它们组合起来：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There are many ways to traverse the document. Depending on what you need, you
    might have to use one specific way. For tasks that require DOM traversing, it
    is usually the case that if it is works, it is a good solution.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历文档的方法有很多。根据你的需求，你可能需要使用一种特定的方法。对于需要DOM遍历的任务，通常情况下，如果它有效，它就是一个好的解决方案。
- en: 'So far, we have seen how we can move down the DOM, but we can also move up.
    Every element knows its parent. We can use the `parentElement` property to move
    back up. For example, if we use the treasure HTML sample and type this into the
    console:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到了如何向下移动DOM，但我们也可以向上移动。每个元素都知道它的父元素。我们可以使用`parentElement`属性向上移动。例如，如果我们使用宝藏HTML示例并在控制台中输入以下内容：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We are back at `forest`, since that is the parent element of `tree2`. This can
    be very useful, in particular when combined with functions such as `getElementById()`,
    which we will see later in more detail.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们回到了`forest`，因为它是`tree2`的父元素。这可以非常有用，特别是当与`getElementById()`等函数结合使用时，我们将在后面更详细地看到。
- en: 'Not only can we move up and down, we can also move sideways. For example, if
    we select `tree2` like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅可以上下移动，还可以左右移动。例如，如果我们这样选择`tree2`：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can get to `tree1` using:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式到达`tree1`：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And from `tree1` we can get to `tree2` using:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 并且从`tree1`我们可以通过以下方式到达`tree2`：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As an alternative to `nextElementSibling`, which returns the next node that
    is an element, you could use `nextSibling`, which will return the next node of
    any type.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 作为`nextElementSibling`的替代方案，后者返回下一个元素节点，你可以使用`nextSibling`，它将返回任何类型的下一个节点。
- en: Practice exercise 10.1
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.1
- en: 'In this exercise, experiment with traversing the DOM hierarchy. You can use
    this sample HTML website:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，尝试遍历DOM层次结构。你可以使用这个示例HTML网站：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Take the following steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 采取以下步骤：
- en: Create and open the above sample web page, or visit your favorite website, and
    open the document body in the console with `console.dir(document)`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并打开上面的示例网页，或者访问你喜欢的网站，并在控制台中通过`console.dir(document)`打开文档主体。
- en: In the `body.children` property, select some of the child elements. View how
    they match the page content.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`body.children`属性中，选择一些子元素。查看它们如何与页面内容匹配。
- en: Navigate to and output the next nodes or elements into the console.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到并输出控制台中的下一个节点或元素。
- en: Selecting elements as objects
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将元素作为对象选择
- en: Now we know how to traverse the DOM, we can make changes to the elements. Instead
    of using `console.dir()`, we can just type in the path to the element we want
    to change. We now have the element as a JavaScript object, and we can make changes
    to all its properties. Let's use a simpler HTML page for this one.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何遍历DOM，我们可以对元素进行更改。与其使用`console.dir()`，我们只需输入我们想要更改的元素路径。现在我们有了这个元素的JavaScript对象，我们可以更改其所有属性。让我们用一个更简单的HTML页面来做这个例子。
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can traverse to the `p` element, for example, by using this code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下代码遍历到`p`元素，例如：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This gives us the power to manipulate the properties of the element, and the
    element itself, directly! Let's execute this newly gained power in the next section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够直接操作元素的属性和元素本身！让我们在下一节中执行这种新获得的力量。
- en: Changing innerText
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变innerText
- en: 'The `innerText` property focuses on the text between the opening and closing
    of the element, like so:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`innerText`属性关注元素的开头和结尾之间的文本，如下所示：'
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The retrieved value would be `here` as plain text. For example, if we go to
    the console and we type:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的值将是纯文本 `here`。例如，如果我们去控制台并输入：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The message that is displayed on the page changes from `Hi!` to `Bye!` immediately.
    `innerText` returns the content of the element as plain text, which is not a problem
    in this case because there is only text in there. However, if there is any HTML
    inside the element you need to select, or if you want to add HTML, you cannot
    use this method. It will interpret the HTML as text and just output it on the
    screen. So if we executed this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上显示的消息立即从 `Hi!` 变为 `Bye!`。`innerText` 返回元素的纯文本内容，在这种情况下没有问题，因为里面只有文本。然而，如果你需要选择元素内的任何
    HTML，或者你想添加 HTML，你不能使用这种方法。它将 HTML 解释为文本，并将其直接输出到屏幕上。所以如果我们执行以下操作：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: It will output to the screen `<p>Bye!</p>`, with the HTML around it, as if it
    was intended as a text string. To get around this, you need to use `innerHTML`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 它将在屏幕上输出 `<p>Bye!</p>`，包括其周围的 HTML，就像它是一个文本字符串一样。为了解决这个问题，你需要使用 `innerHTML`。
- en: Changing innerHTML
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改 innerHTML
- en: 'If you did not only want to work with plain text, or perhaps specify some HTML
    formatting with your value, you could use the `innerHTML` property instead. This
    property doesn''t just process be plain text, it can also be inner HTML elements:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不仅想处理纯文本，或者可能想用你的值指定一些 HTML 格式，你可以使用 `innerHTML` 属性。这个属性不仅处理纯文本，还可以处理内联 HTML
    元素：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will display **Bye!** in bold on the screen, having taken the `b` element
    into account rather than just printing it as if it were a single string value.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在屏幕上以粗体显示 **Bye!**，考虑到 `b` 元素而不是简单地将其作为单个字符串值打印出来。
- en: You were already promised that you could access elements in a more convenient
    way than traversing the DOM. Let's see how exactly in the next section.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经承诺过，你可以以比遍历 DOM 更方便的方式访问元素。让我们在下一节中看看具体是如何做到的。
- en: Accessing elements in the DOM
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 DOM 中访问元素
- en: There are multiple methods to select elements from the DOM. After getting the
    elements, we are able to modify them. In the following sections, we will discuss
    how to get elements by their ID, tag name, and class name, and by CSS selector.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从 DOM 中选择元素有多种方法。在获取元素后，我们能够修改它们。在接下来的章节中，我们将讨论如何通过 ID、标签名、类名和 CSS 选择器获取元素。
- en: Instead of traversing it step by step as we just did, we are going to use built-in
    methods that can go through the DOM and return the elements that match the specifications.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用内置方法来遍历 DOM 并返回符合指定条件的元素，而不是像我们刚才那样逐个遍历。
- en: 'We are going to use the following HTML snippet as an example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下 HTML 片段作为示例：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Let's start by accessing elements by ID.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从通过 ID 访问元素开始。
- en: Accessing elements by ID
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 ID 访问元素
- en: We can grab elements by ID with the `getElementById()` method. This returns
    one element with the specified ID. IDs should be unique, as only one result will
    be returned from the HTML document. There are not a lot of rules for valid IDs;
    they cannot contain spaces and must be at least one character. As with the conventions
    for naming variables, it is a best practice to make it descriptive and avoid special
    characters.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `getElementById()` 方法通过 ID 获取元素。这个方法返回一个具有指定 ID 的元素。ID 应该是唯一的，因为 HTML
    文档只会返回一个结果。对于有效的 ID 没有多少规则；它们不能包含空格，并且至少要有一个字符。与变量命名的约定一样，最好使其描述性，并避免使用特殊字符。
- en: 'If we want to select the element with an ID of `two` right away, we could use:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想立即选择具有 ID 为 `two` 的元素，我们可以使用：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This would return the full HTML element:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回完整的 HTML 元素：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: To reiterate, if you have more than one element with the same ID, it will just
    give you back the first one it encounters. You should avoid this situation in
    your code though.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，如果你有多个具有相同 ID 的元素，它只会返回它遇到的第一个。尽管如此，你应该避免在代码中出现这种情况。
- en: 'This is what the full file looks like with the JavaScript inside the HTML page,
    instead of simply querying the browser console:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是包含在 HTML 页面中的完整文件的样子，而不是简单地查询浏览器控制台：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this case, it would log the full HTML `div` with `id="two"` to the console.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，它将在控制台中记录具有 `id="two"` 的完整 HTML `div`。
- en: Practice exercise 10.2
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 10.2
- en: 'Try experimenting with getting elements by their IDs:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过 ID 获取元素进行实验：
- en: Create an HTML element and assign an ID in the element attribute.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 HTML 元素并在元素属性中分配一个 ID。
- en: Select the page element using its ID.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用其 ID 选择页面元素。
- en: Output the selected page element into the console.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将选定的页面元素输出到控制台。
- en: Accessing elements by tag name
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过标签名访问元素
- en: 'If we ask for elements by tag name, we get an array as a result. This is because
    there could be more than one element with the same tag name. It will be a collection
    of HTML elements, or `HTMLCollection`, which is a special JavaScript object. It''s
    basically just a list of nodes. Execute the following command in the console:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们通过标签名请求元素，我们将得到一个数组作为结果。这是因为可能有多个具有相同标签名的元素。它将是一个HTML元素集合，或 `HTMLCollection`，这是一个特殊的JavaScript对象。它基本上只是一个节点列表。在控制台中执行以下命令：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'It will give back:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 它将返回：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As you can see, all the elements in the DOM with the `div` tag are returned.
    You can read what the ID is and what the class is from the syntax. The first ones
    in the collection are the objects: `div` is the name, `#` specifies the ID, and
    `.` specifies the class. If there are multiple dots, there are multiple classes.
    Then you can see the elements again (`namedItems`), this time as key-value pairs
    with their ID as the key.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，所有具有 `div` 标签的DOM元素都被返回。您可以从语法中读取ID和类。集合中的前几个是对象：`div` 是名称，`#` 指定ID，`.`
    指定类。如果有多个点，则表示有多个类。然后您可以看到元素再次（`namedItems`），这次作为键值对，其中ID作为键。
- en: 'We can access them using the `item()` method to access them by index, like
    this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `item()` 方法通过索引访问它们，如下所示：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This will return:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回：
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can also access them by name, using the `namedItem()` method, like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过名称使用 `namedItem()` 方法访问它们，如下所示：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And this will return:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回：
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When there is only one match, it will still return an `HTMLCollection`. There
    is only one `h1` tag, so let''s demonstrate this behavior:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当只有一个匹配项时，它仍然会返回一个 `HTMLCollection`。只有一个 `h1` 标签，所以让我们演示这种行为：
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This will output:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出：
- en: '[PRE27]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Since `h1` doesn't have an ID or class, it is only `h1`. And since it doesn't
    have an ID, it is not a `namedItem` and is only in there once.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `h1` 没有ID或类，它只是 `h1`。而且因为它没有ID，所以它不是 `namedItem`，并且只出现一次。
- en: Practice exercise 10.3
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 10.3
- en: 'Use JavaScript to select page elements via their tag name:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JavaScript通过标签名选择页面元素：
- en: Start by creating a simple HTML file.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个简单的HTML文件。
- en: Create three HTML elements using the same tag.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的标签创建三个HTML元素。
- en: Add some content within each element so you can distinguish between them
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个元素中添加一些内容，以便您可以区分它们
- en: Add a script element to your HTML file, and within it select the page elements
    by tag name and store them in a variable as an array
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个脚本元素添加到您的HTML文件中，并在其中通过标签名选择页面元素并将它们存储在变量中作为一个数组
- en: Using the index value, select the middle element and output it into the console.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用索引值选择中间元素并将其输出到控制台。
- en: Accessing elements by class name
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过类名访问元素
- en: 'We can do something very similar for class names. In our example HTML, we have
    two different class names: `example` and `something`. If you get elements by class
    name, it gives back an HTMLCollection containing the results. The following will
    get all the elements with the class `example`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为类名做类似的事情。在我们的示例HTML中，我们有两个不同的类名：`example` 和 `something`。如果您通过类名获取元素，它将返回一个包含结果的
    `HTMLCollection`。以下将获取所有具有类 `example` 的元素：
- en: '[PRE28]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This returns:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回：
- en: '[PRE29]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: As you can see, it only returned the `div` tags with the `example` class. It
    left out the `div` with the `something` class.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它只返回了具有 `example` 类的 `div` 标签。它忽略了具有 `something` 类的 `div`。
- en: Practice exercise 10.4
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 10.4
- en: Select all matching page elements using the class name of the element.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 使用元素的类名选择所有匹配的页面元素。
- en: Create a simple HTML file to work on.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个简单的HTML文件进行工作。
- en: Add three HTML elements adding the same class to each. You can use different
    tags as long as the same element class is included. Add some content within each
    element so you can distinguish between them.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加三个HTML元素，并为每个元素添加相同的类。只要包含相同的元素类，您可以使用不同的标签。在每个元素中添加一些内容，以便您可以区分它们。
- en: Add a script element to your file, and within it select the page elements by
    class name. Assign the resulting `HTMLCollection` values to a variable.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个脚本元素添加到您的文件中，并在其中通过类名选择页面元素。将结果 `HTMLCollection` 值分配给一个变量。
- en: You can use an index value to select the individual `HTMLCollection` items,
    just as you would for array items. Starting with an index of 0, select one of
    the page elements with the class name and output the element into the console.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用索引值来选择单个 `HTMLCollection` 元素，就像您选择数组元素一样。从索引 0 开始，选择具有类名的页面元素，并将该元素输出到控制台。
- en: Accessing elements with a CSS selector
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过CSS选择器访问元素
- en: We can also access elements using a CSS selector. We do this with `querySelector()`
    and `querySelectorAll()`. We then give the CSS selector as an argument, and this
    will filter the items in the HTML document and only return the ones that satisfy
    the CSS selector.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用CSS选择器来访问元素。我们使用`querySelector()`和`querySelectorAll()`来完成。然后我们给出CSS选择器作为参数，这将过滤HTML文档中的项目，并只返回满足CSS选择器的那些。
- en: The CSS selector might look a bit different than you might think at first. Instead
    of looking for a certain layout, we use the same syntax as we use when we want
    to specify a layout for certain elements. We haven't discussed this yet, so we
    will cover it here briefly.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: CSS选择器可能看起来与你的第一印象略有不同。我们不是在寻找某种布局，而是使用与我们要为某些元素指定布局时相同的语法。我们还没有讨论这个问题，所以我们将在这里简要介绍。
- en: 'If we state `p` as a CSS selector, it means all the elements with tag `p`.
    This would look like this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们声明`p`作为CSS选择器，这意味着所有标签为`p`的元素。这看起来可能是这样的：
- en: '[PRE30]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If we say `p.example`, it means all the `p` tag elements with `example` as the
    class. They can also have other classes; as long as `example` is in there, it
    will match. We can also say `#one`, which means select all with an ID of `one`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们说`p.example`，这意味着所有具有`example`类的`p`标签元素。它们也可以有其他类；只要`example`在其中，就会匹配。我们也可以说`#one`，这意味着选择所有ID为`one`的元素。
- en: This method is the same result as `getElementById()`. Which one to use is a
    matter of taste when all you really need to do is select by ID—this is great input
    for a discussion with another developer. `querySelector()` allows for more complicated
    queries, and some developers will state that `getElementById()` is more readable.
    Others will claim that you might as well use `querySelector()` everywhere for
    consistency. It doesn't really matter at this point, but try to be consistent.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法与`getElementById()`的结果相同。当你只需要通过ID选择时，选择哪一个只是口味问题——这是一个与另一位开发者讨论的绝佳话题。`querySelector()`允许进行更复杂的查询，一些开发者会声称`getElementById()`更易读。其他人会声称你可以在任何地方使用`querySelector()`以保持一致性。这在这个阶段并不重要，但尽量保持一致。
- en: Don't worry too much about all these options for now; there are many, and you'll
    figure them out when you need them. This is how you can use the CSS selectors
    in JavaScript.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 目前不必过于担心所有这些选项；有很多，当你需要时你会弄清楚。这就是如何在JavaScript中使用CSS选择器。
- en: Using querySelector()
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`querySelector()`
- en: 'This first option will select the first element that matches the query. So,
    enter the following in the console, still using the HTML snippet introduced at
    the start of the section:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选项将选择与查询匹配的第一个元素。所以，在控制台中输入以下内容，仍然使用本节开头介绍的HTML片段：
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'It should return:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 应该返回：
- en: '[PRE32]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'It only returns the first `div`, because that''s the first one it encounters.
    We could also ask for an element with the class .`something`. If you recall, we
    select classes using dot notation like this:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 它只返回第一个`div`，因为那是它遇到的第一个。我们也可以要求一个具有类`.something`的元素。如果你还记得，我们使用点符号来选择类，如下所示：
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This returns:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'With this method, you can only use valid CSS selectors: elements, classes,
    and IDs.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，你只能使用有效的CSS选择器：元素、类和ID。
- en: Practice exercise 10.5
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习第10.5节练习题
- en: 'Use `querySelector()` to enable single element selection:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`querySelector()`来启用单个元素选择：
- en: Create another simple HTML file.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个简单的HTML文件。
- en: Create four HTML elements adding the same class to each. They can be different
    tag names as long as they have the class within the element attribute.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建四个HTML元素，并为每个元素添加相同的类。只要元素属性中有类，它们可以有不同的标签名。
- en: Add some content within each element so you can distinguish between them.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个元素中添加一些内容，以便你可以区分它们。
- en: Within a script element, use `querySelector()` to select the first occurrence
    of the elements with that class and store it in a variable. If there is more than
    one matching result in `querySelector()`, it will return the first one.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个脚本元素中，使用`querySelector()`来选择具有该类的第一个元素，并将其存储在一个变量中。如果`querySelector()`中有多个匹配结果，它将返回第一个。
- en: Output the element into the console.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将元素输出到控制台。
- en: Using querySelectorAll()
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`querySelectorAll()`
- en: 'Sometimes it is not enough to return only the first instance, but you want
    to select all the elements that match the query. For example when you need to
    get all the input boxes and empty them. This can be done with `querySelectorAll()`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，只返回第一个实例是不够的，但你想选择所有匹配查询的元素。例如，当你需要获取所有输入框并将它们清空时。这可以通过`querySelectorAll()`来完成：
- en: '[PRE35]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This returns:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回：
- en: '[PRE36]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: As you can see, it is of object type `NodeList`. It contains all the nodes that
    match the CSS selector. With the `item()` method we can get them by index, just
    as we did for the `HTMLCollection`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它是一个对象类型 `NodeList`。它包含所有匹配 CSS 选择器的节点。我们可以使用 `item()` 方法通过索引获取它们，就像我们对
    `HTMLCollection` 所做的那样。
- en: Practice exercise 10.6
  id: totrans-160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 10.6
- en: 'Use `querySelectorAll()` to select all matching elements in an HTML file:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `querySelectorAll()` 在 HTML 文件中选取所有匹配的元素：
- en: Create an HTML file and add four HTML elements, adding the same class to each
    one.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 HTML 文件，并添加四个 HTML 元素，给每个元素添加相同的类。
- en: Add some content within each element so you can distinguish between them.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个元素中添加一些内容，以便您能够区分它们。
- en: Within a script element, use `QuerySelectorAll()` to select all the matching
    occurrences of the elements with that class and store them in a variable.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本元素内部，使用 `querySelectorAll()` 选取具有该类的所有匹配元素，并将它们存储在一个变量中。
- en: Output all the elements into the console, first as an array and then looping
    through them to output them one by one.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先将所有元素输出到控制台，然后通过循环逐个输出。
- en: Element click handler
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元素点击处理程序
- en: 'HTML elements can do something when they are clicked. This is because a JavaScript
    function can be connected to an HTML element. Here is one snippet in which the
    JavaScript function associated with the element is specified in the HTML:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 元素在被点击时可以执行某些操作。这是因为可以将 JavaScript 函数连接到 HTML 元素。以下是一个片段，其中指定了与元素关联的 JavaScript
    函数：
- en: '[PRE37]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Whenever the text in the `div` gets clicked, a pop up with the text `Ouch!
    Stop it!` opens. Here, the JavaScript is specified directly after `onclick`, but
    if there is JavaScript on the page, you can also refer to a function that''s in
    that JavaScript like this:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `div` 中的文本被点击时，会弹出一个包含文本 `Ouch! Stop it!` 的弹出窗口。在这里，JavaScript 是直接在 `onclick`
    后指定的，但如果页面上有 JavaScript，您也可以像这样引用那个 JavaScript 中的函数：
- en: '[PRE38]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This code is doing the exact same thing. As you can imagine, with bigger functions
    this would be a better practice. The HTML can also refer to scripts that get loaded
    into the page.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码执行的是完全相同的事情。正如您所想象的，对于更大的函数，这会是一个更好的实践。HTML 也可以引用加载到页面中的脚本。
- en: There is also a way to add a click handler using JavaScript. We select the HTML
    element we want to add the click handler to, and we specify the onclick property.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 也有一种方法可以使用 JavaScript 添加点击处理程序。我们选择要添加点击处理程序的 HTML 元素，并指定 onclick 属性。
- en: 'Here is a HTML snippet:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个 HTML 片段：
- en: '[PRE39]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This code is at the moment not doing anything if you click it. If we want to
    dynamically add a click handler to the `div` element, we can select it and specify
    the property via the console:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击它，此时代码不会执行任何操作。如果我们想动态地向 `div` 元素添加点击处理程序，我们可以选择它并通过控制台指定属性：
- en: '[PRE40]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: As it's been added in the console, this functionality will be gone when you
    refresh the page.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是在控制台中添加的，所以当您刷新页面时，此功能将消失。
- en: This and the DOM
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这和 DOM
- en: The `this` keyword always has a relative meaning; it depends on the exact context
    it is in. In the DOM, the special `this` keyword refers to the element of the
    DOM it belongs to. If we specify an `onclick` to send `this` in as an argument,
    it will send in the element the `onclick` is in.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`this` 关键字始终具有相对意义；它取决于它所在的上下文。在 DOM 中，特殊的 `this` 关键字指向它所属的 DOM 元素。如果我们指定一个
    `onclick` 并将 `this` 作为参数发送，它将发送 `onclick` 所在的元素。'
- en: '[PRE41]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'And this is what it will log:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它将记录的内容：
- en: '[PRE43]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: As you can see, it is logging the element it is in, the `button` element.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它记录了它所在的元素，即 `button` 元素。
- en: 'We can access the parent of `this` with a function like this:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用类似这样的函数来访问 `this` 的父级：
- en: '[PRE44]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In the above example, the body is the parent of the button. So if we click
    the button with the new function, it will output:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，body 是按钮的父级。因此，如果我们用新函数点击按钮，它将输出：
- en: '[PRE45]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We could output any other property of the element the same way; for example,
    `console.log(el.innerText);` would print the inner text value as we saw in the
    *Changing innerText* section.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用同样的方式输出元素的任何其他属性；例如，`console.log(el.innerText);` 会打印出我们在 *更改innerText*
    部分看到的内部文本值。
- en: So, the `this` keyword is referring to the element, and from this element we
    can traverse the DOM like we just learned. This can be very useful, for example,
    when you need to get the value of an input box. If you send `this`, then you can
    read and modify the properties of the element that triggered the function.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`this` 关键字是指向元素，并且我们可以像我们刚刚学习的那样从这个元素遍历 DOM。这可以非常有用，例如，当您需要获取输入框的值时。如果您发送
    `this`，那么您可以读取和修改触发函数的元素的属性。
- en: Practice exercise 10.7
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 10.7
- en: 'Create a button within a basic HTML document and add the `onclick` attribute.
    The example will demonstrate how you can reference object data with `this`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个基本的 HTML 文档中创建一个按钮，并添加 `onclick` 属性。示例将演示如何使用 `this` 引用对象数据：
- en: Create a function to handle a click within your JavaScript code. You can name
    the function `message`.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 JavaScript 代码中创建一个处理点击的函数。你可以将函数命名为 `message`。
- en: Add this to the `onclick` function parameters sending the current element object
    data using `this`.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `onclick` 函数参数中添加此，使用 `this` 发送当前元素对象数据。
- en: Within the `message` function, use `console.dir()` to output in the console
    the element object data that was sent to the function using `onclick` and `this`.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `message` 函数内部，使用 `console.dir()` 在控制台输出使用 `onclick` 和 `this` 发送到函数的元素对象数据。
- en: Add a second button to the page also invoking the same function on the click.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面上添加第二个按钮，也调用相同的点击函数。
- en: When the button is clicked, you should see the element that triggered the click
    in the console, like so:![Graphical user interface, text, application
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当按钮被点击时，你应该在控制台看到触发点击的元素，如下所示：![图形用户界面，文本，应用程序
- en: Description automatically generated](img/B16682_10_01.png)
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/B16682_10_01.png)
- en: 'Figure 10.1: Implementing the onclick attribute'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1：实现 onclick 属性
- en: Manipulating element style
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作元素样式
- en: 'After selecting the right element from the DOM, we can change the CSS style
    that applies to it. We can do this using the `style` property. This is how to
    do it:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在从 DOM 中选择正确的元素后，我们可以更改应用于它的 CSS 样式。我们可以使用 `style` 属性来完成此操作。以下是操作方法：
- en: Select the right element from the DOM.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 DOM 中选择正确的元素。
- en: Change the right property of the style property of this element.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改此元素的 `style` 属性的右侧属性。
- en: 'We are going to make a button that will toggle the appearing and disappearing
    of a line of text. To hide something using CSS, we can set the `display` property
    of the element to `none`, like this for a `p` (paragraph) element:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个按钮，该按钮将切换一行文本的显示和隐藏。要使用 CSS 隐藏某些内容，我们可以将元素的 `display` 属性设置为 `none`，例如对于
    `p`（段落）元素：
- en: '[PRE46]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'And we can toggle it back to visible using:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下方法将其切换回可见状态：
- en: '[PRE47]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We can add this style using JavaScript as well. Here is a little HTML and JavaScript
    snippet that will toggle the displaying of a piece of text:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用 JavaScript 添加此样式。以下是一个简单的 HTML 和 JavaScript 片段，它将切换文本的显示：
- en: '[PRE48]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: As you can see, in the `if` statement we are checking for whether it is currently
    hiding, if it is hiding, we show it. Otherwise, we hide it. If you click the button
    and it is currently visible, it will disappear. If you click the button when the
    text is gone, it will appear.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在 `if` 语句中，我们正在检查它是否正在隐藏，如果是，则显示它。否则，隐藏它。如果你点击按钮并且它当前是可见的，它将消失。如果你在文本消失时点击按钮，它将出现。
- en: You can do all sorts of fun things using this style element. What do you think
    this does when you click the button?
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此样式元素，你可以做各种有趣的事情。你认为点击按钮时它会做什么？
- en: '[PRE49]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This is what you see when you first open the page:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次打开页面时，你会看到以下内容：
- en: '![](img/B16682_10_02.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16682_10_02.png)'
- en: 'Figure 10.2: A button that will do wonderful things when it is clicked'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2：点击时将做奇妙事情的按钮
- en: 'And when you click the button:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击按钮时：
- en: '![](img/B16682_10_03.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16682_10_03.png)'
- en: 'Figure 10.3: Beautiful rainbow made by JavaScript at the click of a button'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3：按钮点击时由 JavaScript 制作的美丽彩虹
- en: Let's go over this script to see how works. First of all, there are a few `div`
    tags in the HTML that all have the ID of a certain color. There is a `style` tag
    specified in HTML, which gives a default layout to these `div` tags of 30px by
    30px and a white background.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下这个脚本，看看它是如何工作的。首先，HTML 中有几个 `div` 标签，它们都具有某种颜色的 ID。在 HTML 中指定了一个 `style`
    标签，它为这些 `div` 标签提供了默认布局，即 30px x 30px 的大小和白色背景。
- en: 'When you click the button, the `rainbowify()` JavaScript function is executed.
    In this function the following things are happening:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击按钮时，将执行 `rainbowify()` JavaScript 函数。在这个函数中，以下事情正在发生：
- en: All the `div` elements get selected and stored in an array, `divs`.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有 `div` 元素都被选中并存储在数组 `divs` 中。
- en: We loop over this `divs` array.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们遍历这个 `divs` 数组。
- en: For every element in the `divs` array, we are setting the `backgroundColor`
    property of style to the ID of the element. Since all the IDs represent a color,
    we see a rainbow appear.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 `divs` 数组中的每个元素，我们正在将 `style` 的 `backgroundColor` 属性设置为元素的 ID。由于所有 ID 都代表一种颜色，所以我们看到了彩虹的出现。
- en: As you can imagine, you can really have a lot of fun playing around with this.
    With just a few lines of code, you can make all sorts of things appear on the
    screen.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所想，你可以真正地玩得很开心。只需几行代码，你就可以在屏幕上显示各种东西。
- en: Changing the classes of an element
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改变元素的类
- en: HTML elements can have classes, and as we have seen, we can select elements
    by the name of the class. As you may remember, classes are used a lot for giving
    elements a certain layout using CSS.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: HTML元素可以有类，正如我们所看到的，我们可以通过类的名称来选择元素。你可能还记得，类经常被用来通过CSS给元素一个特定的布局。
- en: With JavaScript, we can change the classes of HTML elements, and this might
    trigger a certain layout that is associated with that class in CSS. We are going
    to have a look at adding classes, removing classes, and toggling classes.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JavaScript，我们可以改变HTML元素的类，这可能会触发与CSS中该类相关联的特定布局。我们将查看添加类、移除类和切换类。
- en: Adding classes to elements
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向元素添加类
- en: This might sound a bit vague, so let's have a look at an example where we are
    going to add a class to an element, which in this case will add a layout and make
    the element disappear.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能听起来有点模糊，所以让我们看看一个例子，我们将向一个元素添加一个类，在这种情况下，这将添加布局并使元素消失。
- en: '[PRE50]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In this example, we have some CSS specified in the `style` tag. Elements with
    the `hide` class have a `display`: `none` style, meaning they are hidden. Elements
    with the `square` class are 100 by 100 pixels and are yellow. But when they have
    both the `square` and `blue` class, they are blue.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个例子中，我们在`style`标签中指定了一些CSS。具有`hide`类的元素有一个`display`: `none`样式，这意味着它们被隐藏。具有`square`类的元素是100x100像素，并且是黄色的。但是当它们同时具有`square`和`blue`类时，它们是蓝色的。'
- en: When we click on the **Disappear!** button, the `disappear()` function gets
    called. This one is specified in the script tag. The `disappear()` function changes
    the classes by getting the `classList` property of the element with the ID `shape`,
    which is the square we are seeing. We are adding the `hide` class to the `classList`
    and because of this, the elements get the `display:` `none` layout and we can
    no longer see it.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击**消失！**按钮时，`disappear()`函数会被调用。这个函数在脚本标签中指定。`disappear()`函数通过获取具有ID `shape`的元素的`classList`属性来改变类，这个正方形就是我们看到的。我们在`classList`中添加了`hide`类，因此元素获得了`display:`
    `none`布局，我们就无法再看到它了。
- en: Removing classes from elements
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从元素中移除类
- en: 'We can also remove a class. If we remove the `hide` class from the `classList`,
    for example, we could see our element again because the `display: none` layout
    no longer applies.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '我们也可以移除一个类。如果我们从`classList`中移除`hide`类，例如，我们就可以再次看到我们的元素，因为`display: none`布局不再适用。'
- en: In this example, we are removing another class. Can you figure out what will
    happen if you press the button by looking at the code?
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在移除另一个类。你能通过查看代码来推断出按下按钮会发生什么吗？
- en: '[PRE51]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: When the button gets pressed, the change function gets triggered. This function
    removes the `blue` class, which removes the blue background color from the layout,
    leaving us with the yellow background color and the square will turn yellow.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 当按钮被按下时，改变函数会被触发。这个函数会移除`blue`类，从而移除布局中的蓝色背景色，留下黄色背景色，并且正方形会变成黄色。
- en: You may wonder why the square was blue in the first place since it had two layouts
    for `background-color` assigned to it with the CSS. This happens with a points
    system. When a styling is more specific, it gets more points. So, specifying two
    classes with no space in between means that it applies to elements with these
    two classes. This is more specific than pointing at one class.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道为什么正方形一开始是蓝色的，因为它有两个`background-color`的布局被CSS分配给了它。这是通过一个积分系统来实现的。当一个样式更具体时，它会获得更多的积分。所以，指定两个没有空格的类意味着它适用于具有这两个类的元素。这比指定一个类更具体。
- en: Referring to an ID in CSS, `#nameId`, gets even more points and would be prioritized
    over class-based layouts. This layering allows for less duplicate code, but it
    can become messy, so always make sure to combine the CSS and the HTML well to
    get the desired layout.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中引用ID，`#nameId`会获得更多的积分，并且会优先于基于类的布局。这种分层允许更少的重复代码，但它可能会变得混乱，所以一定要确保将CSS和HTML很好地结合起来，以获得所需的布局。
- en: Toggling classes
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切换类
- en: In some cases, you would want to add a class when it doesn't already have that
    particular class, but remove it when it does. This is called toggling. There is
    a special method to toggle classes. Let's change our first example to toggle the
    `hide` class so the class will appear when we press the button the second time,
    disappear the third time, and so on. The `blue` class was removed to make it shorter;
    it's not doing anything in this example other than making the square blue.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能想在元素还没有特定类时添加一个类，但如果它已经有了，就移除它。这被称为切换。有一个特殊的方法可以切换类。让我们改变我们的第一个例子，以便切换`hide`类，这样当我们在第二次点击按钮时，类将出现，第三次点击时消失，依此类推。`blue`类被移除以使其更短；在这个例子中，它除了使正方形变蓝之外没有做任何事情。
- en: '[PRE52]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Pressing the `Magic!` button will add the class to the `classList` when it isn't
    there and remove it when it is there. This means that you can see the result every
    time you press the button. The square keeps appearing and disappearing.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 点击`Magic!`按钮将添加类到`classList`中，如果它不存在的话，如果它已经存在，则将其移除。这意味着每次你点击按钮时，你都可以看到结果。正方形会不断出现和消失。
- en: Manipulating attributes
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作属性
- en: 'We have seen already that we can change the class and style attributes, but
    there is a more general method that can be used to change any attribute. Just
    a quick reminder, attributes are the parts in HTML elements that are followed
    by equals signs. For example, this HTML link to Google:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到我们可以更改`class`和`style`属性，但有一个更通用的方法可以用来更改任何属性。快速提醒一下，属性是HTML元素后面跟着等号的那些部分。例如，这个指向Google的HTML链接：
- en: '[PRE53]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The attributes in this example are `id`, `class`, and `href`. Other common attributes
    are `src` and `style`, but there are many others out there.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 本例中的属性是`id`、`class`和`href`。其他常见属性包括`src`和`style`，但还有很多其他属性。
- en: 'With the `setAttribute()` method, we can add or change attributes on an element.
    This will change the HTML of the page. If you inspect the HTML in the browser
    you will see that the changed attributes are visible. You can do this from the
    console and see the result easily, or write another HTML file with this built
    in as a function. In this HTML snippet, you will see it in action:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`setAttribute()`方法，我们可以在元素上添加或更改属性。这将改变页面的HTML。如果你在浏览器中检查HTML，你会看到更改后的属性是可见的。你可以从控制台操作并轻松查看结果，或者编写另一个包含此功能的HTML文件。在这个HTML片段中，你会看到它的实际应用：
- en: '[PRE54]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'This is the page before clicking the button:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这是点击按钮之前的页面：
- en: '![](img/B16682_10_04.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16682_10_04.png)'
- en: 'Figure 10.4: Page with a yellow square div'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4：带有黄色正方形`div`的页面
- en: 'After clicking the button, the HTML of the `div` becomes:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 点击按钮后，`div`的HTML变为：
- en: '[PRE55]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'As you can see, the attributes are changed. The `id` has changed from `shape`
    to `new`. The `class` has changed from `square` to `circle` and a `style` has
    been added. It will look like this:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，属性已经更改。`id`从`shape`更改为`new`。`class`从`square`更改为`circle`，并添加了一个`style`。它看起来是这样的：
- en: '![](img/B16682_10_05.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16682_10_05.png)'
- en: 'Figure 10.5: Page with a red circle with a black line around it'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5：带有黑色线条的红色圆圈页面
- en: This is a very powerful tool that can be used to interact with the DOM in very
    many ways. Think, for example, of a tool that can be used to create images, or
    even postcards. Beneath the surface, there is a lot of manipulating going on.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常强大的工具，可以以多种方式与DOM交互。例如，想象一下可以用来创建图片或甚至明信片的工具。在表面之下，有很多操作正在进行。
- en: It is important to note here that JavaScript interacts with the DOM and not
    with the HTML file—therefore, the DOM is the one that gets changed. If you click
    the button again, you'll get an error message in the console because no element
    with `id="shape"` is found in the DOM, and as a result we try to call a method
    on a null value.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的是，JavaScript与DOM交互，而不是与HTML文件交互——因此，DOM是唯一会发生变化的部分。如果你再次点击按钮，你将在控制台看到一个错误消息，因为没有在DOM中找到`id="shape"`的元素，因此我们尝试在空值上调用方法。
- en: Practice exercise 10.8
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.8
- en: 'Creating custom attributes: using an array of names, the following code will
    update the element''s HTML, adding HTML code using the data from the array. The
    items within the array will be output to the page as HTML code. The user will
    be able to click the page elements and they will display the page element attribute
    values.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义属性：使用名称数组，以下代码将更新元素的HTML，使用数组中的数据添加HTML代码。数组中的项将作为HTML代码输出到页面。用户可以点击页面元素，它们将显示页面元素的属性值。
- en: '![Table'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '![表格'
- en: Description automatically generated](img/B16682_10_06.png)
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/B16682_10_06.png)
- en: 'Figure 10.6: Creating custom attributes with an array of names'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6：使用名称数组创建自定义属性
- en: 'As the HTML will start getting more complex from now on, and we''re only trying
    to test your JavaScript, we will provide HTML templates to use where needed. You
    can use the following HTML template and provide your answer as the completed `script`
    element:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 由于从现在开始 HTML 将变得更加复杂，而我们只是尝试测试你的 JavaScript，我们将提供所需的 HTML 模板。你可以使用以下 HTML 模板，并将你的答案作为完成的
    `script` 元素提供：
- en: '[PRE56]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Take the following steps:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Create an array of names. You can add as many as you want—all the string values
    will be output onto the page within a table.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名称数组。你可以添加任意多个，所有的字符串值都将输出到页面中的表格内。
- en: Select the page elements as JavaScript objects.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将页面元素作为 JavaScript 对象选择。
- en: Add a function and also invoke that function within the JavaScript code. The
    function can be called `build()` as it will be building the page content. Within
    the `build` function, you will be setting up the HTML in a table.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个函数，并在 JavaScript 代码中调用该函数。该函数可以命名为 `build()`，因为它将构建页面内容。在 `build` 函数中，你将设置
    HTML 表格。
- en: Create a table named `html`, and within the tags, loop through the contents
    of the array and output the results into the `html` table.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `html` 的表格，并在标签内循环遍历数组的元素，将结果输出到 `html` 表格中。
- en: Add a class called `box` to one of the cells that has the index value of the
    item from the array, adding the same class to the elements for each additional
    row.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将名为 `box` 的类添加到具有数组项目索引值的单元格中，并为每个额外的行添加相同的类。
- en: As you create the HTML for the elements within the `tr` element, create an attribute
    called `data-row` in the main `row` element that includes the index value of the
    item from the array. In addition, add another attribute within the element called
    `data-name` that will contain the text output.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建 `tr` 元素内的 HTML 元素时，在主 `row` 元素中创建一个名为 `data-row` 的属性，包含数组中项目的索引值。此外，在元素内添加另一个名为
    `data-name` 的属性，它将包含文本输出。
- en: Within the attribute of the same `tr` element, also add `onclick` to invoke
    a function named `getData` passing the current element object as `this` into the
    function parameter.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的 `tr` 元素的属性中，也添加 `onclick` 以调用名为 `getData` 的函数，并将当前元素对象作为 `this` 传递给函数参数。
- en: Add the table of HTML code to the page.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 HTML 代码表添加到页面中。
- en: Create a function named `getData` that will be invoked once the HTML `tr` elements
    are clicked. Once the `tr` element is clicked, use `getAttribute` to get the attribute
    values of the row value and the contents of the text output and store them in
    different variables.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `getData` 的函数，当 HTML `tr` 元素被点击时调用。一旦 `tr` 元素被点击，使用 `getAttribute` 获取行值的属性值和文本输出的内容，并将它们存储在不同的变量中。
- en: Using the values in the attributes stored in the preceding step, output the
    values into the `message` element on the page.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前一步存储在属性中的值，将值输出到页面上的 `message` 元素中。
- en: Once the user clicks the element on the page, it will display the details coming
    from the element attributes within the element with the `id` of `message`.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击页面上的元素时，它将显示来自具有 `id` 为 `message` 的元素属性的详细信息。
- en: Event listeners on elements
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元素上的事件监听器
- en: 'Events are things that happen on a web page, like clicking on something, moving
    the mouse over an element, changing an element, and there are many more. We have
    seen how to add an `onclick` event handler already. In the same way, you can add
    an `onchange` handler, or an `onmouseover` handler. There is one special condition,
    though; one element can only have one event handler as an HTML attribute. So,
    if it has an `onclick` handler, it cannot have an `onmouseover` handler as well.
    At this point, we have only seen how to add event listeners using HTML attributes
    like this:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 事件是发生在网页上的事情，比如点击某个元素、将鼠标移至元素上、改变元素等，还有很多。我们已经看到了如何添加 `onclick` 事件处理器。同样地，你可以添加
    `onchange` 处理器或 `onmouseover` 处理器。不过有一个特殊条件；一个元素只能有一个事件处理器作为 HTML 属性。所以，如果它有一个
    `onclick` 处理器，就不能同时有 `onmouseover` 处理器。到目前为止，我们只看到了如何使用像这样 HTML 属性添加事件监听器：
- en: '[PRE57]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'There is a way to register event handlers using JavaScript as well. We call
    these event listeners. Using event listeners, we can add multiple events to one
    element. This way, JavaScript is constantly checking, or listening, for certain
    events to the elements on the page. Adding event listeners is a two-step process:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JavaScript 注册事件处理程序也有一种方法。我们称之为事件监听器。使用事件监听器，我们可以给一个元素添加多个事件。这样，JavaScript
    就会不断检查，或者说监听，页面上的元素是否发生了特定事件。添加事件监听器是一个两步的过程：
- en: Select the element you want to add an event to
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你想要添加事件的元素
- en: Use the `addEventListener("event", function)` syntax to add the event
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `addEventListener("event", function)` 语法添加事件
- en: 'Even though it is two steps, it can be done in one line of code:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是两步，也可以用一行代码完成：
- en: '[PRE58]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: This is getting the element with the ID `square` and adding the `changeColor`
    function as the event for whenever it gets clicked. Note that when using event
    listeners, we remove the `on` prefix from the event type. For example, `click`
    here references the same event type as `onclick`, but we have removed the `on`
    prefix.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在获取 ID 为 `square` 的元素，并将 `changeColor` 函数作为点击事件的监听器。注意，在使用事件监听器时，我们从事件类型中移除了
    `on` 前缀。例如，这里的 `click` 与 `onclick` 引用相同的事件类型，但我们移除了 `on` 前缀。
- en: Let's consider another way to add an event listener (don't worry, we will review
    these methods in detail in *Chapter 11*, *Interactive Content and Event Listeners*)
    by setting the `event` property of a certain object to a function.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑另一种添加事件监听器的方法（别担心，我们将在 *第 11 章*，*交互内容和事件监听器* 中详细回顾这些方法），通过设置某个对象的 `event`
    属性为一个函数。
- en: There is a fun fact here—event listeners often get added during other events!
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个有趣的事实——事件监听器通常是在其他事件中添加的！
- en: 'We could reuse our trusty `onclick` listener in this context, but another common
    one is when the web page is done loading with `onload`:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这种情况下重用我们信任的 `onclick` 监听器，但另一个常见的情况是当网页加载完成时使用 `onload`：
- en: '[PRE59]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This function will then be executed. This is common for `window.onload`, but
    less common for many others, such as `onclick` on a `div` (it is possible though).
    Let's look at an example of the first event listener we looked at on a web page.
    Can you figure out what it will be doing when you click on the square?
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将被执行。这在 `window.onload` 中很常见，但在许多其他情况下则较少见，例如 `div` 上的 `onclick`（尽管是可能的）。让我们看看我们在网页上查看的第一个事件监听器的例子。当你点击正方形时，你能想出它会做什么吗？
- en: '[PRE60]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The web page starts with a gray square with the text `Click for magic` in it.
    After the web page is done loading, an event gets added for this square. Whenever
    it gets clicked, the `changeColor` function will be executed. This function uses
    random variables to change the color using RGB colors. Whenever you click the
    square, the color gets updated with random values.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 网页从一个带有文本 `点击进行魔法` 的灰色正方形开始。当网页加载完成后，为这个正方形添加一个事件。每次点击时，`changeColor` 函数都会被执行。这个函数使用随机变量通过
    RGB 颜色改变颜色。每次你点击正方形，颜色都会更新为随机值。
- en: You can add events to all sorts of elements. We have only used the `click` event
    so far, but there are many more. For example, `focus`, `blur`, `focusin`, `focusout`,
    `mouseout`, `mouseover`, `keydown`, `keypress`, and `keyup`. These will be covered
    in the next chapter, so keep going!
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以向各种元素添加事件。到目前为止，我们只使用了 `click` 事件，但还有很多其他事件。例如，`focus`、`blur`、`focusin`、`focusout`、`mouseout`、`mouseover`、`keydown`、`keypress`
    和 `keyup`。这些将在下一章中介绍，所以继续前进！
- en: Practice exercise 10.9
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 10.9
- en: 'Try an alternative way to implement similar logic to *Practice exercise 10.7*.
    Use the following HTML code as a template for this exercise, and add the contents
    of the `script` element:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试一种替代方法来实现与 *练习 10.7* 类似的逻辑。使用以下 HTML 代码作为此练习的模板，并添加 `script` 元素的全部内容：
- en: '[PRE61]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Take the following steps:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下步骤操作：
- en: Select all the page buttons into a JavaScript object.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有页面按钮选择到一个 JavaScript 对象中。
- en: Loop through each button, and create a function within the button scope called
    output.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历每个按钮，并在按钮作用域内创建一个名为 `output` 的函数。
- en: Within the `output()` function, add a `console.log()` method that outputs the
    current object's `textContent`. You can reference the current parent object using
    the `this` keyword.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `output()` 函数中，添加一个 `console.log()` 方法，输出当前对象的 `textContent`。你可以使用 `this`
    关键字引用当前父对象。
- en: As you loop through the buttons attach an event listener that when clicked invokes
    the `output()` function.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你遍历按钮时，附加一个事件监听器，当点击时调用 `output()` 函数。
- en: Creating new elements
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新元素
- en: In this chapter, you have seen so many cool ways to manipulate the DOM already.
    There is still an important one missing, the creation of new elements and adding
    them to the DOM. This consists of two steps, first creating new elements and second
    adding them to the DOM.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经看到了许多操作DOM的酷炫方法。还有一个重要的方法尚未介绍，那就是创建新元素并将它们添加到DOM中。这包括两个步骤，首先是创建新元素，其次是将它们添加到DOM中。
- en: 'This is not as hard as it may seem. The following JavaScript does just that:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不像看起来那么难。下面的JavaScript就是这样做的：
- en: '[PRE62]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'It creates an element of type `p` (paragraph). This is a `createElement()`
    function that is on the `document` object. Upon creation, you need to specify
    what type of HTML element you would want to create, which in this case is a `p`,
    so something like this:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 它创建了一个类型为`p`（段落）的元素。这是一个位于`document`对象上的`createElement()`函数。在创建时，您需要指定您想要创建的HTML元素类型，在这个例子中是`p`，所以像这样：
- en: '[PRE63]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: And as `innerText`, it is adding a random number. Next, it is adding the element
    as a new last child of the body. You could also add it to another element; just
    select the element you want to add it to and use the `appendChild()` method.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 并且作为`innerText`，它正在添加一个随机数字。接下来，它将元素作为body的新最后一个子元素添加。您也可以将其添加到另一个元素中；只需选择您想要添加的元素，并使用`appendChild()`方法。
- en: Here, you can see it incorporated in a HTML page. This page has a button, and
    whenever it gets pressed, the `p` gets added.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到它被整合到一个HTML页面中。这个页面有一个按钮，每次按下按钮时，都会添加一个`p`元素。
- en: '[PRE64]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Here is a screenshot of this page after having pressed the button five times.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这是按下按钮五次后该页面的截图。
- en: '![](img/B16682_10_07.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![img/B16682_10_07.png]'
- en: 'Figure 10.7: Random numbers after pressing the button five times'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7：点击按钮五次后的随机数字
- en: Once we refresh the page, it's empty again. The file with the source code doesn't
    change and we're not storing it anywhere.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们刷新页面，它就又变空了。包含源代码的文件没有改变，我们也没有将其存储在任何地方。
- en: Practice exercise 10.10
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习练习10.10
- en: 'Shopping list: Using the following HTML template, update the code to add new
    items to the list of items on the page. Once the button is clicked, it will add
    a new item to the list of items:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 购物清单：使用以下HTML模板，更新代码以将新项目添加到页面上的项目列表。一旦点击按钮，它将向项目列表添加一个新项目：
- en: '[PRE65]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Take the following steps:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Select the page elements as JavaScript objects.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将页面元素作为JavaScript对象选择。
- en: Add an `onclick` event listener to the add button. Once the button is clicked,
    it should add the contents of the input field to the end of the list. You can
    call the function `addOne()`.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给添加按钮添加一个`onclick`事件监听器。一旦按钮被点击，它应该将输入字段的全部内容添加到列表的末尾。您可以调用`addOne()`函数。
- en: Within `addOne()`, create `li` elements to append to the main list on the page.
    Add the input value to the list item text content.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`addOne()`函数中，创建`li`元素并将其附加到页面上的主列表。将输入值添加到列表项的文本内容中。
- en: Within the `addOne()` function, get the current value of the `addItem` input
    field. Use that value to create a `textNode` with that value, adding it to the
    list item. Append the `textNode` to the list item.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`addOne()`函数中，获取`addItem`输入字段的当前值。使用该值创建一个具有该值的`textNode`，并将其添加到列表项中。将`textNode`附加到列表项。
- en: Chapter projects
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节项目
- en: Collapsible accordion component
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可折叠的折叠组件
- en: 'Build a collapsing and expanding accordion component that will open page elements,
    hiding and showing content when the title tab is clicked. Using the following
    HTML as a template, add the completed `script` element and create the desired
    functionality with JavaScript:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个可折叠和展开的折叠组件，当点击标题标签时，将打开页面元素，隐藏和显示内容。使用以下HTML作为模板，添加完成的`script`元素，并使用JavaScript创建所需的功能：
- en: '[PRE66]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Take the following steps:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Using `querySelectorAll()`, select all the elements with a class of `title`.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`querySelectorAll()`选择所有具有`title`类的元素。
- en: Using `querySelectorAll()`, select all the elements with a class of `myText`.
    This should be the same number of elements as the `title` elements.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`querySelectorAll()`选择所有具有`myText`类的元素。这些元素的数量应该与`title`元素的数量相同。
- en: Iterate through all the `title` elements and add event listeners that, once
    clicked, will select the next element siblings.
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历所有`title`元素，并添加事件监听器，一旦点击，将选择下一个元素的同级元素。
- en: Select the element on the `click` action and toggle the `classlist` of the element
    with the `class` of `active`. This will allow the user to click the element and
    hide and show the below content.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`click`动作中选择元素，并使用具有`active`类的`classlist`切换元素的类。这将允许用户点击元素并隐藏或显示下面的内容。
- en: Add a function that will be invoked each time the elements are clicked that
    will remove the `class` of `active` from all the elements. This will hide all
    the elements with `myText`.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个函数，每次点击元素时都会调用，该函数将从所有元素中移除`class`的`active`。这将隐藏所有带有`myText`的元素。
- en: Interactive voting system
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交互式投票系统
- en: The below code will create a dynamic list of people that can be clicked, and
    it will update the corresponding value with the number of times that name was
    clicked. It also includes an input field that will allow you to add more users
    to the list, each of which will create another item in the list that can be interacted
    with the same as the default list items.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将创建一个动态的人名列表，可以点击，并且它将更新与该名字被点击次数相对应的值。它还包括一个输入字段，允许您将更多用户添加到列表中，每个用户都会在列表中创建另一个可以与之交互的项目，就像默认列表项一样。
- en: '![Table'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '![表格'
- en: Description automatically generated](img/B16682_10_08.png)
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/B16682_10_08.png)
- en: 'Figure 10.8: Creating an interactive voting system'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8：创建一个交互式投票系统
- en: Use the following HTML code as a template to add JavaScript to, and provide
    your answer as the completed `script` element.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下HTML代码作为模板来添加JavaScript，并提供您的答案作为完成的`script`元素。
- en: '[PRE67]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Take the following steps:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 采取以下步骤：
- en: Create an array of people's names called `myArray`. This will be the default
    original list of names.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`myArray`的人名数组。这将默认为原始名单。
- en: Select the page elements as JavaScript objects so they can easily be selected
    within the code.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将页面元素作为JavaScript对象选择，以便在代码中轻松选择。
- en: Add event listener to the **Add Friend** button. Once clicked, this will get
    the value from the input field and pass the values to a function that will add
    the friend list to the page. Additionally, add the new friend's name into the
    people's names array you created. Get the current value in the input field and
    push that value into the array so the array matches the values on the page.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将事件监听器添加到**添加朋友**按钮上。一旦点击，这将从输入字段获取值并将这些值传递给一个函数，该函数将朋友列表添加到页面上。此外，将新朋友的名字添加到您创建的人名数组中。获取输入字段中的当前值并将该值推送到数组中，以便数组与页面上的值匹配。
- en: Run a function to build the content on the page, using the `forEach()` loop
    get all the items within the array and add them to the page. Include `0` as a
    default for the vote count, as all individuals should start on zero votes.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行一个函数来构建页面上的内容，使用`forEach()`循环获取数组中的所有项目并将它们添加到页面上。将`0`作为默认的投票计数，因为所有个人都应该从零票开始。
- en: Create a main function that will create the page elements, starting with the
    parent table row, `tr`. Then create three table cell, `td`, elements. Add content
    to the table cells, including the vote count in the last column, the person name
    in the middle, and the index plus 1 in the first column.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个主函数，该函数将创建页面元素，从父表行`tr`开始，然后创建三个表格单元格`td`元素。向表格单元格添加内容，包括最后一列的投票计数，中间的人名，以及第一列的索引加1。
- en: Append the table cells to the table row and append the table row to the output
    area on the page.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将表格单元格添加到表格行中，并将表格行添加到页面上的输出区域。
- en: Add an event listener that will increase the vote counter for that row when
    the user clicks.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个事件监听器，当用户点击时，将增加该行的投票计数器。
- en: Get the text content from the last column in the row. It should be the value
    of the current counter. Increment the counter by one and make sure the datatype
    is a number so you can add to it.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从行中的最后一列获取文本内容。它应该是当前计数器的值。将计数器加一，并确保数据类型是数字，这样您就可以将其添加到它。
- en: Update the last column with the new click counter.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新最后一列以显示新的点击计数器。
- en: Hangman game
  id: totrans-352
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挂科游戏
- en: 'Create a Hangman game using arrays and page elements. You can use the following
    HTML template:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数组和页面元素创建一个挂科游戏。您可以使用以下HTML模板：
- en: '[PRE68]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Take the following steps:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 采取以下步骤：
- en: Set up an array that contains some words or phrases that you want to use in
    the game.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个包含您想在游戏中使用的单词或短语的数组。
- en: In JavaScript, create a main game object containing a property to contain the
    current word solution, and another property to contain the array of letters of
    the solution. It should also create an array to contain the page elements and
    correspond with the values of the index values of each letter from the solution,
    and finally add a property to count the number of letters left to solve and end
    the game when needed.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JavaScript中，创建一个主游戏对象，包含一个属性来包含当前单词解决方案，另一个属性来包含解决方案的字母数组。还应创建一个数组来包含页面元素，并与解决方案中每个字母的索引值相对应，最后添加一个属性来计算剩余要解决的字母数并在需要时结束游戏。
- en: Select all the page elements into variables so they are easier to access in
    the code.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有页面元素选择到变量中，以便在代码中更容易访问。
- en: Add an event listener to the **Start Game** button, making it clickable, and
    when it gets clicked it should launch a function called `startGame()`.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为**开始游戏**按钮添加事件监听器，使其可点击，当点击时，应启动一个名为`startGame()`的函数。
- en: Within `startGame()`, check if the `words` array has any words left. If it does,
    then hide the button by setting the `.display` object to `none`. Clear the game
    contents and set the total to `0`. Within the current word in the game object,
    assign a value, which should be the response of `shift()` from the array containing
    the in-game words.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`startGame()`函数内部，检查`words`数组是否还有剩余的单词。如果有，则通过将`.display`对象设置为`none`来隐藏按钮。清除游戏内容并将总数设置为`0`。在游戏对象中的当前单词中分配一个值，该值应该是包含游戏单词的数组中`shift()`的响应。
- en: In the game solution, convert the string into an array of all the characters
    in the word solution using `split()`.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在游戏解决方案中，使用`split()`将字符串转换为包含单词解决方案中所有字符的数组。
- en: Create a function called `builder()` that can be used to build the game board.
    Invoke the function within the `startGame()` function once all the game values
    are cleared and set.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`builder()`的函数，用于构建游戏板。在所有游戏值清除并设置后，在`startGame()`函数中调用该函数。
- en: Create a separate function that you can use to generate page elements. In the
    parameters, get the type of element, the parent that the new element will be appended
    to, the output content for the new element, and a class to add to the new element.
    Using a temporary variable, create the element, add the class, append to the parent,
    set the `textContent`, and return the element.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个单独的函数，用于生成页面元素。在参数中，获取元素的类型、新元素将附加到的父元素、新元素的输出内容以及要添加到新元素的类。使用一个临时变量创建元素，添加类，将其附加到父元素，设置`textContent`，并返回元素。
- en: In the `builder()` function, which will also get invoked once `startGame()`
    is run, clear the `innerHTML` from the letters and puzzle page elements.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`builder()`函数中，该函数在运行`startGame()`时也会被调用，需要清除字母和拼图页面元素中的`innerHTML`。
- en: Iterate through the game solution array, getting each letter of the solution.
    Use the `builder()` function to generate page elements, add an output value of
    `-`, set a class, and append it to the main puzzle page element.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历游戏解决方案数组，获取解决方案中的每个字母。使用`builder()`函数生成页面元素，添加输出值为`-`，设置类，并将其附加到主拼图页面元素。
- en: Check if the value is blank, and if it is, clear `textContent` and update the
    border to white. If it's not blank, increment the total so that it reflects the
    total number of letters that must be guessed. Push the new element into the game
    puzzle array.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查值是否为空，如果是，则清除`textContent`并将边框更新为白色。如果不为空，则增加总数，使其反映必须猜测的总字母数。将新元素推入游戏拼图数组。
- en: Create a new function to update the score so that you can output the current
    number of letters left. Add it to the `builder()` function.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新函数来更新分数，以便可以输出当前剩余的字母数。将其添加到`builder()`函数中。
- en: Create a loop to represent the 26 letters of the alphabet. You can generate
    the letter by using an array containing all the letters. The string method `fromCharCode()`
    will return the character from the numeric representation.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个循环来表示26个字母表中的字母。你可以使用包含所有字母的数组生成字母。字符串方法`fromCharCode()`将返回数字表示形式的字符。
- en: Create elements for each letter, adding a `class` of `box` and appending it
    to the `letters` page element. As each element gets created, add an event listener
    that runs a function called `checker()`.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个字母创建元素，添加`class`为`box`并将其附加到`letters`页面元素。随着每个元素的创建，添加一个运行名为`checker()`的函数的事件监听器。
- en: Once the letter gets clicked, we need to invoke the `checker()` function, which
    will remove the main class, add another class, remove the event listener, and
    update the background color. Also invoke a function called `checkLetter()`, passing
    the value of the clicked letter into the argument.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦点击信件，我们需要调用`checker()`函数，该函数将移除主类，添加另一个类，移除事件监听器，并更新背景颜色。同时调用一个名为`checkLetter()`的函数，将点击信件的值传递给参数。
- en: The `checkLetter()` function will loop through all the solution letters. Add
    a condition to check if the solution letter is equal to the letter selected by
    the player. Make sure to convert the inputted letter to uppercase so that you
    can match the letters accurately. Update the matching letters in the puzzle using
    the game puzzle array and the index from the letter in the solution. The index
    values will be the same on each, which provides an easy way to match the visual
    representation with what is in the array.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`checkLetter()`函数将遍历所有解决方案字母。添加一个条件来检查解决方案字母是否等于玩家选择的字母。确保将输入的字母转换为大写，以便可以准确匹配字母。使用游戏谜题数组和从解决方案中的字母索引更新谜题中的匹配字母。索引值在每个中都是相同的，这为将视觉表示与数组中的内容匹配提供了一个简单的方法。'
- en: Subtract one from the game global object that tracks the total letters left
    to be solved, invoke the `updatescore()` function to check if the game is over,
    and update the score. Set the `textContent` of the puzzle to the letter removing
    the original dash.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从跟踪剩余待解总字母数的游戏全局对象中减去一个，调用`updatescore()`函数检查游戏是否结束，并更新分数。将谜题的`textContent`设置为移除原始破折号的字母。
- en: In the `updatescore()` function, set the score to the number of letters left.
    If the total left is less than or equal to zero, the game is over. Show the button
    so that the player has an option for the next phrase.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`updatescore()`函数中，将分数设置为剩余字母的数量。如果剩余总数小于或等于零，则游戏结束。显示按钮，以便玩家有选择下一个短语的选项。
- en: Self-check quiz
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自我检查测验
- en: What output will the following code produce?
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码将产生什么输出？
- en: '[PRE69]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: What output will be seen within the browser page?
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器页面中可以看到什么输出？
- en: '[PRE70]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: What will be seen in the input field from the following code?
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码将在输入字段中看到什么？
- en: '[PRE71]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: In the following code, what is output into the console when the element with
    the word `three` gets clicked? What is the output when the element with the word
    `one` gets clicked?
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下代码中，当点击包含单词`three`的元素时，控制台输出什么？当点击包含单词`one`的元素时，输出什么？
- en: '[PRE72]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: What line of code needs to be added to remove the event listener when the button
    is clicked in the following code?
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下代码中，需要添加哪一行代码来在按钮点击时移除事件监听器？
- en: '[PRE73]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Summary
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we really took our web skills to the next level. Manipulating
    the DOM allows all kinds of interactions with the web page, meaning that the web
    page is no longer a static event.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们真正将我们的网络技能提升到了新的水平。操作DOM允许与网页进行各种交互，这意味着网页不再是一个静态的事件。
- en: We started off by explaining the dynamic web and how to traverse the DOM. After
    having walked over the elements manually, we learned that there's an easier way
    to select elements in the DOM with the `getElementBy…()` and the `querySelector()`
    methods. After having selected them, we had the power to modify them, add new
    elements to them, and do all sorts of things using the elements we selected. We
    started with some more basic HTML handlers, and we could assign a function to,
    for example, the `onclick` attribute of the HTML element.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先解释了动态网页以及如何遍历DOM。在手动遍历元素之后，我们了解到使用`getElementBy…()`和`querySelector()`方法选择DOM中的元素有更简单的方法。在选择了它们之后，我们有了修改它们、向它们添加新元素以及使用所选元素执行所有
    sorts of things 的能力。我们从一些更基本的HTML处理器开始，并可以将函数分配给例如HTML元素的`onclick`属性。
- en: We also accessed the clicked element using the `this` argument that was sent
    in as a parameter, and we could modify it in different ways, for example, by changing
    the `style` property. We also saw how to add classes to an element, create new
    elements, and add them to the DOM. And finally, we worked with event listeners
    on elements that really took our dynamic web pages to the next level. With event
    listeners, we can specify more than one event handler for a certain element. All
    these new skills allow us to create amazing things in the web browser. You can
    actually create complete games now!
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了作为参数传入的`this`参数来访问被点击的元素，并且我们可以以不同的方式修改它，例如，通过更改`style`属性。我们还看到了如何向一个元素添加类，创建新元素，并将它们添加到DOM中。最后，我们与元素上的事件监听器一起工作，这真正将我们的动态网页提升到了新的水平。通过事件监听器，我们可以为某个元素指定多个事件处理程序。所有这些新技能都使我们能够在网页浏览器中创建令人惊叹的事物。你现在实际上可以创建完整的游戏了！
- en: The next chapter will take your event handler skills to the next level and will
    enhance your ability to create interactive web pages even further (and make it
    a bit easier as well!).
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将带你将事件处理技能提升到新的水平，并将进一步增强你创建交互式网页的能力（而且也会变得稍微容易一些！）。
