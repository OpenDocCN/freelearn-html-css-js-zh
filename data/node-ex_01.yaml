- en: Chapter 1. Node.js Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。Node.js基础知识
- en: 'Node.js is one of the most popular JavaScript-driven technologies nowadays.
    It was created in 2009 by Ryan Dahl and since then, the framework has evolved
    into a well-developed ecosystem. Its package manager is full of useful modules
    and developers around the world have started using Node.js in their production
    environments. In this chapter, we will learn about the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是当今最流行的JavaScript驱动技术之一。它是由Ryan Dahl于2009年创建的，自那时起，该框架已经发展成为一个完善的生态系统。它的包管理器中充满了有用的模块，全世界的开发人员已经开始在他们的生产环境中使用Node.js。在本章中，我们将学习以下内容：
- en: Node.js building blocks
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js构建模块
- en: The main capabilities of the environment
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境的主要功能
- en: The package management of Node.js
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js的包管理
- en: Understanding the Node.js architecture
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Node.js架构
- en: Back in the days, Ryan was interested in developing network applications. He
    found out that most high performance servers followed similar concepts. Their
    architecture was similar to that of an event loop and they worked with nonblocking
    input/output operations. These operations would permit other processing activities
    to continue before an ongoing task could be finished. These characteristics are
    very important if we want to handle thousands of simultaneous requests.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，Ryan对开发网络应用程序很感兴趣。他发现大多数高性能服务器遵循类似的概念。它们的架构类似于事件循环，并且它们使用非阻塞的输入/输出操作。这些操作允许其他处理活动在进行中的任务完成之前继续进行。如果我们想处理成千上万个同时的请求，这些特征是非常重要的。
- en: Most of the servers written in Java or C use multithreading. They process every
    request in a new thread. Ryan decided to try something different—a single-threaded
    architecture. In other words, all the requests that come to the server are processed
    by a single thread. This may sound like a nonscalable solution, but Node.js is
    definitely scalable. We just have to run different Node.js processes and use a
    load balancer that distributes the requests between them.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数用Java或C编写的服务器使用多线程。它们在新线程中处理每个请求。Ryan决定尝试一些不同的东西——单线程架构。换句话说，服务器收到的所有请求都由单个线程处理。这可能听起来像一个不可扩展的解决方案，但Node.js绝对是可扩展的。我们只需运行不同的Node.js进程，并使用一个负载均衡器来在它们之间分发请求。
- en: 'Ryan needed something that is event-loop-based and which works fast. As he
    pointed out in one of his presentations, big companies such as Google, Apple,
    and Microsoft invest a lot of time in developing high performance JavaScript engines.
    They have become faster and faster every year. There, event-loop architecture
    is implemented. JavaScript has become really popular in recent years. The community
    and the hundreds of thousands of developers who are ready to contribute made Ryan
    think about using JavaScript. Here is a diagram of the Node.js architecture:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Ryan需要一个基于事件循环的快速工作的东西。正如他在其中一次演讲中指出的，像谷歌、苹果和微软这样的大公司投入了大量时间开发高性能的JavaScript引擎。它们每年都变得越来越快。在那里，事件循环架构得到了实现。JavaScript近年来变得非常流行。社区和成千上万的开发人员准备贡献，让Ryan考虑使用JavaScript。这是Node.js架构的图表：
- en: '![Understanding the Node.js architecture](img/image00157.jpeg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![理解Node.js架构](img/image00157.jpeg)'
- en: 'In general, Node.js is made up of three things:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，Node.js由三部分组成：
- en: V8 is Google's JavaScript engine that is used in the Chrome web browser ([https://developers.google.com/v8/](https://developers.google.com/v8/))
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: V8是谷歌的JavaScript引擎，用于Chrome浏览器（[https://developers.google.com/v8/](https://developers.google.com/v8/)）
- en: A thread pool is the part that handles the file input/output operations. All
    the blocking system calls are executed here ([http://software.schmorp.de/pkg/libeio.html](http://software.schmorp.de/pkg/libeio.html))
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程池是处理文件输入/输出操作的部分。所有阻塞系统调用都在这里执行（[http://software.schmorp.de/pkg/libeio.html](http://software.schmorp.de/pkg/libeio.html)）
- en: The event loop library ([http://software.schmorp.de/pkg/libev.html](http://software.schmorp.de/pkg/libev.html))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件循环库（[http://software.schmorp.de/pkg/libev.html](http://software.schmorp.de/pkg/libev.html)）
- en: On top of these three blocks, we have several bindings that expose low-level
    interfaces. The rest of Node.js is written in JavaScript. Almost all the APIs
    that we see as built-in modules and which are present in the documentation, are
    written in JavaScript.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这三个模块之上，我们有几个绑定，它们公开了低级接口。Node.js的其余部分都是用JavaScript编写的。几乎所有我们在文档中看到的内置模块的API都是用JavaScript编写的。
- en: Installing Node.js
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Node.js
- en: 'A fast and easy way to install Node.js is by visiting [https://nodejs.org/download/](https://nodejs.org/download/)
    and downloading the appropriate installer for your operating system. For OS X
    and Windows users, the installer provides a nice, easy-to-use interface. For developers
    that use Linux as an operating system, Node.js is available in the APT package
    manager. The following commands will set up Node.js and **Node Package Manager**
    (**NPM**):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Node.js的一种快速简便的方法是访问[https://nodejs.org/download/](https://nodejs.org/download/)并下载适合您操作系统的安装程序。对于OS
    X和Windows用户，安装程序提供了一个漂亮、易于使用的界面。对于使用Linux作为操作系统的开发人员，Node.js可以在APT软件包管理器中找到。以下命令将设置Node.js和**Node
    Package Manager**（**NPM**）：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Running Node.js server
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行Node.js服务器
- en: 'Node.js is a command-line tool. After installing it, the `node` command will
    be available on our terminal. The `node` command accepts several arguments, but
    the most important one is the file that contains our JavaScript. Let''s create
    a file called `server.js` and put the following code inside:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是一个命令行工具。安装后，`node`命令将在我们的终端上可用。`node`命令接受几个参数，但最重要的是包含我们的JavaScript的文件。让我们创建一个名为`server.js`的文件，并将以下代码放入其中：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books that you have purchased. If you purchased this
    book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt Publishing图书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，文件将直接通过电子邮件发送给您。
- en: If you run `node ./server.js` in your console, you will have the Node.js server
    running. It listens for incoming requests at localhost (`127.0.0.1`) on port `9000`.
    The very first line of the preceding code requires the built-in `http` module.
    In Node.js, we have the `require` global function that provides the mechanism
    to use external modules. We will see how to define our own modules in a bit. After
    that, the scripts continue with the `createServer` and `listen` methods on the
    `http` module. In this case, the API of the module is designed in such a way that
    we can chain these two methods like in jQuery.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在控制台中运行`node ./server.js`，你将拥有Node.js服务器在运行。它在本地（`127.0.0.1`）的端口`9000`上监听传入的请求。前面代码的第一行需要内置的`http`模块。在Node.js中，我们有`require`全局函数，它提供了使用外部模块的机制。我们将看到如何定义我们自己的模块。之后，脚本继续使用`http`模块上的`createServer`和`listen`方法。在这种情况下，模块的API被设计成我们可以像在jQuery中那样链接这两种方法。
- en: The first one (`createServer`) accepts a function that is also known as a callback,
    which is called every time a new request comes to the server. The second one makes
    the server listen.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个（`createServer`）接受一个函数，也称为回调，每当有新的请求到达服务器时就会调用它。第二个使服务器监听。
- en: 'The result that we will get in a browser is as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中得到的结果如下：
- en: '![Running Node.js server](img/image00158.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![运行Node.js服务器](img/image00158.jpeg)'
- en: Defining and using modules
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义和使用模块
- en: JavaScript as a language does not have mechanisms to define real classes. In
    fact, everything in JavaScript is an object. We normally inherit properties and
    functions from one object to another. Thankfully, Node.js adopts the concepts
    defined by **CommonJS**—a project that specifies an ecosystem for JavaScript.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种语言，JavaScript没有定义真正的类的机制。事实上，JavaScript中的一切都是对象。我们通常从一个对象继承属性和函数到另一个对象。幸运的是，Node.js采用了**CommonJS**定义的概念——这是一个为JavaScript指定生态系统的项目。
- en: 'We encapsulate logic in modules. Every module is defined in its own file. Let''s
    illustrate how everything works with a simple example. Let''s say that we have
    a module that represents this book and we save it in a file called `book.js`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逻辑封装在模块中。每个模块都在自己的文件中定义。让我们用一个简单的例子来说明一切是如何工作的。假设我们有一个代表这本书的模块，并将其保存在一个名为`book.js`的文件中：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We defined a public property and a public function. Now, we will use `require`
    to access them:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个公共属性和一个公共函数。现在，我们将使用`require`来访问它们：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will now create another file named `script.js`. To test our code, we will
    run `node ./script.js`. The result in the terminal looks like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建另一个名为`script.js`的文件。为了测试我们的代码，我们将运行`node ./script.js`。终端中的结果如下：
- en: '![Defining and using modules](img/image00159.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![定义和使用模块](img/image00159.jpeg)'
- en: 'Along with `exports`, we also have `module.exports` available. There is a difference
    between the two. Look at the following pseudocode. It illustrates how Node.js
    constructs our modules:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`exports`，我们还有`module.exports`可用。两者之间有区别。看看下面的伪代码。它说明了Node.js如何构建我们的模块：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'So, in the end, `module.exports` is returned and this is what `require` produces.
    We should be careful because if at some point we apply a value directly to `exports`
    or `module.exports`, we may not receive what we need. Like at the end of the following
    snippet, we set a function as a value and that function is exposed to the outside
    world:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最终返回`module.exports`，这就是`require`产生的。我们应该小心，因为如果在某个时刻我们直接应用一个值到`exports`或`module.exports`，我们可能得不到我们需要的东西。就像在下面的片段末尾，我们将一个函数设置为一个值，这个函数暴露给外部世界：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this case, we do not have an access to `.name` and `.read`. If we try to
    execute `node ./script.js` again, we will get the following output:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们无法访问`.name`和`.read`。如果我们再次尝试执行`node ./script.js`，我们将得到以下输出：
- en: '![Defining and using modules](img/image00160.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![定义和使用模块](img/image00160.jpeg)'
- en: To avoid such issues, we should stick to one of the two options—`exports` or
    `module.exports`—but make sure that we do not have both.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种问题，我们应该坚持两种选项之一——`exports`或`module.exports`——但要确保我们没有两者都有。
- en: 'We should also keep in mind that by default, `require` caches the object that
    is returned. So, if we need two different instances, we should export a function.
    Here is a version of the `book` class that provides API methods to rate the books
    and that do not work properly:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该记住，默认情况下，`require`会缓存返回的对象。因此，如果我们需要两个不同的实例，我们应该导出一个函数。这是一个提供API方法来评价书籍并且不正常工作的`book`类的版本：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s create two instances and rate the books with different `points` value:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建两个实例，并用不同的`points`值对书籍进行评分：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The logical response should be `10 20`, but we got `20 20`. This is why it
    is a common practice to export a function that produces a different object every
    time:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑上的响应应该是`10 20`，但我们得到了`20 20`。这就是为什么导出一个每次产生不同对象的函数是一个常见的做法：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, we should also have `require('./book.js')()` because `require` returns
    a function and not an object anymore.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们还应该有`require('./book.js')()`，因为`require`返回的是一个函数，而不再是一个对象。
- en: Managing and distributing packages
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理和分发包
- en: Once we understand the idea of `require` and `exports`, we should start thinking
    about grouping our logic into building blocks. In the Node.js world, these blocks
    are called **modules** (or **packages**). One of the reasons behind the popularity
    of Node.js is its package management.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们理解了`require`和`exports`的概念，我们应该开始考虑将我们的逻辑分组到构建块中。在Node.js世界中，这些块被称为**模块**（或**包**）。Node.js受欢迎的原因之一就是其包管理。
- en: Node.js normally comes with two executables—`node` and `npm`. NPM is a command-line
    tool that downloads and uploads Node.js packages. The official site, [https://npmjs.org/](https://npmjs.org/),
    acts as a central registry. When we create a package via the `npm` command, we
    store it there so that every other developer may use it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js通常带有两个可执行文件—`node`和`npm`。NPM是一个命令行工具，用于下载和上传Node.js包。官方网站[https://npmjs.org/](https://npmjs.org/)充当中央注册表。当我们通过`npm`命令创建一个包时，我们将其存储在那里，以便其他开发人员可以使用它。
- en: Creating a module
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模块
- en: 'Every module should live in its own directory, which also contains a metadata
    file called `package.json`. In this file, we have set at least two properties—`name`
    and `version`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块都应该存在于自己的目录中，该目录还包含一个名为`package.json`的元数据文件。在这个文件中，我们至少设置了两个属性—`name`和`version`：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can place whatever code we like in the same directory. Once we publish the
    module to the NPM registry and someone installs it, he/she will get the same files.
    For example, let''s add an `index.js` file so that we have two files in the package:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在同一个目录中放置任何我们喜欢的代码。一旦我们将模块发布到NPM注册表并有人安装它，他/她将得到相同的文件。例如，让我们添加一个`index.js`文件，这样我们的包中就有两个文件了：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Our module does only one thing—it displays a simple message to the console.
    Now, to upload the modules, we need to navigate to the directory containing the
    `package.json` file and execute `npm publish`. This is the result that we should
    see:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模块只做一件事—在控制台上显示一个简单的消息。现在，要上传模块，我们需要导航到包含`package.json`文件的目录，并执行`npm publish`。这是我们应该看到的结果：
- en: '![Creating a module](img/image00161.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![创建模块](img/image00161.jpeg)'
- en: We are ready. Now our little module is listed in the Node.js package manager's
    site and everyone is able to download it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备好了。现在我们的小模块已经列在Node.js包管理器的网站上，每个人都可以下载它。
- en: Using modules
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模块
- en: 'In general, there are three ways to use the modules that are already created.
    All three ways involve the package manager:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，有三种使用已创建的模块的方法。所有三种方法都涉及包管理器：
- en: 'We may install a specific module manually. Let''s say that we have a folder
    called `project`. We open the folder and run the following:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以手动安装特定的模块。假设我们有一个名为`project`的文件夹。我们打开文件夹并运行以下命令：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The manager automatically downloads the latest version of the module and puts
    it in a folder called `node_modules`. If we want to use it, we do not need to
    reference the exact path. By default, Node.js checks the `node_modules` folder
    before requiring something. So, just `require('my-awesome-nodejs-module')` will
    be enough.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 管理器会自动下载模块的最新版本，并将其放在一个名为`node_modules`的文件夹中。如果我们想要使用它，就不需要引用确切的路径。默认情况下，Node.js在需要时会检查`node_modules`文件夹。因此，只需`require('my-awesome-nodejs-module')`就足够了。
- en: 'The installation of modules globally is a common practice, especially if we
    talk about command-line tools made with Node.js. It has become an easy-to-use
    technology to develop such tools. The little module that we created is not made
    as a command-line program, but we can still install it globally by running the
    following code:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局安装模块是一种常见的做法，特别是当涉及到使用Node.js制作命令行工具时。它已经成为一种易于使用的技术来开发这样的工具。我们创建的小模块并不是作为一个命令行程序，但我们仍然可以通过运行以下代码全局安装它：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note the `-g` flag at the end. This is how we tell the manager that we want
    this module to be a global one. When the process finishes, we do not have a `node_modules`
    directory. The `my-awesome-nodejs-module` folder is stored in another place on
    our system. To be able to use it, we have to add another property to `package.json`,
    but we'll talk more about this in the next section.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意最后的`-g`标志。这是告诉管理器我们希望这个模块是全局的方式。当进程完成时，我们就没有了`node_modules`目录。`my-awesome-nodejs-module`文件夹存储在系统的另一个位置。为了能够使用它，我们必须在`package.json`中添加另一个属性，但我们将在下一节中更多地讨论这个问题。
- en: 'The resolving of dependencies is one of the key features of the package manager
    of Node.js. Every module can have as many dependencies as you want. These dependences
    are nothing but other Node.js modules that were uploaded to the registry. All
    we have to do is list the needed packages in the `package.json` file:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决依赖关系是Node.js包管理器的关键特性之一。每个模块可以有任意多的依赖关系。这些依赖关系只是已上传到注册表的其他Node.js模块。我们所要做的就是在`package.json`文件中列出所需的包：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now we don't have to specify the module explicitly and we can simply execute
    `npm install` to install our dependencies. The manager reads the `package.json`
    file and saves our module again in the `node_modules` directory. It is good to
    use this technique because we may add several dependencies and install them at
    once. It also makes our module transferable and self-documented. There is no need
    to explain to other programmers what our module is made up of.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们不需要明确指定模块，只需执行`npm install`来安装我们的依赖。管理器会读取`package.json`文件，并再次将我们的模块保存在`node_modules`目录中。使用这种技术是很好的，因为我们可以一次添加多个依赖并一次性安装它们。这也使得我们的模块可传输和自我记录。无需向其他程序员解释我们的模块由什么组成。
- en: Updating our module
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新我们的模块
- en: 'Let''s transform our module into a command-line tool. Once we do this, users
    will have a `my-awesome-nodejs-module` command available in their terminals. There
    are two changes in the `package.json` file that we have to make:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将我们的模块转换成一个命令行工具。一旦我们这样做，用户就可以在他们的终端中使用`my-awesome-nodejs-module`命令。我们需要在`package.json`文件中做两个更改：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: A new `bin` property is added. It points to the entry point of our application.
    We have a really simple example and only one file—`index.js`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个新的`bin`属性。它指向我们应用程序的入口点。我们有一个非常简单的例子，只有一个文件—`index.js`。
- en: 'The other change that we have to make is to update the `version` property.
    In Node.js, the version of the module plays important role. If we look back, we
    will see that while describing dependencies in the `package.json` file, we pointed
    out the exact version. This ensures that in the future, we will get the same module
    with the same APIs. Every number from the `version` property means something.
    The package manager uses **Semantic Versioning 2.0.0** ([http://semver.org/](http://semver.org/)).
    Its format is *MAJOR.MINOR.PATCH*. So, we as developers should increment the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须进行的另一个更改是更新`version`属性。在Node.js中，模块的版本起着重要作用。如果回顾一下，我们会发现在`package.json`文件中描述依赖关系时，我们指出了确切的版本。这确保了在将来，我们将获得具有相同API的相同模块。`version`属性中的每个数字都有意义。包管理器使用**语义化版本2.0.0**（[http://semver.org/](http://semver.org/)）。其格式为*MAJOR.MINOR.PATCH*。因此，作为开发人员，我们应该递增以下内容：
- en: MAJOR number if we make incompatible API changes
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们进行不兼容的API更改，则为MAJOR号
- en: MINOR number if we add new functions/features in a backwards-compatible manner
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们以向后兼容的方式添加新功能/特性，则为MINOR号
- en: PATCH number if we have bug fixes
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们有错误修复，则为PATCH号
- en: Sometimes, we may see a version like `2.12.*`. This means that the developer
    is interested in using the exact MAJOR and MINOR version, but he/she agrees that
    there may be bug fixes in the future. It's also possible to use values like `>=1.2.7`
    to match any equal-or-greater version, for example, `1.2.7`, `1.2.8`, or `2.5.3`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能会看到版本号如`2.12.*`。这意味着开发人员有兴趣使用确切的MAJOR和MINOR版本，但他/她同意将来可能会有错误修复。也可以使用值如`>=1.2.7`来匹配任何等于或大于的版本，例如`1.2.7`，`1.2.8`或`2.5.3`。
- en: 'We updated our `package.json` file. The next step is to send the changes to
    the registry. This could be done again with `npm publish` in the directory that
    holds the JSON file. The result will be similar. We will see the new **0.0.2**
    version number on the screen:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更新了`package.json`文件。下一步是将更改发送到注册表。这可以在包含JSON文件的目录中再次使用`npm publish`来完成。结果将是类似的。我们将在屏幕上看到新的**0.0.2**版本号：
- en: '![Updating our module](img/image00162.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![更新我们的模块](img/image00162.jpeg)'
- en: 'Just after this, we may run `npm install my-awesome-nodejs-module -g` and the
    new version of the module will be installed on our machine. The difference is
    that now we have the `my-awesome-nodejs-module` command available and if you run
    it, it displays the message written in the `index.js` file:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们可以运行`npm install my-awesome-nodejs-module -g`，新版本的模块将安装在我们的机器上。不同之处在于现在我们有`my-awesome-nodejs-module`命令可用，如果运行它，它会显示在`index.js`文件中编写的消息：
- en: '![Updating our module](img/image00163.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![更新我们的模块](img/image00163.jpeg)'
- en: Introducing built-in modules
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍内置模块
- en: Node.js is considered a technology that you can use to write backend applications.
    As such, we need to perform various tasks. Thankfully, we have a bunch of helpful
    built-in modules at our disposal.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js被认为是一种可以用来编写后端应用程序的技术。因此，我们需要执行各种任务。幸运的是，我们可以使用一堆有用的内置模块。
- en: Creating a server with the HTTP module
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用HTTP模块创建服务器
- en: 'We already used the HTTP module. It''s perhaps the most important one for web
    development because it starts a server that listens on a particular port:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了HTTP模块。这可能是Web开发中最重要的模块，因为它启动一个在特定端口上监听的服务器：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We have a `createServer` method that returns a new web server object. In most
    cases, we run the `listen` method. If needed, there is `close`, which stops the
    server from accepting new connections. The callback function that we pass always
    accepts the `request` (`req`) and `response` (`res`) objects. We can use the first
    one to retrieve information about incoming request, such as, `GET` or `POST` parameters.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个`createServer`方法，返回一个新的web服务器对象。在大多数情况下，我们运行`listen`方法。如果需要，有`close`，它可以停止服务器接受新连接。我们传递的回调函数总是接受`request`（`req`）和`response`（`res`）对象。我们可以使用第一个来检索有关传入请求的信息，例如`GET`或`POST`参数。
- en: Reading and writing to files
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取和写入文件
- en: 'The module that is responsible for the read and write processes is called `fs`
    (it is derived from **filesystem**). Here is a simple example that illustrates
    how to write data to a file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 负责读写过程的模块称为`fs`（它源自**文件系统**）。以下是一个简单的例子，说明如何将数据写入文件：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Most of the API functions have synchronous versions. The preceding script could
    be written with `writeFileSync`, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数API函数都有同步版本。前面的脚本可以用`writeFileSync`编写，如下所示：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: However, the usage of the synchronous versions of the functions in this module
    blocks the event loop. This means that while operating with the filesystem, our
    JavaScript code is paused. Therefore, it is a best practice with Node to use asynchronous
    versions of methods wherever possible.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在此模块中使用函数的同步版本会阻塞事件循环。这意味着在操作文件系统时，我们的JavaScript代码会被暂停。因此，在Node中，尽可能使用方法的异步版本是最佳实践。
- en: 'The reading of the file is almost the same. We should use the `readFile` method
    in the following way:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的读取几乎是相同的。我们应该以以下方式使用`readFile`方法：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Working with events
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用事件
- en: 'The observer design pattern is widely used in the world of JavaScript. This
    is where the objects in our system subscribe to the changes happening in other
    objects. Node.js has a built-in module to manage events. Here is a simple example:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 观察者设计模式在JavaScript世界中被广泛使用。这是我们系统中的对象订阅其他对象发生的变化。Node.js有一个内置模块来管理事件。这里是一个简单的例子：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `eventEmitter` object is the object that we subscribed to. We did this with
    the help of the `on` method. The `emit` function fires the event and the `somethingHappen`
    handler is executed.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`eventEmitter`对象是我们订阅的对象。我们使用`on`方法来实现这一点。`emit`函数触发事件，执行`somethingHappen`处理程序。'
- en: 'The `events` module provides the necessary functionality, but we need to use
    it in our own classes. Let''s get the book idea from the previous section and
    make it work with events. Once someone rates the book, we will dispatch an event
    in the following manner:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`events`模块提供了必要的功能，但我们需要在自己的类中使用它。让我们从上一节的书籍想法中获取并使其与事件一起工作。一旦有人对书进行评分，我们将以以下方式分派事件：'
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We want to inherit the behavior of the `EventEmitter` object. The easiest way
    to achieve this in Node.js is by using the utility module (`util`) and its `inherits`
    method. The defined class could be used like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要继承`EventEmitter`对象的行为。在Node.js中实现这一点的最简单方法是使用实用程序模块（`util`）及其`inherits`方法。定义的类可以像这样使用：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We again used the `on` method to subscribe to the `rated` event. The `book`
    class displays that message once we set the points. The terminal then shows the
    **Rated with 10** text.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用`on`方法订阅`rated`事件。`book`类在我们设置了分数后显示了这条消息。然后终端显示了**Rated with 10**文本。
- en: Managing child processes
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理子进程
- en: 'There are some things that we can''t do with Node.js. We need to use external
    programs for the same. The good news is that we can execute shell commands from
    within a Node.js script. For example, let''s say that we want to list the files
    in the current directory. The file system APIs do provide methods for that, but
    it would be nice if we could get the output of the `ls` command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js有一些我们无法做到的事情。我们需要使用外部程序来完成相同的任务。好消息是，我们可以在Node.js脚本中执行shell命令。例如，假设我们想要列出当前目录中的文件。文件系统API确实提供了相应的方法，但如果我们能够获得`ls`命令的输出就更好了：
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The module that we used is called `child_process`. Its `exec` method accepts
    the desired command as a string and a callback. The `stdout` item is the output
    of the command. If we want to process the errors (if any), we may use the `error`
    object or the `stderr` buffer data. The preceding code produces the following
    screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的模块叫做`child_process`。它的`exec`方法接受所需的命令作为字符串和一个回调。`stdout`项是命令的输出。如果我们想处理错误（如果有的话），我们可以使用`error`对象或`stderr`缓冲区数据。前面的代码产生了以下截图：
- en: '![Managing child processes](img/image00164.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![管理子进程](img/image00164.jpeg)'
- en: 'Along with the `exec` method, we have `spawn`. It''s a bit different and really
    interesting. Imagine that we have a command that not only does its job, but also
    outputs the result. For example, `git push` may take a few seconds and it may
    send messages to the console continuously. In such cases, `spawn` is a good variant
    because we get an access to a stream:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`exec`方法，我们还有`spawn`。它有点不同，但非常有趣。想象一下，我们有一个命令不仅完成了它的工作，还输出了结果。例如，`git push`可能需要几秒钟，可能会不断向控制台发送消息。在这种情况下，`spawn`是一个很好的选择，因为我们可以访问一个流：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here, `stdout` and `stderr` are streams. They dispatch events and if we subscribe
    to these events, we will get the exact output of the command as it was produced.
    In the preceding example, we run `git push origin master` and sent the full command
    responses to the console.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`stdout`和`stderr`都是流。它们会分发事件，如果我们订阅了这些事件，我们将得到命令的确切输出。在前面的例子中，我们运行了`git push
    origin master`并将完整的命令响应发送到控制台。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Node.js is used by many companies nowadays. This proves that it is mature enough
    to work in a production environment. In this chapter, we saw what the fundamentals
    of this technology are. We covered some of the commonly used cases. In the next
    chapter, we will start with the basic architecture of our example application.
    It is not a trivial one. We are going to build our own social network.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在很多公司都在使用Node.js。这证明它已经足够成熟，可以在生产环境中使用。在本章中，我们了解了这项技术的基本原理。我们涵盖了一些常用的情况。在下一章中，我们将从我们示例应用程序的基本架构开始。这不是一个简单的应用程序。我们将构建我们自己的社交网络。
