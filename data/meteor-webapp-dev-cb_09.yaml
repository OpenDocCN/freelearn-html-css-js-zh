- en: Chapter 9. Securing Your Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。保护你的应用程序
- en: 'In this chapter, you will learn the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下主题：
- en: Basic safety – turning off `autopublish`
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本安全 - 关闭 `autopublish`
- en: Basic safety – removing `insecure`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本安全 - 移除 `insecure`
- en: Securing data transactions with `allow` and `deny`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `allow` 和 `deny` 保护数据交易
- en: Hiding data with façades
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用外观隐藏数据
- en: Protecting the client with `browser-policy`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `browser-policy` 保护客户端
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Meteor makes development and prototyping as fast and easy as possible. To accomplish
    this, there are some default packages installed that have no business in a production
    application. As you prepare your app for production, you will want to remove the
    packages that make prototyping easier, and replace them with some security best
    practices, to make your application more secure. In this chapter, we will go through
    the baseline security mechanisms needed to prepare an application for production.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor 使开发和原型设计尽可能快速和简单。为了实现这一点，有一些默认包被安装，但在生产应用程序中并不需要。当你准备你的应用程序用于生产时，你将想要移除那些使原型设计更容易的包，并用一些安全最佳实践来替换它们，以使你的应用程序更加安全。在本章中，我们将讨论为生产准备应用程序所需的基线安全机制。
- en: Basic safety – turning off autopublish
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本安全 - 关闭 autopublish
- en: Quickly and easily accessing your data saves you an enormous amount of time
    when you're prototyping! The `autopublish` package, which is installed by default
    in every newly-created Meteor app, enables you to quickly manage and access your
    data collections, so that you can churn out great code. When the time comes, however,
    broadcasting every field in every data collection is inefficient and unsecure.
    This recipe will show you the basics of removing the `autopublish` package, and
    implementing your own `publish`/`subscribe` code to keep your app working as intended.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 快速轻松地访问你的数据在原型设计时可以节省你大量的时间！默认情况下安装在每个新创建的 Meteor 应用程序中的 `autopublish` 包，使你能够快速管理和访问你的数据集合，以便你能够快速编写出优秀的代码。然而，当需要的时候，向每个数据集合中的每个字段广播是不高效且不安全的。这个配方将向你展示移除
    `autopublish` 包的基本方法，并实现你自己的 `publish`/`subscribe` 代码以保持应用程序按预期工作。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will create a very basic application, displaying simple text cards on the
    screen, and then show the effects of `autopublish` and `subscribe`/`publish` on
    those cards. To do this, we need to create our folder structure, add some basic
    templates, and add a bit of styling.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个非常基础的应用程序，在屏幕上显示简单的文本卡片，然后展示 `autopublish` 和 `subscribe`/`publish` 对这些卡片的影响。为此，我们需要创建我们的文件夹结构，添加一些基本模板，并添加一些样式。
- en: Project setup
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目设置
- en: 'In a terminal window, create your root project by entering the following commands:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端窗口中，通过输入以下命令创建你的根项目：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating a basic template
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建基本模板
- en: 'In a text editor, create a file named `collections.js` in your `[project root]/both/`
    folder, and add the following line:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中，在你的 `[项目根目录]/both/` 文件夹中创建一个名为 `collections.js` 的文件，并添加以下行：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, create a file named `[project root]/client/main.html` and add the following
    `<template>` and `<body>` declarations:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为 `[项目根目录]/client/main.html` 的文件，并添加以下 `<template>` 和 `<body>` 声明：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We need to add just a little bit of logic for display and creation, and we''re
    ready to move on to styles. Create a new file named `[project root]/client/templatehelpers.js`,
    and add the following `Template.helpers` and `Template.events` functions:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要添加一点逻辑来显示和创建，然后我们就可以继续到样式部分。创建一个名为 `[项目根目录]/client/templatehelpers.js`
    的新文件，并添加以下 `Template.helpers` 和 `Template.events` 函数：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Adding CSS styling
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加CSS样式
- en: 'We need just a touch of CSS to make things more visually appealing. Create
    a file named `[project root]/client/styles.css` and add the following CSS:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要一点 CSS 来使事物更具视觉吸引力。创建一个名为 `[项目根目录]/client/styles.css` 的文件，并添加以下 CSS：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Your app should now be up and running. Navigate to `http://localhost:3000`
    in a browser, and double click on the **open:** label to create some new cards.
    Click on the **text** tag in a card to modify the sharing property (the card will
    turn green) and double click on the **id** tag to delete a card. Your screen,
    after playing with it a bit, will look simlar to the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序现在应该已经启动并运行。在浏览器中导航到 `http://localhost:3000`，然后双击 **open:** 标签来创建一些新的卡片。点击卡片中的
    **text** 标签来修改共享属性（卡片将变为绿色），并双击 **id** 标签来删除卡片。经过一番操作后，你的屏幕将类似于以下截图：
- en: '![Adding CSS styling](img/image00400.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![添加CSS样式](img/image00400.jpeg)'
- en: If everything is copacetic, we're ready to remove the `autopublish` package.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，我们就准备好移除 `autopublish` 包。
- en: How to do it...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Proceed with the following steps to turn off `autopublish`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤关闭 `autopublish`：
- en: 'In a new terminal window (keep Meteor running!), navigate to your `[project
    root]` and enter the following command:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新的终端窗口（保持 Meteor 运行！）中，导航到你的 `[project root]` 并输入以下命令：
- en: '[PRE5]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The screen on your web page will now show no results, and if you do a count
    on the `Cards_open` collection, even if you have many records created, the count
    will come back as **0**:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的网页屏幕现在将显示无结果，如果你对 `Cards_open` 集合进行计数，即使你创建了多个记录，计数也会返回 **0**：
- en: '![How to do it...](img/image00401.jpeg)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00401.jpeg)'
- en: 'We will now add `publish` and `subscribe`. The `Cards_open` collection still
    exists. Because we removed the `autopublish` package, however, the communication
    between the client and the server has been severed. To restore it, we need to
    add a `publish` method on the server, and a `subscribe` method on the client.
    Create a file named `[project root]/server/collections-server.js` and add the
    following `publish` function call:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将添加 `publish` 和 `subscribe`。`Cards_open` 集合仍然存在。然而，由于我们移除了 `autopublish`
    包，客户端和服务器之间的通信已经被切断。为了恢复它，我们需要在服务器上添加一个 `publish` 方法，并在客户端添加一个 `subscribe` 方法。创建一个名为
    `[project root]/server/collections-server.js` 的文件，并添加以下 `publish` 函数调用：
- en: '[PRE6]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, create a file named `[project root]/client/collections-client.js` and
    add the following `subscribe()` function call:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个名为 `[project root]/client/collections-client.js` 的文件，并添加以下 `subscribe()`
    函数调用：
- en: '[PRE7]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: All done! You have successfully removed the `autopublish` package, and re-created
    the `publish`/`subscribe` calls necessary to allow the client to still see the
    `Cards_open` collection. Your browser should now display results properly when
    you create, modify, and delete using the clicks and double clicks mentioned previously.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了！你已经成功移除了 `autopublish` 包，并重新创建了允许客户端仍然看到 `Cards_open` 集合所需的 `publish`/`subscribe`
    调用。现在，当你使用之前提到的点击和双击创建、修改和删除时，你的浏览器应该能够正确显示结果。
- en: How it works...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In a nutshell, `autopublish` checks to see what collections exist, and automatically
    writes your `publish` and `subscribe` function calls for you. It does this for
    every collection it can find, and is therefore neither performant nor secure.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，`autopublish` 会检查存在哪些集合，并自动为你编写 `publish` 和 `subscribe` 函数调用。它为它找到的每个集合都这样做，因此既不高效也不安全。
- en: By removing `autopublish`, we stopped the `publish` and `subscribe` functions
    from automatically being called. Because of this, we had to re-create those calls,
    creating a simple `publish()` call (on channel `'open'`) on the server, and a
    `subscribe()` call (on the same `'open'` channel) on the client.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通过移除 `autopublish`，我们停止了 `publish` 和 `subscribe` 函数自动调用。因此，我们必须重新创建这些调用，在服务器上创建一个简单的
    `publish()` 调用（在 `'open'` 通道上），在客户端上创建一个 `subscribe()` 调用（在相同的 `'open'` 通道上）。
- en: Our `find()` statement in the `publish` function retrieves everything, which
    is inherently not secure or performant, but we will be fixing that in other recipes.
    The focus of this recipe was on how to remove the `autopublish` package, without
    affecting the functionality of our application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `publish` 函数中的 `find()` 语句检索所有内容，这本身既不安全也不高效，但我们将在其他菜谱中修复这个问题。本菜谱的重点是如何移除
    `autopublish` 包，而不影响我们应用程序的功能。
- en: See also
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Removing Meteor packages* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 2 章](part0028.xhtml#aid-QMFO1 "第 2 章。使用包进行自定义") 的 *使用包进行自定义* 部分的 *移除 Meteor
    包* 菜谱中
- en: Basic safety – removing insecure
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本安全 - 移除不安全
- en: Right after removing `autopublish`, we will want to control how data is added,
    removed, and updated, and put in some security measures, as appropriate. To enable
    this level of control, we need to remove the appropriately-named `insecure` package.
    To restore functionality after removing the `insecure` package, we will need to
    utilize a basic `collection.allow` declaration. This recipe shows you how to do
    exactly that.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在移除 `autopublish` 后，我们将想要控制数据的添加、删除和更新方式，并采取适当的措施来确保安全。为了启用这种级别的控制，我们需要移除名为
    `insecure` 的包。在移除 `insecure` 包后恢复功能，我们需要使用基本的 `collection.allow` 声明。这个菜谱将向你展示如何做到这一点。
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will use the *Basic safety – turning off autopublish* recipe found in this
    chapter as our baseline. Once you have completed that recipe, make a copy of the
    `secure-autopublish` folder (note: you will need all subfolders, including the
    hidden `.meteor` folder), rename it to `secure-rm-insecure`, start your app using
    the `meteor` command in the terminal, and you will be ready to proceed.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本章中找到的*基本安全 - 关闭自动发布*配方作为我们的基准。一旦你完成了这个配方，复制`secure-autopublish`文件夹（注意：你需要所有子文件夹，包括隐藏的`.meteor`文件夹），将其重命名为`secure-rm-insecure`，在终端中使用`meteor`命令启动你的应用程序，你就可以继续进行了。
- en: How to do it...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Just like the previous recipe for `autopublish`, we simply need to remove the
    `insecure` package, and then restore functionality.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前的`autopublish`配方一样，我们只需要移除`insecure`包，然后恢复功能。
- en: 'In a new terminal window (keep Meteor running!), navigate to the root of your
    project and enter the following command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新的终端窗口（保持Meteor运行！），导航到你的项目根目录，并输入以下命令：
- en: '[PRE8]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Your application now disallows any client changes to the `Cards_open` collection.
    Try to add a new card, share a card, or delete a card, and you will be unable
    to do so. Whether through the UI using clicks and double clicks, or even programmatically
    through the web console, you will be unable to make any changes, as shown in the
    following screenshot:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的应用程序现在禁止对`Cards_open`集合进行任何客户端更改。尝试添加一张新卡片、分享一张卡片或删除一张卡片，你将无法做到。无论是通过UI使用点击和双击，还是通过通过Web控制台编程方式，你将无法进行任何更改，如下面的截图所示：
- en: '![How to do it...](img/image00402.jpeg)'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/image00402.jpeg)'
- en: 'Okay, now we need to get our super powers back! Open the `[project root]/server/collections-server.js`
    file, and add the following code to the bottom of the file:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，现在我们需要恢复我们的超级能力！打开`[项目根目录]/server/collections-server.js`文件，并将以下代码添加到文件底部：
- en: '[PRE9]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After saving these changes, our `insert`, `update`, and `remove` capabilities
    have been restored. You can now add, modify, and delete as many cards as you would
    like, either through the UI or programmatically through the web console.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存这些更改后，我们的`insert`、`update`和`remove`功能已恢复。你现在可以添加、修改和删除你想要的任何数量的卡片，无论是通过UI还是通过通过Web控制台编程方式。
- en: How it works...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `insecure` package does almost exactly the same thing for data collection
    security that `autopublish` does for publish security – it finds every collection
    it can and automatically creates a `collection.allow` function for all functions
    (`insert`, `update`, and `remove`). By removing the `insecure` package, we prevented
    our `Cards_open` collection from allowing any client-side changes.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`insecure`包几乎与`autopublish`对发布安全所做的一样，对数据集合安全进行操作 - 它找到它能够找到的所有集合，并为所有函数（`insert`、`update`和`remove`）自动创建一个`collection.allow`函数。通过移除`insecure`包，我们阻止了`Cards_open`集合允许任何客户端更改。'
- en: To remedy this, and to prepare for more granular security (see later recipes
    in this chapter for details), we called `Cards_open.allow()` and enabled all collection
    modifications by returning `true` for every checking function.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，并为更细粒度的安全做准备（本章后面的配方中提供详细信息），我们调用了`Cards_open.allow()`，并通过对每个检查函数返回`true`来启用所有集合修改。
- en: So, although the net security of our application hasn't changed, we are now
    prepared to modify our publishing and security settings to make our application
    production-ready.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，尽管我们应用程序的网络安全性没有改变，我们现在准备修改我们的发布和安全设置，使我们的应用程序准备好生产使用。
- en: See also
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Removing Meteor packages* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](part0028.xhtml#aid-QMFO1 "第2章。使用包进行自定义")的*使用包进行自定义*中，*移除Meteor包*配方
- en: Securing data transactions with allow and deny
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用allow和deny保护数据交易
- en: Properly configured, Meteor collections are quite secure. The granular control
    we have over what is allowed and what is not allowed enables us to secure our
    applications appropriately. In this recipe, you will learn how to use `allow`
    and `deny` to secure your collections and control access.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正确配置的Meteor集合非常安全。我们对允许和不允许的内容的细粒度控制使我们能够适当地保护我们的应用程序。在本配方中，你将学习如何使用`allow`和`deny`来保护你的集合和控制访问。
- en: Getting ready
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the *Basic safety – removing insecure* recipe found in this chapter, we
    already have an application with both the `autopublish` and `insecure` packages
    removed. Once we add and configure the appropriate user `accounts` packages, we
    will be ready to proceed.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本章中找到的*基本安全 - 移除不安全*配方，我们已经移除了`autopublish`和`insecure`包的应用程序。一旦我们添加并配置适当的用户`accounts`包，我们就可以继续进行了。
- en: 'Using a copy of the *Basic safety – removing insecure* recipe as a baseline,
    open a terminal window, navigate to your project root, and execute the following
    commands:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以*基本安全 - 移除不安全*配方的一个副本作为基准，打开一个终端窗口，导航到你的项目根目录，并执行以下命令：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If your app isn't already running, make sure to start it using the `meteor`
    command.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序还没有运行，请确保使用`meteor`命令启动它。
- en: We now need to add the `loginButtons` template, and modify our `insert` statement,
    to add an `owner` property to each record.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要添加`loginButtons`模板，并修改我们的`insert`语句，为每条记录添加`owner`属性。
- en: 'Open your `[project root]/client/main.html` file and add the `loginButtons`
    template inclusion just below the `<body>` tag, as shown in the following example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的`[项目根]/client/main.html`文件，并在`<body>`标签下方添加`loginButtons`模板包含，如下面的示例所示：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, open your `[project root]/client/templatehelpers.js` file and modify
    the `Template.open.events` insert logic to add `owner`, and only fire if there
    is a logged-in user. Your code changes should look as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开你的`[项目根]/client/templatehelpers.js`文件，并修改`Template.open.events`插入逻辑以添加`owner`，并且只有当有登录用户时才触发。你的代码更改应如下所示：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Finally, in your browser, create a new user, and make sure you are logged in
    as that user (the name of the user doesn't matter – we suggest using a fake one
    such as `user1@test.com`).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在你的浏览器中，创建一个新用户，并确保你以该用户身份登录（用户名不重要 - 我们建议使用一个假的用户名，例如`user1@test.com`）。
- en: 'Now, whenever you create new cards, the **owner** section will be filled in
    with the logged-in user''s unique ID, as shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次你创建新卡片时，**所有者**部分将自动填充为登录用户的唯一ID，如下面的截图所示：
- en: '![Getting ready](img/image00403.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00403.jpeg)'
- en: How to do it...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The current state of the application is not secure. Anybody can `insert`, `remove`
    and `update` any of the cards, even if they belong to another user! We are going
    to fix this situation by using the `collection.allow()` and `collection.deny()`
    declarations.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当前应用程序的状态不安全。任何人都可以`插入`、`删除`和`更新`任何卡片，即使它们属于另一个用户！我们将通过使用`collection.allow()`和`collection.deny()`声明来解决这个问题。
- en: 'First, we will require a logged-in user for `insert`. Open your `[project root]/server/collections-server.js`
    file, locate the `Cards_open.allow()` function call, and make the following modification
    to the `insert` function declaration:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将需要登录用户进行`insert`。打开你的`[项目根]/server/collections-server.js`文件，找到`Cards_open.allow()`函数调用，并对`insert`函数声明进行以下修改：
- en: '[PRE13]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You will now no longer be able to create new cards while being logged out (you
    can test this if you would like).
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你现在将无法在注销状态下创建新卡片（如果你愿意，可以测试一下）。
- en: 'Next, we will allow only the owner of a record to `update` or `remove` cards.
    In the same `collections-server.js` file, modify the `update` and `remove` function
    declarations as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们只允许记录的所有者`更新`或`删除`卡片。在相同的`collections-server.js`文件中，修改`update`和`remove`函数声明如下：
- en: '[PRE14]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Save your changes, and test your new rules by logging in as a new user (create
    one if needed), trying to change results, trying to add new cards without being
    logged in, and so on. With these rules in place, only a logged-in user will be
    able to create new cards, and only the owner of a card can modify the card or
    delete it.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的更改，并通过以新用户身份登录（如果需要，请创建一个），尝试更改结果，尝试在不登录的情况下添加新卡片等来测试你的新规则。有了这些规则，只有登录用户才能创建新卡片，只有卡片的所有者才能修改卡片或删除它。
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'All client-side attempts to alter collections in any way flow through two callbacks:
    `allow` and `deny`. In order for a collection change to be accepted by the server,
    the incoming change must receive one `true` response from one of the `allow` functions
    (for example, we return `true` on the `insert` function if the `userId!=null`),
    and must receive zero `true` responses from any of the `deny` functions.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所有客户端尝试以任何方式更改集合的操作都通过两个回调函数：`allow`和`deny`。为了使集合更改被服务器接受，传入的更改必须从`allow`函数之一收到一个`true`响应（例如，如果`userId!=null`，我们在`insert`函数中返回`true`），并且必须从任何`deny`函数中收到零个`true`响应。
- en: In this particular case, we are doing a simple check on `insert`, under the
    `allow` callback, to make sure the user is logged in, which translates to `userId!=null`.
    For `update` and `remove`, the check is to see if the logged-in user is the owner/creator
    of the card, through `return` (`doc.owner==userId`).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的情况下，我们在`allow`回调中对`insert`进行简单的检查，以确保用户已登录，这相当于`userId!=null`。对于`update`和`remove`，检查是查看登录用户是否是卡片的拥有者/创建者，通过`return`（`doc.owner==userId`）。
- en: There is no limit to the number of `allow` or `deny` callbacks you can declare,
    although it's usually best to consolidate them when possible, using a "pessimistic"
    security model (only allow what is needed, rather than allowing everything and
    only denying what is needed).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以声明任意数量的`allow`或`deny`回调，尽管通常最好在可能的情况下将它们合并，使用“悲观”的安全模型（只允许需要的，而不是允许所有，只拒绝需要的）。
- en: There's more…
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The preceding `allow` rules work just fine, if only the UI is being used. However,
    it's possible for someone to open the console window and make direct collection
    manipulation calls, which could cause some problems.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的`allow`规则在仅使用UI的情况下工作得很好。然而，有人可能会打开控制台窗口并直接进行数据操作调用，这可能会引起一些问题。
- en: First, our check for `insert` is only `userId!=null`. Any additional fields,
    or even a malicious `insert`, can be added via the command line, for example,
    let's say that I am in possession of the `userId` for another user (not hard to
    get, it's found in the `owner` field of each card). I could easily `insert` a
    card with something nasty in the text, or `update` the text and owner of an existing
    cart, so as to make it appear that another user was the one that created the note.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们对`insert`的检查只是`userId!=null`。任何额外的字段，甚至是恶意的`insert`，都可以通过命令行添加，例如，假设我拥有另一个用户的`userId`（这并不难得到，它在每张卡的`owner`字段中都可以找到）。我可以轻松地插入带有恶意的文本卡片，或者更新现有卡片的文本和所有者，使其看起来是另一个用户创建了笔记。
- en: 'For example, If I am logged in as `user2@test.com`, and I know that the `userId`
    value for `user1@test.com` is `''8v2GGh98RrYfso92c''`, I can run the following
    command in the browser console, and potentially get `user1` in trouble:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我以`user2@test.com`登录，并且我知道`user1@test.com`的`userId`值是`'8v2GGh98RrYfso92c'`，我可以在浏览器控制台中运行以下命令，并可能让`user1`陷入麻烦：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can handle this in several ways. We can either make our `allow` callback
    functions more complex, with multiple `if…else` statements, or we can use the
    `deny` callback to prohibit certain behavior. In `[project root]/server/collections-server.js`,
    create a new `deny` callback with the following code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过几种方式来处理这个问题。我们要么使我们的`allow`回调函数更复杂，使用多个`if…else`语句，要么使用`deny`回调来禁止某些行为。在`[项目根目录]/server/collections-server.js`中，创建一个新的`deny`回调，代码如下：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: For `insert`, if `doc.owner!=userId`, the `deny` callback will return `true`.
    For `update`, if an attempt is made to modify any field except shared, the `deny`
    callback will return `true` as well. Using these two callback functions, we have
    further tightened security, and taken away any console line shenanigans.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`insert`，如果`doc.owner!=userId`，`deny`回调将返回`true`。对于`update`，如果尝试修改除共享字段外的任何字段，`deny`回调也将返回`true`。使用这两个回调函数，我们进一步增强了安全性，并消除了任何控制台操作的不当行为。
- en: See also
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For a breakdown of what's possible with `allow` and `deny`, consult the official
    Meteor documentation available at [http://docs.meteor.com/#/full/allow](http://docs.meteor.com/#/full/allow).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解`allow`和`deny`可以做什么，请参阅官方的Meteor文档，可在[http://docs.meteor.com/#/full/allow](http://docs.meteor.com/#/full/allow)找到。
- en: Hiding data with façades
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用外观隐藏数据
- en: Some of our security (and performance) problems can be resolved through limiting
    access to certain fields and records in our data collections, for example, if
    the `owner` field of a record isn't sent to the client, a potential hacker will
    never be able to get the `userId` value of another user. Likewise, if only records
    belonging to a certain `userId`, or ones marked for sharing, are passed to the
    client, private records can stay private and visible only to the user that created
    them. This recipe will show you how to create a façade to limit fields and records
    being sent to the client.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的一些安全（和性能）问题可以通过限制对数据集中某些字段和记录的访问来解决，例如，如果记录的`owner`字段没有发送到客户端，潜在的攻击者将永远无法获取另一个用户的`userId`值。同样，如果只将属于特定`userId`的记录或标记为共享的记录传递给客户端，私人记录可以保持私密，并且只对创建它们的用户可见。这个方法将向您展示如何创建外观来限制发送到客户端的字段和记录。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Please complete the *Securing data transactions with allow and deny* recipe
    found in this chapter, including the additional `deny` callback functions found
    in the *There's more…* section. Once completed, and your Meteor app is running,
    you are ready to use this recipe.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 请完成本章中找到的 *使用 allow 和 deny 保护数据事务* 菜谱，包括在 *更多内容…* 部分中找到的附加 `deny` 回调函数。完成这些后，并且您的
    Meteor 应用程序正在运行，您就可以使用这个菜谱了。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We are going to modify the `publish` function on the server so that it only
    returns records that are owned by or shared with the logged-in user, and we will
    stop broadcasting the `owner` field.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改服务器上的 `publish` 函数，使其只返回属于或与登录用户共享的记录，并且我们将停止广播 `owner` 字段。
- en: 'Open the `[project root]/server/collections-server.js` file, locate the `Cards_open.publish`
    section, and make the following changes to the `Cards_open.find()` method:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `[项目根目录]/server/collections-server.js` 文件，定位到 `Cards_open.publish` 部分，并对
    `Cards_open.find()` 方法进行以下修改：
- en: '[PRE17]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now that the `owner` field is no longer visible on the client, we can remove
    the following two lines from our open template in the `[project root]/client/main.html`
    file:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，由于 `owner` 字段不再在客户端可见，我们可以从 `[项目根目录]/client/main.html` 文件中的公开模板中删除以下两行：
- en: '[PRE18]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: With those changes saved, any given logged-in user will only be able to see
    cards that have been created by that same user, or cards that have been shared.
    If you log in to two different browsers, with two different users, you will be
    able to see how sharing makes records visible to the other user, and vice versa.
    The following screenshot shows an example of two users sharing some records, and
    not sharing others:![How to do it...](img/image00404.jpeg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存这些更改后，任何登录用户只能看到由该用户创建的卡片，或者共享的卡片。如果你在两个不同的浏览器中登录，使用两个不同的用户，你将能够看到共享如何使记录对另一个用户可见，反之亦然。以下截图显示了两个用户共享一些记录而未共享其他记录的示例：![如何操作...](img/image00404.jpeg)
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By modifying the selector and the `fields` option, we were able to limit the
    recordset being published to the client. The client, try as it might, will never
    be able to see any of the records excluded by the selector, nor any of the excluded
    `fields`, because the server simply isn't sending them when it is publishing.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通过修改选择器和 `fields` 选项，我们能够限制发布给客户端的记录集。客户端尽管尝试，但永远无法看到选择器排除的任何记录，也无法看到任何排除的 `fields`，因为服务器在发布时根本不会发送它们。
- en: 'Specifically, we used a `{$or: […]}` selector to limit which records are published,
    by including only records created by the current user (`owner:this.userId`), or
    records that have been shared (`shared:true`). We used the `{fields:{owner:0}}`
    option, to return all `fields` except `owner`. This *blacklist* approach is less
    secure than a *whitelist* approach, but to keep this recipe simpler, we decided
    to tell the query what fields to exclude (optimistic) rather than what fields
    to include (pessimistic).'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '具体来说，我们使用了一个 `{$or: [...]}` 选择器来限制哪些记录被发布，只包括由当前用户创建的记录（`owner:this.userId`），或者已共享的记录（`shared:true`）。我们使用了
    `{fields:{owner:0}}` 选项，以返回所有 `fields` 除了 `owner`。这种 *黑名单* 方法比 *白名单* 方法安全性较低，但为了使这个菜谱更简单，我们决定告诉查询要排除哪些字段（乐观）而不是包含哪些字段（悲观）。'
- en: 'To whitelist, rather than blacklist, enumerate the fields you would like displayed,
    and pass a value of `1` with them (for example: `{text:1 , _id:1 , shared:1}`).
    All fields not specified will automatically not return with the query.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要白名单而不是黑名单，列出您希望显示的字段，并传递一个值为 `1` 的值（例如：`{text:1 , _id:1 , shared:1}`）。所有未指定的字段将自动不随查询返回。
- en: See also
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Filtering with MongoDB queries* recipe in [Chapter 4](part0046.xhtml#aid-1BRPS1
    "Chapter 4. Creating Models"), *Creating Models*
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 4 章 *创建模型* 的 *使用 MongoDB 查询进行过滤* 菜谱中，*创建模型*
- en: Protecting the client with browser-policy
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用浏览器策略保护客户端
- en: Securing your database is pretty straightforward in Meteor, but what about client-side
    security? Meteor has you covered there as well, using standard `Content-Security-Policy`
    and `X-Frame-Options` safeguards. This recipe will walk you through adding the
    `browser-policy` package, and configuring basic client-side security.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Meteor 中保护数据库相当直接，但客户端安全怎么办？Meteor 同样为您提供了保障，使用标准的 `Content-Security-Policy`
    和 `X-Frame-Options` 安全措施。本菜谱将指导您添加 `browser-policy` 包，并配置基本的客户端安全。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will create a brand new project as usual, but we will be keeping the default
    files, creating some *unsafe* scripting functionality along the way.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将像往常一样创建一个新的项目，但我们将保留默认文件，在创建过程中添加一些不安全的脚本功能。
- en: Scaffolding setup
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 框架设置
- en: 'In a terminal window, navigate to where your project root will be, and execute
    the following commands:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端窗口中，导航到你的项目根目录，并执行以下命令：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Add CDN-hosted bootstrap
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 CDN 托管的 Bootstrap
- en: 'Visit the official Bootstrap `Getting Started` page, located at [http://getbootstrap.com/getting-started/](http://getbootstrap.com/getting-started/)
    and scroll to the section marked as **Bootstrap CDN**. Copy the contents from
    that section, and insert them into the `<head>` block of your `[project root]/client/secure-client.html`
    file. When finished, your changes should look similar to the following code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 访问官方 Bootstrap 的 `入门` 页面，位于 [http://getbootstrap.com/getting-started/](http://getbootstrap.com/getting-started/)，并滚动到标记为
    **Bootstrap CDN** 的部分。复制该部分的内容，并将其插入到 `[project root]/client/secure-client.html`
    文件的 `<head>` 块中。完成后，你的更改应类似于以下代码：
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Add inline and eval() scripts
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加内联和 eval() 脚本
- en: 'While we have `secure-client.html` open, let''s modify the template, adding
    some indicators, an inline script in an `href` attribute, and a new section for
    displaying `eval()` results. Modify your `hello` template so that it looks like
    the following code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们打开 `secure-client.html` 时，让我们修改模板，添加一些指示器，一个 `href` 属性中的内联脚本，以及一个用于显示 `eval()`
    结果的新部分。修改你的 `hello` 模板，使其看起来如下代码：
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We have a bit of logic to add, so that the template will be displayed properly.
    First, we will create a simple collection called `Test`. Create a file named `[project
    root]/both/model.js` and add the following line:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一些逻辑，以确保模板能够正确显示。首先，我们将创建一个名为 `Test` 的简单集合。创建一个名为 `[project root]/both/model.js`
    的文件，并添加以下行：
- en: '[PRE22]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, configure the server method `dropTable` to simulate someone erasing the
    database. Create a file named `[project root]/server/methods.js` and add the following
    code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，配置服务器方法 `dropTable` 以模拟有人删除数据库。创建一个名为 `[project root]/server/methods.js`
    的文件，并添加以下代码：
- en: '[PRE23]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, we need to modify the `hello` template helpers and events to be "vulnerable"
    to our clever hacks! Open `[project root]/client/secure-client.js`, modify the
    `Template.hello.helpers` section to the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要修改 `hello` 模板助手和事件，使其对我们的巧妙黑客攻击“易受攻击”！打开 `[project root]/client/secure-client.js`，将
    `Template.hello.helpers` 部分修改为以下内容：
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, modify `Template.hello.events` to add a record to the `Test` collection,
    rather than updating the `counter` variable. Your code should look similar to
    the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，修改 `Template.hello.events` 以向 `Test` 集合添加记录，而不是更新 `counter` 变量。你的代码应类似于以下内容：
- en: '[PRE25]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Once all of these changes are saved, our application is thoroughly "hacked"
    with an `eval()` being used to double the normal click counter, an inline script
    that will remove all records from our `Test` collection, and with scripts and
    styles being used from an alternate site (the Bootstrap CDN).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有这些更改后，我们的应用程序已经彻底“被黑”，使用了 `eval()` 来加倍正常点击计数器，一个内联脚本将删除我们的 `Test` 集合中的所有记录，并且使用了来自备用站点（Bootstrap
    CDN）的脚本和样式。
- en: 'Navigate to `http://localhost:3000/` and play around with the buttons for a
    bit. After a few clicks, your screen will look similar to the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到 `http://localhost:3000/` 并稍微玩一下按钮。点击几次后，你的屏幕将类似于以下截图：
- en: '![Add inline and eval() scripts](img/image00405.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![添加内联和 eval() 脚本](img/image00405.jpeg)'
- en: 'To activate the inline "hack", click the button labelled **Bootstrap!** – a
    notice will come up that you''ve been hacked, and after you click on **OK,** the
    `Test` collection will be cleaned out. The notice will look something like the
    following screenshot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活内联“黑客”，点击标记为 **Bootstrap!** 的按钮——会出现一个通知，告诉你你已经被黑了，点击 **OK** 后，`Test` 集合将被清空。通知看起来可能如下截图：
- en: '![Add inline and eval() scripts](img/image00406.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![添加内联和 eval() 脚本](img/image00406.jpeg)'
- en: You're now ready to shut down all these expert hacking techniques!
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以关闭所有这些高级黑客技术了！
- en: How to do it...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: To secure our application, we will add the `browser-policy` package, and then
    configure it appropriately for our environment.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护我们的应用程序，我们将添加 `browser-policy` 包，然后根据我们的环境适当配置它。
- en: 'In a new terminal window, navigate to the root folder of your project (keep
    your app running!) and execute the following command:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新的终端窗口中，导航到你的项目根目录（保持你的应用程序运行！）并执行以下命令：
- en: '[PRE26]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Your application will now have lost all Bootstrap formatting, and the `eval()`
    function which was doubling your counter and the eval() function, which was doubling
    your counter, will no longer work. When you click the **Click Me** button, your
    counter will increment but the double counter will not. Your screen should look
    similar to the following screenshot, with a lot of errors in the web console explaining
    that the unsafe "hacks" from before are no longer allowed:'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的应用程序现在将失去所有的Bootstrap格式化，以及那个将您的计数器翻倍和eval()函数，它也将不再工作。当您点击**点击我**按钮时，您的计数器会增加，但双倍计数器不会。您的屏幕应该类似于以下截图，其中在Web控制台中有很多错误解释说之前的不安全“黑客”行为现在不再被允许：
- en: '![How to do it...](img/image00407.jpeg)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00407.jpeg)'
- en: 'We will now fine-tune our security settings with `BrowserPolicy.content`. The
    inline scripting vulnerability still exists (click on **Bootstrap!** if you would
    like to test it), and our formatting, which we don''t consider a hack, is no longer
    working. So, we are currently not strict enough in one area (inline scripts) and
    too strict in another (refusing all content from the Bootstrap CDN, a trusted
    source). Let''s rectify that. Create a new file named `policy.js` in the `[project
    root]/server/` folder. Add the following two lines, and save your changes:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将使用`BrowserPolicy.content`微调我们的安全设置。内联脚本漏洞仍然存在（如果您想测试它，请点击**Bootstrap!**），而且我们之前认为不是黑客行为的那种格式化也不再起作用。因此，我们在一个领域（内联脚本）上不够严格，而在另一个领域（拒绝从Bootstrap
    CDN获取所有内容，这是一个可信来源）上过于严格。让我们来纠正这个问题。在`[项目根目录]/server/`文件夹中创建一个名为`policy.js`的新文件。添加以下两行，并保存您的更改：
- en: '[PRE27]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Our Bootstrap formatting has been restored! Now, let''s disallow inline scripts,
    as well as prevent connections to any servers. Add the following two lines to
    the `policy.js` file and save your changes:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经恢复了Bootstrap格式化！现在，让我们禁止内联脚本，以及防止连接到任何服务器。将以下两行添加到`policy.js`文件中并保存您的更改：
- en: '[PRE28]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The inline script that was erasing our `Test` collection will now no longer
    run. However, by disallowing all connections, we have inadvertently destroyed
    the `DDP` connection to our server. We need to rectify that by whitelisting our
    `//:localhost:3000` address for HTTP and for websockets (for `DDP`).
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 那个正在删除我们的`Test`集合的内联脚本现在将不再运行。然而，通过禁止所有连接，我们意外地破坏了与我们的服务器`DDP`连接。我们需要通过将我们的`//:localhost:3000`地址列入白名单来修复这个问题，对于HTTP和websockets（对于`DDP`）。
- en: 'Add the following three lines to the end of the `policy.js` file and save your
    changes:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下三行添加到`policy.js`文件的末尾并保存您的更改：
- en: '[PRE29]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Tip
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: As we are dealing with your browser's security policy, a manual refresh is required
    each time you make a change to `policy.js`.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们正在处理您浏览器的安全策略，每次您对`policy.js`进行更改时都需要手动刷新。
- en: 'Refresh your browser one final time, and now everything that should be allowed
    is working, and everything that shouldn''t (inline scripts, `eval()`, etc.) is
    prohibited. Your screen, after a few clicks, should look like the following screenshot:'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，刷新您的浏览器一次，现在所有应该允许的内容都在工作，所有不应该的内容（内联脚本、`eval()`等）都被禁止。经过几次点击后，您的屏幕应该看起来像以下截图：
- en: '![How to do it...](img/image00408.jpeg)'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00408.jpeg)'
- en: How it works...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By default, installing the `browser-policy` package will disable the `eval()`
    scripts, and only allow resources (images, etc) from your site. This is why just
    adding `browser-policy` disabled the double counter `eval()` script, and stripped
    away all the Bootstrap files.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，安装`browser-policy`包将禁用`eval()`脚本，并且只允许来自您站点的资源（图像等）。这就是为什么仅仅添加`browser-policy`就禁用了双倍计数器`eval()`脚本，并移除了所有Bootstrap文件。
- en: To allow Bootstrap resources, we whitelisted the styles and scripts of the Bootstrap
    CDN, using the two `BrowserPolicy.content` functions – `allowStyleOrigin()` and
    `.allowScriptOrigin()`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许Bootstrap资源，我们使用两个`BrowserPolicy.content`函数——`allowStyleOrigin()`和`.allowScriptOrigin()`——将Bootstrap
    CDN的样式和脚本列入白名单。
- en: Next, we shut off inline scripts with the `disallowInlineScripts()` function.
    We also prevented any and all AJAX / remote server calls, using the `disallowConnect()`
    function.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`disallowInlineScripts()`函数关闭内联脚本。我们还使用`disallowConnect()`函数防止任何AJAX/远程服务器调用。
- en: Being this strict also broke our server's DDP connection, which we restored
    using the `allowConnectOrigin()` function, for both HTTP and `ws`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这样严格的设置也破坏了我们服务器的`DDP`连接，我们使用`allowConnectOrigin()`函数将其恢复，适用于HTTP和`ws`。
- en: See also
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'There are many other options available to us (this is just a primer), so if
    you would like to really fine-tune your security settings, we recommend the most
    excellent article from Arunoda Susiripala, located at [https://meteorhacks.com/xss-and-meteor.html](https://meteorhacks.com/xss-and-meteor.html),
    and the `browser-policy` documentation, found on Atmosphere: [https://atmospherejs.com/meteor/browser-policy](https://atmospherejs.com/meteor/browser-policy).'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有许多其他选项可供选择（这只是一个入门指南），所以如果您真的想精细调整您的安全设置，我们推荐Arunoda Susiripala撰写的一篇极好的文章，位于[https://meteorhacks.com/xss-and-meteor.html](https://meteorhacks.com/xss-and-meteor.html)，以及可在Atmosphere上找到的`browser-policy`文档：[https://atmospherejs.com/meteor/browser-policy](https://atmospherejs.com/meteor/browser-policy)。
