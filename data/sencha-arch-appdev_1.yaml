- en: Chapter 1. Introducing Sencha Architect
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 介绍 Sencha Architect
- en: 'Sencha Architect is a software tool that allows us to work with Sencha Touch
    and Ext JS frameworks. It is a **What You See Is What You Get** (**WYSIWYG**)
    IDE that provides capabilities to implement an application using the visual editor
    and the built-in code editor. It also uses a drag-and-drop visual interface for
    rapid application development that targets both the desktop (Ext JS) and mobile
    devices (Sencha Touch). In this chapter, we will cover the basics of Sencha Architect.
    We will cover the following points:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Architect 是一款软件工具，使我们能够使用 Sencha Touch 和 Ext JS 框架。它是一个 **所见即所得**（**WYSIWYG**）
    IDE，提供使用可视化编辑器和内置代码编辑器实现应用程序的能力。它还使用拖放可视化界面进行快速应用程序开发，针对桌面（Ext JS）和移动设备（Sencha
    Touch）。在本章中，我们将介绍 Sencha Architect 的基础知识。我们将涵盖以下内容：
- en: Presenting Sencha Architect and its interface features
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Sencha Architect 及其界面功能
- en: Project basics
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目基础知识
- en: The inspector
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查器
- en: The config panel
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置面板
- en: The toolbox
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具箱
- en: The design canvas
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计画布
- en: Getting started
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用
- en: 'Sencha Architect is a great learning tool of the Sencha Touch and Ext JS framework
    libraries. Also, Sencha Architect is a great tool for rapid prototyping of applications,
    as well as rapid code-free starter and full application development. Sencha Architect
    works on two levels: as a prototyping tool as well as a code generation tool.
    Particularly for complex UIs, it saves hours of development time that are normally
    spent tweaking layouts and making sure that nested elements play well together.
    Best of all (and unlike most prototyping tools), it produces clean, object-oriented
    code that looks like the code you would have written yourself; and it was written
    completely in Ext JS.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Architect 是 Sencha Touch 和 Ext JS 框架库的优秀学习工具。此外，Sencha Architect 也是应用程序快速原型设计和快速无代码启动以及完整应用程序开发的优秀工具。Sencha
    Architect 在两个层面上工作：作为原型工具以及代码生成工具。特别是对于复杂的 UI，它节省了通常花费在调整布局和确保嵌套元素良好协作上的数小时开发时间。最好的是（并且与大多数原型工具不同），它生成干净、面向对象的代码，看起来就像您自己编写的代码；并且它完全使用
    Ext JS 编写。
- en: Sencha Architect was released in 2010\. Back in 2010, it was called Ext Designer,
    and it only had support for Ext JS applications (supported only Ext JS 3). Then,
    when Sencha released Ext JS 4.2, Ext Designer got an upgrade, and it was called
    Ext Designer 1.2, with support to develop Ext JS 3 and Ext JS 4 applications.
    In January 2012, Sencha announced Sencha Designer 2 beta, another upgrade from
    Ext Designer, but now, the tool also supported Sencha Touch 2 application development.
    In April 2012, Sencha decided to rename the tool as Sencha Architect 2, a complete
    tool to develop desktop applications with Ext JS 4 (it lost its support to Ext
    JS 3) and mobile applications with Sencha Touch 2.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Architect 于 2010 年发布。在 2010 年，它被称为 Ext Designer，并且仅支持 Ext JS 应用程序（仅支持
    Ext JS 3）。然后，当 Sencha 发布 Ext JS 4.2 时，Ext Designer 获得了升级，并被称为 Ext Designer 1.2，支持开发
    Ext JS 3 和 Ext JS 4 应用程序。2012 年 1 月，Sencha 宣布了 Sencha Designer 2 测试版，这是从 Ext Designer
    的另一个升级，但现在，该工具也支持 Sencha Touch 2 应用程序开发。2012 年 4 月，Sencha 决定将工具重命名为 Sencha Architect
    2，这是一个用于使用 Ext JS 4 开发桌面应用程序（它失去了对 Ext JS 3 的支持）和使用 Sencha Touch 2 开发移动应用程序的完整工具。
- en: So, this is why there is no Sencha Architect 1, because it was known as Ext
    Designer before becoming Sencha Architect! The most current version is 2.2.2 (as
    this book is being written).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这就是为什么没有 Sencha Architect 1 的原因，因为它在成为 Sencha Architect 之前被称为 Ext Designer！当前最新版本是
    2.2.2（本书编写时）。
- en: 'Before we start getting hands-on, there are a few things you need to know:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始动手之前，有一些事情您需要了解：
- en: Familiarity with coding HTML
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉 HTML 编码
- en: A basic background in CSS (Cascading Style Sheets)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本的 CSS（层叠样式表）背景
- en: A strong background in JavaScript and a basic understanding of **JSON** (**JavaScript
    Object Notation**)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强大的 JavaScript 背景，以及对 **JSON**（**JavaScript 对象表示法**）的基本理解
- en: Basic knowledge of Ext JS and Sencha Touch
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 Ext JS 和 Sencha Touch 的基本了解
- en: 'We will explore a lot of functionalities of Sencha Architect, and we will create
    some examples as well. But, you can also check out examples using the following
    links:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探索 Sencha Architect 的许多功能，并创建一些示例。但是，您也可以通过以下链接查看示例：
- en: Ext JS examples at [https://github.com/loiane/sencha-extjs4-examples-architect](https://github.com/loiane/sencha-extjs4-examples-architect)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ext JS 示例在 [https://github.com/loiane/sencha-extjs4-examples-architect](https://github.com/loiane/sencha-extjs4-examples-architect)
- en: Sencha Touch examples at [https://github.com/loiane/sencha-touch2-examples-architect](https://github.com/loiane/sencha-touch2-examples-architect)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sencha Touch 示例在 [https://github.com/loiane/sencha-touch2-examples-architect](https://github.com/loiane/sencha-touch2-examples-architect)
- en: Sencha examples at [https://github.com/SenchaArchitect](https://github.com/SenchaArchitect)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sencha 示例在 [https://github.com/SenchaArchitect](https://github.com/SenchaArchitect)
- en: Presenting Sencha Architect
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展示 Sencha Architect
- en: Before we start, you need to have Sencha Architect installed on your computer.
    As Sencha Architect is a paid tool, you can download the 30-day trial at [http://www.sencha.com/products/architect/download/](http://www.sencha.com/products/architect/download/)
    or you can buy a license at [http://www.sencha.com/store/architect/](http://www.sencha.com/store/architect/).
    Sencha Architect is available for Windows (`.exe`), Linux (`.run`), and Mac OS
    (`.dmg`) users. The installation process is very simple. You simply need to run
    the executable file and follow the wizard steps (administrator access is also
    required).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，您需要在您的计算机上安装 Sencha Architect。由于 Sencha Architect 是一款付费工具，您可以在 [http://www.sencha.com/products/architect/download/](http://www.sencha.com/products/architect/download/)
    下载 30 天试用版，或者您可以在 [http://www.sencha.com/store/architect/](http://www.sencha.com/store/architect/)
    购买许可证。Sencha Architect 支持Windows（`.exe`）、Linux（`.run`）和Mac OS（`.dmg`）用户。安装过程非常简单。您只需运行可执行文件，并按照向导步骤操作（也需要管理员权限）。
- en: 'After the installation is complete, click on the Sencha Architect application
    to run it:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，点击 Sencha Architect 应用程序以运行它：
- en: '![Presenting Sencha Architect](img/9819OS_01_16.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![展示 Sencha Architect](img/9819OS_01_16.jpg)'
- en: Running Sencha Architect for the first time
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首次运行 Sencha Architect
- en: 'When you execute Sencha Architect for the first time, you can either enter
    your username and password (the same you used on the Sencha Forum for the 30-day
    trial) or activate the software with the license key that was sent to your e-mail
    when you completed the purchase on the Sencha website. Next, the **Welcome to
    Sencha Architect** screen will be displayed as shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次执行 Sencha Architect 时，您可以选择输入用户名和密码（与您在 Sencha 论坛上用于 30 天试用版相同的用户名和密码）或使用在您在
    Sencha 网站上完成购买后发送到您的电子邮件的许可证密钥激活软件。接下来，将显示**欢迎使用 Sencha Architect**屏幕，如图所示：
- en: '![Running Sencha Architect for the first time](img/9819OS_01_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![首次运行 Sencha Architect](img/9819OS_01_01.jpg)'
- en: On the left-hand side of the screen, we can find links to its documentation,
    **Changelog** and **Sencha Architect Forum**. Under **Open Recent Project**, we
    can find the lists of the four most recent projects we have worked on and also
    a link to open an existing project. Below the list of existing projects, we can
    create a new blank project choosing one of the available frameworks.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕的左侧，我们可以找到指向其文档、**变更日志**和**Sencha Architect 论坛**的链接。在**打开最近的项目**下，我们可以找到我们最近工作的四个项目的列表，以及一个打开现有项目的链接。在现有项目列表下方，我们可以选择一个可用的框架来创建一个新的空白项目。
- en: 'Once we open Sencha Architect, a screen will be displayed as shown in the following
    screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们打开 Sencha Architect，屏幕将显示如下截图：
- en: '![Running Sencha Architect for the first time](img/9819OS_01_02.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![首次运行 Sencha Architect](img/9819OS_01_02.jpg)'
- en: 'As you can see in the preceding screenshot, Sencha Architect has seven major
    items that compose its interface:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，Sencha Architect 的界面由七个主要项目组成：
- en: The application toolbar
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序工具栏
- en: The online documents built into the software
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件内集成的在线文档
- en: The project inspector
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目检查器
- en: The config panel
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置面板
- en: The canvas, composed by the design editor and code editor
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由设计编辑器和代码编辑器组成的画布
- en: The toolbox
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具箱
- en: The log
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志
- en: Let's dive into each one of the major items of the Sencha Architect interface.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解 Sencha Architect 界面中的每个主要项目。
- en: The toolbar
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具栏
- en: The toolbar contains shortcuts to the most used functionalities of Sencha Architect,
    such as the creating a new project, open an existing project, save a project,
    build, publish (deploy), preview (opens the browser automatically to preview the
    application), and edit project settings.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏包含对 Sencha Architect 最常用功能的快捷方式，例如创建新项目、打开现有项目、保存项目、构建、发布（部署）、预览（自动打开浏览器以预览应用程序）和编辑项目设置。
- en: '![The toolbar](img/9819OS_01_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![工具栏](img/9819OS_01_03.jpg)'
- en: 'It is also possible to hide this toolbar. Click on **Settings**, go to the
    **Application** tab, and uncheck the **Show toolbar** checkbox as shown in the
    following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以隐藏这个工具栏。点击**设置**，转到**应用程序**选项卡，并取消选中**显示工具栏**复选框，如图所示：
- en: '![The toolbar](img/9819OS_01_04.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![工具栏](img/9819OS_01_04.jpg)'
- en: On the **Application** settings, it is also possible to enable or disable the
    tabs (the classes that are opened on the visual/code editor); change the **Project**
    **Inspector** to the **Left** or **Right** position (we will talk about this in
    the project inspector topic as well), and also change the **Code Editor** theme
    of Sencha Architect, the size of the code font by using **Code Editor font size**,
    and also enable the **JSHint in code editor** validation in the code editor.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在**应用程序**设置中，还可以启用或禁用选项卡（在可视化/代码编辑器中打开的类）；将**项目** **检查器**更改为**左侧**或**右侧**位置（我们将在项目检查器主题中讨论这一点），以及更改
    Sencha Architect 的**代码编辑器**主题、使用**代码编辑器字体大小**调整代码字体大小，并在代码编辑器中启用**JSHint**验证。
- en: To display the toolbar again, go to the application menu, **Edit** | **Project
    Settings**, and check the **Show toolbar** option again.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要再次显示工具栏，请转到应用程序菜单，**编辑** | **项目设置**，并再次勾选**显示工具栏**选项。
- en: The toolbox
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具箱
- en: In the toolbox, you can find all the native components that are available to
    use while implementing an application, including the ones used on **Models**,
    **Views**, **Controllers**, and **Stores**. They are organized according to their
    functional area (**Views**, **Forms**, **Data**, **Charts**, and so on). You can
    also see all available components by selecting **Everything**. If you need to
    find a particular component, you can also use the search field to filter the components.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在工具箱中，您可以找到在实现应用程序时可以使用的所有原生组件，包括在**模型**、**视图**、**控制器**和**存储**中使用的组件。它们根据其功能区域（**视图**、**表单**、**数据**、**图表**等）组织。您也可以通过选择**所有内容**来查看所有可用的组件。如果您需要查找特定的组件，您还可以使用搜索字段来过滤组件。
- en: 'The toolbox component will set changes depending on whether you are working
    on an Ext JS or a Sencha Touch project, as seen in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 工具箱组件将根据您是在进行 Ext JS 还是 Sencha Touch 项目的工作而设置不同的变化，如以下截图所示：
- en: '![The toolbox](img/9819OS_01_05.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![工具箱](img/9819OS_01_05.jpg)'
- en: By default, the toolbox is located on the left-hand side of Sencha Architect,
    and on the right-hand side we have the project inspector and the config panel.
    It is possible to switch the toolbox to the right-hand side, and this way on the
    left-hand side we will have the project inspector (this can be interesting if
    we work on a big project), and the toolbox and config panel will be on the right-hand
    side. To do it, go back to the project **Settings** and select the side you prefer.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，工具箱位于 Sencha Architect 的左侧，右侧是项目检查器和配置面板。可以将工具箱切换到右侧，这样左侧将会有项目检查器（如果我们处理的是大型项目，这可能很有趣），而工具箱和配置面板将位于右侧。要这样做，请返回到项目**设置**并选择您喜欢的侧边。
- en: The config panel
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置面板
- en: Throughout this book, you will notice that with Sencha Architect, the amount
    of code you will have to write yourself is very little. Basically, we will only
    code functions or a brand new class. All the rest will be done using Sencha Architect
    capabilities. For this reason, the config panel is very important. The main use
    of the config panel is that we can see the attributes values for the classes we
    create so we can set a value or change an existing value.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，您会发现使用 Sencha Architect，您需要自己编写的代码量非常少。基本上，我们只需编写函数或全新的类。其余的都将通过使用 Sencha
    Architect 的功能来完成。因此，配置面板非常重要。配置面板的主要用途是我们可以查看我们创建的类的属性值，以便我们可以设置一个值或更改现有的值。
- en: 'The following screenshot shows the config panel and some of its features:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了配置面板及其一些功能：
- en: '![The config panel](img/9819OS_01_06.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![配置面板](img/9819OS_01_06.jpg)'
- en: In the config panel, there are a few things that can help us to improve our
    development tasks. For example, depending on the class you selected from the project
    inspector, the config panel displays the configuration properties for the selected
    class or component. This is very helpful, because we have access to all the attributes
    of that class, and we do not need to refer to the documentation all the time to
    see if the attribute we are looking for is there. Also, Sencha Architect displays
    only the attributes that are recommended by Sencha for best practices; for example,
    use `dockedItems` instead of `buttons` for the `Form` class (the config `buttons`
    is not displayed on Sencha Architect).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置面板中，有一些东西可以帮助我们提高开发任务。例如，根据你在项目检查器中选择的类，配置面板显示所选类或组件的配置属性。这非常有帮助，因为我们可以访问该类的所有属性，我们不需要总是参考文档来查看我们正在寻找的属性是否在那里。此外，Sencha
    Architect 只显示 Sencha 推荐的最佳实践属性；例如，对于 `Form` 类（配置 `buttons` 在 Sencha Architect
    中不会显示），使用 `dockedItems` 代替 `buttons`。
- en: If you are not in the mood to scroll to see all the configurations of a particular
    class, you can easily use the filter to search for a particular configuration
    (*3*). By clicking on the lock icon (*4*), you can lock the filter, and when you
    select another class from the project inspector, the filter will be automatically
    applied. In case you want to remove the filter, just close the panel.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有心情滚动查看特定类的所有配置，你可以轻松地使用过滤器来搜索特定的配置（*3*）。通过点击锁形图标（*4*），你可以锁定过滤器，当你从项目检查器中选择另一个类时，过滤器将自动应用。如果你想要移除过滤器，只需关闭面板即可。
- en: See the question mark icon (2)? When you hover your cursor over the question
    mark icon, you can read a brief description of the class, and if we want to read
    more about it, we can click on the link in the description box and go to the documentation.
    The same happens when we hover our cursor over a configuration of the class; the
    question mark icon will also be displayed with a brief description of the configuration,
    and we can also go to the online documentation to read more about it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 看到那个问号图标（2）了吗？当你将鼠标悬停在问号图标上时，你可以阅读类的简要描述，如果我们想了解更多关于它的信息，我们可以点击描述框中的链接并进入文档。同样，当我们将鼠标悬停在类的配置上时，问号图标也会显示配置的简要描述，我们也可以访问在线文档来了解更多关于它的信息。
- en: We can also see two icons on the side of the **Config** label (*1*). The first
    one (selected on the screenshot), will display the common configurations of the
    selected class. The second one will display advanced configurations, such as `alternateClassName`
    (used to maintain compatibility with older versions). Usually, we will only use
    the common configurations, but in case you need to use some advanced configurations,
    Sencha Architect also provides this option.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在**配置**标签的旁边看到两个图标（*1*）。第一个（在截图上已选中），将显示所选类的常用配置。第二个将显示高级配置，例如 `alternateClassName`（用于与旧版本保持兼容）。通常，我们只会使用常用配置，但如果你需要使用一些高级配置，Sencha
    Architect 也提供了这个选项。
- en: Now, let's say you want to use a configuration that is not listed on the config
    panel. Can we add it? The answer is yes. We can add configurations that do not
    exist in the config panel. To do it, go to the filter, type the name of the config,
    and click on the **Add** button (*5*). This new configuration will be listed under
    **(Custom Properties)**. By clicking on **…**, we can choose the type of the new
    config (*6*—**Array**, **Boolean**, **Number**, **Object**, or **String**), and
    then set its value according to the selected type.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你想要使用配置面板上未列出的配置。我们能添加它吗？答案是肯定的。我们可以添加配置面板上不存在的配置。要这样做，请转到过滤器，输入配置的名称，然后点击**添加**按钮（*5*）。这个新的配置将列在**（自定义属性）**下。通过点击**…**，我们可以选择新配置的类型（*6*—**数组**，**布尔值**，**数字**，**对象**或**字符串**），然后根据所选类型设置其值。
- en: 'Another nice feature from Sencha Architect: as this tool provides and generates
    the code according to Sencha best practices, when you try to set the value of
    a particular property, Sencha Architect will let you set the value according to
    the property''s type. For example, if you need to set the **store** property for
    a grid or a list, Sencha Architect will list the current stores already created
    (*7*), so you can choose one from the list. And, in case you change the name of
    the **store**, it will be changed automatically in the classes that use that **store**.
    This helps us to make fewer mistakes on the code. Some editors that can be used
    depending on the configuration''s type are *boolean*, *array*, *Class*, *string*,
    *Template*, or *options*, as demonstrated in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Architect的另一个不错特性：因为这个工具根据Sencha最佳实践提供和生成代码，当您尝试设置特定属性的值时，Sencha Architect会允许您根据属性类型设置值。例如，如果您需要为网格或列表设置**store**属性，Sencha
    Architect会列出当前已创建的当前存储（*7*），因此您可以从列表中选择一个。而且，如果您更改了**store**的名称，它将在使用该**store**的类中自动更改。这有助于我们在代码上犯更少的错误。根据配置类型，可以使用的一些编辑器有*布尔值*、*数组*、*类*、*字符串*、*模板*或*选项*，如下面的截图所示：
- en: '![The config panel](img/9819OS_01_07.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![配置面板](img/9819OS_01_07.jpg)'
- en: In case a configuration is already in use by the class, it will be displayed
    in blue; (*1*) in the previous screenshot. To remove this property from the class,
    we simply need to click on the **Property** pane.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果配置已被类使用，它将以蓝色显示；（*1*）在之前的截图中。要从此类中移除此属性，我们只需点击**属性**面板。
- en: 'Some classes can be used as configurations by other classes. For example, an
    `Ext.panel.Grid` class can have one or more `Ext.grid.column.Column` classes (or
    its subclasses). We can navigate from a particular column of the grid to its configurations
    by clicking on the arrow icon as displayed in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一些类可以被其他类用作配置。例如，一个`Ext.panel.Grid`类可以有一个或多个`Ext.grid.column.Column`类（或其子类）。我们可以通过点击以下截图显示的箭头图标来从网格的特定列导航到其配置：
- en: '![The config panel](img/9819OS_01_08.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![配置面板](img/9819OS_01_08.jpg)'
- en: The canvas
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 画布
- en: The canvas is where you can visually create your application, and you can also
    edit its code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 画布是您可以直观创建应用程序的地方，您还可以编辑其代码。
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can also drag-and-drop toolbox components into the design canvas as well
    as the project inspector, which is especially useful when the design canvas gets
    busy with many components.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将工具箱组件拖放到设计画布以及项目检查器中，这在设计画布上有很多组件时尤其有用。
- en: 'The canvas has two tabs: the **Design** tab, which is the visual editor, or
    the **Code** editor tab. Let''s take a deeper look into them.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 画布有两个标签页：**设计**标签页，这是可视化编辑器，或者**代码**编辑器标签页。让我们更深入地了解一下它们。
- en: The visual editor
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可视化编辑器
- en: The visual editor provides a visual representation of the application. Right
    here, you can see how your application or a particular component will look without
    having to execute the application on the browser. There is also the **Refresh**
    button, in case you have made a change and want to refresh the visual editor to
    see how it looks. You can also navigate between the **Design** and **Code** editor
    tabs.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化编辑器提供了应用程序的视觉表示。在这里，您可以查看应用程序或特定组件的外观，而无需在浏览器上执行应用程序。还有一个**刷新**按钮，如果您进行了更改并希望刷新可视化编辑器以查看其外观，您可以使用它。您还可以在**设计**和**代码**编辑器标签页之间导航。
- en: 'The visual editor is a little bit different for Ext JS and Sencha Touch projects.
    The following screenshot is from an Ext JS project:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Ext JS和Sencha Touch项目，可视化编辑器略有不同。以下截图来自一个Ext JS项目：
- en: '![The visual editor](img/9819OS_01_09.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![可视化编辑器](img/9819OS_01_09.jpg)'
- en: At the bottom, you can resize the visual editor (*2*). This can be useful to
    see how the application will look in screens with different resolutions.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在底部，您可以调整可视化编辑器的大小（*2*）。这可以用来查看应用程序在不同分辨率屏幕上的外观。
- en: There is also the flyout config (*1*), which can be useful to set layout configurations
    and other properties that affect the appearance of a component.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有展开配置（*1*），它可以用来设置布局配置和其他影响组件外观的属性。
- en: 'In the next screenshot, we can see the visual editor for a Sencha Touch project:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一张截图中，我们可以看到Sencha Touch项目的可视化编辑器：
- en: '![The visual editor](img/9819OS_01_10.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![可视化编辑器](img/9819OS_01_10.jpg)'
- en: We can also edit the canvas size (*1*), and as Sencha Touch is for mobile applications,
    we can choose a different device (**iPhone (320 x 480)**, **iPad (786 x 1023)**,
    **Nexus S (480 x 800)**, and **PlayBook/Kindle Fire (600 x…)**) to see how the
    application will look on different devices. It is also possible to set a custom
    size. If we would like to see how the application looks on the device in different
    positions, we can set to see it horizontally (default option) or vertically (*2*).
    It is also possible to set the zoom of the canvas (*3*), and we can also ask Sencha
    Architect to fit the canvas (*4*) according to the space we have available on
    our computer screen.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以编辑画布大小（*1*），由于 Sencha Touch 是为移动应用程序设计的，我们可以选择不同的设备（**iPhone (320 x 480)**，**iPad
    (786 x 1023)**，**Nexus S (480 x 800)**，和 **PlayBook/Kindle Fire (600 x…)**）来查看应用程序在不同设备上的外观。我们还可以设置自定义大小。如果我们想查看应用程序在不同位置上的外观，我们可以设置为水平（默认选项）或垂直（*2*）。我们还可以设置画布的缩放（*3*），并且我们还可以要求
    Sencha Architect 根据我们电脑屏幕上的可用空间调整画布（*4*）。
- en: The code editor
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码编辑器
- en: 'Switching to the **Code** tab, we can see the code generated for a particular
    component (*1* in the following screenshot). If we try to directly change a particular
    property inside the code editor, we will notice that it is not possible unless
    it is a function. This is because most of the configuration will be done using
    the config panel. This can be a good thing, or it can be a bad thing as well.
    It is good because it maintains the code safe from unnecessary changes and it
    generates the code according to Sencha best practices. It can be bad, however,
    because it limits our power to edit the code; we need to get used to using the
    config panel. Overall, it is good that Sencha Architect has this behaviour. For
    developers that are used to writing all the code by themselves, it is simply a
    matter of getting used to this new way of coding:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到**代码**标签，我们可以看到特定组件生成的代码（以下屏幕截图中的*1*）。如果我们尝试直接在代码编辑器中更改特定的属性，我们会注意到除非它是函数，否则这是不可能的。这是因为大部分的配置都将使用配置面板来完成。这可以是一件好事，也可能是一件坏事。这是好事，因为它可以保持代码免受不必要的更改，并按照
    Sencha 最佳实践生成代码。然而，它也可能是一个坏处，因为它限制了我们的代码编辑能力；我们需要习惯使用配置面板。总的来说，Sencha Architect
    有这种行为是好事。对于习惯自己编写所有代码的开发者来说，这只是习惯这种新编码方式的问题：
- en: '![The code editor](img/9819OS_01_11.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![代码编辑器](img/9819OS_01_11.jpg)'
- en: In the previous screenshot, at the top, you can easily navigate through different
    classes you have opened or created (*2*), and you can also open a particular tab
    from the list of tabs that are currently open (*6*).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，在顶部，你可以轻松地浏览你已打开或创建的不同类（*2*），你也可以从当前打开的标签列表中打开特定的标签（*6*）。
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you don't want to persist the tabs of classes you are working on, you can
    easily disable this option by going back to **Settings** | **Applications** and
    selecting **Disable** for the **Persist tabs currently open with each project
    save** option.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想保留你正在工作的类别的标签页，你可以通过回到**设置** | **应用程序**并选择**禁用**对于**持久保存当前项目保存时打开的标签页**选项来轻松地禁用此选项。
- en: 'We can also navigate through the code of a particular component (*3*). The
    available items we can navigate through are:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以浏览特定组件的代码（*3*）。我们可以浏览的可用项包括：
- en: '**Generated Class**, which is a read only version of the generated code'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成的类**，它是生成代码的只读版本'
- en: '**Generated JSON**, which is also a read only version of the JSON code generated
    of the class (it is the configuration we can pass to the class if we use `Ext.create`
    to instantiate it)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成的 JSON**，它也是类生成的 JSON 代码的只读版本（如果我们使用 `Ext.create` 来实例化它，这是我们传递给类的配置）'
- en: The overrides class in case we override the current class (*4*—we will learn
    more about overrides later in the book)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们覆盖当前类，将使用的覆盖类（*4*——我们将在本书后面的部分了解更多关于覆盖的内容）
- en: The editable code item such as event bindings, controller actions, functions,
    and templates
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可编辑的代码项，如事件绑定、控制器操作、函数和模板
- en: Sencha Architect also allows us to save the current code displayed on the code
    editor on a separate file using the export to disk icon (*5*); it is also possible
    to copy the code to the clipboard.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Architect 还允许我们使用导出到磁盘图标（*5*）将代码编辑器上显示的当前代码保存到单独的文件中；也可以将代码复制到剪贴板。
- en: 'If we hover the mouse over certain parts of the code (*7*—the editable ones
    such as functions and templates), we will see that an edit icon will appear. If
    we click on it, the code will be available for editing, as demonstrated in the
    following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将鼠标悬停在代码的某些部分（*7*—可编辑的部分，如函数和模板）上，我们会看到会出现一个编辑图标。如果我们点击它，代码将可供编辑，如下面的截图所示：
- en: '![The code editor](img/9819OS_01_12.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![代码编辑器](img/9819OS_01_12.jpg)'
- en: If the JSHint validation is enabled (**Settings** | **Application** to enable
    or disable it), we will be able to see warnings or errors if there are any in
    our code (**Missing semicolon** on line `20` in the previous screenshot).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了JSHint验证（**设置** | **应用程序**以启用或禁用它），我们将在代码中看到任何警告或错误（如前一个截图中的第`20`行上的**缺少分号**）。
- en: Sencha Architect also provides the **Find** and **Replace** features. By clicking
    *Ctrl* + *F* (or *cmd* + *F* on Mac OS), we can search for a particular string
    on the code. By clicking *Ctrl* + *H* (*cmd* + *Alt* + *F* on Mac OS), we can
    enable the **Replace** feature as demonstrated in the preceding screenshot.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Architect还提供了**查找**和**替换**功能。通过点击*Ctrl* + *F*（或在Mac OS上点击*cmd* + *F*），我们可以在代码中搜索特定的字符串。通过点击*Ctrl*
    + *H*（或在Mac OS上点击*cmd* + *Alt* + *F*），我们可以启用**替换**功能，如前一个截图所示。
- en: Although Sencha Architect generates most of the code for us, on the editable
    pieces, there is no autocomplete feature available yet (Sencha Architect 2.2),
    so we must code without the assistance of intelli-sense (or code completion).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Sencha Architect为我们生成了大部分代码，但在可编辑的部分，目前还没有自动完成功能（Sencha Architect 2.2），因此我们必须在没有智能感应（或代码补全）的帮助下编写代码。
- en: The project inspector
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目检查员
- en: 'On the project inspector, we can see the structure of our project, including
    all the **Controllers**, **Stores**, **Views**, **Models**, and **Resources**
    we created for a particular project. If we expand a class, we will be able to
    see its inner components and functions. For big projects, it is easy to find a
    particular class by using the **Quick Open…** feature. By clicking on the plus
    icon, we can quickly create a new **Controller**, **Store**, **Model**, **Resource**,
    or a brand new **Class**:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目检查员中，我们可以看到我们项目的结构，包括为特定项目创建的所有**控制器**、**存储**、**视图**、**模型**和**资源**。如果我们展开一个类，我们将能够看到其内部组件和函数。对于大型项目，使用**快速打开…**功能可以轻松找到特定的类。通过点击加号图标，我们可以快速创建一个新的**控制器**、**存储**、**模型**、**资源**或全新的**类**：
- en: '![The project inspector](img/9819OS_01_13.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![项目检查员](img/9819OS_01_13.jpg)'
- en: 'Sencha Architect also provides some options once we have created a class. For
    example, let''s say we created a viewport, but that was not what we really needed;
    we need to create a panel instead of a viewport. By right-clicking on the class
    we created, we can transform it into something else; this way, there is no need
    to delete the current class and do all the existing code again. Let''s use another
    example: if we need to create a grid panel and we instead set a store, by right-clicking
    on it, we can automatically generate all the columns based on the model or fields
    from the store by choosing the **Auto columns** option. On the store, if we have
    a URL set for the proxy to load the data, we can chose the option **Load Data**
    and look at what the server has sent back as data. Other options are available:
    **Export to File…**, where we can export the current class to an external file,
    and another developer can import to Sencha Architect; **Mark as Initial View**
    or **Unmark as Initial View**, where we can set which component will be the initial
    view of our application; and **Duplicate**, **Delete** or **Save to Toolbox**
    (saves the component on the toolbox for reuse):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Architect在创建类后也提供了一些选项。例如，假设我们创建了一个视口，但那并不是我们真正需要的；我们需要创建一个面板而不是视口。通过右键单击我们创建的类，我们可以将其转换成其他东西；这样，就无需删除当前类并重新编写所有现有代码。让我们再举一个例子：如果我们需要创建一个网格面板，但我们设置了存储，通过右键单击它，我们可以通过选择**自动列**选项自动生成基于模型或存储的字段的全部列。在存储中，如果我们为代理设置了用于加载数据的URL，我们可以选择**加载数据**选项并查看服务器发送回的数据。其他选项还包括：**导出到文件…**，我们可以将当前类导出到外部文件，其他开发者可以将其导入到Sencha
    Architect；**标记为初始视图**或**取消标记为初始视图**，我们可以设置哪个组件将是应用程序的初始视图；以及**复制**、**删除**或**保存到工具箱**（将组件保存到工具箱以供重用）：
- en: '![The project inspector](img/9819OS_01_14.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![项目检查员](img/9819OS_01_14.jpg)'
- en: We will learn more about some of these options throughout this book.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书中学习更多关于这些选项的内容。
- en: Online documentation
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在线文档
- en: 'By clicking on the online documentation icon in the upper-right corner, Sencha
    Architect will open its online documentation on your default browser. On the online
    documentation, we can read more about Sencha Architect using its guides: [http://docs.sencha.com/architect/2/](http://docs.sencha.com/architect/2/).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击右上角的在线文档图标，Sencha Architect 将在您的默认浏览器中打开其在线文档。在线文档中，我们可以通过其指南了解更多关于 Sencha
    Architect 的信息：[http://docs.sencha.com/architect/2/](http://docs.sencha.com/architect/2/)。
- en: Logs
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志
- en: 'When we click on the logs, Sencha Architect will display a new window with
    the latest messages. This will also clear the log count:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击日志时，Sencha Architect 将显示一个新窗口，显示最新的消息。这也会清除日志计数：
- en: '![Logs](img/9819OS_01_15.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![日志](img/9819OS_01_15.jpg)'
- en: Preparing the environment
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备环境
- en: Before we go to the next chapter, let's have our environment ready so we can
    create our first project with Sencha Architect.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入下一章之前，让我们准备好环境，以便我们可以使用 Sencha Architect 创建我们的第一个项目。
- en: We will need a web server to execute our projects. In this book, we will use
    XAMPP ([http://www.apachefriends.org/en/xampp.html](http://www.apachefriends.org/en/xampp.html))
    as the default web server. You can use any web server you already have installed
    on your computer as well (IIS, Apache HTTP, and so on).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个 Web 服务器来执行我们的项目。在这本书中，我们将使用 XAMPP ([http://www.apachefriends.org/en/xampp.html](http://www.apachefriends.org/en/xampp.html))
    作为默认的 Web 服务器。您也可以使用您已经在计算机上安装的任何 Web 服务器（IIS、Apache HTTP 等）。
- en: 'In the following links, you will find a brief tutorial on how to install XAMPP
    if you do not have it yet:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下链接中，如果您还没有安装 XAMPP，您将找到一个简要教程：
- en: '**Mac OS**: [http://www.apachefriends.org/en/xampp-macosx.html](http://www.apachefriends.org/en/xampp-macosx.html)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mac OS**: [http://www.apachefriends.org/en/xampp-macosx.html](http://www.apachefriends.org/en/xampp-macosx.html)'
- en: '**Windows**: [http://www.apachefriends.org/en/xampp-windows.html](http://www.apachefriends.org/en/xampp-windows.html)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**: [http://www.apachefriends.org/en/xampp-windows.html](http://www.apachefriends.org/en/xampp-windows.html)'
- en: '**Linux**: [http://www.apachefriends.org/en/xampp-linux.html](http://www.apachefriends.org/en/xampp-linux.html)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux**: [http://www.apachefriends.org/en/xampp-linux.html](http://www.apachefriends.org/en/xampp-linux.html)'
- en: Inside the XAMPP `htdocs` directory (or the `public` directory of your web server),
    create a new folder called `sencha-architect`. This is where we will save all
    the Sencha Architect projects we will create throughout this book.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在 XAMPP 的 `htdocs` 目录（或您的 Web 服务器的 `public` 目录）内，创建一个名为 `sencha-architect` 的新文件夹。这是我们将在整本书中保存所有创建的
    Sencha Architect 项目的位置。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the basics of Sencha Architect and some of
    its interface features, such as the toolbar, toolbox, config panel, visual editor,
    code editor, online documentation, and project inspector. As this was our first
    contact with Sencha Architect, this chapter was an introduction. We will learn
    more about these items throughout this book.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了 Sencha Architect 的基础知识以及一些界面功能，例如工具栏、工具箱、配置面板、可视化编辑器、代码编辑器、在线文档和项目检查器。由于这是我们第一次接触
    Sencha Architect，本章是一个介绍。我们将在整本书中了解更多关于这些内容。
- en: We have also learned how to prepare our environment, so we can start creating
    our first Ext JS project in the next chapter.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何准备我们的环境，因此我们可以在下一章开始创建我们的第一个 Ext JS 项目。
