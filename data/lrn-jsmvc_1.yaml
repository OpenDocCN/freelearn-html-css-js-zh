- en: Chapter 1. Getting Started with JavaScriptMVC
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. JavaScriptMVC 入门
- en: In this chapter, get an overview of the JavaScriptMVC framework. We will install
    it, go through the architecture, and learn it in the best possible way. Finally,
    we will build a simple application. There is nothing that works better than an
    example. Some say this is the only thing that works.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将概述 JavaScriptMVC 框架。我们将安装它，了解其架构，并以最佳方式学习它。最后，我们将构建一个简单的应用程序。没有什么比例子更有效了。有人说这是唯一有效的方法。
- en: What is JavaScriptMVC?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 JavaScriptMVC？
- en: '**JavaScriptMVC** (**JMVC**) is a JavaScript open source **model-view-controller**
    (**MVC**) framework build, on top of the jQuery library.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaScriptMVC** （**JMVC**）是一个基于 jQuery 库构建的 JavaScript 开源 **模型-视图-控制器** （**MVC**）框架。'
- en: It is the backend agnostic client-side framework that can be used with any backend
    solution, such as Node.js, Ruby on Rails, Django, and so on.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个后端无关的客户端框架，可以与任何后端解决方案一起使用，例如 Node.js、Ruby on Rails、Django 等。
- en: The idea behind JavaScriptMVC is to provide a set of tools to build high quality
    and maintainable applications in the shortest amount of time possible.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptMVC 的理念是提供一套工具，以尽可能短的时间内构建高质量且易于维护的应用程序。
- en: 'JavaScriptMVC contains the following independent components:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptMVC 包含以下独立组件：
- en: '**StealJS**: This is the dependency manager and production build'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**StealJS**：这是依赖管理器和生产构建'
- en: '**FuncUnit**: This is the unit and functional test component'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FuncUnit**：这是单元和功能测试组件'
- en: '**jQueryMX**: This contains a set of plugins that provide the functionality
    to implement and organize large JavaScript codebases into a well-structured and
    organized form, provide a model-view-controller abstraction layer'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jQueryMX**：这包含一系列插件，提供将大型 JavaScript 代码库实现和组织成良好结构化和组织形式的功能，提供模型-视图-控制器抽象层'
- en: '**DocumentJS**: This is the documentation'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DocumentJS**：这是文档'
- en: The first version was published in May 2008\. Current Version 3.2 was released
    in December 2010\. The latest version at the time of writing this book is 3.2.2.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个版本于 2008 年 5 月发布。当前版本 3.2 于 2010 年 12 月发布。本书撰写时的最新版本是 3.2.2。
- en: In the next Version 3.3 of JavaScriptMVC, which should be released soon, jQueryMX
    project will be replaced by CanJS. Projects using current version of JMVC should
    work after small refactoring with JMVC 3.3 thanks to the names fallback.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在即将发布的 JavaScriptMVC 3.3 版本中，jQueryMX 项目将被 CanJS 替换。使用当前 JMVC 版本的项目在经过少量重构后应能与
    JMVC 3.3 一起工作，这得益于名称回退。
- en: 'JavaScriptMVC 4.0 will be renamed to DoneJS and contain significant changes
    to StealJS which will be fully AMD compatible work with CommonJS and run with
    Node.js. FuncUnit will be split into 3 parts: Syn - Synthetic event library, ShouldJS
    - Asynchronous test driving using Jasmine or QUnit and DidJS - Automated test
    runner bindings for Jasmine or QUnit for Selenium, PhantomJS, and so on.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptMVC 4.0 将更名为 DoneJS，并将对 StealJS 进行重大更改，使其完全兼容 AMD，并与 CommonJS 一起工作，在
    Node.js 上运行。FuncUnit 将分为 3 部分：Syn - 合成事件库，ShouldJS - 使用 Jasmine 或 QUnit 的异步测试驱动，DidJS
    - 自动测试运行器绑定，用于 Jasmine 或 QUnit，Selenium，PhantomJS 等。
- en: License
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 许可证
- en: 'JavaScriptMVC is licensed under the MIT license with the following exceptions:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptMVC 在以下例外情况下根据 MIT 许可证授权：
- en: 'Rhino: This is the JavaScript command line (MPL 1.1)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rhino：这是 JavaScript 命令行（MPL 1.1）
- en: Selenium browser automation (Apache 2)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Selenium 浏览器自动化（Apache 2）
- en: Links
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接
- en: 'You can refer to the following URLs to learn more about JavaScriptMVC:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考以下 URL 了解更多关于 JavaScriptMVC 的信息：
- en: 'Official website: [http://javascriptmvc.com](http://javascriptmvc.com)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方网站：[http://javascriptmvc.com](http://javascriptmvc.com)
- en: 'Repository: [https://github.com/bitovi/javascriptmvc](https://github.com/bitovi/javascriptmvc)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库：[https://github.com/bitovi/javascriptmvc](https://github.com/bitovi/javascriptmvc)
- en: Why JavaScriptMVC?
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 JavaScriptMVC？
- en: JavaScriptMVC is a solid and well documented framework.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptMVC 是一个稳固且文档齐全的框架。
- en: It is based on the extremely popular JavaScript library **jQuery**, where many
    JavaScript programmers are familiar with its factory methods and chainable function
    style.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 它基于极其流行的 JavaScript 库 **jQuery**，许多 JavaScript 程序员都熟悉其工厂方法和链式函数风格。
- en: JavaScriptMVC is a complete package. It contains everything we need to build,
    manage, document, and test JavaScript projects.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptMVC 是一个完整的包。它包含我们构建、管理、文档和测试 JavaScript 项目所需的一切。
- en: Since it is a modular framework, we don't need to use all the available components.
    We can start by using only framework components that we actually need, and add
    additional components as and when we need them.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它是一个模块化框架，我们不需要使用所有可用的组件。我们可以从只使用我们实际需要的框架组件开始，并在需要时添加额外的组件。
- en: The learning curve is pretty low, especially if a reader is familiar with other
    JavaScript frameworks, such as lightweight Backbone and Sammy or heavyweight toolkits
    such as Dojo toolkit or Google Closure. At the same time, it offers much more
    than lightweight brothers without a heavy feel, such as Google Closure which produces
    much cleaner code and provides better documentation than the very popular Dojo
    toolkit.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 学习曲线相对较低，尤其是如果读者熟悉其他JavaScript框架，如轻量级的Backbone和Sammy或重量级的工具包，如Dojo工具包或Google
    Closure。同时，它提供了比轻量级兄弟更多的功能，而没有沉重的感觉，例如Google Closure，它生成的代码更干净，提供的文档比非常流行的Dojo工具包更好。
- en: One of its killer features is that it prevents memory leakage. This is a very
    important aspect of client-side applications, which perform many operations on
    the **Document Object Model** (**DOM**) tree.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 它的一个杀手级特性是防止内存泄漏。这是客户端应用程序的一个重要方面，这些应用程序在**文档对象模型**（**DOM**）树上进行许多操作。
- en: Tip
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**MVC in JavaScriptVC**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaScriptVC中的MVC**'
- en: JavaScriptMVC utilizes the classic MVC pattern, which separates business logic
    and application data from the user interface.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptMVC利用经典的MVC模式，将业务逻辑和应用程序数据与用户界面分离。
- en: System architecture approach
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统架构方法
- en: When building web applications, we can distinguish between two approaches—multi-page
    application and single-page application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建Web应用程序时，我们可以区分两种方法——多页面应用和单页面应用。
- en: In **multi-page application**, most of the business logic is implemented in
    the backend system, with some enhancement done in JavaScript. For example, the
    Ruby on Rails application, where most of the main logic is done by the backend
    MVC architecture and when a user navigates to another page, an ordinary `http`
    request is sent.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在**多页面应用**中，大部分的业务逻辑是在后端系统中实现的，同时在JavaScript中进行一些增强。例如，Ruby on Rails应用程序，其中大部分主要逻辑是通过后端MVC架构实现的，当用户导航到另一个页面时，会发送一个普通的`http`请求。
- en: In **single-page application**, most of the business logic is implemented on
    the frontend side. For example, the JavaScriptMVC application, where most of the
    main logic is done by frontend MVC architecture. When a user navigates to another
    page, the frontend router dispatches all requests and makes calls to the back
    end API written; for example, in Sinatra.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在**单页面应用**中，大部分的业务逻辑是在前端实现的。例如，JavaScriptMVC应用程序，其中大部分主要逻辑是通过前端MVC架构实现的。当用户导航到另一个页面时，前端路由器将分发所有请求并调用后端API；例如，在Sinatra中。
- en: JavaScriptMVC single-page application
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScriptMVC单页面应用
- en: JavaScriptMVC is designed for single-page application use cases. It's good to
    know about the advantages and disadvantages of the single-page application approach
    compared to that of the multi-page application.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptMVC是为单页面应用场景设计的。了解与多页面应用相比，单页面应用方法的优缺点是很好的。
- en: Advantages
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优点
- en: Most of the states are maintained in the client, so we don't need to keep the
    session states on the server side
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数状态都是在客户端维护的，因此我们不需要在服务器端保持会话状态。
- en: Most of the requests are done through XRH calls, so there is no need to load
    a new page each time, which could cause high memory footprint (especially in the
    old fashion, non event-based servers such as Apache)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数请求都是通过XHR调用完成的，因此每次不需要加载新页面，这可能会导致高内存占用（尤其是在旧式的、非事件驱动的服务器，如Apache服务器中）。
- en: Most of the business logic is on the client side, so we can save many calls
    to the server
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大部分业务逻辑在客户端，因此我们可以节省许多对服务器的调用。
- en: Downsides
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缺点
- en: Load balance and **Content Delivery Network** (**CDN**) can be tricky since
    RPC is used to move data back and forth between the server and client.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于使用RPC在服务器和客户端之间来回移动数据，负载均衡和**内容分发网络**（**CDN**）可能会变得复杂。
- en: '**Search Engine Optimization** (**SEO**) can be tricky due to on-demand JavaScript
    built pages.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索引擎优化**（**SEO**）由于动态构建的JavaScript页面可能会变得复杂。'
- en: Real-world examples
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 真实世界的例子
- en: Readers can find web applications built with the JavaScriptMVC framework at
    [http://community.javascriptmvc.com/posts/in-bucket/apps](http://community.javascriptmvc.com/posts/in-bucket/apps).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 读者可以在[http://community.javascriptmvc.com/posts/in-bucket/apps](http://community.javascriptmvc.com/posts/in-bucket/apps)找到使用JavaScriptMVC框架构建的Web应用程序。
- en: Installing JavaScriptMVC
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装JavaScriptMVC
- en: Installing JavaScriptMVC is as easy as making tea, but faster.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 安装JavaScriptMVC就像泡茶一样简单，但速度更快。
- en: Choosing your method
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择你的方法
- en: There are three methods.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方法。
- en: Download the complete package from the official website ([http://javascriptmvc.com](http://javascriptmvc.com))
    or build a custom package including the components we want to use ([http://javascriptmvc.com/builder.html](http://javascriptmvc.com/builder.html))
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从官方网站([http://javascriptmvc.com](http://javascriptmvc.com))下载完整包，或者构建一个包含我们想要使用的组件的自定义包([http://javascriptmvc.com/builder.html](http://javascriptmvc.com/builder.html))
- en: Pull code from the Git repositories hosted on GitHub.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从GitHub上托管的Git仓库拉取代码。
- en: Use Vagrant
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vagrant
- en: 'The last two methods are the preferred way, for the following reasons:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两种方法是首选方式，原因如下：
- en: Easy update to the latest version
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于更新到最新版本
- en: Easy switch to another version by the `checkout` tag
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`checkout`标签轻松切换到另一个版本
- en: Contribution to the project; how awesome is that? For more information about
    contributing, visit [http://javascriptmvc.com/docs.html#!developwithgit](http://javascriptmvc.com/docs.html#!developwithgit)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为项目做出贡献；这有多么酷？有关贡献的更多信息，请访问[http://javascriptmvc.com/docs.html#!developwithgit](http://javascriptmvc.com/docs.html#!developwithgit)
- en: The third method seems to be the best one, because it contains all the advantages
    from the second one, plus it creates an encapsulated environment, which we can
    easily and quickly create or delete without affecting our current development
    environment setup.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种方法似乎是最好的，因为它包含了第二种方法的全部优点，并且创建了一个封装的环境，我们可以轻松快速地创建或删除，而不会影响我们当前的开发环境设置。
- en: Which method is right for me?
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 哪种方法适合我？
- en: For a fast tryout library, choose the first method. For the actual development,
    definitely choose the second one.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于快速尝试库，选择第一种方法。对于实际开发，肯定选择第二种。
- en: The first method – download the package
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一种方法——下载包
- en: 'In this method, we will use a web interface on the JavaScriptMVC web page to
    configure and download the package:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，我们将使用JavaScriptMVC网页上的Web界面来配置和下载包：
- en: Download the complete package from [http://javascriptmvc.com](http://javascriptmvc.com)
    and unpack its content.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://javascriptmvc.com](http://javascriptmvc.com)下载完整包并解压其内容。
- en: Create a folder named `Todo` under the local web server working directory.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地web服务器工作目录下创建一个名为`Todo`的文件夹。
- en: Copy all files from `javascriptmvc-3.2.2` to the `Todo` folder and start the
    web server.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`javascriptmvc-3.2.2`文件夹中的所有文件复制到`Todo`文件夹，并启动web服务器。
- en: '[PRE0]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That is it; we are all set and ready to go.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些；我们已经设置好了，准备出发。
- en: The second method – pull the code from Git repositories
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第二种方法——从Git仓库拉取代码
- en: We assume that the reader knows and has installed Git.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设读者已经了解并安装了Git。
- en: 'If not, the following resources might be helpful:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有，以下资源可能有所帮助：
- en: '**Installing** **Git**: [http://git-scm.com/book/en/Getting-Started-Installing-Git](http://git-scm.com/book/en/Getting-Started-Installing-Git)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装** **Git**：[http://git-scm.com/book/en/Getting-Started-Installing-Git](http://git-scm.com/book/en/Getting-Started-Installing-Git)'
- en: '**Free book Pro Git**: [http://git-scm.com/book](http://git-scm.com/book)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**免费书籍Pro Git**：[http://git-scm.com/book](http://git-scm.com/book)'
- en: '**Git** **reference**: [http://gitref.org](http://gitref.org)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git** **参考**：[http://gitref.org](http://gitref.org)'
- en: 'In the following steps, we are going to install JavaScriptMVC for our `Todo`
    example project:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中，我们将为我们的`Todo`示例项目安装JavaScriptMVC：
- en: 'Under local web server directory, create new folder named `Todo`:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地web服务器目录下，创建一个名为`Todo`的新文件夹：
- en: '[PRE1]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Inside the `Todo` folder, create a new Git repository:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Todo`文件夹内，创建一个新的Git仓库：
- en: '[PRE2]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add JavaScriptMVC components as submodules to the project:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将JavaScriptMVC组件作为子模块添加到项目中：
- en: '[PRE3]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Install and update the submodules:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装和更新子模块：
- en: '[PRE4]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The last module we need to install is `Syn`. Since it is already a submodule
    to the `FuncUnit` project, all we need to do is initialize and update it:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要安装的最后一个模块是`Syn`。由于它已经是`FuncUnit`项目的子模块，我们只需要初始化并更新它：
- en: '[PRE5]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Switch `Syn` to the `master` branch:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Syn`切换到`master`分支：
- en: '[PRE6]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Go back to the root directory of the project:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回项目的根目录：
- en: '[PRE7]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Move the `js` command to the root directory of the project:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`js`命令移动到项目的根目录：
- en: '[PRE8]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Verifying Installation
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 验证安装
- en: 'The project directory should have following folder structure:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 项目目录应该有以下的文件夹结构：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: That is it; we are all set and ready to go.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些；我们已经设置好了，准备出发。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'More about submodules in Git: [http://git-scm.com/book/en/Git-Tools-Submodules](http://git-scm.com/book/en/Git-Tools-Submodules)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于Git子模块的信息：[http://git-scm.com/book/en/Git-Tools-Submodules](http://git-scm.com/book/en/Git-Tools-Submodules)
- en: The third method – Vagrant
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第三种方法——Vagrant
- en: To install JavaScriptMVC using this method, we need to install **Vagrant**,
    which is a virtualized development tool wrapper around Oracle VM VirtualBox, an
    x86 and AMD64/Intel64 virtualization software package.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此方法安装 JavaScriptMVC，我们需要安装 **Vagrant**，它是一个围绕 Oracle VM VirtualBox 的虚拟化开发工具包装器，Oracle
    VM VirtualBox 是一个 x86 和 AMD64/Intel64 虚拟化软件包。
- en: Download and install Oracle VM VirtualBox ([https://www.virtualbox.org](https://www.virtualbox.org)).
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装 Oracle VM VirtualBox ([https://www.virtualbox.org](https://www.virtualbox.org)).
- en: Download and install Vagrant ([http://downloads.vagrantup.com](http://downloads.vagrantup.com)).
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装 Vagrant ([http://downloads.vagrantup.com](http://downloads.vagrantup.com)).
- en: Download an unpack the JavaScriptMVC kick-starter ([https://github.com/wbednarski/JavaScriptMVC_kick-starter/archive/master.zip](https://github.com/wbednarski/JavaScriptMVC_kick-starter/archive/master.zip)).
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并解压 JavaScriptMVC 启动器 ([https://github.com/wbednarski/JavaScriptMVC_kick-starter/archive/master.zip](https://github.com/wbednarski/JavaScriptMVC_kick-starter/archive/master.zip)).
- en: Inside JavaScriptMVC kick-starter folder type `vagrant up`.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JavaScriptMVC 启动器文件夹中输入 `vagrant up`。
- en: This command creates a virtual environment and a projects directory. It also
    installs the web server. JavaScriptMVC framework will be placed in the `Todo`
    directory.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令创建一个虚拟环境和项目目录。它还安装了 Web 服务器。JavaScriptMVC 框架将被放置在 `Todo` 目录中。
- en: Any changes we make inside the projects directory are immediately visible in
    web browser at `http://192.168.111.111/`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在项目目录内所做的任何更改都会立即在 `http://192.168.111.111/` 的 Web 浏览器中可见。
- en: Documentation and API
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档和 API
- en: 'Good documentation and API, many tutorials, and a well documented codebase
    is the strong side of JavaScriptMVC:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的文档和 API、许多教程以及良好的代码库文档是 JavaScriptMVC 的优势：
- en: 'JavaScriptMVC documentation: [http://javascriptmvc.com/docs.html](http://javascriptmvc.com/docs.html)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScriptMVC 文档：[http://javascriptmvc.com/docs.html](http://javascriptmvc.com/docs.html)
- en: 'JavaScriptMVC API: [http://jqapi.com](http://jqapi.com)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScriptMVC API：[http://jqapi.com](http://jqapi.com)
- en: 'JavaScriptMVC tutorials: [http://javascriptmvc.com/docs.html#!tutorials](http://javascriptmvc.com/docs.html#!tutorials)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScriptMVC 教程：[http://javascriptmvc.com/docs.html#!tutorials](http://javascriptmvc.com/docs.html#!tutorials)
- en: 'JavaScriptMVC code examples: [http://javascriptmvc.com/docs.html#!examples](http://javascriptmvc.com/docs.html#!examples)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScriptMVC 代码示例：[http://javascriptmvc.com/docs.html#!examples](http://javascriptmvc.com/docs.html#!examples)
- en: 'Active community on the forum and Stack Overflow:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 论坛和 Stack Overflow 上的活跃社区：
- en: 'Stack Overflow questions about JavaScriptMVC: [http://stackoverflow.com/questions/tagged/javascriptmvc](http://stackoverflow.com/questions/tagged/javascriptmvc)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 JavaScriptMVC 的 Stack Overflow 问题：[http://stackoverflow.com/questions/tagged/javascriptmvc](http://stackoverflow.com/questions/tagged/javascriptmvc)
- en: 'JavaScriptMVC official forum: [http://forum.javascriptmvc.com/allforums](http://forum.javascriptmvc.com/allforums)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScriptMVC 官方论坛：[http://forum.javascriptmvc.com/allforums](http://forum.javascriptmvc.com/allforums)
- en: The architecture of JavaScriptMVC
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScriptMVC 的架构
- en: The architecture of JavaScriptMVC is modular. The powerful stack contains everything
    we need to build a well organized, tested, and documented application.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptMVC 的架构是模块化的。强大的堆栈包含我们构建一个组织良好、经过测试和文档化的应用程序所需的一切。
- en: Here is a list of the JavaScriptMVC key components as well as topics covered
    in the next chapters.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了 JavaScriptMVC 的关键组件以及下一章中涵盖的主题。
- en: DocumentJS
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DocumentJS
- en: '**DocumentJS** is an independent JavaScript documentation application and provides
    the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**DocumentJS** 是一个独立的 JavaScript 文档应用程序，并提供以下功能：'
- en: Inline demos with source code and HTML panels
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有源代码和 HTML 面板的内联演示
- en: Adds tags to the documentation
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向文档添加标签
- en: Adds documentation as favorite
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加文档为收藏
- en: Auto suggest search
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动建议搜索
- en: Test result page
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试结果页面
- en: Comments
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评论
- en: Extends the JSDoc syntax
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展 JSDoc 语法
- en: Adds undocumented code because it understands JavaScript
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加未记录的代码，因为它理解 JavaScript
- en: FuncUnit
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FuncUnit
- en: '**FuncUnit** is an independent web testing framework and provides the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**FuncUnit** 是一个独立的 Web 测试框架，并提供以下功能：'
- en: Test clicking, typing, moving mouse cursor, and drag-and-drop utility
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试点击、输入、移动鼠标光标和拖放实用程序
- en: Follows users between pages
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页面间跟踪用户
- en: Multi browser and operating system support
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多浏览器和操作系统支持
- en: Continuous integration solution
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成解决方案
- en: Writes and debugs tests in the web browser
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在浏览器中编写和调试测试
- en: Chainable API that parallels jQuery
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 jQuery 并行的链式 API
- en: jQueryMX
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQueryMX
- en: '**jQueryMX** is the MVC part of JavaScriptMVC and provides the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**jQueryMX** 是 JavaScriptMVC 的 MVC 部分，并提供以下功能：'
- en: Encourages logically separated, deterministic code
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励逻辑分离、确定性代码
- en: MVC layer
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC 层
- en: Uniform client-side template interface (supports jq-tmpl, EJS, JAML, Micro,
    and Mustache)
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统一的客户端模板接口（支持jq-tmpl、EJS、JAML、Micro和Mustache）
- en: Ajax fixtures
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ajax固定值
- en: Useful DOM utilities
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有用的DOM工具
- en: Language helpers
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言助手
- en: JSON utilities
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON工具
- en: Class system
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类系统
- en: Custom events
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义事件
- en: StealJS
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: StealJS
- en: '**StealJS** is an independent code manager and build tool and provides the
    following powerful features:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**StealJS**是一个独立的代码管理和构建工具，并提供以下强大功能：'
- en: Dependency management
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 依赖关系管理
- en: Loads JavaScript and CoffeeScript
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载JavaScript和CoffeeScript
- en: Loads CSS, Less, and Sass files
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载CSS、Less和Sass文件
- en: Loads client-side templates such as TODO
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载客户端模板，如TODO
- en: Loasd individual files only once
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只加载单个文件一次
- en: Loads files from a different domain
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从不同域名加载文件
- en: Concatenation and compression
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接和压缩
- en: Google Closure compressor
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Closure压缩机
- en: Makes multi-page build
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建多页构建
- en: Pre processes `TODO`
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预处理`TODO`
- en: Can conditionally remove specified code from the production build
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以有条件地从生产构建中删除指定的代码
- en: Builds standalone jQuery plugins
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建独立的jQuery插件
- en: Logger
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录器
- en: Logs messages in a development mode
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发模式下记录消息
- en: Code generator
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码生成器
- en: Generates an application skeleton
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成应用程序骨架
- en: Adds the possibility to create your own generator
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加创建自定义生成器的可能性
- en: Package management
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包管理
- en: Downloads and install plugins from SVN and Git repositories
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从SVN和Git仓库下载并安装插件
- en: Installs the dependencies
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: Runs install scripts
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行安装脚本
- en: Loads individual files only once
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只加载单个文件一次
- en: Loads files from a different domain
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从不同域名加载文件
- en: Code cleaner
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码清理器
- en: Runs JavaScript beautifier against your codebase
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对你的代码库运行JavaScript美化器
- en: Runs JSLint against your codebase
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对你的代码库运行JSLint
- en: Building simple applications
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建简单应用
- en: We installed JavaScriptMVC and went briefly through its components. Now, we
    are ready to build our first JavaScriptMVC application.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们安装了JavaScriptMVC，简要了解了其组件。现在，我们准备好构建第一个JavaScriptMVC应用程序。
- en: Excited? Let's do the magic.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 激动吗？让我们来施展魔法。
- en: Todo list
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 待办事项列表
- en: We are going to learn JavaScriptMVC on the classic example application – the
    to-do list.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习JavaScriptMVC，在经典的示例应用——待办事项列表中。
- en: Note
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are curious and want to compare different JavaScript frameworks based
    on the `todos` application examples, then the GitHub project is absolutely fantastic.
    You can find it at [https://github.com/tastejs/todomvc/tree/gh-pages/architecture-examples](https://github.com/tastejs/todomvc/tree/gh-pages/architecture-examples).
    The project home page is at [http://todomvc.com/](http://todomvc.com/).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你好奇，并想根据`todos`应用程序示例比较不同的JavaScript框架，那么GitHub项目绝对很棒。你可以在[https://github.com/tastejs/todomvc/tree/gh-pages/architecture-examples](https://github.com/tastejs/todomvc/tree/gh-pages/architecture-examples)找到它。项目主页在[http://todomvc.com/](http://todomvc.com/)。
- en: Loader
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载器
- en: In the `Todo` folder that we created during installing JavaScriptMVC, create
    a folder named `todo`. Create files named `todo.html` and `todo.js` inside `todo`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装JavaScriptMVC期间创建的`Todo`文件夹中，创建一个名为`todo`的文件夹。在`todo`文件夹内创建名为`todo.html`和`todo.js`的文件。
- en: 'The project directory should have following structure:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 项目目录应具有以下结构：
- en: '[PRE10]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Copy and paste the following code into `todo.html` to load the `StealJS` and
    `todo.js` files:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码复制并粘贴到`todo.html`中，以加载`StealJS`和`todo.js`文件：
- en: '[PRE11]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`../steal/steal.js?todo` is the equivalent of `../steal/steal.js?todo/todo.js`.
    If file name is not provided `StealJS`, try to load the JavaScript file with the
    same name as the given folder.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`../steal/steal.js?todo`等同于`../steal/steal.js?todo/todo.js`。如果未提供文件名，`StealJS`将尝试加载与给定文件夹同名的JavaScript文件。'
- en: 'In `todo.js`, add the following code to load the `jQueryMX` plugins. They are
    necessary to implement this application:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在`todo.js`中添加以下代码以加载`jQueryMX`插件。它们是实现此应用程序所必需的：
- en: '[PRE12]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Open the page in a web browser by typing `http://YOUR_LOCAL_WEB_SERVER/Todo/todo.html`,
    and use a web development tool, such as Google Chrome Inspector, to check if `StealJS`
    and all the listed plugins are loaded properly.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入`http://YOUR_LOCAL_WEB_SERVER/Todo/todo.html`在网页浏览器中打开页面，并使用像Google Chrome
    Inspector这样的网页开发工具检查`StealJS`和所有列出的插件是否正确加载。
- en: Model
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模型
- en: The next step is to add a model to our application by extending `$.Model` from
    the `jQueryMX` project.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将模型添加到我们的应用程序中，通过扩展`jQueryMX`项目中的`$.Model`。
- en: 'The first parameter is the model name (string), the second parameter is the
    object with the class properties and methods. The last parameter is the prototype
    instance property, which we leave as an empty object for this example:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是模型名称（字符串），第二个参数是具有类属性和方法的对象。最后一个参数是原型实例属性，在这个例子中我们将其留为空对象：
- en: '[PRE13]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Class properties are not random; they are described in the model API. [http://javascriptmvc.com/docs.html#!jquerymx](http://javascriptmvc.com/docs.html#!jquerymx).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 类属性不是随机的；它们在模型 API 中有描述。[http://javascriptmvc.com/docs.html#!jquerymx](http://javascriptmvc.com/docs.html#!jquerymx)。
- en: We've created the `Todo` model for our `todo` list application. Now, it's time
    to play around with it.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为我们的 `todo` 列表应用程序创建了 `Todo` 模型。现在，是时候玩转它了。
- en: 'Open a web browser and type the following line into the JavaScript console:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个网络浏览器，并在 JavaScript 控制台中输入以下行：
- en: '[PRE14]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`todo` is now an instance of `Todo` with property name and property value `write
    a book`.'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`todo` 现在是 `Todo` 的一个实例，属性名为 `write a book`，属性值为 `write a book`。'
- en: 'Get the property value as follows:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式获取属性值：
- en: '[PRE15]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Set the property value if the property exists, as follows:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果属性存在，则设置属性值，如下所示：
- en: '[PRE16]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Or by `attrs`, where we can set more then one property at the time as well
    as add a new property:'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者通过 `attrs`，我们可以同时设置多个属性，以及添加新的属性：
- en: '[PRE17]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add two new properties:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加两个新属性：
- en: '[PRE18]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'List all the properties:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出所有属性：
- en: '[PRE19]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following screenshot shows the execution of the preceding commands:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的执行：
- en: '![Model](img/0205_01_01.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![模型](img/0205_01_01.jpg)'
- en: Fixtures
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 固定装置
- en: Since we have no backend service to handle /todo API calls in our frontend application,
    any attempt to invoke one of the model's CRUD methods on the `Todo` model will
    cause a network error.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在我们的前端应用程序中没有后端服务来处理 /todo API 调用，因此尝试在 `Todo` 模型上调用模型的一个 CRUD 方法将导致网络错误。
- en: Note
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Create, Read, Update, Delete** (**CRUD**) are the four basic functions of
    persistent storage.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建、读取、更新、删除**（**CRUD**）是持久存储的四个基本功能。'
- en: '![Fixtures](img/0205_01_02.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![固定装置](img/0205_01_02.jpg)'
- en: At this point, `$` `.fixture` comes to the rescue. With this feature, we can
    work on a project even when backend code is not ready yet.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，`$` `.fixture` 出现了救援。有了这个特性，我们可以在后端代码尚未准备好的情况下工作项目。
- en: 'Create fixtures for the `Todo` model:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 为 `Todo` 模型创建固定装置：
- en: '[PRE20]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, we can use our `Todo` model methods as if backend services were here.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以像后端服务在这里一样使用我们的 `Todo` 模型方法。
- en: 'For instance, we can list all `todos`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以列出所有 `todos`：
- en: '[PRE21]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following screenshot shows the output of the `console.log(''todos: '',
    todos);` command:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '以下截图显示了 `console.log(''todos: '', todos);` 命令的输出：'
- en: '![Fixtures](img/0205_01_03.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![固定装置](img/0205_01_03.jpg)'
- en: View
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看
- en: Now, it is a good time to add some HTML code to actually see something beyond
    the browser console. To do this, use the open source client-side template system
    **Embedded JavaScript** (**EJS**).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是添加一些 HTML 代码的好时机，以便在浏览器控制台之外看到一些内容。为此，使用开源客户端模板系统 **嵌入式 JavaScript**（**EJS**）。
- en: 'Create a new file `todos.ejs` in the `todo` directory (the same folder where
    `todo.js` is located), and add the following code to it:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `todo` 目录（与 `todo.js` 所在的同一文件夹）中创建一个新的文件 `todos.ejs`，并向其中添加以下代码：
- en: '[PRE22]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, type the following in the console:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在控制台中输入以下内容：
- en: '[PRE23]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, we can see all `todos` printed:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到所有 `todos` 被打印出来：
- en: '![View](img/0205_01_04.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![视图](img/0205_01_04.jpg)'
- en: Basically, the EJS template is an HTML file with injected JavaScript code between
    `<%` and `%>` or `<%=` and `%>` (and a few other ways).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，EJS 模板是一个带有在 `<%` 和 `%>` 或 `<%=` 和 `%>`（以及一些其他方式）之间注入的 JavaScript 代码的 HTML
    文件。
- en: The difference is that in the second case, all the values returned by the JavaScript
    code are escaped and printed out. In the first one, they are only evaluated.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 不同之处在于，在第二种情况下，JavaScript 代码返回的所有值都被转义并打印出来。在第一种情况下，它们只被评估。
- en: The first line is a jQuery `each` loop— no magic here. However, the next line
    could be a new thing for many readers. It is ECMAScript Harmony-like, arrow style
    syntax for functions used by the EJS parser that doesn't darken the whole picture
    by its simplicity.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行是 jQuery 的 `each` 循环——这里没有魔法。然而，下一行对于许多读者来说可能是一个新事物。它是 ECMAScript Harmony
    类似的箭头函数语法，用于 EJS 解析器，它的简单性不会使整个画面变得暗淡。
- en: 'The following syntax:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语法：
- en: '[PRE24]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Can be explained as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 可以解释如下：
- en: '[PRE25]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Controller
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制器
- en: Let's add some action to our user interface.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在用户界面中添加一些动作。
- en: 'Add the following code to the `todo.js` file, and refresh the application in
    a browser:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `todo.js` 文件中，并在浏览器中刷新应用程序：
- en: '[PRE26]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now, you can click on the `todo` name to see the console log or delete it.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以点击`todo`名称来查看控制台日志或删除它。
- en: The `init` method is called when a new controller is instantiated.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个新的控制器实例化时，会调用`init`方法。
- en: When the `controller` element is removed from the DOM tree (in our case, `#todos`),
    the `destroy` method is called automatically, unbinding all `controller` event
    handlers and releasing its element to prevent memory leakage.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 当`controller`元素从DOM树中移除（在我们的例子中是`#todos`）时，会自动调用`destroy`方法，解绑所有`controller`事件处理器，并释放其元素以防止内存泄漏。
- en: Routing
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 路由
- en: 'Replace the following code:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 替换以下代码：
- en: '[PRE27]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'With:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 使用：
- en: '[PRE28]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Refresh the application and try to click on the `todo` list elements. You will
    see that the URL updates after clicking on the `todo` item with its corresponding
    ID.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新应用并尝试点击`todo`列表元素。你会发现点击带有相应ID的`todo`项后，URL会更新。
- en: Complete application code
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完整应用代码
- en: 'Here is the complete code for the `Todo` application:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`Todo`应用的完整代码：
- en: '[PRE29]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Summary
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned what JavaScriptMVC is, and why it is a good and
    solid framework. We also learned how to install it, and browse the documentation
    and API. We got an overview of its architecture by building a simple application.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了什么是JavaScriptMVC，以及为什么它是一个好且稳固的框架。我们还学习了如何安装它，浏览文档和API。通过构建一个简单的应用，我们对其架构有了概览。
- en: If you can understand all the code that we have written in this chapter, you
    will be able to dig into the framework easily and fast. Congratulations!
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能够理解我们在这章中编写的所有代码，你将能够轻松快速地深入研究框架。恭喜你！
