- en: Chapter 14. Creating an E-Commerce Application Using the Ionic Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。使用Ionic框架创建电子商务应用程序
- en: In this chapter, we will bring together all the knowledge that we accumulated
    in this book until now and implement it in an easy-to-use Ionic framework, which
    can be applied in our own projects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将汇集本书迄今为止积累的所有知识，并在易于使用的Ionic框架中实现它，这可以应用在我们自己的项目中。
- en: In particular, in this chapter, we will build on the work that has already been
    done in [Chapter 3](ch03.html "Chapter 3. Creating an API"), *Creating an API*,
    and we will use this work with an Ionic project, which will be accessible through
    an Android or iOS smartphone.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在这一章中，我们将在[第3章](ch03.html "第3章。创建API")*创建API*中已经完成的工作的基础上进行构建，并将这项工作与一个Ionic项目结合起来，通过Android或iOS智能手机可以访问。
- en: Designing our application
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计我们的应用程序
- en: As part of the application development process, it is important that we understand
    how we will structure our application and connect it to the product API in order
    to achieve our final goal of creating a basic e-commerce application.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 作为应用程序开发过程的一部分，重要的是我们了解如何构建我们的应用程序并将其连接到产品API，以实现我们创建基本电子商务应用程序的最终目标。
- en: For this particular project, we will work on two main screens—the product's
    list items, the controller, and the product page. In addition to this, we will
    also focus on creating a basic functional side menu and a rudimentary purchasing
    option, which is nonfunctional at this stage.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个特定的项目，我们将在两个主要屏幕上工作——产品列表项、控制器和产品页面。除此之外，我们还将专注于创建一个基本的功能侧边菜单和一个基本的购买选项，在这个阶段还不可用。
- en: Creating an Ionic project
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Ionic项目
- en: We will start off our project by creating a project based on one of the Ionic
    starter templates that we didn't have an opportunity to use in the previous chapters.
    The side menu templates provide us with a side menu, a list item's view, and a
    list item's detailed view. This template should give us the necessary groundwork
    to create the ideal e-commerce application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建一个基于之前章节中没有机会使用的Ionic起始模板的项目来开始我们的项目。侧边菜单模板为我们提供了一个侧边菜单、列表项视图和列表项详细视图。这个模板应该为我们创建理想的电子商务应用程序提供必要的基础。
- en: 'Open your terminal and input the following command:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的终端并输入以下命令：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command will create a project folder with the `sidemenu` project.
    In order to further understand how this template works, we encourage you to first
    navigate to the `project` folder and then input the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建一个带有`sidemenu`项目的项目文件夹。为了进一步了解这个模板是如何工作的，我们鼓励您首先导航到`project`文件夹，然后输入以下命令：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will open the browser of your choice and give you a side-by-side view
    of how the application will look on an Android and iOS device:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开您选择的浏览器，并为您展示应用程序在Android和iOS设备上的外观：
- en: '![Creating an Ionic project](img/B04653_14_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![创建Ionic项目](img/B04653_14_01.jpg)'
- en: Implementing our designs
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现我们的设计
- en: When implementing our designs, we need to reflect the necessary changes within
    the app's code. We will first start off by modifying our controllers.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现我们的设计时，我们需要在应用程序的代码中反映必要的更改。我们首先将从修改我们的控制器开始。
- en: We will first begin by navigating to `app.js`, which is available at the path
    `www/js/app.js`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要做的是导航到`app.js`，该文件位于路径`www/js/app.js`。
- en: 'We will replace the existing code in `app.js` with the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`app.js`中用以下代码替换现有代码：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The aforementioned code will allow us to implement the different screens that
    form a part of our app, namely the `products` page, the individual product, and
    the search functionality, which will not be implemented in the current version
    of the application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将允许我们实现构成我们应用程序一部分的不同屏幕，即`products`页面、单个产品和搜索功能，这些功能在当前版本的应用程序中尚未实现。
- en: 'The next step in our modification stage is to implement the necessary changes
    in our app `controllers`, which are based in the `controllers.js` file. Go ahead
    and replace the existing code with the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们修改阶段的下一步是在我们的应用程序`controllers`中实现必要的更改，这些`controllers`位于`controllers.js`文件中。继续用以下代码替换现有代码：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see in the preceding code, we declared an array of `products`. At
    this point in time, this declares a product title through the `title` variable,
    the product ID through `id`, and price through `price`. Last but not least, in
    order to spice things up, we also added a link to a thumbnail image generator
    supported by [http://loremflickr.com](http://loremflickr.com).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的代码中所看到的，我们声明了一个`products`数组。目前，这通过`title`变量声明了产品标题，通过`id`声明了产品ID，通过`price`声明了价格。最后但并非最不重要的是，为了增加趣味，我们还添加了一个链接到[http://loremflickr.com](http://loremflickr.com)支持的缩略图图像生成器。
- en: The current setup will not reflect in the frontend of our mobile application
    because we haven't done the necessary changes in the HTML files.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的设置不会反映在我们移动应用程序的前端，因为我们还没有在HTML文件中进行必要的更改。
- en: We will first rename `playlist.html` and `playlists.html` to `product.html`
    and `products.html` respectively. We can find both of these files at the `www/templates/playlist.html`
    and `www/templates/playlists.html` path.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将`playlist.html`和`playlists.html`分别重命名为`product.html`和`products.html`。我们可以在路径`www/templates/playlist.html`和`www/templates/playlists.html`找到这两个文件。
- en: We will then navigate to the `menu.html` file, which is available at the `www/templates/menu.html`
    path.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将导航到`menu.html`文件，该文件位于`www/templates/menu.html`路径下。
- en: 'We will replace the existing code in the preceding path with the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在前面的路径中用以下代码替换现有代码：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code, we replaced the old reference to different template files
    with the more recent ones, which reflect our most recent changes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们用最新的模板文件替换了旧的引用，这些模板文件反映了我们最近的更改。
- en: 'Following this, we will proceed and modify the `product.html` file to to give
    our application a more product-like appearance. In addition to this, this page
    will also include an image placeholder, `Product Description`, `Price`, and a
    rudimentary `Add to Basket` button. In future iterations of the application, this
    will allow users to add a product to a virtual shopping basket when they wish
    to buy the necessary items. We will replace the existing code in `product.html`
    with the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将继续修改`product.html`文件，使我们的应用程序看起来更像产品。除此之外，该页面还将包括一个图像占位符、`产品描述`、`价格`和一个基本的`添加到购物篮`按钮。在应用程序的未来迭代中，这将允许用户在希望购买必要物品时将产品添加到虚拟购物篮中。我们将用以下代码替换`product.html`中的现有代码：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the final step of modifying the HTML files, we will need to modify the `products.html`
    file to show the product title and product image using AngularJS. Replace the
    existing code with the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在修改HTML文件的最后一步中，我们需要修改`products.html`文件，以使用AngularJS显示产品标题和产品图像。用以下代码替换现有代码：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the aforementioned code, we extracted the `product.image` and `product.title`
    declared in `app.js` and reproduced it in the `ion-view` tag. We also personalized
    it and included the currency and how much the product costs per kilogram.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们提取了`app.js`中声明的`product.image`和`product.title`，并在`ion-view`标签中重现了它。我们还对其进行了个性化处理，并包括了货币和每公斤产品的价格。
- en: Setting up the product API
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置产品API
- en: What we have implemented until now is a very simplified version of what we would
    like to achieve. Since we want to create projects that use MongoDB, Node.js and
    Ionic, we should take the opportunity to create an application that connects to
    our locally stored backend with a view of using this knowledge to connect to Internet-based
    servers powered by Node.js and MongoDB.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们实现的是一个非常简化的版本，这与我们想要实现的目标相比是非常简单的。由于我们想要创建使用MongoDB、Node.js和Ionic的项目，我们应该抓住机会创建一个连接到我们本地存储的后端的应用程序，并利用这些知识连接到由Node.js和MongoDB提供支持的基于互联网的服务器。
- en: In order to take advantage of this section, you will need to follow the instructions
    available in [Chapter 3](ch03.html "Chapter 3. Creating an API"), *Creating an
    API*, that are required to set up your very own Node.js server and include a basic
    set of data.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用这一部分，您需要按照[第3章](ch03.html "第3章。创建API")中提供的说明，*创建API*，来设置您自己的Node.js服务器并包括一组基本数据。
- en: 'Once you''ve performed all the necessary steps, go ahead and find out what
    the current entries on our server are by first running the `mongodb` database.
    We will do this by first navigating to the `order_api` folder and running the
    following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有必要的步骤后，首先运行`mongodb`数据库，然后查看我们服务器上的当前条目。我们将通过导航到`order_api`文件夹并运行以下命令来完成这一步：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We shall start the Node.js server in our terminal by using the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下命令在终端中启动Node.js服务器：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you adhered to the instructions given in [Chapter 3](ch03.html "Chapter 3. Creating
    an API"), *Creating an API*, the following message will appear:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遵循了[第3章](ch03.html "第3章。创建API")中给出的说明，*创建API*，将出现以下消息：
- en: '**Up, running and ready for action!**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**启动，运行并准备好行动！**'
- en: 'At this point, we will open the installed REST client and pass the following
    command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们将打开已安装的REST客户端并传递以下命令：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you have a response similar to the one as follows, then you should consider
    your attempt at creating a server to be successful:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的响应类似于以下内容，那么你应该考虑你创建服务器的尝试是成功的：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Connecting the product API to our Ionic app
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将产品API连接到我们的Ionic应用
- en: Once you have managed to get a response from the server and have the server
    and database up and running, you need to replace the existing array in the `app.js`
    file with the one from the local host.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您从服务器获得了响应并且服务器和数据库已经运行起来，您需要用本地主机中的数组替换`app.js`文件中的现有数组。
- en: 'Since the web server is based locally, you will need to enable cross-origin
    resource sharing, which is currently attainable in the easiest way through Google
    Chrome and by enabling the **CORS** (**cross-origin Resource sharing**) Chrome
    extension, which is available at [https://goo.gl/oQNhwh](https://goo.gl/oQNhwh).
    The extension is also available at the Chrome Web Store if you look for **Allow-Control-Allow-Origin:
    ***.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '由于Web服务器是基于本地的，您需要启用跨域资源共享，目前最简单的方法是通过Google Chrome并启用**CORS**（**跨域资源共享**）Chrome扩展程序来实现，该扩展程序可在[https://goo.gl/oQNhwh](https://goo.gl/oQNhwh)上获得。如果您搜索**Allow-Control-Allow-Origin:
    ***，该扩展程序也可在Chrome Web Store上获得。'
- en: 'We will first start off our project by navigating to the `ionic.project` file,
    which is available in the `root` folder, and adding the following code to `ionic.project`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将通过导航到`ionic.project`文件来启动我们的项目，该文件位于`root`文件夹中，并将以下代码添加到`ionic.project`中：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `http://cors.api.com/api` URL here acts as a placeholder URL in order to
    enable local development and cross-origin resource sharing.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`http://cors.api.com/api` URL充当占位符URL，以便启用本地开发和跨域资源共享。
- en: This modification will help us add a proxy URL, which will allow cross-origin
    resource sharing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个修改将帮助我们添加一个代理URL，这将允许跨域资源共享。
- en: 'We will also modify the `gulpfile.js` file by adding two variables and two
    tasks, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将通过添加两个变量和两个任务来修改`gulpfile.js`文件，如下所示：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To make sure that the `gulpfile` functions correctly, we encourage you to make
    sure that `gulp` is installed correctly by running the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保`gulpfile`的功能正常，我们鼓励您通过运行以下命令来确保`gulp`已正确安装：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Using `gulp`, we will also need to install `replace`. This is a `gulp` dependency,
    which will allow us to add the proxy functionality to the project by allowing
    for string replacement. This can be enabled by running the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`gulp`，我们还需要安装`replace`。这是一个`gulp`依赖项，它将允许我们通过字符串替换来为项目添加代理功能。可以通过运行以下命令来启用这一功能：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In order to facilitate cross-origin resource sharing in Ionic, we will also
    need to use a `factory` method, which will be done by creating a new JavaScript
    file entitled `services` in the `www/js` folder, which contains the following
    code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Ionic中实现跨域资源共享，我们还需要使用`factory`方法，通过在`www/js`文件夹中创建一个名为`services`的新JavaScript文件来实现，其中包含以下代码：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In order to create the preceding code, we will need to reference `services.js`
    in the `index.html` file and `app.js` file. We will add the following code to
    the `index.html` `head` tag:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建上述代码，我们需要在`index.html`文件和`app.js`文件中引用`services.js`。我们将在`index.html`的`head`标签中添加以下代码：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In addition to this, we will update the `app.js` file to include our new constant,
    which has already been referenced in the `services.js` file. This will be updated
    as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们将更新`app.js`文件，包括我们的新常量，该常量已在`services.js`文件中引用。更新如下：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In order to facilitate your coding experience, we uploaded all our code to the
    GitHub repository, which is available at [https://github.com/stefanbuttigieg/nodejs-ionic-mongodb/tree/master/chapter-14](https://github.com/stefanbuttigieg/nodejs-ionic-mongodb/tree/master/chapter-14).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便您的编码体验，我们将所有的代码上传到了GitHub仓库，可以在[https://github.com/stefanbuttigieg/nodejs-ionic-mongodb/tree/master/chapter-14](https://github.com/stefanbuttigieg/nodejs-ionic-mongodb/tree/master/chapter-14)上找到。
- en: 'The connection of our locally created REST API to our Angular controller will
    be made available to the user by updating the `product` controller entitled `ProductsCtrl`.
    The code needs to be updated as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更新名为`ProductsCtrl`的`product`控制器，我们将我们本地创建的REST API与我们的Angular控制器连接起来，使其对用户可用。代码需要更新如下：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This code modification removes the JSON array and replaces it with code that
    extracts data from the JSON available on the local web server and makes it available
    in our `controller`. The finishing touch has to be implemented through the `products.html`
    file. Here, we will update the file to contain a generic image placeholder. We
    will make slight modifications to the `products.html` file to make it work with
    our very own JSON file:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码修改了JSON数组，并用从本地web服务器上提取数据的代码替换，然后将其在我们的`controller`中可用。最后的修改需要在`products.html`文件中实现。在这里，我们将更新文件以包含一个通用的图像占位符。我们将对`products.html`文件进行轻微修改，使其与我们自己的JSON文件配合使用：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once the preceding code is implemented, feel free to navigate to the `root`
    folder of the `grocerApp` software and run the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦上述代码实施完成，可以随意转到`grocerApp`软件的`root`文件夹并运行以下命令：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The final app should look like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的应用应该是这样的：
- en: '![Connecting the product API to our Ionic app](img/B04653_14_02.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![将产品API连接到我们的Ionic应用](img/B04653_14_02.jpg)'
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we brought together a number of skills that we managed to develop
    over the past few chapters. It's important to note that we managed to connect
    an API that we created from scratch and a cross-platform application that we implemented
    via the Ionic framework. As regards to e-commerce, there are a number of open
    source solutions such as **Traider.io** and **ReactionCommerce**. These solutions
    have expanded functionalities and are in the process of improving through community
    contributions, especially with regards to the REST API services. In addition to
    this, they make use of MongoDB and Node.js.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们汇集了我们在过去几章中成功开发的一些技能。值得注意的是，我们成功连接了一个从头开始创建的API和一个通过Ionic框架实现的跨平台应用。关于电子商务，有许多开源解决方案，如**Traider.io**和**ReactionCommerce**。这些解决方案具有扩展功能，并正在通过社区贡献不断改进，特别是关于REST
    API服务方面。另外，它们使用了MongoDB和Node.js。
- en: The Ionic framework is an ever-growing platform in all aspects. As we mentioned
    earlier in this book, the Ionic framework team released a number of updates with
    a number of new features. We are excited about this, and we believe that it's
    priceless to invest energy and time to further understand this platform.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic框架在各个方面都是一个不断发展的平台。正如我们在本书中早些时候提到的，Ionic框架团队发布了许多更新和新功能。我们对此感到兴奋，并且相信投入精力和时间进一步了解这个平台是非常宝贵的。
