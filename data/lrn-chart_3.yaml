- en: Chart.js - Quick Start
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chart.js - 快速入门
- en: This chapter provides a quick start to creating web-based data visualizations
    with Chart.js. You will learn how to set up the library and configure a basic
    web page where you can include a chart. We will walk through a complete step-by-step
    example, describing how to create a bar chart and configure it with labels, tooltips,
    titles, interactions, colors, animations, and more. By using Chart.js to create
    a full-featured chart, you will have a better understanding of the main concepts
    when we explore the details later on.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了使用Chart.js创建基于Web的数据可视化的快速入门指南。您将学习如何设置库并配置一个基本网页，您可以在其中包含图表。我们将通过一个完整的分步示例，描述如何创建柱状图并使用标签、工具提示、标题、交互、颜色、动画等对其进行配置。通过使用Chart.js创建一个功能齐全的图表，您将更好地理解我们在稍后探索细节时的主要概念。
- en: 'In this chapter, you will learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解以下主题：
- en: How to install and set up Chart.js
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装和设置Chart.js
- en: How to create a simple bar chart
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建一个简单的柱状图
- en: How to configure axes, colors, and tooltips
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置坐标轴、颜色和工具提示
- en: How to add animation and respond to simple events
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何添加动画和响应简单事件
- en: How to create a horizontal and a stacked bar chart
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建水平和堆叠的柱状图
- en: Introduction to Chart.js
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chart.js简介
- en: Chart.js is an open source community-maintained JavaScript data visualization
    library based on HTML5 Canvas. At the time of writing, it is available as version
    2.7.3, and comes with eight customizable chart types. It's very easy to create
    a chart using Chart.js. It can be as simple as loading the JavaScript library
    into your page, choosing a chart type, and providing it with an array of data.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Chart.js是一个基于HTML5 Canvas的开源社区维护的JavaScript数据可视化库。在撰写本文时，它可用作版本2.7.3，并包含八种可定制的图表类型。使用Chart.js创建图表非常简单。它可以简单到将JavaScript库加载到您的页面中，选择一个图表类型，并为其提供一个数据数组。
- en: All charts are configured with a default look and feel, as well as basic interactive
    features. You can focus on the data and quickly create a simple responsive and
    interactive chart that fits nicely in your page. You don't have to worry about
    configuring padding or margins, fitting labels in axes, adding tooltips, or controlling
    transitions. But if you need to change something, there are many configuration
    options available.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有图表都使用默认的外观和感觉以及基本交互功能进行配置。您可以专注于数据，并快速创建一个简单、响应式且适合您页面的交互式图表。您不必担心配置填充或边距、将标签放入坐标轴、添加工具提示或控制过渡。但如果您需要更改某些内容，有许多配置选项可供选择。
- en: Installation and setup
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和设置
- en: 'To set up a web page for Chart.js, you just need to load the library. If you
    already have a website set up, you can download Chart.js from [www.chartjs.org](http://www.chartjs.org),
    store it where you can load it from a web page, and import it using the `<script>`
    tag, as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置一个用于Chart.js的网页，您只需加载库。如果您已经设置了一个网站，您可以从[www.chartjs.org](http://www.chartjs.org)下载Chart.js，将其存储在您可以从网页加载的位置，并使用以下`<script>`标签导入它：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can also use `npm` or `bower` to install Chart.js if you have a modular
    development environment, as shown in the following code. Chart.js integrates well
    with ES6 modules, *Angular*, *React*, and *Vue* applications:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个模块化开发环境，您也可以使用`npm`或`bower`安装Chart.js，如下面的代码所示。Chart.js与ES6模块、*Angular*、*React*和*Vue*应用程序集成良好：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The simplest way to get started is to link to a library file provided by a **Content
    Delivery Network** (**CDN**). You can obtain a list at `cdnjs.com/libraries/Chart.js`,
    choose the version and CDN provider of your choice, and copy one of the links.
    Unless you want to inspect the code, use the minified link (that ends in `min.js).`
    It's best not to use the bundle version, since it includes some extra non-Chart.js
    libraries (a better practice is to include third-party libraries separately when
    needed).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用最简单的方式是链接到一个由**内容分发网络**（**CDN**）提供的库文件。您可以在`cdnjs.com/libraries/Chart.js`获取列表，选择您想要的版本和CDN提供商，并复制其中一个链接。除非您想检查代码，否则请使用压缩链接（以`min.js`结尾）。最好不要使用捆绑版本，因为它包含一些额外的非Chart.js库（更好的做法是在需要时单独包含第三方库）。
- en: 'Using any text or code editor, copy the link to the `src` attribute of a `script`
    tag placed somewhere in the `<head>` of your HTML file, as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何文本或代码编辑器，将链接复制到HTML文件`<head>`部分中某个`script`标签的`src`属性，如下所示：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you have a development environment, such as Visual Studio Code, PHPStorm,
    or Brackets, you may wish to set up a template file that includes the Chart.js
    CDN script tag for new pages.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个开发环境，例如 Visual Studio Code、PHPStorm 或 Brackets，你可能希望为新页面设置一个包含 Chart.js
    CDN 脚本标签的模板文件。
- en: Another way to explore Chart.js and follow the examples in this book, is to
    use an online code editor, such as *CodePen* or *JSFiddle*. It's also a great
    way to share your charts and code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种探索 Chart.js 和跟随本书中的示例的方法是使用在线代码编辑器，例如 *CodePen* 或 *JSFiddle*。这也是分享你的图表和代码的好方法。
- en: 'Using JSFiddle ([https://jsfiddle.net/](https://jsfiddle.net/)), you just need
    to add the Chart.js CDN to the Resources tab, as shown in the following screenshot,
    and then you can use the tabs to write the HTML, CSS, and JavaScript code for
    your charts:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JSFiddle ([https://jsfiddle.net/](https://jsfiddle.net/))，你只需要将 Chart.js
    CDN 添加到资源选项卡，如下面的截图所示，然后你可以使用选项卡来编写你的图表的 HTML、CSS 和 JavaScript 代码：
- en: '![](img/59bcbb2a-4644-47f2-a7a3-2cbc139e3d88.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/59bcbb2a-4644-47f2-a7a3-2cbc139e3d88.png)'
- en: Using *JSFiddle* (*jsfiddle.net*) as an online code editor
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *JSFiddle* (*jsfiddle.net*) 作为在线代码编辑器
- en: 'To configure Chart.js in *CodePen* ([https://codepen.io/](https://codepen.io/)),
    click the Settings menu and then the JavaScript tab. Search for Chart.js, and
    click the first option to add the CDN to your environment, as demonstrated in
    the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 *CodePen* ([https://codepen.io/](https://codepen.io/)) 中配置 Chart.js，请点击设置菜单，然后点击
    JavaScript 选项卡。搜索 Chart.js，并点击第一个选项将 CDN 添加到你的环境中，如下面的截图所示：
- en: '![](img/95cb49bb-437f-4061-b5a6-de39ea8603d6.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95cb49bb-437f-4061-b5a6-de39ea8603d6.png)'
- en: Adding Chart.js support to *CodePen* (*codepen.io*)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Chart.js 支持添加到 *CodePen* (*codepen.io*)
- en: 'You can now use the Chart.js library and see the results in real time, as shown
    in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以使用 Chart.js 库并实时查看结果，如下面的截图所示：
- en: '![](img/98b04dce-db9c-4817-a4a3-3a3f7c2152bb.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98b04dce-db9c-4817-a4a3-3a3f7c2152bb.png)'
- en: Using CodePen (codepen.io) as an online code editor
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CodePen (codepen.io) 作为在线代码编辑器
- en: Creating a simple bar chart
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的柱状图
- en: Now that you have a working environment set up, let's get started and create
    a simple bar chart. You can type in the code as we go along, but you can also
    download the full working examples from the GitHub repository for this chapter.
    Each screenshot and code listing in this book contains a reference to the file
    used to produce it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经设置好了工作环境，让我们开始创建一个简单的柱状图。你可以边走边输入代码，也可以从 GitHub 仓库下载本章的完整工作示例。本书中的每个截图和代码列表都包含用于生成它的文件引用。
- en: Setting up the graphics context
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置图形上下文
- en: 'Charts are displayed inside the graphics context provided by an HTML Canvas
    object. There are many ways to create one; the simplest way is to use plain HTML.
    Place a `<canvas>` element somewhere inside `<body>`. It should have an `ID` attribute,
    as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图表是在由 HTML Canvas 对象提供的图形上下文中显示的。创建一个图表有很多方法；最简单的方法是使用纯 HTML。在 `<body>` 内部的某个位置放置一个
    `<canvas>` 元素。它应该有一个 `ID` 属性，如下所示：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Chart.js graphics are responsive by default. The chart will fit in the available
    space: the `height` and `width` attributes won''t affect the actual size of the
    chart (unless you change the defaults).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Chart.js 图形默认是响应式的。图表将适应可用空间：`height` 和 `width` 属性不会影响图表的实际大小（除非你更改默认值）。
- en: 'You can obtain a JavaScript handle to the `canvas` object using DOM (or JQuery)
    in any script block or file loaded by your HTML file, as shown in the following
    code snippet (the script block will be ignored in most JavaScript listings in
    this book):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 DOM（或 JQuery）在任何由你的 HTML 文件加载的脚本块或文件中获取 `canvas` 对象的 JavaScript 处理器，如下面的代码片段所示（在本书的大多数
    JavaScript 列表中，脚本块将被忽略）：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also dynamically create a `<canvas>` object using **Document Object
    Model** (**DOM**), or JQuery. In this case, an `ID` attribute is not strictly
    necessary, since the variable itself can be used as a handle, but it''s good practice
    to define one, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 **文档对象模型** (**DOM**) 或 JQuery 动态创建一个 `<canvas>` 对象。在这种情况下，`ID` 属性不是严格必要的，因为变量本身可以用作处理器的引用，但定义一个属性是良好的实践，如下所示：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A chart is created using the `Chart()` constructor. It receives two arguments:
    the graphics *context* of the canvas where the chart will be displayed, and an
    *object* containing the chart data, as demonstrated in the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Chart()` 构造函数创建图表。它接收两个参数：图表将要显示的画布的图形 *上下文*，以及包含图表数据的 *对象*，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If your `canvas` object has declared an `ID` attribute, you don''t need a `context`
    object. You can simply use the `ID` attribute as the first argument, as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 `canvas` 对象已经声明了 `ID` 属性，你不需要 `context` 对象。你可以直接使用 `ID` 属性作为第一个参数，如下所示：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The object that contains the chart data requires at least two properties: `type`,
    which selects one of the eight different kinds of Chart.js charts; and `data`,
    which references an object containing the datasets and properties of the data
    to be displayed, as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 包含图表数据的对象至少需要两个属性：`type`，它选择 Chart.js 的八种不同类型的图表之一；以及 `data`，它引用一个包含数据集和要显示的数据属性的对象的引用，如下所示：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Normally, the chart object is configured inside the constructor, as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，图表对象是在构造函数内部配置的，如下所示：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is the basic setup for any chart created with Chart.js. It won't show any
    chart yet, because we didn't provide any data, but if your library loaded correctly,
    you should see an empty axis. The code is in the `Templates/BasicTemplate.html` file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用 Chart.js 创建的任何图表的基本设置。它目前不会显示任何图表，因为我们没有提供任何数据，但如果你的库正确加载，你应该看到一个空轴。代码位于
    `Templates/BasicTemplate.html` 文件中。
- en: If nothing shows up in your screen, there may be a syntax error in your code.
    Check your browser's JavaScript console. It's always a good idea to keep it open
    when you are working with JavaScript, so that errors can be detected and fixed
    quickly.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的屏幕上没有显示任何内容，那么你的代码中可能存在语法错误。检查浏览器中的 JavaScript 控制台。当你使用 JavaScript 时，始终打开它是好主意，这样错误可以快速检测和修复。
- en: Creating a bar chart
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建柱状图
- en: A bar chart displays a list of categories associated with values represented
    by the length of the bars. To create a simple bar chart, we need a list of *categories*,
    as well as list of *values*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 柱状图显示与值相关联的分类列表，这些值由柱子的长度表示。要创建一个简单的柱状图，我们需要一个 *分类* 列表以及一个 *值* 列表。
- en: 'Let''s create a simple chart to display the volume of water in each ocean.
    We will need an array of categories, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的图表来显示每个海洋的水量。我们需要一个分类数组，如下所示：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In addition, we will also need a corresponding array of values, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要一个相应的值数组，如下所示：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `data` object should contain a `labels` property, which will refer to the
    `categories` array, and a `datasets` property, which contains an array with at
    least one `dataset` object. Each `dataset` object has a `label` property, and
    a `data` property, which will receive the data for our chart (the `volumes` array),
    as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`data` 对象应该包含一个 `labels` 属性，它将引用 `categories` 数组，以及一个 `datasets` 属性，它包含一个至少有一个
    `dataset` 对象的数组。每个 `dataset` 对象都有一个 `label` 属性和一个 `data` 属性，它将接收我们图表（`volumes`
    数组）的数据，如下所示：'
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Charts already come preconfigured with scales, axes, default colors, fonts,
    animation, and tooltips. Include the `dataObj` object from the preceding code
    as the `data` property of the chart object (`chartObj`), and you will have an
    interactive and responsive bar chart similar to the one shown as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图表已经预配置了刻度、轴、默认颜色、字体、动画和工具提示。将前述代码中的 `dataObj` 对象作为图表对象（`chartObj`）的 `data`
    属性，你将得到一个交互式且响应式的柱状图，类似于以下所示：
- en: '![](img/2272fab9-7c70-44e8-8d02-860ed62a8eb7.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2272fab9-7c70-44e8-8d02-860ed62a8eb7.png)'
- en: 'A simple bar chart (code: *Pages/BarChart1.html)*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的柱状图（代码：*Pages/BarChart1.html)*
- en: Try resizing the window and see how the labels and scales adapt to the new display.
    Move your mouse over the bars and see how the tooltips display the chart's information.
    Click on the `dataset` label and toggle its visibility. In the following sections,
    we will configure some of its appearance and behavior.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试调整窗口大小，看看标签和刻度如何适应新的显示。将鼠标移到柱子上，看看工具提示如何显示图表信息。单击 `dataset` 标签并切换其可见性。在以下章节中，我们将配置一些其外观和行为。
- en: 'The full listing is shown as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的列表如下所示：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Try typing in the preceding code in your development environment, or download
    it from `Pages/BarChart1.html`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在你的开发环境中输入前述代码，或者从 `Pages/BarChart1.html` 下载它。
- en: Configuring colors, fonts, and responsiveness
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置颜色、字体和响应性
- en: Charts created with Chart.js are born responsive and fit nicely into your screen,
    but they are also born gray. In this section, you will discover how to change
    some style properties.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Chart.js 创建的图表天生具有响应性，并且很好地适应屏幕，但它们也是天生的灰色。在本节中，你将了解如何更改一些样式属性。
- en: Dataset configuration for bar charts
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 柱状图的 `dataset` 配置
- en: 'Besides the `data` and `label` properties, each dataset object can contain
    a number of optional configuration properties. Most of them are used to configure
    fill and border colors and widths. They are briefly described in the following
    table:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`data`和`label`属性外，每个数据集对象还可以包含许多可选配置属性。它们大多数用于配置填充和边框颜色和宽度。以下表格中简要描述了它们：
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **值** | **描述** |'
- en: '| `data` | `Number[]` | An array of numbers containing the data to display
    (this is mandatory) |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `data` | `Number[]` | 包含要显示的数据的数字数组（这是必需的） |'
- en: '| `label` | `String` | A label for the dataset |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `label` | `String` | 数据集的标签 |'
- en: '| `backgroundColor` | `String` or `String[]` | The fill color of the bar |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `backgroundColor` | `String` 或 `String[]` | 条形的填充颜色 |'
- en: '| `borderColor` | `String` or `String[]` | The color of the border |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `borderColor` | `String` 或 `String[]` | 边框的颜色 |'
- en: '| `borderWidth` | `Number` or `Number[]` | The width of the border |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `borderWidth` | `Number` 或 `Number[]` | 边框的宽度 |'
- en: '| `hoverBackgroundColor` | `String` or `String[]` | The fill when the mouse
    is over the bar |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `hoverBackgroundColor` | `String` 或 `String[]` | 鼠标悬停在条形上时的填充颜色 |'
- en: '| `hoverBorderColor` | `String` or `String[]` | The border color when the mouse
    is over the bar |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `hoverBorderColor` | `String` 或 `String[]` | 鼠标悬停在条形上时的边框颜色 |'
- en: '| `hoverBorderWidth` | `Number` or `Number[]` | The border width when the mouse
    is over the bar |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `hoverBorderWidth` | `Number` 或 `Number[]` | 鼠标悬停在条形上时的边框宽度 |'
- en: '| `borderSkipped` | `bottom`, `left`, `top`, `right` | Selects which edge of
    the bar with no border (the default is `bottom` for `bar`, and `left` for `horizontalBar`
    ) |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `borderSkipped` | `bottom`, `left`, `top`, `right` | 选择条形没有边框的边缘（默认为`bar`的`bottom`，`horizontalBar`的`left`）
    |'
- en: '| `yAxisID` and `xAxisID` | An Axis ID (see [Chapter 5](f3bca5ff-1e17-4cb4-bbb9-6d71b8847ed0.xhtml),
    *Scales and Grid Configuration*) | Used in axis configuration |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `yAxisID` 和 `xAxisID` | 轴ID（见[第5章](f3bca5ff-1e17-4cb4-bbb9-6d71b8847ed0.xhtml)，*刻度和网格配置*）
    | 用于轴配置 |'
- en: Dataset properties for bar charts
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图的数据集属性
- en: 'You can change the gray colored bars by adding color properties in each `dataset`
    object, or by configuring global defaults that affect all charts. The `backgroundColor`
    property receives a string containing a color specified in a legal CSS format.
    For example, if you want to have solid red bars, you can use the following formats:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在每个`dataset`对象中添加颜色属性或通过配置影响所有图表的全局默认值来更改灰色条形。`backgroundColor`属性接收一个包含以合法CSS格式指定的颜色的字符串。例如，如果您想有实心的红色条形，可以使用以下格式：
- en: '`red`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`red`'
- en: '`rgb(255,0,0)`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rgb(255,0,0)`'
- en: '`rgba(100%,0,0,1)`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rgba(100%,0,0,1)`'
- en: '`#ff0000`, `#f00`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#ff0000`, `#f00`'
- en: '`hsl(0,100%,50%)`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hsl(0,100%,50%)`'
- en: '`hsla(0,100%,50%,1)`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hsla(0,100%,50%,1)`'
- en: 'The `borderColor` property controls the color of the label icon. It also configures
    the color of the bars if the `borderWidth` is specified with a value greater than
    zero, as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`borderColor`属性控制标签图标的颜色。如果指定了大于零的`borderWidth`值，它还会配置条形的颜色，如下所示：'
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding code should produce the result shown as follows. The full code
    is available at `Pages/BarChart2.html`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码应产生以下所示的结果。完整代码可在`Pages/BarChart2.html`中找到：
- en: '![](img/fd747d35-bf9d-450d-96d6-453c240c2b74.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd747d35-bf9d-450d-96d6-453c240c2b74.png)'
- en: 'Applying color attributes to a bar chart (code: *Pages/BarChart2.html)*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将颜色属性应用于条形图（代码：*Pages/BarChart2.html)*
- en: Options configuration
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项配置
- en: 'Defaults are configured per chart with an options configuration object included
    in the `chart` object (the second parameter of the constructor), as demonstrated
    in the following block of code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值是按图表配置的，包含在`chart`对象中的选项配置对象（构造函数的第二个参数），如下面的代码块所示：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'There are many defaults that you can change. You might, for example, wish to
    have more control over the size of your chart, which resizes automatically. That
    happens because charts are responsive by default. You can turn responsiveness
    off by overriding the `responsive` property, which has a default `true` value,
    as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以更改许多默认值。例如，您可能希望对图表的大小有更多的控制，图表会自动调整大小。这是因为图表默认是响应式的。您可以通过覆盖`responsive`属性来关闭响应式，该属性的默认值为`true`，如下所示：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, your chart no longer resizes automatically. However, what if you do want
    to undertake resizing, but don''t care about the aspect ratio? Then, you can override
    the `maintainAspectRatio` property, as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的图表不再自动调整大小。但是，如果您想进行调整大小，但不关心纵横比怎么办？那么，您可以覆盖`maintainAspectRatio`属性，如下所示：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You might want this if your `canvas` object is located inside a parent `<div>`
    container, which controls its size and is configured with CSS. In the following
    code (`Pages/BarChart4.html`), the canvas will occupy `80%` of the size of its
    parent container, as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的`canvas`对象位于一个控制其大小并使用CSS配置的父`<div>`容器内，您可能希望这样做。在以下代码（`Pages/BarChart4.html`）中，画布将占据其父容器大小的`80%`，如下所示：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you try to resize the chart, it will, by default, maintain its aspect ratio
    (and no longer fit in the page), unless the `maintainAspectRatio` property is
    set to `false`, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试调整图表大小，默认情况下，它将保持其宽高比（并且不再适应页面），除非将`maintainAspectRatio`属性设置为`false`，如下所示：
- en: '![](img/e45ebc88-1d4f-48cf-ab51-1320ecf5be09.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e45ebc88-1d4f-48cf-ab51-1320ecf5be09.png)'
- en: 'Configuring the aspect ratio of a chart to make it fit in a canvas (code: *Pages/BarChart4.html)*'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 配置图表的宽高比以使其适应画布（代码：*Pages/BarChart4.html*）
- en: Text and fonts
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本和字体
- en: Text can be included in many different objects. Each data object can have a
    list of categories, each dataset can have a legend, the chart can have a title,
    and tooltips can have titles and other information. Some text is visible or invisible
    by default. You can configure the visibility, font families, font sizes, and colors
    of any text inside a chart.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 文本可以包含在许多不同的对象中。每个数据对象可以有一个类别列表，每个数据集可以有一个图例，图表可以有一个标题，并且工具提示可以包含标题和其他信息。某些文本默认是可见或不可见的。您可以为图表内的任何文本配置可见性、字体家族、字体大小和颜色。
- en: Fonts can be applied globally (for all charts) using default configurations.
    Using the `options` configuration object, they can be applied locally to titles
    and legends, which are also configured as objects.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 字体可以全局应用（对所有图表）使用默认配置。使用`options`配置对象，它们可以局部应用于标题和图例，这些也被配置为对象。
- en: 'In our chart, we have a single dataset, which makes the legend superfluous.
    You can hide it by changing the `legend.display` property to `false`, as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的图表中，我们有一个数据集，这使得图例变得多余。您可以通过将`legend.display`属性更改为`false`来隐藏它，如下所示：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can also give the chart a title and configure its font size, color, and
    family, as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以为图表添加标题并配置其字体大小、颜色和家族，如下所示：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'It''s not enough to simply add the title to the `text` property. Since the
    `display` property is `false` by default, you must explicitly define it to be
    `true` for the title to be displayed. With these changes, your chart should look
    similar to the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 仅将标题添加到`text`属性是不够的。由于`display`属性默认为`false`，您必须显式将其定义为`true`，以便标题显示。这些更改后，您的图表应类似于以下所示：
- en: '![](img/e212da7a-0758-4ef1-b7c2-5f64a69aa42a.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e212da7a-0758-4ef1-b7c2-5f64a69aa42a.png)'
- en: 'Adding a title and defining font properties (code: *Pages/BarChart5.html)*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 添加标题并定义字体属性（代码：*Pages/BarChart5.html*）
- en: You can configure the style of all of the text in the chart, including individual
    tooltip titles and bodies, scales, and major and minor ticks, as we will see in
    the following chapters.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以配置图表中所有文本的样式，包括单个工具提示标题和正文、刻度、主刻度和副刻度，正如我们将在以下章节中看到的。
- en: Global defaults
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局默认值
- en: Local configuration options override global default configurations, which can
    be configured using the `Chart.defaults.global` object. You can configure properties,
    such as fonts, colors, axes, gridlines, ticks, animations, tooltips, and element
    properties, either globally (for all charts), or locally (for a specific chart).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本地配置选项会覆盖全局默认配置，这些配置可以使用`Chart.defaults.global`对象进行配置。您可以为字体、颜色、坐标轴、网格线、刻度、动画、工具提示和元素属性进行配置，无论是全局（对所有图表）还是本地（对特定图表）。
- en: 'To specify a global font family, you can use the following code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定全局字体家族，您可以使用以下代码：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This will affect all of the text in the chart. You can also define defaults
    for specific text elements by changing the properties, such as `Chart.defaults.global.legend`,
    `Chart.defaults.global.title`, and many more, as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这将影响图表中的所有文本。您还可以通过更改属性（如`Chart.defaults.global.legend`、`Chart.defaults.global.title`等）为特定的文本元素定义默认值，如下所示：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The default color used in charts is `rgba(0,0,0,0.1) (lightgray)`. You can change
    this using `Chart.defaults.global.defaultColor`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图表中使用的默认颜色是`rgba(0,0,0,0.1)（浅灰色）`。您可以使用`Chart.defaults.global.defaultColor`来更改此颜色。
- en: Global properties are great to include in a separate `.js` file, so that your
    charts have a consistent look and field. You might also prefer to use them even
    when you have a single chart.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 全局属性非常适合包含在单独的`.js`文件中，这样您的图表就具有一致的外观和字段。您也可能更喜欢在只有一个图表的情况下也使用它们。
- en: 'The following table lists specific configurations for bar charts that can be
    applied locally or globally. The global bar chart settings are stored in `Chart.defaults.bar`
    and `Charts.defaults.horizontalBar`. Local settings should be stored inside the
    `options` object under `scales.xAxes[]` or `scales.yAxes[]`, for vertical and
    horizontal bar charts, respectively. Try using some of these in your chart and
    see the results you get:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了可以应用于局部或全局的条形图特定配置。全局条形图设置存储在`Chart.defaults.bar`和`Charts.defaults.horizontalBar`中。局部设置应存储在`options`对象下的`scales.xAxes[]`或`scales.yAxes[]`中，分别对应垂直和水平条形图。尝试在您的图表中使用其中一些，并查看您得到的结果：
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **值** | **描述** |'
- en: '| `barPercentage` | `Number` | The percentage of the category (all datasets)
    width taken by the bar (each dataset) width. The default is `0.9`. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `barPercentage` | `Number` | 条形（每个数据集）宽度占类别（所有数据集）宽度的百分比。默认值为`0.9`。 |'
- en: '| `categoryPercentage` | The percentage of the sample width taken by the category
    width. The default is `0.8`. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `categoryPercentage` | 类别宽度占样本宽度的百分比。默认值为`0.8`。 |'
- en: '| `barThickness` | This manually sets the bar width (ignores `categoryPercentage`
    and `barPercentage`). |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `barThickness` | 这将手动设置条形宽度（忽略`categoryPercentage`和`barPercentage`）。 |'
- en: '| `maxBarThickness` | This limits the bar thickness to this number. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `maxBarThickness` | 这将条形厚度限制为此数值。 |'
- en: Option configuration properties for charts
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图表的选项配置属性
- en: Transitions, interactions, and tooltips
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过渡、交互和工具提示
- en: All charts are also born with basic transitions, animations, and interactive
    tooltips. For a simple chart, you might not need to change anything; but in case
    you want more control, you can configure these behaviors with local and global
    properties.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 所有图表也都自带基本过渡、动画和交互式工具提示。对于简单的图表，您可能不需要更改任何内容；但如果您想要更多控制，可以使用局部和全局属性来配置这些行为。
- en: Transition duration
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过渡持续时间
- en: You can create charts that change the way they look on user interaction. They
    will automatically transition to the new values gracefully and smoothly. Transition
    animations are configured with default ease algorithms and durations, but you
    can change them by editing the properties of the `Chart.defaults.global.animation`
    object, or override any defaults locally by using the `options.animation` object.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建在用户交互时改变外观的图表。它们将自动优雅且平滑地过渡到新值。过渡动画使用默认的简单算法和持续时间配置，但您可以通过编辑`Chart.defaults.global.animation`对象的属性来更改它们，或者通过使用`options.animation`对象在本地覆盖任何默认设置。
- en: 'For example, in the following chart code, all transitions last five seconds
    (`Pages/BarChart6.html`):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在以下图表代码中，所有过渡持续五秒钟（`Pages/BarChart6.html`）：
- en: '[PRE23]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Updating charts
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新图表
- en: 'You can use JavaScript functions and libraries to change your data dynamically,
    but the changes will not be reflected immediately in your chart. After changing
    data, you have to call `update()` in order to redraw it. For this, you will need
    a variable reference to the `chart` object, as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用JavaScript函数和库动态更改数据，但这些更改不会立即反映在您的图表中。更改数据后，您必须调用`update()`以重新绘制它。为此，您需要一个对`chart`对象的变量引用，如下所示：
- en: '[PRE24]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following example toggles the data in the chart, replacing the values in
    the dataset with a different array, and changing labels, titles, and colors. The
    `toggle()` function is registered as a click event listener on the canvas. Whenever
    you click anywhere in the canvas it will run, change the values of several properties,
    and call `update()`,which forces the chart to transition to the new data and appearance,
    as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例切换图表中的数据，用不同的数组替换数据集中的值，并更改标签、标题和颜色。`toggle()`函数被注册为画布上的点击事件监听器。无论何时在画布上点击，它都会运行，更改几个属性的值，并调用`update()`，这将强制图表过渡到新的数据和外观，如下所示：
- en: '[PRE25]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following screenshot shows the same chart before and after being clicked.
    The full code is available at `Pages/BarChart7.html`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了点击前后相同的图表。完整代码可在`Pages/BarChart7.html`找到：
- en: '![](img/ad68d79b-4ceb-4e07-8ed0-895e58f8a507.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad68d79b-4ceb-4e07-8ed0-895e58f8a507.png)'
- en: 'Screenshots of same chart after and before a click. Code: *Pages/BarChart7.html*'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 点击前后相同图表的截图。代码：*Pages/BarChart7.html*
- en: Tooltips
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具提示
- en: The animation duration does not affect tooltips, which have their own configuration.
    Besides animation, you can configure colors, fonts, spacing, shape, and behaviors
    in tooltips. You can also declare callback functions that change the appearance
    and content at every interaction. If you need to add more information to a tooltip,
    Chart.js allows you to create sophisticated HTML tooltips containing images and
    text.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 动画持续时间不影响工具提示，它们有自己的配置。除了动画之外，你还可以在工具提示中配置颜色、字体、间距、形状和行为。你还可以声明回调函数，在每个交互时改变外观和内容。如果你需要向工具提示添加更多信息，Chart.js允许你创建包含图像和文本的复杂HTML工具提示。
- en: 'For example, the following configuration creates black tooltips that contain
    default title colors. The tooltip configuration options contain callbacks that
    set text colors that match the colors of the bars, as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下配置创建包含默认标题颜色的黑色工具提示。工具提示配置选项包含设置文本颜色的回调，使其与条形图的颜色相匹配，如下所示：
- en: '[PRE26]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You can run the preceding code in the `Pages/BarChart8.html` file.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`Pages/BarChart8.html`文件中运行前面的代码。
- en: Working with larger and multiple datasets
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与更大的多个数据集一起工作
- en: From what we have seen so far, you should already be able to create a simple
    bar chart. In this section, we will explore some configuration options related
    to large datasets, which you will probably load as an external file, and multiple
    datasets, which can be plotted on the same chart.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止我们所看到的，你应该已经能够创建一个简单的条形图。在本节中，我们将探讨一些与大型数据集相关的配置选项，你可能会将其作为外部文件加载，以及多个数据集，这些数据集可以绘制在同一张图表上。
- en: Loading data
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载数据
- en: Many times, your data will be available online and you may want to load it dynamically.
    It's also a good idea to keep your data and code in separate files. If you have
    data in a CSV file, you can load it into your JavaScript code and use it to generate
    the chart.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 许多时候，你的数据将在线上可用，你可能希望动态地加载它。将数据和代码保存在不同的文件中也是一个好主意。如果你有一个CSV文件中的数据，你可以将其加载到JavaScript代码中，并使用它来生成图表。
- en: JavaScript loads data asynchronously using Ajax. You can use standard Ajax,
    JQuery, or the ES6 fetch function, which functions like a JavaScript promise.
    After you load the CSV file, you need to parse it. If you only need one set of
    category labels and values, you can handle it without a parser.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript使用Ajax异步加载数据。你可以使用标准的Ajax、JQuery或ES6 fetch函数，它像一个JavaScript承诺一样工作。在加载CSV文件后，你需要解析它。如果你只需要一组类别标签和值，你可以不使用解析器来处理。
- en: 'In this example, we will use a CSV file that contains the amount of plastic
    waste disposed of in the oceans by the 20 greatest pollutants. You can find the
    following code in the GitHub repository for this chapter in `Data/waste.csv`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用一个包含20个最大污染者在海洋中处置的塑料废物量的CSV文件。你可以在本章的GitHub仓库中找到以下代码`Data/waste.csv`：
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following code loads and parses the file, splitting the data into rows,
    and then splitting each row by a comma to assemble a `labels` array and a `values`
    array (we could also have used a CSV parser). This process transforms the data
    into arrays in a format that can be used by Chart.js, as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码加载并解析文件，将数据拆分为行，然后通过逗号拆分每一行来组装一个`labels`数组和`values`数组（我们也可以使用CSV解析器）。这个过程将数据转换成可以由Chart.js使用的数组格式，如下所示：
- en: '[PRE28]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `draw()` function contains the code to set up a canvas, and create and
    display the bar chart, as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`draw()`函数包含设置画布、创建和显示条形图的代码，如下所示：'
- en: '[PRE29]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can view the full code in `Pages/BarChart9.html`. The result is shown as
    follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`Pages/BarChart9.html`中查看完整的代码。结果如下所示：
- en: '![](img/52adf5d3-3266-4afa-b365-eab2cbebf0a6.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/52adf5d3-3266-4afa-b365-eab2cbebf0a6.png)'
- en: 'A bar chart created with data loaded from an external file (code: *Pages/BarChart9.html)*'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用从外部文件加载数据创建的条形图（代码：*Pages/BarChart9.html)*
- en: Horizontal bar chart
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 水平条形图
- en: 'When you have a lot of data to display and compare, it might fit better in
    a horizontal bar chart. You can easily convert a vertical bar chart into a horizontal
    one by changing the `type` to `horizontalBar`, as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要显示和比较大量数据时，水平条形图可能更适合。你可以通过将`type`更改为`horizontalBar`轻松地将垂直条形图转换为水平条形图，如下所示：
- en: '[PRE30]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The preceding chart seems better as a horizontal chart, since the category
    labels don''t have to be turned sideways. You can see the full code in `Pages/BarChart10.html`.
    The following screenshot shows what the chart looks like now:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图表似乎更适合作为水平图表，因为类别标签不需要侧转。你可以在`Pages/BarChart10.html`中看到完整的代码。以下截图显示了图表现在的样子：
- en: '![](img/6725df78-0e5a-4433-9a00-fbd422213be2.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6725df78-0e5a-4433-9a00-fbd422213be2.png)'
- en: 'A horizontal bar chart (code: *Pages/BarChart10.html)*'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 水平条形图（代码：*Pages/BarChart10.html*）
- en: Adding extra datasets
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加额外数据集
- en: 'You can add more datasets to a bar chart, and configure it with a new legend
    label, colors, and data arrays. In the following example, we will load a larger
    `.csv` file, which contains the data for plastic waste disposal in `2010`, and
    a forecast for `2025`. It has one extra column, as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以向条形图中添加更多数据集，并使用新的图例标签、颜色和数据数组进行配置。以下示例将加载一个较大的 `.csv` 文件，其中包含 `2010` 年塑料废物处理的数据和
    `2025` 年的预测。它有一个额外的列，如下所示：
- en: '[PRE31]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This time, the code will generate two `data` arrays and a single `labels` array.
    The data and labels that belong to the same category have the same index, as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，代码将生成两个 `data` 数组和单个 `labels` 数组。属于同一类别的数据和标签具有相同的索引，如下所示：
- en: '[PRE32]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The new values will be included in a second dataset, in the `datasets` array,
    as follows.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 新的值将包含在第二个数据集中，在 `datasets` 数组中，如下所示。
- en: '[PRE33]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The full code is in `Pages/BarChart12.html`. With two datasets, there are two
    bars for each category. There is also one legend item for each dataset. The result
    is shown in the following screenshot:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码位于 `Pages/BarChart12.html`。使用两个数据集，每个类别都有两个条形。每个数据集还有一个图例项。结果如下所示：
- en: '![](img/e2eef614-efa6-4cee-84e2-e6fc1d5f45fa.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e2eef614-efa6-4cee-84e2-e6fc1d5f45fa.png)'
- en: 'A bar chart with two datasets (code: *Pages/BarChart12.html)*'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 包含两个数据集的条形图（代码：*Pages/BarChart12.html*）
- en: 'With two or more datasets, you may want to configure the width of the bars
    using the configuration option properties, `barPercentage` and `categoryPercentage`.
    The former controls the width of the individual bars for each category, and the
    latter determines the space taken by all of the bars in one category. These properties
    should be defined in `options.scales.xAxes[]` if you are using a bar chart, and
    `options.scales.yAxes[]` if it is a `horizontalBar` (see `Pages/BarChart12.html`),
    as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两个或更多数据集时，你可能希望使用配置选项属性 `barPercentage` 和 `categoryPercentage` 来配置条形的宽度。前者控制每个类别的单个条形的宽度，后者确定一个类别中所有条形所占的空间。这些属性应该在
    `options.scales.xAxes[]` 中定义，如果你使用的是条形图，如果是 `horizontalBar`（见 `Pages/BarChart12.html`），则应在
    `options.scales.yAxes[]` 中定义，如下所示：
- en: '[PRE34]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Stacking bars
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 堆叠条形图
- en: 'Bars are usually placed side-by-side for comparison. However, if the values
    are part of a whole, you can stack bars in different datasets to emphasize this
    relationship. We can stack the volumes of the world''s oceans, since their sum
    reveals the total volume of ocean water in the world. The following data object
    places the volume of each ocean in a separate dataset, as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 条形通常并排放置以进行比较。然而，如果值是整体的一部分，你可以将不同数据集中的条形堆叠起来以强调这种关系。我们可以堆叠世界海洋的体积，因为它们的总和揭示了世界上海洋水的总体积。以下数据对象将每个海洋的体积放置在单独的数据集中，如下所示：
- en: '[PRE35]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To transform a bar chart into a stacked chart, you have to configure the settings
    for the *x* and *y* axes, enabling the stacked property as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 要将条形图转换为堆叠图，你必须配置 *x* 和 *y* 轴的设置，并启用堆叠属性，如下所示：
- en: '[PRE36]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The expected result is shown in the following screenshot. The full code is
    in `Pages/BarChart13.html`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 预期的结果如下所示。完整的代码位于 `Pages/BarChart13.html`：
- en: '![](img/6686f468-f2dd-45af-acfe-5ca5465f0a7a.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6686f468-f2dd-45af-acfe-5ca5465f0a7a.png)'
- en: 'A stacked bar chart can be used to display data as parts of a whole (code:
    *Pages/BarChart13.html)*'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用堆叠条形图来显示数据作为整体的一部分（代码：*Pages/BarChart13.html*）
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to install Chart.js in a web application and
    how to quickly create a simple interactive and responsive bar chart, which can
    be included in a web page. We also learned how to configure the default look and
    feel of a chart, by changing basic properties, such as colors, fonts, responsiveness,
    animation duration, and tooltips. With this knowledge, you can already start using
    Chart.js to display simple data visualizations in your web pages.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在Web应用程序中安装Chart.js以及如何快速创建一个简单、交互式且响应式的条形图，并将其包含在网页中。我们还学习了如何通过更改基本属性，如颜色、字体、响应性、动画持续时间和工具提示来配置图表的默认外观和感觉。有了这些知识，你就可以开始使用Chart.js在你的网页中显示简单的数据可视化。
- en: This chapter also explored some real-world issues, such as loading external
    files, and how to deal with larger datasets, by filtering data and configuring
    the chart in order to display the information more efficiently.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还探讨了某些现实世界的问题，例如加载外部文件，以及如何通过过滤数据和配置图表来处理更大的数据集，以便更有效地显示信息。
- en: In the following chapters, we will explore Chart.js in greater detail, create
    all eight different types of charts, learn how to configure several other properties,
    and deal with more complex datasets.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将更详细地探讨Chart.js，创建所有八种不同的图表类型，学习如何配置其他几个属性，并处理更复杂的数据集。
- en: References
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '**Books and websites**:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**书籍和网站**:'
- en: 'Chart.js official documentation and samples: [https://www.chartjs.org/docs/latest/](https://www.chartjs.org/docs/latest/)'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chart.js官方文档和示例：[https://www.chartjs.org/docs/latest/](https://www.chartjs.org/docs/latest/)
- en: '**Data sources**:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据来源**:'
- en: 'Volumes of the World’s Oceans (based on ETOPO1): `Chapter03/Pages/BarChart1.html`
    and others. [https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html](https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html)'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 世界海洋的体积（基于ETOPO1）：`Chapter03/Pages/BarChart1.html`以及其他。[https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html](https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html)
- en: 'Plastic waste: `Chapter03/Data/waste.csv`. Jambeck et al. *Plastic waste inputs
    from land into the ocean*. Science magazine. 13 February 2015'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 塑料垃圾：`Chapter03/Data/waste.csv`。Jambeck等人发表的《塑料垃圾从陆地进入海洋的输入》。科学杂志，2015年2月13日
