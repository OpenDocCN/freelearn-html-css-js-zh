- en: Chapter 11. Automating and Debugging MEAN Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。自动化和调试MEAN应用程序
- en: 'In previous chapters, you learned how to build and test your real-time MEAN
    application. You learned how to connect all the MEAN components and how to use
    test frameworks to test your application. While you can continue developing your
    application using the same methods used in the previous chapters, you can also
    speed up development cycles using supportive tools and frameworks. These tools
    will provide you with a solid development environment through automation and abstraction.
    In this chapter, you''ll learn how to use different community tools to expedite
    your MEAN application''s development. We''ll cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，您学会了如何构建和测试您的实时MEAN应用程序。您学会了如何连接所有的MEAN组件，以及如何使用测试框架来测试您的应用程序。虽然您可以继续使用前几章中使用的相同方法来开发您的应用程序，但您也可以通过使用支持性工具和框架来加快开发周期。这些工具将通过自动化和抽象为您提供一个稳固的开发环境。在本章中，您将学习如何使用不同的社区工具来加快您的MEAN应用程序的开发。我们将涵盖以下主题：
- en: Using NPM scripts
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用NPM脚本
- en: Introducing Webpack
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Webpack
- en: Introducing ESLint
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍ESLint
- en: Introducing Nodemon
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Nodemon
- en: Debugging your Express application using V8 inspector
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用V8检查器调试您的Express应用程序
- en: Debugging your Angular application's internals using Angular Augury
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用NPM脚本
- en: Using NPM scripts
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NPM脚本
- en: 'As you may have noticed, developing our application involves the operation
    of several tasks together. For instance, in order to run our application, we''ll
    need to transpile our Angular files and then run our Express application. This
    pattern will repeat itself and even get more complicated. To solve this, developers
    prefer to automate some of the application functionality and use supportive tools
    to speed up their work. Some developers prefer using third-party tools, such as
    Grunt or Gulp, also known as task runners; however, we already use a tool that
    allows us to run scripts, a tool called NPM. To understand this better, take a
    look at your `package.json` file''s `scripts` property:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经注意到的，开发我们的应用程序涉及同时执行多个任务。例如，为了运行我们的应用程序，我们需要转译我们的Angular文件，然后运行我们的Express应用程序。这种模式将重复并变得更加复杂。为了解决这个问题，开发人员倾向于自动化一些应用功能，并使用支持性工具来加快他们的工作。一些开发人员喜欢使用第三方工具，比如Grunt或Gulp，也被称为任务运行器；然而，我们已经使用了一个允许我们运行脚本的工具，一个叫做NPM的工具。为了更好地理解这一点，请查看您的`package.json`文件的`scripts`属性：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, you already have five scripts to manage your application developments.
    In the following sections, we'll learn how to add more scripts and how to use
    this NPM feature to help you automate your daily job. We'll begin with the Webpack
    module bundler.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，您已经有了五个脚本来管理您的应用程序开发。在接下来的章节中，我们将学习如何添加更多脚本，以及如何使用这个NPM功能来帮助您自动化您的日常工作。我们将从Webpack模块打包工具开始。
- en: Introducing Webpack
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Webpack
- en: 'Webpack is a popular module bundler created by Tobias Koppers. It has taken
    over the world of JavaScipt and has become one of the most used tools in our ecosystem.
    As an alternative to other module bundlers, such as SystemJS (which we used up
    until now), it has a pretty straightforward motivation: to simplify code bundling,
    modularizing big applications, and code splitting. However, after a few years
    of active development, it can now do much more, including features such as asset
    bundling, preprocessing, and optimization. In our modest introduction, though,
    we''ll learn how to simply replace SystemJS to bundle and load our Angular modules.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack是由Tobias Koppers创建的流行模块打包工具。它已经占领了JavaScript世界，并成为我们生态系统中最常用的工具之一。作为其他模块打包工具的替代品，比如SystemJS（我们到目前为止使用的），它有一个非常简单的动机：简化代码打包，将大型应用模块化，并进行代码拆分。然而，在经过几年的积极开发后，它现在可以做的更多，包括资源打包、预处理和优化等功能。在我们简单的介绍中，我们将学习如何简单地替换SystemJS来打包和加载我们的Angular模块。
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is highly recommended that you learn more about Webpack by visiting the official
    project page at [https://webpack.github.io/](https://webpack.github.io/).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议您通过访问官方项目页面[https://webpack.github.io/](https://webpack.github.io/)来了解更多关于Webpack的信息。
- en: Installing Webpack
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Webpack
- en: 'Before we can start configuring our Webpack implementation, we will need to
    install Webpack''s dependencies using `npm`. To do that, change your `package.json`
    file, as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始配置我们的Webpack实现之前，我们需要使用`npm`安装Webpack的依赖项。为此，请按照以下方式更改您的`package.json`文件：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see, you added Webpack and a TypeScript loader to your `devDependencies`
    property. We also added a Webpack script to run Webpack in a "Watch" mode so that
    every change to our file is automatically updated. We then changed our NPM start
    script to use Webpack instead of transpiling our Angular files using the TypeScript
    command-line tool. To install your new dependencies, go to your application''s
    root folder and issue the following command in your command-line tool:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，您已经将Webpack和TypeScript加载器添加到了您的`devDependencies`属性中。我们还添加了一个Webpack脚本，以便以“监视”模式运行Webpack，这样我们文件的每次更改都会自动更新。然后，我们将我们的NPM启动脚本更改为使用Webpack，而不是使用TypeScript命令行工具转译我们的Angular文件。要安装您的新依赖项，请转到您的应用程序的根文件夹，并在命令行工具中输入以下命令：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will install the specified versions of Webpack and TypeScript loader in
    your project's `node_modules` folder. When the installation process is successfully
    finished, you will be able to use these modules to run Webpack and bundle your
    TypeScript modules. Next, you'll learn how to configure Webpack.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的项目的`node_modules`文件夹中安装指定版本的Webpack和TypeScript加载器。当安装过程成功完成后，您将能够使用这些模块来运行Webpack并打包您的TypeScript模块。接下来，您将学习如何配置Webpack。
- en: Configuring Webpack
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Webpack
- en: 'In order to control Webpack''s execution, you will need to configure Webpack
    using a special configuration file placed in the root folder of your application.
    When executed, Webpack will automatically look for the default configuration file
    named `webpack.config.js` in the application''s root folder. You can also indicate
    your configuration file name using a command-line flag, but for simplicity, we''ll
    use the default filename. To start configuring Webpack, create a new file in your
    application root folder, and name it `webpack.config.js`. In your new file, paste
    the following code snippet:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了控制Webpack的执行，您需要使用一个特殊的配置文件来配置Webpack，该文件放置在应用程序的根文件夹中。当执行时，Webpack将自动查找应用程序根文件夹中名为`webpack.config.js`的默认配置文件。您也可以使用命令行标志指示您的配置文件名称，但为简单起见，我们将使用默认文件名。要开始配置Webpack，创建一个新文件在您的应用程序根文件夹中，并将其命名为`webpack.config.js`。在您的新文件中，粘贴以下代码片段：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see, Webpack''s configuration file is used to set the way Webpack
    builds our modules. In this case, we used the following settings:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，Webpack的配置文件用于设置Webpack构建我们的模块的方式。在这种情况下，我们使用了以下设置：
- en: '`entry`: This tells Webpack what the entry point of our application is. Don''t
    worry if you don''t recognize these files; we''ll create them in the next step.
    All you need to understand is that we bundle our application into three different
    files: our polyfills file, which will include all the polyfills-related modules,
    our vendor file, which will include all of our third-party modules—such as Angular
    core modules—and our application file, which will include our Angular application
    files.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry`：这告诉Webpack我们应用程序的入口点是什么。如果您不认识这些文件，不要担心；我们将在下一步中创建它们。您需要理解的是，我们将我们的应用程序捆绑成三个不同的文件：我们的polyfills文件，其中将包括所有与polyfills相关的模块，我们的vendor文件，其中将包括所有第三方模块，如Angular核心模块，以及我们的应用程序文件，其中将包括我们的Angular应用程序文件。'
- en: '`devtool`: This tells Webpack which development tool to use; in this case,
    we want Webpack to create map files for transpiled application files.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`devtool`：这告诉Webpack要使用哪种开发工具；在这种情况下，我们希望Webpack为转译后的应用程序文件创建映射文件。'
- en: '`resolve`: This tells Webpack what kind of module extensions to resolve; in
    this case, it will include module imports without extensions, TypeScript, and
    JavaScript files.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resolve`：这告诉Webpack要解析什么样的模块扩展名；在这种情况下，它将包括没有扩展名的模块导入，TypeScript和JavaScript文件。'
- en: '`output`: This sets the way Webpack saves the output files. Here, we tell it
    we want to create the bundled files in a `public/build` folder with a JavaScript
    file extension.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output`：这设置了Webpack保存输出文件的方式。在这里，我们告诉它我们要在`public/build`文件夹中创建捆绑文件，并使用JavaScript文件扩展名。'
- en: '`module`: This is a list of modules Webpack will use. In our case, we tell
    Webpack to load all TypeScript files using the TypeScript loader we previously
    installed.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module`：这是Webpack将使用的模块列表。在我们的情况下，我们告诉Webpack使用我们之前安装的TypeScript加载器加载所有TypeScript文件。'
- en: '`optimize`: This sets the way Webpack optimizes module bundling. In our case,
    we want Webpack to bundle every module once. This means that if Webpack finds
    a common module import in the Bootstrap file and the Vendor file, it will bundle
    it only once in the vendor file.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`optimize`：这设置了Webpack优化模块捆绑的方式。在我们的情况下，我们希望Webpack只捆绑每个模块一次。这意味着如果Webpack在Bootstrap文件和Vendor文件中找到一个常见的模块导入，它将只在vendor文件中捆绑一次。'
- en: 'Note that these properties are project-oriented, which means that it will change
    according to your requirements. We''ll continue by creating our missing files.
    First, go to your `public` folder and create a file named `polyfills.ts`. In this
    file, paste the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些属性是面向项目的，这意味着它将根据您的要求进行更改。我们将继续创建我们缺少的文件。首先，转到您的`public`文件夹并创建一个名为`polyfills.ts`的文件。在这个文件中，粘贴以下代码：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see, we included all of our polyfills libraries. Next, we''ll create
    a file named `vendor.ts`; in this file, paste the following code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们包含了所有的polyfills库。接下来，我们将创建一个名为`vendor.ts`的文件；在这个文件中，粘贴以下代码：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, we included all of our core modules of the Angular and RXJS
    libraries. To finish up, we''ll copy our previous `bootstrap.ts` file to the `public`
    folder. To do that, go to your `public` folder and create a file named `bootstrap.ts`.
    In this file, paste the following code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们包含了Angular和RXJS库的所有核心模块。最后，我们将把之前的`bootstrap.ts`文件复制到`public`文件夹中。要做到这一点，转到您的`public`文件夹并创建一个名为`bootstrap.ts`的文件。在这个文件中，粘贴以下代码：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see, this is our application bootstrap file from previous chapters.
    All we have left to do is change our main application page. To do that, go to
    the `app/views/index.ejs` file and make the following changes:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这是我们之前章节的应用程序引导文件。我们唯一剩下的事情就是更改我们的主应用程序页面。要做到这一点，转到`app/views/index.ejs`文件并进行以下更改：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As you can see, we just replaced our older scripts with the new bundled script
    files. Once you are finished with these changes, your Webpack configuration should
    be ready for use! Use your command-line tool and navigate to the MEAN application''s
    root folder. Then, run your application by typing the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们刚刚用新的捆绑脚本文件替换了旧的脚本。完成这些更改后，您的Webpack配置应该已经准备好使用了！使用您的命令行工具并导航到MEAN应用程序的根文件夹。然后，通过输入以下命令来运行您的应用程序：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once your application is running and Webpack finishes bundling your code, navigate
    to `http://localhost:3000/` and test your application. This is, of course, just
    a basic setup, so it is highly recommended that you continue learning about Webpack's
    other features.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的应用程序正在运行并且Webpack完成了代码的捆绑，导航到`http://localhost:3000/`并测试您的应用程序。当然，这只是一个基本的设置，因此强烈建议您继续学习Webpack的其他功能。
- en: Introducing ESLint
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入ESLint
- en: In software development, linting is the identification of suspicious code usage
    using dedicated tools. In a MEAN application, linting can help you avoid common
    mistakes and coding errors in your daily development cycles; moreover, it will
    allow you to set a unified code styling across your team. The most commonly used
    linting tool in our ecosystem is called ESLint. ESLint is a pluggable linting
    utility originally created by Nicholas C. Zakas in 2013\. It allows us to lint
    our JavaScript code using a set of rules and preset configurations. We'll begin
    by installing the ESLint package in our application.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，linting是使用专用工具识别可疑代码使用的过程。在MEAN应用程序中，linting可以帮助您避免日常开发周期中的常见错误和编码错误；此外，它还可以让您在团队中设置统一的代码样式。在我们的生态系统中最常用的linting工具叫做ESLint。ESLint是一个可插拔的linting实用程序，最初由Nicholas
    C. Zakas于2013年创建。它允许我们使用一组规则和预设配置来lint我们的JavaScript代码。我们将从在我们的应用程序中安装ESLint包开始。
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is highly recommended that you learn more about ESLint by visiting the official
    project page at [http://eslint.org/](http://eslint.org/).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议您访问官方项目页面[http://eslint.org/](http://eslint.org/)，了解更多关于ESLint的信息。
- en: Installing ESLint
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装ESLint
- en: 'Before we can start configuring our ESLint execution, we will need to install
    the ESLint package using `npm`. To do that, change your `package.json` file as
    follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始配置ESLint执行之前，我们需要使用`npm`安装ESLint包。为此，请按照以下更改您的`package.json`文件：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see, you added, ESLint package to your `devDependencies` property.
    You also added a `lint` script to run ESLint and a lint JavaScript file placed
    in your `app` and `config` folders. To install your new dependencies, go to your
    application''s root folder and issue the following command in your command-line
    tool:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，您已经将ESLint包添加到了`devDependencies`属性中。您还添加了一个`lint`脚本来运行ESLint，并在您的`app`和`config`文件夹中放置了一个lint
    JavaScript文件。要安装新的依赖项，请转到应用程序的根文件夹，并在命令行工具中输入以下命令：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will install the specified version of the ESLint package in your project's
    `node_modules` folder. Next, you'll learn how to configure ESLint.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的项目的`node_modules`文件夹中安装指定版本的ESLint包。接下来，您将学习如何配置ESLint。
- en: Configuring ESLint
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置ESLint
- en: 'In order to control ESLint''s execution, you will need to configure it using
    a special configuration file placed in the root folder of your application. When
    executed, ESLint will automatically look for the default configuration file named
    `.eslintrc` in the application''s root folder. Create a new file in your application''s
    root folder and name it `.eslintrc`. In your new file, paste the following JSON
    object:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了控制ESLint的执行，您需要使用放置在应用程序根文件夹中的特殊配置文件进行配置。当执行时，ESLint会自动查找应用程序根文件夹中名为`.eslintrc`的默认配置文件。在应用程序的根文件夹中创建一个新文件，并将其命名为`.eslintrc`。在新文件中，粘贴以下JSON对象：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As you can see, this simple configuration basically tells ESLint that our code
    is written in ECMAScript 6\. However, ESLint can do so much more; for instance,
    you can tell ESLint to validate our code indentation by changing the configuration
    as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这个简单的配置基本上告诉ESLint我们的代码是用ECMAScript 6编写的。然而，ESLint还可以做更多的事情；例如，您可以通过更改配置告诉ESLint验证我们的代码缩进，如下所示：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This will tell ESLint to expect a two space indentation in our code files.
    Moreover, usually, you''ll extend an existing configuration file using the `extend`
    property, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将告诉ESLint在我们的代码文件中期望两个空格的缩进。此外，通常情况下，您将使用`extend`属性来扩展现有的配置文件，如下所示：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will extend ESLint''s recommended rule set. However, these are just simple
    examples, so it is recommended that you continue learning about ESLint in order
    to find the best configuration for your project. To run your lint task, go to
    your command-line tool and execute the following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将扩展ESLint的推荐规则集。然而，这些只是简单的例子，因此建议您继续学习ESLint，以找到最佳的项目配置。要运行lint任务，请转到命令行工具并执行以下命令：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The linting results should be reported in your command-line tool and will be
    similar to what is shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: linting结果应该在您的命令行工具中报告，并且与以下截图中显示的内容类似：
- en: '![Configuring ESLint](img/B05071_11_01.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![配置ESLint](img/B05071_11_01.jpg)'
- en: ESLint results
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint结果
- en: ESLint is a powerful tool. However, in this form, you would need to run the
    `lint` task manually. A better approach would be to automatically run the lint
    task whenever you modify a file.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint是一个强大的工具。然而，在这种形式下，您需要手动运行`lint`任务。更好的方法是在修改文件时自动运行lint任务。
- en: Using Nodemon
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nodemon
- en: 'Running your application using the Node''s command-line tool may not seem like
    a redundant task. However, when continuously developing your application, you
    will soon notice that you stop and start your application server quite often.
    To help with this task, there is a common tool called Nodemon. Nodemon is a Node.js
    command-line tool that functions as a wrapper to the simple node command-line
    tool, but watches for changes in your application files. When Nodemon detects
    file changes, it automatically restarts the node server to update the application.
    To use Nodemon, you will need to modify your project''s `package.json` file, as
    follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Node的命令行工具运行应用程序可能看起来不是一个多余的任务。然而，当不断开发您的应用程序时，您很快会注意到您经常停止和启动应用程序服务器。为了帮助完成这项任务，有一个常用的工具叫做Nodemon。Nodemon是一个Node.js命令行工具，作为简单的node命令行工具的包装器，但它会监视您的应用程序文件的更改。当Nodemon检测到文件更改时，它会自动重新启动node服务器以更新应用程序。要使用Nodemon，您需要修改项目的`package.json`文件，如下所示：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As you can see, we added the Nodemon package to our development dependencies.
    We also added two new scripts and changed our `start` script. The first script
    we added is `app:dev`, which runs the `lint` and `app` scripts. Next, we created
    a `nodemon` script, which watches all of our server JavaScript files and runs
    the `app:dev` script whenever a file is modified. In our `start` script, we just
    execute our Webpack and Nodemon scripts concurrently. This is it! All you have
    left to do is install the Nodemon package by going to your application root folder
    and issuing the following command in your command-line tool:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们将Nodemon包添加到我们的开发依赖项中。我们还添加了两个新的脚本，并更改了我们的`start`脚本。我们添加的第一个脚本是`app:dev`，它运行`lint`和`app`脚本。接下来，我们创建了一个`nodemon`脚本，它监视我们所有的服务器JavaScript文件，并在文件被修改时运行`app:dev`脚本。在我们的`start`脚本中，我们同时执行我们的Webpack和Nodemon脚本。就是这样！你所要做的就是在你的应用程序根文件夹中安装Nodemon包，并在命令行工具中发出以下命令：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, run your application using the regular `start` command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用常规的`start`命令运行你的应用程序：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will start your application with the new setup. Try changing your Angular
    or Express application files; note that your application restarts if you change
    a server file and the way Webpack automatically compiles your code when you change
    an Angular file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用新的设置启动你的应用程序。尝试更改你的Angular或Express应用程序文件；注意，如果你更改了服务器文件，你的应用程序将重新启动，并且当你更改Angular文件时，Webpack会自动编译你的代码的方式。
- en: Debugging Express with V8 inspector
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用V8检查器调试Express
- en: 'Debugging the Express part of your MEAN application can be a complicated task.
    Fortunately, there is a great tool that solves this issue called V8 inspector.
    V8 Inspector is a debugging tool that uses the Blink (a WebKit Fork) Developer
    Tools. In fact, developers using Google''s Chrome browser are already familiar
    with it, in the form of the Chrome Developer Tools interface. The V8 inspector
    supports some pretty powerful debugging features:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用V8检查器调试Express部分的MEAN应用程序可能是一个复杂的任务。幸运的是，有一个名为V8检查器的解决这个问题的好工具。V8检查器是一个使用Blink（一个WebKit分支）开发者工具的调试工具。事实上，使用Google的Chrome浏览器的开发人员已经熟悉它，以Chrome开发者工具界面的形式。V8检查器支持一些非常强大的调试功能：
- en: Source code file navigation
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码文件导航
- en: Breakpoint manipulation
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断点操作
- en: Stepping over, stepping in, stepping out, and resuming execution
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳过、步入、步出和恢复执行
- en: Variable and property inspection
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量和属性检查
- en: Live code editing
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时代码编辑
- en: 'To debug your application, you will need to access the V8 inspector interface
    using a compatible web browser. You will then be able to use it to debug your
    application code using the Chrome Developer Tools interface. To do that, all you
    have to do is add a debug script to your `package.json` file, as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要调试你的应用程序，你需要使用兼容的网络浏览器访问V8检查器界面。然后你就可以使用它来调试你的应用程序代码，使用Chrome开发者工具界面。要做到这一点，你只需要在你的`package.json`文件中添加一个调试脚本，如下所示：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In your new script, all you did was run your application with two command-line
    flags. The `inspect` flag allows the attachment of the Chrome Developer Tools
    to our Node.js instance, and the `debug-brk` flag prevents Node.js from running
    your code before you attach the debugger. Next, we'll run our application using
    the new script and see how we can debug it.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的新脚本中，你所做的就是用两个命令行标志运行你的应用程序。`inspect`标志允许将Chrome开发者工具附加到我们的Node.js实例，`debug-brk`标志阻止Node.js在附加调试器之前运行你的代码。接下来，我们将使用新脚本运行我们的应用程序，并看看我们如何调试它。
- en: Debugging your application
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试你的应用程序
- en: 'To use your new `debug` script, navigate to your application''s root folder
    and issue the following command in your command-line tool:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用你的新的`debug`脚本，导航到你的应用程序根文件夹，并在命令行工具中发出以下命令：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will run your application in a debug mode and wait for you to attach the
    Chrome Developer Tools debugger. The output in your command-line tool should be
    similar to what is shown in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将以调试模式运行你的应用程序，并等待你附加Chrome开发者工具调试器。你的命令行工具中的输出应该类似于以下截图所示的内容：
- en: '![Debugging your application](img/B05071_11_02.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![调试你的应用程序](img/B05071_11_02.jpg)'
- en: Running in Debug mode
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以调试模式运行
- en: 'As you can see, the `debug` script invites you to start debugging the application
    by visiting `chrome-devtools://…` using a compatible browser. Open this URL in
    Google Chrome, and you should see an interface similar to what is shown in the
    following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`debug`脚本邀请你通过使用兼容的浏览器访问`chrome-devtools://…`来开始调试应用程序。在Google Chrome中打开这个URL，你应该会看到一个类似以下截图所示的界面：
- en: '![Debugging your application](img/B05071_11_03.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![调试你的应用程序](img/B05071_11_03.jpg)'
- en: Debugging with V8 inspector
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用V8检查器调试
- en: As you can see, you'll get a list of your project files in the left-hand side
    panel, a file content viewer in the middle panel, and a debug dashboard in the
    right-hand side panel. This means that your `debug` script is running properly
    and is identifying your Express project. You can start debugging your project
    by setting some breakpoints and testing your application's behavior.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，你会在左侧面板中得到你项目的文件列表，在中间面板中得到文件内容查看器，在右侧面板中得到调试仪表板。这意味着你的`debug`脚本正在正确运行，并且正在识别你的Express项目。你可以通过设置一些断点并测试你的应用程序行为来开始调试你的项目。
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Node inspection will only work on browsers that use the Blink engine, such as
    Google Chrome or Opera. Furthermore, this feature is still experimental. So, it
    is recommended that you stay updated on the official Node.js documentation.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 节点检查只能在使用Blink引擎的浏览器上工作，例如Google Chrome或Opera。此外，这个功能仍然是实验性的。因此，建议您随时关注官方的Node.js文档。
- en: Debugging Angular applications with Angular Augury
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular Augury调试Angular应用程序
- en: Debugging most of the Angular part of your MEAN application is usually done
    in the browser. However, debugging the internal operations of Angular can be a
    bit trickier. For this purpose, a joint team from Google and Rangle.io created
    a Chrome extension called Angular Augury. Angular Augury extends the Chrome Developer
    Tools with a new tab where you can debug different aspects of your Angular application.
    Installing Angular Augury is quite straightforward. All you have to do is visit
    the Chrome web store at [https://chrome.google.com/webstore/detail/augury/elgalmkoelokbchhkhacckoklkejnhcd](https://chrome.google.com/webstore/detail/augury/elgalmkoelokbchhkhacckoklkejnhcd)
    and install the Chrome extension.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 调试MEAN应用程序的大部分Angular部分通常在浏览器中完成。但是，调试Angular的内部操作可能有点棘手。出于这个目的，来自Google和Rangle.io的联合团队创建了一个名为Angular
    Augury的Chrome扩展。Angular Augury通过一个新的选项卡扩展了Chrome开发者工具，您可以在其中调试您的Angular应用程序的不同方面。安装Angular
    Augury非常简单。您只需访问Chrome网络商店[https://chrome.google.com/webstore/detail/augury/elgalmkoelokbchhkhacckoklkejnhcd](https://chrome.google.com/webstore/detail/augury/elgalmkoelokbchhkhacckoklkejnhcd)并安装Chrome扩展即可。
- en: Note
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Angular Augury will work only on the Google Chrome browser.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Augury只能在Google Chrome浏览器上运行。
- en: Using Angular Augury
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Angular Augury
- en: 'Once you''re done installing Angular Augury, use Chrome to navigate to your
    application URL. Then, open the Chrome Developer Tools panel, and you should see
    an **Angular** tab. Click on it and a panel similar to what is shown in the following
    screenshot should open:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完Angular Augury后，使用Chrome导航到您的应用程序URL。然后，打开Chrome开发者工具面板，您应该会看到一个**Angular**选项卡。单击它，应该会打开一个与以下截图中显示的类似的面板：
- en: '![Using Angular Augury](img/B05071_11_04.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![使用Angular Augury](img/B05071_11_04.jpg)'
- en: Angular Augury
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Augury
- en: The component tree
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件树
- en: 'Our Angular application is built as a tree of components. Augury allows us
    to inspect these components in a hierarchical way; in order to understand this
    better, take a look at the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Angular应用程序是以组件树的形式构建的。Augury允许我们以分层方式检查这些组件；为了更好地理解这一点，请看以下截图：
- en: '![The component tree](img/B05071_11_05.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![组件树](img/B05071_11_05.jpg)'
- en: Augury Component Tree
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Augury组件树
- en: 'As you can see, we''re inspecting the `ViewComponent` from our articles module.
    Since our components router is based on a simple hierarchy you can notice that
    we also see `AppComponent` and `ArticlesComponent`. On the right side you can
    notice we have two tabs: **Properties** and **Injector Graph**. In the **Properties**
    tab you''ll find the component state including the `article` and `user` properties
    and the component dependencies. The state is editable so it allows you to change
    your component state and see the impact on the rendering of `ViewComponent`. Furthermore,
    if we inspect `CreateComponent`, you''ll be able to see how Augury works with
    forms:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们正在检查文章模块中的`ViewComponent`。由于我们的组件路由基于简单的层次结构，您可以注意到我们还看到了`AppComponent`和`ArticlesComponent`。在右侧，您会注意到我们有两个选项卡：**属性**和**注入器图**。在**属性**选项卡中，您将找到组件状态，包括`article`和`user`属性以及组件依赖项。状态是可编辑的，因此它允许您更改组件状态并查看对`ViewComponent`的渲染的影响。此外，如果我们检查`CreateComponent`，您将能够看到Augury如何与表单一起工作：
- en: '![The component tree](img/B05071_11_06.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![组件树](img/B05071_11_06.jpg)'
- en: Augury with forms
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 带有表单的Augury
- en: 'As you can see, you can inspect your form state and understand its internal
    status. If you edit the value of your form inputs, you''ll also be able to see
    it''s state updated live on the right pane. If you click on the **Injector Graph**
    option, you''ll be able to see how Angular''s injector works and the current component''s
    injected providers:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，您可以检查您的表单状态并了解其内部状态。如果您编辑表单输入的值，您还将能够在右侧窗格上实时看到其状态更新。如果单击**注入器图**选项，您将能够看到Angular的注入器是如何工作以及当前组件的注入提供程序：
- en: '![The component tree](img/B05071_11_07.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![组件树](img/B05071_11_07.jpg)'
- en: Augury Injector Graph
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Augury注入器图
- en: Note how the `Router` and `ArticlesService` providers are injected to `CreateComponent`.
    In bigger applications, this will give you a better understanding of your project
    state.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Router`和`ArticlesService`提供程序被注入到`CreateComponent`中。在更大的应用程序中，这将让您更好地了解项目状态。
- en: Router tree
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由树
- en: 'To explore your Angular application routes, you can click on the **Router Tree**
    tab. Before you do that, you''ll need to inject the router provider inside your
    application component as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要探索您的Angular应用程序路由，您可以单击**路由树**选项卡。在这样做之前，您需要在应用程序组件中注入路由提供程序，如下所示：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Once you do that, you''ll be able to see a panel similar to what is shown in
    the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您这样做，您将能够看到与以下截图中显示的类似的面板：
- en: '![Router tree](img/B05071_11_08.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![路由树](img/B05071_11_08.jpg)'
- en: Augury Router tree
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Augury路由树
- en: As you can see, the **Router Tree** tab allows you to understand your application
    routing scheme in an easy-to-understand graph.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，**路由树**选项卡可以让您以易于理解的图形方式了解您的应用程序路由方案。
- en: Angular Augury is a simple yet powerful tool. Used right, it can save you a
    lot of time endlessly looking around and using console logging. Make sure you
    understand each tab and try to explore your application yourself.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Augury是一个简单而强大的工具。正确使用，它可以节省您大量时间，而不是不断地四处查找和使用控制台日志。确保您了解每个选项卡，并尝试自己探索应用程序。
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to automate your MEAN application's development
    and how to debug the Express and Angular parts of your application. We started
    with a brief explanation of NPM scripts. We then discussed Webpack and its powerful
    features, and you learned how to restart and lint your application automatically.
    Then, you learned how to use the V8 inspector tool to debug your Express code.
    Towards the end of this chapter, you learned about the Angular Augury Chrome extension.
    You went through Angular Augury's features and found out how to debug your Angular
    internals.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何自动化您的MEAN应用程序的开发，以及如何调试应用程序的Express和Angular部分。我们从简要解释NPM脚本开始。然后我们讨论了Webpack及其强大的功能，您学会了如何自动重新启动和lint您的应用程序。然后，您学会了如何使用V8检查器工具来调试您的Express代码。在本章的最后，您了解了Angular
    Augury Chrome扩展程序。您了解了Angular Augury的功能，并了解了如何调试您的Angular内部。
- en: Since it's the last chapter of this book, you should now know how to build,
    run, test, debug, and easily develop your MEAN application.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是本书的最后一章，您现在应该知道如何构建、运行、测试、调试和轻松开发您的MEAN应用程序。
- en: The next step is up to you.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤就看您了。
