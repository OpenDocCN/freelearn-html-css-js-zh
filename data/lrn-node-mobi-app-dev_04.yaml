- en: Chapter 4. Securing Your Backend
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。保护您的后端
- en: In the previous chapters, we built a rudimentary but functional backend layer
    by layer to provide basic services for a basic shop-like app. So far, we haven't
    been paying too much attention to security; everyone with access to the server
    can execute any command exposed by our API, even if it involves deleting the whole
    product database!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们逐层构建了一个基本的后端层，为一个类似商店的应用程序提供基本服务。到目前为止，我们还没有过多关注安全性；即使涉及删除整个产品数据库，只要能够访问服务器的人都可以执行我们的API公开的任何命令！
- en: In this chapter, we are going to remedy this by building a basic security mechanism
    in order to control user access. Specifically, we will deal with token-based authentication
    and show you how this makes it easy to limit access to your backend. By doing
    this, we will introduce the concept of roles and how they figure in our authentication
    scheme.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过构建基本的安全机制来控制用户访问权限。具体来说，我们将处理基于令牌的身份验证，并向您展示如何通过这种方式轻松限制对后端的访问。通过这样做，我们将介绍角色的概念以及它们在我们的身份验证方案中的作用。
- en: Understanding the outcomes of token-based authentication
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解基于令牌的身份验证的结果
- en: After reading this chapter, you will understand what token-based authentication
    is and how it can be used to limit the functionality of an API based on a user's
    status. You will further understand what roles are and how they affect authentication.
    Finally, you will know how to implement this authentication mechanism using only
    the technologies that we have introduced so far.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，您将了解令牌验证是什么，以及如何使用它来根据用户状态限制API的功能。您还将了解角色是什么，以及它们如何影响验证。最后，您将知道如何仅使用我们迄今介绍的技术来实现此身份验证机制。
- en: The theoretical bit
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理论部分
- en: Before we start writing code, let's have an overview of the concepts involved
    and how they relate both to security and one another.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写代码之前，让我们先概述涉及的概念以及它们如何与安全和彼此相关。
- en: A small token of trust
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信任的小令牌
- en: Security has always been one of the most pressing concerns in all areas of software
    development. It is almost never enough to have a system that is fast, scalable,
    and robust if it doesn't have an adequate mechanism to protect it from malicious
    users.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 安全一直是软件开发各个领域中最紧迫的关注点之一。如果系统没有足够的机制来保护免受恶意用户的侵害，即使它快速、可扩展和稳健，也几乎永远不够。
- en: In the context of publicly accessible servers such as ours, security is all
    the more pressing since our API will be exposed to an entire planet of potentially
    nasty people. Somehow, we need to make sure that the people who request services
    from it are who they say they are and are allowed to do what they want to do.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在像我们这样的公开可访问的服务器环境中，安全性更加紧迫，因为我们的API将暴露给整个可能有恶意的人的地球。不知何故，我们需要确保从中请求服务的人是他们所说的那个人，并且被允许做他们想做的事情。
- en: A simple yet powerful technique that has emerged to accomplish this is **token-based
    authentication**. In this, each legitimate user is given an access token (usually
    a hash), which uniquely identifies the user of a server. The user needs to submit
    the token along with every request that requires authentication, and the server
    in turn validates the token in order to determine whether access should be granted.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单而强大的技术已经出现，用于实现这一点，即**基于令牌的身份验证**。在这种情况下，每个合法用户都会被分配一个访问令牌（通常是哈希），用于唯一标识服务器的用户。用户需要在需要身份验证的每个请求中提交令牌，服务器反过来验证令牌以确定是否应该授予访问权限。
- en: In order to obtain an access token, the user will first need to initially authenticate
    themselves to the server in some way. Commonly, this is done via a normal username-password
    check. If a correctly matching username and password is provided, the server responds
    by generating an access token, certifying that the user is authenticated to access
    the server.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得访问令牌，用户首先需要以某种方式最初向服务器进行身份验证。通常，这是通过正常的用户名密码检查完成的。如果提供了正确匹配的用户名和密码，服务器会生成一个访问令牌，证明用户已经经过身份验证可以访问服务器。
- en: Playing your role
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扮演你的角色
- en: In most software systems, not all users are created equal. Some, such as the
    administrators, are intended to have broader access to the system than the common
    users. There are several schemes that allow us to limit what functions within
    a system a user can access, but the most common one probably is to use roles.
    Put simply, a role is an attribute that grants its holder a certain level of access
    to the system. For example, a user with the role of **administrator** may have
    full access to read and write system records, whereas a user with the role of
    **reader** may just be able to read them. Further more, a user with the role of
    **BookWorm** may only have access to read data records classified as **books**,
    and so on.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数软件系统中，并非所有用户都是平等的。一些用户，比如管理员，意图上具有比普通用户更广泛的系统访问权限。有几种方案可以限制用户在系统中可以访问的功能，但最常见的可能是使用角色。简而言之，角色是授予持有者对系统一定级别访问权限的属性。例如，具有**管理员**角色的用户可能具有完全访问读取和写入系统记录的权限，而具有**读者**角色的用户可能只能读取它们。此外，具有**书虫**角色的用户可能只能访问被分类为**书籍**的数据记录，依此类推。
- en: Putting it all together
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: 'Now, it is probably apparent how roles and tokens figure in the authentication
    scheme that we want to create. The lifetime of an authenticated request will proceed
    in the following way:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，角色和令牌在我们想要创建的身份验证方案中的作用可能是显而易见的。经过身份验证的请求的生命周期将按以下方式进行：
- en: The server receives an API request.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器接收API请求。
- en: The server checks whether a token is provided.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器检查是否提供了令牌。
- en: If it is not provided, it returns a *403* (that is, **forbidden**).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有提供，它会返回*403*（即**禁止**）。
- en: The server checks whether the token is in the database.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器检查令牌是否在数据库中。
- en: If it is not in the database, it returns a *403*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库中没有提供，它会返回*403*。
- en: The server retrieves the user's role.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器检索用户的角色。
- en: The server verifies that the user's role matches the requirements of the API
    call.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器验证用户的角色是否符合 API 调用的要求。
- en: If it does not match them, it returns a *403*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不匹配，它会返回 *403*。
- en: The server handles the request and returns an appropriate response to the user.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器处理请求并向用户返回适当的响应。
- en: Implementation
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施
- en: We are now ready to write a functional implementation of the authentication
    system.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备编写认证系统的功能实现。
- en: 'The first thing that we need to do is expand our database to accommodate the
    necessary documents. In particular, we need to add the following three new collections:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是扩展我们的数据库以容纳必要的文档。特别是，我们需要添加以下三个新集合：
- en: '**Users**: These are the users who can access the server via the API'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户**：这些是可以通过 API 访问服务器的用户'
- en: '**Roles**: These are the roles that can be assigned to users'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角色**：这些是可以分配给用户的角色'
- en: '**Access Tokens**: These are the access tokens for authenticated users'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问令牌**：这些是经过认证的用户的访问令牌'
- en: We will also need to add some rudimentary logic to our API to register users
    and enable them to log in.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要向我们的 API 添加一些基本逻辑来注册用户并使其能够登录。
- en: Adding the new collections
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新的集合
- en: 'Open your MongoDB shell and execute the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的 MongoDB shell 并执行以下操作：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will create the necessary collections that we need to store users and
    their roles and tokens. The new documents will have the following structure:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建我们需要存储用户、角色和令牌的必要集合。新文档将具有以下结构：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For now, we will not add any users or tokens (this comes later when we extend
    the API), but we will add the roles that we are going to use. To keep it simple,
    we will just have two of them:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们不会添加任何用户或令牌（这将在我们扩展 API 时进行），但我们将添加我们将要使用的角色。为了简单起见，我们只会有两个角色：
- en: '**Producer**: This is the user who sells goods in the shop and who can add
    additional products to it.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产者**：这是在商店销售商品并可以向其添加额外产品的用户。'
- en: '**Customer**: This is the user who buys things from the shop and who can create
    orders and retrieve information about products as well as orders that were created
    by the current user.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**顾客**：这是从商店购买物品并可以创建订单以及检索有关产品和当前用户创建的订单的信息的用户。'
- en: It is understood that default `ObjectID` generated by MongoDB will be included
    in the preceding code. For the access token entity, we simply use `ObjectID` as
    the hash of the token, since this value is guaranteed to be unique with respect
    to the database that we are working with.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 可以理解的是，由 MongoDB 生成的默认 `ObjectID` 将包含在前面的代码中。对于访问令牌实体，我们只需使用 `ObjectID` 作为令牌的哈希值，因为这个值在我们正在使用的数据库中是唯一的。
- en: Adding an authentication module
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加认证模块
- en: To maintain modularity and simplify the authentication process, we will create
    a separate module to validate the access privileges of a given user.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持模块化并简化认证过程，我们将创建一个单独的模块来验证给定用户的访问权限。
- en: 'In your project directory, add the following file named `authentication.js`.
    Open the file and insert the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的项目目录中，添加名为 `authentication.js` 的文件。打开文件并插入以下内容：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, import the module into your entry module, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将模块导入到你的入口模块中，如下所示：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating functions to register and help users log in
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建注册和帮助用户登录的函数
- en: We will need to add endpoints to our API for the purpose of both creating and
    authenticating users who wish to interact with it. In light of what we have done
    thus far, this is easy to do.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为我们的 API 添加端点，用于创建和认证希望与其交互的用户。鉴于我们迄今为止所做的工作，这很容易实现。
- en: Registering users
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注册用户
- en: 'We begin by adding a URL endpoint for adding users. This will be very familiar
    in terms of what we already did when creating the REST API in the previous chapter;
    all that we are going to do is create a `POST` method for the `user` collection.
    First, add the following utility method:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要添加一个用于添加用户的 URL 端点。这在添加 REST API 时将会非常熟悉；我们要做的就是为 `user` 集合创建一个 `POST`
    方法。首先，添加以下实用方法：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, modify your router to include the following `case` statement:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，修改你的路由器以包括以下 `case` 语句：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is all we need to register users. Registrations can now be handled through
    a simple `POST` request to the `/api/users/register` endpoint.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们注册用户所需要的全部。现在可以通过对 `/api/users/register` 端点进行简单的 `POST` 请求来处理注册。
- en: Enabling users to log in
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用户能够登录
- en: 'To enable users to log in via our API, we will need to accomplish the following
    three things:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用户能够通过我们的 API 登录，我们需要完成以下三件事：
- en: Make sure that the user exists
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保用户存在
- en: Make sure that a matching password was provided by the the user
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保用户提供了匹配的密码
- en: Return an access token, which can be used by the user for future access
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回一个访问令牌，用户可以在将来使用
- en: Luckily, all but the first of the preceding list are taken care of by the authentication
    module that we designed earlier. All that we need to do is plug it into our router.
    To do this, we will also need to design a new endpoint for the login part.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，前面列表中除了第一个之外的所有内容都已经被我们之前设计的认证模块处理了。我们需要做的就是将其插入到我们的路由器中。为此，我们还需要为登录部分设计一个新的端点。
- en: 'Add the following `case` to your router configuration:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的路由器配置中添加以下 `case`：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding code, we added the following simple method in order to handle
    the looking up of a user by e-mail:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们添加了以下简单的方法来处理通过电子邮件查找用户：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That's all we need as far as user management is concerned for now. Now, let's
    add the finishing touch and set up the actual security for our endpoints.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 就目前而言，这就是我们所需要的关于用户管理的全部。现在，让我们添加最后的修饰，并为我们的端点设置实际的安全性。
- en: Extending our API
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展我们的 API
- en: 'We are now ready to modify our API in order to add the authentication features
    that we have developed so far. First, let''s determine exactly how the access
    policies should work:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备修改我们的 API，以添加我们迄今为止开发的认证功能。首先，让我们确定访问策略应该如何工作：
- en: '**Customers** should be able to create (`insert`) orders and retrieve (`get`)
    information about products and nothing else'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户**应能够创建（`insert`）订单并检索（`get`）有关产品的信息，除此之外什么都不能做。'
- en: '**Producers** should be able to retrieve information about orders and products
    and also insert new products'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产者**应能够检索有关订单和产品的信息，并插入新产品'
- en: 'We will accomplish this by placing a simple token and role check on each endpoint.
    The check will simply verify the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过在每个端点上放置一个简单的令牌和角色检查来实现这一点。检查将简单验证以下内容：
- en: The token is legitimate
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 令牌是合法的
- en: The user associated with the token has the role that is necessary to perform
    the requested action
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与令牌关联的用户具有执行所请求操作所必需的角色
- en: 'To start, we will add a new function to the `authentication` module, which
    will be responsible for checking whether a given token is associated with a given
    role:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在`authentication`模块中添加一个新函数，该函数将负责检查给定的令牌是否与给定的角色相关联：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This method is all that we need to verify the roles for the token provided (implicitly
    checking whether the user who owns the token has the specified role).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法是我们需要验证提供的令牌的角色（隐式检查拥有令牌的用户是否具有指定的角色）。
- en: 'Next, we simply need to make use of this in our router. For example, let''s
    secure the `POST` endpoint for our product API. Make it look like the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们只需要在我们的路由器中使用它。例如，让我们保护我们的产品API的`POST`端点。使其看起来像下面这样：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: That's it! Implementation for the other endpoints is the same, and we will provide
    you with the full example source code for them.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！其他端点的实现方式相同，我们将为您提供它们的完整示例源代码。
- en: Though I have covered some basics here, security remains one of the largest
    and most diverse areas of contemporary software development. We believe that token-based
    authentication will address a majority of the cases that you are bound to come
    across in your career. I would like to offer some suggestions for future study
    as well as complements to the topics that you have studied here.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我在这里涵盖了一些基础知识，但安全仍然是当代软件开发中最大和最多样化的领域之一。我们相信基于令牌的身份验证将解决您在职业生涯中遇到的大多数情况。我还想为未来的学习提供一些建议，以及对您在这里学习的主题的补充。
- en: OAuth
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OAuth
- en: One of the most common authentication standards offered by modern web apps is
    **OAuth** (**Open Authentication Standard**), its second version (**OAuth2**)
    in particular. OAuth makes heavy use of access tokens and is used by (among others)
    Facebook, Google, Twitter, Reddit, and StackOverflow. Part of what makes the standard
    powerful is that it allows users to sign in with their Google or Facebook accounts,
    or even some other account that supports OAuth2, when using your services.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现代Web应用程序提供的最常见的身份验证标准之一是**OAuth**（**开放身份验证标准**），特别是它的第二版（**OAuth2**）。OAuth大量使用访问令牌，并且被（包括但不限于）Facebook、Google、Twitter、Reddit和StackOverflow使用。该标准的一部分强大之处在于它允许用户使用他们的Google或Facebook帐户，甚至是支持OAuth2的其他帐户，来使用您的服务进行登录。
- en: There are several mature NPM packages for using OAuth2 with Node.js. In particular,
    we recommend you to study the node-oauth2-server package ([https://github.com/thomseddon/node-oauth2-server](https://github.com/thomseddon/node-oauth2-server)).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个成熟的NPM包可用于在Node.js中使用OAuth2。特别是，我们建议您研究node-oauth2-server包（[https://github.com/thomseddon/node-oauth2-server](https://github.com/thomseddon/node-oauth2-server)）。
- en: Time-stamped access tokens
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间戳访问令牌
- en: To keep things simple and focus on the main concepts, we have allowed our access
    tokens in this example to be permanent. This is a very bad security practice since
    tokens, like passwords, can be compromised and used to grant unauthorized users
    access to the system.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化事情并专注于主要概念，我们在此示例中允许我们的访问令牌是永久的。这是一种非常糟糕的安全实践，因为令牌和密码一样，可能会被泄露并用于授予未经授权的用户对系统的访问权限。
- en: A common way to reduce this danger is to impose a **Time To Live** (**TTL**)
    value on each access token, indicating how long the token can be used until the
    user has to authenticate themselves again in order to get a new token.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 减少这种危险的常见方法是对每个访问令牌施加**生存时间**（**TTL**）值，指示令牌可以使用多长时间，直到用户必须再次进行身份验证以获取新令牌。
- en: Hashing passwords
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码哈希
- en: 'For the sake of simplicity, we allowed passwords in this example to be stored
    and retrieved as plain text. Needless to say, this is an abysmal security practice
    and nothing that you should ever do on a production server. Mature Node.js frameworks
    such as Express.js provide built-in mechanisms for hashing passwords, and you
    should always choose those when available. In the event that you need to hash
    passwords on your own, choose the `bcrypt` module in order to both hash and compare.
    Here''s an example of the same:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，我们允许在此示例中将密码存储和检索为纯文本。不用说，这是一种糟糕的安全实践，绝对不应该在生产服务器上执行。成熟的Node.js框架（如Express.js）提供了用于哈希密码的内置机制，当可用时，您应该始终选择这些机制。如果您需要自行对密码进行哈希处理，请选择`bcrypt`模块以进行哈希和比较。以下是相同的示例：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about token-based authentication and saw how it
    can work in practice to reinforce the backend. To put it into practice, we wrote
    a simple token-based access system to protect access to a set of backend data.
    Our server is now almost complete, but we must still deal with some other pressing
    concerns that modern apps need to face.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了基于令牌的身份验证，并看到了它如何在实践中加强后端。为了将其付诸实践，我们编写了一个简单的基于令牌的访问系统，以保护对一组后端数据的访问。我们的服务器现在几乎完成了，但我们仍然必须处理一些现代应用程序需要面对的其他紧迫问题。
- en: In the next chapter, we will explore how to address one of these most important
    concerns.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何解决其中一个最重要的问题。
