- en: Chapter 1. Learning Service Worker Basics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章. 学习服务工作者基础
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up service workers
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置服务工作者
- en: Setting up SSL for Windows
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Windows设置SSL
- en: Setting up SSL for Mac
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Mac设置SSL
- en: Setting up GitHub pages for SSL
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为GitHub页面设置SSL
- en: Registering a service worker
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册服务工作者
- en: Registering a service worker in detail
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细注册服务工作者
- en: Debugging
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试
- en: Providing stale version on error
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在出错时提供陈旧版本
- en: Creating mock responses
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模拟响应
- en: Handling request timeouts
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理请求超时
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: If you travel a bit, chances are you have probably found yourself stuck with
    **zero network connectivity** way too often. This is frustrating, especially if
    you just wanted to continue reading some news articles, blog posts, or you wanted
    to get some work done.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你稍微旅行一下，很可能会发现自己经常遇到**零网络连接**的情况。这很令人沮丧，尤其是当你只想继续阅读一些新闻文章，或者你想完成一些工作的时候。
- en: Unfortunately, with your browser, attempting to make requests for something
    from the network while being offline doesn't quite work out so well.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，使用你的浏览器，在离线状态下尝试从网络请求某些内容并不太顺利。
- en: '![Introduction](img/B05381_01_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![简介](img/B05381_01_01.jpg)'
- en: Even though on planes, the subway, in hotels, and at conferences, Wi-Fi may
    provide you with opportunities to restore your connection, in general you will
    have to wait for the network to return online in order to request the pages you
    want to view.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在飞机上、地铁里、酒店和会议上，Wi-Fi可能会为你提供恢复连接的机会，但总的来说，你将不得不等待网络重新上线，才能请求你想要查看的页面。
- en: Previous attempts to solve this issue include `AppCache`. It seems to work,
    to some extent, but the issue with `AppCache` is that it makes a lot of assumptions
    about user interactions. When those assumptions are not met, the application will
    fail to function as expected. It is also designed to work well with single page
    apps, not the traditional multi-page websites.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的先前尝试包括`AppCache`。它在某种程度上似乎有效，但`AppCache`的问题在于它对用户交互做了很多假设。当这些假设没有得到满足时，应用程序将无法按预期工作。它也被设计成与单页应用程序很好地协同工作，而不是传统的多页网站。
- en: Also, one of the most challenging problems with providing a seamless user experience
    with web apps is making them functional while offline. This is an important issue
    to resolve, given that most users today access web apps on the move. Enter service
    workers, a script running in the background of our browser.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在提供无缝用户体验的Web应用程序中，最具挑战性的问题之一是在离线状态下使它们功能正常。鉴于大多数用户现在都在移动中访问Web应用程序，这是一个需要解决的问题。服务工作者应运而生，这是一种在浏览器后台运行的脚本。
- en: Being able to use a web app, regardless of the connectivity, means users can
    operate uninterrupted when they are on board a plane, the subway, or in places
    where connectivity is limited or not available. This technology will help boost
    client productivity and will increase the availability of the application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 能够使用不受连接性影响的网络应用程序意味着用户在乘坐飞机、地铁或在网络有限或不可用的地方时可以不间断地操作。这项技术将有助于提高客户的生产力，并增加应用程序的可用性。
- en: With service workers, we are able to pre-cache some assets of a website. What
    we are referencing as assets are JavaScript files, CSS files, images, and some
    fonts. This will help us to speed up the loading time, instead of having to fetch
    information from the web servers every time we visit the same website. And of
    course, most importantly, those assets will be available for us when we are offline.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用服务工作者，我们能够预先缓存网站的一些资源。我们所说的资源包括JavaScript文件、CSS文件、图片和一些字体。这将帮助我们加快加载时间，而不是每次访问同一网站时都要从网络服务器获取信息。当然，最重要的是，这些资源在我们离线时也会可用。
- en: Service workers
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务工作者
- en: A service worker is a script that stands between your browser and the network,
    giving you, among other things, the ability to intercept network requests, and
    respond to them in different ways.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者是一个脚本，它位于你的浏览器和网络之间，为你提供拦截网络请求的能力，并以不同的方式响应它们。
- en: In order for your website or app to work, the browser fetches its assets, such
    as HTML pages, JavaScript, CSS, images, and fonts. In the past, managing these
    resources was mainly the browser's responsibility. If the browser couldn't access
    the network, you would probably see its **Unable to connect to the Internet**
    message. There were techniques you could use to encourage the local caching of
    assets, but the browser often had the last say.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使你的网站或应用能够工作，浏览器会获取其资产，例如 HTML 页面、JavaScript、CSS、图片和字体。在过去，管理这些资源主要是浏览器的责任。如果浏览器无法访问网络，你可能会看到其
    **无法连接到互联网** 的消息。你可以使用一些技术来鼓励资产的本地缓存，但浏览器通常有最后的决定权。
- en: One feature service worker uses heavily is promises. So it is important to have
    a good understanding of promises.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者大量使用的一个特性是承诺。因此，对承诺有一个良好的理解非常重要。
- en: Promises
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 承诺
- en: Promises are a great mechanism for running async operations with success dependent
    on one another. This is central to the way service workers work.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺是运行相互依赖的异步操作的一个很好的机制。这是服务工作者工作的核心。
- en: Promises can do a great many things, but for now, all you need to know is that
    if something returns a promise, you can attach `.then()` to the end and include
    callbacks inside it for success, failure, and so on, or you can insert `.catch()`,
    the end if you want to include a failure callback.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺可以做很多事情，但就目前而言，你需要知道的是，如果某个操作返回了一个承诺，你可以在其末尾附加 `.then()` 并在其中包含成功、失败等回调函数，或者如果你想包含一个失败回调，可以插入
    `.catch()`。
- en: 'Let''s compare a traditional synchronous callback structure to its asynchronous
    promise equivalent:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较传统的同步回调结构与其异步承诺等效结构：
- en: '`sync`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`sync`'
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`async`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`async`'
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the `sync` example, we have to wait for `Fn()` to run and return a `value`
    before any more of the code can execute. In the `async` example, `Fn()` returns
    a promise for the value, then the rest of the code can carry on running. When
    the promise resolves, the code inside `then` will be run asynchronously.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `sync` 示例中，我们必须等待 `Fn()` 运行并返回一个 `value`，然后才能执行更多代码。在 `async` 示例中，`Fn()` 返回一个包含值的承诺，然后其余代码可以继续运行。当承诺解决时，`then`
    中的代码将异步运行。
- en: Promise.resolve(value)
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Promise.resolve(value)`'
- en: This method returns an object of `Promise.then`, which is resolved with the
    value passed into the `resolve` method, as in `Promise.resolve(value)`. If this
    value has a `then` method, the returned method will follow it; otherwise, it will
    be fulfilled with the value.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回一个 `Promise.then` 对象，该对象通过传递给 `resolve` 方法的值得到解决，就像 `Promise.resolve(value)`
    一样。如果此值有一个 `then` 方法，则返回的方法将跟随它；否则，它将以该值得到满足。
- en: Promise.reject(reason)
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Promise.reject(reason)`'
- en: This method takes `reason` as an argument and returns a promise object that
    is rejected.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将 `reason` 作为参数，并返回一个被拒绝的承诺对象。
- en: Setting up service workers
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置服务工作者
- en: In order to get service workers running, we need to serve our code via **Hyper
    Text Transfer Protocol Secure** (**HTTPS**). Service workers are designed to run
    only across HTTPS for security reasons. Source code repositories such as GitHub
    support HTTPS, where you can host your files.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使服务工作者运行，我们需要通过 **超文本传输协议安全**（**HTTPS**）来提供我们的代码。出于安全原因，服务工作者仅设计在 HTTPS 上运行。源代码存储库，如
    GitHub，支持 HTTPS，你可以在那里托管你的文件。
- en: Getting ready
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you are using a newer version of a browser, the chances are that service
    workers are already enabled on it. But, if that is not the case, we will have
    to change few things in the browser settings. In the following section, we are
    going to cover how to enable service worker features in Chrome and Firefox.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用浏览器的新版本，那么服务工作者可能已经在其上启用。但是，如果情况不是这样，我们可能需要在浏览器设置中更改一些设置。在接下来的部分，我们将介绍如何在
    Chrome 和 Firefox 中启用服务工作者功能。
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Follow the steps below to enable service worker in Chrome and Firefox.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在 Chrome 和 Firefox 中启用服务工作者。
- en: Chrome
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Chrome
- en: 'To experiment in Chrome, you need to download Chrome Canary:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 Chrome 中进行实验，你需要下载 Chrome Canary：
- en: Go to [https://www.google.com/chrome/browser/canary.html](https://www.google.com/chrome/browser/canary.html)
    and download the latest version.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 [https://www.google.com/chrome/browser/canary.html](https://www.google.com/chrome/browser/canary.html)
    下载最新版本。
- en: Open Chrome Canary and type `chrome://flags`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Chrome Canary 并输入 `chrome://flags`。
- en: Turn on `experimental-web-platform-features`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `experimental-web-platform-features`。
- en: Restart the browser.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动浏览器。
- en: The following image shows experimental features on the Chrome browser, where
    you enable the **Experimental Web Platform** feature by clicking on the **Enable**
    link underneath:![Chrome](img/B05381_01_02.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下图像显示了 Chrome 浏览器中的实验性功能，您可以通过点击底下的**启用**链接来启用**实验性 Web 平台**功能：![Chrome](img/B05381_01_02.jpg)
- en: Firefox
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Firefox
- en: 'To experiment in Firefox, you need to download Firefox Nightly:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Firefox 中进行实验，您需要下载 Firefox Nightly：
- en: Go to [https://nightly.mozilla.org/](https://nightly.mozilla.org/) and download
    the latest version.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 [https://nightly.mozilla.org/](https://nightly.mozilla.org/) 并下载最新版本。
- en: Open Firefox Nightly, and go to `about:config`.![Firefox](img/B05381_01_03.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Firefox Nightly，并前往 `about:config`。![Firefox](img/B05381_01_03.jpg)
- en: Set `experimental-web-platform-features` to `true`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `experimental-web-platform-features` 设置为 `true`。
- en: Restart the browser.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动浏览器。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing, Opera offers partial support for service workers, including
    basic support, as well as installing and uninstalling events. Internet Explorer
    and Safari do not support service workers.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Opera 提供了对服务工作者部分的支持，包括基本支持以及安装和卸载事件。Internet Explorer 和 Safari 不支持服务工作者。
- en: Service workers are currently an experimental technology, meaning the syntax
    and the behavior are subject to change in future versions as the specification
    changes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者目前是一个实验性技术，这意味着其语法和行为可能会随着规范的变更在未来版本中发生变化。
- en: Setting up SSL for Windows
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上设置 SSL
- en: Service workers are designed to run only across HTTPS, so in order for us to
    test our code, we need our web pages to be delivered across HTTPS. In this recipe,
    we will cover getting your site setup with SSL support for Windows.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者仅设计在 HTTPS 上运行，因此为了测试我们的代码，我们需要确保我们的网页通过 HTTPS 传输。在这个菜谱中，我们将介绍如何在 Windows
    上为您的网站设置 SSL 支持。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you run Windows 7 or higher with **Internet Information
    Service** (**IIS**) enabled.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱假设您正在运行 Windows 7 或更高版本，并且已启用**互联网信息服务**（**IIS**）。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to enable SSL:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明启用 SSL：
- en: 'First, open IIS; you can do this by running the following command inside the
    command line:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开 IIS；您可以在命令行中运行以下命令来完成此操作：
- en: '[PRE2]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Select the server node in the tree view and double-click the **Server Certificates**
    feature in the list view, as shown:![How to do it...](img/B05381_01_04.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在树视图中选择服务器节点，然后在列表视图中双击**服务器证书**功能，如图所示：![如何操作...](img/B05381_01_04.jpg)
- en: Click on the **Create Self-Signed Certificate...** link in the **Actions** pane.![How
    to do it...](img/B05381_01_05.jpg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**操作**面板中点击**创建自签名证书...**链接。![如何操作...](img/B05381_01_05.jpg)
- en: Enter a meaningful name for the new certificate and click **OK**.![How to do
    it...](img/B05381_01_06.jpg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为新证书输入一个有意义的名称，然后点击**确定**。![如何操作...](img/B05381_01_06.jpg)
- en: This will generate a self-signed certificate, which is marked for **Server Authentication**
    use, meaning it uses a server-side certificate for authenticating the identity
    of the server and also for HTTP SSL encryption.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将生成一个自签名证书，该证书标记为**服务器身份验证**使用，这意味着它使用服务器端证书来验证服务器的身份，同时也用于 HTTP SSL 加密。
- en: In order to create an SSL binding, we have to select a site in the tree view
    and then, in the **Actions** pane, click **Bindings...**. This will bring up the
    bindings editor that manages bindings for your website, which include create,
    edit, and delete. Now, to add your new SSL binding to the site, click **Add...**.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了创建 SSL 绑定，我们必须在树视图中选择一个网站，然后在**操作**面板中点击**绑定...**。这将打开绑定编辑器，该编辑器管理您的网站的绑定，包括创建、编辑和删除。现在，要将您的新
    SSL 绑定添加到网站，请点击**添加...**。
- en: '![How to do it...](img/B05381_01_07.jpg)'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/B05381_01_07.jpg)'
- en: Port 80 is the default setting for a new binding for HTTP. We can select **https**
    in the **Type** drop-down list. Select the self-signed certificate we created
    in the previous section from the **SSL Certificate** drop-down list, and then
    click **OK**.![How to do it...](img/B05381_01_08.jpg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 端口 80 是 HTTP 的新绑定的默认设置。我们可以在**类型**下拉列表中选择**https**。从**SSL 证书**下拉列表中选择我们在上一节中创建的自签名证书，然后点击**确定**。![如何操作...](img/B05381_01_08.jpg)
- en: Now we have a new SSL binding on our site and all that remains is to make sure
    that it works.![How to do it...](img/B05381_01_09.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经在网站上设置了新的 SSL 绑定，剩下要做的就是确保它能够正常工作。![如何操作...](img/B05381_01_09.jpg)
- en: Click **Continue to this website** to proceed.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**继续访问此网站**以继续。
- en: Setting up SSL for Mac
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Mac 上设置 SSL
- en: As mentioned in the previous recipe, service workers are designed to run only
    across HTTPS. So, in order for us to test our code, we need our web pages to be
    delivered across HTTPS. In this recipe, we will cover getting your site set up
    with SSL support for Mac.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，服务工作者旨在仅在 HTTPS 上运行。因此，为了测试我们的代码，我们需要我们的网页通过 HTTPS 交付。在本食谱中，我们将介绍如何为 Mac
    网站设置 SSL 支持。
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you are running OS X 10.11, El Capitan, or higher.
    We are going to use a command-line utility called Vim for editing files, which
    already comes with Mac. Make sure not to use the number pad with Vim. Please be
    aware that this process is lengthy.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您正在运行 OS X 10.11, El Capitan 或更高版本。我们将使用名为 Vim 的命令行工具来编辑文件，该工具已随 Mac 一起提供。请确保不要在
    Vim 中使用数字键盘。请注意，此过程可能需要较长时间。
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to enable SSL:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明启用 SSL：
- en: 'First, we need to make sure Apache is running (you may get a prompt for a password):'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要确保 Apache 正在运行（您可能会收到密码提示）：
- en: '[PRE3]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The next step is to make some modifications to your `httpd.conf`. Because it''s
    a system file, you will need to use `sudo` again:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是修改您的 `httpd.conf` 文件。因为它是一个系统文件，您将需要再次使用 `sudo`：
- en: '[PRE4]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this file, you should uncomment both `socache_shmcb_module` and `ssl_module`,
    and also the include the `httpd-ssl.conf` file by removing the leading `#` symbol
    on those lines (you can use `/` to search on the Vim editor):'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此文件中，您应取消注释 `socache_shmcb_module` 和 `ssl_module`，并包含 `httpd-ssl.conf` 文件，通过删除这些行前面的
    `#` 符号（您可以在 Vim 编辑器中使用 `/` 进行搜索）：
- en: '[PRE5]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After saving the preceding file (press `:wq`), you should then open up your
    `/etc/apache2/extra/httpd-vhosts.conf` file:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在保存上述文件（按 `:wq`）后，您应打开您的 `/etc/apache2/extra/httpd-vhosts.conf` 文件：
- en: '[PRE6]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, you can create a VirtualHost entry for each virtual host that you wish
    to provide SSL support for:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，您可以为您希望提供 SSL 支持的每个虚拟主机创建一个 VirtualHost 条目：
- en: '[PRE7]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Make sure you copy your development folder to the `DocumentRoot` directory
    as you did earlier: `/Library/WebServer/Documents`.'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保您已将您的开发文件夹复制到之前所做的 `DocumentRoot` 目录：`/Library/WebServer/Documents`。
- en: To get this all to work with Apache, we need to create a self-signed certificate
    that we have already referenced in the `VirtualHost` definition.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了让所有这些与 Apache 一起工作，我们需要创建一个自签名证书，我们已经在 `VirtualHost` 定义中引用了它。
- en: 'Generate a key:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成一个密钥：
- en: '[PRE8]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Press *Enter* with no input after the following command:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下命令后按 *Enter* 键，不要输入任何内容：
- en: '[PRE9]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we have to generate a certificate signing request:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须生成一个证书签名请求：
- en: '[PRE10]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Using this **certificate signing request** (**CSR**), generate the certificate:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用此 **证书签名请求**（**CSR**）生成证书：
- en: '[PRE11]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then we have to convert the key to a no-phrase key:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们必须将密钥转换为无短语密钥：
- en: '[PRE12]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now change `server.crt` to `localhost.crt` as well as `server.key` to `localhost.key`:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将 `server.crt` 更改为 `localhost.crt`，以及将 `server.key` 更改为 `localhost.key`：
- en: '[PRE13]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'All you need to do now is double check your Apache configuration syntax:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您只需再次检查您的 Apache 配置语法：
- en: '[PRE14]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If all goes well, restart Apache:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，请重新启动 Apache：
- en: '[PRE15]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, simply point your browser at `https://localhost`. If you are prompted for
    a self-signed certificate in Chrome you can hit the **Advanced** option on that
    page and proceed, while in Firefox, you need to expand the **I understand the
    risks** options and add an exception. This is owing to the fact that the self-signed
    certificates are not signed by any authority, and for this reason the browsers
    add warnings about them. Although, since you are the one who created the certificate,
    you understand it's safe to accept it.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，只需将您的浏览器指向 `https://localhost`。如果您在 Chrome 中被提示输入自签名证书，您可以在该页面上点击 **高级**
    选项并继续，而在 Firefox 中，您需要展开 **我了解风险** 选项并添加一个例外。这是由于自签名证书未由任何权威机构签名，因此浏览器会添加有关它们的警告。尽管如此，由于您是创建证书的人，您知道接受它是安全的。
- en: To fix this, you need to add the certificate as a trusted root authority.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了解决这个问题，您需要将证书添加为受信任的根权威机构。
- en: Open the **Keychain Access** utility in OS X. Select the **System** option on
    the left. Click the lock icon in the upper-left corner to enable changes.![How
    to do it...](img/B05381_01_10.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 OS X 中打开 **密钥链访问** 工具。在左侧选择 **系统** 选项。点击左上角的锁形图标以启用更改。[如何操作...](img/B05381_01_10.jpg)
- en: Click the plus button at the bottom and select the `/etc/apache2/localhost.cer`
    file you copied to the desktop. In the dialog that comes up, click **Always Trust**.
    After the localhost gets added to the system keychain, double-click it to open
    it again. Expand the **Trust** section and for the first option, pick **Always
    Trust**.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击底部的加号按钮，选择您复制到桌面的 `/etc/apache2/localhost.cer` 文件。在出现的对话框中，点击 **始终信任**。在 localhost
    被添加到系统密钥链后，双击它再次打开。展开 **信任** 部分，对于第一个选项，选择 **始终信任**。
- en: At this point, everything has been configured. Quit Chrome and all other browsers
    (this is required), fire up the web server, and try to navigate to the local HTTPS
    site again.![How to do it...](img/B05381_01_11.jpg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，一切配置已完成。退出 Chrome 和所有其他浏览器（这是必需的），启动网络服务器，并再次尝试导航到本地 HTTPS 网站。![如何操作...](img/B05381_01_11.jpg)
- en: Tip
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Detailed steps to download the code bundle are mentioned in the Preface of this
    book. Please have a look.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 有关下载代码包的详细步骤在本书的序言中提及。请查看。
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Service-Worker-Development-Cookbook](https://github.com/PacktPublishing/Service-Worker-Development-Cookbook).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 该书的代码包也托管在 GitHub 上，网址为 [https://github.com/PacktPublishing/Service-Worker-Development-Cookbook](https://github.com/PacktPublishing/Service-Worker-Development-Cookbook)。我们还有其他来自我们丰富图书和视频目录的代码包，可在
    [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/) 找到。去看看吧！
- en: Setting up GitHub pages for SSL
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 GitHub 页面的 SSL
- en: Service workers are designed to run only across HTTPS. So, in order for us to
    test our code, we need our web pages to be delivered across HTTPS. GitHub pages
    are served across HTTPS and it's free to use. So let's get on with it.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者设计为仅在 HTTPS 上运行。因此，为了测试我们的代码，我们需要我们的网页通过 HTTPS 传输。GitHub 页面通过 HTTPS 提供，并且免费使用。所以让我们继续吧。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before registering for a GitHub account, please make sure you have a valid e-mail
    address.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在注册 GitHub 账户之前，请确保您有一个有效的电子邮件地址。
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up GitHub pages:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置 GitHub 页面：
- en: Head over to GitHub ([https://github.com](https://github.com)) and register
    yourself to obtain an account, if you don't have one already.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 GitHub ([https://github.com](https://github.com)) 并注册自己以获取账户，如果您还没有的话。
- en: 'Once you have done that, log in and create a new repository with the following
    format:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，登录并创建一个新的仓库，格式如下：
- en: '`username.github.io`, where `username` is your username.'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`username.github.io`，其中 `username` 是您的用户名。'
- en: '![How to do it...](img/B05381_01_12.jpg)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/B05381_01_12.jpg)'
- en: If the first part of the repository doesn't match your username exactly, it
    won't work.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果仓库的第一部分与您的用户名不完全匹配，则不会工作。
- en: Open your command-line window and clone your repository.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行窗口并克隆您的仓库。
- en: '[PRE16]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Change the directory to `username.github.io`:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 `username.github.io` 目录：
- en: '[PRE17]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a directory called `service-workers`:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `service-workers` 的目录：
- en: '[PRE18]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create an `index.html` file with some text:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含一些文本的 `index.html` 文件：
- en: '[PRE19]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now let''s commit and push our changes to the repository:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们提交并推送我们的更改到仓库：
- en: '[PRE20]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Open up a browser and go to `http://username.github.io/service-workers/`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并访问 `http://username.github.io/service-workers/`。
- en: Registering a service worker
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册服务工作者
- en: Registering your service worker is the first step to getting a service worker
    up and running. By registering a service worker, we tell our website to use the
    service worker. And this registering process happens outside of the service worker,
    in our case inside the `index.html` file. You can do that inside a JavaScript
    file and then reference it within the `index.html` file, but not in the service
    worker script file.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 注册服务工作者是启动服务工作者的第一步。通过注册服务工作者，我们告诉我们的网站使用服务工作者。并且这个过程是在服务工作者之外进行的，在我们的例子中是在
    `index.html` 文件中。您可以在 JavaScript 文件中这样做，然后在 `index.html` 文件中引用它，但不能在服务工作者脚本文件中。
- en: In this basic registration demo, we will test to see if our service worker gets
    registered successfully.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个基本的注册演示中，我们将测试我们的服务工作者是否成功注册。
- en: Getting ready
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started, with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe: *Setting up service workers*. Service workers
    only run across HTTPS. To find out how to set up a development environment to
    support this feature, refer to the following recipes: *Setting up GitHub pages
    for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for Mac*.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考第一个菜谱：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的开发生态，请参考以下菜谱：*为GitHub页面设置SSL*，*为Windows设置SSL*，和*为Mac设置SSL*。
- en: How to do it...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'First, we need to create the `index.html` file as follows:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建如下所示的 `index.html` 文件：
- en: '[PRE21]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Create an empty JavaScript file called `service-worker.js` in the same folder
    as the `index.html` file.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `index.html` 文件所在的同一文件夹中创建一个名为 `service-worker.js` 的空JavaScript文件。
- en: With your two files in place, you can navigate to the GitHub page, `https://username.github.io/service-workers/01/01/index.html`,
    and you will see the success message in your browser.![How to do it...](img/B05381_01_13.jpg)
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的两个文件就绪后，你可以导航到GitHub页面，`https://username.github.io/service-workers/01/01/index.html`，你将在浏览器中看到成功消息。![如何操作...](img/B05381_01_13.jpg)
- en: How it works...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We started off by making sure that the service worker feature is available with
    the line `if ('serviceWorker' in navigator)`. If that's not the case, then we
    set the message to unavailable. If your browser does not support service workers,
    you will get this message.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先确保服务工作者功能可用，通过这一行代码 `if ('serviceWorker' in navigator)`. 如果不是这种情况，我们将消息设置为不可用。如果你的浏览器不支持服务工作者，你将看到这条消息。
- en: 'Now we register the service worker with the empty JavaScript file and the scope.
    To ensure the registration is only applicable to the current directory and those
    underneath it, we override the default scope of `''/''` with `''./''` in the line
    `{ scope: ''./'' }` as the scope has to be of the same origin.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我们使用空JavaScript文件和作用域来注册服务工作者。为了确保注册只适用于当前目录及其下级目录，我们在 `{ scope: ''./'' }`
    这行代码中将默认作用域 `''/''` 覆盖为 `''./''`，因为作用域必须是同一来源。'
- en: 'If you decide that your script files should sit elsewhere, you will need a
    special header, such as `Service-Worker-allowed: true` or a specific content-type,
    such as `text/javascript`.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你决定你的脚本文件应该放在其他地方，你需要一个特殊的头信息，例如 `Service-Worker-allowed: true` 或特定的内容类型，例如
    `text/javascript`。'
- en: If the registration was successful, we print the message `successful` to the
    status message.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果注册成功，我们将打印消息 `successful` 到状态消息。
- en: Otherwise, we print the error message as the status. The reason for the error
    could be something going wrong during the registration, for example, the `service-worker.js`
    file may not available or it may contain a syntax error.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，我们将错误消息作为状态打印出来。错误的原因可能是注册过程中出现问题，例如，`service-worker.js` 文件可能不可用或其中可能包含语法错误。
- en: There's more...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We can unregister the service worker by calling the following `unregister()`
    function:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用以下 `unregister()` 函数来注销服务工作者：
- en: '[PRE22]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Known issues
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已知问题
- en: There are a couple of issues with the Chrome browser when working with service
    workers, which might confuse you.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当与服务工作者一起工作时，Chrome浏览器存在一些问题，可能会让你感到困惑。
- en: The ERR_FILE_EXISTS error message
  id: totrans-163
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`ERR_FILE_EXISTS` 错误消息'
- en: Reloading pages with service workers will always show an `ERR_FILE_EXISTS` error
    message, even if there's nothing wrong with your code.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用服务工作者重新加载页面将始终显示 `ERR_FILE_EXISTS` 错误消息，即使你的代码没有问题。
- en: This seems to occur when we are trying to access an already registered service
    worker.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎发生在我们尝试访问已注册的服务工作者时。
- en: '![The ERR_FILE_EXISTS error message](img/B05381_01_14.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![`ERR_FILE_EXISTS` 错误消息](img/B05381_01_14.jpg)'
- en: Stale console messages
  id: totrans-167
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 过期控制台消息
- en: Logging messages from the service worker scripts such as the `console.log` may
    not clear from the console, which seems like the events are being fired too many
    times on subsequent page loads.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 从服务工作者脚本中记录的消息，如 `console.log`，可能不会从控制台中清除，这看起来像是后续页面加载时事件被触发得太多次。
- en: Registering a service worker in detail
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 详细注册服务工作者
- en: Understanding events involved in service worker registration and state transitions
    will give you greater control over your application by using this feature. In
    this detailed registration demo, we will take a look at the state transitions
    of service worker registration.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 理解服务工作者注册和状态转换中涉及的事件，将使你能够通过使用此功能来更好地控制你的应用程序。在这个详细的注册演示中，我们将查看服务工作者注册的状态转换。
- en: Getting ready
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the previous recipe: *Setting up service workers*. Service workers
    only run across HTTPS. To find out how to set up a development environment to
    support this feature, refer to the following recipes: *Setting up GitHub pages
    for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for Mac*.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考之前的配方：*设置服务工作者*。服务工作者仅在 HTTPS
    上运行。要了解如何设置支持此功能的开发生态，请参考以下配方：*设置 GitHub 页面以支持 SSL*、*在 Windows 上设置 SSL* 和 *在 Mac
    上设置 SSL*。
- en: How to do it...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'First, we need to create an `index.html` file as follows:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个如下的 `index.html` 文件：
- en: '[PRE23]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a JavaScript file called `service-worker.js` in the same folder as the
    `index.html` file with the following code:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与 `index.html` 文件相同的文件夹中创建一个名为 `service-worker.js` 的 JavaScript 文件，并包含以下代码：
- en: '[PRE24]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: With your two files in place, you can navigate to the GitHub page, `https://username.github.io/service-workers/01/02/index.html`,
    and you will see the success message in your browser.![How to do it...](img/B05381_01_15.jpg)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的两个文件就绪后，你可以导航到 GitHub 页面，`https://username.github.io/service-workers/01/02/index.html`，你将在浏览器中看到成功消息。![如何操作...](img/B05381_01_15.jpg)
- en: How it works...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When the registration is successful, we inspect the state of the registration
    and print it to the browser. In this case it is installing, waiting, or active:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当注册成功时，我们检查注册状态并将其打印到浏览器。在这种情况下，它可能是安装中、等待中或激活中：
- en: '[PRE25]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `printState(state)` helper function will print out the state to the browser.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`printState(state)` 辅助函数将打印状态到浏览器。'
- en: 'At the end we attach an event listener to the service worker called `statechange`.
    The callback of this event listener will print the state changes to the browser:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们向服务工作者添加一个名为 `statechange` 的事件监听器。此事件监听器的回调将打印状态变化到浏览器：
- en: '[PRE26]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: When the registered service worker is in the activated state, we can refresh
    the page to see the service worker taking control.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当注册的服务工作者处于激活状态时，我们可以刷新页面以看到服务工作者接管。
- en: To demonstrate a page loading, without the service worker taking control, press
    *Shift* and refresh the page. You will see the activate event logged in the web
    console.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要演示页面加载，而不让服务工作者接管，请按 *Shift* 并刷新页面。你将在网页控制台中看到激活事件被记录。
- en: 'We are subscribing to two event listeners in the `service-worker.js` file,
    `install` and `activate`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `service-worker.js` 文件中订阅了两个事件监听器，`install` 和 `activate`：
- en: '[PRE27]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: These events get fired when this version of the script first gets registered
    for the given scope.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个版本的脚本首次在给定范围内注册时，会触发这些事件。
- en: The install event is a good place to prefetch data and initialize caches, and
    the `activate` event works well for cleaning up data from the old version of the
    script.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 安装事件是预取数据和初始化缓存的绝佳位置，而 `activate` 事件非常适合清理旧版本脚本中的数据。
- en: There's more...
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: When the service worker is successfully registered, it will go through the following
    stages.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务工作者成功注册后，它将经历以下阶段。
- en: Install
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装
- en: In the life cycle of service workers, at the point when the service worker has
    registered without errors, but is not yet active, any service workers previously
    activated will still be in control. The service worker is considered new if there
    is any change in the service worker file between page reloads. It will therefore
    go through the installation step. At this stage, the service workers are not intercepting
    any requests.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务工作者的生命周期中，当服务工作者在无错误的情况下注册，但尚未激活时，之前激活的任何服务工作者仍然处于控制状态。如果服务工作者文件在页面重新加载之间有任何变化，则服务工作者被视为新的。因此，它将经历安装步骤。在这个阶段，服务工作者不会拦截任何请求。
- en: Activate
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 激活
- en: The service worker is said to be at the activate stage when it becomes active
    for the first time. The service worker is now able to intercept requests. This
    will happen when we close the tab and reopen it, or the page is refreshed by a
    hard refresh using *Shift* + reload. It will not occur immediately after the install
    event.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务工人首次变得活跃时，我们说它处于激活阶段。服务工人现在能够拦截请求。这将在我们关闭标签页并重新打开它，或者通过使用*Shift* + 刷新来硬刷新页面时发生。它不会在安装事件之后立即发生。
- en: Fetch
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取
- en: The fetch happens when there is a request being made within the current service
    worker scope.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 获取操作发生在当前服务工人作用域内有一个请求正在发起时。
- en: Terminate
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 终止
- en: This can happen at any time, even outside of a request. But the termination
    happens mostly when the browser needs to reclaim memory. When a new request is
    made, the service worker will be restarted as needed, or a message will be received,
    but it will not go back through the activate step.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能随时发生，甚至可能发生在请求之外。但是，终止通常发生在浏览器需要回收内存时。当发起新的请求时，服务工人将根据需要重新启动，或者接收一条消息，但它不会回到激活步骤。
- en: The service worker will intercept a request it is registered to catch all the
    time, even if it needs to be restarted in order to do so. But, having said that,
    we cannot guarantee it will be around for any length of time. Because of this,
    the global state will not be preserved, so we have to make sure to avoid using
    any global variables within the service worker file. Instead, we can use indexed
    or `localStorage` for persistence.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工人将拦截它注册以捕获的所有请求，即使它需要重新启动才能这样做。但是，话虽如此，我们无法保证它将存在任何长度的时间。正因为如此，全局状态将不会被保留，因此我们必须确保在服务工人文件中不使用任何全局变量。相反，我们可以使用索引或`localStorage`进行持久化。
- en: See also
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关链接
- en: The previous recipe, *Registering a service worker*
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之前的配方，*注册服务工人*
- en: Debugging
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: Service workers run in a separate thread in the browser from the pages they
    control. There are ways to communicate between workers and pages, but they execute
    in a separate scope. That means you will not have access to the DOM of those web
    pages from the service worker script, for example. Because of this, we cannot
    use the DevTools on the same web page to debug service worker scripts. We need
    to open a separate inspector to debug the service worker thread.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工人运行在浏览器中与它们控制的页面分开的线程中。有方法在工人和页面之间进行通信，但它们在单独的作用域中执行。这意味着你将无法从服务工人脚本中访问那些网页的DOM，例如。正因为如此，我们不能在同一网页上使用DevTools来调试服务工人脚本。我们需要打开一个单独的检查器来调试服务工人线程。
- en: Service workers do most of their work by listening for relevant events and responding
    to them in a productive way. In the life cycle of service workers, different events
    are triggered at different points in a service worker's life cycle. So, if we
    want to cache assets, it is a good time to do that during the install state by
    listening to the `install` event. In the same way, we can debug service workers
    by adding breakpoints to the relevant event handlers.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工人主要通过监听相关事件并以有效的方式响应它们来完成大部分工作。在服务工人的生命周期中，不同的事件在不同的生命周期点被触发。因此，如果我们想缓存资源，那么在安装状态下监听`install`事件是一个很好的时机。同样，我们也可以通过向相关事件处理器添加断点来调试服务工人。
- en: Getting ready
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the previous recipe: *Setting up service workers*. Service workers
    only run across HTTPS. To find out how to set up a development environment to
    support this feature, refer to the following recipes: *Setting up GitHub pages
    for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for Mac*.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工人，你需要在浏览器设置中开启服务工人实验功能。如果你还没有这样做，请参考之前的配方：*设置服务工人*。服务工人仅在HTTPS上运行。要了解如何设置一个支持此功能的开发生态，请参考以下配方：*为GitHub页面设置SSL*，*为Windows设置SSL*，和*为Mac设置SSL*。
- en: How to do it...
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up debugging for service workers:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置服务工人的调试：
- en: 'To find out your currently running service workers, type the following into
    your browser: `chrome://inspect/#service-workers`:![How to do it...](img/B05381_01_16.jpg)'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要找出你当前正在运行的服务工人，请在浏览器中输入以下内容：`chrome://inspect/#service-workers`：![如何操作...](img/B05381_01_16.jpg)
- en: 'Otherwise, type the following into your browser: `chrome://serviceworker-internals`
    to find out the registered workers. If there aren''t any listed, then there are
    no currently running service workers.![How to do it...](img/B05381_01_17.jpg)'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，在你的浏览器中输入以下内容：`chrome://serviceworker-internals`以查找已注册的worker。如果没有列出任何内容，那么当前没有正在运行的服务worker。![如何操作...](img/B05381_01_17.jpg)
- en: To debug your service worker with Chrome DevTools, navigate to the service worker
    page and open DevTools. (*Cmd* + *Alt* + *I* in Mac or *F12* in Windows)
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用Chrome DevTools调试你的服务worker，请导航到服务worker页面并打开DevTools。（在Mac上为*Cmd* + *Alt*
    + *I*，在Windows上为*F12*）
- en: You can add a breakpoint to inspect your code.![How to do it...](img/B05381_01_18.jpg)
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以为你的代码添加一个断点来检查。![如何操作...](img/B05381_01_18.jpg)
- en: The service worker will be displayed in the **Threads** list, and the **Service
    Workers** tab lists all the **Active Running** service workers this page belongs
    to.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 服务worker将在**线程**列表中显示，而**服务worker**选项卡列出了此页面所属的所有**活动运行**服务worker。
- en: '![How to do it...](img/B05381_01_19.jpg)'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/B05381_01_19.jpg)'
- en: We can use the console for debugging as well. Any errors during the installation
    process will be printed on the console page. The console is useful for inspecting
    the service worker context.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们也可以使用控制台进行调试。安装过程中的任何错误都会打印在控制台页面上。控制台对于检查服务worker上下文很有用。
- en: '![How to do it...](img/B05381_01_20.jpg)'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/B05381_01_20.jpg)'
- en: You will also find the debugging panel in the **Resources** tab of the DevTools
    useful. In order to view network activity of the worker, click the `inspect` link
    on the **Resources** tab to launch a dedicated DevTools window for the worker.![How
    to do it...](img/B05381_01_21.jpg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以在DevTools的**资源**选项卡中找到调试面板。为了查看worker的网络活动，点击**资源**选项卡上的`检查`链接以启动为worker专用的DevTools窗口。![如何操作...](img/B05381_01_21.jpg)
- en: 'The resulting page `chrome://serviceworker-internals` shows the registered
    service workers. It also shows basic action buttons, which are explained in detail
    as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 结果页面`chrome://serviceworker-internals`显示了已注册的服务worker。它还显示了基本操作按钮，以下将详细解释：
- en: '**Terminated**: Unregisters the worker.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**终止**：注销worker。'
- en: '**Start/Stop**: Starts/stops the worker. This will happen automatically when
    you navigate to a page in the worker''s scope.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动/停止**：启动或停止worker。当你导航到worker作用域内的页面时，这会自动发生。'
- en: '**Sync**: Dispatches a sync event to the worker. If you don''t handle this
    event, nothing will happen.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**同步**：向worker发送同步事件。如果你不处理此事件，则不会发生任何操作。'
- en: '**Push**: Dispatches a push event to the worker. If you don''t handle this
    event, nothing will happen.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推送**：向worker发送推送事件。如果你不处理此事件，则不会发生任何操作。'
- en: '**Inspect**: Opens the worker in the inspector.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查**：在检查器中打开worker。'
- en: There's more...
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: When you are working with DevTools open, you might want to check to make sure
    that the **Disable cache** is not checked in the **Network** tab. If that option
    is checked, the requests will go to the network instead of the service worker.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用DevTools打开时，你可能想要检查确保在**网络**选项卡中**禁用缓存**没有被勾选。如果该选项被勾选，请求将发送到网络而不是服务worker。
- en: Providing a stale version on error
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供错误时的陈旧版本
- en: If you travel a lot, chances are you have often experienced a lot of zero network
    connectivity. This is frustrating, especially if you want to view previously viewed
    pages. In this recipe, we will look at how we can address this issue by providing
    the user with the stale version from the cache.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你经常出差，那么你很可能经常遇到很多零网络连接的情况。这很令人沮丧，尤其是当你想查看之前查看过的页面时。在这个配方中，我们将探讨如何通过向用户提供缓存中的陈旧版本来解决此问题。
- en: Getting ready
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the previous recipe: *Setting up service workers*. Service workers
    only run across HTTPS. To find out how to set up a development environment to
    support this feature, refer to the following recipes: *Setting up GitHub pages
    for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for Mac*.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务worker，你需要在浏览器设置中开启服务worker实验功能。如果你还没有这样做，请参考之前的配方：*设置服务worker*。服务worker仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考以下配方：*为GitHub页面设置SSL*，*为Windows设置SSL*，和*为Mac设置SSL*。
- en: How to do it...
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure (or you can find the
    files in the provided directory, `01/05`):'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构（或者你可以在提供的目录`01/05`中找到文件）：
- en: 'First, we need to create an `index.html` file as follows:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个如下所示的 `index.html` 文件：
- en: '[PRE28]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create a JavaScript file called `service-worker.js` in the same folder as the
    `index.html` file with the following code:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与 `index.html` 文件相同的文件夹中创建一个名为 `service-worker.js` 的 JavaScript 文件，并包含以下代码：
- en: '[PRE29]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: With your two files in place, navigate to `index.html`.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的两个文件放置好，导航到 `index.html`：
- en: How it works...
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the registration is successful, we inspect the state of the registration
    and print it to the browser.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 当注册成功时，我们检查注册状态并将其打印到浏览器：
- en: 'In the `service-worker.js` file, we always fetch the response from the network:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `service-worker.js` 文件中，我们始终从网络获取响应：
- en: '[PRE30]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If we received an error response, we return the stale version from the cache:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们收到一个错误响应，我们将从缓存中返回过时的版本：
- en: '[PRE31]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If we can''t find the stale version, we return the network response, which
    is the error:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们找不到过时的版本，我们将返回网络响应，即错误：
- en: '[PRE32]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If the response was successful (response code 200), we update the cached version:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果响应成功（响应代码 200），我们更新缓存的版本：
- en: '[PRE33]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: There's more...
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `put()` method of the cache interface allows key/value pairs to be added
    to the current cache object. The `put()` method also overrides any key/value pair
    previously stored in the cache that matches the request:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存接口的 `put()` 方法允许将键/值对添加到当前缓存对象中。`put()` 方法还会覆盖缓存中之前存储的任何与请求匹配的键/值对：
- en: '[PRE34]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Creating mock responses
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模拟响应
- en: In order to mock API responses from your server to your app, which is instead
    of actual API responses for the API requests, we can make the service worker return
    mock responses that will be identical to an API response.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟你的服务器对你的应用的 API 响应，而不是实际的 API 响应，我们可以让服务工作者返回与 API 响应相同的模拟响应。
- en: Getting ready
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the previous recipe: *Setting up service workers*. Service workers
    only run across HTTPS. To find out how to set up a development environment to
    support this feature, refer to the following recipes: *Setting up GitHub pages
    for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for Mac*.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考之前的配方：*设置服务工作者*。服务工作者仅在 HTTPS
    上运行。要了解如何设置支持此功能的发展环境，请参考以下配方：*设置 GitHub 页面以支持 SSL*，*设置 Windows 上的 SSL*，和 *设置
    Mac 上的 SSL*。
- en: How to do it...
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure (these can also be
    found in the provided directory, `01/03`):'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构（这些也可以在提供的目录 `01/03` 中找到）：
- en: 'First, we need to create an `index.html` file as follows:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个如下所示的 `index.html` 文件：
- en: '[PRE35]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a JavaScript file called `service-worker.js` in the same folder as the
    `index.html` file with the following code:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与 `index.html` 文件相同的文件夹中创建一个名为 `service-worker.js` 的 JavaScript 文件，并包含以下代码：
- en: '[PRE36]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: With your two files in place, you can navigate to the GitHub page, `https://username.github.io/service-workers/01/03/index.html`,
    and you will see the success message in your browser.![How to do it...](img/B05381_01_22.jpg)
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的两个文件放置好，你可以导航到 GitHub 页面，`https://username.github.io/service-workers/01/03/index.html`，你将在浏览器中看到成功消息。![如何操作...](img/B05381_01_22.jpg)
- en: How it works...
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'After the service worker registers itself successfully, we check to make sure
    that it is currently handling the network operations:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务工作者成功注册后，我们检查以确保它目前正在处理网络操作：
- en: '[PRE37]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In this case, we are calling the `showRequest()` function to add an event listener
    to the URL shorten button, and show the `request` block. Otherwise, the whole
    `request` block will be hidden:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们调用 `showRequest()` 函数为 URL 缩短按钮添加事件监听器，并显示 `request` 块。否则，整个 `request`
    块将被隐藏：
- en: '[PRE38]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The `sendRequest()` function builds the HTTP request. It creates a `POST` request
    with a URL of the Google API for URL shortening:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`sendRequest()` 函数构建 HTTP 请求。它创建一个带有 Google API 短网址 URL 的 `POST` 请求：'
- en: '[PRE39]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You will have to obtain an API key for this service to be used. For this, follow
    these instructions:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要为这个服务获取一个 API 密钥。为此，请按照以下说明操作：
- en: Visit the Google Developers Console page at [https://console.developers.google.com](https://console.developers.google.com).
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 Google 开发者控制台页面 [https://console.developers.google.com](https://console.developers.google.com)：
- en: You can either select an existing project or create a new one.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以选择一个现有项目或创建一个新的项目。
- en: Expand **APIs & auth**, in the sidebar on the left.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧侧边栏中展开 **APIs & auth**：
- en: Click **APIs**. Now, in the list of APIs provided, make sure the status is **ON**
    for the Google URL Shortener API.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **APIs**。现在，在提供的API列表中，确保Google URL Shortener API的状态是 **开启**。
- en: Finally, in the sidebar on the left-hand side, select **Credentials**.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在左侧边栏中，选择 **Credentials**。
- en: 'If the **Mock Response** is checked, set the request header `X-Mock-Response`
    to `yes`:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 **Mock Response** 被勾选，将请求头 `X-Mock-Response` 设置为 `yes`：
- en: '[PRE40]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now add an event listener to the load event and pass in a callback to assign
    the response data to the link displaying the result:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 现在添加一个事件监听器到load事件，并传递一个回调来分配响应数据到显示结果的链接：
- en: '[PRE41]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'At the end of the `sendRequest` function, we are sending the original URL as
    well as the `request` object we built as a request:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `sendRequest` 函数的末尾，我们发送原始URL以及我们构建的 `request` 对象作为请求：
- en: '[PRE42]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In the `service-worker.js` file, we are adding an event listener for the fetch
    event. We check that the request URL path has the `urlshortner` in it and the
    request header has `X-Mock-Response`:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `service-worker.js` 文件中，我们正在添加一个用于fetch事件的监听器。我们检查请求URL路径中包含 `urlshortner`，并且请求头有
    `X-Mock-Response`：
- en: '[PRE43]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We build a mock response object with a body, status, and the headers:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们构建一个包含正文、状态和头的模拟响应对象：
- en: '[PRE44]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Finally, we create a response with the mock response:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用模拟响应创建一个响应：
- en: '[PRE45]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Handling request timeouts
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理请求超时
- en: Long-running requests can be the result of connectivity issues. Service workers
    are an ideal solution for overcoming these problems. Let's look at how we can
    implement a solution with service workers to handle request timeouts.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 长时间运行的请求可能是连接问题造成的。服务工作者是解决这些问题的理想解决方案。让我们看看我们如何使用服务工作者实现一个处理请求超时的解决方案。
- en: Getting ready
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the previous recipe: *Setting up service workers*. Service workers
    only run across HTTPS. To find out how to set up a development environment to
    support this feature, refer to the following recipes: *Setting up GitHub pages
    for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for Mac*.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考之前的配方：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考以下配方：*为GitHub页面设置SSL*，*为Windows设置SSL*，和*为Mac设置SSL*。
- en: How to do it...
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'First, we need to create an `index.html` file as follows:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个如下的 `index.html` 文件：
- en: '[PRE46]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create a JavaScript file called `service-worker.js` in the same folder as the
    `index.html` file with the following code:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与 `index.html` 文件相同的文件夹中创建一个名为 `service-worker.js` 的JavaScript文件，并包含以下代码：
- en: '[PRE47]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: With your two files in place, navigate to `index.html` and open the DevTools.
    You will see the time out error logged on the console.![How to do it...](img/B05381_01_23.jpg)
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的两个文件放置好，导航到 `index.html` 并打开开发者工具。你会在控制台看到超时错误记录。![如何操作...](img/B05381_01_23.jpg)
- en: How it works...
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In our `index.html` file, we''re fetching a large uncompressed jQuery library:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `index.html` 文件中，我们正在获取一个大型未压缩的jQuery库：
- en: '[PRE48]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In our `service-worker.js` file, the event listener of the install event is
    calling the `skipWaiting()` method, which forces the waiting service worker to
    become the active service worker:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `service-worker.js` 文件中，安装事件的监听器调用 `skipWaiting()` 方法，这强制等待中的服务工作者成为活动服务工作者：
- en: '[PRE49]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The `skipWaiting()` method is used inside the active event handler, which in
    turn uses `Clients.claim()` to ensure that updates to the underlying service worker
    take effect immediately, for both the current client and all other active clients:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`skipWaiting()` 方法在活动事件处理器中使用，它反过来使用 `Clients.claim()` 确保对底层服务工作者的更新立即生效，对当前客户端和所有其他活动客户端都有效：'
- en: '[PRE50]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In event listener for fetch, we pass in a `Promise.race()` function where the
    first iterable, which is `timeout(400)`, gets resolved first:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在fetch事件的监听器中，我们传递一个 `Promise.race()` 函数，其中第一个可迭代项 `timeout(400)` 首先解决：
- en: '[PRE51]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: We will elaborate on the `Promise.race()` function soon. The `timeout()` function
    returns a promise with 408, which is the code for the request timed out status.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在不久的将来详细说明 `Promise.race()` 函数。`timeout()` 函数返回一个408的promise，这是请求超时状态的代码。
- en: There's more...
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'The `Promise.race()` method returns a promise that resolves, or rejects, as
    soon as one of the promises in the iterable resolves or rejects, with the value
    or reason from that promise:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise.race()`方法返回一个承诺，一旦可迭代中的任何一个承诺解决或拒绝，它就会解析或拒绝，并带有那个承诺的值或原因：'
- en: '[PRE52]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: As you can see, `two` is faster, so the result is `reject`.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，`two`更快，所以结果是`reject`。
