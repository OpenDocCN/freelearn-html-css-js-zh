- en: Chapter 8. Testing AJAX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。测试AJAX
- en: In this book, we have tested the filling of text fields on a form, clicking
    on buttons, and the resulting HTML document. This makes us ready to test a traditional
    form-based request-response application, but typical modern applications are usually
    more complex than that as they make use of asynchronous HTTP requests, that somehow
    update the document without having to refresh it. This is because they use AJAX.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们已经测试了在表单上填写文本字段、点击按钮以及生成的HTML文档。这使我们准备好测试传统的基于表单的请求-响应应用程序，但典型的现代应用程序通常比这更复杂，因为它们使用异步HTTP请求，以某种方式更新文档而无需刷新它。这是因为它们使用了AJAX。
- en: Our application emits AJAX requests when presented with the to-do item list
    page; a user can drag an item and drop it in the new position. The code that we
    placed in the `public/js/todos.js` file catches the change and calls the server
    `/todos/sort` URL, changing the item order in the database.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们呈现待办事项列表页面时，我们的应用程序会发出AJAX请求；用户可以拖动一个项目并将其放在新位置。我们放在`public/js/todos.js`文件中的代码捕捉到变化，并调用服务器`/todos/sort`
    URL，改变数据库中的项目顺序。
- en: 'Let''s see how we can use Zombie to test this drag-and-drop feature. The topics
    covered in this chapter include:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用Zombie来测试这个拖放功能。本章涵盖的主题包括：
- en: Using Zombie to trigger an AJAX call
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Zombie触发AJAX调用
- en: Using Zombie to test the result of an AJAX call
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Zombie来测试AJAX调用的结果
- en: By the end of this section, you will know how to use Zombie to test an application
    that uses AJAX.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节结束时，您将知道如何使用Zombie来测试使用AJAX的应用程序。
- en: Implementing drag-and-drop
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现拖放
- en: Let's add some tests to the `test/todos.js` file.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`test/todos.js`文件中添加一些测试。
- en: 'We start off by adding a new describe scope before the end of the `Todo list`
    scope:'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先在`Todo list`作用域结束之前添加一个新的描述作用域：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This new scope allows us to setup a to-do item fixture list in the database
    before any test inside this scope is run.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新的作用域允许我们在运行此作用域内的任何测试之前在数据库中设置一个待办事项列表。
- en: 'Now, let''s add this new `beforeEach` hook inside the new scope:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在新的作用域内添加这个新的`beforeEach`钩子：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then we start the test by logging in:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们通过登录开始测试：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We start the test by making sure that we have three to-do items in our item
    list page:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过确保我们的项目列表页面中有三个待办事项来开始测试：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then we declare a helper function that will assist us in verifying the contents
    of that list:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们声明一个辅助函数，将帮助我们验证列表的内容：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This function gets an array of strings and asserts that the `what` and `pos`
    fields of each to-do item in the page are placed in the expected order.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数获取一个字符串数组，并断言页面中每个待办事项的`what`和`pos`字段的顺序是否符合预期。
- en: 'Then we use this new `expectOrder` function to actually test that the order
    is the expected one:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们使用这个新的`expectOrder`函数来实际测试顺序是否符合预期：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you may remember, this is the order of the to-do items as declared in the
    `test/fixtures.json` file that were loaded on the `beforeEach` hook.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还记得，在`test/fixtures.json`文件中声明的待办事项的顺序是在`beforeEach`钩子加载的。
- en: 'Next we create another helper function that will help us fabricate and inject
    mouse events:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来我们创建另一个辅助函数，将帮助我们制造和注入鼠标事件：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This function simulates a user mouse event, sets the `x` and `y` coordinates
    on it, sets the mouse button (`event.which = 1`), and dispatches the event into
    the browser, specifying which item the event happened on.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数模拟用户鼠标事件，设置了`x`和`y`坐标，设置了鼠标按钮（`event.which = 1`），并将事件分派到浏览器中，指定事件发生在哪个项目上。
- en: 'Next we select which to-do item we will be dragging; in this case, we drag
    the first one:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来我们选择要拖动的待办事项；在这种情况下，我们拖动第一个：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then we use the `mouseEvent` helper function to inject a sequence of fabricated
    events:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们使用`mouseEvent`辅助函数来注入一系列制造的事件：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There are several important aspects to these events, namely, the sequence of
    events, the target element, and the mouse coordinates. Let's analyze them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件有几个重要方面，即事件的顺序、目标元素和鼠标坐标。让我们来分析一下。
- en: These are the events that compose a drag and a drop. First we press the mouse
    button, we move it a bit, then we move it some more and finally we release the
    mouse button. The `x` and `y` values for the mouse event location we're using
    here aren't really important, what is important is the relative difference between
    them so that the drag is detected and the drag mode begins.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是组成拖放的事件。首先我们按下鼠标按钮，稍微移动一下，然后再移动一些，最后释放鼠标按钮。这里我们使用的鼠标事件位置的`x`和`y`值并不重要，重要的是它们之间的相对差异，以便检测到拖动并开始拖动模式。
- en: On the first event, the `mousedown`, we're using an arbitrary coordinate of
    `50, 50`. On the second event, the `mousemove`, we're incrementing this coordinate
    by one pixel; this starts the drag.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个事件中，`mousedown`，我们使用了一个任意的坐标`50, 50`。在第二个事件中，`mousemove`，我们将这个坐标增加了一个像素；这开始了拖动。
- en: The second `mousemove` event continues the drag on the y axis. It looks superfluous
    and redundant, but it's required so that the drag detection works, giving continuity
    to the drag movement we were performing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个`mousemove`事件在y轴上继续拖动。看起来多余和冗余，但它是必需的，以便拖动检测起作用，使我们执行的拖动移动连续。
- en: Finally we have the `mouseup` where the user releases the mouse. This event
    uses the same coordinates as the previous `mousemove`, indicating that the user
    dropped the element after the drag.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有`mouseup`，用户释放鼠标。这个事件使用了与前一个`mousemove`相同的坐标，表示用户在拖动后放下了元素。
- en: 'Let''s now analyze the target elements in the events:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们分析事件中的目标元素：
- en: The second argument of the `mouseEvent()` helper function takes the target element.
    In the first `mousedown` event injection, we're targeting the to-do item in the
    `item` variable, which refers the item we want to drag. This indicates which item
    we will be dragging, once the drag mode gets activated. The remaining three events
    target the browser document, since the user will be dragging the to-do item across
    the document.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`mouseEvent()`助手函数的第二个参数是目标元素。在第一个`mousedown`事件注入中，我们将目标定位到`item`变量中的待办事项，该变量引用我们要拖动的项目。这表明了我们将要拖动的项目，一旦拖动模式被激活。其余的三个事件将目标定位到浏览器文档，因为用户将在整个文档中拖动待办事项。'
- en: 'Some further clarification of the mouse coordinates we''re using:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用的鼠标坐标的进一步澄清：
- en: Zombie does not render the items, so it doesn't know the location of each of
    them. This is the only way we can use to indicate which element we are dragging.
    The x and y coordinates in this case are irrelevant for that.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Zombie不会渲染项目，因此它不知道每个项目的位置。这是我们可以使用的唯一方法来指示我们正在拖动的元素。在这种情况下，x和y坐标与此无关。
- en: Since Zombie doesn't render the elements, it doesn't keep the location of each
    element. In fact, they are all placed at (0, 0), which means that our `mouseup`
    event placed the dragged item after the last item.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Zombie不会渲染元素，它不会保留每个元素的位置。事实上，它们都被放置在(0, 0)处，这意味着我们的`mouseup`事件将拖动的项目放置在最后一个项目之后。
- en: As mentioned earlier, the initial value and the drag distance is completely
    arbitrary, and you will find that changing these will still make the test work.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，初始值和拖动距离是完全任意的，您会发现改变这些值仍然可以使测试工作。
- en: 'After injecting these mouse events into the browser event queue, we wait for
    these to be fully processed using `browser.wait()` function:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将这些鼠标事件注入浏览器事件队列后，我们使用`browser.wait()`函数等待这些事件被完全处理：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: At this stage, the browser has changed the element order and made an AJAX request
    posting the new order to the server.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，浏览器已经改变了元素顺序，并发出了一个AJAX请求，将新的顺序发送到服务器。
- en: 'Now we verify that the to-do items are in the new order:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们验证待办事项是否按新顺序排列：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We also verify whether the browser performed the HTTP request we intended:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还验证浏览器是否执行了我们预期的HTTP请求：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that we're using the `browser.lastRequest()` function to access the last
    AJAX request the browser made.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用`browser.lastRequest()`函数来访问浏览器发出的最后一个AJAX请求。
- en: If you needed to access every HTTP request that the browser made, you can inspect
    the `browser.resources` object.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要访问浏览器发出的每个HTTP请求，可以检查`browser.resources`对象。
- en: 'Now that we know that the browser made an `HTTP POST` request commanding that
    the server sorts the to-do items, we need to make sure the to-do items were correctly
    updated in the database. To verify this we do something similar to what a human
    tester would; we reload the page using `browser.reload()` and verify to see if
    the order is indeed the expected one:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道浏览器发出了一个`HTTP POST`请求，命令服务器对待办事项进行排序，我们需要确保数据库中的待办事项已经正确更新。为了验证这一点，我们做了类似于人工测试人员的操作；我们使用`browser.reload()`重新加载页面，并验证是否顺序确实是预期的：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Summary
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Using Zombie you can inject custom events to imitate some complex user actions.
    You can also detect what URL and method the browser performed an HTTP request
    to by using `browser.lastRequest()`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Zombie，您可以注入自定义事件来模拟一些复杂的用户操作。您还可以通过使用`browser.lastRequest()`来检测浏览器执行HTTP请求的URL和方法。
