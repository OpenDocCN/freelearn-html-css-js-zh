- en: Chapter 10.  Creating and Deploying Using Continuous Integration and Docker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。使用持续集成和Docker创建和部署
- en: In this chapter, we will explore the continuous delivery development process
    with Node.js applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索使用Node.js应用程序的持续交付开发过程。
- en: In previous chapters, we saw many ways to develop applications using Node.js
    and frameworks such as Express and Loopback, including using different databases,
    such as MongoDB and MySql, and some middleware for user authentication, sessions,
    cookies, and many others.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们看到了许多使用Node.js和Express、Loopback等框架开发应用程序的方法，包括使用不同的数据库，如MongoDB和MySql，以及一些用于用户身份验证、会话、cookie等的中间件。
- en: In [chapter 09](ch09.html "Chapter 9.  Building a Frontend Process with Node.js
    and NPM"), *Building a Frontend Process with Node.js and NPM,* we saw how to deploy
    an application using the command line and how to upload the project directly to
    the cloud using a few commands.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第09章](ch09.html "第9章。使用Node.js和NPM构建前端流程")中，*使用Node.js和NPM构建前端流程*，我们看到了如何使用命令行部署应用程序，以及如何使用几个命令直接将项目上传到云端。
- en: In this chapter, we will see how to integrate some more tools into our development
    environment to deal with unit tests and automated deployment, how to set up environment
    variables to protect our database credentials, and how to create a full application
    using the concept of Docker containers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何将一些更多的工具集成到我们的开发环境中，以处理单元测试和自动部署，如何设置环境变量来保护我们的数据库凭据，并且如何使用Docker容器的概念创建一个完整的应用程序。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: How to deal with CI solutions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何处理CI解决方案
- en: How to test Node.js applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何测试Node.js应用程序
- en: How to configure a MongoDB cloud instance and environment variables
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置MongoDB云实例和环境变量
- en: How to integrate GitHub, Heroku, and Codeship in build and test processes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在构建和测试过程中集成GitHub、Heroku和Codeship
- en: How to create Docker images and how to use Docker containers
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建Docker镜像以及如何使用Docker容器
- en: What we are building
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们正在构建什么
- en: In this chapter, we will build an application with the Express framework using
    some techniques already used in previous chapters, such as user session and user
    authentication with email and password using the Passport middleware. We will
    also use MongoDB, Mongoose, and Swig templates.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Express框架构建一个应用程序，使用了在之前章节中已经使用过的一些技术，比如使用Passport中间件进行用户会话和用户身份验证，使用电子邮件和密码。我们还将使用MongoDB、Mongoose和Swig模板。
- en: 'The result will be the following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下截图所示：
- en: '![What we are building](img/image_10_001.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![我们正在构建什么](img/image_10_001.jpg)'
- en: Screenshot of home screen
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 主屏幕截图
- en: What Continuous Integration means
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成的含义
- en: The workflow of **Continuous Integration** (**CI**) consists generally of four
    steps. We will illustrate with diagrams and a simple description of all the four
    stages.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）的工作流程通常包括四个步骤。我们将用图表和简要描述来说明所有四个阶段。'
- en: 'The following diagram shows how CI solutions work:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了CI解决方案的工作原理：
- en: '![What Continuous Integration means](img/image_10_002.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![持续集成的含义](img/image_10_002.jpg)'
- en: Continuous Integration process
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成过程
- en: Commit the code to a repository.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码提交到存储库。
- en: The CI interface builds the application.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CI界面构建应用程序。
- en: Execute tests.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行测试。
- en: If all tests are successful, the code goes to deployment.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果所有测试都成功，代码将被部署。
- en: Creating the baseline application
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基线应用程序
- en: Let's start building the application. First off, we will create an application
    folder and add some root files, such as .gitignore, package.json, .env, and many
    more.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始构建应用程序。首先，我们将创建一个应用程序文件夹，并添加一些根文件，比如.gitignore、package.json、.env等等。
- en: Adding the root files
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加根文件
- en: Create a folder called chapter-10.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为chapter-10的文件夹。
- en: 'Inside the chapter-10 folder, create a new file called package.json and add
    the following code:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在chapter-10文件夹中，创建一个名为package.json的新文件，并添加以下代码：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that in devDependencies we will use some modules to write tests for our
    application. We will see how to do this later in the book.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在devDependencies中，我们将使用一些模块来为我们的应用程序编写测试。我们将在本书的后面看到如何做到这一点。
- en: 'Create a file called .env and add the following code:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为.env的文件，并添加以下代码：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Don't worry about the previous code; we will replace this code using environment
    variables on **Heroku** and **Codeship** later in the chapter, and we will also
    configure this file to use Docker containers.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心之前的代码；我们将在本章后面使用环境变量在**Heroku**和**Codeship**上替换这段代码，并且我们还将配置此文件以使用Docker容器。
- en: Tip
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For security reasons, never upload your credentials to open source repositories
    if you are working on a commercial project; even if you have a private repository,
    it is always recommended you use environment variables in production.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全原因，如果您正在进行商业项目，请不要将您的凭据上传到开源存储库；即使您有一个私人存储库，也建议您在生产中使用环境变量。
- en: 'Create a file called Profile and add the following code:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为Profile的文件，并添加以下代码：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As we already saw in previous chapters, this file is responsible for making
    our application work on Heroku. Even though it is not mandatory, it's good practice
    to include it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在之前的章节中所看到的，这个文件负责使我们的应用程序在Heroku上运行。即使它不是强制性的，将它包含进来也是一个良好的做法。
- en: Also, as we are using git source control, it is good practice to include a .gitignore
    file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，由于我们正在使用git源代码控制，将.gitignore文件包含进来是一个良好的做法。
- en: 'Create a file called .gitignore and add the following code:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为.gitignore的文件，并添加以下代码：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that at this point we keep the .env file out of the gitignore file; later
    in the book, we will un-track this file.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，目前我们将.env文件保留在gitignore文件之外；在本书的后面，我们将取消跟踪此文件。
- en: Creating the config folder and files
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建config文件夹和文件
- en: Generally, all Node.js applications uses a folder called Config, to store all
    the application configuration files. So let's create one.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，所有Node.js应用程序都使用一个名为Config的文件夹，用于存储所有应用程序配置文件。所以让我们创建一个。
- en: At the root project folder, create a new folder called config.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录下，创建一个名为config的新文件夹。
- en: 'Create a file called passport.js and add the following code:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为passport.js的文件，并添加以下代码：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The previous code will take care of user authentication using the **Flask**
    middleware for error messages, as we saw in [Chapter 01](ch01.html "Chapter 1. 
    Building a Twitter-Like Application Using the MVC Design Pattern"), *Building
    a Twitter-Like Application Using the MVC Design Pattern*.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将使用**Flask**中间件来处理用户身份验证的错误消息，就像我们在[第01章](ch01.html "第1章。使用MVC设计模式构建类似Twitter的应用程序")中看到的那样，*使用MVC设计模式构建类似Twitter的应用程序*。
- en: Creating the controllers folder and files
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建控制器文件夹和文件
- en: 'As we are building a simple application, we will have only two controllers,
    one for users and another for the home page:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在构建一个简单的应用程序，我们只会有两个控制器，一个用于用户，另一个用于主页：
- en: In the root project folder, create a new folder called controllers.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根项目文件夹内，创建一个名为controllers的新文件夹。
- en: 'Create a file called home.js and add the following code:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为home.js的文件，并添加以下代码：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now let's add all the functions related to users, such as sign in, sign up,
    authorization, account, and log out. We will add each function after the previous
    one.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加所有与用户相关的功能，比如登录、注册、授权、账户和登出。我们将在之前的每个功能后添加一个功能。
- en: Adding modules and authentication middleware
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加模块和身份验证中间件
- en: 'Inside the controllers folder, create a new file called user.js and add the
    following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在controllers文件夹内，创建一个名为user.js的新文件，并添加以下代码：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Adding login GET and POST methods
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加登录的GET和POST方法
- en: 'Add the following code to the controllers/user.js file, right after the previous
    code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在controllers/user.js文件中添加以下代码，就在之前的代码后面：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Adding signup GET and POST methods
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加注册的GET和POST方法
- en: 'Add the following code to the controllers/user.js file, right after the previous
    code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在controllers/user.js文件中添加以下代码，就在之前的代码后面：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Adding account GET and UPDATE methods
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加账户的GET和UPDATE方法
- en: 'Add the following code to the controllers/user.js file, right after the previous
    code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在controllers/user.js文件中添加以下代码，就在之前的代码后面：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Adding account DELETE method
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加账户的DELETE方法
- en: 'Add the following code to the controllers/user.js file, right after the previous
    code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在controllers/user.js文件中添加以下代码，就在之前的代码后面：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now we have finished the application controllers.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了应用程序控制器。
- en: Creating the model folder and files
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模型文件夹和文件
- en: At the root project folder, create a folder called models.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根项目文件夹内，创建一个名为models的文件夹。
- en: 'Create a new file called User.js and add the following code:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为User.js的新文件，并添加以下代码：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating the public folder and files
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建public文件夹和文件
- en: 'In this example, we are using the SASS version of the Bootstrap framework,
    as we did in the previous chapter. But this time, we will store the source files
    in a different location, inside the public/css folder. Let''s create the folder
    and files:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了Bootstrap框架的SASS版本，就像我们在上一章中所做的那样。但是这一次，我们将把源文件存储在不同的位置，即public/css文件夹内。让我们创建文件夹和文件：
- en: Inside the root project, create a folder called public.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根项目内，创建一个名为public的文件夹。
- en: 'Inside public folder we will create a folder called: css, inside css create
    a folder called: vendor and inside vendor, create a folder called: bootstrap.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在public文件夹内，创建一个名为css的文件夹，在css文件夹内创建一个名为vendor的文件夹，在vendor文件夹内创建一个名为bootstrap的文件夹。
- en: Go to [https://github.com/twbs/bootstrap-sass/tree/master/assets/stylesheets/bootstrap](https://github.com/twbs/bootstrap-sass/tree/master/assets/stylesheets/bootstrap),
    copy all content, and paste it into the public/css/vendor/bootstrap folder.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://github.com/twbs/bootstrap-sass/tree/master/assets/stylesheets/bootstrap](https://github.com/twbs/bootstrap-sass/tree/master/assets/stylesheets/bootstrap)，复制所有内容，并粘贴到public/css/vendor/bootstrap文件夹内。
- en: 'Inside the public/css/vendor folder, create a new file called _bootstrap.scss
    and add the following code:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在public/css/vendor文件夹内，创建一个名为_bootstrap.scss的新文件，并添加以下代码：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating a custom stylesheet
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建自定义样式表
- en: 'Inside the public/css/ folder, create a new file called main.scss and add the
    following code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在public/css/文件夹内，创建一个名为main.scss的新文件，并添加以下代码：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Don't worry about the node-sass building process now;  we have already set up
    an NPM task in the package.json file at the beginning of this chapter.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不用担心node-sass的构建过程；我们已经在本章开头的package.json文件中设置了一个NPM任务。
- en: Creating the fonts folder and adding font files
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建字体文件夹并添加字体文件
- en: 'As we are using the Bootstrap framework, we need a folder to hold all the Bootstrap
    font files, let''s create:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用Bootstrap框架，我们需要一个文件夹来存放所有的Bootstrap字体文件，让我们创建一个：
- en: Inside the public folder, create a new folder called fonts.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在public文件夹内，创建一个名为fonts的新文件夹。
- en: Go to [https://github.com/twbs/bootstrap-sass/tree/master/assets/fonts/bootstrap](https://github.com/twbs/bootstrap-sass/tree/master/assets/fonts/bootstrap),
    copy all the content, and paste it into the public/fonts folder.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://github.com/twbs/bootstrap-sass/tree/master/assets/fonts/bootstrap](https://github.com/twbs/bootstrap-sass/tree/master/assets/fonts/bootstrap)，复制所有内容，并粘贴到public/fonts文件夹内。
- en: Creating the JavaScript folder and files
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建JavaScript文件夹和文件
- en: 'As we are using the Bootstrap framework, we need a folder to hold all the Bootstrap
    font files, let''s create:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用Bootstrap框架，我们需要一个文件夹来存放所有的Bootstrap字体文件，让我们创建一个：
- en: Inside the public folder, create a new folder called js.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在public文件夹内，创建一个名为js的新文件夹。
- en: Inside the js folder, create a new folder called lib.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在js文件夹内，创建一个名为lib的新文件夹。
- en: Inside the js/lib create a new file called bootstrap.js.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在js/lib内创建一个名为bootstrap.js的新文件。
- en: Go to [https://github.com/twbs/bootstrap-sass/blob/master/assets/javascripts/bootstrap.js](https://github.com/twbs/bootstrap-sass/blob/master/assets/javascripts/bootstrap.js),
    copy all the content, and paste it into the public/js/lib/bootstrap.js file.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://github.com/twbs/bootstrap-sass/blob/master/assets/javascripts/bootstrap.js](https://github.com/twbs/bootstrap-sass/blob/master/assets/javascripts/bootstrap.js)，复制所有内容，并粘贴到public/js/lib/bootstrap.js文件中。
- en: Inside js/lib, create a new file called jquery.js.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在js/lib内，创建一个名为jquery.js的新文件。
- en: Go to [https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.js](https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.js),
    copy all content, and paste it into the public/js/lib/jquery.js file.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.js](https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.js)，复制所有内容，并粘贴到public/js/lib/jquery.js文件中。
- en: Creating the views folder and files
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建视图文件夹和文件
- en: 'Now we will create a very similar folder structure to that in [Chapter 01](ch01.html
    "Chapter 1.  Building a Twitter-Like Application Using the MVC Design Pattern"),
    *Building a Twitter-Like Application Using the MVC Design Pattern*; the views
    folder will have the following directories:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个与[第01章](ch01.html "第1章。使用MVC设计模式构建类似Twitter的应用程序")中非常相似的文件夹结构，*使用MVC设计模式构建类似Twitter的应用程序*；views文件夹将具有以下目录：
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Adding the layouts folder and file
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加layouts文件夹和文件
- en: 'Inside the views/layouts folder, create a new file called main.html and add
    the following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在views/layouts文件夹内，创建一个名为main.html的新文件，并添加以下代码：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Adding the pages folder and files
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加pages文件夹和文件
- en: 'It is time to create the application templates files:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建应用程序模板文件了：
- en: 'Inside the views/pages folder, create a file called home.html and add the following
    code:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在views/pages文件夹内，创建一个名为home.html的文件，并添加以下代码：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Inside the views/pages folder, create a file called login.html and add the
    following code:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在views/pages文件夹内，创建一个名为login.html的文件，并添加以下代码：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Inside the views/pages folder, create a file called profile.html and add the
    following code:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在views/pages文件夹内，创建一个名为profile.html的文件，并添加以下代码：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Inside the views/pages folder, create a file called signup.html and add the
    following code:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在views/pages文件夹内，创建一个名为signup.html的文件，并添加以下代码：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Adding the partial folder and files
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加partial文件夹和文件
- en: 'As we did in previous chapter, we are using the partial views concept, so let''s
    create the views files:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章一样，我们使用了partial views的概念，因此让我们创建views文件：
- en: 'Inside the views/partials folder, create a new file called footer.html and
    add the following code:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在views/partials文件夹内，创建一个名为footer.html的新文件，并添加以下代码：
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Inside the views/partials folder, create a new file called header.html and
    add the following code:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在views/partials文件夹内，创建一个名为header.html的新文件，并添加以下代码：
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: At this point, we have the application almost ready for deployment, but before
    we go further, we need to create the test folder and file.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的应用程序几乎已经准备好部署了，但在继续之前，我们需要创建测试文件夹和文件。
- en: Creating the test folder and test file
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建测试文件夹和测试文件
- en: To run tests on Node.js applications, we need to include some dependencies/modules
    to help us write these tests. Fortunately, within the Node ecosystem we have many
    options for modules to use.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Node.js应用程序上运行测试，我们需要包含一些依赖/模块来帮助我们编写这些测试。幸运的是，在Node生态系统中，我们有许多模块可供使用。
- en: 'Next, we will describe how to write tests for a HTTP server using the **Supertest**
    module and **Mocha** test runner. The modules that we will need are inserted in
    our package.json file:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将描述如何使用**Supertest**模块和**Mocha**测试运行器为HTTP服务器编写测试。我们将需要的模块插入到我们的package.json文件中：
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '| **Module** | **Description** | **More information** |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| **模块** | **描述** | **更多信息** |'
- en: '| **Mocha** | Test framework | [https://mochajs.org](https://mochajs.org) |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| **Mocha** | 测试框架 | [https://mochajs.org](https://mochajs.org) |'
- en: '| **Supertest** | For testing HTTP servers | [https://www.npmjs.com/package/supertest](https://www.npmjs.com/package/supertest)
    |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| **Supertest** | 用于测试HTTP服务器 | [https://www.npmjs.com/package/supertest](https://www.npmjs.com/package/supertest)
    |'
- en: 'Tests for web applications are a very complex subject and deserves a deeper
    approach, but we''ll see how to write unit tests and how to run tests with Mocha
    in a Node.js application:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序的测试是一个非常复杂的主题，值得深入研究，但我们将看到如何编写单元测试以及如何在Node.js应用程序中使用Mocha运行测试：
- en: Inside the root project folder, create a new folder called test.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根项目文件夹内，创建一个名为test的新文件夹。
- en: 'Inside the test/ folder, create a new file called app-test.js and add the following
    code:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在test/文件夹内，创建一个名为app-test.js的新文件，并添加以下代码：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The test cases are pretty simple where:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用例非常简单：
- en: '*Test 01:*'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试01：*'
- en: Checks the root URL and expect a HTTP status code of 200.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 检查根URL，并期望获得HTTP状态码200。
- en: '*Test 02:*'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试02：*'
- en: Expects a HTTP status code of 404.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 期望获得HTTP状态码404。
- en: Now let's see how to execute these tests.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何执行这些测试。
- en: Tip
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that you must have MongoDB up and running on your machine.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您必须在计算机上运行MongoDB。
- en: 'Replace the .env file at the root project folder with the following information:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下信息替换根项目文件夹中的.env文件：
- en: '[PRE24]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note that later in the book, we will restore this file to its original state.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，稍后在本书中，我们将把此文件恢复为其原始状态。
- en: 'Open the terminal/shell inside the root project and type the following command:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根项目文件夹中打开终端/ shell，并输入以下命令：
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now type the following command:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在输入以下命令：
- en: '[PRE26]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You should see the following result on your terminal output:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在终端输出中看到以下结果：
- en: '![Creating the test folder and test file](img/image_10_003.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![创建测试文件夹和测试文件](img/image_10_003.jpg)'
- en: Terminal output after tests
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 测试后的终端输出
- en: Note that both tests passed with a green check icon on the left-hand side of
    the test description.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，两个测试都通过了，左侧的测试描述旁边有一个绿色的勾号图标。
- en: Running the application
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'Now it is time to check the application:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候检查应用程序了：
- en: 'Open the terminal and type the following command:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并输入以下命令：
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Go to http://localhost:3000/signup and create a new account with the following
    information:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到http://localhost:3000/signup并使用以下信息创建一个新帐户：
- en: '**Name**: John Doe'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**姓名**：John Doe'
- en: '**Email**: john@doe.com'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**电子邮件**：john@doe.com'
- en: '**Password**: 123456'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**密码**：123456'
- en: '![Running the application](img/image_10_004.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/image_10_004.jpg)'
- en: Signup page
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 注册页面
- en: 'After the signup process, go to http://localhost:3000/account and see the following
    screenshot, with the user information:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 注册流程后，转到http://localhost:3000/account并查看以下屏幕截图，其中包含用户信息：
- en: '![Running the application](img/image_10_005.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/image_10_005.jpg)'
- en: Account information
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 帐户信息
- en: Creating a GitHub or Bitbucket free account
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个GitHub或Bitbucket免费帐户
- en: 'You can choose what service to use, as GitHub and Bitbucket do the same thing:
    host public and private repositories of code for collaborative software development.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择使用哪种服务，因为GitHub和Bitbucket都可以做同样的事情：托管公共和私有代码存储库，用于协作软件开发。
- en: The functionality of both are similar and both use git as source control. We
    will see how to use GitHub, but the process for Bitbucket is very similar.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 两者的功能都类似，都使用git作为源代码控制。我们将看到如何使用GitHub，但Bitbucket的过程非常相似。
- en: Tip
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can find more information about Bitbucket at this link: [https://bitbucket.org/](https://bitbucket.org/).'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此链接找到有关Bitbucket的更多信息：[https://bitbucket.org/](https://bitbucket.org/)。
- en: Creating a GitHub free account
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建GitHub免费账户
- en: 'Let''s create a GitHub account:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个GitHub账户：
- en: Go to [https://github.com/join](https://github.com/join), fill in the form and
    click the **Create an account** button.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://github.com/join](https://github.com/join)，填写表格，然后点击**创建账户**按钮。
- en: Choose the **Unlimited public repositories for free** checkbox and click the
    **Continue** button.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**免费无限公共存储库**复选框，然后点击**继续**按钮。
- en: On the third step, you must answer three questions or choose to skip this step;
    click the **Submit** button. From here, you can read the guide or start a project.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第三步，您必须回答三个问题或选择跳过此步骤；点击**提交**按钮。从这里，您可以阅读指南或开始一个项目。
- en: Tip
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that you need to verify your e-mail before starting a project.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您需要在开始项目之前验证您的电子邮件。
- en: Click the **Start a project** button and fill in the repository's name, remembering
    you can use this name on GitHub, but you need to choose another name for the Heroku
    and Codeship process. After that, you will see the following screenshot:![Creating
    a GitHub free account](img/image_10_006.jpg)
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开始项目**按钮，并填写存储库名称，记住您可以在GitHub上使用这个名称，但您需要为Heroku和Codeship过程选择另一个名称。之后，您将看到以下截图：![创建GitHub免费账户](img/image_10_006.jpg)
- en: GitHub project
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub项目
- en: Later in the chapter, we will see how to initialize a local GIT repository and
    how to push the source code to GitHub repository.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面，我们将看到如何初始化本地GIT存储库以及如何将源代码推送到GitHub存储库。
- en: Creating a Heroku free account
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Heroku免费账户
- en: In the previous chapter, we deployed the application directly to Heroku using
    the Heroku toolbelt commands. This time, you can use the same account that we
    created in [Chapter 09](ch09.html "Chapter 9.  Building a Frontend Process with
    Node.js and NPM"), *Building a Frontend Process with Node.js and NPM* or create
    a new one at [https://www.heroku.com/](https://www.heroku.com/).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用Heroku工具包命令直接将应用程序部署到Heroku。这一次，您可以使用我们在[第09章](ch09.html "第9章。使用Node.js和NPM构建前端流程")中创建的相同账户，*使用Node.js和NPM构建前端流程*，或者在[https://www.heroku.com/](https://www.heroku.com/)创建一个新账户。
- en: Creating a MongoLab free sandbox account
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建MongoLab免费沙盒账户
- en: 'MongoLab is cloud service required to use MongoDB as a service. It offers a
    free limited account as a sandbox, so we can use it to deploy our project:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: MongoLab是使用MongoDB作为服务所需的云服务。它提供了一个免费的有限账户作为沙盒，所以我们可以用它来部署我们的项目：
- en: Proceed to the **Sign Up** page; after that, you will receive two emails from
    MongoLab, one with a welcome message and another with a link to verify your account,
    if you don't have one yet.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续到**注册**页面；之后，您将收到来自MongoLab的两封电子邮件，一封是欢迎消息，另一封是验证您的账户的链接，如果您还没有账户。
- en: 'After you verify your account, you will see the following screenshot when logging
    in to your dashboard:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 验证您的账户后，登录到仪表板时，您将看到以下截图：
- en: '![Creating a MongoLab free sandbox account](img/image_10_007.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![创建MongoLab免费沙盒账户](img/image_10_007.jpg)'
- en: MongoLab welcome screen
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: MongoLab欢迎界面
- en: Click on the **Create new** button.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建新**按钮。
- en: Choose the S**ingle-node** tab.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**单节点**选项卡。
- en: From the standard line panel, choose the first checkbox for **Sandbox**.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从标准行面板中，选择**沙盒**的第一个复选框。
- en: Scroll down to the end of the page and insert a database name, **nb6**, and
    click on the C**reate new mongodb Deployment** button.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动到页面底部，插入数据库名称**nb6**，然后点击**创建新的mongodb部署**按钮。
- en: 'At the end of these five steps, you should see the following screen:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在这五个步骤结束时，您应该看到以下屏幕：
- en: '![Creating a MongoLab free sandbox account](img/image_10_008.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![创建MongoLab免费沙盒账户](img/image_10_008.jpg)'
- en: Database created at MongoLab
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在MongoLab创建的数据库
- en: Creating a user and password for the database
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为数据库创建用户名和密码
- en: 'It'' time to create a user and password to protect our database on the cloud:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建用户名和密码来保护我们在云上的数据库了：
- en: Click on the database name.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击数据库名称。
- en: 'You will see the following warning, suggesting you create a user and password:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下警告，建议您创建用户名和密码：
- en: '![Creating a user and password for the database](img/image_10_009.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![为数据库创建用户名和密码](img/image_10_009.jpg)'
- en: 'Database warning: no user and password'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库警告：没有用户和密码
- en: Click on the **Click here** link inside the warning message.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击警告消息内的**点击这里**链接。
- en: 'Insert the following information:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下信息：
- en: '[PRE28]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Click on the **Create User** button.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建用户**按钮。
- en: Getting the string connection
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取连接字符串
- en: 'Now we have a MongoDB instance running on the MongoLab cloud service. And here''s
    the connection string that we will use later in the chapter:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在MongoLab云服务上运行了一个MongoDB实例。这是我们将在本章后面使用的连接字符串：
- en: '[PRE29]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Tip
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You must replace the previous code with your own user and password.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须用自己的用户名和密码替换以前的代码。
- en: Initializing a git repository and pushing to GitHub
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化git存储库并推送到GitHub
- en: 'At this time we will create our local git repository and then uploads it to
    account we just created on GitHub:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们将创建本地git存储库，然后将其上传到我们刚在GitHub上创建的账户：
- en: 'Open the terminal/shell inside the root application folder and type the following
    command:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根应用程序文件夹中打开终端/Shell，然后输入以下命令：
- en: '[PRE30]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add a remote repository to project by typing the following command in the terminal/shell:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端/Shell中输入以下命令，将远程存储库添加到项目中：
- en: '[PRE31]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: You must use your own github username in the previous code.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须在以前的代码中使用自己的github用户名。
- en: 'Add all project files to source control by typing the following command in
    the terminal/shell:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端/Shell中键入以下命令将所有项目文件添加到源代码控制：
- en: '[PRE32]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Commit the project changes by typing the following command in the terminal/shell:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端/Shell中键入以下命令提交项目更改：
- en: '[PRE33]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The last command is to upload all files to the GitHub repository that we created
    before.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个命令是将所有文件上传到我们之前创建的GitHub存储库。
- en: 'Type the following command in the terminal/shell:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端/Shell中键入以下命令：
- en: '[PRE34]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Creating a Heroku application using Heroku Dashboard
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Heroku仪表板创建Heroku应用程序
- en: 'This time, we will see another way to create a project using the Heroku cloud
    service:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将看到另一种使用Heroku云服务创建项目的方法：
- en: Go to [https://dashboard.heroku.com/apps](https://dashboard.heroku.com/apps).
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://dashboard.heroku.com/apps](https://dashboard.heroku.com/apps)。
- en: On the Heroku dashboard, click on the **New** button, and then click on the
    create **new app** link.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Heroku仪表板上，单击**新建**按钮，然后单击创建**新应用**链接。
- en: 'Enter the following name in the app input name field: chapter-10-yourname'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序输入名称字段中输入以下名称：chapter-10-yourname
- en: Click on the **Create app** button.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建应用**按钮。
- en: Linking the Heroku application to your git repository
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Heroku应用程序链接到您的git存储库
- en: 'Now we need to set up our account on Heroku to link to our github account.
    So let''s do it the next steps:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要设置我们的Heroku帐户以链接到我们的github帐户。所以让我们按照以下步骤进行：
- en: On Heroku dashboard, click on the chapter-10-yourname project name.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Heroku仪表板上，点击chapter-10-yourname项目名称。
- en: 'Click on the **Settings** tab, scroll down the page to **Domains**, and copy
    the Heroku domain URL:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**设置**选项卡，向下滚动页面到**域**，并复制Heroku域URL：
- en: chapter-10-yourname.herokuapp.com
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: chapter-10-yourname.herokuapp.com
- en: Tip
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that we can't use the same name for all applications, so you need to provide
    your name after chapter-10.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不能为所有应用程序使用相同的名称，因此您需要在chapter-10之后提供您的名称。
- en: Later we will use the app name to configure the Codeship deployment pipeline,
    so don't forget it.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后我们将使用应用程序名称来配置Codeship部署管道，所以不要忘记它。
- en: Adding environment variables to Heroku
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向Heroku添加环境变量
- en: 'Now we need to create some environment variables to keep our database string
    safe in our public github repository:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建一些环境变量，以便在我们的公共github存储库中保护我们的数据库字符串安全：
- en: On Heroku dashboard, click on the chapter-10-yourname project name.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Heroku仪表板上，点击chapter-10-yourname项目名称。
- en: Click on the **Settings** tab.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**设置**选项卡。
- en: On the **Settings** tab, click on the **Reveal Config Vars** button.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**设置**选项卡中，单击**显示配置变量**按钮。
- en: Add your own variables, as shown in the following screenshot. On the left, add
    the variable name, and on the right, and add the value:![Adding environment variables
    to Heroku](img/image_10_010.jpg)
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加您自己的变量，如以下屏幕截图所示。在左侧添加变量名称，在右侧添加值：![向Heroku添加环境变量](img/image_10_010.jpg)
- en: Heroku environment variables
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku环境变量
- en: Tip
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that you must repeat this process on the Codeship configuration project.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您必须在Codeship配置项目上重复此过程。
- en: Creating a Codeship free account
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Codeship免费帐户
- en: 'Codeship is a cloud service for Continuous Integration (CI) tools. It''s pretty
    simple to create an account:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Codeship是一个用于持续集成（CI）工具的云服务。创建帐户非常简单：
- en: Go to [https://codeship.com/sessions/new](https://codeship.com/sessions/new)
    and use the **SIGN UP** button in the top-right corner. You can use your GitHub
    or Bitbucket account; just click your preferred button. As we are using GitHub,
    we will choose GitHub.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://codeship.com/sessions/new](https://codeship.com/sessions/new)，并使用右上角的**注册**按钮。您可以使用GitHub或Bitbucket帐户；只需点击您偏好的按钮。由于我们使用GitHub，我们将选择GitHub。
- en: Click on the **AUTHORIZE APPLICATION** button.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**授权应用程序**按钮。
- en: 'You should see the following screen:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到以下屏幕：
- en: '![Creating a Codeship free account](img/image_10_011.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![创建Codeship免费帐户](img/image_10_011.jpg)'
- en: Codeship dashboard
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: Codeship仪表板
- en: 'The next step is to click on where you are hosting your code. In this case,
    we will click on the ****GitHub**** icon, so we will see the following screen:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是单击您托管代码的位置。在这种情况下，我们将单击****GitHub****图标，因此我们将看到以下屏幕：
- en: '![Creating a Codeship free account](img/image_10_012.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![创建Codeship免费帐户](img/image_10_012.jpg)'
- en: Second step for Codeship configuration
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: Codeship配置的第二步
- en: Copy and paste the GitHub repository URL (https://github.com/<yourusername>/n6b.git)
    created in the GitHub setup process, and paste it into the **Repository Clone
    URL** input, as shown in the previous image.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制并粘贴GitHub存储库URL（https://github.com/<yourusername>/n6b.git），该URL是在GitHub设置过程中创建的，并将其粘贴到**存储库克隆URL**输入中，如前图所示。
- en: Click the **Connect** button.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**连接**按钮。
- en: 'Now we have set up our development environment with three tools: GitHub, Codeship,
    and Heroku. The next step is to create setup and test commands and add a pipeline
    deployment to the Codeship dashboard.'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经使用三种工具（GitHub、Codeship和Heroku）设置了开发环境。下一步是创建设置和测试命令，并将管道部署添加到Codeship仪表板。
- en: Adding environment variables to Codeship
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向Codeship添加环境变量
- en: 'Now let''s do the same as we did with the Heroku dashboard, and add the same
    variables to Codeship:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们像我们在Heroku仪表板中所做的那样，向Codeship添加相同的变量：
- en: Go to [https://codeship.com/projects/](https://codeship.com/projects/) and select
    the chapter-10-yourname project.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://codeship.com/projects/](https://codeship.com/projects/)，并选择chapter-10-yourname项目。
- en: Click on the P**roject Settings** link in the top-right corner, as shown here:![Adding
    environment variables to Codeship](img/image_10_013.jpg)
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的**项目设置**链接，如图所示：![向Codeship添加环境变量](img/image_10_013.jpg)
- en: Project settings menu in the Codeship dashboard
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Codeship仪表板中的项目设置菜单
- en: Click on the **Environment Variables** link.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**环境变量**链接。
- en: Add the Session and MongoDB variables and values, as we previously did with
    the configuration of the Heroku environment variables, and click the **Save configuration**
    button.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加会话和MongoDB变量和值，就像我们之前对Heroku环境变量的配置所做的那样，并点击**保存配置**按钮。
- en: Creating setup and test commands in the Codeship project configuration
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Codeship项目配置中创建设置和测试命令
- en: 'Now we go back to the codeship control panel, and configure the test and dploy
    commands for our application:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们回到codeship控制面板，并为我们的应用程序配置测试和部署命令：
- en: 'Paste the following code into the setup commands text area:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码粘贴到设置命令文本区域：
- en: '[PRE35]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Paste the following code into the test commands text area:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码粘贴到测试命令文本区域：
- en: '[PRE36]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Click on the **Save and go to dashboard** button.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存并转到仪表板**按钮。
- en: Creating the pipeline for deployment on Heroku
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Heroku上创建部署管道
- en: 'Well, we are almost there; now we need to create a pipeline to integrate the
    build with our deployment environment on Heroku:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，我们几乎到了；现在我们需要创建一个管道，将构建与我们在Heroku上的部署环境集成起来：
- en: Click on the **Project Settings** link in the top-right corner and then click
    on the **Deployment** link, as shown here:![Creating the pipeline for deployment
    on Heroku](img/image_10_014.jpg)
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的**项目设置**链接，然后点击**部署**链接，如图所示：![在Heroku上部署的管道创建](img/image_10_014.jpg)
- en: 'At the **Enter branchname** input, type the following name: master.'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**输入分支名称**输入框中，输入以下名称：master。
- en: Click on the **Save** **Pipeline Setting** button.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存** **Pipeline设置**按钮。
- en: On the **Add new deployment pipeline** tab, choose the **Heroku** banner.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加新的部署管道**选项卡中，选择**Heroku**横幅。
- en: 'Now we will fill in the input fields as shown here:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将按照这里显示的输入字段填写：
- en: '![Creating the pipeline for deployment on Heroku](img/image_10_015.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![在Heroku上部署的管道创建](img/image_10_015.jpg)'
- en: Codeship Heroku deployment configuration panel
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: Codeship Heroku部署配置面板
- en: Adding the Heroku API key to Codeship
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Heroku API密钥添加到Codeship
- en: 'To provide the information required in the previous screenshot, we need to
    follow these steps:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供前面截图中所需的信息，我们需要按照以下步骤进行：
- en: Open a new browser window and go to Heroku dashboard at [https://id.heroku.com/login](https://id.heroku.com/login).
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的浏览器窗口，转到Heroku仪表板[https://id.heroku.com/login](https://id.heroku.com/login)。
- en: Click on your **Picture** in the top-right corner, and then click on **Account
    Settings**.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的**图片**，然后点击**账户设置**。
- en: Scroll down the page for API Key and click on **Show API Key**, as shown here:![Adding
    the Heroku API key to Codeship](img/image_10_016.jpg)
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动页面以获取API密钥，并点击**显示API密钥**，如图所示：![将Heroku API密钥添加到Codeship](img/image_10_016.jpg)
- en: Show API Key Heroku dashboard
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 显示API密钥Heroku仪表板
- en: Insert your password and copy the API key.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入密码并复制API密钥。
- en: Go back to the Codeship browser window and paste the key into the **Heroku API
    key** input field.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Codeship浏览器窗口，并将密钥粘贴到**Heroku API密钥**输入字段中。
- en: 'Name your application: n6b-your-own-name.'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名您的应用程序：n6b-your-own-name。
- en: 'Add the application URL: http://chapter-10-your-own-name.herokuapp.com/.'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加应用程序URL：http://chapter-10-your-own-name.herokuapp.com/。
- en: Click on the **Save Deployment** button.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存部署**按钮。
- en: This step completes our continuous integration. Every time we modify our code
    and send the changes to GitHub or Bitbucket, Codeship will run the code and the
    tests we set when we created the Node.js application earlier in this chapter.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步完成了我们的持续集成。每当我们修改代码并将更改发送到GitHub或Bitbucket时，Codeship将运行我们在本章前面创建Node.js应用程序时设置的代码和测试。
- en: At the end of testing, if everything is ok, our code is sent to Heroku and will
    be available at http://chapter-10-yourname.herokuapp.com/.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试结束时，如果一切正常，我们的代码将被发送到Heroku，并且将在http://chapter-10-yourname.herokuapp.com/上可用。
- en: Checking the test and deploy steps on the Codeship dashboard
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Codeship仪表板上检查测试和部署步骤
- en: 'At this point we already have the necessary commands to set test and deploy,
    however we need to check that everything is correctly configured:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们已经有了设置测试和部署所需的命令，但是我们需要检查一切是否正确配置：
- en: Go to [https://codeship.com/sessions/new](https://codeship.com/sessions/new).
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://codeship.com/sessions/new](https://codeship.com/sessions/new)。
- en: Log in to your account.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的账户。
- en: In top-left corner, click on the **Select Project** link.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左上角，点击**选择项目**链接。
- en: Click on the n6b-your-own-name project name and you will see all your commits
    with **Success**, R**unning**, or F**ailed** flags.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击n6b-your-own-name项目名称，您将看到所有带有**成功**、**运行**或**失败**标志的提交。
- en: 'When we click on one of then, we can see the following screenshot with a step-by-step
    process:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击其中一个时，我们可以看到以下带有逐步过程的截图：
- en: '![Checking the test and deploy steps on the Codeship dashboard](img/image_10_017.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![在Codeship仪表板上检查测试和部署步骤](img/image_10_017.jpg)'
- en: Codeship building steps
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: Codeship构建步骤
- en: Here we have a successful build, as we can see the green check icon on the right
    of each step.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们有一个成功的构建，因为我们可以看到每个步骤右侧的绿色勾号图标。
- en: Note that if the testing process fails at any time, the code doesn't go to the
    production server, in this case Heroku.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果测试过程在任何时候失败，代码将不会发送到生产服务器，即Heroku。
- en: Installing Docker and setting up the application
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Docker并设置应用程序
- en: Before we go further, we need to understand what Docker is and the concept of
    containers.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们需要了解Docker是什么以及容器的概念。
- en: Tip
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can read more about containers at this link: [https://www.docker.com/what-docker#/VM](https://www.docker.com/what-docker#/VM).'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此链接阅读有关容器的更多信息：[https://www.docker.com/what-docker#/VM](https://www.docker.com/what-docker#/VM)。
- en: 'Thinking in a very simple way, Docker creates micro machines (that is, operating
    systems) inside an isolated box to run your application, no matter what your platform
    is (Windows, Linux, or OSX). Let''s see what the official Docker site says:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，Docker创建微型机器（即操作系统）在一个隔离的盒子内运行您的应用程序，无论您的平台是Windows、Linux还是OSX。让我们看看官方Docker网站上说了什么：
- en: '*"Docker containers wrap a piece of software in a complete filesystem that
    contains everything needed to run: code, runtime, system tools, system libraries
    - anything that can be installed on a server."*'
  id: totrans-313
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"Docker容器将软件包装在一个完整的文件系统中，其中包含运行所需的一切：代码、运行时、系统工具、系统库 - 任何可以安装在服务器上的东西。"*'
- en: 'So let''s install Docker on your machine. A Windows machine deserves special
    attention, but you can find the relevant information at the following link: [https://docs.docker.com/engine/installation/windows/](https://docs.docker.com/engine/installation/windows/).
    Go to [https://docs.docker.com/](https://docs.docker.com/) and follow the instructions
    for your platform.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们在你的机器上安装Docker。Windows机器需要特别注意，但你可以在以下链接找到相关信息：[https://docs.docker.com/engine/installation/windows/](https://docs.docker.com/engine/installation/windows/)。转到[https://docs.docker.com/](https://docs.docker.com/)并按照你的平台的说明进行操作。
- en: Checking the Docker version
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查Docker版本
- en: 'Now it is time to check the Docker version installed on your machine:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候检查你的机器上安装的Docker版本了：
- en: 'Open the terminal/shell and type the following commands to check the version
    of each part:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端/Shell并输入以下命令来检查每个部分的版本：
- en: '[PRE37]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Creating a Docker file
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个Docker文件
- en: 'To dockerize our application in a container, we need to create two files, a
    Dockerfile and a docker-compose.yml file, to link our application container with
    a MongoDb database:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们的应用程序docker化到一个容器中，我们需要创建两个文件，一个Dockerfile和一个docker-compose.yml文件，以将我们的应用程序容器与MongoDb数据库链接起来：
- en: 'Inside the root folder, create a new file called Dockerfile and add the following
    code:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根文件夹内，创建一个名为Dockerfile的新文件，并添加以下代码：
- en: '[PRE38]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note that the line ENV DB_PORT_27017_TCP_ADDR indicates the Docker container
    port for MongoDB; it's an environment variable.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，行ENV DB_PORT_27017_TCP_ADDR指示了MongoDB的Docker容器端口；这是一个环境变量。
- en: 'Inside the root folder, create a new file called docker-compose.yml and add
    the following code:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根文件夹内，创建一个名为docker-compose.yml的新文件，并添加以下代码：
- en: '[PRE39]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The db line was set up with the ENV DB_PORT_27017_TCP_ADDR db name.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: db行已设置为ENV DB_PORT_27017_TCP_ADDR db名称。
- en: 'Before we go further, let''s check out some useful Docker commands:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们检查一些有用的Docker命令：
- en: '| **Command** | **Description** |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **描述** |'
- en: '| docker ps -a | List all containers |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| docker ps -a | 列出所有容器 |'
- en: '| docker images | List all images |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| docker images | 列出所有镜像 |'
- en: '| docker rm containername | Remove a specific container |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| docker rm containername | 删除特定容器 |'
- en: '| docker rm $(docker ps -a -q) | Remove all containers |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| docker rm $(docker ps -a -q) | 删除所有容器 |'
- en: '| docker rmi imagename | Remove a specific image |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| docker rmi imagename | 删除特定镜像 |'
- en: '| docker rmi $(docker images -q) | Remove all images |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| docker rmi $(docker images -q) | 删除所有镜像 |'
- en: '| docker run containername | Run a container |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| docker run containername | 运行一个容器 |'
- en: '| docker stop containername | Stop a container |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| docker stop containername | 停止一个容器 |'
- en: '| docker stop $(docker ps -a -q) | Stop all containers |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| docker stop $(docker ps -a -q) | 停止所有容器 |'
- en: We have more commands, but during the course of the chapter we will see others.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有更多的命令，但在本章的过程中我们会看到其他命令。
- en: Creating a Docker image
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个Docker镜像
- en: 'At this point we already have the necessary commands to set test and deploy,
    however we need to check that everything is correctly configured:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们已经有了设置测试和部署所需的命令，但是我们需要检查一切是否正确配置：
- en: 'Create the Docker image for your project:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的项目创建Docker镜像：
- en: '[PRE40]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'At the end of the output on the terminal, we can see a message similar to this:
    **Successfully built c3bbc61f92a6**. Now let''s check the image already created.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端的输出末尾，我们可以看到类似于这样的消息：**成功构建c3bbc61f92a6**。现在让我们检查已经创建的镜像。
- en: 'Check the images by opening terminal/shell and typing the following command:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开终端/Shell并输入以下命令来检查图像：
- en: '[PRE41]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Preparing and running the Docker image
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备和运行Docker镜像
- en: 'Now let''s test our Docker image. Before we proceed, we need to make a small
    change to our application:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们测试我们的Docker镜像。在我们继续之前，我们需要对我们的应用程序进行一些小改动：
- en: 'Open the server.js file at the root folder and replace the following code:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开根文件夹中的server.js文件，并替换以下代码：
- en: '[PRE42]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now open the .env file and replace the code with the following lines:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开.env文件，并用以下行替换代码：
- en: '[PRE43]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Tip
  id: totrans-352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Step 1 and step 2 uses local credentials, different from what we do for deployment.
    So after configuring the environment variables on Heroku and Codeship, remove
    the .env file from GitHub tracking, but keep it on your local machine with your
    local credentials.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤1和步骤2使用本地凭据，与我们为部署所做的不同。因此，在配置Heroku和Codeship的环境变量后，从GitHub跟踪中删除.env文件，但在本地机器上保留具有本地凭据的文件。
- en: Now it is time to get a MongoDB image from Docker hub.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候从Docker hub获取一个MongoDB镜像了。
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/Shell并输入以下命令：
- en: '[PRE44]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The previous command will get a new image for MongoDB. You can use the same
    command to get any image from Docker hub.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令将获取一个新的MongoDB镜像。你可以使用相同的命令从Docker hub获取任何镜像。
- en: Tip
  id: totrans-358
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can find more images at this link: [https://hub.docker.com/explore/](https://hub.docker.com/explore/).'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这个链接上找到更多的图像：[https://hub.docker.com/explore/](https://hub.docker.com/explore/)。
- en: 'Start a new MongoDB container named db with the following command:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下命令启动一个新的名为db的MongoDB容器：
- en: '[PRE45]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now we need to link one container to another; type the following command:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要将一个容器链接到另一个；输入以下命令：
- en: '[PRE46]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Go to http://localhost:3000 and you will see your application running. It will
    look the same as it does on your machine.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到http://localhost:3000，你将看到你的应用程序正在运行。它看起来和在你的机器上一样。
- en: Uploading the project image to your Docker hub account
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将项目图像上传到您的Docker hub帐户
- en: Now, is time to upload your image to Docker hub, and make it available to other
    users.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候将你的图像上传到Docker hub，并让其他用户可以使用了。
- en: Tip
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can read more about **Docker hub** at this link: [https://docs.docker.com/docker-hub/](https://docs.docker.com/docker-hub/).'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这个链接上阅读更多关于**Docker hub**的信息：[https://docs.docker.com/docker-hub/](https://docs.docker.com/docker-hub/)。
- en: Go to [https://cloud.docker.com/](https://cloud.docker.com/) and create a free
    account.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://cloud.docker.com/](https://cloud.docker.com/)并创建一个免费帐户。
- en: After confirming your e-mail address, go to the [https://cloud.docker.com](https://cloud.docker.com)
    sign in menu. You will see the following dashboard:![Uploading the project image
    to your Docker hub account](img/image_10_018.jpg)
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认你的电子邮件地址后，转到[https://cloud.docker.com](https://cloud.docker.com)登录菜单。你将看到以下仪表板：![将项目图像上传到您的Docker
    hub帐户](img/image_10_018.jpg)
- en: Docker hub dashboard
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: Docker hub仪表板
- en: When you click on the **REPOSITORIES** button, you will see it is empty. So
    now let's push our Docker image to Docker hub.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击**存储库**按钮时，您会发现它是空的。现在让我们将我们的Docker图像推送到Docker hub。
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/Shell并输入以下命令：
- en: '[PRE47]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Enter your credentials, the ones you created in the registration process.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的凭据，这些是您在注册过程中创建的。
- en: 'To upload the project to Docker hub, run the following command on the terminal/shell:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将项目上传到Docker hub，请在终端/Shell上运行以下命令：
- en: '[PRE48]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Go back to [https://cloud.docker.com/_/repository/list](https://cloud.docker.com/_/repository/list),
    refresh the page, and you will see your repository published on Docker hub.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到[https://cloud.docker.com/_/repository/list](https://cloud.docker.com/_/repository/list)，刷新页面，您将看到您的存储库已发布在Docker
    hub上。
- en: Docker is a powerful tool and must be explored further, but from this chapter
    we have enough knowledge to build Node.js applications with MongoDB using Docker
    containers, which means that you can use the container we've created on any machine.
    It doesn't matter what platform you use, you just need to install Docker and pull
    the image to your machine.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个强大的工具，必须进一步探索，但从本章开始，我们已经有足够的知识来使用Docker容器构建Node.js应用程序与MongoDB，这意味着您可以在任何机器上使用我们创建的容器。无论您使用什么平台，您只需要安装Docker并将图像拉到您的机器上。
- en: You can get any image and start to play with it on your command line.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以获取任何图像，并在命令行上开始使用它。
- en: Summary
  id: totrans-381
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: By the end of this chapter, you should be capable of building and deploying
    an application using all the most modern technologies and tools that we have available
    at the moment to create amazing web applications.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您应该能够使用我们目前可用的所有最现代化的技术和工具来构建和部署应用程序，从而创建令人惊叹的Web应用程序。
- en: We've explored all the resource needed to build an application using continuous
    delivery and Continuous Integration, combining with Git source control, GitHub,
    Codeship, Heroku, and Docker. We also saw how to use environment variables on
    both Heroku cloud services for production and Codeship for tests and continuous
    integration.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探索了构建应用程序所需的所有资源，使用持续交付和持续集成，结合Git源代码控制，GitHub，Codeship，Heroku和Docker。我们还看到了如何在Heroku云服务的生产环境和Codeship的测试和持续集成中使用环境变量。
