- en: Finding and Working with Geographic Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻找和使用地理数据
- en: We have spent a significant amount of time creating and interacting with maps
    in our previous chapters. In all our examples, the geographic data was included.
    In this chapter, we will explain how to find geographic data about any country
    in the world.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的章节中花费了大量时间创建和交互地图。在我们所有的例子中，都包含了地理数据。在本章中，我们将解释如何找到关于世界上任何国家的地理数据。
- en: 'There are typically two sets of data that we will need to create a map in D3:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通常我们需要两组数据来在D3中创建地图：
- en: A dataset that represents the geographic shape of our map (geodata)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示我们地图地理形状的数据集（地理数据）
- en: Some meaningful data that we want to visualize on the map (for example, population
    density by US countries, or unemployment rate by countries in the world)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们想在地图上可视化的有意义的数据（例如，按美国国家的人口密度，或按世界各国的失业率）
- en: 'This chapter is focused on understanding, manipulating, and optimizing geodata
    for map visualizations. We will accomplish these goals by:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是理解、操作和优化地图可视化中的地理数据。我们将通过以下方式实现这些目标：
- en: Explaining three important formats that contain geospatial vector data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释包含地理空间矢量数据的三种重要格式
- en: Finding, downloading, and working with large amounts of map data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻找、下载和使用大量地图数据
- en: Using techniques to build the right geodata file for your map
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用技术构建适合您地图的正确地理数据文件
- en: Geodata file types
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理数据文件类型
- en: 'There are dozens of file formats that represent geographic information. In
    this section, we will focus on three file types: shapefiles, GeoJSON, and TopoJSON.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有数十种文件格式可以表示地理信息。在本节中，我们将关注三种文件类型：shapefiles、GeoJSON和TopoJSON。
- en: What are shapefiles and how do I get them?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shapefiles是什么？我如何获取它们？
- en: Shapefiles are the most popular vector-based file format. They contain polygons
    and lines that represent geographic boundaries. The shapefile format was developed
    by the company Esri as an open standard to work with **geographic information
    systems** (**GIS**). This vector information can also describe other geographic
    entities (rivers, lakes, and railroads). In addition, the file format has the
    ability to store data attributes that are useful when working with visualizations
    (for example, the name of the geographic object, the type, and some relationships).
    Most importantly for us, there is a large repository of free shapefiles located
    at [http://diva-gis.org](http://diva-gis.org). This repository contains a tremendous
    wealth of data at different levels of specificity and granularity.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Shapefiles是最受欢迎的基于向量的文件格式。它们包含代表地理边界的多边形和线条。Shapefile格式是由Esri公司开发的，作为一个开放标准来与**地理信息系统**（GIS）一起使用。这种向量信息也可以描述其他地理实体（如河流、湖泊和铁路）。此外，该文件格式具有存储在可视化工作时有用的数据属性的能力（例如，地理对象名称、类型和一些关系）。对我们来说最重要的是，有一个位于[http://diva-gis.org](http://diva-gis.org)的大型免费shapefiles存储库。这个存储库包含不同详细程度和粒度的大量数据。
- en: Unfortunately for us, shapefiles are in binary format and can be very large.
    This makes them very difficult, if not impossible, to use in standard web development.
    Thankfully, there are some tools to help us leverage the large repository of shapefiles
    and convert them to GeoJSON and TopoJSON. GeoJSON and TopoJSON are JavaScript-friendly,
    much smaller, and easier to use in our web development context. In the previous
    chapters, all of the geographic data was provided in TopoJSON.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，对于我们的情况，shapefiles是二进制格式，并且可能非常大。这使得它们在标准Web开发中使用非常困难，如果不是不可能的话。幸运的是，有一些工具可以帮助我们利用shapefiles的大型存储库，并将它们转换为GeoJSON和TopoJSON。GeoJSON和TopoJSON对JavaScript友好，体积更小，在我们的Web开发环境中更容易使用。在前面的章节中，所有地理数据都提供为TopoJSON。
- en: Acquiring shapefiles for a specific country
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为特定国家获取shapefiles
- en: 'Let''s start with a map of Spain and go through the process of getting our
    first shapefile:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从西班牙的地图开始，通过获取我们的第一个shapefile的过程：
- en: 'Go to [http://www.diva-gis.org/gdata](http://www.diva-gis.org/gdata) and select
    Spain from the drop-down list, as shown in the following screenshot:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[http://www.diva-gis.org/gdata](http://www.diva-gis.org/gdata)，从下拉列表中选择西班牙，如图下截图所示：
- en: '![](img/4f3a34fa-cee1-4148-8c70-7e6898af70ba.png)'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/4f3a34fa-cee1-4148-8c70-7e6898af70ba.png)'
- en: Once Spain is selected, you will see a large selection of geographic data to
    choose from (Roads, Railroads, and so on). Select the Administrative areas option
    to draw the primary boundaries of the country and regions. Click on OK; it will
    take you to the download page.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦选择了西班牙，您将看到一大堆地理数据可供选择（道路、铁路等）。选择“行政区域”选项以绘制国家和地区的边界。点击“确定”；它将带您进入下载页面。
- en: Once it's downloaded, you will have an `ESP_adm.zip` file containing the shapefile
    data for the administrative areas of Spain.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载后，您将得到一个包含西班牙行政区域形状文件数据的`ESP_adm.zip`文件。
- en: After unzipping the file, you will see that the files are organized into progressively
    increasing numbers, `ESP_adm0` to `ESP_adm4`. ESP represents the abbreviation
    of the country and each number represents the increasing amount of detail found
    in each data file. For example, `ESP_adm0` will draw just the outline of Spain,
    while `ESP_adm3` will include the provinces of the country.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压文件后，您会看到文件组织成递增的数字，从`ESP_adm0`到`ESP_adm4`。ESP代表国家的缩写，每个数字代表每个数据文件中找到的细节量的增加。例如，`ESP_adm0`将仅绘制西班牙的轮廓，而`ESP_adm3`将包括国家的省份。
- en: GeoJSON
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GeoJSON
- en: 'GeoJSON is a specific JSON format for describing geographic data structures.
    It is important to know that GeoJSON does the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: GeoJSON是描述地理数据结构的特定JSON格式。重要的是要知道GeoJSON执行以下操作：
- en: Contains all the information required to draw geographic data.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含绘制地理数据所需的所有信息。
- en: Is a standard JSON format and can be used instantly in JavaScript when building
    for the web.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是一个标准的JSON格式，在构建网页时可以立即在JavaScript中使用。
- en: Is required by D3 when defining our `d3.geo.path` function, as seen in the previous
    chapters.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在定义我们的`d3.geo.path`函数时，D3需要它，如前几章所示。
- en: Discretely defines each geographic shape. For example, if two countries share
    a border, the GeoJSON file will completely define both countries, therefore defining
    the border twice. It does not provide any mechanisms to optimize the data file.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精确定义每个地理形状。例如，如果两个国家共享边界，GeoJSON文件将完全定义这两个国家，因此边界被定义了两次。它不提供任何优化数据文件的机制。
- en: Because D3 relies on GeoJSON, we will explain some of the highlights of the
    specification. For a complete explanation, please see [http://geojson.org](http://geojson.org).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于D3依赖于GeoJSON，我们将解释规范的一些亮点。对于完整的解释，请参阅[http://geojson.org](http://geojson.org)。
- en: 'Typically, you will not incorporate the GeoJSON file directly in your D3 work.
    TopoJSON, explained in the next section, offers a more compact solution. However,
    it is still important to understand the specification, so let''s walk through
    the GeoJSON of Spain:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您不会直接将GeoJSON文件集成到您的D3工作中。下一节中解释的TopoJSON提供了一个更紧凑的解决方案。然而，了解规范仍然很重要，所以让我们通过西班牙的GeoJSON来了解一下：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first property of the JSON object identifies the GeoJSON file as a collection
    of features (`FeatureCollection`). Each member of the collection (the array in
    the preceding `features` property) holds a specially formatted JSON object called
    a `feature`. The `d3.geo.path` function that we used in the previous chapters
    knows how to convert the `feature` object into a polygon using an SVG path. By
    iterating over an array of these features and drawing each polygon one by one,
    we create a D3 map.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: JSON对象的第一个属性标识该GeoJSON文件为特征集合（`FeatureCollection`）。集合的每个成员（在先前的`features`属性中的数组）包含一个特殊格式的JSON对象，称为`feature`。我们在前几章中使用的`d3.geo.path`函数知道如何使用SVG路径将`feature`对象转换为多边形。通过迭代这些特征的数组并逐个绘制每个多边形，我们创建了一个D3地图。
- en: 'The `feature` object must adhere to the following properties in order for D3
    to convert the object into a polygon:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`feature`对象必须遵循以下属性，以便D3将对象转换为多边形：'
- en: '`geometry`: This is another GeoJSON specification that contains types and coordinates
    that indicate exactly how to draw the shape. We will not spend a lot of time explaining
    exactly how the specification draws the object. D3 will do all the hard work for
    us. Leveraging the enter/update/exit pattern, we pass a special `d3.geo.path`
    function to each feature. This function will take the geometry information about
    the feature and create the shape for us automatically.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`geometry`：这是另一个GeoJSON规范，它包含类型和坐标，指示如何精确绘制形状。我们不会花太多时间解释规范如何绘制对象。D3会为我们做所有艰苦的工作。利用enter/update/exit模式，我们将一个特殊的`d3.geo.path`函数传递给每个特征。这个函数将获取特征的相关几何信息，并为我们自动创建形状。'
- en: '`properties`: This is any additional data to be attached to the feature. This
    is a typical name/value pair JSON object. In the preceding example, the `properties`
    attribute is leveraged to store the name of the country. This is very helpful
    when we need to find the country later to bind additional data to the visualization.
    See the following screenshot for examples of properties that can be bound to a
    feature object:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`properties`：这是附加到特征上的任何附加数据。这是一个典型的名称/值对 JSON 对象。在前面的示例中，`properties` 属性被用来存储国家的名称。当我们需要稍后找到国家以绑定其他数据到可视化时，这非常有用。请参阅以下截图，了解可以绑定到特征对象上的属性示例：'
- en: '![](img/1f1de33e-82ab-4547-9695-b1c01d9306b6.png)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/1f1de33e-82ab-4547-9695-b1c01d9306b6.png)'
- en: '`id`: This is a placeholder that can be leveraged to store a unique identifier
    to the particular feature in the collection.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：这是一个占位符，可以用来存储集合中特定特征的唯一标识符。'
- en: A quick map in D3 with only GeoJSON
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 D3 中使用仅 GeoJSON 的快速地图
- en: 'For a moment, let''s pretend that TopoJSON does not exist and illustrate how
    only GeoJSON can be used to create a map. This will help illustrate the need for
    TopoJSON in the next section. The following code snippet is a quick example to
    tie everything together; you can also open `example-1.html` from the `chapter-6`
    folder (`http://localhost:8080/chapter-6/example-1.html`) to see the map in your
    browser of the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂时假设 TopoJSON 不存在，并说明仅使用 GeoJSON 如何创建地图。这将在下一节中帮助说明 TopoJSON 的必要性。以下代码片段是一个快速示例，将所有内容结合起来；您也可以从
    `chapter-6` 文件夹中打开 `example-1.html`（`http://localhost:8080/chapter-6/example-1.html`），在您的浏览器中查看以下代码生成的地图：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Notice that the code is almost identical to the examples in the previous chapters.
    The only exception is that we are not calling the `topojson` function (we will
    cover why `topojson` is important next). Instead, we are passing the data from
    the AJAX call directly into the *data join* for the following `enter()` call:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，代码几乎与上一章的示例相同。唯一的例外是我们没有调用 `topojson` 函数（我们将在下一节中解释为什么 `topojson` 很重要）。相反，我们将
    AJAX 调用中的数据直接传递到以下 `enter()` 调用的 *data join* 中：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As predicted, we have our map of Spain:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，我们有了西班牙的地图：
- en: '![](img/a1aec861-0596-499a-83e0-6a6e706191fd.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a1aec861-0596-499a-83e0-6a6e706191fd.png)'
- en: While using GeoJSON directly may seem like the best approach, there are some
    problems. Primarily, a one-to-one conversion of an Esri shapefile to the GeoJSON
    format contains a lot of detail that is probably unnecessary and will create a
    huge GeoJSON file. The larger the file, the more time it will take to download.
    For example, `spain-geo.json` produced an almost 7 MB GeoJSON file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然直接使用 GeoJSON 可能看起来是最好的方法，但存在一些问题。主要问题是，将 Esri shapefile 一对一转换为 GeoJSON 格式包含大量可能不必要的细节，这将创建一个巨大的
    GeoJSON 文件。文件越大，下载所需的时间就越长。例如，`spain-geo.json` 生成了一个几乎 7 MB 的 GeoJSON 文件。
- en: Next, we will explore how TopoJSON can help by modifying several optimization
    levers while still maintaining significant details.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨如何通过修改几个优化杠杆来帮助 TopoJSON，同时仍然保持重要的细节。
- en: TopoJSON basics
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TopoJSON 基础
- en: TopoJSON is another JSON-based format that encodes geographic data. If you remember,
    GeoJSON describes geographic data discretely. This means GeoJSON borders can be
    described twice. The TopoJSON format removes this duplicate behavior, often creating
    files that are 80 percent smaller. This format is extremely helpful when building
    for the web, where data transfer size plays an important role.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: TopoJSON 是另一种基于 JSON 的格式，用于编码地理数据。如果你还记得，GeoJSON 是离散地描述地理数据的。这意味着 GeoJSON 的边界可以被描述两次。TopoJSON
    格式消除了这种重复行为，通常创建的文件大小可以缩小 80%。当在网络上构建时，这种格式非常有用，因为数据传输大小起着重要作用。
- en: 'The term TopoJSON can be confusing. Let''s break it down into its three dimensions:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: TopoJSON 这个术语可能会令人困惑。让我们将其分解为其三个维度：
- en: '**TopoJSON, the serialized format**: The actual serialized JSON format that
    describes how to draw geographic shapes.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TopoJSON，序列化格式**：实际序列化的 JSON 格式，用于描述如何绘制地理形状。'
- en: '**topojson, the command-line utility**: This is a program that a user can run
    to create TopoJSON files from shapefiles. The utility contains many levers to
    further reduce the size of the file.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**topojson，命令行工具**：这是一个用户可以运行的程序，用于从 shapefile 创建 TopoJSON 文件。该实用程序包含许多杠杆，可以进一步减小文件大小。'
- en: '**topojson.js, the JavaScript library**: The library used in your D3 map to
    convert the TopoJSON-serialized format back to GeoJSON, so that the `d3.geo.path`
    functions work correctly.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**topojson.js，JavaScript 库**：在您的 D3 地图中使用的库，用于将 TopoJSON 序列化格式转换回 GeoJSON，以便
    `d3.geo.path` 函数能够正确工作。'
- en: 'To illustrate to what extent TopoJSON can reduce the file size, let''s execute
    the command-line utility against the shapefiles we downloaded earlier. Open the
    command line and execute the following in the same directory where you downloaded
    and unzipped the `ESP_adm.zip` file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明TopoJSON可以减少文件大小的程度，让我们使用命令行工具对之前下载的shapefiles执行命令。打开命令行，并在下载并解压`ESP_adm.zip`文件的同一目录中执行以下操作：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This command creates a new TopoJSON-formatted file named `spain-topo.json`
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过AJAX注入我们刚刚创建的`topojson`文件：
- en: and preserves all the data properties (the `-p` flag) from the `ESP_adm0` shapefile
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 并保留来自`ESP_adm0` shapefile的所有数据属性（使用`-p`标志）
- en: (note that the shapefile needs to come after the `--` in the command-line syntax).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: （注意，在命令行语法中，shapefile需要位于`--`之后）。
- en: The `-o` parameter defines the name of the resulting TopoJSON file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 简化
- en: 'First, let''s compare file sizes with GeoJSON versus TopoJSON for the exact
    same geographic region:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们比较GeoJSON与TopoJSON在相同地理区域上的文件大小：
- en: 'GeoJSON: 6.4 MB'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此命令创建了一个名为`spain-topo.json`的新TopoJSON格式文件。
- en: 'TopoJSON: 379 KB'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'TopoJSON: 379 KB'
- en: This is an incredible compression rate, and we just used the defaults!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种令人难以置信的压缩率，而我们只是使用了默认设置！
- en: 'In order to incorporate TopoJSON into our map, we need to use the `topojson.js`
    JavaScript library and alter a few lines of code. We will start with `example-1.html`.
    The final version can be viewed in `example-2.html` (`http://localhost:8080/chapter-6/example-2.html`):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`-o`参数定义了结果TopoJSON文件的名字。'
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'First, we add the JavaScript library as a `<script>` tag to our file. Now you
    know why we have been using this library all along:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将JavaScript库作为`<script>`标签添加到我们的文件中。现在你知道为什么我们一直在使用这个库：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we inject our `topojson` file that we just created via AJAX:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 保留特定属性
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We add an additional line of code to convert the TopoJSON format to the GeoJSON
    feature format:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加额外的代码行以将TopoJSON格式转换为GeoJSON特征格式：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We need to remember to create our bounding box using the interpolated features:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要记住使用插值特征创建我们的边界框：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we use the *data join* on our new data. As expected, we will see our map
    of Spain. Let''s show them side by side in the following screenshot to compare
    GeoJSON and TopoJSON (with GeoJSON on the left and TopoJSON on the right):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在新的数据上使用*数据连接*。正如预期的那样，我们将看到西班牙的地图。让我们在下面的屏幕截图中并排展示它们，以比较GeoJSON和TopoJSON（GeoJSON在左侧，TopoJSON在右侧）：
- en: '![](img/7206aacb-4946-41b4-a5ff-beb72e30b230.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7206aacb-4946-41b4-a5ff-beb72e30b230.png)'
- en: TopoJSON command-line tips
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TopoJSON命令行技巧
- en: The TopoJSON command-line documentation is very complete ([https://github.com/mbostock/topojson/wiki/Command-Line-Reference](https://github.com/mbostock/topojson/wiki/Command-Line-Reference)).
    However, here are a couple of quick and easy tips to get you started.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: TopoJSON的命令行文档非常完整（[https://github.com/mbostock/topojson/wiki/Command-Line-Reference](https://github.com/mbostock/topojson/wiki/Command-Line-Reference)）。然而，这里有一些快速简便的技巧来帮助你入门。
- en: Preserving specific attributes
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为了将TopoJSON整合到我们的地图中，我们需要使用`topojson.js`JavaScript库并修改几行代码。我们将从`example-1.html`开始。最终版本可以在`example-2.html`（`http://localhost:8080/chapter-6/example-2.html`）中查看：
- en: 'In the GeoJSON section, we illustrated that data properties are often part
    of the geographic data. The `topojson` command gives you the ability to filter
    out the ones you are not interested in, as well as provide a better naming convention
    to the ones you do want to keep. These capabilities are in the `-p` flag and passed
    to the command. For example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在GeoJSON部分，我们说明了数据属性通常是地理数据的一部分。`topojson`命令允许你过滤掉你不想保留的属性，并为你想保留的属性提供更好的命名约定。这些功能在`-p`标志中，并传递给命令。例如：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will create the TopoJSON file, remove all properties except ISO, and rename
    the ISO property to something easy to recognize. You can address multiple properties
    by comma-separating the list:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建TopoJSON文件，移除除ISO以外的所有属性，并将ISO属性重命名为易于识别的名称。您可以通过逗号分隔列表来指定多个属性：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Simplification
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'GeoJSON: 6.4 MB'
- en: Mike Bostock provides an excellent tutorial on simplification, and how it works,
    at [http://bost.ocks.org/mike/simplify/](http://bost.ocks.org/mike/simplify/).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Mike Bostock提供了一个关于简化及其工作原理的优秀教程，可以在[http://bost.ocks.org/mike/simplify/](http://bost.ocks.org/mike/simplify/)找到。
- en: 'Basically, it is a way to reduce geometric complexity through line-simplification
    algorithms. For example, if you do not need much detail in a very jagged coast
    of a country, you can apply line-simplification algorithms to smooth out the jaggedness
    and significantly reduce the size of the TopoJSON file. The command-line parameter
    you use is `-s` to adjust the simplification in the TopoJSON conversion:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这是一种通过线简化算法来减少几何复杂度的方法。例如，如果你不需要一个国家非常崎岖的海岸线有太多细节，你可以应用线简化算法来平滑崎岖度，并显著减小
    TopoJSON 文件的大小。你使用的命令行参数是 `-s` 以调整 TopoJSON 转换中的简化：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We typically realize that when dealing with shapefiles from DIVA-GIS, the best
    range is around 7e-7 to keep within the per-pixel threshold, which is less than
    the area of the map. At this range, the size compression is very significant and
    the map quality is still very acceptable for web development. Consider the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常意识到，在处理 DIVA-GIS 的 shapefiles 时，最佳范围大约在 7e-7，以保持在每像素阈值内，这个阈值小于地图的面积。在这个范围内，尺寸压缩非常显著，并且对于网络开发来说，地图质量仍然非常可接受。考虑以下内容：
- en: '**Original**: 378 KB, great detail and quality:![](img/b0f255d9-ee89-48e3-a11c-1bc58c048241.png)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原始**：378 KB，细节和质量极佳！![图片](img/b0f255d9-ee89-48e3-a11c-1bc58c048241.png)'
- en: '**Simplified at -s 7e-7**: 3.6 KB and acceptable quality:![](img/ed1bd98f-f84b-4c79-b5fd-649d03080af1.png)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化到 -s 7e-7**：3.6 KB，质量可接受！![图片](img/ed1bd98f-f84b-4c79-b5fd-649d03080af1.png)'
- en: '**Very simple at -s 7e-5**: 568 bytes but the map is unrecognizable:![](img/e2fea97e-d050-43dd-a42c-64796c5c982f.png)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 -s 7e-5 时非常简单**：568 字节，但地图无法识别！![图片](img/e2fea97e-d050-43dd-a42c-64796c5c982f.png)'
- en: Merging files
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并文件
- en: 'The final tip involves merging multiple shapefiles into a single TopoJSON file.
    This is extremely useful if you need separate geographic information but want
    to fetch it in a single AJAX request. To append additional files, you add them
    after the `-` in the command line. Consider this command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个技巧涉及将多个 shapefiles 合并成一个单独的 TopoJSON 文件。如果你需要单独的地理信息，但又想通过单个 AJAX 请求获取，这非常有用。要追加额外的文件，请在命令行中的
    `-` 后面添加它们。考虑以下命令：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'It will produce the following object structure, where the data for `ESP_adm0`
    is the data for the country, and `ESP_adm1` is the data for the regions:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 它将产生以下对象结构，其中 `ESP_adm0` 的数据是国家数据，而 `ESP_adm1` 是地区数据：
- en: '![](img/03f298b1-106d-4f6c-8008-ab18f2922c15.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/03f298b1-106d-4f6c-8008-ab18f2922c15.png)'
- en: 'There is also the opportunity to rename the object they will map to in the
    resulting TopoJSON file. Again, this can help create readable code. The renaming
    follows the same convention as renaming specific properties. For example, type
    in this command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你还有机会在生成的 TopoJSON 文件中将它们映射到的对象重命名。同样，这可以帮助创建可读的代码。重命名遵循与重命名特定属性相同的约定。例如，输入以下命令：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding command will create the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将创建以下内容：
- en: '![](img/ae3f9b56-eb2b-465d-b93f-707363a7eed0.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ae3f9b56-eb2b-465d-b93f-707363a7eed0.png)'
- en: 'In this case, you would change your original code, which is as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你需要更改你的原始代码，如下所示：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You have to change it to the following code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须将其更改为以下代码：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is much nicer to look at! Please look at `example-3.html` (`http://localhost:8080/chapter-6/example-3.html`)
    to see how all of this information can be tied together.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来要好得多！请查看 `example-3.html` (`http://localhost:8080/chapter-6/example-3.html`)
    以了解所有这些信息是如何联系在一起的。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: At this point, you should feel confident that you can find and modify datasets
    to your needs. We've covered common locations from where you can acquire data,
    and we've touched on the different types of flags TopoJSON offers. With these
    skills, it is up to you to make sure your data is trimmed and is acquired to your
    visualization needs. This closes the circle of developing maps with D3\. In the
    next chapter, we will refine your craft by focusing on testing your visualizations.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一点，你应该有信心可以找到并修改数据集以满足你的需求。我们已经涵盖了你可以获取数据的一些常见位置，并且我们已经提到了 TopoJSON 提供的不同类型的标志。有了这些技能，确保你的数据被修剪并且符合你的可视化需求就取决于你了。这完成了使用
    D3 开发地图的循环。在下一章中，我们将通过专注于测试你的可视化来提高你的技艺。
