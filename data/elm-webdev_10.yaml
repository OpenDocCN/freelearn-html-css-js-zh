- en: Integrating Elm with Rails
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Elm 与 Rails 集成
- en: Welcome to [Chapter 10](8950bab6-3465-43c5-8ba7-15cb0513c346.xhtml), *Integrating
    Elm with Rails*. The goal of this chapter is to implement simple user authentication
    with Elm on the frontend. For the backend, we will use Ruby on Rails 5.1.5.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到第 10 章，*将 Elm 与 Rails 集成*。本章的目标是在前端使用 Elm 实现简单的用户认证。对于后端，我们将使用 Ruby on Rails
    5.1.5。
- en: 'The topics we will cover include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖的主题包括：
- en: Setting up a basic Rails 5.1.5 app using Codeanywhere
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Codeanywhere 设置基本的 Rails 5.1.5 应用程序
- en: Installing Ruby 2.5.0 and Rails 5.1.5 on Codeanywhere
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Codeanywhere 上安装 Ruby 2.5.0 和 Rails 5.1.5
- en: Creating a brand new Rails project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的 Rails 项目
- en: Integrating Elm with Rails 5.1.5
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Elm 与 Rails 5.1.5 集成
- en: Adding our Elm weather app to our Rails app
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将我们的 Elm 天气应用程序添加到我们的 Rails 应用程序中
- en: 'After completing this chapter, you will be able to:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您将能够：
- en: Install a brand new Rails project on Codeanywhere
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Codeanywhere 上安装一个新的 Rails 项目
- en: Utilize the webpacker gem to work with Elm more easily
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 webpacker 钩子更容易地与 Elm 一起工作
- en: Integrate Elm-powered modules inside an existing Rails application
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在现有的 Rails 应用程序中集成由 Elm 驱动的模块
- en: Setting up a basic Rails 5.1.5 app using Codeanywhere
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Codeanywhere 设置基本的 Rails 5.1.5 应用程序
- en: '**Codeanywhere** is an online **Integrated Development Environment** (**IDE**),
    with a number of great features. You can access it by pointing your browser to
    [codeanywhere.com](http://codeanywhere.com).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**Codeanywhere** 是一个在线 **集成开发环境**（**IDE**），拥有许多优秀功能。您可以通过将浏览器指向 [codeanywhere.com](http://codeanywhere.com)
    来访问它。'
- en: To begin using it, a registration is needed.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用它，需要进行注册。
- en: Before actually being able to use a containerized Ubuntu 14.04 environment to
    run our Rails 5.1.5 app, Codeanywhere requires new registrants to confirm their
    email.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际上能够使用容器化的 Ubuntu 14.04 环境来运行我们的 Rails 5.1.5 应用程序之前，Codeanywhere 要求新注册用户确认他们的电子邮件。
- en: To begin, choose a new Blank Development Stack on Ubuntu 14.04, give it a name,
    for example, elmrails, and click the CREATE button.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请选择一个新的 Ubuntu 14.04 空白开发堆栈，给它起个名字，例如，elmrails，然后点击 CREATE 按钮。
- en: Clicking the CREATE button will make a new Ubuntu 14.04 container, ready for
    us to work on.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 CREATE 按钮，将创建一个新的 Ubuntu 14.04 容器，供我们工作使用。
- en: 'A very important thing to note is the message we get in the editor pane of
    the Codeanywhere app. The editor pane is nothing fancy; it is simply the largest
    pane in an open Codeanywhere app, which lists open files as tabs. The message
    that we get upon a successful container creation lists the name of the container
    and some additional information, as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一个重要事项是我们在 Codeanywhere 应用程序的编辑器面板中收到的消息。编辑器面板并不复杂；它只是打开的 Codeanywhere
    应用程序中最大的面板，以标签的形式列出打开的文件。在成功创建容器后，我们收到的消息会列出容器的名称和一些附加信息，如下所示：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Of all the information listed here, this is the most important to note:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里列出的所有信息中，以下信息最为重要：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The reason why this information is important is simple: that address will be
    the address that you''ll need to open in your browser to see your working Rails
    application. However, it is still too early to do that, since we still need to
    install Ruby 2.5.0 and Rails 5.1.5.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这条信息之所以重要，原因很简单：该地址将是您需要在浏览器中打开以查看您的工作 Rails 应用的地址。然而，现在还为时尚早，因为我们还需要安装 Ruby
    2.5.0 和 Rails 5.1.5。
- en: Installing Ruby 2.5.0 and Rails 5.1.5 on Codeanywhere
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Codeanywhere 上安装 Ruby 2.5.0 和 Rails 5.1.5
- en: 'Once you have completed the container setup, click the link to the Editor,
    and you can get started installing Ruby 2.5.0 and Rails 5.1.5\. Detailed instructions
    on how to do this can be found in the excellent online guide at the gorails.com
    website, at the following address: [https://gorails.com/setup/ubuntu/14.04](https://gorails.com/setup/ubuntu/14.04).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 完成容器设置后，点击编辑器链接，您就可以开始安装 Ruby 2.5.0 和 Rails 5.1.5。有关如何操作的详细说明，请参阅 gorails.com
    网站上的优秀在线指南，地址如下：[https://gorails.com/setup/ubuntu/14.04](https://gorails.com/setup/ubuntu/14.04)。
- en: Here, we'll just list all the commands that need to be run in the console, as
    a quick overview. Note that the following commands can also be found in the code
    files that accompany this chapter.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将只列出需要在控制台中运行的命令，以提供一个快速概览。请注意，以下命令也可以在本章附带代码文件中找到。
- en: 'Note that, at a certain point, you will need to run the command `rbenv install
    2.5.0`, which will make the console seem frozen. To have a better idea of what
    is happening, you can run this command with the following flag:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在某个时刻，您将需要运行命令 `rbenv install 2.5.0`，这将使控制台看起来冻结。为了更好地了解正在发生的事情，您可以使用以下标志运行此命令：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Running this flag with the `rbenv install` command will turn on verbose logging
    so that you can see the progress of the installation in more detail, and not wonder
    if the app is doing anything at all.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`rbenv install`命令运行此标志将开启详细日志记录，这样你可以更详细地看到安装进度，而不用担心应用是否真的在做什么。
- en: 'The complete list of commands that should be run is as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 应该运行的完整命令列表如下：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we have installed all the prerequisites, we'll install a Rails app.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了所有先决条件，我们将安装一个Rails应用。
- en: Creating a brand new Rails project
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的Rails项目
- en: 'To install a new Rails app, your `bash` needs to be inside the `workspace`
    folder. To verify you are in the right location, you should see the following
    output in the console:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装一个新的Rails应用，你的`bash`需要在`workspace`文件夹内。为了验证你处于正确的位置，你应该在控制台中看到以下输出：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, simply run the following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只需运行以下命令：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that the word `simple` can be anything that you want. The word you choose
    to use will determine the folder name inside of which your Rails 5 app will be
    installed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，单词`simple`可以是任何你想要的东西。你选择的单词将决定你的Rails 5应用将被安装的文件夹名称。
- en: Next, in the left-hand pane of the Codeanywhere app, right-click on the bottom-most
    entry, which reads `elmrails`, and in the contextual menu that pops up, click
    the 'refresh' command.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在Codeanywhere应用的左侧面板中，右键单击最底部的条目，即`elmrails`，然后在弹出的上下文菜单中点击`refresh`命令。
- en: 'Doing this will result in the tree structure being refreshed, and now you''ll
    be able to see another folder, titled `simple`, listed inside the `elmrails` project
    folder, like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此操作将导致树结构刷新，现在你将能够看到在`elmrails`项目文件夹内列出的另一个名为`simple`的文件夹，如下所示：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Clicking on the `simple` folder''s title inside the left-hand panel will toggle
    the visibility of the folder structure. If you click it to twirl it open, you''ll
    see the following structure:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 点击左侧面板中`simple`文件夹的标题将切换文件夹结构的可见性。如果你点击它将其展开，你会看到以下结构：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now that you are sure that you have successfully installed Rails, it''s time
    to take it for a spin. Point your bash to the simple folder by running the following
    command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经确认成功安装了Rails，是时候试驾一下了。通过运行以下命令将bash指向`simple`文件夹：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, type the command to spin up a Rails server:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，输入启动Rails服务器的命令：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should get the following output in the console:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在控制台中看到以下输出：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now''s the time to look at our boilerplate Rails app running online. To do
    that, we''ll need to reference the information we got after our Ubuntu container
    was created, that is, we need to check for the following information:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候查看我们在线运行的样板Rails应用了。为了做到这一点，我们需要参考我们创建Ubuntu容器后得到的信息，也就是说，我们需要检查以下信息：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Note that when we ran the `rails s` command, the console output ended with
    this line:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当我们运行`rails s`命令时，控制台输出以这一行结束：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'That means that our Rails app is being served at the address that satisfies
    the following pattern:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的Rails应用正在以下地址提供服务：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you open a new tab in your browser and point it at this address, you''ll
    see the Rails 5 splash screen greeting:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在新标签页的浏览器中指向此地址，你会看到Rails 5的欢迎屏幕：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this section, we have successfully installed Rails. Not only that, but by
    providing the `--webpack=elm` flag to our Rails project creation command, we successfully
    integrated Elm with our new Rails project.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们成功安装了Rails。不仅如此，通过在Rails项目创建命令中提供`--webpack=elm`标志，我们成功地将Elm与我们的新Rails项目集成。
- en: 'That''s why we had to go through a relatively long installation of Rails 5.1.5
    at the beginning of this chapter: to have a simple, painless integration of Rails
    and Elm.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是为什么我们不得不在本章开头进行相对较长的Rails 5.1.5安装：为了实现Rails和Elm的简单、无痛苦的集成。
- en: In the next section, we'll start modifying our Rails app and start using Elm
    inside of it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将开始修改我们的Rails应用，并在其中开始使用Elm。
- en: Integrating Elm with Rails 5.1.5
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成Elm与Rails 5.1.5
- en: When running a `rails new <projectname>` command without passing any additional
    flags, the resultant Rails app that gets created is a default one, without Elm
    integration. It might be a good exercise to delete the folder of the new Rails
    project we made in the previous step and run a new Rails project creation command,
    this time without passing flags. However, to avoid the waste of time involved
    in doing such a thing, we are going to list here some of the additional files
    that get created when we pass the `--webpack=elm` flag to the `rails new <projectname>`
    command.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当不传递任何附加标志运行 `rails new <projectname>` 命令时，创建的 Rails 应用程序是一个默认的应用程序，没有 Elm 集成。删除我们在上一步中创建的新
    Rails 项目的文件夹并运行一个新的 Rails 项目创建命令，这次不传递标志，可能是一个很好的练习。然而，为了避免浪费在这种事情上的时间，我们将在这里列出当我们向
    `rails new <projectname>` 命令传递 `--webpack=elm` 标志时创建的一些附加文件。
- en: To understand how Elm integrates with Rails, the best place to start is the
    `app/javascript` folder, and inside that folder, the `hello_elm.js` file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 Elm 如何与 Rails 集成，最好的起点是 `app/javascript` 文件夹，在该文件夹中，是 `hello_elm.js` 文件。
- en: 'Here are the contents of `hello_elm.js`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `hello_elm.js` 的内容：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This JavaScript file will take the view rendered by the `Main.elm` file and
    embed it inside a `div` element.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 JavaScript 文件将 `Main.elm` 文件渲染的视图嵌入到一个 `div` 元素中。
- en: But where will this `div` element live? That is entirely up to us.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 但这个 `div` 元素将存在于哪里？这完全取决于我们。
- en: For example, the first three lines of `hello_elm.js` are actually one-line JavaScript
    comments, and they give us exact instructions on how to render the Elm-powered
    view in the layout file of our Rails site.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`hello_elm.js` 的前三条实际上是单行 JavaScript 注释，它们为我们提供了如何在 Rails 网站的布局文件中渲染 Elm
    驱动的视图的精确指令。
- en: As the commented-out instruction reads, we need to go to the default layout
    view of our Rails app, which is `application.html.erb`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如注释掉的指令所示，我们需要进入我们 Rails 应用程序的默认布局视图，即 `application.html.erb`。
- en: 'The full path to this file is `simple/app/views/layouts/application.html.erb`. 
    So let''s open this file and add `javascript_pack_tag` to its `head`, like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件的完整路径是 `simple/app/views/layouts/application.html.erb`。因此，让我们打开这个文件，并在其 `head`
    中添加 `javascript_pack_tag`，如下所示：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, to hook everything up, we need to make `application#index` the default
    route that our Rails app will open. We will do that by updating the `routes.rb`
    file, located inside the `simple/config/` folder:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了将所有这些连接起来，我们需要将 `application#index` 设置为我们的 Rails 应用程序将打开的默认路由。我们将通过更新位于
    `simple/config/` 文件夹中的 `routes.rb` 文件来实现这一点：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this file, we only added the `root 'application#index'` route, just above
    the last line of the file. Doing this says to our Rails app that we want to route
    it to the application controller's index action as the default route, or *root*
    route.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中，我们仅在文件的最后一行之上添加了 `root 'application#index'` 路由。这样做告诉我们的 Rails 应用程序，我们希望将其路由到应用程序控制器的索引操作作为默认路由，或称为
    *root* 路由。
- en: 'If we refresh our running app in the browser, at this point we will get the
    following error:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中刷新我们的运行中的应用程序，此时我们会得到以下错误：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: That means that we need to add the index view for our `ApplicationController`.
    To do that, let's simply create a new folder inside the `views` folder. We'll
    call this new folder `application`. Next, inside the `application` folder, let's
    create a new file, which we'll call `index.html.erb`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们需要为我们的 `ApplicationController` 添加索引视图。为此，我们只需在 `views` 文件夹中创建一个新的文件夹。我们将把这个新文件夹称为
    `application`。接下来，在 `application` 文件夹中，让我们创建一个新的文件，我们将称之为 `index.html.erb`。
- en: Note that in order to create folders and files in Codeanywhere, you need to
    right-click on the parent folder that should contain them. Then, choose either
    the *Create Folder* or the *Create File* command, depending on your needs. Once
    you make your choice, a modal will appear, and you will be able to input the name
    of your file or folder, depending on the command you picked.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为了在 Codeanywhere 中创建文件夹和文件，你需要右键单击应该包含它们的父文件夹。然后，根据你的需要选择“创建文件夹”或“创建文件”命令。一旦你做出选择，就会出现一个模态窗口，你将能够输入你的文件或文件夹的名称，具体取决于你选择的命令。
- en: 'Next, open the newly-created `index.html.erb` file and type only one line of
    code inside it:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开新创建的 `index.html.erb` 文件，并在其中仅输入一行代码：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Next, save everything and refresh the page in which you are viewing your Rails
    app (which had the Rails splash screen).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，保存所有更改，并在你查看你的 Rails 应用程序（带有 Rails 启动屏幕）的页面中刷新页面。
- en: 'Next, open the bash tab that has your Rails server running. Notice that the
    console is outputting the following messages:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开运行着 Rails 服务器的 bash 标签页。注意，控制台正在输出以下消息：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'These messages mean that the webpacker is at work, compiling your Elm code
    and integrating it inside your Rails project. As you can see from the output,
    it took about 188 seconds for this compilation to complete. Once it''s done, you
    can refresh the page in which you are previewing your served Rails app, and now,
    instead of the default Rails app splash screen, you should see the following message
    in the upper-center part of the screen:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些消息意味着 webpacker 正在工作，编译你的 Elm 代码并将其集成到你的 Rails 项目中。正如你所看到的输出，这次编译花费了大约 188
    秒。一旦完成，你可以刷新你预览的 Rails 应用的页面，现在，你应该在屏幕的右上部分看到以下消息：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Having your Rails app serve this message in the default route means that you
    have successfully integrated Elm with Rails.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让你的 Rails 应用在默认路由上显示这条消息，意味着你已经成功地将 Elm 集成到 Rails 中。
- en: Now that we have successfully integrated Elm with our Rails app, let's further
    improve on our results by building something a bit more complex.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经成功地将 Elm 集成到我们的 Rails 应用中，让我们通过构建一些更复杂的东西来进一步改进我们的结果。
- en: Adding our Elm weather app to our Rails app
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将我们的 Elm 天气应用添加到我们的 Rails 应用中
- en: In this section, we will improve our Rails app by adding the Elm weather app
    to it. We will use the finished version of the weather app, as we had it at the
    end of [Chapter 8](5fdf7617-7e2c-4ff4-a7eb-28033a281ad5.xhtml), *Adding More Features
    to the Weather App*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过添加 Elm 天气应用来改进我们的 Rails 应用。我们将使用 [第 8 章](5fdf7617-7e2c-4ff4-a7eb-28033a281ad5.xhtml)
    的 *添加更多功能到天气应用* 末尾所拥有的天气应用的完成版本。
- en: 'To do that, let''s open the `elm-package.json` file in the root of our Rails
    app, and update it with additional dependencies, so that the complete updated
    file looks as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，让我们打开 Rails 应用的根目录中的 `elm-package.json` 文件，并添加额外的依赖项，以便完整的更新文件看起来如下：
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we need to install the packages. We can''t install them directly via
    Elm, but rather by using Yarn. The command we need to run is this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装这些包。我们不能直接通过 Elm 来安装它们，而是需要使用 Yarn。我们需要运行的命令如下：
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The console will print out the following to the screen:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台将打印以下内容到屏幕上：
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, we need to make a new file, which we will call `WeatherApp.elm`. Next,
    we can simply copy and paste the complete weather app into this file. The only
    change we need to make to it is in the first line, which needs to look like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个新文件，我们将称之为 `WeatherApp.elm`。接下来，我们可以简单地复制并粘贴完整的天气应用到这个文件中。我们唯一需要做的修改是在第一行，它需要看起来像这样：
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The complete code for the `WeatherApp.elm` file can be found in the code files
    for [Chapter 8](5fdf7617-7e2c-4ff4-a7eb-28033a281ad5.xhtml), *Adding More Features
    to the Weather App*, (since we are using the code that can be found in the `Main.elm`
    file of the improved weather app we completed at the end of [Chapter 8](5fdf7617-7e2c-4ff4-a7eb-28033a281ad5.xhtml),
    *Adding More Features to the Weather App*).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`WeatherApp.elm` 文件的完整代码可以在 [第 8 章](5fdf7617-7e2c-4ff4-a7eb-28033a281ad5.xhtml)
    的代码文件中找到，*添加更多功能到天气应用*（因为我们使用的是在 [第 8 章](5fdf7617-7e2c-4ff4-a7eb-28033a281ad5.xhtml)
    的 *添加更多功能到天气应用* 末尾完成的改进天气应用的 `Main.elm` 文件中的代码）。'
- en: Next, we also need to add the JS file that will be the entry point for our `WeatherApp.elm`
    file. We'll name this JS file similar to `hello_elm.js`, meaning we'll separate
    the words using the underscore character, and we will not capitalize any letters
    in the filename. So, create a new file inside the `javascript/packs` folder and
    call it `weather_app.js`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们还需要添加一个 JS 文件，它将成为我们的 `WeatherApp.elm` 文件的入口点。我们将把这个 JS 文件命名为类似 `hello_elm.js`
    的样子，这意味着我们将使用下划线字符分隔单词，并且文件名中不会使用大写字母。因此，在 `javascript/packs` 文件夹中创建一个新文件，并将其命名为
    `weather_app.js`。
- en: 'Next, add the following code to this new file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将以下代码添加到这个新文件中：
- en: '[PRE26]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, we need to update our `views/application/index.html.erb` file by adding
    the `javascript_pack_tag` and passing it a `div` with the `id` attribute of `weather-app`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要通过添加 `javascript_pack_tag` 并传递一个具有 `id` 属性为 `weather-app` 的 `div` 来更新我们的
    `views/application/index.html.erb` 文件：
- en: '[PRE27]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, we can restart our Rails server:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以重新启动我们的 Rails 服务器：
- en: '[PRE28]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Note that, this time, webpacker is going to take quite some time to compile
    all the newly-added packages (`Http`, `Material`, and `Round`). You should see
    this message in the console after running the `rails s` command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这次，webpacker 将花费相当长的时间来编译所有新添加的包（`Http`、`Material` 和 `Round`）。在运行 `rails
    s` 命令后，你应该在控制台中看到以下消息：
- en: '[PRE29]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, after the compilation is complete, we will see this message logged
    to the console:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在编译完成后，我们将在控制台中看到以下消息：
- en: '[PRE30]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If we open our Rails app in the browser and refresh it, we will see the following
    web page:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中打开我们的 Rails 应用程序并刷新它，我们将看到以下网页：
- en: '![](img/9e2957c8-074e-487a-b670-9a05826a00db.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e2957c8-074e-487a-b670-9a05826a00db.png)'
- en: 'As you can see, our Rails-powered website currently has three parts: a static
    `h1` heading and two separate Elm-powered apps, the weather app and the hello
    app.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们目前由 Rails 驱动的网站有三个部分：一个静态的 `h1` 标题和两个独立的 Elm 应用程序，天气应用程序和问候应用程序。
- en: This means that we have successfully added two separate Elm apps to our Rails
    app. This way, we can slowly start introducing Elm widgets to an existing Rails-powered
    website. This is great if we work in a team of developers who do not know Elm
    but want to see how it integrates with an existing project and learn from it.
    Another possible case where this approach would be useful is if the management
    in our company decides to give Elm a try without going all in.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们已经成功地将两个独立的 Elm 应用程序添加到我们的 Rails 应用程序中。这样，我们可以逐渐开始将 Elm 小部件引入现有的 Rails
    驱动的网站。如果我们是一个不知道 Elm 但想了解它如何与现有项目集成并从中学习的开发者团队，这将非常棒。这种方法的另一个可能用例是，如果我们公司的管理层决定尝试
    Elm 而不是全盘投入。
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we covered the following topics:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了以下主题：
- en: Setting up a basic Rails 5.1.5 app using Codeanywhere
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Codeanywhere 设置基本的 Rails 5.1.5 应用程序
- en: Installing Ruby 2.5.0 and Rails 5.1.5 on Codeanywhere
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Codeanywhere 上安装 Ruby 2.5.0 和 Rails 5.1.5
- en: Creating a brand new Rails project
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个全新的 Rails 项目
- en: Integrating Elm with Rails 5.1.5
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Elm 与 Rails 5.1.5 集成
- en: Adding our Elm weather app to our Rails app
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将我们的 Elm 天气应用程序添加到我们的 Rails 应用程序中
- en: Armed with this knowledge, we can start adding standalone Elm-powered modules
    to our Rails apps.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 带着这些知识，我们可以开始向我们的 Rails 应用程序中添加独立的 Elm 驱动的模块。
- en: 'This brings us to the end of this book. However, your journey with Elm is just
    beginning. Here are some useful resources if you are interested in learning more
    about this excellent language (the following links are listed in no particular
    order):'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的内容到此结束。然而，您与 Elm 的旅程才刚刚开始。以下是一些如果您想了解更多关于这个优秀语言的有用资源（以下链接按无特定顺序列出）：
- en: '[https://github.com/bryanjenningz/25-elm-examples](https://github.com/bryanjenningz/25-elm-examples)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/bryanjenningz/25-elm-examples](https://github.com/bryanjenningz/25-elm-examples)'
- en: '[https://www.smashingmagazine.com/2018/01/learning-elm-drum-sequencer-part-1/](https://www.smashingmagazine.com/2018/01/learning-elm-drum-sequencer-part-1/)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.smashingmagazine.com/2018/01/learning-elm-drum-sequencer-part-1/](https://www.smashingmagazine.com/2018/01/learning-elm-drum-sequencer-part-1/)'
- en: '[http://elmprogramming.com/](http://elmprogramming.com/)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://elmprogramming.com/](http://elmprogramming.com/)'
- en: '[https://www.reddit.com/r/elm/](https://www.reddit.com/r/elm/)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.reddit.com/r/elm/](https://www.reddit.com/r/elm/)'
- en: '[http://elmlang.herokuapp.com/](http://elmlang.herokuapp.com/)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://elmlang.herokuapp.com/](http://elmlang.herokuapp.com/)'
- en: '[https://www.elmlog.com/meetup_groups](https://www.elmlog.com/meetup_groups)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.elmlog.com/meetup_groups](https://www.elmlog.com/meetup_groups)'
- en: '[https://discourse.elm-lang.org/](https://discourse.elm-lang.org/)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://discourse.elm-lang.org/](https://discourse.elm-lang.org/)'
- en: Visit elmcasts.com
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问 elmcasts.com
- en: And finally, a brand new project started by the author of this book. A website
    dedicated to learning Elm.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这本书的作者启动了一个全新的项目。一个专门用于学习 Elm 的网站。
- en: In the tradition of sites such as [railscasts.com](http://railscasts.com) and
    [laracasts.com](http://laracasts.com), I've decided to name it [**elmcasts.com**](http://elmcasts.com).
    The website should be up and running by the time this book is on the market.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 沿着类似 [railscasts.com](http://railscasts.com) 和 [laracasts.com](http://laracasts.com)
    的网站的传统，我决定将其命名为 [**elmcasts.com**](http://elmcasts.com)。当这本书上市时，网站应该已经上线并运行。
