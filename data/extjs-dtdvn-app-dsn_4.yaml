- en: Chapter 4. List and Search
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章。列表和搜索
- en: In previous chapters we looked at preparing the data structure and the basic
    Ext JS architecture, and in [Chapter 3](ch03.html "Chapter 3. Data Input"), *Data
    Input*, we looked at inputting data. However, we couldn't implement the writing
    of the data from the `Quotation` form. This was because we couldn't judge whether
    it was a new addition or an editing process due to listing being non-existent.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们研究了准备数据结构和基本的 Ext JS 架构，在[第 3 章](ch03.html "第 3 章。数据输入")，*数据输入*中，我们学习了如何输入数据。然而，我们无法实现从
    `Quotation` 表单的数据写入，这是因为由于列表不存在，我们无法判断它是新增还是编辑过程。
- en: When you actually construct an application, it is probably most common to build
    the list first and then create the form. However, this time we learned to read
    the form first and then save it. So, just choose whichever way you find easier
    to build with.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当你实际构建一个应用程序时，最常见的情况可能是首先构建列表，然后创建表单。然而，这次我们学习了先读取表单然后保存。所以，只需选择你认为更容易构建的方式即可。
- en: This chapter is mainly about displaying data that was read in the previous chapter.
    However, users will no doubt want to search for data, so we will also learn about
    data searches.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要关于显示上一章读取的数据。然而，用户无疑会想要搜索数据，因此我们还将学习数据搜索。
- en: 'In this chapter you will learn how to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何：
- en: Get data from the database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库获取数据
- en: Apply the acquired data to the store
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将获取的数据应用到商店
- en: Connect the store and the grid
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接商店和网格
- en: Read data to fields
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据读取到字段中
- en: Search the list
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索列表
- en: Creating the Quotation list
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 `Quotation` 列表
- en: 'So, let''s straightaway start with preparing the CT to create the `Quotation`
    list. We will create `view_list.htm` and `view_list.js` (source file: `01_creating_quotation_list/ct/quotation/view_list.html`).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们直接开始准备 CT 来创建 `Quotation` 列表。我们将创建 `view_list.htm` 和 `view_list.js`（源文件：`01_creating_quotation_list/ct/quotation/view_list.html`）。
- en: 'The `view_list.html` file is a reproduction of other `view` files, and so inside
    the internal reading, change the `.js` file in the view that''s being read to
    `view_list.js` (source file: `01_creating_quotation_list/ct/quotation/view_list.js`).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`view_list.html` 文件是其他 `view` 文件的复制品，因此在内部读取时，将正在读取的视图中的 `.js` 文件更改为 `view_list.js`（源文件：`01_creating_quotation_list/ct/quotation/view_list.js`）。'
- en: The `view_list.js` file is also almost similar. It's only a little bit different.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`view_list.js` 文件也几乎相同。只是略有不同。'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By now, preparing the CT should have become a straightforward process.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，准备 CT 应该已经变成一个直接的过程。
- en: Unlike edit, set the `activeItem` in the list to `0`. If you check how it looks
    in a browser, only the `Quotation` panel will be displayed.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 与编辑不同，将列表中的 `activeItem` 设置为 `0`。如果你检查浏览器中的外观，只有 `Quotation` 面板将被显示。
- en: Let's begin to build the inside.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始构建内部结构。
- en: Creating the Quotation model
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 `Quotation` 模型
- en: 'First, you want to build a store, but let''s build a model before that (source
    file: `02_creating_quotation_model/app/model/Quotation.js`).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你想要建立一个商店，但在那之前让我们先构建一个模型（源文件：`02_creating_quotation_model/app/model/Quotation.js`）。
- en: Let's implement the `Quotation` model class that has a newly acquired `id`,
    `customer`, `modified` and `created`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现一个具有新获得的 `id`、`customer`、`modified` 和 `created` 的 `Quotation` 模型类。
- en: 'Define the `id`, `customer` `name`, `modified date/time`, and `created date/time`
    parameters. Then, we''ll implement the store that was used in the model in the
    previous step (source file: `02_creating_quotation_model/app/store/Quotation.js`).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 `id`、`customer`、`name`、`modified 日期/时间` 和 `created 日期/时间` 参数。然后，我们将实现上一步中模型使用的商店（源文件：`02_creating_quotation_model/app/store/Quotation.js`）。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Specify `MyAppQuotation.getGrid` in `directFn`. This is the method name where
    the store is going to acquire the data. Of course, this is a new construction.
    In other words, add a method to the PHP class and with what you have experienced
    so far, you should easily be able to imagine whether it's necessary to add `config.php`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `directFn` 中指定 `MyAppQuotation.getGrid`。这是商店将要获取数据的方法名称。当然，这是一个新的构建。换句话说，向
    PHP 类中添加一个方法，凭借你迄今为止的经验，你应该能够轻松地想象是否需要添加 `config.php`。
- en: 'So, first implement the method even though it is empty (source file: `02_creating_quotation_model/php/classes/MyAppQuotation.php`).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先实现这个方法，即使它是空的（源文件：`02_creating_quotation_model/php/classes/MyAppQuotation.php`）。
- en: 'There is one argument and for this a search condition will be sent from the
    store (source file: `02_creating_quotation_model/php/config.php`).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个参数，为此将从商店发送一个搜索条件（源文件：`02_creating_quotation_model/php/config.php`）。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Updating the Quotation view
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新 `Quotation` 视图
- en: 'You''ve prepared everything for the grid to be displayed, so let''s implement
    the view (source file: `03_update_the_quotation_view/app/view/quotation/List.js`):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经为显示网格准备了所有东西，所以让我们实现视图（源文件：`03_update_the_quotation_view/app/view/quotation/List.js`）。
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here you are only specifying columns. In order to abstract the grid panel,
    we are creating the `MyApp.grid.Panel` class. (source file: `03_update_the_quotation_view/app/grid/Panel.js`).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你只指定了列。为了抽象网格面板，我们正在创建`MyApp.grid.Panel`类。（源文件：`03_update_the_quotation_view/app/grid/Panel.js`）。
- en: We will create the `MyApp.grid.Panel` class that is purely inherited from the
    `Ext.grid.Panel` class.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个纯继承自`Ext.grid.Panel`类的`MyApp.grid.Panel`类。
- en: 'We have just simply succeeded the `Ext.grid.Panel` class. That''s pretty much
    what abstraction is. Now, it should look like the following if you display it:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是简单地继承了`Ext.grid.Panel`类。这就是抽象的全部。现在，如果你显示它，应该看起来如下：
- en: '![Updating the Quotation view](img/5446OS_04_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![更新报价视图](img/5446OS_04_01.jpg)'
- en: It has been a while since we saw an image, so we've displayed a column for now;
    however, let's start to create the necessary objects for this list.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 自从我们看到了图像以来已经有一段时间了，所以我们现在显示了一个列；然而，让我们开始创建这个列表所需的必要对象。
- en: 'The next thing to add is the toolbar with buttons. Let''s go ahead and add
    the following buttons (source file: `03_update_the_quotation_view/app/view/quotation/List.js`):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步要添加的是带有按钮的工具栏。让我们继续添加以下按钮（源文件：`03_update_the_quotation_view/app/view/quotation/List.js`）：
- en: '`Add`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`添加`'
- en: '`Edit`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`编辑`'
- en: '`Delete`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`删除`'
- en: '`Update`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`更新`'
- en: 'This can be implemented using the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过以下代码实现：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We have installed the buttons, so now describe the event handler that deals
    with this to the controller (source file: `03_update_the_quotation_view/app/controller/quotation/List.js`).'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经安装了按钮，现在向控制器描述处理这个事件的处理器（源文件：`03_update_the_quotation_view/app/controller/quotation/List.js`）。
- en: 'In the control for the `MyApp.controller.quotation.List` class, use the following
    selectors and register each handler with the `click` event (at the same time we''ll
    implement each empty handler):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MyApp.controller.quotation.List`类的控制中，使用以下选择器，并将每个处理程序与`click`事件注册（同时我们也将实现每个空处理程序）：
- en: 'For `selector: ''myapp-quotation-list button[action=add]''` use `handler: onItemAdd`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '对于`selector: ''myapp-quotation-list button[action=add]''`使用`handler: onItemAdd`'
- en: 'For `selector: ''myapp-quotation-list button[action=edit]''` use `handler:
    onItemEdit`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '对于`selector: ''myapp-quotation-list button[action=edit]''`使用`handler: onItemEdit`'
- en: 'For `selector: ''myapp-quotation-list button[action=remove]''` use `handler:
    onItemRemove`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '对于`selector: ''myapp-quotation-list button[action=remove]''`使用`handler: onItemRemove`'
- en: 'For `selector: ''myapp-quotation-list button[action=refresh]''` use `handler:
    onStoreRefresh`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '对于`selector: ''myapp-quotation-list button[action=refresh]''`使用`handler: onStoreRefresh`'
- en: If you want to check whether the event responds or not, you can set `disabled`
    to `false`, or reset it and then check the performance. We'll create an implementation
    later so that the status of the disable button changes according to whether the
    list has been selected or not.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想检查事件是否响应，可以将`disabled`设置为`false`，或者重置它然后检查性能。我们稍后会创建一个实现，以便禁用按钮的状态根据列表是否被选中而改变。
- en: 'Next, let''s implement `SearchField` for searches. We''ll place this in the
    top toolbar we created earlier. But before you can do that, you''ll need to implement
    `SearchField`. The `SearchField` is distributed from the beginning as `ux`, but
    this time we''ll use this as a reference to construct anew (source file: `03_update_the_quotation_view/app/form/SearchField.js`).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们实现`SearchField`以进行搜索。我们将将其放置在我们之前创建的顶部工具栏中。但在你能够做到这一点之前，你需要实现`SearchField`。`SearchField`从一开始就是作为`ux`分发的，但这次我们将使用这个作为参考来构建一个新的（源文件：`03_update_the_quotation_view/app/form/SearchField.js`）。
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, add the paging toolbar. Install it along with `SearchField`. Displaying
    100 to 1,000 items at a time would be optimal. In order to declare the use of
    `SearchField`, set `MyApp.form.SearchField` in `requires` (source file: `03_update_the_quotation_view/app/view/quotation/List.js`).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加分页工具栏。将其与`SearchField`一起安装。一次显示100到1,000个项目将是最优的。为了声明使用`SearchField`，在`requires`中设置`MyApp.form.SearchField`（源文件：`03_update_the_quotation_view/app/view/quotation/List.js`）。
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, let''s slightly customize the grid. Modify the `SelectionModel` and
    then make the selection possible with a checkbox. We''ll install this so it offers
    a user interface that lets you delete items collectively. To do this, you''ll
    use `Ext.selection.CheckboxModel` (source file: `03_update_the_quotation_view/app/view/quotation/List.js`).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们稍微自定义一下网格。修改`SelectionModel`，然后通过复选框实现选择功能。我们将安装它，以便提供一个用户界面，允许您批量删除项目。为此，您将使用`Ext.selection.CheckboxModel`（源文件：`03_update_the_quotation_view/app/view/quotation/List.js`）。
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the same way as with `SearchField`, define the reading of `Ext.selection.CheckboxModel`
    in `requires`. Again, regarding the `selModel`, set the `Ext.selection.CheckboxModel`
    instance. If you finish configuring it all, it should look like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与`SearchField`类似，在`requires`中定义`Ext.selection.CheckboxModel`的读取。再次，关于`selModel`，设置`Ext.selection.CheckboxModel`实例。如果你完成所有配置，它应该看起来像这样：
- en: '![Updating the Quotation view](img/5446OS_04_02.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![更新引用视图](img/5446OS_04_02.jpg)'
- en: Implementing the Quotation controller
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现引用控制器
- en: 'It''s starting to look like the real thing! So, now let''s implement the part
    that will actually read and display the data. First, as usual, start with the
    implementation of the CT (source file: `04_implement_quotation_controller/ct/quotation/view_list.html`).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来越来越像真的了！所以，现在让我们实现实际读取和显示数据的部分。首先，像往常一样，从实现CT开始（源文件：`04_implement_quotation_controller/ct/quotation/view_list.html`）。
- en: 'Reproduce `app_edit.html` and change the `.js` file that is being read to `app_list.js`.
    Again, be careful because we''ll read the `api.php` file together (source file:
    `04_implement_quotation_controller/ct/quotation/view_list.js`).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 复制`app_edit.html`并更改正在读取的`.js`文件为`app_list.js`。再次小心，因为我们还将一起读取`api.php`文件（源文件：`04_implement_quotation_controller/ct/quotation/view_list.js`）。
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Be aware that the `direct` setup is also underway.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`direct`设置也在进行中。
- en: 'Now prepare the button that mock fires the `myapp-show` event. Of course we
    will also add the `List` controller (source file: `04_implement_quotation_controller/app/controller/quotation/List.js`).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在准备模拟触发`myapp-show`事件的按钮。当然，我们还将添加`List`控制器（源文件：`04_implement_quotation_controller/app/controller/quotation/List.js`）。
- en: 'Here, we''ll add the `myapp-show` event to `stores`, `refs`, `myapp-quotationlist`,
    and finally we''ll implement the `onShow` method:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将向`stores`、`refs`、`myapp-quotationlist`添加`myapp-show`事件，并最终实现`onShow`方法：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Add the event handler and then implement the `onShow` event. Acquire the list
    view from the store and call the `load` method.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 添加事件处理程序，然后实现`onShow`事件。从store获取列表视图并调用`load`方法。
- en: 'In order to acquire the `list` view and store, make sure that `stores` and
    `refs` are configured. This time, we will also amend the component side, that
    is, the view side (source File: `04_implement_quotation_controller/app/view/quotation/List.js`).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取`list`视图和store，确保`stores`和`refs`已配置。这次，我们还将修改组件侧，即视图侧（源文件：`04_implement_quotation_controller/app/view/quotation/List.js`）。
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Set up the `store` object in the `initComponent` method. Run the CT and if you
    press the button, the store will use the `DirectFn` method that was set up and
    transmissions will occur. Of course the server-side implementation has not happened,
    so nothing will be displayed in the list.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在`initComponent`方法中设置`store`对象。运行CT，如果按下按钮，store将使用已设置的`DirectFn`方法，并发生传输。当然，服务器端实现尚未发生，所以列表中不会显示任何内容。
- en: Loading the grid and implementing toolbar buttons
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载网格和实现工具栏按钮
- en: 'Generally speaking, a grid is not a grid if it can''t read data. For the time
    being, let''s just read the data from the database and display it in the grid
    (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/php/classes/MyAppQuotation.php`).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，如果一个网格不能读取数据，那么它就不是网格。目前，让我们只从数据库中读取数据并在网格中显示（源文件：`05_loading_the_grid_and_implementing_toolbar_buttons/php/classes/MyAppQuotation.php`）。
- en: Here we'll implement the `getGrid` method for `MyAppQuotation.php` that was
    returning empty data.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将为`MyAppQuotation.php`实现`getGrid`方法，该方法返回空数据。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The code for this is a little bit long, so please refer to the source file to
    see the code.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码有点长，请参考源文件查看代码。
- en: 'If we put any old data in the database it will be displayed. But, because the
    items we want to display have increased slightly, we need to amend the JavaScript
    source code. Add the two files `addr` and `note` to the `Quotation` model (source
    file: `05_loading_the_grid_and_implementing_toolbar_buttons/app/model/Quotation.js`).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在数据库中放入任何旧数据，它将显示出来。但是，因为我们想要显示的项目略有增加，我们需要修改JavaScript源代码。将两个文件`addr`和`note`添加到`Quotation`模型中（源文件：`05_loading_the_grid_and_implementing_toolbar_buttons/app/model/Quotation.js`）。
- en: 'Now let''s add the two files we added in the previous step to the `columns`
    property in `MyApp.view.quotation.List` (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/app/view/quotation/List.js`):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将之前步骤中添加的两个文件添加到`MyApp.view.quotation.List`中的`columns`属性（源文件：`05_loading_the_grid_and_implementing_toolbar_buttons/app/view/quotation/List.js`）：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We have added the `addr`, `modified`, and `created` files. The data is random
    but columns are displayed, and the data is read as in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了`addr`、`modified`和`created`文件。数据是随机的，但列被显示，数据读取方式如下截图所示：
- en: '![Loading the grid and implementing toolbar buttons](img/5446OS_04_03.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![加载网格和实现工具栏按钮](img/5446OS_04_03.jpg)'
- en: 'Next comes the building of registration processes, something we left undone
    in [Chapter 3](ch03.html "Chapter 3. Data Input"), *Data Input*. In order to do
    that, first implement the event handler for the toolbar buttons and then display
    the **Add New** and **Editing** screens (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/app/controller/quotation/List.js`).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是注册过程的构建，这是我们留在[第3章](ch03.html "第3章。数据输入") *数据输入*中未完成的事情。为了做到这一点，首先实现工具栏按钮的事件处理程序，然后显示**添加新**和**编辑**屏幕（源文件：`05_loading_the_grid_and_implementing_toolbar_buttons/app/controller/quotation/List.js`）。
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Fire the `myapp-add` event in the list view component (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/app/controller/quotation/Quotation.js`).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表视图组件中触发`myapp-add`事件（源文件：`05_loading_the_grid_and_implementing_toolbar_buttons/app/controller/quotation/Quotation.js`）。
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then describe the `myapp-add` event handler in the `MyApp.controller.quotation.Quotation`
    class. Here, specify the URL in `location.href` and then move the screen. Not
    in a CT, but if you display the whole application in `index.php`, you should be
    able to check the way the screen changes when you click on the **Add** button.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在`MyApp.controller.quotation.Quotation`类中描述`myapp-add`事件处理程序。在这里，指定`location.href`中的URL，然后移动屏幕。不在CT中，但如果你在`index.php`中显示整个应用程序，你应该能够检查点击**添加**按钮时屏幕如何变化。
- en: '![Loading the grid and implementing toolbar buttons](img/5446OS_04_04.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![加载网格和实现工具栏按钮](img/5446OS_04_04.jpg)'
- en: 'After clicking on the **Add** button, you''ll see the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**添加**按钮后，您将看到以下截图：
- en: '![Loading the grid and implementing toolbar buttons](img/5446OS_04_05.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![加载网格和实现工具栏按钮](img/5446OS_04_05.jpg)'
- en: Let's implement the `add new` function. CT is the place to develop it. It will
    happen with `ct/quotation/app_edit.htm`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现`添加新功能`。CT是开发它的地方。它将在`ct/quotation/app_edit.htm`中实现。
- en: First implement the **Save** button. Acquire the **Save** button with the component
    query as `'myapp-quotation-edit button[action=save]'` and set up the `click` event.
    The handler name is `onSave`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先实现**保存**按钮。使用组件查询获取**保存**按钮，查询为`'myapp-quotation-edit button[action=save]'`，并设置`click`事件。处理程序名称为`onSave`。
- en: 'Let''s create it in a way that when the **Save** button is pressed, the event
    handler is registered in the `MyApp.controller.quotation.Edit` class (source file:
    `05_loading_the_grid_and_implementing_toolbar_buttons/app/controller/quotation/Edit.js`).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以这样的方式创建它，当按下**保存**按钮时，事件处理程序将在`MyApp.controller.quotation.Edit`类中注册（源文件：`05_loading_the_grid_and_implementing_toolbar_buttons/app/controller/quotation/Edit.js`）。
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We'll also implement the inside of the handler.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将实现处理程序的内部。
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Call the `submit` method for the form in `onSave` and transmit the position
    to the server side. Next comes server-side implementation.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onSave`中调用表单的`submit`方法，并将位置传输到服务器端。接下来是服务器端实现。
- en: The Ext Direct module has already been prepared, and the processing will be
    implemented there. You probably remember the method is called `writeForm`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Ext Direct模块已经准备好，处理将在那里实现。你可能记得方法名为`writeForm`。
- en: 'Here we''ll implement the `writeForm` method. The code is very long, so again
    please refer to the source file (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/php/classes/MyAppQuotation.php`).'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将实现`writeForm`方法。代码非常长，所以请再次参考源文件（源文件：`05_loading_the_grid_and_implementing_toolbar_buttons/php/classes/MyAppQuotation.php`）。
- en: With this method the received position is being stored in the `Quotation` table.
    We are already storing certain data in quotations, so write the data in a different
    table as well.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方法，接收到的位置正在存储在`Quotation`表中。我们已经在引用中存储了某些数据，所以也在不同的表中写入数据。
- en: In order to guarantee that correct data is written, you need to use `Transaction`,
    so use `begin`, `rollback`, and `commit`. In MySQL, if we use `last_insert_id()`,
    we can acquire the previous ID that we wrote.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保正确写入数据，您需要使用`Transaction`，因此使用`begin`、`rollback`和`commit`。在MySQL中，如果我们使用`last_insert_id()`，我们可以获取我们之前写入的ID。
- en: Use this and set up the parent for quotations. In CT, even if we perform the
    screen transfer process, it will remain as it is when it loads. It should look
    like the following URL.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此方法并设置引用的父级。在CT中，即使我们执行屏幕转换过程，它加载时也会保持原样。它应该看起来像以下URL。
- en: '`<hostname>/ct/quotation/app_edit.html#!/quotation/id=XX`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`<hostname>/ct/quotation/app_edit.html#!/quotation/id=XX`'
- en: 'Now, if we run it in the application, the URL will change in the following
    way:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们运行应用程序，URL将按以下方式更改：
- en: '`<hostname>/#!/quotation/id=XX`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`<hostname>/#!/quotation/id=XX`'
- en: With that present status, start reading again. The specific data you used has
    disappeared and just one item is being displayed. This is the reason why we stopped
    at creating mock data in [Chapter 3](ch03.html "Chapter 3. Data Input"), *Data
    Input*.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种状态下，重新开始读取。您使用的具体数据已经消失，只显示一个项目。这就是我们在[第3章](ch03.html "第3章。数据输入")中停止创建模拟数据的原因，*数据输入*。
- en: We need to expand the `readForm` method, which is at the root of all of this.
    However, before that, in order to have the ID cross over for the `readForm` argument,
    first amend the `config.php` file.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要扩展`readForm`方法，这是所有这些功能的根源。然而，在此之前，为了使ID能够跨过`readForm`参数，首先修改`config.php`文件。
- en: 'We will change the argument in the `readForm` method of the `MyAppQuotation`
    class from `0` to `1` (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/php/config.php`).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把`MyAppQuotation`类的`readForm`方法中的参数从`0`改为`1`（源文件：`05_loading_the_grid_and_implementing_toolbar_buttons/php/config.php`）。
- en: 'Once we have amended the `config.php` file, we will amend the `readForm` method
    so it can actually receive arguments (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/php/classes/MyAppQuotation.php`).'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们修改了`config.php`文件，我们将修改`readForm`方法，使其能够接收参数（源文件：`05_loading_the_grid_and_implementing_toolbar_buttons/php/classes/MyAppQuotation.php`）。
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Set the `$id` argument in the `readForm` method to identify the target. Now,
    this time, do the same at the JavaScript side (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/app/view/quotation/Edit.js`).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在`readForm`方法中将`$id`参数设置为标识目标。现在，这次在JavaScript端（源文件：`05_loading_the_grid_and_implementing_toolbar_buttons/app/view/quotation/Edit.js`）也做同样的操作。
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: With this, the ID can transmit to the server side. Now let's implement the main
    `readForm` method.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，ID可以传输到服务器端。现在让我们实现主要的`readForm`方法。
- en: 'This is the implementation of the inside of the `readForm` method that we amended
    the arguments to earlier. Because the source code is very long, please refer to
    the source file for the code (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/php/classes/MyAppQuotation.php`).'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是修改了之前提到的参数的`readForm`方法内部的实现。由于源代码非常长，请参考源文件中的代码（源文件：`05_loading_the_grid_and_implementing_toolbar_buttons/php/classes/MyAppQuotation.php`）。
- en: After you have read the data from the `Quotation` table with the ID that you
    set up, acquire the data from the `Quotations` table, convert the array into JSON,
    and save it.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在您使用您设置的ID从`Quotation`表读取数据后，从`Quotations`表获取数据，将数组转换为JSON，并保存。
- en: Customer names are dependent on the `MyApp.store.Customer` data. If you want
    to match it with the customer table in the database, please customize it to read
    the data via `direct` to the store. Pretty simple!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 客户名称依赖于`MyApp.store.Customer`数据。如果您想与数据库中的客户表匹配，请将其定制为通过`direct`直接读取数据。很简单！
- en: Managing toolbar buttons depending on the grid selection's status
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据网格选择状态管理工具栏按钮
- en: Now reading and writing of the data is complete. There's only the `Add` function
    in the list, so at present we can only add new information. Let's create it so
    we can click on the **Edit** and **Remove** buttons. After this we can implement
    the various functions. This implementation happens in `ct/quotation/app_list.html`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在读取和写入数据已完成。列表中只有`添加`功能，所以目前我们只能添加新信息。让我们创建它，这样我们就可以点击**编辑**和**删除**按钮。之后我们可以实现各种功能。这个实现发生在`ct/quotation/app_list.html`。
- en: Let's control the events when items are selected and deselected in the list.
    Also, we'll implement it so when you double-click on an item, it will perform
    in the same way as when you click on the **Edit** button.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们控制列表中项目选择和取消选择时的事件。我们还将实现当双击项目时，它将以与点击**编辑**按钮相同的方式执行。
- en: 'We''ll add the following event handler to the process occurring in the control
    of the `init` method of the `MyApp.controller.quotation.List` class (source file:
    `06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/List.js`).'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向`MyApp.controller.quotation.List`类的`init`方法控制过程中添加以下事件处理器（源文件：`06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/List.js`）。
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following three are event handlers that will listen to specific events:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下三个是监听特定事件的处理器：
- en: '`select`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select`'
- en: '`itemdblclick`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`itemdblclick`'
- en: '`deselect`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deselect`'
- en: 'Let''s go ahead and implement the various event handlers that will listen to
    the preceding three events. Next, we''ll implement a handler to the previous step
    (source file: `06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/List.js`).'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续实现将监听前三个事件的各个事件处理器。接下来，我们将实现前一步骤的事件处理器（源文件：`06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/List.js`）。
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Regarding selections, we'll only have the **Edit** button available when one
    item is selected. We'll make **Remove** available even when multiple items are
    selected. Both the **Edit** and **Remove** buttons will be unavailable when no
    items are selected.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 关于选择，当选择一个项目时，我们只会提供**编辑**按钮。即使选择多个项目，我们也会提供**删除**按钮。当没有选择任何项目时，**编辑**和**删除**按钮都将不可用。
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: When double-clicked, the `myapp-edit` event will fire, and the selected item
    ID will be added to the argument.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当双击时，将触发`myapp-edit`事件，并将选定的项目ID添加到参数中。
- en: 'Now all that remains is to implement the process for when the **Edit** and
    **Remove** buttons are pressed. The implementation of the **Edit** button happens
    in the following way:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在剩下的只是实现当按下**编辑**和**删除**按钮时的过程。**编辑**按钮的实现方式如下：
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The process is mostly the same as for `onItemDblClick`; however, the `record`
    object is not passed across by the argument, so acquire the `record` object that
    has been selected from `SelectionModel`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程与`onItemDblClick`类似，但是`record`对象不是通过参数传递的，因此从`SelectionModel`获取已选定的`record`对象。
- en: 'So, if you implement the `myapp-edit` event handler, it''s going to start to
    feel like the end. The `myapp-edit` event handler will be implemented by the `MyApp.controller.quotation.Quotation`
    controller (source file: `06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/Quotation.js`).'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你实现了`myapp-edit`事件处理器，它将开始感觉像是结束。`myapp-edit`事件处理器将由`MyApp.controller.quotation.Quotation`控制器实现（源文件：`06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/Quotation.js`）。
- en: '[PRE22]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Looking at the `requestParams` property, we're trying to decide whether or not
    there is a query. However, this will be configured in the `SearchField`, which
    will be implemented later.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`requestParams`属性，我们正在尝试决定是否存在查询。然而，这将在稍后实现的`SearchField`中配置。
- en: 'Change one line of the `onShow` method implementation in the following way:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式更改`onShow`方法实现中的一行：
- en: '[PRE23]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: With this, if you double-click or if you click on the **Edit** button, the URL
    will change. If you check the whole application, when you click on the **Edit**
    button, you can check the particular screen where data is being read.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，如果你双击或点击**编辑**按钮，URL将改变。如果你检查整个应用程序，当你点击**编辑**按钮时，你可以检查正在读取数据的特定屏幕。
- en: 'Next, implement the **Delete** button (source file: `06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/List.js`).'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，实现**删除**按钮（源文件：`06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/List.js`）。
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In terms of structure, it''s the same as the **Edit** button. It fires the
    `myapp-remove` event. In the same way, `myapp-remove` implements the event handler
    in `MyApp.controller.quotation.Quotation` (source file: `06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/Quotation.js`).'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在结构上，它与**编辑**按钮相同。它触发`myapp-remove`事件。同样，`myapp-remove`在`MyApp.controller.quotation.Quotation`中实现了事件处理器（源文件：`06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/Quotation.js`）。
- en: '[PRE25]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We are calling the `direct` function called `MyAppQuotation.removeItems`. We
    haven't implemented this method yet. It's for deleting items, so let's do it quickly.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在调用名为 `MyAppQuotation.removeItems` 的 `direct` 函数。我们尚未实现此方法。它是用于删除项的，所以让我们快速完成它。
- en: 'We''re going to add a new `removeItems (len:1)` method to the `MyAppQuotation`
    class (source file: `06_management_toolbar_buttons_depend_on_grid_selection_status/php/config.php`).'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向 `MyAppQuotation` 类添加一个新的 `removeItems (len:1)` 方法（源文件：`06_management_toolbar_buttons_depend_on_grid_selection_status/php/config.php`）。
- en: 'Let''s implement the method we added previously. The code is very long, so
    please refer to the source files (source file: `06_management_toolbar_buttons_depend_on_grid_selection_status/php/classes/MyAppQuotation.php`).'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现之前添加的方法。代码非常长，所以请参考源文件（源文件：`06_management_toolbar_buttons_depend_on_grid_selection_status/php/classes/MyAppQuotation.php`）。
- en: 'This method is not for physical deletion but for logic deletion after renewing
    the status of the `UPDATE` text. After you have finished with this process, we
    would call `onStoreRefresh` from the client side; however, it still hasn''t been
    implemented so let''s implement it (source file: `06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/List.js`).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法不是用于物理删除，而是在更新 `UPDATE` 文本的状态后进行逻辑删除。完成此过程后，我们将从客户端调用 `onStoreRefresh`；然而，它尚未实现，所以让我们实现它（源文件：`06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/List.js`）。
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This is actually only executing the toolbar renewal process, but it won''t
    run without the store being configured on the toolbar. So for a final touch, let''s
    set up the store in the toolbar (source file: `06_management_toolbar_buttons_depend_on_grid_selection_status/app/view/quotation/List.js`).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上只是执行工具栏更新过程，但没有在工具栏上配置存储，它将不会运行。所以为了最后的润色，让我们在工具栏中设置存储（源文件：`06_management_toolbar_buttons_depend_on_grid_selection_status/app/view/quotation/List.js`）。
- en: '[PRE27]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now, it will automatically execute the reload process after the deletion process.
    With this we have implemented the process from start to finish. It was a rather
    complicated and long journey! For `Bill`, please implement it in the same way
    as with `Quotation`, as the process to set it up is mostly the same.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在删除过程之后，它将自动执行重新加载过程。通过这种方式，我们已经实现了从开始到结束的过程。这是一段相当复杂且漫长的旅程！对于 `Bill`，请按照与
    `Quotation` 相同的方式实现它，因为设置过程基本上是相同的。
- en: Using a search trigger field and a relation URL hash
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用搜索触发字段和关系 URL 哈希
- en: Finally, let's implement the `SearchField` in the top-right corner of the screen.
    Actually, it is already implemented on the client side.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们在屏幕右上角实现 `SearchField`。实际上，它已经在客户端实现了。
- en: When we are calling `getGrid` with the `cond` argument, the search criteria
    is being transmitted. That is to say, we just need to implement on the server
    side. Let's amend this quickly.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 `cond` 参数调用 `getGrid` 时，搜索条件正在被传输。也就是说，我们只需要在服务器端实现。让我们快速修改。
- en: 'This just shows a section that has been amended. To see the whole section of
    the source code, please refer to the source files (source file: `07_using_search_trigger_field_and_relation_url_hash/php/classes/MyAppQuotation.php`).'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是显示了一个已修改的部分。要查看整个源代码部分，请参考源文件（源文件：`07_using_search_trigger_field_and_relation_url_hash/php/classes/MyAppQuotation.php`）。
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'With `$cond`, the following parameters are sent:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `$cond`，以下参数被发送：
- en: '`query`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query`'
- en: '`page`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`页面`'
- en: '`start`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start`'
- en: '`limit`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`limit`'
- en: The character string you inputted in the `SearchField` is being stored in the
    query. Afterwards, you just need to take that character string and add new conditions
    to SQL.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您在 `SearchField` 中输入的字符串将被存储在查询中。之后，您只需将那个字符串添加到 SQL 中的新条件即可。
- en: We won't implement it here, but by applying `page`, `start`, and `limit` to
    SQL, the paging process will start.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里不会实现它，但通过将 `page`、`start` 和 `limit` 应用到 SQL 中，分页过程将开始。
- en: Again, to set the display order when you click on the column, the sort functionality
    is added and sent. Using that data, if we add ORDER BY, you can adjust the order.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，为了在点击列时设置显示顺序，我们添加了排序功能并将其发送。使用这些数据，如果我们添加 ORDER BY，我们可以调整顺序。
- en: So in order to get closer to the real application, have a go at the implementation.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了更接近真实的应用，尝试实现它。
- en: Summary
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Until now we created the data structure, the application architecture, and implemented
    data sending and data receiving methods. But currently we can only see the data
    in a grid.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们创建了数据结构、应用程序架构，并实现了数据发送和接收方法。但当前我们只能在一个网格中看到数据。
- en: It's not hard to imagine a situation where a manager in a company wants to see
    this data in a chart for a report or a presentation. So in the next chapter we'll
    learn how to design various types of visual charts.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，一个公司的经理想要将这类数据以图表的形式展示在报告或演示文稿中，这并不困难。因此，在下一章中，我们将学习如何设计各种类型的可视化图表。
