- en: Chapter 6\. Sequelize
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。Sequelize
- en: 'Sequelize is a promise-based ORM working for Node.js v4 and later. This ORM
    supports many dialects, such as:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Sequelize是一个基于承诺的ORM，适用于Node.js v4及更高版本。这个ORM支持许多方言，比如：
- en: '`PostgreSQL`'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PostgreSQL`'
- en: '`MySQL`'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MySQL`'
- en: '`SQLite`'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SQLite`'
- en: '`MSSQL`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MSSQL`'
- en: This provides a solid support for transactions. With Sequelize you have the
    possibility of using `sequelize-typescript`, which provides decorators to put
    in your entity and manages all the fields of your model, with types and constraints.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这为事务提供了可靠的支持。使用Sequelize，您可以使用`sequelize-typescript`，它提供了装饰器来放置在您的实体中，并管理模型的所有字段，带有类型和约束。
- en: Also, Sequelize comes from many hooks providing you with the significant advantage
    of being able to check and manipulate your data at any level of the transaction.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Sequelize来自许多钩子，为您提供了重要的优势，可以在事务的任何级别检查和操作数据。
- en: In this chapter, we will see how to configure your database using `postgresql`
    and how to configure the connection to your database. After that we will see how
    to implement our first entity, which will be a simple `User` entity and then how
    to create a provider for this entity in order to inject the entity into a `UserService`.
    We will also see the migration system through `umzung`, and how to create our
    first migration file.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何使用`postgresql`配置您的数据库以及如何配置到您的数据库的连接。之后，我们将看到如何实现我们的第一个实体，这将是一个简单的`User`实体，然后如何为此实体创建一个提供者，以便将实体注入到`UserService`中。我们还将通过`umzug`看到迁移系统，以及如何创建我们的第一个迁移文件。
- en: You can have a look on the on the `src/modules/database`, `src/modules/user`,
    `/src/shared/config`, and `/src/migrations` `/migrate.ts` of the repository.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看存储库的`src/modules/database`，`src/modules/user`，`/src/shared/config`和`/src/migrations`
    `/migrate.ts`。
- en: Configure Sequelize
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Sequelize
- en: In order to be able to use Sequelize, we have first to set up the connection
    between sequelize and our database. In order to do that, we will create the `DatabaseModule`,
    which will contain the provider of the sequelize instance.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够使用Sequelize，我们首先必须设置sequelize和我们的数据库之间的连接。为此，我们将创建`DatabaseModule`，其中将包含sequelize实例的提供者。
- en: In order to set up this connection, we will define a configuration file, which
    will have as properties all you need to be connected to your database. This configuration
    will have to implement the `IDatabaseConfig` interface in order to void to forget
    some parameters.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置这个连接，我们将定义一个配置文件，其中将包含连接到数据库所需的所有属性。此配置将必须实现`IDatabaseConfig`接口，以避免忘记一些参数。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This configuration should be set up as the following example, and set the parameters
    through the environment variable or the default value.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置应该设置为以下示例，并通过环境变量或默认值设置参数。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After the configuration, you have to create the appropriate provider, which
    will have the purpose to create the instance of sequelize using the right configuration.
    In our case we just set up the environment configuration, but you can set up all
    the configuration with the same pattern, you just need to change the values.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完成后，您必须创建适当的提供者，其目的是使用正确的配置创建sequelize实例。在我们的情况下，我们只是设置了环境配置，但您可以使用相同的模式设置所有配置，只需要更改值。
- en: This instance is for you to be aware about the different model that should be
    provided. In order to tell sequelize which model we need, we use the `addModels`
    method on the instance and pass an array of model. Of course, in the following
    section we will see how to implement a new model.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实例是让你了解应该提供的不同模型。为了告诉sequelize我们需要哪个模型，我们在实例上使用`addModels`方法，并传递一个模型数组。当然，在接下来的部分中，我们将看到如何实现一个新模型。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This provider will return the instance of Sequelize. This instance will be useful
    to use the transaction provided by Sequelize. Also, in order to be able to inject
    it, we have provided in the `provide` parameter, the name of the token `SequelizeInstance`,
    which will be used to inject it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此提供者将返回Sequelize的实例。这个实例将有助于使用Sequelize提供的事务。此外，为了能够注入它，我们在`provide`参数中提供了令牌`SequelizeInstance`的名称，这将用于注入它。
- en: Sequelize also provides a way to immediately synchronize your model and your
    database using `sequelize.sync()`. This synchronisation should not be used in
    production mode, because it recreates a new database and removes all of the data
    each time.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Sequelize还提供了一种立即同步模型和数据库的方法，使用`sequelize.sync()`。这种同步不应该在生产模式下使用，因为它每次都会重新创建一个新的数据库并删除所有数据。
- en: 'We have now set up our Sequelize configuration, and we need to set up the `DatabaseModule`
    as shown in the following example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经设置好了我们的Sequelize配置，并且需要设置`DatabaseModule`，如下例所示：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We defined the `DatabaseModule` as a `Global` in order to be added into all
    the modules as a related module, letting you inject the provider `SequelizeInstance`
    into any module as following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`DatabaseModule`定义为`Global`，以便将其添加到所有模块作为相关模块，让您可以将提供者`SequelizeInstance`注入到任何模块中，如下所示：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We now have a complete working module to access our data in the database.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个完整的工作模块来访问我们数据库中的数据。
- en: Create a model
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个模型
- en: After having set up the sequelize connection, we have to implement our model.
    As seen in the previous section, we tell Sequelize that we will have the `User`
    model using this method `sequelize.addModels([User]);`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好sequelize连接后，我们必须实现我们的模型。如前一节所示，我们告诉Sequelize我们将使用此方法`sequelize.addModels([User]);`来拥有`User`模型。
- en: You now see all of the required features to set up it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在看到了设置它所需的所有功能。
- en: '@Table'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '@Table'
- en: 'This decorator will allow you to configure our representation of the data,
    and here are some parameters:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个装饰器将允许您配置我们对数据的表示，以下是一些参数：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `timestamp` parameter will tell you that you want to have an `updatedAt`
    and `deletedAt` columns. The `paranoid` parameter allows you to soft delete data
    instead of removing it to lose your data. If you pass `true`, Sequelize will expected
    a `deletedAt` column in oder to set the date of the remove action.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`timestamp`参数将告诉你想要有`updatedAt`和`deletedAt`列。`paranoid`参数允许你软删除数据而不是删除它以避免丢失数据。如果你传递`true`，Sequelize将期望有一个`deletedAt`列以设置删除操作的日期。'
- en: The `underscored` parameter will automatically transform all of the camelcase
    columns into underscored columns.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`underscored`参数将自动将所有驼峰命名的列转换为下划线命名的列。'
- en: The `freezTableName` will provide a way to avoid Sequelize to pluralize the
    name of the table.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`freezTableName`将提供一种避免Sequelize将表名变为复数形式的方法。'
- en: The `tableName` allows you to set the name of the table.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`tableName`允许你设置表的名称。'
- en: 'In our case we only use `timestamp: true, tableName: ''users''` in order to
    get the `updatedAt` and `createdAt` column and name the table as `users`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '在我们的案例中，我们只使用`timestamp: true, tableName: ''users''`来获取`updatedAt`和`createdAt`列，并将表命名为`users`。'
- en: '@column'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '@column'
- en: This decorator will help define our column. You can also not pass any parameter,
    so in this case Sequelize will try to infer the column type. The types that can
    be inferred are `string`, `boolean`, `number`, `Date` and `Blob`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个装饰器将帮助定义我们的列。你也可以不传递任何参数，这样Sequelize将尝试推断列类型。可以推断的类型包括`string`、`boolean`、`number`、`Date`和`Blob`。
- en: Some parameter allows us to define some constraints on the column. Let’s imagine
    the `email` column, where we would like this email as a string and that cannot
    be null, so the email has to be unique. Sequelize can recognize an email, but
    we have to tell it how to validate the email passing the `validate#isUnique` method.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一些参数允许我们在列上定义一些约束。比如，假设`email`列，我们希望这个电子邮件是一个字符串，并且不能为空，所以这个电子邮件必须是唯一的。Sequelize可以识别电子邮件，但我们必须告诉它如何验证电子邮件，通过传递`validate#isUnique`方法。
- en: Take a look at the following example.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的例子。
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the previous example, we passed some options, but we could also use some
    decorator as `@AllowNull(value: boolean)`, `@Unique` or even `@Default(value:
    any)`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的示例中，我们传递了一些选项，但我们也可以使用一些装饰器，如`@AllowNull(value: boolean)`，`@Unique`甚至`@Default(value:
    any)`。'
- en: To set an `id` column, the `@PrimaryKey` and `@AutoIncrement` decorators are
    an easy way to set up the constraint.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置一个`id`列，`@PrimaryKey`和`@AutoIncrement`装饰器是设置约束的一种简单方法。
- en: Create the User model
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建用户模型
- en: Now that we have seen some useful decorator, let’s create our first model, the
    `User`. In order to do that, we will create the class that has to extend from
    the base class `Model<T>`, and this class takes a template value for the class
    itself.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了一些有用的装饰器，让我们创建我们的第一个模型，`User`。为了做到这一点，我们将创建一个类，该类必须扩展自基类`Model<T>`，这个类需要为自身的模板值。
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We now add the `@Table()` decorator in order to configure our model. This decorator
    takes options corresponding to the interface `DefineOptions` and as we described
    in the ***@Table section*** we will pass as options the timestamp as true and
    the name of the table.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们添加了`@Table()`装饰器来配置我们的模型。这个装饰器接受与接口`DefineOptions`对应的选项，正如我们在***@Table部分***中描述的，我们将传递timestamp为true和表的名称作为选项。
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we have to define some columns for our model. To do this, `sequelize-typescript`
    provides the `@Column()` decorator. This decorator allows us to provide some options
    to configure our field. You can pass the data type `DataType.Type` directly.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要为我们的模型定义一些列。为此，`sequelize-typescript`提供了`@Column()`装饰器。这个装饰器允许我们提供一些选项来配置我们的字段。你可以直接传递数据类型`DataType.Type`。
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can also use the options shown in the ***@Column section*** in order to
    validate and ensure the data of the email.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用***@Column部分***中显示的选项来验证和确保电子邮件的数据。
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You now know how to set up a column, so let’s set up the rest of the model with
    the column that we need for a simple user.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何设置列，让我们为简单的用户设置模型的其余部分。
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In all the added columns, you can see the password of type `TEXT`, but of course,
    you cannot store a password as a plain text, so we have to hash it in order to
    protect it. To do that, use the lifeCycle hooks provided by Sequelize.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有添加的列中，你可以看到`TEXT`类型的密码，但当然，你不能将密码存储为明文，所以我们必须对其进行哈希处理以保护它。为此，使用Sequelize提供的生命周期钩子。
- en: LifeCycle hooks
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生命周期钩子
- en: Sequelize come with many lifeCycle hooks that allow you to manipulate and check
    the data along the process of creating, updating, or deleting a data.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Sequelize提供了许多生命周期钩子，允许你在创建、更新或删除数据的过程中操作和检查数据。
- en: Here are some interesting hooks from Sequelize.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Sequelize中一些有用的钩子。
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this case, we need to use the `@BeforeCreate` decorator in order to hash
    the password and replace the original value before storing it in the database.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要使用`@BeforeCreate`装饰器来对密码进行哈希处理，并在存储到数据库之前替换原始值。
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `BeforeCreate` previously written allows you to override the `password`
    property value of the user in order to override it before the insertion of the
    object into the database, and to ensure a minimum of security.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 之前写的`BeforeCreate`允许你在将对象插入到数据库之前覆盖用户的`password`属性值，并确保最低限度的安全性。
- en: Injecting a model into a service
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将模型注入到服务中
- en: Our first `User` model is now setup. Of course, we will have to inject it into
    a service or even a controller. To inject a model anywhere else, we must first
    create the appropriate provider in order to give it to the module.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个`User`模型现在已经设置好了。当然，我们需要将其注入到服务或甚至控制器中。要在任何其他地方注入模型，我们必须首先创建适当的提供者，以便将其提供给模块。
- en: This provider will define the key to use in order to inject it and take as a
    value the `User` model that we have implemented before.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个提供者将定义用于注入的密钥，并将`User`模型作为值，我们之前已经实现了这个模型。
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To inject it in into a service we will use the `@Inject()` decorator, which
    can take the string defined in the previous example `UserRepository`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其注入到服务中，我们将使用`@Inject()`装饰器，它可以使用前面示例中定义的字符串`UserRepository`。
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: After injecting the model into the service, you will be able to use it to access
    and manipulate the data as you want. For example, you can execute `this.UserRepository.findAll()`
    to register the data in your database.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在将模型注入服务之后，您可以使用它来访问和操作数据。例如，您可以执行`this.UserRepository.findAll()`来在数据库中注册数据。
- en: Finally, we have to set up the module to take as providers, the `userProvider`
    that provides access to the model and the `UserService`. The `UserService` can
    be exported to be used in another module by importing the `UserModule`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须设置模块以将`userProvider`作为提供者，该提供者提供对模型和`UserService`的访问。`UserService`可以导出，以便在另一个模块中使用，通过导入`UserModule`。
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Usage of Sequelize transaction
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sequelize事务
- en: You might remark this line, `if (!options.transaction) throw new Error('Missing
    transaction.');`, in the `hashPassword` method decorated with the `@BeforeCreate`.
    As said before, Sequelize provides a strong support of the transaction. So for
    each action or process of action, you can use a transaction. To use the Sequelize
    transaction, take a look at the following example of a `UserService`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到这行代码，`if (!options.transaction) throw new Error('Missing transaction.');`，在使用`@BeforeCreate`装饰的`hashPassword`方法中。如前所述，Sequelize提供了对事务的强大支持。因此，对于每个操作或操作过程，您都可以使用事务。要使用Sequelize事务，请查看以下`UserService`的示例。
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We have injected both the model and the Sequelize instance that we talked about
    earlier in this chapter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中提到的模型和Sequelize实例都已注入。
- en: 'To use a transaction to wrap some access to the database, you can do the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用事务来包装对数据库的访问，您可以执行以下操作：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We use the `sequelizeInstance` to create a new transaction and pass it to the
    `create` method of the `UserRepository`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`sequelizeInstance`创建一个新的事务，并将其传递给`UserRepository`的`create`方法。
- en: Migration
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移
- en: With Sequelize you have a way to sync your model and your database. The thing
    is, this synchronization will remove all of your data in order to recreate all
    of the tables representing the model. So, this feature is useful in testing, but
    not in a production mode.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Sequelize，您可以同步模型和数据库。问题是，此同步将删除所有数据，以便重新创建表示模型的所有表。因此，此功能在测试中很有用，但在生产模式下则不适用。
- en: In order to manipulate your database, you have the possibility to use `umzung`,
    a framework agnostic library and migration tool for Nodejs. It is not related
    to any database, but provides an API in order to migrate or rollback the migration.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了操作数据库，您可以使用`umzung`，这是一个与框架无关的库和迁移工具，适用于Nodejs。它与任何数据库都无关，但提供了一个API，用于迁移或回滚迁移。
- en: When you are using the command `npm run migrate up`, which executes `ts-node
    migrate.ts`, you can pass `up/down` as a parameter. In order to track all of the
    migration already applied, a new table will be created with the default name `SequelizeMeta`,
    and all of the applied migrations will be stored in this table.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用命令`npm run migrate up`时，它会执行`ts-node migrate.ts`，您可以将`up/down`作为参数传递。为了跟踪已应用的所有迁移，将创建一个名为`SequelizeMeta`的新表，并将所有已应用的迁移存储在此表中。
- en: Our migration file can be found in the repository as the root with the name
    `migrate.ts`. Also, all of the migrations files will be stored in the `migrations`
    folder of the repository example.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的迁移文件可以在存储库中找到，名称为`migrate.ts`。此外，所有迁移文件将存储在存储库示例的`migrations`文件夹中。
- en: Configuring the migration script
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置迁移脚本
- en: 'In order to configure the umzung instance, you will be able to set some options:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置umzung实例，您可以设置一些选项：
- en: '`storage`, which correspond to the `sequelize` string key for us'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`storage`，对应于我们的`sequelize`字符串键'
- en: '`storageOptions`, which will take Sequelize, and it is in this option that
    you can change the default name of the table of the column used to store the name
    of the migrations applied throughout the `modelName`, `tableName` and `columnName`
    properties.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`storageOptions`，它将使用Sequelize，并且您可以在此选项中更改用于存储已应用迁移的名称的列的默认名称`modelName`，`tableName`和`columnName`属性。'
- en: Some other configurations are able, in order to set the up method name and the
    down method name, to pass a logging function. The `migrations` property will allow
    you to provide some params to pass to the method up/down and the path of the migrations
    to apply with the appropriate pattern.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以进行其他一些配置，以设置`up`方法名称和`down`方法名称，传递日志函数。`migrations`属性将允许您提供一些参数以传递给up/down方法，并提供要应用的迁移的路径以及适当的模式。
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Create a migration
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建迁移
- en: To execute the migration script, provide the migration that you want to apply.
    Imagine that you want to create the `users` table using migration. You must set
    an `up` and a `down` method.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行迁移脚本，请提供要应用的迁移。假设您想使用迁移创建`users`表。您必须设置`up`和`down`方法。
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In each method, the parameter will be `sequelize`, which is the instance used
    in the configuration file. Throughout this instance you can use the que query
    method in order to write our SQL query. In the previous example, the function
    `up` will execute the query to create the `users` table. The `down` method has
    the purpose to drop this table in case of a rollback.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个方法中，参数将是`sequelize`，这是配置文件中使用的实例。通过此实例，您可以使用查询方法来编写我们的SQL查询。在前面的示例中，函数`up`将执行查询以创建`users`表。`down`方法的目的是在回滚时删除此表。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter you have seen how to set up the connection to the database by
    instanciating a Sequelize instance, using the factory in order to inject the instance
    directly in another place.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经看到了如何通过实例化Sequelize实例来设置与数据库的连接，并使用工厂直接在另一个地方注入实例。
- en: Also, you have seen decorators provided by sequelize-typescript in order to
    set up a new model. You have also seen how to add some constraints on the columns
    and how to use the lifeCycle hooks to hash a password before saving it. Of course,
    the hooks can be used to validate some data or check some information before doing
    anything else. But you also have seen how to use the `@BeforeCreate` hook. You
    are therefore ready to use a Sequelize transaction system.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，您已经看到了sequelize-typescript提供的装饰器，以便设置一个新的模型。您还看到了如何在列上添加一些约束，以及如何在保存之前使用生命周期钩子来对密码进行哈希处理。当然，这些钩子可以用来验证一些数据或在执行其他操作之前检查一些信息。但您也已经看到了如何使用`@BeforeCreate`钩子。因此，您已经准备好使用Sequelize事务系统。
- en: Finally, you have seen how to configure umzung to execute migrations, and how
    to create your first migration in order to create the users table.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您已经看到了如何配置umzug来执行迁移，并且如何创建您的第一个迁移以创建用户表。
- en: In the next chapter you will learn how to use Mongoose.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用Mongoose。
