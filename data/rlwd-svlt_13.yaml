- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Using Transitions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用过渡效果
- en: Transitions are essential in creating smooth and engaging user experiences.
    By defining how elements appear, disappear, or change within a user interface,
    transitions can turn ordinary interactions into captivating experiences that leave
    lasting impressions on users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡效果对于创建平滑且引人入胜的用户体验至关重要。通过定义元素在用户界面中的出现、消失或变化方式，过渡效果可以将普通的交互转变为令人难忘的体验，给用户留下深刻印象。
- en: Over the next three chapters, we will explore the topic of transitions in Svelte,
    beginning with a comprehensive understanding of how to use transitions in Svelte.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的三章中，我们将探讨Svelte中的过渡效果主题，首先从全面了解如何在Svelte中使用过渡效果开始。
- en: In this chapter, we will start by learning how to add transitions to elements
    in Svelte. We will explore the different transition directives and learn how to
    customize the transitions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先学习如何在Svelte中为元素添加过渡效果。我们将探讨不同的过渡指令，并学习如何自定义过渡效果。
- en: After that, we will discuss when and how the transitions are being played. We
    will look at different scenarios, such as where there’s a mix of elements with
    and without transitions, or when the elements are within nested logical blocks.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将讨论何时以及如何播放过渡效果。我们将探讨不同的场景，例如元素中包含和不含过渡效果的混合，或者当元素位于嵌套的逻辑块中时。
- en: To truly master transitions, it’s important to understand the inner workings
    of the Svelte transition system. We will conclude the chapter by examining the
    underlying mechanics and offering insights that will help you optimize your use
    of transitions in your projects.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正掌握过渡效果，了解Svelte过渡系统的内部工作原理至关重要。我们将通过检查底层机制并提供有助于你在项目中优化过渡效果使用的见解来结束本章。
- en: By the end of this chapter, you will have a solid foundation in Svelte transitions,
    allowing you to create engaging and dynamic user interfaces with ease.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将拥有Svelte过渡效果的坚实基础，让你能够轻松创建引人入胜且动态的用户界面。
- en: 'This chapter includes sections on the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括以下内容：
- en: How to add transitions to elements
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为元素添加过渡效果
- en: When the transitions for the elements are played
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素的过渡效果何时播放
- en: How transitions work under the hood
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过渡效果在底层是如何工作的
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the code used in this chapter on GitHub: [https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter13](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter13).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub上找到本章使用的代码：[https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter13](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter13)。
- en: Adding transitions to elements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为元素添加过渡效果
- en: Svelte provides a simple and powerful way to add transitions to your application
    elements. The framework offers built-in transition functions that can be easily
    applied to elements, allowing for smooth animations and seamless user experiences.
    You can also define your own custom transitions, which we will learn about in
    the next chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Svelte提供了一种简单而强大的方法来为你的应用元素添加过渡效果。该框架提供了内置的过渡函数，可以轻松应用于元素，从而实现平滑的动画和无缝的用户体验。你还可以定义自己的自定义过渡效果，我们将在下一章中学习。
- en: Transitions in Svelte are applied to elements when the elements are mounted
    or unmounted from the DOM. This ensures that elements appear and disappear gracefully,
    rather than just abruptly popping in and out of view.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Svelte中的过渡效果是在元素挂载或从DOM卸载时应用的。这确保了元素的出现和消失都是优雅的，而不是突然出现在视野中或消失。
- en: 'To add a transition to an element in Svelte, you can use the `transition:`
    directive with the desired transition function. Here’s an example of adding a
    transition to an element:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Svelte中为元素添加过渡效果，你可以使用`transition:`指令与所需的过渡函数。以下是一个为元素添加过渡效果的示例：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding code snippet, we imported `fade` from `svelte/transition` and
    applied it to the `<``div>` element.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们从`svelte/transition`中导入了`fade`并将其应用于`<div>`元素。
- en: What you will see with the preceding code is that when the `<div>` element is
    mounted onto the DOM, the `<div>` element will smoothly fade in. When the `<div>`
    element is unmounted from the DOM, the `<div>` element will smoothly fade out.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到，在前面代码中，当`<div>`元素挂载到DOM上时，`<div>`元素将平滑地淡入。当`<div>`元素从DOM卸载时，`<div>`元素将平滑地淡出。
- en: 'The `transition:` directive sets the transitions played when the element is
    both mounted onto the DOM and unmounted from the DOM. If you want to have finer
    control over which transitions are played as the element is mounted or unmounted,
    you can use the `in:` and `out:` directives instead:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition:` 指令设置元素挂载到 DOM 和从 DOM 卸载时播放的转换。如果你想更精细地控制元素挂载或卸载时播放的转换，可以使用 `in:`
    和 `out:` 指令：'
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code snippet, we applied `fade` as the in transition and `blur`
    as the out transition. When the `<div>` element is mounted onto the DOM, the `<div>`
    element will smoothly fade in. When the `<div>` element is unmounted from the
    DOM, the `<div>` element will smoothly blur out.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们应用了 `fade` 作为进入转换，`blur` 作为退出转换。当 `<div>` 元素挂载到 DOM 上时，`<div>` 元素将平滑地淡入。当
    `<div>` 元素从 DOM 中卸载时，`<div>` 元素将平滑地模糊退出。
- en: 'Thus, the `transition:` directive is essentially a shorthand for both `in:`
    and `out:` transitions. In other words, the transitions applied to the two elements
    in the following snippet are functionally identical:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`transition:` 指令本质上是对 `in:` 和 `out:` 转换的简写。换句话说，以下片段中应用于两个元素的转换在功能上是相同的：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'So, the preceding code snippet is similar to the following code snippet:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，前面的代码片段类似于以下代码片段：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: From the preceding examples, we have seen two of Svelte’s built-in transitions,
    `fade` and `blur` – let us look at more of them!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的示例中，我们已经看到了 Svelte 的两个内置转换，`fade` 和 `blur` - 让我们看看更多！
- en: Svelte’s built-in transitions
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Svelte 的内置转换
- en: Svelte’s built-in transitions are exported from the `svelte/transition` module.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Svelte 的内置转换是从 `svelte/transition` 模块导出的。
- en: 'The following list provides an overview of Svelte’s built-in transitions:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表提供了 Svelte 内置转换的概述：
- en: '`fade`: This transition smoothly fades an element in or out, adjusting its
    opacity over time'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fade`: 这个转换平滑地使元素淡入或淡出，随时间调整其不透明度'
- en: '`blur`: The `blur` transition gradually applies or removes a blur effect on
    an element'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`blur`: `blur` 转换逐渐在元素上应用或移除模糊效果'
- en: '`slide`: The `slide` transition makes an element slide smoothly in or out of
    view'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slide`: `slide` 转换使元素平滑地进入或退出视图'
- en: '`fly`: The `fly` transition makes an element smoothly translate from a specified
    `x` and `y` offset'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fly`: `fly` 转换使元素平滑地从指定的 `x` 和 `y` 偏移量平移'
- en: '`scale`: This transition causes an element to grow or shrink in size while
    appearing or disappearing'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale`: 这个转换使元素在出现或消失时大小增长或缩小'
- en: '`draw`: The `draw` transition creates a drawing or erasing effect on SVG paths'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`draw`: `draw` 转换在 SVG 路径上创建绘制或擦除效果'
- en: As you go through the list of built-in transitions, you may notice that some
    of these transitions rely on user-specified values. For example, the `fly` transition
    depends on the specified `x` and `y` offset from which the element should fly
    when transitioning in.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览内置转换列表时，你可能注意到其中一些转换依赖于用户指定的值。例如，`fly` 转换依赖于元素在转换进入时应该飞出的指定 `x` 和 `y` 偏移量。
- en: Customizing a transition
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义转换
- en: 'To make use of these transitions with their required values, you can pass a
    configuration object containing the necessary properties to the transition directive:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这些转换及其所需的值，你可以传递一个包含必要属性的配置对象到转换指令中：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code snippet, we apply the `fly` transition with the specified
    `x` and `y` offsets, indicating that the element will fly in from 200 pixels to
    the right and 100 pixels down. By providing the appropriate values, you can achieve
    a wide range of customized transition effects in your Svelte components.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们应用了带有指定 `x` 和 `y` 偏移量的 `fly` 转换，这表示元素将从右侧200像素和下方100像素的位置飞入。通过提供适当的值，你可以在你的
    Svelte 组件中实现一系列定制的转换效果。
- en: This approach can be particularly useful when you want an element to fly to
    a different location as it transitions out, compared to the location from which
    it flies in during the transition.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要元素在转换退出时飞到不同的位置，而不是转换进入时飞入的位置时，这种方法尤其有用。
- en: Instead of using the `transition:` directive and having only one configuration
    for both in and out transitions, you can separate it into the `in:` and `out:`
    directives and pass different configuration objects to each directive.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以不使用 `transition:` 指令，并为进入和退出转换只提供一个配置，而是将其分开为 `in:` 和 `out:` 指令，并将不同的配置对象传递给每个指令。
- en: 'An example of this can be seen in the following code snippet:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了这一点的示例：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `<div>` element flies in from 200 pixels to the right and 100 pixels down,
    while it flies out 200 pixels to the left and 50 pixels down. By separating the
    `transition:` directive into `in:` and `out:` directives, you can control the
    in and out transition with different configuration objects, having more intricate
    transition effects in your Svelte components.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`<div>` 元素从右侧 200 像素和下方 100 像素飞入，同时从左侧 200 像素和下方 50 像素飞出。通过将 `transition:`
    指令分为 `in:` 和 `out:` 指令，您可以使用不同的配置对象控制进入和退出转换，在 Svelte 组件中实现更复杂的转换效果。'
- en: In addition to custom configurations specific to each transition, all of Svelte’s
    built-in transitions accept `delay`, `duration`, and `easing` as part of the transition
    configuration. These parameters allow you to control the timing of your animations,
    providing greater flexibility in designing your user interface.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除了每个转换的特定自定义配置外，Svelte 的所有内置转换都接受 `delay`、`duration` 和 `easing` 作为转换配置的一部分。这些参数允许您控制动画的时间，为设计用户界面提供更大的灵活性。
- en: The `delay` parameter determines the waiting time before the transition begins
    while the `duration` parameter specifies how long the transition lasts. By modifying
    these values, you can coordinate when a transition begins and how long each transition
    takes, creating more complex and engaging animations.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`delay` 参数确定转换开始前的等待时间，而 `duration` 参数指定转换持续的时间。通过修改这些值，您可以协调转换的开始时间和每个转换的持续时间，创建更复杂和吸引人的动画。'
- en: 'Here is an example of adjusting the `delay` and `duration` values of a `fade`
    transition:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个调整 `fade` 转换的 `delay` 和 `duration` 值的示例：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <script>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: import { fade } from 'svelte/transition';
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: import { fade } from 'svelte/transition';
- en: import { quadInOut } from 'svelte/easing';
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: import { quadInOut } from 'svelte/easing';
- en: </script>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <div transition:fade=fade transition uses the quadInOut easing function, which
    causes the animation to start slowly, accelerate, and then end slowly. By incorporating
    different easing functions into your transitions, you can create a variety of
    animations for your application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <div transition:fade=fade transition 使用了 quadInOut 缓动函数，这使得动画开始缓慢，加速，然后缓慢结束。通过将不同的缓动函数融入您的转换中，您可以为您应用程序创建各种动画。
- en: Exercise – discovering Svelte’s built-in transitions
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 - 发现 Svelte 的内置转换
- en: As a practice exercise, try to visit the official Svelte documentation and identify
    the list of configurable properties for each built-in transition.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 作为练习，尝试访问官方 Svelte 文档，并识别每个内置转换的可配置属性列表。
- en: 'To get you started, here is a list of Svelte’s built-in transitions:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您开始，这里有一份 Svelte 内置转换的列表：
- en: '`fade`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fade`'
- en: '`blur`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`blur`'
- en: '`fly`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fly`'
- en: '`slide`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slide`'
- en: '`scale`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale`'
- en: '`draw`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`draw`'
- en: We know that transitions are played when elements are mounted or unmounted from
    the DOM, but when and how exactly are the transitions played?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道转换在元素挂载或从 DOM 中卸载时播放，但转换究竟何时以及如何播放？
- en: Let us explore the timing and manner in which the transitions are played in
    the next section.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中探讨转换播放的时间和方式。
- en: When are the transitions played?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 转换何时播放？
- en: The transitions in Svelte are played when elements are added or removed from
    the DOM.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Svelte 中的转换在元素被添加或从 DOM 中移除时播放。
- en: '`in:` transitions are executed when an element is added to the DOM. This usually
    occurs when a component is initialized or when a condition that controls the element’s
    rendering becomes `true`.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`in:` 转换在元素被添加到 DOM 时执行。这通常发生在组件初始化时或当控制元素渲染的条件变为 `true` 时。'
- en: 'For example, in an `{#if}` block, when the `if` condition turns from falsy
    to truthy, the elements inside the `{#if}` block are added to the DOM. All the
    `in:` transitions applied to these elements will be **played simultaneously**
    as soon as the elements are inserted into the DOM:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在一个 `{#if}` 块中，当 `if` 条件从假变为真时，该 `{#if}` 块内的元素会被添加到 DOM 中。所有应用于这些元素的 `in:`
    转换将在元素被插入 DOM 后立即 **同时播放**：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code snippet, as `condition` turns to `true`, both `<div>`
    elements will be inserted into the DOM. As soon as both `<div>` elements are inserted,
    both the `fade` and `blur` transitions will start playing simultaneously. Whether
    both the `fade` and `blur` transitions end at the same time depends on the specified
    duration for each transition.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，当 `condition` 变为 `true` 时，两个 `<div>` 元素将被插入到 DOM 中。一旦两个 `<div>` 元素都被插入，`fade`
    和 `blur` 转换将立即同时开始播放。`fade` 和 `blur` 转换是否同时结束取决于每个转换指定的持续时间。
- en: Conversely, `out:` transitions are executed when an element is removed from
    the DOM. This can happen when a component is destroyed, or when a condition that
    controls the element’s rendering becomes `false`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，当元素从DOM中移除时，会执行`out:`过渡。这可以发生在组件被销毁时，或者当控制元素渲染的条件变为`false`时。
- en: The transition begins as soon as the element is scheduled for removal from the
    DOM. After the transition is complete, the element is removed from the DOM.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡在元素被安排从DOM中移除时立即开始。过渡完成后，元素将从DOM中移除。
- en: 'Let us illustrate this with an example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个例子来说明这一点：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code snippet, when `condition` turns to `false`, both the `<div>`
    elements remain in the DOM, even though the condition is no longer true. This
    is because the `out:` transition needs to be played on both `<div>` elements before
    they are removed from the DOM. If the `<div>` elements were removed from the DOM
    immediately, they would no longer be visible to users, rendering any subsequent
    `out:` transitions ineffective and invisible.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，当`condition`变为`false`时，两个`<div>`元素仍然保留在DOM中，尽管条件不再为真。这是因为需要在从DOM中移除这两个`<div>`元素之前，对它们执行`out:`过渡。如果立即从DOM中移除`<div>`元素，它们将不再对用户可见，使得任何后续的`out:`过渡无效且不可见。
- en: Both `fade` and `blur` transitions will play simultaneously on both the `<div>`
    elements as `out:` transitions. Similar to the `in:` transition, the duration
    of each transition depends on the specified duration for each transition.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`fade`和`blur`过渡将同时应用于两个`<div>`元素作为`out:`过渡。与`in:`过渡类似，每个过渡的持续时间取决于每个过渡指定的持续时间。'
- en: Once all the `out:` transitions have finished playing, both `<div>` elements
    will be removed from the DOM together, making the DOM state consistent with the
    updated value of `condition`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有`out:`过渡都播放完毕，两个`<div>`元素将一起从DOM中移除，使DOM状态与`condition`的更新值保持一致。
- en: In the previous examples explaining when `in:` and `out:` transitions are played,
    all elements within the `{#if}` block had transitions applied to them, resulting
    in the transitions being played simultaneously in all the elements in the `{#if}`
    block. But, what happens if not all elements inside the `{#if}` block have transitions
    applied? Let’s discuss that next.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前解释何时播放`in:`和`out:`过渡的例子中，`{#if}`块内的所有元素都应用了过渡，导致`{#if}`块中的所有元素同时播放过渡。但是，如果`{#if}`块内不是所有元素都应用了过渡会发生什么？让我们接下来讨论这个问题。
- en: Handling mixed transition and static elements
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 处理混合过渡和静态元素
- en: When some elements inside an `{#if}` block have transitions applied and others
    do not, Svelte handles each element differently based on the specified transitions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个`{#if}`块内的某些元素应用了过渡而其他没有时，Svelte会根据指定的过渡对每个元素进行不同的处理。
- en: 'Let’s consider an example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, when `condition` becomes `true`, the elements with transitions
    applied will animate as they are inserted into the DOM, while the static element
    without a transition will simply appear without any animation.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，当`condition`变为`true`时，应用了过渡的元素将随着它们被插入DOM而动画化，而没有任何过渡的静态元素将简单地出现，没有任何动画。
- en: Based on the preceding code snippet, the second `<div>` element will be inserted
    and visible on the DOM immediately, as the first and third `<div>` elements fade
    and slide in, respectively.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的代码片段，第二个`<div>`元素将立即插入并显示在DOM上，因为第一个和第三个`<div>`元素分别淡入和滑动进入。
- en: Similarly, when `condition` turns to `false`, the elements with `out``:` transitions
    (in this case, only the third `<div>` element, since the `transition:` directive
    implies both `in:` and `out:` transition) will play their respective out transitions.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当`condition`变为`false`时，具有`out``:`过渡的元素（在这种情况下，只有第三个`<div>`元素，因为`transition:`指令暗示了`in:`和`out:`过渡）将播放它们各自的退出过渡。
- en: Based on the preceding code snippet, you will see that both the first and second
    `<div>` elements remain unchanged, and the slide transition is played on the third
    `<div>` element. All elements within the `{#if}` block will only be removed from
    the DOM together after all the `out:` transitions have finished playing.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的代码片段，你会看到第一个和第二个`<div>`元素保持不变，并且第三个`<div>`元素上播放了幻灯片过渡。在`{#if}`块内的所有元素只有在所有`out:`过渡完成后才会一起从DOM中移除。
- en: In summary, when you have a mix of elements with and without transitions inside
    the same logical block, all the elements will be added into and removed from the
    DOM at the same time. Svelte animates only the elements with transitions applied,
    while the static elements without transitions will be inserted or removed without
    any animations.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，当你在同一个逻辑块内混合具有和没有过渡效果的元素时，所有元素将同时被添加到和从DOM中移除。Svelte只对应用了过渡效果的元素进行动画处理，而没有过渡效果的静态元素将无动画地被插入或移除。
- en: So far, we have only seen examples using the `{#if}` block as a means of adding
    or removing elements, but there are other logical blocks in Svelte that can also
    be used.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只看到了使用`{#if}`块作为添加或删除元素手段的例子，但Svelte中还有其他逻辑块也可以使用。
- en: Let us look at what they are.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它们是什么。
- en: Other Svelte logical blocks for transitions
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 其他Svelte逻辑块用于过渡
- en: The `{#if}` block adds or removes elements based on the `if` condition. In addition
    to the `{#if}` block, there are other logical blocks in Svelte that provide opportunities
    for applying transitions when adding or removing elements, such as `{#each}`,
    `{#await}`, and `{#key}`. These blocks can also have transitions applied to the
    elements they contain, providing a wide range of possibilities for animating your
    user interface.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`{#if}`块根据`if`条件添加或删除元素。除了`{#if}`块之外，Svelte中还有其他逻辑块提供了在添加或删除元素时应用过渡的机会，例如`{#each}`、`{#await}`和`{#key}`。这些块也可以对它们包含的元素应用过渡，为你的用户界面动画提供了广泛的可能性。'
- en: 'For example, the `{#each}` block is used to iterate over a list of items and
    render elements for each item. You can apply transitions to the elements within
    an `{#each}` block in a similar way as you would with an `{#if}` block. Let’s
    look at an example of that:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`{#each}`块用于遍历项目列表并为每个项目渲染元素。你可以以与`{#if}`块类似的方式在`{#each}`块内对元素应用过渡。让我们看看一个例子：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this example, as new items are added or removed from the `items` array, the
    elements within the `{#each}` block will have their respective `in:` and `out:`
    transitions played. When there is a new item in the `items` array, the new `<div>`
    element will fade into the end of the list. When an element is removed from the
    `items` array, the respective `<div>` element will slide out of the list. Using
    transitions in a list allows you to create a dynamic and engaging user experience,
    providing clear visual cues when items are added to or removed from the list.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，当向`items`数组中添加或删除新项目时，`{#each}`块内的元素将执行各自的`in:`和`out:`过渡。当`items`数组中有新项目时，新的`<div>`元素将淡入列表的末尾。当从`items`数组中删除元素时，相应的`<div>`元素将从列表中滑动出去。在列表中使用过渡可以创建动态且引人入胜的用户体验，当向列表中添加或删除项目时，提供清晰的视觉提示。
- en: Similarly, you can use transitions with `{#await}` and `{#key}` blocks to create
    visually appealing animations while managing the addition and removal of elements
    in various scenarios.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，你可以使用`{#await}`和`{#key}`块与过渡结合，在各种场景中管理元素的添加和删除，同时创建视觉上吸引人的动画。
- en: The `transition:`, `in:`, and `out:` directives can be applied to any elements,
    and elements within the same logical block will be added or removed at the same
    time. This also holds true for nested logical blocks.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition:`, `in:`, 和 `out:` 指令可以应用于任何元素，并且同一个逻辑块内的元素将同时被添加或移除。这同样适用于嵌套的逻辑块。'
- en: 'For example, let us consider the following code snippet:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们考虑以下代码片段：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When `condition` changes from `false` to `true`, the following happens:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当`condition`从`false`变为`true`时，以下情况会发生：
- en: The first `<p>` element with the `blur` transition will animate as it is inserted
    into the DOM
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个具有`blur`过渡效果的`<p>`元素将随着其被插入到DOM中进行动画处理
- en: Simultaneously, for each item in the `items` array, the `<div>` elements with
    the `fade` transition will animate as they are inserted into the DOM
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时，对于`items`数组中的每个项目，当它们被插入到DOM中时，具有`fade`过渡效果的`<div>`元素将进行动画处理
- en: The last `<p>` element, which does not have any transition, will simply appear
    in the DOM without animation
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个没有过渡效果的`<p>`元素将简单地出现在DOM中，没有动画
- en: 'Conversely, when `condition` changes from `true` to `false`, the following
    happens:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，当`condition`从`true`变为`false`时，以下情况会发生：
- en: The first `<p>` element with the `blur` transition will animate
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个具有`blur`过渡效果的`<p>`元素将进行动画
- en: Simultaneously, for each item in the `items` array, the `<div>` elements with
    the `fade` transition will animate
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时，对于`items`数组中的每个项目，具有`fade`过渡效果的`<div>`元素将进行动画处理
- en: The last `<p>` element, which does not have a transition, will remain unchanged
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个没有过渡的`<p>`元素将保持不变
- en: Once all the transitions in the `<p>` element and all the `<div>` elements in
    the `{#each}` block have finished, both the `<p>` and `<div>` elements will be
    removed from the DOM together
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦`<p>`元素中所有过渡和`{#each}`块中所有`<div>`元素中的过渡都已完成，`<p>`和`<div>`元素将一起从DOM中删除
- en: By using transitions in combination with nested logical blocks, you can create
    intricate animations that enhance the user experience.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合使用过渡和嵌套逻辑块，你可以创建复杂的动画，从而提升用户体验。
- en: By default, transitions are only played when the nearest logical block causes
    an addition or removal of the element. However, we can change this behavior with
    the `global` modifier.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，过渡只有在最近的逻辑块导致元素添加或删除时才会播放。然而，我们可以通过`global`修饰符来改变这种行为。
- en: The global modifier
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 全局修饰符
- en: Transitions being played only when the nearest logical block causes an addition
    or removal of the element helps limit the number of simultaneous animations, making
    the user experience more focused and less overwhelming. This is called the *local*
    mode; that is, transitions are only applied for local changes.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当最近的逻辑块导致元素添加或删除时才会播放过渡，这有助于限制同时动画的数量，使用户体验更加专注且不那么令人不知所措。这被称为*本地*模式；也就是说，过渡仅应用于本地更改。
- en: To change this behavior, we can apply the `global` modifier. The `global` modifier,
    when applied to the `transition:`, `in:`, and `out:` directives, ensures that
    the animation is played whenever the element is added or removed.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要改变这种行为，我们可以应用`global`修饰符。当`global`修饰符应用于`transition:`, `in:`, 和 `out:`指令时，确保动画在元素被添加或删除时播放。
- en: 'To apply the `global` modifier, simply suffix the directive with `|global`,
    like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用`global`修饰符，只需在指令后缀加上`|global`，如下所示：
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As per the preceding example, before applying the `global` modifier, the `fade`
    animation was only being played when the nearest logical block, the `{#if}` block,
    triggered the insertion or removal of the `<div>` element. This means that if
    another parent logical block caused the addition or removal of the element, the
    animation would not be played. With the `global` modifier, the transition will
    be played whenever the `<div>` element is added or removed, irrespective of which
    logical block causes it.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的例子，在应用`global`修饰符之前，`fade`动画只有在最近的逻辑块，即`{#if}`块触发`<div>`元素的插入或删除时才会播放。这意味着如果另一个父逻辑块导致了元素的添加或删除，动画将不会播放。有了`global`修饰符，过渡将在`<div>`元素被添加或删除时播放，无论哪个逻辑块导致它。
- en: 'To elaborate further, let us look at the following nested `{#if}` block example:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步阐述，让我们看看以下嵌套的`{#if}`块示例：
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Let us start with `condition1` as `false` and `condition2` as `true`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`condition1`为`false`和`condition2`为`true`开始。
- en: When `condition1` turns `true`, the three `<div>` elements will be inserted
    into the DOM together. Since `condition2` has always been `true`, at this point,
    the `{#if}` block that causes all the `<div>` elements to be inserted is the one
    with `condition1`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当`condition1`变为`true`时，三个`<div>`元素将一起插入到DOM中。由于`condition2`始终为`true`，此时，导致所有`<div>`元素插入的`{#if}`块是带有`condition1`的那个。
- en: The first `<div>` element will fade in because its nearest logical block, `{#if
    condition1}`, is responsible for the insertion of the `<``div>` element.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`<div>`元素将淡入，因为其最近的逻辑块，即`{#if condition1}`，负责插入`<div>`元素。
- en: The second `<div>` element will be immediately visible on the screen without
    playing the `fade` transition. This is because, by default, the transition is
    in *local* mode, and its nearest logical block, `{#if condition2}`, is not the
    cause of the `<div>` element being inserted at this point.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个`<div>`元素将立即在屏幕上可见，而不会播放`fade`过渡。这是因为，默认情况下，过渡处于*本地*模式，其最近的逻辑块，即`{#if condition2}`，不是导致在此点插入`<div>`元素的原因。
- en: The third `<div>` element will fade in simultaneously with the first `<div>`
    element. Because the `<div>` element has the `|global` modifier applied to its
    transition, it doesn’t matter which logical block is responsible for its insertion.
    The transition will play regardless of the specific logical block that causes
    the `<div>` element to be inserted.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个`<div>`元素将与第一个`<div>`元素同时淡入。因为`<div>`元素对其过渡应用了`|global`修饰符，所以负责其插入的逻辑块无关紧要。过渡将播放，无论哪个具体的逻辑块导致`<div>`元素被插入。
- en: Now what if `condition1` turns from `true` to `false`?
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设`condition1`从`true`变为`false`呢？
- en: The same logic applies; therefore, the second `<div>` element will remain unchanged,
    and only the first and third `<div>` elements will fade out. Once the fade transition
    has finished, all three `<div>` elements will be removed from the DOM.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的逻辑适用；因此，第二个`<div>`元素将保持不变，只有第一个和第三个`<div>`元素会渐隐。一旦渐隐过渡完成，所有三个`<div>`元素都将从DOM中移除。
- en: In the scenarios we have walked through, the second `<div>` element’s `fade`
    transition has not been played yet. So, when will the `fade` transition of the
    second `<div>` element be played?
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们已走过的场景中，第二个`<div>`元素的`fade`过渡尚未播放。那么，第二个`<div>`元素的`fade`过渡将在何时播放？
- en: To understand when the `fade` transition of the second `<div>` element will
    be played, let’s consider the situation where `condition1` remains `true` and
    `condition2` changes from `false` to `true`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解第二个`<div>`元素的`fade`过渡将在何时播放，让我们考虑`condition1`保持`true`且`condition2`从`false`变为`true`的情况。
- en: When `condition1` is `true` and `condition2` changes from `false` to `true`,
    the second `<div>` element will be inserted into the DOM. Since its nearest logical
    block, `{#if condition2}`, is now responsible for the insertion, the `transition:fade`
    transition will be played.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当`condition1`为`true`且`condition2`从`false`变为`true`时，第二个`<div>`元素将被插入到DOM中。由于它最近的逻辑块`{#if
    condition2}`现在负责插入，`transition:fade`过渡将被播放。
- en: As you can see, with the `global` modifier, we can change when transitions are
    played in response to changes. Instead of playing the transition only when they
    are relevant to specific conditions affecting the elements, we can change it to
    be played all the time.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，使用`global`修饰符，我们可以改变过渡的播放时机以响应变化。我们不仅可以只在元素受特定条件影响时播放过渡，还可以将其改为始终播放。
- en: Difference between Svelte 3 and Svelte 4
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Svelte 3和Svelte 4之间的区别
- en: As we’ve explained earlier, Svelte transitions are in *local* mode by default.
    However, this is only changed in Svelte 4, where in Svelte 3 it is the other way
    around. In Svelte 3, transitions are in *global* mode by default, and you would
    need to apply the `local` modifier to the transition to change it to *local* mode.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所解释的，Svelte过渡默认是*本地*模式。然而，这仅在Svelte 4中有所改变。在Svelte 3中，情况正好相反。在Svelte 3中，过渡默认是*全局*模式，你需要将`local`修饰符应用到过渡上才能将其改为*本地*模式。
- en: So far, we have covered how to add a transition to an element, using the `transition:`,
    `in:`, and `out:` directives. We have learned when and how the transitions are
    played. Before we end the chapter, let us dive deeper into the inner workings
    of transitions in Svelte to better understand their mechanics.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了如何使用`transition:`, `in:`, 和 `out:`指令给元素添加过渡，我们学习了何时以及如何播放过渡。在我们结束这一章之前，让我们深入了解Svelte中过渡的内部工作原理，以便更好地理解其机制。
- en: How Svelte transition works under the hood
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Svelte过渡的内部工作原理
- en: Before we delve into the inner workings of Svelte transitions, let us first
    briefly discuss the general methods for creating animations on the web. Understanding
    these fundamental concepts provides a solid foundation for grasping how Svelte
    transitions work.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨Svelte过渡的内部工作原理之前，让我们首先简要讨论在网页上创建动画的一般方法。理解这些基本概念为掌握Svelte过渡的工作原理提供了坚实的基础。
- en: In general, you can create animations using either CSS or JavaScript.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你可以使用CSS或JavaScript来创建动画。
- en: Creating animations with CSS
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CSS创建动画
- en: To create animations using CSS, you can use the CSS `animation` property along
    with the `@keyframes` rules. The `@keyframes` rule is used to define a sequence
    of styles, specifying the CSS styles at each keyframe (from 0% to 100%) during
    the animation.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用CSS创建动画，你可以使用CSS的`animation`属性以及`@keyframes`规则。`@keyframes`规则用于定义一系列样式，指定动画过程中每个关键帧（从0%到100%）的CSS样式。
- en: 'See this, for example:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，看看这个：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding code snippet, we defined an animation keyframe named `example`
    that changes the opacity from 100% to 0% and the scale from 1 to 1.75 simultaneously.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们定义了一个名为`example`的动画关键帧，它同时将不透明度从100%变为0%，并将缩放从1变为1.75。
- en: 'To apply the `example` animation to an element, we use the CSS `animation`
    property:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`example`动画应用到元素上，我们使用CSS的`animation`属性：
- en: '[PRE15]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding code snippet, we set the animation to the `example` animation
    keyframe, with a duration of four seconds, a delay of one second, and only play
    the animation exactly once.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们将动画设置为名为`example`的动画关键帧，持续时间为四秒，延迟为一秒，并且只播放动画一次。
- en: The `@keyframes` rule is versatile. We have fine-grained control over the intermediate
    steps of the animation sequence through `@keyframes` declarations. Combining it
    with the `animation` property, we control how the animation would look, and when
    and how long it will play.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`@keyframes` 规则非常灵活。我们可以通过 `@keyframes` 声明对动画序列的中间步骤进行精细控制。结合 `animation` 属性，我们可以控制动画的外观，以及动画何时开始和持续多长时间。'
- en: The advantages of using CSS to create animations are that it does not involve
    JavaScript, and the browser can optimize for the CSS animation on its own. This
    saves JavaScript bandwidth, and as a result, the animation can run smoothly even
    if you have intensive JavaScript tasks running concurrently. This ensures a better
    performance and user experience, as the animations remain responsive and fluid
    even under heavy processing loads.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CSS 创建动画的优点是它不涉及 JavaScript，浏览器可以自行优化 CSS 动画。这节省了 JavaScript 带宽，因此即使有密集的
    JavaScript 任务同时运行，动画也可以平滑运行。这确保了更好的性能和用户体验，因为即使在重处理负载下，动画也能保持响应和流畅。
- en: Creating animations with JavaScript
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JavaScript 创建动画
- en: Creating animation using JavaScript involves manipulating the DOM elements’
    styles and properties dynamically.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JavaScript 创建动画涉及动态操作 DOM 元素的样式和属性。
- en: As an example, let us write a fade-in animation using JavaScript.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们用 JavaScript 编写一个淡入动画。
- en: 'To achieve this, we need to gradually change the element’s opacity from `0`
    to `1`. To set a `<div>` element’s opacity to `0` in JavaScript, we set it directly
    through the element’s `style.opacity` property:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，我们需要逐渐将元素的透明度从 `0` 变更到 `1`。要在 JavaScript 中将 `<div>` 元素的透明度设置为 `0`，我们直接通过元素的
    `style.opacity` 属性来设置：
- en: '[PRE16]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding code snippet, we assumed that we have obtained a reference
    to the `<div>` element, which we have stored in the variable named `div`. We then
    set the opacity of the `<div>` element to `0` through the `div` variable.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们假设我们已经获得了对 `<div>` 元素的引用，并将其存储在名为 `div` 的变量中。然后，我们通过 `div` 变量将 `<div>`
    元素的透明度设置为 `0`。
- en: To animate the opacity of an element from one value to another, you would need
    to update the styles at regular intervals over a specified duration of time.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要将元素的透明度从一个值动画过渡到另一个值，您需要在指定的时间间隔内定期更新样式。
- en: Instead of setting a fixed interval through `setInterval`, the interval for
    updating styles is usually achieved using the `requestAnimationFrame` method.
    `requestAnimationFrame` is a browser method that optimizes the animation performance
    by calling the specified function before the next repaint occurs. `requestAnimationFrame`
    helps ensure that your animations run smoothly and efficiently by allowing the
    browser to determine the best time to update the styles, avoiding unnecessary
    work or redundant repaints.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 与通过 `setInterval` 设置固定间隔不同，更新样式的间隔通常是通过使用 `requestAnimationFrame` 方法来实现的。`requestAnimationFrame`
    是一个浏览器方法，它通过在下次重绘之前调用指定的函数来优化动画性能。`requestAnimationFrame` 通过允许浏览器确定最佳时间来更新样式，避免了不必要的操作或重复的重绘，从而帮助确保动画运行得既平滑又高效。
- en: 'Here is an example of using `requestAnimationFrame` to create an animation:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个使用 `requestAnimationFrame` 创建动画的例子：
- en: '[PRE17]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding code snippet, we schedule the `loop` function in the next animation
    frame until the progress is finished. We calculate `progress` as the percentage
    of time passed over the total duration of the animation. With the value of `progress`,
    we calculate the opacity and the scale of the `<``div>` element.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们安排在下一个动画帧中调用 `loop` 函数，直到进度完成。我们计算 `progress` 为动画总持续时间内经过的时间百分比。有了
    `progress` 的值，我们计算 `<div>` 元素的透明度和缩放比例。
- en: In this example, the end result of using JavaScript animation with `requestAnimationFrame`
    is the same as the end result achieved with the examples of using CSS animations
    from the previous section.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，使用 JavaScript 和 `requestAnimationFrame` 创建动画的最终结果与上一节中使用 CSS 动画的例子所达到的最终结果相同。
- en: The `<div>` element starts at opacity `1` and scale `1` at the beginning of
    the animation and ends up with opacity `0` and scale `1.75` at the end of the
    animation.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`<div>` 元素在动画开始时的透明度为 `1`，缩放为 `1`，在动画结束时透明度为 `0`，缩放为 `1.75`。'
- en: Using JavaScript for animations offers more control over the animation logic,
    enabling you to create complex and interactive animations that can respond to
    user input or other events.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JavaScript 进行动画提供了对动画逻辑的更多控制，使您能够创建复杂的交互式动画，这些动画可以响应用户输入或其他事件。
- en: However, one of the downsides of using JavaScript for animations is that it
    can be more resource-intensive as the animations rely on the browser’s JavaScript
    engine to process and execute the animation logic.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用JavaScript进行动画的一个缺点是，随着动画的依赖，它可能需要更多的资源，因为动画依赖于浏览器的JavaScript引擎来处理和执行动画逻辑。
- en: Now that we have learned about the two different approaches to creating animations
    on the web, which one does the Svelte transition use?
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了在网络上创建动画的两种不同方法，Svelte过渡使用的是哪一种？
- en: The answer is both.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是两者都是。
- en: Animating transitions in Svelte
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在Svelte中动画化过渡
- en: Although all of Svelte’s built-in transitions use CSS for animating, Svelte
    is capable of animating transitions using both CSS and JavaScript.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Svelte的所有内置过渡都使用CSS进行动画处理，但Svelte能够使用CSS和JavaScript两种方式来动画化过渡。
- en: To animate the transition through CSS, Svelte generates a one-time-only `@keyframes`
    rule for each element, based on the transition and the specified configuration
    object.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过CSS动画化过渡，Svelte将为每个元素生成一个一次性的`@keyframes`规则，基于过渡和指定的配置对象。
- en: 'Let us look at a `fly` transition as an example:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以`fly`过渡为例：
- en: '[PRE18]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the preceding code snippet, the `fly` transition is applied to a `<div>`
    element. In response to that, Svelte generates a `@keyframes` rule that looks
    like this:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`fly`过渡被应用于一个`<div>`元素。作为回应，Svelte生成一个类似下面的`@keyframes`规则：
- en: '[PRE19]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This generated `@keyframes` rule will be applied to the element for the duration
    of the transition. The `unique-id` part of the keyframe name ensures that each
    generated keyframe is unique and doesn’t interfere with other elements.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的`@keyframes`规则将在过渡期间应用于元素。关键帧名称中的`unique-id`部分确保每个生成的关键帧都是唯一的，并且不会与其他元素冲突。
- en: Based on the specified `duration` and `delay` of the transition, Svelte will
    calculate the appropriate timing for the animation and apply the generated `@keyframes`
    rule to the element, using the CSS `animation` property. The element will then
    animate according to the specified `transition`, `duration`, and `delay`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 根据过渡的指定`duration`和`delay`，Svelte将计算动画的适当时间，并将生成的`@keyframes`规则应用于元素，使用CSS的`animation`属性。然后，元素将根据指定的`transition`、`duration`和`delay`进行动画化。
- en: 'For example, in the following code snippet, we have a `fly` transition applied
    to a `<div>` element with a specified duration of 500 ms and a delay of 200 ms:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在下面的代码片段中，我们有一个`fly`过渡被应用于一个持续时间为500毫秒、延迟时间为200毫秒的`<div>`元素：
- en: '[PRE20]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To animate the `fly` transition in the preceding code snippet, Svelte will
    generate the corresponding keyframe animation, and apply the generated keyframe
    animation to the element with the specified duration and delay:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要在前面代码片段中动画化`fly`过渡，Svelte将生成相应的关键帧动画，并将生成的关键帧动画应用于具有指定持续时间和延迟的元素：
- en: '[PRE21]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: It is also possible to animate a transition using JavaScript.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，也可以使用JavaScript来动画化过渡。
- en: Svelte will schedule a loop through `requestAnimationFrame` to run the animation
    throughout the specified duration.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Svelte将通过`requestAnimationFrame`调度一个循环，在整个指定持续期间运行动画。
- en: We won’t delve further into the specifics of how the `requestAnimationFrame`
    loop works with the animation at this point. In the next chapter, we will explore
    the creation of custom transitions using JavaScript, which will provide a deeper
    understanding of how the `requestAnimationFrame` loop interacts with animations
    and how to effectively utilize it for smooth, engaging transitions. Stay tuned
    to learn more about crafting your own unique animations with Svelte.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在不会深入探讨`requestAnimationFrame`循环与动画的具体工作原理。在下一章中，我们将探讨如何使用JavaScript创建自定义过渡，这将更深入地了解`requestAnimationFrame`循环如何与动画交互，以及如何有效地利用它来实现平滑、引人入胜的过渡。敬请期待，了解更多关于如何使用Svelte制作独特动画的知识。
- en: Summary
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to add a transition onto an element. We explored
    the `transition:`, `in:`, and `out:` directives, and how to customize them.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何将过渡添加到元素上。我们探讨了`transition:`, `in:`, 和 `out:`指令，以及如何自定义它们。
- en: Following that, we looked at when and how the transitions are played. We discussed
    how the transitions are played when we have a mix of elements with and without
    transitions, and also how the transitions are played when used inside elements
    within nested logical blocks.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 随后，我们探讨了何时以及如何播放过渡。我们讨论了当元素既有过渡又有无过渡时，过渡是如何播放的，以及当过渡用于嵌套逻辑块内的元素时，过渡是如何播放的。
- en: Last but not least, we dug deeper into how the transition animations are played
    by Svelte.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们深入探讨了Svelte如何播放过渡动画。
- en: With this knowledge, you can now confidently apply transitions into elements
    when working with Svelte. This will allow you to enhance the interactivity and
    visual appeal of your applications, thereby providing a more engaging user experience.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 借助这些知识，你现在可以自信地将过渡应用到Svelte中的元素上。这将使你能够增强应用程序的交互性和视觉吸引力，从而提供更吸引人的用户体验。
- en: In the next chapter, we will look beyond the built-in transitions and will explore
    the creation of custom transitions.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将超越内置的过渡，并探讨自定义过渡的创建。
- en: '[PRE22]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
