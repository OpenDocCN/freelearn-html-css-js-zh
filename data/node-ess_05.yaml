- en: Chapter 5. Configuration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 配置
- en: 'As our applications get larger and larger, we start to lose sight of what is
    configured to do what; we may also get into a situation where we have code running
    in 12 different places, each needing a bit of code that has to be changed to do
    something else, for example connecting to a different database. Then, for each
    of those 12 environments, we have three versions: production, staging, and development.
    All of a sudden, it gets very complicated. This is why we need to be able to configure
    our code from a higher-level so that we don''t break anything in the process.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的应用程序变得越来越大，我们开始失去对配置做什么的视野；我们可能也会陷入这样一种情况：我们的代码在12个不同的地方运行，每个地方都需要一些代码来做一些其他事情，例如连接到不同的数据库。然后，对于这12个环境，我们有三个版本：生产、暂存和开发。突然间，情况变得非常复杂。这就是为什么我们需要能够从更高层次配置我们的代码，这样我们就不会在这个过程中破坏任何东西。
- en: JSON files
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON文件
- en: There are a few ways in which we can configure our application. The first way
    that we will look at is a simple JSON file.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以配置我们的应用程序。我们将首先看一种简单的JSON文件。
- en: 'If we look at the extensions require supports by default, we can see that we
    can import JSON right into our code, as shown:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看默认支持的扩展名，我们可以看到我们可以将JSON直接导入到我们的代码中，如下所示：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s create a simple server with a configuration file rather than a hardcoded
    file:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的服务器，使用配置文件而不是硬编码文件：
- en: 'First, we have to create the configuration file:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须创建配置文件：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With this, we can now create our server:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们现在可以创建我们的服务器了：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, we can just change the `config` file instead of changing the code to change
    the port on which our server is running.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要更改`config`文件，而不是更改代码来更改服务器运行的端口。
- en: But our `config` file is a bit too generic; we have no idea as to what is a
    host or a port and what they are related to.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们的`config`文件有点太通用了；我们不知道主机或端口是什么，以及它们与什么相关。
- en: While configuring, the keys need to be less generic so that we know what they
    are being used for, unless the context is given directly by the application. For
    example, if the application was to serve purely static content then it may be
    acceptable to have more generic keys.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置时，键需要更具体，这样我们才知道它们被用于什么，除非应用程序直接给出了上下文。例如，如果应用程序只提供纯静态内容，那么使用更通用的键可能是可以接受的。
- en: 'To make these configuration keys less generic, we can wrap them all in a server
    object:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这些配置键更具体，我们可以将它们全部包装在一个服务器对象中：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'So now, in order to know about the port of the server we need to use the following
    code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了了解服务器的端口，我们需要使用以下代码：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'An example where this will be useful could be for a server that connects to
    a database, as they can accept both the port and host as the parameters:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能有用的例子是连接到数据库的服务器，因为它们可以接受端口和主机作为参数：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Environmental variables
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境变量
- en: Another way in which we can configure our applications is through the use of
    environmental variables.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用环境变量来配置我们的应用程序的另一种方式。
- en: These can be defined by the environment you are running your application in
    or in the command that you are using to start your process with.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以由你运行应用程序的环境或使用的命令来定义。
- en: In Node.js, you can access the environmental variables using `process.env`.
    When using `env`, you don't want to be polluting this space too much and so it
    is a good idea to prefix the key with something related to yourself—your program
    or company. For example, `Config.server.host` becomes `process.env.NAME_SERVER_HOST`;
    the reason for this is that we can clearly see what is related to your program
    and what isn't.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js中，你可以使用`process.env`来访问环境变量。使用`env`时，你不希望过多地污染这个空间，所以最好是给键加上与你自己相关的前缀——你的程序或公司。例如，`Config.server.host`变成了`process.env.NAME_SERVER_HOST`；原因是我们可以清楚地看到与你的程序相关的内容和不相关的内容。
- en: 'Using environmental variables to configure our server, our code will look as
    follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用环境变量来配置我们的服务器，我们的代码将如下所示：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To run this code with our variables, we will use:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用我们的变量运行这段代码，我们将使用：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You probably noticed that I had to use `parseInt` for `FOO_SERVER_PORT`; this
    is because all variables passed in this manner are essentially strings. We can
    see this by executing `typeof process.env.FOO_ENV`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到我不得不对`FOO_SERVER_PORT`使用`parseInt`；这是因为以这种方式传递的所有变量本质上都是字符串。我们可以通过执行`typeof
    process.env.FOO_ENV`来看到这一点：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Although this kind of configuration is very simple to create and consume, it
    may not be the best method, as the variables are hard to keep track of if there
    are a lot of them and they can be dropped very easily.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种配置非常简单易于创建和使用，但可能不是最佳方法，因为如果变量很多，很难跟踪它们，并且它们很容易被遗漏。
- en: Arguments
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参数
- en: Another way in which the configuration can be done is through the use of arguments
    that are passed to Node.js as the process starts, you can access these using `process.argv`,
    with `argv` standing for argument vector.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 配置可以通过作为进程启动时传递给Node.js的参数来完成，你可以使用`process.argv`来访问这些参数，`argv`代表参数向量。
- en: The array that `process.argv` returns will always have a `node` at index `0`.
    For example, if you run node `server.js` then `process.argv` will have the value
    of `[ 'node', '/example/server.js' ]`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`process.argv`返回的数组始终会在索引`0`处有一个`node`。例如，如果你运行`node server.js`，那么`process.argv`的值将是`[
    ''node'', ''/example/server.js'' ]`。'
- en: If you pass an argument to Node.js then it will be added to the end of `process.argv`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你向Node.js传递一个参数，它将被添加到`process.argv`的末尾。
- en: If you run `node server.js --port=8001`, the `process.argv` will contain `[
    'node', '/example/server.js', '--port=8001' ]`, pretty simple, right?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行`node server.js --port=8001`，`process.argv`将包含`[ 'node', '/example/server.js',
    '--port=8001' ]`，非常简单，对吧？
- en: Even though we can have all this configuration, we should always remember that
    configuration can be simply excluded and we will still want our application to
    run when this happens. Usually, you should provide default hardcoded values as
    a backup when you have configuration options.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以有所有这些配置，但我们应该始终记住，配置可以被简单地排除，即使这种情况发生，我们仍希望我们的应用程序能够运行。通常情况下，当你有配置选项时，你应该提供默认的硬编码值作为备份。
- en: Parameters such as passwords and private keys should never have a default value
    but links and options that are usually standard should be given defaults. It is
    pretty easy to give a default value in Node.js, all you need to do is use the
    `OR` operator.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 密码和私钥等参数永远不应该有默认值，但通常标准的链接和选项应该有默认值。在 Node.js 中很容易给出默认值，你只需要使用 `OR` 运算符。
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Essentially, what this does is check if the value is `falsy`; if it is, then
    use the default value. You need to watch out for values that you know could be
    `falsy`, booleans and numbers definitely fall into this category.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这样做的作用是检查值是否为“falsy”；如果是，则使用默认值。你需要注意那些你知道可能是“falsy”的值，布尔值和数字肯定属于这个范畴。
- en: 'In these cases you can use an `if` statement checking for a `null` value, as
    shown:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，你可以使用一个检查 `null` 值的 `if` 语句，如下所示：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Summary
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: That's all for configuration. In this chapter you learned about the three methods
    that you can use to create a dynamic application. We learned that we should name
    our configuration keys in a way that we can identify what the values are changing
    to and how they will affect our application. We also learned about how we can
    pass simple arguments to our application using environmental variables and `argv`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 配置就介绍到这里。在本章中，你学会了三种创建动态应用程序的方法。我们学到了应该以一种可以识别值的变化和它们对应用程序的影响的方式命名配置键。我们还学会了如何使用环境变量和
    `argv` 将简单参数传递给我们的应用程序。
- en: With this information, we can move forward to connecting and utilizing databases
    in the next chapter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些信息，我们可以继续在下一章中连接和利用数据库。
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Bentham Chang 准备，Safari ID bentham@gmail.com 用户编号：2843974 © 2015 Safari Books
    Online，LLC。此下载文件仅供个人使用，并受到服务条款的约束。任何其他使用都需要版权所有者的事先书面同意。未经授权的使用、复制和/或分发严格禁止并违反适用法律。保留所有权利。
