- en: Chapter 9. Developing Your First CreateJS Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章：开发您的第一个 CreateJS 应用程序
- en: In our previous chapters, you learned everything you need to know about building
    impressive web applications using CreateJS. In this chapter, we will wrap up everything
    and learn to build an actual application using CreateJS from scratch. We will
    develop a simple painting application with options such as the ability to change
    the background color, brush color, brush style, brush size, and so on. Also, you
    will learn about the tricks and tips that will help you develop better JavaScript
    libraries and applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的章节中，您学习了构建令人印象深刻的 Web 应用程序所需的所有关于 CreateJS 的知识。在本章中，我们将总结所有内容，并学习从头开始使用
    CreateJS 构建实际应用程序。我们将开发一个简单的绘画应用程序，具有更改背景颜色、画笔颜色、画笔样式、画笔大小等功能。此外，您还将了解有助于您开发更好的
    JavaScript 库和应用程序的技巧和提示。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Conceptualizing the application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构想应用程序
- en: Explaining the structure of the application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释应用程序的结构
- en: Implementing every part of the application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现应用程序的每个部分
- en: Getting an image exported from the `Canvas` element
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `Canvas` 元素导出图像
- en: Understanding your application structure
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解您的应用程序结构
- en: To demonstrate the application development with CreateJS, we will build a painting
    application. In this application, we will use the EaselJS module and some pure
    JavaScript snippets to get an image exported from the `Canvas` element. As you
    know, EaselJS renders all outputs into a `Canvas` element; there are some JavaScript
    functions to get an image output from the `Canvas` element.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示使用 CreateJS 的应用程序开发，我们将构建一个绘画应用程序。在这个应用程序中，我们将使用 EaselJS 模块和一些纯 JavaScript
    片段来从 `Canvas` 元素导出图像。正如您所知，EaselJS 将所有输出渲染到 `Canvas` 元素中；有一些 JavaScript 函数可以从
    `Canvas` 元素获取图像输出。
- en: 'This application contains three files:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序包含三个文件：
- en: '`index.html`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`'
- en: '`app.js`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.js`'
- en: '`style.css`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style.css`'
- en: In the `index.html` file, we create the HTML elements and link external files
    to it. `app.js` is the main JavaScript file that contains almost all JavaScript
    code to run an application, and `style.css` is used to style the page, drop-down
    menus, and other minor elements.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `index.html` 文件中，我们创建 HTML 元素并将外部文件链接到它。`app.js` 是包含几乎所有运行应用程序的 JavaScript
    代码的主要 JavaScript 文件，而 `style.css` 用于设置页面、下拉菜单和其他小元素的风格。
- en: '![Understanding your application structure](img/0260OS_09_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![理解您的应用程序结构](img/0260OS_09_01.jpg)'
- en: We split the dependencies into different files to manage them better and provide
    better performance while loading the application. External static files will be
    cached in browsers, so users will not require to download them every time the
    page is refreshed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将依赖项拆分到不同的文件中，以便更好地管理它们，并在加载应用程序时提供更好的性能。外部静态文件将在浏览器中缓存，因此用户在刷新页面时不需要重新下载它们。
- en: Our painting application mainly works with EaselJS features, such as the `curveTo`
    and `beginStroke` functions. In order to control the application's global settings
    such as the background color and brush color, we have global variables that hold
    the settings. We will be using them in other events or functions. These variables
    are changed when the user clicks on the different options and menus present on
    the page.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的绘画应用程序主要使用 EaselJS 功能，例如 `curveTo` 和 `beginStroke` 函数。为了控制应用程序的全局设置，如背景颜色和画笔颜色，我们使用了全局变量来保存这些设置。我们将在其他事件或函数中使用它们。当用户点击页面上的不同选项和菜单时，这些变量会发生变化。
- en: 'The preview of the application interface is as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序界面的预览如下：
- en: '![Understanding your application structure](img/0260OS_09_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![理解您的应用程序结构](img/0260OS_09_02.jpg)'
- en: The application has a navigation bar that consists of four drop-down menus and
    a title. With the drop-down menus, users can change the brush style, brush size,
    background color, and brush color. Also, there is an **Export** link that converts
    the `Canvas` element to a PNG image, and gives a download link to the user from
    where the user can download the image.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序有一个由四个下拉菜单和一个标题组成的导航栏。用户可以通过下拉菜单更改画笔样式、画笔大小、背景颜色和画笔颜色。此外，还有一个 **导出** 链接，它将
    `Canvas` 元素转换为 PNG 图像，并为用户提供下载链接，用户可以从该链接下载图像。
- en: Our drop-down menus work with pure CSS code so we don't need any JavaScript
    code for them. In the next section, we will explain each part in detail.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下拉菜单使用纯 CSS 代码，因此我们不需要为它们编写任何 JavaScript 代码。在下一节中，我们将详细解释每个部分。
- en: Developing the index.html file
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发 index.html 文件
- en: 'Our main HTML page has a simple structure. Following is a `head` tag in an
    HTML page:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主 HTML 页面有一个简单的结构。以下是一个 HTML 页面的 `head` 标签：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the `head` tag, we only link the CSS file to the page. Other JavaScript files
    will be connected to the page at the end of the file and the reason is to provide
    better performance while loading the page. When we add stylesheets in the `head`
    tag and JavaScript files at the end of the HTML file (before closing the `body`
    tag), our page interface will appear to work faster because the browser doesn't
    wait to load all JavaScript and CSS files. The web browser loads CSS files because
    they are in the `head` tag, and after rendering all the HTML elements, it loads
    the JavaScript files. This trick gives a better feeling about the application's
    performance to users.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `head` 标签中，我们只链接 CSS 文件到页面。其他 JavaScript 文件将在文件末尾连接到页面，原因是提供更好的页面加载性能。当我们向
    `head` 标签添加样式表，并在 HTML 文件末尾（在关闭 `body` 标签之前）添加 JavaScript 文件时，我们的页面界面看起来会更快，因为浏览器不会等待加载所有
    JavaScript 和 CSS 文件。浏览器加载 CSS 文件，因为它们在 `head` 标签中，在渲染所有 HTML 元素之后，它加载 JavaScript
    文件。这个技巧给用户带来了更好的应用程序性能感。
- en: 'In the following lines, we have the `body` and `wrapper` elements:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下行中，我们有 `body` 和 `wrapper` 元素：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `wrapper` layer is the container for all other elements. Also the `div`
    header is the container for the black-colored header at the top of the page, as
    seen on the output screen. This section also contains the drop-down menus and
    export links.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`wrapper` 层是所有其他元素的容器。此外，`div` 标题是页面顶部黑色标题的容器，正如在输出屏幕上所见。本节还包含下拉菜单和导出链接。'
- en: 'The source code for one of the drop-down menus to choose the color of the brushes
    is as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 选择画笔颜色的下拉菜单的源代码如下：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Each drop-down menu has a `div` element with a subclass. Inside the `div` element,
    we have some `ul` and `li` elements that define the drop-down menu. For color
    pickers, we have a circle that shows the current color. Other drop-down menus
    have the same structure. After drop-down menus, we have a link to export the image.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每个下拉菜单都有一个具有子类的 `div` 元素。在 `div` 元素内部，我们有 `ul` 和 `li` 元素，它们定义了下拉菜单。对于颜色选择器，有一个显示当前颜色的圆形。其他下拉菜单具有相同的结构。在下拉菜单之后，我们有一个导出图像的链接。
- en: 'The source code for the same is as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的源代码如下：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, we have a function call when a user clicks on the `Export` link.
    We call the `exportToImage` function, which converts the `Canvas` element to a
    PNG image.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，当用户点击 `Export` 链接时，会调用一个函数。我们调用 `exportToImage` 函数，该函数将 `Canvas` 元素转换为
    PNG 图像。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will explain this function better in the next sections.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中更好地解释这个函数。
- en: 'Finally, we have the definition of the `Canvas` element:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有 `Canvas` 元素的定义：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `canvas id` object is assigned with the `pStage` value and is placed inside
    a `div` element. After that, we link our two JavaScript files. The first file
    is the CreateJS library with all subsets in a combined file and the second is
    the `app.js` file as shown:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`canvas id` 对象被分配了 `pStage` 的值，并被放置在一个 `div` 元素内部。之后，我们链接了两个 JavaScript 文件。第一个文件是包含所有子集的
    CreateJS 库的合并文件，第二个是 `app.js` 文件，如下所示：'
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We use CreateJS CDN servers to load the main library file. This file is already
    minified and we can use it in the production environment.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 CreateJS CDN 服务器来加载主库文件。此文件已经压缩，我们可以在生产环境中使用它。
- en: Implementing the app.js file
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现 app.js 文件
- en: 'The `app.js` file is the main JavaScript file that contains all functionality
    and logic for the painting application. This file consists of five functions;
    one of them is the main function that performs the set up of other events and
    configures and creates the stage. The next three functions are the callback functions
    for different mouse events, and the last function is used to create a PNG image
    from the `Canvas` element. But before everything else, we have the global variable''s
    declaration shown as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.js` 文件是包含绘画应用程序所有功能和逻辑的主要 JavaScript 文件。该文件由五个函数组成；其中一个是主函数，它执行其他事件的设置、配置和创建舞台。接下来的三个函数是不同鼠标事件的回调函数，最后一个函数用于从
    `Canvas` 元素创建 PNG 图像。但在所有其他事情之前，我们有全局变量的声明，如下所示：'
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will explain more about the usage of each variable in the next sections.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中详细解释每个变量的用法。
- en: After that, we have the `init` function, which is the main function for the
    application.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们有 `init` 函数，它是应用程序的主要函数。
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the first line, we get the `Canvas` element using the `getElementById` function.
    Then we set the width and height of the `Canvas` element to the window's width
    and height to fit the canvas to the page. The reason we use `-73` for the `innerHeight`
    value is to prevent vertical scrolling of the page as our header height is about
    73 pixels. After that, default options are set. You can change them with to do
    your preferred options.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们使用 `getElementById` 函数获取 `Canvas` 元素。然后我们将 `Canvas` 元素的宽度和高度设置为窗口的宽度和高度，以便将画布适应到页面。我们使用
    `-73` 作为 `innerHeight` 值的原因是防止页面垂直滚动，因为我们的页眉高度大约是 73 像素。之后，我们设置默认选项。您可以根据需要更改它们。
- en: 'In order to bind the `onclick` events to the drop-down menus, we have a simple
    `for` loop that iterates over the `ul` items and binds the `onclick` event to
    the links:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将 `onclick` 事件绑定到下拉菜单中，我们有一个简单的 `for` 循环，遍历 `ul` 项目并将 `onclick` 事件绑定到链接上：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the first line, we have a `for` loop that iterates over the drop-down items,
    and then binds an `onclick` event to each item. The same code is also used for
    other drop-down menus. Finally, we end the file with the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们有一个遍历下拉项的 `for` 循环，然后为每个项绑定一个 `onclick` 事件。相同的代码也用于其他下拉菜单。最后，我们使用以下代码结束文件：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the first line, like our previous examples, `Stage` is the object that is
    created. After that, we set the `autoClear` property to `false` in order to manage
    the `stage` object getting cleared manually. Then, we set the `touch` feature
    to `enable`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，就像我们之前的例子一样，`Stage` 是创建的对象。之后，我们将 `autoClear` 属性设置为 `false` 以便手动管理 `stage`
    对象的清除。然后，我们设置 `touch` 功能为 `enable`。
- en: We are developing a painting application so we need to bind callback functions
    to the `mousedown`, `mouseup`, and `mousemove` events in order to manage and control
    mouse events. In the next lines, we bind callback functions to the `stagemousedown`
    and `stagemouseup` events, which are used to handle the mouse-click events.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在开发一个绘画应用程序，因此我们需要将回调函数绑定到 `mousedown`、`mouseup` 和 `mousemove` 事件，以便管理和控制鼠标事件。在接下来的几行中，我们将回调函数绑定到
    `stagemousedown` 和 `stagemouseup` 事件，这些事件用于处理鼠标点击事件。
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the painting application, we have a background layer where the user can change
    the color using the drop-down menu.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在绘画应用程序中，我们有一个背景层，用户可以使用下拉菜单更改颜色。
- en: In the next lines, we create a `Shape` object that is used for the background
    layer and then we create the next shape to draw the painting lines. Both of these
    shapes are added to the stage using the `addChild` function.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几行中，我们创建了一个用于背景层的 `Shape` 对象，然后我们创建了下一个形状来绘制绘画线条。这两个形状都通过 `addChild` 函数添加到舞台中。
- en: 'The source code for the `mouseDownCallback` event is as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`mouseDownCallback` 事件的源代码如下所示：'
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Inside this function, we collect the current mouse cursor's coordinates and
    also add a callback function to the `stagemousemove` event.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数内部，我们收集当前鼠标光标的坐标，并添加一个回调函数到 `stagemousemove` 事件。
- en: 'The `mouseMoveCallback` function source code is shown as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`mouseMoveCallback` 函数的源代码如下所示：'
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the first line, we calculate the next point that we need for the `moveTo`
    function using the current mouse position and the old mouse position. In the next
    line, we create a stroke with the current options and move the point to the new
    coordinates that we have calculated in the first line. After that, old positions
    are updated and finally the `update` function is called from the `stage` object.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们使用当前鼠标位置和旧鼠标位置计算下一个 `moveTo` 函数所需的点。在下一行，我们使用当前选项创建一个描边，并将点移动到我们在第一行计算的新坐标。之后，更新旧位置，最后从
    `stage` 对象调用 `update` 函数。
- en: 'Our last callback function for events is the `mouseUpCallback` function. Inside
    this function, we unbind the callback function from `stagemousemove` to stop drawing,
    which is shown as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的事件最后回调函数是 `mouseUpCallback` 函数。在这个函数内部，我们取消绑定 `stagemousemove` 回调函数以停止绘制，如下所示：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The last function is the `exportToImage` function, which is used to get a PNG
    image exported from the `Canvas` element. In this function, we convert the `Canvas`
    element to a PNG image format with base 64 and set the output to the link''s `href`
    object. There is a function called `toDataUrl` that converts the contents from
    the `Canvas` element to an image. The `exportToImage` function is called when
    the **Export** link is clicked by a user. The following code explains the same:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个函数是`exportToImage`函数，它用于从`Canvas`元素获取导出的PNG图像。在这个函数中，我们将`Canvas`元素转换为以64位为基础的PNG图像格式，并将输出设置到链接的`href`对象中。有一个名为`toDataUrl`的函数，它将`Canvas`元素的内容转换为图像。当用户点击**导出**链接时，会调用`exportToImage`函数。以下代码解释了相同的内容：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'At the end of the file, we call the `init` function to start the application:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件末尾，我们调用`init`函数来启动应用：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Preview of the final application
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终应用的预览
- en: 'Once the code is run, our painting application will be ready for use. The preview
    of our final application is as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码运行，我们的绘画应用就准备好使用了。以下截图展示了我们最终应用的预览：
- en: '![Preview of the final application](img/0260OS_09_03.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![最终应用的预览](img/0260OS_09_03.jpg)'
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned to create an actual web application using CreateJS
    from scratch and use the different features offered by this library. We gained
    experience on how to declare global options and change them using user inputs,
    and apply the changes in the application. Also, we learned how to export images
    from the `Canvas` element using the powerful JavaScript API.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何从头开始使用CreateJS创建实际的Web应用，并使用这个库提供的不同功能。我们获得了如何声明全局选项以及如何通过用户输入来更改它们并在应用中应用这些更改的经验。此外，我们还学习了如何使用强大的JavaScript
    API从`Canvas`元素导出图像。
- en: Furthermore, we discussed how to include static files such as JavaScript and
    CSS to provide better performance while loading the application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还讨论了如何包含静态文件，如JavaScript和CSS，以在加载应用时提供更好的性能。
- en: Every new beginning is some beginning's end and as you turn the last pages of
    this intuitive guide, you are empowered to explore, discover, develop, and build
    astounding web applications using CreateJS. In this age of the Internet citizenship,
    HTML5 has emerged as a powerful platform, where you can make your mark with compelling
    web applications. So go ahead, create the next amazing web app, and thrill the
    world!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个新的开始都是某个结束的开始，当你翻到这本直观指南的最后一页时，你将获得探索、发现、发展和构建令人惊叹的Web应用的能力，使用CreateJS。在这个网络公民的时代，HTML5已经崛起为一个强大的平台，你可以通过引人入胜的Web应用留下自己的印记。所以，大胆地去做吧，创造下一个惊人的Web应用，让世界为之振奋！
