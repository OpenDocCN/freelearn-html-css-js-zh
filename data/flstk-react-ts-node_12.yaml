- en: '*Chapter 9*: What is GraphQL?'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章：什么是GraphQL？
- en: In this chapter, we'll learn about GraphQL, one of the hottest web technologies
    currently being used. Many large companies have adopted GraphQL for their APIs,
    including companies such as Facebook, Twitter, New York Times, and GitHub. We'll
    learn what makes GraphQL so popular, how it works internally, and how we can take
    advantage of its features.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习GraphQL，这是目前最热门的web技术之一。许多大公司已经采用了GraphQL作为他们的API，包括Facebook、Twitter、纽约时报和GitHub等公司。我们将学习GraphQL为什么如此受欢迎，它内部是如何工作的，以及我们如何利用它的特性。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Understanding GraphQL
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解GraphQL
- en: Understanding GraphQL schemas
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解GraphQL模式
- en: Understanding typedefs and resolvers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解类型定义和解析器
- en: Understanding queries, mutations, and subscriptions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解查询、变异和订阅
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You should have a basic understanding of web development using Node. We will
    once again be using Node and Visual Studio Code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该对使用Node进行web开发有基本的了解。我们将再次使用Node和Visual Studio Code。
- en: The GitHub repository is at [https://github.com/PacktPublishing/Full-Stack-React-TypeScript-and-Node](https://github.com/PacktPublishing/Full-Stack-React-TypeScript-and-Node).
    Use the code in the `Chap9` folder.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub存储库位于[https://github.com/PacktPublishing/Full-Stack-React-TypeScript-and-Node](https://github.com/PacktPublishing/Full-Stack-React-TypeScript-and-Node)。使用`Chap9`文件夹中的代码。
- en: To set up the `Chap9` code folder, go to your `HandsOnTypescript` folder and
    create a new folder called `Chap9`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置`Chap9`代码文件夹，转到你的`HandsOnTypescript`文件夹并创建一个名为`Chap9`的新文件夹。
- en: Understanding GraphQL
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解GraphQL
- en: In this section, we will explore what GraphQL is, why it was created, and what
    problems it attempts to solve. It is important to understand the underlying reasons
    for GraphQL's existence as it will help us design better web APIs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨GraphQL是什么，为什么它被创建以及它试图解决什么问题。了解GraphQL存在的根本原因很重要，因为它将帮助我们设计更好的web
    API。
- en: 'So, what is GraphQL? Let''s list some of its main characteristics:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，GraphQL是什么？让我们列举一些它的主要特点：
- en: '**GraphQL is a data schema standard developed by Facebook.**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GraphQL是Facebook开发的数据模式标准。**'
- en: GraphQL provides a standard language for defining data, data types, and related
    data queries. You can think of GraphQL as roughly analogous to an interface that
    provides a contract. There's no code there, but you can still see what types and
    queries are available.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL提供了一个标准语言来定义数据、数据类型和相关数据查询。你可以把GraphQL大致类比为提供合同的接口。那里没有代码，但你仍然可以看到可用的类型和查询。
- en: '**GraphQL works across platforms, frameworks, and languages.**'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GraphQL跨平台、框架和语言运行。**'
- en: When we create an API using GraphQL, the same GraphQL language will be used
    to describe our data, its types, and queries no matter what programming language
    or operating system we use. Having a consistent and reliable representation of
    data across a wide variety of systems and platforms is, of course, a good thing
    for clients and systems. But it's also beneficial to programmers, since we can
    continue to use our normal programming language and frameworks of choice.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用GraphQL创建API时，无论我们使用什么编程语言或操作系统，都将使用相同的GraphQL语言来描述我们的数据、类型和查询。在各种系统和平台上拥有一致可靠的数据表示当然对客户端和系统来说是一件好事。但对程序员来说也是有益的，因为我们可以继续使用我们正常的编程语言和选择的框架。
- en: '**GraphQL returns control for what is queried to the caller.**'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GraphQL将查询的控制权交给调用者。**'
- en: In a standard web service, it is the server that controls what fields of the
    data will be returned. However, in a GraphQL API, it is the client that determines
    which fields they would like to receive. This gives clients better control and
    reduces bandwidth usage and cost.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在标准web服务中，是服务器控制返回的数据字段。然而，在GraphQL API中，是客户端确定他们想要接收哪些字段。这给客户端更好的控制权，减少了带宽使用和成本。
- en: 'Broadly speaking, there are two main uses of a GraphQL endpoint. One is as
    a gateway to consolidate other data services, and the other is as the main web
    API service that directly receives data from a datastore and provides it to clients.
    Here''s a diagram of GraphQL being used as a gateway for other data:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 广义上说，GraphQL端点有两个主要用途。一个是作为整合其他数据服务的网关，另一个是作为直接从数据存储接收数据并提供给客户端的主要web API服务。下面是一个使用GraphQL作为其他数据网关的图表：
- en: '![Figure 9.1 – GraphQL as a gateway'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1 - GraphQL作为网关'
- en: '](img/Figure_9.1_B15508.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.1_B15508.jpg)'
- en: Figure 9.1 – GraphQL as a gateway
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 - GraphQL作为网关
- en: As you can see, GraphQL is acting as the single source of truth for all clients.
    It works well in this capacity due to its standards-based language that is supported
    across a wide variety of systems.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，GraphQL作为所有客户端的唯一真相来源。它在这方面表现良好，因为它是基于标准的语言，支持各种系统。
- en: For our own application, we will use it as our entire web API, but it is possible
    to mix it in with existing web services so that GraphQL handles only a part of
    the service calls being made. This means you do not need to rewrite your entire
    application. You can introduce GraphQL slowly and deliberately where it makes
    sense to do so, without disrupting your current application services.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们自己的应用程序，我们将把它用作我们整个的web API，但也可以将其与现有的web服务混合在一起，以便GraphQL仅处理正在进行的部分服务调用。这意味着你不需要重写整个应用程序。你可以逐渐有意识地引入GraphQL，只在有意义的地方这样做，而不会干扰你当前的应用程序服务。
- en: In this section, we took a look at GraphQL at a conceptual level. GraphQL has
    its own data language, meaning it can be used regardless of server framework,
    application programming language, or operating system. This flexibility allows
    GraphQL to be a powerful means of sharing data throughout an organization or even
    across the web. In the next section, we will explore the GraphQL schema language
    and see how it works. It will help us structure our data models and understand
    how to set up our GraphQL server.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们从概念层面上了解了GraphQL。GraphQL有自己的数据语言，这意味着它可以在不同的服务器框架、应用程序编程语言或操作系统上使用。这种灵活性使得GraphQL成为在整个组织甚至整个网络中共享数据的强大手段。在下一部分中，我们将探索GraphQL模式语言并了解它是如何工作的。这将帮助我们构建我们的数据模型并了解如何设置我们的GraphQL服务器。
- en: Understanding GraphQL schemas
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解GraphQL模式
- en: As stated, GraphQL is a language used to provide structure and type information
    to our entity data. Regardless of which vendor's implementation of GraphQL is
    used on the server, our client can expect the same data structures to be returned.
    This ability to abstract away the implementation details of servers to clients
    is one of the strengths of GraphQL.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如所述，GraphQL是一种用于为我们的实体数据提供结构和类型信息的语言。无论服务器上使用的是哪个供应商的GraphQL实现，我们的客户端都可以期望返回相同的数据结构。将服务器的实现细节抽象化给客户端是GraphQL的优势之一。
- en: 'Let''s create a simple GraphQL schema and see what it looks like:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的GraphQL模式并看看它是什么样子的：
- en: In the `Chap9` folder, create a new folder called `graphql-schema`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chap9`文件夹中，创建一个名为`graphql-schema`的新文件夹。
- en: 'Open your terminal in that folder and then run this command, accepting the
    defaults:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该文件夹中打开你的终端，然后运行这个命令，接受默认值：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now install these packages:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在安装这些包：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Initialize TypeScript with this command:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这个命令初始化TypeScript：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a new TypeScript file called `typeDefs.ts` and add this to it:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`typeDefs.ts`的新的TypeScript文件，并将其添加到其中：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This import gets the `gql` object, which allows syntax formatting and highlighting
    of the GraphQL schema language:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个导入获取了`gql`对象，它允许对GraphQL模式语言进行语法格式化和高亮显示：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The language is fairly simple and looks a lot like TypeScript. Starting from
    the top, first we have a `User` entity, as indicated by the `type` keyword. `type`
    is a GraphQL keyword that indicates that an object of a certain structure is being
    declared. As you can see, the `User` type has multiple fields. The `id` field
    is of type `ID!`. The `ID` type is a built-in type that indicates a unique value,
    basically a GUID of some kind. The exclamation mark indicates that the field cannot
    be `null`, whereas no exclamation mark would indicate that it can be `null`. Next,
    we see the `username` field and its type of `String!`, which of course means it
    is a non-nullable string type. Then, we have the `description` field, but it has
    a `String` type without an exclamation mark, so it is nullable.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语言相当简单，看起来很像TypeScript。从顶部开始，首先我们有一个`User`实体，如`type`关键字所示。`type`是一个GraphQL关键字，表示正在声明某种结构的对象。正如你所看到的，`User`类型有多个字段。`id`字段的类型是`ID!`。`ID`类型是一个内置类型，表示一个唯一的值，基本上是某种GUID。感叹号表示该字段不能为`null`，而没有感叹号表示它可以为`null`。接下来，我们看到`username`字段及其类型为`String!`，这当然意味着它是一个非空字符串类型。然后，我们有`description`字段，但它的类型是`String`，没有感叹号，所以它是可空的。
- en: 'The `Todos` type has similar fields, but notice the `Query` type. This shows
    that even queries are types in GraphQL. So, if you look at the two queries, `getUser`
    and `getTodos`, you can see why we created the `User` and `Todos` types, as they
    become the return values for our two `Query` methods. Also notice that the `getTodos`
    function returns an array of non-nullable `Todos`, which is indicated by the brackets.
    Finally, we export our type definitions using the `typeDefs` variable:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`Todos`类型具有类似的字段，但请注意`Query`类型。这表明即使查询在GraphQL中也是类型。因此，如果你查看两个查询，`getUser`和`getTodos`，你可以看到为什么我们创建了`User`和`Todos`类型，因为它们成为我们两个`Query`方法的返回值。还要注意`getTodos`函数返回一个非空的`Todos`数组，这由括号表示。最后，我们使用`typeDefs`变量导出我们的类型定义：'
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Type definitions are used by Apollo GraphQL to describe the schema types in
    a schema file. Before your server can start providing any GraphQL data, it must
    first have a complete schema file that lists *all* of your application's types,
    their fields, and queries that will be served in its API.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 类型定义被Apollo GraphQL用来描述模式文件中的模式类型。在你的服务器可以开始提供任何GraphQL数据之前，它必须首先有一个完整的模式文件，列出你应用程序的所有类型、它们的字段和将在其API中提供的查询。
- en: Another thing to note is that GraphQL has several default scalar types that
    are built into the language. These are `Int`, `Float`, `String`, `Boolean`, and
    `ID`. As you noticed in the schema file, we did not have to create a type notation
    for these types.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要注意的是，GraphQL有几种默认的标量类型内置到语言中。这些是`Int`、`Float`、`String`、`Boolean`和`ID`。正如你在模式文件中注意到的，我们不需要为这些类型创建类型标记。
- en: In this section, we reviewed what a simple GraphQL schema file looks like. We
    will be using this syntax as we build out our API. In the next section, we will
    dive deeper into the GraphQL language and also learn what resolvers are.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们回顾了一个简单的GraphQL模式文件是什么样子。在下一部分中，我们将深入了解GraphQL语言，并学习解析器是什么。
- en: Understanding Typedefs and Resolvers
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解类型定义和解析器
- en: In this section we will further explore GraphQL schemas, but we will also implement
    resolvers, which are the functions that do the actual work. This section will
    also introduce us to Apollo GraphQL and how to create a GraphQL server instance.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将进一步探讨GraphQL模式，但我们也将实现解析器，这些解析器是实际工作的函数。这一部分还将向我们介绍Apollo GraphQL以及如何创建一个GraphQL服务器实例。
- en: What are resolvers? Resolvers are the functions that get or edit the data from
    our datastore. This data is then matched with the GraphQL type definition.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 解析器是什么？解析器是从我们的数据存储中获取或编辑数据的函数。然后将这些数据与GraphQL类型定义进行匹配。
- en: 'In order to see what the role of resolvers is in more depth, we need to continue
    building out our previous project. Let''s look at the steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更深入地了解解析器的作用，我们需要继续构建我们之前的项目。让我们看看步骤：
- en: 'Install the dependency UUID. This tool will allow us to create a unique ID
    for our `ID` types:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装依赖UUID。这个工具将允许我们为我们的`ID`类型创建一个唯一的ID：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a new file called `server.ts`, which will start our server, with this
    code:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`server.ts`的新文件，它将启动我们的服务器，使用这段代码：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here we import dependencies needed to set up our server. We already created
    the `typeDefs` file and we will soon create the `resolvers` file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们导入了设置服务器所需的依赖项。我们已经创建了`typeDefs`文件，很快我们将创建`resolvers`文件。
- en: 'Now we create our Express server `app` object:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们创建我们的Express服务器`app`对象：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`makeExecutableSchema` builds a programmatic schema from the combination of
    our `typeDefs` file and our `resolvers` file:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`makeExecutableSchema`从我们的`typeDefs`文件和`resolvers`文件的组合构建了一个程序化的模式：'
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, we create an instance of our GraphQL server:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们创建了一个GraphQL服务器的实例：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`context` is made up of the request and response objects of Express. Then,
    we add our middleware, which for GraphQL is our Express server object called `app`.
    The `cors` option indicates to disable GraphQL from acting as our CORS server.
    We''ll discuss CORS in later chapters as we build out our app.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`context`由Express的请求和响应对象组成。然后，我们添加了我们的中间件，对于GraphQL来说，就是我们的Express服务器对象`app`。`cors`选项表示禁用GraphQL作为我们的CORS服务器。随着我们构建应用程序，我们将在后面的章节中讨论CORS。'
- en: 'In this code, we are now starting up our Express server by listening on port
    `8000`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们现在通过监听端口`8000`启动我们的Express服务器：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `listen` handler just logs a message to announce it has started.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`listen`处理程序只是记录一条消息来宣布它已经启动。'
- en: 'Now let''s create our resolvers:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建我们的解析器：
- en: 'Create the `resolvers.ts` file and add this code to it:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`resolvers.ts`文件，并将这段代码添加到其中：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Since we are using TypeScript, we want to use types to represent our returned
    objects, and that''s what `User` and `Todo` represent. These types will be matched
    by GraphQL to the GraphQL types of the same name we had created in our `typeDefs.ts`
    file:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们使用TypeScript，我们希望使用类型来表示我们返回的对象，这就是`User`和`Todo`代表的。这些类型将与我们在`typeDefs.ts`文件中创建的同名的GraphQL类型相匹配：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here is our first resolver function, matching the `getUser` query. Notice that
    the parameter is more than just the `id` parameter. This is coming from the Apollo
    GraphQL server and adds additional information for our call. (Note that to save
    time, I am hardcoding a `User` object.) Also, we will create the `GqlContext`
    type later, but basically, it is a container that holds our request and response
    objects that we learned about in [*Chapter 8*](B15508_08_Final_JC_ePub.xhtml#_idTextAnchor122)*,
    Learning Server-Side Development with Node.js and Express*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的第一个解析器函数，匹配`getUser`查询。请注意，参数不仅仅是`id`参数。这是来自Apollo GraphQL服务器的，为我们的调用添加了额外的信息。（请注意，为了节省时间，我硬编码了一个`User`对象。）另外，我们稍后将创建`GqlContext`类型，但基本上，它是一个容器，保存了我们在[*第8章*](B15508_08_Final_JC_ePub.xhtml#_idTextAnchor122)*中学到的请求和响应对象。
- en: 'Similarly to `getUser`, our `getTodos` resolver receives similar parameters
    and also returns a hardcoded set of `Todo`:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似于`getUser`，我们的`getTodos`解析器接收类似的参数，并返回一个硬编码的`Todo`集合：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then we export the `resolvers` object:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们导出`resolvers`对象：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see, our actual data getters are just normal TypeScript code. If
    we had used Java or C# or any other language, the resolvers would simply be **Create
    Read Update Delete** (**CRUD**) operations in those languages as well. The GraphQL
    server, then, is just translating the data entity models into the types in our
    type definition schema file.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们的实际数据获取器只是普通的TypeScript代码。如果我们使用Java或C#或任何其他语言，解析器也将是这些语言中的**Create
    Read Update Delete** (**CRUD**)操作。然后，GraphQL服务器只是将数据实体模型转换为我们类型定义模式文件中的类型。
- en: 'Now let''s create our `GqlContext` type. Create a file called `GqlContext.ts`
    and add this code:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建我们的`GqlContext`类型。创建一个名为`GqlContext.ts`的文件，并添加这段代码：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is just a simple shell interface that allows us to provide type safety
    to our context in our GraphQL resolver calls. As you can see, this type contains
    the Express `Request` and `Response` objects.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个简单的shell界面，允许我们在GraphQL解析器调用中为我们的上下文提供类型安全性。正如你所看到的，这个类型包含了Express的`Request`和`Response`对象。
- en: 'So, now we need to compile our code to JavaScript since we are using TypeScript.
    Run this command:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，现在我们需要将我们的代码编译成JavaScript，因为我们使用的是TypeScript。运行这个命令：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we can run our new code; enter this:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以运行我们的新代码；输入这个：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you go to the URL `http://localhost:` `8000/graphql`, you should see the
    GraphQL Playground screen. This is a query testing page provided by Apollo GraphQL
    that allows us to manually test our queries. It looks like this:![Figure 9.2 –
    The GraphQL dev client
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你去到URL `http://localhost:` `8000/graphql`，你应该会看到GraphQL Playground屏幕。这是Apollo
    GraphQL提供的一个查询测试页面，允许我们手动测试我们的查询。它看起来像这样：![图9.2 - GraphQL开发客户端
- en: '](img/Figure_9.2_B15508.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.2_B15508.jpg)'
- en: Figure 9.2 – The GraphQL dev client
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 - GraphQL开发客户端
- en: Notice that I have already run one of the queries, which looks like JSON and
    is on the left, and the result is shown, which is also JSON and on the right.
    If you look at our query on the left, I am explicitly asking for only the `id`
    field, which is why only the `id` field is returned. Notice that the standard
    result format is `data > <function name> > <fields>`. Try running the `getTodos`
    query as a test.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我已经运行了一个查询，它看起来像JSON并且在左边，结果也显示在右边，也是JSON。如果你看左边的查询，我明确要求只返回`id`字段，这就是为什么只有`id`字段被返回。请注意，标准的结果格式是`data
    > <function name> > <fields>`。尝试运行`getTodos`查询作为测试。
- en: Another thing to note is the **DOCS** tab, which shows all the available queries,
    mutations, and subscriptions (we will go over these in the next section). It looks
    like this:![Figure 9.3 – The DOCS tab
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一个需要注意的是**DOCS**标签，它显示了所有可用的查询、变异和订阅（我们将在下一节中讨论这些）。它看起来像这样：![图9.3 - DOCS标签
- en: '](img/Figure_9.3_B15508.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.3_B15508.jpg)'
- en: Figure 9.3 – The DOCS tab
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 - DOCS标签
- en: 'Finally, the **SCHEMA** tab shows the schema type information of all our entities
    and queries:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，**SCHEMA** 标签显示了所有实体和查询的模式类型信息：
- en: '![Figure 9.4 – The SCHEMA tab'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.4 – SCHEMA 标签'
- en: '](img/Figure_9.4_B15508.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.4_B15508.jpg)'
- en: Figure 9.4 – The SCHEMA tab
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 – SCHEMA 标签
- en: As you can see, it looks identical to our `typeDefs.ts` file.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它看起来与我们的 `typeDefs.ts` 文件相同。
- en: In this section, we took a look at resolvers by running a small GraphQL server.
    Resolvers are the other half that makes GraphQL actually function. We also saw
    how relatively easy it is to get a small GraphQL server running by using the Apollo
    GraphQL library.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们通过运行一个小型的 GraphQL 服务器来查看解析器。解析器是使 GraphQL 实际运行的另一半。我们还看到了使用 Apollo GraphQL
    库相对容易地运行一个小型的 GraphQL 服务器。
- en: In the next section, we will delve more deeply into queries by looking at mutations
    and subscriptions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将更深入地研究查询，看看 mutations 和 subscriptions。
- en: Understanding queries, mutations, and subscriptions
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解查询、mutations 和 subscriptions
- en: 'When creating a GraphQL API, we want to do more than just get data: we may
    also want to write to a datastore or be notified when some data changes. In this
    section, we''ll see how to do both actions in GraphQL.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 GraphQL API 时，我们不仅想要获取数据：我们可能还想要写入数据存储或在某些数据发生变化时收到通知。在本节中，我们将看到如何在 GraphQL
    中执行这两个操作。
- en: 'Let''s take a look at how to write data using mutations first:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看如何使用 mutations 写入数据：
- en: 'We will create a mutation called `addTodo`, but in order to make the mutation
    more realistic, we will need a temporary datastore. So, we will create an in-memory
    datastore for testing purposes. Create the `db.ts` file and add this code to it:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个名为 `addTodo` 的 mutation，但为了使 mutation 更真实，我们需要一个临时数据存储。因此，我们将为测试目的创建一个内存数据存储。创建
    `db.ts` 文件并将以下代码添加到其中：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We have just added `Todos` from our previous list into an array that we are
    exporting.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚将我们以前列表中的 `Todos` 添加到一个数组中，并将其导出。
- en: 'Now we need to update our `typeDefs.ts` file to include our new mutation. Update
    it like this:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要更新我们的 `typeDefs.ts` 文件以包含我们的新 mutation。更新如下：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now we want to add our `addTodo` resolver. Add this code to your `resolvers.ts`
    file:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们想要添加我们的 `addTodo` 解析器。将以下代码添加到您的 `resolvers.ts` 文件中：
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As you can see, we have a new container object called `Mutation`, and inside
    of it is our `addTodo` mutation. It has similar parameters to the queries, but
    this mutation will add a new `Todo` to the `todos` array. If we run this code
    in the playground, we see this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们有一个名为 `Mutation` 的新容器对象，里面是我们的 `addTodo` mutation。它具有与查询类似的参数，但此 mutation
    将向 `todos` 数组添加一个新的 `Todo`。如果我们在 playground 中运行此代码，我们会看到这样：
- en: '![Figure 9.5 – The GraphQL playground for the addTodo mutation'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.5 – addTodo mutation 的 GraphQL playground'
- en: '](img/Figure_9.5_B15508.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.5_B15508.jpg)'
- en: Figure 9.5 – The GraphQL playground for the addTodo mutation
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 – addTodo mutation 的 GraphQL playground
- en: When our query is of type Query, we can leave out the query prefix. However,
    since this is a mutation, we must include it. As you can see, we only get back
    `id` and `title`, because that is all we asked for.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的查询是 Query 类型时，我们可以省略查询前缀。但是，由于这是一个 mutation，我们必须包含它。如您所见，我们只返回 `id` 和 `title`，因为这是我们要求的全部内容。
- en: 'Now let''s take a look at subscriptions, which are a way of being notified
    when certain data changes. Let''s get notified when our `addTodo` adds a new `Todo`
    object:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下订阅，这是一种在某些数据发生变化时收到通知的方式。让我们在我们的 `addTodo` 添加一个新的 `Todo` 对象时收到通知：
- en: 'We need to add an object of type `PubSub` from the `apollo-server-express`
    library into the GraphQL server `context`. This object is what allows us to both
    subscribe (ask to be notified when changes occur) and publish (send a notification
    when changes occur). Update the `server.ts` file as follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在 GraphQL 服务器的 `context` 中添加一个 `PubSub` 类型的对象，这个对象允许我们订阅（要求在发生变化时收到通知）和发布（在发生变化时发送通知）。更新
    `server.ts` 文件如下：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here is our `pubsub` object, based on the `PubSub` type:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是我们的 `pubsub` 对象，基于 `PubSub` 类型：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now we add the `pubsub` object to the GraphQL server''s `context` so that it
    can be used from our resolvers:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将 `pubsub` 对象添加到 GraphQL 服务器的 `context` 中，以便从我们的解析器中使用：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create an `httpServer` instance from Node directly and then use the `installSubscription
    Handlers` function on it. Then, when we call `listen`, we are now calling `listen`
    on the `httpServer` object and *not* the `app` object:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Node 直接创建一个 `httpServer` 实例，然后在其上使用 `installSubscription Handlers` 函数。然后，当我们调用
    `listen` 时，我们现在是在 `httpServer` 对象上调用 `listen`，而不是在 `app` 对象上：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now let''s update our `typeDefs.ts` file to add our new mutation. Just add
    this type:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们更新我们的 `typeDefs.ts` 文件以添加我们的新 mutation。只需添加此类型：
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now we can update our `resolvers.ts` file with our new subscription resolver:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以用新的订阅解析器更新我们的 `resolvers.ts` 文件：
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'const resolvers: IResolvers = {'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 'const resolvers: IResolvers = {'
- en: 'Query: {'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 'Query: {'
- en: 'getUser: async ('
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'getUser: async ('
- en: 'parent: any,'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 'parent: any,'
- en: 'args: {'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 'args: {'
- en: 'id: string;'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 'id: string;'
- en: '},'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'ctx: GqlContext,'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 'ctx: GqlContext,'
- en: 'info: any'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 'info: any'
- en: '): Promise<User> => {'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '): Promise<User> => {'
- en: return {
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'id: v4(),'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 'id: v4(),'
- en: 'username: "dave",'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 用户名："dave",
- en: '};'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '[PRE28]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'getTodos: async ('
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 'getTodos: async ('
- en: 'parent: any,'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 'parent: any,'
- en: 'args: null,'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 'args: null,'
- en: 'ctx: GqlContext,'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 'ctx: GqlContext,'
- en: 'info: any'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 'info: any'
- en: '): Promise<Array<Todo>> => {'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '): Promise<Array<Todo>> => {'
- en: return [
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: return [
- en: '{'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'id: v4(),'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 'id: v4(),'
- en: 'title: "First todo",'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 标题："第一个待办事项",
- en: 'description: "First todo description",'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 描述："第一个待办事项描述",
- en: '},'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'id: v4(),'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 'id: v4(),'
- en: 'title: "Second todo",'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 标题："第二个待办事项",
- en: 'description: "Second todo description",'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 描述："第二个待办事项描述",
- en: '},'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'id: v4(),'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 'id: v4(),'
- en: 'title: "Third todo",'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 标题："第三个待办事项",
- en: '},'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '];'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '];'
- en: '},'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '[PRE29]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Mutation: {'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 'Mutation: {'
- en: 'addTodo: async ('
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 'addTodo: async ('
- en: 'parent: any,'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 'parent: any,'
- en: 'args: {'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 'args: {'
- en: 'title: string;'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '标题: string;'
- en: 'description: string;'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '描述: string;'
- en: '},'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'ctx object, we have deconstructed it to just use the pubsub object, as it''s
    the only one we need:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ctx 对象，我们已将其解构为只使用 pubsub 对象，因为这是我们唯一需要的：
- en: '[PRE30]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: return todos[todos.length - 1];
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: return todos[todos.length - 1];
- en: '},'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'Subscription: {'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 'Subscription: {'
- en: 'Todo adds. Notice that our subscription newTodo is not a function. It''s an
    object with a member called subscribe:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 添加待办事项。请注意，我们的订阅 newTodo 不是一个函数。它是一个带有成员 subscribe 的对象：
- en: '[PRE31]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The rest is the same as before.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 其余部分与之前相同。
- en: '[PRE32]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Let''s try testing this. First, make sure you have compiled your code with
    `tsc`, started your server, and refreshed the playground. Then, open a new tab
    in the playground, enter this subscription, and click the play button:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试测试一下。首先，确保您已经用`tsc`编译了您的代码，启动了服务器，并刷新了playground。然后，在playground中打开一个新的标签页，输入这个订阅，然后点击播放按钮：
- en: '![Figure 9.6 – The newTodo subscription'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.6 – 新的待办事项订阅'
- en: '](img/Figure_9.6_B15508.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.6_B15508.jpg)'
- en: Figure 9.6 – The newTodo subscription
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6 – 新的待办事项订阅
- en: 'When you click the play button, nothing happens, because a new `Todo` has not
    been added yet. So, let''s go back to our `addTodo` tab and add a new `Todo`.
    Once you''ve done that, come back to the `newTodo` tab and you should see this:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击播放按钮时，什么也不会发生，因为还没有添加新的`Todo`。所以，让我们回到我们的`addTodo`标签页，添加一个新的`Todo`。一旦你做到了，回到`newTodo`标签页，你应该会看到这个：
- en: '![Figure 9.7 – The newTodo subscription result'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.7 – 新的待办事项订阅结果'
- en: '](img/Figure_9.7_B15508.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.7_B15508.jpg)'
- en: Figure 9.7 – The newTodo subscription result
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7 – 新的待办事项订阅结果
- en: As you can see, that works, and we get the newly added `Todo`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这很有效，我们得到了新添加的`Todo`。
- en: In this section, we learned about GraphQL queries, mutations, and subscriptions.
    We will be using these to build out our application API. Because GraphQL is an
    industry standard, all GraphQL client frameworks can work with any vendor's GraphQL
    server framework. Furthermore, clients using a GraphQL API can expect consistent
    behavior and the same query language regardless of server or vendor. This is the
    power of GraphQL.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了关于GraphQL查询、变更和订阅。我们将使用这些来构建我们的应用程序API。因为GraphQL是一个行业标准，所有GraphQL客户端框架都可以与任何供应商的GraphQL服务器框架一起工作。此外，使用GraphQL
    API的客户端可以期望在服务器或供应商不同的情况下获得一致的行为和相同的查询语言。这就是GraphQL的力量。
- en: Summary
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored the power and capabilities of GraphQL, one of the
    hottest new technologies for creating web APIs. GraphQL is an extremely capable
    technology, but also, because it is an industry standard, we can always expect
    consistent behavior across servers, frameworks, and languages.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了GraphQL的强大和能力，这是创建Web API的最热门的新技术之一。GraphQL是一种非常有能力的技术，而且，因为它是一个行业标准，我们总是可以期待在服务器、框架和语言之间获得一致的行为。
- en: In the next chapter, we will start bringing together the technologies we've
    learned about thus far and create an Express server using TypeScript, GraphQL,
    and helper libraries.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始整合我们迄今学到的技术，并使用TypeScript、GraphQL和辅助库创建一个Express服务器。
