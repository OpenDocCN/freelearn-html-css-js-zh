- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: So, You Want to Be a Web Developer, eh?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么，你想要成为一名网页开发者，对吧？
- en: Facebook. Wikipedia. CNN. Reddit. Ars Technica. Amazon. Instagram. ESPN. YouTube.
    Google. The web really has eaten the world, hasn’t it?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook. Wikipedia. CNN. Reddit. Ars Technica. Amazon. Instagram. ESPN. YouTube.
    Google. 网络真的吞噬了整个世界，不是吗？
- en: Millions of people visit millions of websites every day. Some to play games,
    some to see what’s going on in the world, others to let us know what they’re up
    to (and what their cats are up to!), and others to have conversations with the
    world on all sorts of topics. Banking, medicine, agriculture, society, parenting,
    exercise, food, and culture – virtually every industry and every interest you
    can think of has representation in this giant maze of websites.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每天有成千上万的人访问成千上万的网站。有些人是为了玩游戏，有些人是为了了解世界正在发生什么，有些人是为了让我们知道他们在忙什么（以及他们的猫在忙什么！），还有些人是为了与世界就各种话题进行交流。银行、医学、农业、社会、育儿、锻炼、食品和文化——几乎每个行业和每个你能想到的兴趣都在这个庞大的网站迷宫中有代表。
- en: But who makes these digital places we all (virtually) hang out in now? Who manipulates
    the technology that underpins it all to create the next great website? Well, if
    you are here reading this book, then guess what? You’ve taken your first step
    toward the answer being *you*!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但谁创造了我们所有人（虚拟地）现在都聚集的这些数字空间？谁操纵着支撑这一切的技术来创造下一个伟大的网站？好吧，如果你正在阅读这本书，那么猜猜看？你已经迈出了成为答案的第一步——那就是你！
- en: 'There are a great many more steps on that journey beyond this book, to be sure,
    but as they say: a journey of a thousand miles begins with a single step. The
    goal of this book is to give you a roadmap detailing the steps to take to become
    a web developer (whatever that is – we’ll get to that!). At the same time, it
    will give you the first layers of a foundation in the technology you will need
    to understand to succeed in that journey.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书之外，还有许多更多的步骤，但正如人们所说：千里之行，始于足下。这本书的目标是为你提供一个路线图，详细说明成为网页开发者（无论那是什么——我们很快就会谈到！）需要采取的步骤。同时，它将为你提供在技术上的成功旅程所需理解的技术基础的第一层。
- en: 'Make no mistake: this book will not teach you everything you need to know on
    a technical level – a single book could never do that – but by the time you reach
    the end, you’ll have the start of that knowledge in your brain, and you’ll have
    a clear picture of the next hill you should climb.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 不要误解：这本书不会教你所有你需要知道的技术知识——一本书永远做不到这一点——但当你读到结尾时，你会在脑海中拥有这些知识的起点，并且你会对下一个你应该攀登的山峰有一个清晰的画面。
- en: In this chapter, the essential goal is to give you an understanding of what
    a web developer is and what it takes to be one. Understanding this is, of course,
    key to your entire journey, because it wouldn’t make much sense to pursue a career
    you didn’t truly understand, would it? And, especially in a field where there
    can be a wide variety of definitions even for seemingly simple things, it’s important
    to have that foundational knowledge.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，基本目标是让你了解什么是网页开发者，以及成为其中一员需要什么。当然，理解这一点对于你的整个旅程至关重要，因为追求一个你并不真正理解的职业是没有太多意义的。特别是在一个即使是看似简单的事物也可能有广泛定义的领域，拥有基础的知识是非常重要的。
- en: 'So, in this chapter, we will cover the following topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将涵盖以下主题：
- en: What even IS a web developer?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 究竟什么是网页开发者？
- en: What does it take to be a web developer of varying types?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成为不同类型的网页开发者需要具备哪些条件？
- en: What are the types of tasks a web developer might perform on a daily basis?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页开发者可能每天会执行哪些类型的任务？
- en: What does a typical day on the job look like for a web developer?
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页开发者典型的一天工作内容是什么？
- en: What even IS a web developer?!
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 究竟什么是网页开发者?!
- en: When we ask the question “What is a web developer?” the obvious answer is someone
    who develops websites. But that answer is reductive and it doesn’t really begin
    to cover it all. Also, there really is no single, accepted definition, but there
    are many variations on the theme.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们问“什么是网页开发者？”这个问题时，明显的答案是那些开发网站的人。但这个答案过于简单化，并没有真正涵盖所有内容。此外，实际上并没有一个单一、被广泛接受的定义，但关于这个主题有很多变体。
- en: If you were to ask me – and you kind of have done, by reading this book! – my
    answer would be that a web developer is a programmer, a coder, or a software developer.
    All these terms are basically interchangeable, and they simply refer to someone
    who creates computer software, of which a website is a type.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你问我——通过阅读这本书，你多少已经做到了！——我的回答会是，网页开发者是程序员、编码者或软件开发者。所有这些术语基本上可以互换，它们仅仅指的是那些创建计算机软件的人，其中网站就是其中一种类型。
- en: The one true unifying principle, whether we’re talking about web development
    or another type of software development, is that you must be able to think logically,
    which translates to being able to write instructions (AKA code) that the computer
    will follow in order to produce a website in a web browser. Basically, web development
    is a form of software *engineering*, though not all software engineering is web
    development (because not all software runs on the web) – so, you’re really on
    a journey to becoming a software engineer, one whose software just so happens
    to run on the web.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们是在谈论网络开发还是其他类型的软件开发，唯一真正的统一原则是，你必须能够进行逻辑思考，这转化为能够编写计算机将遵循的指令（即代码），以便在网页浏览器中生成一个网站。基本上，网络开发是一种软件*工程*形式，尽管并非所有的软件工程都是网络开发（因为并非所有的软件都在网络上运行）——所以，你实际上是在走向成为一名软件工程师的旅程，而你的软件恰好运行在网络上。
- en: But it’s not all about writing code! A web developer also has to be a graphic
    artist. They have to be a usability expert. They have to be a business analyst.
    They have to be a writer and a copy editor. They have to be network engineers.
    And they have to be so much more. They must be a jack of all trades, in other
    words. The job is not just writing code; there’s much more to it, and we’ll get
    into it all as we move forward.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不仅仅是编写代码！网络开发者还必须是一名图形艺术家。他们必须是可用性专家。他们必须是业务分析师。他们必须是作家和校对员。他们必须是网络工程师。他们还必须做更多的事情。换句话说，他们必须是全能的。这份工作不仅仅是编写代码；其中还有很多其他的东西，随着我们继续前进，我们将一一探讨。
- en: 'This brings up a point that you will sometimes hear from those not as familiar
    with what’s involved in being a web developer: they say that web development is
    somehow *easier* than other kinds of software development. Well, let me dissuade
    you from that notion right now because it couldn’t be further from the truth.
    In fact, while it certainly isn’t true all the time, a strong argument can be
    made that web development is frequently *harder* than non-web development, just
    because of all that‘s involved, some of which is unique to web development (or,
    at least, is of larger concern than in non-web development). Here, I’m referring
    to things such as networking, since the web inherently operates over networks
    whereas not all software does, and the fact that in web development, you as the
    developer aren’t really in control of the runtime environment. For example, a
    user can resize their browser window however they want or change the zoom or font
    of a web page, and your code has to adapt and handle those decisions (this can
    be true to some extent in desktop development too, but it’s a *much* larger concern
    in web development).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这引发了一个观点，你有时会从那些不太熟悉网络开发者所涉及内容的人那里听到：他们说网络开发在某些方面*比其他类型的软件开发更容易*。好吧，让我立刻打消你的这种想法，因为这离真相相差甚远。事实上，虽然这并不总是正确的，但可以有力地论证，网络开发通常比非网络开发更难，仅仅是因为涉及到的所有事情，其中一些是网络开发特有的（或者至少在非网络开发中更为重要）。在这里，我指的是像网络这样的东西，因为网络本质上是在网络上运行的，而并非所有的软件都是这样，以及在网络开发中，作为开发者的你实际上并不真正控制运行环境。例如，用户可以随意调整他们的浏览器窗口大小，或者改变网页的缩放或字体，而你的代码必须适应并处理这些决定（这在桌面开发中也是真实的，但在网络开发中这是一个*更大的问题*）。
- en: 'With all that said, let me assuage any fear that might be rising in your mind:
    while there is indeed a lot to learn, the simple fact is that web development
    starts from some relatively basic concepts and builds from there. Plus, there
    is absolutely no need to learn everything all at once. No, you can be an exceptionally
    good web developer without knowing everything you “need” to learn at any given
    moment in time. This is a field where *learning to learn* is a key requirement,
    and being able to learn as you go and figure things out piece by piece is critical.
    In truth, there is simply no way one person ever *could* know everything out there,
    a fact you will understand quite well by the time you finish this book. In other
    words: you *will* get there, no matter how daunting it may seem, I promise!'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 说了这么多，让我来缓解你心中可能升起的任何恐惧：虽然确实有很多东西要学习，但简单的事实是，网络开发是从一些相对基本的概念开始的，并从这里逐步构建。此外，完全没有必要一次性学习所有东西。不，你可以在不知道任何给定时刻“需要”学习的所有内容的情况下，成为一个非常出色的网络开发者。这是一个需要“学会学习”的关键领域，能够边走边学，一点一点地解决问题是至关重要的。事实上，一个人根本不可能知道所有的事情，当你完成这本书的时候，你会非常清楚地理解这一点。换句话说：无论看起来多么令人畏惧，我保证你*会到达那里*！
- en: Let‘s go a little bit deeper in terms of what it means to be a web developer
    and what it looks like from a process perspective to build a website, at least
    at a very high level.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地探讨一下成为网页开发者意味着什么，以及从流程角度来看构建网站是什么样的，至少在非常高的层面上。
- en: Digging deeper into being a web developer and building websites
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入探讨成为网页开发者和构建网站
- en: In general, it all starts with **stakeholders** or clients – essentially, the
    people you are creating a website for. Of course, that stakeholder could also
    be you yourself. Either way, someone somewhere has some idea for a website.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，一切始于 **利益相关者** 或客户——本质上，是你为谁创建网站的人。当然，那个利益相关者也可能是你自己。无论如何，某个地方总有人有一些关于网站的构想。
- en: This website could be what we call a **brochureware** site (or “brochure website”),
    which is a site that is more or less just static (unchanging) content. Have you
    ever checked out the website for your favorite local pizza joint? Chances are,
    it isn’t much more than some information about the restaurant, a menu, and some
    contact information to use to place an order (some will have online ordering,
    of course, but let’s assume your local place isn’t fancy enough to have that).
    Sites such as that would generally be considered brochureware because they, in
    a sense, are a digital version of a company’s marketing brochure. They, for the
    most part, aren’t interactive; their goal is simply to convey information to you.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网站可能是我们所说的 **宣传册网站**（或“宣传册网站”），这是一种更多或更少只是静态（不变）内容的网站。你有没有检查过你最喜欢的当地比萨店的网站？很可能，它除了提供一些关于餐厅的信息、菜单和一些用于下单的联系方式之外，没有更多内容（当然，有些可能会有在线订购，但让我们假设你的当地地方不够豪华到有这个功能）。这样的网站通常被认为是宣传册网站，因为它们在某种程度上是公司营销宣传册的数字版本。它们大部分不是交互式的；它们的目的是简单地传达信息给你。
- en: 'My own personal website at [zammetti.com](http://zammetti.com), as shown in
    *Figure 1**.1*, would be an example of such a brochureware site. It doesn’t do
    much other than convey information about me, and that’s the point:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我的个人网站位于 [zammetti.com](http://zammetti.com)，如图 *图1.1* 所示，就是一个这样的宣传册网站。它除了传达关于我的信息之外，没有做太多其他的事情，这就是重点：
- en: '![Figure 1.1: A simple brochureware website – my own!](img/B18315_01_1.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1：一个简单的宣传册网站——我的个人网站](img/B18315_01_1.jpg)'
- en: 'Figure 1.1: A simple brochureware website – my own!'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：一个简单的宣传册网站——我的个人网站
- en: However, the client might instead have a grand idea for the next Twitter (or
    X, as it’s known these days), or maybe Gmail or Bing. These are vastly different
    from brochureware sites in the sense that they are highly interactive, meaning
    they perform functions for their visitors. They are meant to get things done.
    These types of websites are generally referred to as **web apps**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，客户可能有一个宏伟的想法，下一个Twitter（或X，如现今所知），或者可能是Gmail或Bing。这些网站与宣传册网站截然不同，因为它们高度交互式，意味着它们为访客执行功能。它们的目的是完成任务。这类网站通常被称为
    **网络应用程序**。
- en: It’s a subtle difference, and the line between them can get very blurry. But
    as a general guideline, if a website is very interactive and can perform functions
    at the user’s behest, then chances are, it’s a web app. Saying that, it’s important
    to remember that a web app is still a website.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个微妙的不同之处，它们之间的界限可能会变得非常模糊。但作为一个一般性的指导原则，如果一个网站非常交互式，并且可以在用户的请求下执行功能，那么很可能，它是一个网络应用程序。这样说，重要的是要记住，网络应用程序仍然是一个网站。
- en: Either way, the stakeholder has that vision, and your first job as a web developer
    is to listen to them and gain an understanding of what they’re trying to achieve.
    That may sound easy, but trust me, it’s not always the case! Often, the idea will
    be very vague, and/or they won’t be able to express it clearly, and they’ll be
    counting on you to interpret their words. In essence, you need to figure out what’s
    in their heads when, sometimes, even they don’t really know!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，利益相关者都有那个愿景，而你作为网页开发者的第一份工作就是倾听他们，并理解他们试图实现的目标。这听起来可能很简单，但请相信我，这并不总是那么容易！通常，这个想法会非常模糊，而且/或者他们可能无法清楚地表达出来，他们将依赖你来解释他们的言语。本质上，你需要弄清楚他们头脑中的想法，有时甚至他们自己也不知道！
- en: You will need to then take that understanding and map it to a technical solution
    – that is, actually build a website. This process will very often be iterative,
    meaning you’ll build something, show it to the stakeholder, get feedback, and
    then make changes, going through that cycle several times. This is very typical
    and there is absolutely nothing wrong with it. I would go so far as to say that
    *not* doing that will be the rare exception.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要将那种理解映射到一个技术解决方案上——也就是说，实际上构建一个网站。这个过程通常会是迭代的，这意味着你会构建一些东西，展示给利益相关者，得到反馈，然后进行修改，经历几次这样的循环。这是非常典型的，而且绝对没有问题。我甚至可以说，不这样做将是罕见的例外。
- en: 'But what do you actually *build* at that point? Well, it may surprise you to
    learn that, very often, you won’t be writing any code or doing any programming
    straight away. Instead, the first step is often to create what we call “low-fidelity
    mock-ups.” Or, to put it more simply: drawings!'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 但在那个阶段，你实际上*建造*了什么？好吧，你可能很惊讶地发现，在大多数情况下，你不会立即编写任何代码或进行任何编程。相反，第一步通常是创建我们所说的“低保真度原型”。或者，更简单地说：草图！
- en: If you’re an artistic type, you might draw these by hand, but if you’re like
    me – someone who couldn’t draw a straight line to save his life – you’ll seek
    out tools built expressly for this purpose. There are many options here, such
    as Canva and Figma. Even Adobe Photoshop – a graphics editing program – is often
    used for this purpose.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个艺术型的人，你可能用手来绘制这些，但如果你像我一样——一个连直线都画不直的人——你会寻找专门为此目的而设计的工具。这里有很多选择，比如Canva和Figma。甚至Adobe
    Photoshop——一个图形编辑程序——也经常被用于这个目的。
- en: 'Another tool that is quite popular, which happens to be my favorite, is Balsamiq
    Wireframes. With it, you can produce illustrations such as what you see in *Figure
    1**.2*:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个相当受欢迎的工具，碰巧也是我最喜欢的工具，是Balsamiq Wireframes。使用它，你可以制作出如图*图1.2*所示的插图：
- en: '![Figure 1.2: An example of a pizza place’s website created with Balsamiq Wireframes](img/B18315_01_2.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2：使用Balsamiq Wireframes创建的比萨店网站示例](img/B18315_01_2.jpg)'
- en: 'Figure 1.2: An example of a pizza place’s website created with Balsamiq Wireframes'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2：使用Balsamiq Wireframes创建的比萨店网站示例
- en: Notice how in that mock-up – which is what we call this kind of low-fidelity
    diagram – things aren’t quite lined up, and there’s no actual text in the middle
    there, just some filler to say that text *will* be there? At this point, you really
    aren’t concerned with things such as colors, layout, font choices, detailed text,
    graphics, and other things that make a website complete. All you’re trying to
    do is nail down the overall structure, make sure you understand what the client
    wants at a high level, and show it in a form they can understand, so they can
    reply with “Yes, you got it!” or “Nope, back to the drawing board” (though you’re
    hoping for something in-between, such as “Okay, it’s close, we just need to tweak
    these one or two fairly minor things”).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在那个原型中——我们称之为这种低保真度图表——事物并没有完全对齐，中间没有实际的文字，只是有些填充物来说明文字*将会*在那里？在这个阶段，你实际上并不关心诸如颜色、布局、字体选择、详细文字、图形以及其他使网站完整的事物。你试图做的只是确定整体结构，确保你从高层次上理解客户想要什么，并以他们能理解的形式展示出来，这样他们就可以回答“是的，你明白了！”或者“不，回到画板”（尽管你希望得到介于两者之间的东西，比如“好吧，很接近了，我们只需要调整这些一两个相对较小的问题”）。
- en: The next phase is usually prototyping, sometimes called proof of concept (though
    that tends to only apply to interactive sites since the idea is to prove out functionality).
    This normally will involve actual development and actual programming, but done
    in a very quick-and-dirty way. In fact, it will often be the case that you will
    throw away some percentage of the work that you do in this phase.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个阶段通常是原型设计，有时也称为概念验证（尽管这通常只适用于交互式网站，因为目的是证明功能）。这通常将涉及实际开发和实际编程，但以非常快速和草率的方式进行。事实上，你在这个阶段可能会丢弃你完成的工作的一部分。
- en: You still aren’t necessarily going for perfection here, but for sure, you need
    to get into more of the details. For example, what should be seen when the user
    clicks the “Order form here” button? At the mock-up stage, you might hand a second
    mock-up diagram to the client that doesn’t say much more than “the order form
    will appear when the button is clicked.” But, at the prototype stage, you’ll need
    to build that order form screen to some degree. It still doesn’t need to be 100%
    complete in terms of styling or functionality, but you have to *begin* to make
    an actual order form and make it *begin* to look and *appear* to work as it will
    for real.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这里可能并不一定追求完美，但肯定需要深入了解细节。例如，当用户点击“在此处下单”按钮时，应该看到什么？在草图阶段，你可能会给客户一个第二版草图，上面说的并不多，只是“点击按钮时将出现订单表单。”但是，在原型阶段，你需要在一定程度上构建那个订单表单屏幕。它从风格或功能上讲，仍然不需要100%完整，但你必须*开始*制作一个实际的订单表单，并让它*开始*看起来和*看起来*像它真正工作时的样子。
- en: In this phase, user interactions are typically “dummied up,” meaning that they’re
    faked, but in a way that makes them look real to the client so they can get a
    feel for how things will work. If you need to be able to add pizza and other food
    items to a shopping cart, for example, there are ways to build that quickly and
    cheaply, ways that will let the client actually experience the ordering process,
    but without investing all the time and effort into truly building that functionality
    for real, which takes much more time and effort.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，用户交互通常是“模拟”的，这意味着它们是伪造的，但以一种让客户看起来真实的方式。例如，如果你需要能够将披萨和其他食品添加到购物车中，那么有快速且低成本的方法来实现这一点，这些方法可以让客户真正体验订购过程，但无需投入大量时间和精力来真正构建这一功能，这需要更多的时间和精力。
- en: Once they get their hands on it – and you will most probably go through a few
    more cycles of iteration – only then is it time to get down to building the website
    for real. This is the point where you’ll start writing code that actually works
    in its true, final form. You’ll need to start gathering graphics, possibly creating
    them from scratch, and getting the layout solid in terms of alignment, colors,
    fonts, and all the styling that goes into a web page. You’ll need to write the
    code for things such as order forms to make them really work, which may or may
    not include writing code on the server as well (we’ll get into that more later).
    All of the ideas that went into the mock-ups and the prototype in a rough form
    just to express the ideas to the stakeholders now have to be solidified into a
    real product.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦他们开始使用它——你很可能会经历几个迭代周期——这时才是真正开始构建网站的时候。这是你开始编写真正有效、最终形式的代码的时候。你需要开始收集图形，可能从头开始创建它们，并在对齐、颜色、字体以及网页中所有风格方面确保布局稳固。你需要编写使订单表单真正工作的代码，这可能包括也可能不包括在服务器上编写代码（我们稍后会详细讨论）。所有那些只是为了向利益相关者表达想法而以粗略形式放入草图和原型的想法，现在必须巩固成一个真正的产品。
- en: It’s quite an adventure to go from an idea, sometimes a very nebulous idea,
    to a full-blown website, whether it’s a brochureware site or a full-fledged web
    app. It takes a lot of time, a lot of patience sometimes, and an ability to fine-tune
    things little by little. You’re molding clay into a beautiful vase, in essence.
    It’s not always easy; sometimes the tower of clay even collapses and you have
    to start again, but that’s the job of a web developer, in a nutshell!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个想法，有时是一个非常模糊的想法，到建立一个完整的网站，无论是宣传册网站还是完整的网络应用程序，这真是一项相当冒险的任务。这需要大量的时间，有时还需要极大的耐心，以及逐渐微调事物的能力。本质上，你是在将粘土塑造成一个美丽的花瓶。这并不总是容易的；有时粘土塔甚至可能倒塌，你不得不重新开始，但这就是网络开发者的工作，简而言之！
- en: At this point, I want to once more reiterate my earlier point that while this
    may all seem overwhelming, you shouldn’t fear it! We’ll take one step after another
    together and build the foundation you need. All we’re doing here is looking at
    things from 10,000 feet up and there is no expectation that you know everything,
    and that will pretty much always be the case as you work in this field.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我想再次重申我之前提到的观点，尽管这一切可能看起来令人望而生畏，但你不必害怕！我们将一步一步地前进，共同建立起你需要的基础。我们在这里所做的只是从10,000英尺的高度审视事物，并且没有期望你了解一切，而且这基本上将始终是你在这一领域工作的情形。
- en: That said, I’m hoping you think that all sounds pretty interesting! But being
    interesting is just one part of it – what about the job market? Are web developers
    actually in demand? Well, let’s find out!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我希望你认为这一切听起来都很有趣！但有趣只是其中的一部分——那么，就业市场怎么样？网络开发者真的受欢迎吗？好吧，让我们来看看！
- en: How in demand are web developers?
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络开发者有多受欢迎？
- en: If you go online these days, you’ll see some debate about whether web development
    – and indeed software development more generally – is in danger. So, are we still
    in demand? Will we continue to be, once artificial intelligence has its way with
    us? Will ChatGPT and its competitors do what we do in a fraction of the time and
    for a fraction of the cost? There’s a lot of doom and gloom going on along those
    lines for sure, so it’s a legitimate question to ask.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在上网，你会看到一些关于网络开发——以及更广泛的软件开发——是否处于危险中的辩论。那么，我们是否仍然受欢迎？一旦人工智能开始对我们产生影响，我们还会继续受欢迎吗？ChatGPT及其竞争对手是否会以极短的时间和极低的成本完成我们做的工作？在这方面确实有很多悲观情绪，所以这是一个合理的问题。
- en: 'We can certainly debate that question all day long, and plenty of people do.
    If you want my opinion, it’s simple: AI isn’t going to take our jobs. What it
    *will* do, though, is be an indispensable tool that all web developers will *have*
    to use. But I’m getting ahead of myself here, and we’ll be talking about AI tools
    later in this book.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当然可以整天辩论这个问题，很多人确实在这么做。如果你想知道我的看法，很简单：人工智能不会取代我们的工作。不过，它将会成为一个所有网络开发者都必须使用的不可或缺的工具。但我在这里跑题了，我们会在本书的后面部分讨论AI工具。
- en: For now, the simple answer is that yes, web developers are absolutely in demand
    right now, and I don’t think there’s much danger of that changing over the next
    10-20 years at least (probably even a lot longer than that). The job will morph
    a bit over time for sure, just because software development always does anyway
    (it’s an extremely rapidly changing field), but if you’re willing to keep up,
    I don’t think you need to be worried about not being in demand.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 目前来说，简单的回答是，是的，网络开发者现在绝对很受欢迎，我认为至少在接下来的10-20年内这种状况不太可能改变（可能甚至更长）。当然，随着时间的推移，这份工作会有些变化，因为软件开发总是这样（它是一个变化极其迅速的领域），但如果你愿意跟上，我认为你不需要担心自己不受欢迎。
- en: 'In fact, if you want some hard figures to back that assertion up, have a look
    at *Figure 1**.3*, which is a screenshot of the U.S. Bureau of Labor Statistics’
    Occupational Outlook Handbook page discussing we[b developers (https://www.bls.gov/ooh/computer-and-information-technology/web-](https://www.bls.gov/ooh/computer-and-information-technology/web-developers.htm)developers.htm):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，如果你想看看一些支持这个断言的硬数据，请看看*图1.3*，这是一张美国劳工统计局职业展望手册页面讨论网络开发者的截图（[网络开发者](https://www.bls.gov/ooh/computer-and-information-technology/web-developers.htm)）：
- en: '![Figure 1.3: The U.S. Bureau of Labor Statistics’ Occupational Outlook Handbook
    page discussing web developers](img/B18315_01_3.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3：美国劳工统计局职业展望手册页面讨论网络开发者](img/B18315_01_3.jpg)'
- en: 'Figure 1.3: The U.S. Bureau of Labor Statistics’ Occupational Outlook Handbook
    page discussing web developers'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3：美国劳工统计局职业展望手册页面讨论网络开发者
- en: What you’ll find on the BLS site is that the employment opportunities for web
    developers are projected to grow by 16% between 2022 and 2032 (as of writing –
    the number could change by the time you read this). What’s interesting is that
    the projected growth was 13% two years ago, so this tells us that demand is *increasing*,
    which is great news for anyone entering the field. In fact, that projected growth
    outpaces virtually every other field there is.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你在BLS网站上会发现，预计到2032年，网络开发者的就业机会将增长16%（截至撰写本文时——这个数字在你阅读本文时可能会改变）。有趣的是，两年前的预测增长率是13%，这告诉我们需求正在*增加*，这对任何进入这个领域的人来说都是好消息。事实上，这种预测的增长速度几乎超过了所有其他领域。
- en: So, yeah, to say we’re in demand is probably an understatement!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，是的，说我们很受欢迎可能还是低估了！
- en: This demand is fueled primarily by e-commerce sites and mobile development.
    What are those?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这种需求主要是由电子商务网站和移动开发推动的。那些是什么？
- en: Well, an **e-commerce site**, where *e* is short for *electronic*, is a website
    where people buy and sell stuff or do other things that are generally considered
    “commerce.” Amazon and eBay may be the most well-known e-commerce sites, but your
    bank’s website is also one, and even that local pizza joint’s site you looked
    at earlier might be. An e-commerce site is generally more about *conducting* business,
    so the pizza place’s website would be an e-commerce site if you can order food
    from it; however, if it’s just talking about the restaurant, then it’s probably
    a brochureware site (the dividing line can be blurry sometimes). Either way, since
    commerce is all about businesses, and businesses kind of rule the world (whether
    that’s a good thing or not), you can see why the demand is only increasing.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，一个**电子商务网站**，其中“e”代表“电子”，是一个人们买卖商品或进行其他通常被认为是“商业”活动的地方。亚马逊和eBay可能是最知名的电子商务网站，但你的银行网站也是一个，甚至你之前看过的那个当地比萨店网站可能也是。电子商务网站通常更侧重于**进行**商业活动，所以如果你可以从比萨店网站上订购食物，那么这个比萨店的网站就是一个电子商务网站；然而，如果它只是谈论餐厅，那么它可能是一个宣传册网站（有时候这个界限可能有点模糊）。无论如何，由于商业活动都是关于企业的，而企业某种程度上统治着世界（无论这是好事还是坏事），你可以看到为什么需求只会不断增加。
- en: It’s not *only* about e-commerce sites, of course. Social media is another huge
    category where there is plenty of work to be found, and there are of course many
    other categories of websites. But regardless of the type of site it is, it very
    often comes down to businesses behind them, or other types of organizations (non-profits,
    governments, etc.). As these entities continue to prioritize their online presence
    over non-internet presence (because people now expect to conduct their lives on
    the internet by and large), that demand trend line will just continue to go up
    and up.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这不仅仅关于电子商务网站。社交媒体是另一个巨大的类别，其中有很多工作可以找到，当然还有许多其他类别的网站。但无论网站的类型如何，它往往都归结于背后的企业或其他类型的组织（非营利组织、政府等）。随着这些实体继续将在线存在优先于非互联网存在（因为人们现在普遍期望在互联网上生活），这种需求趋势线只会持续上升。
- en: Mobile development is a whole other category, but the fact is that a lot of
    mobile development these days is also web development. You know the apps you run
    on your iPhone or Samsung Galaxy phone? Many of them are what we call “native”
    apps, meaning they are programmed to run on those specific platforms. However
    many of them use the same web technologies as are used to build websites, and
    that trend is likely to grow. Creating websites, or web apps, for mobile devices
    comes with unique challenges, but the skillset is the same, so growth there means
    growth in web development as well.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 移动开发是一个完全不同的类别，但事实是，如今很多移动开发也是网络开发。你知道你在iPhone或三星Galaxy手机上运行的应用程序吗？其中许多是我们所说的“原生”应用程序，这意味着它们是为那些特定平台编写的。然而，许多应用程序使用与构建网站相同的网络技术，并且这个趋势可能会增长。为移动设备创建网站或网络应用程序会带来独特的挑战，但技能集是相同的，所以那里的增长意味着网络开发的增长。
- en: In fact, for much of the world, websites are more frequently accessed with mobile
    devices than typical desktop machines (and laptops are a little bit of a gray
    area, though they tend to be more like desktop machines than mobile smartphones).
    Web development is often done in a “mobile first” way, meaning you make your website
    look and function correctly on a smartphone and then tweak it to also work well
    on a desktop.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，对于世界上的许多地方来说，网站更多地是通过移动设备而不是典型的桌面机器（尽管笔记本电脑有点灰色地带，但它们更像是桌面机器而不是移动智能手机）来访问的。网络开发通常以“移动优先”的方式进行，这意味着你让你的网站在智能手机上看起来和功能正确，然后调整它以便在桌面上也能很好地工作。
- en: One thing you can see from this discussion is that web development comes in
    many forms, making it an expansive topic that’s only becoming more so over time.
    Many different disciplines are required of you as a web developer, including things
    such as cloud computing, cybersecurity, data analytics, search engine optimization,
    and much more. If you don’t know what any of this means, don’t worry – you will
    by the end of this book! The relevant point here, though, is that skilled web
    developers are becoming more valuable due to this ever-growing list of things
    you have to know at least *something* about. Once you’ve acquired those skills,
    the demand for you to put them to use for someone will only grow because the ever-evolving
    nature of the field means your ability to learn – and being able to demonstrate
    that – will be your most valuable asset.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从这次讨论中，你可以看到网络开发有多种形式，使其成为一个不断扩大的主题，随着时间的推移只会变得更加广泛。作为网络开发者，你需要掌握许多不同的学科，包括云计算、网络安全、数据分析、搜索引擎优化等等。如果你不知道这些是什么意思，不用担心——你会在本书结束时了解！不过，这里的相关点是，由于你需要至少对这一长串事物有所了解，熟练的网络开发者变得越来越有价值。一旦你掌握了这些技能，你将这些技能用于他人的需求只会增长，因为该领域的不断演变意味着你的学习能力——以及能够证明这一点的能力——将是你最宝贵的资产。
- en: Show me the money!
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 给我看看钱！
- en: Okay, great, I’ve convinced you that web developers are in demand and will continue
    to stay in demand, and we’ll probably even see that demand grow. But it also sounds
    kind of *hard*, doesn’t it? It had better be worth it, right?!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，太好了，我已经说服你，网络开发者需求旺盛，并且将持续保持需求旺盛，我们甚至可能会看到需求的增长。但这听起来有点*困难*，不是吗？这最好是有价值的，对吧？!
- en: Well, it is! According to that same BLS site I mentioned earlier, the median
    income as of May 2022 was $78,580\. And I can tell you that this number is higher
    than it was in 2020, and it was going up for a long time before then. That ain’t
    bad!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，确实是！根据我之前提到的BLS网站，截至2022年5月，中位收入为78,580美元。我可以告诉你，这个数字比2020年高，而且在此之前已经持续上涨了一段时间。这不算差！
- en: 'But it gets better! As you progress and gain experience, you won’t be at all
    surprised to learn that your earning potential goes up. I’ll give you a very rough
    progression you might see in your career based on your number of years of experience:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但还有更好的！随着你不断进步和积累经验，你不会对发现自己的收入潜力上升感到惊讶。我将根据你的工作经验年限给你一个非常粗略的职业发展路径：
- en: You might start off in the $50,000-$60,000 range (though remember that all these
    numbers are impacted by a lot of factors, so your starting salary may be lower
    or indeed higher in reality)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能一开始的薪资在5万到6万美元之间（但请记住，所有这些数字都受到许多因素的影响，所以你的起薪可能实际上更低或更高）
- en: After three years, you can likely expect to be making in the $70,000-$80,000
    range
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三年后，你很可能期望在7万到8万美元的范围内
- en: After five years, you’ll very likely be at or near $100,000
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 五年后，你很可能达到或接近10万美元
- en: By the 10-year mark, you’ll almost certainly be above $100,000, probably more
    in the $130,000-$140,000 range, and you’ll most likely be about to, or already
    have, moved into a senior/lead role
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到了第十年，你几乎肯定能超过10万美元，可能更多，大约在13万到14万美元之间，你很可能即将，或者已经，晋升到高级/领导职位
- en: After 15 years, you’re probably looking at $150,000 or higher
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15年后，你可能看到150,000美元或更高
- en: 'The previous figures are for non-**FAANG** jobs – that is, any company that
    isn’t considered a FAANG company. Which, of course, begs the question: what is
    a FAANG company?! FAANG is an acronym that stands for **Facebook, Amazon, Apple,
    Netflix, and Google**, which I’ll talk about more in [*Chapter 9*](B18315_09.xhtml#_idTextAnchor219),
    but the main point for now is that we’re referring to “the biggest, most high-paying
    Silicon Valley companies” with that term. If you earn a position at these kinds
    of companies, then you can expect to make *way* more than the numbers I’ve stated
    here. But whether you work at a FAANG company or not, there is a great opportunity
    to do well for yourself financially in this field.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的数字是非**FAANG**职位——也就是说，任何不被视为FAANG公司的公司。当然，这会引发一个问题：什么是FAANG公司？！FAANG是一个缩写，代表**Facebook,
    Amazon, Apple, Netflix, and Google**，我将在[第9章](B18315_09.xhtml#_idTextAnchor219)中详细介绍，但现在的重点是，我们用这个术语指的是“最大的、薪酬最高的硅谷公司”。如果你在这些类型的公司中获得职位，那么你可以期待比这里提到的数字多得多的收入。但无论你是否在FAANG公司工作，在这个领域都有很大的机会实现财务上的成功。
- en: 'So, at this point, you’re salivating, right? There’s gold in them thar hills,
    and you just have to gain the skills needed to mine it. But let’s slow down just
    a bit and ask what can be a difficult – but critical – question: is this a field
    that’s right for you?'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，到目前为止，你一定垂涎欲滴，对吧？那些山里有金子，你只需要获得挖掘它的技能。但让我们稍微放慢脚步，提出一个可能很难但至关重要的一个问题：这是否是一个适合你的领域？
- en: But is a job in web development right for you?
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 但是，网页开发的工作适合你吗？
- en: Have you by chance ever heard of the mantra that “anyone can code”? It’s something
    we like to say, and in a basic sense, it *is* true. There isn’t anything fundamentally
    unlearnable in the web development field for someone who is motivated to learn.
    It’s not like baseball where you have to be able to hit a 95mph fastball, or like
    basketball where you have to be able to make a jump shot, both of which take a
    lot of physical skill. And it’s not like being an astronaut where you must have
    perfect vision and nerves of steel to climb on and ride a giant, exploding candle
    into orbit! No, there aren’t any real physical requirements, natural-born talents,
    or innate abilities you need to possess. You can learn all you need to if you
    have the drive.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有偶然听说过“任何人都能编程”的咒语？这是我们喜欢说的话，在基本意义上，*确实是*如此。对于有学习动力的人来说，在网页开发领域没有什么是根本无法学会的。它不像棒球，你必须能够击中每小时95英里的快速球，或者像篮球，你必须能够做出跳投，这两者都需要大量的身体技巧。而且，它也不像宇航员，你必须有完美的视力和不屈的意志去爬上并乘坐一个巨大的、爆炸的蜡烛进入轨道！不，这里没有真正的身体要求，天生的才能或与生俱来的能力是你必须拥有的。只要你有了动力，你就能学会你需要的一切。
- en: Let’s look at some of the key characteristics a web developer will tend to need
    to be successful.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看一个成功的网页开发者通常会需要的某些关键特征。
- en: You gotta be a puzzle master
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你必须是一个解谜大师
- en: That being said, web development – and software development in general – is,
    in a sense, a constant exercise in puzzles. Everything you do will revolve around
    solving problems. How do you get the client’s logo to appear on the web page properly?
    How do you make their contact form send an email? How do you make the website
    accessible to those with disabilities? These are all problems to be solved, puzzles
    to be completed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，网页开发——以及软件开发总体上——在某种程度上是一种持续的解谜练习。你所做的一切都将围绕着解决问题。你是如何让客户的标志在网页上正确显示的？你是如何让他们的联系表单发送电子邮件的？你是如何让网站对残疾人可访问的？这些都是需要解决的问题，需要完成的谜题。
- en: Those who tend to thrive in this field have certain qualities, some inherent,
    but most of which can be developed over time with experience.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个领域茁壮成长的人有一些特定的品质，一些是固有的，但大多数可以通过经验随着时间的推移而发展。
- en: Creativity to the max
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创意最大化
- en: In web development, there’s also a large degree of creativity involved. There
    are rarely right or wrong ways to do things, rarely definitive approaches to solving
    problems, and rarely canonically correct answers. So, you will often have to have
    a creative streak in you to produce pleasing results. You’ll have to take what’s
    asked of you – which may be fairly general and not clearly defined sometimes –
    and figure out how to make it a reality, often by introducing your own creative
    interpretation of it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页开发中，也涉及相当大的创意。很少有正确或错误的方法去做事情，很少有解决问题的明确方法，也很少有经典正确的答案。因此，你通常需要有一定的创意才能产生令人满意的结果。你必须接受你所被要求做的事情——这可能是相当一般性的，有时可能并不明确定义——并找出如何将其变为现实，通常是通过引入你自己的创意解释。
- en: 'And it’s not just about what you see on the screen, where the idea of creativity
    and even artistry is more obviously applicable. No, there is also creativity and
    artistry in writing *code*: how do you structure it? What components do you need
    and how do you make them interact with each other?'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 而且这不仅仅是你看到屏幕上的内容，创意和艺术性的概念在这里显然更适用。不，编写*代码*中也有创意和艺术性：你是如何构建它的？你需要哪些组件，以及你是如何让它们相互作用的？
- en: But while web development is a creative endeavor where you have a lot of freedom
    to do things your way, it’s not total anarchy! There are what we call “best practices,”
    which refer to solutions that have previously been applied in specific situations
    and have usually resulted in positive outcomes for many people. But at the end
    of the day, building websites is different from constructing a bridge, for example,
    because society has built lots of bridges, and as a result, we know how to do
    so every time. We know what works and what doesn’t, and so we follow tried-and-true
    architectural techniques when building them. While best practices give us *some*
    of that in web development, it tends to be a lot less than you might think, and
    that opens the door for a lot of creativity.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 但尽管网页开发是一个充满创造力的领域，你可以有很大的自由按照自己的方式做事，但它并不是完全的无政府状态！我们称之为“最佳实践”，指的是在特定情况下之前已经应用过的解决方案，通常为许多人带来了积极的结果。但最终，建造网站与建造桥梁不同，例如，因为社会已经建造了许多桥梁，因此我们每次都知道如何建造。我们知道什么有效，什么无效，因此我们在建造时遵循经过验证的建筑技术。虽然最佳实践在网页开发中为我们提供了一些这样的东西，但它往往比你想象的要少，这也为大量的创造力打开了大门。
- en: 'To put it another way: while building a bridge is surely part science and part
    art, in most cases, the science part will be the bigger part. In software development,
    and web development for sure, the opposite will usually be the case.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说：虽然建造桥梁无疑是科学和艺术的结合，但在大多数情况下，科学部分将是更大的部分。在软件开发，尤其是网页开发中，情况通常正好相反。
- en: Attention to detail for fun and profit
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关注细节，为了乐趣和利润
- en: So, a web developer must like solving problems, and they must be creative. They
    must also have solid attention to detail. Trust me when I tell you that there
    will be times when you’ll pull your hair out trying to make something work only
    to discover it wasn’t working because of one bad number or letter or symbol somewhere.
    The closer attention you pay to details, the longer it’ll take for you to go bald
    from pulling all your hair out!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，网页开发者必须喜欢解决问题，并且必须具有创造力。他们还必须具备严谨的细节关注力。当我说到，有时你会因为试图让某物工作而拔掉头发，最终发现它之所以不工作，是因为某个数字、字母或符号出了问题。你越关注细节，你拔掉所有头发的时间就越长！
- en: '![Figure 1.4: Web developers curse a lot, but always at inanimate objects](img/B18315_01_4.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4：网页开发者经常诅咒，但总是对着无生命物体](img/B18315_01_4.jpg)'
- en: 'Figure 1.4: Web developers curse a lot, but always at inanimate objects'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：网页开发者经常诅咒，但总是对着无生命物体
- en: Alone or in teams, it all matters
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单独或团队合作，都同样重要
- en: Web developers must be good independent workers, as well as be able to work
    well with others. As I mentioned earlier, dealing with clients and stakeholders
    is an obvious example of working with others, but there’s a good chance you won’t
    be the only one developing a website.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 网页开发者必须擅长独立工作，同时也能与他人很好地合作。正如我之前提到的，与客户和利益相关者打交道是与他人合作的一个明显例子，但有很大可能性你不会是唯一开发网站的人。
- en: You certainly *may* work alone in some situations, but probably more often you’ll
    find that you have partners in crime. You may build one part of the site while
    someone else works on another part, and then you have to make it all work together.
    Being able to communicate, collaborate, plan, and execute in unison is a key requirement.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你当然在某些情况下可能会独自工作，但更常见的情况是你会有合作伙伴。你可能负责构建网站的某个部分，而其他人则负责另一部分，然后你必须确保所有部分都能协同工作。能够沟通、协作、规划和执行是关键要求。
- en: Soft skills, in other words, are another key requirement for web developers.
    Whether in written form or in person, whether technical or not, being able to
    express your thoughts cogently and precisely is a skill you must master.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 软技能，换句话说，也是网页开发者另一个关键要求。无论以书面形式还是口头形式，无论是否技术性，能够清晰、精确地表达你的想法是一项你必须掌握的技能。
- en: Keeping up with the times
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跟上时代
- en: You’ll hear this repeatedly, but learning to learn, and being comfortable with
    change, is one of the top skills you’ll need to master to be a web developer.
    This field changes at a rate that is equal parts astounding, exciting… and massively
    frustrating! Just when you learn a skill and feel confident with it, it may fall
    out of favor and be replaced by something else.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你会反复听到这一点，但学会学习，并适应变化，是成为一名网页开发者需要掌握的顶级技能之一。这个领域的变革速度既令人惊叹，又令人兴奋……但同时也非常令人沮丧！当你学会一项技能并对其感到自信时，它可能就会过时，并被其他东西所取代。
- en: This leads to a problem called “imposter syndrome,” and it’s something virtually
    everyone deals with. This is where you feel like an imposter, someone who doesn’t
    know what they’re doing, even when you do. Despite how long I’ve been doing this
    kind of work, it still hits me sometimes too. The constant churn of technologies
    gives rise to this feeling because you’re constantly in a state of having to confront
    new things. There’s no silver bullet to deal with imposter syndrome, unfortunately.
    But being able to learn on-the-fly, and proving to yourself that you can over
    time, is about the only way to blunt its effects somewhat.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了一个被称为“冒充者综合症”的问题，几乎每个人都会遇到。这就是你感觉自己像是一个冒充者，一个不知道自己在做什么的人，即使你实际上知道。尽管我已经从事这类工作很长时间了，但有时它仍然会影响到我。技术的不断更新导致了这种感觉，因为你总是在不得不面对新事物。不幸的是，没有银弹可以用来处理冒充者综合症。但能够边学边用，并随着时间的推移证明自己能够做到，可能是减轻其影响的一种唯一方法。
- en: Keeping up with the changes in the field is a full-time job unto itself sometimes,
    and it definitely helps if you enjoy the discovery process. If you’re someone
    who likes learning new things and likes being out on the ragged edge sometimes,
    then web development will probably make you smile a lot.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪领域的变化有时是一项全职工作，如果你喜欢发现过程，那就更有帮助了。如果你喜欢学习新事物，有时喜欢处于边缘，那么网页开发可能会让你笑很多。
- en: Rolling with the punches
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随遇而安
- en: 'You have to have a thick skin to be a web developer because there will always
    be someone with an opinion you have to listen to and act upon. Whether that’s
    a client or a boss, you’ve got to be open to feedback, not take it personally,
    and be willing to revise your work based on what you hear. As writers like to
    say: you have to be willing to kill your babies. In web development, that might
    mean that as cool as *you* think the website you built looks, if the client feels
    otherwise, you’ve got to be willing to throw it away and start over.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须有一个厚脸皮才能成为一名网页开发者，因为总会有人有意见需要你倾听并采取行动。无论是客户还是老板，你必须愿意接受反馈，不要把它当作个人攻击，并愿意根据你听到的内容修改你的工作。正如作家们喜欢说的：你必须愿意杀死你的孩子。在网页开发中，这可能意味着尽管你认为你构建的网站看起来很酷，但如果客户有不同的看法，你必须愿意放弃并重新开始。
- en: Finding what you need
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 找到你需要的东西
- en: A good chunk of your time as a web developer will be spent doing things that
    aren’t, seemingly, web development. Sure, I’ve talked about things such as communicating
    with others, but here, I’m talking about research and just conceptualizing things
    that you’ll be building, be that the layout of a web page, the code behind it,
    and so on. You’d be surprised how much time web developers spend just kind of
    staring off into space, visualizing things! But, beyond that, you have to be able
    to find information and synthesize it into your thinking. You have to know where
    to go to get answers to all the questions you’re absolutely going to have.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名网页开发者，你将花费大量时间做一些看似不是网页开发的事情。当然，我谈到了与他人沟通的事情，但在这里，我谈论的是研究和构思你将要构建的东西，无论是网页布局、背后的代码等等。你会惊讶于网页开发者花费大量时间只是盯着空中，想象着事情！但是，除此之外，你必须能够找到信息并将其综合到你的思考中。你必须知道去哪里获取你绝对会有的所有问题的答案。
- en: Do you know how to center a `div` horizontally and vertically on a web page?
    Do you know what those words mean? No? Well, you’d better know where to go to
    find out! Do you know what the function signature for the React `useEffect()`
    function is? No? I hope you can find out or you’ll be in trouble! Do you have
    to use Vue today – which you don’t know anything about – instead of React, which
    you normally use? Great – you’re gonna have some research to do, aren’t you?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道如何在网页上水平垂直居中一个`div`元素吗？你知道这些词的意思吗？不知道？好吧，你最好知道去哪里查找这些信息！你知道React的`useEffect()`函数的函数签名是什么吗？不知道？我希望你能找到答案，否则你会遇到麻烦！你今天必须使用Vue（你对它一无所知）而不是你通常使用的React吗？太好了——你将不得不做一些研究，不是吗？
- en: The point of all of this is that being a web developer means having to have
    a lot of skills and qualities beyond just pure technical knowledge. Truly, technical
    skills are the easy part. If you don’t relish the challenge of all of this then
    the web development field might not be a good fit for you. You have to embrace
    the challenge, embrace the madness! If you do that, I think that, putting money
    aside, you’ll get a lot of enjoyment out of the feeling of accomplishment you
    can get from it. There’s nothing quite like the feeling of solving some problem
    that has been vexing you for a while and seeing something on the screen finally
    work. It’s gratifying. Even if what you’re building doesn’t fundamentally interest
    you, seeing it work for the first time feels pretty darn good!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些的要点是，成为一名网页开发者意味着你需要拥有很多技能和品质，而不仅仅是纯粹的技术知识。实际上，技术技能只是容易的部分。如果你不享受这一切的挑战，那么网页开发领域可能并不适合你。你必须接受挑战，接受疯狂！如果你这样做，我认为，抛开金钱不说，你将从从中获得的成就感中享受到很多乐趣。没有什么比解决困扰你一段时间的问题，并在屏幕上看到最终工作起来的感觉更令人欣慰了。这是令人满意的。即使你所构建的东西对你来说并没有根本的兴趣，第一次看到它工作起来感觉也非常不错！
- en: So, there is definitely reward in this field beyond the financial, but I think
    it’s only fair that you know what you’re getting into. There will be days where
    you’ll be screaming and yelling at inanimate objects for sure. You’ll feel that
    imposter syndrome kick in all the time and have to fight it off. Almost every
    day will introduce some new thing you have to take in and make use of. But if
    this is a challenge that excites you, then web development might be just the ticket
    for you!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这个领域，除了金钱之外，确实有回报，但我认为你了解你要进入的是什么领域是公平的。肯定会有一些日子，你会对着无生命的物体尖叫和喊叫。你将感受到冒名顶替综合症一直存在，并不得不与之抗争。几乎每天都会介绍一些你必须接受并利用的新事物。但如果这是一个让你兴奋的挑战，那么网页开发可能正是你需要的！
- en: Being patient and handling failure
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 耐心和应对失败
- en: Two other skills, so to speak, that you’ll need to be a web developer are the
    ability to be patient and to handle failure. You’ll need patience to research
    things and learn things, that’s obvious, but you’ll also need patience when building
    a website because it takes time to get all the details right. You’ll often have
    to go over things many times, tweaking them little by little, to get them just
    right.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，你还需要具备的两个技能，或者说素质，是耐心和应对失败的能力。你需要耐心去研究和学习，这是显而易见的，但你在构建网站时也需要耐心，因为需要时间来确保所有细节都正确。你经常会不得不多次检查，一点一点地调整，才能使其恰到好处。
- en: That dovetails into the notion of handling failure. Any time you write code,
    you run the risk of it not working right the first time. In fact, you can almost
    be guaranteed it won’t! You can let this get to you, in which case you’ll have
    a really bad time of it and not make good progress, or you can learn to accept
    that it’s just part of the process for things not to work and to have to keep
    working on it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这与应对失败的概念相吻合。每次你编写代码时，都存在它第一次没有正确工作的风险。事实上，你几乎可以保证它不会！你可以让这影响到你，这样你就会有一个非常糟糕的经历，而且不会取得好的进展，或者你可以学会接受事情不工作只是过程的一部分，并且必须继续努力。
- en: 'You have to be kind to yourself, in a sense. You’re going to have a lot of
    little failures as you develop a website, and you’ll have to not beat yourself
    up for it because it’s part of the process. But this is a way in which web development,
    and really, software development generally, is unique: you can get things wrong
    many times and keep getting it closer and closer to right, little by little, with
    no real consequences. It’s not like designing a building where if you get something
    wrong early, the whole thing may just collapse, costing lots of time, money, and
    potentially lives. No, if your code doesn’t work right the first time – and again,
    it probably won’t – this does no real harm. Sure, it costs a little time, but
    that’s it.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种程度上，你必须善待自己。在开发网站的过程中，你将会有很多小小的失败，你将不得不不为此自责，因为这是过程的一部分。但这是网页开发，以及实际上软件开发通常的独特之处：你可以多次出错，并逐渐将其纠正得更接近正确，而没有任何真正的后果。这不像设计建筑，如果你一开始就出错，整个项目可能就会崩溃，浪费大量时间、金钱，甚至可能危及生命。不，如果你的代码第一次没有正确工作——而且，再次强调，这很可能——这并不会造成真正的伤害。当然，这会浪费一点时间，但仅此而已。
- en: So, being patient and being able to handle failure are also key qualities for
    a web developer to possess, and by combining them, you get the notion of being
    kind to yourself. In fact, learning to not view every bit of code that doesn’t
    work right as a failure at all is really what it’s all about. It’s simply part
    of the journey, each and every time, and it’s totally okay!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，耐心和能够处理失败也是成为一名网页开发者需要具备的关键品质，通过结合它们，你就能得到对自己宽容的理念。实际上，学会不把每一行不正确的代码都视为失败，这才是关键。这只是旅程的一部分，每次都是，而且完全没问题！
- en: 'You’ll notice one thing that I didn’t list as a quality a web developer needs,
    and that’s something that a lot of people entering the field wonder about: a college
    degree. So, let’s talk about that next!'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我没有列出作为网页开发者需要具备的品质之一，那就是很多进入这个领域的人都在思考的问题：是否需要大学学位。那么，让我们接下来谈谈这个问题！
- en: Do you need a degree?
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你需要学位吗？
- en: Of all the questions people have about getting into web development, whether
    you need to go to college and obtain a college degree – usually a Computer Science
    degree – or not is perhaps the most loaded of them all. If you look at all the
    skills you need to be successful in this field, it almost seems like the obvious
    answer would be yes, you definitely need a degree. The reality is quite a bit
    different, though.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有关于进入网页开发领域的问题中，你是否需要上大学并获得大学学位——通常是一个计算机科学学位——可能是最复杂的问题之一。如果你看看在这个领域取得成功所需的全部技能，似乎显而易见的答案应该是肯定的，你确实需要学位。但现实情况却大不相同。
- en: Let me tell you a little bit about myself. As of this writing, I’m 51 years
    old. I’ve been a professional developer for 28 years, and I did some consulting
    before that for a bit over 5 years. I’ve been programming in one form or another
    for right around 45 years in total – yes, I really did start when I was around
    6! This has been a lifelong passion of mine, and the fact that I’ve had a long
    and fruitful career is in some ways just a bonus.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我简单介绍一下我自己。截至写作本文时，我51岁。我作为一名专业开发者已经工作了28年，在那之前我还做过超过5年的咨询工作。我以某种形式编程已经大约45年了——是的，我真的从大约6岁就开始了！这一直是我一生的热情，而且我有一个漫长而富有成果的职业生涯，这在某种程度上只是一个额外的奖励。
- en: 'But you know what I don’t have? That’s right: a college degree.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 但你知道我缺少什么吗？没错：一个大学学位。
- en: 'I did attend college for a little while, but I had to drop out for personal
    reasons about two years short of a degree. I went back a little later and took
    some classes with the intent of getting that degree. But I was primarily doing
    it for career reasons at that point, and here’s the simple truth: not having a
    degree didn’t stop me from getting into the field and hasn’t ever held me back
    any.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实上过一段时间大学，但由于个人原因，在大约离学位还有两年的时候我不得不辍学了。后来我稍作休息，又去上了一些课，打算拿到那个学位。但那时我主要是出于职业发展的考虑，简单地说，事实是：没有学位并没有阻止我进入这个领域，也从未阻碍过我。
- en: 'Now, I don’t want to give any false impressions here: my path probably would
    have been easier – and certainly shorter – had I completed my degree in the first
    place, and I certainly would have made more money right out of the gate than I
    did. I also spent a lot of years convinced no one would give me the time of day
    without that piece of paper hanging on the wall, so I didn’t even try.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我不想给人留下任何错误的印象：如果我从一开始就完成了学位，我的道路可能更容易——当然也更短——而且我一开始就能赚得比现在更多的钱。我还花了很长时间相信，没有那张挂在墙上的纸，没有人会给我机会，所以我甚至都没有尝试。
- en: That was a mistake.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 那是一个错误。
- en: The truth is that in this field, if you can show that you know your stuff, then
    a degree won’t stop you from getting your foot in the door. It may mean a bit
    less money at first, and it may mean there’s a ceiling to your career – I’ll probably
    never have a shot at a C-suite level position (CEO, CIO, etc.) – but you can be
    gainfully employed without one for sure. It’s all about demonstrated ability –
    even if you have a Computer Science degree, while that shows you probably have
    a decent foundation, as we previously discussed, you’re still going to have a
    lot of on-the-job learning to do. Having a degree shows you have many good qualities,
    but it doesn’t necessarily mean you have even a fraction of the knowledge you
    need to be a solid web developer.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，在这个领域，如果你能证明你懂得自己的东西，那么学位不会阻止你入门。一开始可能意味着收入会少一些，也可能意味着你的职业发展有一个天花板——我可能永远没有机会获得首席执行官级别职位（CEO、CIO
    等）——但你可以肯定，没有学位也能找到一份有报酬的工作。这完全取决于你的能力展示——即使你有计算机科学学位，虽然这表明你可能有一个相当坚实的基础，正如我们之前讨论的，你仍然需要在工作中进行大量的学习。拥有学位表明你有很多优点，但这并不一定意味着你拥有成为优秀网页开发者所需的知识的一小部分。
- en: And to be clear, some companies *do* view having a degree as very important,
    and some will even use it as a litmus test, meaning if you don’t have one then
    your resume may get tossed in the trash immediately. It’s a hard requirement for
    some companies to be sure, though in my experience that’s the exception, not the
    rule. That’s sad, honestly, because it means these companies are passing up some
    potentially great candidates for arguably no good reason. But, at the end of the
    day, that’s their call, and as a job seeker, there’s nothing you can do about
    it. You’ll just have to grin and bear it if you run into such situations and tailor
    your search accordingly.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要明确的是，一些公司确实认为拥有学位非常重要，甚至有些公司会将其作为一项试金石，这意味着如果你没有学位，你的简历可能会立即被扔进垃圾桶。虽然在我的经验中，这可能是例外而不是规则，但这确实是一个硬性要求。说实话，这很遗憾，因为这意味着这些公司在没有充分理由的情况下，错过了一些可能非常优秀的候选人。但，最终，这是他们的选择，作为求职者，你对此无能为力。如果你遇到这样的情况，你只能笑对人生，并相应地调整你的搜索策略。
- en: 'So, to summarize: no, having a degree isn’t required to be a web developer
    – it’s not a dealbreaker if you don’t have one in most cases, and I’m living proof
    of that! Of course, that doesn’t mean there aren’t benefits to having one, but
    it primarily comes down to your own goals and desired path. If a degree is important
    to you, then by all means, get one. If maximizing your earnings at every level
    is a primary consideration, then yes, a degree may help. If you have dreams of
    eventually flying on the corporate jet and running the show from the CEO’s office,
    then yes, you’ll likely need a degree. But you can definitely have a good, long,
    well-paying career as a web developer without one, so long as you put in the time
    and effort to make yourself someone whom good companies won’t want to pass up,
    despite not having the framed paper on the wall.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，总结一下：不，拥有学位并不是成为网页开发者的必要条件——在大多数情况下，没有学位也不是一个决定性的因素，我就是最好的证明！当然，这并不意味着没有学位没有好处，但这主要取决于你自己的目标和期望的道路。如果你认为学位很重要，那么无论如何，都应该去获得一个。如果你在每个阶段都希望最大化你的收入，那么是的，一个学位可能会有帮助。如果你梦想着最终能乘坐公司飞机并在首席执行官办公室管理一切，那么是的，你可能需要学位。但你可以肯定，作为一个没有学位的网页开发者，只要你投入时间和精力，让自己成为那些好公司不愿意错过的对象，即使墙上没有那张装帧好的证书。
- en: Now that you have some idea of what’s involved in being a web developer in terms
    of abilities, degrees, and such, let’s take a look at what a typical day might
    look like on the job.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对成为网页开发者所需的能力、学位等方面有所了解，让我们来看看典型的工作日可能是什么样的。
- en: Examining a typical day in the life of a web developer
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考察一个网页开发者典型的一天
- en: Now that you have an idea of what a web developer is and what it takes to be
    one, the next logical question to ask (and remember, we’re big on logic around
    here!) is what does a typical day look like for a web developer? You know, aside
    from the rampant hero-worshipping, of course!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对网页开发者是什么以及成为其中一员需要什么有所了解，下一个合乎逻辑的问题（记住，我们这里很重视逻辑！）就是网页开发者典型的一天是什么样的？你知道的，除了狂热的英雄崇拜之外！
- en: '![Figure 1.5: Yes, we web developers are that cool!](img/B18315_01_5.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5：是的，我们网页开发者就是这样酷！](img/B18315_01_5.jpg)'
- en: 'Figure 1.5: Yes, we web developers are that cool!'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5：是的，我们网页开发者就是这样酷！
- en: This is no simple question because there are a great many variables involved.
    But if I think through what I and those people I work with do daily, there begins
    to emerge a very rough and generalized structure that tends to apply to *most*
    web developers *most* of the time. Let’s see what that looks like.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个复杂的问题，因为涉及许多变量。但如果我们思考一下我和我合作的那些人每天做的事情，就会开始出现一个非常粗略和普遍的结构，这个结构似乎适用于*大多数*网页开发者*大多数*时间。让我们看看这会是什么样子。
- en: The duties of a web developer
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网页开发者的职责
- en: 'Firstly, there are some common tasks that you’ll wind up doing most days:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，有一些常见的任务，你会在大多数日子里完成：
- en: '*Coding*: Well, I’m sure that’s no surprise! You will obviously spend a lot
    of your time writing code to actually make websites. But depending on the day,
    sometimes this will be where most of your time goes, and sometimes it’ll wind
    up being where the least goes.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编码*：好吧，我相信这不会让你感到惊讶！你显然会花很多时间编写代码来实际制作网站。但根据不同的日子，有时这将是大部分时间所在，有时它最终会成为最少花费时间的地方。'
- en: '*Meetings*: As with Monty Python and their Spanish Inquisition bit, no one
    escapes meetings. It might be with stakeholders to go over the previous day’s
    work. It might be other developers you have to coordinate with. It might be your
    manager to figure out what task to do next. But regardless of what it’s for, meetings
    will for sure be a part of your daily life.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*会议*：就像蒙提·派森和他们的西班牙宗教审判片段一样，没有人能逃脱会议。这可能是与利益相关者回顾前一天的工作。也可能是与其他开发者协调。也可能是与你的经理讨论下一步要做什么任务。但无论是什么原因，会议肯定是你日常生活的一部分。'
- en: '*Version control*: This is a topic I’ll get into later, but in short, version
    control is how you keep your work safe so you don’t lose it, and it’s also a way
    that allows you to go back to a previous version of your work if needed. There’s
    more to it than that, but that’s the 10,000-foot view.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*版本控制*：这是一个我稍后会深入探讨的话题，但简而言之，版本控制是确保你的工作安全，避免丢失的方法，也是在你需要时能够回到之前工作版本的方式。这不仅仅是这些，但这就是从宏观角度看的。'
- en: '*Testing*: Once you write your code, you of course need to make sure it works
    right, so testing will be a big part of what you do. Sometimes you’ll work with
    others who will do the testing for you, and sometimes you will be doing it yourself
    (and there are multiple types and levels of testing, but that’s a discussion for
    later).'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试*：一旦你编写了代码，你当然需要确保它工作正常，因此测试将成为你工作的重要组成部分。有时你会与其他人合作进行测试，有时你会自己进行测试（而且有多个测试类型和级别，但这将是稍后讨论的话题）。'
- en: '*Documentation*: Writing various forms of documentation is an important thing
    to do, for yourself as well as others. It might be design documents that explain
    what you’re building, or it might be usage documentation for your end users, to
    name just two.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*文档*：编写各种形式的文档是一件重要的事情，不仅对你自己，也对他人来说都很重要。这可能包括解释你正在构建的内容的设计文档，或者为最终用户编写的使用文档，仅举两个例子。'
- en: '*Task management*: Every project you work on will be broken down into many
    different parts because beyond a certain level of complexity – a level that you
    can reach very quickly – a project is too big to do in one piece. These parts
    will become tasks, and managing those tasks becomes important to managing the
    project. This will often take the form of a task management system such as Jira
    where you will have tickets – tasks, essentially – to work on and that you’ll
    need to update the status on as you work on the task.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*任务管理*：你参与的每个项目都会被分解成许多不同的部分，因为超过一定程度的复杂性——一个你可以很快达到的水平——项目就太大，不能一次性完成。这些部分将成为任务，管理这些任务对于管理项目来说变得很重要。这通常以任务管理系统的形式出现，比如Jira，你将会有工单——本质上就是任务——需要处理，并且随着你处理任务，你需要更新任务的状态。'
- en: '*Deployments*: Once you have code that’s ready for prime time, or even just
    for testing, you have to put it somewhere that others can access. This is called
    “deploying” code, and while it’s not something you’ll do every day necessarily,
    it can be a frequent occurrence.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*部署*：一旦你有准备好的代码，或者甚至只是用于测试的代码，你必须将其放置在其他人可以访问的地方。这被称为“部署”代码，虽然这不一定是你每天都会做的事情，但它可能是一个频繁发生的事件。'
- en: '*Code reviews*: When you’re working with others, it’s not uncommon to review
    each other’s work. They may send you their changes and ask you to test them or
    just read the code and look for problems, and vice versa.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*代码审查*：当你与其他人合作时，审查彼此的工作并不罕见。他们可能会发送他们的更改并要求你测试它们，或者只是阅读代码并寻找问题，反之亦然。'
- en: '*Research*: Taking time to explore new technologies or to figure out how to
    effectively use one will be a big part of your job as a web developer. Building
    **proof of concept** (**PoC**) code is a common manifestation of that research.
    A PoC is a lot like a prototype in that it’s code that may or may not be molded
    into a final form later on and definitely isn’t written as such from the start.
    The key difference – though I’ll say up front that it’s a fine line – is that
    a PoC is the term usually applied when you aren’t quite sure something is actually
    doable at all and you want to prove the idea out, whereas, with a prototype, you
    more or less know it’s doable and you just want to produce something tangible
    for people to look at and play with a bit before you get into doing it for real.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*研究*：花时间探索新技术或找出如何有效地使用它们，这将是作为网页开发者工作的一部分。构建**概念验证**（**PoC**）代码是这种研究的一种常见表现。PoC与原型非常相似，因为它可能是也可能不是后来被塑造成最终形式的代码，并且绝对不是一开始就按照这样的目的编写的。关键的区别——虽然我事先会说明这是一个很细的界限——是，当你不确定某件事是否真的可行时，你想要证明这个想法，这时通常使用PoC这个术语，而原型则意味着你基本上知道它是可行的，你只是想要在真正开始之前制作一些人们可以查看和尝试的东西。'
- en: A typical day
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个典型的一天
- en: 'Okay, those are the kinds of things you can expect to have to do (almost) every
    day. But what does a typical day look like? Again, I have to stress that this
    is a very generalized description. No two developers will have the same day, and
    a single developer may have days that vary a lot too. But, as a gross generalization,
    this probably isn’t too far off what you’ll experience most days:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这些都是你每天（几乎）都需要做的事情。但是，一个典型的一天是什么样的呢？再次强调，这是一个非常概括性的描述。没有两个开发者的日子是完全相同的，即使是同一个开发者，他们的日子也可能有很大的变化。但是，作为一个粗略的概括，这很可能与你大多数日子所经历的情况相差不远：
- en: '*8:00 am*: Arrive at the office or start working remotely. Check emails and
    Slack/Discord/Teams messages, and review any issues that may have occurred overnight.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*8:00 am*：到达办公室或开始远程工作。检查电子邮件和Slack/Discord/Teams消息，并回顾可能发生的任何问题。'
- en: '*8:30 am*: Daily stand-up meeting. This is a very brief meeting between team
    members where you provide your current status, what you did the previous day,
    what you plan to do today, and any roadblocks you may have. It’s called a stand-up
    meeting because it often is done, literally, with everyone standing, with the
    goal being to ensure it only lasts a few minutes.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*8:30 am*：每日站立会议。这是一个简短的团队成员会议，你提供你的当前状态、前一天做了什么、今天计划做什么以及可能遇到的任何障碍。它被称为站立会议，因为通常是以站立的形式进行的，目的是确保会议只持续几分钟。'
- en: '*9:00 am*: Review and prioritize your tasks for the day and update them as
    necessary in your task management system.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*9:00 am*：回顾并优先处理当天的任务，并在任务管理系统中根据需要更新它们。'
- en: '*9:30 am*: Dive into coding. Whether that means developing new features, fixing
    bugs, or reviewing the code of others, it’s time to actually put the pedal to
    the metal and do some work!'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*9:30 am*：深入编码。这可能意味着开发新功能、修复错误或审查他人的代码，现在是时候真正加油干，做一些工作了！'
- en: '*11:00 am*: Have a meeting to discuss the project with stakeholders. You may
    demo what you’ve done recently for them, or just discuss next steps and requirements.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*11:00 am*：与利益相关者开会讨论项目。你可能向他们展示你最近完成的工作，或者只是讨论下一步和需求。'
- en: '*12:00 pm*: Break for lunch. This is also a good time to socialize with coworkers
    a bit. While there is absolutely no requirement that you are friends with the
    people you work with, being friendly with them really does make for a much better
    work experience, so don’t sleep on this part of your day!'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*12:00 pm*：午餐休息。这也是与同事社交的好时机。虽然你绝对没有必须与同事成为朋友的义务，但与他们友好相处确实能让你有更好的工作体验，所以不要忽视你这一天中的这部分时间！'
- en: '*1:00 pm*: Resume coding. This is often a good time of day to focus on more
    complex tasks that take more mental effort to accomplish, because most people
    tend to be in a better headspace around this time of day (of course, that’s not
    true for everyone, and you need to figure out what works for you and arrange your
    days accordingly).'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*1:00 pm*：继续编码。这通常是一天中集中精力处理更复杂任务的好时机，因为大多数人在这段时间精神状态较好（当然，这并不适用于所有人，你需要找出适合自己的方式，并相应地安排你的日程）。'
- en: '*2:30 pm*: Attend a meeting to plan future work. A lot of companies use what’s
    called an Agile methodology, which is something we’ll get into in future chapters.
    But, in short, it’s an approach to managing a project that emphasizes small bursts
    of productivity called sprints and allows a team to self-direct itself (for the
    most part). To make this work, meetings to do sprint planning and backlog grooming
    (essentially, the act of prioritizing known future work) happen fairly often.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*下午2:30*: 参加一个会议来规划未来的工作。许多公司使用所谓的敏捷方法，我们将在未来的章节中详细介绍。但简而言之，这是一种管理项目的方法，强调小批量生产力，称为冲刺，并允许团队自我管理（大部分情况下）。为了使这成为可能，进行冲刺规划和待办事项整理（本质上，是优先处理已知未来工作的行为）的会议相当频繁。'
- en: '*3:00 pm*: Return to coding, perhaps this time focusing on unit tests (small,
    highly focused testing that developers do on small portions of a larger system
    to ensure they work right individually) or debugging (fixing code that isn’t quite
    working right).'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*下午3:00*: 回到编码，也许这次会专注于单元测试（开发者对大型系统的小部分进行的小型、高度集中的测试，以确保它们单独工作正确）或调试（修复不完全工作的代码）。'
- en: '*4:00 pm*: Update documentation, save the changes you’ve made for the day in
    a version control system for safekeeping, and begin to plan the next day’s work.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*下午4:00*: 更新文档，将你当天所做的更改保存在版本控制系统中以备安全，并开始规划第二天的工作。'
- en: '*5:00 pm*: Begin to wind down for the day, or perhaps deploy code, depending
    on the day.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*下午5:00*: 开始为一天画上句号，或者根据当天的情况部署代码。'
- en: '*6:00 pm*: Hit the bricks! Take off, run out the door, whatever phrase you
    prefer to mean “It’s time to forget this place for the day and have some fun,”
    because work/life balance is of critical importance, and you should strive to
    not take your work home in any way. Once you leave for the day, put it out of
    your mind as much as possible and enjoy your life.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*下午6:00*: 离开，出门，无论你更喜欢用哪个短语来表示“现在是时候忘记这个地方，享受一下乐趣了”，因为工作与生活的平衡至关重要，你应努力不把工作带回家。一旦你离开，就尽可能把它抛诸脑后，享受你的生活。'
- en: I must stress again that this is an extremely rough and very generalized outline.
    Your day may look quite different from this. There may be other tasks you have
    to partake in, and for some of these, you may not do much, if at all. Some days,
    you’ll spend 99% of your time coding, and other days, you’ll barely write a single
    line of code. Even if the previous workday structure is typical, days will fluctuate
    for sure, and you’ll need to be okay with that. But this outline shouldn’t be
    *too* far off reality *most* days in *most* environments.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须再次强调，这是一个非常粗略且非常概括的概述。你的日子可能看起来与这个大不相同。你可能需要参与其他任务，对于其中一些，你可能几乎不做任何事情。有些日子，你可能将99%的时间花在编码上，而其他日子，你可能几乎连一行代码都写不出来。即使前一天的工作结构很典型，日子肯定会有所波动，你需要接受这一点。但这个概述不应该与大多数环境中的大多数日子的事实相差“太远”。
- en: While I’ve at least hinted at it before now, there’s really one key skill that
    I think any web developer absolutely needs to have, and that’s logical thinking.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我之前至少暗示过这一点，但确实有一个关键技能，我认为任何网页开发者绝对需要具备，那就是逻辑思维。
- en: 'Understanding the one truly invaluable skill: logical thinking'
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解一项真正无价的能力：逻辑思维
- en: I’ve talked about several skills and abilities you need to have as a web developer,
    and to be sure, they’re all important. But of all of them, the one that I think
    rises above the rest is logical thinking. I’ve said that before, but let’s talk
    about why it’s so critical in a bit more detail.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经讨论过作为网页开发者你需要具备的几种技能和能力，毫无疑问，它们都很重要。但在这其中，我认为最突出的还是逻辑思维。我之前也说过这一点，但让我们更详细地谈谈为什么它如此关键。
- en: The ability to think logically is at the core of what we web developers do because
    at the end of the day, what we’re doing is telling the computer what to do. And,
    as the saying goes, computers will do *exactly* what you tell them to do (well,
    with AI in the mix, that’s becoming less and less true with each passing day,
    and of course, we’re all just hoping that doesn’t change and they don’t go all
    Skynet on us!). On top of this, computers will do it incredibly fast – so fast
    that you can’t even comprehend it, and if you tell them to do the wrong thing,
    well, they’re going to do exactly that very fast, too!
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑思维能力是我们作为网页开发者所做事情的核心，因为最终我们是在告诉计算机做什么。正如俗话所说，计算机会**精确地**做你告诉它们做的事情（当然，随着人工智能的加入，这种情况每天都在变得越来越不真实，我们当然都希望这种情况不会改变，它们不会对我们发动类似天网的攻击！）。除此之外，计算机会做得非常快——快到连你都无法理解，如果你告诉它们做错事，那么它们也会非常快地做错！
- en: 'So, it’s critical that you are able to organize your thoughts and instruct
    the computer properly to get the results you need. That means being able to start
    from fact A, logically figure out what fact B is, and then work out how to get
    there, rinsing and repeating a few thousand times, and at the end, you might have
    a working website or piece of software. To put it another way: the logical ordering
    of steps, and determining how you can branch from step B to step C, *or* from
    step B to step D depending on conditions at the time the code executes, is what
    it’s all about.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你能够组织你的思路并正确指导计算机以获得所需的结果是至关重要的。这意味着能够从事实A开始，逻辑地推断出事实B是什么，然后想出如何到达那里，重复几千次，最后你可能会得到一个可以工作的网站或软件。换句话说：步骤的逻辑顺序，以及确定在代码执行时的条件下，你可以从步骤B分支到步骤C，或者从步骤B分支到步骤D，这是关键所在。
- en: That’s the idea that underlies it all, but we can break it down further into
    sub-categories because logical, ordered thinking is not a single specific skill;
    it’s really an amalgamation of several broad categories of skill.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是所有这一切背后的理念，但我们可以将其进一步细分为子类别，因为逻辑有序的思考并不是一个单一的具体技能；它实际上是几个广泛技能类别的融合。
- en: Problem-solving
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题解决
- en: Being able to solve problems is a skill that requires logical thinking and understanding.
    Having a clear picture of the desired outcome and seeing a logical set of steps
    to get to it is necessary to determine where in that series of steps a problem
    is occurring, and then how to fix it.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 能够解决问题是一种需要逻辑思维和理解能力的技能。对期望的结果有一个清晰的了解，并看到达到它的逻辑步骤，这是确定在那一系列步骤中问题出现在哪里，然后如何修复它的必要条件。
- en: Of course, a “problem” doesn’t just mean when something isn’t working right!
    A problem is also when you’re building something for the first time from scratch,
    and having to see to the steps required to achieve your goal. Being able to break
    complex tasks down into manageable chunks is a hallmark of people who are good,
    logical thinkers.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，“问题”不仅仅意味着某件事没有按预期工作！当你是第一次从头开始构建某件事时，需要关注实现目标所需的步骤，这也是一个问题。能够将复杂任务分解成可管理的部分是优秀逻辑思维者的标志。
- en: 'I should also note that you should be able to adjust your thinking as you go
    and gain new facts, because that nearly *always* happens as you progress in a
    project. To paraphrase a famous military saying: no development project survives
    contact with actually doing the development, meaning that no matter how logical
    and seemingly complete your thinking, virtually no one gets it 100% right from
    start to finish. You have to adapt to those “oh wow, that’s not gonna work like
    I thought it would” moments that are all but inevitable.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我还应该指出，你应该能够在前进的过程中调整你的思考并获取新的事实，因为这在项目进展过程中几乎**总是**会发生。用一句著名的军事名言来概括：没有开发项目能够在实际开发过程中幸存，这意味着无论你的思考多么逻辑和看似完整，几乎没有人从头到尾100%正确。你必须适应那些“哦，我没想到它会这样”的时刻，这些时刻几乎是不可避免的。
- en: Scalability
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可扩展性
- en: One of the big concerns when building software, be it a website or otherwise,
    is whether it can scale, meaning whether it can handle more usage over time. A
    website can only handle so many users at once, and this is a limit of many factors
    including the network, the server it’s hosted on, and of course, the code itself.
    Being able to think logically will allow you to see the places where scalability
    is limited. For example, if your code frequently reads data from a database, you
    may consider caching the data, which means storing it in a location that can be
    accessed faster than the database.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建软件时，无论是网站还是其他类型的软件，一个主要担忧是它是否能够扩展，也就是说，随着时间的推移，它是否能够处理更多的使用量。一个网站一次只能处理这么多用户，这是由许多因素决定的，包括网络、托管它的服务器，当然还有代码本身。能够进行逻辑思考将使你能够看到扩展性受限的地方。例如，如果你的代码经常从数据库中读取数据，你可能考虑缓存数据，这意味着将其存储在一个可以比数据库更快访问的位置。
- en: Another aspect of scalability is being able to change the code over time. Thinking
    logically will allow you to organize the code in such a way that future changes
    are easier and don’t risk breaking the existing functionality. This might mean
    abstraction layers (a coding concept that tries to keep two parts of a system
    separated by a layer that can be changed more easily than either of the two parts),
    or perhaps a plugin mechanism (the ability to add new code in a standard way that
    doesn’t require changing existing code), or a myriad of other possibilities.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展性的另一个方面是能够随着时间的推移改变代码。逻辑思考将使你能够以这种方式组织代码，使得未来的更改更容易，并且不会破坏现有的功能。这可能意味着抽象层（一种编码概念，试图通过一个可以比两个部分更容易更改的层将系统的两个部分分开），或者可能是一个插件机制（以标准方式添加新代码的能力，而无需更改现有代码），或者有无数其他可能性。
- en: Team collaboration
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 团队协作
- en: It may not be obvious, but logical thinking when interacting with others can
    be very important because it helps you comprehend what they’re saying, even if
    it might not be clear from their words. This can be especially important when
    interacting with other developers. If you are all thinking logically it can almost
    be a magical experience! You might even find yourselves completing each other’s
    (technical) thoughts.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能并不明显，但与他人互动时的逻辑思考可能非常重要，因为它帮助你理解他们所说的话，即使他们的言辞可能并不清楚。这在与其他开发者互动时尤其重要。如果你都进行逻辑思考，这几乎可以是一种神奇的经历！你甚至可能会发现自己完成了对方的（技术）想法。
- en: User experience
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户体验
- en: The notion of user experience is a big concern. Is a website easy to use? Are
    its functions obvious to most people? Is it designed in such a way that it’s difficult
    for users to make mistakes? If they *do* make mistakes, is it easy for them to
    recover from them? Does the interface almost seem to magically anticipate user
    needs? All these things and more are aspects of **user experience** (**UX**) and
    things where logical thinking definitely factors in.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 用户体验的概念是一个很大的关注点。网站是否易于使用？其功能对大多数人来说是否明显？它是否设计得让用户难以犯错？如果他们确实犯了错，是否容易从中恢复？界面是否几乎神奇地预见了用户的需求？所有这些以及更多都是用户体验（UX）的方面，在这些方面逻辑思维肯定是一个重要因素。
- en: This is especially true because UX tends to be based on quantifiable, observable
    facts. Things such as user studies come into play, where you observe a user using
    your website to see where they stumble (and let them tell you specifically). What
    you’ll find often is that their mental model, that is, how their brain is telling
    them things should work, won’t always match up with reality, and you’ll need to
    logically analyze their expectations as compared to what you built and figure
    out how to move them closer together.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这尤其正确，因为用户体验（UX）往往基于可量化和可观察的事实。例如，用户研究就会发挥作用，你观察用户如何使用你的网站，看看他们在哪里会遇到困难（并让他们具体告诉你）。你通常会发现，他们的心智模型，即他们的头脑告诉他们事情应该如何工作的方式，并不总是与现实相符，你需要逻辑地分析他们的期望与你的构建之间的差异，并找出如何使它们更接近。
- en: Error handling
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误处理
- en: Software of any kind is designed with “failure modes” in mind. Failure modes
    are the ways the code you write can fail, which you can determine beforehand.
    For example, maybe your website has to ask another for a banner ad, but what happens
    if that remote system doesn’t respond? Your code must anticipate and handle that
    possibility without the whole site crashing and burning before your users’ eyes.
    That’s something you can know is possible as you write the code, so you write
    code to handle that particular failure mode. Being able to think logically will
    allow you to find those possible failure modes and code for them, resulting in
    more reliable code and a better experience for your users.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 任何类型的软件都是考虑到“故障模式”来设计的。故障模式是你所编写的代码可能失败的方式，你可以事先确定。例如，也许你的网站需要向另一个网站请求横幅广告，但如果那个远程系统没有响应怎么办？你的代码必须预测并处理那种可能性，而不会在用户面前让整个网站崩溃和燃烧。这是你在编写代码时就知道可能发生的事情，所以你编写代码来处理那种特定的故障模式。能够进行逻辑思考将允许你找到那些可能的故障模式并为它们编写代码，从而产生更可靠的代码和更好的用户体验。
- en: Security
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全
- en: As I’m sure you’re aware, security is of paramount importance these days. It
    seems like barely a day goes by when we don’t hear about some monumental breach
    of data on some site. Security is exceptionally difficult to get right, but it’s
    basically impossible without logical thinking.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，安全在当今时代至关重要。似乎没有一天我们不会听到某个网站发生的一些重大数据泄露事件。安全非常难以做到正确，但没有逻辑思维基本上是不可能的。
- en: 'Here’s the weird part, though: the way threat actors – or hackers, as people
    tend to say – work is to think very logically, but in very unexpected ways. You
    see, they know how your website handles its security tokens, for example. They
    understand it very logically. But then, they’ll throw logic out the window and
    start trying things that seem just plain nuts, sometimes! Unfortunately for us
    developers, they’ll frequently find holes in our security that way. Or sometimes
    they’ll take a series of logical steps that alone aren’t a problem, but when taken
    together suddenly result in a security exploit.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，奇怪的是：威胁行为者——或者人们通常所说的黑客——工作的方式是进行非常逻辑的思考，但却是非常出乎意料的方式。你看，他们知道你的网站如何处理其安全令牌，例如。他们非常逻辑地理解它。然后，他们会把逻辑抛到窗外，开始尝试一些看似纯粹疯狂的事情，有时甚至如此！不幸的是，对于开发者来说，他们通常会以这种方式发现我们安全中的漏洞。或者有时他们会采取一系列单独看没问题但结合起来突然导致安全漏洞的逻辑步骤。
- en: Your only hope is to be able to match their ability to think logically and outside
    the box. But you can’t do the latter until you can do the former!
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你唯一的希望是能够匹配他们逻辑思考和跳出思维定势的能力。但除非你能做到前者，否则你无法做到后者！
- en: Testing
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: Similar to security, testing requires logical thinking because what you’ll try
    to do is ensure that your code handles things as it’s expected to, but also that
    it handles when the conditions aren’t quite right. For example, if you have a
    piece of code that divides two numbers, you’ll of course test whether 10 divided
    by 2 equals 5\. That will be one test. But you’ll also do another that tests what
    happens if you try to do 10 divided by 0\. What does the code do then? Aside from
    you needing to write the code in such a way that it *can* handle that situation
    in some meaningful way, you’ll need to test that handling, and logical thinking
    is what allows you to come up with those tests.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 与安全一样，测试需要逻辑思维，因为你要尝试确保你的代码按照预期处理事情，同时也处理当条件不完全正确时的情况。例如，如果你有一段代码用于除以两个数字，你当然会测试10除以2是否等于5。这将是一个测试。但你还会进行另一个测试，测试如果你尝试10除以0会发生什么。代码那时会做什么？除了你需要以某种有意义的方式编写代码来处理那种情况之外，你还需要测试那种处理，而逻辑思维正是让你能够想出那些测试的方法。
- en: Data flow
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据流
- en: 'The idea of data flow is simply how data moves around different parts of your
    code or system. If you have some data that describes a person – things such as
    their name, age, and phone number – that data may have to move around the code
    to perform various functions with it. That’s called a “data flow,” an example
    of which can be seen in *Figure 1**.6*:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 数据流的概念很简单，就是数据如何在你的代码或系统的不同部分之间移动。如果你有一些描述一个人的数据——比如他们的名字、年龄和电话号码——这些数据可能需要在代码中移动以执行与之相关的各种功能。这被称为“数据流”，一个例子可以在*图1.6*中看到：
- en: '![Figure 1.6: An example of data flow between different parts of a program](img/B18315_01_6.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图1.6：程序不同部分之间的数据流示例](img/B18315_01_6.jpg)'
- en: 'Figure 1.6: An example of data flow between different parts of a program'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6：程序不同部分之间的数据流示例
- en: '*Figure 1**.6* shows how data flows between components in an application I
    wrote for one of my older books – you are not expected to understand this right
    now; it’s just to give an example of what a data flow can look like. Being able
    to think logically about how data flows through the various parts of your code
    is key.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1**.6* 展示了我为我的早期书籍之一编写的一个应用程序中组件之间的数据流——你现在不需要理解这一点；这只是提供一个数据流可能看起来像什么的例子。能够逻辑地思考数据如何通过你的代码的各个部分是关键。'
- en: And it’s more important when that data can move between systems, or parts of
    a system that may not all be running on the same physical machine, be those databases
    or other remote systems that perform some function on your behalf and return a
    result.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 而当数据可以在系统之间或可能不在同一台物理机器上运行的系统部分之间移动时，这一点尤为重要，无论是数据库还是其他代表你执行某些功能并返回结果的远程系统。
- en: Resource management
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源管理
- en: Whenever you write software of any kind, you’ll need to consider resource utilization.
    In fact, if you get your Computer Science degree, you’ll be all too familiar with
    things such as Big O notation, which is intended to allow quantification of this
    resource utilization.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你编写任何类型的软件，你都需要考虑资源利用。实际上，如果你获得了计算机科学学位，你将非常熟悉诸如大O符号之类的事物，它旨在允许量化这种资源利用。
- en: A computer can only do so much work. It’s limited by many factors, things such
    as how fast its **central processing unit**(**CPU**) is, how much memory it has
    and how fast that memory is, how fast its network connection is and how much data
    can be transferred over it, the efficiency of its storage devices, and so on.
    The code you write uses all these resources to varying degrees, and you have to
    design the code with them in mind to use them efficiently. That means not only
    ensuring that you don’t try to use more than you have, but also that you are utilizing
    the full potential of the system you’re running on.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机只能做这么多工作。它受许多因素的影响，例如它的**中央处理单元**（**CPU**）有多快，它有多少内存以及内存有多快，它的网络连接有多快以及可以通过它传输多少数据，其存储设备的效率，等等。你编写的代码以不同的程度使用所有这些资源，你必须考虑到这些资源来有效地设计代码。这意味着不仅确保你不会试图使用比你拥有的更多的资源，而且还要充分利用你运行的系统的全部潜力。
- en: And it all requires logical thinking to understand how resources are utilized
    over time.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 而这一切都需要逻辑思维来理解资源随时间如何被利用。
- en: Debugging
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试
- en: When we write software, we have failure modes, as I mentioned before. In addition,
    we also have bugs, which are essentially failure modes that we *don’t* anticipate.
    A user entering letters where numbers are expected and our code then trying to
    do math on it might be one such example. The ability to think in a logical, ordered
    fashion improves your ability to methodically step through code to identify issues.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编写软件时，我们会有故障模式，正如我之前提到的。此外，我们还有错误，它们基本上是我们*没有*预料到的故障模式。用户在期望数字的地方输入字母，然后我们的代码试图对其进行数学运算可能就是这样的例子之一。以逻辑、有序的方式思考可以提高你系统地逐步通过代码以识别问题的能力。
- en: '![Figure 1.7: Bugs – they’ll bite ya every time!](img/B18315_01_7.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图1.7：错误——它们会一直咬你！](img/B18315_01_7.jpg)'
- en: 'Figure 1.7: Bugs – they’ll bite ya every time!'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7：错误——它们会一直咬你！
- en: The alternative is a “trial and error” approach, where you see something broken,
    make a change almost at random, and see what the result is. Admittedly, sometimes
    you’ll wind up doing that anyway, as you might not have all the information you
    need to logically figure out a problem. But the ability to think logically will
    help you avoid this, which is helpful because trial and error tends to be less
    efficient in most cases.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是“试错”方法，你看到某些东西出了问题，几乎随机地做出改变，然后看看结果是什么。诚然，有时你还是会这样做，因为你可能没有所有你需要的信息来逻辑地解决问题。但逻辑思考的能力将帮助你避免这种情况，这在大多数情况下是有帮助的，因为试错通常效率较低。
- en: 'As an aside, did you know that these unanticipated failure modes we call bugs
    originated from someone removing *literal* bugs? It goes all the way back to 1946
    and a lady named Grace Hopper. Back then, computers worked *very* differently
    from how they do today. One of the big ways was that instead of transistors –
    small electronic elements – they used relays. A relay is essentially a small switch,
    not unlike the light switch on your wall, but with the key difference that the
    switch can be moved when electricity is applied to it. These relays serve the
    same purpose as transistors do today: they represent 0s and 1s in our system (where
    0 means no electricity is flowing and 1 means electricity is flowing). It may
    sound impossible, but from that one simple principle, you can build up a complex
    computing system.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 作为旁白，你知道我们称之为“bug”的这些未预见的故障模式最初是从有人移除*实际的*虫子开始的吗？这可以追溯到1946年，一个名叫Grace Hopper的女士。当时，计算机的工作方式与今天大不相同。其中一种很大的不同是，它们不是使用晶体管——小型的电子元件——而是使用继电器。继电器本质上是一个小开关，与墙上开关类似，但关键的区别在于当通电时，开关可以移动。这些继电器今天的作用与晶体管相同：它们在我们的系统中代表0和1（其中0表示没有电流流动，1表示有电流流动）。这可能听起来不可能，但就是从这样一个简单的原则出发，你可以构建一个复杂的计算机系统。
- en: 'But you can also get some interesting problems from such simple foundations!
    One night, Grace discovered that the computer she was working on was giving erroneous
    results. She began tracing the problem (using logical thinking, of course!) to
    figure out where the problem was. She eventually found it: there was a deceased
    moth inside of one of the relays. The moth was stopping a relay from closing when
    electricity was applied, meaning that the computer saw it as having a value of
    0 instead of 1\. The report of this incident literally listed the cause of the
    problem as a “bug” in the relay; hence, a now well-known computer term was coined!
    This is also where the term “debugging” comes from!'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 但你也能从这些简单的基石中找到一些有趣的问题！一天晚上，Grace 发现她正在工作的计算机给出了错误的结果。她开始追踪这个问题（当然是用逻辑思维！）以找出问题所在。她最终找到了：其中一个继电器里有一只死去的蛾子。当通电时，蛾子阻止了继电器关闭，这意味着计算机将其视为0值而不是1。这个事件的报告实际上将问题的原因列为继电器中的“虫子”；因此，一个现在广为人知的计算机术语就这样诞生了！这也是“调试”这个术语的由来！
- en: Documentation
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档
- en: Logical thinking is required when writing documentation of all sorts because
    if it’s not written logically then no one is going to understand it, and that
    someone might wind up being you a few months later!
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写各种文档时需要逻辑思维，因为如果不按逻辑编写，没有人会理解它，而且几个月后那个人可能就是你！
- en: Part of it is being able to get into the heads of your users, in a sense. You
    have to understand how they are going to approach using what you create, and you
    then have to write documentation that anticipates their questions and provides
    them with the answers they will need.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一部分是能够进入你用户的思维中，从某种意义上说。你必须理解他们将如何使用你创建的东西，然后你必须编写文档，预测他们的问题并提供他们需要的答案。
- en: Of course, documentation for users is only one type of documentation, and it’s
    actually a type that you may or may not ever need to write, depending on the environment
    you work in (at my company, we have a team dedicated to this duty, so while I
    work with them, they are the ones primarily responsible for it). There is also
    documentation embedded in the code you write, or at least there should be! This
    type of documentation, called **comments**, explains what the code is intended
    to do, as well as any tricky things that might have come up when writing it that
    someone may need to know about later. You write these comments for other developers
    who may have to work on the code someday, but you also write it for yourself,
    because you will definitely not remember everything that went into the code you
    wrote a few months later, believe me! Having explanations right there in the code
    is very important, and these comments clearly need to make sense or they won’t
    be of much value (they can actually be *harmful* if not well-written since they
    can lead a developer down the wrong path), so logical thinking sure does come
    in handy here, too!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，为用户编写的文档只是文档的一种类型，实际上这是一种你可能永远不需要编写的类型，这取决于你工作的环境（在我公司，我们有一个团队专门负责这项任务，所以当我与他们合作时，他们主要对此负责）。你的代码中也可能嵌入文档，或者至少应该是这样的！这种类型的文档被称为**注释**，它解释了代码的预期用途，以及编写过程中可能出现的任何复杂问题，这些问题可能在以后需要有人了解。你为可能需要在未来某天处理代码的其他开发者编写这些注释，但你也为你自己编写它们，因为相信我，你绝对不可能记得几个月前编写的代码中的所有细节！在代码中直接有解释非常重要，而且这些注释必须清晰易懂，否则它们就不会有很大的价值（如果写得不好，它们实际上可能是*有害的*，因为它们可能会引导开发者走向错误的方向），所以逻辑思维在这里也非常有用！
- en: Adaptability
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 适应性
- en: 'As I’ve mentioned a few times, you are seeking to enter a field that is constantly
    changing, with new technologies hitting the scene all the time. But here’s the
    dirty little secret: the vast majority of these “new” technologies are really
    just rehashing old ideas, dressing them up – and yes, maybe advancing them a bit
    – and presenting them as new.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我提到过几次，你正在寻求进入一个不断变化的领域，新技术不断涌现。但这里有一个小小的秘密：这些“新”技术的绝大多数实际上只是旧想法的重新组合，对其进行包装——是的，也许还略有进步——并将它们作为新事物呈现。
- en: Where logical thinking comes into play is that once you have some technical
    know-how and experience, and you see the “new” hotness, you’ll also start to see
    how it relates to what came before. You’ll connect the dots a lot faster, which
    means you’ll be able to adapt to the new stuff much faster and more efficiently.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 当你拥有一些技术知识和经验，并看到“新”的热门事物时，你也会开始看到它如何与之前的内容相关。你会更快地连接起这些点，这意味着你将能够更快、更有效地适应新事物。
- en: Decision-making
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 决策
- en: Logical thinking when making decisions is probably an obvious one, but it’s
    worth mentioning because decision-making comes in all shapes and sizes. For example,
    which design pattern should you use for a given piece of code? Or how do you structure
    your **CSS** (**Cascading Style Sheets**, a concept we’ll get into later, but
    briefly, it allows you to apply things such as colors, fonts, and positionings
    to things on a web page) so that it is reusable and maintainable? Your life as
    a web developer will be a series of decisions both large and small, and the better
    able you are to think logically about the options you have and the consequences
    of choosing each one, the better decision-maker you’ll be.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在做决策时进行逻辑思考可能是一个显而易见的事情，但值得提一下，因为决策可以以各种形式和规模出现。例如，你应该为给定的代码块使用哪种设计模式？或者你应该如何构建你的**CSS**（**层叠样式表**，我们稍后会详细介绍，但简而言之，它允许你将颜色、字体和定位等应用到网页上的元素），以便使其可重用且易于维护？作为网页开发者，你的生活将是一系列大小不一的决策，你越能够逻辑地思考你所拥有的选项以及选择每个选项的后果，你将越成为一个更好的决策者。
- en: Communication
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 沟通
- en: Finally, simple communication, in all its forms, is aided greatly by logical
    thinking ability. Just like with documentation – which *is* a form of communication,
    after all – the more cogently you can express your thoughts, the better communicator
    you’ll be. This can be technical communication, or not. Managing a project, for
    example, is a tough task sometimes, and being able to talk about the current and
    future status logically is a key ability to make the project doable.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，所有形式的简单沟通都极大地得益于逻辑思维能力。就像文档一样——毕竟，它也是一种沟通形式——你越能清晰地表达你的思想，你将越是一个好的沟通者。这可以是技术沟通，也可以不是。例如，管理一个项目有时是一项艰巨的任务，能够逻辑地讨论当前和未来的状态是使项目可行的一项关键能力。
- en: That’s all great, but can logical thinking be learned?
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那都是很好的，但逻辑思维可以学习吗？
- en: 'Speaking of logical thinking, the final point I’ll make is to try to answer
    a logical question that may be in your head right now: can you *learn* how to
    think logically, or is it a purely innate ability that you either have or not?
    To cut to the chase: yes, I believe it’s a skill you can learn, though it does
    take effort, and at the same time, I do think that some people come by this ability
    more naturally than others. Or, maybe it’s more precise to say that whatever level
    of innate logical thinking you have can be accentuated and enhanced over time.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 说到逻辑思维，我最后要说的就是尝试回答你现在头脑中可能存在的逻辑问题：你能*学习*如何进行逻辑思考，还是这仅仅是一种纯粹的天赋能力，你或者有或者没有？直截了当地说：是的，我相信这是一种你可以学习的技能，尽管这需要努力，同时，我也认为有些人比其他人更自然地拥有这种能力。或者，也许更精确地说，无论你有多少先天的逻辑思维能力，都可以随着时间的推移得到加强和提升。
- en: We’ve talked a lot about what it takes to be a web developer, but in fact, the
    term “web developer” can mean several different things. That’s right, there really
    are multiple kinds of web developers! Let’s talk a bit about that now.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了很多成为网络开发者所需的东西，但事实上，“网络开发者”这个术语可以意味着几件不同的事情。没错，真的有几种不同类型的网络开发者！现在让我们谈谈这一点。
- en: Exploring the different types of web developers
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索不同类型的网络开发者
- en: 'Being a web developer doesn’t mean being just one thing. Well, not necessarily
    at least. There are variations on a theme. It boils down to three main categories
    that a “web developer” can fall into: frontend, backend, and full stack web developers.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 成为网络开发者并不意味着只做一件事。好吧，至少不一定。有各种变体。这归结为三个主要类别，一个“网络开发者”可以落入其中：前端、后端和全栈网络开发者。
- en: But before we can really even talk about the distinction between these three,
    you have to have at least a cursory understanding of how a network, the internet,
    and the web on top of it function, so let’s look at that so you have the necessary
    foundation to understand the three categories.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们真正讨论这三者之间的区别之前，你必须至少对网络、互联网以及在其之上的万维网是如何运作的有一个初步的了解，所以让我们来看看这一点，这样你就有必要的基础来理解这三个类别。
- en: The (very) basics of the internet and the web
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 互联网和万维网的基础（非常基础）
- en: Before we can get into that, though, I have to make sure you have a basic understanding
    of how this thing called the web, which is short for the World Wide Web (which,
    by the way, is where the “www” in addresses for websites come from, as in [www.google.com](http://www.google.com)),
    works at a high level.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨这一点之前，我必须确保你对这个被称为万维网的东西有一个基本的了解，万维网是万维网的简称（顺便说一句，这就是网站地址中的“www”的来源，例如[www.google.com](http://www.google.com)）。它在一个高级别上是如何工作的。
- en: 'Firstly, it’s important to realize that the internet isn’t the same as the
    web. Granted, it’s kind of come to mean the same thing to most people over the
    years, but strictly speaking, it’s not true. The **web** is just one component
    of the internet, which is itself a massive number of computers all connected together
    over a network, similar to what is shown in *Figure 1**.8*:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，重要的是要意识到互联网并不等同于万维网。诚然，多年来它对大多数人来说已经意味着同一件事，但严格来说，这并不正确。**万维网**只是互联网的一个组成部分，而互联网本身是由大量通过网络连接在一起的计算机组成的，类似于*图1.8*所示。8*：
- en: '![Figure 1.8: An example of a (small) network structure (multiply by millions
    for the internet!)](img/B18315_01_8.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图1.8：一个（小型）网络结构的示例（互联网是百万倍于此！）](img/B18315_01_8.jpg)'
- en: 'Figure 1.8: An example of a (small) network structure (multiply by millions
    for the internet!)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8：一个（小型）网络结构的示例（互联网是百万倍于此！）
- en: The web is one component, but some others are Usenet (newsgroups), POP3/IMAP/SMTP
    (email), Gopher (this doesn’t really exist anymore, but it was a precursor to
    the web), and a few others that are basically irrelevant now. All these things
    connect over the **internet**, but the web is kind of special because, as I mentioned,
    it has come to mean the internet itself, since almost all activity on the internet
    these days is conducted over the web.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 网络是一个组成部分，但还有一些其他的是Usenet（新闻组）、POP3/IMAP/SMTP（电子邮件）、Gopher（这实际上已经不存在了，但它曾是网络的先驱），以及一些现在基本上已经无关紧要的其他东西。所有这些都在**互联网**上连接，但网络有点特别，因为正如我提到的，它已经变成了互联网的同义词，因为现在几乎所有的互联网活动都是通过网络进行的。
- en: But, for our purposes here, that’s all just a bit of history and pedantry. What’s
    important is what happens when you enter the address of a website into your browser’s
    address bar. The main thing to understand is that your computer is connecting
    to another out there, which we term the `google.com`, your computer makes a connection
    to a computer owned by Google. That server returns the code that makes up the
    Google website to your browser, which then uses those instructions to show the
    page on your screen.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，就我们在这里的目的而言，这些都只是历史和学究式的知识。重要的是当你将网站地址输入浏览器地址栏时会发生什么。主要需要理解的是，你的电脑正在连接到另一个外部的电脑，我们称之为`google.com`，你的电脑连接到由谷歌拥有的电脑。那个服务器返回构成谷歌网站的代码到你的浏览器，然后浏览器使用这些指令在屏幕上显示页面。
- en: 'When you develop a website, there is code that runs in the browser, but there
    is also code that runs on the server, which produces the code that the browser
    executes, in a sense. This dichotomy is where two types of web developers come
    into play: frontend developers and backend developers.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开发一个网站时，有一些代码在浏览器中运行，但也有一些代码在服务器上运行，这些代码产生了浏览器执行的代码。从某种意义上说，这种二分法就是两种类型的网络开发者发挥作用的地方：前端开发者和后端开发者。
- en: Two sides of a coin – frontend and backend developers
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬币的两面——前端和后端开发者
- en: Frontend developers write the code that the browser executes. They deal with
    things such as **HTML** (an acronym for **HyperText Markup Language**), CSS, and
    JavaScript (which I’ll abbreviate as JS from here on out, and which is a programming
    language your browser understands). We’ll dive into these in the chapters to come,
    but for now, the key thing to understand is that these are essentially the three
    pillars of the web. They are, by and large, all your browser knows how to work
    with, and they are the three technologies that all websites are built on.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 前端开发者编写浏览器执行的代码。他们处理诸如**HTML**（超文本标记语言的缩写）、CSS和JavaScript（从现在起我将简称为JS，这是一种浏览器理解的编程语言）等问题。我们将在接下来的章节中深入探讨这些内容，但就目前而言，关键要理解的是，这些基本上是网络的三个支柱。它们在很大程度上是浏览器知道如何与之交互的，它们是所有网站构建的基础的三种技术。
- en: 'Now, because I don’t want to leave you hanging, here’s an example of all of
    those technologies:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，因为我不想让你感到困惑，这里有一个所有这些技术的示例：
- en: '[PRE0]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Don’t worry, you are in no way expected to understand any of that code (or the
    math it uses either) at this point – but you will by the end of this book! The
    goal right now is simply to give you a complete, working example of a website
    that actually does something, and that might be a little fun for you as a reader
    to see.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 别担心，你现在根本不需要理解任何这些代码（或者它所使用的数学）——但到这本书的结尾时你就能做到了！现在的目标只是简单地给你提供一个完整、可工作的网站示例，这个示例可能对你这个读者来说有点乐趣。
- en: In fact, to get the full experience, open a text editor such as Notepad, type
    the code in, save it with the name `test.html`, and then double-click it to launch
    it in your browser. The result is nothing to write home about to be sure, but
    it *is* a complete website, and it *does* demonstrate those three key technologies
    in a very basic way.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，为了获得完整的体验，打开一个文本编辑器，比如记事本，输入代码，将其保存为名为`test.html`的文件，然后双击它以在浏览器中打开。当然，结果可能没有什么值得大书特书的，但确实是一个完整的网站，并且它确实以非常基本的方式展示了那三种关键技术。
- en: Backend developers, by contrast, write the code that executes on the server.
    There are many different technologies you might deal with there. Some of the most
    popular today are Java, Node, PHP, and .NET, but that’s far from an exhaustive
    list. A backend developer specializes in these technologies, and for the most
    part isn’t concerned with what winds up on your screen, at least not in a direct
    way like frontend developers are. Instead, they deal more with things such as
    databases, cloud compute layers (something else we’ll touch on later), caching,
    app servers, session management, authentication, authorization (proving who you
    are and what you’re allowed to do), and more.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，后端开发者编写在服务器上执行的代码。你可能需要处理许多不同的技术。目前最受欢迎的包括Java、Node、PHP和.NET，但这远非详尽的列表。后端开发者专注于这些技术，而且大部分情况下并不直接关心最终出现在你屏幕上的内容，至少不像前端开发者那样直接。相反，他们更多地处理诸如数据库、云计算层（我们稍后会涉及）、缓存、应用服务器、会话管理、身份验证、授权（证明你是谁以及你被允许做什么）等方面。
- en: Some developers specialize in one of these two areas, and they let someone else
    do the other side of the equation. In some organizations, there will be entire
    teams dedicated to each side of the client/server divide, and rarely will they
    meet directly (to be sure, they have to communicate and work together, but they
    basically function independently except at the point where they have to integrate
    their work).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发者专注于这两个领域中的任何一个，并让其他人做方程式的另一边。在一些组织中，可能会有整个团队致力于客户端/服务器划分的每一侧，而且他们很少会直接见面（当然，他们必须沟通和合作，但除了他们必须集成工作的地方，他们基本上是独立运作的）。
- en: And the, uhh, third side of the coin – full-stack developers!
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 然后，嗯，硬币的第三面——全栈开发者！
- en: By contrast, there are also full stack developers, which means web developers
    who deal with both frontend and backend coding. I think it’s reasonable to say
    that there are more web developers who are full-stack developers these days than
    specialized ones, and there do tend to be more job opportunities for full-stack
    developers. Obviously, though, that requires learning more and being able to do
    more.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 与此相反，也存在全栈开发者，这意味着处理前端和后端编码的网页开发者。我认为现在说有更多全栈开发者而不是专业开发者是合理的，而且确实对于全栈开发者来说，工作机会似乎也更多。然而，显然这需要学习更多并且能够做更多。
- en: In the next chapter, I’m going to go into a bit more detail about these roles,
    especially the full stack developer role, but these descriptions are the broad
    strokes, so to speak.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将更详细地介绍这些角色，特别是全栈开发者角色，但这些描述只是大致的轮廓，可以这么说。
- en: Another way to classify web developers
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另一种对网页开发者进行分类的方法
- en: Aside from the frontend versus backend versus full stack classifications, the
    other thing that tends to divide web developers is whether you’re a full-time
    employee somewhere, or a member of the “gig economy.”
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前端与后端以及全栈的分类之外，另一个往往将网页开发者区分开来的因素是，你是某个地方的全职员工，还是“零工经济”的一员。
- en: 'Being a full-time employee means what it means in any other job: you work for
    someone, probably 40 hours a week or so generally. You’ll be at the whim of others,
    and your client, your stakeholder, is essentially your boss. They’ll tell you
    what to build, and you certainly will have input, but it’s ultimately up to them
    what gets done, and to a certain extent, how it gets done.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 成为全职员工意味着在其他任何工作中都意味着的那样：你为某人工作，通常每周大约40小时。你将受他人摆布，你的客户、利益相关者本质上就是你的老板。他们会告诉你要建造什么，你当然会有意见，但最终由他们决定做什么，以及如何完成，这在一定程度上取决于他们。
- en: Being full-time has some clear benefits. For one thing, it’s steady work. You
    know you’re getting a paycheck every week or two, and the odds are you’ll be salaried
    so that income will be consistent. Benefits such as health insurance tend to be
    handled by the company (which can be a negative too, depending on what they offer,
    but at least you’ll have the option without having to go out and get it yourself).
    Things such as 401Ks, bonuses, and profit-sharing may be part of your total compensation
    package as well.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 成为全职员工有一些明显的优势。首先，工作稳定。你知道你每周或每两周都会收到工资，而且你很可能会拿薪水，这样收入就会保持稳定。像医疗保险这样的福利通常由公司处理（这也可以是负面的，取决于他们提供的内容，但至少你会有选择，而无需自己出去获取）。像401K计划、奖金和利润分享可能也是你总薪酬的一部分。
- en: 'The other career path is being a consultant, contractor, or freelancer, which
    are all more or less the same thing: you work for someone for a set-length engagement,
    and then you move on to another job. This path is appealing to many people because
    it means more freedom, as well as exposure to more technologies and a more diverse
    slate of work. Some people find this extremely stimulating and rewarding. There
    is also – generally speaking – more opportunity for higher pay because you can
    set your own rates, and if someone is willing to pay that rate, then it might
    be a lot more than you could get at a regular full-time job.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 另一条职业道路是成为一名顾问、承包商或自由职业者，这些都或多或少是同一回事：你为某个人工作一段固定的时间，然后转到另一份工作。这条道路对许多人来说很有吸引力，因为它意味着更多的自由，以及接触到更多技术和更多样化的工作。有些人发现这非常刺激和有回报。一般来说，由于你可以设定自己的收费标准，如果有人愿意支付这个价格，那么这可能会比你在一个全职工作中能得到的要多得多。
- en: But there are also negatives to be aware of. Remember when I mentioned health
    insurance? Well, that’ll be your problem; you’ll have to go out, find insurance
    that works for you, and purchase it. You’ll need to worry about paying that bill
    every month rather than it just coming off the top of your regular paycheck in
    a full-time job. Also, taxes are something you’ll have to account for and pay
    yourself. Independent work such as this can also be more frustrating than a regular
    gig because clients will sometimes treat contractors a little less nicely than
    their regular employees (this obviously depends on the client – some are absolutely
    fantastic and treat you practically like family, so long as you’re doing the job
    well for them!).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 但也有需要注意的负面因素。记得我提到过医疗保险吗？嗯，那将是你的问题；你必须出去，找到适合你的保险，并购买它。你需要担心每个月支付账单，而不是像全职工作那样直接从你的工资中扣除。此外，你还得自己处理和支付税款。这种独立工作可能比常规工作更令人沮丧，因为客户有时会对待承包商不如对待他们的正式员工那么友好（这显然取决于客户——有些客户绝对出色，只要你为他们做好工作，就会几乎像对待家人一样对待你！）。
- en: Ultimately, which path you choose, in terms of regular full-time employment
    or a freelance approach, will be entirely up to you. You have to look at the pluses
    and minuses and decide what’s important to you. And note that whichever way you
    go, you can still choose to specialize in frontend or backend or to be a full
    stack developer (though if you decide to be a specialized freelancer then that’s
    going to limit your opportunities even more than if you do that with a full-time
    job, so you might want to consider that too).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，你选择哪条道路，无论是常规的全职工作还是自由职业方式，完全取决于你。你必须权衡利弊，并决定对你来说什么才是最重要的。注意，无论你选择哪种方式，你仍然可以选择专注于前端或后端，或者成为一名全栈开发人员（尽管如果你决定成为一名专业自由职业者，这可能会比全职工作限制你的机会更多，所以你可能也需要考虑这一点）。
- en: Knowing the types of web developers there are and how we classify web developer
    jobs is helpful for sure, since it allows you to tailor your learning to the topics
    that are critical to the role that you’re interested in. With that in mind, let’s
    talk a little about some other ways, besides self-guided learning, that you might
    employ to meet your learning goals.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 了解有哪些类型的网络开发人员以及我们如何对网络开发人员的工作进行分类，这对确定无疑是有帮助的，因为它允许你根据你感兴趣的角色调整你的学习内容。考虑到这一点，让我们谈谈除了自学之外，你可能采取的其他一些方法来达到你的学习目标。
- en: Learning with, and from, others
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与他人一起学习，并从中学习
- en: I’ve mentioned the notion of self-guided learning a few times, at least the
    basic concept of it. It’s not possible to learn enough on your own in all fields
    to be able to get a job, but this is one field where that’s definitely possible,
    and even necessary over time since you’ll never be able to stop learning completely.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经多次提到过自学这个概念，至少是它的基本概念。在所有领域，仅靠自学是不足以找到工作的，但这是一个肯定可以，甚至随着时间的推移是必要的领域，因为你永远无法完全停止学习。
- en: But in this section, I want to point out that it’s not the only option available
    to you. You’ll need to figure out what your own personal learning style is because
    not everyone is able to effectively learn the same way. Some people can read a
    book such as this and get everything they need from it. Others can watch a bunch
    of videos on YouTube and be all the better for it. And some people *need* to be
    in a classroom environment, and they *must* have a person they can interact with
    and question along the way. All of these are valid learning styles, and you should
    never be ashamed of your own learning style. Instead, once you understand what
    it is, embrace it and look for options that fit it to make the most effective
    use of your learning time.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 但在本节中，我想指出这并不是你唯一的选择。你需要弄清楚自己的个人学习风格，因为并不是每个人都能以相同的方式有效地学习。有些人可以阅读这本书，从中获得他们所需的一切。其他人可以观看YouTube上的大量视频，从中受益匪浅。还有一些人*需要*在教室环境中学习，他们*必须*有可以互动和提问的人。所有这些都是有效的学习方式，你永远不应该为自己的学习风格感到羞愧。相反，一旦你了解了它，就接受它，寻找适合它的选项，以最大限度地有效利用你的学习时间。
- en: But if you determine that self-guided learning, in whatever form that takes,
    isn’t what’s best for you, here are a few more options you can consider, aside
    from formal schooling.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你确定自学——无论采取何种形式——不是最适合你的，那么除了正规教育之外，这里还有一些你可以考虑的更多选项。
- en: Boot camps
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练营
- en: Aside from the obvious option of college, there are other learning opportunities
    available to people these days, probably the most well-known being boot camps.
    A boot camp is essentially a relatively short – as compared to college – and very
    intensive class or series of classes. They tend to last 3-6 months, though can
    be shorter or longer. The goal of a boot camp is to teach you things very quickly
    to get you ready for entry into a career as quickly as possible. These are good
    choices for some people, though probably not everyone.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 除了大学这种明显的选项之外，现在还有其他的学习机会可供人们选择，其中最著名的就是训练营。训练营本质上是一种相对较短——与大学相比——但非常密集的课程或一系列课程。它们通常持续3-6个月，但可能更短或更长。训练营的目标是快速教授你所需的知识，以便你能够尽可能快地进入职业生涯。这些对于某些人来说是个不错的选择，尽管可能不是每个人。
- en: '![Figure 1.9: A boot camp, one where a drill sergeant won’t be constantly yelling
    at you!](img/B18315_01_9.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![图1.9：一个训练营，一个不会一直对你大喊大叫的军士长！](img/B18315_01_9.jpg)'
- en: 'Figure 1.9: A boot camp, one where a drill sergeant won’t be constantly yelling
    at you!'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9：一个训练营，一个不会一直对你大喊大叫的军士长！
- en: For one thing, boot camps tend to be best for people who already have some degree
    of technical know-how. While not impossible, it would be very difficult to go
    from essentially zero technical knowledge to knowing enough to find a job in this
    field from just a boot camp. But, if you already have some knowledge, a boot camp
    can build upon that foundation quickly in an effective way.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，训练营通常最适合那些已经有一定技术知识的人。虽然不是不可能，但要从几乎零技术知识直接通过训练营学习到足以在这个领域找到工作的知识是非常困难的。但是，如果你已经有一些知识，训练营可以快速有效地在此基础上建立。
- en: 'Boot camps, however, are not free. Their cost can vary a lot, from several
    hundred dollars to many thousands of dollars. That’s one of the pluses of self-guided
    learning: while there are many paid options, there are also a ton of good free
    ones. Still, having someone guide you and having someone whom you can ask questions
    during your learning is a benefit of a boot camp.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，训练营并不是免费的。它们的费用可能相差很大，从几百美元到几千美元不等。这就是自学的一个优点：虽然有很多付费选项，但也有大量的免费资源。尽管如此，有一个人引导你，有一个人在你学习过程中可以提问，这也是训练营的一个好处。
- en: Boot camps are also viable for developers who are already working. You may have
    to shift gears – perhaps from frontend to backend, as an example – and get up
    to speed quickly. Boot camps could be ideal for that, especially if your current
    employer is willing to foot the bill.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 对于已经工作的开发者来说，训练营也是一个可行的选择。你可能需要转换方向——比如从前端转向后端——并迅速提升技能。训练营对于这种情况来说可能非常理想，尤其是如果你的当前雇主愿意承担费用的话。
- en: As you might guess, the quality of boot camps varies. If you get into a good
    one, you’ll definitely get your money’s worth and learn a lot quickly. But there’s
    a chance the one you pick won’t be very good and will only give you a very surface-level
    understanding. This might not be a major problem if you’re already a developer
    and are just learning a new skill (though it’s still not ideal when you’re paying
    for it), but it’s a bigger risk for someone who expects to find gainful first-time
    employment out of a boot camp. So, before you sign up for one, make sure you do
    your research. Read as many reviews as you can, and try to find people who have
    been through it to get a direct opinion of it. Boot camps have value, but they
    aren’t the be-all and end-all either.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所料，训练营的质量参差不齐。如果你进入了一个好的训练营，你肯定会物有所值，并且能快速学到很多东西。但有可能你选择的训练营并不好，只会给你一个非常表面的理解。如果你已经是一名开发者，只是在学习一项新技能（尽管当你为此付费时这仍然不是理想的情况），这可能不是一个大问题，但对于那些期望从训练营中找到有偿首次就业的人来说，这是一个更大的风险。所以，在你报名之前，一定要做好研究。尽可能多地阅读评论，并尝试找到经历过的人，以获得直接的看法。训练营有价值，但它们也不是万能的。
- en: The personal touch
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 个性化接触
- en: Another approach you can take is to find a mentor.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以采取的另一种方法是寻找一位导师。
- en: In the early 80s, when I began learning Assembly language (which is a particularly
    unpleasant language to program in) for the old Commodore 64 computer, I had books
    and magazine articles to read, but it never felt like enough. I figured a lot
    of things out that way, but I was never able to do the more complex things I saw
    in video games and other programs of the day. That changed when I found an especially
    kind older kid who *was* able to do those things and took me under his wing. My
    learning accelerated exponentially almost overnight and before long, I was creating
    things that I’d thought I’d never be able to.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪80年代初，当我开始学习为老式的Commodore 64计算机编写的汇编语言（这是一种特别不愉快的编程语言）时，我有书籍和杂志文章可以阅读，但总觉得不够。我通过这种方式解决了很多问题，但我从未能够做到我在当时的视频游戏和其他程序中看到的那种更复杂的事情。当我找到一个特别善良的、能够做到这些事情的大孩子，并收我为徒时，这种情况发生了改变。我的学习几乎一夜之间呈指数级加速，不久之后，我开始创造出我以前认为永远不可能做到的事情。
- en: Finding a mentor these days is difficult, but not impossible. It takes getting
    into contact with people who know what you want to learn and approaching them,
    hoping someone will show the same kind of kindness that kid did for me. It’s a
    big ask, to be sure; we’re all busy as heck these days, and taking time out for
    someone else like that is no small thing. But now and again, you’ll meet someone
    willing to, and that can be a big boost.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在寻找导师很困难，但并非不可能。这需要你与那些知道你想要学习什么的人取得联系，并接近他们，希望有人会表现出像我之前遇到的那个孩子一样的善意。这确实是一个很大的请求；我们这些人都非常忙碌，为别人抽出时间不是一件小事。但偶尔，你会遇到愿意这样做的人，这可以是一个很大的帮助。
- en: 'How would you meet such people when you aren’t already in the field? Well,
    one way – something I’ll get into a bit more later – is meetups, or as we used
    to call them: user groups. There are websites that will give you a list of such
    things in your area, and they usually let anyone come to them. There, you’ll meet
    techies of all sorts and experience levels. If you’re an outgoing person, this
    is a great chance to meet them, get to know them, and maybe eventually ask someone
    to mentor you. Again, it’s not something you can *expect* of people – you certainly
    can’t get mad at anyone who says no – but some people simply enjoy the process
    of teaching others. It’s one of the main reasons I’ve written as many books as
    I have. If you can find someone with that mindset, then you’ve found yourself
    a good resource and you shouldn’t be shy about taking advantage of it.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 当你还没有进入该领域时，你将如何遇到这样的人呢？好吧，有一种方式——稍后我会更详细地介绍——那就是聚会，或者我们以前称之为：用户组。有一些网站会给你列出你所在地区的此类活动，并且他们通常允许任何人参加。在那里，你会遇到各种类型的技术人员和不同经验水平的人。如果你是一个外向的人，这是一个认识他们、了解他们，并最终可能请求某人成为你的导师的绝佳机会。再次强调，这不是你可以*期望*从别人那里得到的东西——你当然不能对任何说“不”的人发火——但有些人确实喜欢教授他人的过程。这也是我写了这么多本书的主要原因之一。如果你能找到具有这种心态的人，那么你就找到了一个很好的资源，你不必害羞地去利用它。
- en: On-the-job learning
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在职学习
- en: The final thing I’ll mention is on-the-job training. Web development isn’t like
    a trade field, where you can sometimes find entry-level positions as an apprentice
    and you’ll be taught the trade from scratch. There are sometimes web development
    internships along those lines, but they are fairly rare and generally for students
    coming out of school – besides that, entry-level jobs in software development
    where you aren’t expected to know anything up-front are virtually non-existent.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我要提到的最后一件事是在职培训。Web开发不像一个贸易领域，你有时可以找到作为学徒的入门级职位，你将从零开始学习这门手艺。有时会有一些与这些相关的Web开发实习，但它们相当罕见，通常是为刚从学校毕业的学生准备的——除此之外，软件开发中的入门级工作，你不需要事先知道任何东西，几乎是不存在的。
- en: Instead, you’ll be expected to know some stuff from day one. Of course, that
    isn’t to say that you have to know *everything* – to be sure, you will learn on
    the job as a matter of course – it’s just that you can’t go in without at least
    foundational knowledge.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你将从第一天开始就需要了解一些东西。当然，这并不是说你必须知道*所有*东西——当然，你作为一项日常工作当然会学到东西——只是你不能在没有至少基础知识的条件下进入。
- en: The bottom line to all of this, whether you’re considering boot camps, mentorships,
    or even internships if you can manage to find one, is to always take advantage
    of the knowledge of others any time you can. Listen to them, learn from them,
    and try and get as much benefit from their experience and expertise as you can.
    Other people can be a valuable resource in your learning journey outside of a
    classroom setting, so don’t miss the opportunity to avail yourself of folks when
    you can.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些的底线，无论你是在考虑训练营、导师制，甚至如果你能找到的话，实习，都要始终在你能够的时候利用他人的知识。倾听他们，向他们学习，并尽可能从他们的经验和专业知识中获得尽可能多的好处。在其他的学习旅程中，除了课堂设置之外，其他人可以成为宝贵的资源，所以不要错过利用他们的机会。
- en: Introducing the roadmap
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍路线图
- en: 'Finally, throughout this book, each chapter will begin with a diagram like
    what can be seen in *Figure 1**.10*:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，在这本书的每一章中，都将开始于一个像*图1.10*中可以看到的图表： '
- en: '![Figure 1.10: The roadmap](img/B18315_01_10.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图1.10：路线图](img/B18315_01_10.jpg)'
- en: 'Figure 1.10: The roadmap'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10：路线图
- en: As you can see, it doesn’t show much right now. What it does show is the central
    starting point – **Web Developer** – and the critical skill of **Logical Thinking**
    (on the left), perhaps the one true foundational ability a web developer needs.
    As we progress through the book, each square will be revealed, illustrating the
    key skills that go into being a web developer.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，目前它显示的并不多。它所显示的是中心起点——**Web开发者**——以及关键的技能**逻辑思维**（在左侧），这可能是Web开发者真正需要的基础能力。随着我们继续阅读本书，每个方块都将被揭示，展示成为Web开发者所需的关键技能。
- en: Note
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Although tangential, it may be worth noting that this type of diagram, which
    is usually called a mindmap or sometimes a creative radial diagram, is often seen
    when developing software of all types, including websites. It shows the relationship
    between parts of a larger concept, whether that concept is a web developer as
    it is here, a web page (where the center point might be the screen that a user
    sees when they first come to the site), or perhaps showing different components
    of a system and how they connect to each other. So, seeing it here and being able
    to understand it is in itself a useful skill to learn!
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然与主题有些偏离，但可能值得指出的是，这种类型的图表，通常被称为思维导图或有时称为创意径向图，在开发所有类型的软件时都经常看到，包括网站。它显示了更大概念各部分之间的关系，无论这个概念是像这里的Web开发者，还是一个网页（中心点可能是用户首次来到网站时看到的屏幕），或者可能是展示系统的不同组件以及它们如何相互连接。所以，在这里看到它并能够理解它本身就是一个有用的技能要学习！
- en: Summary
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you got a brief introduction to the field of web development.
    Here, you developed a mental picture of what the job entails, what skills are
    necessary, and what type of people are typically good at it.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你对Web开发领域进行了简要的介绍。在这里，你形成了一个关于这份工作包含什么、需要哪些技能以及通常哪些人擅长这份工作的心理图像。
- en: We talked about how to determine whether it’s right for you, including the fact
    that you like to solve puzzles since that is, to a large extent, what the job
    is all about! If you find that fun, as I do, then you’ll love the field!
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了如何确定它是否适合你，包括你喜欢单词谜，因为这在很大程度上就是这份工作的全部内容！如果你觉得这很有趣，就像我一样，那么你将热爱这个领域！
- en: We also started building the very lowest levels of a knowledge foundation that
    we can build upon going forward and learned how logical thinking is a key requirement,
    as is the ability to learn new things. You got your first look at some real code,
    and hopefully, you played with it in a real web browser and saw it in action.
    And while it wasn’t anything grandiose, I hope it at least started to get you
    excited about what’s to come.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还开始构建一个知识体系的基础，我们可以在此基础上继续前进，并学习了逻辑思维是一个关键要求，正如学习新事物的能力一样。你第一次看到了一些真正的代码，并且希望你在真实的网络浏览器中玩过它，看到了它的实际应用。虽然它并不宏伟，但我希望它至少让你对即将到来的内容感到兴奋。
- en: Plus, you caught a glimpse of a typical day in the life of a web developer and
    gained an understanding of the different types of web developers (and where those
    types overlap). Maybe you even started to consider what side of the frontend/backend
    divide you might prefer (though get ready, because from here on out, you’re going
    to get some experience with both!).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你瞥见了网络开发者典型的一天，并对不同类型的网络开发者（以及这些类型之间的重叠）有了了解。也许你甚至开始考虑你更倾向于前端/后端哪一边（尽管要准备好，因为从现在开始，你将体验到两者！）。
- en: In fact, in the next chapter, we’ll peer a bit deeper into the differences between
    frontend developers and backend developers, and the intersection of the two in
    the full-stack developer title. This is a topic worthy of further exploration
    – which I hope you find fun and mentally stimulating – and that’s exactly where
    we’re headed next!
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，在下一章中，我们将更深入地探讨前端开发者和后端开发者之间的差异，以及两者在全栈开发者这一职位中的交集。这是一个值得进一步探讨的话题——我希望你会觉得它既有趣又富有启发性——这正是我们接下来要走的路！
