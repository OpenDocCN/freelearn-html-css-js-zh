- en: Adding More Features to the Weather App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为天气应用添加更多功能
- en: Welcome to [Chapter 8](5fdf7617-7e2c-4ff4-a7eb-28033a281ad5.xhtml), *Adding
    More Features to the Weather App*. The goal of this chapter is to improve our
    simple weather app by adding more features to it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到 [第 8 章](5fdf7617-7e2c-4ff4-a7eb-28033a281ad5.xhtml)，*为天气应用添加更多功能*。本章的目标是通过添加更多功能来改进我们的简单天气应用。
- en: 'The topics we will cover include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖的主题包括：
- en: Adding `elm-mdl` to our app
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `elm-mdl` 添加到我们的应用中
- en: Converting the temperature display from Kelvin to Celsius
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将温度显示从开尔文转换为摄氏度
- en: Working with the Round module
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Round 模块
- en: 'After completing this chapter, you will:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章内容后，你将：
- en: Be able to use the Material Design library for Elm, `elm-mdl`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够使用 Elm 的 Material Design 库，`elm-mdl`
- en: Understand how the Round module works
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Round 模块的工作原理
- en: Importing Material and Round modules
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入 Material 和 Round 模块
- en: 'To start, let''s create a new folder, call it `chapter8`, point the console
    inside this newly-created folder, and run the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个新的文件夹，命名为 `chapter8`，将控制台指向这个新创建的文件夹，并运行以下命令：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once the app is prepared, simply copy all the code we had in `Main.elm` at the
    end of [Chapter 7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml), *Making a Weather
    App in Elm*, into this new `Main.elm`. This will be our starting point (rather
    than beginning with the boilerplate app, like we did in the last few chapters).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用准备就绪，只需将我们在 [第 7 章](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml) 的末尾所拥有的所有代码，即
    *在 Elm 中制作天气应用*，复制到这个新的 `Main.elm` 文件中。这将是我们起点（而不是像在上一章中那样从样板应用开始）。
- en: 'However, there is a slight issue that we need to resolve. Currently, our new
    app will not compile. Instead, we will get the following warning:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们需要解决一个轻微的问题。目前，我们的新应用将无法编译。相反，我们将收到以下警告：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The issue stems from the fact that we did not update the Elm packages. Let''s
    quickly fix that by running the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 问题源于我们没有更新 Elm 包。让我们快速解决这个问题，运行以下命令：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After we approve the upgrades, we''ll be greeted with the following message
    output to the console:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们批准升级后，控制台将显示以下消息：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now we can start serving our Elm app and watch for changes as we update our
    app. To start serving the app, let''s point our console to the `improved-weather-app-ch8`
    folder and run the following command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以开始为我们 Elm 应用提供服务，并在更新应用时监视变化。要开始提供服务，让我们将控制台指向 `improved-weather-app-ch8`
    文件夹，并运行以下命令：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We will begin adding improvements to our app by using the `elm-mdl` module.
    The preview of this module in action is available at [https://debois.github.io/elm-mdl/](https://debois.github.io/elm-mdl/)
    and the official documentation can be found at [https://github.com/debois/elm-mdl](https://github.com/debois/elm-mdl).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过使用 `elm-mdl` 模块开始对我们应用进行改进。该模块的预览效果可在 [https://debois.github.io/elm-mdl/](https://debois.github.io/elm-mdl/)
    查看，官方文档可在 [https://github.com/debois/elm-mdl](https://github.com/debois/elm-mdl)
    找到。
- en: 'To start off, let''s import all the dependencies we will be using. Open `Main.elm`,
    and locate the beginning section of the code, where the imports are:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们导入我们将要使用的所有依赖项。打开 `Main.elm`，找到代码的开始部分，其中包含导入：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'At the bottom of the imports, we will be importing `elm-mdl` module dependencies,
    and then, at the very bottom, the `Round` package:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入的底部，我们将导入 `elm-mdl` 模块依赖项，然后，在最底部，导入 `Round` 包：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The official `elm-mdl` package is also listed on the elm packages website, at [http://package.elm-lang.org/packages/debois/elm-mdl/latest](http://package.elm-lang.org/packages/debois/elm-mdl/latest),
    and the `Round` package is located at [http://package.elm-lang.org/packages/myrho/elm-round/latest](http://package.elm-lang.org/packages/myrho/elm-round/latest).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的 `elm-mdl` 包也列在 Elm 包网站上，网址为 [http://package.elm-lang.org/packages/debois/elm-mdl/latest](http://package.elm-lang.org/packages/debois/elm-mdl/latest)，而
    `Round` 包位于 [http://package.elm-lang.org/packages/myrho/elm-round/latest](http://package.elm-lang.org/packages/myrho/elm-round/latest)。
- en: 'Unfortunately, at this point our app is again not compiling. The reason is
    similar to the issue we fixed a bit earlier: we need to install the missing packages.
    We can verify that that is the case by looking at the compiler''s error message:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在这个阶段我们的应用再次无法编译。原因是类似的：我们需要安装缺失的包。我们可以通过查看编译器的错误消息来验证这一点：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To fix the issue, let''s run the following command in our console:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，让我们在控制台运行以下命令：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Next, let's try running our app again, with `elm-app start`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们再次尝试运行我们的应用，使用 `elm-app start`。
- en: 'Again, our app does not compile; this time, we are missing the `Round` module.
    Let''s add it with the following command in the console:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们的应用无法编译；这次，我们缺少 `Round` 模块。让我们在控制台中使用以下命令添加它：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After successfully installing the dependencies needed to run our app, we can
    now see it successfully compiling and being served to the browser by running `elm-app
    start` once again. Right now, the app looks exactly as it did at the end of [Chapter
    7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml), *Making a Weather App in Elm*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功安装运行我们的应用所需的依赖项后，我们现在可以通过再次运行 `elm-app start` 来看到它成功编译并被浏览器提供服务。目前，应用看起来与
    [第 7 章](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml) 的末尾，*在 Elm 中制作天气应用*完全相同。
- en: Adding elm-mdl to our Model
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 elm-mdl 添加到我们的 Model 中
- en: While our main function will remain unchanged—meaning it will still use `Html.program`
    in exactly the same way as in the previous chapter, we will have to add changes
    to our `Model` type alias.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的主要功能将保持不变——这意味着它仍然会像前一章一样使用 `Html.program`，但我们不得不对我们的 `Model` 类型别名进行修改。
- en: 'In [Chapter 7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml), *Making a Weather
    App in Elm*, our `Model` looked as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 7 章](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml) 中，*在 Elm 中制作天气应用*，我们的
    `Model` 看起来如下：
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The only thing we need to do is add another entry to the `Model`''s record,
    as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的只是向 `Model` 的记录中添加另一个条目，如下所示：
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This new entry, `mdl : Material.Model`, is the type of data that holds everything
    we need to display the `mdl` element. Our `TemperatureInfo` type alias will remain
    unchanged.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '这个新条目 `mdl : Material.Model` 是包含显示 `mdl` 元素所需所有数据的类型。我们的 `TemperatureInfo`
    类型别名将保持不变。'
- en: Updating the init function
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新 init 函数
- en: 'We will need to update the `init` function so that we take into account the
    initial value of `Material.model`. The `init` function we ended up with in [Chapter
    7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml), *Making a Weather App in Elm*,
    looked as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更新 `init` 函数，以便考虑到 `Material.model` 的初始值。我们在 [第 7 章](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml)
    的 *在 Elm 中制作天气应用* 中得到的 `init` 函数如下所示：
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The update is simple, and it will reflect the change we made to the `Model`
    type alias:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 更新很简单，它将反映我们对 `Model` 类型别名所做的更改：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: With this update, we have sorted out the initial values that our weather app
    needs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这次更新，我们已经整理出了我们的天气应用所需的初始值。
- en: Updating the Msg union type and the update function
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新 Msg 联合类型和 update 函数
- en: 'In order to reflect the improvements we made with the introduction of the `elm-mdl`
    package, we need to add another type constructor to our `Msg` union type. The
    `Msg` union type will look exactly as it did in [Chapter 7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml),
    *Making a Weather App in Elm*, save for the new `Mdl` type constructor, which
    we''ll simply append to the end of the union type, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了反映我们通过引入 `elm-mdl` 包所做出的改进，我们需要向我们的 `Msg` 联合类型添加另一个类型构造函数。`Msg` 联合类型将看起来与
    [第 7 章](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml) 中完全相同，*在 Elm 中制作天气应用*，除了新的
    `Mdl` 类型构造函数，我们将简单地将其附加到联合类型的末尾，如下所示：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `Mdl` type constructor is simply the message that will be generated by `mdl`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mdl` 类型构造函数是 `mdl` 将生成的消息。'
- en: 'Let''s now add improvements to our `update` function, which looked like this
    at the end of [Chapter 7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml), *Making
    a Weather App in Elm*:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在改进我们的 `update` 函数，它在 [第 7 章](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml)
    的末尾，*在 Elm 中制作天气应用*看起来是这样的：
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As we can see in the preceding code snippet, we pattern-matched for `GetTemp`,
    `NewTemp`, and `CityInput`, which was explained in [Chapter 7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml),
    *Making a Weather App in Elm*. The change that we need to make to the `update`
    function at this point has to do with pattern matching for the new `Msg` type
    constructor, namely, `Mdl`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码片段所示，我们为 `GetTemp`、`NewTemp` 和 `CityInput` 进行了模式匹配，这在 [第 7 章](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml)
    中有解释，*在 Elm 中制作天气应用*。我们现在需要修改 `update` 函数以进行对新的 `Msg` 类型构造函数 `Mdl` 的模式匹配。
- en: 'Practically, this means that the `update` function will remain exactly as it
    was, with just one simple addition: `Mdl` branch for our `case-of` expression:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这意味着 `update` 函数将保持完全不变，只是增加了一个简单的修改：为我们的 `case-of` 表达式添加 `Mdl` 分支：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the next section, we will add updates to our `view` function.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将添加对 `view` 函数的更新。
- en: Updating the view function
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新 view 函数
- en: 'The `view` function at the end of [Chapter 7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml),
    *Making a Weather App in Elm*, looked as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml)《在Elm中制作天气应用》结尾的`view`函数看起来如下：'
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Since we basically had no styles in the preceding code, the updated `view`
    function might seem a bit daunting at first glance:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在前面的代码中我们基本上没有使用样式，因此更新后的`view`函数在第一眼看起来可能有些令人畏惧：
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Check the look of your app in the browser, since at this point we are successfully
    applying `elm-mdl` to it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中检查您应用程序的外观，因为到目前为止，我们已经成功地将`elm-mdl`应用到它上面。
- en: Luckily, the preceding code is pretty straightforward once you understand how
    it works. Let's go through it step by step. Since the code in [Chapter 7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml),
    *Making a Weather App in Elm*, did not have any styles, the functions we used
    were easy enough to understand from the get-go. We simply had an `input`, a `button`,
    and four `divs` containing text nodes. As we did not use any styles, we used `br`
    functions to visually separate the `input`, the `button`, and the four `divs`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，一旦你理解了它是如何工作的，前面的代码就相当直接了。让我们一步一步地来看。由于[第7章](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml)，《在Elm中制作天气应用》，没有使用任何样式，我们使用的函数从一开始就很容易理解。我们只有一个`input`，一个`button`，以及四个包含文本节点的`div`。由于我们没有使用任何样式，我们使用了`br`函数来在视觉上分隔`input`、`button`和四个`div`。
- en: The improvements in [Chapter 8](5fdf7617-7e2c-4ff4-a7eb-28033a281ad5.xhtml),
    *Adding More Features to the Weather App*, involve adding `mdl` specific elements,
    including `mdl` specific `Textfield`, `Button`, and `Card`. Let's look at `Textfield`
    a bit closer.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](5fdf7617-7e2c-4ff4-a7eb-28033a281ad5.xhtml)《向天气应用添加更多功能》中的改进包括添加`mdl`特定的元素，包括`mdl`特定的`Textfield`、`Button`和`Card`。让我们更仔细地看看`Textfield`。'
- en: Understanding the Textfield function
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解`Textfield`函数
- en: 'The code for our `Textfield` is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们`Textfield`的代码如下：
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We start off with `Textfield.render Mdl`, which means that its message type
    is `Mdl` and that it simply renders the `Textfield` component. Every `mdl` component
    that we use needs to have a unique ID, simply marked with a number. In the preceding
    example, we are assigning a unique ID to `Textfield` using a zero: `[ 0 ]`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从`Textfield.render Mdl`开始，这意味着它的消息类型是`Mdl`，它只是简单地渲染`Textfield`组件。我们使用的每个`mdl`组件都需要有一个唯一的ID，只需用一个数字标记。在先前的例子中，我们使用零为`Textfield`分配了一个唯一的ID：`[
    0 ]`。
- en: Next, we specify the part of the model that this will apply to, which is `model.mdl`. In
    the second list, we provide the specifics on the appearance we want our `Textfield`
    to have.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们指定这个更新将应用到模型的哪个部分，即`model.mdl`。在第二个列表中，我们提供了我们希望`Textfield`具有的具体外观。
- en: All the options that have to do with appearance for our `Textfield` component
    are available at the following URL, [http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Textfield](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Textfield).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们`Textfield`组件有关外观的所有选项都可以在以下URL找到，[http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Textfield](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Textfield)。
- en: 'To understand how the appearance changes in the second list provided to our
    `Textfield`, we can simply turn off some of the members of the list, like so:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解提供给我们的`Textfield`的第二列表中外观如何变化，我们可以简单地关闭列表中的某些成员，如下所示：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: By commenting out `Textfield.label`, `Textfield.floatingLabel`, and `Textfield.text_`,
    we effectively turned them off, leaving only the bare minimum of the functionality
    needed for our app to still work. If we were to comment out either `Textfield.value
    model.city`, or `Options.onInput CityInput`, our app would stop working, so in
    the preceding case, we had to keep these two, while we were able to comment out
    the rest.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过注释掉`Textfield.label`、`Textfield.floatingLabel`和`Textfield.text_`，我们实际上关闭了它们，只留下了我们应用程序仍然可以工作的功能所需的最小部分。如果我们注释掉`Textfield.value
    model.city`或`Options.onInput CityInput`中的任何一个，我们的应用程序将停止工作，所以在先前的案例中，我们必须保留这两个，而我们可以注释掉其余的。
- en: The reason our app would stop working is that we would break the model that
    the update function expects from the view.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序会停止工作的原因是，我们会破坏更新函数期望从视图接收的模型。
- en: 'As mentioned earlier in this section, we can refer to the *Options*, *Appearance*,
    and *Html attributes* sections of the official documentation for `Textfield` in
    order to get different results and styling. For example, we could set the `maxlength` of
    our `Textfield` to, say, five characters. In that case, our `Textfield` will need
    to look as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如本节前面所述，我们可以参考官方文档中 `Textfield` 的 *选项*、*外观* 和 *HTML 属性* 部分，以获取不同的结果和样式。例如，我们可以将
    `Textfield` 的 `maxlength` 设置为五个字符。在这种情况下，我们的 `Textfield` 需要看起来如下所示：
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now, we will be able to type a city whose name is up to five characters long.
    For example, we can still look for weather information for Paris, but we would
    not be able to look up London, since we would not be able to type all six characters
    of that city's name.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将能够输入一个最多五个字符的城市名称。例如，我们仍然可以查找巴黎的天气信息，但我们将无法查找伦敦，因为我们无法输入该城市名称的所有六个字符。
- en: Next, we'll go through the `Button` function.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过 `Button` 函数。
- en: Understanding the Button function
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 `Button` 函数
- en: 'Looking at the `Button` after the `Textfield`, we can see the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 查看位于 `Textfield` 后面的 `Button`，我们可以看到以下代码：
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Armed with our understanding of how `Textfield` works, we can figure out the
    preceding section of our `view` function almost at a glance: our `Button` gets
    rendered with an `Mdl` message. We give our `Button` an id of `1`, and we use
    the appearance options of `Button.raised`, `Button.colored`, and `Button.ripple`.
    We top it off by sending the `GetTemp` message, by using elm-mdl''s `Options.onClick`.
    There is also a third list, which reads:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在理解了 `Textfield` 的工作原理之后，我们可以几乎一眼就看出 `view` 函数前面的部分：我们的 `Button` 使用 `Mdl` 消息进行渲染。我们给
    `Button` 分配一个 `id` 为 `1`，并使用 `Button.raised`、`Button.colored` 和 `Button.ripple`
    的外观选项。我们通过使用 elm-mdl 的 `Options.onClick` 发送 `GetTemp` 消息来完成它。还有一个第三个列表，内容如下：
- en: '[PRE23]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Why did we use an empty list in `Textfield`, if we were not going to use it?
    The reason is, of course, to satisfy Elm's static type system. For example, if
    we were to erase the last, empty list from the `Textfield` function, the compiler
    would throw an error. Next, we'll look at the `Card` function.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们本来就不打算使用它，为什么在 `Textfield` 中使用一个空列表？原因当然是满足 Elm 的静态类型系统。例如，如果我们从 `Textfield`
    函数中删除最后一个空列表，编译器将抛出一个错误。接下来，我们将查看 `Card` 函数。
- en: Understanding the Card function
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 `Card` 函数
- en: As a component, `Card` is relatively complex, as it is made up of several subsections,
    since its role is to display related information in a coherent way. The official
    documentation for the `Card` function is available at the following URL, [http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Card](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Card).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 作为组件，`Card` 相对复杂，因为它由几个子部分组成，因为它的作用是以连贯的方式显示相关信息。`Card` 函数的官方文档可在以下网址找到，[http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Card](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Card)。
- en: Understanding the use of Card.view
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 `Card.view` 的用法
- en: 'Let''s look at the first several lines where we are using the `Card` function:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看使用 `Card` 函数的前几行：
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: First thing to note, the `br` function is completely redundant here, so we can
    simply erase it without any changes in the functionality or layout of our weather
    app. We begin the next line with `Card.view`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是，这里的 `br` 函数是完全多余的，因此我们可以简单地将其删除，而不会对天气应用的函数性或布局产生任何影响。我们接下来的一行以 `Card.view`
    开始。
- en: As the official documentation reads, the `Card.view` function is used to construct
    a card. While `Textfield` and `Button` were constructed using the `render` function,
    here we are using `view`. We add additional styling using `Options.css`, followed
    with two `Strings`, the former setting the property of our CSS, and the latter
    setting the value for the property.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 正如官方文档所述，`Card.view` 函数用于构建卡片。虽然 `Textfield` 和 `Button` 是使用 `render` 函数构建的，但在这里我们使用的是
    `view`。我们使用 `Options.css` 添加额外的样式，后面跟着两个字符串，前者设置 CSS 属性，后者设置属性的值。
- en: '`Material.Elevation` is used to give the shadow effect to our `mdl` components.
    For a full description of available `Elevations`, refer to the official documentation
    at [http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Elevation](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Elevation). 
    For example, to get the maximum possible shadow using `Elevation`, we can change
    the line that reads `Elevation.e8` to a new value, `Elevation.e24`. Similar to
    shadow, we can set the time it takes for our transition, in milliseconds. We set
    our transition to a quarter of a second with `Elevation.transition 250`.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`Material.Elevation`用于给我们的`mdl`组件添加阴影效果。有关可用的`Elevations`的完整描述，请参阅官方文档，该文档位于[http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Elevation](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Elevation)。例如，要使用`Elevation`获取最大可能的阴影，我们可以将读取`Elevation.e8`的行更改为新值`Elevation.e24`。与阴影类似，我们可以设置我们的过渡所需的时间，以毫秒为单位。我们使用`Elevation.transition
    250`将过渡设置为四分之一秒。'
- en: 'The next line sets the color for our card:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行设置了卡片的颜色：
- en: '[PRE25]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The official documentation of the `elm-mdl` package that deals with `Material.Color` is
    available at [http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Color](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Color).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 处理`Material.Color`的`elm-mdl`包的官方文档位于[http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Color](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Color)。
- en: Rendering the Card.title content block
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染`Card.title`内容块
- en: 'Next, we render a `Card.title`, as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们渲染一个`Card.title`，如下所示：
- en: '[PRE26]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Before going through each of the preceding lines, it is important to note that
    each `Card ` in `elm-mdl` consists of content blocks. Content blocks can be `Card.title`,
    `Card.media`, `Card.text`, and `Card.actions`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在逐行分析前面的代码之前，重要的是要注意`elm-mdl`中的每个`Card`都由内容块组成。内容块可以是`Card.title`、`Card.media`、`Card.text`和`Card.actions`。
- en: 'The type signature for the `Card.title` content block is as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`Card.title`内容块的类型签名如下：'
- en: '[PRE27]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This means that each title content block takes two `Lists` and returns a `Block`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着每个标题内容块都包含两个`列表`并返回一个`Block`。
- en: All the other content blocks (`media`, `text`, and `actions`) have identical
    type signatures, save for the name of the content block function.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他内容块（`media`、`text`和`actions`）具有相同的类型签名，除了内容块函数的名称之外。
- en: 'Since we know that the `title` content block needs to have two `Lists`, and
    that the first `List` needs to specify styles, it''s now easy to understand what
    this line of code does:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道`title`内容块需要有两个`列表`，并且第一个`列表`需要指定样式，因此现在很容易理解这一行代码的作用：
- en: '[PRE28]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The preceding line of code simply specifies the style to be used on our `Card.title`.
    If we wanted to, we could, for example, add another style here:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 上一行代码只是指定了要在我们的`Card.title`上使用的样式。如果我们想的话，例如，我们可以在这里添加另一个样式：
- en: '[PRE29]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Obviously, with the preceding change, our card will get a left padding of 100
    pixels. The second `List` inside our `Card.title` content block specifies the
    `Html`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，由于前面的更改，我们的卡片将获得100像素的左内边距。`Card.title`内容块内部的第二个`列表`指定了`Html`：
- en: '[PRE30]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the first line, we can see `Card.head` being used. The official documentation
    for `Card.head` is available at [http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Card#head](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Card#head). The
    `Card.head` function behaves as we expect—it takes two `Lists` and returns an
    `Html a`. The first `List` lets us specify `Style`, and the second one lets us
    specify `Html`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们可以看到使用了`Card.head`。`Card.head`的官方文档位于[http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Card#head](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Card#head)。`Card.head`函数的行为正如我们所期望的那样——它接受两个`列表`并返回一个`Html
    a`。第一个`列表`允许我们指定`Style`，第二个`列表`允许我们指定`Html`。
- en: 'Looking at the official documentation for `Material.Options`, available at [http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Options](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Options),
    we can navigate to the *Elements* section, which begins with `div`. As the official
    documentation reads, `div` is a:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`Material.Options`的官方文档，该文档位于[http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Options](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Options)，我们可以导航到`Elements`部分，它以`div`开始。正如官方文档所述，`div`是一个：
- en: '"Convenience function for the ultra-common case of apply elm-mdl styling to
    a div element."'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '"为将elm-mdl样式应用于div元素的超常见情况提供的便利函数。"'
- en: Inside `Options.div`, we specify the styles in the first `List`, then `Html`
    with `Options.span` in the second `List`. Following the same pattern, the `Options.span`
    itself holds two `Lists`. Inside the first `List` we specify the styles to use
    by calling `Material.Typography` and `Material.Color`—all together three separate
    styles. Then, in the second `List`, expectedly, we render a `text` node.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Options.div` 中，我们首先在第一个 `List` 中指定样式，然后是第二个 `List` 中的 `Html` 和 `Options.span`。按照相同的模式，`Options.span`
    本身包含两个 `List`。在第一个 `List` 中，我们通过调用 `Material.Typography` 和 `Material.Color` 来指定要使用的样式——总共三种不同的样式。然后，在第二个
    `List` 中，如预期的那样，我们渲染一个 `text` 节点。
- en: The contents of the `text` node, inside parentheses, might look a bit complicated,
    so let's pick it apart. To begin with, we can see that we are calling `Round.round`.
    Let's refer to the official documentation for more information on this package. To
    do that, point your browser to the following URL, [http://package.elm-lang.org/packages/myrho/elm-round/latest/Round](http://package.elm-lang.org/packages/myrho/elm-round/latest/Round).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`text` 节点内的内容，括号中的内容可能看起来有点复杂，所以让我们来分析一下。首先，我们可以看到我们在调用 `Round.round`。让我们参考官方文档来获取更多关于这个包的信息。为此，将您的浏览器指向以下
    URL，[http://package.elm-lang.org/packages/myrho/elm-round/latest/Round](http://package.elm-lang.org/packages/myrho/elm-round/latest/Round)。'
- en: As it says on the official page of the `Round` package, it allows us to convert
    a `Float` to a `String`, with the additional benefit of setting the number of
    digits after the decimal point. It also lets us specify how we want to round the
    rest of the digits on our `Float`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如 `Round` 包的官方页面所述，它允许我们将 `Float` 转换为 `String`，并且额外的好处是可以设置小数点后数字的位数。它还允许我们指定如何对
    `Float` 中的其余数字进行四舍五入。
- en: 'The first example we see on the official page is this one:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方页面上我们看到的第一例子是：
- en: '[PRE31]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The preceding code shows that `round` takes an `Int` and a `Float`, and returns
    a `String`. You can find the exact type signature at the following link, [http://package.elm-lang.org/packages/myrho/elm-round/latest/Round#round](http://package.elm-lang.org/packages/myrho/elm-round/latest/Round#round).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码显示 `round` 接收一个 `Int` 和一个 `Float`，并返回一个 `String`。您可以在以下链接中找到确切的类型签名，[http://package.elm-lang.org/packages/myrho/elm-round/latest/Round#round](http://package.elm-lang.org/packages/myrho/elm-round/latest/Round#round)。
- en: 'In our case, we have this code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们有以下代码：
- en: '[PRE32]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Looking at the `temperatureInfo` type alias, we can see that `temperatureInfo.temperature`
    is a `Float`. So, we are indeed taking an `Int` and a `Float`, and returning a
    `String`. One caveat here is the concatenated degree symbol, which, although a
    `String`, gets concatenated with a `Float`, all thanks to `Round.round`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 查看类型别名 `temperatureInfo`，我们可以看到 `temperatureInfo.temperature` 是一个 `Float`。因此，我们确实是在接收一个
    `Int` 和一个 `Float`，然后返回一个 `String`。这里有一个需要注意的地方，就是拼接的温度单位符号，虽然它是一个 `String`，但它会与一个
    `Float` 拼接，这都要归功于 `Round.round` 函数。
- en: 'The value of the first parameter is zero, meaning we do not want to have any
    decimal points when displaying the temperature. We can change that to, for example,
    one digit after the decimal point, by simply replacing the zero, like so:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数的值是零，这意味着我们不想在显示温度时有任何小数点。我们可以将其更改为，例如，小数点后一位数字，只需简单地替换零，如下所示：
- en: '[PRE33]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Next, we'll look at the `Card.actions` code.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看 `Card.actions` 代码。
- en: Understanding the Card.actions code
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 `Card.actions` 代码
- en: 'Finally, it''s time to discuss the `Card.actions` part of our `Card` component:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是时候讨论我们的 `Card` 组件中的 `Card.actions` 部分：
- en: '[PRE34]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The official documentation of `Material.Card` specifies `Card.actions` as allowing
    us to generate an `actions` block. As we have seen before, the `actions` block
    is simply one of the four possible content blocks for our `mdl` components.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`Material.Card` 的官方文档指定 `Card.actions` 允许我们生成一个 `actions` 块。正如我们之前所看到的，`actions`
    块是 `mdl` 组件的四个可能内容块之一。'
- en: The official documentation for the Material Design Language—that is, Google
    documentation, not Elm package documentation—states that a card action is to be
    used as a way to interact with our card. In essence, it's a call to an action
    button. For example, if we displayed a listing of blog post excerpts in the form
    of MDL cards on a website, the card action could be the button that holds the
    *Read More* text node.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设计语言的官方文档——即 Google 文档，而不是 Elm 包文档——指出，卡片操作应用作与我们的卡片进行交互的方式。本质上，它是对动作按钮的调用。例如，如果我们在一个网站上以
    MDL 卡的形式显示博客文章摘录的列表，卡片操作可以是包含 *阅读更多* 文本节点的按钮。
- en: However, in our example, we are not really interacting with the information
    provided under the temperature in our card component. In other words, we do not
    have the intention for the user to click on the *wind*, *pressure*, and *humidity*
    information that is listed below the temperature reading.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们的例子中，我们并没有真正与卡片组件下温度提供的信息进行交互。换句话说，我们并没有让用户点击温度下方列出的*风速*、*气压*和*湿度*信息的意图。
- en: 'Therefore, it is safe to change the line that reads `, Card.actions []` with
    this code: `, Card.text []`. We can leave all the other code as is, and the app
    will still work. The only change that will happen has to do with the compiled
    HTML structure of our weather app. In order to see the change, we will need to
    inspect the code in the `dev` tools, which can be accessed in most major browsers
    by pressing the *F12* button.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以安全地将读取为`, Card.actions []`的行更改为以下代码：`, Card.text []`。我们可以保留所有其他代码不变，应用仍然可以工作。唯一的变化将与我们的天气应用的编译HTML结构有关。为了看到变化，我们需要检查`dev`工具中的代码，这可以通过在大多数主要浏览器中按*F12*按钮来访问。
- en: 'If using `Card.action` in our Elm app, the resultant `div` in the browser will
    have this CSS class attribute: `mdl-card__actions`. If we instead switch to using
    `Card.text` in our view, the resultant `div` of the running app in the browser
    will have the CSS class attribute of `mdl-card__supporting-text`.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在我们的Elm应用中使用`Card.action`，浏览器中的结果`div`将具有以下CSS类属性：`mdl-card__actions`。如果我们改为在视图中使用`Card.text`，浏览器中运行的应用的结果`div`将具有CSS类属性`mdl-card__supporting-text`。
- en: We finish our `view` function's code by piping the `Material.Scheme.top` at
    the very bottom. This will add the `mdl` CSS to our app. To find out more about
    this, refer to the official documentation at [http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Scheme#top](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Scheme#top).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在底部管道`Material.Scheme.top`来完成`view`函数的代码。这将向我们的应用添加`mdl` CSS。要了解更多信息，请参阅官方文档[http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Scheme#top](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Scheme#top)。
- en: Adding color schemes
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加颜色方案
- en: We can change the way our mdl-styled app looks, almost effortlessly, by utilizing
    color schemes. To understand how to do that, we will first need to refer to the
    official documentation of the elm-mdl package. More specifically, we are interested
    in `topWithScheme`, a function that is made available in the `elm-mdl` package.
    The official documentation for this function is available at [http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Scheme#topWithScheme](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Scheme#topWithScheme). If
    you visit the referenced URL, you will see that all we need to do to make it work
    is provide the primary and accent colors as parameters to the `topWithScheme`
    function.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过利用颜色方案几乎毫不费力地改变我们的mdl样式应用的外观。为了了解如何做到这一点，我们首先需要参考elm-mdl包的官方文档。更具体地说，我们对`topWithScheme`函数感兴趣，这是一个在`elm-mdl`包中提供的函数。此函数的官方文档可在[http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Scheme#topWithScheme](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Scheme#topWithScheme)找到。如果您访问所引用的URL，您将看到我们使它工作所需做的所有事情就是将主色和强调色作为参数提供给`topWithScheme`函数。
- en: To better understand how the color schemes work in mdl, refer to the color scheme
    customizer at `https://getmdl.io/customize/index.html`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要更好地了解mdl中的颜色方案如何工作，请参阅颜色方案定制器[https://getmdl.io/customize/index.html]。
- en: 'Practically, this means that we can update our `view` function with a number
    of color schemes, just by changing one line of code. Until now, the first few
    lines of our `view` function looked as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这意味着我们可以通过更改一行代码来更新`view`函数中的颜色方案。到目前为止，我们的`view`函数的前几行看起来如下：
- en: '[PRE35]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To update the view so that it uses the `topWithScheme` function, we simply
    add the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新视图以使用`topWithScheme`函数，我们只需添加以下内容：
- en: '[PRE36]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: As we can see, the primary color is now orange, and the accent color is red.
    At this point, we have nearly finished updating our weather app. There are no
    changes to be made to either the `subscriptions` function or to the `getTemperature`
    function.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，主色调现在是橙色，强调色是红色。到目前为止，我们几乎完成了天气应用的更新。对`subscriptions`函数或`getTemperature`函数都没有需要做的更改。
- en: The only function that still needs updating is the `decodeTemperatureInfo` function,
    in which we need to make just some minor tweaks, which we will be doing in the
    next section.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一需要更新的函数是 `decodeTemperatureInfo` 函数，其中我们需要进行一些小的调整，我们将在下一节中进行这些调整。
- en: Updating decodeTemperatureInfo
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新 decodeTemperatureInfo
- en: 'We left off in [Chapter 7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml), *Making
    a Weather App in Elm*, with the following code for `decodeTemperatureInfo`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [第 7 章](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml) 中停止了，*在 Elm 中制作天气应用*，其中
    `decodeTemperatureInfo` 的以下代码：
- en: '[PRE37]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The only thing to update in the `decodeTemperatureInfo` function is that we
    need to convert the temperature from Kelvin to Celsius. Luckily, this conversion
    is very straightforward: in order to convert to Celsius, we simply need to subtract
    `273.15` from the Kelvin-based value. In other words, if the current temperature
    is `293.15` Kelvins, the conversion to Celsius will look as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `decodeTemperatureInfo` 函数中需要更新的唯一事项是将温度从开尔文转换为摄氏度。幸运的是，这种转换非常直接：为了转换为摄氏度，我们只需从基于开尔文的值中减去
    `273.15`。换句话说，如果当前温度是 `293.15` 开尔文，转换为摄氏度的过程如下所示：
- en: '[PRE38]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Thus, `293.15` degrees Kelvin is `20` degrees Celsius. This makes it pretty
    straightforward to update our `decodeTemperatureInfo`. We simply need to replace
    the existing code with this one:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`293.15` 开尔文等于 `20` 摄氏度。这使得更新我们的 `decodeTemperatureInfo` 函数变得相当简单。我们只需用以下代码替换现有的代码：
- en: '[PRE39]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We will leave the rest of the code the same as in the previous version of our
    app.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将保持其余代码与我们的应用前一个版本中的代码相同。
- en: In this section, we updated the temperature so as to display Celsius to Kelvin.
    If you view the app in the browser, you will be able to see this change.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们更新了温度，以便在浏览器中显示摄氏度到开尔文的转换。如果你在浏览器中查看应用，你将能够看到这个变化。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to improve the styling of an existing app
    with the wonderful `elm-mdl` package. We have looked at using `Result` and `Maybe`
    to deal with operations that might fail and to deal with possibly missing data.
    We looked at using decoders, and mapping over them. We also looked at using the
    HTTP package to get remote JSON data.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用神奇的 `elm-mdl` 包来改进现有应用的样式。我们探讨了如何使用 `Result` 和 `Maybe` 来处理可能失败的操作以及处理可能缺失的数据。我们还研究了使用解码器以及如何对它们进行映射。此外，我们还探讨了如何使用
    HTTP 包来获取远程 JSON 数据。
- en: In the next chapter, we will look at how to write tests for our Elm apps.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何为我们的 Elm 应用编写测试。
