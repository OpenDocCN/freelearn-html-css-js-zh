- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Logging in Microservices with Node.js
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Node.js 进行微服务登录
- en: When working with microservices architecture and Node.js, it is important to
    enable and check logs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用微服务架构和 Node.js 的时候，启用和检查日志非常重要。
- en: We’ll start this chapter by understanding the core concepts of logging in microservices
    with Node.js. Logging is a critical aspect of microservices architecture, providing
    valuable insights into behavior, performance, and issues within a distributed
    system. In Node.js microservices, various logging techniques and libraries are
    employed to capture relevant information and robust logging systems for your Node.js
    microservices.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始，了解使用 Node.js 进行微服务日志记录的核心概念。日志记录是微服务架构的一个关键方面，为分布式系统中的行为、性能和问题提供了有价值的见解。在
    Node.js 微服务中，采用了各种日志技术和库来捕获相关信息和健壮的日志系统。
- en: 'In a microservices architecture, logging plays a crucial role. Let me summarize
    what happens when there is no proper logging:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，日志扮演着至关重要的角色。让我总结一下没有适当日志记录会发生什么：
- en: '**Lack of visibility**: Without logging, it becomes challenging to track and
    understand what’s happening within individual microservices. You won’t have insights
    into their behavior, events, or transactions.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏可见性**：没有日志记录，跟踪和理解单个微服务内部发生的事情变得具有挑战性。您将无法了解它们的行为、事件或事务。'
- en: '**Troubleshooting difficulties**: When issues arise, troubleshooting becomes
    cumbersome. Without logs, you won’t have information about errors, exceptions,
    or stack traces. Identifying failure points within a specific service becomes
    a guessing game.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障排除困难**：当问题出现时，故障排除变得繁琐。没有日志，您将没有关于错误、异常或堆栈跟踪的信息。在特定服务中识别故障点变成了一场猜谜游戏。'
- en: '**Holistic view missing**: Each microservice may generate its own logs, but
    without a centralized logging system, you won’t get a holistic view of the entire
    system. Patterns or trends that span multiple services may remain hidden.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏全面视角**：每个微服务可能会生成自己的日志，但没有集中式日志系统，您将无法获得整个系统的全面视角。跨越多个服务的模式或趋势可能仍然隐藏。'
- en: Remember—proper logging ensures better visibility, faster troubleshooting, and
    a more robust microservices architecture!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 记住——适当的日志记录确保更好的可见性、更快的故障排除以及更健壮的微服务架构！
- en: By the end of this chapter, you will have learned how to debug better and faster
    in microservices with Node.js.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将学会如何在 Node.js 微服务中更好地、更快地进行调试。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Choosing a logging framework and defining log levels
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择日志框架和定义日志级别
- en: Structured logging, log transport, and storage
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化日志、日志传输和存储
- en: Log filtering, sampling, error handling, and exception logging
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志过滤、采样、错误处理和异常日志
- en: Context propagation, monitoring, and analyzing logs
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上下文传播、日志监控和分析
- en: In the first section, we’re going to show how to choose a logging framework
    and define log levels.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分，我们将展示如何选择一个日志框架并定义日志级别。
- en: Choosing a logging framework and defining log levels
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择日志框架并定义日志级别
- en: '**Logging** is a crucial aspect of microservices, aiding in debugging, performance
    monitoring, and system analysis. By selecting an appropriate logging library and
    implementing best practices, you can build a robust logging system for your Node.js
    microservices.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**日志记录**是微服务的一个关键方面，有助于调试、性能监控和系统分析。通过选择合适的日志库并实施最佳实践，您可以为您的 Node.js 微服务构建一个健壮的日志系统。'
- en: Choosing a logging library
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择日志库
- en: A logging library is a piece of software that can help you generate and manage
    log data from your Node.js application. Logging libraries can provide various
    features, such as different log levels, log formats, log transports, and log aggregation.
    Logging libraries can also improve the performance and functionality of your application
    by reducing the overhead of `console.log` and providing more information and control
    over your log data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 日志库是一段软件，可以帮助您从 Node.js 应用程序中生成和管理日志数据。日志库可以提供各种功能，例如不同的日志级别、日志格式、日志传输和日志聚合。日志库还可以通过减少
    `console.log` 的开销并提供更多信息和控制日志数据来提高应用程序的性能和功能。
- en: 'Selecting a suitable logging library is the first step. Some popular logging
    libraries for Node.js include the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 选择合适的日志库是第一步。以下是一些流行的 Node.js 日志库：
- en: '`info`, `debug`, `warn`, `error`). Supports log formatting and customization.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info`、`debug`、`warn`、`error`）。支持日志格式化和自定义。'
- en: '**Bunyan**: Emphasizes structured logging, which is especially useful in microservices.
    Efficient for large-scale systems with high-throughput requirements. Supports
    log rotation and various log levels.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bunyan**：强调结构化日志，这在微服务中特别有用。对具有高吞吐量要求的大型系统来说效率很高。支持日志轮转和多种日志级别。'
- en: '**Pino**: Focused on fast and lightweight logging. Well suited for high-performance
    applications. Supports JSON logging and customizable log levels.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pino**：专注于快速和轻量级日志。非常适合高性能应用程序。支持 JSON 日志和可定制的日志级别。'
- en: These are the most used logging libraries for Node.js, and they will help developers
    and system engineers save time while debugging and have no headaches while creating
    systems.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是最常用的 Node.js 日志库，它们将帮助开发者和系统工程师在调试时节省时间，并在创建系统时没有头痛。
- en: For this book, let’s choose the *Winston* logging library, which is a widely
    used and versatile logging library for Node.js applications. Winston allows you
    to log messages at different levels, and it supports various transports (e.g.,
    console, file, database).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，让我们选择 *Winston* 日志库，这是一个广泛使用且功能丰富的 Node.js 应用程序日志库。Winston 允许你在不同的级别记录消息，并支持各种传输方式（例如，控制台、文件、数据库）。
- en: 'Let’s first install Winston using the command given here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先使用这里给出的命令安装 Winston：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, create a file (for example, `logger.js`) to configure Winston with different
    log levels:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个文件（例如，`logger.js`）来配置 Winston 使用不同的日志级别：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, you can use this logger in your application, as in the following example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在你的应用程序中使用这个日志记录器，如下面的示例所示：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this example, we’ve defined four log levels: `error`, `warn`, `info`, and
    `debug`. The levels are associated with increasing severity. The configuration
    also includes colorization for better visibility in the console. You can customize
    log levels, colors, and transports based on your specific requirements.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们定义了四个日志级别：`error`、`warn`、`info` 和 `debug`。级别与日益增加的严重性相关联。配置还包括颜色化，以便在控制台中更好地可见。你可以根据具体需求自定义日志级别、颜色和传输方式。
- en: '*Figure 14**.1* illustrates logging libraries:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 14.1* 展示了日志库：'
- en: '![Figure 14.1: Logging libraries (image by johnstocker on Freepik)](img/B14980_14_01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.1：日志库（图片由 Freepik 上的 johnstocker 提供）](img/B14980_14_01.jpg)'
- en: 'Figure 14.1: Logging libraries (image by johnstocker on Freepik)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1：日志库（图片由 Freepik 上的 johnstocker 提供）
- en: In summary, while `console.log` is straightforward and immediate, Winston provides
    more powerful features, including customizable log levels, structured formatting,
    and the ability to redirect logs to various destinations.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，虽然 `console.log` 简单直接，但 Winston 提供了更强大的功能，包括可定制的日志级别、结构化格式化和将日志重定向到各种目的地的能力。
- en: '*Best practice*: Instead of `console.log`, use a proper logging library (such
    as Winston or Bunyan). These allow you to control log levels, format messages,
    and direct logs to appropriate destinations (files, databases, and so on). Leaving
    `console.log` in production can inadvertently expose sensitive information. Imagine
    accidentally logging user credentials or API keys! Remember – production logs
    matter. Make them meaningful, secure, and efficient!'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*最佳实践*：不要使用 `console.log`，而应使用合适的日志库（如 Winston 或 Bunyan）。这些库允许你控制日志级别、格式化消息并将日志定向到适当的目的地（文件、数据库等）。在生产环境中留下
    `console.log` 可能会无意中暴露敏感信息。想象一下意外记录用户凭据或 API 密钥！记住——生产日志很重要。使它们有意义、安全且高效！'
- en: Now, let’s move on to log levels.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续讨论日志级别。
- en: Log levels
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志级别
- en: '**Log levels** are a way of categorizing the severity and importance of log
    messages in Node.js. Log levels can help you filter, prioritize, and manage your
    log data more effectively. Log levels can also affect the performance and functionality
    of your application, depending on how you configure your logging framework.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**日志级别**是分类 Node.js 中日志消息严重性和重要性的方式。日志级别可以帮助你更有效地过滤、优先排序和管理你的日志数据。日志级别还可能根据你如何配置你的日志框架而影响应用程序的性能和功能。'
- en: 'Here are the main recommendations for log levels:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是关于日志级别的几个主要建议：
- en: Utilize different log levels (`info`, `debug`, `warn`, `error`) appropriately.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适当地利用不同的日志级别（`info`、`debug`、`warn`、`error`）。
- en: Adjust log levels dynamically based on the deployment environment or configuration.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据部署环境或配置动态调整日志级别。
- en: Log levels are very important for a system and need to be adjusted correctly
    to achieve what is required in terms of faster debugging and performance.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 日志级别对于系统非常重要，需要正确调整以实现更快的调试和性能所需的各项要求。
- en: Additionally, remember that the log levels can be adjusted dynamically based
    on your environment or configuration, allowing you to control the verbosity of
    your logs in different scenarios.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请记住，日志级别可以根据您的环境或配置动态调整，允许您在不同场景中控制日志的详细程度。
- en: With an understanding of these concepts, let’s now move to structured logging,
    log transport, and storage.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在理解了这些概念之后，我们现在转向结构化日志记录、日志传输和存储。
- en: Structured logging, log transport, and storage
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构化日志记录、日志传输和存储
- en: Structured logging, log transport, and storage are related concepts that can
    help you manage and analyze your application logs more effectively. Let’s look
    at structured logging in depth in this section.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化日志记录、日志传输和存储是相关概念，可以帮助您更有效地管理和分析应用程序日志。在本节中，我们将深入探讨结构化日志记录。
- en: Structured logging
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结构化日志记录
- en: '**Structured logging** is a method of logging where log messages are formatted
    as a set of key-value pairs or as JSON objects. This format makes logs more machine-readable
    and allows for easier parsing, filtering, and analysis. When combined with appropriate
    log transport and storage mechanisms, structured logging becomes a powerful tool
    for monitoring and troubleshooting in microservices architectures.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**结构化日志记录**是一种日志记录方法，其中日志消息格式化为一系列键值对或 JSON 对象。这种格式使日志更易于机器读取，并允许更轻松地进行解析、过滤和分析。当与适当的日志传输和存储机制结合使用时，结构化日志记录成为监控和故障排除在微服务架构中的强大工具。'
- en: 'Here are some benefits of structured logging:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是结构化日志记录的一些好处：
- en: '**Machine readability**: Structured logs are easily parseable by machines,
    facilitating automated log analysis.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机器可读性**：结构化日志易于机器解析，便于自动化日志分析。'
- en: '**Contextual information**: Key-value pairs allow the inclusion of contextual
    information with log messages, aiding in troubleshooting.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文信息**：键值对允许在日志消息中包含上下文信息，有助于故障排除。'
- en: '**Consistency**: A consistent log format makes it easier to create log analysis
    tools and ensures uniformity across different microservices.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性**：一致的日志格式便于创建日志分析工具，并确保在不同微服务之间的一致性。'
- en: 'Now, let’s look at an implementation of structured logging with Winston (Node.js):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看使用 Winston（Node.js）实现的结构化日志记录：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding example, the log message includes structured data as key-value
    pairs.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，日志消息包括结构化数据，作为键值对。
- en: 'What is sensitive data? Sensitive data refers to private information that must
    be protected from unauthorized access. While the specifics may vary depending
    on your context, here are some common types of sensitive data:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是敏感数据？敏感数据是指必须保护免受未经授权访问的私人信息。虽然具体内容可能因您的环境而异，但以下是一些常见的敏感数据类型：
- en: '**Personally identifiable information (PII)**: This includes data such as full
    names, addresses, email addresses, driver’s license numbers, and phone numbers.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**个人身份信息（PII）**：这包括全名、地址、电子邮件地址、驾照号码和电话号码等数据。'
- en: '**Financial data**: Credit card information and other financial details fall
    into this category.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**财务数据**：信用卡信息和其他财务细节属于这一类别。'
- en: '**Healthcare data**: Medical history, records, and any health-related information.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**医疗数据**：医疗历史、记录和任何与健康相关的信息。'
- en: '**Passwords**: Storing passwords in logs is a significant security risk.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**：在日志中存储密码是一个重大的安全风险。'
- en: '**IP addresses**: Although not always strictly sensitive, leaking IP addresses
    can have privacy implications.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IP 地址**：尽管不一定总是严格敏感，但泄露 IP 地址可能会产生隐私影响。'
- en: Remember that data sensitivity depends on your business context. Even seemingly
    innocuous details (such as zip codes) should be handled carefully if their exposure
    could harm your business or erode customer trust.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，数据敏感性取决于您的业务环境。即使是看似无害的细节（如邮政编码），如果其泄露可能会损害您的业务或侵蚀客户信任，也应谨慎处理。
- en: 'Here are some best practices for avoiding sensitive data logging:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些避免敏感数据日志记录的最佳实践：
- en: '**Exclude sensitive data**: The simplest approach is to avoid logging sensitive
    data altogether. Only log necessary information.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排除敏感数据**：最简单的方法是完全避免记录敏感数据。只记录必要的信息。'
- en: '**Use structured logging**: Format logs in a structured way (for example, JSON)
    to make them more manageable and searchable.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用结构化日志记录**：以结构化的方式（例如，JSON）格式化日志，使其更易于管理和搜索。'
- en: '`INFO`, `DEBUG`, `ERROR`) and be selective about what gets logged.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INFO`、`DEBUG`、`ERROR`）并选择性地记录。'
- en: '**Centralized logging**: Use a centralized system to collect and store logs
    securely.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中式日志记录**：使用集中式系统安全地收集和存储日志。'
- en: '**Mask sensitive data**: If you must log certain data (for example, for debugging),
    mask or redact sensitive parts (for example, replace credit card numbers with
    asterisks).'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**屏蔽敏感数据**：如果您必须记录某些数据（例如，用于调试），请屏蔽或删除敏感部分（例如，将信用卡号替换为星号）。'
- en: Remember – handling sensitive data responsibly is crucial for both security
    and compliance.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 记住——负责任地处理敏感数据对于安全和合规至关重要。
- en: With these concepts learned, we can continue with log transport and storage.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 学习了这些概念后，我们可以继续学习日志传输和存储。
- en: Log transport and storage
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志传输和存储
- en: Structured logging, when combined with appropriate **log transport and storage**
    mechanisms, enhances the observability and manageability of microservices. Log
    transport and storage are the processes of moving and storing your log data from
    your application to a log management system.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化日志记录，当与适当的**日志传输和存储**机制结合使用时，可以增强微服务的可观察性和可管理性。日志传输和存储是将您的日志数据从应用程序移动到日志管理系统的过程。
- en: 'Here are the most common mechanisms:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是最常见的机制：
- en: '**Console transport**: Logs are often initially output to the console for development
    and debugging purposes. Console transport is quick and easy to set up, as shown
    here:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制台传输**：日志通常最初输出到控制台，用于开发和调试目的。控制台传输设置快速简单，如下所示：'
- en: '[PRE4]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**File transport**: Logs can be stored in files for later analysis. File transports
    are suitable for storing logs locally and can be set up like this:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件传输**：日志可以存储在文件中以供后续分析。文件传输适合本地存储日志，可以设置如下：'
- en: '[PRE5]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Cloud-based storage**: For cloud-based storage, consider services such as
    Amazon CloudWatch, Google Cloud Logging, or Azure Monitor. These services provide
    scalable, searchable, and centralized log storage. Here’s how to set them up:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于云的存储**：对于基于云的存储，请考虑像Amazon CloudWatch、Google Cloud Logging或Azure Monitor这样的服务。这些服务提供可扩展的、可搜索的、集中的日志存储。以下是设置它们的方法：'
- en: '[PRE6]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**ELK Stack (Elasticsearch, Logstash, Kibana)**: The ELK Stack is a popular
    open source solution for log storage and analysis. It allows you to index logs
    in Elasticsearch, process them with Logstash, and visualize them using Kibana.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ELK Stack（Elasticsearch、Logstash、Kibana）**：ELK Stack是一个流行的开源日志存储和分析解决方案。它允许您在Elasticsearch中索引日志，使用Logstash进行处理，并使用Kibana进行可视化。'
- en: '**Centralized logging solutions**: Services such as Splunk, Sumo Logic, or
    Datadog offer centralized logging solutions. **Centralized logging solutions**
    are systems that collect, store, and analyze log data from multiple sources, such
    as Node.js applications, servers, networks, or other services. Centralized logging
    solutions can help you monitor, troubleshoot, and optimize your Node.js applications
    by providing a unified and comprehensive view of your log data. Centralized logging
    solutions can also help you improve the security, performance, and reliability
    of your Node.js applications by detecting and resolving issues faster, reducing
    log noise, and enhancing log quality with advanced features such as search, analytics,
    and alerting.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中式日志记录解决方案**：像Splunk、Sumo Logic或Datadog这样的服务提供集中式日志记录解决方案。**集中式日志记录解决方案**是收集、存储和分析来自多个来源（如Node.js应用程序、服务器、网络或其他服务）的日志数据的系统。集中式日志记录解决方案可以帮助您通过提供对日志数据的统一和全面视图来监控、故障排除和优化您的Node.js应用程序。集中式日志记录解决方案还可以通过更快地检测和解决问题、减少日志噪音以及通过高级功能（如搜索、分析和警报）提高日志质量来帮助您提高Node.js应用程序的安全性、性能和可靠性。'
- en: In summary, the choice of transport and storage depends on factors such as scalability,
    analysis requirements, and the overall architecture of your application.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，传输和存储的选择取决于诸如可扩展性、分析需求以及您应用程序的整体架构等因素。
- en: Now, we can continue to the next section, in which we will talk about log filtering,
    sampling, error handling, and exception logging.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续到下一节，我们将讨论日志过滤、采样、错误处理和异常日志记录。
- en: Log filtering, sampling, error handling, and exception logging
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志过滤、采样、错误处理和异常日志记录
- en: In a microservices architecture, effective **log filtering**, **sampling**,
    **error handling**, and **exception logging** are crucial for managing logs efficiently
    and gaining insights into the system’s behavior.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，有效的**日志过滤**、**采样**、**错误处理**和**异常日志记录**对于高效管理日志和深入了解系统行为至关重要。
- en: 'Here’s how you can approach these aspects:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何处理这些方面的方法：
- en: '**Log filtering**: Log filtering involves selectively capturing and storing
    log entries based on specific criteria. This is essential for managing the volume
    of logs and focusing on relevant information.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志过滤**：日志过滤涉及根据特定标准选择性地捕获和存储日志条目。这对于管理日志量并关注相关信息至关重要。'
- en: 'Here is its implementation with Winston (Node.js):'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是使用Winston（Node.js）的实现：
- en: '[PRE13]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In this example, logs are filtered based on severity levels, and exceptions
    are separately handled.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本例中，日志根据严重级别进行过滤，异常则单独处理。
- en: '**Log sampling**: Log sampling involves capturing a subset of logs, rather
    than logging every event. This is useful when dealing with high-volume systems
    to avoid overwhelming log storage.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志采样**：日志采样涉及捕获日志的子集，而不是记录每个事件。当处理高流量系统时，这很有用，可以避免日志存储超载。'
- en: 'Here’s an implementation of log sampling with Winston:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是使用Winston进行日志采样的实现：
- en: '[PRE34]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: In this example, only approximately 10% of log messages are written to the `sampled.log`
    file.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本例中，只有大约10%的日志消息被写入`sampled.log`文件。
- en: '**Error handling and exception logging**: Error handling is crucial for identifying
    and resolving issues in a microservices architecture. Logging exceptions with
    detailed information aids in debugging.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理和异常记录**：在微服务架构中，错误处理对于识别和解决问题至关重要。记录带有详细信息的异常有助于调试。'
- en: 'Here’s an implementation of error handling with exception logging with Winston:'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是使用Winston进行错误处理和异常记录的实现：
- en: '[PRE56]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: In this example, the exception is caught, and the details are logged separately
    in the `exceptions.log` file.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本例中，异常被捕获，并在`exceptions.log`文件中单独记录详细信息。
- en: In summary, use filtering to include or exclude logs based on specific criteria,
    such as severity levels or custom conditions. Implement log sampling to capture
    a subset of logs, especially in high-volume systems, to avoid overwhelming log
    storage. Properly handle errors in your code and log detailed information about
    exceptions to aid in debugging and troubleshooting. Separate exception logs from
    regular logs for clarity.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，使用过滤根据特定标准（如严重级别或自定义条件）包括或排除日志。在高流量系统中，实现日志采样以捕获日志子集，以避免日志存储超载。正确处理代码中的错误，并记录有关异常的详细信息以帮助调试和故障排除。为了清晰起见，将异常日志与常规日志分开。
- en: Tailoring log filtering and sampling to your specific application and environment
    is essential for achieving the right balance between capturing valuable information
    and managing log volume efficiently.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的特定应用程序和环境定制日志过滤和采样对于在捕获有价值信息和高效管理日志量之间取得适当的平衡至关重要。
- en: In the next section, we will learn about context propagation, monitoring, and
    analyzing logs.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习关于上下文传播、日志监控和分析的内容。
- en: Context propagation, monitoring, and analyzing logs
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上下文传播、监控和分析日志
- en: Context propagation, monitoring, and log analysis are critical aspects of managing
    microservices in a distributed system. In this section, we take a deeper look
    at context propagation.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文传播、监控和分析日志是管理分布式系统中的微服务的关键方面。在本节中，我们将更深入地探讨上下文传播。
- en: Context propagation
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上下文传播
- en: In microservices, where requests can traverse multiple services, propagating
    context information is essential for tracking and understanding the flow of requests.
    Contextual information, often in the form of headers or tokens, allows you to
    correlate logs across different microservices.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务中，由于请求可以跨越多个服务，传播上下文信息对于跟踪和理解请求流至关重要。上下文信息通常以头或令牌的形式存在，允许您在不同微服务之间关联日志。
- en: 'Here is an example of context propagation. In a Node.js environment with Express.js,
    you can use middleware to propagate context information:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个上下文传播的例子。在一个使用Express.js的Node.js环境中，您可以使用中间件来传播上下文信息：
- en: '[PRE74]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: In this example, a unique request ID is added to the request, and it’s used
    to log the start of the request and any errors that occur. Context propagation
    in Node.js is the process of transferring context information, such as trace IDs,
    across asynchronous boundaries, such as callbacks, promises, or event emitters.
    Context propagation enables distributed tracing, which allows you to monitor and
    analyze the performance and behavior of your Node.js applications across multiple
    services and processes.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，请求中添加了一个唯一的请求ID，并用于记录请求的开始以及发生的任何错误。在Node.js中的上下文传播是跨异步边界（如回调、承诺或事件发射器）传输上下文信息（如跟踪ID）的过程。上下文传播使得分布式跟踪成为可能，这允许您监控和分析您的Node.js应用程序在多个服务和进程中的性能和行为。
- en: In the next section, we will talk about monitoring.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论监控。
- en: Monitoring
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控
- en: '**Monitoring** involves actively observing the behavior and performance of
    microservices to ensure they meet **service-level objectives** (**SLOs**) and
    to identify and address issues proactively.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**监控**涉及积极观察微服务的行为和性能，以确保它们满足**服务级别目标**（**SLOs**），并主动识别和解决问题。'
- en: 'The following are some tools for monitoring:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些监控工具：
- en: '**Prometheus**: An open source monitoring and alerting toolkit designed for
    reliability and scalability.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Prometheus**：一个开源的监控和警报工具包，旨在实现可靠性和可伸缩性。'
- en: '**Grafana**: Works well with Prometheus to visualize and analyze metrics.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Grafana**：与 Prometheus 协作良好，用于可视化和分析指标。'
- en: '**Datadog, New Relic, or AppDynamics**: Commercial solutions that provide comprehensive
    monitoring capabilities, including performance metrics, error rates, and distributed
    tracing.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Datadog、New Relic 或 AppDynamics**：提供全面监控能力的商业解决方案，包括性能指标、错误率和分布式跟踪。'
- en: These are just some of the tools that can help you monitor your Node.js applications.
    You can also use other tools or methods, such as the built-in Node.js debugger,
    the `console` module, or the `node:async_hooks` module. The choice of the tool
    depends on your specific needs and goals. You can also combine different tools
    to get a more complete picture of your application’s performance and behavior.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是可以帮助您监控 Node.js 应用程序的一些工具。您还可以使用其他工具或方法，例如内置的 Node.js 调试器、`console` 模块或
    `node:async_hooks` 模块。工具的选择取决于您的具体需求和目标。您还可以结合不同的工具，以获得更全面的应用程序性能和行为视图。
- en: In the next section, we will talk about log analysis.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论日志分析。
- en: Log analysis
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志分析
- en: '**Log analysis** involves extracting valuable insights from logs to understand
    the behavior of microservices, troubleshoot issues, and identify areas for optimization.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**日志分析**涉及从日志中提取有价值的信息，以了解微服务的行为、解决问题和识别优化区域。'
- en: 'Here are some tools for log analysis:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些日志分析工具：
- en: '**ELK Stack**: Elasticsearch is used for indexing logs, Logstash for log processing,
    and Kibana for visualization.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ELK Stack**：Elasticsearch 用于索引日志，Logstash 用于日志处理，Kibana 用于可视化。'
- en: '**Splunk**: A commercial log analysis platform that allows you to search, monitor,
    and analyze machine-generated data.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Splunk**：一个商业日志分析平台，允许您搜索、监控和分析机器生成数据。'
- en: '**Graylog**: An open source log management platform with search and analysis
    capabilities.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Graylog**：一个具有搜索和分析功能的开源日志管理平台。'
- en: In summary, propagate context information, such as request IDs, across microservices
    to correlate logs and trace the flow of requests. Actively monitor microservices
    using tools such as Prometheus, Grafana, Datadog, or others to ensure they meet
    performance and reliability objectives. Use log analysis tools such as the ELK
    Stack, Splunk, or Graylog to extract meaningful insights from logs and facilitate
    troubleshooting and optimization.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，跨微服务传播上下文信息，例如请求 ID，以关联日志和跟踪请求流。使用 Prometheus、Grafana、Datadog 或其他工具积极监控微服务，以确保它们满足性能和可靠性目标。使用
    ELK Stack、Splunk 或 Graylog 等日志分析工具从日志中提取有意义的见解，并促进故障排除和优化。
- en: By effectively implementing context propagation, monitoring, and log analysis,
    you can enhance the observability of your microservices, making it easier to maintain,
    troubleshoot, and optimize the entire system.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 通过有效地实施上下文传播、监控和日志分析，您可以增强微服务的可观察性，使维护、故障排除和优化整个系统变得更加容易。
- en: Summary
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we have learned a lot about microservices and how to monitor
    microservices in Node.js using several principles and tools.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于微服务以及如何使用几个原则和工具在 Node.js 中监控微服务的大量知识。
- en: 'In summary, logging in microservices with Node.js is a crucial aspect of ensuring
    observability, troubleshooting, and maintaining the health of a distributed system.
    Here’s a summary of key points:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 总结起来，使用 Node.js 在微服务中进行日志记录是确保可观察性、故障排除和维护分布式系统健康的关键方面。以下是关键点的总结：
- en: '**Logging libraries**: Use logging libraries such as Winston in Node.js for
    structured and flexible logging.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志库**：在 Node.js 中使用如 Winston 这样的日志库进行结构化和灵活的日志记录。'
- en: '`error`, `warn`, `info`, `debug`) to categorize and prioritize logs based on
    severity.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `error`、`warn`、`info`、`debug` 等级别对日志进行分类和优先级排序。
- en: '**Structured logging**: Implement structured logging by formatting logs as
    key-value pairs or JSON objects for better machine readability.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构化日志**：通过将日志格式化为键值对或 JSON 对象来实现结构化日志，以增强机器可读性。'
- en: '**Context propagation**: Propagate contextual information (for example, request
    IDs) across microservices to correlate logs and trace the flow of requests.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文传播**：在微服务之间传播上下文信息（例如，请求ID），以关联日志并追踪请求的流程。'
- en: '**Error handling**: Implement error handling and exception logging to capture
    detailed information about errors, aiding in debugging.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理**：实现错误处理和异常日志记录，以捕获有关错误的详细信息，有助于调试。'
- en: '**Log filtering and sampling**: Apply log filtering to selectively capture
    logs based on criteria such as severity levels. Consider log sampling to capture
    a subset of logs, especially in high-volume systems.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志过滤和采样**：根据严重程度等标准应用日志过滤，以选择性地捕获日志。考虑日志采样以捕获日志子集，尤其是在高流量系统中。'
- en: '**Log transport and storage**: Choose appropriate log transports (for example,
    console, file, cloud-based storage) based on your application’s needs and architecture.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志传输和存储**：根据您的应用程序需求和架构选择合适的日志传输方式（例如，控制台、文件、基于云的存储）。'
- en: '**Monitoring**: Actively monitor microservices using tools such as Prometheus,
    Grafana, Datadog, or commercial solutions to ensure performance and reliability.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控**：使用Prometheus、Grafana、Datadog或商业解决方案等工具积极监控微服务，以确保性能和可靠性。'
- en: '**Log analysis**: Leverage log analysis tools such as the ELK Stack, Splunk,
    or Graylog to extract valuable insights from logs for troubleshooting and optimization.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志分析**：利用日志分析工具，如ELK Stack、Splunk或Graylog，从日志中提取有价值的见解，以用于故障排除和优化。'
- en: '**Centralized logging**: Consider centralized logging solutions for better
    aggregation, search, and analysis of logs. Effective logging practices contribute
    to the overall observability of microservices, facilitating quick identification
    and resolution of issues, optimizing performance, and improving the reliability
    of the entire system.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中式日志**：考虑集中式日志解决方案以更好地聚合、搜索和分析日志。有效的日志实践有助于微服务的整体可观察性，便于快速识别和解决问题，优化性能，并提高整个系统的可靠性。'
- en: In the next chapter, we are going to learn about interpreting monitoring data
    in microservices.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何解释微服务中的监控数据。
- en: Quiz time
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: What are some popular logging libraries for Node.js?
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js有哪些流行的日志库？
- en: What is structured logging?
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化日志是什么？
- en: What are log filtering, sampling, error handling and exception logging?
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志过滤、采样、错误处理和异常日志记录是什么？
