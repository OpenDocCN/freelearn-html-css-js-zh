- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: External Modules and npm
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部模块和 npm
- en: '**Node Package Manager** (**npm**) is one of the most popular software registries
    around the world. There are more than two million packages available for us to
    use. In this chapter, we will explore how to use npm commands and NPX, as well
    as what the isomorphic libraries are and how to choose the correct dependencies
    for our project, so we can minimize the risks. As a final practice, you will publish
    a package to npm.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Node 包管理器** (**npm**) 是全球最受欢迎的软件注册库之一。有超过两百万个包可供我们使用。在本章中，我们将探讨如何使用 npm 命令和
    NPX，以及同构库是什么以及如何为我们的项目选择正确的依赖项，以便我们能够最小化风险。作为最后的实践，您将发布一个包到 npm。'
- en: In this chapter, we will explore how to use external modules in our projects.
    This will allow us to reuse code from other developers and save time and effort.
    We will explore together the vast ecosystem of Node.js modules, and we will learn
    how to choose the correct modules for our projects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何在我们的项目中使用外部模块。这将使我们能够重用其他开发者的代码，节省时间和精力。我们将一起探索 Node.js 模块的庞大生态系统，并学习如何为我们的项目选择正确的模块。
- en: 'To sum up, here are the main topics that we will explore in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，以下是本章我们将探讨的主要主题：
- en: Managing the application with `package.json`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `package.json` 管理应用
- en: Choosing the correct dependencies for your project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的项目选择正确的依赖项
- en: Installing dependencies
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: Removing dependencies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除依赖项
- en: Understanding `package-lock.json`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 `package-lock.json`
- en: Managing dependencies versions
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理依赖项版本
- en: Building Isomorphic JavaScript
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 Isomorphic JavaScript
- en: Using npm scripts
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 npm 脚本
- en: Executing packages directly with NPX
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NPX 直接执行包
- en: npm alternatives
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npm 替代方案
- en: Publishing your first package
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布您的第一个包
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code files for the chapter can be found at [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在 [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners)
    找到
- en: Check out the code in action video for this chapter on [https://youtu.be/B-7vZyAfi2U](https://youtu.be/B-7vZyAfi2U)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 查看本章的代码执行视频，请访问 [https://youtu.be/B-7vZyAfi2U](https://youtu.be/B-7vZyAfi2U)
- en: Managing the application with package.json
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 package.json 管理应用
- en: When you install Node.js, npm is installed as well. npm is the package manager
    for Node.js. It is used to install, update, and remove packages from our projects.
    It also allows us to publish our own packages.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当您安装 Node.js 时，npm 也会一并安装。npm 是 Node.js 的包管理器。它用于从我们的项目中安装、更新和删除包。它还允许我们发布自己的包。
- en: A package is a JavaScript library that we can use in our applications to speed
    up the process of developing our own projects. There are many different types
    of packages, from very simple ones such as a function that can tell us whether
    a number is odd or not ([https://www.npmjs.com/package/is-odd](https://www.npmjs.com/package/is-odd)),
    to very complex libraries that can help us to use Firebase ([https://firebase.google.com/?hl=es](https://firebase.google.com/?hl=es))
    to store information from our users ([https://www.npmjs.com/package/firebase](https://www.npmjs.com/package/firebase)).
    It is quite common to use many libraries in a single project, and some companies
    create their own private libraries to distribute utilities, configurations, and
    many more things across their many code bases.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 包是一个我们可以用于我们应用程序的 JavaScript 库，可以帮助我们加快开发自己项目的速度。有各种各样的包，从非常简单的，比如一个可以告诉我们一个数字是否为奇数的函数（[https://www.npmjs.com/package/is-odd](https://www.npmjs.com/package/is-odd)），到非常复杂的库，可以帮助我们使用
    Firebase ([https://firebase.google.com/?hl=es](https://firebase.google.com/?hl=es))
    来存储用户的资料（[https://www.npmjs.com/package/firebase](https://www.npmjs.com/package/firebase)）。在单个项目中使用许多库是非常常见的，一些公司甚至创建自己的私有库来分发工具、配置以及更多内容到他们的众多代码库中。
- en: The `package.json` file is the manifest file for our project. It contains the
    metadata of our project, such as the name, version, description, author, and license.
    It also contains the dependencies of our project, both the runtime dependencies
    and the development dependencies, and it contains the scripts that we can run
    with npm.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 文件是我们项目的清单文件。它包含我们项目的元数据，例如名称、版本、描述、作者和许可证。它还包含我们项目的依赖项，包括运行时依赖项和开发依赖项，以及我们可以使用
    npm 运行的脚本。'
- en: 'In order to create a `package.json` file, we can run the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个 `package.json` 文件，我们可以运行以下命令：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command will ask us a few questions, and then it will create the `package.json`
    file. For an even faster creation, you can use `npm init -y` to automatically
    create the file with the default values suggested.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令会问我们几个问题，然后创建 `package.json` 文件。为了更快地创建，你可以使用 `npm init -y` 自动创建带有默认值的文件。
- en: We can also create the `package.json` file manually, but it is recommended to
    use the `npm` `init` command.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以手动创建 `package.json` 文件，但建议使用 `npm init` 命令。
- en: 'The `package.json` file can be very simple, like this one:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 文件可以非常简单，就像这样：'
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: But it can also be a large file, with one or many dependencies, scripts, and
    additional metadata. Currently, there is no official standard for the `package.json`
    file, but there are efforts to create it in the Standards Working Group from the
    OpenJS Foundation ([https://github.com/openjs-foundation/standards/issues/233](https://github.com/openjs-foundation/standards/issues/233)).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但它也可以是一个大文件，包含一个或多个依赖项、脚本和额外的元数据。目前，`package.json` 文件还没有官方标准，但 OpenJS 基金会的标准工作组正在努力制定它（[https://github.com/openjs-foundation/standards/issues/233](https://github.com/openjs-foundation/standards/issues/233)）。
- en: Currently, we can use the npm documentation to know what fields we can use in
    the `package.json` file. The documentation is available at [https://docs.npmjs.com/cli/v7/configuring-npm/package-json](https://docs.npmjs.com/cli/v7/configuring-npm/package-json).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们可以使用 npm 文档来了解在 `package.json` 文件中可以使用哪些字段。文档可在 [https://docs.npmjs.com/cli/v7/configuring-npm/package-json](https://docs.npmjs.com/cli/v7/configuring-npm/package-json)
    查找。
- en: In the next sections, we will see some of the most important fields in the `package.json`
    file and how to use them in our projects.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将了解 `package.json` 文件中的一些最重要的字段，以及如何在我们的项目中使用它们。
- en: Choosing the correct dependencies for your project
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为你的项目选择正确的依赖项
- en: It is true that the npm ecosystem is very solid and growing every day. But it
    is also true that many packages are not maintained anymore, or that include security
    vulnerabilities and performance issues.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 诚然，npm 生态系统非常稳固，并且每天都在增长。但同样真实的是，许多包已经不再维护，或者包含安全漏洞和性能问题。
- en: 'The community is aware of this and there are plenty of jokes and memes about
    this topic. For example, the following image:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 社区对此有所了解，并且有很多关于这个话题的笑话和梗图。例如，以下这张图片：
- en: '![Figure 6.1 – npm Delivery by MonkeyUser – a classic meme that shows how many
    dependencies we tend to include in our projects (https://www.monkeyuser.com/2017/npm-delivery/)](img/B21678_06_01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – MonkeyUser 的 npm 交付 – 一张经典的梗图，展示了我们倾向于在项目中包含多少依赖项（[https://www.monkeyuser.com/2017/npm-delivery/](https://www.monkeyuser.com/2017/npm-delivery/)])(img/B21678_06_01.jpg)'
- en: Figure 6.1 – npm Delivery by MonkeyUser – a classic meme that shows how many
    dependencies we tend to include in our projects (https://www.monkeyuser.com/2017/npm-delivery/)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – MonkeyUser 的 npm 交付 – 一张经典的梗图，展示了我们倾向于在项目中包含多少依赖项（[https://www.monkeyuser.com/2017/npm-delivery/](https://www.monkeyuser.com/2017/npm-delivery/)）
- en: While this is a joke based on the huge number of dependencies and sub-dependencies
    that we install on an average project, it is true that we need to be careful when
    choosing the dependencies for our projects. In this section, we will see how to
    choose the correct dependencies for our projects.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是一个基于我们在平均项目中安装的大量依赖项和子依赖项的笑话，但事实是我们选择项目依赖项时需要谨慎。在本节中，我们将了解如何为我们的项目选择正确的依赖项。
- en: Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Most modules depend on other modules, and those modules depend on other modules,
    and so on. This is called the **dependency tree**. When we install a module, we
    are installing all the dependencies of that module, and all the dependencies of
    the dependencies, and so on. This is why it is important to choose the correct
    dependencies for our projects.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数模块都依赖于其他模块，而这些模块又依赖于其他模块，以此类推。这被称为**依赖树**。当我们安装一个模块时，我们实际上是在安装该模块的所有依赖项，以及所有依赖项的依赖项，等等。这就是为什么选择正确的依赖项对我们项目来说很重要。
- en: 'Before choosing a dependency, we need to ask ourselves the following questions:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择依赖项之前，我们需要问自己以下问题：
- en: What are the risks associated with choosing a bad dependency?
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择不良依赖项有哪些风险？
- en: What are the criteria that I should use to choose a dependency?
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我应该使用哪些标准来选择一个依赖项？
- en: Let’s see the answers to these questions!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些问题的答案！
- en: Risks
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 风险
- en: In our modern world, we are used to using dependencies. It will be very hard
    or directly impossible to build modern web applications without using dependencies.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们现代世界中，我们已经习惯了使用依赖项。没有使用依赖项构建现代网络应用将非常困难，或者直接不可能。
- en: 'When we choose a dependency, we are taking a risk. Let’s see what the main
    risks associated with choosing a bad dependency are:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们选择一个依赖项时，我们正在承担风险。让我们看看与选择不良依赖项相关的主要风险：
- en: '**Security vulnerabilities**: A dependency can have security vulnerabilities
    or even be a malicious piece of code.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全漏洞**：一个依赖项可能存在安全漏洞，甚至可能是一段恶意代码。'
- en: '**Performance issues**: A dependency can have performance issues and generate
    memory leaks that can affect the performance of our application and even crash
    it.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能问题**：一个依赖项可能存在性能问题，并产生内存泄漏，这可能会影响我们应用程序的性能，甚至导致其崩溃。'
- en: '**Maintenance issues**: A dependency cannot be maintained anymore, and it can
    be deprecated in the future. This can cause our application to stop working in
    the future or prevent us from upgrading other dependencies or Node.js itself.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护问题**：一个依赖项不再维护，并且可能在将来被弃用。这可能导致我们的应用程序在未来停止工作，或者阻止我们升级其他依赖项或Node.js本身。'
- en: In 2020, I published a controversial blog post called *What is a backdoor?*
    *Let’s build one with Node.js* ([https://snyk.io/blog/what-is-a-backdoor/](https://snyk.io/blog/what-is-a-backdoor/)).
    In that blog post, I explained that a backdoor is a piece of code that allows
    us to access a system without going through the authentication process. I also
    explained how to build a backdoor with Node.js using a few lines of code and I
    demonstrated how easy was to publish and distribute a malicious package.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在2020年，我发布了一篇名为 *什么是后门？* *让我们用Node.js构建一个* 的有争议的博客文章([https://snyk.io/blog/what-is-a-backdoor/](https://snyk.io/blog/what-is-a-backdoor/)).
    在那篇博客文章中，我解释说后门是一段代码，它允许我们在不经过身份验证过程的情况下访问系统。我还解释了如何使用几行代码用Node.js构建后门，并展示了发布和分发恶意包是多么容易。
- en: I know that security is a very sensitive topic, especially if you are starting
    your journey in web development. [*Chapter 15*](B21678_15.xhtml#_idTextAnchor394)
    of this book is dedicated to security, and we will explore security in depth there.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道安全问题是一个非常敏感的话题，尤其是如果你刚开始你的Web开发之旅。本书的[*第15章*](B21678_15.xhtml#_idTextAnchor394)专门讨论了安全问题，我们将在那里深入探讨安全问题。
- en: In order to minimize the risks, we need to choose the correct dependencies for
    our projects. Let’s see how to do that.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最小化风险，我们需要为我们的项目选择正确的依赖项。让我们看看如何做到这一点。
- en: Good criteria
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 良好的标准
- en: There are many criteria that we can use to choose the correct dependencies for
    our projects. In this section, we will see some of the most important ones.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用许多标准来选择适合我们项目的正确依赖项。在本节中，我们将看到其中一些最重要的标准。
- en: What are we trying to avoid?
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们试图避免什么？
- en: 'We try to avoid the following things:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们试图避免以下事项：
- en: Packages that are not maintained anymore
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已不再维护的包
- en: Packages that have known security vulnerabilities and are not patched
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在已知安全漏洞且未修补的包
- en: Packages that depend on a lot of packages or have low-quality dependencies
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖项众多或质量低下的包
- en: Packages that are not popular or are low quality
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不受欢迎或质量低下的包
- en: Packages with license issues
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在许可问题或低质量的包
- en: What evidence do we have?
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们有什么证据？
- en: 'We are going to do some basic OSINT before we install any package, and we are
    going to check two data sources in detail: the npm website and the GitHub or code
    repository.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们安装任何包之前，我们将做一些基本的OSINT，并将详细检查两个数据源：npm网站和GitHub或代码仓库。
- en: OSINT is intelligence produced by collecting and analyzing public information
    with the purpose of answering a specific intelligence question. (Ritu Gill, [https://www.sans.org/blog/what-is-open-source-intelligence/](https://www.sans.org/blog/what-is-open-source-intelligence/).)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: OSINT是通过收集和分析公开信息以回答特定情报问题而产生的情报。(Ritu Gill, [https://www.sans.org/blog/what-is-open-source-intelligence/](https://www.sans.org/blog/what-is-open-source-intelligence/).)
- en: Real example
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 真实示例
- en: 'In this book, we are going to use the Express library. Express is a very popular
    library for Node.js, and it is used to build web applications and APIs. In this
    image, we can see in detail how the Express library is showcased on the npm website:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将使用Express库。Express是Node.js中一个非常流行的库，用于构建Web应用程序和API。在这张图片中，我们可以详细看到Express库如何在npm网站上展示：
- en: '![Figure 6.2 – Express library package in npm (https://www.npmjs.com/package/express)](img/B21678_06_02.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2 – npm中的Express库包 (https://www.npmjs.com/package/express)](img/B21678_06_02.jpg)'
- en: Figure 6.2 – Express library package in npm (https://www.npmjs.com/package/express)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – npm中的Express库包 (https://www.npmjs.com/package/express)
- en: 'From the npm website, we can see the following information:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从npm网站上，我们可以看到以下信息：
- en: There are 31 dependencies, most of which are very popular and well-maintained
    by the same Express maintainers
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有31个依赖项，其中大多数非常受欢迎，并且由相同的Express维护者精心维护
- en: There are +77k dependents, which means that many other package authors are using
    Express in their projects
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有+77k个依赖项，这意味着许多其他包的作者正在他们的项目中使用Express
- en: There are 271 versions published
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已发布271个版本
- en: There are almost 31M weekly downloads, which means that Express is a very popular
    package for the Node.js community
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每周有近31M次下载，这意味着Express是Node.js社区中非常受欢迎的包
- en: An MIT license, which is a permissive license and valid as open source
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个MIT许可证，这是一个许可宽松的许可证，也是有效的开源许可证
- en: Clear and solid documentation
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清晰且坚实的文档
- en: It was last published few days ago, which means that the package is maintained
    and updated regularly
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它最近几天才发布，这意味着该包得到了维护和定期更新
- en: 'From npm, we can access the GitHub repository of the package. In the following
    image, we can see in detail how the Express library is showcased on the GitHub
    website:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 从npm，我们可以访问该包的GitHub仓库。在下面的图片中，我们可以详细看到Express库在GitHub网站上的展示：
- en: '![](img/B21678_06_03.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21678_06_03.jpg)'
- en: Figure 6.3 – Express library repository in GitHub (https://github.com/expressjs/express)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – Express库在GitHub上的仓库（https://github.com/expressjs/express）
- en: 'From the GitHub website, we can see the following information:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从GitHub网站，我们可以看到以下信息：
- en: It has +10k forks, which means that many other developers are contributing to
    the project
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有+10k个分支，这意味着许多其他开发者正在为项目做出贡献
- en: It has +60k stars, which means that the project is popular in the community
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有+60k个星标，这意味着项目在社区中很受欢迎
- en: It has +5k commits, which means that the project has a long history
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有+5k次提交，这意味着该项目有着悠久的历史
- en: It has +3k issues closed, +120 issues open, +1k pull requests closed, and +60
    pull requests open, which means that the project is active
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有+3k个已关闭的问题，+120个开放的问题，+1k个已关闭的拉取请求，和+60个开放的拉取请求，这意味着项目是活跃的
- en: It has almost 300 contributors, which means that many other developers are contributing
    to the project and evolving it
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有近300个贡献者，这意味着许多其他开发者正在为项目做出贡献并推动其发展
- en: As we can see, we have a lot of information from the npm website and the GitHub
    repository at least to make a first decision, especially if we want to compare
    several packages. The offer is huge and sometimes it is difficult to choose the
    correct package.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们从npm网站和GitHub仓库中获得了大量信息，至少可以做出初步决定，尤其是如果我们想比较几个包。选择范围很广，有时很难选择正确的包。
- en: Exceptions to the rules
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 规则的例外
- en: We need to be quite flexible with the rules that we have seen before because
    very often we can find exceptions to the rules.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对我们之前看到的规则相当灵活，因为很多时候我们可以找到规则的例外。
- en: For example, johnny-five ([https://www.npmjs.com/package/johnny-five](https://www.npmjs.com/package/johnny-five))
    is a great library to use when working with Arduino and Raspberry Pi in Node.js.
    But the total download per week is very low. In this case, we need to consider
    that there are much less developers working with Arduino and Raspberry Pi than
    developers working with Express, for example.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，johnny-five ([https://www.npmjs.com/package/johnny-five](https://www.npmjs.com/package/johnny-five))
    是在Node.js中与Arduino和Raspberry Pi一起工作时使用的优秀库。但每周的总下载量非常低。在这种情况下，我们需要考虑与使用Express的开发者相比，使用Arduino和Raspberry
    Pi的开发者要少得多。
- en: Another example is Lodash ([https://www.npmjs.com/package/lodash](https://www.npmjs.com/package/lodash)),
    which is a very popular library and is used by many other packages. But the last
    version was published three years ago. In this case, we need to consider that
    the project is mostly completed, and it is not evolving anymore and only making
    new releases when needed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是Lodash ([https://www.npmjs.com/package/lodash](https://www.npmjs.com/package/lodash))，这是一个非常受欢迎的库，并被许多其他包使用。但最后一个版本是在三年前发布的。在这种情况下，我们需要考虑项目基本上已经完成，并且它不再发展，只是在需要时发布新版本。
- en: Deprecation notices
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 废弃通知
- en: Sometimes, we can find a package that is deprecated. In this case, we should
    avoid using it. We can find a deprecation notice in the npm website, in the GitHub
    repository, or when we install the package.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可以找到一个已废弃的包。在这种情况下，我们应该避免使用它。我们可以在npm网站、GitHub仓库或安装包时找到废弃通知。
- en: '![](img/B21678_06_04.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21678_06_04.jpg)'
- en: Figure 6.4 – Image from the npm documentation that shows how the deprecation
    warnings are shown in npm (https://docs.npmjs.com/packages-and-modules/updating-and-managing-your-published-packages/deprecate-package.png)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 来自npm文档的图片，展示了npm中如何显示弃用警告（https://docs.npmjs.com/packages-and-modules/updating-and-managing-your-published-packages/deprecate-package.png）
- en: Very often, in the deprecation notice, we can find a recommendation to use another
    package. In this case, we should follow the recommendation.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 非常常见，在弃用通知中，我们可以找到一个建议使用另一个包的建议。在这种情况下，我们应该遵循建议。
- en: Tooling
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工具
- en: 'In the previous OSINT analysis, we answered most of our questions, but we didn’t
    answer questions regarding known vulnerabilities. These days, I use two tools
    to check known vulnerabilities: *Snyk* ([https://snyk.io/](https://snyk.io/))
    and *socket.dev* ([https://socket.dev/](https://socket.dev/)).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的OSINT分析中，我们回答了大部分问题，但并没有回答有关已知漏洞的问题。这些天，我使用两个工具来检查已知漏洞：*Snyk* ([https://snyk.io/](https://snyk.io/))
    和 *socket.dev* ([https://socket.dev/](https://socket.dev/))。
- en: In [*Chapter 15*](B21678_15.xhtml#_idTextAnchor394), we will see how they are
    used in detail. In order to use these tools properly, you will need to understand
    how the dependency tree works and how the vulnerabilities are classified. Otherwise,
    these tools can be very confusing for beginners.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第15章*](B21678_15.xhtml#_idTextAnchor394) 中，我们将详细了解它们的使用。为了正确使用这些工具，你需要了解依赖项树是如何工作的以及漏洞是如何分类的。否则，这些工具对于初学者来说可能会非常令人困惑。
- en: I will suggest to say "In the next section, we will learn how to install the
    dependencies in our projects.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议说“在下一节中，我们将学习如何在我们的项目中安装依赖项。
- en: Installing dependencies
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: Now that we know how to choose the correct dependencies for our projects, and
    we have a `package.json` we can start installing our dependencies.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何为我们的项目选择正确的依赖项，并且我们有了 `package.json` 文件，我们可以开始安装我们的依赖项。
- en: Locally or globally
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地或全局
- en: 'We can install dependencies in two ways: locally or globally:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过两种方式安装依赖项：本地或全局：
- en: '`node_modules` folder of our project. For example, `express` is a local dependency
    of our application.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们项目的 `node_modules` 文件夹。例如，`express` 是我们应用程序的本地依赖项。
- en: '**Globally**: These are dependencies that are installed in the global folder
    of our system, so they become available from anywhere in our system, such as Node.js
    binary, which is available as soon as we open the terminal.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局**：这些是在我们系统的全局文件夹中安装的依赖项，因此它们可以在系统的任何地方使用，例如Node.js二进制文件，一旦我们打开终端，它就可用。'
- en: We would prefer to install dependencies locally because it is easier to manage
    the dependencies of our project and to avoid conflicts between different projects.
    We will install dependencies globally only when it is strictly necessary.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更愿意本地安装依赖项，因为这更容易管理我们项目的依赖项，并避免不同项目之间的冲突。只有在绝对必要时，我们才会全局安装依赖项。
- en: One example of a dependency that we will install globally is `yeoman`, a scaffolding
    tool, which we will use to generate a new project.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要安装的全局依赖项的一个例子是 `yeoman`，这是一个脚手架工具，我们将用它来生成一个新的项目。
- en: Dependency or development dependency
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖项或开发依赖项
- en: 'We can install the local dependencies in two ways: as a dependency or as a
    development dependency:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过两种方式安装本地依赖项：作为依赖项或作为开发依赖项：
- en: '`express` is a dependency of our application.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`express` 是我们应用程序的依赖项。'
- en: '`standard`, which is a linter library, will be used only while developing the
    code but not when running.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`standard`，这是一个代码检查库，仅在开发代码时使用，而不是在运行时使用。'
- en: Note
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'There is an additional mode to install dependencies: **peer dependencies**.
    We will not cover this mode in this book, but you can find more information and
    use cases in this blog post: [https://nodejs.org/en/blog/npm/peer-dependencies](https://nodejs.org/en/blog/npm/peer-dependencies).'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 安装依赖项还有另一种模式：**依赖项的依赖**。本书中我们将不涉及这种模式，但你可以在以下博客文章中找到更多信息和使用案例：[https://nodejs.org/en/blog/npm/peer-dependencies](https://nodejs.org/en/blog/npm/peer-dependencies)。
- en: The segmentation of dependencies is very important because it allows us to install
    only the dependencies that we need in each environment and to reduce the size
    of our application and attack surface.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖项的分割非常重要，因为它允许我们在每个环境中只安装我们需要的依赖项，并减少我们应用程序和攻击面的尺寸。
- en: Adding new dependency
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加新的依赖项
- en: 'For example, if we want to install the `express` package, we can use the following
    command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想安装 `express` 包，我们可以使用以下命令：
- en: '[PRE2]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can install the `standard` package as a development dependency. Development
    dependencies are those dependencies that we need when we are actually coding the
    project, but they are not used when the project is being deployed or distributed
    as a library. As `standard` is a linting tool, we will use it only when adding
    or changing code, but we won’t use it while the application is running. This segmentation
    of the dependencies has a lot of benefits as our final applications will be smaller
    (ignoring the development dependencies) and more secure as we have less external
    code. We can use the `-D` or `--save-dev` for installing development dependencies
    arguments:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将`standard`包作为开发依赖项安装。开发依赖项是我们实际编码项目时需要的依赖项，但在项目部署或作为库分发时并不使用。由于`standard`是一个代码检查工具，我们仅在添加或更改代码时使用它，而在应用程序运行时不会使用它。这种依赖项的分割有很多好处，因为我们的最终应用程序将更小（忽略开发依赖项），并且更安全，因为我们有更少的外部代码。我们可以使用`-D`或`--save-dev`参数来安装开发依赖项：
- en: '[PRE3]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can see that the `package.json` file has been updated with the new dependencies
    in two different sections: `dependencies` and `devDependencies`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`package.json`文件已经更新，包含两个不同部分的新的依赖项：`dependencies`和`devDependencies`：
- en: '[PRE4]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: One new file, `package-lock.json`, has also been added and the `node_modules`
    folder has been created with the dependencies structured in folders and files.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 还增加了一个新文件`package-lock.json`，并且已经创建了一个`node_modules`文件夹，其中依赖项以文件夹和文件的形式组织。
- en: We will explore in the next section how the `package-lock.json` file works.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中探讨`package-lock.json`文件是如何工作的。
- en: Note
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `node_modules` should not be included with the project source code if you
    are using Git or any other system to distribute your source code. It is good practice
    to include the `node_modules` folder in the `.gitignore` file to avoid including
    it in the repository. If you need a solid `.gitignore` file for Node.js, you can
    generate one ([https://www.toptal.com/developers/gitignore/api/node](https://www.toptal.com/developers/gitignore/api/node)).
    We should ignore `node_modules` because the folder can be huge, and have many
    files and a heavy weight, but also because we can install the dependencies at
    any time, as soon as we keep our changes in `package.log`, we will be able to
    install the correct dependencies
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Git或任何其他系统来分发你的源代码，`node_modules`不应该包含在项目源代码中。将`node_modules`文件夹包含在`.gitignore`文件中是一个好习惯，以避免将其包含在存储库中。如果你需要一个可靠的`.gitignore`文件用于Node.js，你可以生成一个（[https://www.toptal.com/developers/gitignore/api/node](https://www.toptal.com/developers/gitignore/api/node)）。我们应该忽略`node_modules`，因为该文件夹可能非常大，包含许多文件和较重的权重，而且我们可以在任何时间安装依赖项，一旦我们保持`package.log`中的更改，我们就能安装正确的依赖项。
- en: 'Global dependencies are installed with the `-g` or `–``global` argument:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 全局依赖项使用`-g`或`--global`参数安装：
- en: '[PRE5]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can see the list of global dependencies with the `list` or `ls` command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`list`或`ls`命令查看全局依赖项列表：
- en: '[PRE6]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output of this command will be something like this:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的输出将类似于以下内容：
- en: '[PRE7]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Installing all the dependencies
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装所有依赖项
- en: 'If we want to install all the dependencies that are listed in the `package.json`
    file, we can use the `install` or `i` command without any argument:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想安装`package.json`文件中列出的所有依赖项，我们可以使用不带任何参数的`install`或`i`命令：
- en: '[PRE8]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can also use the `--only` argument to install only the dependencies or the
    development dependencies:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用`--only`参数来仅安装依赖项或开发依赖项：
- en: '[PRE9]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the production environments, we want to avoid using development tools because,
    although this will make our applications smaller and more secure, in our development
    environments we will require all the dependencies to properly do our job.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，我们希望避免使用开发工具，因为尽管这会使我们的应用程序更小、更安全，但在我们的开发环境中，我们需要所有依赖项来正确地完成我们的工作。
- en: In the next section, we will explore how to properly remove dependencies from
    our projects.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何正确地从我们的项目中删除依赖项。
- en: Removing dependencies
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除依赖项
- en: 'You can remove a dependency using the `uninstall` command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`uninstall`命令来删除依赖项：
- en: '[PRE10]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This command will remove the dependency from the `package.json` and `package-lock.json`
    files and the `node_modules` folder.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将从`package.json`和`package-lock.json`文件以及`node_modules`文件夹中删除依赖项。
- en: 'Global dependencies are removed with the `-g` or `--``global` argument:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 全局依赖项使用`-g`或`--global`参数删除：
- en: '[PRE11]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the next section we will explore how the `package-lock.json` file can help
    us to manage our dependencies.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨`package-lock.json`文件如何帮助我们管理我们的依赖项。
- en: Understanding the package-lock.json
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解`package-lock.json`
- en: 'Historically, the `package.json` file was the only file that we needed to manage
    the dependencies of our project. But this file has a problem: it doesn’t contain
    the exact version of each sub-dependency that we have installed in our project
    and was also quite slow to install the dependencies.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，`package.json`文件是我们管理项目依赖项所需唯一文件。但这个文件有一个问题：它不包含我们已安装在我们项目中的每个子依赖项的确切版本，并且安装依赖项的速度也相当慢。
- en: Not having the exact version of each sub-dependency can be a problem because
    if we install the same dependency in two different environments, we can end up
    with different versions of the same dependency. The lack of immutability in our
    dependencies can lead to unexpected errors and bugs that are quite complicated
    to debug.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有每个子依赖项的确切版本，可能会出现问题，因为如果我们在不同环境中安装相同的依赖项，最终可能会得到不同版本的相同依赖项。我们依赖项的不变性可能导致意外的错误和难以调试的bug。
- en: 'Also, by default, when we install a dependency the version that is recorded
    in `package.json` includes a caret `^` symbol, such as `"express": "^4.18.3"`.
    This symbol means that we can install any version of the dependency that is compatible
    with the version that is recorded in `package.json`.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，默认情况下，当我们安装依赖项时，记录在`package.json`中的版本包括一个连字符`^`符号，例如`"express"^4.18.3"。这个符号意味着我们可以安装与记录在`package.json`中的版本兼容的任何版本的依赖项。
- en: The `package-lock.json` file is a file that is automatically generated when
    we install a new dependency and also speeds up the installation of the dependencies
    because it contains the exact version of each dependency and the source where
    it comes from.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`package-lock.json`文件是一个在我们安装新依赖项时自动生成的文件，并且因为它包含每个依赖项的确切版本及其来源，所以它还可以加快依赖项的安装速度。'
- en: 'The file can be huge, but the structure per dependency is quite simple:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 文件可能很大，但每个依赖项的结构相当简单：
- en: '[PRE12]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, the exact `version` is included, as well as the `resolved` and
    `integrity` fields that are used to validate the origin of the dependency and
    to avoid manipulations with the data in transit as `integrity` provides a checksum.
    Also, the `dependencies` field is included to list the sub-dependencies with the
    exact version.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，确切`版本`被包含在内，以及用于验证依赖项来源和避免在传输过程中对数据进行操作的`resolved`和`integrity`字段，因为`integrity`提供了校验和。此外，还包括`dependencies`字段，以列出具有确切版本的子依赖项。
- en: Note
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`package-lock.json` should be distributed with the source code of the project
    and should be committed to the repository; basically, it should be treated as
    `package.json` in terms of distribution.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`package-lock.json`应与项目的源代码一起分发，并应提交到仓库；基本上，它应该被视为分发中的`package.json`。'
- en: Now that we know how to classify and organize the dependencies in our projects,
    it is time to explore how to install specific versions and notice outdated dependencies.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道如何对项目中的依赖项进行分类和组织，是时候探索如何安装特定版本并注意过时的依赖项了。
- en: Managing dependencies versions
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理依赖项版本
- en: 'If we want to install a specific version of a package, we can use the @ symbol.
    You can be as specific as you want:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要安装特定版本的软件包，可以使用@符号。你可以尽可能具体：
- en: '[PRE13]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Outdated dependencies
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过时的依赖项
- en: 'Eventually, the dependencies that we have installed in our project will be
    outdated, and we will need to update them. To check if we have any outdated dependencies,
    we can use the `outdated` command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们项目中安装的依赖项将过时，我们需要更新它们。要检查我们是否有任何过时的依赖项，我们可以使用`outdated`命令：
- en: '[PRE14]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This command will list all the outdated dependencies, as well as the current
    version, the wanted version, and the latest version:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将列出所有过时的依赖项，包括当前版本、所需版本和最新版本：
- en: '[PRE15]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now that we are clear on how to handle outdated dependencies it is time to explore
    in the next section how to create isomorphic JavaScript code that can be executed
    in all environments (browsers and Node.js)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经清楚如何处理过时的依赖项，是时候在下一节中探索如何创建可以在所有环境中执行（浏览器和Node.js）的同构JavaScript代码了。
- en: Building Isomorphic JavaScript
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 同构 JavaScript
- en: Isomorphic JavaScript is a term that is used to describe JavaScript code that
    can run both in the browser and in Node.js. In other words, it is a library that
    can be used in both environments. In order to do that, you will limit yourself
    to the features that are available in both environments.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 同构 JavaScript 是一个用来描述可以在浏览器和 Node.js 中运行的 JavaScript 代码的术语。换句话说，它是一个可以在两种环境中使用的库。为了做到这一点，你将限制自己在两种环境中都有的功能。
- en: For example, you can’t use the `fs` module in the browser, and you can’t use
    the `window` object in Node.js.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你无法在浏览器中使用 `fs` 模块，也无法在 Node.js 中使用 `window` 对象。
- en: Sometimes, we install dependencies in our projects that are designed to be used
    in the browser and we try to use them in Node.js, and vice versa. This is a common
    mistake that we need to avoid.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们在项目中安装了设计用于在浏览器中使用的依赖项，我们试图在 Node.js 中使用它们，反之亦然。这是一个我们需要避免的常见错误。
- en: 'Most of the projects will specify which environment they are designed for.
    Here is an example from Lodash ([https://lodash.com/](https://lodash.com/)):'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '大多数项目都会指定它们是为哪种环境设计的。以下是一个来自 Lodash 的例子 ([https://lodash.com/](https://lodash.com/)):'
- en: '![](img/B21678_06_05.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21678_06_05.jpg)'
- en: Figure 6.5 – Image from the Lodash documentation that explains in detail how
    to install the library in both environments ([https://lodash.com/](https://lodash.com/))
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 来自 Lodash 文档的图片，详细解释了如何在两种环境中安装库 ([https://lodash.com/](https://lodash.com/))
- en: It is quite clear that lodash is designed to be used in Node.js and in the browser,
    and from the figure you can see how to install it in each environment.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，lodash 是设计用于在 Node.js 和浏览器中使用的，从图中你可以看到如何在每个环境中安装它。
- en: In the next section, we will learn how we can use npm scripts to improve our
    developer experience while building Node.js projects.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用 npm 脚本来提高我们在构建 Node.js 项目时的开发者体验。
- en: Using npm scripts
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 npm 脚本
- en: 'npm scripts are commands that we can define in the `package.json` file. These
    commands can be executed using the `run` command:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: npm 脚本是我们可以定义在 `package.json` 文件中的命令。这些命令可以使用 `run` 命令来执行：
- en: '[PRE16]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is great because we can define our own commands and we can use them to
    automate tasks. For example, we can define a command to run the linter in our
    project:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这很棒，因为我们可以定义自己的命令，并可以使用它们来自动化任务。例如，我们可以定义一个命令来在我们的项目中运行代码检查器：
- en: '[PRE17]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then we can run the following command:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以运行以下命令：
- en: '[PRE18]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: npm scripts are basically shortcuts to run commands that we can run manually
    in the terminal. So, you can build quite complex things such as starting/stopping
    a server, running tests, preparing infrastructure, and deploying your application.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: npm 脚本基本上是运行我们可以在终端中手动运行的命令的快捷方式。因此，你可以构建相当复杂的东西，比如启动/停止服务器、运行测试、准备基础设施以及部署你的应用程序。
- en: This is a very powerful feature that we can use to automate tasks in our projects,
    especially when we are working in a team, and we want to make sure that everyone
    is running the same commands or with continuous integration tools.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常强大的功能，我们可以用它来自动化项目中的任务，尤其是在我们作为一个团队工作时，我们想要确保每个人都在运行相同的命令或使用持续集成工具。
- en: We will use npm scripts in the next chapters to automate tasks in our projects.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中使用 npm 脚本来自动化项目中的任务。
- en: Executing packages directly with NPX
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接使用 NPX 执行包
- en: Since version 5.2.0, npm comes with a new tool called `npx`, which allows us
    to execute packages without installing them globally. This is great for one-time
    commands.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 5.2.0 版本以来，npm 附带了一个名为 `npx` 的新工具，它允许我们在不全局安装的情况下执行包。这对于一次性命令来说非常棒。
- en: 'Let’s say that we have a project with outdated dependencies, and we want to
    update them:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个具有过时依赖项的项目，我们想要更新它们：
- en: '[PRE19]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As we saw in the previous section, we can use the `npm outdated` command to
    check which dependencies are outdated, but the upgrade process is a bit more complex
    as we need to upgrade each dependency manually or modify the `package.json` directly.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中看到的，我们可以使用 `npm outdated` 命令来检查哪些依赖项已经过时，但升级过程要复杂一些，因为我们需要手动升级每个依赖项或直接修改
    `package.json`。
- en: 'Fortunately, there is a package called npm-check-updates ([https://www.npmjs.com/package/npm-check-updates](https://www.npmjs.com/package/npm-check-updates)),
    which allows us to upgrade all the dependencies in our project. Let’s learn how
    to use it:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一个名为 npm-check-updates ([https://www.npmjs.com/package/npm-check-updates](https://www.npmjs.com/package/npm-check-updates))
    的包，它允许我们升级项目中所有的依赖项。让我们学习如何使用它：
- en: '[PRE20]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This command will list all the outdated dependencies, and will show the new
    version that is available:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将列出所有过时的依赖，并显示可用的最新版本：
- en: '[PRE21]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then we can use the `-u` flag to upgrade all the dependencies:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`-u`标志升级所有依赖：
- en: '[PRE22]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `npm-check-updates` package offers a lot of options to customize the upgrade
    process, you can check the documentation at [https://www.npmjs.com/package/npm-check-updates](https://www.npmjs.com/package/npm-check-updates)
    for more information.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm-check-updates` 包提供了许多选项来自定义升级过程，你可以查看[https://www.npmjs.com/package/npm-check-updates](https://www.npmjs.com/package/npm-check-updates)文档获取更多信息。'
- en: 'The dependencies were upgraded in `package.json`, we just need to run `npm
    install` to make the changes take effect:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在`package.json`中升级了依赖，我们只需运行`npm install`即可使更改生效：
- en: '[PRE23]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, we can take an extra step and automate this process using npm scripts,
    so in the future, we can speed up this process, and we do this just by adding
    the following scripts to your `package.json` file:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过在`package.json`文件中添加以下脚本来自动化此过程，这样我们就可以在未来加快此过程，我们只需添加以下脚本即可：
- en: '[PRE24]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This was a great example of how you can combine npm scripts and npx to automate
    tasks in your projects and increase the developer experience for other contributors
    as they can run the same command to upgrade the dependencies when needed.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的例子，说明了如何结合npm脚本和npx来自动化项目中的任务，并提高其他贡献者的开发者体验，因为他们可以在需要时运行相同的命令来升级依赖。
- en: Also, this combination is great for continuous integration tools, as you can
    run the same commands in your CI pipeline.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这种组合对于持续集成工具来说非常好，因为你可以在你自己的CI管道中运行相同的命令。
- en: But the most important thing is that you don’t need to install any global or
    local packages, so you keep your dependencies to a minimum.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 但最重要的是，你不需要安装任何全局或本地包，这样你可以将依赖保持在最低限度。
- en: In the next section we are going to learn more about the current alternatives
    to npm.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将了解关于npm当前替代方案的更多信息。
- en: npm alternatives
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: npm替代方案
- en: Over the years, npm has become the standard package manager for JavaScript,
    but there are other alternatives that you can use in your projects.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，npm已经成为JavaScript的标准包管理器，但还有其他替代方案可以在你的项目中使用。
- en: Most of the alternatives are compatible with the npm registry, so you can use
    the same packages that you use with npm and you can switch between them without
    any problem.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数替代方案都与npm注册表兼容，所以你可以使用与npm相同的包，并且可以在它们之间无缝切换。
- en: Each alternative has its own advantages and disadvantages, so you need to evaluate
    which one is the best for your project. Most of the time, npm will be the best
    option, but it is good to know that there are other alternatives designed to solve
    very specific scenarios.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 每个替代方案都有其自身的优缺点，所以你需要评估哪个最适合你的项目。大多数情况下，npm将是最佳选择，但了解还有其他专为解决特定场景设计的替代方案是很好的。
- en: 'Let’s introduce some of them:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们介绍其中的一些：
- en: Yarn
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Yarn
- en: '**Yarn** ([https://yarnpkg.com/](https://yarnpkg.com/)) is a package manager
    created by Facebook and released in 2016\. It was created to solve some specific
    problems that npm had at that time, but over the years, npm has improved a lot
    and it has solved most of the problems that Yarn solved originally.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**Yarn** ([https://yarnpkg.com/](https://yarnpkg.com/))是由Facebook创建并于2016年发布的包管理器。它是为了解决npm当时的一些特定问题而创建的，但多年来，npm已经取得了很大的进步，并解决了Yarn最初解决的问题中的大部分。'
- en: PNPM
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PNPM
- en: '`node_modules` folder, it creates a single folder for all the dependencies
    in the project. This approach has some advantages such as disk space usage and
    network usage.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`node_modules` 文件夹，它为项目中的所有依赖创建一个单独的文件夹。这种方法有一些优点，比如磁盘空间使用和网络使用。'
- en: Verdaccio
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Verdaccio
- en: '**Verdaccio** ([https://verdaccio.org/](https://verdaccio.org/)) is a private
    npm registry that you can use to host your own packages. This is great if you
    want to have a private registry for your company or if you want to have a mirror
    of the npm registry.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**Verdaccio** ([https://verdaccio.org/](https://verdaccio.org/))是一个私有npm注册表，你可以用它来托管自己的包。如果你想要为你的公司拥有一个私有注册表，或者想要有一个npm注册表的镜像，这是一个很好的选择。'
- en: Note
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Verdaccio is a great tool if you have connectivity issues or if you want to
    experiment with the npm registry before publishing the packages.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到连接问题或想在发布包之前尝试npm注册表，Verdaccio是一个很好的工具。
- en: In the next section we will learn how to publish and distribute our own packages
    so we can re-use our code across projects. Also, other developers can use the
    libraries that we built.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何发布和分发我们自己的包，这样我们就可以在项目之间重用我们的代码。此外，其他开发者也可以使用我们构建的库。
- en: Publishing your first package
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布您的第一个包
- en: We have seen how to install packages from the npm registry, but we can also
    publish our own packages. This is great if we want to share our code with other
    developers or if we want to reuse our code in other projects.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何从npm注册表中安装包，但我们也可以发布我们自己的包。如果我们想与其他开发者共享我们的代码或者想在其他项目中重用我们的代码，这会非常棒。
- en: So, let’s see how to publish our first package in the npm registry.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们看看如何在我们第一次在npm注册表中发布我们的包。
- en: Registries
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册表
- en: Before we start, we need to understand how the npm registry works. The npm registry
    is a public repository where all the packages are stored. This is the default
    registry that npm uses, but you can also use other registries such as Verdaccio
    ([https://verdaccio.org/](https://verdaccio.org/)) or GitHub Packages ([https://github.com/features/packages](https://github.com/features/packages)).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们需要了解npm注册表是如何工作的。npm注册表是一个公共仓库，其中存储了所有包。这是npm默认使用的注册表，但您也可以使用其他注册表，例如Verdaccio（[https://verdaccio.org/](https://verdaccio.org/)）或GitHub
    Packages（[https://github.com/features/packages](https://github.com/features/packages)）。
- en: We will use the npm registry in this chapter, but the process is very similar
    for other registries. Some developers publish their packages in multiple registries,
    so you can choose the one that you prefer.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中使用npm注册表，但过程与其他注册表非常相似。一些开发者会在多个注册表中发布他们的包，因此您可以选择您喜欢的。
- en: Note
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to publish a private package, it is more common to use a private
    registry such as Verdaccio or GitHub Packages, but if you want to publish a public
    package, the npm registry is the best option.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想发布一个私有包，更常见的是使用私有注册表，如Verdaccio或GitHub Packages，但如果您想发布一个公开包，npm注册表是最佳选择。
- en: npm account
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: npm account
- en: Before we can publish our packages, we need to create an account in the npm
    registry. You can create an account on the npm website ([https://www.npmjs.com/signup](https://www.npmjs.com/signup))
    by following the steps in the next section ([https://docs.npmjs.com/creating-a-new-npm-user-account](https://docs.npmjs.com/creating-a-new-npm-user-account)).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够发布我们的包之前，我们需要在npm注册表中创建一个账户。您可以通过在npm网站上遵循下一节中的步骤（[https://docs.npmjs.com/creating-a-new-npm-user-account](https://docs.npmjs.com/creating-a-new-npm-user-account)）来创建一个账户（[https://www.npmjs.com/signup](https://www.npmjs.com/signup)）。
- en: Prepare the package
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备包
- en: So, let’s start by creating a new folder for our package with the name `my-first-package`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们首先为我们的包创建一个名为`my-first-package`的新文件夹。
- en: 'We will create a `package.json` file with the following content:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个包含以下内容的`package.json`文件：
- en: '[PRE25]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You will need to replace `@USERNAME` with your npm username, which is `@ulisesgascon`
    in my case, and also change the `author` field with your name.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将`@USERNAME`替换为您自己的npm用户名，在我的情况下是`@ulisesgascon`，并且还需要将`author`字段更改为您的名字。
- en: 'Then, we will create an `index.mjs` file with the following content:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个包含以下内容的`index.mjs`文件：
- en: '[PRE26]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The last step is to include a `README.md` file with some information about
    the package:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是包含一个包含有关包信息的`README.md`文件：
- en: '[PRE27]bash'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE27]bash'
- en: npm install @USERNAME/demo-package
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: npm install @USERNAME/demo-package
- en: '[PRE28]js'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE28]js'
- en: import { sum } from '@USERNAME/demo-package'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: import { sum } from '@USERNAME/demo-package'
- en: console.log(sum(1, 2))
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(sum(1, 2))
- en: '[PRE29]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Replace `@USERNAME` with your npm username as we did previously with the `package.json`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 将`@USERNAME`替换为您之前在`package.json`中使用的npm用户名。
- en: This is a very simple package, but it is enough to show how to publish a package
    in the npm registry.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的包，但足以展示如何在npm注册表中发布一个包。
- en: Reviewing the package
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查包
- en: 'Now that we have our package ready, we can publish it in the npm registry.
    To do that, we need to run the following command in the terminal:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了我们的包，我们可以在npm注册表中发布它。为此，我们需要在终端中运行以下命令：
- en: '[PRE30]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `--dry-run` flag is optional, but it is a good idea to use it the first
    time to see what is going to happen. This command will show you the files that
    are going to be published and some information about the package.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`--dry-run`标志是可选的，但第一次使用时使用它是个好主意，这样可以看到将要发生什么。此命令将显示将要发布的文件以及有关包的一些信息。'
- en: '[PRE31]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'As you can see, there is a file that is not needed, the `.vscode/settings.json`
    file. This file is used by Visual Studio Code to configure the editor, but it
    is not needed in the package. We can remove it by adding a `.npmignore` file with
    the following content:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，有一个不需要的文件，即`.vscode/settings.json`文件。这个文件由Visual Studio Code用于配置编辑器，但在包中并不需要。我们可以通过添加以下内容的`.npmignore`文件来删除它：
- en: '[PRE32]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This file will tell npm to ignore the `.vscode` folder when publishing the
    package. If you run the command again, you will see that the file is not included
    in the package:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件将告诉npm在发布包时忽略`.vscode`文件夹。如果你再次运行命令，你会看到这个文件没有被包含在包中：
- en: '[PRE33]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Publish the package
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布包
- en: 'Now that we have our package ready, we can publish it in the npm registry.
    To do that, we need to run the following command in the terminal:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了我们的包，我们可以在npm注册表中发布它。要做到这一点，我们需要在终端中运行以下命令：
- en: '[PRE34]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `--access public` flag makes this package available to the world, so anyone
    with internet access can download your package.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`--access public`标志使这个包对全世界开放，因此任何有互联网访问的人都可以下载你的包。'
- en: 'You can see in the output that the package is published in the npm registry:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在输出中看到这个包已经发布在npm注册表中：
- en: '[PRE35]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, if you go to the npm website ([https://www.npmjs.com/](https://www.npmjs.com/))
    and search for your package, you will see it in the search results. You can also
    access the package page directly using the following URL: `https://www.npmjs.com/package/@USERNAME/demo-package`
    (replace `@USERNAME` with your npm username, which is `@ulisesgascon` in my case).'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你去npm网站([https://www.npmjs.com/](https://www.npmjs.com/))并搜索你的包，你将在搜索结果中看到它。你也可以直接使用以下URL访问包页面：`https://www.npmjs.com/package/@USERNAME/demo-package`（将`@USERNAME`替换为你的npm用户名，在我的情况下是`@ulisesgascon`）。
- en: '![](img/B21678_06_06.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21678_06_06.jpg)'
- en: Figure 6.6 – The published package in the npm registry
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – npm注册表中的已发布包
- en: Avoid the scoped packages
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免使用作用域包
- en: It is possible to publish packages without a scope in the npm registry, but
    it is difficult to find a name that is not already taken. For that reason, it
    is a good idea to use the scoped packages, such as `@ulisesgascon/demo-package`
    in our case.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在npm注册表中发布没有作用域的包是可能的，但找到一个未被占用的名字很难。因此，使用作用域包是一个好主意，比如在我们的例子中，使用`@ulisesgascon/demo-package`。
- en: But nothing stops you from publishing a package without a scope such as `my-great-demo-package`
    if the name is not already taken. But if you do that, you will need to be careful
    with the name, because once you publish a package, you can’t change the name.
    So, if you want to change the name, you will need to publish a new package with
    the new name and deprecate the old one.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 但没有任何阻止你发布一个没有作用域的包，比如`my-great-demo-package`，如果这个名字还没有被占用。但如果你这么做，你需要小心选择名字，因为一旦你发布了包，你就不能更改名字。所以，如果你想更改名字，你需要用新名字发布一个新的包，并废弃旧的包。
- en: Release new versions
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布新版本
- en: 'Let’s make some changes to improve our package. We will add a new `multiply`
    function to the `index.mjs` file:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一些修改来改进我们的包。我们将在`index.mjs`文件中添加一个新的`multiply`函数：
- en: '[PRE36]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We will also include it in the `README.md` file:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也将它包含在`README.md`文件中：
- en: '[PRE37]js'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE37]js'
- en: import { sum, multiply } from '@ulisesgascon/demo-package'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { sum, multiply } from ''@ulisesgascon/demo-package'''
- en: console.log(sum(1, 2))
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log(sum(1, 2))`'
- en: console.log(multiply(5, 2))
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log(multiply(5, 2))`'
- en: '[PRE38]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, we are ready to publish again the package using `npm publish --access
    public` again, but there is an error:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们再次准备好使用`npm publish --access public`发布包，但出现了一个错误：
- en: '[PRE39]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We forgot to change the version number in the `package.json` file, so we need
    to do that before publishing the package again. We should always follow semantic
    versioning ([https://semver.org/](https://semver.org/)), so in this case we will
    change the version number to `1.1.0` as it is a minor change, we can make this
    change using the `npm version minor` command and as a result, we can see that
    `package.json` has been updated as expected:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们忘记在`package.json`文件中更改版本号，所以在再次发布包之前我们需要做这个更改。我们应该始终遵循语义版本控制([https://semver.org/](https://semver.org/))，所以在这种情况下，我们将版本号更改为`1.1.0`，因为它是一个小版本更改，我们可以使用`npm
    version minor`命令来执行这个更改，结果我们可以看到`package.json`已经按预期更新：
- en: '[PRE40]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, we can publish the package again and we will see the new version on the
    npm website and in the terminal:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以再次发布这个包，我们将在npm网站和终端中看到新版本：
- en: '[PRE41]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'If we check the npm URL again, we can see the new version available and the
    changes we made:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次检查npm URL，我们可以看到新的版本和我们所做的更改：
- en: '![](img/B21678_06_07.jpg)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21678_06_07.jpg)'
- en: Figure 6.7 – The published package updated in npm
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 在 npm 中更新的已发布包
- en: Prevent accidental publishing
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止意外发布
- en: 'While not very common, it is possible to publish a package by mistake, so it
    is a good idea to prevent that by adding the `private` flag to the `package.json`
    file if you don’t plan to publish the package:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不太常见，但有可能意外发布一个包，所以如果你不打算发布包，通过在 `package.json` 文件中添加 `private` 标志来防止这种情况是个好主意：
- en: '[PRE42]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Best practices
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最佳实践
- en: Now that we know how to create and publish a package, it is time to talk about
    quality. The best packages have a high-level standard and follow the best practices.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道了如何创建和发布一个包，是时候讨论质量了。最好的包具有高级标准并遵循最佳实践。
- en: 'Some of the best practices are quite advanced, so we will not cover them in
    this book, but here are two great resources to learn more about them:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最佳实践相当高级，所以我们不会在本书中涵盖它们，但这里有两大资源，可以了解更多关于它们的信息：
- en: Best practices for creating a modern npm package with security in mind ([https://snyk.io/blog/best-practices-create-modern-npm-package/](https://snyk.io/blog/best-practices-create-modern-npm-package/))
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑到安全性创建现代 npm 包的最佳实践（[https://snyk.io/blog/best-practices-create-modern-npm-package/](https://snyk.io/blog/best-practices-create-modern-npm-package/））
- en: 10 npm Security Best Practices ([https://snyk.io/blog/ten-npm-security-best-practices/](https://snyk.io/blog/ten-npm-security-best-practices/))
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10 个 npm 安全最佳实践 ([https://snyk.io/blog/ten-npm-security-best-practices/](https://snyk.io/blog/ten-npm-security-best-practices/））
- en: Summary
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored how to create a package from scratch, and how to
    install and maintain our dependencies over time. We learned how to use the `package.json`
    file to manage our dependencies, and how to use the `package-lock.json` file to
    lock the dependencies versions.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何从头开始创建一个包，以及如何随着时间的推移安装和维护我们的依赖项。我们学习了如何使用 `package.json` 文件来管理我们的依赖项，以及如何使用
    `package-lock.json` 文件来锁定依赖项版本。
- en: Additionally, we learned how to use npm scripts to automate tasks, and how to
    use global dependencies and `npx` to run commands without installing them globally.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还学习了如何使用 npm 脚本来自动化任务，以及如何使用全局依赖和 `npx` 来运行命令而无需全局安装它们。
- en: Finally, we learned how to create our own packages and publish them in the npm
    registry, and how to update them over time.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了如何创建我们自己的包并在 npm 注册表中发布它们，以及如何随着时间的推移更新它们。
- en: In the next chapter, we will learn how to take advantage of the event-driven
    architecture in Node.js to create our own events and listen to them, and how core
    libraries such as HTTP use events to notify us about incoming requests and much
    more. We will build our first web server using the HTTP library.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何利用 Node.js 中的事件驱动架构来创建我们自己的事件并监听它们，以及如何使用像 HTTP 这样的核心库通过事件来通知我们关于传入请求的更多信息。我们将使用
    HTTP 库构建我们的第一个网络服务器。
- en: Further reading
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Happy Developers, Healthy Modules - Together We Can Do This - Michael Dawson,*
    *IBM* ([https://www.youtube.com/watch?v=e7tj_IbHEF4](https://www.youtube.com/watch?v=e7tj_IbHEF4))'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*快乐的开发者，健康的模块 - 我们可以一起做到这一点 - 迈克尔·道森，IBM* ([https://www.youtube.com/watch?v=e7tj_IbHEF4](https://www.youtube.com/watch?v=e7tj_IbHEF4））'
- en: '*What is npm, and why do we need it? | Tutorial for* *beginners* ([https://www.youtube.com/watch?v=P3aKRdUyr0s](https://www.youtube.com/watch?v=P3aKRdUyr0s))'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*什么是 npm，为什么我们需要它？| 初学者教程* ([https://www.youtube.com/watch?v=P3aKRdUyr0s](https://www.youtube.com/watch?v=P3aKRdUyr0s））'
- en: '*Package.json vs* *Package-lock.json* ([https://www.atatus.com/blog/package-json-vs-package-lock-json/](https://www.atatus.com/blog/package-json-vs-package-lock-json/))'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*package.json 与 package-lock.json* ([https://www.atatus.com/blog/package-json-vs-package-lock-json/](https://www.atatus.com/blog/package-json-vs-package-lock-json/））'
- en: '*Best practices for creating a modern npm package with security in* *mind*
    ([https://snyk.io/blog/best-practices-create-modern-npm-package/](https://snyk.io/blog/best-practices-create-modern-npm-package/))'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*考虑安全性的现代 npm 包创建最佳实践* ([https://snyk.io/blog/best-practices-create-modern-npm-package/](https://snyk.io/blog/best-practices-create-modern-npm-package/））'
- en: '*What is a backdoor? Let’s build one with* *Node.js* ([https://snyk.io/blog/what-is-a-backdoor/](https://snyk.io/blog/what-is-a-backdoor/))'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*后门是什么？让我们用* *Node.js* *来构建一个* ([https://snyk.io/blog/what-is-a-backdoor/](https://snyk.io/blog/what-is-a-backdoor/））'
- en: '*Juan Picado @ NodeTLV 22 - Deep dive into Verdaccio, a lightweight Node.js*
    *registry* ([https://www.youtube.com/watch?v=qRMucS3i3kQ&](https://www.youtube.com/watch?v=qRMucS3i3kQ&))'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Juan Picado @ NodeTLV 22 - 深入探讨轻量级 Node.js* *注册表* ([https://www.youtube.com/watch?v=qRMucS3i3kQ&](https://www.youtube.com/watch?v=qRMucS3i3kQ&））'
- en: '*Isaac Schlueter: How npm* *Works* ([https://www.youtube.com/watch?v=ShRDgdvlZQ8](https://www.youtube.com/watch?v=ShRDgdvlZQ8))'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*艾萨克·施卢特：如何使用npm* *([https://www.youtube.com/watch?v=ShRDgdvlZQ8](https://www.youtube.com/watch?v=ShRDgdvlZQ8))*)'
- en: '*Leveling up Monorepos with npm Workspaces - Ruy Adorno, DevOps.js Conference*
    *2022* ([https://www.youtube.com/watch?v=A-pWrajferM](https://www.youtube.com/watch?v=A-pWrajferM))'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用npm Workspaces提升单仓库水平 - 瑞伊·阿德诺，DevOps.js 会议 2022* *([https://www.youtube.com/watch?v=A-pWrajferM](https://www.youtube.com/watch?v=A-pWrajferM))*))'
- en: '*Ashley Williams | You don’t know* *npm* ([https://www.youtube.com/watch?v=g3_e5Sp9vd4](https://www.youtube.com/watch?v=g3_e5Sp9vd4))'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*阿什利·威廉姆斯 | 你不知道* *npm* *([https://www.youtube.com/watch?v=g3_e5Sp9vd4](https://www.youtube.com/watch?v=g3_e5Sp9vd4))*)'
