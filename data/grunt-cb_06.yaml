- en: Chapter 6. Deployment Preparations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章 部署准备
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Minifying HTML
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩 HTML
- en: Minifying CSS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩 CSS
- en: Optimizing images
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化图像
- en: Linting JavaScript code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查 JavaScript 代码
- en: Uglifying JavaScript code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩 JavaScript 代码
- en: Setting up RequireJS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 RequireJS
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Once our web application is built and its stability ensured, we can start preparing
    it for deployment to its intended market. This will mainly involve the optimization
    of the assets that make up the application. Optimization in this context mostly
    refers to compression of one kind or another, some of which might lead to performance
    increases too.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的网络应用程序构建完成并且稳定性得到保证，我们就可以开始为将其部署到目标市场做准备。这主要涉及优化构成应用程序的资产。在这个背景下，优化主要指的是某种形式的压缩，其中一些可能会带来性能提升。
- en: The focus on compression is primarily due to the fact that the smaller the asset,
    the faster it can be transferred from where it is hosted to a user's web browser.
    This leads to a much better user experience, and can sometimes be essential to
    the functioning of an application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 专注于压缩主要是由于资产越小，它从托管位置传输到用户网络浏览器就越快。这导致用户体验大大改善，有时对于应用程序的功能也是必不可少的。
- en: Minifying HTML
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 压缩 HTML
- en: In this recipe, we make use of the `contrib-htmlmin (0.3.0)` plugin to decrease
    the size of some **HTML** documents by **minifying** them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们使用 `contrib-htmlmin (0.3.0)` 插件通过压缩来减小一些 **HTML** 文档的大小。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用我们在 [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章. 使用 Grunt 入门") 中 *在项目中安装
    Grunt* 食谱中创建的基本项目结构。如果您还不熟悉其内容，请务必参考。
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps take us through creating a sample HTML document and configuring
    a task that minifies it:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个示例 HTML 文档并配置一个压缩它的任务：
- en: We'll start by installing the package that contains the `contrib-htmlmin` plugin
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将按照 [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章. 使用 Grunt 入门") 中 *安装插件* 食谱中提供的说明，安装包含
    `contrib-htmlmin` 插件的包。
- en: 'Next, we''ll create a simple HTML document called `index.html` in the `src`
    directory, which we''d like to minify, and add the following content in it:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在 `src` 目录中创建一个名为 `index.html` 的简单 HTML 文档，我们希望对其进行压缩，并在其中添加以下内容：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we''ll add the following `htmlmin` task to our configuration, which indicates
    that we''d like to have the white space and comments removed from the `src/index.html`
    file, and that we''d like the result to be saved in the `dist/index.html` file:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将向我们的配置中添加以下 `htmlmin` 任务，该任务表示我们希望从 `src/index.html` 文件中移除空白和注释，并且希望将结果保存到
    `dist/index.html` 文件中：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'The `removeComments` and `collapseWhitespace` options are used as examples
    here, as using the default `htmlmin` task will have no effect. Other minification
    options can be found at the following URL:'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里使用 `removeComments` 和 `collapseWhitespace` 选项作为示例，因为使用默认的 `htmlmin` 任务将不会有任何效果。其他压缩选项可以在以下网址找到：
- en: '[https://github.com/kangax/html-minifier#options-quick-reference](https://github.com/kangax/html-minifier#options-quick-reference)'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/kangax/html-minifier#options-quick-reference](https://github.com/kangax/html-minifier#options-quick-reference)'
- en: 'We can now run the task using the `grunt htmlmin` command, which should produce
    output similar to the following:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以使用 `grunt htmlmin` 命令运行任务，它应该产生类似于以下内容的输出：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we now take a look at the `dist/index.html` file, we will see that all white
    space and comments have been removed:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在查看 `dist/index.html` 文件，我们会看到所有空白和注释已经被移除：
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Minifying CSS
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 压缩 CSS
- en: In this recipe, we'll make use of the `contrib-cssmin (0.10.0)` plugin to decrease
    the size of some **CSS** documents by **minifying** them.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将使用 `contrib-cssmin (0.10.0)` 插件通过压缩来减小一些 **CSS** 文档的大小。
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章. 使用Grunt入门")中“在项目中安装Grunt”配方中创建的基本项目结构。如果您还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: The following steps take us through creating a sample CSS document and configuring
    a task that minifies it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们创建一个示例CSS文档并配置一个将其压缩的任务。
- en: We'll start by installing the package that contains the `contrib-cssmin` plugin
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将按照[第1章](part0015.xhtml#aid-E9OE1 "第1章. 使用Grunt入门")中“安装插件”配方提供的说明，安装包含`contrib-cssmin`插件的包，该配方位于[《使用Grunt入门》](https://wiki.example.org/getting_started_with_grunt)。
- en: 'Then, we''ll create a simple CSS document called `style.css` in the `src` directory,
    which we''d like to minify, and provide it with the following contents:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将在`src`目录中创建一个名为`style.css`的简单CSS文档，我们希望将其压缩，并提供以下内容：
- en: '[PRE4]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, we''ll add the following `cssmin` task to our configuration, which indicates
    that we''d like to have the `src/style.css` file compressed, and have the result
    saved to the `dist/style.min.css` file:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加以下`cssmin`任务到我们的配置中，该任务表示我们希望将`src/style.css`文件压缩，并将结果保存到`dist/style.min.css`文件中：
- en: '[PRE5]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can now run the task using the `grunt cssmin` command, which should produce
    the following output:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以使用`grunt cssmin`命令运行此任务，它应该产生以下输出：
- en: '[PRE6]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we take a look at the `dist/style.min.css` file that was produced, we will
    see that it has the compressed contents of the original `src/style.css` file:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们查看生成的`dist/style.min.css`文件，我们将看到它包含原始`src/style.css`文件的压缩内容：
- en: '[PRE7]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: There's more...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `cssmin` task provides us with several useful options that can be used in
    conjunction with its basic compression feature. We'll look at prefixing a banner,
    removing special comments, and reporting gzipped results.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`cssmin`任务为我们提供了几个有用的选项，可以与它的基本压缩功能一起使用。我们将探讨添加标题、移除特殊注释和报告gzip结果。'
- en: Prefixing a banner
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加标题
- en: 'In the case that we''d like to automatically include some information about
    the compressed result in the resulting CSS file, we can do so in a banner. A banner
    can be prepended to the result by supplying the desired banner content to the
    `banner` option, as shown in the following example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望在生成的CSS文件中自动包含有关压缩结果的一些信息，我们可以在标题中这样做。可以通过向`banner`选项提供所需的标题内容来将标题添加到结果之前，如下面的示例所示：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Removing special comments
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除特殊注释
- en: Comments that should not be removed by the minification process are called special
    comments and can be indicated using the "`/*! comment */`" markers. By default,
    the `cssmin` task will leave all special comments untouched, but we can alter
    this behavior by making use of the `keepSpecialComments` option.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 应该在压缩过程中保留的注释称为特殊注释，可以使用"`/*! comment */`"标记来表示。默认情况下，`cssmin`任务将保留所有特殊注释，但我们可以通过使用`keepSpecialComments`选项来改变这种行为。
- en: 'The `keepSpecialComments` option can be set to either the `*`, `1`, or `0`
    value. The `*` value is the default and indicates that all special comments should
    be kept, `1` indicates that only the first comment that is found should be kept,
    and `0` indicates that none of them should be kept. The following configuration
    will ensure that all comments are removed from our minified result:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`keepSpecialComments`选项可以设置为`*`、`1`或`0`的值。`*`值是默认值，表示应保留所有特殊注释，`1`表示仅保留找到的第一个注释，而`0`表示不应保留任何注释。以下配置将确保从我们的压缩结果中移除所有注释：'
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Reporting on gzipped results
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 报告gzip结果
- en: 'Reporting is useful to see exactly how well the `cssmin` task has compressed
    our CSS files. By default, the size of the targeted file and minified result will
    be displayed, but if we''d also like to see the gzipped size of the result, we
    can set the `report` option to `gzip`, as shown in the following example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 报告功能有助于查看`cssmin`任务如何压缩我们的CSS文件。默认情况下，将显示目标文件的大小和压缩结果的大小，但如果我们还想看到结果的gzip大小，可以将`report`选项设置为`gzip`，如下面的示例所示：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Optimizing images
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化图像
- en: In this recipe, we'll make use of the `contrib-imagemin (0.9.4)` plugin to decrease
    the size of images by compressing them as much as possible without compromising
    on their quality. This plugin also provides a plugin framework of its own, which
    is discussed at the end of this recipe.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用`contrib-imagemin (0.9.4)`插件通过尽可能压缩图片来减小图片大小，同时不牺牲其质量。此插件还提供了一个自己的插件框架，将在本菜谱的末尾进行讨论。
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中创建的基本项目结构，即“在项目中安装Grunt”菜谱中的内容，即*使用Grunt入门*。如果您还不熟悉其内容，请务必参考。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through configuring a task that will compress an
    image for our project.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们配置一个将压缩项目中的图片的任务。
- en: We'll start by installing the package that contains the `contrib-imagemin` plugin
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中“安装插件”菜谱中的说明安装包含`contrib-imagemin`插件的包。
- en: Next, we can ensure that we have an image called `image.jpg` in the `src` directory
    on which we'd like to perform optimizations.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以确保在`src`目录中有一个名为`image.jpg`的图片，我们希望对其进行优化。
- en: Tip
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: For the rest of this example, we'll make use of the sample image provided with
    the sample code that accompanies this recipe.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本例的其余部分，我们将使用与本菜谱一起提供的示例代码中的示例图片。
- en: 'Now, we''ll add the following `imagemin` task to our configuration and indicate
    that we''d like to have the `src/image.jpg` file optimized, and have the result
    saved to the `dist/image.jpg` file:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加以下`imagemin`任务到我们的配置中，并指出我们希望对`src/image.jpg`文件进行优化，并将结果保存到`dist/image.jpg`文件中：
- en: '[PRE11]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can then run the task using the `grunt imagemin` command, which should produce
    the following output:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`grunt imagemin`命令来运行任务，这应该会产生以下输出：
- en: '[PRE12]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If we now take a look at the `dist/image.jpg` file, we will see that its size
    has decreased without any impact on the quality.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在查看`dist/image.jpg`文件，我们将看到其大小已经减小，而质量没有受到影响。
- en: There's more...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The `imagemin` task provides us with several options that allow us to tweak
    its optimization features. We'll look at how to adjust the **PNG** compression
    level, disable the progressive **JPEG** generation, disable the interlaced **GIF**
    generation, specify **SVGO** plugins to be used, and use the `imagemin` plugin
    framework.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`imagemin`任务为我们提供了几个选项，允许我们调整其优化功能。我们将探讨如何调整**PNG**压缩级别，禁用渐进式**JPEG**生成，禁用交错**GIF**生成，指定要使用的**SVGO**插件，以及使用`imagemin`插件框架。'
- en: Adjusting the PNG compression level
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调整PNG压缩级别
- en: 'The compression of a PNG image can be increased by running the compression
    algorithm on it multiple times. By default, the compression algorithm is run 16
    times. This number can be changed by providing a number from `0` to `7` to the
    `optimizationLevel` option. The `0` value means that the compression is effectively
    disabled and `7` indicates that the algorithm should run 240 times. In the following
    configuration we set the compression level to its maximum:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过多次运行压缩算法，可以增加PNG图片的压缩。默认情况下，压缩算法运行16次。可以通过向`optimizationLevel`选项提供一个从`0`到`7`的数字来更改此数字。`0`值表示压缩实际上被禁用，而`7`表示算法应该运行240次。在以下配置中，我们将压缩级别设置为最大值：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Disabling the progressive JPEG generation
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁用渐进式JPEG生成
- en: Progressive JPEGs are compressed in multiple passes, which allows a low-quality
    version of them to quickly become visible and increase in quality as the rest
    of the image is received. This is especially helpful when displaying images over
    a slower connection.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 渐进式JPEG是通过多次压缩来压缩的，这使得它们的一个低质量版本可以快速变得可见，并在接收其余图像时提高质量。这在通过较慢的连接显示图像时特别有帮助。
- en: 'By default, the `imagemin` plugin will generate JPEG images in the progressive
    format, but this behavior can be disabled by setting the `progressive` option
    to `false`, as shown in the following example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`imagemin` 插件会以渐进式格式生成 JPEG 图像，但可以通过将 `progressive` 选项设置为 `false` 来禁用此行为，如下面的示例所示：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Disabling the interlaced GIF generation
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁用交错 GIF 生成
- en: An interlaced GIF is the equivalent of a progressive JPEG in that it allows
    the contained image to be displayed at a lower resolution before it has been fully
    downloaded, and increases in quality as the rest of the image is received.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 交错 GIF 与渐进式 JPEG 相当，因为它允许在完全下载之前以较低分辨率显示包含的图像，并在接收其余图像时提高质量。
- en: 'By default, the `imagemin` plugin will generate GIF images in the interlaced
    format, but this behavior can be disabled by setting the `interlaced` option to
    `false`, as shown in the following example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`imagemin` 插件会以交错格式生成 GIF 图像，但可以通过将 `interlaced` 选项设置为 `false` 来禁用此行为，如下面的示例所示：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Specifying SVGO plugins to be used
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定要使用的 SVGO 插件
- en: When optimizing SVG images, the SVGO library is used by default. This allows
    us to specify the use of various plugins provided by the SVGO library that each
    performs a specific function on the targeted files.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在优化 SVG 图像时，默认使用 SVGO 库。这允许我们指定使用 SVGO 库提供的各种插件，每个插件在目标文件上执行特定功能。
- en: Tip
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Refer to the following URL for more detailed instructions on how to use the
    svgo plugins options and the SVGO library:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下网址以获取有关如何使用 svgo 插件选项和 SVGO 库的更详细说明：
- en: '[https://github.com/sindresorhus/grunt-svgmin#available-optionsplugins](https://github.com/sindresorhus/grunt-svgmin#available-optionsplugins)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/sindresorhus/grunt-svgmin#available-optionsplugins](https://github.com/sindresorhus/grunt-svgmin#available-optionsplugins)'
- en: 'Most of the plugins in the library are enabled by default, but if we''d like
    to specifically indicate which of these should be used, we can do so using the
    `svgoPlugins` option. Here, we can provide an array of objects, where each contain
    a property with the name of the plugin to be affected, followed by a `true` or
    `false` value to indicate whether it should be activated. The following configuration
    disables three of the default plugins:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 库中的大多数插件默认启用，但如果我们想特别指出哪些应该使用，我们可以通过使用 `svgoPlugins` 选项来实现。在这里，我们可以提供一个对象数组，其中每个对象包含一个属性，表示要影响的插件名称，后跟一个
    `true` 或 `false` 值，以指示是否激活。以下配置禁用了三个默认插件：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Using the 'imagemin' plugin framework
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `imagemin` 插件框架
- en: In order to provide support for the various image optimization projects, the
    `imagemin` plugin has a plugin framework of its own that allows developers to
    easily create an extension that makes use of the tool they require.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持各种图像优化项目，`imagemin` 插件拥有自己的插件框架，允许开发者轻松创建一个扩展，以便使用他们所需的工具。
- en: Tip
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'You can get a list of the available plugin modules for the `imagemin` plugin''s
    framework at the following URL:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网址获取 `imagemin` 插件框架的可用插件模块列表：
- en: '[https://www.npmjs.com/browse/keyword/imageminplugin](https://www.npmjs.com/browse/keyword/imageminplugin)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.npmjs.com/browse/keyword/imageminplugin](https://www.npmjs.com/browse/keyword/imageminplugin)'
- en: The following steps will take us through installing and making use of the `mozjpeg`
    plugin to compress an image in our project. These steps start where the main recipe
    takes off.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们安装并使用 `mozjpeg` 插件来压缩项目中的图像。这些步骤从主配方开始。
- en: 'We''ll start by installing the `imagemin-mozjpeg` package using the `npm install
    imagemin-mozjpeg` command, which should produce the following output:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先使用 `npm install imagemin-mozjpeg` 命令安装 `imagemin-mozjpeg` 包，这将产生以下输出：
- en: '[PRE17]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'With the package installed, we need to import it into our configuration file,
    so that we can make use of it in our task configuration. We do this by adding
    the following line at the top of our `Gruntfile.js` file:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包安装完成后，我们需要将其导入到配置文件中，以便在任务配置中使用它。我们通过在 `Gruntfile.js` 文件的顶部添加以下行来实现：
- en: '[PRE18]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With the plugin installed and imported, we can now change the configuration
    of our `imagemin` task by adding the `use` option and providing it with the initialized
    plugin:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插件安装并导入后，我们现在可以更改 `imagemin` 任务的配置，通过添加 `use` 选项并提供初始化的插件：
- en: '[PRE19]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Finally, we can test our setup by running the task using the `grunt imagemin`
    command. This should produce an output similar to the following:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以通过运行 `grunt imagemin` 命令来测试我们的设置。这应该会产生类似于以下输出的结果：
- en: '[PRE20]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Linting JavaScript code
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查 JavaScript 代码
- en: In this recipe, we'll make use of the `contrib-jshint (0.11.1)` plugin to detect
    errors and potential problems in our JavaScript code. It is also commonly used
    to enforce code conventions within a team or project. As can be derived from its
    name, it's basically a Grunt adaptation for the JSHint tool.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用`contrib-jshint (0.11.1)`插件来检测JavaScript代码中的错误和潜在问题。它也常用于在团队或项目中强制执行代码约定。从其名称可以推断出，它基本上是JSHint工具的Grunt适配器。
- en: Getting ready
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中*在项目中安装Grunt*菜谱中创建的基本项目结构。如果你还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: The following steps take us through creating a sample JavaScript file and configuring
    a task that will scan and analyze it using the JSHint tool.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个样本JavaScript文件，并配置一个任务，使用JSHint工具扫描和分析它。
- en: We'll start by installing the package that contains the `contrib-jshint` plugin
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将按照[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中*安装插件*菜谱提供的说明安装包含`contrib-jshint`插件的包，该菜谱在*使用Grunt入门*中。
- en: 'Next, we''ll create a sample JavaScript file called `main.js` in the `src`
    directory, and add the following content in it:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在`src`目录中创建一个名为`main.js`的样本JavaScript文件，并在其中添加以下内容：
- en: '[PRE21]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'With our sample file ready, we can now add the following `jshint` task to our
    configuration. We''ll configure this task to target the sample file and also add
    a basic option that we require for this example:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的样本文件准备好了，现在我们可以将以下`jshint`任务添加到我们的配置中。我们将配置这个任务以针对样本文件，并添加一个基本选项，这是我们在这个例子中需要的：
- en: '[PRE22]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tip
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `undef` option is a standard JSHint option used specifically for this example
    and is not required for this plugin to function. Specifying this option indicates
    that we'd like to have errors raised for variables that are used without being
    explicitly defined.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`undef`选项是专门用于此示例的标准JSHint选项，并且对于此插件的功能不是必需的。指定此选项表示我们希望对未明确定义就使用的变量引发错误。'
- en: 'We can now run the task using the `grunt jshint` command, which should produce
    output informing us of the problems found in our sample file:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以使用`grunt jshint`命令来运行任务，这将生成输出，告诉我们样本文件中存在的问题：
- en: '[PRE23]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: There's more...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `jshint` task provides us with several options that allow us to change its
    general behavior, in addition to how it analyzes the targeted code. We'll look
    at how to specify standard JSHint options, specify globally defined variables,
    send reported output to a file, and prevent task failure on JSHint errors.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`jshint`任务为我们提供了几个选项，允许我们更改其一般行为，以及它如何分析目标代码。我们将探讨如何指定标准JSHint选项，指定全局定义的变量，将报告的输出发送到文件，以及在JSHint错误发生时防止任务失败。'
- en: Specifying standard JSHint options
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定标准JSHint选项
- en: The `contrib-jshint` plugin provides a simple way to pass all the standard JSHint
    options from the task's options object to the underlying JSHint tool.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`contrib-jshint`插件提供了一种简单的方法，将任务选项对象中的所有标准JSHint选项传递给底层的JSHint工具。'
- en: Tip
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'A list of all the options provided by the JSHint tool can be found at the following
    URL:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: JSHint工具提供的所有选项的列表可以在以下URL找到：
- en: '[http://jshint.com/docs/options/](http://jshint.com/docs/options/)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://jshint.com/docs/options/](http://jshint.com/docs/options/)'
- en: 'The following example adds the `curly` option to the task we created in our
    main recipe to enforce the use of curly braces wherever they are appropriate:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将`curly`选项添加到我们在主菜谱中创建的任务中，以强制在适当的地方使用花括号：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Specifying globally defined variables
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定全局定义的变量
- en: Making use of globally defined variables is quite common when working with JavaScript,
    which is where the `globals` option comes in handy. Using this option, we can
    define a set of global values that we'll use in the targeted code, so that errors
    aren't raised when JSHint encounters them.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 利用全局定义的变量在处理JavaScript时相当常见，这就是`globals`选项派上用场的地方。使用此选项，我们可以定义一组将在目标代码中使用的全局值，这样当JSHint遇到它们时就不会引发错误。
- en: 'In the following example, we indicate that the `console` variable should be
    treated as a global, and not raise errors when encountered:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们指出应将 `console` 变量视为全局变量，并在遇到时不会引发错误：
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Sending reported output to a file
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将报告输出发送到文件
- en: 'If we''d like to store the resulting output from our JSHint analysis, we can
    do so by specifying a path to a file that should receive it using the `reporterOutput`
    option, as shown in the following example:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望将 JSHint 分析的结果输出存储起来，我们可以通过指定一个文件路径来使用 `reporterOutput` 选项，如下面的示例所示：
- en: '[PRE26]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Preventing task failure on JSHint errors
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 防止任务因 JSHint 错误而失败
- en: The default behavior for the `jshint` task is to exit the running Grunt process
    once a JSHint error is encountered in any of the targeted files. This behavior
    becomes especially undesirable if you'd like to keep watching files for changes,
    even when an error has been raised.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `jshint` 任务，默认行为是在任何目标文件中遇到 JSHint 错误时退出正在运行的 Grunt 进程。如果你希望即使在出现错误的情况下也能继续监视文件变化，这种行为尤其不受欢迎。
- en: 'In the following example, we indicate that we''d like to keep the process running
    when errors are encountered by giving the `force` option a `true` value:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们指出当遇到错误时，我们希望保持进程运行，通过将 `force` 选项设置为 `true` 值来实现：
- en: '[PRE27]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Uglifying JavaScript Code
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混淆 JavaScript 代码
- en: In this recipe, we'll make use of the `contrib-uglify (0.8.0)` plugin to compress
    and mangle some files containing JavaScript code.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将使用 `contrib-uglify (0.8.0)` 插件来压缩和混淆包含 JavaScript 代码的一些文件。
- en: For the most part, the process of uglifying just removes all the unnecessary
    characters and shortens variable names in a source code file. This has the potential
    to dramatically reduce the size of the file, slightly increase performance, and
    make the inner workings of your publicly available code a little more obscure.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在很大程度上，压缩过程只是删除源代码文件中的所有不必要的字符并缩短变量名。这有可能显著减小文件大小，略微提高性能，并使你公开可用的代码的内部工作原理更加神秘。
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用在 [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。使用 Grunt 入门") 中创建的基本项目结构，即
    [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。使用 Grunt 入门") 的 *在项目中安装 Grunt* 食谱，*使用
    Grunt 入门*。如果你还不熟悉其内容，请务必参考。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through creating a sample JavaScript file and configuring
    a task that will uglify it.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个示例 JavaScript 文件并配置一个将对其进行混淆的任务。
- en: We'll start by installing the package that contains the `contrib-uglify` plugin
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照 [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。使用 Grunt 入门") 中提供的 *安装插件* 食谱中的说明安装包含
    `contrib-uglify` 插件的包，*使用 Grunt 入门*。
- en: 'Then, we can create a sample JavaScript file called `main.js` in the `src`
    directory, which we''d like to uglify, and provide it with the following contents:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以在 `src` 目录中创建一个名为 `main.js` 的示例 JavaScript 文件，我们希望对其进行压缩，并为其提供以下内容：
- en: '[PRE28]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'With our sample file ready, we can now add the following `uglify` task to our
    configuration, indicating the sample file as the target and providing a destination
    output file:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的示例文件准备就绪后，我们现在可以向配置中添加以下 `uglify` 任务，指定示例文件为目标并提供一个输出文件目的地：
- en: '[PRE29]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We can now run the task using the `grunt uglify` command, which should produce
    output similar to the following:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用 `grunt uglify` 命令运行任务，它应该产生类似于以下内容的输出：
- en: '[PRE30]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If we now take a look at the resulting `dist/main.js` file, we should see that
    it contains the uglified contents of the original `src/main.js` file.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在查看生成的 `dist/main.js` 文件，我们应该看到它包含原始 `src/main.js` 文件的压缩内容。
- en: There's more...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `uglify` task provides us with several options that allow us to change its
    general behavior and see how it uglifies the targeted code. We'll look at specifying
    standard UglifyJS options, generating source maps, and wrapping generated code
    in an enclosure.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`uglify` 任务为我们提供了几个选项，允许我们更改其一般行为并查看它如何混淆目标代码。我们将探讨指定标准 UglifyJS 选项、生成源映射以及将生成的代码包装在封装器中。'
- en: Specifying standard UglifyJS options
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定标准 UglifyJS 选项
- en: The underlying UglifyJS tool can provide a set of options for each of its separate
    functional parts. These parts are the mangler, compressor, and beautifier. The
    `contrib-plugin` allows passing options to each of these parts using the `mangle`,
    `compress`, and `beautify` options.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 基础的UglifyJS工具可以为它的每个独立功能部分提供一组选项。这些部分是扭曲器、压缩器和美化器。`contrib-plugin`插件允许使用`mangle`、`compress`和`beautify`选项将这些选项传递给这些部分。
- en: Tip
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'The available options for each of the mangler, compressor, and beautifier parts
    can be found at each of following URLs (listed in the order mentioned):'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对于扭曲器、压缩器和美化器各部分的可用选项，可以在以下每个URL中找到（按提到的顺序列出）：
- en: '[https://github.com/mishoo/UglifyJS2#mangler-options](https://github.com/mishoo/UglifyJS2#mangler-options)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/mishoo/UglifyJS2#mangler-options](https://github.com/mishoo/UglifyJS2#mangler-options)'
- en: '[https://github.com/mishoo/UglifyJS2#compressor-options](https://github.com/mishoo/UglifyJS2#compressor-options)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/mishoo/UglifyJS2#compressor-options](https://github.com/mishoo/UglifyJS2#compressor-options)'
- en: '[https://github.com/mishoo/UglifyJS2#beautifier-options](https://github.com/mishoo/UglifyJS2#beautifier-options)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/mishoo/UglifyJS2#beautifier-options](https://github.com/mishoo/UglifyJS2#beautifier-options)'
- en: 'The following example alters the configuration of the main recipe to provide
    a single option to each of these parts:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例修改了主要菜谱的配置，为这些部分中的每一个提供一个单独的选项：
- en: '[PRE31]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Generating source maps
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成源映射
- en: As code gets mangled and compressed, it becomes effectively unreadable to humans,
    and therefore, nearly impossible to debug. For this reason, we are provided with
    the option of generating a source map when uglifying our code.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 随着代码被扭曲和压缩，它对人类来说变得几乎无法阅读，因此，调试几乎变得不可能。正因为如此，我们才有了在压缩代码时生成源映射的选项。
- en: 'The following example makes use of the `sourceMap` option to indicate that
    we''d like to have a source map generated along with our uglified code:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用`sourceMap`选项来表示我们希望生成与我们的扭曲代码一起的源映射：
- en: '[PRE32]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Running the altered task will now, in addition to the `dist/main.js` file with
    our uglified source, generate a source map file called `main.js.map` in the same
    directory as the uglified file.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 运行修改后的任务现在除了包含我们扭曲源代码的`dist/main.js`文件外，还会在扭曲文件所在的同一目录中生成一个名为`main.js.map`的源映射文件。
- en: Wrapping generated code in an enclosure
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将生成的代码包装在封装器中
- en: When building your own JavaScript code modules, it's usually a good idea to
    have them wrapped in a wrapper function to ensure that you don't pollute the global
    scope with variables that you won't be using outside of the module itself.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建自己的JavaScript代码模块时，通常有一个好主意是将它们包装在一个包装函数中，以确保你不会将不会在模块本身之外使用的变量污染全局作用域。
- en: 'For this purpose, we can use the `wrap` option to indicate that we''d like
    to have the resulting uglified code wrapped in a wrapper function, as shown in
    the following example:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个目的，我们可以使用`wrap`选项来表示我们希望将生成的扭曲代码包装在一个包装函数中，如下面的示例所示：
- en: '[PRE33]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: If we now take a look at the result `dist/main.js` file, we should see that
    all the uglified contents of the original file are now contained within a wrapper
    function.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在查看结果`dist/main.js`文件，我们应该看到原始文件的所有扭曲内容现在都包含在一个包装函数中。
- en: Setting up RequireJS
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置RequireJS
- en: In this recipe, we'll make use of the `contrib-requirejs (0.4.4)` plugin to
    package the modularized source code of our web application into a single file.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用`contrib-requirejs (0.4.4)`插件将我们的Web应用程序的模块化源代码打包到一个文件中。
- en: For the most part, this plugin just provides a wrapper for the **RequireJS**
    tool. RequireJS provides a framework to modularize JavaScript source code and
    consume those modules in an orderly fashion. It also allows packaging an entire
    application into one file and importing only the modules that are required while
    keeping the module structure intact.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在很大程度上，这个插件只是为**RequireJS**工具提供了一个包装器。RequireJS提供了一个框架来模块化JavaScript源代码，并有序地消费这些模块。它还允许将整个应用程序打包到一个文件中，并只导入所需的模块，同时保持模块结构完整。
- en: Tip
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: To see the packaged application created in this recipe in action, please refer
    to the sample code provided for this recipe. It includes a basic development server
    setup as per the *Setting up a basic web server* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt* along with
    the required libraries and a sample `index.html` file that consumes the generated
    application bundle file.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看本配方中创建的捆绑应用程序的实际效果，请参阅为此配方提供的示例代码。它包括一个基本开发服务器设置，按照[第1章](part0015.xhtml#aid-E9OE1
    "第1章。使用Grunt入门")中“设置基本Web服务器”配方进行设置，以及所需的库和一个消耗生成的应用程序捆绑文件的示例`index.html`文件。
- en: Getting ready
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中“在项目中安装Grunt”配方中创建的基本项目结构。如果您还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: The following steps take us through creating some files for a sample application
    and setting up a task that bundles them into one file.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们创建一些用于示例应用程序的文件，并设置一个将它们捆绑成一个文件的任务。
- en: We'll start by installing the package that contains the `contrib-requirejs`
    plugin as per the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中“安装插件”配方提供的说明安装包含`contrib-requirejs`插件的包。
- en: 'First, we''ll need a file that will contain our RequireJS configuration. Let''s
    create a file called `config.js` in the `src` directory and add the following
    content in it:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要一个包含我们的RequireJS配置的文件。让我们在`src`目录下创建一个名为`config.js`的文件，并在其中添加以下内容：
- en: '[PRE34]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Secondly, we''ll create a sample module that we''d like to use in our application.
    Let''s create a file called `sample.j`s in the `src/app` directory and add the
    following content in it:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，我们将创建一个我们希望在应用程序中使用的示例模块。让我们在`src/app`目录下创建一个名为`sample.j`s的文件，并在其中添加以下内容：
- en: '[PRE35]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Lastly, we''ll need a file that will contain the main entry point for our application,
    and also makes use of our sample module. Let''s create a file called `main.js`
    in the `src/app` directory and add the following content in it:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要一个包含我们应用程序主入口点的文件，并使用我们的示例模块。让我们在`src/app`目录下创建一个名为`main.js`的文件，并在其中添加以下内容：
- en: '[PRE36]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now that we''ve got all the necessary files required for our sample application,
    we can setup a `requirejs` task that will bundle it all into one file:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了构建示例应用程序所需的所有必要文件，我们可以设置一个`requirejs`任务，将它们捆绑成一个文件：
- en: '[PRE37]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Tip
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `mainConfigFile` option points out the configuration file that will determine
    the behavior of RequireJS.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mainConfigFile`选项指出将确定RequireJS行为的配置文件。'
- en: The `name` option indicates the name of the module that contains the application
    entry point. In the case of this example, our application entry point is contained
    in the `app/main.js` file, and `app` is the base directory of our application
    in the `src/config.js` file. This translates the `app/main.js` filename into the
    `main` module name.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`name`选项表示包含应用程序入口点的模块的名称。在本例中，我们的应用程序入口点包含在`app/main.js`文件中，而`app`是我们在`src/config.js`文件中的应用程序的基本目录。这把`app/main.js`文件名转换成了`main`模块名称。'
- en: The `out` option is used to indicate the file that should receive the result
    of the bundled application.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`out`选项用于指示应接收捆绑应用程序结果的文件。'
- en: 'We can now run the task using the `grunt requirejs` command, which should produce
    output similar to the following:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以使用`grunt requirejs`命令运行任务，它应该产生类似于以下内容的输出：
- en: '[PRE38]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: We should now have a file named `app.js` in the `www/js` directory that contains
    our entire sample application.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们应该在`www/js`目录下有一个名为`app.js`的文件，其中包含我们的整个示例应用程序。
- en: There's more...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The `requirejs` task provides us with all the underlying options provided by
    the RequireJS tool. We'll look at how to use these exposed options and generate
    a source map.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`requirejs`任务为我们提供了由RequireJS工具提供的所有底层选项。我们将探讨如何使用这些公开的选项并生成源映射。'
- en: Using RequireJS optimizer options
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用RequireJS优化器选项
- en: The RequireJS optimizer is quite an intricate tool, and therefore, provides
    a large number of options to tweak its behavior. The `contrib-requirejs` plugin
    allows us to easily set any of these options by just specifying them as options
    of the plugin itself.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: RequireJS 优化器是一个非常复杂的工具，因此提供了大量的选项来调整其行为。`contrib-requirejs` 插件允许我们通过仅指定插件本身的选项来轻松设置这些选项。
- en: Tip
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'A list of all the available configuration options for the RequireJS build system
    can be found in the example configuration file at the following URL:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可用的 RequireJS 构建系统配置选项可以在以下 URL 的示例配置文件中找到：
- en: '[https://github.com/jrburke/r.js/blob/master/build/example.build.js](https://github.com/jrburke/r.js/blob/master/build/example.build.js)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/jrburke/r.js/blob/master/build/example.build.js](https://github.com/jrburke/r.js/blob/master/build/example.build.js)'
- en: 'The following example indicates that the **UglifyJS2** optimizer should be
    used instead of the default **UglifyJS** optimizer by using the `optimize` option:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例表明，应该使用 `optimize` 选项来使用 **UglifyJS2** 优化器而不是默认的 **UglifyJS** 优化器：
- en: '[PRE39]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Generating a source map
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成源映射
- en: When the source code is bundled into one file, it becomes somewhat harder to
    debug, as you now have to trawl through miles of code to get to the point you're
    actually interested in.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当源代码捆绑成一个文件时，调试会变得有些困难，因为你现在必须浏览大量的代码才能到达你真正感兴趣的地方。
- en: A source map can help us with this issue by relating the resulting bundled file
    to the modularized structure it is derived from. Simply put, with a source map,
    our debugger will display the separate files we had before, even though we're
    actually using the bundled file.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将生成的捆绑文件与其来源的模块化结构相关联，源映射可以帮助我们解决这个问题。简单来说，有了源映射，即使我们实际上使用的是捆绑文件，我们的调试器也会显示我们之前分开的文件。
- en: 'The following example makes use of the `generateSourceMap` option to indicate
    that we''d like to generate a source map along with the resulting file:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用了 `generateSourceMap` 选项来表明我们希望生成与结果文件一起的源映射：
- en: '[PRE40]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Tip
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In order to use the `generateSourceMap` option, we have to indicate that UglifyJS2
    is to be used for optimization, by setting the `optimize` option to `uglify2`,
    and that license comments should not be preserved, by setting the `preserveLicenseComments`
    option to `false`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 `generateSourceMap` 选项，我们必须通过将 `optimize` 选项设置为 `uglify2` 来表明应该使用 UglifyJS2
    进行优化，并且通过将 `preserveLicenseComments` 选项设置为 `false` 来表明不应保留许可证注释。
