- en: Chapter 13. Building an Advanced Chat App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章。构建高级聊天应用
- en: In the previous chapter, we developed a rudimentary chat application, which
    allowed an arbitrary number of users to connect to each other and talk anonymously.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们开发了一个基本的聊天应用程序，允许任意数量的用户相互连接并匿名交谈。
- en: In this chapter, we are going to expand this app and make it more advanced by
    adding features for chat rooms and notifications. In doing so, we will demonstrate
    how the concept of namespacing works on `socket.io`, which is one of the most
    important aspects of this library.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将扩展此应用程序，并通过添加聊天室和通知功能使其更加先进。在这样做的过程中，我们将演示`socket.io`上的命名空间概念是如何工作的，这是该库最重要的方面之一。
- en: We need some room!
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们需要一些空间！
- en: So far, the most advanced thing that we have done with WebSockets in our apps
    has simply been sending data back and forth across a single WebSocket interface.
    We paid very little attention to partitioning and basically just let it all go
    on as a free-for-all app. However, in real life, we will frequently find ourselves
    in situations where we want to partition WebSocket connections and only let certain
    users have access to a subset of partitions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在我们的应用程序中使用WebSockets做的最先进的事情就是在单个WebSocket接口之间来回发送数据。我们很少关注分区，基本上就让它自由发挥。然而，在现实生活中，我们经常会发现自己处于一种情况中，我们希望对WebSocket连接进行分区，并且只允许某些用户访问一部分分区。
- en: 'To see how this can work, consider the case of a *group chat*. Here, rather
    than having just a single solitary chat interface, users instead have access to
    a multitude of them; each hosts its own members and conversation. To implement
    this, we can extend our existing chat server to simply start new `node` instances
    for the chat rooms that we want to open, with each of them having its own port,
    as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要看看这是如何工作的，考虑一个*群聊*的情况。在这里，用户不是只有一个单独的聊天界面，而是可以访问多个聊天室；每个聊天室都有自己的成员和对话。为了实现这一点，我们可以扩展现有的聊天服务器，简单地为我们想要打开的聊天室启动新的`node`实例，每个实例都有自己的端口，如下所示：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: However, this becomes clunky very quickly. Since we will need to fire up a new,
    separate V8 instance for each server, chances are that we will very soon get angry
    knocks at the office window from the guy down the hall whose super-important stock
    analysis algorithm just crashed due to a lack of memory space. He may want to
    hurt us and do terrible things to our pets, all because we could not find a smoother
    way to make use of WebSockets.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这很快就变得笨拙了。因为我们将需要为每个服务器启动一个新的独立的V8实例，很可能很快就会听到办公室窗户外的那个人生气的敲击声，因为他的超级重要的股票分析算法由于缺乏内存空间而崩溃。他可能想伤害我们，并对我们的宠物做可怕的事情，所有这些都是因为我们找不到更顺畅的方式来使用WebSockets。
- en: Or, well, maybe we can, after all.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，也许我们可以，毕竟。
- en: This is where the concept of a namespace comes into play. Imagine a situation
    where we can just partition a single `socket.io` instance into several different
    endpoints, each of which can service its own set of clients. It turns out that
    we can!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是命名空间的概念发挥作用的地方。想象一种情况，我们可以将单个`socket.io`实例分成几个不同的端点，每个端点可以为自己的一组客户端提供服务。事实证明我们可以做到！
- en: Namespaces
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名空间
- en: 'Remember how we set up our original `websocket` server? For that take a look
    at the following code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们如何设置原始的`websocket`服务器吗？请看以下代码：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, we simply used the main `socket.io` instance in order to directly register
    socket connections and their respective callbacks. However, looking a little closer,
    what we actually did was connect all the incoming connections to a namespace,
    even if this happened implicitly. Take a look at the following snippet from the
    preceding code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是使用了主`socket.io`实例，以便直接注册套接字连接及其各自的回调。然而，仔细看一下，我们实际上是将所有传入的连接连接到一个命名空间，即使这是隐式发生的。看一下前面代码中的以下片段：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What is actually happening here is that we are registering the connections on
    the root namespace (written as /), which is the one namespace that `socket.io`
    gives us to work with even if we specify no other namespaces. This goes to show
    that namespaces are actually essential for the way `socket.io` works internally.
    In fact, every single connection that you have going will be associated with a
    single namespace, even if it is an implicit one!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上正在发生的是，我们正在在根命名空间（写为/）上注册连接，这是`socket.io`给我们的一个命名空间，即使我们没有指定其他命名空间。这表明命名空间实际上对`socket.io`内部的工作方式至关重要。事实上，您进行的每个连接都将与单个命名空间关联，即使它是隐式的！
- en: 'Your users connect to the root namespace whenever they connect directly to
    the URL of your WebSocket server. For example, they can do this by doing the following
    on the client side:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户直接连接到WebSocket服务器的URL时，他们会连接到根命名空间。例如，他们可以在客户端执行以下操作：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You are in effect telling `socket.io` that you wish to establish a connection
    to the root namespace.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您是在告诉`socket.io`，您希望建立与根命名空间的连接。
- en: The problem is that if we perform the preceding steps (as we have done until
    now), all the messages that we send to the server are open for broadcasting to
    all the other connected clients as well (this happens even if you have other namespaces
    defined, as we will see later). This is not very convenient if we want to concentrate
    on communications.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，如果我们执行前面的步骤（就像我们到目前为止所做的那样），我们发送到服务器的所有消息都会对所有其他连接的客户端进行广播（即使您定义了其他命名空间，我们稍后会看到）。如果我们想要集中精力进行通信，这并不是很方便。
- en: 'Let''s say that we want to divide communications in order to let users subscribe
    to `websocket` channels, which sends information that interests them. For example,
    let''s say that we are building a chat application that will let them speak about
    various programming languages such as Java, Scala, and JavaScript. In that case,
    we can define namespaces on the server side by doing the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要划分通信，以便让用户订阅`websocket`频道，发送他们感兴趣的信息。例如，假设我们正在构建一个聊天应用程序，让他们讨论Java、Scala和JavaScript等各种编程语言。在这种情况下，我们可以通过以下方式在服务器端定义命名空间：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The important parts of the code are emphasized. Note how we use the `of` function
    in order to create the actual namespace. The argument of the function is the name
    of the namespace relative to the root namespace (`/`).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的重要部分被强调了。注意我们如何使用`of`函数来创建实际的命名空间。函数的参数是相对于根命名空间(`/`)的命名空间的名称。
- en: After the namespace is created, we register `socket` connections in a way that
    is familiar to us by now after having (albeit unknowingly!) done the same thing
    with the root namespace earlier.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间创建后，我们以我们之前熟悉的方式注册`socket`连接（尽管在之前我们并不知情！）。
- en: 'We can now make use of these modifications to the server by having the client
    connect to any given namespace available. For example, for the ones that we have
    already defined here, you can connect to each of them like this (respectively):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过让客户端连接到任何给定的可用命名空间来利用这些修改对服务器进行操作。例如，对于我们已经在这里定义的命名空间，你可以像这样连接到每一个（分别）：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, proceed to operate on them just as you would in the case of any other
    single WebSocket connection, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，继续操作它们，就像在任何其他单个WebSocket连接的情况下一样，如下所示：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is all pretty straightforward, as you will note as you dig in a little
    deeper. Let's do so by dusting off the simple chat application that we wrote in
    the last chapter and giving it some genuine namespacing love.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都非常简单，当你深入了解时会注意到。让我们通过简单的聊天应用程序来实现，这个应用程序是我们在上一章中编写的，并且给它一些真正的命名空间爱。
- en: Creating a multiroom chat application
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个多房间聊天应用程序
- en: 'Let''s take a brief refresher on the basic **Chat App** that we built during
    the course of the previous chapter:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要回顾一下我们在上一章中构建的基本**聊天应用程序**。
- en: '![Creating a multiroom chat application](img/B04653_13_1.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个多房间聊天应用程序](img/B04653_13_1.jpg)'
- en: This app effectively sets up a connection to the WebSocket server and lets us
    talk to random strangers who, for some reason, are loitering in the kitchen and
    using the Wi-Fi connection. What we want to do here is give these strangers (and
    ourselves) the possibility to pick separate chat rooms depending on what they
    are keen to talk about. Since we love programming, programming languages are of
    course going to be the be-all-and-end-all of what is on the menu.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序有效地建立了与WebSocket服务器的连接，并让我们与一些随机的陌生人交谈，这些人因某种原因在厨房闲逛并使用Wi-Fi连接。我们想要做的是给这些陌生人（和我们自己）选择不同的聊天室的可能性，取决于他们想要谈论的内容。由于我们热爱编程，编程语言当然会成为菜单上的全部和结束。
- en: Configuring the basic layout
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置基本布局
- en: In order to create a nice way to navigate between different chat rooms, we will
    use a tabbed layout, where each tab will correspond to a single chat room.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个很好的方式在不同的聊天室之间导航，我们将使用一个分页布局，其中每个标签对应一个单独的聊天室。
- en: 'This means that we will need to make several changes to our HTML as well as
    the routing for our app. Start out by modifying the `index.html` file. Make sure
    that it looks like the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们需要对我们的HTML以及应用程序的路由进行一些更改。首先修改`index.html`文件。确保它看起来像下面的样子：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: I highlighted the most important part in the preceding code. Here, we created
    a navigation bar, which corresponds to a toolbar at the top of the screen in Ionic.
    If you are familiar with Android, you will recognize this as the action bar. Below
    this navigation bar, we then attached the actual view, which is currently loaded.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我在前面的代码中突出了最重要的部分。在这里，我们创建了一个导航栏，它对应于Ionic屏幕顶部的工具栏。如果你熟悉Android，你会认识到这是操作栏。在这个导航栏下面，我们附加了实际的视图，目前已经加载。
- en: 'Next, we will attach a series of `tabs` to this layout, which will let us select
    the chat room that we wish to interact with. In the templates folder, create a
    file named `tabs.html` and make sure that it has the following content:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在这个布局上附加一系列的`tabs`，这将让我们选择我们希望互动的聊天室。在模板文件夹中，创建一个名为`tabs.html`的文件，并确保它包含以下内容：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, we used the `ion-tabs` directive, which in essence acts like a horizontal
    list consisting of `ion-tab` instances. Note how we associate each tab with a
    single language view and URL. The router will use both in order to deduce the
    exact state the app should be in when a tab is clicked. Let''s see how it does
    so. Open the `app.js` file and make sure that it looks like the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了`ion-tabs`指令，本质上就像一个水平列表，由`ion-tab`实例组成。注意我们如何将每个标签与单个语言视图和URL相关联。路由器将使用这两者来推断标签被点击时应用程序应该处于的确切状态。让我们看看它是如何做到的。打开`app.js`文件，确保它看起来像下面的样子：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note how we coupled each single tab with a given application state. In doing
    so, we also tell the app how it should render the view under each tab. In our
    case, we have a common view for each single chat, `templates/app-chat`, which
    is familiar to us from our previous work. Let''s take a look at the following
    code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何将每个单个标签与特定的应用程序状态相结合。这样做，我们还告诉应用程序在每个标签下应该如何呈现视图。在我们的情况下，我们为每个单独的聊天有一个共同的视图`templates/app-chat`，这对我们来说是熟悉的，因为我们之前的工作中用过。让我们看看下面的代码：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, add some custom CSS to the `css/style.css` file in order to adjust
    the formatting according to our needs; this will also be familiar, as we saw this
    in the previous chapter:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`css/style.css`文件中添加一些自定义的CSS，以根据我们的需求调整格式；这也是熟悉的，因为我们在上一章中看到过这一点：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Your view should now look like what''s shown in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你的视图现在应该看起来像下面截图中显示的那样：
- en: '![Configuring the basic layout](img/B04653_13_2.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![配置基本布局](img/B04653_13_2.jpg)'
- en: 'Now, let''s add some actual logic to our app in order to get the actual chat
    logic going. We are going to implement the namespace pattern that we discussed
    earlier in this chapter, adding one room for each tab. First, define the following
    controller in the `app.controllers.js` file, as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为我们的应用程序添加一些实际的逻辑，以便让实际的聊天逻辑进行。我们将实现我们在本章前面讨论过的命名空间模式，为每个标签添加一个房间。首先，在`app.controllers.js`文件中定义以下控制器：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This controller works very much like what we are used to from the previous
    app, with the exception that it takes as a parameter the name of the chat room
    that we should connect to. This name is resolved in `app.js` in conjunction with
    the view being resolved, as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个控制器非常类似于我们从之前的应用程序中所熟悉的，唯一的区别是它以参数的形式接受我们应该连接到的聊天室的名称。这个名称在`app.js`中与视图一起解析，如下所示：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The relevant part is emphasized. We simply bind `chatRoom` to whatever the name
    of the corresponding language room for the view is in this case.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 强调相关部分。在这种情况下，我们只需将`chatRoom`绑定到视图对应的语言房间的名称。
- en: 'Finally, we need to expand the `ChatService` module in order to make sure that
    we can connect to an individual chat room. Open the `app.services.js` file and
    make sure that it has the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要扩展`ChatService`模块，以确保我们可以连接到单独的聊天室。打开`app.services.js`文件，并确保它具有以下内容：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In its previous incarnation, this service simply made a `socket` connection
    and serviced it. Here, we produce `socket` connections instead based on the namespace
    that we are connecting to. This allows us to set up a separate `service` instance
    for each individual `socket`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在其先前版本中，该服务只是建立了一个`socket`连接并为其提供服务。在这里，我们根据我们连接到的命名空间来生成`socket`连接。这使我们能够为每个单独的`socket`设置一个单独的`service`实例。
- en: That's all that we need for the client! Let's turn to the server in order to
    wrap things up.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是客户端所需要的全部！让我们转向服务器，以便结束一切。
- en: Building the server
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建服务器
- en: 'We have already seen how to create namespaces on the server. So, let''s adjust
    our own accordingly. However, in order to make it much neater, let''s do so by
    iterating over a list with all the names of the namespaces that we wish to create:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何在服务器上创建命名空间。因此，让我们相应地调整我们自己的。但是，为了使它更整洁，让我们通过迭代一个包含我们希望创建的所有命名空间名称的列表来做到这一点：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: That's it! You can now start up your server, connect the app to server, and
    try it out. Pay special attention to your `server` console when you switch between
    the rooms. You will see the separate connections to separate rooms being made.
    Finally, see for yourself that the namespacing actually works. The messages that
    you send to one chat will only be visible to the users who are already connected
    to it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！您现在可以启动服务器，连接应用程序到服务器，并尝试它。当您在房间之间切换时，请特别注意您的`服务器`控制台。您将看到对不同房间的单独连接正在建立。最后，亲自看看命名空间实际上是如何工作的。您发送到一个聊天的消息只会被已经连接到它的用户看到。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is actually possible to partition the `socket.io` connections even further
    than what we did here. The `socket.io` connection also features the concept of
    rooms, which are essentially partitions of a single namespace. We recommend that
    you study this closely. The official documentation of `socket.io` contains a great
    deal of examples. To view this documentation, visit [http://socket.io/docs/rooms-and-namespaces/](http://socket.io/docs/rooms-and-namespaces/).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们可以将`socket.io`连接分区得比我们在这里做的更细致。`socket.io`连接还具有房间的概念，它们本质上是单个命名空间的分区。我们建议您仔细研究这一点。`socket.io`的官方文档包含大量示例。要查看此文档，请访问[http://socket.io/docs/rooms-and-namespaces/](http://socket.io/docs/rooms-and-namespaces/)。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you created an advanced chat application, which allows its
    users to chat across several rooms using the important `socket.io` concept of
    namespacing. You learned how to configure namespaces on the server itself as well
    as how to connect to them from the client.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您创建了一个高级的聊天应用程序，允许用户使用`socket.io`的重要概念命名空间在多个房间之间聊天。您学会了如何在服务器本身上配置命名空间，以及如何从客户端连接到它们。
- en: In the next chapter, we will wrap up what you learned so far by looking at how
    we can implement a common piece of functionality—an e-commerce application.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过查看如何实现一个常见的功能——电子商务应用程序，来总结到目前为止学到的内容。
