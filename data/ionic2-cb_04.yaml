- en: Chapter 4. Validating Forms and Making HTTP Requests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章：验证表单和制作HTTP请求
- en: 'In this chapter, we will cover the following tasks related to creating form
    input validation, mocked API calls, and payment pages using Stripe:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖与创建表单输入验证、模拟 API 调用和 Stripe 支付页面相关的以下任务：
- en: Creating a complex form with input validation
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用输入验证创建复杂表单
- en: Retrieving data via a mocked API using a static JSON file
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用静态 JSON 文件通过模拟 API 获取数据
- en: Integrating with Stripe for online payment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成 Stripe 进行在线支付
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: All mobile apps require taking user input and sending it to a backend server.
    A simple example is filling out a form, such as a user registration or contact
    form. The information is validated against a set of rules before being sent to
    the backend. Also, there are many other scenarios where the information is captured
    based on user behavior from the app, such as where they touch or how much time
    they spend on a certain page. Regardless, you will run into many send and retrieve
    data scenarios.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所有移动应用都需要获取用户输入并将其发送到后端服务器。一个简单的例子是填写表单，例如用户注册表单或联系表单。在发送到后端之前，信息会根据一组规则进行验证。此外，还有许多其他场景，信息是基于用户在应用中的行为捕获的，例如他们在某个页面上的触摸位置或停留时间。无论如何，你都会遇到许多发送和检索数据的情况。
- en: 'This chapter will cover the following three basic examples:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下三个基本示例：
- en: How to validate user inputs, such as text, number, and required versus not required,
    and communicate the data to another page
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何验证用户输入，如文本、数字以及必填项与非必填项，并将数据传递到另一页
- en: How to render data without having an actual backend
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在没有实际后端的情况下渲染数据
- en: How to process payments using Stripe
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Stripe 处理支付
- en: All of these are actually available natively in Angular 2\. However, since Angular
    2 has a lot of changes compared to Angular 1 in terms of processing data and working
    with the backend server, it's worth covering these topics in detail.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些实际上在 Angular 2 中都是原生可用的。然而，由于 Angular 2 在处理数据和与后端服务器交互方面与 Angular 1 相比有很多变化，因此详细讨论这些主题是值得的。
- en: Creating a complex form with input validation
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用输入验证创建复杂表单
- en: 'In this section, you will build an app to demonstrate form validation using
    `ngForm` and `ngControl`. Here is a screenshot of the form:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将构建一个应用程序来演示使用 `ngForm` 和 `ngControl` 进行表单验证。以下是表单的截图：
- en: '![Creating a complex form with input validation](img/image00248.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![使用输入验证创建复杂表单](img/image00248.jpeg)'
- en: 'If the user tries to submit without providing valid information, the form will
    show the following error:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户尝试提交而没有提供有效信息，表单将显示以下错误：
- en: '![Creating a complex form with input validation](img/image00249.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![使用输入验证创建复杂表单](img/image00249.jpeg)'
- en: Basically, the **Name** field is required. The **Phone** field is the number
    type, but is optional. The **Comment** field is required and the user must enter
    at least four characters. Of course, this is just for demonstration of the input
    length. The user, finally, must agree to the terms and conditions via the toggle
    input.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，**姓名**字段是必填的。**电话**字段是数字类型，但为可选。**评论**字段是必填的，用户必须输入至少四个字符。当然，这只是为了演示输入长度。最后，用户必须通过切换输入同意条款和条件。
- en: 'After a successful validation, the user will be taken to the second screen
    with a summary of the previous screen, as illustrated in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 验证成功后，用户将被带到第二个屏幕，显示上一个屏幕的摘要，如下面的截图所示：
- en: '![Creating a complex form with input validation](img/image00250.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![使用输入验证创建复杂表单](img/image00250.jpeg)'
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: This app example could work either in a browser or on a physical device. However,
    you can optionally connect your physical device to verify the **Phone** field
    for number keypad.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序示例可以在浏览器或物理设备上运行。然而，你可以选择将物理设备连接起来，以验证**电话**字段是否具有数字键盘。
- en: How to do it…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点……
- en: 'Observe the following the instructions:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细阅读以下说明：
- en: 'Create a new `MyFormValidation` app using the `blank` template, as shown, and
    go to the `MyFormValidation` folder:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `blank` 模板创建一个新的 `MyFormValidation` 应用程序，如图所示，并转到 `MyFormValidation` 文件夹：
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open the `./src/app/app.module.ts` file and replace the content with the following
    code:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./src/app/app.module.ts` 文件，将其内容替换为以下代码：
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You may realize that there is a common service to be used across the app, called
    `MyFormService` here. This example also has a second page, called `ThankyouPage`.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能会意识到有一个在应用程序中通用的服务，在这里称为 `MyFormService`。此示例还有一个第二页，称为 `ThankyouPage`。
- en: 'Now, let''s create the service by first creating a directory, as shown:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过首先创建一个目录来创建服务，如下所示：
- en: '[PRE2]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create the `myform.js` file in the component''s directory that you just created,
    as follows:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你刚刚创建的组件目录中创建一个名为 `myform.js` 的文件，如下所示：
- en: '[PRE3]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This example will keep the service component simple for demonstration purposes.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了演示目的，这个例子将保持服务组件简单。
- en: 'Open and edit the `./src/pages/home/home.html` template, as shown:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并编辑 `./src/pages/home/home.html` 模板，如下所示：
- en: '[PRE4]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is probably the most complicated part of the form validation process because
    there are many places where you have to embed validation logic for the input.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这可能是表单验证过程最复杂的一部分，因为你有许多地方需要嵌入输入的验证逻辑。
- en: 'Open and replace the content of the `./src/pages/home/home.scss` file with
    the following code:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并替换 `./src/pages/home/home.scss` 文件的内容，如下所示：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open `./src/pages/home/home.ts` for editing with the following code:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./src/pages/home/home.ts` 文件进行编辑，以下代码：
- en: '[PRE6]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You may note that there isn't much validation code in the JavaScript part. This
    means that the template takes care of a lot of the validations. There is also
    an `import` command for a `thankyou` page, which you will have to create next.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能会注意到 JavaScript 部分中验证代码不多。这意味着模板处理了大量的验证。还有一个用于 `thankyou` 页面的 `import` 命令，你将不得不创建下一个。
- en: 'Now, let''s create the `thankyou` folder, as follows:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建 `thankyou` 文件夹，如下所示：
- en: '[PRE7]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a `thankyou.js` file in the component''s directory that you just created,
    as shown:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你刚刚创建的组件目录中创建一个名为 `thankyou.js` 的文件，如下所示：
- en: '[PRE8]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This page just renders the data from the `MyFormService` service. So, you can
    keep it very simple.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个页面只是渲染 `MyFormService` 服务的数据。因此，你可以让它非常简单。
- en: 'Create `thankyou.html` in the `./src/pages/thankyou`, folder, as illustrated:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `./src/pages/thankyou` 文件夹中创建 `thankyou.html`，如图所示：
- en: '[PRE9]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create `thankyou.scss` in the `./src/pages/thankyou` folder, as shown:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `./src/pages/thankyou` 文件夹中创建 `thankyou.scss`，如图所示：
- en: '[PRE10]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Edit the `./app/app.scss` file to ensure that you include both the `.scss`
    files in the two pages, as follows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `./app/app.scss` 文件以确保包含两个页面中的 `.scss` 文件，如下所示：
- en: '[PRE11]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Go to your Terminal and run the app with the following command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往你的终端，使用以下命令运行应用程序：
- en: '[PRE12]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: Let's start with the `home.html` file, where most of the validation code is
    located. If you look at the structure of this page, it's very typical. You have
    `<ion-navbar>` with `<ion-title>`. The `<form>` element must be inside the `<ion-content>`
    area.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从包含大部分验证代码的 `home.html` 文件开始。如果你看看这个页面的结构，它非常典型。你有一个 `<ion-navbar>`，其中包含
    `<ion-title>`。`<form>` 元素必须位于 `<ion-content>` 区域内。
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It's a requirement to use the `<form>` element for Angular 2 validation to work.
    Otherwise, there will be no `submit` event and you cannot catch errors for each
    input.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `<form>` 元素是 Angular 2 验证功能正常工作的要求。否则，将没有 `submit` 事件，你无法捕获每个输入的错误。
- en: '`form` has the following attributes:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`form` 有以下属性：'
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: To assign a local variable *on the fly*, you use the `#` sign. This means that
    you want the `f` variable to refer to `ngForm`, which is automatically created
    from Angular 2\. This is a special object that contains everything related to
    the current form. You are advised to use `novalidate` to bypass the default HTML5
    validation because you are using Angular 2 for validation instead. Otherwise,
    the `form` will acquire conflicts. The `(ngSubmit)` is pretty much an event to
    trigger the `onSubmit(f)` function whenever the `button` with `type=submit` is
    touched or clicked. When you submit the form, it will pass the `f` variable along
    so that you can process the object inside the `onSubmit` method.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要**即时**分配一个局部变量，你使用 `#` 符号。这意味着你希望 `f` 变量指向 `ngForm`，它是 Angular 2 自动创建的。这是一个包含与当前表单相关的一切的特殊对象。建议使用
    `novalidate` 来绕过默认的 HTML5 验证，因为你正在使用 Angular 2 进行验证。否则，`form` 将会冲突。`(ngSubmit)`
    几乎是一个事件，当 `type=submit` 的 `button` 被触摸或点击时，会触发 `onSubmit(f)` 函数。当你提交表单时，它将传递 `f`
    变量，这样你就可以在 `onSubmit` 方法中处理该对象内部的对象。
- en: 'The `form` template consists of just `<ion-list>` and `<ion-item>`. You just
    need to know how to validate each input and display the error. Let''s use the
    `Name` field as the first example. This is the `<ion-input>` for `Name`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`form` 模板仅由 `<ion-list>` 和 `<ion-item>` 组成。你只需要知道如何验证每个输入并显示错误。让我们以 `Name`
    字段作为第一个例子。这是 `Name` 的 `<ion-input>`：'
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following is the error displayed:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下显示的错误：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To validate, you must assign `name` a local variable name. This is to refer
    to that input using `f.controls.name` in other areas. Recall that the `f` variable
    has been declared previously as the `ngForm` object. Here is a view of how the
    `ngForm` is structured:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证，你必须将 `name` 分配为一个局部变量名。这是为了在其他区域使用 `f.controls.name` 来引用该输入。回想一下，`f` 变量之前已经被声明为
    `ngForm` 对象。以下是 `ngForm` 的结构视图：
- en: '![How it works…](img/image00251.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/image00251.jpeg)'
- en: You can view this using the Chrome Developer console because the code actually
    gives this output when you submit the form.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Chrome 开发者控制台查看这一点，因为代码实际上会在你提交表单时给出这个输出。
- en: 'The error message `Name is required` will be hidden when either of the following
    conditions takes place:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当以下任一条件成立时，错误信息 `Name is required` 将被隐藏：
- en: The form has not been submitted yet. Otherwise, people will see the error message
    right away before they even type in something. This is not a good user experience.
    To check for this, you have to use a temporary Boolean, called `isSubmitted`.
    The `f.controls.name.pristine` variable means that the input has not been modified.
    The opposite of this would be `f.controls.name.dirty`.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单尚未提交。否则，人们在输入任何内容之前就会立即看到错误信息。这不是一个好的用户体验。为了检查这一点，你必须使用一个临时的布尔值，称为 `isSubmitted`。`f.controls.name.pristine`
    变量表示输入尚未被修改。这个相反的是 `f.controls.name.dirty`。
- en: The `f.controls.name.valid` variable is `true`. However, you cannot check this
    right away because, if the input is empty, the `name` object does not exist yet.
    That's why you need to check for the existence of `f.controls.name` before checking
    for the `valid` Boolean.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f.controls.name.valid` 变量是 `true`。然而，你不能立即检查这个，因为如果输入为空，`name` 对象尚不存在。这就是为什么在检查
    `valid` 布尔值之前，你需要检查 `f.controls.name` 的存在性。'
- en: 'There is no need to check the phone requirement; so, you just need to assign
    `name` and a model, as shown:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要检查电话要求；因此，你只需要分配 `name` 和一个模型，如下所示：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For the `Comment` field, there is a need to validate using both `required`
    and `minlength=4`, as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `Comment` 字段，需要使用 `required` 和 `minlength=4` 进行验证，如下所示：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You may think `required` is unnecessary because, if the length is zero, Angular
    2 will trigger an error flag. However, that is not true. When the user doesn't
    enter anything in the input, the input will have no length because the variable
    doesn't exist. That's why you need to check for both scenarios.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为 `required` 是不必要的，因为如果长度为零，Angular 2 将触发一个错误标志。然而，这并不正确。当用户在输入框中没有输入任何内容时，输入将没有长度，因为变量不存在。这就是为什么你需要检查这两种情况。
- en: 'The error message for the `Comment` field is quite interesting because it shows
    the number of characters the user needs to enter, as shown in the following code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `Comment` 字段，错误信息非常有趣，因为它显示了用户需要输入的字符数，如下代码所示：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The main idea here is that you only want to show this `div` when the form is
    submitted and it's pristine via `f.controls.comment.pristine`. This means that
    the user has not entered anything in the form. You also want to show the message
    when the form is dirty and has errors via `f.controls.comment.errors`. If you
    inspect the console, you can see a list of many detailed errors under the `f.controls.comment.errors`
    object. In order to tell the user how many characters they have left to enter,
    you have to first check `f.controls.comment.errors.minlength` because, if that
    variable doesn't exist, there is no error or the `comment` input is empty. If
    you do not check for this, you will get a parse error later on.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的主要思想是，你只想在表单提交且通过 `f.controls.comment.pristine` 保持原始状态时显示这个 `div`。这意味着用户在表单中没有任何输入。你同样希望在表单为脏且存在错误通过
    `f.controls.comment.errors` 时显示消息。如果你检查控制台，你可以在 `f.controls.comment.errors` 对象下看到许多详细的错误列表。为了告诉用户他们还剩下多少字符可以输入，你必须首先检查
    `f.controls.comment.errors.minlength`，因为如果该变量不存在，则没有错误或 `comment` 输入为空。如果你不检查这一点，你将在稍后得到一个解析错误。
- en: 'In your `home.ts` file, the `onSubmit` method must toggle the `isSubmitted`
    Boolean to `true`, as shown in the following code snippet:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `home.ts` 文件中，`onSubmit` 方法必须将 `isSubmitted` 布尔值切换为 `true`，如下代码片段所示：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Then, you have to do a general check for `myForm.valid` and `myForm.value.tos`.
    You may wonder why we are checking for `tos` here instead of validating it inside
    the template. The reason is that there is no way to validate a toggle button in
    Angular 2 since it doesn't make sense to do so as it cannot be `required`. Therefore,
    you have to do a custom validation here to make sure it's `true` in the form.
    This means that the user has checked the **Agree to terms and conditions** toggle.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你必须对`myForm.valid`和`myForm.value.tos`进行一般性检查。你可能想知道为什么我们在这里检查`tos`而不是在模板内进行验证。原因是，在Angular
    2中无法验证切换按钮，因为它没有意义，因为它不能是`required`。因此，你必须在这里进行自定义验证，以确保它在表单中是`true`。这意味着用户已经检查了**同意条款和条件**的切换按钮。
- en: 'This is a minor detail that could be a bug in Ionic 2 (currently Beta 21):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可能是在Ionic 2（目前为Beta 21）中存在的细节错误：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: For each toggle button, it acts as a `type=submit` button by default since there
    is no `type` attribute assigned. That's why you need to cancel the `submit` event
    by calling `preventDefault()`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个切换按钮，它默认充当`type=submit`按钮，因为没有分配`type`属性。这就是为什么你需要通过调用`preventDefault()`来取消`submit`事件。
- en: Tip
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Refer to the W3 website, at [https://www.w3.org/TR/html-markup/button.html](https://www.w3.org/TR/html-markup/button.html),
    for information about the default behavior of the `button` element.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 参考W3网站，在[https://www.w3.org/TR/html-markup/button.html](https://www.w3.org/TR/html-markup/button.html)，以获取关于`button`元素默认行为的信息。
- en: The `thankyou` page is very self-explanatory because you just parse the `formData`
    object in the template by getting the data from the `MyFormService` service.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`thankyou`页面非常直观，因为你只需在模板中解析`formData`对象，从`MyFormService`服务中获取数据。'
- en: See also
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'Check out the following links for more information:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接以获取更多信息：
- en: For more information about `form` from the Angular 2 documentation, you can
    visit [https://angular.io/docs/ts/latest/guide/forms.html](https://angular.io/docs/ts/latest/guide/forms.html%20)
    and [https://angular.io/docs/ts/latest/api/forms/index/NgForm-directive.html](https://angular.io/docs/ts/latest/api/forms/index/NgForm-directive.html)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于Angular 2文档中的`form`的信息，你可以访问[https://angular.io/docs/ts/latest/guide/forms.html](https://angular.io/docs/ts/latest/guide/forms.html)和[https://angular.io/docs/ts/latest/api/forms/index/NgForm-directive.html](https://angular.io/docs/ts/latest/api/forms/index/NgForm-directive.html)
- en: The Ionic documentation has its own page specifically for Ionic input components,
    which is [https://ionicframework.com/docs/v2/resources/forms/](https://ionicframework.com/docs/v2/resources/forms/)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ionic文档有一个专门针对Ionic输入组件的页面，你可以在这里找到[https://ionicframework.com/docs/v2/resources/forms/](https://ionicframework.com/docs/v2/resources/forms/)
- en: It also has a good list of HTML5 input types that you can use for validation
    or keyboard enforcement, which you can find at [http://ionicframework.com/html5-input-types/](http://ionicframework.com/html5-input-types/)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它还列出了你可以用于验证或键盘强制的HTML5输入类型的好列表，你可以在[http://ionicframework.com/html5-input-types/](http://ionicframework.com/html5-input-types/)找到这些类型。
- en: Retrieving data via a mocked API using a static JSON file
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过使用静态JSON文件使用模拟API检索数据
- en: As a frontend and app developer, you are often working with a team where someone
    else is responsible for the backend APIs. However, it's not always possible to
    have the backend available when you are developing the frontend. You have to *simulate*
    the backend in scenarios where the final backend APIs are not ready.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 作为前端和应用程序开发者，你经常在一个团队中工作，其中另一个人负责后端API。然而，当你开发前端时，并不总是有可能有后端可用。在最终后端API尚未准备好的情况下，你必须*模拟*后端。
- en: 'In this recipe, you will learn how to call a REST API using the `http` service.
    The API endpoint will be just a static JSON located on your local machine. You
    will also learn how to leverage placeholder images to meet design requirements.
    The app will show a list of image feeds and a description, as shown in the following
    screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何使用`http`服务调用REST API。API端点将只是位于你本地机器上的静态JSON。你还将学习如何利用占位符图像来满足设计要求。应用程序将显示图像源列表和描述，如下面的截图所示：
- en: '![Retrieving data via a mocked API using a static JSON file](img/image00252.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![通过使用静态JSON文件使用模拟API检索数据](img/image00252.jpeg)'
- en: Getting ready
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This app example would work either in a browser or on a physical device. However,
    the *fake* backend server must be running on your local computer.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序示例可以在浏览器或物理设备上运行。但是，*模拟*的后端服务器必须在你的本地计算机上运行。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the instructions to be followed:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是必须遵循的说明：
- en: 'First, let''s quickly create the *fake* backend server. You must install `http-server`
    for this:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们快速创建一个**假**的后端服务器。为此，您必须安装`http-server`：
- en: '[PRE21]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a folder to store your `.json` file. Let''s call it `MockRest`, as shown:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文件夹来存储您的`.json`文件。让我们称它为`MockRest`，如图所示：
- en: '[PRE22]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create the `test.json` file and fill in the following content for the REST
    response:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`test.json`文件，并填写以下内容作为REST响应：
- en: '[PRE23]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Basically, whenever you send a REST request, you should receive the preceding
    content as the response. As your backend developer updates the REST response,
    you can always change the content of the `test.json` file accordingly.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基本上，每次您发送REST请求时，您都应该收到前面的内容作为响应。随着您的后端开发者更新REST响应，您始终可以相应地更改`test.json`文件的内容。
- en: 'Start your backend server by calling `http-server` from the Terminal in the
    `MockRest` folder, as shown:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`MockRest`文件夹中的终端调用`http-server`以启动您的后端服务器，如图所示：
- en: '[PRE24]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: isit `http://localhost:8080/test.json` to verify that you can see the JSON content.
    If not, you probably have a port conflict with another web server. You need to
    ensure that there is no other application using port `8080`.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`http://localhost:8080/test.json`来验证您是否可以看到JSON内容。如果不行，您可能与其他Web服务器存在端口冲突。您需要确保没有其他应用程序使用端口`8080`。
- en: 'After completing your backend, open another Terminal window, create a new `MyRestBackend`
    app using the `blank` template, and go to the `MyRestBackend` folder, as shown:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在完成您的后端后，打开另一个终端窗口，使用`blank`模板创建一个新的`MyRestBackend`应用，并进入`MyRestBackend`文件夹，如图所示：
- en: '[PRE25]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Tip
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You must not stop the backend server or create an Ionic project inside the `MockRest`
    folder. They are two independent project folders.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您必须不要停止后端服务器或创建一个在`MockRest`文件夹内的Ionic项目。它们是两个独立的项目文件夹。
- en: 'Open the `html.html` file and replace the content with the following code:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`html.html`文件，将其内容替换为以下代码：
- en: '[PRE26]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This app example uses free photos from [https://source.unsplash.com/](https://source.unsplash.com/)
    because you can easily query to get random photos that meet your need.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此应用示例使用来自[https://source.unsplash.com/](https://source.unsplash.com/)的免费照片，因为您可以轻松查询以获取满足您需求的随机照片。
- en: 'Open `home.ts` and edit it with the following code:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`home.ts`并使用以下代码进行编辑：
- en: '[PRE27]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You have not created the `QuoteService` service yet. However, you probably know
    that this service will call the *fake* backend server to get the JSON content
    using the `getQuotes()` method.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您尚未创建`QuoteService`服务。然而，您可能知道这个服务将使用`getQuotes()`方法调用**假**的后端服务器以获取JSON内容。
- en: 'Do a small modification of the stylesheet `home.scss`, as follows:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对样式表`home.scss`进行以下小修改：
- en: '[PRE28]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create the `./src/services` folder with the following command:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建`./src/services`文件夹：
- en: '[PRE29]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create the `quote.ts` file in the `services` folder and copy the following
    code:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`services`文件夹中创建`quote.ts`文件，并复制以下代码：
- en: '[PRE30]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Open and edit `./src/app/app.module.ts` to declare `QuoteService`, as shown:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并编辑`./src/app/app.module.ts`以声明`QuoteService`，如图所示：
- en: '[PRE31]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Go to your Terminal and run the app, as illustrated:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您的终端并运行应用，如图所示：
- en: '[PRE32]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: You will note that the page is empty and the **Console** shows the following
    error:![How to do it...](img/image00253.jpeg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将注意到页面为空，**控制台**显示以下错误：![如何做...](img/image00253.jpeg)
- en: 'This means that your browser (in this case, Chrome) does not allow calling
    REST API from `http://localhost:8100` to `http://localhost:8080`. You need to
    install the **Allow-Control-Allow-Origin** (**CORS**) plugin, such as [https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en](https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en),
    for Chrome. After that, turn on CORS, as shown in the following screenshot:'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着您的浏览器（在这种情况下，Chrome）不允许从`http://localhost:8100`调用REST API到`http://localhost:8080`。您需要安装**Allow-Control-Allow-Origin**（**CORS**）插件，例如[https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en](https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en)，用于Chrome。之后，如图所示打开CORS：
- en: '![How to do it...](img/image00254.jpeg)'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/image00254.jpeg)'
- en: Refresh your browser to see the updated app.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新您的浏览器以查看更新的应用。
- en: How it works…
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Your *fake* backend simply returns any file in the current `MockRest` folder.
    As you get more *sample* responses from the backend developer, you can copy them
    into this folder to provide additional backend endpoints.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您的**假**后端简单地返回当前`MockRest`文件夹中的任何文件。随着您从后端开发者那里获得更多**样本**响应，您可以将它们复制到这个文件夹中，以提供额外的后端端点。
- en: Note
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This section does not provide examples of how to handle POST and complex scenarios
    where the responses depend on request parameters. You may want to keep the code
    to handle temporary cases as simple as possible since they are not production
    code. The recommendation is to return the same content for each POST request as
    well.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 本节不提供如何处理POST请求和复杂场景的示例，其中响应取决于请求参数。您可能希望将处理临时情况的代码保持尽可能简单，因为它们不是生产代码。建议为每个POST请求返回相同的内容。
- en: 'Let''s take a look at `quote.ts`, because it''s the main place where the `Http`
    request is made. First, you need to import `Injectable` and `Http`, which you
    can do as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`quote.ts`，因为它是发起`Http`请求的主要地方。首先，您需要导入`Injectable`和`Http`，您可以如下操作：
- en: '[PRE33]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `@Injectable` decorator is used to allow other pages and components to
    use `QuoteService` as a dependency. The `Http` service (or class) is provided
    by Angular 2 (not Ionic 2) and this is similar to the `$http` provider in Angular
    1\. However, instead of returning a promise, `Http` will return an **observable**
    object so that you can *subscribe* to it. The `getQuotes()` method, shown as follows,
    is the most important part of this file:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`@Injectable`装饰器允许其他页面和组件将`QuoteService`作为依赖项使用。`Http`服务（或类）由Angular 2（而非Ionic
    2）提供，这与Angular 1中的`$http`提供者类似。然而，`Http`将返回一个**可观察**对象，以便您可以*订阅*它。以下所示的`getQuotes()`方法是此文件最重要的部分：
- en: '[PRE34]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `this.http` object must be injected from the constructor. Then, it will
    trigger GET via `this.http.get()`, just like the `$http` provider. However, there
    is no `.then()` function but in Angular 2; you have to `subscribe` to the object.
    A new feature of ES6 is the *arrow* function, as you see via `res => {}`. This
    is similar to the lambda function in other languages (for example, Python). There
    is no need to declare the name of the function and you don't have to type *function*
    each time. In addition, it automatically passes the parameter (`res` in this case)
    and the `this` context inside the function.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.http`对象必须从构造函数中注入。然后，它将通过`this.http.get()`触发GET请求，就像`$http`提供者一样。然而，在Angular
    2中，没有`.then()`函数，但您必须`subscribe`到对象。ES6的一个新特性是*箭头*函数，正如您通过`res => {}`所看到的。这与其他语言中的lambda函数类似（例如Python）。您不需要声明函数的名称，也不必每次都键入*function*。此外，它自动传递参数（在这种情况下是`res`）和函数内部的`this`上下文。'
- en: Note
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read more about the arrow function from TypeScript documentation at
    [https://www.typescriptlang.org/docs/handbook/functions.html](https://www.typescriptlang.org/docs/handbook/functions.html).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在TypeScript文档中了解更多关于箭头函数的信息，请参阅[https://www.typescriptlang.org/docs/handbook/functions.html](https://www.typescriptlang.org/docs/handbook/functions.html)。
- en: 'The REST response from your *fake* backend will be assigned to `this.data`
    of the `QuoteService` service, as shown:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 来自您的*模拟*后端的REST响应将被分配给`QuoteService`服务的`this.data`，如下所示：
- en: '[PRE35]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If you see the browser console, it will look similar to the following screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到浏览器控制台，它将类似于以下截图：
- en: '![How it works…](img/image00255.jpeg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/image00255.jpeg)'
- en: 'Another nice trick in the `home.html` template is to display a gray placeholder
    for the photos instead of pushing down the content when the photos are downloaded
    and rendered, as shown in the following code snippet:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在`home.html`模板中，还有一个很好的技巧是，在照片下载并渲染时显示灰色占位符，而不是将内容向下推，如下面的代码片段所示：
- en: '[PRE36]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The following screenshot shows a quick example before the photos are loaded:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了照片加载之前的快速示例：
- en: '![How it works…](img/image00256.jpeg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/image00256.jpeg)'
- en: In order to tell the `<img>` tag to have an exact size, you have to do a height
    calculation using `[height]="myCard.clientWidth * 390 / 600"`. This is because
    the photo is 600 x 390\. The `myCard` object is a local object created from `ion-card`.
    This `myCard` object will have access to all properties of the `ion-card` DOM,
    including the width via `clientWidth`. You have probably noted that this is just
    pure JavaScript and has nothing to do with Ionic or Angular itself.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让`<img>`标签具有确切的大小，您必须使用`[height]="myCard.clientWidth * 390 / 600"`进行高度计算。这是因为照片的尺寸是600
    x 390。`myCard`对象是从`ion-card`创建的本地对象。这个`myCard`对象将能够访问`ion-card` DOM的所有属性，包括通过`clientWidth`的宽度。您可能已经注意到，这完全是纯JavaScript，与Ionic或Angular本身无关。
- en: See also
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For more information about the Angular 2 `Http` provider, you can visit the
    official documentation at [https://angular.io/docs/ts/latest/api/http/index/HttpModule-class.html](https://angular.io/docs/ts/latest/api/http/index/HttpModule-class.html)
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Angular 2 `Http`提供者的更多信息，你可以访问官方文档[https://angular.io/docs/ts/latest/api/http/index/HttpModule-class.html](https://angular.io/docs/ts/latest/api/http/index/HttpModule-class.html)。
- en: Integrating with Stripe for online payment
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成Stripe进行在线支付
- en: In this section, you will learn how to integrate with a real backend service
    for the payment process. Earning revenue is an important aspect of creating an
    app. While there are many other methods of collecting payment, Stripe is a common
    payment system and can integrate very well with Ionic. In addition, there is no
    need to provide a high level of security and compliance (that is, PCI) since you
    will not be *storing* the credit card information.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习如何集成真实的后端服务进行支付流程。赚取收入是创建应用的重要方面。虽然有许多其他收集支付的方法，但Stripe是一个常见的支付系统，并且可以很好地与Ionic集成。此外，由于你不会**存储**信用卡信息，因此不需要提供高级别的安全性和合规性（即PCI）。
- en: 'Your app will not process via a real payment method because you can use a public
    test key from Stripe. The app will ask for a few fields to create a token. Observe
    the following screenshot of the app:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用不会通过真实的支付方式处理，因为你可以使用Stripe的公共测试密钥。应用将要求输入一些字段来创建令牌。观察以下应用截图：
- en: '![Integrating with Stripe for online payment](img/image00257.jpeg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![集成Stripe进行在线支付](img/image00257.jpeg)'
- en: 'If you touch the **Pay $20** button, it will take you to the next screen where
    you will get the payment token, as shown in the following screenshot:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击**支付$20**按钮，它将带你进入下一个屏幕，在那里你可以获取支付令牌，如下面的截图所示：
- en: '![Integrating with Stripe for online payment](img/image00258.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![集成Stripe进行在线支付](img/image00258.jpeg)'
- en: Tip
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Actually, there are additional steps for your backend to call Stripe to authorize
    and process the transaction. However, it's not within the scope of this section.
    The Stripe document has a good tutorial page on Node.js at [https://stripe.com/docs/api/node#authentication](https://stripe.com/docs/api/node#authentication).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你的后端调用Stripe进行授权和处理的步骤还有额外的步骤。然而，这不在本节的范围内。Stripe文档在Node.js方面有一个很好的教程页面[https://stripe.com/docs/api/node#authentication](https://stripe.com/docs/api/node#authentication)。
- en: Getting ready
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: There is no need to test in a physical device because Ionic 2 and Stripe will
    work just fine in the web browser.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要在物理设备上进行测试，因为Ionic 2和Stripe在浏览器中运行得很好。
- en: How to do it...
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Observe the following instructions:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细阅读以下说明：
- en: If you don't have a Stripe account, you need to register on [https://stripe.com](https://stripe.com).
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你没有Stripe账户，你需要注册[https://stripe.com](https://stripe.com)。
- en: Log in and go to [https://dashboard.stripe.com/test/dashboard](https://dashboard.stripe.com/test/dashboard).
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录并前往[https://dashboard.stripe.com/test/dashboard](https://dashboard.stripe.com/test/dashboard)。
- en: Click on your username on the top right and select **Account S****ettings**,
    as illustrated in the following screenshot:![How to do it...](img/image00259.jpeg)
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的用户名并选择**账户设置**，如下面的截图所示：![如何操作...](img/image00259.jpeg)
- en: Select the **API Keys** tab.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**API密钥**标签。
- en: Copy your **Test Publishable Key**, shown as follows, somewhere because you
    need to use it for your JavaScript code later:![How to do it...](img/image00260.jpeg)
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制以下所示的**测试发布密钥**，并将其放置在某个位置，因为稍后你需要用它来编写JavaScript代码：![如何操作...](img/image00260.jpeg)
- en: Now, go back to the Terminal.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，回到终端。
- en: 'Create a new `StripePayment` app using the `blank` template, as follows, and
    go into the `StripePayment` folder:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`blank`模板创建一个新的`StripePayment`应用，如下所示，并进入`StripePayment`文件夹：
- en: '[PRE37]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Open the `./src/index.html` file and insert the line shown somewhere in the
    `<body>` tab as follows:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/index.html`文件，并在`<body>`标签中插入以下所示行：
- en: '[PRE38]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is to load the `Stripe` object globally in your app. This is not the recommended
    method with Angular 2 because anything that is used within a component must be
    imported via the `import` instruction. However, at the time of writing this book,
    angular-stripe is unavailable for Angular 2\. So, there is no way to do this properly.
    The preceding method will work just fine.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是将`Stripe`对象全局加载到你的应用中。这不是Angular 2推荐的方法，因为任何在组件内部使用的东西都必须通过`import`指令导入。然而，在撰写本书时，angular-stripe对Angular
    2不可用。因此，没有正确执行此操作的方法。前面的方法将运行得很好。
- en: 'Open the `./src/pages/home/home.html` file and modify the content with the
    following code:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/pages/home/home.html`文件，并使用以下代码修改内容：
- en: '[PRE39]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Stripe only needs the credit card number, CVC, and expiration to create a token
    for charging. The customer name and address are optional; so, you don't need to
    include them here.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Stripe只需要信用卡号码、CVC和到期日期来创建用于收费的令牌。客户姓名和地址是可选的；因此，您不需要在此处包含它们。
- en: 'Then, replace the content of `./src/pages/home/home.ts` with the following
    code:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将`./src/pages/home/home.ts`的内容替换为以下代码：
- en: '[PRE40]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: You need to change your **Test Publishable Key** here by replacing **YOUR STRIPE
    PUBLIC KEY HERE** with your own key that you copied earlier.
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您需要在此处更改您的**测试发布密钥**，通过将**YOUR STRIPE PUBLIC KEY HERE**替换为您之前复制的自己的密钥。
- en: 'Edit `./src/pages/home/home.scss` with the following code:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码编辑`./src/pages/home/home.scss`：
- en: '[PRE41]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create the `thankyou` page that shows the token ID by making a new folder,
    called `./src/pages/thankyou`, as shown:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建一个名为`./src/pages/thankyou`的新文件夹，来创建显示令牌ID的`thankyou`页面，如下所示：
- en: '[PRE42]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create the `thankyou.html` file in the `thankyou` folder and copy the following
    code:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`thankyou`文件夹中创建`thankyou.html`文件，并复制以下代码：
- en: '[PRE43]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: In reality, there is no need to show the token ID to the user. This is just
    an example to get the token ID to charge.
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实际上，没有必要向用户显示令牌ID。这只是一个示例，用于获取用于收费的令牌ID。
- en: 'Create the `thankyou.ts` file in the `thankyou` folder and copy the following
    code:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`thankyou`文件夹中创建`thankyou.ts`文件，并复制以下代码：
- en: '[PRE44]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create the `thankyou.scss` file to modify the theme using the following code:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`thankyou.scss`文件，使用以下代码修改主题：
- en: '[PRE45]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Since the `thankyou.scss` file is new in the project, you need to include it
    in `./src/app/app.scss`. Insert this line at the bottom of the code:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于`thankyou.scss`文件在项目中是新的，您需要将其包含在`./src/app/app.scss`中。在代码底部插入此行：
- en: '[PRE46]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Open and edit `./src/app/app.module.ts` to declare `ThankyouPage` as follows:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并编辑`./src/app/app.module.ts`，如下声明`ThankyouPage`：
- en: '[PRE47]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Go to your Terminal and run the app:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您的终端并运行应用：
- en: '[PRE48]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: For the purpose of testing, you can use `4242424242424242` as the credit card
    number, `123` as `cvc`, and `12/2017` as the expiration.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试目的，您可以使用`4242424242424242`作为信用卡号码，`123`作为`cvc`，以及`12/2017`作为到期日期。
- en: How it works…
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'This is the Stripe charging process:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Stripe收费过程：
- en: The user fills in the payment form and clicks on the **Submit** button.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户填写支付表单并点击**提交**按钮。
- en: The frontend (your Ionic app) will call API to Stripe using the `Stripe` object
    and send along all the payment information.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前端（您的Ionic应用）将使用`Stripe`对象调用Stripe API，并发送所有支付信息。
- en: Stripe will return a token ID, which is basically a way to confirm that everything
    is correct and you can charge the card now.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Stripe将返回一个令牌ID，这基本上是一种确认一切正确并且现在可以收费的方式。
- en: The frontend will use the token ID to send to its backend (without the credit
    card information) to authorize the charge.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前端将使用令牌ID发送到其后端（不包含信用卡信息）以授权收费。
- en: The backend will call another Stripe API to say *I'm going to charge now*. Stripe
    will return the `success` event to the backend at this point.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 后端将调用另一个Stripe API表示“我现在要收费”。此时，Stripe将向后端返回`success`事件。
- en: The backend will then return the `success` event to the frontend.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，后端将向前端返回`success`事件。
- en: The frontend should render a new page, such as the `thankyou` page.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前端应渲染一个新页面，例如`thankyou`页面。
- en: As discussed previously, this chapter will not cover the backend portion of
    this app because it doesn't focus on Ionic. You can build the backend using any
    language, such as Node.js, PHP, or Python.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，本章不会涵盖此应用的后端部分，因为它不专注于Ionic。您可以使用任何语言构建后端，例如Node.js、PHP或Python。
- en: 'Let''s take a look at `home.ts` because the majority of Stripe API processing
    is located there. First, you need to do a `declare`, as illustrated, because `Stripe`
    is a global object that was included in the `index.html`:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`home.ts`，因为大多数Stripe API处理都位于那里。首先，您需要进行一个`declare`，如图所示，因为`Stripe`是一个全局对象，它包含在`index.html`中：
- en: '[PRE49]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: If you don't do a `declare`, the app will still run but you will get an error
    from TypeScript.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不进行`declare`，应用仍然可以运行，但您将收到TypeScript的错误。
- en: 'When the user submits the form, it will trigger the following method:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户提交表单时，将触发以下方法：
- en: '[PRE50]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'When you call `Stripe.card.createToken`, the Stripe object will trigger an
    API call in the background to [https://stripe.com/](https://stripe.com/) with
    the JSON submitted. You may realize that this example does not use `ngModel` at
    all, but you can get the form values directly from within `ngForm`. This functionality
    is accomplished by the following code in your `home.html`:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用 `Stripe.card.createToken` 时，Stripe 对象将在后台触发一个 API 调用到 [https://stripe.com/](https://stripe.com/)，并提交
    JSON 数据。你可能意识到这个示例根本就没有使用 `ngModel`，但你可以直接从 `ngForm` 内部获取表单值。这个功能是通过你在 `home.html`
    中的以下代码实现的：
- en: '[PRE51]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Once Stripe returns your token ID, it will call the following arrow function:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Stripe 返回你的令牌 ID，它将调用以下箭头函数：
- en: '[PRE52]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The reason for using the arrow function here is because your code within the
    `stripeResponseHandler` method needs the `this` context of the `HomePage` class.
    This is a nice way to access the token variable. Observe the following code:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里使用箭头函数的原因是因为你在 `stripeResponseHandler` 方法内的代码需要 `HomePage` 类的 `this` 上下文。这是一种访问令牌变量的好方法。观察以下代码：
- en: '[PRE53]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The `response.id` will have your token ID from Stripe. Otherwise, you can handle
    the error using `response.error.message`. In this example, since it only passes
    the token ID to the next page, you can simply send it as a parameter `{token:
    this.token}`:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`response.id` 将包含来自 Stripe 的令牌 ID。否则，你可以使用 `response.error.message` 来处理错误。在这个例子中，因为它只传递令牌
    ID 到下一页，所以你可以简单地作为参数 `{token: this.token}` 发送它：'
- en: '[PRE54]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In your `thankyou.ts`, you can access the parameter `token` using the following
    code:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `thankyou.ts` 文件中，你可以使用以下代码访问参数 `token`：
- en: '[PRE55]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: See also
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: To understand more about Stripe API, you can check out the official documentation
    at [https://stripe.com/docs/stripe.js](https://stripe.com/docs/stripe.js)
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于 Stripe API 的信息，你可以查看官方文档 [https://stripe.com/docs/stripe.js](https://stripe.com/docs/stripe.js)
- en: There are more examples from other languages that you can experiment with at
    [https://stripe.com/docs/examples](https://stripe.com/docs/examples)
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在 [https://stripe.com/docs/examples](https://stripe.com/docs/examples) 找到更多其他语言的示例，你可以进行实验。
