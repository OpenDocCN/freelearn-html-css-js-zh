- en: Chapter 3. Mixing Content
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。混合内容
- en: Load Times For 69% Of Responsive Design Mobile Sites Deemed "Unacceptable"…
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 69%的响应式设计移动网站的加载时间被认为“不可接受”……
- en: 'A staggering fact, but absolutely true: a survey carried out by the mobile
    developer company Tribilis in April 2014 found that for 155 sites surveyed, only
    21 percent loaded in four seconds or less on smartphones. Moreover, those that
    took longer had an average page weight of 1.7 MB.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个令人震惊的事实，但绝对是真实的：2014年4月，移动开发公司Tribilis进行的一项调查显示，在所调查的155个网站中，只有21%的网站在智能手机上能在4秒或更短时间内加载完成。而且，加载时间较长的网站平均页面大小为1.7
    MB。
- en: Sobering thoughts, but ones that perfectly illustrate the pitfalls of mixing
    videos and images on pages in responsive design! We need to strike a balance between
    displaying the right media content that is not too large or too small while keeping
    our page load times small. This chapter works through some examples and details
    some of the pitfalls associated with mixing content, which can lead to heavy pages
    and long download times.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一些令人深思的想法，但它们完美地说明了在响应式设计中混合视频和图像的陷阱！我们需要在显示不太大也不太小的正确媒体内容的同时，保持页面加载时间短。本章通过一些示例并详细说明了与混合内容相关的一些陷阱，这些陷阱可能导致页面重量大和下载时间长。
- en: 'We''ll cover a number of topics in this chapter, which will include:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖多个主题，包括：
- en: Mixing video and image content on the same page
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一页面上混合视频和图像内容
- en: Considering limitations of mixing content
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑混合内容时的限制
- en: Using preloaders to reduce delays
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用预加载器来减少延迟
- en: Adding lazy loading support to our pages
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的页面添加懒加载支持
- en: Making allowances for mobile devices
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑到移动设备
- en: Intrigued? Let's make a start!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣吗？让我们开始吧！
- en: Mixing video and image content on the same page
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在同一页面上混合视频和图像内容
- en: Throughout this book, we've seen some of the tips and tricks we need to use
    to make our media content responsive and worked through some examples of the styles
    we need to implement to make this happen.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们看到了我们需要使用的一些技巧和窍门来使我们的媒体内容响应式，并处理了一些我们需要实施的样式的示例，以实现这一点。
- en: However, it is unlikely that every responsive site will have either images or
    videos; it is more likely that there will be a mix of both on at least some sites!
    This can present its own issues, so to see what can happen, let's run through
    a simple demo.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，不太可能每个响应式网站都会有图像或视频；更有可能的是，至少在一些网站上会有两者的混合！这可能会带来它自己的问题，所以为了看看会发生什么，让我们运行一个简单的演示。
- en: 'From the code download, extract the `code` folder for this chapter and save
    it to your project folder; this contains a simple demo that shows the issues we
    face with mixing videos and images together in a responsive design. If we run
    the `mix-responsive.html` demo as it stands, it would appear to look okay from
    the start until we scroll down and view the video. The layout is not ideal, but
    there are a few changes we can make:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从代码下载中提取本章的`code`文件夹并将其保存到您的项目文件夹中；这包含一个简单的演示，展示了我们在响应式设计中混合视频和图像时面临的问题。如果我们直接运行`mix-responsive.html`演示，它看起来一开始看起来还不错，直到我们向下滚动并查看视频。布局不是理想的，但我们可以做一些更改：
- en: The banner image at the top of the browser window is too large. While this may
    be okay on a desktop, it will choke smartphones; it needs to be resized.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器窗口顶部的横幅图片太大。虽然这在桌面电脑上可能没问题，但会在智能手机上造成拥堵；需要调整大小。
- en: The embedded video isn't respecting the boundaries of its container, with the
    result that it is spilling out over the whole page, making the text difficult
    to view.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入的视频没有尊重其容器边界，结果是它溢出了整个页面，使得文字难以阅读。
- en: We can improve on the use of the banner. Once we've changed it to a thinner
    design, we can then add a media query to switch in a smaller version of this thinner
    design.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以改进横幅的使用。一旦我们将其改为更薄的设计，我们就可以添加一个媒体查询来切换到这个更薄设计的较小版本。
- en: 'Fortunately, these are easy fixes to make. Let''s see what is involved:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这些修复很容易。让我们看看需要做什么：
- en: Save a copy of `mix-responsive.html` and `mix-responsive.css` as `mix-responsiveV2.html`
    and `mix-responsiveV2.css` respectively (in the same folder). Don't forget to
    change the link to the CSS file from within our HTML markup to point to the new
    file!
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`mix-responsive.html`和`mix-responsive.css`分别保存为`mix-responsiveV2.html`和`mix-responsiveV2.css`（在同一文件夹中）。别忘了将HTML标记内的CSS文件链接更改为指向新文件！
- en: 'Look for the `banner` div on or around line 28 and remove the `<img>` tags,
    so the HTML markup is as shown in the following line of code:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第28行或其附近查找`banner` div，并移除`<img>`标签，以便HTML标记与以下代码行所示相同：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Further down, look for `<video controls>` on or around line 34; we need to
    encompass it within a wrapper `<div>`:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面，在第34行或其附近查找`<video controls>`；我们需要将其包含在一个包装`<div>`中：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open up `mix-responsiveV2.css` and add the following styles:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mix-responsiveV2.css`并添加以下样式：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save the files. If we preview the results of our work in a browser, we can see
    a significant improvement in the appearance of our page.![Mixing video and image
    content on the same page](img/6968OT_03_01.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。如果我们在一个浏览器中预览我们的工作结果，我们可以看到页面外观的显著改进。![在同一页面上混合视频和图像内容](img/6968OT_03_01.jpg)
- en: Try resizing the page now; you should see that the video and image elements
    will resize perfectly, without any spillage. In a nutshell, our changes have been
    very simple. We've added a container to the video to which we've added the `max-width`
    style attribute and set this to `100%`. We then switched out the bulky banner
    to a thinner version, setting this to retain the full width of its container when
    resized. It is switched to a smaller version once we go below a screen width of
    `30rem`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试调整页面大小；你应该会看到视频和图像元素会完美地调整大小，没有任何溢出。简而言之，我们的改动非常简单。我们给视频添加了一个容器，并添加了`max-width`样式属性，将其设置为`100%`。然后我们用更薄的版本替换了笨重的横幅，设置它在调整大小时保留其容器的完整宽度。一旦屏幕宽度低于`30rem`，它就会切换到更小的版本。
- en: Tip
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: There is a completed version of our demo with the fixes in place. In the code
    download, look for and extract `mix-responsiveV2-finished.html` and `mix-responsiveV2-finished.css`.
    Save both to the same places as the original files to view the results.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个包含修复的完成版演示。在代码下载中，查找并提取`mix-responsiveV2-finished.html`和`mix-responsiveV2-finished.css`。将两个文件都保存在与原始文件相同的位置以查看结果。
- en: 'Before we move on and take a look at how we can make allowances for mobile
    devices when mixing content, I want to cover off a couple of tips that might help
    give you a little inspiration:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续并查看如何在混合内容时为移动设备做出让步之前，我想介绍一些可能对你有所帮助的小贴士：
- en: We've embedded the video directly in the page. It works perfectly well, but
    if we wanted to give it a little extra sparkle, we could consider using an overlay.
    There are plenty available, but one good (responsive) example is FrescoJS, available
    at [http://www.frescojs.com/](http://www.frescojs.com/).
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们直接在页面上嵌入了视频。它工作得非常好，但如果我们想给它增添一点额外的光彩，我们可以考虑使用覆盖层。有很多可供选择，但一个很好的（响应式）例子是FrescoJS，可在[http://www.frescojs.com/](http://www.frescojs.com/)找到。
- en: There may be a need to resort to jQuery to provide the responsive functionality
    for an element if CSS3 is not supported. Older browsers such as IE8 or below might
    fall into this category. We can do this using something such as Embedly jQuery,
    available at [http://embedly.github.io/embedly-jquery/](http://embedly.github.io/embedly-jquery/).
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果CSS3不受支持，可能需要求助于jQuery来为元素提供响应式功能。较老的浏览器，如IE8或以下版本，可能属于这一类。我们可以使用类似Embedly
    jQuery这样的工具来实现，可在[http://embedly.github.io/embedly-jquery/](http://embedly.github.io/embedly-jquery/)找到。
- en: Tip
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: There is a tutorial available on how to configure Embedly jQuery at [http://embed.ly/docs/tutorials/responsive](http://embed.ly/docs/tutorials/responsive).
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有一个关于如何配置Embedly jQuery的教程，可在[http://embed.ly/docs/tutorials/responsive](http://embed.ly/docs/tutorials/responsive)找到。
- en: If you need to add responsive code for third-party embedded videos (such as
    YouTube), you can use the service at [http://embedresponsively.com/](http://embedresponsively.com/);
    simply enter the URL of any video or image to embed and click on **Embed** to
    get the code.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要为第三方嵌入的视频（如YouTube）添加响应式代码，可以使用[http://embedresponsively.com/](http://embedresponsively.com/)提供的服务；只需输入要嵌入的任何视频或图像的URL，然后点击**嵌入**以获取代码。
- en: Okay! On we go! We've talked a lot about mixing content, but as we've seen from
    the demo, there are some aspects where there is room for improvement. The alterations
    we've made in our demo are just some of the pointers we can use to remove some
    of the pitfalls of mixing content, so let's take a look at a few in more detail.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 好的！我们继续！我们已经讨论了很多关于内容混合的问题，但正如我们在演示中看到的，还有一些方面可以改进。我们在演示中做出的改动只是我们可以用来消除内容混合的一些陷阱的一些指针，所以让我们更详细地看看几个例子。
- en: Considering the pitfalls of mixing content
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑内容混合的陷阱
- en: Responsive design has become hugely popular over the last few years, with visitors
    browsing content on the Internet using a variety of devices. This increases the
    pressure on developers to ensure that their sites work well on a range of different
    devices and platforms. A recent study by eMarketeer illustrates that four out
    of every five people will access content via a mobile device and that this figure
    is projected to increase over the next three years.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年中，响应式设计变得非常流行，访客使用各种设备在互联网上浏览内容。这增加了开发者确保他们的网站在各种不同的设备和平台上都能良好工作的压力。eMarketeer最近的一项研究表明，五分之四的人将通过移动设备访问内容，并且预计这个数字在未来三年内将增加。
- en: '| Region | 2014 | 2015 | 2016 | 2017 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 地区 | 2014 | 2015 | 2016 | 2017 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Middle East and Africa | 94.0 | 94.0 | 95.0 | 96.0 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 中东和非洲 | 94.0 | 94.0 | 95.0 | 96.0 |'
- en: '| Asia Pacific | 87.4 | 90.0 | 92.6 | 93.9 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 亚洲太平洋 | 87.4 | 90.0 | 92.6 | 93.9 |'
- en: '| Central and Eastern Europe | 72.4 | 80.6 | 86.6 | 91.7 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 中东和东欧 | 72.4 | 80.6 | 86.6 | 91.7 |'
- en: '| North America | 64.3 | 69.8 | 74.4 | 79.2 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 北美 | 64.3 | 69.8 | 74.4 | 79.2 |'
- en: '| Western Europe | 67.8 | 78.2 | 85.0 | 90.6 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 西欧 | 67.8 | 78.2 | 85.0 | 90.6 |'
- en: '| Latin America | 58.5 | 65.0 | 70.1 | 75.2 |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 拉丁美洲 | 58.5 | 65.0 | 70.1 | 75.2 |'
- en: '| **Worldwide** | **79.1** | **83.6** | **87.3** | **90.1** |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| **全球** | **79.1** | **83.6** | **87.3** | **90.1** |'
- en: The figures in the preceding table are percentage values taken from eMarketeer
    in December 2013.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 上表中数字是从2013年12月的eMarketeer中获取的百分比值。
- en: 'So that we don''t fall into the trap of producing a responsive site that offers
    a poor experience, let''s take a look at some of the pitfalls we need to consider
    when mixing media sources in responsive design:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免陷入制作出提供糟糕体验的响应式网站的陷阱，让我们看看在响应式设计中混合媒体源时需要考虑的一些陷阱：
- en: 'The size and number of images on a page will directly affect how quickly your
    visitors can view the page. To reduce the impact, we can use several techniques:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面上图像的大小和数量将直接影响访客查看页面的速度。为了减少影响，我们可以使用几种技术：
- en: Image compression is the first simple technique widely used. For a perfect example
    of the need to compress images, an article by Tribilis makes for interesting reading,
    available at [http://blog.trilibis.com/trilibis-web-performance-survey-finds-69-percent-of-responsive-design-websites-fail-to-deliver-acceptable-load-times-on-mobile-devices-02759](http://blog.trilibis.com/trilibis-web-performance-survey-finds-69-percent-of-responsive-design-websites-fail-to-deliver-acceptable-load-times-on-mobile-devices-02759).
    It shows some significant gains when images are compressed!
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像压缩是第一个被广泛使用的简单技术。为了说明压缩图像的必要性，Tribilis的一篇文章值得一读，可在[http://blog.trilibis.com/trilibis-web-performance-survey-finds-69-percent-of-responsive-design-websites-fail-to-deliver-acceptable-load-times-on-mobile-devices-02759](http://blog.trilibis.com/trilibis-web-performance-survey-finds-69-percent-of-responsive-design-websites-fail-to-deliver-acceptable-load-times-on-mobile-devices-02759)找到。它展示了当图像被压缩时的一些显著收益！
- en: The next important technique is the conversion of small images into data URIs
    or as part of an image sprite.
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个重要的技术是将小图像转换为数据URI或作为图像精灵的一部分。
- en: Another technique is the use of lazy loading to only show those images that
    are visible within the viewport.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一种技术是使用懒加载，只显示视口中可见的图像。
- en: We need to be aware of the breakpoints in our design and alter our media queries
    to suit. What may have worked well for images may not work equally as well for
    videos, particularly if they are of different sizes.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要意识到设计中的断点，并调整我们的媒体查询以适应。对于图像可能有效的方法可能对视频同样有效，尤其是如果它们的大小不同的话。
- en: Scaling smaller images to a larger size will result in the loss of quality;
    it is recommended to start with large size images and dynamically resize them
    for smaller devices. Once we get to a particular breakpoint, then we can switch
    to using a smaller image by default to avoid images becoming illegible if they
    have not been sized for a particular breakpoint / viewport width.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将较小的图像缩放到更大的尺寸会导致质量损失；建议从大尺寸图像开始，并为较小的设备动态调整大小。一旦达到特定的断点，我们就可以默认使用较小的图像，以避免图像在没有针对特定断点/视口宽度进行调整时变得难以辨认。
- en: Scaling images can cause issues when they are reduced to a very small size.
    The dimensions are likely to mean that we can't view the image properly, its meaning
    will be lost, the file size won't be any smaller, and it may be better to simply
    not display it instead.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当图像被缩小到非常小的尺寸时，缩放图像可能会引起问题。这些尺寸可能意味着我们无法正确查看图像，其含义将丢失，文件大小不会减小，而且可能最好是根本不显示它。
- en: Consider converting vector images to the SVG format. Conversion to standard
    image formats such as JPG, GIF, or PNG will likely lead to the same loss of quality
    as scaling small images to a larger size. SVG images scale well without any loss
    of quality.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑将矢量图像转换为SVG格式。转换为标准图像格式，如JPG、GIF或PNG，可能会导致与将小图像缩放到较大尺寸时相同的质量损失。SVG图像可以很好地缩放而不会损失质量。
- en: If your site uses video, then one pitfall that can trip you up is the format
    used. Although we only need to encode for MP4 or WebM support, not every device
    will use both. A careful analysis of web metrics should help us understand which
    operating systems are used to access the site and therefore help determine which
    format of video to use.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的网站使用视频，那么一个可能会让您陷入困境的陷阱是使用的格式。尽管我们只需要为MP4或WebM支持进行编码，但并非每个设备都会使用这两种格式。对网络指标进行仔细分析可以帮助我们了解哪些操作系统被用来访问网站，从而帮助我们确定要使用哪种视频格式。
- en: Tip
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: For an up-to-date check on format support, take a look at the articles available
    at [http://www.jwplayer.com/html5](http://www.jwplayer.com/html5).
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于格式支持的最新检查，请查看[http://www.jwplayer.com/html5](http://www.jwplayer.com/html5)上可用的文章。
- en: Do you use images for small elements such as buttons? If so, consider converting
    them to CSS3 equivalents, at least for the browsers that can support them. It
    will mean a reduction in requests to the server (we're not calling the images)
    and the CSS style sheet would have been cached by the browser, so the response
    will be quicker. There are plenty of examples available online; you can try Chris
    Coyier's Button creator at [http://css-tricks.com/examples/ButtonMaker/](http://css-tricks.com/examples/ButtonMaker/)
    or CSS Shape Generator at [http://html-generator.weebly.com/css-shape-generator.html](http://html-generator.weebly.com/css-shape-generator.html).
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是否使用图像来表示小元素，如按钮？如果是这样，请考虑将它们转换为CSS3等价物，至少对于可以支持它们的浏览器来说是这样。这意味着减少对服务器的请求（我们不会调用图像），并且CSS样式表已经被浏览器缓存，因此响应将更快。网上有很多示例；您可以在[http://css-tricks.com/examples/ButtonMaker/](http://css-tricks.com/examples/ButtonMaker/)尝试Chris
    Coyier的按钮创建器，或者在[http://html-generator.weebly.com/css-shape-generator.html](http://html-generator.weebly.com/css-shape-generator.html)尝试CSS形状生成器。
- en: 'Specifying only the width of images may cause a doubling or tripling of the
    cycles that many browsers must process to layout the new resized page. While each
    of these cycles typically take less than a millisecond, they stack up, especially
    if there are multiple scalable elements on the page. Addressing the height in
    the same declaration can reduce this issue:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅指定图像的宽度可能会导致许多浏览器必须处理的布局新调整大小页面的周期加倍或三倍。虽然这些周期中的每一个通常小于一毫秒，但它们会累积，尤其是在页面上有多个可缩放元素的情况下。在相同的声明中指定高度可以减少这个问题：
- en: '[PRE3]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If your site needs to display videos in 4:3 or 16:9 ratio format, then these
    may not resize properly. We can get around this using a wrapper in HTML that is
    styled to the proper dimensions, then stretch the video to fit the following container:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的网站需要以4:3或16:9的比率格式显示视频，那么这些视频可能无法正确调整大小。我们可以通过使用HTML中的包装器并设置正确的尺寸来解决这个问题，然后将视频拉伸以适应以下容器：
- en: '[PRE4]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The CSS styling would look something like this:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CSS样式可能看起来像这样：
- en: '[PRE5]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Phew! There are certainly plenty of places where we can be tripped up if we're
    not careful! Let's move on and take a look at a couple of tricks we can use to
    help manage media content in our pages, beginning with a look at preloading images.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 呼吁！当然有很多地方如果我们不小心就会被绊倒！让我们继续前进，看看我们可以用来帮助我们管理页面中媒体内容的几个技巧，首先是预加载图像的探讨。
- en: Using preloaders to reduce delays
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用预加载器减少延迟
- en: Preloading content is not a new concept in the world of web design. The idea
    is to reduce the amount of time it takes to view the page in a browser, as some
    (or all) of the content has been fetched ahead of viewing the page and cached
    in the browser.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页设计中，预加载内容不是一个新概念。其想法是减少在浏览器中查看页面所需的时间，因为一些（或全部）内容已经在查看页面之前被获取并缓存到浏览器中。
- en: There are plenty of examples available using JavaScript (such as PreloadJS at
    [http://www.createjs.com/#!/PreloadJS](http://www.createjs.com/#!/PreloadJS)).
    But this adds an extra overhead to our pages that we can avoid, particularly in
    a responsive design.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多使用JavaScript（如[http://www.createjs.com/#!/PreloadJS](http://www.createjs.com/#!/PreloadJS)上的PreloadJS）的示例。但这会给我们的页面增加额外的开销，我们可以避免，尤其是在响应式设计中。
- en: Instead, we can use CSS to achieve the same effect, provided the styles and
    images are called at the right time. This way, they will be ready for us when
    we render the images on screen.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以在适当的时候使用CSS来实现相同的效果，只要样式和图片被正确调用。这样，当我们在屏幕上渲染图片时，它们就会为我们准备好了。
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the purposes of this demo, I've simplified the code to concentrate on the
    preloading process only.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本演示的目的，我已经简化了代码，只关注预加载过程。
- en: 'Let''s take a look at preloading in action with a simple demo:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个简单的示例来看看预加载的实际应用：
- en: From the code download that accompanies this book, extract a copy of `preloading.html`
    and then save it in our project folder.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本书附带的代码下载中，提取一个`preloading.html`的副本，然后将其保存在我们的项目文件夹中。
- en: Next, extract `img01.png` to `img04.png` from the code download. The images
    should go into a subfolder marked `img` in our project folder.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从代码下载中提取`img01.png`到`img04.png`。这些图片应该放入我们项目文件夹中标记为`img`的子文件夹中。
- en: 'In a new file, add the following styles to a new CSS style sheet. Save this
    as `preloading.css`, in a `css` subfolder within our project folder:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新文件中，将以下样式添加到一个新的CSS样式表中。将其保存为`preloading.css`，位于项目文件夹中的`css`子文件夹内：
- en: '[PRE6]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Before we preview our work, it''s useful to take a quick look to see how this
    process works. The key to it is the class added to the body to retrieve the images
    before we use them later in our code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们预览我们的工作之前，快速查看这个过程是如何工作的是有用的。关键是添加到body中的类，在我们在代码中稍后使用它们之前检索图片：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we preview the results of our work, we''ll see the following four images
    appear:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们预览我们的工作结果，我们将看到以下四张图片出现：
- en: '![Using preloaders to reduce delays](img/6968OT_03_02.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![使用预加载器减少延迟](img/6968OT_03_02.jpg)'
- en: The beauty about using this method is that we've removed the need to have to
    use yet another library, such as PreloadJS. Instead, we can now choose to call
    it if we decide to provide support for older browsers that don't support the `body:before`
    trick we used in our demo.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法的美妙之处在于，我们不再需要使用另一个库，例如PreloadJS。相反，现在我们可以选择在决定为不支持我们演示中使用的`body:before`技巧的旧浏览器提供支持时调用它。
- en: Let's change tack and look at the reverse side of this coin—lazy loading. No,
    this is not some form of getting up on a Sunday morning after a particularly good
    night out (terrible joke!), but a means to only load and display images at the
    point of viewing them. Intrigued? I will reveal all as part of our next exercise.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改变方向，看看硬币的另一面——懒加载。不，这并不是在周日早上起床（尤其是在前一晚玩得很晚之后）的一种形式（糟糕的笑话！），而是一种只在查看图片时加载和显示图片的方法。好奇吗？我将在我们下一个练习中揭示一切。
- en: Adding lazy loading support to our pages
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的页面添加懒加载支持
- en: One of the primary aims of responsive design should be the consideration of
    any tactic we can use to reduce the overall loading time of our pages; this is
    particularly true for mobile devices.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式设计的主要目标之一应该是考虑任何可以用来减少我们页面整体加载时间的策略；这对于移动设备尤其如此。
- en: 'So far, you''ve seen how we can preload content. In some instances, this may
    not be ideal; instead, we can do the opposite and not load content until we are
    about to view it:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经看到了我们如何预加载内容。在某些情况下，这可能不是理想的；相反，我们可以做相反的事情，直到我们准备查看内容时才加载内容：
- en: '![Adding lazy loading support to our pages](img/6968OT_03_03.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![为我们的页面添加懒加载支持](img/6968OT_03_03.jpg)'
- en: This process is known as lazy loading; it effectively removes the focus of loading
    the images from the front (that is, on loading of the page) to the point of when
    we need to see the images. To illustrate the process, we're going to use the bLazy
    plugin by Bjørn Klinggard, available at [http://dinbror.dk/blog/blazy/](http://dinbror.dk/blog/blazy/).
    The great thing about this library is that it is lightweight and written in pure
    JavaScript, so has a zero dependency count! Oh and did I forget— it's responsive
    too.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程被称为懒加载；它有效地将加载图片的焦点从前面（即在页面加载时）移到我们需要看到图片的时刻。为了说明这个过程，我们将使用Bjørn Klinggard的bLazy插件，可在[http://dinbror.dk/blog/blazy/](http://dinbror.dk/blog/blazy/)找到。这个库的伟大之处在于它轻量级，是用纯JavaScript编写的，因此没有依赖项！哦，我忘了——它也是响应式的。
- en: 'Let''s take a quick look at a demo (based on the original by the author), which
    we could easily use as a basis for something more involved within any responsive
    design:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下一个演示（基于作者的原始作品），我们可以很容易地将其作为任何复杂响应式设计的起点：
- en: For the purposes of this demo, extract a copy of the `lazy loading` folder within
    the code download that accompanies this book. It contains the markup files, images,
    styling, and JavaScript needed for our demo.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了这个演示的目的，从本书附带的代码下载中提取`lazy loading`文件夹的副本。它包含我们演示所需的标记文件、图片、样式和JavaScript。
- en: Run the `lazyloading.html` file. Notice how only the first few images show?
    If we scroll down, we can see the green loading image appear with the next image
    appearing after a short delay.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`lazyloading.html`文件。注意，为什么只有前几幅图片显示？如果我们向下滚动，我们可以看到绿色加载图片出现，下一幅图片在短暂延迟后出现。
- en: 'The magic in this demo centers on this code excerpt from the demo:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个演示中的魔法集中在以下代码片段：
- en: '[PRE8]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We kick off with a placeholder image. In this instance, we're using a 1 px square
    PNG file that could be easily converted to its data-URI equivalent with little
    overhead. We then use two `data-src` tags to flip between either the small or
    large versions of the image when the window is resized.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个占位符图片开始。在这个例子中，我们使用一个1像素的PNG文件，它可以很容易地转换为数据URI等效物，几乎没有开销。然后我们使用两个`data-src`标签，在窗口调整大小时在图片的小版本和大版本之间切换。
- en: 'We can test to ensure that the pictures are indeed only being loaded when visible.
    In this instance, using Firefox''s **Developer** toolbar, we can see each URL
    loaded when viewed in the **Console** tab, as indicated in the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过测试来确保图片确实只有在可见时才被加载。在这个例子中，使用Firefox的**开发者**工具栏，我们可以在**控制台**标签页中看到每个URL在查看时加载的情况，如下面的截图所示：
- en: '![Adding lazy loading support to our pages](img/6968OT_03_04.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![为我们的页面添加懒加载支持](img/6968OT_03_04.jpg)'
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A small point to remember—in this instance, the preceding screenshot shows the
    use of a local webserver; the principle works the same whether the images are
    loaded from the filesystem or through a web server.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一个需要注意的小点——在这个例子中，前面的截图显示了本地Web服务器的使用；无论图片是从文件系统还是通过Web服务器加载，原理都是相同的。
- en: 'This demo is perfect as a basis to display a gallery effect on a site, particularly
    when viewed on a mobile device. With a bit of reconfiguration, we could even set
    it to display retina-based images; although that is something I will leave for
    you as a challenge! Let''s move on and cover a key topic when designing responsively:
    the need to make allowances for mobile devices.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个演示非常适合作为在网站上显示画廊效果的基座，尤其是在移动设备上查看时。稍作调整，我们甚至可以将其设置为显示基于视网膜的图片；尽管这将是留给你的一个挑战！让我们继续前进，讨论在设计响应式网站时的一个关键主题：为移动设备留出空间。
- en: Making allowances for mobile devices
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为移动设备留出空间
- en: Adding visual content to our pages will begin to bring the site alive, but we
    should bear in mind the increase in latency times. Latency is a major killer on
    mobile devices; if we take a 1 MB page with 80 plus requests, for example, loading
    the page can take over 4 seconds!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将视觉内容添加到我们的页面将使网站变得生动，但我们应该记住延迟时间的增加。延迟是移动设备上的主要杀手；例如，如果我们有一个1MB的页面，有80多个请求，加载页面可能需要超过4秒！
- en: 'Using JavaScript is expensive in terms of resources. It takes time and can
    block the rendering of pages. A much better alternative is to only load the resource
    when it is needed. On desktops, this is less of an issue, but becomes crucial
    for mobile devices. Take, for example, Google''s Gmail service—using this principle
    reduces the latency for loading JavaScript from 2600 ms to just 240 ms. With this
    in mind, let''s take a look at some useful tips we can consider to help reduce
    the impact of mixing responsive images and videos on a mobile device:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JavaScript在资源方面代价高昂。它需要时间，并且可能会阻塞页面的渲染。一个更好的替代方案是在需要时才加载资源。在桌面电脑上，这不太成问题，但对于移动设备来说变得至关重要。以谷歌的Gmail服务为例——使用这个原则将加载JavaScript的延迟从2600毫秒减少到仅仅240毫秒。考虑到这一点，让我们看看一些有用的提示，我们可以考虑它们以帮助减少在移动设备上混合响应式图片和视频的影响：
- en: 'If we are designing for mobile devices, it is essential to work out which platform
    our users are using. This will dictate what content can be displayed. One way
    is that we can use lazy loading (in the form of media queries) to only show images
    when required:'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们是为移动设备设计，确定我们的用户使用哪个平台是至关重要的。这将决定可以显示哪些内容。一种方法是我们可以使用懒加载（以媒体查询的形式）仅在需要时显示图片：
- en: '[PRE9]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Another method encourages conditional loading to only load those elements and
    styling that are necessary:'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一种方法鼓励条件加载，只加载必要的元素和样式：
- en: '[PRE10]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: These methods do not require any additional libraries to be imported. This is
    ideal if our site is already code-heavy and we want to avoid adding more to our
    site. In reality though, we may look to use something like RequireJS to manage
    the importing of files when needed; this does come with the overhead of the RequireJS
    library though!
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些方法不需要导入任何额外的库。如果我们的网站已经代码密集，并且我们想要避免添加更多内容到我们的网站，这是理想的。然而，在现实中，我们可能会考虑使用类似RequireJS的东西来管理文件的导入，尽管这会带来RequireJS库的开销！
- en: A good practice is to carefully consider whether all of the elements on the
    page are really needed for a useable mobile experience. Check those social media
    buttons. For example, some may be larger than you think and while they could be
    replaced with smaller/lighter versions, it may make better sense to not include
    them at all for mobile devices. Alternatively, consider loading the larger ones
    using conditional loading, while smaller ones can be loaded automatically. A great
    example of an easy replacement is to consider using the FontAwesome icons instead
    of images. This will help reduce the number of files that need to be loaded by
    the server (see the next point).
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个好的做法是仔细考虑页面上所有的元素是否真的对于一个可用的移动体验是必需的。检查那些社交媒体按钮。例如，一些可能比你想象的要大，虽然可以用更小、更轻的版本替换，但对于移动设备来说，完全不包括它们可能更合理。或者，考虑使用条件加载来加载较大的元素，而较小的元素可以自动加载。一个很好的替代方案是考虑使用FontAwesome图标而不是图片。这将有助于减少服务器需要加载的文件数量（参见下一点）。
- en: Consider using data URIs (via a generator service, such as [http://datauri.net/](http://datauri.net/))
    or sprites / web fonts (such as Entype or FontAwesome) in place of images. Although
    data URIs or sprites may not make the code smaller, they will reduce the number
    of requests to the server. Using web fonts can have the same effect too; we can
    take it even further with building a custom font using the Fontello service at
    [http://www.fontello.com](http://www.fontello.com)).
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用数据URI（通过生成服务，如[http://datauri.net/](http://datauri.net/)）或精灵/网络字体（如Entype或FontAwesome）来代替图片。虽然数据URI或精灵可能不会使代码更小，但它们将减少对服务器的请求次数。使用网络字体也可以达到同样的效果；我们可以通过使用[http://www.fontello.com](http://www.fontello.com)上的Fontello服务构建自定义字体来更进一步。
- en: If you are using videos on your site, consider hosting them on YouTube. This
    will save space and bandwidth costs to your site. In addition, there will be a
    consistent format, which reduces the risk of any issues where videos can't play
    on mobile devices.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你网站上使用视频，考虑在YouTube上托管它们。这将节省空间和带宽成本。此外，将有一个一致的格式，这减少了视频在移动设备上无法播放的风险。
- en: Be careful about where you use large, high quality images—on mobile devices,
    your visitors will not thank you when their data usage goes through the roof!
    There are plenty of options available to reduce the image size. We will look at
    two such examples later in this chapter that use Node JS to resize and compress
    images automatically.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用大尺寸、高质量图片时要小心——在移动设备上，当访客的数据使用量激增时，他们不会感谢你！有许多选项可以减少图片大小。我们将在本章后面查看两个这样的示例，它们使用Node
    JS自动调整图片大小和压缩。
- en: Note
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Alternatively, if you need to display images on high pixel density displays,
    doubling the size but increasing the compression will help reduce the file size.
    To see the effect in action, take a look at the tutorial available at [http://greatfridays.com/blog/images-in-responsive-web-development/](http://greatfridays.com/blog/images-in-responsive-web-development/).
    Can you see any difference in quality between the two images used in the PayPal
    demo?
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，如果你需要在高像素密度显示上显示图片，将大小加倍但增加压缩将有助于减少文件大小。要查看实际效果，请查看[http://greatfridays.com/blog/images-in-responsive-web-development/](http://greatfridays.com/blog/images-in-responsive-web-development/)上的教程。你能在PayPal演示中使用的两个图片之间看到任何质量上的差异吗？
- en: Always set videos to show a poster image and not to automatically play for mobile
    devices. There are many options to produce images (including those that can be
    automated), so there is no excuse. We'll see one example later in this chapter,
    which can be easily adapted to produce an extra image to serve as the poster.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是设置视频在移动设备上显示海报图片而不是自动播放。有许多选项可以生成图片（包括可以自动化的），所以没有借口。我们将在本章后面看到一个示例，它可以很容易地调整以生成额外的图片作为海报。
- en: A useful tool to get to grips with is the Page Visibility or Network APIs. This
    appears very simple to implement, but opens up a variety of possible uses. One
    such use is to shut off any videos that are playing temporarily if a browser window
    is not being displayed; this will help reduce bandwidth costs.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有用的工具是页面可见性或网络API。这看起来非常简单易行，但可以开启多种可能的用途。其中一种用途是在浏览器窗口未被显示时暂时关闭任何正在播放的视频；这将有助于降低带宽成本。
- en: If your site requires a lot of vector images, you will get better results using
    SVG-formatted files. These are effectively XML files that can resize with no loss
    of quality.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的网站需要大量的矢量图像，您将使用SVG格式的文件获得更好的结果。这些实际上是XML文件，可以无损缩放。
- en: Enough theory—let's actually try out two of these tips; we could complete them
    manually, but instead we can take advantage of a task runner to complete them
    automatically. Intrigued? I will explain all, beginning with a look at creating
    responsive versions of our chosen images.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 足够的理论——让我们实际尝试这两条建议；我们可以手动完成它们，但我们可以利用任务运行器自动完成它们。好奇吗？我将解释一切，从查看创建我们选择的图片的响应式版本开始。
- en: Creating responsive images automatically
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动创建响应式图片
- en: A key part of providing content for any website is of course images. This becomes
    all the more important on responsive sites where we've seen that multiple versions
    of the same image are needed to provide a fluid solution to our responsive needs.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为任何网站提供内容的关键部分当然是图片。这在响应式网站上尤为重要，因为我们已经看到，需要多个版本的同一图片来提供流畅的响应式解决方案。
- en: 'We could of course create each version of the image manually, but this is the
    21st century: who wants (or even has the time) to create different sizes manually?
    Surely there has to be a better way. You''d be right: we can automate the whole
    process. Let''s take a look how using the Node JS task runner as the basis to
    automate the process.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当然可以手动创建每个版本的图片，但这是21世纪：谁愿意（或者甚至有时间）手动创建不同大小的图片？肯定有更好的方法。您是对的：我们可以自动化整个过程。让我们看看如何使用Node
    JS任务运行器作为自动化过程的基础。
- en: Note
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This exercise is designed to run as standalone; the principles can easily be
    applied to a larger, more complex grunt process as you get more accustomed to
    using Grunt.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习被设计成独立运行；随着您越来越习惯使用Grunt，这些原则可以轻松地应用到更大、更复杂的Grunt流程中。
- en: 'Let''s make a start by installing Node JS:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从安装Node JS开始：
- en: We'll begin by browsing to [http://nodejs.org/download/](http://nodejs.org/download/)
    to download the latest version for your platform. It's available for Windows,
    Mac, and Linux platforms. Double-click on the **MSI installer** and run through
    the wizard, accepting all defaults.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先浏览到[http://nodejs.org/download/](http://nodejs.org/download/)下载您平台上的最新版本。它适用于Windows、Mac和Linux平台。双击**MSI安装程序**并运行向导，接受所有默认设置。
- en: From the code download, extract the `responseimg` folder and save it on your
    PC.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从代码下载中，提取`responseimg`文件夹并将其保存在您的PC上。
- en: 'Bring up a Node JS command prompt, then change to the `responseimg` folder
    and run this command to install `grunt-responsive-images`:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Node JS命令提示符，然后切换到`responseimg`文件夹，并运行以下命令来安装`grunt-responsive-images`：
- en: '[PRE11]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will install `grunt-responsive-images`, along with the dependencies and
    Grunt; in this instance, we're using the `grunt-simple-watch` applet to automatically
    monitor our folder for any changes.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将安装`grunt-responsive-images`，以及依赖项和Grunt；在这种情况下，我们正在使用`grunt-simple-watch`小程序自动监控我们的文件夹中的任何更改。
- en: 'At the command prompt, change to the `src` folder and then run the following
    command:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符下，切换到`src`文件夹，然后运行以下命令：
- en: '[PRE12]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This kicks off the `grunt-simple-watch` plugin to begin automatically monitoring
    for changes in the `src` folder. In this example, I've already dropped a single
    JPEG image into the `src` folder, which is also shown in the following screenshot:![Creating
    responsive images automatically](img/6968OT_03_05.jpg)
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将启动`grunt-simple-watch`插件以自动监控`src`文件夹中的更改。在这个例子中，我已经将单个JPEG图像放入了`src`文件夹，这也在下面的屏幕截图中有显示：![自动创建响应式图片](img/6968OT_03_05.jpg)
- en: Any image dropped into the `src` folder will be used to create three new images,
    such as the example shown in the following screenshot:![Creating responsive images
    automatically](img/6968OT_03_06.jpg)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何放入`src`文件夹的图片都将被用来创建三个新的图片，如下面的屏幕截图所示：![自动创建响应式图片](img/6968OT_03_06.jpg)
- en: The automated process is now ready for use. We can drop any number of JPEG images
    into the folder; three new images will be produced for each new image dropped
    into the folder.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化流程现在已准备好使用。我们可以将任意数量的JPEG图像放入文件夹中；对于放入文件夹中的每一张新图像，都会生成三张新图像。
- en: Tip
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We're using the default sizes for each image as specified in the plugin; these
    can be easily customized in the options for the plugin within our `gruntfile.js`
    file.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用插件中指定的默认图像大小；这些大小可以在我们的`gruntfile.js`文件中的插件选项中轻松自定义。
- en: Automating the shrinking process
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化缩小过程
- en: We can of course develop this automation further. It's definitely worth reading
    up on the capabilities of Node and checking out some of the wide range of plugins
    that have been created to help automate otherwise time-consuming processes that
    do not add any value when done manually.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当然可以进一步开发这个自动化流程。阅读Node的能力以及检查一些广泛创建的插件，这些插件可以帮助自动化那些手动完成时不会增加任何价值的耗时流程，这绝对值得。
- en: 'Let''s take a look at one way of extending our automated process. We''ve set
    up a process to create the images, but there is a likelihood that some of the
    images are not compressed as much as they could be. We can fix that by adding
    in support for compression, using the `grunt-contrib-imagemin` plugin:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看扩展我们的自动化流程的一种方法。我们已经设置了一个创建图像的流程，但有一些图像可能没有压缩到它们可能达到的程度。我们可以通过添加对压缩的支持，使用`grunt-contrib-imagemin`插件来解决这个问题：
- en: 'Open up a copy of the `gruntfile.js` file. We first need to add in support
    for the `grunt-contrib-imagemin` plugin, so go ahead and modify the line as shown
    in the following code snippet:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`gruntfile.js`文件的副本。我们首先需要添加对`grunt-contrib-imagemin`插件的支持，所以请按照以下代码片段所示进行修改：
- en: '[PRE13]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, alter the code to add in the block for `imagemin` task as shown in the
    following code snippet:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改代码以添加`imagemin`任务的代码块，如下代码片段所示：
- en: '[PRE14]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When running the task in Grunt, we need to tell it to load in the `grunt-contrib-imagemin`
    plugin, so go ahead and add this line into the `gruntfile.js` file as indicated
    in the following lines of code:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在Grunt中运行任务时，我们需要告诉它加载`grunt-contrib-imagemin`插件，所以请按照以下代码行所示将其添加到`gruntfile.js`文件中：
- en: '[PRE15]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We need to make one final change, so go ahead and alter the following line
    as shown:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要进行最后一次修改，所以请按照以下代码行所示进行修改：
- en: '[PRE16]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Bring up a NodeJS command prompt and run the following command to add the plugin
    and its dependencies to the `package.json` file:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开NodeJS命令提示符并运行以下命令，将插件及其依赖项添加到`package.json`文件中：
- en: '[PRE17]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We''re now ready to test our Grunt package. In the command prompt, change the
    directory to the project folder, then run this command:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已准备好测试我们的Grunt包。在命令提示符中，将目录更改为项目文件夹，然后运行此命令：
- en: '[PRE18]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If all is well, we'll see the Grunt task run and successfully produce three
    new images, which are then compressed.![Automating the shrinking process](img/6968OT_03_07.jpg)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们将看到Grunt任务运行并成功生成三张新图像，然后这些图像将被压缩。![自动化缩小过程](img/6968OT_03_07.jpg)
- en: The automation process is now ready for use. Although we've only put one image
    through the process, we could at this point put many images through. I would recommend
    running some tests to gauge how many you can safely process at the same time,
    as this will be dependent on resources in your PC or Mac.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化流程现在已准备好使用。尽管我们只将一张图像通过这个过程，但在此阶段我们可以将许多图像通过这个过程。我建议运行一些测试来评估你可以安全同时处理多少图像，因为这将取决于你的PC或Mac的资源。
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Phew! We've certainly packed a lot into a small space! Let's recap on what you've
    learned throughout this chapter. We kicked off with a demo of mixing video and
    image content, initially to see firsthand some of the issues we face when mixing
    content, but then to use some of the tips and tricks you've learned to get the
    pages to behave responsively.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 呼吁！我们确实在这个小空间里装了很多东西！让我们回顾一下本章所学的内容。我们从一个混合视频和图像内容的演示开始，最初是为了亲眼看到混合内容时遇到的一些问题，但后来是使用你学到的一些技巧和窍门来使页面具有响应性。
- en: Having looked at a demo, we then moved onto considering some of the pitfalls
    of mixing content; we saw how the large increase in responsive use has increased
    over the last few years making it crucial that our designs work on a variety of
    platforms. We covered a number of tips we can use to make allowances for mobile
    platforms in our designs.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在观看演示后，我们开始考虑一些混合内容可能遇到的陷阱；我们看到了在过去几年中，响应式使用的显著增加，这使得我们的设计在各种平台上工作变得至关重要。我们介绍了一些我们可以用来在设计中为移动平台做出让步的技巧。
- en: We ended the chapter looking at two demos using NodeJS to automate the creation
    of different versions of our images and automatically shrinking them; this illustrates
    how we can automate the process and save us a lot of manual effort.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在章节的最后部分展示了两个使用NodeJS自动创建我们图像的不同版本并自动缩小它们的演示；这说明了我们如何自动化这个过程并节省大量的手动工作。
- en: Now that we have our content, we need to test it thoroughly to ensure it works
    across a wide range of devices. We'll take a look at the testing process in the
    next chapter, examining some of the considerations and pitfalls we need to be
    aware of when working with responsive media.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了我们的内容，我们需要彻底测试它以确保它能在广泛的设备上正常工作。我们将在下一章中查看测试过程，探讨我们在处理响应式媒体时需要了解的一些考虑因素和陷阱。
