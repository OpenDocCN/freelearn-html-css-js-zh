- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: The Utility Belt – Tools Every Superhero SDET Needs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具腰带——每个超级英雄 SDET 需要的工具
- en: This is not your ordinary technical manual, which can be dry and boring. This
    book is intended to be fun. That’s why many of the chapters share a comic book
    theme. But unlike some superheroes, you won’t need to be bitten by a radioactive
    arachnid to get these powers. We just need some tools to create a great framework
    using WebdriverIO in TypeScript.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是您普通的枯燥乏味的科技手册。这本书旨在有趣。这就是为什么许多章节都采用了漫画书主题。但与一些超级英雄不同，您不需要被放射性蜘蛛咬伤才能获得这些力量。我们只需要一些工具，利用
    TypeScript 中的 WebdriverIO 创建一个伟大的框架。
- en: If you are just beginning your journey as a **software developer engineer in
    test** (**SDET**), you might be tempted to just skip ahead, install the TypeScript
    coding environment, run your first test, and hopefully see a **Pass** result.
    I’ve done that myself, only to realize later there were some tools I missed that
    could have helped make the journey easier from the start. That is why this first
    chapter speaks to the system specifications, tools, and configurations that will
    help us write better code from day one.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是刚开始作为 **软件测试开发工程师**（**SDET**）的旅程，您可能会想直接跳过，安装 TypeScript 编码环境，运行您的第一个测试，并希望看到
    **通过**的结果。我自己也这样做过，但后来意识到有些工具我错过了，这些工具本可以帮助从开始就使旅程变得更轻松。这就是为什么第一章讲述了系统规格、工具和配置，这些将帮助我们从第一天开始编写更好的代码。
- en: Along the way, I’ll be providing tips and tricks from more than 20 years as
    an SDET. There will be rules of thumb and advanced techniques. These are designed
    to help you write more tests, debug more efficiently, and produce a testing framework
    that will be stable, scalable, and require far less code maintenance.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我将分享我作为 SDET 超过 20 年的经验和技巧。这里会有一些经验法则和高级技术。这些旨在帮助您编写更多测试，更有效地调试，并创建一个稳定、可扩展的测试框架，且代码维护量远低于其他框架。
- en: 'The main topics covered in this chapter are:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主要主题包括：
- en: The Virgin machine setup
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纯净机器设置
- en: Installing Visual Studio Code for your operating system
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的操作系统安装 Visual Studio Code
- en: Writing better code with Prettier, ESLint, and GitLens
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Prettier、ESLint 和 GitLens 编写更好的代码
- en: Installing Chrome extensions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Chrome 扩展程序
- en: Installing WebdriverIO
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 WebdriverIO
- en: Virgin machine setup
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 纯净机器设置
- en: 'Before you can do anything in the world of test automation on a virgin machine,
    you must install some packages, so you will need admin rights to the machine.
    So, before going any further, please ensure you have the following packages installed
    globally with their most stable version:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以在纯净机器上的测试自动化世界中做任何事情之前，您必须安装一些包，因此您需要机器的管理员权限。所以，在继续之前，请确保您已经全局安装了以下包及其最稳定的版本：
- en: NodeJS
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NodeJS
- en: Yarn
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yarn
- en: Java JDK
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java JDK
- en: An **integrated development environment** (**IDE**) (IntelliJ, VSCode, and so
    on)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成开发环境**（**IDE**）（IntelliJ、VSCode 等等）'
- en: Git
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git
- en: 'Here are some extra steps if you are using a Windows machine:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用 Windows 机器，以下是一些额外的步骤：
- en: Set up the PATH environment for your node
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的 node 设置 PATH 环境变量
- en: Reboot the machine for all the changes to take effect
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重启机器以使所有更改生效
- en: 'Before we get to running our first test, we need to check out system requirements
    and get our tools. In this chapter, we’re going to cover how to install and configure
    tools that will make our job easier, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们运行第一个测试之前，我们需要检查系统要求并获取我们的工具。在本章中，我们将介绍如何安装和配置使我们的工作更轻松的工具，如下所示：
- en: '**Hardware specifications**'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬件规格**'
- en: '**Node.js**'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js**'
- en: '**A GitHub account** and **GitHub Desktop** for code change management'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub 账户**和 **GitHub Desktop** 用于代码变更管理'
- en: '**Microsoft Visual** **Studio Code**'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft Visual** **Studio Code**'
- en: '**Prettier**, **GitLens**, and **ESLint extensions**'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Prettier**、**GitLens** 和 **ESLint 扩展**'
- en: The **SelectorsHub** and **EditThisCookie** Chrome extensions
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SelectorsHub** 和 **EditThisCookie** Chrome 扩展程序'
- en: Note that to install these tools, you will need local admin rights or know someone
    in your IT security department who has the rights and can install them for you.
    Without local admin rights, you won’t get far. You should have the same rights
    as the product development team, whose applications you will be testing.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，要安装这些工具，您需要本地管理员权限，或者认识您 IT 安全部门中拥有权限并能为您安装它们的人。没有本地管理员权限，您将无法取得进展。您应该拥有与产品开发团队相同的权限，您将测试他们的应用程序。
- en: This brings us to our first rule of thumb.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这就带我们来到了我们的第一个经验法则。
- en: Rule of thumb – the hardware resources and access rights must match the development
    team
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 经验法则——硬件资源和访问权限必须与开发团队相匹配
- en: Throughout this book, I will be bringing up some rules of thumb that I use to
    keep us on the path and out of the thorn bushes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我将提出一些我用来保持我们走在正确道路上的经验法则，并避开荆棘丛。
- en: Let’s talk about why this is important. Upfront, you can assess if your automation
    project will succeed just by considering if you can install Chrome extensions.
    If your corporate IT security department prevents the installation of any browser
    extensions, your automation progress will be severely hindered. We all want to
    have a successful test automation project. We do not want to start our journey
    hamstrung. *Test automation is code development; it requires developer tools,
    and you are a developer.* Do not let anyone tell you differently.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈为什么这很重要。一开始，你只需考虑你是否能安装Chrome扩展，就可以评估你的自动化项目是否会成功。如果你的企业IT安全部门阻止安装任何浏览器扩展，你的自动化进度将受到严重阻碍。我们都希望有一个成功的测试自动化项目。我们不想在起点就受到限制。*测试自动化是代码开发；它需要开发工具，而你就是一个开发者。*不要让任何人告诉你不同。
- en: If your employer or client sees your project as just record and playback, you
    are at risk of having a project that is doomed to fail from the start. The biggest
    red flag that this is the case is that your computer resources and access do not
    match that of your developers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的雇主或客户将你的项目视为仅仅是记录和回放，那么你的项目从一开始就注定要失败。这种情况的最大红旗是，你的计算机资源和访问权限与开发者的不匹配。
- en: '*Question: What are the technical spec requirements for my WebdriverIO test*
    *automation system?*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*问题：我的WebdriverIO测试自动化系统的技术规格要求是什么？*'
- en: 'The answer is a simple *Do* and *Do not*:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 答案很简单：*做*和*不做*：
- en: '*Do not* use the minimum requirements listed anywhere on the internet. Whatever
    it is, it is too small.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*不要*使用互联网上任何地方列出的最低要求。无论是什么，都太小了。'
- en: '*Do* match the CPU speed, the amount of RAM, the drive space, and the number
    of monitors on desks.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*确实*要匹配CPU速度、RAM数量、驱动器空间和桌面上显示器的数量。'
- en: This includes matching the version of the Mac or Windows operating system used
    by the development team. Windows should be 64-bit and probably the Professional
    edition.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括匹配开发团队使用的Mac或Windows操作系统的版本。Windows应该是64位的，可能是专业版。
- en: It also includes the local admin rights of your application developers. This
    allows you to install browser extensions that will save your team time. This means
    you might have to propose a business case to meet this requirement.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这还包括你的应用程序开发者的本地管理员权限。这允许你安装将节省团队时间的浏览器扩展。这意味着你可能需要提出一个商业案例来满足这一要求。
- en: 'It is simple, really: without these tools, you will spend time trying to write
    locators by hand and taking extra steps to clear cookies. The project will go
    slower, and the company will pay more for fewer tests in the same amount of time.
    In extreme cases, you may have to walk away from a project and find a new employer
    who is ready to take QA testing seriously. The only exception is if your application
    developers are using Eclipse, which is not recommended for professional-level
    code development.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 真的很简单：没有这些工具，你将花费时间手动编写定位器，并采取额外步骤来清除cookies。项目将进展缓慢，公司将在相同的时间内为更少的测试支付更多费用。在极端情况下，你可能不得不放弃一个项目，并寻找一个愿意认真对待QA测试的新雇主。唯一的例外是如果你的应用程序开发者正在使用Eclipse，这并不推荐用于专业级别的代码开发。
- en: That said, let’s begin by installing the tools for WebdriverIO so that we’re
    heading in the right direction.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们首先安装WebdriverIO的工具，以确保我们朝着正确的方向前进。
- en: We will start by emulating two heroes who have unlimited wealth and brilliant
    minds. To be effective at fighting crime, one has a utility belt with multiple
    tools and the other a metal suit with AI intelligence to help bring villains—or,
    in our case, bugs—to justice faster.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先模仿两个拥有无限财富和卓越智慧的英雄。为了有效地打击犯罪，一个拥有多个工具的腰带，另一个则有一个带有AI智能的金属战衣，以帮助更快地将恶棍——或者在我们的情况下，是虫子——绳之以法。
- en: Installing Node.js and npm
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Node.js和npm
- en: Node.js is an open source, cross-platform runtime environment and an asynchronous
    library that is used for running web applications outside the client’s browser.
    This project was created with Node version 16.13.0 for several reasons. Earlier
    versions were only required to support synchronous mode, which was deprecated
    in WebDriverIO 7.0 and removed in version 8.0\. While the latest version of Node
    as of this writing is 19.8.1, it is recommended to use 16.13.0 as it is the most
    compatible with most other modules and packages.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 是一个开源的、跨平台的运行时环境，也是一个用于在客户端浏览器之外运行 Web 应用的异步库。该项目使用 Node 版本 16.13.0
    创建，出于几个原因。早期版本仅需要支持同步模式，这在 WebDriverIO 7.0 中已被弃用，并在版本 8.0 中被移除。尽管截至本文撰写时 Node
    的最新版本是 19.8.1，但建议使用 16.13.0，因为它与大多数其他模块和包的兼容性最好。
- en: Make sure you have enough hard drive space for the installation. It will take
    a minimum of 3 GB to install. By default, these tools are installed on the `C:`
    drive. If your drive is nearing capacity, consider installing it on a larger drive
    partition.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您有足够的硬盘空间用于安装。安装至少需要 3 GB。默认情况下，这些工具安装在 `C:` 驱动器上。如果您的驱动器接近容量，请考虑在更大的驱动器分区上安装。
- en: 'Let’s begin by installing Node and npm. The following screenshot shows how
    you can do this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从安装 Node 和 npm 开始。以下截图显示了如何进行操作：
- en: '![Figure 1.1 – Downloading Node.js from https://nodejs.org/en/download/](img/B19395_Figure_1.1.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 从 https://nodejs.org/en/download/ 下载 Node.js](img/B19395_Figure_1.1.jpg)'
- en: Figure 1.1 – Downloading Node.js from https://nodejs.org/en/download/
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 从 https://nodejs.org/en/download/ 下载 Node.js
- en: For Mac, install the latest `.``pkg` file.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Mac，安装最新的 `.pkg` 文件。
- en: For Windows, download the 64-bit version.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows，下载 64 位版本。
- en: The version of Node.js to install will be `@wdio/sync` *synchronous mode*, which
    is supported and stable only through Node.js version 12.0\. This book will use
    asynchronous command execution with the `async()` and `await()` commands.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装的 Node.js 版本将是 `@wdio/sync` **同步模式**，它仅通过 Node.js 版本 12.0 得到支持且稳定。本书将使用 `async()`
    和 `await()` 命令进行异步命令执行。
- en: 'The installation will also install the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程中还将安装以下内容：
- en: '**Chocolatey** for Windows or **Brew** for Mac, a package installation tool'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chocolatey** 用于 Windows 或 **Brew** 用于 Mac，是一个包安装工具'
- en: '**Python**'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python**'
- en: '**Node.js**'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js**'
- en: '**npm**'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**npm**'
- en: '**Required** **system updates**'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**必需** **系统更新**'
- en: Reminder
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: These all will require admin rights to complete successfully.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都需要管理员权限才能成功完成。
- en: 'Once completed, check whether the Node.js and Chocolatey paths have been added
    to the system’s `PATH` environment variables, as illustrated in the following
    screenshot. If not, they must be added manually:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，检查 Node.js 和 Chocolatey 路径是否已添加到系统的 `PATH` 环境变量中，如下面的截图所示。如果没有，它们必须手动添加：
- en: '![Figure 1.2 – Node.js and Chocolatey paths in the PATH environment variable
    for Windows](img/B19395_Figure_1.2.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – Windows PATH 环境变量中的 Node.js 和 Chocolatey 路径](img/B19395_Figure_1.2.jpg)'
- en: Figure 1.2 – Node.js and Chocolatey paths in the PATH environment variable for
    Windows
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – Windows PATH 环境变量中的 Node.js 和 Chocolatey 路径
- en: 'For both Mac and Windows, we will install a version of Node that is at least
    version 18.0\. From the command shell, type these two commands:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Mac 和 Windows，我们将安装至少版本 18.0 的 Node。从命令行中，输入以下两个命令：
- en: '[PRE0]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: While this completes the Node installation, we need to take note of alternative
    package managers that offer additional options.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这完成了 Node 的安装，但我们还需要注意提供额外选项的替代包管理器。
- en: Alternate node package managers – Yarn versus npm
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替代节点包管理器 – Yarn 与 npm 的比较
- en: While npm is the default node package manager provided, we recommend using Yarn
    to both install packages and run programs. One major advantage of Yarn is that
    it installs packages in parallel. This reduces the build time significantly when
    initializing or refreshing the `package.json` file.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 npm 是默认的节点包管理器，但我们推荐使用 Yarn 来安装包和运行程序。Yarn 的一个主要优点是它并行安装包。这显著减少了初始化或刷新 `package.json`
    文件时的构建时间。
- en: 'Again, from the command shell type the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 再次从命令行输入以下内容：
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After installing Yarn, you can verify the installation by running the following
    command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Yarn 后，您可以通过运行以下命令来验证安装：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With that complete, we will now decide where our project will live.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，我们将决定项目将存放在哪里。
- en: Configuring the coding environment with GitHub Desktop
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GitHub Desktop 配置编码环境
- en: In upcoming chapters, we will dive deeper into Git and GitHub for code versioning.
    But it is good to plan, so we will create a Git folder structure for our projects.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将更深入地探讨 Git 和 GitHub 用于代码版本控制。但制定计划总是好的，因此我们将为我们的项目创建一个 Git 文件夹结构。
- en: Our `wdio` project workspace will live in a Git `C:` drive. The reason is that
    Node.js projects rely on many supporting packages. These will take up a significant
    amount of additional space in the `node_modules` folder. At some point, the drive
    will be filled, affecting responsiveness.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `wdio` 项目工作区将位于 Git `C:` 驱动器中。原因是 Node.js 项目依赖于许多支持包。这些将在 `node_modules`
    文件夹中占用大量的额外空间。在某个时候，驱动器将被填满，影响响应速度。
- en: 'Let’s begin by creating a `\repos` folder at the root of our drive, or on the
    desktop on Mac, to hold our projects:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在驱动器根目录或 Mac 上的桌面上创建一个 `\repos` 文件夹开始，以存放我们的项目：
- en: '![Figure 1.3 – Sample repository and project directory structure](img/B19395_Figure_1.3.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 示例仓库和项目目录结构](img/B19395_Figure_1.3.png)'
- en: Figure 1.3 – Sample repository and project directory structure
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 示例仓库和项目目录结构
- en: Our project will live inside a local repository named `\wdio`. This is where
    we will create a place where our files will be stored. Later, we will use code
    repositories for version control, such as **GitHub**, **GitLab**, and **Bitbucket**.
    For this book, we will use GitHub, and GitHub Desktop will be our code-commit
    tool.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目将位于名为 `\wdio` 的本地仓库中。这是我们存储文件的地方。稍后，我们将使用代码仓库进行版本控制，例如**GitHub**、**GitLab**和**Bitbucket**。对于这本书，我们将使用
    GitHub，GitHub Desktop 将是我们的代码提交工具。
- en: GitHub and the GitHub Desktop tool
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub 和 GitHub Desktop 工具
- en: One tool all developers require is code version control. It will be a requirement
    for any team you join, and they will expect you to know Git commands. Learning
    the syntax and commands can pose a challenge for new coders. Mistakes typed at
    the Command Prompt can occur at any point, and knowing how to resolve these issues
    can be a bigger challenge.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 所有开发者都需要的一个工具是代码版本控制。这将是任何你加入的团队的要求，并且他们期望你了解 Git 命令。学习语法和命令对新程序员来说可能是一个挑战。在命令提示符中输入的错误可能在任何时刻发生，而知道如何解决这些问题可能是一个更大的挑战。
- en: However, there is an easier approach that will make life better. Using the **GitHub
    Desktop** tool for code commits gives a visual insight into code changes. You
    can examine the Git commands it uses to learn to use the Terminal window with
    fewer errors.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个更简单的方法可以使生活变得更美好。使用**GitHub Desktop**工具进行代码提交，可以直观地了解代码更改。你可以检查它使用的 Git
    命令，以学习如何使用终端窗口并减少错误。
- en: First, we need a GitHub account.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个 GitHub 账户。
- en: Getti[ng a GitHub ac](http://www.github.com)count
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取 GitHub 账户
- en: Go to [www.github.com](http://www.github.com) and click **Sign up**. Enter an
    email, a password, and a username, and verify your account.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [www.github.com](http://www.github.com) 并点击**注册**。输入电子邮件、密码和用户名，并验证您的账户。
- en: 'During the account setup process, select the **Automation and CI/CD** option.
    This configures the project for executions that can be triggered automatically
    at certain times of the day or week:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在账户设置过程中，选择**自动化和 CI/CD**选项。这将配置项目，使其能够在一天或一周中的特定时间自动触发执行：
- en: '![Figure 1.4 – Automation and CI/CD configuration](img/B19395_Figure_1.4.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 自动化和 CI/CD 配置](img/B19395_Figure_1.4.jpg)'
- en: Figure 1.4 – Automation and CI/CD configuration
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 自动化和 CI/CD 配置
- en: 'We now have a free public GitHub account to practice commits and version control.
    Now, go to your GitHub page and create a `wdio` repository with a README file.
    Note that free GitHub accounts are public. When working in a professional capacity,
    it is always best that you or your employer acquire a paid plan to make the repository
    private:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个免费的公共 GitHub 账户来练习提交和版本控制。现在，转到您的 GitHub 页面，创建一个带有 README 文件的 `wdio`
    仓库。请注意，免费 GitHub 账户是公开的。在专业工作中，最好是你或你的雇主购买付费计划以使仓库私有：
- en: '![Figure 1.5 – Initializing the wdio project repository with a README file
    from GitHub](img/B19395_Figure_1.5.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 使用 GitHub 的 README 文件初始化 wdio 项目仓库](img/B19395_Figure_1.5.jpg)'
- en: Figure 1.5 – Initializing the wdio project repository with a README file from
    GitHub
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 使用 GitHub 的 README 文件初始化 wdio 项目仓库
- en: 'We now have our GitHub account dashboard. It gives suggestions for additional
    tools to install:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了 GitHub 账户仪表板。它提供了安装额外工具的建议：
- en: '![Figure 1.6 – Links in GitHub to install GitHub Desktop and Visual Studio
    Code](img/B19395_Figure_1.6.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – GitHub 中的链接以安装 GitHub Desktop 和 Visual Studio Code](img/B19395_Figure_1.6.jpg)'
- en: Figure 1.6 – Links in GitHub to install GitHub Desktop and Visual Studio Code
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – GitHub 中的链接以安装 GitHub Desktop 和 Visual Studio Code
- en: From here, we will add GitHub Desktop and the Visual Studio Code IDE. First,
    we’ll install GitHub Desktop.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们将添加 GitHub Desktop 和 Visual Studio Code IDE。首先，我们将安装 GitHub Desktop。
- en: Installing GitHub Desktop
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 GitHub Desktop
- en: '[Download GitHub Desktop](https://desktop.github.com/) from [https://desktop.github.com/](https://desktop.github.com/).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[从 [https://desktop.github.com/](https://desktop.github.com/) 下载 GitHub Desktop](https://desktop.github.com/)'
- en: 'The installation of GitHub Desktop is very straightforward. Simply download
    the installer for your operating system and launch it. Once the process is complete,
    GitHub Desktop will launch:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Desktop 的安装非常简单。只需下载适用于您操作系统的安装程序并启动它。一旦过程完成，GitHub Desktop 将启动：
- en: '![Figure 1.7 – Downloading GitHub Desktop for your operating system](img/B19395_Figure_1.7.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7 – 为您的操作系统下载 GitHub Desktop](img/B19395_Figure_1.7.jpg)'
- en: Figure 1.7 – Downloading GitHub Desktop for your operating system
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7 – 为您的操作系统下载 GitHub Desktop
- en: 'If you have ever seen a beginner’s command-line video for Git, learning all
    the arcane commands may send a shiver down your spine. It might spark fear that
    the team project could be broken if your changes are committed without pulling
    changes from other team members first. That is why a GUI for beginners is a better
    choice over a printed Git cheat sheet – it prevents mistakes while learning Git
    commands. Here’s an example:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经看过 Git 的入门级命令行视频，学习所有这些复杂的命令可能会让你脊背发凉。这可能会激发出恐惧，如果在不先从其他团队成员那里拉取更改的情况下提交更改，团队项目可能会被破坏。这就是为什么对于初学者来说，GUI
    比打印的 Git 技巧表更好——它可以在学习 Git 命令时防止错误。以下是一个例子：
- en: '![Figure 1.8 – GitHub Desktop showing pending changes that should be pulled
    before a commit action](img/B19395_Figure_1.8.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8 – GitHub Desktop 显示在提交操作之前应该拉取的挂起更改](img/B19395_Figure_1.8.jpg)'
- en: Figure 1.8 – GitHub Desktop showing pending changes that should be pulled before
    a commit action
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 – GitHub Desktop 显示在提交操作之前应该拉取的挂起更改
- en: A tool with a graphical interface is recommended for both speed and accuracy
    over the command-line interface. In the preceding example, we know we are in the
    `main` branch of the `webdriverio` repo with changes committed to the project
    from other team members, and a large blue **Pull origin** button reminds us to
    pull in the changes other team members have committed first. Skipping this step
    can revert the code changes, causing trouble.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在速度和准确性方面，图形界面工具比命令行界面更推荐。在先前的例子中，我们知道我们处于 `webdriverio` 仓库的 `main` 分支，并且项目已从其他团队成员那里提交了更改，一个大的蓝色
    **拉取来源** 按钮提醒我们首先拉取其他团队成员已提交的更改。跳过此步骤可能会撤销代码更改，造成麻烦。
- en: 'GitHub Desktop’s **History** view supplies descriptions of those recent commits.
    It tells us which files were changed and the differences between the old and new
    lines of code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Desktop 的 **历史** 视图提供了最近提交的描述。它告诉我们哪些文件被更改了，以及旧代码行和新代码行之间的差异：
- en: '![Figure 1.9 – GitHub Desktop’s History view showing old and new code changes](img/B19395_Figure_1.9.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.9 – GitHub Desktop 的历史视图显示旧的和新的代码更改](img/B19395_Figure_1.9.jpg)'
- en: Figure 1.9 – GitHub Desktop’s History view showing old and new code changes
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9 – GitHub Desktop 的历史视图显示旧的和新的代码更改
- en: Performing a code commit with a single click of a button is faster than typing
    into a Terminal window. We will link our project shortly. Next, we’ll install
    our coding environment tool.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单击一个按钮执行代码提交比在终端窗口中键入要快。我们将很快链接我们的项目。接下来，我们将安装我们的编码环境工具。
- en: Choosing your TypeScript development environment – Microsoft Visual Studio Code
    versus JetBrains Aqua
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择你的 TypeScript 开发环境 – 微软 Visual Studio Code 与 JetBrains Aqua
- en: In this journey of developing a robust framework, we need to make many decisions,
    and one of those is which IDE will be used to write and run our code. My personal
    preference would be to use Visual Studio Code because it is easier to code on
    multiple views.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发一个健壮框架的旅途中，我们需要做出许多决定，其中之一是选择哪个 IDE 来编写和运行我们的代码。我个人的偏好是使用 Visual Studio Code，因为它在多个视图中编码更容易。
- en: However, as of this writing, JetBrains Aqua only supports breakpoints when a
    script is launched from a configuration. It does not pause at breakpoints when
    a test script is launched from the embedded Terminal window. This is the way we
    will run our WebdriverIO scripts. Visual Studio Code will be the tool of choice
    for these projects since it is open source, but I still recommend that you try
    JetBrains Aqua for its superior code interface design.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，截至本文撰写时，JetBrains Aqua仅支持在从配置启动脚本时设置断点。当从嵌入的终端窗口启动测试脚本时，它不会在断点处暂停。这就是我们将运行我们的WebdriverIO脚本的方式。由于Visual
    Studio Code是开源的，因此将是这些项目的首选工具，但我仍然建议您尝试JetBrains Aqua，因为它拥有优越的代码界面设计。
- en: '**Microsoft Visual Studio Code** is the free IDE for this book and has a strong
    company backing it up. However, many free tools lack an income stream to support
    either a development team or a product support team. Free tools can be years behind
    paid tools in functionality. Take, for example, Selenium, which introduced relative
    element location in version 4.0, which was released in May 2019\. The same feature
    was part of most paid toolsets, including Micro Focus **Unified Functional Testing**
    (**UFT**), which goes as far back as 2010.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**Microsoft Visual Studio Code**是本书的免费IDE，并得到了强大的公司支持。然而，许多免费工具缺乏收入来源来支持开发团队或产品支持团队。免费工具在功能上可能比付费工具落后几年。以Selenium为例，它在2019年5月发布的4.0版本中引入了相对元素定位，而这一功能在大多数付费工具集中都已有，包括Micro
    Focus **Unified Functional Testing** (**UFT**)，它可以追溯到2010年。'
- en: Installing Visual Studio Code for your operating sy[stem](https://code.visualstudio.com/download)
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为您的操作系统[安装Visual Studio Code](https://code.visualstudio.com/download)
- en: '[Download Visual Studio Code from](https://code.visualstudio.com/download)
    [https://code.visualstudio.com/download](https://code.visualstudio.com/download).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[从](https://code.visualstudio.com/download) [https://code.visualstudio.com/download](https://code.visualstudio.com/download)
    下载Visual Studio Code。'
- en: Follow the installation process for your operating system. Again, the recommendation
    is to have these tools installed on a larger drive above the `\``repos` directory.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 按照您操作系统的安装过程进行安装。再次提醒，建议将这些工具安装在一个大于`\repos`目录的较大驱动器上。
- en: Now that Visual Studio has been installed, we can check that Node and npm have
    been installed from the embedded Terminal shell window.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Visual Studio已经安装，我们可以从嵌入的终端外壳窗口检查Node和npm是否已安装。
- en: From the main menu, select **Terminal** > **New Terminal** and press *Ctrl*
    + *Shift* for Windows and *^* + *Shift* + *`* for Mac.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 从主菜单，选择**Terminal** > **New Terminal**，然后在Windows上按*Ctrl* + *Shift*，在Mac上按*^*
    + *Shift* + *`*。
- en: The Terminal shell for launching tests is up to your personal choice. **PowerShell**
    is recommended for Windows users, **ZSH** is recommended for Mac users, and **Git
    Bash** is great for command-line Git users. But for debugging, **JavaScript Debug
    Terminal** is required on both platforms.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 启动测试的终端外壳取决于您的个人选择。**PowerShell**推荐给Windows用户，**ZSH**推荐给Mac用户，**Git Bash**对于命令行Git用户来说是个不错的选择。但是，对于调试，两个平台都需要**JavaScript
    Debug Terminal**。
- en: 'From the Terminal window, click the **v** down arrow next to the **+** button
    in the lower-right corner, select **JavaScript Debug Terminal**, and type the
    following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 从终端窗口，点击位于右下角**+**按钮旁边的**v**向下箭头，选择**JavaScript Debug Terminal**，并输入以下内容：
- en: '[PRE3]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The system will respond with the versions of Node and npm you have installed:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 系统将响应您已安装的Node和npm的版本：
- en: '![Figure 1.10 – Checking the Node and npm versions you have installed from
    the embedded Terminal shell in Visual Studio Code](img/B19395_Figure_1.10.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图1.10 – 从Visual Studio Code中嵌入的终端外壳检查您已安装的Node和npm版本](img/B19395_Figure_1.10.jpg)'
- en: Figure 1.10 – Checking the Node and npm versions you have installed from the
    embedded Terminal shell in Visual Studio Code
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10 – 从Visual Studio Code中嵌入的终端外壳检查您已安装的Node和npm版本
- en: Note that JavaScript Debug Terminal will run slower than the PowerShell or Bash
    shells, so it’s best to only use it when we need to stop at a breakpoint for debugging.
    Next, we will initialize our project from Visual Studio Code.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，JavaScript Debug Terminal的运行速度会比PowerShell或Bash外壳慢，因此最好只在需要停止在断点进行调试时使用它。接下来，我们将从Visual
    Studio Code初始化我们的项目。
- en: Initializing the Node project
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化Node项目
- en: 'Now that we have installed Visual Studio Code and created our project workspace
    directory, we can check that Node has been installed and initialize our project.
    From the Terminal, navigate to the `/repos/wdio` folder and type the following
    command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Visual Studio Code并创建了我们的项目工作区目录，我们可以检查Node是否已安装并初始化我们的项目。从终端导航到`/repos/wdio`文件夹，并输入以下命令：
- en: '[PRE4]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will create a new Node `package.json` file with default configurations:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个新的 Node `package.json` 文件，并带有默认配置：
- en: '![Figure 1.11 – Initializing the Node package.json file](img/B19395_Figure_1.11.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.11 – 初始化 Node package.json 文件](img/B19395_Figure_1.11.jpg)'
- en: Figure 1.11 – Initializing the Node package.json file
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11 – 初始化 Node package.json 文件
- en: This file keeps track of all the supporting Node packages that WebdriverIO uses
    to build and automate tests.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件跟踪 WebdriverIO 使用以构建和自动化测试的所有支持 Node 包。
- en: Now that we have our first project file, next, we will configure our editor
    settings to make coding less error-prone.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了第一个项目文件，接下来，我们将配置编辑器设置以使编码更少出错。
- en: Configuring Visual Studio Code
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Visual Studio Code
- en: 'The first change is when Visual Studio Code will save files. By default, implicit
    saves do not occur when changing from the code window to the Terminal. Since our
    tests will be launched from the Terminal, we want to ensure the latest version
    of the code is executed. Here’s how we can configure this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个变化是 Visual Studio Code 将保存文件。默认情况下，从代码窗口切换到终端时不会发生隐式保存。由于我们的测试将从终端启动，我们想确保执行的是最新版本的代码。以下是我们可以如何配置它：
- en: '![Figure 1.12 – Setting Visual Studio Code to save files when the focus changes
    to the Terminal window](img/B19395_Figure_1.12.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.12 – 将 Visual Studio Code 设置为在焦点切换到终端窗口时保存文件](img/B19395_Figure_1.12.jpg)'
- en: Figure 1.12 – Setting Visual Studio Code to save files when the focus changes
    to the Terminal window
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12 – 将 Visual Studio Code 设置为在焦点切换到终端窗口时保存文件
- en: Go to `auto save`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 `自动保存`。
- en: Change the setting from **afterDelay** to **onWindowChange**.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 将设置从 **afterDelay** 更改为 **onWindowChange**。
- en: This will ensure code is saved when switching from the code console to the Terminal
    console. This avoids a common issue where the code is updated, but the results
    that are shown were executed with the unchanged code.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保在从代码控制台切换到终端控制台时保存代码。这避免了代码已更新，但显示的结果却是使用未更改的代码执行的一个常见问题。
- en: X-ray vision – writing better code with Prettier, ESLint, and GitLens
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: X-ray vision – 使用 Prettier、ESLint 和 GitLens 编写更好的代码
- en: Developers need coding tools that help them efficiently write code that is formatted
    correctly, follow good coding practices, and know when team members make code
    changes. This is where Visual Studio Code extensions such as Prettier, ESLint,
    and GitLens become invaluable. Let’s install these tools.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者需要帮助他们的代码格式正确、遵循良好的编码实践，并知道团队成员何时进行代码更改的编码工具。这就是 Visual Studio Code 扩展如 Prettier、ESLint
    和 GitLens 变得非常有价值的地方。让我们安装这些工具。
- en: Installing Visual Studio Code add-ons – Prettier
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Visual Studio Code 插件 – Prettier
- en: 'From the **Extensions** icon, add the **Prettier Code** **formatter** extension:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 从 **扩展** 图标添加 **Prettier 代码** **格式化器** 扩展：
- en: '![Figure 1.13 – Extensions can be accessed by clicking the cubes icon](img/B19395_Figure_1.13.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.13 – 通过点击立方体图标可以访问扩展](img/B19395_Figure_1.13.jpg)'
- en: Figure 1.13 – Extensions can be accessed by clicking the cubes icon
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13 – 通过点击立方体图标可以访问扩展
- en: 'Prettier will automatically format code without taking extra time to type tabs
    manually. In this example, the code to the left is unformatted. We can now invoke
    Prettier by right-clicking the code and selecting **Format Document**:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Prettier 将自动格式化代码，而无需手动输入额外的制表符。在这个例子中，左侧的代码未格式化。现在我们可以通过右键单击代码并选择 **格式化文档**
    来调用 Prettier：
- en: '![Figure 1.14 – Example of unformatted code before Prettier](img/B19395_Figure_1.14.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.14 – Prettier 格式化前的代码示例](img/B19395_Figure_1.14.jpg)'
- en: Figure 1.14 – Example of unformatted code before Prettier
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14 – Prettier 格式化前的代码示例
- en: 'The code is then reformatted in a structured manner. Note that the square brackets
    and curly braces are tabbed out, and extra lines are included automatically:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然后以结构化的方式重新格式化代码。请注意，方括号和大括号缩进，并且自动包含额外的行：
- en: '![Figure 1.15 – Tab-indented code formatted by Prettier](img/B19395_Figure_1.15.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.15 – Prettier 格式化的缩进代码](img/B19395_Figure_1.15.jpg)'
- en: Figure 1.15 – Tab-indented code formatted by Prettier
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15 – Prettier 格式化的缩进代码
- en: The code is now formatted for readability. The next extension will help us when
    working on a GitHub team.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码已格式化以供阅读。下一个扩展将帮助我们处理 GitHub 团队的工作。
- en: Installing Visual Studio Code add-ons – GitLens
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Visual Studio Code 插件 – GitLens
- en: 'Among many other features, the GitLens extension will show who last made code
    changes in our GitHub repository. From **Extensions**, add the **GitLens** extension:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多其他功能中，GitLens 扩展将显示在我们 GitHub 仓库中最后进行代码更改的人。从 **扩展** 中添加 **GitLens** 扩展：
- en: '![Figure 1.16 – The GitLens extension](img/B19395_Figure_1.16.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.16 – GitLens 扩展](img/B19395_Figure_1.16.jpg)'
- en: Figure 1.16 – The GitLens extension
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16 – GitLens 扩展
- en: 'Clicking on any line of any tracked document in the project activates GitLens:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 点击项目中任何跟踪文档的任何一行都会激活 GitLens：
- en: '![Figure 1.17 – GitLens showing the person who last made a code change commit
    in gray](img/B19395_Figure_1.17.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.17 – GitLens 以灰色显示最后提交代码更改的人](img/B19395_Figure_1.17.jpg)'
- en: Figure 1.17 – GitLens showing the person who last made a code change commit
    in gray
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.17 – GitLens 以灰色显示最后提交代码更改的人
- en: In the preceding example, we can see that *line 31* was last updated 2 months
    ago by *Christian Bromann*. This makes it easy to know when a line of code was
    changed, by whom, and how long ago.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们可以看到第 31 行是在 2 个月前由 *Christian Bromann* 更新的。这使得了解代码行何时被更改、由谁更改以及多久以前变得很容易。
- en: This add-on will help us find code mistakes to improve the reliability of our
    framework.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这个附加组件将帮助我们找到代码错误，以提高我们框架的可靠性。
- en: Installing Visual Studio Code add-ons – ESLint
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Visual Studio Code 附加组件 – ESLint
- en: A linter is a program that looks for potential problems in our code like dust
    that gathers in the corner of a room. There are linters for most programming languages,
    and ESLint is a TypeScript linter. Why ESLint and not JSLint? **ES** stands for
    **ECMAScript**, which is the code standard for JavaScript that is intended to
    ensure the interoperability of web pages across different browsers. As of this
    writing, the current version is ES6\. When searching for code samples, pay attention
    if the code snippet is version ES5 or earlier as new features have been added
    over the years.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 检查器是一个程序，它会在我们的代码中寻找潜在的问题，就像房间里角落里积累的灰尘。大多数编程语言都有检查器，ESLint 是一个 TypeScript 检查器。为什么是
    ESLint 而不是 JSLint？**ES** 代表 **ECMAScript**，这是 JavaScript 的代码标准，旨在确保网页在不同浏览器之间的互操作性。截至本文撰写时，当前版本是
    ES6。在搜索代码示例时，请注意代码片段是否为 ES5 或更早版本，因为近年来已经添加了新功能。
- en: 'From **Extensions**, add the **ESLint** extension:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 从 **扩展** 中添加 **ESLint** 扩展：
- en: '![Figure 1.18 – The ESLint ECMAScript linter extension](img/B19395_Figure_1.18.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.18 – ESLint ECMAScript 检查器扩展](img/B19395_Figure_1.18.jpg)'
- en: Figure 1.18 – The ESLint ECMAScript linter extension
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.18 – ESLint ECMAScript 检查器扩展
- en: 'ESLint finds and reports on code patterns found in TypeScript projects. The
    goal is to make code more consistent and avoid bugs upfront. You can see it in
    use in the following screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint 在 TypeScript 项目中查找并报告代码模式。目标是使代码更加一致，并提前避免错误。您可以在以下屏幕截图中看到它的使用情况：
- en: "![Figure 1.19 – Example of ESLint reporting 81 potential problems in a \uFEFF\
    TypeScript project](img/B19395_Figure_1.19.jpg)"
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.19 – ESLint 在 TypeScript 项目中报告 81 个潜在问题的示例](img/B19395_Figure_1.19.jpg)'
- en: Figure 1.19 – Example of ESLint reporting 81 potential problems in a TypeScript
    project
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.19 – ESLint 在 TypeScript 项目中报告 81 个潜在问题的示例
- en: ESLint supplies a new **PROBLEMS** window that lists issues and suggestions
    for improving our code base as we enhance our framework. It can also be customized
    with new rules.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint 提供了一个新的 **问题** 窗口，列出了改进我们代码库的问题和建议，随着我们增强框架，它还可以通过新的规则进行自定义。
- en: '*What is the difference between ECMAScript, JavaScript,* *and TypeScript?*'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '*ECMAScript、JavaScript 和 TypeScript 之间的区别是什么？*'
- en: ECMAScript is the language definition of JavaScript that’s found in modern browsers.
    ES5 and ES6 are recent descriptions. TypeScript is a superset of JavaScript that
    adds type declarations to JavaScript, like Java.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 是现代浏览器中发现的 JavaScript 语言定义，ES5 和 ES6 是最近的新描述。TypeScript 是 JavaScript
    的超集，它向 JavaScript 添加了类型声明，就像 Java 一样。
- en: Now that we have configured Visual Studio Code, let’s add a few tools to our
    browser for selectors and cookies.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了 Visual Studio Code，让我们为浏览器添加一些用于选择器和 cookie 的工具。
- en: Installing Chrome extensions
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Chrome 扩展
- en: Our next two tools are the easiest to install. **SelectorsHub** allows us to
    create robust locators of elements in Chrome, Edge, and any Chromium-based browser,
    while **EditThisCookie** allows us to clear the cookie cache from the browser
    frontend. Later, we will ensure the framework will clear cookies for fresh test
    execution.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的两个工具安装起来最为简单。**SelectorsHub** 允许我们在 Chrome、Edge 以及任何基于 Chromium 的浏览器中创建稳健的元素定位器，而
    **EditThisCookie** 允许我们从浏览器前端清除 cookie 缓存。稍后，我们将确保框架会在每次新的测试执行前清除 cookies。
- en: Adding the SelectorsHub Chrome extension
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 SelectorsHub Chrome 扩展
- en: 'In the top-right corner of your Chrome browser, select the three vertical ellipses.
    Then, click on **More tools** and then **Extensions**. Click the hamburger icon
    in the top-left corner. Finally, click **Open Chrome Web Store** in the lower-left
    corner:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 Chrome 浏览器右上角，选择三个垂直省略号。然后，点击 **更多工具** 并然后 **扩展程序**。点击左上角的汉堡图标。最后，在左下角点击
    **打开 Chrome 网上应用店**：
- en: '![Figure 1.20 – Adding a Chrome extension from Chrome Web Store](img/B19395_Figure_1.20.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.20 – 从 Chrome 网上应用店添加 Chrome 扩展程序](img/B19395_Figure_1.20.jpg)'
- en: Figure 1.20 – Adding a Chrome extension from Chrome Web Store
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.20 – 从 Chrome 网上应用店添加 Chrome 扩展程序
- en: 'In Chrome Web Store, search for and install the **SelectorsHub** extension:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Chrome 网上应用店中，搜索并安装 **SelectorsHub** 扩展程序：
- en: '![Figure 1.21 – The SelectorsHub Chrome extension](img/B19395_Figure_1.21.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.21 – SelectorsHub Chrome 扩展程序](img/B19395_Figure_1.21.jpg)'
- en: Figure 1.21 – The SelectorsHub Chrome extension
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.21 – SelectorsHub Chrome 扩展程序
- en: Once the extension has been installed, it should be allowed to interact in **Incognito**
    mode.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦扩展程序安装完成，它应该被允许在 **隐身** 模式下交互。
- en: 'From the **Extensions** page, click the **Details** button for **SelectorsHub**
    and set the **Allow in Incognito** switch to active:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **扩展程序** 页面，点击 **细节** 按钮，将 **允许在隐身模式下使用** 开关设置为开启：
- en: '![Figure 1.22 – Allowing the SelectorsHub Chrome extension to appear in Incognito
    mode](img/B19395_Figure_1.22.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.22 – 允许 SelectorsHub Chrome 扩展程序在隐身模式下显示](img/B19395_Figure_1.22.jpg)'
- en: Figure 1.22 – Allowing the SelectorsHub Chrome extension to appear in Incognito
    mode
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.22 – 允许 SelectorsHub Chrome 扩展程序在隐身模式下显示
- en: Similarly, we will add an extension that will make clearing our browser cookies
    faster.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们将添加一个扩展程序，使清除我们的浏览器 cookies 更加快速。
- en: Adding the EditThisCookie Chrome extension
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 EditThisCookie Chrome 扩展程序
- en: 'As with the previous extension, search for the **EditThisCookie** extension
    from Chrome Web Store:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的扩展程序一样，从 Chrome 网上应用店搜索 **EditThisCookie** 扩展程序：
- en: '![Figure 1.23 – The EditThisCookie Chrome extension](img/B19395_Figure_1.23.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.23 – EditThisCookie Chrome 扩展程序](img/B19395_Figure_1.23.jpg)'
- en: Figure 1.23 – The EditThisCookie Chrome extension
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.23 – EditThisCookie Chrome 扩展程序
- en: The **EditThisCookie** extension will make it easier to clear cookies in the
    browser. It takes only two clicks to clear all cookies, and it can clear the cookies
    of specific applications, such as our application under test.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**EditThisCookie** 扩展程序将使清除浏览器中的 cookies 更加容易。只需点击两次即可清除所有 cookies，并且它可以清除特定应用程序的
    cookies，例如我们正在测试的应用程序。'
- en: Next, we will need these extensions to be visible on the Chrome browser for
    easy access.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要这些扩展程序在 Chrome 浏览器上可见，以便于访问。
- en: Pinning Chrome extensions to the browser title bar
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Chrome 扩展程序固定到浏览器标题栏
- en: 'Follow these steps:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: Click the jigsaw puzzle extensions icon in the top-right corner of the browser.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击浏览器右上角的拼图扩展程序图标。
- en: Click the **pushpin** icon next to both extensions.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击两个扩展程序旁边的 **推针** 图标。
- en: 'These icons will now appear in the **Extensions** shortcuts area in the top-right
    corner of the browser for easy access:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些图标现在将出现在浏览器右上角的 **扩展程序** 快捷方式区域，以便于访问：
- en: '![Figure 1.24 – Pinning an extension to the browser bar](img/B19395_Figure_1.24.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.24 – 将扩展程序固定到浏览器工具栏](img/B19395_Figure_1.24.jpg)'
- en: Figure 1.24 – Pinning an extension to the browser bar
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.24 – 将扩展程序固定到浏览器工具栏
- en: Our utility belt is now complete. We have the coding environment, source code
    editor, and a few troubleshooting tools to help us leap tall projects in a single
    bound. Next, we’ll install WebdriverIO.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的工具带现在已经完整。我们有了编码环境、源代码编辑器以及一些故障排除工具，帮助我们一跃而起，完成高难度的项目。接下来，我们将安装 WebdriverIO。
- en: Installing WebdriverIO
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 WebdriverIO
- en: There are two options to use and install WebdriverIO
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种选项可以使用和安装 WebdriverIO
- en: Using WDIO TestRunner in async mode
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 WDIO TestRunner 的异步模式
- en: Using WedbriverIO in standalone mode
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 WedbriverIO 独立模式
- en: 'In the next chapter and throughout this book, we will be using the first option.
    Despite this, take a closer look at both options:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章以及本书的其余部分，我们将使用第一种选项。尽管如此，仔细查看这两种选项：
- en: '**Option 1**: Using WebdriverIO with its built-in WDIO TestRunner is the default
    mode and most common use case. The test runner efficiently addresses numerous
    challenges often encountered when utilizing basic automation libraries. First,
    it streamlines the management of your test executions by organizing and distributing
    test specifications to maximize concurrent testing. Additionally, it adeptly manages
    session operations and offers an array of features designed to aid in troubleshooting
    and error identification within your test suite.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项 1**：使用 WebdriverIO 及其内置的 WDIO TestRunner 是默认模式，也是最常见的使用场景。测试运行器有效地解决了在利用基本自动化库时经常遇到的许多挑战。首先，它通过组织和分配测试规范来简化您的测试执行管理，以最大化并发测试。此外，它熟练地管理会话操作，并提供一系列旨在帮助您在测试套件中排除故障和识别错误的功能。'
- en: '`klassi-js` repo (https://github.com/klassijs/klassi-js) at your leisure. There
    is also a project template that you can clone ([https://github.com/klassijs/klassi-example-test-suite](https://github.com/klassijs/klassi-example-test-suite))
    so that you have a running project in seconds.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在您方便的时候查看 `klassi-js` 仓库（https://github.com/klassijs/klassi-js）。还有一个项目模板，您可以克隆它（[https://github.com/klassijs/klassi-example-test-suite](https://github.com/klassijs/klassi-example-test-suite)），这样您就能在几秒钟内拥有一个运行中的项目。
- en: 'The following is a sample script written as a test spec and executed by WDIO:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个作为测试规范编写的示例脚本，并由 WDIO 执行：
- en: '[PRE5]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All WebdriverIO commands are asynchronous and need to be properly handled using
    `async`/`await`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 WebdriverIO 命令都是异步的，需要使用 `async`/`await` 正确处理。
- en: Summary
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we installed many of the tools required to begin coding a robust
    test automation framework. We enhanced our browser with two extensions to ease
    element-locator creation and handle cookies. The Node.js environment was installed
    with npm and a code repository folder was created. The Visual Studio Code IDE
    was installed with tools for static code analysis and code formatting, and we
    provided detailed information about when the code was modified and by whom.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们安装了许多开始编写健壮的测试自动化框架所需的工具。我们通过两个扩展增强了浏览器，以简化元素定位器的创建和处理 cookies。使用 npm
    安装了 Node.js 环境，并创建了一个代码仓库文件夹。安装了 Visual Studio Code IDE，并提供了用于静态代码分析和代码格式的工具，我们还提供了有关代码何时被修改以及由谁修改的详细信息。
- en: In the next chapter, we will install WebdriverIO and begin to explore the folder
    structure of the WebdriverIO TypeScript framework project.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将安装 WebdriverIO 并开始探索 WebdriverIO TypeScript 框架项目的文件夹结构。
