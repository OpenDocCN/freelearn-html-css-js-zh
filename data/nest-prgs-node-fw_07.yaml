- en: Chapter 7\. Mongoose
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 Mongoose
- en: Mongoose is the third and last database mapping tool that we will be covering
    in this book. It is the best known MongoDB mapping tool in the JavaScript world.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Mongoose是本书中将要介绍的第三个也是最后一个数据库映射工具。它是JavaScript世界中最知名的MongoDB映射工具。
- en: A word about MongoDB
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于MongoDB的一点说明
- en: When MongoDB was initially released, in 2009, it took the database world by
    storm. At that point the vast majority of databases in use were relational, and
    MongoDB quickly grew to be the most popular non-relational database (also known
    as “NoSQL”.)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当MongoDB最初发布时，即2009年，它震惊了数据库世界。那时使用的绝大多数数据库都是关系型的，而MongoDB迅速成长为最受欢迎的非关系型数据库（也称为“NoSQL”）。
- en: NoSQL databases difer from relational databases (such as MySQL, PostgreSQL,
    etc.) in that they model the data they store in ways other than tables related
    one to another.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL数据库与关系型数据库（如MySQL、PostgreSQL等）不同，它们以其他方式对存储的数据进行建模，而不是相互关联的表。
- en: MongoDB, specifically, is a “document-oriented database.” It saves data in “documents”
    encoded in BSON format (“Binary JSON”, a JSON extension that includes various
    data types specific for MongoDB). The MongoDB documents are grouped in “collections.”
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，MongoDB是一种“面向文档的数据库”。它以BSON格式（“二进制JSON”，一种包含特定于MongoDB的各种数据类型的JSON扩展）保存数据的“文档”。MongoDB文档被分组在“集合”中。
- en: Traditional relational databases separate data in tables and columns, similar
    to a spreadsheet. On the other hand, document-oriented databases store complete
    data objects in single instances of the database, similar to a text file.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的关系型数据库将数据分隔在表和列中，类似于电子表格。另一方面，面向文档的数据库将完整的数据对象存储在数据库的单个实例中，类似于文本文件。
- en: While relational databases are heavily structured, document-oriented ones are
    much more flexible, since developers are free to use non-predefined structures
    in our documents, and even completely change our data structure from document
    instance to document instance.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然关系型数据库结构严格，但面向文档的数据库要灵活得多，因为开发人员可以自由使用非预定义的结构在我们的文档中，甚至可以完全改变我们的数据结构从一个文档实例到另一个文档实例。
- en: This flexibility and lack of defined structure means that is usually easier
    and faster to “map” (transform) our objects in order to store them in the database.
    This brings reduced coding overhead and faster iterations to our projects.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这种灵活性和缺乏定义的结构意味着通常更容易更快地“映射”（转换）我们的对象以便将它们存储在数据库中。这为我们的项目带来了减少编码开销和更快迭代的好处。
- en: A word about Mongoose
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于Mongoose的一点说明
- en: 'Mongoose is technically not an ORM (Object Relational Mapping) though it’s
    commonly referred to as one. Rather, it is an ODM (Object Document Mapping) since
    MongoDB itself is based in documents instead of relational tables. The idea behind
    ODM’s and ORM’s is the same, though: providing an easy-to-use solution for data
    modelling.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Mongoose在技术上并不是ORM（对象关系映射），尽管通常被称为是。相反，它是ODM（对象文档映射），因为MongoDB本身是基于文档而不是关系表的。不过，ODM和ORM的理念是相同的：提供一个易于使用的数据建模解决方案。
- en: Mongoose works with the notion of “schemas.” A schema is simply an object that
    defines a collection (a group of documents) and the properties and allowed types
    of values that the document instances will have (i.e. what we would call “their
    shape.”).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Mongoose使用“模式”的概念。模式只是一个定义集合（一组文档）以及文档实例将具有的属性和允许的值类型的对象（即我们将称之为“它们的形状”）。
- en: Mongoose and Nest.js
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mongoose和Nest.js
- en: Just like we saw in the TypeORM and the Sequelize chapters, Nest.js provides
    us with a module that we can use with Mongoose.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在TypeORM和Sequelize章节中看到的一样，Nest.js为我们提供了一个可以与Mongoose一起使用的模块。
- en: Getting started
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: As a first step, we need to install the Mongoose npm package, as well as the
    Nest.js/Mongoose npm package.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装Mongoose npm包，以及Nest.js/Mongoose npm包。
- en: Run `npm install --save mongoose @nestjs/mongoose` in your console, and `npm
    install --save-dev @types/mongoose` inmediately after.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中运行`npm install --save mongoose @nestjs/mongoose`，然后立即运行`npm install --save-dev
    @types/mongoose`。
- en: Set up the database
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置数据库
- en: Docker Compose is the easiest way to get started with MongoDB. There’s an official
    MongoDB image in the Docker registry we recommend that you use. The latest stable
    version at the moment of writing this is `3.6.4`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose是使用MongoDB最简单的方法。Docker注册表中有一个官方的MongoDB镜像，我们建议您使用。目前写作本文时的最新稳定版本是`3.6.4`。
- en: Let’s create a Docker Compose file to build and start both the database we will
    be using, as well as our Nest.js app, and link them together so that we can access
    the database later from our code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个Docker Compose文件来构建和启动我们将使用的数据库，以及我们的Nest.js应用，并将它们链接在一起，以便我们可以稍后从我们的代码中访问数据库。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We’re pointing to the `latest` tag of the MongoDB image, which is an alias that
    resolves to the most recent stable version. If you’re feeling adventurous, feel
    free to change the tag to `unstable`... though be aware that things might break!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指向MongoDB镜像的`latest`标签，这是一个解析为最新稳定版本的别名。如果您感到冒险，可以随意将标签更改为`unstable`...不过要注意可能会出现问题！
- en: Start the containers
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动容器
- en: Now that your Docker Compose file is ready, fire up the containers and start
    working!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的Docker Compose文件已经准备好了，启动容器并开始工作吧！
- en: Run `docker-compose up` in your console to do it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中运行`docker-compose up`来执行。
- en: Connect to the database
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: Our local MongoDB instance is now running and ready to accept connections.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的本地MongoDB实例现在正在运行并准备好接受连接。
- en: We need to import the Nest.js/Mongoose module that we installed a couple of
    steps ago into our main app module.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将几步前安装的Nest.js/Mongoose模块导入到我们的主应用模块中。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We are adding the `MongooseModule` to the `AppModule` and we’re relying on the
    `forRoot()` method to properly inject the dependency. You might find the `forRoot()`
    method familiar if you read the chapter about TypeORM, or if you are familiar
    with Angular and its official routing module.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`MongooseModule`添加到`AppModule`中，并且我们依赖`forRoot()`方法来正确注入依赖项。如果您阅读了关于TypeORM的章节，或者熟悉Angular及其官方路由模块，您可能会发现`forRoot()`方法很熟悉。
- en: 'There’s a *captcha* with the code above: it won’t work, because there’s still
    no way for Mongoose or the `MongooseModule` to figure out *how* to connect to
    our MongoDB instance.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码有一个*验证码*：它不起作用，因为Mongoose或`MongooseModule`仍然无法找出*如何*连接到我们的MongoDB实例。
- en: The connection string
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接字符串
- en: If you check in the Mongoose documentation or make a quick search on Google,
    you’ll see that the usual way of connecting to a MongoDB instance is by using
    the `'mongodb://localhost/test'` string as an argument for the `.connect()` method
    in Mongoose (or even in the Node MongoDB native client.)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看Mongoose文档或在Google上快速搜索，你会发现连接到MongoDB实例的通常方法是使用`'mongodb://localhost/test'`字符串作为Mongoose的`.connect()`方法的参数（甚至在Node
    MongoDB原生客户端中）。
- en: That string is what is known as a “connection string.” The connection string
    is what tells any MongoDB client how to connect to the corresponding MongoDB instance.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字符串就是所谓的“连接字符串”。连接字符串告诉任何MongoDB客户端如何连接到相应的MongoDB实例。
- en: The bad news here is that, in our case, the “default” example connection string
    will not work, because we are running our database instance inside a container
    linked from another container, a Node.js one, which is the one that our code runs
    in.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 坏消息是，在我们的情况下，“默认”示例连接字符串将无法工作，因为我们正在运行我们的数据库实例，它在另一个容器中链接，一个Node.js容器，这是我们的代码运行的容器。
- en: The good news, though, is that we can use that Docker Compose link to connect
    to our database, because Docker Compose establishes a virtual network connection
    between both containers, the MongoDB one and the Node.js one.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，好消息是，我们可以使用Docker Compose链接来连接到我们的数据库，因为Docker Compose在MongoDB容器和Node.js容器之间建立了虚拟网络连接。
- en: So, the only thing that we need to do is changing the example connection string
    to
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们唯一需要做的就是将示例连接字符串更改为
- en: '`''mongodb://mongo:27017/nest''`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`''mongodb://mongo:27017/nest''`'
- en: where `mongo` is the name of our MongoDB container (we specified this is the
    Docker Compose file), `27017` is the port that the MongoDB container is exposing
    (27017 being the default for MongoDB), and `nest` is the collection we will store
    our documents on (you’re free to change it to your heart’s content.)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`mongo`是我们MongoDB容器的名称（我们在Docker Compose文件中指定了这一点），`27017`是MongoDB容器正在暴露的端口（27017是MongoDB的默认端口），`nest`是我们将在其上存储我们的文档的集合（你可以自由地将其更改为你的喜好）。
- en: The right argument for the `forRoot()` method
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`forRoot()`方法的正确参数'
- en: Now that we have adjusted our connection string, let’s modify our original `AppModule`
    import.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经调整了我们的连接字符串，让我们修改我们原来的`AppModule`导入。
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The connection string is now added as an argument to the `forRoot()` method,
    so Mongoose is aware of *how* to connect to the database instance and will start
    successfully.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在连接字符串作为参数添加到`forRoot()`方法中，因此Mongoose知道*如何*连接到数据库实例并且将成功启动。
- en: Modelling our data
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对我们的数据进行建模
- en: We already mentioned before that Mongoose works with the concept of “schemas.”
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经提到Mongoose使用“模式”的概念。
- en: Mongoose schemas play a similar role to TypeORM entities. However, unlike the
    latter, the former are not classes, but rather plain objects that inherit from
    the `Schema` prototype defined (and exported) by Mongoose.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Mongoose模式扮演着与TypeORM实体类似的角色。然而，与后者不同，前者不是类，而是从Mongoose定义（和导出）的`Schema`原型继承的普通对象。
- en: In any case, schemas need to be instantiated into “models” when you are ready
    to use them. We like to think about schemas as “blueprints” for objects, and about
    “models” as object factories.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，当你准备使用它们时，模式需要被实例化为“模型”。我们喜欢把模式看作对象的“蓝图”，把“模型”看作对象工厂。
- en: Our first schema
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的第一个模式
- en: With that said, let’s create our first entity, which we will name `Entry`. We
    will use this entity to store entries (posts) for our blog. We will create a new
    file at `src/entries/entry.entity.ts`; that way TypeORM will be able to find this
    entity file since earlier in our configuration we specified that entity files
    will follow the `src/**/*.entity.ts` file naming convention.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这一点，让我们创建我们的第一个实体，我们将其命名为`Entry`。我们将使用这个实体来存储我们博客的条目（帖子）。我们将在`src/entries/entry.entity.ts`创建一个新文件；这样TypeORM将能够找到这个实体文件，因为在我们的配置中我们指定实体文件将遵循`src/**/*.entity.ts`文件命名约定。
- en: Let’s create our first schema. We will use it as a blueprint for storing our
    blog entries. We will also place the schema next to the other blog entries related
    files, grouping our files by “domain” (that is, by functionality.)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的第一个模式。我们将把它用作存储我们博客条目的蓝图。我们还将把模式放在其他博客条目相关文件旁边，通过“域”（即功能）对我们的文件进行分组。
- en: '**NOTE:** You’re free to organize your schemas as you see fit. We (and the
    official Nest.js documentation) suggest storing them near the module where you
    use each one of them. In any case, you should be good with any other structural
    approach as long as you correctly import your schema files when you need them.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**你可以根据自己的喜好组织模式。我们（以及官方的Nest.js文档）建议将它们存储在你使用每一个模式的模块附近。无论如何，只要在需要时正确导入模式文件，你应该可以使用任何其他结构方法。'
- en: '**`src/entries/entry.schema.ts`**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**`src/entries/entry.schema.ts`**'
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The schema we just wrote is:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚编写的模式是：
- en: Creating an object with the properties we need for our blog entries.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有我们博客条目所需属性的对象。
- en: Instantiating a new `mongoose.Schema` type object.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化一个新的`mongoose.Schema`类型对象。
- en: Passing our object to the constructor of the `mongoose.Schema` type object.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的对象传递给`mongoose.Schema`类型对象的构造函数。
- en: Exporting the instantiated `mongoose.Schema`, so that it can be used elsewhere.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导出实例化的`mongoose.Schema`，以便可以在其他地方使用。
- en: '**NOTE:** Storing the ID of our objects in a property called `_id`, starting
    with underscore, it’s a useful convention when working with Mongoose; it’ll make
    it possible later to rely on the Mongoose `.findById()` model method.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**在一个名为`_id`的属性中存储我们对象的ID，以下划线开头，这是在使用Mongoose时一个有用的约定；它将使得后来能够依赖于Mongoose的`.findById()`模型方法。'
- en: Including the schema into the module
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将模式包含到模块中
- en: 'The next step is to “notify” the Nest.js `MongooseModule` that you intend to
    use the new schema we created. For that, we need to create an “Entry” module (in
    case we didn’t have one just yet) like the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是“通知”Nest.js`MongooseModule`，你打算使用我们创建的新模式。为此，我们需要创建一个“Entry”模块（如果我们还没有的话），如下所示：
- en: '**`src/entries/entries.module.ts`**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**`src/entries/entries.module.ts`**'
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Quite similarly to what we did in the TypeORM chapter, we now need to use the
    `forFeature()` method of the `MongooseModule` in order to define the schemas that
    it needs to register to be used by models in the scope of the module.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在TypeORM章节中所做的非常相似，现在我们需要使用`MongooseModule`的`forFeature()`方法来定义它需要注册的模式，以便在模块范围内使用模型。
- en: Again, the approach is heavily influenced by Angular modules like the router,
    so it maybe looks familiar to you!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这种方法受到Angular模块的影响，比如路由器，所以这可能对你来说很熟悉！
- en: If not, note that this way of handling dependencies greatly increases the decoupling
    between functional modules in our apps, enabling us to easily include, remove
    and reuse features and functionality just by adding or removing modules to the
    imports in the main `AppModule`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是，请注意，这种处理依赖关系的方式极大地增加了应用程序中功能模块之间的解耦，使我们能够通过将模块添加或删除到主`AppModule`的导入中轻松地包含、删除和重用功能和功能。
- en: Include the new module into the main module
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将新模块包含到主模块中
- en: And, talking about the `AppModule`, don’t forget to import the new `EntriesModule`
    into the root `AppModule`, so that we can successfully use the new functionality
    we are writing for our blog. Let’s do it now!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，在谈到`AppModule`时，不要忘记将新的`EntriesModule`导入到根`AppModule`中，这样我们就可以成功地使用我们为博客编写的新功能。现在让我们来做吧！
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using the schema
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模式
- en: As mentioned before, we will use the schema we just defined to instantiate a
    new data model that we will be able to use in our code. Mongoose models are the
    ones that do the heavy lifting in regards to mapping objects to database documents,
    and also abstract common methods for operating with the data, such as `.find()`
    and `.save()`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将使用我们刚刚定义的模式来实例化一个新的数据模型，我们将能够在我们的代码中使用它。 Mongoose模型是将对象映射到数据库文档的重要工具，并且还抽象了操作数据的常见方法，比如`.find()`和`.save()`。
- en: If you’ve come from the TypeORM chapter, models in Mongoose are very similar
    to repositories in TypeORM.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你来自TypeORM章节，Mongoose中的模型与TypeORM中的存储库非常相似。
- en: When having to connect requests to data models, the typical approach in Nest.js
    is building dedicated services, which serve as the “touch point” with each model,
    and controllers. This links the services to the requests reaching the API. We
    follow the `data model -> service -> controller` approach in the following steps.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在必须将请求连接到数据模型时，Nest.js中的典型方法是构建专用服务，这些服务作为与每个模型的“触点”，以及控制器。这将服务与到达API的请求联系起来。我们将在以下步骤中遵循`数据模型->服务->控制器`的方法。
- en: The interface
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接口
- en: Before we create our service and controller, we need to write a small interface
    for our blog entries. This is because, as mentioned before, Mongoose schemas are
    not TypeScript classes, so in order to properly type the object to use it later,
    we will need to define a type for it first.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建服务和控制器之前，我们需要为我们的博客条目编写一个小接口。这是因为，如前所述，Mongoose模式不是TypeScript类，因此为了正确地对对象进行类型定义以便以后使用，我们需要首先为其定义一个类型。
- en: '**`src/entries/entry.interface.ts`**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**`src/entries/entry.interface.ts`**'
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Remember to keep your interface in sync with your schemas so that you don’t
    run into issues with the shape of your objects later.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 记住要保持接口与模式同步，这样你就不会在以后的对象形状问题上遇到问题。
- en: The service
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务
- en: Let’s create a service for our blog entries that interact with the `Entry` model.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的博客条目创建一个服务，与`Entry`模型交互。
- en: '**`src/entries/entries.service.ts`**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**`src/entries/entries.service.ts`**'
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the code above, the most important bit happens inside the constructor: we
    are using the `@InjectModel()` decorator to instantiate our model, by passing
    the desired schema (in this case, `EntrySchema`) as a decorator argument.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，最重要的部分发生在构造函数内部：我们使用`@InjectModel()`装饰器来实例化我们的模型，通过将期望的模式（在本例中为`EntrySchema`）作为装饰器参数传递。
- en: Then, in that same line of code, we are injecting the model as a dependency
    in the service, naming it as `entryModel` and assigning a `Model` type to it;
    from this point on, we can take advantage of all the goodies that Mongoose models
    offer to manipulate documents in an abstract, simplified way.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在同一行代码中，我们将模型作为服务中的依赖项注入，将其命名为`entryModel`并为其分配一个`Model`类型；从这一点开始，我们可以利用Mongoose模型为文档进行抽象、简化的操作提供的所有好处。
- en: On the other hand, it’s worth mentioning that, in the `create()` method, we
    are adding an ID to the received entry object by using the `_id` property (as
    we previously defined on our schema) and generating a value using Mongoose’s built-in
    `Types.ObjectId()` method.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，值得一提的是，在`create()`方法中，我们通过使用`_id`属性（正如我们之前在模式中定义的）向接收到的条目对象添加一个ID，并使用Mongoose内置的`Types.ObjectId()`方法生成一个值。
- en: The controller
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器
- en: The last step we need to cover in the model -> service -> controller chain is
    the controller. The controller will make it possible to make an API request to
    the Nest.js app and either write to or read from the database.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要覆盖模型->服务->控制器链中的最后一步。控制器将使得可以向Nest.js应用程序发出API请求，并且可以从数据库中写入或读取数据。
- en: 'This is how our controller should look like:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的控制器应该看起来的样子：
- en: '**`src/entries/entries.controller.ts`**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**`src/entries/entries.controller.ts`**'
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As usual, we are using Nest.js Dependency Injection to make the `EntryService`
    available in our `EntryController`. Then we route the three basic requests we
    are expecting to listen to (`GET` all entries, `GET` one entry by ID and `POST`
    a new entry) to the corresponding method in our service.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们正在使用Nest.js依赖注入，使`EntryService`在我们的`EntryController`中可用。然后，我们将我们期望监听的三个基本请求（`GET`所有条目，`GET`按ID获取一个条目和`POST`一个新条目）路由到我们服务中的相应方法。
- en: The first requests
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一个请求
- en: At this point, our Nest.js API is ready to listen to requests (both `GET` and
    `POST`) and operate on the data stored in our MongoDB instance based on those
    requests. In other words, we are ready to read from and write to our database
    from the API.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们的Nest.js API已经准备好接收请求（包括`GET`和`POST`），并根据这些请求在我们的MongoDB实例中操作数据。换句话说，我们已经准备好从API中读取并向数据库写入数据。
- en: Let’s give it a try.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试一试。
- en: We will start with a GET request to the `/entries` endpoint. Obviously, since
    we haven’t created any entries yet, we should receive an empty array as a response.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从对“/entries”端点的GET请求开始。显然，由于我们还没有创建任何条目，所以我们应该收到一个空数组作为响应。
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let’s create a new entry by sending a `POST` request to the `entries` endpoint
    and including in the request body a JSON object that matches the shape of our
    previously defined `EntrySchema`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向`entries`端点发送`POST`请求并在请求体中包含一个与我们之前定义的`EntrySchema`形状匹配的JSON对象来创建一个新条目。
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Yes! Our previous `POST` request triggered a write in the database. Let’s try
    to retrieve all entries once again.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！我们之前的`POST`请求触发了数据库中的写入。让我们再次尝试检索所有条目。
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We just confirmed that requests to our `/entries` endpoint successfully execute
    reads and writes in our database. This means that our Nest.js app is usable now,
    since the basic functionality of almost any server application (that is, storing
    data and retrieving it on demand) is working properly.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚确认对我们的`/entries`端点的请求成功执行了数据库中的读写操作。这意味着我们的Nest.js应用现在可以使用，因为几乎任何服务器应用程序的基本功能（即存储数据并根据需要检索数据）都正常工作。
- en: Relationships
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关系
- en: While it’s true that MongoDB is not a relational database, it’s also true that
    it allows “join-like” operations for retrieving two (or more) related documents
    at once.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然MongoDB不是关系数据库，但它允许进行“类似于连接”的操作，以一次检索两个（或更多）相关文档。
- en: Fortunately for us, Mongoose includes a layer of abstraction for these operations
    and allows us to set up relationships between objects in a clear, concise way.
    This is provided by using `ref`s in schemas’ properties, as well as the `.populate()`
    method (that triggers something known as the “population” process; more on it
    later.)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Mongoose包含了一层抽象，允许我们以清晰、简洁的方式在对象之间建立关系。这是通过在模式属性中使用`ref`以及`.populate()`方法（触发所谓的“填充”过程的方法）来实现的；稍后会详细介绍。
- en: Modelling relationships
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建模关系
- en: Let’s go back to our blog example. Remember that so far we only had a schema
    that defined our blog entries. We will create a second schema that will allow
    us to create comments for each blog entry, and save them to the database in a
    way that allows us later to retrieve both a blog entry as well as the comments
    that belong to it, all in a single database operation.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的博客示例。记住到目前为止我们只有一个定义博客条目的模式。我们将创建一个第二个模式，它将允许我们为每个博客条目创建评论，并以一种允许我们稍后检索博客条目以及属于它的评论的方式保存到数据库中，所有这些都可以在单个数据库操作中完成。
- en: 'So, first, we create a `CommentSchema` like the following one:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先，我们创建一个像下面这样的`CommentSchema`：
- en: '**`src/comments/comment.schema.ts`**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**`src/comments/comment.schema.ts`**'
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This schema is, at this point, a “stripped-down version” of our previous `EntrySchema`.
    It’s actually dictated by the intended functionality, so we shouldn’t care too
    much about that fact.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，这个模式是我们之前的`EntrySchema`的“精简版本”。实际上，它是由预期的功能决定的，所以我们不应该太在意这个事实。
- en: Again, we are relying on the `_id` named property as a naming convention.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们依赖于名为`_id`的属性作为命名约定。
- en: One notable new thing is the `entry` property. It will be used to store a reference
    to the entry each comment belongs to. The `ref` option is what tells Mongoose
    which model to use during population, which in our case is the `Entry` model.
    All `_id`’s we store here need to be document `_id`’s from the Entry model.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一个值得注意的新东西是`entry`属性。它将用于存储每个评论所属的条目的引用。`ref`选项告诉Mongoose在填充期间使用哪个模型，我们的情况下是`Entry`模型。我们在这里存储的所有`_id`都需要是Entry模型的文档`_id`。
- en: '**NOTE:** We will ignore the `Comment` interface for brevity; it’s simple enough
    for you to be able to complete it on your own. Don’t forget to do it!'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 为了简洁起见，我们将忽略`Comment`接口；这对你来说应该足够简单。不要忘记完成它！'
- en: 'Second, we need to update our original `EntrySchema` in order to allow us to
    save references to the `Comment` instances that belong to each entry. See the
    following example on how to do it:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们需要更新我们原始的`EntrySchema`，以便允许我们保存属于每个条目的`Comment`实例的引用。看下面的示例如何做到这一点：
- en: '**`src/entries/entry.schema.ts`**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**`src/entries/entry.schema.ts`**'
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that the `comments` property that we just added is *an array of objects*,
    each of which have an ObjectId as well as a reference. The key here is including
    an *array* of related objects, as this array enables what we could call a “one-to-many”
    relationship, if we were in the context of a relational database.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们刚刚添加的`comments`属性是*对象数组*，每个对象都有一个ObjectId以及一个引用。关键在于包含*相关对象*的数组，因为这个数组使我们可以称之为“一对多”关系，如果我们处于关系数据库的上下文中。
- en: In other words, each entry can have multiple comments, but each comment can
    only belong to one entry.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，每个条目可以有多个评论，但每个评论只能属于一个条目。
- en: Saving relationships
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存关系
- en: Once our relationship is modelled, we need to provide a method for saving them
    into our MongoDB instance.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的关系被建模，我们需要提供一个方法将它们保存到我们的MongoDB实例中。
- en: When working with Mongoose, storing a model instance and its related instances
    requires some degree of manually nesting methods. Fortunately, `async/await` will
    make the task much easier.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Mongoose时，存储模型实例及其相关实例需要一定程度的手动嵌套方法。幸运的是，`async/await`将使任务变得更加容易。
- en: Let’s modify our `EntryService` to save both the receive blog entry and a comment
    associated with it; both will be sent to the `POST` endpoint as different objects.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改我们的`EntryService`，以保存接收到的博客条目和与之关联的评论；两者将作为不同的对象发送到`POST`端点。
- en: '**`src/entries/entries.service.ts`**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**`src/entries/entries.service.ts`**'
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The modified `create()` method is now:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的`create()`方法现在是：
- en: Assigning an ID to the entry.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为条目分配一个ID。
- en: Saving the entry while assigning it to a `const`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将条目保存并分配给`const`。
- en: Assigning an ID to the comment.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为评论分配一个ID。
- en: Using the ID of the entry we created before as value of the `entry` property
    of the comment. *This is the reference we mentioned before.*
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们之前创建的条目的ID作为评论的`entry`属性的值。*这是我们之前提到的引用。*
- en: Saving the comment.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存评论。
- en: Returning a success status message.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回成功状态消息。
- en: This way we make sure that, inside the comment, we are successfully storing
    a reference to the entry the comment belongs to. By the way, note that we store
    the reference by entry’s ID.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们确保在评论中成功存储了对评论所属的条目的引用。顺便说一句，注意我们通过条目的ID来存储引用。
- en: The next step should obviously be providing a way of reading from the database
    the related items we now are able to save to it.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，下一步应该是提供一种从数据库中读取我们现在能够保存到其中的相关项目的方法。
- en: Reading relationships
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读关系
- en: As covered a few sections ago, the method that Mongoose provides for retrieving
    related documents from a database at once is called “population,” and it’s invoked
    with the built-in `.populate()` method.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面几节所介绍的，Mongoose提供的从数据库一次检索相关文档的方法称为“population”，并且通过内置的`.populate()`方法调用它。
- en: We’ll see how to use this method by changing the `EntryService` once again;
    at this point, we will deal with the `findById()` method.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何通过再次更改`EntryService`来使用这种方法；在这一点上，我们将处理`findById()`方法。
- en: '**`src/entries/entries.service.ts`**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**`src/entries/entries.service.ts`**'
- en: '[PRE15]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `.populate('comments')` method that we just included will transform the
    `comments` property value from an array of IDs to an array of actual documents
    that correspond with those IDs. In other words, their ID value is replaced with
    the Mongoose document returned from the database by performing a separate query
    before returning the results.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚包含的`.populate('comments')`方法将把`comments`属性值从ID数组转换为与这些ID对应的实际文档数组。换句话说，它们的ID值被替换为通过执行单独查询从数据库返回的Mongoose文档。
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: NoSQL databases are a powerful alternative to “traditional” relational ones.
    MongoDB is arguably the best known of the NoSQL databases in use today, and it
    works with documents encoded in a JSON variant. Using a document-based database
    such as MongoDB allows developers to use more flexible, loosely-structured data
    models and can improve iteration time in a fast-moving project.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL数据库是“传统”关系数据库的一个强大替代品。MongoDB可以说是当今使用的NoSQL数据库中最知名的，它使用JSON变体编码的文档。使用诸如MongoDB之类的基于文档的数据库允许开发人员使用更灵活、松散结构的数据模型，并可以提高在快速移动的项目中的迭代时间。
- en: The well known Mongoose library is an adaptor for MongoDB that works in Node.js
    and that abstracts quite a lot of complexity when it comes to querying and saving
    operations.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 著名的Mongoose库是一个适配器，用于在Node.js中使用MongoDB，并在查询和保存操作时抽象了相当多的复杂性。
- en: 'Over this chapter we’ve covered quite some aspects of working with Mongoose
    and Nest.js, like:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了与Mongoose和Nest.js一起工作的许多方面，比如：
- en: How to start up a local MongoDB instance with Docker Compose.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Docker Compose启动本地MongoDB实例。
- en: How to import the @nestjs/mongoose module in our root module and connect to
    our MongoDb instance.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在我们的根模块中导入@nestjs/mongoose模块并连接到我们的MongoDb实例。
- en: What are schemas and how to create one for modelling our data.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是模式，以及如何为建模我们的数据创建一个模式。
- en: Setting up a pipeline that allows us to write to and read from our MongoDB database
    as a reaction of requests made to our Nest.js endpoints.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立一个管道，使我们能够以对Nest.js端点发出的请求的反应来写入和读取我们的MongoDB数据库。
- en: How to establish relationships between different types of MongoDB documents
    and how to store and retrieve those relationships in an effective way.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在不同类型的MongoDB文档之间建立关系，以及如何以有效的方式存储和检索这些关系。
- en: In the next chapter we cover web sockets.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍Web套接字。
