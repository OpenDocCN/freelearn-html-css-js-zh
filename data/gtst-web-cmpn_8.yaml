- en: Integrating Web Components with a Web Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Web 组件与 Web 框架集成
- en: In the previous chapters, we have either created Web Components from scratch
    or used a library to create Web Components. We even created a single-page web
    app using just Web Components. But what if we have an already-existing project?
    What if this is a monolithic frontend web application and we need a way to use
    a web component in this project? And what if we want to use a web component for
    a quick prototyped functionality without much overhead? This could save a lot
    of effort in both time and money.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们要么从头开始创建 Web 组件，要么使用库来创建 Web 组件。我们甚至只用 Web 组件创建了一个单页 Web 应用程序。但如果我们有一个现有的项目怎么办？如果这是一个单体前端
    Web 应用程序，我们需要在这个项目中使用 Web 组件的方法怎么办？如果我们想用一个 Web 组件实现一个快速原型化的功能而不需要太多开销怎么办？这可以在时间和金钱上节省大量的努力。
- en: This chapter is just for scenarios like this one; here we will look into ways
    in which we can use Web Components in already-existing projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章仅针对此类场景；在这里，我们将探讨我们可以如何使用 Web 组件在现有项目中。
- en: By the way, this chapter is for advanced users.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，这一章是为高级用户准备的。
- en: I am assuming that you have worked on React, Angular, or Vue and that you are
    looking for ways to include Web Components into web applications that are already
    using one or more of these technologies. I am also assuming that you know how
    to run these web applications. However, for the sake of simplicity, we will look
    into the simplest component that uses one of these technologies and how two Vanilla
    Web Components can be included in any of these technologies.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设你已经使用过 React、Angular 或 Vue，并且你正在寻找将 Web 组件包含到已经使用这些技术之一或多个的 Web 应用程序中的方法。我也假设你知道如何运行这些
    Web 应用程序。然而，为了简化，我们将查看使用这些技术中最简单的组件，以及如何将两个 Vanilla Web 组件包含在这些技术中的任何一种中。
- en: 'In this chapter, we''re going to see the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将看到以下主题：
- en: Integration with already-existing projects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与现有项目的集成
- en: Integrating Web Components in React
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 React 中集成 Web 组件
- en: Integrating Web Components in Angular
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Angular 中集成 Web 组件
- en: Integrating Web Components in Vue
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Vue 中集成 Web 组件
- en: The <header-image> web component
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`<header-image>` Web 组件'
- en: 'Let''s say that we have a web component called `<header-image>` whose purpose
    is to show an image, and, on hover, it should be able to show a text that shows
    a small description of the image. The definition of this web component would look
    something like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个名为 `<header-image>` 的 Web 组件，其目的是显示一个图像，并且在鼠标悬停时，它应该能够显示一个文本，显示图像的简要描述。这个
    Web 组件的定义可能看起来像这样：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, we are simply calling the `super()` method inside the constructor.
    Then we are creating a shadow root for the component and then calling the `render()`
    method. We are also making sure that any of the changes coming in via attributes
    re-render the web component to reflect the updates associated with these attributes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们在构造函数中简单地调用了 `super()` 方法。然后我们为组件创建了一个 shadow root，并调用了 `render()` 方法。我们还确保通过属性传入的任何更改都会重新渲染
    Web 组件，以反映与这些属性相关的更新。
- en: 'As for the `render()` method, it looks something like the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `render()` 方法，它看起来可能如下所示：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here we are adding an image to the HTML of the shadow root. In addition, we
    are also enabling error handling with the help of the `handleErrors()` method:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在 shadow root 的 HTML 中添加了一个图像。此外，我们还通过 `handleErrors()` 方法启用了错误处理：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This `handleErrors()` method looks for the missing attribute, `alt`, and spits
    out an error message asking the user to enter the `alttext`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `handleErrors()` 方法寻找缺失的属性 `alt`，并输出一个错误消息，要求用户输入 `alttext`。
- en: 'We can use this web component with the following HTML:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下 HTML 使用这个 Web 组件：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we know what our web component looks like, let's try to use it in already-existing
    projects. We will start with an existing project that uses React.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道了我们的 Web 组件的样子，让我们尝试在现有项目中使用它。我们将从一个使用 React 的现有项目开始。
- en: Integrating Web Components in React
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 React 中集成 Web 组件
- en: Let's say that we have a React app. I am going to use the starter app provided
    by React. You are free to try this out in your more complex app. The steps for
    doing so are going to be exactly the same.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个 React 应用程序。我将使用 React 提供的启动应用程序。你可以在你的更复杂的应用程序中自由尝试这个功能。进行此操作的步骤将完全相同。
- en: Setting up a React project
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 React 项目
- en: If you have your own app, you do not need to go through this section.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有自己的应用程序，你不需要通过这一部分。
- en: You can use the following link to set up the project: [https://facebook.github.io/create-react-app/](https://facebook.github.io/create-react-app/).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下链接来设置项目：[https://facebook.github.io/create-react-app/](https://facebook.github.io/create-react-app/)。
- en: 'Once the setup is done, you will be left with a project that can be run using
    the following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成后，您将得到一个可以使用以下命令运行的项目：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Adding a React component
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加 React 组件
- en: 'For the sake of simplicity, I am adding a React component. This React component
    is going to simulate a real life scenario of the component that is responsible
    for including the `<header-image>` web component. Let this React component be `MainBody`;
    its definition would look something like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，我添加了一个 React 组件。这个 React 组件将模拟一个负责包含`<header-image>`网络组件的真实生活场景。让我们把这个
    React 组件称为`MainBody`；其定义看起来可能如下：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, it shows just one line of text and nothing else. If you have
    a more complex component, the steps will be the same. As for the starter app,
    we will include this `MainBody` component in our `App` component first, which
    is shown here:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它只显示一行文本，没有其他内容。如果您有一个更复杂的组件，步骤将是相同的。至于入门级应用，我们首先在`App`组件中包含这个`MainBody`组件，如下所示：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we are simply importing the `MainBody` component and using it directly
    in the `App` component.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是导入`MainBody`组件，并在`App`组件中直接使用它。
- en: Integration of Vanilla Web Component in a React component
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 React 组件中集成 Vanilla Web Component
- en: 'In order to use the `<header-image>` component inside the `MainBody` React
    component, we will be adding a few things to the `MainBody` component:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在`MainBody` React 组件中使用`<header-image>`组件，我们将在`MainBody`组件中添加一些内容：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we are importing our `<header-image>` web component from its respective
    location and then registering the custom element in the life cycle callback `componentDidMount()`
    method. Then, we are trying to send in `alt` and `src` via state variables to
    the `<header-image>` component.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们从其相应位置导入`<header-image>`网络组件，然后在生命周期回调方法`componentDidMount()`中注册自定义元素。然后，我们尝试通过状态变量将`alt`和`src`发送到`<header-image>`组件。
- en: The steps are the same for all the React components that are trying to use any
    Vanilla Web Component. Now that we have an understanding of how a web component
    can be used in a React project, let's take a look at how it would look inside
    an Angular app.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有试图使用任何 Vanilla Web Component 的 React 组件，步骤都是相同的。现在我们已经了解了如何在 React 项目中使用
    Web Component，让我们看看它在一个 Angular 应用程序中的样子。
- en: Integrating Web Components in Angular
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Angular 中集成 Web 组件
- en: Let's say that we have an already-existing Angular app. This could be a full-fledged
    project or a starter app, and we want to use the `<header-image>` web component
    in an Angular component. We'll start with the setup.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个已经存在的 Angular 应用程序。这可能是一个完整的项目或入门级应用，我们想在 Angular 组件中使用`<header-image>`网络组件。我们将从设置开始。
- en: Setting up an Angular project
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Angular 项目
- en: Let's say that we want to start with a starter app. We can follow the steps
    given at the following URL to install and serve the starter app: [https://angular.io/guide/quickstart](https://angular.io/guide/quickstart).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要从一个入门级应用开始。我们可以按照以下网址提供的步骤来安装和运行入门级应用：[https://angular.io/guide/quickstart](https://angular.io/guide/quickstart)。
- en: 'Angular does not support Vanilla Web Components by default, so even before
    we start using Web Components, though, we need to tell Angular that we want to
    use a web component. We can do so by adding the following code in the `app.module.ts`
    file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 默认不支持 Vanilla Web Components，因此在我们开始使用 Web Components 之前，我们需要告诉 Angular
    我们想要使用一个网络组件。我们可以在`app.module.ts`文件中添加以下代码来实现：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is to tell Angular to expect a custom element that is not built using Angular.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是告诉 Angular 预期一个不是使用 Angular 构建的自定义元素。
- en: Integrating with Angular
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 Angular 集成
- en: 'Now, let''s say we have a component called `app-main-body` built using Angular
    (`file: main-body.component.ts`) that looks something like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们有一个名为`app-main-body`的组件，它是使用 Angular 构建的（文件：`main-body.component.ts`），其外观大致如下：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we want to include the `<header-image>` web component here, we can simply
    add the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在这里包含`<header-image>`网络组件，我们可以简单地添加以下代码：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here, we are simply importing the component definition, and then inside the
    `ngOnInit()` callback method, we are registering the custom element. If we look
    at the template file, `main-body.component.html`, the web component can be included
    as shown in the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是导入组件定义，然后在`ngOnInit()`回调方法内部注册自定义元素。如果我们查看模板文件`main-body.component.html`，Web组件可以按照以下代码所示包含在内：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we are passing in `src` as well as `altText` to the `<header-image>` component
    as attribute values. In this way, we can have Web Components built outside of
    Angular for use in Angular projects.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将`src`和`altText`作为属性值传递给`<header-image>`组件。这样，我们就可以在Angular项目中使用在Angular之外构建的Web
    Components。
- en: Now that we know how a Vanilla Web Component can be used in Angular projects,
    let's look at how Web Components can be used in Vue components.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经知道了如何在Angular项目中使用Vanilla Web组件，那么让我们看看如何在Vue组件中使用Web Components。
- en: Integrating Web Components in Vue
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Vue中集成Web Components
- en: Vue is another one of those libraries that is growing incredibly fast, so I
    thought it would be a good thing if we saw how a web component can be included
    in a Vue component.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Vue是那些增长速度极快的库之一，因此我认为如果我们看到如何在Vue组件中包含Web组件，那将是一件好事。
- en: 'Let''s say we have a `<main-body>` Vue component that looks something like
    this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个看起来像这样的`<main-body>` Vue组件：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As you can see, it does nothing other than show text, just like the main body
    component in Angular and React. Let''s say we want to include the `<header-image>` web
    component to this `<main-body>` component. This would make the `<main-body>` component
    look something like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它所做的只是显示文本，就像Angular和React中的主体组件一样。假设我们想要将`<header-image>` Web组件包含到这个`<main-body>`组件中。这将使`<main-body>`组件看起来像这样：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, we are simply importing the `HeaderImage` component and registering the
    web component inside the `created()` callback method. As you can see, it is very
    simple to use a web component inside a Vue component, and the attribute values
    can be passed into the web component via interpolation, as shown in the previous
    code.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是导入`HeaderImage`组件，并在`created()`回调方法内部注册这个Web组件。正如你所见，在Vue组件中使用Web组件非常简单，可以通过插值将属性值传递给Web组件，就像之前代码中展示的那样。
- en: Using the process stated in this section, we can add an already-existing web
    component to any Vue project.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本节中提到的过程，我们可以将现有的Web组件添加到任何Vue项目中。
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked into how we can integrate Web Components into already-existing
    projects that use some of the most famous libraries/frameworks in the frontend
    world. We learned how to add an existing web component built using Vanilla JavaScript
    to a React, Angular, or Vue project. The techniques learned in this chapter can
    be used with any framework or library and in any type of existing project. The
    inclusion of Web Components in already-existing projects is also a good use case
    for the quick prototyping of features, and the components can even be removed
    as soon as their work is done.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何将Web Components集成到已经使用前端世界中最著名的库/框架的一些现有项目中。我们学习了如何将使用Vanilla JavaScript构建的现有Web组件添加到React、Angular或Vue项目中。本章中学到的技术可以用于任何框架或库，以及任何类型的现有项目。在现有项目中包含Web
    Components也是快速原型化功能的好用例，组件一旦完成工作就可以立即移除。
- en: I hope that this chapter was useful in helping you create better web applications,
    whether they use Web Components or not.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这一章能帮助你创建更好的Web应用程序，无论它们是否使用Web Components。
