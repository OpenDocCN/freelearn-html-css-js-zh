- en: Chapter 3.  Building a Multimedia Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。构建多媒体应用程序
- en: One of the most discussed topics in applications with Node.js is undoubtedly
    the loading and storage of files, whether text, images, audio, or videos. There
    are also many ways to do it; we will not get into deep technical details, but
    follow a brief overview of the two most important methods.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js应用程序中最常讨论的话题之一无疑是文件的加载和存储，无论是文本、图像、音频还是视频。也有许多方法可以做到这一点；我们不会深入技术细节，但会简要概述两种最重要的方法。
- en: One is to save the file in binary format directly in your database, and the
    other way is to save the file directly on the server (the hard drive of the server),
    or a simple storage files in the cloud.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一种是直接以二进制格式保存文件在数据库中，另一种方式是直接将文件保存在服务器上（服务器的硬盘），或者简单地将文件存储在云中。
- en: In this chapter, we will see a very practical way to make uploading files directly
    to the hard drive easy and will record the name of the file in our database as
    a reference. In this way, we can use a scalable storage service in the cloud if
    necessary.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到一种非常实用的方式，可以直接将文件上传到硬盘，并将文件名记录在我们的数据库中作为参考。这样，如果需要，我们可以使用可扩展的云存储服务。
- en: 'In this chapter, we will cover these topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: How to upload different files to hard disk
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将不同的文件上传到硬盘
- en: How to use the Stream API to read and write files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Stream API读写文件
- en: Dealing with multipart form upload
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理多部分表单上传
- en: How to configure the Multer module to store files on a local machine
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置Multer模块将文件存储在本地机器上
- en: How to get the file type and apply simple file validation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何获取文件类型并应用简单的文件验证
- en: How to use the dynamic user gravatar generator
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用动态用户gravatar生成器
- en: What we are building?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们正在构建什么？
- en: We will be build an application for uploading images and videos with user authentication
    using MongoDB and Mongoose; then we can see the images that are going to be the
    end result of our work.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个使用MongoDB和Mongoose进行用户身份验证的上传图像和视频的应用程序；然后我们可以看到这些图像将成为我们工作的最终结果。
- en: In this example, we will use another way to begin our project; this time we
    will start with the `package.json` file.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用另一种方式开始我们的项目；这次我们将从`package.json`文件开始。
- en: 'The following screenshots show what our final application will look like:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了我们最终应用程序的样子：
- en: '| **Images screen** | **Video screen** |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| **图像屏幕** | **视频屏幕** |'
- en: '| ![What we are building?](img/image_03_001.jpg) | ![What we are building?](img/image_03_002.jpg)
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| ![我们正在构建什么？](img/image_03_001.jpg) | ![我们正在构建什么？](img/image_03_002.jpg) |'
- en: Starting with package.json
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从package.json开始
- en: 'As we explained in previous chapters, the `packages.json` file is the heart
    of the application. The steps to create the necessary file are as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前几章中所解释的，`packages.json`文件是应用程序的核心。创建必要文件的步骤如下：
- en: Create a folder called `chapter-03`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`chapter-03`的文件夹。
- en: 'Create a new file called `package.json` and save it in the `chapter-03` folder
    with the following code:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`package.json`的新文件，并将其保存在`chapter-03`文件夹中，包含以下代码：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Adding baseline configuration files
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加基线配置文件
- en: 'Now let''s add some of useful files to our project:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们向项目添加一些有用的文件：
- en: 'Create a file called `.editorconfig` and save it in the `chapter-03` folder
    with the following code:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`.editorconfig`的文件，并将其保存在`chapter-03`文件夹中，包含以下代码：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a file called `.gitignore`, save it in `chapter-03`, and include the
    following code:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`.gitignore`的文件，保存在`chapter-03`中，并包含以下代码：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember, we are using git as source control. Although this file is not necessary
    to run the application, we strongly recommend that you use a source version control
    system.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们正在使用git作为源代码控制。虽然这个文件不是运行应用程序所必需的，但我们强烈建议您使用源代码版本控制系统。
- en: Create a file called `app.js`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`app.js`的文件。
- en: Adding server folders
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加服务器文件夹
- en: 'To finish the basic creation of our application, we will now create the directories
    that store controls, the templates, and other files of the application:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成应用程序的基本创建，我们现在将创建存储控件、模板和应用程序其他文件的目录：
- en: 'Create a folder called `public`, and inside of it, create the following folders:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`public`的文件夹，并在其中创建以下文件夹：
- en: '`/images`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/images`'
- en: '`/javascripts`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/javascripts`'
- en: '`/stylesheets`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/stylesheets`'
- en: '`/uploads`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/uploads`'
- en: '`/ videos`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/视频`'
- en: 'Create a folder called `server`, and inside of it, create these folders:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`server`的文件夹，并在其中创建这些文件夹：
- en: '`/config`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/config`'
- en: '`/controllers`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/controllers`'
- en: '`/models`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/models`'
- en: '`/views`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/views`'
- en: At this time, our project has all the basic directories and files; let's install
    the Node modules from `package.json`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，我们的项目已经具有了所有基本目录和文件；让我们从`package.json`中安装Node模块。
- en: 'Open your terminal/shell at the root project folder and type the following
    command:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录打开您的终端/ shell，并输入以下命令：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The project folder will have the following structure after performing steps
    1, 2, and 3:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行步骤1、2和3之后，项目文件夹将具有以下结构：
- en: '![Adding server folders](img/image_03_003.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![添加服务器文件夹](img/image_03_003.jpg)'
- en: Folder structure
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹结构
- en: Let's starting creating the `app.js` file content.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建`app.js`文件内容。
- en: Configuring the app.js file
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置app.js文件
- en: We will, step by step, make the `app.js` file; it will have many similar parts
    to the application created in `Chapter 01`. However, in this chapter we will be
    using different modules and a different way to create the application controls.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐步创建`app.js`文件；它将与`第01章`中创建的应用程序有许多相似的部分。但是，在本章中，我们将使用不同的模块和不同的方式来创建应用程序控件。
- en: 'In, `Node.js` with the Express framework, there are different ways to accomplish
    the same goals:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Node.js`中使用Express框架，有不同的方法来实现相同的目标：
- en: 'Open the `app.js` file at the root project folder and add the following modules:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开项目根目录下的`app.js`文件，并添加以下模块：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that we are using the Multer module for handling `multipart/form-data`.
    You can find more information about `multer` at [https://github.com/expressjs/multer](https://github.com/expressjs/multer).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用Multer模块来处理`multipart/form-data`。您可以在[https://github.com/expressjs/multer](https://github.com/expressjs/multer)找到有关`multer`的更多信息。
- en: 'Add the following lines right after the `multer` import:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`multer`导入之后添加以下行：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Do not worry about these controls files at this time. Later in the book, we
    will see them one by one. At this point, we will focus on the creation of `app.js`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心这些控制文件。在本书的后面，我们会逐个看到它们。此时，我们将专注于创建`app.js`。
- en: 'Add the following lines right after the `controller` importer:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`controller`导入器之后添加以下行：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The previous code sets the user session with the messaging system and also authentication
    with Passport.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码设置了带有消息系统的用户会话，还使用Passport进行身份验证。
- en: 'Now let''s set the template engine and the connection with the application
    database. Add the following code right after the `express app` variable:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们设置模板引擎和与应用程序数据库的连接。在`express app`变量之后添加以下代码：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The following lines set up some default middlewares and initialize `Passport-local`
    and user sessions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行设置了一些默认中间件并初始化了`Passport-local`和用户会话。
- en: 'Add the following lines right after the previous block of code:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一个代码块之后添加以下行：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now let's add all the application routes. We could've used an external file
    to store all routes, but we will keep it in this file, since we will not have
    many routes in our application.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加所有应用程序路由。我们本可以使用外部文件来存储所有路由，但是我们将其保留在此文件中，因为我们的应用程序中不会有太多路由。
- en: 'Add the following code right after `app.use(flash())`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app.use(flash())`之后添加以下代码：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Here you can see that we are using the same routes and functions as the sample
    application in [Chapter 01](ch01.html "Chapter 1.  Building a Twitter-Like Application
    Using the MVC Design Pattern"), *Building a Twitter-Like Application Using the
    MVC Design Pattern*; we kept the routes, authentication and comments, with minor
    changes.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到我们正在使用[第01章](ch01.html "第1章。使用MVC设计模式构建类似Twitter的应用程序")中的示例应用程序相同的路由和函数，*使用MVC设计模式构建类似Twitter的应用程序*；我们保留了路由、身份验证和评论，并进行了一些小的更改。
- en: The last step to be taken is to add the `error` functions and configure the
    `server port` that our application will use.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要采取的最后一步是添加`error`函数并配置我们的应用程序将使用的`服务器端口`。
- en: 'Add the following code after the previous code block:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一个代码块之后添加以下代码：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating the config.js file
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建config.js文件
- en: 'Create a file called `config.js` inside the `config` folder at `server/config/`
    and add the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在`server/config/`文件夹内创建一个名为`config.js`的文件，并添加以下代码：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a file called `passport.js` inside the `config` folder at: `server/config/`.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在`server/config/`文件夹内创建一个名为`passport.js`的文件。
- en: In this step, we will use the same configuration file for the `Passport` module
    used in Chapter 01, *Building a Twitter-Like Application Using the MVC Design
    Pattern in Node.js.* You can download the sample code from [www.packtpub.com](http://www.packtpub.com)
    or from the official repository of the book from GitHub.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们将使用第01章中使用的`Passport`模块的相同配置文件，*在Node.js中使用MVC设计模式构建类似Twitter的应用程序*。您可以从[www.packtpub.com](http://www.packtpub.com)或从GitHub的官方存储库下载示例代码。
- en: Creating the controller's files
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器文件
- en: 'Now let''s create the controller''s files in `server/controllers`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在`server/controllers`中创建控制器文件：
- en: 'Create a file called `auth.js` and add the following code:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`auth.js`的文件，并添加以下代码：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a file called `comments.js` and add this code:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`comments.js`的文件，并添加以下代码：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a file called `index.js` and add the following code:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`index.js`的文件，并添加以下代码：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now let's create the controllers to handle the uploading of images and videos
    to our application. We will use the Node.js API stream to read and write our files.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建控制器来处理图像和视频上传到我们的应用程序。我们将使用Node.js API流来读取和写入我们的文件。
- en: Tip
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can find the complete documentation of this API at [https://nodejs.org/api/stream.html](https://nodejs.org/api/stream.html).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://nodejs.org/api/stream.html](https://nodejs.org/api/stream.html)找到此API的完整文档。
- en: Create a file called `images.js`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`images.js`的文件。
- en: 'Add the following code:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the following code right after the `importer` modules:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`importer`模块之后添加以下代码：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now let's add the function that is responsible for saving the file to a temporary
    directory and transferring it to a directory in the `public` folder.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加负责将文件保存到临时目录并将其传输到`public`文件夹中的目录的函数。
- en: 'Add the following lines, right after the previous code block:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一个代码块之后添加以下行：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Add the function that checks whether the user is authenticated and authorized
    to insert an image.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 添加检查用户是否经过身份验证并被授权插入图像的函数。
- en: 'Add the following code at the end of the file:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾添加以下代码：
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now let''s repeat this procedure for the control of `videos.js`, then create
    a file called `videos.js`, and add the following code:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们重复这个过程来控制`videos.js`，然后创建一个名为`videos.js`的文件，并添加以下代码：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see, we use the same concept as the image controller to create the
    video controller.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们使用与图像控制器相同的概念来创建视频控制器。
- en: Due to the stream, the Node.js API can handle any type of file using the `createReadStream()`
    and `createWriteStream()` functions.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 由于流，Node.js API可以使用`createReadStream()`和`createWriteStream()`函数处理任何类型的文件。
- en: Creating model files
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型文件
- en: 'Now let''s create the application''s template files. Since we are using the
    mongoose middleware used in chapter 1, *Building a Twitter-Like Application Using
    the MVC Design Pattern in Node.js*, we will keep the same type of configuration:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建应用程序的模板文件。由于我们在第1章中使用了mongoose中间件，*在Node.js中使用MVC设计模式构建类似Twitter的应用程序*，我们将保持相同类型的配置：
- en: 'Create a file called `comments.js` inside the models folder at `server/models` and
    add the following code:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`server/models`文件夹内创建一个名为`comments.js`的文件，并添加以下代码：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a file called `user.js` inside the models folder at `server/models`
    and add the following code:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`server/models`文件夹内创建一个名为`user.js`的文件，并添加以下代码：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, create a file called `images.js` inside the `models` folder at `server/models`
    and add this code:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`server/models`文件夹内创建一个名为`images.js`的文件，并添加以下代码：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, create a file called `videos.js` inside the `models` folder at `server/models`
    and add the following code:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`server/models`文件夹内创建一个名为`videos.js`的文件，并添加以下代码：
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Creating view files
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建视图文件
- en: 'In this section, we will use the same `view` files used in `Chapter 01` for
    the following files:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用与`第01章`中相同的`view`文件来处理以下文件：
- en: '`views / partials / javascripts.ejs`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views/partials/javascripts.ejs`'
- en: '`views / partials / stylesheets.ejs`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views/partials/stylesheets.ejs`'
- en: '`views / pages / login.ejs`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views/pages/login.ejs`'
- en: '`views / pages / signup.ejs`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views/pages/signup.ejs`'
- en: '`views / pages / profile.ejs`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views/pages/profile.ejs`'
- en: '`views / pages / index.ejs`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views/pages/index.ejs`'
- en: '`views / pages / comments.js`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views/pages/comments.js`'
- en: '`views / pages / error.ejs`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views/pages/error.ejs`'
- en: As previously commented, you can download these files from the Packt website
    or the official  GitHub repository of the book.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，您可以从Packt网站或本书的官方GitHub存储库下载这些文件。
- en: 'In addition to these files, we will create the `views` files for the photos
    and videos page, and add these routes to the application menu:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些文件之外，我们将为照片和视频页面创建`views`文件，并将这些路由添加到应用程序菜单中：
- en: 'Create a file called `footer.ejs` inside the `views/partials` folder and add
    the following code:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/partials`文件夹内创建一个名为`footer.ejs`的文件，并添加以下代码：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then create a file called `header.ejs` inside the `views/partials` folder and
    add this code:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在`views/partials`文件夹内创建一个名为`header.ejs`的文件，并添加以下代码：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a file called `images-gallery.ejs` inside the `views/pages` folder and
    add the following code:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/pages`文件夹内创建一个名为`images-gallery.ejs`的文件，并添加以下代码：
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The previous code sets a form HTML tag to use the `enctype="multipart/form-data`
    type and creates a loop over the image object to show all the images added to
    the gallery.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码设置了一个表单HTML标签，使用`enctype="multipart/form-data`类型，并创建一个循环来显示添加到图库中的所有图像。
- en: 'Create a file called `videos.ejs` inside the `views/pages` folder and add this
    code:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/pages`文件夹内创建一个名为`videos.ejs`的文件，并添加以下代码：
- en: '[PRE27]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Creating the public folder content
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建public文件夹内容
- en: At this stage, we've completed all the necessary steps to create folders and
    files inside the `server` directory as controllers, models, and views.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经完成了在`server`目录中创建文件夹和文件的所有必要步骤，如控制器、模型和视图。
- en: 'Now we need to copy the contents of the `public` folder we created in `Chapter
    01`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要复制在`第01章`中创建的`public`文件夹中的内容：
- en: 'Copy the following folders and their contents and paste them into the `chapter-03`
    root project folder:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制以下文件夹及其内容，并将它们粘贴到`chapter-03`根项目文件夹中：
- en: '`public/images`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public/images`'
- en: '`public/javascripts`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public/javascripts`'
- en: '`bootstrap.min.js`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bootstrap.min.js`'
- en: '`jquery.min.js`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.min.js`'
- en: '`public/stylesheets`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public/stylesheets`'
- en: '`bootstrap.min.css`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bootstrap.min.css`'
- en: '`style.css`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style.css`'
- en: '`style.css.map`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style.css.map`'
- en: '`style.sass`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style.sass`'
- en: Create a folder called `uploads` inside the `public` folder.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`public`文件夹内创建一个名为`uploads`的文件夹。
- en: Then, create a folder called `videos` inside the `public` folder.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`public`文件夹内创建一个名为`videos`的文件夹。
- en: Inserting images in the application using the upload form
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用上传表单在应用程序中插入图像
- en: 'Now it''s time to test the application, noting that for this you should start
    your MongoDB. Otherwise the application will return a failure error while connecting:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是测试应用程序的时候了，需要注意的是，为此您应该启动您的MongoDB。否则，应用程序在连接时会返回失败错误：
- en: 'Open your terminal/shell at the root project folder and type the following
    command:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录打开您的终端/Shell，并输入以下命令：
- en: '[PRE28]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Go to `http://localhost:3000/signup` and enter the following data:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`http://localhost:3000/signup`并输入以下数据：
- en: 'name: **John**'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 姓名：**约翰**
- en: 'email: **john@doe.com**'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件：**john@doe.com**
- en: 'password: **123**'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码：**123**
- en: Go to `http://localhost:3000/images-gallery`, click on the **Image Upload**
    button, fill in the form with a title and choose an image (note that we set up
    the image size limit to *1 *MB just for example purposes). You will see a model
    form, as the following screenshot shows:![Inserting images in the application
    using the upload form](img/image_03_004.jpg)
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`http://localhost:3000/images-gallery`，点击**图像上传**按钮，填写表单标题并选择图像（请注意，我们设置了图像大小限制为*1*MB，仅用于示例目的）。您将看到一个模型表单，如下截图所示：![使用上传表单在应用程序中插入图像](img/image_03_004.jpg)
- en: Image upload form
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图像上传表单
- en: After choosing the image, click on the **Save Changes** button, and you're done!
    You will see the following screenshot at `http://localhost:3000/images-gallery
    page`:![Inserting images in the application using the upload form](img/image_03_005.jpg)
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择图像后，点击**保存更改**按钮，完成！您将在`http://localhost:3000/images-gallery`页面看到以下截图：![使用上传表单在应用程序中插入图像](img/image_03_005.jpg)
- en: Gallery image screen
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图库图像屏幕
- en: Inserting video files into the application using the upload form
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用上传表单在应用程序中插入视频文件
- en: 'As we did to insert an image into our application, let''s follow the same procedure
    to insert a video:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 与插入图像到我们的应用程序一样，让我们按照相同的步骤来插入视频：
- en: Go to `http://localhost:3000/videos`, click on the **Video Upload** button,
    fill in the form with a title and choose a video file (note that again we set
    up the image size limit to 1 MB and the video format to *MP4, WEBM* just for example
    purposes). You will see a modal form, as shown in the following screenshot:![Inserting
    video files into the application using the upload form](img/image_03_006.jpg)
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`http://localhost:3000/videos`，点击**视频上传**按钮，填写表单标题并选择视频文件（请注意，我们再次将图像大小限制设置为1MB，视频格式设置为*MP4,
    WEBM*，仅用于示例目的）。您将看到一个模型表单，如下截图所示：![使用上传表单在应用程序中插入视频文件](img/image_03_006.jpg)
- en: Video upload form
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 视频上传表单
- en: Important notes about image and video upload
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于图像和视频上传的重要说明
- en: Node.js gives us a complete API for handling files (Stream API) such as image,
    video, pdf, and other formats. There are also several ways to do file uploads
    to the server or for storage in the cloud, as already noted. Furthermore, the
    Node.js ecosystem provides us with many modules to deal with the different types
    of files and to use forms with `enctype = "multipart / form-data"`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js为我们提供了一个完整的处理文件的API（流API），如图像、视频、pdf和其他格式。还有几种将文件上传到服务器或存储在云中的方法，正如前面已经提到的。此外，Node.js生态系统为我们提供了许多模块，用于处理不同类型的文件，并使用带有`enctype="multipart/form-data"`的表单。
- en: In this chapter, we use the `Multer` module. Multer is a complete middleware
    for handling files with various methods for upload and file storage.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了`Multer`模块。Multer是一个完整的中间件，用于处理各种上传和文件存储的方法。
- en: In this example, we only stored the filename in MongoDB and sent the file directly
    to a server folder. There is another way to upload, where we send the file in
    binary format to the database, although it is important to remember that the capacity of
    MongoDB to store *BSON* file is *16 *MB.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们只在MongoDB中存储了文件名，并直接将文件发送到服务器文件夹。还有另一种上传方式，我们将文件以二进制格式发送到数据库，尽管重要的是要记住MongoDB存储*BSON*文件的容量为*16*MB。
- en: If you choose to store the files in the MongoDB database, you can use the GridFS
    feature of MongoDB and Node.js modules as `GridFS-stream`, as an upload middleware,
    just like we did with Multer.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择将文件存储在MongoDB数据库中，您可以使用MongoDB的GridFS功能和Node.js模块，如`GridFS-stream`，作为上传中间件，就像我们使用Multer一样。
- en: 'In the example for this chapter, we limit the upload size to 1 MB, which we
    can see in the following highlighted line:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的示例中，我们将上传大小限制为1 MB，在下面突出显示的行中可以看到：
- en: '[PRE29]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Tip
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can find more information about limits in the official documentation for
    Multer at [https://github.com/expressjs/multer#limits](https://github.com/expressjs/multer#limits).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Multer的官方文档中找到有关限制的更多信息，网址为[https://github.com/expressjs/multer#limits](https://github.com/expressjs/multer#limits)。
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we built a complete Node MVC application for file upload of
    images and videos; we also set up a user session with e-mail and password authentication,
    storing the encrypted password on MongoDB.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个完整的Node MVC应用程序，用于上传图像和视频文件；我们还设置了一个用户会话，使用电子邮件和密码进行身份验证，并将加密密码存储在MongoDB上。
- en: In addition, this chapter enabled you to build modular, robust, and scalable
    MVC applications.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，本章使您能够构建模块化、健壮和可扩展的MVC应用程序。
- en: Also, we used very common features across web applications, such as access to
    the database, sign-in and sign up, and file upload.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还使用了在Web应用程序中非常常见的功能，如访问数据库、登录和注册以及文件上传。
- en: In the next chapter, we will see how to manipulate and upload images using a
    cloud service and store metadata on MongoDB.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用云服务操纵和上传图像，并将元数据存储在MongoDB中。
