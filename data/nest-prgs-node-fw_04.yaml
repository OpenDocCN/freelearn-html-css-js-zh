- en: Chapter 4\. Dependency Injection system of Nest.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。Nest.js的依赖注入系统
- en: This chapter provides an overview of the Dependency Injection (DI) pattern,
    which is frequently used today by the biggest frameworks. It is a way to keep
    code clean and easier to use. By using this pattern you end up with fewer coupled
    components and more reusable ones, which helps accelerate the development process
    time.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章概述了依赖注入（DI）模式，这是今天最大的框架经常使用的一种方式。这是一种保持代码清晰且易于使用的方法。通过使用此模式，您最终会得到更少耦合的组件和更多可重用的组件，这有助于加快开发过程时间。
- en: Here we examine the method that used the injection before the pattern existed,
    and how the injection changed in time to use Nest.js injection with a modern approach
    using TypeScript and decorators. You will also see snippets that show the advantage
    of this type of pattern, and modules provided by the framework.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将研究在模式存在之前使用注入的方法，以及注入如何随着时间的推移而改变，以使用TypeScript和装饰器的现代方法进行Nest.js注入。您还将看到显示此类模式优势的代码片段，以及框架提供的模块。
- en: Nest.js is based on Angular in terms of architecture, and is used to create
    testable, scalable, loosely-coupled and easily maintainable applications. As is
    the case with Angular, Nest.js has its own dependency injection system, which
    is part of the `core` of the framework, meaning that Nest.js is less dependent
    on a third-party library.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js在架构上基于Angular，并用于创建可测试、可扩展、松耦合和易于维护的应用程序。与Angular一样，Nest.js有自己的依赖注入系统，这是框架的`core`的一部分，这意味着Nest.js不太依赖第三方库。
- en: Overview of Dependency Injection
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖注入概述
- en: Since `Typescript 1.5` introduces the notion of the decorator, you can do `meta-programing`
    using the added metadata provided by using a decorator on different objects or
    properties, such as `class`, `function`, `function parameters` or `class property`.
    The meta-programing is the ability to write some code or program using the metadata
    describing an object. This type of program allows you to modify the functioning
    of a program using its own metadata. In our case this metadata is of interest
    to us, because it helps inject some object into another object, whose name is
    Dependency Injection.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 自`Typescript 1.5`引入装饰器的概念以来，您可以使用装饰器在不同对象或属性上提供的添加元数据进行`元编程`，例如`class`，`function`，`function
    parameters`或`class property`。元编程是使用描述对象的元数据编写一些代码或程序的能力。这种类型的程序允许您使用其自身的元数据修改程序的功能。在我们的情况下，这些元数据对我们很有兴趣，因为它有助于将某些对象注入到另一个对象中，其名称为依赖注入。
- en: By using the decorator, you can add metadata on any object or property linked
    to those decorators. This will define, for example, the type of object that takes
    the decorator, but it can also define all of the parameters needed by a function
    that are described in its metadata. To get or define metadata on any object, you
    can also use the `reflect-metadata` library in order to manipulate them.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用装饰器，您可以在与这些装饰器相关联的任何对象或属性上添加元数据。例如，这将定义接受装饰器的对象的类型，但它还可以定义函数所需的所有参数，这些参数在其元数据中描述。要获取或定义任何对象上的元数据，您还可以使用`reflect-metadata`库来操纵它们。
- en: Why use Dependency Injection
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么使用依赖注入
- en: The real interest in using Dependency Injection is that the objects will be
    less coupled between the dependent and its dependencies. With the framework that
    provides the injector system, you can manage your objects without thinking about
    the instanciation of them, because that is managed by the injector, which is there
    to resolve the dependencies of every dependent object.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用依赖注入的真正好处在于，依赖对象与其依赖项之间的耦合度更低。通过提供注入器系统的框架，您可以管理对象而无需考虑它们的实例化，因为这由注入器来管理，后者旨在解决每个依赖对象的依赖关系。
- en: This means that it is easier to write tests and mock dependencies, which are
    much cleaner and more readable.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着更容易编写测试和模拟依赖项，这些测试更清晰和更易读。
- en: How it works without Dependency Injection
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 没有依赖注入的情况下如何运作
- en: Let’s imagine an `AuthenticationService` that needs a `UserService` to be injected.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象一个需要注入`UserService`的`AuthenticationService`。
- en: 'Here is the `UserService`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`UserService`：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And the `AuthenticationService`, which instantiates the `UserService` that
    is needed:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 还有`AuthenticationService`，它实例化所需的`UserService`：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, you have to manage all of the related dependencies in the class
    itself to be used inside the `AuthenticationService`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，您必须在类本身中管理所有相关的依赖项，以便在`AuthenticationService`内部使用。
- en: The disadvantage of this is mostly the inflexibility of the `AuthenticationService`.
    If you want to test this service, you have to think about its own hidden dependencies,
    and of course, you can’t share any services between different classes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的缺点主要是`AuthenticationService`的不灵活性。如果要测试此服务，您必须考虑其自身的隐藏依赖项，当然，您不能在不同的类之间共享任何服务。
- en: How it works with a manual Dependency Injection
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用手动依赖注入的工作原理
- en: Let’s see now how you can pass dependencies through the constructor using the
    previous `UserService`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使用先前的`UserService`通过构造函数传递依赖项。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can easily share the `userService` instance through all of the objects,
    and it is no longer the `AuthenticationService`, which has to create a `UserService`
    instance.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松地通过所有对象共享`userService`实例，而不再是`AuthenticationService`必须创建`UserService`实例。
- en: This makes life easier because the injector system will allow you to do all
    of this without needing to instantiate the dependencies. Let’s see this using
    the previous class in the next section.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这使生活变得更容易，因为注入器系统将允许您执行所有这些操作，而无需实例化依赖项。让我们在下一节中使用前面的类来看看这一点。
- en: Dependency Injection pattern today
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖注入模式今天
- en: Today, to use Dependency Injection, you just have to use the decorator system
    provided by Typescript and implemented by the framework that you want to use.
    In our case, as you will see in the Tools chapter, Nest.js provides some decorators
    that will do almost nothing except add some metadata on the object or property
    where they will be used.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，要使用依赖注入，你只需要使用Typescript提供的装饰器系统，并由你想要使用的框架实现。在我们的案例中，正如你将在工具章节中看到的那样，Nest.js提供了一些装饰器，它们几乎什么都不做，只是在它们将被使用的对象或属性上添加一些元数据。
- en: This metadata will help make the framework aware that those objects can be manipulated,
    injecting the needed dependencies.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些元数据将帮助框架意识到这些对象可以被操作，注入所需的依赖关系。
- en: 'Here is an example of the usage of the `@Injectable()` decorator:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`@Injectable()`装饰器的使用示例：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This decorator will be transpiled and will add some metadata to it. This means
    that you have accessed `design:paramtypes` after using a decorator on the class,
    which allows the injector to know the type of the arguments that are dependent
    on the `AuthenticationService`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个装饰器将被转译，并且将向其添加一些元数据。这意味着在类上使用装饰器后，你可以访问`design:paramtypes`，这允许注入器知道依赖于`AuthenticationService`的参数的类型。
- en: Generally, if you would like to create your own class decorator, this one will
    take as parameter the `target` that represents the `type` of your class. In the
    previous example, the type of the `AuthenticationService` is the `AuthenticationService`
    itself. The purpose of this custom class decorator will be to register the target
    in a `Map` of services.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，如果你想创建自己的类装饰器，这个装饰器将以`target`作为参数，表示你的类的`type`。在前面的例子中，`AuthenticationService`的类型就是`AuthenticationService`本身。这个自定义类装饰器的目的将是将目标注册到服务的`Map`中。
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Of course, you have seen how to register a services into a Map of service, so
    let’s look at how this could be a custom injector. The purpose of this injector
    will be to register all of the services into a Map, and also to resolve all the
    dependencies of an object.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你已经看到了如何将服务注册到服务的Map中，那么让我们看看这可能是一个自定义注入器。这个注入器的目的将是将所有服务注册到Map中，并解决对象的所有依赖关系。
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: So, if you would like to instanciate our `AuthenticationService`, which depends
    on the super `UserService` class, you should call the injector in order to resolve
    the dependencies and return this instance of the wanted object.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你想实例化我们的`AuthenticationService`，它依赖于超级`UserService`类，你应该调用注入器来解决依赖关系，并返回所需对象的实例。
- en: In the following example, we will resolve through the injector the `UserService`
    that will be passed into the constructor of the `AuthenticationService` in order
    to be able to instanciate it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们将通过注入器解决`UserService`，并将其传递到`AuthenticationService`的构造函数中，以便能够实例化它。
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Nest.js Dependency Injection
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nest.js依赖注入
- en: From the `@nestjs/common` you have access to the decorators provided by the
    framework and one of them is the `@Module()` decorator. This decorator is the
    main decorator to build all of your modules and work with the Nest.js Dependency
    Injection system between them.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从`@nestjs/common`中，你可以访问框架提供的装饰器，其中之一就是`@Module()`装饰器。这个装饰器是构建所有模块并在它们之间使用Nest.js依赖注入系统的主要装饰器。
- en: Your application will have at least one module, which is the main one. The application
    can use only one module (the main one) in the case of a small app. Nonetheless,
    as your app grows, you will have to create several modules to arrange your app
    for the main module.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序将至少有一个模块，即主模块。在小型应用程序的情况下，应用程序可以只使用一个模块（主模块）。然而，随着应用程序的增长，你将不得不创建多个模块来为主模块安排应用程序。
- en: From the main module, Nest will know all of the related modules that you have
    imported, and then create the application tree to manage all of the Dependency
    Injections and the scope of the modules.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从主模块中，Nest将知道你已经导入的所有相关模块，然后创建应用程序树来管理所有的依赖注入和模块的范围。
- en: To do this, the `@Module()` decorator respects the `ModuleMetadata` interface,
    which defines the properties allowed to configure a module.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，`@Module()`装饰器遵循`ModuleMetadata`接口，该接口定义了允许配置模块的属性。
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To define a module, you have to register all of the services stored in `providers`
    that will be instantiated by the Nest.js `injector`, as well as the `controllers`
    that can inject the providers, which are services, registered into the module
    or those exported by another module through the `exports` property. In such a
    case, these have to be registered in `imports`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个模块，你必须注册所有存储在`providers`中的服务，这些服务将由Nest.js的`injector`实例化，以及可以注入提供者的`controllers`，这些提供者是通过`exports`属性注册到模块中的服务，或者由其他模块导出的服务。在这种情况下，这些服务必须在`imports`中注册。
- en: It is not possible to access an injectable from another module if it has not
    been exported by the module itself, and if the exporting module hasn’t been imported
    into the concerned module, which has to use the external services.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个模块没有导出可注入的内容，并且导出模块没有被导入到使用外部服务的相关模块中，那么就无法访问另一个模块中的可注入内容。
- en: '***How does Nest.js create the Dependency injection tree?***'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '***Nest.js如何创建依赖注入树？***'
- en: In the previous section, we talked about the main module, generally called `AppModule`,
    which is used to create the app from `NestFactory.create`. From here, Nest.js
    will have to register the module itself, and it will also go through each module
    imported to the main module.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们谈到了主模块，通常称为`AppModule`，它用于从`NestFactory.create`创建应用程序。从这里，Nest.js将不得不注册模块本身，并且还将遍历导入到主模块的每个模块。
- en: Nest.js will then create a `container` for the entire app, which will contain
    all of the `module`, `globalModule`, and `dynamicModuleMetadata` of the entire
    application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js然后会为整个应用程序创建一个`container`，其中包含整个应用程序的`module`，`globalModule`和`dynamicModuleMetadata`。
- en: After it has created the container, it will initialize the app and, during the
    initialization, it will instantiate an `InstanceLoader` and a `DependenciesScanner
    -> scanner.ts`, via which Nest.js will have the possibility to scan every module
    and metadata related to it. It does this to resolve all of the dependencies and
    generate the instance of all modules and services with their own injections.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了容器之后，它将初始化应用程序，并在初始化期间实例化一个 `InstanceLoader` 和一个 `DependenciesScanner ->
    scanner.ts`，通过它，Nest.js 将有可能扫描与每个模块和元数据相关的所有模块。它这样做是为了解决所有的依赖关系，并生成所有模块和服务的实例及其自己的注入。
- en: 'If you want to know the details of the engine, we recommend that you go deep
    into the two classes: `InstanceLoader` and `DependenciesScanner`.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解引擎的细节，我们建议你深入了解两个类：`InstanceLoader` 和 `DependenciesScanner`。
- en: To have a better understanding of how this works, take a look at an example.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这是如何工作的，看一个例子。
- en: 'Imagine that you have three modules:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你有三个模块：
- en: ApplicationModule
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApplicationModule`'
- en: AuthenticationModule
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AuthenticationModule`'
- en: UserModule
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserModule`'
- en: 'The app will be created from the `ApplicationModule`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将从 `ApplicationModule` 创建：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This imports the `AuthenticationModule`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这导入了 `AuthenticationModule`：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And the `UserModule`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以及 `UserModule`：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this case, the `AuthenticationModule` must import the `UserModule`, which
    exports the `UserService`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`AuthenticationModule` 必须导入 `UserModule`，后者导出 `UserService`。
- en: We have now built our application’s architecture module and have to create the
    app, which will be allowed to resolve all of the dependencies.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经构建了应用程序的架构模块，并且需要创建应用程序，它将允许解决所有的依赖关系。
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Essentially, when you create the app, Nest.js will:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，当你创建应用程序时，Nest.js 将：
- en: Scan the module.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描模块。
- en: Store the module and an empty scope array (for the main module). The scope will
    then be populated with the module, which imports this scanned module.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储模块和一个空的作用域数组（用于主模块）。然后将作用域填充为导入此扫描模块的模块。
- en: Look at the related modules through the `modules` metadata.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看通过 `modules` 元数据相关的模块。
- en: Scan for the modules dependencies as services, controllers, related modules,
    and exports to store them in the module.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描模块的依赖项作为服务、控制器、相关模块和导出项，将它们存储在模块中。
- en: Bind all of the global modules in each module to the related module.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有全局模块绑定到每个模块中的相关模块。
- en: Create all of the dependencies by resolving the prototype, creating an instance
    for each one. For dependencies that have dependencies themselves, Nest.js will
    resolve them in the same way and include these in the previous level.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过解析原型创建所有的依赖项，为每个依赖项创建一个实例。对于具有自己依赖项的依赖项，Nest.js 将以相同的方式解析它们，并将其包含在前一级中。
- en: '***What about the global module?***'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '***全局模块呢？***'
- en: Nest.js also provides a `@Global()` decorator, allowing Nest to store them in
    a global `Set` of modules, which will be added to the related `Set` of the module
    concerned.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js 还提供了一个 `@Global()` 装饰器，允许 Nest 将它们存储在全局模块的 `Set` 中，并将其添加到相关模块的 `Set`
    中。
- en: This type of module will be registered with the `__globalModule__` metadata
    key and added to the globalModule set of the container. They will then be added
    to the related `Set` of the module concerned. With a global module, you are allowed
    to inject components from the module into another module without importing it
    into the targeted module. This avoids having to import a module, which is possibly
    used by all of the modules, into all of the modules.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的模块将使用 `__globalModule__` 元数据键进行注册，并添加到容器的 globalModule 集合中。然后它们将被添加到相关模块的
    `Set` 中。有了全局模块，你可以允许将模块中的组件注入到另一个模块中，而无需将其导入到目标模块中。这避免了将一个可能被所有模块使用的模块导入到所有模块中。
- en: 'Here is an example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个例子：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With all the previous information, you should now be familiar with the mechanism
    of the Nest.js dependency injection and have a better understanding of how they
    work together.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有了之前的所有信息，你现在应该对 Nest.js 依赖注入的机制很熟悉，并且对它们如何一起工作有了更好的理解。
- en: The difference between Nest.js and Angular DI
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nest.js 和 Angular DI 之间的区别
- en: Even if Nest.js is widely based on Angular, there is a major difference between
    them. In Angular, each service is a singleton, which is the same as Nest.js, but
    there is a possibility to ask Angular to provide a new instance of the service.
    To do that in Angular, you can use the `providers` property of the `@Injectable()`
    decorator to have a new instance of a provider registered in the module and available
    only for this component. That can be useful to have to avoid overwriting some
    properties through different components.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 即使 Nest.js 在很大程度上基于 Angular，它们之间存在一个重大区别。在 Angular 中，每个服务都是单例，这与 Nest.js 相同，但是可以要求
    Angular 提供服务的新实例。在 Angular 中，你可以使用 `@Injectable()` 装饰器的 `providers` 属性来注册模块中的提供者的新实例，并且仅对该组件可用。这对于避免通过不同组件覆盖某些属性非常有用。
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: So to recap, we have seen in this chapter how it was unflexible and hard to
    test an object without using the Dependecy Injection. Also, we have learned more
    about the evolution of the method to implement the dependencies into the dependent,
    first by implementing the dependencies into the dependent, then changing the method
    by passing them manually into the constructor to arrive with the injector system.
    This then resolves the dependencies, injecting them in the constructor automatically
    by resolving a tree, which is how Nest.js uses this pattern.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，总结一下，我们在本章中看到了如何在不使用依赖注入的情况下，对象是多么不灵活和难以测试。此外，我们还了解了如何实现依赖项注入的方法的演变，首先是通过将依赖项实现到依赖项中，然后通过手动将它们传递到构造函数来改变方法，最终到达注入器系统。然后通过解析树自动在构造函数中解析依赖项，这就是
    Nest.js 如何使用这种模式。
- en: In the next chapter we will see how Nest.js uses TypeORM, an Object Relational
    Mapping (ORM) that works with several different relational databases.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到 Nest.js 如何使用 TypeORM，这是一个与多种不同关系数据库一起工作的对象关系映射（ORM）。
