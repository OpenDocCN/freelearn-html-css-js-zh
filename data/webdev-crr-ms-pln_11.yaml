- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Reviewing Soft Skills (They Make You Hard to Deny)
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习软技能（它们让你难以否认）
- en: We’ve spent a lot of time talking about the technical side of web development,
    how to get a job in the field, and some developmental topics to help you grow
    your career. But there’s another set of things that you need to be aware of to
    enjoy a fruitful career. These are things we call soft skills.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经花了很多时间讨论网络开发的各个方面，如何在这个领域找到工作，以及一些有助于你职业成长的发展话题。但还有另一组你需要意识到的事情，以便享受一段富有成效的职业生涯。这些就是我们所说的软技能。
- en: What are soft skills? These are things such as your attitude, how to communicate
    with others effectively, socializing appropriately with co-workers, continuing
    the growth of your technical knowledge, and software development methodologies.
    These are things that aren’t technical in nature and that you typically don’t
    learn in books or classrooms. You tend to learn them from the examples of others,
    and sometimes by trial and error. My goal is, hopefully, to remove as much of
    the error from that equation as possible!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是软技能？这些包括你的态度、如何有效地与他人沟通、与同事适当社交、持续增长你的技术知识以及软件开发方法。这些不是技术性质的东西，你通常不会在书籍或课堂上学习它们。你往往是从他人的例子中学习，有时是通过试错。我的目标是，希望尽可能多地从那个方程式中消除错误！
- en: Soft skills will not only help you get hired and be a good employee, but they
    also are vital to advancing your career. Even the best technicians will tend to
    plateau at some point in their career development if they lack soft skills. These
    skills become more important as you climb the ladder, but they’re always valuable,
    right from rung one!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 软技能不仅能帮助你获得工作并成为优秀的员工，而且对事业发展至关重要。即使是最优秀的技术人员，如果缺乏软技能，也可能会在职业发展的某个阶段停滞不前。随着你攀登职业阶梯，这些技能变得越来越重要，但它们始终很有价值，从第一级开始就是如此！
- en: 'In this chapter, we’ll cover the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: There’s no “I” in “team”
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队中无“我”
- en: Learning never stops
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习永无止境
- en: Moving beyond smoke signals with good communication skills
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超越烟雾信号，用良好的沟通技巧
- en: Exploring the Agile software development methodology
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索敏捷软件开发方法
- en: There’s no “I” in “Team”
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 团队中无“我”
- en: 'I can boil this entire section down to just seven words:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以把整个这一节简化成七个字：
- en: '*Be someone people want to* *work with.*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*成为人们愿意* *与之共事的人*。'
- en: That sounds simple, and guess what? It actually *is* simple! Of course, simple
    doesn’t necessarily mean easy. But let’s talk about the simple part first.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来很简单，猜猜看？实际上*确实*很简单！当然，简单并不一定意味着容易。但让我们先来谈谈简单的那部分。
- en: Being someone people want to work with means many things, but primarily it means
    being someone friendly and helpful, someone who can be relied on to get the job
    done and do so with a pleasant demeanor. However, this doesn’t automatically mean
    you have to be an outgoing, gregarious person. No; you can be quiet and reserved
    but still be seen as someone friendly to interact with.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 成为人们愿意与之共事的人意味着很多，但主要意味着成为一个友好且乐于助人的人，一个可以信赖的人，能够愉快地完成任务。然而，这并不意味着你必须是一个外向、好交际的人。不；你可以保持安静和内向，但仍然被视为一个友好的人可以与之互动。
- en: During the interview process, it’s important to keep this in mind because, at
    that point, you’re trying to sell yourself. One of the things you will be judged
    on is whether you seem like someone who knows how to work well with others. This
    is the cultural fit aspect of the interview. We almost always have to work with
    others, so it makes sense that we would want to enjoy doing so, or at the very
    least not mind doing so. Therefore, you must make a good impression during an
    interview.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在面试过程中，这一点很重要，因为那时你正在尝试推销自己。你将被评判的一个方面是，你是否看起来像知道如何与他人良好合作的人。这是面试的文化适应方面。我们几乎总是需要与他人合作，所以我们会希望享受这样做，或者至少不介意这样做。因此，你必须在面试中留下好印象。
- en: In particular, make sure you smile most of the time, look people in the eye
    when you speak to them, pay them the attention they deserve given that they are
    effectively there to judge you, and generally stay in the moment with them. You
    want to be attentive and not distracted, and you should answer questions with
    enthusiasm.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尤其要注意，大部分时间要保持微笑，与人交谈时看着他们的眼睛，给予他们应得的关注，因为他们实际上是在评判你，并且通常与他们保持当下。你想要的是专注而不是分心，你应该以热情回答问题。
- en: Of course, this all applies after you’ve gotten the job too! You have to remember
    that, as the saying goes, *there is no “I” in “team”*, and part of that means
    ensuring you are making others comfortable around you. Never bring your work home
    because that can impact your home life, and by the same token, don’t bring your
    personal problems to work. People don’t usually appreciate someone who dumps all
    their problems on them in the office.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这一切在你得到这份工作之后也同样适用！你必须记住，正如俗话所说，“团队中没有‘我’”，这意味着你需要确保你周围的人感到舒适。永远不要把工作带回家，因为这可能会影响你的家庭生活；同样，也不要把个人问题带到工作中。人们通常不喜欢有人把所有问题都推给他们。
- en: One of the best ways to be seen as a team player is to be someone who can help
    others whenever and however you can. Let’s touch on that a bit.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 被视为团队玩家的最好方式之一是，无论何时何地，你都能帮助他人。让我们稍微谈谈这一点。
- en: Helping where you can
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在你能帮助的地方帮助
- en: Being a team player, of course, is more than just being a friendly face. Always
    be the person that people can come to for help and who is willing to give their
    time to assist. It’s sometimes hard to remember that if you help someone get their
    work done, then you’ve still performed a service to your employer. Of course,
    there is a balance that needs to be struck because we all have our own tasks to
    accomplish, so you must be careful not to give *too* much of yourself.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，做一个团队玩家不仅仅是做一个友好的面孔。始终是人们可以寻求帮助并愿意花时间协助的人。有时候很难记住，如果你帮助某人完成工作，那么你仍然为雇主提供了服务。当然，我们需要找到一个平衡点，因为我们都有自己的任务要完成，所以你必须小心不要给予自己太多。
- en: 'At first, it’s natural that you may not have much to offer others who have
    more experience. But you’d be surprised how just being friendly and approachable
    can result in people coming to you for help. And it makes sense: if you know that
    the curmudgeonly guy in the corner probably has the answer, you might still prefer
    to take a little more time working through a problem with someone more junior
    because that guy is just not pleasant to interact with.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，你可能没有太多可以提供给经验更丰富的人。但你会惊讶地发现，仅仅友好和可接近就能让人们来寻求帮助。这是有道理的：如果你知道角落里那个脾气暴躁的人可能知道答案，你可能会更愿意花更多时间与资历较浅的人一起解决问题，因为那个人并不容易相处。
- en: But also remember that just because you may not know as much doesn’t automatically
    mean you can’t help. Sometimes, it’s just that second set of eyes changing your
    perspective a little bit that is what you need to solve a problem. And even then,
    remember our discussion of rubber duck debugging and Stack Overflow in [*Chapter
    10*](B18315_10.xhtml#_idTextAnchor259)? Sometimes just being there to listen to
    someone explain a problem is all they need to figure it out on their own, so you
    will have done them a service just by being a good listener!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但也要记住，即使你可能不知道得太多，这并不意味着你不能帮助。有时候，只是那第二双眼睛稍微改变一下你的视角，这就是你解决问题所需要的。即使如此，也要记住我们关于橡皮鸭调试和第10章中Stack
    Overflow的讨论？有时候，仅仅是在那里听某人解释问题，就是他们自己解决问题所需要的，所以你只是通过做一个好的倾听者就为他们提供了帮助！
- en: Of course, it’s not always about just listening; sometimes you have to give
    feedback. How you do that is part of being a good teammate too.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这不仅仅是关于倾听；有时候你也需要给予反馈。你如何做这一点也是成为一个优秀团队成员的一部分。
- en: Being kind when being critical
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在批评时保持善良
- en: Eventually, in your career, you’re not going to have any choice but to be critical
    of someone. More precisely, you’ll need to be critical of their work. When this
    time comes, you will most likely have had others who have been critical of your
    work, and if you have, keep how you felt in mind. Was that person able to deliver
    the criticism constructively and kindly? Hopefully yes because that’s the goal.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，在你的职业生涯中，你将不得不对某人进行批评。更确切地说，你将需要批评他们的工作。当这一时刻到来时，你很可能已经有人批评过你的工作，如果你有，记住你的感受。那个人能否以建设性和友好的方式提出批评？希望如此，因为这就是目标。
- en: There is, unfortunately, a common attitude amongst many technical people that
    says being blunt is preferred and if someone takes offense they need to just toughen
    up. I, for one, very much disagree with this. Being *honest* is, of course, supremely
    important. But being honest doesn’t mean being harsh, or at least it shouldn’t.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 很不幸，许多技术人员中存在一种常见的态度，认为直言不讳是首选的，如果有人感到冒犯，他们只需要变得更坚强。至少对我来说，我非常不同意这种观点。诚然，诚实至关重要。但诚实并不意味着刻薄，至少它不应该这样。
- en: Take care with the words you choose. Rather than saying “This class structure
    doesn’t make sense”, you might say something like “Ah, I see what you’re doing
    here, and why you chose to do things this way, but I wonder, have you considered
    doing X instead?” That expresses your concern with their work while not being
    as hard-edged. Of course, it should be obvious that you should never say something
    such as “This class structure is stupid”, but most people get that much right.
    It’s the more subtly harsh language that is trickier to pick out and avoid, but
    staying in the moment and concentrating on what you’re saying and how is the way
    to accomplish that.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细选择你的用词。与其说“这个课程结构没有意义”，你可以说些像“啊，我明白了你在这里的意图，以及你为什么选择这样做，但我想知道，你有没有考虑过用X来做？”这样的话语表达了你对他们的工作的担忧，同时又不那么尖锐。当然，你应该很明显地知道，你永远不应该说出“这个课程结构很愚蠢”这样的话，但大多数人都能做到这一点。更微妙、更严厉的语言更难识别和避免，但保持当下，专注于你所说的话和方式，是达到这一目标的方法。
- en: You may sometimes get it wrong. If that happens, don’t hesitate to apologize,
    whether immediately or later if it takes you some time to realize your mistake,
    which is something else to discuss.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你有时可能会出错。如果发生了这种情况，不要犹豫，立即或稍后（如果你需要一些时间来意识到你的错误，这将是另一个话题）道歉。
- en: Taking responsibility
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 承担责任
- en: Almost nothing frustrates me more than when I see a member of my team not taking
    responsibility for their actions, especially their mistakes. That’s just not professional
    in my eyes and might even be considered a sign of immaturity. No one enjoys admitting
    they made a mistake, but that’s what responsible, adult professionals do.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎没有什么能比我看到我的团队成员不承担他们的行为责任——尤其是他们的错误——更让我感到沮丧的了。在我看来，这根本不专业，甚至可能被视为不成熟的表现。没有人喜欢承认自己犯了错误，但这就是负责任、成熟的职业人士所做的事情。
- en: When you do inevitably make mistakes—and believe me, we *all* make them—you
    should own them. Stand up, say “Yes, I made this mistake”, and then formulate
    a plan to correct the mistake. This plays into the need for people to rely on
    you. Relying on people who make mistakes and own them is easy, but relying on
    people who shirk responsibility is impossible.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当你不可避免地犯错——相信我，我们**所有人**都会犯错——你应该承担责任。站起来，说“是的，我犯了错误”，然后制定一个纠正错误的计划。这满足了人们依赖你的需求。依赖那些犯错并承担责任的人是容易的，但依赖那些推卸责任的人是不可能的。
- en: Here, too, is another place where there is a fine line you must walk. There
    are obviously times when you get things wrong due to circumstances you couldn’t
    anticipate or even the actions of others, and expressing those things is a valid
    thing to do, but it can be seen as trying to side-step responsibility. The best
    advice I can give here is that it’s okay to say “Yes, I got X wrong, but it’s
    because of factors Y and Z” as long as you follow that with “but it doesn’t matter
    because here’s what I’m going to do to correct the situation”. That tells people
    that yes, maybe you didn’t perform perfectly, but there were external factors.
    And regardless, *you* are going to take the responsibility for fixing the situation.
    That demonstrates that you don’t put yourself above the team and can be counted
    on.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你也需要走一条细线。显然，有时你会因为无法预见的情况或他人的行为而犯错，表达这些是合理的事情，但这也可能被视为试图逃避责任。我能给出的最好建议是，只要你在后面跟着说“是的，我犯了X错误，但这是因为Y和Z因素”，这就是可以接受的。这告诉人们，是的，也许你的表现并不完美，但存在外部因素。而且无论如何，**你**将承担起纠正情况的责任。这表明你不会把自己置于团队之上，并且可以信赖。
- en: Another thing that makes people enjoy working with you is not waiting around
    for things to happen but instead making them happen yourself by being proactive.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个让人们愿意与你一起工作的原因是，你不是等待事情发生，而是通过主动行动自己让事情发生。
- en: Being proactive
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主动
- en: 'My wife, a professional chef, has a saying: “If you have time to stand around,
    then you have time to clean.” That works well in a kitchen, where keeping a clean
    environment is a big concern (a health concern for all, in fact!), but with a
    little tweaking, it works just as well in a web development context!'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我的妻子，一位职业厨师，有一句话：“如果你有时间闲站着，那么你就有时间打扫。”这在厨房里很适用，因为保持干净的环境是一个大问题（实际上，对所有的人来说都是一个健康问题！），但稍作调整，它同样适用于网络开发环境！
- en: Basically, what it means in that context is that you can either be the type
    of person who sits around waiting for someone to tell you what to do and what
    to build or you can be proactive and look for opportunities yourself and dive
    in.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个背景下，这意味着你可以选择成为那种坐着等待别人告诉你该做什么、该建造什么的人，或者你可以主动寻找机会，并积极投入其中。
- en: Maybe you can spend some time cleaning up your CI/CD configuration files. Or
    perhaps you could write up some documentation about the configuration parameters
    that an application you support has. Or you might look at some code that isn’t
    written very well and **refactor** it, where refactor means to rewrite it so it’s
    better (cleaner, simpler, more robust) without changing its functionality. You
    might look at optimizing the images used on your website to improve loading speed
    or you might implement an administrative function to be able to record errors
    that occur better.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你可以花些时间清理你的CI/CD配置文件。或者也许你可以编写一些关于你支持的应用程序配置参数的文档。或者你可能查看一些写得不太好的代码，并对其进行**重构**，这里的重构意味着重写它，使其更好（更干净、更简单、更健壮），而不改变其功能。你可能查看优化网站上使用的图片以提高加载速度，或者你可能实现一个管理功能，以便能够更好地记录发生的错误。
- en: The point isn’t specifically what you do, it’s simply the idea that you should
    look around, see what needs to get done, and then do it, or at the least, *offer*
    to do it. It may not always be the best idea to just go off and do a bunch of
    work on your own, but you can certainly raise your hand and say “Hey, it looks
    like we should do X and I have some free time right now, so can I go do it?”.
    Get buy-in from your senior people to be safe, but you’ll find most people are
    very receptive to such requests (or else they’ll redirect you to higher-priority
    work, which is just as good).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 重点不在于你具体做什么，而仅仅是这样一个想法：你应该四处看看，看看有什么需要完成的事情，然后去做，或者至少，*提出*去做的意愿。不一定总是最好的主意就是独自去做一堆工作，但你当然可以举手说“嘿，看起来我们应该做X，我现在有些空闲时间，我可以去做吗？”。为了安全起见，你可以从你的上级那里获得支持，但你很快会发现，大多数人对于这样的请求都非常开放（否则他们会将你引导到更高优先级的工作，这同样很好）。
- en: Most people appreciate people who don’t simply wait for things to happen and
    to be told what to do because it removes load from them, both in terms of getting
    things done and also in terms of them having to figure out what you should work
    on. To be sure, you *will* have idle time sometimes, and obviously, in most situations,
    you’ll have someone directing your work. But, as the saying goes, idle hands are
    the devil’s playground. So, always be looking for ways to fend off that horned
    critter and make yourself useful and productive to the team when time allows.
    It’s a sure way to engender positive feelings toward you.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人都欣赏那些不简单地等待事情发生和被告知该做什么的人，因为这可以减轻他们的负担，无论是完成任务还是确定他们应该做什么。当然，你有时会有空闲时间，显然，在大多数情况下，会有某人指导你的工作。但，正如俗话所说，闲着的手是魔鬼的游乐场。所以，当有时间的时候，总是寻找方法来抵御那只长角的生物，让自己对团队有用和高效。这是赢得人们对你积极感情的一种可靠方式。
- en: 'Of course, hardly any of this matters without one last consideration: honesty.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果没有最后一点考虑：诚实，那么几乎这一切都没有意义。
- en: Being honest, always
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总是诚实，这是不变的真理。
- en: 'Earlier, I mentioned criticism and how some people are very blunt and direct
    when giving it. I spoke about how this can be detrimental to team cohesiveness
    because it can rub people the wrong way. But at the core of the harshness is a
    good principle: honesty. While it’s true that being overly blunt can land you
    in a situation where you start being unkind, honesty is a quality that should
    in general be valued at all times.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我提到了批评，以及有些人给出批评时非常直率和直接。我谈到了这可能会损害团队凝聚力，因为它可能会让人感到不舒服。但残酷的本质中有一个好的原则：诚实。虽然过于直率可能会让你陷入不友善的境地，但诚实是一种在任何时候都应该被重视的品质。
- en: 'Of course, you should never under any circumstances outright lie; that much
    I would hope is obvious! You may think you’re protecting yourself with a lie,
    but all you’re really doing is ensuring that you’ll never be trusted if found
    out. You’re also not giving your teammates the information they need to address
    a situation properly, which tends to have a snowball-rolling-downhill effect:
    the problem becomes worse with time.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在任何情况下，你都不应该直接撒谎；这一点我希望是显而易见的！你可能认为你在用谎言保护自己，但你所做的实际上只是确保如果你被发现，你将永远不会被信任。你也没有给你的队友提供他们需要的信息来正确处理情况，这往往会产生滚雪球效应：随着时间的推移，问题会变得更糟。
- en: 'Also remember, as the famous Captain Jean-Luc Picard of *Star Trek: The Next
    Generation* said: “A lie of omission is still a lie.” There will be times when
    you have to deliver bad news to higher-ups, and you may be reluctant to do so
    because you know that, unfortunately, sometimes the messenger gets shot, as the
    saying (sort of!) goes. Still, being a responsible team player means delivering
    that news so that decision-makers have all the information they need to make decisions.
    But again, learning to soften the blow can be very helpful. Telling a manager
    that a project is at risk of failure may be accurate, but it also may not be appreciated.
    Instead, you might say that while there are some delays, and the level of risk
    to the project has risen, steps are being taken to address that risk. As long
    as that statement is true, that may come across a bit better.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 还要记住，正如《星际迷航：下一代》中著名的船长让-吕克·皮卡德所说：“遗漏的谎言仍然是谎言。”有时你必须向高层传达坏消息，你可能不愿意这样做，因为你知道，不幸的是，有时传信者会受到惩罚，正如俗话（某种程度上！）所说。然而，作为一个负责任的团队成员意味着传达这些消息，以便决策者拥有他们做出决策所需的所有信息。但再次强调，学会减轻打击可能会非常有帮助。告诉经理项目有失败的风险可能是准确的，但可能不会受到欢迎。相反，你或许可以说，虽然有一些延误，项目面临的风险水平有所上升，但正在采取措施应对这一风险。只要这个声明是真实的，这可能听起来会更好一些。
- en: But there may also be situations where the blow can’t really be softened because
    the reality of the situation doesn’t allow it. For example, you may simply have
    to tell the manager that there’s no way the project can be accomplished on time
    and there’s nothing that can be done to avoid that. This certainly isn’t an easy
    thing to tell someone in charge, but another aspect of being a team player and
    taking responsibility is “speaking truth to power”, as the saying goes. You just
    have to step into the breach, deliver the news, and perhaps take your lumps for
    it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 但也可能存在一些情况，现实情况不允许你减轻打击。例如，你可能不得不告诉经理，项目无法按时完成，而且没有任何办法可以避免这种情况。这当然不是一件容易告诉负责人的事情，但作为团队的一员和承担责任的一个方面，正如俗话所说，“直言不讳”。你只需勇敢地站出来，传达消息，也许会因此受到责备。
- en: Even still, take care with how you word the news. It’s probably not going to
    help anyone if you just blurt out “This project is doomed!” even if it might be
    true. Instead, maybe say something like “Given our current timeline and resource
    levels, I can’t see a way we can bring this project to a successful completion”.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 即使如此，也要注意你表达消息的方式。如果你只是脱口而出“这个项目注定要失败！”即使这可能是真的，这可能对任何人都没有帮助。相反，你或许可以说些像“鉴于我们当前的时间表和资源水平，我看不出我们能够将这个项目成功完成的途径”这样的话。
- en: Being social without being TOO social
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在不过度社交的情况下保持社交
- en: 'The modern world is almost defined by social media. From X (formerly Twitter)
    to Instagram, Facebook, TikTok, and many others, nowadays people are far more
    open about their lives than ever before. This can be a wonderful thing: we get
    to be exposed to other perspectives and other life experiences, and, of course,
    we can very often be entertained!'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现代世界几乎是由社交媒体定义的。从X（前身为Twitter）到Instagram、Facebook、TikTok以及许多其他平台，如今人们比以往任何时候都更愿意分享自己的生活。这可以是一件美妙的事情：我们得以接触到不同的观点和其他的生活经历，当然，我们也很容易得到娱乐！
- en: But social media can also aid you in your job search and your career evolution.
    Sites such as LinkedIn can be a great help in finding jobs and building your network,
    as discussed in [*Chapter 9*](B18315_09.xhtml#_idTextAnchor219). But whether it’s
    LinkedIn, Snapchat, or another platform, you must take care with what you share
    because, as they say, the internet never forgets. What you put out there can be
    found by just about anyone, and if it’s not flattering it can have negative consequences
    for your job prospects as well as your career growth.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 但社交媒体也可以帮助你寻找工作和职业发展。正如在第[*第9章*](B18315_09.xhtml#_idTextAnchor219)中讨论的那样，LinkedIn等网站在寻找工作和建立人脉方面可以提供极大的帮助。但无论是LinkedIn、Snapchat还是其他平台，你必须小心分享的内容，因为正如人们所说，互联网永远不会忘记。你发布的内容几乎可以被任何人找到，如果它不是令人满意的，可能会对你的职业前景以及职业发展产生负面影响。
- en: 'There aren’t any solid rules here because it’s tough to know for sure what
    might be a problem for any other person. The best advice I think is to simply
    be careful and before you post anything at all, ask yourself: will this portray
    me in a positive light? Is this something I would ever want to have to explain
    to an employer? To be clear, not all companies look at your social media. But
    these days, you can never be sure who will, so it’s better to play it safe.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有明确的规则，因为很难确定什么可能对任何其他人构成问题。我认为最好的建议是简单地小心行事，在你发布任何内容之前，问问自己：这会让我看起来正面吗？这是我愿意向雇主解释的事情吗？明确来说，并不是所有公司都会查看你的社交媒体。但如今，你永远无法确定谁会查看，所以最好还是谨慎行事。
- en: Putting that aside, social media can also benefit you. For example, if you’re
    constantly interacting with other developers, even famous ones sometimes, you
    have the opportunity to learn and also possibly get a foot in the door. A positive
    interaction with someone can come back to aid you later when you’re hunting for
    a job. An honest, open, and productive debate about a specific technology could
    get you noticed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 把这些放在一边，社交媒体也可以为你带来好处。例如，如果你经常与其他开发者互动，甚至有时与知名开发者互动，你就有机会学习和可能获得一个机会。与某人的积极互动可以在你寻找工作时为你提供帮助。关于特定技术的诚实、开放和富有成效的辩论可能会让你引起注意。
- en: For some context, many, many years ago, I was approached to write my first book
    primarily because of conversations I had on social media. A publisher took notice
    of the way I was able to present myself, did some research on me, found my personal
    site with some articles I wrote, and thought I might make a good author. It wasn’t
    anything I pursued or honestly even considered, but you never know when a good
    social interaction might lead down an unexpected path.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供一些背景，很多很多年前，我被邀请写我的第一本书主要是因为我在社交媒体上的对话。一位出版商注意到了我展示自己的方式，对我进行了一些研究，发现了我的一些文章，认为我可能成为一名优秀的作家。这并不是我追求的，甚至我也没有真正考虑过，但你永远不会知道一次良好的社交互动可能会引导你走向一条意想不到的道路。
- en: Finally, remember that unless explicitly authorized, you are not speaking for
    your employer online. Take care in what you reveal about your work situation in
    discussions. It’s perfectly acceptable, for example, to debate someone about a
    given technology position online, and even to use your work experience in general
    terms, but it’s usually not a great idea to be overly critical of your employer
    online. Revealing too much specific information about how your company does things
    may not only be frowned upon but could conceivably turn into a legal issue. Your
    opinions are your own, and you have every right to express them, but where that
    opinion intersects with your work life is an area you have to be careful about.
    In general, the less said that can be tied to your employer explicitly, the better.
    If you *have* to involve something from work in a public discussion, generalize
    it as much as possible to get your point across without revealing anything your
    employer may not appreciate being revealed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，记住除非明确授权，否则你在网上不代表你的雇主发言。在讨论中透露关于你的工作情况时要小心。例如，在网上就某个技术职位与他人辩论，甚至用一般性术语使用你的工作经验，是完全可以接受的，但通常在网上过度批评你的雇主并不是一个好主意。透露太多关于公司如何运作的具体信息不仅可能会受到批评，还可能变成法律问题。你的观点是你自己的，你有权表达它们，但当你将这些观点与你的工作生活结合时，你必须小心。一般来说，越少明确与你的雇主相关联的言论越好。如果你*必须*在公开讨论中涉及工作内容，尽可能将其概括，以便传达你的观点，同时不透露任何你的雇主可能不希望公开的信息。
- en: The bottom line is to view social media as something that can be beneficial
    to you, but also as something you should be careful with. As with most things,
    striving for a balance between not being involved at all and over-sharing your
    entire life is probably a good general guideline. And remember that what you put
    out there could be seen by anyone at any time, so if you aren’t using social media
    properly then you might find your relationship with your team unexpectedly impacted
    negatively.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 核心原则是将社交媒体视为对你有益的事物，但同时也需要谨慎对待。就像大多数事情一样，努力在完全不参与和过度分享你整个生活之间找到平衡，可能是一个好的普遍准则。记住，你发布的内容可能随时被任何人看到，所以如果你没有正确使用社交媒体，你可能会发现你的团队关系意外地受到了负面影响。
- en: Another part of fitting in with a team involves continuing to grow your technical
    skills. Especially in this field, which changes rapidly, you’ll have no real choice
    but to learn continuously, so let’s discuss that now.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与团队融合的另一部分涉及继续提升你的技术技能。特别是在这个快速变化的领域，你将别无选择，只能持续学习，所以现在让我们来讨论一下。
- en: Learning never stops
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习永无止境
- en: All the way back in [*Chapter 1*](B18315_01.xhtml#_idTextAnchor015), I mentioned
    that “learning to learn” is a key requirement of this field. However, it’s not
    enough in most cases to count solely on your actual working hours to be sufficient.
    The simple fact is that the pace of change in software development, including
    web development, is such that if you take a step off the train even for a little
    while, you can fall behind in a hurry.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第一章*](B18315_01.xhtml#_idTextAnchor015)中，我提到“学会学习”是这个领域的关键要求。然而，在大多数情况下，仅仅依靠实际工作时间是不够的。简单的事实是，软件开发，包括网页开发，变化的步伐如此之快，以至于如果你稍微离开一段时间，你很快就会落后。
- en: Back when I started, websites were simple things. It was just plain old HTML,
    CSS, and JS. You could very easily view the source of any website and see how
    things were done. There wasn’t any real sort of tooling to learn, you just popped
    open Notepad or whatever text editor you had on hand and started hacking. That
    was in the early-to-mid 90s.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在我开始的时候，网站是简单的东西。它只是普通的HTML、CSS和JS。你可以很容易地查看任何网站的源代码，看看事情是如何完成的。没有真正的工具需要学习，你只需要打开记事本或你手头上的任何文本编辑器，然后开始修改。那是在90年代早期到中期。
- en: It didn’t take long before libraries like jQuery hit the scene, and then you
    had to learn those. Frameworks started to pop up, names such as Struts and **JavaServer
    Faces** (**JSF**). Though those were Java-specific and not frontend libraries,
    they changed the way you developed applications in both relatively small and very
    large ways. Again, keeping up was a challenge.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 不久之后，像jQuery这样的库出现了，然后你必须学习这些。框架开始出现，比如Struts和**JavaServer Faces**（**JSF**）。尽管这些是Java特定的，不是前端库，但它们在相对较小和非常大的程度上改变了你开发应用程序的方式。再次，跟上是一个挑战。
- en: At some point, probably around 2010, I’d say, there began to be an explosion
    of new frameworks, toolkits, libraries, developer tools, and all new ways to write
    both frontend and backend code (though the frontend has probably seen much more
    change overall). At some point, it became virtually impossible to know everything.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 大概在2010年左右，我可以说，新的框架、工具包、库、开发者工具和编写前端和后端代码的所有新方法开始爆炸式增长。在某个时候，几乎不可能知道一切。
- en: 'But you still have to kind of try and do exactly that: know everything!'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 但你仍然需要尝试并做到这一点：知道一切！
- en: Specializing versus generalizing
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 专业化与泛化
- en: Naturally, you won’t ever know everything. If you spend time learning React,
    then you might not know Angular very well (though they overlap a fair bit in terms
    of concepts, so knowing one at least gives you a leg-up on the other). If you
    focus on Node for your backend code, then you may not know Java as well. It’s
    always a trade-off because, unlike Doctor Strange in the Marvel cinematic universe,
    you probably don’t have the Eye of Agamotto to effectively give yourself infinite
    time to learn!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 自然，你永远不可能知道一切。如果你花时间学习React，那么你可能对Angular不太了解（尽管它们在概念上有相当大的重叠，所以至少了解一个会让你在另一个方面有优势）。如果你专注于Node作为后端代码，那么你可能对Java不太了解。这始终是一个权衡，因为，与漫威电影宇宙中的奇异博士不同，你可能没有阿加摩托之眼来有效地给自己无限的学习时间！
- en: Some developers are specialists. They will focus on one or two key technologies
    or technology areas (frontend versus backend is a common demarcation) and not
    know too much beyond that. That’s perfectly fine if you find yourself drawn to
    a given set of technologies. As long as they are in demand then you’ll probably
    be able to find gainful employment with that limited scope.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发者是专家。他们会专注于一个或两个关键技术或技术领域（前端与后端是一个常见的划分），并且对其他方面的了解不多。如果你发现自己对一组特定的技术感兴趣，这是完全可以接受的。只要它们有需求，你很可能能够找到有限范围内的有利可图的就业机会。
- en: Even if you do specialize, it’s still extremely helpful, even expected, that
    you’ll have *some* knowledge beyond your specialty. So, while you can focus on
    a few things, you still need to put some time into learning beyond those things,
    if for no other reason than to provide context for your specialties. That means
    you must figure out how to learn new things.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你选择了专业，仍然非常有帮助，甚至可以说是预期的，你将拥有一些超出你专业范围的知识。所以，虽然你可以专注于几件事，但你仍然需要花时间学习这些事情之外的东西，至少是为了为你的专业提供背景。这意味着你必须找出如何学习新事物。
- en: Other developers though—myself included—take a different tact and prefer to
    be generalists. We shoot for breath of depth, knowing a reasonable amount about
    many things, but not necessarily being an expert in any (in reality, we usually
    tend to have a few “favorites” that we are experts in, but even the skills we’re
    experts in might shift a bit over time as we use them more or less). This tends
    to be a better path in terms of employment simply because you won’t be artificially
    limiting which jobs you can apply to based on your skill set. Not only is it generally
    better for employment, but it also tends to be more enjoyable as long as you’re
    someone who appreciates the challenge and enjoys a broader mixture of tasks.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，其他开发者——包括我自己——采取不同的策略，更喜欢成为通才。我们追求广度和深度的结合，对许多事物有合理的了解，但并不一定是任何领域的专家（在现实中，我们通常倾向于有几个“最爱”，我们对这些领域是专家，但随着我们使用它们的程度不同，我们擅长的技能可能会略有变化）。在就业方面，这通常是一条更好的道路，因为你不会根据你的技能集人为地限制你可以申请的工作。这不仅对就业通常更好，而且只要你是一个欣赏挑战并享受更广泛任务混合的人，这也通常会更有趣。
- en: 'So, two things to keep in mind whether you see yourself as a generalist or
    a specialist are the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，无论你将自己视为通才还是专家，以下两点都是需要记住的：
- en: Learn enough about as much as possible to at least have context around as many
    topics as possible, but perhaps focus on a few if you want to be a specialist
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能多地学习尽可能多的知识，至少要了解尽可能多的主题的背景，但如果你想成为专家，可能需要专注于几个领域
- en: Figure out how you learn best and most efficiently
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找出你学习最好、最有效的方法
- en: That last point is important because we don’t all learn the same way or to the
    same level of efficiency for a given approach to learning. You have to figure
    out what your personal learning style is.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点很重要，因为我们对学习的方式和效率并不相同。你必须找出你个人的学习风格。
- en: Determining your learning style
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确定你的学习风格
- en: So, which way of learning works best and most efficiently for you? Is it as
    simple as reading technical news sites? Or maybe blog posts? What about self-directed
    learning sites? Do you need videos or is reading sufficient? Do you need hands-on
    experience or do you just “soak it all up like a sponge” just by seeing something?
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，哪种学习方法最适合你，效率最高？是简单地阅读技术新闻网站吗？或者可能是博客文章？自我导向的学习网站呢？你需要视频还是阅读就足够了？你需要动手经验，还是只需通过观察就能像海绵一样吸收知识？
- en: For me, I’ve learned that reading works much better for me than watching videos,
    for example, and then immediately experimenting with what I learned. I think that’s
    probably because I’m more in control of the pace when I read, but I’m not sure.
    The reason doesn’t matter so much, just the understanding of what (usually) works
    best for me does, but I had to figure that out over time.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，我发现阅读比我观看视频更有效，例如，然后立即实验我所学的知识。我认为这可能是因为我在阅读时更能控制节奏，但我不确定。原因并不重要，重要的是理解什么（通常）对我最好，但我必须随着时间的推移来找出这一点。
- en: 'While there are no easy, simple ways to figure out your learning style, there
    are some general pointers I can provide that should help:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然没有简单的方法来确定你的学习风格，但我可以提供一些一般性的建议，这应该会有所帮助：
- en: '*Experiment with different methods*: This is fairly obvious, but sometimes
    people think they already know their learning style and miss out on ones that
    actually work better for them. Give various learning formats a try. Read books
    or articles, watch tutorial videos on YouTube, attend workshops or classes, or
    simply do practical side projects, and then take note of how you feel during each
    method and the degree to which you retain the knowledge afterward.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*尝试不同的方法*：这一点相当明显，但有时人们认为他们已经知道了自己的学习风格，从而错过了对他们来说更有效的方法。尝试各种学习格式。阅读书籍或文章，观看YouTube上的教程视频，参加研讨会或课程，或者简单地做实际的项目，然后注意你在每种方法中的感受以及你在之后保留知识的程度。'
- en: '*Self-reflection*: After trying each method, reflect on a few key aspects.
    First, were you engaged the entire time or did your mind wander? Clearly, being
    able to remain engaged is necessary for proper learning. Next is retention. When
    you think back on what you (supposedly) learned, how much of it can you recall?
    The more, the better (though keep in mind that few people retain every detail,
    so be kind to yourself when you evaluate this). Were you able to take the knowledge
    and apply it practically by, perhaps, writing a small app with the new knowledge?
    The information we gain tends to not solidify in our brains until we use it, so
    this is a key question.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自我反思*：尝试每种方法后，反思几个关键方面。首先，你是否在整个过程中都保持专注，还是你的思绪飘忽不定？显然，能够保持专注对于有效的学习是必要的。接下来是记忆。当你回想起你（据说）学到了什么时，你能回忆起多少？记得越多越好（尽管要记住，很少有人能记住每一个细节，所以在评估时要对自己宽容一些）。你是否能够通过，比如，用新知识编写一个小应用程序等方式，将知识实际应用到实践中？我们获得的信息往往在我们使用它之前不会在我们的脑海中巩固，所以这是一个关键问题。'
- en: '*Feedback analysis*: If possible, get feedback on your progress as you learn
    with any given method. For example, if you’re learning by attending an online
    training course, see if there are assessments or quizzes to gauge your understanding
    as you go through it. If you’re actually learning, then you should generally be
    able to do well on such quizzes.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*反馈分析*：如果可能的话，在学习任何给定方法的过程中，对你的进度进行反馈。例如，如果你是通过参加在线培训课程来学习的，看看是否有评估或测验来衡量你在学习过程中的理解程度。如果你真的在学习，那么你应该通常能够在这样的测验中做得很好。'
- en: '*Comfort vs. challenge*: Identify if you prefer learning in a comfortable or
    challenging environment. Some people do much better in more relaxed, self-paced,
    solitary settings. But others need the structure and interaction of a classroom,
    for example, to be led through the work. Neither is inherently better than the
    other, it’s whatever works best for you.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*舒适与挑战*：确定你是否更喜欢在舒适或具有挑战性的环境中学习。有些人可能在更加轻松、自我调节、独立的环境中表现得更好。但其他人可能需要课堂的结构和互动，例如，通过课堂引导来完成工作。两者本身并没有本质上的优劣，关键是哪种最适合你。'
- en: '*Learn by doing*: Building stuff is kind of a key requirement in the web development
    field. Failing to do so will—unless you’re a truly exceptional learner—be required.
    As you learn and then build stuff, be it something real on the job or just a personal
    project, focus on how much you learn by doing versus just consuming information
    and then tailor your time accordingly.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实践学习*：构建东西是网络开发领域的一个基本要求。除非你是一个真正非凡的学习者，否则不这样做将是必要的。当你学习和构建东西时，无论是工作中的真实项目还是个人项目，关注通过实践学习而不是仅仅消费信息，然后相应地调整你的时间。'
- en: '*Community learning*: Not only are some people more comfortable in group settings
    but they also learn much better that way, the back-and-forth with others being
    of great aid to them. Seek out places where you can learn collaboratively, be
    that classrooms, online chat rooms, or discussion forums, and see if this sort
    of interaction boosts your learning.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*社区学习*：有些人可能更适应群体环境，而且通过这种方式学习效果更好，与他人之间的互动对他们的帮助很大。寻找你可以协作学习的地方，无论是教室、在线聊天室还是讨论论坛，看看这种互动是否能够提升你的学习效果。'
- en: '*Varying complexity*: See how your mind does with simple versus complex tasks
    and topics. Some people do better learning more straightforward topics one way,
    maybe by reading tutorials, but for more complex topics, they require hands-on
    experience for it to sink in.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*复杂度变化*：看看你的大脑在简单任务和主题与复杂任务和主题之间的表现如何。有些人可能通过阅读教程等方式学习更直接的主题效果更好，但对于更复杂的话题，他们需要亲身体验才能深入理解。'
- en: '*Consistency and adaptability*: Track how consistent you are with each method
    over time. You might start well with video tutorials but find that your interest
    wanes faster than with reading and you’ll need to adjust as you discover this.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*一致性及适应性*：追踪你随时间对每种方法的坚持程度。你可能一开始用视频教程学得很好，但发现你的兴趣衰减得比阅读要快，因此你需要根据发现的情况进行调整。'
- en: '*Time management*: Of course, none of this matters much if you can’t find the
    time for learning, so it’s worth considering how each learning style fits into
    your schedule. Uninterrupted learning in any form is almost always better than
    constant interruptions, so ensuring you can carve out enough uninterrupted time
    is critical.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*时间管理*：当然，如果你找不到学习的时间，那么这一切都没有太大意义，因此考虑每种学习风格如何融入你的日程安排是很值得的。任何形式的无间断学习几乎总是比不断被打断要好，因此确保你能抽出足够无间断的时间是至关重要的。'
- en: '*Feedback loop*: After choosing a method, revisit your choice periodically,
    don’t assume what once worked best for you still does. Also note that learning
    styles can evolve, and what works today might not be as effective tomorrow. I
    mentioned earlier that I learn best when I can read something, which I do alone,
    but there was a time when I thought I did better in a classroom setting.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*反馈循环*：在选择了方法之后，定期回顾你的选择，不要假设曾经对你最有效的方法现在仍然有效。同时也要注意，学习风格可能会演变，今天有效的方法明天可能就不那么有效了。我之前提到，我最好是在能独自阅读的时候学习，但曾经有一段时间我认为在课堂环境中我表现得更好。'
- en: Keep in mind too that it’s not uncommon to have a combination of learning style
    preferences rather than a single one that’s always best. You can certainly blend
    various styles to create a personalized learning strategy that keeps you both
    engaged and learning effectively.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 还要记住，拥有多种学习风格偏好而不是单一的最佳选择并不罕见。你当然可以混合各种风格，创建一个既能让你保持参与感又能有效学习的个性化学习策略。
- en: I’ve mentioned putting knowledge to use in a practical way a few times, and
    I want to expand on that a bit into the concept of personal projects.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经多次提到将知识以实用方式应用于实践，我想在此基础上进一步探讨个人项目这一概念。
- en: Building personal projects
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建个人项目
- en: One thing I always strongly encourage, regardless of whether you want to be
    a specialist or a generalist and regardless of your preferred learning style,
    is to spend some personal time focusing and experimenting on a pet project.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我总是强烈鼓励的一点，无论你想要成为专家还是通才，无论你偏好的学习风格如何，就是花一些个人时间专注于实验你的宠物项目。
- en: It doesn’t matter *what* you build, so long as you build *something*. However,
    when you choose a project, one definite requirement is that it is something that
    will hold your interest. For me, writing an app that calculates fuel compression
    ratios for cars wouldn’t hold my interest because I’ve never been a car guy. But
    one that catalogs my vintage video game collection would absolutely hold my interest
    from start to finish! Anything that will be a bit of a challenge without being
    a huge time sink because, after all, this is your personal time we’re talking
    about, and you should always treat that as precious.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你建造什么，只要你能建造出点什么。然而，当你选择一个项目时，一个明确的要求是，它必须是你感兴趣的东西。对我来说，编写一个计算汽车燃油压缩比的软件不会引起我的兴趣，因为我从未是汽车爱好者。但一个可以记录我的复古游戏收藏的项目，从开始到结束都会让我感兴趣！任何既能带来一点挑战又不会成为巨大时间陷阱的东西，因为毕竟，我们谈论的是你的个人时间，你应该始终将其视为宝贵。
- en: As well as choosing a project that you’re interested in, you need to choose
    something that is the right combination of difficult enough to be challenging
    but not so difficult that it will become frustrating. This, of course, can be
    tricky to figure out, especially early on when you don’t have a lot of experience
    to know when something with be difficult or not.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 除了选择你感兴趣的项目外，你还需要选择一个难度适中、既有挑战性又不会让你感到沮丧的项目。当然，这可能会有些棘手，尤其是在早期，你没有很多经验来判断某件事是否困难。
- en: Given that, I’m going to suggest one type of project that I always suggest and
    that I almost consider a magic bullet-type of project!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 既然如此，我将建议一种我总是推荐，几乎将其视为一种神奇子弹类型的项目！
- en: 'A magic type of personal project: games!'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一种神奇的个人项目类型：游戏！
- en: One unusual type of project I almost recommend to people is to write games.
    That sounds weird when most of us probably aren’t going to be professional game
    developers. But the reason is that having written so many myself, I understand
    what such a project brings to the table.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我几乎推荐给人们的另一种不同类型的项目是编写游戏。当大多数人可能不会成为专业游戏开发者时，这听起来可能有些奇怪。但原因是我自己编写了这么多游戏，我了解这样一个项目能带来什么。
- en: Writing a game requires you to touch on a great many topics in computer science,
    including algorithms, networking (depending on the type of game), AI, data structures,
    optimization, debugging, and so much more. When you make a game, regardless of
    the technology involved, you confront a lot of the same sort of problems you’ll
    confront on the job building any other software, website, or web app.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 编写游戏需要你涉及计算机科学中的许多主题，包括算法、网络（取决于游戏类型）、人工智能、数据结构、优化、调试等等。当你制作游戏时，无论涉及什么技术，你都会面临在构建任何其他软件、网站或网络应用时可能会遇到的大量相同类型的问题。
- en: Games can be written in any technology too, which makes them ideal for experimenting
    with something. I’ve written games in BASIC, C/C++, Java, Pascal, PHP, HTML/CSS/JS,
    React, and Vue. I even wrote a game in COBOL way back in high school!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏也可以用任何技术编写，这使得它们非常适合进行实验。我曾用BASIC、C/C++、Java、Pascal、PHP、HTML/CSS/JS、React和Vue编写过游戏。甚至在高中时，我还用COBOL编写过一款游戏！
- en: And perhaps the best thing about a game project is that games are, by design,
    fun! Therefore, shouldn’t they be fun to build too? Well, it turns out they are…
    or, at least, can be. As with any project, you must balance the challenge with
    not driving yourself crazy.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 也许游戏项目最好的事情就是游戏本身就是，按照设计，是乐趣！因此，它们在构建时也应该是有趣的，对吧？结果证明它们确实是……或者至少可以是。就像任何项目一样，你必须平衡挑战，不要让自己发疯。
- en: As a manager of mine once said, you don’t need to build the Taj Mahal right
    off the bat. This is true for a game project, or really any other kind of game.
    If you try to build World of Warcraft right away, you’re assuredly going to fail
    because that’s a highly complex game. But, if you first just build a game where
    all you do is walk around, well, that’s the foundation right there! You can then
    add enemies to fight, spells to cast, and whatever else your imagination dreams
    up, all on top of that foundation.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我的一位经理曾经说过，你不需要一开始就建造泰姬陵。这对游戏项目来说也是真的，或者对任何其他类型的游戏来说也是如此。如果你一开始就试图建造《魔兽世界》，你肯定会失败，因为那是一款高度复杂的游戏。但是，如果你首先只建造一个你只需四处走动的游戏，那么，这就是基础！你可以在那个基础上添加敌人来战斗，施放法术，以及你想象中的任何其他东西。
- en: Plus, a game project for the purpose of learning doesn’t need to be original,
    or even *good*! In fact, I often suggest to people to simply copy a game they
    like, preferably a simple one, or if they really like a complex one, then at least
    boil it down to its very basics to start. Go ahead and make a Frogger clone or
    Pac-Man rip-off that just uses squares and circles instead of real graphics. Even
    if it doesn’t look good, it can still be a fully functional game that you can
    learn from by building (of course, if you’re practicing your graphic design skills,
    then maybe you’ll want to spend some time on the graphics too).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了学习而进行的游戏项目不需要原创，甚至不需要*优秀*！事实上，我经常建议人们简单地复制他们喜欢的游戏，最好是简单的，如果他们真的喜欢复杂的，那么至少将其简化到最基本的部分开始。你可以尝试制作一个模仿Frogger或Pac-Man的游戏，只用方块和圆形代替真实图形。即使看起来不好，它仍然可以是一个完全功能性的游戏，你可以通过构建它来学习（当然，如果你在练习你的图形设计技能，那么也许你会在图形上花些时间）。
- en: As you work on a game though, think about the concepts you’re implementing and
    how they can relate to your day job. If you know you need to learn React for your
    job, then use React to build a game. If you know that you need to use Redux with
    React for state management then do that in the game too even if it might not be
    your first choice. In a way, make a game of building the game! Use the tools,
    technologies, and techniques you’ll need on the job to build the game too.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当你制作游戏时，考虑你正在实施的概念以及它们如何与你日常的工作相关。如果你知道你需要学习React来工作，那么就用React来构建游戏。如果你知道你需要使用Redux与React进行状态管理，那么即使在游戏中它可能不是你的首选，也要这样做。从某种意义上说，让游戏成为构建游戏的游戏！使用你将在工作中需要的工具、技术和技巧来构建游戏。
- en: Even if no one ever sees your game either, that’s totally fine. It can absolutely
    just be for you. And you may never play it yourself even. But again, it doesn’t
    have to be good or even fun in the end if you learn from the experience, and I
    promise you will learn from these types of projects, without even realizing it
    sometimes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有人看到你的游戏，那也完全没问题。它完全可以只为你自己。而且你可能甚至永远不会自己玩它。但再次强调，如果你从经验中学习，它最终不需要很好或很有趣，我保证你将从这些类型的项目中学习，有时甚至没有意识到。
- en: But maybe you *will* want to show someone. After all, you may rightly be proud
    of your work and what you learned from it and want to show it off. Interacting
    with other people is the realm of communication, which is another one of those
    soft skills we’re concerned with in this chapter, so let’s talk about that next.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 但也许你*会*想向某人展示。毕竟，你可能会正确地为自己的工作以及从中学到的东西感到自豪，并想炫耀一下。与他人的互动是沟通的领域，这也是我们在本章中关注的另一种软技能，所以让我们接下来谈谈这一点。
- en: Moving beyond smoke signals with good communication skills
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超越烟雾信号，用良好的沟通技巧
- en: Working as part of a team naturally means being able to communicate effectively,
    whether that be in written form or in person and whether it’s a design meeting,
    a presentation, or any other situations where we need to express ideas to others.
    When done well, it fosters cohesiveness in the team, which translates to better
    performance.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 作为团队的一员工作自然意味着能够有效地沟通，无论是书面形式还是面对面，无论是设计会议、演示还是任何其他我们需要向他人表达想法的情况。当做得好的时候，它会在团队中培养凝聚力，这转化为更好的表现。
- en: Some facets of good communication skills are relatively obvious. For example,
    keeping things professional in tone is something most people inherently understand.
    It’s perfectly acceptable to make jokes in a professional environment, but quoting
    material from the likes of Eddie Murphy, Andrew “Dice” Clay, Dave Chapelle, Richard
    Pryor, and Ricky Gervais will likely not be appropriate (even if you find it funny).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 良好沟通技巧的一些方面相对明显。例如，保持语气专业是大多数人天生就理解的事情。在专业环境中讲笑话是可以接受的，但引用像艾迪·墨菲、安德鲁“骰子”克莱、戴夫·查佩尔、理查德·普赖尔和里基·杰尔维斯这样的材料可能不太合适（即使你觉得很有趣）。
- en: 'Others, however, are a little harder to catch. Here are some key points to
    remember:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，其他方面可能稍微难以把握。以下是一些需要记住的关键点：
- en: '*Clarity and conciseness*: I’ll make an admission here: around the office,
    I’m known as the “long email” guy. I like to give full, complete explanations
    with as few assumptions about what the person I’m talking to knows. As a general
    concept, this isn’t a bad approach. However, brevity is also something that isn’t
    a bad approach. Communication, written or otherwise, should be done as clearly
    and as concisely as possible. People’s time is valuable, so you want to get to
    the point quickly. However, you must take care not to take this too far or you
    risk leaving out information people need. This is a skill I’m still working on
    myself!'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*清晰和简洁*：在这里我要坦白：在办公室里，我以“长邮件”著称。我喜欢给出全面、完整的解释，尽量减少对谈话对象所知内容的假设。作为一个一般概念，这并不是一个坏的方法。然而，简洁也是一种不错的方法。无论是书面还是其他形式的沟通，都应该尽可能清晰和简洁。人们的时间很宝贵，所以你希望快速切入要点。然而，你必须小心不要走得太远，否则你可能会遗漏人们需要的信息。这是我仍在努力提高的技能！'
- en: '*Active listening*: When speaking directly to someone, engage with them and
    what they’re saying without immediately jumping to conclusions or responses. This
    isn’t always easy because humans are emotional creatures and those emotions oftentimes
    get the better of our thinking brains. But, doing so will show respect to the
    person you’re talking to as well as usually leading to a deeper understanding
    for both parties about the issues or ideas being discussed.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*积极倾听*：当直接与某人交谈时，与他们以及他们所说的话互动，不要立即得出结论或做出回应。这并不总是容易，因为人类是情感动物，而那些情感往往会影响我们的思考大脑。但是，这样做会显示出你对谈话对象的尊重，以及通常会导致双方对讨论的问题或想法有更深入的理解。'
- en: '*Empathy and understanding*: Always practice empathy and understanding when
    engaging with others in any form! A big part of this is respecting the perspectives
    of others. Especially in today’s diverse workplaces, you have to constantly be
    trying to recognize where others are coming from and work to find common ground
    in discussions and problem-solving. Another big part of this is when people ask
    “stupid” questions. As the saying goes, the only stupid question is the one you
    don’t ask, and I agree with this wholeheartedly. Never be ashamed to ask what
    you think might be a stupid question, and conversely, be kind to others who ask
    them of you. Try to help as best you can, without judgment, even if of yourself!'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*同理心和理解*：在与他人互动的任何形式中，始终都要练习同理心和理解！这其中的一个重要部分是尊重他人的观点。特别是在今天多元化的工作场所，你必须不断地试图了解他人的立场，并在讨论和解决问题的过程中努力找到共同点。这其中的另一个重要部分是当人们提出“愚蠢”的问题时。俗话说，唯一愚蠢的问题是那个你没有问的问题，我完全同意这个观点。永远不要因为觉得自己可能问了一个愚蠢的问题而感到羞愧，相反，当别人向你提出这样的问题时，要友好地对待他们。尽你所能帮助他们，不要评判，即使是对自己也是如此！'
- en: '*Consistent and open communication*: Communication that is regular tends to
    be better because it fosters relationships between people. After all, communication
    is a skill like any other, so it requires practice to improve over time. It also
    helps to avoid misunderstandings, or more precisely, it allows misunderstandings
    to happen when the stakes aren’t as high and can be corrected more easily.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*一致性和开放性沟通*：定期的沟通往往更好，因为它促进了人与人之间的关系。毕竟，沟通就像其他任何技能一样，需要练习才能随着时间的推移而提高。它还有助于避免误解，或者更确切地说，当风险不是很高且可以更容易地纠正时，它允许误解发生。'
- en: '*Written communication skills*: Specifically regarding written communication
    methods, such as emails, reports, and documentation, by their nature, you have
    time to do them right, so take advantage of this! Read and re-read what you write
    several times. Use whatever proofing tools are available to you and work to make
    it as direct and informative as possible. As novelists often say, don’t be afraid
    to kill your darlings. What that means is don’t be afraid to cut out words that
    aren’t bringing value as you re-read them. Just because you took the time to write
    them doesn’t mean they need to be there in the end!'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*书面沟通技巧*：具体到书面沟通方法，如电子邮件、报告和文档，由于它们的性质，你有时间把它们做好，所以利用好这个机会！多次阅读和重读你所写的内容。使用你所能获得的任何校对工具，并努力使其尽可能直接和富有信息量。正如小说家常说的，不要害怕“杀死你的宠儿”。这意味着，在你重读时，不要害怕删除那些没有带来价值的词语。仅仅因为花时间写了它们，并不意味着它们最终必须存在！'
- en: '*Non-verbal communication*: Always remember that not all communication is direct.
    Paying attention to body language and tone, both in yourself and others, can yield
    powerful insights. These can often convey more than words and are crucial in understanding
    the full context of a conversation. For example, if you are describing your approach
    to a coding problem and the person you’re talking to folds their arms across their
    chest, that *might* indicate that they are not receptive to what you’re saying.
    Body language is not an exact science though, so you can’t treat such a signal
    as an absolute, but given that cue, you might decide to alter your approach somewhat.
    There are entire books about body language that can provide tons of useful information.
    One top pick that you might consider is titled *The Definitive Book of Body Language*
    by Barbara Pease and Allan Pease.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*非言语沟通*：始终记住，并非所有的沟通都是直接的。注意自己的肢体语言和语调，以及他人的肢体语言和语调，可以产生强大的洞察力。这些往往能传达比言语更多的信息，并在理解对话的完整背景中至关重要。例如，如果你在描述你解决编码问题的方法，而与你交谈的人将双臂交叉抱在胸前，这可能表明他们对你所说的话不感兴趣。然而，肢体语言并不是一门精确的科学，所以你不能将这样的信号视为绝对的，但根据这个线索，你可能会决定稍微改变你的方法。关于肢体语言，有整本书可以提供大量有用的信息。你可以考虑的一本好书是芭芭拉·派斯和艾伦·派斯合著的《身体语言
    definitive 书》。'
- en: '*Feedback (both giving and receiving)*: Constructive feedback is essential
    for growth and improvement, and that goes both ways. Being open to receiving it
    helps you improve yourself obviously, and giving it in a way that is constructive
    and not personal is a key communication skill. Always remember to criticize ideas
    and not people. For example, saying “I’m not sure this approach will yield positive
    results” is a little better than “I’m not sure you chose the right approach here”
    because the former highlights the approach while the latter emphasizes the idea
    that someone made a mistake.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*反馈（给予和接收）*：建设性的反馈对于成长和改进至关重要，这双向都适用。愿意接受反馈显然有助于你自我改进，并以建设性和非个人化的方式给予反馈是关键沟通技能。始终记住要批评观点而不是人。例如，“我不确定这种方法会产生积极的结果”比“我不确定你在这里选择了正确的方法”要好一些，因为前者强调了方法，而后者强调了有人犯错的观念。'
- en: '*Conflict resolution*: No matter how hard you try, you will of course encounter
    disagreements with people sometimes, as well as people who just aren’t very pleasant
    to deal with. Handling such people with calmness and a focus on solutions rather
    than blame can maintain a positive work environment. Taking the high road is a
    skill all on its own that needs to be practiced because, again, we’re emotional
    creatures, and our first instinct is often to react emotionally. You have to practice
    fighting that reaction and keeping things intellectual and polite even when the
    other participant doesn’t reciprocate.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*冲突解决*：无论你多么努力，你当然有时会遇到与人的分歧，以及那些不太容易相处的人。以冷静的态度和关注解决方案而不是责备来处理这些人，可以维持积极的工作环境。走正道是一项需要练习的技能，因为，再次强调，我们是情感动物，我们的第一反应往往是情绪化地反应。你必须练习对抗这种反应，即使对方没有回应，也要保持理智和礼貌。'
- en: '*Cultural sensitivity*: In a global work environment—which is exceptionally
    common in the IT field—being aware of and sensitive to cultural differences in
    communication styles is vital. Interesting, I ran into this while writing this
    book. Though I''m American, Packt is not a U.S based company, so on a few occasions,
    I said things in a way that wasn''t quite clear to someone outside the U.S, or
    used pop culture references that didn''t quite translate. You have to always check
    yourself with things such as this, because while not being understood is one thing,
    you can easily offend someone who may have different life views and values, and
    that''s a much bigger issue.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*文化敏感性*：在全球化工作环境中——这在IT领域尤为常见——对沟通风格中的文化差异有所了解和敏感至关重要。有趣的是，我在写这本书的时候遇到了这个问题。尽管我是美国人，但Packt不是一家美国公司，所以有几回，我以一种对美国以外的人来说不太清楚的方式说话，或者使用了无法完全翻译的流行文化引用。你必须始终检查自己，因为虽然不被理解是一回事，但你很容易冒犯那些可能有不同生活观和价值观的人，这是一个更大的问题。'
- en: '*Proper utilization of communication channels and technologies*: Use communication
    tools effectively, whether it’s email, messaging apps, or good old-fashioned telephones.
    Always choose the technology that is appropriate for your needs. If you have a
    question that you don’t need an immediate answer to, then use email. If you do
    need an immediate answer but it’s not super-critical, a messaging app such as
    Microsoft Teams or Discord might be preferred. I think it’s reasonable to say
    that a lot of people these days prefer technologies other than talking on the
    phone a lot of the time, so reserve that for more critical situations (unless,
    of course, you know you’re calling someone who simply enjoys a little conversation,
    in which case it may be advantageous to engage that person to build rapport).'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*正确利用沟通渠道和技术*：有效地使用沟通工具，无论是电子邮件、消息应用还是传统的电话。始终选择适合你需求的技术。如果你有一个不需要立即回答的问题，那么使用电子邮件。如果你需要立即回答但不是特别关键，那么使用像Microsoft
    Teams或Discord这样的消息应用可能更受欢迎。我认为现在很多人更喜欢除了大量打电话之外的其他技术，所以将其保留在更关键的情况下（除非，当然，你知道你正在给某人打电话，这个人只是喜欢一点对话，在这种情况下，与这个人建立联系可能是有利的）。'
- en: '*Tailor your message*: Always keep your audience in mind! The way you communicate
    with technical people is often not the same way you’d communicate with a senior
    leader. For one thing, they have different concerns. A senior leader probably
    just needs the broad strokes of a problem and what the consequences of it not
    being corrected are, whereas technical people will need more detail to come up
    with solutions. And of course, if you’re writing a message to someone you have
    a more extensive personal relationship with, then you might be able to be a little
    less formal than someone else (but still within professional boundaries while
    on company time).'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*量身定制信息*：始终牢记你的受众！你与技术人员的沟通方式往往与与高级领导沟通的方式不同。首先，他们的关注点不同。高级领导可能只需要了解问题的概要以及未纠正的后果，而技术人员则需要更多细节来提出解决方案。当然，如果你在给与你有更广泛个人关系的人写信，那么你可能比其他人稍微不那么正式（但仍然在公司时间内保持专业界限）。'
- en: '*Continuous improvement*: Always look for ways to improve your communication
    skills. Take advantage of any sort of training your employer might offer, or just
    seek out YouTube videos from experts to get specific tips you can implement. No
    one is perfect—myself included, as I mentioned earlier—but the only constant for
    us all is the need to continuously evaluate and improve ourselves.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*持续改进*：始终寻找提高你沟通技巧的方法。利用雇主可能提供的任何培训机会，或者只是寻找YouTube上的专家视频，以获取你可以实施的特定建议。没有人是完美的——包括我，正如我之前提到的——但我们所有人唯一不变的是需要不断地评估和改进自己。'
- en: One last thing I want to touch on is somewhat of a general thought that I’ve
    touched on a little bit already but that probably deserves a little more focus,
    and that’s the marketplace of ideas.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后我想提到的一点是，这是一个相对普遍的想法，我已经稍微提到过，但可能需要更多的关注，那就是思想市场。
- en: Shopping in the marketplace of ideas
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在思想市场中购物
- en: The **marketplace of ideas** is a metaphor that describes the need for open,
    public discourse about ideas. The goal is to determine the truth and value of
    different ideas, ideologies, and perspectives. We’re not talking about truth in
    the sense of a court of law; instead, it’s the notion that people will often have
    conflicting ideas and it’s our job to vet them openly and honestly, discard the
    ones deemed to be of no value, keep the ones deemed to have high value, or, as
    often winds up being the case, blend ideas into something new on the fly.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**思想市场**是一个隐喻，描述了关于思想进行开放、公共讨论的需求。目标是确定不同思想、意识形态和观点的真实性和价值。我们不是在谈论法律法庭意义上的真实；相反，这是指人们经常会持有相互冲突的观点，我们的任务是公开、诚实地审查它们，摒弃被认为没有价值的思想，保留被认为具有高价值的思想，或者，正如经常发生的那样，在飞行中将思想融合成新的东西。'
- en: The idea behind the marketplace of ideas demands that people be able to express
    themselves without fear of being ridiculed and that the ideas expressed will be
    debated and challenged without undue restrictions. In the end, those ideas that
    the group deems to be the most “truthful”—where “truth” is defined as the idea
    that most of the group agrees with—will be seen as most beneficial and will prevail
    over others, and this is a very natural and productive way to accomplish both
    technical and non-technical tasks.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 思想市场的理念要求人们能够毫无恐惧地表达自己，而且表达的思想将不受不适当的限制地进行辩论和挑战。最终，那些群体认为最“真实”的思想——其中“真实”被定义为大多数群体都认同的思想——将被视为最有益的，并将战胜其他思想，这是一种非常自然且富有成效的方式来完成技术和非技术任务。
- en: To give a somewhat concrete example, let’s say you’re starting a new project
    and you’re trying to determine which frontend framework to use. You may be advocating
    for React, while someone else is advocating for Angular. You would state your
    position and explain why you feel React is the best choice. Perhaps you’ll make
    arguments about its user base being larger than Angular’s, that there are more
    developer resources available to support it, and that its comparative simplicity
    will make developing the project faster. The Angular advocate may debate those
    points, both in absolute terms and in relation to Angular itself.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了举一个相对具体的例子，假设你正在启动一个新项目，你正在尝试确定使用哪个前端框架。你可能支持React，而另一个人可能支持Angular。你会阐述你的立场并解释为什么你认为React是最好的选择。也许你会提出一些论点，比如它的用户基础比Angular大，有更多开发者资源支持它，以及它的相对简单性将使项目开发更快。Angular的支持者可能会就这些论点进行辩论，无论是绝对意义上还是与Angular本身相比较。
- en: Part of the debate in the marketplace, so to speak, may involve both of you
    going off and creating a prototype to demonstrate your preferred approach. I was
    in a situation like that a long time ago, where I was advocating for an approach
    that used some then-new technologies including AJAX and a service-based architecture.
    These ideas weren’t common yet, but I saw the utility in them. However, another
    architect at the time preferred a tool called Flex, a now-defunct product of Adobe.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种意义上，思想市场的辩论可能包括你们两个都去创建一个原型来展示你偏好的方法。我以前就遇到过这种情况，当时我支持一种使用当时一些新技术的方法，包括AJAX和基于服务的架构。这些想法当时还不常见，但我看到了它们的实用性。然而，当时的另一位架构师更喜欢一个叫做Flex的工具，这是Adobe的一个现在已经停止生产的产品。
- en: We wrote up a document to describe our approach and our reasoning behind it.
    We then spent a few days building a demonstrator app using our chosen technologies.
    Eventually, we all got together—myself, the other architect, some other developers,
    and our manager—and we presented what we had. There was some debate in the room
    that day, but eventually, not to toot my own horn, my approach won out, and since
    then it’s been the standard way of developing apps both at my company and outside
    (and Flex went the way of the Dodo!).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了一份文档来描述我们的方法和背后的理由。然后我们花了几天时间使用我们选择的技术构建了一个演示应用程序。最终，我们所有人都聚在一起——我自己、另一位架构师、一些其他开发人员和我们的经理——我们展示了我们的成果。那天房间里有些争论，但最终，不说自吹自擂，我的方法胜出，从那时起，它就成了我们公司以及外部开发应用程序的标准方式（而Flex则走向了灭绝！）。
- en: That situation demonstrates how the marketplace of ideas worked. Myself and
    the other architect were never arguing heatedly, we were never attacking each
    other. We certainly would point out the flaws in each other’s approaches and how
    our own had benefits over the other, but that’s the way it’s supposed to work.
    Everyone got a chance to express their ideas and defend their point of view, but
    eventually, the marketplace decided which had more value.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况展示了思想市场是如何运作的。我和另一位架构师从未激烈争论，我们从未互相攻击。我们当然会指出对方方法的缺陷以及我们自己的方法如何优于对方，但这就是它应该工作的方式。每个人都得到了表达自己想法和捍卫自己观点的机会，但最终，市场决定了哪个更有价值。
- en: None of this works without mutual respect, the ability to acknowledge that your
    own ideas aren’t the only ones, and the willingness to say that they might not
    even be the best. There isn’t any special skill to be learned here, it’s simply
    having a certain level of intellectual maturity. No one typically enjoys being
    wrong or having their ideas deemed less worthy than others, but that’s the way
    the world works, and you must accept it. The best advice I can offer is to try
    your best to keep emotion out of the proceedings. That, and try not to get emotionally
    attached to your ideas. As long as everyone is on a level playing field and comes
    at things the same way, then, as mentioned earlier, you’ll be “attacking” things
    and not people, which generally allows most people to keep their emotions in check.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 没有任何东西可以在没有相互尊重、承认自己的观点不是唯一，以及愿意说它们可能甚至不是最好的情况下工作。这里没有需要学习的特殊技能，只是拥有一定程度的智力成熟度。没有人通常喜欢犯错或发现自己的观点不如他人，但这就是世界运作的方式，你必须接受它。我能给出的最好建议是尽量保持情绪不参与其中。还有，尽量不要对你的想法产生情感依恋。只要每个人都站在同一起跑线上，以相同的方式处理事情，那么，如前所述，你将会“攻击”事物而不是人，这通常允许大多数人控制自己的情绪。
- en: The final topic I want to discuss in the realm of soft skills is a bit of a
    stretch, honestly, but I think it dovetails from the previous topics, certainly
    from communication skills. That topic is development methodologies, but primarily
    something called Agile.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我想在软技能领域讨论的最后一个话题可能有些牵强，但说实话，我认为它与之前的话题紧密相连，尤其是从沟通技巧开始。这个话题是开发方法，但主要是被称为敏捷（Agile）的东西。
- en: Exploring the Agile software development methodology
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索敏捷软件开发方法
- en: When we develop any kind of software, including websites, we use what’s known
    as a **methodology**. That’s a fancy way of saying a defined approach to how we’re
    going to get our work done (because the alternative is to just start hacking code
    together randomly, and that rarely turns out well). Today, the most popular development
    methodology is something called Agile.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开发任何类型的软件，包括网站时，我们使用所谓的**方法**。这是一个华丽的说法，意思是说，我们有一个定义好的方法来完成我们的工作（因为另一种选择就是随意地开始编写代码，这很少会有好结果）。今天，最受欢迎的开发方法是被称为敏捷的方法。
- en: But before we can talk about Agile, you have to have some idea of what came
    before—the thing that made people realize Agile might be a better approach—and
    that is primarily another methodology called **Waterfall**.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们可以谈论敏捷之前，你必须对之前的情况有所了解——让人们意识到敏捷可能是一个更好的方法的东西——那就是另一个被称为**瀑布（Waterfall）**的方法。
- en: 'Going over the falls in a barrel: The Waterfall methodology'
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在桶中翻过瀑布：瀑布方法
- en: In the Waterfall methodology, before you start building anything, you spend
    a lot of time designing. This involves spending a lot of time talking to clients,
    discovering their needs, and critically writing up documents that describe exactly
    what’s going to be built and how. In fact, documentation is one of the main things
    that differentiates Waterfall from Agile.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在瀑布方法中，在开始构建任何东西之前，你会花费大量时间进行设计。这涉及到花费大量时间与客户交谈，了解他们的需求，并批判性地编写描述将要构建的内容及其构建方式的文档。实际上，文档是区分瀑布模型和敏捷方法的主要因素之一。
- en: 'In Waterfall, you’ll create documents such as the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在瀑布模型中，你会创建以下类型的文档：
- en: '**Business requirements document** (**BRD**): This is a document that outlines
    the business objectives of the project at a high level. This type of document
    is written in non-technical terms as it’s concerned with what the thing you’re
    building should do from a business perspective, what its scope is, and what the
    expected benefits are.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务需求文档**（**BRD**）：这是一份概述项目高层次业务目标的文档。这种类型的文档以非技术术语编写，因为它关注的是从业务角度构建的事物应该做什么，其范围是什么，预期的利益是什么。'
- en: '**Functional requirements document** (**FRD**), sometimes referred to as **system
    requirements specification** (**SRS**): This type of document describes what the
    software will do in detail and typically includes things such as user stories
    and use cases.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能需求文档**（**FRD**），有时也称为**系统需求规范**（**SRS**）：这类文档详细描述了软件将做什么，通常包括用户故事和用例。'
- en: '**Technical requirements document** (**TRD**), sometimes referred to as **software
    design document** (**SDD**): This is a document that includes specified technical
    direction, things such as overall architecture, technology stack, database design,
    modules to be built, services interfaces to provide, and so forth. This is ultimately
    the document that a developer will base their code on.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术需求文档**（**TRD**），有时也称为**软件设计文档**（**SDD**）：这是一份包含指定技术方向的文档，例如整体架构、技术栈、数据库设计、要构建的模块、要提供的服务接口等等。这是最终开发者将基于其编写代码的文档。'
- en: There are other types of documents without specific names (or at least acronyms),
    including user manuals to describe how to use the product; system administration
    manuals to explain how people who manage the system should do their tasks; project
    plans that describe the major milestones and tasks that need to be accomplished
    for the project to be completed, with estimates, dates and the people responsible
    for each task; and risk management plans that outlines potential risks and strategies
    for addressing them during the development of the project.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有其他类型的文档，没有特定的名称（或者至少没有缩写），包括用户手册，用于描述如何使用产品；系统管理手册，解释系统管理员应该如何完成任务；项目计划，描述项目完成所需完成的主要里程碑和任务，包括估计、日期和每个任务的负责人；以及风险管理计划，概述潜在的风险和应对策略。
- en: These documents, and possibly others, are the output of Waterfall, and, most
    importantly, they are done upfront. No development begins until they are all written,
    reviewed, revised, and approved. If that takes a year, then no code is written
    (aside from perhaps some prototypes and design samples) for a year.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文档，以及可能的其他文档，是瀑布模型的输出，最重要的是，它们是在前期完成的。在所有文档都编写、审查、修订并获得批准之前，不会开始任何开发工作。如果这需要一年的时间，那么在这一年里，除了可能的一些原型和设计样本之外，不会编写任何代码。
- en: At first blush, that seems logical, doesn’t it? People need to know what they’re
    building before they can start building it, right? And it makes sense that everyone
    involved should have a clear picture of the end goal and the steps involved in
    getting there, does it not?
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 初看之下，这似乎是合理的，不是吗？人们在开始构建之前需要知道他们要构建什么，对吧？而且，每个人都应该对最终目标和实现这一目标的步骤有一个清晰的了解，这是不是很有道理？
- en: But the problem is twofold. First, the time it takes to write all that documentation
    is “lost” in the sense that development typically doesn’t begin until it’s done.
    Obviously, that means no one can see anything until much later in the process,
    not even a partially-built system for a long time. Second—and this is perhaps
    the bigger issue—is that no matter how good your documentation process is, people
    often don’t know what they need! Or they sometimes realize things they didn’t
    specify correctly up front as the product is developed, as they see parts of it
    completed.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 但问题有两个方面。首先，编写所有这些文档所需的时间在某种意义上是“浪费”的，因为开发通常要等到文档完成才开始。显然，这意味着在过程后期，没有人能看到任何东西，甚至长时间内看不到一个部分构建的系统。其次——这可能是更大的问题——无论你的文档过程有多好，人们往往不知道他们需要什么！或者，随着产品的开发，他们有时会意识到他们最初没有正确指定的事情，因为他们看到了产品的一部分完成。
- en: Unfortunately, with Waterfall, it’s usually the case that the people who will
    be using the product don’t see anything until it’s done, or at least mostly done,
    at which point making changes, especially those that represent core changes to
    things underpinning the entire product, are very costly or even impossible sometimes.
    If it takes a year to document everything and then another year to build it, no
    one is seeing if the documentation matches reality until close to two years later,
    at which point making changes may not be possible, so now you spent all that time,
    money, and effort and wound up with something that doesn’t meet the needs for
    one reason or another.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在瀑布模型中，通常使用产品的人直到产品完成（或者至少大部分完成）之前什么也看不到，这时进行更改，尤其是那些代表对整个产品支撑核心内容进行核心更改的情况，成本非常高，有时甚至不可能。如果需要花费一年来编写所有文档，然后再花费一年来构建它，那么直到接近两年后，没有人会看到文档是否与实际情况相符，这时可能已经无法进行更改，所以现在你花费了所有的时间、金钱和努力，最终得到的东西可能因为各种原因而无法满足需求。
- en: For these reasons, Waterfall has largely fallen out of favor. It isn’t gone
    entirely, some companies do still use it, and it can be beneficial in some cases
    where it’s easier to do up-front design because it allows you to better estimate
    a project’s timeline and makes things a bit more predictable. However, it largely
    has given way to the Agile methodology for most projects, so let’s talk about
    Agile now.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些原因，瀑布模型在很大程度上已经不再受欢迎。它并没有完全消失，一些公司仍然在使用它，并且在某些情况下，如果前期设计更容易进行，它可能是有益的，因为它允许你更好地估计项目的时间表，使事情更加可预测。然而，对于大多数项目来说，它已经让位于敏捷方法论，所以现在让我们来谈谈敏捷。
- en: Being Agile in your development projects
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在你的开发项目中实践敏捷
- en: Whereas Waterfall is a sequential process (documentation and then development),
    the **Agile** methodology is iterative, incremental, and often parallel. Instead
    of designing everything at the start and spending a ton of time writing documentation,
    Agile favors building small pieces of a project and then iteratively updating
    them as needed to get them closer to what is needed over time. Then, the next
    small part of the project can begin (or two small parts may be developed in parallel,
    depending on resource availability, but it’s an iterative, incremental process
    either way).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 与瀑布模型是按顺序进行的过程（先文档化然后开发）不同，**敏捷**方法论是迭代的、增量的，并且通常是并行的。敏捷方法不倾向于一开始就设计好所有内容并花费大量时间编写文档，而是倾向于构建项目的小部分，然后根据需要迭代更新，使其逐渐接近最终所需的状态。然后，项目的下一小部分可以开始（或者根据资源可用性，可能同时开发两个小部分，但无论如何都是一个迭代和增量的过程）。
- en: The goals of Agile
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 敏捷的目标
- en: The concept of Agile began in 2001 with the Agile Manifesto, formulated by a
    group of software developers. This document describes the key principles of Agile
    software development.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷的概念始于2001年的敏捷宣言，由一群软件开发者制定。这份文件描述了敏捷软件开发的关键原则。
- en: 'There are four core values described by the Agile Manifesto:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷宣言中描述了四个核心价值观：
- en: '**Favor individuals and interactions over processes and tools**: Rather than
    adhering strictly to specific tools, the skills of people, teamwork, and communication
    are emphasized. This value puts focus on the importance of collaboration and a
    team-based approach—you know, soft skills!'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优先考虑个人和交互而非流程和工具**：而不是严格遵循特定的工具，强调的是人的技能、团队合作和沟通。这种价值观强调了协作和基于团队的方法的重要性——你知道的，软技能！'
- en: '**Favor working software over comprehensive documentation**: This value puts
    the focus on delivering functional software rather than spending extensive time
    on documenting every detail, especially when done up front as with Waterfall.
    This doesn’t mean documentation is unnecessary. Instead, it means that producing
    working software is a higher priority and a better measure of progress than documentation.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优先考虑工作软件而非全面的文档**：这一价值观将重点放在交付功能软件上，而不是花费大量时间详细记录每个细节，尤其是在瀑布模型中，通常在前期就完成。这并不意味着文档是不必要的。相反，这意味着生产工作软件是优先级更高的任务，是衡量进度更好的标准。'
- en: '**Favor customer collaboration over contract negotiation**: Involving customers
    as active participants throughout the development process is the point of this
    value. It underscores the importance of customer feedback and adapting to their
    changing needs (or understanding) rather than relying solely on initial contract
    terms.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优先考虑客户协作而非合同谈判**：在整个开发过程中让客户作为积极参与者是这一价值观的核心。它强调了客户反馈和适应他们不断变化的需求（或理解）的重要性，而不是仅仅依赖于最初的合同条款。'
- en: '**Favor responding to change over following a rock-solid plan**: This value
    explains how we should embrace change throughout the development process rather
    than rigidly sticking to a pre-defined plan. This means being flexible and adaptable
    to ensure the final product meets the evolving needs of customers and the market.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优先响应变化而非遵循稳固的计划**：这一价值观解释了我们应该如何在整个开发过程中拥抱变化，而不是僵化地坚持预先定义的计划。这意味着要灵活和适应性强，以确保最终产品满足客户和市场的不断变化的需求。'
- en: 'Beyond the core values, there are also twelve principles described by the Agile
    Manifesto that elaborate on the core values:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 除了核心价值观之外，敏捷宣言还描述了十二条原则，这些原则详细阐述了核心价值观：
- en: '**Customer satisfaction**: Customers who see continuous delivery of even small
    bits of functionality tend to be happier customers.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户满意度**：看到持续交付即使是小功能片段的客户往往更满意。'
- en: '**Welcome changing requirements**: Rather than view changing requirements as
    a problem, Agile sees it as a plus, allowing customers to adapt to the market
    faster for competitive advantage.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**欢迎变化的需求**：敏捷方法将变化的需求视为一种优势，而不是问题，这使客户能够更快地适应市场，以获得竞争优势。'
- en: '**Deliver working software frequently**: The more often you can deliver working
    pieces of functionality, the better for the customer, who can put them to use
    even if the whole product isn’t yet done.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**频繁交付工作软件**：你越频繁地交付功能片段，对客户就越有利，即使整个产品尚未完成，他们也可以使用这些功能片段。'
- en: '**Close, daily cooperation between stakeholders and developers**: This allows
    for better decision-making and alignment of ever-changing goals.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利益相关者和开发者之间的紧密、日常合作**：这有助于做出更好的决策，并确保不断变化的目标保持一致。'
- en: '**Build projects around motivated individuals**: When you give teams the environment
    and support they need, and trust them to get the job done, they tend to perform
    better and do so with more personal fulfillment.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**围绕有动力的个人构建项目**：当你为团队提供他们所需的环境和支持，并信任他们完成任务时，他们往往表现得更好，并且能够获得更多的个人满足感。'
- en: '**The most efficient and effective method of conveying information**: Face-to-face
    interactions tend to be best, but in the modern virtualized world, teams can also
    work effectively remotely as long as they have good communication skills.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传达信息的最高效和最有效的方法**：面对面的交流往往是最有效的，但在现代虚拟化的世界中，只要团队拥有良好的沟通技巧，他们也可以有效地远程工作。'
- en: '**Working software as the primary measure of progress**: This one is self-explanatory
    and has been discussed already. After all, you can do everything else right, but
    if the product you deliver doesn’t actually work, then it hardly matters, does
    it?'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将正在工作的软件作为衡量进度的首要标准**：这一点不言自明，并且已经被讨论过了。毕竟，你可以把其他所有事情都做得很好，但如果交付的产品实际上无法工作，那么这几乎无关紧要，对吧？'
- en: '**Agile processes promote sustainable development**: The stakeholders, developers,
    and users should be able to maintain a constant pace indefinitely when properly
    using Agile methodology.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**敏捷过程促进可持续开发**：当正确使用敏捷方法时，利益相关者、开发者和用户应该能够无限期地保持恒定的速度。'
- en: '**Continuous attention to technical excellence and good design**: This helps
    to enhance agility by building on a solid technical foundation the whole way through.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续关注技术卓越和良好设计**：这有助于通过在整个过程中建立坚实的基础来增强敏捷性。'
- en: '**Simplicity**: The art of maximizing the amount of work not done is essential!
    Code not developed is code that can’t have bugs, after all, so not over-engineering
    is a key technical goal, not just when doing Agile but generally.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单性**：最大化未完成工作的艺术是至关重要的！毕竟，未开发的代码是没有错误的，所以不过度设计是一个关键的技术目标，而不仅仅是做敏捷开发时如此。'
- en: '**The best architectures, requirements, and designs**: Self-organizing teams
    that guide themselves tend to produce better artifacts.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最佳架构、需求和设计**：自我组织的团队往往能产生更好的成果。'
- en: '**At regular intervals, the team reflects on how it’s doing**: The team should
    periodically look at what they’ve done, how they’ve done it, and how things have
    progressed and tweak the process as appropriate to support continued process improvement.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**团队定期反思其表现**：团队应定期审视他们所做的工作、如何完成这些工作以及事情是如何进展的，并根据需要调整流程以支持持续的过程改进。'
- en: These values and principles, and Agile broadly, have had a profound effect on
    how software, including websites, is created. They have enhanced team dynamics
    and brought the stakeholders into the process the whole iterative way through.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这些价值观和原则，以及敏捷方法，对软件（包括网站）的创建方式产生了深远的影响。它们增强了团队动态，并让利益相关者在整个迭代过程中参与到过程中。
- en: That iteration I’ve mentioned a few times supports one of the main goals of
    Agile, which is to be adaptive to changes. This is accomplished by developing
    small units and pieces of the larger project and critically getting that in front
    of people as soon as possible. That way, if the design wasn’t right, either because
    the business owners didn’t know exactly what they needed, the developer misunderstood
    a requirement, or whatever reason, only two weeks of effort was lost (and in most
    cases, it wasn’t completely lost). You can re-work the screen, iteratively, until
    it’s what is needed, all along adapting to any changes in requirements needed.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到的那次迭代支持敏捷的主要目标之一，即适应变化。这是通过开发小型单元和更大项目的一部分，并且关键的是尽可能快地将它们展示给人们来实现的。这样，如果设计不正确，无论是由于业务所有者不知道他们确切需要什么，开发者误解了需求，还是其他任何原因，只损失了两周的努力（而且在大多数情况下，并不是完全损失）。你可以迭代地重新设计屏幕，直到它满足需求，同时适应任何需求的变化。
- en: This only works when there is continuous collaboration between people, which
    is why I justify this discussion of development methodologies, mainly Agile, as
    a “soft skill”. I acknowledge I’m stretching the definition a bit here, but I
    think I can get away with it because Agile doesn’t work if you aren’t working
    hand-in-hand with people! If you aren’t constantly communicating and having a
    back-and-forth exchange of ideas, then Agile falls apart, and doing those things
    are soft skills in my book for sure.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这只有在人们之间有持续的合作时才能奏效，这也是为什么我把这种关于开发方法（主要是敏捷方法）的讨论称为“软技能”。我承认我在这里稍微拉伸了定义，但我认为我可以这样做，因为如果你不与人携手合作，敏捷方法就无法发挥作用！如果你不持续沟通，不进行思想上的来回交流，那么敏捷方法就会瓦解，而做这些事情在我的书中无疑是软技能。
- en: By the same token, customer feedback during the development process is a key
    component of making this work. The way this is accomplished with Agile is in iterations
    called **sprints**. I’ll get into more detail about sprints in the next section,
    but in short for now, they are a period of time—let’s say two weeks—where a small
    increment of work is done. Maybe during a given sprint, you implement one or two
    features out of the fifty you ultimately need, for example. The goal is to have
    something that can be deployed and ideally used for real at the end of every sprint
    so that customers can get immediate benefit from what you’re building as you go,
    even if not the full benefit of the full project being completed. They can then
    get hands-on experience and see where what was developed might not have been what
    they really needed, and that can feed back into the process and impact what you
    work on in the next sprint. Note that deploying after each sprint is definitely
    not a requirement of Agile, but the goal is that you *could* deploy at the end
    of every sprint.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，在开发过程中的客户反馈是使这一过程得以顺利进行的关键组成部分。在敏捷开发中，这是通过称为**冲刺**的迭代来实现的。我将在下一节中详细介绍冲刺，但简而言之，它们是一段时间——比如说两周——在这个时间段内完成一小部分工作。也许在某个特定的冲刺中，你会实现最终需要的五十个功能中的一个或两个，例如。目标是确保在每个冲刺结束时都有可以部署并且理想情况下可以实际使用的成果，这样客户就可以立即从你所构建的内容中获得好处，即使不是整个项目的全部好处。他们可以亲身体验并看到所开发的内容可能并不是他们真正需要的，这可以反馈到过程中并影响你在下一个冲刺中的工作。请注意，在每次冲刺后部署绝对不是敏捷的必要要求，但目标是每个冲刺结束时都可以进行部署。
- en: One of the other benefits of Agile is that testing is done throughout the process
    by necessity. As a screen is built, it can be tested while another is being built.
    Unlike with Waterfall, where testing is almost entirely done at the end, you again
    don’t need to wait to find out things are wrong in Agile until the end as with
    Waterfall.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷开发的另一个好处是，由于必要性，测试在整个过程中进行。当构建一个屏幕时，可以在构建另一个屏幕的同时对其进行测试。与瀑布模型不同，在瀑布模型中，测试几乎是在结束时才完成的，在敏捷开发中，你也不需要像在瀑布模型中那样等到最后才能发现错误。
- en: Agile also shifts the focus—and to a large degree, control—onto the development
    team. It is typical for there to be a **backlog** of tickets; that is, a list
    of tasks to be accomplished. This backlog can be *groomed* by the stakeholders,
    meaning it can be arranged in priority order (usually, the tickets at the top
    of the backlog have been deemed most important). Ultimately, the development team
    decides what gets done in each sprint, pulling tickets from the backlog during
    **sprint planning** sessions. There, they estimate each ticket and then decide
    how many tickets they believe can be done in the next sprint. Sometimes not all
    tickets will get done, and sometimes extra time will be available, at which point
    the next ticket from the backlog can be added to the sprint on the fly. Sometimes,
    the order of the backlog might be ignored for various reasons (for example, if
    there is a ticket that the team knows will be easy to do further down on the backlog,
    but they want to pull it into the sprint just to fill it up a bit).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷开发也将重点——以及很大程度上，控制权——转移到了开发团队。通常情况下，会有一个**待办事项列表**；也就是说，一个需要完成的任务列表。这个待办事项列表可以通过利益相关者进行**整理**，这意味着它可以按照优先级顺序排列（通常，待办事项列表顶部的条目被认为是最重要的）。最终，开发团队决定在每个冲刺中完成什么，在**冲刺计划**会议期间从待办事项列表中提取条目。在那里，他们估算每个条目的工作量，然后决定他们认为在下个冲刺中可以完成多少条目。有时并非所有条目都能完成，有时会有额外的时间，这时可以即时将待办事项列表中的下一个条目添加到冲刺中。有时，由于各种原因，可能会忽略待办事项列表的顺序（例如，如果有一个团队知道在待办事项列表的较后部分容易完成的条目，但他们想将其拉入冲刺以填补一些空白）。
- en: 'Note too that in all of this, documentation is de-emphasized. Oh, to be sure,
    there still is documentation in most cases, but it’s built on the fly, along with
    the code to a large extent. It also often lives in the tickets used for each piece
    built rather than being separate artifacts, though that depends on how a given
    organization implements Agile. And that’s a common thread here: there’s more than
    one way to do Agile, no truly canonical “right” way. Teams will tweak aspects
    of it to meet their needs. In my projects, we tend to favor four-week sprints,
    for example. Some teams don’t do sprint review sessions (meetings after a sprint
    ends where you present your work to the stakeholders, discuss what went right
    and wrong during a sprint and what to do to improve the next one) while others
    do them religiously. It’s all fungible.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，在这所有过程中，文档被弱化。当然，在大多数情况下，仍然存在文档，但它是在代码的基础上即时构建的，很大程度上与代码结合。它通常存在于构建每个部分所使用的票据中，而不是作为独立的工件，尽管这取决于特定组织如何实施敏捷。这里有一个常见的线索：敏捷的实施方式不止一种，没有真正标准的“正确”方式。团队会调整其某些方面以满足他们的需求。在我的项目中，我们倾向于选择四周的冲刺，例如。有些团队不做冲刺回顾会议（在冲刺结束后，你向利益相关者展示你的工作，讨论冲刺中做得好和不好的地方以及如何改进下一个冲刺）而有些团队则严格遵守。这一切都是通用的。
- en: All of this combines to make Agile less predictable than Waterfall. You don’t
    usually know at the start how many sprints will be required, nor will you have
    a clear picture of what you’re building necessarily beyond some basics. If it
    sounds like chaos, it can be! But it’s controlled chaos, and it’s chaos that allows
    working code to get in front of people sooner, which is probably the primary benefit
    of Agile.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些因素加在一起，使得敏捷比瀑布方法更不可预测。你通常不知道开始时需要多少个冲刺，也不会对你正在构建的内容有一个清晰的了解，除非是一些基本内容。如果听起来像是混乱，那它确实如此！但这是可控的混乱，这种混乱允许更早地将工作代码展示给人们，这可能是敏捷的主要好处。
- en: The way Agile is implemented can vary from organization to organization, but
    most implementations tend to share a few key concepts, beginning with sprints.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷方法的实施方式可能因组织而异，但大多数实施方式都倾向于共享一些关键概念，从冲刺开始。
- en: Understanding core Agile concepts
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解敏捷的核心概念
- en: As previously mentioned, Agile uses the idea of sprints, which are small units
    of time—typically two weeks—where development is done. What usually happens is
    people design a small part of the application, perhaps a single screen out of
    many. This produces some degree of documentation as the designers and/or analysts
    write *just* enough documentation about only the specific tasks in the sprint
    that technical people need to implement it but far less than is typical with Waterfall.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，敏捷使用冲刺的概念，这是小的时间单位——通常是两周——在这里进行开发。通常发生的情况是，人们设计应用程序的一小部分，可能是许多屏幕中的一个。随着设计师和/或分析师仅就冲刺中技术人员需要实施的具体任务编写足够的文档，这产生了一定程度的文档，但远少于瀑布方法中典型的文档。
- en: Usually, every day during a sprint, you have a **daily standup** meeting. This,
    in some cases, is quite literal—the idea is to keep this meeting very short and
    sweet, and people tend to do that when they’re standing up. During it, each person
    goes around and quickly discusses what they worked on yesterday, what they plan
    to work on today, and if they have any blockers or issues that are keeping them
    from progressing (which the leader of the standup, the **scrum master**, will
    try to help unblock by connecting them with the right person to address the issue).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在冲刺期间，每天都会有一个**每日站立会议**。在某些情况下，这非常直接——目的是使这次会议非常简短和直接，人们倾向于在站立时这样做。在会议期间，每个人都会快速讨论他们昨天做了什么，今天计划做什么，以及他们是否有任何阻碍或问题阻碍了他们的进展（站立会议的领导者，即**Scrum
    Master**，会尝试通过将他们与解决该问题的正确人员联系起来来帮助他们解决问题）。
- en: Agile vs. scrum
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷与Scrum的比较
- en: I dropped a term here that should be explained. Scrum is a specific form of
    Agile development, and it is probably the most predominant form, to the point
    where people tend to use the terms interchangeably. The main difference is that
    while Agile is a set of general philosophies and approaches to software development,
    Scrum refines Agile into specific roles (such as scrum master), specific ceremonies
    to perform (such as daily standups), and specific artifacts, such as the sprint
    backlog, which I’ll talk about shortly. Other forms of Agile are sometimes used
    though, including extreme programming and lean software development. So, keep
    in mind that Agile isn’t the same thing as Scrum, but also keep in mind that in
    most cases, owing to its popularity, Agile and Scrum can be used interchangeably
    in polite conversation.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里省略了一个应该解释的术语。Scrum是一种特定的敏捷开发形式，并且可能是最普遍的形式，以至于人们倾向于互换使用这两个术语。主要区别在于，虽然敏捷是一套关于软件开发的一般哲学和方法，但Scrum将敏捷细化成特定的角色（如Scrum大师）、特定的仪式（如每日站立会议）和特定的工件，例如冲刺待办事项，我将在稍后讨论。尽管如此，有时也会使用其他敏捷形式，包括极限编程和精益软件开发。因此，请记住，敏捷并不等同于Scrum，但也要记住，在大多数情况下，由于它的普及，敏捷和Scrum在礼貌的对话中可以互换使用。
- en: 'But how do people even know what they should work on? For that, a tracking
    system such as Jira ([https://www.atlassian.com/software/jira](https://www.atlassian.com/software/jira))
    is often used (see *Figure 11**.1*). For that screen, a ticket would be opened
    and the design details would be included. Then, the sprint begins, and a developer
    “picks up” that ticket to work on. Over the next two weeks, they develop it, often
    going back and forth with the designer (sometimes a business analyst). But ultimately,
    at the end of that two-week sprint, the goal is that the screen—and that screen
    alone—should be in a deployable state. Ideally, it is entirely done and correct,
    but that’s kind of the goal: deploy it and find out!'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 但人们如何知道他们应该做什么工作呢？为此，通常会使用像Jira（[https://www.atlassian.com/software/jira](https://www.atlassian.com/software/jira)）这样的跟踪系统（参见*图11.1*）。对于该屏幕，将开启一个工单并包含设计细节。然后，冲刺开始，开发者“领取”该工单进行处理。在接下来的两周内，他们开发该工单，通常与设计师（有时是业务分析师）来回沟通。但最终，在两周冲刺结束时，目标是屏幕——仅此屏幕——应该处于可部署状态。理想情况下，它应该完全完成且正确无误，但这基本上是目标：部署它并找出问题！
- en: '![Figure 11.1: The Jira ticketing system](img/B18315_11_1.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图11.1：Jira工单系统](img/B18315_11_1.jpg)'
- en: 'Figure 11.1: The Jira ticketing system'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1：Jira工单系统
- en: If changes are made, a new ticket will typically be opened, and it will then
    be worked on in the next sprint. At the same time, the next screen may be worked
    on by another developer in the same way.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果进行更改，通常会开启一个新的工单，并在下一个冲刺中进行处理。同时，下一个屏幕可能由另一位开发者以相同的方式进行处理。
- en: As work is completed, a **burndown chart** is often produced, an example of
    which can be seen in *Figure 11**.2*. The X axis shows time, usually marked in
    days or sprints if an overall progress view is desired. The Y axis shows the amount
    of work remaining, most typically either tickets or **story points**, which are
    an estimate of how relatively difficult and time-consuming a ticket is (a ticket
    estimated at 10 story points should, generally speaking, be deemed twice as hard
    and time-consuming as one estimated at 5 story points).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 随着工作的完成，通常会生成一个**燃尽图**，其示例可以在*图11.2*中看到。X轴表示时间，通常标记为天数或冲刺，如果需要查看整体进度视图。Y轴表示剩余的工作量，最常见的是工单或**故事点**，它们是对工单相对难度和耗时程度的估计（估计为10个故事点的工单，一般来说，应该被认为比估计为5个故事点的工单难度和时间消耗高出一倍）。
- en: '![Figure 11.2: An example of a burndown chart](img/B18315_11_2.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图11.2：燃尽图示例](img/B18315_11_2.jpg)'
- en: 'Figure 11.2: An example of a burndown chart'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2：燃尽图示例
- en: This chart will normally also have an ideal burndown line, which starts at the
    top of the Y axis and ends at zero, on the sprint or project’s end date. Finally,
    there will usually also be an actual burndown line, which shows the actual progress
    of the work done, starting from the total amount of work done and sloping downward
    as items are completed. These two lines allow you to see the relationship between
    what you planned to do and what you actually got done during the sprint.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 此图表通常还会包含一个理想的燃尽线，它从Y轴的顶部开始，到冲刺或项目的结束日期结束为零。最后，通常还会有一条实际的燃尽线，它显示了实际完成的工作进度，从完成的总工作量开始，随着项目的完成而向下倾斜。这两条线可以帮助您看到在冲刺期间您计划要做的事情和实际完成的事情之间的关系。
- en: Still, what you’ll often find is that the two methodologies, Waterfall and Agile,
    can be combined to some degree, leading to the best of both worlds.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，你通常会发现这两种方法，**瀑布**和**敏捷**，可以在一定程度上结合，从而实现两者的最佳效果。
- en: Hybridizing Waterfall and Agile
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合**瀑布**和**敏捷**
- en: When you combine Waterfall and Agile, the goal is to accentuate the strengths
    of each while mitigating the weakness of the other. Since both approaches have
    their pluses and minuses, the idea is to wind up with as many pluses and as few
    minuses as possible, which can result in a methodology better than either alone.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 当你结合**瀑布**和**敏捷**方法时，目标是强调每种方法的优点，同时减轻另一种方法的缺点。由于两种方法都有其优点和缺点，目标是尽可能多地获得优点，尽可能少地获得缺点，这可能导致一种比单独使用任何一种方法都更好的方法。
- en: In the hybrid methodology, there is some up-front design work and documentation—more
    than is typical in Agile alone—but once coding begins, it takes on a more Agile
    and iterative approach in that you work in sprints; you may release after each
    sprint and may adapt to changes more than you would with Waterfall alone.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在混合方法中，有一些前期设计和文档工作——比单纯的敏捷方法要多，但一旦开始编码，它就采取了一种更敏捷和迭代的做法，即你以冲刺为单位工作；你可能在每个冲刺后发布，并且可能比单纯的瀑布方法更能适应变化。
- en: Often, with a hybrid approach, there are set milestones that wouldn’t typically
    be present with Agile alone. For example, you may say up front that the goal is
    to do a release after six two-week sprints. That milestone is a concrete goal
    the team works toward rather than them just iterating until they feel the software
    is ready to be released completely or releasing it after each sprint.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在混合方法中，有一些里程碑是单纯的敏捷方法中不会出现的。例如，你可能会一开始就声明目标是在六个两周冲刺后发布。这个里程碑是一个具体的团队目标，而不是他们只是迭代直到感觉软件可以完全发布，或者在每个冲刺后发布。
- en: While Agile favors minimal documentation and Waterfall emphasizes it, a hybrid
    approach seeks to strike a balance. That means you may see some documents such
    as BRDs but maybe no TRDs. The documentation deemed most essential might be built
    up front and in detail as with Waterfall, but everything else can be built minimally
    and kept in tickets.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然**敏捷**方法倾向于最小化文档，而**瀑布**方法则强调文档，但混合方法寻求找到一个平衡点。这意味着你可能会看到一些文档，例如BRD（业务需求文档），但可能没有TRD（技术需求文档）。被认为最关键的文档可能像瀑布方法一样在前期详细构建，但其他所有内容都可以最小化构建并保留在工单中。
- en: Customer involvement is another difference. Instead of waiting until near the
    end of development to show the customers what you’ve built as with Waterfall,
    and rather than having them see every piece built as with Agile, you instead may
    only show them what you’ve built at predefined checkpoints. For example, if you
    have one hundred screens to build, you may group them into discrete pieces of
    functionality, where each group is maybe a dozen screens, and use each group as
    a checkpoint to show what you’ve built.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 客户参与是另一个不同点。与瀑布方法中在开发接近尾声时才向客户展示你已构建的内容不同，也不像敏捷方法中那样让他们看到每个构建的部分，你可能会只在预定义的检查点展示你已构建的内容。例如，如果你要构建一百个屏幕，你可能将它们分组为离散的功能块，每个组可能有十几个屏幕，并使用每个组作为检查点来展示你已构建的内容。
- en: A hybrid approach can also help manage risk better. Any development project
    involves some form of risk, be that loss of time or loss of money if the end product
    doesn’t meet the needs of the client. This risk is greater for Agile generally
    because, unlike Waterfall, there isn’t as much focus spent on specifying everything
    properly at the start. But, doing *some* of that work upfront before beginning
    an Agile project can help cut down some of that risk since you’re more likely
    to catch fundamental problems at that point, the type of problems that tend to
    be more difficult and costly to fix later. For the same reason, the ability of
    Agile to respond to changes more efficiently means that there isn’t as much risk
    of discovering issues in the middle that put the entire project at risk as there
    can be with Waterfall.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 混合方法还可以更好地管理风险。任何开发项目都涉及某种形式的风险，无论是时间损失还是金钱损失，如果最终产品不符合客户需求。这种风险在**敏捷**方法中通常更大，因为与瀑布方法不同，在项目开始时并没有那么多的精力用于正确地详细说明一切。但是，在开始敏捷项目之前进行一些前期工作可以帮助降低一些风险，因为你在那个阶段更有可能捕捉到基本问题，这些问题在后期往往更难解决且成本更高。同样，敏捷对变化响应能力更强，这意味着在中间阶段发现的问题不会像瀑布方法那样对整个项目构成风险。
- en: Using a hybrid approach still requires top-notch communication skills (see,
    those soft skills again!) and still allows for customization by the team. In fact,
    because it’s mixing two methodologies, it’s probably even more important to customize
    the methodology according to the team’s needs and desires, where the team means
    the development team plus stakeholders. Part of this customization too is ensuring
    that the methodology aligns with the culture of the organization. Some companies
    are inherently more flexible while others are more rigid, so it makes sense that
    you would have to tailor your hybrid approach to align with that overall corporate
    mindset.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 使用混合方法仍然需要一流的沟通技巧（看，那些软技能又出现了！）并允许团队进行定制。事实上，因为它结合了两种方法，所以根据团队的需求和愿望定制方法可能更加重要，这里的团队指的是开发团队加上利益相关者。这种定制的一部分也是确保方法与组织的文化相一致。一些公司本质上是更加灵活的，而另一些则更加僵化，所以你有必要调整你的混合方法以符合整体的企业心态。
- en: At the end of the day, whether you use Waterfall, Agile, or a hybrid approach,
    communication and working closely with people is the key! Those soft skills will
    get *a lot* of exercise with Agile or a hybrid methodology (less so with Waterfall,
    but really still plenty even there), so understanding that before you begin a
    project is important.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，无论你使用瀑布模型、敏捷方法还是混合方法，沟通和与人们紧密合作是关键！在敏捷或混合方法中，这些软技能将得到大量的锻炼（在瀑布模型中较少，但确实仍然很多），所以在开始项目之前理解这一点很重要。
- en: Reviewing the roadmap
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查路线图
- en: 'We’re almost at the end now; just one more chapter to go after this! In *Figure
    11**.3*, you can see the updated web developer roadmap:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在几乎要结束了；在这之后，只需再有一章！在*图11*.3中，你可以看到更新的网络开发者路线图：
- en: '![Figure 11.3: The roadmap with a few more boxes filled in](img/B18315_11_3.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图11.3：填入更多方框的路线图](img/B18315_11_3.jpg)'
- en: 'Figure 11.3: The roadmap with a few more boxes filled in'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3：填入更多方框的路线图
- en: Okay, well, it’s just one box this time – **Development Methodologies** – but
    that means you know what’s going to be opened up in the next chapter since there
    are only three boxes left unopened (though the mystery of what they are is exciting,
    isn’t it?). So, don’t slow down now, just one more chapter to go!
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这次只有一个方框——**开发方法**——但这意味着你知道下一章将要展开什么，因为只剩下三个方框未打开（尽管它们是什么的神秘性令人兴奋，不是吗？）。所以，现在不要减速，只需再有一章就结束了！
- en: Summary
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we talked about so-called “soft skills”—things that are non-technical
    in nature but that are just as important as technical skills. This includes things
    such as how to be a good team player and being kind to others while being open
    and honest, even when giving criticism. We discussed how being social can be a
    plus but that you must use caution and have limits, especially where social media
    is concerned.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了所谓的“软技能”——这些技能本质上是非技术性的，但与技术技能一样重要。这包括如何成为一个好的团队成员，在保持开放和诚实的同时对他人友好，即使在提出批评时也是如此。我们讨论了社交可以是一种优势，但你必须谨慎并设定界限，尤其是在社交媒体方面。
- en: We also talked about how part of being a good web developer is continually learning,
    but not everyone learns best the same way, so you have to be introspective to
    determine your preferred learning style. We discussed how putting your learning
    to use in personal projects is, if not a must, then certainly a good idea, and
    how games especially are a great—albeit unexpected—type of project to accomplish
    that with.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了成为一名优秀的网络开发者的一部分是持续学习，但并非每个人都能以相同的方式学习，所以你必须进行自我反思以确定你的首选学习风格。我们讨论了将你的学习应用于个人项目，如果不是必须的，那么至少是一个好主意，特别是游戏尤其是一种很好的——尽管出乎意料——项目类型，可以用来实现这一点。
- en: We then looked at how to build effective communication skills; things such as
    how to compose emails concisely but honestly, how direct verbal contact has many
    layers to it including body language, and about the marketplace of ideas and how
    successfully navigating it with respect is necessary.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们探讨了如何建立有效的沟通技巧；例如，如何简洁但诚实地撰写电子邮件，直接的口头交流有很多层次，包括肢体语言，以及关于思想市场以及如何尊重地成功导航它的内容。
- en: Finally, we looked at development methodologies, with a specific focus on Agile.
    You saw how this involves a whole lot of soft skills (especially communication
    skills), why it’s beneficial versus Waterfall, and how a hybrid approach is often
    considered best.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们探讨了开发方法，特别关注敏捷方法。你看到了敏捷方法如何涉及大量的软技能（尤其是沟通技能），为什么它比瀑布模型更有益，以及为什么混合方法通常被认为是最佳选择。
- en: In the next—and final—chapter, we’ll, in a sense, expand on the topic of continued
    learning because I know it to be of particular importance in this field of work.
    Hopefully, I can give you a bit more refined direction on how to ensure that your
    skills never grow stale and instead always remain current and, most importantly,
    marketable!
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章——也是最后一章中，我们将在某种程度上扩展持续学习的主题，因为我知道在这个工作领域，这一点尤为重要。希望我能给你提供更多关于如何确保你的技能永不陈旧，并且始终保持最新和最重要的是，具有市场价值的指导。
