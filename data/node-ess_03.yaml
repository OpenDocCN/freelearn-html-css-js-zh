- en: Chapter 3. Authentication
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。认证
- en: We can now create RESTful APIs, but we don't want everyone to access everything
    we expose. We want the routes to be secure and to be able to track who is doing
    what.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以创建RESTful API，但我们不希望每个人都能访问我们暴露的所有内容。我们希望路由是安全的，并且能够跟踪谁在做什么。
- en: Passport is a great module and another middleware that helps us authenticate
    requests.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Passport是一个很棒的模块，另一个中间件，帮助我们验证请求。
- en: Passport exposes a simple API for providers to expand on and create strategies
    to authenticate users. At the time of writing, there are 307 officially supported
    strategies; however, there is no reason why you can't write your own strategy
    and publish it for others to use.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Passport公开了一个简单的API，供提供者扩展并创建策略来验证用户。在撰写本文时，有307个官方支持的策略；但是，您完全可以编写自己的策略并发布供他人使用。
- en: Basic authentication
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本身份验证
- en: The simplest strategy for passport is the local strategy that accepts a username
    and password.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: passport最简单的策略是接受用户名和密码的本地策略。
- en: We will introduce the express framework for these examples and, now that you
    know the basics of how it all works underneath, we can put it all together.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为这些示例引入express框架，现在您已经了解了它在底层的基本工作原理，我们可以将它们整合在一起。
- en: 'You can install `express`, `body-parser`, `passport`, and `passport-local`.
    Express is a batteries-included Web framework for Node.js, and includes routing
    and the ability to use middleware:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以安装`express`、`body-parser`、`passport`和`passport-local`。Express是一个内置电池的Node.js
    Web框架，包括路由和使用中间件的能力：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For now, we can store our users in a simple object to reference later, as shown:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们可以将我们的用户存储在一个简单的对象中，以便以后引用，如下所示：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once we have a few users, we need to set up passport. When we create an instance
    of the local strategy, we need to provide a `verify` callback where we check the
    username and password, while returning a user:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了一些用户，我们就需要设置passport。当我们创建本地策略的实例时，我们需要提供一个`verify`回调，其中我们检查用户名和密码，同时返回一个用户：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `verify` callback in this case is expecting `done` to be called with a user.
    It also allows us to provide information if the user was invalid or the password
    was wrong.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`verify`回调期望使用`done`调用用户。它还允许我们在用户无效或密码错误时提供信息。
- en: 'Now, that we have a strategy we can pass this to passport, which allows us
    to reference it later and use it to authenticate our requests, as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了一个策略，我们可以将其传递给passport，这允许我们以后引用它并用它来验证我们的请求，如下所示：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can use multiple strategies per application and reference each one by the
    name you passed, in this case `'local'`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在每个应用程序中使用多种策略，并通过您传递的名称引用每个策略，在这种情况下是“local”。
- en: 'Now, let''s create our server, as shown here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建我们的服务器，如下所示：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will have to use the `body-parser` middleware. This will ensure that, when
    we post to our login route, we can read our body; we also need to initialize passport:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不得不使用`body-parser`中间件。这将确保当我们发布到我们的登录路由时，我们可以读取我们的主体；我们还需要初始化passport：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To login to our application, we need to create a `post` route that uses authentication
    as one of the handlers. The code for this is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要登录到我们的应用程序，我们需要创建一个使用身份验证的`post`路由作为处理程序之一。其代码如下：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, when we send a `POST` request to `/login` the server will authenticate
    our requests.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们向`/login`发送`POST`请求时，服务器将验证我们的请求。
- en: 'Once authenticated, the `user` property will be populated on the request object,
    as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 经过身份验证后，`user`属性将填充在请求对象上，如下所示：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Lastly, we need to listen for requests, as with all the other servers:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要监听请求，就像所有其他服务器一样：
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Lets run the example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行示例：
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, we can authenticate users when we send a `POST` request at our server.
    If the user hasn't passed both the username and password the server will return
    `400 Bad Request`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们向服务器发送`POST`请求时，我们可以验证用户。如果用户没有同时传递用户名和密码，服务器将返回`400 Bad Request`。
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'If you aren''t familiar with `curl` you could use a tool, such as Advanced
    REST Client:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉`curl`，您可以使用诸如Advanced REST Client之类的工具：
- en: '[https://chromerestclient.appspot.com/](https://chromerestclient.appspot.com/)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://chromerestclient.appspot.com/](https://chromerestclient.appspot.com/)'
- en: In the following examples I will be using the command line interface `curl`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的示例中，我将使用命令行界面`curl`。
- en: 'We can execute a login request by executing a `POST` to `/login` command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行`POST`到`/login`命令来执行登录请求：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If the user provides the wrong details then `401 Unauthorized` will be returned:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户提供了错误的详细信息，那么将返回`401 Unauthorized`：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we provide the correct details then we can see our handler was called and
    the correct data was returned:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们提供了正确的详细信息，那么我们可以看到我们的处理程序被调用，并且正确的数据被返回：
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Bearer tokens
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bearer令牌
- en: Now that we have an authenticated user, we can generate a token that can be
    used with the rest of our requests rather than passing our username and password
    everywhere. This is commonly known as a Bearer token and, conveniently, there
    is a passport strategy for this.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个经过身份验证的用户，我们可以生成一个令牌，以便在将来的请求中使用，而不是在任何地方都传递我们的用户名和密码。这通常被称为Bearer令牌，方便的是，passport有一个策略可以实现这一点。
- en: For our tokens, we will use something called a **JSON Web Token** (**JWT**).
    JWT allows us to encode tokens from JSON objects and then decode them and verify
    them. The data stored in them is open and simple to read, so passwords shouldn't
    be stored in them; however, it makes verifying a user very simple. We can also
    provide these tokens with expiry dates, which helps limit the severity of tokens
    being exposed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的令牌，我们将使用一种称为**JSON Web Token**（**JWT**）的东西。JWT允许我们从JSON对象中编码令牌，然后解码和验证它们。存储在其中的数据是开放和简单的，因此不应该在其中存储密码；但是，它使验证用户变得非常简单。我们还可以为这些令牌提供到期日期，这有助于限制令牌被暴露的严重性。
- en: You can read more about JWT at [http://jwt.io/](http://jwt.io/).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://jwt.io/](http://jwt.io/)上阅读有关JWT的更多信息。
- en: 'We can install JWT using the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令安装JWT：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once a user is authenticated, we can safely provide them with a token to use
    in future requests:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户经过身份验证，我们就可以安全地为他们提供一个令牌，以便在将来的请求中使用：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, when the user logs in they will be presented with a token to use that we
    can verify.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当用户登录时，他们将收到一个我们可以验证的令牌。
- en: 'Lets run our Node.js server:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行我们的Node.js服务器：
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When we login now we receive a token:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们登录时会收到一个令牌：
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can enter this into the debugger at [http://jwt.io/](http://jwt.io/) and
    see the contents, as shown:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此输入调试器中的[http://jwt.io/](http://jwt.io/)并查看内容，如下所示：
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If we had the secret we could verify that the token is correct. The signature
    changes every time we request a token:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有密钥，我们可以验证令牌是否正确。签名每次请求令牌时都会更改：
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can authenticate a user using `passport-bearer`; it is set up very similar
    to `passport-local`. However, rather than accepting a username and password from
    the body, we accept a bearer token; this can be passed using the query string,
    body, or the `Authorization` header:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`passport-bearer`对用户进行身份验证；它的设置方式与`passport-local`非常相似。但是，与其从主体接受用户名和密码不同，我们接受一个持票人令牌；这可以通过查询字符串、主体或`Authorization`标头传递：
- en: 'First we must install `passport-http-bearer`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须安装`passport-http-bearer`：
- en: '[PRE19]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The let''s create our verifier. There are two steps: the first is ensuring
    the decoded information matches our user, this will be where we usually retrieve
    our user; then'' once we have a user and it''s valid, we can check whether the
    token is valid based on the user''s secret:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后让我们创建我们的验证器。有两个步骤：第一步是确保解码的信息与我们的用户匹配，这通常是我们检索用户的地方；然后，一旦我们有一个用户并且它是有效的，我们可以根据用户的密钥检查令牌是否有效：
- en: '[PRE20]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can register this strategy as the bearer so we can use it later:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此策略注册为持票人，以便以后使用：
- en: '[PRE21]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can create a simple route where we retrieve user details for an authenticated
    user:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个简单的路由，用于检索经过身份验证的用户的用户详细信息：
- en: '[PRE22]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s run the Node.js server:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行Node.js服务器：
- en: '[PRE23]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Once we receive a token:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们收到一个令牌：
- en: '[PRE24]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can use the result in our requests:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在我们的请求中使用结果：
- en: '[PRE25]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: OAuth
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OAuth
- en: OAuth provides many advantages; for instance, it does not need to deal with
    the actual identification of users. We can let users login using services they
    trust, such as Google, Facebook, or Auth0.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth提供了许多优势；例如，它不需要处理用户的实际识别。我们可以让用户使用他们信任的服务登录，例如Google、Facebook或Auth0。
- en: 'For the following examples, I will be using `Auth0`. They provide a free account
    for you to get up-and-running: [https://auth0.com/](https://auth0.com/).'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的示例中，我将使用`Auth0`。他们提供了一个免费帐户供您使用：[https://auth0.com/](https://auth0.com/)。
- en: You will need to sign up and create an `api` (choose `AngularJS + Node.js`),
    then go to Settings and take down the domain, client id, and client secret. You
    will need these to set up `OAuth`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要注册并创建一个`api`（选择`AngularJS + Node.js`），然后转到设置并记下域、客户端ID和客户端密钥。您需要这些来设置`OAuth`。
- en: 'We can authenticate using OAuth using `passport-oauth2`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`passport-oauth2`使用OAuth进行身份验证：
- en: '[PRE26]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As with our bearer tokens, we want to validate what the server returns, which
    will be a user object that has an id. We will match this with a user that is in
    our data or create a new user:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的持票人令牌一样，我们希望验证服务器返回的内容，这将是一个具有ID的用户对象。我们将与我们的数据中的用户匹配或创建一个新用户：
- en: '[PRE27]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Once we have a function to validate our users we can put together the options
    for our OAuth strategy:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有一个验证用户的函数，我们就可以为我们的OAuth策略组合选项：
- en: '[PRE28]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then we create our strategy, as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建我们的策略，如下所示：
- en: '[PRE29]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Before we use our strategy we need to duck type the strategies `userProfile`
    method with our own, this is so we can request the user object to use in `validateOAuth`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用我们的策略之前，我们需要使用我们自己的策略`userProfile`方法进行鸭子类型处理，这样我们就可以请求用户对象在`validateOAuth`中使用：
- en: '[PRE30]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We can register this strategy as `oauth` so we can use it later:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此策略注册为`oauth`，以便以后使用：
- en: '[PRE31]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We need to create two routes to handle our OAuth authentication: one route
    to start the flow and the other for the identification server to return to:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建两个路由来处理我们的OAuth身份验证：一个路由用于启动流程，另一个用于识别服务器返回：
- en: '[PRE32]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We can use our `generateTokenHandler` here, as our request will have a user
    on it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这里使用我们的`generateTokenHandler`，因为我们的请求上会有一个用户。
- en: '[PRE33]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We can now start our server and request `http://localhost:8080/oauth`; the server
    will redirect you to `Auth0`. Once logged in, you will receive a token that you
    can use with `/userinfo`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以启动我们的服务器并请求`http://localhost:8080/oauth`；服务器将重定向您到`Auth0`。登录后，您将收到一个令牌，您可以在`/userinfo`中使用。
- en: If you were using sessions, you could save the user to the session and redirect
    them back to your front page (or the default page set for a logged in user). For
    a single-page app, when using something like Angular, you may want to redirect
    the user with a token in the URL for the client framework to grab onto and save.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用会话，您可以将用户保存到会话中，并将其重定向回您的首页（或为已登录用户设置的默认页面）。对于单页应用程序，例如使用Angular时，您可能希望将用户重定向到URL中带有令牌，以便客户端框架抓取并保存。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We can now authenticate users; this is great as we can now figure out who the
    people are and then limit the users to certain resources.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以对用户进行身份验证；这很棒，因为我们现在可以弄清楚这些人是谁，然后限制用户访问某些资源。
- en: In the next chapter we will cover debugging, we may need to use it if our users
    aren't being authenticated.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍调试，如果我们的用户没有被验证，我们可能需要使用它。
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为Bentham Chang准备，Safari ID bentham@gmail.com 用户编号：2843974 © 2015 Safari Books
    Online，LLC。此下载文件仅供个人使用，并受到服务条款的约束。任何其他用途均需著作权所有者的事先书面同意。未经授权的使用、复制和/或分发严格禁止并违反适用法律。保留所有权利。
