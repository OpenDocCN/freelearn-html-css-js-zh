- en: Chapter 3. Using and Customizing Calendar
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 使用和自定义日历
- en: Calendars have long been a feature of web pages that require some clever JavaScript.
    HTML5 is working toward making it all much simpler, but browser support still
    isn't consistent. This is where Kendo UI is a perfect solution, being a framework
    that combines HTML5 and JavaScript to create cross-browser consistency using the
    latest standards. Like always, the Kendo UI solution couldn't be simpler to implement.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 日历长期以来一直是需要一些巧妙JavaScript的网页功能。HTML5正在努力使这一切变得更加简单，但浏览器的支持仍然不统一。这就是Kendo UI成为完美解决方案的地方，因为它是一个结合HTML5和JavaScript的框架，使用最新的标准创建跨浏览器的统一性。像往常一样，Kendo
    UI解决方案的实施非常简单。
- en: Calendar widget – basics
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日历小部件 – 基础
- en: 'The Kendo UI Calendar widget transforms a simple HTML element, such as a `div`,
    into a specialized HTML table that displays a calendar. It also wires up JavaScript
    functionality to this table to support all of the Calendar widget events and methods.
    To see the simplest possible implementation of this widget, create a new action
    method in the Kendo controller so that we have a URL for "calendar":'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI 日历小部件将一个简单的HTML元素，例如`div`，转换成一个显示日历的专用HTML表格。它还为此表格连接JavaScript功能，以支持所有日历小部件事件和方法。要查看此小部件的最简单实现，请在Kendo控制器中创建一个新的操作方法，以便我们有一个“calendar”的URL：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then add a view for this action method and set up an empty `div` to hold a
    Kendo calendar widget:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然后为这个操作方法添加一个视图，并设置一个空的`div`来容纳Kendo日历小部件：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output is amazing considering how little code we have written:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们编写的代码如此之少，输出效果令人惊叹：
- en: '![Calendar widget – basics](img/4346OT_03_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![日历小部件 – 基础](img/4346OT_03_01.jpg)'
- en: Click around on the calendar and observe how much functionality it already has.
    The arrows at the top of the calendar navigate forward or backward by one month.
    The text at the top of the calendar, shown as **October 2012** in the preceding
    screenshot, navigates up to a broader level of dates which makes it easy to select
    a different year or decade. The date at the bottom of the calendar is a hyperlink
    that navigates directly to the current date. As we add functionality later in
    this chapter, we can make the calendar do even more.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在日历上点击并观察它已经具有多少功能。日历顶部的箭头可以向前或向后导航一个月。日历顶部的文本（如前一个截图中的**2012年10月**所示）可以导航到更广泛的日期级别，这使得选择不同的年份或十年变得容易。日历底部的日期是一个超链接，可以直接导航到当前日期。随着我们在本章后面添加功能，我们可以使日历做得更多。
- en: Configuring the Calendar widget
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置日历小部件
- en: 'Since the Calendar widget only has a few properties, let''s start by examining
    them and then move on to examples in using them. The calendar widget has two different
    types of properties:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于日历小部件只有少数属性，让我们先检查它们，然后再转到使用它们的示例。日历小部件有两种不同类型的属性：
- en: '**Data/template properties**: These properties configure the data behind the
    calendar widget'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据/模板属性**：这些属性配置了日历小部件背后的数据'
- en: '**Display/formatting properties**: These properties configure how the calendar
    is rendered on the page and how that data is formatted'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示/格式化属性**：这些属性配置了日历在页面上的渲染方式以及数据的格式化方式'
- en: 'Here are these properties listed in code format. Add this code to the page
    and run it:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里以代码格式列出这些属性。将此代码添加到页面并运行它：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The calendar, when configured as above, renders initially by showing a selection
    of months available within the currently selected year (`start: ''year''`). Since
    we have configured it to allow a navigation depth into each month (`depth: ''month''`)
    we can click on a month and then see that month and all of its available days:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '当日历配置如上所述时，它最初通过显示当前选中年份内可用的月份来渲染（`start: ''year''`）。由于我们已配置它允许进入每个月份的导航深度（`depth:
    ''month''`），我们可以点击一个月份，然后看到该月份及其所有可用日期：'
- en: '![Configuring the Calendar widget](img/4346OT_03_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![配置日历小部件](img/4346OT_03_02.jpg)'
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Even though the current view is "year", today's date is still visible within
    the footer of the calendar.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 即使当前视图是“年”，今天的日期仍然在日历页脚中可见。
- en: 'Speaking of the footer, let''s take a look at the data/template properties
    that the calendar makes available. The three main properties here are `data`,
    `month`, and `footer` and they are the primary way to customize the calendar widget.
    To demonstrate a simple example of customizing specific dates in a calendar, add
    this code to a page and run it:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到页脚，让我们看看日历提供的哪些数据/模板属性。这里的主要属性有三个：`data`、`month`和`footer`，它们是自定义日历小部件的主要方式。为了演示如何自定义日历中特定日期的简单示例，将以下代码添加到页面中并运行它：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let's step through this code together. First, we have a special style instruction
    for how special days are to be displayed. In this case, white text on an orange
    background with a solid black border. We also specify a Kendo UI template block
    with JavaScript to determine whether the date being rendered is one of our special
    days. If it is one of the special days, then we want the custom style applied
    to it; otherwise just render it as usual.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一起逐步分析这段代码。首先，我们有一个特殊的样式指令，用于显示特殊日期的方式。在这种情况下，橙色背景上的白色文本和实线黑色边框。我们还指定了一个Kendo
    UI模板块和JavaScript，以确定正在渲染的日期是否是我们特殊日期之一。如果是特殊日期之一，则我们希望将其应用自定义样式；否则，按常规渲染。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we define the actual configuration of the calendar widget. This is where
    the relationship between the `month` property and the `dates` property becomes
    apparent: the `dates` property supplies the data that the `month` property uses
    to render the days on the calendar. In the template that we have defined, we check
    to see if the current date being rendered is included in the `dates` array and
    then use `data.value` to render the number of the date currently executing. Notice
    also that we have prepended the dates in the `dateArray` with a plus sign `+`
    to force them into a numeric date that we can easily compare with `$.inArray()`.
    This is not a requirement in every case, but works for this example.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义日历小部件的实际配置。在这里，`month`属性和`dates`属性之间的关系变得明显：`dates`属性提供了`month`属性用来在日历上渲染日期所需的数据。在我们定义的模板中，我们检查当前正在渲染的日期是否包含在`dates`数组中，然后使用`data.value`来渲染当前正在执行的日期编号。注意，我们还将在`dateArray`中的日期前面加上加号`+`，以强制它们成为我们可以轻松与`$.inArray()`比较的数字日期。这不是每个情况下的要求，但适用于这个示例。
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The other things to note are the new property called `footer` that is used to
    render a template for the footer of the calendar, which has access to today's
    date through the `data` property passed to it. Also, note that the `month` object
    has another property called `empty` that is used to render dates that fall outside
    of the `min` or `max` property value ranges.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 其他需要注意的事项是，有一个名为`footer`的新属性，用于渲染日历页脚的模板，它可以通过传递给它的`data`属性访问今天的日期。此外，请注意，`month`对象还有一个名为`empty`的属性，用于渲染位于`min`或`max`属性值范围之外的日期。
- en: 'With the calendar set up in this way, it looks like this in the browser:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式设置日历后，在浏览器中的外观如下：
- en: '![Configuring the Calendar widget](img/4346OT_03_03.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![配置日历小部件](img/4346OT_03_03.jpg)'
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note the special display of the dates supplied through the `dateArray`, the
    dates out of range, and the new text used in the footer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意通过`dateArray`提供的日期的特殊显示、范围之外的日期以及页脚中使用的新的文本。
- en: Calendar Widget using MVC
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MVC的日历小部件
- en: 'The Calendar widget can also be configured through the ASP.NET MVC extension
    methods. To imitate the calendar we just created, you can replace the contents
    of your view with this code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 日历小部件也可以通过ASP.NET MVC扩展方法进行配置。为了模仿我们刚刚创建的日历，你可以用以下代码替换你的视图内容：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is the output when using this new code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此新代码的输出如下：
- en: '![Calendar Widget using MVC](img/4346OT_03_04.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![使用MVC的日历小部件](img/4346OT_03_04.jpg)'
- en: Pretty similar, isn't it? Note that the MVC extension hid the dates below `max`
    and `min` and didn't give us an empty property on the `month`. There are a few
    other unique things to note as well. First, notice that we are still using an
    array of dates through JavaScript inside the view. This is because the `month`
    template is running in JavaScript, not through MVC extensions, and needs access
    to this data on the client. Because of this, and because of the fact that the
    MVC extensions do not provide a `dates` property, we have to change the template
    from using `data.dates` to the actual name of the JavaScript array—`datesArray`.
    In this example, I typed out the template code directly into the MVC extension
    method, but there is also a method called `MonthTemplateId()` where you can pass
    the HTML `id` of the template already on the page.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 很相似，不是吗？注意，MVC扩展隐藏了`max`和`min`以下的日期，并且在`month`上没有提供空属性。还有一些其他独特的事情需要注意。首先，请注意我们仍然在视图中通过JavaScript使用日期数组。这是因为`month`模板是在JavaScript中运行的，而不是通过MVC扩展，并且需要在客户端访问这些数据。由于这个原因，以及MVC扩展不提供`dates`属性的事实，我们必须将模板从使用`data.dates`更改为实际的JavaScript数组名称——`datesArray`。在这个例子中，我直接将模板代码输入到MVC扩展方法中，但还有一个名为`MonthTemplateId()`的方法，你可以传递页面上已经存在的模板的HTML
    `id`。
- en: Also, remember to always call the `.Name()` method on every Kendo MVC extension
    object; it is required for the code to work. This is how the MVC extension methods
    assign a unique `name` and `id` attribute to the rendered HTML output, and how
    all of the JavaScript methods and events are properly wired up in the web browser.
    If you do not include the `.Name()` method, you will also see a runtime error
    when you try to run the page.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请记住始终在每个Kendo MVC扩展对象上调用`.Name()`方法；这是代码正常工作的必要条件。这就是MVC扩展方法如何为渲染的HTML输出分配唯一的`name`和`id`属性，以及如何将所有JavaScript方法和事件正确地连接到网页浏览器中。如果你不包括`.Name()`方法，当你尝试运行页面时，你也会看到运行时错误。
- en: Methods available on the Calendar widget
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日历小部件上的可用方法
- en: 'The Calendar widget exposes several methods that can be used to interact with
    it on the page. These methods can be used to configure the widget by changing
    its properties or firing specific functionality in real time. Here is a code form
    of the available methods specific to the Kendo UI Calendar widget:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 日历小部件公开了几个可以在页面上与之交互的方法。这些方法可以通过更改其属性或实时触发特定功能来配置小部件。以下是针对Kendo UI日历小部件的特定可用方法的代码形式：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s take an example of some of these and see it in action on our page. Modify
    the code we just created for the MVC view like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以其中的一些为例，看看它们在我们页面上的实际效果。修改我们为MVC视图创建的代码如下：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In order to use the calendar widget as a JavaScript object, we have to call
    the `.data()` function on the page element that contains the calendar that we
    created. Click the buttons on the page and see what they do. It should give you
    some idea of what the calendar widget can offer, and how you could plug your own
    interactive code into a calendar to improve the user experience.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将日历小部件作为JavaScript对象使用，我们必须在包含我们创建的日历的页面元素上调用`.data()`函数。点击页面上的按钮并观察它们的行为。这应该能给你一些关于日历小部件能提供什么以及如何将你自己的交互式代码插入日历以改善用户体验的思路。
- en: '![Methods available on the Calendar widget](img/4346OT_03_05.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![日历小部件上的可用方法](img/4346OT_03_05.jpg)'
- en: Events fired by the Calendar widget
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日历小部件触发的事件
- en: The Kendo UI calendar widget has two events—`change` and `navigate`. These events
    fire when the action after which they are named occurs. The `Change` fires when
    the selected date is changed, `navigate` fires when the calendar is navigated—such
    as when the month is changed or the view is moved up from "month" to "year".
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI日历小部件有两个事件——`change`和`navigate`。这些事件在它们命名的动作发生后触发。当选定的日期改变时，`Change`事件被触发，当日历被导航时（例如，当月份改变或视图从“月份”移动到“年份”时），`navigate`事件被触发。
- en: 'What if you wanted the calendar to only appear when a user selected a certain
    input box on a page, and then place its value into that input element? You could
    try something like this. Modify the final `script` block of the page that we are
    working on to look like this example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让日历只在用户在页面上选择某个输入框时出现，并将它的值放入该输入元素中，你会怎么做？你可以尝试这样做。修改我们正在工作的页面的最终`script`块，使其看起来像以下示例：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here we have some events, wired up by simple jQuery and jQuery UI, that show
    or hide the calendar and take its value when selected. The `change` event of the
    calendar is used to determine when to place the new date value into the input
    element of the page. This is how the page appears when first rendered.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一些由简单的 jQuery 和 jQuery UI 连接的事件，它们可以显示或隐藏日历，并在选择时获取其值。日历的 `change` 事件用于确定何时将新的日期值放入页面的输入元素中。这就是页面首次渲染时的样子。
- en: '![Events fired by the Calendar widget](img/4346OT_03_06.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![由日历小部件触发的事件](img/4346OT_03_06.jpg)'
- en: The calendar is hidden until the user clicks into the first textbox. As soon
    as that happens, the events we wired up cause the calendar to appear so that the
    use can select the appropriate date for the page.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 日历在用户点击第一个文本框之前是隐藏的。一旦发生这种情况，我们连接的事件就会使日历出现，以便用户可以选择页面的适当日期。
- en: '![Events fired by the Calendar widget](img/4346OT_03_07.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![由日历小部件触发的事件](img/4346OT_03_07.jpg)'
- en: Summary
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The Kendo UI calendar widget is easy to configure, and offers a rich element
    on your page that can make working with dates a much simpler task. It can be configured
    from either JavaScript or MVC extensions and makes use of Kendo templates for
    highly customizable formatting and display. I have only shown basic examples of
    what can be done with the templates and events; you can take these and run with
    them to create some very useful interactive content.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI 日历小部件易于配置，并在您的页面上提供了一个丰富的元素，可以使处理日期变得简单得多。它可以由 JavaScript 或 MVC 扩展进行配置，并使用
    Kendo 模板进行高度可定制的格式化和显示。我仅展示了使用模板和事件可以完成的基本示例；您可以使用这些示例来创建一些非常有用的交互式内容。
- en: In the next chapter we will learn about one of the most powerful features of
    the Kendo UI framework of all, the Model-View-ViewModel (MVVM) framework. This
    framework lets you bind data and functionality to your page through simple HTML
    attributes and enable real-time changes to your data, or to a server, with immediate
    feedback for the user. The MVVM framework is a great tool that you will want to
    use in all of your pages.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习 Kendo UI 框架中最强大的功能之一，即模型-视图-视图模型（MVVM）框架。这个框架允许您通过简单的 HTML 属性将数据和功能绑定到您的页面上，并启用对数据的实时更改，或对服务器进行更改，同时为用户提供即时反馈。MVVM
    框架是一个您希望在所有页面上都想要使用的强大工具。
