- en: Chapter 9. Tidying up Your Code Using OOP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 使用OOP整理你的代码
- en: In this chapter, we are going to learn about **object-oriented programming**
    (**OOP**) and discuss the code of the famous game, **Hangman**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习**面向对象编程**（**OOP**）并讨论著名游戏**Hangman**的代码。
- en: '"OOP is a programming paradigm that uses abstraction to create models based
    on the real world. OOP uses several techniques from previously established paradigms,
    including modularity, polymorphism, and encapsulation." or "OOP languages typically
    are identified through their use of classes to create multiple objects that have
    the same properties and methods."'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '"面向对象编程（OOP）是一种使用抽象来创建基于现实世界的模型的编程范式。OOP使用了之前确立的范式中的几种技术，包括模块化、多态性和封装。" 或者
    "面向对象编程语言通常通过它们使用类来创建具有相同属性和方法的多重对象来识别。"'
- en: 'You probably have assumed that JavaScript is an object-oriented programming
    language. Yes, you are absolutely correct. Let''s see why it is an OOP language.
    If a computer programming language has the following few features, we call it
    object oriented:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经假设JavaScript是一种面向对象编程语言。是的，你完全正确。让我们看看为什么它是面向对象的。如果一个计算机编程语言具有以下几个特性，我们称之为面向对象：
- en: Inheritance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承
- en: Polymorphism
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多态性
- en: Encapsulation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封装
- en: Abstraction
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象
- en: 'Before going any further, let''s discuss **objects**. We create objects in
    JavaScript in the following manner:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们来讨论一下**对象**。我们在JavaScript中以以下方式创建对象：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We created an object for a person. We added few properties of person.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为一个人创建了一个对象。我们添加了一些人的属性。
- en: If we want to access any of the property of the object, we need to call the
    property.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想访问对象的任何属性，我们需要调用该属性。
- en: 'Consider that you want to have a popup of the `name` property of the preceding
    `person` object. You can do this with the following method:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想显示前一个`person`对象的`name`属性弹窗。你可以使用以下方法来完成：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can write the preceding code as shown in the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将前面的代码写成以下形式：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Inheritance in JavaScript
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript中的继承
- en: To inherit means derive something (such as, characteristics, quality, and so
    on) from one's parents or ancestors. In programming languages, when a class or
    object is based on another class or object in order to maintain the same behavior
    of the parent class or object is known as **inheritance**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 继承意味着从父母或祖先那里获得某些东西（例如，特征、品质等）。在编程语言中，当一个类或对象基于另一个类或对象，以保持父类或对象的行为时，这被称为**继承**。
- en: We can also say that this is a concept of gaining properties or behaviors of
    something else.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以说这是一个获取其他事物属性或行为的概念。
- en: Suppose, X inherits something from Y; it is like X is a type of Y.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 假设X从Y那里继承了一些东西；这就像X是Y的一种类型。
- en: JavaScript occupies the inheritance capability. Let's take a look at an example.
    A bird inherits from an animal as a bird is a type of animal. Therefore, a bird
    can do the same thing that an animal does.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript具有继承能力。让我们看看一个例子。鸟从动物那里继承，因为鸟是动物的一种。因此，鸟可以做动物能做的事情。
- en: 'This kind of relationship in JavaScript is a little complex and needs a syntax.
    We need to use a special object called `prototype`, which assigns the properties
    to a type. We need to remember that only function has prototypes. Our `Animal`
    function should look similar to the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，这种关系稍微复杂一些，需要一种语法。我们需要使用一个特殊对象，称为`prototype`，它将属性分配给一个类型。我们需要记住，只有函数才有原型。我们的`Animal`函数应该看起来类似于以下内容：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To add a few properties of the function, we need to add a prototype as shown
    in the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一些函数的属性，我们需要添加一个原型，如下所示：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s create prototypes for our `Bird` function. Our function and prototypes
    should look similar to the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的`Bird`函数创建原型。我们的函数和原型应该看起来类似于以下内容：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The result of the prototypes and function is that any `Bird` that you create
    will have the properties of `Animal` and `Bird`. However, if you create `Animal`,
    this will only have the properties of `Animal`. The properties of `Animal` are
    inherited by `Bird`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 原型和函数的结果是，你创建的任何`Bird`都将具有`Animal`和`Bird`的属性。然而，如果你创建`Animal`，这将只具有`Animal`的属性。`Animal`的属性被`Bird`继承。
- en: Therefore, we can say that JavaScript has inheritance property.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以说JavaScript具有继承属性。
- en: Encapsulation in JavaScript
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript中的封装
- en: In OOP, **encapsulation** is one of the most important concepts that allows
    an object to group the members of public and private classes under a single name.
    We use encapsulation to protect our classes against accidental or willful folly.
    Encapsulation means to enclose something in or as if something is in a capsule.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象编程（OOP）中，**封装**是允许对象将公共和私有类的成员组合在一个单一名称下的最重要的概念之一。我们使用封装来保护我们的类免受意外或故意的错误。封装意味着将某物封装在或好像它在一个胶囊中。
- en: 'Now, we will see whether JavaScript supports encapsulation. If it does, we
    can say that JavaScript is an OOP language. Let''s take a look at the following
    example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看看JavaScript是否支持封装。如果它支持，我们可以说JavaScript是一种面向对象编程语言。让我们看看以下示例：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we run this on the console. The first alert box will print the following
    image:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在控制台运行这段代码，第一个警告框将显示以下图片：
- en: '![Encapsulation in JavaScript](img/B04720_09_01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript中的封装](img/B04720_09_01.jpg)'
- en: 'We changed the variable `name` to `John`. Therefore, the second alert box will
    be similar to the following image:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将变量`name`改为`John`。因此，第二个警告框将与以下图片相似：
- en: '![Encapsulation in JavaScript](img/B04720_09_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript中的封装](img/B04720_09_02.jpg)'
- en: What would happen if we accidently assigned a number to the `name` variable?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们意外地将数字赋值给`name`变量会发生什么？
- en: 'Assigning a number to the `name` variable is perfectly acceptable. As far as
    JavaScript is concerned, a variable can accept any type of data as its value.
    However, we don''t want a number in the place of a name. What do we do? We can
    use JavaScript''s encapsulation property, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将数字赋值给`name`变量是完全可接受的。就JavaScript而言，一个变量可以接受任何类型的数据作为其值。然而，我们不想用数字代替名字。我们该怎么办？我们可以使用JavaScript的封装属性，如下所示：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, if we run the above code on console, the first output will show a popup
    with **Harry Potter** as we only called the `getName()` function. The `getName()`
    function has an initial value, which is `Harry Potter`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们把上面的代码在控制台运行，第一个输出将显示一个弹出窗口，显示**哈利·波特**，因为我们只调用了`getName()`函数。`getName()`函数有一个初始值，即`Harry
    Potter`：
- en: '![Encapsulation in JavaScript](img/B04720_09_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript中的封装](img/B04720_09_03.jpg)'
- en: 'The second output will be as follows as we changed the `Name` property of `person`
    to `John` and again called the `getName()` function:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第二次输出如下，因为我们改变了`person`的`Name`属性为`John`，并再次调用了`getName()`函数：
- en: '![Encapsulation in JavaScript](img/B04720_09_04.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript中的封装](img/B04720_09_04.jpg)'
- en: 'The third output will be as shown in the following as we tried to push a number
    to a string variable. A name cannot be an integer, therefore, **Invalid Name**
    popped up as we had a condition under the `if` statement:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第三次输出将如下所示，因为我们尝试将一个数字推送到字符串变量中。名字不能是整数，因此，在`if`语句下出现了**无效名称**：
- en: '![Encapsulation in JavaScript](img/B04720_09_05.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript中的封装](img/B04720_09_05.jpg)'
- en: 'The fourth output will be as shown in the following as the number was not added
    to the person''s `Name` property. Therefore, we will get the last data that we
    pushed to the `Name` property:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第四次输出将如下所示，因为数字没有被添加到人的`Name`属性中。因此，我们将得到最后推送到`Name`属性中的数据：
- en: '![Encapsulation in JavaScript](img/B04720_09_06.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript中的封装](img/B04720_09_06.jpg)'
- en: We can now confirm that JavaScript supports encapsulation.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以确认JavaScript支持封装。
- en: 'JavaScript also supports **polymorphism** and **abstraction**. If you would
    like to read about them, you can refer to the following link:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript也支持**多态**和**抽象**。如果你想了解它们，可以参考以下链接：
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript)'
- en: Let's do something fun. You may have heard of the game called Hangman. We'll
    discuss the OOP in that game. First, let's introduce you to the game.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来做些有趣的事情。你可能听说过一个叫做“猜字谜”的游戏。我们将讨论这个游戏中面向对象编程（OOP）的应用。首先，让我们来介绍一下这个游戏。
- en: 'The player needs to guess a word. If he can guess the word correctly, he is
    safe; otherwise, he will be hanged. Take a look at the following image to get
    the clear idea about the game, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家需要猜一个单词。如果他猜对了单词，他就安全了；否则，他将被绞死。看看以下图片，以获得关于游戏的清晰概念，如下所示：
- en: '![Encapsulation in JavaScript](img/B04720_09_07.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript中的封装](img/B04720_09_07.jpg)'
- en: Dissecting Hangman
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拆解猜字谜
- en: 'There are two folders and an HTML file for the Hangman game. The two folders
    are named as `css` and `js`. The `index.html` HTML file should contain the following
    code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Hangman游戏有两个文件夹和一个HTML文件。这两个文件夹分别命名为`css`和`js`。`index.html` HTML文件应该包含以下代码：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `css` folder should have a `styles.css` file. The `styles.css` file should
    contain the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`css`文件夹应该有一个`styles.css`文件。`styles.css`文件应该包含以下代码：'
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There should be two JavaScript files in the `js` folder, `angular.min.js` and
    `hangman.js`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`js`文件夹中应该有两个JavaScript文件，`angular.min.js`和`hangman.js`。'
- en: The `angular.min.js` file is a framework. You can download it from [https://angularjs.org/](https://angularjs.org/)
    or it is available with the code bundle of the book.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`angular.min.js`文件是一个框架。您可以从[https://angularjs.org/](https://angularjs.org/)下载它，或者它包含在本书的代码包中。'
- en: 'The `hangman.js` file should have the following code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`hangman.js`文件应该包含以下代码：'
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let's discuss the code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下代码。
- en: We used `var hangman = angular.module('hangman', []).controller('StartHangman',
    StartHangman);` to import our `angular.min.js` file and start controlling the
    rest of our game's code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`var hangman = angular.module('hangman', []).controller('StartHangman',
    StartHangman);`来导入我们的`angular.min.js`文件并开始控制游戏代码的其余部分。
- en: We wrote a `StartHangman($scope, $document) {}` function, where we will write
    our code. We passed two variables, `$scope` and `$document`, from our `angular.min.js`
    file.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了一个`StartHangman($scope, $document) {}`函数，我们将在这里编写代码。我们从`angular.min.js`文件中传递了两个变量，`$scope`和`$document`。
- en: 'We initialized few variables, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们初始化了一些变量，如下所示：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We wrote two functions for winning and losing the game, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了两个函数，用于游戏的胜利和失败，如下所示：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We have fixed our number of guesses here. Then, we wrote a function to start
    our game. We made an object and used the inheritance property of JavaScript, as
    shown in the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里固定了猜测次数。然后，我们编写了一个开始游戏的函数。我们创建了一个对象，并使用了JavaScript的继承属性，如下所示：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We took an input from the player in order to store as our secret word.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从玩家那里获取输入以便将其存储为我们秘密的单词。
- en: 'The prompt page of the game will look similar to the following image:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏的提示页面将类似于以下图片：
- en: '![Dissecting Hangman](img/B04720_09_08.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![剖析Hangman](img/B04720_09_08.jpg)'
- en: Then, our most important function, `$scope.guess = function(ch){}`, was introduced.
    We passed a character to the function and checked whether it matches any letters
    entered by the player with the secret word.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们最重要的函数`$scope.guess = function(ch){}`被引入。我们向该函数传递一个字符，并检查它是否与玩家输入的秘密单词中的任何字母匹配。
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned the characteristics of an OOP language. We also
    saw the uses of the OOP characteristics in the famous game, Hangman! I hope you
    enjoyed creating and playing Hangman. We will see the possibilities of JavaScript
    in the next and final chapter of this book.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了面向对象语言的特点。我们还看到了在著名的Hangman游戏中使用面向对象特性的例子！我希望你喜欢创建和玩Hangman。我们将在本书的下一章和最后一章中看到JavaScript的可能性。
