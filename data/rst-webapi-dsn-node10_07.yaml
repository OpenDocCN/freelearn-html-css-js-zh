- en: Preparing a RESTful API for Production
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为生产准备RESTful API
- en: In the previous chapter, we implemented a full fledged catalog RESTful API;
    however, there is a difference between a completely functional API and a production-ready
    one. In this chapter, we will cover how an API should be documented and tested
    thoroughly. These key requirements have to be completed by any piece of software
    before going productive.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们实现了一个完整的目录RESTful API；然而，一个完全功能的API和一个可投入生产的API之间存在差异。在本章中，我们将介绍API应该如何进行全面的文档记录和测试。在投入生产之前，任何软件都必须完成这些关键要求。
- en: 'To sum up, in this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，在本章中，我们将涵盖以下主题：
- en: Documenting RESTful APIs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录RESTful API
- en: Testing RESTful APIs with Mocha
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mocha测试RESTful API
- en: The microservices revolution
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务革命
- en: Documenting RESTful APIs
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录RESTful API
- en: 'Until now, we partially covered how RESTful web services APIs are described
    by wadl and documented by swagger specifications. Now it''s time to take full
    advantage of them and expose their self-descriptive metadata in express.js routes
    in our catalog application. That way, both consumers and end users will have separate
    URLs for the metadata they will need to adopt the service easily. Let''s start
    with the wadl definitions. Here''s how an operation is fully described by wadl:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们部分地介绍了RESTful web服务API是如何由`wadl`描述和由`swagger`规范记录的。现在是时候充分利用它们，在我们的目录应用程序的express.js路由中公开它们的自描述元数据。这样，消费者和最终用户将有单独的URL来获取他们需要轻松采用服务的元数据。让我们从wadl定义开始。以下是`wadl`如何完全描述一个操作的方式：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Each route thoroughly describes all the operations it exposes; that way, they
    will be indexed and discoverable by clients compliant with the `wadl` specification.
    Once you have all your operations described, simply store the `wadl` file in the
    `static` directory of your `express.js` project and expose it from application:
    `app.use(''/catalog/static'', express.static(''static''));`'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每个路由都彻底描述了它所暴露的所有操作；这样，它们将被符合`wadl`规范的客户端索引和发现。一旦你描述了所有的操作，只需将`wadl`文件存储在你的`express.js`项目的`static`目录中，并从应用程序中公开它：`app.use('/catalog/static',
    express.static('static'));`
- en: After starting your application locally, your `wadl` file will be ready to serve
    clients at `http://localhost:3000/catalog/static/catalog.wadl`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地启动应用程序后，你的`wadl`文件将准备好在`http://localhost:3000/catalog/static/catalog.wadl`上为客户端提供服务。
- en: 'Let''s give that a try and import it to Postman:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试并将其导入到Postman中：
- en: '![](img/f8ad76fb-4325-4b5b-96f6-190768f907c7.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8ad76fb-4325-4b5b-96f6-190768f907c7.png)'
- en: Importing wadl file into Postman. This is a screenshot for Postman. The individual
    settings are not important here. The purpose of the image is just to show how
    the window looks.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 将wadl文件导入到Postman。这是Postman的截图。这里个别设置并不重要。图片的目的只是展示窗口的外观。
- en: Serving the `wadl` file statically will help your application in getting indexed
    by search engines; this further increases the adoption of your API.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 静态地提供`wadl`文件将有助于你的应用程序被搜索引擎索引；这进一步增加了你的API的采用率。
- en: 'However, slowly but surely, `wadl` is losing grip in favor of `swagger`. The
    evolution of JavaScript REST-enabled applications has led to the requirement of
    the non-XML based standard for discovering RESTful services. That is the reason
    for `swagger` to become the de facto standard, not only for documenting RESTful
    services, but also for its widely adopted discovery format. While XML-aware platforms
    are still relying on `wadl`, JavaScript and other non XML-native platforms are
    heavily relying on the `swagger` specification, not only for description but also
    for discovery and consumption, and its adoption is progressing rapidly. So you
    should consider having your APIs described in `swagger` to ensure easy adoption
    from any platform out there. Here''s how an operation is fully described in a
    `swagger` dialect:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`wadl`正逐渐失去地位，而`swagger`则更受青睐。JavaScript REST-enabled应用程序的发展导致了对非XML标准的RESTful服务发现的需求。这就是为什么`swagger`成为事实上的标准的原因，不仅用于记录RESTful服务，还用于其广泛采用的发现格式。虽然XML-aware平台仍然依赖于`wadl`，但JavaScript和其他非XML本地平台在`swagger`规范上有很大依赖，不仅用于描述，还用于发现和消费，其采用速度正在迅速增加。因此，你应该考虑使用`swagger`描述你的API，以确保它能够轻松地被任何平台采用。以下是`swagger`方言中如何完全描述一个操作的方式：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, after having all the APIs'' operations described in a `swagger.json`
    file, it should be statically exposed, similar to the `wadl` file. Since the application
    already has a route for the static directory, just place the `swagger.json` file
    there, and it will be ready for serving consumers and promoting discovery. `Swagger`,
    being mainly a documentation tool, however, mainly targets developers; thus, it
    needs a frontend that makes the documentation easy to read and understand. There
    is an `npm` module—`swagger-ui`—that wraps up the default swagger frontend for
    us. We will adopt it in our application, so let''s use the package manager to
    install it—`npm install swagger-ui`. Once installed, simply require an instance
    of the module along with an instance of the static `swagger.json` file and use
    them in a separate route:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`swagger.json`文件中描述了所有API的操作后，它应该被静态地公开，类似于`wadl`文件。由于应用程序已经有了静态目录的路由，只需将`swagger.json`文件放在那里，它就可以为消费者提供服务并促进发现。`Swagger`主要是一个文档工具，但主要面向开发者；因此，它需要一个使文档易于阅读和理解的前端。有一个`npm`模块——`swagger-ui`——为我们提供了默认的swagger前端。我们将在我们的应用程序中采用它，所以让我们使用包管理器来安装它——`npm
    install swagger-ui`。安装完成后，只需要求模块的一个实例以及静态`swagger.json`文件的一个实例，并在一个单独的路由中使用它们：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Start your application and request `http://localhost:3000/catalog/api-docs/`
    in a browser:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中启动你的应用程序并请求`http://localhost:3000/catalog/api-docs/`：
- en: '![](img/5f3a352d-f327-4759-9979-621b2388988d.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f3a352d-f327-4759-9979-621b2388988d.png)'
- en: As you can see, the swagger-ui module provided the standard swagger frontend
    for you.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，swagger-ui模块为你提供了标准的swagger前端。
- en: Keep in mind that, as a developer, keeping your API documentation in a shape
    and up to date is your responsibility.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，作为开发者，保持你的API文档的完整和最新是你的责任。
- en: Testing RESTful APIs with Mocha
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Mocha测试RESTful API
- en: 'Have you noted that the `app.js` express application created with `express-generator`
    is actually a `node.js` module exporting the express instance? In case you have,
    you must have asked yourself why that is actually needed. Well, having the express
    instance exported as a module enables it to be unit-tested. We already utilized
    the `mocha` framework in [Chapter 4](3332b6f7-ed61-4fc6-a674-5e8c4952aa77.xhtml),
    *Using NoSQL Databases,* where we developed a unit test for the `CatalogItem`
    module. We will use `mocha` once again and wrap a unit test around each operation
    API exposes. To unit-test the express application, we will need to do the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否注意到`app.js` express应用程序是用`express-generator`创建的，实际上是一个导出express实例的`node.js`模块？如果你有，你一定会问自己为什么需要这样做。嗯，将express实例导出为模块使其能够进行单元测试。我们已经在[第4章](3332b6f7-ed61-4fc6-a674-5e8c4952aa77.xhtml)中使用了`mocha`框架，*使用NoSQL数据库*，在那里我们为`CatalogItem`模块开发了一个单元测试。我们将再次使用`mocha`，并为API公开的每个操作包装一个单元测试。要对express应用程序进行单元测试，我们需要执行以下操作：
- en: Require an instance to the `express.js` application with the routes, making
    use of its being exported as a module
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要一个带有路由的`express.js`应用程序实例，利用其作为模块导出
- en: Start the `express.js` instance in unit test environment
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单元测试环境中启动`express.js`实例
- en: Invoke its operations via a test library and assert against the results
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过测试库调用其操作并断言结果
- en: Finally, execute the `npm test` command to trigger the unit test
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，执行`npm test`命令来触发单元测试
- en: Before moving on and implementing mocha tests, we need a library for sending
    HTTP requests from the unit tests; we will make use of the `chai` module. It provides
    convenient functions for sending HTTP requests, and it also bundles the `should.js`
    assertion library to verify the expected results. To install `chai`, simply execute
    `npm install chai` and then its `npm install chai-http` HTTP plugin, and we are
    ready to start unit testing!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续实施mocha测试之前，我们需要一个库来从单元测试中发送HTTP请求；我们将利用`chai`模块。它提供了方便的函数来发送HTTP请求，还捆绑了`should.js`断言库来验证预期结果。要安装`chai`，只需执行`npm
    install chai`，然后执行`npm install chai-http`来安装其HTTP插件，我们就可以开始单元测试了！
- en: 'As with any other mocha test, we will have to carry out the given steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他mocha测试一样，我们将不得不执行以下步骤：
- en: Describe each test case
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述每个测试用例
- en: Prepare the test fixture; this time, we will be using `chai-http` for invoking
    the rest operations
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备测试装置；这次，我们将使用`chai-http`来调用REST操作
- en: Assert against the returned results
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 断言返回的结果
- en: 'A basic unit test covering the operations for creating, accessing, and deleting
    resources looks like the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 涵盖创建、访问和删除资源操作的基本单元测试如下：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Store this file in the test directory of your project; this directory is defined
    as a test directory in the `package.json` by default, so to run the unit test,
    just execute `npm test`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件存储在项目的测试目录中；默认情况下，该目录在`package.json`中被定义为测试目录，因此要运行单元测试，只需执行`npm test`：
- en: '![](img/5d631466-3680-4d73-a8f4-84fea9173b23.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d631466-3680-4d73-a8f4-84fea9173b23.png)'
- en: Congratulations! Now you have your API covered with unit tests, and note that
    the tests aren't mocking anything! They are running the express application; exactly
    the same way, the application will be run when it becomes productive, ensuring
    stability and backward compatibility! Currently, the unit test asserts only against
    status code. Spend some time with it and extend them further to assert against
    the response body as well. This will be a good exercise.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！现在你的API已经覆盖了单元测试，注意测试并没有模拟任何东西！它们正在运行express应用程序；当应用程序变得生产时，它们将以完全相同的方式运行，确保稳定性和向后兼容性！目前，单元测试仅断言状态码。花一些时间并进一步扩展它们，以便对响应主体进行断言。这将是一个很好的练习。
- en: The microservices revolution
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务革命
- en: It wasn't very long ago when the RESTful API madness started and almost everyone
    decided that RESTful APIs were the right way to go, was it? With `Linux` containers
    available, it turned out that switching to the REST approach was only half of
    the way. Currently, everyone is benefiting from containers. They provide better,
    faster, and cheaper development and operational model, but are microservices just
    yet another buzz term for RESTful services? Well, no, not at all; RESTful services
    are just the foundation of microservices.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API疯狂开始并且几乎每个人都决定RESTful API是正确的方式，是不是？随着`Linux`容器的出现，结果表明转向REST方法只是一半的路。目前，每个人都从容器中受益。它们提供了更好、更快、更便宜的开发和运营模式，但是微服务只是RESTful服务的另一个炒作术语吗？嗯，不，完全不是；RESTful服务只是微服务的基础。
- en: Microservices are small and independent processes exposing a simple interface
    that allows communication with them and building complex applications without
    depending on library artefacts. These services resemble small building blocks,
    highly decoupled and focused on doing a small task, facilitating a modular approach
    to system-building.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是小型和独立的进程，公开了一个简单的接口，允许与它们进行通信并构建复杂的应用程序，而不依赖于库工件。这些服务类似于小型构建块，高度解耦并专注于执行小任务，促进了系统构建的模块化方法。
- en: While REST emphasizes on resources and their natural handling, the microservices
    architecture emphasizes on simplicity, fail-safeness, and isolation. A RESTful
    API doesn't have separate states per operation; it is either that the entire API
    is available or it is completely down. Microservices attempt to solve that problem,
    providing means to host each operation on a separate container, or subset of containers,
    ensuring maximum fault tolerance and agility.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然REST强调资源及其自然处理，但微服务架构强调简单性、故障安全性和隔离性。RESTful API没有每个操作的单独状态；要么整个API可用，要么完全不可用。微服务试图解决这个问题，提供了在单独的容器上托管每个操作，或者容器的子集，确保最大的容错能力和灵活性。
- en: A microservice is expected to provide a single simple action, nothing more.
    This enables developers to group and consume them exactly the way they want. Policy
    handling, governance, security, and monitoring are usually out of the scope when
    dealing with microservices, mainly because they require some kind of context.
    In general, binding context to a service increases its dependencies and makes
    it less reusable; this is why microservices leave context to API management gateways,
    which allow you to create a composite of microservices and then bind a policy
    to it and monitor every activity on the gateway. This distribution development
    model empowers programmers to rapidly grow a collection of microservices without
    considering complex topics such as governance and security.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务预期提供单一简单的操作，没有更多。这使开发人员可以按照他们想要的方式对它们进行分组和使用。处理策略、治理、安全和监控通常不在微服务处理范围内，主要是因为它们需要某种上下文。总的来说，将上下文绑定到服务会增加其依赖性并使其可重用性降低；这就是为什么微服务将上下文留给API管理网关的原因，它允许您创建微服务的组合，然后将策略绑定到它，并监视网关上的每个活动。这种分布式开发模型使程序员能够快速构建一系列微服务，而无需考虑治理和安全等复杂主题。
- en: The microservices world is a game changer, benefiting from Linux containers.
    Currently, all cloud-based offerings similar to AWS and Azure provide microservices
    hosting.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务世界是一个改变游戏规则的世界，受益于Linux容器。目前，类似于AWS和Azure的所有基于云的服务都提供微服务托管。
- en: Summary
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we stepped slightly aside from `Express.js` related topics.
    Instead, we concentrated on how to productionize our code base by providing up-to-date
    API documentation, along with the API itself. We had our application invest in
    precautionary measures for ensuring backward compatibility by implementing more
    complex unit tests that actually target close-to-real-life implementation. Finally,
    we decided to look into the future, which is all about microservices. Ensure that
    you keep this hot topic up in your skill-list; it will inevitably evolve in the
    near future, and the more you know about it, the better!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们稍微偏离了与`Express.js`相关的主题。相反，我们集中讨论了如何通过提供最新的API文档以及API本身来使我们的代码基础投入生产。我们让我们的应用程序投资于预防措施，以确保通过实施更复杂的单元测试来实现向后兼容性。最后，我们决定展望未来，这一切都与微服务有关。确保您将这一热门话题保持在您的技能清单中；它将不可避免地在不久的将来发展，您对它了解得越多，就越好！
