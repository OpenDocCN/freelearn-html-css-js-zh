- en: Using Physics to Create a Force-Directed Graph
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用物理创建力导向图
- en: This chapter will cover how to make a force-directed graph that will visualize
    the relationships between various nodes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍如何制作一个力导向图，以可视化各个节点之间的关系。
- en: 'In this lesson, you will learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课中，你将学习以下主题：
- en: Creating a physics-based force that will center nodes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个基于物理的力，使节点居中
- en: Creating a physics-based force that make the nodes repel each other
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个基于物理的力，使节点相互排斥
- en: Creating a physics-based force that will link the nodes to show their relationships
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个基于物理的力，将节点链接起来以显示它们的关系
- en: The complete code for this section can be found at [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter07](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter07).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本节完整的代码可以在[https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter07](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter07)找到。
- en: What is a force-directed graph?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是力导向图？
- en: A **force**-**directed** **graph** is a graph that is affected by various forces
    (such as gravity and repulsion). It can be extremely helpful when creating graphs
    of relationships.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**力导向**图是一种受各种力（如重力和排斥力）影响的图。在创建关系图时，它可能非常有帮助。'
- en: How to set up a graph of relationships
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何设置关系图
- en: The following sections will provide an overview of what we're going to build.
    The overview will cover the display side and the physics side of the implementation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分将概述我们将要构建的内容。概述将涵盖实现的显示方面和物理方面。
- en: Display
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示
- en: 'The display aspect controls what we see; the display will include the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 显示方面控制我们看到的内容；显示将包括以下内容：
- en: A list of nodes representing people, displayed as circles
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个表示人员的节点列表，以圆形的形式显示
- en: A list of links representing connections between people, displayed as lines
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示人员之间连接的链接列表，以线条的形式显示
- en: Physics
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理
- en: 'The physics of the simulation control how the elements interact, as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟的物理控制元素如何交互，如下所示：
- en: A centering force at the center of the SVG will draw all of the nodes toward
    it
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVG中心的居中力将使所有节点向其移动
- en: A repulsive force on each node will prevent the nodes from getting too close
    to each other
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个节点上的排斥力将防止节点彼此靠得太近
- en: Link forces will connect each of the nodes, so that they don't repel each other
    too much
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接力将连接每个节点，以便它们不会相互排斥得太厉害
- en: Setting up the HTML
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置HTML
- en: 'Our file will be a pretty standard `index.html` file, but we''ll need two `<g>`
    elements, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的文件将是一个相当标准的`index.html`文件，但我们需要两个`<g>`元素，如下所示：
- en: 'One to contain the nodes (**people**: circles)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于包含节点（**人员**：圆形）
- en: 'One to contain the links (**relationship**: lines)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于包含链接（**关系**：线条）
- en: 'Here''s what our code should look like:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们代码应该看起来像的：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Setting up styling for nodes and links
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为节点和链接设置样式
- en: 'Create an `app.css` file for our circles (nodes/people) and lines (links/relationships),
    as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为我们的圆形（节点/人员）和线条（链接/关系）创建一个`app.css`文件，如下所示：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Don''t forget to create a link to it in your `index.html` file, as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在`index.html`文件中创建指向它的链接，如下所示：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Setting up the SVG
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置SVG
- en: 'At the top of our `app.js` file, add the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`app.js`文件顶部添加以下内容：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we open `index.html` in Chrome and look at Elements in the Developer tools,
    we should see the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在Chrome中打开`index.html`并查看开发者工具中的元素，我们应该看到以下内容：
- en: '![](img/16f08b43-ba5d-4f3b-a62c-3b96f7d00010.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/16f08b43-ba5d-4f3b-a62c-3b96f7d00010.png)'
- en: Adding data for people
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加人员的数据
- en: 'Let''s create an array of people at the bottom of `app.js`, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`app.js`文件的底部创建一个人员数组，如下所示：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Adding data for relationships
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加关系的数据
- en: 'Now, let''s create the relationships by adding the following array to the bottom
    of `app.js`. Note that the attributes must be `source` and `target`, in order
    for D3 to do its magic:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过在`app.js`文件的底部添加以下数组来创建关系。请注意，属性必须是`source`和`target`，以便D3执行其魔法：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Add circles to the SVG
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将圆形添加到SVG中
- en: 'Add the following to the bottom of `app.js`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到`app.js`文件的底部：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will create a circle for each element in our `nodesData` array. Our Developer
    tools should look as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为`nodesData`数组中的每个元素创建一个圆形。我们的开发者工具应该看起来如下所示：
- en: '![](img/58ec4cff-78b6-4ac3-a9c6-a43b50452483.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/58ec4cff-78b6-4ac3-a9c6-a43b50452483.png)'
- en: Adding lines to the SVG
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将线条添加到SVG中
- en: 'Add the following to the bottom of `app.js`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到`app.js`文件的底部：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will create a line for each element in our `linksData` array. Our Developer
    tools should look as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为我们的 `linksData` 数组中的每个元素创建一条线。我们的开发者工具应该如下所示：
- en: '![](img/753db92b-2732-4ce4-b2c2-ed84e79a3064.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/753db92b-2732-4ce4-b2c2-ed84e79a3064.png)'
- en: Creating a simulation
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个模拟
- en: 'Now, we''ll generate a simulation by adding the following to the bottom of
    `app.js`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在 `app.js` 的底部添加以下内容来生成一个模拟：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note that this simply creates a simulation; it doesn''t specify how the simulation
    should run. Let''s tell it which data to act on by modifying the previous line
    of code, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这仅仅创建了一个模拟；它没有指定模拟应该如何运行。让我们通过修改之前的代码行来告诉它应该作用于哪些数据，如下所示：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Specifying how the simulation affects visual elements
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定模拟如何影响视觉元素
- en: 'At this point, our visualization still looks the same, as indicated by the
    following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们的可视化效果仍然看起来一样，如下面的截图所示：
- en: '![](img/c04f2e60-4f3f-4ee8-9c9e-8b1b079df294.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c04f2e60-4f3f-4ee8-9c9e-8b1b079df294.png)'
- en: 'Let''s make our simulation affect the circles/lines that we created, as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们的模拟影响我们创建的圆圈/线条，如下所示：
- en: The simulation runs **ticks**, which run very quickly. Think of this a series
    of steps that happen very quickly, like the ticking of a stopwatch, but faster.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟运行 **ticks**，它们运行得非常快。想象一下这是一系列非常快速发生的步骤，就像秒表的滴答声，但更快。
- en: Each time a new tick occurs, you can update the visual elements. This allows
    our simulation to animate.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每当发生一个新的 tick 时，你可以更新视觉元素。这允许我们的模拟进行动画。
- en: D3 will calculate and tack positional data onto our regular data, so that we
    can make use of it.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3 将计算并将位置数据附加到我们的常规数据上，以便我们可以使用它。
- en: 'Add the following to the bottom of `app.js`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到 `app.js` 的底部：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, our circles distance themselves from each other a little bit, but this
    is just a side effect of not having any forces attached to them. We''ll add forces
    next:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的圆圈彼此之间稍微远离一些，但这只是没有附加任何力的副作用。我们将添加力：
- en: '![](img/97c9e4f7-fe37-4ac5-9e5d-1dec8cfbb1e9.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97c9e4f7-fe37-4ac5-9e5d-1dec8cfbb1e9.png)'
- en: Creating forces
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建力
- en: 'Let''s create a centering force at the center of screen, which will pull all
    of the elements toward it. Adjust the code that we added in the previous step,
    so that it looks as follows. Not that we only add `.force("center_force", d3.forceCenter(WIDTH
    / 2, HEIGHT / 2))` to the previous code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在屏幕中心创建一个中心力，它将把所有元素拉向它。调整我们在上一步中添加的代码，使其看起来如下。注意我们只向之前的代码中添加了 `.force("center_force",
    d3.forceCenter(WIDTH / 2, HEIGHT / 2))`：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now our circles are pulled towards the center of the SVG element:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的圆圈被拉向 SVG 元素的中心：
- en: '![](img/351ca6f3-3830-4426-9944-bb434fdb8cdf.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/351ca6f3-3830-4426-9944-bb434fdb8cdf.png)'
- en: 'Create a force on each of the nodes, so that they repel each other. Just like
    in the last step, we will only add `.force("charge_force", d3.forceManyBody())`
    to the previous code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个节点上创建一个力，使它们相互排斥。就像在上一步中一样，我们将在之前的代码中只添加 `.force("charge_force", d3.forceManyBody())`：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You''ll notice that the `cx`/`cy` values for the circles initially change rapidly,
    before finally stopping. This is because D3 is running a simulation. Note that
    `center_force` is trying to reach a state of equilibrium with `charge_force`.
    You''ll even notice that when you first load the page, the circles move outward
    from the center. This is due to the same reason:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到圆圈的 `cx`/`cy` 值最初会迅速变化，最终停止。这是因为 D3 正在运行一个模拟。注意 `center_force` 正在尝试与 `charge_force`
    达到一个平衡状态。你甚至会注意到当你第一次加载页面时，圆圈会从中心向外移动。这也是由于同样的原因：
- en: '![](img/42db87cd-8b24-4e29-92d2-4547f86f2a31.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42db87cd-8b24-4e29-92d2-4547f86f2a31.png)'
- en: 'Finally, we''ll create the links between the nodes, so that they don''t repel
    each other too much. Just like in the last step, we will add the following code
    to the previous code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将创建节点之间的链接，以便它们不会相互排斥得太厉害。就像在上一步中一样，我们将添加以下代码到之前的代码中：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Our last chunk of code should now look as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后的代码块现在应该如下所示：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The d3.forceLink function takes the array of links. It then uses the source
    and target attributes of each link data object to connect the nodes via their
    `.name` properties (as specified in the return value of the function we just wrote).
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: d3.forceLink 函数接受链接数组。然后它使用每个链接数据对象的源和目标属性，通过它们的 `.name` 属性（如我们刚刚编写的函数的返回值中指定）将节点连接起来。
- en: You can tack on `.distance()` to specify how long the lines are visually between
    each circle.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过添加 `.distance()` 来指定每条线在视觉上有多长。
- en: 'Finally, our graph looks as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的图表看起来如下：
- en: '![](img/8fe9b4bf-b520-4caf-92f6-216729eed8cf.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8fe9b4bf-b520-4caf-92f6-216729eed8cf.png)'
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we used D3 to create a graph that visualizes relationships
    between various nodes of data. This can be very useful in scenarios such as graphing
    a friend network, showing parent/child company relationships, or displaying a
    company's staff hierarchy.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了D3来创建一个图形，用于可视化数据中各个节点之间的关系。这在诸如绘制朋友网络、展示母公司和子公司关系或显示公司员工层级等场景中非常有用。
- en: In [Chapter 8](9e68fb4c-044a-40ec-ba46-3181bc2b7b5f.xhtml), *Mapping*, we'll
    cover how to create a map from GeoJSON data.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](9e68fb4c-044a-40ec-ba46-3181bc2b7b5f.xhtml) *映射*中，我们将介绍如何从GeoJSON数据创建地图。
