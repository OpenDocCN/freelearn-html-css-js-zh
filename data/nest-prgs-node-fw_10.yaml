- en: Chapter 10\. Routing and request handling in Nest.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。Nest.js中的路由和请求处理
- en: Routing and request handling in Nest.js is handled by the controllers layer.
    Nest.js routes requests to handler methods, which are defined inside controller
    classes. Adding a routing decorator such as `@Get()` to a method in a controller
    tells Nest.js to create an endpoint for this route path and route every corresponding
    request to this handler.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js中的路由和请求处理由控制器层处理。Nest.js将请求路由到定义在控制器类内部的处理程序方法。在控制器的方法中添加路由装饰器，如`@Get()`，告诉Nest.js为此路由路径创建一个端点，并将每个相应的请求路由到此处理程序。
- en: In this chapter, we’ll go over the various aspects of routing and request handling
    in Nest.js using the EntryController from our blog application as a basis for
    some examples. We’ll be looking at different approaches that you can use to write
    request handlers, so not all examples shown will match code from our blog application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用我们的博客应用程序中的EntryController作为一些示例的基础，来介绍Nest.js中路由和请求处理的各个方面。我们将看看您可以使用的不同方法来编写请求处理程序，因此并非所有示例都与我们的博客应用程序中的代码匹配。
- en: Request handlers
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求处理程序
- en: 'A basic GET request handler for the `/entries` route registered in the EntryController
    could look like this:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在EntryController中注册的`/entries`路由的基本GET请求处理程序可能如下所示：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `@Controller(''entries'')` decorator tells Nest.js to add an `entries`
    prefix to all routes registered in the class. This prefix is optional. An equivalent
    way to setup this route would be as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Controller(''entries'')`装饰器告诉Nest.js在类中注册的所有路由添加一个`entries`前缀。此前缀是可选的。设置此路由的等效方式如下：'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we don’t specify a prefix in the `@Controller()` decorator, but instead
    use the full route path in the `@Get('entries')` decorator.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们不在`@Controller()`装饰器中指定前缀，而是在`@Get('entries')`装饰器中使用完整的路由路径。
- en: In both cases, Nest.js will route all GET requests to `/entries` to the `index()`
    method in this controller. The array of entries returned from the handler will
    be **automatically** serialized to JSON and sent as the response body, and the
    response status code will be 200\. This is the standard approach of generating
    a response in Nest.js.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，Nest.js将所有GET请求路由到此控制器中的`index()`方法。从处理程序返回的条目数组将**自动**序列化为JSON并作为响应主体发送，并且响应状态码将为200。这是Nest.js中生成响应的标准方法。
- en: Nest.js also provides the `@Put()`, `@Delete()`, `@Patch()`, `@Options()`, and
    `@Head()` decorators to create handlers for other HTTP methods. The `@All()` decorator
    tells Nest.js to route all HTTP methods for a given route path to the handler.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js还提供了`@Put()`、`@Delete()`、`@Patch()`、`@Options()`和`@Head()`装饰器，用于创建其他HTTP方法的处理程序。`@All()`装饰器告诉Nest.js将给定路由路径的所有HTTP方法路由到处理程序。
- en: Generating responses
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成响应
- en: Nest.js provides two approaches for generating responses.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js提供了两种生成响应的方法。
- en: Standard approach
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准方法
- en: Using the standard and recommended approach, which has been available since
    Nest.js 4, Nest.js will **automatically** serialize the JavaScript object or array
    returned from the handler method to JSON and send it in the response body. If
    a string is returned, Nest.js will just send the string without serializing it
    to JSON.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自Nest.js 4以来可用的标准和推荐方法，Nest.js将**自动**将从处理程序方法返回的JavaScript对象或数组序列化为JSON并将其发送到响应主体中。如果返回一个字符串，Nest.js将只发送该字符串，而不将其序列化为JSON。
- en: 'The default response status code is 200, expect for POST requests, which uses
    201\. The response code for can easily be changed for a handler method by using
    the `@HttpCode(...)` decorator. For example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的响应状态码为200，除了POST请求使用201。可以通过使用`@HttpCode(...)`装饰器轻松地更改处理程序方法的响应代码。例如：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Express approach
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Express方法
- en: An alternate approach to generating responses in Nest.js is to use a response
    object directly. You can ask Nest.js to inject a response object into a handler
    method using the `@Res()` decorator. Nest.js uses [express response objects](http://expressjs.com/en/api.html#res)].
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nest.js中生成响应的另一种方法是直接使用响应对象。您可以要求Nest.js将响应对象注入到处理程序方法中，使用`@Res()`装饰器。Nest.js使用[express响应对象](http://expressjs.com/en/api.html#res)。
- en: You can rewrite the response handler seen earlier using a response object as
    shown here.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用响应对象重写先前看到的响应处理程序，如下所示。
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The express response object is used directly to serialize the entries array
    to JSON and send a 200 status code response.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 直接使用express响应对象将条目数组序列化为JSON并发送200状态码响应。
- en: The typings for the `Response` object come from express. Add the `@types/express`
    package to your `devDependencies` in `package.json` to use these typings.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`Response`对象的类型来自express。在`package.json`中的`devDependencies`中添加`@types/express`包以使用这些类型。'
- en: Route parameters
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由参数
- en: Nest.js makes it easy to accept parameters from the route path. To do so, you
    simply specify route parameters in the path of the route as shown below.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js使得从路由路径接受参数变得容易。为此，您只需在路由的路径中指定路由参数，如下所示。
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The route path for the above handler method above is `/entries/:entryId`, with
    the `entries` portion coming from the controller router prefix and the `:entryId`
    parameter denoted by a colon. The `@Param()` decorator is used to inject the params
    object, which contains the parameter values.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 上述处理程序方法的路由路径为`/entries/:entryId`，其中`entries`部分来自控制器路由前缀，而由冒号表示的`:entryId`参数。使用`@Param()`装饰器注入params对象，其中包含参数值。
- en: Alternately, you can inject individual param values using the `@Param()` decorator
    with the parameter named specified as shown here.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用`@Param()`装饰器注入单个参数值，如下所示指定参数名称。
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Request body
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求体
- en: To access the body of a request, use the `@Body()` decorator.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问请求的主体，请使用`@Body()`装饰器。
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Request object
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求对象
- en: To access the client request details, you can ask Nest.js to inject the request
    object into a handler using the `@Req()` decorator. Nest.js uses [express request
    objects](http://expressjs.com/en/api.html#req).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问客户端请求的详细信息，您可以要求Nest.js使用`@Req()`装饰器将请求对象注入到处理程序中。Nest.js使用[express请求对象](http://expressjs.com/en/api.html#req)。
- en: For example,
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The typings for the `Request` object come from express. Add the `@types/express`
    package to your `devDependencies` in `package.json` to use these typings.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`Request`对象的类型来自express。在`package.json`的`devDependencies`中添加`@types/express`包以使用这些类型。'
- en: Asynchronous handlers
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步处理程序
- en: All of the examples shown so far in this chapter assume that handlers are synchronous.
    In a real application, many handlers will need to be asynchronous.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中展示的所有示例都假设处理程序是同步的。在实际应用中，许多处理程序将需要是异步的。
- en: Nest.js provides a number of approaches to write asynchronous request handlers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js提供了许多方法来编写异步请求处理程序。
- en: Async/await
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步/等待
- en: Nest.js has support for async request handler functions.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js支持异步请求处理程序函数。
- en: In our example application, the `entriesService.findAll()` function actually
    returns a `Promise<Entry[]>`. Using async and await, this function could be written
    as follows.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例应用程序中，`entriesService.findAll()`函数实际上返回一个`Promise<Entry[]>`。使用async和await，这个函数可以这样写。
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Async functions have to return promises, but using the async/await pattern in
    modern JavaScript, the handler function can appear to be synchronous. Next, we’ll
    resolve the returned promise and generate the response.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 异步函数必须返回promises，但是在现代JavaScript中使用async/await模式，处理程序函数可以看起来是同步的。接下来，我们将解决返回的promise并生成响应。
- en: Promise
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Promise
- en: Similarly, you can also just return a promise from a handler function directly
    without using async/await.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您也可以直接从处理程序函数返回一个promise，而不使用async/await。
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Observables
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Observables
- en: Nest.js request handlers can also return RxJS Observables.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js请求处理程序也可以返回RxJS Observables。
- en: For example, if `entryService.findAll()` were to return an Observable of entries
    instead of a Promise, the following would be completely valid.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`entryService.findAll()`返回的是Observable而不是Promise，那么以下内容将是完全有效的。
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: There is no recommended way to write asynchronous request handlers. Use whichever
    method you are most comfortable with.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 没有推荐的方法来编写异步请求处理程序。使用您最熟悉的任何方法。
- en: Error responses
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误响应
- en: Nest.js has an exception layer, which is responsible for catching unhandled
    exceptions from request handlers and returning an appropriate response to the
    client.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js有一个异常层，负责捕获来自请求处理程序的未处理异常，并向客户端返回适当的响应。
- en: A global exception filter handles all exception thrown from request handlers.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 全局异常过滤器处理从请求处理程序抛出的所有异常。
- en: HttpException
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HttpException
- en: If an exception thrown from a request handler is a `HttpException`, the global
    exception filter will transform it to the a JSON response.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从请求处理程序抛出的异常是`HttpException`，全局异常过滤器将把它转换为JSON响应。
- en: For example, you can throw an `HttpException` from the `create()` handler function
    if the body is not valid as shown.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以从`create()`处理程序函数中抛出`HttpException`，如果body无效则如此。
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If this exception is thrown, the response would look like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果抛出此异常，响应将如下所示：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can also completely override the response body by passing an object to the
    `HttpException` constructor as follows.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过将对象传递给`HttpException`构造函数来完全覆盖响应体，如下所示。
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If this exception is thrown, the response would look like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果抛出此异常，响应将如下所示：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Unrecognized exceptions
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未识别的异常
- en: If the exception is not recognized, meaning it is not `HttpException` or a class
    that inherits from `HttpException`, then the client will receive the JSON response
    below.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果异常未被识别，意味着它不是`HttpException`或继承自`HttpException`的类，则客户端将收到下面的JSON响应。
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Summary
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: With the help of using the EntryController from our example blog application,
    this chapter has covered aspects of routing and request handling in Nest.js. You
    should now understand various approaches that you can use to write request handlers.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 借助于我们示例博客应用程序中的EntryController，本章涵盖了Nest.js中的路由和请求处理的方面。您现在应该了解各种方法，可以用来编写请求处理程序。
- en: In the next chapter we detail the OpenAPI specification, which is a JSON schema
    that can be used to construct a JSON or YAML definition of a set of restful APIs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将详细介绍OpenAPI规范，这是一个JSON模式，可用于构建一组restful API的JSON或YAML定义。
