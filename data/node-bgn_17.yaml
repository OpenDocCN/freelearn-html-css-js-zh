- en: '17'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '17'
- en: Dockerizing a Node.js Application
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Node.js应用Docker化
- en: In this chapter, we will learn how to deploy our application to the public internet
    using Docker. We will explore how we can use GitHub Actions to ensure that our
    Docker images are working well in the **continuous integration** (**CI**) pipeline.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用Docker将我们的应用部署到公共互联网。我们将探讨如何使用GitHub Actions确保我们的Docker镜像在**持续集成**（**CI**）管道中运行良好。
- en: We will learn how to Dockerize the application and publish the image to Docker
    Hub for better portability so we can download our images in different environments.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何将应用Docker化并将镜像发布到Docker Hub，以实现更好的可移植性，这样我们就可以在不同的环境中下载我们的镜像。
- en: Finally, we will discuss how to do a proper domain setup and how to add a **Secure
    Sockets Layer** (**SSL**) certificate to the application using Cloudflare. We
    will also explore the Twelve-Factor App principles.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将讨论如何进行适当的域名设置，以及如何使用Cloudflare添加**安全套接字层**（**SSL**）证书到应用。我们还将探讨十二要素应用原则。
- en: 'To sum up, here are the main topics that we will explore in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，以下是本章我们将探讨的主要主题：
- en: How to use GitHub Actions for CI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用GitHub Actions进行持续集成
- en: How to use DigitalOcean Droplet to host the Docker application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用DigitalOcean Droplet托管Docker应用
- en: How to use Docker to build the application and publish the image to Docker Hub
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Docker构建应用并将镜像发布到Docker Hub
- en: How to do a proper domain setup and add an SSL certificate to the application
    using Cloudflare
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Cloudflare进行适当的域名设置并添加SSL证书到应用
- en: What are the Twelve-Factor App principles and how can they help you grow?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十二要素应用原则是什么，它们如何帮助您成长？
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To start working on this chapter, we need to continue with the code that we
    uploaded to GitHub in the previous chapter. If you haven’t completed the previous
    chapter you can download the project from [https://github.com/PacktPublishing/NodeJS-for-Beginners/archive/refs/heads/main.zip](https://github.com/PacktPublishing/NodeJS-for-Beginners/archive/refs/heads/main.zip)
    and access the `step5` folder as a reference.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始本章的工作，我们需要继续使用我们在上一章上传到GitHub的代码。如果您还没有完成上一章，您可以从[https://github.com/PacktPublishing/NodeJS-for-Beginners/archive/refs/heads/main.zip](https://github.com/PacktPublishing/NodeJS-for-Beginners/archive/refs/heads/main.zip)下载项目，并作为参考访问`step5`文件夹。
- en: 'You will need to create accounts with the following providers in order to follow
    the examples in this chapter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章中的示例，您需要在与以下提供者创建账户：
- en: 'Docker Hub: [https://hub.docker.com/signup](https://hub.docker.com/signup)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Docker Hub: [https://hub.docker.com/signup](https://hub.docker.com/signup)'
- en: 'Cloudflare: [https://www.cloudflare.com/](https://www.cloudflare.com/) (optional)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Cloudflare: [https://www.cloudflare.com/](https://www.cloudflare.com/)（可选）'
- en: The code files for the chapter can be found at [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在[https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners)找到。
- en: Checkout the code in action video for this chapter on [https://youtu.be/VWBuF_Q3KPY](https://youtu.be/VWBuF_Q3KPY)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 查看本章动作视频中的代码[https://youtu.be/VWBuF_Q3KPY](https://youtu.be/VWBuF_Q3KPY)
- en: Containers and cloud-native solutions with Docker
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker的容器和云原生解决方案
- en: While using a VM is a good option, it is not the best option for many applications.
    Currently, containers are the most popular way to deploy applications. Containers
    are lightweight, portable, and easy to use. In this section, we will learn how
    to deploy a Node.js application using Docker.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用虚拟机是一个不错的选择，但它并不是许多应用的最好选择。目前，容器是部署应用最流行的方式。容器轻量级、可移植且易于使用。在本节中，我们将学习如何使用Docker部署Node.js应用。
- en: We covered the basics of Docker in previous chapters and we have been using
    Docker and Docker Compose to run the MongoDB database. We now need to learn how
    to create a Docker image for our application and how to deploy it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们已经介绍了Docker的基础知识，并且一直在使用Docker和Docker Compose运行MongoDB数据库。我们现在需要学习如何为我们的应用创建Docker镜像以及如何部署它。
- en: Docker lifecycle
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker生命周期
- en: 'We need to have a clear understanding of the Docker lifecycle to use it properly.
    Let’s start with a brief introduction. In the following figure, we can see the
    Docker lifecycle:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要清楚地理解Docker的生命周期才能正确使用它。让我们从简要介绍开始。在下面的图中，我们可以看到Docker的生命周期：
- en: '![Figure 17.1 – Docker lifecycle diagram](img/B21678_17_ForCEing_FS_1.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图17.1 – Docker生命周期图](img/B21678_17_ForCEing_FS_1.jpg)'
- en: Figure 17.1 – Docker lifecycle diagram
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.1 – Docker生命周期图
- en: We need to start with a `Dockerfile,` which is a file that contains the instructions
    to build the image. Then, we can build the image with the `docker build` command.
    We can then run the container with the `docker` `run` command.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从一个`Dockerfile`开始，这是一个包含构建镜像指令的文件。然后，我们可以使用`docker build`命令来构建镜像。接下来，我们可以使用`docker
    run`命令来运行容器。
- en: If we want to share the image with other people, we can push the image to a
    registry with the `docker push` command. Then, other people can pull the image
    from the registry with the `docker pull` command. This last step is quite similar
    to `npm publish` but, instead of sharing the code, we are sharing the image.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想与其他人共享镜像，我们可以使用`docker push`命令将镜像推送到一个注册表。然后，其他人可以使用`docker pull`命令从注册表中拉取镜像。这一步与`npm
    publish`非常相似，但不同的是，我们分享的是镜像而不是代码。
- en: Now that we are clear on the theory, let’s Dockerize our application in the
    next section.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经明白了理论，那么在下一节中，我们将把我们的应用程序Docker化。
- en: Dockerizing the application
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将应用程序Docker化
- en: 'In your local machine, using Docker Desktop 1.18, you can run `docker init`
    in the project root folder (where `package.json` is located) to create a `Dockerfile`
    (see [https://docs.docker.com/engine/reference/commandline/init/](https://docs.docker.com/engine/reference/commandline/init/)).
    So, we can create the files automatically with an interactive process:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的本地机器上，使用Docker Desktop 1.18，您可以在项目根目录（`package.json`所在的位置）中运行`docker init`来创建一个`Dockerfile`（见[https://docs.docker.com/engine/reference/commandline/init/](https://docs.docker.com/engine/reference/commandline/init/)）。因此，我们可以通过交互式过程自动创建文件：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This tool will create the following files: `.dockerignore`, `dockerfile`, and
    `compose.yaml`. We will use `dockerfile` to build the image and we will use `compose.yaml`
    to run the container.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此工具将创建以下文件：`.dockerignore`、`dockerfile`和`compose.yaml`。我们将使用`dockerfile`来构建镜像，并使用`compose.yaml`来运行容器。
- en: 'The Dockerfile will look like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile将看起来像这样：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is a `Dockerfile` that sets up a Node.js environment inside a Docker container.
    It starts by specifying the Node.js version to use (`20.11.0`) and uses the Alpine
    version of the Node.js image for a smaller footprint. It sets the `NODE_ENV` environment
    variable to `production`. It then sets the working directory inside the container
    to `/usr/src/app`. The `RUN` command mounts the `package.json` and `package-lock.json`
    files from the host to the container and also sets up a cache for `npm` modules.
    It then runs `npm ci --omit=dev` to install the `production` dependencies only.
    It changes the user to `node` for security reasons, copies all files from the
    current directory on the host to the current directory in the container, exposes
    port `3000` for the application to be accessible, and finally, sets the command
    to start the application to `npm start`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在Docker容器内设置Node.js环境的`Dockerfile`。它首先指定要使用的Node.js版本（`20.11.0`），并使用Node.js的Alpine版本以较小的体积。它将`NODE_ENV`环境变量设置为`production`。然后，它将容器内的工作目录设置为`/usr/src/app`。`RUN`命令将主机上的`package.json`和`package-lock.json`文件挂载到容器中，并为`npm`模块设置缓存。然后，它运行`npm
    ci --omit=dev`来仅安装`production`依赖项。出于安全原因，它将用户更改为`node`，将主机当前目录下的所有文件复制到容器当前目录，暴露端口`3000`以便应用程序可访问，并最终将启动应用程序的命令设置为`npm
    start`。
- en: For our current application, we can remove the `compose.yaml` file as we don’t
    need it. It is important to review the content in the `.dockerignore` file as
    it excludes some files from the build process when we execute the `COPY . .` command
    in the Dockerfile.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们当前的应用程序，我们可以删除`compose.yaml`文件，因为我们不需要它。重要的是要检查`.dockerignore`文件的内容，因为它在执行Dockerfile中的`COPY
    . .`命令时排除了构建过程中的某些文件。
- en: We have all the files needed to properly use Docker to manage our application,
    so in the next section, we will cover that in detail.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了使用Docker管理我们应用程序所需的所有文件，因此在下一段中，我们将详细介绍这一点。
- en: Managing the application with Docker
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Docker管理应用程序
- en: 'In the previous chapter, we used PM2 to manage the application. This time,
    we will use Docker. We can build the image with the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用了PM2来管理应用程序。这次，我们将使用Docker。我们可以使用以下命令来构建镜像：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, we can run the container with the following command, which will expose
    port `3000` and will use specific environment variables:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用以下命令来运行容器，该命令将暴露端口`3000`并使用特定的环境变量：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You will need to replace `mongodb+srv://<username>:<password>@<cluster-url>/test?retryWrites=true&w=majority`
    with the connection string of your MongoDB Atlas cluster.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将`mongodb+srv://<username>:<password>@<cluster-url>/test?retryWrites=true&w=majority`替换为您的MongoDB
    Atlas集群的连接字符串。
- en: If you open the browser and access [http://localhost:3000](http://localhost:3000),
    you will see the application running as expected.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开浏览器并访问 [http://localhost:3000](http://localhost:3000)，你会看到应用程序按预期运行。
- en: Now that we know that the Dockerized application is working fine, we can add
    a step in the CI to ensure that the Docker image is properly generated.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道 Docker 化的应用程序运行良好，我们可以在 CI 中添加一个步骤来确保 Docker 镜像正确生成。
- en: Adding docker build to the CI
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 docker build 添加到 CI
- en: 'We can add the `docker build` step to the CI process to ensure that the image
    is built correctly. We can add the following step to the CI process in `.github/workflows/ci.yml`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将 `docker build` 步骤添加到 CI 流程中，以确保镜像正确构建。我们可以在 `.github/workflows/ci.yml`
    中的 CI 流程中添加以下步骤：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once you commit these changes, you can check the status of the workflow in
    the `Build Docker` `image` step:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦提交这些更改，你可以在“构建 Docker 镜像”步骤中检查工作流程的状态：
- en: '![Figure 17.2 – Checking the workflow status](img/B21678_17_ForCEing_FS_2.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.2 – 检查工作流程状态](img/B21678_17_ForCEing_FS_2.jpg)'
- en: Figure 17.2 – Checking the workflow status
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.2 – 检查工作流程状态
- en: As you can see in *Figure 17**.2*, we successfully built the Docker image. In
    the next section, we will learn how to make this image public.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在 *图 17.2* 中可以看到的，我们成功构建了 Docker 镜像。在下一节中，我们将学习如何使这个镜像公开。
- en: Pushing the image to Docker Hub
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推送镜像到 Docker Hub
- en: 'You need to create a new repository in Docker Hub: [https://hub.docker.com/repositories/new](https://hub.docker.com/repositories/new).
    In my case, I created a private repository called `nodejs-for-beginners`, as you
    can see in the following figure:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在 Docker Hub 中创建一个新的仓库：[https://hub.docker.com/repositories/new](https://hub.docker.com/repositories/new)。在我的情况下，我创建了一个名为
    `nodejs-for-beginners` 的私有仓库，如图所示：
- en: '![Figure 17.3 – Creating a new repository](img/B21678_17_ForCEing_FS_3.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.3 – 创建新的仓库](img/B21678_17_ForCEing_FS_3.jpg)'
- en: Figure 17.3 – Creating a new repository
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.3 – 创建新的仓库
- en: I recommend you create a **Public** image but if you want to create a **Private**
    image, then you will need to log in to Docker Hub using the Docker CLI in your
    target machine (DigitalOcean Droplet or an alternative).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你创建一个**公共**镜像，但如果你想要创建一个**私有**镜像，那么你将需要在目标机器（DigitalOcean Droplet 或其他替代方案）上使用
    Docker CLI 登录 Docker Hub。
- en: 'Then, from your local machine, you need to log in to Docker Hub using the following
    command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从你的本地机器，你需要使用以下命令登录 Docker Hub：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can then build the image with the name of the repository with the following
    command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用以下命令使用存储库的名称构建镜像：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You will need to replace `YOUR-USER/YOUR-PROJECT` with your user and project
    name. In my case, I used `ulisesgascon/nodejs-for-beginners`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将 `YOUR-USER/YOUR-PROJECT` 替换为你的用户和项目名称。在我的情况下，我使用了 `ulisesgascon/nodejs-for-beginners`。
- en: This command will print a lot of logs but, at the end, you should not see any
    errors.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将打印大量日志，但最终，你不应该看到任何错误。
- en: 'Then, you need to push the image to Docker Hub with the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要使用以下命令将镜像推送到 Docker Hub：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output should be something like this, using the default `latest` tag:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该是这样的，使用默认的 `latest` 标签：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you go to the Docker Hub repository, you will see that the image has been
    pushed and is ready to be used in other machines with the `docker pull` `YOUR-USER/YOUR-PROJECT:latest`
    command.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你访问 Docker Hub 仓库，你会看到镜像已经被推送，并准备好在其他机器上使用 `docker pull YOUR-USER/YOUR-PROJECT:latest`
    命令。
- en: 'As you can see in the following figure, the image is available in the Docker
    Hub repository:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在以下图中可以看到的，镜像在 Docker Hub 仓库中可用：
- en: '![Figure 17.4 – The image in the Docker Hub repository](img/B21678_17_ForCEing_FS_4.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.4 – Docker Hub 仓库中的镜像](img/B21678_17_ForCEing_FS_4.jpg)'
- en: Figure 17.4 – The image in the Docker Hub repository
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.4 – Docker Hub 仓库中的镜像
- en: Publishing the image with GitHub Actions
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 发布镜像
- en: As an alternative way to push the image to Docker Hub, we can publish the image
    directly with GitHub Actions. This is a great way to automate the process, avoiding
    the need to install Docker on our local machine and ensuring that the image is
    built correctly.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 作为将镜像推送到 Docker Hub 的另一种方式，我们可以直接使用 GitHub Actions 发布镜像。这是一个自动化流程的绝佳方式，避免了在本地机器上安装
    Docker 的需要，并确保镜像正确构建。
- en: 'I invite you to achieve this by yourself as the last challenge of this book.
    Here are some hints to help you:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我邀请你自己完成这本书的最后一个挑战。以下是一些提示来帮助你：
- en: 'GitHub guide to publishing Docker images: [https://docs.github.com/en/actions/guides/publishing-docker-images](https://docs.github.com/en/actions/guides/publishing-docker-images)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 发布 Docker 镜像的指南：[https://docs.github.com/en/actions/guides/publishing-docker-images](https://docs.github.com/en/actions/guides/publishing-docker-images)
- en: 'A pipeline reference from the `simple-api` project: [https://github.com/UlisesGascon/simple-api/blob/main/.github/workflows/release.yml#L58](https://github.com/UlisesGascon/simple-api/blob/main/.github/workflows/release.yml#L58)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 `simple-api` 项目的管道参考：[https://github.com/UlisesGascon/simple-api/blob/main/.github/workflows/release.yml#L58](https://github.com/UlisesGascon/simple-api/blob/main/.github/workflows/release.yml#L58)
- en: In the next section, we will learn how to use Docker to run the project in the
    DigitalOcean Droplet.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用 Docker 在 DigitalOcean Droplet 中运行项目。
- en: Running the containers
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行容器
- en: 'In the previous chapter, we used PM2 to manage the lifecycle of our application.
    This time, we will do it differently: we will use Docker directly.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用了 PM2 来管理应用程序的生命周期。这次我们将有所不同：我们将直接使用 Docker。
- en: Our first step will be to install Docker on our target machine using SSH. Follow
    the installation guide ([https://docs.docker.com/engine/install/ubuntu/](https://docs.docker.com/engine/install/ubuntu/))
    and then run `docker run hello-world`. The command will run without generating
    any error, this was a simple test to check whether the Docker engine was properly
    set up and running.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步将是使用 SSH 在目标机器上安装 Docker。遵循安装指南 ([https://docs.docker.com/engine/install/ubuntu/](https://docs.docker.com/engine/install/ubuntu/))，然后运行
    `docker run hello-world`。该命令将正常运行而不会生成任何错误，这是一个简单的测试，以检查 Docker 引擎是否正确设置并运行。
- en: 'Please check that you stopped the PM2 application before we move to the next
    step as only one service can control port `3000`. Then, our last step will be
    to run the container but, this time, we won’t need to build the container as we
    are pulling directly the image from Docker Hub:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保在我们进行下一步之前，您已经停止了 PM2 应用程序，因为只有一个服务可以控制端口 `3000`。然后，我们的最后一步将是运行容器，但这次我们不需要构建容器，因为我们直接从
    Docker Hub 拉取镜像：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You will need to replace `mongodb+srv://<username>:<password>@<cluster-url>/test?retryWrites=true&w=majority`
    with the connection string of your MongoDB Atlas cluster, and `YOUR-USER/YOUR-PROJECT`
    with your user and project name. In my case, I used `ulisesgascon/nodejs-for-beginners`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将 `mongodb+srv://<username>:<password>@<cluster-url>/test?retryWrites=true&w=majority`
    替换为您的 MongoDB Atlas 集群的连接字符串，并将 `YOUR-USER/YOUR-PROJECT` 替换为您的用户和项目名称。在我的情况下，我使用了
    `ulisesgascon/nodejs-for-beginners`。
- en: 'We can see the application running as expected using the same IP address and
    port as when running PM2:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用与运行 PM2 时相同的 IP 地址和端口来查看应用程序按预期运行：
- en: '![Figure 17.5 – Application running using the Droplet external IP](img/B21678_17_ForCEing_FS_5.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.5 – 使用 Droplet 外部 IP 运行的应用程序](img/B21678_17_ForCEing_FS_5.jpg)'
- en: Figure 17.5 – Application running using the Droplet external IP
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.5 – 使用 Droplet 外部 IP 运行的应用程序
- en: 'In the next section, we will learn how to use Cloudflare to handle domains
    and certificates so your users won’t need to remember your server’s IP address
    to access it. If you are using a local machine, then your setup will be different
    as you probably won’t have a static IP address so I suggest you follow this tutorial:
    [https://www.youtube.com/watch?v=DCxt9SAnkyc](https://www.youtube.com/watch?v=DCxt9SAnkyc).
    That way, your project will be accessible from the internet using ngrok ([https://ngrok.com/](https://ngrok.com/)).
    This will generate a connection tunnel to your machine and will expose your service
    as `https://xxxxsxx.ngrok.io` without worrying about network setup. Take into
    account that self-hosting applications that are open to internet traffic require
    a solid knowledge of security ([https://www.youtube.com/watch?v=URWlY3Qr9l8](https://www.youtube.com/watch?v=URWlY3Qr9l8)),
    especially if you plan to use this approach for a long time.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用 Cloudflare 来处理域名和证书，这样您的用户就不需要记住服务器的 IP 地址来访问它。如果您正在使用本地机器，那么您的设置将不同，因为您可能没有静态
    IP 地址，所以我建议您遵循这个教程：[https://www.youtube.com/watch?v=DCxt9SAnkyc](https://www.youtube.com/watch?v=DCxt9SAnkyc)。这样，您的项目就可以通过
    ngrok ([https://ngrok.com/](https://ngrok.com/)) 从互联网上访问。这将生成一个连接隧道到您的机器，并将您的服务暴露为
    `https://xxxxsxx.ngrok.io`，无需担心网络设置。请注意，对互联网流量开放的自托管应用程序需要具备扎实的网络安全知识 ([https://www.youtube.com/watch?v=URWlY3Qr9l8](https://www.youtube.com/watch?v=URWlY3Qr9l8))，尤其是如果您计划长期使用这种方法。
- en: Note
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are having issues running the project in this chapter while following
    the steps, or you tried an alternative approach, you can use the `step6` folder
    from the source code that you downloaded at the beginning of the chapter to compare
    and fix possible bugs more easily.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在遵循本章步骤运行项目时遇到问题，或者您尝试了替代方法，您可以使用本章开头下载的源代码中的 `step6` 文件夹来比较和修复可能的错误。
- en: In the next section, we will discuss how to do a proper domain setup and how
    to add an SSL certificate to the application.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论如何进行适当的域名设置以及如何向应用程序添加 SSL 证书。
- en: Using Cloudflare
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Cloudflare
- en: 'The application is running in the DigitalOcean Droplet but is accessible only
    by IP address and port. So, we need to do a proper domain setup and add an SSL
    certificate to the application. Acquiring a domain has a financial cost associated
    with it. Depending on the domain register, this cost may vary, and some domains
    are more expensive than others. SSL, together with **Transport Layer Security**
    (**TLS**), acts as a mechanism that we can add to our web project that will allow
    encryption between the clients and the server. In plain English, this will be
    the difference between accessing your website using http: //myproject. com or
    https: //myproject. com.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序正在 DigitalOcean Droplet 中运行，但只能通过 IP 地址和端口号访问。因此，我们需要进行适当的域名设置并向应用程序添加 SSL
    证书。获取域名会有相关的财务成本，根据域名注册商的不同，这个成本可能会有所不同，有些域名的价格可能比其他域名更高。SSL 与 **传输层安全性**（**TLS**）一起作为机制，我们可以将其添加到我们的
    Web 项目中，这将允许客户端和服务器之间的加密。用简单的话说，这将是在使用 http://myproject.com 或 https://myproject.com
    访问您的网站之间的区别。
- en: 'Many browsers today will prevent access to websites that are not using `https://`.
    We can use Cloudflare to enable both (`http` and `https`) and it is free for the
    basic features, so these are the steps to follow:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 许多浏览器今天都会阻止访问未使用 `https://` 的网站。我们可以使用 Cloudflare 来启用两者（`http` 和 `https`），并且对于基本功能是免费的，所以以下是需要遵循的步骤：
- en: 'Add a new domain in Cloudflare: [https://www.youtube.com/watch?v=7hY3gp_-9EU](https://www.youtube.com/watch?v=7hY3gp_-9EU).'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Cloudflare 中添加一个新的域名：[https://www.youtube.com/watch?v=7hY3gp_-9EU](https://www.youtube.com/watch?v=7hY3gp_-9EU)。
- en: 'Add a new DNS record in Cloudflare: [https://www.youtube.com/watch?v=PYSIt3fEEoI](https://www.youtube.com/watch?v=PYSIt3fEEoI).
    In our case, we will add an `A` record with the domain name or subdomain and the
    IP address of the Droplet.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Cloudflare 中添加一个新的 DNS 记录：[https://www.youtube.com/watch?v=PYSIt3fEEoI](https://www.youtube.com/watch?v=PYSIt3fEEoI)。在我们的例子中，我们将添加一个
    `A` 记录，包含域名或子域名以及 Droplet 的 IP 地址。
- en: You need to wait for the DNS propagation; this can take a while.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您需要等待 DNS 传播；这可能需要一段时间。
- en: 'When the DNS propagation is finished, you can access the application using
    the domain name. In my case, I can access the application using the domain name
    `https://demo.ulisesgascon.com`. In the following figure, you can see the domain
    set up in Cloudflare:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 DNS 传播完成后，您可以使用域名访问应用程序。在我的情况下，我可以通过域名 `https://demo.ulisesgascon.com` 访问应用程序。在以下图中，您可以看到在
    Cloudflare 中的域名设置：
- en: '![Figure 17.6 – Domain settings in Cloudflare](img/B21678_17_ForCEing_FS_6.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.6 – Cloudflare 中的域名设置](img/B21678_17_ForCEing_FS_6.jpg)'
- en: Figure 17.6 – Domain settings in Cloudflare
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.6 – Cloudflare 中的域名设置
- en: If you don’t want to specify the port in the URL, you can run the application
    in port `443` (the default for `https`) or `80` (the default for `http`) instead
    of port `3000`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想在 URL 中指定端口号，您可以将应用程序运行在端口 `443`（`https` 的默认端口）或 `80`（`http` 的默认端口）上，而不是端口
    `3000`。
- en: Now that we have finished with the domain setup, we can think of more advanced
    topics. In the next section, we will explore the Twelve-Factor App principles.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了域名设置，我们可以考虑更高级的主题。在下一节中，我们将探讨十二要素应用原则。
- en: Next level – Twelve-Factor App principles
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级内容 – 十二要素应用原则
- en: 'A great way to continue learning is to follow the Twelve-Factor App principles.
    This is a methodology to build modern, scalable, maintainable, and portable applications,
    and it is structured in 12 principles. The following are the 12 principles along
    with their definitions, taken from [https://12factor.net](https://12factor.net):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 继续学习的一个好方法是遵循十二要素应用原则。这是一个构建现代、可扩展、可维护和可移植应用程序的方法论，它由 12 个原则组成。以下是与定义一起的 12
    个原则，摘自 [https://12factor.net](https://12factor.net)：
- en: '*Codebase*: One codebase tracked in revision control, many deploys'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*代码库*：一个代码库在版本控制中跟踪，多次部署'
- en: '*Dependencies*: Explicitly declare and isolate dependencies'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*依赖项*：明确声明并隔离依赖项'
- en: '*Config*: Store config in the environment'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*配置*：将配置存储在环境中'
- en: '*Backing services*: Treat backing services as attached resources'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*后端服务*：将后端服务视为附加资源'
- en: '*Build, release, run*: Strictly separate build and run stages'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*构建、发布、运行*：严格分离构建和运行阶段'
- en: '*Processes*: Execute the app as one or more stateless processes'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*进程*：以一个或多个无状态进程执行应用'
- en: '*Port binding*: Export services via port binding'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*端口绑定*：通过端口绑定导出服务'
- en: '*Concurrency*: Scale out via the process model'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*并发性*：通过进程模型进行扩展'
- en: '*Disposability*: Maximize robustness with fast startup and graceful shutdown'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*可丢弃性*：通过快速启动和优雅关闭最大化鲁棒性'
- en: '*Dev/prod parity*: Keep development, staging, and production as similar as
    possible'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*开发/生产一致性*：尽可能使开发、预发布和生产保持相似'
- en: '*Logs*: Treat logs as event streams'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*日志*：将日志视为事件流'
- en: '*Admin processes*: Run admin/management tasks as one-off processes'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*管理进程*：以一次性进程运行管理/管理任务'
- en: There are many principles that we already covered in this book, such as configuration
    management, but there are some that we haven’t covered yet. As an example, we
    don’t have a staging environment and we haven’t covered the admin processes. We
    built and deployed a simple app that is not designed to be used by real users
    or to handle real traffic, but if you want to build and deploy actual projects,
    it is highly recommended to follow these principles.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这本书中已经讨论了许多原则，例如配置管理，但还有一些我们尚未涉及。例如，我们没有设置预发布环境，也没有讨论管理进程。我们构建并部署了一个简单的应用，它不是为了供真实用户使用或处理真实流量而设计的，但如果你想要构建和部署实际项目，强烈建议遵循这些原则。
- en: Overall, this is a great way to continue learning and getting a deeper understanding
    of the topic while improving the application that we just built together in this
    book.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，这是一个继续学习和更深入理解主题的绝佳方式，同时还能提高我们在这本书中共同构建的应用。
- en: In the next section, we will review the steps to clean up the resources that
    we used in this chapter just in case you don’t need them anymore.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将回顾清理本章中使用的资源的步骤，以防你不再需要它们。
- en: Cleaning up
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理
- en: Once we are done with the application, we can clean up the resources that we
    used in this chapter as we won’t need them in the near future. Most of the resources
    are free but I highly recommend deleting the resources that you don’t need anymore,
    especially if you are paying for any of those.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成应用，我们可以清理本章中使用的资源，因为我们近期内不再需要它们。大多数资源是免费的，但我强烈建议删除不再需要的资源，尤其是如果你为其中任何一项付费的话。
- en: 'These are the resources that you can delete:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是可以删除的资源：
- en: DigitalOcean Droplet(s) created in this chapter
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中创建的DigitalOcean Droplet(s)
- en: MongoDB Atlas cluster
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB Atlas集群
- en: Docker Hub repository
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Hub仓库
- en: Cloudflare domain
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloudflare域名
- en: GitHub repository (although I recommend you keep it as you can use it as a reference
    in the future)
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub仓库（尽管我建议你保留它，因为你可以将其用作未来的参考）
- en: Information
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: You can get additional hard drive space in your local environment by deleting
    the Docker images that you don’t need anymore or the `node_modules` folders that
    you created while following along with the book.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过删除不再需要的Docker镜像或你在跟随本书时创建的`node_modules`文件夹，在本地环境中获得额外的硬盘空间。
- en: This cleaning-up process was the last step for us in this journey. Before you
    move to the final section, I recommend you organize the notes you have taken during
    this journey and properly store them so you can access them in the future. In
    the next section, we will summarize this chapter.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个清理过程是我们这次旅程的最后一个步骤。在你进入最后一节之前，我建议你整理你在这次旅程中记录的笔记，并妥善存储它们，以便将来可以访问。在下一节中，我们将总结本章内容。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to deploy our application to the public internet
    using Docker and how to use GitHub Actions for CI with our Docker images.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Docker将我们的应用部署到公共互联网，以及如何使用GitHub Actions对我们的Docker镜像进行CI。
- en: We learned how to use Docker to build the application and how to publish the
    image to Docker Hub, and we discussed how to do a proper domain setup and how
    to add an SSL certificate to the application using Cloudflare. We looked at the
    Twelve-Factor App principles and we reviewed the steps to clean up the resources
    that we used in this chapter.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用Docker构建应用，如何将镜像发布到Docker Hub，并讨论了如何使用Cloudflare进行适当的域名设置以及如何将SSL证书添加到应用中。我们研究了十二要素应用原则，并回顾了清理本章中使用的资源的步骤。
- en: Congratulations, you made it! This is the end of the journey. I hope that you
    enjoyed it and that you learned a lot. I hope that you will continue learning
    and improving your skills and that you will continue building amazing applications
    with Node.js. I will be very happy to hear from you and to know what you think
    about the book. You can reach me on X/Twitter ([https://twitter.com/kom_256](https://twitter.com/kom_256))
    or LinkedIn ([https://www.linkedin.com/in/ulisesgascon/](https://www.linkedin.com/in/ulisesgascon/)).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，你做到了！这是旅程的终点。我希望你喜欢这段经历，并且学到了很多。我希望你能继续学习和提升你的技能，并且继续用 Node.js 构建令人惊叹的应用程序。我很乐意听到你的声音，了解你对这本书的看法。你可以在
    X/Twitter ([https://twitter.com/kom_256](https://twitter.com/kom_256)) 或 LinkedIn
    ([https://www.linkedin.com/in/ulisesgascon/](https://www.linkedin.com/in/ulisesgascon/))）上联系我。
- en: Further reading
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Twelve-Factor App principles: [https://12factor.net/](https://12factor.net/)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十二要素应用原则：[https://12factor.net/](https://12factor.net/)
- en: 'So what is Cloudflare?: [https://www.cloudflare.com/learning/what-is-cloudflare/](https://www.cloudflare.com/learning/what-is-cloudflare/)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 那么Cloudflare是什么？：[https://www.cloudflare.com/learning/what-is-cloudflare/](https://www.cloudflare.com/learning/what-is-cloudflare/)
- en: '*What 19th century railroad wars can teach us about building a future-ready*
    *cloud*: [https://cloud.google.com/blog/transform/what-19th-century-railroad-wars-can-teach-us-about-cloud-containers](https://cloud.google.com/blog/transform/what-19th-century-railroad-wars-can-teach-us-about-cloud-containers)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*19世纪铁路战争能教给我们关于构建未来就绪的* *云*：[https://cloud.google.com/blog/transform/what-19th-century-railroad-wars-can-teach-us-about-cloud-containers](https://cloud.google.com/blog/transform/what-19th-century-railroad-wars-can-teach-us-about-cloud-containers)'
