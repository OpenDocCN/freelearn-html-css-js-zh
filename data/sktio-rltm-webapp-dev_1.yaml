- en: Chapter 1. Going Real Time on the Web
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章. 在网络上实现实时性
- en: The Arab Spring revolution was sparked and fuelled through social media sites
    like Facebook and Twitter. Over the next few days, social media went from being
    just a means of interacting with family and friends to a weapon that empowered
    the people and brought about a significant change in the world. Everyone noticed
    the power of the people and people noticed what social networks were capable of.
    At the heart of it all was the technology that made all this possible, the technology
    that removed all the barriers to communication and spread the word faster than
    wildfire. This is the power of real-time web!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 阿拉伯之春革命是通过Facebook和Twitter等社交媒体网站引发的，并得到了推动。在接下来的几天里，社交媒体从仅仅是与家人和朋友互动的手段变成了赋予人民权力并带来世界重大变化的武器。每个人都注意到了人民的力量，人们也注意到了社交网络的能力。所有这一切的核心是使这一切成为可能的技术，这种技术消除了所有沟通的障碍，比野火传播得更快。这就是实时网络的力量！
- en: What is real-time web?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是实时网络？
- en: On the Web, we have been habituated to sites and applications where we click
    on a link or a button, or change some input and perform some action, and it causes
    some change in the page. But if we leave our twitter page open for a while, we
    get alerts when we receive new tweets, even without performing any action (shown
    in the next screenshot). This is what we mean in general when we say "real-time
    web".
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络上，我们已经习惯了点击链接或按钮、更改一些输入并执行某些操作，从而导致页面发生变化的应用程序和网站。但如果我们让我们的Twitter页面保持一段时间，当我们收到新的推文时，我们会收到警报，即使我们没有执行任何操作（如下一张截图所示）。这就是我们通常所说的“实时网络”的含义。
- en: '![What is real-time web?](img/0786_01_01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![什么是实时网络？](img/0786_01_01.jpg)'
- en: Real-time updates on Twitter
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter上的实时更新
- en: 'Wikipedia introduces real-time web in these words:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 维基百科用以下这些话介绍了实时网络：
- en: The real-time web is a set of technologies and practices that enable users to
    receive information as soon as it is published by its authors, rather than requiring
    that they or their software check a source periodically for updates.
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 实时网络是一套技术和实践，使用户能够在作者发布信息时立即接收信息，而不是要求他们或他们的软件定期检查源以获取更新。
- en: This "set of technologies" is one of the hottest trends on the Web. Over the
    next few pages, we will get familiar with these technologies and see their use
    in various applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这“套技术”是网络中最热门的趋势之一。在接下来的几页中，我们将熟悉这些技术，并了解它们在各种应用中的使用。
- en: A bit of history
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一点历史
- en: To understand and fully appreciate any concept, it is important to know where
    it came from and how it evolved.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解和完全欣赏任何概念，了解它的来源和演变过程是很重要的。
- en: Real-time web is not a new thing; one of the first attempts at making web real-time
    was the usage of Java applets. Many will remember chatting in Yahoo! chat rooms
    or playing chess, way back in the late '90s. Then came Flash and ActiveX plugins.
    This was not only for "fun" (for the consumer section), but also for use in the
    enterprise market. I worked for a BPM (Business Process Management) company in
    the early stages of my career, where they had built an ActiveX plugin for powering
    their dashboards and updating process information in real time. So why is it important
    now? Because the way in which real-time functionality is implemented and the cost
    involved in doing so has changed. From being a fancy feature in an application,
    it has become a necessity—a user demand. From being a hacked-in or technically
    challenging piece of the application, it is on its way to becoming a ratified
    standard in the form of WebSockets and Server-Sent Events (SSE). How did we get
    from static web to here?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 实时网络并不是新事物；最早尝试使网络实现实时性的尝试之一是使用Java小程序。许多人会记得在20世纪90年代末在Yahoo!聊天室聊天或下棋。然后出现了Flash和ActiveX插件。这不仅仅是为了“娱乐”（针对消费者部分），还用于企业市场。我在职业生涯的早期阶段为一家BPM（业务流程管理）公司工作，他们当时开发了一个ActiveX插件，用于为他们的仪表板提供动力并实时更新流程信息。那么为什么现在很重要呢？因为实现实时功能的方式以及实现这种功能所涉及的成本已经发生了变化。从成为应用程序中的一个花哨功能，它已经变成了必需品——用户的需求。从成为应用程序中非法添加或技术上有挑战性的部分，它正在成为WebSocket和服务器发送事件（SSE）形式的认可标准。我们是如何从静态网络到现在的？
- en: 'The Web (and web applications), as we all know, is built over the HTTP protocol.
    HTTP is a request-response system, where the client sends a request for information
    to the server and the server responds with the requested information. In most
    cases, this information is the HTML or related information, like XML or JSON,
    to be rendered by the browser. This HTTP browser-server interaction is shown in
    the following figure:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，网络（和网络应用）是建立在 HTTP 协议之上的。HTTP 是一个请求-响应系统，其中客户端向服务器发送信息请求，服务器以请求的信息进行响应。在大多数情况下，这些信息是浏览器将要渲染的
    HTML 或相关信息，如 XML 或 JSON。以下图显示了 HTTP 浏览器-服务器交互：
- en: '![A bit of history](img/0786_01_02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![一点历史](img/0786_01_02.jpg)'
- en: HTTP browser-server interaction
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 浏览器-服务器交互
- en: In 1995, Sun and Netscape announced a partnership that saw Netscape bundle Sun's
    brand new Java runtime with its browser. This was the beginning of highly interactive
    web. Although they have since earned themselves a very bad reputation, applets
    were the pioneers in the field of real-time web. In the early days of real-time
    web, we saw applets being used everywhere, for chat, games, and even for banners.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1995 年，Sun 和 Netscape 宣布了一项合作，Netscape 将 Sun 的新 Java 运行时与其浏览器捆绑在一起。这是高度交互式网络的开始。尽管他们后来获得了非常糟糕的名声，但小程序是实时网络领域的先驱。在实时网络的早期，我们看到小程序被用于聊天、游戏，甚至是横幅广告。
- en: In the same year, Netscape came up with a scripting language called JavaScript
    (originally LiveScript), and another small company called FutureWave Software
    started working on an animation software called FutureSplash Animator. Later,
    both of them became the cause of Java applets almost disappearing from the Web.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一年，Netscape 提出了一种名为 JavaScript（最初称为 LiveScript）的脚本语言，另一家名为 FutureWave Software
    的小公司开始开发一款名为 FutureSplash Animator 的动画软件。后来，这两者都成为了 Java 小程序几乎从网络中消失的原因。
- en: FutureWave was acquired by Macromedia in 1996 and they renamed FutureSplash
    Animator to Flash. Flash, as we all know, went on to rule the Web as the most
    widely available platform for creating animations, games, video players, and everything
    interactive, for the major part of the next decade.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: FutureWave 在 1996 年被 Macromedia 收购，他们将 FutureSplash Animator 重命名为 Flash。正如我们所知，Flash
    继续统治网络，成为创建动画、游戏、视频播放器和所有交互式内容的最大平台，在接下来的十年中占据了主导地位。
- en: 'In 1999, Microsoft used its iframe technology and JavaScript to update news
    and stock quotes on Internet Explorer''s default home page ([http://home.microsoft.com](http://home.microsoft.com)).
    In the same year, they released a proprietary ActiveX extension for IE, called
    XMLHTTP. This was the era when XML was the "in" thing and everyone wanted to use
    XML for anything they were doing. This XMLHTTP component was originally meant
    to load XML data in the page asynchronously, using JavaScript. It was soon adopted
    by Mozilla, Safari, and Opera, as XMLHttpRequest (or XHR, for short). But it was
    with the launch of Gmail (by Google) that the term AJAX (Asynchronous JavaScript
    and XML)—coined by Jesse James Garrett in an article titled *Ajax: A New Approach
    to Web Applications*—became the buzzword in web development. The following figure
    shows an AJAX Request:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '在 1999 年，Microsoft 使用其 iframe 技术和 JavaScript 更新了 Internet Explorer 默认主页上的新闻和股票报价（[http://home.microsoft.com](http://home.microsoft.com)）。同年，他们为
    IE 发布了一个专有的 ActiveX 扩展，称为 XMLHTTP。这是 XML 成为“热门”事物的时代，每个人都想在他们所做的事情中使用 XML。这个 XMLHTTP
    组件最初是为了使用 JavaScript 异步加载页面中的 XML 数据。它很快被 Mozilla、Safari 和 Opera 采用，作为 XMLHttpRequest（或简称
    XHR）。但是，随着 Gmail（由 Google 推出）的推出，Jesse James Garrett 在一篇题为 *Ajax: A New Approach
    to Web Applications* 的文章中创造的术语 AJAX（异步 JavaScript 和 XML）成为了网络开发的流行语。以下图显示了 AJAX
    请求：'
- en: '![A bit of history](img/0786_01_03.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![一点历史](img/0786_01_03.jpg)'
- en: AJAX Request
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: AJAX 请求
- en: Gmail also shed light on the advantages of live updates to web pages and opened
    the floodgates to various hacks built over AJAX to push data from a server (or
    at least, giving the illusion of doing so).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Gmail 也展示了网页实时更新的优势，并打开了使用 AJAX 构建的各种黑客攻击的大门，以从服务器（或至少，给人一种这样做的感觉）推送数据。
- en: Collectively, these technologies were referred to as Comet-a term introduced
    by Alex Russell on his blog in 2006\. Comet was a play on the word Ajax, both
    being popular household cleaners in the US. Comet was not one single approach.
    It introduced multiple mechanisms to give the feeling of data being pushed from
    the server to the client. These included Hidden iframe, XHR polling, XHR long
    polling, and Script tag long polling (or, JSONP long polling).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术统称为Comet——这是Alex Russell在2006年他在博客中引入的一个术语。Comet是对Ajax这个词的戏仿，两者在美国都是流行的家用清洁剂。Comet并不是单一的方法。它引入了多种机制来给人一种数据从服务器推送到客户端的感觉。这些包括隐藏iframe、XHR轮询、XHR长轮询和script标签长轮询（或JSONP长轮询）。
- en: Let us understand how these work, as they continue to remain the most commonly
    available mechanisms across all modern browsers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解这些是如何工作的，因为它们仍然是所有现代浏览器中最常见的机制。
- en: 'The first and the easiest to implement is XHR polling, in which the browser
    keeps polling for data periodically, and the server keeps responding with an empty
    response unless it has data to send back to the browser. Following an event, such
    as receiving a mail, or creating/updating a record in the database, the server
    responds to the next polling request with new data. The following figure depicts
    this mechanism:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 其中第一种也是最简单易实现的是XHR轮询，其中浏览器定期轮询数据，服务器除非有数据要发送回浏览器，否则会一直响应空响应。在事件发生后，例如接收邮件或在数据库中创建/更新记录，服务器会使用新数据响应下一个轮询请求。以下图展示了这一机制：
- en: '![A bit of history](img/0786_01_04.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![一点历史](img/0786_01_04.jpg)'
- en: XHR polling
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: XHR polling
- en: As you can see, there is a problem with this. The browser has to keep making
    requests to the server even when there is no data. This causes the server to get
    and process data even when there is nothing to deliver.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这里有一个问题。即使没有数据，浏览器也必须不断向服务器发送请求。这导致服务器在没有要发送的内容时获取和处理数据。
- en: 'One of the solutions to this is to modify the server to piggyback the actual
    client requests by not only sending the data requested by the client, but also
    appending additional data that the server has, to send to the browser. The client
    needs to be modified to understand and act upon the additional incoming data.
    The HTTP piggybacking process is shown in the following figure:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法之一是修改服务器，通过不仅发送客户端请求的数据，还附加服务器拥有的其他数据来“搭载”实际的客户端请求。客户端需要被修改以理解并处理这些额外的传入数据。以下图显示了HTTP
    piggybacking的过程：
- en: '![A bit of history](img/0786_01_05.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![一点历史](img/0786_01_05.jpg)'
- en: HTTP piggybacking
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP piggybacking
- en: As the new data is only sent when there is a client action, it causes delays
    in the data reaching the browser. The solution to receiving events quickly while
    avoiding frequent server queries is long polling.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于新数据仅在客户端有动作时发送，这会导致数据到达浏览器的时间延迟。在快速接收事件的同时避免频繁的服务器查询的解决方案是长轮询。
- en: 'In long polling, when the browser sends a request to the server, the server
    won''t respond immediately if it doesn''t have data to respond with, and will
    suspend the request. Once the event occurs, the server closes the suspended request
    by sending over a response to the client. As soon as the client receives the response,
    it sends a new request:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在长轮询中，当浏览器向服务器发送请求时，如果服务器没有数据响应，它不会立即响应，并将挂起请求。一旦发生事件，服务器通过向客户端发送响应来关闭挂起的请求。一旦客户端收到响应，它就发送一个新的请求：
- en: '![A bit of history](img/0786_01_06.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![一点历史](img/0786_01_06.jpg)'
- en: Long Polling
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 长轮询
- en: There are various ways in which long polling is implemented, such as forever
    iframe, multipart XHR, script tags with JSONP, and long-living XHR.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 长轮询有多种实现方式，例如永久性iframe、多部分XHR、带有JSONP的script标签和长生存期XHR。
- en: Though all these techniques work, these are hacks, bending HTTP and XHR to be
    able to do duplex communication, which is not what they are meant for.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然所有这些技术都有效，但这些是黑客手段，通过弯曲HTTP和XHR来实现双向通信，而这并不是它们的目的。
- en: With the rapid evolution of the web browsers lead by Firefox and then Chrome,
    the long-due upgrade to HTML, called HTML5, is being widely adopted. In HTML5,
    there are two new methods for pushing data from the server to the client. One
    is Server-Sent Events (SSE) and the other is the full duplex WebSockets.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Firefox和Chrome等浏览器快速的发展，HTML的长期升级，即HTML5，正在被广泛采用。在HTML5中，有两种新的从服务器向客户端推送数据的方法。一种是服务器发送事件（SSE），另一种是全双工WebSockets。
- en: Server-Sent Events attempts to standardize Comet-like communication across browsers.
    In this approach, there is a JavaScript API to create an event source, that is,
    a stream over which the server can send events. This is a unidirectional protocol.
    We will still be using the good old XHR. This is a good approach when you don't
    need full duplex communication; just push updates from the server to client.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端事件尝试在浏览器之间标准化类似Comet的通信。在这种方法中，有一个JavaScript API用于创建事件源，即服务器可以发送事件的流。这是一个单向协议。我们仍然会使用老式的XHR。当您不需要全双工通信时，这是一个很好的方法；只需从服务器向客户端推送更新。
- en: The other specification which goes on to implement a full duplex communication
    protocol for the web applications is WebSockets. In WebSockets, the client initiates
    a socket connection with the server, which supports this protocol as well. The
    server and client will send and receive data on this socket connection.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个实现全双工通信协议的规范是WebSockets。在WebSockets中，客户端与支持此协议的服务器建立socket连接，服务器和客户端将在此socket连接上发送和接收数据。
- en: Applications of real-time web
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时网络的应用
- en: Let us take a quick look at how real-time web is changing the applications we
    come across on the Web daily.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下实时网络是如何改变我们每天在网络上遇到的应用程序的。
- en: Gaming
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏
- en: With the success of Zynga and other social gaming companies, online gaming has
    become a hot trend. WordSquared is a massively parallel online multiplayer crossword,
    while BrowserQuest is an attempt (by Mozilla) at building an in-browser real-time
    role-playing game. One of the more popular and publicized games built on socket.io
    is Rawkets. There are many open source game engines built over canvas and around
    real-time communication systems.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Zynga和其他社交游戏公司的成功，在线游戏已成为一种热门趋势。WordSquared是一个大规模并行的在线多人填字游戏，而BrowserQuest是Mozilla尝试构建的浏览器内实时角色扮演游戏。基于socket.io构建的更受欢迎和公开宣传的游戏之一是Rawkets。有许多基于canvas和实时通信系统构建的开源游戏引擎。
- en: Social stream updates
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社交流更新
- en: Twitter is the best example of getting real-time data (the tweets) to the browser
    without user action. Google+ and Facebook have it too. The important thing on
    social networks is, being updated about happenings in real time.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter是获取实时数据（推文）到浏览器而不需要用户操作的最好例子。Google+和Facebook也有。在社交网络上，重要的是能够实时了解发生的事情。
- en: Business applications
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 商业应用
- en: CRMs are some of the most important components in business acquisitions. The
    days of issue tracking systems being sold as CRMs are over. CRMs are continuously
    improving and re-inventing themselves. Most of the CRMs are adding social capabilities;
    they are adding more functionality everyday. Salesforce, one of the most popular
    hosted CRM solutions, introduced Chatter. Chatter adds social capabilities to
    CRM and brings in a lot of advantages powered by realtime updates. It allows the
    customers to add comments or post updates on issues, which appear in real time
    to the support associates on their system. BPM solutions are also integrating
    real-time components to keep a track on process status and updates.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: CRM（客户关系管理）是商业并购中最重要的组成部分之一。将问题跟踪系统作为CRM出售的日子已经过去了。CRM正在不断改进和自我革新。大多数CRM都在添加社交功能；他们每天都在增加更多功能。Salesforce——最受欢迎的托管CRM解决方案之一，推出了Chatter。Chatter为CRM添加了社交功能，并带来了许多由实时更新驱动的优势。它允许客户在系统上添加评论或发布更新，这些问题会实时出现在支持人员的系统中。BPM（业务流程管理）解决方案也在整合实时组件，以跟踪流程状态和更新。
- en: Web-based monitors
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于网络的监控器
- en: The latest updates to Google Analytics include a functionality to see the real-time
    updates of users visiting your website. Splunk—an event-tracking system, which
    is widely used to monitor events on infrastructure and machine data—allows you
    monitor and track event updates on the charts, updated in real time.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Google Analytics的最新更新包括了一个功能，可以查看访问您网站的用户的实时更新。Splunk——一个广泛用于监控基础设施和机器数据的事件跟踪系统——允许您在实时更新的图表上监控和跟踪事件更新。
- en: Summary
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In the chapter, we saw what real-time web looks like, what its applications
    are, and how the technologies around real-time web evolved over a decade of development.
    In the next chapter we will get acquainted with Node.js, the JavaScript web application
    development platform which is the primary target of socket.io.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了实时网络的样子，它的应用是什么，以及围绕实时网络的技术是如何在十年发展中演变的。在下一章中，我们将了解Node.js，这是一个JavaScript网络应用程序开发平台，它是socket.io的主要目标。
