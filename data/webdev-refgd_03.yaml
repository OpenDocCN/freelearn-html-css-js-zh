- en: Chapter 3. CSS Concepts and Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。CSS概念和应用
- en: '**Cascading Style Sheet** (**CSS**) is the preferred way to style HTML. HTML
    has a style element and a global style attribute. These make it very easy to write
    unmaintainable HTML. For example, let''s imagine that we have 10 elements on an
    HTML page for which we want the font color to be red. We create a `span` element
    to wrap the text that has the font color red, as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**层叠样式表**（**CSS**）是设置HTML样式的首选方式。HTML有一个样式元素和一个全局样式属性。这些使得编写难以维护的HTML变得非常容易。例如，让我们假设我们在一个HTML页面上有10个元素，我们希望这些元素的字体颜色为红色。我们创建一个`span`元素来包裹具有红色字体颜色的文本，如下所示：'
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Later, if we decide to change the color to blue, we will have to change 10 instances
    of that element and then multiply this by the number of pages we have used the
    `span` element on. This is completely unmaintainable.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们决定将颜色更改为蓝色，我们不得不更改该元素10次实例，然后乘以我们在页面上使用`span`元素的数量。这是完全不可维护的。
- en: This is where CSS comes in. We can target specific elements/groups of elements
    to which we wish to apply a specific style. CSS allows us to define these styles,
    easily update them, and change them from one place to another.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是CSS发挥作用的地方。我们可以针对我们希望应用特定样式的特定元素或元素组进行定位。CSS允许我们定义这些样式，轻松更新它们，并从一处更改到另一处。
- en: This book will focus on the most used CSS selectors, units, rules, functions,
    and properties from CSS1, CSS2.1, and CSS3\. For the most part, these should all
    work in any browser, but there are exceptions. A great rule of thumb is that newer
    browsers will have fewer issues.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将重点介绍最常用的CSS选择器、单位、规则、函数和属性，这些来自CSS1、CSS2.1和CSS3。在大多数情况下，这些都应该在任何浏览器中工作，但也有一些例外。一个很好的经验法则是新浏览器将出现更少的问题。
- en: We will get started with a quick overview of the different types of basic selectors.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将快速概述不同类型的基本选择器。
- en: Basic selectors
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本选择器
- en: A selector represents a structure. This representation is then used in a CSS
    rule to determine what elements are selected to be styled by this rule. CSS style
    rules apply in the form of a waterfall effect. Each rule that is matched is also
    passed on to each of its children, matched and applied based on the weight of
    the selector. This section will only focus on the most basic of selectors.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器代表一个结构。这种表示随后用于CSS规则中，以确定哪些元素被选中并应用此规则中的样式。CSS样式规则以瀑布效应的形式应用。每个匹配的规则也会传递给其每个子规则，根据选择器的权重进行匹配和应用。本节将仅关注最基本的选择器。
- en: The basic selectors are either type selectors, universal selectors, attribute
    selectors, class selectors, ID selectors, or pseudo-classes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 基本选择器包括类型选择器、通用选择器、属性选择器、类选择器、ID选择器和伪类。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'All CSS selectors are case-insensitive. Selectors can also be grouped together
    to share rules. To group selectors, you just have to split them with commas. Consider
    the following example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所有CSS选择器都是不区分大小写的。选择器也可以分组在一起以共享规则。要分组选择器，只需用逗号分隔它们。考虑以下示例：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, the following is the same as the preceding declaration
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，以下声明与前面的声明相同
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The simple selector
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单选择器
- en: The following selectors are all the simple selectors for CSS.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选择器都是CSS的简单选择器。
- en: The type selectors
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型选择器
- en: 'The `type` selectors selects based on the element name:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`type`选择器根据元素名称进行选择：'
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `E` is the element name and `ns` is a namespace.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`E`是元素名称，`ns`是命名空间。
- en: Description
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This is the simplest way to select elements—using their name. For the most part,
    when using just HTML, you not need to worry about the namespace, as all of the
    HTML elements are in the default namespace. An asterisk can be used to specify
    all namespaces, for example, `*|Element`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是选择元素的最简单方式——使用它们的名称。在大多数情况下，当仅使用HTML时，你不需要担心命名空间，因为所有HTML元素都在默认命名空间中。可以使用星号来指定所有命名空间，例如，`*|Element`。
- en: When this selector is used, it will match all of the elements in the document.
    For example, if you have fifteen `h2` elements and use a single `h2` element,
    then this rule will match all fifteen.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用此选择器时，它将匹配文档中的所有元素。例如，如果你有十五个`h2`元素，并使用单个`h2`元素，那么这个规则将匹配所有十五个。
- en: 'Here are a few examples of the `type` selector. The first code sets all the
    `h1` elements'' font color to red. The next code applies red as the background
    color for all `p` elements:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些`type`选择器的示例。第一段代码将所有`h1`元素的字体颜色设置为红色。接下来的代码将红色作为所有`p`元素的背景颜色：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The universal selector
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用选择器
- en: 'The asterisk (`*`) represents any and all qualified elements:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 星号（`*`）代表任何和所有合格元素：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, `ns` is a namespace.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`ns` 是一个命名空间。
- en: Description
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This is essentially a wildcard selector. It will match every element. This is
    `true` even when used with other selectors. For example, `*.my-class` and `.my-class`
    are the same.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是一个通配符选择器。它将匹配每个元素。即使与其他选择器一起使用，这也是 `true`。例如，`*.my-class` 和 `.my-class`
    是相同的。
- en: 'While you can use it as a single selector to match every element, it is most
    useful when used with other selectors. Following along with our preceding example,
    we may want to select any element that is a descendant of an `article` element.
    This selector is very explicit and easy to read, take a look at the following
    syntax:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以将其用作单个选择器来匹配每个元素，但它在与其他选择器一起使用时最有用。按照我们前面的例子，我们可能想要选择任何是 `article` 元素后代的元素。这个选择器非常明确且易于阅读，请看以下语法：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is an example. The first example uses attribute selectors to select any
    elements with `hreflang` in English, and the second example will select all elements
    in the document:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子。第一个例子使用属性选择器选择任何具有 `hreflang` 的元素，并且是英文的，第二个例子将选择文档中的所有元素：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The attribute selectors
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性选择器
- en: 'These selectors will match against attributes of an element. There are seven
    different types of attribute selector and they are as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选择器将匹配元素的属性。有七种不同的属性选择器类型，如下所示：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: These selectors are usually preceded by a type selector or universal selector.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选择器通常由类型选择器或通用选择器 precede。
- en: Description
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'This selector is a way to use a regular expression syntax in a selector rule.
    Each of the selectors will act differently based on the use, so they are listed
    with the differences here:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器是一种在选择器规则中使用正则表达式语法的方法。每个选择器根据其使用方式会有不同的行为，因此它们会根据差异在此列出：
- en: '`[attribute]`: This matches an element that has the `[attribute]` attribute,
    irrespective of the value of the attribute.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[attribute]`: 这匹配具有 `[attribute]` 属性的元素，无论属性的值如何。'
- en: '`[=]`: The value has to be an exact match.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[=]`: 值必须与精确匹配。'
- en: '`[~=]`: This is used when the attribute takes a list of values. One of the
    values in the list must match.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[~=]`: 当属性接受值列表时使用。列表中的某个值必须匹配。'
- en: '`[|=]`: This attribute must either be an exact match or the value must begin
    with the value followed immediately by a `-`.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[|=]`: 这个属性必须要么是精确匹配，要么值必须以紧跟其后的值开始，后面跟着一个 `-`。'
- en: '`[^=]`: This attribute matches the value that has this prefix.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[^=]`: 这个属性匹配具有此前缀的值。'
- en: '`[$=]`: This attribute matches the value that has this suffix.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[$=]`: 这个属性匹配具有此后缀的值。'
- en: '`[*=]`: This attribute matches any substring of the value.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[*=]`: 这个属性匹配值的任何子串。'
- en: The best way to really show the difference between these is to use some examples.
    We will look at the `lang` and `href` attributes. The examples will be in the
    same order in which they were introduced.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 真正展示这些选择器之间差异的最好方法是使用一些例子。我们将查看 `lang` 和 `href` 属性。例子将按照它们被引入的顺序排列。
- en: Here is the HTML file that the examples will be selecting.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是选择器将要选择的HTML文件。
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Using the following, we should have all the spans with a `lang` attribute with
    a black background, Spanish will be grey, German will be red, English will be
    blue, anchor elements that have `https` attribute will be yellow, any PDFs will
    be red, and any anchor to Google will be green. Here are the preceding styles
    described:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下方法，我们应该有所有具有 `lang` 属性的span元素具有黑色背景，西班牙语将是灰色，德语将是红色，英语将是蓝色，具有 `https` 属性的锚点元素将是黄色，任何PDF将是红色，任何指向Google的锚点将是绿色。以下是前面描述的样式：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The class selectors
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类选择器
- en: This selector will match the HTML elements based on the class attribute of the
    element.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器将根据元素的类属性匹配HTML元素。
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Description
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This is the most commonly used selector. Selecting based on the `class` attribute
    allows you to style elements in an orthogonal manner. Classes can be applied to
    many different elements and we can style each of those elements in the same manner.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最常用的选择器。基于 `class` 属性的选择允许你以正交的方式对元素进行样式化。类可以应用于许多不同的元素，并且我们可以以相同的方式为每个元素设置样式。
- en: The `class` selector can be stacked so that both classes will have to be present.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`class` 选择器可以堆叠，以便两个类都必须存在。'
- en: 'Here is some HTML with different elements that have a class attribute:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些包含不同元素的HTML代码，这些元素具有类属性：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is the CSS to style the HTML:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是用于样式化HTML的CSS：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When the `red` class is applied to an element, it will change the color of the
    text to red. The compound green and black will only select elements that have
    both classes defined.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当将`red`类应用于一个元素时，它将改变文本颜色为红色。复合的绿色和黑色将只选择定义了这两个类的元素。
- en: The ID selectors
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ID选择器
- en: 'This selector will match based on the `ID` attribute of the element:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器将基于元素的`ID`属性进行匹配：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Description
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `ID` attribute should be unique for the document, so the `ID` selector should
    only ever target one element. This is in contrast to the `class` selector, which
    can be used to select multiple elements. As an example, you can use a `class`
    selector to make every image on your page have a certain amount of margin and
    have a rule that specifically targets just your logo to have a different amount
    of margin.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`ID`属性应该对文档是唯一的，所以`ID`选择器应该只针对一个元素。这与`class`选择器形成对比，`class`选择器可以用来选择多个元素。例如，你可以使用`class`选择器来使页面上的每个图像都有一定量的边距，并有一个专门针对你的标志的规则，使其有不同的边距。'
- en: 'Here is an example CSS rule that targets an ID of a logo:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个针对标志ID的CSS规则示例：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Combinators
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合器
- en: Combinators are used to select more complex structures. They can help target
    specific elements or groups of elements that would be difficult to target otherwise.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 组合器用于选择更复杂的结构。它们可以帮助选择其他方式难以选择的具体元素或元素组。
- en: Descendant combinator
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后代组合器
- en: This selector specifies that an element must be contained by another element.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器指定一个元素必须被另一个元素包含。
- en: 'The combinator is the whitespace character. We are explicitly defining it here
    so that it is clear:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 组合器是空白字符。我们在这里明确定义它，以便清晰：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Description
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The two or more statements used in this selector can be any valid selector statement.
    For example, the first could be a `class` selector followed by a `type` selector.
    The distance between the selectors does not matter. Each intermediate element
    will not have to be listed for the selector to work.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个选择器中使用的两个或多个语句可以是任何有效的选择器语句。例如，第一个可以是`class`选择器后面跟着`type`选择器。选择器之间的距离无关紧要。每个中间元素不需要列出，选择器就可以工作。
- en: The combinator can be stacked. Each statement will have a whitespace character
    around it. This list of selectors does not need to be all inclusive, but for the
    selector to match the hierarchy, it does need to exist.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 组合器可以堆叠。每个语句周围都有一个空白字符。这个选择器列表不需要包含所有内容，但为了选择器匹配层次结构，它确实需要存在。
- en: This selector is best used when you only want to style elements in certain situations.
    The following example highlights this.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器最好用于你只想在特定情况下样式化元素的情况。以下示例说明了这一点。
- en: 'In this first example, we will target images that are in an ordered list with
    the ID of presidents and give them a red border. Here is its HTML code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一个例子中，我们将针对具有“presidents”ID的有序列表中的图像，并给它们添加一个红色边框。这是它的HTML代码：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here is the CSS rule:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS规则：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here is an example that demonstrates that there can be many elements between
    selectors. Here is the very arbitrary HTML.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个例子，演示了选择器之间可以存在许多元素。这是非常随意的HTML。
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here is the CSS rule:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS规则：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, here is an example of a multiple selector hierarchy, which has the
    following HTML:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里是一个多重选择器层次结构的例子，其HTML如下：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The CSS rule:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: CSS规则：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The child combinator
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子组合器
- en: 'This selector targets a specific child:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器针对特定的子元素：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Description
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This is very similar to the descendant combinatory except for the fact that
    this only targets a child relationship. The second selector must be a direct descendant
    of the parent directly contained by the first.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这与后代组合器非常相似，只是这个只针对子关系。第二个选择器必须是第一个直接包含在父元素中的直接后代。
- en: 'Here is an example that will only target the first span in this HTML:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个例子，它将只针对这个HTML中的第一个`span`：
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here is the CSS rule that only sets the first span''s color to red:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是只设置第一个`span`颜色的CSS规则：
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The adjacent sibling combinator
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 邻接兄弟组合器
- en: 'This selector targets elements that are next to each other in the hierarchy:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器针对在层次结构中相邻的元素：
- en: '[PRE26]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Description
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The two elements must have the same parent, and the first element must be immediately
    followed by the second.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个元素必须具有相同的父元素，第一个元素必须紧接第二个元素之后。
- en: Here is an example that highlights how the selector works. Only the second span
    will have the rule applied. The final span's preceding sibling is not another
    span so it is not matched by the selector. Here is the HTML.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例，突出显示了选择器的工作方式。只有第二个 span 将应用此规则。最后一个 span 的前一个兄弟不是 span，因此它不会被选择器匹配。以下是
    HTML 代码。
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '**CSS**:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**:'
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The general sibling combinator
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一般兄弟组合器
- en: 'This selector targets any element that has the same parent and follows the
    first:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器针对任何与第一个元素有相同父元素并跟随它的元素。
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Description
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This is similar to the adjacent sibling combinatory; in that, both elements
    need the same parent. The difference is that the two elements can be separated
    by other elements.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这与相邻兄弟组合器类似；不同之处在于，两个元素可以由其他元素分隔。
- en: 'Here is an example that shows that both the second and third spans will be
    targeted even though there is an `em` element between them. Here is the HTML:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例，说明尽管第二个和第三个 span 之间有一个 `em` 元素，但第二个和第三个 span 都将被目标化。以下是 HTML 代码。
- en: '[PRE30]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here is the CSS rule:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 CSS 规则。
- en: '[PRE31]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The selector specificity
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择器特定性
- en: 'This is not a selector rule like the others in this section. An element can
    be targeted by multiple rules, so how do you know which rule takes precedence?
    This is where specificity comes in. You can calculate which rule will be applied.
    Here is how it is calculated. Keep in mind that an inline style will trump any
    selector specificity:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是本节中其他选择器规则之一。一个元素可以被多个规则目标化，那么如何知道哪个规则具有优先级？这就是特定性发挥作用的地方。你可以计算出哪个规则将被应用。以下是计算方法。请注意，内联样式将覆盖任何选择器特定性：
- en: The number of `ID` selectors in the selector is denoted by `a`
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器中的 `ID` 选择器数量用 `a` 表示
- en: The number of `class` selectors, `attribute` selectors, and pseudo-classes in
    the selector is denoted by `b`
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器中的类选择器、属性选择器和伪类的数量用 `b` 表示
- en: The number of `type` selectors and pseudo-elements in the selector is denoted
    by `c`
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器中的 `类型` 选择器和伪元素的数量用 `c` 表示
- en: Any `universal` selectors are ignored
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何 `通用` 选择器都被忽略
- en: 'The numbers are then concatenated together. The larger the value, the more
    precedence the rule has. Let''s look at some selector examples. The examples will
    be composed of the selector and then the calculated value:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数字然后被连接起来。数值越大，规则优先级越高。让我们看看一些选择器示例。示例将由选择器和计算值组成：
- en: '`h1`: `a=0` `b=0` `c=1`, `001` or `1`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h1`: `a=0` `b=0` `c=1`, `001` 或 `1`'
- en: '`h1 span`: `a=0` `b=0` `c=2`, `002` or `2`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h1 span`: `a=0` `b=0` `c=2`, `002` 或 `2`'
- en: '`h1 p > span`: `a=0` `b=0` `c=3`, `003` or `3`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h1 p > span`: `a=0` `b=0` `c=3`, `003` 或 `3`'
- en: '`h1 *[lang="en"]`: `a=0` `b=1` `c=1`, `011` or `11`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h1 *[lang="en"]`: `a=0` `b=1` `c=1`, `011` 或 `11`'
- en: '`h1 p span.green`: `a=0` `b=1` `c=3`, `013` or `13`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h1 p span.green`: `a=0` `b=1` `c=3`, `013` 或 `13`'
- en: '`h1 p.example span.green`: `a=0` `b=2` `c=3`, `023` or `23`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h1 p.example span.green`: `a=0` `b=2` `c=3`, `023` 或 `23`'
- en: '`#title`: `a=1` `b=0` `c=0`, `100`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#title`: `a=1` `b=0` `c=0`, `100`'
- en: '`h1#title`: `a=1` `b=0` `c=1`, `101`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h1#title`: `a=1` `b=0` `c=1`, `101`'
- en: The easiest way to think about this is that each grouping (`a`, `b`, or `c`)
    should be a smaller group of elements to choose from. This means that each step
    has more weight. For example, there can be many instances of `h1` on a page. So,
    just selecting `h1` is a little ambiguous. Next, we can add a `class`, `attribute`,
    or pseudo-class selector. This should be a subset of the instances of `h1`. Next,
    we can search by ID. This carries the most weight because there should only be
    one in the entire document.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个问题的最简单方法是认为每个分组（`a`、`b` 或 `c`）应该是一个更小的元素组，从中选择。这意味着每一步都有更多的权重。例如，一个页面上可以有多个
    `h1` 实例。所以，仅仅选择 `h1` 就有点模糊。接下来，我们可以添加一个 `class`、`attribute` 或伪类选择器。这应该是 `h1` 实例的子集。然后，我们可以通过
    ID 搜索。这具有最高的权重，因为整个文档中应该只有一个。
- en: 'Here is an example HTML that has three headings:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个包含三个标题的示例 HTML。
- en: '[PRE32]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Here is the CSS rule that will target each heading differently. The first rule
    targets all the elements, but it has the lowest specificity, the next rule is
    in the middle, and the last rule only targets one element. In the following example,
    `/* */` denotes text that is a comment:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是针对每个标题不同目标的 CSS 规则。第一个规则针对所有元素，但它的特定性最低，下一个规则位于中间，最后一个规则只针对一个元素。在下面的示例中，`/*
    */` 表示注释文本：
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Pseudo-classes
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 伪类
- en: Pseudo-classes are selectors that use information that is outside of the document
    tree. The information that is not in the attributes of the element. This information
    can change between visits or even during the visit. Pseudo-classes always have
    a colon followed by the name of the pseudo-class.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 伪类是使用文档树之外的信息的选择器。这些信息不在元素的属性中。这些信息可能在访问之间或甚至在访问期间改变。伪类总是有一个冒号后跟伪类的名称。
- en: The link pseudo-classes
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接伪类
- en: There are two mutually exclusive link pseudo-classes, namely, `:link` and `:visited`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个互斥的链接伪类，即 `:link` 和 `:visited`。
- en: :link
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: :link
- en: 'This selects links that have not been visited. The syntax is as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这选择未访问的链接。语法如下：
- en: '[PRE34]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Description
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This pseudo-class exists on any anchor element that has not been visited. The
    browser may decide to switch a link back after some time.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这个伪类存在于任何未访问的锚点元素上。浏览器可能会在一段时间后决定将链接切换回来。
- en: 'Here is an example along with the `:visited` pseudo-class. Here is its HTML:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个与 `:visited` 伪类一起的例子。这是它的 HTML：
- en: '[PRE35]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Here is the CSS. We can make an assumption that you have visited Google, so
    the link would likely be green in color:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 CSS。我们可以假设你已经访问过 Google，所以链接可能呈绿色：
- en: '[PRE36]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: :visited
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: :visited
- en: 'This selects links that have been visited. The syntax is as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这选择已访问的链接。语法如下：
- en: '[PRE37]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Description
  id: totrans-157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This pseudo-class exists on any anchor element that has been visited.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这个伪类存在于任何已访问的锚点元素上。
- en: 'Here is an example along with the `:link` pseudo-class. Here is its HTML:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个与 `:link` 伪类一起的例子。这是它的 HTML：
- en: '[PRE38]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Here is the CSS. We can make the same assumption that you have visited Google,
    so the first link should be red and the second link will be green in color:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 CSS。我们可以假设你已经访问过 Google，因此第一个链接应该是红色，第二个链接将是绿色：
- en: '[PRE39]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: User action pseudo-classes
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户操作伪类
- en: These classes take effect based on actions of the user. These selectors are
    not mutually exclusive, and an element can have several matches at once.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类基于用户的操作生效。这些选择器不是互斥的，一个元素可以同时匹配多个。
- en: :active
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: :active
- en: 'This is used when the element is being activated:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于元素被激活时：
- en: '[PRE40]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Description
  id: totrans-168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: The :`active` selector is most commonly used when the mouse button is pressed
    but not released. This style can be superseded by the other user actions or link
    pseudo-classes.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`:active` 选择器在鼠标按钮按下但未释放时最常使用。这种样式可以被其他用户操作或链接伪类所取代。'
- en: 'Here is an example:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE41]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The link will turn green while you are clicking on it. Here is its CSS:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击链接时，链接会变成绿色。这是它的 CSS：
- en: '[PRE42]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: :focus
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: :focus
- en: 'This selector targets the element that has to be focused on. The syntax is
    as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器针对需要聚焦的元素。语法如下：
- en: '[PRE43]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Description
  id: totrans-177
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: An element is considered to have focus when it accepts keyboard input. For example,
    a text input element that you have either tabbed to or have clicked inside.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当元素接受键盘输入时，它被认为是具有焦点。例如，一个文本输入元素，你可能已经通过制表符切换到它或点击在其中。
- en: 'Here is a text input example:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个文本输入示例：
- en: '[PRE44]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Here is the CSS. This also highlights the fact that you can use a pseudo-class,
    which allows use of more complex selectors:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 CSS。这也强调了你可以使用伪类，这允许使用更复杂的选择器：
- en: '[PRE45]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: :hover
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: :hover
- en: 'This selector targets the elements when a user hovers their mouse over an element:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器在用户将鼠标悬停在元素上时针对元素：
- en: '[PRE46]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Description
  id: totrans-186
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This is used when a user has their cursor hovering over an element. Some browsers
    (a great example being mobile touch devices, such as mobile phones) may not implement
    this pseudo-class, as there is no way to determine whether a user is hovering
    over an element.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于用户将光标悬停在元素上时。一些浏览器（一个很好的例子是移动触摸设备，如手机）可能不会实现这个伪类，因为没有方法可以确定用户是否悬停在元素上。
- en: 'Here is an example:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE47]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The text in the span will be red in color when hovered over. Here is its CSS:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标悬停在 span 中的文本上时，文本颜色会变成红色。这是它的 CSS：
- en: '[PRE48]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The structural selectors
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结构选择器
- en: These selectors allow you to select elements based on the document tree; this
    is very difficult or impossible to do with other selectors. This only selects
    nodes that are elements and does not include text that is not inside an element.
    The numbering is `1-` based indexing.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选择器允许你根据文档树选择元素；这使用其他选择器很难或不可能做到。这仅选择节点是元素，不包括不在元素内的文本。编号是 `1-` 基础索引。
- en: :first-child
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: :first-child
- en: 'This targets an element that is the first child of another element:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这针对另一个元素的第一个子元素：
- en: '[PRE49]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Description
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This is the same as `:nth-child(1)`. This selector is straightforward, the first
    child of the element type this is applied to will be selected.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这与 `:nth-child(1)` 相同。这个选择器很简单，将选择应用到的元素类型的第一个子元素。
- en: 'Here is an example that will only select the first paragraph element. Here
    is the HTML:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子，它只会选择第一个段落元素。以下是HTML代码：
- en: '[PRE50]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Here is the CSS. This will change the text of the first paragraph red:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS代码。这将改变第一段文本的颜色为红色：
- en: '[PRE51]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: :first-of-type
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: :first-of-type
- en: 'This targets the first element type that is a child of another element:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这针对的是另一个元素的子元素中的第一个元素类型：
- en: '[PRE52]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Description
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `:first-of-type` attribute is different from `:first-child` because it will
    not select the element unless it is the first child. This is the same as `:nth-of-type(1)`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`:first-of-type` 属性与 `:first-child` 不同，因为它只有在它是第一个子元素时才会选择该元素。这等同于 `:nth-of-type(1)`。'
- en: 'Here is an example that will target the first paragraph element even though
    it is not the first child. Here is the HTML:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子，即使它不是第一个子元素，也会选择第一个段落元素。以下是HTML代码：
- en: '[PRE53]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Here is the CSS:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS代码：
- en: '[PRE54]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: :last-child
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: :last-child
- en: 'This targets an element that is the last child of another element:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这针对的是另一个元素的最后一个子元素：
- en: '[PRE55]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Description
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This is the same as `:nth-last-child(1)`. This selector is straightforward,
    the last child of the element type this is applied to will be selected.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这与 `:nth-last-child(1)` 相同。这个选择器很简单，将选择应用到的元素类型的最后一个子元素。
- en: 'Here is an example that will only select the last paragraph element. Here is
    the HTML:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子，它只会选择最后一个段落元素。以下是HTML代码：
- en: '[PRE56]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Here is the CSS. This will change the color of the second and first paragraph
    red. This selector works because even on the most basic of pages, the `p` element
    is a child of the `body` element:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS代码。这将改变第二段和第一段的颜色为红色。这个选择器之所以有效，是因为即使在最基础的页面上，`p` 元素也是 `body` 元素的子元素：
- en: '[PRE57]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: :last-of-type
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: :last-of-type
- en: 'This targets the last element type that is a child of another element:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这针对的是另一个元素的子元素中的最后一个元素类型：
- en: '[PRE58]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Description
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `:last-of-type` attribute is different from `:last-child` because it will
    not select the element unless it is the first `last-child` attribute. This is
    the same as `:nth-last-of-type(1)`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`:last-of-type` 属性与 `:last-child` 不同，因为它只有在它是第一个 `last-child` 属性时才会选择该元素。这等同于
    `:nth-last-of-type(1)`。'
- en: 'Here is an example that will target the last paragraph element. Here is its
    HTML:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子，它将选择最后一个段落元素。以下是它的HTML代码：
- en: '[PRE59]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Here is the CSS:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS代码：
- en: '[PRE60]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: :nth-child()
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: :nth-child()
- en: 'This will divide all of the child elements and select them based on where they
    exist:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把所有子元素分割开，并根据它们存在的位置来选择它们：
- en: '[PRE61]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Description
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This selector has a parameter that is very expressive in what you can select.
    This also means that it is more complex than most other CSS rules. Here is the
    technical specification of the parameter. This selects elements based on its preceding
    elements.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器有一个参数，它在选择方面非常表达。这也意味着它比大多数其他CSS规则更复杂。以下是该参数的技术规范。这个选择器基于其前面的元素来选择元素。
- en: 'The parameter can be split into two parts: part `a` Part `b`. The part `a`
    is an integer that is followed by the character `n`. Part `b` has an optional
    plus or minus sign followed by an integer. The parameter also accepts two keywords:
    even and odd. Consider *2n+1* for example.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 参数可以分为两部分：部分 `a` 和部分 `b`。部分 `a` 是一个整数，后面跟着字符 `n`。部分 `b` 有一个可选的加号或减号，后面跟着一个整数。参数还接受两个关键字：even
    和 odd。以 `2n+1` 为例。
- en: This is much easier to understand when you look at it this way. The first part,
    `an`, is what the children are divided by. The `2n` value would make groups of
    two elements and `3n` value would make groups of three elements, and so on. The
    next part `+1` will then select that element in the grouping. *2n+1* would select
    every odd item row because it is targeting the first element in every grouping
    of two elements. *2n+0* or *2n+2* would select every even item row. The first
    part, part `a`, can be omitted, and then it would just select the *n*th child
    out of the entire group. For example, *:nth-child(5)* would only select the fifth
    child and no other.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式查看时，更容易理解。第一部分，`an`，是子元素被分割的部分。`2n` 值将使元素成对分组，`3n` 值将使元素成三组，依此类推。下一部分 `+1`
    将选择分组中的该元素。`2n+1` 将选择每个奇数行项，因为它针对的是每个两个元素分组中的第一个元素。`2n+0` 或 `2n+2` 将选择每个偶数行项。第一部分，部分
    `a`，可以省略，然后它将只选择整个组中的第 `n` 个子元素。例如，`:nth-child(5)` 将只选择第五个子元素，而不选择其他元素。
- en: 'Table rows are a great example of using this selector, so we will target every
    odd row. Here is the HTML:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 表行是使用此选择器的绝佳示例，因此我们将针对每个奇数行。以下是HTML：
- en: '[PRE62]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Here is the CSS:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS：
- en: '[PRE63]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: :nth-last-child
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: :nth-last-child
- en: 'This will target the nth element from the end:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这将针对从末尾开始的第n个元素：
- en: '[PRE64]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Description
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This selector counts the succeeding elements. The counting logic is the same
    as it is for `:nth-child`.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 此选择器计算后续元素的数量。计数逻辑与 `:nth-child` 相同。
- en: 'Here is an example using a table. Here is the HTML:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个使用表格的示例。以下是HTML：
- en: '[PRE65]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The first CSS rule will change the color of every other row to red, but because
    it counts from the end, the first and third row will be selected. The second CSS
    rule will only target the last row:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条CSS规则将改变每行中每隔一行的颜色，但由于它从末尾开始计数，第一行和第三行将被选中。第二条CSS规则将仅针对最后一行：
- en: '[PRE66]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: See also
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参见
- en: The previous section `:nth-child`.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节 `:nth-child`。
- en: :nth-last-of-type and :nth-of-type
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: :nth-last-of-type 和 :nth-of-type
- en: 'This selects elements based on their type and where they exist in the document:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这根据元素的类型和它们在文档中的位置选择元素：
- en: '[PRE67]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Description
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Like all the other *n*th selectors, this one uses the same logic as `:nth-child`.
    The difference nth-of-type being that `:nth-last-of-type` only groups by elements
    of the same type.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 像所有其他 *n*th 选择器一样，这个选择器使用与 `:nth-child` 相同的逻辑。不同之处在于 nth-of-type 是 `:nth-last-of-type`
    只按相同类型的元素分组。
- en: 'Here is an example that uses paragraphs and spans:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个使用段落和跨度示例：
- en: '[PRE68]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Here is the CSS. This rule will only target the paragraphs and make the odd
    ones red:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS。此规则将仅针对段落，并将奇数行变为红色：
- en: '[PRE69]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: See also
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参见
- en: The previous section `:nth-child`.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节 `:nth-child`。
- en: :only-child
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: :only-child
- en: 'This targets an element that has no siblings:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这针对没有兄弟元素的元素：
- en: '[PRE70]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Description
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This will match when the `:only-child` attribute is the only child of an element.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `:only-child` 属性是元素的唯一子元素时，这将匹配。
- en: 'Here is an example with two tables, where one has multiple rows and the other
    has only one:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个表格的示例，其中一个有多个行，另一个只有一个：
- en: '[PRE71]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Here is the CSS to target the only row in the second table:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是针对第二个表格中唯一行的CSS：
- en: '[PRE72]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: :only-of-type
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: :only-of-type
- en: 'This targets when there is only one of this element:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这针对只有一个此类元素的情况：
- en: '[PRE73]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Description
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This will only match when there are no other siblings of the same type under
    a parent element.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这将仅在父元素下没有其他相同类型的兄弟元素时匹配。
- en: 'Here is an example that uses arbitrary divisions to create a structure where
    one paragraph element is the only one of its type. Here is the HTML:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个使用任意分隔来创建一个结构的示例，其中一个段落元素是其类型的唯一元素。以下是HTML：
- en: '[PRE74]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Here is the CSS rule that will only target the first paragraph''s element:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是仅针对第一段元素的CSS规则：
- en: '[PRE75]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Validation
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证
- en: These are pseudo-classes that can be used to target the state of input elements
    and more.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是伪类，可以用来针对输入元素的状态等。
- en: :checked
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: :checked
- en: 'This attribute targets the checked radio button or checkbox:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性针对已选中的单选按钮或复选框：
- en: '[PRE76]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Description
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Any element that can be toggled on or off can use this selector. As of now,
    these are radio buttons, checkboxes, and options in a selective list.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可以打开或关闭的元素都可以使用此选择器。到目前为止，这些是单选按钮、复选框和选择列表中的选项。
- en: 'Here is an example with a `checkbox` and a `label` value:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个包含 `checkbox` 和 `label` 值的示例：
- en: '[PRE77]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Here is a CSS rule that will target the label only when the checkbox is checked:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个CSS规则，它将仅在复选框被选中时针对标签：
- en: '[PRE78]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: :default
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: :default
- en: 'This targets the default element from many similar elements:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 这针对多个类似元素中的默认元素：
- en: '[PRE79]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Description
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Use this selector to help define the default element from a group of elements.
    In a form, this would be the default button or the initially selected option from
    a `select` element.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此选择器帮助定义一组元素中的默认元素。在表单中，这将默认按钮或从 `select` 元素中最初选中的选项。
- en: 'Here is an example using a form:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个使用表单的示例：
- en: '[PRE80]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Here is the CSS. This will only target the submit input as it is the default:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS。这将仅针对提交输入，因为它默认：
- en: '[PRE81]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: :disabled and :enabled
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: :disabled 和 :enabled
- en: 'These will target elements based on their enabled state:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 这些将根据它们的启用状态选择元素：
- en: '[PRE82]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Description
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: There is a disabled attribute that is available on interactive elements. Using
    `:disabled` will target elements where the `:disabled` attribute is present and
    `:enabled` will do the opposite.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互式元素上有一个可用的禁用属性。使用 `:disabled` 将针对具有 `:disabled` 属性的元素，而 `:enabled` 将执行相反的操作。
- en: 'Here is some HTML with two inputs out of which one is disabled:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些包含两个输入的HTML，其中一个被禁用：
- en: '[PRE83]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Here is the CSS. The disabled input will have its text color set as red and
    the other as green:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS。禁用的输入项将文本颜色设置为红色，而其他输入项为绿色：
- en: '[PRE84]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: :empty
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`:empty`'
- en: 'This targets elements that have no children:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这针对没有子节点的元素：
- en: '[PRE85]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Description
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This targets nodes without any children. Children can be any other element including
    text nodes. This means that even one space will count as a child. However, comments
    will not count as children.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这针对没有子节点的节点。子节点可以是任何其他元素，包括文本节点。这意味着即使是一个空格也会算作一个子节点。然而，注释不会算作子节点。
- en: 'Here is an example with three `div` tags. The first is empty, the next has
    text, and the final one has one space in it. Here is the HTML:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个有三个`div`标签的示例。第一个是空的，下一个有文本，最后一个有一个空格。这是HTML：
- en: '[PRE86]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Here is the CSS. Only the first div will have a red background:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS。只有第一个`div`将具有红色背景：
- en: '[PRE87]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: :in-range and :out-of-range
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`:in-range` 和 `:out-of-range`'
- en: 'These selectors target elements that have a range limitation:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选择器定位具有范围限制的元素：
- en: '[PRE88]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Description
  id: totrans-322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Some elements now have range limitations that can be applied. When the value
    is outside of this range, the `:out-of-range` selector will target it, and when
    the value is within the range, `:in-range` will target it.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 一些元素现在有可以应用的范围限制。当值超出这个范围时，`:out-of-range`选择器将定位它，而当值在这个范围内时，`:in-range`将定位它。
- en: 'Here is an example that uses an input that is the number type:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个使用数字类型输入的示例：
- en: '[PRE89]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Here is the CSS. The first input will have red text because it is beyond the
    maximum range and the second will have green text:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS。第一个输入项将具有红色文本，因为它超出了最大范围，而第二个输入项将具有绿色文本：
- en: '[PRE90]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: :invalid and :valid
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`:invalid` 和 `:valid`'
- en: 'The `:invalid` and `:valid` attribute targets an element based on the validity
    of the data:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`:invalid` 和 `:valid` 属性根据数据的有效性来定位元素：'
- en: '[PRE91]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Description
  id: totrans-331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Certain input elements have data validity, a great example being the e-mail
    element. The selectors select based on whether the data is valid or not. You should
    note that some elements are always valid, for example, a text input, and some
    elements will never be targeted by these selectors, for example, a `div` tag.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 某些输入元素具有数据有效性，一个很好的例子是电子邮件元素。选择器根据数据是否有效来选择。你应该注意，一些元素始终是有效的，例如文本输入，而一些元素永远不会被这些选择器定位，例如`div`标签。
- en: 'Here is an example with an e-mail input:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个电子邮件输入的示例：
- en: '[PRE92]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Here is the CSS. The first input will be green as it is valid and the other
    will be red:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS。第一个输入项将是绿色，因为它有效，而其他输入项将是红色：
- en: '[PRE93]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: :not or negation
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`:not` 或否定'
- en: 'The `:not` attribute negates a selector:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`:not` 属性否定一个选择器：'
- en: '[PRE94]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Description
  id: totrans-340
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `:not` parameter must be a simple selector and will target the elements
    where the `:not` parameter is not `true`. This selector does not add to specificity
    of the rule.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`:not` 参数必须是一个简单选择器，并将定位到`:not`参数不是`true`的元素。这个选择器不会增加规则的特定性。'
- en: 'Here is an example using paragraphs:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个使用段落的示例：
- en: '[PRE95]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Here is the CSS. Only the first paragraph will be targeted:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS。只有第一个段落将被定位：
- en: '[PRE96]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: :optional and :required
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`:optional` 和 `:required`'
- en: The `:optional` and `:required` attributes target elements that are either optional
    or required, respectively.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`:optional` 和 `:required` 属性分别定位可选或必需的元素。'
- en: '[PRE97]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Description
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This is used for any input element that is required or optional.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于任何必需或可选的输入元素。
- en: 'Here is an example that has two inputs—one that is required and one that is
    not:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个有两个输入的示例——一个是必需的，另一个不是：
- en: '[PRE98]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Here is the CSS. The required input will have red text and the optional input
    will have green text:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS。必需的输入项将具有红色文本，而可选的输入项将具有绿色文本：
- en: '[PRE99]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: :lang()
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`:lang()`'
- en: 'The `:lang()` attribute targets based on the language:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`:lang()` 属性根据语言来定位：'
- en: '[PRE100]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Description
  id: totrans-358
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This selector works differently to the attribute selector; in that, this will
    target all elements that are in a specific language even if they are not explicitly
    defined. The attribute selector will only target elements that have a `lang` attribute.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器与属性选择器的工作方式不同；即，这将定位所有在特定语言中的元素，即使它们没有明确定义。属性选择器只会定位具有`lang`属性的元素。
- en: 'Here is an example with a `span` element that does not have a `lang` attribute,
    but it is the child of the body which does:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个`span`元素的示例，它没有`lang`属性，但它是具有`lang`属性的body元素的子元素：
- en: '[PRE101]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Here is the CSS. The first rule will match the element, but the second will
    not match anything:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS。第一个规则将匹配元素，但第二个规则不会匹配任何内容：
- en: '[PRE102]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Pseudo-elements
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 伪元素
- en: These are selectors that go beyond what is specified in the document. The selectors
    select things that may not even be elements in the document. Pseudo-elements are
    not considered part of a simple selector. This means that you cannot use a pseudo-element
    as part of the `:not()` selector. Finally, only one pseudo-element can be present
    per selector.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是超出文档中指定内容的选择器。选择器选择的东西可能是文档中不存在的元素。伪元素不被视为简单选择器的一部分。这意味着您不能将伪元素用作`:not()`选择器的一部分。最后，每个选择器只能有一个伪元素。
- en: Note
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that all of the pseudo-elements start with a double colon (`::`). This
    was introduced in CSS3 to help differentiate between pseudo-classes that have
    a single colon (`:`). This is important because in CSS2, pseudo-elements only
    had the single colon. For the most part, you should use the double colon.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，所有伪元素都以双冒号（`::`）开头。这是在CSS3中引入的，以帮助区分具有单个冒号（`:`）的伪类。这很重要，因为在CSS2中，伪元素只有单个冒号。在大多数情况下，您应该使用双冒号。
- en: ::before and ::after
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ::before 和 ::after
- en: 'These are used to insert generated content before or after the selected element:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 这些用于在所选元素之前或之后插入生成内容：
- en: '[PRE103]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Description
  id: totrans-371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This will insert content into the document based on the selector. Whether the
    content is placed before or after the element targeted depends on the pseudo-element
    used. Refer to the *Generated content* section to see what you can insert.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 这将根据选择器将内容插入文档。内容是放置在目标元素之前还是之后取决于所使用的伪元素。请参阅*生成内容*部分，了解您可以插入的内容。
- en: Here is an example that uses both `::before` and `::after`. This will create
    a turkey sandwich. Here is the HTML.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个使用`::before`和`::after`的例子。这将创建一个火鸡三明治。以下是HTML代码。
- en: '[PRE104]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Here is the CSS that will put a slice of bread before and after the turkey:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS，它将在火鸡前后放置一片面包：
- en: '[PRE105]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: See also
  id: totrans-377
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关内容
- en: '*Generated content*'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '*生成内容*'
- en: ::first-letter
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ::first-letter
- en: 'This targets the first letter of an element:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 这针对元素的第一个字母：
- en: '[PRE106]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Description
  id: totrans-382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This will select the first letter of an element as long as it does not have
    any other content before it, for example an `img` element before a character would
    make `::first-letter` not select the first character. Any punctuation that either
    precedes or follows the first letter would be included with the first letter.
    This will select any character, including not just letters but also numbers.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 这将选择元素中的第一个字母，前提是它前面没有任何其他内容，例如一个`img`元素在字符之前会使`::first-letter`不选择第一个字符。任何在第一个字母之前或之后出现的标点符号都将包含在第一个字母中。这将选择任何字符，包括不仅仅是字母，还包括数字。
- en: This only applies to block-like containers such as block, `list-item`, `table-cell`,
    `table-caption`, and `inline-block` elements.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅适用于类似块容器，如块、`list-item`、`table-cell`、`table-caption`和`inline-block`元素。
- en: Note
  id: totrans-385
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `::first-letter` pseudo-element will only match if the first letter is on
    the first formatted line. If there is a line break before the first letter appears,
    it will not be selected.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`::first-letter`伪元素只有在第一个字母位于第一格式行上时才会匹配。如果第一个字母出现之前有换行符，则不会选择它。'
- en: 'Here is an example, which will not select the first letter:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个例子，它不会选择第一个字母：
- en: '[PRE107]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Here is the CSS:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS：
- en: '[PRE108]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Here is an example:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个例子：
- en: '[PRE109]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Here is the CSS. The T in This will be two times the font size of all the other
    characters:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS。在"This"中的T将是所有其他字符字体大小的两倍：
- en: '[PRE110]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: ::first-line
  id: totrans-395
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ::first-line
- en: 'The `::first-line` attribute targets the first line of an element:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`::first-line`属性针对元素的第一行：'
- en: '[PRE111]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Description
  id: totrans-398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This will target the first formatted line of a block-like container such as
    a `block box`, `inline-block`, `table-caption`, or `table-cell`.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 这将针对类似块容器（如`block box`、`inline-block`、`table-caption`或`table-cell`）的第一格式行。
- en: 'Here is an example, with the following HTML:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个例子，以下面的HTML为例：
- en: '[PRE112]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Here is the CSS. This will make the first line, whatever it may be, red:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS。这将使第一行（无论是什么）显示为红色：
- en: '[PRE113]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: ::selection
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ::selection
- en: 'This targets text highlighted by the user:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 这针对用户突出显示的文本：
- en: '[PRE114]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Description
  id: totrans-407
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This pseudo-element allows you to style any text that is highlighted by the
    user. This pseudo-element does not exist in CSS3, but it is part of the next version.
    Most browsers will still honor this pseudo-element.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 这个伪元素允许您对用户突出显示的任何文本进行样式设置。这个伪元素在CSS3中不存在，但它将是下一个版本的一部分。大多数浏览器仍然会尊重这个伪元素。
- en: 'Here is an example:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个例子：
- en: '[PRE115]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Here is the CSS. When the text is selected, the text will be white on a red
    background:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CSS。当文本被选中时，文本将在红色背景上显示为白色：
- en: '[PRE116]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Generated content
  id: totrans-413
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成内容
- en: This is not a selector, but is used with the pseudo-elements `::before` and
    `::after`. There are only certain types of content that you can generate. Here
    is a rundown.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个选择器，但与伪元素 `::before` 和 `::after` 一起使用。你可以生成的内容类型有限。以下是概述。
- en: content
  id: totrans-415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内容
- en: 'This is the content that will be placed either before or after elements:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将被放置在元素前后的内容：
- en: '[PRE117]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Parameters
  id: totrans-418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'Following are the parameters and their description:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是参数及其描述：
- en: '`none`: This parameter does not generate any content'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`none`: 此参数不会生成任何内容'
- en: '`normal`: This is the default parameter and is the same as none'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`normal`: 这是默认参数，等同于无'
- en: '`<string>`: This is any string text content'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<string>`: 这是指任何字符串文本内容'
- en: '`<uri>`: This will map to a resource, for example, an image'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<uri>`: 这将映射到一个资源，例如，一个图像'
- en: '`<counter>`: This can be used as either the `counter()` or `counters()` function
    to put a counter before or after each element'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<counter>`: 这可以用来作为 `counter()` 或 `counters()` 函数，在元素前后放置计数器'
- en: '`open-quote` and `close-quote`: This is used with the quotes generated content
    property'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`open-quote` 和 `close-quote`: 这与生成的引用内容属性一起使用'
- en: '`no-open-quote` and `no-close-quote`: This does not add content, but increments
    or decrements the nesting level of quotes'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`no-open-quote` 和 `no-close-quote`: 这不会添加内容，但会递增或递减引用的嵌套层级'
- en: '`attr(x)`:This returns the value of the attribute of the element this is targeting'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attr(x)`: 这将返回目标元素的属性值'
- en: Description
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This property is used to add content to the document. The output is controlled
    by the value used. The values can be combined to create more complex content.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性用于向文档添加内容。输出由使用的值控制。这些值可以组合起来创建更复杂的内容。
- en: A new line can be inserted with the characters `\A`. Just remember that HTML
    will ignore a line break by default.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用字符 `\A` 插入新行。只需记住，HTML 默认会忽略换行符。
- en: 'Here are some examples. These will demonstrate how to use many of the content
    values:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些示例。这些示例将展示如何使用许多内容值：
- en: '[PRE118]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Here is the CSS. The `h1` elements will have the word "`chapter`" along with
    a number before each. The `h2` element will have a line break in its content.
    Finally, the `blockquote` will have an opening quote and a closing quote:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 CSS 代码。`h1` 元素将带有“`章节`”这个词，并在每个前面加上一个数字。`h2` 元素的内容将有一个换行符。最后，`blockquote`
    将有一个开引号和一个闭引号：
- en: '[PRE119]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Quotation marks
  id: totrans-435
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引号
- en: 'Quotation marks specify which characters are used as open and close quotes:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 引号指定了哪些字符用作开引号和闭引号：
- en: '[PRE120]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Parameters
  id: totrans-438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: '`<string> <string>`: These are pairs of characters that will represent an open
    and close quote. You can use this multiple times to create levels of quotes.'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '`<string> <string>`: 这些是表示开引号和闭引号的字符对。你可以多次使用它来创建引用的层级。'
- en: Description
  id: totrans-440
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: We can use this property to set which quotation marks are used.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用此属性来设置使用的引号类型。
- en: 'Here is an example that has a nested quote:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个包含嵌套引用的示例：
- en: '[PRE121]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'The quotation marks are completely arbitrary. Here is the CSS:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 引号是完全任意的。以下是 CSS 代码：
- en: '[PRE122]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
