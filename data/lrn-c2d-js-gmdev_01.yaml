- en: Chapter 1. Hello World – A Cross-platform Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章. Hello World – 一个跨平台游戏
- en: The legend says that the first working script you should do when learning a
    new language is the classic Hello World printed somewhere on the screen.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 传说中，当你学习一门新语言时，第一个应该做的有效脚本就是将经典的Hello World打印在屏幕上的某个位置。
- en: 'This chapter will guide you through the creation of a cross-platform Hello
    World example, covering these concepts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将指导你创建一个跨平台的 Hello World 示例，涵盖以下概念：
- en: The theory behind the creation of cross platform games
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨平台游戏创建背后的理论
- en: Cocos2d-JS installation and setup
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cocos2d-JS 安装和设置
- en: A Cocos2d-JS project blueprint
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cocos2d-JS 项目蓝图
- en: Scenes, Layers, and Sprites
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 场景、层和精灵
- en: Preloading images
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预加载图片
- en: Adding images
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加图片
- en: Removing images
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除图片
- en: By the end of the chapter, you will be able to create a template project to
    create any kind of Cocos2d-JS cross-platform game that is capable of running on
    various devices at different resolutions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够创建一个模板项目，用于创建任何类型的 Cocos2d-JS 跨平台游戏，该游戏能够在不同分辨率的多种设备上运行。
- en: Why should I make cross-platform games?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我应该制作跨平台游戏？
- en: This is a very important question. I asked it to myself a lot of times when
    HTML5 mobile gaming started to become popular. I was just thinking it was a waste
    of time to simply care about the different screen resolutions and aspect ratios,
    so my first HTML5 game was made to perfectly fit my iPad 2 tablet.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常重要的问题。当 HTML5 移动游戏开始变得流行时，我多次问自己这个问题。我只是认为仅仅关注不同的屏幕分辨率和宽高比是浪费时间，所以我的第一个
    HTML5 游戏是为了完美适配我的 iPad 2 平板。
- en: When I finally showed it to sponsors, most of them said something like "Hey,
    I like the game, but unfortunately it does not look that good on my iPhone". "Don't
    worry", I said, "you'll get the game optimized for iPad and iPhone". Unfortunately,
    it did not look that good on the Galaxy Note. Neither did it on the Samsung S4.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当我终于向赞助商展示它时，他们中的大多数人都说了类似这样的话：“嘿，我喜欢这个游戏，但不幸的是，它在我的 iPhone 上看起来并不好。”“别担心，”我说，“你会得到为
    iPad 和 iPhone 优化的游戏。”不幸的是，它在 Galaxy Note 上看起来也不太好。在 Samsung S4 上也是一样。
- en: You can imagine the rest of this story. I found myself almost rewriting the
    game with a series of `if.. then.. else` loops, trying to make it look good on
    any device.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以想象这个故事的其他部分。我发现自己几乎是用一系列的 `if.. then.. else` 循环重写游戏，试图让它在任何设备上都看起来不错。
- en: 'This is why you should make a cross-platform game: *To code once and rule them
    all*. Focus on game development and let a framework do the dirty work for you.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么你应该制作一个跨平台游戏的原因：*一次编码，统治所有*。专注于游戏开发，让框架为你做脏活。
- en: What Cocos2d-JS is and how it works
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cocos2d-JS 是什么以及它是如何工作的
- en: '**Cocos2d-JS** is a free open source 2D game framework. It can help you to
    develop cross-platform browser games and native applications. This framework allows
    you to write games in JavaScript. So, if you have already developed JavaScript
    applications, you don''t have to learn a new language from scratch. Throughout
    this book, you will learn how to create almost any kind of cross-platform game
    using a familiar and intuitive language.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**Cocos2d-JS** 是一个免费的开放源代码 2D 游戏框架。它可以帮助你开发跨平台浏览器游戏和原生应用程序。这个框架允许你用 JavaScript
    编写游戏。所以，如果你已经开发了 JavaScript 应用程序，你不需要从头开始学习一门新语言。在这本书中，你将学习如何使用熟悉且直观的语言创建几乎任何类型的跨平台游戏。'
- en: Requirements to run Cocos2d-JS
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行 Cocos2d-JS 的要求
- en: 'Before you start, let''s see what software you need to install on your computer
    in order to start developing with Cocos2d-JS:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始之前，让我们看看你需要在你电脑上安装哪些软件，以便开始使用 Cocos2d-JS 进行开发：
- en: Firstly, you need a text editor. The official IDE for Cocos2d-JS coding is **Cocos
    Code IDE**, which you can download for free at [http://www.cocos2d-x.org/products/codeide](http://www.cocos2d-x.org/products/codeide).
    It features auto completion, code hinting, and some more interesting characteristics
    to speed up your coding. If you are used to your favorite code editor, that's
    fine. There are plenty of them, but I personally use PSPad (you can find this
    at [http://www.pspad.com/](http://www.pspad.com/)) on my Windows machine and TextWrangler
    (you can find this at [http://www.barebones.com/products/textwrangler/](http://www.barebones.com/products/textwrangler/))
    on the Mac. They are both free and easy to use, so you can download and have them
    installed in a matter of minutes.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，你需要一个文本编辑器。Cocos2d-JS 编码的官方 IDE 是 **Cocos Code IDE**，你可以免费在 [http://www.cocos2d-x.org/products/codeide](http://www.cocos2d-x.org/products/codeide)
    下载。它具有自动完成、代码提示和一些其他有趣的功能，可以帮助你加快编码速度。如果你习惯使用你喜欢的代码编辑器，那也行。有很多这样的编辑器，但我个人在我的 Windows
    机器上使用 PSPad（你可以在 [http://www.pspad.com/](http://www.pspad.com/) 找到它），在 Mac 上使用
    TextWrangler（你可以在 [http://www.barebones.com/products/textwrangler/](http://www.barebones.com/products/textwrangler/))
    找到它）。它们都是免费的，而且易于使用，所以你可以下载并在几分钟内安装它们。
- en: To test your Cocos2d-JS projects, you will need to install a web server on your
    computer to override security limits when running your project locally. I am using
    WAMP ([http://www.wampserver.com/](http://www.wampserver.com/)) on my Windows
    machine, and MAMP ([http://www.mamp.info/](http://www.mamp.info/)) on the Mac.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要测试你的 Cocos2d-JS 项目，你需要在电脑上安装一个网络服务器来覆盖运行本地项目时的安全限制。我在我的 Windows 机器上使用 WAMP
    ([http://www.wampserver.com/](http://www.wampserver.com/))，在 Mac 上使用 MAMP ([http://www.mamp.info/](http://www.mamp.info/))。
- en: Tip
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Again, both are free to use as you won't need the PRO version, which is also
    available for Mac computers. Explaining all the theory behind this is beyond the
    scope of this book, but you can find all the required information as well as the
    installation documentation on the official sites.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 再次强调，两者都是免费的，因为你不需要 PRO 版本，这个版本也适用于 Mac 电脑。解释所有背后的理论超出了本书的范围，但你可以在官方网站上找到所有必需的信息以及安装文档。
- en: If you prefer, you can test your projects directly online by uploading them
    on an FTP space you own and call them directly from the web. In this case, you
    don't need to have a web server installed on your computer, but I highly recommend
    using WAMP or MAMP instead.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你愿意，你可以直接在线测试你的项目，通过上传到你拥有的 FTP 空间，并直接从网页上调用它们。在这种情况下，你不需要在电脑上安装网络服务器，但我强烈建议使用
    WAMP 或 MAMP。
- en: I personally use Google Chrome as the default browser to test my projects. As
    these projects are meant to be cross-platform games, it should run in the same
    way on every browser, so feel free to use the browser you prefer.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我个人使用 Google Chrome 作为默认浏览器来测试我的项目。由于这些项目旨在成为跨平台游戏，它们应该在每个浏览器上以相同的方式运行，所以请随意使用你喜欢的浏览器。
- en: The latest information about Cocos2d-JS can be found on the official page [http://www.cocos2d-x.org/wiki/Cocos2d-JS](http://www.cocos2d-x.org/wiki/Cocos2d-JS),
    while the latest version can be downloaded at [http://www.cocos2d-x.org/download](http://www.cocos2d-x.org/download).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Cocos2d-JS 的最新信息可以在官方网站 [http://www.cocos2d-x.org/wiki/Cocos2d-JS](http://www.cocos2d-x.org/wiki/Cocos2d-JS)
    上找到，而最新版本可以在 [http://www.cocos2d-x.org/download](http://www.cocos2d-x.org/download)
    下载。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Cocos2d-JS is updated quite frequently, but at the time of writing, the latest
    stable release is v3.1\. Although new releases always bring some changes, all
    examples included in this book should work fine with any release marked as 3.x
    as there aren't huge changes in the roadmap.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Cocos2d-JS 更新相当频繁，但截至本书编写时，最新的稳定版本是 v3.1。虽然新版本总是带来一些变化，但本书中包含的所有示例都应该与任何标记为
    3.x 的版本兼容，因为路线图上没有巨大的变化。
- en: You will notice the download file is a `ZIP` file that is greater than 250 MB.
    Don't worry. Most of the content of the package is made by docs, graphic assets,
    and examples, while the only required folder, at the moment, is the one called
    `cocos2d-html5`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到下载的文件是一个大于 250 MB 的 `ZIP` 文件。不用担心。包中的大部分内容是由文档、图形资产和示例组成的，而目前唯一必需的文件夹是名为
    `cocos2d-html5` 的文件夹。
- en: The structure of your Cocos2d-JS project
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的 Cocos2d-JS 项目的结构
- en: 'Every HTML5 game is basically a web page with some magic in it; this is what
    you are going to create with Cocos2d-JS: a web page with some magic in it.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 HTML5 游戏基本上都是一个带有一些魔法的网页；这就是你将使用 Cocos2d-JS 创建的：一个带有一些魔法的网页。
- en: 'To perform this magic, a certain file structure needs to be created, so let''s
    take a look at a screenshot of a folder with a Cocos2d-JS project in it:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行这个魔法，需要创建一定的文件结构，所以让我们看看一个包含 Cocos2d-JS 项目的文件夹的截图：
- en: '![The structure of your Cocos2d-JS project](img/0075OS_01_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![你的 Cocos2d-JS 项目的结构](img/0075OS_01_01.jpg)'
- en: This is what you are going to build; to tell you the truth, this is a picture
    of the actual project folder I built for the example to be explained in this chapter,
    which is placed in the WAMP `localhost` folder on my computer. It couldn't be
    any more real.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你将要构建的内容；说实话，这是我为本章要解释的示例项目所构建的实际项目文件夹的图片，它放置在我的电脑上的 WAMP `localhost` 文件夹中。它再真实不过了。
- en: 'So, let''s take a look at the files to be created:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们看看将要创建的文件：
- en: '`cocos2d-html5`: This is the folder you will find in the zip archive.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cocos2d-html5`: 这是你在 zip 压缩文件中找到的文件夹。'
- en: '`index.html`: This is the web page that will contain the game.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`: 这是将包含游戏的网页。'
- en: '`main.js`:This is a file required by Cocos2d-JS with the Cocos2d-JS function
    calls to make the game start. You will create this within the next few minutes.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.js`: 这是一个由 Cocos2d-JS 调用的文件，用于启动游戏。你将在接下来的几分钟内创建它。'
- en: '`project.json`: This is a **JavaScript Object Notation** (**JSON**) with some
    basic configurations. This is what you need to make your game run. Well, almost,
    because the actual game will be placed in the `src` folder. Let''s see a few other
    things first.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`project.json`: 这是一个包含一些基本配置的 **JavaScript 对象表示法** (**JSON**) 文件。这是你使游戏运行所必需的。好吧，几乎是这样，因为实际的游戏将放置在
    `src` 文件夹中。我们先看看其他一些事情。'
- en: Hello Cross-World
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 欢迎来到跨世界
- en: The time has come, the boring theory has ended, and we can now start coding
    our first project. Let's begin!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 时候到了，无聊的理论结束了，我们现在可以开始编写我们的第一个项目了。让我们开始吧！
- en: 'Firstly, create a page called `index.html` in the root of the game folder and
    write this HTML code:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在游戏文件夹的根目录下创建一个名为 `index.html` 的页面，并编写以下 HTML 代码：
- en: '[PRE0]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There''s nothing interesting in it as it is just plain HTML. Let''s take a
    closer look at these lines to see what is going on:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前里面没有什么有趣的东西，因为它只是普通的 HTML。让我们仔细看看这些行，看看发生了什么：
- en: '[PRE1]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, I am including the Cocos2d-JS boot file to make the framework start:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我包括了 Cocos2d-JS 启动文件以启动框架：
- en: '[PRE2]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'From the preceding line, this is where we call the script with the actual game
    we are going to build. Next, we have the following code:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从上一行，这是我们调用实际将要构建的游戏脚本的地方。接下来，我们有以下代码：
- en: '[PRE3]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is the canvas we will use to display the game. Notice here that the canvas
    does not have a width and height, as they will be defined by the game itself.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是我们将用来显示游戏的画布。注意这里，画布没有宽度和高度，因为它们将由游戏本身定义。
- en: 'Next is the creation of `main.js`: the only file we will call from our main
    `index.html` page. This is more of a configuration file rather than the game itself,
    so you won''t code anything that is game-related at the moment. However, the file
    you are going to build will be the blueprint you will be using in all your Cocos2d-JS
    games.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '接下来是创建 `main.js`: 我们将从主 `index.html` 页面调用的唯一文件。这更像是一个配置文件，而不是游戏本身，所以你现在不会编写任何与游戏相关的代码。然而，你将要构建的文件将成为你在所有
    Cocos2d-JS 游戏中使用的蓝图。'
- en: 'The content of `main.js` is as follows:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`main.js` 的内容如下：'
- en: '[PRE4]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Don't worry about the code at the moment; it looks a lot more complicated than
    it really is. At the moment, the only line we have to worry about is the one that
    defines the resolution policy.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前不必担心代码；它看起来比实际复杂得多。目前，我们唯一需要担心的是定义分辨率策略的那一行。
- en: Tip
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: One of the most challenging tasks in cross-platform development is to provide
    a good gaming experience, no matter what browser or what device the game is running
    on. However, the problem here is that each device has its own resolution, screen
    size, and ratio.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在跨平台开发中最具挑战性的任务之一是提供良好的游戏体验，无论游戏运行在什么浏览器或设备上。然而，问题在于每个设备都有自己的分辨率、屏幕尺寸和比例。
- en: 'Cocos2d-JS allows us to handle different resolutions in a similar way web designers
    do when building responsive design. At the moment, we just want to adapt the game
    canvas to fit the browser window while targeting the most popular resolution,
    which is 320x480 (portrait mode). That''s what this line does:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Cocos2d-JS 允许我们以类似于网页设计师在构建响应式设计时的方式处理不同的分辨率。目前，我们只想使游戏画布适应浏览器窗口，并针对最流行的分辨率，即
    320x480（纵向模式）。这就是这一行的作用：
- en: '[PRE5]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using these settings, you should be pretty sure that your game will run on every
    device, although you will be working in a low resolution.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用这些设置，你应该相当确信你的游戏可以在每个设备上运行，尽管你将在低分辨率下工作。
- en: 'Also, have a look at this line:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还请看看这一行：
- en: '[PRE6]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Basically, a Cocos2d-JS game is made by a scene where the game itself runs.
    There can be more scenes in the same game. Imagine a scene with the title screen,
    a scene with the game over screen, and a scene with the game itself. At the moment,
    you only have one scene called `gameScene`. Remember this name because you are
    going to use it later.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基本上，一个Cocos2d-JS游戏是由一个场景构成的，其中游戏本身运行。同一个游戏中可以有多个场景。想象一下，有一个标题屏幕的场景，一个游戏结束屏幕的场景，以及一个游戏本身的场景。目前，你只有一个名为`gameScene`的场景。记住这个名称，因为你稍后将会用到它。
- en: 'Following this, the next required blueprint file you are going to build is
    `project.json`, which has some interesting settings. Let''s take a look at the
    file first:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你将要构建的下一个必需的蓝图文件是`project.json`，它有一些有趣的设置。让我们首先看看这个文件：
- en: '[PRE7]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'What do these lines mean? Let''s see them one by one:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些行代表什么意思？让我们逐个看看：
- en: '`debugMode`: This is the object key that determines the level of debug warnings.
    It has a range from 0 to 6\. Leave it at 0 at the moment since the project is
    very simple and we won''t make any errors.'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debugMode`：这是确定调试警告级别的对象键。它的范围从0到6。目前，由于项目非常简单，我们不会出错，所以请将其保留为0。'
- en: '`showFPS`: This object can be **true** or **false**; it shows or hides the
    FPS meter on the screen.'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showFPS`：这个对象可以是**true**或**false**；它会在屏幕上显示或隐藏FPS计。'
- en: '`frameRate`: This object sets the frame rate of your game. Set it to `60` to
    have a smooth game.'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frameRate`：这个对象设置游戏的帧率。将其设置为`60`以获得流畅的游戏体验。'
- en: '`id`: This is the DOM element that is required to run the game. Do you remember
    you gave your canvas the `gameCanvas` id? Here you are.'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：这是运行游戏所需的DOM元素。你还记得你给你的canvas分配了`gameCanvas`的id吗？这里就是。'
- en: '`engineDir`: This is the folder where Cocos2d-JS is installed.'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`engineDir`：这是Cocos2d-JS安装的文件夹。'
- en: '`modules`: This object engines the modules to load. At the moment, we only
    need the basic Cocos2d library.'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`modules`：这个对象负责加载模块。目前，我们只需要基本的Cocos2d库。'
- en: '`jsList`: This is an array with the files used in the game. This means we are
    going to create our game in `src/gamescript.js`.'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jsList`：这是一个包含游戏中使用的文件的数组。这意味着我们将创建我们的游戏在`src/gamescript.js`中。'
- en: 'Finally, we arrive at the game script itself. This is the one that will contain
    the actual game, `gamescript.js`, which at the moment is just a plain declaration
    of the game scene:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们到达了游戏脚本本身。这是包含实际游戏内容的脚本，`gamescript.js`，目前它只是一个对游戏场景的简单声明：
- en: '[PRE8]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, you want to save everything and call `index.html` page from your `localhost`
    (refer to your WAMP or MAMP docs) in your browser. If you now open the developer
    console, you should see:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，你想要保存一切，并在浏览器中从你的`localhost`（参考你的WAMP或MAMP文档）调用`index.html`页面。如果你现在打开开发者控制台，你应该会看到：
- en: '**my awesome game starts here**'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**我令人惊叹的游戏从这里开始**'
- en: Congratulations! This means you have successfully managed to create a Cocos2d-JS
    template file to build your future games.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！这意味着你已经成功创建了一个Cocos2d-JS模板文件来构建你未来的游戏。
- en: Let's build our first mini game at once!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即构建我们的第一个迷你游戏！
- en: Preloading and adding images
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预加载和添加图片
- en: 'In this example, I am using a 64x64 `PNG` image representing a target, as shown
    in the following figure:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我使用了一个64x64的`PNG`图像来表示一个目标，如图所示：
- en: '![Preloading and adding images](img/0075OS_01_02.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![预加载和添加图片](img/0075OS_01_02.jpg)'
- en: You are obviously free to use whatever image you prefer.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你显然可以使用你喜欢的任何图像。
- en: 'When you load a web page, in most cases, the page is loaded and shown before
    all images are loaded. This might sound okay on a web page because readers won''t
    mind if they have to wait a couple of seconds before an image is showed, but this
    definitively can''t happen in a game. This means our images need to be preloaded,
    and Cocos2d-JS can easily handle this. The steps on how to preload images in your
    game are as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当你加载一个网页时，在大多数情况下，页面会在所有图片加载之前加载并显示。这在网页上听起来可能没问题，因为读者不会介意在图片显示之前等待几秒钟，但在游戏中绝对不能这样。这意味着我们的图片需要预加载，而Cocos2d-JS可以轻松处理这一点。在游戏中预加载图片的步骤如下：
- en: 'This is the first time you add this line to the `project.json` file:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是第一次你在`project.json`文件中添加这一行：
- en: '[PRE9]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This means you are going to create another file called `loadassets.js` in the
    same `src` folder where you just created `gamescript.js`.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着你需要在刚刚创建 `gamescript.js` 的同一 `src` 文件夹中创建另一个名为 `loadassets.js` 的文件。
- en: 'This is the content of `loadassets.js`:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是 `loadassets.js` 的内容：
- en: '[PRE10]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: An array called `gameResources` stores the assets to preload. So, you should
    create a folder called `assets` and place the `target.png` image inside this folder.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个名为 `gameResources` 的数组存储要预加载的资产。因此，你应该创建一个名为 `assets` 的文件夹，并将 `target.png`
    图像放入此文件夹中。
- en: Note
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To keep the project organization clear, I am going to place all game assets
    in a folder called `assets`.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了保持项目组织清晰，我打算将所有游戏资产放置在一个名为 `assets` 的文件夹中。
- en: 'Now that Cocos2d-JS is aware which images need to be preloaded, we only need
    to tell the game that it has to preload them before the scene starts, so we need
    to add a couple of lines to `main.js`:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，Cocos2d-JS 已知哪些图像需要预加载，我们只需要告诉游戏在场景开始之前必须预加载它们，因此我们需要在 `main.js` 中添加几行代码：
- en: '[PRE11]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `cc.LoaderScene.preload` constructor will preload scene resources taken
    from the `gameResources` array defined in `loadassets.js`. All puzzle pieces match
    perfectly.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`cc.LoaderScene.preload` 构造函数将预加载 `loadassets.js` 中定义的 `gameResources` 数组中指定的场景资源。所有拼图块都完美匹配。'
- en: 'Finally, let''s add the target to the game by rewriting the `gamescript.js`
    file:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们通过重写 `gamescript.js` 文件来将目标添加到游戏中：
- en: '[PRE12]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you developed Flash games using **AS3** (**ActionScript 3**), you will find
    Cocos2d-JS assets hierarchy familiar to display objects. If you are new to this,
    allow me to explain what happens:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 **AS3**（**ActionScript 3**）开发了 Flash 游戏，你会发现 Cocos2d-JS 的资产层次结构对显示对象很熟悉。如果你是新手，让我来解释一下发生了什么：
- en: Like all frameworks that deal with graphic resources, Cocos2d-JS has hierarchy
    rules. On the top of such a hierarchy, we find the `Scene` object. Each scene
    contains some game logic; think about a main menu scene, a game scene, and a game
    over scene.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像所有处理图形资源的框架一样，Cocos2d-JS 有层次规则。在这个层次结构的顶部，我们找到了 `Scene` 对象。每个场景包含一些游戏逻辑；想想主菜单场景、游戏场景和游戏结束场景。
- en: Each scene contains one or more `Layer` objects; layers define which content
    should be at the top of other content. In a real-world example, a level background
    is in the bottom-most layer, player and enemies will be created in a layer above
    the background, and game information such as score and remaining lives are placed
    on the topmost layer.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个场景包含一个或多个 `Layer` 对象；层定义了哪些内容应该位于其他内容之上。在现实世界的例子中，关卡背景位于最底层的层，玩家和敌人将在背景之上的层中创建，而游戏信息，如得分和剩余生命，将放置在最顶层的层上。
- en: Finally, all layers can have one or more `Sprite` objects, which are the graphic
    assets themselves such as the player, the enemies, or in this case, the target.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，所有层都可以有一个或多个 `Sprite` 对象，它们是图形资产本身，如玩家、敌人，或者在这种情况下，目标是。
- en: To summarize, the code means that once `gameScene` is executed, create and add
    the `game` layer, and in this layer, add the `target` sprite.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 总结来说，代码意味着一旦 `gameScene` 执行，就创建并添加 `game` 层，并在该层中添加 `target` 精灵。
- en: 'It''s time to test the project by calling the `index.html` file, and the following
    screenshot is what you should get:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候通过调用 `index.html` 文件来测试项目了，以下截图是你应该得到的：
- en: '![Preloading and adding images](img/0075OS_01_03.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![预加载和添加图像](img/0075OS_01_03.jpg)'
- en: 'Although it''s just a basic project, there are several things to take note
    of:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这只是一个基本项目，但有几个需要注意的事项：
- en: Images are preloaded and a default loading screen is shown. This means the preloader
    works.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像已预加载，并显示默认的加载屏幕。这意味着预加载器正在工作。
- en: Although our project is set to work at 320x480, the game stretches to fill the
    browser completely, thanks to the resolution policy set before.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管我们的项目设置为在 320x480 的分辨率下工作，但由于之前设置的分辨率策略，游戏会拉伸以填满整个浏览器。
- en: Images have their registration point in the center of the image, whereas most
    frameworks have their image registration point in the upper-left corner.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像在其中心的注册点，而大多数框架的图像注册点位于左上角。
- en: The origin (0,0) of the scene takes place in the lower-left corner, while most
    frameworks have their origin in the upper-left corner.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 场景的原始（0,0）位置位于左下角，而大多数框架的原始位置在左上角。
- en: 'To top it all, you were able to create your first project. To change the target
    position and place it in the middle of the screen, just use the `setPosition`
    method that changes `gamescript.js` this way:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，你已经能够创建你的第一个项目。要更改目标位置并将其放置在屏幕中间，只需使用 `setPosition` 方法，这样修改 `gamescript.js`：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Test the project and you will see the target image in the middle of the screen.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 测试项目，你将在屏幕中间看到目标图像。
- en: Removing images and changing the background color
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除图片和更改背景颜色
- en: 'Now you know how to add images you might also be interested in knowing how
    to remove them. It''s really intuitive: you added images with the `addChild` method,
    so you are going to remove them with the `removeChild` method.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了如何添加图片，你可能还想知道如何移除它们。这非常直观：你使用 `addChild` 方法添加图片，所以你将使用 `removeChild`
    方法移除它们。
- en: Moreover, we will change the background color by adding an actual background
    layer, which covers the entire scene with a solid color.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将通过添加一个实际的背景层来更改背景颜色，这个背景层将整个场景覆盖为一个纯色。
- en: 'There are just a couple of lines to add to `gamescript.js`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在 `gamescript.js` 中添加几行代码：
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding code, `backgroundLayer` is a new layer that will be filled
    with a new color with the **RGBA** format (in this case, a full opaque dark grey),
    which will also contain the target image.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`backgroundLayer` 是一个新层，它将以 **RGBA** 格式（在这种情况下，全不透明的深灰色）填充新的颜色，并将包含目标图像。
- en: After three seconds since its creation, the target is removed from `backgroundLayer`
    with the `removeChild` method.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 自创建以来经过三秒钟，目标图像将通过 `removeChild` 方法从 `backgroundLayer` 中移除。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you learned how to install, configure, and run your first Cocos2d-JS
    project. You also learned how to place images on the screen.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何安装、配置和运行你的第一个 Cocos2d-JS 项目。你还学习了如何在屏幕上放置图片。
- en: Placing more instances of the same object will be one of the topics covered
    in the next chapter, where you will also create your first game, so no looking
    yet!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论放置相同对象的更多实例，你还将创建你的第一个游戏，所以现在不要急于查看！
- en: Test yourself with an exercise by trying to put 10 targets on the screen at
    random positions.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过尝试在屏幕上随机位置放置 10 个目标来测试自己。
