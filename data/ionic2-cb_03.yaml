- en: Chapter 3. Extending Ionic 2 with Angular 2 Building Blocks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：使用Angular 2构建块扩展Ionic 2
- en: 'In this chapter, we will cover the following tasks related to creating custom
    components, directives, and filters with Angular 2:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍与创建自定义组件、指令和过滤器相关的以下任务：
- en: Creating a custom pizza ordering component
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义披萨订购组件
- en: Creating a custom username input directive
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义用户名输入指令
- en: Creating a custom pipe
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义管道
- en: Creating a shared service to provide data to multiple pages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个共享服务以向多个页面提供数据
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Most of Ionic's out-of-the-box features are actually prebuilt components. In
    this section, you will learn how to create your own custom component using the
    `html` template, which contains Ionic components as well.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Ionic的内置功能实际上是预构建的组件。在本节中，你将学习如何使用 `html` 模板创建自己的自定义组件，其中包含Ionic组件。
- en: 'Components actually define Angular 2\. A component is no more than just a class
    with self-describing features. For example, `<ul>` is a component that you are
    already familiar with. Previously, you used various Ionic components, such as
    `<ion-list>` and `<ion-item>`. A component is a decorator (that is, `@Component`)
    to add metadata to a class to describe the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 组件实际上定义了Angular 2。组件不过是一个具有自我描述特征的类。例如，`<ul>` 是你已熟悉的组件。之前，你使用了各种Ionic组件，如 `<ion-list>`
    和 `<ion-item>`。组件是一个装饰器（即 `@Component`），用于向类添加元数据以描述以下内容：
- en: '**selector**: This is the name that is to be used in the DOM (for example,
    `<my-component>`)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择器**：这是要在DOM中使用的名称（例如，`<my-component>`）'
- en: '**template or templateUrl**: This refers to the way the component is rendered'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板或 templateUrl**：这指的是组件的渲染方式'
- en: '**directives**: This refers to a list of directive dependencies you plan to
    use inside the component'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指令**：这指的是你计划在组件内部使用的指令依赖项列表'
- en: '**providers**: This is a list of providers (that is, services) you plan to
    use inside the component'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供者**：这是你计划在组件内部使用的提供者（即服务）列表'
- en: Of course, there are many other options, but the preceding four options are
    the most common ones.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有许多其他选项，但前面的四个选项是最常见的。
- en: Creating a custom pizza ordering component
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义披萨订购组件
- en: 'In this section, you will build an app to demonstrate a custom component with
    its private variables and template. Observe the following screenshot of the pizza
    ordering component:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将构建一个应用来演示具有私有变量和模板的自定义组件。观察以下披萨订购组件的截图：
- en: '![Creating a custom pizza ordering component](img/image00240.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![创建自定义披萨订购组件](img/image00240.jpeg)'
- en: 'The user will not notice which area is a part of the page as opposed to a self-contained
    component. Your custom component here is the only area where the list is *listening*
    to the **Vegetarian** checkbox:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 用户不会注意到哪个区域是页面的一部分，而不是一个独立的组件。你自定义的组件是列表唯一一个正在监听 **素食** 复选框的区域：
- en: '![Creating a custom pizza ordering component](img/image00241.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![创建自定义披萨订购组件](img/image00241.jpeg)'
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This app example could work either in a browser or in a physical device.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用示例可以在浏览器或物理设备上运行。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following instructions:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下说明：
- en: 'Create a new `MyComponent` app using the `blank` template as shown, and go
    into the `MyComponent` folder:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用如下所示的 `blank` 模板创建一个新的 `MyComponent` 应用，并进入 `MyComponent` 文件夹：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open the `./app/pages/home/home.html` file and replace the content with the
    following code:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./app/pages/home/home.html` 文件，并用以下代码替换内容：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is your root page containing `<my-component>`, which will be defined later.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是你的根页面，包含 `<my-component>`，稍后将会定义。
- en: 'Open `./app/pages/home/home.ts` for editing globally with the following code:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./app/pages/home/home.ts` 文件进行全局编辑，以下代码：
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You simply have to declare `MyComponent` as a dependency. A component is basically
    just a directive with a template, assuming you are familiar with the directive
    concept of Angular 1.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你只需将 `MyComponent` 声明为依赖项即可。如果你熟悉Angular 1的指令概念，组件基本上就是一个带有模板的指令。
- en: 'Now, let''s create the component by first creating a directive, as illustrated
    in the following code:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过首先创建一个指令来创建组件，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a `foo.ts` file in the `components` directory that you just created,
    as shown in the following code:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你刚刚创建的 `components` 目录中创建一个 `foo.ts` 文件，如下所示：
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create `foo.html` in the `./src/components` folder, as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `./src/components` 文件夹中创建 `foo.html`，如下所示：
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Modify `./src/app/app.module.ts`, as illustrated, so that you can declare `MyComponent`.
    Observe the following code:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`./src/app/app.module.ts`，如图所示，以便你可以声明`MyComponent`。观察以下代码：
- en: '[PRE6]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Go to your terminal and run the app using the following command:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的终端，使用以下命令运行应用程序：
- en: '[PRE7]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'You may wonder why it''s necessary to create a component just to toggle a list
    (of pizza topping options). The answer is that this is just a demonstration of
    how you can compartmentalize your app using a component. The key things that you
    have done are as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道为什么需要创建一个组件来切换一个列表（披萨配料选项列表）。答案是，这只是一个演示，说明你可以如何使用组件来模块化你的应用程序。你完成的关键步骤如下：
- en: You created a custom component, called `<my-component>`, which can be used anywhere,
    including outside your app.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你创建了一个自定义组件，称为`<my-component>`，它可以在任何地方使用，包括在你的应用程序外部。
- en: The data within your component is completely private. This means that nobody
    else can access it without calling a method within your component's class.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件内部的数据是完全私有的。这意味着没有其他人可以访问它，除非在组件的类中调用一个方法。
- en: You can add or change behaviors within your component without impacting other
    areas outside the component.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在组件内部添加或更改行为，而不会影响组件外部其他区域。
- en: 'To create a component, you need to ensure that you import the `decorator`,
    as shown, from Angular 2 itself (and not from Ionic 2):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个组件时，你需要确保从Angular 2本身（而不是从Ionic 2）导入`decorator`，如下所示：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In your component template, everything is local to what is inside the component
    class. So, you can bind the click event using `click`, as shown in the following
    code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的组件模板中，一切都是局部的，即组件类内部的内容。因此，你可以使用`click`绑定点击事件，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Just like Angular 1, you need to use `[(ngModel)]` to declare that you want
    `data.myToggle` to be your model. The `[(..)]` part is to tell Angular 2 that
    this is a two-way binding.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Angular 1一样，你需要使用`[(ngModel)]`来声明你想要`data.myToggle`作为你的模型。`[(..)]`部分是为了告诉Angular
    2这是一个双向绑定。
- en: 'There are two lists of pizza toppings. The first one is as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种披萨配料列表。第一个列表如下：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The second list of pizza toppings is as shown:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个披萨配料列表如下所示：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To toggle the visibility of each list based on the `data.myToggle` model, you
    can use `*ngIf`, which is very similar to `ng-if` from Angular 1.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要根据`data.myToggle`模型切换每个列表的可见性，你可以使用`*ngIf`，它与Angular 1中的`ng-if`非常相似。
- en: See also
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For more information about components in the Angular 2 documentation, you can
    visit [https://angular.io/docs/ts/latest/guide/architecture.html](https://angular.io/docs/ts/latest/guide/architecture.html).
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Angular 2文档中组件的更多信息，你可以访问[https://angular.io/docs/ts/latest/guide/architecture.html](https://angular.io/docs/ts/latest/guide/architecture.html)。
- en: Creating a custom username input directive
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义用户名输入指令
- en: 'Since you have gone through the process of creating a component in the preceding
    section, you may wonder what the difference is between a component and a directive.
    If you have some experience with Angular 1, you may notice that it had no definition
    of a component. Starting in Angular 2, there are the following three kinds of
    directive:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你在前一节中已经完成了创建组件的过程，你可能想知道组件和指令之间的区别是什么。如果你有一些Angular 1的经验，你可能注意到它没有组件的定义。从Angular
    2开始，有以下三种类型的指令：
- en: '| Kind | Description |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Components | They have a template and a class associated with the component
    (that is, `ion-input`) |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 组件 | 它们有一个与组件关联的模板和类（即`ion-input`）|'
- en: '| Structural directives | They change the DOM structure within the scope of
    where it is (that is, `*ngIf` or `*ngFor`) |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 结构性指令 | 它们改变其作用域内的DOM结构（即`*ngIf`或`*ngFor`）|'
- en: '| Attribute directives | They change the appearance of the current DOM by intercepting
    its display or events |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 属性指令 | 它们通过拦截其显示或事件来改变当前DOM的外观 |'
- en: 'You may have a mix of both structural and attribute characteristics in the
    same directive. In this section, you will learn how to create an attribute directive
    that can prevent certain characters from being input in the **Username** as well
    as showing another DOM node (where it says **You are typing username**) by toggling
    its visibility. Observe the following screenshot of the app:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一个指令中，你可能会有结构和属性特性的混合。在本节中，你将学习如何创建一个属性指令，它可以防止在**用户名**中输入某些字符，并通过切换其可见性来显示另一个DOM节点（显示**您正在输入用户名**）。观察以下应用程序的截图：
- en: '![Creating a custom username input directive](img/image00242.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![创建自定义用户名输入指令](img/image00242.jpeg)'
- en: The **GO** button is there just for cosmetic purposes, and you will not need
    to write any code for it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**GO**按钮只是为了美观，你不需要为它编写任何代码。'
- en: Getting ready
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This app example could work either in a browser or on a physical device.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用示例可以在浏览器或物理设备上运行。
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Observe the following instructions:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下说明：
- en: 'Create a new `MyIonicInputDirective` app using the `blank` template, as shown,
    and go into the `MyIonicInputDirective` folder:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`blank`模板创建一个新的`MyIonicInputDirective`应用，如下所示，并进入`MyIonicInputDirective`文件夹：
- en: '[PRE12]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Open the `./src/app/pages/home/home.html` file and replace the content with
    the following code:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/app/pages/home/home.html`文件，并用以下代码替换内容：
- en: '[PRE13]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As mentioned earlier, the **GO** button is just an example of the new floating
    button feature from Ionic 2\. All you need to do is include `bottom` and `center`
    in order to position it. These are actually good examples of attribute directives.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前所述，**GO**按钮只是Ionic 2中新的浮动按钮功能的一个示例。你只需要包含`bottom`和`center`来定位它。这些实际上是属性指令的好例子。
- en: 'Open `home.ts`, in the same folder as in the preceding step, to edit and insert
    the following code:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前一步骤所在的文件夹中打开`home.ts`，编辑并插入以下代码：
- en: '[PRE14]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create the `./src/directives` folder, as shown in the following command:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`./src/directives`文件夹，如下命令所示：
- en: '[PRE15]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create the `my-ionic-input.ts` file in the `directives` folder and copy the
    following code:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`directives`文件夹中创建`my-ionic-input.ts`文件，并复制以下代码：
- en: '[PRE16]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open and edit `./src/app/app.module.ts` to declare your new directive, as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并编辑`./src/app/app.module.ts`以声明你的新指令，如下所示：
- en: '[PRE17]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Go to your terminal and run the app, as shown:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入你的终端并运行应用，如下所示：
- en: '[PRE18]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works…
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The home page template (`home.html`) is very typical with `ion-list` and `ion-item`,
    which contain your input elements. However, there are two important things to
    take note of. First, there is an attribute, called `myIonicInput`, in the `ion-input`
    component. Observe the following code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 主页模板（`home.html`）非常典型，包含`ion-list`和`ion-item`，它们包含你的输入元素。然而，有两个重要的事情需要注意。首先，在`ion-input`组件中有一个属性，称为`myIonicInput`。观察以下代码：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Second, the `myStyles` object is now used to toggle the visibility of the `<p>`
    element, as shown:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，`myStyles`对象现在用于切换`<p>`元素的可见性，如下所示：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This `myStyles` object is actually a `private` variable in your `HomePage`
    class in the `home.ts` file, as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`myStyles`对象实际上是在`home.ts`文件中你的`HomePage`类的`private`变量中，如下所示：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With TypeScript, you could assign a type (that is, object) to a variable with
    a default value. You may also note that `MyIonicInputDirective` should be declared
    for a dependency to be injected into the template directives.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TypeScript，你可以将一个类型（即对象）分配给一个具有默认值的变量。你还可以注意，`MyIonicInputDirective`应该声明为依赖项以注入到模板指令中。
- en: 'To create a basic directive, you must import at least `Directive` and `ElementRef`
    in order to manipulate the DOM. However, since this `Directive` has input (that
    is, `myStyles`), you should also import `Input` in your `my-ionic-input.ts`, as
    illustrated in the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个基本的指令，你必须至少导入`Directive`和`ElementRef`以操作DOM。然而，由于这个`Directive`有输入（即`myStyles`），你应在`my-ionic-input.ts`中导入`Input`，如下面的代码所示：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You have `selector` and `host` metadata in your directive, as shown:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你的指令中有`selector`和`host`元数据，如下所示：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `myIonicInput` selector will be queried from the DOM and will trigger *actions*
    on that DOM node. For event detection on the DOM, you have to map the event name
    to the class method. For example, the `mouseenter` event will trigger a call to
    the `onMouseEnter()` method in the directive's class, which is `MyIonicInputDirective`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`myIonicInput`选择器将从DOM中查询，并触发该DOM节点的*动作*。对于DOM上的事件检测，你必须将事件名称映射到类方法。例如，`mouseenter`事件将触发指令类`MyIonicInputDirective`中的`onMouseEnter()`方法的调用。'
- en: 'Now, let''s look more closely in the directive''s class:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更仔细地看看指令的类：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `@Input` decorator is used to declare that you will bring in a variable
    from the template. This is the reason why you must have the square brackets in
    `[myIonicInput]="myStyles"`. Otherwise, `myStyles` would just be a string instead
    of an expression referring to the `myStyles` object from the `HomePage` class.
    Another interesting thing to note here is the code inside the `constructor`. The
    `ElementRef` is pointing to the same DOM where you placed your attribute directive.
    You want to modify the behavior of the keyboard using `el.nativeElement.onkeypress`
    so that special characters won't be allowed. If the user enters a special character,
    it will trigger `e.preventDefault()` and nothing will happen. The keyboard event
    is basically discarded. You may wonder why we cannot just use the `keypress` event
    and map it to `onKeyPress`, which was intentionally commented out. The reason
    is that you are placing the `myIonicInput` directive on top of `ion-input`. But
    the actual `<input>` DOM is just a child of `ion-input`. Therefore, if you listen
    to the `keypress` event on the parent `ion-input`, you won't be able to bind it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Input` 装饰器用于声明您将从模板中引入一个变量。这也是为什么您必须在 `[myIonicInput]="myStyles"` 中使用方括号的原因。否则，`myStyles`
    将只是一个字符串，而不是指向 `HomePage` 类中 `myStyles` 对象的表达式。在这里需要注意的另一件有趣的事情是 `constructor`
    中的代码。`ElementRef` 指向您放置属性指令的相同 DOM。您想通过 `el.nativeElement.onkeypress` 修改键盘的行为，以便不允许特殊字符。如果用户输入特殊字符，它将触发
    `e.preventDefault()`，并且不会发生任何事情。键盘事件基本上被丢弃。您可能会想知道为什么我们不能直接使用 `keypress` 事件并将其映射到
    `onKeyPress`，这已经被故意注释掉了。原因是您将 `myIonicInput` 指令放置在 `ion-input` 之上。但实际上，`<input>`
    DOM 只是 `ion-input` 的一个子元素。因此，如果您在父 `ion-input` 上监听 `keypress` 事件，您将无法绑定它。'
- en: The `onMouseEnter` and `onMouseLeave` methods are very self explanatory because
    they just toggle the `myStyles.showUsername` variable. Again, this `myStyles`
    object is just a reference back to the `myStyles` of `HomePage`. So, if you change
    the variable here, it will change at the home page's level as well.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`onMouseEnter` 和 `onMouseLeave` 方法非常直观，因为它们只是切换 `myStyles.showUsername` 变量。再次强调，这个
    `myStyles` 对象只是指向 `HomePage` 的 `myStyles` 的一个引用。因此，如果您在这里更改变量，它也会在主页级别上更改。'
- en: See also
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For more information about Angular 2 directives, you can refer to the official
    documentation at [https://angular.io/docs/ts/latest/guide/attribute-directives.html](https://angular.io/docs/ts/latest/guide/attribute-directives.html)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 Angular 2 指令的更多信息，您可以参考官方文档 [https://angular.io/docs/ts/latest/guide/attribute-directives.html](https://angular.io/docs/ts/latest/guide/attribute-directives.html)
- en: Since this is the first section where TypeScript appears, it might be helpful
    to go through the handbook at [http://www.typescriptlang.org/docs/tutorial.html](http://www.typescriptlang.org/docs/tutorial.html),
    for more details
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于这是 TypeScript 首次出现的章节，因此查看 [http://www.typescriptlang.org/docs/tutorial.html](http://www.typescriptlang.org/docs/tutorial.html)
    手册可能会有所帮助，以获取更多详细信息
- en: Creating a custom pipe
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义管道
- en: 'Pipes are also a feature of Angular 2 and are not specific to Ionic. If you
    are familiar with Angular 1, a *pipe* is exactly the same thing as a *filter*.
    The main reason you might want to use pipes is to display data in a different
    format in the view. You don''t want to change the actual value in the component.
    This makes things very convenient because you don''t have to decide on the specific
    format within the code, while leaving flexibility in the view layer. Here is a
    list of some useful built-in pipes (from [https://angular.io/docs/ts/latest/api/#!?apiFilter=pipe](https://angular.io/docs/ts/latest/api/#!?apiFilter=pipe)):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 管道也是 Angular 2 的一个特性，并不特定于 Ionic。如果您熟悉 Angular 1，那么 *管道* 与 *过滤器* 完全相同。您可能想要使用管道的主要原因是在视图中以不同的格式显示数据。您不希望更改组件中的实际值。这使得事情变得非常方便，因为您不需要在代码中决定具体的格式，同时在视图层留下灵活性。以下是一些有用的内置管道列表（来自
    [https://angular.io/docs/ts/latest/api/#!?apiFilter=pipe](https://angular.io/docs/ts/latest/api/#!?apiFilter=pipe)）：
- en: AsyncPipe
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AsyncPipe
- en: DatePipe
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DatePipe
- en: NumberPipe
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumberPipe
- en: SlicePipe
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SlicePipe
- en: DecimalPipe
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DecimalPipe
- en: JsonPipe
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JsonPipe
- en: PercentPipe
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PercentPipe
- en: UpperCasePipe
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UpperCasePipe
- en: LowerCasePipe
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LowerCasePipe
- en: CurrencyPipe
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CurrencyPipe
- en: ReplacePipe
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReplacePipe
- en: 'In this section, you will learn how to create a custom pipe using the `@Pipe`
    decorator. The following is a screenshot of the app:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何使用 `@Pipe` 装饰器创建自定义管道。以下是该应用的截图：
- en: '![Creating a custom pipe](img/image00243.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![创建自定义管道](img/image00243.jpeg)'
- en: While the app interface is very simple, this example is to show you how to create
    a pipe to extract object data.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然应用界面非常简单，但这个例子是为了向您展示如何创建一个管道来提取对象数据。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: There is no need to test in a physical device because the Angular 2 pipe will
    work just fine in the web browser.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要在物理设备上进行测试，因为Angular 2管道在浏览器中运行得很好。
- en: How to do it...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Observe the following instructions:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下说明：
- en: 'Create a new `CustomPipe` app using the `blank` template, as shown, and go
    to the `CustomPipe` folder:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`blank`模板创建一个新的`CustomPipe`应用，如下所示，并进入`CustomPipe`文件夹：
- en: '[PRE25]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open the `./src/pages/home/home.html` file and modify the content with the
    following code:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/pages/home/home.html`文件并使用以下代码修改内容：
- en: '[PRE26]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You can quickly see that the template uses the `userExtract` pipe to render
    the correct information.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以快速看到模板使用了`userExtract`管道来渲染正确的信息。
- en: 'Then, replace the content of `./src/pages/home/home.ts` with the following
    code:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将`./src/pages/home/home.ts`文件的内容替换为以下代码：
- en: '[PRE27]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You don't have the `custom-pipe.ts` file yet, so, you need to create it next.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你还没有`custom-pipe.ts`文件，所以，你需要创建它。
- en: 'Create the `./src/utils` folder by using the following command:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建`./src/utils`文件夹：
- en: '[PRE28]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You can call this folder anything. However, since, sometimes, pipes are considered
    *utility* functions, let's call it `utils`.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以给这个文件夹起任何名字。然而，由于有时管道被认为是*实用*函数，让我们称它为`utils`。
- en: 'Create the `custom-pipe.ts` file in the `utils` folder and copy the following
    code:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`utils`文件夹中创建`custom-pipe.ts`文件并复制以下代码：
- en: '[PRE29]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add `UserExtractPipe` to `./src/app/app.module.ts` by replacing with the following
    code:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`UserExtractPipe`添加到`./src/app/app.module.ts`中，并用以下代码替换：
- en: '[PRE30]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Go to your terminal and run the app, as follows:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的终端并运行应用，如下所示：
- en: '[PRE31]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works…
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'You can use an Angular 2 pipe in the view to simply convert or transform any
    value to a desired value. There is no limitation on how you want to structure
    the pipe. Angular 2 automatically detects the `|` sign in the template and turns
    the value in front of it to an input. To create a pipe, you must import the decorator
    and provide a name (see `custom-pipe.ts`), as shown:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在视图中使用Angular 2管道简单地转换或转换任何值到所需值。你对管道的结构没有限制。Angular 2会自动检测模板中的`|`符号，并将它前面的值转换为输入。要创建一个管道，你必须导入装饰器并提供一个名称（见`custom-pipe.ts`），如下所示：
- en: '[PRE32]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The input from the template is the following `value` parameter:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 模板输入是以下`value`参数：
- en: '[PRE33]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The value returned by the `transform` method will be the output to the view,
    as shown in the following code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`transform`方法返回的值将是传递给视图的输出，如下面的代码所示：'
- en: '[PRE34]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In this example, you are taking a parameter for the pipe to process, as illustrated
    in the following code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你正在为管道处理取一个参数，如下面的代码所示：
- en: '[PRE35]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'For example, this is what you had in the `home.html` template:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是`home.html`模板中的内容：
- en: '[PRE36]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Each parameter is placed after a colon (`:`). Then, within your `@Pipe` class,
    you can refer to it using `arg`. The rest of the code is very simple as already
    shown in the preceding section. Observe the following
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 每个参数都放在冒号（`:`）后面。然后，在你的`@Pipe`类中，你可以使用`arg`来引用它。其余的代码就像前面章节中展示的那样非常简单。观察以下内容
- en: If it's `firstname`, take the first word after splitting by space
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是`firstname`，取空格分隔后的第一个单词
- en: If it's `lastname`, take the last word
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是`lastname`，取最后一个单词
- en: If it's `age`, subtract the current year from birth year
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是`age`，从出生年份减去当前年份
- en: Of course, you could have more complicated scenarios with pipes. However, the
    overall recommendation is to keep things simple at the view to ensure rendering
    performance. If you need to do heavy processing, it's best to handle it as a separate
    variable.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可能会有更复杂的管道场景。然而，总体建议是在视图中保持简单，以确保渲染性能。如果你需要进行大量处理，最好将其作为一个单独的变量来处理。
- en: See also
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: To understand more about Angular 2 pipes, you can check out the official documentation
    at [https://angular.io/docs/ts/latest/guide/pipes.html](https://angular.io/docs/ts/latest/guide/pipes.html)
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于Angular 2管道的信息，你可以查看官方文档[https://angular.io/docs/ts/latest/guide/pipes.html](https://angular.io/docs/ts/latest/guide/pipes.html)
- en: Creating a shared service to provide data to multiple pages
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个共享服务以向多个页面提供数据
- en: When you develop an app that involves a lot of pages and communication to the
    backend, you will need to have a way to communicate across the pages and components.
    For example, you may have a service to request user data from the backend and
    store it in a common local service. Then, you will need to provide a way for the
    user to update their user data and see the update in real time. When the user
    navigates to different pages, the same information will be pulled and rendered
    as well without making multiple trips to the backend. This is a very common scenario
    that requires the use of the `@Injectable` decorator in Angular 2.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当您开发涉及大量页面和与后端通信的应用程序时，您需要有一种跨页面和组件进行通信的方式。例如，您可能有一个服务从后端请求用户数据并将其存储在公共本地服务中。然后，您需要提供一个让用户更新其用户数据并实时查看更新的方法。当用户导航到不同的页面时，相同的信息将被拉取并渲染，而无需多次访问后端。这是一个非常常见的场景，需要使用
    Angular 2 中的 `@Injectable` 装饰器。
- en: 'Observe the following screenshot of the app you will build:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 观察您将要构建的应用程序的以下截图：
- en: '![Creating a shared service to provide data to multiple pages](img/image00244.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个共享服务以向多个页面提供数据](img/image00244.jpeg)'
- en: 'The user can fill out the form and see updates above it in real time. Then,
    they can move to the next page (**Go to Page 2**) and see the following screenshot:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以填写表单并实时查看其上方的更新。然后，他们可以转到下一页（**转到页面 2**）并查看以下截图：
- en: '![Creating a shared service to provide data to multiple pages](img/image00245.jpeg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个共享服务以向多个页面提供数据](img/image00245.jpeg)'
- en: 'This page uses the same service as the preceding page and references the same
    date with the name and age. You will learn the following topics in this section:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面使用与前一页相同的服务，并引用了具有相同名称和年龄的相同日期。您将在本节学习以下主题：
- en: Creating a service using `@Injectable`
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `@Injectable` 创建服务
- en: Sharing a service across multiple pages
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个页面间共享服务
- en: Detecting changes using getters and setters inside the service
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务内部使用获取器和设置器检测更改
- en: Getting ready
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This app example could work either in a browser or on a physical device.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序示例可以在浏览器或物理设备上运行。
- en: How to do it...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Observe the following instructions:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细观察以下说明：
- en: 'Create a new `SharedService` app using the `blank` template, as shown, and
    go to the `SharedService` folder:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照示例，使用 `blank` 模板创建一个新的 `SharedService` 应用程序，然后进入 `SharedService` 文件夹：
- en: '[PRE37]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'You will need to make several changes in the directory because you have two
    pages and a common service for both. Let''s start by modifying the `./src/app/app.component.ts`
    file so that the `rootPage` is pointing to `Page1`:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于您有两个页面和一个适用于两者的公共服务，您需要在目录中进行一些更改。让我们首先修改 `./src/app/app.component.ts` 文件，以便
    `rootPage` 指向 `Page1`：
- en: '[PRE38]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Create `./src/pages/page1`, as shown in the following code:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `./src/pages/page1`，如下所示：
- en: '[PRE39]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create your first template, `page1.html`, in the `page1` folder with the following
    code:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `page1` 文件夹中创建您的第一个模板 `page1.html`，如下所示：
- en: '[PRE40]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create `page1.ts` in the `page1` folder, as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `page1` 文件夹中创建 `page1.ts`，如下所示：
- en: '[PRE41]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Tip
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The file extension is `.ts`, and not `.js`, because you are going to use some
    TypeScript-specific features, such as getters and setters.
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文件扩展名是 `.ts`，而不是 `.js`，因为您将使用一些 TypeScript 特定功能，例如获取器和设置器。
- en: 'Similarly, create the `page2` folder using the following command:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，使用以下命令创建 `page2` 文件夹：
- en: '[PRE42]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add the `page2.html` template in the `page2` folder as well, as follows:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `page2` 文件夹中同样添加 `page2.html` 模板，如下所示：
- en: '[PRE43]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This is your second page with the same `name` and `age` information.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是您的第二个页面，具有相同的 `name` 和 `age` 信息。
- en: 'Create `page2.ts`, in the `page2` folder, with the following code:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `page2` 文件夹中创建 `page2.ts`，如下所示：
- en: '[PRE44]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create the `services` folder with the following command:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建 `services` 文件夹：
- en: '[PRE45]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Put `UserService` in the `user.ts` file in the `services` folder, as shown:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `services` 文件夹中的 `user.ts` 文件中放置 `UserService`，如下所示：
- en: '[PRE46]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Open and edit `./src/app/app.module.ts` so that you can inject `UserService`
    as a global provider:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并编辑 `./src/app/app.module.ts`，以便您可以注入 `UserService` 作为全局提供者：
- en: '[PRE47]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Verify your folder structure looks like the following screenshot:![How to do
    it...](img/image00246.jpeg)
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证您的文件夹结构如下截图所示：![如何操作...](img/image00246.jpeg)
- en: 'Go to your terminal and run the app as shown with the following command:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入您的终端，并按照以下命令运行应用程序：
- en: '[PRE48]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: You can move from `page 1` to `page 2` and then back and the data persists across
    the pages.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 `页面 1` 切换到 `页面 2`，然后再切回来，数据将在页面间持续存在。
- en: How it works…
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In general, if you want to use a common service across multiple pages, you
    must inject it at the highest level. In this example, you put `UserService` as
    a dependency at the start of `app.module.ts`, as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，如果你想跨多个页面使用一个通用服务，你必须在其最高级别注入它。在这个例子中，你将 `UserService` 作为依赖项放在 `app.module.ts`
    的开始处，如下所示：
- en: '[PRE49]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: After that, other pages within the app can start using this common service without
    having to reinject it. The main reason is that, whenever you inject a service
    or class, it will instantiate a new object, which ends up erasing all the existing
    data in memory. If you want to keep the data persistent across the pages, it should
    be in the parent app to avoid reinjection.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，应用中的其他页面可以开始使用这个通用服务，而无需重新注入。主要原因在于，每次注入服务或类时，它都会实例化一个新的对象，这最终会清除内存中所有现有的数据。如果你想跨页面保持数据持久，它应该位于父应用中，以避免重新注入。
- en: 'To use the `UserService` in each page, you just need to import it, as illustrated
    in the following code:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 要在每一页使用 `UserService`，你只需要导入它，如下面的代码所示：
- en: '[PRE50]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The way to "bring in" the service is to put the referencing in the constructor
    (page1.ts), as shown:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 将服务“引入”的方法是将引用放在构造函数（page1.ts）中，如下所示：
- en: '[PRE51]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This will pass down the `UserService` reference to a local private variable
    of the page (in this case, `this.user`).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将 `UserService` 引用传递到页面的本地私有变量（在本例中为 `this.user`）。
- en: From the template standpoint, there is no difference between using `{{ user.name
    }}` and `{{ user.age }}` to inject data.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 从模板的角度来看，使用 `{{ user.name }}` 和 `{{ user.age }}` 注入数据之间没有区别。
- en: 'Now, let''s take a look at `UserService`:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看 `UserService`：
- en: '[PRE52]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Actually, there are several things going on here. First, you need to import
    `Injectable` from `@angular/core`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这里有几个事情在进行。首先，你需要从 `@angular/core` 中导入 `Injectable`。
- en: Tip
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Don't forget the parentheses in `@Injectable()`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在 `@Injectable()` 中使用括号。
- en: 'Second, if you want to use getters and setters, you need to make separate variables,
    called `_name` and `_age`, to store the data. Then, you can use the get/set method
    to do additional processing when other pages access or set the variables in this
    common class. If you change the `name` or `age` from `Page 1`, you can see the
    following logs in the console:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，如果你想使用获取器和设置器，你需要创建单独的变量，称为 `_name` 和 `_age`，来存储数据。然后，你可以使用 get/set 方法在页面访问或设置此通用类中的变量时进行额外的处理。如果你从“页面
    1”更改 `name` 或 `age`，你可以在控制台中看到以下日志：
- en: '![How it works…](img/image00247.jpeg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/image00247.jpeg)'
- en: This feature is very beneficial since you can use this as a replacement for
    `watch` or `observable`. If you recall from Angular 1, you have to use `$scope.$watch`
    for a similar approach.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能非常有用，因为你可以用它来替代 `watch` 或 `observable`。如果你还记得 Angular 1，你必须使用 `$scope.$watch`
    来实现类似的功能。
- en: See also
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: For more information about Angular 2 services, visit the official documentation
    at [https://angular.io/docs/ts/latest/tutorial/toh-pt4.html](https://angular.io/docs/ts/latest/tutorial/toh-pt4.html)
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于 Angular 2 服务的详细信息，请访问官方文档：[https://angular.io/docs/ts/latest/tutorial/toh-pt4.html](https://angular.io/docs/ts/latest/tutorial/toh-pt4.html)
- en: You can get great instructions on many techniques for component communication
    at [https://angular.io/docs/ts/latest/cookbook/component-communication.html](https://angular.io/docs/ts/latest/cookbook/component-communication.html)
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在 [https://angular.io/docs/ts/latest/cookbook/component-communication.html](https://angular.io/docs/ts/latest/cookbook/component-communication.html)
    上找到关于组件通信的许多技术的好指导。
