- en: Building the Real Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建真实的应用程序
- en: We have covered the basic components that we need to have knowledge of in order
    to build a full-stack JavaScript application. From this point on, we will work
    on building a whole web application using all of these technologies.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了构建全栈JavaScript应用程序所需了解的基本组件。从现在开始，我们将使用所有这些技术来构建一个完整的Web应用程序。
- en: 'We will be building a movie rating application that will have the following
    features throughout this book:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将构建一个具有以下功能的电影评分应用程序：
- en: A home page that lists all the movies with other attributes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个列出所有电影及其其他属性的首页
- en: There will be an admin section where the administrator will be able to add movies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将会有一个管理员部分，管理员将能够添加电影
- en: The user will be able to log in and sign up
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户将能够登录和注册
- en: The user will be able to rate a movie
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户将能够对电影进行评分
- en: There will be a movie profile section where the logged-in user can rate the
    movie
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将会有一个电影简介部分，登录用户可以对该电影进行评分
- en: So, let's get started.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始吧。
- en: Introducing Vue.js
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Vue.js
- en: Vue.js is an open source, progressive JavaScript framework for building user
    interfaces. The rise of new JavaScript frameworks has been tremendous. With such
    growth, you might get confused about where to get started and how. There are hundreds
    of JavaScript frameworks today; among them, there are dozens of frameworks that
    stood out. But still, to choose from those dozens might be a daunting task.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js是一个用于构建用户界面的开源、渐进式JavaScript框架。新JavaScript框架的兴起是巨大的。随着这种增长，你可能会感到困惑，不知道从哪里开始以及如何开始。今天有数百个JavaScript框架；其中，有数十个框架脱颖而出。但仍然，从这些数十个中选择可能是一项艰巨的任务。
- en: There are quite a few popular frameworks today, such as React, Ember, and Angular.
    While these frameworks have their own advantages, there are some limitations to
    them as well. While building an application with React or Angular is good in itself,
    Vue.js helps eliminate some of the limitations associated with these frameworks.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 今天有很多流行的框架，例如React、Ember和Angular。虽然这些框架有其自身的优点，但也存在一些局限性。虽然使用React或Angular构建应用程序本身是好的，但Vue.js有助于消除与这些框架相关的一些局限性。
- en: Vue.js is **progressive.** With Vue.js, you can start with small and then progress
    gradually toward building bigger applications. This means that if you are just
    starting out, you might want to start with a very small application and scale
    slowly. Vue.js is perfect for such applications. It is lightweight and flexible
    as well. The learning curve is also very easy and super easy to get started.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js是**渐进式**的。使用Vue.js，你可以从小型应用开始，然后逐步构建更大的应用程序。这意味着如果你是初学者，你可能想从一个非常小的应用程序开始，并逐步扩展。Vue.js非常适合这样的应用程序。它轻量级且灵活。学习曲线也非常容易，并且非常容易上手。
- en: Vue.js was invented by Evan You. It was first released in February 2014 and
    gained huge popularity around 2016\. He used to work for Google and in Angular
    projects. The motivation for this invention was mainly because he didn't want
    to use Angular for small projects, since Angular provides a lot of packages out
    of the box and, hence, is not lightweight and not suitable for small applications.
    Having said that, Vue.js does not only target the smaller applications. It definitely
    does not provide all the packages with it, but you can add them as you progress
    with your application. That is the beauty of Vue.js.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js是由Evan You发明的。它首次发布于2014年2月，并在2016年左右获得了巨大的流行度。他曾经为谷歌工作，并在Angular项目中工作。发明这个技术的动机主要是因为他不想在小型项目中使用Angular，因为Angular提供了大量的内置包，因此不够轻量级，不适合小型应用程序。话虽如此，Vue.js并不仅针对小型应用程序。它确实不提供所有的包，但你可以随着应用程序的进展逐步添加它们。这就是Vue.js的美丽之处。
- en: Installing Vue.js
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Vue.js
- en: Let's get started with the installation of Vue.js. There are three ways to install
    and use Vue.js.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从Vue.js的安装开始。安装和使用Vue.js有三种方式。
- en: Including it in a script tag
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在`<script>`标签中包含它
- en: 'The easiest way to use Vue.js is to download it and include it in your `script`
    tag. You can download it from [https://cdn.jsdelivr.net/npm/vue](https://cdn.jsdelivr.net/npm/vue):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vue.js最简单的方法是下载它并将其包含在`<script>`标签中。你可以从[https://cdn.jsdelivr.net/npm/vue](https://cdn.jsdelivr.net/npm/vue)下载：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using Content Delivery Network (CDN) links directly
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用内容分发网络（CDN）直接链接
- en: 'CDN is a network of distributed servers. It stores the cached version of contents
    in different geographical locations so that the content loads faster when fetched.
    We can use the CDN link directly in our `script` tag:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: CDN 是一个分布式服务器网络。它在不同的地理位置存储内容的缓存版本，以便在获取内容时加载更快。我们可以在 `script` 标签中直接使用 CDN 链接：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using Vue.js as an npm package
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Vue.js 作为 npm 包使用
- en: '`npm` also has a package for `vue`, which can be installed as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm` 也为 `vue` 提供了一个包，可以按照以下步骤进行安装：'
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Introducing vue-cli
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 vue-cli
- en: 'CLI stands for Command Line Interface. A `cli` runs one or multiple commands
    successively in a command line interface. Vue.js also has a `cli` which, when
    installed, makes it super easy to spin up a project. We will be using a `vue-cli`
    in this book to create the Vue.js application. Let''s install `vue-cli` with the
    following command. You can execute this command in your root folder:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 代表命令行界面。一个 `cli` 在命令行界面中连续运行一个或多个命令。Vue.js 也有一个 `cli`，当安装后，可以非常容易地启动项目。我们将在这本书中使用
    `vue-cli` 来创建 Vue.js 应用程序。让我们使用以下命令安装 `vue-cli`。您可以在根目录中执行此命令：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Initializing projects with vue-cli
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 vue-cli 初始化项目
- en: 'Let''s go ahead with creating a new project folder for our movie rating application.
    We will call it `movie_rating_app`. Go to the directory where you want to create
    your application in the Terminal and run the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建一个新的项目文件夹，用于我们的电影评分应用。我们将称之为 `movie_rating_app`。在终端中转到您想要创建应用程序的目录，并运行以下命令：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding command initializes an application with all the dependencies
    that a Vue.js project requires. It will ask you a few questions about the project
    setup, to which you can answer either *y*, as in *yes*, or *n*, as in *no*:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令初始化了一个包含 Vue.js 项目所需所有依赖的应用程序。它将询问您一些有关项目设置的问题，您可以选择回答 *y*（表示是）或 *n*（表示否）：
- en: '**Vue build**: You will find two options to build the Vue.js app: runtime +
    compiler, or runtime Only. This has to do with the template compiler:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vue 构建选项**：您将找到两个构建 Vue.js 应用的选项：运行时 + 编译器，或仅运行时。这与模板编译器有关：'
- en: '**Runtime only**: The runtime option is used to create the `vue` instances.
    This option does not include the template compiler.'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅运行时**：运行时选项用于创建 `vue` 实例。此选项不包括模板编译器。'
- en: '**Runtime + compiler**: This option includes the template compiler, which means
    the `vue` templates are compiled to the plain JavaScript render functions.'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时 + 编译器**：此选项包括模板编译器，这意味着 `vue` 模板将被编译成普通的 JavaScript 渲染函数。'
- en: '**Vue-router**:Vue-router is the official router for Vue.js applications. This
    option is specially used when we want to make our application a **Single Page
    Application** (**SPA**). When using this option, the application makes all the
    necessary requests one time when the page initially loads and sends requests to
    the server when new data is needed. We will be talking more about Single Page
    and Multi-Page applications in future chapters as well. For now, we will be using
    the Vue-router.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vue-router**：Vue-router 是 Vue.js 应用的官方路由器。此选项特别用于我们想要将我们的应用程序制作成 **单页应用**（**SPA**）的情况。当使用此选项时，应用程序在页面首次加载时一次性发出所有必要的请求，并在需要新数据时向服务器发送请求。我们将在未来的章节中更多地讨论单页和多页应用。现在，我们将使用
    Vue-router。'
- en: '**ESLint**:ESLint is a JavaScript linter tool. It is a static code analysis
    tool used to find the errors or the mistakes in the code. It basically makes sure
    that the code follows the standard guidelines. There are two options for choosing
    the ESLint from as well: standard linting or the Airbnb linting. We will be going
    with Airbnb for this project.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ESLint**：ESLint 是一个 JavaScript 代码检查工具。它是一个静态代码分析工具，用于查找代码中的错误或错误。它基本上确保代码遵循标准指南。选择
    ESLint 也有两种选项：标准检查或 Airbnb 检查。我们将在这个项目中使用 Airbnb。'
- en: '**Setup test**:By setting up tests, the project creates a wrapper for the tests
    that we will be writing for our application. It creates the necessary structure
    and configuration for the tests codes to be able to be run. We will be using this
    option as well. For the test runner, we will be using Mocha and Karma, and for
    the end to end testing, we will be using Nightwatch, which we will learn about
    in further chapters.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置测试**：通过设置测试，项目为我们将为应用程序编写的测试创建了一个包装器。它创建了测试代码所需的必要结构和配置，以便能够运行。我们也将使用此选项。对于测试运行器，我们将使用
    Mocha 和 Karma，对于端到端测试，我们将使用 Nightwatch，我们将在后续章节中学习它。'
- en: '**Dependency management**: Lastly, to manage the packages and the dependencies,
    here we have two options: `npm` and `Yarn`. We mostly talked about `npm` in previous
    chapters. `Yarn` is also a dependency management tool just like `npm`. Both Yarn
    and `npm` have their own benefits, but for this application, we are going to use
    `npm`. You can learn more about Yarn here ([https://yarnpkg.com/en/](https://yarnpkg.com/en/)).'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖管理**：最后，为了管理包和依赖项，这里有两种选项：`npm` 和 `Yarn`。我们在前面的章节中主要讨论了 `npm`。`Yarn` 也是一个与
    `npm` 类似的依赖管理工具。Yarn 和 `npm` 都有自己的优点，但在这个应用程序中，我们将使用 `npm`。你可以在这里了解更多关于 Yarn 的信息
    ([https://yarnpkg.com/en/](https://yarnpkg.com/en/))。'
- en: 'This will take some time as it will install all the dependencies. Here are
    the options that we selected for our application:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将花费一些时间，因为它将安装所有依赖项。以下是我们在应用程序中选择的选项：
- en: '![](img/e962ace9-cf14-44e2-b418-2df63afde539.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e962ace9-cf14-44e2-b418-2df63afde539.png)'
- en: 'When the command is successfully executed, you should be able to see the further
    steps on your Terminal:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当命令成功执行后，你应该能在你的终端上看到进一步的步骤：
- en: '![](img/6eccf577-1893-40fd-8534-571db89ed658.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6eccf577-1893-40fd-8534-571db89ed658.png)'
- en: 'If the build is successful, we will be able to see the preceding output. Now,
    let''s do as it says in the Terminal:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果构建成功，我们将能够看到前面的输出。现在，让我们按照终端上的指示操作：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will start your application. The default port of the Vue.js application
    is 8080\. As you can see in your Terminal, it should say:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动你的应用程序。Vue.js 应用程序的默认端口是 8080。正如你在终端中看到的那样，它应该显示：
- en: '![](img/027b2d37-1812-46ce-8cec-66e218227acb.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/027b2d37-1812-46ce-8cec-66e218227acb.png)'
- en: 'Go to the browser and open the URL `http://localhost:8080/#/`, and we should
    be able to see our application:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并访问 URL `http://localhost:8080/#/`，我们应该能够看到我们的应用程序：
- en: '![](img/7ca9be13-5227-4432-910a-912a0037985a.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7ca9be13-5227-4432-910a-912a0037985a.png)'
- en: Great job! That was super easy. You have successfully created and run a Vue.js
    application.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！这很简单。你已经成功创建并运行了一个 Vue.js 应用程序。
- en: Project folder structure
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目文件夹结构
- en: 'Now, if you have noticed, `vue-cli` commands add a bunch of dependencies to
    your application, which is listed in the `package.json` file. The `cli` command
    also sets up a folder structure that you can customize to your needs as well.
    Let''s review and understand the structure that the `cli` has made for us:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你已经注意到，`vue-cli` 命令为你的应用程序添加了一堆依赖项，这些依赖项列在 `package.json` 文件中。`cli` 命令还设置了一个你可以根据需要定制的文件夹结构。让我们回顾并理解
    `cli` 为我们创建的结构：
- en: '![](img/5ae64fa6-aa4e-4d02-87af-7244b258abf5.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5ae64fa6-aa4e-4d02-87af-7244b258abf5.png)'
- en: '`build` folder: This folder contains the `webpack` configuration files for
    different environments: development, test, and production'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build` 文件夹：这个文件夹包含不同环境（开发、测试和生产）的 `webpack` 配置文件'
- en: '`config` folder: All the configurations of the application would go here'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config` 文件夹：所有应用程序的配置都会放在这里'
- en: '`node_modules`: All the `npm` packages that we install reside in this folder'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node_modules`: 我们安装的所有 `npm` 包都位于这个文件夹中'
- en: '`src`:  This folder contains all the files related to rendering the components
    in the browser:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`: 这个文件夹包含所有与在浏览器中渲染组件相关的文件：'
- en: '`assets`: You can add your CSS and images for your application inside this
    folder.'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assets`: 你可以在该文件夹内添加你的应用程序的 CSS 和图片。'
- en: '`components`: This folder will house all the frontend rendering files that
    will have a `.vue` extension.'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`components`: 这个文件夹将存放所有具有 `.vue` 扩展名的前端渲染文件。'
- en: '`router`: This folder will take care of all the URL routes for different pages
    throughout the application.'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`router`: 这个文件夹将负责应用程序中不同页面的所有 URL 路由。'
- en: '`App.vue`: You can think of `App.vue` as the main component for rendering the
    view files. Other files will extend the layout defined on this file to create
    different views.'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.vue`: 你可以将 `App.vue` 视为渲染视图文件的主组件。其他文件将扩展此文件上定义的布局以创建不同的视图。'
- en: '`main.js`: This is the main entry point for any Vue.js application.'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.js`: 这是任何 Vue.js 应用程序的主入口点。'
- en: '`Static`: You can use this folder as well to keep your static files, such as
    CSS and images.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Static`: 你也可以使用这个文件夹来保存你的静态文件，例如 CSS 和图片。'
- en: '`Test`: This folder will be used to handle all the tests written for our application.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Test`: 这个文件夹将用于处理我们应用程序编写的所有测试。'
- en: Building a static application with Vue.js
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Vue.js 构建静态应用程序
- en: Now that we have initialized a project, let's move ahead with creating a static
    web application. Don't forget to make a repository on GitHub and commit and push
    changes regularly.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经初始化了一个项目，让我们继续创建一个静态的 Web 应用程序。别忘了在 GitHub 上创建一个仓库，并定期提交和推送更改。
- en: When you visit the URL `http://localhost:8080/#/`, you will see a default page
    rendered.  This piece of code is written in `src/components/HelloWorld.vue`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当你访问 URL `http://localhost:8080/#/` 时，你将看到一个默认页面被渲染。这段代码是写在 `src/components/HelloWorld.vue`
    中的。
- en: 'If you look into `build/webpack.base.conf.js`, you will see this line of code
    in the `module.exports` section:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看 `build/webpack.base.conf.js`，你将在 `module.exports` 部分看到以下代码行：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This means, when you run the app, this `main.js` will be the entry point for
    the app. Everything will start from there. Let''s have a quick look at that `main.js`
    file inside `src`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，当你运行应用时，这个 `main.js` 将是应用的入口点。一切都将从这里开始。让我们快速查看 `src` 中的 `main.js` 文件：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first three lines import the necessary packages required for this app to
    run. `App.vue` is the main template layout for this app. All other `.vue` files
    will extend this layout.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 前三条语句导入了此应用运行所需的必要包。`App.vue` 是此应用的主模板布局。所有其他 `.vue` 文件都将扩展此布局。
- en: 'The bottom block defines which component to render when you run the app. In
    this case, this is telling our app to take the template `<App>` and render it
    inside the `#app` element.  Now, if we look into `App.vue`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 底部块定义了运行应用时渲染哪个组件。在这种情况下，这是告诉我们的应用将模板 `<App>` 渲染在 `#app` 元素内。现在，如果我们查看 `App.vue`：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here we have the template that has a `div` element with an ID `#app`. It means
    that the `vue` templates that we create will get rendered in this.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个包含 ID `#app` 的 `div` 元素的模板。这意味着我们创建的 `vue` 模板将被渲染在这里。
- en: Redefining the home page
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新定义主页
- en: 'Let''s make our own view page for the home. For this, we can just modify the
    `HelloWorld.vue` component. The `.vue` file should always start with a template.
    Hence, a basic template for this file is:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为主页创建自己的视图页面。为此，我们只需修改 `HelloWorld.vue` 组件。`.vue` 文件应该始终以模板开始。因此，此文件的基本模板如下：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can also include your style sheets and JavaScript codes definitions in this
    page, but it will be much cleaner if we separate these out somewhere else.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在这个页面上包含你的样式表和 JavaScript 代码定义，但如果我们将这些代码分离到其他地方，页面会显得更整洁。
- en: 'Let''s remove everything from `HelloWorld.vue` and add these lines of code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 `HelloWorld.vue` 中删除所有内容，并添加以下代码行：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We also don''t need a Vue.js logo, so let''s delete that as well from `src/assets` and
    the line of code in `App.vue`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也不需要 Vue.js 的标志，所以让我们也从 `src/assets` 中删除它，并在 `App.vue` 中的代码行：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, if you revisit the URL `http://localhost:8080/#/`, you will see `Hello
    World` rendered:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你重新访问 URL `http://localhost:8080/#/`，你将看到 `Hello World` 被渲染：
- en: '![](img/b3ba6aec-edc9-4c60-ad26-712c12a42a34.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3ba6aec-edc9-4c60-ad26-712c12a42a34.png)'
- en: Segregating CSS
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分离 CSS
- en: 'Time for segregating CSS. Let''s create a folder inside the `src/assets` folder
    called `stylesheets` and add a `main.css` file. Add the following line of code
    in `main.css`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候分离 CSS 了。让我们在 `src/assets` 文件夹内创建一个名为 `stylesheets` 的文件夹，并添加一个 `main.css`
    文件。在 `main.css` 中添加以下行：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `main.css` will be our main CSS file that includes all other CSS components.
    We can directly add all our style code here as well. But to maintain readability,
    we will be creating separate style sheets for different sections in our applications
    and importing them here.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`main.css` 将是我们的主要 CSS 文件，它包含所有其他 CSS 组件。我们也可以直接在这里添加所有样式代码。但为了保持可读性，我们将为应用中的不同部分创建单独的样式表并将它们导入此处。'
- en: 'Since we will be importing all the style sheets here, now we need to include
    only the `main.css` file in the main application so that it gets loaded. To do
    that, let''s add the following line of code in `src/App.vue`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在这里导入所有样式表，现在我们只需要在主应用中包含 `main.css` 文件，以便它被加载。为此，让我们在 `src/App.vue` 中添加以下代码行：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We have imported a style sheet called `home.css` in `main.css` that does not
    yet exist. So let''s go ahead and create that in the same directory, which is `src/assets`.
    Also, let''s remove the following piece of code from `App.vue` and paste it into
    the `home.css` file: so that our component is clean:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `main.css` 中导入了名为 `home.css` 的样式表，但该样式表尚未存在。因此，让我们在同一个目录 `src/assets` 中创建它。此外，让我们从
    `App.vue` 中删除以下代码段并将其粘贴到 `home.css` 文件中，以便我们的组件更简洁：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Introduction to Vuetify
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vuetify 简介
- en: Vuetify is a module that can be used to build materialistic web page designs
    for Vue.js applications. It provides several features that can be used as building
    blocks for our application. It is a UI framework like Bootstrap, but it mostly
    has the material components. For more details, you can go to this link [https://vuetifyjs.com](https://vuetifyjs.com).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Vuetify是一个可以用于为Vue.js应用构建物质化网页设计的模块。它提供了一些可以作为我们应用构建块使用的功能。它是一个类似于Bootstrap的UI框架，但它主要包含材料组件。更多详情，您可以访问这个链接[https://vuetifyjs.com](https://vuetifyjs.com)。
- en: 'We will be using both Vuetify and Bootstrap combined when building the application. 
    The first step is to install the packages:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建应用时，我们将同时使用Vuetify和Bootstrap。第一步是安装包：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After these get installed, the next thing we need to do is require these packages
    in our main file. So, in the `src/main.js` file, add the following lines:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完这些之后，接下来我们需要在我们的主文件中引入这些包。所以，在`src/main.js`文件中，添加以下代码行：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We also need to use `vuetify.css`, which holds all the style sheets related
    to its design. We will need this as well. We can just simply link a style sheet
    for this. In the `index.html` file, add the following lines of code in your `head`
    section:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要使用`vuetify.css`，它包含了所有与其设计相关的样式表。我们也将需要它。我们可以简单地链接一个样式表来实现这一点。在`index.html`文件中，在你的`head`部分添加以下代码行：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Vuetify uses material icons well, so also import the fonts. Add the following
    line of code in `index.html` as well:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Vuetify很好地使用了材料图标，因此也要导入字体。在`index.html`中同样添加以下代码行：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Redesigning pages with Vuetify
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vuetify重新设计页面
- en: Now that we have Vuetify, let's move on to creating the pages for the application.
    provides us with some predefined themes as well. We will use a very simple and
    minimalistic theme for the app. Of course, we can also customize these according
    to our needs.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了Vuetify，让我们继续创建应用页面。它还提供了一些预定义的主题。我们将为应用使用一个非常简单和极简主义的主题。当然，我们也可以根据我们的需求进行自定义。
- en: 'The outcome of this section will look as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的结果将如下所示：
- en: '![](img/9116e70e-d17b-43e5-a7dc-09da33118cde.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9116e70e-d17b-43e5-a7dc-09da33118cde.png)'
- en: Redesigning the home page
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新设计主页
- en: 'In our `App.vue`, replace the file content with the following code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`App.vue`中，将文件内容替换为以下代码：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This contains several tags that mostly start with `v-`. These are the tags given
    by Vuetify to define our blocks in UI. We have attached a `stylesheet` file with
    the preceding file called `main.css`. Let's add some styling to our `App.vue` page.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这包含了一些主要以`v-`开头的标签。这些是Vuetify提供的标签，用于定义我们的UI块。我们与前面的文件一起附加了一个名为`main.css`的`stylesheet`文件。让我们给我们的`App.vue`页面添加一些样式。
- en: 'Add the following code to `src/assets/stylesheets/home.css`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`src/assets/stylesheets/home.css`中：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We still have a `div` section with an ID app in it. This is the section where
    all our other `.vue` files will get rendered.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然有一个包含ID为app的`div`部分。这是所有其他`.vue`文件将被渲染的部分。
- en: 'Now, in `HelloWorld.vue`, replace the content with this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`HelloWorld.vue`中，将内容替换为以下内容：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now, if you visit `http://localhost:8080/#/`, you should be able to view the
    home page.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你访问`http://localhost:8080/#/`，你应该能够查看主页。
- en: Redesigning the contact page
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新设计联系页面
- en: 'Let''s go ahead with adding a new contact page. The first thing to do is add
    a route to our routes file. In `router/index.js`, add the following code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加一个新的联系页面。首先要做的是在我们的路由文件中添加一个路由。在`router/index.js`中添加以下代码：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'What we did here is add a path for the contact page, the name of the component,
    which we did in our export module in the `.vue` file, and the actual name of the
    component. Now we need to build a view file. So let''s create a `Contact.vue` file
    in `src/components/` and add the following content to it:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的是为联系页面添加了一个路径，组件的名称，这是我们之前在`.vue`文件中的导出模块中做的，以及组件的实际名称。现在我们需要构建一个视图文件。所以，让我们在`src/components/`中创建一个`Contact.vue`文件，并添加以下内容：
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now, visit `http://localhost:8080/#/contact` and you should be able to view
    both pages.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，访问`http://localhost:8080/#/contact`，你应该能够查看这两个页面。
- en: To make it usable and easily readable for our app, let's rename the `HelloWorld` component
    to the `Home` component. Rename the file `HelloWorld.vue` to `Home.vue`
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使它对我们应用来说既可用又易于阅读，让我们将`HelloWorld`组件重命名为`Home`组件。将文件`HelloWorld.vue`重命名为`Home.vue`
- en: 'Also, change the binding route from `HelloWorld` to `Home` in `App.vue`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，在`App.vue`中将绑定路由从`HelloWorld`更改为`Home`：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the `routes/index.js` as well, change the component name and the route to `Home` from `HelloWorld`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在`routes/index.js`中，同样将组件名称和路由从`HelloWorld`更改为`Home`：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We should be able to see something like this when we visit the URL `http://localhost:8080/#/`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们访问 URL `http://localhost:8080/#/` 时，我们应该能看到类似以下内容：
- en: '![](img/5a2bd1e8-a96b-49c0-95d8-499db0a047bd.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5a2bd1e8-a96b-49c0-95d8-499db0a047bd.png)'
- en: That's it. You have successfully created a basic static two-page web application!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。你已经成功创建了一个基本的静态两页网页应用！
- en: Understanding Vue.js components
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Vue.js 组件
- en: The `vue` components are equivalent to the HTML files that you write in an application.
    You can write the plain HTML syntax in `.vue` files. The only thing that needs
    to be taken care of is to wrap all the content with `<template></template>`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`vue` 组件与你在应用中编写的 HTML 文件等效。你可以在 `.vue` 文件中编写纯 HTML 语法。唯一需要注意的事情是，需要将所有内容包裹在
    `<template></template>` 中。'
- en: Vue.js directives
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue.js 指令
- en: 'Directives are used with a markup language to perform some functions on the
    DOM elements. For example, in HTML markup language, when we write:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 指令与标记语言一起使用，在 DOM 元素上执行一些功能。例如，在 HTML 标记语言中，当我们写入：
- en: '[PRE26]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `class` used here is a directive for HTML language. Similarly, Vue.js also
    provides a lot of such directives to make application development easier, such
    as:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的 `class` 是 HTML 语言的指令。同样，Vue.js 也提供了许多这样的指令来简化应用开发，例如：
- en: '`v-text`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-text`'
- en: '`v-on`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-on`'
- en: '`v-ref`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-ref`'
- en: '`v-show`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-show`'
- en: '`v-pre`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-pre`'
- en: '`v-transition`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-transition`'
- en: '`v-for`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-for`'
- en: v-text
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: v-text
- en: 'You can use `v-text` when you want to display some variables that you have
    to define dynamically. Let''s see with an example. In `src/components/Home.vue`,
    let''s add the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要动态定义一些变量来显示时，可以使用 `v-text`。让我们通过一个例子来看一下。在 `src/components/Home.vue` 中，让我们添加以下内容：
- en: '[PRE27]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The code inside the script tag is a data variable, which binds the data defined
    inside it to this component. When you change the value of that variable message,
    the `div` element with that directive also gets updated.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: script 标签内的代码是一个数据变量，它将定义在其中的数据绑定到该组件。当你改变该变量的值 message 时，带有该指令的 `div` 元素也会更新。
- en: 'If we visit the URL (`http://localhost:8080/#/`), we can see the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们访问 URL (`http://localhost:8080/#/`)，我们可以看到以下内容：
- en: '![](img/3e7c450c-8772-441e-a681-a4e8e7392069.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3e7c450c-8772-441e-a681-a4e8e7392069.png)'
- en: v-on
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: v-on
- en: 'This directive is used for event handling. We can use this to trigger some
    logic in your application. For example, let''s say we want to reply to a question
    that we did in the last example, for that we can do the following. Change the
    code in `src/components/Home.vue` to the following:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这个指令用于事件处理。我们可以用它来触发应用中的某些逻辑。例如，假设我们想要回复上一个例子中的一个问题，为此我们可以这样做。将 `src/components/Home.vue`
    中的代码更改为以下内容：
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The first screen will be as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 第一屏将如下所示：
- en: '![](img/b7d00360-1b89-4930-b816-754317639f37.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b7d00360-1b89-4930-b816-754317639f37.png)'
- en: 'When you click REPLY, you will see the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击回复时，你会看到以下内容：
- en: '![](img/5cdf10ea-add8-45db-b66f-8ca237115802.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5cdf10ea-add8-45db-b66f-8ca237115802.png)'
- en: These are the directives that we will be using mostly in our app. There are
    a lot more other directives as well that we will explore on the way. If you want
    to learn more about each of these, you can visit `https://012.vuejs.org/api/directives.html`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们将在应用中主要使用的指令。还有很多其他的指令，我们将在学习过程中探索。如果你想了解更多关于每个指令的信息，你可以访问 `https://012.vuejs.org/api/directives.html`。
- en: Data binding
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据绑定
- en: '**Data binding** is the process of synchronizing data. For example, for the
    same example for what we did on `v-text`, we can do it with data binding with
    the mustaches, in other words using the `{{}}` operators.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据绑定**是同步数据的过程。例如，对于我们在 `v-text` 中所做的相同示例，我们可以使用数据绑定与模板符号，换句话说，使用 `{{}}`
    操作符。'
- en: 'For example, we can use the `{{message}}` instead of using the Vue.js directive
    for the message. Let''s change the code in `src/components/Home.vue` to the following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用 `{{message}}` 而不是使用 Vue.js 指令来显示消息。让我们将 `src/components/Home.vue`
    中的代码更改为以下内容：
- en: '[PRE29]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This will behave the same way as what we did with `v-text`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这将表现得与我们在 `v-text` 中所做的一样。
- en: Handling forms with Vue.js
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Vue.js 处理表单
- en: Now that we have a basic idea of how Vue.js works, let's roll ahead with our
    first form, where we will be adding the details of movies and displaying those
    movies in the home page so that  users can view them.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对 Vue.js 的工作原理有了基本的了解，让我们继续我们的第一个表单，我们将添加电影的详细信息并在主页上显示这些电影，以便用户可以查看。
- en: Creating a movies listing page
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建电影列表页面
- en: 'First of all, let''s start with creating static movie cards for our home page
    and we will make this data dynamic in the next step. In `Home.vue`, replace the
    content inside `template` with the following code:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们从为我们的主页创建静态电影卡片开始，我们将在下一步使这些数据动态化。在`Home.vue`中，将`template`内的内容替换为以下代码：
- en: '[PRE30]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Also, replace the content in `home.css` as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，按照以下内容替换`home.css`中的内容：
- en: '[PRE31]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Also, in `App.vue`, replace the content with the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在`App.vue`中，将内容替换为以下内容：
- en: '[PRE32]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, replace the content in `src/main.js`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，替换`src/main.js`中的内容：
- en: '[PRE33]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'With this, we should have a page like this on the home page:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们应该在主页上有一个这样的页面：
- en: '![](img/4ca9ae33-37ba-4cb9-8cce-8760481f572b.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ca9ae33-37ba-4cb9-8cce-8760481f572b.png)'
- en: We will be making these pages dynamic as we go.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在进行过程中使这些页面动态化。
- en: Creating an Add movie form
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建添加电影表单
- en: 'First, we need to add a link that takes us to a form to add the movies. For
    that, we need to change the toolbar in `App.vue`.  So, let''s add a link to the
    toolbar in `App.vue`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要添加一个链接，带我们到一个添加电影的表单。为此，我们需要更改`App.vue`中的工具栏。所以，让我们在`App.vue`的工具栏中添加一个链接：
- en: '[PRE34]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now that we have the link, we need to add a route to link it to the page. Just
    like we did for our `Contact` page, let''s add a route that will be used to add
    movies to our application. So, in `routes/index.js`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了链接，我们需要添加一个路由来将其链接到页面。就像我们为我们的`Contact`页面所做的那样，让我们添加一个用于添加电影到我们应用程序的路由。所以，在`routes/index.js`中：
- en: '[PRE35]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Here, we added a route for `AddMovie`, which now means that we can access the
    add movie page at `http://localhost:8080/#/movies/add`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为`AddMovie`添加了一个路由，这意味着我们现在可以访问`http://localhost:8080/#/movies/add`的添加电影页面。
- en: The next thing we need to do now is to create the `vue` component file. For
    that, let's add a new `AddMovie.vue` file in `src/components`. Vuetify provides
    a very simple way to create forms and add validations as well. You can look for
    more information at [https://vuetifyjs.com/components/forms](https://vuetifyjs.com/components/forms).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要做的是创建一个`vue`组件文件。为此，让我们在`src/components`中添加一个新的`AddMovie.vue`文件。Vuetify提供了一个非常简单的方式来创建表单并添加验证。你可以在[https://vuetifyjs.com/components/forms](https://vuetifyjs.com/components/forms)查找更多信息。
- en: 'Let''s add the following content to `src/components/AddMovie.vue`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`src/components/AddMovie.vue`中添加以下内容：
- en: '[PRE36]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Vuetify also provides some basic validations to the form. Let's add some validation
    to it as well.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Vuetify还为表单提供了一些基本的验证。让我们也添加一些验证。
- en: 'Add the following code to `AddMovie.vue` inside the `script` tag:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在`AddMovie.vue`中的`script`标签内添加以下代码：
- en: '[PRE37]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If we look into the form element in `AddMovie.vue`, the line that says:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看`AddMovie.vue`中的表单元素，说“`v-model="year"`”的行：
- en: '[PRE38]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: What `v-model="valid"` part does here is, it makes sure the form does not get
    submitted until it is true, which again ties back to the script that we have added
    in the bottom. Also, let's look into the validations that we have added to the
    form.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这里`v-model="valid"`部分的作用是，确保表单在为真之前不会提交，这再次与我们在底部添加的脚本相关联。此外，让我们看看我们添加到表单中的验证。
- en: 'The first basic validation is the `required` validation:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个基本验证是`required`验证：
- en: '[PRE39]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This adds a `required` validation in the `name` field.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这在`name`字段中添加了一个`required`验证。
- en: 'Also, for the `release_year` field, we want it to be a dropdown of years, so,
    for that, we have added the following:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于`release_year`字段，我们希望它是一个年份的下拉列表，因此，为此，我们添加了以下内容：
- en: '[PRE40]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This adds items to the select list dynamically through the script.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这通过脚本动态地向选择列表中添加项目。
- en: As regards the last part, we have two buttons `Submit` and `Clear`, which call
    the methods `submit() `and `clear()`, respectively.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 关于最后一部分，我们有两个按钮`Submit`和`Clear`，分别调用`submit()`和`clear()`方法。
- en: 'Now, you should have a form like this when you visit the URL (`http://localhost:8080/#/movies/add`):'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你访问URL（`http://localhost:8080/#/movies/add`）时，你应该有一个这样的表单：
- en: '![](img/51c30522-e0d2-4cb9-986b-ad482a9382be.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51c30522-e0d2-4cb9-986b-ad482a9382be.png)'
- en: The `*` in the **Movie Name** denotes that it is a required field.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**Movie Name**中的`*`表示这是一个必填字段。'
- en: 'If you have noticed, we have been adding a `#` to all the routes that we have
    added. That is because it is the default setting for the Vue.js router. We can
    remove that by adding `mode: ''history''` in `routes/index.js`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你注意到了，我们一直在向所有添加的路由中添加`#`。这是因为这是Vue.js路由器的默认设置。我们可以通过在`routes/index.js`中添加`mode:
    ''history''`来移除它：'
- en: '[PRE41]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, we can all route without adding the `#` in the URL as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们都可以在URL中不添加`#`来路由，如下所示：
- en: '`http://localhost:8080/`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/`'
- en: '`http://localhost:8080/contact`'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/contact`'
- en: '`http://localhost:8080/movies/add`'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/movies/add`'
- en: Communicating with servers
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与服务器通信
- en: We now have a movie listing page, we have an add movie page, so the next thing
    we have to do is save the data into the MongoDB when we submit the form.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了电影列表页面，也有了一个添加电影的页面，所以接下来我们要做的是在提交表单时将数据保存到 MongoDB 中。
- en: Adding express to our application
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 express 添加到我们的应用程序
- en: Now that we have all the components in place, it's time to add the server layer
    to our application.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了所有组件，是时候将服务器层添加到我们的应用程序中。
- en: 'Let''s start by adding the express package with the following:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从添加以下 express 包开始：
- en: '[PRE42]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The next part is to create the necessary endpoints and models so that we can
    add the movies to the database.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分是创建必要的端点和模型，以便我们可以将电影添加到数据库中。
- en: 'To do that, we first need to install the required packages:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们首先需要安装所需的包：
- en: '`body-parser`: To parse the incoming  requests'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`body-parser`: 解析传入的请求'
- en: '`cors`: To handle cross-origin requests between frontend and backend'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cors`: 用于处理前端和后端之间的跨域请求'
- en: '`morgan`: HTTP request logger'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`morgan`: HTTP 请求记录器'
- en: '`mongoose`: Object modeling for MongoDB'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mongoose`: 用于 MongoDB 的对象建模'
- en: 'Let''s install all of these packages by running the following command in the
    Terminal:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在终端中运行以下命令来安装所有这些包：
- en: '[PRE43]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Adding a server file
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加服务器文件
- en: 'Now, we need to set up the server for our application. Let''s add a file called `server.js` in
    the root of the application and add the following content:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要为我们的应用程序设置服务器。让我们在应用程序的根目录下添加一个名为 `server.js` 的文件，并添加以下内容：
- en: '[PRE44]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Here, we have set up a server that tells the express server to run on the 8081
    port. We will be using this server to handle all the API requests via express.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经设置了一个服务器，告诉 express 服务器在 8081 端口上运行。我们将使用这个服务器通过 express 处理所有 API 请求。
- en: Also, we have required and used all the packages that we need in this `server.js` file.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们在 `server.js` 文件中已导入并使用了所有需要的包。
- en: 'Also, for the mongoose connection, we have added a connection to our local
    database called `movie_rating_app` with the following code block:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于 mongoose 连接，我们已经添加了一个连接到我们本地数据库 `movie_rating_app` 的连接，以下为代码块：
- en: '[PRE45]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: As I mentioned earlier, if the database does not exist yet, it will automatically
    get created when we add our very first Mongoose document to the DB.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，如果数据库尚不存在，当我们向 DB 添加第一个 Mongoose 文档时，它将自动创建。
- en: 'The next thing is to run our MongoDB server. Let''s do that by running the
    following command in the Terminal:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是运行我们的 MongoDB 服务器。让我们在终端中运行以下命令来完成：
- en: '[PRE46]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Once the Mongo server is up, let''s spin up our `node` server for this application
    using the following command:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Mongo 服务器启动，让我们使用以下命令启动这个应用程序的 `node` 服务器：
- en: '[PRE47]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, when we open `http://localhost:8081/`, you should be able to see the following
    message:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们打开 `http://localhost:8081/` 时，你应该能看到以下信息：
- en: '![](img/51654a80-e1f1-452d-84aa-559b4711e2e1.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51654a80-e1f1-452d-84aa-559b4711e2e1.png)'
- en: 'Until now, we have our frontend server up and running on port 8080 with the
    following:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的前端服务器已经在端口 8080 上启动并运行，以下为配置信息：
- en: '[PRE48]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The backend server running on port 8081 with the following:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 后端服务器运行在端口 8081，以下为配置信息：
- en: '[PRE49]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'One important thing to remember is that whenever we change the code in `server.js`,
    we have to restart the server by running the following command:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的一个重要事项是，每次我们更改 `server.js` 中的代码时，都必须通过运行以下命令来重新启动服务器：
- en: '[PRE50]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This is a very tedious task. However, there is one good way to get rid of that.
    There is a package called `nodemon`, which, when installed, restarts the server
    automatically whenever the code gets updated and we don''t have to do it manually
    every time. So, let''s go ahead and install the package:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常繁琐的任务。然而，有一个很好的方法可以摆脱它。有一个名为 `nodemon` 的包，当安装后，每当代码更新时，它会自动重新启动服务器，我们不需要每次都手动操作。所以，让我们继续安装这个包：
- en: '[PRE51]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'With the package installed, now we can start our server with the following
    command:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了包后，现在我们可以使用以下命令启动我们的服务器：
- en: '[PRE52]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Adding a Movie model
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加电影模型
- en: 'The next thing is to add the movies to the database when we submit the form.
    Let''s go ahead and create a folder called `models` in the root directory and
    add a `Movie.js` file in the `models` directory:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在提交表单时将电影添加到数据库中。让我们先在根目录下创建一个名为 `models` 的文件夹，并在 `models` 文件夹中添加一个 `Movie.js`
    文件：
- en: We will be using singular capitalized names for Models, and all lowercase plural
    names for `Controllers` files.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为模型使用单数大写名称，并为 `Controllers` 文件使用所有小写复数名称。
- en: 'The following code into the `Movie.js`:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码块放入 `Movie.js`：
- en: '[PRE53]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Here, we have created a Movie model that would take all the four attributes
    that we have added to our `AddMovie.vue` form earlier.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们创建了一个 Movie 模型，它将接受我们之前添加到 `AddMovie.vue` 表单中的所有四个属性。
- en: Adding movies controller
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加电影控制器
- en: 'Now, the last thing we need to set up is an endpoint to save the movie to the
    database. Let''s create a folder called `controllers` in the root directory and
    add a file called `movies.js` inside the directory and add the following code:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要设置的最后一件事是保存电影到数据库的端点。让我们在根目录中创建一个名为 `controllers` 的文件夹，并在该目录中添加一个名为 `movies.js`
    的文件，并添加以下代码：
- en: '[PRE54]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Here we have added an endpoint that takes the post requests with the given params
    and creates a Mongoose document in the database that we have configured.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了一个端点，它接受带有给定参数的 post 请求，并在我们配置的数据库中创建一个 Mongoose 文档。
- en: 'Since these controllers have the routes, we need to include these files in
    our main entry point as well. For our backend, the main entry file is `server.js`.
    So, let''s add the following highlighted code block in `server.js`:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些控制器有路由，我们需要将这些文件包含在我们的主入口点中。对于我们的后端，主入口文件是 `server.js`。所以，让我们在 `server.js`
    中添加以下高亮代码块：
- en: '[PRE55]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: This code block will include all our controllers' files and we don't have to
    add each of them manually.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码块将包括所有控制器的文件，我们不需要手动添加每一个。
- en: Connecting frontend and backend
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接前端和后端
- en: Now, we have the model and an endpoint. The next thing to do is to call this
    endpoint when we hit the Submit button in `AddMovie.vue`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了模型和端点。接下来要做的事情是在我们点击 `AddMovie.vue` 中的 `提交` 按钮时调用这个端点。
- en: This is the part where we need to communicate the frontend and the backend.
    For this, we need to use a separate package called axios.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们需要与前端和后端通信的部分。为此，我们需要使用一个名为 axios 的单独包。
- en: The axios package helps us to make the HTTP requests from the Node.js. It helps
    to make the Ajax calls from the frontend. There are several alternatives for axios
    as well, such as fetch, and superagent. But axios has been successful enough to
    become the most popular among these. So we will be using the same as well.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: axios 包帮助我们从 Node.js 中进行 HTTP 请求。它还帮助我们从前端进行 Ajax 调用。axios 也有几个替代方案，例如 fetch
    和 superagent。但 axios 已经足够成功，成为了这些中最受欢迎的一个。因此，我们也将使用它。
- en: Installing axios
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 axios
- en: 'Now, in order to communicate between the client and the server, we will be
    using the `axios` library. So, let''s install the library first:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了在客户端和服务器之间进行通信，我们将使用 `axios` 库。所以，让我们首先安装这个库：
- en: '[PRE56]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Connecting all the pieces
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接所有部分
- en: 'Now, we have all the things in place (movie model, movies controller, and axios)
    to communicate between the client and server. The last thing to do now is to connect
    these pieces when we click the submit button in the Movie Add form. If you remember,
    we added a placeholder before while submitting the button in `AddMovie.vue`:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经有了所有东西（电影模型、电影控制器和 axios）来在客户端和服务器之间进行通信。现在要做的最后一件事是在我们点击电影添加表单中的提交按钮时连接这些部分。如果你记得，我们在
    `AddMovie.vue` 中提交按钮时添加了一个占位符：
- en: '[PRE57]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'This code tells us to execute the `submit()` method when the button is clicked.
    We also have it in the `script` section:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码告诉我们，当按钮被点击时，执行 `submit()` 方法。我们也在 `script` 部分有这个操作：
- en: '[PRE58]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'All the methods that we will have will be added in this section. Now that we
    have our placeholder for `submit`, let''s modify this piece of code to incorporate
    the Movie Add form:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中添加所有方法。现在我们已经有了 `submit` 的占位符，让我们修改这段代码以包含电影添加表单：
- en: '[PRE59]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This should suffice. Now, let's go ahead and add a movie from the UI itself
    from the `http://localhost:8080/movies/add` endpoint. We should be able to save
    a movie's record in the MongoDB. Let me explain what we did here a little bit.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该足够了。现在，让我们从 UI 本身添加一个电影到 `http://localhost:8080/movies/add` 端点。我们应该能够将电影的记录保存到
    MongoDB 中。让我简单解释一下我们在这里做了什么。
- en: When we hit the `Submit` button, we made an AJAX request via axios to hit the
    post endpoint in the movies controller. The `post` method in movies controller,
    in turn, saves the record with the parameters that we gave according to the model
    schema we designed for the movies. And, when the process is complete, redirect
    the page back to the homepage.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击 `提交` 按钮时，我们通过 axios 发送一个 AJAX 请求，以击中电影控制器中的 post 端点。电影控制器中的 `post` 方法反过来，根据我们为电影设计的模型模式保存记录。并且，当这个过程完成后，将页面重定向回主页。
- en: 'To check whether the record was actually created or not, let''s look into MongoDB:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查记录是否实际上已创建，让我们看看 MongoDB：
- en: '[PRE60]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'We can see the record being created with the parameters we provided in the
    form:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到正在创建的记录，其参数是我们提供的表单中的参数：
- en: '![](img/c6be4e4e-6ffe-48c6-93ac-e9483534f9d7.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6be4e4e-6ffe-48c6-93ac-e9483534f9d7.png)'
- en: Adding form validations
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加表单验证
- en: 'We covered how to add the validations in the previous section as well. Let''s
    go ahead and add a few validations to our movie add form. We will add the following
    validations:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节中介绍了如何添加验证。让我们继续添加一些验证到我们的电影添加表单中。我们将添加以下验证：
- en: '`Movie Name` cannot be empty'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`电影名称`不能为空'
- en: '`Movie Description` is optional'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`电影描述`是可选的'
- en: '`Movie Release Year` cannot be blank'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`电影发行年份`不能为空'
- en: The genre of the movie will be required and will be maxed to 80 characters
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电影类型是必需的，并且最大长度为80个字符
- en: 'In `AddMovie.vue`, let''s add the rules in input fields and bind the rules
    from the script:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在`AddMovie.vue`中，让我们在输入字段中添加规则，并将规则从脚本中绑定：
- en: '[PRE61]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Now, if we try to submit the form with all the fields blank, and the field `Movie
    Genre` with more than 80 characters, we should not be able to submit the form.
    The form will display these error messages:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们尝试提交所有字段都为空的表单，以及`电影类型`字段超过80个字符，我们就不应该能够提交表单。表单将显示以下错误信息：
- en: '![](img/b45e3b2c-8263-47e3-b40d-c0554d70fddb.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b45e3b2c-8263-47e3-b40d-c0554d70fddb.png)'
- en: Adding a flash message
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加闪存消息
- en: 'We have covered the basics of app building. Now that we can add a movie, what
    would be really nice is to have a certain message when the movie is saved successfully
    in the DB or notify if something goes wrong. There are several `npm` packages
    to do just that. We can also build our own as well. For this application, we will
    be using a package called: `vue-swal(https://www.npmjs.com/package/vue-swal)`.
    Let''s add the package first:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了应用构建的基础知识。现在，既然我们可以添加一部电影，那么当电影成功保存在数据库中时，显示一条消息或者通知如果出现错误就非常好了。有几个`npm`包可以做到这一点。我们也可以自己构建。对于这个应用，我们将使用一个名为：`vue-swal(https://www.npmjs.com/package/vue-swal)`的包。让我们首先添加这个包：
- en: '[PRE62]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Now, let''s include the package in our `main.js` file:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将包包含到我们的`main.js`文件中：
- en: '[PRE63]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Now, let''s modify our `AddMovie.vue` to display the flash message when the
    action is performed successfully or when it fails:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改我们的`AddMovie.vue`，以便在操作成功执行或失败时显示闪存消息：
- en: '[PRE64]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Now, with this, when we submit a movie, we should be able to see a success
    message before redirecting to the homepage:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有了这个，当我们提交电影时，我们应该能够在重定向到主页之前看到一条成功消息：
- en: '![](img/e379a65e-69c5-4a66-931b-ce8bf96ff61f.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e379a65e-69c5-4a66-931b-ce8bf96ff61f.png)'
- en: There are also several other packages for the message alerting, such as `vue-flash`,
    `vuex-flash`, and `sweet-alert`.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他几个用于消息警报的包，例如`vue-flash`、`vuex-flash`和`sweet-alert`。
- en: Loading dynamic content on the homepage
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在主页上加载动态内容
- en: Currently, our homepage has all the static movies in the content. Let's fill
    the data with the data that we have added to the movies in our database. For that,
    the first thing to do is to add a few movies to the database, which we can do
    via the `http://localhost:8080/movies/add` endpoint from the UI.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的主页内容中包含所有静态电影。让我们用我们添加到数据库中的电影数据来填充数据。为此，首先要做的事情是添加一些电影到数据库中，我们可以通过UI中的`http://localhost:8080/movies/add`端点来完成：
- en: API endpoint to fetch all movies
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取所有电影的API端点
- en: 'First, we need to add an endpoint to fetch all the movies from the Mongo database.
    So, let''s first add an endpoint to fetch all the movies in `controllers/movies.js`:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要添加一个端点来从Mongo数据库中获取所有电影。所以，让我们首先在`controllers/movies.js`中添加一个获取所有电影的端点：
- en: '[PRE65]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Now, if you hit the URL `http://localhost:8081/movies`, we should be able to
    see the entire movie list that we have added via UI or the mongo shell itself.
    Here is what I have:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你点击URL `http://localhost:8081/movies`，我们应该能够看到通过UI或mongo shell本身添加的整个电影列表。以下是我所看到的：
- en: '![](img/3d467d70-d506-4f39-98ec-370eb03e6d67.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d467d70-d506-4f39-98ec-370eb03e6d67.png)'
- en: Modifying Home.vue to display dynamic content
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改`Home.vue`以显示动态内容
- en: 'Now, let''s update our `Home.vue`, which will fetch the movies from our Mongo
    database and display the dynamic content. Replace the code in `Home.vue` with
    the following content:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更新我们的`Home.vue`，它将获取我们的Mongo数据库中的电影并显示动态内容。用以下内容替换`Home.vue`中的代码：
- en: '[PRE66]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'This code calls a method when the page loads, which is defined in the `mounted` method.
    The method fetches the movies using an axios request. Now we have pulled the data
    from the server to the client. Now, we will use the `vue` directive to loop through
    these movies and render in the home page. Replace the content of the `<template>`
    tag with the following code in `Home.vue`:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码在页面加载时调用一个方法，该方法在 `mounted` 方法中定义。该方法使用 axios 请求获取电影。现在，我们已经从服务器将数据拉到客户端。现在，我们将使用
    `vue` 指令遍历这些电影并在主页上渲染。在 `Home.vue` 中，将 `<template>` 标签的内容替换为以下代码：
- en: '[PRE67]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'As you can see, we have used the `vue` directive `for`. The key is used to
    assign a unique identity to each record. Now, when you visit `http://localhost:8080/`,
    you will see the following:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们使用了 `vue` 指令 `for`。键用于为每个记录分配一个唯一的标识符。现在，当您访问 `http://localhost:8080/`
    时，您将看到以下内容：
- en: '![](img/d00b295b-283b-4516-968f-b7a6db462c38.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d00b295b-283b-4516-968f-b7a6db462c38.png)'
- en: We have successfully built an application where we can add the movies to the
    MongoDB and display the DB records on the home page.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功构建了一个应用程序，可以添加电影到 MongoDB，并在主页上显示数据库记录。
- en: Adding a movie profile page
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加电影简介页面
- en: 'Now, we need a page where a logged-in user can go and rate the movie. To do
    that, let''s add a link to the title of the movie on the home page. In `Home.vue`,
    replace the template part with the following content:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一个页面，让登录用户可以前往并评分电影。为此，让我们在主页上添加一个链接到电影的标题。在 `Home.vue` 中，将模板部分替换为以下内容：
- en: '[PRE68]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Here, we added a link to the title that will take the user to its corresponding
    detail page.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了一个链接到标题，该链接将用户带到相应的详情页面。
- en: 'Let''s add a page for the detailed view of the movie page where a logged-in
    user can go and rate the movie. Create a file called `Movie.vue` inside the `src/components`
    directory and add the following content:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个页面，用于显示电影的详细视图，登录用户可以前往并评分电影。在 `src/components` 目录下创建一个名为 `Movie.vue`
    的文件，并添加以下内容：
- en: '[PRE69]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: We have added an axios request here to fetch the movie when a user clicks on
    the title of the movie.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里添加了一个 axios 请求，用于在用户点击电影标题时获取电影。
- en: 'Now, we also need to define the routes to the page. So, in `routes/index.js`,
    replace the content with the following:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们还需要定义到该页面的路由。所以，在 `routes/index.js` 中，将内容替换为以下：
- en: '[PRE70]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Now, we need to add an endpoint for a GET request to fetch the movie with the
    specified ID.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要添加一个用于获取指定 ID 电影的 GET 请求端点。
- en: 'Replace the content in `controllers/movies.js` with the following:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `controllers/movies.js` 中的内容替换为以下：
- en: '[PRE71]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Now, when we click the link on the title of the movie, we should be able to
    see the following page:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们点击电影标题上的链接时，我们应该能够看到以下页面：
- en: '![](img/6a91082a-2182-4be0-bba0-97d1b7418b1a.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a91082a-2182-4be0-bba0-97d1b7418b1a.png)'
- en: Here, we have also added an area where a user can click on to Rate this Movie.
    Let's move ahead to add the functionality to rate the movie. For this, we will
    be using a package called `vue-star-rating`, which makes it easy to add the rating
    component. You can find this example on this link as well at `https://jsfiddle.net/anteriovieira/8nawdjs7/`.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们还添加了一个用户可以点击的区域来评分电影。让我们继续添加评分电影的功能。为此，我们将使用一个名为 `vue-star-rating` 的包，它使得添加评分组件变得容易。您可以在以下链接中找到这个示例：`https://jsfiddle.net/anteriovieira/8nawdjs7/`。
- en: 'Let''s first add the package:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先添加这个包：
- en: '[PRE72]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'In `Movie.vue`, replace the content  with the following:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Movie.vue` 中，将内容替换为以下：
- en: '[PRE73]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Let''s also update the code to call the `rate`  method when Rate this Movie
    is clicked. In `Movie.vue`, update the following line of code:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新代码，以便在点击“评分这部电影”时调用 `rate` 方法。在 `Movie.vue` 中更新以下代码行：
- en: '[PRE74]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Now, the last thing we need to do is add the `rate` endpoint in `movies.js`:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要做的最后一件事是在 `movies.js` 中添加 `rate` 端点：
- en: '[PRE75]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The endpoint saves the user ratings in a separate collection called `Rating`,
    which we haven''t created yet. Let''s go ahead and do that as well. Create a file
    called `Rating.js` inside the `models` directory and add the following content:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 该端点将用户评分保存到一个名为 `Rating` 的单独集合中，我们尚未创建。让我们继续创建该文件。在 `models` 目录下创建一个名为 `Rating.js`
    的文件，并添加以下内容：
- en: '[PRE76]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Include the same model in `movies.js` as well:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 同样在 `movies.js` 中包含相同的模型：
- en: '[PRE77]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'That''s it! Now a user should be able to rate a movie when logged-in. The user
    should get a popup when Rate this movie is clicked and display the rated score
    upon successful rating with a thank you message:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在，用户在登录后应该能够评分电影。当点击“评分这部电影”时，用户应该会弹出一个窗口，并在成功评分后显示评分分数以及感谢信息：
- en: '![](img/7c9354a3-fa9a-4300-bc98-d2e691e29923.png)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7c9354a3-fa9a-4300-bc98-d2e691e29923.png)'
- en: Summary
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered what Vue.js is! We built a static application that
    lists the movies followed by adding the dynamic functionality to a movies listing
    via a form that stores the movies in the MongoDB. We also learned about Vue.js
    components, Data Binding, and Vue.js Directives.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Vue.js是什么！我们构建了一个静态应用程序，列出了电影，随后通过一个表单添加了动态功能，该表单将电影存储在MongoDB中。我们还学习了Vue.js组件、数据绑定和Vue.js指令。
- en: We also added the functionality for users to be able to rate the movies.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还增加了用户对电影进行评分的功能。
- en: In the next chapter, we will add the users and sign in/sign up functionality
    in the same application.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将在同一应用程序中添加用户和登录/注册功能。
