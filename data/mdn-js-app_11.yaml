- en: Chapter 11. Building an RSS Reader Using React and Flux
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章. 使用React和Flux构建RSS阅读器
- en: React is not enough to build a complete application, as it's just the view layer.
    We need an architecture for holding the application logic and data, and this is
    where Flux comes in. Obviously, React can be used with any other architecture,
    but Flux is what is mostly used with React, as Flux is based on unidirectional
    data flow, like React. In this chapter, we will build a single-page RSS reader
    using React and Flux.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: React本身不足以构建一个完整的应用程序，因为它只是视图层。我们需要一个架构来持有应用程序逻辑和数据，这就是Flux发挥作用的地方。显然，React可以与任何其他架构一起使用，但Flux是最常与React一起使用的，因为Flux基于单向数据流，就像React一样。在本章中，我们将使用React和Flux构建一个单页RSS阅读器。
- en: 'We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Flux architecture in depth
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入了解Flux架构
- en: Routing using the React Router library
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React Router库进行路由
- en: Using Flux.js to create a dispatcher
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flux.js创建调度器
- en: Using MicroEvent.js to emit events
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MicroEvent.js来触发事件
- en: Integrating Flux and routing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成Flux和路由
- en: Understanding Flux
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Flux
- en: '**Flux** is an application architecture and not a framework. You can think
    of it as an alternative to MVC. It was primarily developed to be used with React
    as both of them are based on unidirectional data flow. The Flux architecture enforces
    unidirectional data flow.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Flux**是一种应用程序架构，而不是一个框架。你可以将其视为MVC的替代品。它主要是为了与React一起使用而开发的，因为它们都基于单向数据流。Flux架构强制执行单向数据流。'
- en: 'Here is a diagram that shows all the parts of the Flux architecture and how
    data flows in it:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个显示Flux架构所有部分以及数据如何在其内部流动的图表：
- en: '![Understanding Flux](img/B05154_11_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![理解Flux](img/B05154_11_01.jpg)'
- en: 'Here is how each part works:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何每个部分工作的说明：
- en: '**Actions**: An action is an object that describes what we want to do and the
    data that we need to do it. In Flux, all events and data from all sources are
    converted to actions. Even UI events are converted to actions.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作**: 动作是一个对象，它描述了我们想要执行的操作以及执行这些操作所需的数据。在Flux中，所有来源的所有事件和数据都被转换为动作。甚至UI事件也被转换为动作。'
- en: '**Dispatcher**: The dispatcher is a special type of event system. It is used
    to broadcast actions to registered callbacks. What the dispatcher does is not
    the same as a pub/sub system, as callbacks are not subscribed to particular events.
    Instead, every action is dispatched to every registered callback. An application
    should contain only one dispatcher.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调度器**: 调度器是一种特殊的事件系统。它用于向已注册的回调广播动作。调度器所做的工作与pub/sub系统不同，因为回调没有订阅特定的事件。相反，每个动作都会被发送到每个已注册的回调。应用程序应只包含一个调度器。'
- en: '**Action creators**: Action creators are methods that dispatch actions to the
    dispatcher.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作创建者**: 动作创建者是向调度器分发动作的方法。'
- en: '**Stores**: Stores are objects that store the application data and logic. Stores
    react to actions. Callbacks ping the store to take appropriate action whenever
    an action that the store depends on is dispatched by the dispatcher.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**: 存储是存储应用程序数据和逻辑的对象。存储对动作做出反应。回调函数在存储依赖的动作由调度器分发时，向存储发送回调以采取适当的行动。'
- en: '**React views**: React views are the React components that can retrieve data
    from stores and display as well as listen to events emitted from stores whenever
    there is a change in the data stored by them. Note that the events emitted by
    stores are not converted into actions.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React视图**: React视图是可以从存储中检索数据并显示以及监听存储在数据变化时发出的事件的React组件。请注意，存储发出的事件不会被转换为动作。'
- en: So, in Flux, all the events and data from different sources are dispatched to
    the dispatcher as actions, then the stores update themselves whenever the dispatcher
    dispatches actions, and finally, views get updated whenever stores update.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在Flux中，来自不同来源的所有事件和数据都被作为动作发送到调度器，然后存储在调度器分发动作时自行更新，最后，视图在存储更新时也会更新。
- en: 'Here is an another diagram, which provides a much higher-level abstraction
    of how Flux works:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是另一个图表，它提供了Flux如何工作的更高层次的抽象：
- en: '![Understanding Flux](img/B05154_11_02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![理解Flux](img/B05154_11_02.jpg)'
- en: Here you can see that the data flows in a single direction, that is, data and
    events first go to the **Dispatcher**, then to the **Store**, and finally to the
    **View**. So, we can say that dispatcher, store, and view are the three major
    parts of the Flux architecture.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到数据是单向流动的，也就是说，数据和事件首先流向**调度器**，然后到**存储**，最后到**视图**。因此，我们可以这样说，调度器、存储和视图是Flux架构的三个主要部分。
- en: Just as there are many MVC frameworks, such as Angular, Ember, and Backbone,
    there are many Flux frameworks, such as Fluxible, Reflux, Alt, and Redux. But
    to keep things simple and easier to learn, we will not use any of these frameworks.
    Instead, we will use the Flux.js and MicroEvent.js libraries to implement the
    Flux architecture.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如有许多 MVC 框架，如 Angular、Ember 和 Backbone 一样，有许多 Flux 框架，如 Fluxible、Reflux、Alt
    和 Redux。但为了保持简单和易于学习，我们不会使用这些框架中的任何一个。相反，我们将使用 Flux.js 和 MicroEvent.js 库来实现 Flux
    架构。
- en: Using Flux.js
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Flux.js
- en: The **Flux.js** is a library created by the creators of Flux. It is used to
    build dispatchers. You can find the Flux.js source code at [https://github.com/facebook/flux](https://github.com/facebook/flux)
    and the CDN version at [https://cdnjs.com/libraries/flux](https://cdnjs.com/libraries/flux).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**Flux.js** 是由 Flux 的创建者创建的一个库，用于构建分发器。您可以在 [https://github.com/facebook/flux](https://github.com/facebook/flux)
    找到 Flux.js 的源代码，在 [https://cdnjs.com/libraries/flux](https://cdnjs.com/libraries/flux)
    找到 CDN 版本。'
- en: 'A dispatcher is created using the `Dispatcher` constructor. It has five methods,
    as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Dispatcher` 构造函数创建一个分发器。它有五个方法，如下所示：
- en: '`register(callback)`: This method lets us register a callback. It returns a
    string called the `callback` ID to uniquely identify a callback.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`register(callback)`: 这个方法允许我们注册一个回调。它返回一个称为 `callback` ID 的字符串，以唯一标识一个回调。'
- en: '`unregister(id)`: This is a method lets us unregister a registered callback.
    To unregister, we need to pass the ID of the callback that we want to unregister.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unregister(id)`: 这是一个方法，允许我们注销已注册的回调。要注销，我们需要传递要注销的回调的ID。'
- en: '`waitFor(array)`: This waits for the specified callbacks to be invoked before
    continuing with the execution of the current callback. This method should only
    be used by a callback in response to a dispatched action.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`waitFor(array)`: 这会在继续执行当前回调之前等待指定的回调被调用。此方法应由回调在响应已分发的动作时使用。'
- en: '`dispatch(action)`: This dispatches an action to registered callbacks.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dispatch(action)`: 这会将一个动作分发到已注册的回调。'
- en: '`isDispatching()`: This returns a Boolean indication of whether the dispatcher
    is currently dispatching.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isDispatching()`: 这返回一个布尔值，指示分发器当前是否正在分发。'
- en: We will go through example code while building the RSS feed reader.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在构建 RSS 源阅读器时通过示例代码进行说明。
- en: Using MicroEvent.js
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MicroEvent.js
- en: '**MicroEvent.js** is an event emitter library, which provides the observer
    pattern to JavaScript objects. We need MicroEvent.js for triggering events from
    stores to update views.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**MicroEvent.js** 是一个事件发射库，它为 JavaScript 对象提供了观察者模式。我们需要 MicroEvent.js 来从存储中触发事件以更新视图。'
- en: You can get MicroEvent.js from [http://notes.jetienne.com/2011/03/22/microeventjs.html](http://notes.jetienne.com/2011/03/22/microeventjs.html).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 [http://notes.jetienne.com/2011/03/22/microeventjs.html](http://notes.jetienne.com/2011/03/22/microeventjs.html)
    获取 MicroEvent.js。
- en: To make an object or constructor be able to emit events and others to be able
    to subscribe to it, we need to integrate a `MicroEvent` interface into the object
    or constructor using the `MicroEvent.mixin` method.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要使对象或构造函数能够发射事件，其他人能够订阅它，我们需要使用 `MicroEvent.mixin` 方法将 `MicroEvent` 接口集成到对象或构造函数中。
- en: Now, inside the object or constructor, we can trigger events using `this.trigger()`,
    and others can subscribe to events using the `bind()` method of the object. We
    can also unbind using the `unbind()` method.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在对象或构造函数内部，我们可以使用 `this.trigger()` 触发事件，其他人可以使用对象的 `bind()` 方法订阅事件。我们还可以使用
    `unbind()` 方法取消订阅。
- en: We will look at example code while building the RSS feed reader.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在构建 RSS 源阅读器时查看示例代码。
- en: Introduction to React Router
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React Router 简介
- en: The RSS feed reader application we will create is going to be a single-page
    application. In single-page applications, routes are defined on the frontend instead
    of the backend. We need some sort of library that lets us define routes and assign
    components to them, that is, it can keep the UI in sync with the URL.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建的 RSS 源阅读器应用程序将是一个单页应用程序。在单页应用程序中，路由是在前端而不是后端定义的。我们需要某种类型的库来定义路由并将组件分配给它们，即它可以使
    UI 与 URL 保持同步。
- en: '**React Router** is the most popular and recommended routing library for React.
    It provides a simple API with powerful features such as dynamic route matching
    and location transition handling built in.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**React Router** 是 React 最受欢迎和推荐的路由库。它提供了一个简单的 API，内置了强大的功能，如动态路由匹配和位置转换处理。'
- en: You can find the source code of React Router at [https://github.com/reactjs/react-router](https://github.com/reactjs/react-router)
    and the CDN version at [https://cdnjs.com/libraries/react-router](https://cdnjs.com/libraries/react-router).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/reactjs/react-router](https://github.com/reactjs/react-router)
    找到 React Router 的源代码，以及 CDN 版本在 [https://cdnjs.com/libraries/react-router](https://cdnjs.com/libraries/react-router)。
- en: 'Here is a code sample of how to define routes using React Router and assign
    components to them:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用 React Router 定义路由并分配组件的代码示例：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is how the preceding code works:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是前面代码的工作原理：
- en: React Router lets us define routes and their components using React components
    themselves. This makes it easy to write routes.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React Router 允许我们使用 React 组件本身来定义路由及其组件。这使得编写路由变得简单。
- en: A `Route` component is used to define individual routes. The paths of the routes
    are of the same pattern as the paths in Express.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Route` 组件来定义单个路由。路由的路径与 Express 中的路径模式相同。
- en: All the `Route` components are wrapped with the `Router` component and the `Router`
    component is rendered on the page. The `Router` component finds the matching route
    for the current URL and renders the component assigned to the route.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有 `Route` 组件都被 `Router` 组件包裹，并且 `Router` 组件在页面上渲染。`Router` 组件找到与当前 URL 匹配的路由，并渲染分配给该路由的组件。
- en: We assigned the `history` property of the `Router` component to `ReactRouter.browserHistory`,
    which makes `Router` use the HTML5 History API.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将 `Router` 组件的 `history` 属性分配给 `ReactRouter.browserHistory`，这使得 `Router` 使用
    HTML5 历史API。
- en: The `Link` component should be used instead of the `<a>` tag as this component
    prevents full-page reloads and instead just changes the URL and renders the matching
    component.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该使用 `Link` 组件而不是 `<a>` 标签，因为这个组件可以防止整个页面重新加载，而是只更改 URL 并渲染匹配的组件。
- en: Creating the RSS feed reader
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 RSS 源阅读器
- en: The RSS feed reader we will create will let you add feed URLs, view a list of
    added URLs, and view the content of each feed URL. We will be storing the URLs
    in HTML5 local storage.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建的 RSS 源阅读器将允许你添加源 URL、查看添加的 URL 列表以及查看每个源 URL 的内容。我们将存储 URL 在 HTML5 本地存储中。
- en: Setting up the project directories and files
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置项目目录和文件
- en: 'In the exercise files of this chapter, you will find two directories: `Initial`
    and `Final`. `Final` contains the final source code of the application whereas
    `Initial` contains the files to help you quickly get started with building the
    application.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的练习文件中，你会找到两个目录：`Initial` 和 `Final`。`Final` 包含应用程序的最终源代码，而 `Initial` 包含帮助你快速开始构建应用程序的文件。
- en: In the `Initial` directory, you will find `app.js`, `package.json`, and a public
    directory containing files to be served to the frontend. The `app.js` file will
    contain backend code. Currently, `app.js` and `package.json` contain no code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Initial` 目录中，你会找到 `app.js`、`package.json` 以及一个包含要提供给前端文件的公共目录。`app.js` 文件将包含后端代码。目前，`app.js`
    和 `package.json` 中没有代码。
- en: We will put our HTML code in `public/html/index.html`, and in the `public/js/index.js`
    file, we will place our frontend JavaScript code, that is, React code.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 HTML 代码放在 `public/html/index.html` 中，在 `public/js/index.js` 文件中，我们将放置我们的前端
    JavaScript 代码，即 React 代码。
- en: Let's first build the backend, after which we will build the frontend.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先构建后端，然后构建前端。
- en: Building the backend
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建后端
- en: 'First, let''s download the packages required for the backend. Place this code
    in the `package.json` file:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们下载构建后端所需的包。将此代码放在 `package.json` 文件中：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, run `npm install` in the `Initial` directory to download the packages.
    Here, we require the `express`, `request` and `xml2json` npm packages.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `Initial` 目录下运行 `npm install` 以下载所需的包。在这里，我们需要的 npm 包有 `express`、`request`
    和 `xml2json`。
- en: 'Place the following code in the `app.js` file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码放在 `app.js` 文件中：
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is how the preceding code works:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是前面代码的工作原理：
- en: At first, we import the libraries.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们导入库。
- en: Then, we add a middleware program to serve static files.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们添加一个中间件程序来提供静态文件。
- en: We then create a route that takes a URL as a query parameter, fetches the content
    of the URL, and sends it back as a response. We cannot fetch the feeds from the
    frontend because of CROS; therefore, we will fetch it through this route. It also
    converts the XML to JSON, because JSON is easier to work with.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个路由，该路由接受一个 URL 作为查询参数，获取该 URL 的内容，并将其作为响应发送。由于 CROS，我们无法从前端获取源，因此我们将通过此路由获取。它还将
    XML 转换为 JSON，因为 JSON 更容易处理。
- en: Then, for all other paths, we return the `index.html` file.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，对于所有其他路径，我们返回 `index.html` 文件。
- en: Finally, we listen on port number `8080`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们监听端口号`8080`。
- en: Building the frontend
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建前端
- en: In the `public/js` directory, you will find all the libraries that we will be
    using in the frontend. In the `public/css` directory, you will find Bootstrap
    4, which we will use for designing.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在`public/js`目录中，您将找到我们将在前端使用的所有库。在`public/css`目录中，您将找到Bootstrap 4，我们将用它进行设计。
- en: 'Place this code in the `index.html` file to enqueue the JS and CSS files as
    well as creating a container for React components to render:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码放置在`index.html`文件中，以将JS和CSS文件排队，并为React组件渲染创建一个容器：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: At first, we enqueued Bootstrap 4\. Then, we enqueued the React, React Router,
    Flux, and MicroEvent libraries. Finally, we enqueued the `index.js` file, in which
    we will put our application code.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将Bootstrap 4排队。然后，我们将React、React Router、Flux和MicroEvent库排队。最后，我们将`index.js`文件排队，我们将在此文件中放置我们的应用程序代码。
- en: The `appContainer` element is the one inside which all of the UI will be displayed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`appContainer`元素是所有UI将显示在内的元素。'
- en: Defining routes
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义路由
- en: 'Here is the code to define routes for our application. Compile it using Babel
    and place it in the `index.js` file:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是定义我们应用程序路由的代码。使用Babel编译它，并将其放置在`index.js`文件中：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We''ve defined four routes here, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里定义了四个路由，如下所示：
- en: The first route is for the home page. When a user visits the home page, we will
    display a list of feed URLs that the user has added.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个路由是主页。当用户访问主页时，我们将显示用户已添加的源URL列表。
- en: The second route is for displaying the content of a feed.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个路由用于显示源的内容。
- en: The third route is for adding a new feed URL.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三个路由用于添加新的源URL。
- en: Finally, if nothing matches, then the fourth route displays a **not found**
    message.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果没有匹配项，则第四个路由显示一个**未找到**的消息。
- en: Creating dispatcher, actions, and stores
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建分发器、操作和存储
- en: 'Let''s create the dispatcher, a store that lets us manage feed URLs, and the
    `FeedList` component for displaying the feed URLs on the home page. To create
    all these, compile and place the following code in the `index.js` file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建分发器、一个让我们管理源URL的存储以及用于在主页上显示源URL的`FeedList`组件。要创建所有这些，编译并将以下代码放置在`index.js`文件中：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is how the code works:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是代码的工作方式：
- en: First, we create a dispatcher for our app.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们为我们的应用程序创建一个分发器。
- en: Then, we create a store named `FeedStore`, which provides us methods to add
    or retrieve a list of feed URLs. If we try to add an invalid URL, it sends out
    an `invalid-url` event; otherwise, it sends out a `valid-url` event so that we
    can display a message to the user indicating whether the URL was successfully
    added. This store stores and retrieves feed URLs from the HTML5 local storage.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建一个名为`FeedStore`的存储，它为我们提供了添加或检索一组源URL的方法。如果我们尝试添加一个无效的URL，它将发送一个`invalid-url`事件；否则，它将发送一个`valid-url`事件，以便我们可以向用户显示一个消息，指示URL是否成功添加。此存储从HTML5本地存储存储和检索源URL。
- en: Then, we call `MicroEvent.mixin` by passing `FeedStore` as an argument so that
    the store is able to trigger events and others can bind to those events.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们通过传递`FeedStore`作为参数调用`MicroEvent.mixin`，以便存储能够触发事件，其他人可以绑定到这些事件。
- en: 'Then, we create a `Header` component, which will be our application header.
    The `Header` component currently displays only two links: the root path and the
    path to add a new URL.'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建一个`Header`组件，它将是我们的应用程序标题。`Header`组件当前只显示两个链接：根路径和添加新URL的路径。
- en: Finally, we create the `FeedList` component. The `getInitialState` method of
    the component retrieves the list of feed URLs from `FeedStore` and returns them
    to be displayed. Note that we are not using the `<a>` tag while displaying the
    list; instead, we are using the `Link` component. The ID of a feed is its position
    in the array stored in local storage.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们创建`FeedList`组件。组件的`getInitialState`方法从`FeedStore`检索源URL列表，并将它们返回以显示。请注意，我们在显示列表时没有使用`<a>`标签；相反，我们使用了`Link`组件。源ID是它在本地存储中存储的数组中的位置。
- en: 'Now, let''s create the `SubmitFeed` component, which lets us add a new feed
    URL and then displays whether the URL has been added successfully. Here is the
    code for it. Compile and place it in the `index.js` file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建`SubmitFeed`组件，它允许我们添加新的源URL，然后显示URL是否已成功添加。以下是该组件的代码。编译并将其放置在`index.js`文件中：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is how this code works:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是这段代码的工作方式：
- en: The `SubmitFeed` component displays a form with a text field and a button to
    submit it.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SubmitFeed`组件显示一个带有文本字段和提交按钮的表单。'
- en: When a user clicks on the **Submit** button, the `add` handler is invoked. The
    `add` handler dispatches an action with the `add-feed-url` action type and the
    URL to be added as the data.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击 **提交** 按钮时，`add` 处理器被调用。`add` 处理器发送一个带有 `add-feed-url` 动作类型和要添加的 URL 作为数据的动作。
- en: As soon as the component is mounted, we start listening to the `invalid-url`
    and `valid-url` events from `FeedStore`. If a URL is added successfully, we display
    a success message; otherwise, we get a failure message.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组件挂载后，我们立即开始监听来自 `FeedStore` 的 `invalid-url` 和 `valid-url` 事件。如果 URL 添加成功，我们显示成功消息；否则，我们得到失败消息。
- en: And, as soon as the component is unmounted, we stop listening to events from
    `FeedStore`. We should unbind, or we will end up with multiple listeners.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并且，一旦组件卸载，我们就停止监听来自 `FeedStore` 的事件。我们应该解除绑定，否则我们会有多个监听器。
- en: Finally, we register an action callback that checks for the `add-feed-url` action
    type and invokes the `addFeed` method of the `FeedStore` store.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们注册一个动作回调，该回调检查 `add-feed-url` 动作类型，并调用 `FeedStore` 存储库的 `addFeed` 方法。
- en: 'Now, let''s create the `Feed` component, which displays the content of an individual
    feed URL. Here''s the code for it. Compile and place it in the `index.js` file:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建 `Feed` 组件，它显示单个 feed URL 的内容。以下是它的代码。编译并放置在 `index.js` 文件中：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here''s how it works:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的工作原理：
- en: At first, we create `SingleFeedStore`, which has a `get` method that returns
    the content of a feed URL. It uses our server route to fetch the content of the
    URL. Once the content has been fetched, it triggers the `feed-fetched` event with
    that content.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建 `SingleFeedStore`，它有一个 `get` 方法，用于返回 feed URL 的内容。它使用我们的服务器路由来获取 URL
    的内容。一旦内容被获取，它就会触发带有该内容的 `feed-fetched` 事件。
- en: Then, we called `MicroEvent.mixin` by passing `SingleFeedStore` as an argument
    so that the store is able to trigger events and others can bind to those events.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们通过传递 `SingleFeedStore` 作为参数调用 `MicroEvent.mixin`，这样存储库就能够触发事件，其他人也可以绑定到这些事件上。
- en: Then, in the `getInitialState` method of the `Feed` component, we return an
    empty data array, and inside the `componentDidMount` method, we make a request
    to `SingleFeedStore` as the `get` method of `SingleFeedStore` gets the data asynchronously.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在 `Feed` 组件的 `getInitialState` 方法中，我们返回一个空的数据数组，并在 `componentDidMount` 方法中，我们向
    `SingleFeedStore` 发起请求，因为 `SingleFeedStore` 的 `get` 方法是异步获取数据的。
- en: In `componentDidMount`, we bind an event handler for the `feed-fetched` event
    and update the view as soon as the event occurs.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `componentDidMount` 中，我们为 `feed-fetched` 事件绑定一个事件处理器，并在事件发生时立即更新视图。
- en: As usual, we unbind the event handler as soon as the component is unmounted.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如同往常，组件卸载后，我们立即解除事件处理器。
- en: 'Finally, let''s create the `NotFound` component. Here is the code for it. Compile
    and place it in the `index.js` file:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们创建 `NotFound` 组件。以下是它的代码。编译并放置在 `index.js` 文件中：
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Testing the application
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试应用程序
- en: 'We are now done with building the application. To run the webserver, inside
    the `Initial` directory, run `node app.js`. Now, in a browser, open `localhost:8080`.
    You will only be able to see the header as we haven''t added anything yet. Here
    is how it should look:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了应用程序的构建。要在 `Initial` 目录中运行 web 服务器，请运行 `node app.js`。现在，在浏览器中打开 `localhost:8080`。你只能看到标题，因为我们还没有添加任何内容。以下是它应该看起来像什么：
- en: '![Testing the application](img/B05154_11_03.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![测试应用程序](img/B05154_11_03.jpg)'
- en: 'Now, click on the **Add** menu item. You would see a form like this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击 **添加** 菜单项。你会看到一个像这样的表单：
- en: '![Testing the application](img/B05154_11_04.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![测试应用程序](img/B05154_11_04.jpg)'
- en: 'Enter a valid feed URL, such as [http://qnimate.com/feed/](http://qnimate.com/feed/),
    and click on **Submit**. Now, go back to the home page, and you will see this
    output:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 输入一个有效的 feed URL，例如 [http://qnimate.com/feed/](http://qnimate.com/feed/)，然后点击
    **提交**。现在，回到主页，你会看到以下输出：
- en: '![Testing the application](img/B05154_11_05.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![测试应用程序](img/B05154_11_05.jpg)'
- en: 'Now, click on the URL to see the content of the feed. The output will be something
    like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击 URL 以查看 feed 的内容。输出将类似于以下内容：
- en: '![Testing the application](img/B05154_11_06.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![测试应用程序](img/B05154_11_06.jpg)'
- en: Clicking on any of the titles will open the URL in the same tab.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 点击任何标题都会在同一标签页中打开 URL。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to build a single page application using React
    and Flux. We also explored many libraries, such as `xml2json`, `Flux.js`, `MicroEvent.js`,
    and React Router. Afterwards, we built a fully operational RSS feed reader.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 React 和 Flux 构建单页应用程序。我们还探索了许多库，例如 `xml2json`、`Flux.js`、`MicroEvent.js`
    和 React Router。之后，我们构建了一个完全可操作的 RSS 订阅阅读器。
- en: You can now go ahead and add new things to the app, such as real-time feed updates
    and notifications.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以继续向应用中添加新功能，例如实时内容更新和通知。
