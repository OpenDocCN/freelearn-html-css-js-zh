- en: Chapter 2. Running CoffeeScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 运行CoffeeScript
- en: In this chapter, we'll talk about getting CoffeeScript installed and running
    on your development environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何在开发环境中安装和运行CoffeeScript。
- en: CoffeeScript can easily be installed on a Mac, Windows, or Linux. There are
    a variety of ways by which you can get it running, depending on if you just want
    the install to be simple and straightforward or if you want to be on the bleeding
    edge. Before we start on the details though, it's good to know that CoffeeScript
    usually doesn't live on its own, and uses some great JavaScript tools and frameworks
    to do its magic. Let's briefly discuss the typical CoffeeScript stack.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: CoffeeScript可以轻松安装在Mac、Windows或Linux上。根据您希望安装是简单直接还是希望处于前沿状态，有多种方法可以使其运行。在我们开始详细讨论之前，值得知道的是，CoffeeScript通常不是独立存在的，而是使用一些出色的JavaScript工具和框架来实现其功能。让我们简要讨论一下典型的CoffeeScript堆栈。
- en: The CoffeeScript stack
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CoffeeScript堆栈
- en: Early on in CoffeeScript's history, its compiler was written in Ruby. Later
    on, it became self-hosting; the language compiler was written in itself. This
    means that the compiler for CoffeeScript was written in CoffeeScript code which
    could then be compiled to JavaScript, which could then be run to compile CoffeeScript
    again. Confusing, isn't it?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在CoffeeScript的早期历史中，它的编译器是用Ruby编写的。后来，它变成了自托管；语言编译器是用自身编写的。这意味着CoffeeScript的编译器是用CoffeeScript代码编写的，然后可以编译为JavaScript，然后可以运行以再次编译CoffeeScript。令人困惑，不是吗？
- en: Without going any further into what a feat this is, this also means that in
    order to run CoffeeScript, we need to be able to execute JavaScript standalone
    on your computer, without a browser.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 不再深入讨论这是一个多么了不起的壮举，这也意味着为了运行CoffeeScript，我们需要能够在计算机上独立执行JavaScript，而不需要浏览器。
- en: '**Node.js**, or just **Node**, is a JavaScript framework designed for writing
    network-server applications. It''s built using Google''s V8, an engine that can
    run JavaScript without a web browser—a perfect fit for CoffeeScript. It has become
    the preferred way to install CoffeeScript.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js，或者简称为Node，是专为编写网络服务器应用程序而设计的JavaScript框架。它是使用Google的V8构建的，这是一个可以在没有网络浏览器的情况下运行JavaScript的引擎，非常适合CoffeeScript。它已成为安装CoffeeScript的首选方式。
- en: Pairing CoffeeScript with Node.js has a lot of benefits. Not only does this
    mean that you can compile JavaScript that can be run in a browser, but you also
    get a full-fledged JavaScript network application server framework with hundreds
    of useful libraries that have been written for it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 将CoffeeScript与Node.js配对有很多好处。这不仅意味着您可以编译可以在浏览器中运行的JavaScript，而且还可以获得一个功能齐全的JavaScript网络应用程序服务器框架，其中包含了数百个有用的库。
- en: As with JavaScript in Node.js, you can write and execute CoffeeScript on the
    server, use it to write web server applications and even use it as a normal, everyday
    systems scripting language.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与Node.js中的JavaScript一样，您可以在服务器上编写和执行CoffeeScript，使用它来编写Web服务器应用程序，甚至将其用作正常的日常系统脚本语言。
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The core CoffeeScript compiler has no dependencies to Node and can technically
    be executed on any JavaScript environment. However, the coffee command-line utility
    that uses the compiler is a Node.js package.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 核心CoffeeScript编译器不依赖于Node，从技术上讲，它可以在任何JavaScript环境上执行。但是，使用编译器的coffee命令行实用程序是一个Node.js包。
- en: 'The working of the CoffeeScript compiler is shown in the following diagram:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: CoffeeScript编译器的工作如下图所示：
- en: '![The CoffeeScript stack](img/9588OS_02_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![CoffeeScript堆栈](img/9588OS_02_01.jpg)'
- en: Node.js and npm
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js和npm
- en: Node.js has its own package management system, called **npm** . It's used to
    install and manage packages, libraries, and their dependencies that run in the
    Node.js ecosystem. It is also the most common way of installing CoffeeScript,
    which itself is available as an npm package. Thus, it's actually very easy to
    install CoffeeScript after you have set up Node.js and npm.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js有自己的包管理系统，称为npm。它用于安装和管理在Node.js生态系统中运行的包、库及其依赖项。这也是安装CoffeeScript的最常见方式，CoffeeScript本身也作为npm包可用。因此，在设置好Node.js和npm之后，安装CoffeeScript实际上非常容易。
- en: There are different ways of installing Node.js and npm, depending on your Operating
    System and if you need to compile the source or not. Each of the subsequent sections
    will cover the instructions for your OS.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的操作系统以及是否需要编译源代码，有不同的安装Node.js和npm的方法。后续各节将介绍各个操作系统的说明。
- en: Tip
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The Node.js wiki contains a ton of information on installing and running Node
    on a plethora of platforms. If you run into any trouble during this chapter, you
    can look at it, since it has a lot of tips on troubleshooting issues and is updated
    often; the link is [https://github.com/joyent/node/wiki/Installation](https://github.com/joyent/node/wiki/Installation).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js维基包含大量关于在众多平台上安装和运行Node的信息。如果在本章中遇到任何问题，您可以查看它，因为它有很多有关故障排除问题的提示，并经常更新；链接是https://github.com/joyent/node/wiki/Installation。
- en: Node.js, npm, and CoffeeScript on Windows
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows上的Node.js、npm和CoffeeScript
- en: There has been a great drive within the Node.js community for good native Windows
    support and it is very easy to install.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js社区一直在努力提供良好的本地Windows支持，安装非常简单。
- en: 'To do so, first head on over to the Node.js website ([nodejs.org](http://nodejs.org))
    and then click on the **Downloads** button. You''ll see a couple of options available,
    but choose the **Windows Installer** option, which is shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，首先转到Node.js网站（nodejs.org），然后单击“下载”按钮。您将看到几个可用的选项，但选择“Windows安装程序”选项，如下截图所示：
- en: '![Node.js, npm, and CoffeeScript on Windows](img/9588OS_02_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Windows上的Node.js、npm和CoffeeScript](img/9588OS_02_02.jpg)'
- en: 'This will download an `.msi` file. Once you have downloaded it, running the
    install couldn''t be much easier; just accept the terms and click on **Continue**.
    If you see the following screen, then you have successfully installed Node:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载一个`.msi`文件。一旦下载完成，安装就变得非常简单；只需接受条款并单击“继续”。如果您看到以下屏幕，则已成功安装Node：
- en: '![Node.js, npm, and CoffeeScript on Windows](img/9588OS_02_03.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Windows上的Node.js、npm和CoffeeScript](img/9588OS_02_03.jpg)'
- en: 'At this point, you might need to log out of Windows or restart so that changes
    to your `$PATH` variables can take effect. After you have done this, you should
    be able to open the DOS command prompt and run the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你可能需要注销Windows或重新启动，以便更改你的`$PATH`变量生效。完成后，你应该能够打开DOS命令提示符并运行以下命令：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This should spit out a version, which means you''re good to go. Let''s also
    check if npm is working fine. Also in the command-line tool, enter the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会输出一个版本，这意味着你可以开始了。让我们也检查一下npm是否正常工作。同样在命令行工具中，输入以下内容：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see something similar to the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似以下截图的内容：
- en: '![Node.js, npm, and CoffeeScript on Windows](img/9588OS_02_04.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![Windows上的Node.js、npm和CoffeeScript](img/9588OS_02_04.jpg)'
- en: 'Now, in order to go ahead and install CoffeeScript, just enter the following
    command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了继续安装CoffeeScript，只需输入以下命令：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If all went well, you should see something similar to the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应该会看到类似以下截图的内容：
- en: '![Node.js, npm, and CoffeeScript on Windows](img/9588OS_02_05.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![Windows上的Node.js、npm和CoffeeScript](img/9588OS_02_05.jpg)'
- en: 'Here, I used the **-g** flag, which installs the npm package for all users.
    Once you have installed CoffeeScript, we can test it using the **coffee** command,
    as shown here:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我使用了**-g**标志，它为所有用户安装了npm包。一旦你安装了CoffeeScript，我们可以使用**coffee**命令进行测试，如下所示：
- en: '![Node.js, npm, and CoffeeScript on Windows](img/9588OS_02_06.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Windows上的Node.js、npm和CoffeeScript](img/9588OS_02_06.jpg)'
- en: This is the CoffeeScript interpreter, and as you can see, you can use it to
    run CoffeeScript code on the fly. To exit, just use *Ctrl* + *C*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是CoffeeScript解释器，正如你所看到的，你可以使用它来即时运行CoffeeScript代码。要退出，只需使用*Ctrl* + *C*。
- en: And that's it! Installing Node.js on Windows is really quick and easy.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！在Windows上安装Node.js非常快速和简单。
- en: Installing CoffeeScript on a Mac
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Mac上安装CoffeeScript
- en: There are two ways of installing Node.js on a Mac, either by downloading the
    `.pkg` file from the Node.js website and installing it using Apple's installer
    application, or by using the **Homebrew** command-line package manager.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac上安装Node.js有两种方式，一种是从Node.js网站下载`.pkg`文件，然后使用苹果的安装程序应用进行安装，另一种是使用**Homebrew**命令行包管理器。
- en: The easiest way of getting up and running is by just installing the `.pkg` file,
    so let's go over that first. Installing Homebrew might involve more work, but
    it is worth it if you prefer working on the command-line tool and would build
    CoffeeScript from source.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是只安装`.pkg`文件，所以我们先来看看这个。安装Homebrew可能需要更多的工作，但如果你喜欢在命令行工具上工作并且想要从源代码构建CoffeeScript，那么这是值得的。
- en: Using the Apple installer
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用苹果安装程序
- en: 'Head on over to the Node.js website ([nodejs.org](http://nodejs.org)) and then
    click on the **Downloads** button. You''ll see a couple of options available,
    but choose the **Macintosh Installer** option, as shown in the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 前往Node.js网站([nodejs.org](http://nodejs.org))，然后点击**下载**按钮。你会看到一些可用的选项，但选择**Macintosh安装程序**选项，如下截图所示：
- en: '![Using the Apple installer](img/9588OS_02_02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![使用苹果安装程序](img/9588OS_02_02.jpg)'
- en: 'This will download a `.pkg` file. Once you have downloaded it, running the
    install couldn''t be much easier; just choose your destination, accept the license,
    and click **Continue**. You should choose to install it for all users by using
    the **Install for all users of this computer** option, which is shown in the following
    screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载一个`.pkg`文件。一旦你下载了它，运行安装就会变得非常容易；只需选择你的目的地，接受许可证，并点击**继续**。你应该选择使用**为这台计算机的所有用户安装**选项来为所有用户安装它，如下截图所示：
- en: '![Using the Apple installer](img/9588OS_02_07.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![使用苹果安装程序](img/9588OS_02_07.jpg)'
- en: 'If you see the following screen, then you have successfully installed Node:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到以下屏幕，那么你已经成功安装了Node：
- en: '![Using the Apple installer](img/9588OS_02_08.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![使用苹果安装程序](img/9588OS_02_08.jpg)'
- en: You will also have npm installed, which we'll use to install CoffeeScript. Skip
    to the *Installing CoffeeScript with npm* section.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将安装npm，我们将使用它来安装CoffeeScript。跳转到*使用npm安装CoffeeScript*部分。
- en: Using Homebrew
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Homebrew
- en: A lot of developers prefer working on the command-line tool on a Mac, and the
    Homebrew package manager has become quite popular. It aims to let you easily install
    Unix tools that don't come with Mac OS X.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员更喜欢在Mac上使用命令行工具工作，而Homebrew包管理器已经变得非常流行。它旨在让你轻松安装不随Mac OS X捆绑的Unix工具。
- en: If you prefer installing Node.js using Homebrew, you need to have Homebrew on
    your system. You might also need to have XCode command-line tools to build the
    Node.js source code. The Homebrew wiki contains instructions on how to get it
    up and running at [https://github.com/mxcl/homebrew/wiki/installation](https://github.com/mxcl/homebrew/wiki/installation).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢使用Homebrew安装Node.js，你需要在你的系统上安装Homebrew。你可能还需要XCode命令行工具来构建Node.js源代码。Homebrew维基包含了如何在[https://github.com/mxcl/homebrew/wiki/installation](https://github.com/mxcl/homebrew/wiki/installation)上运行它的说明。
- en: 'If you do have Homebrew installed, you can then install Node.js using the **brew**
    command, as shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了Homebrew，你可以使用**brew**命令安装Node.js，如下截图所示：
- en: '![Using Homebrew](img/9588OS_02_09.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![使用Homebrew](img/9588OS_02_09.jpg)'
- en: 'As you can see from the output, Homebrew has not installed npm, without which
    we cannot install CoffeeScript. To install npm, you can just copy and paste the
    following command in the terminal:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看出，Homebrew没有安装npm，没有npm我们无法安装CoffeeScript。要安装npm，你只需在终端中复制并粘贴以下命令：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After npm is installed, you should see something similar to the following screen:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 安装npm后，你应该会看到类似以下屏幕的内容：
- en: '![Using Homebrew](img/9588OS_02_10.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![使用Homebrew](img/9588OS_02_10.jpg)'
- en: Installing CoffeeScript with npm
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用npm安装CoffeeScript
- en: 'Now that we have npm installed, we should be able to install CoffeeScript.
    Just enter the following command in the terminal:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了npm，我们应该能够安装CoffeeScript。只需在终端中输入以下命令：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The **-g** flag lets npm install CoffeeScript globally; once this is done,
    you can now test if CoffeeScript is working by using the **coffee** command, as
    shown in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**-g**标志让npm全局安装CoffeeScript；一旦完成，您现在可以通过使用**coffee**命令来测试CoffeeScript是否正常工作，如下面的屏幕截图所示：'
- en: '![Installing CoffeeScript with npm](img/9588OS_02_11.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![使用npm安装CoffeeScript](img/9588OS_02_11.jpg)'
- en: And that's it! Installing CoffeeScript on a Mac is quite easy.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！在Mac上安装CoffeeScript非常容易。
- en: Installing CoffeeScript on Linux
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux上安装CoffeeScript
- en: The ways of installing Node.js with CoffeeScript on Linux vary depending on
    which distribution you have installed. There are packages for most of the popular
    distros, and if not, you can also try building CoffeeScript from a source, as
    described in the next section.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上安装Node.js与CoffeeScript的方式取决于您安装了哪个发行版。大多数流行的发行版都有软件包，如果没有，您也可以尝试从源代码构建CoffeeScript，如下一节所述。
- en: I only have experience with package managers for Debian-based distros and have
    installed CoffeeScript with Node.js successfully using the **apt-get** package
    manager. However, you should be able to follow the instructions for the other
    distros as described.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我只有使用基于Debian的发行版的软件包管理器的经验，并且已成功使用**apt-get**软件包管理器安装了Node.js和CoffeeScript。但是，您应该能够按照其他发行版的说明进行操作。
- en: There are apt-get packages for Node.js on Ubuntu, MintOS, and Debian, but you
    need to add sources for them before you can install. The instructions for installing
    each of them will be explored in the following sections.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu、MintOS和Debian上有Node.js的apt-get软件包，但您需要在安装之前为它们添加源。安装每个软件包的说明将在以下部分中探讨。
- en: Ubuntu and MintOS
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ubuntu和MintOS
- en: 'Enter the following on the command-line utility (you might need to have sufficient
    permissions to use `sudo`):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行实用程序上输入以下内容（您可能需要有足够的权限来使用`sudo`）：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Debian
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Debian
- en: 'On Debian, you would normally log in to a root terminal to install packages.
    Once logged in, enter the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian上，您通常会登录到root终端以安装软件包。登录后，输入以下命令：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Other distributions
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他发行版
- en: The Node.js wiki page at [https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager)
    contains instructions for installing on a variety of Linux and Unix distributions,
    including Fedora, openSUSE, Arch Linux, and FreeDSB.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js的维基页面[https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager)包含了在各种Linux和Unix发行版上安装的说明，包括Fedora、openSUSE、Arch
    Linux和FreeDSB。
- en: Installing CoffeeScript with npm
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用npm安装CoffeeScript
- en: 'After your package manager has done its thing, you should now have Node.js
    and npm installed. You can verify this by using the npm **-v** command. You can
    now install CoffeeScript using npm by entering the following command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的软件包管理器完成其任务后，您现在应该已经安装了Node.js和npm。您可以使用npm **-v**命令来验证这一点。您现在可以使用npm安装CoffeeScript，方法是输入以下命令：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `-g` flag tells npm to install the package globally.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`-g`标志告诉npm全局安装软件包。'
- en: 'The following screenshot shows how the **-v** command is used to install CoffeeScript:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了如何使用**-v**命令安装CoffeeScript：
- en: '![Installing CoffeeScript with npm](img/9588OS_02_12.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![使用npm安装CoffeeScript](img/9588OS_02_12.jpg)'
- en: And that's it! Installing CoffeeScript on Linux is quite easy.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！在Linux上安装CoffeeScript非常容易。
- en: Building Node.js from source
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码构建Node.js
- en: If you prefer not to use a package manager or installer, or don't have one available
    for your OS, or you would like to get the very latest version of Node.js, then
    you can also build Node.js from its source. Be warned though, this process is
    often fraught with danger, since the source often needs some dependencies on the
    system to build.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想使用软件包管理器或安装程序，或者您的操作系统没有可用的软件包管理器或者您想获取最新版本的Node.js，那么您也可以从源代码构建Node.js。不过要注意，这个过程通常充满了危险，因为源代码通常需要系统上的一些依赖项来构建。
- en: Building on Linux or Unix
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Linux或Unix上构建
- en: 'To build on a Linux or Unix environment, you need to make sure that you have
    the following source dependencies installed:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Linux或Unix环境中构建，您需要确保已安装以下源依赖项：
- en: '**Python–Version 2.6 or Version 2.7**: You can check if you have Python installed
    and also check which version is installed by entering `python --version` in the
    command prompt.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python–Version 2.6或Version 2.7**：您可以通过在命令提示符中输入`python --version`来检查是否已安装Python，并检查安装了哪个版本。'
- en: '**libssl-dev**: This can usually be installed with the built-in package manager.
    It''s already installed on OS X.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**libssl-dev**：这通常可以使用内置软件包管理器安装。它已经安装在OS X上。'
- en: 'I''m going to show you how to build Node.js using its latest source. The source
    is managed using the popular Git version control system and hosted in a repository
    on [github.com](http://github.com). To pull the latest source from your github,
    you''ll need to make sure you have Git installed. By using `apt-get`, you can
    install it as such:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我将向您展示如何使用最新的源代码构建Node.js。该源代码是使用流行的Git版本控制系统进行管理，并托管在[github.com](http://github.com)的存储库中。要从github拉取最新的源代码，您需要确保已安装Git。通过使用`apt-get`，您可以这样安装它：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once you have these prerequisites, you should be able to build the node. Enter
    the following command on the command-line tool:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您具备了这些先决条件，您应该能够构建节点。在命令行工具上输入以下命令：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Phew! If everything went well, you should be able to install CoffeeScript using
    npm:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 哦！如果一切顺利，您应该能够使用npm安装CoffeeScript：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Building on Windows
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows上构建
- en: 'Although it''s possible to build Node.js on Windows, I would highly recommend
    that you just run the installer instead. Out of all the ways of installing that
    I have mentioned in this book, this is the only one I didn''t do myself. This
    example comes straight from the Node wiki ([https://github.com/joyent/node/wiki/Installation](https://github.com/joyent/node/wiki/Installation)).
    Apparently, the build can take a very long time. In the command prompt, enter
    the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在Windows上构建Node.js是可能的，但我强烈建议您只需运行安装程序。在我在本书中提到的所有安装方式中，这是我没有亲自尝试过的唯一一种。这个例子直接来自Node维基（[https://github.com/joyent/node/wiki/Installation](https://github.com/joyent/node/wiki/Installation)）。显然，构建可能需要很长时间。在命令提示符中，输入以下内容：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using CoffeeScript
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CoffeeScript
- en: And there you have it. Having to install Node.js and npm just to get CoffeeScript
    might seem like a lot of effort, but you'll get to experience the power of having
    a wonderful server-side JavaScript framework and good command-line tools to write
    CoffeeScript with.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。为了获得CoffeeScript可能需要安装Node.js和npm，这可能看起来需要很多努力，但您将体验到拥有一个出色的服务器端JavaScript框架和良好的命令行工具来编写CoffeeScript的强大功能。
- en: Now that you have CoffeeScript installed, how do we go about using it? Your
    main entry point into the language is the `coffee` command.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 既然您已经安装了CoffeeScript，我们该如何使用它呢？您进入语言的主要入口点是`coffee`命令。
- en: The coffee command
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: coffee命令
- en: This command-line utility is like a Swiss army knife of CoffeeScript. You can
    use it to run CoffeeScript in an interactive fashion, compile CoffeeScript files
    into JavaScript files, execute `.coffee` files, watch files or directories, and
    compile if any of the files change, as well as a few other useful things. Executing
    the command is easy, just enter `coffee` along with some options and arguments
    for them.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令行实用程序就像CoffeeScript的瑞士军刀一样。您可以使用它以交互方式运行CoffeeScript，将CoffeeScript文件编译为JavaScript文件，执行`.coffee`文件，监视文件或目录，并在文件更改时进行编译，以及其他一些有用的功能。执行该命令很容易，只需输入`coffee`以及一些选项和参数。
- en: 'For help on all the available options, run `coffee` with the **-h** or **--help**
    options. A list of useful options are shown in the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取所有可用选项的帮助，请使用**-h**或**--help**选项运行`coffee`。有关一些有用选项的列表显示在以下截图中：
- en: '![The coffee command](img/9588OS_02_13.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![coffee命令](img/9588OS_02_13.jpg)'
- en: We have already seen the **-v** option, which will print out the current version
    of CoffeeScript.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了**-v**选项，它将打印出CoffeeScript的当前版本。
- en: The REPL
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: REPL
- en: Executing `coffee` with no arguments or the **-i** option will drop you into
    the CoffeeScript **Read Eval Print Loop** (**REPL**). From here, you can type
    in CoffeeScript code that will be executed on the fly and display its output right
    in the console. This is very useful for playing with the language, exploring some
    of the core JavaScript and Node.js libraries, or even pulling in another external
    library or API and being able to explore it interactively.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`coffee`没有参数或使用**-i**选项将使您进入CoffeeScript的**REPL**（**Read Eval Print Loop**）。从这里，您可以输入CoffeeScript代码，它将立即执行并在控制台中显示其输出。这对于玩转语言、探索一些核心JavaScript和Node.js库，甚至引入另一个外部库或API并能够进行交互式探索非常有用。
- en: I urge you to run the coffee REPL and try some of the code examples that we
    discussed in the previous chapter. Notice how the output of each expression is
    displayed after it is entered. The interpreter is also clever enough to handle
    multiline and nested expressions, such as function definitions.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你运行coffee REPL，并尝试我们在上一章中讨论过的一些代码示例。注意每个表达式的输出是在输入后显示的。解释器还足够聪明，可以处理多行和嵌套表达式，比如函数定义。
- en: '![The REPL](img/9588OS_02_14.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![REPL](img/9588OS_02_14.jpg)'
- en: In the previous screenshot, the interpreter is shown handling a function definition.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张截图中，显示了解释器处理函数定义。
- en: Tip
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To exit from the REPL, use *Ctrl* + *D* or *Ctrl* + *C*.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出REPL，使用*Ctrl* + *D*或*Ctrl* + *C*。
- en: Running .coffee files
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行 .coffee 文件
- en: After typing enough code into the REPL, you will come to a point when you will
    want to start storing and organizing your CoffeeScript in source files. CoffeeScript
    files use the `.coffee` extension. You can run a `.coffee` file by passing it
    as an argument to the `coffee` command. The CoffeeScript in the file will be compiled
    to JavaScript and then executed, using Node.js as its environment.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在REPL中输入足够的代码后，您将会想要开始将您的CoffeeScript存储和组织在源文件中。CoffeeScript文件使用`.coffee`扩展名。您可以通过将其作为参数传递给`coffee`命令来运行`.coffee`文件。文件中的CoffeeScript将被编译为JavaScript，然后使用Node.js作为其环境执行。
- en: Tip
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can use any text editor to write your CoffeeScript. A lot of popular editors
    have plugins or have added support for CoffeeScript, with features such as syntax
    highlighting, code completion, or even allowing you to run your code right from
    the editor. There is a comprehensive list of text editors and plugins that support
    CoffeeScript at [https://github.com/jashkenas/coffee-script/wiki/Text-editor-plugins](https://github.com/jashkenas/coffee-script/wiki/Text-editor-plugins).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用任何文本编辑器来编写您的CoffeeScript。许多流行的编辑器都具有插件或已经添加了对CoffeeScript的支持，包括语法高亮、代码补全，甚至允许您直接从编辑器中运行代码。在[https://github.com/jashkenas/coffee-script/wiki/Text-editor-plugins](https://github.com/jashkenas/coffee-script/wiki/Text-editor-plugins)上有一个支持CoffeeScript的文本编辑器和插件的全面列表。
- en: Compiling to JavaScript
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译为JavaScript
- en: To compile a CoffeeScript to JavaScript, we pass the **-c** or **--compile**
    option. It takes either a single argument with a filename or a folder name, or
    multiple files and folder names. If you specify a folder, it will compile all
    the files in that folder. By default, the JavaScript output files will have the
    same name as the source file, so `foo.coffee` will compile to `foo.js`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要将CoffeeScript编译为JavaScript，我们使用**-c**或**--compile**选项。它接受单个带有文件名或文件夹名的参数，或者多个文件和文件夹名。如果指定一个文件夹，它将编译该文件夹中的所有文件。默认情况下，JavaScript输出文件将与源文件具有相同的名称，因此`foo.coffee`将编译为`foo.js`。
- en: If we wanted to control where the outputted JavaScript will be written, then
    we can use the **-o** or **--output** option with a folder name. If you're specifying
    multiple files or folders, then you can also pass the **-j** or **--join** option
    with a filename. This will join the output into a single JavaScript file.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要控制输出的JavaScript将被写入的位置，那么我们可以使用**-o**或**--output**选项加上一个文件夹名称。如果您正在指定多个文件或文件夹，那么您还可以使用**-j**或**--join**选项加上一个文件名。这将把输出合并成一个单独的JavaScript文件。
- en: Watching
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监视
- en: If you're developing a CoffeeScript application, it can become tedious to keep
    running **--compile**. Another useful option is **-w** or **--watch**. This tells
    the CoffeeScript compiler to keep running and watch a certain file or folder for
    any changes to the files. This works well when combined with **--compile**, which
    will compile files every time they change.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在开发一个CoffeeScript应用程序，不断运行**--compile**可能会变得乏味。另一个有用的选项是**-w**或**--watch**。这告诉CoffeeScript编译器保持运行并监视特定文件或文件夹的任何更改。当与**--compile**结合使用时，这将在每次更改时编译文件。
- en: Putting it all together
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将所有内容放在一起
- en: The cool thing about the `coffee` command is that the flags can be combined
    to create a very useful build and development environment. Let's say, I have a
    bunch of CoffeeScript files in a source folder that I want to compile to a single
    `output.js` file in the `js` folder every time a file changes.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`coffee`命令的一个很酷的地方是，标志可以组合在一起，创建一个非常有用的构建和开发环境。假设我有一堆CoffeeScript文件在一个源文件夹中，我想要在每次文件更改时将它们编译成`js`文件夹中的一个名为`output.js`的单个文件。'
- en: 'You should be able to use something similar to the following command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够使用类似以下命令：
- en: '[PRE12]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This will watch for any changes to the `.coffee` files in the source folder
    and compile and join them into a single file called **output.js** inside the **js**
    folder, as shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这将监视源文件夹中`.coffee`文件的任何更改，并将它们编译并合并成一个名为**output.js**的单个文件，放在**js**文件夹中，如下面的屏幕截图所示：
- en: '![Putting it all together](img/9588OS_02_15.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![将所有内容放在一起](img/9588OS_02_15.jpg)'
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have hopefully learned how to get CoffeeScript running
    on the development environment of your choice. You have also learned how to use
    the `coffee` command to run and compile CoffeeScript. Now that you have the tools,
    we'll move to writing some code and get to know CoffeeScript "in the wild", so
    to speak. Let's start from where JavaScript started, and look at programming CoffeeScript
    in the browser.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，您已经希望学会了如何在您选择的开发环境中运行CoffeeScript。您还学会了如何使用`coffee`命令来运行和编译CoffeeScript。现在您已经掌握了工具，我们将开始编写一些代码，并了解CoffeeScript的实际应用。让我们从JavaScript开始的地方开始，看看如何在浏览器中编写CoffeeScript。
