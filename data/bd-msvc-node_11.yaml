- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Caching and Asynchronous Messaging in Microservices
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务中的缓存和异步消息
- en: When working with microservices architecture and Node.js, you need to master
    caching and asynchronous messaging to build the next generation of successful
    applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用微服务架构和Node.js时，你需要掌握缓存和异步消息，以构建下一代成功的应用程序。
- en: We’ll start this chapter by understanding better how to work with caching and
    asynchronous messaging in microservices with Node.js. Caching and asynchronous
    messaging are two important techniques used in microservices architecture to improve
    performance, scalability, and decoupling. Caching involves storing frequently
    accessed data in a cache to improve response times and reduce the load on the
    underlying data sources. Asynchronous messaging enables loose coupling and scalability
    in microservices by decoupling services through message queues or publish-subscribe
    patterns.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始，更好地了解如何在Node.js中处理微服务中的缓存和异步消息。缓存和异步消息是微服务架构中用于提高性能、可扩展性和解耦的两个重要技术。缓存涉及将频繁访问的数据存储在缓存中，以提高响应时间并减少底层数据源的负载。异步消息通过消息队列或发布-订阅模式解耦服务，从而在微服务中实现松耦合和可扩展性。
- en: By the end of this chapter, you will have learned how to work with caching and
    asynchronous messaging in Node.js.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会如何在Node.js中处理缓存和异步消息。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Client-side caching and edge caching
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端缓存和边缘缓存
- en: Microservice-level caching and database query caching
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务级别缓存和数据库查询缓存
- en: Message queues and publish-subscribe
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息队列和发布-订阅
- en: Event-driven architecture
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件驱动架构
- en: Client-side caching and edge caching
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端缓存和边缘缓存
- en: In this section, we’re going to show you how to work with client-side caching
    and edge caching. Client-side caching and edge caching are strategies used to
    improve performance and reduce the load on servers by storing and serving content
    closer to the user.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您展示如何处理客户端缓存和边缘缓存。客户端缓存和边缘缓存是用于通过在用户附近存储和提供内容来提高性能和减少服务器负载的策略。
- en: Client-side caching
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端缓存
- en: '**Client-side caching** involves storing resources (e.g., HTML pages, stylesheets,
    scripts, images) on the client device (such as a web browser) to avoid repeated
    requests to the server.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**客户端缓存**涉及在客户端设备（如网页浏览器）上存储资源（例如，HTML页面、样式表、脚本、图像），以避免重复向服务器发送请求。'
- en: 'Here are some of its advantages:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些它的优点：
- en: Client-side caching reduces server load by serving cached content directly from
    the client. This means that client-side caching can improve the performance and
    efficiency of both the web server and the web browser. By serving cached content
    directly from the client, the web server does not have to process and send the
    same data repeatedly to the same or different users. This reduces the server load,
    meaning the amount of work or requests that the server has to handle at any given
    time.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端缓存通过直接从客户端提供缓存内容来减少服务器负载。这意味着客户端缓存可以提高Web服务器和Web浏览器的性能和效率。通过直接从客户端提供缓存内容，Web服务器无需重复处理和发送相同的数据给相同或不同的用户。这减少了服务器负载，意味着服务器在任何给定时间内需要处理的工作或请求量减少。
- en: It improves page load times for subsequent visits. This means that client-side
    caching can enhance the user experience by making the web pages load faster when
    the user visits them again. By storing a copy of a web page in the browser memory,
    the browser does not have to request and download the same web page again from
    the server.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提高了后续访问的页面加载时间。这意味着客户端缓存可以通过在用户再次访问时使网页加载更快来增强用户体验。通过在浏览器内存中存储网页的副本，浏览器无需再次从服务器请求和下载相同的网页。
- en: It enhances user experience by minimizing network requests. This means that
    client-side caching can reduce the number and size of network requests that the
    browser has to make to the server. Network requests are the messages that the
    browser and the server exchange to communicate and transfer data. Network requests
    can take time and consume bandwidth, depending on the distance, speed, and quality
    of the connection. By minimizing network requests, client-side caching can save
    time and bandwidth as well as avoid potential errors or delays that might occur
    during communication.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过最小化网络请求来提升用户体验。这意味着客户端缓存可以减少浏览器需要发送到服务器的网络请求的数量和大小。网络请求是浏览器和服务器之间交换的消息，用于通信和传输数据。网络请求可能需要时间并消耗带宽，这取决于连接的距离、速度和质量。通过最小化网络请求，客户端缓存可以节省时间和带宽，以及避免在通信过程中可能发生的潜在错误或延迟。
- en: An API contract outlines the rules and specifications for how services should
    interact. In the context of client-side caching, an API contract can outline the
    rules and specifications for how services should interact with the cached data
    stored on the client’s device, such as the browser.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 合同概述了服务之间应该如何交互的规则和规范。在客户端缓存的上下文中，API 合同可以概述服务应该如何与存储在客户端设备上的缓存数据（如浏览器）交互的规则和规范。
- en: The caching behavior is controlled by HTTP headers, such as **Cache-Control**
    and **Expires**. This means that client-side caching can be configured and customized
    by using certain HTTP headers that specify for how long and under what conditions
    the data can be cached. HTTP headers are the metadata that accompany the HTTP
    requests and responses between the client and the server.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存行为由 HTTP 头部控制，例如 **Cache-Control** 和 **Expires**。这意味着可以通过使用某些 HTTP 头部来配置和自定义客户端缓存，这些头部指定了数据可以缓存多长时间以及在什么条件下可以缓存。HTTP
    头部是伴随客户端和服务器之间 HTTP 请求和响应的元数据。
- en: '*Figure 11**.1* illustrates client-side caching:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11.1* 展示了客户端缓存：'
- en: '![Figure 11.1: Client-side caching](img/B14980_11_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1：客户端缓存](img/B14980_11_01.jpg)'
- en: 'Figure 11.1: Client-side caching'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1：客户端缓存
- en: We have learned the basics of client-side caching; now, let’s move on to edge
    caching.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了客户端缓存的基础知识；现在，让我们继续学习边缘缓存。
- en: Edge caching
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 边缘缓存
- en: '**Edge caching**, or **content delivery network** (**CDN**) caching, involves
    caching content on servers strategically positioned at the edge of the network
    (closer to users) to reduce latency and improve content delivery speed.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**边缘缓存**，或称为**内容分发网络**（**CDN**）缓存，涉及在网络的边缘（更靠近用户）的战略位置的服务器上缓存内容，以减少延迟并提高内容交付速度。'
- en: 'Here are some of its advantages:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列举了一些它的优点：
- en: Edge caching minimizes latency by serving content from servers closer to the
    user. This means that edge caching can reduce the time it takes for the data to
    travel from the server to the user. **Latency** is the delay or lag that occurs
    when data is transferred over a network. Latency can affect the performance and
    user experience of web applications, especially for dynamic or interactive content.
    By serving content from servers closer to the user, edge caching can minimize
    latency and improve the speed and responsiveness of web applications.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边缘缓存通过从更靠近用户的服务器提供内容来最小化延迟。这意味着边缘缓存可以减少数据从服务器传输到用户所需的时间。**延迟**是在数据通过网络传输时发生的延迟或滞后。延迟可能会影响
    Web 应用程序的性能和用户体验，尤其是对于动态或交互式内容。通过从更靠近用户的服务器提供内容，边缘缓存可以最小化延迟并提高 Web 应用程序的速度和响应性。
- en: It distributes content globally, reducing the load on the origin server. This
    means that edge caching can improve the scalability and reliability of the web
    application by spreading the data across multiple servers around the world. This
    reduces the load on the origin server, meaning the main server that hosts the
    original data and application logic.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在全球范围内分发内容，减轻了源服务器的负载。这意味着边缘缓存可以通过在全球多个服务器之间分散数据来提高 Web 应用程序的扩展性和可靠性。这减少了源服务器的负载，即托管原始数据和应用程序逻辑的主要服务器。
- en: It enhances scalability and reliability. This means that edge caching can improve
    the ability of the web application to handle more traffic and requests without
    compromising the quality and availability of the service. By distributing the
    data across multiple servers around the world, edge caching can reduce the dependency
    and load on the central server, which might have limited resources and capacity.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它增强了可伸缩性和可靠性。这意味着边缘缓存可以提高Web应用程序处理更多流量和请求的能力，而不会损害服务的质量和可用性。通过在全球多个服务器之间分配数据，边缘缓存可以减少对中央服务器的依赖和负载，该服务器可能资源有限且容量有限。
- en: CDN providers deploy servers worldwide, and content is cached on these servers
    for quick retrieval. This means that edge caching is often implemented by using
    a CDN, which is a network of servers distributed across the globe that can store
    and deliver data to users. A CDN provider is a company that offers CDN services
    to web applications and websites. By using a CDN provider, web applications and
    websites can cache their data on the CDN servers, which are closer to the users
    than the original server. This way, when a user requests the data, it can be retrieved
    quickly from the CDN server, rather than from the original server.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CDN提供商在全球部署服务器，并将内容缓存在这些服务器上以快速检索。这意味着边缘缓存通常是通过使用CDN实现的，CDN是一个分布在全球的服务器网络，可以存储和向用户交付数据。CDN提供商是一家向Web应用程序和网站提供CDN服务的公司。通过使用CDN提供商，Web应用程序和网站可以在比原始服务器更靠近用户的位置的CDN服务器上缓存其数据。这样，当用户请求数据时，它可以从CDN服务器快速检索，而不是从原始服务器检索。
- en: Remember, it is important to apply the caching strategies while working with
    microservices.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在处理微服务时应用缓存策略是很重要的。
- en: In summary, client-side caching and edge caching are powerful techniques for
    optimizing web performance, reducing server loads, and enhancing the overall user
    experience. Understanding cache control headers, cache invalidation strategies,
    and leveraging CDNs is crucial for effective implementation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，客户端缓存和边缘缓存是优化Web性能、减少服务器负载和增强整体用户体验的强大技术。理解缓存控制头、缓存失效策略并利用CDN对于有效实施至关重要。
- en: With the understanding of these concepts, let’s now move on to microservice-level
    caching and database query caching.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在理解了这些概念之后，我们现在转向微服务级缓存和数据库查询缓存。
- en: Microservice-level caching and database query caching
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务级缓存和数据库查询缓存
- en: Microservice-level aching and database query caching are strategies employed
    to enhance the performance and scalability of microservices by reducing the need
    for repeated computations and database queries.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务级缓存和数据库查询缓存是采用的战略，通过减少重复计算和数据库查询的需求来提高微服务的性能和可伸缩性。
- en: Microservice-level caching
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务级缓存
- en: '**Microservice-level caching** involves storing and retrieving frequently accessed
    data within individual microservices to avoid redundant computations or external
    calls. Each microservice maintains its own cache, and caching decisions are made
    within the microservice boundaries.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**微服务级缓存**涉及在单个微服务内部存储和检索频繁访问的数据，以避免冗余计算或外部调用。每个微服务维护自己的缓存，并且缓存决策在微服务边界内进行。'
- en: 'Caching can allow microservices to improve fault tolerance, which is the ability
    of a system to continue functioning despite failures or errors. Caching can act
    as a buffer during temporary service outages or network issues, which can affect
    the availability and performance of microservices. Caching can help microservices
    to do the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存可以使微服务提高容错性，即系统在出现故障或错误的情况下继续运行的能力。缓存可以作为临时服务中断或网络问题期间的缓冲，这些问题可能影响微服务的可用性和性能。缓存可以帮助微服务做到以下几方面：
- en: It can reduce the dependency on external services or databases that might be
    slow, unreliable, or unavailable due to network problems or maintenance. By storing
    the data in a cache, microservices can avoid making unnecessary or repeated requests
    to the original data source and instead serve the data from the cache.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以减少对外部服务或数据库的依赖，这些服务或数据库可能因为网络问题或维护而缓慢、不可靠或不可用。通过在缓存中存储数据，微服务可以避免对原始数据源进行不必要的或重复的请求，而是从缓存中提供数据。
- en: It can handle spikes in traffic or demand that might overload the system or
    cause bottlenecks. By storing the data in a cache, microservices can reduce the
    load on the system and improve the response time and throughput of the system.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以处理可能使系统过载或造成瓶颈的流量或需求峰值。通过在缓存中存储数据，微服务可以减轻系统负载，并提高系统的响应时间和吞吐量。
- en: It can recover from failures or errors that might cause data loss or corruption.
    By storing the data in a cache, microservices can preserve the data and restore
    it from the cache if the original data source is compromised or damaged.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以从可能导致数据丢失或损坏的故障或错误中恢复。通过在缓存中存储数据，微服务可以保留数据，并在原始数据源受损或损坏时从缓存中恢复数据。
- en: 'Here are some of its use cases:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些它的用例：
- en: Caching results of computationally expensive operations.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存计算密集型操作的结果。
- en: Storing frequently accessed static data.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储频繁访问的静态数据。
- en: Reducing the load on downstream microservices or databases.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减轻下游微服务或数据库的负载。
- en: 'Here are some key considerations for microservice-level caching:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是微服务级别缓存的一些关键考虑因素：
- en: '**Granularity**: Determine the appropriate granularity for caching whether
    it’s at the level of individual API endpoints, specific operations, or entire
    datasets.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**粒度**: 确定缓存适当的粒度，无论是单个API端点、特定操作还是整个数据集。'
- en: '**Cache invalidation**: Implement strategies to invalidate or update the cache
    when underlying data changes to ensure consistency.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存失效**: 实施策略，在底层数据发生变化时使缓存失效或更新，以确保一致性。'
- en: '**Cache eviction**: Define policies for removing stale or less frequently used
    items from the cache to manage memory efficiently.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存淘汰**: 定义策略，从缓存中删除过时或使用频率较低的项，以有效地管理内存。'
- en: '**Time-to-live** (**TTL**): Set time-to-live values for cached items to control
    how long they are considered valid.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生存时间**（**TTL**）：为缓存项设置生存时间值，以控制它们被认为是有效的时间。'
- en: 'Here are the benefits of microservice-level caching:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是微服务级别缓存的好处：
- en: '**Improved performance**: It reduces response times by serving cached data
    locally without making redundant calls to downstream services or databases.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能提升**: 通过在本地提供缓存数据而不对下游服务或数据库进行冗余调用，它减少了响应时间。'
- en: '**Increased scalability**: It reduces the load on backend services, enhancing
    overall system scalability.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性提升**: 它减少了后端服务的负载，增强了整体系统的可扩展性。'
- en: '**Resilience**: It provides a level of resilience by allowing microservices
    to continue functioning even when downstream services are temporarily unavailable.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性**: 它通过允许微服务在下游服务暂时不可用的情况下继续运行，提供了一定程度的弹性。'
- en: In this section, we have learned some of the concepts, use cases, and key considerations
    of microservice-level caching.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了微服务级别缓存的一些概念、用例和关键考虑因素。
- en: With these concepts learned, we can continue with database query caching.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 学习了这些概念后，我们可以继续学习数据库查询缓存。
- en: Database query caching
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库查询缓存
- en: '**Database query caching** is a technique that stores the results of frequently
    executed queries in a temporary memory, called a cache, for faster access. When
    a query is requested, the database first checks whether the query result is already
    in the cache. If it is, the database returns the cached result without having
    to execute the query again. Database query caching can improve the performance
    and efficiency of the database by reducing the workload and response time of the
    database.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据库查询缓存**是一种技术，它将频繁执行的查询结果存储在临时内存中，称为缓存，以便更快地访问。当请求查询时，数据库首先检查查询结果是否已经在缓存中。如果是，数据库将返回缓存的查询结果，而无需再次执行查询。数据库查询缓存可以通过减少数据库的工作量和响应时间来提高数据库的性能和效率。'
- en: 'Here are some of its use cases:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是它的一些用例：
- en: Caching the results of read-heavy queries.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存读取密集型查询的结果。
- en: Avoiding redundant database access for static or slowly changing data.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免对静态或缓慢变化的数据进行冗余数据库访问。
- en: Offloading the database by serving cached results for common queries.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过为常见查询提供缓存结果来减轻数据库的负担。
- en: 'Here are some key considerations for database query caching:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是数据库查询缓存的一些关键考虑因素：
- en: '**Query identifiers**: Use unique identifiers for queries to manage and reference
    cached results effectively.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询标识符**: 使用唯一的标识符来管理和引用缓存结果，以有效地管理。'
- en: '**Cache invalidation**: Implement strategies to invalidate the cache when underlying
    data changes to maintain data consistency.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存失效**: 实施策略，在底层数据发生变化时使缓存失效，以保持数据一致性。'
- en: '**Query complexity**: Consider the complexity and cost of queries when deciding
    which ones to cache.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询复杂性**：在决定要缓存哪些查询时，考虑查询的复杂性和成本。'
- en: 'Here are the benefits of database query caching:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是数据库查询缓存的优点：
- en: '**Reduced database load**: Caching query results reduces the need for repeated,
    resource-intensive database access.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少数据库负载**：缓存查询结果减少了重复、资源密集型数据库访问的需求。'
- en: '**Lower latency**: It improves response times by serving cached results instead
    of re-executing queries against the database.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低延迟**：通过提供缓存结果而不是重新执行数据库查询来提高响应时间。'
- en: '**Improved scalability**: It enhances the scalability of the overall system
    by reducing the load on the database.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高可扩展性**：通过减少对数据库的负载来增强整个系统的可扩展性。'
- en: In summary, microservice-level caching and database query caching are essential
    techniques for optimizing microservices architectures. By strategically caching
    data at both the microservice and database layers, organizations can achieve improved
    performance, scalability, and responsiveness in their distributed systems.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，微服务级别的缓存和数据库查询缓存是优化微服务架构的关键技术。通过在微服务和数据库层战略性地缓存数据，组织可以在其分布式系统中实现更好的性能、可扩展性和响应性。
- en: Now, we can continue to the next section, in which we will talk about message
    queues and publish-subscribe.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续到下一节，我们将讨论消息队列和发布/订阅。
- en: Message queues and publish-subscribe
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息队列和发布/订阅
- en: Message queues and publish-subscribe (Pub/Sub) are communication patterns commonly
    used in microservices architectures to facilitate asynchronous communication between
    services.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 消息队列和发布/订阅（Pub/Sub）是微服务架构中常用的通信模式，用于促进服务之间的异步通信。
- en: Message queues
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息队列
- en: A **message queue** is a communication mechanism that allows microservices to
    send and receive messages asynchronously. Messages are placed in a queue by the
    sender and processed by the receiver.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**消息队列**是一种通信机制，允许微服务异步发送和接收消息。消息由发送者放入队列，并由接收者处理。'
- en: 'Here are some of its use cases:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些它的用例：
- en: '**Task distribution**: A web application that processes user-uploaded files.
    Each file processing task is placed in a message queue, and multiple worker processes
    consume tasks from the queue to handle file processing concurrently.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务分配**：一个处理用户上传文件的Web应用程序。每个文件处理任务被放置在消息队列中，多个工作进程从队列中消费任务以并发处理文件。'
- en: '**Event sourcing**: A system that maintains a log of events to capture changes
    in state. Events are published to a message queue, and various microservices subscribe
    to these events to update their own state.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件源**：一个维护事件日志以捕获状态变化变化的系统。事件被发布到消息队列，各种微服务订阅这些事件以更新它们自己的状态。'
- en: '**Microservices communication**: A system with multiple microservices where
    one microservice generates an event (e.g., user registration) and publishes it
    to a message queue. Other microservices interested in this event can subscribe
    to the queue to perform related actions.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务通信**：一个具有多个微服务的系统，其中一个微服务生成一个事件（例如，用户注册）并将其发布到消息队列。其他对此事件感兴趣的微服务可以订阅队列以执行相关操作。'
- en: '**Load leveling**: A system with a peak load of requests. Instead of overwhelming
    a service, incoming requests are placed in a message queue. Workers consume requests
    from the queue, allowing the system to handle peaks more gracefully.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡**：一个具有峰值请求的系统。而不是压倒服务，传入的请求被放置在消息队列中。工作者从队列中消费请求，使系统能够更优雅地处理峰值。'
- en: '**Scalability**: A system where certain components have varying processing
    loads. By using a message queue, these components can scale independently based
    on their own demand, ensuring efficient resource utilization.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：一个某些组件具有不同处理负载的系统。通过使用消息队列，这些组件可以根据自己的需求独立扩展，确保资源利用效率。'
- en: '**Background processing**: An e-commerce platform that sends order confirmation
    emails. Instead of sending emails synchronously during the checkout process, the
    system places email tasks in a message queue, and a separate service process and
    sends the emails.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后台处理**：一个发送订单确认电子邮件的电子商务平台。而不是在结账过程中同步发送电子邮件，系统将电子邮件任务放置在消息队列中，并由一个独立的服务进程发送电子邮件。'
- en: '**Cross-application integration**: A company using multiple software applications
    (e.g., CRM, ERP). Integrating these applications can be achieved by placing messages
    in a queue when specific events occur in one application, triggering actions in
    another application.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨应用集成**：使用多个软件应用（例如，CRM、ERP）的公司。通过在某个应用发生特定事件时将消息放入队列，触发另一个应用中的操作来实现这些应用的集成。'
- en: '**Workflow orchestration**: An order processing system where each step (e.g.,
    order validation, payment processing, shipping) is a separate task. Each step
    publishes a message to a queue upon completion, triggering the next step in the
    workflow.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作流编排**：一个订单处理系统，其中每个步骤（例如，订单验证、支付处理、发货）都是一个单独的任务。每个步骤在完成时向队列发布一个消息，触发工作流中的下一个步骤。'
- en: '**Delayed or scheduled tasks**: A system that allows users to schedule emails
    to be sent at a later time. The email content and recipient details are placed
    in a message queue with a scheduled delivery time.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟或计划任务**：一个允许用户安排在以后时间发送电子邮件的系统。电子邮件内容和收件人详细信息被放置在具有计划交付时间的消息队列中。'
- en: '**Log and event aggregation**: Distributed applications generate logs and events.
    Instead of relying on individual logs, events are sent to a message queue and
    a centralized logging service consumes and aggregates them for analysis.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志和事件聚合**：分布式应用生成日志和事件。而不是依赖于单个日志，事件被发送到消息队列，一个集中的日志服务消费并聚合它们以进行分析。'
- en: 'The following are some of its key components:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是其关键组件：
- en: '**Queue**: A storage mechanism where messages are temporarily held until they
    are consumed by a service.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**队列**：一种存储机制，其中消息被临时存储，直到被服务消费。'
- en: '**Producer**: A microservice responsible for sending messages to the queue.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产者**：负责向队列发送消息的微服务。'
- en: '**Consumer**: A microservice that retrieves and processes messages from the
    queue.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费者**：从队列中检索和处理消息的微服务。'
- en: 'Here are some of its advantages:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是其一些优点：
- en: '**Decoupling**: It allows services to be decoupled, as the sender and receiver
    are not directly dependent on each other.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解耦**：它允许服务解耦，因为发送者和接收者不是直接相互依赖的。'
- en: '**Asynchronous processing**: It enables asynchronous communication, which can
    improve system responsiveness and scalability.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步处理**：它实现了异步通信，可以提高系统响应性和可扩展性。'
- en: '**Load balancing**: It distributes the processing load by allowing multiple
    instances of a service to consume messages from the queue.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡**：通过允许服务的多个实例从队列中消费消息来分配处理负载。'
- en: '*Figure 11**.2* illustrates message queues:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*图11.2*展示了消息队列：'
- en: '![Figure 11.2: Message queues](img/B14980_11_02.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图11.2：消息队列](img/B14980_11_02.jpg)'
- en: 'Figure 11.2: Message queues'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2：消息队列
- en: Having these concepts in mind can help create a better architecture for message
    queues.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些概念在心中，可以帮助创建更好的消息队列架构。
- en: We can continue now with publish-subscribe.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以继续讨论发布-订阅。
- en: Publish-subscribe (Pub/Sub)
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布-订阅（Pub/Sub）
- en: '**Pub/Sub** is a messaging pattern where a microservice (the publisher) broadcasts
    messages to multiple subscribers. Subscribers express interest in certain types
    of messages and receive relevant notifications.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**发布/订阅**是一种消息模式，其中微服务（发布者）向多个订阅者广播消息。订阅者表达对某些类型消息的兴趣，并接收相关通知。'
- en: 'Here are some of its use cases:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是其一些用例：
- en: '**Real-time updates**: A social media platform notifying users about new posts,
    comments, or likes in real-time.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时更新**：社交媒体平台实时通知用户关于新帖子、评论或赞。'
- en: '**Event notification**: A payment gateway notifying multiple services about
    a successful payment transaction.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件通知**：支付网关通知多个服务关于成功的支付交易。'
- en: '**Distributed systems coordination**: A microservices architecture where changes
    in user authentication trigger updates in various services, such as user profiles,
    permissions, and analytics.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式系统协调**：一个微服务架构，其中用户身份验证的变化会触发各种服务（如用户资料、权限和数据分析）的更新。'
- en: '**Cross-cutting concerns**: Publishing events related to system logs, errors,
    or performance metrics, allowing multiple services to subscribe and react accordingly.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**横切关注点**：发布与系统日志、错误或性能指标相关的事件，允许多个服务订阅并相应地做出反应。'
- en: '**Workflow orchestration**: The orchestration of a series of tasks or processes.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作流编排**：一系列任务或过程的编排。'
- en: '**Cross-application integration**: An ecosystem of applications (CRM, ERP,
    Analytics) where changes in one application trigger actions in others, ensuring
    data consistency.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨应用集成**：一个应用程序生态系统（CRM、ERP、分析）中，一个应用程序的变化会触发其他应用程序中的操作，确保数据一致性。'
- en: '**IoT device communication**: Smart home devices publishing events related
    to status changes (e.g., temperature, motion detection) and multiple applications
    subscribing to these events for automation or monitoring'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物联网设备通信**：智能家居设备发布与状态变化相关的事件（例如，温度、运动检测），以及多个应用程序订阅这些事件以实现自动化或监控。'
- en: '**User notifications**: A messaging application publishing events for new messages,
    and different clients (web, mobile, desktop) subscribing to receive real-time
    notifications.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户通知**：一个消息应用发布新消息的事件，不同的客户端（网页、移动、桌面）订阅以接收实时通知。'
- en: '**Log aggregation and analytics**: Services publishing events related to user
    interactions, and an analytics service subscribing to these events for centralized
    analysis and reporting.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志聚合和分析**：发布与用户交互相关事件的 服务，以及一个分析服务订阅这些事件以进行集中分析和报告。'
- en: '**Multi-tenant systems**: A **software as a service** (**SaaS**) platform where
    different organizations subscribe to events related to their specific data or
    customizations.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多租户系统**：一个**软件即服务**（**SaaS**）平台，其中不同的组织订阅与它们特定数据或定制相关的事件。'
- en: '**Chat applications**: Users subscribing to chat channels or rooms, and messages
    being published to the relevant channels for real-time delivery.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聊天应用**：用户订阅聊天频道或房间，消息被发布到相关频道以实现实时投递。'
- en: '**Dynamic configuration updates**: Services subscribing to configuration change
    events, ensuring that they dynamically adjust their behavior based on changes.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态配置更新**：服务订阅配置更改事件，确保它们根据变化动态调整其行为。'
- en: 'Here are some of its key components:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是它的一些关键组件：
- en: '**Publisher**: A microservice responsible for broadcasting messages to the
    system.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布者**：一个负责向系统广播消息的微服务。'
- en: '**Topic**: Logical channels or categories to which messages are published.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主题**：消息发布的逻辑通道或类别。'
- en: '**Subscriber**: A microservice that expresses interest in specific topics and
    receives relevant messages.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订阅者**：一个表达对特定主题感兴趣并接收相关消息的微服务。'
- en: 'The following are some of its advantages:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是它的一些优势：
- en: '**Scalability**: It is well-suited for scenarios where multiple services need
    to react to the same event or type of information.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：它非常适合需要多个服务对同一事件或信息类型做出反应的场景。'
- en: '**Flexibility**: It allows services to subscribe to specific topics of interest,
    receiving only the messages they need.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：它允许服务订阅特定感兴趣的主题，只接收它们需要的消息。'
- en: '**Event-driven architecture**: It supports the creation of event-driven systems
    where services can react to changes in state.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件驱动架构**：它支持创建事件驱动系统，其中服务可以响应状态的变化。'
- en: You need to learn these concepts fast in order to keep updated with the latest
    patterns in microservices.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要快速学习这些概念，以便跟上微服务领域最新的模式。
- en: In summary, message queues and Pub/Sub patterns are fundamental to building
    resilient, scalable, and loosely coupled microservices architectures. The choice
    between them depends on the specific requirements of the system and the desired
    communication patterns between services.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，消息队列和发布/订阅模式对于构建弹性、可扩展和松散耦合的微服务架构至关重要。它们之间的选择取决于系统的具体要求和服务之间期望的通信模式。
- en: In the next section, we will learn about event-driven architecture.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习关于事件驱动架构的内容。
- en: Event-driven architecture
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件驱动架构
- en: '**Event-driven architecture** (**EDA**) is a design paradigm that emphasizes
    the production, detection, consumption, and reaction to events in a system. In
    the context of microservices, event-driven architecture provides a flexible and
    scalable approach to handle communication and coordination between services.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件驱动架构**（**EDA**）是一种设计范式，强调在一个系统中对事件的产生、检测、消费和反应。在微服务背景下，事件驱动架构提供了一种灵活且可扩展的方法来处理服务之间的通信和协调。'
- en: 'Here is the use case of event-driven architecture:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是事件驱动架构的应用案例：
- en: '**Event sourcing**: Storing changes to the state of an application as a sequence
    of events. This helps in reconstructing the current state and auditing.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件溯源**：将应用程序状态的变化存储为一系列事件。这有助于重建当前状态和审计。'
- en: '**Real-time updates**: Broadcasting real-time updates to multiple services
    or clients in response to certain events.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时更新**：在响应某些事件时，向多个服务或客户端广播实时更新。'
- en: '**Workflow orchestration**: Coordinating the execution of business processes
    across multiple microservices.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作流编排**：协调多个微服务之间的业务流程执行。'
- en: '**Log and monitoring events**: Capturing events related to system logs, errors,
    or performance metrics for monitoring purposes.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志和监控事件**：捕获与系统日志、错误或性能指标相关的事件，用于监控目的。'
- en: 'The following are its key concepts:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为其关键概念：
- en: '**Events**: Events represent occurrences or state changes in a system. Examples
    include user actions, system alerts, or changes in data.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件**：事件代表系统中的发生或状态变化。例如包括用户操作、系统警报或数据变化。'
- en: '**Event producer**: Microservices that generate and emit events are known as
    event producers. They publish events to a message broker or event bus.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件产生者**：生成和发出事件的微服务被称为事件产生者。它们将事件发布到消息代理或事件总线。'
- en: '**Event consumer**: Microservices that subscribe to and process events are
    event consumers. They react to events based on predefined logic.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件消费者**：订阅并处理事件的微服务是事件消费者。它们根据预定义逻辑对事件做出反应。'
- en: '**Event bus or message broker**: This acts as a communication channel that
    facilitates the distribution of events from producers to consumers.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件总线或消息代理**：这充当一个通信渠道，促进事件从生产者到消费者的分发。'
- en: 'The following are the advantages of event-driven architecture:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为事件驱动架构的优势：
- en: '**Decoupling**: Microservices become loosely coupled as they communicate through
    events. This reduces dependencies between services.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解耦**：微服务通过事件进行通信，因此变得松散耦合。这减少了服务之间的依赖性。'
- en: '**Scalability**: It allows for easy scalability, as services can be added or
    removed without affecting the entire system.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可伸缩性**：它允许轻松扩展，因为可以在不影响整个系统的情况下添加或删除服务。'
- en: '**Flexibility**: It supports flexibility in system design, as services can
    be added or modified independently.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：它支持系统设计的灵活性，因为服务可以独立添加或修改。'
- en: '**Asynchronicity**: It enables asynchronous communication between services,
    promoting responsiveness and agility.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步性**：它使服务之间能够进行异步通信，促进响应性和敏捷性。'
- en: 'Here is the implementation of event-driven architecture:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是事件驱动架构的实现：
- en: '**Message brokers**: Systems often use message brokers such as **Kafka**, **RabbitMQ**,
    or **Apache Pulsar** as the underlying infrastructure to manage the flow of events.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息代理**：系统通常使用消息代理，如**Kafka**、**RabbitMQ**或**Apache Pulsar**作为底层基础设施来管理事件的流动。'
- en: '**Event schema**: Defining a clear schema for events helps to ensure consistency
    and understanding between producers and consumers.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件模式**：定义事件清晰的模式有助于确保生产者和消费者之间的一致性和理解。'
- en: '**Event handlers**: Microservices have event handlers that subscribe to specific
    types of events and execute predefined logic in response.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件处理器**：微服务拥有订阅特定类型事件并执行预定义逻辑的事件处理器。'
- en: '**Event-driven microservices**: Each microservice in the system can act as
    both a producer and a consumer of events, interacting with other services based
    on events.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件驱动微服务**：系统中的每个微服务都可以作为事件的产生者和消费者，根据事件与其他服务进行交互。'
- en: In summary, event-driven architecture is a powerful paradigm for building resilient
    and scalable microservices systems. It enables a more responsive and adaptable
    architecture by fostering loose coupling between microservices, allowing them
    to evolve independently. Properly implemented, EDA contributes to a more agile
    and efficient microservices ecosystem.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，事件驱动架构是构建弹性且可扩展的微服务系统的强大范式。它通过促进微服务之间的松散耦合，允许它们独立演进，从而实现更响应和适应的架构。正确实施，EDA有助于构建更敏捷和高效的微服务生态系统。
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned a lot about microservices, how to deal with
    caching, and the different types of caching.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于微服务的大量知识，如何处理缓存，以及不同类型的缓存。
- en: In summary, caching and asynchronous messaging are two techniques that can improve
    the performance, scalability, and reliability of microservice-based applications.
    Caching is the process of storing frequently accessed or expensive data in a temporary
    storage area, such as **Redis**, to reduce the latency and the load on the primary
    data source. Asynchronous messaging is the process of exchanging data between
    microservices or clients in a non-blocking and event-driven manner, using a message
    broker such as **Amazon SQS** or **Amazon SNS**. Caching and asynchronous messaging
    can help to overcome some of the challenges of microservices, such as complexity,
    eventual consistency, and network failures. However, they also require careful
    design and trade-offs, such as data freshness, data synchronization, and message
    ordering.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，缓存和异步消息传递是两种可以提高基于微服务应用性能、可扩展性和可靠性的技术。缓存是将频繁访问或昂贵的数据库存储在临时存储区域的过程，例如**Redis**，以减少延迟和主要数据源的负载。异步消息传递是在非阻塞和事件驱动的方式下，通过使用消息代理如**Amazon
    SQS**或**Amazon SNS**在微服务或客户端之间交换数据的过程。缓存和异步消息传递可以帮助克服微服务的一些挑战，例如复杂性、最终一致性和网络故障。然而，它们也要求谨慎的设计和权衡，例如数据新鲜度、数据同步和消息排序。
- en: In the next chapter, we are going to learn about ensuring data security with
    the saga pattern, encryption, and security measures.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用事件表模式、加密和安全措施来确保数据安全。
- en: Quiz time
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: What is client-side caching and edge caching?
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是客户端缓存和边缘缓存？
- en: What is microservice-level caching?
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是微服务级别的缓存？
- en: What are message queues and publish-subscribe?
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息队列和发布-订阅是什么？
- en: What is event-driven architecture?
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是事件驱动架构？
