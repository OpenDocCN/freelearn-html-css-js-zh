- en: Chapter 7. Introducing the Canvas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 介绍Canvas
- en: In this chapter, we are going to learn about HTML canvas. An HTML canvas helps
    you to draw, especially the graphics (for example, circles, squares, rectangles,
    and so on) on your HTML page. The `<canvas></canvas>` tags are usually controlled
    by JavaScript. Canvas can draw texts, which can also be animated. Let's see what
    we can do using the HTML canvas.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习HTML canvas。HTML canvas可以帮助你在HTML页面上绘制图形，特别是图形（例如，圆形、正方形、矩形等）。`<canvas></canvas>`
    标签通常由JavaScript控制。Canvas可以绘制文本，这些文本也可以被动画化。让我们看看我们可以使用HTML canvas做什么。
- en: Implementing canvas
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现画布
- en: 'To add canvas on your HTML page, you need to define the height and width of
    your canvas in the `<canvas></canvas>` tags as shown in the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要在你的HTML页面上添加画布，你需要在 `<canvas></canvas>` 标签中定义画布的高度和宽度，如下所示：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We have defined the canvas ID as `canvasTest`, which will be used to play with
    the canvas. We used inline CSS on our canvas. The 2 px solid border is used to
    have a better view of the canvas.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了画布ID为 `canvasTest`，它将被用来与画布交互。我们在画布上使用了内联CSS。2像素的实线边框用于更好地查看画布。
- en: Adding JavaScript
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加JavaScript
- en: Now, we are going to add few lines of JavaScript for our canvas. We need to
    add our JavaScript just after the `<canvas></canvas>` tags in the `<script></script>`
    tags.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加几行JavaScript代码到我们的画布中。我们需要在 `<canvas></canvas>` 标签之后立即添加我们的JavaScript代码到
    `<script></script>` 标签中。
- en: Drawing a rectangle
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制矩形
- en: 'To test our canvas, let''s draw a rectangle in the canvas by typing the following
    code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的画布，让我们通过输入以下代码在画布上绘制一个矩形：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the script, we declared two JavaScript variables. The `canvas` variable is
    used to hold the content of our canvas using the canvas ID, which we used in our
    `<canvas></canvas>` tags. The `canvasElement` variable is used to hold the context
    of the canvas. We assign `black` to `fillstyle` so that the rectangle that we
    want to draw turns black when filled. We used `canvasElement.fillRect(x, y, w,
    h);` for the shape of the rectangle. Where `x` is the distance of the rectangle
    from the *x* axis; `y` is the distance of the rectangle from the *y* axis; and
    `w` and `h` are the width and height of the rectangle, respectively.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中，我们声明了两个JavaScript变量。`canvas` 变量用于通过canvas ID保存画布的内容，我们在 `<canvas></canvas>`
    标签中使用了这个ID。`canvasElement` 变量用于保存画布的上下文。我们将 `black` 分配给 `fillstyle`，这样当我们填充矩形时，我们想要绘制的矩形就会变成黑色。我们使用了
    `canvasElement.fillRect(x, y, w, h);` 来绘制矩形的形状。其中 `x` 是矩形与 *x* 轴的距离；`y` 是矩形与 *y*
    轴的距离；而 `w` 和 `h` 分别是矩形的宽度和高度。
- en: 'The full code is as shown in the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码如下所示：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output of the code is as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的输出如下：
- en: '![Drawing a rectangle](img/B04720_07_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![绘制矩形](img/B04720_07_01.jpg)'
- en: Drawing a line
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制线条
- en: 'To draw a line in the canvas that you need to insert the following code in
    your `<script></script>` tags:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要在画布上绘制线条，你需要在你的 `<script></script>` 标签中插入以下代码：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `canvasElement.moveTo(0,0);` is used to have our line start from the (0,0)
    co-ordinate of our canvas. The `canvasElement.lineTo(100,100);` statement is used
    to make the line diagonal. The `canvasElement.stroke();` statement is used to
    make the line visible. I would suggest you to change the numbers in `canvasElement.lineTo(100,100);`
    and `canvasElement.moveTo(0,0);` and see the changes to your line drawn by canvas.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`canvasElement.moveTo(0,0);` 用于使我们的线条从画布的(0,0)坐标开始。`canvasElement.lineTo(100,100);`
    语句用于使线条对角。`canvasElement.stroke();` 语句用于使线条可见。我建议你更改 `canvasElement.lineTo(100,100);`
    和 `canvasElement.moveTo(0,0);` 中的数字，并查看由canvas绘制的线条的变化。
- en: 'The following is the output of the code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是代码的输出：
- en: '![Drawing a line](img/B04720_07_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![绘制线条](img/B04720_07_02.jpg)'
- en: A quick exercise
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速练习
- en: Draw a line using canvas and JavaScript, which will be parallel to the *y* axis
    of the canvas.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用canvas和JavaScript绘制线条，该线条将与画布的 *y* 轴平行。
- en: Draw a rectangle having 300 px height and 200 px width. Draw a line on the same
    canvas, touching the rectangle.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制一个高度为300像素、宽度为200像素的矩形。在同一画布上绘制一条与矩形接触的线条。
- en: Drawing a circle
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制圆形
- en: 'To draw a circle in the canvas, you need to add the following code in your
    `<script></script>` tags:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要在画布上绘制圆形，你需要在你的 `<script></script>` 标签中添加以下代码：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we used `canvasElement.beginPath();` to start drawing the circle, `canvasElement.arc(95,50,40,0,2*Math.PI);`
    for the shape of the circle, and `canvasElement.stroke();` to set the circle visible.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了 `canvasElement.beginPath();` 来开始绘制圆形，`canvasElement.arc(95,50,40,0,2*Math.PI);`
    用于绘制圆形的形状，以及 `canvasElement.stroke();` 来使圆形可见。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `canvasElement.arc(95,50,40,0,2*Math.PI);` statement is similar to `canvasElement.arc(x,
    y, r, sA, eA, ac);`,
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`canvasElement.arc(95,50,40,0,2*Math.PI);` 这条语句类似于 `canvasElement.arc(x, y,
    r, sA, eA, ac);`，'
- en: where `x` is the starting coordinate from *x* axis, `y` is the starting coordinate
    from *y* axis, `r` is the radius of the circle, `sA` is the starting angle of
    the circle, `eA` is the ending angle of the circle, and `ac` is the direction
    of the circle. Here, `ac` denotes anticlockwise.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `x` 是从 *x* 轴的起始坐标，`y` 是从 *y* 轴的起始坐标，`r` 是圆的半径，`sA` 是圆的起始角度，`eA` 是圆的结束角度，`ac`
    是圆的方向。在这里，`ac` 表示逆时针。
- en: 'The output of our code will be the following image:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们代码的输出将是以下图像：
- en: '![Drawing a circle](img/B04720_07_03.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![画圆](img/B04720_07_03.jpg)'
- en: Draw linear gradient
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制线性渐变
- en: 'Let''s draw something new. We will draw a rectangle and make its color fade
    gradually. Type the following code in your `<script></script>` tags:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们绘制一些新内容。我们将绘制一个矩形并使其颜色逐渐淡化。在 `<script></script>` 标签中输入以下代码：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We added `canvasElement.createLinearGradient(0,0,100,0);` to create the gradient
    or fading. We added `grdient.addColorStop(0,"blue");` and `grdient.addColorStop(1,"white");`
    to color the rectangle.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了 `canvasElement.createLinearGradient(0,0,100,0);` 来创建渐变或淡化效果。我们添加了 `grdient.addColorStop(0,"blue");`
    和 `grdient.addColorStop(1,"white");` 来着色矩形。
- en: 'The output of the code is as shown in the following image:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的输出如下所示：
- en: '![Draw linear gradient](img/B04720_07_04.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![绘制线性渐变](img/B04720_07_04.jpg)'
- en: A quick exercise
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速练习
- en: 'Draw the following smiley face using HTML canvas. (**Hint**: you will have
    to draw three full circles and a half circle. The trick is that you can draw the
    figure by playing with the code of circle for the canvas.):![A quick exercise](img/B04720_07_05.jpg)'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用HTML canvas绘制以下笑脸。(**提示**：您将需要绘制三个完整的圆和一个半圆。技巧在于您可以通过玩转canvas的圆代码来绘制这个图形。):![快速练习](img/B04720_07_05.jpg)
- en: Draw a circle with a color gradient.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制具有颜色渐变的圆。
- en: Let's make a clock!
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们做一个时钟！
- en: 'We are going to draw an analog clock and make it work as a real clock. In your
    body part of the HTML document, type the following code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将绘制一个模拟时钟并使其像真实时钟一样工作。在HTML文档的body部分，输入以下代码：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, `cX` and `cY` are the center coordinates of our clock. We took 150 px
    as the clock's radius. You can increase or decrease it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`cX` 和 `cY` 是我们时钟的中心坐标。我们取150 px作为时钟的半径。您可以增加或减少它。
- en: Then, we need to initialize the variables. Make an `init();` function after
    defining the preceding variables.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要初始化变量。在定义前面的变量之后，创建一个 `init();` 函数。
- en: 'The function should look similar to the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 函数应类似于以下内容：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s initialize the second, minute, and hour hands of our clock:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们初始化时钟的秒针、分针和时针：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, `date.getHours()`, `date.getMinutes()`, and `date.getSeconds()` will return
    your computer's time and save them on our variables.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`date.getHours()`、`date.getMinutes()` 和 `date.getSeconds()` 将返回您的计算机时间并将它们保存在我们的变量中。
- en: 'Make another function that will animate our clock:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 创建另一个函数来使我们的时钟动画化：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will write `clearCanvas()`, `refreshTime()`, and `drawClock()` now:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将编写 `clearCanvas()`、`refreshTime()` 和 `drawClock()`：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, `canvasElement.clearRect(0, 0, canvas.width, canvas.height);` will reset
    our canvas after a definite time interval.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`canvasElement.clearRect(0, 0, canvas.width, canvas.height);` 将在特定时间间隔后重置我们的画布。
- en: 'Our `refreshTime()` function should look as shown in the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `refreshTime()` 函数应如下所示：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We incremented our `seconds` variable in the `refreshTime()` function. Therefore,
    whenever this function is called, our variable will be incremented by `1`. Then,
    we have done two conditional operations for our `hours` and `minutes`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `refreshTime()` 函数中，我们增加了我们的 `seconds` 变量。因此，每当此函数被调用时，我们的变量将增加 `1`。然后，我们对
    `hours` 和 `minutes` 执行了两个条件操作。
- en: 'Now, let''s draw the clock:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们绘制时钟：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We will write the `drawClockBackground()`, `drawSecondsHand()`, `drawMinutesHand()`,
    and `drawHoursHand()` functions:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写 `drawClockBackground()`、`drawSecondsHand()`、`drawMinutesHand()` 和 `drawHoursHand()`
    函数：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We performed some mathematical things in this function and wrote the `drawLittleCircle(cX,
    cY)` function for a little circle on the center of our clock.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在此函数中，我们进行了一些数学运算，并编写了 `drawLittleCircle(cX, cY)` 函数，用于在时钟中心绘制一个小圆。
- en: 'The function should look similar to the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 函数应类似于以下内容：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Write the `drawSecondsHand()` function. This function will draw the second
    hand, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 编写 `drawSecondsHand()` 函数。此函数将绘制秒针，如下所示：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Our `drawMinutesHand()` function should look as shown in the following. This
    function will draw the minute hand of our clock, as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `drawMinutesHand()` 函数应该看起来像下面这样。这个函数将绘制我们时钟的分钟指针，如下所示：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, let''s see our `drawHoursHand();` function. This function will draw the
    hour hand:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们的 `drawHoursHand();` 函数。这个函数将绘制小时指针：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We used a `drawHand();` function in the preceding functions. Let''s write the
    function, as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的函数中使用了 `drawHand();` 函数。让我们按照以下方式编写这个函数：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, we are going to write the last function for our clock, as shown in the
    following snippet:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写我们时钟的最后一个函数，如下面的代码片段所示：
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The full code of our clock should look similar to the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们时钟的完整代码应该看起来类似于以下代码：
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you can see the output of your code as the following image, then congratulations!
    You successfully created your HTML clock using canvas:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你可以看到你的代码输出如下面的图像，那么恭喜你！你已经成功使用 canvas 创建了你的 HTML 时钟：
- en: '![Let''s make a clock!](img/B04720_07_06.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![让我们做一个时钟！](img/B04720_07_06.jpg)'
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned the basics of HTML canvas. I hope that you
    can now draw anything using the HTML canvas. You may have played online games;
    the components of most of them are drawn using HTML canvas. Therefore, if you
    want to develop your own web applications or games, you need to learn about canvas.
    You can easily code to draw and animate the shapes using JavaScript.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 HTML canvas 的基础知识。我希望你现在可以使用 HTML canvas 绘制任何东西。你可能玩过在线游戏；它们的大部分组件都是使用
    HTML canvas 绘制的。因此，如果你想开发自己的网络应用程序或游戏，你需要了解 canvas。你可以使用 JavaScript 轻松编写代码来绘制和动画化形状。
- en: In the next chapter, we will develop a game called **Rat-man** using the HTML
    canvas. Before starting [Chapter 8](ch08.html "Chapter 8. Building Rat-man!"),
    *Building Rat-man!*, I hope that you've learned a lot about HTML canvas through
    this chapter. If you've, let's develop our game now.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用 HTML canvas 开发一个名为 **Rat-man** 的游戏。在开始 [第 8 章](ch08.html "第 8 章. 构建
    Rat-man！")，*构建 Rat-man！* 之前，我希望你已经通过本章学到了很多关于 HTML canvas 的知识。如果你已经学到了，那么我们现在就开始开发我们的游戏吧。
