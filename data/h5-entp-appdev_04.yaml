- en: 'Chapter 4. The App: Getting Movies Via Geolocation'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章：应用：通过地理位置获取电影
- en: HTML5 introduced a built-in ability to determine where the user is. The geolocation
    API defines a specification for using JavaScript to access location-based data
    for use in your enterprise application. Understanding where the user is can be
    useful for displaying news and services relevant to the user's locale.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5 引入了一种内置的能力，可以确定用户的位置。地理位置API定义了一个规范，用于使用JavaScript访问用于企业应用程序的位置数据。了解用户的位置对于显示与用户位置相关的新闻和服务非常有用。
- en: The first major feature of our MovieNow application is the ability to find a
    list of movies nearest to the user based on geolocation data. We will cover how
    the geolocation API works as well as walk through the implementation of this feature.
    Since this is our first feature, we will also walk through making requests using
    **Asynchronous JavaScript and XML** (**AJAX**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们MovieNow应用程序的第一个主要功能是根据地理位置数据找到用户附近的电影列表。我们将介绍地理位置API的工作原理，并介绍此功能的实现。由于这是我们第一个功能，我们还将介绍如何使用**异步JavaScript和XML**（**AJAX**）进行请求。
- en: 'We will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍以下主题：
- en: How it works
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何工作
- en: The API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API
- en: A simple request
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单请求
- en: Movies near you
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附近的电影
- en: How it works
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何工作
- en: The W3C Geolocation API specification merely defines an interface by which we
    can obtain data. Where and how geolocation data arrives is rather an implementation
    detail. On most mobile devices, GPS is usually built in and is gathered through
    a combination of satellite data, WiFi, and GSM/CDMA cell tower location. On desktop
    devices, Wi-Fi and geolocation based on IP address can be used. Lastly, Google
    offers a geolocation service fueled by its StreetView data. Needless to say, what
    goes on under the hood need not worry us, but it is good to understand how the
    magic really happens
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: W3C 地理位置API规范仅定义了一个接口，通过该接口我们可以获取数据。地理位置数据从何而来以及如何到达则更多是实现的细节。在大多数移动设备上，GPS
    通常内置，并通过卫星数据、WiFi 和 GSM/CDMA 基站位置的组合来收集。在桌面设备上，可以使用基于IP地址的Wi-Fi和地理位置。最后，Google
    提供了一个由其StreetView数据驱动的地理位置服务。不用说，底层的实现细节不必让我们担心，但了解魔法是如何真正发生的总是好的。
- en: 'The following are the supported browser:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 支持以下浏览器：
- en: Firefox 3.5+
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firefox 3.5+
- en: Chrome 5.0+
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chrome 5.0+
- en: Safari 5.0+
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Safari 5.0+
- en: Opera 10.60+
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Opera 10.60+
- en: Internet Explorer 9.0+
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Internet Explorer 9.0+
- en: 'Support is rendered on the following mobile devices:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 支持以下移动设备：
- en: Android 2.0+
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 2.0+
- en: iPhone 3.0+
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iPhone 3.0+
- en: Opera Mobile 10.1+
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Opera Mobile 10.1+
- en: Blackberry OS 6
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blackberry OS 6
- en: The API
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API
- en: 'The geolocation API is fairly simple providing only two methods: `getCurrentPosition()`
    and `watchPosition()`. Available under the `navigator.geolocation` namespace,
    these methods are very similar but provide data about the device''s location in
    distinct ways. While `getCurrentPosition` is a one-time call to get geolocation
    data, `watchPosition` returns geolocation data and continues to re-invoke its
    callback when the device''s position changes until the `clearWatch` method is
    invoked.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 地理位置API相当简单，只提供了两种方法：`getCurrentPosition()` 和 `watchPosition()`。这些方法在 `navigator.geolocation`
    命名空间下可用，非常相似，但以不同的方式提供设备位置的数据。`getCurrentPosition` 是一个一次性调用以获取地理位置数据，而 `watchPosition`
    返回地理位置数据，并在设备位置改变时继续重新调用其回调，直到调用 `clearWatch` 方法。
- en: 'Both methods take the same three arguments: a `successCallback` function, an
    `errorCallback` function, and a `PositionOptions` function consisting of the following
    attributes:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法都接受相同的三个参数：一个 `successCallback` 函数，一个 `errorCallback` 函数，以及一个包含以下属性的 `PositionOptions`
    函数：
- en: '`boolean enableHighAccuracy`: This indicates that the most accurate data should
    be retrieved, which may result in slower response times.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean enableHighAccuracy`：这表示应检索最准确的数据，这可能会导致响应时间较慢。'
- en: '`long timeout`: This indicates the maximum number of milliseconds before the
    request should time out.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`long timeout`：这表示在请求应该超时之前的最长毫秒数。'
- en: '`long maximumAge`: This indicates that cached content that does not exceed
    the specified age in milliseconds should be returned. If set to `0`, the new position
    data will always be returned.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`long maximumAge`：这表示应返回不超过指定毫秒数的缓存内容。如果设置为 `0`，则始终返回新的位置数据。'
- en: 'Both methods also return a `Position` object to the `successCallback` function,
    which consists of the following poperties:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法也向 `successCallback` 函数返回一个 `Position` 对象，该对象包含以下属性：
- en: '`coords.latitude`: This holds the latitude in decimal degrees'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coords.latitude`：这表示十进制度数形式的纬度'
- en: '`coords.longitude`: This holds the longitude in decimal degrees'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coords.longitude`: 这表示经度，以十进制度为单位'
- en: '`coords.altitude`: This holds the height in meters relative to the reference
    ellipsoid'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coords.altitude`: 这表示相对于参考椭球的高度，以米为单位'
- en: '`coords.accuracy`: This holds the accuracy of the latitude and longitude in
    meters'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coords.accuracy`: 这表示纬度和经度的精度，以米为单位'
- en: '`coords.altitudeAccuracy`: This holds the accuracy of the altitude in meters'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coords.altitudeAccuracy`: 这表示海拔的精度，以米为单位'
- en: '`coords.heading`: This holds the travel direction of the device in degrees
    clockwise relative to true north'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coords.heading`: 这表示设备相对于真北方向顺时针的行进方向，以度为单位'
- en: '`coords.speed`: This holds the current ground speed in meters per second'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coords.speed`: 这表示当前地面速度，以米/秒为单位'
- en: '`timestamp`: This holds the date and time of when the position was acquired'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestamp`: 这表示获取位置时的日期和时间'
- en: 'Finally, the `errorCallback` argument receives a `PositionError` object when
    invoked, which includes the following properties:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当调用`errorCallback`参数时，它将接收一个`PositionError`对象，该对象包括以下属性：
- en: '`code`: This indicates the error type. This can be any of the following values:
    `PERMISSION_DENIED` (`1`), `POSITION_UNAVAILABLE` (`2`), and `TIMEOUT` (`3`).'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`code`: 这表示错误类型。这可以是以下值之一：`PERMISSION_DENIED`（`1`）、`POSITION_UNAVAILABLE`（`2`）和`TIMEOUT`（`3`）。'
- en: '`message`: This shows the details of the error.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`message`: 这显示了错误的详细信息。'
- en: A simple request
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的请求
- en: 'Now that we understand the mechanics of the geolocation API, let us go over
    dissent an actual request. Take a look at the following code snippet:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了地理位置API的机制，让我们来讨论一个实际请求。看看下面的代码片段：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is the most basic call we can make. First of all, since geolocation is
    not supported on all devices, we must take care to avoid unexpected errors by
    checking whether it is supported, which is where the `if` statement comes in.
    Secondly, we invoke the `getCurrentPosition` method passing in a `successCallback`
    function. `successCallback` can be any function we want to invoke when the position
    is returned. Notice the missing `errorCallback` function and options arguments.
    These are strictly optional although it is good practice to implement them to
    account for unexpected error conditions.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们可以做的最基本调用。首先，由于地理位置信息不是所有设备都支持，我们必须小心避免由于不支持而导致的意外错误，这需要检查是否支持，这就是`if`语句的作用所在。其次，我们调用`getCurrentPosition`方法，传入一个`successCallback`函数。`successCallback`可以是我们在位置返回时想要调用的任何函数。注意缺少的`errorCallback`函数和选项参数。这些参数是严格可选的，尽管实现它们以应对意外错误条件是一种良好的实践。
- en: Movies near you
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你附近的电影
- en: 'To begin adding geolocation to our MovieNow enterprise application, we will
    first make some adjustments to our page, which we set up in [Chapter 3](ch03.html
    "Chapter 3. The App: Structure and Semantics"), *The App: Structure and Semantics*.
    In the `article` tag, we will add a `button` tag and a `div` tag:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始将地理位置信息添加到我们的MovieNow企业应用程序中，我们首先需要对我们的页面进行一些调整，该页面我们在[第3章](ch03.html "第3章。应用：结构和语义")中设置，即*应用：结构和语义*。在`article`标签中，我们将添加一个`button`标签和一个`div`标签：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `button` tag will be used to invoke the action to get movie data while
    the `div` tag is where the data will land. If all goes well, your screen should
    display a button labeled **Find Movies**, as shown in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`button`标签将用于调用获取电影数据的行为，而`div`标签则是数据将显示的位置。如果一切顺利，你的屏幕应该显示一个标签为**查找电影**的按钮，如下面的截图所示：'
- en: '![Movies near you](img/5689_04_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![你附近的电影](img/5689_04_01.jpg)'
- en: 'Next, you may recall some JavaScript references that were included at the bottom
    of `index.html`. Let us add three more JavaScript references. See the following
    code snippet:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你可能还记得在`index.html`底部包含的一些JavaScript引用。让我们再添加三个JavaScript引用。看看下面的代码片段：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You may have noticed the inclusion of `jquery.xdomainajax.js`. This is an extension
    to the jQuery library that allows for cross-domain AJAX GET requests. Going back
    to Netscape Navigator 2.0, browsers have implemented the same origin policy, which
    is a security precaution that restricts pages on one site from being able to access
    properties and methods of pages on another site. This made sense at the time,
    but now with an increasingly fluid World Wide Web, where content from many sites
    can be "mashed up" into a unified experience, the borders have by necessity been
    circumvented. There are many workarounds including **JavaScript Object Notation
    with Padding** (**JSONP** ), that allows cross-domain AJAX requests passing a
    callback parameter, so the service called can wrap the resulting JSON object in
    the function passed as a callback.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到了`jquery.xdomainajax.js`的包含。这是jQuery库的一个扩展，允许进行跨域AJAX GET请求。回到Netscape
    Navigator 2.0，浏览器已经实现了同源策略，这是一种安全预防措施，限制了来自一个站点的页面无法访问另一个站点的页面属性和方法。在当时这是有意义的，但随着日益流动的万维网，许多站点的内容可以“混合”成一个统一体验，这些边界已经不可避免地被绕过了。有许多解决方案，包括**带有填充的JavaScript对象表示法**（**JSONP**），它允许通过传递回调参数进行跨域AJAX请求，因此被调用的服务可以将结果JSON对象包装在作为回调传递的函数中。
- en: Tip
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The cross-domain-ajax library can be found at [https://github.com/padolsey/jQuery-Plugins/tree/master/cross-domain-ajax/](https://github.com/padolsey/jQuery-Plugins/tree/master/cross-domain-ajax/).
    All credit goes to James Padolsey for this library.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[https://github.com/padolsey/jQuery-Plugins/tree/master/cross-domain-ajax/](https://github.com/padolsey/jQuery-Plugins/tree/master/cross-domain-ajax/)找到跨域Ajax库。这个库的所有功劳都归功于James
    Padolsey。
- en: 'Next, we will add the cross-domain-ajax library to the `js` folder, and then
    create two new files in the `js` folder: `movienow.js` and `movienow.geolocation.js`.
    In `movienow.js`, we will establish our root namespace `movienow`. This will be
    in the `global` or `window` scope meaning that it can be accessed anywhere. This
    is where we can add core functionality to our enterprise application as we see
    fit. For starters, the only line we need here is the following, which sets the
    root namespace:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将把跨域Ajax库添加到`js`文件夹中，然后在`js`文件夹中创建两个新文件：`movienow.js`和`movienow.geolocation.js`。在`movienow.js`中，我们将建立我们的根命名空间`movienow`。这将位于`global`或`window`作用域，这意味着它可以在任何地方访问。这就是我们可以根据需要向我们的企业应用程序添加核心功能的地方。一开始，我们这里需要的只有以下这一行，它设置了根命名空间：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In `movienow.geolocation.js`, we will add our geolocation-specific functionality.
    The reason we do this is to make sure we are following a modular approach in our
    enterprise application development. Modularity forces us to break up functionality
    into discrete, highly cohesive, loosely coupled pieces. Modularity allows us to
    vary parts of our enterprise application without affecting the whole. It is akin
    to the difference between a mobile phone with a removable battery and one where
    the battery is welded in. If the battery goes bad, modularity means the difference
    between replacing a broken part to replacing an entire device.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在`movienow.geolocation.js`中，我们将添加我们的地理位置特定功能。我们这样做的原因是为了确保我们在企业应用程序开发中遵循模块化方法。模块化迫使我们把功能分解成离散的、高度内聚的、松散耦合的部分。模块化允许我们改变企业应用程序的某些部分，而不会影响整体。这就像可拆卸电池的手机和电池焊接在手机里的手机之间的区别。如果电池坏了，模块化意味着更换损坏的部分与更换整个设备之间的区别。
- en: Self-invoking
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自调用
- en: We will begin by getting a reference to our established namespace. This is good
    defensive practice in case anything happens to your core namespace JavaScript
    file.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先获取对我们已建立的命名空间的引用。这是一种良好的防御性做法，以防你的核心命名空间JavaScript文件发生任何问题。
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Notice that having this declaration is not necessary to include the `movienow.js`
    file with the initial definition of our namespace.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，拥有这个声明并不是必须的，以包含我们的命名空间初始定义时所需的`movienow.js`文件。
- en: 'Next, we will establish our geolocation namespace:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将建立我们的地理位置命名空间：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notice the second set of parentheses. This construct is known as an **immediately
    invoked function expression** (**IIFE**). This is a nifty shorthand for registering
    and immediately invoking JavaScript code in a modular way. All the properties
    and methods for geolocation will be wrapped in the `movienow.geolocation` namespace,
    which makes for a smaller footprint in the global namespace and cleaner,more modular
    code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意第二个括号。这种结构被称为立即调用的函数表达式（**IIFE**）。这是一种方便的简写方式，可以以模块化的方式注册和立即调用 JavaScript
    代码。所有关于地理位置的属性和方法都将被封装在 `movienow.geolocation` 命名空间中，这使得在全局命名空间中的占用更小，代码更干净、更模块化。
- en: That becomes this
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那就变成了这个
- en: 'Within our newly established namespace declaration, we will do a couple of
    things. First, we need to capture a reference to the object itself. We will do
    this by adding the following line:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们新建立的命名空间声明中，我们将做几件事情。首先，我们需要捕获对对象的引用。我们将通过添加以下行来实现：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This may seem like an amusing line, but its importance will become clear. The
    `this` keyword in JavaScript is a handy function for referring to the owner of
    the executing function or to the object of which the function is a method. Without
    it, we would be required to prefix all of our properties and methods within our
    namespace with the namespace itself, which gets thorny when you want to change
    your namespace.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来像一条有趣的话，但它的重要性将变得明显。JavaScript 中的 `this` 关键字是一个方便的函数，用于引用执行函数的所有者或函数是方法的对象。没有它，我们就需要在命名空间内的所有属性和方法前加上命名空间本身，当你想要更改命名空间时，这会变得很复杂。
- en: 'The following illustrates the value of the `this` keyword:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下说明了 `this` 关键字的价值：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Notice the use of `myNamespace` to refer to other methods within the object.
    We can replace it with `this` in order to have a more agnostic way of referring
    to other members within the object:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用 `myNamespace` 来引用对象内的其他方法。我们可以用 `this` 来替换它，以便以更无差别的引用方式引用对象内的其他成员：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Unfortunately, when the context changes, so does `this`. When we add a function
    inside another function, the context will be that of the outer function:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，当上下文改变时，`this` 也会改变。当我们在一个函数内部添加一个函数时，上下文将是外部函数的上下文：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here we have added `innerFunction` that invokes `secondFunction` (notice the
    immediately invoked function expression). However, `secondFunction` is never invoked.
    This is because the context for `this` has changed to that of `firstFunction`.
    To maintain our reference to the `myNamespace` context, we simply declare a variable
    and hold onto it:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们添加了 `innerFunction`，它调用了 `secondFunction`（注意立即调用的函数表达式）。然而，`secondFunction`
    从未被调用。这是因为 `this` 的上下文已经改变为 `firstFunction` 的上下文。为了保持对 `myNamespace` 上下文的引用，我们只需声明一个变量并保留它：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And this is where `that` becomes `this`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 而这就是 `that` 变成 `this` 的地方。
- en: Getting location
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取位置
- en: 'Until now the **Find Movies** button we placed on the page was non-functional.
    Click on it and nothing happens. We will add an event handler for that button
    so that something does happen when you click on it. Add the following inside the
    `movienow.geolocation` object:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们放在页面上的 **查找电影** 按钮是非功能的。点击它，什么也不会发生。我们将为该按钮添加一个事件处理程序，以便当你点击它时会发生一些事情。在
    `movienow.geolocation` 对象内部添加以下内容：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `movienow.geolocation.js` file should now look like the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`movienow.geolocation.js` 文件现在应该看起来像以下代码：'
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now click on **Find Movie**. You should get the following alert box:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击 **查找电影**。你应该会得到以下提示框：
- en: '![Getting location](img/5689_04_02.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![获取位置](img/5689_04_02.jpg)'
- en: 'That may be all well and good, but our goals are much loftier. We want to get
    some location data. We do this by adding a couple of methods: `getLocation` and
    `locationCallback`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来很好，但我们的目标要高得多。我们想要获取一些位置数据。我们通过添加几个方法来实现：`getLocation` 和 `locationCallback`：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The first function is of course where we invoke the `getCurrentPosition` method
    already discussed. The second function is `successCallback`. We can now remove
    the alert in the event handler for the **Find Movies** button and replace it with
    the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个函数当然是调用前面讨论过的 `getCurrentPosition` 方法的地方。第二个函数是 `successCallback`。我们现在可以移除
    **查找电影** 按钮的事件处理程序中的提示框，并替换为以下内容：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `movienow.geolocation.js` file should now look like the following code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`movienow.geolocation.js` 文件现在应该看起来像以下代码：'
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now when you click on the **Find Movies** button, a request is made through
    the geolocation API for location data.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当你点击 **查找电影** 按钮时，将通过地理位置 API 发出位置数据请求。
- en: The web browser will typically prompt you for permission to track your physical
    location. The following screenshot shows examples for Safari, Chrome, ad Firefox
    respectively.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 网络浏览器通常会提示您允许跟踪您的物理位置。以下截图显示了 Safari、Chrome 和 Firefox 的示例。
- en: '![Getting location](img/5689_04_03.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![获取位置](img/5689_04_03.jpg)'
- en: This will happen only once. When you click on **Allow**, the browser will save
    this setting for the specified domain.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这只会发生一次。当您点击**允许**时，浏览器将为指定的域名保存此设置。
- en: '![Getting location](img/5689_04_04.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![获取位置](img/5689_04_04.jpg)'
- en: You should now see latitude and longitude displayed on the page. Congratulations!
    Your enterprise application is now aware of where you are.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该能在页面上看到纬度和经度。恭喜！您的企业应用程序现在知道您的位置了。
- en: Getting postal codes
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取邮政编码
- en: Now that we have geographic coordinates, the next step is to map them to postal
    codes. Once we have postal codes, we can get movie listings. In order to get postal
    codes, we will need to make an AJAX request to a web service, sending the latitude
    and longitude and in turn receiving postal codes. There are a number of web services
    that provide this data. For our MovieNow enterprise application, we will employ
    a service from [geonames.org](http://geonames.org).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了地理坐标，下一步是将它们映射到邮政编码。一旦我们有了邮政编码，我们就可以获取电影列表。为了获取邮政编码，我们需要向网络服务发送一个 AJAX
    请求，发送纬度和经度，然后接收邮政编码。有许多网络服务提供这些数据。对于我们的 MovieNow 企业应用程序，我们将使用来自 [geonames.org](http://geonames.org)
    的服务。
- en: Note
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The GeoNames geographical database covers all countries and contains over eight
    million placenames that are available for download free of charge. It is licensed
    under Creative Commons Attribution 3.0.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: GeoNames地理数据库覆盖所有国家，包含超过八百万个可免费下载的地名。它采用Creative Commons Attribution 3.0许可。
- en: '[Geonames.org](http://Geonames.org) provides a convenient web service called
    `findNearbyPostalCodesJSON` for obtaining postal code data. This service takes
    the following parameters:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[Geonames.org](http://Geonames.org) 提供了一个方便的名为 `findNearbyPostalCodesJSON`
    的网络服务，用于获取邮政编码数据。此服务接受以下参数：'
- en: '`lat`: This specifies the latitude in decimal degrees'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lat`: 这指定了十进制度数形式的纬度'
- en: '`lng`: This specifies the longitude in decimal degrees'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lng`: 这指定了十进制度数形式的经度'
- en: '`radius`: This specifies the radius in kilometers'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radius`: 这指定了半径（千米）'
- en: '`maxRows`: This specifies the maximum number of rows to return'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maxRows`: 这指定了要返回的最大行数'
- en: '`style`: This specifies the verbosity of the response (`SHORT`, `MEDIUM`, `LONG`,
    `FULL`)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style`: 这指定了响应的详细程度（`SHORT`, `MEDIUM`, `LONG`, `FULL`）'
- en: '`country`: This specifies the country to look in'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`country`: 这指定了要查找的国家'
- en: '`localCountry`: This parameter, when set to `true`, returns only codes within
    the country'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`localCountry`: 当此参数设置为`true`时，只返回国家内的代码'
- en: '`username`: The account for which you are accessing the data'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`username`: 这是您访问数据的账户'
- en: 'The following is an example service call:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例服务调用：
- en: '[http://api.geonames.org/findNearbyPostalCodesJSON?lat=45&lng=-66.7&username=demo](http://api.geonames.org/findNearbyPostalCodesJSON?lat=45&lng=-66.7&username=demo)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://api.geonames.org/findNearbyPostalCodesJSON?lat=45&lng=-66.7&username=demo](http://api.geonames.org/findNearbyPostalCodesJSON?lat=45&lng=-66.7&username=demo)'
- en: 'It returns the following JSON output:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回以下 JSON 输出：
- en: '[PRE16]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You can copy/paste this URL into a web browser and see for yourself.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将此 URL 复制/粘贴到网络浏览器中，亲自查看。
- en: Tip
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The web services are throttled meaning that only a certain number of requests
    per day are serviced for a given username. That is why you should register your
    own account with [geonames.org](http://geonames.org) before proceeding. Once you
    do so, swap in `demo` with your username.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 网络服务受到限制，意味着对于给定的用户名，每天只能服务一定数量的请求。这就是为什么您在继续之前应该在 [geonames.org](http://geonames.org)
    上注册自己的账户。一旦这样做，就用您的用户名替换 `demo`。
- en: Now that we have the ability to map coordinates to postal codes, we will need
    to make an AJAX request to make the call and retrieve the data. We will be using
    jQuery to assist us in making the request.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了将坐标映射到邮政编码的能力，我们需要发送一个 AJAX 请求来调用并检索数据。我们将使用 jQuery 来帮助我们进行请求。
- en: AJAX ain't just a cleaning product
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AJAX 不仅仅是一种清洁产品
- en: Standing for Asynchronous JavaScript and XML, AJAX is a technique whereby the
    `XMLHttpRequest` object is used to make a call to the server for additional content,
    save state, poll for resources, and so on. It is a useful way of extending your
    page with additional functionality without a page refresh.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 代表异步 JavaScript 和 XML（Asynchronous JavaScript and XML），AJAX 是一种技术，通过使用 `XMLHttpRequest`
    对象调用服务器以获取额外内容、保存状态、轮询资源等。这是一种在不刷新页面的情况下扩展页面功能的有用方式。
- en: 'The jQuery library ([http://jquery.com](http://jquery.com)) makes it fairly
    easy and straightforward to make AJAX requests in a cross-browser compatible way.
    Take a look at the following code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 库（[http://jquery.com](http://jquery.com)）使得在跨浏览器兼容的方式下进行 AJAX 请求变得相当简单直接。看看以下代码：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You simply need to set the URL and arguments. You can define a success event
    handler and an error event handler. The success handler will be invoked when the
    AJAX request successfully completes passing the payload as an argument. The error
    handler will be invoked when the AJAX request returns anything other than a 200
    status code.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需设置 URL 和参数。您可以定义一个成功事件处理程序和一个错误事件处理程序。当 AJAX 请求成功完成并传递有效负载作为参数时，将调用成功处理程序。当
    AJAX 请求返回除 200 状态码之外的内容时，将调用错误处理程序。
- en: 'Add the following code snippet to your `movienow.geolocation` object:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码片段添加到您的 `movienow.geolocation` 对象中：
- en: '[PRE18]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We are showing our errors using an `alert` popup, but for a final application
    we should define a CSS styled DOM to show notifications and errors.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用 `alert` 弹出窗口显示错误，但对于最终应用程序，我们应该定义一个 CSS 样式的 DOM 来显示通知和错误。
- en: 'Replace the contents of `locationCallback` with the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `locationCallback` 的内容替换为以下内容：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Upon invocation of the `successCallback` function, we are going to take the
    `Positon` object and pass it along to our `reverseGeocode` method, which makes
    an AJAX request to the `geonames.org` web service to retrieve the postal codes
    for the location of the device. In the success handler for the AJAX request, we
    extract the postal codes from the JSON object and put them into an array. We then
    display the array on the page. Note the `objectifyJSON` method. We do this because
    some browsers will automatically marshal the payload data into an object while
    others treat it as a string.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 `successCallback` 函数时，我们将获取 `Positon` 对象并将其传递给我们的 `reverseGeocode` 方法，该方法通过向
    `geonames.org` 网络服务发出 AJAX 请求来检索设备的邮政编码。在 AJAX 请求的成功处理程序中，我们从 JSON 对象中提取邮政编码并将它们放入一个数组中。然后我们在页面上显示这个数组。注意
    `objectifyJSON` 方法。我们这样做是因为一些浏览器会自动将有效负载数据打包成一个对象，而其他浏览器则将其视为一个字符串。
- en: 'The `movienow.geolocation.js` file should now look like the following code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`movienow.geolocation.js` 文件现在应该看起来像以下代码：'
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'When you click on **Find Movies**, you should see the following as shown in
    the screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击 **查找电影** 时，您应该看到以下内容，如截图所示：
- en: '![AJAX ain''t just a cleaning product](img/5689_04_05.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![AJAX 不只是清洁产品](img/5689_04_05.jpg)'
- en: From postal codes to showtimes
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从邮政编码到放映时间
- en: Now that we have postal codes, we can map those to movie showtimes. Unfortunately,
    there is no free web service from which we can get this kind of data. All is not
    lost however. [Moviefone.com](http://Moviefone.com) does offer feeds based on
    postal codes. One wrinkle however is that we cannot easily get feed data via JavaScript
    because of cross-domain limitations. The cross-domain Ajax library only works
    for services that return JSON. To work around this, we can create a proxy.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了邮政编码，我们可以将这些映射到电影放映时间。不幸的是，没有免费的网络服务可以从那里获取这类数据。然而，并非全无希望。[Moviefone.com](http://Moviefone.com)
    提供基于邮政编码的馈送。但是有一个问题，由于跨域限制，我们无法轻松地通过 JavaScript 获取馈送数据。跨域 Ajax 库仅适用于返回 JSON 的服务。为了解决这个问题，我们可以创建一个代理。
- en: 'Create a file called `movielistings.php`. Add the following to your newly created
    file:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `movielistings.php` 的文件。将以下内容添加到您新创建的文件中：
- en: '[PRE21]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This is a simple PHP file that makes requests to Moviefone.com's closest theaters
    feed based on a string of postal codes passed in the query string, and converts
    the output into JSON. To run this, you will need to make sure you have PHP installed
    on your machine. Otherwise, we could easily write something similar using JSP,
    ASP.NET, or Node.js for example.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的 PHP 文件，它根据查询字符串中传递的邮政编码字符串向 Moviefone.com 的最近影院馈送发出请求，并将输出转换为 JSON。要运行此文件，您需要确保您的机器上已安装
    PHP。否则，我们可以轻松地使用 JSP、ASP.NET 或 Node.js 等编写类似的内容。
- en: 'Once we have our movie listings proxy service, we can add the following to
    `movienow.geolocation`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了我们的电影列表代理服务，我们可以在 `movienow.geolocation` 中添加以下内容：
- en: '[PRE22]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once done, replace the line in the `reverseGeocode` method where we are populating
    `#movies-near-me` with the following line of code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，将 `reverseGeocode` 方法中填充 `#movies-near-me` 的那一行替换为以下代码：
- en: '[PRE23]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We have thus added three more methods: `getShowtimes`, `constructMoviesArray`,
    and `displayShowtimes`. The `getShowtimes` method makes an AJAX request to the
    movie listings proxy, grabs the JSON data returned and calls `constructMoviesArray`
    to extract the relevant data and remove duplicates, and then calls `displayShowtimes`
    to display the data.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们增加了三个新方法：`getShowtimes`、`constructMoviesArray` 和 `displayShowtimes`。`getShowtimes`
    方法向电影列表代理发送 AJAX 请求，获取返回的 JSON 数据，并调用 `constructMoviesArray` 提取相关数据并删除重复项，然后调用
    `displayShowtimes` 显示数据。
- en: 'The final `movienow.geolocation.js` file should now look like the following
    code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的 `movienow.geolocation.js` 文件现在应该看起来像以下代码：
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'When you click on the **Find Movies** button, you should see the following
    screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击 **查找电影** 按钮时，你应该看到以下截图：
- en: '![From postal codes to showtimes](img/5689_04_06.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![从邮政编码到放映时间](img/5689_04_06.jpg)'
- en: Of course, we have much more data to show, but we will get to that in later
    chapters.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们还有更多数据要展示，但将在后面的章节中介绍。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we walked through how the geolocation API works and how to
    use it. We added a button to our enterprise application and wired it to make a
    request to the geolocation API. We used the coordinates from the `Position` object
    returned to make an AJAX request to a web service to get postal codes for those
    coordinates. Using the postal codes, we made a request to a feed to get movie
    showtimes data and we displayed that data on the page.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了地理位置 API 的工作原理以及如何使用它。我们在企业应用中添加了一个按钮，并将其连接到地理位置 API 以发送请求。我们使用返回的
    `Position` 对象的坐标向一个网络服务发送 AJAX 请求以获取这些坐标的邮政编码。使用邮政编码，我们向一个源请求电影放映时间数据，并在页面上显示这些数据。
- en: In the next chapter, we will go over displaying the wealth of data we made available
    to ourselves in this chapter. We will cover CSS in more depth and talk about what's
    new in CSS3\. We will even build some nifty CSS3 effects to make our enterprise
    application look interesting and inviting.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍在本章中为我们自己提供的大量数据。我们将更深入地介绍 CSS，并讨论 CSS3 中的新特性。我们甚至将构建一些巧妙的 CSS3 特效，使我们的企业应用看起来更有趣、更有吸引力。
