- en: Chapter 11. Preparing for Production and Themes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。为生产准备和主题
- en: 'We completed our application in the preceding chapter. Now, it is time to create
    a nice theme to put a personal touch on the application and also prepare to deploy
    it on production. After all, we have been working on the development environment,
    and when we want to go live, we cannot simply deploy all the files; we need to
    do some preparation first. So, in this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前一章完成了我们的应用程序。现在，是时候创建一个漂亮的主题，为应用程序增添个人风格，并准备将其部署到生产环境中。毕竟，我们一直在开发环境中工作，当我们想要上线时，我们不能简单地部署所有文件；我们首先需要进行一些准备。因此，在本章中，我们将涵盖：
- en: Creating custom themes
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义主题
- en: Packaging the application for production
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为生产打包应用程序
- en: Before we start
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始之前
- en: The main tool we are going to use in this chapter is Sencha Cmd. With Sencha
    Cmd, we will be able to create custom themes and make the production build. We
    always need to make sure the Sencha Cmd version we are using is compatible with
    the Ext JS version we are using. If you downloaded the preceding version of Ext
    JS from the Sencha website, please also get the latest Sencha Cmd (it will be
    compatible).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将使用的主要工具是 Sencha Cmd。使用 Sencha Cmd，我们将能够创建自定义主题并执行生产构建。我们始终需要确保我们使用的 Sencha
    Cmd 版本与我们所使用的 Ext JS 版本兼容。如果你从 Sencha 网站下载了前面的 Ext JS 版本，请同时获取最新的 Sencha Cmd（它将是兼容的）。
- en: 'So far, this is what we have developed throughout this book:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这是我们在这本书中开发的内容：
- en: '![Before we start](img/0457OT_11_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![开始之前](img/0457OT_11_01.jpg)'
- en: All the code we created is inside `app`, `index.html`, `php`, `resources` (custom
    image icon, font, and custom locale files), and `sass` (custom application CSS).
    The other folders and files were created by Sencha Cmd, as you learned in [Chapter
    2](ch02.html "Chapter 2. Getting Started"), *Getting Started*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的所有代码都位于 `app`、`index.html`、`php`、`resources`（自定义图像图标、字体和自定义区域文件）以及 `sass`（自定义应用程序
    CSS）中。其他文件夹和文件是由 Sencha Cmd 创建的，正如你在[第 2 章](ch02.html "第 2 章。入门")中学习的，*入门*。
- en: Creating a new theme
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新主题
- en: The first task we will perform in this chapter is to create a new theme for
    our project. To do so, we will use Sencha Cmd and the terminal application of
    the operating system.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将执行的第一项任务是为我们项目创建一个新主题。为此，我们将使用 Sencha Cmd 和操作系统的终端应用程序。
- en: Sencha Cmd now has the capability to generate the complete file structure we
    need to create a brand new theme.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Cmd 现在具有生成我们创建全新主题所需完整文件结构的能力。
- en: 'So, let''s create a new theme step by step. First, with the terminal open,
    change the directory to the project''s root folder. Then, we will use the following
    command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们一步一步地创建一个新主题。首先，在终端打开后，将目录更改为项目的根文件夹。然后，我们将使用以下命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output for the preceding command is as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '![Creating a new theme](img/0457OT_11_02.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![创建新主题](img/0457OT_11_02.jpg)'
- en: 'Here, `masteringextjs-theme` is the name of our theme. This command will create
    a new directory with the name of our theme inside the `packages` folder, as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`masteringextjs-theme` 是我们主题的名称。此命令将在 `packages` 文件夹内创建一个以我们主题命名的新的目录，如下所示：
- en: '![Creating a new theme](img/0457OT_11_03.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![创建新主题](img/0457OT_11_03.jpg)'
- en: The `package.json` file contains some configurations of the theme used by Sencha
    Cmd, such as theme name, version, and dependencies.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 文件包含 Sencha Cmd 使用的主题的一些配置，例如主题名称、版本和依赖项。'
- en: 'The `sass` directory contains all the Sass files of our theme. Inside this
    directory, we will find three more main directories:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`sass` 目录包含我们主题的所有 Sass 文件。在这个目录内，我们将找到三个更多的主目录：'
- en: '`var`: This contains Sass variables.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`var`：这包含 Sass 变量。'
- en: '`src`: This contains Sass rules and mixins. These rules and mixins use variables
    declared on files inside the `sass/var` directory.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`：这包含 Sass 规则和混入。这些规则和混入使用在 `sass/var` 目录内文件中声明的变量。'
- en: '`etc`: This contains additional utility functions and mixins.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etc`：这包含额外的实用函数和混入。'
- en: All the files that we create must match the classpath of the component we are
    styling. For example, if we want to style the button component, we need to create
    the styles inside the file `sass/var/button/Button.scss`; if want to style the
    Component Panel, we need to create styles inside the file `sass/var/panel.scss`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的所有文件都必须匹配我们正在样式的组件的类路径。例如，如果我们想样式化按钮组件，我们需要在文件 `sass/var/button/Button.scss`
    内创建样式；如果我们想样式化组件面板，我们需要在文件 `sass/var/panel.scss` 内创建样式。
- en: The `resources` folder contains images and other static resources that will
    be used by our theme.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`resources` 文件夹包含我们的主题将使用的图像和其他静态资源。'
- en: The `overrides` folder contains all the JavaScript overrides to components that
    might be required for theming these components.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`overrides` 文件夹包含所有可能用于主题化这些组件的组件 JavaScript 覆盖。'
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Spend some time exploring the contents of the following directories that we
    can find inside the `packages` folder to get more familiar with this way of organizing
    the Sass files: `ext-theme-classic`, `ext-theme-gray`, and `ext-theme-neptune`.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 花些时间探索 `packages` 文件夹内以下目录的内容，以更熟悉这种组织 Sass 文件的方式：`ext-theme-classic`、`ext-theme-gray`
    和 `ext-theme-neptune`。
- en: 'By default, any theme that we create uses `ext-theme-classic` as a base (the
    classic Ext JS blue theme). We are going to change to the `Neptune` theme that
    we have been using until now. To change the theme base, open the `package.json`
    file and locate the `extend` property. Change its value from `ext-theme-classic`
    to `ext-theme-neptune`. The content of `package.json` will be something like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，我们创建的任何主题都使用 `ext-theme-classic` 作为基础（经典的 Ext JS 蓝色主题）。我们将更改为我们一直使用的 `Neptune`
    主题。要更改主题基础，打开 `package.json` 文件并找到 `extend` 属性。将其值从 `ext-theme-classic` 更改为 `ext-theme-neptune`。`package.json`
    的内容将类似于以下内容：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can use any Ext JS theme as the base theme of our custom theme. These are
    the possible options:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将任何 Ext JS 主题作为自定义主题的基础主题。以下是一些可能的选项：
- en: '![Creating a new theme](img/0457OT_11_04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![创建新主题](img/0457OT_11_04.jpg)'
- en: We can use any theme package from Ext JS. We can find these packages inside
    `ext/packages`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Ext JS 中的任何主题包。这些包可以在 `ext/packages` 内找到。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can try the Theme Viewer example from the Ext JS example pages to try each
    theme.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 Ext JS 示例页面尝试 Theme Viewer 示例，以尝试每个主题。
- en: 'After the theme structure is created, and we have changed the base theme, let''s
    build it. To build it, we are going to use the terminal and Sencha Cmd again.
    Change the directory to `packages/masteringextjs-theme` and type the following
    command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建主题结构并更改基础主题之后，让我们来构建它。为了构建它，我们将再次使用终端和 Sencha Cmd。将目录更改为 `packages/masteringextjs-theme`
    并输入以下命令：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result will be somewhat like the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将类似于以下截图：
- en: '![Creating a new theme](img/0457OT_11_05.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![创建新主题](img/0457OT_11_05.jpg)'
- en: 'The result of this command will be the creation of the `build` directory inside
    the `packages/masteringextjs-theme` folder, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的结果将在 `packages/masteringextjs-theme` 文件夹内创建 `build` 目录，如下所示：
- en: '![Creating a new theme](img/0457OT_11_06.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![创建新主题](img/0457OT_11_06.jpg)'
- en: Inside this `build` folder, we can find the `resources` folder, and inside the
    resources folder we can find a file named `masteringextjs-theme-all.css`, which
    contains all the styles for all the components we styled on our theme (which is
    none so far, but we will get there). Even though we created a complete theme (styled
    all components), it is not 100 percent certain that we will use all the components
    in our application. Sencha Cmd has the ability to filter and create a CSS file
    with only the components we are going to use in our project. For this reason,
    we do not need to include `masteringextjs-theme-all.css` manually in our application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 `build` 文件夹内，我们可以找到 `resources` 文件夹，在资源文件夹内我们可以找到一个名为 `masteringextjs-theme-all.css`
    的文件，它包含我们在主题上样式化的所有组件的样式（目前还没有，但我们会达到那里）。尽管我们创建了一个完整的主题（样式化所有组件），但我们不能100%确定我们将在我们的应用程序中使用所有这些组件。Sencha
    Cmd 有能力过滤并创建一个只包含我们将在项目中使用的组件的 CSS 文件。因此，我们不需要手动将 `masteringextjs-theme-all.css`
    包含在我们的应用程序中。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A `masteringextjs-theme`.`pkg` file will also be created inside `build/ masteringextjs-theme`.
    We can use this file to distribute the theme package to other developers. For
    more information, please read [http://docs.sencha.com/cmd/5.x/cmd_packages/cmd_packages.html](http://docs.sencha.com/cmd/5.x/cmd_packages/cmd_packages.html).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `build/masteringextjs-theme` 内部也将创建一个 `masteringextjs-theme.pkg` 文件。我们可以使用此文件将主题包分发给其他开发者。有关更多信息，请参阅
    [http://docs.sencha.com/cmd/5.x/cmd_packages/cmd_packages.html](http://docs.sencha.com/cmd/5.x/cmd_packages/cmd_packages.html)。
- en: 'So let''s set up our project so that it can use our theme. Inside `app.json`,
    locate the theme entry and change it to:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们设置我们的项目，使其可以使用我们的主题。在 `app.json` 中，找到主题条目并将其更改为：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With `sencha app watch` being executed in a terminal, we will be able to see
    that `Packt-all.css` will be overwritten. When we refresh the application, there
    will be no changes because we have not started to customize our theme yet.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当在终端中执行`sencha app watch`时，我们将能够看到`Packt-all.css`将被覆盖。当我们刷新应用程序时，将不会有任何变化，因为我们还没有开始自定义我们的主题。
- en: For the next steps, it is very important to keep `sencha app watch` executed
    while we make the changes. This way we will be able to see the modifications by
    simply refreshing the browser.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行下一步操作时，非常重要的一点是在我们做出更改的同时保持`sencha app watch`运行。这样我们只需刷新浏览器就能看到所做的修改。
- en: Changing the base color
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改基本颜色
- en: 'Let''s start customizing the theme right now! Let''s go back to the `packages/masteringextjs-theme`
    folder. Here''s how we customize the theme:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在开始自定义主题！让我们回到`packages/masteringextjs-theme`文件夹。这是我们的主题自定义方式：
- en: 'Inside the `sass/var` folder, create a new file named `Component.scss`. Let''s
    add the following content to it:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`sass/var`文件夹内，创建一个名为`Component.scss`的新文件。让我们向其中添加以下内容：
- en: '[PRE4]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code, we are declaring a Sass variable named `$base-color`
    with a greenish value. This will change the base color of the theme from blue
    to green. Let's apply the changes on our theme and see the changes.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们声明了一个名为`$base-color`的Sass变量，其值为绿色。这将把主题的基本颜色从蓝色改为绿色。让我们在我们的主题上应用这些更改并查看结果。
- en: Open the browser and we will have something like the following screenshot:![Changing
    the base color](img/0457OT_11_07.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，我们会看到如下截图：![更改基本颜色](img/0457OT_11_07.jpg)
- en: With a single line, we have a complete new theme! We can continue to add more
    styles to our custom theme and customize each and every component.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 只用一行代码，我们就得到了一个全新的主题！我们可以继续添加更多样式到我们的自定义主题，并自定义每一个组件。
- en: Customizing components
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义组件
- en: 'Let''s make some changes in our theme. Inside `Component.scss`, add the following
    code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的主题中进行一些更改。在`Component.scss`内部，添加以下代码：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output will be the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是以下内容：
- en: '![Customizing components](img/0457OT_11_08.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![自定义组件](img/0457OT_11_08.jpg)'
- en: Note how the button background, the Grid Column header, and the Panel header
    inside the accordion menu have changed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注意按钮背景、网格列标题以及折叠菜单内的面板标题是如何发生变化的。
- en: 'Let''s go ahead and create some other files so that we can add more custom
    styles, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建一些其他文件，以便我们可以添加更多自定义样式，如下所示：
- en: Create the following files and folders:![Customizing components](img/0457OT_11_09.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下文件和文件夹：![自定义组件](img/0457OT_11_09.jpg)
- en: 'Inside `Accordion.scss`, we will add the following code:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Accordion.scss`内部，我们将添加以下代码：
- en: '[PRE6]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will change the color of the header title of the panels inside the accordion
    menu.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将改变折叠菜单内面板标题的颜色。
- en: 'Inside `Panel.scss`, we will add the following code:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Panel.scss`内部，我们将添加以下代码：
- en: '[PRE7]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This color will be used to create a different shade of green for the Panel component.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此颜色将用于创建面板组件的不同绿色色调。
- en: 'Inside `Bar.scss`, we will add the following code:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Bar.scss`内部，我们将添加以下代码：
- en: '[PRE8]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will change the gradient of the tab panel bar. Possible values can be found
    at [http://goo.gl/fapTBA](http://goo.gl/fapTBA).
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将改变标签面板栏的渐变效果。可能的值可以在[http://goo.gl/fapTBA](http://goo.gl/fapTBA)找到。
- en: 'Inside `Tab.scss`, we will add the following code:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Tab.scss`内部，我们将添加以下代码：
- en: '[PRE9]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will change the tab color to different shades of green.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将改变标签的颜色，使其呈现不同的绿色色调。
- en: 'So far, this is the output we have:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止，这是我们得到的输出：
- en: '![Customizing components](img/0457OT_11_10.jpg)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![自定义组件](img/0457OT_11_10.jpg)'
- en: Try comparing it to the previous output screenshot.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尝试将其与之前的输出截图进行比较。
- en: 'Inside `Button.scss`, we will add the following code:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Button.scss`内部，我们将添加以下代码：
- en: '[PRE10]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will be the output for our new custom buttons:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将是我们的新自定义按钮的输出：
- en: '![Customizing components](img/0457OT_11_11.jpg)'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![自定义组件](img/0457OT_11_11.jpg)'
- en: The buttons (normal ones and the ones placed inside a toolbar) look very different
    now.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮现在看起来非常不同（包括普通按钮和放置在工具栏内的按钮）。
- en: Some useful tips while creating new themes
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建新主题时的一些有用提示
- en: There is no recipe or detailed tutorial on how to create a completely customized
    theme in Ext JS. Usually, the names of the Sass variables used by Ext JS are self-explanatory.
    For example, `$button-default-glyph-color` is the color used to render the glyphs
    for buttons.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ext JS中，没有关于如何创建完全自定义主题的食谱或详细教程。通常，Ext JS使用的Sass变量的名称是自解释的。例如，`$button-default-glyph-color`是用于渲染按钮图标的颜色。
- en: 'The following are some tips that could prove useful in the process of creating
    Ext JS themes:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些在创建 Ext JS 主题过程中可能有用的提示：
- en: Try learning Sass and Compass. Sass and Compass have mixins and useful functions
    to work with colors, among other functionalities ([http://sass-lang.com/documentation/file.SASS_REFERENCE.html](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)).
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试学习 Sass 和 Compass。Sass 和 Compass 有混合和有用的功能来处理颜色，以及其他功能（[http://sass-lang.com/documentation/file.SASS_REFERENCE.html](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)）。
- en: Take a look at the variables and the current values used by the theme you are
    using as the base theme. You can find its source code at `ext/packages/ext-theme-neptune/sass/var`.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看作为基础主题使用的主题的变量和当前值。你可以在 `ext/packages/ext-theme-neptune/sass/var` 中找到其源代码。
- en: Experiment! The best way to learn something new is to practice it. A good approach
    can be to copy the original file (for example, `Button.scss`) from the directory
    listed previously, start changing the variable values, and see what happens!
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验！学习新事物的最佳方式是实践。一个不错的方法是复制之前列出的目录中的原始文件（例如，`Button.scss`），开始更改变量值，看看会发生什么！
- en: While experimenting, try using different colors (with contrast, such as red,
    yellow, black, blue, or any other color of your preference) so you can see exactly
    what is being changed in the theme!
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实验过程中，尝试使用不同的颜色（如红色、黄色、黑色、蓝色或任何你喜欢的颜色，以便对比），这样你就可以确切地看到主题中发生了什么变化！
- en: Consult the documentation. Each class in Ext JS has a section of the Sass variables
    used, with a description and possible values. Make sure to make the most of it:![Some
    useful tips while creating new themes](img/0457OT_11_12.jpg)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 咨询文档。Ext JS 中的每个类都有一个使用 Sass 变量的部分，包括描述和可能的值。确保充分利用它：![创建新主题时的有用提示](img/0457OT_11_12.jpg)
- en: Creating custom UIs
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义 UI
- en: Ext JS also supports UIs, which are special themes that can be applied to specific
    components. For example, let's say that for the buttons **Print**, **Export to
    PDF** and **Export to Excel**, we want to apply a different theme. We can create
    a UI.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS 还支持 UI，这是可以应用到特定组件上的特殊主题。例如，假设我们想要为 **打印**、**导出为 PDF** 和 **导出为 Excel**
    按钮应用不同的主题。我们可以创建一个 UI。
- en: The first step is checking the documentation for what UIs, known as **CSS Mixins**,
    are available:![Creating custom UIs](img/0457OT_11_13.jpg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是检查文档，了解可用的 UI，即称为 **CSS Mixins** 的内容：![创建自定义 UI](img/0457OT_11_13.jpg)
- en: 'Then, check all the variables needed to create this mixin. We can declare the
    custom variables inside the `masteringextjs-theme/sass/var/button/Button.scss`
    file we created earlier, as follows:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，检查创建此混合所需的所有变量。我们可以在之前创建的 `masteringextjs-theme/sass/var/button/Button.scss`
    文件中声明自定义变量，如下所示：
- en: '[PRE11]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, we are going to create a new file `masteringextjs-theme/sass/src/button/Button.scss`
    with our custom UI:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个名为 `masteringextjs-theme/sass/src/button/Button.scss` 的新文件，包含我们的自定义
    UI：
- en: '[PRE12]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that we are assigning our custom variables to the mixin variables needed
    to create this UI. As the button has three sizes in Ext JS, for now, we are going
    to declare the custom UI only for the small button, but it can be done for the
    other sizes as well.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们正在将自定义变量分配给创建此 UI 所需的混合变量。由于 Ext JS 中的按钮有三种大小，目前我们只为小按钮声明自定义 UI，但也可以为其他大小做同样的事情。
- en: Applying the UI
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用 UI
- en: 'In our code, we are going to create a new file `app/view/base/CustomButton.js`
    with the following content:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中，我们将创建一个名为 `app/view/base/CustomButton.js` 的新文件，内容如下：
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, we are going to replace the `xtype` class of the buttons to which we
    want to apply this UI (creating a super class is easier than applying the `ui`
    configuration to each component, but the choice of doing it or not is up to you).
    We are going to replace the `xtype` configuration for the **Print**, **Export
    to PDF** and **Export to Excel** buttons as shown by the following code (`Films.js`
    file):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将替换我们想要应用此 UI 的按钮的 `xtype` 类（创建一个超级类比将 `ui` 配置应用到每个组件上更容易，但是否这样做取决于你）。我们将替换
    `Print`、`Export to PDF` 和 `Export to Excel` 按钮的 `xtype` 配置，如下面的代码所示（`Films.js`
    文件）：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If we try to execute our application again, this will be the output:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次尝试执行我们的应用程序，这将是我们得到的输出：
- en: '![Applying the UI](img/0457OT_11_14.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![应用 UI](img/0457OT_11_14.jpg)'
- en: Note that the **Print** and **Export** buttons look different from the **Add**
    button.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，**打印**和**导出**按钮与**添加**按钮看起来不同。
- en: We can create as many UIs as we need and for any component that supports it.
    It is also possible to create UIs that are not part of a theme, meaning we can
    create it inside the `masteringextjs/sass` folder following the same structure
    we followed in this topic.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建我们需要的任意多个UI，并且对于任何支持它的组件。也有可能创建不属于主题的UI，这意味着我们可以在`masteringextjs/sass`文件夹内创建它，遵循我们在本主题中遵循的相同结构。
- en: Now, all you have to do is free the designer who exists inside yourself!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你只需要释放出你内心存在的那个设计师！
- en: Packaging the application for production
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为生产打包应用程序
- en: Our theme is created, so now the only thing left is to make the production build
    and deploy the code on the production web server. Again, we will use Sencha Cmd
    to do it for us.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主题已经创建，所以现在唯一剩下的事情就是进行生产构建并将代码部署到生产Web服务器上。同样，我们将再次使用Sencha Cmd来完成这项工作。
- en: 'To do a production build, we need to have a terminal opened. We also need to
    change the directory to the application''s root directory and type the following
    command:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要进行生产构建，我们需要打开一个终端。我们还需要将目录切换到应用程序的根目录，并输入以下命令：
- en: '[PRE15]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here''s how the command looks on the terminal:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是终端上的命令外观：
- en: '![Packaging the application for production](img/0457OT_11_15.jpg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![为生产打包应用程序](img/0457OT_11_15.jpg)'
- en: Once the command execution is completed, it will create a new directory called
    `build/production/NameofTheApp`. As our application namespace is `Packt`, it creates
    the directory `build/production/Packt`, as follows:![Packaging the application
    for production](img/0457OT_11_16.jpg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦命令执行完成，它将创建一个名为`build/production/NameofTheApp`的新目录。由于我们的应用程序命名空间是`Packt`，它创建了`build/production/Packt`目录，如下所示：![为生产打包应用程序](img/0457OT_11_16.jpg)
- en: What this command does is get all the code we developed (inside the `app` folder)
    plus the Ext JS code we really need to run the application and put it inside the
    `all-classes.js` file. Then, using **YUI Compressor**, Sencha Cmd will minimize
    the code and obfuscate the JavaScript code; this way, we will have a very small
    JavaScript file that the user will need to load. Also, Sencha Cmd will evaluate
    all the components our application is using, filter the CSS that is not needed,
    and put it inside the `resources/Packt-all.css` file. All our custom images (icon
    images) will also be copied from the development environment to the `production`
    folder (inside the `resources` folder as well).
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个命令的作用是获取我们开发的全部代码（位于`app`文件夹内）以及运行应用程序所需的Ext JS代码，并将它们放入`all-classes.js`文件中。然后，使用**YUI
    Compressor**，Sencha Cmd将最小化代码并混淆JavaScript代码；这样，我们将得到一个非常小的JavaScript文件，用户需要加载它。此外，Sencha
    Cmd将评估我们应用程序使用的所有组件，过滤掉不需要的CSS，并将其放入`resources/Packt-all.css`文件中。所有我们的自定义图片（图标图片）也将从开发环境复制到`production`文件夹（同样位于`resources`文件夹内）。
- en: The next step now is to make sure that the production build is working as expected.
    To access the development environment we use `http://localhost/masteringextjs`.
    To test the production build, we need to access `http://localhost/masteringextjs/build/production/Packt`.
    When we test it, we will see that it is not working as we really expect. We will
    get some errors.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是确保生产构建按预期工作。要访问开发环境，我们使用`http://localhost/masteringextjs`。要测试生产构建，我们需要访问`http://localhost/masteringextjs/build/production/Packt`。当我们测试时，我们会发现它并没有按我们预期的那样工作。我们会遇到一些错误。
- en: Next, we need to copy the `php` folders to the `production` folder as well,
    as shown in the following screenshot:![Packaging the application for production](img/0457OT_11_17.jpg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要将`php`文件夹也复制到`production`文件夹中，如下截图所示：![为生产打包应用程序](img/0457OT_11_17.jpg)
- en: We should also copy `ext/packages/ext-locale/build` and the locale files we
    are going to use.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们也应该复制`ext/packages/ext-locale/build`以及我们将要使用的区域设置文件。
- en: And now, we can test the application again. It should work as expected.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们可以再次测试应用程序。它应该按预期工作。
- en: Compiling ext-locale
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译ext-locale
- en: 'Here''s a quick note about the `ext-locale` package: if you are using only
    one locale, you can add the `ext-locale` package in `requires` of `app.json` and
    a new entry `"locale" : "es"` with the code of the locale you want to use. Ext
    JS will compile the required files.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '这里有一个关于`ext-locale`包的快速说明：如果你只使用一个区域设置，你可以在`app.json`的`requires`中添加`ext-locale`包，并添加一个新的条目`"locale"
    : "es"`，其中包含你想要使用的区域设置的代码。Ext JS将编译所需的文件。'
- en: 'If you are using multiple locales, there are two options: doing like we did
    (manually copying the files) or making a production build for each locale. You
    can see an example of how to do it by exploring `app.json` and the source code
    of the **EXT JS Kitchen Sink** example ([http://dev.sencha.com/ext/5.0.1/examples/kitchensink/](http://dev.sencha.com/ext/5.0.1/examples/kitchensink/)).'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用多个区域设置，有两种选择：像我们这样做（手动复制文件）或者为每个区域设置制作生产构建。您可以通过探索`app.json`和**EXT JS Kitchen
    Sink**示例的源代码（[http://dev.sencha.com/ext/5.0.1/examples/kitchensink/](http://dev.sencha.com/ext/5.0.1/examples/kitchensink/)）来查看如何操作。
- en: What to deploy in production
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生产环境中要部署的内容
- en: Always remember that we have the `app` folder and all the code developed as
    our development environment. And inside the `production` folder, we have all the
    code that should be deployed in production.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 总是记住，我们有一个`app`文件夹，以及所有作为开发环境开发的代码。而在`production`文件夹中，我们拥有所有应该在生产环境中部署的代码。
- en: 'So, let''s say we want to deploy this application right now. Simply transfer
    all the content from `masteringextjs/build/production/Packt` to the desired folder
    on your web server, as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，假设我们现在想部署这个应用程序。只需将`masteringextjs/build/production/Packt`中的所有内容传输到您的 Web
    服务器上的目标文件夹，如下所示：
- en: '![What to deploy in production](img/0457OT_11_18.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![生产环境中要部署的内容](img/0457OT_11_18.jpg)'
- en: Happy production code!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎使用生产代码！
- en: Benefits
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 好处
- en: What are the benefits of the production build? Can we just deploy the development
    code? We can deploy the development code as is in production, but it is not recommended.
    With the production build, we boost the performance while loading the files, but
    the file is minimized, which makes the code harder to read as well.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 生产构建有哪些好处？我们能否直接部署开发代码？我们可以在生产环境中直接部署开发代码，但并不推荐。使用生产构建，我们在加载文件时提升了性能，但文件被最小化，这也使得代码更难以阅读。
- en: 'For example, let''s do the following testing: open the application on the browser,
    log in, and open the **Actors** screen from the static data module.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们进行以下测试：在浏览器中打开应用程序，登录，并从静态数据模块打开**演员**屏幕。
- en: 'Using the development code, we will have the following result from Chrome Developer
    Tools (or Firebug):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用开发代码，我们从 Chrome 开发者工具（或 Firebug）将得到以下结果：
- en: '![Benefits](img/0457OT_11_19.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![好处](img/0457OT_11_19.jpg)'
- en: The application made **657** **requests**, resulting in **7.7 MB** of data transferred
    to the user, and it took **17.50 s** to complete it. This is a lot, and talking
    about **7.7 MB** to be transferred to the user is unacceptable!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序发出了**657**次**请求**，导致向用户传输了**7.7 MB**的数据，完成整个过程耗时**17.50 秒**。这已经很多了，而且提到向用户传输**7.7
    MB**是不可接受的！
- en: 'Now let''s see the results using the production build:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看使用生产构建的结果：
- en: '![Benefits](img/0457OT_11_20.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![好处](img/0457OT_11_20.jpg)'
- en: 'The application made **47 requests** and **1.9 MB transferred**. The most important
    change is the size of the data transferred: from **7.7 MB** to **1.9 MB**! This
    is a great improvement although **1.9 MB** is still a large amount of data to
    be transferred. The files will be cached, and this number will decrease even more.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序发出了**47**次请求，并**传输了1.9 MB**的数据。最重要的变化是传输的数据大小：从**7.7 MB**减少到**1.9 MB**！这是一个巨大的改进，尽管**1.9
    MB**仍然是一个很大的数据传输量。文件将被缓存，这个数字还会进一步减少。
- en: 'Another thing to notice is the files that are being loaded. In the development
    environment, we can see each Ext JS class being loaded by the browser:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 另一点需要注意是正在加载的文件。在开发环境中，我们可以看到浏览器正在加载每个 Ext JS 类：
- en: '![Benefits](img/0457OT_11_21.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![好处](img/0457OT_11_21.jpg)'
- en: At the end of it, it is going to be more than 400 JavaScript files being loaded
    just to render the **Login** screen.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，仅仅为了渲染**登录**屏幕，就需要加载超过 400 个 JavaScript 文件。
- en: 'If we try the production build, we will have the following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试生产构建，我们会得到以下结果：
- en: '![Benefits](img/0457OT_11_22.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![好处](img/0457OT_11_22.jpg)'
- en: Only one JavaScript file is being loaded with the application's source code
    and the required Ext JS SDK code (`app.js`).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序只加载了一个 JavaScript 文件，即应用程序的源代码和所需的 Ext JS SDK 代码（`app.js`）。
- en: So, for performance purposes, always deploy the production build. Use the development
    code only for development purposes.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，出于性能考虑，始终部署生产构建。仅将开发代码用于开发目的。
- en: Note
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If the application starts to grow, the amount of data that will be transferred
    to the browser will be greater than 2 MB, which is not good. You can create separate
    small applications and combine them as in a portal application. This way, the
    user will be able to download only the application files to the portion of the
    application that is going to be used at that moment and will not need to download
    all the application''s source at once. This link contains a good discussion about
    the topic: [http://goo.gl/az8uVT](http://goo.gl/az8uVT).'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序开始增长，传输到浏览器中的数据量将超过 2 MB，这并不好。您可以创建独立的小应用程序，并将它们像在门户应用程序中一样组合起来。这样，用户将能够只下载即将使用的应用程序部分的应用程序文件，而无需一次性下载整个应用程序的源代码。此链接包含有关此主题的良好讨论：[http://goo.gl/az8uVT](http://goo.gl/az8uVT)。
- en: Summary
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to create a new theme, and we also learned how
    to create custom component UIs. You learned why it is important to make a production
    build and how to do it, including the difference between the files from the development
    environment to the production environment.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建新的主题，我们还学习了如何创建自定义组件 UI。您了解到为什么制作生产构建很重要，以及如何进行，包括开发环境与生产环境之间文件的区别。
- en: I hope you have enjoyed this book! Now, let the creativity flow to create really
    awesome Ext JS apps!
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望您喜欢这本书！现在，让创造力流淌，创造出真正出色的 Ext JS 应用程序！
