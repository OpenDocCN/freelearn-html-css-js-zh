- en: '20'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '20'
- en: 'SportsStore: Administration'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SportsStore：管理
- en: In this chapter, I will create the *SportsStore* administration features, which
    will allow authorized users to edit the product catalog and change the shipping
    status of customer orders.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将创建 *SportsStore* 管理功能，这将允许授权用户编辑产品目录并更改客户订单的配送状态。
- en: Preparing for this chapter
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为本章做准备
- en: This chapter uses the `sportsstore` project from *Chapter 19*. Open a new command
    prompt, navigate to the `sportsstore` folder, and run the command shown in *Listing
    20.1* to start the development tools.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用 *第 19 章* 中的 `sportsstore` 项目。打开一个新的命令提示符，导航到 `sportsstore` 文件夹，并运行 *列表
    20.1* 中显示的命令以启动开发工具。
- en: '**Tip**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: You can download the example project for this chapter – and for all the other
    chapters in this book – from [https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development).
    See *Chapter 1* for how to get help if you have problems running the examples.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 [https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development)
    下载本章的示例项目——以及本书中所有其他章节的示例项目。有关运行示例时遇到问题的帮助，请参阅 *第 1 章*。
- en: 'Listing 20.1: Starting the development tools'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.1：启动开发工具
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Open a new browser window, navigate to `http://localhost:5000`, and you will
    see the product catalog, as shown in *Figure 20.1*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的浏览器窗口，导航到 `http://localhost:5000`，你将看到产品目录，如图 *图 20.1* 所示。
- en: '![](img/B21959_20_01.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_20_01.png)'
- en: 'Figure 20.1: Running the application'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.1：运行应用程序
- en: Understanding HTML RESTful web services
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 HTML RESTful Web 服务
- en: The web service created in *Chapter 14* follows the most common approach, which
    is to return JSON data that the client can process and present to the user. This
    is the most flexible approach because it doesn’t limit the way that the data is
    used, allowing clients to be created that use data in ways the developers of the
    web service did not envisage and without their involvement.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 14 章* 中创建的 Web 服务遵循最常见的方法，即返回客户端可以处理并展示给用户的 JSON 数据。这是最灵活的方法，因为它不限制数据的使用方式，允许创建使用数据的客户端，这些数据的使用方式是
    Web 服务的开发者没有预想的，并且不需要他们的参与。
- en: For many projects, the developers of the web service are also responsible for
    the client, which leads to the strange situation where all of the state management
    features developed by the round-trip client are recreated, using a framework such
    as Angular or React to create a more responsive set of features.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多项目，Web 服务的开发者也负责客户端，这导致了一个奇怪的情况，即所有由往返客户端开发的州管理功能都被重新创建，使用 Angular 或 React
    等框架创建一个更响应式的功能集。
- en: In this situation, an alternative is to create a web service that returns fragments
    of HTML content instead of JSON, and create a client that responds to user interaction
    by sending HTTP requests to the web service, displaying the results that are obtained.
    The web service still relies on HTTP methods to identify the type of operation
    that will be performed, and the URL path to identify the resource that is affected,
    but the result is pre-formatted content that can be displayed to the user, which
    is produced using the same template, session, and data features that were created
    for the conventional HTML application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，一个替代方案是创建一个返回 HTML 内容片段而不是 JSON 的 Web 服务，并创建一个客户端，该客户端通过向 Web 服务发送 HTTP
    请求来响应用户交互，显示获得的结果。Web 服务仍然依赖于 HTTP 方法来识别将要执行的操作类型，以及 URL 路径来识别受影响的资源，但结果是预先格式化的内容，可以展示给用户，这是使用与为传统
    HTML 应用程序创建的相同模板、会话和数据功能产生的。
- en: This isn’t suitable for every project, especially when you need to provide access
    to your application’s data to third parties, but if you find yourself using a
    framework like React or Angular to duplicate the functionality already created
    for the server, then this can be a good approach that avoids the complexity of
    using a big client-side framework.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不适合每个项目，尤其是当你需要向第三方提供应用程序数据访问时，但如果你发现自己正在使用 React 或 Angular 等框架来重复服务器上已经创建的功能，那么这可以是一个避免使用大型客户端框架复杂性的好方法。
- en: Preparing for client development
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为客户端开发做准备
- en: The package I am going to use to send HTTP requests and process the HTML responses
    is called `htmx` ([https://htmx.org](https://htmx.org)), which is a good choice
    when the server can provide all of the statement management and content generation
    that will be required to create the client, which is the case for the SportsStore
    application. To install the `HTMX` package, run the command shown in *Listing
    20.2* in the `sportsstore` folder.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我将要使用的用于发送 HTTP 请求和处理 HTML 响应的包名为 `htmx` ([https://htmx.org](https://htmx.org))，当服务器可以提供创建客户端所需的所有语句管理和内容生成时，这是一个不错的选择，例如
    SportsStore 应用程序。要在 `sportsstore` 文件夹中安装 `HTMX` 包，请运行 *清单 20.2* 中显示的命令。
- en: '**Tip**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Another good package to consider is Alpine ([https://alpinejs.dev](https://alpinejs.dev)),
    which is more complex, but it makes it easier to manage state data in the browser
    and can more easily be used with web services that return JSON data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得考虑的好包是 Alpine ([https://alpinejs.dev](https://alpinejs.dev))，它更为复杂，但使得在浏览器中管理状态数据变得更加容易，并且可以更方便地与返回
    JSON 数据的 Web 服务一起使用。
- en: 'Listing 20.2: Installing the htmx package'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.2：安装 htmx 包
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Table 20.1* describes the package for quick reference.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*表 20.1* 描述了用于快速参考的包。'
- en: 'Table 20.1: The client-side package'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 表 20.1：客户端包
- en: '| Name | Description |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '|'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '| The `HTMX` package scans HTML elements for special attributes that configure
    asynchronous HTTP requests, which will be sent to a web service that returns a
    fragment of HTML. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `HTMX` 包扫描 HTML 元素以查找配置异步 HTTP 请求的特殊属性，这些请求将被发送到返回 HTML 片段的 Web 服务。|'
- en: The `HTMX` package works by applying attributes to HTML elements, which are
    processed by JavaScript code loaded using a `script` element. This approach means
    that no client-side development toolchain is required, and the developer can simply
    reload the browser to see the effect of changes during development. I find that
    style of development frustrating because I often forget to reload the browser,
    which causes me momentary confusion when the content displayed by the browser
    doesn’t match up with the markup that I have just saved in the code editor. To
    that end, I am going to set up the **webpack** bundler so that I can take advantage
    of the development server `reload` feature.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`HTMX` 包通过将属性应用于 HTML 元素，并使用 `script` 元素加载的 JavaScript 代码来处理这些属性来实现其功能。这种方法意味着不需要客户端开发工具链，开发者只需简单地重新加载浏览器即可在开发过程中看到更改的效果。我发现这种开发方式令人沮丧，因为我经常忘记重新加载浏览器，这导致当浏览器显示的内容与我在代码编辑器中刚刚保存的标记不一致时，我会暂时感到困惑。为此，我将设置
    **webpack** 打包器，以便我可以利用开发服务器的 `reload` 功能。'
- en: Some packages just deal with browser reloading, but using webpack is a form
    of insurance because the bundle that it creates means that I can easily add JavaScript
    code to the client side later, without needing to revise the project tooling.
    There is no requirement to use a webpack bundler with an `HTMX` project, but I
    consider it a worthwhile escape hatch that lets me fix awkward problems that would
    otherwise be hard to deal with.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一些包仅处理浏览器重新加载，但使用 webpack 是一种保险措施，因为它创建的包意味着我可以轻松地向客户端添加 JavaScript 代码，而无需修改项目工具。在
    `HTMX` 项目中不需要使用 webpack 打包器，但我认为这是一个值得考虑的逃生口，它让我能够解决那些否则难以处理的问题。
- en: Run the commands shown in *Listing 20.3* in the `sportsstore` folder to install
    the packages required to create the client-side bundles.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `sportsstore` 文件夹中运行 *清单 20.3* 中显示的命令，以安装创建客户端包所需的包。
- en: 'Listing 20.3: Installing the packages required for the bundler'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.3：安装打包器所需的包
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Table 20.2* describes these packages for quick reference.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*表 20.2* 描述了这些包，以便快速参考。'
- en: 'Table 20.2: The client-side development tool packages'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 表 20.2：客户端开发工具包
- en: '| Name | Description |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '|'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '| This package contains the webpack bundler. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 此包包含 webpack 打包器。|'
- en: '|'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '| This package contains the command line for webpack. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 此包包含 webpack 的命令行。|'
- en: '|'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '| This package contains the webpack development HTTP server. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 此包包含 webpack 开发 HTTP 服务器。|'
- en: '|'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '| This package allows you to start multiple commands using `npm`. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 此包允许您使用 `npm` 启动多个命令。|'
- en: '|'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '| This package contains an HTTP proxy, which will forward requests to the webpack
    server during development. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 此包包含一个 HTTP 代理，在开发期间将请求转发到 webpack 服务器。|'
- en: Add a file named `webpack.config.mjs` to the `sportsstore` folder with the content
    shown in *Listing 20.4*, which configures webpack and sets up its development
    server.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`sportsstore`文件夹中添加一个名为`webpack.config.mjs`的文件，其内容如*清单20.4*所示，该文件配置webpack并设置其开发服务器。
- en: 'Listing 20.4: The contents of the webpack.config.mjs file in the sportsstore
    folder'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单20.4*：sportsstore文件夹中webpack.config.mjs文件的内容'
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The configuration tells webpack to create a bundle using a file named `client.js`
    in the `src/admin` folder, and also to trigger a browser update if the bundle
    changes or if a file in the `templates/admin` folder changes. The bundle will
    be created in a file named `bundle.js`, which will be written to the `dist/admin`
    folder. Create the `src/admin` folder, and add to it a file named `client.js`
    with the content shown in *Listing 20.5*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 配置告诉webpack使用`src/admin`文件夹中的名为`client.js`的文件创建捆绑包，并在捆绑包更改或`templates/admin`文件夹中的文件更改时触发浏览器更新。捆绑包将创建在名为`bundle.js`的文件中，并将写入`dist/admin`文件夹。创建`src/admin`文件夹，并向其中添加一个名为`client.js`的文件，其内容如*清单20.5*所示。
- en: 'Listing 20.5: The contents of the client.js file in the src/admin folder'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单20.5*：src/admin文件夹中client.js文件的内容'
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The code in this file does nothing because the bundle is just a means to use
    the webpack development HTTP server. The bundle will be omitted from the production
    build of the application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件中的代码不起作用，因为捆绑只是使用webpack开发HTTP服务器的一种手段。捆绑将被省略在应用程序的生产构建中。
- en: Creating the routes and templates
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建路由和模板
- en: The next steps are to configure the route that will be the entry point into
    the administration features and define the template that will be used to generate
    the response. Create the `src/routes/admin` folder, and add to it a file named
    `index.ts` with the content shown in *Listing 20.6*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是配置将作为管理功能入口点的路由，并定义用于生成响应的模板。创建`src/routes/admin`文件夹，并向其中添加一个名为`index.ts`的文件，其内容如*清单20.6*所示。
- en: 'Listing 20.6: The contents of the index.ts file in the src/routes/admin folder'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单20.6*：src/routes/admin文件夹中index.ts文件的内容'
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `createAdminRoutes` function sets up the administration routes. To get started,
    there is a middleware component that disables the default layout for the template
    engine, and a route that handles `GET` requests to the `/admin` URL by rendering
    a template named `admin/admin_layout`. The name of the template includes the `admin`
    folder so that I can keep the administration templates separate from the rest
    of the application content. The drawback of this approach is that the folder name
    has to be included in all calls to the `render` method.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`createAdminRoutes`函数设置管理路由。要开始，有一个中间件组件禁用了模板引擎的默认布局，还有一个处理`/admin` URL的`GET`请求的路由，通过渲染一个名为`admin/admin_layout`的模板。模板的名称包含`admin`文件夹，这样我可以将管理模板与应用程序的其他内容分开。这种方法的缺点是必须在所有调用`render`方法的调用中包含文件夹名称。'
- en: '*Listing 20.7* adds the `createAdminRoutes` to the set of functions called
    to set up the application’s routes.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单20.7*将`createAdminRoutes`添加到设置应用程序路由的函数集合中。'
- en: 'Listing 20.7: Adding routes to the index.ts file in the src/routes folder'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单20.7*：向src/routes文件夹中的index.ts文件添加路由'
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To create the initial template, create the `sportsstore/templates/admin` folder,
    and add to it a file named `admin_layout.handlebars` with the content shown in
    *Listing 20.8*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 创建初始模板时，请创建`sportsstore/templates/admin`文件夹，并向其中添加一个名为`admin_layout.handlebars`的文件，其内容如*清单20.8*所示。
- en: 'Listing 20.8: The contents of the admin_layout.handlebars file in the templates/admin
    folder'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单20.8*：templates/admin文件夹中admin_layout.handlebars文件的内容'
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This template renders an HTML document, with `link` elements for the Bootstrap
    CSS and Icons files, and `script` elements for the webpack bundle and the `HTMX`
    JavaScript file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板渲染一个HTML文档，包含Bootstrap CSS和图标文件的`link`元素，以及webpack捆绑包和`HTMX`JavaScript文件的`script`元素。
- en: Configuring the application
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置应用程序
- en: To complete the preparation, *Listing 20.9* sets up request forwarding to the
    webpack dev server and adds the `HTMX` package folder to the set of static file
    locations.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成准备工作，*清单20.9*设置请求转发到webpack开发服务器，并将`HTMX`包文件夹添加到静态文件位置集合中。
- en: 'Listing 20.9: Configuring the application in the server.ts file in the src
    folder'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单20.9*：在src文件夹中的server.ts文件中配置应用程序'
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If the application is configured for the development environment, then the `http-proxy`
    package is used to forward requests to the webpack development HTTP server, which
    will enable automatic browser reloading.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序配置为开发环境，则使用 `http-proxy` 包将请求转发到 webpack 开发 HTTP 服务器，这将启用自动浏览器重新加载。
- en: The error handlers have to be moved so that the `404` `-` `Not` `Found` response
    isn’t generated until after the handler for webpack development server has had
    the chance to match the request.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理器必须移动，以便在 webpack 开发服务器处理器的机会匹配请求之后才生成 `404` `-` `Not` `Found` 响应。
- en: The final preparatory step is to configure the `npm` commands to start both
    the server and webpack, and to prevent the server from being restarted when the
    templates in the `admin` folder are changed, as shown in *Listing 20.10*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的准备步骤是配置 `npm` 命令以启动服务器和 webpack，并防止在 `admin` 文件夹中的模板更改时服务器被重新启动，如 *清单 20.10*
    所示。
- en: 'Listing 20.10: Configuring the application in the package.json file in the
    sportsstore folder'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 20.10：在 sportsstore 文件夹中的 package.json 文件中配置应用程序
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Stop the server if it is running, and then run the command shown in *Listing
    20.11* in the `sportsstore` folder to start the client-side build tools and the
    server.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器正在运行，请停止服务器，然后在 `sportsstore` 文件夹中运行 *清单 20.11* 中显示的命令以启动客户端构建工具和服务器。
- en: 'Listing 20.11: Starting the client build tools and server'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 20.11：启动客户端构建工具和服务器
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Open a browser and navigate to `http://localhost:5000/admin`. The browser will
    display the administration layout, with some placeholder text, as shown in *Figure
    20.2*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并导航到 `http://localhost:5000/admin`。浏览器将显示管理布局，其中包含一些占位文本，如 *图 20.2* 所示。
- en: '![](img/B21959_20_02.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_20_02.png)'
- en: 'Figure 20.2: Preparing for the administration features'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.2：准备管理功能
- en: Administering the product catalog
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理产品目录
- en: Now that the basic structure is in place, it is time to start adding features.
    Create a file named `area_buttons.handlebars` in the `templates/admin` folder
    with the content shown in *Listing 20.12*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在基本结构已经就绪，是时候开始添加功能了。在 `templates/admin` 文件夹中创建一个名为 `area_buttons.handlebars`
    的文件，其内容如 *清单 20.12* 所示。
- en: 'Listing 20.12: The contents of the area_buttons.handlebars file in the templates/admin
    folder'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 20.12：在 templates/admin 文件夹中的 area_buttons.handlebars 文件内容
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This template contains the buttons that will allow the user to select an area
    of functionality: managing the catalog or shipping orders. The file is processed
    by the Handlebars template engine, which evaluates the `{{` and `}}` sections
    to produce the HTML content that is included in the response to the client. There
    are two template expressions in this file, which change the value of the class
    attribute applied to the `button` elements:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板包含允许用户选择功能区域的按钮：管理目录或处理订单。该文件由 Handlebars 模板引擎处理，该引擎评估 `{{` 和 `}}` 部分以生成包含在客户端响应中的
    HTML 内容。此文件中有两个模板表达式，它们更改应用于 `button` 元素的类属性值：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The classes applied to the elements will show the user which part of the application
    is active and rely on a template helper named `buttonClass`, which I’ll create
    shortly.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 应用到元素上的类将显示用户应用程序的哪个部分是活动的，并依赖于一个名为 `buttonClass` 的模板辅助器，我将很快创建它。
- en: 'Once the HTML content is received by the browser, it will be processed a second
    time, by the `HTMX` package, which looks for attributes whose name begins with
    `hx`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦浏览器接收到 HTML 内容，它将被 `HTMX` 包第二次处理，该包寻找以 `hx` 开头的属性名：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `hx-get` attributes tell `HTMX` to send a `GET` request to a specific URL.
    By default, `HTMX` uses the HTML in the response to replace the element that triggered
    the requests, but this can be changed with the `hx-target` attribute, which means
    that the `button` elements will request `/api/products/table` or `/api/orders/table`,
    and the response will be displayed using the element whose ID is `content`. (The
    value of the `hx-target` attribute is a CSS selector, and the `#` prefix denotes
    an element’s ID.)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`hx-get` 属性告诉 `HTMX` 向特定 URL 发送 `GET` 请求。默认情况下，`HTMX` 使用响应中的 HTML 来替换触发请求的元素，但可以通过
    `hx-target` 属性来更改，这意味着 `button` 元素将请求 `/api/products/table` 或 `/api/orders/table`，响应将使用
    ID 为 `content` 的元素显示。（`hx-target` 属性的值是一个 CSS 选择器，`#` 前缀表示元素的 ID。）'
- en: The `hx-swap-oob` attribute allows a fragment of content to specify where it
    will be displayed. The attribute applied to the `swap_wrapper` element tells `HTMX`
    that the content it contains should be used to replace the content of the element
    whose name is `area_buttons`. (The `swap_wrapper` element name is entirely made
    up and was chosen so that it won’t be mistaken for the actual application HTML
    content. You can use any element name in your projects.)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`hx-swap-oob` 属性允许内容片段指定其显示的位置。应用于 `swap_wrapper` 元素的属性告诉 `HTMX`，它包含的内容应用于替换名为
    `area_buttons` 的元素的内容。（`swap_wrapper` 元素名称完全是虚构的，并且被选择是为了不会与实际应用程序的 HTML 内容混淆。你可以在你的项目中使用任何元素名称。）'
- en: To define the `buttonClass` helper that is used in *Listing 20.12*, add a file
    named `admin_helpers.ts` to the `src/helpers` folder with the content shown in
    *Listing 20.13*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义在 *Listing 20.12* 中使用的 `buttonClass` 辅助函数，请将一个名为 `admin_helpers.ts` 的文件添加到
    `src/helpers` 文件夹中，其内容如 *Listing 20.13* 所示。
- en: 'Listing 20.13: The contents of the admin_helpers.ts file in the src/helpers
    folder'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 20.13*：src/helpers 文件夹中 admin_helpers.ts 文件的内容'
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '*Listing 20.14* includes the new helper in the template engine configuration
    when the application starts.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 20.14* 在应用程序启动时将新辅助函数包含在模板引擎配置中。'
- en: 'Listing 20.14: Adding helpers to the index.ts file in the src/helpers folder'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 20.14*：将辅助函数添加到 src/helpers 文件夹中的 index.ts 文件'
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The content in *Listing 20.12* is a partial template, which will be combined
    with other content to produce an HTML response, using the features provided by
    the template engine, and the template also allows small files to be defined and
    managed. Add a file named `product_table.handlebars` to the `templates/admin`
    folder with the content shown in *Listing 20.15*.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 20.12* 中的内容是一个部分模板，它将与其他内容结合以生成 HTML 响应，使用模板引擎提供的功能，并且模板还允许定义和管理小文件。将一个名为
    `product_table.handlebars` 的文件添加到 `templates/admin` 文件夹中，其内容如 *Listing 20.15*
    所示。'
- en: 'Listing 20.15: The contents of the product_table.handlebars file in the templates/admin
    folder'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 20.15*：templates/admin 文件夹中 product_table.handlebars 文件的内容'
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This template presents the table of products in the catalog to the user and
    incorporates the `area_buttons` partial template. The template receives a `product`
    data property that is used to populate the contents of a table, using the `each`
    helper.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板向用户展示目录中的产品表，并包含了 `area_buttons` 部分模板。模板接收一个 `product` 数据属性，该属性用于使用 `each`
    辅助函数填充表格的内容。
- en: Starting the web service routes
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动网络服务路由
- en: I like to get the basic template features in place and switch between the routes
    and data management as I work, returning to the templates to refine the data presentation
    as features fall into place. To define the route that will provide the initial
    view of the catalog, add a file named `admin_catalog_routes.ts` to the `src/routes/admin`
    folder with the content shown in *Listing 20.16*.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢在工作的过程中将基本模板功能设置到位，并在路由和数据管理之间切换。当功能逐渐完善时，我会回到模板中细化数据展示。为了定义将提供目录初始视图的路由，请将一个名为
    `admin_catalog_routes.ts` 的文件添加到 `src/routes/admin` 文件夹中，其内容如 *Listing 20.16*
    所示。
- en: 'Listing 20.16: The contents of the admin_catalog_routes.ts file in the src/routes/admin
    folder'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 20.16*：src/routes/admin 文件夹中 admin_catalog_routes.ts 文件的内容'
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `createAdminCatalogRoutes` function receives a `Router` object, which allows
    requests to be handled relative to a base URL that is defined elsewhere in the
    application. There is one route that handles the `/table` URL and responds by
    rendering the `admin/product_table` template, which is provided by data read from
    the database.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`createAdminCatalogRoutes` 函数接收一个 `Router` 对象，它允许请求相对于在应用程序其他地方定义的基本 URL 进行处理。有一个处理
    `/table` URL 的路由，并通过渲染由数据库读取的数据提供的 `admin/product_table` 模板进行响应。'
- en: In earlier chapters, I accessed the database through the repository, which is
    my preferred way of isolating details of data access from the rest of the application.
    Not everyone likes using a repository and the additional complexity it introduces,
    so for the administration features, I am going to access the database directly
    through the Sequelize model classes to demonstrate both techniques, showing that
    they can coexist in the same project. To get the data for the template, the request
    handler queries for all `ProductModel` objects and includes the associated `SupplierModel`
    and `CategoryModel` objects. The `raw` property is used to prevent Sequelize from
    transforming the response, which is a useful option when the data that is read
    from the database can be used without modification.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我通过仓库访问数据库，这是我隔离数据访问细节的首选方式。并不是每个人都喜欢使用仓库及其引入的额外复杂性，因此对于管理功能，我将直接通过
    Sequelize 模型类访问数据库，以展示这两种技术，表明它们可以在同一个项目中共存。为了获取模板的数据，请求处理程序查询所有 `ProductModel`
    对象，并包括相关的 `SupplierModel` 和 `CategoryModel` 对象。使用 `raw` 属性来防止 Sequelize 转换响应，这在从数据库读取的数据可以未经修改使用时是一个有用的选项。
- en: '**Note**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: I still recommend using a repository because doing so ensures that data is accessed
    consistently, and it makes it easier to swap out the data access package. If you
    do choose to work directly with the data access package in your project, remember
    that you will have to go through the initialization process. For the *SportsStore*
    application, this is done in the `core.ts` file in the `src/data/orm` folder.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然建议使用仓库，因为这样做可以确保数据访问的一致性，并且更容易替换数据访问包。如果你选择直接在你的项目中与数据访问包一起工作，请记住你将不得不通过初始化过程。对于
    *SportsStore* 应用程序，这是在 `src/data/orm` 文件夹中的 `core.ts` 文件中完成的。
- en: '*Listing 20.17* calls the `createAdminCatalogRoutes` function when the application
    starts.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 20.17* 在应用程序启动时调用 `createAdminCatalogRoutes` 函数。'
- en: 'Listing 20.17: Adding routes to the index.ts file in the src/routes/admin folder'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.17：向 src/routes/admin 文件夹中的 index.ts 文件添加路由
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: A new `Router` object is created and passed to the `createAdminCatalogRoutes`
    function so that the relative routes can be defined, and it is then added to the
    request pipeline with the `use` method. `Router` is a middleware component that
    tries to match requests with its routes; otherwise, it will pass on requests.
    In this case, the `Router` object passed to the `createAdminCatalogRoutes` function
    is configured to try and match requests with the `/api/products` path, using the
    routes defined in *Listing 20.16*, which means that the `/api/products/table`
    URL will be received by the handler defined in *Listing 20.16*, responding with
    the rendered output from the `admin/product_table` template.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 `Router` 对象并将其传递给 `createAdminCatalogRoutes` 函数，以便可以定义相对路由，然后使用 `use`
    方法将其添加到请求管道。`Router` 是一个中间件组件，它试图将请求与它的路由相匹配；否则，它将传递请求。在这种情况下，传递给 `createAdminCatalogRoutes`
    函数的 `Router` 对象被配置为尝试使用 *列表 20.16* 中定义的路由与 `/api/products` 路径相匹配，这意味着 `/api/products/table`
    URL 将由 *列表 20.16* 中定义的处理程序接收，并返回从 `admin/product_table` 模板渲染的输出。
- en: '*Listing 20.18* updates the top-level template so that `HTMX` will send a request
    that will be processed by the handler defined in *Listing 20.16*.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 20.18* 更新了顶层模板，以便 `HTMX` 会发送一个请求，该请求将由 *列表 20.16* 中定义的处理程序处理。'
- en: 'Listing 20.18: Loading data into the admin_layout.handlebars file in the templates/admin
    folder'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.18：将数据加载到 templates/admin 文件夹中的 admin_layout.handlebars 文件
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `hx-get` attribute tells `HTMX` to request the `/api/product/table` URL.
    By default, requests are sent when the user interacts with an element, but the
    `hx-trigger` attribute overrides this behavior and tells `HTMX` to send the HTTP
    request when the element is loaded. Use a browser to request `http://localhost:5000/admin`,
    and you will see the content shown in *Figure 20.3*.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`hx-get` 属性告诉 `HTMX` 请求 `/api/product/table` URL。默认情况下，当用户与元素交互时发送请求，但 `hx-trigger`
    属性会覆盖此行为，并告诉 `HTMX` 在元素加载时发送 HTTP 请求。使用浏览器请求 `http://localhost:5000/admin`，你将看到
    *图 20.3* 中显示的内容。'
- en: '![](img/B21959_20_03.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21959_20_03.png)'
- en: 'Figure 20.3: Starting the development of the administration features'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.3：开始开发管理功能
- en: 'Before moving on, it is worth recapping the process that produces the content
    shown in the figure:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，回顾一下产生图中所示内容的流程是值得的：
- en: The user requests `http://localhost:5000/admin`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户请求 `http://localhost:5000/admin`。
- en: The request is handled by rendering the `admin_layout` template, which contains
    an element whose attributes tell `HTMX` to send an HTTP request to `http://localhost:5000/api/products/table`
    once the HTML content has been loaded.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求通过渲染 `admin_layout` 模板来处理，该模板包含一个元素，其属性告诉 `HTMX` 在 HTML 内容加载后发送一个 HTTP 请求到
    `http://localhost:5000/api/products/table`。
- en: The second request is handled by rendering the `product_table` template, and
    the content that is produced is used as the contents of the element that triggered
    the HTTP request, except for the content in the `area_buttons` partial template,
    which is used to replace the contents of the element with the same name.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个请求通过渲染 `product_table` 模板来处理，生成的内容用作触发 HTTP 请求的元素的内容，除了 `area_buttons` 部分模板中的内容，该内容用于替换具有相同名称的元素的内容。
- en: This initial presentation of content may seem like the existing round-trip functionality,
    but the key difference is that some of the content was obtained using the web
    service, whose importance will become more obvious as features are added.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这种内容初始展示可能看起来像是现有的往返功能，但关键区别在于，部分内容是通过网络服务获得的，随着功能的增加，其重要性将变得更加明显。
- en: Displaying product data and deleting products
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示产品数据和删除产品
- en: Now that the basic structure is in place, I am going to pick up the pace and
    build out the rest of the product management features, pausing periodically to
    check that everything works as it should. To display the product details correctly,
    add a file named `product_row.handlebars` to the `templates/admin` folder with
    the content shown in *Listing 20.19*.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在基本结构已经就绪，我将加快速度，构建产品管理功能的其余部分，并定期检查一切是否按预期工作。为了正确显示产品详情，将一个名为 `product_row.handlebars`
    的文件添加到 `templates/admin` 文件夹中，其内容如 *列表 20.19* 所示。
- en: 'Listing 20.19: The contents of the product_row.handlebars file in the templates/admin
    folder'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.19：`templates/admin` 文件夹中 `product_row.handlebars` 文件的内容
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `button` elements will allow the user to edit or delete products. The **Edit**
    `button` element has an `hx-get` attribute that sends a request when the button
    is clicked, including the `id` value in the requested URL, so that clicking on
    the **Edit** button for the product with `ID` 2, for example, will send an HTTP
    request to `/api/products/edit/2`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**按钮** 元素将允许用户编辑或删除产品。**编辑** 按钮元素具有 `hx-get` 属性，当点击按钮时会发送请求，包括请求 URL 中的 `id`
    值，因此点击具有 `ID` 2 的产品的 **编辑** 按钮将发送一个 HTTP 请求到 `/api/products/edit/2`。'
- en: The `Delete` button element has the `hx-delete` attribute, which tells `HTMX`
    to send an HTTP `DELETE` request when the button is clicked. The `hx-swap` attribute
    is set to `delete`, which tells `HTMX` to remove the element specified by the
    `hx-target` attribute. The effect is that the table row for the product will be
    removed when the **Delete** button is clicked, and the server confirms that the
    product has been removed from the database.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**删除** 按钮元素具有 `hx-delete` 属性，它告诉 `HTMX` 在点击按钮时发送一个 HTTP `DELETE` 请求。`hx-swap`
    属性设置为 `delete`，这告诉 `HTMX` 移除由 `hx-target` 属性指定的元素。结果是，当点击 **删除** 按钮时，产品所在的表格行将被移除，并且服务器确认产品已从数据库中删除。'
- en: '*Listing 20.20* applies the new template to format the product data.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 20.20* 将新模板应用于格式化产品数据。'
- en: 'Listing 20.20: Applying a template to the product_table.handlebars file in
    the templates/admin folder'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.20：将模板应用于 `templates/admin` 文件夹中的 `product_table.handlebars` 文件
- en: '[PRE27]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '*Listing 20.21* adds a route that handles `DELETE` requests, receiving the
    ID of the product to delete it as a URL parameter.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 20.21* 添加了一条处理 `DELETE` 请求的路由，该路由接收一个 URL 参数来指定要删除的产品 ID。'
- en: 'Listing 20.21: Adding a route to the admin_catalog_routes.ts file in the src/routes/admin
    folder'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.21：向 `src/routes/admin` 文件夹中的 `admin_catalog_routes.ts` 文件添加路由
- en: '[PRE28]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Request `http://localhost:5000/admin`, and you will see a more detailed presentation
    of the product data. Clicking the **Delete** button removes a product from the
    database, as shown in *Figure 20.4*. (The application is configured to reset the
    database, which means that the deleted products will be restored the next time
    you change one of the project files.)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 请求 `http://localhost:5000/admin`，你将看到产品数据的更详细展示。点击 **删除** 按钮将从数据库中删除一个产品，如图
    *图 20.4* 所示。（应用程序被配置为重置数据库，这意味着删除的产品将在你更改项目文件中的任何一个文件时被恢复。）
- en: '![](img/B21959_20_04.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_20_04.png)'
- en: 'Figure 20.4: Product details and deleting a product'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.4：产品详情和删除产品
- en: Editing products
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑产品
- en: The **Edit** feature will present the user with an HTML form that is populated
    with the details of a product, presenting validation messages when the form is
    submitted with unusual values. I am going to build up the form using a series
    of smaller, more manageable templates, which will be combined to produce an HTML
    response and ensure that each data property is handled consistently. Starting
    with a template to display validation messages, add a file named `validation_messages.handlebars`
    to the `templates/admin` folder, with the content shown in *Listing 20.22*.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**编辑**功能将向用户展示一个填充了产品详细信息的HTML表单，当表单提交包含异常值时，会显示验证信息。我打算通过一系列更小、更易于管理的模板来构建这个表单，这些模板将被组合起来生成HTML响应，并确保每个数据属性都得到一致的处理。首先，创建一个用于显示验证信息的模板，将名为`validation_messages.handlebars`的文件添加到`templates/admin`文件夹中，其内容如*清单20.22*所示。'
- en: 'Listing 20.22: The contents of the validation_messages.handlebars file in the
    templates/admin folder'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 清单20.22：`templates/admin`文件夹中`validation_messages.handlebars`文件的内容
- en: '[PRE29]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: I am going to use the existing validation features, which means that the `invalid`
    property will be `true` when there is a validation issue and the `messages` property
    contains the content to be displayed to the user.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用现有的验证功能，这意味着当存在验证问题时，`invalid`属性将为`true`，而`messages`属性将包含要显示给用户的文本内容。
- en: Some of the product details will be displayed using `input` elements, allowing
    the user to freely enter a value. To create a template for `input` elements, add
    a file named `product_input.handlebars` to the `templates/admin` folder with the
    content shown in *Listing 20.23*.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 部分产品详情将通过`input`元素显示，允许用户自由输入值。为了创建`input`元素的模板，将名为`product_input.handlebars`的文件添加到`templates/admin`文件夹中，其内容如*清单20.23*所示。
- en: 'Listing 20.23: The contents of the product_input.handlebars file in the templates/admin
    folder'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 清单20.23：`templates/admin`文件夹中`product_input.handlebars`文件的内容
- en: '[PRE30]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The template creates `label` and `input` elements, formatted using the Bootstrap
    CSS styles, and incorporates the `validation messages` template. To simplify data
    management, users won’t be allowed to change the `ID` property of a product, and
    so a `disabled` helper is used to add the `disabled` attribute to the `input`
    element when that element is used for the `ID` property, as shown in *Listing
    20.24*.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 模板创建`label`和`input`元素，使用Bootstrap CSS样式进行格式化，并包含`validation messages`模板。为了简化数据管理，用户将不允许更改产品的`ID`属性，因此使用`disabled`助手在用于`ID`属性的元素上添加`disabled`属性，如*清单20.24*所示。
- en: 'Listing 20.24: Adding a helper to the admin_helpers.ts file in the src/helpers
    folder'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 清单20.24：在`src/helpers`文件夹中的`admin_helpers.ts`文件中添加一个助手
- en: '[PRE31]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Some product properties will be edited by picking from a list of values. To
    create a template that will produce a `select` element, add a file named `product_select.handlebars`
    to the `templates/admin` folder with the content shown in *Listing 20.25*.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 一些产品属性将通过从值列表中选择来编辑。为了创建一个将生成`select`元素的模板，将名为`product_select.handlebars`的文件添加到`templates/admin`文件夹中，其内容如*清单20.25*所示。
- en: 'Listing 20.25: The contents of the product_select.handlebars file in the templates/admin
    folder'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 清单20.25：`templates/admin`文件夹中`product_select.handlebars`文件的内容
- en: '[PRE32]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `select` element is populated with a set of `option` elements from which
    the user can choose, along with a fallback element that will be useful later when
    adding support to create new products. A helper is required to determine whether
    an `option` element is decorated with the `selected` attribute, as shown in *Listing
    20.26*.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`select`元素填充了一组`option`元素，用户可以从中选择，以及一个后续添加新产品支持时将很有用的回退元素。需要一个助手来确定`option`元素是否带有`selected`属性，如*清单20.26*所示。'
- en: 'Listing 20.26: Adding a helper to the admin_helpers.ts file in the src/helpers
    folder'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 清单20.26：在`src/helpers`文件夹中的`admin_helpers.ts`文件中添加一个助手
- en: '[PRE33]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: To create the template that combines the `input` and `select` elements to present
    the user with a complete HTML form, add a file named `product_editor.handlebars`
    to the `templates/admin` folder with the content shown in *Listing 20.27*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建将`input`和`select`元素组合起来向用户提供完整HTML表单的模板，将名为`product_editor.handlebars`的文件添加到`templates/admin`文件夹中，其内容如*清单20.27*所示。
- en: 'Listing 20.27: The contents of the product_editor.handlebars file in the templates/admin
    folder'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 清单20.27：`templates/admin`文件夹中`product_editor.handlebars`文件的内容
- en: '[PRE34]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This template contains a `form` element that is decorated with the `hx-put`
    attribute, which tells `HTMX` to submit the form using an HTTP `PUT` request to
    a URL that combines `/api/products` with the product `ID` (such as `/api/products/1`
    for the product whose `ID` value is `1`).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板包含一个带有 `hx-put` 属性的 `form` 元素，该属性告诉 `HTMX` 使用 HTTP `PUT` 请求将表单提交到结合 `/api/products`
    和产品 `ID` 的 URL（例如，对于 `ID` 值为 `1` 的产品，URL 为 `/api/products/1`）。
- en: The contents of the form are created using the templates for `input` and `select`
    elements, along with a `textarea` element that will allow the user to enter multiple
    lines of text for the description. There is also a button that will trigger the
    `PUT` request, as well as a `Cancel` button that instructs `HTMX` to send a `get`
    request to `/api/products/table` and display the results in the `content` element.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 表单内容是通过 `input` 和 `select` 元素的模板以及允许用户输入多行文本的 `textarea` 元素创建的。还有一个按钮将触发 `PUT`
    请求，以及一个 `取消` 按钮指示 `HTMX` 向 `/api/products/table` 发送 `get` 请求并在 `content` 元素中显示结果。
- en: Adding product data validation
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加产品数据验证
- en: The data that is received from the product editing form must be validated before
    it is stored in the database. Add a file named `product_dto_rules.ts` to the `src/data/validation`
    folder with the content shown in *Listing 20.28*.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在将产品编辑表单接收到的数据存储在数据库之前，必须对其进行验证。将名为 `product_dto_rules.ts` 的文件添加到 `src/data/validation`
    文件夹中，其内容如 *列表 20.28* 所示。
- en: 'Listing 20.28: The contents of the product_dto_rules.ts file in the src/data/validation
    folder'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.28：src/data/validation 文件夹中 product_dto_rules.ts 文件的内容
- en: '[PRE35]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `ProductDTO` type represents the data that will be received when the user
    edits a product and submits the form (the term **DTO** means **data transfer object**
    and is used to describe types that represent data when it is transferred). The
    validation rules for the `ProductDTO` type are exported as a constant, named `ProductDTOValidator`.
    Two custom rules are required to ensure that a value corresponds to an existing
    supplier or category in the database. *Listing 20.29* incorporates the new validator.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProductDTO` 类型表示用户编辑产品并提交表单时将接收到的数据（术语 **DTO** 代表 **数据传输对象**，用于描述在数据传输时表示数据的类型）。`ProductDTO`
    类型的验证规则作为常量导出，命名为 `ProductDTOValidator`。需要两个自定义规则来确保值对应于数据库中现有的供应商或类别。*列表 20.29*
    集成了新的验证器。'
- en: 'Listing 20.29: Adding a validator to the index.ts file in the src/data/validation
    folder'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.29：在 src/data/validation 文件夹中的 index.ts 文件中添加验证器
- en: '[PRE36]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Adding the routes for editing
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加编辑路由
- en: 'Two new routes are required to support editing: the first route receives an
    HTTP `GET` request and responds with a populated HTML form. The second route receives
    the HTTP `PUT` request and is responsible for validating the data and storing
    it. Both routes are defined in *Listing 20.30*.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 需要两个新的路由来支持编辑：第一个路由接收 HTTP `GET` 请求并返回一个填充的 HTML 表单。第二个路由接收 HTTP `PUT` 请求，负责验证数据并将其存储。这两个路由都在
    *列表 20.30* 中定义。
- en: 'Listing 20.30: Adding editing routes to the admin_catalog_routes.ts file in
    the src/routes/admin folder'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.30：在 src/routes/admin 文件夹中的 admin_catalog_routes.ts 文件中添加编辑路由
- en: '[PRE37]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `GET` route receives the `ID` of the product that the user wants to edit
    through the URL and queries the database to get the data, which is fed through
    the validator so that the same template can be used when editing starts and invalid
    data is received.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET` 路由通过 URL 接收用户想要编辑的产品 `ID`，并查询数据库以获取数据，这些数据通过验证器传递，以便在开始编辑和接收到无效数据时可以使用相同的模板。'
- en: The `PUT` route receives data that the user wants to store, with the `ID` received
    from the URL. The data is validated, and if it is invalid, the `admin/product_editor`
    template is rendered, which will display the validation messages to the user.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`PUT` 路由接收用户想要存储的数据，其中包含从 URL 接收的 `ID`。数据被验证，如果无效，则渲染 `admin/product_editor`
    模板，该模板将向用户显示验证消息。'
- en: 'If the data is valid, the database is updated and the browser is redirected,
    like this:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据有效，则更新数据库并将浏览器重定向，如下所示：
- en: '[PRE38]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `303` status code causes the browser to request the specified URL, using
    an HTTP `GET` request, and effectively ends the editing session by displaying
    the product data, which will include the edited data.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`303` 状态码会导致浏览器使用 HTTP `GET` 请求请求指定的 URL，并通过显示产品数据（包括编辑后的数据）来有效地结束编辑会话。'
- en: One problem with the `303` redirection is that it will fail during development
    because the default security configuration applied by the Helmet package tells
    the browser to upgrade insecure requests. This means that the `303` redirection
    tells the browser to request `http://localhost:5000/api/products/table`; however,
    due to the security policy, the browser will make an HTTPS request instead. *Listing
    20.31* adds a new section to the configuration file that will be used to configure
    the Helmet package.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`303` 重定向的一个问题是，在开发过程中可能会失败，因为 Helmet 包应用的默认安全配置告诉浏览器升级不安全请求。这意味着 `303` 重定向告诉浏览器请求
    `http://localhost:5000/api/products/table`；然而，由于安全策略，浏览器将发出 HTTPS 请求。*列表 20.31*
    在配置文件中添加了一个新部分，该部分将用于配置 Helmet 包。'
- en: 'Listing 20.31: Adding a section to the server.config.json file in the sportsstore
    folder'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.31：在 sportsstore 文件夹中的 server.config.json 文件中添加部分
- en: '[PRE39]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '*Listing 20.32* updates the application configuration to disable insecure upgrades
    when the application is in the development environment.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 20.32* 更新应用程序配置，以在应用程序处于开发环境时禁用不安全的升级。'
- en: 'Listing 20.32: Disabling insecure upgrades in the server.ts file in the src
    folder'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.32：在 src 文件夹中的 server.ts 文件中禁用不安全的升级
- en: '[PRE40]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Let the browser reload automatically or navigate to `http://localhost:5000/admin`,
    and click the **Edit** button for one of the products. Clear the **Name** field
    and click the **Save** button to see a validation error. Enter a new name and
    click the **Save** button again, and you will see the modified data displayed
    in the overview table, as shown in *Figure 20.5*.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让浏览器自动重新加载或导航到 `http://localhost:5000/admin`，然后点击其中一个产品的 **编辑** 按钮。清除 **名称**
    字段并点击 **保存** 按钮以查看验证错误。输入新名称并再次点击 **保存** 按钮，你将看到修改后的数据在概览表中显示，如图 *图 20.5* 所示。
- en: You may need to clear your browser cache for the change in the security policy
    to take effect. Some browsers, including Chrome, will keep trying to upgrade to
    HTTPS connections until the cache is cleared.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要清除浏览器缓存以使安全策略的更改生效。一些浏览器，包括 Chrome，将尝试升级到 HTTPS 连接，直到清除缓存。
- en: '![](img/B21959_20_05.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_20_05.png)'
- en: 'Figure 20.5: Validating and editing data'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.5：验证和编辑数据
- en: Bear in mind that the application is configured to reset the database every
    time there is a change, which means that the changes you make will be lost as
    soon as a file change is detected.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，应用程序配置为每次有更改时重置数据库，这意味着你做的更改将在检测到文件更改后立即丢失。
- en: Creating new products
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建新产品
- en: The final feature is to create new products. *Listing 20.33* adds a new `button`
    element that will send an `HTTP` `GET` request to start the editing process.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个功能是创建新产品。*列表 20.33* 添加了一个新的 `button` 元素，该元素将发送一个 `HTTP` `GET` 请求以启动编辑过程。
- en: 'Listing 20.33: Adding an element to the product_table.handlebars file in the
    templates/admin folder'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.33：在 templates/admin 文件夹中的 product_table.handlebars 文件中添加元素
- en: '[PRE41]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '*Listing 20.34* updates the editor template so that a different `form` element
    is included in the HTML output, based on the value of a property named `create`,
    so `POST` requests are used when creating new products while `PUT` requests are
    used to modify existing data.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 20.34* 更新编辑模板，以便根据名为 `create` 的属性值在 HTML 输出中包含不同的 `form` 元素，因此创建新产品时使用
    `POST` 请求，而修改现有数据时使用 `PUT` 请求。'
- en: 'Listing 20.34: Changing the form in the product_editor.handlebars file in the
    templates/admin folder'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.34：在 templates/admin 文件夹中的 product_editor.handlebars 文件中更改表单
- en: '[PRE42]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '*Listing 20.35* adds two new routes, which handle the `GET` request that starts
    the creation process and the `POST` request that is sent when the user submits
    the form.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 20.35* 添加了两个新的路由，它们处理启动创建过程的 `GET` 请求和用户提交表单时发送的 `POST` 请求。'
- en: 'Listing 20.35: Adding routes to the admin_catalog_routes.ts file in the src/routes
    folder'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.35：在 src/routes 文件夹中的 admin_catalog_routes.ts 文件中添加路由
- en: '[PRE43]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Let the browser reload or request `http://localhost:5000/admin`, and then click
    the **Create** button. Fill out the form and click the **Save** button to create
    a new product, as shown in *Figure 20.6*.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让浏览器重新加载或请求 `http://localhost:5000/admin`，然后点击 **创建** 按钮。填写表单并点击 **保存** 按钮以创建新产品，如图
    *图 20.6* 所示。
- en: '![](img/B21959_20_06.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_20_06.png)'
- en: 'Figure 20.6: Creating a new product'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.6：创建新产品
- en: Administering orders
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理订单
- en: Now that the product features are in place, it is time to turn to the order
    data. Add a file named `admin_order_routes.ts` to the `src/routes/admin` folder
    with the content shown in *Listing 20.36*.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在产品特性已经就绪，是时候转向订单数据了。将一个名为 `admin_order_routes.ts` 的文件添加到 `src/routes/admin`
    文件夹中，内容如 *列表 20.36* 所示。
- en: 'Listing 20.36: The contents of the admin_order_routes.ts file in the src/routes/admin
    folder'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.36：`src/routes/admin` 文件夹中 admin_order_routes.ts 文件的内容
- en: '[PRE44]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The route that handles `GET` requests renders a template named `admin/order_table`,
    which is provided with the orders from the database. Earlier queries used the
    `raw` setting, which tells Sequelize to pass on the data as it is read from the
    database, which is a good technique when the data is naturally in a structure
    that suits the template that consumes it. In this case, the nested `include` properties
    lead to queries that are not readily used without additional processing. Instead
    of using the `raw` setting, `Sequelize` processes the data, which is then converted
    to a simple object format using the `toJSON` method:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 `GET` 请求的路由渲染一个名为 `admin/order_table` 的模板，该模板提供了数据库中的订单。早期的查询使用了 `raw` 设置，这告诉
    Sequelize 将从数据库读取的数据原样传递，当数据自然地适合消耗它的模板时，这是一个很好的技术。在这种情况下，嵌套的 `include` 属性导致查询在没有额外处理的情况下不易使用。而不是使用
    `raw` 设置，`Sequelize` 处理数据，然后使用 `toJSON` 方法将其转换为简单的对象格式：
- en: '[PRE45]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `toJSON` method is required because Sequelize usually creates objects that
    track changes so they can be written to a database, but this confuses the template
    engine. The `toJSON` method creates objects without the tracking functionality
    and which are suitable for template use.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 需要 `toJSON` 方法，因为 Sequelize 通常创建跟踪更改的对象，以便它们可以写入数据库，但这会混淆模板引擎。`toJSON` 方法创建没有跟踪功能且适合模板使用的对象。
- en: The handler for `POST` requests is used to change the shipping status of orders.
    If a request is received that corresponds to an order in the database, then the
    database is updated and a redirection is performed using the `HTTP 303` status
    code.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST` 请求的处理程序用于更改订单的运输状态。如果收到与数据库中订单相对应的请求，则更新数据库并使用 `HTTP 303` 状态码执行重定向。'
- en: '*Listing 20.37* enables the order routes so that they are reached through the
    `/api/orders` prefix.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 20.37* 启用了订单路由，以便通过 `/api/orders` 前缀访问。'
- en: 'Listing 20.37: Configuring routes in the index.ts file in the src/routes/admin
    folder'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.37：`src/routes/admin` 文件夹中 index.ts 文件中配置路由
- en: '[PRE46]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: To create the template that will present the order data, add a file named `order_table.handlebars`
    to the `templates/admin` folder with the content shown in *Listing 20.38*.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建将展示订单数据的模板，将一个名为 `order_table.handlebars` 的文件添加到 `templates/admin` 文件夹中，内容如
    *列表 20.38* 所示。
- en: 'Listing 20.38: The contents of the order_table.handlebars file in the templates/admin
    folder'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.38：`templates/admin` 文件夹中 order_table.handlebars 文件的内容
- en: '[PRE47]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The complexity in this template is the structure of the table, in which order
    details are presented using summary and detail rows. To create a template that
    will present the user with a button to change the shipping status, create a file
    named `order_button.handlebars` in the `templates/admin` folder, with the content
    shown in *Listing 20.39*.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 该模板的复杂性在于表格的结构，其中订单详情使用摘要和详细行展示。要创建一个将向用户展示更改运输状态按钮的模板，在 `templates/admin` 文件夹中创建一个名为
    `order_button.handlebars` 的文件，内容如 *列表 20.39* 所示。
- en: 'Listing 20.39: The contents of the order_button.handlebars file in the templates/admin
    folder'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.39：`templates/admin` 文件夹中 order_button.handlebars 文件的内容
- en: '[PRE48]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The `hx-post` attribute tells `HTMX` to send a `POST` request when the user
    clicks the button. *Listing 20.40* defines the helpers that are required for the
    orders template.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`hx-post` 属性指示 `HTMX` 在用户点击按钮时发送一个 `POST` 请求。*列表 20.40* 定义了用于订单模板所需的辅助器。'
- en: 'Listing 20.40: Adding a helper to the admin_helpers.ts file in the src/helpers
    folder'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.40：向 `src/helpers` 文件夹中的 admin_helpers.ts 文件添加辅助器
- en: '[PRE49]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The `first` helper is used to determine whether a value is the first element
    in an array and to work out where to insert the customer details and the status
    change buttons. This relies on the Handlebars `each` helper, which provides an
    `@index` value that reports the index of the element being processed:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`first` 辅助器用于确定一个值是否是数组中的第一个元素，并确定插入客户详情和状态更改按钮的位置。这依赖于 Handlebars 的 `each`
    辅助器，它提供了一个 `@index` 值，报告正在处理的元素的索引：'
- en: '[PRE50]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The `total` helper calculates the total value of the product selections in
    the order and is combined with the existing `currency` helper to create a formatted
    total price for the order:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`total` 辅助函数计算订单中产品选择的总额，并与现有的 `currency` 辅助函数结合，为订单创建格式化的总价格：'
- en: '[PRE51]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: There are no orders in the seed data, so the first step in checking the administration
    features is to create some orders. Navigate to `http://localhost:5000`, add products
    to the cart, and check out to create an order. Navigate to `http://localhost:5000/admin`,
    click the **Orders** button, and use the buttons to toggle the shipment status
    of orders, as shown in *Figure 20.7*.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 种子数据中没有订单，因此检查管理功能的第一个步骤是创建一些订单。导航到 `http://localhost:5000`，将产品添加到购物车，并结账以创建订单。导航到
    `http://localhost:5000/admin`，点击**订单**按钮，并使用按钮切换订单的运输状态，如图*20.7*所示。
- en: '![](img/B21959_20_07.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_20_07.png)'
- en: 'Figure 20.7: Changing the order shipping status'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.7：更改订单的运输状态
- en: Fixing the URLs
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复 URL
- en: The `HTMX` package makes asynchronous HTTP requests to the web service and displays
    the results, which is an effective way to create a responsible application, but
    the result doesn’t behave correctly. To see the problem, navigate to `http://localhost:5000/admin`,
    click the **Orders** button, and then click the browser’s reload button. Instead
    of reloading the **Orders** table, the products are displayed, as shown in *Figure
    20.8*.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`HTMX` 包对网络服务进行异步 HTTP 请求并显示结果，这是创建响应式应用程序的有效方法，但结果的行为不正确。要看到问题，请导航到 `http://localhost:5000/admin`，点击**订单**按钮，然后点击浏览器的刷新按钮。而不是重新加载**订单**表，显示的是产品，如图*20.8*所示。'
- en: '![](img/B21959_20_08.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_20_08.png)'
- en: 'Figure 20.8: Reloading the browser'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.8：重新加载浏览器
- en: The browser isn’t aware of the effect of user interaction, and reloading effectively
    resets the client, which displays the product table. To fix this means defining
    a set of routes that allow direct navigation to specific application features,
    as well as configuring `HTMX` to add URLs that will target those routes following
    user interaction. *Listing 20.41* defines the routes required to navigate directly
    to the products table, the orders table, and the editor for a specific product.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器没有意识到用户交互的影响，重新加载实际上重置了客户端，显示了产品表。要解决这个问题，意味着定义一组允许直接导航到特定应用程序功能的路由，以及配置
    `HTMX` 以添加在用户交互后针对这些路由的 URL。*列表 20.41* 定义了直接导航到产品表、订单表和特定产品编辑器的所需路由。
- en: 'Listing 20.41: Adding direct routes to the index.ts file in the src/routes/admin
    folder'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.41：向 `src/routes/admin` 文件夹中的 `index.ts` 文件添加直接路由
- en: '[PRE52]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The new routes render the `admin_layout` template with a `content` value that
    specifies the URL that `HTMX` should use to request content. For consistency,
    the `/admin` route sends a redirection to the `/admin/products` URL. *Listing
    20.42* updates the template to use the `content` value that is provided by the
    new routes.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 新的路由渲染 `admin_layout` 模板，其中 `content` 值指定 `HTMX` 应该用于请求内容的 URL。为了保持一致性，`/admin`
    路由将重定向到 `/admin/products` URL。*列表 20.42* 更新了模板以使用新路由提供的 `content` 值。
- en: 'Listing 20.42: Loading a URL into the admin_layout.handlebars file in the templates/admin
    folder'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.42：将 URL 加载到模板文件夹中的 `admin` 文件夹下的 `admin_layout.handlebars` 文件
- en: '[PRE53]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The web service URLs that provide fragments of HTML content are of no use for
    direct navigation because they do not provide a complete HTML document. Fortunately,
    `HTMX` supports the `hx-push-url` attribute, which adds a URL to the browser’s
    history, as shown in *Listing 20.43*.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 HTML 内容片段的 Web 服务 URL 对直接导航没有用，因为它们不提供完整的 HTML 文档。幸运的是，`HTMX` 支持添加到浏览器历史记录的
    `hx-push-url` 属性，如*列表 20.43* 所示。
- en: 'Listing 20.43: Pushing URLs into the area_buttons.handlebars file in the templates/admin
    folder'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.43：将 URL 推送到模板文件夹中的 `admin` 文件夹下的 `area_buttons.handlebars` 文件
- en: '[PRE54]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: When the user clicks on one of the buttons, the `HTMX` package will request
    a fragment of HTML from the web service but will add one of the direct navigation
    URLs to the browser’s history. *Listing 20.44* applies the same attribute to the
    button that starts the editing process for a product.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击其中一个按钮时，`HTMX` 包会从网络服务请求一个 HTML 片段，但会将一个直接导航的 URL 添加到浏览器的历史记录中。*列表 20.44*
    将相同的属性应用于启动产品编辑过程的按钮。
- en: 'Listing 20.44: Pushing a URL into the product_row.handlebars file in the templates/admin
    folder'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.44：将 URL 推送到模板文件夹中的 `admin` 文件夹下的 `product_row.handlebars` 文件
- en: '[PRE55]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Navigate to `http://localhost:5000/admin`, and your browser will be redirected
    to `http://localhost:5000/admin/products`. Click the **Orders** button, and the
    URL bar will display `http://localhost:5000/admin/orders`, even though `HTMX`
    sent an HTTP request to the `/api/orders/table` URL.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到 `http://localhost:5000/admin`，你的浏览器将被重定向到 `http://localhost:5000/admin/products`。点击
    **订单** 按钮，URL 栏将显示 `http://localhost:5000/admin/orders`，即使 `HTMX` 向 `/api/orders/table`
    URL 发送了 HTTP 请求。
- en: Click the reload button, and the browser will display the **Orders** list. (The
    database will have been reset when the files changed and will not contain any
    orders.) Request `http://localhost:5000/admin/products/edit/2`, and you will see
    the editor for the `Lifejacket` product, as shown in *Figure 20.9*.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 点击刷新按钮，浏览器将显示 **订单** 列表。（当文件更改时，数据库将被重置，且不会包含任何订单。）请求 `http://localhost:5000/admin/products/edit/2`，你将看到
    `Lifejacket` 产品的编辑器，如 *图 20.9* 所示。
- en: '![](img/B21959_20_09.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_20_09.png)'
- en: 'Figure 20.9: Navigating directly to an application feature'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.9：直接导航到应用程序功能
- en: Restricting access to administration features
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制对管理功能的访问
- en: Access to the administration features should be restricted to approved users,
    which means implementing authentication and authorization. The application already
    has support to identify users, using Google accounts, and the quickest way to
    restrict access is to configure the application to restrict access to a predefined
    list of accounts.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 应限制对管理功能的访问权限仅限于批准的用户，这意味着需要实现身份验证和授权。应用程序已经支持使用 Google 账户识别用户，并且限制访问的最快方法是配置应用程序以限制对预定义账户列表的访问。
- en: '**Note**'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: Using OAuth to authenticate administrators is a useful way to identify users,
    but care should be taken in real projects to ensure some form of administration
    access if the OAuth service is unavailable.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OAuth 进行管理员身份验证是识别用户的有用方式，但在实际项目中应小心处理，以确保在 OAuth 服务不可用的情况下仍能以某种形式访问管理权限。
- en: To start, navigate to [https://console.developers.google.com](https://console.developers.google.com),
    click **Credentials**, and select the **Edit OAuth Client** action, which is represented
    by the pencil icon, as shown in *Figure 20.10*.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导航到 [https://console.developers.google.com](https://console.developers.google.com)，点击
    **凭证**，然后选择 **编辑 OAuth 客户端** 操作，该操作由铅笔图标表示，如 *图 20.10* 所示。
- en: '![](img/B21959_20_10.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_20_10.png)'
- en: 'Figure 20.10: Editing the OAuth client'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.10：编辑 OAuth 客户端
- en: 'Add the following URLs to the **Authorized redirect URIs** section:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下网址添加到 **授权重定向 URI** 部分：
- en: '`http://localhost:5000/auth-signin-google`'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:5000/auth-signin-google`'
- en: '`https://localhost/auth-signin-google`'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://localhost/auth-signin-google`'
- en: There should now be four URIs in this section, as shown in *Figure 20.11*. Click
    **Save** to update the OAuth configuration.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这个部分应有四个 URI，如 *图 20.11* 所示。点击 **保存** 以更新 OAuth 配置。
- en: '![](img/B21959_20_11.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_20_11.png)'
- en: 'Figure 20.11: The authorized redirection URLs'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.11：授权的重定向 URL
- en: Returning to the code editor, add a new `configuration` section that provides
    the application with the OAuth redirection and a list of approved administration
    users, as shown in *Listing 20.45*. (You must enter the email address for a Google
    account for which you have the credentials to be able to authenticate yourself.)
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 返回代码编辑器，添加一个新的 `configuration` 部分，为应用程序提供 OAuth 重定向和批准的管理用户列表，如 *列表 20.45* 所示。（你必须输入一个
    Google 账户的电子邮件地址，并且你有该账户的凭证才能进行身份验证。）
- en: 'Listing 20.45: Adding a configuration section to the server.config.json file
    in the sportsstore folder'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.45：向 sportsstore 文件夹中的 server.config.json 文件添加配置部分
- en: '[PRE56]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '*Listing 20.46* creates a new authentication strategy and adds a new property
    to the `User` interface that differentiates between authentication for administration
    and authentication for placing orders.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 20.46* 创建了一个新的身份验证策略，并将一个新的属性添加到 `User` 接口中，以区分管理身份验证和下单身份验证。'
- en: 'Listing 20.46: Creating a strategy in the authentication.ts file in the src
    folder'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20.46：在 src 文件夹中的 authentication.ts 文件中创建策略
- en: '[PRE57]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The new strategy is created with the name `admin-auth` to differentiate it from
    the existing OAuth strategy. The new callback URL is read from the configuration
    file and used to create the strategy, and the callback function creates a USER
    with the `adminUser` property set to `true`.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 新策略以 `admin-auth` 命名创建，以区分现有的 OAuth 策略。新的回调 URL 从配置文件中读取，并用于创建策略，回调函数创建一个具有
    `adminUser` 属性设置为 `true` 的用户。
- en: There is no persistent data store for administration user details, so the `serializeUser`
    and `deserializeUser` functions have been modified to serialize the entire `User`
    object in the session, but only when the `adminUser` property is `true`.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 管理用户详情没有持久化数据存储，因此`serializeUser`和`deserializeUser`函数已被修改，以便在`adminUser`属性为`true`时将整个`User`对象序列化到会话中。
- en: A new set of routes is required to handle administration authentication, along
    with middleware components to authorize requests, as shown in *Listing 20.47*.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一组新的路由来处理管理身份验证，以及中间件组件来授权请求，如图*列表20.47*所示。
- en: 'Listing 20.47: Adding routes and middleware to the index.ts file in the src/routes/admin
    folder'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 列表20.47：向src/routes/admin文件夹中的index.ts文件添加路由和中间件
- en: '[PRE58]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The new routes are used to prompt the user to sign in, allow users to sign out
    again, and handle the Google OAuth redirections. The middleware components check
    that the signed-in user is one of the approved users from the configuration file,
    with redirection responses for the direct navigation routes and `401` responses
    for the web service routes.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 新的路由用于提示用户登录，允许用户再次注销，并处理谷歌OAuth重定向。中间件组件检查已登录用户是否来自配置文件中批准的用户列表，对于直接导航路由提供重定向响应，对于网络服务路由提供`401`响应。
- en: To define the template that will be rendered when the user needs to sign in,
    add a file named `signin.handlebars` to the `templates/admin` folder with the
    content shown in *Listing 20.48*.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义当用户需要登录时将渲染的模板，请将名为`signin.handlebars`的文件添加到`templates/admin`文件夹中，其内容如*列表20.48*所示。
- en: 'Listing 20.48: The contents of the signin.handlebars file in the templates/admin
    folder'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 列表20.48：在templates/admin文件夹中的signin.handlebars文件的内容
- en: '[PRE59]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The final step is to show the signed-in user’s name and provide a **Sign out**
    button, as shown in *Listing 20.49*.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是显示已登录用户的名字并提供一个**注销**按钮，如图*列表20.49*所示。
- en: 'Listing 20.49: Adding user details to the admin_layout.handlebars file in the
    templates/admin folder'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 列表20.49：向templates/admin文件夹中的admin_layout.handlebars文件添加用户详情
- en: '[PRE60]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Navigate to `http://localhost:5000/admin`, and you will be prompted to **Sign
    in with a Google account**, as shown in *Figure 20.12*. If the account matches
    the approved list, then you will be redirected to the administration features
    once the authentication process is complete. Clicking on the button at the top
    of the window will sign the user out of the application.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到`http://localhost:5000/admin`，系统会提示您**使用谷歌账户登录**，如图*图20.12*所示。如果账户在批准列表中，则在身份验证过程完成后，您将被重定向到管理功能。点击窗口顶部的按钮将使用户从应用程序中注销。
- en: '![](img/B21959_20_12.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21959_20_12.png)'
- en: 'Figure 20.12: Signing in to the administration features'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.12：登录管理功能
- en: Summary
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, I created administration tools to manage the catalog and set
    the order shipping status:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我创建了管理工具来管理目录并设置订单发货状态：
- en: The administration features use a RESTful web service that returns fragments
    of HTML, which are displayed using the `HTMX` package.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理功能使用返回HTML片段的RESTful网络服务，这些片段使用`HTMX`包显示。
- en: The state is managed by the server, which renders templates to produce the HTML
    fragments that are returned by the web service.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态由服务器管理，服务器渲染模板以生成由网络服务返回的HTML片段。
- en: URLs are added to the browser’s history so that the reload and back buttons
    work as expected.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将URL添加到浏览器的历史记录中，以便重新加载和后退按钮按预期工作。
- en: Access to the administration feature is restricted to authorized users who authenticate
    with their Google account.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理功能的访问权限仅限于使用其谷歌账户进行身份验证的授权用户。
- en: In the next chapter, I will prepare the *SportsStore* application for deployment.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将为*SportsStore*应用程序准备部署。
