- en: Chapter 11. Testing the User Interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。测试用户界面
- en: 'In [Chapter 10](part0068.xhtml#aid-20R681 "Chapter 10. Adding Real-time Chat"),
    *Adding Real-time Chat*, we extended our social network by adding a real-time
    chat function. We used WebSockets and Socket.IO in particular to implement the
    communication between the users in our system. The last chapter of this book is
    dedicated to user interface testing. We will explore two popular tools to run
    headless browser testing. This chapter covers the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](part0068.xhtml#aid-20R681 "第10章。添加实时聊天") *添加实时聊天*中，我们通过添加实时聊天功能扩展了我们的社交网络。我们使用了WebSockets和Socket.IO来实现系统中用户之间的通信。本书的最后一章专门讨论用户界面测试。我们将探讨两种流行的工具来运行无头浏览器测试。本章涵盖以下主题：
- en: Introducing the basic testing toolset
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍基本的测试工具集
- en: Preparing our project to run tests
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备我们的项目来运行测试
- en: Running our tests with PhantomJS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PhantomJS运行我们的测试
- en: Testing the user's registration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用户的注册
- en: Testing with DalekJS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DalekJS进行测试
- en: Introducing the basic testing toolset
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍基本的测试工具集
- en: Before writing the tests, we will spend some time talking about the testing
    toolset. We need some instruments to define and run our tests.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写测试之前，我们将花一些时间讨论测试工具集。我们需要一些工具来定义和运行我们的测试。
- en: The testing framework
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试框架
- en: 'In the context of JavaScript, the testing framework is a set of functions that
    help you organize the tests into logical groups. There are framework functions
    such as `suite`, `describe`, `test`, or `it` that define the structure of our
    suite. Here is a short example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript的上下文中，测试框架是一组函数，帮助你将测试组织成逻辑组。有一些框架函数，比如`suite`、`describe`、`test`或`it`，定义了我们的测试套件的结构。以下是一个简短的例子：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We used the `describe` function to wrap the more detailed tests (`it`) into
    a group. Organizing the group in such a way helps us keep focus and at the same
    time, it is quite informative.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`describe`函数将更详细的测试（`it`）包装成一个组。以这种方式组织组有助于我们保持专注，同时也非常信息丰富。
- en: Some popular testing frameworks in the JavaScript community are **QUnit**, **Jasmine**,
    and **Mocha**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript社区中一些流行的测试框架包括**QUnit**、**Jasmine**和**Mocha**。
- en: The assertion library
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断言库
- en: What we usually do while testing is run an assertion. We very often compare
    the values of variables to check whether they match with what we expected when
    we originally wrote the program's logic. Some testing frameworks come with their
    own assertion library, some don't.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常在测试时运行一个断言。我们经常比较变量的值，以检查它们是否与我们最初编写程序逻辑时的预期值匹配。一些测试框架带有自己的断言库，一些则没有。
- en: 'The following line shows a simple usage of such a library:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下一行展示了这样一个库的简单用法：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It is important to mention that the APIs are designed like this so that we understand
    the context by reading the test.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要提到API是这样设计的，以便我们通过阅读测试来理解上下文。
- en: Node.js even has its own built-in library called `assert`. Some of the other
    options are **Chai**, **Expect**, and **Should.js**.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js甚至有自己内置的名为`assert`的库。其他选项包括**Chai**、**Expect**和**Should.js**。
- en: Runner
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行器
- en: The runner is a tool that we use to execute the test in a specific context,
    which is very often a specific browser, but it may also be a different operating
    system or customized environment. We may or may not need a runner. In this particular
    chapter, we will use DalekJS as the test runner.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 运行器是一个工具，我们用它在特定的上下文中执行测试，这个上下文很常见是特定的浏览器，但也可能是不同的操作系统或定制的环境。我们可能需要也可能不需要运行器。在这一特定章节中，我们将使用DalekJS作为测试运行器。
- en: Preparing our project to run tests
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备我们的项目来运行测试
- en: Now we know what tools we need to run our tests. The next step is to prepare
    our project to place such tests. Normally during development, we test our application
    by visiting the pages and interacting with them. We know the result of these actions
    and we verify if everything is okay. We want to do the same thing with automated
    tests. However, instead of us repeating the same steps again and again, there
    will be a script.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了运行测试所需的工具。下一步是准备我们的项目来放置这样的测试。通常在开发过程中，我们通过访问页面并与其交互来测试我们的应用程序。我们知道这些操作的结果，并验证一切是否正常。我们希望用自动化测试做同样的事情。但是，不是我们一遍又一遍地重复相同的步骤，而是会有一个脚本。
- en: In order to make these scripts work, we have to put them in the right context.
    In other words, they should be executed in the context of our application.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这些脚本起作用，我们必须将它们放在正确的上下文中。换句话说，它们应该在我们的应用程序的上下文中执行。
- en: 'In the previous section, we mentioned Chai (an assertion library) and Mocha
    (a testing framework). They play well together. So, we will add them to our list
    of dependencies, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们提到了Chai（一个断言库）和Mocha（一个测试框架）。它们很好地配合在一起。因此，我们将把它们添加到我们的依赖列表中，如下所示：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A quick run of `npm install` will set up the modules in the `node_modules` directory.
    Chai and Mocha are distributed as Node.js modules, but we may use them in the
    browser environment, too. The newly created folders in `node_modules` contain
    compiled versions. For example, to run Mocha in the browser, we have to include
    `node_modules/mocha/mocha.js` in our page.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 快速运行`npm install`将在`node_modules`目录中设置模块。Chai和Mocha被分发为Node.js模块，但我们也可以在浏览器环境中使用它们。`node_modules`中新创建的文件夹包含编译版本。例如，要在浏览器中运行Mocha，我们必须在我们的页面中包含`node_modules/mocha/mocha.js`。
- en: 'Our social network is a single-page application. We have a main HTML template
    that is served by the backend, which is located in `backend/tpl/page.html`. The
    Node.js server reads this file and sends it to the browser. The rest is handled
    by the JavaScript code. Here is how `page.html` looks:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的社交网络是一个单页面应用程序。我们有一个主HTML模板，由后端提供，位于`backend/tpl/page.html`中。Node.js服务器读取此文件并将其发送到浏览器。其余部分由JavaScript代码处理。以下是`page.html`的样子：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The file contains all the external resources needed to run the application.
    However, now we need to add a few more tags; some of them are as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件包含运行应用程序所需的所有外部资源。但是，现在我们需要添加一些标签；其中一些如下：
- en: The `/node_modules/mocha/mocha.css` file contains styles for the proper display
    of the results of the tests. This is a part of Mocha's reporters.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/node_modules/mocha/mocha.css`文件包含了测试结果正确显示的样式。这是Mocha报告者的一部分。'
- en: The `/node_modules/mocha/mocha.js` file is the testing framework.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/node_modules/mocha/mocha.js`文件是测试框架。'
- en: The `/node_modules/chai/chai.js` file is the assertion library.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/node_modules/chai/chai.js`文件是断言库。'
- en: The `/tests/spec.js` is a file that contains the actual test. It still does
    not exist. We will create a `tests` directory and a `spec.js` file inside it.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/tests/spec.js`是一个包含实际测试的文件。它目前还不存在。我们将创建一个`tests`目录，并在其中创建一个`spec.js`文件。'
- en: An empty `div` tag acts as a placeholder for the test results and a few lines
    of JavaScript bootstrap the Mocha framework.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空的`div`标签充当测试结果的占位符，几行JavaScript代码引导Mocha框架。
- en: 'We can''t add all these new elements in the current `page.html` file, because
    the users of the system will see them. We will place them in another file and
    tweak the backend so that it serves it under specific conditions. Let''s create
    `backend/tpl/pageTest.html`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能把所有这些新元素都添加到当前的`page.html`文件中，因为系统的用户会看到它们。我们将把它们放在另一个文件中，并调整后端，以便在特定条件下提供它。让我们创建`backend/tpl/pageTest.html`：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once `mocha.js` and `chai.js` are injected in the page, we will configure the
    framework. Our user interface will follow behavior-driven development and the
    reporter will be `html`. Mocha has several types of reporters, and since we wanted
    to display the results in a browser, we used this one. We defined an `expect`
    global object that played the role of an assertion tool.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`mocha.js`和`chai.js`被注入到页面中，我们将配置框架。我们的用户界面将遵循行为驱动开发，报告者将是`html`。Mocha有几种类型的报告者，由于我们想在浏览器中显示结果，所以我们使用了这个。我们定义了一个`expect`全局对象，起到了断言工具的作用。
- en: The lines after that will come in handy in the next section where we will run
    our test with PhantomJS. These lines will basically check whether there is a `window.mochaPhantomJS`
    object, and if there is, it will be used instead of the default `mocha`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，这些行将会派上用场，我们将使用PhantomJS运行我们的测试。这些行基本上会检查是否有`window.mochaPhantomJS`对象，如果有的话，它将被用来代替默认的`mocha`。
- en: 'So far, so good. We have instruments that will help us to run and write our
    test and a page that contains the necessary code. The next step is to tweak the
    backend so that it uses the new `pageTest.html` file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很顺利。我们有工具可以帮助我们运行和编写测试，还有一个包含必要代码的页面。下一步是调整后端，以便使用新的`pageTest.html`文件：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The file that we have to change is `Default.js`. That's the handler of the `Default.js`
    file's route in our application. The newly added `htmlWithTests` variable contains
    the new HTML markup. We use the `url` module to find out the `GET` variables that
    come from the client. If there is a `test` parameter, then we will load the page
    containing the layout and the test. Otherwise, it is the original HTML.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更改的文件是`Default.js`。这是我们应用程序中`Default.js`文件路由的处理程序。新添加的`htmlWithTests`变量包含了新的HTML标记。我们使用`url`模块来查找来自客户端的`GET`变量。如果有`test`参数，那么我们将加载包含布局和测试的页面。否则，就是原始的HTML。
- en: 'After the last change, we can run the server and open `http://localhost:9000/register?test=1`.
    However, we will get a bunch of error messages complaining that there are some
    missing files. This happens because the `server.js` file does not recognize URLs
    that start with `node_modules` or `tests`. The files that exist in these directories
    are static resources. So, we can use the already defined `Assets` module, as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一次更改之后，我们可以运行服务器并打开`http://localhost:9000/register?test=1`。然而，我们会收到一堆错误消息，抱怨有一些文件丢失。这是因为`server.js`文件不识别以`node_modules`或`tests`开头的URL。这些目录中存在的文件是静态资源。因此，我们可以使用已经定义的`Assets`模块，如下所示：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, there is a file left that we have to create—`tests/spec.js`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有一个文件需要创建——`tests/spec.js`：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This code is the simplest structure of a test. We have a group and a test inside.
    The key moment here is to run `done()` towards the end of the test.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是一个测试的最简单结构。我们有一个组和一个测试。关键时刻是在测试结束时运行`done()`。
- en: 'We know that this test passes. The result in the browser looks like the following
    screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道这个测试通过了。浏览器中的结果如下截图所示：
- en: '![Preparing our project to run tests](img/image00191.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![准备项目运行测试](img/image00191.jpeg)'
- en: It is worth mentioning that the loaded page is still the same except for the
    elements in the top-right corner and below the footer. These new tags are generated
    by the Mocha framework. This is how the `html` reporter displays the results of
    our test.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，加载的页面仍然是相同的，除了右上角和页脚下方的元素。这些新标签是由Mocha框架生成的。这就是`html`报告者显示我们测试结果的方式。
- en: Running our test with PhantomJS
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PhantomJS运行我们的测试
- en: The result of the preceding sections is an automated test that runs in the browser.
    However, this is very often not enough. We may need to integrate the testing in
    our deployment processes, and using the browser is not always an option. Thankfully,
    there is a type of browser called a **headless browser**. It is a functional browser
    without a user interface. We still can visit a page, click links, or fill forms,
    but all of these actions are controlled by code. This is perfect for us and for
    automated testing.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 前面几节的结果是在浏览器中运行的自动化测试。然而，这通常是不够的。我们可能需要将测试集成到部署流程中，而在浏览器中进行测试并不总是一个选择。幸运的是，有一种称为**无头浏览器**的浏览器类型。它是一个没有用户界面的功能性浏览器。我们仍然可以访问页面，点击链接或填写表单，但所有这些操作都是由代码控制的。这对于我们和自动化测试来说是完美的。
- en: There are a couple of popular headless browsers. Selenium ([https://github.com/seleniumhq/selenium](https://github.com/seleniumhq/selenium))
    is one of them. It is well documented and has a big community. Another one is
    PhantomJS. It plays well with Node.js. So we are going to use it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种流行的无头浏览器。Selenium ([https://github.com/seleniumhq/selenium](https://github.com/seleniumhq/selenium))就是其中之一。它有很好的文档和庞大的社区。另一个是PhantomJS。它与Node.js兼容良好。所以我们将使用它。
- en: 'We already have several components added to the test environment. To use PhantomJS
    directly, some supplementary configuration is needed. In order to avoid additional
    complexity, we will install the `mocha-phantomjs` module. Its purpose is to simplify
    the usage of the headless browser, especially in a combination of the Mocha framework.
    The following command will set `mocha-phantomjs` as a global command in our terminal:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在测试环境中添加了几个组件。要直接使用PhantomJS，需要一些补充配置。为了避免额外的复杂性，我们将安装`mocha-phantomjs`模块。它的目的是简化无头浏览器的使用，特别是与Mocha框架的结合。以下命令将在我们的终端中将`mocha-phantomjs`设置为全局命令：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Since version 3.4, the `mocha-phantomjs` module uses PhantomJS as a peer dependency,
    which means that we do not have to install the browser manually.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 自3.4版本以来，`mocha-phantomjs`模块使用PhantomJS作为对等依赖，这意味着我们不必手动安装浏览器。
- en: After successful installation, we are ready to run our test. The command that
    we have to type in our console is `mocha-phantomjs http://localhost:9000\?test=1`.
    There are back slashes because otherwise, if this wasn't the case, the terminal
    may not have interpreted the line correctly.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功后，我们准备运行测试。我们在控制台中要输入的命令是`mocha-phantomjs http://localhost:9000\?test=1`。有反斜杠是因为如果不是这样的话，终端可能无法正确解释这行。
- en: 'The result is shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在以下截图中：
- en: '![Running our test with PhantomJS](img/image00192.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![使用PhantomJS运行我们的测试](img/image00192.jpeg)'
- en: This is pretty much the same result that we got in the browser. The good thing
    is that the process now happens in the terminal.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上与我们在浏览器中得到的结果相同。好处是现在这个过程发生在终端中。
- en: Testing user registration
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试用户注册
- en: 'Let''s use the setup built in the previous sections and write an actual test.
    Let''s say that we want to make sure that our registering page works. The following
    are the two processes that we want to capture with our test:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用前几节中构建的设置并编写一个实际的测试。假设我们要确保我们的注册页面可以正常工作。以下是我们想要用我们的测试捕获的两个过程：
- en: Filling the form with wrong data and making sure that the application shows
    an error message
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填写表单并确保应用程序显示错误消息
- en: Filling the form with correct data and seeing a successful message
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填写表单并看到成功消息
- en: We are going to use PhantomJS as our headless (virtual) browser. So, all we
    have to do is load our registration page and simulate user interactions, such
    as typing in the fields and pressing the buttons.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用PhantomJS作为我们的无头（虚拟）浏览器。因此，我们所要做的就是加载我们的注册页面并模拟用户交互，比如在字段中输入并按下按钮。
- en: Simulating user interaction
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模拟用户交互
- en: 'There are a couple of issues that we are going to resolve. The first one is
    the actual simulation of user actions. From a JavaScript point of view, these
    actions are translated to events dispatched by some particular DOM elements. The
    following helper method will become a part of the `tests/spec.js` file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将解决几个问题。第一个问题是实际模拟用户操作。从JavaScript的角度来看，这些操作被转换为由特定DOM元素分派的事件。以下辅助方法将成为`tests/spec.js`文件的一部分：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `trigger` function accepts an element, the name of an event, an event group,
    and a key code. The first two arguments are mandatory. The third one has a default
    value of `MouseEvents` and the last one is optional. We are going to use the method
    to trigger the `change` and `click` events.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`trigger`函数接受一个元素、事件的名称、事件组和一个键码。前两个参数是必需的。第三个参数的默认值为`MouseEvents`，最后一个参数是可选的。我们将使用该方法来触发`change`和`click`事件。'
- en: Filling and submitting the registration form
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填写并提交注册表单
- en: 'Let''s start by filling the input fields of our registration form. It is worth
    mentioning that the code that we are going to write runs in a browser so that
    we have access to `document.querySelector`, for example. The following lines type
    a string in the first name field:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从填写注册表单的输入字段开始。值得一提的是，我们将要编写的代码在浏览器中运行，因此我们可以访问`document.querySelector`，例如。以下行在名字字段中输入一个字符串：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Sending a string to the `firstName` element updates the user interface. However
    Ractive.js, our client-side framework, does not know about this change. The dispatching
    of the `change` event solves this problem.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 向`firstName`元素发送一个字符串会更新用户界面。然而，我们的客户端框架Ractive.js并不知道这个变化。分派`change`事件可以解决这个问题。
- en: 'We will use the same pattern to add values to the last name, e-mail, and password
    fields:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用相同的模式向姓氏、电子邮件和密码字段添加值：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The value of the e-mail''s input field is invalid. This is done on purpose.
    We want to capture the case where the backend returns an error. To finish the
    operation, we have to click on the **register** button:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件输入字段的值是无效的。这是故意的。我们希望捕获后端返回错误的情况。要完成操作，我们必须点击**注册**按钮：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If we run the test now, we will see the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行测试，将会看到以下截图：
- en: '![Filling and submitting the registration form](img/image00193.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![填写并提交注册表单](img/image00193.jpeg)'
- en: The test basically fails with a timeout. This is because we didn't call the
    `done` function. However, even then, we do not have any assertions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 测试基本上因超时而失败。这是因为我们没有调用`done`函数。然而，即使这样，我们也没有任何断言。
- en: 'Now, things get interesting. The processes that occur in the browser are asynchronous.
    This means that we cannot simply run our assertion after we click the button.
    We should wait for a while. The usage of `setTimeout` is not acceptable in these
    cases. The right approach here is to tweak the code of the application so that
    it notifies the outside world that a particular job is done. In our case, this
    is the submission of the registration form. To be more precise, we have to update
    `s/controllers/Register.js`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，事情变得有趣起来。在浏览器中发生的过程是异步的。这意味着我们不能简单地在点击按钮后运行我们的断言。我们应该等一会儿。在这种情况下，使用`setTimeout`是不可接受的。正确的方法是调整应用程序的代码，以便它通知外部世界特定的工作已经完成。在我们的情况下，这是提交注册表单。更准确地说，我们必须更新`s/controllers/Register.js`：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The addition is `self.fire('form-submitted')`. Once the model returns the response
    and we process it, we dispatch an event. For the users who visit the site, this
    line does nothing. However, for our test suite, this is a way to find out when
    the backend responds and the user interface is updated. This is when we have to
    make our assertions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 添加的是`self.fire('form-submitted')`。一旦模型返回响应并且我们处理它，我们就会分派一个事件。对于访问网站的用户，这一行无效。但是对于我们的测试套件来说，这是一种找出后端响应并且用户界面已更新的方法。这时我们需要进行断言。
- en: Tweaking the code's execution order
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整代码的执行顺序
- en: 'The dispatching of the event is nice, but it does not solve the problem entirely.
    We need to reach the `Register` controller and subscribe to the `form-submitted`
    message. In our test, we have access to the global scope (the `window` object).
    Let''s use it as a bridge and provide a shortcut to the currently used controller,
    as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 事件的分派很好，但并不能完全解决问题。我们需要到达`Register`控制器并订阅`form-submitted`消息。在我们的测试中，我们可以访问全局范围（`window`对象）。让我们将其用作桥梁，并为当前使用的控制器提供一个快捷方式，如下所示：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the `app.js` file, we switched the pages of our application. This is the
    perfect place for our tweak because at this point, we know which controller is
    rendered.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app.js`文件中，我们切换了应用程序的页面。这是我们调整的完美位置，因为在这一点上，我们知道哪个控制器被呈现。
- en: One last thing that you should do before continuing with the actual test is
    to make sure that your social network is fully initialized and there is a view
    that is being rendered. This again needs access to the global `window` object.
    Our test will store a function in the `window.onAppReady` property, and the application
    will run it when PhantomJS opens the page. Note that attaching objects or variables
    to the global scope is not considered a good practice. However, in order to make
    our test work, we need such little tricks. We can always skip this while compiling
    a file for production release.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续实际测试之前，您应该做的最后一件事是确保您的社交网络已完全初始化，并且有一个正在呈现的视图。这再次需要访问全局`window`对象。我们的测试将在`window.onAppReady`属性中存储一个函数，并且当PhantomJS打开页面时，应用程序将运行它。请注意，将对象或变量附加到全局范围并不被认为是一种良好的做法。但是，为了使我们的测试工作，我们需要这样的小技巧。在编译文件进行生产发布时，我们可以随时跳过这一点。
- en: 'In `backend/tpl/pageTest.html`, we have the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在`backend/tpl/pageTest.html`中，我们有以下代码：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we continue using these lines, our test will fail because no UI is rendered
    when our assertions are executed. Instead, we should use the new `onAppReady`
    property to delay the calling of the `run` method in the following way:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们继续使用这些行，我们的测试将失败，因为在执行断言时没有呈现任何UI。相反，我们应该使用新的`onAppReady`属性以以下方式延迟调用`run`方法：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Thus, we included Mocha and Chai. We configured the testing framework, added
    a function that will be executed when `onAppReady` is called, and then we ran
    the actual application.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们包括了Mocha和Chai。我们配置了测试框架，添加了一个在调用`onAppReady`时执行的函数，然后运行了实际应用程序。
- en: Listening to the form-submitted event
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监听`form-submitted`事件
- en: 'The very last code that we have to write is to subscribe for the `form-submitted`
    event, which is dispatched by our controller when the form is submitted and the
    result of the backend is processed. Our API should first respond with an error
    because we set a wrong e-mail value (`email.value = ''wrong email''`). Here is
    how we capture the error message:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要编写的最后一行代码是订阅`form-submitted`事件，当表单提交并且后端处理结果时，控制器会分发此事件。我们的API应该首先响应错误，因为我们设置了错误的电子邮件值（`email.value
    = 'wrong email'`）。以下是我们如何捕获错误消息：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `!!error` item cast the error variable to a Boolean. We will check for
    the existence of the error element. If it is there, then the test passes. The
    result in the console is as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`!!error`项目将错误变量转换为布尔值。我们将检查错误元素的存在。如果存在，那么测试通过。控制台中的结果如下：'
- en: '![Listening to the form-submitted event](img/image00194.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![监听form-submitted事件](img/image00194.jpeg)'
- en: 'We verified the error reporting. Let''s close the cycle by making sure that
    the successful message appears when all the fields are filled properly:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证了错误报告。让我们通过确保当所有字段都正确填写时成功消息出现来结束这个循环：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `form-submitted` event will be dispatched twice. So, we will use an additional
    `submitted` variable to distinguish between both the calls. In the first case,
    we will check for `.error`, while in the second one, we will check for `.success`.
    After running the `mocha-phantomjs` command, we will get the same result as before,
    but this time, we are sure that the entire registration process works. Note that
    we attach a dynamically generated timestamp so that we get different e-mails every
    time.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`form-submitted`事件将被分派两次。因此，我们将使用额外的`submitted`变量来区分这两个调用。在第一种情况下，我们将检查`.error`，而在第二种情况下，我们将检查`.success`。运行`mocha-phantomjs`命令后，我们将得到与之前相同的结果，但这次我们确信整个注册过程都是有效的。请注意，我们附加了一个动态生成的时间戳，以便每次都获得不同的电子邮件。'
- en: Testing with DalekJS
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DalekJS进行测试
- en: DalekJS is an open source UI testing tool that is written entirely in JavaScript.
    It acts as a test runner. It has its own API to perform user interface interactions.
    A very interesting feature of DalekJS is that it works with different browsers.
    It is capable of running tests in PhantomJS and popular browsers such as Chrome,
    Safari, Firefox, and Internet Explorer. It uses a **WebDriver JSON-Wire** protocol
    to communicate with these browsers and basically control what goes on in them.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: DalekJS是一个完全用JavaScript编写的开源UI测试工具。它充当测试运行器。它有自己的API来执行用户界面交互。DalekJS的一个非常有趣的特性是它可以与不同的浏览器一起工作。它能够在PhantomJS和流行的浏览器（如Chrome、Safari、Firefox和Internet
    Explorer）中运行测试。它使用**WebDriver JSON-Wire**协议与这些浏览器进行通信，并基本上控制它们的操作。
- en: Installing DalekJS
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装DalekJS
- en: 'First, we need to install DalekJS''s command-line tool. It is distributed as
    a Node.js package. So, the following command will download the necessary files:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装DalekJS的命令行工具。它作为一个Node.js包进行分发。因此，以下命令将下载必要的文件：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When the process finishes, we can run the `dalek` command in our terminal.
    The next step is to add the `dalekjs` module in our dependencies. This is the
    package that summons the tool''s API. So, two more lines are needed in the `package.json`
    file:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当进程完成时，我们可以在终端中运行`dalek`命令。下一步是在我们的依赖项中添加`dalekjs`模块。这是召唤该工具API的包。因此，在`package.json`文件中需要两行：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We mentioned that DalekJS works with real browsers such as Chrome, Safari, and
    Firefox. There are dedicated packages that deal with all of these browsers. For
    example, if we want to test in the Chrome browser, we have to install `dalek-browser-chrome`
    as the dependency.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到DalekJS可以与Chrome、Safari和Firefox等真实浏览器一起工作。有专门的包来处理所有这些浏览器。例如，如果我们想在Chrome浏览器中进行测试，我们必须安装`dalek-browser-chrome`作为依赖项。
- en: Using the DalekJS API
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用DalekJS API
- en: 'DalekJS works in a similar way to the `mocha-phantomjs` module. We write our
    test in a file and simply pass that file to a command in our terminal. Let''s
    create a new file called `tests/dalekjs.spec.js` and put the following code inside
    it:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: DalekJS的工作方式类似于`mocha-phantomjs`模块。我们在文件中编写我们的测试，然后简单地将该文件传递给我们的终端中的命令。让我们创建一个名为`tests/dalekjs.spec.js`的新文件，并将以下代码放入其中：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The tool requires that we export an object, the keys of which are our test cases.
    We have only one case called `Testing registration`. We pass a function that receives
    a `test` argument, which gives us access to the DalekJS API.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具要求我们导出一个对象，其键是我们的测试用例。我们只有一个名为`Testing registration`的案例。我们传递一个接收`test`参数的函数，这使我们可以访问DalekJS
    API。
- en: The API of the module is designed in such a way that it is quite easy to understand
    what is going on. We open a specific URL and set values to the input fields. Like
    in the previous test, we will type in a wrong e-mail value and press the **Submit**
    button. The .`waitForElement` method is handy here because the operation is asynchronous.
    Once we detect the existence of the `.error` element, we will continue by writing
    the correct e-mail value and submitting the form again.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块的API设计得非常易于理解。我们打开一个特定的URL并为输入字段设置值。就像在之前的测试中，我们将输入一个错误的电子邮件值，然后点击**提交**按钮。在这里，`.waitForElement`方法非常方便，因为操作是异步的。一旦我们检测到`.error`元素的存在，我们将继续写入正确的电子邮件值并再次提交表单。
- en: 'To run the test, we have to type `dalek ./tests/dalekjs.spec.js -b chrome`
    in the console. DalekJS will open a real Chrome window, which will execute the
    test and report the following in the terminal:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行测试，我们必须在控制台中键入`dalek ./tests/dalekjs.spec.js -b chrome`。DalekJS将打开一个真正的Chrome窗口，执行测试并在终端中报告以下内容：
- en: '![Using the DalekJS API](img/image00195.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![使用DalekJS API](img/image00195.jpeg)'
- en: With DalekJS, we did not have to tweak our application's code. There is no additional
    assertion library or testing framework. All this is wrapped in a single module
    that is easy to use and install.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用DalekJS，我们不需要调整我们应用的代码。没有额外的断言库或测试框架。所有这些都包含在一个易于使用和安装的单个模块中。
- en: From another point of view, DalekJS may not be useful to every project. For
    example, it may not be useful when we need to interact with the code of the application
    or if we need something that is not listed in the provided API.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 从另一个角度来看，DalekJS可能对每个项目都不是有用的。例如，当我们需要与应用程序的代码交互或需要一些未在提供的API中列出的东西时，它可能就不那么有用了。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how to test our user interface. We successfully solved
    a couple of issues and used tools such as Mocha, Chai, and DalekJS. Testing our
    code is important, but it is often not enough. Tests that simulate user interaction
    and prove that our software works properly should exist.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何测试我们的用户界面。我们成功解决了一些问题，并使用了诸如Mocha、Chai和DalekJS之类的工具。测试我们的代码很重要，但通常还不够。应该存在模拟用户交互并证明我们的软件正常工作的测试。
