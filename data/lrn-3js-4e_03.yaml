- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Working with Light Sources in Three.js
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Three.js 中使用光源
- en: 'In [*Chapter 1*](B18726_01.xhtml#_idTextAnchor014), *Creating Your First 3D
    Scene with Three.js*, you learned about the basics of Three.js, and in [*Chapter
    2*](B18726_02.xhtml#_idTextAnchor028), *The Basic Components that Make up a Three.js
    Application*, we looked a bit deeper at the most important parts of the scene:
    the geometries, meshes, and cameras. You might have noticed that we skipped exploring
    the details of lights in that chapter, even though they make up an important part
    of every Three.js scene. Without lights, we won’t see anything rendered (unless
    we use basic or wireframe materials). Since Three.js contains several different
    light sources, each of which has a specific use, we’ll use this chapter to explain
    the various details of lights and prepare you for the upcoming chapters on material
    usage. By the end of this chapter, you’ll know the differences between the available
    lights and be able to choose and configure the correct light for your scene.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 1 章*](B18726_01.xhtml#_idTextAnchor014)，*使用 Three.js 创建您的第一个 3D 场景*中，你学习了
    Three.js 的基础知识，而在[*第 2 章*](B18726_02.xhtml#_idTextAnchor028)，*构成 Three.js 应用程序的基本组件*中，我们更深入地探讨了场景中最重要的一部分：几何体、网格和摄像机。你可能已经注意到，在那个章节中我们跳过了对灯光的详细探讨，尽管它们是每个
    Three.js 场景的重要组成部分。没有灯光，我们将看不到任何渲染效果（除非我们使用基本或线框材质）。由于 Three.js 包含了多种不同的光源，每种光源都有特定的用途，我们将利用本章来解释灯光的各个方面细节，并为即将到来的关于材质使用的章节做准备。到本章结束时，你将了解可用的灯光之间的区别，并能够为你的场景选择和配置正确的灯光。
- en: Note
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: WebGL itself doesn’t have inherent support for lighting. Without Three.js, you
    would have to write specific WebGL shader programs to simulate these kinds of
    lights, which is quite difficult. A good introduction to simulating lighting in
    WebGL from scratch can be found at [https://developer.mozilla.org/en-US/docs/Web/WebGL/Lighting_in_WebGL](https://developer.mozilla.org/en-US/docs/Web/WebGL/Lighting_in_WebGL).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: WebGL 本身并不具备内置的光照支持。如果没有 Three.js，你将不得不编写特定的 WebGL 着色器程序来模拟这些类型的光，这相当困难。可以从[https://developer.mozilla.org/en-US/docs/Web/WebGL/Lighting_in_WebGL](https://developer.mozilla.org/en-US/docs/Web/WebGL/Lighting_in_WebGL)找到关于从头开始模拟
    WebGL 中光照的良好介绍。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Different kinds of lighting in Three.js
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Three.js 中的不同类型的光照
- en: Working with basic lights
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基本光源
- en: Working with special lights
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用特殊光源
- en: As with all the chapters, we have a lot of examples that you can use to experiment
    with the behavior of lights. The examples shown in this chapter can be found in
    the `chapter-03` folder of the supplied sources.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有章节一样，我们提供了大量的示例，你可以使用这些示例来实验灯光的行为。本章中展示的示例可以在提供的源代码的`chapter-03`文件夹中找到。
- en: What lighting types are provided in Three.js?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Three.js 中提供了哪些光照类型？
- en: 'Several different lights are available in Three.js that all have specific behavior
    and usages. In this chapter, we’ll discuss the following set of lights:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Three.js 中提供了几种不同的光源，它们都具有特定的行为和用法。在本章中，我们将讨论以下一组光源：
- en: '`THREE.AmbientLight`: This is a basic light, the color of which is added to
    the current color of the objects in the scene.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.AmbientLight`：这是一种基本光源，其颜色被添加到场景中对象的当前颜色上。'
- en: '`THREE.PointLight`: This is a single point in space from which light spreads
    in all directions. This light can be used to create shadows.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.PointLight`：这是一个空间中的单一点，光线从这个点向所有方向扩散。这种光可以用来创建阴影。'
- en: '`THREE.SpotLight`: This light source has a cone-like effect like that of a
    desk lamp, a spotlight in the ceiling, or a torch. This light can cast shadows.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.SpotLight`：这种光源具有类似台灯、天花板上的聚光灯或火炬的锥形效果。这种光可以投射阴影。'
- en: '`THREE.DirectionalLight`: This is also called infinite light. The light rays
    from this light can be seen as parallel, similar to the light from the Sun. This
    light can also be used to create shadows.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.DirectionalLight`：这也被称为无限光。从这个光源发出的光线看起来是平行的，类似于太阳的光线。这种光也可以用来创建阴影。'
- en: '`THREE.HemisphereLight`: This is a special light and can be used to create
    more natural-looking outdoor lighting by simulating a reflective surface and a
    faintly illuminating sky. This light also doesn’t provide any shadow-related functionality.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.HemisphereLight`：这是一种特殊的光源，可以通过模拟反射表面和微弱照亮的苍穹来创建更自然的外观户外光照。这种光源也不提供任何与阴影相关的功能。'
- en: '`THREE.RectAreaLight`: With this light source, instead of a single point in
    space, you can specify an area from which light emanates. `THREE.RectAreaLight`
    doesn’t cast any shadows.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.RectAreaLight`：使用这个光源，你可以在空间中指定一个区域，光从这个区域发出。`THREE.RectAreaLight` 不会产生任何阴影。'
- en: '`THREE.LightProbe`: This is a special kind of light source where, based on
    the environment map used, a dynamic ambient light source is created to light the
    scene.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.LightProbe`：这是一种特殊类型的光源，根据使用的环境贴图，创建一个动态的环境光源来照亮场景。'
- en: '`THREE.LensFlare`: This is not a light source, but with `THREE.LensFlare`,
    you can add a lens flare effect to the lights in your scene.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.LensFlare`：这并不是一个光源，但使用 `THREE.LensFlare`，你可以为场景中的灯光添加镜头光晕效果。'
- en: 'This chapter is divided into two main parts. First, we’ll look at the basic
    lights: `THREE.AmbientLight`, `THREE.PointLight`, `THREE.SpotLight`, and `THREE.DirectionalLight`.
    All these lights extend the base `THREE.Light` object, which provides shared functionality.
    The lights mentioned here are simple lights that require little setup and can
    be used to recreate most of the required lighting scenarios. In the second part,
    we will look at a couple of special-purpose lights and effects: `THREE.HemisphereLight`,
    `THREE.RectAreaLight`, `THREE.LightProbe`, and `THREE.LensFlare`. You’ll probably
    only need these lights in very specific cases.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章分为两个主要部分。首先，我们将查看基本灯光：`THREE.AmbientLight`、`THREE.PointLight`、`THREE.SpotLight`
    和 `THREE.DirectionalLight`。所有这些灯光都扩展了基本的 `THREE.Light` 对象，它提供了共享的功能。这里提到的灯光是简单的灯光，设置简单，可以用来重现大多数所需的灯光场景。在第二部分，我们将查看一些特殊用途的灯光和效果：`THREE.HemisphereLight`、`THREE.RectAreaLight`、`THREE.LightProbe`
    和 `THREE.LensFlare`。你可能只有在非常特定的情况下才需要这些灯光。
- en: Working with basic lights
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与基本灯光一起工作
- en: 'We’ll start with the most basic of the lights: `THREE.AmbientLight`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从最基本的灯光开始：`THREE.AmbientLight`。
- en: THREE.AmbientLight
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.AmbientLight
- en: When you create a `THREE.AmbientLight`, the color is applied globally. There
    isn’t a specific direction this light comes from, and `THREE.AmbientLight` doesn’t
    contribute to any shadows. You would normally not use `THREE.AmbientLight` as
    the single source of light in a scene since it applies its color to all the objects
    in the scene in the same way, regardless of the shape of the mesh. You use it
    together with other lighting sources, such as `THREE.SpotLight` or `THREE.DirectionalLight`,
    to soften the shadows or add some additional color to the scene. The easiest way
    to understand this is by looking at the `ambient-light.html` example in the `chapter-03`
    folder. In this example, you get a simple user interface that can be used to modify
    the `THREE.AmbientLight` object that is available in this scene.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个 `THREE.AmbientLight` 时，颜色是全局应用的。这种光没有特定的方向来源，`THREE.AmbientLight` 不会产生任何阴影。通常情况下，你不会将
    `THREE.AmbientLight` 作为场景中唯一的灯光源，因为它以相同的方式将颜色应用到场景中的所有对象上，而不考虑网格的形状。你通常将它与其他灯光源一起使用，例如
    `THREE.SpotLight` 或 `THREE.DirectionalLight`，以柔化阴影或为场景添加一些额外的颜色。理解这一点最简单的方法是查看
    `chapter-03` 文件夹中的 `ambient-light.html` 示例。在这个示例中，你得到一个简单的用户界面，可以用来修改场景中可用的 `THREE.AmbientLight`
    对象。
- en: 'In the following screenshots, you can see that we used a simple waterfall model,
    and made the `color` and `intensity` properties of the used `THREE.AmbientLight`
    object configurable. In this first screenshot, you can see what happens when we
    set the color of the light to red:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中，你可以看到我们使用了一个简单的瀑布模型，并使使用的 `THREE.AmbientLight` 对象的 `color` 和 `intensity`
    属性可配置。在这个第一张屏幕截图中，你可以看到当我们把灯光的颜色设置为红色时会发生什么：
- en: '![Figure 3.1 – Ambient light set to red](img/Figure_3.1_B18726.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – 环境光设置为红色](img/Figure_3.1_B18726.jpg)'
- en: Figure 3.1 – Ambient light set to red
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 环境光设置为红色
- en: 'As you can see, each element in our scene now has a red color added to its
    original color. And if we change the color to blue, we’ll get something like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，现在场景中的每个元素都添加了红色到其原始颜色上。如果我们把颜色改为蓝色，我们会得到类似这样的效果：
- en: '![Figure 3.2 – Ambient light set to blue](img/Figure_3.2_B18726.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – 环境光设置为蓝色](img/Figure_3.2_B18726.jpg)'
- en: Figure 3.2 – Ambient light set to blue
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 环境光设置为蓝色
- en: 'As this screenshot shows, the blue color is applied to all the objects and
    casts a glow over the complete scene. What you should remember when working with
    this light is that you should be very conservative with the color you specify.
    If the color you specify is too bright, you’ll quickly get a completely oversaturated
    image. Besides the color, we can also set the `intensity` property of the light.
    This property determines how much `THREE.AmbientLight` affects the colors in the
    scene. If we turn it down, only a little of the color is applied to the objects
    in the scene. If we turn it up, our scene becomes really bright:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如此截图所示，蓝色被应用于所有物体，并在整个场景上产生光芒。当你使用这种灯光时，你应该记住的是，你应该非常保守地指定颜色。如果你指定的颜色太亮，你很快就会得到一个完全过饱和的图像。除了颜色之外，我们还可以设置灯光的
    `intensity` 属性。这个属性决定了 `THREE.AmbientLight` 对场景中颜色的影响程度。如果我们将其调低，只有少量的颜色被应用于场景中的物体。如果我们将其调高，我们的场景就会变得非常明亮：
- en: '![Figure 3.3 – Ambient light set to red with high intensity](img/Figure_3.3_B18726.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – 环境光设置为高强度的红色](img/Figure_3.3_B18726.jpg)'
- en: Figure 3.3 – Ambient light set to red with high intensity
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 环境光设置为高强度的红色
- en: 'Now that we’ve seen what it does, let’s look at how you can create and use
    a `THREE.AmbientLight`. The following lines of code show you how to create a `THREE.AmbientLight`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了它的作用，让我们看看如何创建和使用一个 `THREE.AmbientLight`。以下代码行展示了如何创建一个 `THREE.AmbientLight`：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating a `THREE.AmbientLight` is very simple and only takes a couple of steps.
    `THREE.AmbientLight` doesn’t have a position and is applied globally, so we only
    need to specify the color and add this light to the scene. Optionally, we can
    also provide an additional value in this constructor for the intensity of this
    light. Since we didn’t specify it here, it uses a default intensity of `1`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `THREE.AmbientLight` 非常简单，只需要几个步骤。`THREE.AmbientLight` 没有位置，是全局应用的，所以我们只需要指定颜色并将此灯光添加到场景中。可选地，我们也可以在这个构造函数中提供一个额外的值来指定这种灯光的强度。由于我们没有在这里指定它，它使用默认强度
    `1`。
- en: 'Note that in the previous code fragment, we passed in an explicit `THREE.Color`
    object to the constructor of `THREE.AmbientLight`. We could have also passed in
    the color as a string – for example, `"rgb(255, 0, 0)"` or `"hsl(0, 100%, 50%)"`
    – or as a number, as we did in the previous chapters: `0xff0000`. More information
    on this can be found in the *Using the THREE.Color* *object* section.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在前面的代码片段中，我们向 `THREE.AmbientLight` 的构造函数传递了一个显式的 `THREE.Color` 对象。我们也可以将颜色作为字符串传递
    – 例如，`"rgb(255, 0, 0)"` 或 `"hsl(0, 100%, 50%)"` – 或者作为数字，就像我们在前面的章节中所做的那样：`0xff0000`。更多关于这方面的信息可以在
    *使用 THREE.Color 对象* 部分找到。
- en: 'Before we discuss `THREE.PointLight`, `THREE.SpotLight`, and `THREE.DirectionalLight`,
    first, let’s highlight their main difference – that is, how they emit light. The
    following diagram shows how these three light sources emit light:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论 `THREE.PointLight`、`THREE.SpotLight` 和 `THREE.DirectionalLight` 之前，首先让我们强调它们的主要区别
    – 那就是它们如何发光。以下图表显示了这三个灯光源如何发光：
- en: '![Figure 3.4 – How different light sources emit light](img/Figure_3.4_B18726.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – 不同光源如何发光](img/Figure_3.4_B18726.jpg)'
- en: Figure 3.4 – How different light sources emit light
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 不同光源如何发光
- en: 'You can see the following from this diagram:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从这张图中看到以下内容：
- en: '`THREE.PointLight` emits light from a specific point in all directions'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.PointLight` 从一个特定的点向所有方向发出光'
- en: '`THREE.SpotLight` emits light from a specific point in a cone-like shape'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.SpotLight` 从一个特定的点以锥形形状发出光'
- en: '`THREE.DirectionalLight` doesn’t emit light from a single point but emits light
    rays from a 2D plane, where the rays are parallel to each other'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.DirectionalLight` 不是从一个单独的点发出光，而是从二维平面发出光束，其中光束相互平行'
- en: We’ll look at these light sources in more detail in the next few sections. Let’s
    start with `THREE.SpotLight`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的几节中更详细地探讨这些灯光源。让我们从 `THREE.SpotLight` 开始。
- en: THREE.SpotLight
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.SpotLight
- en: '`THREE.SpotLight` is one of the lights you’ll use often (especially if you
    want to use shadows). `THREE.SpotLight` is a light source that has a cone-like
    effect. You can compare this with a flashlight or a lantern. This light source
    has a direction and an angle at which it produces light. The following screenshot
    shows what a `THREE.SpotLight` looks like (`spotlight.html`):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.SpotLight` 是你经常会用到的灯光之一（特别是如果你想使用阴影）。`THREE.SpotLight` 是一种具有锥形效果的灯光源。你可以将其与手电筒或灯笼进行比较。这种灯光源有一个方向和一个产生光的角度。以下截图显示了
    `THREE.SpotLight` 的样子（`spotlight.html`）：'
- en: '![Figure 3.5 – Spotlight lighting a scene](img/Figure_3.5_B18726.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5 – 聚光灯照亮场景](img/Figure_3.5_B18726.jpg)'
- en: Figure 3.5 – Spotlight lighting a scene
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – 聚光灯照亮场景
- en: 'The following table lists all the properties that you can use to finetune `THREE.SpotLight`.
    First, we’ll look at the properties specific to the light’s behavior:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了您可以使用来微调 `THREE.SpotLight` 的所有属性。首先，我们将查看特定于光的行为的属性：
- en: '| **Name** | **Description** |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **描述** |'
- en: '| `Angle` | Determines how wide the beam emerging from the light is. The width
    is measured in radians and defaults to `Math.PI/3`. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `Angle` | 确定从光源发出的光束的宽度。宽度以弧度为单位测量，默认值为 `Math.PI/3`。|'
- en: '| `castShadow` | If set to `true`, the light to which the property is applied
    will create shadows. See the following table on how to configure the shadows.
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `castShadow` | 如果设置为 `true`，则应用此属性的灯光将创建阴影。有关如何配置阴影的详细信息，请参阅以下表格。|'
- en: '| `Color` | Indicates the color of the light. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `Color` | 表示光的颜色。|'
- en: '| `decay` | Indicates the amount the light intensity diminishes the farther
    you move away from the light source. A `decay` of `2` leads to more realistic
    light, and the default value is `1`. This property is only effective when the
    `physicallyCorrectLights` property is set on `WebGLRenderer`. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `decay` | 表示随着您远离光源，光强度减弱的量。`decay` 值为 `2` 会产生更逼真的光，默认值为 `1`。此属性仅在将 `physicallyCorrectLights`
    属性设置为 `WebGLRenderer` 时有效。|'
- en: '| `distance` | When this property is set to a non-`0` value, the light intensity
    will decrease linearly from the set intensity at the light’s position to `0` at
    the specified distance. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `distance` | 当此属性设置为非 `0` 值时，光强度将从光源位置处的设置强度线性减少到指定距离处的 `0`。|'
- en: '| `intensity` | Indicates the intensity with which the light shines. The property’s
    default value is `1`. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `intensity` | 表示光照射的强度。属性的默认值是 `1`。|'
- en: '| `penumbra` | Indicates the percentage at the edge of the spotlight’s coin,
    which is smoothed (blurred) to `0`. It takes a value between `0` and `1`, where
    the default is `0`. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `penumbra` | 表示聚光灯硬币边缘的百分比，该边缘被平滑（模糊）到 `0`。它取值范围在 `0` 和 `1` 之间，默认值为 `0`。|'
- en: '| `power` | Denotes the light’s `power` when rendered in the physically correct
    mode (enable this by setting the `physicallyCorrectLights` property set on `WebGLRenderer`).
    This property is measured in lumens and the default value is `4*Math.PI`. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `power` | 表示在物理正确模式下渲染时光的 `power`（通过在 `WebGLRenderer` 上设置 `physicallyCorrectLights`
    属性来启用）。此属性以流明为单位测量，默认值为 `4*Math.PI`。|'
- en: '| `position` | Indicates the position of a light in `THREE.Scene`. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `position` | 表示光在 `THREE.Scene` 中的位置。|'
- en: '| `target` | With `THREE.SpotLight`, the direction the light is pointed in
    is important. With the `target` property, you can point `THREE.SpotLight` to look
    at a specific object or position in the scene. Note that this property requires
    a `THREE.Object3D` object (such as a `THREE.Mesh`). This is in contrast to the
    cameras we saw in [*Chapter 2*](B18726_02.xhtml#_idTextAnchor028), which use `THREE.Vector3`
    in their `lookAt` function. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `target` | 对于 `THREE.SpotLight`，光的方向很重要。使用 `target` 属性，您可以指定 `THREE.SpotLight`
    指向场景中的特定对象或位置。请注意，此属性需要一个 `THREE.Object3D` 对象（例如，`THREE.Mesh`）。这与我们在 [*第 2 章*](B18726_02.xhtml#_idTextAnchor028)
    中看到的相机形成对比，这些相机在 `lookAt` 函数中使用 `THREE.Vector3`。|'
- en: '| `visible` | If this property is set to `true` (the default), the light is
    turned on, while if it is set to `false`, the light is turned off. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `visible` | 如果此属性设置为 `true`（默认值），则灯光开启，如果设置为 `false`，则灯光关闭。|'
- en: Figure 3.6 – Properties of the THREE.SpotLight object
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – THREE.SpotLight 对象的属性
- en: 'When you enable the shadow for `THREE.SpotLight`, you can control how that
    shadow is rendered. You can control this through the shadow property of a `THREE.SpotLight`,
    which can comprise the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当您为 `THREE.SpotLight` 启用阴影时，您可以控制阴影的渲染方式。您可以通过 `THREE.SpotLight` 的阴影属性来控制，它可以包括以下内容：
- en: '| **Name** | **Description** |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **描述** |'
- en: '| `shadow.bias` | Moves the cast shadow away or toward the object casting the
    shadow. You can use this to solve some strange effects when you work with very
    thin objects. If you see strange shadow effects on your models, small values (for
    example, `0.01`) for this property can often resolve the issue. The default value
    for this property is `0`. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `shadow.bias` | 将投射的阴影移向或远离投射阴影的对象。您可以使用此属性来解决在处理非常薄的对象时出现的某些奇怪效果。如果您在模型上看到奇怪的阴影效果，此属性的较小值（例如，`0.01`）通常可以解决问题。此属性的默认值是
    `0`。|'
- en: '| `shadow.camera.far` | Determines from what distance from the light shadows
    should be created. The default value is `5000`. Note that you can also set all
    the other properties provided for `THREE.PerspectiveCamera`, which we showed in
    [*Chapter 2*](B18726_02.xhtml#_idTextAnchor028). |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `shadow.camera.far` | 确定从多远距离的光源处创建阴影。默认值是 `5000`。注意，您还可以设置 `THREE.PerspectiveCamera`
    提供的所有其他属性，我们在 [*第 2 章*](B18726_02.xhtml#_idTextAnchor028) 中展示了这些属性。 |'
- en: '| `shadow.camera.fov` | Determines how large the field of view used to create
    shadows is (see the *Using different cameras for different scenes* section in
    [*Chapter 2*](B18726_02.xhtml#_idTextAnchor028)). The default value is `50`. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `shadow.camera.fov` | 确定用于创建阴影的视野大小（参见 [*第 2 章*](B18726_02.xhtml#_idTextAnchor028)
    中的 *使用不同相机为不同场景* 部分）。默认值是 `50`。 |'
- en: '| `shadow.camera.near` | Determines from what distance from the light shadows
    should be created. The default value is `50`. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `shadow.camera.near` | 确定从多远距离的光源处创建阴影。默认值是 `50`。 |'
- en: '| `shadow.mapSize.width` and`shadow.mapSize.height` | Determine how many pixels
    are used to create a shadow. Increase these when a shadow has jagged edges or
    doesn’t look smooth. This can’t be changed after the scene has been rendered.
    The default value for both is `512`. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `shadow.mapSize.width` 和 `shadow.mapSize.height` | 确定用于创建阴影的像素数量。当阴影边缘参差不齐或看起来不光滑时，应增加这些值。渲染场景后，这些值不能更改。两者的默认值都是
    `512`。 |'
- en: '| `shadow.radius` | When this value is set higher than 1, the edge of the shadows
    will be blurred. This won’t have any effect if the `shadowMap.type` property of
    `THREE.WebGlRenderer` is set to `THREE.BasicShadowMap`. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `shadow.radius` | 当此值设置大于 1 时，阴影的边缘将变得模糊。如果 `THREE.WebGlRenderer` 的 `shadowMap.type`
    属性设置为 `THREE.BasicShadowMap`，则此值将不会产生任何效果。 |'
- en: Figure 3.7 – Shadow properties of the THREE.SpotLight object
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – THREE.SpotLight 对象的阴影属性
- en: 'Creating `THREE.SpotLight` is very easy. Just specify the color, set the properties
    you want, and add it to the scene, as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `THREE.SpotLight` 非常简单。只需指定颜色，设置您想要的属性，并将其添加到场景中，如下所示：
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, we create an instance of `THREE.SpotLight` and set the various properties
    to configure the light. We also explicitly set the `castShadow` property to `true`
    because we want shadows. We also need to point `THREE.SpotLight` somewhere, which
    we do with the `target` property. Before we can use this property, we first need
    to add the default `target` of the light to the scene, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个 `THREE.SpotLight` 实例，并设置了各种属性以配置灯光。我们还明确地将 `castShadow` 属性设置为 `true`，因为我们想要阴影。我们还需要将
    `THREE.SpotLight` 指向某个地方，这通过 `target` 属性来完成。在我们可以使用此属性之前，我们首先需要将灯光的默认 `target`
    添加到场景中，如下所示：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'By default, the target will be set to `(0, 0, 0)`. In the example for this
    section, you can change the location of the `target` property and see that the
    light follows the position of this object:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，目标将被设置为 `(0, 0, 0)`。在本节的示例中，您可以更改 `target` 属性的位置，并看到灯光会跟随该对象的位置：
- en: '![Figure 3.8 – Spotlight pointing to a target](img/Figure_3.8_B18726.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8 – 聚光灯指向目标](img/Figure_3.8_B18726.jpg)'
- en: Figure 3.8 – Spotlight pointing to a target
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – 聚光灯指向目标
- en: Note that you can also set the target of the light to an object in the scene.
    In that case, the direction of the light will be pointed to that object. If the
    object that the light is pointed at moves around, the light will keep pointing
    at that object.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，您还可以将灯光的目标设置为场景中的对象。在这种情况下，灯光的方向将指向该对象。如果指向的对象移动，灯光将始终指向该对象。
- en: 'In the table at the beginning of this section, we showed a couple of properties
    that can be used to control how the light emanates from `THREE.SpotLight`. The
    `distance` and `angle` properties define the shape of the cone of light. The `angle`
    property defines the width of the cone, and with the `distance` property, we set
    the length of the cone. The following diagram explains how these two values define
    the area that will receive light from `THREE.SpotLight`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节开头表中，我们展示了可以用来控制 `THREE.SpotLight` 发出光的方式的一些属性。`distance` 和 `angle` 属性定义了光锥的形状。`angle`
    属性定义了锥体的宽度，而 `distance` 属性则设置了锥体的长度。以下图表解释了这两个值如何定义将接收 `THREE.SpotLight` 光照的区域：
- en: '![Figure 3.9 – Spotlight angle and distance](img/Figure_3.9_B18726.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.9 – 聚光灯角度和距离](img/Figure_3.9_B18726.jpg)'
- en: Figure 3.9 – Spotlight angle and distance
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 聚光灯角度和距离
- en: 'Usually, you won’t need to set these values since they come with reasonable
    defaults, but you can use these properties, for instance, to create a `THREE.SpotLight`
    instance that has a very narrow beam or quickly decreases in light intensity.
    The last property you can use to change the way `THREE.SpotLight` produces light
    is the `penumbra` property. With this property, you set from what position the
    intensity of the light decreases at the edge of the light cone. In the following
    screenshot, you can see the result of the `penumbra` property in action. We have
    a very bright light (high intensity) that rapidly decreases in intensity as it
    reaches the edge of the cone:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，你不需要设置这些值，因为它们都带有合理的默认值，但你可以使用这些属性，例如，创建一个具有非常窄的光束或快速降低光强度的`THREE.SpotLight`实例。你可以用来改变`THREE.SpotLight`产生光的方式的最后一个属性是`penumbra`属性。使用这个属性，你可以设置从什么位置开始光锥边缘的光强度开始降低。在下面的屏幕截图中，你可以看到`penumbra`属性的作用结果。我们有一个非常明亮的光源（高强度），当它达到锥形边缘时，强度迅速降低：
- en: '![Figure 3.10 – Spotlight with a hard penumbra](img/Figure_3.10_B18726.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图3.10 – 具有硬边缘晕影的聚光灯](img/Figure_3.10_B18726.jpg)'
- en: Figure 3.10 – Spotlight with a hard penumbra
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10 – 具有硬边缘晕影的聚光灯
- en: 'Sometimes, it can be difficult to determine the correct settings for your lights,
    just by looking at the rendered scene. You might want to finetune the area that
    is lit for performance reasons or try and move the light around to a very specific
    location. This can be achieved by using `THREE.SpotLightHelper`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，仅通过查看渲染的场景，可能很难确定灯光的正确设置。你可能出于性能原因想要微调被照亮的区域，或者尝试将光源移动到非常具体的位置。这可以通过使用`THREE.SpotLightHelper`来实现：
- en: '[PRE3]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With the preceding code, you get an outline that shows the details of the spotlight,
    and can help in debugging and correctly positioning and configuring your light:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的代码，你可以得到一个轮廓，显示了聚光灯的细节，这有助于调试和正确定位和配置你的光源：
- en: '![Figure 3.11– Spotlight with the helper enabled](img/Figure_3.11_B18726.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图3.11– 启用辅助器的聚光灯](img/Figure_3.11_B18726.jpg)'
- en: Figure 3.11– Spotlight with the helper enabled
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11– 启用辅助器的聚光灯
- en: 'Before moving on to the next light source, we’ll quickly look at the shadow-related
    properties available for a `THREE.SpotLight` object. You’ve already learned that
    we can get shadows by setting the `castShadow` property of a `THREE.SpotLight`
    instance to `true`. You also know that a `THREE.Mesh` object has two shadow-related
    properties. You set the `castShadow` property for objects that should cast shadows,
    and you use the `receiveShadow` property for objects that should show a shadow.
    Three.js also allows you very fine-grained control over how the shadow is rendered.
    This is done by a couple of the properties we explained in the table at the beginning
    of this section. With `shadow.camera.near`, `shadow.camera.far`, and `shadow.camera.fov`,
    you can control how and where this light casts a shadow. For a `THREE.SpotLight`
    instance, you can’t set `shadow.camera.fov` directly. This property is based on
    the `angle` property of `THREE.SpotLight`. This works in the same way as the perspective
    camera’s field of view, which we explained in [*Chapter 2*](B18726_02.xhtml#_idTextAnchor028).
    The easiest way to see this in action is by adding a `THREE.CameraHelper`; you
    can do this by checking the menu’s `shadow-helper` checkbox and playing around
    with the camera settings. As you can see in the following screenshot, selecting
    this checkbox shows the area that is used to determine the shadows for this light:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续到下一个光源之前，我们将快速查看`THREE.SpotLight`对象可用的与阴影相关的属性。你已经了解到，我们可以通过将`THREE.SpotLight`实例的`castShadow`属性设置为`true`来获取阴影。你也知道`THREE.Mesh`对象有两个与阴影相关的属性。你为应该产生阴影的对象设置`castShadow`属性，而对于应该显示阴影的对象，你使用`receiveShadow`属性。Three.js还允许你非常精细地控制阴影的渲染方式。这是通过本节开头表格中解释的几个属性来实现的。通过`shadow.camera.near`、`shadow.camera.far`和`shadow.camera.fov`，你可以控制这个光在哪里以及如何产生阴影。对于`THREE.SpotLight`实例，你不能直接设置`shadow.camera.fov`。这个属性基于`THREE.SpotLight`的`angle`属性。这和我们在[*第2章*](B18726_02.xhtml#_idTextAnchor028)中解释的透视相机的视野一样工作。看到这个效果的最简单方法是通过添加一个`THREE.CameraHelper`；你可以通过勾选菜单的`shadow-helper`复选框并调整相机设置来实现。正如你在下面的屏幕截图中可以看到的，勾选这个复选框会显示用于确定这个光源阴影的区域：
- en: '![Figure 3.12 – Spotlight with the shadow helper enabled](img/Figure_3.12_B18726.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图3.12 – 启用阴影辅助器的聚光灯](img/Figure_3.12_B18726.jpg)'
- en: Figure 3.12 – Spotlight with the shadow helper enabled
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.12 – 启用阴影辅助器的聚光灯
- en: 'When debugging issues with shadows, adding `THREE.CameraHelper` is useful.
    To do this, just add the following lines:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当调试与阴影相关的问题时，添加 `THREE.CameraHelper` 是有用的。为此，只需添加以下几行：
- en: '[PRE4]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I’ll end this section with a couple of pointers, just in case you run into issues
    with shadows.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我将以一些建议结束本节，以防你遇到与阴影相关的问题。
- en: If the shadow looks blocky, you can increase the `shadow.mapSize.width` and
    `shadow.mapSize.Height` properties and make sure the area that is used to calculate
    the shadow tightly wraps your object. You can use the `shadow.camera.near`, `shadow.camera.far`,
    and `shadow.camera.fov` properties to configure this area.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果阴影看起来像块状，你可以增加 `shadow.mapSize.width` 和 `shadow.mapSize.Height` 属性，并确保用于计算阴影的区域紧密包裹你的对象。你可以使用
    `shadow.camera.near`、`shadow.camera.far` 和 `shadow.camera.fov` 属性来配置这个区域。
- en: Remember that you not only have to tell the light to cast shadows but also have
    to tell each geometry whether it will receive and/or cast shadows by setting the
    `castShadow` and `receiveShadow` properties.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你不仅要告诉光产生阴影，还要通过设置 `castShadow` 和 `receiveShadow` 属性来告诉每个几何体它是否会接收和/或产生阴影。
- en: Shadow bias
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 阴影偏差
- en: If you use thin objects in your scene, you might see strange artifacts when
    you render shadows. You can use the `shadow.bias` property to slightly offset
    the shadows, which will often fix these issues.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你场景中使用了细长的物体，渲染阴影时可能会看到奇怪的伪影。你可以使用 `shadow.bias` 属性来稍微偏移阴影，这通常可以解决这些问题。
- en: If you want to have softer shadows, you can set a different `shadowMapType`
    value on `THREE.WebGLRenderer`. By default, this property is set to `THREE.PCFShadowMap`;
    if you set this property to `PCFSoftShadowMap`, you’ll get softer shadows.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更柔和的阴影，你可以在 `THREE.WebGLRenderer` 上设置不同的 `shadowMapType` 值。默认情况下，此属性设置为
    `THREE.PCFShadowMap`；如果你将此属性设置为 `PCFSoftShadowMap`，你会得到更柔和的阴影。
- en: 'Now, let’s look at the next light source in the list: `THREE.PointLight`.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看列表中的下一个光源：`THREE.PointLight`。
- en: THREE.PointLight
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.PointLight
- en: '`THREE.PointLight` is a light source that shines light in all directions emanating
    from a single point. A good example of a point light is a signal flare fired into
    the night sky or a campfire. Just as with all the lights, we have a specific example
    you can use to play around with `THREE.PointLight`. If you look at `point-light.html`
    in the `chapter-03` folder, you can find an example where a `THREE.PointLight`
    is being used in the same scene we’re also using for the other lights:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.PointLight` 是一种从单个点向所有方向发射光的光源。点光源的一个好例子是射入夜空的信号弹或篝火。就像所有灯光一样，我们有一个特定的例子你可以用来玩转
    `THREE.PointLight`。如果你查看 `chapter-03` 文件夹中的 `point-light.html`，你可以找到一个例子，其中 `THREE.PointLight`
    被用于我们用于其他灯光的相同场景：'
- en: '![Figure 3.13 – PointLight with the helper enabled](img/Figure_3.13_B18726.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.13 – 启用辅助工具的 PointLight](img/Figure_3.13_B18726.jpg)'
- en: Figure 3.13 – PointLight with the helper enabled
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 启用辅助工具的 PointLight
- en: 'As you can see from the previous screenshot, this light emits to all sides.
    Just like the spotlight we saw earlier, this light also has a helper, which you
    can use in the same way. You can see this as the wireframe in the center of the
    scene:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一张截图所示，此光向所有方向发射。就像我们之前看到的聚光灯一样，此光也有一个辅助工具，你可以以相同的方式使用它。你可以将其视为场景中心的线框：
- en: '[PRE5]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`THREE.PointLight` shares several properties with `THREE.SpotLight`, which
    you can use to configure how this light behaves:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.PointLight` 与 `THREE.SpotLight` 共享一些属性，你可以使用这些属性来配置此光的行为：'
- en: '| **Name** | **Description** |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **描述** |'
- en: '| `color` | The color of the light that this light source emits. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `color` | 该光源发出的光的颜色。|'
- en: '| `distance` | Indicates the distance for which the light shines. The default
    value is `0`, which means that the light’s intensity doesn’t decrease based on
    distance. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `distance` | 表示光照射的距离。默认值是 `0`，这意味着光的强度不会根据距离而降低。|'
- en: '| `intensity` | Indicates the intensity the light shines with. This defaults
    to `1`. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `intensity` | 表示光照射的强度。默认值为 `1`。|'
- en: '| `position` | Indicates the position of the light in `THREE.Scene`. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `position` | 表示光在 `THREE.Scene` 中的位置。|'
- en: '| `visible` | Determines whether the light is turned off or on. If this property
    is set to `true` (the default), this light is turned on, and if set it to `false`,
    the light is turned off. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `visible` | 确定光是否开启或关闭。如果此属性设置为 `true`（默认值），则此光开启，如果设置为 `false`，则光关闭。|'
- en: '| `decay` | Indicates the amount the light intensity diminishes the farther
    you move away from the light source. A `decay` of `2` leads to more realistic
    light, and the default value is `1`. This property is effective only when the
    `physicallyCorrectLights` property is set on `WebGLRenderer`. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `decay` | 表示随着您远离光源，灯光强度减弱的程度。`decay` 值为 `2` 会产生更逼真的灯光，默认值为 `1`。此属性仅在将 `physicallyCorrectLights`
    属性设置为 `WebGLRenderer` 时有效。|'
- en: '| `power` | Refers to the light’s power when being rendered in the physically
    correct mode (enable this by setting the `physicallyCorrectLights` property set
    on `WebGLRenderer`). This property is measured in lumens and the default value
    is `4*Math.PI`. `Power` is also directly related to the `intensity` property (*power
    = intensity ** *4π*). |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `power` | 指的是在以物理正确模式渲染时灯光的功率（通过在 `WebGLRenderer` 上设置 `physicallyCorrectLights`
    属性来启用此功能）。此属性以流明为单位测量，默认值为 `4*Math.PI`。`Power` 也与 `intensity` 属性直接相关（*power =
    intensity ** *4π*）。|'
- en: Figure 3.14 – Properties of the THREE.PointLight object
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – THREE.PointLight 对象的属性
- en: 'Besides these properties, the `THREE.PointLight` object’s shadow can be configured
    in the same way as the shadow for `THREE.SpotLight`. In the next couple of examples
    and screenshots, we’ll show how these properties work for `THREE.PointLight`.
    First, let’s look at how you can create a `THREE.PointLight`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些属性外，`THREE.PointLight` 对象的阴影可以像 `THREE.SpotLight` 的阴影一样进行配置。在接下来的几个示例和屏幕截图中，我们将展示这些属性如何作用于
    `THREE.PointLight`。首先，让我们看看如何创建一个 `THREE.PointLight`：
- en: '[PRE6]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'There’s nothing special here – we just define the light and add it to the scene;
    you can, of course, set any of the properties we just showed as well. The two
    main properties of the `THREE.SpotLight` object are `distance` and `intensity`.
    With `distance`, you can specify how far the light is emitted before it decays
    to `0`. For example, in the following screenshot, we set the `distance` property
    to a low value, and increased the `intensity` property a bit to simulate a campfire
    between the trees:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有特别之处——我们只是定义了灯光并将其添加到场景中；当然，您也可以设置我们刚刚展示的任何属性。`THREE.SpotLight` 对象的两个主要属性是
    `distance` 和 `intensity`。使用 `distance`，您可以指定灯光发出多远后衰减到 `0`。例如，在下面的屏幕截图中，我们将 `distance`
    属性设置为低值，并将 `intensity` 属性略微增加以模拟树木之间的篝火：
- en: '![Figure 3.15 – PointLight with low distance and higher intensity](img/Figure_3.15_B18726.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.15 – 距离低且强度高的 PointLight](img/Figure_3.15_B18726.jpg)'
- en: Figure 3.15 – PointLight with low distance and higher intensity
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15 – 距离低且强度高的 PointLight
- en: 'You can’t set the `power` and decay properties in this example; these properties
    are really useful if you want to simulate real-world scenarios. A good example
    of this can be found on the Three.js website: [https://threejs.org/examples/#webgl_lights_physical](https://threejs.org/examples/#webgl_lights_physical).'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中无法设置 `power` 和衰减属性；如果您想模拟现实世界场景，这些属性非常有用。一个很好的例子可以在 Three.js 网站上找到：[https://threejs.org/examples/#webgl_lights_physical](https://threejs.org/examples/#webgl_lights_physical)。
- en: '`THREE.PointLight` also uses a camera to determine where to draw the shadows,
    so you can use `THREE.CameraHelper` to show what part is covered by that camera.
    In addition, `THREE.PointLight` provides a helper, `THREE.PointLightHelper`, to
    show where `THREE.PointLight` shines its light. With both enabled, you get the
    following very useful debug information:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.PointLight` 也使用一个相机来确定绘制阴影的位置，因此您可以使用 `THREE.CameraHelper` 来显示被该相机覆盖的部分。此外，`THREE.PointLight`
    提供了一个辅助工具，`THREE.PointLightHelper`，以显示 `THREE.PointLight` 照明的位置。启用两者后，您将获得以下非常有用的调试信息：'
- en: '![Figure 3.16 – PointLight with helpers enabled](img/Figure_3.16_B18726.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.16 – 启用辅助功能的 PointLight](img/Figure_3.16_B18726.jpg)'
- en: Figure 3.16 – PointLight with helpers enabled
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16 – 启用辅助功能的 PointLight
- en: If you look closely at the previous screenshot (*Figure 3**.16*), you might
    notice that shadows are created outside the area the shadow camera is showing.
    This is because the shadow helper only shows the shadows being cast down from
    the position of the point light. You can visualize a `THREE.PointLight` as a cube,
    where each side emits light and can cast shadows. In this case, `THREE.ShadowCameraHelper`
    only shows the shadows being cast down.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细观察之前的屏幕截图（*图 3.16*），您可能会注意到阴影是在阴影相机显示区域之外创建的。这是因为阴影辅助工具只显示从点光源位置投射下来的阴影。您可以将
    `THREE.PointLight` 视为一个立方体，其中每个面都发出光线并可以投射阴影。在这种情况下，`THREE.ShadowCameraHelper`
    只显示向下投射的阴影。
- en: The last of the basic lights that we’ll be discussing is `THREE.DirectionalLight`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要讨论的最后一种基本灯光是 `THREE.DirectionalLight`。
- en: THREE.DirectionalLight
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.DirectionalLight
- en: 'This type of light source can be considered as a light that is very far away.
    All the light rays it sends out are parallel to each other. A good example of
    this is the Sun. The Sun is so far away that the light rays we receive on Earth
    are (almost) parallel to each other. The main difference between `THREE.DirectionalLight`
    and `THREE.SpotLight` (which we saw previously) is that this light won’t diminish
    the farther it gets from the source as it does with `THREE.SpotLight` (you can
    fine-tune this with the `distance` and `exponent` parameters). The complete area
    that is lit by `THREE.DirectionalLight` receives the same intensity of light.
    To see this in action, look at the following `directional-light.html` example:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这种光源可以被认为是非常远的灯光。它发出的所有光束都是相互平行的。一个很好的例子是太阳。太阳非常遥远，以至于我们接收到的地球上的光线（几乎）是相互平行的。`THREE.DirectionalLight`
    与 `THREE.SpotLight`（我们之前看到的）之间的主要区别是，这种光不会像 `THREE.SpotLight` 那样随着距离光源的增大而减弱（你可以通过
    `distance` 和 `exponent` 参数进行微调）。由 `THREE.DirectionalLight` 照亮的整个区域接收相同强度的光线。要看到这个效果，请查看以下
    `directional-light.html` 示例：
- en: '![Figure 3.17 – Directional light simulating a sunset](img/Figure_3.17_B18726.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.17 – 模拟日落的定向光](img/Figure_3.17_B18726.jpg)'
- en: Figure 3.17 – Directional light simulating a sunset
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.17 – 模拟日落的定向光
- en: 'As you can see, it is very easy to simulate, for instance, a sunset, using
    a `THREE.DirectionalLight`. Just as with `THREE.SpotLight`, there are a couple
    of properties you can set on this light. For example, you can set the `intensity`
    property of the light and the way it casts shadows. `THREE.DirectionalLight` has
    a lot of properties that are the same as those of `THREE.SpotLight`: `position`,
    `target`, `intensity`, `castShadow`, `shadow.camera.near`, `shadow.camera.far`,
    `shadow.mapSize.width`, `shadow.mapSize.width`, and `shadowBias`. For more information
    on those properties, you can look at the preceding section on `THREE.SpotLight`.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，使用 `THREE.DirectionalLight` 模拟，例如日落，是非常容易的。正如与 `THREE.SpotLight` 一样，你可以设置这个光的一些属性。例如，你可以设置光的
    `intensity` 属性以及它投射阴影的方式。`THREE.DirectionalLight` 有很多属性与 `THREE.SpotLight` 相同：`position`、`target`、`intensity`、`castShadow`、`shadow.camera.near`、`shadow.camera.far`、`shadow.mapSize.width`、`shadow.mapSize.width`
    和 `shadowBias`。有关这些属性的更多信息，你可以查看关于 `THREE.SpotLight` 的前述部分。
- en: 'If you look back at the `THREE.SpotLight` examples, you will see that we had
    to define the cone of light where shadows were applied. Since all the rays are
    parallel to each other for `THREE.DirectionalLight`, we don’t have a cone where
    shadows need to be applied; instead, we have a cuboid area (represented internally
    with a `THREE.OrthographicCamera`), as you can see in the following screenshot,
    where we enabled the shadow helper:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回顾一下 `THREE.SpotLight` 的示例，你会看到我们必须定义应用阴影的光锥。由于 `THREE.DirectionalLight`
    的所有光线都是相互平行的，所以我们没有需要应用阴影的光锥；相反，我们有一个长方体区域（在内部用 `THREE.OrthographicCamera` 表示），正如你在以下屏幕截图中所见，我们启用了阴影辅助工具：
- en: '![Figure 3.18 – Directional light showing a cuboid shadow area](img/Figure_3.18_B18726.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.18 – 显示长方体阴影区域的定向光](img/Figure_3.18_B18726.jpg)'
- en: Figure 3.18 – Directional light showing a cuboid shadow area
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18 – 显示长方体阴影区域的定向光
- en: 'Everything that falls within this cube can cast and receive shadows from the
    light. Just as for `THREE.SpotLight`, the tighter you define this area around
    the objects, the better your shadows will look. Define this cube using the following
    properties:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 所有落在这个立方体内的物体都可以从光源投射和接收阴影。正如对于 `THREE.SpotLight`，你定义的围绕物体的这个区域越紧密，你的阴影看起来就越好。使用以下属性定义这个立方体：
- en: '[PRE7]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can compare this with the way we configured the orthographic camera in the
    *Using different cameras for different scenes* section in [*Chapter 2*](B18726_02.xhtml#_idTextAnchor028).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将其与我们配置正交相机的方式进行比较，在 [*第 2 章*](B18726_02.xhtml#_idTextAnchor028) 的 *使用不同相机为不同场景*
    部分中。
- en: As we’ve already seen in this section, light sources use colors. For now, we’ve
    just configured the colors using a hex string, but the `THREE.Color` object provides
    a lot of different options for creating the initial color object. In this next
    section, we’ll explore the functionality provided by the `THREE.Color` object.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在这个部分中已经看到的，光源使用颜色。到目前为止，我们只是使用十六进制字符串配置了颜色，但 `THREE.Color` 对象提供了很多不同的选项来创建初始颜色对象。在接下来的部分中，我们将探索
    `THREE.Color` 对象提供的功能。
- en: Using the THREE.Color object
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 THREE.Color 对象
- en: 'In Three.js, when you need to provide a color (for example, for materials,
    lights, and so on), you can pass in a `THREE.Color` object; otherwise, Three.js
    will create one from a passed-in string value, as we saw for `THREE.AmbientLight`.
    Three.js is very flexible when parsing the input for the `THREE.Color` constructor.
    You can create a `THREE.Color` object in the following ways:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Three.js 中，当您需要提供颜色（例如，用于材质、光源等）时，您可以传递一个 `THREE.Color` 对象；否则，Three.js 将根据传入的字符串值创建一个，正如我们在
    `THREE.AmbientLight` 中所看到的。Three.js 在解析 `THREE.Color` 构造函数的输入时非常灵活。您可以通过以下方式创建一个
    `THREE.Color` 对象：
- en: '`new THREE.Color("#ababab")` will create a color based on the passed-in CSS
    color string.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new THREE.Color("#ababab")` 将根据传入的 CSS 颜色字符串创建一个颜色。'
- en: '`new THREE.Color(0xababab)` will create the color based on the passed-in hex
    value. If you know the hex value, this is usually the best approach.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new THREE.Color(0xababab)` 将根据传入的十六进制值创建颜色。如果您知道十六进制值，这通常是最佳方法。'
- en: '`new THREE.Color("rgb(255, 0, 0)")` or `new THREE.Color("rgb(100%,` `0%, 0%)"`.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new THREE.Color("rgb(255, 0, 0)")` 或 `new THREE.Color("rgb(100%, 0%, 0%)"`。'
- en: '`new THREE.Color( ''``skyblue'' )`.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new THREE.Color( ''skyblue'' )`。'
- en: '`new THREE.Color("hsl(0,` `100%, 50%)")`.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new THREE.Color("hsl(0, 100%, 50%)"`。'
- en: '`new THREE.Color( 1, 0,` `0 )`.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new THREE.Color( 1, 0, 0 )`。'
- en: 'If you want to change the color after construction, you’ll have to create a
    new `THREE.Color` object or modify the internal properties of the `THREE.Color`
    object. The `THREE.Color` object comes with a large set of properties and functions.
    The first group of functions allows you to set the color of a `THREE.Color` object:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在构造后更改颜色，您必须创建一个新的 `THREE.Color` 对象或修改 `THREE.Color` 对象的内部属性。`THREE.Color`
    对象附带了一组大量的属性和函数。第一组函数允许您设置 `THREE.Color` 对象的颜色：
- en: '`set(value)`: Sets the value of a color to the supplied hex value. This hex
    value may be a string, a number, or an existing `THREE.Color` instance.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set(value)`: 将颜色的值设置为提供的十六进制值。此十六进制值可以是字符串、数字或现有的 `THREE.Color` 实例。'
- en: '`setHex(value)`: Sets the value of a color to the supplied numeric hex value.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setHex(value)`: 将颜色的值设置为提供的数值十六进制值。'
- en: '`setRGB(r,g,b)`: Sets the value of a color based on the supplied RGB values.
    The values range from `0` to `1`.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setRGB(r,g,b)`: 根据提供的 RGB 值设置颜色的值。值范围从 `0` 到 `1`。'
- en: '`setHSL(h,s,l)`: Sets the value of this color on the supplied HSL values. The
    values range from 0 to 1\. A good explanation of how HSL works for configuring
    colors can be found at [http://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL](http://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL).'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setHSL(h,s,l)`: 根据提供的 HSL 值设置此颜色。值范围从 0 到 1。有关 HSL 如何用于配置颜色的良好解释，请参阅 [http://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL](http://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL)。'
- en: '`setStyle(style)`: Sets the value of a color based on the CSS way of specifying
    colors. For instance, you could use `rgb(255,0,0)`, `#ff0000`, `#f00`, or even
    `red`.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setStyle(style)`: 根据CSS指定颜色的方式设置颜色的值。例如，您可以使用 `rgb(255,0,0)`、`#ff0000`、`#f00`
    或甚至 `red`。'
- en: 'If you’ve already got an existing `THREE.Color` instance and want to use that
    color, you can use the following functions:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有一个现有的 `THREE.Color` 实例并想使用该颜色，您可以使用以下函数：
- en: '`copy(color)`: Copies the color values from the `THREE.Color` instance provided
    to this color.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`copy(color)`: 从提供的 `THREE.Color` 实例复制颜色值到该颜色。'
- en: '`copySRGBToLinear(color)`: Sets the color of this object based on the `THREE.Color`
    instance supplied. The color is first converted from the sRGB color space into
    the linear color space. The sRGB color space uses an exponential scale instead
    of a linear one. More information on the sRGB color space can be found here: [https://www.w3.org/Graphics/Color/sRGB.html](https://www.w3.org/Graphics/Color/sRGB.html).'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`copySRGBToLinear(color)`: 根据提供的 `THREE.Color` 实例设置此对象的颜色。颜色首先从 sRGB 颜色空间转换为线性颜色空间。sRGB
    颜色空间使用指数刻度而不是线性刻度。有关 sRGB 颜色空间的更多信息，请参阅此处：[https://www.w3.org/Graphics/Color/sRGB.html](https://www.w3.org/Graphics/Color/sRGB.html)。'
- en: '`copyLinearToSRGB(color)`: Sets the color of this object based on the `THREE.Color`
    instance supplied. The color is first converted from the linear color space into
    the sRGB color space.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`copyLinearToSRGB(color)`: 根据提供的 `THREE.Color` 实例设置此对象的颜色。颜色首先从线性颜色空间转换为 sRGB
    颜色空间。'
- en: '`convertSGRBToLinear()`: Converts the current color from the sRGB color space
    into the linear color space.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`convertSGRBToLinear()`: 将当前颜色从 sRGB 颜色空间转换为线性颜色空间。'
- en: '`convertLinearToSGRB()`: Converts the current color from the linear color space
    into the sRGB color space.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`convertLinearToSGRB()`: 将当前颜色从线性颜色空间转换为 sRGB 颜色空间。'
- en: 'If you want information on the currently configured color, the `THREE.Color`
    object also provides some helper functions for that:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要有关当前配置颜色的信息，`THREE.Color`对象还提供了一些辅助函数：
- en: '`getHex()`: Returns the value from this color object as a number: `435241`.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getHex()`: 返回从该颜色对象作为数字的值：`435241`。'
- en: '`getHexString()`: Returns the value from this color object as a hex string:
    `0c0c0c`.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getHexString()`: 返回从该颜色对象作为十六进制字符串的值：`0c0c0c`。'
- en: '`getStyle()`: Returns the value from this color object as a CSS-based value:
    `rgb(112,0,0)`.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getStyle()`: 返回从该颜色对象作为基于CSS的值：`rgb(112,0,0)`。'
- en: '`getHSL(target)`: Returns the value from this color object as an HSL value
    (`{ h: 0, s: 0, l: 0 }`). If you provide the optional `target` object, Three.js
    will set the `h`, `s`, and `l` properties on that object.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getHSL(target)`: 返回从该颜色对象作为HSL值（`{ h: 0, s: 0, l: 0 }`）。如果你提供可选的`target`对象，Three.js将设置该对象的`h`、`s`和`l`属性。'
- en: 'Three.js also provides functions to change the current color by modifying the
    individual color components. This is shown here:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Three.js还提供了通过修改单个颜色组件来更改当前颜色的函数。这在此处展示：
- en: '`offsetHSL(h, s, l)`: Adds the `h`, `s`, and `l` values provided to the `h`,
    `s`, and `l` values of the current color.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offsetHSL(h, s, l)`: 将提供的`h`、`s`和`l`值添加到当前颜色的`h`、`s`和`l`值上。'
- en: '`add(color)`: Adds the `r`, `g`, and `b` values of the color supplied to the
    current color.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add(color)`: 将提供的颜色的`r`、`g`和`b`值添加到当前颜色中。'
- en: '`addColors(color1, color2)`: Adds `color1` and `color2` and sets the value
    of the current color to the result.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addColors(color1, color2)`: 将`color1`和`color2`相加，并将当前颜色的值设置为结果。'
- en: '`addScalar(s)`: Adds a value to the RGB components of the current color. Bear
    in mind that the internal values use a range from `0` to `1`.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addScalar(s)`: 将一个值添加到当前颜色的RGB组件中。请注意，内部值使用`0`到`1`的范围。 '
- en: '`multiply(color)`: Multiplies the current RGB values with the RGB values from
    `THREE.Color`.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multiply(color)`: 将当前RGB值与`THREE.Color`的RGB值相乘。'
- en: '`multiplyScalar(s)`: Multiplies the current RGB values with the value supplied.
    Remember that the internal values range between `0` to `1`.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multiplyScalar(s)`: 将当前RGB值与提供的值相乘。请记住，内部值范围在`0`到`1`之间。'
- en: '`lerp(color, alpha)`: Finds the color that is between the color of this object
    and the `color` property supplied. The `alpha` property defines how far between
    the current color and the supplied color you want the result to be.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lerp(color, alpha)`: 找到介于当前对象颜色和提供的`color`属性之间的颜色。`alpha`属性定义了结果颜色在当前颜色和提供颜色之间的距离。'
- en: 'Finally, there are a couple of basic helper methods available:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有一些基本的辅助方法可用：
- en: '`equals(color)`: Returns `true` if the RGB values of the `THREE.Color` instance
    supplied match the values of the current color'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`equals(color)`: 如果提供的`THREE.Color`实例的RGB值与当前颜色的值匹配，则返回`true`'
- en: '`fromArray(array)`: Has the same functionality as `setRGB`, but now, the RGB
    values can be provided as an array of numbers'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fromArray(array)`: 与`setRGB`具有相同的功能，但现在，RGB值可以作为数字数组提供。'
- en: '`toArray`: Returns an array with three elements: `[r,` `g, b]`'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toArray`: 返回一个包含三个元素的数组：`[r, g, b]`'
- en: '`clone`: Creates an exact copy of a color'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clone`: 创建颜色的精确副本'
- en: In the preceding lists, you can see that there are many ways in which you can
    change the current color. A lot of these functions are used internally by Three.js,
    but they also provide a good way to easily change the color of lights and materials,
    without having to create and assign new `THREE.Color` objects.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的列表中，你可以看到有许多方法可以更改当前颜色。许多这些函数在Three.js内部使用，但它们也提供了一个简单的方法来轻松更改光源和材质的颜色，而不必创建和分配新的`THREE.Color`对象。
- en: So far, we’ve looked at the basic lights provided by Three.js and how shadows
    work. In most cases, you’ll use a combination of these lights for your scene.
    Three.js also provides a couple of special lights for very specific use cases.
    We’ll look at those in the next section.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了Three.js提供的基本光源以及阴影的工作原理。在大多数情况下，你将使用这些光源的组合来创建场景。Three.js还提供了一些特殊光源，用于特定的使用场景。我们将在下一节中探讨这些内容。
- en: Working with special lights
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用特殊光源
- en: In this section on special lights, we’ll discuss three additional lights provided
    by Three.js. First, we’ll discuss `THREE.HemisphereLight`, which helps in creating
    more natural lighting for outdoor scenes. Then, we’ll look at `THREE.RectAreaLight`,
    which emits lights from a large area instead of a single point. Next, we’ll look
    at how we can use a `LightProbe` to apply light based on a cubemap, and finally,
    we’ll show you how you can add a lens flare effect to your scene.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节关于特殊灯光的内容中，我们将讨论 Three.js 提供的三个附加灯光。首先，我们将讨论 `THREE.HemisphereLight`，它有助于为户外场景创建更自然的照明。然后，我们将查看
    `THREE.RectAreaLight`，它从大面积而不是单一点发射光线。接下来，我们将探讨如何使用 `LightProbe` 根据立方体贴图应用光线，最后，我们将向您展示如何为场景添加镜头光晕效果。
- en: The first special light we’re going to look at is `THREE.HemisphereLight`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看的第一个特殊灯光是 `THREE.HemisphereLight`。
- en: THREE.HemisphereLight
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.HemisphereLight
- en: 'With `THREE.HemisphereLight`, we can create more natural-looking outdoor lighting.
    Without this light, we could simulate the outdoors by creating `THREE.DirectionalLight`,
    which emulates the sun, and maybe add another `THREE.AmbientLight` to provide
    some general color to the scene. However, doing so won’t look natural. When you’re
    outdoors, not all the light comes directly from above: much is diffused by the
    atmosphere and reflected by the ground and other objects. `THREE.HemisphereLight`
    in Three.js was created for this scenario. This is an easy way to get more natural-looking
    outdoor lighting. To see an example, look at `hemisphere-light.html` in the following
    figure:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `THREE.HemisphereLight`，我们可以创建看起来更自然的户外照明。如果没有这种灯光，我们可以通过创建 `THREE.DirectionalLight`
    来模拟户外环境，该灯光模拟太阳光，并可能添加另一个 `THREE.AmbientLight` 来为场景提供一些通用颜色。然而，这样做看起来并不自然。当你身处户外时，并非所有光线都直接来自上方：很多光线被大气散射，并由地面和其他物体反射。Three.js
    中的 `THREE.HemisphereLight` 就是为此场景而设计的。这是一种获得更自然户外照明的方法。要查看示例，请参考以下图中的 `hemisphere-light.html`：
- en: '![Figure 3.19 – Hemisphere light](img/Figure_3.19_B18726.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.19 – 半球光](img/Figure_3.19_B18726.jpg)'
- en: Figure 3.19 – Hemisphere light
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.19 – 半球光
- en: 'If you look closely at this screenshot, you will see that the ground color
    of the hemisphere is shown more at the bottom of the sphere, and the sky color
    (set through the `color` property) is visible at the top of the scene. In this
    example, you can set these colors and their intensity. Creating a hemisphere light
    is just as easy as creating any of the other lights:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察这张截图，你会看到半球的光地颜色在球体的底部显示得更明显，而天空颜色（通过 `color` 属性设置）在场景顶部可见。在这个示例中，你可以设置这些颜色及其强度。创建半球光与创建其他任何灯光一样简单：
- en: '[PRE8]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You just specify the color that is received from the sky, the color received
    from the ground, and the intensity of these lights. If you want to change these
    values later on, you can access them through the following properties:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需指定从天空接收到的颜色、从地面接收到的颜色以及这些灯光的强度。如果你想稍后更改这些值，你可以通过以下属性访问它们：
- en: '| **Property** | **Description** |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **描述** |'
- en: '| `groundColor` | Indicates the color that is emitted from the ground |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| `groundColor` | 表示从地面发出的颜色 |'
- en: '| `color` | Implies the color that is emitted from the sky |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| `color` | 表示从天空发出的颜色 |'
- en: '| `intensity` | Implies the intensity with which the light shines |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `intensity` | 表示光线照射的强度 |'
- en: Figure 3.20 – Properties of the THREE.HemisphereLight object
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.20 – THREE.HemisphereLight 对象的属性
- en: Since a `HemisphereLight` acts like a `THREE.AmbientLight` object and just adds
    color to all the objects in the scene, it isn’t capable of casting shadows. The
    lights we’ve seen so far are more traditional. The next property allows you to
    simulate light from rectangular light sources – for instance, a window or a computer
    screen.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `HemisphereLight` 类似于 `THREE.AmbientLight` 对象，它只为场景中的所有对象添加颜色，因此它不能投射阴影。我们之前看到的灯光更为传统。下一个属性允许您模拟来自矩形光源的光线
    – 例如，窗户或电脑屏幕。
- en: THREE.RectAreaLight
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.RectAreaLight
- en: 'With `THREE.RectAreaLight`, we can define a rectangular area that emits light.
    Before we look at the details, let’s first look at the result we’re aiming for
    (`rectarea-light.html` opens this example); the following screenshot shows a couple
    of `THREE.RectAreaLight` objects:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `THREE.RectAreaLight`，我们可以定义一个发射光线的矩形区域。在我们查看详细内容之前，让我们先看看我们想要达到的结果（`rectarea-light.html`
    打开此示例）；以下截图显示了一些 `THREE.RectAreaLight` 对象：
- en: '![Figure 3.21 – RectArea lights emitting across their complete surface](img/Figure_3.21_B18726.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.21 – 矩形区域灯光在其完整表面发射](img/Figure_3.21_B18726.jpg)'
- en: Figure 3.21 – RectArea lights emitting across their complete surface
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.21 – 横向发射完整表面的矩形区域光
- en: What you see in this screenshot is that we’ve defined three `THREE.RectAreaLight`
    objects, each with its own color. You can see how these lights affect the whole
    area, and when you move them around or change their position, you can see how
    the different objects in the scene are affected.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕截图中，你可以看到我们定义了三个 `THREE.RectAreaLight` 对象，每个都有自己的颜色。你可以看到这些光如何影响整个区域，当你移动它们或改变它们的位置时，你可以看到场景中不同的物体是如何受到影响的。
- en: We haven’t explored the different materials and how light affects them. We’ll
    do this in the next chapter, [*Chapter 4*](B18726_04.xhtml#_idTextAnchor056),
    *Working with Three.js Materials*. A `THREE.RectAreaLight` only works with `THREE.MeshStandardMaterial`
    or `THREE.MeshPhysicalMaterial`. More on these materials will be presented in
    [*Chapter 4*](B18726_04.xhtml#_idTextAnchor056).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有探讨不同的材质以及光是如何影响它们的。我们将在下一章中这样做，[*第 4 章*](B18726_04.xhtml#_idTextAnchor056)，*使用
    Three.js 材质*。一个 `THREE.RectAreaLight` 只能与 `THREE.MeshStandardMaterial` 或 `THREE.MeshPhysicalMaterial`
    一起使用。关于这些材质的更多信息将在 [*第 4 章*](B18726_04.xhtml#_idTextAnchor056) 中介绍。
- en: 'To work with a `THREE.RectAreaLight`, we need to take a couple of small additional
    steps. First, we need to load and initialize `RectAreaLightUniformsLib`; the following
    is a set of additional low-level WebGL scripts needed by this light:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `THREE.RectAreaLight`，我们需要做一些额外的步骤。首先，我们需要加载和初始化 `RectAreaLightUniformsLib`；以下是这个光源需要的额外低级
    WebGL 脚本集：
- en: '[PRE9]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we can create the `THREE.AreaLight` object just like any other light:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以像创建任何其他光源一样创建 `THREE.AreaLight` 对象：
- en: '[PRE10]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you look at the constructor of this object, you will see that it takes four
    properties. The first one is the color of the light, the second one is the intensity,
    and the last two define how large the area of this light is. Note that if you
    want to visualize these lights, as we did in the example, you have to create a
    rectangle yourself at the same position, rotation, and size as your `THREE.RectAreaLight`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看这个对象的构造函数，你会看到它需要四个属性。第一个是光的颜色，第二个是强度，最后两个定义了这个光区域的面积大小。请注意，如果你想可视化这些光，就像我们在示例中所做的那样，你必须自己创建一个与你的
    `THREE.RectAreaLight` 相同位置、旋转和大小的矩形。
- en: This light can be used to create some nice effects, but it’ll probably take
    some experimenting to get the effect you want. Once again, in this example, you’ve
    got a menu on the right-hand side that you can use to play around with the various
    settings.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这个光源可以用来创建一些很好的效果，但可能需要一些实验来得到你想要的效果。再次强调，在这个示例中，你有一个位于右侧的菜单，你可以使用它来尝试不同的设置。
- en: In recent versions of Three.js, a new light was added called `THREE.LightProbe`.
    This light is similar to `THREE.AmbientLight` but takes the cubemap of `WebGLRenderer`
    into account. This is the last light source that we’ll discuss in this chapter.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Three.js 的最新版本中，增加了一个名为 `THREE.LightProbe` 的新光源。这个光源类似于 `THREE.AmbientLight`，但考虑到了
    `WebGLRenderer` 的立方体贴图。这是我们本章要讨论的最后一个光源。
- en: THREE.LightProbe
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.LightProbe
- en: 'In the previous chapter, we talked a little bit about what a cubemap is. With
    a cubemap, you can show your models inside an environment. In the previous chapter,
    we used a cubemap to create a background that rotates with the view of the camera:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们简要地讨论了什么是立方体贴图。使用立方体贴图，你可以在环境中展示你的模型。在上一章中，我们使用立方体贴图创建了一个随着摄像机视角旋转的背景：
- en: '![Figure 3.22 – Cubemap example from Chapter 2](img/Figure_3.22_B18726.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.22 – 来自第 2 章的立方体贴图示例](img/Figure_3.22_B18726.jpg)'
- en: Figure 3.22 – Cubemap example from [Chapter 2](B18726_02.xhtml#_idTextAnchor028)
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.22 – 来自 [第 2 章](B18726_02.xhtml#_idTextAnchor028) 的立方体贴图示例
- en: As we’ll see in the next chapter, we can use the information from a cubemap
    to show reflections on our materials. Normally, though, these environment maps
    don’t contribute any light to your scene. With a `THREE.LightProbe`, however,
    we can extract lighting level information from the cubemap and use it to illuminate
    our models. So, what you’ll get looks a bit like a `THREE.AmbientLight`, but it
    affects the objects based on their location in the scene and the information from
    the cubemap.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在下一章中看到的，我们可以使用立方体贴图的信息在我们的材质上显示反射。然而，通常这些环境贴图不会为你的场景贡献任何光。但是，使用 `THREE.LightProbe`，我们可以从立方体贴图中提取光照级别信息，并使用它来照亮我们的模型。所以，你得到的效果有点像
    `THREE.AmbientLight`，但它根据场景中物体的位置和立方体贴图的信息影响物体。
- en: 'The easiest way to explain this is by looking at an example. Open up `light-probe.html`
    in your browser; you’ll see the following scene:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 解释这个的最简单方法就是看一个例子。在你的浏览器中打开`light-probe.html`；你会看到以下场景：
- en: '![Figure 3.23 – LightProbe with a model in a cave](img/Figure_3.23_B18726.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图3.23 – 洞穴中的模型与LightProbe](img/Figure_3.23_B18726.jpg)'
- en: Figure 3.23 – LightProbe with a model in a cave
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.23 – 洞穴中的模型与LightProbe
- en: 'In the preceding example, we’ve got a model inside a cave-like environment.
    What you can see, if you rotate the camera around, is that based on the light
    of the environment, our model is slightly differently lit. In the previous screenshot,
    we’re looking at the back of the object, which is further down in the cave, so
    the model is darker on that side. If we completely rotate the camera and set the
    entrance of the cave to our back, we’ll see that the model is much brighter and
    receives more light:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们有一个位于洞穴环境中的模型。如果你旋转相机，可以看到根据环境光线，我们的模型被轻微地不同地照亮。在上一个截图，我们正在查看物体的背面，它在洞穴中更深处，所以模型的那一侧较暗。如果我们完全旋转相机，将洞穴的入口设置在我们的背后，我们会看到模型变得更亮，接收到的光线更多：
- en: '![Figure 3.24 – LightProbe with a model in a cave receiving more light](img/Figure_3.24_B18726.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图3.24 – 洞穴中的模型接收更多光线的LightProbe](img/Figure_3.24_B18726.jpg)'
- en: Figure 3.24 – LightProbe with a model in a cave receiving more light
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.24 – 洞穴中的模型接收更多光线的LightProbe
- en: This is a really neat trick to make your objects look more life-like and less
    flat, and with a `THREE.LightProbe`, your model will receive light non-uniformly,
    which looks much better.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常巧妙的技巧，可以让你的物体看起来更逼真，不那么平面，并且使用`THREE.LightProbe`，你的模型将非均匀地接收光线，这看起来要好得多。
- en: 'Setting up a `THREE.LightProbe` is a bit more work but only needs to be done
    once when you create your scene. So long as you don’t change the environment,
    you don’t need to recalculate the values of the `THREE.LightProbe` object:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`THREE.LightProbe`需要更多的工作，但只需要在你创建场景时做一次。只要你不改变环境，你就不需要重新计算`THREE.LightProbe`对象的值：
- en: '[PRE11]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding code fragment, we do two main things. First, we use `THREE.CubeTextureLoader`
    to load in a cubemap. As we’ll see in the next chapter, a cubemap consists of
    six images representing the six sides of a cube, which together will make up our
    environment. Once that has been loaded, we set this to the background of our scene
    (note that this isn’t needed for `THREE.LightProbe` to work).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们做了两件主要的事情。首先，我们使用`THREE.CubeTextureLoader`来加载一个立方体贴图。正如我们将在下一章中看到的，立方体贴图由六个图像组成，代表一个立方体的六个面，这些面组合起来将构成我们的环境。一旦加载完成，我们将它设置为场景的背景（注意，这对于`THREE.LightProbe`工作不是必需的）。
- en: Now that we’ve got this cubemap, we can generate a `THREE.LightProbe` from it.
    This is done by passing in `cubeTexture` to a `LightProbeGenerator`. The result
    is a `THREE.LightProbe`, which we add to our scene, just like any other light.
    Just like with a `THREE.AmbientLight`, you can control how much this light contributes
    to the lighting of your meshes by setting the `intensity` property.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了这个立方体贴图，我们可以从中生成一个`THREE.LightProbe`。这是通过将`cubeTexture`传递给一个`LightProbeGenerator`来完成的。结果是得到一个`THREE.LightProbe`，我们将其添加到场景中，就像添加任何其他光源一样。就像`THREE.AmbientLight`一样，你可以通过设置`intensity`属性来控制这个光对网格照明的贡献程度。
- en: Note
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'There is also another kind of `LightProbe` provided by Three.js: `THREE.HemisphereLightProbe`.
    This one works pretty much the same as a normal `THREE.HemisphereLight`, but uses
    a `LightProbe` internally.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Three.js还提供另一种`LightProbe`：`THREE.HemisphereLightProbe`。这个与普通的`THREE.HemisphereLight`几乎一样工作，但内部使用`LightProbe`。
- en: 'The final object in this chapter isn’t a light source but plays a trick on
    the camera often seen in movies: `THREE.LensFlare`.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一个对象不是一个光源，但它在电影中经常看到的相机技巧中玩了一个花招：`THREE.LensFlare`。
- en: THREE.LensFlare
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.LensFlare
- en: 'You are probably already familiar with lens flares. For instance, they appear
    when you take a direct photograph of the Sun or another bright light source. In
    most cases, you want to avoid this, but for games and 3D-generated images, it
    provides a nice effect that makes scenes look a bit more realistic. Three.js also
    has support for lens flares and makes it very easy to add them to your scene.
    In this last section, we’re going to add a lens flare to a scene and create the
    output shown in the following screenshot; you can see this for yourself by opening
    `lens-flare.html`:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经对镜头眩光很熟悉了。例如，当你直接拍摄太阳或其他明亮的光源时，它们会出现。在大多数情况下，你希望避免这种情况，但在游戏和3D生成的图像中，它提供了一个使场景看起来更逼真的效果。Three.js也支持镜头眩光，并使其非常容易添加到场景中。在本节最后，我们将向场景添加一个镜头眩光，并创建以下屏幕截图所示的输出；你可以通过打开`lens-flare.html`来亲自查看：
- en: '![Figure 3.25 – A lens flare appears when you look into the light](img/Figure_3.25_B18726.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图3.25 – 当你直视光线时会出现镜头眩光](img/Figure_3.25_B18726.jpg)'
- en: Figure 3.25 – A lens flare appears when you look into the light
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.25 – 当你直视光线时会出现镜头眩光
- en: 'We can create a lens flare by instantiating the `LensFlare` object and by adding
    `LensFlareElement` objects:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过实例化`LensFlare`对象并添加`LensFlareElement`对象来创建一个镜头眩光：
- en: '[PRE12]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `LensFlare` element is just a container for our `LensFlareElement` objects,
    and `LensFlareElement` is the artifact you see when you look at the light source.
    Then, we add `LensFlare` to the light source, and we’re done. If you look at the
    code, you will see that we pass in several properties for each `LensFlareElement`.
    These properties determine what `LensFlareElement` looks like and where it is
    rendered on screen. To use this element, we can apply the following constructor
    arguments:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`LensFlare`元素只是我们`LensFlareElement`对象的容器，而`LensFlareElement`是当你看光源时看到的那个效果。然后，我们将`LensFlare`添加到光源上，任务就完成了。如果你查看代码，你会看到我们为每个`LensFlareElement`传递了几个属性。这些属性决定了`LensFlareElement`的外观以及它在屏幕上的渲染位置。要使用这个元素，我们可以应用以下构造函数参数：'
- en: '| **Property** | **Description** |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **描述** |'
- en: '| `texture` | A texture is an image that determines the shape of the flare.
    |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| `texture` | 一个纹理是一个确定眩光形状的图片。|'
- en: '| `size` | We can specify how large the flare should be. `size` denotes the
    size in pixels. If you specify `-1`, the size of the texture itself is used. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| `size` | 我们可以指定眩光应该有多大。`size`表示像素大小。如果你指定`-1`，则使用纹理本身的大小。|'
- en: '| `distance` | Indicates the distance from the light source (`0`) to the camera
    (`1`). Use this to position the lens flare in the right position. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| `distance` | 表示从光源（`0`）到相机（`1`）的距离。使用这个参数来定位镜头眩光在正确的位置。|'
- en: '| `color` | Denotes the color of the flare. |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| `color` | 表示眩光的颜色。|'
- en: Figure 3.26 – Properties of the THREE.LensFlareElement object
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.26 – THREE.LensFlareElement对象的属性
- en: 'First, let’s look a bit closer at the first `LensFlareElement`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们更仔细地看看第一个`LensFlareElement`：
- en: '[PRE13]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The first argument, `texture`, is an image that shows the shape and some basic
    coloring of the flare. We load this with a `THREE.TextureLoader`, where we simply
    add the location of `texture`:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数，`texture`，是一个显示眩光形状和一些基本色彩的照片。我们使用`THREE.TextureLoader`来加载这个图片，我们只需添加`texture`的位置：
- en: '![Figure 3.27 – Lens flare used in the example](img/Figure_3.27_B18726.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图3.27 – 示例中使用的镜头眩光](img/Figure_3.27_B18726.jpg)'
- en: Figure 3.27 – Lens flare used in the example
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.27 – 示例中使用的镜头眩光
- en: 'The second argument is the size of this flare. Since this is the flare we see
    at the light source itself, we’re going to make it quite big: `512` pixels in
    this case. Next, we need to set the `distance` property of this flare. What you
    set here is the relative distance between the source of the light and the center
    of the camera. If we set a distance of `0`, the texture will be shown at the position
    of the light, and if we set it to `1`, it will be shown at the position of the
    camera. In this case, we put it directly at the light source.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数是这个眩光的大小。由于这是我们自己在光源处看到的眩光，我们将它做得相当大：本例中为`512`像素。接下来，我们需要设置这个眩光的`distance`属性。你在这里设置的是光源与相机中心的相对距离。如果我们设置一个距离为`0`，纹理将显示在光源的位置，如果我们设置它为`1`，它将显示在相机的位置。在本例中，我们将其直接放置在光源处。
- en: 'Now, if you look back at the position of the other `LightFlareElement` objects,
    you will see that we positioned them at intervals from `0` to `1`, which results
    in the effect you see when you open up the `lens-flare.html` example:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你回顾一下其他`LightFlareElement`对象的位置，你会看到我们将它们定位在从`0`到`1`的间隔中，这导致了当你打开`lens-flare.html`示例时你看到的效果：
- en: '[PRE14]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: With that, we’ve discussed the various lighting options provided by Three.js.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们已经讨论了Three.js提供的各种光照选项。
- en: Summary
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered a lot of information about the different kinds of
    lights that are available in Three.js. You learned that configuring lights, colors,
    and shadows is not an exact science. To get the correct result, you should experiment
    with the different settings and use a `lil.GUI` control to fine-tune your configuration.
    The different lights behave in different ways and, as we’ll see in [*Chapter 4*](B18726_04.xhtml#_idTextAnchor056),
    materials respond differently to lights as well.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了关于Three.js中可用的不同类型光源的大量信息。你了解到配置光源、颜色和阴影并不是一门精确的科学。为了得到正确的结果，你应该尝试不同的设置，并使用`lil.GUI`控件来微调你的配置。不同的光源表现不同，正如我们将在[*第4章*](B18726_04.xhtml#_idTextAnchor056)中看到的，材质对光源的反应也不同。
- en: A `THREE.AmbientLight` color is added to every color in the scene and is often
    used to smooth hard colors and shadows. `THREE.PointLight` emits light in all
    directions and can cast shadows. `THREE.SpotLight` is a light that resembles a
    flashlight. It has a conical shape, can be configured to fade over distance, and
    can cast shadows. We also looked at `THREE.DirectionalLight`. This light can be
    compared to a faraway light, such as the Sun, whose light rays travel parallel
    to each other, the intensity of which doesn’t decrease the farther away it gets
    from the configured target, and which can also cast shadows.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.AmbientLight`颜色被添加到场景中的每一个颜色上，通常用于平滑硬色和阴影。`THREE.PointLight`向所有方向发射光线，并且可以投射阴影。`THREE.SpotLight`是一种类似手电筒的光源。它具有锥形形状，可以配置为随距离渐变，并且可以投射阴影。我们还探讨了`THREE.DirectionalLight`。这种光可以与远处的光源相比，例如太阳，其光线是平行的，强度不会随着距离配置目标越来越远而减弱，并且也可以投射阴影。'
- en: Besides the standard lights, we also looked at a couple of more specialized
    lights. For a more natural outdoor effect, you can use `THREE.HemisphereLight`,
    which takes into account ground and sky reflections. `THREE.RectAreaLight` doesn’t
    shine from a single point but emits light from a large area. We also showed a
    more advanced sort of ambient lighting by using a `THREE.LightProbe`, which used
    information from an environment map to determine how an object is lit. Finally,
    we showed you how to add a photographic lens flare with the `THREE.LenseFlare`
    object.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准光源外，我们还探讨了几个更专业的光源。为了获得更自然的户外效果，你可以使用`THREE.HemisphereLight`，它考虑了地面和天空的反射。`THREE.RectAreaLight`不是从一个点发光，而是从大面积发射光线。我们还通过使用`THREE.LightProbe`展示了更高级的环境光照，它使用环境贴图中的信息来确定物体是如何被照亮的。最后，我们展示了如何使用`THREE.LenseFlare`对象添加摄影镜头光晕效果。
- en: In the chapters so far, we have already introduced a couple of different materials,
    and in this chapter, you saw that not all materials respond in the same manner
    to the available lights. In [*Chapter 4*](B18726_04.xhtml#_idTextAnchor056), we’ll
    provide an overview of the materials that are available in Three.js.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在到目前为止的章节中，我们已经介绍了几种不同的材质，在本章中，你看到并不是所有材质对可用光源的反应都是相同的。在[*第4章*](B18726_04.xhtml#_idTextAnchor056)中，我们将概述Three.js中可用的材质。
- en: 'Part 2: Working with the Three.js Core Components'
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：使用Three.js核心组件
- en: In this second part, we’ll dive into the different materials provided by Three.js
    and the different geometries you can use to create your own scenes. Besides the
    geometries, we’ll also look at how Three.js supports points and sprites, which
    you can use, for instance, for rain and smoke effects.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将深入探讨Three.js提供的不同材质以及你可以用来创建自己场景的不同几何形状。除了几何形状外，我们还将探讨Three.js如何支持点和精灵，你可以使用这些点或精灵，例如，来创建雨和烟雾效果。
- en: 'In this part, there are the following chapters:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，有以下章节：
- en: '[*Chapter 4*](B18726_04.xhtml#_idTextAnchor056), *Working with Three.js Materials*'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第4章*](B18726_04.xhtml#_idTextAnchor056)，*使用Three.js材质*'
- en: '[*Chapter 5*](B18726_05.xhtml#_idTextAnchor081), *Learning to Work with Geometries*'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B18726_05.xhtml#_idTextAnchor081)，*学习使用几何形状*'
- en: '[*Chapter 6*](B18726_06.xhtml#_idTextAnchor101), *Exploring Advanced Geometries*'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B18726_06.xhtml#_idTextAnchor101)，*探索高级几何形状*'
- en: '[*Chapter 7*](B18726_07.xhtml#_idTextAnchor122), *Points and Sprites*'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B18726_07.xhtml#_idTextAnchor122), *点和精灵*'
