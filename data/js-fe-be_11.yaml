- en: '*Chapter 8*: Using MongoDB with Node.js'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 8 章*：使用 Node.js 与 MongoDB'
- en: '**MongoDB** is the database traditionally associated with Node.js. It is a
    NoSQL type database, which means that SQL will not be used to access the information
    it contains.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**MongoDB** 是传统上与 Node.js 关联的数据库。它是一种 NoSQL 类型的数据库，这意味着不会使用 SQL 来访问其中包含的信息。'
- en: MongoDB is a document-oriented database in which we store so-called *documents*;
    that is, a data structure of any type, such as information written on a sheet
    of paper (which is then equivalent to a document). Several sheets of paper, thus
    corresponding to several documents, form what is called a *collection*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB 是一种面向文档的数据库，我们在其中存储所谓的 *文档*；也就是说，任何类型的数据结构，例如写在一张纸上的信息（然后相当于一个文档）。几张纸，因此对应几个文档，形成所谓的
    *集合*。
- en: An example of a document is, for example, the first name, the last name, and
    the address of a customer. Aggregated information from multiple customers would
    be called a collection.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个文档可以是客户的姓名、姓氏和地址。来自多个客户的聚合信息被称为集合。
- en: In this chapter, we’ll study how to use MongoDB in conjunction with Node.js
    in order to store, read, delete, or update information in the database.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究如何结合 Node.js 使用 MongoDB 来存储、读取、删除或更新数据库中的信息。
- en: Inserting, searching, updating, or deleting data are the main actions that can
    be performed in a database. Therefore, in this chapter, we’ll see how to perform
    these operations with the MongoDB database.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 插入、搜索、更新或删除数据是可以在数据库中执行的主要操作。因此，在本章中，我们将看到如何使用 MongoDB 数据库执行这些操作。
- en: 'Here are the topics covered in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Installing MongoDB and the mongoose module
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 MongoDB 和 mongoose 模块
- en: Connecting to the MongoDB database
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到 MongoDB 数据库
- en: Creating documents
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建文档
- en: Searching documents
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索文档
- en: Updating documents
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新文档
- en: Deleting documents
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除文档
- en: Let’s start by installing MongoDB and the **mongoose** module, which will allow
    MongoDB to be used in Node.js programs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先安装 MongoDB 和 **mongoose** 模块，这将允许在 Node.js 程序中使用 MongoDB。
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the code files for this chapter on GitHub at: [https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%208.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%208.zip).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 GitHub 上找到本章的代码文件：[https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%208.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%208.zip)。
- en: Installing MongoDB
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 MongoDB
- en: The MongoDB database is independent of Node.js, which requires installing it
    separately. To do this, go to the site [https://www.mongodb.com/docs/manual/administration/install-community/](https://www.mongodb.com/docs/manual/administration/install-community/).
    Download the version suitable for your system.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB 数据库独立于 Node.js，需要单独安装。为此，请访问网站 [https://www.mongodb.com/docs/manual/administration/install-community/](https://www.mongodb.com/docs/manual/administration/install-community/)。下载适合您系统的版本。
- en: Once MongoDB is installed, verify that the installation is correct by typing
    the `mongo -h` command in a command interpreter. The `mongo` command is located
    in the `Server/x.x/bin` directory of MongoDB, where `x.x` is the version number
    of MongoDB installed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 MongoDB 后，通过在命令解释器中输入 `mongo -h` 命令来验证安装是否正确。`mongo` 命令位于 MongoDB 的 `Server/x.x/bin`
    目录中，其中 `x.x` 是安装的 MongoDB 版本号。
- en: Note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing, the `mongo` utility is available directly when installing
    MongoDB. However, it is possible that this utility will soon be available separately
    and called `mongosh`. In this case, download this utility from [https://www.mongodb.com/docs/mongodb-shell/install/](https://www.mongodb.com/docs/mongodb-shell/install/).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，`mongo` 工具在安装 MongoDB 时直接可用。然而，这个工具可能很快就会作为单独的版本提供，并被称为 `mongosh`。在这种情况下，请从
    [https://www.mongodb.com/docs/mongodb-shell/install/](https://www.mongodb.com/docs/mongodb-shell/install/)
    下载此工具。
- en: The `mongo` command will simply be replaced by the equivalent `mongosh` command.
    Both commands work identically.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`mongo` 命令将被等效的 `mongosh` 命令替换。这两个命令的工作方式相同。'
- en: After installing MongoDB, we will look into the mongo (or mongosh) utility.
    The mongo utility makes it easy to see the contents of database collections, without
    having to write program lines. It is therefore useful for checking, for example,
    whether a document has been correctly inserted into a collection, or that its
    deletion has been successful. Let’s see how to use the mongo utility.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装MongoDB之后，我们将探讨mongo（或mongosh）实用工具。mongo实用工具使得查看数据库集合的内容变得容易，而无需编写程序行。因此，它对于检查，例如，文档是否已正确插入到集合中，或其删除是否成功，非常有用。让我们看看如何使用mongo实用工具。
- en: Using the mongo utility
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用mongo实用工具
- en: The mongo utility enables you to easily view databases and the collections they
    contain. The mongo utility is launched by simply typing the `mongo` command in
    a command interpreter. The program then waits for database access commands, or
    the `exit` command to exit.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: mongo实用工具使您能够轻松查看数据库及其包含的集合。只需在命令解释器中输入`mongo`命令即可启动mongo实用工具。程序随后将等待数据库访问命令，或输入`exit`命令以退出。
- en: 'Here is the list of the main commands available in the mongo utility:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是mongo实用工具中可用的主要命令列表：
- en: '`show dbs`: This shows a list of existing databases. A database will be visible
    here only if it contains at least one collection.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show dbs`: 这显示了现有数据库的列表。只有当数据库包含至少一个集合时，数据库才会在此处可见。'
- en: '`db=connect("mydb_test")`: This is to connect to the database `mydb_test`.
    The `db` variable will then be used to access the database collections.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db=connect("mydb_test")`: 这是连接到数据库`mydb_test`。然后`db`变量将用于访问数据库集合。'
- en: '`show collections`: This shows the collections of the connected database. A
    collection will be present if it contains at least one document.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show collections`: 这显示了连接数据库的集合。如果集合包含至少一个文档，则将存在集合。'
- en: '`db.clients.find()`: This shows all documents in the `clients` collection.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.clients.find()`: 这显示了`clients`集合中的所有文档。'
- en: '`db.clients.find({name:"Clinton"})`: This lists documents in the `clients`
    collection whose name is `Clinton`.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.clients.find({name:"Clinton"})`: 这列出了`clients`集合中名为`Clinton`的文档。'
- en: '`db.clients.find().sort({name:1})`: This sorts documents in ascending order
    of the `name` field. Use `{name:-1}` for descending sort.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.clients.find().sort({name:1})`: 这按`name`字段的升序对文档进行排序。使用`{name:-1}`进行降序排序。'
- en: '`db.clients.count()`: This counts the number of documents found in the `clients`
    collection.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.clients.count()`: 这计算在`clients`集合中找到的文档数量。'
- en: '`db.clients.renameCollection("clients2")`: This renames the `clients` collection
    to `clients2`.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.clients.renameCollection("clients2")`: 这将`clients`集合重命名为`clients2`。'
- en: '`db.clients.drop()`: This drops the `clients` collection (all documents are
    dropped).'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.clients.drop()`: 这将删除`clients`集合（所有文档都将被删除）。'
- en: '`db.dropDatabase()`: This drops the connected database (all collections are
    removed).'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.dropDatabase()`: 这将删除连接的数据库（所有集合都将被移除）。'
- en: Other commands exist, in particular, for inserting, updating, or deleting documents
    in a collection. But since these actions are performed through the mongoose module
    instead, we will describe them using the mongoose module.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 其他命令存在，特别是用于在集合中插入、更新或删除文档的命令。但由于这些操作是通过mongoose模块执行的，我们将使用mongoose模块来描述它们。
- en: Installing the mongoose module
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装mongoose模块
- en: To establish the relationship between MongoDB and Node.js, several npm modules
    have been created. The most widely used one currently is the `mongoose` module.
    It is installed in the `node_modules` directory of the current directory by typing
    the `npm install mongoose` command.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了建立MongoDB和Node.js之间的关系，已经创建了几个npm模块。目前最广泛使用的是`mongoose`模块。通过输入`npm install
    mongoose`命令，它被安装在本目录的`node_modules`目录中。
- en: '![Figure 8.1 – Installing the mongoose module'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.1 – 安装mongoose模块'
- en: '](img/Figure_8.01_B17416.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 8.01_B17416.jpg](img/Figure_8.01_B17416.jpg)'
- en: Figure 8.1 – Installing the mongoose module
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 安装mongoose模块
- en: 'Once mongoose has been downloaded by npm, we check whether it is accessible
    for our programs. Let’s display the mongoose version for our programs. We write
    this snippet in the file `test.js`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦通过npm下载了mongoose，我们将检查它是否可用于我们的程序。让我们显示程序的mongoose版本。我们将此代码片段写入`test.js`文件：
- en: Displaying mongoose version (test.js file)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 显示mongoose版本（test.js文件）
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let’s use the `node test.js` command to run the previous program:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`node test.js`命令来运行前面的程序：
- en: '![Figure 8.2 – Checking that mongoose is accessible'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.2 – 检查mongoose是否可访问'
- en: '](img/Figure_8.02_B17416.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 8.02_B17416.jpg](img/Figure_8.02_B17416.jpg)'
- en: Figure 8.2 – Checking that mongoose is accessible
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.2 – 检查mongoose是否可访问'
- en: Warning
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: If you get an error loading the mongoose module, it’s probably because you installed
    it globally (with the `-g` option). In this case, just type the `npm link mongoose`
    command in the terminal to get rid of the error.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你加载 mongoose 模块时遇到错误，那可能是因为你全局安装了它（使用 `-g` 选项）。在这种情况下，只需在终端中输入 `npm link mongoose`
    命令来消除错误。
- en: The mongoose module will allow us to use the MongoDB database to create documents,
    search them, update them, or destroy them. These are the classic operations that
    can be performed on a database.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: mongoose 模块将允许我们使用 MongoDB 数据库创建文档、搜索它们、更新它们或销毁它们。这些是在数据库上可以执行的经典操作。
- en: But to be able to perform these operations, it is necessary to first connect
    to the database.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 但要能够执行这些操作，首先需要连接到数据库。
- en: Connecting to the MongoDB database
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到 MongoDB 数据库
- en: All operations to access MongoDB require establishing a connection with it.
    Now let’s see how to establish a connection with MongoDB.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 MongoDB 的所有操作都需要与它建立连接。现在让我们看看如何与 MongoDB 建立连接。
- en: The `mongoose.connect(url)` instruction connects the mongoose module to the
    database specified in the `url` parameter. The `url` parameter is of the form
    `"mongodb://localhost/mydb_test"` to connect to the `mydb_test` database on the
    localhost server.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`mongoose.connect(url)` 指令将 mongoose 模块连接到 `url` 参数指定的数据库。`url` 参数的形式为 `"mongodb://localhost/mydb_test"`，用于连接到本地服务器上的
    `mydb_test` 数据库。'
- en: 'The database will actually be created (and visible with the execution of the
    `show dbs` command of the mongo utility) when the first document is inserted into
    it:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当第一个文档被插入到数据库中时，数据库实际上将被创建（并且可以通过执行 mongo 实用工具的 `show dbs` 命令来看到）：
- en: Connecting to the mydb_test database (test.js file)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到 mydb_test 数据库（test.js 文件）
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let’s run the previous program:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行之前的程序：
- en: '![Figure 8.3 – Database connection'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.3 – 数据库连接](#)'
- en: '](img/Figure_8.03_B17416.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.03_B17416.jpg)'
- en: Figure 8.3 – Database connection
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 数据库连接
- en: To know whether the connection to the database has actually been made, mongoose
    sends the `open` event (if the connection was successful) or the `error` event
    (if the connection fails) on the `mongoose.connection` object.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了知道数据库连接是否真正建立，mongoose 在 `mongoose.connection` 对象上发送 `open` 事件（如果连接成功）或 `error`
    事件（如果连接失败）。
- en: 'Next, we will take these two events into account and integrate them into the
    previous program. This is done using the `on(event, callback)` method defined
    on the `mongoose.connection` object:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将考虑这两个事件并将它们集成到之前的程序中。这是通过在 `mongoose.connection` 对象上定义的 `on(event, callback)`
    方法来完成的：
- en: Note
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `on(event, callback)` method is used to process the reception of the event
    and to associate it with the processing described in the callback function.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`on(event, callback)` 方法用于处理事件的接收并将其与回调函数中描述的处理相关联。'
- en: Using open and error events on database connection (test.js file)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库连接中使用 open 和 error 事件（test.js 文件）
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let’s run the previous program:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行之前的程序：
- en: '![Figure 8.4 – Successful connection to the database'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.4 – 成功连接到数据库](#)'
- en: '](img/Figure_8.04_B17416.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.04_B17416.jpg)'
- en: Figure 8.4 – Successful connection to the database
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 成功连接到数据库
- en: We have seen how to connect to the database. We will therefore be able to create
    documents in a collection of the database.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何连接到数据库。因此，我们将在数据库的集合中创建文档。
- en: Creating documents in MongoDB
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 MongoDB 中创建文档
- en: Once the database has been accessed, you can create documents in it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦访问了数据库，你就可以在其中创建文档。
- en: A document will be inserted into a *collection*. A collection will therefore
    group together a set of documents. The database will therefore be a set of collections,
    each containing documents.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 文档将被插入到一个 *集合* 中。因此，集合将把一组文档组合在一起。数据库因此将是一组集合，每个集合包含文档。
- en: In order to be able to insert documents, mongoose asks us to describe the structure
    of these documents. For this, we will use schemas and models.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够插入文档，mongoose 要求我们描述这些文档的结构。为此，我们将使用模式和模型。
- en: Describing document structure using schemas and models
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模式和模型描述文档结构
- en: To access the documents in the database, the documents must be described by
    means of schemas and models.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问数据库中的文档，必须通过模式和模型来描述这些文档。
- en: Definitions
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 定义
- en: A *schema* allows you to define the structure of a document that is stored in
    a collection. The structure is defined according to MongoDB data types.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*模式* 允许你定义存储在集合中的文档的结构。结构是根据 MongoDB 数据类型定义的。'
- en: A *model* is the representation of a schema as a JavaScript class. It links
    a schema to a MongoDB collection.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*模型* 是方案作为 JavaScript 类的表示。它将方案链接到 MongoDB 集合。'
- en: Let’s look at how to create a schema and then a model.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建方案和模型。
- en: Creating a schema
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建方案
- en: 'A schema defines the fields of a document using Node.js internal object classes.
    These are the following classes:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 方案使用 Node.js 内部对象类定义文档的字段。以下是一些类：
- en: '`String`: This defines a string of characters.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String`: 这定义了一个字符字符串。'
- en: '`Number`: This defines a numeric field.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number`: 这定义了一个数值字段。'
- en: '`Boolean`: This defines a Boolean.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Boolean`: 这定义了一个布尔值。'
- en: '`Array`: This defines an array.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array`: 这定义了一个数组。'
- en: '`Buffer`: This defines a buffer of bytes.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Buffer`: 这定义了一个字节缓冲区。'
- en: '`Date`: This defines a date.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Date`: 这定义了一个日期。'
- en: '`Object`: This defines a JavaScript object.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object`: 这定义了一个 JavaScript 对象。'
- en: The `mongoose.Schema(format)` method is used to define the schema associated
    with the document. The `format` parameter is a JavaScript object that associates
    each field in the document with the type (in the above list) that represents it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `mongoose.Schema(format)` 方法来定义与文档关联的模式。`format` 参数是一个 JavaScript 对象，它将文档中的每个字段与表示它的类型（在上面的列表中）关联起来。
- en: 'Let’s create the schema defining a client. A client is characterized by its
    `lastname`, `firstname`, and `address`. All these fields are of type `String`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建定义客户端的方案。客户端以其 `lastname`、`firstname` 和 `address` 为特征。所有这些字段都是 `String`
    类型：
- en: Defining the schema associated with a client (test.js file)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 定义与客户端关联的模式（test.js 文件）
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now let’s explain how to create a model from the schema.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们解释如何从方案创建模型。
- en: Creating a model
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建模型
- en: The schema is then used to define the model associated with the document. The
    model corresponds to a JavaScript class that will be used to create the documents
    in a collection.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用该模式来定义与文档关联的模型。该模型对应于一个 JavaScript 类，该类将用于在集合中创建文档。
- en: The `mongoose.model(collection, schema)` method returns a JavaScript class associated
    with the schema. This class is called a model.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`mongoose.model(collection, schema)` 方法返回与方案关联的 JavaScript 类。这个类被称为模型。'
- en: Documents created with this class will be inserted into the specified `collection`.
    The collection may not exist before inserting a document. A collection requires
    at least one document within it.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此类创建的文档将被插入到指定的 `collection` 中。在插入文档之前，集合可能不存在。一个集合至少需要包含一个文档。
- en: Summary
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要
- en: A schema specifies the format of a document stored in a collection, while a
    model is a JavaScript class used to create each such document. We associate a
    document schema with a collection using the `mongoose.model(collection, schema)`
    method call. This returns a JavaScript class that can then be used to generate
    individual document instances.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 方案指定了存储在集合中的文档的格式，而模型是用于创建每个此类文档的 JavaScript 类。我们使用 `mongoose.model(collection,
    schema)` 方法调用将文档方案与集合关联起来。这返回一个 JavaScript 类，然后可以用来生成单个文档实例。
- en: 'Let’s create the `Client` class, which will create the clients that will be
    stored in the `clients` collection. It is traditional to name the collection based
    on the name of the model, in lowercase and in plural:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建 `Client` 类，它将创建存储在 `clients` 集合中的客户端。根据模型名称命名集合是传统的，应使用小写且为复数形式：
- en: Creating the Client model from the schema (test.js file)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 从方案创建 `Client` 模型（test.js 文件）
- en: '[PRE22]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `Client` class is now available to create the documents that will be inserted
    into the `clients` collection.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`Client` 类现在可用于创建将插入到 `clients` 集合中的文档。'
- en: Creating the document
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建文档
- en: There are two methods for creating the documents in a collection. These are
    the `doc.save(callback)` instance method and the `create(doc, callback)` class
    method. Let’s look at these two ways to create documents in a collection.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 创建集合中的文档有两种方法。这些是 `doc.save(callback)` 实例方法和 `create(doc, callback)` 类方法。让我们看看这两种在集合中创建文档的方法。
- en: Let’s start by using the `doc.save(callback)` instance method.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先使用 `doc.save(callback)` 实例方法。
- en: Using the doc.save(callback) instance method
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `doc.save(callback)` 实例方法
- en: The client document is created in memory from the previously created class (by
    means of `var client = new Client()`), then saved in the `clients` collection
    by means of the `client.save()` method.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端文档是通过之前创建的类（通过 `var client = new Client()`）在内存中创建的，然后通过 `client.save()` 方法保存到
    `clients` 集合中。
- en: 'The callback function allows processing when the document has finished being
    inserted into the collection. This is especially useful if it is necessary to
    wait for the document to be inserted into the database before continuing processing:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数允许在文档完成插入到集合后进行处理。这在需要等待文档插入到数据库后再继续处理时特别有用：
- en: Using the save() instance method to save document (test.js file)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 save() 实例方法保存文档（test.js 文件）
- en: '[PRE32]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The callback function takes the `err` parameter, which corresponds to a possible
    error message (otherwise, it is `null`).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数接受 `err` 参数，它对应于可能出现的错误消息（否则，它是 `null`）。
- en: 'We get the following result:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下结果：
- en: '![Figure 8.5 – Using the doc.save() instance method'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.5 – 使用 doc.save() 实例方法'
- en: '](img/Figure_8.05_B17416.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.05_B17416.jpg)'
- en: Figure 8.5 – Using the doc.save() instance method
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – 使用 doc.save() 实例方法
- en: Using the traces displayed in the console, we can see that the message `The
    client is inserted into the collection` is displayed after the other messages,
    which means that inserting a document is not blocking other tasks (i.e., other
    tasks can be done while waiting for insertion in the database).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 使用控制台显示的跟踪信息，我们可以看到消息 `The client is inserted into the collection` 在其他消息之后显示，这意味着插入文档不会阻塞其他任务（即，其他任务可以在等待数据库插入时完成）。
- en: The `save()` method can also be used as a `Promise` object (see [*Chapter 2*](B17416_02_ePub.xhtml#_idTextAnchor044),
    *Exploring the Advanced Concepts of JavaScript*). For this, we use the `then(callback)`
    method afterward, possibly followed by the `catch(callback)` method to process
    the cases of error when calling the `save()` method.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`save()` 方法也可以用作 `Promise` 对象（参见 [*第2章*](B17416_02_ePub.xhtml#_idTextAnchor044)，*探索JavaScript的高级概念*）。为此，我们随后使用
    `then(callback)` 方法，可能还会跟随着 `catch(callback)` 方法来处理调用 `save()` 方法时出现的错误情况。'
- en: 'In this case, we write the following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们编写以下内容：
- en: Using the save() method as a Promise objet
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 save() 方法作为 Promise 对象
- en: '[PRE51]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Now let’s see the other method of creating a document with the `create(doc,
    callback)` class method.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看使用 `create(doc, callback)` 类方法创建文档的另一种方法。
- en: Using the create(doc, callback) class method
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 create(doc, callback) 类方法
- en: A class method means that we can use the method without having instantiated
    an object, unlike an instance method, which requires that the object of the class
    be created (with `c = new Client()`).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 类方法意味着我们可以使用该方法而不需要实例化一个对象，这与需要创建类对象（使用 `c = new Client()`）的实例方法不同。
- en: 'To create the document associated with the client identified by `{lastname:"Obama",
    firstname:"Barack", address:"Washington"}`, we would write the following:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建与 `{lastname:"Obama", firstname:"Barack", address:"Washington"}` 标识的客户关联的文档，我们会编写以下内容：
- en: Using the Client.create(doc, callback) class method to save document (test.js
    file)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Client.create(doc, callback) 类方法保存文档（test.js 文件）
- en: '[PRE57]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: The `create(doc, callback)` class method is used by prefixing it with the name
    of the JavaScript class (here, the `Client` class).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`create(doc, callback)` 类方法通过在它前面加上JavaScript类的名称（这里，`Client` 类）来使用。'
- en: The document to be saved is written in the form of a JavaScript object (JSON
    format) but can also be an object instantiated with `c = new Client()`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存的文档以JavaScript对象（JSON格式）的形式编写，但也可以是使用 `c = new Client()` 实例化的对象。
- en: The callback function of the form `callback(err, doc)` is executed at the end
    of saving the document in the database. This callback function is useful if you
    want to perform a process while being certain that the document has been saved
    in the collection.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 形式为 `callback(err, doc)` 的回调函数在文档保存在数据库后执行。如果你想在确定文档已保存在集合中时执行某个过程，这个回调函数很有用。
- en: Note
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the callback function `callback(err, doc)` of the `create(doc, callback)`
    method has the two parameters `err` and `doc`, which are the possible error and
    the document saved in the database, respectively.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`create(doc, callback)` 方法的回调函数 `callback(err, doc)` 有两个参数 `err` 和 `doc`，分别对应可能的错误和保存在数据库中的文档。
- en: 'Let’s run the previous program:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行前面的程序：
- en: '![Figure 8.6 – Using the Client.create() class method'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.6 – 使用 Client.create() 类方法'
- en: '](img/Figure_8.06_B17416.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.06_B17416.jpg)'
- en: Figure 8.6 – Using the Client.create() class method
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 – 使用 Client.create() 类方法
- en: 'The saved document has the fields indicated in the format associated with the
    model (here, the `lastname`, `firstname`, and `address` fields), but also the
    `_id` and `__v` fields, added automatically by MongoDB:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 保存的文档具有与模型关联的格式中指示的字段（在此处为 `lastname`、`firstname` 和 `address` 字段），但也包含 `_id`
    和 `__v` 字段，这些字段由 MongoDB 自动添加：
- en: The `_id` field is a field used by MongoDB to give a unique identifier to each
    document in a collection. It plays the role of a primary key.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_id` 字段是 MongoDB 用于为集合中的每个文档提供唯一标识符的字段。它扮演着主键的角色。'
- en: The `__v` field is a field added by mongoose, associated with the document version
    number. We will not use it here.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__v` 字段是由 mongoose 添加的字段，与文档版本号相关联。我们在此处不会使用它。'
- en: As with the `save()` instance method, the `create(doc)` class method can be
    used as a `Promise` object. For this, we do not use the `callback` parameter in
    the `create(doc)` method and instead use the `then(callback)` and `catch(callback)`
    methods following the `create(doc)` method call.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `save()` 实例方法一样，`create(doc)` 类方法也可以用作 `Promise` 对象。为此，我们不在 `create(doc)`
    方法中使用 `callback` 参数，而是在 `create(doc)` 方法调用之后使用 `then(callback)` 和 `catch(callback)`
    方法。
- en: 'For example, we could also write the following:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们也可以编写以下内容：
- en: Using create() method as a Promise object
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 将 create() 方法用作 Promise 对象
- en: '[PRE74]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: In the previous examples, we have inserted two documents into the `clients`
    collection. Let’s use the mongo utility to display the inserted documents and
    verify the documents that are present in the collection.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们已经将两个文档插入到 `clients` 集合中。让我们使用 mongo 工具显示插入的文档并验证集合中存在的文档。
- en: Using the mongo utility to view inserted documents
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 mongo 工具查看插入的文档
- en: 'To display the inserted documents, use the mongo utility and type the following
    commands:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示插入的文档，请使用 mongo 工具并输入以下命令：
- en: '`db=connect("mydb_test")` to connect to the database'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`db=connect("mydb_test")` 用于连接到数据库'
- en: '`show collections` to show the collections already present'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`show collections` 用于显示已存在的集合'
- en: '`db.clients.find()` to display documents from the `clients` collection'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`db.clients.find()` 用于显示 `clients` 集合中的文档'
- en: '![Figure 8.7 – Using the mongo utility to view documents'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.7 – 使用 mongo 工具查看文档'
- en: '](img/Figure_8.07_B17416.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.07_B17416.jpg)'
- en: Figure 8.7 – Using the mongo utility to view documents
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – 使用 mongo 工具查看文档
- en: We thus check that the two documents of the `clients` collection are indeed
    present.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们检查 `clients` 集合中的两个文档确实存在。
- en: Let’s see how to search for them with mongoose module methods.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用 mongoose 模块方法来搜索它们。
- en: Searching for documents in MongoDB
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 MongoDB 中搜索文档
- en: Once the documents have been inserted into the collection, they can be searched
    for using the `find()` class method.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文档已插入到集合中，就可以使用 `find()` 类方法进行搜索。
- en: Note
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `find()` method is a class method, which means that it is used by prefixing
    it with the class name associated with the model, for example, `Client.find()`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`find()` 方法是一个类方法，这意味着它通过在类名前加上与模型关联的类名来使用，例如，`Client.find()`。'
- en: The `find(conditions, callback)` method is used to perform a search in the collection
    associated with the model, then to retrieve the results of the search in the callback
    function indicated as a parameter.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`find(conditions, callback)` 方法用于在关联的模型集合中执行搜索，然后在回调函数中检索搜索结果，该回调函数作为参数指示。'
- en: 'Let’s take an in-depth look at the parameters:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨一下参数：
- en: The `conditions` parameter is a JavaScript object used to specify search conditions.
    If no condition is specified, do not indicate anything (or indicate an empty object
    `{}`).
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conditions` 参数是一个 JavaScript 对象，用于指定搜索条件。如果没有指定条件，则不进行任何指示（或指示一个空对象 `{}`）。'
- en: The callback function is of the form `callback(err, results)` where `err` is
    an error message (`null` otherwise) and `results` is an array containing the search
    results (empty `[]` if none).
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回调函数的形式为 `callback(err, results)`，其中 `err` 是错误消息（否则为 `null`），`results` 是包含搜索结果的数组（如果没有找到则为空数组
    `[]`）。
- en: There is also the `findOne(conditions, callback)` class method, which allows
    you, on the same principle, to find only the first document that satisfies the
    search. The callback function is of the form `callback(err, result)` where `result`
    is the first document found.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个 `findOne(conditions, callback)` 类方法，它允许你根据相同的原则找到满足搜索条件的第一个文档。回调函数的形式为
    `callback(err, result)`，其中 `result` 是找到的第一个文档。
- en: Note
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `findOne(conditions, callback)` method will be useful if you are looking
    for a single document, for example, from its identifier `_id`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在寻找单个文档，例如通过其标识符 `_id`，`findOne(conditions, callback)` 方法将很有用。
- en: You can also use the `find(conditions)` and `findOne(conditions)` methods without
    specifying the callback function as a parameter. For this, we use the `then(callback)`
    and `catch(callback)` methods to perform the processing on the documents found
    or in the event of an error. We can also use the `exec(callback)` method, as explained
    in the following section.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 `find(conditions)` 和 `findOne(conditions)` 方法，而不必指定回调函数作为参数。为此，我们使用 `then(callback)`
    和 `catch(callback)` 方法来处理找到的文档或发生错误时的事件。我们还可以使用 `exec(callback)` 方法，如以下章节所述。
- en: Let us now examine how to write the `conditions` parameter used in the two methods
    `find()` and `findOne()`.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在看看如何编写在两个方法 `find()` 和 `findOne()` 中使用的 `conditions` 参数。
- en: Writing search conditions
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写搜索条件
- en: In the `conditions` parameter, we indicate an object whose properties are the
    fields of the documents in the collection, and the associated values are the values
    sought for the field, of the form `{field1:value1, field2:value2...}`, for example,
    `{lastname:"Clinton", firstname:"Bill"}`.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `conditions` 参数中，我们指明一个对象，其属性是集合中文档的字段，相关值是字段所寻求的值，形式为 `{field1:value1, field2:value2...}`，例如，`{lastname:"Clinton",
    firstname:"Bill"}`。
- en: 'Other properties can be used as keywords to express conditions. They start
    with the `$` sign, such as: `$or`, `$exists`, `$type`, `$where`, `$gt`, and `$lt`.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用其他属性作为关键字来表示条件。它们以 `$` 符号开头，例如：`$or`、`$exists`、`$type`、`$where`、`$gt` 和
    `$lt`。
- en: Note
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A list of possible keywords can be found here: [https://docs.mongodb.com/manual/reference/operator/query/](https://docs.mongodb.com/manual/reference/operator/query/).'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在此处找到可能的关键字列表：[https://docs.mongodb.com/manual/reference/operator/query/](https://docs.mongodb.com/manual/reference/operator/query/)。
- en: 'Here are some examples of conditions:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些条件示例：
- en: '`{ }`: All documents in the collection. You can also write `find()`, which
    is equivalent to `find({})`.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{ }`: 集合中的所有文档。你也可以写 `find()`，它与 `find({})` 等价。'
- en: '`{ lastname: "Clinton" }`: All documents whose lastname is `Clinton`.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{ lastname: "Clinton" }`: 所有姓氏为 `Clinton` 的文档。'
- en: '`{ lastname: "Clinton", firstname: "Bill" }`: All documents whose lastname
    is `Clinton` and first name is `Bill`.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{ lastname: "Clinton", firstname: "Bill" }`: 所有姓氏为 `Clinton` 且名字为 `Bill` 的文档。'
- en: '`{ $or: [{ lastname: "Clinton"}, { firstname: "Jimmy" }] }`: All documents
    whose lastname is `Clinton` or first name is `Jimmy`.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{ $or: [{ lastname: "Clinton"}, { firstname: "Jimmy" }] }`: 所有姓氏为 `Clinton`
    或名字为 `Jimmy` 的文档。'
- en: '`{ lastname: /obama/i }`: All documents whose lastname contains the string
    `obama` regardless of case (regular expression).'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{ lastname: /obama/i }`: 所有姓氏包含字符串 `obama`（不区分大小写）的文档（正则表达式）。'
- en: '`{ address: { $exists: true} }`: All documents whose `address` field exists,
    regardless of its type (String, Object, etc.).'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{ address: { $exists: true} }`: 所有 `address` 字段存在的文档，无论其类型（字符串、对象等）。'
- en: '`{ address: { $exists: true, $type: 2 } }`: All documents whose `address` field
    exists, and which is of type `2` (String).'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{ address: { $exists: true, $type: 2 } }`: 所有 `address` 字段存在且类型为 `2`（字符串）的文档。'
- en: '`{"address.city": "Washington" }`: All documents containing the `address` field
    that itself has a city field whose value is `Washington`.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{"address.city": "Washington" }`: 包含 `address` 字段且该字段本身有一个城市字段，其值为 `Washington`
    的所有文档。'
- en: '`{lastname:{$type:2}, $where:"this.lastname.match(/^Clinton|carter$/i)"}`:
    All documents whose lastname is a string (type = `2`) and whose lastname begins
    with `Clinton` or ends with `carter`, regardless of case. You must indicate that
    the lastname is a character string, otherwise you may have an error with names
    that are not in this form.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{lastname:{$type:2}, $where:"this.lastname.match(/^Clinton|carter$/i)"}`:
    所有姓氏为字符串（类型 = `2`）且姓氏以 `Clinton` 或以 `carter` 结尾（不区分大小写）的文档。你必须指明姓氏是字符字符串，否则你可能会在不符合此格式的姓名上遇到错误。'
- en: '`{lastname: { $gt: "J", $lt: "S" }}`: All documents whose lastname is greater
    than `"J"` and less than `"S"`.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{lastname: { $gt: "J", $lt: "S" }}`: 所有姓氏大于 `"J"` 且小于 `"S"` 的文档。'
- en: '`{lastname: { $in:["Clinton", "Carter", "Obama"] }}` : All documents whose
    lastname is `Clinton`, `Carter`, or `Obama`.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{lastname: { $in:["Clinton", "Carter", "Obama"] }}` : 所有姓氏为 `Clinton`、`Carter`
    或 `Obama` 的文档。'
- en: Once the search conditions have been expressed, the results found must be retrieved
    and displayed. Let’s see how to do it.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦表达出搜索条件，就必须检索和显示找到的结果。让我们看看如何做。
- en: Retrieving and displaying the results
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检索和显示结果
- en: Whatever the condition expressed, the corresponding results can be retrieved
    in the callback function associated with the `find()` method, of the form `callback(err,
    results)`. We will also see that it is possible to use the `exec(callback)` method
    to retrieve the results.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 无论表达的条件是什么，都可以在 `find()` 方法的关联回调函数中检索相应的结果，形式为 `callback(err, results)`。我们还将看到可以使用
    `exec(callback)` 方法来检索结果。
- en: Let’s look at these two ways to retrieve search results.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这两种检索搜索结果的方法。
- en: Using the callback parameter of the find(conditions, callback) method
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 find(conditions, callback) 方法的回调参数
- en: 'Let’s find all clients whose lastname is `Clinton` or firstname is `Barack`.
    The result will be displayed in the callback function:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查找所有姓氏为 `Clinton` 或名字为 `Barack` 的客户。结果将在回调函数中显示：
- en: Displaying clients whose lastname is “Clinton” or firstname is “Barack” (test.js
    file)
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 显示姓氏为 “Clinton” 或名字为 “Barack” 的客户（test.js 文件）
- en: '[PRE78]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'We obtain the result shown in the following figure:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获得以下图中显示的结果：
- en: '![Figure 8.8 – Displaying search results with find(conditions, callback)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.8 – 使用 find(conditions, callback) 显示搜索结果](https://example.org/img/Figure_8.08_B17416.jpg)'
- en: '](img/Figure_8.08_B17416.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_8.08_B17416.jpg](https://example.org/img/Figure_8.08_B17416.jpg)'
- en: Figure 8.8 – Displaying search results with find(conditions, callback)
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – 使用 find(conditions, callback) 显示搜索结果
- en: The callback function can be expressed in the `find()` method as before, or
    be specified in the `exec()` method used after the `find()` method. Let us now
    examine this second possibility.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数可以在之前的 `find()` 方法中表达，或者在 `find()` 方法之后使用的 `exec()` 方法中指定。现在让我们来考察第二种可能性。
- en: Using the exec(callback) method
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `exec(callback)` 方法
- en: Another way to retrieve results is to use the `exec(callback)` method following
    the `find(conditions)` method. The `find(conditions)` method is used here without
    indicating a callback function in its parameters because the callback function
    is indicated in the `exec(callback)` method.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种检索结果的方法是在 `find(conditions)` 方法之后使用 `exec(callback)` 方法。在这里使用 `find(conditions)`
    方法时没有在其参数中指定回调函数，因为回调函数已在 `exec(callback)` 方法中指定。
- en: 'The advantage of this is that we can insert new methods between the `find()`
    method and the `exec()` method. For example, if we want to add as additional conditions
    that the `lastname` field must be equal to `Clinton`, we can write the following:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优点是，我们可以在 `find()` 方法和 `exec()` 方法之间插入新方法。例如，如果我们想添加额外的条件，即 `lastname`
    字段必须等于 `Clinton`，我们可以编写以下内容：
- en: Adding as search conditions that lastname is “Clinton” (test.js file)
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 将搜索条件添加为姓氏为 “Clinton”（test.js 文件）
- en: '[PRE91]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Note
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Methods such as `where(field)` and `eq(value)` can be chained after the `find()`
    method. The execution of the search will be effective when calling the `exec()`
    method. Other usage possibilities are described here: [https://mongoosejs.com/docs/api/query.html#query_Query-where](https://mongoosejs.com/docs/api/query.html#query_Query-where).'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`where(field)` 和 `eq(value)` 等方法可以在 `find()` 方法之后链式使用。调用 `exec()` 方法时，搜索将有效执行。其他使用可能性在此描述：[https://mongoosejs.com/docs/api/query.html#query_Query-where](https://example.org/mongoosejs.com/docs/api/query.html#query_Query-where)。'
- en: You can also use the `exec(callback)` method without specifying the callback
    function as a parameter. For this, we use the `then(callback)` and `catch(callback)`
    methods to perform the processing on the documents found or in the event of an
    error.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用 `exec(callback)` 方法，而不必指定回调函数作为参数。为此，我们使用 `then(callback)` 和 `catch(callback)`
    方法来处理找到的文档或发生错误时进行的处理。
- en: 'We write the following for this:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样写：
- en: Using exec() method as a Promise object
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 将 exec() 方法作为 Promise 对象使用
- en: '[PRE107]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: The result is displayed in the following figure.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将在以下图中显示。
- en: '![Figure 8.9 – Using the exec(callback) method'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.9 – 使用 `exec(callback)` 方法](https://example.org/img/Figure_8.09_B17416.jpg)'
- en: '](img/Figure_8.09_B17416.jpg)'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_8.09_B17416.jpg](https://example.org/img/Figure_8.09_B17416.jpg)'
- en: Figure 8.9 – Using the exec(callback) method
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – 使用 `exec(callback)` 方法
- en: We’ve learned how to create documents, then search for them. Now let’s look
    at how to update them.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何创建文档，然后搜索它们。现在让我们看看如何更新它们。
- en: Updating documents in MongoDB
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 MongoDB 中更新文档
- en: It is possible to modify one or more documents of a collection. The `updateOne()`
    and `updateMany()` class methods are used respectively to modify the first document
    found or all of the documents found.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 可以修改集合中的一个或多个文档。分别使用 `updateOne()` 和 `updateMany()` 类方法来修改找到的第一个文档或所有找到的文档。
- en: 'These two methods have similar parameters:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法具有类似的参数：
- en: '`updateMany(conditions, update, callback)` indicates modifying the data indicated
    in the `update` object on the documents specified by the indicated `conditions`.
    The callback function of the form `callback(err, response)` is called after the
    update.'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updateMany(conditions, update, callback)` 表示根据指示的 `conditions` 在指定的文档上修改 `update`
    对象中指示的数据。更新后，将调用形式为 `callback(err, response)` 的回调函数。'
- en: '`updateOne(conditions, update, callback)` indicates modifying the data indicated
    in the `update` object on the first document found by the indicated `conditions`.
    The callback function of the form `callback(err, response)` is called after the
    update.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updateOne(conditions, update, callback)` 表示根据指示的 `conditions` 修改第一个找到的文档上的
    `update` 对象中指示的数据。更新后，将调用形式为 `callback(err, response)` 的回调函数。'
- en: Only the `conditions` and `update` parameters are mandatory in the two methods.
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这两种方法中，`conditions` 和 `update` 参数是必须的。
- en: Warning
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: If the callback is not present in the method, you must use the `then()` or `exec()`
    method afterward, otherwise the update is not done.
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果方法中没有回调函数，你必须随后使用 `then()` 或 `exec()` 方法，否则更新不会完成。
- en: 'Let’s modify the address of `Clinton`, which will now be `New York`:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改 `Clinton` 的地址，现在将是 `纽约`：
- en: Using updateOne() to modify the address of “Clinton” (test.js file)
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 updateOne() 修改 "Clinton" 的地址（test.js 文件）
- en: '[PRE117]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Here, we use the callback function to display the content of the `response`
    parameter returned by the function. We get the following result:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用回调函数来显示函数返回的 `response` 参数的内容。我们得到以下结果：
- en: '![Figure 8.10 – Updating a document'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.10 – 更新文档]'
- en: '](img/Figure_8.10_B17416.jpg)'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_8.10_B17416.jpg]'
- en: Figure 8.10 – Updating a document
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10 – 更新文档
- en: Note
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `response.modifiedCount` field indicates the number of modified documents.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`response.modifiedCount` 字段表示修改的文档数量。'
- en: If you do not want to perform any processing at the end of the update, you can
    omit the callback function, but in this case, you must use the `then()` or `exec()`
    method afterward, otherwise, the update will not take place.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想在更新结束时执行任何处理，你可以省略回调函数，但在此情况下，你必须随后使用 `then()` 或 `exec()` 方法，否则更新将不会发生。
- en: 'Let’s use the `exec()` method to perform the update:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `exec()` 方法执行更新：
- en: Performing update using exec() method (test.js file)
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 exec() 方法执行更新（test.js 文件）
- en: '[PRE130]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Once you know how to create, search for, and then modify documents, you just
    have to know how to delete them. Let’s look at how to do it.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你知道如何创建、搜索和修改文档，你只需要知道如何删除它们。让我们看看如何操作。
- en: Deleting documents in MongoDB
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB 中的文档删除
- en: Similar to `updateOne()` and `updateMany()`, there are the two class methods,
    namely `deleteOne(conditions, callback)` and `deleteMany(conditions, callback)`
    that allow you to delete the first document (`deleteOne()`) or all the documents
    (`deleteMany()`) that satisfy the conditions expressed.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `updateOne()` 和 `updateMany()` 类似，存在两个类方法，即 `deleteOne(conditions, callback)`
    和 `deleteMany(conditions, callback)`，允许你删除满足表达条件的第一个文档（`deleteOne()`）或所有文档（`deleteMany()`）。
- en: In addition, the instance method `doc.remove(callback)` also makes it possible
    to delete the `doc` document when it is in memory.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，实例方法 `doc.remove(callback)` 还使得在文档在内存中时删除 `doc` 文档成为可能。
- en: 'Let’s remove `Clinton` from the collection by using the `deleteOne()` method,
    then display the new contents of the collection:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `deleteOne()` 方法从集合中删除 `Clinton`，然后显示集合的新内容：
- en: Using deleteOne() to delete client “Clinton” (test.js file)
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 deleteOne() 删除客户端 "Clinton"（test.js 文件）
- en: '[PRE143]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: In the same way as for the `updateOne()` and `updateMany()` methods, it is the
    presence of the callback function that triggers the update of the database. If
    you do not indicate a callback function, you must in this case use the `then()`
    or `exec()` method following the `deleteOne()` or `deleteMany()` method.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `updateOne()` 和 `updateMany()` 方法类似，存在触发数据库更新的回调函数。如果你没有指定回调函数，你必须在这种情况下使用
    `then()` 或 `exec()` 方法，否则更新将不会发生。
- en: 'The result is displayed in the following figure:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下图所示：
- en: '![Figure 8.11 – Deleting the "Clinton" client with deleteOne()'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.11 – 使用 deleteOne() 删除 "Clinton" 客户端]'
- en: '](img/Figure_8.11_B17416.jpg)'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_8.11_B17416.jpg]'
- en: Figure 8.11 – Deleting the “Clinton” client with deleteOne()
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11 – 使用 deleteOne() 删除 “Clinton” 客户端
- en: The `response` object returned in the callback of the `deleteOne()` (or `deleteMany()`)
    method indicates the `deletedCount` field, which contains the number of documents
    deleted.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`deleteOne()`（或 `deleteMany()`）方法的回调函数返回的 `response` 对象指示 `deletedCount` 字段，其中包含删除的文档数量。'
- en: We have successively studied the four possible operations on documents in a
    MongoDB database, namely inserting, searching, modifying, and deleting documents.
    And with this, we come to the end of this chapter.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经依次研究了在 MongoDB 数据库中对文档的四种可能操作，即插入、搜索、修改和删除文档。至此，本章内容结束。
- en: Summary
  id: totrans-398
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Data management with MongoDB is relatively easy, thanks to the use of external
    modules such as mongoose. All possible actions on a database are easily achievable.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 由于使用了 mongoose 等外部模块，MongoDB 的数据管理相对简单，所有数据库上的可能操作都容易实现。
- en: The mongo utility, available when installing MongoDB, makes it easy to view
    collections and the documents they contain.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 当安装 MongoDB 时可用的 mongo 工具使得查看集合及其包含的文档变得容易。
- en: Using the MongoDB database is essential for building client-server applications
    and maintaining user information.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 MongoDB 数据库对于构建客户端-服务器应用程序和维护用户信息至关重要。
- en: All that’s left is to see how to interconnect a client side made with Vue.js
    and a server side made with Node.js. We will see this in the following chapter.
    We will build a 100% JavaScript application in order to show how simple and efficient
    it is.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的就是看看如何将用 Vue.js 开发的客户端与用 Node.js 开发的服务器端进行互连。我们将在下一章中看到这一点。我们将构建一个 100% 的
    JavaScript 应用程序，以展示其简单和高效。
