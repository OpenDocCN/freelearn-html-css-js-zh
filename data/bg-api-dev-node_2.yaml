- en: Building the API - Part 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建API - 第1部分
- en: This chapter is meant to introduce the students to API building using Node.js.
    We will start by building a basic HTTP server to gain an understanding of how
    Node.js works.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在介绍使用Node.js构建API。我们将从构建基本的HTTP服务器开始，以了解Node.js的工作原理。
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够：
- en: Implement a basic HTTP server using the Node.js built-in `http` module
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js内置的`http`模块实现一个基本的HTTP服务器
- en: Implement a basic Hapi.js setup for an API
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为API实现基本的Hapi.js设置
- en: Describe the basic HTTP verbs and how they differ from each other
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述基本的HTTP动词及其之间的区别
- en: Implement various routes for the API, making use of the different HTTP verbs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现使用不同的HTTP动词为API实现各种路由
- en: Implement logging the web application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现记录Web应用程序
- en: Validating API requests
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证API请求
- en: Building a Basic HTTP Server
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个基本的HTTP服务器
- en: Let's begin by looking at the basic building blocks of a Node.js web application.
    The built-in `http` module is the core of this. However, from the following example,
    you will also appreciate how basic this can be.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先来看一下Node.js Web应用程序的基本构建块。内置的`http`模块是其核心。但是，从以下示例中，您还将欣赏到这有多么基本。
- en: 'Save the following code in a file called `simple-server.js`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码保存在名为`simple-server.js`的文件中：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Use the `simple-server.js` file for your reference at `Code/Lesson-2`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Code/Lesson-2`中的`simple-server.js`文件作为参考。
- en: 'Now, let''s run the file:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行这个文件：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When we go to the browser and visit the URL in the example, this is what we
    get:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在浏览器中访问示例中的URL时，我们会得到以下内容：
- en: '![](img/00006.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00006.jpeg)'
- en: Setting up Hapi.js
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Hapi.js
- en: '**Hapi.js** (**HTTP API**), is a rich framework for building applications and
    services, focusing on writing reusable application logic. There are a number of
    other frameworks; notable among them is Express.js. However, from the ground up,
    Hapi.js is optimized for API building, and we will see this shortly when building
    our application.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hapi.js**（**HTTP API**），是一个用于构建应用程序和服务的丰富框架，专注于编写可重用的应用程序逻辑。还有许多其他框架；其中值得注意的是Express.js。但是，从头开始，Hapi.js被优化用于构建API，我们将在构建应用程序时很快看到这一点。'
- en: 'Exercise 1: Building a Basic Hapi.js Server'
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习1：构建一个基本的Hapi.js服务器
- en: In this exercise, we're going to build a basic HTTP server like the one before,
    but now with Hapi.js. You will notice how most of the things are done for us under
    the hood with Hapi.js. However, Hapi.js is also built on top of the `http` module.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将构建一个基本的HTTP服务器，就像之前那样，但现在使用Hapi.js。您会注意到大部分事情都是在Hapi.js的幕后为我们完成的。但是，Hapi.js也是建立在`http`模块之上的。
- en: 'For the rest of the exercises, from the first exercise of [Chapter 3](part0060.html#1P71O0-12af9adc04d045258c0a537819d419dc),
    *Building the API – Part 2*, we will be building on top of each exercise as we
    progress. So, we might need to go back and modify previous files and so forth:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于接下来的练习，从[第3章](part0060.html#1P71O0-12af9adc04d045258c0a537819d419dc)的第一个练习，《构建API
    - 第2部分》，我们将在每个练习中逐步构建。因此，我们可能需要返回并修改以前的文件等：
- en: In your `Lesson-2` folder, create a subfolder called `hello-hapi`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`Lesson-2`文件夹中，创建一个名为`hello-hapi`的子文件夹。
- en: Use the `exercise-b1` folder for your reference at `Code/Lesson-2`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Code/Lesson-2`中的`exercise-b1`文件夹作为参考。
- en: On the Terminal, change directory to the root of the `hello-hapi` folder.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端上，切换到`hello-hapi`文件夹的根目录。
- en: 'Initialize it as a basic Node.js project and run the following command:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其初始化为一个基本的Node.js项目，并运行以下命令：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Create a file, `server.js`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`server.js`的文件。
- en: 'Install Hapi.js by executing the following command:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令安装Hapi.js：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the file, write the following code:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中，编写以下代码：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Use the `server.js` file for your reference at `Code/Lesson-2/exercise-b1`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Code/Lesson-2/exercise-b1`中的`server.js`文件作为参考。
- en: 'Let us try to understand the code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试着理解这段代码：
- en: We first start by requiring the Hapi.js framework that we just included.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们首先通过要求我们刚刚包含的Hapi.js框架来开始。
- en: Recall our subtopic, *The Module System*, in [Chapter 1](part0019.html#I3QM0-12af9adc04d045258c0a537819d419dc),
    *Introduction to Node.js?* We looked at third-party modules—this is one of them.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下我们的子主题，《模块系统》，在[第1章](part0019.html#I3QM0-12af9adc04d045258c0a537819d419dc)，《Node.js简介》中？我们看了第三方模块——这是其中之一。
- en: We then create a server by initializing the Server class, hence a new `Hapi.Server()`.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们通过初始化Server类来创建一个服务器，因此是一个新的`Hapi.Server()`。
- en: We then bind that server on a specific host (`localhost`) and port (`8000`).
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后将该服务器绑定到特定的主机（`localhost`）和端口（`8000`）。
- en: 'After that, we create an example route, `/`. As you can see, for each route
    created, we have to specify three major things (as keys of an object passed to
    the `server.route` method):'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之后，我们创建一个示例路由，`/`。正如您所看到的，对于每个创建的路由，我们必须指定三个主要内容（作为传递给`server.route`方法的对象的键）：
- en: '`method`: This is the HTTP method for that route. We''re going to look more
    deeply at the types of HTTP verbs in a later section. For our example, we''re
    using GET. Basically, as the name suggests, this gets stuff/resources from the
    server.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`method`：这是该路由的HTTP方法。我们将在后面的部分更深入地了解HTTP动词的类型。对于我们的示例，我们使用GET。基本上，正如名称所示，这会从服务器获取资源。'
- en: '`path`: This is the path on the server to the particular resource we are getting.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path`：这是服务器上到达特定资源的路径。'
- en: '`handler`: This is a closure (anonymous function) that does the actual getting.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handler`：这是一个执行实际获取操作的闭包（匿名函数）。'
- en: We're going to look at another extra key, called `config`, in our main project.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的主项目中查看另一个额外的关键字，称为`config`。
- en: After this setup is done, we then start the server using the `server.start`
    method. This method accepts a closure (callback function) that is called once
    the server has started. In this function, we can check whether any errors occurred
    while starting the server.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成此设置后，我们使用`server.start`方法启动服务器。该方法接受一个闭包（回调函数），一旦服务器启动，就会调用该函数。在此函数中，我们可以检查启动服务器时是否发生了任何错误。
- en: 'Run the server by going to the Terminal, and run the following command:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到终端并运行以下命令来运行服务器：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should see this printed on the Terminal:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该在终端上看到这个打印出来：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should see something similar to this at `http://localhost:8000`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在`http://localhost:8000`看到类似于这样的东西：
- en: '![](img/00007.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00007.jpeg)'
- en: 'Open another Terminal, change directory to the same project folder, and run
    the same command, `node server.js`. We''ll get this error: `Error: listen EADDRINUSE
    127.0.0.1:8000`.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '打开另一个终端，更改目录到相同的项目文件夹，并运行相同的命令，`node server.js`。我们会收到此错误：`Error: listen EADDRINUSE
    127.0.0.1:8000`。'
- en: The reason we get this error is because we can only have one server running
    on a particular port of our host. Remember that the host IP `127.0.0.1` is what
    we refer to as `localhost`.  `if (err) throw err;` is the line which throws the
    error.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收到此错误的原因是因为我们的主机上只能运行一个特定端口的服务器。请记住，主机IP`127.0.0.1`是我们所谓的`localhost`。`if (err)
    throw err;`是抛出错误的行。
- en: 'We can fix this by changing the port number of our second server to something
    like `8001`. However, as best practice, other than keep changing the code, we
    can pass the port number as a Terminal argument, that is, running the app as,
    `node server.js <port-number>`, then changing our code (in the `port` section)
    to, `port: process.argv[2] || 8000,`.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以通过将第二个服务器的端口号更改为`8001`之类的内容来解决此问题。但是，最佳实践是，除了不断更改代码之外，我们可以将端口号作为终端参数传递，即运行应用程序为`node
    server.js <port-number>`，然后更改我们的代码（在`port`部分）为`port: process.argv[2] || 8000,`。'
- en: 'Here, we''re saying, if the port is provided as the first argument of the script,
    use that, otherwise, use `8000` as the port number. Now, when you run: `node server.js
    8002`, the server should run okay from `localhost:8002`.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们说，如果端口作为脚本的第一个参数提供，那么使用该端口，否则使用`8000`作为端口号。现在，当您运行：`node server.js 8002`时，服务器应该从`localhost:8002`正常运行。
- en: For the `process.argv` array, index `0` is the program running the script, node
    and index `1` is the script being run, `server.js`. Arguments passed to the script
    are therefore counted from index `2` onwards. You can read more about `process.argv`
    here later on.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`process.argv`数组，索引`0`是运行脚本的程序，node和索引`1`是正在运行的脚本，`server.js`。因此，传递给脚本的参数从索引`2`开始计算。您可以稍后在这里阅读有关`process.argv`的更多信息。
- en: Using an API Client
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用API客户端
- en: For us to utilize the client to the fullest, to be able to do all the request
    types (`GET`, `POST`, `UPDATE`, and so on), we will need to have an API client. There
    are a number out there, but we recommend either Postman ([https://www.getpostman.com/](https://www.getpostman.com/))
    or Insomnia ([https://insomnia.rest/](https://insomnia.rest/)). For our examples,
    we will be using Insomnia.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用客户端，能够执行所有请求类型（`GET`，`POST`，`UPDATE`等），我们需要一个API客户端。有很多选择，但我们建议使用Postman
    ([https://www.getpostman.com/](https://www.getpostman.com/))或Insomnia ([https://insomnia.rest/](https://insomnia.rest/))。在我们的示例中，我们将使用Insomnia。
- en: 'After installing Insomnia, add a GET request to `http://localhost:8000`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Insomnia后，添加一个GET请求到`http://localhost:8000`：
- en: 'We will begin by creating a *request* page for Insomnia, where we will be making
    all of our requests:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先创建一个用于Insomnia的*请求*页面，我们将在其中进行所有请求：
- en: '![](img/00008.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00008.jpeg)'
- en: 'Enter a name for the new request:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为新请求输入名称：
- en: '![](img/00009.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00009.jpeg)'
- en: 'We will then make our request by typing the route and clicking on Send:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将通过输入路由并单击发送来发出我们的请求：
- en: '![](img/00010.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00010.jpeg)'
- en: When we change the type from GET to POST, and click on Send, we get a 404 error
    because, on our server, we currently have only the GET method defined for route
    `/`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将类型从GET更改为POST并单击发送时，我们会收到404错误，因为在我们的服务器上，我们目前只为路由`/`定义了GET方法。
- en: Returning JSON Strings
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 返回JSON字符串
- en: As we are now building our API, we need a formal way of representing our data
    in our request, by sending or receiving it. **JavaScript Object Notation** (**JSON**)
    is the conventional data-interchange format for REST APIs.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在正在构建我们的API，我们需要一种正式的方式来表示我们的请求中的数据，通过发送或接收它。**JavaScript对象表示法**（**JSON**）是REST
    API的传统数据交换格式。
- en: One thing to note about JSON is that it started from JavaScript and is now widely
    adopted across other languages. So, when it comes to Node.js, you will see how
    using JSON becomes so easy and natural.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 关于JSON的一件事需要注意的是，它起源于JavaScript，现在已被广泛采用于其他语言。因此，当涉及到Node.js时，您将看到如何使用JSON变得如此简单和自然。
- en: 'Exercise 2: Returning JSON'
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习2：返回JSON
- en: Let's go back to our `server.js` file from *Exercise 1*, *Building a Basic Hapi.js*
    *Server*.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回到我们的`server.js`文件，从*练习1*，*构建基本的Hapi.js* *服务器*。
- en: Use the `exercise-b2` folder for your reference at `Code/Lesson-2`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`exercise-b2`文件夹作为`Code/Lesson-2`的参考。
- en: 'To return JSON for our `/` route, all we need to change is our returned string
    to an object:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为我们的`/`路由返回JSON，我们需要更改的只是我们返回的字符串为一个对象：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Stop the server by going to the Terminal where the server is running and pressing
    *Ctrl* + *C*. Then, start the server again to effect the changes by running the
    following command:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到运行服务器的终端并按下*Ctrl* + *C*来停止服务器。然后，通过运行以下命令再次启动服务器以生效更改：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now go back to Insomnia and do another GET request. You can see that this is
    effectively changed into a JSON string:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在返回到Insomnia并进行另一个GET请求。您可以看到这实际上已更改为JSON字符串：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This comes out-of-the-box in Hapi.js, while with some frameworks, such as Express.js,
    you have to use a `json` function to do the conversion.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这在Hapi.js中是开箱即用的，而在某些框架中，例如Express.js，您必须使用`json`函数进行转换。
- en: Using nodemon for Development Workflow
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用nodemon进行开发工作流
- en: You will have noticed that, after making the changes in first exercise, we had
    to go back and stop the server and start over again. Doing this every time you
    make a change to your code becomes very cumbersome. Luckily, tooling comes to
    our rescue.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，在第一个练习中进行更改后，我们不得不返回并停止服务器，然后重新开始。每次更改代码时都这样做变得非常麻烦。幸运的是，工具可以拯救我们。
- en: There is a Node.js package called `nodemon`, which can help restart the server
    automatically whenever there is a change in our files.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为`nodemon`的Node.js包，它可以在我们的文件发生更改时自动帮助重新启动服务器。
- en: 'Exercise 3: Using nodemon'
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习3：使用nodemon
- en: 'In this exercise, we''re going to introduce a Node module known as `nodemon`,
    which we will be using to run our web server. This makes it possible for the server
    to automatically reload when we make changes to it, therefore avoiding the tediousness
    of stopping the server and starting it over again manually whenever we make changes
    to our server:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将介绍一个名为`nodemon`的Node模块，我们将使用它来运行我们的Web服务器。这使得服务器在我们对其进行更改时可以自动重新加载，因此避免了在我们对服务器进行更改时手动停止服务器并重新启动服务器的繁琐过程：
- en: Go back to the Terminal and stop the server (press *Ctrl + C*), then run the
    following command.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回终端并停止服务器（按*Ctrl + C*），然后运行以下命令。
- en: 'We will need to install this package globally (remember that you might need
    some administrative rights, so in Unix systems, you need to run the command as
    `sudo`):'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要全局安装这个包（记住您可能需要一些管理权限，所以在Unix系统中，您需要以`sudo`身份运行命令）：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once installation is complete, we can run with `nodemon`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以使用`nodemon`运行：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should get something like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会得到类似这样的东西：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Setting up the Logger
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置日志记录
- en: Logging is a very important component of any web application. We need a way
    of preserving the history of the server so that we can come back any time and
    see how it was serving requests.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录是任何Web应用程序的非常重要的组成部分。我们需要一种方式来保存服务器的历史记录，以便我们随时可以回来查看它是如何处理请求的。
- en: And, most of all, you don't want logging to be an afterthought, only being implemented
    after you come across a production bug that makes your web app crash when you
    are trying to figure out where the problem is exactly.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，您不希望日志记录成为事后才考虑的事情，只有在您遇到生产错误时才实施，这会使您的Web应用程序在您试图找出问题所在时崩溃。
- en: Hapi.js has a minimal logging functionality built in, but if you need an extensive
    one, a good example is called **good** ([https://github.com/hapijs/good](https://github.com/hapijs/good)).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Hapi.js内置了最小的日志功能，但如果您需要一个广泛的日志功能，一个很好的例子叫做**good**（[https://github.com/hapijs/good](https://github.com/hapijs/good)）。
- en: 'Exercise 4: Setting up the Logger'
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习4：设置日志记录
- en: 'In this exercise, we''re going to add a logging mechanism on the web server
    we have created, so that each request and server activity can be easily tracked
    through the logs:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将在我们创建的Web服务器上添加一个日志记录机制，以便可以通过日志轻松跟踪每个请求和服务器活动：
- en: 'Let''s go back to our project from *Exercise 2: Returning JSON*.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回到*练习2：返回JSON*的项目。
- en: Use the `exercise-b4` folder for your reference at `Code/Lesson-2`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Code/Lesson-2`中的`exercise-b4`文件夹作为参考。
- en: 'We first need to install a couple of packages that will help with our logging
    (`good` and `good-console`). Run the following command:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要安装一些将帮助我们记录日志的包（`good`和`good-console`）。运行以下命令：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`good-console` is what we call a write stream. There are other write streams
    that work with good, but, for simplicity, we won''t look at them. You can check
    [https://github.com/hapijs/good](https://github.com/hapijs/good) for more information.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`good-console`是我们称之为写入流的东西。有其他与good一起工作的写入流，但为简单起见，我们不会去看它们。您可以查看[https://github.com/hapijs/good](https://github.com/hapijs/good)获取更多信息。'
- en: 'We will then modify our `server.js` code to configure our logging. First, by
    requiring good just after Hapi.js:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将修改我们的`server.js`代码来配置我们的日志记录。首先，在Hapi.js之后要求好：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, registering it with the server just before we start the server:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在启动服务器之前将其注册到服务器上：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Use the `server.js` file for your reference at `Code/Lesson-2/exercise-b4`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Code/Lesson-2/exercise-b4`中的`server.js`文件作为参考。
- en: 'If you are still running the server with `nodemon`, by now, you will start
    seeing the server logs being updated periodically on the Terminal; something similar
    to:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您仍在使用`nodemon`运行服务器，现在您将开始在终端上定期看到服务器日志被更新；类似于：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, go back to Insomnia and try to do another GET request on `localhost:8000/`.
    You will see an extra log has been created showing the time the request was made
    (`timestamp`), the route, the method (`get`), the status code (`200`), and the
    time taken for the request:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回Insomnia并尝试在`localhost:8000/`上进行另一个GET请求。您将看到已创建一个额外的日志，显示了请求的时间（`时间戳`），路由，方法（`get`），状态代码（`200`）以及请求所花费的时间：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The time taken comes in very handy when you are trying to optimize the performance
    of your server, seeing which requests take longer than expected to be served.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当您尝试优化服务器的性能时，所花费的时间非常有用，可以看到哪些请求花费的时间比预期的长。
- en: Understanding Requests
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解请求
- en: Let's have a look at the concept of request and the different HTTP request methods.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看请求的概念和不同的HTTP请求方法。
- en: A Look at HTTP Request Methods
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看HTTP请求方法
- en: Having set up our server, we are ready to start building our API. The routes
    are basically what constitute the actual API.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好服务器后，我们准备开始构建我们的API。路由基本上构成了实际的API。
- en: 'We will first look at HTTP request methods (sometimes referred to as *HTTP
    verbs*), then apply them to our API using a simple *todo list* example. We will
    look at five major ones:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先查看HTTP请求方法（有时称为*HTTP动词*），然后使用一个简单的*待办事项列表*示例将它们应用到我们的API中。我们将查看五个主要的方法：
- en: '`GET`: Requests a representation of the specified resource. Requests using
    `GET` should only retrieve data, and should not be used to make changes to resources.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET`：请求指定资源的表示。使用`GET`的请求应该只检索数据，不应该用于对资源进行更改。'
- en: '`POST`: Is used to submit an entry to a specified resource, often causing a
    change of state.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST`：用于向指定资源提交条目，通常会导致状态的改变。'
- en: '`PUT`: Replaces all current representations of the target resource with the
    request payload.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT`：用请求有效负载替换目标资源的所有当前表示。'
- en: '`DELETE`: Deletes the specified resource.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`：删除指定的资源。'
- en: '`PATCH`: Used to apply partial modifications to a resource.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PATCH`：用于对资源应用部分修改。'
- en: In the following exercises, we're going to rewrite our previous code where we
    had hardcoded our data so that we can work with real and dynamic data coming directly
    from the database.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，我们将重写之前的代码，其中我们已经将数据硬编码，以便我们可以使用直接来自数据库的真实和动态数据进行操作。
- en: Exercise 5: Getting a List of Resources
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习5：获取资源列表
- en: 'Let''s go back to the project from *Exercise 4: Setting up the Logger*.'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回到*练习4：设置日志记录*的项目。
- en: Use the `exercise-c1` folder for your reference at `Code/Lesson-2`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`exercise-c1`文件夹作为你在`Code/Lesson-2`的参考。
- en: Since we are going to have various routes, it would be prudent to now split
    our routes to a separate file for the sake of organization. Within the project,
    create a subfolder called `routes`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为我们将有各种路由，现在将路由分割到一个单独的文件中以便组织是明智的。在项目中，创建一个名为`routes`的子文件夹。
- en: Inside the created folder, create a file called `todo.js`. In `todo.js`, this
    is where we are going to have all our routes for the `todo` resource. This file
    (module) will export a list of routes.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建的文件夹中，创建一个名为`todo.js`的文件。在`todo.js`中，这是我们将为`todo`资源拥有所有路由的地方。这个文件（模块）将导出一个路由列表。
- en: 'Let''s start by doing a simple route that returns a list of todos on a `GET`
    request:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从一个简单的路由开始，它在`GET`请求上返回一个待办事项列表：
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Use the `todo.js` file for your reference at `Code/Lesson-2/exercise-c1/routes`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`todo.js`文件作为你在`Code/Lesson-2/exercise-c1/routes`的参考。
- en: 'We then go back to our `server.js` file, require the `todo` route module, and
    register it with our server using the `server.route` method:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们回到我们的`server.js`文件，要求`todo`路由模块，并使用`server.route`方法在服务器上注册它：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Use the `server.js` file for your reference at `Code/Lesson-2/exercise-c1`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`server.js`文件作为你在`Code/Lesson-2/exercise-c1`的参考。
- en: 'Using Insomnia, do a `GET` request to `http://localhost:8000/todo`. You should
    see this returned:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Insomnia，对`http://localhost:8000/todo`发出`GET`请求。你应该看到这个返回：
- en: '![](img/00011.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00011.jpeg)'
- en: 'Exercise 6: Getting a Specific Resource'
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习6：获取特定资源
- en: Now, let's try and get a specific todo. Since we don't have a database with
    IDs, we will take the indices to be IDs, `[0]` being `1`, and so on.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试获取一个特定的待办事项。因为我们没有带有ID的数据库，我们将把索引视为ID，`[0]`为`1`，依此类推。
- en: Use the `exercise-c1` folder for your reference at `Code/Lesson-2`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`exercise-c1`文件夹作为你在`Code/Lesson-2`的参考。
- en: 'Let''s add a route for that. Notice that we use `{<parameter-key>}` as a way
    of passing request parameters to our `route` function, then get it through `request.params.id`:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为此添加一个路由。注意我们使用`{<parameter-key>}`作为将请求参数传递给我们的`route`函数的一种方式，然后通过`request.params.id`获取它：
- en: '[PRE20]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Use the `todo.js` file for your reference at `Code/L``esson-2/exercise-c1/routes`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`todo.js`文件作为你在`Code/Lesson-2/exercise-c1/routes`的参考。
- en: 'Go to Insomnia and do a `GET` request to `http://localhost:8000/todo/1`. You
    should see this:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Insomnia，对`http://localhost:8000/todo/1`发出`GET`请求。你应该看到这个：
- en: '![](img/00012.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00012.jpeg)'
- en: 'Exercise 7: Creating a New Todo with POST'
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习7：使用POST创建新的待办事项
- en: 'Now let''s add a new todo. This is where `POST` comes in. A `POST` request
    should always come with a payload which is the data that is being *posted*. We
    will add a new route to handle this:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们添加一个新的待办事项。这就是`POST`的用武之地。`POST`请求应该始终带有一个负载，这是被*发布*的数据。我们将添加一个新的路由来处理这个：
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Use the `todo.js` file for your reference at `Code/Lesson-2/exercise-c1/routes`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`todo.js`文件作为你在`Code/Lesson-2/exercise-c1/routes`的参考。
- en: 'On Insomnia:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于失眠：
- en: 'Change the request type to POST:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将请求类型改为POST：
- en: '![](img/00013.jpeg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00013.jpeg)'
- en: 'Change the request body to JSON:'
  id: totrans-151
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将请求体改为JSON：
- en: '![](img/00014.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00014.jpeg)'
- en: 'Add the request body and the URL appropriately:'
  id: totrans-153
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 适当添加请求体和URL：
- en: '![](img/00015.jpeg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00015.jpeg)'
- en: 'When you post the request, you should see this as the response:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你发送请求时，你应该看到这个作为响应：
- en: '[PRE22]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, when you do a `GET` request to `http://localhost:8000/todo`, you should
    see the newly created todo appear as part of the response:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当你对`http://localhost:8000/todo`发出`GET`请求时，你应该看到新创建的待办事项出现在响应中：
- en: '[PRE23]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Exercise 8: Updating a Resource with PUT'
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习8：使用PUT更新资源
- en: 'If we wanted to update, say, the first todo list, conventionally, `PUT` requires
    us to send the whole updated todo resource. Now let''s create a `PUT` route:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要更新，比如说，第一个待办事项列表，按照惯例，`PUT`要求我们发送整个更新后的待办事项资源。现在让我们创建一个`PUT`路由：
- en: '[PRE25]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Use the `todo.js` file for your reference at `Code/Lesson-2/exercise-c1/routes`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`todo.js`文件作为你在`Code/Lesson-2/exercise-c1/routes`的参考。
- en: 'Now go to Insomnia and make the request. Remember to change the request type
    to PUT:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在去Insomnia发出请求。记得把请求类型改为PUT：
- en: '![](img/00016.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00016.jpeg)'
- en: 'You should see the following response:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下响应：
- en: '[PRE26]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And when you do a `GET` on `http://localhost:8000/todo/1`, you should get the
    updated resource:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在`http://localhost:8000/todo/1`上执行`GET`时，你应该得到更新后的资源：
- en: '![](img/00017.jpeg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00017.jpeg)'
- en: 'Exercise 9: Updating with PATCH'
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习9：使用PATCH更新
- en: 'You will realize that, in our previous exercise, we had to post the whole resource
    just to change a part of it. A better way of doing this is using `PATCH`, so that
    the payload only contains what is required. Let''s now create a `PATCH` route:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会意识到，在我们之前的练习中，我们不得不发布整个资源才能改变其中的一部分。这样做的更好方法是使用`PATCH`，这样负载只包含所需的内容。现在让我们创建一个`PATCH`路由：
- en: '[PRE27]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Use the `todo.js` file for your reference at `Code/Lesson-2/exercise-c1/routes`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`todo.js`文件作为你在`Code/Lesson-2/exercise-c1/routes`的参考。
- en: 'Now, you can provide any of the keys and their values, and they will be updated
    respectively. For example, make the following request, only changing the title
    of the first todo:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以提供任何键和它们的值，它们将分别更新。例如，发出以下请求，只改变第一个待办事项的标题：
- en: '![](img/00018.jpeg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00018.jpeg)'
- en: 'You should get the following response:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该得到以下响应：
- en: '[PRE28]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'And when you do a `GET` on `http://localhost:8000/todo/1`, you should get the
    updated resource:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在`http://localhost:8000/todo/1`上执行`GET`时，你应该得到更新后的资源：
- en: '![](img/00019.jpeg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00019.jpeg)'
- en: 'Exercise 10: Deleting a Resource with DELETE'
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习10：使用DELETE删除资源
- en: 'When we want to delete a resource, we use the `DELETE` method. Let''s create
    a `DELETE` route:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们想要删除一个资源时，我们使用`DELETE`方法。让我们创建一个`DELETE`路由：
- en: '[PRE29]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Use the `exercise-c1` folder for your reference at `Code/Lesson-2`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`exercise-c1`文件夹作为你在`Code/Lesson-2`的参考。
- en: 'Now go to Insomnia and test it—you should get this response:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在去Insomnia测试一下——你应该得到这个响应：
- en: '![](img/00020.jpeg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00020.jpeg)'
- en: 'Now try accessing the previously deleted resources—you should get a `404` error.
    However, in our previous `GET` route (in *Exercise 6: Getting a Specific Resource*),
    we did not cater for this, so let''s go and make a modification to our `GET: /todo/{id}
    route`:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在尝试访问先前删除的资源-您应该会收到`404`错误。但是，在我们之前的`GET`路由（在*练习6：获取特定资源*中），我们没有考虑到这一点，所以让我们去修改我们的`GET：/todo/{id}路由`：
- en: '[PRE30]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Use the `todo.js` file for your reference at `Code/Lesson-2/exercise-c1/routes`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Code/Lesson-2/exercise-c1/routes`中使用`todo.js`文件作为您的参考。
- en: Don't worry about the status code, `404`, if you have never come across it.
    We are going to go through the major status codes in our last subsection of this
    section.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从未遇到过状态码`404`，请不要担心。我们将在本节的最后一个小节中介绍主要的状态码。
- en: Remember, the server will reload this time, therefore, the deleted resource
    will still be brought back, so go back and repeat *step 2*.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记住，服务器将重新加载，因此已删除的资源仍将被带回，因此返回并重复*步骤2*。
- en: 'When you now do a `GET` request to `http://localhost:8000/todo/1`, you should
    see this:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当您对`http://localhost:8000/todo/1`进行`GET`请求时，您应该看到这个：
- en: '[PRE31]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Short Closing Note on Insomnia
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Insomnia的简短结语
- en: You should be able to access all your previous requests under History. Click
    on the Time icon in the top-right corner.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够在历史记录下找到所有以前的请求。单击右上角的时间图标。
- en: Request Validation
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求验证
- en: We will need to validate the incoming requests to make sure that they conform
    to what the server can handle.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要验证传入的请求，以确保它们符合服务器可以处理的内容。
- en: This is one of the places I see Hapi.js shining above other frameworks. In Hapi.js,
    you hook in validation as a configuration object as part of the `route` object.
    For validation, we will use the Joi library, which works well with Hapi.js.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我看到Hapi.js在其他框架上闪耀的地方之一。在Hapi.js中，您可以将验证作为`route`对象的一部分的配置对象来挂钩。对于验证，我们将使用Joi库，它与Hapi.js很好地配合。
- en: 'Exercise 11: Validating a Request'
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习11：验证请求
- en: 'In this exercise, we are going to see the concept of *request validation* in
    action. We will write a validation for one of the routes as an example, but the
    same could be applied across the other routes:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将看到*请求验证*的概念。我们将为其中一个路由编写一个示例验证，但同样的方法也可以应用于其他路由：
- en: 'For example, if we go back to the `POST` route from *Exercise 1: Building a
    Basic Hapi.js Server*, we can post an empty payload and still get status code
    `200!` Clearly, we need a way of validating this.'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，如果我们回到*练习1：构建基本的Hapi.js服务器*中的`POST`路由，我们可以发布一个空的有效载荷，仍然可以获得状态码`200！`显然，我们需要一种验证的方法。
- en: 'Let''s start by installing Joi:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从安装Joi开始：
- en: '[PRE32]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Use the `exercise-c2` folder for your reference at `Code/Lesson-2`.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Code/Lesson-2`的`exercise-c2`文件夹中使用。
- en: 'In the `routes/todo.js` file, we need to require Joi and then modify our post
    route by adding a `config.validate` key to the `route` object:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes/todo.js`文件中，我们需要要求Joi，然后通过向`route`对象添加`config.validate`键来修改我们的post路由：
- en: '[PRE33]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Use the `todo.js` file for your reference at `Code/Lesson-2/exercise-c1/routes`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Code/Lesson-2/exercise-c1/routes`中使用`todo.js`文件作为您的参考。
- en: 'When we try to submit an empty payload, we now get error `400`:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们尝试提交一个空的有效载荷时，我们现在会收到错误`400`：
- en: '![](img/00021.jpeg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00021.jpeg)
- en: 'That is, until we provide a title for the todo, since a title is required:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样，直到我们为待办事项提供一个标题，因为标题是必需的：
- en: '![](img/00022.jpeg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00022.jpeg)
- en: Joi is a full-fledged validation library with many options for how to use it.
    In this exercise, we just touched on a basic example.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Joi是一个功能齐全的验证库，有许多选项可供使用。在这个练习中，我们只是涉及了一个基本的例子。
- en: 'You validate any part of the request by coming up with the respective key/value
    pair within the validate key and its respective type:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在验证键及其相应类型中提出相应的键/值对来验证请求的任何部分：
- en: '`payload` (for request payloads, as in the preceding exercise), `params` (for
    request params), and `query` (for query params).'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`有效载荷`（用于请求有效载荷，如前面的练习中），`params`（用于请求参数）和`query`（用于查询参数）。'
- en: 'For example, for the request, `GET: /todo/:id`, if we want to validate that
    the ID is an integer, we will add this `config` object:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于请求`GET：/todo/:id`，如果我们想验证ID是否为整数，我们将添加这个`config`对象：
- en: '`config: {`'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`config: {`'
- en: '`  validate:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`  验证：'
- en: '{`'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '{`'
- en: '`    params:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`    params：'
- en: '{`'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '{`'
- en: '`      id: Joi.number()`'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`      id: Joi.number()`'
- en: '`    }`'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`    }`'
- en: '`  }'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`  }'
- en: '}`'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '}`'
- en: 'More details on Joi can be found here: [https://github.com/hapijs/joi](https://github.com/hapijs/joi).'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Joi的更多详细信息，请访问：[https://github.com/hapijs/joi](https://github.com/hapijs/joi)。
- en: Summary
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has covered initial part of building our API with Node.js. We started
    by looking at a basic HTTP server built with only the built-in HTTP module, for
    us to appreciate the basic building blocks of a Node.js web application. We then
    introduced doing the same thing with the Hapi.js framework.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了使用Node.js构建API的初始部分。我们首先查看了仅使用内置的HTTP模块构建的基本HTTP服务器，以便我们能够欣赏Node.js Web应用程序的基本构建块。然后我们介绍了使用Hapi.js框架做同样的事情。
- en: We then went through various HTTP verbs (request methods) by example as we built
    our basic API with Hapi.js. Those were `GET`, `POST`, `PUT`, `PATCH`, and `DELETE`.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过示例讨论了各种HTTP动词（请求方法），并使用Hapi.js构建了我们的基本API。这些是`GET`，`POST`，`PUT`，`PATCH`和`DELETE`。
- en: We also covered some fundamental concepts of web applications, such as logging,
    using good and request validation, and using Joi.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了一些Web应用程序的基本概念，如日志记录，使用良好的请求验证和Joi的使用。
