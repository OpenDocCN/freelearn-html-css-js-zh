- en: Chapter 1. Object-Oriented JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 面向对象的JavaScript
- en: Ever since the early days of the web, there has been a need for more dynamic
    and responsive interfaces. While it's OK to read static HTML pages of text, and
    even better when they are beautifully presented with the help of CSS, it's much
    more fun to engage with applications in our browsers, such as e-mail, calendars,
    banking, shopping, drawing, playing games, and text editing. All that is possible
    thanks to JavaScript, the programming language of the web. JavaScript started
    with simple one-liners embedded in HTML, but is now used in much more sophisticated
    ways. Developers leverage the object-oriented nature of the language to build
    scalable code architectures made up of reusable pieces.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自从网络早期以来，就需要更动态和响应式的界面。虽然阅读静态的HTML文本页面是可以的，而且当它们在CSS的帮助下以美观的方式呈现时更好，但与浏览器中的应用程序互动，如电子邮件、日历、银行、购物、绘图、玩游戏和文本编辑，则更有趣。所有这些都得益于JavaScript，这是网络编程语言。JavaScript最初是嵌入HTML中的简单单行代码，但现在以更复杂的方式被使用。开发者利用语言的面向对象特性来构建由可重用组件组成的可扩展代码架构。
- en: If you look at the past and present buzzwords in web development, DHTML, Ajax,
    Web 2.0, HTML5, they all essentially mean HTML, CSS, and JavaScript-HTML for **content**,
    CSS for **presentation**, and JavaScript for **behavior**. In other words, JavaScript
    is the glue that makes everything work together so that we can build rich web
    applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看看网络开发的过去和现在的热门词汇，DHTML、Ajax、Web 2.0、HTML5，它们本质上都意味着HTML、CSS和JavaScript——HTML用于**内容**，CSS用于**表现**，JavaScript用于**行为**。换句话说，JavaScript是使一切协同工作的粘合剂，使我们能够构建丰富的网络应用程序。
- en: However, that's not all; JavaScript can be used for more than just the web.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这还不是全部；JavaScript可以用于不仅仅是网络。
- en: JavaScript programs run inside a host environment. The web browser is the most
    common environment, but it's not the only one. Using JavaScript, you can create
    all kinds of widgets, application extensions, and other pieces of software, as
    you'll see in a bit. Taking the time to learn JavaScript is a smart investment;
    you learn one language and can then write all kinds of different applications
    running on multiple platforms, including mobile and server-side applications.
    These days, it's safe to say that JavaScript is everywhere.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript程序在宿主环境中运行。网络浏览器是最常见的环境，但并非唯一。使用JavaScript，你可以创建各种小工具、应用程序扩展和其他软件组件，正如你很快就会看到的。花时间学习JavaScript是一种明智的投资；你学习一种语言，然后可以编写在多个平台上运行的各种不同应用程序，包括移动端和服务器端应用程序。如今，可以说JavaScript无处不在。
- en: This book starts from zero, and does not assume any prior programming knowledge
    other than some basic understanding of HTML. Although there is one chapter dedicated
    to the web browser environment, the rest of the book is about JavaScript in general,
    so it's applicable to all environments.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书从零开始，不假设任何先前的编程知识，除了对HTML的基本理解。尽管书中有一章专门介绍网络浏览器环境，但本书的其余部分都是关于JavaScript的通用知识，因此适用于所有环境。
- en: 'Let''s start with the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下内容开始：
- en: A brief introduction to the story behind JavaScript
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript背后的故事的简要介绍
- en: The basic concepts you'll encounter in discussions on object-oriented programming
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将在面向对象编程讨论中遇到的的基本概念
- en: A bit of history
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一点历史
- en: Initially, the web was not much more than just a number of scientific publications
    in the form of static HTML documents connected together with hyperlinks. Believe
    it or not, there was a time when there was no way to put an image in a page. However,
    that soon changed. As the web grew in popularity and size, the webmasters who
    were creating HTML pages felt they needed something more. They wanted to create
    richer user interactions, mainly driven by the desire to save server round trips
    for simple tasks such as form validation. Two options came up-Java applets and
    LiveScript, a language conceived by Brendan Eich at *Netscape* in 1995 and later
    included in the Netscape 2.0 browser under the name of JavaScript.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，网络只不过是一系列以静态HTML文档形式存在的科学出版物，通过超链接相互连接。信不信由你，曾经有一段时间，无法在页面上放置图片。然而，这种情况很快发生了变化。随着网络的普及和规模的扩大，创建HTML页面的网络管理员感到他们需要更多东西。他们希望创建更丰富的用户交互，主要是由简化如表单验证等简单任务的服务器往返次数的需求驱动的。出现了两种选择——Java小程序和LiveScript，这是一种由Brendan
    Eich在1995年的Netscape公司构思的语言，后来在Netscape 2.0浏览器中以JavaScript的名称包含在内。
- en: The applets didn't quite catch on, but JavaScript did. The ability to use short
    code snippets embedded in HTML documents and alter otherwise static elements of
    a web page was embraced by the webmaster community. Soon, the competing browser
    vendor, Microsoft, shipped **Internet Explorer** (**IE**) 3.0 with JScript, which
    was a reverse engineered version of JavaScript plus some IE-specific features.
    Eventually, there was an effort to standardize the various implementations of
    the language, and this is how ECMAScript was born. **European Computer Manufacturers
    Association** (**ECMA**) created the standard called ECMA-262, which describes
    the core parts of the JavaScript programming language without browser and web
    page-specific features.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 小程序并没有真正流行起来，但 JavaScript 则不然。能够在 HTML 文档中嵌入简短的代码片段并改变网页上原本静态的元素，这一能力得到了网站管理员社区的欢迎。不久，竞争浏览器供应商微软推出了带有
    JScript 的 **Internet Explorer** (**IE**) 3.0，这是一个对 JavaScript 的逆向工程版本，并增加了一些 IE
    特有的功能。最终，人们努力使语言的多种实现标准化，这就是 ECMAScript 诞生的原因。**欧洲计算机制造商协会** (**ECMA**) 制定了名为
    ECMA-262 的标准，该标准描述了 JavaScript 编程语言的核心部分，不包括浏览器和网页特定的功能。
- en: 'You can think of JavaScript as a term that encompasses the following three
    pieces:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 JavaScript 视为一个包含以下三个部分的术语：
- en: '**ECMAScript**: The core language-variables, functions, loops, and so on. This
    part is independent of the browser and this language can be used in many other
    environments.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ECMAScript**: 核心语言——变量、函数、循环等。这部分与浏览器无关，这种语言可以在许多其他环境中使用。'
- en: '**Document Object Model** (**DOM**): This provides ways to work with HTML and
    XML documents. Initially, JavaScript provided limited access to what''s scriptable
    on the page, mainly forms, links, and images. Later, it was expanded to make all
    elements scriptable. This led to the creation of the DOM standard by the **World
    Wide Web Consortium** (**W3C**) as a language-independent (no longer tied to JavaScript)
    way to manipulate structured documents.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档对象模型** (**DOM**): 这提供了处理 HTML 和 XML 文档的方法。最初，JavaScript 只提供了对页面可脚本化内容的有限访问，主要是表单、链接和图像。后来，它被扩展到使所有元素都可以被脚本化。这导致了
    **万维网联盟** (**W3C**) 创建 DOM 标准，作为一种与语言无关（不再与 JavaScript 相关联）的方式来操作结构化文档。'
- en: '**Browser Object Model** (**BOM**): This is a set of objects related to the
    browser environment and was never part of any standard until HTML5 started standardizing
    some of the common objects that exist across browsers.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览器对象模型** (**BOM**): 这是一组与浏览器环境相关的对象，直到 HTML5 开始标准化跨浏览器存在的某些常见对象之前，它从未成为任何标准的一部分。'
- en: While there is one chapter in this book dedicated to the browser, the DOM, and
    the BOM, most of this book describes the core language and teaches you skills
    you can use in any environment where JavaScript programs run.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这本书中有一章专门介绍浏览器、DOM 和 BOM，但本书的大部分内容描述了核心语言，并教你可以在任何 JavaScript 程序运行的环境中使用的技能。
- en: Browser wars and renaissance
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器战争与复兴
- en: For better or for worse, JavaScript's instant popularity happened during the
    period of the browser wars I (approximately 1996 to 2001). Those were the times
    during the initial Internet boom when the two major browser vendors, Netscape
    and Microsoft, were competing for market share. Both were constantly adding more
    bells and whistles to their browsers and their versions of JavaScript, DOM, and
    BOM, which naturally led to many inconsistencies. While adding more features,
    the browser vendors were falling behind on providing proper development and debugging
    tools and adequate documentation. Often, development was a pain; you would write
    a script while testing in one browser, and once you're done with development,
    you test in the other browser, only to find that your script simply fails for
    no apparent reason, and the best you can get is a cryptic error message, such
    as operation aborted.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不管是好事还是坏事，JavaScript 的即时流行发生在浏览器战争 I（大约 1996 年至 2001 年）期间。那是在互联网初期繁荣时期，当时两大浏览器供应商，网景和微软，为了市场份额而竞争。两者都在不断为他们的浏览器及其版本的
    JavaScript、DOM 和 BOM 增加更多功能。这自然导致了许多不一致性。在增加更多功能的同时，浏览器供应商在提供适当的开发和调试工具以及充足的文档方面落后了。通常，开发过程很痛苦；你会在一个浏览器中编写脚本并进行测试，一旦开发完成，你会在另一个浏览器中进行测试，结果发现你的脚本没有任何明显原因地失败了，你能得到的最好的结果就是一条神秘的错误信息，例如操作已中止。
- en: Inconsistent implementations, missing documentation, and no appropriate tools
    painted JavaScript in such a light that many programmers simply refused to bother
    with it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 不一致的实现、缺失的文档和缺乏适当的工具，使得 JavaScript 在这样的背景下显得黯淡无光，许多程序员甚至不愿去理会它。
- en: On the other hand, developers who did try to experiment with JavaScript got
    a little carried away, adding too many special effects to their pages without
    much regard of how usable the end results were. Developers were eager to make
    use of every new possibility the browsers provided, and ended up enhancing their
    web pages with things such as animations in the status bar, flashing colors, blinking
    texts, objects stalking your mouse cursor, and many other innovations that actually
    hurt the user experience. These various ways to abuse JavaScript are now mostly
    gone, but they were one of the reasons why the language had something of a bad
    reputation. Many serious programmers dismissed JavaScript as nothing but a toy
    for designers to play around with, and dismissed it as a language unsuitable for
    serious applications. The JavaScript backlash caused some web projects to completely
    ban any client-side programming and trust only their predictable and tightly controlled
    server. And really, why would you double the time to deliver a finished product
    and then spend additional time debugging problems with the different browsers?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，那些试图尝试使用 JavaScript 的开发者有些过于冲动，他们在页面上添加了过多的特效，而很少考虑最终结果的可用性。开发者们急于利用浏览器提供的每一个新功能，结果在网页上添加了诸如状态栏动画、闪烁的颜色、闪烁的文本、跟随鼠标光标的对象等许多创新，这些实际上损害了用户体验。这些滥用
    JavaScript 的各种方式现在大多已经消失，但它们是导致这种语言有某种不良声誉的原因之一。许多严肃的程序员将 JavaScript 视为设计师们玩耍的小玩具，并认为它不适合用于严肃的应用程序。JavaScript
    的反动导致一些网络项目完全禁止任何客户端编程，并只信任他们可预测且严格控制的服务器。实际上，为什么要将交付成品的时间加倍，然后花额外的时间调试不同浏览器的问题呢？
- en: 'Everything changed in the years following the end of the browser wars I. A
    number of events reshaped the web development landscape in a positive way. Some
    of them are given as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器战争结束后的几年里，一切都发生了变化。一些事件以积极的方式重塑了网络开发格局。其中一些如下：
- en: Microsoft won the war with the introduction of IE6, the best browser at the
    time, and for many years they stopped developing Internet Explorer. This allowed
    time for other browsers to catch up and even surpass IE's capabilities.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软通过推出当时最好的浏览器 IE6 赢得了战争，此后多年他们停止了 Internet Explorer 的开发。这为其他浏览器追赶甚至超越 IE 的功能提供了时间。
- en: The movement for web standards was embraced by developers and browser vendors
    alike. Naturally, developers didn't like having to code everything two (or more)
    times to account for browsers' differences; therefore, they liked the idea of
    having agreed-upon standards that everyone would follow.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络标准运动得到了开发者和浏览器供应商的普遍欢迎。自然，开发者们不喜欢为了应对浏览器的差异而不得不两次（或更多次）编写代码；因此，他们喜欢有一个大家都同意的标准，这样每个人都会遵循。
- en: Developers and technologies matured and more people started caring about things
    such as usability, progressive enhancement techniques, and accessibility. Tools
    such as Firebug made developers much more productive and the development less
    of a pain.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者和技术成熟了，越来越多的人开始关注诸如可用性、渐进增强技术和可访问性等问题。例如 Firebug 这样的工具使开发者们的工作效率大大提高，开发过程不再那么痛苦。
- en: In this healthier environment, developers started finding out new and better
    ways to use the instruments that were already available. After the public release
    of applications such as Gmail and Google Maps, which were rich on client-side
    programming, it became clear that JavaScript is a mature, unique in certain ways,
    and powerful prototypal object-oriented language. The best example of its rediscovery
    was the wide adoption of the functionality provided by the `XMLHttpRequest` object,
    which was once an IE-only innovation, but was then implemented by most other browsers.
    `XMLHttpRequest` object allows JavaScript to make HTTP requests and get fresh
    content from the server in order to update some parts of a page without a full
    page reload. Due to the wide use of the `XMLHttpRequest` object, a new breed of
    desktop-like web applications, dubbed Ajax applications, was born.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个更健康的环境中，开发者们开始发现使用现有工具的新方法和更好的方式。在 Gmail 和 Google Maps 等客户端编程丰富的应用程序公开发布之后，这些应用程序的发布表明
    JavaScript 是一种成熟、在某些方面独特的强大原型面向对象语言。其重新发现的最佳例子是 `XMLHttpRequest` 对象功能的广泛采用，这个对象最初是
    IE 独有的创新，但后来被大多数其他浏览器实现。`XMLHttpRequest` 对象允许 JavaScript 发送 HTTP 请求并从服务器获取新鲜内容，以更新页面的一些部分而无需完全重新加载页面。由于
    `XMLHttpRequest` 对象的广泛使用，一种新的类似桌面应用程序的 Web 应用程序诞生了，被称为 Ajax 应用程序。
- en: The present
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现在
- en: 'An interesting thing about JavaScript is that it always runs inside a host
    environment. The web browser is just one of the available hosts. JavaScript can
    also run on the server, on the desktop, and on mobile devices. Today, you can
    use JavaScript to do all of the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关于JavaScript的一个有趣之处在于它总是在宿主环境中运行。网页浏览器只是众多可用宿主之一。JavaScript也可以在服务器、桌面和移动设备上运行。今天，你可以使用JavaScript完成以下所有任务：
- en: Create rich and powerful web applications (the kind of applications that run
    inside the web browser). Additions to HTML5, such as application cache, client-side
    storage, and databases, make browser programming more and more powerful for both
    online and offline applications. Powerful additions to Chrome WebKit also include
    support for service workers and browser push notifications.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建丰富强大的Web应用程序（在网页浏览器中运行的应用程序）。HTML5的补充，如应用缓存、客户端存储和数据库，使浏览器编程对在线和离线应用程序都越来越强大。Chrome
    WebKit的强大补充还包括对服务工作者和浏览器推送通知的支持。
- en: Write server-side code using `Node.js`, as well as code that can run using Rhino
    (a JavaScript engine written in Java).
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Node.js`编写服务器端代码，以及可以使用Rhino（用Java编写的JavaScript引擎）运行的代码。
- en: Make mobile applications; you can create apps for iPhone, Android, and other
    phones and tablets entirely in JavaScript using **PhoneGap** or **Titanium**.
    Additionally, apps for Firefox OS for mobile phones are entirely in JavaScript,
    HTML, and CSS. React Native from Facebook is an exciting new way to develop native
    iOS, Android, and Windows (experimental) applications using JavaScript.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发移动应用程序；你可以使用**PhoneGap**或**Titanium**完全用JavaScript为iPhone、Android和其他手机和平板电脑创建应用程序。此外，为移动手机的Firefox
    OS开发的应用程序完全使用JavaScript、HTML和CSS。Facebook的React Native是一个令人兴奋的新方法，使用JavaScript开发原生iOS、Android和Windows（实验性）应用程序。
- en: Create rich media applications, such as Flash or Flex, using ActionScript, which
    is based on ECMAScript.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于ECMAScript的ActionScript创建丰富的媒体应用程序，如Flash或Flex。
- en: Write command-line tools and scripts that automate administrative tasks on your
    desktop using **Windows Scripting Host** (**WSH**) or WebKit's **JavaScriptCore**,
    which is available on all Macs.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写命令行工具和脚本，使用**Windows Scripting Host**（**WSH**）或所有Mac上可用的WebKit的**JavaScriptCore**来自动化桌面上的管理任务。
- en: Write extensions and plugins for a plethora of desktop applications, such as
    Dreamweaver, Photoshop, and most other browsers.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Dreamweaver、Photoshop和大多数其他浏览器编写扩展和插件。
- en: Create cross-operating system desktop applications using Mozilla's **XULRunner**
    and **Electron**. Electron is used to build some of the most popular apps on the
    desktop, such as Slack, Atom, and Visual Studio Code.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mozilla的**XULRunner**和**Electron**创建跨操作系统的桌面应用程序。Electron被用于构建桌面上的许多最受欢迎的应用程序，例如Slack、Atom和Visual
    Studio Code。
- en: '**Emscripten**, on the other hand, allows code written in C/C++ to be compiled
    into an `asm.js` format, which can then be run inside a browser.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Emscripten**，另一方面，允许用C/C++编写的代码编译成`asm.js`格式，然后可以在浏览器中运行。'
- en: Testing frameworks like **PhantomJS** are programmed using JavaScript.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript编写的测试框架，如**PhantomJS**。
- en: This is by no means an exhaustive list. JavaScript started inside web pages,
    but today it's safe to say it is practically everywhere. In addition, browser
    vendors now use speed as a competitive advantage and are racing to create the
    fastest JavaScript engines, which is great for both users and developers, and
    opens doors for even more powerful uses of JavaScript in new areas such as image,
    audio and video processing, and games development.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这绝对不是一份详尽的列表。JavaScript最初是在网页中使用的，但今天可以说它几乎无处不在。此外，浏览器供应商现在将速度作为竞争优势，竞相创建最快的JavaScript引擎，这对用户和开发者来说都是一件好事，并为JavaScript在图像、音频和视频处理以及游戏开发等新领域的更强大用途打开了大门。
- en: The future
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来
- en: We can only speculate what the future will be, but it's quite certain that it
    will include JavaScript. For quite some time, JavaScript may have been underestimated
    and underused (or maybe overused in the wrong ways), but every day, we witness
    new applications of the language in much more interesting and creative ways. It
    all started with simple one-liners, often embedded in HTML tag attributes, such
    as `onclick`. Nowadays, developers ship sophisticated, well-designed and architected,
    and extensible applications and libraries, often supporting multiple platforms
    with a single codebase. JavaScript is indeed taken seriously, and developers are
    starting to rediscover and enjoy its unique features more and more.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只能推测未来会怎样，但可以肯定的是，它将包括JavaScript。在相当长的一段时间里，JavaScript可能被低估和未充分利用（或者可能以错误的方式过度使用），但每天都有新的应用方式出现，这些方式更加有趣和富有创意。这一切都始于简单的单行代码，通常嵌入在HTML标签属性中，例如`onclick`。如今，开发者们发布了复杂、设计良好且架构合理的应用程序和库，通常使用单一代码库支持多个平台。JavaScript确实被认真对待，开发者们开始越来越多地重新发现并享受其独特的特性。
- en: Once listed in the nice-to-have sections of job postings, today, knowledge of
    JavaScript is often a deciding factor when it comes to hiring web developers.
    Common job interview questions you can hear today include-Is JavaScript an object-oriented
    language? Good. Now, how do you implement inheritance in JavaScript? After reading
    this book, you'll be prepared to ace your JavaScript job interview and even impress
    your interviewers with some bits that, maybe, they didn't know.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经在招聘启事中列为“希望拥有”的部分，如今，JavaScript的知识通常在招聘网页开发者时是一个决定性因素。你今天可能会听到的一些常见面试问题是——JavaScript是一种面向对象的语言吗？很好。现在，你是如何在JavaScript中实现继承的？阅读这本书后，你将准备好在JavaScript面试中表现出色，甚至可能会用一些他们可能不知道的细节来给面试官留下深刻印象。
- en: ECMAScript 5
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ECMAScript 5
- en: The last most important milestone in ECMAScript revisions was **ECMAScript 5**
    (**ES5**), officially accepted in December 2009\. ECMAScript 5 standard is implemented
    and supported on all major browsers and server-side technologies.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript修订的最后一个最重要的里程碑是**ECMAScript 5**（**ES5**），于2009年12月正式接受。ECMAScript
    5标准在所有主要浏览器和服务器端技术中得到实现和支持。
- en: ES5 was a major revision because apart from several important syntactic changes
    and additions to the standard libraries, ES5 also introduced several new constructs
    in the language.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ES5是一个重大的修订，因为它除了几个重要的语法更改和标准库的扩展之外，还引入了语言中的几个新结构。
- en: 'For instance, ES5 introduced some new objects and properties, and also the
    so-called **strict** mode. Strict mode is a subset of the language that excludes
    deprecated features. The strict mode is opt-in and not required, meaning that
    if you want your code to run in the strict mode, you will declare your intention
    using (once per function, or once for the whole program) the following string:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，ES5引入了一些新的对象和属性，还引入了所谓的**严格模式**。严格模式是语言的一个子集，排除了已弃用的特性。严格模式是可选的，不是必需的，这意味着如果你想让你的代码在严格模式下运行，你将使用以下字符串（每个函数一次，或整个程序一次）来声明你的意图：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is just a JavaScript string, and it's ok to have strings floating around
    unassigned to any variable. As a result, older browsers that don't speak ES5 will
    simply ignore it, so this strict mode is backwards compatible and won't break
    older browsers.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个JavaScript字符串，保留未分配给任何变量的字符串是可以的。因此，不支持ES5的旧浏览器将简单地忽略它，所以这种严格模式是向后兼容的，不会破坏旧浏览器。
- en: For backwards compatibility, all the examples in this book work in ES3, but
    at the same time, all the code in the book is written so that it will run without
    warnings in ES5's strict mode. Additionally, any ES5-specific parts will be clearly
    marked. [Appendix C](apc.html "Appendix C. Built-in Objects"), *Built-in Objects*,
    lists the new additions to ES5 in detail.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持向后兼容性，本书中的所有示例都适用于ES3，但与此同时，本书中的所有代码都是按照能够在ES5严格模式下无警告运行的方式来编写的。此外，任何特定的ES5部分都将被明确标注。[附录C](apc.html
    "附录 C. 内置对象")，*内置对象*，详细列出了ES5中新增的内容。
- en: Strict mode in ES6
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ES6中的严格模式
- en: While strict mode is optional in ES5, all ES6 modules and classes are strict
    by default. As you will see soon, most of the code we write in ES6 resides in
    a module; hence, strict mode is enforced by default. However, it is important
    to understand that all other constructs do not have implicit strict mode enforced.
    There were efforts to make newer constructs, such as arrow and generator functions,
    to also enforce strict mode, but it was later decided that doing so would result
    in very fragmented language rules and code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在ES5中严格模式是可选的，但所有ES6模块和类默认都是严格的。正如你很快就会看到的，我们大多数在ES6中编写的代码都位于模块中；因此，严格模式默认生效。然而，重要的是要理解，所有其他构造并没有隐式地强制执行严格模式。曾有人努力使新的构造，如箭头函数和生成器函数，也强制执行严格模式，但后来决定这样做会导致语言规则和代码非常碎片化。
- en: ECMAScript 6
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ECMAScript 6
- en: ECMAScript 6 revision took a long time to finish and was finally accepted on
    June 17, 2015\. ES6 features are slowly becoming part of major browsers and server
    technologies. It is possible to use transpilers to compile ES6 to ES5 and use
    the code on environments that do not yet support ES6 completely (we will discuss
    transpilers in detail later).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 6的修订历时很久，最终于2015年6月17日被接受。ES6功能正逐渐成为主流浏览器和服务器技术的组成部分。我们可以使用转译器将ES6编译为ES5，并在尚未完全支持ES6的环境中运行代码（我们将在后面详细讨论转译器）。
- en: 'ES6 substantially upgrades JavaScript as a language and brings in very exciting
    syntactical changes and language constructs. Broadly, there are two kinds of fundamental
    changes in this revision of ECMAScript, which are as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: ES6在语言层面上对JavaScript进行了大幅升级，并引入了许多令人兴奋的语法变化和语言结构。总的来说，ECMAScript这次修订中包含两种基本变化，具体如下：
- en: Improved syntax for existing features and editions to the standard library;
    for example, classes and promises
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有特性和标准库的改进；例如，类和Promise
- en: New language features; for example, generators
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的语言特性；例如，生成器
- en: ES6 allows you to think differently about your code. New syntax changes can
    let you write code that is cleaner, easier to maintain, and does not require special
    tricks. The language itself now supports several constructs that required third-party
    modules earlier. Language changes introduced in ES6 need a serious rethink in
    the way we have been coding in JavaScript.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: ES6让你能够以不同的方式思考你的代码。新的语法变化可以使你编写的代码更简洁、更容易维护，并且不需要特殊技巧。语言本身现在支持一些之前需要第三方模块才能实现的构造。ES6中引入的语言变化需要我们对JavaScript的编码方式进行严肃的反思。
- en: A note on the nomenclature-ECMAScript 6, ES6, and ECMAScript 2015 are the same,
    but used interchangeably.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 关于命名法的说明——ECMAScript 6、ES6和ECMAScript 2015是相同的，但可以互换使用。
- en: Browser support for ES6
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器对ES6的支持
- en: The majority of the browsers and server frameworks are on their way towards
    implementing ES6 features. You can check out the what is supported and what is
    not by clicking [http://kangax.github.io/compat-table/es6/](http://kangax.github.io/compat-table/es6/).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数浏览器和服务器框架都在朝着实现ES6功能的方向发展。你可以通过点击[http://kangax.github.io/compat-table/es6/](http://kangax.github.io/compat-table/es6/)来查看支持和不支持的功能。
- en: Though ES6 is not fully supported on all browsers and server frameworks, we
    can start using almost all features of ES6 with the help of **transpilers**. Transpilers
    are source-to-source compilers. ES6 transpilers allow you to write code in ES6
    syntax and compile/transform them into equivalent ES5 syntax, which can then be
    run on browsers that do not support the entire range of ES6 features.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然ES6并非所有浏览器和服务器框架都完全支持，但我们可以借助**转译器**来使用ES6的几乎所有功能。转译器是源到源的编译器。ES6转译器允许你使用ES6语法编写代码，并将它们编译/转换成等价的ES5语法，这样就可以在不支持ES6全部功能的浏览器上运行。
- en: The defacto ES6 transpiler at the moment is Babel. In this book, we will use
    Babel and write and test our examples.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 目前事实上的ES6转译器是Babel。在这本书中，我们将使用Babel来编写和测试我们的示例。
- en: Babel
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Babel
- en: Babel supports almost all ES6 features out of the box or with custom plugins.
    Babel can be used from a wide range of build systems, frameworks, and languages
    to template engines, and has a good command line and **read-eval-print loop**
    (**REPL**) built in.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Babel几乎支持所有ES6功能，或者通过自定义插件来实现。Babel可以从各种构建系统、框架和语言中用于模板引擎，并且内置了良好的命令行和**读取-评估-打印循环**（**REPL**）。
- en: To get a good idea about how Babel transpiles ES6 code to its ES5 equivalent
    form, head over to Babel REPL ([http://babeljs.io/repl/](http://babeljs.io/repl/)).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Babel如何将ES6代码转换为其ES5等价形式，请访问Babel REPL（[http://babeljs.io/repl/](http://babeljs.io/repl/)）。
- en: 'Babel REPL allows you to quickly test small snippets of ES6\. When you open
    Babel REPL in the browser, you will see some ES6 code defaulted there. On the
    left pane, remove the code and type in the following text:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Babel REPL允许你快速测试ES6的小片段。当你打开浏览器中的Babel REPL时，你会看到一些默认的ES6代码。在左侧面板中，删除代码并输入以下文本：
- en: '[PRE1]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When you type this and tab out of the left pane, you will see REPL transpiling
    this ES6 code into something like the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入这段代码并从左侧面板中按Tab键退出时，你会看到REPL将这段ES6代码转换成类似以下代码的形式：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is the ES5 equivalent of the code we wrote earlier in the left pane. You
    can see that the resulting code in the right pane is a familiar ES5\. As we said,
    Babel REPL is a good place to try and experiment with various ES6 constructs.
    However, we need babel to automatically transpile your ES6 code into ES5, and
    for that, you can include Babel into your existing build systems or frameworks.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在左侧面板中编写的代码的ES5等价物。你可以看到右侧面板中的结果代码是熟悉的ES5。正如我们所说的，Babel REPL是一个尝试和实验各种ES6构造的好地方。然而，我们需要babel自动将你的ES6代码转换为ES5，为此，你可以将Babel包含到现有的构建系统或框架中。
- en: 'Let''s begin by installing Babel as a command-line tool. For this, we will
    assume that you are familiar with node and **Node Package Manager** (**npm**).
    Installing Babel using `npm` is easy. Let''s first create a directory where we
    will have Babel installed as a module and rest of the source code. On my Mac,
    the following commands will create a directory called `babel_test`, initialize
    the project using `npm init`, and install Babel command line using `npm`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从将Babel作为命令行工具安装开始。为此，我们假设你熟悉node和**Node包管理器**（**npm**）。使用`npm`安装Babel很简单。让我们首先创建一个目录，我们将在这个目录中将Babel作为模块安装，并将其余的源代码放在那里。在我的Mac上，以下命令将创建一个名为`babel_test`的目录，使用`npm
    init`初始化项目，并使用`npm`安装Babel命令行：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you are familiar with `npm`, you may get tempted to install Babel globally.
    However, installing Babel as a global module is not generally a good idea. Once
    you have installed Babel in your project, your `package.json` file will look something
    like the following block of code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉`npm`，你可能会被诱惑全局安装Babel。然而，将Babel作为全局模块安装通常不是一个好主意。一旦你在项目中安装了Babel，你的`package.json`文件将类似于以下代码块：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can see a development dependency created for Babel for version > 6.10.1\.
    You can use Babel to transpile your code by either invoking it from the command
    line or as part of the build step. For any non-trivial work, you will need the
    later approach. To invoke Babel as part of the project build step, you can add
    a `build` step invoking Babel inside your script tag to your `package.json` file,
    for example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到为Babel创建的开发依赖项，适用于版本> 6.10.1。你可以通过从命令行调用它或将它作为构建步骤的一部分来使用Babel转换你的代码。对于任何非平凡的工作，你都需要后一种方法。要将Babel作为项目构建步骤的一部分来调用，你可以在`package.json`文件中添加一个调用Babel的`build`步骤，例如：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When you do npm build, Babel will be invoked on your `src` directory and the
    transpiled code will be placed inside `lib` directory. Alternatively, you can
    run Babel manually also by writing the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当你执行npm构建时，Babel将会在你的`src`目录上运行，并将转换后的代码放置在`lib`目录中。或者，你也可以通过以下命令手动运行Babel：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We will talk about various Babel options and plugins later in the book. This
    section will equip you to start exploring ES6.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的后面部分讨论各种Babel选项和插件。本节将帮助你开始探索ES6。
- en: Object-oriented programming
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象编程
- en: 'Before diving into JavaScript, let''s take a moment to review what people mean
    when they say object-oriented, and what the main features of this programming
    style are. Here''s a list of concepts that are most often used when talking about
    **object-oriented programming** (**OOP**):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入JavaScript之前，让我们花一点时间回顾一下人们说面向对象时所指的含义，以及这种编程风格的主要特点。以下是在谈论**面向对象编程**（**OOP**）时最常使用的概念列表：
- en: Object, method, and property
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象、方法和属性
- en: Class
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类
- en: Encapsulation
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封装
- en: Aggregation
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合
- en: Reusability/inheritance
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可重用性/继承
- en: Polymorphism
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多态
- en: Let's take a closer look into each one of these concepts. If you're new to the
    object-oriented programming lingo, these concepts might sound too theoretical,
    and you might have trouble grasping or remembering them from one reading. Don't
    worry, it does take a few tries, and the subject can be a little dry at a conceptual
    level. However, we'll look at plenty of code examples further on in the book,
    and you'll see that things are much simpler in practice.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地研究这些概念中的每一个。如果你对面向对象编程的术语不熟悉，这些概念可能听起来过于理论化，你可能难以从一次阅读中掌握或记住它们。不用担心，这确实需要尝试几次，在概念层面上，这个主题可能有点枯燥。然而，我们将在本书的后面部分看到大量的代码示例，你会发现实际操作要简单得多。
- en: Objects
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象
- en: As the name object-oriented suggests, objects are important. An object is a
    representation of a thing (someone or something), and this representation is expressed
    with the help of a programming language. The thing can be anything, a real-life
    object, or a more convoluted concept. Taking a common object, a cat, for example,
    you can see that it has certain characteristics-color, name, weight, and so on
    and can perform some actions-meow, sleep, hide, escape, and so on. The characteristics
    of the object are called properties in OOP-speak, and the actions are called methods.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如同面向对象的名字所暗示的，对象很重要。对象是事物的表示（某人或某物），这种表示是通过编程语言来表达的。事物可以是任何东西，现实生活中的物体，或者更复杂的概念。以一个常见的物体，比如猫为例，你可以看到它具有某些特征——颜色、名字、体重等等，并且可以执行某些动作——喵喵叫、睡觉、躲藏、逃跑等等。在面向对象中，这些特征被称为属性，而动作被称为方法。
- en: 'The analogy with the spoken language are as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 与口语的类比如下：
- en: Objects are most often named using nouns, such as book, person, and so on
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象通常使用名词命名，例如书、人等等
- en: Methods are verbs, for example, read, run, and so on
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法是动词，例如，读取、运行等等
- en: Values of the properties are adjectives
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性的值是形容词
- en: Take the sentence "The black cat sleeps on the mat" as an example. "The cat"
    (a noun) is the object, "black" (adjective) is the value of the color property,
    and "sleep" (a verb) is an action or a method in OOP. For the sake of the analogy,
    we can go a step further and say that "on the mat" specifies something about the
    action "sleep", so it's acting as a parameter passed to the `sleep` method.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以句子 "The black cat sleeps on the mat" 为例。 "The cat"（名词）是宾语，"black"（形容词）是颜色属性的价值，而
    "sleep"（动词）是面向对象中的动作或方法。为了类比，我们可以更进一步地说，“on the mat”指定了关于动作“sleep”的某些信息，因此它充当传递给
    `sleep` 方法的参数。
- en: Classes
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类
- en: In real life, similar objects can be grouped based on some criteria. A hummingbird
    and an eagle are both birds, so they can be classified as belonging to some made-up
    `Birds` class. In OOP, a class is a blueprint or a recipe for an object. Another
    name for object is instance, so we can say that the eagle is one concrete instance
    of the general `Birds` class. You can create different objects using the same
    class because a class is just a template, while the objects are concrete instances
    based on the template.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实生活中，可以根据某些标准将类似的对象分组。蜂鸟和鹰都是鸟，所以它们可以被归类为属于某个虚构的 `Birds` 类。在面向对象中，类是对象的蓝图或配方。对象的另一个名称是实例，所以我们可以这样说，鹰是通用
    `Birds` 类的一个具体实例。你可以使用相同的类创建不同的对象，因为类只是一个模板，而对象是基于模板的具体实例。
- en: There's a difference between JavaScript and the classic OO languages such as
    C++ and Java. You should be aware right from the start that in JavaScript, there
    are no classes; everything is based on objects. JavaScript has the notion of prototypes,
    which are also objects (we'll discuss them later in detail). In a classic OO language,
    you'd say something like-create a new object for me called `Bob`, which is of
    class `Person`. In a prototypal OO language, you'd say-I'm going to take this
    object called Bob's dad that I have lying around (on the couch in front of the
    TV?) and reuse it as a prototype for a new object that I'll call `Bob`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 与经典面向对象语言（如 C++ 和 Java）之间存在差异。你应该从一开始就意识到，在 JavaScript 中，没有类；一切都是基于对象的。JavaScript
    有原型的概念，它们也是对象（我们将在后面详细讨论）。在经典面向对象语言中，你会说创建一个名为 `Bob` 的新对象，它属于 `Person` 类。在原型面向对象语言中，你会说——我将使用这个名为
    Bob 的父亲对象，它就在我身边（在电视前的沙发上？）并作为新对象的原型来重用它，我将称之为 `Bob`。
- en: Encapsulation
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 封装
- en: 'Encapsulation is another OOP related concept, which illustrates the fact that
    an object contains (encapsulates) the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 封装是另一个与面向对象相关的概念，它说明了对象包含（封装）以下内容：
- en: Data (stored in properties)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据（存储在属性中）
- en: The means to do something with the data (using methods)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据的方法（使用方法）
- en: One other term that goes together with encapsulation is information hiding.
    This is a rather broad term and can mean different things, but let's see what
    people usually mean when they use it in the context of OOP.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 与封装一起使用的另一个术语是信息隐藏。这是一个相当宽泛的术语，可以指不同的事情，但让我们看看当人们在OOP的上下文中使用它时通常意味着什么。
- en: Imagine an object, say, an MP3 player. You, as the user of the object, are given
    some interface to work with, such as buttons, display, and so on. You use the
    interface in order to get the object to do something useful for you, like play
    a song. How exactly the device is working on the inside, you don't know, and,
    most often, don't care. In other words, the implementation of the interface is
    hidden from you. The same thing happens in OOP when your code uses an object by
    calling its methods. It doesn't matter if you coded the object yourself or it
    came from some third-party library; your code doesn't need to know how the methods
    work internally. In compiled languages, you can't actually read the code that
    makes an object work. In JavaScript, because it's an interpreted language, you
    can see the source code, but the concept is still the same-you work with the object's
    interface without worrying about its implementation.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个对象，比如说，一个MP3播放器。作为该对象的使用者，你被赋予了与对象交互的一些接口，例如按钮、显示屏等。你使用这个接口来让对象为你做些有用的事情，比如播放一首歌曲。你并不知道设备内部是如何工作的，而且，大多数情况下，你也不关心。换句话说，接口的实现对你来说是隐藏的。在面向对象编程（OOP）中，当你的代码通过调用对象的方法来使用对象时，情况也是一样的。无论你是自己编写的对象，还是来自某个第三方库的对象，你的代码都不需要知道方法是如何内部工作的。在编译型语言中，实际上你不能阅读使对象工作的代码。在JavaScript中，因为它是一种解释型语言，你可以看到源代码，但概念仍然是相同的——你与对象的接口打交道，而不必担心其实现。
- en: Another aspect of information hiding is the visibility of methods and properties.
    In some languages, objects can have `public`, `private`, and `protected` methods
    and properties. This categorization defines the level of access the users of the
    object have. For example, only the methods of the same object have access to the
    `private` methods, while anyone has access to the `public` ones. In JavaScript,
    all methods and properties are `public`, but we'll see that there are ways to
    protect the data inside an object and achieve privacy.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 信息隐藏的另一个方面是方法和属性的可见性。在某些语言中，对象可以有`public`、`private`和`protected`方法和属性。这种分类定义了对象使用者可以访问的级别。例如，只有同一对象的方法可以访问`private`方法，而任何人都可以访问`public`方法。在JavaScript中，所有方法和属性都是`public`的，但我们将看到有方法可以保护对象内部的数据并实现隐私。
- en: Aggregation
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 聚合
- en: Combining several objects into a new one is known as aggregation or composition.
    It's a powerful way to separate a problem into smaller and more manageable parts
    (divide and conquer). When a problem scope is so complex that it's impossible
    to think about it at a detailed level in its entirety, you can separate the problem
    into several smaller areas, and possibly then separate each of these into even
    smaller chunks. This allows you to think about the problem on several levels of
    abstraction.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 将几个对象组合成一个新的对象被称为聚合或组合。这是一种强大的方法，可以将问题分解成更小、更易于管理的部分（分而治之）。当一个问题的范围如此复杂，以至于无法在整体上详细思考时，你可以将问题分解成几个较小的区域，然后可能再将每个区域进一步分解成更小的部分。这样，你就可以在几个抽象级别上思考问题。
- en: Take, for example, a personal computer. It's a complex object. You cannot think
    about all the things that need to happen when you start your computer. But, you
    can abstract the problem saying that you need to initialize all the separate objects
    that your `Computer` object consists of the `Monitor` object, the `Mouse` object,
    the `Keyboard` object, and so on. Then, you can dive deeper into each of the subobjects.
    This way, you're composing complex objects by assembling reusable parts.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以个人电脑为例。它是一个复杂的对象。当你启动电脑时，你不能思考所有需要发生的事情。但是，你可以抽象这个问题，说你需要初始化你的`Computer`对象所包含的所有单独的对象，比如`Monitor`对象、`Mouse`对象、`Keyboard`对象等。然后，你可以深入到每个子对象中。这样，你通过组装可重用部分来组合复杂的对象。
- en: To use another analogy, a `Book` object can contain (aggregate) one or more
    `Author` objects, a `Publisher` object, several `Chapter` objects, a `TOC` (table
    of contents), and so on.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用另一个类比，一个`Book`对象可以包含（聚合）一个或多个`Author`对象，一个`Publisher`对象，几个`Chapter`对象，一个`TOC`（目录），等等。
- en: Inheritance
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继承
- en: Inheritance is an elegant way to reuse existing code. For example, you can have
    a generic object, `Person`, which has properties such as `name` and `date_of_birth`,
    and which also implements the `walk`, `talk`, `sleep`, and `eat` functionality.
    Then, you figure out that you need another object called `Programmer`. You can
    reimplement all the methods and properties that a `Person` object has, but it
    will be smarter to just say that the `Programmer` object inherits a `Person` object,
    and save yourself some work. The `Programmer` object only needs to implement more
    specific functionality, such as the `writeCode` method, while reusing all of the
    `Person` object's functionality.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 继承是重用现有代码的一种优雅方式。例如，你可以有一个通用的对象 `Person`，它具有 `name` 和 `date_of_birth` 等属性，并且实现了
    `walk`、`talk`、`sleep` 和 `eat` 功能。然后，你发现你需要另一个名为 `Programmer` 的对象。你可以重新实现 `Person`
    对象的所有方法和属性，但更明智的做法是直接说 `Programmer` 对象继承了一个 `Person` 对象，这样就可以节省一些工作。`Programmer`
    对象只需要实现更具体的功能，例如 `writeCode` 方法，同时重用 `Person` 对象的所有功能。
- en: In classical OOP, classes inherit from other classes, but in JavaScript, as
    there are no classes, objects inherit from other objects.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在经典面向对象编程中，类继承自其他类，但在 JavaScript 中，因为没有类，对象继承自其他对象。
- en: When an object inherits from another object, it usually adds new methods to
    the inherited ones, thus extending the old object. Often, the following phrases
    can be used interchangeably-B inherits from A and B extends A. Also, the object
    that inherits can pick one or more methods and redefine them, customizing them
    for its own needs. This way, the interface stays the same and the method name
    is the same, but when called on the new object, the method behaves differently.
    This way of redefining how an inherited method works is known as **overriding**.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个对象从另一个对象继承时，它通常会向继承的方法中添加新的方法，从而扩展旧对象。通常，以下短语可以互换使用——B 继承自 A，B 扩展 A。此外，继承的对象可以选择一个或多个方法并重新定义它们，以适应其自身需求。这样，接口保持不变，方法名也相同，但当在新的对象上调用时，方法的行为会不同。这种重新定义继承方法的方式被称为
    **重写**。
- en: Polymorphism
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多态
- en: In the preceding example, a `Programmer` object inherited all of the methods
    of the parent `Person` object. This means that both objects provide a `talk` method,
    among others. Now imagine that somewhere in your code, there's a variable called
    `Bob`, and it just so happens that you don't know if `Bob` is a `Person` object
    or a `Programmer` object. You can still call the `talk` method on the `Bob` object
    and the code will work. This ability to call the same method on different objects,
    and have each of them respond in their own way, is called polymorphism.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，`Programmer` 对象继承了父 `Person` 对象的所有方法。这意味着这两个对象都提供了 `talk` 方法等。现在想象一下，在你的代码中有一个名为
    `Bob` 的变量，而你恰好不知道 `Bob` 是一个 `Person` 对象还是一个 `Programmer` 对象。你仍然可以在 `Bob` 对象上调用
    `talk` 方法，并且代码会正常工作。这种在不同的对象上调用相同的方法，并且每个对象都以自己的方式响应的能力被称为多态。
- en: OOP summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象编程总结
- en: 'Here''s a quick table summarizing the concepts discussed so far:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个快速表格，总结了迄今为止讨论的概念：
- en: '| **Feature** | **Illustrates concept** |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| **特性** | **说明概念** |'
- en: '| Bob is a man (an object). | Objects |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| Bob 是一个男人（一个对象）。 | 对象 |'
- en: '| Bob''s date of birth is June 1, 1980, gender - male, and hair - black. |
    Properties |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| Bob 的出生日期是 1980 年 6 月 1 日，性别 - 男，头发 - 黑色。 | 属性 |'
- en: '| Bob can eat, sleep, drink, dream, talk, and calculate his own age. | Methods
    |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| Bob 可以吃饭、睡觉、喝水、做梦、说话，并计算自己的年龄。 | 方法 |'
- en: '| Bob is an instance of the `Programmer` class. | Class (in classical OOP)
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| Bob 是 `Programmer` 类的一个实例。 | 类（在经典面向对象编程中） |'
- en: '| Bob is based on another object called `Programmer`. | Prototype(in prototypal
    OOP) |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| Bob 基于另一个名为 `Programmer` 的对象。 | 原型（在原型式面向对象编程中） |'
- en: '| Bob holds data, such as `birth_date`, and methods that work with the data,
    such as `calculateAge()`. | Encapsulation |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| Bob 拥有数据，如 `birth_date`，以及与数据一起工作的方法，如 `calculateAge()`。 | 封装 |'
- en: '| You don''t need to know how the calculation method works internally. The
    object might have some private data, such as the number of days in February in
    a leap year. You don''t know, nor do you want to know. | Information hiding |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 你不需要知道计算方法内部是如何工作的。对象可能有一些私有数据，例如闰年二月份的天数。你不知道，也不想知道。 | 信息隐藏 |'
- en: '| Bob is part of a `WebDevTeam` object together with Jill, a `Designer` object,
    and Jack, a `ProjectManager` object. | Aggregation and composition |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| Bob 与 Jill（一个 `Designer` 对象）、Jack（一个 `ProjectManager` 对象）一起是 `WebDevTeam`
    对象的一部分。 | 聚合和组合 |'
- en: '| `Designer`, `ProjectManager`, and `Programmer` are all based on and extend
    a `Person` object. | Inheritance |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `Designer`、`ProjectManager` 和 `Programmer` 都基于并扩展了 `Person` 对象。 | 继承 |'
- en: '| You can call the methods `Bob.talk()`, `Jill.talk()`, and `Jack.talk()`,
    and they''ll all work fine, albeit producing different results. Bob will probably
    talk more about performance, Jill about beauty, and Jack about deadlines. Each
    object inherited the method talk from Person and customized it. | Polymorphism
    and method overriding |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 您可以调用方法 `Bob.talk()`、`Jill.talk()` 和 `Jack.talk()`，它们都会正常工作，尽管会产生不同的结果。鲍勃可能会更多地谈论性能，吉尔可能会更多地谈论美观，杰克可能会更多地谈论截止日期。每个对象都从Person继承了talk方法并对其进行了定制。
    | 多态性和方法重写 |'
- en: Setting up your training environment
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的训练环境
- en: This book takes a do-it-yourself approach when it comes to writing code, because
    I firmly believe that the best way to really learn a programming language is by
    writing code. There are no cut-and-paste-ready code downloads that you simply
    put in your pages. On the contrary, you're expected to type in code, see how it
    works, and then tweak it and play around with it. When trying out the code examples,
    you're encouraged to enter the code into a JavaScript console. Let's see how you
    go about doing this.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写代码方面，本书采取了一种DIY（自己动手做）的方法，因为我坚信真正学习编程语言的最佳方式是通过编写代码。没有现成的代码下载可以直接放入您的页面中。相反，您需要输入代码，查看其工作方式，然后对其进行调整并加以实验。在尝试代码示例时，鼓励您将代码输入到JavaScript控制台中。让我们看看您是如何操作的。
- en: As a developer, you most likely already have a number of web browsers installed
    on your system, such as Firefox, Safari, Chrome, or Internet Explorer. All modern
    browsers have a JavaScript console feature that you'll use throughout the book
    to help you learn and experiment with the language. More specifically, this book
    uses WebKit's console, which is available in Safari and Chrome, but the examples
    should work in any other console.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名开发者，您很可能已经在系统上安装了多个网络浏览器，例如Firefox、Safari、Chrome或Internet Explorer。所有现代浏览器都具有JavaScript控制台功能，您将在本书中多次使用它来帮助您学习和实验语言。更具体地说，本书使用WebKit的控制台，它在Safari和Chrome中可用，但示例应该可以在任何其他控制台中工作。
- en: WebKit's web inspector
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebKit的网页检查器
- en: 'This example shows how you can use the console to type in some code that swaps
    the logo on the google.com home page with an image of your choice. As you can
    see, you can test your JavaScript code live on any page:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子展示了您如何使用控制台输入一些代码，将google.com主页上的标志替换为您选择的图片。如您所见，您可以在任何页面上实时测试JavaScript代码：
- en: '![WebKit''s web inspector](img/image_01_001.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![WebKit的网页检查器](img/image_01_001.jpg)'
- en: In order to bring up the console in Chrome or Safari, right click anywhere on
    a page and select **Inspect Element**. The additional window that shows up is
    the Web Inspector feature. Select the **Console** tab, and you're ready to go.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Chrome或Safari中打开控制台，在页面上的任何位置右键单击并选择**检查元素**。出现的附加窗口是网页检查器功能。选择**控制台**选项卡，您就可以开始了。
- en: You type code directly into the console, and when you press *Enter*, your code
    is executed. The return value of the code is printed in the console. The code
    is executed in the context of the currently loaded page, so, for example, if you
    type `location.href`, it will return the URL of the current page.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您直接在控制台中输入代码，当您按下 *Enter* 键时，代码将被执行。代码的返回值将在控制台中打印出来。代码是在当前加载的页面上下文中执行的，因此，例如，如果您输入
    `location.href`，它将返回当前页面的URL。
- en: The console also has an autocomplete feature. It works in a similar way to the
    normal command-line prompt in your operating system or autocomplete feature of
    the full-fledged IDEs. If, for example, you type `docu` and hit the *Tab* or right
    arrow key, `docu` will be autocompleted to document. Then, if you type `.` (the
    dot operator), you can iterate through all the available properties and methods
    you can call on the `document` object.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台还具有自动完成功能。它的工作方式与操作系统中的正常命令行提示符或完整IDE的自动完成功能类似。例如，如果您输入 `docu` 并按 *Tab* 键或右箭头键，`docu`
    将自动完成为 `document`。然后，如果您输入 `.`（点操作符），您可以遍历所有可用的属性和方法，这些属性和方法可以在 `document` 对象上调用。
- en: By using the up and down arrow keys, you can go through the list of already
    executed commands and bring them back in the console.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用上箭头键和下箭头键，您可以在已执行的命令列表中导航，并将它们带回控制台。
- en: The console gives you only one line to type in, but you can execute several
    JavaScript statements by separating them with semicolons. If you need more lines,
    you can press *Shift* + *Enter* to go to a new line without executing the result
    just yet.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台只给你一行来输入，但你可以通过分号分隔来执行多个 JavaScript 语句。如果你需要更多行，你可以按 *Shift* + *Enter* 来进入新的一行，而无需立即执行结果。
- en: JavaScriptCore on a Mac
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mac 上的 JavaScriptCore
- en: On a Mac, you don't actually need a browser; you can explore JavaScript directly
    from your command line **Terminal** application.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac 上，你实际上不需要浏览器；你可以直接从你的命令行 **终端** 应用程序中探索 JavaScript。
- en: 'If you''ve never used **Terminal**, you can simply search for it in **Spotlight
    search**. Once you''ve launched it, type the following command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从未使用过 **终端**，你可以在 **Spotlight 搜索** 中简单地搜索它。一旦你启动了它，输入以下命令：
- en: '[PRE7]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This command makes an alias to the little `jsc` application that stands for
    JavaScriptCore and is part of the WebKit engine. JavaScriptCore is shipped together
    with Mac operating systems.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令创建了一个指向代表 JavaScriptCore 的 `jsc` 小应用程序的别名，它是 WebKit 引擎的一部分。JavaScriptCore
    与 Mac 操作系统一起发货。
- en: You can add the `alias` line shown previously to your `~/.profile` file so that
    `jsc` is always there when you need it.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将之前显示的 `alias` 行添加到你的 `~/.profile` 文件中，这样 `jsc` 就会在你需要时始终可用。
- en: 'Now, in order to start the interactive shell, you will simply type `jsc` from
    any directory. Then, you can type JavaScript expressions, and when you hit **Enter**,
    you''ll see the result of the expression. Take a look at the following screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了启动交互式 shell，你只需在任何目录中输入 `jsc`。然后，你可以输入 JavaScript 表达式，当你按下 **Enter** 键时，你会看到表达式的结果。看看下面的截图：
- en: '![JavaScriptCore on a Mac](img/image_01_002.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![Mac 上的 JavaScriptCore](img/image_01_002.jpg)'
- en: More consoles
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多控制台
- en: All modern browsers have consoles built in. You have seen the Chrome/Safari
    console previously. In any Firefox version, you can install the Firebug extension,
    which comes with a console. Additionally, in newer Firefox releases, there's a
    console built in and accessible via the **Tools** | **Web Developer** | **Web
    Console** menu.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代浏览器都内置了控制台。你之前已经看到了 Chrome/Safari 控制台。在任何 Firefox 版本中，你可以安装 Firebug 扩展程序，它自带一个控制台。此外，在较新的
    Firefox 版本中，有一个内置的控制台，可以通过 **工具** | **Web 开发者** | **Web 控制台** 菜单访问。
- en: '![More consoles](img/image_01_003-e1482735592253.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![更多控制台](img/image_01_003-e1482735592253.jpg)'
- en: Internet Explorer, since version 8, has an F12 Developer Tools feature, which
    has a console in its **Script** tab.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 自从版本 8 以来，Internet Explorer 具有一个 F12 开发者工具功能，其中在其 **脚本** 选项卡中有一个控制台。
- en: 'It''s also a good idea to familiarize yourself with `Node.js`, and you can
    start by trying out its console. Install `Node.js` from [http://nodejs.org](http://nodejs.org)
    and try the console in your command prompt (terminal):'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉 `Node.js` 也是一件好事，你可以从尝试其控制台开始。从 [http://nodejs.org](http://nodejs.org) 安装
    `Node.js` 并在你的命令提示符（终端）中尝试控制台。
- en: '![More consoles](img/image_01_004.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![更多控制台](img/image_01_004.jpg)'
- en: As you can see, you can use the `Node.js` console to try out quick examples.
    But, you can also write longer shell scripts (`test.js` in the screenshot) and
    run them with the `scriptname.js` node.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你可以使用 `Node.js` 控制台尝试快速示例。但是，你也可以编写较长的 shell 脚本（截图中的 `test.js`）并使用 `scriptname.js`
    节点运行它们。
- en: 'Node REPL is a powerful development tool. When you type ''node'' on the command
    line, the REPL invokes. You can try out JavaScript on this REPL:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Node REPL 是一个强大的开发工具。当你在命令行中输入 'node' 时，REPL 会自动启动。你可以在这个 REPL 上尝试 JavaScript：
- en: '[PRE8]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about how JavaScript was born, and where it is
    today. You were also introduced to object-oriented programming concepts and have
    seen how JavaScript is not a class-based OO language, but a prototype-based one.
    Finally, you learned how to use your training environment-the JavaScript console.
    Now, you're ready to dive into JavaScript and learn how to use its powerful OO
    features. However, let's start from the beginning.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了 JavaScript 的诞生以及它今天的地位。你还介绍了面向对象编程的概念，并看到了 JavaScript 并不是一个基于类的 OO
    语言，而是一个基于原型的语言。最后，你学习了如何使用你的训练环境——JavaScript 控制台。现在，你准备好深入 JavaScript 并学习如何使用其强大的
    OO 特性了。然而，让我们从基础开始。
- en: The next chapter will guide you through the data types in JavaScript (there
    are just a few), conditions, loops, and arrays. If you think you know these topics,
    feel free to skip the next chapter, but not before you make sure you can complete
    the few short exercises at the end of the chapter.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将引导你了解 JavaScript 中的数据类型（只有少数几种），条件语句、循环和数组。如果你认为你已经掌握了这些主题，可以自由地跳过下一章，但在那之前，请确保你能完成章节末尾的几个简短练习。
