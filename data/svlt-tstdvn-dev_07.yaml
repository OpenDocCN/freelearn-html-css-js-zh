- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Tidying up Test Suites
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整理测试套件
- en: Have you ever felt frustrated when working with your test suites? They can easily
    become messy and overgrown, unless you’re actively tending to them. In this chapter,
    we’ll look at some of the ways you can keep your test suites tidy.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你在处理测试套件时是否曾经感到沮丧？除非你积极维护它们，否则它们很容易变得杂乱无章。在本章中，我们将探讨一些保持测试套件整洁的方法。
- en: The techniques you’ll use to tidy test suites differ from the techniques you’d
    use in your application code. Application code requires building abstractions
    and encapsulating details, with deep layers of connecting objects. However, tests
    benefit from being shallow, with each test statement having a clear effect.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你用于整理测试套件的技巧与你在应用程序代码中使用的技巧不同。应用程序代码需要构建抽象和封装细节，具有深层连接的对象。然而，测试受益于保持简洁，每个测试语句都有明确的效果。
- en: Another way to think of it is that normal program flow can take many different
    paths through the code, but test suites have just one flow – they are scripts
    that run from top to bottom. There is an absence of control logic, such as conditional
    expressions and loop constructs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种思考方式是，正常程序流程可以通过代码中的许多不同路径，但测试套件只有一条流程——它们是从上到下运行的脚本。其中缺少控制逻辑，如条件表达式和循环结构。
- en: The primary mechanism you have to control complexity in test suites is abstracting
    functions that hide detail.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Playwright 测试中使用页面对象模型
- en: 'This chapter covers the following techniques:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下技巧：
- en: Using page object models in Playwright tests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Playwright 测试中使用页面对象模型
- en: Extracting an action helper
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取动作辅助函数
- en: Extracting a factory method for creating data objects
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取用于创建数据对象的工厂方法
- en: By the end of the chapter, you’ll have learned an array of strategies to cut
    down on the size of your test suites.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会一系列策略来减少测试套件的大小。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code for the chapter can be found online at [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter07/Start](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter07/Start).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 控制测试套件复杂性的主要机制是抽象函数，以隐藏细节。
- en: Using page object models in Playwright tests
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[代码示例](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter07/Start)'
- en: A **page object model** is simply a plain JavaScript class that groups up the
    mechanical actions of navigating a page (locating a field, clicking a button,
    or filling in a text field) into methods that describe high-level operations that
    occur within your application (completing a birthday form).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**页面对象模型**只是一个简单的JavaScript类，它将导航页面的机械动作（定位字段、点击按钮或填写文本字段）组合成描述应用程序中高级操作的方法（完成生日表单）。'
- en: In this section, you’ll build a page object model named `BirthdayListPage` that
    will allow you to rewrite your existing Playwright tests more simply.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将构建一个名为 `BirthdayListPage` 的页面对象模型，这将允许你更简单地重写现有的 Playwright 测试。
- en: 'Let’s get started by adding the new class:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从添加新的类开始：
- en: 'Create a new file named `tests/BirthdayListPage.js` and give it the following
    content. It creates the basic class along with a single method, `goto`, which
    is used to navigate to the `/birthdays` application URL:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `tests/BirthdayListPage.js` 的新文件，并给它以下内容。它创建了一个基本类，以及一个名为 `goto` 的单个方法，用于导航到
    `/birthdays` 应用程序 URL：
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can already make use of this class in our tests. In `tests/birthdays.test.js`,
    add the following import at the top of the file:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经在测试中使用了这个类。在 `tests/birthdays.test.js` 文件顶部添加以下导入：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, update all the tests to use this class, by replacing the direct call to
    `page.goto` with the indirect call via the `BirthdayListPage` object. For example,
    consider the following existing test:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，更新所有测试以使用此类，通过将直接调用 `page.goto` 替换为通过 `BirthdayListPage` 对象的间接调用。例如，考虑以下现有测试：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It should be modified to become this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该修改为如下所示：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we’ll move on to creating helpers for each of the individual files. Take
    a look at this original code from the editing test:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将继续为每个单独的文件创建辅助函数。看看以下来自编辑测试的原始代码：
- en: '[PRE4]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'From this, we can pull helpers called `nameField`, `dateOfBirthField`, and
    `saveButton`. Now, add them to `BirthdayListPage`, like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们可以提取名为 `nameField`、`dateOfBirthField` 和 `saveButton` 的辅助函数。现在，将它们添加到 `BirthdayListPage`
    中，如下所示：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Still in `BirthdayLastPage`, you can now roll up these helper methods into
    a single helper method that performs the whole action, `saveNameAndDateOfBirth`:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在 `BirthdayLastPage` 中，你现在可以将这些辅助方法合并成一个执行整个操作的单一辅助方法，名为 `saveNameAndDateOfBirth`：
- en: '[PRE6]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The section of code in *step 4* from the original test, which was eight lines
    of code including the explanatory comment, can now be done in a single function
    call. The comment is no longer necessary because the method name basically says
    the same thing. Go ahead and update the test now, as shown here:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原始测试中 *步骤 4* 的代码部分，包括解释性注释，现在可以通过一个函数调用完成。注释不再必要，因为方法名基本上表达了相同的意思。现在按照以下方式更新测试：
- en: '[PRE7]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'That completes this section of the test. Now for the next bit, which looks
    like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了本节的测试。接下来是下一部分，看起来如下：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For this section, we can repeat the earlier steps to extract an internal helper
    to locate the desired field, and then extract a second external helper to perform
    the action. Start by adding a new helper in the `BirthdayListPage` page object
    model, named `entryFor`, that finds the entry for a person’s name:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，我们可以重复之前的步骤来提取一个内部辅助方法以定位所需的字段，然后提取一个外部辅助方法来执行操作。首先在 `BirthdayListPage`
    页面对象模型中添加一个新的辅助方法，命名为 `entryFor`，用于查找某人的姓名条目：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, use the `entryFor` method to build another helper, `beginEditingFor`,
    which clicks the **Edit** button for that birthday:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用 `entryFor` 方法构建另一个辅助方法，`beginEditingFor`，它将点击该生日页面的 **编辑** 按钮：
- en: '[PRE10]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It’s time to remove the original code shown in *step 6* with a single call
    to this new helper in the page object model. Make the updates shown in the following
    code block, again getting rid of the comment and reducing six lines down to one:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是时候移除 *步骤 6* 中显示的原始代码，通过在页面对象模型中调用这个新辅助方法来执行单一调用。按照以下代码块中的更新进行操作，再次删除注释并将六行代码缩减为一行：
- en: '[PRE11]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'There’s one final action within the test that can be updated, which is the
    action to modify the form values after beginning editing. We don’t need to create
    any new helpers for this action. We simply need to reuse the `saveNameAndDateOfBirth`
    helper. Go ahead and do that now, like this:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试中还有一个最终的操作可以更新，即开始编辑后修改表单值。我们不需要为此操作创建任何新的辅助方法。我们只需要重用 `saveNameAndDateOfBirth`
    辅助方法。现在按照以下方式执行此操作：
- en: '[PRE12]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The last change to make is a change to the expectations. They can be updated
    to use the `entryFor` helper. Since this is the last change in this section, the
    listing shows the fully complete test. Make the changes to the expectations as
    shown here:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后要做的更改是更改期望。它们可以更新为使用 `entryFor` 辅助方法。由于这是本节中的最后一个更改，列表显示了完整的测试。按照以下方式更改期望：
- en: '[PRE13]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The benefits of introducing the `BirthdayListPage` page object model are clear:
    the test is more readable, the test data is more prominent (the two changing date
    of births are now more visible), and any future changes will be quicker to make,
    simply because the test is shorter.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 引入 `BirthdayListPage` 页面对象模型的好处是显而易见的：测试更易读，测试数据更突出（两个出生日期的变化现在更明显），并且任何未来的更改都将更快完成，因为测试更短。
- en: Continuing with the remaining tests
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 继续进行剩余的测试
- en: The other Playwright tests in the repository can also be rewritten using the
    exact same helpers. These changes aren’t shown in this book but are available
    in the companion repository.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库中的其他 Playwright 测试也可以使用完全相同的辅助方法重写。这些更改在本书中没有展示，但在配套仓库中可用。
- en: In this section, you saw how to create a Playwright page object model. Next,
    we’ll do something similar with the Vitest unit tests.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你看到了如何创建 Playwright 页面对象模型。接下来，我们将对 Vitest 单元测试做类似的事情。
- en: Extracting an action helper
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取操作辅助方法
- en: This section covers the use of a helper to simplify the *Act* phase of a test.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了如何使用辅助方法简化测试的 *执行* 阶段。
- en: Understanding the Arrange-Act-Assert pattern
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 Arrange-Act-Assert 模式
- en: The *Arrange-Act-Assert* pattern is a standard way to describe the order in
    which unit tests are written.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*Arrange-Act-Assert* 模式是描述单元测试编写顺序的标准方式。'
- en: They start with the *Arrange* phase, which is when the structure under test
    is primed for work. Any input data is constructed, and any preparatory methods
    are called that get the system into the right state.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 它们从 *安排* 阶段开始，这是测试结构准备工作的阶段。任何输入数据都会被构建，并且会调用任何准备方法，使系统进入正确的状态。
- en: Then, we have the *Act* phase, which invokes the operation that is being checked.
    Finally, the test ends with the *Assert* phase, which can be one or more expectations
    (or *assertions*) that verify that the operation did what it was meant to.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有 *Act* 阶段，它调用正在检查的操作。最后，测试以 *Assert* 阶段结束，该阶段可以是一个或多个期望（或 *断言*），以验证操作是否按预期执行。
- en: Each of these three phases benefits from different strategies to remove duplication.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个阶段各自受益于不同的策略来消除重复。
- en: The *Act* phase is the one that I think benefits least from the removal of duplication.
    That’s because the majority of unit tests you’ll write – and all the unit tests
    in this book – have an action that is triggered by a single method call. It’s
    rare to find a scenario where the action that is being observed requires anything
    more than a single instruction.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*Act* 阶段是受益于消除重复最少的阶段。这是因为您将要编写的绝大多数单元测试——以及本书中的所有单元测试——都有一个由单个方法调用触发的操作。很少会遇到需要超过单个指令的操作来观察的动作。'
- en: And because of this, I like to ensure the method call is called directly within
    the unit tests, and not mixed up with any of the *Arrange* phase statements. That
    being said, there are some occasions when it helps to build an *Act* helper. The
    call to invoke a SvelteKit form action via the `actions.default` import, is one
    of these occasions.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个原因，我倾向于确保方法调用直接在单元测试中调用，而不是与任何 *Arrange* 阶段的语句混合。话虽如此，有些情况下构建一个 *Act* 辅助函数是有帮助的。通过
    `actions.default` 导入调用 SvelteKit 表单操作的调用就是这些情况之一。
- en: There are a couple of reasons why. First, the name `actions.default` is non-descriptive
    in the context of a unit test suite. Second, the form action’s parameter is not
    trivial – it uses the Form API’s `request` object to wrap the form data, which
    is then packaged into a SvelteKit `RequestEvent`-like object. This needs to be
    done in every single test. What we care about are the values within the form data,
    not the plumbing around it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个原因。首先，`actions.default` 的名称在单元测试套件的上下文中不够描述性。其次，表单操作的参数并不简单——它使用表单 API 的
    `request` 对象来包装表单数据，然后将其打包成一个类似 SvelteKit `RequestEvent` 的对象。这需要在每个测试中完成。我们关心的是表单数据中的值，而不是围绕它的管道。
- en: 'In the `src/routes/birthdays/page.server.test.js` file, you’ll see the following
    pattern repeated many times:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `src/routes/birthdays/page.server.test.js` 文件中，您将看到以下模式被重复多次：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can consider the request statement part of the setup. It is required every
    single time the form action is called. There is no way to call the form action
    without doing the form data dance.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将请求语句视为设置的一部分。每次调用表单操作时都需要它。没有进行表单数据操作就无法调用表单操作。
- en: So, let’s create a helper that wraps this behavior. We’ll call it `performFormAction`,
    which makes it clear what’s happening in the test.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们创建一个包装此行为的辅助函数。我们将称之为 `performFormAction`，这样在测试中就可以清楚地了解正在发生什么。
- en: 'Let’s begin:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始：
- en: 'In `src/routes/birthdays/page.server.test.js`, add the following function definition
    to the top of the `/birthdays - default` `action` context:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/routes/birthdays/page.server.test.js` 中，将以下函数定义添加到 `/birthdays - default`
    `action` 上下文的顶部：
- en: '[PRE15]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In each test, look for the pattern described in the preceding code snippet
    – calling `createFormDataRequest` and then the imported `actions.default` function
    – and replace each instance with a call to `performFormAction`. The following
    is an example from one of the tests:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个测试中，寻找前面代码片段中描述的模式——调用 `createFormDataRequest` 然后导入的 `actions.default` 函数——并将每个实例替换为对
    `performFormAction` 的调用。以下是从测试中的一个示例：
- en: '[PRE16]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Make sure you rerun all your tests once you’ve made that change in all of them
    in the test suite. In the next section, we’ll continue with a look at simplifying
    the *Arrange* section of the test suite.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您在测试套件中对所有这些更改重新运行所有测试。在下一节中，我们将继续查看简化测试套件的 *Arrange* 部分。
- en: Extracting a factory method for creating data objects
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取用于创建数据对象的工厂方法
- en: It’s time to simplify the *Arrange* phase of the tests using a factory method
    named `createBirthday`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候使用名为 `createBirthday` 的工厂方法简化测试的 *Arrange* 阶段了。
- en: The last section mentioned how each of the *Arrange-Act-Assert* phases needs
    a different treatment for simplification. A key method for the *Arrange* phase
    is the use of factories. You already created one of those in [*Chapter 4*](B19611_04.xhtml#_idTextAnchor060),
    *Saving Form Data*. That was the `createFormDataRequest` method that you used
    in the preceding section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节提到，每个 *安排-行动-断言* 阶段都需要不同的处理以简化。*安排* 阶段的一个关键方法是使用工厂。您已经在 [*第4章*](B19611_04.xhtml#_idTextAnchor060)，*保存表单数据*
    中创建了一个这样的工厂。那就是您在上一节中使用的 `createFormDataRequest` 方法。
- en: Using test factories to hide irrelevant data
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用测试工厂来隐藏无关数据
- en: Factory methods help you generate supporting objects in the shortest amount
    of code possible. One way they do that is by setting default values for object
    properties so that you don’t need to specify them. You’re then free to override
    those defaults in each individual test.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂方法帮助您以尽可能少的代码生成支持对象。它们这样做的一种方式是为对象属性设置默认值，这样您就不需要指定它们。然后您可以自由地在每个单独的测试中覆盖这些默认值。
- en: Hiding necessary but irrelevant data is a key method for keeping unit tests
    succinct and clear.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏必要但无关的数据是保持单元测试简洁和清晰的关键方法。
- en: Our birthday objects have a very simple structure, with just three fields –
    `name`, `dob`, and `id`. Of these three, `name` and `dob` are set frequently and
    the `id` field infrequently. Also, each of the individual fields has a unique
    shape of data – a name looks very different from a date, and very different from
    a **universally unique** **identifier** (**UUID**).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的生日对象结构非常简单，只有三个字段——`name`、`dob` 和 `id`。在这三个中，`name` 和 `dob` 频繁设置，而 `id` 字段很少设置。此外，每个单独的字段都有独特的数据形状——名称看起来与日期非常不同，与
    **通用唯一** **标识符**（**UUID**）也非常不同。
- en: With that in mind, the upcoming `createBirthday` helper requires both `name`
    and `dob` but leaves `id` as an extra field that can sometimes be specified. Those
    `name` and `dob` values are given as positional parameters – meaning they are
    identified by position and not by name – because it’s obvious which is which.
    That saves space on the page.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，即将到来的 `createBirthday` 辅助函数需要 `name` 和 `dob` 两个参数，但将 `id` 作为可以有时指定的额外字段。这些
    `name` 和 `dob` 值作为位置参数给出——这意味着它们通过位置而不是通过名称来识别——因为很明显哪个是哪个。这节省了页面上的空间。
- en: It might not seem important, but when you are writing software for maintainability,
    every single word must prove its worth.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来并不重要，但当你编写可维护的软件时，每个单词都必须证明其价值。
- en: 'Here’s an example of how this looks. Note how `id` is specified differently,
    due to being rarely used:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例，注意 `id` 的指定方式不同，因为很少使用：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let’s begin:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始：
- en: 'Create a new file named `src/factories/birthday.js` and give it the following
    content:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `src/factories/birthday.js` 的新文件，并给它以下内容：
- en: '[PRE18]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Open the `src/routes/birthdays/Birthday.test.js` file and import the new helper:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/routes/birthdays/Birthday.test.js` 文件并导入新的辅助函数：
- en: '[PRE19]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, find all the `render` calls that use the `exampleBirthday` object. They
    look like this:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，找到所有使用 `exampleBirthday` 对象的 `render` 调用。它们看起来像这样：
- en: '[PRE20]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Update them to use the new helper, like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 将它们更新为使用新的辅助函数，如下所示：
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, in `src/routes/birthdays/page.server.test.js`, add the `createBirthday`
    import:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在 `src/routes/birthdays/page.server.test.js` 中添加 `createBirthday` 导入：
- en: '[PRE22]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Find all the calls to `performFormAction` that you updated in the previous
    section. They’ll look something like this:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到上一节中更新的所有对 `performFormAction` 的调用。它们看起来像这样：
- en: '[PRE23]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Update them to use the `createBirthday` helper, shown here:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将它们更新为使用 `createBirthday` 辅助函数，如下所示：
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'There are a couple of tests where the preceding change isn’t straightforward.
    In the *saves unique ids one each new birthday* test, you can save the created
    birthday in the `request` object, and then pass that into `performFormAction`
    twice, as shown in the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个测试中，前面的更改并不直接。在 *保存每个新生日唯一的ID* 测试中，您可以将创建的生日保存到 `request` 对象中，然后将其传递给 `performFormAction`
    两次，如下面的代码所示：
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The *updates an entrythat shares the same id* test needs a specific `id` passed
    into the second invocation. Note how the factory method is structured in such
    a way that uncommon information needs to be named, such as the `id` field:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*更新具有相同ID的条目* 测试需要一个特定的 `id` 在第二次调用中传递。注意工厂方法是如何构建的，以便需要命名不常见的信息，例如 `id` 字段：'
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'For the final test suite, in `src/routes/birthdays/page.test.js`, the `birthdays`
    array can be updated to use two calls to `createBirthday`, as shown here:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于最终的测试套件，在 `src/routes/birthdays/page.test.js` 中，可以将 `birthdays` 数组更新为使用两个
    `createBirthday` 调用，如下所示：
- en: '[PRE27]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, update the test shown here so that it uses the `createBirthday` helper
    directly in the `render` call for both the `birthdays` prop value and the `form`
    prop value:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，更新这里显示的测试，使其直接在 `render` 调用中使用 `createBirthday` 助手，用于 `birthdays` 属性值和 `form`
    属性值：
- en: '[PRE28]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: That completes the use of `createBirthday`. Make sure to rerun your tests to
    ensure that everything is still green.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `createBirthday` 的过程到此结束。请确保重新运行你的测试，以确保一切仍然正常。
- en: You’ve now learned how a test factory method can be used to simplify and bring
    clarity to your unit tests.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经学会了如何使用测试工厂方法来简化并使你的单元测试更加清晰。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'This chapter has shown you three techniques to shorten your test suites: page
    object models for Playwright end-to-end tests, action helpers for Vitest unit
    tests, and factory methods. Keeping test suites clear and meaningful is key to
    keeping them easily maintainable.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向你展示了三种缩短测试套件的技术：Playwright端到端测试的页面对象模型、Vitest单元测试的动作助手和工厂方法。保持测试套件清晰和有意义是保持它们易于维护的关键。
- en: In this next chapter, we’ll look at a more involved way of reducing unit test
    code – writing your own custom matchers.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨一种更复杂的方式来减少单元测试代码——编写你自己的自定义匹配器。
