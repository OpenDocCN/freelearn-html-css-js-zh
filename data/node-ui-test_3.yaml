- en: Chapter 3. Installing Zombie.js and Mocha
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 安装Zombie.js和Mocha
- en: By the end of this chapter you should be able to setup the base structure of
    a test environment for an application using Zombie.js and Mocha.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您应该能够为使用Zombie.js和Mocha的应用程序设置测试环境的基本结构。
- en: 'Topics covered in this chapter are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题有：
- en: Setting up the Zombie.js and Mocha packages in your application manifest
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用程序清单中设置Zombie.js和Mocha包
- en: Setting up a test environment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置测试环境
- en: Running your first test
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行你的第一个测试
- en: Changing the application manifest
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改应用程序清单
- en: You'll now be extending the to-do application you started building in the previous
    chapter and start providing it with the ability to test itself.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将扩展上一章开始构建的待办事项应用程序，并开始为其提供自我测试的能力。
- en: In the root of the application, you have a file named `package.json` that you
    already changed to introduce some modules that your application depends on. Now
    you need to add a new section that specifies the dependencies on other modules
    during the development and testing phase. This section is named `devDependencies`
    and is only installed by NPM if the `NODE_ENV` environment variable is not set
    to `production`. This is a good place to introduce the dependencies on modules
    that need to be there for running your tests.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序的根目录中，有一个名为`package.json`的文件，您已经修改过，引入了一些应用程序依赖的模块。现在，您需要添加一个新的部分，指定在开发和测试阶段对其他模块的依赖关系。这个部分名为`devDependencies`，只有在`NODE_ENV`环境变量没有设置为`production`时，NPM才会安装它。这是一个很好的地方，可以介绍那些需要在运行测试时存在的模块的依赖关系。
- en: 'First you need to add the `mocha` and `zombie` modules:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要添加`mocha`和`zombie`模块：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then you will need to install these missing dependencies using NPM:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要使用NPM安装这些缺失的依赖项：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will install these two modules and their internal dependencies inside the
    `node_modules` folder, making them available for your application at any time.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`node_modules`文件夹中安装这两个模块及其内部依赖项，使它们随时可用于您的应用程序。
- en: Setting up a test environment
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置测试环境
- en: You now need to set up a testing script. First you're going to test the user
    signup process.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您需要设置一个测试脚本。首先，您将测试用户注册流程。
- en: 'But before that, in order for us to be able to start up our server from within
    the tests, we need to make a slight modification to the `app.js` file:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但在此之前，为了能够在测试中启动我们的服务器，我们需要对`app.js`文件进行轻微修改：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Our tests will be using their own server, so we don't need `app.js` to run a
    server for us in this case. These last few lines export the application and only
    start up the server if the main module (the module that the `node` command line
    is called with) is the `app.js` one. Since the tests will have a different main
    module, the server won't start when we run the tests.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试将使用它们自己的服务器，所以在这种情况下，我们不需要`app.js`来为我们运行服务器。最后几行代码导出了应用程序，并且只有在主模块（使用`node`命令行调用的模块）是`app.js`时才启动服务器。由于测试将有一个不同的主模块，所以在运行测试时服务器不会启动。
- en: 'Now, as the first example, we''re going to test the fetching of the user signup
    form. We''re going to concentrate all the tests that are related to the user routes
    in a file under `test/users.js`. This file can start out with:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，作为第一个例子，我们将测试获取用户注册表单。我们将把所有与用户路由相关的测试都集中在`test/users.js`文件中。这个文件可以从以下内容开始：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the previous code, at the top, we include the `assert` module (used for verifying
    whether the app behaves as expected), the `zombie` module (assigned to the `Browser`
    variable), and the `app` module. The `app` module gets hold of the Flatiron application
    object so you can start and stop the corresponding server.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们在顶部包含了`assert`模块（用于验证应用程序是否按预期运行）、`zombie`模块（赋值给`Browser`变量）和`app`模块。`app`模块获取了Flatiron应用程序对象，因此您可以启动和停止相应的服务器。
- en: Next we declare that, before any test is run, the app should be started, and
    that after all the tests are done, the server should be closed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们声明，在运行任何测试之前，应该启动应用程序，并且在所有测试完成后，应该关闭服务器。
- en: Next up is a series of nested `describe` calls. These calls serve to give context
    to each test, allowing you to, later, differentiate the setup and teardown functions
    that will occur before and after each of the tests.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一系列嵌套的`describe`调用。这些调用用于为每个测试提供上下文，允许您稍后区分在每个测试之前和之后将发生的设置和拆卸函数。
- en: Then comes an `it` statement where you implement the test. This statement takes
    two arguments, namely, the description of what is being tested on the described
    subject and a function that will be called when the test is started. This function
    gets a callback function, `done` that is called on completion of the test. This
    arrangement makes asynchronous testing possible and reliable. Each test only ends
    when the respective `done` function is called, which can be after a series of
    asynchronous I/O calls.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是一个`it`语句，您在其中实现测试。这个语句接受两个参数，即正在测试的主题的描述和在开始测试时将被调用的函数。这个函数得到一个回调函数`done`，在测试完成时调用。这种安排使得异步测试成为可能且可靠。每个测试只有在相应的`done`函数被调用后才结束，这可能是在一系列异步I/O调用之后。
- en: Then we set out to create a browser and load the user signup form URL, using
    the `assert.ok` function to verify whether the page loads successfully. The `assert`
    module is a Node.js core module that provides basic assertion testing. Within
    the test code, we place some assertions to validate that some values are what
    we expect them to be. If any of the assertions fail, `assert` will throw an error,
    which will be caught by the test runner, signaling that the test has failed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们开始创建一个浏览器，并加载用户注册表单的URL，使用`assert.ok`函数来验证页面是否成功加载。`assert`模块是Node.js的核心模块，提供基本的断言测试。在测试代码中，我们放置一些断言来验证一些值是否符合我们的预期。如果任何断言失败，`assert`会抛出一个错误，测试运行器会捕获到这个错误，表示测试失败。
- en: Besides the basic `assert.ok` function, which will throw an error if the value
    is not true (that is, passes the `x == true` test), this module also provides
    a set of helper functions to provide more elaborate comparisons such as `assert.deepEqual`
    and others. For more information about the `assert` module you can read the API
    documents at [http://nodejs.org/api/assert.html](http://nodejs.org/api/assert.html).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基本的`assert.ok`函数之外，如果值不为true（即通过`x == true`测试），它将抛出错误，该模块还提供了一组辅助函数，以提供更复杂的比较，如`assert.deepEqual`等。有关`assert`模块的更多信息，您可以阅读[http://nodejs.org/api/assert.html](http://nodejs.org/api/assert.html)上的API文档。
- en: 'Now we need to specify a test command script by replacing the default that
    Flatiron provided in `package.json`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要通过替换`package.json`中Flatiron提供的默认值来指定测试命令脚本：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This specifies what NPM should do when told to run the tests. To run the tests
    enter the following command on the command line:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了当告诉NPM运行测试时，NPM应该执行什么操作。要运行测试，请在命令行上输入以下命令：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output should be successful:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该是成功的：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Summary
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: To install Mocha and Zombie, you need to include them as development dependencies
    in your application manifest and then use NPM to install them.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Mocha和Zombie，你需要将它们作为开发依赖项包含在应用程序清单中，然后使用NPM安装它们。
- en: Once these modules are installed, you can create test files for each logical
    component of your application inside a directory named `test`. Each of these files
    should contain a series of tests, each of them properly contextualized inside
    nested `describe` statements.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些模块安装好，你可以在名为`test`的目录中为应用程序的每个逻辑组件创建测试文件。每个文件应包含一系列测试，每个测试都应嵌套在`describe`语句中。
- en: You should also alter the application manifest to specify the testing script
    so that the tests are runnable using NPM.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该修改应用程序清单，以指定测试脚本，以便可以使用NPM运行测试。
- en: In the following chapters, we'll be evolving this test and introduce some more,
    in order to cover more use cases of our application.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将不断完善这个测试，并引入一些新的测试，以覆盖我们应用程序的更多使用情况。
