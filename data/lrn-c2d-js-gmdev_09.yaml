- en: Chapter 9. Creating Your Own Blockbuster Game – A Complete Match 3 Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。创建您自己的大片游戏 - 一个完整的匹配3游戏
- en: This is the last chapter of this book, and I really hope you have enjoyed reading
    it as much as I enjoyed writing it. When I drafted the initial outline for this
    book, I planned to dedicate the last chapter to a Match 3 game such as Candy Crush
    Saga or Farm Heroes Saga.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这本书的最后一章，我真心希望您阅读这本书的乐趣和我写作的乐趣一样。当我为这本书制定初步大纲时，我计划将最后一章奉献给像Candy Crush Saga或Farm
    Heroes Saga这样的匹配3游戏。
- en: I then realized that there are tons of tutorials about these games available
    around the Web. Hence, I decided to show y'all something new, the engine of the
    Dungeon Raid game (available at [https://itunes.apple.com/us/app/dungeon-raid/id403090531](https://itunes.apple.com/us/app/dungeon-raid/id403090531)),
    which I adapted to create Globez (available at [http://www.mindjolt.com/globez.html](http://www.mindjolt.com/globez.html)),
    a game that has been played millions of times.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我后来意识到，关于这些游戏在网络上有很多教程。因此，我决定向大家展示一些新内容，即Dungeon Raid游戏（可在[https://itunes.apple.com/us/app/dungeon-raid/id403090531](https://itunes.apple.com/us/app/dungeon-raid/id403090531)找到）的引擎，我将其改编成Globez（可在[http://www.mindjolt.com/globez.html](http://www.mindjolt.com/globez.html)找到），这是一个被数百万次玩过的游戏。
- en: '![Creating Your Own Blockbuster Game – A Complete Match 3 Game](img/0075OS_09_1.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![创建您的自己的大片游戏 - 一个完整的匹配3游戏](img/0075OS_09_1.jpg)'
- en: During the making of this game, you will not only use most of the concepts described
    in this book in the creation of a real game engine, but you will also learn the
    bare bones of the Cocos2d-JS drawing API.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在制作这个游戏的过程中，你不仅会使用这本书中描述的大多数概念来创建一个真实游戏引擎，你还会学习Cocos2d-JS绘图API的基础知识。
- en: Follow the steps carefully; this is a complete game engine, and there's a lot
    to do.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细遵循步骤；这是一个完整的游戏引擎，有很多事情要做。
- en: Setting up the game
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置游戏
- en: 'Since it''s a basic game with no physics, we don''t need to include external
    libraries; so, `project.json` returns to its original content:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个没有物理的基本游戏，我们不需要包含外部库；因此，`project.json`返回其原始内容：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Also, the content of `main.js` is basically the same as always:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`main.js`的内容基本上和以前一样：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Just have a look at the resolution: 300x300 is the main game area. For now,
    we''ll only focus on the main game area, and believe me, you''ll have enough to
    do!'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 只看分辨率：300x300是主要游戏区域。现在，我们只关注主要游戏区域，相信我，你会有足够的任务要做！
- en: '`loadassets.js` is loading a sprite sheet created with **TexturePacker**:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadassets.js`正在加载使用**TexturePacker**创建的精灵表：'
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`globes.png` is just one single file with all colored globes:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`globes.png`只是一个包含所有彩色地球仪的单个文件：'
- en: '![Setting up the game](img/0075OS_09_2.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![设置游戏](img/0075OS_09_2.jpg)'
- en: 'And `globes.plist` defines various images this way, with each color name assigned
    the `key` node. For example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`globes.plist`以这种方式定义了各种图像，每个颜色名称都分配了一个`key`节点。例如：'
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we are done with the settings, we can start coding the game itself.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们完成了设置，我们可以开始编写游戏本身了。
- en: Creating the board
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建游戏板
- en: 'The first thing we''ll do is create the board in `gamescript.js` on which we''ll
    be playing the game. Trying to make the engine as customizable as we can, we''ll
    start with some global variables. Changing most of them will result in a quick
    gameplay change. It is shown as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要做的是在`gamescript.js`中创建游戏板，我们将在上面玩游戏。我们试图使引擎尽可能可定制，所以我们从一些全局变量开始。更改其中大多数变量将导致游戏玩法快速改变。如下所示：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`fieldSize`: This variable is the width and height of the field size, in tiles.
    This means we will play on a 6 x 6 tile field.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fieldSize`：这个变量是场地尺寸的宽度和高度，以瓦片为单位。这意味着我们将在一个6 x 6瓦片场地上玩游戏。'
- en: '`tileTypes`: This is an array with the keys of the sprites defined in the `globes.plist`
    file. I used only five different kinds of globez because I like the game to offer
    the opportunity to make big combos. You can choose how many colors you want; just
    keep in mind the more the colors in the game, the harder the gameplay.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tileTypes`：这是一个数组，包含了在`globes.plist`文件中定义的精灵键。我只使用了五种不同类型的地球仪，因为我喜欢游戏提供制作大型组合的机会。你可以选择你想要的颜色数量；只需记住，游戏中颜色越多，游戏难度就越高。'
- en: '`tileSize`: This variable is the size of a tile, in pixels.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tileSize`：这个变量是一个瓦片的尺寸，以像素为单位。'
- en: '`tileArray`: This is the array that will contain all globez objects.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tileArray`：这是一个将包含所有地球仪对象的数组。'
- en: '`globezLayer`: This variable will be the layer where globez tiles will be placed.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`globezLayer`：这个变量将是放置地球仪瓦片的层。'
- en: 'The `gameScene` definition does not change:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`gameScene`的定义没有改变：'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s have a look at the game definition, the core of the script:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看游戏定义，脚本的精髓：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There's nothing new here; we load the sprite sheet, create and place a background
    layer, create and place the layer that will contain all globez, and call the `createLevel`
    function.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有什么新内容；我们加载精灵图集，创建并放置一个背景层，创建并放置将包含所有globez的层，并调用`createLevel`函数。
- en: 'Let''s add globe creation to `createLevel`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`createLevel`中添加globe创建：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here we are just building a two-dimensional array called `tileArray` according
    to the `fieldSize` number of entries. Given the *i* and *j* values, the `addTile`
    function causes the final creation of the tile, which accepts the row and the
    column of such a tile in the game field.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们只是在根据`fieldSize`数字的条目数构建一个名为`tileArray`的两维数组。给定*i*和*j*的值，`addTile`函数会导致在游戏场中创建这样的瓦片，它接受该瓦片在游戏场中的行和列。
- en: 'Let''s look at `addTile` to know how to set up a game field:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`addTile`来了解如何设置游戏场：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'At this point of time, you can test the project and see what happens:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个时候，你可以测试项目并看看会发生什么：
- en: '![Creating the board](img/0075OS_09_3.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![创建板](img/0075OS_09_3.jpg)'
- en: Did you notice? Every time you run the game, you get a different, random game
    field.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到了吗？每次运行游戏时，你都会得到一个不同、随机的游戏场。
- en: 'Having a look at the `addTile` function will let you understand what happened:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`addTile`函数将让你了解发生了什么：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: First, a random number between zero and the number of allowed tile types minus
    one is generated. In this case, it is from zero to five.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，生成一个介于零和允许的瓦片类型数量减一之间的随机数。在这种情况下，是从零到五。
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'From the sprite sheet, we will pick the sprite with the same key as `tileTypes[randomTile]`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从精灵图集中，我们将选择与`tileTypes[randomTile]`具有相同键的精灵：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, the sprite is created starting from its assigned frame:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，从其分配的帧开始创建精灵：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'I added two custom attributes to our sprite:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我为我们的小精灵添加了两个自定义属性：
- en: '`val`: This variable represents the value of the tile as defined by the `randomTile`
    variable'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`val`：这个变量代表由`randomTile`变量定义的瓦片的值'
- en: '`picked`: This is a Boolean variable that says whether the tile has currently
    been picked by the players'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`picked`：这是一个布尔变量，表示瓦片是否已经被玩家选中'
- en: 'Then, the sprite is added to the `globezLayer` layer:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，精灵被添加到`globezLayer`层：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, we have to make something with all these globez.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须用所有这些globez做些事情。
- en: Selecting and deselecting the first globe
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择和取消选择第一个globe
- en: 'What''s the first thing we need to do when we want the player to interact with
    the game? Yes, add a listener. We will add it to the game''s `init` function:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要玩家与游戏互动时，需要做的第一件事是什么？是的，添加一个监听器。我们将将其添加到游戏的`init`函数中：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'These are all concepts you have already met; I am just putting them together
    in order to create a game. So, you should know by now that we are going to declare
    `touchListener`; but first, let me add two more global variables to keep track
    of all the tiles I am going to select and the color I select:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是你已经遇到的概念；我只是将它们组合起来以创建一个游戏。所以，你现在应该知道我们将要声明`touchListener`；但首先，让我添加两个额外的全局变量来跟踪我将要选择的瓦片和颜色：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`visitedTiles` is the array that will store the tiles once they have been picked
    up by the player, while `startColor` is the color of the first tile selected.
    We start with `null` as no color has been selected.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`visitedTiles`是一个数组，它将存储玩家捡起的瓦片，而`startColor`是第一个被选中的瓦片的颜色。我们以`null`开始，因为没有选择颜色。'
- en: 'Now, let''s move to the `touchListener` creation:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转到`touchListener`的创建：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'It seems a lot of code but don''t worry; it''s really easy. Check the following
    line of code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来代码很多，但别担心，它真的很简单。检查以下代码行：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This time, we will play with the mouse but, obviously, you can use touch if
    you want. Let''s say you should be able to use both ways to control the game.
    Using the mouse, we have to deal with two events, `onMouseDown` and `onMouseUp`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将使用鼠标进行操作，但显然，如果你想的话也可以使用触摸。假设你应该能够使用两种方式来控制游戏。使用鼠标，我们必须处理两个事件，`onMouseDown`和`onMouseUp`：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When the mouse is pressed, the `pickedRow` and `pickedCol` variables take the
    index of the row and column picked by the mouse according to click coordinates
    and `tileSize`. Once I know the row and column of the globe I picked, I can make
    it semitransparent by setting its opacity to 128—remember that opacity ranges
    from 0 to 255 in Cocos2d-JS with the `setOpacity` method. Also, I set the globe
    `picked` value to `true` because I actually picked it up, and since it's the first
    globe I am picking, I also need to set `startColor` to the globe color. From now
    on, we will only have to pick globez with the same color.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标按下时，`pickedRow` 和 `pickedCol` 变量根据点击坐标和 `tileSize` 获取鼠标选择的行和列的索引。一旦我知道我选择的
    globe 的行和列，我可以通过将它的不透明度设置为 128 来使它半透明——记住在 Cocos2d-JS 中，不透明度范围从 0 到 255，使用 `setOpacity`
    方法。我还将 globe 的 `picked` 值设置为 `true`，因为我实际上已经选择了它，而且由于它是第一个我选择的 globe，我还需要将 `startColor`
    设置为 globe 的颜色。从现在起，我们只需要选择相同颜色的 globez。
- en: Last but not least, we need to update the `visitedTiles` array with the newly
    picked globe—in this case, it's added as an object.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们需要用新选中的 globe 更新 `visitedTiles` 数组——在这个例子中，它被添加为一个对象。
- en: 'At the moment, `onMouseUp` is quite simple, although it will become the most
    complicated function in the whole game. It is as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`onMouseUp` 非常简单，尽管它将成为整个游戏中最复杂的函数。它如下所示：
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: There isn't much to say; once the player releases the mouse, the `startColor`
    method needs to be reset to `null` and each globe in the `visitedTiles` array
    must be set to fully opaque, with the `picked` attribute set to `false`. With
    an empty `visitedTiles` array, we are ready to wait for the next player choice.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 没什么好说的；一旦玩家释放鼠标，`startColor` 方法需要重置为 `null`，并且 `visitedTiles` 数组中的每个 globe 都必须设置为完全不透明，`picked`
    属性设置为 `false`。有了空的 `visitedTiles` 数组，我们就准备好等待下一个玩家的选择了。
- en: 'Test the game and try to pick and release a globe:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 测试游戏并尝试选择和释放一个 globe：
- en: '![Selecting and deselecting the first globe](img/0075OS_09_4.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![选择和取消选择第一个 globe](img/0075OS_09_4.jpg)'
- en: As you can see, when you pick a globe, it turns semitransparent. When you release
    it, it returns fully opaque.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，当你选择一个 globe 时，它会变成半透明。当你释放它时，它会恢复为完全不透明。
- en: Let's make our first chain.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们制作我们的第一个链。
- en: Making globez chains
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作 globez 链条
- en: 'The gameplay is simple: you have to connect as many globez you can, horizontally,
    vertically, or diagonally. And you can also backtrack.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏玩法很简单：你必须水平、垂直或对角线连接尽可能多的 globez。你也可以回溯。
- en: 'Let''s see how to connect globez. First, though, let me introduce you to a
    variable that will be very important in all your draw-to-match games: `tolerance`.
    Check the following code snippet:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何连接 globez。首先，不过，让我先向你介绍一个将在所有你的绘制匹配游戏中非常重要的变量：`tolerance`。查看以下代码片段：
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Have a look at the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 看看下面的截图：
- en: '![Making globez chains](img/0075OS_09_5.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![制作 globez 链条](img/0075OS_09_5.jpg)'
- en: Let's say the player wants to connect the three green globez, from bottom to
    top. When you draw with your finger on a small surface, say, your mobile phone,
    maybe in a train, you aren't this precise. So, on the left side, we can see what
    will happen if we detect player movement in a tile-based environment. The not-that-precise
    drawing would touch five different globez, resulting in an illegal move, which
    is frustrating. On the right side, using a tolerance, we only detect a player
    movement when next to the center of the tile. See the difference? The player only
    touches three globez, performing a legal move as required.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 假设玩家想要从下到上连接三个绿色 globez。当你用手指在小型表面上绘制，比如在手机上，也许是在火车上，你并不那么精确。所以，在左侧，我们可以看到如果我们在一个基于瓦片的游戏中检测到玩家移动会发生什么。不那么精确的绘制会触碰到五个不同的
    globez，导致非法移动，这会让人感到沮丧。在右侧，使用容差，我们只有在瓦片中心附近检测到玩家移动。看出了区别吗？玩家只触碰到三个 globez，按照要求执行了合法移动。
- en: I called the square of the distance from the center—the radius of the inner
    white circles—`tolerance`, and in this case, I set it to *20 pixels * 20 pixels
    = 400*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我将中心到距离的平方——内白圆的半径——称为 `tolerance`，在这个例子中，我将它设置为 *20 像素 * 20 像素 = 400*。
- en: 'We can say we have a legal move when:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当以下条件满足时，我们可以说我们有一个合法的移动：
- en: We are inside a tolerance area
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们处于容差区域内
- en: The current globe hasn't already been picked—the `picked` attribute is `false`
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前 globe 还没有被选中——`picked` 属性是 `false`
- en: The current globe is adjacent to the last picked globe
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前 globe 与最后一个选中的 globe 相邻
- en: The current globe has the same color as the first picked globe
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前 globe 与第一个选中的 globe 颜色相同
- en: 'Translated into Cocos2d-JS, this means the `onMouseMove` function will contain:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为 Cocos2d-JS，这意味着 `onMouseMove` 函数将包含：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'It seems a lot of code but it''s just the representation of the four conditions
    mentioned earlier. I would like to point out the following line to you:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来代码很多，但这只是前面提到的四个条件的表示。我想指出以下这一行：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, I am applying the **Pythagorean Theorem** without using square roots,
    to save CPU time.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我正在应用**勾股定理**而不使用平方根，以节省 CPU 时间。
- en: 'Test the script, and see what happens:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 测试脚本，看看会发生什么：
- en: '![Making globez chains](img/0075OS_09_6.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![制作 globez 链](img/0075OS_09_6.jpg)'
- en: You are now able to select globez even if your drawing is a bit imprecise. Now,
    what if you change your mind and want to backtrack to try another route?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，即使你的绘制不够精确，你也能选择 globez。现在，如果你改变主意，想要回溯并尝试另一条路线怎么办？
- en: Backtracking
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回溯
- en: 'You can backtrack your selection when you move your mouse back to the second
    last globe. In this case, the last globe is removed from the `visitedTiles` array
    and both the `picked` attribute and the opacity are turned back to their default
    values: `true` and `255`, respectively.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将鼠标移回倒数第二个 globe 时，你可以回溯你的选择。在这种情况下，最后一个 globe 将从 `visitedTiles` 数组中移除，并且
    `picked` 属性和透明度都恢复到默认值：`true` 和 `255`。
- en: 'To check for backtrack, you must check whether:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查回溯，你必须检查以下条件：
- en: We are inside a tolerance area
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们处于一个容差区域
- en: The current globe has already been picked—the `picked` attribute is `true`
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前 globe 已经被选中——`picked` 属性为 `true`
- en: The current globe is the second last entry in the `visitedTiles` array
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前 globe 是 `visitedTiles` 数组的倒数第二个条目
- en: 'This is just a minor change in the `onMouseMove` code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是 `onMouseMove` 代码中的一个小改动：
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Test your game now, and try to backtrack. See the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在测试你的游戏，并尝试回溯。查看以下截图：
- en: '![Backtracking](img/0075OS_09_7.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![回溯](img/0075OS_09_7.jpg)'
- en: Do you see this? Now, you can change your mind and take another route.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到这个了吗？现在，你可以改变主意，选择另一条路线。
- en: Take a short break because it's not over yet, although we managed to completely
    handle player movements.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在还没结束，尽管我们已经完全处理了玩家的移动。
- en: Removing globez
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移除 globez
- en: An ancient proverb says, *it's not a match game if you can't remove items*.
    And, it's right! Once you select the globez, you must be able to remove them once
    you release the mouse.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一句古老的谚语说，如果你不能移除物品，这不是一场匹配游戏。而且，这是正确的！一旦你选择了 globez，一旦你释放鼠标，你必须能够移除它们。
- en: 'Removing globez is very easy: once you know the `visitedTiles` array has at
    least three items, just remove those items from the stage and from the `tileArray`
    array.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 移除 globez 非常简单：一旦你知道 `visitedTiles` 数组至少有三个项目，只需从舞台和 `tileArray` 数组中移除这些项目。
- en: 'Change `onMouseUp` this way:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这样修改 `onMouseUp`：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Setting removed globez with `null` in the `tileArray` array after having physically
    removed them from the stage with `removeChild` will be useful when we want to
    replenish the board.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 `removeChild` 从舞台物理移除已移除的 globez 后，在 `tileArray` 数组中将它们设置为 `null` 将在我们要补充棋盘时很有用。
- en: 'Now, try the game:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试游戏：
- en: '![Removing globez](img/0075OS_09_8.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![移除 globez](img/0075OS_09_8.jpg)'
- en: Did you see? We removed the globez. Now, the game is complete. Wait. No. Once
    you remove the globez, some globez have to fall down and more globez have to appear
    from the top of the screen to refill the stage. We will make them fall down gently
    using a tween.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到了吗？我们移除了 globez。现在，游戏完成了。等等。不。一旦移除 globez，一些 globez 必须坠落，并且更多的 globez 必须从屏幕顶部出现以填充舞台。我们将使用缓动使它们轻轻坠落。
- en: Making the globez fall down
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作 globez 坠落
- en: Once you remove the globez, you will need to check whether there are globez
    with empty spaces below them, and make them fall down accordingly.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦移除 globez，你需要检查是否有空隙在它们下面，并相应地使它们坠落。
- en: Remember, unlike most other languages, Cocos2d-JS sets the origin (0,0) coordinate
    at the bottom left of the stage, so the lowest row is row zero.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，与大多数其他语言不同，Cocos2d-JS 将原点 (0,0) 坐标设置在舞台的左下角，所以最低行是行零。
- en: 'We need to heavily edit `onMouseUp`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要大量编辑 `onMouseUp`：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run the script and see what happens:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本并查看会发生什么：
- en: '![Making the globez fall down](img/0075OS_09_9.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![制作 globez 坠落](img/0075OS_09_9.jpg)'
- en: Once green globez have been removed, the upper globez fall down.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦绿色 globez 被移除，上面的 globez 会坠落。
- en: 'Let''s analyze the code a little:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下代码：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Everything depends on whether we selected more than three globez. Otherwise,
    no globez will be removed, and there will be no need to check for empty spaces:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都取决于我们是否选择了超过三个 globez。否则，不会有 globez 被移除，也就没有必要检查空位：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We start looping through all rows starting from `1`—the next-to-bottomt row—to
    row `fieldsize`-1, which is the topmost row.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 `1` 开始循环所有行，即倒数第二行，到 `fieldsize`-1 行，这是最顶部的行。
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We do the same thing for the columns but, this time, we scan them.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于列我们也做同样的事情，但这次我们扫描它们。
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If in the given position we have a globe, it's time to count how many empty
    spaces we have below it.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在给定位置有一个 globe，那么是时候计算它下面的空位数量了。
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `holesBelow` variable will keep track of the empty spaces below a globe.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`holesBelow` 变量将跟踪地球下方的空位。'
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Starting from the current row and going down to the first, we have to count
    the empty spaces.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 从当前行向下到第一行，我们必须计算空位数量。
- en: '[PRE32]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We find an empty space when its `tileArray` value is null.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当其 `tileArray` 值为 null 时，我们找到空位。
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'And, in this case, we increment the `holesBelow` variable:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们增加 `holesBelow` 变量：
- en: '[PRE34]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Once the loop has finished, we check whether there were holes below:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦循环完成，我们检查是否有洞：
- en: '[PRE35]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Then, move the globe accordingly.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，相应地移动地球。
- en: '[PRE36]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Finally, we can update `tileArray` to register the new position of the globe.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以更新 `tileArray` 以注册地球的新位置。
- en: Now that we managed to make the globez fall down, there is just one more thing
    to do—create new globes to fill the stage again.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们成功地让 globez 下落，只剩下最后一件事要做——创建新的 globez 来再次填充舞台。
- en: Creating new globez
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新的 globez
- en: Creating new globez shares the same concept as making the globez fall. For each
    column, we count the number of empty places; this number is the number of globez
    we have to create.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的 globez 与创建 globez 下落有相同的概念。对于每一列，我们计算空位的数量；这个数量是我们必须创建的 globez 的数量。
- en: In order to create a smooth appearance, each globe will be created outside the
    top of the stage and an animation tween will place it in its right place.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建平滑的外观，每个 globe 都将在舞台顶部之外创建，并通过动画缓动将其放置在正确的位置。
- en: This is the last time we need to modify `onMouseUp`, promise!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们最后一次需要修改 `onMouseUp`，保证！
- en: '[PRE37]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This is the part needed to scan for empty spaces and call the `fallTile` method
    to create a new tile with the destination row, destination column, and falling
    height. We use the falling height to create a smooth tween to the globe's final
    position.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这是扫描空位并调用 `fallTile` 方法以创建新瓷砖的代码，该瓷砖具有目标行、目标列和下落高度。我们使用下落高度来创建一个平滑的缓动到地球最终位置。
- en: 'Here''s the definition for `fallTile`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `fallTile` 的定义：
- en: '[PRE38]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'It''s really similar to the `addTile` method created several pages ago—it was
    a long journey, wasn''t it? And finally Globez is made:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 它真的很像几页前创建的 `addTile` 方法——这是一段漫长的旅程，不是吗？最终 Globez 成功了：
- en: '![Creating new globez](img/0075OS_09_10.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![创建新的 globez](img/0075OS_09_10.jpg)'
- en: Once you remove some globez, new ones will fall down from the top.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你移除了一些 globez，新的 globez 将从顶部落下。
- en: Bonus – using the drawing API for a visual feedback
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 奖励 - 使用绘图 API 进行视觉反馈
- en: As promised, we will use the drawing API to provide a visual feedback of the
    path we are drawing with the mouse.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 正如承诺的那样，我们将使用绘图 API 为我们用鼠标绘制的路径提供视觉反馈。
- en: 'First, let''s create a new global variable to store the layer where we will
    draw the player movement. It''s called `arrowsLayer`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个新的全局变量来存储我们将绘制玩家移动的层。它被称为 `arrowsLayer`：
- en: '[PRE39]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We will create and add `arrowLayer` after `globezLayer` in the `init` function:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `init` 函数中在 `globezLayer` 之后创建和添加 `arrowLayer`：
- en: '[PRE40]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The entity we can draw in is `DrawNode`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以绘制的实体是 `DrawNode`。
- en: 'No matter what happens, when we release the mouse, we will clear the draw area
    using the `clear` method:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 无论发生什么，当我们释放鼠标时，我们将使用 `clear` 方法清除绘图区域：
- en: '[PRE41]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, we know how to clear a draw node and we have to see how to draw lines
    in it. Add a new method call when the player performs a legal move, no matter
    whether you''re selecting a new globe or backtracking:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道如何清除一个绘图节点，并且我们必须看看如何在其中绘制线条。当玩家执行合法移动时，添加一个新的方法调用，无论你是选择一个新的地球还是回溯：
- en: '[PRE42]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'And now the only thing to do is the creation of `touchListener` listener''s
    `drawPath` method:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在唯一要做的就是创建 `touchListener` 监听器的 `drawPath` 方法：
- en: '[PRE43]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: As you can see, I loop through the `visitedTiles` array and use the `drawSegment`
    method to draw a segment from the first `cc.Point` argument to the second.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我遍历 `visitedTiles` 数组，并使用 `drawSegment` 方法从第一个 `cc.Point` 参数绘制到第二个。
- en: Finally, your game is completed. For real!!
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你的游戏完成了。真的！！
- en: '![Bonus – using the drawing API for a visual feedback](img/0075OS_09_11.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![奖励 - 使用绘图API进行视觉反馈](img/0075OS_09_11.jpg)'
- en: Look how you can draw lines with the mouse, connecting the various globez you
    selected.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 看看你是如何用鼠标绘制线条，连接你选择的各个Globez。
- en: Where to go now
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在去哪里
- en: Normally, each chapter ends with a summary heading; anyway, this time I don't
    think you need a summary. I mean, you made several games, from a Concentration
    to Sokoban, from an endless runner to Globez.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，每个章节都以一个总结标题结束；无论如何，这次我认为你不需要总结。我的意思是，你已经制作了几个游戏，从注意力集中到推箱子，从无尽跑酷到Globez。
- en: First, I want to thank you for reading the entire book, and I hope you enjoyed
    reading it as much as I enjoyed writing it.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我想感谢你阅读整本书，我希望你阅读它的时候和我写作它的时候一样享受。
- en: Although you created several games, this is just the beginning of a long journey
    into cross-platform game development.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你创建了几个游戏，但这只是进入跨平台游戏开发漫长旅程的开始。
- en: First, you should complete the game by adding sounds, a scoring system, and
    some other features I am sure you know how to add, now that you are reading these
    final pages.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你应该通过添加声音、计分系统和一些其他功能来完善游戏，我相信你现在阅读这些最后几页时已经知道如何添加了。
- en: Then, I just want to point you to three sites you may find useful if you want
    to dive into cross-platform HTML5 development.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我只是想指出三个你可能觉得有用的网站，如果你想要深入研究跨平台HTML5开发。
- en: Protect your code
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护你的代码
- en: 'As your games were written in JavaScript, anyone can look at your code simply
    by directly looking at the HTML of your pages. There are several tools to obfuscate
    your code to make it unreadable—or at least to make life really hard for code
    lurkers. I selected two of them:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你的游戏是用JavaScript编写的，任何人都可以通过直接查看你页面的HTML来查看你的代码。有几个工具可以混淆你的代码，使其难以阅读——或者至少让代码偷窥者感到非常困难。我选择了其中两个：
- en: '**Javascript Obfuscator** ([http://javascriptobfuscator.com/](http://javascriptobfuscator.com/)):
    This is an online free tool to obfuscate your code; just copy-and-paste your code
    or upload small files and it does the hard work for you.'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**JavaScript混淆器** ([http://javascriptobfuscator.com/](http://javascriptobfuscator.com/))：这是一个在线免费工具，用于混淆你的代码；只需复制并粘贴你的代码或上传小文件，它就会为你完成艰苦的工作。'
- en: '**JScrambler** ([https://jscrambler.com](https://jscrambler.com)): This is
    the one I currently use and recommend. This allows you a lot of obfuscation levels,
    mobile gaming optimizations, site-locking, expiration dates, and many more. Just
    drag-and-drop your project and download the protected version.'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**JScrambler** ([https://jscrambler.com](https://jscrambler.com))：这是我目前使用并推荐的。它为你提供了很多混淆级别、移动游戏优化、网站锁定、到期日期等功能。只需拖放你的项目并下载受保护的版本。'
- en: Port your game on mobile devices as a native app
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将你的游戏作为原生应用移植到移动设备上
- en: 'Once your game is running on each browser, you may be tempted to convert it
    into a native mobile app to try to conquer new markets. There are three awesome
    tools that allow you to create mobile apps starting from HTML, CSS, and JavaScript:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的游戏在每个浏览器上运行，你可能会想将其转换为原生移动应用，以尝试征服新市场。有三个出色的工具允许你从HTML、CSS和JavaScript创建移动应用：
- en: 'Cocos2D proprietary JSB API ([http://www.cocos2d-x.org/wiki/Basic_usage_of_JSB_API](http://www.cocos2d-x.org/wiki/Basic_usage_of_JSB_API)):
    This is the official API to bind C++ to JavaScript. Starting from a Cocos2d-iphone
    or Cocos2d-x project, you can have all graphics, rendering, and physics code running
    natively with the game logic running JavaScript.'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cocos2D专有JSB API ([http://www.cocos2d-x.org/wiki/Basic_usage_of_JSB_API](http://www.cocos2d-x.org/wiki/Basic_usage_of_JSB_API))：这是将C++绑定到JavaScript的官方API。从Cocos2d-iphone或Cocos2d-x项目开始，你可以让所有图形、渲染和物理代码以原生方式运行，而游戏逻辑则以JavaScript运行。
- en: '**PhoneGap** ([http://phonegap.com/](http://phonegap.com/)): This application
    works both from your computer using native SDKs and from the cloud. PhoneGap compiles
    your HTML5 games, creating native apps ready to be published in markets such as
    Apple App Store. I used it to create the iOS version of BWBan ([https://itunes.apple.com/us/app/bwban/id783208885?mt=8](https://itunes.apple.com/us/app/bwban/id783208885?mt=8)),
    starting from an HTML5 game.'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**PhoneGap** ([http://phonegap.com/](http://phonegap.com/))：这个应用既可以从你的电脑使用原生SDK运行，也可以从云端运行。PhoneGap编译你的HTML5游戏，创建原生应用，准备在苹果应用商店等市场发布。我用它创建了BWBan的iOS版本
    ([https://itunes.apple.com/us/app/bwban/id783208885?mt=8](https://itunes.apple.com/us/app/bwban/id783208885?mt=8))，从一个HTML5游戏开始。'
- en: '**CocoonJS** ([https://www.ludei.com/cocoonjs/](https://www.ludei.com/cocoonjs/)):
    This platform provides you with a platform to test, accelerate, deploy, and monetize
    your HTML5 apps and games on all mobile devices with many interesting features
    to help you deliver great web products faster.'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**CocoonJS** ([https://www.ludei.com/cocoonjs/](https://www.ludei.com/cocoonjs/)):
    这个平台为你提供了一个平台来测试、加速、部署和货币化你的HTML5应用和游戏，在所有移动设备上都有许多有趣的功能，帮助你更快地交付优秀的网络产品。'
- en: Publishing your game
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布你的游戏
- en: 'Making games is fun, but having people playing your games is even more fun.
    Here are the two top gaming portals where you should upload your games to receive
    plays, ratings, comments, and feedback:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 制作游戏很有趣，但让人们玩你的游戏更有趣。以下是两个顶级游戏门户，你应该上传你的游戏以获得播放、评分、评论和反馈：
- en: '**Newgrounds** ([http://www.newgrounds.com/](http://www.newgrounds.com/)):
    This web gaming portal has a collection of the best indie audios, web movies,
    and games made by developers all around the world.'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Newgrounds** ([http://www.newgrounds.com/](http://www.newgrounds.com/)):
    这个网页游戏门户收集了来自世界各地开发者的最佳独立音频、网络电影和游戏。'
- en: '**Kongregate** ([http://www.kongregate.com/](http://www.kongregate.com/)):
    This is my favorite web gaming portal; it also offers an interesting revenue share.'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Kongregate** ([http://www.kongregate.com/](http://www.kongregate.com/)):
    这是我的最爱网页游戏门户；它还提供有趣的收益分成。'
- en: Licensing your game
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 许可你的游戏
- en: 'Game publishers are always looking for quality games and are willing to pay
    you to license them to use and customize your game. Unfortunately, it''s not that
    easy to get in touch with them and get enough attention. Luckily, there''s a service
    that does the hard job for you, showing your game to hundreds of potential buyers:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏发行商一直在寻找高质量的游戏，并愿意支付你许可他们使用和定制你的游戏。不幸的是，与它们取得联系并获得足够的关注并不容易。幸运的是，有一个服务为你做了这项艰苦的工作，向数百位潜在买家展示你的游戏：
- en: '**FGL** ([https://www.fgl.com/](https://www.fgl.com/)): This is the industry''s
    leading distribution and monetization services for HTML5, Android, iOS, Unity,
    and Flash. I got several sponsorships, thanks to FGL. I highly recommend working
    with them.'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**FGL** ([https://www.fgl.com/](https://www.fgl.com/)): 这是HTML5、Android、iOS、Unity和Flash行业领先的分发和货币化服务。多亏了FGL，我获得了几个赞助。我强烈推荐与他们合作。'
- en: Staying up-to-date
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持最新
- en: 'The HTML5 gaming market is a new market changing almost daily. You will need
    to stay up-to-date to know news and trends. There''s one forum I highly recommend:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5游戏市场是一个几乎每天都在变化的新市场。你需要保持最新，以了解新闻和趋势。这里有一个我强烈推荐的论坛：
- en: '**HTML5GameDevs** ([http://www.html5gamedevs.com/](http://www.html5gamedevs.com/)):
    This is the top HTML5 Game Dev forum with articles, game releases, frameworks,
    demos, videos, tutorials, blog posts, and more.'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**HTML5GameDevs** ([http://www.html5gamedevs.com/](http://www.html5gamedevs.com/)):
    这是顶级HTML5游戏开发论坛，有文章、游戏发布、框架、演示、视频、教程、博客文章等。'
- en: And obviously, my blog, [http://www.emanueleferonato.com/](http://www.emanueleferonato.com/),
    is updated with almost daily news and tutorials.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，我的博客[http://www.emanueleferonato.com/](http://www.emanueleferonato.com/)几乎每天都有新闻和教程更新。
- en: Finally, you can refer to the official Cocos2d-JS site, [http://www.cocos2d-x.org/wiki/Cocos2d-JS](http://www.cocos2d-x.org/wiki/Cocos2d-JS),
    where you can find all new releases and under-development features.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以参考官方Cocos2d-JS网站[http://www.cocos2d-x.org/wiki/Cocos2d-JS](http://www.cocos2d-x.org/wiki/Cocos2d-JS)，在那里你可以找到所有新发布和正在开发的功能。
- en: Summary
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this last chapter, you created a complete prototype of a Match-3 game using
    most of the features you learned during the reading of this book. Now, you should
    be able to create your own games starting from scratch, porting your ideas from
    pencil and paper to modern web browsers and mobile devices.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章中，你使用这本书阅读过程中学到的几乎所有功能创建了一个完整的Match-3游戏原型。现在，你应该能够从头开始创建自己的游戏，将你的想法从纸笔转移到现代网络浏览器和移动设备上。
