- en: Chapter 5.  Creating a Store Locator Application with MongoDB Geospatial Query
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用MongoDB地理空间查询创建门店定位器应用程序
- en: In this chapter, we will build an application to store **Geolocation** data
    with coordinates (latitude and longitude) and show them on the map by only using
    resources of the express framework, the **Google Maps API,** and pure JavaScript.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个应用程序，仅使用express框架、Google地图API和纯JavaScript存储**地理位置**数据的坐标（纬度和经度），并在地图上显示它们。
- en: It is very common nowadays to use JavaScript libraries for this purpose, but
    most of them are used only on the frontend of the application, often consuming
    an endpoint with data in JSON format and updating the UI using Ajax. But we will
    use only JavaScript on the backend, building a MVC application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，使用JavaScript库是非常常见的，但大多数情况下它们仅用于应用程序的前端，通常使用JSON格式的数据消耗端点，并使用Ajax更新UI。但是我们将仅在后端使用JavaScript，构建一个MVC应用程序。
- en: Also, we will use a very powerful feature from MongoDB which is the ability
    to generate indexes in coordinates the using operators such as `$near`, `$geometry`,
    and others, to locate certain records in a map that are next to a particular location.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将使用MongoDB的一个非常强大的功能，即能够在坐标中生成索引，使用诸如`$near`、`$geometry`等操作符，以定位地图中靠近特定位置的某些记录。
- en: 'In this chapter we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating models/schema to store coordinates in MongoDB
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MongoDB中创建用于存储坐标的模型/架构
- en: Creating *2d*spheres indexes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建*2d*球体索引
- en: Dealing with the Google Maps API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理Google Maps API
- en: Dealing with the HTML5 Geolocation API
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理HTML5地理位置API
- en: Mixing Swig variables with pure JavaScript inside templates
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模板中混合Swig变量和纯JavaScript
- en: What we are building
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们正在构建什么
- en: 'In this chapter, we will be building a store locator application and a simple
    add store interface. The result will be as shown in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个门店定位器应用程序和一个简单的添加门店界面。结果如下截图所示：
- en: '![What we are building](img/image_05_001.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![我们正在构建什么](img/image_05_001.jpg)'
- en: Home Screen
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 主屏幕
- en: Creating the baseline application
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基线应用程序
- en: 'We will use the same version of the `express-generator` that we used in [Chapter
    4](ch04.html "Chapter 4. Dont Take a Photograph, Make It – An App for Photographers"),
    *Don''t Take a Photograph, Make it - An App for Photographers*. This time, we
    do not need any additional modules to complete our task:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与[第4章](ch04.html "第4章。不要拍照，创造它-为摄影师设计的应用程序")中使用的`express-generator`相同的版本，*不要拍照，创造它-为摄影师设计的应用程序*。这次，我们不需要任何额外的模块来完成我们的任务：
- en: Create a folder called `chapter05`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`chapter05`的文件夹。
- en: 'Open your terminal/shell within the `chapter05` folder and type the following
    command:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter05`文件夹中打开您的终端/ shell并输入以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that we already installed the `generator-express` in [chapter 04](ch04.html
    "Chapter 4. Dont Take a Photograph, Make It – An App for Photographers"), *Don't
    Take a Photograph, Make it - An App for Photographers*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经在[第4章](ch04.html "第4章。不要拍照，创造它-为摄影师设计的应用程序")中安装了`generator-express`。
- en: 'Now, fill in the questions in this order:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照以下顺序填写问题：
- en: 'Choose `N`: we have already created a folder'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择`N`：我们已经创建了一个文件夹
- en: 'Choose `MVC`: for the application type'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择`MVC`：作为应用程序类型
- en: 'Choose `Swig`: for the template engine'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择`Swig`：作为模板引擎
- en: 'Choose `None`: for the CSS preprocessor'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择`None`：作为CSS预处理器
- en: 'Choose `MongoDb`: for the database'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择`MongoDb`：作为数据库
- en: 'Choose `Gulp`: for LiveReload and other stuff'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择`Gulp`：用于LiveReload和其他功能
- en: Tip
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Don't worry about `Gulp` if you've never heard of it; later in the book we will
    see and explain some building tools.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从未听说过`Gulp`，不要担心；在本书的后面，我们将看到并解释一些构建工具。
- en: Refactoring the default structure
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构默认结构
- en: 'As we know, and as we have done previously, we need to make some adjustments
    in our application structure to make it more scalable and follow our MVC pattern:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，并且正如我们之前所做的，我们需要对我们的应用程序结构进行一些调整，以使其更具可扩展性并遵循我们的MVC模式：
- en: Inside the `app/views` folder, create a folder called `pages`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/views`文件夹中，创建一个名为`pages`的文件夹。
- en: Inside the `app/views` folder, create a folder called `partials`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/views`文件夹中，创建一个名为`partials`的文件夹。
- en: Move all files at the root of the `views` folder to the `pages` folder.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有文件从`views`文件夹移动到`pages`文件夹。
- en: Creating partial views for footer and head
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为页脚和页眉创建部分视图
- en: 'Now, as a best practice, let''s create some partials files for footer and head:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，作为最佳实践，让我们为页脚和页眉创建一些部分文件：
- en: Create a file called `footer.html` inside `app/view/partials/`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/view/partials/`中创建一个名为`footer.html`的文件。
- en: Create a file called `head.html` inside `app/view/partials/`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/view/partials/`中创建一个名为`head.html`的文件。
- en: Setting Swig template to use HTML extension
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Swig模板设置为使用HTML扩展名
- en: 'As you can see, we used the `.html` file extension, unlike the previous example
    where we use the `.swig` file extension. Because of this, we need to change the
    express `app.engine` configuration file, so that it uses this type of extension:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们使用了`.html`文件扩展名，与之前的示例不同，我们使用了`.swig`文件扩展名。因此，我们需要更改express `app.engine`配置文件，以便使用这种类型的扩展名：
- en: Open the `express.js` file from `app/config/`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`app/config/`中打开`express.js`文件。
- en: 'Replace the following highlighted lines of code:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 替换以下突出显示的代码行：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This way we can use the `.html` file extension inside the applications templates.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就可以在应用程序模板中使用`.html`文件扩展名。
- en: Creating partial files
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建部分文件
- en: 'Now it''s time to create the partials file itself:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建部分文件本身了：
- en: 'Open `head.html` from `app/views/partials` and add the following code:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`app/views/partials`中打开`head.html`并添加以下代码：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Note that we already included a `CSS` framework called `materialize.css` and
    the Google maps API link: `<script src="img/js?key=<YOUR API KEY GOES HERE>"></script>`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经包含了一个名为`materialize.css`的`CSS`框架和Google地图API链接：<script src="img/js?key=<YOUR
    API KEY GOES HERE>"></script>
- en: 'Open `footer.html` from `app/views/partials` and add the following code:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`app/views/partials`打开`footer.html`并添加以下代码：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating applications template files
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建应用程序模板文件
- en: 'Now we will replace the contents of the template files created by the `generator`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将替换`generator`创建的模板文件的内容：
- en: 'Open `index.html` from `app/views/pages/` and add the following code:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/views/pages/`中的`index.html`并添加以下代码：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note the `getCurrentPosition.js` file added to `index.html` template.Later in
    this chapter we will explain what happens with this file.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`getCurrentPosition.js`文件添加到`index.html`模板中。在本章的后面，我们将解释这个文件发生了什么。
- en: 'Open `layout.html` from `app/views/pages/` and add the following code:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/views/pages/`中的`layout.html`并添加以下代码：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open `error.html` from `app/views/pages/` and add the following code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/views/pages/`中的`error.html`并添加以下代码：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now we have the necessary baseline to start the application development, but
    we need to set up the `getCurrentPosition.js` file.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了开始应用程序开发所需的基线，但我们需要设置`getCurrentPosition.js`文件。
- en: Using the Geolocation HTML5 API
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Geolocation HTML5 API
- en: 'We can use various resources to get the user''s position, so we are using the
    **HTML5 API** in this example. We will use an external JavaScript file to create
    a map with the exact location of the user:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用各种资源来获取用户的位置，所以在这个例子中我们使用了**HTML5 API**。我们将使用外部JavaScript文件来创建一个显示用户精确位置的地图：
- en: Create a file called `getCurrentPosition.js` and save it within the `public/js`
    folder.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`getCurrentPosition.js`的文件，并将其保存在`public/js`文件夹中。
- en: 'Place the following code in `getCurrentPosition.js`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码放入`getCurrentPosition.js`中：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'So, when we go to `http://localhost:3000/`, we can see our address pointed
    out on the map, as in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们转到`http://localhost:3000/`时，我们可以在地图上看到我们的地址指出，就像以下屏幕截图中一样：
- en: '![Using the Geolocation HTML5 API](img/image_05_002.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![使用Geolocation HTML5 API](img/image_05_002.jpg)'
- en: Home Screen with Geolocation activated
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 启用地理定位的主屏幕
- en: Tip
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that your browser will ask permission to track your location
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您的浏览器将请求权限以跟踪您的位置
- en: Creating the application controller
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序控制器
- en: 'Now the next step is to create the application controller''s:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的下一步是创建应用程序控制器：
- en: 'Create a new file called `locations.js` inside `app/controllers/` and add the
    following code:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/controllers/`文件夹中创建一个名为`locations.js`的新文件，并添加以下代码：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note that we placed a fixed location to center the map and created 3 routes:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们放置了一个固定的位置来居中地图，并创建了3条路线：
- en: '`router.get(''/locations'',...);` to get all the locations from MongoDB'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`router.get(''/locations'',...);`以从MongoDB获取所有位置'
- en: '`router.get(''/locations/add'',...);` to render the add location form'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`router.get(''/locations/add'',...);`以呈现添加位置表单'
- en: '`router.post(''/locations'',...);` to add the new location to MongoDB'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`router.post(''/locations'',...);`以将新位置添加到MongoDB'
- en: 'Another important point to mention is the commented code on `get(/locations)`
    :'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的要点是`get(/locations)`上的注释代码：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This way we can return a pure JSON object instead to render a template with
    variables.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们可以返回一个纯JSON对象，而不是使用变量渲染模板。
- en: Creating models
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: 'Now let''s create our model to hold the location data:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建我们的模型来保存位置数据：
- en: 'Inside the `app/models` folder, create a file called `locations.js` and add
    the following code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app/models`文件夹中，创建一个名为`locations.js`的文件，并添加以下代码：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It's important to note the data type of the coordinates property and the index
    of 2dsphere on the previous code.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是注意前一个代码中坐标属性的数据类型和2dsphere的索引。
- en: Tip
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can read more about 2dsphere in the official documentation of MongoDB at:
    [https://docs.mongodb.com/manual/core/2dsphere/](https://docs.mongodb.com/manual/core/2dsphere/).'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在MongoDB的官方文档中阅读有关2dsphere的更多信息：[https://docs.mongodb.com/manual/core/2dsphere/](https://docs.mongodb.com/manual/core/2dsphere/)。
- en: Creating the views template
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建视图模板
- en: 'Now let''s create the `view` file. This file is very important for our application,
    because that is where we integrate the resources of `Swig` variables with our
    JavaScript code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建`view`文件。这个文件对我们的应用程序非常重要，因为这是我们将`Swig`变量资源与我们的JavaScript代码集成的地方：
- en: Create a file called `locations.html` and save it within the `app/views/pages/`
    folder.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`locations.html`的文件，并将其保存在`app/views/pages/`文件夹中。
- en: 'Place the following code inside the `locations.html` file:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码放入`locations.html`文件中：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The previous code is pretty simple; we just have an empty `map` div:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个代码非常简单；我们只有一个空的`map` div：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We also have a simple form with a `POST` method to find the nearest location
    based on latitude and longitude:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个简单的表单，使用`POST`方法根据纬度和经度查找最近的位置：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Creating the views template](img/image_05_003.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![创建视图模板](img/image_05_003.jpg)'
- en: Screenshot of locations.html
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: locations.html的屏幕截图
- en: 'The most important code comes next:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来最重要的代码是：
- en: 'Add the following code at the end of the `locations.html` file:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`locations.html`文件的末尾添加以下代码：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This code snippet does many things, including creating a new object map:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码片段做了很多事情，包括创建一个新的地图对象：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And it adds the marks or points that came from MongoDB and are inside the loop
    of location the object:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 它还添加了来自MongoDB并位于位置对象循环内的标记或点：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You can see that each line of the previous code has a comment; in this way it
    is very easy to understand what is happening to each line.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到上一个代码的每一行都有一个注释；这样很容易理解每一行发生了什么。
- en: Let's create a new file. Create a file called `add-location.html` and save it
    within the `app/views/pages/` folder.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个新文件。创建一个名为`add-location.html`的文件，并将其保存在`app/views/pages/`文件夹中。
- en: 'Place the following code in the `add-location.html` file:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码放入`add-location.html`文件中：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is a simple form to add some locations to MongoDB, and will look like
    the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的表单，用于将一些位置添加到MongoDB，并且将看起来像以下屏幕截图：
- en: '![Creating the views template](img/image_05_004.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![创建视图模板](img/image_05_004.jpg)'
- en: Screenshot of add-location.html
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: add-location.html的屏幕截图
- en: Adding locations to MongoDB
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将位置添加到MongoDB
- en: Now is the fun part of our application. We need to insert the records in our
    application; for didactic purposes, we will use the form (`add-location.html`)
    to insert the records one by one.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是我们应用程序的有趣部分。我们需要在我们的应用程序中插入记录；出于教学目的，我们将使用表单（`add-location.html`）逐个插入记录。
- en: The example shows how to insert a record, and you should do the same for others.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例展示了如何插入一条记录，您应该对其他记录执行相同的操作。
- en: Tip
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can skip this step and load the sample file that populates its database,
    but we recommend you follow the steps in this book.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以跳过这一步，加载填充数据库的示例文件，但我们建议您按照本书中的步骤进行操作。
- en: At the end of this example, we will explain how to load all records at once
    using RoboMongo panel.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例结束时，我们将解释如何使用RoboMongo面板一次加载所有记录。
- en: 'Open terminal/shell at the project root folder and type the following command:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根文件夹打开终端/Shell，并输入以下命令：
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that you must have your MongoDB up and running before taking the previous
    action.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在执行上述操作之前，您必须确保您的MongoDB已经启动。
- en: 'Go to `http://localhost:3000/locations/add` and fill in the form with the following
    information:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`http://localhost:3000/locations/add`，并填写以下信息的表单：
- en: Tip
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Note you he map center to your own location too, at the `locations.js` controller
    on latitude and longitude properties:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您也需要将地图中心设置为您自己的位置，在`locations.js`控制器的纬度和经度属性上：
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Title = **Republica**
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 标题 = **Republica**
- en: Longitude = **-46.642748**
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 经度 = **-46.642748**
- en: Latitude = **-23.54312**
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 纬度 = **-23.54312**
- en: Press the **SUBMIT** button and you will see a success message above the map.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**提交**按钮，您将在地图上方看到一个成功消息。
- en: 'Now we will add the next seven locations using the RoboMongo interface. Copy
    the following code:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将使用RoboMongo界面添加接下来的七个位置。复制以下代码：
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: On the RoboMongo interface, select the maps-api-development database on the
    left-hand panel.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在RoboMongo界面上，选择左侧面板上的maps-api-development数据库。
- en: Paste the code inside the RoboMongo interface:![Adding locations to MongoDB](img/image_05_005.jpg)
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码粘贴到RoboMongo界面中：![将位置添加到MongoDB](img/image_05_005.jpg)
- en: Screenshot of RoboMongo interface terminal
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: RoboMongo界面终端的截图
- en: 'Let''s check the result: double-click on **locations** collection, on the left-hand
    menu.'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们来检查结果：双击左侧菜单上的**locations**集合。
- en: On the right-hand side of the RoboMongo view, click **view result in table mode**;
    you will see the following result:![Adding locations to MongoDB](img/image_05_006.jpg)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在RoboMongo视图的右侧，点击**以表格模式查看结果**；您将看到以下结果：![将位置添加到MongoDB](img/image_05_006.jpg)
- en: Screenshot of the RoboMongo panel
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: RoboMongo面板的截图
- en: At this time, we already have all locations inside our map on http://localhost:3000/locations,
    but the find nearby stores form is still not working, so we need to set up a MongoDB
    2dsphere index.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经在http://localhost:3000/locations的地图上有了所有位置，但是附近商店的查找表单仍然无法工作，因此我们需要设置一个MongoDB
    2dsphere索引。
- en: Understanding Geospatial indexes on MongoDB
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解MongoDB上的地理空间索引
- en: Starting from version *2.4* of MongoDB, we have the Geospatial search feature
    using **GeoJSON** format.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 从MongoDB的*2.4*版本开始，我们可以使用**GeoJSON**格式进行地理空间搜索。
- en: Tip
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can find more information about GeoJSON at the official link: [http://geojson.org/](http://geojson.org/).'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方链接处找到有关GeoJSON的更多信息：[http://geojson.org/](http://geojson.org/)。
- en: '**GeoJSON** is an open source specification for formatting shapes in coordinates.
    It is widely used and very useful for making applications with geographical data.
    The format is pretty simple, and we used this format on the locations model, as
    you can see:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**GeoJSON**是一个用于格式化坐标形状的开源规范。它被广泛使用，并且非常适用于使用地理数据制作应用程序。这种格式非常简单，我们在位置模型中使用了这种格式，正如您所看到的：'
- en: '[PRE21]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The highlighted code is the GeoJSON format to store coordinates.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 突出显示的代码是用于存储坐标的GeoJSON格式。
- en: Tip
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can read more about Geospatial query on MongoDB here: [https://docs.mongodb.com/manual/reference/operator/query-geospatial/](https://docs.mongodb.com/manual/reference/operator/query-geospatial/),
    and more geospatial indexes here: [https://docs.mongodb.com/manual/applications/geospatial-indexes/](https://docs.mongodb.com/manual/applications/geospatial-indexes/).'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里阅读更多关于MongoDB上的地理空间查询：[https://docs.mongodb.com/manual/reference/operator/query-geospatial/](https://docs.mongodb.com/manual/reference/operator/query-geospatial/)，以及更多地理空间索引信息：[https://docs.mongodb.com/manual/applications/geospatial-indexes/](https://docs.mongodb.com/manual/applications/geospatial-indexes/)。
- en: Creating 2dsphere indexes in MongoDB
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在MongoDB中创建2dsphere索引
- en: 'Let''s check our locations collection in MongoDB:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在MongoDB中检查我们的位置集合：
- en: Open your RoboMongo and select the **maps-api-development** database on the
    left panel.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的RoboMongo，并在左侧面板上选择**maps-api-development**数据库。
- en: Double-click on **locations** collection, and you will see the following data:![Creating
    2dsphere indexes in MongoDB](img/image_05_007.jpg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击**locations**集合，您将看到以下数据：![在MongoDB中创建2dsphere索引](img/image_05_007.jpg)
- en: Screenshot of the locations collection before index
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 索引之前的位置集合截图
- en: You will note that we have just one folder with an **id** index; this is the
    default from MongoDB.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们只有一个带有**id**索引的文件夹；这是MongoDB的默认设置。
- en: 'Copy the following code and place in the RoboMongo interface:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制以下代码并粘贴到RoboMongo界面中：
- en: '[PRE22]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Click on the **play** button in the top-right menu bar.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角菜单栏中的**播放**按钮。
- en: 'The result will be like the following screenshot:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下截图所示：
- en: '![Creating 2dsphere indexes in MongoDB](img/image_05_008.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![在MongoDB中创建2dsphere索引](img/image_05_008.jpg)'
- en: Screenshot after ensure.index()
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: ensure.index()后的截图
- en: Note that now we have created the 2dsphere indexes.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，现在我们已经创建了2dsphere索引。
- en: Checking the Geolocation application
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查地理位置应用
- en: 'This is the time to test the application. We have already created eight records
    in our database, already indexed all positions using the ensure.index () MongoDB,
    and we can already see all the points rendered in the map, as we can see in the
    following screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是测试应用程序的时候了。我们已经在我们的数据库中创建了八条记录，已经使用ensure.index() MongoDB对所有位置进行了索引，我们已经可以在地图中看到所有点的渲染，就像下面的截图中所看到的那样：
- en: '![Checking the Geolocation application](img/image_05_009.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![检查地理位置应用](img/image_05_009.jpg)'
- en: Screenshot from locations.html
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: locations.html的截图
- en: In this previous screenshot, you may notice that the points raised in the map
    are away from each other, which is able to show the difference in the distance
    of points shown when we change the distance search field.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个屏幕截图中，您可能会注意到地图上的点彼此之间相距较远，这能够显示当我们改变距离搜索字段时所显示的点之间的距离差异。
- en: In this example, we can insert any latitude and longitude in the search field,
    but we leave this field fixed only to illustrate the geolocation functionality
    of the application.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们可以在搜索栏中插入任何纬度和经度，但我们只是固定这个字段来说明应用程序的地理定位功能。
- en: 'When we access the locations route for the first time, we show all records
    in the database, as we saw in the previous screenshot:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们首次访问位置路由时，我们会显示数据库中的所有记录，就像我们在上一个屏幕截图中看到的那样。
- en: Let's change the distance on the locations.html form to check what happens;
    go to http://localhost:3000/locations, select *2km* in the **Distance** field,
    and press the **SUBMIT** button.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改变locations.html表单上的距离，看看会发生什么；转到http://localhost:3000/locations，在**距离**字段中选择*2km*，然后点击**提交**按钮。
- en: 'The result of our new query in MongoDB using the $near and $geometry functions
    will be as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在MongoDB中使用$near和$geometry函数进行新查询的结果将如下所示：
- en: '![Checking the Geolocation application](img/image_05_010.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![检查地理定位应用程序](img/image_05_010.jpg)'
- en: Screenshot of locations page filtered by 2km
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过2km筛选的位置页面的屏幕截图
- en: This is very useful information for a store locator application, but we cannot
    see where the nearest point we are seeking is. To facilitate this view, we will
    add a list of points on the map, on the left-hand side, listed in order from the
    nearest to the furthest point.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于商店定位应用程序来说是非常有用的信息，但我们无法看到我们正在寻找的最近点在哪里。为了方便查看，我们将在地图上的左侧添加一个点列表，按从最近到最远的顺序列出。
- en: Ordering points by distance
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按距离排序点
- en: 'Let''s add some code lines to make our search more intuitive:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些代码行，使我们的搜索更直观：
- en: 'Add the following lines on app/views/pages/locations.html, between the highlighted
    code:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在app/views/pages/locations.html中添加以下行，在突出显示的代码之间：
- en: '[PRE23]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Tip
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that you can download the full code on the Packt Publishing website or
    on the official GitHub repository of the book.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以在Packt Publishing网站或本书的官方GitHub存储库上下载完整的代码。
- en: 'Add the following function, at the end of locations.html right after the {%
    endfor %} loop:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在{% endfor %}循环之后，在locations.html的末尾添加以下函数：
- en: '[PRE24]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now when we go back to the locations page, we can see a list of points on the
    left-hand side of the map, ordered by distance. See the following screenshot:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们返回到位置页面时，我们可以看到地图左侧按距离排序的点列表。请参阅下面的屏幕截图：
- en: '![Ordering points by distance](img/image_05_011.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![按距离排序点](img/image_05_011.jpg)'
- en: Screenshot of the stores list on the left-hand side
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧商店列表的屏幕截图
- en: 'And now we can click on any store on the left-panel. We can also zoom in on
    the map, as we can see in the following screenshot:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以点击左侧面板上的任何商店。我们还可以放大地图，如下面的屏幕截图所示：
- en: '![Ordering points by distance](img/image_05_012.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![按距离排序点](img/image_05_012.jpg)'
- en: Screenshot of locations.html with a store selected
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 选定商店的locations.html屏幕截图
- en: Summary
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered a lot of things related to the Google Maps API and
    the Geospatial query on MongoDB, and built a full store locator application using
    Node.js and a few default Express modules.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了许多与Google Maps API和MongoDB上的地理空间查询相关的内容，并使用Node.js和一些默认的Express模块构建了一个完整的商店定位器应用程序。
- en: We covered such important points as the GeoJSON file format and how to create
    geospatial indexes on MongoDB.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们涵盖了诸如GeoJSON文件格式以及如何在MongoDB上创建地理空间索引等重要内容。
- en: This chapter closes a series of five chapters covering MVC design patterns using
    different template engines and techniques. In the next chapter we will see how
    to build a Node.js API using some different tools to create and test the API.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束了涵盖使用不同模板引擎和技术的MVC设计模式的五章系列。在下一章中，我们将看到如何使用一些不同的工具来创建和测试API，构建一个Node.js
    API。
