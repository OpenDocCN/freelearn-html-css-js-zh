- en: Chapter 11. Using Force
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 使用力
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Using gravity and charge
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用重力和电荷
- en: Customizing velocity
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义速度
- en: Setting the link constraint
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置链接约束
- en: Using force to assist visualization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用力来辅助可视化
- en: Manipulating force
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作力
- en: Building a force-directed graph
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建力导向图
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: '*Use the force, Luke!*'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*使用力量，卢克！*'
- en: '*A master''s words of wisdom to his apprentice*'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**师傅对徒弟的智慧之言**'
- en: 'In this chapter, we will cover one of the most fascinating aspects of D3: force.
    Force simulation is one of the most awe-inspiring techniques that you can add
    to your visualization. Through a number of highly interactive and fully functional
    examples, we will help you explore not only the typical application of D3 force
    (for example, the force-directed graph), but also other essential aspects of force
    manipulation.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖D3最迷人的方面之一：力。力模拟是您可以添加到可视化中的一种最令人敬畏的技术。通过一系列高度交互和完全功能性的示例，我们将帮助您探索D3力（例如，力导向图）的典型应用，以及力操作的其他基本方面。
- en: D3 force simulation support was created not as a separate capability, but rather
    as a kind of additional D3 layout. As we mentioned in [Chapter 9](ch09.html "Chapter 9. Lay
    Them Out"), *Lay Them Out*, D3 layouts are nonvisual data-oriented layout management
    programs designed to be used with different visualization. Force simulation was
    originally created for the purpose of implementing a specific type of visualization
    called **force-directed graph**. Its implementation uses standard **velocity**
    **verlet integration** simulating physical forces on particles.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: D3力模拟支持并非作为一个独立的功能，而是一种额外的D3布局。正如我们在[第9章](ch09.html "第9章。布局")中提到的，“布局”，D3布局是非视觉数据导向的布局管理程序，旨在与不同的可视化一起使用。力模拟最初是为了实现一种称为**力导向图**的特定类型可视化而创建的。其实现使用标准的**速度**
    **Verlet积分**来模拟粒子上的物理力。
- en: 'In other words, D3 implements a numeric method that is capable of loosely simulating
    the motion of particles using its velocity with stepped temporal functions. This
    kind of simulation, of course, was ideal in implementing particular visualization,
    such as a force-directed graph; however, you will also discover through recipes
    in this chapter that force simulation is capable of generating many other interesting
    visualization effects, thanks to its flexibility in custom force manipulation.
    The application of such techniques introduced in this chapter goes even beyond
    the data visualization realm and has practical applications in many other domains,
    for example, user interface design. Of course, in this chapter, we will also cover
    the classical application of force: the force-directed graph.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，D3实现了一种数值方法，它能够使用步进时间函数通过其速度松散地模拟粒子的运动。当然，这种模拟在实现特定可视化（如力导向图）方面是理想的；然而，您也会在本章的菜谱中发现，力模拟能够生成许多其他有趣的视觉效果，这得益于其在自定义力操作方面的灵活性。本章中介绍的技术应用甚至超出了数据可视化领域，并在许多其他领域有实际应用，例如用户界面设计。当然，在本章中，我们还将涵盖力的经典应用：力导向图。
- en: Using gravity and charge
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用重力和电荷
- en: 'In this recipe, we will introduce you to the first two fundamental forces:
    gravity and charge. As we have mentioned before, one objective of force layout''s
    design is to loosely simulate the motion of particles, and one major feature of
    this simulation is the force of charge. Additionally, force simulation also implements
    pseudo gravity, or more accurately, a weak geometric constraint typically centered
    on the canvas that can be leveraged to keep your visualization from escaping the
    canvas. In the following example, you will learn how these two fundamental, sometimes
    opposing, forces can be leveraged to generate various effects with a particle
    system.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将向您介绍前两种基本力：重力和电荷。正如我们之前提到的，力布局设计的一个目标是对粒子的运动进行松散模拟，而这个模拟的一个主要特点是电荷力。此外，力模拟还实现了伪重力，或者更准确地说，是一种通常以画布为中心的弱几何约束，可以利用它来防止您的可视化逃离画布。在下面的示例中，您将了解如何利用这两种基本、有时相反的力，通过粒子系统生成各种效果。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/gravity-and-charge.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/gravity-and-charge.html)
    .'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/gravity-and-charge.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/gravity-and-charge.html)
    .'
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In the following example, we will experiment with the force simulating gravity
    and charge settings so you can better understand different opposing forces involved
    and their interaction:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将实验不同的力模拟重力电荷设置，以便您更好地理解涉及的不同对立力及其相互作用：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This recipe generates a force-enabled particle system that is capable of operating
    in the modes shown in the following diagram:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方生成一个具有力的粒子系统，能够在以下图中显示的模式中运行：
- en: '![How to do it...](img/image_11_001.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_11_001.jpg)'
- en: Force simulation modes
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 力模拟模式
- en: How it works...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Before we get our hands dirty with the preceding code example, let's first dig
    a little bit deeper into the fundamental concepts of alpha decay, velocity decay,
    charge, positioning, and collision so we can have an easier time understanding
    all the magic number settings we will use in this recipe.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们动手编写前面的代码示例之前，让我们先深入探讨一下α衰变、速度衰减、电荷、定位和碰撞的基本概念，这样我们可以更容易地理解在这个配方中我们将使用的所有神奇数字设置。
- en: Alpha decay
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: α衰减
- en: Alpha determines how hot a simulation is. A simulation starts with alpha of
    1 and decay toward 0 by default over 300 iterations. Therefore, if you set the
    alpha decay to 0 meaning there is no decay therefore simulation will never stop.
    This is the setting we will use in this chapter in order to better demonstrate
    the effects. In real-life visualization, you will typically use some level of
    decay so that the simulation will cool down after a while, similar to how particles
    work in the real world.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: α值决定了模拟的“热度”。默认情况下，模拟从α值为1开始，通过300次迭代衰减到0。因此，如果您将α衰减设置为0，表示没有衰减，因此模拟将永远不会停止。我们将在这个章节中使用这个设置，以便更好地展示效果。在实际的视觉化中，您通常会使用某种程度的衰减，这样模拟在一段时间后会冷却下来，类似于现实世界中粒子的行为。
- en: Velocity decay
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 速度衰减
- en: At each tick of the simulation particle, velocity is scaled down by a specified
    decay. Thus, a value of 1 corresponds to a frictionless environment, whereas a
    value of 0 freezes all particles in place since they lose their velocity immediately.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟粒子的每个tick中，速度会按指定的衰减值缩小。因此，值为1对应于无摩擦环境，而值为0则会使所有粒子立即冻结，因为它们失去了速度。
- en: Charge
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电荷
- en: Charge is specified to simulate mutual n-body forces among the particles. A
    negative value will result in mutual node repulsion, whereas a positive value
    will result in a mutual node attraction.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 电荷被指定来模拟粒子之间的相互n体力。负值将导致相互节点排斥，而正值将导致相互节点吸引。
- en: Positioning
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定位
- en: If X or Y positioning forces are specified, the simulation will push particles
    toward a desired position along a given dimension with configured strength. This
    is typically used as a global force that applies to all particles in the simulation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了X或Y定位力，模拟将根据配置的强度将粒子推向给定维度上的期望位置。这通常用作作用于模拟中所有粒子的全局力。
- en: Collision
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 碰撞
- en: The collision force treats particles as circles with a certain radius instead
    of size-less points. This will prevent particles from overlapping in a simulation.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 碰撞力将粒子视为具有一定半径的圆而不是无大小的点。这将防止粒子在模拟中重叠。
- en: Alright, now with the dry definition behind us, let's take a look at how these
    forces can be leveraged to generate interesting visual effects.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在定义已经明确了，让我们看看这些力如何被利用来生成有趣的视觉效果。
- en: Setting up zero force layout
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置零力布局
- en: 'To set up zero force layout, we simply set up force layout with neither gravity
    nor charge. The force layout can be created using the `d3.forceSimulation` function:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置零力布局，我们只需设置既没有重力也没有电荷的力布局。力布局可以使用`d3.forceSimulation`函数创建：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'First of all, we disable `alphaDecay` so that simulation will continue to run
    without cooling down while setting the `velocityDecay` to `0.8` to simulate the
    effect of friction. Next, we set the `collision` to slightly larger than the radius
    of the `svg:circle` element we will create later. With this setting in place,
    we then create additional nodes represented as `svg:circle` on SVG whenever the
    user moves the mouse:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们禁用 `alphaDecay` 以确保在设置 `velocityDecay` 为 `0.8` 以模拟摩擦效果的同时，模拟可以继续运行而不冷却。接下来，我们将
    `collision` 设置为稍大于我们稍后创建的 `svg:circle` 元素的半径。有了这个设置，我们就可以在用户移动鼠标时在 SVG 上创建表示为
    `svg:circle` 的额外节点：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Node object was created initially on line `A` with its coordinates set to the
    current mouse location. Like all other D3 layouts, force simulation is not aware
    and has no visual elements. Therefore, every node we create needs to be added
    to the layout''s nodes array on line `C` and removed when the visual representation
    of these nodes was removed on line `B`. By default, force simulation starts automatically
    as soon as the simulation was created. With zero gravity and charge, this setting
    essentially lets us place a string of nodes with our mouse movement, as shown
    in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 节点对象最初在行 `A` 上创建，其坐标设置为当前鼠标位置。像所有其他 D3 布局一样，力模拟不知道也没有视觉元素。因此，我们创建的每个节点都需要在行
    `C` 上添加到布局的节点数组中，并在行 `B` 上移除这些节点的视觉表示。默认情况下，力模拟在创建模拟后立即自动启动。在没有重力和电荷的情况下，这个设置实际上允许我们通过鼠标移动放置一串节点，如下面的截图所示：
- en: '![Setting up zero force layout](img/image_11_002.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![设置零力布局](img/image_11_002.jpg)'
- en: No Gravity or Charge
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 无重力或电荷
- en: Setting up mutual repulsion
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置相互排斥
- en: 'In the next mode, we will set the charge to a negative value without any global
    positioning force in order to generate a mutual repulsive force field:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个模式中，我们将电荷设置为负值，而不应用任何全局定位力，以便生成相互排斥的力场：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'These lines tell force layout to apply `-10` charge on each node and update
    the node''s `{x, y}` coordinate accordingly, based on the simulation result on
    each tick. However, only doing this is still not enough to move the particles
    on SVG since the layout has no knowledge of the visual elements. Next, we need
    to write some code to connect the data that is being manipulated by force layout
    to our graphical elements. Following is the code to do that:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行告诉力布局对每个节点应用 `-10` 电荷，并根据每个时间步的模拟结果相应地更新节点的 `{x, y}` 坐标。然而，仅此还不够将粒子移动到 SVG
    上，因为布局没有关于视觉元素的知识。接下来，我们需要编写一些代码将力布局正在操作的数据连接到我们的图形元素。以下是要执行此操作的代码：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we register a `tick` event listener function that updates all circle elements
    to its new position based on the force layout's calculation. Tick listener is
    triggered on each tick of the simulation. At each tick, we set the `cx` and `cy`
    attributes to be the `x` and `y` values on `d`. This is because we have already
    bound the node object as datum to these circle elements. Therefore, they already
    contain the new coordinates calculated by force layout. This effectively establishes
    force layout's control over all the particles.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们注册了一个 `tick` 事件监听器函数，该函数根据力布局的计算更新所有圆元素到其新位置。时间步监听器在模拟的每个时间步触发。在每个时间步，我们将
    `cx` 和 `cy` 属性设置为 `d` 上的 `x` 和 `y` 值。这是因为我们已将节点对象作为数据绑定到这些圆元素上。因此，它们已经包含了力布局计算出的新坐标。这有效地建立了力布局对所有粒子的控制。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Force simulation also sets values other than x and y on the node object, which
    we will cover and leverage in later recipes to implement force drag and custom
    forces. In this recipe, let's just focus on the simple force-based positioning
    first.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 力模拟还在节点对象上设置了除 x 和 y 之外的其他值，我们将在后面的菜谱中介绍并利用这些值来实现力拖动和自定义力。在这个菜谱中，让我们先专注于基于简单力的定位。
- en: 'Other than `tick`, force layout also supports some other events:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `tick` 之外，力布局还支持一些其他事件：
- en: '`tick`: Triggered on each tick of the simulation'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tick`: 在模拟的每个时间步触发'
- en: '`end`: Triggered when a simulation ends'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`end`: 当模拟结束时触发'
- en: 'This force setting generates the following visual effect:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这种力设置生成了以下视觉效果：
- en: '![Setting up mutual repulsion](img/image_11_003.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![设置相互排斥](img/image_11_003.jpg)'
- en: Mutual Repulsion
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 相互排斥
- en: Setting up gravity
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置重力
- en: 'When we change the charge to a positive value, it generates mutual attraction
    or gravity among the particles:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将电荷更改为正值时，它会在粒子之间产生相互吸引或重力：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This generates the following visual effect:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这生成了以下视觉效果：
- en: '![Setting up gravity](img/image_11_004.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![设置重力](img/image_11_004.jpg)'
- en: Gravity
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 重力
- en: Setting up positioning with gravity
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用重力设置定位
- en: 'When we turn on gravity with central positioning force, then it generates a
    somewhat similar effect as the mutual attraction; however, you can notice the
    strong gravitational pull as the mouse cursor moves away from the center:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们打开中心定位力并启用重力时，它会产生与相互吸引类似的效果；然而，当鼠标光标从中心移开时，你可以注意到强烈的引力：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This recipe generates the following effect:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱生成以下效果：
- en: '![Setting up positioning with gravity](img/image_11_005.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![设置带有重力的定位](img/image_11_005.jpg)'
- en: Positioning with gravity
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 带有重力的定位
- en: Setting up positioning with repulsion
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用排斥力设置定位
- en: 'Finally, we can turn on both positioning and mutual repulsion. The result is
    an equilibrium of forces that keeps all particles somewhat stable, neither escaping
    nor colliding with each other:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以同时打开定位和相互排斥。结果是保持所有粒子相对稳定的力平衡，既不会逃逸也不会相互碰撞：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is what this force equilibrium looks like:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这种力平衡的外观：
- en: '![Setting up positioning with repulsion](img/image_11_006.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![设置带有排斥力的定位](img/image_11_006.jpg)'
- en: Positioning with repulsion
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 带有排斥力的定位
- en: See also
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: Refer to Velocity Verlet integration at [https://en.wikipedia.org/wiki/Verlet_integration](https://en.wikipedia.org/wiki/Verlet_integration)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考速度Verlet积分，见[https://en.wikipedia.org/wiki/Verlet_integration](https://en.wikipedia.org/wiki/Verlet_integration)
- en: Refer to scalable, versatile, and simple constrained graph layout at [http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf](http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考可扩展、多功能且简单的约束图布局，见[http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf](http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf)
- en: Refer to physical simulation at [http://www.gamasutra.com/resource_guide/20030121/jacobson_pfv.htm](http://www.gamasutra.com/resource_guide/20030121/jacobson_pfv.htm)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考物理模拟，见[http://www.gamasutra.com/resource_guide/20030121/jacobson_pfv.htm](http://www.gamasutra.com/resource_guide/20030121/jacobson_pfv.htm)
- en: The content of this chapter is inspired by Mike Bostock's brilliant talk on
    D3 Force that can be found at [http://mbostock.github.io/d3/talk/20110921/](http://mbostock.github.io/d3/talk/20110921/)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的内容灵感来源于迈克·博斯托克关于D3力的精彩演讲，可在[http://mbostock.github.io/d3/talk/20110921/](http://mbostock.github.io/d3/talk/20110921/)找到
- en: Refer to [Chapter 10](ch10.html "Chapter 10. Interacting with Your Visualization"),
    *Interacting with Your Visualization*, for more details on how to interact with
    the mouse in D3
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考第10章[交互式可视化](ch10.html "第10章。交互式可视化")，了解更多关于如何在D3中与鼠标交互的详细信息
- en: Refer to D3 Force Simulation API document for more details on force at [https://github.com/d3/d3-force](https://github.com/d3/d3-force)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考D3力模拟API文档，了解更多关于力的详细信息，见[https://github.com/d3/d3-force](https://github.com/d3/d3-force)
- en: Customizing velocity
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义速度
- en: 'In our previous recipe, we touched upon force simulation node object and its
    {`x, y`} attributes, which determine the location of a node on the layout. In
    this recipe, we will discuss another interesting aspect of physical motion simulation:
    velocity. The D3 force layout has a built-in support for velocity simulation,
    which relies on the {`vx, vy`} attributes on the node object. Let''s see how this
    can be done in the example described in this recipe.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的菜谱中，我们提到了力模拟节点对象及其`{x, y}`属性，这些属性决定了节点在布局中的位置。在这个菜谱中，我们将讨论物理运动模拟的另一个有趣方面：速度。D3力布局内置了对速度模拟的支持，这依赖于节点对象上的`{vx,
    vy}`属性。让我们看看在这个菜谱中描述的示例中如何实现这一点。
- en: Getting ready
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/velocity.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/velocity.html)
    .'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/velocity.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/velocity.html)
    .'
- en: How to do it...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we will modify the previous recipe by first disabling both
    positioning and charge and then giving newly added node some initial velocity.
    As a result, now, the faster you move the mouse higher the initial velocity and
    momentum will be for each node. Here is the code to do that:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将通过首先禁用定位和电荷，然后给新添加的节点一些初始速度来修改先前的菜谱。结果，现在，鼠标移动得越快，每个节点的初始速度和动量就越大。以下是实现这一点的代码：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This recipe generates a particle system with initial directional velocity proportional
    to the user''s mouse movement, as shown in the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方生成一个粒子系统，其初始方向速度与用户的鼠标移动成比例，如下面的截图所示：
- en: '![How to do it...](img/image_11_007.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_11_007.jpg)'
- en: Velocity
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 速度
- en: How it works...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The overall structure of this recipe is pretty similar to the previous one.
    It also generates particles as the user moves the mouse around. Moreover, once
    the force simulation starts, the particle position is fully controlled by the
    force layout in its `tick` event listener function. However, in this recipe, we
    have turned off both positioning and charge so that we can focus more clearly
    on momentum alone. We left some friction so that the velocity decay, making simulation
    look more realistic. Here is our force layout configuration:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的整体结构与之前的配方非常相似。它也会在用户移动鼠标时生成粒子。此外，一旦力模拟开始，粒子位置将完全由力布局在其 `tick` 事件监听器函数中控制。然而，在这个配方中，我们关闭了定位和电荷，以便我们可以更清楚地关注动量。我们留下了一些摩擦，使得速度衰减，使模拟看起来更真实。以下是我们的力布局配置：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The major difference in this recipe is that we keep track of not only the current
    mouse position, but also the previous mouse position. Additionally, whenever the
    user moves the mouse, we generate a node object containing the current location
    (`point[0], point[1]`) and the previous location (`previousPoint.x, previousPoint.y`):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，与之前的不同之处在于我们不仅跟踪当前鼠标位置，还跟踪之前的鼠标位置。此外，每当用户移动鼠标时，我们都会生成一个包含当前位置（`point[0],
    point[1]`）和之前位置（`previousPoint.x, previousPoint.y`）的节点对象：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Since user's mouse location is sampled on fixed interval, the faster the user
    moves the mouse the further apart these two positions will be. This property and
    the directional information gained from these two positions are nicely translated
    automatically by force simulation into initial velocity for each particle we create
    as we have demonstrated in this recipe.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户的鼠标位置以固定间隔采样，用户移动鼠标的速度越快，这两个位置之间的距离就越远。这种属性以及从这两个位置获得的方向信息被力模拟自动转换为每个我们创建的粒子的初始速度，正如我们在本配方中展示的那样。
- en: 'Besides the {`x, y, vx, vy`} attributes we have discussed so far, the force
    layout node object also supports some other useful attributes that we will list
    here for your reference:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们之前讨论的 `{x, y, vx, vy}` 属性之外，力布局节点对象还支持一些其他有用的属性，我们将在此列出供您参考：
- en: '`index`: Zero-based index of the node within the node''s array'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`: 节点在其数组中的零基索引'
- en: '`x`: The x-coordinate of the current node position'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`: 当前节点位置的 x-坐标'
- en: '`y`: The y-coordinate of the current node position'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y`: 当前节点位置的 y-坐标'
- en: '`vx`: The node''s current x-velocity'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vx`: 节点的当前 x-速度'
- en: '`vy`: The node''s current y-velocity'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vy`: 节点的当前 y-速度'
- en: '`fx`: The node''s fixed x-position'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fx`: 节点的固定 x-位置'
- en: '`fy`: The node''s fixed y-position'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fy`: 节点的固定 y-位置'
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will cover `fx` and `fy` and their usage in later recipe that involves dragging,
    which is one of the most common way to leverage fixed positioning of a node.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在涉及拖动的后续配方中介绍 `fx` 和 `fy` 及其用法，拖动是利用节点固定定位的最常见方式之一。
- en: See also
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to the *Interacting with mouse events* recipe in [Chapter 10](ch10.html
    "Chapter 10. Interacting with Your Visualization"), *Interacting with Your Visualization*,
    for more details on how to interact with the mouse in D3.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关如何在 D3 中与鼠标交互的更多详细信息，请参阅第 10 章“与您的可视化交互”中的“与鼠标事件交互”配方，链接为 [Chapter 10](ch10.html
    "第 10 章。与您的可视化交互")。
- en: Refer to the D3 Force Simulation Nodes API for more details on node attributes
    at [https://github.com/d3/d3-force#simulation_nodes](https://github.com/d3/d3-force#simulation_nodes)
    .
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关节点属性的更多详细信息，请参阅 D3 力模拟节点 API，链接为 [https://github.com/d3/d3-force#simulation_nodes](https://github.com/d3/d3-force#simulation_nodes)。
- en: Setting the link constraint
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置链接约束
- en: 'So far, we have covered some important aspects of the force layout, such as
    gravity, charge, friction, and velocity. In this recipe, we will discuss another
    critical functionality: links. As we have mentioned in the introduction section,
    D3 force simulation supports a scalable simple graph constraint, and in this recipe,
    we will demonstrate how link constraint can be leveraged in conjunction with other
    forces.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了力布局的一些重要方面，例如重力、电荷、摩擦和速度。在这个配方中，我们将讨论另一个关键功能：链接。正如我们在介绍部分中提到的，D3
    力模拟支持可扩展的简单图约束，在这个配方中，我们将演示如何结合其他力利用链接约束。
- en: Getting ready
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/link-constraint.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/link-constraint.html)
    .'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/link-constraint.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/link-constraint.html)
    .'
- en: How to do it...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, whenever the user clicks on the mouse, we will generate a force-directed
    ring of particles constrained by links between nodes. Here is how it is implemented:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，每当用户点击鼠标时，我们将生成一个由节点间的链接约束的力导向粒子环。以下是它的实现方式：
- en: '[PRE11]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This recipe generates force-directed particle rings on a mouse click, as shown
    in the following screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方在鼠标点击时生成力导向的粒子环，如下面的截图所示：
- en: '![How to do it...](img/image_11_008.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_11_008.jpg)'
- en: Force-directed particle rings
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 力导向粒子环
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Link constraint adds another useful dimension to force-assisted visualization.
    In this recipe, we set up our force layout with the following parameters:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 链接约束为力辅助可视化添加了另一个有用的维度。在此配方中，我们使用以下参数设置我们的力布局：
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Besides collision, charge, and friction, this time we also bound charge-force
    interaction to 25% of the maximum height to simulate a more localized force interaction.
    When the user clicks on their mouse, a random number of nodes are being created
    and put under force simulation''s control similar to what we have done in the
    previous recipes. The major addition in this recipe is the link creation, and
    its control logic is shown in the following code snippet:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 除了碰撞、电荷和摩擦之外，这次我们还把电荷-力相互作用绑定到最大高度的25%，以模拟更局部的力相互作用。当用户点击鼠标时，会创建一定数量的节点并将其置于力模拟的控制之下，这与我们在之前的配方中所做的一样。此配方的主要新增功能是链接创建，其控制逻辑如下面的代码片段所示：
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the `createLinks` function, the `n-1` link objects were created connecting
    a set of nodes into a ring (for loop on line `A`). Each link object must have
    two attributes specified as `source` and `target`, telling force layout which
    pair of nodes are connected by this link object. Once this is created, we decided
    to visualize the links in this recipe using a `svg:line` element (refer to line
    `B`). However, we will see in the next recipe that this does not have to always
    be the case. As a matter of fact, you can use pretty much anything; you can imagine
    to visualize (including hiding them, but retain the links for layout computation)
    the links as long as it makes sense for the audience of your visualization. After
    that, we also need to add link objects to force layout''s links array (on line
    `C`) so that they can be put under force layout''s control. The `d3.forceLink`
    function has two important parameters: link distance and link strength; both parameters
    are exclusively link related:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在`createLinks`函数中，创建了`n-1`个链接对象，将一组节点连接成一个环（在行`A`上的循环）。每个链接对象必须指定两个属性，即`source`和`target`，告诉力布局哪些节点对通过此链接对象连接。一旦创建，我们决定在此配方中使用`svg:line`元素来可视化链接（参考行`B`）。然而，我们将在下一个配方中看到，这并不总是必须的。事实上，你可以使用几乎所有东西来可视化（包括隐藏它们，但保留链接以进行布局计算），只要这对你的可视化观众有意义。之后，我们还需要将链接对象添加到力布局的链接数组中（在行`C`），这样它们就可以置于力布局的控制之下。`d3.forceLink`函数有两个重要的参数：链接距离和链接强度；这两个参数都是与链接相关的：
- en: '`linkDistance`: This could be a constant or a function, which defaults to `20`
    pixels. Link distances are evaluated when the simulation is initialized, and it
    is implemented as weak geometric constraints. For each tick of the layout, the
    distance between each pair of linked nodes is computed and compared to the target
    distance. The links are then moved toward each other or away from each other.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linkDistance`：这可以是一个常量或一个函数，默认为`20`像素。链接距离在模拟初始化时评估，并且作为弱几何约束实现。对于布局的每个tick，计算每对链接节点的距离并将其与目标距离进行比较。然后，链接会相互移动或远离。'
- en: '`linkStength`: This could be a constant or a function, which defaults to `1`.
    Link strength sets the strength (rigidity) of links with a value in the range
    of `[0, 1]`. Link strength is also evaluated on initialization or reset.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linkStength`：这可以是一个常量或一个函数，默认为`1`。链接强度通过一个在`[0, 1]`范围内的值设置链接的强度（刚性）。链接强度在初始化或重置时也会被评估。'
- en: 'Finally, we will need to translate the positioning data generated by force
    layout to SVG implementation in the `tick` function for each link similar to what
    we did for the nodes:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要将力布局生成的定位数据翻译成`tick`函数中每个链接的SVG实现，类似于我们为节点所做的那样：
- en: '[PRE14]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As we can see here, the D3 force simulation has again done most of the heavy
    lifting, therefore, all we need to do is simply set `{x1, y1}` and `{x2, y2}`
    on the `svg:line` elements in the `tick` function. Additionally, we have also
    used two bounded X and Y function to make sure that the particles and rings will
    not escape our SVG canvas area. For reference, the following screenshot is what
    a link object looks like after it is manipulated by force layout:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，D3力模拟再次完成了大部分繁重的工作，因此，我们只需要在`tick`函数中简单地设置`svg:line`元素的`{x1, y1}`和`{x2,
    y2}`。此外，我们还使用了两个有界的X和Y函数，以确保粒子和环不会逃离我们的SVG画布区域。为了参考，以下截图展示了力布局操作后的链接对象：
- en: '![How it works...](img/image_11_009.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image_11_009.jpg)'
- en: Link object
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 链接对象
- en: 'One last additional technique worth mentioning in this recipe is the force-enabled
    dragging. All nodes generated by this recipe are "drag gable," and force simulation
    automatically re-computes all forces and constraints, as the user drags the rings
    around, as shown in the following screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，还有一个值得提及的附加技术，即力启用拖动。本配方生成的所有节点都是“可拖动的”，当用户拖动环时，力模拟会自动重新计算所有力和约束，如图所示以下截图：
- en: '![How it works...](img/image_11_010.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image_11_010.jpg)'
- en: Dragging, with force simulation
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 带力模拟的拖动
- en: 'This is accomplished by registering the `d3.drag` event handler as shown on
    line `D` in the following code snippet:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过在以下代码片段中注册`d3.drag`事件处理程序来实现的，如图线`D`所示：
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The implementation of each of the drag event handler is pretty straightforward:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 每个拖动事件处理程序的实现相当简单：
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When dragging happens on a particular node, we use `fx` and `fy` to fix that
    particular node to its initial position as shown on line `E`. While the dragging
    is happening, we continue to update the node's position with the user's mouse
    position, thus, moving the node while being dragged (refer to line `F`). Finally,
    when drag ends, we unfix the node position, thus, allowing force simulation to
    take control once again, as shown on line `G`. This is a very general drag support
    pattern you will see quite often with force-assisted visualization, including
    some later recipes in this chapter.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当在特定节点上拖动时，我们使用`fx`和`fy`将该节点固定到其初始位置，如图线`E`所示。在拖动过程中，我们继续使用用户的鼠标位置更新节点位置，从而在拖动时移动节点（参见图线`F`）。最后，当拖动结束时，我们解除节点位置的限制，从而允许力模拟再次接管，如图线`G`所示。这是一个非常通用的拖动支持模式，你将在力辅助可视化中经常看到，包括本章后面的某些配方。
- en: See also
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Scalable, versatile, and simple constrained graph layout: [http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf](http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可伸缩、多用途且简单的约束图布局：[http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf](http://www.csse.monash.edu.au/~tdwyer/Dwyer2009FastConstraints.pdf)
- en: 'For more information about force.links() function please refer to: [https://github.com/d3/d3-force#links](https://github.com/d3/d3-force#links)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关`force.links()`函数的更多信息，请参阅：[https://github.com/d3/d3-force#links](https://github.com/d3/d3-force#links)
- en: Using force to assist visualization
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用力辅助可视化
- en: So far, we learned to use force simulation visualizing particles and links similar
    to how you would use force in its classic application, the forced-directed graph.
    This kind of visualization is what force simulation was designed for in the first
    place. However, this is by no means the only way to utilize force in your visualization.
    In this recipe, we will explore techniques that I call force-assisted visualization.
    With this technique, you can add some randomness and arbitrariness into your visualization
    by leveraging force.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们学习了如何使用力模拟可视化粒子与链接，类似于在经典应用中，即力导向图，使用力的方式。这种可视化正是力模拟最初设计的目的。然而，这绝对不是利用力进行可视化的唯一方式。在本配方中，我们将探讨我称之为力辅助可视化的技术。利用这种技术，你可以通过利用力，在你的可视化中添加一些随机性和任意性。
- en: Getting ready
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/arbitrary-visualization.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/arbitrary-visualization.html)
    .'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/arbitrary-visualization.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/arbitrary-visualization.html)。'
- en: How to do it...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we will generate bubbles on the user''s mouse click. The bubbles
    are made of `svg:path` elements filled with gradient color. The `svg:path` elements
    are not strictly controlled by force layout though they are influenced by force,
    therefore, giving them the randomness required to simulate a bubble in real life:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将生成用户鼠标点击时的气泡。气泡由填充渐变色的 `svg:path` 元素组成。尽管 `svg:path` 元素不是严格由力布局控制的，但它们受到力的影响，因此提供了模拟现实气泡所需的随机性：
- en: '[PRE17]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This recipe generates force-assisted bubbles on the user''s mouse click as
    shown in the following screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方在用户鼠标点击时生成力辅助气泡，如下截图所示：
- en: '![How to do it...](img/image_11_011.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_11_011.jpg)'
- en: Force assisted bubbles
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 力辅助气泡
- en: How it works...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This recipe is built on top of what we have done in the previous recipe, therefore,
    its overall approach is quite similar to the last recipe in which we created force-controlled
    particle rings on the user''s mouse click. The major difference between this recipe
    and the last one is in this one we decided to use the `d3.line` generator to create
    the `svg:path` element that outlines our bubbles instead of using `svg:circle`
    and `svg:line`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方建立在之前配方的基础上，因此其整体方法与上一个配方（在用户鼠标点击时创建力控制粒子环）非常相似。此配方与上一个配方的主要区别在于，我们决定使用 `d3.line`
    生成器来创建 `svg:path` 元素，以勾勒出我们的气泡，而不是使用 `svg:circle` 和 `svg:line`：
- en: '[PRE18]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'On line `A`, we created a line generator with a `d3.curveBasisClosed` curve
    mode since this gives us the smoothest outline for our bubble. Whenever a user
    clicks on the mouse, a `svg:path` element was created connecting all nodes (line
    `C`). Additionally, we also fill the bubble with our predefined gradient to give
    it a nice glow (line `B`). Finally, we also need to implement the force-based
    positioning in the `tick` function:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在线 `A` 上，我们使用 `d3.curveBasisClosed` 曲线模式创建了一个线生成器，因为这为我们提供了气泡最平滑的轮廓。每当用户点击鼠标时，就会创建一个连接所有节点的
    `svg:path` 元素（线 `C`）。此外，我们还用我们预定义的渐变填充气泡，使其具有漂亮的发光效果（线 `B`）。最后，我们还需要在 `tick` 函数中实现基于力的定位：
- en: '[PRE19]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the `tick` function, we simply re-invoke the line generator function to update
    the `d` attribute for each path, thus, animating the bubbles using force layout
    computation.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `tick` 函数中，我们简单地重新调用行生成器函数来更新每个路径的 `d` 属性，从而使用力布局计算来动画化气泡。
- en: See also
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: Refer to SVG Gradients and Patterns at [https://www.w3.org/TR/SVG/pservers.html](https://www.w3.org/TR/SVG/pservers.html)
    .
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[SVG渐变和图案](https://www.w3.org/TR/SVG/pservers.html)。
- en: Refer to the *Using line generator* recipe in [Chapter 7](ch07.html "Chapter 7. Getting
    into Shape"), *Getting into Shape*, for more information on D3 line generator.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 D3 线生成器的更多信息，请参阅[第7章](ch07.html "第7章。进入形状")中的*使用线生成器*配方，*进入形状*。
- en: Manipulating force
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 力量操控
- en: So far, we have explored many interesting aspects and applications of D3 force;
    however, in all of these prior recipes, we simply applied force layout's computation
    (gravity, charge, friction, collision, and velocity) directly to our visualization.
    In this recipe, we will go one step further to implement custom force manipulation,
    hence creating our own type of force.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探索了 D3 力的许多有趣方面和应用；然而，在所有这些先前的配方中，我们只是直接将力布局的计算（重力、电荷、摩擦、碰撞和速度）应用于我们的可视化。在这个配方中，我们将更进一步，实现自定义力操控，从而创建我们自己的力类型。
- en: 'In this recipe, we will first generate five sets of colored particles then
    assign corresponding colors and categorical force pull to user''s touch, hence
    pulling only the particles that match the color. Since this recipe is a bit complex,
    I will give an example here: if I touch the visualization with my first finger,
    it will generate a blue circle and pull all blue particles to that circle, whereas
    my second touch will generate an orange circle and will only pull the orange particles.
    This type of force manipulation is commonly referred to as categorical multi-foci.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们首先生成五组彩色粒子，然后为用户的触摸分配相应的颜色和分类力拉力，从而只拉动匹配颜色的粒子。由于这个配方有点复杂，我将在这里提供一个示例：如果我用我的第一根手指触摸可视化，它将生成一个蓝色圆圈并将所有蓝色粒子拉向该圆圈，而我的第二次触摸将生成一个橙色圆圈，并且只会拉动橙色粒子。这种类型的力操作通常被称为分类多焦点。
- en: Getting ready
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/multi-foci.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/multi-foci.html)
    .'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/multi-foci.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/multi-foci.html)
    .'
- en: How to do it...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here is how you can achieve this in code:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您如何在代码中实现它的方法：
- en: '[PRE20]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This recipe generates multi-categorical foci on touch, as shown in the following
    screenshot:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方在触摸时生成多分类焦点，如下截图所示：
- en: '![How to do it...](img/image_11_012.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/image_11_012.jpg)'
- en: Multi-categorical foci on touch
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 触摸的多分类焦点
- en: How it works...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The first step of this recipe is to create colored particles and standard force
    equilibrium between positioning and repulsion. All node objects contain separate
    color and type ID attributes (line `A` and `B`), so they can be easily identified
    later. On line `C`, we let force simulation manage all the positioning of these
    particles as we have done in previous recipes:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的第一步是创建彩色粒子并在定位和排斥之间建立标准的力平衡。所有节点对象都包含单独的颜色和类型ID属性（行`A`和`B`），因此它们可以很容易地被识别。在行`C`，我们让力模拟管理这些粒子的所有定位，就像我们在之前的配方中所做的那样：
- en: '[PRE21]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we will need to create a large `svg:circle` element on user touch to
    represent the touch point:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在用户触摸处创建一个大的`svg:circle`元素来表示触摸点：
- en: '[PRE22]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This is the pretty standard multi-touch drawing that we saw in *Interacting
    with a multi-touch device* recipe in [Chapter 10](ch10.html "Chapter 10. Interacting
    with Your Visualization"), *Interacting with Your Visualization*. Once the touch
    point is identified, all the custom force magic are implemented in the `tick`
    function. Now, let''s take a look at the `tick` function:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们之前在[第10章](ch10.html "第10章。与您的可视化交互")中看到的*与多触摸设备交互*配方中的标准多触摸绘图，*与您的可视化交互*。一旦识别出触摸点，所有自定义力的魔法都在`tick`函数中实现。现在，让我们看看`tick`函数：
- en: '[PRE23]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this tick function, we have the familiar part, on line `F`, where we let
    force simulation to control the position of all particles on the canvas; however,
    we have also introduced a custom force. On line `C`, we looped through all nodes
    to identify the nodes associated with a given center that represents user's touch.
    Once we detect the touch center, we started to move the particle closer to the
    center one tick at a time (line `D` and `E`) using the `k` coefficient. The larger
    the `k` the faster the particles will converge around a touch point.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个tick函数中，我们有熟悉的部分，在行`F`上，我们让力模拟控制画布上所有粒子的位置；然而，我们也引入了一个自定义力。在行`C`，我们遍历所有节点以识别与给定中心相关的节点，该中心代表用户的触摸。一旦我们检测到触摸中心，我们就开始逐tick移动粒子，使其逐渐靠近中心（行`D`和`E`），使用`k`系数。`k`值越大，粒子围绕触摸点的收敛速度越快。
- en: See also
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: Refer to the *Interacting with a multi-touch device* recipe in [Chapter 10](ch10.html
    "Chapter 10. Interacting with Your Visualization"), *Interacting with your Visualization*,
    for more information on D3 multi-touch support.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关D3多触摸支持的信息，请参阅[第10章](ch10.html "第10章。与您的可视化交互")中的*与多触摸设备交互*配方，*与您的可视化交互*。
- en: Building a force-directed graph
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建力导向图
- en: Finally, we will show how to implement a force-directed graph, the classic application
    of D3 force. However, we believe with all the techniques and knowledge you have
    gained so far from this chapter, implementing force-directed graph should feel
    quite straightforward.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将展示如何实现力导向图，这是D3力的经典应用。然而，我们相信，凭借你从本章中至今所获得的所有技术和知识，实现力导向图应该感觉相当直接。
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/force-directed-graph.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/force-directed-graph.html)
    .'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/force-directed-graph.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter11/force-directed-graph.html)
    .'
- en: How to do it...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we will visualize the flare dataset as a force-directed tree
    (tree is a special type of graph):'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将可视化flare数据集作为一个力导向树（树是一种特殊的图类型）：
- en: '[PRE24]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This recipe visualizes the hierarchical flare dataset as a force-directed tree:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱将层次化的flare数据集可视化为一个力导向树：
- en: '![How to do it...](img/image_11_013.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_11_013.jpg)'
- en: Force-directed graph (tree)
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 力导向图（树）
- en: How it works...
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As we can already see, this recipe is pretty short, and a quarter of the code
    was actually devoted to drag support. This is due to the fact that force-directed
    graph is what force simulation was designed for in the first place. Thus, there
    is really not much to do other than simply applying the force with correct data
    structure. First, we process the hierarchical dataset using the standard `d3.hierarchy`
    (line `A`) since this is how we can retrieve the nodes and links data structure
    `d3.force` expects:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们已能看到的，这个菜谱相当简短，实际上四分之一的代码都致力于拖拽支持。这是因为力导向图正是力模拟最初设计的目的。因此，实际上并没有太多的事情要做，除了简单地应用正确的数据结构来应用力。首先，我们使用标准的`d3.hierarchy`（行`A`）处理层次化数据集，因为这是我们获取`d3.force`期望的节点和链接数据结构的方式：
- en: '[PRE25]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'On line `B`, we leverage the `d3.hierarchy.descendants` function to retrieve
    all nodes contained in the tree and the links among nodes on line `C` using the
    `d3.hierachy.links` function. These are the data structure `d3.force` expects;
    once we have them, they can be directly passed to simulation on line `D` and `E`.
    The rest of the recipe is very similar to the *Setting the link constraint* recipe
    in this chapter. We created the `svg:link` element to represent links and `svg:circle`
    elements to represent the nodes in the graph:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在行`B`，我们利用`d3.hierarchy.descendants`函数检索树中包含的所有节点以及行`C`中节点的链接，使用`d3.hierachy.links`函数。这些是`d3.force`期望的数据结构；一旦我们有了它们，它们可以直接在行`D`和`E`上传递给模拟。这个菜谱的其余部分与本章中的*设置链接约束*菜谱非常相似。我们创建了`svg:link`元素来表示链接，以及`svg:circle`元素来表示图中的节点：
- en: '[PRE26]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The only parts worth mentioning here is that we colored the node using its
    parent''s name on line `F`, so all siblings will be colored consistently, and
    on line `G`, we used the common drag support pattern mentioned in the *Setting
    the link constraint* recipe to allow dragging with this graph. Finally, we let
    force simulation to control both nodes and links positioning completely in the
    tick function:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 值得在这里提及的唯一部分是，我们在行`F`使用节点的父节点名称来着色节点，因此所有兄弟节点将被一致着色，并且在行`G`中，我们使用了在*设置链接约束*菜谱中提到的通用拖拽支持模式，以允许使用此图进行拖拽。最后，我们在tick函数中让力模拟完全控制节点和链接的位置：
- en: '[PRE27]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: See also
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to the *Building a tree* recipe in [Chapter 9](ch09.html "Chapter 9. Lay
    Them Out"), *Lay Them Out*, for more information on D3 tree layout.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考第9章的*构建树*菜谱，*布局*，以获取有关D3树布局的更多信息。
- en: For more information on force-directed graphs, visit [https://en.wikipedia.org/wiki/Force-directed_graph_drawing](https://en.wikipedia.org/wiki/Force-directed_graph_drawing)
    .
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于力导向图的更多信息，请访问 [https://en.wikipedia.org/wiki/Force-directed_graph_drawing](https://en.wikipedia.org/wiki/Force-directed_graph_drawing)
    .
