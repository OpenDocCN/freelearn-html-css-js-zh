- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Error Handling in Node.js
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js 中的错误处理
- en: Node.js applications require solid and consistent control over errors. Most
    applications are built using many dependencies or heavily rely on asynchronous
    operations (network, disk, and so on), which makes error management more complex.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 应用程序需要对错误进行稳固和一致的控制。大多数应用程序都是使用许多依赖项构建的，或者高度依赖于异步操作（网络、磁盘等），这使得错误管理变得更加复杂。
- en: In this chapter, we will learn about the different types of errors that we can
    encounter in a Node.js application and how to handle them properly. We will also
    learn how to throw custom errors and how to capture and resume the application
    from any kind of error, including the ones that occur in Express applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习在 Node.js 应用程序中可能遇到的不同类型的错误以及如何正确处理它们。我们还将学习如何抛出自定义错误，以及如何捕获和从任何类型的错误中恢复应用程序，包括在
    Express 应用程序中发生的错误。
- en: We will also learn how to manage a graceful shutdown when the service crashes,
    how to use exit codes according to the situation, and how to prevent zombie processes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将学习如何在服务崩溃时进行优雅的关闭，如何根据情况使用退出代码，以及如何防止僵尸进程。
- en: 'To sum up, here are the main topics that we will explore in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，以下是本章我们将探讨的主要主题：
- en: How to throw custom errors
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何抛出自定义错误
- en: How to capture and recover from any kind of error
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何捕获和从任何类型的错误中恢复
- en: How to manage application and user errors in Express
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 Express 中管理应用程序和用户错误
- en: How to manage a graceful shutdown when the service crashes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在服务崩溃时进行优雅的关闭
- en: How to prevent zombie processes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何防止僵尸进程
- en: How to use exit codes to indicate the reason why the application was shut down
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用退出代码来指示应用程序关闭的原因
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code files for the chapter can be found at [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在[https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners)找到。
- en: Check out the code in action video for this chapter on [https://youtu.be/VPXV1L1epIk](https://youtu.be/VPXV1L1epIk)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看本章关于代码执行的视频：[https://youtu.be/VPXV1L1epIk](https://youtu.be/VPXV1L1epIk)
- en: Exploring the types of errors
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索错误类型
- en: As we learned in the first chapter, Node.js is a single-threaded application.
    This means that if an error occurs and we don’t properly handle it, the application
    will crash. This is why it is important to handle errors properly.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在第一章中学到的，Node.js 是一个单线程应用程序。这意味着如果发生错误而我们没有正确处理它，应用程序将会崩溃。这就是为什么正确处理错误很重要的原因。
- en: 'There are two main types of errors in Node.js: **syntax** errors and **runtime**
    errors.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 中主要有两种错误类型：**语法**错误和**运行时**错误。
- en: Syntax errors
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语法错误
- en: Syntax errors are thrown when the code is parsed and it is not valid. These
    errors are thrown by the JavaScript engine, and they are usually easy to fix.
    Many IDEs and code editors can detect these errors and highlight them in the code
    editor, so you can fix them before running the application. In our case, we have
    been using StandardJS as a linter (which is a tool that helps us detect syntax
    errors and enforce a consistent code style) in previous chapters.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码解析时，如果它无效，就会抛出语法错误。这些错误由 JavaScript 引擎抛出，通常很容易修复。许多 IDE 和代码编辑器可以检测这些错误并在代码编辑器中突出显示，这样你就可以在运行应用程序之前修复它们。在我们的案例中，我们已经在之前的章节中使用
    StandardJS 作为代码检查器（这是一种帮助我们检测语法错误并强制执行一致代码风格的工具）。
- en: 'This is an example of a syntax error:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个语法错误的例子：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The previous code will throw a `ReferenceError` error because the `executeThisFunction`
    function is not defined. This error can be easily fixed by defining the function:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将抛出`ReferenceError`错误，因为`executeThisFunction`函数未定义。这个错误可以通过定义函数来轻松修复：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Runtime errors
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时错误
- en: Runtime errors are also known as **operational** errors. These errors are thrown
    when the application is running and are not related to the syntax of the code.
    These errors can be thrown by the application itself or by the dependencies that
    the application is using.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时错误也被称为**操作**错误。这些错误在应用程序运行时抛出，与代码的语法无关。这些错误可以由应用程序本身或应用程序使用的依赖项抛出。
- en: There are many ways to generate runtime errors, such as by accessing a property
    of an undefined object, calling a function that does not exist, trying to read
    a file that does not exist, trying to connect to a database that is not available,
    and trying to access a network resource that is not available.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方式可以生成运行时错误，例如通过访问未定义对象的属性、调用不存在的函数、尝试读取不存在的文件、尝试连接不可用的数据库以及尝试访问不可用的网络资源。
- en: As you can see, there are many ways to generate runtime errors. This is why
    it is important to handle them properly. If we don’t handle them, the application
    will crash and it will stop working. So, while coding the application, it is very
    important to keep in mind the possible runtime errors that can be thrown and how
    to handle them.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，有多种方式可以生成运行时错误。这就是为什么正确处理它们很重要。如果我们不处理它们，应用程序将会崩溃并停止工作。因此，在编写应用程序代码时，牢记可能抛出的运行时错误以及如何处理它们是非常重要的。
- en: Some errors can be recovered and others not, depending on the type of error.
    For example, if we have a REST API application and the database is not available,
    we could recover from this error by returning a `503` HTTP status code and a message
    to the client. You will be always in charge of deciding whether the error can
    be recovered or not and how to handle it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一些错误可以恢复，而另一些则不能，这取决于错误的类型。例如，如果我们有一个REST API应用程序，并且数据库不可用，我们可以通过返回一个`503` HTTP状态码和一条消息给客户端来从该错误中恢复。您将始终负责决定错误是否可以恢复以及如何处理它。
- en: Now that we know the types of errors that can be thrown in Node.js applications,
    let’s see how to throw meaningful errors in the next section.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了在Node.js应用程序中可能抛出的错误类型，让我们在下一节中看看如何抛出有意义的错误。
- en: Throwing meaningful errors
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抛出有意义的错误
- en: When an error occurs, it is important that it is meaningful. This means that
    the error should contain enough information to understand what happened and, potentially,
    how to fix it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生错误时，重要的是它是有意义的。这意味着错误应该包含足够的信息来了解发生了什么，以及可能如何修复它。
- en: The error object
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误对象
- en: 'The error object is an instance of the `Error` class. This class has a constructor
    that accepts a message as a parameter. This message will be used to describe the
    error. Here is an example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 错误对象是`Error`类的一个实例。这个类有一个接受消息作为参数的构造函数。这个消息将用来描述错误。以下是一个示例：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is the output of the previous code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上一段代码的输出：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see, the error message is displayed in the output. This is the message
    that we passed to the constructor of the `Error` class. If you compare it with
    `ReferenceError: executeThisFunction is not defined`, we can see that the error
    message is not very descriptive and that we are using a generic error class.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '如您所见，错误信息在输出中显示。这是我们传递给`Error`类构造函数的消息。如果您将其与`ReferenceError: executeThisFunction
    is not defined`进行比较，我们可以看到错误信息描述不够详细，并且我们正在使用一个通用的错误类。'
- en: Custom errors
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义错误
- en: 'You can create your own custom errors by extending the `Error` class. This
    is useful when you want to create your own `Error` classes and add more information
    to the error object. Here is an example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过扩展`Error`类来创建自己的自定义错误。当您想创建自己的`Error`类并向错误对象添加更多信息时，这非常有用。以下是一个示例：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we run the previous code, we will get the following output:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行上一段代码，我们将得到以下输出：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, the error message `Looks like you need more sleep` is displayed
    in the output, as well as the class name, `NotEnoughSleep`. Additionally, we have
    added two properties to the error object: `requireSleep` and `isRecoverable`.
    These properties are created by us, and we can create as many as we need and be
    as specific as we want. These properties can be used to add more information to
    the error object, so we can handle the error properly using these properties in
    a `try`/`catch` block:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，输出中显示了错误信息`看起来你需要更多的睡眠`，以及类名`NotEnoughSleep`。此外，我们还在错误对象中添加了两个属性：`requireSleep`和`isRecoverable`。这些属性是我们自己创建的，我们可以根据需要创建任意多个，并且可以尽可能具体。这些属性可以用来向错误对象添加更多信息，这样我们就可以使用这些属性在`try`/`catch`块中正确地处理错误：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is the output of the previous code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上一段代码的输出：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, we have used the `isRecoverable` and `requireSleep` properties
    to handle the error. This is a very simple example, but you can add more properties
    to the error object to handle the error properly.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们使用了`isRecoverable`和`requireSleep`属性来处理错误。这是一个非常简单的例子，但您可以向错误对象添加更多属性来正确处理错误。
- en: In the next section, we are going to learn how to capture and recover from any
    kind of error while using Express.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何在使用Express时捕获和恢复任何类型的错误。
- en: Managing errors in Express
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Express中管理错误
- en: In the previous chapters, we learned how to create a REST API application using
    Express and we saw how to handle errors in Express applications, but in this section,
    we are going to refresh the concepts and extend them.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们学习了如何使用Express创建REST API应用程序，并看到了如何在Express应用程序中处理错误，但在这个章节中，我们将刷新这些概念并对其进行扩展。
- en: Error-handling middleware
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误处理中间件
- en: 'Express has a built-in error-handling middleware that can be used to handle
    errors in a centralized way. This middleware is executed when an error occurs
    in the application. This middleware is executed after all the other middleware
    and routes have been executed. It is executed only when an error occurs, so it
    is important to add it at the end of the middleware chain, like so:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Express有一个内置的错误处理中间件，可以用来集中处理应用程序中的错误。当应用程序中发生错误时，将执行此中间件。此中间件在所有其他中间件和路由执行之后执行。它仅在发生错误时执行，因此非常重要，需要将其添加到中间件链的末尾，如下所示：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Custom errors
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义错误
- en: 'If you are building a REST API application, you could add a property to the
    error object to indicate the HTTP status code that should be returned to the client.
    This way, you can handle the error properly in the error-handling middleware and
    return the proper HTTP status code to the client. Here is an example:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在构建REST API应用程序，你可以在错误对象中添加一个属性来指示应返回给客户端的HTTP状态码。这样，你可以在错误处理中间件中正确处理错误，并将适当的HTTP状态码返回给客户端。以下是一个示例：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, we can use the `statusCode` property to return the proper HTTP
    status code to the client. This is a very simple example but you can add more
    properties to the error object to handle the error properly.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们可以使用 `statusCode` 属性返回适当的HTTP状态码给客户端。这是一个非常简单的示例，但你可以在错误对象中添加更多属性来正确处理错误。
- en: Now that we know how to handle errors, it is time to learn how to gracefully
    shut down the application when the application cannot recover from an error.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道了如何处理错误，是时候学习如何在应用程序无法从错误中恢复时优雅地关闭应用程序了。
- en: Gracefully shutting down the application
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优雅地关闭应用程序
- en: Throughout the book, we have learned how to handle errors using `try`/`catch`
    blocks, error-first callbacks, `catch` for promises, and also events to handle
    errors but, sometimes, we need to handle errors globally.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们学习了如何使用 `try`/`catch` 块、错误优先回调、`catch` 用于承诺以及事件来处理错误，但有时我们需要全局处理错误。
- en: 'Node.js provides a way to handle errors globally and gracefully shut down the
    application when an error occurs: using `process.on()`. You can also use `process.exit()`
    to exit the application with a specific exit code. This is useful in CI/CD pipelines,
    to indicate whether or not the application was shut down because of an error,
    and also in productive environments.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js提供了一种处理错误的全局方法，并在发生错误时优雅地关闭应用程序：使用 `process.on()`。你还可以使用 `process.exit()`
    以特定的退出代码退出应用程序。这在CI/CD管道中非常有用，可以指示应用程序是否因为错误而关闭，以及在生产环境中。
- en: Events
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件
- en: 'There are many events that can be used to handle errors globally:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多事件可以用来处理全局错误：
- en: '`uncaughtException`: This event is emitted when an uncaught exception occurs'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uncaughtException`：当发生未捕获的异常时，此事件被触发'
- en: '`unhandledRejection`: This event is emitted when an unhandled rejection occurs'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unhandledRejection`：当发生未处理的拒绝时，此事件被触发'
- en: '`exit`: This event is emitted when the Node.js process is about to exit'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit`：当Node.js进程即将退出时，此事件被触发'
- en: '`SIGINT` and `SIGTERM`: These events are emitted when the Node.js process receives
    these signals'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGINT` 和 `SIGTERM`：当Node.js进程接收到这些信号时，这些事件被触发'
- en: 'Many other events can be used to handle errors globally but these are the most
    common ones. In the following example, we combine some scenarios to handle errors
    globally:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用许多其他事件来处理全局错误，但这些都是最常见的。在以下示例中，我们将结合一些场景来处理全局错误：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you run the previous code, you will see that the application will be shut
    down after 20 seconds because of the unhandled rejection, but the uncaught exception
    was eventually caught and the process continues running. Also, if you press *Ctrl*
    + *C* at any time, the application will be shut down because of the `SIGINT` signal.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行前面的代码，你会看到由于未处理的拒绝，应用程序将在20秒后关闭，但未捕获的异常最终被捕获，进程继续运行。此外，如果你在任何时候按下 *Ctrl*
    + *C*，应用程序将因为 `SIGINT` 信号而关闭。
- en: 'In the following example, we can see that the `exit` event is always triggered
    when we are closing the Node.js application. So, it is quite common to use this
    event to perform some actions before the application is shut down:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们可以看到，当我们关闭Node.js应用程序时，`exit`事件总是被触发。因此，在应用程序关闭之前执行一些操作是很常见的：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Take into account that the `exit` event is not only triggered when an error
    occurs but also when the application is closed gracefully and does not support
    asynchronous operations.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`exit`事件不仅在发生错误时触发，而且当应用程序优雅地关闭且不支持异步操作时也会触发。
- en: In the next section, we will learn how to use exit codes to indicate the reason
    why the application was shut down. This is very useful in CI/CD pipelines to indicate
    whether the application was shut down because of an error or not.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用退出码来指示应用程序关闭的原因。这在CI/CD管道中非常有用，可以指示应用程序是否是因为错误而关闭的。
- en: Exit codes
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 退出码
- en: Exit codes are used to indicate the reason that the application was shut down,
    as well as whether or not the application was shut down because of an error and
    whether the application was shut down gracefully or not.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 退出码用于指示应用程序关闭的原因，以及应用程序是否因为错误而关闭，以及应用程序是否是优雅关闭的。
- en: If the exit code is `0`, it means that the application was shut down gracefully.
    If the exit code is different from `0`, it means that the application was shut
    down because of an error. By default, when there is nothing to do in the application,
    Node.js will exit with the exit code of `0`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果退出码是`0`，则表示应用程序是优雅关闭的。如果退出码不同于`0`，则表示应用程序是因为错误而关闭的。默认情况下，当应用程序中没有其他事情要做时，Node.js将以退出码`0`退出。
- en: By using `process.exit()`, we can indicate the exit code that we want to use.
    For example, if we want to indicate that the application was shut down because
    of an error, we can use `process.exit(1)`. If we want to indicate that the application
    was shut down gracefully, we can use `process.exit(0)`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`process.exit()`，我们可以指定我们想要使用的退出码。例如，如果我们想表示应用程序是因为错误而关闭的，我们可以使用`process.exit(1)`。如果我们想表示应用程序是优雅关闭的，我们可以使用`process.exit(0)`。
- en: Some processes might finish correctly in terms of execution but use an error
    code. For example, when we run and complete application tests, if any test fails,
    the exit code will be different from `0`. That way, the execution output will
    be an error that can prevent CI from continuing to execute the pipeline.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一些进程可能在执行上正确完成，但使用错误码。例如，当我们运行并完成应用程序测试时，如果任何测试失败，退出码将不同于`0`。这样，执行输出将是一个错误，可以防止持续执行CI管道。
- en: In the next section, we will learn how to prevent zombie processes while using
    the process library to handle errors globally.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何在处理错误时使用process库来防止僵尸进程。
- en: Avoiding zombie processes
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免僵尸进程
- en: I love zombie movies but I don’t like zombie processes. A zombie process is
    a process that is running in the background and is not doing anything. These kinds
    of processes eat resources from the host machine, and they can be a huge problem
    in certain scenarios such as low-capability devices.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢僵尸电影，但我不喜欢僵尸进程。僵尸进程是指在后台运行且不做任何事情的进程。这类进程会消耗主机机的资源，在某些场景下（如低功耗设备）可能成为大问题。
- en: Using `process.on()` can be dangerous because it can prevent the Node.js process
    from exiting. This is why it is important to use `process.exit()` to exit the
    application with a specific exit code when needed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`process.on()`可能很危险，因为它可能会阻止Node.js进程退出。这就是为什么在需要时使用`process.exit()`以特定的退出码退出应用程序很重要的原因。
- en: 'Let’s see an example. If we don’t use `process.exit()`, the application will
    not exit and it will be running forever, even if an error occurs while executing
    a function that is not defined:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个例子。如果我们不使用`process.exit()`，应用程序将不会退出，并且它将永远运行，即使执行一个未定义的函数时发生错误：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is shown in the following output:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这在以下输出中显示：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can prevent that by adding `process.exit()` to exit the application with
    a specific exit code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过添加`process.exit()`来防止这种情况，以特定的退出码退出应用程序：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output will be as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see, the application was shut down because we used `process.exit()`
    to exit the application with a specific exit code. If we don’t use `process.exit()`,
    the application will be running forever, making it a zombie process.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，应用程序被关闭是因为我们使用了 `process.exit()` 来使用特定的退出代码退出应用程序。如果我们不使用 `process.exit()`，应用程序将永远运行，使其成为一个僵尸进程。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the types of errors that can be thrown in
    Node.js applications. We saw how to throw custom errors and how to capture and
    recover from any kind of error.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了在 Node.js 应用程序中可能抛出的错误类型。我们看到了如何抛出自定义错误以及如何捕获和从任何类型的错误中恢复。
- en: Additionally, we reviewed how to manage application and user errors in Express.
    We also learned how to manage a graceful shutdown when the service crashed.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还回顾了如何在 Express 中管理应用程序和用户错误。我们还学习了如何在服务崩溃时管理优雅关闭。
- en: Finally, we learned how to prevent zombie processes.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了如何防止僵尸进程。
- en: In the next chapter, we are going to learn more about security, including how
    to protect our application by applying the best practices available and how to
    evaluate CVEs and security vulnerabilities.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习更多关于安全性的内容，包括如何通过应用最佳实践来保护我们的应用程序，以及如何评估 CVE 和安全漏洞。
- en: Further reading
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Express* | *Health Checks and Graceful* *Shutdown*: [https://expressjs.com/en/advanced/healthcheck-graceful-shutdown.html](https://expressjs.com/en/advanced/healthcheck-graceful-shutdown.html)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Express* | *健康检查和优雅* *关闭*: [https://expressjs.com/en/advanced/healthcheck-graceful-shutdown.html](https://expressjs.com/en/advanced/healthcheck-graceful-shutdown.html)'
- en: '*Express* | *Error* *Handling*: [https://expressjs.com/en/guide/error-handling.html](https://expressjs.com/en/guide/error-handling.html)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Express* | *错误处理*: [https://expressjs.com/en/guide/error-handling.html](https://expressjs.com/en/guide/error-handling.html)'
- en: 'Node.js docs | *Error* *API*: [https://nodejs.org/dist/latest-v20.x/docs/api/errors.html](https://nodejs.org/dist/latest-v20.x/docs/api/errors.html)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Node.js 文档 | *错误* *API*: [https://nodejs.org/dist/latest-v20.x/docs/api/errors.html](https://nodejs.org/dist/latest-v20.x/docs/api/errors.html)'
- en: '*Bash command line exit codes* *demystified*: [https://www.redhat.com/sysadmin/exit-codes-demystified](https://www.redhat.com/sysadmin/exit-codes-demystified)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Bash 命令行退出代码* *揭秘*: [https://www.redhat.com/sysadmin/exit-codes-demystified](https://www.redhat.com/sysadmin/exit-codes-demystified)'
