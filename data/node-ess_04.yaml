- en: Chapter 4. Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。调试
- en: At some point in your journey with Node.js, it is inevitable that you will have
    to debug some nasty bugs. So, let's expect them beforehand and plan for that day.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Node.js的过程中，不可避免地会遇到一些棘手的错误。因此，让我们预先期望它们并为那一天做好准备。
- en: Logging
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志
- en: There are a few methods that we can use to debug our software; the first one
    we are going to look at is logging. The simplest way to log a message is to use
    `console`. In most of the previous examples `console` has been used to portray
    what is going on without needing to see the entire HTTP request and response,
    thus making things a lot more readable and simple.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一些方法来调试我们的软件；我们要看的第一种方法是日志记录。记录消息的最简单方法是使用`console`。在大多数先前的示例中，`console`已被用来描述正在发生的事情，而无需查看整个HTTP请求和响应，从而使事情变得更加可读和简单。
- en: 'An example of this is:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子是：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Running this example will log requests and responses on the console:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此示例将在控制台上记录请求和响应：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If we are using a framework that accepts middleware, such as express, we could
    use a simple `npm` package called **morgan**; you can find the package at [https://www.npmjs.com/package/morgan](https://www.npmjs.com/package/morgan):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用接受中间件的框架，比如express，我们可以使用一个简单的`npm`包叫做**morgan**；您可以在[https://www.npmjs.com/package/morgan](https://www.npmjs.com/package/morgan)找到该包：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can use it by using `require` to bring it into our code and adding it as
    middleware:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`require`将其引入我们的代码并将其添加为中间件来使用它：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When the server is running, we can see each request and response without having
    to add logging to each handler:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器运行时，我们可以在不必为每个处理程序添加日志的情况下查看每个请求和响应：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This kind of logging is a simple way to see what is being used on the server
    and how long each request is taking. Here, you can see that the first requests
    took the longest and then they got a lot faster. The difference is only of 3 ms;
    if the time was larger, it could have been a big problem.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的日志记录是查看服务器上正在使用的内容以及每个请求花费多长时间的简单方法。在这里，您可以看到第一个请求花费的时间最长，然后它们变得快得多。差异仅为3毫秒；如果时间更长，可能会成为一个大问题。
- en: 'We can increase the information that''s logged by changing the format we pass
    to morgan, as shown:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过更改我们传递给morgan的格式来增加记录的信息，如下所示：
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: By running the server you will see more information, such as the remote user,
    date and time of the request, amount of content that was returned, and the client
    they are using.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行服务器，您将看到更多信息，例如远程用户、请求的日期和时间、返回的内容量以及他们正在使用的客户端。
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Timing is definitely an important factor as it can be helpful when sifting through
    the mountains of logs that you will obtain. Some bugs can be like a ticking time-bomb
    waiting to explode at 3 AM on a Saturday night. All these logs mean nothing to
    us if the process has died and the logs have disappeared. There is another popular
    and useful package called `bunyan,` which wraps many logging methods into one.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 时间绝对是一个重要因素，因为在筛选您将获得的大量日志时，它可能会有所帮助。有些错误就像一个定时炸弹，等待在周六晚上3点爆炸。如果进程已经死亡并且日志已经消失，所有这些日志对我们来说都毫无意义。还有另一个流行且有用的包叫做`bunyan`，它将许多日志记录方法包装成一个。
- en: Bunyan brings to the table the advantage of writeable streams to write logs,
    whether it is a file on disk or `stdout`. This allows us to persist our logs for
    postmortem debugging. You can find more details about `bunyan` at [https://www.npmjs.com/package/bunyan](https://www.npmjs.com/package/bunyan).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Bunyan带来了可写流的优势，可以将日志写入磁盘上的文件或`stdout`。这使我们能够保存日志以进行事后调试。您可以在[https://www.npmjs.com/package/bunyan](https://www.npmjs.com/package/bunyan)找到有关`bunyan`的更多详细信息。
- en: 'Now, let''s install the package. We want it installed both locally and globally
    so that we can also use it as a command line tool:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们安装该软件包。我们希望它在本地和全局都安装，以便我们还可以将其用作命令行工具：
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, lets do some logging:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们做一些日志记录：
- en: '[PRE8]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Running our example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 运行我们的示例：
- en: '[PRE9]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This doesn't look very pretty, does it? Bunyan uses a simple structured JSON
    string to save messages; this makes it easy to parse, extend, and read. Bunyan
    comes with a CLI utility to make everything nice and pretty.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来不太好看，对吧？Bunyan使用简单的结构化JSON字符串保存消息；这使得它易于解析、扩展和阅读。Bunyan配备了一个CLI实用程序，使一切变得美观。
- en: 'If we run the example with the utility, then we will see that the output is
    nicely formatted:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用实用程序运行示例，那么我们将看到输出格式很好：
- en: '[PRE10]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we add a few more levels, you will see on your console that each is colored
    differently to help us identify them:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们添加了更多级别，您将在控制台上看到每个级别的颜色不同，以帮助我们识别它们：
- en: '[PRE11]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s run the example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行示例：
- en: '[PRE12]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you notice, trace and debug weren't outputted on the console. This is because
    they are used to follow the flow of the program rather than the key information
    and are usually very noisy.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果注意到，跟踪和调试没有在控制台上输出。这是因为它们用于跟踪程序的流程而不是关键信息，通常非常嘈杂。
- en: 'We can change the level of logs we want to see by passing this as an option
    when we create the logger:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在创建记录器时将其作为选项传递来更改我们想要查看的日志级别：
- en: '[PRE13]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, when we run the example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们运行示例时：
- en: '[PRE14]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We usually don't want to see logs that are lower than the info level, as any
    information that is useful for post-mortem debugging should have been logged using
    the info or higher.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通常我们不希望看到低于信息级别的日志，因为任何有用于事后调试的信息都应该使用信息级别或更高级别进行记录。
- en: 'Bunyan''s api is good for the function of logging errors and objects. It saves
    the correct structures in its JSON output, which is ready for display:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Bunyan的API非常适用于记录错误和对象的功能。它在其JSON输出中保存了正确的结构，可以直接显示：
- en: '[PRE15]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s run the example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行示例：
- en: '[PRE16]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If we look at the example and pretty-print it, we will see that they save it
    as an error:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看示例并进行漂亮打印，我们将看到它们将其保存为错误：
- en: '[PRE17]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is useful because, if you just log an error, you will either get an empty
    object if you used `JSON.stringify` or just the message if you used `toString`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有用，因为如果您只记录错误，如果您使用了`JSON.stringify`，则会得到一个空对象，或者如果您使用了`toString`，则只会得到消息：
- en: '[PRE18]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s run the example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行示例：
- en: '[PRE19]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'It is to lot simpler and cleaner to use `logger.error( error )` than `logger.error(
    { message: error.message /*, ... */ } );`.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '使用`logger.error( error )`比`logger.error( { message: error.message /*, ... */
    } );`更简单和更清晰。'
- en: As mentioned earlier, `bunyan` uses the concept of streams, which means that
    we can write to a file, `stdout`, or any other service we wish to extend to.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`bunyan`使用流的概念，这意味着我们可以写入文件、`stdout`或任何其他我们希望扩展到的服务。
- en: 'To write to a file, all we need to do is add it to the options passed to `bunyan`
    at setup:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要写入文件，我们只需要将其添加到设置时传递给`bunyan`的选项中：
- en: '[PRE20]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'By running the example, you won''t see any logs being outputted to the console
    but they will be written to file instead:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行示例，您将看不到任何日志输出到控制台，而是会写入文件：
- en: '[PRE21]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you list what''s in the directory you will see a new file has been created:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您列出目录中的内容，您会看到已创建了一个新文件：
- en: '[PRE22]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you read what''s in the file you will see that the logs have already been
    written:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您读取文件中的内容，您会看到日志已经被写入：
- en: '[PRE23]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can run this through `bunyan` in order to print it out nicely:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过`bunyan`运行它，以便将其打印出来：
- en: '[PRE24]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now that we can log to a file, we also want to be able to see the messages
    as they are displayed. If we were just logging to a file, we could use:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以记录到文件中，我们还希望能够在消息显示时看到它们。如果我们只是记录到文件中，我们可以使用：
- en: '[PRE25]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This will log to `stdout` as the file it is being written to; alternatively
    we could just add another stream to `bunyan`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将记录到正在写入的文件`stdout`；或者我们可以向`bunyan`添加另一个流：
- en: '[PRE26]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Running the example will display the logs to the console:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 运行示例将在控制台上显示日志：
- en: '[PRE27]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We can also see the logs have been appended to the file:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到日志已经附加到文件中：
- en: '[PRE28]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Great, now we have the logging down, what shall we do with it?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在我们已经记录下来了，我们应该怎么处理呢？
- en: Well, it helps to know where our errors are occurring and it starts to get really
    messy when you have lots of anonymous functions around the place. If you noticed
    in the examples that cover an HTTP server, the majority of the functions were
    named. This is very helpful in tracking down errors when callbacks are involved.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，知道错误发生的地方是有帮助的，当您周围有很多匿名函数时，情况就会变得非常混乱。如果您注意到覆盖HTTP服务器的示例中，大多数函数都是命名的。当涉及到回调时，这对于跟踪错误非常有帮助。
- en: 'Let''s look at this example:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个例子：
- en: '[PRE29]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'It might look a bit messy and that''s because it is. Let''s run the following
    example:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能看起来有点混乱，因为它确实如此。让我们运行以下示例：
- en: '[PRE30]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: You can see that there are no function names in our code and also there is no
    naming in the stack trace unlike the first few functions. In Node.js, the naming
    of functions will come from either the variable name or the actual function name.
    For example, if you use `Cls.prototype.func` then the name will be `Cls.func`
    but if you use the function `func` then the name will be `func`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们的代码中没有函数名称，堆栈跟踪也没有命名，这与前几个函数不同。在Node.js中，函数的命名将来自变量名或实际函数名。例如，如果您使用`Cls.prototype.func`，那么名称将是`Cls.func`，但如果您使用函数`func`，那么名称将是`func`。
- en: 'You can see that there is a slight benefit here but this becomes very useful
    once you start using patterns involving `async` callbacks:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到这里有一点好处，但是一旦您开始使用涉及`async`回调的模式，这将变得非常有用：
- en: '[PRE31]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let''s throw an error in a callback:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在回调中抛出一个错误：
- en: '[PRE32]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Running our example gives us:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 运行我们的示例给我们：
- en: '[PRE33]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This is where it starts to get difficult to read; assigning simple names to
    our functions can help us find where the error is coming from:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是开始变得难以阅读的地方；为我们的函数分配简单的名称可以帮助我们找到错误的来源：
- en: '[PRE34]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Running the example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 运行示例：
- en: '[PRE35]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Error handling
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理
- en: 'Another aspect of debugging is handling and expecting errors beforehand. There
    are three ways in which we can handle our errors:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 调试的另一个方面是处理和预期错误。我们可以以三种方式处理我们的错误：
- en: a simple `try`/`catch`
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个简单的`try`/`catch`
- en: catching them at the process level
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在进程级别捕获它们
- en: catching errors on the domain level
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在域级别捕获错误
- en: 'A `try`/`catch` function will be sufficient if we expect an error to occur
    and we will be able to continue without knowing the result of whatever was being
    executed, or we could handle and return the error, as shown:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们期望发生错误并且我们能够在不知道正在执行的结果的情况下继续，那么`try`/`catch`函数就足够了，或者我们可以处理并返回错误，如下所示：
- en: '[PRE36]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Another simple way to catch errors is to add an error handler to your process;
    any errors that are caught at this level are usually fatal and should be treated
    as such. An exit of the process should follow and you should be using a package,
    such as `forever` or `pm2`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种捕获错误的简单方法是向您的进程添加错误处理程序；在这个级别捕获的任何错误通常是致命的，应该视为这样处理。进程的退出应该跟随，您应该使用一个包，比如`forever`或`pm2`：
- en: '[PRE37]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: You should always exit the process following an uncaught error. The fact that
    it is uncaught means that your application is in an unknown state where anything
    can happen. For example, there could have been an error in your HTTP router and
    no more requests can be routed to the correct handlers. You can read more about
    this at [https://nodejs.org/api/process.html#process_event_uncaughtexception](https://nodejs.org/api/process.html#process_event_uncaughtexception).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在捕获到未捕获的错误后，您应该始终退出进程。未捕获的事实意味着您的应用程序处于未知状态，任何事情都可能发生。例如，您的HTTP路由器可能出现错误，无法将更多请求路由到正确的处理程序。您可以在[https://nodejs.org/api/process.html#process_event_uncaughtexception](https://nodejs.org/api/process.html#process_event_uncaughtexception)上阅读更多相关信息。
- en: A better way to handle errors on a global level is using `domain`. With domains
    you can almost *sandbox* a group of asynchronous code together.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在全局级别处理错误的更好方法是使用`domain`。使用域，您几乎可以*沙箱*一组异步代码在一起。
- en: Let's think in the context of a request to our server. We make a request, read
    from a database, make calls to external services, write back to a database, do
    some logging, do some business logic, and we expect perfect data coming from external
    sources all around the code. However, in the real world it isn't always so and
    we can't handle every error that could possibly occur; moreover, we don't want
    to take down our entire server just because of one error for a very specific request.
    That's where we need domains.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在请求服务器的情境下思考。我们发出请求，从数据库中读取数据，调用外部服务，写回数据库，进行一些日志记录，执行一些业务逻辑，并且我们期望来自代码周围所有外部来源的数据都是完美的。然而，在现实世界中并非总是如此，我们无法处理可能发生的每一个错误；此外，我们也不希望因为一个非常特定的请求出现错误而导致整个服务器崩溃。这就是我们需要域的地方。
- en: 'Let''s look at the following example:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看下面的例子：
- en: '[PRE38]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Let''s run the code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行这段代码：
- en: '[PRE39]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: There is a problem with this code; however, as we are running this synchronously
    we are still putting the process into a broken state. This is because the error
    bubbled up to the node itself and then was passed to the active domain.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码存在问题；然而，由于我们是同步运行的，我们仍然将进程置于一个破碎的状态。这是因为错误冒泡到了节点本身，然后传递给了活动域。
- en: 'When we are creating the domain in an asynchronous callback, we can be sure
    that the process can continue. We can mimic this by using `process.nextTick`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在异步回调中创建域时，我们可以确保进程可以继续。我们可以通过使用`process.nextTick`来模拟这一点：
- en: '[PRE40]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Running the example should display the correct logs:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 运行示例应该显示正确的日志：
- en: '[PRE41]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we have covered a few post-mortem debugging methods to help
    us uncover bugs including logging, naming practices, and sufficient error handling.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了一些事后调试方法，帮助我们发现错误，包括日志记录、命名惯例和充分的错误处理。
- en: In the next chapter, we will cover configuration of our applications.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何配置我们的应用程序。
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为Bentham Chang准备，Safari ID为bentham@gmail.com 用户编号：2843974 © 2015 Safari Books
    Online，LLC。此下载文件仅供个人使用，并受到服务条款的约束。任何其他使用都需要版权所有者的事先书面同意。未经授权的使用、复制和/或分发严格禁止并违反适用法律。保留所有权利。
