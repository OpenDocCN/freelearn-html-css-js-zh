- en: '*Chapter 11*: Using Bootstrap 5 with Advanced JavaScript Features'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第11章*: 使用Bootstrap 5的高级JavaScript特性'
- en: In this chapter, we will learn about some advanced JavaScript features that
    can be used with the interactive components of Bootstrap 5\. First, we will get
    a quick overview of the interactive components and see which requirements they
    have in common in terms of dependencies and initialization. Then, we will see
    how we can initialize interactive components with either data attributes or JavaScript.
    Following this, we will see how we can define options with either data attributes
    or JavaScript, and finally, we will take a closer look at how we can use JavaScript
    for methods and events.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习一些可以与Bootstrap 5交互式组件一起使用的JavaScript高级特性。首先，我们将快速概述交互式组件，并查看它们在依赖项和初始化方面的共同要求。然后，我们将看到如何使用数据属性或JavaScript初始化交互式组件。接着，我们将看到如何使用数据属性或JavaScript定义选项，最后，我们将更详细地探讨如何使用JavaScript进行方法和事件处理。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Interactive components of Bootstrap 5
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap 5的交互式组件
- en: Initializing interactive components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化交互式组件
- en: Defining options for interactive components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义交互式组件的选项
- en: Using JavaScript methods
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript方法
- en: Using JavaScript events
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript事件
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To preview the examples, you will need a code editor and a browser. The source
    code for all code examples can be found here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了预览示例，你需要一个代码编辑器和浏览器。所有代码示例的源代码都可以在这里找到：
- en: https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide
- en: Interactive components of Bootstrap 5
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bootstrap 5的交互式组件
- en: We will start this chapter by getting an overview of the interactive components
    of Bootstrap 5\. For each component listed here, we will see which JavaScript
    file is being used, whether it requires custom initialization, which options,
    methods, and events it has, whether it has any dependencies, and for some of them
    also some additional information. In the following sections, we will then look
    closer at initialization, options, methods, and events, so this should just be
    regarded as an overview. At the end of the list, there’s also a summary to highlight
    the most important differences.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始，先对Bootstrap 5的交互式组件进行概述。对于这里列出的每个组件，我们将看到它使用了哪个JavaScript文件，是否需要自定义初始化，它有哪些选项、方法和事件，是否有任何依赖项，对于其中的一些，我们还会提供一些额外的信息。在接下来的章节中，我们将更详细地探讨初始化、选项、方法和事件，因此这应该只被视为一个概述。列表的最后，还有一个总结，以突出最重要的差异。
- en: Accordion
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 折叠面板
- en: This component is built using the collapse component described later.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件是使用后面描述的折叠组件构建的。
- en: Alert
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 警告框
- en: '`alert.js`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`alert.js`'
- en: '**Custom initialization**: No'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义初始化**: 否'
- en: '**Options**: None'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项**: 无'
- en: '`close`, `dispose`, `getInstance`, `getOrCreateInstance`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`close`, `dispose`, `getInstance`, `getOrCreateInstance`'
- en: '`close.bs.alert`, `closed.bs.alert`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`close.bs.alert`, `closed.bs.alert`'
- en: '**Dependencies**: None'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖项**: 无'
- en: This component can be dismissed with the close button component.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件可以使用关闭按钮组件关闭。
- en: Button
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按钮
- en: '`button.js`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`button.js`'
- en: '**Custom initialization**: No'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义初始化**: 否'
- en: '**Options**: None'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项**: 无'
- en: '`toggle`, `dispose`, `getInstance`, `getOrCreateInstance`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`toggle`, `dispose`, `getInstance`, `getOrCreateInstance`'
- en: '**Events**: None'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件**: 无'
- en: '**Dependencies**: None'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖项**: 无'
- en: Carousel
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轮播图
- en: '`carousel.js`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`carousel.js`'
- en: '**Custom initialization**: No'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义初始化**: 否'
- en: '`interval`, `keyboard`, `pause`, `ride`, `wrap`, `touch`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`interval`, `keyboard`, `pause`, `ride`, `wrap`, `touch`'
- en: '`cycle`, `pause`, `prev`, `next`, `nextWhenVisible`, `to`, `dispose`, `getInstance`,
    `getOrCreateInstance`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`cycle`, `pause`, `prev`, `next`, `nextWhenVisible`, `to`, `dispose`, `getInstance`,
    `getOrCreateInstance`'
- en: '`slide.bs.carousel`, `slid.bs.carousel`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`slide.bs.carousel`, `slid.bs.carousel`'
- en: '**Dependencies**: None'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖项**: 无'
- en: Collapse
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 折叠组件
- en: '`collapse.js`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`collapse.js`'
- en: '**Custom initialization**: No'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义初始化**: 否'
- en: '`parent`, `toggle`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`parent`, `toggle`'
- en: '`toggle`, `show`, `hide`, `dispose`, `getInstance`, `getOrCreateInstance`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`toggle`, `show`, `hide`, `dispose`, `getInstance`, `getOrCreateInstance`'
- en: '`show.bs.collapse`, `shown.bs.collapse`, `hide.bs.collapse`, `hidden.bs.collapse`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`show.bs.collapse`, `shown.bs.collapse`, `hide.bs.collapse`, `hidden.bs.collapse`'
- en: '**Dependencies**: None'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖项**: 无'
- en: Dropdown
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下拉菜单
- en: '`dropdown.js`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`dropdown.js`'
- en: '**Custom initialization**: No'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义初始化**: 否'
- en: '`boundary`, `reference`, `display`, `offset`, `autoClose`, `popperConfig`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`boundary`, `reference`, `display`, `offset`, `autoClose`, `popperConfig`'
- en: '`toggle`, `show`, `hide`, `update`, `dispose`, `getInstance`, `getOrCreateInstance`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`toggle`, `show`, `hide`, `update`, `dispose`, `getInstance`, `getOrCreateInstance`'
- en: '`show.bs.dropdown`, `shown.bs.dropdown`, `hide.bs.dropdown`, `hidden.bs.dropdown`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`show.bs.dropdown`, `shown.bs.dropdown`, `hide.bs.dropdown`, `hidden.bs.dropdown`'
- en: '**Dependencies**: Popper'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖**: Popper'
- en: This component requires the external third-party library Popper for positioning.
    It must be included before `bootstrap.js` or by using `bootstrap.bundle.js`, which
    contains Popper.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件需要外部第三方库Popper进行定位。它必须在 `bootstrap.js` 之前包含，或者使用包含Popper的 `bootstrap.bundle.js`。
- en: List group
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表组
- en: This component uses `tab.js` to create tab navigation based on list groups.
    Please refer to the details for navs and tabs, which use the same JavaScript file.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件使用 `tab.js` 基于列表组创建标签导航。请参考关于导航和标签的详细信息，它们使用相同的JavaScript文件。
- en: Modal
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Modal
- en: '`modal.js`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`modal.js`'
- en: '**Custom initialization**: No'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义初始化**: 否'
- en: '`backdrop`, `keyboard`, `focus`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`backdrop`, `keyboard`, `focus`'
- en: '`toggle`, `show`, `hide`, `handleUpdate`, `dispose`, `getInstance`, `getOrCreateInstance`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`toggle`, `show`, `hide`, `handleUpdate`, `dispose`, `getInstance`, `getOrCreateInstance`'
- en: '`show.bs.modal`, `shown.bs.modal`, `hide.bs.modal`, `hidden.bs.modal`, `hidePrevented.bs.modal`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`show.bs.modal`, `shown.bs.modal`, `hide.bs.modal`, `hidden.bs.modal`, `hidePrevented.bs.modal`'
- en: '**Dependencies**: None'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖**: 无'
- en: Navs and tabs
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航和标签
- en: '`tab.js`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`tab.js`'
- en: '**Custom initialization**: No'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义初始化**: 否'
- en: '**Options**: None'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项**: 无'
- en: '`show`, `dispose`, `getInstance`, `getOrCreateInstance`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`show`, `dispose`, `getInstance`, `getOrCreateInstance`'
- en: '`show.bs.tab`, `shown.bs.tab`, `hide.bs.tab`, `hidden.bs.tab`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`show.bs.tab`, `shown.bs.tab`, `hide.bs.tab`, `hidden.bs.tab`'
- en: '**Dependencies**: None'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖**: 无'
- en: The JavaScript file used by this component is also used by the list group component.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件使用的JavaScript文件也用于列表组组件。
- en: Offcanvas
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Offcanvas
- en: '`offcanvas.js`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`offcanvas.js`'
- en: '**Custom initialization**: No'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义初始化**: 否'
- en: '`backdrop`, `keyboard`, `scroll`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`backdrop`, `keyboard`, `scroll`'
- en: '`toggle`, `show`, `hide`, `getInstance`, `getOrCreateInstance`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`toggle`, `show`, `hide`, `getInstance`, `getOrCreateInstance`'
- en: '`show.bs.offcanvas`, `shown.bs.offcanvas`, `hide.bs.offcanvas`, `hidden.bs.offcanvas`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`show.bs.offcanvas`, `shown.bs.offcanvas`, `hide.bs.offcanvas`, `hidden.bs.offcanvas`'
- en: '**Dependencies**: None'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖**: 无'
- en: Popover
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Popover
- en: '`popover.js`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`popover.js`'
- en: '**Custom initialization**: Yes'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义初始化**: 是'
- en: '`animation`, `container`, `content`, `delay`, `html`, `placement`, `selector`,
    `template`, `title`, `trigger`, `fallbackPlacements`, `boundary`, `customClass`,
    `sanitize`, `allowList`, `sanitizeFn`, `offset`, `popperConfig`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation`, `container`, `content`, `delay`, `html`, `placement`, `selector`,
    `template`, `title`, `trigger`, `fallbackPlacements`, `boundary`, `customClass`,
    `sanitize`, `allowList`, `sanitizeFn`, `offset`, `popperConfig`'
- en: '`show`, `hide`, `toggle`, `dispose`, `enable`, `disable`, `toggleEnabled`,
    `update`, `getInstance`, `getOrCreateInstance`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`show`, `hide`, `toggle`, `dispose`, `enable`, `disable`, `toggleEnabled`,
    `update`, `getInstance`, `getOrCreateInstance`'
- en: '`show.bs.popover`, `shown.bs.popover`, `hide.bs.popover`, `hidden.bs.popover`,
    `inserted.bs.popover`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`show.bs.popover`, `shown.bs.popover`, `hide.bs.popover`, `hidden.bs.popover`,
    `inserted.bs.popover`'
- en: '`tooltip.js`, Popover'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`tooltip.js`, Popover'
- en: This component requires `tooltip.js` as a dependency. It also requires the external
    third-party library Popper for positioning. The latter must be included before
    `bootstrap.js` or by using `bootstrap.bundle.js`, which contains Popper.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件需要 `tooltip.js` 作为依赖。它还需要外部第三方库Popper进行定位。后者必须在 `bootstrap.js` 之前包含，或者使用包含Popper的
    `bootstrap.bundle.js`。
- en: Scrollspy
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Scrollspy
- en: '`scrollspy.js`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`scrollspy.js`'
- en: '**Custom initialization**: No'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义初始化**: 否'
- en: '`rootMargin`, `smoothScroll`, `target`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`rootMargin`, `smoothScroll`, `target`'
- en: '`refresh`, `dispose`, `getInstance`, `getOrCreateInstance`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`refresh`, `dispose`, `getInstance`, `getOrCreateInstance`'
- en: '`activate.bs.scrollspy`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`activate.bs.scrollspy`'
- en: '**Dependencies**: None'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖**: 无'
- en: Toast
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Toast
- en: '`toast.js`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`toast.js`'
- en: '**Custom initialization**: Yes'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义初始化**: 是'
- en: '`animation`, `autohide`, `delay`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation`, `autohide`, `delay`'
- en: '`show`, `hide`, `dispose`, `getInstance`, `getOrCreateInstance`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`show`, `hide`, `dispose`, `getInstance`, `getOrCreateInstance`'
- en: '`show.bs.toast`, `shown.bs.toast`, `hide.bs.toast`, `hidden.bs.toast`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`show.bs.toast`, `shown.bs.toast`, `hide.bs.toast`, `hidden.bs.toast`'
- en: '**Dependencies**: None'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖**: 无'
- en: Tooltip
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Tooltip
- en: '`tooltip.js`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`tooltip.js`'
- en: '**Custom initialization**: Yes'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义初始化**: 是'
- en: '`animation`, `container`, `delay`, `html`, `placement`, `selector`, `template`,
    `title`, `trigger`, `fallbackPlacements`, `boundary`, `customClass`, `sanitize`,
    `allowList`, `sanitizeFn`, `offset`, `popperConfig`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation`, `container`, `delay`, `html`, `placement`, `selector`, `template`,
    `title`, `trigger`, `fallbackPlacements`, `boundary`, `customClass`, `sanitize`,
    `allowList`, `sanitizeFn`, `offset`, `popperConfig`'
- en: '`show`, `hide`, `toggle`, `dispose`, `enable`, `disable`, `toggleEnabled`,
    `update`, `getInstance`, `getOrCreateInstance`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`show`, `hide`, `toggle`, `dispose`, `enable`, `disable`, `toggleEnabled`,
    `update`, `getInstance`, `getOrCreateInstance`'
- en: '`show.bs.tooltip`, `shown.bs.tooltip`, `hide.bs.tooltip`, `hidden.bs.tooltip`,
    `inserted.bs.tooltip`'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`show.bs.tooltip`, `shown.bs.tooltip`, `hide.bs.tooltip`, `hidden.bs.tooltip`,
    `inserted.bs.tooltip`'
- en: '**Dependencies**: Popover'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖**: 弹出'
- en: This component requires the external third-party library Popper for positioning.
    It must be included before `bootstrap.js` or by using `bootstrap.bundle.js`, which
    contains Popper.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件需要外部第三方库 Popper 来定位。它必须在 `bootstrap.js` 之前包含，或者通过使用包含 Popper 的 `bootstrap.bundle.js`。
- en: The `tooltip.js` file is required by the popover component as a dependency.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出组件需要 `tooltip.js` 文件作为依赖。
- en: We just ran through a list of all of the 15 components that use JavaScript in
    some way or another. Now, we will summarize this and highlight the most important
    differences among the components. Under the next four headings, we will therefore
    see which components stand out from the crowd.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚列出并概述了所有 15 个以某种方式使用 JavaScript 的组件。现在，我们将总结这些内容，并突出组件之间的最重要的差异。因此，在接下来的四个标题下，我们将看到哪些组件脱颖而出。
- en: Requires initialization
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 需要初始化
- en: '**Components**: Popover, toast, tooltip'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**组件**: 弹出、通知、工具提示'
- en: These components can’t be initialized with the use of data attributes due to
    performance reasons. Hence, they must instead be initialized using custom JavaScript.
    We will see how in the *Initializing interactive components* section.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 由于性能原因，这些组件不能使用数据属性初始化。因此，它们必须使用自定义 JavaScript 来初始化。我们将在 *初始化交互式组件* 部分看到如何操作。
- en: Has dependencies
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有依赖
- en: '**Components**: Dropdown, popover, tooltip'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**组件**: 下拉菜单、弹出、工具提示'
- en: These components all require the external third-party library Popper for positioning.
    It must be included before `bootstrap.js` or by using `bootstrap.bundle.js`, which
    contains Popper.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件都需要外部第三方库 Popper 来定位。它必须在 `bootstrap.js` 之前包含，或者通过使用包含 Popper 的 `bootstrap.bundle.js`。
- en: In addition to this, the popover component also requires the `tooltip.js` JavaScript
    file from the tooltip component as a dependency.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，弹出组件还需要工具提示组件的 `tooltip.js` JavaScript 文件作为依赖。
- en: Has no options
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 没有选项
- en: '**Components**: Alert, button, navs, and tabs'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**组件**: 警告、按钮、导航和标签页'
- en: These components don’t have any options.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件没有任何选项。
- en: Has no events
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 没有事件
- en: '**Component**: Button'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**组件**: 按钮'
- en: This component doesn’t have any events.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件没有任何事件。
- en: Initializing interactive components
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化交互式组件
- en: In this section, we will see how we can initialize interactive components in
    two different ways. First, we will see how we can do it with data attributes in
    the HTML, which is the default way, which you might have already been using. Then,
    we will see how we can do it with JavaScript instead. We can initialize most of
    the interactive components that come with Bootstrap 5 using data attributes and
    without adding any extra JavaScript code ourselves, while some of them we must
    initialize with our own JavaScript.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到我们可以以两种不同的方式初始化交互式组件。首先，我们将看到如何在 HTML 中使用数据属性来初始化，这是默认方式，你可能已经在使用了。然后，我们将看到如何使用
    JavaScript 来初始化。我们可以使用数据属性初始化大多数与 Bootstrap 5 一起提供的交互式组件，而无需添加任何额外的 JavaScript
    代码，而对于其中的一些组件，我们必须使用自己的 JavaScript 来初始化。
- en: Initializing interactive components using data attributes
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用数据属性初始化交互式组件
- en: 'We can initialize most of the interactive components that come with Bootstrap
    5 using data attributes and without adding any extra JavaScript code ourselves.
    For most components, we use the `data-bs-toggle` data attribute, with the value
    being the name of the component, like so:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用数据属性初始化大多数与 Bootstrap 5 一起提供的交互式组件，而无需添加任何额外的 JavaScript 代码。对于大多数组件，我们使用
    `data-bs-toggle` 数据属性，其值是组件的名称，如下所示：
- en: HTML
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: HTML
- en: '[PRE0]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: However, for the carousel component, we must use `data-bs-ride="carousel"`,
    for the scrollspy component we must use `data-bs-spy="scroll"`, and, to dismiss
    the alert or offcanvas component, we must use `data-bs-dismiss="[alert/offcanvas]"`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于轮播组件，我们必须使用 `data-bs-ride="carousel"`，对于滚动监听组件，我们必须使用 `data-bs-spy="scroll"`，并且，要关闭警告或偏移画布组件，我们必须使用
    `data-bs-dismiss="[alert/offcanvas]"`。
- en: Other required data attributes
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 其他所需的数据属性
- en: Various other data attributes are required for some components to make them
    work. The data attributes mentioned above are just the ones used to initialize
    them.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一些组件需要各种其他数据属性才能正常工作。上述提到的数据属性只是用于初始化它们的属性。
- en: Initializing interactive components using JavaScript
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 JavaScript 初始化交互式组件
- en: As we saw in the list at the beginning of this chapter, we must initialize some
    of the interactive components with our own JavaScript code.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章开头的列表中所看到的，我们必须使用自己的 JavaScript 代码来初始化一些交互式组件。
- en: 'As an example, we want to create a tooltip component for the following badge
    component:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们想要为以下徽章组件创建一个提示组件：
- en: HTML
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: HTML
- en: '[PRE1]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `<div>` tag has the `title` attribute that is used by the tooltip component.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`<div>` 标签具有 `title` 属性，该属性被提示组件使用。'
- en: Syntax
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语法
- en: We can initialize an interactive component by using the constructor function
    in JavaScript to create and initialize an object instance of a class using the
    `new` keyword.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在 JavaScript 中使用构造函数创建并初始化一个类的对象实例来初始化一个交互式组件，使用 `new` 关键字。
- en: 'The syntax for this is as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 该语法的语法如下：
- en: JavaScript
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript
- en: '[PRE2]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, `element` can be either a DOM element or a CSS selector and `options`
    is an object and is optional. Options can still be defined using data attributes,
    even though we are initializing a component with JavaScript. We will learn more
    about options in the *Defining options for interactive components* section.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`element` 可以是一个 DOM 元素或 CSS 选择器，而 `options` 是一个对象，是可选的。即使我们使用 JavaScript
    初始化组件，也可以使用数据属性定义选项。我们将在 *为交互式组件定义选项* 部分了解更多关于选项的内容。
- en: Using a DOM element
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 DOM 元素
- en: 'To initialize an interactive component using a DOM element, we must first store
    it in a variable, and then use that variable as a reference to the DOM element.
    Here’s an example of how to do this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 DOM 元素初始化一个交互式组件，我们必须首先将其存储在一个变量中，然后使用该变量作为 DOM 元素的引用。以下是一个示例：
- en: part-3/chapter-11/examples/initialization/index.xhtml line 14
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/initialization/index.xhtml 行 14
- en: '[PRE3]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: part-3/chapter-11/examples/initialization/js/script.js line 1-2
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/initialization/js/script.js 行 1-2
- en: '[PRE4]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the previous code, we stored the element with `id="tooltipDOM"` in the `element`
    variable, which we then passed as an argument to the constructor function. We
    didn’t pass any options since we will take a closer look at that later in this
    chapter.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们将具有 `id="tooltipDOM"` 的元素存储在 `element` 变量中，然后将其作为参数传递给构造函数。我们没有传递任何选项，因为我们将在此章的稍后部分更详细地介绍这一点。
- en: Using a CSS selector
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 CSS 选择器
- en: 'To initialize an interactive component using a CSS selector, we can simply
    pass it as the argument to the constructor function. The element is then found
    using the `querySelector()` method. Here’s an example of how to do this using
    the ID of the `<div>` element as the selector:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 CSS 选择器初始化一个交互式组件，我们可以简单地将它作为构造函数的参数传递。然后使用 `querySelector()` 方法找到该元素。以下是一个使用
    `<div>` 元素的 ID 作为选择器的示例：
- en: part-3/chapter-11/examples/initialization/index.xhtml line 19
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/initialization/index.xhtml 行 19
- en: '[PRE6]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: part-3/chapter-11/examples/initialization/js/script.js line 4
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/initialization/js/script.js 行 4
- en: '[PRE7]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Initializing multiple components
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化多个组件
- en: The various JavaScript plugins for the interactive components only support a
    single element. So, to initialize multiple elements, we can call the constructor
    function for each element in a list or an array. We will now see two different
    examples of how we can do just that.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式组件的各种 JavaScript 插件仅支持单个元素。因此，要初始化多个元素，我们可以为列表或数组中的每个元素调用构造函数。现在我们将看到两个不同的示例，说明我们如何做到这一点。
- en: Using a for loop
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 for 循环
- en: 'For the first example, we will use the following HTML with three identical
    badge components that all have the same `tooltipLoop` class:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一个示例，我们将使用以下 HTML，其中包含三个具有相同 `tooltipLoop` 类的相同徽章组件：
- en: part-3/chapter-11/examples/initialization/index.xhtml line 24-26
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/initialization/index.xhtml 行 24-26
- en: '[PRE8]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When using a `for` loop, we first store all `<div>` elements in the `tooltipLoopElements`
    variable. Then, we loop through this NodeList and call the constructor function
    for each element:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `for` 循环时，我们首先将所有 `<div>` 元素存储在 `tooltipLoopElements` 变量中。然后，我们遍历这个 NodeList
    并为每个元素调用构造函数：
- en: part-3/chapter-11/examples/initialization/js/script.js line 6-9
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/initialization/js/script.js 行 6-9
- en: '[PRE11]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using the map method
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 map 方法
- en: 'For the second example, we will use the following HTML with three identical
    badge components that all have the same `tooltipMap` class:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二个示例，我们将使用以下 HTML，其中包含三个具有相同 `tooltipMap` 类的相同徽章组件：
- en: part-3/chapter-11/examples/initialization/index.xhtml line 31-33
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/initialization/index.xhtml 行 31-33
- en: '[PRE15]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When using the `map()` method, we first store all `<div>` elements in the `tooltipMapElements`
    variable. However, this time we use the `slice()` and `call()` methods to turn
    the NodeList into an array. Then, we create a new array using the `map()` method
    and store it in the `tooltipMap` variable. For every element in the array, we
    call the constructor function like before:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`map()`方法时，我们首先将所有`<div>`元素存储在`tooltipMapElements`变量中。然而，这次我们使用`slice()`和`call()`方法将NodeList转换为数组。然后，我们使用`map()`方法创建一个新的数组并将其存储在`tooltipMap`变量中。对于数组中的每个元素，我们像之前一样调用构造函数：
- en: part-3/chapter-11/examples/initialization/js/script.js line 11-14
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/initialization/js/script.js 行 11-14
- en: '[PRE18]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Data attribute required for the dropdown component
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉组件所需的数据属性
- en: Even if you choose to initialize the dropdown component using JavaScript, the
    `data-bs-toggle="dropdown"` data attribute is still required on the trigger element
    for the dropdown.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您选择使用JavaScript初始化下拉组件，触发元素的`data-bs-toggle="dropdown"`数据属性仍然是必需的。
- en: We have now learned how to initialize interactive components in various ways.
    We will continue to learn how to define options for interactive components.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学会了如何以各种方式初始化交互式组件。我们将继续学习如何为交互式组件定义选项。
- en: Defining options for interactive components
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义交互式组件的选项
- en: 'In the list at the beginning of this chapter, we saw which options were available
    for interactive components. In the official documentation of Bootstrap 5, you
    will find a table describing all of the available options (if any) for each component.
    In this table, you will find the name, type, default value, and description for
    each option. You can access the components in the official documentation through
    this link: [getbootstrap.com/docs/5.1/components](http://getbootstrap.com/docs/5.1/components).'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开头列出的列表中，我们看到了交互式组件可用的选项。在Bootstrap 5的官方文档中，您将找到一个表格，描述了每个组件的所有可用选项（如果有）。在这个表格中，您将找到每个选项的名称、类型、默认值和描述。您可以通过以下链接访问官方文档中的组件：[getbootstrap.com/docs/5.1/components](http://getbootstrap.com/docs/5.1/components)。
- en: Default options for all components of a type and common options for a group
    of components can be set via JavaScript, while options for individual components
    can be passed either via data attributes or via JavaScript. Let’s now see how
    this is done.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过JavaScript设置同一类型的所有组件的默认选项和一组组件的常见选项，而单个组件的选项可以通过数据属性或JavaScript传递。现在让我们看看这是如何完成的。
- en: Defining default options
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义默认选项
- en: 'You can change the default value for an option for a component by using the
    following syntax:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下语法为组件的选项更改默认值：
- en: JavaScript
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript
- en: '[PRE22]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As an example, we can set our tooltip components to have a default delay of
    1,000 milliseconds in the following way:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以将我们的提示框组件设置为默认延迟为1,000毫秒，如下所示：
- en: JavaScript
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript
- en: '[PRE23]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Defining options using data attributes
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用数据属性定义选项
- en: To define options using data attributes, we append the option name to `data-bs-`,
    and the case type of the option name should be changed from *camelCase* to *kebab-case*.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用数据属性定义选项，我们将选项名称附加到`data-bs-`，并且选项名称的案例类型应从*camelCase*更改为*kebab-case*。
- en: 'Now, let’s see how we can initialize a tooltip component with an option for
    how to trigger it. For this purpose, we can use the `trigger` option, which accepts
    a value of the `string` type. The default is `‘hover focus’`, and the possible
    values are `‘click | hover | focus | manual’`. We will make the tooltip trigger
    on click only using the following code:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用触发选项初始化提示框组件，该选项接受字符串类型的值。默认值为`‘hover focus’`，可能的值有`‘click | hover
    | focus | manual’`。我们将使用以下代码仅使用点击来触发提示框：
- en: HTML
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: HTML
- en: '[PRE24]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The tooltip will now only be triggered on click for both showing and hiding
    – just like the popover component. Keep in mind that the previous code on its
    own will not initialize the tooltip component. As we just learned, this must be
    done with our own JavaScript code:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在提示框将仅在点击时触发以显示和隐藏——就像弹出组件一样。请注意，仅凭之前的代码本身不会初始化提示框组件。正如我们刚刚学到的，这必须通过我们自己的JavaScript代码来完成：
- en: Options that can’t be set using data attributes
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 无法使用数据属性设置的选项
- en: 'The following options used by the popover and tooltip components can’t be set
    using data attributes due to security reasons: `sanitize`, `sanitizeFn`, and `allowList`.
    These are all related to using HTML in the content of the tooltip or popover.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 由于安全原因，以下由弹出框和提示组件使用的选项不能使用数据属性设置：`sanitize`、`sanitizeFn`和`allowList`。这些都与在提示或弹出框的内容中使用HTML有关。
- en: Defining options using JavaScript
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用JavaScript定义选项
- en: 'As mentioned earlier in this chapter, it’s possible to pass an optional `options`
    object to the constructor when initializing an interactive component with JavaScript.
    To repeat, the syntax looks like this:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章前面所述，初始化交互式组件时，可以通过构造函数传递一个可选的`options`对象。再次强调，语法如下：
- en: '[PRE25]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To define an option with an object, we simply use the option name as a property
    of the object and then give it a valid value depending on the type of option.
    Initializing the same tooltip component as before, with the `trigger` option set
    to `click`, will then look like this:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用对象定义一个选项，我们只需将选项名称作为对象的属性，然后根据选项类型给出一个有效的值。初始化与之前相同的提示组件，将`trigger`选项设置为`click`，将看起来像这样：
- en: HTML
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: HTML
- en: '[PRE26]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: JavaScript
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript
- en: '[PRE27]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The tooltip will now only be triggered on click for both showing and hiding.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在提示框将仅在点击时触发显示和隐藏。
- en: Defining default, common, and individual options
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义默认、通用和个体选项
- en: As mentioned previously, we can define default, common, and individual options
    for components using JavaScript and data attributes. This is useful if you want
    to define some default options for all components of a type, options with the
    same value for a group of components, and individual options with different values
    for each instance of a component.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们可以使用JavaScript和数据属性为组件定义默认、通用和个体选项。如果你想要为同一类型的所有组件定义一些默认选项，为组件组定义具有相同值的选项，以及为每个组件实例定义具有不同值的个体选项，这将非常有用。
- en: 'We will now see an example where we make use of all of this. In our HTML, we
    have four badge components to which we want to add a tooltip component. On each
    of the `<div>` elements, we define the placement for the tooltip using the `data-bs-placement`
    data attribute:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将看到一个示例，我们将利用所有这些。在我们的HTML中，我们有四个徽章组件，我们想要为它们添加一个提示组件。在每个`<div>`元素上，我们使用`data-bs-placement`数据属性定义提示的位置：
- en: part-3/chapter-11/examples/options/index.xhtml
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/options/index.xhtml
- en: '[PRE28]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, in our JavaScript, we first define the default option for `delay` and
    set it to `1000` milliseconds. After that, we initialize the components using
    JavaScript with the `trigger` option set to `‘click’`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在我们的JavaScript中，我们首先定义`delay`的默认选项并将其设置为`1000`毫秒。之后，我们使用`trigger`选项设置为`‘click’`来初始化组件：
- en: part-3/chapter-11/examples/options/js/script.js
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/options/js/script.js
- en: '[PRE32]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The four badge components will now have a tooltip component each that will trigger
    on click with a delay of 1,000 milliseconds. The tooltips will be placed at the
    top, bottom, left, and right respectively.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在四个徽章组件将各自拥有一个提示组件，点击时延迟1,000毫秒触发。提示框将分别放置在顶部、底部、左侧和右侧。
- en: Using data attributes and JavaScript for the same option
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数据属性和JavaScript设置相同选项
- en: If you specify the same option with both a data attribute and using JavaScript,
    the JavaScript setting will take precedence.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你同时使用数据属性和JavaScript指定相同的选项，JavaScript设置将优先。
- en: Using JavaScript methods
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JavaScript方法
- en: 'In the list at the beginning of this chapter, we saw that all interactive components
    have methods. In the official documentation of Bootstrap 5, you will find a table
    describing all of the available methods for each component. In this table, you
    will find the name and description for each method. You can access the components
    in the official documentation through this link: [getbootstrap.com/docs/5.2/components](http://getbootstrap.com/docs/5.2/components).'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开头列表中，我们看到了所有交互式组件都有方法。在Bootstrap 5的官方文档中，你可以找到一个表格，描述了每个组件的所有可用方法。在这个表格中，你可以找到每个方法的名称和描述。你可以通过以下链接访问官方文档中的组件：[getbootstrap.com/docs/5.2/components](http://getbootstrap.com/docs/5.2/components)。
- en: 'Now, we will see some examples of how to use specific methods for the tooltip
    component. In our example page, we first have a default tooltip component for
    comparison. The HTML for this is as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到一些如何使用特定方法的示例。在我们的示例页面上，我们首先有一个默认的提示组件用于比较。其HTML代码如下：
- en: part-3/chapter-11/examples/methods/index.xhtml line 15
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/methods/index.xhtml 行 15
- en: '[PRE38]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The tooltip has the `id="tooltipDefault"` attribute, which we use to initialize
    it with the following JavaScript:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 提示具有`id="tooltipDefault"`属性，我们使用以下JavaScript对其进行初始化：
- en: part-3/chapter-11/examples/methods/js/script.js line 1
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/methods/js/script.js 行 1
- en: '[PRE39]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: As we can see, the tooltip is placed at the bottom using the `placement` option.
    This is simply to make the example page better visually.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，提示使用`placement`选项放置在底部。这只是为了使示例页面在视觉上更好。
- en: 'For the next tooltip component on the example page, we want it to show when
    the page loads and, at the same time, disable triggering on hover and focus. The
    HTML is as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 对于示例页面上的下一个提示组件，我们希望它在页面加载时显示，同时禁用悬停和聚焦触发。HTML代码如下：
- en: part-3/chapter-11/examples/methods/index.xhtml line 21
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/methods/index.xhtml 行 21
- en: '[PRE40]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The tooltip has the `id="tooltipOnLoad"` attribute, which we will use for initialization.
    The JavaScript code looks like this:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 提示具有`id="tooltipOnLoad"`属性，我们将使用它进行初始化。JavaScript代码如下：
- en: part-3/chapter-11/examples/methods/js/script.js line 3-4
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/methods/js/script.js 行 3-4
- en: '[PRE41]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The tooltip is placed at the bottom using the `placement` option and the method
    to trigger the tooltip is set to `manual`. This means that the tooltip will be
    triggered programmatically using JavaScript, which is exactly what we do in the
    line below where we call the `show()` method on the initialized tooltip component.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 提示使用`placement`选项放置在底部。这只是为了使示例页面在视觉上更好。
- en: 'For our final tooltip component on the example page, we want to toggle its
    visibility when we click a button placed elsewhere on the page. The HTML for this
    is as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 对于示例页面上的最终提示组件，我们希望当我们点击页面上的另一个按钮时切换其可见性。这个HTML代码如下：
- en: part-3/chapter-11/examples/methods/index.xhtml line 27-28
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/methods/index.xhtml 行 27-28
- en: '[PRE43]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The button has the `id="triggerForTooltip"` attribute, which we will use to
    attach an event listener, and the tooltip has the `id="tooltipOnButtonClick"`
    attribute, which we will use for initialization. The JavaScript code looks like
    this:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮具有`id="triggerForTooltip"`属性，我们将使用它来附加事件监听器，提示具有`id="tooltipOnButtonClick"`属性，我们将使用它进行初始化。JavaScript代码如下：
- en: part-3/chapter-11/examples/methods/js/script.js line 6-10
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/methods/js/script.js 行 6-10
- en: '[PRE45]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The first line is similar to the previous example: the tooltip is placed at
    the bottom using the `placement` option and the method to trigger the tooltip
    is set to `manual`. Below that, we first get the button element and then attach
    a `click` event to it and execute the `toggle()` method when the button is clicked.
    This will show and hide the tooltip.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行与上一个示例类似：使用`placement`选项将提示放置在底部，并将触发提示的方法设置为`manual`。下面，我们首先获取按钮元素，然后将其附加一个`click`事件，并在按钮被点击时执行`toggle()`方法。这将显示和隐藏提示。
- en: Asynchronous methods and transitions
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步方法和转换
- en: 'It’s important to know that all methods are asynchronous and start a transition.
    As soon as that transition is started, they return to the caller. This means that
    a method call on a component that is currently transitioning is ignored. Take
    the following example, which will show the modal, but not hide it, since the `hide()`
    method is called immediately after `show()` and therefore before the transition
    to show that the modal is finished:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要知道所有方法都是异步的，并且开始一个转换过程。一旦转换开始，它们就会返回调用者。这意味着在组件正在转换时对其进行的调用将被忽略。以下是一个示例，它将显示模态框，但不会隐藏它，因为`hide()`方法是在`show()`方法之后立即调用的，因此是在模态框显示转换完成之前：
- en: JavaScript
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript
- en: '[PRE50]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Instead, if we want to execute some code when the transition is finished, we
    need to listen to the corresponding event, like so:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果我们想在转换完成后执行一些代码，我们需要监听相应的事件，如下所示：
- en: JavaScript
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript
- en: '[PRE54]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Now, the modal will first show and then hide again when the modal’s `shown`
    event is fired. In the next section, we will see another example of how to use
    Bootstrap 5 events.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，模态框将首先显示，然后在模态框的`shown`事件被触发时再次隐藏。在下一节中，我们将看到另一个如何使用Bootstrap 5事件的示例。
- en: Using JavaScript events
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JavaScript事件
- en: 'In the list at the beginning of this chapter, we saw that most interactive
    components have events. In the official documentation of Bootstrap 5, you will
    find a table describing all of the available events for each component. In this
    table, you will find the event type and description for each method. You can access
    the components in the official documentation through this link: [getbootstrap.com/docs/5.2/components](http://getbootstrap.com/docs/5.2/components).'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开头的列表中，我们看到了大多数交互式组件都有事件。在Bootstrap 5的官方文档中，你可以找到一个表格，描述了每个组件的所有可用事件。在这个表格中，你可以找到每个方法的类型和描述。你可以通过此链接访问官方文档中的组件：[getbootstrap.com/docs/5.2/components](http://getbootstrap.com/docs/5.2/components)。
- en: Now, we will see an example of how to use a specific event for the tooltip component.
    In our example page, we have a button that triggers a modal component. In the
    modal footer, we have a **Confirm** button on which we want to show a tooltip
    when the modal is shown and the transition is finished.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到一个如何使用特定事件的示例，用于提示框组件。在我们的示例页面上，我们有一个按钮，它触发一个模态组件。在模态框的页脚中，我们有一个**确认**按钮，我们希望在模态框显示且过渡完成时显示提示框。
- en: 'Here’s what the HTML looks like:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是HTML的样式：
- en: part-3/chapter-11/examples/events/index.xhtml
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/events/index.xhtml
- en: '[PRE60]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'The tooltip has the `id="tooltip"`, which we will use for initialization, and
    the content for the tooltip is placed in a `title` attribute. In the JavaScript
    code, we first store the DOM element of the modal in a variable and initialize
    the tooltip component. Then, in an event listener attached to the modal, we listen
    to the `shown.bs.modal` event and call the `show()` method on the tooltip component
    when it fires. The JavaScript code for this is as follows:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 提示框具有 `id="tooltip"`，我们将用它进行初始化，并且提示框的内容放置在 `title` 属性中。在JavaScript代码中，我们首先将模态框的DOM元素存储在一个变量中，并初始化提示框组件。然后，在附加到模态框的事件监听器中，我们监听
    `shown.bs.modal` 事件，并在该事件触发时调用提示框组件的 `show()` 方法。此代码如下：
- en: part-3/chapter-11/examples/events/js/script.js
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-11/examples/events/js/script.js
- en: '[PRE86]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: This example will now show the tooltip exactly when the transition for the modal
    is finished.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例将显示提示框，正好在模态框的过渡完成时。
- en: Events with properties
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 带有属性的事件
- en: 'The two events for the carousel component have the following additional properties:
    `direction` (`"left"` or `"right"`), `relatedTarget` (DOM element), `from` (index
    number), and `to` (index number).'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转木马组件的两个事件具有以下附加属性：`direction` (`"left"` 或 `"right"`), `relatedTarget` (DOM元素),
    `from` (索引号), 和 `to` (索引号)。
- en: Summary
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned about some advanced JavaScript features that
    can be used with the interactive components of Bootstrap 5\. First, we got a quick
    overview of the interactive components and saw which requirements they have in
    common in terms of dependencies and initialization. Then, we saw how we can initialize
    interactive components with either data attributes or JavaScript. Following this,
    we saw how we can define options with either data attributes or JavaScript, and
    finally, we took a closer look at how we can use JavaScript for methods and events.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了可以与Bootstrap 5的交互式组件一起使用的某些高级JavaScript特性。首先，我们快速概述了交互式组件，并看到了它们在依赖性和初始化方面的共同要求。然后，我们看到了如何使用数据属性或JavaScript初始化交互式组件。接着，我们看到了如何使用数据属性或JavaScript定义选项，最后，我们更详细地探讨了如何使用JavaScript进行方法和事件的处理。
- en: In the next and final chapter of this book, we will learn how to optimize the
    compiled Bootstrap 5 CSS and JavaScript code.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的下一章和最后一章中，我们将学习如何优化编译后的Bootstrap 5 CSS和JavaScript代码。
