- en: '*Chapter 7:* Findings from TestCafe'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章:* TestCafe的发现'
- en: The main learning goal in this chapter is to optimize our test actions with
    functions and get familiar with how to use npm scripts to run the tests. We will
    also review the main direction of TestCafe framework development, along with some
    references to useful resources.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要学习目标是使用函数优化我们的测试动作，并熟悉如何使用npm脚本来运行测试。我们还将回顾TestCafe框架发展的主要方向，以及一些有用资源的引用。
- en: This knowledge will give us some additional ideas on how to refactor tests,
    how to run them more efficiently, and where to search for further improvements.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们一些额外的想法，关于如何重构测试，如何更有效地运行它们，以及在哪里寻找进一步的改进。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Taking a final step with test functions.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用测试函数迈出最后一步。
- en: Wrapping up the test project with npm scripts.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用npm脚本来封装测试项目。
- en: Exploring TestCafe development and future plans.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索TestCafe的开发和未来计划。
- en: Additional references to useful resources.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对有用资源的额外引用。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All code examples for this chapter can be found on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码示例都可以在GitHub上找到：[https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7)。
- en: Taking a final step with test functions
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用测试函数迈出最后一步
- en: 'The tests that we created consist of chains of actions. Some of them, such
    as the `Creating a new project` test, are still being repeated. So, one final
    logical step to take will be to separate such sequences of actions into the functions.
    Let''s see how this can be achieved with the `createNewProject`, `createNewIssue`,
    and `uploadFile` functions inside `redmine-page.js`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的测试由一系列动作组成。其中一些，例如`Creating a new project`测试，仍在重复进行。所以，最后一步逻辑步骤将是将这些动作序列分离到函数中。让我们看看如何通过`redmine-page.js`中的`createNewProject`、`createNewIssue`和`uploadFile`函数来实现这一点：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, we moved `getPageUrl` and `regularUser` to `redmine-page.js`
    as it is quite convenient to have all the utility functions concentrated in one
    file.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们将`getPageUrl`和`regularUser`移动到了`redmine-page.js`，因为将所有实用函数集中在一个文件中非常方便。
- en: 'Now, let''s add the `createNewProject` function, which will contain all the
    actions to create a new project:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加`createNewProject`函数，该函数将包含创建新项目的所有动作：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There is one more function to add, which will contain all the actions to create
    a new issue:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 需要添加另一个函数，该函数将包含创建新问题的所有动作：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And finally, add the function that contains all the actions to upload a file:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，添加包含上传文件所有动作的函数：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/tests/redmine-page4.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/tests/redmine-page4.js).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在GitHub上查看和下载此文件：[https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/tests/redmine-page4.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/tests/redmine-page4.js)。
- en: 'Now, the updated `Create a new project` test will look like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，更新的`Create a new project`测试将看起来像这样：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you probably noticed, now, only `Selector` is required from `testcafe`, as
    `ClientFunction`, `Role`, and `t` were moved to `redmine-page.js`. In addition,
    we are now using `redminePage.regularUser` instead of just `regularUser` - this
    is due to moving the `regularUser` function to `redmine-page.js`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已注意到，现在，从`testcafe`中只需要`Selector`，因为`ClientFunction`、`Role`和`t`已被移动到`redmine-page.js`。此外，我们现在使用`redminePage.regularUser`而不是仅仅`regularUser`
    - 这是因为将`regularUser`函数移动到了`redmine-page.js`。
- en: 'The updated `Create a new issue` test will look like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 更新的`Create a new issue`测试将看起来像这样：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `Verify that the issue is displayed on a project page` test will also look
    shorter now, as we are using the `createNewProject` and `createNewIssue` functions
    inside it to create corresponding entities:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的`Verify that the issue is displayed on a project page`测试看起来也会更短，因为我们现在在测试中使用`createNewProject`和`createNewIssue`函数来创建相应的实体：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the `Upload a file` test, we will utilize the `createNewProject` and `uploadFile`
    functions so that it will look more compact, too:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Upload a file`测试中，我们将利用`createNewProject`和`uploadFile`函数，使其看起来也更紧凑：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is how the updated `Edit the issue` test with the `createNewProject` and
    `createNewIssue` functions will appear:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用 `createNewProject` 和 `createNewIssue` 函数更新的 `Edit the issue` 测试的显示方式：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And the refactored `Verify that the updated issue is displayed on a project
    page` test with the `createNewProject` and `createNewIssue` functions will now
    look like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 并且使用 `createNewProject` 和 `createNewIssue` 函数重构的 `Verify that the updated issue
    is displayed on a project page` 测试现在看起来是这样的：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `Search for the issue` test will also benefit from utilizing the `createNewProject`
    and `createNewIssue` functions as it will become significantly shorter:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`Search for the issue` 测试也将从利用 `createNewProject` 和 `createNewIssue` 函数中受益，因为它将显著缩短：'
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And finally, here is what the refactored `Delete the issue` and `Delete the
    file` tests will look like:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下是重构的 `Delete the issue` 和 `Delete the file` 测试的显示方式：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/tests/basic-tests22.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/tests/basic-tests22.js).'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在 GitHub 上查看并下载此文件：[https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/tests/basic-tests22.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/tests/basic-tests22.js)。
- en: So, we have optimized our set of tests to be granular and utilize functions
    instead of repeated actions. Now, let's wrap up the test project with npm scripts.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经优化了我们的测试集，使其更细粒度并使用函数而不是重复操作。现在，让我们使用 npm 脚本来完成测试项目。
- en: Wrapping up the test project with npm scripts
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 npm 脚本完成测试项目
- en: 'As we have finished refactoring our tests, let''s see how to run them more
    efficiently. As we recall from [*Chapter 3*](B16280_03_Final_JM_ePub.xhtml#_idTextAnchor043)*,
    Setting Up the Environment*, where we initiated `package.json`, and [*Chapter
    4*](B16280_04_Final_JM_ePub.xhtml#_idTextAnchor099)*, Building a Test Suite with
    TestCafe*, where we added the `js-automation-tools` library, our basic `package.json`
    file currently looks like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经完成了测试的重构，让我们看看如何更有效地运行它们。如我们回忆在 [*第 3 章*](B16280_03_Final_JM_ePub.xhtml#_idTextAnchor043)*，设置环境*，我们初始化了
    `package.json`，以及 [*第 4 章*](B16280_04_Final_JM_ePub.xhtml#_idTextAnchor099)*，使用
    TestCafe 构建测试套件*，我们添加了 `js-automation-tools` 库，我们的基本 `package.json` 文件目前看起来是这样的：
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We are currently running our tests by executing the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前通过执行以下命令来运行我们的测试：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Or, as we discussed in [*Chapter 5*](B16280_05_Final_JM_ePub.xhtml#_idTextAnchor125),
    *Improving the Tests*, we utilize a double dash debug-on-fail flag to make our
    life easier while developing new tests (this will pause the test when it fails
    and will allow you to view the tested page and determine the cause of the fail):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如我们讨论的 [*第 5 章*](B16280_05_Final_JM_ePub.xhtml#_idTextAnchor125)，*改进测试*，我们利用双横线调试失败标志来使我们的开发生活更轻松（这将在测试失败时暂停测试，并允许您查看测试页面并确定失败的原因）：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can also use one additional flag:`--speed` (sets the rate of test execution)
    – to reduce the test execution speed for debugging:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用一个额外的标志：`--speed`（设置测试执行速率）——以降低测试执行速度进行调试：
- en: '[PRE15]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It is starting to look quite long now, isn''t it? To overcome this problem,
    we can use npm scripts. Let''s create a `test-debug` alias inside `package.json`
    to launch tests with debugging flags:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来相当长了，不是吗？为了克服这个问题，我们可以使用 npm 脚本。让我们在 `package.json` 中创建一个 `test-debug`
    别名来带有调试标志启动测试：
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'So, now we can run our tests with **debugging flags** by executing a short
    command with the alias that we just created:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们可以通过执行我们刚刚创建的别名的一个简短命令来带有调试标志运行我们的测试：
- en: '[PRE17]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As we have discussed how to use npm scripts to add commands for local test
    debugging, let''s now imagine that we will also need to run our tests on a `--quarantine-mode`
    flag:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们讨论了如何使用 npm 脚本来添加本地测试调试的命令，现在让我们想象我们还需要在 `--quarantine-mode` 标志下运行我们的测试：
- en: '[PRE18]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/package.json](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/package.json).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在 GitHub 上查看并下载此文件：[https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/package.json](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/package.json)。
- en: 'So, now we can run our tests on CI by executing a short and simple command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们可以通过执行一个简短且简单的命令在 CI 上运行我们的测试：
- en: '[PRE19]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To sum up, in this section, we discussed how to create short aliases for the
    local and remote (continuous integration) commands with npm scripts.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在本节中，我们讨论了如何使用npm脚本来创建本地和远程（持续集成）命令的简短别名。
- en: Now, let's explore how to keep a finger on the pulse of TestCafe development
    and where to look for further improvements.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探讨如何保持对TestCafe开发的关注，以及在哪里寻找进一步的改进。
- en: Exploring TestCafe development and future plans
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索TestCafe的开发和未来计划
- en: The birth of TestCafe can be traced back to early 2010, when developers from
    DevExpress started working on it. Initially, when released in 2013, it was a commercial
    testing framework. In 2016, it was decided to open source the core of TestCafe.
    Since then, there have been more than 760,000 downloads per month and the figures
    are still growing. DevExpress also released a commercial testing IDE called TestCafe
    Studio ([https://www.devexpress.com/products/testcafestudio/](https://www.devexpress.com/products/testcafestudio/)),
    which was built on top of the open source TestCafe core. So, it looks like TestCafe
    is here to stay. DevExpress will keep developing it because this will add new
    features to TestCafe Studio.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: TestCafe的诞生可以追溯到2010年初，当时来自DevExpress的开发者开始着手开发它。最初，当它在2013年发布时，它是一个商业测试框架。到了2016年，决定开源TestCafe的核心。从那时起，每月下载量已超过76万次，并且这个数字仍在增长。DevExpress还发布了一个名为TestCafe
    Studio的商业测试IDE（[https://www.devexpress.com/products/testcafestudio/](https://www.devexpress.com/products/testcafestudio/))，它是基于开源的TestCafe核心构建的。因此，看起来TestCafe将会持续存在。DevExpress将继续开发它，因为这将为TestCafe
    Studio添加新功能。
- en: 'Let''s recap some of the advantages of TestCafe:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下TestCafe的一些优点：
- en: Open source.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源。
- en: Easy and fast installation.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装简单快捷。
- en: Headless testing.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无头测试。
- en: Cross-platform and cross-browser out of the box.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开箱即用的跨平台和跨浏览器支持。
- en: 'Supports one of the most popular programming languages for web development:
    JavaScript/TypeScript.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持最受欢迎的Web开发编程语言之一：JavaScript/TypeScript。
- en: A clear, flexible, and well-documented API.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清晰、灵活且文档齐全的API。
- en: Smart assertion and automatic waiting mechanisms out of the box.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开箱即用的智能断言和自动等待机制。
- en: Free custom plugins for browser providers, framework-specific selectors, custom
    reporters, Cucumber support, and so on.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为浏览器提供商、框架特定选择器、自定义报告器、Cucumber支持等提供免费自定义插件。
- en: As for the future direction of development for TestCafe, according to the roadmap
    ([https://devexpress.github.io/testcafe/roadmap/](https://devexpress.github.io/testcafe/roadmap/)),
    there is a plan to support API testing by adding methods for sending HTTP requests
    and checking the response details. In addition to this, the TestCafe team is actively
    working on multiple browser windows feature and a plan is afoot to improve the
    TestCafe debugging flow further.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 关于TestCafe未来开发方向，根据路线图（[https://devexpress.github.io/testcafe/roadmap/](https://devexpress.github.io/testcafe/roadmap/))，有一个计划通过添加发送HTTP请求和检查响应细节的方法来支持API测试。除此之外，TestCafe团队正在积极开发多浏览器窗口功能，并计划进一步改进TestCafe的调试流程。
- en: 'One more piece of advice that is definitely worth mentioning: keep an eye on
    TestCafe changelog ([https://github.com/DevExpress/testcafe/blob/master/CHANGELOG.md](https://github.com/DevExpress/testcafe/blob/master/CHANGELOG.md)).
    It contains tons of useful information about new features and updates. This way,
    you will always know when a new version gets released, and what to expect from
    it.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 另一条值得提到的建议：关注TestCafe的变更日志（[https://github.com/DevExpress/testcafe/blob/master/CHANGELOG.md](https://github.com/DevExpress/testcafe/blob/master/CHANGELOG.md)）。它包含了大量关于新功能和更新的有用信息。这样，你将始终知道何时发布新版本，以及可以期待什么。
- en: As we have reviewed the development of TestCafe and touched on its future plans,
    let's now explore some resources that can be of use in terms of further test automation
    with TestCafe.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们回顾了TestCafe的开发并触及了其未来计划之后，现在让我们探索一些可用于进一步使用TestCafe进行测试自动化的资源。
- en: Additional references to useful resources
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他有用的资源参考
- en: 'Here are some great sources of information on TestCafe:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于TestCafe的优秀信息来源：
- en: '**TestCafe documentation**: [https://devexpress.github.io/testcafe/documentation/reference/](https://devexpress.github.io/testcafe/documentation/reference/).'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TestCafe文档**：[https://devexpress.github.io/testcafe/documentation/reference/](https://devexpress.github.io/testcafe/documentation/reference/)。'
- en: '**TestCafe changelog**: [https://github.com/DevExpress/testcafe/blob/master/CHANGELOG.md](https://github.com/DevExpress/testcafe/blob/master/CHANGELOG.md).'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TestCafe变更日志**：[https://github.com/DevExpress/testcafe/blob/master/CHANGELOG.md](https://github.com/DevExpress/testcafe/blob/master/CHANGELOG.md)。'
- en: '**TestCafe future roadmap**: [https://devexpress.github.io/testcafe/roadmap/](https://devexpress.github.io/testcafe/roadmap/)
    and [https://github.com/DevExpress/testcafe/projects](https://github.com/DevExpress/testcafe/projects).'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TestCafe 未来路线图**：[https://devexpress.github.io/testcafe/roadmap/](https://devexpress.github.io/testcafe/roadmap/)
    和 [https://github.com/DevExpress/testcafe/projects](https://github.com/DevExpress/testcafe/projects).'
- en: '**TestCafe Team Blog**: [https://devexpress.github.io/testcafe/media/team-blog/](https://devexpress.github.io/testcafe/media/team-blog/).'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TestCafe 团队博客**：[https://devexpress.github.io/testcafe/media/team-blog/](https://devexpress.github.io/testcafe/media/team-blog/).'
- en: '**Stack Overflow filter for the most recent questions regarding TestCafe**:
    [https://stackoverflow.com/questions/tagged/testcafe](https://stackoverflow.com/questions/tagged/testcafe).'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Stack Overflow 过滤器，用于最近关于 TestCafe 的问题**：[https://stackoverflow.com/questions/tagged/testcafe](https://stackoverflow.com/questions/tagged/testcafe).'
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored how to optimize test actions with functions, and
    how to use npm scripts to run the tests. We also reviewed the development of the
    TestCafe framework, and some references to useful resources. These skills and
    lessons are intended to help you with any further test automation development
    by highlighting a number of ideas on how to refactor tests, how to run them more
    effectively, and where to look for further improvements.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何使用函数优化测试操作，以及如何使用 npm 脚本来运行测试。我们还回顾了 TestCafe 框架的发展，以及一些有用的资源参考。这些技能和经验旨在通过强调如何重构测试、如何更有效地运行它们以及如何寻找进一步的改进，来帮助你进行任何进一步的测试自动化开发。
- en: This wraps up our fruitful exploration of TestCafe, the rising star of test
    automation. I hope that you enjoyed it and will continue using this magnificent
    tool in your future projects!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着我们对 TestCafe，测试自动化领域的新星，富有成效的探索的结束。我希望你喜欢这次探索，并在未来的项目中继续使用这个出色的工具！
