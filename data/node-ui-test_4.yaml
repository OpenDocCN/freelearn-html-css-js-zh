- en: Chapter 4. Understanding Mocha
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。理解Mocha
- en: 'In the previous chapter, we installed and introduced Mocha. Mocha is a JavaScript
    test framework that runs inside Node.js or inside a browser. You can use it to
    define and run your own tests. Mocha reports back on the outcome: which tests
    ran fine and which tests failed and where any failures occurred. Mocha runs each
    of the tests in turn, waiting for one test to finish or timeout before running
    the next one.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们安装并介绍了Mocha。Mocha是一个JavaScript测试框架，可以在Node.js内部或浏览器内部运行。你可以使用它来定义和运行自己的测试。Mocha会报告测试的结果：哪些测试运行正常，哪些测试失败以及失败发生在哪里。Mocha依次运行每个测试，等待一个测试完成或超时后再运行下一个。
- en: Even though Mocha is designed to be able to run on any modern browser, we will
    only be running it through Node.js via the command line. There are other things
    Mocha can do, which will be explained in this chapter. For a more complete reference
    to Mocha's capabilities, please visit Mocha's official documentation website,
    [http://visionmedia.github.com/mocha/](http://visionmedia.github.com/mocha/) to
    find out more.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Mocha设计为能够在任何现代浏览器上运行，但我们将仅通过Node.js通过命令行来运行它。Mocha还有其他功能，这将在本章中解释。有关Mocha功能的更完整参考，请访问Mocha的官方文档网站，[http://visionmedia.github.com/mocha/](http://visionmedia.github.com/mocha/)
    了解更多信息。
- en: 'The topics covered in this chapter include:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题包括：
- en: Describing features and using assertions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述功能并使用断言
- en: Understanding how Mocha performs asynchronous tests
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Mocha如何执行异步测试
- en: By the end of this chapter, you should be able to use Mocha to perform asynchronous
    tests and understand how Mocha controls test flow.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，你应该能够使用Mocha执行异步测试，并理解Mocha如何控制测试流程。
- en: Organizing your tests
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织你的测试
- en: There are two strategies you can use to organize your tests. The first is to
    divide them somehow into separate files, each file representing a functional or
    logical unit of your application. The other strategy, which can be used in tandem
    with the first one, is to group them by feature.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种策略可以用来组织你的测试。第一种是以某种方式将它们分成单独的文件，每个文件代表应用程序的一个功能或逻辑单元。另一种策略是，可以与第一种策略一起使用，即按功能进行分组。
- en: Having a separate file for each functional unit of your app is a good way of
    separating your testing concerns. You should analyze the structure of your application
    and separate it into distinct concerns that have a minimum amount of overlap.
    For instance, your application may have to deal with user registrations—that could
    be one functional group. Another functional group may be user login. If your application
    deals with to-do lists, you may want to have a separate file that contains the
    tests for that part of your application.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为应用程序的每个功能单元单独创建一个文件是分离测试关注点的好方法。你应该分析应用程序的结构，并将其分成具有最小重叠量的不同关注点。例如，你的应用程序可能需要处理用户注册
    - 这可能是一个功能组。另一个功能组可能是用户登录。如果你的应用程序涉及待办事项列表，你可能希望有一个单独的文件包含该部分的测试。
- en: By having separate files for each functional group, you can call your tests
    in isolation while you're working on that particular group. This technique also
    allows you to keep the line count low on each file, which is helpful when you're
    navigating and maintaining your tests.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为每个功能组单独创建文件，你可以在处理特定组时独立调用你的测试。这种技术还允许你保持每个文件的行数较低，这在导航和维护测试时很有帮助。
- en: '**Describing features**: When defining your tests, you can also group application
    functionality by feature. For instance, when describing the to-do list functionality,
    you could further separate these features as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述功能**：在定义测试时，你还可以按功能对应用程序功能进行分组。例如，在描述待办事项列表功能时，你可以进一步将这些功能分开如下：'
- en: Creating a to-do item
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建待办事项
- en: Removing a to-do item
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除待办事项
- en: Showing the to-do list
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示待办事项列表
- en: Changing the order of to-do list items
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改待办事项列表项目的顺序
- en: Within our test scripts, we would describe the previously mentioned testable
    to-do features.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的测试脚本中，我们将描述先前提到的可测试的待办事项功能。
- en: 'The layout of the to-do items test file could then be as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项测试文件的布局可以如下：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can nest as many `describe` statements as you wish, refining the scope
    of the tests as much as you want, but as a rule of thumb, you should use two description
    levels: one for the functional group (for instance, to-do items) and another level
    for each feature. Inside each feature definition, you can place all the relevant
    tests.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以嵌套任意多个`describe`语句，尽可能细化测试的范围，但作为一个经验法则，你应该使用两个描述级别：一个用于功能组（例如，待办事项），另一个级别用于每个功能。在每个功能定义内，你可以放置所有相关的测试。
- en: Using before and after hooks
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用before和after钩子
- en: For any given group of tests, you can set certain pieces of code to run before
    or after all the tests. This can be useful for setting up databases, cleaning
    up some state after the tests, or generally, for setting up or tearing down some
    state that you need in order to run the test itself.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何一组测试，你可以设置某些代码在所有测试之前或之后运行。这对于设置数据库、清理一些状态或一般设置或拆除一些你需要以便运行测试本身的状态非常有用。
- en: 'In this next example, the function named `runBefore` runs before any of the
    described tests:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，名为`runBefore`的函数在任何描述的测试之前运行：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Save this file code into a file named `test.js` and install Mocha locally:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件代码保存为名为`test.js`的文件，并在本地安装Mocha：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the tests:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It should give you the following output:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该给出以下输出：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In a similar way, you can also specify a function to be executed after all
    the tests are done:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，你还可以指定一个函数，在所有测试完成后执行：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Running this code produces the following output, as you might expect:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码会产生以下输出，正如你所期望的那样：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A function can also be defined to be called before (or after) each and every
    test in the block, using the `beforeEach` and `afterEach` keywords respectively.
    Sample usage of the `beforeEach` keyword is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以定义一个函数，在每个测试块之前（或之后）调用，分别使用`beforeEach`和`afterEach`关键字。`beforeEach`关键字的示例用法如下：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you run this test, the output will be:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行此测试，输出将为：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Naturally, the `afterEach` code calls the function after each test is performed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，`afterEach`代码在每次测试执行后调用该函数。
- en: Using asynchronous hooks
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用异步钩子
- en: 'Any of these functions that you run before any or all your tests can be asynchronous.
    If a function is asynchronous, simply accept a callback argument like this one:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何测试之前运行的这些函数都可以是异步的。如果一个函数是异步的，只需接受一个回调参数，就像这样：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When running this test code, you will notice the one-second lag before running
    each test, which—had we not provided the callback argument—would not have been
    observed.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此测试代码时，您会注意到每次测试运行前有一秒的延迟，如果没有提供回调参数，这一点是不会被观察到的。
- en: How hooks interact with test groups
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 钩子如何与测试组交互
- en: 'As we''ve seen, inside a describe scope, you can have respective `before`,
    `after`, `beforeEach`, and `afterEach` hooks. If you have a nested `describe`
    scope, that scope can also have hooks. In addition to the hooks on the current
    scope, Mocha will also call the hooks on all the parent scopes. Consider this
    code where we declare a two-level nesting:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，在描述范围内，您可以有相应的`before`、`after`、`beforeEach`和`afterEach`钩子。如果您有一个嵌套的`describe`范围，该范围也可以有钩子。除了当前范围上的钩子之外，Mocha还将调用所有父范围上的钩子。考虑一下这段代码，我们在其中声明了一个两级嵌套：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When running the preceding code, the output is:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码时，输出为：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using assertions
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用断言
- en: Now that you have a place for testing your code, you need some way of verifying
    that your code runs as expected. For this, you need an assertion testing library.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您有一个用于测试代码的地方，您需要一种验证代码是否按预期运行的方法。为此，您需要一个断言测试库。
- en: 'There are many assertion testing libraries for many programming styles, but
    here we''re going to use the one that already comes bundled with Node.js, the
    `assert` module. It contains the smallest set of utility functions you need to
    describe what expectations you have for each test. At the top of each testing
    file, you need the assertion library using `require`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多断言测试库适用于许多编程风格，但在这里，我们将使用Node.js已经捆绑的一个，即`assert`模块。它包含了您需要描述每个测试的期望的最小一组实用函数。在每个测试文件的顶部，您需要使用`require`引入断言库：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can assert the "truthiness" of any expression. "Truthy" and "falsy" are
    concepts in JavaScript (and other languages), where type coercion allows certain
    values to equate to Boolean true or false, respectively. Some examples are as
    follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以断言任何表达式的“真实性”。“真实”和“虚假”是JavaScript（以及其他语言）中的概念，其中类型强制转换允许某些值等同于布尔值true或false。一些例子如下：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The falsy values are:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虚假值为：
- en: '`false`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`false`'
- en: '`null`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`null`'
- en: '`undefined`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`undefined`'
- en: the empty string
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空字符串
- en: '`0` (the number zero)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`（数字零）'
- en: '`NaN`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NaN`'
- en: All other values are truthy.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他值都为真。
- en: 'You can also test for equality using `assert.equal`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`assert.equal`来进行相等的测试：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can also conversely test for inequality using `assert.notEqual`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`assert.notEqual`来进行不相等的测试：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'These last two tests are equivalent to the JavaScript `==` (loose equals) operator,
    which means that they work for Booleans, strings, `undefined`, and `null` but
    fail for objects and arrays. For instance, this assertion will fail:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这最后两个测试等同于JavaScript的`==`（宽松相等）运算符，这意味着它们适用于布尔值、字符串、`undefined`和`null`，但不适用于对象和数组。例如，这个断言将失败：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'It will fail because, in JavaScript, there is no native way to compare the
    equivalence of two objects rendering the following expression false:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 它将失败，因为在JavaScript中，没有本地方法来比较两个对象的等价性，从而使以下表达式为假：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To compare objects (including arrays), you should use `assert.deepEqual`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要比较对象（包括数组），您应该使用`assert.deepEqual`：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This function recurses through both comparing objects to find whether they
    somehow differ. This function also works, as the name implies, for deeply nested
    objects:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数递归地比较对象，找出它们是否有某种不同。这个函数也可以用于深度嵌套的对象，正如其名称所暗示的那样：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can also test for deep inequality:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以测试深层不相等：
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Changing the assertion message
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改断言消息
- en: 'When an assertion fails, an error is thrown containing a message where both
    the expected and the actual values are printed:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当断言失败时，将抛出一个包含消息的错误，其中打印了预期值和实际值：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you wish, you can replace this default message type with another, more contextualized
    one. This is achieved by passing in the message as the last argument for any of
    the assertion functions:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果愿意，可以用另一种更具上下文的消息类型替换默认消息类型。通过将消息作为任何断言函数的最后一个参数传入来实现这一点：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Performing asynchronous tests
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行异步测试
- en: Mocha runs all the tests in series, where each test can be synchronous or asynchronous.
    For a synchronous test, the test callback function should not accept any argument,
    as in the previous examples. But since Node.js doesn't block I/O operations, and
    we need to perform I/O operations for each of our tests (making at least an HTTP
    request to our server), our tests need to be asynchronous.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Mocha按顺序运行所有测试，每个测试可以是同步的或异步的。对于同步测试，测试回调函数不应接受任何参数，就像前面的例子一样。但由于Node.js不会阻塞I/O操作，我们需要对每个测试执行I/O操作（至少向服务器发出一个HTTP请求），因此我们的测试需要是异步的。
- en: 'To make a test asynchronous, the test function should accept a callback function
    such as this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要使测试变成异步，测试函数应该接受一个回调函数，就像这样：
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `done` callback function also accepts an error as the first argument, which
    means that instead of throwing an error, you can just call `done` directly:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`done`回调函数还接受一个错误作为第一个参数，这意味着您可以直接调用`done`，而不是抛出错误：'
- en: '[PRE24]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you don''t need to test the asynchronous function return value, you can
    pass the `done` function directly, like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要测试异步函数的返回值，可以直接传递`done`函数，就像这样：
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**Timeouts**: By default, Mocha reserves 2 seconds for each asynchronous test.
    You can change that globally by passing in the `-t` argument to Mocha:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**超时**：默认情况下，Mocha为每个异步测试保留2秒。您可以通过向Mocha传递`-t`参数来全局更改这个时间：'
- en: '[PRE26]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here, you can use the number of seconds suffixed by `s`, as shown, or you can
    simply pass the number of milliseconds:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以使用以`s`为后缀的秒数，如所示，或者您可以简单地传递毫秒数：
- en: '[PRE27]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can also specify the timeout on any test by using `this.timeout(ms)` like
    this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过使用`this.timeout(ms)`来指定任何测试的超时，就像这样：
- en: '[PRE28]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Mocha is a framework that runs your tests. You should split your tests into
    several files according to the functional areas you want to cover, and then describe
    each feature and define the necessary tests for each feature.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Mocha是一个运行您的测试的框架。您应该根据您想要覆盖的功能区域将测试拆分为几个文件，然后描述每个功能并为每个功能定义必要的测试。
- en: For each of these test groups, you optionally specify callback to be invoked
    using `before`, `beforeEach`, `after`, and `afterEach`. These callbacks are where
    the setup and teardown functions are specified. Each of these teardown or setup
    functions can be either synchronous or asynchronous. Furthermore, each of the
    tests themselves can be made to function asynchronously simply by passing a callback
    to the test, which will be invoked once the test is complete.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些测试组中的每一个，您可以选择指定要使用`before`、`beforeEach`、`after`和`afterEach`来调用的回调函数。这些回调函数是指定设置和拆卸函数的地方。这些拆卸或设置函数中的每一个都可以是同步的或异步的。此外，这些测试本身也可以通过简单地将回调传递给测试来使其异步运行，一旦测试完成，回调就会被调用。
- en: For asynchronous tests, Mocha reserves a default timeout of 2 seconds that you
    can override globally or on a per-test basis.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于异步测试，Mocha保留了默认的2秒超时，您可以在全局范围或每个测试的基础上进行覆盖。
- en: In the following chapter we will see how you can start using Zombie.js to simulate
    and manipulate a browser.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将看到如何开始使用Zombie.js来模拟和操纵浏览器。
