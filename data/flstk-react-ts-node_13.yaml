- en: '*Chapter 10*: Setting Up an Express Project with TypeScript and GraphQL Dependencies'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第10章*：使用TypeScript和GraphQL依赖项设置Express项目'
- en: One of the biggest hurdles for learning modern JavaScript programming is the
    enormous number of packages and dependencies available. It can be overwhelming
    and daunting trying to select the right set of packages for your project. In this
    chapter, we'll learn how to set up a well-configured TypeScript, Express, and
    GraphQL project. We'll see what dependencies are popular and how we can benefit
    by using them for our project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 学习现代JavaScript编程的最大障碍之一是庞大的包和依赖项数量。尝试为项目选择正确的一组包可能会让人不知所措。在本章中，我们将学习如何设置一个配置良好的TypeScript、Express和GraphQL项目。我们将看到哪些依赖项受欢迎，以及我们如何通过使用它们来使我们的项目受益。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Creating a TypeScript-based Express project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个基于TypeScript的Express项目
- en: Adding GraphQL and dependencies to a project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向项目添加GraphQL和依赖项
- en: Reviewing ancillary packages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查辅助包
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You should have a basic understanding of web development using Node, Express,
    and GraphQL. We will once again be using Node and Visual Studio Code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该对使用Node、Express和GraphQL进行Web开发有基本的了解。我们将再次使用Node和Visual Studio Code。
- en: The GitHub repository is available at [https://github.com/PacktPublishing/Full-Stack-React-TypeScript-and-Node](https://github.com/PacktPublishing/Full-Stack-React-TypeScript-and-Node).
    Use the code in the `Chap10` folder.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub存储库可在[https://github.com/PacktPublishing/Full-Stack-React-TypeScript-and-Node](https://github.com/PacktPublishing/Full-Stack-React-TypeScript-and-Node)找到。使用`Chap10`文件夹中的代码。
- en: To set up the `Chap10` code folder, go to your `HandsOnTypescript` folder and
    create a new folder called `Chap10`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置`Chap10`代码文件夹，进入你的`HandsOnTypescript`文件夹并创建一个名为`Chap10`的新文件夹。
- en: Creating a TypeScript-based Express project
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个基于TypeScript的Express项目
- en: In this section, we'll build a starting project that we will use to base our
    server on. We'll manually review and select each dependency and understand what
    role each will play in our application. When we're done, we will have a strong
    base for building out our server app.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个起始项目，我们将以此为基础构建我们的服务器。我们将手动审查和选择每个依赖项，并了解每个依赖项在我们的应用中扮演的角色。完成后，我们将拥有一个构建服务器应用的坚实基础。
- en: There are many pre-made project templates that can be used to build Node projects.
    A common one for TypeScript users is the TypeScript-Node-Starter project from
    Microsoft. It has a good variety of useful dependencies. Unfortunately, it's geared
    toward MongoDB users, but our app will use Postgres.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多预制的项目模板可用于构建Node项目。对于TypeScript用户来说，一个常见的模板是微软的TypeScript-Node-Starter项目。它具有各种有用的依赖项。不幸的是，它面向的是MongoDB用户，但我们的应用将使用Postgres。
- en: Another project template, from the team that makes Express, is `express-generator`.
    It is a CLI that takes parameters and sets up a base project. However, this template
    generator is geared toward servers that do server-side HTML using template engines
    such as `pug` and `ejs`. This would be unnecessary for us since we are creating
    an API for an SPA application. In addition, it has no GraphQL packages to help
    us create our API.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个项目模板，来自制作Express的团队，是`express-generator`。这是一个接受参数并设置基本项目的CLI。然而，这个模板生成器是面向使用模板引擎如`pug`和`ejs`进行服务器端HTML的服务器，对我们来说是不必要的，因为我们正在为SPA应用创建API。此外，它没有GraphQL包来帮助我们创建我们的API。
- en: 'Therefore, in order to eliminate extraneous packages and as a learning exercise,
    let''s build out our project manually. This will allow us to see every piece that
    is needed to build out our app and understand what each one does. Follow the steps
    given here:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了消除多余的包并作为一个学习练习，让我们手动构建我们的项目。这将使我们能够看到构建我们的应用所需的每个部分，并了解每个部分的作用。按照这里给出的步骤：
- en: Create a new folder in the `Chap10` folder and call it `node-server`.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chap10`文件夹中创建一个新文件夹，并将其命名为`node-server`。
- en: 'In your terminal, run the following command:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端中，运行以下命令：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we install TypeScript and initialize it:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们安装TypeScript并初始化它：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Update the `tsconfig.json` file like this:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像这样更新`tsconfig.json`文件：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We''ve already learned about the `tsconfig.json` file in [*Chapter 2*](B15508_02_Final_JC_ePub.xhtml#_idTextAnchor025)*,
    Exploring TypeScript*, but let''s review what we see here:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[*第2章*](B15508_02_Final_JC_ePub.xhtml#_idTextAnchor025)*，探索TypeScript*中学习了`tsconfig.json`文件，但让我们再次审查一下这里看到的内容：
- en: We can target ES6 since we are running on our own server and can control the
    V8 version by using an appropriate version of Node.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以以ES6为目标，因为我们在自己的服务器上运行，并且可以通过使用适当的Node版本来控制V8版本。
- en: We are using `commonjs` as the `module` system to avoid issues with mixing `require`
    and `import` for modules.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`commonjs`作为`module`系统，以避免在模块中混合使用`require`和`import`时出现问题。
- en: We want to use the latest JavaScript versions, so `lib` is set to allow them.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望使用最新的JavaScript版本，所以`lib`被设置为允许它们。
- en: The `outDir` field represents the folder that transpiled `js` files will be
    saved into.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outDir`字段表示编译后的`js`文件将保存在其中的文件夹。'
- en: '`rootDir` represents the code source directory.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rootDir`代表代码源目录。'
- en: We are allowing `emitDecoratorMetadata` and `experimentalDecorator` as `TypeORM`;
    the dependency for the repository layer that accesses our database will need to
    use them.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们允许`emitDecoratorMetadata`和`experimentalDecorator`作为`TypeORM`；访问我们的数据库的存储库层的依赖项将需要使用它们。
- en: The `exclude` and `include` folders, as implied, represent folders we would
    like to either hide or make available to the TypeScript compiler.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exclude`和`include`文件夹，如其含义，表示我们想要隐藏或向TypeScript编译器公开的文件夹。'
- en: 'Now let''s add some of our base dependencies:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们添加一些基本依赖项：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We installed `jest` and its types for testing.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们安装了`jest`及其类型进行测试。
- en: The `ts-jest` package allows us to write our tests in TypeScript.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ts-jest`包允许我们用TypeScript编写测试。'
- en: I am showing `nodemon` for completeness, but we will be running the globally
    installed version that we installed in [*Chapter 8*](B15508_08_Final_JC_ePub.xhtml#_idTextAnchor122)*,
    Learning Server-Side Development with Node and Express*.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我展示了`nodemon`是为了完整性起见，但我们将运行全局安装的版本，这是我们在[*第8章*](B15508_08_Final_JC_ePub.xhtml#_idTextAnchor122)*中安装的，学习使用Node和Express进行服务器端开发*。
- en: '`faker` is a fake data generator for testing and mocking.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`faker`是用于测试和模拟的虚假数据生成器。'
- en: '`ts-node-dev` will help our Node server to restart when any TypeScript code
    is changed.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ts-node-dev`将帮助我们的Node服务器在任何TypeScript代码更改时重新启动。'
- en: 'Now that we have our base dependencies installed, let''s start up our plain
    Express server to make sure everything is working:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了基本的依赖项，让我们启动我们的普通Express服务器，以确保一切正常运行：
- en: 'We''ll need to create a server setup script to initialize our server as we''ve
    done before in [*Chapter 8*](B15508_08_Final_JC_ePub.xhtml#_idTextAnchor122)*,
    Learning Server-Side Development with Node and Express*. Create a folder called
    `src` and then create another file called `index.ts` inside of it. Then, add this
    code:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一个服务器设置脚本来初始化我们的服务器，就像我们在[*第8章*](B15508_08_Final_JC_ePub.xhtml#_idTextAnchor122)*中做过的那样，学习使用Node和Express进行服务器端开发*。创建一个名为`src`的文件夹，然后在其中创建另一个名为`index.ts`的文件。然后，添加这段代码：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Basically, this is what we''ve done before: creating an `express` instance
    and then using it to create our server.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这就是我们以前做的事情：创建一个`express`实例，然后使用它来创建我们的服务器。
- en: 'Now, we''ll need to create a `"start"` script inside of `package.json`. Open
    that file and find the `"scripts"` section. Then, under the existing `"test"`
    entry, add this code:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在`package.json`文件中创建一个`"start"`脚本。打开该文件，找到`"scripts"`部分。然后，在现有的`"test"`条目下，添加以下代码：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The command uses `ts-node-dev` to monitor when TypeScript changes occur and
    then `"respawn"`. This means it will automatically restart Node as needed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令使用`ts-node-dev`来监视TypeScript更改的发生，然后`"respawn"`。这意味着它将根据需要自动重新启动Node。
- en: 'Now if you type this command, your server should run:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你输入这个命令，你的服务器应该运行：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should see something like this once it is running:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦它运行起来，你应该看到类似这样的东西：
- en: '![Figure 10.1 – First server run'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.1 – 第一次运行服务器'
- en: '](img/Figure_10.1_B15508.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.1_B15508.jpg)'
- en: Figure 10.1 – First server run
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 第一次运行服务器
- en: As you can see, our server started with our command and the emitted console
    log message.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们的服务器使用我们的命令启动，并发出控制台日志消息。
- en: 'If you update the `index.ts` file by changing the log message, you''ll see
    that the server is auto-restarted, as this screenshot shows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你通过更改日志消息更新了`index.ts`文件，你会看到服务器自动重新启动，就像这个截图显示的那样：
- en: '![Figure 10.2 – Server restarted'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.2 – 服务器重新启动'
- en: '](img/Figure_10.2_B15508.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.2_B15508.jpg)'
- en: Figure 10.2 – Server restarted
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 服务器重新启动
- en: The server restarts and then our new message, `Our server is running great!`,
    is shown.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器重新启动，然后显示我们的新消息，`我们的服务器运行得很好！`。
- en: In this section, we started learning about important dependencies for our server.
    We will be using all of these packages as well as other packages to build our
    GraphQL API. In the next section, we'll add our GraphQL dependencies.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们开始学习服务器的重要依赖项。我们将使用所有这些软件包以及其他软件包来构建我们的GraphQL API。在下一节中，我们将添加我们的GraphQL依赖项。
- en: Adding GraphQL and dependencies to a project
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向项目添加GraphQL和依赖项
- en: We've already taken a look at GraphQL in [*Chapter 9*](B15508_09_Final_JC_ePub.xhtml#_idTextAnchor139)*,
    What is GraphQL?*. In this chapter, let's review these packages as well as introduce
    some new related packages that we will be using.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[*第9章*](B15508_09_Final_JC_ePub.xhtml#_idTextAnchor139)*中看过了GraphQL。在本章中，让我们回顾这些软件包，并介绍一些我们将使用的新相关软件包。
- en: 'Let''s list some of the GraphQL-related packages we will be using for our app:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列出一些我们将在应用程序中使用的与GraphQL相关的软件包：
- en: '`graphql`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`graphql`'
- en: This package is the reference implementation for JavaScript of GraphQL. It is
    created by the GraphQL foundation and we will be using it to do some of our GraphQL
    query testing.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个软件包是GraphQL的JavaScript参考实现。它是由GraphQL基金会创建的，我们将使用它来进行一些GraphQL查询测试。
- en: '`graphql-middleware`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`graphql-middleware`'
- en: This is a package that allows us to inject our code either before or after a
    resolver runs. Some possible actions include, but are not limited to, authentication
    checks and logging.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个允许我们在解析器运行之前或之后注入我们的代码的软件包。一些可能的操作包括但不限于身份验证检查和日志记录。
- en: '`graphql-tools`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`graphql-tools`'
- en: This package provides some helpers for testing and mocking our GraphQL queries
    when needed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个软件包在需要时为我们的GraphQL查询提供一些测试和模拟的帮助。
- en: '`apollo-server-express`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apollo-server-express`'
- en: This is the main library we will use to create our Express GraphQL server, which
    we already used in [*Chapter 9*](B15508_09_Final_JC_ePub.xhtml#_idTextAnchor139)*,
    What is GraphQL?*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将用来创建Express GraphQL服务器的主要库，我们已经在[*第9章*](B15508_09_Final_JC_ePub.xhtml#_idTextAnchor139)*中使用过了，什么是GraphQL?*。
- en: 'These are the main packages we will use for our GraphQL implementation. Next,
    we will create a GraphQL server and also build some tests for it. In later chapters,
    we''ll merge the various packages we use here into a single project. Let''s look
    at the steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们将用于GraphQL实现的主要软件包。接下来，我们将创建一个GraphQL服务器，并为其构建一些测试。在后面的章节中，我们将把我们在这里使用的各种软件包合并到一个项目中。让我们看看步骤：
- en: 'Create another folder inside our `Chap10` folder called `gql-server`. Then,
    `cd` into it from the terminal and run these commands:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`Chap10`文件夹内创建一个名为`gql-server`的新文件夹。然后，从终端进入其中并运行这些命令：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Accept all defaults and then run this command:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受所有默认值，然后运行此命令：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once that completes, run this:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，运行这个命令：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now initialize TypeScript with this command:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在用这个命令初始化TypeScript：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once this is complete, copy the contents of the `tsconfig.json` file from our
    `node-server` project into the `tsconfig.json` file in this new `gql-server` project
    folder.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，将`node-server`项目中的`tsconfig.json`文件的内容复制到这个新的`gql-server`项目文件夹中的`tsconfig.json`文件中。
- en: Now, in our `package.json` file, add a `start` entry to our `scripts` section
    like this:![Figure 10.3 – The start script
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在我们的`package.json`文件中，像这样在`scripts`部分中添加一个`start`条目：![图10.3 – 启动脚本
- en: '](img/Figure_10.3_B15508.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.3_B15508.jpg)'
- en: Figure 10.3 – The start script
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 - 启动脚本
- en: 'Now let''s create a new `src` folder in the root of our `gql-server` folder.
    Then copy these files from the `Chap9/graphql-schema` project and paste them into
    the `src` folder: `db.ts`, `GqlContext.ts`, `resolvers.ts`, `server.ts`, and `typeDefs.ts`.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们在`gql-server`文件夹的根目录中创建一个新的`src`文件夹。然后将这些文件从`Chap9/graphql-schema`项目复制并粘贴到`src`文件夹中：`db.ts`，`GqlContext.ts`，`resolvers.ts`，`server.ts`和`typeDefs.ts`。
- en: 'Let''s test that our app will run by starting it up with this command:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用以下命令启动应用程序，测试我们的应用程序是否能够运行：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now let''s add some middleware and see how it runs:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加一些中间件并看看它是如何运行的：
- en: 'Create a new file called `Logger.ts` in the `src` folder and add this code
    to it:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中创建一个名为`Logger.ts`的新文件，并将以下代码添加到其中：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In this code, we are intercepting any resolver calls and logging them before
    the `resolver` function runs. Notice that we check that the `parent` object is
    `null`, which indicates that the `resolver` call has not yet run. Let''s also
    add logging to our `getTodos` resolver. Open `resolvers.ts` and add this line
    at the start of the `getTodos` function body, just before the `return` statement:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们拦截任何解析器调用并在`resolver`函数运行之前记录它们。请注意，我们检查`parent`对象是否为`null`，这表示`resolver`调用尚未运行。让我们还将日志记录添加到我们的`getTodos`解析器中。打开`resolvers.ts`并在`getTodos`函数体的开头添加这行代码，就在`return`语句之前：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we need to update our `server.ts` file so that it makes use of this logger.
    Update `server.ts` like this:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要更新我们的`server.ts`文件，以便它使用这个记录器。像这样更新`server.ts`：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here we have imported the `applyMiddleware` function and the `log` middleware
    we created earlier. Note that this `applyMiddleware` function is coming from the
    `graphql-middleware` package and is distinct from the Apollo `applyMiddleware`
    function, which merely associates the Express instance with our Apollo server:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们导入了`applyMiddleware`函数和我们之前创建的`log`中间件。请注意，这个`applyMiddleware`函数来自`graphql-middleware`包，与Apollo的`applyMiddleware`函数不同，后者仅将Express实例与我们的Apollo服务器关联：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here we have taken our schema that was created by `makeExecutableSchema` and
    used the `applyMiddleware` function to create a schema that has a middleware association.
    Then, we apply this schema, `schemaWithMiddleware`, to our Apollo server. The
    rest of the code is unchanged, so I won't include it here.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们取得了由`makeExecutableSchema`创建的模式，并使用`applyMiddleware`函数创建了一个具有中间件关联的模式。然后，我们将这个模式`schemaWithMiddleware`应用到我们的Apollo服务器上。其余的代码没有改变，所以我不会在这里包含它。
- en: 'Start your server if you have not done so already and open your browser to
    the GraphQL server URL. If you run the call to `getTodos`, you will see the `todos`
    data come back as shown:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您尚未启动服务器，请启动服务器并打开浏览器到GraphQL服务器URL。如果您运行调用`getTodos`，您将看到`todos`数据如下返回：
- en: '![Figure 10.4 – Calling getTodos'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.4 - 调用getTodos'
- en: '](img/Figure_10.4_B15508.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.4_B15508.jpg)'
- en: Figure 10.4 – Calling getTodos
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 - 调用getTodos
- en: 'Additionally, you should see in the Visual Studio Code terminal the `console.log`
    messages we set up earlier:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您应该在Visual Studio Code终端中看到我们之前设置的`console.log`消息：
- en: '![Figure 10.5 – The getTodos result'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.5 - getTodos结果'
- en: '](img/Figure_10.5_B15508.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.5_B15508.jpg)'
- en: Figure 10.5 – The getTodos result
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5 - getTodos结果
- en: Our middleware runs and does its log. Then, the actual resolver runs and returns
    the data.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的中间件运行并记录。然后，实际的解析器运行并返回数据。
- en: 'So, we''ve now seen GraphQL middleware that allows us to intercept calls and
    inject our own code into the GraphQL process. Let''s now try to create some tests
    with GraphQL:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们现在已经看到了允许我们拦截调用并将自己的代码注入GraphQL过程的GraphQL中间件。现在让我们尝试使用GraphQL创建一些测试：
- en: 'We need to create a GraphQL query runner for testing purposes. Create a new
    file called `testGraphQLQuery.ts` and add this code to it:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要为测试目的创建一个GraphQL查询运行器。创建一个名为`testGraphQLQuery.ts`的新文件，并将以下代码添加到其中：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We import `graphql` and `GraphQLSchema` so that we can make manual queries and
    type schema files.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入`graphql`和`GraphQLSchema`，以便我们可以进行手动查询和类型模式文件。
- en: 'Import `Maybe` as it is a GraphQL type indicating whether parameters may or
    may not be used:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`Maybe`，因为它是一个指示参数是否可能被使用的GraphQL类型：
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create our `Options` interface, which will later act as the `testGraphQLQuery`
    function''s parameters type to run our query:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建我们的`Options`接口，它将作为`testGraphQLQuery`函数的参数类型来运行我们的查询：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The code `[key: string]` represents object property names – for example, `myObj["some
    name"]`. The `testGraphQLQuery` function is called with the required parameters
    and will return the relevant data:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '代码`[key: string]`表示对象属性名称 - 例如，`myObj["some name"]`。`testGraphQLQuery`函数使用所需的参数调用，并返回相关数据：'
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now let''s write our test. Create a `getUser.test.ts` file and add this code
    to it:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们编写我们的测试。创建一个`getUser.test.ts`文件，并将以下代码添加到其中：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The imports are pretty self-explanatory, but the `faker` import is used to help
    us create fake entries for the field values of our test objects.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这些导入都相当不言自明，但`faker`导入用于帮助我们为测试对象的字段值创建虚假条目。
- en: 'We set up our test using `describe` and then we create our query for `getUser`
    with the fields that we want:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`describe`设置我们的测试，然后我们为`getUser`创建我们的查询，使用我们想要的字段：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now in our test, we first create our `schema` from the merger of `typeDefs`
    and `resolvers` and then we set up our fake data fields for our mocked `User`
    object:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在我们的测试中，我们首先从`typeDefs`和`resolvers`的合并中创建我们的`schema`，然后为我们模拟的`User`对象设置我们的假数据字段：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As shown in [*Chapter 6*](B15508_06_Final_JC_ePub.xhtml#_idTextAnchor091)*,
    Setting Up Our Project Using create-react-app and Testing with Jest*, mocking
    allows us to focus on the unit of code we want to test without having to worry
    about other items.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[*第6章*](B15508_06_Final_JC_ePub.xhtml#_idTextAnchor091)*所示，使用create-react-app设置我们的项目并使用Jest进行测试*，模拟允许我们专注于我们想要测试的代码单元，而不必担心其他项目。
- en: 'Using `addMockFunctionsToSchema`, we add our mocked `User` object to the schema
    so that it will be returned when relevant queries are made:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`addMockFunctionsToSchema`，我们将我们模拟的`User`对象添加到模式中，以便在进行相关查询时返回它：
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, we run the `testGraphQLQuery` function to get back our mocked data:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们运行`testGraphQLQuery`函数来获取我们的模拟数据：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If the returned object has the same fields, it shows that the logic of querying
    the `getUser` query is working, since the call has gone through the entire code
    path to get our `User` object.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果返回的对象具有相同的字段，那么它表明查询`getUser`查询的逻辑是有效的，因为调用已经通过整个代码路径获取了我们的`User`对象。
- en: 'Before we run our test, we need to add a configuration to the `package.json`
    file for `jest`. Add this to the end of the configuration:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行测试之前，我们需要为`jest`在`package.json`文件中添加一个配置。将这个配置添加到配置的末尾：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This configuration makes certain that all files with `spec` or `test` in the
    name are tested (this is the `testRegex` section), and that any TypeScript files
    are first transpiled to JavaScript before running (this is the `transform` section).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配置确保所有带有`spec`或`test`名称的文件都经过测试（这是`testRegex`部分），并且在运行之前将任何TypeScript文件转换为JavaScript（这是`transform`部分）。
- en: 'If you run the `jest` command on your terminal, you should see this result;
    make sure you are on the `gql-server` path:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在终端上运行`jest`命令，您应该会看到这个结果；确保您在`gql-server`路径上：
- en: '![Figure 10.6 – The GraphQL query test result'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.6 – GraphQL查询测试结果'
- en: '](img/Figure_10.6_B15508.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.6_B15508.jpg)'
- en: Figure 10.6 – The GraphQL query test result
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6 – GraphQL查询测试结果
- en: As you can see, the test passes. I've added several `log` statements in order
    to show that the fields of the mocked `User` are the same. You should avoid this
    in your tests as it is difficult to read.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，测试通过了。我添加了几个`log`语句，以显示模拟的`User`字段是相同的。您应该避免在测试中这样做，因为这样很难阅读。
- en: Note
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'In your `package.json` file''s scripts section, you can replace the "test"
    entry with "test" : "jest". This way, it will be more consistent with other NPM
    scripts. As with any NPM script, you would run it with the `npm run test` command.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '在您的`package.json`文件的脚本部分，您可以用"test" : "jest"替换"test"条目。这样，它将更符合其他NPM脚本。与任何NPM脚本一样，您可以使用`npm
    run test`命令来运行它。'
- en: In this section, we learned about some of the NPM packages available for GraphQL.
    These packages can help us build and test our servers, making them more reliable.
    In the next section, we'll look at some other packages that will help us build
    our servers.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了一些可用于GraphQL的NPM包。这些包可以帮助我们构建和测试我们的服务器，使它们更加可靠。在下一节中，我们将看一些其他可以帮助我们构建服务器的包。
- en: Reviewing ancillary packages
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查辅助包
- en: In this section, we'll review some of the ancillary dependencies of our project.
    Our server, at its heart, is Node, Express, and GraphQL, of course. But there
    are also many other activities our server will need to perform in order to be
    complete and fully functional.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将审查项目的一些辅助依赖项。我们的服务器，本质上是Node、Express和GraphQL。但是，我们的服务器还需要执行许多其他活动，才能完整和完全功能。
- en: 'Let''s list some packages we will be using throughout our application that
    should allow us to write less code and focus more on our core business logic:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列出一些我们将在整个应用程序中使用的包，这些包应该可以让我们编写更少的代码，更多地专注于我们的核心业务逻辑：
- en: '`bcryptjs`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bcryptjs`'
- en: Every server will have some need to encrypt data for security purposes. An obvious
    example would be our users' passwords. Bcrypt is an industry-standard encryption
    algorithm that exists on numerous platforms, including C++ and Java. `bcryptjs`
    is a JavaScript implementation of the algorithm and will help us secure our application.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 每个服务器都需要加密数据以确保安全。一个明显的例子是我们用户的密码。Bcrypt是一种行业标准的加密算法，存在于许多平台上，包括C++和Java。`bcryptjs`是该算法的JavaScript实现，将帮助我们保护我们的应用程序。
- en: '`cors`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cors`'
- en: The web is full of security hazards and hackers attempting to break servers.
    Because of this, the standard behavior of any web server is to only allow client
    requests coming from the same domain as the server. For complex server setups,
    such as microservices and proxies, this would not be feasible. So, `cors` package
    provides tools for executing CORS on our server.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 网络充满了安全隐患和黑客试图破坏服务器。因此，任何Web服务器的标准行为都是只允许来自与服务器相同域的客户端请求。对于复杂的服务器设置，如微服务和代理，这是不可行的。因此，`cors`包提供了在我们的服务器上执行CORS的工具。
- en: '`date-fns`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date-fns`'
- en: The JavaScript Date object is notoriously cumbersome to deal with directly and
    `date-fns` provides lots of useful methods for parsing, formatting, and displaying
    dates and times.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript Date对象处理起来非常麻烦，`date-fns`提供了许多有用的方法来解析、格式化和显示日期和时间。
- en: '`dotenv`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotenv`'
- en: Every large application needs to store configuration information in a central
    place, both to manage and secure sensitive data and settings. Using `dotenv` will
    allow us to maintain our sensitive information settings without revealing it to
    end users.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 每个大型应用程序都需要将配置信息存储在一个中心位置，以管理和保护敏感数据和设置。使用`dotenv`将允许我们维护我们的敏感信息设置，而不会向最终用户透露它。
- en: '`nodemailer`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nodemailer`'
- en: '`nodemailer` allows us to send emails from within our Node server. We can send
    emails, for example, to allow users to reset their password or notify them of
    activity on the site.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`nodemailer`允许我们从Node服务器内部发送电子邮件。例如，我们可以发送电子邮件，允许用户重置密码或通知他们网站上的活动。'
- en: '`request`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`request`'
- en: This package will allow us to make HTTP requests from within our Node server.
    This can be useful, for example, when we need to grab data from another API, whether
    it be third-party or internal.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包将允许我们从Node服务器内部发出HTTP请求。例如，当我们需要从另一个API获取数据时，无论是第三方还是内部，这都可能很有用。
- en: '`querystring`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`querystring`'
- en: '`querystring` will allow us to easily create URL querystring parameters from
    objects and parse the body of POST requests into fields. This package can be used
    together with the `request` package.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`querystring`将允许我们轻松地从对象创建URL查询字符串参数，并将POST请求的主体解析为字段。这个包可以与`request`包一起使用。'
- en: '`randomstring`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`randomstring`'
- en: '`randomstring` can be used to generate random temporary passwords.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`randomstring`可用于生成随机临时密码。'
- en: There are many more packages we will be using as we build out our application
    – for example, packages that allow us to connect to our Postgres database and
    to our Redis storage. However, I will introduce those packages in the relevant
    sections as it will be clearer what those packages do at that time.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建我们的应用程序时，我们将使用更多的软件包 - 例如，允许我们连接到我们的Postgres数据库和Redis存储的软件包。然而，我将在相关部分介绍这些软件包，因为那时会更清楚这些软件包的作用。
- en: In this section, we learned about some of the miscellaneous packages we will
    be using in our project. Although these tools are not the main focus of our application,
    they are nonetheless extremely valuable. If we were to write these dependencies
    ourselves, we would have to become experts in various fields such as encryption
    and date time management, which would be a huge waste of time for us since it
    is not central to our goals.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了一些我们项目中将要使用的杂项软件包。尽管这些工具不是我们应用程序的主要焦点，但它们仍然非常有价值。如果我们要自己编写这些依赖关系，我们将不得不成为各种领域的专家，比如加密和日期时间管理，这对我们来说将是一个巨大的时间浪费，因为这不是我们目标的核心。
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about additional NPM package dependencies that we
    will use to build out our application. These tools are well used by the community
    and therefore well tested and reliable. Using packages from the Node ecosystem
    is one of the most valuable benefits of Node. It saves us from having to write,
    test, and maintain this extra code ourselves.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了我们将用来构建应用程序的其他NPM软件包依赖关系。这些工具在社区中被广泛使用，因此经过了充分的测试和可靠。使用Node生态系统中的软件包是Node最有价值的好处之一。它使我们不必自己编写、测试和维护这些额外的代码。
- en: In the next chapter, we will review what we will be building in detail. We'll
    see what the various components of our application will be, and we'll start coding
    the React side of our application.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将详细审查我们将要构建的内容。我们将看到我们应用程序的各个组件是什么，然后我们将开始编写我们应用程序的React部分。
