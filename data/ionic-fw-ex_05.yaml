- en: Chapter 5. The London Tourist App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 伦敦旅游应用
- en: In the previous chapter, we created an application called the Bucket-List application
    that enabled us to create a list of interesting things we wanted to do in our
    lifetime. In this chapter, we will create a new application called "The London
    Tourist" application. It is an application that will display a list of top tourist
    attractions in the city of London in England. We will build this application with
    a new type of Ionic template called the side menu template. We will also be using
    the Angular `$http` service to query our data via Ajax.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们创建了一个名为“Bucket-List”的应用，它使我们能够创建一个我们一生中想要做的事情的列表。在本章中，我们将创建一个新的应用，称为“伦敦旅游”应用。这是一个将显示英国伦敦市顶级旅游景点的应用。我们将使用一种名为侧边菜单模板的新类型的Ionic模板来构建这个应用。我们还将使用Angular的`$http`服务通过Ajax查询我们的数据。
- en: Introduction to the London Tourist App
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 伦敦旅游应用的简介
- en: London is the largest city in England and it is a city that is well known to
    attract tourists around the world. The city is very urban but it has many historical
    and non-historical tourist attractions. With this large number of attractions,
    it can be difficult to pick out the best places to go. This is the entire idea
    behind the London Tourist App as it will provide users with five handpicked destinations
    that tourists visiting London can actually visit. These destinations will be stored
    in a JSON file in our project that we will be querying via AJAX and populating.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 伦敦是英格兰最大的城市，它是一个广为人知、吸引世界各地游客的城市。这个城市非常现代化，但它有许多历史和非历史性的旅游景点。由于这些景点数量众多，挑选出最佳游览地点可能会有些困难。这正是伦敦旅游应用背后的整个理念，因为它将为用户提供五个精选的目的地，游客在访问伦敦时可以实际参观。这些目的地将存储在我们项目中的一个JSON文件中，我们将通过AJAX查询并填充。
- en: Creating the London Tourist app
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建伦敦旅游应用
- en: To begin the process of creating our app, we are going to start by creating
    a brand new Ionic application. So far in this book, we have learned to create
    a new Ionic application using the blank template. For the application we are about
    to build, we are going to use a new type of Ionic template to create the application.
    We are going to be using the side menu template to create our London Tourist app.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始创建我们的应用的过程，我们将首先创建一个全新的Ionic应用。到目前为止，在这本书中，我们已经学会了使用空白模板创建新的Ionic应用。对于我们将要构建的应用，我们将使用一种新的Ionic模板来创建应用。我们将使用侧边菜单模板来创建我们的伦敦旅游应用。
- en: The side menu app design
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 侧边菜单应用设计
- en: 'You might not be familiar with what the side menu template looks like. In fact,
    the side menu design for mobile applications is very common in mobile app development.
    It involves having the ability to slide from the left or right edges of a mobile
    application to reveal more options, normally more menu options:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能不熟悉侧边菜单模板的样子。实际上，移动应用中的侧边菜单设计在移动应用开发中非常常见。它涉及到能够从移动应用的左侧或右侧边缘滑动以显示更多选项，通常是更多的菜单选项：
- en: '![The side menu app design](img/00024.jpeg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![侧边菜单应用设计](img/00024.jpeg)'
- en: The side menu design technique is one that is used in a lot of contexts, both
    on mobile and on the web. Normally, you will see an icon positioned either on
    the far upper-right or upper-left, indicating that you can swipe or click that
    icon to reveal the extra menu options. This icon is normally referred to as the
    hamburger menu icon.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 侧边菜单设计技术是在许多环境中使用的，无论是在移动端还是网页上。通常，你会看到一个图标位于右上角或左上角，表明你可以滑动或点击该图标以显示额外的菜单选项。这个图标通常被称为汉堡菜单图标。
- en: The Ionic framework actually comes built-in with a side menu template that automatically
    creates a side menu application for us with some useful boilerplate code. We will
    be using this template to create our London Tourist Application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，Ionic框架内置了一个侧边菜单模板，它会自动为我们创建一个带有一些有用样板代码的侧边菜单应用。我们将使用这个模板来创建我们的伦敦旅游应用。
- en: Using the Ionic side menu template
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Ionic侧边菜单模板
- en: 'To begin developing our London Tourist Application, we will begin by using
    the Ionic CLI to create the app. You can do this by running the following command
    from a terminal window:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始开发我们的伦敦旅游应用，我们将首先使用Ionic CLI创建应用。你可以通过在终端窗口中运行以下命令来完成此操作：
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will shorten the name of our app from London Tourist App to LTA to make it
    easier to type.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把我们的应用名称从伦敦旅游应用缩短为LTA，以便更容易输入。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command will create a new Ionic application called LTA using the default
    Ionic side menu template.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将创建一个名为LTA的新Ionic应用，并使用默认的Ionic侧边菜单模板。
- en: Seeing the LTA side menu app in action
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看LTA侧边菜单应用的实际运行情况
- en: 'As soon as your LTA app is created, you can simply change your directory into
    the app from the terminal and run it on your computer using the `ionic serve`
    technique. You can do this by running the following commands:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的 LTA 应用创建完成，你只需在终端中将目录切换到 app，然后使用 `ionic serve` 技巧在你的电脑上运行它。你可以通过运行以下命令来完成：
- en: 'Change directory to app:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切换到 app 目录：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run using the `ionic serve` technique:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `ionic serve` 技巧运行：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Remember to use Chrome and emulate to a device of your choice with the Chrome
    emulation tools as taught in previous chapters.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住使用 Chrome 并使用之前章节中教授的 Chrome 模拟工具来模拟你选择的设备。
- en: 'You should see a screen that looks something like the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到一个类似于以下截图的屏幕：
- en: '![Seeing the LTA side menu app in action](img/00025.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Seeing the LTA side menu app in action](img/00025.jpeg)'
- en: As you can see from the preceding screenshot, the side menu app we have just
    created contains some pre-rendered content.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，我们刚刚创建的侧边菜单应用包含一些预渲染的内容。
- en: Exploring the LTA side menu app's code
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索 LTA 侧边菜单应用的代码
- en: 'Now, we are going to have a look at the code of the LTA app based on the side
    menu template:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将查看基于侧边菜单模板的 LTA 应用的代码：
- en: '![Exploring the LTA side menu app''s code](img/00026.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![Exploring the LTA side menu app''s code](img/00026.jpeg)'
- en: Now, I will require you to fire up the LTA project you have just created in
    your favorite IDE. The first thing you will notice is the folder structure that
    you are already used to from previous chapters.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我需要你启动你在最喜欢的 IDE 中创建的 LTA 项目。你首先会注意到的是你已经从之前的章节中熟悉的文件夹结构。
- en: The index.html file
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: index.html 文件
- en: 'Now, focus on the `www` folder and open the `index.html` file. A look through
    this file should show you something similar to what we have in the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，关注 `www` 文件夹并打开 `index.html` 文件。查看这个文件应该会显示类似于以下截图的内容：
- en: '![The index.html file](img/00027.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![The index.html file](img/00027.jpeg)'
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: To get to this file from the root folder, navigate to `www/index.html`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要从根目录导航到这个文件，请导航到 `www/index.html`。
- en: A look at this file will show you some things we have seen from previous projects
    in this book. For example, you can see some CSS and JS references to the Ionic
    `styles` and `script` files respectively. You will also see from the `body` tag
    that a generated Angular module called `starter` is being instantiated using the
    `ng-app` attribute.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 查看这个文件将展示一些我们在本书之前的项目中看到的内容。例如，你可以看到一些指向 Ionic `styles` 和 `script` 文件的 CSS 和
    JS 引用。你还会从 `body` 标签中看到，一个名为 `starter` 的 Angular 模块正在使用 `ng-app` 属性被实例化。
- en: Pay close attention to the `<ion-nav-view>` tags within the `<body>` tags. This
    is an Ionic element that is used to specify the view to which the entire app is
    injected into. It is similar to the `ng-view` feature of Angular but has more
    powerful features. It also automatically handles navigation for us within our
    Ionic app. You need not pay a great deal of attention to this part of the code
    anymore but just have it at the back of your mind that `<ion-nav-view>` is where
    all content gets injected in, and acts like a wrapper for our app's content.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细关注 `<body>` 标签内的 `<ion-nav-view>` 标签。这是一个用于指定整个应用注入到的视图的 Ionic 元素。它类似于 Angular
    的 `ng-view` 功能，但具有更强大的功能。它还自动为我们处理 Ionic 应用内的导航。你不需要再过多关注这部分代码，只需记住 `<ion-nav-view>`
    是所有内容注入的地方，并且像是一个包装器，用于我们应用的内容。
- en: The menu.html file
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: menu.html 文件
- en: 'The next file we are going to explore is the `menu.html` file. This file is
    probably the most important file at this moment as it contains most of the generated
    code for the side menu parts of our app. To have a look at this file, navigate
    to the `menu.html` file which can be found by navigating into the folder called
    `templates` under the `www` folder. Here is the path: `www/templates/menu.html`.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要探索的下一个文件是 `menu.html` 文件。这个文件可能是目前最重要的文件，因为它包含了我们应用侧边菜单部分的大部分生成代码。要查看这个文件，导航到
    `www` 文件夹下的 `templates` 文件夹中的 `menu.html` 文件。路径如下：`www/templates/menu.html`。
- en: 'If you have successfully done this, you should see a file that closely resembles
    what we have in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经成功完成，你应该会看到一个与以下截图非常相似的文件：
- en: '![The menu.html file](img/00028.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![The menu.html file](img/00028.jpeg)'
- en: The <ion-side-menus>element
  id: totrans-43
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <ion-side-menus> 元素
- en: The first thing you should pay attention to is the `<ion-side-menus>` element.
    Think of this element as a container for any side menu application. It allows
    us to specify what the main content area will be via the `<ion-side-menu-content>`
    element and also allows us to specify the side menus via the `<ion-side-menu>`
    elements. There can be more than one side menu specified within the `<ion-side-menus>`
    elements and we have the ability to specify whether the menu is placed on the
    left, right, or even both. There are a lot of cool and powerful controls that
    the `<ion-side-menus>` elements let us utilize to control its containing items.
    For now, we will focus on trying to learn more about the child elements that are
    needed to work with the `<ion-side-menus>` elements. These are the `<ion-side-menu-content>`and`<ion-side-menu>`
    elements.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先应该注意到的就是 `<ion-side-menus>` 元素。把这个元素想象成一个任何侧边菜单应用的容器。它允许我们通过 `<ion-side-menu-content>`
    元素指定主内容区域，也允许我们通过 `<ion-side-menu>` 元素指定侧菜单。在 `<ion-side-menus>` 元素内可以指定多个侧菜单，并且我们有能力指定菜单是放置在左侧、右侧，甚至是两侧。有很多酷炫且强大的控制功能，是
    `<ion-side-menus>` 元素让我们能够利用来控制其包含的项目。现在，我们将专注于尝试了解更多关于与 `<ion-side-menus>` 元素一起工作的子元素。这些是
    `<ion-side-menu-content>` 和 `<ion-side-menu>` 元素。
- en: The <ion-side-menu-content>element
  id: totrans-45
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '`<ion-side-menu-content>` 元素'
- en: 'This element is what houses the main content area or the visible part of the
    app:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个元素是存放主内容区域或应用可见部分的地方：
- en: '![The <ion-side-menu-content>element](img/00029.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![《<ion-side-menu-content>元素》](img/00029.jpeg)'
- en: 'In the preceding screenshot, which is a view of our LTA app, the part you see
    is a representative of`<ion-side-menu-content>`. Let''s have a closer look at
    the code of `< ion-side-menu-content>` to see how it actually works in detail:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张截图，即我们 LTA 应用视图的截图中，你所看到的部分是 `<ion-side-menu-content>` 的代表。让我们更仔细地查看 `<ion-side-menu-content>`
    的代码，以了解它实际上是怎样详细工作的：
- en: '![The <ion-side-menu-content>element](img/00030.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![《<ion-side-menu-content>元素》](img/00030.jpeg)'
- en: Within `<ion-side-menu-content>`, you can see two direct child elements.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<ion-side-menu-content>` 内，你可以看到两个直接子元素。
- en: Firstly, you can see the `<ion-nav-bar>` element which is used to build the
    navigation buttons of the main content area with the`<ion-nav-buttons>` element
    as its child element. For example, within these`<ion-nav-buttons>` elements, you
    can see a navigation button on line 8-9, which has a `menu-toggle` attribute of
    value `left`. This is simply saying that when this button is tapped, the left-sided
    side menu should be triggered. Remember that there can be up to two side menus
    with one being on the left and one being on the right in a side menu app.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可以看到 `<ion-nav-bar>` 元素，它用于构建主内容区域的导航按钮，其子元素为 `<ion-nav-buttons>`。例如，在这些
    `<ion-nav-buttons>` 元素中，你可以看到第 8-9 行上的一个导航按钮，其 `menu-toggle` 属性值为 `left`。这简单地说，当这个按钮被点击时，左侧菜单应该被触发。记住，在一个侧边菜单应用中，最多可以有两侧菜单，一侧在左侧，一侧在右侧。
- en: The second direct child element is the`<ion-nav-view>` element on line 12 from
    the preceding screenshot. We talked about this same element earlier when we had
    a look at the `index.html` file. This element is a placeholder for where the actual
    content is injected. This particular `<ion-nav-view>` element has a `name` attribute
    with the value of `menuContent`. This attribute is important as it is used like
    a value to uniquely identify`<ion-nav-view>`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个直接子元素是上一张截图中的第 12 行的 `<ion-nav-view>` 元素。我们之前在查看 `index.html` 文件时讨论过这个相同的元素。这个元素是实际内容注入的占位符。这个特定的
    `<ion-nav-view>` 元素有一个 `name` 属性，其值为 `menuContent`。这个属性很重要，因为它被用作值来唯一标识 `<ion-nav-view>`。
- en: With all that said, we have now lightly touched on the `<ion-side-menu-content>`
    element and its main functions. Always think of this element as the element that
    houses the main content area of your side menu application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这里，我们已经简要地触及了 `<ion-side-menu-content>` 元素及其主要功能。始终将这个元素视为存放侧边菜单应用主内容区域的元素。
- en: The <ion-side-menu>element
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '`<ion-side-menu>` 元素'
- en: The `<ion-side-menu>` element is an element that we use to specify the side
    menu of our app. Just like the `<ion-side-menu-content>` element, it lives as
    a direct child of the `<ion-side-menus>` element. There can be up to two`<ion-side-menu>`
    elements within the`<ion-side-menus>` element, with only one being on each side.
    Let's have a closer look at the code of`<ion-side-menu>` of our LTA application.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`<ion-side-menu>` 元素是我们用来指定应用程序侧菜单的元素。就像 `<ion-side-menu-content>` 元素一样，它作为
    `<ion-side-menus>` 元素的直接子元素存在。在 `<ion-side-menus>` 元素内部最多可以有两个 `<ion-side-menu>`
    元素，每个侧边只能有一个。让我们更仔细地看看我们 LTA 应用程序中 `<ion-side-menu>` 的代码。'
- en: '![The <ion-side-menu>element](img/00031.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![《ion-side-menu》元素](img/00031.jpeg)'
- en: 'The preceding screenshot is from our `menu.html` file, and it showcases the
    code of `<ionic-side-menu>` from our LTA application. If you look at it closely,
    you will notice that opening tag of our `<ion-side-menu>` element has a `side`
    attribute with value `left`. This is basically saying that we want this particular
    side menu to be on the left-hand side. Remember that we can have up to two side
    menus in our app, and one can be positioned on the left and another on the right,
    but two side menus cannot be positioned on the same side. We can also see that
    this `<ion-side-menu>` has two direct child elements. These child elements are
    `<ion-header-bar>` and `<ion-content>`. `<ion-header-bar>` is an element used
    to construct the header of a side menu. If you have a look at the following screenshot
    of our side menu, you should see a representation of it:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图来自我们的 `menu.html` 文件，展示了 LTA 应用程序中 `<ionic-side-menu>` 的代码。如果你仔细看，你会注意到我们的
    `<ion-side-menu>` 元素的打开标签有一个值为 `left` 的 `side` 属性。这基本上意味着我们想要这个特定的侧菜单位于左侧。记住，我们可以在应用程序中最多有两个侧菜单，一个可以放在左侧，另一个可以放在右侧，但两个侧菜单不能放在同一侧。我们还可以看到这个
    `<ion-side-menu>` 有两个直接子元素。这些子元素是 `<ion-header-bar>` 和 `<ion-content>`。`<ion-header-bar>`
    是一个用于构建侧菜单头部的元素。如果你看看我们侧菜单的下一张截图，你应该能看到它的表示：
- en: '![The <ion-side-menu>element](img/00032.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![《ion-side-menu》元素](img/00032.jpeg)'
- en: From the preceding screenshot, you can see the header with the title `LEFT`
    as reflected in the code as an`<h1>` element.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从上一张截图，你可以看到标题为 `LEFT` 的头部，正如代码中的 `<h1>` 元素所反映的那样。
- en: The second child element we can see from the code is the `<ion-content>`element.
    Think of this element as what houses the content area below the header of the
    side menu. Basically, this is anything below the header. `<ion-content>` could
    contain any HTML code we want but in this case, it contains`<ion-list>` which
    is something that we used to build our Bucket-List application from [Chapter 4](part0024_split_000.html#MSDG2-798adc86542b445d8a1bb648e10b6714
    "Chapter 4. Ionic Components"), *Ionic Components*. You can also see a reflection
    of this code on the screenshot from when we ran our application.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从代码中我们可以看到的第二个子元素是 `<ion-content>` 元素。把这个元素想象成位于侧菜单头部下方的内容区域。基本上，这包括头部以下的所有内容。`<ion-content>`
    可以包含我们想要的任何 HTML 代码，但在这个例子中，它包含 `<ion-list>`，这是我们用来从 [第 4 章](part0024_split_000.html#MSDG2-798adc86542b445d8a1bb648e10b6714
    "第 4 章。Ionic 组件") “Ionic 组件”构建 Bucket-List 应用程序的部分。你还可以在运行我们的应用程序时的截图上看到这段代码的反映。
- en: With that said, you can see that we have successfully had a brief look at what
    the`<ion-side-menu>` element entails and how the side menu template of Ionic functions.
    The next step is for us to actually go ahead and build our LTA application in
    full scale now.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，你可以看到我们已经简要地了解了 `<ion-side-menu>` 元素包含的内容以及 Ionic 侧菜单模板是如何工作的。下一步，我们将真正着手构建我们的
    LTA 应用程序。
- en: Developing the LTA application
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发 LTA 应用程序
- en: We are now equipped with the know-how on how to code our LTA side menu based
    application. Remember that the idea behind our application is to have some of
    our favorite tourist destinations listed in our app. In a normal scenario, we
    would query this data from a real API. But for the sake of simplicity, we will
    mimic this API request by making a request to a local JSON file that would act
    like a real database with the information we need.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了如何编写我们的 LTA 侧菜单应用程序的代码。记住，我们应用程序的目的是在我们的应用程序中列出一些我们最喜欢的旅游目的地。在正常情况下，我们会从真实的
    API 中查询这些数据。但为了简化，我们将通过向一个充当真实数据库的本地 JSON 文件发送请求来模拟这个 API 请求，这个数据库包含我们所需的信息。
- en: The local JSON database
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 本地 JSON 数据库
- en: As discussed earlier, we are going to create a JSON file that will act like
    a real-life API containing our destinations. This local file will contain five
    top tourist destinations in London. The first thing we will need to do is to create
    this file.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将创建一个JSON文件，它将像现实生活中的API一样包含我们的目的地。这个本地文件将包含伦敦的五个顶级旅游目的地。我们首先需要做的是创建这个文件。
- en: Creating the local JSON database file
  id: totrans-66
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 创建本地JSON数据库文件
- en: 'If you do not have your LTA application open, make sure you open it in your
    favorite IDE. Now, go ahead and create a new JSON file called `sites.json` within
    the `www` folder of your project. Make sure you name the file as the `.json` extension
    in order for it to be parsed as a JSON file. Your directory structure should look
    similar to what is shown in the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有打开你的LTA应用程序，请确保你在你喜欢的IDE中打开它。现在，前往你的项目`www`文件夹中创建一个名为`sites.json`的新JSON文件。确保文件以`.json`扩展名命名，以便它被解析为JSON文件。你的目录结构应该类似于以下截图所示：
- en: '![Creating the local JSON database file](img/00033.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![创建本地JSON数据库文件](img/00033.jpeg)'
- en: With that done, you have successfully created your local JSON file representing
    your database for your tourist sites.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，你已经成功创建了一个代表你的旅游地点数据库的本地JSON文件。
- en: Populating the JSON file
  id: totrans-70
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 填充JSON文件
- en: 'Now we are going to populate the JSON file with some data. This data will be
    the data of five top tourist attractions in the city of London. The following
    is a JSON array that represents the content of our local JSON database. You should
    copy all the content of the following piece of code into your `sites.json` file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将用一些数据填充JSON文件。这些数据将是伦敦城市中五个顶级旅游景点的数据。以下是一个表示我们本地JSON数据库内容的JSON数组。你应该将以下代码块的全部内容复制到你的`sites.json`文件中：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding piece of code is a JSON array that represents four top destinations
    in London as JSON objects. Each object representing a site has three properties.
    These properties are:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码是一个JSON数组，它表示伦敦的四个顶级目的地作为JSON对象。每个代表一个地点的对象有三个属性。这些属性包括：
- en: '**ID**: A unique identifier for the site.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ID**：该地点的唯一标识符。'
- en: '**Name**: The name of the Tourist site.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：旅游景点的名称。'
- en: '**Description**: Some small information about the site.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：关于该地点的一些小信息。'
- en: By now, we have successfully completed the creation of our JSON local database.
    The next step is to see how we can actually render these items and query the database.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经成功完成了我们JSON本地数据库的创建。下一步是看看我们如何实际渲染这些项并查询数据库。
- en: Designing the view
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设计视图
- en: We have created our app and we have the data for the application. Before we
    query data, we first need to design how the data will look when rendered. For
    this very task, we will call on an old friend of ours in the face of`<ion-list>`.
    We will use`<ion-list>` to render a list of tourist attractions from our JSON
    database.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了我们的应用程序，并且我们有应用程序的数据。在我们查询数据之前，我们首先需要设计数据在渲染时的外观。为此，我们将求助于我们的老朋友`<ion-list>`。我们将使用`<ion-list>`来渲染来自我们的JSON数据库的旅游景点的列表。
- en: 'Currently if we run our application, the first page we see is the playlist
    application, as shown in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 目前如果我们运行我们的应用程序，我们看到的第一个页面是播放列表应用程序，如以下截图所示：
- en: '![Designing the view](img/00034.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![设计视图](img/00034.jpeg)'
- en: 'This is because by default the page is specified in the `app.js` file by Angular
    as the root page of our app. We will keep things simple and change the contents
    of this playlist page and design the view of our LTA application on it. From your
    LTA project folder, navigate into the `www` folder and look into the `templates`
    folder. Within the `templates` folder, there is a `playlists.html` file. This
    is the file that contains the code for our playlist page shown in the preceding
    screenshot. Open this file and you should see some code that closely resembles
    what we have in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为默认情况下，页面是通过Angular在`app.js`文件中指定的，作为我们应用的根页面。我们将保持简单，并更改这个播放列表页面的内容，并在其上设计我们的LTA应用程序的视图。从你的LTA项目文件夹中，导航到`www`文件夹，然后查看`templates`文件夹。在`templates`文件夹中，有一个`playlists.html`文件。这是包含前面截图所示播放列表页面代码的文件。打开这个文件，你应该会看到一些代码，与以下截图中的代码非常相似：
- en: '![Designing the view](img/00035.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![设计视图](img/00035.jpeg)'
- en: Tip
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `playlists.html` file from the root folder of your LTA project will have
    a path `www/templates/playlists.html`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你LTA项目根目录下的`playlists.html`文件将有一个路径`www/templates/playlists.html`。
- en: The first thing we will want to do here is to change the name of the title of
    our view. Currently, the view as seen from the screenshots previously, has a title
    `Playlists`. This is specified by the `view-title` attribute of the opening`<ion-view>`
    element. This `view-title` attribute currently has a value `Playlists`. Change
    this to `London Sites`. This is to ensure that the title reflects the mission
    of our app, which is to show the top London tourist sites.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里首先想要做的是更改视图标题的名称。目前，从之前的截图看到的视图标题是`Playlists`。这是由`<ion-view>`元素的`view-title`属性指定的。这个`view-title`属性当前具有值`Playlists`。将其更改为`London
    Sites`。这是为了确保标题反映了我们应用的使命，即展示伦敦顶级旅游景点。
- en: 'The second thing we need to do is to edit the code for`<ion-list>`. Replace
    the `<ion-list>` code with the one provided in the following code block:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第二件事是编辑`<ion-list>`的代码。将`<ion-list>`代码替换为以下代码块中提供的代码：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you have done this correctly, your code should now closely resemble what
    we have in the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经正确完成，你的代码现在应该非常接近以下截图中的内容：
- en: '![Designing the view](img/00036.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![设计视图](img/00036.jpeg)'
- en: With this done, we have now completed the process of designing our UI. The next
    step is to go ahead and wire up our data to our view.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，我们现在已经完成了设计UI的过程。下一步是将我们的数据连接到我们的视图中。
- en: Wiring up the data
  id: totrans-92
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 连接数据
- en: Earlier, we created a `sites.json` file that represented our database. We will
    be making a real Ajax call to this file in order to retrieve its data and serve
    it within our app. The thing we need to do to achieve this is firstly to write
    the code to retrieve the data.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们创建了一个`sites.json`文件，它代表了我们的数据库。我们将对这个文件进行实际的Ajax调用以检索其数据并在我们的应用中提供。为了实现这一点，我们首先需要编写检索数据的代码。
- en: Retrieving the data with the $http service
  id: totrans-94
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用 $http 服务检索数据
- en: To retrieve the data, we will need to make an Ajax call to the `sites.json`
    file. For this, Angular has a great service called the `$http` service. This is
    a service that provides us with functionality to make Ajax calls to local and
    remote resources via Ajax. To begin using the `$http` service to write our code,
    we first need to go to the controller associated with our view. By default, when
    you create an Ionic app based on the side menu template, there is a controller
    attached to the views. To find out which controller is attached to our `playlist.html`
    file, we need to look at the `app.js` file of our app to discover this.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索数据，我们需要向`sites.json`文件发起一个Ajax调用。为此，Angular提供了一个名为`$http`的出色服务。这是一个提供通过Ajax向本地和远程资源发起调用功能的服务。要开始使用`$http`服务编写代码，我们首先需要访问与我们的视图关联的控制器。默认情况下，当你基于侧边菜单模板创建一个Ionic应用时，视图会有一个控制器与之关联。为了找出哪个控制器与我们的`playlist.html`文件关联，我们需要查看我们的应用中的`app.js`文件以发现这一点。
- en: 'You can find the `app.js` file by navigating to the `www` folder of your project
    and looking into the `js` folder within it. You should see the `app.js` file.
    Open it. After you open this `app.js` file, look thorough the part where you have
    code that looks closely to what we have in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过导航到项目的`www`文件夹，然后查看其中的`js`文件夹来找到`app.js`文件。你应该能看到`app.js`文件。打开它。在打开这个`app.js`文件后，查找看起来与以下截图相似的代码部分：
- en: '![Retrieving the data with the $http service](img/00037.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![使用 $http 服务检索数据](img/00037.jpeg)'
- en: The code from the preceding screenshot represents the state definition of the
    `playlist.html` file. Pay close attention to the part of the code from the preceding
    screenshot where the controller is defined and you will see that the controller
    specified there is called `PlaylistsCtrl`. This is the name of the Angular controller
    that our `playlist.html` file is wired with.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图中的代码代表了`playlist.html`文件的州定义。请仔细关注上一张截图中的代码部分，其中定义了控制器，你会看到那里指定的控制器名为`PlaylistsCtrl`。这是我们`playlist.html`文件连接的Angular控制器的名称。
- en: The next step is to go to this `PlaylistsCtrl` controller and write the code
    to retrieve our data. By default, the controllers are contained in the `controller.js`
    file that can be found in the same `js` folder as our `app.js` file.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是进入这个`PlaylistsCtrl`控制器，并编写代码来检索我们的数据。默认情况下，控制器包含在可以找到与我们的`app.js`文件相同的`js`文件夹中的`controller.js`文件中。
- en: '![Retrieving the data with the $http service](img/00038.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![使用 $http 服务检索数据](img/00038.jpeg)'
- en: 'Open the `controller.js` file and look for a stub of code that closely resembles
    what I have in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`controller.js`文件，寻找与我下面截图相似的代码片段：
- en: '![Retrieving the data with the $http service](img/00039.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![使用 $http 服务获取数据](img/00039.jpeg)'
- en: 'The preceding code block represents the controller definition of `PlaylistsCtrl`.
    The first thing we need to do is to clear all the code within the controller.
    Basically, we need to delete all the code found within the controller. If you
    have done this correctly, your controller should now look similar to what we have
    in the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码块代表了`PlaylistsCtrl`的控制器定义。我们首先需要做的是清除控制器内的所有代码。基本上，我们需要删除控制器内找到的所有代码。如果你已经正确地完成了这个步骤，你的控制器现在应该看起来和下面的截图相似：
- en: '![Retrieving the data with the $http service](img/00040.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![使用 $http 服务获取数据](img/00040.jpeg)'
- en: 'With that done, we can now begin to create the code to query our local JSON
    database with the angular `$http` service. The first thing we need to do to achieve
    this is to first add the dependency of our `$http` service to our controller.
    This step is very important as if we do not add this dependency correctly, our
    app will not load. To do this, simply add `$http` as the second parameter in the
    anonymous function part of your controller definition. If you have done this correctly,
    you should see something similar to what I have in the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个步骤后，我们现在可以开始创建使用Angular `$http`服务查询我们的本地JSON数据库的代码。为了实现这一点，我们首先需要将我们的`$http`服务的依赖项添加到控制器中。这一步非常重要，如果我们没有正确地添加这个依赖项，我们的应用将无法加载。为此，只需将`$http`作为控制器定义匿名函数部分的第二个参数添加即可。如果你已经正确地完成了这个步骤，你应该会看到与我下面截图相似的内容：
- en: '![Retrieving the data with the $http service](img/00041.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![使用 $http 服务获取数据](img/00041.jpeg)'
- en: 'With that done, we can now go ahead and start writing the code to grab our
    data from our local database. To start this process, simply write the following
    code into your controller:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个步骤后，我们现在可以开始编写代码，从我们的本地数据库中获取数据。要开始这个过程，只需将以下代码写入你的控制器中：
- en: '[PRE5]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you have done this correctly, your code should look very close to what we
    have in the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经正确地完成了这个步骤，你的代码应该非常接近下面的截图：
- en: '![Retrieving the data with the $http service](img/00042.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![使用 $http 服务获取数据](img/00042.jpeg)'
- en: At this point, I will explain what this block of code is doing. We start by
    simply initializing the variable `sites` as an array to the `$scope`. It is a
    good practice to always initialize your Angular `$scope` variables before using
    them. The next thing we try to do is make an Ajax `get` request using the shorthand
    `$http.get()` method. This `$http.get` method returns a promise so we handle this
    promise by using the `.then()` method of promise handling of Angular. In the promise
    handler function, you can see that we start by setting the data property of the
    response from the promise (`response.data`). This `data` property of the promise
    response (`response.data`) is the property that holds any data returned which
    in our case is the data from our `sites.json` file.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我将解释这段代码的作用。我们首先简单地将变量`sites`初始化为一个数组到`$scope`。在使用Angular `$scope`变量之前总是初始化它们是一个好习惯。接下来，我们尝试使用简写的`$http.get()`方法进行Ajax
    `get`请求。这个`$http.get`方法返回一个promise，所以我们通过使用Angular的promise处理`.then()`方法来处理这个promise。在promise处理函数中，你可以看到我们首先设置promise响应的数据属性（`response.data`）。这个promise响应的数据属性（`response.data`）是包含任何返回数据的属性，在我们的例子中是`sites.json`文件中的数据。
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: One thing that might be a bit confusing is the fact that, for the first parameter
    of the `$http.get()` function, which takes the URL of the API or the file we want
    to consume, we have provided the following relative path`'/sites.json'`. You might
    be wondering why we have not correctly given a path relative to the `controller.js`
    file. This is because when working with Angular, all paths are referenced from
    the root `index.html` file. In our case, the `sites.json` and `index.html` files
    are in the same directory under the `www` directory, which is why we do not have
    the path `'../sites.json'`, and instead have the path`'/sites.json'`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有一点让人困惑的是，对于`$http.get()`函数的第一个参数，它接受API的URL或我们想要消费的文件，我们提供了以下相对路径`'/sites.json'`。你可能想知道为什么我们没有正确地给出相对于`controller.js`文件的路径。这是因为当使用Angular时，所有路径都是从根`index.html`文件引用的。在我们的例子中，`sites.json`和`index.html`文件都在`www`目录下的同一目录中，这就是为什么我们没有`'../sites.json'`路径，而是有`'/sites.json'`路径。
- en: With all this done, we have completed the process of creating our LTA application.
    All that is left now is to run the application. Go ahead and run this application
    using the `ionic serve` technique learned from [Chapter 1](part0015_split_000.html#E9OE1-798adc86542b445d8a1bb648e10b6714
    "Chapter 1. First Look at Ionic"), *First Look at Ionic*. Make sure you run this
    command from the root directory of your LTA app project.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些后，我们已经完成了创建我们的 LTA 应用程序的过程。现在剩下的只是运行应用程序。继续使用从[第1章](part0015_split_000.html#E9OE1-798adc86542b445d8a1bb648e10b6714
    "第1章。初探 Ionic")，“初探 Ionic”中学到的 `ionic serve` 技巧来运行这个应用程序。确保您从 LTA 应用程序项目的根目录运行此命令。
- en: 'If you have done this correctly, you should see a list of our tourist destinations
    as shown in the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您操作正确，您应该会看到以下截图所示的我们的旅游目的地列表：
- en: '![Retrieving the data with the $http service](img/00043.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![使用 $http 服务获取数据](img/00043.jpeg)'
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to create an Ionic application based on the
    side menu template. We used this knowledge to create our London Tourist Application.
    We also had a look at the code that makes up an Ionic side menu template and learned
    about the building block elements of a side menu application. We rounded up by
    querying some data via Ajax using the Angular `$http` service and rendered our
    tourist destinations.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何根据侧边菜单模板创建 Ionic 应用程序。我们利用这一知识创建了我们的伦敦旅游应用程序。我们还查看了一个 Ionic 侧边菜单模板的代码，并了解了侧边菜单应用程序的构建块元素。我们通过使用
    Angular 的 `$http` 服务通过 Ajax 查询一些数据并渲染我们的旅游目的地来总结。
- en: In the next chapter, we will extend our existing application and use some more
    complex Ionic components to do some really cool stuff.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将扩展我们现有的应用程序，并使用一些更复杂的 Ionic 组件来做一些真正酷的事情。
