- en: The Animation Library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画库
- en: Servos are great tools for creating movement in our robotics projects but we
    need more control in order to create truly mobile walking robots. Each servo is
    different; for example, each servo moves at slightly different max speeds. If
    you want a bot to walk, you need timing control, and the ability to know when
    a servo has finished its movement. Enter the animation library; this powerful
    tool inside Johnny-Five allows you to fine-tune your servo movements to allow
    you more in-depth control.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服机构是我们机器人项目创建运动的优秀工具，但为了创建真正移动的行走机器人，我们需要更多的控制。每个伺服机构都不同；例如，每个伺服机构以略不同的最大速度移动。如果你想让机器人行走，你需要时间控制，以及知道伺服机构何时完成其运动的能力。这时就出现了动画库；这个Johnny-Five内部强大的工具允许你微调伺服机构运动，以获得更深入的控制。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Animating movement
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画运动
- en: The terminology of the animation library
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画库的术语
- en: The construction of the animation object
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画对象的构建
- en: Easing into your servo animations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逐步进行伺服机构动画
- en: Learning more about queuing and playing animation segments
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习更多关于排队和播放动画片段
- en: Animation object events
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画对象事件
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You'll need your two-servo setup from the previous chapter, and that's it for
    hardware for this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要从上一章中使用的两个伺服机构设置，这就是本章的硬件要求。
- en: The code for this chapter can be found at [https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter08](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter08).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在[https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter08](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter08)找到。
- en: Animating movement
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画运动
- en: The animation library makes many things possible with servos that are otherwise
    anywhere from difficult to downright implausible. Before we explore the *how*
    of the animation library, however, we should more thoroughly explain the *why*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 动画库使得使用伺服机构变得可能，否则这些事情可能从困难到完全不可能。然而，在我们探索动画库的“如何”之前，我们应该更彻底地解释“为什么”。
- en: Why we need the animation library
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们需要动画库
- en: Think about the movement of your leg as you take a step. You don't normally
    have to, but when you do, there's a lot going on in your joints! Your hip extends
    your leg out, and your knee extends your leg without usually locking it. And your
    back leg is doing things too; your hip is allowing the leg to move back, and your
    ankle is flexing. This is a massive oversimplification, but it's still really
    complicated!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当你迈步时，想想你的腿部运动。你通常不需要这样做，但当你这样做时，你的关节中会发生很多事情！你的臀部伸展你的腿，你的膝盖伸展你的腿而不通常锁定它。而且你的后腿也在做事情；你的臀部允许腿向后移动，你的脚踝在弯曲。这是一个巨大的简化，但它仍然非常复杂！
- en: Now imagine each of your joints as a servo, and you have to program taking a
    step. You cannot control the timing of each movement, because each servo will
    get to where you tell it to go as fast as you can. You also can't tell when a
    joint is done moving, so you have to hard-code timings and hope it holds up.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象你的每个关节都是一个伺服机构，你需要编程来迈一步。你无法控制每个动作的时间，因为每个伺服机构会以你能达到的最快速度到达你告诉它的位置。你也不能知道一个关节何时完成运动，所以你必须硬编码时间并希望它能保持。
- en: This exact kind of issue is what the animation library was made to alleviate.
    By giving you more control, you have more precision. But what do we mean by precision?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这种确切的问题正是动画库被制作出来要解决的。通过给你更多的控制，你就有更多的精确度。但我们的精确度指的是什么？
- en: Moving servos with true precision
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精确控制伺服机构运动
- en: 'True precision, in the context of moving servos, means being able to control
    the timing, position, and speed of the servos being used. This level of precision
    is vital when building meticulous movements that require multiple movements happening
    in sync to avoid physical collisions. A great example of this is a hexapod robot:
    each joint needs to move in time with the other joints in the leg, and each leg
    needs to move at a precise time during a step in order to avoid colliding with
    each other or throwing the hexapod off balance.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动伺服机构的背景下，真正的精确意味着能够控制所使用的伺服机构的时间、位置和速度。这种精确度在构建需要多个动作同步发生以避免物理碰撞的细致运动时至关重要。一个很好的例子是六足机器人：每个关节需要与其他腿部的关节同步移动，每条腿在迈步时需要精确地移动，以避免相互碰撞或使六足机器人失去平衡。
- en: Moving servos with true precision is a daunting task if you are hard-coding
    it; imagine setting 60 calls to `servo.to()` in order to create an animation that
    you *hope* takes one second. Or hard-coding each movement with `servo.to()`, timing
    it with the exact servo you've placed in the leg of your bot, and everything works...until
    the servo strips (it inevitably will), and you have to replace it and repeat the
    entire calibration process.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用硬编码来精确移动伺服电机，这将是一项艰巨的任务；想象一下，为了创建一个你希望持续一秒钟的动画，你需要设置60次`servo.to()`调用。或者，使用`servo.to()`硬编码每个动作，使用你放置在机器人腿部确切伺服电机的时间来计时，并且一切正常...直到伺服电机损坏（这是不可避免的），你必须更换它并重复整个校准过程。
- en: The animation library in Johnny-Five makes this process much simpler by allowing
    you to define your movements as segments of a larger design, that design being
    the animation itself. It does all of the math and works out all of the timings
    to ensure that your servos are where they need to be when they need to be there.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Johnny-Five中的动画库通过允许你将你的动作定义为更大设计的一部分，即动画本身，从而简化了此过程。它完成所有的数学运算并计算出所有的时间，以确保伺服电机在需要时处于正确的位置。
- en: Implicit use of the animation library
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐式使用动画库
- en: Sometimes, you don't even need to create an animation object in order to create
    an animation for your servos. Before we really break into the animation object,
    let's write some code that uses the animation library implicitly.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你甚至不需要创建一个动画对象，就可以为你的伺服电机创建动画。在我们真正深入动画对象之前，让我们编写一些使用动画库隐式调用的代码。
- en: Using servo.to() to implicitly create an animation
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`servo.to()`隐式创建动画
- en: 'In a `project` folder for this chapter, create a file called `implicit-animations.js`.
    We''ll set up this file to use the REPL to demonstrate animations created without
    explicitly creating an animation object. Start with the normal boilerplate: bring
    in `johnny-five` and `raspi-io`, set up your board and `board.ready()` handler
    as usual:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的`project`文件夹中，创建一个名为`implicit-animations.js`的文件。我们将设置此文件以使用REPL来演示不显式创建动画对象创建的动画。从正常的样板开始：引入`johnny-five`和`raspi-io`，像往常一样设置你的板和`board.ready()`处理程序：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, inside the `board.on(''ready'')` handler, construct a `Servo` object:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`board.on('ready')`处理程序内部，构建一个`Servo`对象：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next, while still inside the `board.on('ready')` handler, we're going to create
    the same motion three times—each time with a different set of specifications.
    Two of these will create an animation behind-the-scenes, and one is the default
    movement, so you can see the difference.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，仍然在`board.on('ready')`处理程序内部，我们将创建相同的运动三次——每次使用不同的规格。其中两个将创建后台动画，一个则是默认运动，这样你可以看到差异。
- en: 'It can be a little hard to spot the differences in the servo movements if you''re
    looking at a micro servo horn. I taped a Popsicle stick to my servo horns for
    this chapter, to make the differences easier to see. I also taped it to stand
    up on my desk so it wouldn''t tip over, as shown in the following diagram:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在查看微型伺服电机叶片，可能会很难注意到伺服电机运动中的差异。为了使差异更容易看到，我在本章的伺服电机叶片上贴了一根冰棍棒。我还把它贴在桌子上，这样它就不会倒下，如下面的图所示：
- en: '![](img/fc252dec-e458-49c8-a00c-3ef579fee832.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fc252dec-e458-49c8-a00c-3ef579fee832.png)'
- en: 'First movement function, still inside your `board.on(''ready'')` handler, will
    be called `normalFullSwing()`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个运动函数，仍然在`board.on('ready')`处理程序内部，将被命名为`normalFullSwing()`：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This function will move the servo to `0` degrees as quickly as it can, then
    bring the servo to `180` degrees as fast as it can.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将尽可能快地将伺服电机移动到`0`度，然后尽可能快地将伺服电机移动到`180`度。
- en: 'Let''s add a parameter to `servo.to()` in our next function that will change
    how long the servo takes to get there. We''ll set it to take in a time parameter
    that we''ll pass through when we experiment in the REPL:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一个函数中为`servo.to()`添加一个参数，这将改变伺服电机到达所需位置所需的时间。我们将将其设置为接受一个时间参数，我们将在REPL中进行实验时传递它：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This function will take the number of milliseconds passed to it to go from `0`
    to `180` degrees. It will still start by going to `0` degrees as fast as possible.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将接受传递给它的毫秒数，从`0`度到`180`度。它仍然会尽可能快地开始移动到`0`度。
- en: 'Finally, we''ll write a function that takes in a time and a steps parameter
    that will move the servo from `0` to `180` in the time given, using the number
    of steps given. We''ll call this function `timedFullSwingWithSteps()`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将编写一个函数，该函数接受时间和步数参数，将伺服电机在给定的时间内从`0`度移动到`180`度，使用给定的步数。我们将此函数称为`timedFullSwingWithSteps()`：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This function will, as the others, still go to `0` as fast as possible first.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数，和其他函数一样，仍然会尽可能快地先到达 `0`。
- en: 'Finally, we''ll give ourselves access to these functions from the REPL using
    `board.repl.inject()`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用 `board.repl.inject()` 给自己提供访问这些函数的权限：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And we're ready to roll (or swing, as it were)!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们就准备开始了（或者说，就像它那样摇摆）！
- en: Playing with implicit animations
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩转隐式动画
- en: 'Load the folder onto your Pi, navigate into it using your Pi SSH session, and
    run the following commands:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件夹加载到你的 Pi 上，使用你的 Pi SSH 会话进入该文件夹，并运行以下命令：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now that we''re all set up, we run the code using:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了，我们使用以下命令运行代码：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once you see `Board Initialized`, we can run our functions and see the differences.
    Here are just a few to try:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们看到 `Board Initialized`，我们就可以运行我们的函数并看到差异。这里有一些可以尝试的：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You may be noticing something is up by now. At most, you might see a twitch
    or two, but it's certainly not working as intended!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你可能已经注意到有些不对劲。最多，你可能看到一两个抽搐，但这显然不是按预期工作的！
- en: That's because of a very important thing with timing, and that's that **if you
    don't wait for servo movements to finish, they'll just override each other, causing
    unstable results**.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为一个非常重要的时间问题，那就是如果你不等待伺服器运动完成，它们将相互覆盖，导致不稳定的结果。
- en: That's part of why the animation library is so important! It has the ability
    for you to queue animations, meaning that the servo will let each movement finish
    before moving on to the next, preventing the need for you to program the waiting
    in yourself (especially icky considering the asynchronous nature of JavaScript).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是动画库之所以重要的部分原因！它具有让你排队动画的能力，这意味着伺服器会在进行下一个动作之前让每个动作完成，从而避免你需要自己编写等待代码（特别是考虑到JavaScript的异步性质，这尤其令人讨厌）。
- en: Now, we're going to use a few more implicit animations, and some `setTimeout()`
    calls, to make these functions work properly.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用更多的隐式动画和一些 `setTimeout()` 调用来使这些函数正常工作。
- en: Playing with implicit animations, take two
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩转隐式动画，再来一次
- en: 'To fix your `normalFullSwing()` function, we''ll set the `servo.to(0)` call
    to take 250 milliseconds, and `call servo.to(180)` after 255 milliseconds (just
    to be sure it''s completely done getting to `0` first):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修复你的 `normalFullSwing()` 函数，我们将设置 `servo.to(0)` 调用为250毫秒，然后在255毫秒后调用 `servo.to(180)`（只是为了确保它首先完全到达
    `0`）：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We''ll do the same to the `timedFullSwing()` and `timedFullSwingWithSteps()`
    functions:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对 `timedFullSwing()` 和 `timedFullSwingWithSteps()` 函数做同样的处理：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once you''ve made these changes, reload your `project` folder and run it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你做了这些更改，重新加载你的 `project` 文件夹并运行它：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you're using the book code directly instead of following along, `implicit-animations-fixed.js`
    contains the timeouts so you should run that file instead of running `implicit-animations.js`
    again.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你直接使用书中的代码而不是跟随操作，`implicit-animations-fixed.js` 包含了超时设置，所以你应该运行那个文件而不是再次运行
    `implicit-animations.js`。
- en: 'Now that the code is running as intended, let''s play around a little more
    with these implicit animations:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码按预期运行，让我们再对这些隐式动画玩玩：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Make a mental note of what changing the timing and steps does to the servo's
    movements, it'll come in handy for the rest of the chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在心中记下改变时机和步骤对伺服器运动的影响，这对于本章的其余部分会很有帮助。
- en: Now that we understand some of the underlying effects of the animation library,
    and why it's so crucial when dealing with complex servo movements, let's dig into
    the animation library in detail. We'll start with the terminology, unless you
    have a strong background with animation (as in animated imagery), you have some
    vocabulary to learn!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了一些动画库的底层效果，以及为什么在处理复杂的伺服器运动时它如此关键，让我们详细地研究一下动画库。我们将从术语开始，除非你拥有动画（如动画图像）的强大背景，你还需要学习一些词汇！
- en: The terminology of the animation library
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画库的术语
- en: The animation library was named the way it was quite intentionally; the vocabulary
    of the animation object very closely matches the vocabulary of animating images.
    Let's look at a few of the terms we'll be using heavily throughout this chapter.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 动画库被命名为这种方式是非常有意的；动画对象的词汇非常接近动画图像的词汇。让我们看看我们将在这章中大量使用的几个术语。
- en: '**Frame**: A frame of an animation is, in this context, the state of the servo
    at a given instance in time. As you can imagine, programming each and every frame
    of servo movement for a complex group of servos, such as a limb, would be a nightmare.
    Luckily, technology is on our side here, and we won''t have to write each and
    every frame.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帧**：在这个上下文中，动画的帧是伺服系统在特定时间点的状态。正如你可以想象的那样，为复杂的伺服系统组（如肢体）编程每一帧伺服运动将是一场噩梦。幸运的是，技术站在我们这边，我们不需要编写每一帧。'
- en: '**Keyframe**: A keyframe is a point in an animation that serves as an anchor
    unless you''re drawing (or programming) every frame of an animation by hand; you
    establish a set of keyframes that establish the major points of movement for the
    animation. For example, in our full sweep we were doing earlier, a good set of
    keyframes would be something like this:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关键帧**：关键帧是动画中的一个点，它作为锚点，除非你手动绘制（或编程）动画的每一帧；你建立一组关键帧，以确定动画的主要运动点。例如，在我们之前所做的完整扫描中，一组好的关键帧可能如下所示：'
- en: Start at any degree
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从任何角度开始
- en: Be at `0` degrees
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处于`0`度
- en: End at `180` degrees
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`180`度时结束
- en: Simpler animations have fewer keyframes, but you always need at least two to
    create an animation. Note that keyframes themselves do not have any concept of
    time attached; they must be coupled with cue points to create an animation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的动画拥有较少的关键帧，但你始终需要至少两个来创建一个动画。请注意，关键帧本身并没有任何时间概念；它们必须与提示点结合来创建动画。
- en: '**Cue point**: A cue point is a point in the context of the sequence between
    0 and 1, and a set of cue points paired with an equally-sized set of keyframes
    and an overall duration creates a full animation. For instance, when we care the
    keyframes above with the set of cue points containing 0 seconds, 1 second, and
    2 seconds, you get what starts to sound like an animation:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提示点**：提示点是在序列上下文中介于0和1之间的一个点，一组与等大小的关键帧集和整体持续时间配对的提示点创建了一个完整的动画。例如，当我们使用包含0秒、1秒和2秒的提示点集与上述关键帧集配对时，你得到一个听起来像动画的东西：'
- en: Start at any degree at 0%
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在0%时从任何角度开始
- en: Be at `0` degrees at 50%
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在50%时处于`0`度
- en: End at `180` degrees at 100%
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`180`度时结束于100%
- en: '**Duration**:Duration is the amount of time the animation sequence will run,
    and completes an animation when paired with keyframes and cue points. Take the
    above example with a duration of 2000 millseconds and you get:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续时间**：持续时间是动画序列将运行的时间长度，当与关键帧和提示点配对时，完成动画。以上述2000毫秒的持续时间为例，你得到：'
- en: Start at any degree at 0 ms
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在0毫秒时从任何角度开始
- en: Be at `0` degrees at 1000 ms
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在1000毫秒时处于`0`度
- en: End at `180` degrees at 2000 ms
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在2000毫秒时结束于`180`度
- en: '**Tweening**: Tweening is the idea of your software creating the necessary
    frames between your keyframes. You establish the keyframes, and tweening figures
    out what to do in between those frames. The time between each frame (exhibited
    by our `timedFullSwing()` function) and the number of steps (frames) between keyframes
    (exhibited by our `timedFullSwingWithSteps()` function) allow us to fine-tune
    the tweening process.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**补间**：补间是软件在关键帧之间创建必要帧的想法。你建立关键帧，补间则确定这些帧之间的内容。每帧之间的时间（由我们的`timedFullSwing()`函数展示）和关键帧之间的步数（帧数）（由我们的`timedFullSwingWithSteps()`函数展示）使我们能够微调补间过程。'
- en: '**Easing**:Another part of the tweening process is easing. Without easing,
    all tweening is done linearly, with the same amount of movement in each tweened
    frame. This does not look smooth at all if you''re building anything trying to
    walk. There are several forms of tweening; one of the most common form is ease-in
    or ease-out easing, which either starts slowly and ramps up to a fast ending,
    or starts fast and ramps down to a slow ending, respectively.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓动**：缓动是补间过程的一部分。没有缓动，所有的补间都是线性完成的，每个补间帧的运动量相同。如果你在构建试图行走的东西，这看起来一点也不平滑。存在几种补间形式；最常见的一种是缓入或缓出缓动，分别以缓慢开始并逐渐加速到快速结束，或者以快速开始并逐渐减速到缓慢结束。'
- en: Now that we've discussed the terminology of an animation, we can start coding
    our first (explicit) animation object with Johnny-Five!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了动画的术语，我们可以开始用Johnny-Five编写我们的第一个（显式）动画对象了！
- en: The construction of the animation object
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画对象的构建
- en: To construct an animation object, we need to create the object itself, create
    a set of keyframes and a set of cue points, then enqueue those keyframes and cue
    points as an animation to run on our servos.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个动画对象，我们需要创建对象本身，创建一组关键帧和一组提示点，然后将这些关键帧和提示点作为动画排队在我们的伺服器上运行。
- en: Creating the animation object
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建动画对象
- en: 'Create a new file in your `project` folder called `my-first-animation.js` and
    create the normal boilerplate: `require` in Johnny-Five and Raspi-IO, create your
    `Board` object, and create the `board.on(''ready'')` function:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`project`文件夹中创建一个名为`my-first-animation.js`的新文件，并创建正常的样板：在Johnny-Five和Raspi-IO中`require`，创建你的`Board`对象，并创建`board.on('ready')`函数：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, inside the `board.on(''ready'')` handler, construct our two `Servo` objects
    on pin `0` and pin `1` of our PWM hat:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`board.on('ready')`处理程序内部，在我们的PWM帽的`0`引脚和`1`引脚上构建我们的两个`Servo`对象：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And create a `Servos` object containing our servos:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 并创建一个包含我们的伺服器的`Servos`对象：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now that we have a group of servos, we can create an animation object:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一组伺服器，我们可以创建一个动画对象：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now that we have our animation object, it's time to plan out our animation sequence,
    set keyframes and cue points, and queue them to animate.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了动画对象，是时候规划我们的动画序列，设置关键帧和提示点，并将它们排队进行动画。
- en: Planning out the animation sequence
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划动画序列
- en: 'Let''s plan a simple enough animation for our first go-round: let''s allow
    the servos to start anywhere, then `servoOne` will move to `0` degrees while `servoTwo`
    will move to `180`. Then, `servoOne` will sweep to `180` while `servoTwo` starts
    moving to `90` degrees, then both servos will end at `90` degrees. Let''s have
    each of these positions happen two seconds apart. So our keyframes will look something
    like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们规划一个足够简单的动画来进行第一次尝试：让我们允许伺服器从任何地方开始，然后`servoOne`将移动到`0`度，而`servoTwo`将移动到`180`。然后，`servoOne`将扫过到`180`度，而`servoTwo`开始向`90`度移动，然后两个伺服器都将结束在`90`度。让我们让这些位置每两秒发生一次。因此，我们的关键帧看起来可能像这样：
- en: Start with `servoOne` at any degree, start with `servoTwo` at any degree
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以任何度数开始`servoOne`，以任何度数开始`servoTwo`
- en: Move `servoOne` to `0` degrees, move `servoTwo` to `180` degrees
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`servoOne`移动到`0`度，将`servoTwo`移动到`180`度
- en: '`servoOne` stays at its last known position, `servoTwo` is moving towards `90`
    degrees'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`servoOne`保持在它最后已知的位置，`servoTwo`正在向`90`度移动'
- en: Move `servoOne` to `180` degrees, `servoTwo` is moving towards `90` degrees
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`servoOne`移动到`180`度，`servoTwo`正在向`90`度移动
- en: Move `servoOne` to `90` degrees, move `servoTwo` to `90` degrees completed
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`servoOne`移动到`90`度，将`servoTwo`移动到`90`度完成
- en: 'Our cue points will be (in terms of `0`-`1`): `0`, `.25`, `.5`, `.75`, `1`.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的提示点（以`0`-`1`表示）：`0`，`.25`，`.5`，`.75`，`1`。
- en: Now that we've planned out our sequence, we can start programming our keyframes.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经规划好了我们的序列，我们可以开始编程我们的关键帧。
- en: Creating keyframes
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建关键帧
- en: 'We need to make a keyframe array for each servo in our servos group, for each
    cue point: two arrays of five keyframes each.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为我们的伺服器组中的每个伺服器创建一个关键帧数组，对于每个提示点：两个包含五个关键帧的数组。
- en: That sounds simple enough, but how do we tell the animation to let the servos
    start wherever they happen to be? And how do we tween `servoTwo` across two cue
    points in its move to `90` degrees? The answer lies in the way Johnny-Five parses
    null and false as servo positions in keyframes.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来很简单，但我们如何让动画让伺服器从它们所处的任何位置开始？以及我们如何让`servoTwo`在移动到`90`度的过程中跨越两个提示点进行缓动？答案在于Johnny-Five如何解析null和false作为关键帧中的伺服器位置。
- en: Using null and false as positions in keyframes
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在关键帧中使用null和false作为位置
- en: Null and false are used by Johnny-Five to allow us to create complex segments
    where we can tween between multiple cue points or use the last known position
    of a servo as a keyframe position.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Johnny-Five使用null和false允许我们创建复杂的段，在这些段中，我们可以在多个提示点之间进行缓动，或者使用伺服器的最后已知位置作为关键帧位置。
- en: The effect of null depends on where it is used, if it is used in the first keyframe,
    it uses the position of the servo as the animation begins as that keyframe's position.
    This is exactly what we need to start our animation sequence, as we want both
    servos to start at wherever they happen to be. If null is used in a keyframe that
    is not the first, then the keyframe will essentially be ignored at that cue point;
    if you have 30 in one keyframe, null in the next, and 120 in the third, the servo
    will move `90` degrees over the two cue points. We will use this to allow `servoTwo`
    to move from `180` to `90` over two cue points.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 空对象的效果取决于它被使用的位置，如果它在第一个关键帧中使用，它将使用伺服器的位置作为动画开始时的关键帧位置。这正是我们开始动画序列所需要的，因为我们希望两个伺服器都从它们恰好所在的位置开始。如果空对象在不是第一个的关键帧中使用，那么在那个提示点处，关键帧将被基本忽略；如果你在一个关键帧中有30度，下一个关键帧中是空对象，第三个关键帧中是120度，伺服器将在两个提示点之间移动`90`度。我们将使用这一点来允许`servoTwo`在两个提示点之间从`180`度移动到`90`度。
- en: When you use false as a keyframe position, it will use the position set in the
    last keyframe. We will use this on `servoOne` when the keyframe calls for the
    servo to remain in its last known position, instead of hard-coding a second 180-degree
    position.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用`false`作为关键帧位置时，它将使用在最后一个关键帧中设置的位置。我们将使用这一点在`servoOne`的关键帧调用要求伺服器保持在最后已知位置时，而不是硬编码第二个180度的位置。
- en: Now that we know how null and false affect our positioning in keyframes, let's
    program our keyframes for our planned animation sequence.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了空和`false`如何影响我们的关键帧定位，让我们为我们的计划动画序列编程我们的关键帧。
- en: Programming our keyframes
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程我们的关键帧
- en: 'So based on the information we''ve been given, the values we need for each
    keyframe are:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们提供的信息，每个关键帧所需的值如下：
- en: '`servoOne null`, `servoTwo null` (start wherever the servos happen to be)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`servoOne null`，`servoTwo null`（从伺服器恰好所在的位置开始）'
- en: '`servoOne 0`, `servoTwo 180`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`servoOne 0`，`servoTwo 180`'
- en: '`servoOne 180`, `servoTwo null` (`servoTwo` starts moving towards `90` degrees)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`servoOne 180`，`servoTwo null`（`servoTwo`开始向`90`度移动）'
- en: '`servoOne false`, `servoTwo null` (`servoOne` stays put, `servoTwo` still moving
    to `90` degrees)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`servoOne false`，`servoTwo null`（`servoOne`保持不动，`servoTwo`仍在向`90`度移动）'
- en: '`servoOne 90`, `servoTwo 90`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`servoOne 90`，`servoTwo 90`'
- en: 'Each position needs to be an object with a property `degrees` for each keyframe. Let''s
    translate that into JavaScript, right under the construction of our animation
    object:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 每个位置都需要是一个对象，具有每个关键帧的`degrees`属性。让我们将其转换为JavaScript，就在我们的动画对象构建下方：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now that we have our keyframes programmed, let's get started on our cue points.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编程了关键帧，让我们开始设置提示点。
- en: Setting cue points and duration
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置提示点和持续时间
- en: Cue points, no matter how many servos you have, will always be a one-dimensional
    array of times to match each keyframe in the array of keyframes you pass in.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 提示点，无论你有多少伺服器，都将始终是一个一维数组的时间，以匹配你传递到关键帧数组中的每个关键帧。
- en: Note that while the cue points in this animation are evenly spaced, that is
    absolutely optional your cue points can vary wildly in distance from each other
    without breaking anything.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，尽管这个动画中的提示点均匀分布，但这完全是可选的，你的提示点可以彼此之间距离很远，而不会破坏任何东西。
- en: 'Underneath our keyframes object, let''s set up our cue points array:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的关键帧对象下方，让我们设置我们的提示点数组：
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We want our animation to take 8 seconds overall, so add:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望整个动画持续8秒，所以添加：
- en: '[PRE19]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We have all the data we need, let's make an animation!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了所有需要的数据，让我们制作一个动画！
- en: Putting it all together to make an animation
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容组合起来制作动画
- en: 'In order to run our animation sequence, we have to place it in the queue using
    the `Animation.enqueue()` function. We''ll need to pass in the duration, keyframes,
    and cue points together. In your `my-first-animation.js`, after the duration,
    add:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行我们的动画序列，我们必须使用`Animation.enqueue()`函数将其放入队列中。我们需要一起传递持续时间、关键帧和提示点。在你的`my-first-animation.js`中，在持续时间之后添加：
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The object containing the duration, `keyFrames`, and `cuePoints` properties
    is known within the animation library as a `Segment` object.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 包含持续时间、`keyFrames`和`cuePoints`属性的对象在动画库中被称为`Segment`对象。
- en: The animation segment will immediately begin to play upon queuing, so we're
    ready to load our project in and see some animated servos!
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 动画段将在排队后立即开始播放，所以我们准备好加载我们的项目并看到一些动画伺服器！
- en: Watching your animation at work
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观看你的动画运行
- en: 'Load your `project` folder onto the Pi, navigate into the folder in your Pi
    SSH session, and run:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的`project`文件夹加载到Pi上，在Pi SSH会话中导航到该文件夹，并运行：
- en: '[PRE21]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You should see the animation play out with the two servos as we described it.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到动画以我们描述的方式播放，两个伺服电机也是如此。
- en: This is really powerful, but when you think of a walking hexapod, these linear
    movements wouldn't make for a realistic or pretty gait. Let's add some easing
    into our animation sequence in order to create some more organic-looking movement.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的很强大，但当你想到一个六足步行机器人时，这些线性运动不会使步态看起来真实或美观。让我们在我们的动画序列中添加一些缓动，以创建一些更有机的外观运动。
- en: Easing into your servo animations
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓动到伺服电机动画
- en: Unless you want any of your future walking bots to be very firmly in the uncanny
    valley, you'll need to use easing to create a more fluid, natural motion with
    your animation segments.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你希望你的未来行走机器人非常坚定地处于“不祥谷”，否则你需要使用缓动来创建更流畅、更自然的动画片段运动。
- en: How easing fits into an animation segment
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓动如何适应动画片段
- en: 'Easing functions are added into the `keyframes` of a servo; so not only are
    we saying what position we want the servo to be, but how it gets there. For example,
    these `keyframes`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服电机的`keyframes`中添加了缓动函数；因此，我们不仅说明了希望伺服电机到达的位置，还说明了它是如何到达那里的。例如，这些`keyframes`：
- en: '[PRE22]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Will take a servo starting at any position and move it to `180`, starting out
    slow, speeding up in the middle, and slowing down again towards the end.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 将从任何位置开始的伺服电机移动到`180`，开始时速度较慢，中间加速，然后再次减速。
- en: There are many different options for easing, and they are documented in the
    ease-component ([https://www.npmjs.com/package/ease-component](https://www.npmjs.com/package/ease-component))
    `npm` module included as a dependency to Johnny-Five. We'll be using `incirc`,
    `outcirc`, and `inoutcirc` to start.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 缓动有许多不同的选项，它们在作为Johnny-Five依赖项包含的`ease-component` ([https://www.npmjs.com/package/ease-component](https://www.npmjs.com/package/ease-component))
    `npm`模块中有文档说明。我们将从`incirc`、`outcirc`和`inoutcirc`开始使用。
- en: Adding easing to our first animation
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的第一个动画添加缓动
- en: 'Copy the contents of `my-first-animation.js` into a new file called `easing-animations.js`. Next,
    we''ll modify the `keyframes` array to include some easing:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 将`my-first-animation.js`的内容复制到一个名为`easing-animations.js`的新文件中。接下来，我们将修改`keyframes`数组以包含一些缓动：
- en: '[PRE23]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s also increase the duration of the animation segment so we can really
    see the difference easing makes:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也将动画片段的持续时间增加，以便我们真正看到缓动带来的差异：
- en: '[PRE24]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, load it onto the Pi, navigate to the folder in your Pi SSH session, and
    run the following command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将其加载到树莓派上，在您的树莓派SSH会话中导航到文件夹，并运行以下命令：
- en: '[PRE25]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Really watch how `inCirc`, `outCirc`, and `inOutCirc` affect your animation.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 真实地观察`inCirc`、`outCirc`和`inOutCirc`如何影响你的动画。
- en: Easing an entire animation segment
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓动整个动画片段
- en: 'In order to easily set all keyframes in an animation segment to have the same
    easing, you can pass an `easing` property when you enqueue your segment. For example:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了轻松地将动画片段中的所有关键帧设置为具有相同的缓动，你可以在排队你的片段时传递一个`easing`属性。例如：
- en: '[PRE26]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The preceding code will override the keyframes and all of them will use `inOutCirc`
    easing. Now that we've fully explored easing our animation segments, let's take
    a look at the animation queue and how we can affect our segments when we queue
    them and when they're playing.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将覆盖关键帧，并且所有这些都将使用`inOutCirc`缓动。现在我们已经完全探索了缓动动画片段，让我们看看动画队列以及我们如何在排队和播放时影响我们的片段。
- en: Learning more about queuing and playing animation segments
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习更多关于排队和播放动画片段
- en: When we queue an animation segment, we pass it a duration, cue points, and keyframes.
    But we can also pass in other options that affect the playback of the animation
    segment. We can also call methods on the animation object that affect animation
    segments currently playing and in the queue.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们排队一个动画片段时，我们传递给它持续时间、提示点和关键帧。但我们也可以传递其他影响动画片段播放的选项。我们还可以调用动画对象上的方法，这些方法会影响当前正在播放和排队中的动画片段。
- en: Before we start messing with these, copy the content of `easing-animations.js`
    into a new file called `playing-with-the-queue.js`. Remove the call to `myFirstAnimation.enqueue()`
    at the end; we want a little control when we get into the REPL this time around.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始修改这些之前，将`easing-animations.js`的内容复制到一个名为`playing-with-the-queue.js`的新文件中。删除末尾对`myFirstAnimation.enqueue()`的调用；这次我们想要一点控制权。
- en: Looping animation segments
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环动画片段
- en: 'First, let''s add a function that will enqueue our animation normally:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们添加一个函数，以便我们正常排队动画：
- en: '[PRE27]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Sometimes you want the animation segment you are enqueuing to run on a loop.
    Let''s create a function in our `board.on(''ready'')` handler that will enqueue
    our animation segment on a loop:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你希望你正在排队的动画段在循环中运行。让我们在`board.on('ready')`处理程序中创建一个函数，该函数将循环我们的动画段：
- en: '[PRE28]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You can also add the `loopBackTo` property, and set it to the index of a cue
    point; the animation will start its loop from the designated cue point.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以添加`loopBackTo`属性，并将其设置为提示点的索引；动画将从指定的提示点开始循环。
- en: 'What if we want the animation to play forward, then back to the start, and
    repeat? Let''s write a function that will set the `metronomic` property to do
    just that:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想让动画向前播放，然后回到起点并重复，我们应该如何编写一个函数来设置`metronomic`属性以实现这一点？
- en: '[PRE29]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now that we know how to loop and metronome our animation segments, let's explore
    changing the speed of animation segments using the animation object.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何循环和节拍动画段，让我们来探索使用动画对象更改动画段速度的方法。
- en: Changing the speed of animation segments
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改变动画段的速度
- en: You can call `Animation.speed()` with a numeric multiplier to change the speed
    of the current animation segment. For instance, calling `Animation.speed(.5)`
    will halve the speed, and `Animation.speed(2)` will double it.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用一个数值乘数调用`Animation.speed()`来改变当前动画段的速度。例如，调用`Animation.speed(.5)`将减半速度，而`Animation.speed(2)`将加倍它。
- en: 'Let''s write some functions to half, double, and normalize our animation segment
    speed:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一些函数来将动画段的速度减半、加倍和归一化：
- en: '[PRE30]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Add these to the loop and metronome functions.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些添加到循环和节拍器功能中。
- en: Now that we know how to adjust the speed of animation functions, as well as
    how to loop them, let's talk about pausing, playing, and stopping animations.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何调整动画函数的速度以及如何循环它们，让我们来谈谈暂停、播放和停止动画。
- en: Playing, pausing, and stopping animation segments
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放、暂停和停止动画段
- en: If left alone, the animation segments will be played until there is nothing
    left in the queue to play (meaning if there is a looped or metronome segment,
    it will stay on that segment).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不进行干预，动画段将一直播放，直到队列中没有剩余的内容可以播放（这意味着如果有一个循环或节拍器段，它将停留在该段上）。
- en: 'But you can move to the next animation:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 但你可以移动到下一个动画：
- en: '[PRE31]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Or you can pause the current segment:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以暂停当前段：
- en: '[PRE32]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Start it up again:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 再次启动它：
- en: '[PRE33]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Or stop the current segment and clear out the entire queue:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 或者停止当前段并清除整个队列：
- en: '[PRE34]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Let's use these, along with the REPL, to play with our animation and our new-found
    powers to manipulate it.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这些，以及REPL，来玩转我们的动画和我们新发现的能力来操纵它。
- en: Tying it all together in the REPL
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在REPL中将所有这些整合在一起
- en: 'Add the following to the end of the `board.on(''ready'')` handler in `playing-with-the-queue.js`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到`playing-with-the-queue.js`中`board.on('ready')`处理程序的末尾：
- en: '[PRE35]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, load your `project` folder onto your Pi, navigate to the `project` folder
    in your Pi SSH session, and run the following command:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将你的`project`文件夹加载到你的Pi上，在Pi SSH会话中导航到`project`文件夹，并运行以下命令：
- en: '[PRE36]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Once you see `Board Initialized`, try a few commands to experiment with how
    your animation plays:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦看到`Board Initialized`，尝试一些命令来实验动画的播放方式：
- en: '[PRE37]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Summary
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we dived into the animation library with servos. We learned
    the key terminology for the animation library, how to construct an animation segment,
    how to queue it, and how to manipulate playback, both when queuing the segments
    or by calling methods of the animation object.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用伺服电机深入研究了动画库。我们学习了动画库的关键术语，如何构建动画段，如何排队，以及如何在排队段或通过调用动画对象的方法来操作播放。
- en: Questions
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why are animations necessary for complex movements with multiple servos?
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么对于多个伺服电机的复杂运动，动画是必要的？
- en: What is a keyframe?
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关键帧是什么？
- en: What is a cue point?
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提示点是什么？
- en: Name the three pieces of an animation segment.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画段由哪三部分组成？
- en: What does easing do to our animation keyframes and segments?
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缓动对动画关键帧和段有什么影响？
- en: What method of the animation object stops the current segment and clears the
    animation queue?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画对象中的哪个方法可以停止当前段并清除动画队列？
- en: What does calling `Animation.speed(.25)` do to the current animation?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`Animation.speed(.25)`会对当前动画做什么？
