- en: Chapter 13. Animation with Less
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章。使用 Less 进行动画
- en: How many times have you seen animated sites using Flash? OK, a fair few. I'll
    also bet that you wanted to skip the animation as soon as you could, right?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你见过多少使用 Flash 的动画网站？好吧，相当多。我敢打赌，你一有机会就想跳过动画，对吧？
- en: Yep, I thought so; not many hands going down now…
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我想是这样的；现在没有多少人举手了…
- en: We cannot forget the bad old days of sites that used Flash, where we frequently
    wanted to skip badly designed animations, which often didn't provide any useful
    content but instead made sites slow. Sounds familiar?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能忘记那些使用 Flash 的网站的老日子，我们经常想跳过那些设计糟糕的动画，这些动画往往不提供任何有用的内容，反而使网站变慢。听起来熟悉吗？
- en: Thankfully, things have moved on; over the next few pages, we'll see how you
    can use CSS3 animations instead to achieve the same effects that otherwise would
    have required Flash. The use of CSS3 animations eliminates the need for a heavy
    Flash plugin (for modern browsers), and provided they are done properly, can make
    a site faster, more enjoyable to browse, and engaging to the end user. We'll delve
    into the use of Less to simplify the process of coding some real-world examples
    in order to make our development workflow much easier.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，情况已经有所改变；在接下来的几页中，我们将看到如何使用 CSS3 动画来达到原本需要 Flash 才能实现的效果。CSS3 动画的使用消除了对重型
    Flash 插件的需求（对于现代浏览器而言），并且如果做得恰当，可以使网站运行更快，浏览体验更愉快，对最终用户更具吸引力。我们将深入研究使用 Less 来简化编码一些真实世界示例的过程，以便使我们的开发工作流程变得更加容易。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: How a CSS animation works
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS 动画的工作原理
- en: Transitions and transformations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过渡和变换
- en: Animated menus
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画菜单
- en: Simplifying the animation markup with Less
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Less 简化动画标记
- en: Intrigued? Let's make a start…
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣吗？让我们开始吧…
- en: Introducing animations
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍动画
- en: Back in the early days of the Internet, it was common to see animated GIFs that
    were often liberally plastered over a website—the excuse often being that they
    "look cool," even if they didn't really serve any purpose!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网的早期，经常可以看到动画 GIF，它们经常被随意地贴在网站上——通常的借口是它们“看起来很酷”，即使它们实际上并没有真正起到任何作用！
- en: Nowadays, animation is being used more and more on the Internet—this is often
    in the form of SVG images, background videos, sounds, and so on. This increasingly
    used technologies such as Flash, but with the advent of HTML5, designers have
    found ways to recreate many effects natively in the browser without the use of
    Flash.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，动画越来越多地被用于互联网上——这通常以 SVG 图像、背景视频、声音等形式出现。这种越来越被使用的技术如 Flash，但随着 HTML5 的出现，设计师们找到了在浏览器中不使用
    Flash 就能原生地重现许多效果的方法。
- en: Today, browser vendors are adding more and more functionalities to each version
    of their product; this means that CSS3 animation is gaining ground to the likes
    of Flash, such that Adobe has stopped developing Flash for the mobile platform,
    preferring to concentrate on HTML5.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，浏览器厂商正在为他们的每个产品版本添加越来越多的功能；这意味着 CSS3 动画正在逐渐取代 Flash，以至于 Adobe 已经停止为移动平台开发
    Flash，转而专注于 HTML5。
- en: Over the next few pages, we'll be taking a tour of CSS3 animations, looking
    at various elements such as transitions and transforms, and how we can use Less
    to help simplify the process of developing animations. You might be surprised
    to learn that there aren't a lot of new techniques to master when using Less to
    produce an animation—in fact, all of the techniques we've covered so far can be
    used to help make development easier.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几页中，我们将游览 CSS3 动画，查看各种元素，如过渡和变换，以及我们如何使用 Less 来帮助简化动画开发的过程。你可能会惊讶地发现，当使用
    Less 制作动画时，并没有很多新技术需要掌握——实际上，我们迄今为止所涵盖的所有技术都可以用来帮助使开发过程变得更简单。
- en: Let's start though with a quick look at what makes a good animation—after all,
    there is no point in creating them if they aren't successful!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先快速看一下什么是一个好的动画——毕竟，如果它们不成功，就没有创建它们的必要了！
- en: Creating a good animation
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个好的动画
- en: How often have you looked at a site only to find that it looks like the inside
    of someone's brain in the middle of a migraine? Too many sites fall victim to
    the temptation to animate everything—animation is a secret ingredient that can
    make the most impact when care has been taken over its use.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你有多经常查看一个网站，却发现它看起来就像有人在偏头痛中大脑的内部？太多的网站屈服于将一切动画化的诱惑——动画是一个秘密成分，当使用得当时会产生最大的影响。
- en: 'So, what makes a good animation? This will depend on the context of the site,
    but there are some good tips that every designer should follow:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么因素使动画变得出色？这取决于网站的环境，但有一些好的建议，每个设计师都应该遵循：
- en: Don't overdo the attention grabbers—visitors want to feel in control of their
    browsing experience, so plastering a subscription dialog just when they reach
    the information they need is a big no-no! Use it to highlight something they might
    have missed, not to distract them.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要过度使用吸引注意力的元素——访客希望感觉他们可以控制他们的浏览体验，所以当他们到达所需信息时立即弹出订阅对话框是非常不恰当的！用它来突出他们可能错过的内容，而不是分散他们的注意力。
- en: Animation works well when it is used to highlight context and navigation features;
    a good example is an animated sidebar that provides useful local information.
    The contents of the sidebar will change frequently, so the use of animation will
    help to point out new information to users.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当动画用于突出上下文和导航功能时，动画效果很好；一个很好的例子是提供有用本地信息的动画侧边栏。侧边栏的内容会频繁更改，因此使用动画可以帮助指出新信息给用户。
- en: On some sites, telling a story is one way to use animation. While this might
    be an overkill for some sites, the popular full-page scroll effect works well,
    as it suggests that there is more to be read, which helps to keep the user interested.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一些网站上，讲述故事是使用动画的一种方式。虽然这可能对某些网站来说有些过度，但流行的全页滚动效果效果很好，因为它暗示还有更多内容可以阅读，这有助于保持用户的兴趣。
- en: If an animation is used, then make it physical and believable. You can use any
    effect on the elements, such as bouncing or shaking, but if they aren't believable,
    then users will find them a distraction and a big turn-off!
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用了动画，那么让它看起来真实可信。你可以在元素上使用任何效果，例如弹跳或震动，但如果它们不可信，那么用户会发现它们是干扰，并且会感到非常不快！
- en: 'Let''s move on now and turn the focus of our attention to something more in-depth:
    how do animations work? This is the key to creating successful animations. As
    we are about to see, the different types of animation appear similar, but they
    have some key differences; this can affect how we use them to develop effects
    on our site.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续前进，将我们的注意力转向更深入的话题：动画是如何工作的？这是创建成功动画的关键。正如我们即将看到的，不同类型的动画看起来很相似，但它们有一些关键的区别；这可能会影响我们如何使用它们来在我们的网站上开发效果。
- en: How a CSS animation works
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS 动画的工作原理
- en: We've talked about animations in general, but the term covers no fewer than
    four different types that we can use within Less. They are animations, transitions,
    2D transforms, and 3D transforms.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了动画的一般概念，但这个术语涵盖了至少四种我们可以在 Less 中使用的不同类型。它们是动画、过渡、2D 变换和 3D 变换。
- en: 'There are two out of these four properties where particular attention should
    be paid to how they work: animations and transitions. This doesn''t mean that
    transforms are any less important—that''s not the case. They merely work in a
    different way to transitions and are easier to understand and use.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这四个属性中，有两个需要特别注意它们的工作方式：动画和过渡。这并不意味着变换不那么重要——情况并非如此。它们只是以与过渡不同的方式工作，更容易理解和使用。
- en: 'Animations and transitions can appear to provide the same result but work in
    different ways. The two crucial differences are:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 动画和过渡看起来可以提供相同的结果，但它们的工作方式不同。两个关键的区别是：
- en: Transitions work on a two-state basis—they change an element from the starting
    position to the finishing position if we switch CSS states or if a pseudo-class
    has been triggered, such as `:hover` or `:focus`
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过渡基于两种状态——如果我们切换 CSS 状态或触发了一个伪类，例如 `:hover` 或 `:focus`，它将改变元素从起始位置到结束位置。
- en: Animations can use multiple `@keyframes` or positions set between the starting
    and finishing state
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画可以使用多个 `@keyframes` 或在起始状态和结束状态之间设置的位置。
- en: The remaining two animation properties, 2D and 3D transforms, don't work in
    the same way—they can manipulate the size and appearance of an element, but usually
    in situ (although they can be used while the element is moving).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的两个动画属性，2D 和 3D 变换，它们的工作方式并不相同——它们可以操纵元素的大小和外观，但通常是在原地（尽管它们可以在元素移动时使用）。
- en: Now that we've seen how animations work, it's an opportune moment to get to
    know each type of animation property in more detail.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了动画的工作原理，现在是深入了解每种动画属性的好时机。
- en: Introducing animation types
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍动画类型
- en: When we talk about creating animations, this could be taken to mean that we're
    moving content; while this is perfectly true, we're not limited to simply moving
    elements. We could equally transition elements from one state to another or bend
    and manipulate their appearance on the screen. Let's take a look at each animation
    type in more detail, beginning with animations.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论创建动画时，这可以理解为我们在移动内容；虽然这是完全正确的，但我们不仅限于简单地移动元素。我们同样可以将元素从一个状态过渡到另一个状态，或者弯曲并操纵它们在屏幕上的外观。让我们更详细地查看每种动画类型，从动画开始。
- en: Animating content
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画内容
- en: Animating content is used to move objects and can be used as an alternative
    to using Flash. They define what happens to a set of element's properties—we can
    control how these properties behave when defining our animation, including their
    frequency.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用动画内容来移动对象，可以用作Flash的替代品。它们定义了一组元素属性的变化——我们可以在定义动画时控制这些属性的行为，包括它们的频率。
- en: The key difference between animations and transitions is that animations can
    be fired without any user interaction, as soon as a page loads. Transitions can
    only be fired when an element becomes active, such as a `button` element or a
    `div` element.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 动画和过渡之间的关键区别在于，动画可以在没有任何用户交互的情况下触发，一旦页面加载即可。过渡只能在元素变得活跃时触发，例如`button`元素或`div`元素。
- en: 'A simple animation will follow this format:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 简单动画将遵循以下格式：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let's test this by creating a simple animation that changes the color of a box.
    For this, we will need a copy of the code download that accompanies this book;
    from this, extract a copy of `animatebox.html` and `animatebox.css`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建一个简单的动画来改变框的颜色来测试这个。为此，我们需要这本书附带的代码下载副本；从这些代码中提取`animatebox.html`和`animatebox.css`的副本。
- en: 'If we run the demo, we can expect to see the box go through several shades
    of purple before reverting to the original color, as shown in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行演示，我们可以期待看到框经过几种紫色调，然后恢复到原始颜色，如下面的截图所示：
- en: '![Animating content](img/00121.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![动画内容](img/00121.jpeg)'
- en: 'The key to this is `@keyframes animbox` in our CSS; this contains the changes
    that should be made in each keyframe within our animation. We''ve had to include
    it twice in order to allow support for Chrome, Safari, and Opera:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键是我们的CSS中的`@keyframes animbox`；这包含了动画中每个关键帧应进行的更改。我们不得不包含它两次以支持Chrome、Safari和Opera：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The animation is a little jittery—this will be due to the large gaps within
    each keyframe; we could use smaller gaps for a smoother experience.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 动画有点抖动——这将是由于每个关键帧之间的大间隔；我们可以使用更小的间隔来获得更平滑的体验。
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can learn more about the different attributes for CSS3 animations at [http://www.w3schools.com/css/css3_animations.asp](http://www.w3schools.com/css/css3_animations.asp).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://www.w3schools.com/css/css3_animations.asp](http://www.w3schools.com/css/css3_animations.asp)了解更多关于CSS3动画的不同属性。
- en: Let's continue and take a look at how transitions work.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续并看看过渡是如何工作的。
- en: Transitioning elements
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过渡元素
- en: Transitions are effectively animations that change the state of an element from
    its original state to a new state; the key difference in animations is that transitions
    can only take place when they are explicitly triggered—for example, if a mouse
    hovers over a DIV or button.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡实际上是将元素从其原始状态转换为新状态的动画；动画与过渡的关键区别在于，过渡只能在它们被明确触发时发生——例如，当鼠标悬停在DIV或按钮上时。
- en: 'A simple transition will follow this format:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 简单过渡将遵循以下格式：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s test this by creating a simple transition that increases the size of
    a box. For this, we will need a copy of the code download that accompanies this
    book; from this, extract a copy of `transitionbox.html` and `transitionbox.css`.
    If we run the demo, we can expect to see the box increase in size before reverting
    to the original size:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建一个简单的过渡来增加一个框的大小来测试这个。为此，我们需要这本书附带的代码下载副本；从这些代码中提取`transitionbox.html`和`transitionbox.css`的副本。如果我们运行这个演示，我们可以期待看到框的大小增加，然后恢复到原始大小：
- en: '![Transitioning elements](img/00122.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![过渡元素](img/00122.jpeg)'
- en: 'The key to this is the transition code for the `#transitionbox` DIV in our
    CSS—this contains the changes that should be made in each keyframe within our
    animation. We''ve had to include it twice to allow support for WebKit browsers:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键是我们的CSS中`#transitionbox` DIV的过渡代码——这包含了动画中每个关键帧应进行的更改。我们不得不包含它两次以支持WebKit浏览器：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can always adjust the time taken for the animation to perform, should 2 seconds
    not be sufficient.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两秒钟不够，我们总是可以调整动画执行所需的时间。
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can learn more about the different attributes for CSS3 animations at [http://www.w3schools.com/css/css3_transitions.asp](http://www.w3schools.com/css/css3_transitions.asp).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [http://www.w3schools.com/css/css3_transitions.asp](http://www.w3schools.com/css/css3_transitions.asp)
    了解更多关于 CSS3 动画的不同属性。
- en: Let's move on now and take a look at the remaining two options, which are 2D
    and 3D transforms.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们继续前进，看看剩下的两个选项，即 2D 和 3D 变换。
- en: Transforming elements
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变换元素
- en: At first glance, you'd be forgiven for thinking that transforms are identical
    to transitions; after all, you can easily use `translate()` to move an object,
    whereas you can use an animation otherwise.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 初看之下，你可能会误以为变换和过渡是相同的；毕竟，你可以轻松地使用 `translate()` 来移动一个对象，而动画则可以用来实现其他效果。
- en: 'However, there are two key differences: transitions can be applied as part
    of animating an element, whereas transforms are completely independent. Transitions
    allow you to apply changes to just about any CSS property, whereas transforms
    will be used to move, scale, turn, spin, or stretch any element on the page:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有两个关键的区别：过渡可以作为动画元素的一部分应用，而变换则是完全独立的。过渡允许你将更改应用于几乎任何 CSS 属性，而变换则用于移动、缩放、旋转、旋转或拉伸页面上的任何元素：
- en: '![Transforming elements](img/00123.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![变换元素](img/00123.jpeg)'
- en: 'A simple transform will follow this format:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的变换将遵循以下格式：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s test this by creating two simple transforms: the first transform performs
    a 2D rotation on a box, and the second performs a 3D rotation along the *x* axis
    of the second box.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建两个简单的变换来测试这一点：第一个变换对一个盒子执行 2D 旋转，第二个变换则沿着第二个盒子的 *x* 轴执行 3D 旋转。
- en: For this, we will need a copy of the code download that accompanies this book;
    from it, extract a copy of `transformbox.html` and `transformbox.css`. If we run
    the demo, we can expect to see both the boxes rotate when hovering over either
    of these; the box on the left-hand side is rotated by 30 degrees, and the box
    on the right-hand side is rotated on its *x* axis by 130 degrees, as shown in
    the screenshot at the start of this section.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要这本书附带的代码下载的副本；从中提取 `transformbox.html` 和 `transformbox.css` 的副本。如果我们运行这个演示，我们预计在悬停在任何一个上面时，两个盒子都会旋转；左侧的盒子旋转了
    30 度，右侧的盒子在其 *x* 轴上旋转了 130 度，如本节开头所示截图所示。
- en: 'The key to this is the transform code in our CSS—for the first box, we''re
    rotating it by 30 degrees; the second is being rotated on its *x* axis by 130
    degrees. Note how the support for 2D transforms is much better than that for 3D
    transforms; we still need to use the `webkit` prefix for most desktop browsers:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 关键在于我们 CSS 中的变换代码——对于第一个盒子，我们将其旋转 30 度；第二个盒子在其 *x* 轴上旋转 130 度。注意 2D 变换的支持比 3D
    变换要好得多；我们仍然需要为大多数桌面浏览器使用 `webkit` 前缀：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Once support for browsers has improved on the 3D transform, we can then remove
    the first line in the second demo.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦浏览器对 3D 变换的支持得到改善，我们就可以从第二个演示的第二行中删除第一行。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can learn more about the different attributes for CSS3 transforms at [http://www.w3schools.com/css/css3_2dtransforms.asp](http://www.w3schools.com/css/css3_2dtransforms.asp)
    and [http://www.w3schools.com/css/css3_3dtransforms.asp](http://www.w3schools.com/css/css3_3dtransforms.asp).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [http://www.w3schools.com/css/css3_2dtransforms.asp](http://www.w3schools.com/css/css3_2dtransforms.asp)
    和 [http://www.w3schools.com/css/css3_3dtransforms.asp](http://www.w3schools.com/css/css3_3dtransforms.asp)
    了解更多关于 CSS3 变换的不同属性。
- en: We've talked a little about support for CSS3 animations as part of exploring
    these mini demos; now is an opportune moment to cover support in more detail.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在探索这些迷你演示的过程中稍微提到了对 CSS3 动画的支持；现在是详细探讨支持的合适时机。
- en: Supporting animations in browsers
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持浏览器中的动画
- en: 'One small point that we need to cover before moving on is browser support.
    Here you should have no trouble while working with animations; all the key elements
    of CSS3 animations have been supported by the major browsers for some time:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们需要讨论一个小问题，那就是浏览器的支持。在这里，你应该在使用动画时不会有任何麻烦；CSS3 动画的所有关键元素已经由主要浏览器支持了一段时间：
- en: '| IE | Firefox | Chrome | Safari | Opera |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| IE | Firefox | Chrome | Safari | Opera |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| 10+ | 5+ | 5+ | 4+ | 12+ |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 10+ | 5+ | 5+ | 4+ | 12+ |'
- en: Do check out the site **Can I Use** ([http://www.caniuse.com](http://www.caniuse.com)),
    as some of the newer elements of animation might still require vendor prefixes
    at the time of writing.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必查看网站 **Can I Use** ([http://www.caniuse.com](http://www.caniuse.com))，因为一些动画的新元素在撰写时可能仍然需要供应商前缀。
- en: Mobile support is equally well-supported; the only exception to this is Opera
    Mini, which lacks support for animations. Chrome for Android was a little buggy
    at the start, but this issue has since been resolved, so support will not be an
    issue. It is important to remember though that mobile devices don't have fast
    processors, so complex animations will run slowly and should be kept to a minimum
    on this platform.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备支持同样良好；唯一的例外是 Opera Mini，它不支持动画。Android 的 Chrome 在开始时有点问题，但这个问题已经解决，所以支持不会成为问题。然而，重要的是要记住，移动设备没有快速的处理器，所以复杂的动画将运行缓慢，并且在这个平台上应该尽量减少。
- en: 'Right, enough of the theory! Let''s move on to what you all have been waiting
    for: writing some code.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，理论就到这里！让我们继续到你们一直等待的部分：编写一些代码。
- en: Simplifying the animation markup with Less
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Less 简化动画标记
- en: 'Okay, we''re finally at the point where I am sure you''re itching to get to:
    writing some code! Don''t worry, we''re almost there. I just want to cover a small
    but key point, about how we can use Less to make coding animations simpler. To
    illustrate this, we''re going to rework the critical parts of the animation demo
    we created earlier in this chapter.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们终于到了你一定迫不及待想要到达的点：编写一些代码！别担心，我们很快就会到达那里。我只是想涵盖一个小但关键的观点，关于我们如何使用 Less 使编码动画更简单。为了说明这一点，我们将重新工作本章中我们之前创建的动画演示的关键部分。
- en: 'If we take a look back at the key parts of the animation demo, we have this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回顾动画演示的关键部分，我们有以下内容：
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Seems pretty reasonable, right? Well, as always, we can do better! Let''s see
    how:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来相当合理，对吧？嗯，就像往常一样，我们可以做得更好！让我们看看我们如何做到：
- en: The first change that we can make is save `animatebox.css` as `animatebox.less`—we'll
    introduce some mixins, so saving it as a Less file will allow us to compile it
    into valid CSS later in this exercise.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以做的第一个改变是将 `animatebox.css` 保存为 `animatebox.less`——我们将引入一些混合器，因此将其保存为 Less
    文件将允许我们在本练习的后续部分将其编译成有效的 CSS。
- en: 'We need to modify the HTML markup to include a reference to our new Less file
    and the Less library; so, go ahead and add the following in between the `<head>`
    markup:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要修改 HTML 标记以包含对新 Less 文件和 Less 库的引用；因此，请在 `<head>` 标记之间添加以下内容：
- en: '[PRE7]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, let''s turn the `@keyframes` code into a generic animation mixin—remove
    the existing two blocks at the end of the code (lines 15-29) and then replace
    it with the following code:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们将 `@keyframes` 代码转换为一个通用的动画混合器——删除代码末尾现有的两个块（第 15-29 行），然后用以下代码替换它：
- en: '[PRE8]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we add a new mixin that references the `@keyframes` code we''ve just
    created:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们添加一个新的混合器，它引用了我们刚刚创建的 `@keyframes` 代码：
- en: '[PRE9]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If we rerun the demo, we should see no change in the effect. So what's different
    and why have we done what we've done here? Well, there are several benefits of
    what we've done.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们重新运行演示，我们应该看到效果没有变化。那么有什么不同，我们为什么在这里这样做？嗯，我们这样做有几个好处。
- en: We moved the `@keyframes` code into its own mixin—while the code might not seem
    shorter here, the benefits will really show when we create larger, more complex
    animations that have to be repeated to allow vendor prefixing.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `@keyframes` 代码移动到了自己的混合器中——虽然这里的代码可能看起来没有缩短，但当我们创建更大、更复杂的动画并需要重复以允许供应商前缀时，好处将真正显现。
- en: 'The `.keyframes` mixin can now go into our own mixin library; this means that
    we can import the library into future projects:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`.keyframes` 混合器现在可以放入我们的混合器库中；这意味着我们可以将库导入未来的项目中：'
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Reference the mixin in our code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中引用混合器：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using Less to simplify our code isn't necessarily about making it shorter; it's
    also about making it reusable and easier to add to future projects!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Less 简化我们的代码并不仅仅是让它更短；它还关于使其可重用并更容易添加到未来的项目中！
- en: Tip
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: There's an updated demo available in the code—extract and run `animatebox-updated.html`
    to view the results.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中有一个更新的演示可用——提取并运行 `animatebox-updated.html` 来查看结果。
- en: Let's move on and work on a practical use of Less. How many times have you designed
    a menu for a site, only to think that it is becoming very code repetitive and
    needs animating? Okay, probably a little bit of a contrived question, but it could
    be possible…
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续，并专注于 Less 的实际应用。你有多少次为网站设计菜单，然后想到它变得越来越代码重复，需要动画？好吧，可能是一个有点牵强的问题，但这是可能的……
- en: Creating animated menus
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建动画菜单
- en: Menus are the doyen of many a site; we all need some form of navigation, but
    styling the navigation menus is very much left to the imagination of the site's
    designer.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单是许多网站的典范；我们都需要某种形式的导航，但导航菜单的样式很大程度上取决于网站设计师的想象力。
- en: 'We can even go further and add some useful effects to menus; we can at least
    animate the drop-down motion so that they glide in a little more gracefully. To
    do this, we''re going to revisit an exercise from an earlier instance in the book—remember,
    back in [Chapter 4](part0041_split_000.html#page "Chapter 4. Working with Variables,
    Mixins, and Functions"), *Working with Variables, Mixins, and Functions*, where
    we created a simple web page using some Less functions? Well, we''re going to
    add a menu to that page and when we''re done, it will look something similar to
    this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以更进一步，给菜单添加一些有用的效果；我们至少可以动画下拉动作，使它们滑入得更加优雅。为了做到这一点，我们将回顾书中早期的一个练习——记得，在[第4章](part0041_split_000.html#page
    "第4章. 使用变量、混入和函数")，*使用变量、混入和函数*中，我们创建了一个使用一些Less函数的简单网页？好吧，我们将在这个页面上添加一个菜单，完成后，它将看起来类似于这个：
- en: '![Creating animated menus](img/00124.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![创建动画菜单](img/00124.jpeg)'
- en: 'Okay, let''s make a start:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们开始吧：
- en: For this exercise, we need a copy of the code download that accompanies this
    book; from it, extract a copy of `menus.html`. This contains a copy of the code
    from [Chapter 4](part0041_split_000.html#page "Chapter 4. Working with Variables,
    Mixins, and Functions"), *Working with Variables, Mixins, and Functions*, with
    the additional markup for our menus and some cosmetic changes to import Less files.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个练习，我们需要这本书附带的代码下载副本；从中，提取`menus.html`的副本。它包含来自[第4章](part0041_split_000.html#page
    "第4章. 使用变量、混入和函数")，*使用变量、混入和函数*的代码副本，以及为我们菜单添加的额外标记和一些对导入Less文件的细微更改。
- en: 'Next, crack open a text editor of your choice and add the following code to
    a new file—we''ll break it down and go through it section by section, beginning
    with the main container for our menu:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开你选择的文本编辑器，并将以下代码添加到一个新文件中——我们将逐节分析它，从我们的菜单的主要容器开始：
- en: '[PRE12]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next come the top-level menu entries:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是顶级菜单项：
- en: '[PRE13]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'These entries need to be turned into links; so, go ahead and add in this style
    rule:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些条目需要变成链接；所以，请继续添加这个样式规则：
- en: '[PRE14]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Some of our submenus have second-level submenus, so we need to cater to these
    submenus in our styling:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些我们的子菜单有二级子菜单，所以我们需要在我们的样式中考虑到这些子菜单：
- en: '[PRE15]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This style caters to our first-level submenus:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这种样式适用于我们的第一级子菜单：
- en: '[PRE16]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Last, but by no means least—this provides the container for our second-level
    submenus:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，但绝对不是最不重要的——这为我们的二级子菜单提供了容器：
- en: '[PRE17]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We need an arrow to tell the users of our submenus, so let''s add an arrow
    now:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个箭头来告诉子菜单的用户，所以现在让我们添加一个箭头：
- en: '[PRE18]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Save the file as `menus.less`. Our `menus.html` file already has a link to it,
    along with a link to `base.less`; the latter contains the original code from [Chapter
    4](part0041_split_000.html#page "Chapter 4. Working with Variables, Mixins, and
    Functions"), *Working with Variables, Mixins, and Functions*, but in a suitably
    renamed file.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`menus.less`。我们的`menus.html`文件已经有一个链接到它，还有一个链接到`base.less`；后者包含来自[第4章](part0041_split_000.html#page
    "第4章. 使用变量、混入和函数")，*使用变量、混入和函数*的原始代码，但已适当地重命名文件。
- en: At this point, if we preview the results, we can see the new menu, as shown
    in the screenshot at the start of this exercise.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，如果我们预览结果，我们可以看到新的菜单，如图所示，这是本练习开始时的截图。
- en: So, what have we done here? In this instance, we've kept it very simple; most
    of the styles in `menus.less` are there to provide the basic styles to render
    our menu.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们在这里做了什么？在这个例子中，我们保持了非常简单；`menus.less`中的大多数样式都是为了提供基本的样式来渲染我们的菜单。
- en: We've added three transition statements in though to add a subtle touch to our
    menu so that they each glide in more smoothly and then suddenly appear. Remember,
    animating elements can provide that extra sense of dynamism to a site; in this
    instance, if the transform styles were not understood, then the menus will still
    work but will not render so gracefully on the screen.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了三个过渡语句，以给我们的菜单添加微妙的触感，使它们每个都能更平滑地滑入，然后突然出现。记住，动画元素可以为网站提供额外的动态感；在这个例子中，如果变换样式不被理解，那么菜单仍然可以工作，但不会在屏幕上优雅地渲染。
- en: Libraries using Less
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Less的库
- en: Over the last few pages, we've created some great demos of varying complexity—they
    show off something of what can be done with animations and how we can use Less.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几页中，我们创建了一些不同复杂性的优秀演示——它们展示了可以使用动画做什么，以及我们如何使用 Less。
- en: The trouble is, there's one small but crucial problem here. How many of you
    have noticed that we've created each demo from scratch, with all the mixins included?
    I thought so, one of the precepts of Less is DRY or Don't Repeat Yourself.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，这里有一个小但关键的问题。有多少人注意到我们是从头开始创建每个演示的，包括所有的混合？我想是这样，Less 的一个原则是 DRY（不要重复自己）。
- en: If we take a look back at [Chapter 4](part0041_split_000.html#page "Chapter 4. Working
    with Variables, Mixins, and Functions"), *Working with Variables, Mixins, and
    Functions*, one of the subjects we covered was the use of external libraries within
    our code. Doing this means that we can avoid the need to write lots of mixins—while
    our examples here might have been a little too simple to warrant the use of an
    external library, we will definitely need to use at least one external library
    in a more complex site.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回顾一下[第 4 章](part0041_split_000.html#page "第 4 章。使用变量、混合和函数")，*使用变量、混合和函数*，我们讨论的主题之一是在我们的代码中使用外部库。这样做意味着我们可以避免编写大量的混合——虽然我们这里的例子可能过于简单，不足以证明使用外部库的必要性，但在更复杂的网站上我们肯定需要至少使用一个外部库。
- en: 'Thankfully, we can continue the same precept of DRY when working with animations;
    there are a number of Less-based libraries available that handle animation properties
    (and this includes both transitions and transforms):'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，当处理动画时，我们可以继续使用 DRY（不要重复自己）的原则；有一些基于 Less 的库可以处理动画属性（这包括过渡和变换）：
- en: LESS Prefixer ([http://lessprefixer.com/](http://lessprefixer.com/))
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LESS Prefixer ([http://lessprefixer.com/](http://lessprefixer.com/))
- en: More-or-less ([http://more-or-less.org/](http://more-or-less.org/))
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: More-or-less ([http://more-or-less.org/](http://more-or-less.org/))
- en: Animate.less ([https://github.com/machito/animate.less](https://github.com/machito/animate.less))
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Animate.less ([https://github.com/machito/animate.less](https://github.com/machito/animate.less))
- en: LESS Hat ([https://github.com/madebysource/lesshat](https://github.com/madebysource/lesshat))
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LESS Hat ([https://github.com/madebysource/lesshat](https://github.com/madebysource/lesshat))
- en: Bootstrap's LESS ([https://github.com/twbs/bootstrap/](https://github.com/twbs/bootstrap/))
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap 的 LESS ([https://github.com/twbs/bootstrap/](https://github.com/twbs/bootstrap/))
- en: LESS Elements ([http://www.lesselements.com/](http://www.lesselements.com/))
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LESS Elements ([http://www.lesselements.com/](http://www.lesselements.com/))
- en: We can even go one step further—if there isn't a library available in Less that
    is to your liking, then we can always use a plain CSS library.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以更进一步——如果 Less 中没有你喜欢的库，我们总是可以使用一个普通的 CSS 库。
- en: 'The trick here is to resave it as a Less file and incorporate it in the usual
    manner. Over time, we can then convert it piecemeal as our skills improve. The
    beauty of this is that Less will still compile the original version as normal—don''t
    forget, Less is after all a superset of CSS. With this in mind, let''s take a
    look at a few examples of pure CSS animation libraries:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的技巧是将它保存为 Less 文件，并以通常的方式将其合并。随着时间的推移，我们可以逐步将其转换为我们的技能提高。这种方法的优点是 Less 仍然会以正常的方式编译原始版本——别忘了，毕竟
    Less 是 CSS 的超集。考虑到这一点，让我们看看一些纯 CSS 动画库的例子：
- en: Magic CSS ([https://github.com/miniMAC/magic](https://github.com/miniMAC/magic))
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 魔法 CSS ([https://github.com/miniMAC/magic](https://github.com/miniMAC/magic))
- en: Animate.css ([https://github.com/daneden/animate.css](https://github.com/daneden/animate.css))
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Animate.css ([https://github.com/daneden/animate.css](https://github.com/daneden/animate.css))
- en: Effeckt.css ([https://github.com/h5bp/Effeckt.css](https://github.com/h5bp/Effeckt.css)))
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Effeckt.css ([https://github.com/h5bp/Effeckt.css](https://github.com/h5bp/Effeckt.css)))
- en: Now that we've seen the details of some of the libraries we could use, let's
    take a moment to try converting one of them to Less. I hear you ask, "Why should
    I do it?" Simple, while there are some good Less libraries available, you might
    as well find a CSS animation library that is more to your liking but that doesn't
    have a Less version available. If you do, then we need to convert it to use Less!
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了一些我们可以使用的库的细节，让我们花点时间尝试将其中之一转换为 Less。我听到你问，“我为什么要这样做？”简单，虽然有一些好的 Less
    库可用，但你可能会找到一个你更喜欢的 CSS 动画库，但没有 Less 版本。如果你找到了，那么我们就需要将其转换为使用 Less！
- en: Converting from other libraries
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从其他库转换
- en: The beauty about Less is that it is a superset of CSS—this means that the conversion
    of an existing CSS library to its Less equivalent is easier than it might first
    seem. The trick behind it is all in the planning—to prove this, let's work through
    a simple example using the Magic CSS animation library.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Less的美丽之处在于它是CSS的超集——这意味着将现有的CSS库转换为它的Less等价物比最初看起来要容易。其背后的技巧全在于规划——为了证明这一点，让我们通过使用Magic
    CSS动画库的简单示例来操作。
- en: Let's begin by downloading a copy of the library—we can do this by browsing
    to [https://raw.githubusercontent.com/miniMAC/magic/master/magic.css](https://raw.githubusercontent.com/miniMAC/magic/master/magic.css)
    and then saving a copy locally. Open a copy of `magic.css` in the text editor
    of your choice and then resave it as `magic.less`—that's it!
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从下载库的副本开始——我们可以通过浏览到[https://raw.githubusercontent.com/miniMAC/magic/master/magic.css](https://raw.githubusercontent.com/miniMAC/magic/master/magic.css)并保存本地副本来完成此操作。使用你选择的文本编辑器打开`magic.css`的副本，然后将其重新保存为`magic.less`——就这样！
- en: Sorry to disappoint you if you were expecting more; technically though, this
    is the minimum requirement to convert a library to its Less equivalent. We can
    then compile this using Crunch!, or if you have configured Sublime Text as detailed
    in [Chapter 2](part0025_split_000.html#page "Chapter 2. Building a Less Development
    Toolkit"), *Building a Less Development Toolkit*, then the compilation will have
    taken place to the point of saving your work.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你期待更多，我很抱歉让你失望；从技术上讲，这是将库转换为它的Less等价物的最低要求。然后我们可以使用Crunch!编译它，或者如果你已经按照[第2章](part0025_split_000.html#page
    "第2章. 构建Less开发工具包")中的详细说明配置了Sublime Text，那么编译将在你保存工作的时候完成。
- en: 'Now, we could stay with this, but…there''s a fair amount of repetition in our
    code, which isn''t ideal; we can definitely do better. Let''s fix the repetition
    now:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以保持这个状态，但……我们的代码中有相当多的重复，这并不理想；我们肯定可以做得更好。现在让我们解决这个重复问题：
- en: Create a new file and save it as `keyframes.less` in the same folder as the
    original `magic.less` file.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件，并将其保存为与原始`magic.less`文件相同的文件夹中的`keyframes.less`。
- en: Look for `@-moz-keyframes magic {` on or around line 468—select from this line
    down to the end, which will be on or around line 4595.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第468行或附近查找`@-moz-keyframes magic {`——从这一行选择到末尾，这将是在第4595行或附近。
- en: Cut and paste this in the `keyframes.less` file you've just created and then
    save the file.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容复制粘贴到您刚刚创建的`keyframes.less`文件中，然后保存文件。
- en: 'Revert to `magic.less`. You need to import the new file you''ve just created;
    so, go ahead and add this line at the top:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到`magic.less`。你需要导入你刚刚创建的新文件；所以，请继续在顶部添加以下行：
- en: '[PRE19]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can also improve the animation classes by adding the following lines immediately
    below the `@import` statement:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以通过在`@import`语句下方立即添加以下行来改进动画类：
- en: '[PRE20]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now comes the tedious part: you need to convert each of your animation classes
    to use the new mixin. Let''s take the first, which is `.magictime`:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在来到了繁琐的部分：你需要将每个动画类转换为使用新的mixin。让我们以第一个为例，它是`.magictime`：
- en: '[PRE21]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We can easily convert the animation classes—the trick behind this is to use
    **Search and Replace** within a tool such as Sublime Text. We can update both
    the `animation-duration` and `animation-fill-mode` lines to use the Less mixin
    and then remove the remaining lines.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以轻松地将动画类转换过来——这个技巧在于使用诸如Sublime Text之类的工具中的**搜索和替换**。我们可以更新`animation-duration`和`animation-fill-mode`行以使用Less
    mixin，然后删除剩余的行。
- en: 'Once the search and replace work has been completed, the remaining lines can
    be removed completely. We will end up with this as the first example:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦完成搜索和替换工作，剩余的行可以完全删除。我们将得到以下作为第一个示例：
- en: '[PRE22]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We can then use the same process until we've converted all the animation classes
    within `magic.less`.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用相同的过程，直到将`magic.less`中的所有动画类都转换完毕。
- en: 'At this point, we will have a half-converted CSS file—this will work perfectly
    well. However, we can use the same principles to convert the `keyframes.less`
    file at the same time—this is something that I will leave for you to work out!
    Hint: there''s an example in the code download, if you really get stuck…'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们将有一个半转换的CSS文件——这将完美地工作。然而，我们可以使用同样的原则同时转换`keyframes.less`文件——这将是留给你自己解决的问题！提示：代码下载中有一个示例，如果你真的卡住了...
- en: Using vendor prefixes – a warning
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用供应商前缀——一个警告
- en: 'Having said this, there is one important point we must visit: we''ve spent
    all this time converting the files, yet we''re potentially following a bad practice!
    Huh—how does this work, I hear you ask?'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我们必须关注的一个重要观点是：我们花了这么多时间转换文件，但我们可能正在遵循一个坏习惯！嗯——你怎么看待这个问题，我听到你问？
- en: Well, some of you will argue that this process is an antipattern—a practice
    that should not be followed, as it can make the CSS more verbose than it really
    needs to be.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，有些人会争论这个过程是一个反模式——一种不应该遵循的实践，因为它可能会使CSS比实际需要的更冗长。
- en: Note
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on anti-patterns, you can refer to Mark Daggett's useful
    article that is worth a read and is available at [http://markdaggett.com/blog/2011/12/04/css-anti-patterns/](http://markdaggett.com/blog/2011/12/04/css-anti-patterns/).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 关于反模式，你可以参考Mark Daggett的有用文章，值得一读，可在[http://markdaggett.com/blog/2011/12/04/css-anti-patterns/](http://markdaggett.com/blog/2011/12/04/css-anti-patterns/)找到。
- en: We can add to this, as vendor prefixes will come and go; moving them into one
    file may help reduce the amount of code we need to write, but it will assume that
    vendor prefixes remain the same for all the properties. This won't be the case—the
    trouble is, we can't remove any one of them until such time that none of the animation
    properties need it, and that is not likely to be for some time!
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步补充，因为供应商前缀会来来去去；将它们移动到一个文件中可能会帮助我们减少需要编写的代码量，但会假设供应商前缀对所有属性都是相同的。这不会是事实——问题是，我们无法在动画属性不再需要它们之前移除任何一个，而这可能还需要一段时间！
- en: I've used the process here purely to illustrate how it can be done—it doesn't
    mean that it should be done. A better process is to use an Autoprefixer, such
    as Alejandro Beltrán's Autoprefixer, which is available at [https://github.com/ai/autoprefixer](https://github.com/ai/autoprefixer).
    There is a plugin available for Autoprefixer to allow it to work in Sublime Text—this
    can be downloaded from [https://github.com/sindresorhus/sublime-autoprefixer](https://github.com/sindresorhus/sublime-autoprefixer).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里使用这个过程纯粹是为了说明它是如何完成的——这并不意味着它应该这样做。更好的做法是使用Autoprefixer，例如Alejandro Beltrán的Autoprefixer，它可以在[https://github.com/ai/autoprefixer](https://github.com/ai/autoprefixer)找到。有一个Autoprefixer的插件可以允许它在Sublime
    Text中工作——这个插件可以从[https://github.com/sindresorhus/sublime-autoprefixer](https://github.com/sindresorhus/sublime-autoprefixer)下载。
- en: 'Okay, let''s take a break from coding for a moment and move on. We''ve spent
    some time using Less to create our animations and converting some from CSS. There
    is one nagging question though, which I am sure you will be asking too: is using
    CSS really any better than using JavaScript, or is there more to it than what
    it first seems?'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们暂时放下编码，继续前进。我们花了一些时间使用Less来创建动画，并将一些从CSS转换过来。不过，有一个让人烦恼的问题，我相信你们也会问：使用CSS真的比使用JavaScript更好，还是其中还有更多我们最初没有意识到的内容？
- en: Using CSS or JavaScript
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CSS或JavaScript
- en: 'If you''ve spent time using JavaScript (and more likely, jQuery), then you
    will know that we can use it to produce some complex animations. Achieving the
    same results in CSS might be a little bit of an eye-opener for some, but they
    may ask: which is better? If you thought CSS, then you''d be right…and wrong!
    Let me explain.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经使用过JavaScript（更有可能，jQuery），那么你就会知道我们可以用它来制作一些复杂的动画。在CSS中实现相同的效果可能会让一些人眼前一亮，但他们可能会问：哪个更好？如果你认为是CSS，那么你是对的……也是错的！让我来解释一下。
- en: Conventional wisdom has always said that CSS is better—after all, JavaScript
    and jQuery use custom animation handlers that will repeat code between 30 and
    60 times a second. This puts more pressure on a browser than a browser just running
    pure CSS.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 传统观念一直认为CSS更好——毕竟，JavaScript和jQuery使用自定义动画处理程序，这些处理程序每秒会在30到60次之间重复代码。这会给浏览器带来比仅运行纯CSS更大的压力。
- en: However, lots of people have argued in favor of either; there are clear arguments
    for or against using either technology in a site. For example, in a post for the
    CSS-Tricks site, Jack Doyle (the creator of the professional animation library
    GSAP), puts forth a detailed case on why using CSS3 animations isn't always the
    right way forward; CSS3 still has a long way to go to match the likes of Flash.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，很多人都在为其中任何一个技术辩护；在网站上使用这两种技术都有明确的论点和反对意见。例如，在CSS-Tricks网站上，Jack Doyle（专业动画库GSAP的创建者）详细阐述了为什么使用CSS3动画并不总是正确的方向；CSS3还有很长的路要走才能与Flash相媲美。
- en: The developer, David Walsh, has written an equally useful article that also
    explains why there might be cases where we should use CSS or JavaScript and that
    limitations in the former might require use of the latter. However, to really
    turn the tables, head over to [http://css3.bradshawenterprises.com/blog/jquery-vs-css3-transitions/](http://css3.bradshawenterprises.com/blog/jquery-vs-css3-transitions/);
    you can see a great demo that proves JavaScript libraries, such as jQuery, actually
    perform worse than CSS when they are used to animate lots of elements!
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者David Walsh已经写了一篇同样有用的文章，该文章还解释了为什么可能会有一些情况下我们应该使用CSS或JavaScript，以及前者的限制可能需要使用后者。然而，要真正扭转局面，请转到[http://css3.bradshawenterprises.com/blog/jquery-vs-css3-transitions/](http://css3.bradshawenterprises.com/blog/jquery-vs-css3-transitions/)；你可以看到一个很好的演示，证明当使用jQuery等JavaScript库来动画化大量元素时，它们的性能实际上比CSS差。
- en: Note
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: David's article is available at [http://davidwalsh.name/css-js-animation](http://davidwalsh.name/css-js-animation);
    it is definitely worth a read!
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: David的文章可在[http://davidwalsh.name/css-js-animation](http://davidwalsh.name/css-js-animation)找到；它绝对值得一读！
- en: There is no right or wrong answer; the only way to be sure is to test your animations
    using tools such as Chrome's Developer toolbar to gauge the impact on the browser.
    A good rule of thumb though is to use vanilla CSS for animations and 2D transformations.
    If, however, your animation involves complicated timeline-based effects or you
    are moving a lot of elements, then JavaScript will be a better choice (animations
    frequently need to use more code than JavaScript to create the same effects).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 没有正确或错误答案；唯一确定的方法是使用Chrome开发者工具等工具测试你的动画，以评估对浏览器的影响。不过，一个很好的经验法则是使用纯CSS进行动画和2D变换。然而，如果你的动画涉及复杂的基于时间线的效果或你移动了大量元素，那么JavaScript将是一个更好的选择（动画通常需要比JavaScript更多的代码来创建相同的效果）。
- en: Only testing will tell whether you've made the right choice; start with seeing
    how much you can achieve in CSS, and fallback to using JavaScript if CSS can't
    handle your requirements or places too much demand on the browser to manage the
    effect efficiently.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 只有测试才能告诉你是否做出了正确的选择；从查看你能在CSS中实现多少开始，如果CSS无法处理你的需求或对浏览器管理效果效率要求过高，则回退到使用JavaScript。
- en: Note
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read the posting in full at [http://css-tricks.com/myth-busting-css-animations-vs-javascript/](http://css-tricks.com/myth-busting-css-animations-vs-javascript/).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://css-tricks.com/myth-busting-css-animations-vs-javascript/](http://css-tricks.com/myth-busting-css-animations-vs-javascript/)上阅读完整的帖子。
- en: Okay, let's move on; we've seen now why it is important to choose whether we
    need to use jQuery instead of using Less/CSS. Assuming that you are still using
    Less/CSS to provide some form of animation, there are some tips we can use to
    help improve the performance of these animations; so, let's take a look at those
    now.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们继续前进；我们已经看到了为什么选择是否需要使用jQuery而不是Less/CSS很重要。假设你仍然使用Less/CSS来提供某种形式的动画，有一些技巧我们可以使用来帮助提高这些动画的性能；现在让我们来看看这些技巧。
- en: Improving the animation's performance
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高动画的性能
- en: Working with CSS animations can be very rewarding, but we must be careful of
    the performance—if not done with care, animations can lead to unnecessary demands
    on the browser or can drain the battery power if you are working on a mobile device!
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 与CSS动画一起工作可以非常有成效，但我们必须注意性能——如果没有谨慎处理，动画可能会导致浏览器不必要的负担，或者在移动设备上工作时会耗尽电池电量！
- en: 'Unfortunately, a number of factors exist, which can affect performance and
    over which we may not have any control:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，存在许多可能影响性能的因素，我们可能无法控制：
- en: '**Browser performance**: All browsers behave differently with CSS3 and JavaScript.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览器性能**: 所有浏览器在处理CSS3和JavaScript时表现都不同。'
- en: '**GPU performance**: Some browsers now offload animation and transition operations
    to the GPU, in which case, the speed/performance is limited by the GPU. If you''re
    on an integrated Intel GPU, it''s not likely to be very smooth compared with a
    discrete NVIDIA or AMD graphics card.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GPU性能**: 一些浏览器现在将动画和过渡操作卸载到GPU上，在这种情况下，速度/性能受GPU限制。如果你使用的是集成Intel GPU，与NVIDIA或AMD独立显卡相比，它可能不会非常流畅。'
- en: '**CPU performance**: The main CPU will be used if the browser doesn''t offload
    to the GPU (and therefore, become the bottleneck).'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPU性能**: 如果浏览器没有卸载到GPU（因此成为瓶颈），主CPU将被使用。'
- en: '**The number of other tabs/windows opened in a browser**: Browsers often share
    processes across tabs, so other animations or CPU-consuming operations occurring
    in other tabs or browsers could create performance degradation.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览器中打开的其他标签页/窗口的数量**：浏览器通常在标签页之间共享进程，因此其他标签页或浏览器中发生的其他动画或CPU消耗操作可能会造成性能下降。'
- en: '**The use of gradients or box-shadow properties in our CSS code**: This can
    cause big performance hits, so avoid using these when animating elements.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在CSS代码中使用渐变或阴影属性**：这可能会对性能造成重大影响，因此在动画元素时避免使用这些属性。'
- en: Currently, the best way to improve performance is to limit the number of things
    that are being animated or transitioned at the same time.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，提高性能的最好方法是将同时进行动画或过渡的事物数量限制在最少。
- en: Forcing hardware acceleration for a CSS animation
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强制CSS动画使用硬件加速
- en: 'All is not lost though—we can force browsers to trigger hardware acceleration
    in the desktop or mobile browser by the addition of a simple property, `transform:
    translateZ(0);`, in our code. This will hand over the rendering to the GPU, not
    the CPU.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '虽然并非所有希望都破灭了——我们可以在代码中添加一个简单的属性`transform: translateZ(0);`来强制浏览器在桌面或移动浏览器中触发硬件加速。这将把渲染任务交给GPU，而不是CPU。'
- en: 'As an example, if we have a class called `.animate`, it would look similar
    to this:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有一个名为`.animate`的类，它看起来会像这样：
- en: '[PRE23]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Notice how we need to add the vendor prefixes for each browser? The `translateZ(0)`
    property is still experimental, so all the vendor prefixes are required to ensure
    full support. Browser support is good, but care needs to be taken, as overusing
    it can cause performance issues and battery draining.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们为什么需要为每个浏览器添加供应商前缀？`translateZ(0)`属性仍然是实验性的，因此需要所有供应商前缀以确保完全支持。浏览器支持良好，但需要注意，过度使用它可能会导致性能问题和电池耗尽。
- en: A good test to see whether performance is being impacted is to use Chrome's
    **Timeline** and **Profiles** option in the **Developer tools** option. Do check
    out the article by Addy Osmani at [http://addyosmani.com/blog/performance-optimisation-with-timeline-profiles/](http://addyosmani.com/blog/performance-optimisation-with-timeline-profiles/),
    where he talks about how to use development tools to gauge performance. It is
    2-3 years old, and there have been some changes in how development tools work,
    but the principles are still valid.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看性能是否受到影响的一个好方法是使用Chrome的**时间轴**和**配置文件**选项，在**开发者工具**选项中。请查看Addy Osmani在[http://addyosmani.com/blog/performance-optimisation-with-timeline-profiles/](http://addyosmani.com/blog/performance-optimisation-with-timeline-profiles/)上的文章，他讨论了如何使用开发工具来衡量性能。这篇文章已经2-3年了，开发工具的工作方式已经有所变化，但原则仍然是有效的。
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Animating elements on a web page or a site is like crossing a fine line—one
    wrong foot can turn a site that looks stunning into a real dog's dinner of a mess
    that will turn off everyone who visits it! Throughout this chapter, we covered
    the basics of animation and saw how we can use Less to simplify the process. Before
    we move on to the next chapter, let's take a moment to recap what we learned.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页或网站上对元素进行动画处理就像走钢丝——一步走错就能将一个看起来令人惊叹的网站变成一个真正的狗食般的混乱，这会让所有访问者都感到沮丧！在本章中，我们介绍了动画的基础知识，并看到了如何使用Less简化这个过程。在我们进入下一章之前，让我们花点时间回顾一下我们学到了什么。
- en: We kicked off with a simple introduction to what makes a good animation before
    moving on to examine how a CSS animation works. We then explored the different
    types of animations before covering off the all-important browser support for
    the technology.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先简单介绍了什么是好的动画，然后转向检查CSS动画的工作原理。然后我们探讨了不同类型的动画，最后涵盖了这项技术至关重要的浏览器支持。
- en: Next, we took a look at how we can simplify the creation of animation styles
    by reworking a simple animation demo to use Less. We then moved on to create a
    more real-world example in the form of a simple menu demo, which uses transitions
    to animate the drop-down elements. With the demo completed, we moved on to examine
    how we can use Less libraries to help with our animation styling, and saw that
    the principles from [Chapter 4](part0041_split_000.html#page "Chapter 4. Working
    with Variables, Mixins, and Functions"), *Working with Variables, Mixins, and
    Functions*, could easily be applied when developing animation styles. We covered
    a few examples of CSS animation libraries before taking a look at how we could
    convert one of them to its Less equivalent.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们研究了如何通过重新设计一个简单的动画演示来使用Less，从而简化动画样式的创建。然后我们转向创建一个更贴近现实世界的例子，即一个简单的菜单演示，它使用过渡来动画化下拉元素。在完成演示后，我们继续探讨如何使用Less库来帮助我们进行动画样式设计，并看到[第4章](part0041_split_000.html#page
    "第4章. 使用变量、混入和函数")中*使用变量、混入和函数*的原则在开发动画样式时可以轻松应用。在介绍了一些CSS动画库的例子之后，我们查看如何将其中之一转换为它的Less等价物。
- en: Before continuing, we discussed the importance of monitoring vendor prefixes
    and how some see the use of vendor mixins as an antipractice that should be discouraged.
    We then discussed how performance can be impacted by some factors that are outside
    our control, before taking a look at how we can enable hardware acceleration to
    improve performance.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们讨论了监控供应商前缀的重要性以及有些人如何看待使用供应商混入（mixins）作为一种应被劝阻的反实践。然后我们讨论了性能可能受到一些我们无法控制的因素的影响，在查看我们如何启用硬件加速以提升性能之前。
- en: 'Phew! What a tour! However, it''s not over yet: in the final chapter of this
    book, we''ll take a look at how you can contribute to and help extend the Less
    library. After all, it wouldn''t be where it is today without our help…!'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！这是一次多么精彩的旅行！然而，这还没有结束：在这本书的最后一章，我们将探讨你如何为Less库做出贡献并帮助其扩展。毕竟，没有我们的帮助，它今天不可能达到这样的地位…！
