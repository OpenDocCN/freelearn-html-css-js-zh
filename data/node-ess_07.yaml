- en: Chapter 7. Socket.IO
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 Socket.IO
- en: Simple HTTP is great for things that don't need real-time data, but what about
    when we need to know about things as they happen. For example, if we were creating
    a website that had a chat interface or similar?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的HTTP非常适合不需要实时数据的情况，但是当我们需要在事件发生时得知情况时怎么办。例如，如果我们正在创建一个具有聊天界面或类似功能的网站呢？
- en: This is when something like Web sockets come into play. Web sockets are usually
    referred to as WebSockets and are full duplex or two-way low-latency communication
    channels. They are generally used by messaging applications and games where messages
    need to be relayed between the server and client. There is a really handy `npm`
    module called `socket.io`, which can add Web sockets to any Node.js application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Web sockets发挥作用的时候。Web sockets通常被称为WebSockets，是全双工或双向低延迟通信通道。它们通常被用于消息应用程序和游戏，其中需要在服务器和客户端之间中继消息。有一个非常方便的`npm`模块叫做`socket.io`，它可以为任何Node.js应用程序添加Web
    sockets。
- en: 'To install it we just need to run:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装它，我们只需要运行：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Socket.IO can be set up very simply to listen for connections. First, we want
    to be able to serve out a static html page to run client side code with:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Socket.IO可以非常简单地设置以监听连接。首先，我们希望能够提供一个静态的html页面来运行客户端代码：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, lets create an HTML file as well, named `index.html`, in the same directory:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在同一目录中创建一个名为`index.html`的HTML文件：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s run our example and ensure that we get our page, we should be able to
    see **WS Example** on screen. Now, to add socket support to our application we
    just need to require `socket.io` and specify what `http` server to listen with
    to `IOServer`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行我们的示例，并确保我们得到我们的页面，我们应该能够在屏幕上看到**WS Example**。现在，要为我们的应用程序添加socket支持，我们只需要要求`socket.io`并指定要使用`IOServer`进行监听的`http`服务器：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, whenever there is a new socket connection over `8080` we will get a `connection`
    event on `io:`
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当有一个新的socket连接在`8080`上，我们将在`io`上收到一个`connection`事件：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Lets add some code to the client. Socket.IO provides us with a client library
    and they expose this through the endpoint `/socket.io/socket.io.js`. This is included
    in the preceding `index.html` file.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向客户端添加一些代码。Socket.IO为我们提供了一个客户端库，并通过端点`/socket.io/socket.io.js`公开了这一点。这已经包含在前面的`index.html`文件中。
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: All the client side code is contained within the second `script` tag of the
    `index.html` file.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所有客户端代码都包含在`index.html`文件的第二个`script`标签中。
- en: To create a connection with the server all we need to do is call `io.connect`
    and pass the location. This will return a socket for us with which we can communicate
    to our server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要与服务器建立连接，我们只需要调用`io.connect`并传递位置。这将为我们返回一个socket，我们可以用它与服务器通信。
- en: 'We are using the client provided by Socket.IO here, as it will detect whether
    WebSockets are available, and if possible use them. Otherwise, it will utilize
    other methods such as polling, which makes sure that it works everywhere rather
    than just on evergreen browsers:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用了Socket.IO提供的客户端，因为它会检测WebSockets是否可用，如果可能的话会使用它们。否则，它将利用其他方法，如轮询，以确保它可以在任何地方工作，而不仅仅是在现代浏览器上：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will use a `p` element to log messages to the screen with. We can do that
    with this code, then all we need to do is call `logScreen`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个`p`元素来将消息记录到屏幕上。我们可以使用这段代码来做到这一点，然后我们只需要调用`logScreen`：
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once a connection is made, just like on the server side a `connection` event
    is emitted, we can listen to this using `on`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦建立连接，就像在服务器端一样，会发出一个`connection`事件，我们可以使用`on`来监听这个事件：
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we can run our server once we navigate to `http://localhost:8080`. You
    should be able to see **Connection!** showing up:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦我们导航到`http://localhost:8080`，我们就可以运行我们的服务器。您应该能够看到**Connection!**显示出来：
- en: '![Socket.IO](img/B04729_07_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![Socket.IO](img/B04729_07_01.jpg)'
- en: 'To receive a message on server side, we just need to listen for the `message`
    event. For now, we will just echo the message back:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要在服务器端接收消息，我们只需要监听`message`事件。现在，我们将简单地将消息回显：
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On the client side, we just need to call `send` to send a message and we want
    to do this inside our connection event. The `api` on each side is very similar
    to each other, as you can see:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，我们只需要调用`send`来发送消息，我们希望在连接事件中执行此操作。双方的`api`非常相似，正如你所看到的：
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'On the client side, we also want to listen for messages and log them to the
    screen:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，我们还希望监听消息并将其记录到屏幕上：
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once we restart the server and refresh our page, we should be able to see an
    additional **Hello** message appear on screen.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们重新启动服务器并刷新页面，我们应该能够看到屏幕上出现一个额外的**Hello**消息。
- en: '[PRE11]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This happens because the server can now send the client packets of data. It
    also means that we can update the client at any time. For example, every second
    we can send an update to the client:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为服务器现在可以向客户端发送数据包。这也意味着我们可以随时更新客户端。例如，我们可以每秒向客户端发送一个更新：
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, when we restart our server we should be able to see an update message every
    second.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们重新启动服务器时，我们应该能够每秒看到一个更新消息。
- en: You might have noticed that you didn't need to refresh your webpage for the
    connection to be opened again. This is because `socket.io` transparently keeps
    our connections "alive" as well as reconnecting if needed. This takes all the
    pain out of using sockets, as we have none of these troubles.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，您无需刷新网页即可重新打开连接。这是因为`socket.io`会透明地保持我们的连接“活动”，并在需要时重新连接。这消除了使用sockets的所有痛苦，因为我们没有这些麻烦。
- en: Rooms
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 房间
- en: Socket.IO also has the concept of rooms, where multiple clients can be grouped
    into different rooms. To emulate this, all you will need to do is navigate to
    `http://localhost:8080` in multiple tabs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Socket.IO还有房间的概念，多个客户端可以被分组到不同的房间中。要模拟这一点，您只需要在多个选项卡中导航到`http://localhost:8080`。
- en: 'Once a client connects, we need to call the `join` method to tell the socket
    what room to be in. If we wish to do something such as a group chat with specific
    users only, we need have a room identifier in a database or create one. For now
    we will just have everyone join the same room:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦客户端连接，我们需要调用`join`方法告诉socket要加入哪个房间。如果我们希望做一些特定用户的群聊之类的事情，我们需要在数据库中有一个房间标识符或创建一个。现在我们只是让每个人加入同一个房间：
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For every tab we open, we should see a message that we have joined a room:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们打开一个标签页，我们都应该看到一个消息，告诉我们已经加入了一个房间：
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With this, we can broadcast a message to the entire room. Let''s do this every
    time someone joins. Within the join callback:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们可以向整个房间广播消息。每次有人加入时让我们这样做。在加入回调中：
- en: '[PRE15]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you look in your browser, with each connection the other clients get a notification
    that someone else has joined:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在浏览器中查看，每次连接时其他客户端都会收到通知，有人加入了：
- en: '[PRE16]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is great, we can now communicate almost directly between browsers!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这很棒，我们现在几乎可以直接在浏览器之间通信了！
- en: 'If we want to leave a room, all we need to do is call `leave`, we will broadcast
    this before we call the function:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想离开一个房间，我们只需要调用`leave`，在调用该函数之前我们将进行广播：
- en: '[PRE17]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'While running this, you will not see any messages from another client because
    you are leaving right away: however, if you were to put a delay on this you might
    see another client come and go:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，您不会看到来自另一个客户端的任何消息，因为您立即离开了：但是，如果您对此进行延迟，您可能会看到另一个客户端进入和离开：
- en: '[PRE18]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Authentication
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证
- en: For authentication, we can use the same method that we used with our HTTP server
    and we can accept a JSON Web Token
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于认证，我们可以使用与HTTP服务器相同的方法，并且我们可以接受JSON Web Token
- en: In these examples, for simplicity we will just have a single HTTP route to login.
    We will sign a JWT that we will later authenticate by checking the signature
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，为了简单起见，我们将只有一个单一的HTTP路由来登录。我们将签署一个JWT，稍后我们将通过检查签名来进行身份验证
- en: We need to install a couple of extra `npm` modules for this; we will include
    `chance` so that we can generate some random data.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装一些额外的`npm`模块；我们将包括`chance`，以便我们可以生成一些随机数据。
- en: '[PRE19]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'First, we are going to need a route to `login`. We will modify our handler
    to watch for the url `/login`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个到`login`的路由。我们将修改我们的处理程序以监视`/login`的URL：
- en: '[PRE20]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Our new function `generateToken` will create a JSON Web Token with some random
    data using `chance`. We will also need a secret for our tokens:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新函数`generateToken`将使用`chance`创建一个JSON Web Token，并且我们还需要一个令牌的密钥：
- en: '[PRE21]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, whenever we request `http://localhost:8080/login` we will receive a token
    that we can use:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当我们请求`http://localhost:8080/login`时，我们将收到一个可以使用的令牌：
- en: '[PRE22]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can enter this into the debugger at [http://jwt.io/](http://jwt.io/) and
    see the contents:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其输入到[http://jwt.io/](http://jwt.io/)的调试器中并查看内容：
- en: '[PRE23]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Awesome, we have a token and a random user being generated for us. Now, we
    can use this to authenticate our users. Socket.IO has a method on the server to
    do this and we just need to pass a handler type function to it. This is where
    `socketio-jwt` comes in, we pass it our secret and it will ensure it is a real
    token, pretty simple:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了，我们有一个令牌和一个为我们生成的随机用户。现在，我们可以用这个来验证我们的用户。Socket.IO在服务器上有一个方法来做到这一点，我们只需要向其传递一个处理程序类型函数。这就是`socketio-jwt`的作用，我们向其传递我们的密钥，它将确保它是一个真实的令牌，非常简单：
- en: '[PRE24]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, when we try to connect to our server from the client it will never emit
    the `connect` event, as our client isn't authenticated. This is exactly what we
    want.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们尝试从客户端连接到我们的服务器时，它永远不会发出`connect`事件，因为我们的客户端没有经过身份验证。这正是我们想要的。
- en: 'We first want to wrap up our Socket.IO code (we will call this later); we also
    want to give it a parameter of `token`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先想要包装我们的Socket.IO代码（稍后我们将调用它）；我们还想给它一个`token`参数：
- en: '[PRE25]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, we will create a `login` function, this will request the login URL and
    then pass the response to the `socketIO` function, as shown:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个`login`函数，这将请求登录URL，然后将响应传递给`socketIO`函数，如下所示：
- en: '[PRE26]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then we want to call the login function:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们想调用登录函数：
- en: '[PRE27]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We can pass the token on to the server by changing the `connect` call to pass
    a query string:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过更改`connect`调用以传递查询字符串来将令牌传递给服务器：
- en: '[PRE28]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now, when running our server and navigating to our client we should be able
    to connect—awesome! Since we have authenticated we can also respond with a personalized
    message for each user, inside our server-side `connection` event handler we will
    emit a message to the client.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们运行服务器并导航到我们的客户端时，我们应该能够连接 - 太棒了！由于我们已经经过身份验证，我们还可以针对每个用户响应个性化消息，在我们的服务器端`connection`事件处理程序内，我们将向客户端发出消息。
- en: 'Our socket will have a new property called `decoded_token`; using this we will
    be able to view the contents of our token:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的socket将有一个名为`decoded_token`的新属性；使用这个属性，我们将能够查看我们令牌的内容：
- en: '[PRE29]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once we join our room, we can tell the rest of the clients who have also joined:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们加入房间，我们可以告诉其他也加入的客户端：
- en: '[PRE30]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Socket.IO brings amazing capabilities to our applications. We can now instantly
    communicate with others, either individually or by broadcasting in a room. With
    the ability to identify users, we can record messages or the history of that user,
    ready to be served up by a RESTful API.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Socket.IO为我们的应用程序带来了惊人的功能。我们现在可以立即与其他人通信，无论是个别通信还是在房间中广播。通过识别用户的能力，我们可以记录消息或该用户的历史，准备通过RESTful
    API提供。
- en: We are now ready to build real-time applications!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经准备好构建实时应用程序了！
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为Bentham Chang准备，Safari ID bentham@gmail.com 用户编号：2843974 © 2015 Safari Books
    Online，LLC。此下载文件仅供个人使用，并受到服务条款的约束。任何其他使用都需要版权所有者的事先书面同意。未经授权的使用、复制和/或分发严格禁止并违反适用法律。保留所有权利。
