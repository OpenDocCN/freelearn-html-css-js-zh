- en: Chapter 4. Asynchronous Testing – AJAX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 异步测试 – AJAX
- en: Inevitably, there comes a time in every JavaScript application when asynchronous
    code needs to be tested.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个JavaScript应用程序中，不可避免地会有一个时刻需要测试异步代码。
- en: Asynchronous means that you cannot deal with it in a linear fashion—a function
    might return immediately after its execution, but the result will come later,
    usually through a callback.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 异步意味着你不能以线性方式处理它——一个函数可能在执行后立即返回，但结果会在稍后到来，通常是通过回调。
- en: 'This is a very common pattern while dealing with AJAX requests, for example,
    through jQuery:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理AJAX请求时，这是一个非常常见的模式，例如，通过jQuery：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this chapter, we are going to learn the different ways Jasmine allows us
    to write tests for asynchronous code.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习Jasmine允许我们以不同方式编写异步代码测试的不同方法。
- en: Acceptance criterion
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验收标准
- en: 'To demonstrate Jasmine support of asynchronous testing, we are going to implement
    the following acceptance criterion:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示Jasmine对异步测试的支持，我们将实现以下验收标准：
- en: Stock when fetched, should update its share price
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 股票在取回时，应更新其股价
- en: 'Using the techniques we have showed you until now, you could write this acceptance
    criterion in `StockSpec.js`, inside the `spec` folder file, as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们至今为止向您展示的技术，您可以在`spec`文件夹中的`StockSpec.js`文件中编写以下验收标准：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'That would lead to the implementation of the `fetch` function from the `Stock.js`
    file inside the `src` folder, as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致在`src`文件夹中的`Stock.js`文件中实现`fetch`函数，如下所示：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The important part in the preceding code is the `$.getJSON` call, an AJAX request
    expecting a JSON response containing an updated share price, such as:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码中的重要部分是`$.getJSON`调用，一个期望包含更新股价的JSON响应的AJAX请求，如下所示：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By now, you can see that we are stuck; in order to run this spec, we will need
    a server running.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可以看到我们陷入了困境；为了运行此规范，我们需要一个正在运行的服务器。
- en: Setting up the scenario
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置场景
- en: Since this book is all about JavaScript, we are going to create a very simple
    **Node.js** server to be used by the specs. Node.js is a platform that allows
    the development of network applications, such as web servers, using JavaScript.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这本书全部关于JavaScript，我们将创建一个非常简单的**Node.js**服务器，用于规范测试。Node.js是一个允许使用JavaScript开发网络应用程序的平台，例如Web服务器。
- en: In [Chapter 6](ch06.html "Chapter 6. Light Speed Unit Testing"), *Light Speed
    Unit Testing*, we are going to see alternative solutions to test AJAX requests
    without the need for a server. And in [Chapter 8](ch08.html "Chapter 8. Build
    Automation"), *Build Automation*, we are going to see how to use Node.js as a
    foundation for an advanced build system.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html "第6章. 光速单元测试")中，我们将看到测试AJAX请求而不需要服务器的替代解决方案。在[第8章](ch08.html
    "第8章. 构建自动化")中，我们将看到如何将Node.js作为高级构建系统的基础。
- en: Installing Node.js
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Node.js
- en: If you already have Node.js installed, you can skip to the next section.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了Node.js，您可以跳到下一节。
- en: 'There are installers available for Windows and Mac OS X. Perform the following
    steps to install Node.js:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了适用于Windows和Mac OS X的安装程序。按照以下步骤安装Node.js：
- en: Go to the Node.js website [http://nodejs.org/](http://nodejs.org/).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往Node.js网站[http://nodejs.org/](http://nodejs.org/)。
- en: Click on the **Install** button.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**按钮。
- en: Once the download is completed, execute the installer and follow the steps.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，运行安装程序并按照步骤操作。
- en: To check other installation methods and instructions on how to install Node.js
    on Linux distributions, check the official documentation at [https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查其他安装方法和有关如何在Linux发行版上安装Node.js的说明，请查看官方文档[https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager)。
- en: Once you are done, you should have the `node` and `npm` commands available on
    your command line.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你应该可以在命令行上使用`node`和`npm`命令。
- en: Coding the server
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写服务器代码
- en: 'For the purpose of learning how to write asynchronous specs, we are going to
    create a server that returns some fake data. Create a new file in the project''s
    root folder called `server.js` and add the following code to it:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习如何编写异步规范，我们将创建一个返回一些假数据的服务器。在项目的根目录中创建一个名为`server.js`的新文件，并将其中的以下代码添加到该文件中：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To handle the HTTP requests, we use **Express**, a Node.js web application framework.
    By reading the code, you can see that it defines a route to `/stocks/:symbol`,
    so it accepts requests such as `http://localhost:8000/stocks/AOUE` and responds
    with JSON data.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理 HTTP 请求，我们使用 **Express**，一个 Node.js 网络应用程序框架。通过阅读代码，您可以看到它定义了一个到 `/stocks/:symbol`
    的路由，因此它接受 `http://localhost:8000/stocks/AOUE` 这样的请求，并返回 JSON 数据。
- en: We also use the `express.static` module to serve the spec runner at `http://localhost:8000/SpecRunner.html`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用 `express.static` 模块在 `http://localhost:8000/SpecRunner.html` 上提供规范运行器。
- en: There is a requirement to circumvent the SOP. This is a policy that dictates,
    for security reasons, that AJAX requests aren't allowed to be performed on domains
    different than the application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个绕过 SOP 的要求。这是一项政策，出于安全原因，规定 AJAX 请求不允许在与应用程序不同的域上执行。
- en: This issue was first demonstrated while using HTML fixtures in [Chapter 3](ch03.html
    "Chapter 3. Testing Frontend Code"), *Testing Frontend Code*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题是在使用 HTML 固定值时首次在 [第 3 章](ch03.html "第 3 章。测试前端代码") *测试前端代码* 中演示的。
- en: 'Using the Chrome browser inspector, you can see errors in the console while
    opening the `SpecRunner.html` file with a `file://` protocol (basically, the way
    you''ve been doing until now):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Chrome 浏览器检查器，您可以在使用 `file://` 协议打开 `SpecRunner.html` 文件时在控制台中看到错误（基本上，这就是您到目前为止一直在做的方式）：
- en: '![Coding the server](img/B04138_04_01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![编写服务器代码](img/B04138_04_01.jpg)'
- en: This shows the same origin policy error
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了相同的源策略错误
- en: By serving the runner, and all of the application and test code under the same
    base URL, we prevent this problem from happening and are able to run the specs
    on any browser.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供运行器，以及所有应用程序和测试代码在相同的基 URL 下，我们防止了这个问题发生，并且能够在任何浏览器上运行规范。
- en: Running the server
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行服务器
- en: 'To run the server, first you need to install its dependencies (Express) using
    Node''s package manager. Inside the application root folder, run the `npm` command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器，首先您需要使用 Node 的包管理器安装其依赖项（Express）。在应用程序根文件夹内，运行 `npm` 命令：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This command will download Express and place it inside a new folder called `node_modules`
    inside the project folder.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将下载 Express 并将其放置在项目文件夹内名为 `node_modules` 的新文件夹中。
- en: 'Now you should be able to run the server by invoking the following `node` command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该能够通过调用以下 `node` 命令来运行服务器：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To check whether it is working, hit `http://localhost:8000/stocks/AOUE` on
    your browser, and you should receive the JSON response:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查它是否工作，请在您的浏览器中输入 `http://localhost:8000/stocks/AOUE`，您应该会收到 JSON 响应：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now that we have our server dependency working, we can get back to writing the
    spec.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经让服务器依赖项工作正常，我们可以回到编写规范。
- en: Writing the spec
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写规范
- en: With the server running, open your browser at `http://localhost:8000/SpecRunner.html`
    to see the results of our specs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器运行后，在 `http://localhost:8000/SpecRunner.html` 上打开您的浏览器，以查看我们的规范结果。
- en: 'You can see that even though the server is running, and the spec appears to
    be correct, it is failing. This is due to the fact that `stock.fetch()` is asynchronous.
    A call to `stock.fetch()` returns immediately, allowing Jasmine to run the expectations
    before the AJAX request is completed:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，尽管服务器正在运行，规范看起来似乎是正确的，但它失败了。这是因为 `stock.fetch()` 是异步的。对 `stock.fetch()`
    的调用会立即返回，允许 Jasmine 在 AJAX 请求完成之前运行预期：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To fix this, we need to embrace the asynchronicity of the `stock.fetch()` function
    and instruct Jasmine to wait for its execution before running the expectations.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要修复这个问题，我们需要接受 `stock.fetch()` 函数的异步性，并指导 Jasmine 在运行预期之前等待其执行。
- en: Asynchronous setups and teardowns
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步设置和清理
- en: In the example shown, we invoke the `fetch` function during the spec's setup
    (the `beforeEach` function).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在所显示的示例中，我们在规范的设置阶段（`beforeEach` 函数）中调用 `fetch` 函数。
- en: 'The only thing we need to do to identify that this setup step is asynchronous
    is add a `done` argument to its function definition:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的唯一一件事是，为了识别这个设置步骤是异步的，将其函数定义中添加一个 `done` 参数：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once Jasmine identifies this `done` argument, it passes as its value a function
    that must be called once the asynchronous operation is completed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Jasmine 识别出这个 `done` 参数，它就会传递一个函数作为异步操作完成后必须调用的值。
- en: 'So we could then pass this `done` function as a `success` callback of the `fetch`
    function:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以将这个 `done` 函数作为 `fetch` 函数的 `success` 回调传递：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'At the implementation, invoke it once the AJAX operation is completed:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现中，在 AJAX 操作完成后调用它：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That is all there is to it; Jasmine will wait for the AJAX operation to be completed
    and the test will pass.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是全部内容；Jasmine将等待AJAX操作完成，然后测试将通过。
- en: When required, it is also possible to have asynchronous `afterEach` definitions
    using the same `done` argument.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要时，也可以使用相同的`done`参数来定义异步的`afterEach`。
- en: Asynchronous specs
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步规格说明
- en: 'Another approach would be to have an asynchronous spec instead of an asynchronous
    setup. To demonstrate how this would work, we are going to need to rewrite our
    previous acceptance criteria:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是在异步设置中有一个异步的规格说明。为了演示这将如何工作，我们需要重写我们之前的验收标准：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Again, all we have to do is add a `done` argument to its function definition
    and invoke the `done` function once the test is done:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我们只需将其函数定义中添加一个`done`参数，并在测试完成后调用`done`函数即可：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The difference here is that we had to move the expectation for it to be inside
    the `success` callback right before invoking the `done` function.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的不同之处在于，我们必须将期望它完成的操作移动到在调用`done`函数之前的`success`回调中。
- en: Timeout
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超时
- en: When writing asynchronous specs, Jasmine will wait for 5 seconds, by default,
    for the `done` callback to be called, failing the spec if it is not called before
    this timeout.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当编写异步规格说明时，Jasmine默认会等待5秒钟，直到`done`回调被调用，如果在此超时之前没有调用，则规格说明将失败。
- en: In this contrived example, where the server was a simple stub returning static
    data, that timeout was not a problem, but there are situations where that default
    time is not enough to complete an asynchronous task.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个假设的例子中，服务器是一个简单的存根，返回静态数据，那个超时并没有问题，但有些情况下，默认时间不足以完成异步任务。
- en: Although it is not recommended to have long-running specs, it is nice to know
    there is a way around this default behavior by changing a simple configuration
    variable in Jasmine called `jasmine.DEFAULT_TIMEOUT_INTERVAL`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不建议有长时间运行的规格说明，但了解可以通过更改Jasmine中称为`jasmine.DEFAULT_TIMEOUT_INTERVAL`的简单配置变量来绕过这种默认行为，这很好。
- en: 'To make it take effect in the entire suite, one could set it at the `SpecHelper.js`
    file, as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要在整个套件中使其生效，可以在`SpecHelper.js`文件中设置它，如下所示：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To make it take effect over a single spec, change its value in `beforeEach`
    and restore it during `afterEach`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要使其在一个特定的规格说明中生效，请在`beforeEach`中更改其值，并在`afterEach`期间恢复它：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have seen how to test asynchronous code, a scenario common
    when testing server interactions (AJAX).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经了解了如何测试异步代码，这在测试服务器交互（AJAX）时是一个常见的场景。
- en: I have also presented you with the Node.js platform and used it to code a simple
    server to be used as a test fixture.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我还向您介绍了Node.js平台，并使用它编写了一个简单的服务器，用作测试工具。
- en: In [Chapter 6](ch06.html "Chapter 6. Light Speed Unit Testing"), *Light Speed
    Unit Testing*, we are going to see different solutions to AJAX testing—solutions
    that don't require a server running.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html "第6章。光速单元测试")中，*光速单元测试*，我们将看到不同的AJAX测试解决方案——这些解决方案不需要运行服务器。
- en: In the next chapter, we are going to learn about spies and how we can use them
    to perform behavior checking.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于间谍的知识，以及我们如何使用它们来执行行为检查。
