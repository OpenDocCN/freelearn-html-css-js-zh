- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: API Communication and Data Contracts in Microservices
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务中的 API 通信和数据合同
- en: When working with microservices architecture and Node.js, API communication
    and data contracts are some of the pillars of building a successful application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当与微服务架构和 Node.js 一起工作时，API 通信和数据合同是构建成功应用的一些支柱。
- en: We’ll start this chapter by understanding better how to work with APIs and data
    contracts in microservices with Node.js. Communicating between microservices through
    APIs involves establishing a clear contract for data exchange and defining the
    interface through which services interact with each other. By following these
    practices, you can establish effective communication between your microservices
    using APIs. This enables decoupling, scalability, and flexibility in your microservices
    architecture, allowing individual services to evolve independently while maintaining
    seamless interactions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始，更好地理解如何在 Node.js 中与微服务中的 API 和数据合同一起工作。通过 API 在微服务之间进行通信涉及建立明确的数据交换合同，并定义服务之间交互的接口。遵循这些实践，你可以通过
    API 在你的微服务之间建立有效的通信。这使你的微服务架构解耦、可扩展和灵活，允许单个服务独立演进，同时保持无缝的交互。
- en: By the end of this chapter, you will have learned how to communicate with APIs
    and data contracts in Node.js.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会如何在 Node.js 中与 API 和数据合同进行通信。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Defining API contracts and RESTful API design
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义 API 合同和 RESTful API 设计
- en: REST API libraries and API versioning
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST API 库和 API 版本控制
- en: Authentication and authorization and data validation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证、授权和数据验证
- en: Error handling and API documentation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误处理和 API 文档
- en: API testing and API gateway
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 测试和 API 网关
- en: Defining API contracts and RESTful API design
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义 API 合同和 RESTful API 设计
- en: In this section, we’re going to show how to define the API contracts for each
    microservice and follow the RESTful principles for designing your APIs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将展示如何为每个微服务定义 API 合同并遵循 RESTful 原则来设计你的 API。
- en: Defining API contracts
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义 API 合同
- en: 'API contracts microservices are the definitions of and agreements for how microservices
    communicate and interact with each other and external clients. An API contract
    specifies the format, structure, and rules of the data exchange between the service
    provider and the service consumer. Defining API contracts is a crucial step in
    designing microservices, ensuring clear communication and interoperability between
    different services. Here are its key components:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: API 合同微服务是微服务之间如何通信和相互交互以及与外部客户端的协议定义。API 合同指定了服务提供者和服务消费者之间数据交换的格式、结构和规则。定义
    API 合同是设计微服务的关键步骤，确保不同服务之间通信和互操作性清晰。以下是其关键组件：
- en: '**Endpoints and routes**: Clearly define the endpoints and routes for each
    service, specifying the URI paths through which different operations can be performed.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端点和路由**：明确定义每个服务的端点和路由，指定通过哪些 URI 路径可以执行不同的操作。'
- en: '`GET`, `POST`, `PUT`, `DELETE`, etc.) allowed for each endpoint. Define the
    purpose of each method and the expected behavior.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET`、`POST`、`PUT`、`DELETE` 等）允许每个端点。定义每个方法的目的和预期的行为。'
- en: '**Request and response formats**: Clearly define the expected request and response¤k
    formats. Specify the structure of data, required headers, and any authentication
    mechanisms.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求和响应格式**：明确定义预期的请求和响应格式。指定数据结构、所需头信息和任何认证机制。'
- en: '**Data types and validation**: Define the data types used in API requests and
    responses. Specify validation rules to ensure that data conforms to expected formats.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据类型和验证**：定义 API 请求和响应中使用的数据类型。指定验证规则以确保数据符合预期的格式。'
- en: '`200` for successful requests, `404` for not found, and `500` for server errors.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`200` 表示成功请求，`404` 表示未找到，`500` 表示服务器错误。'
- en: '**Authentication and authorization**: Specify the authentication and authorization
    mechanisms required to access different endpoints. Define how clients should authenticate
    themselves and the permissions needed for each operation.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证和授权**：指定访问不同端点所需的认证和授权机制。定义客户端如何进行认证以及每个操作所需的权限。'
- en: '**Error handling**: Clearly define how errors will be handled. Specify the
    structure of error responses, including error codes, messages, and any additional
    information.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理**：明确定义如何处理错误。指定错误响应的结构，包括错误代码、消息以及任何附加信息。'
- en: '**Rate limiting and quotas**: If applicable, define rate limiting and quotas
    to control the number of requests a client can make within a specific time frame.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速率限制和配额**：如果适用，定义速率限制和配额以控制客户端在特定时间框架内可以发出的请求数量。'
- en: An API contract outlines the rules and specifications for how services should
    interact.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: API合约概述了服务应如何交互的规则和规范。
- en: RESTful API design
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RESTful API设计
- en: 'RESTful API design follows a set of principles to create scalable, maintainable,
    and easily consumable APIs. Here are the key principles of RESTful API design:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API设计遵循一系列原则以创建可扩展、可维护且易于消费的API。以下是RESTful API设计的关键原则：
- en: '**Resource-based**: Design APIs around resources that represent the entities
    in the system. Each resource should have a **unique identifier** (**URI**) and
    be accessible through a standard set of HTTP methods.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于资源**：围绕表示系统中实体的资源设计API。每个资源应有一个**唯一标识符**（**URI**）并通过一组标准的HTTP方法访问。'
- en: '`GET`, `POST`, `PUT`, `DELETE`) and following conventions for resource naming
    and manipulation.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （`GET`、`POST`、`PUT`、`DELETE`）并遵循资源命名和操作的传统规范。
- en: '**Statelessness**: Keep APIs stateless, meaning that each request from a client
    contains all the information the server needs to fulfill that request. The server
    state is not stored between requests.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态**：保持API无状态，这意味着客户端的每个请求都包含服务器完成该请求所需的所有信息。服务器状态在请求之间不存储。'
- en: '**Representation**: Use different representations (**JSON**, **XML**, etc.)
    for resources based on client needs. Clients can request a specific representation
    using content negotiation.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表示法**：根据客户端需求，使用不同的表示法（**JSON**、**XML**等）来表示资源。客户端可以通过内容协商请求特定的表示法。'
- en: '**Hypermedia**: Optionally, include hypermedia controls in responses, allowing
    clients to navigate the API dynamically. This is known as **Hypermedia as the
    Engine of Application** **State** (**HATEOAS**).'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超媒体**：可选地，在响应中包含超媒体控件，允许客户端动态地导航API。这被称为**超媒体作为应用状态引擎**（**HATEOAS**）。'
- en: '**Consistent naming conventions**: Follow consistent naming conventions for
    resources and endpoints. Use plural nouns for resource names and maintain a logical
    and predictable structure.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致的命名约定**：遵循一致的命名约定来命名资源和端点。使用复数名词作为资源名称，并保持逻辑和可预测的结构。'
- en: '**Versioning**: If needed, implement a versioning strategy to ensure backward
    compatibility as the API evolves. This can be done through URI versioning, headers,
    or other methods.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制**：如果需要，实施版本控制策略以确保API演变时的向后兼容性。这可以通过URI版本控制、头信息或其他方法完成。'
- en: '**Idempotence and safety**: Ensure that operations are **idempotent** (multiple
    identical requests have the same effect as a single request) and safe (do not
    modify the resource state).'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**幂等性和安全性**：确保操作是**幂等的**（多个相同的请求具有单个请求相同的效果）且安全的（不修改资源状态）。'
- en: '**Security**: Implement proper security measures, including authentication,
    authorization, and encryption, to protect sensitive data and ensure secure API
    interactions. Security in REST API design is a crucial aspect of developing and
    maintaining web applications that expose data and functionality through APIs.
    There are many best practices and guidelines for ensuring the security of REST
    APIs:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：实施适当的安全措施，包括身份验证、授权和加密，以保护敏感数据并确保安全的API交互。在REST API设计中，安全性是开发和维护通过API公开数据和功能的应用程序的关键方面。有许多最佳实践和指南用于确保REST
    API的安全性：'
- en: Always use TLS encryption to protect the data in transit and prevent man-in-the-middle
    attacks. TLS also enables clients to verify the identity of the API server and
    ensures the integrity of the messages.
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是使用TLS加密来保护传输中的数据，防止中间人攻击。TLS还使客户端能够验证API服务器的身份，并确保消息的完整性。
- en: Implement a sound and scalable authentication and authorization model to control
    who can access and modify the API resources. There are different methods and standards
    for implementing authentication and authorization, such as API keys, OAuth2, JWT,
    and OpenID Connect. Choose the most suitable one for your use case and follow
    the security recommendations for each method.
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施一个健全且可扩展的身份验证和授权模型，以控制谁可以访问和修改API资源。有不同方法和标准用于实现身份验证和授权，例如API密钥、OAuth2、JWT和OpenID
    Connect。根据您的用例选择最合适的方法，并遵循每种方法的 安全建议。
- en: Don’t include sensitive information in URLs, such as passwords, tokens, or personal
    data. URLs can be logged, cached, or exposed in various ways, so they are not
    a secure way to transmit sensitive information. Use headers, body, or cookies
    instead, and encrypt or hash the data if possible.
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在URL中包含敏感信息，例如密码、令牌或个人信息。URL可以被记录、缓存或以各种方式暴露，因此它们不是传输敏感信息的可靠方式。相反，使用头部、正文或cookie，并在可能的情况下加密或散列数据。
- en: Narrowly define the allowed RESTful API requests and responses, such as the
    HTTP methods, the content types, the parameters, and the headers. Validate the
    input and output data and reject any malformed, unexpected, or malicious requests
    or responses. Use schemas, parsers, sanitizers, and filters to ensure data quality
    and consistency.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精确定义允许的RESTful API请求和响应，例如HTTP方法、内容类型、参数和头部。验证输入和输出数据，并拒绝任何格式错误、意外或恶意的请求或响应。使用模式、解析器、清理器和过滤器来确保数据质量和一致性。
- en: Implement continuous API discovery capabilities to monitor and audit the API
    endpoints, operations, and usage. Use tools and frameworks that can help you document,
    test, and analyze your APIs, such as Swagger, Postman, or SoapUI. Keep track of
    the API changes, versions, and dependencies, and communicate them to the API consumers
    and developers.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现持续API发现功能，以监控和审计API端点、操作和使用情况。使用可以帮助您记录、测试和分析API的工具和框架，例如Swagger、Postman或SoapUI。跟踪API更改、版本和依赖关系，并将它们传达给API消费者和开发者。
- en: Implement error handling and logging mechanisms to handle and report any exceptions
    or failures that occur in the API. Use appropriate HTTP status codes and error
    messages to inform the API consumers of the problem and the possible solutions.
    Avoid exposing sensitive or internal information in error messages, such as stack
    traces, database queries, or configuration details. Use secure and centralized
    logging tools to store and analyze the API logs and protect them from unauthorized
    access or tampering.
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现错误处理和日志记录机制，以处理和报告API中发生的任何异常或失败。使用适当的HTTP状态码和错误消息通知API消费者问题及可能的解决方案。避免在错误消息中暴露敏感或内部信息，例如堆栈跟踪、数据库查询或配置细节。使用安全且集中的日志工具来存储和分析API日志，并保护它们免受未经授权的访问或篡改。
- en: Remember, it is important to design RESTful APIs carefully while maintaining
    robust applications.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在设计RESTful API的同时保持稳健的应用程序非常重要。
- en: '*Figure 10**.1* illustrates the process of designing RESTful APIs:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10.1* 展示了设计RESTful API的过程：'
- en: '![Figure 10.1: Process of designing RESTful APIs (image by Freepik)](img/B14980_10_01.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1：设计RESTful API的过程（图片由Freepik提供）](img/B14980_10_01.jpg)'
- en: 'Figure 10.1: Process of designing RESTful APIs (image by Freepik)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1：设计RESTful API的过程（图片由Freepik提供）
- en: In summary, by defining clear API contracts and adhering to RESTful principles,
    microservices can communicate effectively, promoting interoperability and scalability
    in a distributed architecture.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，通过定义清晰的API合约并遵循RESTful原则，微服务可以有效地进行通信，促进分布式架构中的互操作性和可伸缩性。
- en: With the understanding of these concepts, let’s now move to REST API libraries
    and API versioning.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 理解了这些概念后，我们现在转向REST API库和API版本控制。
- en: REST API libraries and API versioning
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST API库和API版本控制
- en: In microservices architecture, you can use Node.js frameworks such as Express.js
    or Fastify to build RESTful APIs and implement API versioning to handle changes
    and updates to your microservices APIs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，您可以使用Node.js框架，如Express.js或Fastify，来构建RESTful API并实现API版本控制以处理微服务API的更改和更新。
- en: REST API libraries
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: REST API库
- en: 'When building RESTful APIs in Node.js, several libraries simplify the development
    process, handling routing, request parsing, and response formatting. Here are
    some commonly used libraries:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Node.js中构建RESTful API时，有几个库简化了开发过程，处理路由、请求解析和响应格式化。以下是一些常用的库：
- en: '**Express**: Express.js is a minimalist web framework for Node.js that provides
    robust routing, middleware support, and an easy-to-use API. The following is an
    example of using Express.js:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Express**：Express.js是Node.js的一个简约型Web框架，提供了强大的路由、中间件支持和易于使用的API。以下是使用Express.js的示例：'
- en: '[PRE0]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Restify**: Restify is designed specifically for building REST APIs and focuses
    on performance, correctness, and simplicity. The following code is an example
    of using Restify:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Restify**：Restify专门设计用于构建REST API，侧重于性能、正确性和简洁性。以下代码是使用Restify的示例：'
- en: '[PRE8]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this section, we have learned some examples of REST API libraries and how
    to use them. Feel free to experiment with them. To run this code locally, you
    need firstly to create a file with the `.js` extension within a local folder and
    open it with your desired IDE such as Visual Studio Code. Then you can write the
    code in the example, open a terminal from your IDE, and install the Node.js packages
    required for this example – `restify` – with the `npm install restify` command.
    When the process of installing the package has finished, you can run it in the
    integrated terminal example using the `filename_example.js` command node.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了REST API库的一些示例以及如何使用它们。请随意尝试它们。要本地运行此代码，首先需要在本地文件夹中创建一个扩展名为`.js`的文件，并用您喜欢的IDE（如Visual
    Studio Code）打开它。然后您可以在示例中编写代码，从IDE中打开终端，并使用`npm install restify`命令安装此示例所需的Node.js包——`restify`。当安装包的过程完成后，您可以在集成终端中使用`filename_example.js`命令运行它。
- en: With these concepts learned, we can continue with API versioning.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 学习了这些概念后，我们可以继续进行API版本控制。
- en: API versioning
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API版本控制
- en: '**API versioning** is essential for managing changes and maintaining backward
    compatibility as an API evolves. API versioning is the process of managing and
    tracking changes to an API and communicating those changes to the API’s consumers.
    API versioning is important for ensuring the compatibility, reliability, and security
    of API-based applications. API versioning can be done in different ways, such
    as using URI versioning, media type versioning, or content negotiation. Each approach
    has its own advantages and disadvantages and requires careful design and configuration.
    Here are common approaches to API versioning:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**API版本控制**对于管理变更和维护API演变过程中的向后兼容性至关重要。API版本控制是管理和跟踪API变更的过程，并将这些变更传达给API的消费者。API版本控制对于确保基于API的应用程序的兼容性、可靠性和安全性至关重要。API版本控制可以以不同的方式实现，例如使用URI版本控制、媒体类型版本控制或内容协商。每种方法都有其自身的优缺点，并需要仔细的设计和配置。以下是常见的API版本控制方法：'
- en: '`https://example.com/v1/users` and `https://example.com/v2/users` would represent
    different versions of the same resource. The following lists an example and the
    pros and cons of this method:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://example.com/v1/users` 和 `https://example.com/v2/users` 将表示同一资源的不同版本。以下列出此方法的示例及其优缺点：'
- en: '*Example*: `/api/v1/resource` (This means that this is version 1 of the resource).'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*: `/api/v1/resource`（这意味着这是资源的第1个版本）。'
- en: '*Pros*: It is simple and easy to implement and the version is explicit in the
    URL.'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*优点*: 它简单且易于实现，版本信息在URL中明确。'
- en: '*Cons*: It can result in longer and less readable URLs.'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*缺点*: 它可能导致URL更长且不易阅读。'
- en: '`Accept` version) or the standard `Accept` header to indicate the desired version
    of the API. The following lists an example and the pros and cons of this method:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`接受`版本) 或标准的`Accept`头部来指示期望的API版本。以下列出此方法的示例及其优缺点：'
- en: '*Example*: `Accept` (The `Accept` header is used by HTTP clients, such as web
    browsers or microservices, to indicate which content types they can understand
    and prefer to receive from the server): `application/vnd.myapi.v1+json`.'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*: `Accept`（`Accept`头部由HTTP客户端，如网页浏览器或微服务，用于指示它们可以理解和希望从服务器接收的内容类型）：`application/vnd.myapi.v1+json`。'
- en: '*Pros*: It results in lean URLs and the version information is in headers.'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*优点*: 它产生简洁的URL，版本信息在头部中。'
- en: '*Cons*: It requires clients to set headers correctly.'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*缺点*: 它要求客户端正确设置头部信息。'
- en: '`version`) in the URL to indicate the desired version of the API. The following
    lists an example and the pros and cons of this method:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在URL中添加`version`)来指示期望的API版本。以下列出此方法的示例及其优缺点：
- en: '*Example*: `/api/resource?version=1` (This is an example of URI versioning,
    a common way to handle changes and updates in REST APIs. It involves adding a
    version number or identifier to the base URI of the API, such as `v1`, `v2`, or
    `v3`. In this case, the version is `1` and it is specified as a query parameter
    after the `?` symbol. This means that the client is requesting the first version
    of the API for the resource `/api/resource`).'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*: `/api/resource?version=1`（这是一个URI版本控制的示例，是处理REST API中变更和更新的常见方式。它涉及在API的基本URI中添加版本号或标识符，如`v1`、`v2`或`v3`。在这种情况下，版本是`1`，它被指定为`?`符号之后的查询参数。这意味着客户端正在请求资源`/api/resource`的第一个API版本）。'
- en: '*Pros*: It is simple to implement.'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*优点*: 它易于实现。'
- en: '*Cons*: It can be less readable and the version information is in query parameters.'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*缺点*: 它可能不太易读，版本信息在查询参数中。'
- en: '`Accept` or `Content-Type` header to indicate the desired version of the API.
    The following lists an example and the pros and cons of this method:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Accept` 或 `Content-Type` 标头指示所需的 API 版本。以下列出了此方法的示例及其优缺点：
- en: '*Example*: `Content-Type` (The `Content-Type` header is used to indicate the
    media type of the resource or the data that is being sent or received in a web
    request or response. The media type is a string that describes the format, structure,
    and encoding of the data, such as `text/html`, `application/JSON`, or `image/png`):
    `application/json; version=1`.'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*：`Content-Type`（`Content-Type` 标头用于指示资源或正在发送或接收的 Web 请求或响应中的媒体类型。媒体类型是一个字符串，描述了数据的格式、结构和编码，例如
    `text/html`、`application/JSON` 或 `image/png`）：`application/json; version=1`。'
- en: '*Pros*: It is built on top of existing HTTP standards.'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*优点*：它是建立在现有的 HTTP 标准之上的。'
- en: '*Cons*: Similar to header versioning, it requires clients to set headers correctly.'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*缺点*：与标头版本控制类似，它要求客户端正确设置标头。'
- en: '`/api/resource` (The `/api/resource` part of the URI is the path that identifies
    the specific resource that the client wants to access or manipulate).'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/api/resource`（URI 的 `/api/resource` 部分是客户端想要访问或操作的具体资源的路径）。'
- en: '*Pros*: It is the simplest approach.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*优点*：这是最简单的方法。'
- en: '*Cons*: It may lead to backward compatibility issues as the API evolves.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*缺点*：随着 API 的发展，可能会导致向后兼容性问题。'
- en: API versioning is essential for maintaining better compatibility while working
    and deploying APIs.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: API 版本控制对于在开发和部署 API 时保持更好的兼容性至关重要。
- en: '*Figure 10**.2* depicts the process of REST API libraries and versioning:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10**.2* 描述了 REST API 库和版本控制的过程：'
- en: '![Figure 10.2: REST API libraries and versioning (image by Freepik)](img/B14980_10_02.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2：REST API 库和版本控制（图片由 Freepik 提供）](img/B14980_10_02.jpg)'
- en: 'Figure 10.2: REST API libraries and versioning (image by Freepik)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2：REST API 库和版本控制（图片由 Freepik 提供）
- en: In summary, choose the versioning strategy that aligns with your application’s
    needs and ensures a smooth transition for existing clients while accommodating
    future changes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，选择与您的应用程序需求相一致且确保现有客户端平稳过渡并适应未来变化版本控制策略。
- en: Now, we can continue to the next section, in which we will talk about authentication
    and authorization and data validation.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续到下一节，我们将讨论认证、授权和数据验证。
- en: Authentication and authorization and data validation
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证、授权和数据验证
- en: In microservices architecture, you have to authenticate, authorize, and validate
    data in order to continue to get results from API architecture.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，您必须进行认证、授权和验证数据，才能继续从 API 架构中获取结果。
- en: Authentication and authorization
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证和授权
- en: '**Authentication and authorization** are critical components of securing a
    microservices architecture. Here’s an overview of these concepts:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**认证和授权**是确保微服务架构安全的关键组件。以下是这些概念概述：'
- en: '**Authentication**: Authentication in microservices is the process of verifying
    the identity of users or services that access or communicate with the microservices.
    Authentication is essential for ensuring the security and reliability of microservice-based
    applications:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证**：在微服务中，认证是验证访问或与微服务通信的用户或服务的身份的过程。认证对于确保基于微服务的应用程序的安全性和可靠性至关重要：'
- en: '*Node.js implementation*: Use authentication middleware, such as **Passport.js**,
    to handle user authentication. Implement various authentication strategies (e.g.,
    local authentication, OAuth, JWT) depending on the application’s requirements.'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Node.js 实现*：使用认证中间件，如 **Passport.js**，来处理用户认证。根据应用程序的要求实现各种认证策略（例如，本地认证、OAuth、JWT）。'
- en: '*Example* (using Passport.js with local strategy):'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*（使用 Passport.js 和本地策略）:'
- en: '[PRE22]'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '**Authorization**: Authorization determines what actions a user, system, or
    application is allowed to perform after authentication:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权**：授权确定用户、系统或应用程序在认证后允许执行的操作：'
- en: '*Node.js implementation*: Use middleware or custom functions to check user
    roles or permissions before allowing access to certain routes.'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Node.js 实现*：使用中间件或自定义函数在允许访问特定路由之前检查用户角色或权限。'
- en: '*Example* (middleware for checking user roles):'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*（检查用户角色的中间件）:'
- en: '[PRE35]'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '`jsonwebtoken` to generate and verify JWTs.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `jsonwebtoken` 生成和验证 JWT。
- en: '*Example* (using JWT for token generation and verification):'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*（使用 JWT 进行令牌生成和验证）:'
- en: '[PRE45]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Having these concepts in mind and practicing with these codes can help create
    a better architecture for authenticating and authorizing in Node.js.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些概念的基础上，并使用这些代码进行实践，可以帮助创建更好的Node.js身份验证和授权架构。
- en: We can continue now with data validation.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以继续进行数据验证。
- en: Data validation
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据验证
- en: '**Data validation** is crucial for ensuring that incoming data meets the expected
    criteria, preventing security vulnerabilities, and maintaining data integrity.
    The methods of validation are as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据验证**对于确保传入数据符合预期标准、防止安全漏洞和维护数据完整性至关重要。验证方法如下：'
- en: '`npm` `install joi`.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm` `install joi`.'
- en: '*Example* (using Joi for request validation in a route):'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*（在路由中使用Joi进行请求验证）：'
- en: '[PRE56]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '`npm` `install validator`.*   *Example* (using validator.js library for string
    validators and sanitizers):'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm` `install validator`.*   *示例*（使用validator.js库进行字符串验证和清理）：'
- en: '[PRE69]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '**Sanitization**: Sanitization involves cleaning and validating data to protect
    against common security vulnerabilities, such as SQL injection or **cross-site**
    **scripting** (**XSS**):'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据清理**: 数据清理涉及清洗和验证数据，以防止常见的安全漏洞，例如SQL注入或**跨站脚本**（**XSS**）：'
- en: '*Node.js implementation*: Use libraries such as **dompurify** for sanitizing
    HTML input or parameterized queries for preventing SQL injection.'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Node.js实现*: 使用如**dompurify**之类的库进行HTML输入清理或使用参数化查询来防止SQL注入。'
- en: '*Example* (using dompurify for HTML sanitization):'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*（使用dompurify进行HTML清理）：'
- en: '[PRE73]'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '**Regular Expressions**: Regular expressions (regex) can be used for more complex
    data validation, such as validating email addresses or passwords.'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正则表达式**: 正则表达式（regex）可用于更复杂的数据验证，例如验证电子邮件地址或密码。'
- en: '*Example* (using a regex for email validation):'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*（使用正则表达式进行电子邮件验证）：'
- en: '[PRE75]'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '**Cross-site scripting (XSS)**: A type of web security vulnerability that allows
    attackers to inject and execute malicious code in web pages. XSS attacks can compromise
    the confidentiality, integrity, and availability of web applications and their
    users. XSS attacks can be classified into three types: reflected, stored, and
    DOM-based.'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨站脚本（XSS）**: 一种允许攻击者在网页中注入和执行恶意代码的Web安全漏洞。XSS攻击可能会损害Web应用程序及其用户的机密性、完整性和可用性。XSS攻击可以分为三种类型：反射型、存储型和基于DOM的。'
- en: 'Sanitization is a technique to prevent or mitigate XSS attacks by removing
    or encoding any potentially harmful characters or scripts from user input or output.
    Sanitization can be applied at different stages of the web application, such as
    input validation, output encoding, or HTML sanitization:'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 清理是一种技术，通过删除或编码用户输入或输出中的任何潜在有害字符或脚本，来防止或减轻XSS攻击。清理可以在Web应用程序的不同阶段应用，例如输入验证、输出编码或HTML清理：
- en: '**Input validation**: This is the process of checking and rejecting any user
    input that does not meet the expected criteria or format. Input validation can
    help prevent XSS attacks by blocking malicious input before it reaches the web
    application logic or database.'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入验证**: 这是检查和拒绝任何不符合预期标准或格式的用户输入的过程。输入验证可以通过在恶意输入到达Web应用程序逻辑或数据库之前阻止它来帮助防止XSS攻击。'
- en: '**Output encoding**: This is the process of converting any special characters
    or symbols in user output to their equivalent HTML entities or codes. Output encoding
    can help prevent XSS attacks by ensuring that user output is treated as plain
    text and not as code by the browser.'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出编码**: 这是将用户输出中的任何特殊字符或符号转换为它们等效的HTML实体或代码的过程。输出编码可以通过确保浏览器将用户输出视为纯文本而不是代码来帮助防止XSS攻击。'
- en: '**HTML sanitization**: This is the process of filtering and removing any unwanted
    or dangerous HTML tags, attributes, or styles from user output. HTML sanitization
    can help prevent XSS attacks by allowing only safe and well-formed HTML output
    to be rendered by the browser.'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTML清理**: 这是过滤和删除用户输出中任何不需要或危险的HTML标签、属性或样式的过程。HTML清理可以通过仅允许浏览器渲染安全且格式良好的HTML输出来帮助防止XSS攻击。'
- en: Sanitization is an essential technique to protect web applications and users
    from XSS attacks. However, sanitization alone is not enough to prevent all types
    of XSS attacks. Sanitization should be combined with other defensive measures,
    such as using secure web frameworks, following secure coding practices, implementing
    content security policies, and educating users about web security.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 清理是保护 Web 应用程序和用户免受 XSS 攻击的基本技术。然而，仅清理不足以防止所有类型的 XSS 攻击。清理应与其他防御措施相结合，例如使用安全的
    Web 框架、遵循安全的编码实践、实施内容安全策略以及教育用户关于网络安全。
- en: '*Figure 10**.3* illustrates data validation in API:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10.3* 展示了 API 中的数据验证：'
- en: '![Figure 10.3: Data validation in API (image by Freepik)](img/B14980_10_03.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.3：API 中的数据验证（图片由 Freepik 提供）](img/B14980_10_03.jpg)'
- en: 'Figure 10.3: Data validation in API (image by Freepik)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3：API 中的数据验证（图片由 Freepik 提供）
- en: In summary, implementing strong authentication, authorization, and data validation
    practices is crucial for building secure and reliable microservices in a Node.js
    environment.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在 Node.js 环境中实施强大的身份验证、授权和数据验证实践对于构建安全可靠的微服务至关重要。
- en: In the next section, we will learn about error handling and API documentation.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习关于错误处理和 API 文档的内容。
- en: Error handling and API documentation
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理和 API 文档
- en: '**Error handling** is a critical aspect of building robust microservices to
    ensure graceful degradation and effective debugging. Clear and comprehensive API
    documentation is essential for enabling developers to understand and consume your
    microservices.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误处理**是构建健壮的微服务以确保优雅降级和有效调试的关键方面。清晰的全面 API 文档对于使开发者能够理解和消费您的微服务至关重要。'
- en: Error handling
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误处理
- en: 'Here’s how you can handle errors in a Node.js microservices environment:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您在 Node.js 微服务环境中处理错误的方法：
- en: '**Express.js error handling middleware**: Use Express.js middleware to handle
    errors globally. This middleware is invoked for unhandled errors that occur during
    request processing. The following snippet is an example of this:'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Express.js 错误处理中间件**：使用 Express.js 中间件来全局处理错误。此中间件在请求处理过程中发生未处理的错误时被调用。以下是一个示例：'
- en: '[PRE79]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '**Custom error classes**: Create custom error classes for different types of
    errors that may occur in your application. This helps in identifying and handling
    errors more precisely. The following snippet is an example of this:'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义错误类**：为应用程序中可能发生的不同类型的错误创建自定义错误类。这有助于更精确地识别和处理错误。以下是一个示例：'
- en: '[PRE83]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '**Logging**: Implement comprehensive logging to record details about errors,
    including stack traces, and to request information and any relevant context. The
    following snippet is an example of this (using a logging library such as **Winston**):'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录**：实现全面的日志记录以记录有关错误的详细信息，包括堆栈跟踪，以及请求信息和任何相关上下文。以下是一个示例（使用如 **Winston**
    的日志库）：'
- en: '[PRE91]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '`400` for client errors, `500` for server errors, and others as needed. The
    following snippet is an example of this:'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`400` 用于客户端错误，`500` 用于服务器错误，以及其他所需的情况。以下是一个示例：'
- en: '[PRE93]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '`async`/`await`, ensure proper error handling using `try` or `catch` blocks.
    The following snippet is an example of this:'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `async`/`await`，确保使用 `try` 或 `catch` 块进行适当的错误处理。以下是一个示例：
- en: '[PRE98]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Error handling in microservices can avoid headaches later while developing microservices
    in Node.js. It helps developers to debug faster.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Node.js 中开发微服务时，错误处理可以避免后续开发中的麻烦。它有助于开发者更快地调试。
- en: In the next section, we will talk about API documentation in microservices.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论微服务中的 API 文档。
- en: API documentation
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 文档
- en: 'Clear and comprehensive API documentation is essential for enabling developers
    to understand and consume your microservices. Here are some approaches for documenting
    your APIs:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 清晰全面的 API 文档对于使开发者能够理解和消费您的微服务至关重要。以下是一些记录您的 API 的方法：
- en: '**Swagger/OpenAPI**: Use **Swagger**/**OpenAPI** specifications to describe
    your API endpoints, including details about request and response formats, authentication
    methods, and more. Tools such as **Swagger UI** or **ReDoc** can render interactive
    documentation from OpenAPI specifications. The following snippet is an example
    of this:'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Swagger/OpenAPI**：使用 **Swagger**/**OpenAPI** 规范来描述您的 API 端点，包括请求和响应格式、认证方法等详细信息。例如，**Swagger
    UI** 或 **ReDoc** 工具可以从 OpenAPI 规范中渲染交互式文档。以下是一个示例：'
- en: '[PRE106]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '**API Blueprint**: API Blueprint is another format for API documentation. API
    Blueprint is a language for designing and documenting web APIs. It uses a combination
    of Markdown and MSON syntax to describe the format, structure, and rules of the
    data exchange between the service provider and the consumer. API Blueprint allows
    for easy collaboration, abstraction, and modularity in the API design process.
    Tools such as **Apiary** can generate documentation from API Blueprint files.
    The following snippet is an example of this:'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API蓝图**：API蓝图是API文档的另一种格式。API蓝图是一种用于设计和记录Web API的语言。它结合了Markdown和MSON语法来描述服务提供者和消费者之间数据交换的格式、结构和规则。API蓝图允许在API设计过程中实现易于协作、抽象和模块化。例如**Apiary**等工具可以从API蓝图文件生成文档。以下是一个示例：'
- en: '[PRE117]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '**Postman collections**: If you’re using **Postman** for testing, you can create
    collections that include detailed information about your API requests and responses.
    Postman allows you to export collections, making it a shareable form of API documentation.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Postman集合**：如果您使用**Postman**进行测试，您可以创建包含有关您的API请求和响应的详细信息的集合。Postman允许您导出集合，使其成为可共享的API文档形式。'
- en: '`and usage of each API endpoint. These comments can be extracted into documentation
    using tools such as **JSDoc**`**. The following snippet is an example of this:'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`以及每个API端点的使用情况。这些注释可以使用诸如**JSDoc**等工具提取到文档中`**。以下是一个示例：'
- en: '[PRE123]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]**'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PRE130]**'
- en: '***   **Documentation sites**: Create a dedicated documentation website for
    your microservices, presenting detailed guides, examples, and interactive API
    exploration. Tools such as **Docusaurus** or **Slate** can help in building documentation
    websites.**'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '***   **文档站点**：为您的微服务创建一个专门的文档网站，展示详细的指南、示例和交互式API探索。例如**Docusaurus**或**Slate**等工具可以帮助构建文档网站**。'
- en: '**In summary, ensure that your API documentation is kept up to date with changes
    to the API, providing accurate and relevant information to the developers who
    consume your microservices.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '**总之，确保您的API文档与API的更改保持同步，为使用您的微服务的开发者提供准确和相关的信息**。'
- en: In the last section, we are going to talk about API testing and API gateway.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一节，我们将讨论API测试和API网关。
- en: API testing and API gateway
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API测试和API网关
- en: API testing is crucial for ensuring the reliability and correctness of microservices.
    An API Gateway is a central component in a microservices architecture, providing
    a unified entry point for managing and securing APIs.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: API测试对于确保微服务的可靠性和正确性至关重要。API网关是微服务架构中的一个中心组件，提供统一的管理和保障API的入口点。
- en: API testing
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API测试
- en: '**API testing** is the process of confirming that an API is working as expected.
    Developers can run API tests manually, or they can automate them with an API testing
    tool. There are several types of API tests, and each one plays a distinct role
    in ensuring that the API remains reliable:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '**API测试**是确认API按预期工作的过程。开发者可以手动运行API测试，或者使用API测试工具自动化它们。有几种类型的API测试，每一种都在确保API保持可靠方面发挥着独特的作用：'
- en: '**Unit testing**: In unit testing, we test individual units of code (functions,
    modules) in isolation. Requirements and examples are as follows:'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：在单元测试中，我们单独测试代码的各个单元（函数、模块）。要求和示例如下：'
- en: '*Tools*: Testing frameworks such as **Jest**, **Mocha**, or **Jasmine**.'
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*工具*：测试框架，如**Jest**、**Mocha**或**Jasmine**。'
- en: '*Example* (using Jest):'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*（使用Jest）：'
- en: '[PRE131]'
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '**Integration testing**: Through integration testing, we verify the interaction
    between different components or services. Requirements and examples are as follows:'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：通过集成测试，我们验证不同组件或服务之间的交互。要求和示例如下：'
- en: '*Tools*: **Supertest**, **Chai HTTP**, or your preferred HTTP testing library.'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*工具*：**Supertest**、**Chai HTTP**或您首选的HTTP测试库。'
- en: '*Example* (using Supertest):'
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*（使用Supertest）：'
- en: '[PRE134]'
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '**End-to-end testing**: The purpose of end-to-end testing is to test the entire
    application or a specific user flow. Requirements and examples are as follows:'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端到端测试**：端到端测试的目的是测试整个应用程序或特定的用户流程。要求和示例如下：'
- en: '*Tools*: **Cypress**, **Puppeteer**, and **Nightwatch**.'
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*工具*：**Cypress**、**Puppeteer**和**Nightwatch**。'
- en: '*Example* (using Cypress):'
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*（使用Cypress）：'
- en: '[PRE140]'
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-295
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '**Mocking and stubbing**: Through this, we simulate dependencies or external
    services to isolate the system under test. Requirements and examples are as follows:'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟和存根**：通过这种方式，我们模拟依赖项或外部服务以隔离待测试的系统。要求和示例如下：'
- en: '*Tools*: **Nock**, **Sinon**, or Jest’s built-in mocking functions.'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*工具*：**Nock**、**Sinon**或Jest内置的模拟函数。'
- en: '*Example* (using Nock):'
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*（使用Nock）:'
- en: '[PRE146]'
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '**Data-driven testing**: In data-driven testing, we test different input data
    and conditions to ensure the system behaves correctly. Requirements and examples
    are as follows:'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据驱动测试**：在数据驱动测试中，我们测试不同的输入数据和条件，以确保系统行为正确。要求和示例如下：'
- en: '*Tools*: Jest’s parameterized tests, and test data libraries.'
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*工具*：Jest的参数化测试和测试数据库。'
- en: '*Example* (Jest parameterized test):'
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*（Jest参数化测试）:'
- en: '[PRE150]'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: As we have learned, these concepts of testing can favor a lot to test the software
    better and deliver well-tested software.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所学的，这些测试概念可以大大提高软件测试的质量，并交付经过良好测试的软件。
- en: We can now continue to the API gateway.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以继续到API网关。
- en: API gateway
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API网关
- en: An **API gateway** is a software component that acts as an intermediary between
    clients and backend services. It handles various tasks such as routing, authentication,
    rate limiting, monitoring, and policy enforcement for the API calls. It also simplifies
    client-side development by providing a unified interface to access multiple services.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '**API网关**是一个软件组件，充当客户端和后端服务之间的中介。它处理各种任务，如路由、身份验证、速率限制、监控和API调用的策略执行。它还通过提供一个统一的接口来访问多个服务，简化了客户端开发。'
- en: One of the benefits of using an API gateway is that it can reduce the complexity
    and improve the performance of microservices-based applications. Using an API
    gateway, you can decouple the internal structure of your application from the
    external clients and implement common functionalities at the gateway level instead
    of repeating them in each service. You can also use an API gateway to aggregate
    and transform the responses from multiple services into a single result for the
    client.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 使用API网关的一个好处是它可以减少基于微服务的应用程序的复杂性并提高性能。使用API网关，您可以解耦应用程序的内部结构与其外部客户端，并在网关级别实现通用功能，而不是在每个服务中重复它们。您还可以使用API网关将多个服务的响应聚合和转换成单个结果，供客户端使用。
- en: 'Here’s how API Gateways contribute to a Node.js microservices ecosystem:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是API网关如何为Node.js微服务生态系统做出贡献：
- en: '**Request routing**: An API gateway routes incoming requests to the appropriate
    microservice based on predefined rules or configurations. The following shows
    an example (Express.js route):'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求路由**：API网关根据预定义的规则或配置将传入的请求路由到适当的微服务。以下是一个示例（Express.js路由）：'
- en: '[PRE157]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '**Load balancing**: Load balancers are devices or applications that distribute
    the incoming network traffic across multiple servers or nodes. They help to improve
    the performance, scalability, and reliability of web applications by balancing
    the workload and avoiding overloading any single server. Load balancers use different
    algorithms or methods to decide which server should handle each request, such
    as round robin, least connections, least time, hash, or random. Load balancers
    can be either hardware-based or software-based, and they can run on a dedicated
    device, a server, a virtual machine, or in the cloud. Distribute incoming traffic
    across multiple instances of a microservice to ensure optimal resource utilization
    and reliability. The following shows an example (Nginx load balancing configuration):'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡**：负载均衡器是设备或应用程序，它们将传入的网络流量分配到多个服务器或节点。通过平衡工作负载并避免任何单个服务器过载，它们有助于提高Web应用程序的性能、可扩展性和可靠性。负载均衡器使用不同的算法或方法来决定哪个服务器应该处理每个请求，例如轮询、最少连接、最短时间、哈希或随机。负载均衡器可以是基于硬件的或基于软件的，它们可以在专用设备、服务器、虚拟机或云中运行。将传入流量分配到微服务的多个实例，以确保最佳资源利用率和可靠性。以下是一个示例（Nginx负载均衡配置）：'
- en: '[PRE162]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '**Authentication and authorization**: Centralize authentication and authorization
    logic, ensuring that only authenticated and authorized requests reach the microservices.
    The following shows an example (Express.js middleware):'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证和授权**：集中身份验证和授权逻辑，确保只有经过身份验证和授权的请求才能到达微服务。以下是一个示例（Express.js中间件）：'
- en: '[PRE166]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '**Rate limiting and throttling**: Control the rate at which requests are allowed
    to prevent abuse or overuse of microservices. The following shows an example (Express.js
    rate limiting middleware):'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速率限制和节流**：控制允许请求的速率，以防止滥用或过度使用微服务。以下是一个示例（Express.js速率限制中间件）：'
- en: '[PRE172]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '**Response aggregation**: Aggregate responses from multiple microservices into
    a single response for the client. The following shows an example (Express.js route):'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应聚合**：将多个微服务的响应聚合为单个响应供客户端使用。以下是一个示例（Express.js路由）：'
- en: '[PRE179]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '**Monitoring and analytics**: Collect and analyze data on API usage, performance,
    and errors to gain insights into the health of the microservices architecture.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控和分析**：收集和分析API使用、性能和错误数据，以深入了解微服务架构的健康状况。'
- en: '*Figure 10**.4* illustrates the process of the API gateway:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10**.4* 展示了API网关的过程：'
- en: '![Figure 10.4: API Gateway (image by Freepik)](img/B14980_10_04.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4：API网关（图片由Freepik提供）](img/B14980_10_04.jpg)'
- en: 'Figure 10.4: API Gateway (image by Freepik)'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4：API网关（图片由Freepik提供）
- en: In summary, an API Gateway simplifies the management and orchestration of microservices,
    providing a unified interface for clients while offloading common functionalities
    from individual microservices. It plays a crucial role in enhancing security,
    scalability, and maintainability in a distributed system.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，API网关简化了微服务的管理和编排，为客户端提供了一个统一的接口，同时将常见功能从单个微服务中卸载。它在增强分布式系统的安全性、可扩展性和可维护性方面发挥着关键作用。
- en: Summary
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we have learned a lot about microservices, how to communicate
    with APIs in microservices, and how different services interact with each other
    to fulfill business processes. Data contracts define how data is structured and
    exchanged between microservices.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了大量关于微服务的内容，包括如何在微服务中与API通信，以及不同的服务如何相互交互以完成业务流程。数据合约定义了数据在微服务之间的结构和交换方式。
- en: In summary, effective API communication and data contracts are foundational
    to the success of microservices. They contribute to system flexibility, maintainability,
    and the ability to scale in complex, distributed architectures.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，有效的API通信和数据合约是微服务成功的基础。它们有助于系统灵活性、可维护性，以及在复杂、分布式架构中扩展的能力。
- en: In the next chapter, we are going to learn about caching and asynchronous messaging
    in microservices.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习微服务中的缓存和异步消息。
- en: Quiz time
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: What are the key components to define API contracts?
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义API合约的关键组件有哪些？
- en: What are the commonly used REST API libraries?
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常用的REST API库有哪些？
- en: How can you handle authentication and authorization with examples?
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何通过示例处理身份验证和授权？
- en: How to document your APIs?**
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何记录你的API？**
