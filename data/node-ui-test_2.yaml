- en: Chapter 2. Creating a Simple Web App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。创建一个简单的Web应用程序
- en: By the time you reach the end of this chapter, you should be able to create
    a simple web application using Node.js, CouchDB, and Flatiron.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当您到达本章末尾时，您应该能够使用Node.js、CouchDB和Flatiron创建一个简单的Web应用程序。
- en: 'The topics covered in this chapter are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题包括：
- en: Setting up Node and Flatiron
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Node和Flatiron
- en: Creating and processing a user form
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和处理用户表单
- en: Defining the requirements of our web app
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义我们的Web应用程序的要求
- en: 'Before we dive too much into the Zombie.js world, we need to create a target
    for our tests, that is, a web application that provides a to-do list. This is
    the set of top-level requirements for such an application:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究Zombie.js世界之前，我们需要为我们的测试创建一个目标，即提供待办事项列表的Web应用程序。这是这样一个应用程序的顶级要求集：
- en: A user can sign up for the service for which he should provide an e-mail address
    as username and a password. By providing the username and the password, the user
    can create an authenticated session that will identify him throughout further
    interactions.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以注册该服务，需要提供电子邮件地址作为用户名和密码。通过提供用户名和密码，用户可以创建一个经过身份验证的会话，该会话将在进一步的交互中识别他。
- en: The user can create a to-do item.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以创建一个待办事项。
- en: The user can view a list of to-dos.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以查看待办事项列表。
- en: The user can remove a to-do item.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以删除待办事项。
- en: To implement this application we will use Node.js, a platform for building networking
    applications in JavaScript that Zombie.js also uses. We'll also use Flatiron,
    a set of components that will help you in building a web application on top of
    Node.js.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个应用程序，我们将使用Node.js，这是一个用JavaScript构建网络应用程序的平台，Zombie.js也使用它。我们还将使用Flatiron，这是一组组件，将帮助您在Node.js之上构建Web应用程序。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the interest of keeping things simple, we're building our application in
    Node.js. However, Zombie.js is suitable for testing applications built with any
    framework utilizing a dynamic HTTP server.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持简单，我们正在使用Node.js构建我们的应用程序。但是，Zombie.js适用于测试使用任何框架构建的应用程序，这些框架利用动态HTTP服务器。
- en: Also, bear in mind that the goal of building this web application is not to
    show you how to build a web app, but to provide a working application on a known
    and simple domain that we can use as the subject of our tests.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 还要记住，构建这个Web应用程序的目标不是向您展示如何构建Web应用程序，而是在已知和简单的域上提供一个可用的应用程序，以便我们可以将其用作我们测试的主题。
- en: In the next sections you'll learn how to install Node.js and Flatiron and how
    to create your to-do application server.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，您将学习如何安装Node.js和Flatiron，以及如何创建您的待办应用程序服务器。
- en: Setting up Node.js and Flatiron
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Node.js和Flatiron
- en: If you don't have the latest version of Node.js installed, you will need to
    install it. You will need Node.js for several reasons. Our web application will
    use Flatiron, which runs on top of Node.js. You will also need to use the **Node
    Package Manager** (**NPM**), which comes bundled with Node. Finally, you will
    need Node.js to install and run your Zombie.js tests.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有安装最新版本的Node.js，您将需要安装它。您将需要Node.js出于几个原因。我们的Web应用程序将使用Flatiron，它在Node.js之上运行。您还需要使用**Node
    Package Manager**（**NPM**），它与Node捆绑在一起。最后，您将需要Node.js来安装和运行Zombie.js测试。
- en: Installing Node.js
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Node.js
- en: To install Node.js head out to the nodejs.org website.![Installing Node.js](img/0526OS_02_01.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装Node.js，请前往nodejs.org网站。![安装Node.js](img/0526OS_02_01.jpg)
- en: Then click on the **Download** button, which should open the following page:![Installing
    Node.js](img/0526OS_02_02.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击**下载**按钮，这将打开以下页面：![安装Node.js](img/0526OS_02_02.jpg)
- en: If you're running a Windows or a Macintosh system, click on the respective installer
    icon. That should download and start up the graphical installer.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您正在运行Windows或Macintosh系统，请单击相应的安装程序图标。这将下载并启动图形安装程序。
- en: Installing Node from the source code
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从源代码安装Node
- en: 'If you''re not running one of these systems and you are on a Unix-like system,
    you can install Node.js from the source code by following these steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有运行其中一个系统，并且您在类Unix系统上，您可以按照以下步骤从源代码安装Node.js：
- en: 'Click on the source code icon, which will start downloading the source code
    tarball. Once downloaded, expand it using the terminal:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击源代码图标，将开始下载源代码tarball。下载完成后，使用终端展开它：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Navigate to the created dir:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到创建的目录：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Configure it:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置它：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Build it:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建它：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And finally install it:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后安装它：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you don''t have sufficient permissions to copy the node binaries to the
    final destination, you will need to prefix your command with `sudo`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有足够的权限将节点二进制文件复制到最终目标位置，您将需要在命令前加上`sudo`：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now you should have Node.js installed on your system. Try running it:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您应该已经在系统上安装了Node.js。尝试运行它：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now let''s try to open the Node command line and type something:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们尝试打开Node命令行并输入一些内容：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you press *Enter* now, you should get the following output:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您现在按*Enter*键，您应该会得到以下输出：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'By installing Node.js, you also installed its faithful companion NPM, the Node
    Package Manager. You can try invoking it from the terminal:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过安装Node.js，您还安装了它的忠实伴侣NPM，Node Package Manager。您可以尝试从终端调用它：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Installing Flatiron and starting your application
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Flatiron并启动您的应用程序
- en: Now you need to install the Flatiron framework so you can start building your
    application.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您需要安装Flatiron框架，这样您就可以开始构建您的应用程序。
- en: 'Use NPM to download and install Flatiron as follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用NPM按照以下方式下载和安装Flatiron：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Again, if you don't have enough permissions to install Flatiron, run the last
    command prefixed by `sudo`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，如果您没有足够的权限安装Flatiron，请在最后一个命令前加上`sudo`。
- en: This installs Flatiron globally, making the `flatiron` command-line utility
    available.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将全局安装Flatiron，使`flatiron`命令行实用程序可用。
- en: 'Now you should step in a directory that will have the application code. You
    can then create the basic scaffolding for your web app by executing the following
    command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您应该进入一个将拥有应用程序代码的目录。然后，您可以通过执行以下命令为您的Web应用程序创建基本的脚手架：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After prompting you for the name of the author, the app description, and the
    homepage (which is optional), it will create a directory named `todo` containing
    the base for your application code. Step into that directory using the following
    command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示您输入作者的姓名、应用程序描述和主页（可选）后，它将创建一个名为`todo`的目录，其中包含您的应用程序代码的基础。使用以下命令进入该目录：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'There you will find two files and three folders:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在那里，您将找到两个文件和三个文件夹：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: One of these files, `package.json` contains the application manifest, which,
    among other fields, contains the packages that your application depends on. For
    now you're going to remove the `devDependencies` field from that file.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个文件`package.json`包含应用程序清单，其中，除其他字段外，还包含应用程序依赖的软件包。现在，您将从该文件中删除`devDependencies`字段。
- en: You'll also need to add a dependency for the package named `plates`, which will
    be used for changing HTML templates on the fly.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要为名为`plates`的软件包添加一个依赖项，该软件包将用于动态更改HTML模板。
- en: Also, you will be serving some static files that won't need any modification.
    For that you will use a package named `node-static`, which you also need to add
    to the dependencies list of your application manifest.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您将为一些不需要任何修改的静态文件提供服务。为此，您将使用一个名为`node-static`的包，您还需要将其添加到应用程序清单的依赖项列表中。
- en: 'By now your `package.json` should look something like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您的`package.json`应该看起来像这样：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, install those dependencies by using the following:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过以下方式安装这些依赖项：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will install all the dependencies in a local `node_modules` directory
    and should output something like the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在本地的`node_modules`目录中安装所有依赖项，并应该输出类似以下内容：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You don't have to worry about this, since Node will be able to pick up these
    dependencies automatically.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您不必担心这一点，因为Node将能够自动获取这些依赖项。
- en: 'Now you can try to start up your app:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以尝试启动您的应用程序：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you open a browser and point it to `http://localhost:3000`, you will get
    the following response:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开浏览器并将其指向`http://localhost:3000`，您将得到以下响应：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Creating your to-do app
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的待办事项应用程序
- en: Now that you have a Flatiron "hello world" example running, you need to extend
    it so that our to-do application takes shape. For this you will need to create
    and change some files. If you ever get lost, you can always refer to the chapter's
    source code. Also, for your reference, there is a complete list of the project
    files included at the end of this chapter.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经有一个Flatiron“hello world”示例正在运行，您需要扩展它，以便我们的待办事项应用程序成形。为此，您需要创建和更改一些文件。如果您迷失了方向，您可以随时参考本章的源代码。另外，供您参考，本章末尾包含了项目文件的完整列表。
- en: Setting up the database
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置数据库
- en: As in any real application, you will need a reliable way to persist data. Here
    we will use CouchDB, the open-source and document-oriented database. You can either
    choose to install CouchDB locally or use a service over the Internet, such as
    Iris Couch.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何真实应用程序一样，您将需要一种可靠的方式来持久保存数据。在这里，我们将使用CouchDB，这是一个开源的面向文档的数据库。您可以选择在本地安装CouchDB，也可以使用互联网上的服务，如Iris
    Couch。
- en: If you choose to install CouchDB on your local development machine, you can
    head out and visit [http://couchdb.apache.org/](http://couchdb.apache.org/), click
    on **Download** and follow the instructions.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择在本地开发机器上安装CouchDB，您可以前往[http://couchdb.apache.org/](http://couchdb.apache.org/)，点击**下载**并按照说明进行操作。
- en: If you prefer to simply use CouchDB over the Internet, you can head out to [http://www.iriscouch.com/](http://www.iriscouch.com/),
    click on the **Sign Up Now** button and fill the registration form. You should
    have a running CouchDB instance in a matter of seconds.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢简单地通过互联网使用CouchDB，您可以前往[http://www.iriscouch.com/](http://www.iriscouch.com/)，点击**立即注册**按钮并填写注册表格。您应该在几秒钟内拥有一个运行的CouchDB实例。
- en: '![Setting up the database](img/0526OS_02_03.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![设置数据库](img/0526OS_02_03.jpg)'
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As of this writing, Iris Couch is a service that is free for small databases
    with low traffic, which makes it ideal for prototyping an application such as
    this one.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，Iris Couch是一个免费为小型数据库提供低流量服务的服务，这使其非常适合原型设计这样的应用程序。
- en: Accessing CouchDB from Node
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Node访问CouchDB
- en: 'To access a CouchDB database from Node we will use a library called `nano`,
    which you will add to the dependencies section of your `package.json` file:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Node访问CouchDB数据库，我们将使用一个名为`nano`的库，您将把它添加到`package.json`文件的依赖项部分：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now you can install this missing dependency by running the following command
    at the root of your application:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过在应用程序的根目录运行以下命令来安装此缺少的依赖项：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This installs `nano` inside the `node_modules` folder, making it available for
    help while building this app.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`node_modules`文件夹中安装`nano`，使其在构建此应用程序时可用。
- en: To actually connect to the database, you need to define the CouchDB server URL.
    If you're running CouchDB locally, the URL should be similar to `ht` `tp://127.0.0.1:5984`.
    If you are running CouchDB in Iris Couch or a similar service, your URL will be
    similar to `https://mytodoappcouchdb.iriscouch.com`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要实际连接到数据库，您需要定义CouchDB服务器的URL。如果您在本地运行CouchDB，则URL应类似于`ht` `tp://127.0.0.1:5984`。如果您在Iris
    Couch或类似的服务中运行CouchDB，则您的URL将类似于`https://mytodoappcouchdb.iriscouch.com`。
- en: In any of these cases, if you need to access using a username and a password,
    you should encode these in the URL, `http://username:password@mytodoappco` `uchdb.iriscouch.com`
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何这些情况下，如果您需要使用用户名和密码进行访问，您应该将它们编码在URL中，`http://username:password@mytodoappco`
    `uchdb.iriscouch.com`
- en: 'This URL should now be entered into a configuration file under `config/config.json`,
    under the `couchdb` key:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该将此URL输入到`config/config.json`文件的配置文件中，`couchdb`键下：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, encapsulate the access to the database by providing a simple module under
    `lib/couchdb.js`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过在`lib/couchdb.js`下提供一个简单的模块来封装对数据库的访问：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This module will be used to get a CouchDB server object instead of repeating
    the `config` and `nano` dance several times throughout the code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块将用于获取CouchDB服务器对象，而不是在整个代码中多次重复`config`和`nano`的操作。
- en: Application layout
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序布局
- en: 'As many websites do nowadays, we will be using the Twitter Bootstrap framework
    to help us in getting the website look and feel minimal yet presentable. For that
    you will head out to the Bootstrap website [http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/)
    and click on the **Download Bootstrap** button:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多网站现在所做的那样，我们将使用Twitter Bootstrap框架来帮助我们使网站看起来和感觉起来简洁而又可观。为此，您将前往Bootstrap网站[http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/)，并单击**下载Bootstrap**按钮：
- en: '![Application layout](img/0526OS_02_04.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序布局](img/0526OS_02_04.jpg)'
- en: 'You will get a zip file, which you should expand into the local `public` folder,
    ending up with these files:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您将收到一个zip文件，您应该将其扩展到本地的`public`文件夹中，最终得到这些文件：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You will also need to add jQuery into the mix since Bootstrap depends on it.
    Download jQuery from [http://jquery.com](http://jquery.com) and name it `public/js/jquery.min.js`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要将jQuery添加到混合中，因为Bootstrap依赖于它。从[http://jquery.com](http://jquery.com)下载jQuery，并将其命名为`public/js/jquery.min.js`。
- en: Developing the frontend
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发前端
- en: Now that we have Bootstrap and jQuery installed, it's time to create the frontend
    of our application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们安装了Bootstrap和jQuery，是时候创建我们应用程序的前端了。
- en: 'First we will set up the layout HTML template, which defines the outer structure
    for all the pages. For hosting all the templates, we will have a directory named
    `templates`, containing the following under `templates/layout.html`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将设置布局HTML模板，该模板定义了所有页面的外部结构。为了托管所有模板，我们将有一个名为`templates`的目录，其中包含以下内容`templates/layout.html`：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This template loads the CSS and scripts and contains the placeholders for the
    messages and main section.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板加载CSS和脚本，并包含消息和主要部分的占位符。
- en: 'We also need a small module that gets the main content and some other options
    and applies them to this template. We''ll place it inside `templates/layout.js`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个小模块，该模块获取主要内容和一些其他选项，并将它们应用于此模板。我们将其放在`templates/layout.js`中：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In Node.js, a module is simply a JavaScript file that is intended to be used
    by other modules. All the variables inside a module are private; if the module
    author wishes to expose a value or a function to the outside world, it modifies
    or sets the special variable in `module.exports`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js中，模块只是一个旨在被其他模块使用的JavaScript文件。模块内的所有变量都是私有的；如果模块作者希望向外部世界公开值或函数，它会修改或设置`module.exports`中的特殊变量。
- en: In our case, this module exports a function that gets the markup for the main
    page content, the page title, and some options such as the info or the error message
    and applies it to the layout template.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，这个模块导出一个函数，该函数获取主页面内容的标记，页面标题和一些选项，如信息或错误消息，并将其应用于布局模板。
- en: 'We also need to place the following markup file under `templates/alert.html`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将以下标记文件放在`templates/alert.html`下：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now we're ready to start implementing some of the requirements.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备开始实现一些要求。
- en: User registration
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户注册
- en: This app will be offering users a personal to-do list. Before they can access
    it, they need to be signed up in the system. For that you need to define some
    URLs that the user will use to fetch our user sign-up form and submit it.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序将为用户提供一个个人待办事项列表。在他们可以访问它之前，他们需要在系统中注册。为此，您需要定义一些URL，用户将使用这些URL来获取我们的用户注册表单并提交它。
- en: 'Now you will be changing the `app.js` file. This file contains a set of initialization
    procedures, including this block:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您将更改`app.js`文件。此文件包含一组初始化过程，包括此块：
- en: '[PRE27]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This block is routing all the HTTP requests having a `/` URL and where the HTTP
    method is `GET` to the given function. This function will then be invoked for
    every request with these two characteristics in which case you are replying, `{"hello":"world"}`,
    which the user will see printed on the browser.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这个块正在将所有具有`/`URL的HTTP请求路由，并且HTTP方法是`GET`到给定的函数。然后，对于具有这两个特征的每个请求，将调用此函数，在这种情况下，您正在回复`{"hello":"world"}`，用户将在浏览器上看到打印出来。
- en: Now we need to remove this routing and add some routes that allow a user to
    register himself.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要删除这个路由，并添加一些路由，允许用户注册自己。
- en: 'For that, create a folder named `routes` where you will place all the routing
    modules. The first one is `routes/users.js` and will contain the following code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，创建一个名为`routes`的文件夹，您将在其中放置所有路由模块。第一个是`routes/users.js`，将包含以下代码：
- en: '[PRE28]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This new module exports a function that will bind two new routes `GET /new`
    and `POST /`. These routes will later be appended to the `/users` namespace, which
    means that they will get activated when the server receives a `GET` request to
    `/users/new` and a `POST` request to `/users`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新模块导出一个函数，将绑定两个新路由`GET /new`和`POST /`。这些路由稍后将被附加到`/users`命名空间，这意味着当服务器接收到`GET`请求`/users/new`和`POST`请求`/users`时，它们将被激活。
- en: 'On the `GET /new` route, we will present a template that contains a user form.
    Place it under `templates/users/new.html`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GET /new`路由上，我们将呈现一个包含用户表单的模板。将其放在`templates/users/new.html`下：
- en: '[PRE29]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We will also need to create a `Thank you for registering` template, which you
    need to place in `templates/users/show.html`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建一个`感谢您注册`模板，您需要将其放在`templates/users/show.html`中：
- en: '[PRE30]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the `POST /` route handler, we'll do some simple validation and insert the
    user document into the CouchDB database by calling the function named `insert`.
    This function tries to insert the user document and makes use of some clever error
    handling. If the error is a "404 Not Found", it means that the `users` database
    hasn't been created, and we take the opportunity to create it and automatically
    repeat the user document insertion.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在`POST /`路由处理程序中，我们将进行一些简单的验证，并通过调用名为`insert`的函数将用户文档插入CouchDB数据库。此函数尝试插入用户文档，并利用一些巧妙的错误处理。如果错误是“404
    Not Found”，这意味着`users`数据库尚未创建，我们将利用这个机会创建它，并自动重复用户文档插入。
- en: You're also catching the 409 Conflict HTTP status code, which CouchDB will return
    if we try to insert a document with a key that already exists. Since we're using
    the user e-mail as the document key, we inform the user that such a username already
    exists.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您还捕获了409冲突的HTTP状态码，如果我们尝试插入已存在的键的文档，CouchDB将返回此状态码。由于我们使用用户电子邮件作为文档键，因此我们通知用户该用户名已经存在。
- en: Note
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Here, among other simplifications, you're storing the user password in plain
    text inside the database. This is obviously not recommended, but since the core
    of this book is not how to create a web application, this implementation detail
    is not relevant to your goals.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，除了其他简化之外，您将用户密码以明文存储在数据库中。这显然是不推荐的，但由于本书的核心不是如何创建Web应用程序，因此这个实现细节与您的目标无关。
- en: 'Now we need to attach these new routes to the `/users/` URL namespace by updating
    and adding a line right before `app.start(3000)` in the file `app.js`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要通过更新并在`app.js`文件中的`app.start(3000)`之前添加一行来将这些新路由附加到`/users/` URL命名空间：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now you can start your application by typing in the command line:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过在命令行中输入以下命令来启动应用程序：
- en: '[PRE32]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This starts the server. Then open a web browser and hit `http://localhost:3000/users/new`.
    You will get a user form:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动服务器。然后打开Web浏览器，访问`http://localhost:3000/users/new`。您将获得一个用户表单：
- en: '![User registration](img/0526OS_02_05.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![用户注册](img/0526OS_02_05.jpg)'
- en: 'Submit an e-mail and a password and you will get a confirmation screen:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 提交电子邮件和密码，您将获得一个确认屏幕：
- en: '![User registration](img/0526OS_02_06.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![用户注册](img/0526OS_02_06.jpg)'
- en: This screen will present you with a link to the `/session/new` URL, which doesn't
    exist yet.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕将向您显示一个链接，指向尚不存在的`/session/new` URL。
- en: Now you're ready to implement the login screens.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经准备好实现登录屏幕。
- en: Logging in and session management
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登录和会话管理
- en: 'To be able to keep a session, your HTTP server needs to be able to do two things:
    parse cookies and store session data. For this we use two modules, namely, `flatware-cookie-parser`
    and `flatware-session`, which you should add to the `package.json` manifest:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够保持会话，您的HTTP服务器需要能够执行两件事：解析cookie和存储会话数据。为此，我们使用两个模块，即`flatware-cookie-parser`和`flatware-session`，您应该将它们添加到`package.json`清单中：
- en: '[PRE33]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, install the missing dependencies:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，安装缺少的依赖项：
- en: '[PRE34]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Next, add these middleware components to your server in the file `app.js`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在文件`app.js`中向您的服务器添加这些中间件组件：
- en: '[PRE35]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We also need to create a `routes/session.js` module to handle the new session
    routes:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建一个`routes/session.js`模块来处理新的会话路由：
- en: '[PRE36]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Next we need to add a view template under `templates/session/new.html` that
    contains the login form:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在`templates/session/new.html`下添加一个视图模板，其中包含登录表单：
- en: '[PRE37]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Next, stop the server if it''s still running (by pressing *Ctrl* + *C*) and
    start it again:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，如果服务器仍在运行，请停止服务器（按下*Ctrl* + *C*），然后重新启动它：
- en: '[PRE38]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Point your browser to `http://localhost:3000/session/new` and insert the e-mail
    and password of a user you already have registered:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 将浏览器指向`http://localhost:3000/session/new`，并插入您已经注册的用户的电子邮件和密码：
- en: '![Logging in and session management](img/0526OS_02_07.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![登录和会话管理](img/0526OS_02_07.jpg)'
- en: If the loginsucceeds, you will be redirected to the `/todos` URL, which the
    server does not respond to yet.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果登录成功，您将被重定向到`/todos` URL，服务器尚未响应。
- en: Next we're going to make the to-do list work.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使待办事项列表起作用。
- en: The to-do list
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 待办事项列表
- en: For displaying the to-do list, we're going to use a table. It would be nice
    to sort the to-do items by using drag-and-drop. An easy way to enable this is
    by using jQuery UI. For this feature alone you don't need the full jQuery UI library,
    you can download a custom-built one by pointing your browser to `http://jqueryui.com/download`,
    deselecting every option except the **Sortable** option in the **Interactions**
    element, and clicking on the **Download** button. Unzip the resulting file and
    copy the `jquery-ui-1.8.23.custom.min.js` file into `public/js`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示待办事项列表，我们将使用表格。通过使用jQuery UI，可以很容易地对待办事项进行排序。启用此功能的简单方法是使用jQuery UI。仅需此功能，您无需完整的jQuery
    UI库，可以通过将浏览器指向`http://jqueryui.com/download`，取消**交互**元素中除**Sortable**选项之外的所有选项，并单击**Download**按钮来下载自定义构建的jQuery
    UI库。解压缩生成的文件，并将`jquery-ui-1.8.23.custom.min.js`文件复制到`public/js`中。
- en: '![The to-do list](img/0526OS_02_08.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![待办事项列表](img/0526OS_02_08.jpg)'
- en: 'We need to refer this script in the `templates.html` or `layout.html` file:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`templates.html`或`layout.html`文件中引用此脚本：
- en: '[PRE39]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: You should also add a file under `public/js/todos.js` that will contain some
    frontend interactive code.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该在`public/js/todos.js`下添加一个文件，其中包含一些前端交互代码。
- en: 'Now we need to respond to the `/todos` URL by firstly including the new routing
    in the `app.js` file:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要通过首先在`app.js`文件中包含新的路由来响应`/todos` URL：
- en: '[PRE40]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Then we need to place the new to-do routes module under `routes/todos.js`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要将新的待办事项路由模块放在`routes/todos.js`下：
- en: '[PRE41]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This module responds to the to-do index (`GET /todos`), fetching and presenting
    all the to-do items for the logged-in user. Place the following template under
    `templates/todos/index.html`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块响应待办事项索引（`GET /todos`），获取并呈现已登录用户的所有待办事项。将以下模板放在`templates/todos/index.html`下：
- en: '[PRE42]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Another new route is `GET /todos/new`, presenting the user a form for creating
    a new to-do item. This route makes use of a new template placed in `templates/todos/new.html`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个新路由是`GET /todos/new`，向用户呈现创建新待办事项的表单。此路由使用放置在`templates/todos/new.html`中的新模板：
- en: '[PRE43]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The `POST /todos` route creates a new to-do item by calling the local `insert`
    function, which handles the error for when the database does not exist, creating
    it as needed and retrying the `insert` function later.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST /todos`路由通过调用本地的`insert`函数创建新的待办事项，该函数处理了数据库不存在时的错误，并在需要时创建数据库并稍后重试`insert`函数。'
- en: 'The index template depends on the existence of a client-side script placed
    under `public/js/todos.js`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 索引模板取决于`public/js/todos.js`下放置的客户端脚本的存在：
- en: '[PRE44]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This file activates and handles the drag-and-drop item, making an AJAX call
    to the `/todos/sort` URL with the new order of the to-do items.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件激活并处理拖放项目，通过向`/todos/sort` URL发出AJAX调用，传递待办事项的新顺序。
- en: The **Delete** button on each item is also handled in the `todos.js` routing
    module by loading the user to-do items, removing the item at the given position
    and storing the items back.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`todos.js`路由模块还处理了每个项目上的**删除**按钮，它通过加载用户的待办事项，删除给定位置的项目并将项目存储回去来处理。'
- en: Note
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may have noticed by now that we store all the to-do items for a given user
    inside one document in the `todos` database. This technique is simple and works
    well if all users keep the number of to-dos relatively low. Anyway, this detail
    is not important for our purpose.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您可能已经注意到我们将给定用户的所有待办事项存储在`todos`数据库中的一个文档中。如果所有用户保持待办事项的数量相对较低，这种技术是简单且有效的。无论如何，这些细节对我们的目的并不重要。
- en: 'To make this work, we need to provide a routing middleware under `middleware/logged_in.js`.
    This middleware component is responsible for protecting some routes and, when
    the user is not logged in, redirecting the user to the login screen instead of
    executing that route:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为使其工作，我们需要在`middleware/logged_in.js`下提供一个路由中间件。这个中间件组件负责保护一些路由，并在用户未登录时将用户重定向到登录屏幕，而不是执行该路由：
- en: '[PRE45]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Finally, stop the server if it''s still running (by hitting *Ctrl* + *C*) and
    start it up again:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果服务器仍在运行，请停止它（按下*Ctrl* + *C*），然后再次启动它：
- en: '[PRE46]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Point your browser to `http://localhost:3000/session/new` , and enter the e-mail
    and password of the user you already have registered. You will then be redirected
    to the to-do list of the user, which will start off empty.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 将浏览器指向`http://localhost:3000/session/new`，并输入您已经注册的用户的电子邮件和密码。然后，您将被重定向到用户的待办事项列表，该列表将开始为空。
- en: '![The to-do list](img/0526OS_02_09.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![待办事项列表](img/0526OS_02_09.jpg)'
- en: 'You can now click on the **New To-Do** button, obtaining the following form:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以单击**新建待办事项**按钮，获取以下表单：
- en: '![The to-do list](img/0526OS_02_10.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![待办事项列表](img/0526OS_02_10.jpg)'
- en: 'Insert some text and click on the **Create** button. The to-do item will be
    inserted in the database and the updated to-do list will be presented:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 插入一些文本，然后单击**创建**按钮。待办事项将被插入到数据库中，并且更新后的待办事项列表将被呈现：
- en: '![The to-do list](img/0526OS_02_11.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![待办事项列表](img/0526OS_02_11.jpg)'
- en: You can insert as many to-do items as you like. Once you've had enough, you
    can try to reorder them by dragging-and-dropping the table rows.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以插入任意数量的待办事项。一旦您满意了，您可以尝试通过拖放表格行来重新排序它们。
- en: '![The to-do list](img/0526OS_02_12.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![待办事项列表](img/0526OS_02_12.jpg)'
- en: You can also click on the **Delete** button to remove a specific to-do item.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以单击**删除**按钮来删除特定的待办事项。
- en: File summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件摘要
- en: 'The following is a list of the files that compose this application:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是组成此应用程序的文件列表：
- en: '[PRE47]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter you learned how to create a simple web application using Node.js,
    Flatiron.js, and some other components.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何使用Node.js、Flatiron.js和其他一些组件创建一个简单的Web应用程序。
- en: This application will be the target of our user-interface tests in future chapters.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序将成为我们将来章节中用户界面测试的目标。
