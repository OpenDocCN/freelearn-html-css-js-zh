- en: Chapter 9. Working with Shortcuts, Fallbacks, and Packs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章。使用快捷方式、回退和打包
- en: If you spend any time working with CSS, then it is likely you will come across
    instances where you wished there was a quicker way to add a particular block of
    code to your page, apply vendor prefixes, or perhaps set a predefined border to
    an element on the page.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你花时间工作与 CSS，那么你可能会遇到一些情况，你希望有一种更快的方法将特定的代码块添加到你的页面中，应用供应商前缀，或者可能为页面上的元素设置预定义的边框。
- en: 'We can easily achieve this by using one or more of the many shortcuts, fallbacks,
    or pack plugins available for use with PostCSS. In this chapter, we''ll explore
    some common scenarios where plugins are required, before learning how to create
    them in the next chapter. We will cover a number of topics throughout this chapter,
    which will include the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用一个或多个可用的快捷方式、回退或打包插件轻松实现这一点。在本章中，我们将探讨一些需要插件的一些常见场景，在下一章中我们将学习如何创建它们。本章将涵盖多个主题，包括以下内容：
- en: Exploring some of the PostCSS shortcuts and packs available for use
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索一些可用的 PostCSS 快捷方式和打包
- en: Using plugins to lint and optimize your CSS code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用插件来检查和优化你的 CSS 代码
- en: Supplementing the existing shortcuts available in PostCSS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 补充 PostCSS 中现有的快捷方式
- en: Applying fallbacks to PostCSS code to maintain support for older browsers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将回退应用到 PostCSS 代码以保持对旧浏览器的支持
- en: Let's get cracking!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Using shortcut plugins in PostCSS
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 PostCSS 中使用快捷插件
- en: Building a web-based application or site can be a lengthy process—there are
    so many elements to consider, and it takes time to create content that is engaging
    and informative.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个基于网络的程序或网站可能是一个漫长的过程——有如此多的元素需要考虑，创建引人入胜且信息丰富的内容需要时间。
- en: 'Naturally, a smart designer or developer will always look for a shortcut to
    save time—after all, why take an hour to do something, if a shortcut will take
    half the time? The great thing about PostCSS is that it has a good selection of
    shortcut plugins that we can use; these include plugins such as the examples:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 自然地，一个聪明的设计师或开发者总是会寻找捷径来节省时间——毕竟，为什么要花一个小时来做某事，如果有一个捷径只需要一半的时间？PostCSS 的好处在于它提供了一系列的快捷插件供我们使用；这些包括例如以下示例：
- en: '`postcss-focus`: This plugin is available at [https://github.com/postcss/postcss-focus](https://github.com/postcss/postcss-focus),
    this simple plugin adds a `:focus` pseudo-selector to any `:hover` attribute encountered
    in a style rule.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postcss-focus`：此插件可在 [https://github.com/postcss/postcss-focus](https://github.com/postcss/postcss-focus)
    找到，这个简单的插件为任何在样式规则中遇到的 `:hover` 属性添加一个 `:focus` 伪选择器。'
- en: '`postcss-border`: If specified in a shorthand version, this plugin will add
    a `border-width` attribute to an existing `border:` attribute. The plugin source
    is available from [https://github.com/andrepolischuk/postcss-border](https://github.com/andrepolischuk/postcss-border).'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postcss-border`：如果指定为缩写版本，此插件将为现有的 `border:` 属性添加一个 `border-width` 属性。插件源代码可在
    [https://github.com/andrepolischuk/postcss-border](https://github.com/andrepolischuk/postcss-border)
    获取。'
- en: '`postcss-short-data`: This plugin is available at [https://github.com/jonathantneal/postcss-short-data](https://github.com/jonathantneal/postcss-short-data),
    this interesting plugin allows us to write shorthand data attribute selectors,
    akin to pseudo-selectors, which are compiled into data- attributes.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postcss-short-data`：此插件可在 [https://github.com/jonathantneal/postcss-short-data](https://github.com/jonathantneal/postcss-short-data)
    找到，这个有趣的插件允许我们编写类似于伪选择器的缩写数据属性选择器，这些选择器被编译成 data- 属性。'
- en: We've already incorporated or talked about a number of the shortcut plugins
    that are available within PostCSS—these include `postcss-responsive-type` which
    we used to build a responsive page earlier in the book, `easings`, and of course,
    `postcss-transform-shortcut` from [Chapter 7](ch07.html "Chapter 7. Animating
    Elements"), *Animating Content*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了或讨论了 PostCSS 中可用的许多快捷插件——这些包括我们之前在书中用来构建响应式页面的 `postcss-responsive-type`，`easings`，当然还有来自第
    7 章（[第 7 章。元素动画](ch07.html "第 7 章。元素动画"））的 `postcss-transform-shortcut`，*内容动画*。
- en: There are a lot more plugins available for use. Throughout the course of this
    chapter, we're going to explore some of the shortcut plugins available, plus some
    of the packs that we can use to supplement functionality within our preprocessor.
    A good place to start is the selection of plugin packs available for use within
    PostCSS—let's take a moment to explore these in more detail.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的插件还有很多。在本章的整个过程中，我们将探讨一些可用的快捷插件，以及我们可以用来补充我们预处理器功能的插件包。一个好的开始是PostCSS中可用的插件包的选择——让我们花点时间更详细地探索这些。
- en: Exploring plugin packs for PostCSS
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索PostCSS插件包
- en: Cast your mind back, if you will, to some advice I gave earlier about plugins—remember
    how I said that in an ideal world, a plugin should serve a single purpose?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，回顾一下我之前关于插件的建议——记得我说过在一个理想的世界里，一个插件应该只服务于单一目的吗？
- en: 'Well, one might be forgiven for thinking that we''re ignoring this advice when
    we talk about plugin packs. In reality, we''re not; all of the plugin packs available
    for PostCSS provide a single interface for multiple single plugins. At present,
    the list of plugin packs include these examples:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，当我们在谈论插件包时，可能会有人认为我们忽略了这些建议。实际上，我们并没有；所有可用的PostCSS插件包都为多个单个插件提供了一个单一接口。目前，插件包的列表包括以下示例：
- en: '**Oldie**: Available from [https://github.com/jonathantneal/oldie](https://github.com/jonathantneal/oldie),
    this plugin is an interface for nine separate plugins; it handles support for
    older versions of IE.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**老版本支持插件（Oldie）**: 可从 [https://github.com/jonathantneal/oldie](https://github.com/jonathantneal/oldie)
    获取，这个插件是九个独立插件的接口；它处理了对旧版IE的支持。'
- en: '**Short**: Hosted at [https://github.com/jonathantneal/postcss-short](https://github.com/jonathantneal/postcss-short),
    this plugin lets us write styles using our own shorthand properties.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简写插件（Short）**: 位于 [https://github.com/jonathantneal/postcss-short](https://github.com/jonathantneal/postcss-short)，这个插件允许我们使用自己的缩写属性来编写样式。'
- en: '**AtCSS** : This plugin is available at [https://github.com/morishitter/atcss](https://github.com/morishitter/atcss),
    this interesting plugin provides a new take on SASS'' `@extend` by allowing us
    to create rules that inherit from base rules.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AtCSS**: 这个插件可在 [https://github.com/morishitter/atcss](https://github.com/morishitter/atcss)
    获取，这个有趣的插件通过允许我们创建从基础规则继承的规则，为SASS的`@extend`提供了一个新的视角。'
- en: '**precss**: This plugin, from [https://github.com/jonathantneal/precss](https://github.com/jonathantneal/precss),
    allows us to use SASS-like markup in our style sheets. We will explore this in
    more detail in [Chapter 11](ch11.html "Chapter 11. Manipulating Custom Syntaxes"),
    *Manipulating Custom Syntaxes*.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**precss**: 来自 [https://github.com/jonathantneal/precss](https://github.com/jonathantneal/precss)
    的这个插件允许我们在样式表中使用类似SASS的标记。我们将在第11章“操作自定义语法”中更详细地探讨这一点。'
- en: '**Stylelint**: This plugin pack should form part of any PostCSS developer''s
    toolkit: it allows us to lint our style sheets automatically. The pack is available
    from [https://github.com/stylelint/stylelint](https://github.com/stylelint/stylelint).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Stylelint**: 这个插件包应该是任何PostCSS开发者的工具包的一部分：它允许我们自动检查我们的样式表。这个插件包可在 [https://github.com/stylelint/stylelint](https://github.com/stylelint/stylelint)
    获取。'
- en: '**Cssnano**: In a similar vein, `cssnano` should be part of any developer''s
    toolkit: this pack is perfect for compressing and optimizing code within our style
    sheets. You can get the plugin from [https://github.com/ben-eb/cssnano](https://github.com/ben-eb/cssnano).'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cssnano**: 类似地，`cssnano` 应该是任何开发者的工具包的一部分：这个包非常适合压缩和优化我们样式表中的代码。你可以从 [https://github.com/ben-eb/cssnano](https://github.com/ben-eb/cssnano)
    获取这个插件。'
- en: '**Rucksack**: Last, but by no means least, Rucksack (as described by the developer),
    is a "…little bag of CSS superpowers". This pack adds support for functionality
    such as `font src` generation, providing fallback support for RGBA values, or
    the `clearfix` hack.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Rucksack**: 最后，但绝不是最不重要的，Rucksack（如开发者所描述的），是一个“……CSS超级能力的口袋”。这个包增加了对诸如`font
    src`生成、提供RGBA值的回退支持或`clearfix`技巧等功能的支持。'
- en: These packs provide a real mix of functionality—it is naturally up to us to
    decide which plugins we want to use. At this point, though, one might be tempted
    to ask "why use a pack—surely this adds unnecessarily redundant functionality
    that we're trying to avoid adding?"
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些插件包提供了真正的功能混合——自然是我们决定要使用哪些插件。然而，此时，有人可能会想问“为什么使用插件包——这难道不是添加了不必要的冗余功能，而我们试图避免添加这些功能？”
- en: It's a good question, the simple answer is that it will depend on your requirements.
    If all we're interested in is adding vendor prefixes, then checking and compressing
    our code, then we would most likely use `autoprefixer`, `cssnano`, and `stylelint`.
    But if we wanted to add property aliases, then `autoprefixer` can be dropped in
    favor of using Rucksack with `cssnano` and `stylelint`. The key here, though,
    is to carefully assess what you need, and work out the best combination of plugins
    to use from the selection available for PostCSS.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个好问题，简单的答案是这取决于你的需求。如果我们只对添加供应商前缀感兴趣，然后检查和压缩我们的代码，那么我们可能会使用`autoprefixer`、`cssnano`和`stylelint`。但如果我们想添加属性别名，那么可以放弃使用`autoprefixer`，转而使用带有`cssnano`和`stylelint`的Rucksack。不过，关键在于仔细评估你的需求，并确定从PostCSS提供的插件中选择最佳组合。
- en: 'Okay, time for a change: let''s move on! We will be exploring some of these
    plugin packs over the next few pages: let''s make a start with a simple plugin,
    in the form of `postcss-short`.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，是时候改变一下了：让我们继续前进！在接下来的几页中，我们将探索一些这些插件包：让我们从一个简单的插件开始，形式为`postcss-short`。
- en: Writing styles in shorthand
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用缩写编写样式
- en: 'This plugin, available from [https://github.com/jonathantneal/postcss-short](https://github.com/jonathantneal/postcss-short),
    is a wrapper for several plugins available for the PostCSS ecosystem; these include
    Shorthand Border, Shorthand Color, and Shorthand Size. Installing the plugin is
    a breeze—it uses the same format as most other PostCSS plugins, and can be installed
    using this command within our project root area, in a Node.js command prompt session:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件可以从[https://github.com/jonathantneal/postcss-short](https://github.com/jonathantneal/postcss-short)获取，它是PostCSS生态系统中的几个插件的包装器；这些包括缩写边框、缩写颜色和缩写大小。安装这个插件非常简单——它使用与大多数其他PostCSS插件相同的格式，并且可以在我们的项目根区域内的Node.js命令提示符会话中使用此命令安装：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The great thing about this plugin (and other plugin packs) is that it removes
    the need to call lots of separate plugins. We must bear in mind though that to
    make this worthwhile, we need to be calling most of the plugins in some form or
    other. If we're only calling one or two from `postcss-short`, then we may prefer
    to call them individually, and not use the `postcss-short` plugin.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件（以及其他插件包）的伟大之处在于，它消除了调用大量单独插件的需求。但我们必须记住，为了使这变得有价值，我们需要以某种形式调用大多数插件。如果我们只从`postcss-short`中调用一个或两个，那么我们可能更愿意单独调用它们，而不是使用`postcss-short`插件。
- en: 'Leaving aside any concerns about using the plugin, let''s take a look at some
    examples of it in action. The best way to experience it is to use the online editor
    at [http://jonathantneal.github.io/postcss-short/](http://jonathantneal.github.io/postcss-short/).
    We can use this to experiment before adding the final result to our style sheet
    prior to compilation:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 放下对使用插件的任何顾虑，让我们来看看它在实际应用中的几个例子。体验它的最佳方式是使用[http://jonathantneal.github.io/postcss-short/](http://jonathantneal.github.io/postcss-short/)上的在线编辑器。我们可以用它来实验，在编译前将最终结果添加到我们的样式表中：
- en: '![Writing styles in shorthand](img/BO5194_09_01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![使用缩写编写样式](img/BO5194_09_01.jpg)'
- en: In this example (taken from the plugin site), we've used all of the plugins,
    with the exception of Shorthand Text and Shorthand Data. In our code, we've used
    the relevant shorthand as specified for the plugin—PostCSS will compile this into
    valid CSS styles, as outlined within each plugin.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子（来自插件网站）中，我们使用了所有插件，除了缩写文本和缩写数据。在我们的代码中，我们使用了插件指定的相关缩写——PostCSS将编译成有效的CSS样式，正如每个插件中概述的那样。
- en: Which plugins we use will of course depend on our requirements—there is every
    possibility that you will find yourselves using particular plugins more than others.
    Staying with the theme of shorthand, though, there is one plugin pack that is
    likely to feature often in your toolkit—Rucksack. No, I don't suggest this is
    an opportunity to go on holiday (no pun intended), but more an occasion to use
    what will be a very useful set of plugins within PostCSS.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用哪些插件当然取决于我们的需求——完全有可能你将发现自己在某些插件上比其他插件使用得更多。然而，就缩写主题而言，有一个插件包可能会经常出现在你的工具箱中——Rucksack。不，我并不建议这是一个去度假的机会（没有开玩笑），而是一个使用PostCSS中将是一个非常有用的插件集的机会。
- en: Adding shortcuts with Rucksack
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Rucksack添加快捷方式
- en: Mention the word Rucksack, and one might be forgiven for thinking we were about
    to go on a journey or holiday—whilst the desire might be there, there are more
    practical matters to attend to first!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 提到Rucksack这个词，人们可能会认为我们即将开始一段旅程或假期——虽然这种愿望可能存在，但还有更多实际的事情需要先处理！
- en: 'This said, working with PostCSS can easily be seen as going on a journey; this
    is particularly true when working with plugins. One of the plugins (or to be more
    accurate, packs) that you will very likely come across when working with PostCSS
    is Rucksack (see the play on words there?). This useful pack, available from [http://simplaio.github.io/rucksack/](http://simplaio.github.io/rucksack/),
    contains a number of plugins that have been linked together to provide additional
    functionality that we can use when compiling style sheets using Rucksack, such
    as these examples:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，使用PostCSS很容易被视为一次旅行；当与插件一起工作时，这一点尤其正确。当你与PostCSS一起工作时，你可能会遇到的一个插件（或者更准确地说，是一组插件）是Rucksack（那里有文字游戏？）。这个有用的插件组，可在[http://simplaio.github.io/rucksack/](http://simplaio.github.io/rucksack/)找到，包含了一系列相互链接的插件，为我们提供了在编译样式表时使用Rucksack的附加功能，例如以下示例：
- en: '**Alias**: This is available at [https://github.com/seaneking/postcss-alias](https://github.com/seaneking/postcss-alias),
    this plugin allows us to create shorthand CSS properties.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**别名**：此功能可在[https://github.com/seaneking/postcss-alias](https://github.com/seaneking/postcss-alias)找到，此插件允许我们创建简写CSS属性。'
- en: '**Clearfix**: As a developer, I am sure you will be familiar with the clearfix
    hack: this plugin by Sean King provides the PostCSS equivalent, and is available
    at [https://github.com/seaneking/postcss-clearfix](https://github.com/seaneking/postcss-clearfix).'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清除浮动**：作为一名开发者，我确信你一定熟悉清除浮动的技巧：Sean King的这个插件提供了PostCSS的等效功能，可在[https://github.com/seaneking/postcss-clearfix](https://github.com/seaneking/postcss-clearfix)找到。'
- en: '**Font src expansion**: How many times have you used custom font declarations
    in your code? They''re a pain to write—another plugin by Sean King (at [https://github.com/seaneking/postcss-fontpath](https://github.com/seaneking/postcss-fontpath)),
    makes it a cinch to add to your code.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字体源扩展**：你有多少次在代码中使用自定义字体声明？它们编写起来很痛苦——Sean King（在[https://github.com/seaneking/postcss-fontpath](https://github.com/seaneking/postcss-fontpath)）的另一个插件，使得将其添加到代码中变得轻而易举。'
- en: The irony here, though, is that we've already used Rucksack without realizing
    it—remember the `postcss-responsive-type` plugin we used back in [Chapter 4](ch04.html
    "Chapter 4. Building Media Queries"), *Building Media Queries*? Or the `autoprefixer`
    plugin we've used in just about every chapter throughout the book? Both of these
    plugins are available via Rucksack—Rucksack is really an abstract layer that ties
    in access from multiple plugins into one consistent interface for us to use.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这里的讽刺之处在于，我们已经在不知不觉中使用了Rucksack——还记得我们在[第4章](ch04.html "第4章。构建媒体查询")中使用的`postcss-responsive-type`插件吗？或者我们在本书的几乎所有章节中使用的`autoprefixer`插件？这两个插件都可通过Rucksack获得——Rucksack实际上是一个抽象层，它将多个插件整合到一个一致的用户界面中，供我们使用。
- en: 'Okay, enough chitchat: let''s get stuck into a demo and see some action! For
    our next demo, we''re going to construct a simple slider using some standard HTML
    markup and CSS3 styles; no JavaScript will be used at all. We''ll start with a
    quick run-through of our slider, before we convert the style sheet to use Rucksack.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，闲话少说：让我们开始一个演示，看看一些实际操作！对于我们的下一个演示，我们将使用一些标准的HTML标记和CSS3样式构建一个简单的滑块；根本不会使用JavaScript。在我们将样式表转换为使用Rucksack之前，我们将快速浏览一下我们的滑块。
- en: Introducing our demo
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍我们的演示
- en: For this next demo, we're going to break tradition and not install the plugin
    we're about to use first, before creating our demo. Instead, we'll set up our
    demo first—we can then ascertain where Rucksack can be used once we've set our
    baseline solution.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于接下来的演示，我们将打破传统，在创建我们的演示之前，不安装我们即将使用的插件。相反，我们将首先设置我们的演示——一旦我们设定了基线解决方案，我们就可以确定Rucksack可以用在哪里。
- en: 'Our demo centers on a simple image slider, which uses pure CSS3 styling to
    control the animation. This is a screenshot of what we''re going to create:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的演示集中在简单的图片滑块上，它使用纯CSS3样式来控制动画。这是我们即将创建的截图：
- en: '![Introducing our demo](img/BO5194_09_02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![介绍我们的演示](img/BO5194_09_02.jpg)'
- en: To see the demo in action, go ahead and extract the `T45 – converting to use
    Rucksack` folder from a copy of the code download that accompanies this book—save
    it to our project area. Go ahead and preview the results by running `slider.html`
    in a browser, then click on the numbers in the bottom left to move between different
    images.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看演示的实际效果，请从本书附带的代码下载副本中提取`T45 – 转换为使用Rucksack`文件夹——将其保存到我们的项目区域。然后在浏览器中运行`slider.html`来预览结果，然后点击左下角的数字在不同的图像之间切换。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You will need to rename the style `post-completed.css` file `style.css` for
    it to operate correctly.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将样式文件 `post-completed.css` 重命名为 `style.css` 以确保其正确运行。
- en: Installing Rucksack as a plugin
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Rucksack 作为插件安装
- en: 'With our demo in place, it''s time to install Rucksack, and ascertain where
    we can use it in our demo! Rucksack, like most other PostCSS plugins, can be installed
    using the same method—we can use NPM:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的演示就绪后，是时候安装 Rucksack 并确定我们可以在我们的演示中使用它的位置！Rucksack，像大多数其他 PostCSS 插件一样，可以使用相同的方法安装——我们可以使用
    NPM：
- en: Fire up a Node.js command prompt, then change the working folder to our project
    area.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Node.js 命令提示符，然后更改工作文件夹到我们的项目区域。
- en: In the prompt, enter `npm install rucksack-css --save-dev`, then press *Enter*.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符中输入 `npm install rucksack-css --save-dev`，然后按 *Enter*。
- en: NPM will go away and install the plugin—if all is well, we should see something
    akin to this:![Installing Rucksack as a plugin](img/BO5194_09_03.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NPM 将安装插件——如果一切顺利，我们应该看到类似这样的东西：![安装 Rucksack 作为插件](img/BO5194_09_03.jpg)
- en: 'A note of caution—there are several plugins available for Rucksack: make sure
    you install the right one! There is a Gulp plugin, but this does not appear to
    work within PostCSS, even though we are using Gulp as our task runner.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：Rucksack 有几个插件可用：确保安装正确的插件！有一个 Gulp 插件，但它似乎在 PostCSS 中不起作用，尽管我们使用 Gulp 作为任务运行器。
- en: This aside, let's move on. Before we go through the process of converting our
    slider to use Rucksack, let's take a quick look at using it in action with a simple
    easing demo.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这个之外，让我们继续前进。在我们通过将我们的滑块转换为使用 Rucksack 的过程之前，让我们快速看一下使用它进行简单缓动演示的情况。
- en: Easing into using Rucksack
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 慢慢使用 Rucksack
- en: Any developer who spends time animating content on a website will no doubt have
    created rules to control how content eases in or out of the page. Striking the
    right balance between easing content in and out of the page and the site becoming
    too overladen with effects takes time to get right!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 任何在网站上花费时间动画内容的开发者无疑都创建过规则来控制内容如何进入或退出页面。在内容进入和退出页面以及网站效果过载之间找到正确的平衡需要时间才能做到！
- en: 'Leaving aside the awful pun in that last comment, this is where Rucksack can
    help—one of the simpler plugins that forms part of this package is `postcss-easings`.
    This plugin, available from [https://github.com/postcss/postcss-easings](https://github.com/postcss/postcss-easings)
    and one that we touched on in [Chapter 7](ch07.html "Chapter 7. Animating Elements"),
    *Animating Content*, has but one role in life: convert any recognized easing name
    into a cubic-bezier equivalent value.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 不考虑最后一条评论中的糟糕的双关语，这正是 Rucksack 可以帮助的地方——这个包中包含的几个简单插件之一是 `postcss-easings`。这个插件可以从
    [https://github.com/postcss/postcss-easings](https://github.com/postcss/postcss-easings)
    获取，我们在 [第 7 章](ch07.html "第 7 章。动画元素") *动画内容* 中也提到了它，它的唯一作用就是将任何已识别的缓动名称转换为 cubic-bezier
    等价值。
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: For an example of a Bezier curve, take a look at [http://cubic-bezier.com/#.17,.67,.83,.67](http://cubic-bezier.com/#.17,.67,.83,.67).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要查看贝塞尔曲线，请访问 [http://cubic-bezier.com/#.17,.67,.83,.67](http://cubic-bezier.com/#.17,.67,.83,.67)。
- en: Is there any benefit in doing this, I hear you ask? Well, two that come to mind
    are consistency and a central point of source. Let me explain what I mean.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你问这样做有什么好处吗？嗯，我想到了两个：一致性和中心源点。让我解释一下我的意思。
- en: 'A central point of source borrows a principle from CSS preprocessors such as
    SASS or less, where a single value is defined at the top of the file; any instance
    found elsewhere in the file will be automatically replaced by its value (in this
    instance, a `cubic-bezier` easing). This then helps with consistency: we can specify
    names for any custom easings in the configuration, which will replace any instance
    found during compilation.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 中心源点借鉴了 CSS 预处理器（如 SASS 或 less）的原则，其中在文件顶部定义了一个单一值；文件中其他地方找到的任何实例都将自动替换为其值（在这个例子中，是一个
    `cubic-bezier` 缓动）。这有助于保持一致性：我们可以在配置中指定任何自定义缓动的名称，这将替换在编译过程中找到的任何实例。
- en: The benefit of this means that we only need to update one central point (that
    is, point of source), and can avoid mixing different types of easing values in
    our code—they will be converted to cubic-bezier values at compilation.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的优点是，我们只需要更新一个中心点（即源点），并且可以避免在我们的代码中混合不同类型的缓动值——它们将在编译时转换为 cubic-bezier 值。
- en: 'Okay, let''s move on: time for a demo! Before we get stuck in, let''s quickly
    cover what we''re going to construct. Our demo is a simple affair with four squares
    that we will animate using nothing more than plain HTML and CSS (yes, no JavaScript).
    We will use a handful of effects, such as `easeOutBack`, which looks something
    like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们继续：现在是演示时间！在我们深入之前，让我们快速了解一下我们将要构建的内容。我们的演示很简单，只有四个方块，我们将使用纯 HTML 和 CSS（是的，没有
    JavaScript）来动画化它们。我们将使用一些效果，例如 `easeOutBack`，它看起来像这样：
- en: '![Easing into using Rucksack](img/BO5194_09_04.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![开始使用 Rucksack](img/BO5194_09_04.jpg)'
- en: Tip
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can learn more about the details for this particular easing at [http://easings.net/#easeOutBack](http://easings.net/#easeOutBack)—it
    translates to `cubic-bezier(0.175, 0.885, 0.32, 1.275)` when used in code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [http://easings.net/#easeOutBack](http://easings.net/#easeOutBack) 上了解更多关于这个特定缓动细节的信息——当在代码中使用时，它转换为
    `cubic-bezier(0.175, 0.885, 0.32, 1.275)`。
- en: Let's get on and construct that demo…
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始构建那个演示…
- en: Animating content using the plugin
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用插件动画内容
- en: 'If you''re expecting dramatic effects, then I am sorry to disappoint—this exercise
    has been kept deliberately simple, to show you how easy it is to use Rucksack.
    We mentioned earlier that the overall result will be four simple squares that
    we can animate at will—they will look something like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你期待戏剧性的效果，那么我很抱歉让你失望——这个练习被故意保持简单，以展示使用 Rucksack 是多么容易。我们之前提到，整体结果将是四个我们可以随意动画化的简单方块——它们看起来可能像这样：
- en: '![Animating content using the plugin](img/BO5194_09_05.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![使用插件动画内容](img/BO5194_09_05.jpg)'
- en: 'The use of this plugin does raise one important question—we will cover this
    once we''ve built our demo:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此插件确实会引发一个重要问题——我们将在构建完我们的演示后讨论这个问题：
- en: From the code download that accompanies this book, go ahead and extract a copy
    of the `T44 - postcss-easings` folder, and save it to the root of our project
    area.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这本书附带的代码下载中，请提取 `T44 - postcss-easings` 文件夹的副本，并将其保存到项目区域的根目录。
- en: Next, copy the `gulpfile.js` and `package.json` files from this `T44 - postcss-easings`
    folder to the root of our project area—go ahead and replace any that are already
    present in this location, or save them somewhere for safekeeping.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将 `T44 - postcss-easings` 文件夹中的 `gulpfile.js` 和 `package.json` 文件复制到项目区域的根目录——请替换该位置已存在的任何文件，或者将它们保存在安全的地方。
- en: Copy the `style – pre-comile.css` file from the `css – completed versions` folder
    to the `src` folder within our project area; this sets it ready for compilation.
    Rename it `style.css`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `css – completed versions` 文件夹中的 `style – pre-comile.css` 文件复制到项目区域内的 `src`
    文件夹中；这将使其准备好进行编译。将其重命名为 `style.css`。
- en: Go ahead and fire up a Node.js command prompt session, then change the working
    folder to our project area.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，请启动一个 Node.js 命令提示符会话，然后将工作文件夹更改为我们的项目区域。
- en: In the prompt, enter `Gulp` then press *Enter*—our file will be compiled, like
    this:![Animating content using the plugin](img/BO5194_09_06.jpg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符中输入 `Gulp` 然后按 *Enter* 键——我们的文件将被编译，如下所示：![使用插件动画内容](img/BO5194_09_06.jpg)
- en: Assuming no issues appeared during compilation, copy the contents of the `dest`
    folder to the `css` folder within the `T44 - postcss-easings` folder.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设编译过程中没有出现任何问题，将 `dest` 文件夹的内容复制到 `T44 - postcss-easings` 文件夹内的 `css` 文件夹中。
- en: Try previewing the results of our handiwork in a browser—if we hover over each
    square, the animation will kick in; they should appear similar to the figure shown
    at the start of this exercise.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在浏览器中预览我们手工制作的成果——如果我们悬停在每个方块上，动画将启动；它们应该看起来与这个练习开始时显示的图相似。
- en: Our demo was never meant to be anything more complicated—the aim was to show
    off how easy it is to get a consistent effect, provided the configuration object
    is correctly set up! It does, however, raise an important question concerning
    our choice of plugins, so let's explore that in more detail.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的演示从未打算变得复杂——目的是展示如果配置对象设置正确，获得一致效果是多么容易！然而，这确实引发了一个关于我们插件选择的重要问题，因此让我们更详细地探讨这个问题。
- en: Dissecting our demo in more detail
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更详细地剖析我们的演示
- en: 'This is one example of where simplicity pays in spades; the `postcss-easings`
    plugin requires no configuration for standard use, and will only need configuring
    if the easing we use are not already part of its core library. The ones we picked
    for this demo are already defined in the plugin—if we open a copy of the compiled
    style sheet, we should see something akin to this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是简单性带来巨大回报的一个例子；`postcss-easings`插件在标准使用情况下无需配置，只有当我们使用的缓动效果不是其核心库的一部分时才需要配置。我们为这个演示选择的缓动效果已经在插件中定义了——如果我们打开编译后的样式表副本，我们应该能看到类似以下的内容：
- en: '![Dissecting our demo in more detail](img/BO5194_09_07.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![更详细地剖析我们的演示](img/BO5194_09_07.jpg)'
- en: 'The key to configuring this plugin lies in two lines of code, on or around
    lines 11 and 16:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 配置此插件的关键在于两行代码，大约在第11行和第16行：
- en: '[PRE1]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Much of what is present in the Gulp task file that we used in this demo is code
    that we've already seen before; it frequently pays to think ahead, so that we
    can build a gulp file that can be reused for future projects. Once configured,
    then any style recognized by the plugin will be compiled into valid CSS.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中使用的Gulp任务文件中存在的大多数代码是我们之前已经见过的；提前思考通常是有益的，这样我们就可以构建一个可以用于未来项目的gulp文件。一旦配置完成，任何被插件识别的样式都将编译成有效的CSS。
- en: 'If we had decided to use a custom easing style, then we can easily update the
    configuration object accordingly:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们决定使用自定义的缓动样式，那么我们可以很容易地相应地更新配置对象：
- en: '![Dissecting our demo in more detail](img/BO5194_09_08.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![更详细地剖析我们的演示](img/BO5194_09_08.jpg)'
- en: In case you're wondering about the name given—this effect replicates the motion
    when punching the air after you've achieved a good result, particularly if it
    has been a troublesome issue to solve!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对此名称感到好奇——这个效果模仿了在你取得好成绩后击打空气时的动作，尤其是如果它是一个棘手的问题的话！
- en: 'Before we move on to our next exercise, we should answer the question that
    I alluded to earlier: which plugin should we use? But hold on, we''re using the
    `postcss-easings` plugin, right?'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行下一个练习之前，我们应该回答我之前提到的那个问题：我们应该使用哪个插件？但是等等，我们正在使用`postcss-easings`插件，对吧？
- en: 'No, I''ve not completely lost the plot: the `postcss-easings` plugin is available
    separately, and is referenced within the Rucksack pack of plugins. The key here,
    though, is that if we only need to use `postcss-easings`, then there is no sense
    in calling in Rucksack''s plugins, which will only add an unnecessary burden to
    our workflow. Instead, we can change line 11 in our gulp task file to the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 不，我并没有完全失去方向：`postcss-easings`插件可以单独使用，并且在Rucksack插件包中被引用。然而，关键在于，如果我们只需要使用`postcss-easings`，那么调用Rucksack的插件就没有意义了，这只会给我们的工作流程增加不必要的负担。相反，我们可以将gulp任务文件中的第11行改为以下内容：
- en: '[PRE2]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And we can change line 16 to the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将第16行改为以下内容：
- en: '[PRE3]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As long as the plugin is still installed from earlier, then the code will be
    compiled as before, but without the extra overhead of the other plugins that form
    Rucksack.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 只要插件还是之前安装的，代码就会像以前一样编译，但不会包含Rucksack中其他插件带来的额外开销。
- en: Converting our slider to use Rucksack
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将我们的滑块转换为使用Rucksack
- en: 'If we''re working with Rucksack, we''ve seen that the key to successful use
    is less about configuring it for use in our Gulp file, and more about deciding
    which plugins to use. To see what we mean by this, take a look at the original
    stylesheet from *Introducing our demo* carefully; it should reveal that we can
    use a number of plugins to improve on existing functionality:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在使用Rucksack，我们已经看到，成功使用的关键与其说是为我们的Gulp文件配置它，不如说是决定使用哪些插件。为了理解我们的意思，请仔细查看*介绍我们的演示*的原始样式表；它应该揭示我们可以使用多个插件来改进现有功能：
- en: '**Responsive typography**: Our demo is already partially responsive, but the
    label text isn''t resizing if we change the size of our slider. We can fix this
    by altering our code to trigger Rucksack to make our fonts responsive.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应式排版**：我们的演示已经部分是响应式的，但是当我们改变滑块的大小，标签文本不会调整大小。我们可以通过修改我们的代码来触发Rucksack使我们的字体响应式。'
- en: '**Shorthand positioning**: This is a great plugin for adding position attributes;
    why bother adding top, left, right, and bottom attributes when we do all four
    in a single line of code? Add this one-liner, and we can get PostCSS to do the
    heavy lifting for us.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简写定位**：这是一个添加位置属性的出色插件；为什么要在一行代码中添加top、left、right和bottom属性呢？添加这一行代码，我们就可以让PostCSS为我们做繁重的工作。'
- en: '**Property aliases**: Continuing with the shorthand theme, we can use this
    plugin to set up shorthand versions of any attribute we care to use; it means
    we only need to type in one or two letters, which PostCSS will transpile to the
    full version of that attribute.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性别名**：继续简写主题，我们可以使用此插件设置任何我们关心的属性的简写版本；这意味着我们只需要输入一个或两个字母，PostCSS就会将其转换为该属性的完整版本。'
- en: '**Font src expansion**: If we look at our source style sheet carefully, we
    should see a small issue on or around line 6\. The code calls for Open Sans as
    a font, but this is not a standard font! Thankfully, we can easily fix it by telling
    the browser where to download it from—Rucksack provides a convenient shorthand
    form for adding this detail to our code.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字体源扩展**：如果我们仔细查看我们的源样式表，我们应该在第6行或附近看到一个小的错误。代码要求使用Open Sans作为字体，但这不是标准字体！幸运的是，我们可以通过告诉浏览器从哪里下载它来轻松修复它——Rucksack为我们提供了方便的简写形式，以便将此详细信息添加到我们的代码中。'
- en: '**Hex RGBA shortcuts**: We''ve used a mix of RGBA and HEX codes in our style
    sheet to represent colors, yet some older browsers don''t support the former style.
    This is becoming less of an issue, but as it is added automatically by Rucksack,
    then there is no harm in adding the latter values!'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hex RGBA快捷方式**：我们在样式表中混合使用了RGBA和HEX代码来表示颜色，但一些较旧的浏览器不支持前者。这已经不再是问题，但由于Rucksack会自动添加这些值，因此添加后者也没有坏处！'
- en: '**Easings**: Our slider demo used a single instance of an easing, in the form
    of ease-in-out-back. In the previous demo, we used `postcss-easings` (that is
    the basis for this part of Rucksack) to convert the names to `cubic-bezier` values;
    we should look to continue this theme when updating the slider.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓动效果**：我们的滑块演示使用了一个缓动效果的实例，形式为ease-in-out-back。在上一个演示中，我们使用了`postcss-easings`（这是Rucksack这部分的基础）将名称转换为`cubic-bezier`值；在更新滑块时，我们应该继续这个主题。'
- en: '**Automatic prefixing**: This isn''t enabled by default, so it''s up to us
    to decide if we want to use it. It references the same `autoprefixer` plugin we''ve
    already used in earlier demos; if we''re going to make good use of Rucksack, then
    it makes sense to enable it and remove any existing reference that is already
    in our code. We''re going to use most of the plugins referenced in Rucksack, so
    we will enable it for use. If, however, we only need one or two, or we don''t
    need support for older browsers, then it can remain switched off.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动前缀**：默认情况下，这并未启用，因此我们决定是否要使用它。它引用了我们之前在早期演示中已经使用的相同的`autoprefixer`插件；如果我们打算充分利用Rucksack，那么启用它并删除我们代码中已经存在的任何现有引用是有意义的。我们将使用Rucksack中引用的大多数插件，因此我们将启用它以供使用。然而，如果我们只需要一个或两个，或者我们不需要对旧浏览器的支持，那么它可以保持关闭状态。'
- en: '**Legacy fallbacks**: Support for older browsers is provided by the laggard
    plugin in Rucksack. This provides a mix of fallback mechanisms, such as adding
    fallback support for rem values, HEX fallbacks for RGBA values, or the 3D transform
    hack for will-change. We''ll be adding rem fallback support, so we will enable
    this plugin for use.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**遗留回退机制**：Rucksack中的`laggard`插件提供了对旧浏览器的支持。它提供了一系列回退机制，例如为rem值添加回退支持，为RGBA值提供HEX回退，或为will-change的3D转换提供hack。我们将添加rem回退支持，因此我们将启用此插件以供使用。'
- en: 'Now that we''ve covered the elements we want to use, it''s time for us to make
    the changes. Without further ado, let''s make a start:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了我们要使用的元素，是我们进行更改的时候了。无需多言，让我们开始吧：
- en: From the code download that accompanies this book, go ahead and extract a copy
    of the `T45 - converting to use Rucksack` folder, and save it to our project area.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本书附带的代码下载中，请继续提取`T45 - 转换为使用Rucksack`文件夹的副本，并将其保存到我们的项目区域。
- en: From within the `T45 - converting to use Rucksack` folder, copy the `gulpfile.js`
    and `package.json` files to the root of our project area.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`T45 - 转换为使用Rucksack`文件夹内，将`gulpfile.js`和`package.json`文件复制到我们项目区域的根目录。
- en: Next, copy the contents of the `css-completed` version folder from within the
    `T45 - converting to use Rucksack` folder to the `src` folder at the root of our
    project area. Rename pre-compile `version.css` `style.css`, then open up this
    file in a text editor—we need to make some changes to the styles within the file.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`T45 - 转换为使用Rucksack`文件夹内的`css-completed`版本文件夹的内容复制到我们项目区域的根目录的`src`文件夹。将预编译的`version.css`重命名为`style.css`，然后在文本编辑器中打开此文件——我们需要对文件中的样式进行一些修改。
- en: Our first change is to make the text in our demo responsive—do a search for
    `font-size`, and change any instance to `font-size:` `responsive`. This should
    cover each of the five number labels, and the `div.slide-content > figcaption`
    rule.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的第一项更改是使演示中的文本响应式——搜索 `font-size`，并将任何实例更改为 `font-size:` `responsive`。这应该涵盖每个五个数字标签，以及
    `div.slide-content > figcaption` 规则。
- en: 'Next up, is adding our shorthand version for the position attribute—in this
    instance, there is only one we can change, which is on line 42\. Comment out the
    `bottom`, `left`, `right`, and `top` attributes specified on lines 33-36, then
    replace the `position:` attribute with this:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加我们针对位置属性的简写版本——在这个例子中，我们只能更改一行，即第 42 行。注释掉第 33-36 行指定的 `bottom`、`left`、`right`
    和 `top` 属性，然后将 `position:` 属性替换为以下内容：
- en: '[PRE4]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note, the other instances of position can't be changed as we've not specified
    individual placement values in these rules.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，其他位置实例不能更改，因为我们没有在这些规则中指定单独的位置值。
- en: 'Our next conversion is to add some aliases—this is just a shortcut to typing
    in more text! For our demo, go ahead and add this at the top of our style sheet:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来的转换是添加一些别名——这只是一个输入更多文本的快捷方式！对于我们的演示，请在我们的样式表顶部添加以下内容：
- en: '[PRE5]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, do a search and replace for each of these three styles—replace the full
    name with the shortcut names given in the `@alias` block.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，对这三个样式分别进行搜索和替换——将全名替换为 `@alias` 块中给出的快捷名称。
- en: 'Remember the small issue I pointed out earlier, about the missing support for
    the Open Sans font? Well, we can easily fix that—at the top of our style sheet
    file, go ahead and add this block; this tells the browser where to find the Open
    Sans font:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记得我之前指出的那个小问题，关于 Open Sans 字体的缺失支持吗？嗯，我们可以轻松解决这个问题——在我们的样式表文件顶部，添加以下代码块；这告诉浏览器在哪里找到
    Open Sans 字体：
- en: '[PRE6]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We touched briefly on Rucksack's ability to convert easing names to cubic-bezier
    values. The demo uses an easing name—this has already been set to one that is
    supported within Rucksack, so we don't need to alter our code. The same applies
    to the RGBA fall-back support—Rucksack will automatically convert any RGBA values
    it sees to HEX equivalents within our code.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们简要提到了 Rucksack 将缓动名称转换为 cubic-bezier 值的能力。这个演示使用了一个缓动名称——这已经设置为 Rucksack 内部支持的值，因此我们不需要更改我们的代码。同样适用于
    RGBA 回退支持——Rucksack 会自动将代码中看到的任何 RGBA 值转换为十六进制等效值。
- en: The remaining two changes are for legacy support and automatic prefixing—to
    enable these, we have to modify our gulp file as shown in the screenshot:![Converting
    our slider to use Rucksack](img/BO5194_09_09.jpg)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剩下的两个更改是为了支持旧版本和自动添加前缀——为了启用这些功能，我们必须修改我们的 gulp 文件，如图所示：![将我们的滑块转换为使用 Rucksack](img/BO5194_09_09.jpg)
- en: Save the file, then switch to a Node.js command prompt—at the prompt, make sure
    the working folder is set to our project area.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件后，切换到 Node.js 命令提示符——在提示符下，确保工作文件夹设置为我们的项目区域。
- en: At the prompt, enter `gulp`, then press *Enter*—PostCSS will go away and compile
    the code; if all is well, we should see our compiled files in the `dest` folder:![Converting
    our slider to use Rucksack](img/BO5194_09_10.jpg)
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下，输入 `gulp`，然后按 *Enter*——PostCSS 将消失并编译代码；如果一切顺利，我们应该在 `dest` 文件夹中看到我们的编译文件：![将我们的滑块转换为使用
    Rucksack](img/BO5194_09_10.jpg)
- en: 'At this stage, we have a compiled set of files. To confirm if the demo works,
    go ahead and copy them to the `css` folder within the `T45 - converting to use
    Rucksack` folder; try previewing the results of our work by running `slider.html`.
    If all is well, we should see the same slider effect:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们有一组编译后的文件。为了确认演示是否正常工作，请将它们复制到 `T45 - 转换为使用 Rucksack` 文件夹内的 `css` 文件夹中；通过运行
    `slider.html` 预览我们工作的结果。如果一切顺利，我们应该看到相同的滑块效果：
- en: '![Converting our slider to use Rucksack](img/BO5194_09_11.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![将我们的滑块转换为使用 Rucksack](img/BO5194_09_11.jpg)'
- en: All should be good, we have a working demo and our code has compiled successfully.
    At this point we can move on to our next task, right…?
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一切应该都很好，我们有一个正常工作的演示，并且我们的代码已成功编译。在这个时候，我们可以继续进行下一个任务，对吧…？
- en: Dissecting our code
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析我们的代码
- en: 'Well, it''s worth taking a look at our compiled code first: Rucksack has made
    some additional changes to our code that we may not have expected to see.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，先看看我们的编译代码是值得的：Rucksack 对我们的代码进行了一些额外的更改，这些我们可能没有预料到。
- en: 'For example, Rucksack has provided pixel-based fallback support for the rem
    units listed throughout our code, along with the HEX fallback support we discussed
    earlier:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Rucksack 为我们代码中列出的 rem 单位提供了基于像素的回退支持，以及我们之前讨论的 HEX 回退支持：
- en: '[PRE7]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, take a look at line 96—remember the `font-size: responsive` attribute
    that we added? This is the compiled result:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，看看第96行——还记得我们添加的`font-size: responsive`属性吗？这是编译后的结果：'
- en: '[PRE8]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Throughout the bottom two-thirds, there are a number of media queries that
    have been added; these were added as part of making our font styles responsive.
    Further down, at around line 226, we have this block:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在底部三分之二的部分，添加了许多媒体查询；这些查询是为了使我们的字体样式响应式而添加的。进一步向下，大约在第226行，我们有这个代码块：
- en: '[PRE9]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: At first glance, you might wonder where this came from, as we didn't specify
    an `ms-filter` attribute in our code. Well, this is thanks to Rucksack—it has
    added opacity support for IE automatically.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 初看起来，你可能会想知道这从哪里来，因为我们没有在我们的代码中指定`ms-filter`属性。好吧，这要归功于Rucksack——它自动为IE添加了透明度支持。
- en: The key to this little exploration, though, is that choosing plugins should
    be an iterative process that will only really finish when the site is no longer
    needed. For example, we could easily add another step to our workflow that reduces
    `calc()` operations to static values (where allowed—the plugin for this is `postcss-calc`).
    We should always consider using `postcss-remove-prefixes` periodically to keep
    our code up to date; there will come a time when we either don't need to add prefixes,
    or existing prefixes become redundant.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个小探索的关键是，选择插件应该是一个迭代的过程，只有当网站不再需要时，这个过程才能真正结束。例如，我们可以轻松地在我们工作流程中添加另一个步骤，将`calc()`操作减少到静态值（在允许的情况下——这个插件的名称是`postcss-calc`）。我们应该定期考虑使用`postcss-remove-prefixes`来保持我们的代码更新；总会有那么一天，我们不再需要添加前缀，或者现有的前缀变得冗余。
- en: 'Leaving aside the changes to our style sheet, there is one more to consider—you
    will note that the Autoprefixer plugin has been commented out in our code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对我们样式表的更改之外，还有一点需要考虑——你会注意到在我们的代码中，Autoprefixer插件已经被注释掉了：
- en: '![Dissecting our code](img/BO5194_09_12.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![Dissecting our code](img/BO5194_09_12.jpg)'
- en: This is with good reason—Rucksack has built-in support for `autoprefixer`, so
    there is no need to call it twice; ironically, it simply calls the same plugin
    that is commented out of our code! It's up to us whether we want to call it from
    within Rucksack, or separately; this will largely depend on what else is being
    called from with Rucksack, and whether adding `autopre` `fixer` will help provide
    a stronger case for using Rucksack.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这是有充分理由的——Rucksack内置了对`autoprefixer`的支持，因此没有必要调用两次；具有讽刺意味的是，它只是调用了我们代码中注释掉的同一个插件！我们决定是否从Rucksack内部调用它，或者单独调用；这主要取决于Rucksack中还有其他什么被调用，以及添加`autopre`
    `fixer`是否有助于为使用Rucksack提供更强的理由。
- en: Linting and optimizing your code
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linting and optimizing your code
- en: Bandwidth usage has always been critical to the success of a website; remember
    the good old days of 56K modems? We've come a long way since then, but this is
    still no excuse for producing sites that swallow bandwidth like it's going out
    of fashion!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 带宽使用一直是网站成功的关键；还记得那些56K调制解调器的美好时光吗？自从那时以来，我们已经走了很长的路，但这并不是生产出像过时一样消耗带宽的网站的借口！
- en: A part of this comes in the form of linting and minifying our style sheets before
    deploying into production use—it goes without saying that this should form part
    of any developer's workflow process by default. We can do this manually, but this
    manual job is prone to missing opportunities, which can lead to inconsistencies
    in our code.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一部分是通过在部署到生产使用之前对样式表进行linting和minifying来实现的——不言而喻，这应该成为任何开发者的工作流程过程的一部分。我们可以手动完成这项工作，但这项手动工作容易错过机会，这可能导致我们的代码出现不一致。
- en: 'Instead, we can use the power of PostCSS to perform the heavy lifting for us;
    the `stylelint` and `cssnano` plugin packs make for a powerful optimization facility!
    If we take a careful look at most gulp task files that we''ve created throughout
    the course of this book, both processes are taking place; in this example, `stylelint`
    is used at line 22, and `cssnano` at line 38:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以利用PostCSS的力量为我们完成繁重的工作；`stylelint`和`cssnano`插件包提供了一个强大的优化工具！如果我们仔细查看本书过程中创建的大多数gulp任务文件，这两个过程都在进行；在这个例子中，`stylelint`在第22行使用，`cssnano`在第38行使用：
- en: '![Linting and optimizing your code](img/BO5194_09_13.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![Linting and optimizing your code](img/BO5194_09_13.jpg)'
- en: Exploring the use of cssnano
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索cssnano的使用
- en: 'For anyone starting out with PostCSS for the first time, then simply specifying
    `cssnano()` as one of the processors for PostCSS should be sufficient:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一次使用PostCSS的人来说，只需将`cssnano()`指定为PostCSS的一个处理器就足够了：
- en: '![Exploring the use of cssnano](img/BO5194_09_14.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![Exploring the use of cssnano](img/BO5194_09_14.jpg)'
- en: If we take a look at the `T45 – converting to use Rucksack` demo, our original
    style sheet file weighs in at 4KB when compiled, but which drops to 3KB after
    compression. Granted, it's only a small file, but a 25% drop in size is still
    not an insignificant drop!
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看`T45 – 转换为使用Rucksack`演示，我们的原始样式表文件在编译后重量为4KB，但在压缩后降至3KB。当然，这是一个很小的文件，但25%的尺寸减少仍然不是微不足道的减少！
- en: Tip
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: At this point, it is worth noting that even though we are using Gulp, the plugin
    in use is the PostCSS version, and not `gulp-cssnano`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，值得注意的是，尽管我们正在使用Gulp，但使用的插件是PostCSS版本，而不是`gulp-cssnano`。
- en: 'The `cssnano` plugin is not a single plugin, but a wrapper for a number of
    plugins, which include examples such as these:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`cssnano`插件不是一个单独的插件，而是一系列插件的包装器，包括这些示例：'
- en: '`postcss-reduce-idents`: This reduces any custom identifier names (such as
    those used in `@keyframes`) to two letter equivalent codes; this helps with minifying
    code.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postcss-reduce-idents`: 这将任何自定义标识符名称（例如在`@keyframes`中使用的名称）减少到两个字母的等效代码；这有助于代码压缩。'
- en: '`postcss-zindex`: This plugin reduces any `z-index` declarations that are unnecessarily
    higher than they should be.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postcss-zindex`: 此插件减少了任何不必要的比应有的`z-index`声明更高的声明。'
- en: '`postcss-convert-values`: If our CSS uses any number of different units, then
    we can reduce the CSS size by expressing the value a different way. For example,
    `400ms` can be expressed as `.4s` (a reduction by two characters). Some might
    argue this is a little extreme, but every little helps!'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postcss-convert-values`: 如果我们的CSS使用了任何数量的不同单位，那么我们可以通过不同的方式表达值来减少CSS的大小。例如，`400ms`可以表示为`.4s`（减少了两个字符）。有些人可能会认为这有点极端，但任何一点帮助都是好的！'
- en: '`postcss-colormin`: In a similar vein, we can reduce the length of color names
    using this plugin: if `rgba(255, 0, 0, 1)` is used in our code, then we can replace
    this with `red`. Although the name is indeed shorter, this is at the expense of
    losing consistency with naming our colors, which may not be so desirable.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postcss-colormin`: 类似地，我们可以使用此插件来减少颜色名称的长度：如果我们的代码中使用了`rgba(255, 0, 0, 1)`，那么我们可以将其替换为`red`。虽然名称确实更短，但这是以牺牲与颜色命名的连贯性为代价的，这可能并不那么理想。'
- en: 'Moving on, there are some key points we should be aware of, when using `cssnano`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，当使用`cssnano`时，我们应该注意一些关键点：
- en: You will notice the presence of the gulp-rename plugin in use within our Gulp
    file—`cssnano` does not have a capability to rename a compressed file to something
    we would expect to see within our code. We can use `gulp-rename` to create a version
    that developers would expect to see in code; it does leave a copy of the original
    file in place, if needed.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你会注意到在我们的Gulp文件中使用gulp-rename插件——`cssnano`没有能力将压缩文件重命名为我们希望在代码中看到的名称。我们可以使用`gulp-rename`创建一个开发人员期望在代码中看到的版本；如果需要，它会在原文件处留下副本。
- en: 'Most options within `cssnano` are enabled by default; we can switch off individual
    ones in the configuration object, as shown in this example:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cssnano`中的大多数选项默认启用；我们可以在配置对象中关闭个别选项，如本例所示：'
- en: '[PRE10]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For a full list of the transform options, take a look at [http://cssnano.co/options/](http://cssnano.co/options/).
    Click on the link to view individual configuration options for that plugin.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要查看完整的转换选项列表，请查看[http://cssnano.co/options/](http://cssnano.co/options/)。点击链接查看该插件的个别配置选项。
- en: This plugin automatically includes autoprefixer. Technically, there is no need
    to include it separately as we have done in previous exercises, so ideally it
    should be removed. We will focus on this more as part of optimizing our processor
    in [Chapter 10](ch10.html "Chapter 10. Building a Custom Processor"), *Building
    a Custom Processor*.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此插件自动包含autoprefixer。技术上，我们不需要单独包含它，就像我们在之前的练习中所做的那样，因此理想情况下应该将其删除。我们将在第10章[Building
    a Custom Processor](ch10.html "第10章. 构建自定义处理器")中更多地关注这一点，*构建自定义处理器*。
- en: There are some transforms that are available within `cssnano`, but which are
    *not* switched on by default; these are not considered safe and should only be
    included if you are 100% sure it has not affected your code. The details of unsafe
    transforms are available on the `options` page at [http://cssnano.co/options/](http://cssnano.co/options/).
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cssnano`中有些转换是可用的，但默认情况下并未启用；这些不被认为是安全的，并且只有在您100%确信它没有影响您的代码时才应包含。不安全转换的详细信息可在`options`页面[http://cssnano.co/options/](http://cssnano.co/options/)上找到。'
- en: 'Okay, let''s move on: the second half of our double act is the `stylelint`
    plugin pack; unlike `cssnano`, `stylelint` takes the opposite approach and allows
    you to enable any rule as needed, from a list of over 100 available rules. Let''s
    dive in and take a look in more detail.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，让我们继续：我们双打表演的第二部分是 `stylelint` 插件包；与 `cssnano` 不同，`stylelint` 采取相反的方法，允许你根据需要从
    100 多条可用规则中选择任何规则。让我们深入探讨并更详细地看看。
- en: Configuring Stylelint as our linter
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Stylelint 配置为我们的代码检查器
- en: How does one describe Stylelint, if you've never met it before? Well, to quote
    its website, "stylelint is a mighty, modern CSS linter".
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前从未遇到过 Stylelint，该如何描述它呢？好吧，引用其网站上的话，“stylelint 是一个强大、现代的 CSS 代码检查器”。
- en: Whether we agree with such a bold statement, it is certainly worth getting to
    know Stylelint as a linter. Available from [http://stylelint.io/](http://stylelint.io/),
    the key to this plugin lies not in the plugin itself, but in the rules that define
    what we want to check in our code. At present, we can use any one of 100+ rules,
    or a mix of several; these can be specified in a `.styleintrc` file, within our
    `package.json` file, or as a `stylelint.config.js` file that exports a JavaScript
    object.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们是否认同这样的大胆声明，了解 Stylelint 作为代码检查器的价值无疑是值得的。它可以从 [http://stylelint.io/](http://stylelint.io/)
    获取，这个插件的关键不在于插件本身，而在于定义我们想要检查代码中哪些内容的规则。目前，我们可以使用 100 多条规则中的任意一条，或者混合使用几条；这些规则可以在
    `.styleintrc` 文件中、`package.json` 文件内，或者作为一个导出 JavaScript 对象的 `stylelint.config.js`
    文件中指定。
- en: 'We''ve already used `stylelint` in earlier projects; for convenience, our Gulp
    task for linting styles has a number of rules specified within the object:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在早期项目中使用了 `stylelint`；为了方便，我们的 Gulp 任务中已经指定了一些规则：
- en: '![Configuring Stylelint as our linter](img/BO5194_09_15.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![将 Stylelint 配置为我们的代码检查器](img/BO5194_09_15.jpg)'
- en: I've chosen a number of rules to illustrate how we can use Stylelint; it is,
    of course, up to each of you as developers to choose which rules you want to test
    as part of linting your code. Stylelint does not contain a core set of rules that
    are enabled by default—any checking it does will be dependent on what is specified
    in the rule configuration.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了一些规则来展示我们如何使用 Stylelint；当然，作为开发者，选择哪些规则作为代码检查的一部分是你们自己的决定。Stylelint 并不包含一组默认启用的核心规则——它所做的任何检查都将取决于规则配置中指定的内容。
- en: Tip
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A useful source to bookmark is [http://stylelint.io/](http://stylelint.io/)—this
    contains a full set of rules that can be added to our Stylelint configuration
    prior to compiling code.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有用的书签来源是 [http://stylelint.io/](http://stylelint.io/)——它包含了一整套可以在编译代码之前添加到
    Stylelint 配置中的规则。
- en: 'For example, if we were building a responsive site that made heavy use of the
    Golden Rule, we may want to limit any percentage values to no more than three
    or four places. For this, we would specify the `number-max-precision` rule—this
    takes an integer value; specifying `3` would flag warnings for these two attributes:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们正在构建一个大量使用黄金法则的响应式网站，我们可能希望将任何百分比值限制在三个或四个小数位以内。为此，我们将指定 `number-max-precision`
    规则——它接受一个整数值；指定 `3` 将会对这两个属性发出警告：
- en: '[PRE11]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is not the case for this one:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子来说，情况并非如此：
- en: '[PRE12]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: I would strongly recommend reading through the list of rules to get a flavor
    of what is available; it will take time to familiarize yourselves with the contents,
    but the reward will be code that is optimized and checked prior to it being used
    in a production environment. There is one small point though—even if we optimize
    our code ad infinitum, there is always a possibility that we still have to include
    some support for older browsers.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议阅读规则列表，以了解可用的选项；熟悉内容需要时间，但回报将是优化并检查后用于生产环境的代码。不过，有一点需要注意——即使我们无限期地优化代码，仍然有可能需要包含对旧浏览器的某些支持。
- en: In an ideal world, we would convince our clients of the merits of limiting such
    support (or not even covering it). If clients insist on it, however, against our
    better judgment, then PostCSS can easily help with providing that support. Let's
    explore what is available—much of this will center around IE (as this is the biggest
    culprit), but will equally apply to other browsers.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在理想的世界里，我们会说服我们的客户限制这种支持的好处（或者甚至不提供支持）。然而，如果客户坚持这样做，尽管我们判断不佳，PostCSS 也可以轻松地帮助我们提供这种支持。让我们探索一下可用的选项——其中大部分将集中在
    IE（因为这是最大的罪魁祸首），但同样适用于其他浏览器。
- en: Providing fallback support
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供回退支持
- en: A key concern when designing web content is browser support—which browsers do
    we support? If the only browsers we had to support were the likes of Firefox or
    Chrome, then our job would be easy. Trouble is, we also have IE, Safari, Edge…not
    to mention mobile devices! Life would be boring otherwise…
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计网页内容时，一个关键的关注点是浏览器支持——我们需要支持哪些浏览器？如果我们要支持的唯一浏览器是Firefox或Chrome这样的，那么我们的工作就会容易得多。问题是，我们还得支持IE、Safari、Edge……更不用说移动设备了！否则生活就会变得无聊……
- en: 'But I digress, back to reality: for those legacy browsers that refuse to conform
    (yes, I''m looking at you in particular, IE), we have to consider providing some
    form of support or graceful degradation. Thankfully, there are a number of plugins
    we can use within the PostCSS ecosystem—we''ve already used one in the form of
    Autoprefixer; there are others available, so let''s dive in and take a look at
    a selection of these plugins in more detail. Before we do so, though, there is
    a useful tip that I want to explore, which can help with checking for, and providing,
    legacy support in our browsers.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 但我跑题了，回到现实：对于那些拒绝遵守标准的旧版浏览器（是的，我特别指的是IE），我们必须考虑提供某种形式的支持或优雅降级。幸运的是，在PostCSS生态系统中，我们可以使用许多插件——我们已经使用了一个，就是Autoprefixer；还有其他可用的插件，所以让我们深入了解一下这些插件的一些详细情况。在我们这样做之前，有一个有用的技巧我想探讨，这个技巧可以帮助我们在浏览器中检查和提供旧版支持。
- en: Detecting support for features
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测对特性的支持
- en: A key part of the development process is to ensure that our code works on those
    browsers we have to support. If we're lucky enough that this range of browsers
    is limited to newer offerings, then this is less of an issue.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 开发过程中的一个关键部分是确保我们的代码能在那些我们必须支持的浏览器上运行。如果我们足够幸运，这个浏览器范围仅限于较新的产品，那么这就不成问题了。
- en: For some developers, there will be a need to have to support older browsers;
    this is particularly true if the environment contains other browser-based applications
    that require use of these older browsers, and cannot be replaced.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些开发者来说，可能需要支持旧版浏览器；如果环境中包含其他基于浏览器的应用程序，这些应用程序需要使用这些旧版浏览器，并且无法被替换，那么这一点尤其正确。
- en: 'To help get around this, we could use libraries such as Modernizr ([http://www.modernizr.com](http://www.modernizr.com)),
    but a more efficient means is to use the CSS `@supports` directive. In short,
    this operates in a similar fashion to media queries; we can specify a backup property
    that is supported by all browsers, and cancel it out if we''re using a browser
    that can support an enhanced property:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以使用像Modernizr([http://www.modernizr.com](http://www.modernizr.com))这样的库，但更有效的方法是使用CSS的`@supports`指令。简而言之，它的工作方式与媒体查询类似；我们可以指定一个所有浏览器都支持的备用属性，如果我们使用的是可以支持增强属性的浏览器，就可以取消它：
- en: '[PRE13]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the main, this is more likely to be useful for those who have to provide
    support for older versions of IE (given that other browsers have offered better
    support for some time). Ideally, we would look to persuade clients of the merits
    of not supporting older versions of IE (at least 8, and possibly 9). If we have
    to support them, this method coupled with the use of autoprefixer could prove
    very useful.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 主要来说，这更有可能对那些需要为旧版IE提供支持的人有用（鉴于其他浏览器已经提供了一段时间的支持）。理想情况下，我们会试图说服客户不支持旧版IE的好处（至少是8，可能是9）。如果我们必须支持它们，这种方法结合使用autoprefixer可能会非常有用。
- en: Providing support for oldie
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供对旧版浏览器的支持
- en: When it comes to providing support for legacy browsers, the biggest culprit
    is arguably Microsoft's IE. Whilst it has to be said that support in newer versions
    is improving, its popularity means that there are still enough old versions to
    warrant the need to provide support!
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到为旧版浏览器提供支持时，最大的罪魁祸首可能是微软的IE。虽然必须说，在新版本中的支持正在改善，但它的流行意味着仍然有足够的旧版本需要提供支持！
- en: To their credit, Microsoft have announced that they no longer support IE8 to
    10—this is a step in the right direction to help encourage users to upgrade, although
    it will be some time before these versions completely disappear from use.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 值得称赞的是，微软已经宣布他们不再支持IE8到10——这是朝着鼓励用户升级的正确方向迈出的一步，尽管这些版本完全消失还需要一段时间。
- en: So, if you still have to support old versions of IE, what can we do? A good
    solution to try out is the oldie pack of plugins; its name makes a reference to
    what some term oldIE, or those versions of IE that should have been consigned
    to history a long time ago!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果你仍然需要支持旧版本的IE，我们能做什么呢？一个值得尝试的好方法是使用旧版插件包；它的名字是对某些人所说的oldIE的引用，或者那些本应很久以前就被归入历史的IE版本！
- en: 'This plugin, available from [https://github.com/jonathantneal/oldie](https://github.com/jonathantneal/oldie),
    is a wrapper for a host of plugins available within PostCSS; examples include
    the following:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件可以从[https://github.com/jonathantneal/oldie](https://github.com/jonathantneal/oldie)获取，是PostCSS内众多插件的包装器；以下是一些示例：
- en: '`post-calc`: This reduces any instance of `calc()` to single values where possible;
    instances of `calc()` that use a mix of units may not be replaced'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post-calc`：尽可能将任何`calc()`实例减少到单个值；使用混合单位的`calc()`实例可能不会被替换'
- en: '`postcss-unroot`: If our CSS uses :root selectors, then old versions of IE
    will fail; this plugin replaces them with HTML to allow our code to compile'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postcss-unroot`：如果我们的CSS使用了`:root`选择器，那么旧版本的IE将失败；这个插件将它们替换为HTML，以便我们的代码可以编译'
- en: '`postcss-unnot`: In a similar vein, if we''ve specified rules that include
    elements where `:not` pseudo-elements have been used, then these selectors will
    be removed'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postcss-unnot`：在类似的情况下，如果我们指定了包含使用`:not`伪元素的元素的规则，那么这些选择器将被移除'
- en: '`postcss-unopacity`: This converts any instance of the opacity property to
    use `filter: alpha(opacity=XX)`, where `XX` is the equivalent value for the original
    opacity property'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postcss-unopacity`：将任何透明度属性的实例转换为使用`filter: alpha(opacity=XX)`，其中`XX`是原始透明度属性的等效值'
- en: 'The pack includes other plugins—to get a feel for what plugins are included,
    it''s worth taking a look at the `index.js` file for the plugin pack; it will
    look something like this:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 该包还包括其他插件——为了了解包含哪些插件，查看插件包的`index.js`文件是值得的；它看起来可能像这样：
- en: '![Providing support for oldie](img/BO5194_09_16.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![为旧版浏览器提供支持](img/BO5194_09_16.jpg)'
- en: The beauty, though, is that we are not forced to use the oldie plugin in its
    entirety. If, by some quirk of fate, we've managed to create something that in
    the main avoids those CSS attributes that are likely to make oldIE choke, then
    we can opt to simply reference those plugins that we need to use instead.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，美中不足的是，我们并不被迫完全使用oldie插件。如果我们由于某种命运的怪癖，成功地创建了一些主要避免了可能导致旧IE崩溃的CSS属性的代码，那么我们可以选择仅引用我们需要使用的那些插件。
- en: This will, of course, depend on how much we've used—a more likely scenario is
    that we will end up needing to use all of the plugins, so it makes better sense
    to use oldie instead! Of course, we could always encourage our clients to drop
    oldIE—this might not be as simple as it sounds…
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这取决于我们使用了多少——更可能的情况是我们最终需要使用所有插件，因此使用oldie更有意义！当然，我们总是可以鼓励我们的客户放弃旧IE——这可能不像听起来那么简单…
- en: Removing style hacks from code
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从代码中移除样式黑客
- en: 'If we''re lucky enough to have understanding clients—and chance would be a
    fine thing—then there is likely to be a task that we need to perform: remove any
    style hacks from our code that relate to browsers we no longer support. The removal
    of these hacks may be trivial if we only have a small style sheet; the reality
    is that it will likely be a long, manual process for larger sheets, which carries
    a risk of us missing hacks.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们足够幸运，拥有理解我们的客户——机会总是美好的——那么我们可能需要执行一项任务：从我们的代码中移除与不再支持的浏览器相关的任何样式黑客。如果只有一个小样式表，这些黑客的移除可能微不足道；但现实是，对于更大的样式表，这很可能是漫长且需要手动处理的过程，存在我们遗漏黑客的风险。
- en: 'Instead, we can avail ourselves of a plugin, in the form of stylehacks; this
    works very well with the `stylelint` plugin we''ve already used in demos throughout
    this book. Available from [https://github.com/ben-eb/stylehacks](https://github.com/ben-eb/stylehacks),
    the plugin uses hacks listed on [http://browserhacks.com](http://browserhacks.com),
    and is a cinch to install—let''s take a look at it in action:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以利用一个插件，即stylehacks；它与我们在本书中的演示中已经使用的`stylelint`插件配合得非常好。可以从[https://github.com/ben-eb/stylehacks](https://github.com/ben-eb/stylehacks)获取该插件，它使用[http://browserhacks.com](http://browserhacks.com)上列出的黑客，安装起来非常简单——让我们看看它的实际效果：
- en: We'll start by extracting a copy of the `T47 - using stylehacks` folder from
    the code download that accompanies this book; save it to the root of our project
    folder.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先从本书附带的代码下载中提取`T47 - 使用stylehacks`文件夹的副本；将其保存到我们的项目文件夹根目录。
- en: Copy the `gulpfile.js` and `package.json` files to the root of the project folder.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`gulpfile.js`和`package.json`文件复制到项目文件夹的根目录。
- en: 'In a text editor, go ahead and add this code, saving it as `style.css` in the
    `src` folder in our project area (*not* within the `T47 - using stylehacks` folder!):'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中，添加以下代码，并将其保存为`src`文件夹中的`style.css`（*不在* `T47 - 使用stylehacks`文件夹内！）：
- en: '[PRE14]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next, fire up a Node.js command prompt session, then change the working folder
    to our project area.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，启动一个 Node.js 命令提示符会话，然后更改工作文件夹到我们的项目区域。
- en: 'We now need to install the plugin—in the prompt, enter this command, then press
    *Enter*:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要安装这个插件——在提示符中输入以下命令，然后按 *Enter*：
- en: '[PRE15]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When the plugin has installed, go ahead and enter `gulp` in the prompt, then
    press *Enter*.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当插件安装完成后，继续在提示符中输入 `gulp`，然后按 *Enter*。
- en: PostCSS will compile our code—if all is well, we should see this in the `dest`
    folder at the root of our project area:![Removing style hacks from code](img/BO5194_09_17.jpg)
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PostCSS 将编译我们的代码——如果一切顺利，我们应该在我们的项目区域根目录的 `dest` 文件夹中看到这个：![从代码中移除样式漏洞](img/BO5194_09_17.jpg)
- en: 'Assuming we have a successful compilation, try opening the `style.css` file
    in a text editor—we will, of course, have the requisite source map directive at
    the foot of the code, but otherwise notice how it has removed the color hack:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们成功编译了代码，尝试在文本编辑器中打开 `style.css` 文件——我们当然会在代码底部有必要的源映射指令，但请注意它如何移除了颜色漏洞：
- en: '![Removing style hacks from code](img/BO5194_09_18.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![从代码中移除样式漏洞](img/BO5194_09_18.jpg)'
- en: 'The key to this process lies within this task in our Gulp file:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程的关键在于我们 Gulp 文件中的这个任务：
- en: '[PRE16]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In our Gulp file, we've added the browsers attribute—this tells stylehacks to
    remove any hacks that are *not* required for modern browsers or those that have
    more than `10%` global usage. This setting is based on the Browserslist query
    list available from [https://github.com/ai/browserslist](https://github.com/ai/browserslist)—it's
    worth noting that this can be used for plugins such as Autoprefixer as well.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 Gulp 文件中，我们添加了浏览器属性——这告诉 stylehacks 移除任何对于现代浏览器或那些全球使用率超过 `10%` 的浏览器来说不是必需的漏洞。这个设置基于从
    [https://github.com/ai/browserslist](https://github.com/ai/browserslist) 可用的 Browserslist
    查询列表——值得注意的是，这也可以用于像 Autoprefixer 这样的插件。
- en: Note
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we start to include more plugins that make use of the Browserslist queries,
    then consider using a variable in place of the query; updating this from a central
    location will automatically update all plugins that use it accordingly. For more
    details, please refer to the Browserslist site on GitHub.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们开始包含更多使用 Browserslist 查询的插件，那么考虑使用变量来代替查询；从中央位置更新它将自动更新所有使用它的插件。有关更多详细信息，请参阅
    GitHub 上的 Browserslist 网站。
- en: 'Although this is a simple plugin to use, there is one nagging question that
    kept coming back whilst researching for this book: how useful is this plugin in
    reality? For some, you may think I need my head examined, but there is a reason
    behind this—let me explain.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个插件使用起来很简单，但在为这本书进行研究的过程中，有一个令人烦恼的问题一直萦绕在心头：这个插件在现实中到底有多有用？对于一些人来说，你可能觉得我需要检查一下我的脑袋，但这是有原因的——让我来解释一下。
- en: If you've spent any time developing with jQuery, then you should be aware that
    it has dropped support for `IE6`-`8` from jQuery 2.x, and will only develop support
    for it within the 1.x branch. Much of the baggage within jQuery within the 1.x
    branch is based on catering for browser hacks; the biggest culprit for these hacks
    is IE!
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你花过任何时间用 jQuery 进行开发，那么你应该知道它从 jQuery 2.x 版本开始已经不再支持 `IE6`-`8`，并且只会在 1.x 分支中继续支持它。1.x
    分支中 jQuery 的许多负担都是基于为浏览器漏洞而设计的；这些漏洞的最大罪魁祸首就是 IE！
- en: At the time of writing, Microsoft have publicly stated that support for IE10
    and below is being dropped (at least for Windows 8)—they will only support IE11
    on the Windows 8.1 platform, plus their new browser, MS Edge.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，微软已经公开声明将停止支持 IE10 及以下版本（至少对于 Windows 8 而言）——他们只会在 Windows 8.1 平台上支持
    IE11，以及他们新的浏览器 MS Edge。
- en: Given that many of the hacks found in CSS are for IE (and that this also applies
    to jQuery), one can't but wonder if the stylehacks plugin will still remain useful
    within the not too distant future! We should also be asking ourselves if using
    hacks is a good design decision. Are we designing a problem for ourselves at a
    later date, or should we be reconsidering our original design, and perhaps revisiting
    whether we need to support older browsers with a dedicated style sheet, rather
    than introducing hacks in amongst code designed for more recent browsers?
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 CSS 中发现的许多漏洞都是为了 IE（这也适用于 jQuery），人们不禁要 wonder 如果 stylehacks 插件在不久的将来仍然有用！我们也应该问自己，使用漏洞是否是一个好的设计决策。我们是否在为将来设计一个问题，或者我们应该重新考虑我们的原始设计，也许重新审视我们是否需要为旧浏览器提供专用的样式表，而不是在为较新浏览器设计的代码中引入漏洞？
- en: Summary
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: A key part of PostCSS is exploring the ever-increasing array of plugins available
    for the PostCSS ecosystem; in some respects, it can be likened to a journey of
    discovery. This is no different for single plugins, or those available within
    packs—we've already seen that many of these packs are made up of the same plugins
    that are available individually! Let's take a moment to review what we've learnt.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: PostCSS的关键部分是探索PostCSS生态系统中可用的插件不断增加的数组；在某些方面，它可以被比作一次发现之旅。对于单个插件或包含在包中的插件来说，情况也是如此——我们已经看到，许多这些包由可单独使用的相同插件组成！让我们花点时间回顾一下我们已经学到的内容。
- en: We kicked off our journey with a look at working with plugins that can help
    save time with writing—these can either be those that allow us to write in shorthand,
    or those that add missing styles, based on styles we specify in code. These also
    included some plugins that help provide fallback support for older browsers.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的旅程始于查看那些可以帮助我们节省写作时间的插件——这些插件可以是那些允许我们使用缩写来编写，或者基于我们在代码中指定的样式添加缺失的样式。这些也包括一些帮助为旧浏览器提供回退支持的插件。
- en: We then moved onto working with the `postcss-short` plugin, as an example of
    how we can reduce development time, before moving on to explore the Rucksack suite
    of plugins that can help add some of the missing elements we may need to use in
    CSS. To explore how Rucksack works, we started with a simple easing demo, before
    working our way through a more complex demo of a slider and converting it to use
    Rucksack, and exploring some of the ways in which this plugin pack can help in
    our development.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们转向使用`postcss-short`插件，作为一个例子，说明我们如何减少开发时间，然后继续探索Rucksack插件套件，这些插件可以帮助添加我们可能在CSS中需要使用的某些缺失元素。为了探索Rucksack的工作原理，我们从一个简单的缓动演示开始，然后逐步通过一个更复杂的滑块演示，将其转换为使用Rucksack，并探讨这个插件包在开发中可以帮助的一些方式。
- en: Next up in our journey came a look at what should be a crucial part of any development
    workflow for a developer—checking our code for consistency, and optimizing it.
    We covered the use of the `cssnano` and `stylelint` plugins, and how they can
    be tailored to our needs.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的旅程中，接下来我们关注了对于开发者来说应该是一个关键部分的发展工作流程——检查我们的代码一致性，并对其进行优化。我们介绍了`cssnano`和`stylelint`插件的用法，以及它们如何根据我们的需求进行定制。
- en: We then rounded out the chapter by revisiting support for older browsers—we
    supplemented our earlier visit with a more in-depth look at what is available
    within PostCSS; we explored the fact that many fallbacks are primarily caused
    by IE, and discussed how we can either help support older versions of this browser,
    or whether we should consider consigning support for some older browsers to history.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过回顾对旧浏览器的支持来结束这一章——我们在之前的访问基础上，对PostCSS中可用的内容进行了更深入的探讨；我们探讨了许多回退主要是由于IE引起的，并讨论了我们可以如何帮助支持这个浏览器的旧版本，或者我们是否应该考虑将一些旧浏览器的支持归入历史。
- en: Phew, this was a real whirlwind tour through the plugin packs available for
    PostCSS! Our journey does not stop here, as we now need to pull all of the last
    few chapters together and produce a complete custom processor—this will be the
    subject of the next chapter.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 呼吸，这真是一次对PostCSS可用的插件包的快速浏览！我们的旅程并未到此结束，因为我们现在需要将最后几章的内容综合起来，制作出一个完整的自定义处理器——这将是下一章的主题。
