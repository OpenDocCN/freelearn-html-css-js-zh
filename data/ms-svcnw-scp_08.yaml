- en: Scripting with Jelly
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jelly 脚本进行脚本编写
- en: In this chapter, we are going to look at scripting with Jelly. We will look
    at how to write Jelly code to create custom pages and scripts to meet your needs.
    We will also take a look at UI macros and how these are created in ServiceNow,
    as well as look at an example to further our knowledge in this area.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨使用 Jelly 进行脚本编写。我们将探讨如何编写 Jelly 代码来创建满足您需求的自定义页面和脚本。我们还将探讨 UI 宏以及如何在
    ServiceNow 中创建它们，以及通过一个示例来进一步加深我们对这个领域的了解。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Jelly scripting
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jelly 脚本
- en: UI macros
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI 宏
- en: Jelly scripting examples
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jelly 脚本示例
- en: Jelly scripting
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jelly 脚本
- en: 'Jelly scripting knowledge is important to build custom pages and scripts, and
    also to amend Jelly code that exists in ServiceNow as part of the platform to
    work in a different way for your own purposes. We introduced Jelly scripting and
    how it can be used in a UI page in the last chapter. Let''s remind ourselves what
    the Jelly tags ServiceNow gives us look like:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Jelly 脚本知识对于构建自定义页面和脚本非常重要，并且还可以修改 ServiceNow 中的 Jelly 代码，使其以不同的方式满足您的需求。我们在上一章介绍了
    Jelly 脚本及其在 UI 页面中的应用。让我们回顾一下 ServiceNow 提供的 Jelly 标签的外观：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once these tags are in place, we can start to include our Jelly code inside.
    This can be added to a UI page or UI macro. We will take a look at UI macros later
    in the chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些标签就位，我们就可以开始在我们的 Jelly 代码中包含它们。这可以添加到 UI 页面或 UI 宏中。我们将在本章后面讨论 UI 宏。
- en: Evaluate
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: First, let's have a look at the `<g:evaluate>` tag. This tag allows us to write
    JavaScript inside the tag and set a variable value at the end, if required.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看 `<g:evaluate>` 标签。这个标签允许我们在标签内编写 JavaScript，并在需要时设置变量值。
- en: The `<g:evaluate>` tag is arguably the most used tag in Jelly, and is certainly
    one to get to grips with. Remember that we can use `g` or `g2` for our tag, depending
    on which phase we want this script to run in.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`<g:evaluate>` 标签可以说是 Jelly 中使用最频繁的标签之一，也是我们需要掌握的标签之一。记住，我们可以根据希望脚本在哪个阶段运行来使用
    `g` 或 `g2`。'
- en: 'Let''s have a look at an example of the `<g:evaluate>` tag in action:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `<g:evaluate>` 标签的实际应用示例：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding example, we are going to run the code in the second phase,
    so we are using `g2` in the tag we define. In the tag definition, we are also
    defining a variable name to use with `var="jvar_variable"`. We can name the variable
    different names, but we must always prefix the variable with `jvar` for it to
    work.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们将运行第二阶段的代码，因此我们在定义的标签中使用 `g2`。在标签定义中，我们还在定义一个变量名，用于与 `var="jvar_variable"`
    一起使用。我们可以给变量取不同的名字，但我们必须始终在变量前加上 `jvar` 前缀，以便它能够正常工作。
- en: Here, we are setting `jvar_variable` to the string value in the script. In an
    `evaluate` tag, we just need to make the last line of our expression the variable
    we want to set the evaluate variable to. In our example, we have used `setVariable`,
    so `jvar_variable` becomes the value of `setVariable`, which is our string.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将 `jvar_variable` 设置为脚本中的字符串值。在 `evaluate` 标签中，我们只需将表达式的最后一行设置为我们要设置的评估变量的值。在我们的例子中，我们使用了
    `setVariable`，因此 `jvar_variable` 变成了 `setVariable` 的值，即我们的字符串。
- en: 'There are some parameters we can use in a `<g:evaluate>` tag; let''s see these
    used in another example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<g:evaluate>` 标签中，我们可以使用一些参数；让我们看看这些参数在另一个例子中的使用情况：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this example, we can see two new parameters for the `<g:evaluate>` tag:
    `object` and `jelly`. The `object` tag dictates whether the `jvar` variable should
    be treated as an `object`. For our example, it would be the `GlideRecord` query,
    and so we would want this held as an object for later scripting.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们可以看到为 `<g:evaluate>` 标签新增的两个参数：`object` 和 `jelly`。`object` 标签决定了 `jvar`
    变量是否应该被当作一个 `object` 处理。在我们的例子中，它将是 `GlideRecord` 查询，因此我们希望将其作为一个对象保留以供后续脚本使用。
- en: The other new parameter is `jelly`. This parameter, if set to `true`, allows
    us to use `jelly` variables in our script. For our example, we are using the `jvar_onHoldState`
    variable, which we are assuming has been set to `3` in a previous `<g:evaluate>
    tag`. We need the `jelly` parameter set to `true` so we can use this variable
    in our example script.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个新增的参数是 `jelly`。如果将此参数设置为 `true`，则允许我们在脚本中使用 `jelly` 变量。在我们的例子中，我们使用的是 `jvar_onHoldState`
    变量，我们假设它已经在之前的 `<g:evaluate>` 标签中设置为 `3`。我们需要将 `jelly` 参数设置为 `true`，以便我们能在示例脚本中使用这个变量。
- en: If
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果
- en: The `if` tag in Jelly script works in a similar way to a JavaScript `if` statement.
    It is used to run code if a set condition is met. As we can set `if` statements
    in JavaScript, whether you want to use the Jelly `if` rather than the JavaScript
    `if` is up to you.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Jelly 脚本中的 `if` 标签与 JavaScript 中的 `if` 语句的工作方式类似。它用于在满足一组条件时运行代码。由于我们可以在 JavaScript
    中设置 `if` 语句，因此您是否想使用 Jelly `if` 而不是 JavaScript `if` 取决于您自己。
- en: 'We can use the `if` tag to check whether a `GlideRecord` object has any records
    inside it. Let''s have a look at how this is done using our example from the `evaluate`
    tag:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `if` 标签检查 `GlideRecord` 对象内部是否有任何记录。让我们看看如何使用我们的 `evaluate` 标签示例来完成这项工作：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In our example, we are showing a message depending on whether there are currently
    on-hold incidents in the instance. The `if` statement has one parameter, which
    is `test`, which is the expression we need to evaluate to `true` to run the code
    inside the script in the tag.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们根据实例中当前是否有挂起的工单来显示消息。`if` 语句有一个参数，即 `test`，这是我们需要评估为 `true` 的表达式，以便在标签中的脚本内运行代码。
- en: This type of `if` statement is helpful to run conditions against `GlideRecord`
    objects.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的 `if` 语句有助于对 `GlideRecord` 对象运行条件。
- en: UI macros
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UI 宏
- en: UI macros are scripts that can be included in UI pages and in other areas throughout
    the ServiceNow platform. By separating them out from individual UI pages, it makes
    them easy to reuse across the platform, too.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: UI 宏是可以在 UI 页面和其他 ServiceNow 平台上的其他区域中包含的脚本。通过将它们从单个 UI 页面中分离出来，这使得它们在整个平台上也易于重用。
- en: UI macros are seen throughout the ServiceNow platform, running the service catalog
    cart and approval summarizers. Let's have a look at how they are created.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: UI 宏在 ServiceNow 平台上的各个地方都可以看到，运行服务目录购物车和审批摘要器。让我们看看它们是如何创建的。
- en: A UI macro is quite a simple form, with only a few fields. First, we need to
    give our UI macro a name. After that, we can add a description, and then complete
    the XML field. The XML field is an XML type field and works in a very similar
    way to the HTML field on a UI page. We fill in the XML field with the Jelly script
    we want to run when this UI macro is run.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: UI 宏是一种相当简单的形式，只有几个字段。首先，我们需要给我们的 UI 宏起一个名字。之后，我们可以添加一个描述，然后完成 XML 字段。XML 字段是一个
    XML 类型字段，其工作方式与 UI 页面上的 HTML 字段非常相似。我们用想要在运行此 UI 宏时运行的 Jelly 脚本填写 XML 字段。
- en: 'We are also given the same Jelly code that we are given when creating a new
    UI page in the XML field:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还得到了在 XML 字段中创建新 UI 页面时给出的相同的 Jelly 代码：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To recap, these tags introduce Jelly scripting, and we can start writing our
    Jelly script inside the Jelly tags.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，这些标签引入了 Jelly 脚本，我们可以在 Jelly 标签内开始编写我们的 Jelly 脚本。
- en: 'We can also invoke a macro from a UI page by using a `macro_invoke` tag. Let''s
    see how this works:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过使用 `macro_invoke` 标签从 UI 页面调用宏。让我们看看它是如何工作的：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We use the `macro_invoke` tag and the macro parameter to invoke our UI macro.
    We just need to give the name of the UI macro in the macro parameter, as in the
    preceding example. This example will invoke the `kb_article_footer` UI macro.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `macro_invoke` 标签和宏参数来调用我们的 UI 宏。我们只需要在宏参数中给出 UI 宏的名称，就像前面的例子一样。此示例将调用
    `kb_article_footer` UI 宏。
- en: 'It is possible to invoke a UI macro inside a UI macro, too. To do this, we
    use a `g` tag with the name of the macro inside the tag. We can see how this works
    in the script:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们也可以在 UI 宏内部调用 UI 宏。为此，我们在标签内使用一个名为宏的 `g` 标签。我们可以在脚本中看到它是如何工作的：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will invoke the `ui_button` inside this UI macro.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 UI 宏内部调用 `ui_button`。
- en: UI macros are a great way of writing chunks of Jelly code that can easily be
    reused throughout the ServiceNow platform. They are especially useful to add to
    your UI pages.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: UI 宏是编写可以轻松在整个 ServiceNow 平台上重用的 Jelly 代码块的好方法。它们特别适用于添加到您的 UI 页面中。
- en: Script examples
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本示例
- en: In this chapter, we have seen how to script in Jelly and how to create a UI
    page ourselves. Let's bring these two abilities together to make a working UI
    macro.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何在 Jelly 中编写脚本以及如何自己创建 UI 页面。让我们将这两种能力结合起来，制作一个可工作的 UI 宏。
- en: This is an example of a request I have been asked for before – an approval summary
    on the group approval record. Here, we need to create a UI macro and a formatter
    to add to the group approval form.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我之前被要求的一个请求示例——在分组审批记录上的审批摘要。在这里，我们需要创建一个 UI 宏和一个格式化器，并将其添加到分组审批表单中。
- en: 'Let''s start with our group approval summarizer code, creating a brief summary
    of the task record we will be approving with our group approval:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从我们的小组审批总结器代码开始，创建一个简短的摘要，我们将用它来批准我们的小组审批的任务记录：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, in this example, there is a fair amount of code, but a lot of
    this is HTML tags, so there is not much real content. In the example, we are creating
    a table containing some of the details of the record being approved so that the
    current group approver can see what they are approving.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在这个例子中，代码量相当多，但其中很多是HTML标签，所以实际内容并不多。在这个例子中，我们创建了一个表格，其中包含了一些待批准记录的详细信息，以便当前的小组审批者可以看到他们正在批准的内容。
- en: The labels and spacing are HTML, and you can find this type of script in the
    UI macros ServiceNow provides for you. The interesting aspect of the code is in
    setting the task values. We use the dollar sign to declare the start of the variable,
    then curly or square brackets for phase one or phase two variables, respectively.
    Here, we are using square brackets to use the second phase, as our data will change
    and we do not want it to be cached.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 标签和间距是HTML，您可以在ServiceNow为您提供的UI宏服务中找到这种脚本。代码的有趣之处在于设置任务值。我们使用美元符号来声明变量的开始，然后分别使用花括号或方括号来表示第一阶段或第二阶段变量。在这里，我们使用方括号来使用第二阶段，因为我们的数据将会变化，我们不希望它被缓存。
- en: 'We have named this UI macro `group_approval_summarizer`; let''s take a look
    at what it looks like in ServiceNow in *Figure 8.1*:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这个UI宏命名为`group_approval_summarizer`；让我们看看它在*图8.1*中的样子：
- en: '![](img/3ad02886-33ca-43a4-a478-fb0df40bda04.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3ad02886-33ca-43a4-a478-fb0df40bda04.png)'
- en: 'Figure 8.1: UI macro to show a summary of a record being approved'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1：显示待批准记录摘要的UI宏
- en: 'Now that we have our UI macro, we need to build a formatter to link to the
    UI macro that we can place on the group approval form. The Formatter needs a Name,
    a link to the UI macro, and to be on the group approval table. We can see an example
    of the formatter in *Figure 8.2*:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了UI宏，我们需要构建一个格式化器来链接到UI宏，我们可以将其放置在小组审批表单上。格式化器需要一个名称，一个指向UI宏的链接，并且要在小组审批表中。我们可以在*图8.2*中看到一个格式化器的例子：
- en: '![](img/4fb0593a-4e12-45ca-85db-0f3ddbb6e4cc.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4fb0593a-4e12-45ca-85db-0f3ddbb6e4cc.png)'
- en: 'Figure 8.2: Formatter to display a UI macro'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2：用于显示UI宏的格式化器
- en: 'Now that we have the formatter, we can add the formatter to the group approval
    form layout to see our UI macro appear. The results of our UI macro on a group
    approval form can be seen in *Figure 8.3*:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了格式化器，我们可以将其添加到小组审批表单布局中，以查看我们的UI宏。我们的小组审批表单上的UI宏结果可以在*图8.3*中看到：
- en: '![](img/bb9b0e56-e05d-4fb5-94cf-e5ef240a574a.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bb9b0e56-e05d-4fb5-94cf-e5ef240a574a.png)'
- en: 'Figure 8.3: Group approval form with added approval summary'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/4fb0593a-4e12-45ca-85db-0f3ddbb6e4cc.png)'
- en: In the preceding figure, we can see the output from our UI macro. This example
    shows how you can make a UI macro add value to forms in ServiceNow, adding extra
    data you cannot add with the form layout or designer.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们可以看到我们的UI宏的输出。这个例子展示了您如何使UI宏在ServiceNow中增加表单的价值，添加您无法通过表单布局或设计师添加的额外数据。
- en: Summary
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at scripting in Jelly. We explored the various tags
    of Jelly and how to use them together to create Jelly scripts. Using these Jelly
    techniques, we looked at how to create a UI macro containing Jelly script and
    saw a practical example of creating a UI macro to use in the ServiceNow platform.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Jelly中的脚本。我们探讨了Jelly的各种标签以及如何将它们结合起来创建Jelly脚本。使用这些Jelly技术，我们探讨了如何创建包含Jelly脚本的UI宏，并看到了一个在ServiceNow平台上创建UI宏的实际例子。
- en: In the next chapter, we will look at debugging in ServiceNow. We will look at
    the debugging tools ServiceNow provides for you in debugging scripts, fields,
    and the logs you have access to, to help fix errors.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨ServiceNow中的调试。我们将查看ServiceNow提供的用于调试脚本、字段和您可访问的日志的调试工具，以帮助修复错误。
