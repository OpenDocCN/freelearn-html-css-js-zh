- en: 3\. Programming Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. 编程基础
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: By the end of this chapter, you'll be able to demonstrate JavaScript syntax
    and structure; write comments and debugging code; implement conditional logic
    and looping; write functions and invoke them in the code; and construct events
    that react to user input and update the DOM.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够展示JavaScript的语法和结构；编写注释和调试代码；实现条件逻辑和循环；编写函数并在代码中调用它们；以及构建对用户输入做出反应并更新DOM的事件。
- en: This chapter serves as an introduction to the fundamental concepts and structures
    that are involved when working in JavaScript and really, programming in general.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在介绍在JavaScript（实际上，是编程的一般过程）中工作时涉及的基本概念和结构。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the previous chapter, you were introduced to some popular JavaScript tools
    and the various available runtimes for executing code with the modern web browser.
    We also explored web browser interactions and saw how we can control both the
    style and content of elements within the web browser with the use of common JavaScript
    functions in the **Integrated Development Environment** (**IDE**).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你被介绍了一些流行的JavaScript工具和现代网络浏览器可用的各种执行代码的运行时。我们还探讨了网络浏览器的交互，并看到了如何使用**集成开发环境**（**IDE**）中的常见JavaScript函数来控制网络浏览器中元素的样式和内容。
- en: You have already seen large chunks of JavaScript code; however, understanding
    what each function works for is a key skill for any good developer. This chapter
    serves as an introduction to the fundamental concepts and structures involved
    in writing programs in JavaScript. We'll cover all the basics, from object types
    to conditionals and looping structures, how to go about writing and invoking functions,
    and even commenting and debugging their code.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到了大量的JavaScript代码；然而，理解每个函数的作用是任何优秀开发人员的关键技能。本章作为JavaScript编程中涉及的基本概念和结构的介绍，我们将涵盖所有基础知识，从对象类型到条件语句和循环结构，如何编写和调用函数，甚至注释和调试它们的代码。
- en: From using variables to store and calculate data to using `if/else` statements
    to apply conditions to different variables, this chapter will be one of the most
    important stepping stones in your JavaScript learning path. A detailed understanding
    of Booleans, strings, objects, arrays, functions, arguments, and so on will improve
    your development skills.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从使用变量存储和计算数据到使用`if/else`语句对不同变量应用条件，本章将是你在JavaScript学习路径上最重要的垫脚石之一。对布尔值、字符串、对象、数组、函数、参数等的深入了解将提高你的开发技能。
- en: Data Types
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据类型
- en: Programming is all about manipulating data. Data can represent values such as
    people's names, temperature, image dimensions, the amount of disk storage, and
    total likes on a discussion group post.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 编程全部关于操作数据。数据可以代表诸如人名、温度、图像尺寸、磁盘存储量以及讨论组帖子上的总点赞数等值。
- en: All the data in a program has a data type. The data types that you usually learn
    to use first in JavaScript are number, string, boolean, object, array, and function.
    The number, string, and Boolean data types represent a single value. Objects represent
    more complex data. Functions are for writing programs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 程序中的所有数据都有数据类型。在JavaScript中，你通常首先学习的使用的数据类型是数字、字符串、布尔值、对象、数组和函数。数字、字符串和布尔值数据类型代表单个值。对象代表更复杂的数据。函数用于编写程序。
- en: 'Some common JavaScript data types with their uses and descriptions are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的JavaScript数据类型及其用途和描述如下：
- en: '**number**: Any positive or negative value whole numbers, usually called integers
    and floating-point numbers, that can be used in mathematical operations. It is
    used in product prices, checkout totals, the number of likes on a post, the geometry
    value of Pi, and can be used as a random number.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数字**：任何正数或负数的整数，通常称为整数和浮点数，可以在数学运算中使用。它们用于产品价格、结账总额、帖子上的点赞数、圆周率几何值，也可以用作随机数。'
- en: '**string**: Any set of valid characters that cannot be, or are not intended
    to be, used in computational operations. They are used to comment on a discussion
    post which can be a company name, a street address, name of a place, an account
    number, a telephone number, or a postal number.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符串**：任何一组有效的字符，这些字符不能或不应用于计算操作。它们用于对讨论帖子进行注释，可以是公司名称、街道地址、地点名称、账户号码、电话号码或邮政编码。'
- en: '**boolean**: Any value representing true and false. It is used to check whether
    a form can be submitted, whether a password meets its required characters, whether
    an order balance qualifies for free shipping, and whether a button can be clicked.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布尔值**: 表示真和假的任何值。它用于检查表单是否可以提交，密码是否符合其所需的字符，订单余额是否符合免费运输条件，以及按钮是否可以点击。'
- en: '**object**:  An unordered collection of values, called properties, and code,
    called methods, that are intended to work together. It is used for real-world
    objects such as an order, stopwatch, clock, date, or microwave. They can be used
    for software objects such as a web page document, an HTML element on a web page,
    a CSS style rule, or an HTTP request.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象**: 一个无序的值集合，称为属性，以及代码，称为方法，它们旨在协同工作。它用于现实世界的对象，例如订单、秒表、时钟、日期或微波炉。它们也可以用于软件对象，例如网页文档、网页上的HTML元素、CSS样式规则或HTTP请求。'
- en: '**function**: A specialized object data type that represents a block of code.
    The code can use optional input data and optionally return data. They can be used
    for the conversion of data such as temperature, finding a value in a list, updating
    the style of an HTML element, sending data to a web server, revealing a message
    on the screen, or checking for valid data entry formats such as an email address.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数**: 一种特殊的数据类型对象，表示一段代码。代码可以使用可选的输入数据，并可选择返回数据。它们可以用于数据转换，如温度转换，在列表中查找值，更新HTML元素的样式，向网络服务器发送数据，在屏幕上显示消息，或检查有效数据输入格式，如电子邮件地址。'
- en: Representation of Data
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据表示
- en: Data is represented in programs using expressions. If you've ever worked with
    a spreadsheet program, then expressions are analogous to cell formulas. Expressions
    can be resolved to a value representing a specific data type.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 程序中使用表达式来表示数据。如果你曾经使用过电子表格程序，那么表达式与单元格公式类似。表达式可以解析为表示特定数据类型的值。
- en: 'Expressions can be broken down into smaller parts, as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式可以分解为更小的部分，如下所示：
- en: Literal values
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文字值
- en: Operators
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运算符
- en: Variables
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量
- en: Functions that return data
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回数据的函数
- en: Object properties
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象属性
- en: Object methods that return data
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回数据的对象方法
- en: A good place to start learning about expressions is with literal values, operators,
    and variables. Functions and objects are covered separately, later in this chapter,
    and we will revisit them through their use in expressions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 学习表达式的良好起点是文字值、运算符和变量。函数和对象将在本章后面单独介绍，并且我们将通过它们在表达式中的使用来重新审视它们。
- en: Literal Values
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文字值
- en: Literal values are written into the programming code. Literal values are static.
    This means that they have the same value every time the line of code is executed,
    and they cannot be changed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 文字值写入到编程代码中。文字值是静态的。这意味着每次执行代码行时它们都有相同的值，并且不能更改。
- en: 'Literal data needs to be formatted according to the rules for its data type.
    Number, string, and Boolean values are a good place to start so that we can understand
    the formatting of literal values. Functions and object literals are covered in
    their own topics later. Here is a list of some of their types and their rules
    and an example of each valid and invalid case:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 文字数据需要根据其数据类型的规则进行格式化。数字、字符串和布尔值是一个良好的起点，这样我们就可以理解文字值的格式化。函数和对象文字将在后面的主题中介绍。以下是一些它们的类型及其规则以及每个有效和无效案例的示例：
- en: '`1000000`, `101`, `9.876`, and `-0.1234`. Invalid examples include `1,000,000`,
    `$1000000`, and `1 000 000`.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1000000`, `101`, `9.876`, 和 `-0.1234`。无效的例子包括 `1,000,000`, `$1000000`, 和 `1
    000 000`。'
- en: '`''ABC Company''`, `"Earth''s Moon"`, `"She yelled \"duck\"!"`, `''She yelled
    "duck"!''`, and so on. Invalid examples include `ABC Company`, and `"She yelled
    "duck"!"`.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''ABC Company''`, `"Earth''s Moon"`, `"She yelled \"duck\"!"`, `''She yelled
    "duck"!''` 等。无效的例子包括 `ABC Company` 和 `"She yelled "duck"!"`。'
- en: '`true` and `false` are valid examples, whereas invalid examples include `True`,
    `TRUE`, `FALSE`, and `False`.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`true` 和 `false` 是有效示例，而无效的例子包括 `True`, `TRUE`, `FALSE`, 和 `False`。'
- en: Using Operators in Expressions
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在表达式中使用运算符
- en: Operators are used to performing arithmetic, combine text, make logical comparisons,
    and assign values to variables and properties.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符用于执行算术、组合文本、进行逻辑比较以及将值赋给变量和属性。
- en: 'The operators we look at can be grouped as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所讨论的运算符可以按以下方式分组：
- en: Arithmetic
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算术
- en: String
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: Grouping
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分组
- en: Comparison
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较
- en: Logical
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑
- en: typeof
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: typeof
- en: 'For math computations, we use arithmetic operators. The string operator allows
    us to combine parts of an expression into a string value. The following table
    describes certain arithmetic operators and some examples:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数学计算，我们使用算术运算符。字符串运算符允许我们将表达式的部分组合成一个字符串值。以下表格描述了某些算术运算符及其示例：
- en: '![Figure 3.1: Arithmetic operators'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.1：算术运算符'
- en: '](img/C14377_03_01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_03_01.jpg)'
- en: 'Figure 3.1: Arithmetic operators'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1：算术运算符
- en: 'Let''s say we could use `+`, which is concatenation. It converts non-string
    data types into strings. The following code shows three separate examples:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们可以使用 `+`，这是连接运算符。它将非字符串数据类型转换为字符串。以下代码显示了三个单独的示例：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output for each would be as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 每个示例的输出如下：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Expressions are not evaluated left to right. Instead, they are evaluated based
    on a preset operator order, which is called the operator precedence. For example,
    the multiplication operator has higher precedence than the addition operator does.
    You can override the operator's precedence using the grouping operator. It forces
    the evaluation of the expression contained within it before the rest of the expression
    is evaluated.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式不是按从左到右的顺序进行评估的。相反，它们是根据预设的运算符顺序进行评估的，这被称为运算符优先级。例如，乘法运算符的优先级高于加法运算符。您可以使用分组运算符来覆盖运算符的优先级。它强制在评估表达式中的其余部分之前先评估它所包含的表达式。
- en: 'For example, the `()` operator controls the precedence of expression evaluation:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`()` 运算符控制表达式评估的优先级：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output for each of the preceding examples would be as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 前述每个示例的输出如下：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Comparing data is an important part of programming. The resulting value of
    comparing data is either true or false. A portion of an expression can be compared
    to another portion using the comparison operators, which are sometimes called
    relational operators. The following table describes certain comparison operators,
    along with examples:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 比较数据是编程的重要组成部分。比较数据的结果要么是 true（真），要么是 false（假）。可以使用比较运算符（有时称为关系运算符）将表达式的一部分与另一部分进行比较。以下表格描述了某些比较运算符及其示例：
- en: '![Figure 3.2: Comparison operators'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.2：比较运算符'
- en: '](img/C14377_03_02.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_03_02.jpg)'
- en: 'Figure 3.2: Comparison operators'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2：比较运算符
- en: 'Multiple parts of an expression can be compared using logical operators. These
    are sometimes called Boolean operators. Some Boolean operators, along with a description
    of them and examples, are as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用逻辑运算符比较表达式的多个部分。这些有时被称为布尔运算符。以下是一些布尔运算符及其描述和示例：
- en: '![Figure 3.3: Logical operators'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.3：逻辑运算符'
- en: '](img/C14377_03_03.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_03_03.jpg)'
- en: 'Figure 3.3: Logical operators'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3：逻辑运算符
- en: Not all operators are symbols. A very helpful operator is `typeof`. It shows
    the data type as a string. The operator is all lowercase letters. Use the group
    operator to get the type of an expression using other operators.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有运算符都是符号。一个非常有用的运算符是 `typeof`。它以字符串形式显示数据类型。该运算符全部为小写字母。使用分组运算符来获取使用其他运算符的表达式的类型。
- en: 'For example, the `typeof` operator controls the precedence of expression evaluation:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`typeof` 运算符控制表达式评估的优先级：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output for each of the preceding examples would be as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 前述每个示例的输出如下：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It's good practice to surround operators with a space. Exceptions are to not
    use spaces before or after the grouping operator `( )` and before the logical
    not `!` operator.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 周围使用空格包围运算符是一个好的做法。例外情况是不在分组运算符 `( )` 和逻辑非运算符 `!` 前后使用空格。
- en: 'Exercise 3.01: Implementing Expressions and Operators'
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.01：实现表达式和运算符
- en: 'In this exercise, you will interactively enter number, string, and comparison
    expressions into a web browser console window and review the results. Let''s get
    started. Open the `data-expressions.html` document in your web browser:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将交互式地将数字、字符串和比较表达式输入到网络浏览器控制台窗口中，并查看结果。让我们开始吧。在您的网络浏览器中打开 `data-expressions.html`
    文档：
- en: Open the web developer console window using your web browser.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的网络浏览器打开开发者控制台窗口。
- en: In the next couple of steps, we will implement a few expressions using number
    data and arithmetic operators. Type the items on the lines beginning with the
    `>` symbol. The console window will show a response on the lines beginning with
    the `<` symbol.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在接下来的几个步骤中，我们将使用数字数据和算术运算符实现几个表达式。在以 `>` 符号开始的行上键入项目。控制台窗口将在以 `<` 符号开始的行上显示响应。
- en: 'Write the following code to add two literal whole numbers:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写以下代码来加两个字面整数值：
- en: '[PRE6]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Write the following code to divide the literal whole numbers:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写以下代码来除以字面整数值：
- en: '[PRE7]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, write the following code to divide a real number by a whole number:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，编写以下代码来除以一个整数：
- en: '[PRE8]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Multiplication has a higher order of operator precedence, which is demonstrated
    with the following code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 乘法有更高的运算符优先级，以下代码展示了这一点：
- en: '[PRE9]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can use parentheses to change the order of operational precedence, as shown
    here:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用括号来改变运算符的优先级顺序，如下所示：
- en: '[PRE10]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To show the data type of a real number, we can use `typeof`, as shown here:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要显示实数的类型，我们可以使用`typeof`，如下所示：
- en: '[PRE11]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s try the following command:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试以下命令：
- en: '[PRE12]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The output is a syntax error because you cannot have a number in this format
    with spaces (`123 456` `789` is not recognized as a number, but `123456789` is).
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出是语法错误，因为您不能以这种格式（例如`123 456` `789`不被识别为数字，但`123456789`是）包含数字。
- en: 'We can compare two whole numbers using the `>` operator, as shown here:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用`>`运算符来比较两个整数，如下所示：
- en: '[PRE13]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Similarly, we can compare two whole numbers using the `<` operator:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，我们可以使用`<`运算符来比较两个整数：
- en: '[PRE14]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we can switch over and work with string data. Let''s have a look at the
    output when we enter a literal string using double quotes as a delimiter:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以切换到处理字符串数据。让我们看看当我们使用双引号作为分隔符输入字面字符串时的输出：
- en: '[PRE15]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The next couple of snippets will show different examples of using literal strings.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面的几个代码片段将展示使用字面字符串的不同示例。
- en: 'Using a literal string without delimiters would result in an error since JavaScript
    would not recognize such an input:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不使用分隔符使用字面字符串会导致错误，因为JavaScript无法识别此类输入：
- en: '[PRE16]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can use a literal string using double-quotes. Suppose you want to return
    the statement in double-quotes. You can place the double quotes in between a single
    quote:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用双引号字面字符串。假设您想返回双引号内的语句。您可以将双引号放在单引号之间：
- en: '[PRE17]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Use the `\` escape character to use a delimiter. This turns special characters
    into string characters:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`\`转义字符来使用分隔符。这将特殊字符转换为字符串字符：
- en: '[PRE18]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'A non-mathematic number such as a phone number without delimiters will be converted
    into a number:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有分隔符的非数学数字，例如电话号码，将被转换为数字：
- en: '[PRE19]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'A non-mathematic number such as a phone number will appear as follows because
    we are using "":'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们使用的是`""`，非数学数字，例如电话号码，将如下所示：
- en: '[PRE20]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can also combine numbers and a literal string, as shown here:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以将数字和字面字符串组合起来，如下所示：
- en: '[PRE21]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can use the `==` operator to compare two strings with the same case:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用`==`运算符来比较具有相同大小写的两个字符串：
- en: '[PRE22]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, let''s try comparing two strings with a different case:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试比较两个不同大小写的字符串：
- en: '[PRE23]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When we compare a number with a string with the same numeric value using the
    `==` operator, data type conversion takes place. This is shown in the following
    snippet:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们使用`==`运算符比较具有相同数值的数字和字符串时，会发生数据类型转换。以下代码片段展示了这一点：
- en: '[PRE24]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If we want data type conversion to not take place before the comparison is
    made, we need to use the `===` operator, as shown here:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们希望在比较之前不进行数据类型转换，我们需要使用`===`运算符，如下所示：
- en: '[PRE25]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We used several operators and expressions in the preceding exercise. Real-world
    use cases of these operators and expressions would vary, depending on the type
    of applications being developed. However, the preceding exercise is a good starting
    point with regard to using these in actual programs. Note that, so far, the examples
    we used were using literal values. However, this may not always be the case in
    a real-world application. Often, values change dynamically while a program executes,
    and the use of variables in expressions becomes inevitable in such cases. The
    next section teaches you how you can use variables and constants in expressions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的练习中，我们使用了几个运算符和表达式。这些运算符和表达式的实际应用案例会根据正在开发的应用类型而有所不同。然而，前面的练习是使用这些运算符在实际程序中的良好起点。请注意，到目前为止，我们使用的示例都是使用字面值。然而，在现实世界的应用中，情况可能并非总是如此。通常，在程序执行过程中，值会动态变化，在这种情况下，在表达式中使用变量变得不可避免。下一节将向您展示您如何在表达式中使用变量和常量。
- en: Using Variables and Constants in Expressions
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在表达式中使用变量和常量
- en: 'Variables and constants are symbolic names that are assigned to values. The
    value of a variable can be changed after it is assigned. The value that''s assigned
    to a constant cannot be changed. Variables and constants involve the following
    items:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 变量和常量是分配给值的符号名称。变量的值可以在分配后更改。分配给常量的值不能更改。变量和常量涉及以下项目：
- en: Declaration keyword
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明关键字
- en: Name
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称
- en: Assignment operator
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 赋值运算符
- en: Expressions
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达式
- en: Data type
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类型
- en: Variables and constants need to be `var` and `let`. For constants, the declaration
    keyword is `const`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 变量和常量需要使用`var`和`let`。对于常量，声明关键字是`const`。
- en: Variables and constants require a `=`. The variable's data type is dynamic and
    is the same as the expression.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 变量和常量需要`=`。变量的数据类型是动态的，与表达式相同。
- en: Variables do not need to be assigned a value when declared. A constant must
    be assigned a value when declared.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 声明变量时不需要赋值。常量必须在声明时赋值。
- en: 'Have a look at the following examples of declaring a variable without assigning
    a value:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下声明变量但不赋值的示例：
- en: '[PRE26]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Variables that are not assigned a value still have a data type. That data type
    is named `typeof` operator detects undefined data types.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 没有赋值的变量仍然有数据类型。这种数据类型被称为`typeof`运算符检测未定义的数据类型。
- en: 'Here are some examples of declaring a variable and assigning a value:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些声明变量并赋值的示例：
- en: '[PRE27]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Some examples of assigning a value to a variable that''s been previously declared
    are as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些将值赋给先前声明的变量的示例：
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Exercise 3.02: Working with Variables Using the Web Browser Console'
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.02：使用网络浏览器控制台处理变量
- en: 'In this exercise, you will use the web browser console window to work with
    variables. You will practice declaring variables, assigning values, and checking
    their data types. Let''s get started:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将使用网络浏览器控制台窗口来处理变量。您将练习声明变量、赋值和检查它们的类型。让我们开始吧：
- en: Use the `variables.html` file from [https://packt.live/370myse](https://packt.live/370myse)
    in your web browser.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中使用[https://packt.live/370myse](https://packt.live/370myse)中的`variables.html`文件。
- en: Open the web developer console window using your web browser.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的网络浏览器打开开发者控制台窗口。
- en: Type the items onto the lines beginning with the `>` symbol. The console window
    will show a response on the lines beginning with the `<` symbol.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目输入到以`>`符号开始的行上。控制台窗口将在以`<`符号开始的行上显示响应。
- en: 'Declare a variable named `firstName`:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个名为`firstName`的变量：
- en: '[PRE29]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Write the data type of the variable:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写出变量的数据类型：
- en: '[PRE30]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Assign the string value `Albert` to the `firstName` variable:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将字符串值`Albert`赋给`firstName`变量：
- en: '[PRE31]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To find out what data type our input is, use the `typeof` keyword, as shown
    here:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要找出输入的数据类型，使用`typeof`关键字，如下所示：
- en: '[PRE32]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To find out what value our `firstName` variable is holding, we simply need
    to write the following code:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要找出`firstName`变量所持有的值，我们只需编写以下代码：
- en: '[PRE33]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Declare a variable and assign it to a number expression:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个变量并将其赋给一个数值表达式：
- en: '[PRE34]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Write the value of `totalLikes`:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写出`totalLikes`的值：
- en: '[PRE35]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To ascertain the data type, we will once again use `typeof`, as shown here:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确定数据类型，我们再次使用`typeof`，如下所示：
- en: '[PRE36]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: So far, we haven't changed the values our variables are holding. We shall do
    this in the next step.
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有改变变量所持有的值。我们将在下一步中这样做。
- en: 'Here is the code for changing the value held by `totalLikes`:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是更改`totalLikes`所持值的代码：
- en: '[PRE37]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We can use the comparison operator, `>`, to compare the value our variable is
    holding with a reference value. This is done in the next step.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以使用比较运算符`>`来比较变量所持有的值与参考值。这将在下一步中完成。
- en: 'Compare the value of `totalLikes` using the following code:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码比较`totalLikes`的值：
- en: '[PRE38]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The result is obviously false as the current value of `totalLikes` is `51`.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果显然是假的，因为`totalLikes`当前值为`51`。
- en: Now, let's define a new variable and use Boolean expressions.
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，让我们定义一个新的变量并使用布尔表达式。
- en: 'Declare a variable and assign it to a Boolean expression:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个变量并将其赋给一个布尔表达式：
- en: '[PRE39]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Write the data type, like so:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写出数据类型，如下所示：
- en: '[PRE40]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: You have now interactively worked with declaring variables, assigned them values,
    and used them in expressions. We defined variables with different inputs such
    as strings, numbers, and Boolean values. You also used the `typeof` operator to
    reveal the data type of a variable. Now, we will progress to another important
    topic — functions.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经交互式地与声明变量、为它们赋值以及在表达式中使用它们进行了工作。我们使用不同的输入定义了变量，如字符串、数字和布尔值。您还使用了`typeof`运算符来揭示变量的数据类型。现在，我们将继续到另一个重要主题——函数。
- en: Functions That Return Values
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值的函数
- en: Functions may be written to return a value. In that case, we can use them in
    expressions. When we use a function, it is also called invoking the function.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以被编写为返回一个值。在这种情况下，我们可以在表达式中使用它们。当我们使用一个函数时，它也被称作调用函数。
- en: To use a function in an expression, you need to include the function name, followed
    by parentheses. If the function requires input, it is placed inside the parentheses
    as valid expressions. These are called arguments. If more than one argument is
    needed, they are separated with commas.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要在表达式中使用函数，您需要包含函数名，后跟括号。如果函数需要输入，它被放置在括号内作为有效的表达式。这些被称为参数。如果需要多个参数，它们用逗号分隔。
- en: These examples assume that the function will return a value.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例假设函数将返回一个值。
- en: 'Have a look at this example on expressing functions that do not require an
    argument:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个示例，它是关于表达不需要参数的函数的：
- en: '[PRE41]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This example shows us expressing a function that has one argument expressed
    as a number literal:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了如何表达一个参数被表示为数字字面值的函数：
- en: '[PRE42]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This example shows us expressing a function that has multiple arguments using
    literal values:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了如何使用字面值表达具有多个参数的函数：
- en: '[PRE43]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Finally, this example shows us expressing a function that has multiple arguments
    using variables:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这个示例展示了如何使用变量表达具有多个参数的函数：
- en: '[PRE44]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: When you see a function in an expression, think of it as representing a value.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在表达式中看到一个函数时，把它想象成代表一个值。
- en: 'Exercise 3.03: Using Functions in Expressions'
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.03：在表达式中使用函数
- en: 'In this exercise, we will use a predefined function and then use it in expressions.
    This exercise will show how you can invoke, check, and return the data type, and
    use functions in expressions. For the purpose of this exercise, we will use a
    function defined as `getDiceRoll`. Let''s get started:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用一个预定义的函数，然后在表达式中使用它。这个练习将展示您如何调用、检查和返回数据类型，以及在表达式中使用函数。为了这个练习的目的，我们将使用定义为`getDiceRoll`的函数。让我们开始吧：
- en: Open the `use-functions.html` document in your web browser.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开`use-functions.html`文档。
- en: Open the web developer, `console window`, using your web browser.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的网络浏览器打开网页开发者工具中的`控制台窗口`。
- en: The web page has a function named `getDiceRoll`. It returns the value of one
    rolled dice. It has one argument. The argument allows you to supply the number
    of dice to roll. Type the items on the lines beginning with the `>` symbol. The
    console window will show a response on the lines beginning with the `<·` symbol.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 网页中有一个名为`getDiceRoll`的函数。它返回一个掷出的骰子的值。它有一个参数。这个参数允许你提供要掷的骰子数量。在以`>`符号开始的行上输入项目。控制台窗口将在以`<·`符号开始的行上显示响应。
- en: 'Express the data type. Note that a function name without parentheses is used:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表达数据类型。请注意，没有括号的函数名被使用：
- en: '[PRE45]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Express the return value data type. Note that a function name with parentheses
    is used:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表达返回值的数据类型。请注意，带有括号的函数名被使用：
- en: '[PRE46]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Invoke the function using the following code:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码调用函数：
- en: '[PRE47]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: We can also invoke functions in math expressions.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们也可以在数学表达式中调用函数。
- en: 'Invoke the function in a math expression:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数学表达式中调用该函数：
- en: '[PRE48]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: We can also invoke functions in a comparison expression.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们也可以在比较表达式中调用函数。
- en: 'Invoke the function in a comparison expression:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在比较表达式中调用函数：
- en: '[PRE49]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: So far, we haven't passed any arguments for our functions. However, remember
    that we do have the option to do so as our function is defined to accept a single
    argument. This argument defines the number of dices that will be rolled. Let's
    try passing an argument in the next step.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有为我们的函数传递任何参数。然而，请记住，我们确实有这个选项，因为我们的函数被定义为接受单个参数。这个参数定义了将要掷的骰子数量。让我们在下一步尝试传递一个参数。
- en: 'Invoke and supply the argument for the number of dice to roll as 2:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用并传递掷骰子数量的参数为2：
- en: '[PRE50]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Functions are critical to JavaScript programming. To get you started, we have
    only shown how you can use predefined functions. You will learn to write your
    own functions later in this chapter. However, you may come across scenarios in
    which you may have to use functions that have already been created. This exercise
    was a good starting point in showing you how this can be done.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 函数对于 JavaScript 编程至关重要。为了让您入门，我们只展示了如何使用预定义的函数。您将在本章的后面学习如何编写自己的函数。然而，您可能会遇到需要使用已经创建的函数的场景。这个练习是一个很好的起点，向您展示如何做到这一点。
- en: The Object Data Type
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象数据类型
- en: 'JavaScript is designed around object data, thus making it important to understand.
    There are JavaScript objects that have been ready-made for us to use and you,
    as a programmer, will create objects. In either case, JavaScript objects are composed
    of **properties** and **methods**:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是围绕对象数据设计的，因此理解它很重要。有一些 JavaScript 对象是为我们预先准备好的，您作为程序员将创建对象。在两种情况下，JavaScript
    对象都是由 **属性** 和 **方法** 组成的：
- en: 'Property: A value that has an assigned named. Together, they are often called
    a name/value pair. Values can be any type, that is, data, a number, a string,
    a Boolean, or an object. Property values can be changed dynamically.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：一个具有指定名称的值。它们一起通常被称为名称/值对。值可以是任何类型，即数据、数字、字符串、布尔值或对象。属性值可以动态更改。
- en: 'Method: A function that performs an action.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：执行动作的函数。
- en: Ready-Made Objects
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预制对象
- en: JavaScript has ready-made objects that we can use to help us begin to learn
    how to program. There are many useful objects built into JavaScript. Web browsers
    provide a collection of objects called the Document Object Model (DOM).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 提供了一些预制对象，我们可以使用它们来帮助我们开始学习如何编程。JavaScript 中内置了许多有用的对象。网络浏览器提供了一组称为文档对象模型（DOM）的对象集合。
- en: 'Some examples of ready-made objects are as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 预制对象的例子如下：
- en: '`window` is an object in DOM. It has access to the web browser''s open window.
    Often considered a top-level DOM object containing other web browser-created objects
    as its properties, it has methods for setting timer events and printing.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window` 是 DOM 中的一个对象。它能够访问网络浏览器的打开窗口。通常被认为是一个顶层 DOM 对象，包含其他由网络浏览器创建的对象作为其属性，它有设置计时器事件和打印的方法。'
- en: '`console` is an object in DOM. It provides the ability to output to the web
    browser console window. It is also a property of the window object.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`console` 是 DOM 中的一个对象。它提供了向网络浏览器控制台窗口输出的能力。它也是窗口对象的一个属性。'
- en: '`document` is an object in DOM. It has access to a web page''s HTML elements,
    styles, and content. It is also a property of the window object.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`document` 是 DOM 中的一个对象。它能够访问网页的 HTML 元素、样式和内容。它也是窗口对象的一个属性。'
- en: '`location` is an object in DOM. It has information about the current URL. It
    is a property of the window object.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`location` 是 DOM 中的一个对象。它包含有关当前 URL 的信息。它是窗口对象的一个属性。'
- en: '`Math` is a built-in object. It consists of math constants such as Pi, and
    functions such as rounding.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Math` 是一个内置对象。它包含数学常数，如 Pi，以及如舍入等函数。'
- en: '`Date` is a built-in object. It provides calendar date and time operations.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Date` 是一个内置对象。它提供日历日期和时间操作。'
- en: 'Exercise 3.04: Working with Ready-Made Objects'
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.04：使用预制对象
- en: 'In this exercise, we will experiment with the properties and methods of ready-made
    objects that are available to JavaScript in the web browser. We will use the random,
    round, ceil, and floor methods to invoke a math object from a pre-defined object.
    Let''s get started:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将实验 JavaScript 在网络浏览器中可用的预制对象的属性和方法。我们将使用随机、舍入、向上取整和向下取整方法从预定义对象中调用数学对象。让我们开始吧：
- en: Open the `objects-ready-made.html` document in your web browser.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开 `objects-ready-made.html` 文档。
- en: Open the web developer console window using your web browser.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的网络浏览器打开网页开发者控制台窗口。
- en: First, we will start with the web browser document object. Type the items on
    the lines beginning with the `>` symbol. The console window will show a response
    on the lines beginning with the `<·` symbol.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将从网络浏览器文档对象开始。在以 `>` 符号开始的行上输入项目。控制台窗口将在以 `<·` 符号开始的行上显示响应。
- en: 'Display the document object title property:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示文档对象的标题属性：
- en: '[PRE51]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now, display the document object `doctype` property:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，显示文档对象的 `doctype` 属性：
- en: '[PRE52]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Display the document object `lastModified` property:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示文档对象的 `lastModified` 属性：
- en: '[PRE53]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Declare a variable and assign it to the `HTMLElement` object variable using
    the document object `getElementById` method:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个变量，并使用文档对象的 `getElementById` 方法将其赋值给 `HTMLElement` 对象变量：
- en: '[PRE54]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Display the `pageHeadEleHTMLElement` object:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示 `pageHeadEleHTMLElement` 对象：
- en: '[PRE55]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Write the `pageHeadEle object innerHTML` property:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写入 `pageHeadEle object innerHTML` 属性：
- en: '[PRE56]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Now, let''s look at the JavaScript built-in `Math` object. Write the Math object
    PI property:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们看看 JavaScript 内置的 `Math` 对象。写入 `Math` 对象的 PI 属性：
- en: '[PRE57]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Invoke the `random` method for the Math object:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `Math` 对象的 `random` 方法：
- en: '[PRE58]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The `Math.random()` method returns a random number from the range `0` and `1`,
    both inclusive. It returns a different value with every call.
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Math.random()` 方法返回一个介于 `0` 和 `1` 之间的随机数，包括这两个数。每次调用都会返回不同的值。'
- en: 'Invoke the `random` method for the Math object:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `Math` 对象的 `random` 方法：
- en: '[PRE59]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Invoke the `random` method for the Math object:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `Math` 对象的 `random` 方法：
- en: '[PRE60]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Use the Math object''s `round` method:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Math` 对象的 `round` 方法：
- en: '[PRE61]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Use the Math object''s `round` method:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Math` 对象的 `round` 方法：
- en: '[PRE62]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The `Math.round()` method returns the number after rounding it off to its nearest
    integer.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Math.round()` 方法返回四舍五入到最接近整数的数字。'
- en: 'Use the Math object''s `ceil` method:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Math` 对象的 `ceil` 方法：
- en: '[PRE63]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The `Match.ceil()` method returns the next smallest integer value that is greater
    than, or equal to, the given argument.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Match.ceil()` 方法返回大于或等于给定参数的下一个最小整数值。'
- en: 'Use the Math object''s `ceil` method:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Math` 对象的 `ceil` 方法：
- en: '[PRE64]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Use the Math object''s `floor` method:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Math` 对象的 `floor` 方法：
- en: '[PRE65]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The `Math.floor()` method returns the previous largest integer value that is
    less than, or equal to, the given argument.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Math.floor()` 方法返回小于或等于给定参数的前一个最大整数值。'
- en: 'Use the Math object''s `floor` method:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Math` 对象的 `floor` 方法：
- en: '[PRE66]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'This is the expression we use to get a random dice value. The floor method
    argument is an expression, that is, `Math.random() * 6`. Its result is added to
    1:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是获取随机骰子值的表达式。floor 方法的参数是一个表达式，即 `Math.random() * 6`。其结果加 1：
- en: '[PRE67]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: There are many ready-made objects available in JavaScript. They are used just
    like other functions and variables, except we call the functions as methods and
    the variables as properties.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中有许多现成的对象可供使用。它们的使用方式与其他函数和变量类似，只是我们调用函数时使用方法，调用变量时使用属性。
- en: Self-Made Objects
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义对象
- en: You often have to create objects when developing real-world applications. They
    help you organize a set of data and functions that work together. Think about
    what properties and methods you may use for a stopwatch object.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发现实世界应用时，你经常需要创建对象。它们帮助你组织一组相互协作的数据和函数。想想你可能为计时器对象使用的属性和方法。
- en: 'You can see that we named the properties and methods as follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看我们如何命名属性和方法如下：
- en: '`elapsedTime` is a property with a data type number. It displays the seconds
    that have elapsed since timing started.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`elapsedTime` 是一个数字类型的数据属性。它显示自计时开始以来经过的秒数。'
- en: '`resultsHistory` is a property data type object. It displays a list of previous
    timings.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resultsHistory` 是一个对象类型的数据属性。它显示之前的计时列表。'
- en: '`isTiming` is a property data type Boolean. It displays the state of its timing.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isTiming` 是一个布尔类型的数据属性。它显示其计时状态。'
- en: '`isPaused` is a property data type Boolean. It displays the state if paused.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isPaused` 是一个布尔类型的数据属性。它显示是否暂停的状态。'
- en: '`start` is a method data type function. It starts timing and sets `elapsedTime`
    to `0`.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start` 是一个函数类型的数据方法。它开始计时并将 `elapsedTime` 设置为 `0`。'
- en: '`pause` is a method data type function. It pauses the timing.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pause` 是一个函数类型的数据方法。它暂停计时。'
- en: '`resume` is a method data type function. It resumes the timing.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resume` 是一个函数类型的数据方法。它恢复计时。'
- en: '`stop` is a method data type function. It stops timing and adds the result
    to `resultsHistory`.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stop` 是一个函数类型的数据方法。它停止计时并将结果添加到 `resultsHistory`。'
- en: Object Dot Notation
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象点表示法
- en: 'To reference object properties and methods, you use dot notation. This is the
    object name, followed by a period, and then the name of the property or method.
    Let''s use the `stopWatch` object as an example:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 要引用对象属性和方法，你使用点表示法。这是对象名称，后面跟着一个点，然后是属性或方法的名称。让我们以 `stopWatch` 对象为例：
- en: '[PRE68]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Methods require parentheses after the name. If the method requires data input,
    the data is placed inside the parentheses.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 方法名称后需要跟括号。如果方法需要数据输入，则数据放在括号内。
- en: The Array Object
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组对象
- en: 'Arrays are objects that represent a list of values. Each item in the list is
    called an element. To initialize an array, you can set it to an array literal.
    An array literal is a comma-separated list of expressions enclosed in square brackets,
    like so:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是表示值列表的对象。列表中的每个项称为元素。要初始化数组，你可以将其设置为数组字面量。数组字面量是一组用方括号括起来的逗号分隔的表达式，如下所示：
- en: '[PRE69]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Elements in arrays can be different data types. Often, all the elements are
    the same data type:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中的元素可以是不同的数据类型。通常，所有元素都是相同的数据类型：
- en: '[PRE70]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Elements in a literal array can be expressions, but they are evaluated and
    only the expression values are stored:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 文字数组中的元素可以是表达式，但它们将被评估，并且只存储表达式的值：
- en: '[PRE71]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Variables and object properties can contain arrays:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 变量和对象属性可以包含数组：
- en: '[PRE72]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Array elements can be arrays:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 数组元素可以是数组：
- en: '[PRE73]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The array objects with useful properties and methods are as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 具有有用属性和方法的数组对象如下：
- en: '`length` is a property with a number data-type that displays the number of
    items in the array.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` 是一个数字数据类型的属性，它显示数组中的项目数量。'
- en: '`push` is a method with a number data-type that appends an element and returns
    the new length.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`push` 是一个数字数据类型的方法，它将一个元素添加到数组的末尾并返回新的长度。'
- en: '`unshift` is a method with a number data-type that prepends an element and
    returns the new length.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unshift` 是一个数字数据类型的方法，它将一个元素添加到数组的开头并返回新的长度。'
- en: '`shift` is a method with a mixed data-type that removes the first element and
    returns the removed element''s value.'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shift` 是一个混合数据类型的方法，它移除第一个元素并返回被移除元素的值。'
- en: '`pop` is a method with a mixed data-type that removes the last element to return
    the removed element''s value.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pop` 是一个混合数据类型的方法，它移除最后一个元素并返回被移除元素的值。'
- en: '`concat` is a method with a function data-type that merges two or more arrays
    to return a new array.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`concat` 是一个函数数据类型的方法，它将两个或多个数组合并为一个新数组。'
- en: Using the Console Object
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用控制台对象
- en: The `console` object has a method called `log` that we can use to test expressions
    in a JavaScript program. It takes an unlimited number of expressions separated
    by commas. All the expressions we enter into the console window would work with
    the `console.log` method. It evaluates the expressions and returns their results
    in the console. Multiple expressions are separated by a space.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`console` 对象有一个名为 `log` 的方法，我们可以使用它来测试JavaScript程序中的表达式。它接受由逗号分隔的不限数量的表达式。我们输入到控制台窗口的所有表达式都将与
    `console.log` 方法一起工作。它评估这些表达式，并在控制台中返回它们的结果。多个表达式由空格分隔。'
- en: 'The `console.log` method will be used in the upcoming exercises. Let''s have
    a look at its syntax:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，我们将使用 `console.log` 方法。让我们看看它的语法：
- en: '[PRE74]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Here are some examples of the `console.log` method:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些 `console.log` 方法的示例：
- en: '[PRE75]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Syntax
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语法
- en: Programs follow a set of rules that define keywords, symbols, and structure.
    This is called the syntax. We have already learned about many of the syntax rules
    in JavaScript for expressing data, variables, and expressions. You will be required
    to name objects, properties, methods, variables, and functions.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 程序遵循一组规则，这些规则定义了关键字、符号和结构。这被称为语法。我们已经学习了JavaScript中许多用于表示数据、变量和表达式的语法规则。你将需要命名对象、属性、方法、变量和函数。
- en: The following is a basic set of rules and conventions. Conventions are another
    term for best practices. Although not following a convention will not cause issues
    in your coding, they can make your code less easy to follow and not palatable
    to other programmers, for example, who may be interviewing you for a job and ask
    to see your code samples.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一组基本的规则和约定。约定是最佳实践的另一种说法。尽管不遵循约定不会导致你的代码出现问题，但它们可以使你的代码更难以理解，并且可能不被其他程序员接受，例如，他们可能在面试你时要求查看你的代码示例。
- en: 'The naming rules and conventions for functions and variables are as follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 函数和变量的命名规则和约定如下：
- en: 26 upper and lowercase letters (**A-Z, a-z**).
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 26个大小写字母（**A-Z, a-z**）。
- en: Any character but the first character can be one of 10 digits (**0-9**).
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何字符但第一个字符可以是10个数字（**0-9**）之一。
- en: No spaces, dashes, or commas. The underscore (**_**) character is acceptable.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有空格、破折号或逗号。下划线（**_**）字符是可以接受的。
- en: Capitalization follows camelCase. This means that all characters are lowercase,
    except for the first letters of words and except for the first word in compound
    worded names.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小写遵循驼峰式命名法。这意味着所有字符都是小写，除了单词的首字母以及复合词名中的第一个单词的首字母。
- en: No JavaScript reserved words; for example, you cannot use `typeof`, `var`, `let`,
    and `const`.
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有JavaScript保留字；例如，你不能使用 `typeof`、`var`、`let` 和 `const`。
- en: Semicolon at the End of Code Statements
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码语句末尾的分号
- en: Some programming languages require a semicolon `;` at the end of every executable
    code statement. JavaScript does not have this requirement, except when you have
    more than one executable code statement on the same line of a JavaScript file.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 一些编程语言要求每个可执行代码语句的末尾都要有一个分号 `;`。JavaScript没有这个要求，除非你在JavaScript文件的同一行上有多个可执行代码语句。
- en: Requiring a semicolon `;` at the end of every executable code statement is more
    of a personal or development team choice. Since the semicolon character `;` is
    used in other languages, often, programmers prefer to use them in JavaScript so
    that they get into the habit of using them and so that they spend less time dealing
    with syntax errors. If you choose to use the semicolon character `;`, then do
    it consistently.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个可执行代码语句的末尾要求分号 `;` 更多的是个人或开发团队的选择。由于分号字符 `;` 在其他语言中经常使用，程序员通常更喜欢在JavaScript中使用它们，这样他们就能养成使用它们的习惯，并且可以节省更多的时间来处理语法错误。如果你选择使用分号字符
    `;`，那么请保持一致性。
- en: Lines of Code versus Statements
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码行与语句
- en: Each line in a JavaScript source file does not need to be a single line of executable
    code. You can break a single line of executable code into multiple source file
    lines, or put multiple lines of executable code on a single source file line.
    This flexibility allows you to format the code so that it is easier to follow
    and edit.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript源文件中的每一行都不需要是单独的可执行代码行。你可以将一行可执行代码拆分成多个源文件行，或者在一个源文件行上放置多行可执行代码。这种灵活性允许你格式化代码，使其更容易阅读和编辑。
- en: 'The following is a single line of executable code using a single source file
    line:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一行使用单个源文件行的可执行代码：
- en: '[PRE76]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'However, it may be more desirable to use multiple source file lines, like so:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用多行源文件行可能更可取，如下所示：
- en: '[PRE77]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'You can have more than one line of code on the same line if you use `;` after
    the previous code line:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 `;` 在前一行代码之后，你可以在同一行上有超过一行代码：
- en: '[PRE78]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: You will learn that, when JavaScript files are prepared for publishing, you
    can optionally use an optimizer program to compress all the lines in a source
    file into one line. In this way, the invisible end of a line character is removed
    to make the file smaller.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 你将了解到，当JavaScript文件准备发布时，你可以选择性地使用优化程序将源文件中的所有行压缩成一行。这样，行尾的不可见字符就被移除，使文件更小。
- en: Comments
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释
- en: You can add a comment to your code since they are ignored when the program is
    executed. Comments can help us remember what the code does at a future date and
    inform other programmers who may need to use or work with your code.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在代码中添加注释，因为它们在程序执行时会被忽略。注释可以帮助我们在未来记住代码的功能，并告知可能需要使用或与你的代码一起工作的其他程序员。
- en: Commenting is a useful tool to keep a line of code from executing in testing.
    For example, let's say you have one or more lines of code that are not working
    as expected and you want to try alternative code. You can comment on the code
    in question while you try the alternatives.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 注释是防止代码在测试中执行的有用工具。例如，假设你有一行或多行代码没有按预期工作，你想尝试替代代码。当你尝试替代方案时，你可以对有问题的代码进行注释。
- en: JavaScript has inline commenting, also known as single-line commenting. This
    uses the double forward slash, `//`. All the text following the double slash up
    to the end of the line is ignored when the program is executed.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript有内联注释，也称为单行注释。这使用双斜杠 `//`。当程序执行时，双斜杠之后直到行尾的所有文本都被忽略。
- en: 'Let''s have a look at some examples of inline comments. The following comment
    explains the next line of code:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些内联注释的例子。以下注释解释了下一行代码：
- en: '[PRE79]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The comment at the end of the line is explaining the code:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 行尾的注释正在解释代码：
- en: '[PRE80]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: JavaScript has block commenting, also known as multi-line commenting. This uses
    the combined forward slash asterisk characters to mark the beginning of the comment,
    and the reverse of a combined asterisk forward-slash to mark the end of the comment.
    All the text between `/*` and `*/` is ignored when the program is executed. Let's
    have a look at the various block comments.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript有块级注释，也称为多行注释。这使用组合的斜杠星号字符来标记注释的开始，以及组合星号斜杠的反向来标记注释的结束。当程序执行时，`/*`
    和 `*/` 之间的所有文本都被忽略。让我们看看各种块级注释。
- en: 'The following is a multiple-line block comment that contains code. This code
    snippet would not be executed:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个包含代码的多行块级注释。这段代码片段将不会被执行：
- en: '[PRE81]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'A block comment can be a single line in the file:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 块级注释可以是文件中的一行：
- en: '[PRE82]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The following is an example of using `JDoc` block comments for a function:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用`JDoc`块注释为函数的示例：
- en: '[PRE83]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: There are also tools that use syntax to produce documentation of your code from
    comments (for example, JDoc). These tools read your source code and produce a
    documentation guide of your code. Comments increase the bandwidth for web pages,
    so they are often not seen in the source code when you inspect a web page. This
    is because, often, the original JavaScript file is not published, but rather a
    compressed version. The tools that compress the JavaScript file will remove comments
    by default. Comments are helpful for learning. You are encouraged to write comments
    in your code that explain what the code does.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 也有一些工具使用语法从注释中生成你的代码文档（例如，JDoc）。这些工具读取你的源代码并生成你的代码文档指南。注释增加了网页的带宽，因此当你检查网页时，通常看不到源代码中的注释。这是因为，通常，原始的JavaScript文件并没有发布，而是发布了一个压缩版本。压缩JavaScript文件的工具会默认删除注释。注释对学习很有帮助。鼓励你在代码中添加注释，解释代码的功能。
- en: Conditional and Loop Flow
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件和循环流程
- en: 'Statements in JavaScript are processed sequentially in the order they''re loaded.
    That order can be changed with conditional and loop code statements. The different
    parts of a control statement are as follows:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的语句按加载顺序顺序处理。这个顺序可以通过条件或循环代码语句来改变。控制语句的不同部分如下：
- en: Code blocks `{…}`
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码块 `{…}`
- en: Conditional flow statements, such as `if...else, switch, try catch finally`
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件流程语句，如`if...else`、`switch`、`try catch finally`
- en: Loop statements, such as `for, do...while, while, for...in, and for...of`
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环语句，如`for`、`do...while`、`while`、`for...in`和`for...of`
- en: Other control statements, such as `labeled`, `break`, and `continue`
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他控制语句，如`labeled`、`break`和`continue`
- en: We will describe each of these in detail in the next section.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中详细描述这些内容。
- en: Code Blocks
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码块
- en: 'Code blocks are statements that are placed between an open and close curly
    bracket. The syntax is as follows:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块是放置在开闭花括号之间的语句。其语法如下：
- en: '[PRE84]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Code blocks by themselves do not offer any statement flow advantage until you
    combine them with conditional or loop statements.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块本身并不提供任何语句流程优势，直到你将它们与条件或循环语句结合使用。
- en: Conditional Flow Statements
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件流程语句
- en: Conditional statements use logic expressions to choose from among a set of statements
    to process.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 条件语句使用逻辑表达式从一组语句中选择要处理的语句。
- en: if...else Statement
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: if...else 语句
- en: The `if`, `else...if`, and `else` statements give you four structures for selecting
    or skipping blocks of code.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`、`else...if`和`else`语句为你提供了四种选择或跳过代码块的结构。'
- en: if Statement
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: if 语句
- en: 'Code in an `if` statement is processed if the expression evaluates to `true`
    and is skipped if the expression evaluates to `false`. The syntax is as follows:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句中的代码在表达式评估为`true`时处理，如果表达式评估为`false`则跳过。其语法如下：'
- en: '[PRE85]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'This shows the flow of the `if` statement. If the Boolean expression is `true`,
    the code is processed. If `false`, the code is skipped:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了`if`语句的流程。如果布尔表达式为`true`，则处理代码。如果为`false`，则跳过代码：
- en: '![Figure 3.4: The if flowchart'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.4：if流程图'
- en: '](img/C14377_03_04.jpg)'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_03_04.jpg)'
- en: 'Figure 3.4: The if flowchart'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4：if流程图
- en: 'Exercise 3.05: Writing an if statement'
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.05：编写if语句
- en: 'In this exercise, you will use the `if` statement to test for an even number
    between 1 and 6 and test the results in your web browser console window. Let''s
    get started:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将使用`if`语句测试1到6之间的偶数，并在你的网络浏览器控制台窗口中测试结果。让我们开始吧：
- en: Open the `if-statement.html` document in your web browser.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开`if-statement.html`文档。
- en: Open the web developer console window using your web browser.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的网络浏览器打开网页开发者控制台窗口。
- en: 'Open the `if-statement.js` document in your code editor, replace all of its
    content with the following code, and then save it:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开`if-statement.js`文档，将其所有内容替换为以下代码，然后保存：
- en: '[PRE86]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: The `Math.random()` function randomly creates a whole number from `1` to `6`
    and displays it in the console. Here, the `if` statement states that if the remainder
    of the number, divided by two, is not zero, that is, `diceValue % 2 != 0`, then
    the `if` expression is true and the `console.log()` message is displayed in the
    console.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Math.random()`函数随机生成一个从`1`到`6`的整数，并在控制台显示。在这里，`if`语句表明，如果数字除以二的余数不为零，即`diceValue
    % 2 != 0`，则`if`表达式为真，并在控制台显示`console.log()`消息。'
- en: 'Reload the `if-statement.html` web page in your web browser with the console
    window open. Repeat until you see a version of the two examples:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中重新加载 `if-statement.html` 网页，同时打开控制台窗口。重复操作，直到你看到两个示例的版本：
- en: '[PRE87]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Edit the `if-statement.js` document using bolded lines and then save it:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用加粗的行编辑 `if-statement.js` 文档，然后保存它：
- en: '[PRE88]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Because there is only one line of code in the `if` statement, the block brackets
    are not required.
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为 `if` 语句中只有一行代码，所以不需要代码块括号。
- en: Reload the `if-statement.html` web page in your web browser with the console
    window open. You should expect the same results.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中重新加载 `if-statement.html` 网页，同时打开控制台窗口。你应该期望得到相同的结果。
- en: 'Edit the `if-statement.js` document and add the highlighted line to `console.log()`
    and save it:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `if-statement.js` 文档，将高亮行添加到 `console.log()` 并保存：
- en: '[PRE89]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Reload the `if-statement.html` web page in your web browser with the console
    window open:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中重新加载 `if-statement.html` 网页，同时打开控制台窗口：
- en: '[PRE90]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: The Dr. Seuss quote is shown regardless of whether the number is even or odd.
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无论数字是偶数还是奇数，都会显示苏斯博士的引言。
- en: 'Edit the `if-statement.js` document lines in bold and save it. We added the
    block delimiters here:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用加粗的行编辑 `if-statement.js` 文档中的行并保存。我们在这里添加了代码块定界符：
- en: '[PRE91]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Reload the `if-statement.html` web page in your web browser with the console
    window open:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中重新加载 `if-statement.html` 网页，同时打开控制台窗口：
- en: '[PRE92]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: You can see different outcomes depending on the logical expression of the `if`
    statement.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到根据 `if` 语句的逻辑表达式得到不同的结果。
- en: if Statement and else Statement
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: if 语句和 else 语句
- en: 'You can combine an `if` statement with an `else` statement. If the expression
    evaluates to `true`, the code in the `if` statement is processed and the code
    in the `else` statement is skipped. If the expression is false, the reverse happens;
    that is, the code in the `if` statement is skipped and the code in the `else`
    statement is processed. The syntax is as follows:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将一个 `if` 语句与一个 `else` 语句结合使用。如果表达式评估为 `true`，则处理 `if` 语句中的代码，并跳过 `else` 语句中的代码。如果表达式为
    `false`，则发生相反的情况；也就是说，跳过 `if` 语句中的代码，并处理 `else` 语句中的代码。语法如下：
- en: '[PRE93]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'The `if...else` working is visible from the following flowchart:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`if...else` 的工作流程可以从以下流程图中看出：'
- en: '![Figure 3.5: The if else flowchart'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.5：if else 流程图'
- en: '](img/C14377_03_05.jpg)'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_03_05.jpg)'
- en: 'Figure 3.5: The if else flowchart'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5：if else 流程图
- en: 'Exercise 3.06: Writing an if...else Statement'
  id: totrans-387
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.06：编写 if...else 语句
- en: 'In this exercise, a random number is being used for a coin toss. A random value
    equal to .5 or greater is heads and less than .5 is tails. We will assume that
    multiple statement lines are required for each case. Let''s get started:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们使用随机数来模拟抛硬币。随机值等于或大于 .5 表示正面，小于 .5 表示反面。我们将假设每个情况都需要多行语句。让我们开始吧：
- en: Open the `if-else-statements.html` document in your web browser.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开 `if-else-statements.html` 文档。
- en: Open the web developer console window using your web browser.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的网页浏览器打开开发者控制台窗口。
- en: 'Open the `if-else-statements.js` document in your code editor, replace all
    of its content with the following code, and then save it:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开 `if-else-statements.js` 文档，将其全部内容替换为以下代码，然后保存：
- en: '[PRE94]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: The `tossValue` variable is a value from 0 to 1, not including 1\. For now,
    just an `else` statement is used for a head toss.
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`tossValue` 变量是一个从 0 到 1 的值，不包括 1。目前，仅使用一个 `else` 语句来表示正面投掷。'
- en: 'Reload the `if-else-statements.html` web page in your web browser with the
    console window open. Repeat until you see a version of the two examples:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中重新加载 `if-else-statements.html` 网页，同时打开控制台窗口。重复操作，直到你看到两个示例的版本：
- en: '[PRE95]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Note
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The numbers that you obtain are likely to be different to the ones presented
    here.
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你得到的结果可能与这里展示的不同。
- en: 'Edit the `if-else-statements.js` document, add the following bolded code, and
    then save it:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `if-else-statements.js` 文档，添加以下加粗的代码，然后保存它：
- en: '[PRE96]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: If the `if` statement expression is `true`, the statements in its block are
    processed and the `else` block statements are skipped. If the `if` block expression
    is `false`, only the statements in the `else` block are processed.
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 `if` 语句表达式为 `true`，则处理其块中的语句，并跳过 `else` 块中的语句。如果 `if` 块表达式为 `false`，则只处理
    `else` 块中的语句。
- en: 'Reload the `if-else-statements.html` web page in your web browser with the
    console window open:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中重新加载 `if-else-statements.html` 网页，同时打开控制台窗口：
- en: '[PRE97]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Again, you will see different outcomes depending on the logical expression of
    the `if` statement. Consider how an `if` statement may handle toggling a like
    icon on the screen.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，你将看到根据if语句的逻辑表达式产生不同的结果。考虑一下if语句如何处理屏幕上切换点赞图标的情况。
- en: if Statements with Multiple else...if Statements
  id: totrans-404
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带有多个else...if语句的if语句
- en: 'You can have one or more `else...if` statements in addition to the `if` statement.
    The `if` statement and each `else...if` statement has its own expression. If the
    code in the first statement has an expression evaluated as `true`, it is processed
    and the code in all the other statements is skipped. If none of the expressions
    evaluate to `true`, all the code statements are skipped. The syntax is as follows:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 除了if语句外，你还可以有一个或多个`else...if`语句。每个if语句和每个else...if语句都有自己的表达式。如果第一个语句中的代码表达式评估为`true`，则进行处理，并跳过所有其他语句中的代码。如果没有表达式评估为`true`，则跳过所有代码语句。语法如下：
- en: '[PRE98]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'The following flowchart illustrates one or more `else...if` statements in addition
    to the `if` statement. Each of the Boolean expressions is evaluated in the order
    they''re encountered. The code is processed if the first expression is `true`,
    and the code processing procedure skips to the code following the last `else...if`
    statement:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 以下流程图说明了除了if语句外，还包含一个或多个`else...if`语句。每个布尔表达式按遇到的顺序评估。如果第一个表达式为`true`，则处理代码，并跳转到最后一个else...if语句之后的代码：
- en: '![Figure 3.6: The if and multiple elseif flowchart'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.6：if和多个elseif流程图'
- en: '](img/C14377_03_06.jpg)'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_03_06.jpg)'
- en: 'Figure 3.6: The if and multiple else...if flowchart'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6：if和多个else...if流程图
- en: if Statement, Multiple else...if statements, and the else Statement
  id: totrans-411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: if语句、多个else...if语句和else语句
- en: 'You can have one `else` statement follow the last `else...if` statement. If
    the code in the first statement has an expression evaluated to `true`, is it processed
    and the code in all other statements is skipped. If none of the expressions evaluate
    to `true`, then the code in the `else` statement is processed. The syntax is as
    follows:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在最后一个else...if语句之后有一个else语句。如果第一个语句中的代码表达式评估为`true`，则进行处理，并跳过所有其他语句中的代码。如果没有表达式评估为`true`，则处理else语句中的代码。语法如下：
- en: '[PRE99]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'The following flowchart the illustrates inclusion of the `else` statement,
    along with `else if` statements and the `if` statement. If all the Boolean expressions
    are false, then the code in the `else` block is processed:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 以下流程图说明了包含else语句、else if语句和if语句的情况。如果所有布尔表达式都为假，则处理else块中的代码：
- en: '![Figure 3.7: The else statement, along with else...if statements and the if
    statement'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.7：else语句，以及else...if语句和if语句'
- en: '](img/C14377_03_07.jpg)'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_03_07.jpg)'
- en: 'Figure 3.7: The `else` statement, along with `else...if` statements and the
    `if` statement'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7：else语句，以及else...if语句和if语句
- en: 'Exercise 3.07: Writing an if Statement with Multiple if else Statements and
    the else Statement'
  id: totrans-418
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.07：编写带有多个if else语句和else语句的if语句
- en: 'In this exercise, we will build a simple game that generates four random game
    numbers from 1 to 21 inclusive. One is the player''s score, one is the target
    score, one is a lucky score, and the last is an unlucky score. The player gets
    a wallet of 20 times the player''s score. There are five possible outcomes, with
    each assigning different wins or losses to the player''s wallet:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将构建一个简单的游戏，该游戏从1到21（包括21）生成四个随机游戏数字。其中一个是玩家的得分，一个是目标得分，一个是幸运得分，最后一个是不幸得分。玩家获得20倍于玩家得分的钱包。有五种可能的结果，每种结果都会给玩家的钱包分配不同的赢或输：
- en: The player's score matches the lucky score, and the lucky score and the unlucky
    score are different. The wallet is increased by the lucky value plus the player's
    score times `10`.
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家的得分与幸运得分相同，而幸运得分和不幸得分不同。钱包增加的金额是幸运值加上玩家得分乘以`10`。
- en: The player's score equals the unlucky score, and the lucky score and the unlucky
    score are different. The wallet is reduced to zero.
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家的得分等于不幸得分，而幸运得分和不幸得分不同。钱包减少到零。
- en: The player's score equals the target score. The wallet is increased by the difference
    between `21` and the target score times `10`.
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家的得分等于目标得分。钱包增加的金额是`21`与目标得分之差乘以`10`。
- en: The player's score beats the target score. The wallet is increased by the difference
    between the player's score and the target score times `10`.
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家的得分超过目标得分。钱包增加的金额是玩家得分与目标得分之差乘以`10`。
- en: The target score beats the player's score. The wallet is decreased by the difference
    between the target score and the player's score times `10`.
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标分数击败了玩家的分数。钱包减少目标分数与玩家分数之间的差值乘以`10`。
- en: 'The steps for completion are as follows:'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成步骤如下：
- en: Open the `if-else-if-else-statements.html` document in your web browser.
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开`if-else-if-else-statements.html`文档。
- en: Open the web developer `console window` using your web browser.
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的网络浏览器打开网页开发者`控制台窗口`。
- en: 'Open the `if-else-if-else-statements.js` document in your code editor, replace
    all of its content with the following code, and then save it:'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开`if-else-if-else-statements.js`文档，将其全部内容替换为以下代码，然后保存：
- en: '[PRE100]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'We will start by matching the target or exceeding it using the `if` statement
    block, `if (player >= target)`. The `else` statement block stating "Player loses:
    misses target by" covers being below the target.'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将首先使用`if`语句块匹配目标或超过它，即`if (player >= target)`。声明“玩家输：低于目标”的`else`语句块涵盖了低于目标的情况。
- en: Reload the `if-else-if-else-statements.html` web page in your web browser with
    the console window open. Repeat until you see a version for each of these three
    examples.
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开控制台窗口，重新加载`if-else-if-else-statements.html`网页。重复此操作，直到您看到这三个示例的版本。
- en: 'An example of the player''s score exceeding the target is as follows:'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 玩家分数超过目标的示例如下：
- en: '[PRE101]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'The following is an example of the player''s score matching the target. In
    this case, the message is not supporting the logic:'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是玩家分数匹配目标的示例。在这种情况下，消息不支持该逻辑：
- en: '[PRE102]'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'An example of the target exceeding the player''s score is as follows:'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目标分数超过玩家分数的示例如下：
- en: '[PRE103]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Now, we can add a code some handle the player matching the target.
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们可以添加一些代码来处理玩家匹配目标的情况。
- en: 'Edit the `if-else-if-else-statements.js` document, add the following bolded
    code, and then remove the strikethrough code and save it:'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`if-else-if-else-statements.js`文档，添加以下加粗代码，然后删除删除线代码并保存：
- en: '[PRE104]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: A new `if` statement block is added to handle the condition when the player
    ties with the target. The original `if` statement block is replaced with an `else...if`
    statement block that only tests for conditions when the player's value exceeds
    the target.
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加一个新的`if`语句块来处理玩家与目标平局的条件。原始的`if`语句块被替换为`else...if`语句块，该语句块仅测试玩家值超过目标的情况。
- en: Reload the `if-else-if-else-statements.html` web page in your web browser with
    the console window open. Repeat this until you see a version for each of these
    three examples.
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开控制台窗口，重新加载`if-else-if-else-statements.html`网页。重复此操作，直到您看到这三个示例的版本。
- en: 'An example of a player''s score exceeding the target is as follows:'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 玩家分数超过目标的示例如下：
- en: '[PRE105]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'The following is an example of a player matching the target. In this case,
    the message is not supporting the logic:'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一个玩家匹配目标的示例。在这种情况下，消息不支持该逻辑：
- en: '[PRE106]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'An example of the target exceeding the player''s score is as follows:'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目标分数超过玩家分数的示例如下：
- en: '[PRE107]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Edit the `if-else-if-else-statements.js` document, update it using the following
    bolded code, and then save it.
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`if-else-if-else-statements.js`文档，使用以下加粗代码更新它，然后保存。
- en: 'A variable for the lucky and unlucky number are added and are output to the
    console so that we can observe them:'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为幸运数和不幸数添加了一个变量，并将它们输出到控制台，以便我们可以观察它们：
- en: '[PRE108]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Next, we add an `if` statement block when the lucky value does not match the
    unlucky value and the player value matches the lucky value. The use of the logical
    `&&` operator handles the two required tests, both of which need to be true.
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，当幸运值不等于不幸值且玩家值等于幸运值时，我们添加一个`if`语句块。使用逻辑`&&`运算符处理这两个必需的测试，两者都必须为真。
- en: 'This condition preempts the other winning and losing condition `if` statements,
    so it needs to precede them. Add the following bolded code and remove the strikethrough
    code:'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此条件优先于其他获胜和失败条件的`if`语句，因此它需要在这些语句之前。添加以下加粗代码并删除删除线代码：
- en: '[PRE109]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: We also want a condition when the lucky value does not match the unlucky value,
    and the player value matches the unlucky value. Again, the use of the logical
    `&&` operator handles the two required tests, both of which need to be true.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还希望有一个条件，当幸运值不等于不幸值，且玩家值等于不幸值时。再次，使用逻辑`&&`运算符处理这两个必需的测试，两者都必须为真。
- en: 'This condition preempts the other winning and losing condition `if` statements,
    so it needs to precede them. Insert the following bolded code:'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此条件优先于其他获胜和失败条件的`if`语句，因此它需要在这些语句之前。插入以下加粗代码：
- en: '[PRE110]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Reload the `if-else-if-else-statements.html` web page in your web browser with
    the console window open. Repeat this until you see a version for each of these
    two examples.
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中重新加载`if-else-if-else-statements.html`网页，同时打开控制台窗口。重复此操作，直到你看到这两个示例的版本。
- en: 'The following is an example of a player matching the lucky number, but not
    the unlucky number:'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一个玩家匹配幸运数字但未匹配不幸数字的示例：
- en: '[PRE111]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'The following is an example of a player matching the unlucky number, but not
    the lucky number:'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一个玩家匹配不幸数字但未匹配幸运数字的示例：
- en: '[PRE112]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Edit the `if-else-if-else-statements.js` document, update it with the following
    bolded code, and then save it.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`if-else-if-else-statements.js`文档，用以下加粗的代码更新它，然后保存。
- en: 'The initial wallet value is `10` times the player''s score. It is displayed
    along with the other game data:'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 初始钱包值是玩家得分的`10`倍。它与其他游戏数据一起显示：
- en: '[PRE113]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: If there is a match with the lucky number, the wallet is increased by the player's
    score and the lucky score times `10`.
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果匹配到幸运数字，钱包将增加玩家的得分和幸运数字得分乘以`10`：
- en: '[PRE114]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'If there is a match with the unlucky number, the wallet is decreased to zero:'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果匹配到不幸数字，钱包将减少到零：
- en: '[PRE115]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'If the player''s score matches the target, the wallet is increased by the difference
    between `21` and the target:'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果玩家的得分与目标得分相同，钱包将增加`21`与目标得分之间的差值：
- en: '[PRE116]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'If the player''s score exceeds the target, the wallet is increased by the difference
    times `10`:'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果玩家的得分超过目标得分，钱包将增加差值乘以`10`：
- en: '[PRE117]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: The `else` statement block reduces the wallet by the difference between the
    target and the player. It ties `10`, but not below zero.
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`else`语句块将钱包减少到目标和玩家之间的差值。它绑定到`10`，但不低于零。'
- en: 'After the `if`, `if else`, and `else` block statements, the player''s final
    wallet is displayed:'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`if`、`if else`和`else`块语句之后，显示玩家的最终钱包：
- en: '[PRE118]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Reload the `if-else-if-else-statements.html` web page in your web browser with
    the console window open. Repeat this until you see a version for each of these
    examples.
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中重新加载`if-else-if-else-statements.html`网页，同时打开控制台窗口。重复此操作，直到你看到每个示例的版本。
- en: 'The following is an example of the target exceeding the player''s score and
    the amount being deducted from the wallet exceeding the wallet balance. In this
    case, the wallet is reduced to zero:'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一个目标得分超过玩家得分，并且从钱包扣除的金额超过钱包余额的示例。在这种情况下，钱包减少到零：
- en: '[PRE119]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'The following is an example of the player''s score exceeding the target score.
    The wallet increased by `10` times the difference exceeded:'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一个玩家得分超过目标得分的示例。钱包增加了超过目标得分的差值的`10`倍：
- en: '[PRE120]'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'The following is an example of the player''s score matching the target score.
    The wallet increased by `10` times the difference of `21` and the target:'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一个玩家得分匹配目标得分的示例。钱包增加了`21`与目标得分之间的差值的`10`倍：
- en: '[PRE121]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'The following is an example of the player matching the lucky number, but not
    the unlucky number. The wallet is increased by the player and the target times
    `10`:'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一个玩家匹配幸运数字但未匹配不幸数字的示例。钱包增加了玩家和目标乘以`10`：
- en: '[PRE122]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'The following is an example of the player matching the unlucky number, but
    not the lucky number. The wallet is reduced to `0`:'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一个玩家匹配不幸数字但未匹配幸运数字的示例。钱包减少到`0`：
- en: '[PRE123]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: This was a much longer exercise. It showed you how multiple `if` statements
    with different logic expressions can work together to produce one outcome. You
    will have noticed that the order of the logical expressions can make a difference
    because in this case, the lucky and unlucky values needed to be resolved before
    the target value expressions. Changing the order would produce a whole set of
    different outcomes.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当长的练习。它展示了多个具有不同逻辑表达式的`if`语句如何协同工作以产生一个结果。你可能会注意到逻辑表达式的顺序可以产生影响，因为在这种情况下，幸运和不幸的值需要在目标值表达式之前解决。改变顺序会产生一系列不同的结果。
- en: The break Statement
  id: totrans-489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`break`语句'
- en: 'The `break` statement is used within blocks for `loop` statements and the `switch`
    statements. When the `break` statement is encountered inside `loop` statement
    and `switch` statement blocks, program flow continues on the next line following
    the block. The syntax is as follows:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '`break`语句用于循环语句和`switch`语句的块中。当在循环语句和`switch`语句的块中遇到`break`语句时，程序流程将继续在块的下一行继续。语法如下：'
- en: '[PRE124]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: The second syntax form is required when it's used within a labeled statement
    block. You will find out more about labeled statements later in this chapter.
    The upcoming exercises will make use of the `break` statement.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 当它在一个带标签的语句块中使用时，需要使用第二种语法形式。你将在本章后面了解更多关于带标签语句的信息。接下来的练习将使用`break`语句。
- en: switch Statement
  id: totrans-493
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: switch语句
- en: The `switch` statement defines a block of code divided up by `case` statements
    and an optional `default` statement. The `case` statements are followed by a possible
    value for the `switch` statement expression and then a colon, `:`. Optionally,
    the code will follow a `case` statement. The `default` statement is just followed
    by a colon, `:`.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '`switch`语句定义了一个由`case`语句和可选的`default`语句分隔的代码块。`case`语句后面跟着`switch`语句表达式的可能值，然后是一个冒号`:`。可选地，代码可以跟在`case`语句后面。`default`语句后面只跟一个冒号`:`。'
- en: 'How does it work? The `switch` statement''s expression is evaluated and the
    code following the first `case` statement that has a value that matches the `switch`
    statement''s expression value is processed until a `break` statement is reached.
    Then, any remaining code is skipped. If none of the `case` statement values match
    and there is a `default` statement, then the code following the `default` statement
    is processed. Otherwise, no code is processed. The syntax is as follows:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 它是如何工作的？`switch`语句的表达式被评估，然后处理第一个与`switch`语句表达式值匹配的`case`语句后面的代码，直到遇到`break`语句。然后，跳过任何剩余的代码。如果没有`case`语句的值匹配，并且存在`default`语句，则处理`default`语句后面的代码。否则，不处理任何代码。语法如下：
- en: '[PRE125]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'The following is a flowchart illustrating the `switch` statement:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个说明`switch`语句的流程图：
- en: '![Figure 3.8: Switch statement flowchart'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.8：switch语句流程图](img/C14377_03_08.jpg)'
- en: '](img/C14377_03_08.jpg)'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.8：switch语句流程图](img/C14377_03_08.jpg)'
- en: 'Figure 3.8: Switch statement flowchart'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8：switch语句流程图
- en: 'Exercise 3.08: Writing a switch Statement and Testing It'
  id: totrans-501
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.08：编写并测试switch语句
- en: 'We are going to use the `switch` statement by simulating a game where the player
    can move their playing pieces using their keyboard. They can move left with the
    `A` key, right with the `S` key, up with the `W` key, and down with the `Z` key.
    To simulate a random selection of the keys, in either uppercase or lowercase,
    from the `keyNames` string, a variable will be used. Let''s get started:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过模拟一个游戏来使用`switch`语句，玩家可以使用键盘移动他们的游戏棋子。他们可以用`A`键向左移动，用`S`键向右移动，用`W`键向上移动，用`Z`键向下移动。为了模拟从`keyNames`字符串中随机选择键（大写或小写），将使用一个变量。让我们开始吧：
- en: Open the `switch-statement.html` document in your web browser.
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开`switch-statement.html`文档。
- en: Open the web developer console window using your web browser.
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的网络浏览器打开开发者控制台窗口。
- en: 'Open the `switch-statement.js` document in your code editor, replace all of
    its content with the following code, and then save it:'
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开`switch-statement.js`文档，将其全部内容替换为以下代码，然后保存：
- en: '[PRE126]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: The `Math.floor(Math.random() * keys.length)` expression is selecting a number
    from `0` to `7` that is then used by `charAt` to select the character from the
    `keyNames` string variable.
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Math.floor(Math.random() * keys.length)`表达式从`0`到`7`选择一个数字，然后由`charAt`使用该数字从`keyNames`字符串变量中选择字符。'
- en: 'Run a few tests by reloading the `switch-statement.html` web page in your web
    browser with the console window open. Your results will show selections from the
    `ADWSadws` characters. Here are some examples of the console output:'
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在您的网络浏览器中打开控制台窗口并重新加载`switch-statement.html`网页进行几次测试。您的结果将显示从`ADWSadws`字符中的选择。以下是一些控制台输出的示例：
- en: '[PRE127]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Edit the `switch-statement.js` document so that it includes the following bolded
    lines and then save it.
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`switch-statement.js`文档，使其包含以下加粗的行，然后保存它。
- en: 'The `switch` statement expression is as follows:'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`switch`语句表达式如下：'
- en: '[PRE128]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'The `switch` statement expression converts the character into lowercase so
    that each case statement can check for one value. Here, we are checking whether
    the case value is equal to the switch term:'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`switch`语句表达式将字符转换为小写，以便每个case语句可以检查一个值。在这里，我们正在检查case值是否等于switch项：'
- en: '[PRE129]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: The `switch` statement uses one expression and then determines the lines of
    code to process based on matching the result with the case statements. It is important
    to note that without a `break` statement, all the code to the end of the `switch`
    statement is processed once one case statement matches the expression value. This
    can be an advantage when more than one case statement uses the same code. The
    default statement allows for code that is being processed when none of the case
    statements match the expression value. However, remember that a default statement
    is not required. In this example, if the user pressed a wrong key, nothing would
    happen, which is often the case with game consoles.
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`switch`语句使用一个表达式，然后根据与case语句匹配的结果来确定要处理的代码行。需要注意的是，如果没有`break`语句，一旦一个case语句与表达式值匹配，就会处理`switch`语句末尾的所有代码。这当多个case语句使用相同的代码时可能是一个优点。`default`语句允许在没有任何case语句与表达式值匹配时处理的代码。然而，请记住，`default`语句不是必需的。在这个例子中，如果用户按错了键，什么也不会发生，这在游戏控制台中很常见。'
- en: 'Reload the `switch-statement.html` web page in your web browser with the console
    window open. The following are some sample results:'
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中重新加载`switch-statement.html`网页，同时打开控制台窗口。以下是一些示例结果：
- en: '[PRE130]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Let's use the `IJKL` keys to perform the same tasks. We'll use the `I` key for
    up, the `J` key for left, the `K` key for right, and the `M` key for down.
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们使用`IJKL`键执行相同的任务。我们将使用`I`键向上，`J`键向左，`K`键向右，`M`键向下。
- en: Edit the `switch-statement.js` document, include the following bolded lines
    and save it.
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编辑`switch-statement.js`文档，包括以下加粗的行并保存。
- en: 'First, add the new key letters:'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，添加新的键字母：
- en: '[PRE131]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Next, add the case statements for each:'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，为每个添加case语句：
- en: '[PRE132]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: When case statements are not followed by a break, the next case statement's
    code is also processed.
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果case语句后面没有跟`break`，则也会处理下一个case语句的代码。
- en: 'Reload the `switch-statement.html` web page in your web browser with the console
    window open. The following are some sample results:'
  id: totrans-525
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中重新加载`switch-statement.html`网页，同时打开控制台窗口。以下是一些示例结果：
- en: '[PRE133]'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: The simulated code does not generate any keys that are not matched by the `case`
    statements. If there were, the entire `switch` statement is skipped. The `switch`
    statement can handle other cases by using the `default` statement.
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模拟代码不会生成与`case`语句不匹配的任何键。如果有，整个`switch`语句将被跳过。`switch`语句可以通过使用`default`语句来处理其他情况。
- en: 'Edit the `switch-statement.js` document, include the following bolded lines,
    and then save it. First, let''s add a few test characters:'
  id: totrans-528
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`switch-statement.js`文档，包括以下加粗的行，然后保存。首先，让我们添加一些测试字符：
- en: '[PRE134]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'Next, let''s add the `default` statement:'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，让我们添加`default`语句：
- en: '[PRE135]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Reload the `switch-statement.html` web page in your web browser with the console
    window open. Repeat this until you see a result indicating an invalid key:'
  id: totrans-532
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中重新加载`switch-statement.html`网页，同时打开控制台窗口。重复此操作，直到您看到表示无效键的结果：
- en: '[PRE136]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: In this exercise, if the user pressed a wrong key, nothing would happen, which
    is often the case with game consoles.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，如果用户按错了键，什么也不会发生，这在游戏控制台中很常见。
- en: Loop Statements
  id: totrans-535
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环语句
- en: Loop code blocks are also called iterative blocks. They are designed to continue
    processing the code in their blocks until the `loop` statement expression becomes
    false. Iteration is a term that's used to indicate one time through the loop.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 循环代码块也被称为迭代块。它们被设计为在循环语句表达式变为false之前继续处理其块中的代码。迭代是一个术语，用来表示通过循环的一次。
- en: Note
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A loop that does not terminate is called an infinite loop. A web browser may
    display a dialog with the option to terminate long-running loops.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 一个不会终止的循环被称为无限循环。网络浏览器可能会显示一个对话框，提供终止长时间运行的循环的选项。
- en: for Statement
  id: totrans-539
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: for语句
- en: 'The `for` statement repeats the code until the repeat expression becomes `false`.
    The syntax is as follows:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`语句会重复执行代码，直到重复表达式变为`false`。其语法如下：'
- en: '[PRE137]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'The following flowchart depicts how the `for` statement works:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 以下流程图描述了`for`语句的工作方式：
- en: '![Figure 3.9: for statement flowchart'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.9：for语句流程图'
- en: '](img/C14377_03_09.jpg)'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_03_09.jpg)'
- en: 'Figure 3.9: for statement flowchart'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9：for语句流程图
- en: 'The first time the `for` statement is reached, the `initialize` statement is
    processed. It normally sets a variable that is used in the repeat expression.
    The post expression changes a value in the repeat expression. After the last line
    of code in the loop is processed, the post expression is processed and then the
    repeat expression is processed. If the repeat expression remains true, the first
    statement in the loop block is processed again. The post expression often makes
    use of the arithmetic operators called increment and decrement and the assignment
    addition and subtraction operators. Some examples of more arithmetic operators
    are as follows:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 当第一次到达 `for` 语句时，会处理 `initialize` 语句。它通常设置一个在重复表达式中使用的变量。后表达式会改变重复表达式中的值。在循环中的最后一行代码处理完毕后，会处理后表达式，然后处理重复表达式。如果重复表达式仍然为真，则再次处理循环块中的第一个语句。后表达式通常使用称为增量（increment）和减量（decrement）的算术运算符以及赋值加法和减法运算符。以下是一些更多算术运算符的示例：
- en: '![Figure 3.10: More arithmetic operators'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.10：更多算术运算符'
- en: '](img/C14377_03_10.jpg)'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_03_10.jpg)'
- en: 'Figure 3.10: More arithmetic operators'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10：更多算术运算符
- en: 'Exercise 3.09: Writing a for Loop and Testing It'
  id: totrans-550
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.09：编写并测试 for 循环
- en: 'This exercise demonstrates using the `for` statement to create an increasing
    counter and decreasing counter. Let''s get started:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习演示了使用 `for` 语句创建递增计数器和递减计数器。让我们开始吧：
- en: Open the `for-statement.html` document in your web browser.
  id: totrans-552
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开 `for-statement.html` 文档。
- en: Open the web developer console window using your web browser.
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的网页浏览器打开开发者控制台窗口。
- en: 'Open the `for-statement.js` document in your code editor, replace all of its
    content with the following code, and then save it:'
  id: totrans-554
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开 `for-statement.js` 文档，将其全部内容替换为以下代码，然后保存：
- en: '[PRE138]'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: This example is an incrementing counter loop. The `initialize` statement declares
    the `i` variable and assigns it a value of `1`. This is the value it has on the
    first iteration of the loop. At the end of the loop, the repeat expression is
    evaluated and, if true, the line following the loop is processed. The post expression
    uses the increment operator to increase the `i 1` variable at the end of each
    loop.
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个示例是一个递增计数器的循环。`initialize` 语句声明了 `i` 变量并将其赋值为 `1`。这是循环第一次迭代时的值。在循环结束时，会评估重复表达式，如果为真，则会处理循环之后的行。后表达式使用增量运算符在每次循环结束时增加
    `i 1` 变量的值。
- en: 'Reload the `for-statement.html` web page in your web browser with the `console
    window` open. The following are the results:'
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开 `for-statement.html` 网页，并确保 `控制台窗口` 是开启的。以下是一些结果：
- en: '[PRE139]'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Edit the `for-statement.js` document using the following bolded lines and then
    save it:'
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下加粗的行编辑 `for-statement.js` 文档，然后保存它：
- en: '[PRE140]'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: This example illustrates a decreasing counter loop. In this example, the post
    expression uses the decrement operator. The repeat expression is changed to be
    true until the `i` variable values are `1` or less. The `initialize` statement
    declares the `i` variable and sets it to `5`.
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个示例说明了递减计数器的循环。在这个例子中，后表达式使用减量运算符。重复表达式被修改为为真，直到 `i` 变量的值是 `1` 或更小。`initialize`
    语句声明了 `i` 变量并将其设置为 `5`。
- en: 'Reload the `for-statement.html` web page in your web browser with the console
    window open. The following are the results:'
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开 `for-statement.html` 网页，并确保控制台窗口是开启的。以下是一些结果：
- en: '[PRE141]'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'Edit the `for-statement.js` document using the following bolded lines and then
    save it:'
  id: totrans-564
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下加粗的行编辑 `for-statement.js` 文档，然后保存它：
- en: '[PRE142]'
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: This example features the addition assignment operator is used to create a counter
    loop that increments by `2`, starting with `2` and ending with `10`.
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个示例展示了使用加法赋值运算符创建一个递增计数器循环，每次增加 `2`，从 `2` 开始，到 `10` 结束。
- en: 'Reload the `for-statement.html` web page in your web browser with the console
    window open. The following are the results:'
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开 `for-statement.html` 网页，并确保控制台窗口是开启的。以下是一些结果：
- en: '[PRE143]'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: The `for` loop is the workhorse for repeating code for a counted number of iterations.
    You will find greater use for it by iterating through arrays.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环是用于重复执行代码的计数迭代的工作马。通过遍历数组，你会发现它的用途更加广泛。'
- en: do...while Statement
  id: totrans-570
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: do...while 语句
- en: 'The `do...while` statement is a loop that executes code until the repeat expression
    value becomes false. The repeat expression is evaluated after all the statements
    have been processed, resulting in the guarantee that they are processed once.
    The syntax is as follows:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '`do...while`语句是一个循环，它会执行代码直到重复表达式的值变为假。重复表达式在所有语句处理完毕后评估，从而确保它们至少被处理一次。语法如下：'
- en: '[PRE144]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: A semicolon needs to be at the end of the `while` line if you are using it elsewhere.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在其他地方使用分号（;），则需要在`while`行的末尾放置一个分号。
- en: 'Here is the flowchart for the `do…while` statement:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`do…while`语句的流程图：
- en: '![Figure 3.11: do...while statement flowchart'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.11：do...while语句流程图'
- en: '](img/C14377_03_11.jpg)'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_03_11.jpg)'
- en: 'Figure 3.11: do...while statement flowchart'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11：do...while语句流程图
- en: 'Exercise 3.10: Writing a do...while Loop and Testing It'
  id: totrans-578
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.10：编写do...while循环并测试它
- en: 'In this exercise, you will use the `do…while` loop to simulate iterating the
    roll of two dice until they have the same value. Let''s get started:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将使用`do…while`循环来模拟两个骰子直到它们具有相同值时的迭代。让我们开始吧：
- en: Open the `do-while-statements.html` document in your web browser.
  id: totrans-580
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开`do-while-statements.html`文档。
- en: Open the web developer console window using your web browser.
  id: totrans-581
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的网络浏览器打开开发者控制台窗口。
- en: 'Open the `do-while-statements.js` document in your code editor, replace all
    of its content with the following code, and then save it:'
  id: totrans-582
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开`do-while-statements.js`文档，将其所有内容替换为以下代码，然后保存：
- en: '[PRE145]'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: The second and third lines each compute a random number from `1` to `6` and
    store it in a variable. Those variables are displayed on the third line. These
    lines are always executed once. The `while` condition is true if the values of
    the `die1` and `die2` variables are not equal. If the values are equal, the expression
    is false and the loop repeats. If the values are not equal, any statements that
    follow the `do…while` loop are processed.
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二行和第三行各自计算一个`1`到`6`之间的随机数并将其存储在一个变量中。这些变量显示在第三行。这些行总是执行一次。如果`die1`和`die2`变量的值不相等，则`while`条件为真。如果值相等，表达式为假，循环重复。如果不相等，则处理`do…while`循环之后的任何语句。
- en: Run a few tests by reloading the `do-while-statements.html` web page in your
    web browser with the `console window` open. Your results will differ due to the
    random values.
  id: totrans-585
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开`do-while-statements.html`网页，并打开控制台窗口进行几次测试。由于随机值的不同，你的结果可能会有所不同。
- en: 'The following is an example result of more than one iteration:'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一个多次迭代的示例结果：
- en: '[PRE146]'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'The following example shows the results of a single iteration. `do…while` loop
    statements are always processed one at a time:'
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下示例显示了单次迭代的输出。`do…while`循环语句总是逐个处理：
- en: '[PRE147]'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'Edit the `do-while-statements.js` document so that it includes the following
    bolded lines and then save it:'
  id: totrans-590
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`do-while-statements.js`文档，使其包含以下加粗的行，然后保存：
- en: '[PRE148]'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: The first line, `let iterations`, is declaring a variable named iterations and
    assigning it to `0`. Then, in the `do…while` loop, the iterations variable, `iterations++`,
    is incremented by `1`. After the loop, the matched value and the iterations are
    displayed.
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一行`let iterations`声明了一个名为iterations的变量并将其赋值为`0`。然后，在`do…while`循环中，iterations变量`iterations++`增加`1`。循环结束后，匹配的值和iterations将被显示。
- en: Run a few tests by reloading the `do-while-statements.html` web page in your
    web browser with the console window open. Your results will differ due to the
    random values.
  id: totrans-593
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台窗口打开的情况下，通过重新加载`do-while-statements.html`网页进行几次测试。由于随机值的不同，你的结果可能会有所不同。
- en: 'The following example is the result of more than one iteration:'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一个多次迭代的示例结果：
- en: '[PRE149]'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'The following example is the result of a single iteration:'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一个单次迭代的示例结果：
- en: '[PRE150]'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: while Statement
  id: totrans-598
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: while语句
- en: 'The `while` statement is a loop that executes code if the repeat expression
    is `true/false`. The repeat expression is evaluated before any code is executed,
    so there is the possibility that no code is processed if it is `false` the first
    time round. The syntax is as follows:'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`语句是一个循环，如果重复表达式是`true/false`，则会执行代码。重复表达式在执行任何代码之前评估，因此如果第一次评估为`false`，则可能不会处理任何代码。语法如下：'
- en: '[PRE151]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'The `while` statement flow is illustrated as follows:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`语句的流程如下所示：'
- en: '![Figure 3.12: Code statements in the while block'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.12：while块中的代码语句'
- en: '](img/C14377_03_12.jpg)'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_03_12.jpg)'
- en: 'Figure 3.12: Code statements in the while block'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.12：while块中的代码语句
- en: 'Exercise 3.11: Writing a while Loop and Testing It'
  id: totrans-605
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.11：编写while循环并测试它
- en: 'In this exercise, we will use the `while` loop to simulate how many dice rolls
    it takes to roll an even number. Let''s get started:'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用 `while` 循环来模拟需要掷出偶数所需的骰子滚动次数。让我们开始吧：
- en: Open the `while-statement.html` document in your web browser.
  id: totrans-607
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开 `while-statement.html` 文档。
- en: Open the web developer console window using your web browser.
  id: totrans-608
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的网络浏览器打开开发者控制台窗口。
- en: 'Open the `while-statement.js` document in your code editor, replace all of
    its content with the following code, and then save it:'
  id: totrans-609
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开 `while-statement.js` 文档，将其全部内容替换为以下代码，然后保存：
- en: '[PRE152]'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: This is just the initial shell for a `while` loop that repeats 10 times. The
    `while` loop's repeat expression is true if the `iterations` variable is below
    the value of `10`. The first time the expression is evaluated, the `iterations`
    variable is `0`. Inside the `while` loop, the `iterations` variable is incremented
    by `1` on the first line and will increase from `0` to `9` on each iteration of
    the loop.
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这只是一个重复 10 次的 `while` 循环的初始外壳。`while` 循环的重复表达式在 `iterations` 变量低于 `10` 的值时为真。第一次评估表达式时，`iterations`
    变量为 `0`。在 `while` 循环内部，`iterations` 变量在第一行增加 `1`，并在每次循环迭代中从 `0` 增加到 `9`。
- en: Reload the `while-statement.html` web page in your web browser with the `console
    window` open.
  id: totrans-612
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开 `while-statement.html` 网页，并打开控制台窗口。
- en: 'The results show the `iterations` variable increasing from `0` to `9` for `10`
    iterations:'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果显示 `iterations` 变量从 `0` 增加到 `9`，共进行了 `10` 次迭代：
- en: '[PRE153]'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'Edit the `while-statement.js` document using the following bolded lines and
    then save it. This adds the line to show a dice roll for each iteration:'
  id: totrans-615
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下加粗的行编辑 `while-statement.js` 文档，然后保存。这将添加一行以显示每次迭代的骰子滚动：
- en: '[PRE154]'
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: Reload the `while-statement.html` web page in your web browser with the console
    window open.
  id: totrans-617
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开控制台窗口，并重新加载 `while-statement.html` 网页。
- en: 'You will see a list of 10 dice values. Your values will differ:'
  id: totrans-618
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一个包含 10 个骰子值的列表。您的值可能会有所不同：
- en: '[PRE155]'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: Edit the `while-statement.js` document using the following bolded lines and
    then save it.
  id: totrans-620
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下加粗的行编辑 `while-statement.js` 文档，然后保存。
- en: 'This adds an `if` block to test for an even number of the dice roll. If `true`,
    the `break` statement terminates the `while` loop and the line following it is
    processed. The two lines following the `while` loop display how many iterations
    occurred and the value of the dice roll for that iteration:'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将添加一个 `if` 块来测试骰子滚动的偶数。如果为 `true`，则 `break` 语句终止 `while` 循环，并处理其后的行。`while`
    循环之后的两个行显示发生了多少次迭代以及那次迭代的骰子滚动值：
- en: '[PRE156]'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'Run a few tests by reloading the `while-statement.html` web page in your web
    browser with the console window open:'
  id: totrans-623
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在网络浏览器中打开控制台窗口并重新加载 `while-statement.html` 网页进行几次测试：
- en: '[PRE157]'
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: The `while-loop` use a Boolean expression to determine whether any iterations
    of the code it contains occurred. In this case, if the iterations variable was
    greater than 10, no iterations would have occurred.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: '`while-loop` 使用布尔表达式来确定它包含的代码是否发生了任何迭代。在这种情况下，如果迭代变量大于 `10`，则不会发生任何迭代。'
- en: for...in Statement
  id: totrans-626
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: for...in 语句
- en: 'The `for...in` statement allows us to iterate over an object data type. The
    variable in the `for` expression holds one of the names of the name-value pairs
    of the object, which are the names of the properties and methods of the object.
    The syntax is as follows:'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '`for...in` 语句允许我们遍历对象数据类型。`for` 表达式中的变量持有对象名称值对中的一个名称，即对象的属性和方法名称。其语法如下：'
- en: '[PRE158]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: You can declare the variable with `const`, `var`, or `let`.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `const`、`var` 或 `let` 声明变量。
- en: 'Exercise 3.12: Writing a for...in Loop and Testing It'
  id: totrans-630
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.12：编写并测试 for...in 循环
- en: 'This exercise applies the for...in loop to the ready-made location object and
    to a programmer-created object. You can access object names and values by using
    them. Let''s get started:'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习将 for...in 循环应用于现成的 `location` 对象和程序员创建的对象。您可以通过使用它们来访问对象名称和值。让我们开始吧：
- en: Open the `for-in-statement.html` document in your web browser.
  id: totrans-632
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开 `for-in-statement.html` 文档。
- en: Open the web developer console window using your web browser.
  id: totrans-633
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的网络浏览器打开开发者控制台窗口。
- en: 'Open the `for-in-statement.js` document in your code editor, replace all of
    its content with the following code, and then save it:'
  id: totrans-634
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开 `for-in-statement.js` 文档，将其全部内容替换为以下代码，然后保存：
- en: '[PRE159]'
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: This iterates the web browser-created `location` object.
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这会迭代网络浏览器创建的 `location` 对象。
- en: Reload the `for-in-statement.html` web page in your web browser with the console
    window open.
  id: totrans-637
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开控制台窗口，并重新加载 `for-in-statement.html` 网页。
- en: 'The following output shows the names of all the `location` object''s properties
    and methods:'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下输出显示了 `location` 对象的所有属性和方法名称：
- en: '[PRE160]'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'Edit the `for-in-statement.js` document, add the following bolded text, and
    then save it:'
  id: totrans-640
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `for-in-statement.js` 文档，添加以下加粗文本，然后保存：
- en: '[PRE161]'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: This will add the value of the property or method.
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将添加属性或方法的值。
- en: 'Reload the `for-in-statement.html` web page in your web browser with the console
    window open. The values may differ, assuming the web page was opened from a local
    file folder and not using http or https:'
  id: totrans-643
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开控制台窗口，重新加载 `for-in-statement.html` 网页。假设网页是从本地文件文件夹打开的，而不是使用 http
    或 https，则值可能会有所不同：
- en: '[PRE162]'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'pathname : /PATH_TO/for-in-statement.html'
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'pathname : /PATH_TO/for-in-statement.html'
- en: '[PRE163]'
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'Edit the `for-in-statement.js` document, replace it with the following code,
    and then save it:'
  id: totrans-647
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `for-in-statement.js` 文档，将其替换为以下代码，然后保存：
- en: '[PRE164]'
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'Below that, add the following code so that we can iterate through the object:'
  id: totrans-649
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面添加以下代码，以便我们可以遍历对象：
- en: '[PRE165]'
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Reload the `for-in-statement.html` web page in your web browser with the console
    window open.
  id: totrans-651
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开控制台窗口，重新加载 `for-in-statement.html` 网页。
- en: 'The following is an example of the output in the console window:'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是在控制台窗口中的输出示例：
- en: '[PRE166]'
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Looping through the methods and properties of objects can be helpful when the
    code depends on a specific property or name that needs to be present for it to
    work.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码依赖于需要存在的特定属性或名称时，遍历对象的方法和属性可能会有所帮助。
- en: for...of Statement
  id: totrans-655
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: for...of 语句
- en: 'The `for...of` statement focuses on iterable objects. Not all objects are iterable.
    Although we will not cover how to create our own iterable objects, there are some
    ready-made iterable objects that you may find the `for∙∙∙of` block useful for.
    The syntax is as follows:'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: '`for...of` 语句关注可迭代的对象。并非所有对象都是可迭代的。虽然我们不会介绍如何创建自己的可迭代对象，但有一些现成的可迭代对象，你可能发现
    `for∙∙∙of` 块很有用。其语法如下：'
- en: '[PRE167]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: You can declare the variable with `const`, `var`, or `let`.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `const`、`var` 或 `let` 声明变量。
- en: 'Exercise 3.13: Writing a for...of Loop and Testing It'
  id: totrans-659
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 3.13：编写一个 for...of 循环并测试它
- en: 'This exercise uses the `for...of` statement, which is designed for iterable
    objects. You will learn how some objects may not be iterable objects and generate
    errors. For iterable objects, arrays and strings are used. Let''s get started:'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习使用 `for...of` 语句，该语句是为可迭代对象设计的。你将学习一些对象可能不是可迭代对象，并生成错误。对于可迭代对象，我们使用数组和字符串。让我们开始吧：
- en: Open the `for-of-statement.html` document in your web browser.
  id: totrans-661
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开 `for-of-statement.html` 文档。
- en: Open the web developer console window using your web browser.
  id: totrans-662
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的网页浏览器打开开发者控制台窗口。
- en: 'Open the `for-of-statement.js` document in your code editor, replace all of
    its content with the following code, and then save it:'
  id: totrans-663
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开 `for-of-statement.js` 文档，将其全部内容替换为以下代码，然后保存：
- en: '[PRE168]'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'Below that, add the following code so that we can iterate through the object:'
  id: totrans-665
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面添加以下代码，以便我们可以遍历对象：
- en: '[PRE169]'
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: Reload the `for-of-statement.html` web page in your web browser with the console
    window open.
  id: totrans-667
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开控制台窗口，重新加载 `for-of-statement.html` 网页。
- en: 'An error will occur. We need to code the object so that it''s iterable for
    it to work; however, we are not learning how to do that at this point:'
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将会发生错误。我们需要对对象进行编码，使其可迭代才能使其工作；然而，我们目前并没有学习如何做到这一点：
- en: '[PRE170]'
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: Edit the `for-of-statement.js` document in your code editor, replace all of
    its content with the following code, and then save it.
  id: totrans-670
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中编辑 `for-of-statement.js` 文档，将其全部内容替换为以下代码，然后保存。
- en: 'A string turns out to be iterable:'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串最终被证明是可迭代的：
- en: '[PRE171]'
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'Reload the `for-of-statement.html` web page in your web browser with the console
    window open:'
  id: totrans-673
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开控制台窗口，重新加载 `for-of-statement.html` 网页：
- en: '[PRE172]'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Edit the `for-of-statement.js` document in your code editor, make the changes
    shown in bold in the following code, and then save it.
  id: totrans-675
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中编辑 `for-of-statement.js` 文档，按照以下代码中的加粗部分进行更改，然后保存。
- en: 'A string turns out to be iterable:'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串最终被证明是可迭代的：
- en: '[PRE173]'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'Reload the `for-of-statement.html` web page in your web browser with the console
    window open. You will get the same results. The advantage of the `for of` loop
    is that it is more streamlined:'
  id: totrans-678
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开控制台窗口，重新加载 `for-of-statement.html` 网页。你将得到相同的结果。`for of` 循环的优势在于它更加简洁：
- en: '[PRE174]'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: Edit the `for-of-statement.js` document in your code editor, replace all of
    its content with the following code, and then save it.
  id: totrans-680
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中编辑 `for-of-statement.js` 文档，将其全部内容替换为以下代码，然后保存。
- en: 'An array is iterable:'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数组是可迭代的：
- en: '[PRE175]'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'Reload the `for-of-statement.html` web page in your web browser with the `console`
    window open:'
  id: totrans-683
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中重新加载`for-of-statement.html`网页，同时打开`console`窗口：
- en: '[PRE176]'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Edit the `for-of-statement.js` document in your code editor, make the changes
    shown in bold in the following code, and then save it.
  id: totrans-685
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中编辑`for-of-statement.js`文档，按照以下代码中加粗的部分进行更改，然后保存它。
- en: 'An array is iterable:'
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个数组是可迭代的：
- en: '[PRE177]'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'Reload the `for-of-statement.html` web page in your web browser with the console
    window open. You will get the same results:'
  id: totrans-688
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中重新加载`for-of-statement.html`网页，同时打开控制台窗口。你将得到相同的结果：
- en: '[PRE178]'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Looping through the methods and properties of objects can be helpful when the
    code depends on a specific property or name that needs to be present for it to
    work.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码依赖于需要存在的特定属性或名称以使其工作的时候，遍历对象的方法和属性可能会有所帮助。
- en: continue Statement
  id: totrans-691
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`continue`语句'
- en: 'The `continue` statement stops execution inside a loop or a labeled loop for
    the current iteration and starts the execution of the next loop iteration. The
    `loop` statements then determine whether another iteration should occur. The syntax
    is as follows:'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '`continue`语句用于在循环或标记循环的当前迭代中停止执行，并开始执行下一个循环迭代。然后`loop`语句确定是否应该发生另一个迭代。语法如下：'
- en: '[PRE179]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: The second syntax is for use within a labeled statement block. We will learn
    more about labeled statements later in this chapter.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种语法用于在标记语句块内使用。我们将在本章后面了解更多关于标记语句的内容。
- en: Labeled Statement
  id: totrans-695
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标记语句
- en: 'The `Labeled` statement is used to create loop flows and conditional flows.
    It names either `block` statements or `loop` statements. The syntax is as follows:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: '`Labeled`语句用于创建循环流程和条件流程。它命名`block`语句或`loop`语句。语法如下：'
- en: '[PRE180]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: When a `loop` statement is named, the statements are processed until a `break`
    statement or `continue` statement is encountered inside the block that references
    the label.
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 当`loop`语句被命名时，语句将在引用该标签的块内处理，直到遇到`break`语句或`continue`语句。
- en: When a `break` statement is encountered, the program flow continues on the line
    after the labeled statement block referenced by the `break` statement. If a `continue`
    statement is encountered, the program flow continues on the first line of the
    block referenced by the `continue` statement. A `continue` statement requires
    the labeled statement to be a loop. Both `break` statements and `continue` statements
    must appear within the labeled statement block that they reference. They cannot
    appear outside the labeled statement block that they reference. They can appear
    in nested labeled blocks and reference outer labeled blocks. Labeled statements
    are less commonly used because they are prone to creating confusing or difficult
    to follow program flow.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 当遇到`break`语句时，程序流程将继续在由`break`语句引用的标记语句块之后的行上继续。如果遇到`continue`语句，程序流程将继续在由`continue`语句引用的块的第一行上继续。`continue`语句要求标记语句是一个循环。`break`语句和`continue`语句都必须出现在它们引用的标记语句块内。它们不能出现在它们引用的标记语句块之外。它们可以出现在嵌套的标记块中，并引用外部标记块。标记语句较少使用，因为它们容易造成混乱或难以理解的程序流程。
- en: Note
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is good practice to avoid or find ways to eliminate all labeled statements
    from code. Conditional statements and dividing code into functions or object methods
    are alternatives to labeled statements.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 避免或找到方法从代码中消除所有标记语句是一种良好的实践。条件语句和将代码划分为函数或对象方法是标记语句的替代方案。
- en: 'Let''s have a look at an example of using a labeled loop statement. The loop
    labels the `for` statement, which runs 10 iterations. Each iteration generates
    a random number from `1 to 12`. If the number is even, the `continue` statement
    starts the beginning of the `for` statement:'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看使用标记循环语句的一个示例。循环标记了`for`语句，它运行10次迭代。每次迭代生成一个从`1到12`的随机数。如果数字是偶数，则`continue`语句从`for`语句的开始处开始：
- en: '[PRE181]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'The output of the preceding code snippet is as follows:'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段的输出如下：
- en: '[PRE182]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: 'The label can be eliminated with a better use of the `if` statement to achieve
    the same result:'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过更好地使用`if`语句来消除标签，以实现相同的结果：
- en: '[PRE183]'
  id: totrans-707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'The output is the same, but with different values:'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 输出相同，但值不同：
- en: '[PRE184]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Writing and Invoking Functions
  id: totrans-710
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写和调用函数
- en: Functions are the basic building blocks when it comes to writing JavaScript
    programs. A function is one or more statements that can optionally receive data
    input and provide data output. The statements in a function are not used until
    the function is invoked. Invoking a function is also known as calling the function.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是编写 JavaScript 程序的基本构建块。函数是一组可以可选接收数据输入并提供数据输出的语句。函数中的语句在函数被调用之前不会使用。调用函数也称为调用函数。
- en: Defining Functions
  id: totrans-712
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义函数
- en: JavaScript offers a few ways to define a function. We are going to look at function
    declarations, function expressions, and arrow function expressions as ways to
    define a function.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 提供了几种定义函数的方法。我们将探讨函数声明、函数表达式和箭头函数表达式作为定义函数的方式。
- en: Function Declaration
  id: totrans-714
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数声明
- en: 'You can define a function as a statement. This is called a function definition
    or declaration. The syntax is as follows:'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将函数定义为语句。这被称为函数定义或声明。其语法如下：
- en: '[PRE185]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: It starts a line of code with the function keyword. It is followed by a name.
    The name is how the function will appear in other code. The list of comma-separated
    parameters are names for the input values to a function. Parameters are essentially
    variables within the function. They are enclosed in parentheses. The block statement
    then contains the code. Once a function is declared, it can be invoked either
    on a line of code by itself or within an expression. In the case of its use in
    an expression, the function typically returns data.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 它以函数关键字开始一行代码。它后面跟着一个名称。名称是函数在其他代码中如何出现的方式。逗号分隔的参数列表是函数输入值的名称。参数是函数内部的变量。它们被括号包围。然后是包含代码的代码块。一旦声明了函数，它就可以通过单独的一行代码或表达式来调用。在其用作表达式的场合，函数通常返回数据。
- en: When a JavaScript function is declared as a statement, it can be invoked by
    statements that appear before it. This is called hoisting.
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个 JavaScript 函数被声明为一个语句时，它可以通过出现在它之前的语句来调用。这被称为提升。
- en: 'Let''s have a look at an example of defining and invoking a function declaration.
    This example has no parameters and returns the value of a single dice roll:'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看定义和调用函数声明的例子。这个例子没有参数，返回单次掷骰子的值：
- en: '[PRE186]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'Since it returns a value, we can use it as an expression. Here is an example
    where it is used in an addition expression to get the roll value of two dice:'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它返回一个值，我们可以将其用作表达式。以下是一个例子，其中它在加法表达式中使用，以获取两个骰子的滚动值：
- en: '[PRE187]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'We could improve the function so that it returns the value of a set number
    of dice by creating a parameter. Here, the parameter is the number of dice being
    rolled:'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过创建一个参数来改进函数，使其返回一组指定数量的骰子的值。在这里，参数是掷骰子的数量：
- en: '[PRE188]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'The revised expression to invoke for simulating a two-dice roll just requires
    us to pass the parameter values. In this example, the parameter is expressed as
    a number literal:'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 调用模拟两次掷骰子的改进表达式只需要我们传递参数值。在这个例子中，参数被表示为一个数字字面量：
- en: '[PRE189]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: 'In this example, the parameter is expressed as a variable:'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，参数被表示为一个变量：
- en: '[PRE190]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: 'Parameters can be optional, otherwise the wrong data can be passed. So, functions
    often have code that validates the parameter or provides a default value. In this
    example, the argument of the JavaScript built-in function known as `parseInt`
    is used to convert the argument into an integer. Its results are tested using
    the `isNaN` built-in function, which returns `true` or `false` if the number is
    not a number or the number is less than `1`. If any of that is true, the argument
    value is set to `1`. If not, the supplied number is passed through:'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 参数可以是可选的，否则可能会传递错误的数据。因此，函数通常有代码来验证参数或提供默认值。在这个例子中，JavaScript 内置函数 `parseInt`
    的参数被用来将参数转换为整数。其结果使用内置函数 `isNaN` 进行测试，该函数在数字不是数字或数字小于 `1` 时返回 `true` 或 `false`。如果这些中的任何一个是真的，则参数值被设置为
    `1`。如果不是，则提供的数字被传递：
- en: '[PRE191]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: 'Now, the function always returns a roll of one dice, regardless of an incorrect
    parameter or no parameter. In both of these examples, the value of the roll of
    one dice is returned:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，函数总是返回一个骰子的滚动值，无论参数是否错误或没有参数。在这两个例子中，都返回了一个骰子的滚动值：
- en: '[PRE192]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: 'Exercise 3.14: Writing a Function as a Statement and Invoking It'
  id: totrans-733
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.14：将函数作为语句编写并调用它
- en: This exercise will define a function as a statement and then use it. The function
    we will create will accept one parameter and return an array. If the parameter
    can be validated as a number, then each item in the array has one digit from the
    number starting with the `0` index item holding the digit for the ones place value,
    the 1 index item holding the digit for the `tens` place value, and so on.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习将定义一个函数作为语句，然后使用它。我们将创建的函数将接受一个参数并返回一个数组。如果参数可以验证为数字，则数组中的每个项目都有一个从 `0` 索引项开始的数字，该数字代表个位值，1索引项代表十位值，依此类推。
- en: 'We will use the `log` method of the `console` object in this exercise. Remember
    that a method is a function that belongs to an object, so it can have parameters.
    The `log` method takes an unlimited number of parameters. Let''s get started:'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本练习中使用 `console` 对象的 `log` 方法。记住，方法是一个属于对象的函数，因此它可以有参数。`log` 方法可以接受无限数量的参数。让我们开始吧：
- en: Open the `function-declare.html` document in your web browser.
  id: totrans-736
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开 `function-declare.html` 文档。
- en: Open the web developer console window using your web browser.
  id: totrans-737
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的网页浏览器打开网页开发者控制台窗口。
- en: Open the `function-declare.js` document in your code editor, replace all of
    its content with the following code, and then save it.
  id: totrans-738
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开 `function-declare.js` 文档，将其全部内容替换为以下代码，然后保存。
- en: 'This declares the function. Its name is `getDigitsOfNumber`. It has one parameter
    named `num`. It returns the `digits` array:'
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这声明了函数。它的名字是 `getDigitsOfNumber`。它有一个名为 `num` 的参数。它返回 `digits` 数组：
- en: '[PRE193]'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: Reload the `function-declare.html` web page in your web browser with the console
    window open.
  id: totrans-741
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开 `function-declare.html` 网页，并确保控制台窗口已打开。
- en: There is no output because the function was not invoked.
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有输出，因为函数没有被调用。
- en: Edit the `function-declare.js` document, add the following bolded text to the
    end of the file, and then save it.
  id: totrans-743
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `function-declare.js` 文档，将以下加粗文本添加到文件末尾，然后保存。
- en: 'In this example, the function is being expressed and is not being invoked.
    Invoking a function requires to append parentheses around the function''s name:'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，函数被表达出来而没有被调用。调用一个函数需要在函数名周围添加括号：
- en: '[PRE194]'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: Reload the `function-declare.html` web page in your web browser with the console
    window open.
  id: totrans-746
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开 `function-declare.html` 网页，并确保控制台窗口已打开。
- en: 'The function is treated as data and is displayed:'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数被当作数据来处理并显示：
- en: '[PRE195]'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: Edit the `function-declare.js` document, update it using the following bolded
    text at the end of the file, and then save it.
  id: totrans-749
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `function-declare.js` 文档，使用以下加粗文本更新文件末尾，然后保存。
- en: 'This invokes the function in an assignment statement to create the `test456`
    variable:'
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这在赋值语句中调用函数以创建 `test456` 变量：
- en: '[PRE196]'
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: This will add the value of the property or method.
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将添加属性或方法的值。
- en: 'Reload the `function-declare.html` web page in your web browser with the console
    window open. The first line of output shows the `num` parameter being displayed
    when the function was invoked. The second output line is the `test456` variable
    being set to the empty array that was returned by the function:'
  id: totrans-753
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开 `function-declare.html` 网页，并确保控制台窗口已打开。输出第一行显示了函数被调用时显示的 `num` 参数。第二行输出是
    `test456` 变量被设置为函数返回的空数组：
- en: '[PRE197]'
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: 'Edit the `function-declare.js` document, add the following bolded text to the
    beginning of the file, and then save it. This shows invoking the function before
    it is declared. This demonstrates hoisting:'
  id: totrans-755
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `function-declare.js` 文档，在文件开头添加以下加粗文本，然后保存。这显示了在声明之前调用函数。这演示了提升（hoisting）。
- en: '[PRE198]'
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'Reload the `function-declare.html` web page in your web browser with the console
    window open. These are the results for the invocations of the function before
    and after it was declared:'
  id: totrans-757
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开 `function-declare.html` 网页，并确保控制台窗口已打开。这些是在函数声明前后调用的结果：
- en: '[PRE199]'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: Edit the `function-declare.js` document, update it using the following bolded
    text, and then save it.
  id: totrans-759
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `function-declare.js` 文档，使用以下加粗文本更新它，然后保存。
- en: 'The second line in the function converts any negative numbers into positive
    numbers and truncates any decimals. The `if` statement tests to assure that the
    `num` parameter contains a number. The `while` loop repeats until the `num` parameter
    becomes zero. Inside the loop, the ones place value is added to the `digits` array
    by dividing by 10 and using the remainder. Then, the ones place value is stripped
    from the `num` parameter:'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数的第二行将任何负数转换为正数，并截断任何小数。`if`语句检查以确保`num`参数包含一个数字。`while`循环会一直重复，直到`num`参数变为零。在循环内部，通过除以10并使用余数将个位值添加到`digits`数组中。然后，从`num`参数中移除个位值：
- en: '[PRE200]'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: Reload the `function-declare.html` web page in your web browser with the console
    window open.
  id: totrans-762
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台窗口打开的情况下，使用你的网络浏览器重新加载`function-declare.html`网页。
- en: 'Each array shows the test value digits split into arrays. The zero-array index
    has the ones place value, the one array index has the tens place value, and the
    two-index position has the hundreds place value:'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个数组显示了测试值数字拆分为数组。零数组索引有个位值，一数组索引有十位值，二索引位置有百位值：
- en: '[PRE201]'
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: Edit the `function-declare.js` document, add the following bolded text to the
    end of the file, and then save it. You can run various tests on your functions
    based on the possible inputs and expected outputs. These are a few for you to
    try.
  id: totrans-765
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`function-declare.js`文档，将以下加粗文本添加到文件末尾，然后保存。你可以根据可能的输入和预期输出对函数进行各种测试。这里有一些供你尝试。
- en: 'An intermediate variable is not used for these new lines. A function can be
    used wherever an expression can be used. In these additions, it is used as an
    expression for a `log` method parameter:'
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有使用中间变量来处理这些新行。函数可以在可以使用表达式的任何地方使用。在这些添加中，它被用作`log`方法参数的表达式：
- en: '[PRE202]'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: Reload the `function-declare.html` web page in your web browser with the console
    window open.
  id: totrans-768
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台窗口打开的情况下，使用你的网络浏览器重新加载`function-declare.html`网页。
- en: 'Here are the outputs. The expected results should be an array with all the
    digits or an empty array. Evaluate each output and verify that this was the result.
    If the output was an empty array, determine why:'
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是输出结果。预期结果应该是一个包含所有数字或空数组的数组。评估每个输出并验证这是否是结果。如果输出是空数组，确定原因：
- en: '[PRE203]'
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: In this exercise, we defined a function as a statement that accepts one parameter
    and return an array. We used the `log` method of the `console` object in this
    exercise.
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们定义了一个接受一个参数并返回数组的函数。在这个练习中，我们使用了`console`对象的`log`方法。
- en: Function Expression
  id: totrans-772
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数表达式
- en: 'In this variation, you can define a function as part of an expression. There
    is no name for the function. However, because a function is a data type, it can
    be assigned to a variable. The variable can then be used to invoke the function.
    The syntax is as follows:'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个变体中，你可以将函数作为表达式的一部分来定义。函数没有名称。然而，由于函数是一种数据类型，它可以被分配给变量。然后，可以使用变量来调用函数。语法如下：
- en: '[PRE204]'
  id: totrans-774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: The syntax is the same, except no function name is needed. A JavaScript function
    declared as an expression cannot be invoked by statements that appear before it.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 语法相同，只是不需要函数名称。作为表达式的JavaScript函数不能通过出现在它之前的语句来调用。
- en: Here is an example of defining and invoking a function expression.
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个定义和调用函数表达式的例子。
- en: 'This example shows the function as part of an assignment expression. The right-hand
    side of the assignment is the function without a name. The left-hand side is the
    variable:'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子显示了函数作为赋值表达式的一部分。赋值表达式的右侧是没有名称的函数。左侧是变量：
- en: '[PRE205]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: 'In this case, the variable can be used to invoke the function:'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，变量可以用来调用函数：
- en: '[PRE206]'
  id: totrans-780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: 'Exercise 3.15: Writing a Function as an Expression and Invoking It'
  id: totrans-781
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.15：将函数作为表达式编写并调用它
- en: This exercise defines a function as an expression and then uses it.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习定义了一个作为表达式的函数，然后使用它。
- en: 'The function returns a single random character from a string. The string is
    the function''s only parameter. If the parameter is not a string or is an empty
    string, then an empty string is returned. Let''s get started:'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 函数从字符串中返回一个随机字符。字符串是函数的唯一参数。如果参数不是字符串或为空字符串，则返回空字符串。让我们开始吧：
- en: Open the `function-expression.html` document in your web browser.
  id: totrans-784
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开`function-expression.html`文档。
- en: Open the web developer console window using your web browser.
  id: totrans-785
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的网络浏览器打开开发者控制台窗口。
- en: Open the `function-expression.js` document in your code editor, replace all
    of its contents with the following code, and then save it.
  id: totrans-786
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开`function-expression.js`文档，将其全部内容替换为以下代码，然后保存。
- en: The function, as a literal value, is assigned to the `getRandomStringCharacter`
    variable.
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数作为一个字面量值，被分配给`getRandomStringCharacter`变量。
- en: 'Then, the variable is displayed in the console. Remember, a function is not
    invoked unless you include parentheses:'
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，变量将在控制台中显示。记住，除非你包含括号，否则函数不会被调用：
- en: '[PRE207]'
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: 'Reload the `function-expression.html` web page in your web browser with the
    console window open. The actual function is displayed but not invoked, as expected:'
  id: totrans-790
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开控制台窗口后，重新加载`function-expression.html`网页。实际函数显示出来了，但并没有按照预期调用：
- en: '[PRE208]'
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: Edit the `function-expression.js` document, update the lines with the following
    bolded text, and then save it.
  id: totrans-792
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`function-expression.js`文档，更新以下加粗文本的行，然后保存。
- en: 'Now, we will invoke the function:'
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们将调用该函数：
- en: '[PRE209]'
  id: totrans-794
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: Reload the `function-expression.html` web page in your web browser with the
    console window open.
  id: totrans-795
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开控制台窗口后，重新加载`function-expression.html`网页。
- en: 'The `console.log` statement in the function displays the `source` parameter
    value for each invocation. No parameter was passed in the first invocation. The
    `source` parameter data type is undefined:'
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数中的`console.log`语句显示每次调用时的`source`参数值。第一次调用没有传递任何参数。`source`参数的数据类型是未定义的：
- en: '[PRE210]'
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: Edit the `function-expression.js` document, add the following bolded text above
    the function, and then save it.
  id: totrans-798
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`function-expression.js`文档，在函数上方添加以下加粗文本，然后保存。
- en: 'Now, we will invoke the function before it is defined:'
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们将在函数定义之前调用该函数：
- en: '[PRE211]'
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: Reload the `function-expression.html` web page in your web browser with the
    console window open.
  id: totrans-801
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开控制台窗口后，重新加载`function-expression.html`网页。
- en: 'You should see an error in the console. Functions that are defined as expressions
    cannot be invoked before they are defined:'
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该在控制台中看到一个错误。定义为表达式的函数不能在定义之前调用：
- en: '[PRE212]'
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: Edit the `function-expression.js` document, update the bolded text, and then
    save it.
  id: totrans-804
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`function-expression.js`文档，更新以下加粗文本，然后保存。
- en: 'We can remove the line that invokes the function before it is defined and finish
    coding the function. The `if` block tests whether the source parameter is not
    undefined and contains characters. In the `if` block, the `Math.floor(Math.random()
    * source.length` expression finds a random character position as a value from
    0 to the length of the `source` parameter minus 1\. The `charAt` string method
    extracts the character at that position it will be returned at:'
  id: totrans-805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以移除在定义之前调用函数的行，完成函数的编码。`if`块测试源参数是否未定义且包含字符。在`if`块中，`Math.floor(Math.random()
    * source.length)`表达式找到一个随机字符位置，其值从0到`source`参数的长度减1。`charAt`字符串方法提取该位置的字符，它将被返回：
- en: '[PRE213]'
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: 'These lines are a set of tests of various source values. The first passes no
    parameter. The second, third, and fourth pass a string. The fifth is passing a
    number and the last is passing a Boolean:'
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些行是一组对各种源值的测试。第一个没有传递参数。第二个、第三个和第四个传递了一个字符串。第五个传递了一个数字，最后一个传递了一个布尔值：
- en: '[PRE214]'
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: Reload the `function-expression.html` web page in your web browser with the
    `console` window open.
  id: totrans-809
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中打开控制台窗口后，重新加载`function-expression.html`网页。
- en: 'The function''s output expects a random character in the source parameter.
    If it is not empty, it will return a string and will return an empty string for
    all other values. Reload the web page a few times to get different test results:'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数的输出期望在源参数中有一个随机字符。如果它不为空，它将返回一个字符串，对于所有其他值将返回一个空字符串。重新加载网页几次以获取不同的测试结果：
- en: '[PRE215]'
  id: totrans-811
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: Arrow Function Expression
  id: totrans-812
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 箭头函数表达式
- en: 'Arrow functions were introduced in ES6\. They are defined similarly in an expression,
    such as when defining function expressions. They offer syntactically compact alternatives
    over defining a function expression. There is nothing different in how they are
    invoked. The `=>` symbol is the telltale sign of an arrow function being defined.
    Also, the `function` keyword is not used. The concise variation, without a function
    body, can return an expression with or without a `return` statement. This differs
    from a function expression, which requires the `return` statement to return a
    value. The syntax is as follows:'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头函数是在 ES6 中引入的。它们在表达式中定义的方式类似，例如在定义函数表达式时。它们提供了比定义函数表达式更简洁的语法选择。它们的调用方式没有区别。`=>`
    符号是定义箭头函数的明显标志。此外，不使用 `function` 关键字。简洁的变体，没有函数体，可以返回带有或不带有 `return` 语句的表达式。这与函数表达式不同，函数表达式需要
    `return` 语句来返回值。语法如下：
- en: '[PRE216]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: 'Parameter parentheses are optional when a single parameter is named:'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 当只有一个参数被命名时，参数括号是可选的：
- en: '[PRE217]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: 'Parentheses are required if there is no parameter:'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有参数，则需要括号：
- en: '[PRE218]'
  id: totrans-818
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: JavaScript arrow functions cannot be invoked by statements that appear before
    it.
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 箭头函数不能通过出现在其之前的语句来调用。
- en: Defining and Invoking an Arrow Function Expression
  id: totrans-820
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义和调用箭头函数表达式
- en: 'This example shows a single statement arrow function with no parameters. The
    right-hand side of the assignment is the function without a name. The left-hand
    side is the variable:'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例展示了没有参数的单语句箭头函数。赋值右侧是未命名的函数。左侧是变量：
- en: '[PRE219]'
  id: totrans-822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'In this case, the variable can be used to invoke the function:'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，可以使用变量来调用函数：
- en: '[PRE220]'
  id: totrans-824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'This example shows a multiple statement arrow function with one parameter.
    The right-hand side of the assignment is the function without a name. The left-hand
    side is the variable:'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例展示了具有一个参数的多语句箭头函数。赋值右侧是未命名的函数。左侧是变量：
- en: '[PRE221]'
  id: totrans-826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: 'The following is the output of invoking and passing a parameter:'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对函数进行调用并传递参数的输出：
- en: '[PRE222]'
  id: totrans-828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: 'Exercise 3.16: Writing an Arrow Function and Invoking It'
  id: totrans-829
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.16：编写并调用箭头函数
- en: 'This exercise will show you how to convert a function expression into an arrow
    function. The JavaScript file we''ll be using already contains the function. Let''s
    get started:'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 此练习将向您展示如何将函数表达式转换为箭头函数。我们将使用的 JavaScript 文件已经包含该函数。让我们开始吧：
- en: Open the `function-arrow.html` document in your web browser.
  id: totrans-831
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网页浏览器中打开 `function-arrow.html` 文档。
- en: Open the web developer `console window` using your web browser.
  id: totrans-832
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的网页浏览器打开开发者 `console window`。
- en: Reload the `function-arrow.html` web page in your web browser with the `console
    window` open.
  id: totrans-833
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网页浏览器中打开 `function-arrow.html` 网页，并确保 `console window` 已打开。
- en: 'The first, second from last, and last results are an empty string. The second,
    third, and fourth results show a random character from the string:'
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个、倒数第二个和最后一个结果是空字符串。第二个、第三个和第四个结果显示了字符串中的一个随机字符：
- en: '[PRE223]'
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: 'Open the `function-arrow.js` document in your code editor, make changes to
    the bolded lines, and then save it:'
  id: totrans-836
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开 `function-arrow.js` 文档，对加粗的行进行修改，然后保存：
- en: '[PRE224]'
  id: totrans-837
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: Reload the `function-arrow.html` web page in your web browser with the `console
    window` open.
  id: totrans-838
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网页浏览器中打开 `function-arrow.html` 网页，并确保 `console window` 已打开。
- en: 'The results are the same. The first, second from last, and last results are
    an empty string. The second, third, and fourth results show a random character
    from the string:'
  id: totrans-839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果是相同的。第一个、倒数第二个和最后一个结果是空字符串。第二个、第三个和第四个结果显示了字符串中的一个随机字符：
- en: '[PRE225]'
  id: totrans-840
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: Reacting to User Input Events and Updating the DOM
  id: totrans-841
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应用户输入事件和更新 DOM
- en: JavaScript is used to interact with the DOM. This entails responding to DOM-generated
    events such as a user clicking a button. It also entails updating content and
    HTML elements, such as displaying a notification message.
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 用于与 DOM 交互。这包括响应用户点击按钮等 DOM 生成的事件。它还包括更新内容和 HTML 元素，例如显示通知消息。
- en: Elements in the DOM are objects. The `document` object that's provided by JavaScript
    contains the element objects. It also contains methods for accessing the elements
    and updating them.
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: DOM 中的元素是对象。JavaScript 提供的 `document` 对象包含元素对象。它还包含访问和更新元素的方法。
- en: The DOM HTML Element Object
  id: totrans-844
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DOM HTML 元素对象
- en: 'The HTML elements are represented as objects. Since they are objects, there
    are methods and properties we can use for them. These properties and methods are
    inherited from a hierarchy of DOM objects that are provided by the web browser,
    starting with an object called `Node`. For example, the `ol` element shares methods
    and properties from the following hierarchy of DOM objects:'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: HTML元素表示为对象。由于它们是对象，我们可以使用方法和属性来操作它们。这些属性和方法是从由网络浏览器提供的DOM对象层次结构中继承的，从名为`Node`的对象开始。例如，`ol`元素从以下DOM对象层次结构中共享方法和属性：
- en: '[PRE226]'
  id: totrans-846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: 'It is not necessary to understand all the objects involved, but it is good
    to be aware of them. It''s better to learn about some of the properties and methods
    that are derived from all of those objects. The following are a few of the properties
    and methods that are inherited from a hierarchy of DOM elements above it:'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 不必了解所有涉及的对象，但了解它们是有好处的。最好了解一些从所有这些对象中派生出来的属性和方法。以下是从DOM元素的上层继承的一些属性和方法：
- en: '`innerHTML`: With the source element, this is the HTML and content contained
    in an element.'
  id: totrans-848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`innerHTML`: 使用源元素，这是元素中包含的HTML和内容。'
- en: '`innerText`: With the source HTMLElement, this is the rendered text of an element.'
  id: totrans-849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`innerText`: 使用源`HTMLElement`，这是元素的渲染文本。'
- en: '`addEventListener(`…`)`: With the source element event target, this is used
    to register a function to respond to events such as a user clicking on the element.'
  id: totrans-850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addEventListener(`…`)`: 使用源元素事件目标，这用于注册一个函数以响应事件，例如用户点击元素。'
- en: '`appendChild(`…`)`: With the source node, this adds a node to a parent node;
    for example, to add an `li` element to the end of an `ol` element, or to add a
    `p` element to the end of a `div` element.'
  id: totrans-851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appendChild(`…`)`: 使用源节点，这向父节点添加一个节点；例如，将`li`元素添加到`ol`元素的末尾，或将`p`元素添加到`div`元素的末尾。'
- en: Getting Access to Elements in the DOM
  id: totrans-852
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在DOM中获取元素访问权限
- en: 'The following are `document` objects that contain methods that we can use to
    get one or more `HTMLElemen`t objects from the DOM:'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些`document`对象，它们包含我们可以用来从DOM中获取一个或多个`HTMLElemen`t对象的方法：
- en: '`getElementById(element-id)`: The element ID is the ID attribute of the element.
    Returned as an HTMLElement object.'
  id: totrans-854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getElementById(element-id)`: 元素ID是元素的ID属性。返回一个`HTMLElement`对象。'
- en: '`getElementsByTagName(element-name)`: The element name is the static name of
    HTML elements such as `body, div, p, footer, ol, and ul`. This returns a `NodeList`
    object. A `NodeList` object is similar to an array of objects.'
  id: totrans-855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getElementsByTagName(element-name)`: 元素名称是HTML元素的静态名称，例如`body, div, p, footer,
    ol, 和 ul`。这返回一个`NodeList`对象。`NodeList`对象类似于对象数组。'
- en: '`getElementsByClassName(css-class-name)`: The css class name is the class attribute
    of the elements. This returns a `NodeList` object. A `NodeList` object is similar
    to an array of objects.'
  id: totrans-856
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getElementsByClassName(css-class-name)`: CSS类名称是元素的类属性。这返回一个`NodeList`对象。`NodeList`对象类似于对象数组。'
- en: '`querySelector(selectors)`: The selectors are like the selectors that are used
    in CSS. This returns an HTMLElement object for the first element that''s matched.'
  id: totrans-857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`querySelector(selectors)`: 选择器类似于在CSS中使用的选择器。这返回一个匹配的第一个元素的`HTMLElement`对象。'
- en: '`querySelectorAll(selectors)`: The selectors are like the selectors that are
    used in CSS. This returns a `NodeList` object. A `NodeList` object is similar
    to an array of objects for each element that''s matched.'
  id: totrans-858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`querySelectorAll(selectors)`: 选择器类似于在CSS中使用的选择器。这返回一个`NodeList`对象。`NodeList`对象类似于匹配的每个元素的数组。'
- en: '`createElement(tag name)`: This creates an `HTMLElement` object for the HTML
    tag name that''s supplied.'
  id: totrans-859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createElement(tag name)`: 这为提供的HTML标签名称创建一个`HTMLElement`对象。'
- en: '`createTextNode(data)`: This creates a `Text` object that can be placed inside
    an HTML element, for example, inside an `h1` or a `p` element. The data argument
    is a string.'
  id: totrans-860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createTextNode(data)`: 这创建一个可以放置在HTML元素内部的`Text`对象，例如，在`h1`或`p`元素内部。数据参数是一个字符串。'
- en: 'The following is an example of the `document` object''s `getElementById` method
    being used to access a DOM element. This creates an object from an element DOM
    that has the `id` attribute of `user-id`:'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用`document`对象的`getElementById`方法来访问DOM元素的示例。这从一个具有`id`属性为`user-id`的元素DOM创建了一个对象：
- en: '[PRE227]'
  id: totrans-862
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: 'This is an example of the `document` object''s `getElementByTagName` method
    being used to access DOM elements. This creates a collection of objects representing
    all the `div` elements in the document. Further steps are needed to access each
    element, such as a loop:'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用 `document` 对象的 `getElementByTagName` 方法来访问 DOM 元素的例子。这创建了一个代表文档中所有 `div`
    元素的集合。需要进一步步骤来访问每个元素，例如使用循环：
- en: '[PRE228]'
  id: totrans-864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: 'This creates a collection of objects representing all the elements that use
    the `notice` class in the document. Further steps are needed to access each element,
    such as a loop:'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个代表文档中所有使用 `notice` 类的元素的集合。需要进一步步骤来访问每个元素，例如使用循环：
- en: '[PRE229]'
  id: totrans-866
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: 'This is an example of the `document` object''s `getElementByClassName` method
    being used to access DOM elements. This creates a collection of objects representing
    all the elements that use the `notice` class in the document. Further steps are
    needed to access each element, such as a loop:'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用 `document` 对象的 `getElementByClassName` 方法来访问 DOM 元素的例子。这创建了一个代表文档中所有使用
    `notice` 类的元素的集合。需要进一步步骤来访问每个元素，例如使用循环：
- en: '[PRE230]'
  id: totrans-868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: Creating Elements and Content in the DOM
  id: totrans-869
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 DOM 中创建元素和内容
- en: 'You may want JavaScript to add HTML elements and content to a web page. This
    is done by updating the DOM. The `document` object has two methods that are useful
    for this:'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望 JavaScript 向网页添加 HTML 元素和内容。这是通过更新 DOM 来完成的。`document` 对象有两个用于此的有用方法：
- en: '`createElement(tag name)`: Creates an `HTMLElement` object for the HTML tag
    name that''s supplied.'
  id: totrans-871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createElement(tag name)`: 为提供的 HTML 标签名创建一个 `HTMLElement` 对象。'
- en: '`createTextNode(data)`: Creates a text object that can be placed inside an
    HTML element, for example, inside an `h1` or a `p` element. The data argument
    is a string.'
  id: totrans-872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createTextNode(data)`: 创建一个可以放置在 HTML 元素内部的文本对象，例如，在 `h1` 或 `p` 元素内部。数据参数是一个字符串。'
- en: 'The following is an example of the `document` object''s `createElement` method
    being used to create an `li` element:'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用 `document` 对象的 `createElement` 方法创建 `li` 元素的例子：
- en: '[PRE231]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: 'The following is an example of the `document` object''s `createTextNode` method
    being used to create a `Milk Moon` element:'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用 `document` 对象的 `createTextNode` 方法创建 `Milk Moon` 元素的例子：
- en: '[PRE232]'
  id: totrans-876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: 'Putting this all together, we can append elements and text nodes to the DOM.
    Consider the following HTML list of names for the November full moons:'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些放在一起，我们可以将元素和文本节点添加到 DOM 中。考虑以下 HTML 列表，列出 11 月的满月名称：
- en: '[PRE233]'
  id: totrans-878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: 'Suppose we want to append another `li` element to the Milk Moon. To do that,
    we use the `document` object''s `createElement` method to create an `li` element:'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要将另一个 `li` 元素添加到牛奶月。为此，我们使用 `document` 对象的 `createElement` 方法创建一个 `li`
    元素：
- en: '[PRE234]'
  id: totrans-880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: 'The `createElement` method returns an `HTMLElement` object. It provides the
    `appendChild` method, which we can use in this instance. For the `appendChild`
    method argument, the `document` object''s `createTextNode` method can supply the
    required text node:'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: '`createElement` 方法返回一个 `HTMLElement` 对象。它提供了 `appendChild` 方法，我们可以在这种情况下使用它。对于
    `appendChild` 方法的参数，`document` 对象的 `createTextNode` 方法可以提供所需的文本节点：'
- en: '[PRE235]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: 'The resulting DOM is as follows:'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 最终生成的 DOM 如下所示：
- en: '[PRE236]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: 'Let''s take this a bit further and assume that we have a list of full moon
    names in an array:'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更进一步，并假设我们有一个包含满月名称的数组：
- en: '[PRE237]'
  id: totrans-886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: 'Now, we want to use the array to populate a `ul` element that has the `id`
    attribute of `full-moons`:'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想要使用数组来填充具有 `id` 属性为 `full-moons` 的 `ul` 元素：
- en: '[PRE238]'
  id: totrans-888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: 'First, you may want to remove the existing `li` elements from the `u`l element.
    You can do that by using the `document.getElementById` method and the `innerHTML`
    property of the element:'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可能想要从 `ul` 元素中移除现有的 `li` 元素。你可以通过使用 `document.getElementById` 方法以及元素的 `innerHTML`
    属性来完成这个操作：
- en: '[PRE239]'
  id: totrans-890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: 'Next, we can loop through the array, appending `li` elements to the moon names:'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以遍历数组，将 `li` 元素添加到月球名称中：
- en: '[PRE240]'
  id: totrans-892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: 'The resulting DOM is as follows:'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: 最终生成的 DOM 如下所示：
- en: '[PRE241]'
  id: totrans-894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: DOM Events
  id: totrans-895
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DOM 事件
- en: 'Events are messages that you can provide to code so that it can handle it;
    for example, the user clicking a button on an HTML page. The document model objects
    use the `addEventListener` method to add your code so that it is processed when
    the event occurs. The syntax is as follows:'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 事件是您可以提供给代码的消息，以便它可以处理它；例如，用户在 HTML 页面上点击按钮。文档模型对象使用 `addEventListener` 方法添加您的代码，以便在事件发生时进行处理。语法如下：
- en: '[PRE242]'
  id: totrans-897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: The target is an object that has the `addEventListener` method. Objects representing
    elements in the DOM have this method.
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是一个具有 `addEventListener` 方法的对象。代表 DOM 中元素的对象具有此方法。
- en: The event type parameter is a predefined name for the event. For example, `click`
    is the name for a mouse click event. The listener is an object that has the ability
    to "listen" to events. Functions are objects that can "listen" to events. Functions
    that are used as event listeners have one parameter, which is an `Event` object.
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 事件类型参数是事件的预定义名称。例如，`click` 是鼠标点击事件的名称。监听器是一个具有“监听”事件能力的对象。函数是具有“监听”事件能力的对象。用作事件监听器的函数有一个参数，即
    `Event` 对象。
- en: 'For example, the `addEventListener` method for a click event that uses a function
    literal can be written as follows:'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用函数字面量的点击事件 `addEventListener` 方法可以写成如下：
- en: '[PRE243]'
  id: totrans-901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: 'Exercise 3.17: Working with DOM Manipulation and Events'
  id: totrans-902
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.17：使用 DOM 操作和事件
- en: 'This exercise will accept an input value from a web page that aims to guess
    a number from 1 to 10\. A button is used to check the input value against a random
    number that''s generated from 1 to 10\. Depending on whether there''s a match,
    the `display` property of the other elements on the web page is toggled to hide
    or show the element. Also, the number that''s generated is displayed on the page.
    Let''s get started:'
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习将接受来自网页的输入值，目的是猜测一个从 1 到 10 的数字。使用一个按钮来检查输入值是否与从 1 到 10 生成的随机数匹配。根据是否有匹配，网页上其他元素的
    `display` 属性将切换以隐藏或显示该元素。同时，生成的数字也会显示在页面上。让我们开始吧：
- en: Open the `number-guess.html` document in your web browser.
  id: totrans-904
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网页浏览器中打开 `number-guess.html` 文档。
- en: Open the web developer console window using your web browser.
  id: totrans-905
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的网页浏览器打开开发者控制台窗口。
- en: First, we can start with the web browser `document` object.
  id: totrans-906
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们可以从网页的 `document` 对象开始。
- en: Type the items on the lines beginning with the `>` symbol. The console window
    will show a response on the lines beginning with the `<·` symbol.
  id: totrans-907
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以 `>` 符号开头的行。控制台窗口将在以 `<·` 符号开头的行上显示响应。
- en: Open the `number-guess.html` document in your code editor.
  id: totrans-908
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开 `number-guess.html` 文档。
- en: 'Let''s review some of the elements that will be accessed in JavaScript. First
    is the `input` element, which is used for entering the guess value. Note that
    its `id` attribute value is `number-guessed`. We are going to use the `id` attributes
    to get access to all the elements we use in JavaScript:'
  id: totrans-909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们回顾一下在 JavaScript 中将要访问的一些元素。首先是 `input` 元素，用于输入猜测值。请注意，它的 `id` 属性值为 `number-guessed`。我们将使用
    `id` 属性来获取我们在 JavaScript 中使用的所有元素：
- en: '[PRE244]'
  id: totrans-910
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: 'The next is the `button` element. The `id` attribute is `test-button`:'
  id: totrans-911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来是 `button` 元素。其 `id` 属性值为 `test-button`：
- en: '[PRE245]'
  id: totrans-912
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: 'The next is the `p` element. The `id` attribute is `results-msg`. This is the
    container for all the result messages. It has a `class` value of `hidden`. The
    `number-guess.css` file has the `display` property set to `none` for the `hidden`
    class:'
  id: totrans-913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来是 `p` 元素。其 `id` 属性值为 `results-msg`。这是所有结果消息的容器。它有一个 `class` 值为 `hidden`。`number-guess.css`
    文件将 `hidden` 类的 `display` 属性设置为 `none`：
- en: '[PRE246]'
  id: totrans-914
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: 'When the web page loads, this `p` element is not shown. The JavaScript will
    either hide or unhide this element:'
  id: totrans-915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当网页加载时，这个 `p` 元素不会显示。JavaScript 将隐藏或取消隐藏这个元素：
- en: '[PRE247]'
  id: totrans-916
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: 'Inside the `p` element, there are two `span` elements that contain the message
    for a guess that either matches or does not. They also use the `hidden` class.
    This is because, if their parent element is unhidden, these remain hidden until
    the code determines which to unhide. Each `span` element has an `id` attribute.
    The JavaScript will either hide or unhide each of these `span` elements:'
  id: totrans-917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `p` 元素内部有两个 `span` 元素，包含匹配或不匹配的猜测消息。它们也使用了 `hidden` 类。这是因为，如果它们的父元素被取消隐藏，这些元素将保持隐藏状态，直到代码确定要取消隐藏哪个。每个
    `span` 元素都有一个 `id` 属性。JavaScript 将隐藏或取消隐藏这些 `span` 元素中的每一个：
- en: '[PRE248]'
  id: totrans-918
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: 'One more element inside the `p` element is a `span` element to show the number
    to guess. The JavaScript will update this:'
  id: totrans-919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `p` 元素内部还有一个 `span` 元素，用于显示猜测的数字。JavaScript 将更新这个：
- en: '[PRE249]'
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: Open the `number-guess.js` document in your code editor, replace all of its
    content with the following code, and then save it.
  id: totrans-921
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开 `number-guess.js` 文档，将其所有内容替换为以下代码，然后保存。
- en: The first line creates an object for the element with `idtest-button` using
    the `document` object's `getElementByID` method.
  id: totrans-922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一行使用 `document` 对象的 `getElementByID` 方法创建了一个具有 `idtest-button` 的元素对象。
- en: The second line adds the function named `testMatch` as the listener for the
    click event on the button.
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二行添加了一个名为 `testMatch` 的函数，作为按钮点击事件的监听器。
- en: 'The following is the `testMatch` function and a message to the console so that
    we can test it:'
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是 `testMatch` 函数和一条发送到控制台的消息，以便我们可以测试它：
- en: '[PRE250]'
  id: totrans-925
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: Reload the `number-guess.html` web page in your web browser with the console
    window open and click the `Test Your Guess` button.
  id: totrans-926
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中重新加载 `number-guess.html` 网页，同时打开控制台窗口，并点击 `测试你的猜测` 按钮。
- en: 'You should see the following message in the console window:'
  id: totrans-927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该在控制台窗口中看到以下消息：
- en: '[PRE251]'
  id: totrans-928
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: Edit the `number-guess.js` document, update it using the bolded text, and then
    save it.
  id: totrans-929
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `number-guess.js` 文档，使用粗体文本更新它，然后保存。
- en: 'At the top of the file, all the elements we need to access in the HTML have
    been assigned to a variable:'
  id: totrans-930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在文件顶部，我们需要访问的 HTML 中的所有元素都已分配给一个变量：
- en: '[PRE252]'
  id: totrans-931
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: 'Next, add the DOM interface to get the `value` property from the input element''s
    `guessInputEle` object. In case the user did not enter an integer, the `parseInt`
    JavaScript built-in function will flag that as not a number. Then, the `if` statement
    expression is true only if the number is between 1 and 10 inclusive:'
  id: totrans-932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，添加 DOM 接口以从输入元素的 `guessInputEle` 对象中获取 `value` 属性。如果用户没有输入整数，`parseInt`
    JavaScript 内置函数将标记它不是数字。然后，只有当数字在 `1` 到 `10`（包括 `1` 和 `10`）之间时，`if` 语句表达式才是真的：
- en: '[PRE253]'
  id: totrans-933
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: In the `if` statement block, the first step is to get a random integer from
    `1` to `10`. Then, we use an `if...else` statement block if the input number matches
    the generated number.
  id: totrans-934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `if` 语句块中，第一步是从 `1` 到 `10` 获取一个随机整数。然后，如果输入数字与生成的数字匹配，我们使用 `if...else` 语句块。
- en: 'For now, we can test this with outputs to the console window:'
  id: totrans-935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前，我们可以通过控制台输出进行测试：
- en: '[PRE254]'
  id: totrans-936
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: Reload the `number-guess.html` web page in your web browser with the console
    window open, enter an integer from `1` to `10`, and click the `Test Your Guess`
    button a few times.
  id: totrans-937
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中重新加载 `number-guess.html` 网页，同时打开控制台窗口，输入一个从 `1` 到 `10` 的整数，然后多次点击 `测试你的猜测`
    按钮。
- en: 'Here are two test results:'
  id: totrans-938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是两个测试结果：
- en: '[PRE255]'
  id: totrans-939
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: Try invalid values such as letters. There should be no output to the console.
  id: totrans-940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尝试无效值，如字母。不应该有输出到控制台。
- en: Edit the `number-guess.js` document, update it using the bolded text, and then
    save it.
  id: totrans-941
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `number-guess.js` 文档，使用粗体文本更新它，然后保存。
- en: 'Now, we can add in the steps for updating the DOM elements with the results.
    To start, all the result elements are hidden when the button is clicked:'
  id: totrans-942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们可以添加更新 DOM 元素的步骤。首先，当按钮被点击时，所有结果元素都是隐藏的：
- en: '[PRE256]'
  id: totrans-943
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'First, the hidden container for the message elements is displayed. Then, depending
    on whether there is a match or not, the element showing that result is displayed.
    Finally, the number to guess is updated in the element that was created for it:'
  id: totrans-944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，显示用于消息元素的隐藏容器。然后，根据是否有匹配项，显示显示该结果的元素。最后，在为该数字创建的元素中更新要猜测的数字：
- en: '[PRE257]'
  id: totrans-945
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: Reload the `number-guess.html` web page in your web browser with the console
    window open and repeatedly click the `Test Your Guess` button with a value entered.
  id: totrans-946
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中重新加载 `number-guess.html` 网页，同时打开控制台窗口，并多次点击 `测试你的猜测` 按钮输入值。
- en: 'The result of a matching output is as follows:'
  id: totrans-947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配输出的结果如下：
- en: '![Figure 3.13: Matched value'
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.13：匹配值'
- en: '](img/C14377_03_13.jpg)'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 C14377_03_13.jpg](img/C14377_03_13.jpg)'
- en: 'Figure 3.13: Matched value'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13：匹配值
- en: 'The result of a non-matching output is as follows:'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 不匹配输出的结果如下：
- en: '![Figure 3.14: Non matched value'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.14：不匹配值'
- en: '](img/C14377_03_14.jpg)'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 C14377_03_14.jpg](img/C14377_03_14.jpg)'
- en: 'Figure 3.14: Non matched value'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14：不匹配值
- en: 'The result of an invalid entry output is as follows:'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 无效输入输出的结果如下：
- en: '![Figure 3.15: Invalid entry'
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.15：无效输入'
- en: '](img/C14377_03_15.jpg)'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 C14377_03_15.jpg](img/C14377_03_15.jpg)'
- en: 'Figure 3.15: Invalid entry'
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15：无效输入
- en: Debugging
  id: totrans-959
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试
- en: JavaScript programs may not work as intended. When that happens, it is usually
    called a bug.
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 程序可能无法按预期工作。当这种情况发生时，通常被称为错误。
- en: Silent Fail
  id: totrans-961
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 静默失败
- en: The people viewing your web page will not see any error message unless they
    know about the web developer console. This is called a silent fail approach. Silent
    fails keep web pages free of messages that would be cryptic to visitors. However,
    visitors may be puzzled when they try to interact with the web page and nothing
    happens and there are no messages.
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 观看你的网页的人不会看到任何错误消息，除非他们了解网络开发者控制台。这被称为静默失败方法。静默失败使网页免于向访客显示可能难以理解的错误消息。然而，当访客尝试与网页交互但没有发生任何操作且没有消息时，他们可能会感到困惑。
- en: 'There are two general categories of bugs: syntax and logic:'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: 错误通常分为两大类：语法和逻辑：
- en: 'Syntax: A syntax bug is a malformed JavaScript code.'
  id: totrans-964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法：语法错误是格式不正确的 JavaScript 代码。
- en: 'Logic: A logic error occurs when code that is syntactically correct does not
    perform as intended.'
  id: totrans-965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑：当语法正确的代码没有按预期执行时，会发生逻辑错误。
- en: Syntax Bugs
  id: totrans-966
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语法错误
- en: 'Your console window will show you syntax errors so that they are easy to find
    and correct. Here is an example that shows an error at line 25 of the JavaScript
    file named `convert-celsius-fahrenheit.js`:'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 你的控制台窗口会显示语法错误，以便它们容易找到和纠正。以下是一个示例，展示了名为`convert-celsius-fahrenheit.js`的JavaScript文件第25行的错误：
- en: '![Figure 3.16: Syntax errors in the console window'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.16：控制台窗口中的语法错误'
- en: '](img/C14377_03_16.jpg)'
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_03_16.jpg)'
- en: 'Figure 3.16: Syntax errors in the console window'
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.16：控制台窗口中的语法错误
- en: 'The error code has a description and a link to the line number in the file.
    When you click that link, the source code file is opened in a window and the line
    that''s involved is brought into view, as shown here:'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 错误代码包含描述和指向文件行号的链接。当你点击那个链接时，源代码文件将在窗口中打开，并显示相关的行，如下所示：
- en: '![Figure 3.17: Source code for the syntax error'
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.17：语法错误的源代码'
- en: '](img/C14377_03_17.jpg)'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_03_17.jpg)'
- en: 'Figure 3.17: Source code for the syntax error'
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.17：语法错误的源代码
- en: In this case, the error reports an `Unexpected token else`. Now, you need to
    look at the code to find out where the syntax is malformed. In this case, it is
    a missing `{` following the `if` statement on line 21\.
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，错误报告了一个“意外的else”标记。现在，你需要查看代码以找出语法错误的位置。在这种情况下，是在第21行的if语句后面缺少了一个`{`。
- en: 'Now, you can fix the syntax error in the source file and then reload the page:'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以修复源文件中的语法错误，然后重新加载页面：
- en: '![Figure 3.18: Syntax error at load time'
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.18：加载时的语法错误'
- en: '](img/C14377_03_18.jpg)'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_03_18.jpg)'
- en: 'Figure 3.18: Syntax error at load time'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.18：加载时的语法错误
- en: The syntax error appeared at load time. This means that when the JavaScript
    file was loaded by the web browser, the syntax error was revealed.
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 语法错误出现在加载时。这意味着当JavaScript文件被浏览器加载时，语法错误被揭示出来。
- en: 'However, a syntax error can appear at runtime. This happens while the code
    is executing, which does not need to happen when it''s loaded, such as with a
    button click, as shown in the following screenshot:'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，语法错误可以在运行时出现。这发生在代码执行时，而它不需要在加载时发生，例如在按钮点击时，如下面的截图所示：
- en: '![Figure 3.19: Code executed on the web page'
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.19：网页上执行的代码'
- en: '](img/C14377_03_19.jpg)'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_03_19.jpg)'
- en: 'Figure 3.19: Code executed on the web page'
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.19：网页上执行的代码
- en: Here is an example of where the code is executed after the user clicks the Convert
    button on the web page, the user sees no error. Nothing appears to happen when
    the button is clicked. If the web browser console window is open, we will see
    the offending syntax error.
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个示例，展示了用户在网页上点击“转换”按钮后代码的执行情况，用户看不到任何错误。点击按钮时没有任何反应。如果浏览器控制台窗口是打开的，我们将看到那个引起问题的语法错误。
- en: The error message also includes a call stack. A call stack is a list of functions
    and methods that were called to reach the line that was reported in the error
    message. This call stack shows the `getFahrenheit` function containing the failed
    line. Then, it shows that the function was called inside the `convertButtonClickEventHandler`
    method that was assigned to an `HTMLButtonElement` object. Notice that each item
    in the call stack will branch you to a line in the file.
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 错误消息还包括一个调用堆栈。调用堆栈是一系列被调用的函数和方法，它们被用来到达错误消息中报告的行。这个调用堆栈显示了包含失败行的`getFahrenheit`函数。然后，它显示该函数是在分配给`HTMLButtonElement`对象的`convertButtonClickEventHandler`方法内部被调用的。注意，调用堆栈中的每个项目都会将你带到文件中的一个行。
- en: We start at the link that is part of the error message, which opens the source
    view window and takes you to line 38\. The incorrect line is followed by a comment
    showing the correct line. You can see that it is a simple omission of the assignment
    operator. The code line now has to be fixed in the source file and then reloaded.
    Then, the `Convert` button is clicked again to see whether the syntax error has
    been fixed.
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从错误消息中的一部分链接开始，它打开源视图窗口并带你到第38行。错误行后面跟着一个注释，显示了正确的行。你可以看到这是一个简单的省略了赋值操作符的错误。现在必须修复源文件中的代码行，然后重新加载。然后再次点击“转换”按钮，以查看语法错误是否已修复。
- en: Logic Bugs
  id: totrans-988
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑错误
- en: A logic error occurs when code that is syntactically correct does not perform
    as intended. Logic errors often occur due to data and expressions not using or
    computing the correct values.
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码在语法上正确但未按预期执行时，会发生逻辑错误。逻辑错误通常是由于数据和使用或计算不正确的值而引起的。
- en: When a JavaScript program encounters a logic bug, it stops executing the remaining
    code statements. There is often no error message to pursue.
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 当JavaScript程序遇到逻辑错误时，它会停止执行剩余的代码语句。通常没有错误消息可以追踪。
- en: This makes logic errors more challenging to resolve and you want to use debugging
    tools to aid in their resolution.
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得逻辑错误更难以解决，你希望使用调试工具来帮助解决它们。
- en: Debugging
  id: totrans-992
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试
- en: Fixing bugs is called debugging. Debugging requires tools, skills, and techniques.
    It usually involves correcting the source code.
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 修复错误被称为调试。调试需要工具、技能和技术。它通常涉及纠正源代码。
- en: Using the `console.log` method and showing the values in the console window
    is one tool we can use. This allows you to view values at certain points in the
    program to see whether they are the expected values. One of the drawbacks of this
    approach is that this requires you to put the `console.log` method in your source
    code, which ultimately needs to be removed as a best practice. Another issue is
    that arguments to the `console.log` methods are potentially bugs themselves.
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`console.log`方法和在控制台窗口中显示值是我们可以使用的一种工具。这允许你在程序的某些点上查看值，以查看它们是否是预期的值。这种方法的一个缺点是，这要求你在源代码中放置`console.log`方法，最终需要作为最佳实践将其删除。另一个问题是，`console.log`方法的参数可能是潜在的错误。
- en: The other alternative is to use a debugger. The top desktop web browsers have
    a JavaScript debugger.
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是使用调试器。顶部的桌面网络浏览器都有JavaScript调试器。
- en: Debuggers
  id: totrans-996
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试器
- en: 'To help resolve logical errors, you usually need a debugger. A debugger is
    a tool that lets you pause a program, follow each step, and examine the data values
    at those steps. Most desktop web browsers have a debugger built into its web developer
    view. Here is an example of the debugger for the Chrome web browser''s developer
    tools:'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助解决逻辑错误，你通常需要一个调试器。调试器是一种允许你暂停程序、跟踪每个步骤并检查这些步骤的数据值的工具。大多数桌面网络浏览器都将其调试器内置在其网络开发者视图中。以下是一个Chrome网络浏览器开发者工具的调试器示例：
- en: '![Figure 3.20: Setting breaking points for the Chrome web browser'
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.20：为Chrome网络浏览器设置断点'
- en: '](img/C14377_03_20.jpg)'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/C14377_03_20.jpg)'
- en: 'Figure 3.20: Setting breaking points for the Chrome web browser'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.20：为Chrome网络浏览器设置断点
- en: One of its most important features is setting breakpoints. A breakpoint pauses
    the code's execution. In this example, there is a breakpoint at line 34\. It is
    shown not only in a `Breakpoints` panel but also in the source window, with a
    symbol on the line number. The symbol on the line number is actually a toggle
    to set or unset breakpoints. The `Breakpoints` panel is handy when you have multiple
    breakpoints spread out in the code and you need to enable or disable them without
    having to find the code line in the source window.
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 它最重要的功能之一是设置断点。断点会暂停代码的执行。在这个例子中，第34行有一个断点。它不仅显示在“断点”面板中，还显示在源窗口中，行号上有符号。行号上的符号实际上是一个切换，用于设置或清除断点。当你有多个断点分散在代码中，并且需要启用或禁用它们而不必在源窗口中找到代码行时，“断点”面板非常有用。
- en: 'Once the code execution hits the breakpoint, then you can inspect the expressions
    by hovering a mouse pointer over the code. There is also a window that keeps all
    the data values organized, ready for inspection. For example, the `guessedNumber`
    variable is shown as `5` in two places in the following screenshot:'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码执行到达断点，你就可以通过将鼠标指针悬停在代码上检查表达式。还有一个窗口，它将所有数据值组织起来，以便检查。例如，在下面的屏幕截图中，“guessedNumber”变量显示为“5”：
- en: '![Figure 3.21: Data value organized in the debugger tool'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.21：调试器工具中组织的数据值'
- en: '](img/C14377_03_21.jpg)'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/C14377_03_21.jpg)'
- en: 'Figure 3.21: Data value organized in the debugger tool'
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.21：调试器工具中组织的数据值
- en: 'Once the execution has been paused, you can control the execution of the code
    using the debugger menu:'
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行被暂停，你可以使用调试器菜单控制代码的执行：
- en: '![Figure 3.22: Debugger Menu'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.22：调试器菜单'
- en: '](img/C14377_03_22.jpg)'
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/C14377_03_22.jpg)'
- en: 'Figure 3.22: Debugger Menu'
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.22：调试器菜单
- en: 'The first four choices are a good place to start:'
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: 前四个选项是一个好的开始地方：
- en: '**Resume**: The first choice restarts the JavaScript code''s execution until
    it ends or reaches another breakpoint.'
  id: totrans-1011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**摘要**：第一个选项重新启动JavaScript代码的执行，直到结束或达到另一个断点。'
- en: '**Step Over**: The second choice will not step into a function, but into all
    the code in a function it calls is executed. This is useful because there may
    not only be many functions you have written but also third-party functions that
    have been written that do not require a step-by-step investigation.'
  id: totrans-1012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**覆盖步骤**：第二个选项不会进入函数，而是进入它调用的所有代码。这很有用，因为可能不仅有您编写的许多函数，还有编写的第三方函数，这些函数不需要逐个检查。'
- en: '**Step Into**: The third choice does step into a function where you can proceed.
    You can think of this as executing one line at a time.'
  id: totrans-1013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进入步骤**：第三个选项会进入一个函数，您可以在其中继续。您可以将其视为逐行执行。'
- en: '**Step Out**: The fourth choice is a way to step out of a function to the line
    that called it.'
  id: totrans-1014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**退出步骤**：第四个选项是退出函数到调用它的行。'
- en: 'Activity 3.01: The To-Do List Shuffle Program'
  id: totrans-1015
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动三.01：待办事项列表打乱程序
- en: This activity will help you build a `todo` list web page. We will use JavaScript
    to load the list and shuffle the list after it has been loaded. A button labeled
    Shuffle has been added to the HTML file and the `ol` element has been assigned
    the ID, `todo-list`.
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 本活动将帮助您构建一个待办事项列表网页。我们将使用JavaScript来加载列表，并在加载后打乱列表。HTML文件中已添加一个标签为“打乱”的按钮，并将`ol`元素分配了ID，`todo-list`。
- en: 'The high-level steps for the activity are as follows:'
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 本活动的概要步骤如下：
- en: Use the `activity.js` file to write your code. This contains coding hint comments
    you may use if you desire. It also includes a function named `getNewShuffledArray`.
  id: totrans-1018
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`activity.js`文件编写您的代码。如果您愿意，它包含您可能使用的编码提示注释。它还包括一个名为`getNewShuffledArray`的函数。
- en: You need to load the `li` element `todo` items from JavaScript and then allow
    the user to randomize the list. You may approach the activity in two parts.
  id: totrans-1019
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要从JavaScript中加载`li`元素`todo`项，然后允许用户随机化列表。您可以将活动分为两部分来处理。
- en: In `todo` list items and create a function that updates the HTML DOM list items
    using an `ol` element and an array as parameters. The function will remove the
    previous `li` elements and iterate through the array to add new `li` elements
    with the values in the array parameter. Test before proceeding. You can find the
    HTML file at [https://packt.live/2XcP1GU](https://packt.live/2XcP1GU)
  id: totrans-1020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`todo`列表项中创建一个函数，使用`ol`元素和数组作为参数来更新HTML DOM列表项。该函数将删除之前的`li`元素，并遍历数组以添加具有数组参数中值的新的`li`元素。在继续之前进行测试。您可以在[https://packt.live/2XcP1GU](https://packt.live/2XcP1GU)找到HTML文件。
- en: In `todo` items and your previous function to update the `ol` element's list
    items. It also will use the `getNewShuffledArray` function to randomly shuffle
    an array and return the shuffled array.
  id: totrans-1021
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`todo`项中，并使用您之前编写的函数来更新`ol`元素的列表项。它还将使用`getNewShuffledArray`函数随机打乱数组并返回打乱后的数组。
- en: 'The output of this activity is as follows:'
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: 本活动的输出如下：
- en: '![Figure 3.23: The todo list Shuffle program'
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.23：待办事项列表打乱程序'
- en: '](img/C14377_03_23.jpg)'
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_03_23.jpg)'
- en: 'Figure 3.23: The To-Do list Shuffle program'
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.23：待办事项列表打乱程序
- en: Note
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution to this activity can be found on page 715.
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: 本活动的解决方案可在第715页找到。
- en: Summary
  id: totrans-1028
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: JavaScript programming is a problem-solving endeavor. It relies heavily on data
    and data expressions. At the start of this chapter, we mentioned that data could
    be people's names, temperature, image dimensions, the amount of disk storage,
    and total likes on a discussion group post. Data can be values for a user interface,
    such as screen coordinates, sizes, scroll values, colors, and fonts.
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript编程是一种解决问题的努力。它严重依赖于数据和数据表达式。在本章开头，我们提到数据可以是人们的名字、温度、图像尺寸、磁盘存储量以及讨论组帖子上的总点赞数。数据可以是用户界面的值，例如屏幕坐标、大小、滚动值、颜色和字体。
- en: A JavaScript program is a series of steps that use data. A program starts with
    an event. An event could be when a web browser finishes loading the web page,
    a mouse event, such as a click or rolling over a spot on the screen, such as a
    button or image, or when some data is received from a web server that was requested
    by JavaScript.
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: 一个JavaScript程序是一系列使用数据的步骤。程序从一个事件开始。事件可能是当网络浏览器完成网页加载时，鼠标事件，例如点击或鼠标悬停在屏幕上的某个位置，例如按钮或图像，或者当从请求JavaScript的Web服务器接收到一些数据时。
- en: Once the program begins, it executes the code statements sequentially and is
    directed by flow control statements such as `if`, `switch`, `for`, and `while`.
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦程序开始，它将按顺序执行代码语句，并由`if`、`switch`、`for`和`while`等流程控制语句指导。
- en: The code is organized into units called functions. Functions contain code that
    may need to be repeated in more than one part of a program, but with different
    data and different results. Functions can take data as input values and return
    a result; for example, Fahrenheit as input and Celsius as output.
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: 代码被组织成称为函数的单元。函数包含可能需要在程序的不同部分重复使用但具有不同数据和不同结果的代码。函数可以接受数据作为输入值并返回一个结果；例如，以华氏度作为输入，以摄氏度作为输出。
- en: JavaScript programs for web pages generally deal with the DOM. The DOM is just
    a large object that's created by the web browser. It is made up of all the data
    and functions
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 网页的JavaScript程序通常处理DOM。DOM只是由网络浏览器创建的一个大对象。它由所有数据和函数组成
- en: Before you try to solve every coding problem, you may find that other programmers
    have already solved many common problems and make their code available for you
    to use in the form of libraries and frameworks. For example, you could use JavaScript
    and the DOM to write code to animate user interface elements by sliding or fading
    them in and out of view. However, if someone has already solved that coding problem,
    you may want to use their code. In the next chapter, we will look at some popular
    libraries and frameworks that solve a wide range of problems for a web page.
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试解决每一个编码问题之前，你可能发现其他程序员已经解决了许多常见问题，并将他们的代码以库和框架的形式提供给你使用。例如，你可以使用JavaScript和DOM来编写代码，通过滑动或淡入淡出用户界面元素来动画化它们。然而，如果有人已经解决了那个编码问题，你可能想使用他们的代码。在下一章中，我们将探讨一些流行的库和框架，它们为网页解决了广泛的问题。
