- en: Chapter 10. Using More Than JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。使用不仅仅是JavaScript
- en: Throughout this book we have used only JavaScript. Well, it's called Node.js
    isn't it?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们只使用了JavaScript。嗯，它不就是叫Node.js吗？
- en: However, that doesn't mean that we can't use other languages with it. We can
    and as long as it compiles to JavaScript you are good to go.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不意味着我们不能使用其他语言。只要它编译成JavaScript，我们就可以使用，只要它编译成JavaScript，我们就可以使用。
- en: 'There is a big list of common languages that are available at: [https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-JS](https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-JS).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个常见语言的大列表可用：[https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-JS](https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-JS)。
- en: If you are missing your strongly typed language or just want a slightly different
    syntax, then there will surely be one option out there for you somewhere.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您错过了强类型语言，或者只是想要稍微不同的语法，那么肯定会有一个选项适合您。
- en: A couple of common languages include `CoffeeScript` and `TypeScript`, they work
    great with Node.js as they both compile to JavaScript. In this chapter, we will
    cover the usage of `CoffeeScript`. `TypeScript` is similar in usage; however,
    the syntax follows a similar path to C# and Java.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的语言包括`CoffeeScript`和`TypeScript`，它们与Node.js一起工作得很好，因为它们都编译成JavaScript。在本章中，我们将介绍`CoffeeScript`的用法。`TypeScript`的用法类似；然而，语法遵循与C#和Java类似的路径。
- en: CoffeeScript
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CoffeeScript
- en: 'It''s very simple to install and start using additional languages. Let''s have
    a look at CoffeeScript:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和开始使用其他语言非常简单。让我们来看看CoffeeScript：
- en: 'We need to install CoffeeScript globally, so that we can use a command similar
    to `node`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要全局安装CoffeeScript，这样我们就可以使用类似`node`的命令：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now we can run `coffee`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行`coffee`：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The syntax is very similar to JavaScript:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 语法与JavaScript非常相似：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Instead of using the `.js` extension, we use `.coffee`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`.coffee`而不是`.js`扩展名。
- en: 'First, we will create a CoffeeScript file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个CoffeeScript文件：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then to run it, all we need to do is use the `coffee` command, similar to the
    `node` command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后要运行它，我们只需要使用`coffee`命令，类似于`node`命令：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To compile our `.coffee` files into `.js`, we can use `-c`. Once compiled,
    we can run them directly with Node.js:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要将我们的`.coffee`文件编译成`.js`，我们可以使用`-c`。编译后，我们可以直接在Node.js中运行它们：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If we have a bunch of CoffeeScript that we want to compile to JavaScript all
    at once, we can use `coffee -c -o ./lib` .`/src`. This will take all `.coffee`
    files from `./src`, compile them to `.js` and then output them to `./lib`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一堆CoffeeScript想要一次性编译成JavaScript，我们可以使用`coffee -c -o ./lib` .`/src`。这将获取`./src`中的所有`.coffee`文件，将它们编译成`.js`，然后输出到`./lib`。
- en: 'You will need to compile all your files for other users to use our CoffeeScript
    code along side their JavaScript code. The alternative is to include CoffeeScript
    as a dependency and `require` the register file into your application, as shown:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要为其他用户编译所有文件，以便他们可以在他们的JavaScript代码旁边使用我们的CoffeeScript代码。另一种选择是将CoffeeScript作为依赖项并将注册文件`require`到您的应用程序中，如下所示：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You may need to do this if do not you wish to compile your CoffeeScript, or
    if you are using a tool that requires a JavaScript file such as Gulp or Grunt.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不希望编译您的CoffeeScript，或者您正在使用需要JavaScript文件的工具，如Gulp或Grunt，您可能需要这样做。
- en: Tip
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To see the equivalents between JavaScript and CoffeeScript you can use the site
    [http://js2.coffee/](http://js2.coffee/), it provides a simple way to compare
    the two on the fly.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看JavaScript和CoffeeScript之间的等价物，您可以使用该网站[http://js2.coffee/](http://js2.coffee/)，它提供了一种简单的比较两者的方法。
- en: CoffeeScript is basically just JavaScript; however, it has targeted readability
    and simplicity. With simplicity it also tries to limit the use of the bad parts
    of JavaScript and exposes the good parts.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: CoffeeScript基本上就是JavaScript；然而，它的目标是可读性和简单性。简单性也意味着它试图限制JavaScript的不好的部分，并暴露出好的部分。
- en: Using CoffeeScript is usually great for beginners, (and for experts), as it
    uses English language rather than computer language. For example, instead of using
    `===` ( triple equals ) to check if two values equal, we can just use the English
    word `is`. So, `x === y` becomes `x is y`, which means that there is no translating
    required when reading.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于初学者（和专家）来说，使用CoffeeScript通常是很好的，因为它使用英语而不是计算机语言。例如，我们可以使用英语单词`is`而不是`===`（三个等号）来检查两个值是否相等。因此，`x
    === y`变成了`x is y`，这意味着在阅读时不需要翻译。
- en: Along with `is`, there are other keywords, such as `isnt`, `not`, `or`, `and`,
    `yes` and `no`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`is`之外，还有其他关键字，如`isnt`，`not`，`or`，`and`，`yes`和`no`。
- en: Using these keywords instead of symbol operators gives clarity to the readers
    and programmers. The CoffeeScript has similar formatting to Python in the way
    functions and code blocks are declared; the indentation indicates when the block
    ends and begins
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些关键字而不是符号操作符可以为读者和程序员提供清晰度。CoffeeScript的格式与Python类似，函数和代码块的声明方式；缩进表示块的结束和开始。
- en: Code blocks and functions
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码块和函数
- en: 'In JavaScript you will usually group together blocks using curly braces, as
    shown in the following example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，您通常会使用大括号将块组合在一起，如下例所示：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Where as in CoffeeScript you will leave out all the curly braces, in fact all
    the braces are left out:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在CoffeeScript中，您将省略所有大括号，实际上所有括号都被省略了：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The same is true when declaring a function, notice that we are using an *arrow*
    rather than the keyword `function`. The parameter list is only required if you
    want named arguments:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明函数时也是如此，注意我们使用的是*箭头*而不是关键字`function`。参数列表只在需要命名参数时才需要：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: CoffeeScript tries to assume as much as possible while still giving the programmer
    enough control.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: CoffeeScript尝试尽可能多地假设，同时仍然给程序员足够的控制。
- en: 'You may have also noticed that I didn''t use the `var` keyword when declaring
    a function. This is because it is implicitly declared, as you can see by compiling
    the above code to JavaScript:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还注意到，当声明函数时，我没有使用`var`关键字。这是因为它是隐式声明的，您可以通过将上述代码编译成JavaScript来看到。
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can see in this compiled code that the last statement in the function is
    the return value, this means that we don''t need to declare the return value and
    just assume that the last value is returned. This makes it very simple to create
    one line functions, such as:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到在这个编译后的代码中，函数中的最后一个语句是返回值，这意味着我们不需要声明返回值，只需假设最后一个值被返回。这使得创建单行函数非常简单，例如：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Unlike JavaScript, you may provide default arguments for a function and this
    can be compared to C#; however, it''s not limited to only constants as it essentially
    executes the statement within the function:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与JavaScript不同，你可以为函数提供默认参数，这可以与C#进行比较；然而，它不仅限于常量，因为它本质上执行函数内的语句：
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can see this by compiling the above function as:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过编译上面的函数来看到这一点：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Essentially, all CoffeeScript does is check if the value is `null` or `undefined`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，CoffeeScript所做的就是检查值是否为`null`或`undefined`。
- en: The existential operator
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存在运算符
- en: You can check to see if a value is `null` or `undefined` using the existential
    operator, which checks to see if the value *exists*. This is indicated by using
    the question mark symbol after a variable; the statement will be true if the value
    exists and otherwise false.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用存在运算符来检查一个值是否为`null`或`undefined`，该运算符用于检查值是否*存在*。通过在变量后使用问号符号来表示；如果值存在则语句为真，否则为假。
- en: 'To use this in an expression:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在表达式中使用这个：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can use this as a shorthand operator as well, for example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将其作为简写运算符使用，例如：
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The above two examples of code will behave exactly the same and will actually
    compile to give the same code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上面两个代码示例的行为完全相同，实际上编译后会得到相同的代码：
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You may also use the existential operator to ensure a value exists before accessing
    a property of it. For example, if you want to get the time from a date, or `-1`
    if the date doesn''t exist:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用存在运算符来确保在访问其属性之前存在一个值。例如，如果你想从日期中获取时间，或者如果日期不存在则获取`-1`：
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Giving `date` the `null` value shows that we don''t mind if no value is passed:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 给`date`赋予`null`值表明我们不介意是否传递了值：
- en: When an object doesn't exist and the operator is used then the returned value
    is `undefined`, this means that we can use the same operator again to return a
    default value.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个对象不存在且使用了运算符时，返回的值是`undefined`，这意味着我们可以再次使用相同的运算符来返回一个默认值。
- en: Objects and arrays
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象和数组
- en: 'Along with all the assumptions that CoffeeScript tries to make, it surely does
    try to remove all the un-needed syntax plain JavaScript requires. Another instance
    of this can be seen while defining arrays and objects in which the use of a new
    line declares a new item. For example, you will usually define an array as:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 除了CoffeeScript试图做出的所有假设，它确实试图消除JavaScript中所有不必要的语法。另一个例子是在定义数组和对象时，使用新行声明一个新项。例如，通常你会这样定义一个数组：
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This still works; however, with CoffeeScript you can leave out the commas separating
    each item:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这仍然有效；然而，在CoffeeScript中你可以省略分隔每个项的逗号：
- en: '[PRE19]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can also mix the two styles together:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将这两种风格混合在一起：
- en: '[PRE20]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can do the same with objects, such as:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以对对象做同样的操作，比如：
- en: '[PRE21]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'With objects you can even leave out the curly braces and use indentation to
    show the differences in the object:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于对象，你甚至可以省略花括号，使用缩进来显示对象中的差异：
- en: '[PRE22]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To loop an array in CoffeeScript, all you need to do is use the `for…in` loop,
    such as:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在CoffeeScript中循环数组，你只需要使用`for…in`循环，例如：
- en: '[PRE23]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you do not wish to use the index of your item, you simply don''t ask for
    it:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想使用项目的索引，你可以简单地不要求它：
- en: '[PRE24]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As with JavaScript loops, you can use `break` and `continue` to control the
    flow.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 与JavaScript循环一样，你可以使用`break`和`continue`来控制流程。
- en: 'To loop an object in CoffeeScript you can use the `for…of` loop, this is a
    bit different from the `for…of` loop provided by JavaScript:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在CoffeeScript中循环对象可以使用`for…of`循环，这与JavaScript提供的`for…of`循环有些不同：
- en: '[PRE25]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As with the `for…in` loop, if you don''t want the value, exclude it:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与`for…in`循环一样，如果你不想要值，可以排除它：
- en: '[PRE26]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'For both types of loops, the naming is irrelevant:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于两种类型的循环，命名是无关紧要的：
- en: '[PRE27]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Classes
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类
- en: Unlike JavaScript, CoffeeScript provides a natural way to declare classes and
    inheritance.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与JavaScript不同，CoffeeScript提供了一种自然的方式来声明类和继承。
- en: 'To define a class in JavaScript, you need to declare a function first:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要在JavaScript中定义一个类，你需要先声明一个函数：
- en: '[PRE28]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then you will declare the `prototype` methods:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你会声明`prototype`方法：
- en: '[PRE29]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you have a `static` method, you can define this on the function rather than
    the prototype:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个`static`方法，你可以在函数上定义它，而不是在原型上：
- en: '[PRE30]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In CoffeeScript you can use the `class` keyword and give the class a name.
    You can then declare the constructor, static, and instance ( prototype ) methods:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在CoffeeScript中，你可以使用`class`关键字并给类命名。然后你可以声明构造函数、静态方法和实例（原型）方法：
- en: '[PRE31]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Usually, you place all your `static` methods above your constructor so that
    they stay separate from your instance methods. This avoids confusion, you may
    have noticed that I declared the static method `createUser` with a `@` prefix,
    this is how you define a static method in CoffeeScript. However, you can also
    use the traditional JavaScript method of `User.createUser = ->`, either way will
    work here.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你会将所有的`static`方法放在构造函数上面，这样它们就与实例方法分开了。这避免了混淆，你可能已经注意到我用`@`前缀声明了静态方法`createUser`，这是在CoffeeScript中定义静态方法的方式。然而，你也可以使用传统的JavaScript方法`User.createUser
    = ->`，两种方式都可以在这里工作。
- en: The code that is run when the instance is being created or *constructed* is
    called the constructor. This is the same terminology that is used in many other
    languages so it should be familiar. A constructor is essentially a function.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当实例被创建或*构造*时运行的代码被称为构造函数。这与许多其他语言使用的术语相同，所以应该很熟悉。构造函数本质上就是一个函数。
- en: All the instance methods are declared similarly to properties of an object.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所有实例方法的声明方式与对象的属性类似。
- en: 'With classes comes another symbol, the `@` symbol. When used on an instance,
    you can use it to refer to the `this` keyword. For example, the `getUsername`
    method can be written as:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 随着类的出现，还有另一个符号，即`@`符号。当在实例上使用时，您可以使用它来引用`this`关键字。例如，`getUsername`方法可以编写为：
- en: '[PRE32]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Or, if we want to drop the return statement and make it a one liner:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们想要删除返回语句并将其变成一行：
- en: '[PRE33]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `@` symbol can also be used in parameter lists to declare that we want
    the instance property to be set as the passed value. For example, if we had a
    `setUsername` method we can either do:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`@`符号也可以在参数列表中使用，以声明我们希望将实例属性设置为传递的值。例如，如果我们有一个`setUsername`方法，我们可以这样做：'
- en: '[PRE34]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Or we can do:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以这样做：
- en: '[PRE35]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Both the methods will compile to the same JavaScript code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法将编译为相同的JavaScript代码。
- en: 'Given the fact that we can use the `@` symbol in our parameter list, we can
    refactor our constructor function to:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们可以在参数列表中使用`@`符号，我们可以重构我们的构造函数为：
- en: '[PRE36]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Another advantage of using CoffeeScript class is that we can define inheritance.
    To do so, all we need to do is use the `extends` keyword, this is similar to other
    languages.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CoffeeScript类的另一个优势是我们可以定义继承。要做到这一点，我们所需要做的就是使用`extends`关键字，这与其他语言类似。
- en: In these examples, we want to have two *classes*, `Person` and `Robot` that
    extend the base `User` class.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，我们希望有两个*类*，`Person`和`Robot`，它们扩展了基本的`User`类。
- en: For our person, we want to be able to give them a name and an age along with
    the username that the `User` class requires.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的人，我们希望能够为他们提供一个名字和年龄，以及`User`类所需的用户名。
- en: 'First, we need to declare our class:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要声明我们的类：
- en: '[PRE37]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Then declare our `constructor`. In our `constructor`, we will call the `super`
    function, this will execute the constructor of the parent class `User` and we
    want to pass the username to it, as shown:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后声明我们的`constructor`。在我们的`constructor`中，我们将调用`super`函数，这将执行父类`User`的构造函数，并且我们希望将用户名传递给它，如下所示：
- en: '[PRE38]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We then add two methods, `getName` and `getAge`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们添加两个方法，`getName`和`getAge`：
- en: '[PRE39]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Next, we will do the same for `Robot`, except this time we only want a `username`
    and `@usage`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将对`Robot`做同样的事情，只是这次我们只需要一个`username`和`@usage`：
- en: '[PRE40]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We can now create instances of our classes and compare them, as shown here:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建我们的类的实例并进行比较，如下所示：
- en: '![Classes](img/B04729_10_01.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![类](img/B04729_10_01.jpg)'
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: CoffeeScript tries to make *good* assumptions with your code. This helps to
    remove some problems that JavaScript developers come across. For example, the
    difference between `==` and `===`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: CoffeeScript试图对您的代码进行*良好*的假设。这有助于消除JavaScript开发人员遇到的一些问题。例如，`==`和`===`之间的区别。
- en: You can learn more about the specific syntax of CoffeeScript at [http://coffeescript.org/](http://coffeescript.org/).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://coffeescript.org/](http://coffeescript.org/)了解有关CoffeeScript特定语法的更多信息。
- en: In this chapter we have covered utilizing another language. This can help alleviate
    the struggles with JavaScript's style or syntax for beginners. For people who
    are used to more language features, this is a big advantage as it helps remove
    the pitfalls that people usually come across.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经介绍了利用另一种语言。这可以帮助初学者减轻对JavaScript风格或语法的困扰。对于习惯于更多语言特性的人来说，这是一个很大的优势，因为它有助于消除人们通常遇到的陷阱。
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为Bentham Chang准备，Safari ID为bentham@gmail.com 用户编号：2843974 © 2015 Safari Books
    Online，LLC。此下载文件仅供个人使用，并受到服务条款的约束。任何其他用途均需版权所有者的事先书面同意。未经授权的使用、复制和/或分发严格禁止并违反适用法律。保留所有权利。
